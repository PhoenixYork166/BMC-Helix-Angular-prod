{"version":3,"file":"external-record-wizard.service.js","sourceRoot":"","sources":["../../../../../../../libs/com-bmc-arsys-rx-innovationstudio/src/lib/components/external-record-wizard/external-record-wizard.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { ComponentFactoryResolver, Injectable } from '@angular/core';\nimport { IFieldDefinition, RecordFieldOption, RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { RxFieldDefinitionManagerService } from '@helix/platform/record/designer';\nimport { RxWizardService } from '@helix/platform/shared/components';\nimport { RxIdService } from '@helix/platform/utils';\nimport { TranslateService } from '@ngx-translate/core';\nimport { chain, find, get, map, reject, some } from 'lodash';\nimport { DataSourceStepComponent } from './data-source-step/data-source-step.component';\nimport {\n  IExternalRecordDesignerOptions,\n  IExternalRecordWizardContext,\n  IWebApiDocumentSchemaField\n} from './external-record-wizard.types';\n\n@Injectable()\nexport class ExternalRecordWizardService {\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private rxIdService: RxIdService,\n    private rxFieldDefinitionManagerService: RxFieldDefinitionManagerService,\n    private rxWizardService: RxWizardService,\n    private translateService: TranslateService\n  ) {}\n\n  private systemFieldsNames = {\n    idFieldName: 'Record ID',\n    displayIdFieldName: 'Request ID'\n  };\n\n  open(): Promise<IExternalRecordDesignerOptions | null> {\n    const wizardConfig = {\n      title: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.title'),\n      allowFinish: true,\n      finishButtonLabel: this.translateService.instant('com.bmc.arsys.rx.client.common.save.label'),\n      steps: [\n        {\n          id: 'data-source',\n          name: this.translateService.instant(\n            'com.bmc.arsys.rx.innovation-studio.external-record-wizard.data-source.title'\n          ),\n          componentFactory: this.componentFactoryResolver.resolveComponentFactory(DataSourceStepComponent)\n        }\n      ]\n    };\n\n    return this.rxWizardService\n      .open({\n        context: {},\n        options: wizardConfig\n      })\n      .then((context: IExternalRecordWizardContext) => {\n        const webApiProperties = context?.webApi\n          ? {\n              vendorSchemaDescriptor: {\n                dataSourceEntity: {\n                  webApiDefinitionGuid: context.webApi.guid,\n                  documentDefinitionGuid: context.document.guid\n                },\n\n                dataSourceOperations: context.operations\n              },\n              tableName: context.dataSourceName\n            }\n          : {};\n\n        return context\n          ? {\n              dataSourceName: context.dataSourceName,\n              fieldDefinitions: context.webApi\n                ? this.getWebApiFieldDefinitions(context)\n                : this.getArsFieldDefinitions(context),\n              resourceType: RX_RECORD_DEFINITION.recordDefinitionTypes.external.recordDefinitionType,\n              tableName: context.tableName,\n              ...webApiProperties\n            }\n          : null;\n      });\n  }\n\n  private getArsFieldDefinitions(context: IExternalRecordWizardContext): IFieldDefinition[] {\n    const mappedCoreFields = map(context.mappedInternalFields, (coreField: IFieldDefinition) => {\n      coreField.fieldMapping.resourceType = RX_RECORD_DEFINITION.externalFieldMapping;\n\n      return coreField;\n    });\n\n    const selectedExternalFields = chain(context.selectedExternalFields)\n      .reject(isAssociatedField)\n      .map((externalField: IFieldDefinition) => {\n        externalField.id = this.rxIdService.generate();\n\n        if (externalField.fieldOption === RecordFieldOption.System) {\n          externalField.fieldOption = RecordFieldOption.Required;\n        }\n\n        ['lastChangedBy', 'lastUpdateTime'].forEach((columnProperty) => {\n          delete externalField[columnProperty];\n        });\n\n        return externalField;\n      })\n      .value();\n\n    function isAssociatedField(externalField: IFieldDefinition): boolean {\n      const path = 'fieldMapping.externalFieldId';\n\n      return some(context.mappedInternalFields, [path, get(externalField, path)]);\n    }\n\n    return mappedCoreFields.concat(selectedExternalFields);\n  }\n\n  private getWebApiFieldDefinitions(context: IExternalRecordWizardContext): IFieldDefinition[] {\n    let nonDocumentSchemaFields = [];\n\n    if (context.selectedFieldMapping?.id) {\n      nonDocumentSchemaFields = reject(context.nonDocumentSchemaFields, { name: this.systemFieldsNames.idFieldName });\n    }\n\n    if (context.selectedFieldMapping?.displayId) {\n      nonDocumentSchemaFields = reject(nonDocumentSchemaFields, { name: this.systemFieldsNames.displayIdFieldName });\n    }\n\n    return [...context.documentSchemaFields, ...nonDocumentSchemaFields].map((field: IWebApiDocumentSchemaField) => {\n      if (context.selectedFieldMapping?.id === field.path || field.name === this.systemFieldsNames.idFieldName) {\n        return getIdFieldDefinition(RX_RECORD_DEFINITION.coreFieldIds.id, field);\n      } else if (\n        context.selectedFieldMapping?.displayId === field.path ||\n        field.name === this.systemFieldsNames.displayIdFieldName\n      ) {\n        return getIdFieldDefinition(RX_RECORD_DEFINITION.coreFieldIds.displayId, field);\n      }\n\n      function getIdFieldDefinition(\n        coreFieldId: number,\n        documentSchemaField: IWebApiDocumentSchemaField\n      ): IFieldDefinition {\n        const fieldDefinition = find(RX_RECORD_DEFINITION.coreFields, { id: coreFieldId });\n\n        return {\n          fieldMapping: {\n            resourceType: RX_RECORD_DEFINITION.externalFieldMapping,\n            externalFieldId: documentSchemaField.path\n          },\n          ...fieldDefinition\n        } as IFieldDefinition;\n      }\n\n      const newFieldDefinition = this.rxFieldDefinitionManagerService.getNewFieldDefinitionModel(field.type, {\n        name: field.name\n      });\n\n      return {\n        fieldMapping: {\n          resourceType: RX_RECORD_DEFINITION.externalFieldMapping,\n          externalFieldId: field.path\n        },\n        ...newFieldDefinition\n      };\n    });\n  }\n}\n"]}