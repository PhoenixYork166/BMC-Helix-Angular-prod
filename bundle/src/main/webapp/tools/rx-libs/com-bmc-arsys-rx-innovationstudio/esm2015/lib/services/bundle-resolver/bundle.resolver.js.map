{"version":3,"file":"bundle.resolver.js","sourceRoot":"","sources":["../../../../../../../libs/com-bmc-arsys-rx-innovationstudio/src/lib/services/bundle-resolver/bundle.resolver.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap, tap, shareReplay } from 'rxjs/operators';\nimport {\n  IBundleContext,\n  IBundleDescriptor,\n  RxBundleService,\n  RxGlobalCacheService,\n  RxLogService\n} from '@helix/platform/shared/api';\nimport { RxViewActionRegistryService, RxViewComponentRegistryService } from '@helix/platform/view/api';\nimport { forEach, isEmpty, find, filter } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AxBundleResolver {\n  constructor(\n    private rxBundleService: RxBundleService,\n    private rxLogService: RxLogService,\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService\n  ) {}\n\n  resolve(): Observable<IBundleContext[]> {\n    let angularBundleDescriptors: IBundleDescriptor[] = [];\n\n    return this.rxGlobalCacheService.getLicensedBundleDescriptors().pipe(\n      map((bundleDescriptors: IBundleDescriptor[]) =>\n        bundleDescriptors.filter((bundleDescriptor: IBundleDescriptor) => bundleDescriptor.containsAngular)\n      ),\n      tap((bundleDescriptors: IBundleDescriptor[]) => (angularBundleDescriptors = bundleDescriptors)),\n      map((bundleDescriptors: IBundleDescriptor[]) =>\n        bundleDescriptors.map((bundleDescriptor: IBundleDescriptor) => bundleDescriptor.id)\n      ),\n      switchMap((bundleIds: string[]) =>\n        bundleIds.length ? this.rxBundleService.loadBundles(bundleIds, true) : of(bundleIds)\n      ),\n      switchMap((bundleContexts: IBundleContext[]) =>\n        this.rxViewComponentRegistryService.resolveAsyncDescriptors().pipe(map(() => bundleContexts))\n      ),\n      tap((bundleContexts: IBundleContext[]) => {\n        const registeredComponents = this.rxViewComponentRegistryService.getRegisteredComponents();\n        const registeredActions = this.rxViewActionRegistryService.getRegisteredActions();\n\n        forEach(bundleContexts, (bundleContext: IBundleContext) => {\n          if (bundleContext.isBundleCompiled) {\n            const bundleDescriptor: IBundleDescriptor | undefined = find(angularBundleDescriptors, {\n              id: bundleContext.bundleId\n            });\n\n            if (bundleDescriptor) {\n              const unregisteredComponents = filter(\n                bundleDescriptor.uiOptions.viewComponents,\n                (rxViewComponentName: string) => !registeredComponents.has(rxViewComponentName)\n              );\n\n              const unregisteredActions = filter(\n                bundleDescriptor.uiOptions.viewActions,\n                (rxViewActionName: string) => !registeredActions.has(rxViewActionName)\n              );\n\n              if (!isEmpty(unregisteredComponents)) {\n                this.rxLogService.warning(\n                  `${bundleDescriptor.id}: Unregistered view components found in the manifest \\n ${unregisteredComponents}`\n                );\n              }\n\n              if (!isEmpty(unregisteredActions)) {\n                this.rxLogService.warning(\n                  `${bundleDescriptor.id}: Unregistered view actions found in the manifest \\n ${unregisteredActions}`\n                );\n              }\n            }\n          }\n        });\n      }),\n      shareReplay(1)\n    );\n  }\n}\n"]}