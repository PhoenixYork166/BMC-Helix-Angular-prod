import { ComponentFactoryResolver, ElementRef, Injector, NgZone, OnInit, Renderer2 } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { AdaptModalService } from '@bmc-ux/adapt-angular';
import { IBundleDescriptor, RxAngularApplicationService, RxBundleCacheService, RxBundleService, RxGlobalCacheService, RxLocalizedStringsLoaderService, RxNotificationService, RxOverlayService, RxSessionExpirationService } from '@helix/platform/shared/api';
import { RxWizardService } from '@helix/platform/shared/components';
import { RxModalService } from '@helix/platform/ui-kit';
import { TranslateService } from '@ngx-translate/core';
import { AxBundleDeploymentService } from '../../services/bundle-deployment/bundle-deployment.service';
import { RxCreatePackageStatusDataPageService } from '../../services/bundle-deployment/create-package-status-data-page.service';
import { AxLocalizedStringsDataPageQuery } from '../../services/localization/localized-strings-data-page.service';
import { BundleDetails } from './bundle-details.class';
import * as i0 from "@angular/core";
export declare class BundleDetailsComponent implements OnInit {
    private activatedRoute;
    private componentFactoryResolver;
    private rxAngularApplicationService;
    private rxBundleCacheService;
    private rxBundleService;
    private rxWizardService;
    private injector;
    private axBundleDeploymentService;
    private rxModalService;
    private translateService;
    private adaptModalService;
    private router;
    private axLocalizedStringsDataPageQuery;
    private ngZone;
    private rxLocalizedStringsLoaderService;
    private rxNotificationService;
    private rxGlobalCacheService;
    private rxCreatePackageStatusDataPageService;
    private rxOverlayService;
    private renderer;
    private rxSessionExpirationService;
    private loadData$;
    fileInput: ElementRef;
    bundleTypes: {
        application: string;
        library: string;
    };
    bundleDescriptor$: import("rxjs").Observable<IBundleDescriptor>;
    bundleDetails$: import("rxjs").Observable<BundleDetails>;
    applicationLink$: import("rxjs").Observable<string>;
    shellDesignerLink$: import("rxjs").Observable<string>;
    constructor(activatedRoute: ActivatedRoute, componentFactoryResolver: ComponentFactoryResolver, rxAngularApplicationService: RxAngularApplicationService, rxBundleCacheService: RxBundleCacheService, rxBundleService: RxBundleService, rxWizardService: RxWizardService, injector: Injector, axBundleDeploymentService: AxBundleDeploymentService, rxModalService: RxModalService, translateService: TranslateService, adaptModalService: AdaptModalService, router: Router, axLocalizedStringsDataPageQuery: AxLocalizedStringsDataPageQuery, ngZone: NgZone, rxLocalizedStringsLoaderService: RxLocalizedStringsLoaderService, rxNotificationService: RxNotificationService, rxGlobalCacheService: RxGlobalCacheService, rxCreatePackageStatusDataPageService: RxCreatePackageStatusDataPageService, rxOverlayService: RxOverlayService, renderer: Renderer2, rxSessionExpirationService: RxSessionExpirationService);
    ngOnInit(): void;
    createContentPackage(): void;
    openContentPackageImportLogsModal(): void;
    createInstallPackage(): void;
    createUpdatePackage(): void;
    downloadTranslations(bundleId: string): void;
    manageContentPackages(): void;
    private openConfirmationModal;
    onClickFileInput(event: Event): void;
    reinstallBundle(bundle: BundleDetails): void;
    uninstallBundle(bundle: BundleDetails): void;
    updateBundle(bundle: BundleDetails): void;
    uploadTranslations(bundle: BundleDetails): void;
    importDefinitionsAndData(bundle: BundleDetails): void;
    private openModal;
    downloadContentPackage(bundleDetails: BundleDetails): void;
    publishChatEnabledService(bundleId: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BundleDetailsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BundleDetailsComponent, "ax-bundle-details", never, {}, {}, never, never>;
}
