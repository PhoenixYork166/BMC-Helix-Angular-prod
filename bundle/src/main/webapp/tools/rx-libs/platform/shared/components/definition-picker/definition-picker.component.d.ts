import { ChangeDetectorRef, ElementRef, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import { AdaptDropdownDirective, AdaptRxTextfieldComponent } from '@bmc-ux/adapt-angular';
import { IFormControlComponent, IFormFocusable, RxBundleCacheService, RxDefinitionNameService, RxGlobalCacheService } from '@helix/platform/shared/api';
import { RxStringService } from '@helix/platform/utils';
import { Observable, Subject } from 'rxjs';
import { ValueAccessor } from '../form-builder/value-accessor';
import { RxDefinitionPickerCacheService } from './definition-picker-cache.service';
import { RxDefinitionPickerScope } from './definition-picker.types';
import { IBundleDefinition, IBundleWithDefinitions } from './interfaces/bundle-with-definitions.interface';
import { IDefinitionDescriptor } from './interfaces/definition-descriptor.interface';
import { IDefinitionPickerComponentOptions } from './interfaces/definition-picker-component-options.interface';
import { IDefinitionProperties } from './interfaces/definition-properties.interface';
import { TranslateService } from '@ngx-translate/core';
import * as i0 from "@angular/core";
export declare class RxDefinitionPickerComponent extends ValueAccessor<string> implements IFormControlComponent, IFormFocusable, OnInit, OnDestroy, OnChanges {
    private renderer;
    private rxBundleCacheService;
    private rxDefinitionNameService;
    private rxDefinitionPickerCacheService;
    private rxGlobalCacheService;
    private rxStringService;
    private translateService;
    private changeDetectorRef;
    options: IDefinitionPickerComponentOptions;
    isDisabled: boolean;
    dropdownButton: ElementRef;
    dropdownMenuHeader: ElementRef;
    dropdown: AdaptDropdownDirective;
    config: IDefinitionPickerComponentOptions;
    definitionTreeElementRef: ElementRef;
    searchField: AdaptRxTextfieldComponent;
    searchMode: boolean;
    searchQuery: string;
    bundles$: Observable<IBundleWithDefinitions[]>;
    dropdownWidth: number;
    activeDefinitionScope: RxDefinitionPickerScope;
    definitionScopes: RxDefinitionPickerScope[];
    currentBundleFriendlyName$: Observable<string>;
    allDefinitionsLabel: string;
    onPickerToggle$: Subject<boolean>;
    private searchScope;
    private previousDefinitionScope;
    private definitionTypeDescriptor;
    private bundleId;
    private destroyed$;
    private globalDefinitionsLabel;
    private defaultOptions;
    private scrollHandlerThrottled;
    constructor(renderer: Renderer2, rxBundleCacheService: RxBundleCacheService, rxDefinitionNameService: RxDefinitionNameService, rxDefinitionPickerCacheService: RxDefinitionPickerCacheService, rxGlobalCacheService: RxGlobalCacheService, rxStringService: RxStringService, translateService: TranslateService, changeDetectorRef: ChangeDetectorRef);
    onWindowResize(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private scrollHandler;
    getDefinitionProperties(definitionDescriptors: IDefinitionDescriptor[]): Observable<IDefinitionProperties[]>;
    groupDefinitionsByBundle(definitionProperties: IDefinitionProperties[]): IBundleWithDefinitions[];
    getDefinitions(definitionScope: RxDefinitionPickerScope): Observable<IBundleWithDefinitions[]>;
    selectDefinition(definitionName: string): void;
    clearDefinition(e: Event): void;
    private setValue;
    setDropdownWidth(): void;
    enableSearchMode(searchQuery?: string): void;
    disableSearchMode(): void;
    resetPickerState(): void;
    search(searchQuery: string): Observable<IBundleWithDefinitions[]>;
    focus(): void;
    onPaste(event: ClipboardEvent): void;
    onKeypress(event: KeyboardEvent): void;
    trackByBundle(index: number, bundle: IBundleWithDefinitions): string;
    trackByDefinition(index: number, bundle: IBundleDefinition): string;
    ngOnChanges(changes: SimpleChanges): void;
    getCurrentBundleFriendlyName(): void;
    getBundleNameSearchQuery(searchQuery: string): string;
    getDefinitionNameSearchQuery(searchQuery: string): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<RxDefinitionPickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RxDefinitionPickerComponent, "rx-definition-picker", never, { "options": "options"; "isDisabled": "isDisabled"; }, {}, never, never>;
}
