import { AfterViewInit, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { IFormBuilderConfig, IFormBuilderEvent, IPlainObject } from '@helix/platform/shared/api';
import { RxGuidService } from '@helix/platform/utils';
import { Observable } from 'rxjs';
import { FormBuilderFactory } from '../../form-builder.factory';
import { FormSectionModel } from '../../models/form-section.model';
import { IFormBuilderEditor } from './form-builder-editor.interface';
import { FormBuilderService } from './form-builder.service';
import * as i0 from "@angular/core";
export declare class FormBuilderComponent implements OnInit, AfterViewInit, OnDestroy, OnChanges {
    private formBuilderFactory;
    private formBuilder;
    private rxGuidService;
    private formBuilderService;
    config: IFormBuilderConfig;
    model: IPlainObject;
    guid: string;
    isReadOnly?: boolean;
    focusEditor$?: Observable<IFormBuilderEditor>;
    modelChange: EventEmitter<any>;
    editorEvent: EventEmitter<IFormBuilderEvent>;
    formInitialized: EventEmitter<void>;
    layout: any;
    formGroup: FormGroup;
    private destroyed$;
    private formSubscription;
    constructor(formBuilderFactory: FormBuilderFactory, formBuilder: FormBuilder, rxGuidService: RxGuidService, formBuilderService: FormBuilderService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    trackByControl(index: number, item: FormSectionModel): string;
    ngOnDestroy(): void;
    dispatch(event: IFormBuilderEvent): void;
    private updateFormData;
    private prepareLayout;
    private getFormControlByName;
    private subscribeOnFormDataChange;
    private isFormControl;
    static ɵfac: i0.ɵɵFactoryDeclaration<FormBuilderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FormBuilderComponent, "rx-form-builder", never, { "config": "config"; "model": "model"; "guid": "guid"; "isReadOnly": "isReadOnly"; "focusEditor$": "focusEditor$"; }, { "modelChange": "modelChange"; "editorEvent": "editorEvent"; "formInitialized": "formInitialized"; }, never, never>;
}
