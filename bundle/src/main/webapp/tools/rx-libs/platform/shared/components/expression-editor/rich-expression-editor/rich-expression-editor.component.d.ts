import { Injector, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { AbstractControl, ControlValueAccessor } from '@angular/forms';
import { CKEditor4 } from 'ckeditor4-angular/ckeditor';
import { CKEditorComponent } from 'ckeditor4-angular';
import { ExpressionOperator, IDataDictionary, IExpressionOperator, IExpressionOperatorRow, RxDataDictionaryUtils, RxExpressionParserService, RxThemingService } from '@helix/platform/shared/api';
import { RxObjectUtilsService, RxTreeService } from '@helix/platform/utils';
import * as i0 from "@angular/core";
export declare class RichExpressionEditorComponent implements ControlValueAccessor, OnInit, OnChanges {
    private injector;
    private document;
    private rxTreeService;
    private rxExpressionParserService;
    private rxObjectUtilsService;
    private rxDataDictionaryUtils;
    private rxThemingService;
    type: CKEditor4.EditorType;
    ckConfig: CKEditor4.Config;
    onChange: (value: string) => void;
    dataDictionary: IDataDictionary;
    operatorRows: IExpressionOperatorRow[];
    ckComponent: CKEditorComponent;
    class: string;
    control: AbstractControl;
    operatorsByGroup: {
        platform: IExpressionOperator[];
        custom: IExpressionOperator[];
    };
    private initialValue;
    private isCkEditorInstanceReady;
    private onTouched;
    private dataDictionaryExpressionsMap;
    private menuItems;
    private iFrameContentWindow;
    private autocompleteTriggers;
    constructor(injector: Injector, document: any, rxTreeService: RxTreeService, rxExpressionParserService: RxExpressionParserService, rxObjectUtilsService: RxObjectUtilsService, rxDataDictionaryUtils: RxDataDictionaryUtils, rxThemingService: RxThemingService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    writeValue(value: string): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    onCkEditorInstanceReady(event: CKEditor4.EventInfo): void;
    insertHtml(html: string): void;
    isNarrowOperator(operator: ExpressionOperator): boolean;
    addOperator(value: string): void;
    private launchAutocomplete;
    private transformToTag;
    private normalizeExpression;
    private getLastExpressionFragment;
    private keydownHandler;
    private getCursor;
    static ɵfac: i0.ɵɵFactoryDeclaration<RichExpressionEditorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RichExpressionEditorComponent, "rx-rich-expression-editor", never, { "dataDictionary": "dataDictionary"; "operatorRows": "operatorRows"; }, {}, never, never>;
}
