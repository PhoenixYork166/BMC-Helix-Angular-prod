import { Injector, OnInit } from '@angular/core';
import { NgModel } from '@angular/forms';
import { ActiveModalRef, AdaptTreeNode } from '@bmc-ux/adapt-angular';
import { IDataDictionary, IExpressionOperatorRow, RxExpressionParserService } from '@helix/platform/shared/api';
import { RxModalClass } from '@helix/platform/ui-kit';
import { TranslateService } from '@ngx-translate/core';
import { IExpressionEditorLegendItem, IExpressionEditorProperty } from './expression-editor.interfaces';
import { RichExpressionEditorComponent } from './rich-expression-editor/rich-expression-editor.component';
import * as i0 from "@angular/core";
export declare class ExpressionEditorComponent extends RxModalClass implements OnInit {
    activeModalRef: ActiveModalRef;
    private translateService;
    private rxExpressionParserService;
    protected injector: Injector;
    get expression(): string;
    set expression(value: string);
    currentProperty: IExpressionEditorProperty;
    dataDictionary: IDataDictionary;
    legend: IExpressionEditorLegendItem[];
    operatorRows: IExpressionOperatorRow[];
    private isPropertyContextReady;
    private config;
    private expressionConfigurator;
    private availableExpressionProperties;
    private invalidExpressionMessage;
    get isReadOnly(): boolean;
    get isNavigationEnabled(): boolean;
    get isPreviousButtonDisabled(): boolean;
    get isNextButtonDisabled(): boolean;
    richExpressionEditor: RichExpressionEditorComponent;
    richExpressionEditorControl: NgModel;
    constructor(activeModalRef: ActiveModalRef, translateService: TranslateService, rxExpressionParserService: RxExpressionParserService, injector: Injector);
    ngOnInit(): void;
    onSave(): void;
    onNodeSelected(node: AdaptTreeNode): void;
    navigateToNextProperty(): void;
    navigateToPreviousProperty(): void;
    cancelModal(): void;
    isDirty(): boolean;
    private navigateToProperty;
    private initialize;
    private writeValue;
    private updateAvailableExpressionProperties;
    private hasPreviousProperty;
    private hasNextProperty;
    private getCurrentPropertyIndex;
    private getPropertyByIndex;
    static ɵfac: i0.ɵɵFactoryDeclaration<ExpressionEditorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ExpressionEditorComponent, "rx-expression-editor", never, {}, {}, never, never>;
}
