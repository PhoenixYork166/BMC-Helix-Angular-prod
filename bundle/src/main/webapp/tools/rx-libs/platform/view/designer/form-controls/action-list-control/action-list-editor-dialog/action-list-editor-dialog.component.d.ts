import { CdkDragDrop } from '@angular/cdk/drag-drop';
import { AfterViewInit, Injector, OnDestroy } from '@angular/core';
import { ActiveModalRef, TreeWrap } from '@bmc-ux/adapt-angular';
import { IPlainObject } from '@helix/platform/shared/api';
import { RxExpressionEditorService } from '@helix/platform/shared/components';
import { RxGuidService, RxStringService } from '@helix/platform/utils';
import { IViewActionDescriptor, IViewActionDesignModel, RxViewActionRegistryService } from '@helix/platform/view/api';
import { Observable } from 'rxjs';
import { ViewDesignerFacade } from '../../../+state/view-designer.facade';
import { IActionLabelsMap } from '../action-list-control.types';
import { RxActionListModelManagerService } from '../action-list-model-manager.service';
import { IActionEditorDialogConfig, IViewActionEditorDialogItem } from './action-list-editor-dialog.types';
import { TranslateService } from '@ngx-translate/core';
import { RxModalClass } from '@helix/platform/ui-kit';
import { TreeNode } from 'primeng/api/treenode';
import * as i0 from "@angular/core";
export declare class ActionListEditorDialogComponent extends RxModalClass implements AfterViewInit, OnDestroy {
    private rxViewActionRegistryService;
    private rxStringService;
    activeModalRef: ActiveModalRef;
    private viewDesignerFacade;
    private rxActionListModelManagerService;
    private rxExpressionEditorService;
    private rxGuidService;
    private translateService;
    protected injector: Injector;
    private accordionTabEls;
    availableActionDescriptors$: Observable<IViewActionDescriptor[]>;
    availableActionTreeNodes$: Observable<TreeNode<IViewActionDescriptor>[]>;
    actionLabelsMap$: Observable<IActionLabelsMap>;
    selectedActions: IViewActionEditorDialogItem[];
    config: IActionEditorDialogConfig;
    treeWrap: TreeWrap;
    private destroyed$;
    private isEditorDirtySubject;
    isSaveButtonDisabled$: Observable<boolean>;
    constructor(rxViewActionRegistryService: RxViewActionRegistryService, rxStringService: RxStringService, activeModalRef: ActiveModalRef, viewDesignerFacade: ViewDesignerFacade, rxActionListModelManagerService: RxActionListModelManagerService, rxExpressionEditorService: RxExpressionEditorService, rxGuidService: RxGuidService, translateService: TranslateService, injector: Injector);
    isDirty(): boolean;
    addAction(actionDescriptor: IViewActionDescriptor, index?: number): void;
    onSave(): void;
    removeAction(action: IViewActionEditorDialogItem): void;
    moveAction(fromIndex: number, toIndex: number): void;
    toggleOpen(expandAll: boolean): void;
    onSelectedActionsListDrop(event: CdkDragDrop<IViewActionDescriptor | IViewActionEditorDialogItem>): void;
    openExpressionEditor(model: IViewActionDesignModel<IPlainObject>, propertyPath: string, propertyLabel: string, isReadOnly: boolean, element: Element): void;
    onEvent(event: IPlainObject, model: IViewActionDesignModel, element: Element): void;
    private updateIndexProp;
    markEditorAsDirty(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    cancel(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ActionListEditorDialogComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ActionListEditorDialogComponent, "rx-action-list-editor-dialog", never, {}, {}, never, never>;
}
