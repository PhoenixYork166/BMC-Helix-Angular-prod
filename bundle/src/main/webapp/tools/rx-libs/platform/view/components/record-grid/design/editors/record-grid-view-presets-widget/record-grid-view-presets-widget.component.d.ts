import { Injector, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { Observable, ReplaySubject } from 'rxjs';
import { IFormWidgetComponent, IPlainObject } from '@helix/platform/shared/api';
import { InspectorWidgetBase, ISelectFormControlOptions, ISelectOption } from '@helix/platform/shared/components';
import { RxModalService } from '@helix/platform/ui-kit';
import { RxGuidService, RxJsonParserService } from '@helix/platform/utils';
import { IViewComponentDesignData, ViewDesignerFacade } from '@helix/platform/view/designer';
import { RecordGridDesignModel } from '../../record-grid-design.model';
import { IPresetItem, IRecordGridViewPresetsWidgetOptions } from './record-grid-view-presets-widget.types';
import { RxRecordGridDesignUtilsService } from '../../record-grid-design-utils.service';
import { IViewPresetSelectorDesignProperties } from '../../../../view-preset-selector/design/view-preset-selector-design.types';
import { RxRecordGridFilterHelperService } from '../../../common/services/record-grid-filter-helper.service';
import { IRxRecordGridFilter } from '../../../common/types/record-grid-filter.types';
import * as i0 from "@angular/core";
export declare class RecordGridViewPresetsWidgetComponent extends InspectorWidgetBase<IPlainObject, RecordGridDesignModel> implements OnInit, OnChanges, OnDestroy, IFormWidgetComponent {
    protected injector: Injector;
    private rxModalService;
    private viewDesignerFacade;
    private rxGuidService;
    private rxRecordGridDesignUtilsService;
    private rxRecordGridFilterHelperService;
    private rxJsonParserService;
    options: IRecordGridViewPresetsWidgetOptions;
    currentPresetSelectorGuid: string;
    currentPresetSelectorGuid$: ReplaySubject<string>;
    isDisabled: boolean;
    presetSelectors$: Observable<IViewComponentDesignData<IViewPresetSelectorDesignProperties>[]>;
    presetSelectorOptions$: Observable<ISelectOption[]>;
    private destroyed$;
    selectedPresetsList$: Observable<IPresetItem[]>;
    viewPresetSelectorProp$: Observable<string>;
    gridColumnGuids$: Observable<string[]>;
    selectOptions: ISelectFormControlOptions;
    constructor(injector: Injector, rxModalService: RxModalService, viewDesignerFacade: ViewDesignerFacade, rxGuidService: RxGuidService, rxRecordGridDesignUtilsService: RxRecordGridDesignUtilsService, rxRecordGridFilterHelperService: RxRecordGridFilterHelperService, rxJsonParserService: RxJsonParserService);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    private updateColumnPresets;
    ngOnDestroy(): void;
    private getPresetFilterComponentsForColumns;
    deserializeNamedOptions(recordGridFilters: IRxRecordGridFilter[]): IRxRecordGridFilter[];
    openEditor(preset?: IPresetItem): void;
    trackByGuid(index: number, item: IPresetItem): string;
    private onPresetModalClose;
    private updateViewPresetSelectorProp;
    static ɵfac: i0.ɵɵFactoryDeclaration<RecordGridViewPresetsWidgetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RecordGridViewPresetsWidgetComponent, "rx-record-grid-view-presets-widget", never, { "options": "options"; }, {}, never, never>;
}
