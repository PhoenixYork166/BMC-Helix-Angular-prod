import { IViewComponentDropPredicateData, ViewDesignerComponentModel } from '@helix/platform/view/designer';
import { IViewDesignerComponentModel } from '@helix/platform/view/api';
import { Observable } from 'rxjs';
import { IRecordEditorDesignProperties, IRecordEditorProperties } from './record-editor-design.types';
import { IRecordEditorSelectedFieldComponent } from './components/fields-inspector-widget/fields-inspector-widget.types';
export declare class RecordEditorDesignModel extends ViewDesignerComponentModel<IRecordEditorProperties, IRecordEditorDesignProperties> implements IViewDesignerComponentModel<IRecordEditorProperties, IRecordEditorDesignProperties> {
    private rxFieldDefinitionService;
    private rxViewComponentRegistryService;
    private rxRecordEditorDesignHelpersService;
    private rxDefinitionNameService;
    private updateInspector$;
    private associationOptions$;
    private isAssociationRequired$;
    private recordDefinitionName$;
    private mode$;
    private showReadOnlyState$;
    private targetExtensionContainerGuid$;
    private targetViewDefinitionName$;
    private recordDefinition$;
    private childComponentGuids$;
    private allChildFieldComponentGuids$;
    isExtensionView$: Observable<boolean>;
    childFieldIds$: Observable<string[]>;
    selectedFieldComponents$: Observable<IRecordEditorSelectedFieldComponent[]>;
    associationComponentGuids$: Observable<string[]>;
    associationDefinitionName$: Observable<string>;
    hasChildren$: Observable<boolean>;
    readonly systemFieldComponentGuids$: Observable<any[]>;
    recordFieldDefinitionItems$: Observable<import("./components/fields-inspector-widget/fields-inspector-widget.types").IRecordFieldDefinitionItem[]>;
    static getInitialProperties(initialProps?: IRecordEditorProperties): IRecordEditorDesignProperties;
    rxInit(): void;
    removeComponent(guids: string[]): void;
    updateSelectedFieldComponents(fieldIds: string[]): void;
    getPropertiesByName(properties: IRecordEditorDesignProperties): IRecordEditorProperties;
    _dropPredicate(data: IViewComponentDropPredicateData): boolean;
    _onBeforeModeChange(prevMode: string, currentMode: string): Promise<boolean>;
    dropPredicate(data: IViewComponentDropPredicateData): boolean;
    private _setCommonDataDictionary;
    private _setSettableProperties;
    private _getCommonProps;
    private _getRecordInstanceChildProps;
    private _getComponentName;
}
