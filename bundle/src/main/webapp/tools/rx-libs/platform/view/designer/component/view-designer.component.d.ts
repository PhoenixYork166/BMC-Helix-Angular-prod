import { ElementRef, EventEmitter, InjectionToken, Injector, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import { RxAssociationDefinitionCacheService } from '@helix/platform/association/api';
import { RxNamedListDefinitionCacheService } from '@helix/platform/named-list/api';
import { RxProcessDefinitionCacheService } from '@helix/platform/process/api';
import { RxRecordDefinitionCacheService } from '@helix/platform/record/api';
import { IFormBuilderEvent, IPlainObject, RxComponentCanDeactivateGuard, RxDefinitionNameService, RxFeatureService, RxLogService, RxNotificationService } from '@helix/platform/shared/api';
import { RxDefinitionPickerCacheService, RxExpressionEditorService, RxGainsightConfiguratorService } from '@helix/platform/shared/components';
import { IBreadcrumbItem, IValidationIssue, IValidationIssueSection, RxModalService, RxUtilityModalsService } from '@helix/platform/ui-kit';
import { RxViewDefinitionCacheService, RxViewDefinitionService } from '@helix/platform/view/api';
import { TranslateService } from '@ngx-translate/core';
import { Observable } from 'rxjs';
import { ViewDesignerFacade } from '../+state/view-designer.facade';
import { DropComponentData, IViewComponentDropData } from '../components/view-designer-canvas';
import { RxViewDefinitionGeneratorService } from '../core/view-definition-generator.service';
import { RxViewDesignerModels } from '../core/view-designer-models.service';
import { RxViewModel } from '../model/view-model.service';
import { IViewDesignerConfiguration } from '../public-interfaces';
import { RxViewDesignerHelperService } from './view-designer-helper.service';
import * as i0 from "@angular/core";
export declare const RX_VIEW_MODEL: InjectionToken<unknown>;
export declare class RxViewDesignerComponent implements OnInit, OnDestroy, OnChanges {
    viewDesignerFacade: ViewDesignerFacade;
    private rxNotificationService;
    private rxDefinitionPickerCacheService;
    private rxNamedListDefinitionCacheService;
    private rxModalService;
    private translateService;
    private rxUtilityModalsService;
    private rxViewDesignerHelperService;
    private rxExpressionEditorService;
    private rxViewDefinitionService;
    private rxComponentCanDeactivateGuard;
    private rxViewDefinitionGeneratorService;
    private rxViewDesignerModels;
    private rxLogService;
    private injector;
    private renderer;
    private rxRecordDefinitionCacheService;
    private rxAssociationDefinitionCacheService;
    private rxProcessDefinitionCacheService;
    private rxViewDefinitionCacheService;
    private rxGainsightConfiguratorService;
    private rxDefinitionNameService;
    private rxFeatureService;
    configuration: IViewDesignerConfiguration;
    viewDefinitionSaved: EventEmitter<string>;
    viewDefinitionErrorLoading: EventEmitter<void>;
    closeDesigner: EventEmitter<void>;
    viewPropertyInspectorElementRef: ElementRef;
    viewComponentPropertyInspectorElementRef: ElementRef;
    private destroyed$;
    private inspectorFocusEditorSubject;
    private isViewDefinitionChanged$;
    isPreviewAvailable$: Observable<boolean>;
    isSaveButtonDisabled$: Observable<boolean>;
    validationIssues$: Observable<IValidationIssueSection[]>;
    breadcrumbItems$: Observable<IBreadcrumbItem[]>;
    canvasLayout$: Observable<import("../components/view-designer-canvas").IViewDesignerCanvasLayout>;
    canvasDndListIds: string[];
    private extensionViewRootComponentType;
    isDesignMode: boolean;
    isStencilExpanded: boolean;
    isInspectorExpanded: boolean;
    isPageView: boolean;
    viewDefinitionName$: Observable<string>;
    inspectorFocusEditor$: Observable<{
        editorName: string;
        data: IPlainObject;
    }>;
    hasValidationErrors$: Observable<boolean>;
    hasValidationWarning$: Observable<boolean>;
    viewComponentInspectorEmptyText$: Observable<any>;
    selectedComponentModel$: Observable<import("@helix/platform/view/api").IViewDesignerComponentModel<IPlainObject, IPlainObject>>;
    isReadOnly$: Observable<boolean>;
    paletteComponents$: Observable<import("@helix/platform/view/api").IViewComponentDescriptor[]>;
    private viewDefinitionChangeSubscription;
    rxViewModel: RxViewModel | any;
    private isExtensionView;
    private isExtensionContainerSet;
    constructor(viewDesignerFacade: ViewDesignerFacade, rxNotificationService: RxNotificationService, rxDefinitionPickerCacheService: RxDefinitionPickerCacheService, rxNamedListDefinitionCacheService: RxNamedListDefinitionCacheService, rxModalService: RxModalService, translateService: TranslateService, rxUtilityModalsService: RxUtilityModalsService, rxViewDesignerHelperService: RxViewDesignerHelperService, rxExpressionEditorService: RxExpressionEditorService, rxViewDefinitionService: RxViewDefinitionService, rxComponentCanDeactivateGuard: RxComponentCanDeactivateGuard, rxViewDefinitionGeneratorService: RxViewDefinitionGeneratorService, rxViewDesignerModels: RxViewDesignerModels, rxLogService: RxLogService, injector: Injector, renderer: Renderer2, rxRecordDefinitionCacheService: RxRecordDefinitionCacheService, rxAssociationDefinitionCacheService: RxAssociationDefinitionCacheService, rxProcessDefinitionCacheService: RxProcessDefinitionCacheService, rxViewDefinitionCacheService: RxViewDefinitionCacheService, rxGainsightConfiguratorService: RxGainsightConfiguratorService, rxDefinitionNameService: RxDefinitionNameService, rxFeatureService: RxFeatureService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private initViewDesigner;
    private initViewDefinitionChangeSubscription;
    onSelectComponent(guid: string): void;
    onDropComponent(data: DropComponentData): void;
    onRemoveComponent(guid: string): void;
    onInspectorTabChange(event: {
        index: number;
    }): void;
    toggleDesignMode(): void;
    onComponentPropertiesChange(properties: IPlainObject): void;
    onEditorEvent(event: IFormBuilderEvent, inspectorElementRef: ElementRef): void;
    private getExpressionProperties;
    private openExpressionEditor;
    saveViewDefinition(): void;
    onCorrectIssue(validationIssue: IValidationIssue): void;
    correctValidationIssue(guid: string, propertyName: string, data?: IPlainObject): void;
    private revertCustomization;
    onViewPropertiesChange(properties: IPlainObject): void;
    showPreview(): void;
    canDeactivate(): boolean;
    onBeforeComponentDropInRoot(event: IViewComponentDropData): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RxViewDesignerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RxViewDesignerComponent, "rx-view-designer", never, { "configuration": "configuration"; }, { "viewDefinitionSaved": "viewDefinitionSaved"; "viewDefinitionErrorLoading": "viewDefinitionErrorLoading"; "closeDesigner": "closeDesigner"; }, never, never>;
}
