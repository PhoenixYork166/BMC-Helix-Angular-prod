import { OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { RxSelectOption, AdaptRxControlLabelTooltip } from '@bmc-ux/adapt-angular';
import { RxDefinitionNameService, IUserOverlayGroupDescriptorChildren, RxNotificationService, RxSystemConfigurationService } from '@helix/platform/shared/api';
import { RxCognitiveServiceService } from '../../cognitive-service.service';
import { IChatbotProvider } from '../../cognitive-service.interfaces';
import { TranslateService } from '@ngx-translate/core';
import * as i0 from "@angular/core";
export declare class CognitiveServiceChatbotComponent implements OnInit {
    private formBuilder;
    private rxCognitiveServiceService;
    private rxDefinitionNameService;
    private rxNotificationService;
    private rxSystemConfigurationService;
    private translateService;
    constructor(formBuilder: FormBuilder, rxCognitiveServiceService: RxCognitiveServiceService, rxDefinitionNameService: RxDefinitionNameService, rxNotificationService: RxNotificationService, rxSystemConfigurationService: RxSystemConfigurationService, translateService: TranslateService);
    isAdministrator: boolean;
    currentOverlayContext: IUserOverlayGroupDescriptorChildren;
    chatbotProvidersForm: FormGroup;
    initialChatbotProviderValues: IChatbotProvider;
    chatbotProcessDefinitionNameOptions: RxSelectOption[];
    private defaultSelection;
    approverSelectionTooltip: AdaptRxControlLabelTooltip;
    chatbotNotificationsIdleTimeTooltip: AdaptRxControlLabelTooltip;
    chatbotNotificationsMaxTimeTooltip: AdaptRxControlLabelTooltip;
    ngOnInit(): void;
    isFormDirty(): boolean;
    private getProcessDefinitionNameOptions;
    private loadChatbotSystemSettings;
    private setFormFieldValue;
    setDefaultSessionIdleTimeout(): void;
    setDefaultUserIdleTimeout(): void;
    setDefaultChatbotNotificationsIdleTime(): void;
    setDefaultChatbotNotificationsMaxTime(): void;
    save(): void;
    isSaveButtonDisabled(): boolean;
    isSaveButtonVisible(): boolean;
    optionFormatter: (processDefinitionNameOption: RxSelectOption) => string;
    static ɵfac: i0.ɵɵFactoryDeclaration<CognitiveServiceChatbotComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CognitiveServiceChatbotComponent, "rx-cognitive-service-chatbot", never, { "isAdministrator": "isAdministrator"; "currentOverlayContext": "currentOverlayContext"; }, {}, never, never>;
}
