import { Injector, OnDestroy, OnInit } from '@angular/core';
import { NgForm } from '@angular/forms';
import { DockedPanelContext, RxSelectOption, UploaderMode } from '@bmc-ux/adapt-angular';
import { IRecordDefinition, RxRecordDefinitionCacheService, RxRecordInstanceService } from '@helix/platform/record/api';
import { IPlainObject, RxDefinitionNameService } from '@helix/platform/shared/api';
import { IDefinitionPickerComponentOptions, IExpressionFormControlOptions, IGroupButtonFormControlOptions, RxExpressionEditorService } from '@helix/platform/shared/components';
import { RxModalClass } from '@helix/platform/ui-kit';
import { Observable } from 'rxjs';
import { RxCognitiveTrainingUtilsService } from '../../cognitive-training-utils.service';
import { ICognitiveTrainingDataSet } from '../../cognitive-training.types';
import { TranslateService } from '@ngx-translate/core';
import * as i0 from "@angular/core";
export declare class RecordDataSetBladeComponent extends RxModalClass implements OnInit, OnDestroy {
    private dockedPanelContext;
    private rxCognitiveTrainingUtilsService;
    private rxDefinitionNameService;
    private rxExpressionEditorService;
    private rxRecordDefinitionCacheService;
    private rxRecordInstanceService;
    private translateService;
    protected injector: Injector;
    recordDataSetForm: NgForm;
    contextData: IPlainObject;
    dataSet: ICognitiveTrainingDataSet;
    localeOptions: RxSelectOption[];
    queryExpressionOptions: IExpressionFormControlOptions;
    csvFileUploadMode: UploaderMode;
    recordDefinitionPickerOptions: IDefinitionPickerComponentOptions;
    filterModeOptions: IGroupButtonFormControlOptions;
    protected expressionConfigurator: any;
    private recordDefinitionName$;
    recordDefinition$: Observable<IRecordDefinition>;
    fieldOptions$: Observable<RxSelectOption[]>;
    constructor(dockedPanelContext: DockedPanelContext, rxCognitiveTrainingUtilsService: RxCognitiveTrainingUtilsService, rxDefinitionNameService: RxDefinitionNameService, rxExpressionEditorService: RxExpressionEditorService, rxRecordDefinitionCacheService: RxRecordDefinitionCacheService, rxRecordInstanceService: RxRecordInstanceService, translateService: TranslateService, injector: Injector);
    ngOnInit(): void;
    isDirty(): boolean;
    ngOnDestroy(): void;
    openExpressionEditor(): void;
    isBasicFilterMode(): boolean;
    isExpressionFilterMode(): boolean;
    optionFormatter: (opt: RxSelectOption) => any;
    fieldOptionsFormatter: (opt: RxSelectOption) => any;
    onRecordDefinitionNameChange(recordDefinitionName: string): void;
    onTrainDataPercentCounterChange(trainDataPercent: number): void;
    onTestDataPercentCounterChange(testDataPercent: number): void;
    onFilterModeChange(): void;
    onSaveClick(): void;
    onCloseClick(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RecordDataSetBladeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RecordDataSetBladeComponent, "rx-record-data-set-blade", never, {}, {}, never, never>;
}
