import { Injector, OnInit, QueryList } from '@angular/core';
import { ActiveModalRef, AdaptTreeComponent, AdaptTreeNode, RxSelectOption, TreeWrap } from '@bmc-ux/adapt-angular';
import { RxRecordDefinitionCacheService, RxRecordInstanceUtilsService, RxRecordInstanceDataPageService } from '@helix/platform/record/api';
import { RxGlobalCacheService } from '@helix/platform/shared/api';
import { IRxSelectWithPaginationOption, RxSelectWithPaginationComponent } from '@helix/platform/shared/components';
import { RxModalClass, RxModalService } from '@helix/platform/ui-kit';
import { RxTreeService } from '@helix/platform/utils';
import { TranslateService } from '@ngx-translate/core';
import { Subscription } from 'rxjs';
import { RxApprovalConfigurationService } from '../approval-configuration.service';
import { IAppRoles, IField, IUserInfo } from '../approval-configuration.types';
import { RxOrganizationDataPageService } from './organization-data-page.service';
import { RxSupportOrganizationDataPageService } from './support-organization-data-page.service';
import * as i0 from "@angular/core";
export declare class FlowApproversSelectorComponent extends RxModalClass implements OnInit {
    private rxTreeService;
    activeModalRef: ActiveModalRef;
    private rxModalService;
    private translateService;
    private rxGlobalCacheService;
    private rxRecordInstanceUtilsService;
    private rxOrganizationDataPageService;
    private rxSupportOrganizationDataPageService;
    private rxApprovalConfigurationService;
    private rxRecordDefinitionCacheService;
    private rxRecordInstanceDataPageService;
    protected injector: Injector;
    constructor(rxTreeService: RxTreeService, activeModalRef: ActiveModalRef, rxModalService: RxModalService, translateService: TranslateService, rxGlobalCacheService: RxGlobalCacheService, rxRecordInstanceUtilsService: RxRecordInstanceUtilsService, rxOrganizationDataPageService: RxOrganizationDataPageService, rxSupportOrganizationDataPageService: RxSupportOrganizationDataPageService, rxApprovalConfigurationService: RxApprovalConfigurationService, rxRecordDefinitionCacheService: RxRecordDefinitionCacheService, rxRecordInstanceDataPageService: RxRecordInstanceDataPageService, injector: Injector);
    approverType: RxSelectOption;
    approverTypes: RxSelectOption[];
    selectedApproverSelection: AdaptTreeNode[];
    selectedApprovers: AdaptTreeNode[];
    invalidMsg: string;
    busy: Subscription;
    hasUserInteracted: boolean;
    selectedCompanies: IRxSelectWithPaginationOption[];
    selectedOrganizations: IRxSelectWithPaginationOption[];
    selectedDepartments: IRxSelectWithPaginationOption[];
    selectedSupportCompanies: IRxSelectWithPaginationOption[];
    selectedSupportOrganizations: IRxSelectWithPaginationOption[];
    selectedSupportGroups: IRxSelectWithPaginationOption[];
    loadingMore: boolean;
    private pageSize;
    userSearchTextInput: string;
    loadedUsers: IUserInfo[];
    showLoadMoreButton: boolean;
    private startIndex;
    treeWrap: TreeWrap;
    availableFields: IField[];
    availableFunctionRolesByApplication: IAppRoles[];
    paginationComponents: QueryList<RxSelectWithPaginationComponent>;
    shouldShowTree: boolean;
    tree: QueryList<AdaptTreeComponent>;
    separatorArrow: string;
    companyLoaderFunc: any;
    organizationLoaderFunc: any;
    departmentLoaderFunc: any;
    supportOrganizationLoaderFunc: any;
    supportGroupLoaderFunc: any;
    isDirty(): boolean;
    ngOnInit(): void;
    switchApproversTree(): void;
    private companyLoader;
    getCompanyDataFormat(companyName: string): string;
    onToggleDropdown(isOpen: boolean): void;
    resetLoadedOptions(): void;
    private organizationLoader;
    private departmentLoader;
    private supportOrganizationLoader;
    private supportGroupLoader;
    private getAdditionalQueryExpression;
    loadUsers(inputEvent?: string): void;
    private getUserQueryExpression;
    loadFunctionalRoles(): void;
    removeApproversFromSelection(): void;
    private getNode;
    getFunctionalRoleDataFormat(guid: any): string;
    private transformFunctionRolesToNodeStructure;
    private transformFieldsToNodeStructure;
    private getPeopleDataFormat;
    private transformPeopleToNodeStructure;
    private getOrgDataFormat;
    getDeptDataFormat(company: string, org: string, dept: string): string;
    getSupportOrgDataFormat(supportCompany: string, supportOrg: string): string;
    getSupportGroupDataFormat(supportCompany: string, supportOrg: string, supportGroup: string): string;
    private transformToNodeStructure;
    onCompanySelectionChange(): void;
    onOrganizationSelectionChange(): void;
    onSupportCompanySelectionChange(): void;
    onSupportOrganizationSelectionChange(): void;
    private shouldMoveCompanies;
    private shouldMoveOrganizations;
    private shouldMoveDepartments;
    private shouldMoveSupportCompanies;
    private shouldMoveSupportOrganizations;
    private shouldMoveSupportGroups;
    private setFieldIdentifyingApprovers;
    moveToSelectedApprovers(): void;
    private reloadTree;
    private loadFieldIdentifyingApproversApprovers;
    noApproverSelected(): boolean;
    isInvalidFieIdentifyingApprover(): boolean;
    optionFormatter(option: RxSelectOption): string;
    isFieldIdentifyingSelection(): boolean;
    isCompanySelection(): boolean;
    isSupportCompanySelection(): boolean;
    isPeopleSelection(): boolean;
    isFunctionalRoleSelection(): boolean;
    completeSelection(): void;
    getEmptyApproverTree(): AdaptTreeNode[];
    private addExistingApproversToSelectedTree;
    private getHierarchyLabel;
    close(): void;
    private getDefaultSearchExpression;
    static ɵfac: i0.ɵɵFactoryDeclaration<FlowApproversSelectorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FlowApproversSelectorComponent, "rx-flow-approvers-selector", never, {}, {}, never, never>;
}
