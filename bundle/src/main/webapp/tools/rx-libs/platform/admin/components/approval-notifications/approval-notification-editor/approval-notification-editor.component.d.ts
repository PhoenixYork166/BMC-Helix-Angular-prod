import { Injector, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ActiveModalRef, AdaptRxControlLabelTooltip, AdaptTreeNode, KeyValueObject, RxSelectionChangeEvent, RxSelectOptionsGroup, TreeWrap } from '@bmc-ux/adapt-angular';
import { IApprovalNotification, IApprovalNotificationData, IApprovalTemplate } from '../approval-notifications.types';
import { TranslateService } from '@ngx-translate/core';
import { Observable } from 'rxjs';
import { IDefinitionPickerComponentOptions, IExpressionFormControlOptions, RxExpressionEditorService } from '@helix/platform/shared/components';
import { RxApprovalNotificationExpressionConfigurator } from '../approval-notifiction-expression-configurator/approval-notification-expression-configurator.class';
import { IDataPageResult, RxDefinitionNameService, RxNotificationService } from '@helix/platform/shared/api';
import { IRecordDefinition, RxRecordDefinitionCacheService, RxRecordInstanceDataPageService } from '@helix/platform/record/api';
import { RxApprovalNotificationsService } from '../approval-notifications.service';
import { RxModalClass } from '@helix/platform/ui-kit';
import * as i0 from "@angular/core";
export declare class ApprovalNotificationEditorComponent extends RxModalClass implements OnInit, OnDestroy {
    protected injector: Injector;
    private formBuilder;
    private activeModalRef;
    private rxRecordDefinitionCacheService;
    private rxExpressionEditorService;
    private rxRecordInstanceDataPageService;
    private rxApprovalNotificationsService;
    private translateService;
    private rxNotificationService;
    private rxDefinitionNameService;
    approvalNotificationForm: FormGroup;
    approvalNotificationData: IApprovalNotificationData;
    recordDefinitions: RxSelectOptionsGroup[];
    sendToOtherOptions: KeyValueObject[];
    emailProfileOptions: KeyValueObject[];
    emailTemplateOptions: IApprovalTemplate[];
    isEditMode: boolean;
    approvalNotification: IApprovalNotification;
    expressionFormControlOptions: IExpressionFormControlOptions;
    subjectExpressionFormControlOptions: IExpressionFormControlOptions;
    notificationMessageExpressionOptions: IExpressionFormControlOptions;
    groupedData: KeyValueObject;
    processList: string[];
    isTreeTouched: boolean;
    treeWrap: TreeWrap;
    private expressionDialogApi;
    private recordDefinitionSubject;
    protected subjectExpressionConfigurator: RxApprovalNotificationExpressionConfigurator;
    protected expressionConfigurator: RxApprovalNotificationExpressionConfigurator;
    selectedFlows: AdaptTreeNode[];
    availableFlows: AdaptTreeNode[];
    processDefinitionPickerOptions: IDefinitionPickerComponentOptions;
    notificationTypeTooltip: AdaptRxControlLabelTooltip;
    approverSelectionTooltip: AdaptRxControlLabelTooltip;
    sendToOptionValue: {
        allApprovers: string;
        selectedApprover: string;
    };
    sendToOption: {
        id: string;
        name: any;
    }[];
    globalNotificationOptionValue: {
        global: string;
        flows: string;
    };
    globalNotificationOptions: {
        label: any;
        value: string;
    }[];
    notificationMethodOptions: {
        id: string;
        name: any;
    }[];
    notifyOnOptions: {
        id: number;
        name: any;
    }[];
    handleTemplateDependentFieldSelection(event: boolean): void;
    optionFormatter(option: KeyValueObject): string;
    constructor(injector: Injector, formBuilder: FormBuilder, activeModalRef: ActiveModalRef, rxRecordDefinitionCacheService: RxRecordDefinitionCacheService, rxExpressionEditorService: RxExpressionEditorService, rxRecordInstanceDataPageService: RxRecordInstanceDataPageService, rxApprovalNotificationsService: RxApprovalNotificationsService, translateService: TranslateService, rxNotificationService: RxNotificationService, rxDefinitionNameService: RxDefinitionNameService);
    ngOnInit(): void;
    isDirty(): boolean;
    ngOnDestroy(): void;
    createApprovalNotificationForm(): FormGroup;
    reset(): void;
    onNotificationMethodChange(value: KeyValueObject): void;
    handleSendToOptionSelection(): void;
    initializeApprovalNotification(recordDefinitionName: string): Observable<[IRecordDefinition, IDataPageResult, IDataPageResult]>;
    initializeApprovalNotificationForm(): void;
    onRecordDefinitionChange(recordDefinitionOption: any): void;
    onSelectionChange(): void;
    private isGlobalNotification;
    prepareApprovalFlowTree(recordInstances: IDataPageResult): void;
    private updateParentNodesForSelectedFlows;
    initializeEmailProfiles(outgoingMailboxes: IDataPageResult, recordDefinitionName: string): void;
    initializeSendToFromControlOptions(recordDefinition: IRecordDefinition): void;
    private filterFieldDefinitions;
    buildExpression(propertyName: any): void;
    private selectApprovalNotificationExpression;
    private transformFormControlData;
    save(): void;
    update(): void;
    closeModal(): void;
    shouldUseTemplate(): boolean;
    showProcessDefinitionPicker(): boolean;
    private isRequiredForEmail;
    onNotifyChange(event?: RxSelectionChangeEvent): void;
    isNotificationOptionInvalid(): boolean;
    definitionOptionFormatter(option: KeyValueObject): string;
    private convertExpressionFromServerFormat;
    private convertExpressionToServerFormat;
    static ɵfac: i0.ɵɵFactoryDeclaration<ApprovalNotificationEditorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ApprovalNotificationEditorComponent, "rx-approval-notification-editor", never, {}, {}, never, never>;
}
