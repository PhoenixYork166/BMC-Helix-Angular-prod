import { OnInit, TemplateRef } from '@angular/core';
import { ColumnConfig, DataCellTemplateParams } from '@bmc-ux/adapt-table';
import { RxRecordInstanceDataPageService, RxRecordInstanceService } from '@helix/platform/record/api';
import { RxBundleCacheService, RxCommandFactoryService, RxCurrentUserService, RxDefinitionNameService, RxNotificationService } from '@helix/platform/shared/api';
import { RxModalService } from '@helix/platform/ui-kit';
import { RxJsonParserService } from '@helix/platform/utils';
import { IRowDataItem } from '@helix/platform/view/api';
import { IRecordGridConfig, RecordGridComponent } from '@helix/platform/view/components';
import { Observable } from 'rxjs';
import { RxCognitiveTrainingUtilsService } from '../../cognitive-training-utils.service';
import { ICognitiveTrainingDataSourceType, ICognitiveTrainingEvaluation, ICognitiveTrainingTab, ICognitiveTrainingType } from '../../cognitive-training.types';
import { TranslateService } from '@ngx-translate/core';
import * as i0 from "@angular/core";
export declare class CognitiveTrainingRecordGridComponent implements OnInit {
    private rxBundleCacheService;
    private rxCommandFactoryService;
    private rxCognitiveTrainingUtilsService;
    private rxCurrentUserService;
    private rxDefinitionNameService;
    private rxJsonParserService;
    private rxModalService;
    private rxNotificationService;
    private rxRecordInstanceDataPageService;
    private rxRecordInstanceService;
    private translateService;
    cognitiveTrainingRecordGrid: RecordGridComponent;
    chatbotNameCellTemplate: TemplateRef<DataCellTemplateParams>;
    dataSourceHistoryNameCellTemplate: TemplateRef<DataCellTemplateParams>;
    tab: ICognitiveTrainingTab;
    evaluationName: string;
    recordDefinitionName: string;
    trainingType: ICognitiveTrainingType;
    bundleId: string;
    isAdministrator: boolean;
    evaluation: ICognitiveTrainingEvaluation;
    recordGridConfig: Observable<IRecordGridConfig>;
    fileDataSourceType: ICognitiveTrainingDataSourceType;
    innovationSuiteDataSourceType: ICognitiveTrainingDataSourceType;
    constructor(rxBundleCacheService: RxBundleCacheService, rxCommandFactoryService: RxCommandFactoryService, rxCognitiveTrainingUtilsService: RxCognitiveTrainingUtilsService, rxCurrentUserService: RxCurrentUserService, rxDefinitionNameService: RxDefinitionNameService, rxJsonParserService: RxJsonParserService, rxModalService: RxModalService, rxNotificationService: RxNotificationService, rxRecordInstanceDataPageService: RxRecordInstanceDataPageService, rxRecordInstanceService: RxRecordInstanceService, translateService: TranslateService);
    ngOnInit(): void;
    createDataSet(dataSourceTypeName: string): void;
    editDataSet(dataSet: IRowDataItem): void;
    copyDataSet(dataSet: IRowDataItem): void;
    delete(): void;
    trainDataSet(dataSet: IRowDataItem): void;
    testDataSet(dataSet: IRowDataItem): void;
    downloadTrainingData(dataSet: IRowDataItem): void;
    downloadTestData(dataSet: IRowDataItem): void;
    downloadResults(dataSet: IRowDataItem): void;
    openInteractiveEvaluationBlade(): void;
    isDataSetsTab(): boolean;
    isTestResultsTab(): boolean;
    isAutoClassificationTrainingAndEvaluation(): boolean;
    isChatbotEvaluation(): boolean;
    formatDataSourceHistory(dataItem: string[], column: ColumnConfig): string;
    getCellValue(dataItem: string[], column: ColumnConfig): string;
    private isDataSetActionButtonDisabled;
    private isChatbotDataSetEditButtonDisabled;
    private isTestResultsDeletionRestricted;
    private openDockedPanel;
    static ɵfac: i0.ɵɵFactoryDeclaration<CognitiveTrainingRecordGridComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CognitiveTrainingRecordGridComponent, "rx-cognitive-training-record-grid", never, { "tab": "tab"; "evaluationName": "evaluationName"; "recordDefinitionName": "recordDefinitionName"; "trainingType": "trainingType"; }, {}, never, never>;
}
