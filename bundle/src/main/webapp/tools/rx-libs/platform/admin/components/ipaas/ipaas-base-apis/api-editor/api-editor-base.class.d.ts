import { Injector, OnDestroy, OnInit } from '@angular/core';
import { FormArray, FormGroup } from '@angular/forms';
import { ActiveModalRef, ActiveTabChangeEvent, RxSelectOption } from '@bmc-ux/adapt-angular';
import { Observable, Subscription } from 'rxjs';
import { IApiEditorFormData, IApiPath, IAuthType, IAuthTypeFields, IEnvironmentData, IIpaasApiDefinition, IOrganizationData } from '../ipaas-base-apis.types';
import { RxModalClass } from '@helix/platform/ui-kit';
import * as i0 from "@angular/core";
export declare abstract class ApiEditorBase extends RxModalClass implements OnInit, OnDestroy {
    protected activeModalRef: ActiveModalRef;
    protected injector: Injector;
    private formBuilder;
    private rxNotificationService;
    private translateService;
    private rxRecordInstanceDataPageService;
    ipaasApiEditorForm: FormGroup;
    headers: FormArray;
    queryParameters: FormArray;
    organizations: IOrganizationData[];
    environments: IEnvironmentData[];
    groupNameList: string[];
    methodTypeOptions: RxSelectOption[];
    authTypeOptions: RxSelectOption[];
    activeIndex: number;
    isEditMode: boolean;
    authTypeFields: IAuthTypeFields[];
    busy: Subscription;
    apiPaths: RxSelectOption[];
    loadingState: boolean;
    isCustomAuthType: boolean;
    private defaultSelection;
    private groupAndApiNameList;
    private apiPathDetails;
    private selectedApiPath;
    private readonly selectedApiDefinition;
    private initialApiDefinition;
    private destroyed$;
    private authTypeFieldDetails;
    protected selectedOrganization: IOrganizationData;
    protected constructor(activeModalRef: ActiveModalRef, injector: Injector);
    ngOnInit(): void;
    isDirty(): boolean;
    private createFormItem;
    private customAuthTypeFormItem;
    optionFormatterLabel: (option: RxSelectOption) => string;
    optionFormatterName: (option: RxSelectOption) => string;
    getEnvironments(organization: IOrganizationData): void;
    private setApiVariables;
    getAuthTypes(method: string): void;
    private onEditMethodAndAuthTypeUpdate;
    getApiPaths(environment?: IEnvironmentData): void;
    getApiMethods(apiPath: string): void;
    private getGroupAndApiDetails;
    getAuthTypeFields(authType: IAuthType): void;
    private createAuthTypeFormFields;
    tabChanged({ index }: ActiveTabChangeEvent): void;
    addHeader(): void;
    removeHeader(index: number): void;
    addQueryParameter(): void;
    removeQueryParameter(index: number): void;
    addCustomAuthTypeHeader(): void;
    removeCustomAuthTypeHeader(index: number): void;
    addCustomAuthTypeQueryParam(): void;
    removeCustomAuthTypeQueryParam(index: number): void;
    isSaveButtonDisabled(): boolean;
    save(): void;
    cancel(): void;
    ngOnDestroy(): void;
    private resetFormFields;
    protected abstract getOrganizationsAndEnvironments(): Observable<IOrganizationData[]>;
    protected abstract getApiPathDefinitions(environment: IEnvironmentData): Observable<IApiPath>;
    protected abstract getApiDefinition(apiId: string): Observable<IIpaasApiDefinition>;
    protected abstract editApiDefinition(apiDefinition: IIpaasApiDefinition, formData?: IApiEditorFormData): Observable<any>;
    protected abstract createApiDefinition(apiDefinition: IIpaasApiDefinition, formData?: IApiEditorFormData): Observable<any>;
    protected abstract getEnvironmentList(organization?: IOrganizationData): IEnvironmentData[];
    static ɵfac: i0.ɵɵFactoryDeclaration<ApiEditorBase, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ApiEditorBase>;
}
