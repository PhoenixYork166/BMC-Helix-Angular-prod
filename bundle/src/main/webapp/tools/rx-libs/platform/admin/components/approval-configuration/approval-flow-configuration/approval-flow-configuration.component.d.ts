import { CdkDragDrop } from '@angular/cdk/drag-drop/';
import { AfterViewInit, ErrorHandler, Injector, OnDestroy, OnInit } from '@angular/core';
import { NgForm } from '@angular/forms';
import { AdaptPopoverDirective, RxSelectOption } from '@bmc-ux/adapt-angular';
import { RxNotificationService } from '@helix/platform/shared/api';
import { IDefinitionPickerComponentOptions, IExpressionFormControlOptions, RxExpressionEditorService } from '@helix/platform/shared/components';
import { RxModalService } from '@helix/platform/ui-kit';
import { TranslateService } from '@ngx-translate/core';
import { RxApprovalConfigurationService } from '../approval-configuration.service';
import { IApprovalFlow, IApprovalFlowGroup } from '../approval-configuration.types';
import { RxApprovalExpressionConfigurator } from '../approval-expression-configurator';
import * as i0 from "@angular/core";
export declare class ApprovalFlowConfigurationComponent implements OnInit, OnDestroy, AfterViewInit {
    private injector;
    private errorHandler;
    private rxModalService;
    private translateService;
    private rxNotificationService;
    private rxExpressionEditorService;
    private rxApprovalConfigurationService;
    registeredRecordDefinitionName: string;
    adaptPopoverDirective: AdaptPopoverDirective;
    approvalFlowsForm: NgForm;
    flowGroupName: string;
    flowGroupNewName: string;
    allAvailableFlowGroups: IApprovalFlowGroup[];
    selectedFlowGroup: IApprovalFlowGroup;
    flowQualificationOptions: IExpressionFormControlOptions;
    qualifyApproversOptions: IExpressionFormControlOptions;
    signingCriteriaList: RxSelectOption[];
    signingCriteriaPercentageList: number[];
    processOnApproveOptions: IDefinitionPickerComponentOptions;
    processOnRejectOptions: IDefinitionPickerComponentOptions;
    processOnErrorOptions: IDefinitionPickerComponentOptions;
    protected expressionConfigurator: RxApprovalExpressionConfigurator;
    private existingFlowGroupNames;
    private dialogApi;
    private isSaveInProgress;
    private availableFunctionalRoles;
    private destroyed$;
    private deletedFlowGroups;
    constructor(injector: Injector, errorHandler: ErrorHandler, rxModalService: RxModalService, translateService: TranslateService, rxNotificationService: RxNotificationService, rxExpressionEditorService: RxExpressionEditorService, rxApprovalConfigurationService: RxApprovalConfigurationService);
    private getEmptyFlowGroup;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    private getFlowGroups;
    preparePayload(flowGroup: IApprovalFlowGroup): IApprovalFlowGroup;
    canSave(): boolean;
    isDirty(): boolean;
    areFlowGroupsValid(): boolean;
    private isInvalidFlowGroup;
    hasFlowGroups(): string;
    private isInvalidFlow;
    markInvalidSelectedGroupAndFlows(): void;
    markInvalidGroupsAndFlows(): void;
    saveFlowGroups(): void;
    onKeyDownNew(event: KeyboardEvent): void;
    addNewFlowGroup(): void;
    onKeyDownRename(event: KeyboardEvent, context: any): void;
    renameFlowGroup(context: any): void;
    deleteFlowGroup(): void;
    private setEmptyFlowGroup;
    onFlowQualificationEvent(flowIndex: number): void;
    private selectFlowQualificationExpression;
    onApproverQualificationEvent(flowIndex: number): void;
    private selectApproverQualificationExpression;
    private updateFlowErrorState;
    private getFlowEmptyOutcomes;
    private getEmptyGeneralApprovalFlow;
    getCriteria(value?: number): RxSelectOption[];
    getFlowCriteriaList(): RxSelectOption[];
    addNewGeneralFlow(): void;
    addNewLevelUpFlow(): void;
    selectFlowGroup(flowGroupName: string): void;
    onSelectedFlowDrop(event: CdkDragDrop<IApprovalFlow>): void;
    moveFlow(previousIndex: number, currentIndex: number): void;
    moveFlowUp(currentIndex: number): void;
    moveFlowDown(currentIndex: number): void;
    removeFlow(index: number): void;
    resetFlowPrecedences(): void;
    optionFormatter(option: RxSelectOption): string;
    private refactorFlowsResponse;
    isExistingFlowGroup(flowGroupName?: string): boolean;
    isRenameFlowGroupButtonDisabled(): boolean;
    isAddNewFlowGroupButtonDisabled(): boolean;
    expandAll(): void;
    collapseAll(): void;
    selectFlowApprovers(flowIndex: number): void;
    manageApproverCriteriaOption(flowIndex: any): void;
    ngOnDestroy(): void;
    private getApproversDisplay;
    getFlowName(flow: IApprovalFlow): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<ApprovalFlowConfigurationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ApprovalFlowConfigurationComponent, "rx-approval-flow-configuration", never, { "registeredRecordDefinitionName": "registeredRecordDefinitionName"; }, {}, never, never>;
}
