import { AfterViewInit, ChangeDetectorRef, OnDestroy, OnInit } from '@angular/core';
import { IDataImportSheetConfiguration, IDataloadWizardContext, ITargetField } from '../data-import.types';
import { RxSelectionChangeEvent, RxSelectOption } from '@bmc-ux/adapt-angular';
import { IDefinitionPickerComponentOptions, RxWizardModalComponent } from '@helix/platform/shared/components';
import { TranslateService } from '@ngx-translate/core';
import { RxRecordDefinitionCacheService } from '@helix/platform/record/api';
import { RxAssociationDefinitionService } from '@helix/platform/association/api';
import { IPlainObject, RxDefinitionNameService, RxNotificationService } from '@helix/platform/shared/api';
import { DataExportService } from '../../data-export/data-export.service';
import { DataImportService } from '../data-import.service';
import { NgForm } from '@angular/forms';
import { RxModalService } from '@helix/platform/ui-kit';
import * as i0 from "@angular/core";
export declare class DataImportMappingStepComponent implements OnInit, OnDestroy, AfterViewInit {
    private dataImportService;
    private dataExportService;
    private rxRecordDefinitionCacheService;
    private changeDetectorRef;
    private rxModalService;
    private rxWizardModalComponent;
    private definitionNameService;
    private translateService;
    private rxAssociationDefinitionService;
    private rxNotificationService;
    context: IDataloadWizardContext;
    options: IPlainObject;
    dataImportConfigurationForm: NgForm;
    private excelSheetName;
    sourceFieldNameList: string[];
    targetFieldList: ITargetField[];
    definitionTypes: {
        record: string;
        association: string;
    };
    definitionTypeOptions: RxSelectOption[];
    recordPickerOptions: IDefinitionPickerComponentOptions;
    associationPickerOptions: IDefinitionPickerComponentOptions;
    currentSheetDataImportMapping: IDataImportSheetConfiguration;
    private currentExcelSheetConfiguration;
    private destroyed$;
    private requiredFieldNames;
    areFieldsLoading: boolean;
    duplicateHandlingOptions: RxSelectOption[];
    dataOptions: RxSelectOption[];
    matchDuplicateByFields: RxSelectOption[];
    selectedMatchDuplicateByFields: RxSelectOption[];
    dateTimeFormatOptions: RxSelectOption[];
    constructor(dataImportService: DataImportService, dataExportService: DataExportService, rxRecordDefinitionCacheService: RxRecordDefinitionCacheService, changeDetectorRef: ChangeDetectorRef, rxModalService: RxModalService, rxWizardModalComponent: RxWizardModalComponent, definitionNameService: RxDefinitionNameService, translateService: TranslateService, rxAssociationDefinitionService: RxAssociationDefinitionService, rxNotificationService: RxNotificationService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    removeMapping(index: number): void;
    addFieldMapping(sourceFieldName?: string, targetField?: ITargetField): void;
    private setDefinitionTypeNameFromExcelSheet;
    private setTypeFromExcelSheet;
    autoMapping(): void;
    private loadTargetAndOtherFields;
    private isMappingFieldDefinitionRequired;
    private generateAutoMappingFields;
    onDefinitionChange(definitionName: string): void;
    clearMappingFields(): void;
    private getRecordDefinitionName;
    private clearDefinitionSelection;
    onDefinitionTypeChange(): void;
    private showInvalidDefinitionSelectedMsg;
    private isDefinitionTypeRecord;
    optionFormatter(field: RxSelectOption): string;
    ngOnDestroy(): void;
    isStepActive(): boolean;
    onTargetFieldSelection($event: RxSelectionChangeEvent, index: any): void;
    isRequiredTargetField(targetField: ITargetField): boolean;
    shouldGenerateNewIdForDuplicateRecords(): boolean;
    onTabActivated(event: any): void;
    private getTypeFromExcelSheet;
    get timeFormatExample(): string;
    areFieldMappingsInvalid(): boolean;
    private updateWizardButtons;
    updateDataChangesToSheetMapContext(): void;
    private getRefactoredClonedConfiguration;
    static ɵfac: i0.ɵɵFactoryDeclaration<DataImportMappingStepComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DataImportMappingStepComponent, "dl-data-import-mapping-step", never, { "context": "context"; "options": "options"; }, {}, never, never>;
}
