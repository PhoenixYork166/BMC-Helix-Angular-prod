{"version":3,"file":"record-grid-advanced-filtering.service.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/record-grid/common/services/record-grid-advanced-filtering.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, TemplateRef } from '@angular/core';\nimport {\n  AdaptTranslateService,\n  AdvancedFilterBooleanDataType,\n  AdvancedFilterDataTypesConfigsService,\n  AdvancedFilterExpressionTip,\n  AdvancedFilterOption,\n  AdvancedFilterOptionConfig,\n  AdvancedFilterOptionDataType,\n  AdvancedFilterSelectionTypeData,\n  formatAdvancedFilterTagText,\n  isEmptyOrWhitespace,\n  ParsedTagFieldExpressionResult,\n  TagModel\n} from '@bmc-ux/adapt-angular';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  IFieldDefinitionsById,\n  IRecordDefinition,\n  RecordFieldOption,\n  RxRecordDefinitionService\n} from '@helix/platform/record/api';\nimport { RxObjectUtilsService } from '@helix/platform/utils';\nimport { get, isArray, isEmpty, isFunction, isNil, isString, uniq } from 'lodash';\nimport { IRecordGridFilterConfig } from '../types/record-grid-filter-config.interfaces';\nimport { RxRecordGridUtilsService } from './record-grid-utils.service';\nimport moment from 'moment-es6';\nimport { IRecordGridColumnNamedFilterOption } from '../types/record-grid.types';\nimport { RxRecordGridAdvancedFilterValue } from '../types/record-grid-advanced-filter-value.class';\nimport { INamedListOption, RxNamedListService } from '@helix/platform/named-list/api';\n\n@Injectable()\nexport class RxRecordGridAdvancedFilteringService {\n  translation = this.adaptTranslateService.getCurrentLanguage();\n\n  adaptTexts = {\n    fromLabel: this.translation['adapt.advancedFilter.configsTexts.fromLabel'],\n    toLabel: this.translation['adapt.advancedFilter.configsTexts.toLabel'],\n    trueLabel: this.translation['adapt.advancedFilter.configsTexts.trueLabel'],\n    falseLabel: this.translation['adapt.advancedFilter.configsTexts.falseLabel'],\n    blankLabel: this.translation['adapt.advancedFilter.configsTexts.blankLabel'],\n    validationErrors: {\n      invalidRangeName: this.translation['adapt.advancedFilter.validationErrors.invalidRangeName'],\n      invalidRangeText: this.translation['adapt.advancedFilter.validationErrors.invalidRangeText'],\n      numberTypeTexts: {\n        fromValueMustBeNumber:\n          this.translation['adapt.advancedFilter.validationErrors.numberTypeTexts.fromValueMustBeNumber'],\n        toValueMustBeNumber:\n          this.translation['adapt.advancedFilter.validationErrors.numberTypeTexts.toValueMustBeNumber'],\n        invalidBetweenMinAndMax:\n          this.translation['adapt.advancedFilter.validationErrors.numberTypeTexts.invalidBetweenMinAndMax'],\n        invalidMinValue: this.translation['adapt.advancedFilter.validationErrors.numberTypeTexts.invalidMinValue'],\n        invalidMaxValue: this.translation['adapt.advancedFilter.validationErrors.numberTypeTexts.invalidMaxValue']\n      }\n    }\n  };\n\n  defaultConfig = this.advancedFilterDataTypesConfigsService.getConfigs(this.adaptTexts);\n\n  constructor(\n    private rxRecordDefinitionService: RxRecordDefinitionService,\n    private rxObjectUtilsService: RxObjectUtilsService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxNamedListService: RxNamedListService,\n    private advancedFilterDataTypesConfigsService: AdvancedFilterDataTypesConfigsService,\n    private adaptTranslateService: AdaptTranslateService\n  ) {}\n\n  addAssociationFieldsToFieldDefinitionsById(\n    fieldDefinitionsById: IFieldDefinitionsById,\n    associationDescriptors: IAssociationDescriptor[],\n    associatedRecordDefinitions: IRecordDefinition[]\n  ): IFieldDefinitionsById {\n    associationDescriptors.forEach((associationDescriptor) => {\n      const associatedRecordDefinition = associatedRecordDefinitions.find(\n        (recordDefinition) => recordDefinition.name === associationDescriptor.recordDefinitionName\n      );\n\n      associatedRecordDefinition.fieldDefinitions.forEach((fieldDefinition) => {\n        const field = this.rxRecordGridUtilsService.getFieldIdForGridColumn(fieldDefinition.id, associationDescriptor);\n\n        if (!fieldDefinitionsById[field]) {\n          this.rxRecordDefinitionService.addFieldDefinitionToMap(fieldDefinition, fieldDefinitionsById, field);\n        }\n      });\n    });\n\n    fieldDefinitionsById = {\n      ...fieldDefinitionsById,\n      ...this.rxObjectUtilsService.expandProperties(fieldDefinitionsById)\n    };\n\n    return fieldDefinitionsById;\n  }\n\n  getAdvancedFilterOption(\n    fieldId: string,\n    header: string,\n    fieldDefinition: IFieldDefinition,\n    filterConfig: IRecordGridFilterConfig,\n    isHidden?: boolean,\n    customFilterTemplates?: { [key: string]: TemplateRef<any> },\n    prefixLabel?: string,\n    namedFilterOptions?: IRecordGridColumnNamedFilterOption[],\n    typeaheadKeystrokeCount?: number,\n    additionalQueryCriteria?: string\n  ): AdvancedFilterOption {\n    const config: AdvancedFilterOption = {\n      id: fieldId,\n      label: header,\n      dataType: filterConfig.filterOptionDataType,\n      isHidden,\n      data: isFunction(filterConfig.getDataForAdvancedFilter)\n        ? filterConfig.getDataForAdvancedFilter(fieldDefinition, fieldId)\n        : null\n    };\n\n    namedFilterOptions = namedFilterOptions ?? [];\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.boolean) {\n      config.inputsTemplate =\n        fieldDefinition.fieldOption !== RecordFieldOption.Required\n          ? customFilterTemplates.optionalBooleanFilter\n          : customFilterTemplates.requiredBooleanFilter;\n\n      config.customConfig = <\n        AdvancedFilterOptionConfig<RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>>\n      >{\n        getExpressionFieldTips: (filterOption: AdvancedFilterOption): TagModel<AdvancedFilterExpressionTip>[] => {\n          const data = filterOption.data as AdvancedFilterSelectionTypeData;\n          const selectOptions = data?.selectOptions || [];\n\n          const namedFilterOptionTips = this.getNamedFilterOptionTips(\n            namedFilterOptions,\n            filterOption,\n            config.customConfig\n          );\n\n          return namedFilterOptionTips.concat(\n            selectOptions.map((selectOption) => {\n              return AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag(\n                new RxRecordGridAdvancedFilterValue([selectOption.id]),\n                filterOption,\n                config.customConfig,\n                false,\n                formatAdvancedFilterTagText(filterOption, selectOption.name)\n              );\n            })\n          );\n        },\n        formatValueForTag: (value, option: AdvancedFilterOption): string => {\n          const data = option.data as AdvancedFilterSelectionTypeData;\n          const selectOptions = data?.selectOptions || [];\n\n          const filterValueLabels = value.filterValue.map(\n            (id) => selectOptions.find((selectOption) => selectOption.id === id).name\n          );\n\n          return this.buildTagLabel(filterValueLabels, this.getNamedOptionTitles(value, namedFilterOptions));\n        },\n        needRemoveTagValue: (value) => RxRecordGridAdvancedFilterValue.isEmpty(value),\n        updateFilterValue: (\n          newValue: RxRecordGridAdvancedFilterValue,\n          oldValue: RxRecordGridAdvancedFilterValue,\n          filterOption: AdvancedFilterOption\n        ) => this.updateFilterValue(oldValue, newValue, filterOption.data.isRequired),\n        parseTagFieldExpression: (\n          filterOption: AdvancedFilterOption<RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>>,\n          searchTerm: string\n        ): ParsedTagFieldExpressionResult<RxRecordGridAdvancedFilterValue<AdvancedFilterBooleanDataType[]>> | null => {\n          const rawValues = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm);\n          const value = this.getFilterValueFromString(namedFilterOptions, rawValues);\n          const data = filterOption.data as AdvancedFilterSelectionTypeData;\n          const selectOptions = data?.selectOptions || [];\n\n          value.filterValue =\n            value.filterValue\n              .map((optionLabel: string) => {\n                optionLabel = optionLabel.trim().toLowerCase();\n                const selectOption = selectOptions.find((option) => option.name.toLowerCase() === optionLabel);\n\n                return selectOption?.id ?? null;\n              })\n              .filter((val) => !isNil(val)) || [];\n\n          return value.length ? { value } : null;\n        }\n      };\n    }\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.string) {\n      if (fieldDefinition.namedListDefinition) {\n        config.inputsTemplate = customFilterTemplates.inputsForStringWithTypeAheadTemplate;\n        config.data = { ...config.data, typeaheadKeystrokeCount, additionalQueryCriteria };\n      } else {\n        config.inputsTemplate = customFilterTemplates.inputsForStringTypeTemplate;\n      }\n\n      config.customConfig = {\n        needRemoveTagValue(value: RxRecordGridAdvancedFilterValue) {\n          return RxRecordGridAdvancedFilterValue.isEmpty(value);\n        },\n        formatValueForTag: (value: RxRecordGridAdvancedFilterValue, filterOption: AdvancedFilterOption): string =>\n          this.buildTagLabel(value.filterValue, this.getNamedOptionTitles(value, namedFilterOptions)),\n        getExpressionFieldTips: (option, searchTerm: string) => {\n          return [\n            ...this.getNamedFilterOptionTips(namedFilterOptions, option, config.customConfig),\n            AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag(\n              new RxRecordGridAdvancedFilterValue(),\n              option,\n              config.customConfig,\n              true,\n              formatAdvancedFilterTagText(option, '')\n            )\n          ];\n        },\n        updateFilterValue: (\n          newValue: RxRecordGridAdvancedFilterValue,\n          oldValue: RxRecordGridAdvancedFilterValue,\n          filterOption: AdvancedFilterOption\n        ) => this.updateFilterValue(oldValue, newValue),\n        parseTagFieldExpression: (filterOption, searchTerm) => {\n          return this.parseStringTagFieldExpression(filterOption, searchTerm, namedFilterOptions);\n        }\n      };\n    }\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.selection) {\n      config.inputsTemplate = customFilterTemplates.inputsForSelectionTypeTemplate;\n\n      config.customConfig = {\n        needRemoveTagValue(value: RxRecordGridAdvancedFilterValue) {\n          return RxRecordGridAdvancedFilterValue.isEmpty(value);\n        },\n        formatValueForTag: (value: RxRecordGridAdvancedFilterValue, option: AdvancedFilterOption): string => {\n          const filterValueLabels = this.defaultConfig[filterConfig.filterOptionDataType].formatValueForTag(\n            value.filterValue,\n            option\n          );\n\n          return this.buildTagLabel(filterValueLabels, this.getNamedOptionTitles(value, namedFilterOptions));\n        },\n        getExpressionFieldTips: (filterOption, searchTerm: string) => {\n          const data = filterOption.data as AdvancedFilterSelectionTypeData;\n          const selectOptions = (data && data.selectOptions) || [];\n\n          return this.getNamedFilterOptionTips(namedFilterOptions, filterOption, config.customConfig).concat(\n            selectOptions.map((selectOption) => {\n              return AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag(\n                new RxRecordGridAdvancedFilterValue([selectOption.id]),\n                filterOption,\n                config.customConfig,\n                false,\n                formatAdvancedFilterTagText(filterOption, selectOption.name)\n              );\n            })\n          );\n        },\n        updateFilterValue: (\n          newValue: RxRecordGridAdvancedFilterValue,\n          oldValue: RxRecordGridAdvancedFilterValue,\n          filterOption: AdvancedFilterOption\n        ) => this.updateFilterValue(oldValue, newValue),\n        parseTagFieldExpression: (filterOption, searchTerm) => {\n          return this.parseStringTagFieldExpression(filterOption, searchTerm, namedFilterOptions);\n        }\n      };\n    }\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.datetime) {\n      config.inputsTemplate = customFilterTemplates.inputsForDatetimeTypeTemplate;\n\n      config.customConfig = this.getDatetimeCustomConfig(\n        namedFilterOptions,\n        config,\n        AdvancedFilterOptionDataType.datetime,\n        'll LTS'\n      );\n    }\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.date) {\n      config.inputsTemplate = customFilterTemplates.inputsForDateTypeTemplate;\n\n      config.customConfig = this.getDatetimeCustomConfig(\n        namedFilterOptions,\n        config,\n        AdvancedFilterOptionDataType.date,\n        'll'\n      );\n    }\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.time) {\n      config.inputsTemplate = customFilterTemplates.inputsForTimeTypeTemplate;\n\n      config.customConfig = this.getDatetimeCustomConfig(\n        namedFilterOptions,\n        config,\n        AdvancedFilterOptionDataType.time,\n        'LTS'\n      );\n    }\n\n    if (filterConfig.filterOptionDataType === AdvancedFilterOptionDataType.number) {\n      config.inputsTemplate = customFilterTemplates.inputsForNumberTypeTemplate;\n\n      config.customConfig = {\n        needRemoveTagValue(value: RxRecordGridAdvancedFilterValue) {\n          return RxRecordGridAdvancedFilterValue.isEmptyWithRange(value);\n        },\n        getExpressionFieldTips: (option, searchTerm: string) => {\n          return this.getNamedFilterOptionTips(namedFilterOptions, option, config.customConfig, [null, null]).concat(\n            this.defaultConfig[filterConfig.filterOptionDataType].getExpressionFieldTips(option, searchTerm)\n          );\n        },\n        updateFilterValue: (\n          newValue: RxRecordGridAdvancedFilterValue,\n          oldValue: RxRecordGridAdvancedFilterValue,\n          filterOption: AdvancedFilterOption\n        ) => {\n          newValue.filterValue = this.defaultConfig[filterConfig.filterOptionDataType].updateFilterValue(\n            newValue.filterValue,\n            oldValue.filterValue,\n            filterOption\n          );\n\n          newValue.namedOptions = uniq(oldValue.namedOptions.concat(newValue.namedOptions));\n\n          return newValue;\n        },\n        formatValueForTag: (value: RxRecordGridAdvancedFilterValue) => {\n          const formattedValue = value.filterValue.filter((val) => val != null).join(' - ');\n\n          return this.buildTagLabel(formattedValue, this.getNamedOptionTitles(value, namedFilterOptions));\n        },\n        parseTagFieldExpression: (filterOption: AdvancedFilterOption, searchTerm: string) => {\n          const { value: valuesStr, label } = this.getExpressionRawValues(filterOption, searchTerm);\n\n          if (!valuesStr) {\n            return null;\n          }\n\n          const value = this.getFilterValueFromString(namedFilterOptions, valuesStr);\n\n          value.filterValue =\n            this.defaultConfig[filterConfig.filterOptionDataType].parseTagFieldExpression(\n              filterOption,\n              `${label} ${value.filterValue[0]}`\n            )?.value ?? [];\n\n          return value.length ? { value } : null;\n        },\n        validateValue: (\n          value: RxRecordGridAdvancedFilterValue,\n          filterOption: AdvancedFilterOption<RxRecordGridAdvancedFilterValue>\n        ) => this.defaultConfig[filterConfig.filterOptionDataType].validateValue(value.filterValue, filterOption)\n      };\n    }\n\n    if (prefixLabel) {\n      const prefixConfig = {\n        getTagText(value: string, option: AdvancedFilterOption, formattedValue: string): string {\n          return `${prefixLabel}: ${formattedValue}`;\n        }\n      };\n\n      config.customConfig = { ...config.customConfig, ...prefixConfig };\n    }\n\n    return config;\n  }\n\n  private parseStringTagFieldExpression(\n    filterOption: AdvancedFilterOption,\n    searchTerm: string,\n    namedFilterOptions: IRecordGridColumnNamedFilterOption[]\n  ): ParsedTagFieldExpressionResult<RxRecordGridAdvancedFilterValue> {\n    const valuesStr = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm);\n\n    if (!valuesStr) {\n      return null;\n    }\n\n    const value = this.getFilterValueFromString(namedFilterOptions, valuesStr);\n\n    return value.length ? { value } : null;\n  }\n\n  private updateFilterValue(\n    oldValue: RxRecordGridAdvancedFilterValue,\n    newValue: RxRecordGridAdvancedFilterValue,\n    replaceFilterValue = false\n  ): RxRecordGridAdvancedFilterValue {\n    if (!replaceFilterValue) {\n      newValue.filterValue = uniq(oldValue.filterValue.concat(newValue.filterValue));\n    }\n\n    newValue.namedOptions = uniq(oldValue.namedOptions.concat(newValue.namedOptions));\n\n    return newValue;\n  }\n\n  private buildTagLabel(\n    filterValueLabels: string | string[] | INamedListOption[],\n    namedOptionTitles: string[],\n    filterValueSeparator = ', ',\n    namedOptionsSeparator = '; '\n  ): string {\n    return [\n      isString(filterValueLabels)\n        ? filterValueLabels\n        : isArray(filterValueLabels) && !isEmpty(filterValueLabels)\n        ? this.rxNamedListService.isNamedListOption(filterValueLabels[0])\n          ? filterValueLabels.map((value) => value.displayValue ?? value.value).join(filterValueSeparator)\n          : filterValueLabels.join(filterValueSeparator)\n        : '',\n      ...namedOptionTitles\n    ]\n      .filter(Boolean)\n      .join(namedOptionsSeparator);\n  }\n\n  private getNamedOptionTitles(\n    value: RxRecordGridAdvancedFilterValue,\n    options: IRecordGridColumnNamedFilterOption[]\n  ): string[] {\n    const optionGuids = options.map((option) => option.guid);\n\n    return value.namedOptions\n      .sort((option1, option2) => optionGuids.indexOf(option1) - optionGuids.indexOf(option2))\n      .map((guid) => options.find((option) => option.guid === guid)?.title);\n  }\n\n  private getDatetimeCustomConfig(\n    namedFilterOptions: IRecordGridColumnNamedFilterOption[],\n    config: AdvancedFilterOption,\n    fieldType: AdvancedFilterOptionDataType,\n    tagValueFormat: string\n  ): AdvancedFilterOptionConfig {\n    return {\n      getExpressionFieldTips: (\n        option: AdvancedFilterOption,\n        searchTerm: string\n      ): TagModel<AdvancedFilterExpressionTip>[] => {\n        return this.getNamedFilterOptionTips(namedFilterOptions, option, config.customConfig).concat(\n          this.defaultConfig[fieldType].getExpressionFieldTips(option, searchTerm)\n        );\n      },\n      needRemoveTagValue(value: RxRecordGridAdvancedFilterValue) {\n        return RxRecordGridAdvancedFilterValue.isEmptyWithRange(value);\n      },\n      formatValueForTag: (value: RxRecordGridAdvancedFilterValue): string => {\n        const formattedValue = value.filterValue\n          .filter((val) => val)\n          .map((date) => moment(date).format(tagValueFormat))\n          .join(' - ');\n\n        return this.buildTagLabel(formattedValue, this.getNamedOptionTitles(value, namedFilterOptions));\n      },\n      updateFilterValue: (\n        newValue: RxRecordGridAdvancedFilterValue,\n        oldValue: RxRecordGridAdvancedFilterValue,\n        filterOption: AdvancedFilterOption\n      ) => {\n        newValue.filterValue = this.defaultConfig[fieldType].updateFilterValue(\n          newValue.filterValue,\n          oldValue.filterValue,\n          filterOption\n        );\n\n        newValue.namedOptions = uniq(oldValue.namedOptions.concat(newValue.namedOptions));\n\n        return newValue;\n      },\n      parseTagFieldExpression: (filterOption: AdvancedFilterOption, searchTerm: string) => {\n        const { value: valuesStr } = this.getExpressionRawValues(filterOption, searchTerm);\n\n        if (!valuesStr) {\n          return null;\n        }\n\n        const value = this.getFilterValueFromString(namedFilterOptions, valuesStr);\n        const [dateStr] = searchTerm.split('; ');\n\n        value.filterValue = this.defaultConfig[fieldType].parseTagFieldExpression(filterOption, dateStr)?.value ?? [];\n\n        return value.length ? { value } : null;\n      },\n      validateValue: (\n        value: RxRecordGridAdvancedFilterValue,\n        filterOption: AdvancedFilterOption<RxRecordGridAdvancedFilterValue>\n      ) => this.defaultConfig[fieldType].validateValue(value.filterValue, filterOption)\n    };\n  }\n\n  private getExpressionRawValues(\n    filterOption: AdvancedFilterOption,\n    searchTerm: string\n  ): { label: string; value: string } {\n    return [\n      `${filterOption.label}:`,\n      `${filterOption.label} ${this.adaptTexts.fromLabel}`,\n      `${filterOption.label} ${this.adaptTexts.toLabel}`\n    ].reduce(\n      (result, mask) => {\n        if (searchTerm.startsWith(mask)) {\n          result.label = mask;\n          result.value = searchTerm.replace(mask, '').trim();\n        }\n\n        return result;\n      },\n      { label: null, value: null }\n    );\n  }\n\n  private getFilterValueFromString(\n    namedFilterOptions: IRecordGridColumnNamedFilterOption[],\n    valuesStr: string\n  ): RxRecordGridAdvancedFilterValue {\n    const values = (valuesStr ?? '')\n      .trim()\n      .split(';')\n      .filter((str) => !isEmptyOrWhitespace(str))\n      .map((str) => str.trim());\n\n    const value = new RxRecordGridAdvancedFilterValue([]);\n\n    values.forEach((val) => {\n      const namedOptionGuid = namedFilterOptions.find((item) => item.title === val)?.guid;\n\n      if (namedOptionGuid) {\n        value.namedOptions.push(namedOptionGuid);\n      } else {\n        value.filterValue.push(\n          ...val\n            .split(',')\n            .map((str) => str.trim())\n            .filter(Boolean)\n        );\n      }\n    });\n\n    value.namedOptions = uniq(value.namedOptions);\n\n    return value;\n  }\n\n  private getNamedFilterOptionTips(\n    namedFilterOptions: IRecordGridColumnNamedFilterOption[],\n    option: AdvancedFilterOption,\n    filterOptionConfig: AdvancedFilterOptionConfig,\n    value = []\n  ): TagModel<AdvancedFilterExpressionTip>[] {\n    return (namedFilterOptions ?? []).map((item) =>\n      AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag(\n        new RxRecordGridAdvancedFilterValue(value, [item.guid]),\n        option,\n        filterOptionConfig,\n        false,\n        formatAdvancedFilterTagText(option, item.title)\n      )\n    );\n  }\n}\n"]}