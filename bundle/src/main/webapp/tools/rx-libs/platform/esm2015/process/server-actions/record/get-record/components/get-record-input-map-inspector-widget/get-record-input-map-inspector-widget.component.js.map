{"version":3,"file":"get-record-input-map-inspector-widget.component.js","sourceRoot":"","sources":["../../../../../../../../../../libs/platform/process/server-actions/record/get-record/components/get-record-input-map-inspector-widget/get-record-input-map-inspector-widget.component.ts","../../../../../../../../../../libs/platform/process/server-actions/record/get-record/components/get-record-input-map-inspector-widget/get-record-input-map-inspector-widget.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Injector, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map, pluck, take, takeUntil } from 'rxjs/operators';\nimport { isEqual } from 'lodash';\n\nimport { RxIdService } from '@helix/platform/utils';\nimport { IFormWidgetComponent } from '@helix/platform/shared/api';\nimport {\n  IDefinitionPickerComponentOptions,\n  IExpressionEditorPropertyChange,\n  IExpressionFormControlOptions,\n  InspectorWidgetBase,\n  RxDefinitionPickerType,\n  RxExpressionEditorService\n} from '@helix/platform/shared/components';\nimport { ISelectedElementInspectorDesignerItemModel } from '@helix/platform/process/api';\n\nimport { RX_RECORD_SERVER_ACTION } from '../../../record-server-action.constant';\nimport { IGetRecordServerActionModel } from '../../get-record-server-action.types';\nimport { IGetRecordInputMapInspectorWidgetOptions } from './get-record-input-map-inspector-widget.types';\n\n@Component({\n  selector: 'rx-get-record-input-map-inspector-widget',\n  templateUrl: './get-record-input-map-inspector-widget.component.html',\n  styleUrls: ['./get-record-input-map-inspector-widget.component.scss']\n})\nexport class RxGetRecordInputMapInspectorWidgetComponent\n  extends InspectorWidgetBase<\n    IGetRecordInputMapInspectorWidgetOptions,\n    Observable<ISelectedElementInspectorDesignerItemModel<IGetRecordServerActionModel>>\n  >\n  implements OnInit, OnDestroy, OnChanges, IFormWidgetComponent\n{\n  elementModel$: Observable<IGetRecordServerActionModel>;\n  graph$: Observable<any>;\n  isDynamicRecordDefinitionName$: Observable<boolean>;\n  recordDefinitionPickerOptions: IDefinitionPickerComponentOptions;\n  recordIDExpressionOptions: IExpressionFormControlOptions;\n  sampleRecordDefinitionPickerOptions: IDefinitionPickerComponentOptions;\n\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  constructor(\n    private rxExpressionEditorService: RxExpressionEditorService,\n    private rxIdService: RxIdService,\n    private translateService: TranslateService,\n    protected injector: Injector\n  ) {\n    super(injector);\n  }\n\n  ngOnInit() {\n    this.elementModel$ = this.designerItemModel.pipe(pluck('elementModel'), takeUntil(this.destroyed$));\n\n    this.isDynamicRecordDefinitionName$ = this.elementModel$.pipe(\n      map((elementModel) => elementModel?.inputMap.recordDefinitionName),\n      distinctUntilChanged(),\n      map((recordDefinitionName) => {\n        return RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex.test(recordDefinitionName);\n      })\n    );\n\n    this.graph$ = this.designerItemModel.pipe(pluck('graph'), takeUntil(this.destroyed$));\n\n    this.patchOptions(this.options);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!isEqual(changes.options.currentValue, changes.options.previousValue)) {\n      this.patchOptions(changes.options.currentValue);\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  onRecordDefinitionChange(recordDefinitionName: string, elementModel: IGetRecordServerActionModel) {\n    this.graph$.pipe(take(1)).subscribe((graph) => {\n      const selectedElementCell = graph.getCell(this.rxIdService.getBase(elementModel.guid));\n\n      selectedElementCell.prop(`elementModel/inputMap/recordDefinitionName`, recordDefinitionName);\n    });\n  }\n\n  onSampleRecordDefinitionChange(sampleRecordDefinitionName: string, elementModel: IGetRecordServerActionModel) {\n    this.graph$.pipe(take(1)).subscribe((graph) => {\n      const selectedElementCell = graph.getCell(this.rxIdService.getBase(elementModel.guid));\n\n      selectedElementCell.prop(`elementModel/inputMap/sampleRecordDefinitionName`, sampleRecordDefinitionName);\n    });\n  }\n\n  openExpressionEditor(elementModel: IGetRecordServerActionModel) {\n    this.graph$.pipe(take(1)).subscribe((graph) => {\n      this.rxExpressionEditorService\n        .openEditor({\n          expressionConfigurator: this.options.expressionConfigurator,\n\n          isReadOnly: false,\n\n          legend: [\n            {\n              label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.field-name.label'),\n              icon: 'd-icon-arrow_right_square_input'\n            }\n          ],\n\n          property: {\n            path: 'inputMap/recordID',\n            value: elementModel.inputMap.recordID,\n            label: 'Record ID'\n          }\n        })\n        .pipe(takeUntil(this.destroyed$))\n        .subscribe((expression: IExpressionEditorPropertyChange) => {\n          const selectedElementCell = graph.getCell(this.rxIdService.getBase(elementModel.guid));\n\n          selectedElementCell.prop(`elementModel/inputMap/recordID`, expression.value);\n        });\n    });\n  }\n\n  private patchOptions(options: IGetRecordInputMapInspectorWidgetOptions) {\n    this.recordDefinitionPickerOptions = {\n      label: 'Record definition name',\n      definitionType: RxDefinitionPickerType.Record,\n      required: true\n    };\n\n    this.sampleRecordDefinitionPickerOptions = {\n      label: 'Sample record definition name',\n      definitionType: RxDefinitionPickerType.Record,\n      required: true\n    };\n\n    this.recordIDExpressionOptions = {\n      label: 'Record ID',\n      dataDictionary$: options.expressionConfigurator.getDataDictionary('inputMap/recordID'),\n      operators: options.expressionConfigurator.getOperators('inputMap/recordID'),\n      isRequired: true\n    };\n  }\n}\n","<div *ngIf=\"elementModel$ | async as elementModel\">\n  <rx-definition-picker\n    name=\"recordDefinition\"\n    rx-id=\"record-definition\"\n    [options]=\"recordDefinitionPickerOptions\"\n    [ngModel]=\"elementModel.inputMap.recordDefinitionName\"\n    (ngModelChange)=\"onRecordDefinitionChange($event, elementModel)\"\n  >\n  </rx-definition-picker>\n\n  <rx-definition-picker\n    *ngIf=\"isDynamicRecordDefinitionName$ | async\"\n    name=\"sampleRecordDefinition\"\n    rx-id=\"sample-record-definition\"\n    [options]=\"sampleRecordDefinitionPickerOptions\"\n    [ngModel]=\"elementModel.inputMap.sampleRecordDefinitionName\"\n    (ngModelChange)=\"onSampleRecordDefinitionChange($event, elementModel)\"\n  >\n  </rx-definition-picker>\n\n  <rx-expression-form-control\n    rx-id=\"record-id\"\n    [options]=\"recordIDExpressionOptions\"\n    [propertyPath]=\"'inputMap/recordID'\"\n    [ngModel]=\"elementModel.inputMap.recordID\"\n    (events)=\"openExpressionEditor(elementModel)\"\n  >\n  </rx-expression-form-control>\n</div>\n"]}