{"version":3,"file":"rich-text-definition-adapter.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/components/rich-text/rich-text-definition-adapter.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAG3C,OAAO,EAGL,6BAA6B,EAC9B,MAAM,0BAA0B,CAAC;;;AAGlC,MAAM,OAAO,gCAAgC;IAK3C,YAAoB,6BAA4D;QAA5D,kCAA6B,GAA7B,6BAA6B,CAA+B;QAFxE,WAAM,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAGvC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,6BAA6B,CAAC,eAAe,EAAE,CAAC,CAAC;IAC1E,CAAC;IAED,eAAe,CAAC,UAA6C;QAC3D,IAAI,UAAU,CAAC,gBAAgB,CAAC,IAAI,EAAE;YACpC,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;YAEvD,uFAAuF;YACvF,wDAAwD;YACxD,qEAAqE;YACrE,aAAa;YACb,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAEtC,MAAM,QAAQ,GAAG,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;YACzF,MAAM,MAAM,GAAG,IAAI,QAAQ,CAAC,UAAU,CAAC,WAAW,EAAE,CAAC;YAErD,gBAAgB;YAChB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC9B,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAE3B,UAAU,CAAC,gBAAgB,CAAC,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAExD,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,YAAY,CAAC;SAClD;IACH,CAAC;;6HA9BU,gCAAgC;iIAAhC,gCAAgC;2FAAhC,gCAAgC;kBAD5C,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\n\nimport {\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  RxCkEditorConfiguratorService\n} from '@helix/platform/view/api';\n\n@Injectable()\nexport class RichTextDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition>\n{\n  private filter = new CKEDITOR.filter('');\n\n  constructor(private rxCkEditorConfiguratorService: RxCkEditorConfiguratorService) {\n    this.filter.allow(this.rxCkEditorConfiguratorService.getContentRules());\n  }\n\n  adaptDefinition(definition: IContainerViewComponentDefinition): void {\n    if (definition.propertiesByName.html) {\n      const initialValue = CKEDITOR.dtd.$removeEmpty['span'];\n\n      // Allow empty span tags, used for holding the expressions in rx-expression attributes,\n      // to be parsed by CKEDITOR.htmlParser.fragment.fromHtml\n      // https://stackoverflow.com/questions/18250404/ckeditor-strips-i-tag\n      // @ts-ignore\n      CKEDITOR.dtd.$removeEmpty['span'] = 0;\n\n      const fragment = CKEDITOR.htmlParser.fragment.fromHtml(definition.propertiesByName.html);\n      const writer = new CKEDITOR.htmlParser.basicWriter();\n\n      // sanitize HTML\n      this.filter.applyTo(fragment);\n      fragment.writeHtml(writer);\n\n      definition.propertiesByName.html = writer.getHtml(true);\n\n      CKEDITOR.dtd.$removeEmpty['span'] = initialValue;\n    }\n  }\n}\n"]}