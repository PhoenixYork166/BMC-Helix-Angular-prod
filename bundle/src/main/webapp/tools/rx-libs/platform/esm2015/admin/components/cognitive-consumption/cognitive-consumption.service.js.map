{"version":3,"file":"cognitive-consumption.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/admin/components/cognitive-consumption/cognitive-consumption.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAElD,OAAO,MAAM,MAAM,YAAY,CAAC;;;AAUhC,MAAM,qBAAqB,GAAG,mDAAmD,CAAC;AAKlF,MAAM,OAAO,6BAA6B;IACxC,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAAG,CAAC;IAE9C,yCAAyC,CACvC,MAA+C;QAE/C,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAA0C,qBAAqB,EAAE;YACzF,MAAM,EAAE;gBACN,MAAM,EAAE,MAAM,CAAC,MAAM;gBACrB,MAAM,EAAE,MAAM,CAAC,MAAM;aACtB;SACF,CAAC,CAAC;IACL,CAAC;IAED,gDAAgD,CAAC,MAA+C;QAC9F,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;IAC7D,CAAC;IAED,+CAA+C,CAAC,MAA+C;QAC7F,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;IAC5D,CAAC;IAED,0CAA0C,CACxC,MAA+C;QAE/C,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACxB,oDAAoD,EACpD;YACE,MAAM,EAAE;gBACN,MAAM,EAAE,MAAM,CAAC,MAAM;gBACrB,MAAM,EAAE,MAAM,CAAC,MAAM;aACtB;SACF,CACF,CAAC;IACJ,CAAC;IAED,wBAAwB,CACtB,WAAmB,EACnB,EAAU,EACV,MAAoC;QAEpC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACxB,4CAA4C,WAAW,IAAI,EAAE,EAAE,EAC/D;YACE,MAAM,EAAE;gBACN,SAAS,EAAE,MAAM,CAAC,SAAS;gBAC3B,OAAO,EAAE,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,gBAAgB;gBACjG,SAAS,EAAE,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,gBAAgB;aACxG;SACF,CACF,CAAC;IACJ,CAAC;;0HAnDU,6BAA6B;8HAA7B,6BAA6B,cAF5B,MAAM;2FAEP,6BAA6B;kBAHzC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport moment from 'moment-es6';\nimport {\n  ICognitiveConsumptionNotificationConfig,\n  ICognitiveConsumptionNotificationEntity,\n  ICognitiveConsumptionNotificationHistory,\n  ICognitiveConsumptionNotificationParams,\n  ICognitiveLicenseUsage,\n  ICognitiveLicenseUsageParams\n} from './cognitive-consumption.types';\n\nconst notificationConfigApi = '/api/rx/application/telemetry/notification/config';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxCognitiveConsumptionService {\n  constructor(private httpClient: HttpClient) {}\n\n  getCognitiveConsumptionNotificationConfig(\n    params: ICognitiveConsumptionNotificationParams\n  ): Observable<ICognitiveConsumptionNotificationConfig> {\n    return this.httpClient.get<ICognitiveConsumptionNotificationConfig>(notificationConfigApi, {\n      params: {\n        action: params.action,\n        domain: params.domain\n      }\n    });\n  }\n\n  postCognitiveConsumptionNotificationConfigEntity(entity: ICognitiveConsumptionNotificationEntity): Observable<any> {\n    return this.httpClient.post(notificationConfigApi, entity);\n  }\n\n  putCognitiveConsumptionNotificationConfigEntity(entity: ICognitiveConsumptionNotificationEntity): Observable<any> {\n    return this.httpClient.put(notificationConfigApi, entity);\n  }\n\n  getCognitiveConsumptionNotificationHistory(\n    params: ICognitiveConsumptionNotificationParams\n  ): Observable<ICognitiveConsumptionNotificationHistory> {\n    return this.httpClient.get<ICognitiveConsumptionNotificationHistory>(\n      '/api/rx/application/telemetry/notification/history',\n      {\n        params: {\n          action: params.action,\n          domain: params.domain\n        }\n      }\n    );\n  }\n\n  getCognitiveLicenseUsage(\n    licenseType: string,\n    id: string,\n    params: ICognitiveLicenseUsageParams\n  ): Observable<ICognitiveLicenseUsage> {\n    return this.httpClient.get<ICognitiveLicenseUsage>(\n      `/api/rx/application/license/licenseusage/${licenseType}/${id}`,\n      {\n        params: {\n          countType: params.countType,\n          endDate: moment(params.endDate, 'YYYY-MM').endOf('month').format('YYYY-MM-DD') + 'T23:59:59.999Z',\n          startDate: moment(params.startDate, 'YYYY-MM').startOf('month').format('YYYY-MM-DD') + 'T00:00:00.000Z'\n        }\n      }\n    );\n  }\n}\n"]}