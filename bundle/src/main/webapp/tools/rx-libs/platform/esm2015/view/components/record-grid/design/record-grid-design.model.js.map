{"version":3,"file":"record-grid-design.model.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/record-grid/design/record-grid-design.model.ts"],"names":[],"mappings":"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","sourcesContent":["import { IAssociationDefinition, RX_ASSOCIATED_RECORD_NODE_SIDES } from '@helix/platform/association/api';\nimport { IRecordDefinition, RX_RECORD_DEFINITION, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { RxDefinitionNameService } from '@helix/platform/shared/api';\nimport {\n  IViewActionDesignProperties,\n  IViewDesignerComponentModel,\n  IViewLayout,\n  RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport {\n  IViewComponentDesignData,\n  IViewComponentDesignSandbox,\n  IViewComponentDesignSetPayload,\n  IViewComponentDesignValidationIssue,\n  IViewComponentDropPredicateData,\n  RxViewActionValidatorService,\n  validateAvailableOnDevicesProp,\n  validateCssClassNames,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport {\n  cloneDeep,\n  compact,\n  filter as _filter,\n  find,\n  flatten,\n  head,\n  includes,\n  isEmpty,\n  isEqual,\n  pick,\n  pull\n} from 'lodash';\nimport { combineLatest, merge, Observable, of, Subject, zip } from 'rxjs';\nimport {\n  catchError,\n  distinctUntilChanged,\n  filter,\n  map,\n  mergeMap,\n  shareReplay,\n  skip,\n  skipWhile,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { IActionButtonProperties } from '../../action-button/action-button.types';\nimport { ActionButtonDesignModel } from '../../action-button/design/action-button-design.model';\nimport { RX_RECORD_GRID } from '../record-grid.constant';\nimport {\n  IRecordGridDesignColumnData,\n  IRecordGridDesignInspectorColumnConfig\n} from './editors/record-grid-column-editor-control/record-grid-column-editor.types';\nimport { RecordGridFilterMode } from './editors/record-grid-filter-select-control/record-grid-filter-select-control.types';\nimport { IRowAction } from './editors/record-grid-row-action-editor-control/record-grid-row-action-editor-widget.types';\nimport { RxRecordGridDesignUtilsService } from './record-grid-design-utils.service';\nimport {\n  IRecordGridDesignProperties,\n  IRecordGridProperties,\n  RecordGridDesignDefinitionMode\n} from './record-grid-design.types';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { IViewPresetSelectorDesignProperties } from '../../view-preset-selector/design/view-preset-selector-design.types';\nimport { IGridViewPresetProperties } from '../common/types/record-grid.types';\nimport { IPresetItem } from './editors/record-grid-view-presets-widget/record-grid-view-presets-widget.types';\n\nexport class RecordGridDesignModel\n  extends ViewDesignerComponentModel<IRecordGridProperties, IRecordGridDesignProperties>\n  implements IViewDesignerComponentModel<IRecordGridProperties, IRecordGridDesignProperties>\n{\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n  private rxViewActionValidatorService = this.injector.get(RxViewActionValidatorService);\n  private rxRecordGridDesignUtilsService = this.injector.get(RxRecordGridDesignUtilsService);\n  private rxGuidService = this.injector.get(RxGuidService);\n  private rxDefinitionNameService = this.injector.get(RxDefinitionNameService);\n  private preservedRecordDefinition: IRecordDefinition = null;\n  private preservedRecordAssociationDefinitions: IAssociationDefinition[] = [];\n  sandbox: IViewComponentDesignSandbox<IRecordGridDesignProperties>;\n\n  currentGridDesignProperties: IRecordGridDesignProperties = null;\n  actionButtonComponents$: Observable<IViewComponentDesignData<IActionButtonProperties>[]>;\n  rowActionButtonComponents$: Observable<IViewComponentDesignData<IActionButtonProperties>[]>;\n  componentPropertiesChangeFromCanvas$ = new Subject<IRecordGridDesignProperties>();\n  recordDefinition$: Observable<IRecordDefinition>;\n  recordAssociationDefinitions$: Observable<IAssociationDefinition[]>;\n  columns$ = this.sandbox.getComponentPropertyValue('columns');\n  enableFiltering$ = this.sandbox.getComponentPropertyValue('enableFiltering');\n  recordDefinitionName$ = this.sandbox.getComponentPropertyValue('recordDefinitionName');\n  associationDefinitionName$ = this.sandbox.getComponentPropertyValue('associationDefinitionName');\n  associatedRecordNodeSide$ = this.sandbox.getComponentPropertyValue('associatedRecordNodeSide');\n  childComponentsTree$ = this.sandbox.getChildComponentsTree();\n\n  viewPresetSelectors$: Observable<IViewComponentDesignData<IViewPresetSelectorDesignProperties>[]> =\n    this.sandbox.getComponentsByType<IViewPresetSelectorDesignProperties>(RxViewComponentType.ViewPresetSelector);\n\n  gridViewPresets$: Observable<IViewComponentDesignData<IGridViewPresetProperties>[]> = this.childComponentsTree$.pipe(\n    map((components) => this.rxRecordGridDesignUtilsService.getGridViewPresetsFromChildData(components))\n  );\n\n  viewPresetSelectorGuid$ = this.sandbox.getComponentPropertyValue('viewPresetSelector').pipe(\n    map((val) => this.extractViewPresetSelectorGuid(val)),\n    shareReplay({ refCount: true, bufferSize: 1 })\n  );\n\n  selectedPresetsList$: Observable<IPresetItem[]> = this.viewPresetSelectorGuid$.pipe(\n    switchMap((guid) => this.rxRecordGridDesignUtilsService.getPresetsList(guid)),\n    distinctUntilChanged(isEqual),\n    takeUntil(this.sandbox.destroyed$)\n  );\n\n  rowActionButtonGuids$ = this.sandbox.getLayout(this.sandbox.guid).pipe(\n    filter<IViewLayout>(Boolean),\n    map((layout) => {\n      const rowActionsOutlet = find(layout.outlets, { name: RX_RECORD_GRID.rowActionsOutletName });\n\n      return head(rowActionsOutlet.columns).children;\n    }),\n    shareReplay(1)\n  );\n\n  static getInitialProperties(initialProperties: IRecordGridDesignProperties): IRecordGridDesignProperties {\n    return {\n      ...RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    const initialProps: IRecordGridDesignProperties = {\n      bordered: true,\n      expandable: false,\n      name: null,\n      mode: RecordGridDesignDefinitionMode.Record,\n      recordDefinitionName: null,\n      showDataForAllLocales: false,\n      associationDefinitionName: null,\n      associatedRecordId: null,\n      associatedRoleName: null,\n      enableRowSelection: RX_RECORD_GRID.selectionTypes.multiple,\n      styles: null,\n      cardLayoutWidth: null,\n      enableFiltering: true,\n      getDataForHiddenColumns: true,\n      requiredFilters: 0,\n      enableFilterPresets: true,\n      defaultFilterPreset: null,\n      initialSortColumn: null,\n      columns: [],\n      filterMode: RecordGridFilterMode.Basic,\n      filters: { basicFilters: [], filtersJson: null },\n      filterExpression: null,\n      filterPresets: [],\n      striped: false,\n      ...RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE\n    };\n\n    this.recordDefinition$ = this.recordDefinitionName$.pipe(\n      switchMap((recordDefinitionName) => this.getRecordDefinition(recordDefinitionName)),\n      shareReplay(1)\n    );\n\n    this.recordAssociationDefinitions$ = this.recordDefinitionName$.pipe(\n      mergeMap((recordDefinitionName) => this.getRecordAssociationDefinitions(recordDefinitionName)),\n      shareReplay(1)\n    );\n\n    const columnComponents$: Observable<IViewComponentDesignData<IRecordGridDesignColumnData>[]> =\n      this.childComponentsTree$.pipe(\n        map((components) => components.filter((component) => component.type === RX_RECORD_GRID.components.column)),\n        // ignore child action button component updates\n        distinctUntilChanged(isEqual)\n      );\n\n    const basicRecordGridFilters$ = this.childComponentsTree$.pipe(\n      map((components) => this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(components)),\n      distinctUntilChanged(isEqual)\n    );\n\n    const filterPresets$ = this.childComponentsTree$.pipe(\n      map((components) => this.rxRecordGridDesignUtilsService.getFilterPresetDescriptorsFromChildData(components)),\n      distinctUntilChanged(isEqual)\n    );\n\n    this.actionButtonComponents$ = this.childComponentsTree$.pipe(\n      withLatestFrom(this.rowActionButtonGuids$),\n      map(([definitions, rowActionButtonGuids]) =>\n        this.rxRecordGridDesignUtilsService\n          .getActionButtonDescriptorsFromChildData(definitions)\n          .filter((definition) => !includes(rowActionButtonGuids, definition.guid))\n      )\n    );\n\n    this.rowActionButtonComponents$ = this.childComponentsTree$.pipe(\n      withLatestFrom(this.rowActionButtonGuids$),\n      map(([definitions, rowActionButtonGuids]) =>\n        this.rxRecordGridDesignUtilsService\n          .getActionButtonDescriptorsFromChildData(definitions)\n          .filter((definition) => includes(rowActionButtonGuids, definition.guid))\n      )\n    );\n\n    // remove grid view presets in case if bound preset selector is removed\n    this.viewPresetSelectors$\n      .pipe(\n        map((viewPresetSelectors) => viewPresetSelectors.map((selector) => selector.guid).sort()),\n        distinctUntilChanged<string[]>(isEqual),\n        withLatestFrom(this.viewPresetSelectorGuid$),\n        filter(\n          ([viewPresetSelectors, viewPresetSelectorGuid]) =>\n            viewPresetSelectorGuid && !viewPresetSelectors.includes(viewPresetSelectorGuid)\n        ),\n        switchMap(() => this.childComponentsTree$.pipe(take(1))),\n        map((components) => components.filter((comp) => comp.type !== RX_RECORD_GRID.components.viewPreset)),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((components) => {\n        this.sandbox.setChildren(components);\n        this.sandbox.updateComponentProperties({ viewPresetSelector: null });\n      });\n\n    this.sandbox.viewModelsInitialized$\n      .pipe(\n        withLatestFrom(this.rowActionButtonComponents$),\n        map(([viewModelsInitialized, rowActionButtons]) => rowActionButtons),\n        filter((rowActionButtons) => !!rowActionButtons.length)\n      )\n      .subscribe((rowActionButtons) => {\n        rowActionButtons.forEach((rowActionButton) => {\n          const model = this.sandbox.getComponentModel<ActionButtonDesignModel>(rowActionButton.guid);\n\n          model.setValidationIssues([]);\n        });\n      });\n\n    merge(this.sandbox.componentProperties$.pipe(skip(1)), this.componentPropertiesChangeFromCanvas$)\n      .pipe(\n        distinctUntilChanged((oldValue, newValue) => isEqual(this.currentGridDesignProperties, newValue)),\n        mergeMap(\n          (\n            componentDesignProperties: IRecordGridDesignProperties\n          ): Observable<[IRecordGridDesignProperties, IRecordGridDesignProperties]> => {\n            const previousComponentDesignProperties = this.currentGridDesignProperties;\n\n            if (\n              previousComponentDesignProperties.recordDefinitionName !== componentDesignProperties.recordDefinitionName\n            ) {\n              return zip(\n                this.getRecordDefinition(componentDesignProperties.recordDefinitionName),\n                this.getRecordAssociationDefinitions(componentDesignProperties.recordDefinitionName)\n              ).pipe(map(() => [previousComponentDesignProperties, componentDesignProperties]));\n            } else {\n              return of([previousComponentDesignProperties, componentDesignProperties]);\n            }\n          }\n        ),\n        withLatestFrom(this.actionButtonComponents$, this.rowActionButtonComponents$, this.gridViewPresets$),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(\n        ([\n          [previousComponentDesignProperties, componentDesignProperties],\n          actionButtonComponents,\n          rowActionButtonComponents,\n          gridViewPresets\n        ]) => {\n          const recordDefinition = this.preservedRecordDefinition;\n          const recordAssociationDefinitions = this.preservedRecordAssociationDefinitions;\n\n          let propertiesToUpdate: Partial<IRecordGridDesignProperties>;\n\n          if (!componentDesignProperties.enableFiltering) {\n            propertiesToUpdate = {\n              enableFilterPresets: false\n            };\n          } else if (!previousComponentDesignProperties.enableFiltering && componentDesignProperties.enableFiltering) {\n            propertiesToUpdate = {\n              enableFilterPresets: true\n            };\n          }\n\n          if (\n            previousComponentDesignProperties.recordDefinitionName !== componentDesignProperties.recordDefinitionName\n          ) {\n            propertiesToUpdate = {\n              filterPresets: [],\n              filters: { basicFilters: [], filtersJson: null },\n              initialSortColumn: null,\n              associationDefinitionName: null,\n              filterExpression: null\n            };\n\n            if (recordDefinition) {\n              const columns = this.rxRecordGridDesignUtilsService.getDefaultColumns(recordDefinition);\n\n              const payloads: IViewComponentDesignSetPayload[] =\n                this.rxRecordGridDesignUtilsService.getColumnComponentPayloads(columns, null);\n\n              payloads.push(...actionButtonComponents);\n\n              this.sandbox.setChildren(payloads);\n\n              propertiesToUpdate.columns = columns;\n            } else {\n              this.sandbox.setChildren(actionButtonComponents);\n\n              propertiesToUpdate.columns = [];\n            }\n          } else {\n            const childrenModels = pick(\n              componentDesignProperties,\n              'columns',\n              'initialSortColumn',\n              'filters',\n              'filterPresets'\n            );\n\n            const previousChildrenModels = pick(\n              previousComponentDesignProperties,\n              'columns',\n              'initialSortColumn',\n              'filters',\n              'filterPresets'\n            );\n\n            if (!isEqual(previousChildrenModels, childrenModels)) {\n              const payloads: IViewComponentDesignSetPayload<any>[] =\n                this.rxRecordGridDesignUtilsService.getColumnComponentPayloads(\n                  childrenModels.columns,\n                  childrenModels.initialSortColumn\n                );\n\n              const newInspectorColumns = this.rxRecordGridDesignUtilsService.getInspectorColumnsFromDesignData(\n                payloads as IViewComponentDesignData<IRecordGridDesignColumnData>[]\n              );\n\n              payloads.push(\n                ...this.rxRecordGridDesignUtilsService.getGridFilterComponentPayloads(\n                  childrenModels.filters.basicFilters || []\n                )\n              );\n\n              const filterPresetComponentPayloads =\n                this.rxRecordGridDesignUtilsService.getGridFilterPresetComponentPayloads(\n                  childrenModels.filterPresets,\n                  newInspectorColumns.filter((column) => column.filterable)\n                );\n\n              payloads.push(...filterPresetComponentPayloads);\n\n              childrenModels.filterPresets =\n                this.rxRecordGridDesignUtilsService.getFilterPresetDescriptorsFromChildData(\n                  filterPresetComponentPayloads as IViewComponentDesignData[]\n                );\n\n              payloads.push(...actionButtonComponents, ...rowActionButtonComponents, ...gridViewPresets);\n\n              this.sandbox.setChildren(payloads);\n\n              propertiesToUpdate = {\n                columns: newInspectorColumns,\n                initialSortColumn: this.rxRecordGridDesignUtilsService.getInitialSortColumnModel(newInspectorColumns),\n                filterPresets: childrenModels.filterPresets\n              };\n            }\n          }\n\n          if (previousComponentDesignProperties.filterMode !== componentDesignProperties.filterMode) {\n            if (componentDesignProperties.filterMode === RecordGridFilterMode.Basic) {\n              propertiesToUpdate = {\n                filterExpression: null\n              };\n            } else {\n              propertiesToUpdate = {\n                filters: { basicFilters: [], filtersJson: null }\n              };\n            }\n          }\n\n          if (\n            previousComponentDesignProperties.associationDefinitionName !==\n            componentDesignProperties.associationDefinitionName\n          ) {\n            propertiesToUpdate = {\n              ...(propertiesToUpdate || {}),\n              associatedRecordNodeSide: this.getAssociatedRecordNodeSide(\n                componentDesignProperties,\n                recordAssociationDefinitions\n              )\n            };\n          }\n\n          if (previousComponentDesignProperties.mode !== componentDesignProperties.mode) {\n            propertiesToUpdate = {\n              associationDefinitionName: null,\n              associatedRecordId: null,\n              associatedRoleName: null,\n              associatedRecordNodeSide: null\n            };\n          }\n\n          componentDesignProperties = {\n            ...componentDesignProperties,\n            ...propertiesToUpdate\n          };\n\n          if (previousComponentDesignProperties.enableFiltering && !componentDesignProperties.enableFiltering) {\n            propertiesToUpdate = {\n              ...propertiesToUpdate,\n              requiredFilters: 0\n            };\n          }\n\n          this.updateComponentPropertiesAndConfig(\n            componentDesignProperties,\n            propertiesToUpdate,\n            recordDefinition,\n            recordAssociationDefinitions\n          );\n        }\n      );\n\n    combineLatest([\n      this.recordDefinitionName$.pipe(\n        map((recordDefinitionName) =>\n          recordDefinitionName\n            ? null\n            : this.sandbox.createError('Record definition name cannot be blank.', 'recordDefinitionName')\n        )\n      ),\n      columnComponents$.pipe(switchMap((columns) => this.validateColumns(columns))),\n      this.sandbox.getComponentPropertyValue('styles').pipe(map(validateCssClassNames)),\n      this.sandbox\n        .getComponentPropertyValue('mode')\n        .pipe(\n          switchMap((mode) =>\n            mode === RecordGridDesignDefinitionMode.Association\n              ? this.validateAssociationModeProps()\n              : this.actionButtonComponents$.pipe(switchMap((components) => this.validateActionButtons(components)))\n          )\n        ),\n      this.rowActionButtonComponents$.pipe(switchMap((rowActionButtons) => this.validateRowActions(rowActionButtons))),\n      this.sandbox\n        .getComponentPropertyValue(RX_AVAILABLE_ON_DEVICES_PROP_NAME)\n        .pipe(map(validateAvailableOnDevicesProp))\n    ])\n      .pipe(map(compact), map(flatten), takeUntil(this.sandbox.destroyed$))\n      .subscribe((issues) => {\n        this.sandbox.setValidationIssues(issues);\n      });\n\n    // set initial properties and inspector config\n    combineLatest([\n      this.sandbox.componentProperties$,\n      this.recordDefinition$,\n      this.recordAssociationDefinitions$,\n      columnComponents$,\n      basicRecordGridFilters$,\n      filterPresets$\n    ])\n      .pipe(take(1), takeUntil(this.sandbox.destroyed$))\n      .subscribe(\n        ([\n          componentProperties,\n          recordDefinition,\n          recordAssociationDefinitions,\n          columnComponents,\n          basicRecordGridFilters,\n          filterPresets\n        ]) => {\n          const componentDesignProperties = this.rxRecordGridDesignUtilsService.getComponentDesignProperties(\n            componentProperties as unknown as IRecordGridProperties,\n            initialProps,\n            columnComponents,\n            basicRecordGridFilters,\n            filterPresets\n          );\n\n          this.updateComponentPropertiesAndConfig(\n            componentDesignProperties,\n            componentDesignProperties,\n            recordDefinition,\n            recordAssociationDefinitions\n          );\n        }\n      );\n\n    const name$ = this.sandbox\n      .getComponentPropertyValue('name')\n      .pipe(shareReplay(1), takeUntil(this.sandbox.destroyed$));\n\n    const associationDefinitionDisplayName$ = this.associationDefinitionName$.pipe(\n      map((name) => this.rxDefinitionNameService.getDisplayName(name)),\n      shareReplay(1),\n      takeUntil(this.sandbox.destroyed$)\n    );\n\n    this.rxRecordGridDesignUtilsService\n      .getColumnDataDictionaryBranch(\n        this.sandbox.guid,\n        this.sandbox.descriptor.name,\n        name$,\n        columnComponents$,\n        this.recordDefinition$,\n        associationDefinitionDisplayName$\n      )\n      .pipe(skipWhile(isEmpty), takeUntil(this.sandbox.destroyed$))\n      .subscribe((dataDictionaryBranch) => {\n        this.sandbox.setCommonDataDictionary(dataDictionaryBranch);\n      });\n\n    combineLatest([\n      this.recordDefinitionName$.pipe(map((name) => this.rxDefinitionNameService.getDisplayName(name))),\n      associationDefinitionDisplayName$,\n      name$\n    ])\n      .pipe(\n        map((names) => this.rxRecordGridDesignUtilsService.getComponentName(this.sandbox.descriptor.name, ...names)),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((name) => {\n        // Set name to be used in the data dictionary for set property action if record grid will have child action buttons.\n        this.sandbox.setSettablePropertiesDataDictionary(name, []);\n      });\n\n    // updates grid view presets when view preset changes\n    this.selectedPresetsList$\n      .pipe(skip(1), withLatestFrom(this.childComponentsTree$, this.columns$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([selectedPresetsList, childComponents, columns]) => {\n        this.updatePresetViewComponents(childComponents, selectedPresetsList, columns);\n      });\n  }\n\n  private updatePresetViewComponents(\n    childComponents: IViewComponentDesignData[],\n    selectedPresetsList: IPresetItem[],\n    columns: IRecordGridDesignInspectorColumnConfig[]\n  ) {\n    const gridViewPresetComponents = childComponents.filter((c) => c.type === RX_RECORD_GRID.components.viewPreset);\n\n    const gridViewPresetPayloads = selectedPresetsList.map(({ guid }) => {\n      const existing = gridViewPresetComponents.find((c) => c.data.viewPresetGuid === guid);\n\n      return existing ?? this.rxRecordGridDesignUtilsService.getGridViewPresetPayload(guid, columns);\n    });\n\n    this.sandbox.setChildrenByType(gridViewPresetPayloads, [RX_RECORD_GRID.components.viewPreset]);\n  }\n\n  private getAssociatedRecordNodeSide(\n    componentDesignProperties: IRecordGridDesignProperties,\n    recordAssociationDefinitions: IAssociationDefinition[]\n  ): string {\n    const selectedAssociationDefinition = componentDesignProperties.associationDefinitionName\n      ? recordAssociationDefinitions.find(({ name }) => name === componentDesignProperties.associationDefinitionName)\n      : null;\n\n    return selectedAssociationDefinition\n      ? selectedAssociationDefinition.nodeAId === componentDesignProperties.recordDefinitionName\n        ? RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value\n        : RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value\n      : null;\n  }\n\n  actionButtonDropPredicate(data: IViewComponentDropPredicateData): boolean {\n    return data.draggedViewComponentDescriptor.type === RxViewComponentType.ActionButton;\n  }\n\n  getPropertiesByName(properties: IRecordGridDesignProperties): IRecordGridProperties {\n    return this.rxRecordGridDesignUtilsService.getComponentProperties(properties);\n  }\n\n  setRowActions(rowActions: IRowAction[]): void {\n    this.rowActionButtonGuids$\n      .pipe(take(1), withLatestFrom(this.childComponentsTree$))\n      .subscribe(([rowActionButtonGuids, childComponentsTree]) => {\n        const childComponentPayloads: IViewComponentDesignSetPayload<any>[] = childComponentsTree.filter(\n          (childComponent) => !includes(rowActionButtonGuids, childComponent.guid)\n        );\n\n        childComponentPayloads.push(...this.rxRecordGridDesignUtilsService.getRowActionButtonPayloads(rowActions));\n\n        this.sandbox.setChildren(childComponentPayloads);\n\n        this.toggleActionsColumn(rowActions.length > 0);\n      });\n  }\n\n  extractViewPresetSelectorGuid(val: string): string {\n    const matches = val?.match(/^\\${view\\.components\\.([0-9a-z-]+)\\.api}$/);\n\n    return (matches && matches[1]) ?? null;\n  }\n\n  private toggleActionsColumn(showActionsColumn: boolean): void {\n    this.sandbox.componentProperties$.pipe(take(1)).subscribe((componentProperties) => {\n      const columns = cloneDeep(componentProperties.columns);\n\n      const actionsColumn = find(columns, { fieldId: RX_RECORD_GRID.actionsColumnFieldDefinition.id });\n\n      if (showActionsColumn && !actionsColumn) {\n        columns.push({\n          fieldId: RX_RECORD_GRID.actionsColumnFieldDefinition.id,\n          guid: this.rxGuidService.generate(),\n          title: RX_RECORD_GRID.actionsColumnFieldDefinition.name,\n          visible: true,\n          index: columns.length,\n          filterable: false,\n          sortable: false,\n          searchable: false\n        });\n      } else if (!showActionsColumn) {\n        pull(columns, actionsColumn);\n\n        columns.forEach((column, index) => {\n          column.index = index;\n        });\n      }\n\n      this.updateComponentPropertiesAndConfig(\n        componentProperties,\n        {\n          columns\n        },\n        this.preservedRecordDefinition,\n        this.preservedRecordAssociationDefinitions\n      );\n    });\n  }\n\n  private updateComponentPropertiesAndConfig(\n    componentDesignProperties: IRecordGridDesignProperties,\n    propertiesToUpdate: Partial<IRecordGridDesignProperties>,\n    recordDefinition: IRecordDefinition,\n    recordAssociationDefinitions: IAssociationDefinition[]\n  ): void {\n    this.currentGridDesignProperties = componentDesignProperties;\n\n    if (propertiesToUpdate) {\n      this.sandbox.updateComponentProperties(propertiesToUpdate);\n    }\n\n    this.sandbox.updateInspectorConfig(\n      this.rxRecordGridDesignUtilsService.getInspector(\n        componentDesignProperties,\n        recordDefinition,\n        recordAssociationDefinitions\n      )\n    );\n  }\n\n  private getRecordDefinition(recordDefinitionName: string): Observable<IRecordDefinition> {\n    if (recordDefinitionName) {\n      return this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName).pipe(\n        catchError((error) => of(null)),\n        tap((recordDefinition) => (this.preservedRecordDefinition = recordDefinition))\n      );\n    } else {\n      this.preservedRecordDefinition = null;\n\n      return of(null);\n    }\n  }\n\n  private getRecordAssociationDefinitions(recordDefinitionName: string): Observable<IAssociationDefinition[]> {\n    if (recordDefinitionName) {\n      return this.rxRecordDefinitionCacheService.getRecordAssociationDefinitions(recordDefinitionName).pipe(\n        map((result) => result[recordDefinitionName] || []),\n        catchError((error) => of([])),\n        tap(\n          (recordAssociationDefinitions) => (this.preservedRecordAssociationDefinitions = recordAssociationDefinitions)\n        )\n      );\n    } else {\n      this.preservedRecordAssociationDefinitions = [];\n\n      return of([]);\n    }\n  }\n\n  private validateColumns(\n    columns: IViewComponentDesignData<IRecordGridDesignColumnData>[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    return columns.length\n      ? this.validateColumnActions(columns)\n      : of([this.sandbox.createError('Record grid must have at least one column.', 'columns')]);\n  }\n\n  private validateColumnActions(\n    columns: IViewComponentDesignData<IRecordGridDesignColumnData>[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    return combineLatest(\n      columns.map((column) => {\n        const actionViewComponents = _filter(column.children, { type: RxViewComponentType.Action });\n\n        return this.rxViewActionValidatorService.validate(actionViewComponents, 'columns').pipe(\n          map((issues) =>\n            issues.map((issue) => ({\n              ...issue,\n              data: {\n                ...issue.data,\n                columnGuid: column.guid\n              }\n            }))\n          )\n        );\n      })\n    ).pipe(map(flatten));\n  }\n\n  private validateRowActions(\n    rowActionButtons: IViewComponentDesignData<IActionButtonProperties>[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    return rowActionButtons.length\n      ? combineLatest(\n          rowActionButtons.map((rowActionButton, index) =>\n            this.rxViewActionValidatorService.validate(rowActionButton.children, 'rowActions').pipe(\n              map((issues) =>\n                issues.map((issue) => ({\n                  ...issue,\n                  data: {\n                    ...issue.data,\n                    rowActionIndex: index\n                  }\n                }))\n              )\n            )\n          )\n        ).pipe(map(flatten))\n      : of([]);\n  }\n\n  private validateAssociationModeProps(): Observable<IViewComponentDesignValidationIssue[]> {\n    return combineLatest([\n      combineLatest([this.associationDefinitionName$, this.associatedRecordNodeSide$]).pipe(\n        map(([associationDefinitionName, associatedRecordNodeSide]) => {\n          if (associationDefinitionName) {\n            return associatedRecordNodeSide\n              ? null\n              : this.sandbox.createError('Associated record node side cannot be blank.', 'associatedRecordNodeSide');\n          } else {\n            return this.sandbox.createError(\n              'Association definition name cannot be blank.',\n              'associationDefinitionName'\n            );\n          }\n        })\n      ),\n      this.sandbox\n        .getComponentPropertyValue('associatedRecordId')\n        .pipe(\n          map((associatedRecordId) =>\n            associatedRecordId\n              ? null\n              : this.sandbox.createError('Associated record ID cannot be blank.', 'associatedRecordId')\n          )\n        )\n    ]).pipe(map(compact));\n  }\n\n  private validateActionButtons(\n    components: IViewComponentDesignData<IActionButtonProperties>[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    const deleteActions = flatten(components.map((component) => component.children)).filter(\n      ({ data }: IViewComponentDesignData<IViewActionDesignProperties & { recordDefinitionName: string }>) =>\n        data.name === 'rxDeleteRecordsAction' && data.recordDefinitionName\n    );\n\n    return deleteActions.length\n      ? combineLatest(\n          deleteActions.map(({ data }) =>\n            this.rxRecordDefinitionCacheService\n              .getRecordDefinition(data.recordDefinitionName)\n              .pipe(\n                map(({ resourceType }) =>\n                  resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType\n                    ? this.sandbox.createWarning(\n                        'You have configured a Record grid action to delete Join records. Please ensure that one or more processes or rules have been defined to perform the deletion of the selected Join record instances.'\n                      )\n                    : null\n                )\n              )\n          )\n        ).pipe(map(compact))\n      : of([]);\n  }\n}\n"]}