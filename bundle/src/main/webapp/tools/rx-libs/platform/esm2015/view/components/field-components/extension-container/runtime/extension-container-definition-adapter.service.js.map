{"version":3,"file":"extension-container-definition-adapter.service.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/field-components/extension-container/runtime/extension-container-definition-adapter.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RX_ASSOCIATED_RECORD_NODE_SIDES } from '@helix/platform/association/api';\nimport {\n  IDefinitionAdapter,\n  RxDefinitionNameService,\n  RxGlobalCacheService,\n  RxNotificationService\n} from '@helix/platform/shared/api';\nimport { RxTreeService } from '@helix/platform/utils';\nimport {\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RX_VIEW_DEFINITION,\n  RxViewComponentType,\n  RxViewDefinitionDataPageService,\n  RxViewDefinitionLocalizationService,\n  RxViewDefinitionParserService,\n  ViewDefinitionType\n} from '@helix/platform/view/api';\nimport { RxRuntimeViewUtilsService } from '@helix/platform/view/runtime';\nimport { filter, forEach, isString, map as _map, reduce, values } from 'lodash';\nimport moment from 'moment-es6';\nimport { combineLatest, forkJoin, Observable, of } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { RX_EXTENSION_CONTAINER } from '../extension-container.constant';\nimport { RxExtensionContainerHelperService } from './extension-container-helper.service';\nimport { IRxViewDefinitionMap } from './extension-container.types';\n\n@Injectable()\nexport class RxExtensionContainerDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition>\n{\n  constructor(\n    private rxViewDefinitionParserService: RxViewDefinitionParserService,\n    private rxViewDefinitionDataPageService: RxViewDefinitionDataPageService,\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxTreeService: RxTreeService,\n    private rxExtensionContainerHelperService: RxExtensionContainerHelperService,\n    private rxNotificationService: RxNotificationService,\n    private rxRuntimeViewUtilsService: RxRuntimeViewUtilsService,\n    private rxViewDefinitionLocalizationService: RxViewDefinitionLocalizationService,\n    private translateService: TranslateService\n  ) {}\n\n  adaptDefinition(\n    extensionContainerComponentDefinition: IContainerViewComponentDefinition,\n    viewDefinition: IViewDefinition\n  ): Observable<any> {\n    const targetRecordEditorComponentDefinition = this.getTargetRecordEditorComponentDefinition(\n      viewDefinition,\n      extensionContainerComponentDefinition\n    );\n\n    extensionContainerComponentDefinition.propertiesByName.mode =\n      targetRecordEditorComponentDefinition.propertiesByName.mode;\n\n    return this.getExtensionViewDefinitions(extensionContainerComponentDefinition.guid).pipe(\n      map(this.getViewDefinitionMap.bind(this)),\n      map(this.filterDuplicatedRecordEditorComponentDefinitions.bind(this)),\n      map((viewDefinitionMaps: IRxViewDefinitionMap[]) =>\n        this.filterIncompatibleRecordEditorComponentDefinitions(\n          viewDefinitionMaps,\n          targetRecordEditorComponentDefinition\n        )\n      ),\n      switchMap(this.setRecordEditorLabels.bind(this)),\n      map(this.getExtensionRecordEditorComponentDefinitions.bind(this)),\n      switchMap((extensionRecordEditorComponentDefinitions: IContainerViewComponentDefinition[]) => {\n        const processAndAddChildrenToExtensionContainer = () => {\n          extensionContainerComponentDefinition.componentDefinitions = [];\n          (extensionContainerComponentDefinition.resourceType as any) =\n            RX_VIEW_DEFINITION.resourceTypes.containerViewComponent;\n\n          forEach(extensionRecordEditorComponentDefinitions, (extensionRecordEditorComponentDefinition) => {\n            // re-assign expression for child Record editor component definitions\n            this.processRecordEditorComponentDefinition(\n              extensionRecordEditorComponentDefinition,\n              targetRecordEditorComponentDefinition,\n              extensionContainerComponentDefinition\n            );\n\n            extensionContainerComponentDefinition.componentDefinitions.push(\n              this.getExtensionContainerSectionViewComponentDefinition(\n                extensionRecordEditorComponentDefinition,\n                targetRecordEditorComponentDefinition\n              )\n            );\n          });\n\n          const children = extensionContainerComponentDefinition.componentDefinitions.map(\n            (component) => component.guid\n          );\n\n          extensionContainerComponentDefinition.layout = JSON.stringify({\n            outlets: [\n              {\n                name: RX_VIEW_DEFINITION.defaultOutletName,\n                columns: [\n                  {\n                    children\n                  }\n                ]\n              }\n            ]\n          });\n\n          return extensionRecordEditorComponentDefinitions;\n        };\n\n        // run adapters for all Record editors and it's children\n        const adapters$ = extensionRecordEditorComponentDefinitions.map(\n          (recordEditorComponent: IContainerViewComponentDefinition) => {\n            return combineLatest([\n              ...this.rxRuntimeViewUtilsService.runAdaptersForComponents(viewDefinition, recordEditorComponent)\n            ]);\n          }\n        );\n\n        return combineLatest(adapters$).pipe(\n          tap({\n            complete: () => processAndAddChildrenToExtensionContainer()\n          })\n        );\n      })\n    );\n  }\n\n  getExtensionViewDefinitions(extensionContainerGuid: string): Observable<IViewDefinition[]> {\n    return this.rxViewDefinitionDataPageService\n      .get({\n        params: {\n          propertySelection: [\n            'name',\n            'targetExtensionContainerGuid',\n            'targetViewDefinitionName',\n            'componentDefinitions',\n            'localizableStringsByComponentId',\n            'lastUpdateTime'\n          ],\n          viewType: ViewDefinitionType.Regular,\n          targetExtensionContainerGuid: extensionContainerGuid,\n          excludeExtensionViews: false\n        },\n        headers: {\n          'default-bundle-scope': ''\n        }\n      })\n      .pipe(\n        map((response) => {\n          const associationsInExtensionContainer = [];\n\n          forEach(response.data, (viewDefinition: IViewDefinition) => {\n            this.rxViewDefinitionLocalizationService.applyLocalization(viewDefinition);\n\n            const associationDefinitionName =\n              viewDefinition.componentDefinitions[0]?.propertiesByName.associationDefinitionName;\n\n            if (isString(associationDefinitionName)) {\n              if (associationsInExtensionContainer.includes(associationDefinitionName)) {\n                this.rxNotificationService.addWarningMessage(\n                  this.translateService.instant(\n                    'com.bmc.arsys.rx.client.view-components.record-editor.extension-container.duplicate-extensions.warning'\n                  )\n                );\n              } else {\n                associationsInExtensionContainer.push(associationDefinitionName);\n              }\n            }\n          });\n\n          return response.data as IViewDefinition[];\n        })\n      );\n  }\n\n  getTargetRecordEditorComponentDefinition(\n    viewDefinition: IViewDefinition,\n    extensionContainerComponentDefinition: IContainerViewComponentDefinition\n  ): IContainerViewComponentDefinition {\n    return this.rxViewDefinitionParserService.findParentComponentDefinition(\n      viewDefinition,\n      extensionContainerComponentDefinition,\n      (parentComponentDefinition) => parentComponentDefinition.type === RxViewComponentType.RecordEditor\n    );\n  }\n\n  getViewDefinitionMap(viewDefinitions: IViewDefinition[]): IRxViewDefinitionMap[] {\n    return reduce(\n      viewDefinitions,\n      (result, viewDefinition) => {\n        const recordEditorComponentDefinition = viewDefinition.componentDefinitions[0];\n\n        // View may not contain Record editor component definition because of permission restrictions\n        if (recordEditorComponentDefinition) {\n          result.push({\n            viewDefinition,\n            recordEditorComponentDefinition\n          });\n        }\n\n        return result;\n      },\n      []\n    );\n  }\n\n  filterDuplicatedRecordEditorComponentDefinitions(viewDefinitionMaps: IRxViewDefinitionMap[]): IRxViewDefinitionMap[] {\n    return values(\n      reduce(\n        viewDefinitionMaps,\n        (result, viewDefinitionMap) => {\n          // Allow multiple record editors to be displayed in the extension container if they are bound\n          // to the same parent record instance. In this case they have no associationDefinitionName.\n          if (!viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.associationDefinitionName) {\n            result[viewDefinitionMap.recordEditorComponentDefinition.guid] = viewDefinitionMap;\n\n            return result;\n          }\n\n          const key = [\n            viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.recordDefinitionName,\n            viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.associationDefinitionName\n          ].join('');\n\n          if (!result[key]) {\n            result[key] = viewDefinitionMap;\n          } else if (\n            moment(viewDefinitionMap.viewDefinition.lastUpdateTime) < moment(result[key].viewDefinition.lastUpdateTime)\n          ) {\n            result[key] = viewDefinitionMap;\n          }\n\n          return result;\n        },\n        {}\n      )\n    );\n  }\n\n  filterIncompatibleRecordEditorComponentDefinitions(\n    viewDefinitionMaps: IRxViewDefinitionMap[],\n    targetRecordEditorComponentDefinition: IContainerViewComponentDefinition\n  ): IRxViewDefinitionMap[] {\n    return filter(viewDefinitionMaps, (viewDefinitionMap) => {\n      const hasSameMode =\n        viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.mode ===\n        targetRecordEditorComponentDefinition.propertiesByName.mode;\n\n      const hasSameRecordDefinitionName =\n        targetRecordEditorComponentDefinition.propertiesByName.recordDefinitionName ===\n        viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.recordDefinitionName;\n\n      const hasAssociation =\n        viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.associationDefinitionName;\n\n      const validExtensionWithoutAssociation = hasSameRecordDefinitionName && !hasAssociation && hasSameMode;\n      const validExtensionWithAssociation = hasAssociation && hasSameMode;\n\n      return validExtensionWithoutAssociation || validExtensionWithAssociation;\n    });\n  }\n\n  setRecordEditorLabels(viewDefinitionMaps: IRxViewDefinitionMap[]): Observable<IRxViewDefinitionMap[]> {\n    return forkJoin<IRxViewDefinitionMap>([\n      ...viewDefinitionMaps.map((viewDefinitionMap) => {\n        let label$;\n\n        if (viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.label) {\n          label$ = of(viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.label);\n        } else {\n          label$ = this.rxGlobalCacheService.getBundleFriendlyName(\n            this.rxDefinitionNameService.getBundleId(viewDefinitionMap.viewDefinition.name)\n          );\n        }\n\n        return label$.pipe(\n          map((label) => {\n            viewDefinitionMap.recordEditorComponentDefinition.propertiesByName.label = label;\n\n            return viewDefinitionMap;\n          })\n        );\n      })\n    ]);\n  }\n\n  getExtensionRecordEditorComponentDefinitions(\n    viewDefinitionMaps: IRxViewDefinitionMap[]\n  ): IContainerViewComponentDefinition[] {\n    return _map(viewDefinitionMaps, 'recordEditorComponentDefinition');\n  }\n\n  processRecordEditorComponentDefinition(\n    extensionRecordEditorComponentDefinition: IContainerViewComponentDefinition,\n    targetRecordEditorComponentDefinition: IContainerViewComponentDefinition,\n    extensionContainerComponentDefinition: IContainerViewComponentDefinition\n  ): IContainerViewComponentDefinition {\n    this.rxTreeService\n      .flattenTree(extensionRecordEditorComponentDefinition, 'componentDefinitions')\n      .forEach((componentDefinition) => {\n        this.patchFieldComponentExpressions(\n          componentDefinition,\n          extensionRecordEditorComponentDefinition,\n          targetRecordEditorComponentDefinition,\n          extensionContainerComponentDefinition\n        );\n      });\n\n    return extensionRecordEditorComponentDefinition;\n  }\n\n  // re-assign all expressions from extension Record editor to target Record editor\n  // old path: ${view.components.<extension-record-editor-guid>.recordInstance}\n  // new path: ${view.components.<target-record-editor-guid>.recordInstance.associationInstances[<association-definition-name>].extensions[0]}\n  patchFieldComponentExpressions(\n    componentDefinition,\n    extensionRecordEditorComponentDefinition,\n    targetRecordEditorComponentDefinition,\n    targetExtensionContainerComponentDefinition\n  ) {\n    // ${view.components.<target-record-editor-guid>.recordInstance.associationInstances[<association-definition-name>].extensions[0]}\n    const recordInstanceReferencingExpression = extensionRecordEditorComponentDefinition.propertiesByName\n      .associationDefinitionName\n      ? [\n          targetRecordEditorComponentDefinition.guid,\n          '.',\n          \"recordInstance.associationInstances['\",\n          extensionRecordEditorComponentDefinition.propertiesByName.associationDefinitionName,\n          \"'].\",\n          RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,\n          '.extensions[0]'\n        ].join('')\n      : [targetRecordEditorComponentDefinition.guid, '.recordInstance'].join('');\n\n    // ${view.components.<target-record-editor-guid>.recordInstance.associationInstances[<association-definition-name>].extensions[0].recordDefinitionName}\n    const recordDefinitionNameReferencingExpression = [\n      recordInstanceReferencingExpression,\n      '.recordDefinitionName'\n    ].join('');\n\n    // ${view.components.<target-extension-container-guid>.recordDefinitions.<extension-record-definition-name>}\n    const recordDefinitionReferencingExpression = extensionRecordEditorComponentDefinition.propertiesByName\n      .associationDefinitionName\n      ? [\n          targetExtensionContainerComponentDefinition.guid,\n          '.',\n          RX_EXTENSION_CONTAINER.recordDefinitionsReferencingExpression,\n          \"['\",\n          extensionRecordEditorComponentDefinition.propertiesByName.recordDefinitionName,\n          \"']\"\n        ].join('')\n      : [targetRecordEditorComponentDefinition.guid, '.recordDefinition'].join('');\n\n    // ${view.components.<target-record-editor-guid>.recordInstance.associationInstances[<association-definition-name>].extensions[0].id}\n    const recordInstanceIdReferencingExpression = [recordInstanceReferencingExpression, '.id'].join('');\n\n    let selectionFieldOptionNamesByIdReferencingExpression;\n\n    if (extensionRecordEditorComponentDefinition.propertiesByName.associationDefinitionName) {\n      // ${view.components.<target-extension-container-guid>.<extension-record-editor-guid>:selectionFieldOptionNamesById}\n      selectionFieldOptionNamesByIdReferencingExpression = [\n        targetExtensionContainerComponentDefinition.guid,\n        '.',\n        this.rxExtensionContainerHelperService.getSelectionFieldOptionNamesByIdExpression(\n          extensionRecordEditorComponentDefinition.guid\n        )\n      ].join('');\n    } else {\n      // ${view.components.<targetRecordEditorComponentDefinition>.selectionFieldOptionNamesById}\n      selectionFieldOptionNamesByIdReferencingExpression = `${targetRecordEditorComponentDefinition.guid}.selectionFieldOptionNamesById`;\n    }\n\n    /*\n     * {\n     *   regExp - determines the part of the old expression\n     *   expression - determines new value which should replace <regExp> match\n     * }\n     * */\n    const expressionMap = [\n      // patch record instance id expression\n      {\n        regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + '.recordInstanceId', 'g'),\n        expression: recordInstanceIdReferencingExpression\n      },\n      // patch record instance expression\n      {\n        regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + '.recordInstance', 'g'),\n        expression: recordInstanceReferencingExpression\n      },\n      // patch record definition name expression\n      {\n        regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + '.recordDefinitionName', 'g'),\n        expression: recordDefinitionNameReferencingExpression\n      },\n      // patch record definition name expression\n      {\n        regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + '.recordDefinition', 'g'),\n        expression: recordDefinitionReferencingExpression\n      },\n      // patch selection field option names by id expression\n      {\n        regExp: new RegExp(extensionRecordEditorComponentDefinition.guid + '.selectionFieldOptionNamesById', 'g'),\n        expression: selectionFieldOptionNamesByIdReferencingExpression\n      },\n      // patch record editor properties like 'canSave', 'inReadState', 'isValid', 'isDirty'\n      // ${view.components.<target-record-editor-guid>.canSave}\n      // ${view.components.<target-record-editor-guid>.inReadState} ...\n      {\n        regExp: new RegExp(`${extensionRecordEditorComponentDefinition.guid}\\\\.(\\\\w+)}`, 'g'),\n        expression: `${targetRecordEditorComponentDefinition.guid}.$1}`\n      }\n    ];\n\n    const propertiesToPatch = ['disabled', 'hidden', 'value', 'html'];\n\n    propertiesToPatch\n      .filter((propertyName) => isString(componentDefinition.propertiesByName[propertyName]))\n      .forEach((propertyName) => {\n        forEach(expressionMap, (expressionConfig) => {\n          componentDefinition.propertiesByName[propertyName] = componentDefinition.propertiesByName[\n            propertyName\n          ].replace(expressionConfig.regExp, expressionConfig.expression);\n        });\n      });\n\n    componentDefinition.propertiesByName.api = `\\${view.components.${targetRecordEditorComponentDefinition.guid}.api}`;\n    componentDefinition.propertiesByName.inReadState = `\\${view.components.${targetRecordEditorComponentDefinition.guid}.inReadState}`;\n\n    if (extensionRecordEditorComponentDefinition.propertiesByName.associationDefinitionName) {\n      componentDefinition.propertiesByName.associatedRecordPath = [\n        extensionRecordEditorComponentDefinition.propertiesByName.associationDefinitionName,\n        RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,\n        'extensions',\n        0\n      ];\n    }\n\n    if (componentDefinition.propertiesByName.recordInstance) {\n      componentDefinition.propertiesByName.recordInstance = [\n        '${view.components.',\n        recordInstanceReferencingExpression,\n        '}'\n      ].join('');\n    }\n\n    if (componentDefinition.propertiesByName.recordDefinition) {\n      componentDefinition.propertiesByName.recordDefinition = [\n        '${view.components.',\n        recordDefinitionReferencingExpression,\n        '}'\n      ].join('');\n    }\n  }\n\n  getExtensionContainerSectionViewComponentDefinition(\n    recordEditorComponentDefinition: IContainerViewComponentDefinition,\n    targetRecordEditorComponentDefinition: IContainerViewComponentDefinition\n  ): IContainerViewComponentDefinition {\n    return {\n      guid: recordEditorComponentDefinition.guid,\n      type: RX_EXTENSION_CONTAINER.extensionContainerSectionComponent,\n      layout: recordEditorComponentDefinition.layout,\n      resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n      componentDefinitions: recordEditorComponentDefinition.componentDefinitions,\n      propertiesByName: {\n        label: recordEditorComponentDefinition.propertiesByName.label,\n        styles: recordEditorComponentDefinition.propertiesByName.styles,\n        recordDefinitionName: recordEditorComponentDefinition.propertiesByName.recordDefinitionName,\n        associationDefinitionName: recordEditorComponentDefinition.propertiesByName.associationDefinitionName,\n        [RX_AVAILABLE_ON_DEVICES_PROP_NAME]:\n          recordEditorComponentDefinition.propertiesByName[RX_AVAILABLE_ON_DEVICES_PROP_NAME],\n        api: `\\${view.components.${targetRecordEditorComponentDefinition.guid}.api}`,\n        associatedRecordPath: [\n          recordEditorComponentDefinition.propertiesByName.associationDefinitionName,\n          RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value,\n          'extensions',\n          0\n        ]\n      }\n    };\n  }\n}\n"]}