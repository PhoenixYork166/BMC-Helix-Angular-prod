{"version":3,"file":"open-view-action-design-model.class.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/actions/open-view/open-view-action-design-model.class.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injector } from '@angular/core';\nimport { RxViewDesignerActionModel } from '@helix/platform/view/designer';\nimport {\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  IViewDefinition,\n  OpenViewActionLaunchBehavior,\n  OpenViewActionModalSize,\n  OpenViewActionType,\n  RxViewDefinitionCacheService,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map, pluck, skip, switchMap } from 'rxjs/operators';\nimport { omit } from 'lodash';\nimport { IOpenViewActionDesignProperties } from './open-view-action.types';\nimport { RxOpenViewModelHelperService } from './open-view-model-helper.service';\n\nexport class RxOpenViewActionDesignModel extends RxViewDesignerActionModel {\n  private rxViewDefinitionCacheService = this.injector.get(RxViewDefinitionCacheService);\n  private rxOpenViewModelHelperService = this.injector.get(RxOpenViewModelHelperService);\n\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<IOpenViewActionDesignProperties>\n  ): ViewActionDesignEditableProperties<IOpenViewActionDesignProperties> {\n    return {\n      viewDefinitionName: null,\n      'presentation.type': OpenViewActionType.FullWidth,\n      'presentation.launchBehavior': OpenViewActionLaunchBehavior.SameWindow,\n      ...initialProperties\n    };\n  }\n\n  constructor(injector: Injector, readonly sandbox: IViewActionDesignSandbox<IOpenViewActionDesignProperties>) {\n    super(injector, sandbox);\n\n    const viewDefinitionName$ = this.sandbox.actionProperties$.pipe(\n      pluck('viewDefinitionName'),\n      distinctUntilChanged()\n    );\n\n    const presentationType$ = this.sandbox.actionProperties$.pipe(pluck('presentation.type'), distinctUntilChanged());\n\n    const presentationModalSize$ = this.sandbox.actionProperties$.pipe(\n      pluck('presentation.modalSize'),\n      distinctUntilChanged()\n    );\n\n    combineLatest([viewDefinitionName$, presentationType$, presentationModalSize$])\n      .pipe(\n        switchMap(([viewDefinitionName, presentationType, presentationModalSize]) =>\n          this.getActionEditorConfig(viewDefinitionName, presentationType, presentationModalSize)\n        )\n      )\n      .subscribe((config) => this.sandbox.setActionPropertyEditorConfig(config));\n\n    viewDefinitionName$\n      .pipe(switchMap((viewDefinitionName) => this.getViewOutputParams(viewDefinitionName)))\n      .subscribe((outputParams) => {\n        this.sandbox.setActionOutputDataDictionary(\n          outputParams.map(({ name }) => ({\n            label: name,\n            expression: this.getOutputExpressionForPropertyPath(name)\n          }))\n        );\n      });\n\n    presentationType$.pipe(skip(1)).subscribe((presentationType) => {\n      let props = this.sandbox.getActionProperties();\n\n      if (presentationType === OpenViewActionType.FullWidth) {\n        props['presentation.launchBehavior'] = OpenViewActionLaunchBehavior.SameWindow;\n\n        props = omit(props, ['presentation.modalSize', 'presentation.title']);\n      } else {\n        props = omit(props, ['presentation.launchBehavior']);\n\n        if (\n          !props['presentation.modalSize'] ||\n          this.sandbox.getActionPropertyValue('presentation.modalSize') === OpenViewActionModalSize.FullSize\n        ) {\n          props['presentation.modalSize'] = OpenViewActionModalSize.Medium;\n        }\n      }\n\n      this.sandbox.setActionProperties(props);\n    });\n\n    presentationModalSize$.pipe(skip(1)).subscribe((presentationModalSize) => {\n      if (presentationModalSize === OpenViewActionModalSize.FullSize) {\n        this.sandbox.setActionProperties(omit(this.sandbox.getActionProperties(), ['presentation.title']));\n      }\n    });\n  }\n\n  private getActionEditorConfig(\n    viewDefinitionName: string,\n    presentationType: OpenViewActionType,\n    presentationModalSize: OpenViewActionModalSize\n  ): Observable<IViewActionDesignPropertyEditorConfig> {\n    return this.getViewInputParams(viewDefinitionName).pipe(\n      map((inputParams) =>\n        this.rxOpenViewModelHelperService.getOpenViewInspector(\n          inputParams,\n          presentationType,\n          presentationModalSize,\n          this.expressionConfigurator\n        )\n      )\n    );\n  }\n\n  private getViewInputParams(viewDefinitionName: string): Observable<IViewDefinition['inputParams']> {\n    return viewDefinitionName\n      ? this.rxViewDefinitionCacheService.getViewDefinition(viewDefinitionName).pipe(pluck('inputParams'))\n      : of([]);\n  }\n\n  private getViewOutputParams(viewDefinitionName: string): Observable<IViewDefinition['outputParams']> {\n    return viewDefinitionName\n      ? this.rxViewDefinitionCacheService.getViewDefinition(viewDefinitionName).pipe(pluck('outputParams'))\n      : of([]);\n  }\n}\n"]}