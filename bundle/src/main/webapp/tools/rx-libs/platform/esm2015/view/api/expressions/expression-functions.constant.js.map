{"version":3,"file":"expression-functions.constant.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/api/expressions/expression-functions.constant.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAEpD,MAAM,mBAAmB,GAAwC;IAC/D;QACE,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,OAAO;QACjB,WAAW,EAAE,+DAA+D;QAC5E,UAAU,EAAE;YACV;gBACE,IAAI,EAAE,OAAO;gBACb,WAAW,EAAE,uBAAuB;aACrC;SACF;KACF;IACD;QACE,IAAI,EAAE,UAAU;QAChB,QAAQ,EAAE,OAAO;QACjB,WAAW,EAAE,sDAAsD;QACnE,UAAU,EAAE;YACV;gBACE,IAAI,EAAE,OAAO;gBACb,WAAW,EAAE,uBAAuB;aACrC;YACD;gBACE,IAAI,EAAE,OAAO;gBACb,WAAW,EAAE,0BAA0B;aACxC;SACF;KACF;IACD;QACE,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE,OAAO;QACjB,WAAW,EAAE,yBAAyB;QACtC,UAAU,EAAE;YACV;gBACE,IAAI,EAAE,OAAO;gBACb,WAAW,EAAE,uBAAuB;aACrC;SACF;KACF;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAwC,mBAAmB,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE;IACjH,MAAM,MAAM,GAAG,GAAG,CAAC,UAAU,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAE7D,uCACK,UAAU,KACb,SAAS,EAAE,GAAG,UAAU,CAAC,IAAI,IAAI,MAAM,GAAG,IAC1C;AACJ,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,qBAAqB,GAAG;IACnC,IAAI,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC;IAC3E,QAAQ,EAAE,CAAC,UAAU,EAAE,KAAK,EAAE,EAAE,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC;IAC5D,IAAI,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC;CACvC,CAAC","sourcesContent":["import { IFunctionDataDictionaryDescriptor } from '@helix/platform/shared/api';\nimport { every, includes, map, size } from 'lodash';\n\nconst expressionFunctions: IFunctionDataDictionaryDescriptor[] = [\n  {\n    name: 'SAME',\n    category: 'Array',\n    description: 'Returns true if all values in array are the same, else false.',\n    parameters: [\n      {\n        name: 'array',\n        description: 'The array to inspect.'\n      }\n    ]\n  },\n  {\n    name: 'INCLUDES',\n    category: 'Array',\n    description: 'Returns true if value is found in array, else false.',\n    parameters: [\n      {\n        name: 'array',\n        description: 'The array to inspect.'\n      },\n      {\n        name: 'value',\n        description: 'The value to search for.'\n      }\n    ]\n  },\n  {\n    name: 'SIZE',\n    category: 'Array',\n    description: 'Gets the size of array.',\n    parameters: [\n      {\n        name: 'array',\n        description: 'The array to inspect.'\n      }\n    ]\n  }\n];\n\nexport const RX_EXPRESSION_FUNCTIONS: IFunctionDataDictionaryDescriptor[] = expressionFunctions.map((descriptor) => {\n  const params = map(descriptor.parameters, 'name').join(', ');\n\n  return {\n    ...descriptor,\n    signature: `${descriptor.name}(${params})`\n  };\n});\n\nexport const RX_SUPPORTED_FUNCTION = {\n  SAME: (collection) => every(collection, (value) => value === collection[0]),\n  INCLUDES: (collection, value) => includes(collection, value),\n  SIZE: (collection) => size(collection)\n};\n"]}