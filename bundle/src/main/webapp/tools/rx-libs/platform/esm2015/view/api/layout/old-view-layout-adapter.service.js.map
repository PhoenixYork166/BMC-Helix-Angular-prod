{"version":3,"file":"old-view-layout-adapter.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/api/layout/old-view-layout-adapter.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,QAAQ,CAAC;AACpC,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAQ5D,OAAO,EAAE,kBAAkB,EAAE,MAAM,oCAAoC,CAAC;AACxE,OAAO,EAA2D,cAAc,EAAE,MAAM,qBAAqB,CAAC;;;AAK9G,MAAM,OAAO,6BAA6B;IACxC,YAAoB,mBAAwC;QAAxC,wBAAmB,GAAnB,mBAAmB,CAAqB;IAAG,CAAC;IAEhE,aAAa,CAAC,uBAA2D;QACvE,IAAI,IAAI,CAAC,oBAAoB,CAAC,uBAAuB,CAAC,EAAE;YACtD,IAAI,CAAC,iBAAiB,CAAC,uBAAuB,CAAC,mBAA0B,CAAC,CAAC;SAC5E;aAAM,IAAI,IAAI,CAAC,8BAA8B,CAAC,uBAAuB,CAAC,mBAAmB,CAAC,EAAE;YAC3F,IAAI,CAAC,sBAAsB,CAAC,uBAAuB,CAAC,mBAAmB,CAAC,CAAC;SAC1E;IACH,CAAC;IAEO,oBAAoB,CAAC,mBAAuD;QAClF,OAAO,CAAC,mBAAmB,CAAC,yBAAyB,CAAC;IACxD,CAAC;IAEO,iBAAiB,CAAC,cAA+B;QACvD,MAAM,MAAM,GAAmB,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;QAE5F,IAAI,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,GAAG,CAAC,MAAM,EAAE,iBAAiB,CAAC,EAAE;YAClE,mEAAmE;YACnE,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;SAC7C;aAAM;YACL,sCAAsC;YACtC,MAAM,iBAAiB,GAAgC,GAAG,CAAC,MAAM,EAAE,qBAAqB,EAAE,EAAE,CAAC,CAAC;YAC9F,MAAM,OAAO,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;gBACjD,IAAI,UAA6B,CAAC;gBAElC,IAAI,KAAK,CAAC,IAAI,EAAE;oBACd,UAAU,GAAG;wBACX,IAAI,EAAE,KAAK,CAAC,IAAI,KAAK,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI;wBAC/F,MAAM,EAAE,KAAK,CAAC,MAAM,IAAI,IAAI;wBAC5B,MAAM,EAAE,KAAK,CAAC,MAAM,IAAI,IAAI;wBAC5B,IAAI,EAAE,KAAK,CAAC,IAAI,IAAI,IAAI;wBACxB,OAAO,EAAE,CAAC,KAAK,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACnE,CAAC;iBACH;qBAAM;oBACL,yEAAyE;oBACzE,UAAU,GAAG;wBACX,IAAI,EAAE,UAAU,CAAC,EAAE;wBACnB,OAAO,EAAE,CAAC,EAAE,QAAQ,EAAE,CAAC,KAAK,CAAC,qBAAqB,CAAC,EAAE,CAAC;qBACvD,CAAC;iBACH;gBAED,OAAO,UAAU,CAAC;YACpB,CAAC,CAAC,CAAC;YAEH,MAAM,SAAS,GAAgB,EAAE,OAAO,EAAE,CAAC;YAE3C,cAAc,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;SACnD;IACH,CAAC;IAEO,sBAAsB,CAAC,mBAAwE;QACrG,IAAI,mBAAmB,CAAC,MAAM,EAAE;YAC9B,MAAM,MAAM,GAAmB,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;YAEjG,+CAA+C;YAC/C,gEAAgE;YAChE,MAAM,QAAQ,GAAG,GAAG,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAC;YAEpD,IAAI,QAAQ,EAAE;gBACZ,mBAAmB,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC,CAAC;aACpF;YAED,IAAI,MAAM,IAAI,MAAM,CAAC,qBAAqB,EAAE;gBAC1C,MAAM,SAAS,GAAG;oBAChB,OAAO,EAAE;wBACP;4BACE,IAAI,EAAE,kBAAkB,CAAC,iBAAiB;4BAC1C,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;yBAC5D;qBACF;iBACF,CAAC;gBAEF,mBAAmB,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;aACxD;SACF;IACH,CAAC;IAEO,wBAAwB,CAAC,MAAM;QACrC,MAAM,QAAQ,GAAG,GAAG,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAC;QAEpD,IAAI,QAAQ,EAAE;YACZ,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,GAAG;gBAC1B;oBACE,QAAQ;iBACT;aACF,CAAC;YAEF,OAAO,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;SACnC;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,cAAc,CAAC,MAA4B;QACjD,oFAAoF;QACpF,kFAAkF;QAClF,OAAO;YACL,IAAI,EAAE,MAAM,CAAC,IAAI,IAAI,IAAI;YACzB,QAAQ,EAAE,UAAU,MAAM,CAAC,IAAI,IAAI,EAAE,EAAE;YACvC,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC,GAAG,CAC3B,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,EAAE,8CAA8C,CAAC,IAAI,KAAK,CAAC,qBAAqB,CACrG;SACF,CAAC;IACJ,CAAC;IAEO,8BAA8B,CACpC,mBAA+C;QAE/C,OAAQ,mBAAyD,CAAC,oBAAoB,KAAK,SAAS,CAAC;IACvG,CAAC;;0HA/GU,6BAA6B;8HAA7B,6BAA6B,cAF5B,MAAM;2FAEP,6BAA6B;kBAHzC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { get, isNil } from 'lodash';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { IOldViewLayout, IOldViewLayoutColumn, IOldViewLayoutColumnChild } from './old-view-layout.types';\nimport {\n  AnyViewComponentDefinition,\n  IContainerViewComponentDefinition\n} from '../domain/view-component-definition.types';\nimport { IViewComponentDefinitionWithParent } from '../domain/view-component-definition-with-parent.interface';\nimport { IViewDefinition } from '../domain/view-definition.interface';\nimport { RX_VIEW_DEFINITION } from '../domain/view-definition.constant';\nimport { IViewLayout, IViewLayoutOutlet, IViewLayoutOutletColumn, ViewLayoutRole } from './view-layout.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxOldViewLayoutAdapterService {\n  constructor(private rxJsonParserService: RxJsonParserService) {}\n\n  convertLayout(componentDefinitionItem: IViewComponentDefinitionWithParent): void {\n    if (this.isViewDefinitionItem(componentDefinitionItem)) {\n      this.convertViewLayout(componentDefinitionItem.componentDefinition as any);\n    } else if (this.isContainerComponentDefinition(componentDefinitionItem.componentDefinition)) {\n      this.convertComponentLayout(componentDefinitionItem.componentDefinition);\n    }\n  }\n\n  private isViewDefinitionItem(componentDefinition: IViewComponentDefinitionWithParent): boolean {\n    return !componentDefinition.parentComponentDefinition;\n  }\n\n  private convertViewLayout(viewDefinition: IViewDefinition): void {\n    const layout: IOldViewLayout = this.rxJsonParserService.tryParseJson(viewDefinition.layout);\n\n    if (isNil(layout.layoutTemplate) || get(layout, 'columns[0].role')) {\n      // for views from new designer, or for views with 1 or more columns\n      this.convertComponentLayout(viewDefinition);\n    } else {\n      // for views with header and/or footer\n      const childrenWithRoles: IOldViewLayoutColumnChild[] = get(layout, 'columns[0].children', []);\n      const outlets = childrenWithRoles.map((child, i) => {\n        let outletItem: IViewLayoutOutlet;\n\n        if (child.role) {\n          outletItem = {\n            name: child.role === ViewLayoutRole.Content ? RX_VIEW_DEFINITION.defaultOutletName : child.role,\n            static: child.static || null,\n            height: child.height || null,\n            role: child.role || null,\n            columns: (child.columns || []).map(this.convertColumns.bind(this))\n          };\n        } else {\n          // creating outlets for case when components are sibling to header/footer\n          outletItem = {\n            name: `outlet-${i}`,\n            columns: [{ children: [child.componentDefinitionId] }]\n          };\n        }\n\n        return outletItem;\n      });\n\n      const newLayout: IViewLayout = { outlets };\n\n      viewDefinition.layout = JSON.stringify(newLayout);\n    }\n  }\n\n  private convertComponentLayout(componentDefinition: IContainerViewComponentDefinition | IViewDefinition): void {\n    if (componentDefinition.layout) {\n      const layout: IOldViewLayout = this.rxJsonParserService.tryParseJson(componentDefinition.layout);\n\n      // add columns to views created in new designer\n      // todo remove after new designer will save layouts with columns\n      const children = get(layout, 'outlets[0].children');\n\n      if (children) {\n        componentDefinition.layout = JSON.stringify(this.convertNewDesignerLayout(layout));\n      }\n\n      if (layout && layout.componentDefinitionId) {\n        const newLayout = {\n          outlets: [\n            {\n              name: RX_VIEW_DEFINITION.defaultOutletName,\n              columns: layout.columns.map(this.convertColumns.bind(this))\n            }\n          ]\n        };\n\n        componentDefinition.layout = JSON.stringify(newLayout);\n      }\n    }\n  }\n\n  private convertNewDesignerLayout(layout): IViewLayout {\n    const children = get(layout, 'outlets[0].children');\n\n    if (children) {\n      layout.outlets[0].columns = [\n        {\n          children\n        }\n      ];\n\n      delete layout.outlets[0].children;\n    }\n\n    return layout;\n  }\n\n  private convertColumns(column: IOldViewLayoutColumn): IViewLayoutOutletColumn {\n    // rx-tab-container was placed 1 lever deeper in the layout of rx-tab-panel in views\n    // created in AngularJS view designer. 'columns[0].children[0]' should extract it.\n    return {\n      span: column.span || null,\n      cssClass: `col-sm-${column.span || 12}`,\n      children: column.children.map(\n        (child) => get(child, 'columns[0].children[0].componentDefinitionId') || child.componentDefinitionId\n      )\n    };\n  }\n\n  private isContainerComponentDefinition(\n    componentDefinition: AnyViewComponentDefinition\n  ): componentDefinition is IContainerViewComponentDefinition {\n    return (componentDefinition as IContainerViewComponentDefinition).componentDefinitions !== undefined;\n  }\n}\n"]}