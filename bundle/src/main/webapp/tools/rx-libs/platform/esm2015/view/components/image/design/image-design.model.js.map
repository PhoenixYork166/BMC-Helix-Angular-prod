{"version":3,"file":"image-design.model.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/image/design/image-design.model.ts"],"names":[],"mappings":"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","sourcesContent":["import { RxSelectOption } from '@bmc-ux/adapt-angular';\nimport { IRecordDefinition, RX_RECORD_DEFINITION, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { Tooltip } from '@helix/platform/shared/api';\nimport {\n  ExpressionInspectorControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionInspectorControlOptions,\n  ISelectFormControlOptions,\n  IStepperWithUnitsFormControlOptions,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  StepperWithUnitsFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport {\n  getStandardPropsInspectorConfigs,\n  IViewComponentDesignValidationIssue,\n  validateAvailableOnDevicesProp,\n  validateCssClassNames,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { compact, flatten } from 'lodash';\nimport { map, skip, switchMap, take, takeUntil, withLatestFrom } from 'rxjs/operators';\nimport { ImageAlignment, RX_IMAGE_ALIGNMENT_OPTIONS } from '../image.types';\nimport { IImageProperties } from './image-design.types';\nimport {\n  IViewDesignerComponentModel,\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RX_STANDARD_PROPS_DEFAULT_VALUES\n} from '@helix/platform/view/api';\n\nexport class ImageDesignModel\n  extends ViewDesignerComponentModel<IImageProperties>\n  implements IViewDesignerComponentModel<IImageProperties>\n{\n  private recordDefinitionName$ = this.sandbox.getComponentPropertyValue('recordDefinitionName');\n\n  private attachmentFields$ = this.recordDefinitionName$.pipe(\n    switchMap((recordDefinitionName) =>\n      recordDefinitionName ? this.getAttachmentFieldsFromRecordDefinition(recordDefinitionName) : of([])\n    )\n  );\n\n  private rxModalService = this.injector.get(RxModalService);\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n\n  private maxWidthUnits = [\n    {\n      name: 'pixels',\n      id: 'px'\n    },\n    {\n      name: '%',\n      id: '%'\n    }\n  ];\n\n  static getInitialProperties(initialProperties?: IImageProperties): IImageProperties {\n    return {\n      name: null,\n      recordDefinitionName: null,\n      recordInstanceId: null,\n      fieldId: null,\n      maxWidth: null,\n      alignment: ImageAlignment.Left,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n\n      ...initialProperties\n    };\n  }\n\n  rxInit(): void {\n    this.sandbox.componentProperties$.pipe(take(1)).subscribe((componentProperties: IImageProperties) => {\n      this.sandbox.updateInspectorConfig(this.getInspector(componentProperties));\n    });\n\n    this.recordDefinitionName$\n      .pipe(skip(1), withLatestFrom(this.sandbox.componentProperties$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([recordDefinitionName, properties]) => {\n        const newProperties = {\n          ...properties,\n          recordInstanceId: null,\n          fieldId: null\n        };\n\n        this.sandbox.updateComponentProperties(newProperties);\n        this.sandbox.updateInspectorConfig(this.getInspector(newProperties));\n      });\n\n    this.attachmentFields$\n      .pipe(withLatestFrom(this.sandbox.componentProperties$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([attachmentFields, properties]) => {\n        this.sandbox.updateInspectorConfig(this.getInspector(properties, attachmentFields));\n      });\n\n    combineLatest([\n      this.validateEmptyProp('recordDefinitionName', 'Record definition name cannot be blank.'),\n      this.validateEmptyProp('recordInstanceId', 'Record instance ID cannot be blank.'),\n      this.validateEmptyProp('fieldId', 'Field ID cannot be blank.'),\n      this.sandbox.getComponentPropertyValue('maxWidth').pipe(map((value) => this.validateMaxWidth(value))),\n      this.sandbox.getComponentPropertyValue('styles').pipe(map(validateCssClassNames)),\n      this.sandbox\n        .getComponentPropertyValue(RX_AVAILABLE_ON_DEVICES_PROP_NAME)\n        .pipe(map(validateAvailableOnDevicesProp))\n    ])\n      .pipe(map(flatten), map(compact), takeUntil(this.sandbox.destroyed$))\n      .subscribe((validationIssues: IViewComponentDesignValidationIssue[]) =>\n        this.sandbox.setValidationIssues(validationIssues)\n      );\n\n    this.sandbox.getComponentPropertyValue('name').subscribe((name) => {\n      const componentName = name ? `${this.sandbox.descriptor.name} (${name})` : this.sandbox.descriptor.name;\n\n      this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n        {\n          label: 'Hidden',\n          expression: this.getExpressionForProperty('hidden')\n        }\n      ]);\n    });\n  }\n\n  private getAttachmentFieldsFromRecordDefinition(recordDefinitionName: string): Observable<RxSelectOption[]> {\n    return this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName).pipe(\n      map((recordDefinition: IRecordDefinition) =>\n        recordDefinition.fieldDefinitions\n          .filter((definition) => definition.resourceType === RX_RECORD_DEFINITION.dataTypes.attachment.resourceType)\n          .map(({ id, name }) => ({\n            id: id.toString(),\n            name\n          }))\n      )\n    );\n  }\n\n  private getInspector(props: IImageProperties, attachmentFields: RxSelectOption[] = []) {\n    return {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                tooltip: new Tooltip('Enter a name to uniquely identify the Image view component.')\n              }\n            },\n            {\n              name: 'recordDefinitionName',\n              component: RxDefinitionPickerComponent,\n              options: {\n                label: 'Record definition name',\n                definitionType: RxDefinitionPickerType.RegularRecord,\n                beforeValueChange: (oldValue: string, newValue: string): Promise<boolean> => {\n                  if (Boolean(oldValue) && props.recordInstanceId && props.fieldId) {\n                    return this.rxModalService.confirm({\n                      title: 'Warning',\n                      modalStyle: RX_MODAL.modalStyles.warning,\n                      message: 'Record Instance ID and Field ID will be cleared. Do you want to continue?'\n                    });\n                  } else {\n                    return Promise.resolve(true);\n                  }\n                },\n                required: true\n              } as IDefinitionPickerComponentOptions\n            },\n            {\n              name: 'fieldId',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Field name',\n                options: attachmentFields,\n                required: true\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'recordInstanceId',\n              component: ExpressionInspectorControlComponent,\n              options: {\n                label: 'Record ID',\n                isRequired: true\n              } as IExpressionInspectorControlOptions\n            },\n            {\n              name: 'alignment',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Horizontal alignment',\n                options: RX_IMAGE_ALIGNMENT_OPTIONS\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'maxWidth',\n              component: StepperWithUnitsFormControlComponent,\n              options: {\n                label: 'Maximum width',\n                defaultUnit: 'px',\n                units: this.maxWidthUnits,\n                stepperOptionByUnits: {\n                  px: {\n                    minValue: 0\n                  },\n                  '%': {\n                    minValue: 0,\n                    maxValue: 100,\n                    defaultValue: 100\n                  }\n                }\n              } as IStepperWithUnitsFormControlOptions\n            },\n            ...getStandardPropsInspectorConfigs()\n          ]\n        }\n      ]\n    };\n  }\n\n  private validateEmptyProp<K extends keyof IImageProperties>(\n    propertyName: K,\n    description: string\n  ): Observable<IViewComponentDesignValidationIssue> {\n    return this.sandbox\n      .getComponentPropertyValue(propertyName)\n      .pipe(map((value) => (value ? null : this.sandbox.createError(description, propertyName))));\n  }\n\n  private validateMaxWidth(maxWidth: string): IViewComponentDesignValidationIssue {\n    if (maxWidth) {\n      const matches = maxWidth.match(/^([+-]?\\d+(?:\\.\\d+)?)(.*)/);\n\n      if (matches) {\n        const numberValue = Number(matches[1]);\n        const unitValue = matches[2];\n\n        if (unitValue === '%' && numberValue > 100) {\n          return this.sandbox.createError('Maximum width cannot be greater than 100%.');\n        } else if (numberValue < 0) {\n          return this.sandbox.createError('Maximum width should be a positive number.');\n        }\n      }\n    }\n  }\n}\n"]}