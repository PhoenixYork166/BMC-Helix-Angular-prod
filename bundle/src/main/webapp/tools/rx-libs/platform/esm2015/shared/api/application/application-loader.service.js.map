{"version":3,"file":"application-loader.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/application/application-loader.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;;AAK3C,MAAM,OAAO,0BAA0B;IACrC,YAAsC,QAAa;QAAb,aAAQ,GAAR,QAAQ,CAAK;IAAG,CAAC;IAEvD,uBAAuB;QACrB,MAAM,mBAAmB,GAAG,iCAAiC,CAAC;QAC9D,MAAM,wBAAwB,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;QAEnF,IAAI,wBAAwB,EAAE;YAC5B,wBAAwB,CAAC,MAAM,EAAE,CAAC;SACnC;IACH,CAAC;;uHAVU,0BAA0B,kBACjB,QAAQ;2HADjB,0BAA0B,cAFzB,MAAM;2FAEP,0BAA0B;kBAHtC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;0BAEc,MAAM;2BAAC,QAAQ","sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxApplicationLoaderService {\n  constructor(@Inject(DOCUMENT) private document: any) {}\n\n  removeApplicationLoader(): void {\n    const applicationLoaderId = 'rx-application-loader-container';\n    const applicationLoaderElement = this.document.getElementById(applicationLoaderId);\n\n    if (applicationLoaderElement) {\n      applicationLoaderElement.remove();\n    }\n  }\n}\n"]}