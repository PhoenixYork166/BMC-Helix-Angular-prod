{"version":3,"file":"rule-pool-management.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/admin/components/rule-pool-management/rule-pool-management.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { BehaviorSubject, Observable, forkJoin, Subscription } from 'rxjs';\nimport { map, shareReplay, switchMap } from 'rxjs/operators';\nimport { AdaptTreeNode, RxSelectOption } from '@bmc-ux/adapt-angular';\nimport {\n  IBundleDescriptor,\n  RxDefinitionNameService,\n  RxGlobalCacheService,\n  RxOverlayService\n} from '@helix/platform/shared/api';\nimport { RxRuleDefinitionService, IRuleDefinition } from '@helix/platform/rule/api';\nimport { RX_RULE_POOL_MANAGEMENT } from './rule-pool-management.constant';\nimport { RxRulePoolDataService } from './rule-pool-data.service';\nimport { IRuleConflictOccurrences, IRulePoolStatistics, IRuleStatistics } from './rule-pool-management.interfaces';\nimport { find } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRulePoolManagementService {\n  private availablePoolsTreeSubject$ = new BehaviorSubject([]);\n  availablePoolsTree$: Observable<AdaptTreeNode[]> = this.availablePoolsTreeSubject$\n    .asObservable()\n    .pipe(shareReplay(1));\n\n  constructor(\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxOverlayService: RxOverlayService,\n    private rxRuleDefinitionService: RxRuleDefinitionService,\n    private rxRulePoolDataService: RxRulePoolDataService,\n    private translateService: TranslateService\n  ) {}\n\n  fetchAvailablePoolsTree(): Subscription {\n    return forkJoin([\n      this.rxRulePoolDataService.getRulePoolStatistics(),\n      this.rxGlobalCacheService.getBundleDescriptors()\n    ])\n      .pipe(\n        map(([rulePoolStatistics, bundleDescriptors]) => {\n          this.availablePoolsTreeSubject$.next(this.buildTreeNodes(rulePoolStatistics, bundleDescriptors));\n        })\n      )\n      .subscribe();\n  }\n\n  getAvailablePoolOptions(): Observable<RxSelectOption[]> {\n    return this.availablePoolsTree$.pipe(map(this.buildSelectOptions));\n  }\n\n  getRuleConflictsData(adaptTreeNode: AdaptTreeNode): IRuleConflictOccurrences[] {\n    if (!adaptTreeNode) {\n      return [];\n    }\n\n    return adaptTreeNode.data.conflictingRules.delayedByRules.concat(\n      adaptTreeNode.data.conflictingRules.delaysOtherRules.map((ruleConflictOccurrences: IRuleConflictOccurrences) => ({\n        ...ruleConflictOccurrences,\n        noOfTimesDelayed: 0\n      }))\n    );\n  }\n\n  isRuleDesignerAvailable(ruleStatistics: IRuleStatistics): boolean {\n    return !ruleStatistics.remedyEscalation && Boolean(this.rxDefinitionNameService.getBundleId(ruleStatistics.name));\n  }\n\n  reassignRuleToPool(ruleDefinitionName: string, poolNumber: number): Observable<any> {\n    return this.rxRuleDefinitionService.get(ruleDefinitionName).pipe(\n      switchMap((ruleDefinition: IRuleDefinition) => {\n        ruleDefinition.triggerEvent.poolNumber = poolNumber;\n\n        return this.rxRuleDefinitionService.update(ruleDefinition);\n      })\n    );\n  }\n\n  private buildSelectOptions(poolTreeNodes: AdaptTreeNode[]): RxSelectOption[] {\n    return poolTreeNodes.map((pool) => ({\n      id: pool.data.executionPoolNumber,\n      name: pool.label\n    }));\n  }\n\n  private buildTreeNodes(\n    rulePoolStatistics: IRulePoolStatistics[],\n    bundleDescriptors: IBundleDescriptor[]\n  ): AdaptTreeNode[] {\n    return rulePoolStatistics.map((pool: IRulePoolStatistics) => {\n      const children = pool.rules.map((rule: IRuleStatistics) => {\n        rule.isRuleWithIssues = Boolean(\n          rule.conflictingRules.delayedByRules.length ||\n            rule.conflictingRules.delaysOtherRules.length ||\n            rule.designTimePoolNumber > rulePoolStatistics.length\n        );\n\n        let ruleType;\n\n        if (rule.remedyEscalation) {\n          ruleType = rule.isRuleWithIssues\n            ? RX_RULE_POOL_MANAGEMENT.ruleTypes.remedyEscalationWithIssues\n            : RX_RULE_POOL_MANAGEMENT.ruleTypes.remedyEscalationWithoutIssues;\n        } else {\n          ruleType = rule.isRuleWithIssues\n            ? RX_RULE_POOL_MANAGEMENT.ruleTypes.ruleWithIssues\n            : RX_RULE_POOL_MANAGEMENT.ruleTypes.ruleWithoutIssues;\n        }\n\n        rule.isEditable = this.isRuleEditable(rule, bundleDescriptors);\n\n        return {\n          data: rule,\n          key: `${pool.executionPoolNumber}_${rule.guid}`,\n          label: this.rxDefinitionNameService.getDisplayName(rule.name),\n          type: ruleType\n        };\n      });\n\n      const localizedStringKey = pool.isDefaultPool\n        ? 'com.bmc.arsys.rx.client.admin.rule-pool-management.available-pools.default-pool-tree-node.label'\n        : 'com.bmc.arsys.rx.client.admin.rule-pool-management.available-pools.pool-tree-node.label';\n\n      const label = this.translateService.instant(localizedStringKey, {\n        poolNumber: pool.executionPoolNumber,\n        ruleCount: pool.rules.length\n      });\n\n      return {\n        children,\n        data: pool,\n        label: label,\n        selectable: false,\n        type: pool.hasRulesWithIssues\n          ? RX_RULE_POOL_MANAGEMENT.poolTypes.poolWithIssues\n          : RX_RULE_POOL_MANAGEMENT.poolTypes.poolWithoutIssues\n      };\n    });\n  }\n\n  private isRuleEditable(ruleStatistics: IRuleStatistics, bundleDescriptors: IBundleDescriptor[]): boolean {\n    const bundleId = this.rxDefinitionNameService.getBundleId(ruleStatistics.name),\n      bundleDescriptor = find(bundleDescriptors, ['id', bundleId]);\n\n    return !ruleStatistics.remedyEscalation && Boolean(bundleId)\n      ? this.rxOverlayService.areNewDefinitionsAllowedSync(bundleDescriptor)\n      : false;\n  }\n}\n"]}