{"version":3,"file":"valid-application.guard.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/application/valid-application.guard.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAuC,MAAM,EAAgC,MAAM,iBAAiB,CAAC;AAC5G,OAAO,EAAc,EAAE,EAAE,MAAM,MAAM,CAAC;AACtC,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC5D,OAAO,EAAE,oBAAoB,EAAE,MAAM,iCAAiC,CAAC;AACvE,OAAO,EAAE,gBAAgB,EAAE,MAAM,6BAA6B,CAAC;;;;;AAK/D,MAAM,OAAO,uBAAuB;IAGlC,YACU,oBAA0C,EAC1C,MAAc,EACd,gBAAkC;QAFlC,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,WAAM,GAAN,MAAM,CAAQ;QACd,qBAAgB,GAAhB,gBAAgB,CAAkB;QALpC,8BAAyB,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,sBAAsB,CAAC,CAAC;IAM9E,CAAC;IAEJ,WAAW,CAAC,KAA6B,EAAE,KAA0B;QACnE,OAAO,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAClG,CAAC;IAEO,gBAAgB,CAAC,KAA6B;QACpD,MAAM,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QAEhD,IAAI,QAAQ,EAAE;YACZ,OAAO,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,IAAI,CACjE,GAAG,CAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,gBAAgB,CAAC,aAAa,IAAI,IAAI,CAAC,yBAAyB,CAAC,EAC3F,UAAU,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,CACrD,CAAC;SACH;aAAM;YACL,OAAO,EAAE,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;SAC3C;IACH,CAAC;;oHAxBU,uBAAuB;wHAAvB,uBAAuB,cAFtB,MAAM;2FAEP,uBAAuB;kBAHnC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { RxGlobalCacheService } from '../caching/global-cache.service';\nimport { RxSessionService } from '../security/session.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxValidApplicationGuard implements CanActivate {\n  private unknownApplicationUrlTree = this.router.parseUrl('/unknown-application');\n\n  constructor(\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private router: Router,\n    private rxSessionService: RxSessionService\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<UrlTree | boolean> {\n    return this.rxSessionService.sessionActive$.pipe(switchMap(() => this.checkBundleState(route)));\n  }\n\n  private checkBundleState(route: ActivatedRouteSnapshot): Observable<UrlTree | boolean> {\n    const bundleId = route.paramMap.get('bundleId');\n\n    if (bundleId) {\n      return this.rxGlobalCacheService.getBundleDescriptor(bundleId).pipe(\n        map((bundleDescriptor) => bundleDescriptor.isApplication || this.unknownApplicationUrlTree),\n        catchError(() => of(this.unknownApplicationUrlTree))\n      );\n    } else {\n      return of(this.unknownApplicationUrlTree);\n    }\n  }\n}\n"]}