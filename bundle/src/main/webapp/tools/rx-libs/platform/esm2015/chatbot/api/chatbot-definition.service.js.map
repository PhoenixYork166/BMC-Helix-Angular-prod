{"version":3,"file":"chatbot-definition.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/chatbot/api/chatbot-definition.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAEL,oBAAoB,EACpB,uBAAuB,EACvB,6BAA6B,EAC9B,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,QAAQ,EAAc,MAAM,MAAM,CAAC;AAC5C,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AAC7B,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAC;;;AAMlD,MAAM,OAAO,0BAA0B;IACrC,YACU,uBAAgD,EAChD,6BAA4D;QAD5D,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,kCAA6B,GAA7B,6BAA6B,CAA+B;IACnE,CAAC;IAEJ,MAAM,CAAC,iBAA2B;QAChC,OAAO,QAAQ,CACb,GAAG,CAAC,iBAAiB,EAAE,CAAC,EAAE,EAAE,EAAE;YAC5B,OAAO,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;QACnG,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,WAAmB,EAAE,gBAAmC;QAC7D,OAAO,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,WAAW,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAC/F,SAAS,CAAC,CAAC,cAA8B,EAAE,EAAE;YAC3C,cAAc,CAAC,aAAa,CAAC,WAAW,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;YAC3F,cAAc,CAAC,aAAa,CAAC,WAAW,CAAC,eAAe,CAAC,cAAc,CAAC,QAAQ,EAAE,gBAAgB,CAAC,EAAE,CAAC,CAAC;YAEvG,cAAc,CAAC,aAAa,CAC1B,oBAAoB,CAAC,YAAY,CAAC,WAAW,EAC7C,GAAG,gBAAgB,CAAC,YAAY,wBAAwB,CACzD,CAAC;YAEF,OAAO,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QAC7D,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,gBAAwB,EAAE,cAAsB;QACrD,OAAO,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,WAAW,CAAC,eAAe,CAAC,oBAAoB,EAAE,gBAAgB,CAAC,CAAC,IAAI,CAC9G,SAAS,CAAC,CAAC,cAA8B,EAAE,EAAE;YAC3C,cAAc,CAAC,aAAa,CAAC,WAAW,CAAC,eAAe,CAAC,cAAc,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;YAE9F,OAAO,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACpE,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;;uHAtCU,0BAA0B;2HAA1B,0BAA0B,cAFzB,MAAM;2FAEP,0BAA0B;kBAHtC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  RecordInstance,\n  RX_RECORD_DEFINITION,\n  RxRecordInstanceService,\n  RxRecordInstanceUpdateService\n} from '@helix/platform/record/api';\nimport { forkJoin, Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { map } from 'lodash';\nimport { RX_CHATBOTS } from './chatbots.constant';\nimport { IBundleDescriptor } from '@helix/platform/shared/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxChatbotDefinitionService {\n  constructor(\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private rxRecordInstanceUpdateService: RxRecordInstanceUpdateService\n  ) {}\n\n  delete(recordInstanceIds: string[]): Observable<any[]> {\n    return forkJoin(\n      map(recordInstanceIds, (id) => {\n        return this.rxRecordInstanceService.delete(RX_CHATBOTS.chatbotSettings.recordDefinitionName, id);\n      })\n    );\n  }\n\n  create(chatbotName: string, bundleDescriptor: IBundleDescriptor): Observable<any> {\n    return this.rxRecordInstanceService.getNew(RX_CHATBOTS.chatbotSettings.recordDefinitionName).pipe(\n      switchMap((recordInstance: RecordInstance) => {\n        recordInstance.setFieldValue(RX_CHATBOTS.chatbotSettings.recordFieldIds.name, chatbotName);\n        recordInstance.setFieldValue(RX_CHATBOTS.chatbotSettings.recordFieldIds.bundleId, bundleDescriptor.id);\n\n        recordInstance.setFieldValue(\n          RX_RECORD_DEFINITION.coreFieldIds.description,\n          `${bundleDescriptor.friendlyName} Chatbot configuration`\n        );\n\n        return this.rxRecordInstanceService.create(recordInstance);\n      })\n    );\n  }\n\n  rename(recordInstanceId: string, newChatbotName: string): Observable<any> {\n    return this.rxRecordInstanceService.get(RX_CHATBOTS.chatbotSettings.recordDefinitionName, recordInstanceId).pipe(\n      switchMap((recordInstance: RecordInstance) => {\n        recordInstance.setFieldValue(RX_CHATBOTS.chatbotSettings.recordFieldIds.name, newChatbotName);\n\n        return this.rxRecordInstanceUpdateService.execute(recordInstance);\n      })\n    );\n  }\n}\n"]}