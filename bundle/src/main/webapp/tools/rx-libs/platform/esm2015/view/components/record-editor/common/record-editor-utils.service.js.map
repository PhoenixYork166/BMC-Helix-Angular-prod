{"version":3,"file":"record-editor-utils.service.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/record-editor/common/record-editor-utils.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAC;AAChF,OAAO,EAAwD,oBAAoB,EAAE,MAAM,4BAA4B,CAAC;AAExH,OAAO,EAGL,kBAAkB,EACnB,MAAM,0BAA0B,CAAC;;AAGlC,MAAM,OAAO,0BAA0B;IACrC,iCAAiC,CAAC,oBAAkD;QAClF,OAAO,WAAW,CAChB,SAAS,CACP,oBAAoB,EACpB,CAAC,MAAoC,EAAE,mBAA+C,EAAE,EAAE;YACxF,2CAA2C;YAC3C,IAAI,mBAAmB,CAAC,YAAY,KAAK,kBAAkB,CAAC,aAAa,CAAC,sBAAsB,EAAE;gBAChG,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;gBAEjC,kGAAkG;gBAClG,kCAAkC;aACnC;iBAAM,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,oBAAoB,EAAE;gBACrE,MAAM,CAAC,IAAI,CACT,GAAG,IAAI,CAAC,iCAAiC,CACtC,mBAAyD,CAAC,oBAAoB,CAChF,CACF,CAAC;aACH;QACH,CAAC,CACF,CACF,CAAC;IACJ,CAAC;IAED,4BAA4B,CAAC,gBAAmC,EAAE,cAA+B;QAC/F,MAAM,6BAA6B,GAAG,EAAE,CAAC;QAEzC,MAAM,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,EAAE,YAAY,EAAE,oBAAoB,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC,CAAC,OAAO,CAC/G,CAAC,eAAiC,EAAE,EAAE;YACpC,MAAM,gCAAgC,GAAG,GAAG,CAAC,gBAAgB,CAAC,2BAA2B,EAAE,eAAe,CAAC,EAAE,CAAC,CAAC;YAC/G,MAAM,aAAa,GAAG,cAAc,CAAC,cAAc,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;YAExE,IAAI,aAAa,EAAE;gBACjB,IACE,QAAQ,CAAC,eAAe,CAAC,eAAe,CAAC;oBACzC,gCAAgC;oBAChC,OAAO,CAAC,gCAAgC,CAAC,EACzC;oBACA,MAAM,mBAAmB,GAAG,eAAe,CAAC,eAAe,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;oBAEjF,6BAA6B,CAAC,eAAe,CAAC,EAAE,CAAC,GAAG,gCAAgC,CAAC,mBAAmB,CAAC,CAAC;iBAC3G;qBAAM;oBACL,6BAA6B,CAAC,eAAe,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,eAAe,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;iBAC1G;aACF;iBAAM;gBACL,+DAA+D;gBAC/D,+DAA+D;gBAC/D,sEAAsE;gBACtE,6BAA6B,CAAC,eAAe,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;aACxD;QACH,CAAC,CACF,CAAC;QAEF,OAAO,6BAA6B,CAAC;IACvC,CAAC;;uHAtDU,0BAA0B;2HAA1B,0BAA0B;2FAA1B,0BAA0B;kBADtC,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { filter, flattenDeep, get, isEmpty, isObject, transform } from 'lodash';\nimport { IFieldDefinition, IRecordDefinition, IRecordInstance, RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport {\n  AnyViewComponentDefinition,\n  IContainerViewComponentDefinition,\n  RX_VIEW_DEFINITION\n} from '@helix/platform/view/api';\n\n@Injectable()\nexport class RxRecordEditorUtilsService {\n  getComponentDefinitionsAsFlatList(componentDefinitions: AnyViewComponentDefinition[]): AnyViewComponentDefinition[] {\n    return flattenDeep(\n      transform(\n        componentDefinitions,\n        (result: AnyViewComponentDefinition[], componentDefinition: AnyViewComponentDefinition) => {\n          // do not include container view components\n          if (componentDefinition.resourceType !== RX_VIEW_DEFINITION.resourceTypes.containerViewComponent) {\n            result.push(componentDefinition);\n\n            // do not look inside container view components that have their own recordDefinitionName property,\n            // e.g. Association View Component\n          } else if (!componentDefinition.propertiesByName.recordDefinitionName) {\n            result.push(\n              ...this.getComponentDefinitionsAsFlatList(\n                (componentDefinition as IContainerViewComponentDefinition).componentDefinitions\n              )\n            );\n          }\n        }\n      )\n    );\n  }\n\n  getSelectionFieldOptionNames(recordDefinition: IRecordDefinition, recordInstance: IRecordInstance): IPlainObject {\n    const selectionFieldOptionNamesById = {};\n\n    filter(recordDefinition.fieldDefinitions, { resourceType: RX_RECORD_DEFINITION.resourceTypes.selection }).forEach(\n      (fieldDefinition: IFieldDefinition) => {\n        const selectionFieldLocalizableStrings = get(recordDefinition.localizableStringsByFieldId, fieldDefinition.id);\n        const fieldInstance = recordInstance.fieldInstances[fieldDefinition.id];\n\n        if (fieldInstance) {\n          if (\n            isObject(fieldDefinition.optionNamesById) &&\n            selectionFieldLocalizableStrings &&\n            isEmpty(selectionFieldLocalizableStrings)\n          ) {\n            const localizableStringId = fieldDefinition.optionNamesById[fieldInstance.value];\n\n            selectionFieldOptionNamesById[fieldDefinition.id] = selectionFieldLocalizableStrings[localizableStringId];\n          } else {\n            selectionFieldOptionNamesById[fieldDefinition.id] = fieldDefinition.optionNamesById[fieldInstance.value];\n          }\n        } else {\n          // field instance is not available for system selection fields,\n          // e.g. field 16 (Notifier Listening), when the record instance\n          // is retrieved via GET recordinstance/0 API (get new record instance)\n          selectionFieldOptionNamesById[fieldDefinition.id] = '';\n        }\n      }\n    );\n\n    return selectionFieldOptionNamesById;\n  }\n}\n"]}