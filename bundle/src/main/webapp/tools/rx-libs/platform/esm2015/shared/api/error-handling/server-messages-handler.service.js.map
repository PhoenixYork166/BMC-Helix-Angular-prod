{"version":3,"file":"server-messages-handler.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/error-handling/server-messages-handler.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAC1C,OAAO,EAAE,qBAAqB,EAAE,MAAM,sCAAsC,CAAC;AAC7E,OAAO,EAAE,iBAAiB,EAAE,MAAM,2BAA2B,CAAC;AAE9D,OAAO,EAAE,mBAAmB,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;;;;AAK7E,MAAM,OAAO,6BAA6B;IACxC,YACU,qBAA4C,EAC5C,mBAAwC,EACxC,eAAgC;QAFhC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,oBAAe,GAAf,eAAe,CAAiB;IACvC,CAAC;IAEJ,2BAA2B,CAAC,aAAqB;QAC/C,MAAM,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAEnE,MAAM,QAAQ,GAAG,MAAM,CACrB,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,cAAc,EAAE,EAAE,CAAC,EACzD,CAAC,OAA+B,EAAE,EAAE,CAAC,OAAO,CAAC,aAAa,KAAK,iBAAiB,CAAC,aAAa,CAC/F,CAAC;QAEF,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/C,CAAC;IAEO,UAAU,CAAC,OAA+B;QAChD,IAAI,YAAY,GAAG,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;QAE5C,IAAI,OAAO,CAAC,WAAW,KAAK,iBAAiB,CAAC,YAAY,CAAC,OAAO,EAAE;YAClE,YAAY,IAAI,KAAK,OAAO,CAAC,aAAa,GAAG,CAAC;SAC/C;QAED,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,YAAY,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE;YACzG,MAAM,EAAE,iBAAiB,CAAC,kBAAkB;SAC7C,CAAC,CAAC;QAEH,QAAQ,OAAO,CAAC,WAAW,EAAE;YAC3B,KAAK,iBAAiB,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;gBAC3C,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;gBAE1E,MAAM;aACP;YAED,KAAK,iBAAiB,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;gBAC3C,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;gBAE1E,MAAM;aACP;YAED,OAAO,CAAC,CAAC;gBACP,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;gBAEvE,MAAM;aACP;SACF;IACH,CAAC;;0HAhDU,6BAA6B;8HAA7B,6BAA6B,cAF5B,MAAM;2FAEP,6BAA6B;kBAHzC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { reject, truncate } from 'lodash';\nimport { RxNotificationService } from '../notification/notification.service';\nimport { RX_ERROR_HANDLING } from './error-handling.constant';\nimport { IServerResponseMessage } from './error-handling.types';\nimport { RxJsonParserService, RxStringService } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxServerMessageHandlerService {\n  constructor(\n    private rxNotificationService: RxNotificationService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxStringService: RxStringService\n  ) {}\n\n  handleServerResponseMessage(serverMessage: string): void {\n    const decodedMessage = this.rxStringService.decodeQ(serverMessage);\n\n    const messages = reject(\n      this.rxJsonParserService.tryParseJson(decodedMessage, []),\n      (message: IServerResponseMessage) => message.messageNumber === RX_ERROR_HANDLING.arNoteLogInfo\n    );\n\n    messages.forEach(this.addMessage.bind(this));\n  }\n\n  private addMessage(message: IServerResponseMessage): void {\n    let messageTitle = `${message.messageType}`;\n\n    if (message.messageType !== RX_ERROR_HANDLING.messageTypes.success) {\n      messageTitle += ` (${message.messageNumber})`;\n    }\n\n    const messageString = truncate(`${[message.appendedText, message.messageText].filter(Boolean).join(' ')}`, {\n      length: RX_ERROR_HANDLING.maxArMessageLength\n    });\n\n    switch (message.messageType) {\n      case RX_ERROR_HANDLING.messageTypes.warning: {\n        this.rxNotificationService.addWarningMessage(messageString, messageTitle);\n\n        break;\n      }\n\n      case RX_ERROR_HANDLING.messageTypes.success: {\n        this.rxNotificationService.addSuccessMessage(messageString, messageTitle);\n\n        break;\n      }\n\n      default: {\n        this.rxNotificationService.addInfoMessage(messageString, messageTitle);\n\n        break;\n      }\n    }\n  }\n}\n"]}