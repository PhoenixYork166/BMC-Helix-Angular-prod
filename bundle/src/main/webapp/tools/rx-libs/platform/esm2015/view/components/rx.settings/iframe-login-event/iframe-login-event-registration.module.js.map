{"version":3,"file":"iframe-login-event-registration.module.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/rx.settings/iframe-login-event/iframe-login-event-registration.module.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,wBAAwB,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACnE,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAC/C,OAAO,EAAE,cAAc,EAAE,MAAM,4BAA4B,CAAC;AAC5D,OAAO,EAAE,8BAA8B,EAAE,MAAM,0BAA0B,CAAC;AAC1E,OAAO,EAAE,yBAAyB,EAAE,MAAM,gCAAgC,CAAC;;;AAE3E;;;;;;GAMG;AAMH,MAAM,OAAO,kCAAkC;IAC7C,YACU,wBAAkD,EAClD,8BAA8D;QAD9D,6BAAwB,GAAxB,wBAAwB,CAA0B;QAClD,mCAA8B,GAA9B,8BAA8B,CAAgC;QAEtE,8BAA8B,CAAC,QAAQ,CAAC;YACtC,2GAA2G;YAC3G,IAAI,EAAE,8CAA8C;YACpD,gBAAgB,EAAE,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,yBAAyB,CAAC;YAClG,IAAI,EAAE,oBAAoB;YAC1B,kBAAkB,EAAE,CAAC,cAAc,CAAC,gBAAgB,CAAC;YACrD,MAAM,EAAE,IAAI;SACb,CAAC,CAAC;IACL,CAAC;;+HAbU,kCAAkC;gIAAlC,kCAAkC,iBAJ9B,yBAAyB,aAC9B,YAAY;gIAGX,kCAAkC,YAHpC,CAAC,YAAY,CAAC;2FAGZ,kCAAkC;kBAL9C,QAAQ;mBAAC;oBACR,YAAY,EAAE,CAAC,yBAAyB,CAAC;oBACzC,OAAO,EAAE,CAAC,YAAY,CAAC;oBACvB,eAAe,EAAE,CAAC,yBAAyB,CAAC;iBAC7C","sourcesContent":["import { ComponentFactoryResolver, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxViewComponentRegistryService } from '@helix/platform/view/api';\nimport { IframeLoginEventComponent } from './iframe-login-event.component';\n\n/**\n * This component is used by view-loader.js script when the login cannot be achieved\n * in an iFrame (for example with Microsoft IDP).\n * In this case view-loader.js loads a view in a window popup that will require the user\n * to log in. Once the user is logged in, this View Component will send a PostMessage to\n * view-loader.js that will close the popup.\n */\n@NgModule({\n  declarations: [IframeLoginEventComponent],\n  imports: [CommonModule],\n  entryComponents: [IframeLoginEventComponent]\n})\nexport class IframeLoginEventRegistrationModule {\n  constructor(\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService\n  ) {\n    rxViewComponentRegistryService.register({\n      // This is for retro compatibility to reuse the same view \"com.bmc.arsys.rx.settings:BMCLoginVerification\".\n      type: 'com-bmc-arsys-rx-settings-iframe-login-event',\n      componentFactory: this.componentFactoryResolver.resolveComponentFactory(IframeLoginEventComponent),\n      name: 'IFrame Login Event',\n      availableInBundles: [RX_APPLICATION.settingsBundleId],\n      hidden: true\n    });\n  }\n}\n"]}