{"version":3,"file":"record-editor.component.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/record-editor/runtime/record-editor.component.ts","../../../../../../../../libs/platform/view/components/record-editor/runtime/record-editor.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,KAAK,EAAU,MAAM,eAAe,CAAC;AAGjE,OAAO,EAIL,oBAAoB,EACpB,yBAAyB,EACzB,uBAAuB,EACvB,6BAA6B,EAC7B,4BAA4B,EAC7B,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,qBAAqB,EAAE,YAAY,EAAE,qBAAqB,EAAE,MAAM,4BAA4B,CAAC;AACxG,OAAO,EAAE,sBAAsB,EAAE,MAAM,wBAAwB,CAAC;AAChE,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;AACxD,OAAO,EAAE,iBAAiB,EAAE,mBAAmB,EAAE,MAAM,8BAA8B,CAAC;AACtF,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACvD,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAC/F,OAAO,EAAE,aAAa,EAAE,cAAc,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,UAAU,EAAE,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AACrH,OAAO,EACL,UAAU,EACV,oBAAoB,EACpB,MAAM,EACN,QAAQ,EACR,GAAG,EACH,SAAS,EACT,KAAK,EACL,SAAS,EACT,WAAW,EACX,IAAI,EACJ,SAAS,EACT,SAAS,EACT,GAAG,EACJ,MAAM,gBAAgB,CAAC;AACxB,OAAO,EAAE,0BAA0B,EAAE,MAAM,uCAAuC,CAAC;AACnF,OAAO,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,MAAM,+BAA+B,CAAC;AACpF,OAAO,EAAE,2BAA2B,EAAE,MAAM,6BAA6B,CAAC;AAE1E,OAAO,EAAE,gBAAgB,EAAE,yBAAyB,EAAE,MAAM,4BAA4B,CAAC;;;;;;;;;;;;AAezF,MAAM,OAAO,qBAAsB,SAAQ,iBAAiB;IAsD1D,YACU,uBAAgD,EAChD,6BAA4D,EAC5D,gBAAkC,EAClC,qBAA4C,EAC5C,qBAA4C,EAC5C,yBAAoD,EACpD,0BAAsD,EACtD,4BAA0D,EAC1D,eAAgC,EAChC,YAA0B,EAC1B,sBAA8C,EACtD,gBAAkC,EACW,kCAAuC;QAEpF,KAAK,EAAE,CAAC;QAdA,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,kCAA6B,GAA7B,6BAA6B,CAA+B;QAC5D,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,+BAA0B,GAA1B,0BAA0B,CAA4B;QACtD,iCAA4B,GAA5B,4BAA4B,CAA8B;QAC1D,oBAAe,GAAf,eAAe,CAAiB;QAChC,iBAAY,GAAZ,YAAY,CAAc;QAC1B,2BAAsB,GAAtB,sBAAsB,CAAwB;QAET,uCAAkC,GAAlC,kCAAkC,CAAK;QA5DtF,QAAG,GAAqB;YACtB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;YAChC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;YAChC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;YAChC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;YAChC,oBAAoB,EAAE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC;YAC1D,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;YAC1B,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;YACxC,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC;YAC5C,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC;YAC5C,qBAAqB,EAAE,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC;YAC5D,eAAe,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC;YAChD,kBAAkB,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC;YACtD,wBAAwB,EAAE,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC;YAClE,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC;YACpD,oBAAoB,EAAE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC;YAC1D,mBAAmB,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC;YACxD,oBAAoB,EAAE,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC;YAC1D,WAAW,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC;SACzC,CAAC;QAEF,UAAK,GAAuB;YAC1B,gBAAgB,EAAE,EAAE;YACpB,oBAAoB,EAAE,EAAE;YACxB,cAAc,EAAE,IAAI;YACpB,gBAAgB,EAAE,IAAI;YACtB,aAAa,EAAE,KAAK;YACpB,OAAO,EAAE,KAAK;YACd,QAAQ,EAAE,KAAK;YACf,OAAO,EAAE,KAAK;YACd,IAAI,EAAE,IAAI;YACV,wBAAwB,EAAE,KAAK;YAC/B,YAAY,EAAE,IAAI;YAClB,YAAY,EAAE,iBAAiB,CAAC,IAAI;YACpC,IAAI,EAAE,IAAI;YACV,6BAA6B,EAAE,EAAE;YACjC,SAAS,EAAE,IAAI;SAChB,CAAC;QAEM,iCAA4B,GAAG,IAAI,OAAO,EAAQ,CAAC;QACnD,yBAAoB,GAAG,EAAE,CAAC;QAElC,wBAAmB,GAA6B,EAAE,CAAC;QACnD,yBAAoB,GAA0C,EAAE,CAAC;QAEjE,2BAAsB,GAAqB,IAAI,CAAC,4BAA4B,CAAC,YAAY,EAAE,CAAC;QAmB1F,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,gBAAgB,CAAC;QAEnC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,oBAAoB,EAAE,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE;YACpG,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IACL,CAAC;IAED,QAAQ;QACN,KAAK,CAAC,QAAQ,EAAE,CAAC;QAEjB,IAAI,CAAC,qBAAqB,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;QAC5C,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAC1D,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAE1D,MAAM,OAAO,GAAoC,IAAI,CAAC,MAAM,CAAC,IAAI,CAC/D,oBAAoB,CAAC,OAAO,CAAC,EAC7B,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CACnD,CAAC;QAEF,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,EAAE;YACzC,IAAI,MAAM,CAAC,IAAI,KAAK,gBAAgB,CAAC,MAAM,EAAE;gBAC3C,IAAI,CAAC,qBAAqB,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;aAClD;iBAAM,IAAI,MAAM,CAAC,IAAI,KAAK,gBAAgB,CAAC,SAAS,EAAE;gBACrD,IAAI,CAAC,qBAAqB,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;gBACjD,IAAI,CAAC,qBAAqB,EAAE,CAAC;aAC9B;iBAAM,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE;gBAClC,IAAI,CAAC,KAAK,CAAC,wBAAwB,GAAG,IAAI,CAAC;aAC5C;QACH,CAAC,CAAC,CAAC;QAEH,KAAK,CACH,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAC1E,OAAO,CAAC,IAAI,CACV,SAAS,CAAC,CAAC,MAAM,EAAE,EAAE,CACnB,QAAQ,CAAC,CAAC,gBAAgB,CAAC,MAAM,EAAE,gBAAgB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,SAAS,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,CACxG,EACD,IAAI,CAAC,CAAC,CAAC,CACR,CACF;aACE,IAAI,CACH,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,gBAAgB,IAAI,IAAI,CAAC,EAChD,oBAAoB,EAAE,EACtB,SAAS,CAAC,GAAG,EAAE,CACb,IAAI,CAAC,wBAAwB,EAAE,CAAC,IAAI,CAClC,UAAU,CAAC,CAAC,KAAK,EAAE,EAAE;YACnB,IAAI,IAAI,CAAC,4BAA4B,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE;gBACjE,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC;aACnD;YAED,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC,CAAC,CACH,CACF,EACD,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAC3B;aACA,SAAS,EAAE,CAAC;QAEf,OAAO;aACJ,IAAI,CACH,SAAS,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,gBAAgB,CAAC,IAAI,CAAC,EAC5D,KAAK,CAAC,WAAW,CAAC,EAClB,oBAAoB,EAAE,EACtB,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAC3B;aACA,SAAS,CAAC,CAAC,SAAS,EAAE,EAAE;YACvB,MAAM,KAAK,GAAG,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC;YAErG,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,kBAAkB,CAAC,OAAe;QAChC,IAAI,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE;YACzD,IAAI,CAAC,uBAAuB,CAAC,kBAAkB,CAC7C,IAAI,CAAC,KAAK,CAAC,oBAAoB,EAC/B,OAAO,EACP,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAC3B,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,KAAK,CACxD,CAAC;SACH;IACH,CAAC;IAED,wBAAwB,CAAC,OAAe;QACtC,IAAI,qBAAqB,GAAG,EAAE,CAAC;QAE/B,IAAI,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE;YACzD,qBAAqB,GAAG,IAAI,CAAC,uBAAuB,CAAC,wBAAwB,CAC3E,IAAI,CAAC,KAAK,CAAC,oBAAoB,EAC/B,OAAO,EACP,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAC5B,CAAC;SACH;QAED,OAAO,qBAAqB,CAAC;IAC/B,CAAC;IAED,qBAAqB,CAAC,OAAkC;QACtD,uBAAuB;QACvB,IAAI;QACJ,8BAA8B;QAC9B,0BAA0B;QAC1B,yBAAyB;QACzB,IAAI;QACJ,+CAA+C;QAC/C,2EAA2E;QAC3E,0DAA0D;QAE1D,MAAM,iBAAiB,GAAG,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEhE,MAAM,qBAAqB,GAAG,OAAO,CAAC;YACpC,OAAO,CAAC,yBAAyB;YACjC,iBAAiB;YACjB,OAAO,CAAC,wBAAwB;SACjC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEb,IAAI,kBAAkB,GAAG,IAAI,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,CAAC;QAEzE,IAAI,CAAC,kBAAkB,EAAE;YACvB,OAAO,CAAC,oBAAoB,GAAG,IAAI,CAAC,uBAAuB,CACzD,OAAO,CAAC,yBAAyB,EACjC,OAAO,CAAC,wBAAwB,EAChC,iBAAiB,CAClB,CAAC;YAEF,kBAAkB,GAAG,IAAI,CAAC,kCAAkC,CAAC,OAAO,CAAC,CAAC;YAEtE,KAAK,CAAC,kBAAkB,CAAC,QAAQ,EAAE,kBAAkB,CAAC,SAAS,CAAC;iBAC7D,IAAI,CACH,MAAM,CAAC,GAAG,EAAE,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,IAAI,kBAAkB,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,EAChG,IAAI,CAAC,CAAC,CAAC,CACR;iBACA,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;YAEvC,kBAAkB,CAAC,WAAW;iBAC3B,IAAI;YACH,uEAAuE;YACvE,8DAA8D;YAC9D,MAAM,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,EAC5C,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAC3B;iBACA,SAAS,CAAC,GAAG,EAAE;gBACd,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;gBAC9D,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAC1E,CAAC,CAAC,CAAC;YAEL,IAAI,CAAC,mBAAmB,CAAC,qBAAqB,CAAC,GAAG,kBAAkB,CAAC;SACtE;aAAM;YACL,kBAAkB,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;SAC3C;QAED,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAED,WAAW;QACT,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;QAChC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QAC9B,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC/B,CAAC;IAED,OAAO;QACL,IAAI,IAAI,CAAC,YAAY,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,KAAK,iBAAiB,CAAC,IAAI,EAAE;YAC7E,OAAO,IAAI,CAAC,wBAAwB,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SAC1G;aAAM;YACL,OAAO,KAAK,CAAC;SACd;IACH,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;IAClE,CAAC;IAED,OAAO;QACL,OAAO,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAC5C,CAAC;IAED,oBAAoB,CAAC,WAAmB,EAAE,OAAgB;QACxD,IAAI,OAAO,EAAE;YACX,OAAO,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAAC;SAC/C;aAAM;YACL,IAAI,CAAC,oBAAoB,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;SAC/C;IACH,CAAC;IAED,WAAW,CAAC,YAAoB,EAAE,aAAkB;QAClD,MAAM,oBAAoB,GAAG,YAAY,CAAC,KAAK,CAAC,gDAAgD,CAAC,CAAC;QAElG,MAAM,uBAAuB,GAC3B,CAAC,YAAY,KAAK,WAAW,IAAI,aAAa,CAAC,IAAI,CAAC,YAAY,KAAK,WAAW,IAAI,CAAC,aAAa,CAAC,CAAC;QAEtG,MAAM,uBAAuB,GAC3B,CAAC,YAAY,KAAK,WAAW,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,KAAK,WAAW,IAAI,aAAa,CAAC,CAAC;QAEtG,IAAI,uBAAuB,EAAE;YAC3B,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,KAAK,iBAAiB,CAAC,IAAI,EAAE;gBACtD,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;aACtB;SACF;aAAM,IAAI,uBAAuB,EAAE;YAClC,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,KAAK,iBAAiB,CAAC,IAAI,EAAE;gBACtD,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAC1B;SACF;aAAM,IAAI,oBAAoB,EAAE;YAC/B,MAAM,OAAO,GAAG,MAAM,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC;YAEhD,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;SAC5C;aAAM;YACL,OAAO,UAAU,CAAC,2BAA2B,YAAY,mBAAmB,CAAC,CAAC;SAC/E;IACH,CAAC;IAED,aAAa,CACX,OAAe,EACf,KAAU,EACV,oBAA+B,EAC/B,UAA8D,EAAE;QAEhE,IACE,IAAI,CAAC,KAAK,CAAC,cAAc;YACzB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,iBAAiB,CAAC,oBAAoB,CAAC;YACjE,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,mBAAmB,CAAC,OAAO,EAAE,KAAK,EAAE,oBAAoB,CAAC,EACnF;YACA,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,EAAE,oBAAoB,CAAC,CAAC;YAE9E,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,qBAAqB,CACnC,MAAM,CAAC,OAAO,CAAC,EACf,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,aAAa,CAAC,OAAO,EAAE,oBAAoB,CAAC,EACtE,oBAAoB,IAAI,oBAAoB,CAAC,IAAI,CAAC,yBAAyB,CAAC,EAC5E,OAAO,CACR,CAAC;YAEF,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YAChE,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;YACxE,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC7B,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAC9B;IACH,CAAC;IAED,aAAa,CAAC,OAAe,EAAE,oBAA+B;QAC5D,OAAO,IAAI,CAAC,KAAK,CAAC,cAAc,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,aAAa,CAAC,OAAO,EAAE,oBAAoB,CAAC,CAAC;IAC7G,CAAC;IAED,IAAI,CAAC,qBAA8B,KAAK;QACtC,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;YAC5B,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,+DAA+D,CAAC,CAAC;YACzF,OAAO,KAAK,CAAC;SACd;aAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE;YAC1B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,4BAA4B,EAAE,CAAC;YAE/C,IAAI,CAAC,qBAAqB,CAAC,eAAe,CACxC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,gFAAgF,CAAC,CAChH,CAAC;YAEF,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC;SACzB;aAAM,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YACzB,IAAI,iBAAoC,CAAC;YAEzC,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;YAC3B,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAE7B,IAAI,IAAI,CAAC,cAAc,EAAE,EAAE;gBACzB,iBAAiB,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,IAAI,CACrF,GAAG,CAAC,CAAC,cAAc,EAAE,EAAE;oBACrB,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAC1C,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,2DAA2D,CAAC,CAC3F,CAAC;oBAEF,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE;wBAChC,GAAG,CACD,IAAI,CAAC,KAAK,CAAC,cAAc,EACzB,kBAAkB,oBAAoB,CAAC,YAAY,CAAC,EAAE,SAAS,EAC/D,cAAc,CAAC,EAAE,CAClB,CAAC;wBAEF,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE,GAAG,cAAc,CAAC,EAAE,CAAC;wBACjD,IAAI,CAAC,KAAK,CAAC,gBAAgB,GAAG,cAAc,CAAC,EAAE,CAAC;qBACjD;oBAED,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;oBACxE,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;oBAE5E,IAAI,CAAC,kBAAkB,EAAE;wBACvB,IAAI,CAAC,qBAAqB,CAAC,qBAAqB;6BAC7C,IAAI,CACH,IAAI,CAAC,CAAC,CAAC,EACP,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,wBAAwB,EAAE,CAAC,EAChD,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAC3B;6BACA,SAAS,EAAE,CAAC;qBAChB;gBACH,CAAC,CAAC,EACF,WAAW,CAAC,KAAK,CAAC,CACnB,CAAC;aACH;iBAAM,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;gBAC9B,iBAAiB,GAAG,IAAI,CAAC,6BAA6B,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,IAAI,CAC5F,GAAG,CAAC,GAAG,EAAE;oBACP,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAC1C,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,2DAA2D,CAAC,CAC3F,CAAC;gBACJ,CAAC,CAAC,EACF,SAAS,CAAC,GAAG,EAAE;oBACb,OAAO,IAAI,CAAC,wBAAwB,EAAE,CAAC,IAAI,CACzC,UAAU,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC,EAC3D,GAAG,CAAC;wBACF,QAAQ,EAAE,GAAG,EAAE;4BACb,IAAI,IAAI,CAAC,KAAK,CAAC,wBAAwB,EAAE;gCACvC,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;6BACnD;wBACH,CAAC;qBACF,CAAC,CACH,CAAC;gBACJ,CAAC,CAAC,CACH,CAAC;aACH;YAED,OAAO,iBAAiB,CAAC,IAAI,CAC3B,GAAG,CAAC;gBACF,QAAQ,EAAE,GAAG,EAAE;oBACb,8CAA8C;oBAC9C,0EAA0E;oBAC1E,4EAA4E;oBAC5E,6EAA6E;oBAC7E,qDAAqD;oBACrD,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;gBACnC,CAAC;aACF,CAAC,EACF,QAAQ,CAAC,GAAG,EAAE;gBACZ,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC;gBAC5B,IAAI,CAAC,qBAAqB,EAAE,CAAC;gBAC7B,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC/B,CAAC,CAAC,CACH,CAAC;SACH;aAAM;YACL,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,wDAAwD,CAAC,CAAC;YAElF,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC;SACzB;IACH,CAAC;IAED,eAAe,CACb,OAAe,EACf,IAAY,EACZ,YAAyC,EAAE,EAC3C,oBAA+B;QAE/B,MAAM,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,oBAAoB,CAAC,CAAC;QAEpG,IAAI,eAAe,EAAE;YACnB,OAAO,eAAe,CAAC;SACxB;QAED,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc;YAC5C,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,aAAa,CAAC,OAAO,EAAE,oBAAoB,CAAC;YACxE,CAAC,CAAC,IAAI,CAAC;QACT,MAAM,uBAAuB,GAAG,IAAI,CAAC,gCAAgC,CAAC,OAAO,EAAE,oBAAoB,CAAC,CAAC;QAErG,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QAC/D,SAAS,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;QAExC,IAAI,WAAW,CAAC;QAEhB,IAAI,oBAAoB,EAAE;YACxB,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,yBAAyB,CACrD,MAAM,CAAC,OAAO,CAAC,EACf,IAAI,EACJ,oBAAoB,EACpB,YAAY,EACZ,SAAS,CACV,CAAC;SACH;aAAM;YACL,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,CAAC,CAAC;SAC/F;QAED,WAAW,CAAC,YAAY;aACrB,IAAI,CACH,oBAAoB,CAAC,IAAI,CAAC,4BAA4B,CAAC,iBAAiB,CAAC;QACzE,mHAAmH;QACnH,2FAA2F;QAC3F,4GAA4G;QAC5G,wBAAwB;QACxB,qGAAqG;QACrG,mCAAmC;QACnC,qGAAqG;QACrG,SAAS,CAAC,cAAc,CAAC,EACzB,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAC3B;aACA,SAAS,CAAC,GAAG,EAAE;YACd,+EAA+E;YAC/E,2EAA2E;YAC3E,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,EAAE,oBAAoB,EAAE;gBACnE,WAAW,EAAE,WAAW,CAAC,KAAK;gBAC9B,aAAa,EAAE,KAAK;aACrB,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEL,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,iBAAiB,CAAC,OAAe,EAAE,oBAA+B;QAChE,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc;YAC7C,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,gBAAgB,CAAC,OAAO,EAAE,oBAAoB,CAAC;YAC3E,CAAC,CAAC,IAAI,CAAC;QAET,IAAI,aAAa,EAAE;YACjB,OAAO,GAAG,CAAC,aAAa,EAAE,gBAAgB,CAAC,IAAI,oBAAoB,CAAC,oBAAoB,CAAC,MAAM,CAAC;SACjG;aAAM;YACL,OAAO,IAAI,CAAC;SACb;IACH,CAAC;IAED,oBAAoB,CAAC,OAAe,EAAE,IAAY,EAAE,oBAA+B;QACjF,OAAO,IAAI,CAAC,KAAK,CAAC,cAAc,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,EAAE,oBAAoB,CAAC,CAAC;IAClH,CAAC;IAED,mBAAmB;QACjB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IACzB,CAAC;IAED,oBAAoB,CAAC,OAAe,EAAE,IAAY,EAAE,KAAU,EAAE,oBAA+B;QAC7F,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;YAC7B,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,oBAAoB,CAAC,CAAC;SACpF;IACH,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;IAC/B,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IACpD,CAAC;IAED,oBAAoB;QAClB,OAAO,CACL,IAAI,CAAC,KAAK,CAAC,wBAAwB;YACnC,IAAI,CAAC,KAAK,CAAC,YAAY,KAAK,iBAAiB,CAAC,IAAI;YAClD,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC;YACpC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAC9B,CAAC;IACJ,CAAC;IAED,qBAAqB;QACnB,OAAO,IAAI,CAAC,KAAK,CAAC,wBAAwB,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,KAAK,iBAAiB,CAAC,IAAI,CAAC;IACnG,CAAC;IAED,oBAAoB;QAClB,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC;IACzB,CAAC;IAED,uBAAuB;QACrB,OAAO,CACL,IAAI,CAAC,KAAK,CAAC,wBAAwB,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,KAAK,iBAAiB,CAAC,IAAI,IAAI,IAAI,CAAC,YAAY,EAAE,CACjH,CAAC;IACJ,CAAC;IAEO,MAAM;QACZ,IAAI,IAAI,CAAC,KAAK,CAAC,wBAAwB,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;YACpE,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;gBAClB,OAAO,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,qBAAqB,EAAE,CAAC,CAAC,CAAC,IAAI,CAChF,SAAS,CAAC,CAAC,WAAW,EAAE,EAAE;oBACxB,IAAI,WAAW,EAAE;wBACf,IAAI,CAAC,mBAAmB,EAAE,CAAC;wBAC3B,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;wBAElD,OAAO,KAAK,CAAC;qBACd;yBAAM;wBACL,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC;qBACzB;gBACH,CAAC,CAAC,CACH,CAAC;aACH;iBAAM;gBACL,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;aACnD;SACF;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IAC7G,CAAC;IAED,aAAa;QACX,OAAO,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACzG,CAAC;IAED,WAAW;QACT,IAAI,CAAC,IAAI,EAAE;aACR,IAAI,CACH,IAAI,CAAC,CAAC,CAAC,EACP,UAAU,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CACxE;aACA,SAAS,EAAE,CAAC;IACjB,CAAC;IAED,aAAa;QACX,IAAI,CAAC,MAAM,EAAE,CAAC,SAAS,EAAE,CAAC;IAC5B,CAAC;IAEO,wBAAwB;QAC9B,IAAI,WAAW,GAAG,KAAK,CAAC;QAExB,IAAI,IAAI,CAAC,aAAa,EAAE,EAAE;YACxB,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC;YAEhC,WAAW,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC,IAAI,CACzC,GAAG,CAAC,CAAC,cAAc,EAAE,EAAE;gBACrB,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;gBACvC,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;gBAC1D,IAAI,CAAC,+BAA+B,CAAC,cAAc,CAAC,CAAC;YACvD,CAAC,CAAC,EACF,WAAW,CAAC,KAAK,CAAC,EAClB,UAAU,CAAC,CAAC,KAAK,EAAE,EAAE;gBACnB,8DAA8D;gBAC9D,aAAa,CAAC,QAAQ,CAAC,GAAG,EAAE;oBAC1B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;oBAC7B,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;gBACjC,CAAC,CAAC,CAAC;gBAEH,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;YAC3B,CAAC,CAAC,EACF,QAAQ,CAAC,GAAG,EAAE;gBACZ,IAAI,CAAC,KAAK,CAAC,aAAa,GAAG,KAAK,CAAC;YACnC,CAAC,CAAC,CACH,CAAC;SACH;aAAM;YACL,IAAI,IAAI,CAAC,KAAK,CAAC,gBAAgB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,EAAE;gBAC7E,IAAI,CAAC,qBAAqB,CAAC,eAAe,CACxC,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAC3B,0FAA0F,CAC3F,CACF,CAAC;aACH;YAED,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;gBAC7B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;gBAC7B,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;aAChC;SACF;QAED,OAAO,WAAW,CAAC;IACrB,CAAC;IAEO,wBAAwB,CAAC,KAAK;QACpC,MAAM,oBAAoB,GAAG,IAAI,CAAC,4BAA4B,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAE3F,IAAI,oBAAoB,EAAE;YACxB,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAC1C,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAC3B,mFAAmF,CACpF,CACF,CAAC;YAEF,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,CAAC;SACnD;QAED,OAAO,UAAU,CAAC,oBAAoB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IACzD,CAAC;IAEO,qBAAqB;QAC3B,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAE/B,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,KAAK,OAAO,EAAE;YAClC,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;YAC7B,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;SAChD;IACH,CAAC;IAEO,qBAAqB;QAC3B,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;QAE/B,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,KAAK,OAAO,EAAE;YAClC,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;YAC7B,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;SAChD;IACH,CAAC;IAEO,iBAAiB,CAAC,cAA8B;QACtD,OAAO,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;QAElE,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;QAC/B,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAE9B,IAAI,cAAc,IAAI,CAAC,cAAc,CAAC,oBAAoB,EAAE;YAC1D,cAAc,CAAC,oBAAoB,GAAG,EAAE,CAAC;YAEzC,IAAI,CAAC,oBAAoB,GAAG,cAAc,CAAC,oBAAoB,CAAC;SACjE;QAED,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,cAAc,CAAC;QAC3C,IAAI,CAAC,KAAK,CAAC,gBAAgB,GAAG,cAAc,IAAI,cAAc,CAAC,EAAE,CAAC;QAElE,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,0BAA0B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;QAErF,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QACxE,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QAE5E,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAE7B,IAAI,cAAc,EAAE;YAClB,IAAI,CAAC,4BAA4B,CAAC,IAAI,EAAE,CAAC;SAC1C;IACH,CAAC;IAEO,gCAAgC,CAAC,OAAe,EAAE,oBAA+B;QACvF,OAAO,CAAC,OAAgC,EAAE,EAAE,CAC1C,IAAI,CAAC,KAAK,CAAC,cAAc;YACzB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,KAAK,EAAE,oBAAoB,CAAC,CAAC;IAChG,CAAC;IAEO,mBAAmB,CAAC,gBAAmC;QAC7D,IAAI,gBAAgB,EAAE;YACpB,IAAI,IAAI,CAAC,gBAAgB,EAAE,EAAE;gBAC3B,gBAAgB,GAAG,IAAI,CAAC,yBAAyB,CAAC,6BAA6B,CAAC,gBAAgB,CAAC,CAAC;aACnG;YAED,gBAAgB,CAAC,oBAAoB;gBACnC,IAAI,CAAC,yBAAyB,CAAC,4BAA4B,CAAC,gBAAgB,CAAC,CAAC;SACjF;QAED,IAAI,CAAC,KAAK,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QAE/C,IAAI,CAAC,qBAAqB,CAAC,kBAAkB,EAAE,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;IAC9E,CAAC;IAEO,iBAAiB;QACvB,IAAI,IAAI,CAAC,cAAc,EAAE,IAAI,IAAI,CAAC,iBAAiB,EAAE,EAAE;YACrD,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;gBAC7B,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,yBAAyB,EAAE,CAAC;gBAElF,OAAO,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;aACtC;iBAAM;gBACL,OAAO,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;aAC7E;SACF;aAAM,IAAI,IAAI,CAAC,gBAAgB,EAAE,EAAE;YAClC,OAAO,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC;SAC/E;aAAM,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;YAC9B,OAAO,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,oBAAoB,EAAE,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;SACvG;IACH,CAAC;IAEO,uBAAuB,CAC7B,yBAAiC,EACjC,QAAgB,EAChB,cAAsB;QAEtB,MAAM,sBAAsB,GAAW,OAAO,CAAC,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAErF,IAAI,kBAAkB,GAAwB,GAAG,CAAC,IAAI,CAAC,oBAAoB,EAAE;YAC3E,yBAAyB;YACzB,sBAAsB;SACvB,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,EAAE;YACvB,kBAAkB,GAAG;gBACnB,QAAQ,EAAE,EAAE;gBACZ,OAAO,EAAE,EAAE;gBACX,OAAO,EAAE,EAAE;gBACX,UAAU,EAAE,EAAE;aACf,CAAC;YAEF,GAAG,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,yBAAyB,EAAE,sBAAsB,CAAC,EAAE,kBAAkB,CAAC,CAAC;SACzG;QAED,OAAO,kBAAkB,CAAC;IAC5B,CAAC;IAEO,oBAAoB,CAAC,KAAwB;QACnD,IAAI,CAAC,KAAK,CAAC,YAAY,GAAG,KAAK,CAAC;QAChC,IAAI,CAAC,qBAAqB,CAAC,aAAa,EAAE,KAAK,KAAK,iBAAiB,CAAC,IAAI,CAAC,CAAC;IAC9E,CAAC;IAEO,cAAc;QACpB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,gBAAgB,CAAC,MAAM,CAAC;IACrD,CAAC;IAEO,gBAAgB;QACtB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,gBAAgB,CAAC,QAAQ,CAAC;IACvD,CAAC;IAEO,YAAY;QAClB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,gBAAgB,CAAC,IAAI,CAAC;IACnD,CAAC;IAEO,iBAAiB;QACvB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,gBAAgB,CAAC,SAAS,CAAC;IACxD,CAAC;IAEO,eAAe,CAAC,OAAe;QACrC,OAAO,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;IACzE,CAAC;IAEO,+BAA+B,CAAC,cAA8B;QACpE,IAAI,cAAc,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAAE,kBAAkB,CAAC,EAAE;YAC1E,MAAM,4BAA4B,GAAG,IAAI,CAAC,0BAA0B,CAAC,4BAA4B,CAC/F,IAAI,CAAC,KAAK,CAAC,gBAAgB,EAC3B,cAAc,CACf,CAAC;YAEF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,6BAA6B,EAAE,4BAA4B,CAAC,EAAE;gBACpF,IAAI,CAAC,qBAAqB,CAAC,+BAA+B,EAAE,4BAA4B,CAAC,CAAC;aAC3F;SACF;IACH,CAAC;IAEO,0BAA0B,CAAC,oBAA+B;QAChE,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;QAEnE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACtB,MAAM,kBAAkB,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;gBAC7D,MAAM,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,oBAAoB,CAAC,CAAC;gBAEjG,OAAO,MAAM,CAAC;YAChB,CAAC,EAAE,EAAE,CAAC,CAAC;YAEP,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,kBAAkB,EAAE,oBAAoB,CAAC,CAAC;SAC9E;IACH,CAAC;IAEO,mBAAmB;QACzB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,oBAAoB,EAAE,CAAC;QAEjD,OAAO,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC;QAElE,IAAI,CAAC,0BAA0B,EAAE,CAAC;QAClC,IAAI,CAAC,qBAAqB,CAAC,gBAAgB,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QAExE,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,IAAI,CAAC,qBAAqB,EAAE,CAAC;IAC/B,CAAC;;kHAhyBU,qBAAqB,gdAmEtB,2BAA2B;sGAnE1B,qBAAqB,qHAFrB,CAAC,gBAAgB,CAAC,iDCpD/B,s/CAkDA;2FDIa,qBAAqB;kBANjC,SAAS;mBAAC;oBACT,QAAQ,EAAE,kBAAkB;oBAC5B,WAAW,EAAE,gCAAgC;oBAC7C,SAAS,EAAE,CAAC,8BAA8B,CAAC;oBAC3C,SAAS,EAAE,CAAC,gBAAgB,CAAC;iBAC9B;;0BAoEI,MAAM;2BAAC,2BAA2B;4CAjErC,MAAM;sBADL,KAAK;gBAIN,mBAAmB;sBADlB,KAAK","sourcesContent":["import { Component, Inject, Input, OnInit } from '@angular/core';\nimport { ValidatorFn } from '@angular/forms';\nimport { IAssociationRecords } from '@helix/platform/association/api';\nimport {\n  IRecordDefinition,\n  IRxRecordInstanceAssociationInstances,\n  RecordInstance,\n  RX_RECORD_DEFINITION,\n  RxRecordDefinitionService,\n  RxRecordInstanceService,\n  RxRecordInstanceUpdateService,\n  RxRecordInstanceUtilsService\n} from '@helix/platform/record/api';\nimport { RxGlobalEventsService, RxLogService, RxNotificationService } from '@helix/platform/shared/api';\nimport { RxUtilityModalsService } from '@helix/platform/ui-kit';\nimport { RxStringService } from '@helix/platform/utils';\nimport { BaseViewComponent, RuntimeViewModelApi } from '@helix/platform/view/runtime';\nimport { TranslateService } from '@ngx-translate/core';\nimport { compact, forEach, get, includes, isEmpty, isEqual, isNil, set, values } from 'lodash';\nimport { asapScheduler, asyncScheduler, defer, EMPTY, from, merge, Observable, of, Subject, throwError } from 'rxjs';\nimport {\n  catchError,\n  distinctUntilChanged,\n  filter,\n  finalize,\n  map,\n  observeOn,\n  pluck,\n  switchMap,\n  switchMapTo,\n  take,\n  takeUntil,\n  takeWhile,\n  tap\n} from 'rxjs/operators';\nimport { RxRecordEditorUtilsService } from '../common/record-editor-utils.service';\nimport { RecordEditorMode, RecordEditorState } from '../common/record-editor.types';\nimport { RxAssociationManagerService } from './association-manager.class';\nimport { RecordEditorFormControl } from './record-editor-form-control.class';\nimport { RecordEditorForm, RecordEditorFormDelimiter } from './record-editor-form.class';\nimport {\n  IAssociationManagerConfig,\n  IRecordEditorApi,\n  IRecordEditorConfig,\n  IRecordEditorState,\n  IRxAssociationManagerMap\n} from './record-editor.types';\n\n@Component({\n  selector: 'rx-record-editor',\n  templateUrl: './record-editor.component.html',\n  styleUrls: ['record-editor.component.scss'],\n  providers: [RecordEditorForm]\n})\nexport class RecordEditorComponent extends BaseViewComponent implements OnInit, IRecordEditorApi {\n  @Input()\n  config: Observable<IRecordEditorConfig>;\n\n  @Input()\n  runtimeViewModelApi: RuntimeViewModelApi;\n\n  api: IRecordEditorApi = {\n    refresh: this.refresh.bind(this),\n    isDirty: this.isDirty.bind(this),\n    isReady: this.isReady.bind(this),\n    isValid: this.isValid.bind(this),\n    notifyComponentReady: this.notifyComponentReady.bind(this),\n    save: this.save.bind(this),\n    setProperty: this.setProperty.bind(this),\n    setFieldValue: this.setFieldValue.bind(this),\n    getFieldValue: this.getFieldValue.bind(this),\n    getAssociationManager: this.getAssociationManager.bind(this),\n    getFieldControl: this.getFieldControl.bind(this),\n    downloadAttachment: this.downloadAttachment.bind(this),\n    getAttachmentDownloadUrl: this.getAttachmentDownloadUrl.bind(this),\n    getPermissionType: this.getPermissionType.bind(this),\n    getFieldInstanceProp: this.getFieldInstanceProp.bind(this),\n    getRecordEditorMode: this.getRecordEditorMode.bind(this),\n    setFieldInstanceProp: this.setFieldInstanceProp.bind(this),\n    markAsDirty: this.markAsDirty.bind(this)\n  };\n\n  state: IRecordEditorState = {\n    recordInstanceId: '',\n    recordDefinitionName: '',\n    recordInstance: null,\n    recordDefinition: null,\n    isDataLoading: false,\n    isDirty: false,\n    isSaving: false,\n    canSave: false,\n    mode: null,\n    isReadOnlyStateAvailable: false,\n    defaultState: null,\n    currentState: RecordEditorState.Edit,\n    form: null,\n    selectionFieldOptionNamesById: {},\n    allowEdit: null\n  };\n\n  private recordInstanceChangedSubject = new Subject<void>();\n  private notReadyComponentIds = {};\n\n  associationManagers: IRxAssociationManagerMap = {};\n  associationInstances: IRxRecordInstanceAssociationInstances = {};\n\n  recordInstanceChanged$: Observable<void> = this.recordInstanceChangedSubject.asObservable();\n\n  constructor(\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private rxRecordInstanceUpdateService: RxRecordInstanceUpdateService,\n    private translateService: TranslateService,\n    private rxGlobalEventsService: RxGlobalEventsService,\n    private rxNotificationService: RxNotificationService,\n    private rxRecordDefinitionService: RxRecordDefinitionService,\n    private rxRecordEditorUtilsService: RxRecordEditorUtilsService,\n    private rxRecordInstanceUtilsService: RxRecordInstanceUtilsService,\n    private rxStringService: RxStringService,\n    private rxLogService: RxLogService,\n    private rxUtilityModalsService: RxUtilityModalsService,\n    recordEditorForm: RecordEditorForm,\n    @Inject(RxAssociationManagerService) private rxAssociationManagerServiceFactory: any\n  ) {\n    super();\n\n    this.state.form = recordEditorForm;\n\n    this.state.form.statusChanges.pipe(distinctUntilChanged(), takeUntil(this.destroyed$)).subscribe(() => {\n      this.notifyPropertyChanged('isValid', this.isValid());\n    });\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.notifyPropertyChanged('api', this.api);\n    this.notifyPropertyChanged('isDirty', this.state.isDirty);\n    this.notifyPropertyChanged('canSave', this.state.canSave);\n\n    const config$: Observable<IRecordEditorConfig> = this.config.pipe(\n      distinctUntilChanged(isEqual),\n      tap((config) => Object.assign(this.state, config))\n    );\n\n    config$.pipe(take(1)).subscribe((config) => {\n      if (config.mode === RecordEditorMode.Create) {\n        this.notifyPropertyChanged('inReadState', false);\n      } else if (config.mode === RecordEditorMode.Temporary) {\n        this.notifyPropertyChanged('inReadState', false);\n        this.updateCanSaveProperty();\n      } else if (this.state.defaultState) {\n        this.state.isReadOnlyStateAvailable = true;\n      }\n    });\n\n    merge(\n      config$.pipe(takeWhile((config) => config.mode === RecordEditorMode.Edit)),\n      config$.pipe(\n        takeWhile((config) =>\n          includes([RecordEditorMode.Create, RecordEditorMode.BulkEdit, RecordEditorMode.Temporary], config.mode)\n        ),\n        take(1)\n      )\n    )\n      .pipe(\n        map((config) => config.recordInstanceId || null),\n        distinctUntilChanged(),\n        switchMap(() =>\n          this.initializeRecordInstance().pipe(\n            catchError((error) => {\n              if (this.rxRecordInstanceUtilsService.isNoRecordFoundError(error)) {\n                this.runtimeViewModelApi.cancel(true).subscribe();\n              }\n\n              return throwError(error);\n            })\n          )\n        ),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe();\n\n    config$\n      .pipe(\n        takeWhile((config) => config.mode === RecordEditorMode.Edit),\n        pluck('allowEdit'),\n        distinctUntilChanged(),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((allowEdit) => {\n        const state = allowEdit ? this.state.defaultState || RecordEditorState.Edit : RecordEditorState.Read;\n\n        this.setRecordEditorState(state);\n      });\n  }\n\n  downloadAttachment(fieldId: number): void {\n    if (this.isInEditMode() && !this.isNewAttachment(fieldId)) {\n      this.rxRecordInstanceService.downloadAttachment(\n        this.state.recordDefinitionName,\n        fieldId,\n        this.state.recordInstanceId,\n        this.state.recordInstance.fieldInstances[fieldId].value\n      );\n    }\n  }\n\n  getAttachmentDownloadUrl(fieldId: number): string {\n    let attachmentDownloadUrl = '';\n\n    if (this.isInEditMode() && !this.isNewAttachment(fieldId)) {\n      attachmentDownloadUrl = this.rxRecordInstanceService.getAttachmentDownloadUrl(\n        this.state.recordDefinitionName,\n        fieldId,\n        this.state.recordInstanceId\n      );\n    }\n\n    return attachmentDownloadUrl;\n  }\n\n  getAssociationManager(options: IAssociationManagerConfig): RxAssociationManagerService {\n    // Custom roles config:\n    // {\n    //   useDefaultRoles: 'false',\n    //   nodeARole: 'CustomA',\n    //   nodeBRole: 'CustomB'\n    // }\n    // will be converted to 'false_CustomA_CustomB'\n    // Default roles config (node roles are null) will be converted to 'true__'\n    // Empty roles config will be converted to an empty string\n\n    const rolesConfigValues = values(options.rolesConfig).join('_');\n\n    const associationManagerKey = compact([\n      options.associationDefinitionName,\n      rolesConfigValues,\n      options.associatedRecordNodeSide\n    ]).join(':');\n\n    let associationManager = this.associationManagers[associationManagerKey];\n\n    if (!associationManager) {\n      options.associationInstances = this.getAssociationInstances(\n        options.associationDefinitionName,\n        options.associatedRecordNodeSide,\n        rolesConfigValues\n      );\n\n      associationManager = this.rxAssociationManagerServiceFactory(options);\n\n      merge(associationManager.pending$, associationManager.existing$)\n        .pipe(\n          filter(() => associationManager.deleted.length !== 0 || associationManager.pending.length !== 0),\n          take(1)\n        )\n        .subscribe(() => this.markAsDirty());\n\n      associationManager.extensions$\n        .pipe(\n          // Extensions will be an empty array on first emit as initial value and\n          // when no extension containers are used in the record editor.\n          filter((extensions) => !isEmpty(extensions)),\n          takeUntil(this.destroyed$)\n        )\n        .subscribe(() => {\n          this.syncRecordInstanceWithForm(options.associatedRecordPath);\n          this.notifyPropertyChanged('recordInstance', this.state.recordInstance);\n        });\n\n      this.associationManagers[associationManagerKey] = associationManager;\n    } else {\n      associationManager.extendOptions(options);\n    }\n\n    return associationManager;\n  }\n\n  markAsDirty(): void {\n    this.state.form.markAsTouched();\n    this.state.form.markAsDirty();\n    this.updateIsDirtyProperty();\n    this.updateCanSaveProperty();\n  }\n\n  refresh(): Observable<never> {\n    if (this.isInEditMode() && this.state.currentState === RecordEditorState.Read) {\n      return this.initializeRecordInstance().pipe(catchError((error) => this.handleNoRecordFoundError(error)));\n    } else {\n      return EMPTY;\n    }\n  }\n\n  isDirty(): boolean {\n    return this.isInTemporaryMode() ? false : this.state.form.dirty;\n  }\n\n  isReady(): boolean {\n    return isEmpty(this.notReadyComponentIds);\n  }\n\n  notifyComponentReady(componentId: string, isReady: boolean): void {\n    if (isReady) {\n      delete this.notReadyComponentIds[componentId];\n    } else {\n      this.notReadyComponentIds[componentId] = true;\n    }\n  }\n\n  setProperty(propertyPath: string, propertyValue: any): void | Observable<never> {\n    const matchFieldInstanceId = propertyPath.match(/^recordInstance\\.fieldInstances\\.(\\d+)\\.value$/);\n\n    const shouldSwitchToReadState =\n      (propertyPath === 'readState' && propertyValue) || (propertyPath === 'editState' && !propertyValue);\n\n    const shouldSwitchToEditState =\n      (propertyPath === 'readState' && !propertyValue) || (propertyPath === 'editState' && propertyValue);\n\n    if (shouldSwitchToReadState) {\n      if (this.state.currentState !== RecordEditorState.Read) {\n        return this.cancel();\n      }\n    } else if (shouldSwitchToEditState) {\n      if (this.state.currentState !== RecordEditorState.Edit) {\n        this.switchToEditState();\n      }\n    } else if (matchFieldInstanceId) {\n      const fieldId = Number(matchFieldInstanceId[1]);\n\n      this.setFieldValue(fieldId, propertyValue);\n    } else {\n      return throwError(`Record editor: property ${propertyPath} is not settable.`);\n    }\n  }\n\n  setFieldValue(\n    fieldId: number,\n    value: any,\n    associatedRecordPath?: string[],\n    options: { markAsDirty?: boolean; markAsTouched?: boolean } = {}\n  ): void {\n    if (\n      this.state.recordInstance &&\n      this.state.recordInstance.getRecordInstance(associatedRecordPath) &&\n      this.state.recordInstance.isFieldValueChanged(fieldId, value, associatedRecordPath)\n    ) {\n      this.state.recordInstance.setFieldValue(fieldId, value, associatedRecordPath);\n\n      this.state.form.syncFormControlValues(\n        String(fieldId),\n        this.state.recordInstance.getFieldValue(fieldId, associatedRecordPath),\n        associatedRecordPath && associatedRecordPath.join(RecordEditorFormDelimiter),\n        options\n      );\n\n      this.updateSelectionFieldOptionNames(this.state.recordInstance);\n      this.notifyPropertyChanged('recordInstance', this.state.recordInstance);\n      this.updateIsDirtyProperty();\n      this.updateCanSaveProperty();\n    }\n  }\n\n  getFieldValue(fieldId: number, associatedRecordPath?: string[]): void {\n    return this.state.recordInstance && this.state.recordInstance.getFieldValue(fieldId, associatedRecordPath);\n  }\n\n  save(closeViewAfterSave: boolean = false): Observable<never> {\n    if (this.isInTemporaryMode()) {\n      this.rxLogService.debug('Record Editor: skip saving record instance in Temporary mode.');\n      return EMPTY;\n    } else if (!this.isValid()) {\n      this.state.form.markInvalidControlsAsTouched();\n\n      this.rxNotificationService.addErrorMessage(\n        this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-editor.validation-error.message')\n      );\n\n      return throwError(null);\n    } else if (this.canSave()) {\n      let savingObservable$: Observable<never>;\n\n      this.state.isSaving = true;\n      this.updateCanSaveProperty();\n\n      if (this.isInCreateMode()) {\n        savingObservable$ = this.rxRecordInstanceService.create(this.state.recordInstance).pipe(\n          tap((recordInstance) => {\n            this.rxNotificationService.addSuccessMessage(\n              this.translateService.instant('com.bmc.arsys.rx.client.common.saved-successfully.message')\n            );\n\n            if (!this.state.recordInstanceId) {\n              set(\n                this.state.recordInstance,\n                `fieldInstances[${RX_RECORD_DEFINITION.coreFieldIds.id}].value`,\n                recordInstance.id\n              );\n\n              this.state.recordInstance.id = recordInstance.id;\n              this.state.recordInstanceId = recordInstance.id;\n            }\n\n            this.notifyPropertyChanged('recordInstance', this.state.recordInstance);\n            this.notifyPropertyChanged('recordInstanceId', this.state.recordInstanceId);\n\n            if (!closeViewAfterSave) {\n              this.rxGlobalEventsService.viewActionsCompleted$\n                .pipe(\n                  take(1),\n                  switchMap(() => this.initializeRecordInstance()),\n                  takeUntil(this.destroyed$)\n                )\n                .subscribe();\n            }\n          }),\n          switchMapTo(EMPTY)\n        );\n      } else if (this.isInEditMode()) {\n        savingObservable$ = this.rxRecordInstanceUpdateService.execute(this.state.recordInstance).pipe(\n          tap(() => {\n            this.rxNotificationService.addSuccessMessage(\n              this.translateService.instant('com.bmc.arsys.rx.client.common.saved-successfully.message')\n            );\n          }),\n          switchMap(() => {\n            return this.initializeRecordInstance().pipe(\n              catchError((error) => this.handleNoRecordFoundError(error)),\n              tap({\n                complete: () => {\n                  if (this.state.isReadOnlyStateAvailable) {\n                    this.setRecordEditorState(RecordEditorState.Read);\n                  }\n                }\n              })\n            );\n          })\n        );\n      }\n\n      return savingObservable$.pipe(\n        tap({\n          complete: () => {\n            // Mark record editor form as pristine due to:\n            // - prevent showing dirty state confirmation dialog when any action after\n            // the save will close current view e.g open view in the same window action.\n            // - we don't have to wait until all extension containers data will be loaded\n            // to reset record editor form while synchronization.\n            this.state.form.markAsPristine();\n          }\n        }),\n        finalize(() => {\n          this.state.isSaving = false;\n          this.updateCanSaveProperty();\n          this.updateIsDirtyProperty();\n        })\n      );\n    } else {\n      this.rxLogService.debug('Record Editor: cannot save unmodified record instance.');\n\n      return throwError(null);\n    }\n  }\n\n  getFieldControl(\n    fieldId: number,\n    guid: string,\n    validator: ValidatorFn | ValidatorFn[] = [],\n    associatedRecordPath?: string[]\n  ): RecordEditorFormControl {\n    const existingControl = this.state.form.getFormControl(String(fieldId), guid, associatedRecordPath);\n\n    if (existingControl) {\n      return existingControl;\n    }\n\n    const initialValue = this.state.recordInstance\n      ? this.state.recordInstance.getFieldValue(fieldId, associatedRecordPath)\n      : null;\n    const recordInstanceValidator = this.getFieldInstanceControlValidator(fieldId, associatedRecordPath);\n\n    validator = Array.isArray(validator) ? validator : [validator];\n    validator.push(recordInstanceValidator);\n\n    let formControl;\n\n    if (associatedRecordPath) {\n      formControl = this.state.form.addAssociatedFieldControl(\n        String(fieldId),\n        guid,\n        associatedRecordPath,\n        initialValue,\n        validator\n      );\n    } else {\n      formControl = this.state.form.addFieldControl(String(fieldId), guid, initialValue, validator);\n    }\n\n    formControl.valueChanges\n      .pipe(\n        distinctUntilChanged(this.rxRecordInstanceUtilsService.isFieldValueEqual),\n        // Use asyncScheduler to allow all observers to be notified about the original (non-normalized) field value change,\n        // before the value gets normalized by `this.setFieldValue` call in the subscription below.\n        // This resolves an issue where the subscriptions were executed with the normalized value first, followed by\n        // non-normalized value.\n        // In the example below, the actual form control value is already normalized but valueChange observer\n        // receives a non-normalized value.\n        // formControl.valueChange.subscribe(nonNormalizedValue => formControl.value !== nonNormalizedValue);\n        observeOn(asyncScheduler),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(() => {\n        // Use formControl.value instead of the emitted value that comes asynchronously\n        // and may be different than the actual value, e.g. when user types quickly\n        this.setFieldValue(fieldId, formControl.value, associatedRecordPath, {\n          markAsDirty: formControl.dirty,\n          markAsTouched: false\n        });\n      });\n\n    return formControl;\n  }\n\n  getPermissionType(fieldId: number, associatedRecordPath?: string[]): string {\n    const fieldInstance = this.state.recordInstance\n      ? this.state.recordInstance.getFieldInstance(fieldId, associatedRecordPath)\n      : null;\n\n    if (fieldInstance) {\n      return get(fieldInstance, 'permissionType') || RX_RECORD_DEFINITION.fieldPermissionTypes.change;\n    } else {\n      return null;\n    }\n  }\n\n  getFieldInstanceProp(fieldId: number, prop: string, associatedRecordPath?: string[]): any {\n    return this.state.recordInstance && this.state.recordInstance.getFieldProp(fieldId, prop, associatedRecordPath);\n  }\n\n  getRecordEditorMode(): RecordEditorMode {\n    return this.state.mode;\n  }\n\n  setFieldInstanceProp(fieldId: number, prop: string, value: any, associatedRecordPath?: string[]): void {\n    if (this.state.recordInstance) {\n      this.state.recordInstance.setFieldProp(fieldId, prop, value, associatedRecordPath);\n    }\n  }\n\n  isValid(): boolean {\n    return this.state.form.valid;\n  }\n\n  switchToEditState(): void {\n    this.setRecordEditorState(RecordEditorState.Edit);\n  }\n\n  isEditStateAvailable(): boolean {\n    return (\n      this.state.isReadOnlyStateAvailable &&\n      this.state.currentState === RecordEditorState.Read &&\n      Boolean(this.state.recordInstanceId) &&\n      Boolean(this.state.allowEdit)\n    );\n  }\n\n  isSaveButtonAvailable(): boolean {\n    return this.state.isReadOnlyStateAvailable && this.state.currentState === RecordEditorState.Edit;\n  }\n\n  isSaveButtonDisabled(): boolean {\n    return !this.canSave();\n  }\n\n  isCancelButtonAvailable(): boolean {\n    return (\n      this.state.isReadOnlyStateAvailable && this.state.currentState === RecordEditorState.Edit && this.isInEditMode()\n    );\n  }\n\n  private cancel(): Observable<never> {\n    if (this.state.isReadOnlyStateAvailable && this.state.recordInstance) {\n      if (this.isDirty()) {\n        return defer(() => from(this.rxUtilityModalsService.confirmUnsavedChanges())).pipe(\n          switchMap((isConfirmed) => {\n            if (isConfirmed) {\n              this.restoreRecordEditor();\n              this.setRecordEditorState(RecordEditorState.Read);\n\n              return EMPTY;\n            } else {\n              return throwError(null);\n            }\n          })\n        );\n      } else {\n        this.setRecordEditorState(RecordEditorState.Read);\n      }\n    }\n\n    return EMPTY;\n  }\n\n  canSave(): boolean {\n    return this.isInTemporaryMode() ? true : !this.state.isSaving && (this.isInCreateMode() || this.isDirty());\n  }\n\n  isConfigValid(): boolean {\n    return this.isInEditMode() ? this.rxStringService.isNonEmptyString(this.state.recordInstanceId) : true;\n  }\n\n  onSaveClick(): void {\n    this.save()\n      .pipe(\n        take(1),\n        catchError((error) => (error === null ? of(error) : throwError(error)))\n      )\n      .subscribe();\n  }\n\n  onCancelClick(): void {\n    this.cancel().subscribe();\n  }\n\n  private initializeRecordInstance(): Observable<never> {\n    let initialize$ = EMPTY;\n\n    if (this.isConfigValid()) {\n      this.state.isDataLoading = true;\n\n      initialize$ = this.getRecordInstance().pipe(\n        tap((recordInstance) => {\n          this.setRecordInstance(recordInstance);\n          this.setRecordDefinition(recordInstance.recordDefinition);\n          this.updateSelectionFieldOptionNames(recordInstance);\n        }),\n        switchMapTo(EMPTY),\n        catchError((error) => {\n          // delay record instance id update to allow throwing an error.\n          asapScheduler.schedule(() => {\n            this.setRecordInstance(null);\n            this.setRecordDefinition(null);\n          });\n\n          return throwError(error);\n        }),\n        finalize(() => {\n          this.state.isDataLoading = false;\n        })\n      );\n    } else {\n      if (this.state.recordInstanceId !== '' && !isNil(this.state.recordInstanceId)) {\n        this.rxNotificationService.addErrorMessage(\n          this.translateService.instant(\n            'com.bmc.arsys.rx.client.view-components.record-editor.invalid-record-instance-id.message'\n          )\n        );\n      }\n\n      if (this.state.recordInstance) {\n        this.setRecordInstance(null);\n        this.setRecordDefinition(null);\n      }\n    }\n\n    return initialize$;\n  }\n\n  private handleNoRecordFoundError(error) {\n    const isNoRecordFoundError = this.rxRecordInstanceUtilsService.isNoRecordFoundError(error);\n\n    if (isNoRecordFoundError) {\n      this.rxNotificationService.addWarningMessage(\n        this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.record-editor.no-access-to-record.message'\n        )\n      );\n\n      this.runtimeViewModelApi.cancel(true).subscribe();\n    }\n\n    return throwError(isNoRecordFoundError ? null : error);\n  }\n\n  private updateIsDirtyProperty(): void {\n    const isDirty = this.isDirty();\n\n    if (this.state.isDirty !== isDirty) {\n      this.state.isDirty = isDirty;\n      this.notifyPropertyChanged('isDirty', isDirty);\n    }\n  }\n\n  private updateCanSaveProperty(): void {\n    const canSave = this.canSave();\n\n    if (this.state.canSave !== canSave) {\n      this.state.canSave = canSave;\n      this.notifyPropertyChanged('canSave', canSave);\n    }\n  }\n\n  private setRecordInstance(recordInstance: RecordInstance): void {\n    forEach(this.associationManagers, (manager) => manager.destroy());\n\n    this.associationInstances = {};\n    this.associationManagers = {};\n\n    if (recordInstance && !recordInstance.associationInstances) {\n      recordInstance.associationInstances = {};\n\n      this.associationInstances = recordInstance.associationInstances;\n    }\n\n    this.state.recordInstance = recordInstance;\n    this.state.recordInstanceId = recordInstance && recordInstance.id;\n\n    recordInstance ? this.syncRecordInstanceWithForm() : this.state.form.clearAndReset();\n\n    this.notifyPropertyChanged('recordInstance', this.state.recordInstance);\n    this.notifyPropertyChanged('recordInstanceId', this.state.recordInstanceId);\n\n    this.updateIsDirtyProperty();\n    this.updateCanSaveProperty();\n\n    if (recordInstance) {\n      this.recordInstanceChangedSubject.next();\n    }\n  }\n\n  private getFieldInstanceControlValidator(fieldId: number, associatedRecordPath?: string[]): ValidatorFn {\n    return (control: RecordEditorFormControl) =>\n      this.state.recordInstance &&\n      this.state.recordInstance.validateSingleField(fieldId, control.value, associatedRecordPath);\n  }\n\n  private setRecordDefinition(recordDefinition: IRecordDefinition): void {\n    if (recordDefinition) {\n      if (this.isInBulkEditMode()) {\n        recordDefinition = this.rxRecordDefinitionService.setFieldDefinitionsToOptional(recordDefinition);\n      }\n\n      recordDefinition.fieldDefinitionsById =\n        this.rxRecordDefinitionService.buildFieldDefinitionsByIdMap(recordDefinition);\n    }\n\n    this.state.recordDefinition = recordDefinition;\n\n    this.notifyPropertyChanged('recordDefinition', this.state.recordDefinition);\n  }\n\n  private getRecordInstance(): Observable<RecordInstance> {\n    if (this.isInCreateMode() || this.isInTemporaryMode()) {\n      if (this.state.recordInstance) {\n        this.state.recordInstance = this.state.recordInstance.getOriginalRecordInstance();\n\n        return of(this.state.recordInstance);\n      } else {\n        return this.rxRecordInstanceService.getNew(this.state.recordDefinitionName);\n      }\n    } else if (this.isInBulkEditMode()) {\n      return this.rxRecordInstanceService.getEmpty(this.state.recordDefinitionName);\n    } else if (this.isInEditMode()) {\n      return this.rxRecordInstanceService.get(this.state.recordDefinitionName, this.state.recordInstanceId);\n    }\n  }\n\n  private getAssociationInstances(\n    associationDefinitionName: string,\n    nodeSide: string,\n    rolesConfigKey: string\n  ): IAssociationRecords {\n    const nodeSideRolesConfigKey: string = compact([nodeSide, rolesConfigKey]).join(':');\n\n    let associationRecords: IAssociationRecords = get(this.associationInstances, [\n      associationDefinitionName,\n      nodeSideRolesConfigKey\n    ]);\n\n    if (!associationRecords) {\n      associationRecords = {\n        existing: [],\n        pending: [],\n        deleted: [],\n        extensions: []\n      };\n\n      set(this.associationInstances, [associationDefinitionName, nodeSideRolesConfigKey], associationRecords);\n    }\n\n    return associationRecords;\n  }\n\n  private setRecordEditorState(state: RecordEditorState): void {\n    this.state.currentState = state;\n    this.notifyPropertyChanged('inReadState', state === RecordEditorState.Read);\n  }\n\n  private isInCreateMode(): boolean {\n    return this.state.mode === RecordEditorMode.Create;\n  }\n\n  private isInBulkEditMode(): boolean {\n    return this.state.mode === RecordEditorMode.BulkEdit;\n  }\n\n  private isInEditMode(): boolean {\n    return this.state.mode === RecordEditorMode.Edit;\n  }\n\n  private isInTemporaryMode(): boolean {\n    return this.state.mode === RecordEditorMode.Temporary;\n  }\n\n  private isNewAttachment(fieldId: number): boolean {\n    return Boolean(this.state.recordInstance.fieldInstances[fieldId].file);\n  }\n\n  private updateSelectionFieldOptionNames(recordInstance: RecordInstance): void {\n    if (recordInstance && get(this.state.recordDefinition, 'fieldDefinitions')) {\n      const newSelectionFieldOptionNames = this.rxRecordEditorUtilsService.getSelectionFieldOptionNames(\n        this.state.recordDefinition,\n        recordInstance\n      );\n\n      if (!isEqual(this.state.selectionFieldOptionNamesById, newSelectionFieldOptionNames)) {\n        this.notifyPropertyChanged('selectionFieldOptionNamesById', newSelectionFieldOptionNames);\n      }\n    }\n  }\n\n  private syncRecordInstanceWithForm(associatedRecordPath?: string[]): void {\n    const fieldIds = this.state.form.getFieldIds(associatedRecordPath);\n\n    if (!isEmpty(fieldIds)) {\n      const formStateByFieldId = fieldIds.reduce((result, fieldId) => {\n        result[fieldId] = this.state.recordInstance.getFieldValue(Number(fieldId), associatedRecordPath);\n\n        return result;\n      }, {});\n\n      this.state.form.resetFieldControls(formStateByFieldId, associatedRecordPath);\n    }\n  }\n\n  private restoreRecordEditor(): void {\n    this.state.recordInstance.revertFieldInstances();\n\n    forEach(this.associationManagers, (manager) => manager.restore());\n\n    this.syncRecordInstanceWithForm();\n    this.notifyPropertyChanged('recordInstance', this.state.recordInstance);\n\n    this.updateIsDirtyProperty();\n    this.updateCanSaveProperty();\n  }\n}\n","<div class=\"loader-container\" *ngIf=\"state.isDataLoading && !state.recordInstance\">\n  <div class=\"loader-inline mr-1\"></div>\n  <span>{{ 'com.bmc.arsys.rx.client.common.loading-data' | translate }}</span>\n</div>\n\n<div *ngIf=\"!state.isDataLoading && (!isConfigValid() || !state.recordInstance)\">\n  {{ 'com.bmc.arsys.rx.client.view-components.record-editor.invalid-record.message' | translate }}\n</div>\n\n<div *ngIf=\"state.recordInstance && isConfigValid()\" class=\"clearfix\">\n  <div class=\"d-flex justify-content-end\">\n    <button\n      *ngIf=\"isEditStateAvailable()\"\n      class=\"py-0 mb-1\"\n      adapt-button\n      size=\"small\"\n      btn-type=\"tertiary\"\n      (click)=\"switchToEditState()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.edit.label' | translate }}\n    </button>\n  </div>\n\n  <rx-runtime-view-canvas-outlet></rx-runtime-view-canvas-outlet>\n\n  <button\n    *ngIf=\"isSaveButtonAvailable()\"\n    class=\"mr-1 mt-3\"\n    rx-id=\"save-button\"\n    adapt-button\n    btn-type=\"primary\"\n    size=\"small\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    (click)=\"onSaveClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button\n    *ngIf=\"isCancelButtonAvailable()\"\n    class=\"mt-3\"\n    rx-id=\"cancel-button\"\n    adapt-button\n    btn-type=\"secondary\"\n    size=\"small\"\n    (click)=\"onCancelClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n"]}