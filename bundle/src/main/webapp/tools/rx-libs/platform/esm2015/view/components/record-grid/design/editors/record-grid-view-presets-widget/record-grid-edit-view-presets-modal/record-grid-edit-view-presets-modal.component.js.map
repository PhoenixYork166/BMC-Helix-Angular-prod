{"version":3,"file":"record-grid-edit-view-presets-modal.component.js","sourceRoot":"","sources":["../../../../../../../../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-edit-view-presets-modal/record-grid-edit-view-presets-modal.component.ts","../../../../../../../../../../../libs/platform/view/components/record-grid/design/editors/record-grid-view-presets-widget/record-grid-edit-view-presets-modal/record-grid-edit-view-presets-modal.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Injector, OnInit } from '@angular/core';\nimport { cloneDeep, isObject, noop, pick, sortBy } from 'lodash';\nimport { ActiveModalRef, DismissReasons } from '@bmc-ux/adapt-angular';\nimport { RxModalClass, RxModalService } from '@helix/platform/ui-kit';\nimport { OpenViewActionModalSize } from '@helix/platform/view/api';\nimport { RecordGridViewPresetColumnsModalComponent } from '../record-grid-view-preset-columns-modal/record-grid-view-preset-columns-modal.component';\nimport {\n  IRecordGridEditViewPresetsModalData,\n  IRecordGridEditViewPresetsModalOptions,\n  IRecordGridEditViewPresetsModalResult,\n  IRecordGridEditViewPresetsModalTags\n} from './record-grid-edit-view-presets-modal.types';\nimport { IRecordGridViewPresetColumnData } from '../record-grid-view-presets-widget.types';\nimport {\n  IRecordGridViewPresetColumnsModalOptions,\n  IRecordGridViewPresetColumnsModalResult\n} from '../record-grid-view-preset-columns-modal/record-grid-view-preset-columns-modal.types';\nimport { IRecordGridSortEditorModel } from '../../record-grid-sort-editor-control';\nimport { IRecordGridDesignInspectorColumnConfig } from '../../record-grid-column-editor-control/record-grid-column-editor.types';\nimport { RX_RECORD_GRID } from '../../../../record-grid.constant';\nimport { RxRecordGridDesignUtilsService } from '../../../record-grid-design-utils.service';\nimport {\n  IRecordGridNamedFilterOptionsMap,\n  IRecordGridSortableObject\n} from '../../../../common/types/record-grid.types';\nimport { RxRecordGridFilterSelectHelperService } from '../../record-grid-filter-select-control/record-grid-filter-select-helper.service';\nimport { forkJoin, of } from 'rxjs';\nimport { defaultIfEmpty, map, take } from 'rxjs/operators';\nimport { RxRecordGridUtilsService } from '../../../../common/services/record-grid-utils.service';\nimport { RxStringService } from '@helix/platform/utils';\n\n@Component({\n  selector: 'rx-record-grid-edit-view-presets-modal',\n  templateUrl: './record-grid-edit-view-presets-modal.component.html',\n  styleUrls: ['./record-grid-edit-view-presets-modal.component.scss']\n})\nexport class RecordGridEditViewPresetsModalComponent extends RxModalClass implements OnInit {\n  params: IRecordGridEditViewPresetsModalOptions = this.activeModalRef.getData();\n  presets: IRecordGridEditViewPresetsModalData[] = [];\n  isReadOnly = this.params.isReadOnly;\n  private namedFilterOptions: IRecordGridNamedFilterOptionsMap;\n\n  private gridColumns$ =\n    this.params.gridColumns && this.params.recordDefinition\n      ? forkJoin(\n          this.params.gridColumns.map((gridColumn) => {\n            if (this.rxStringService.isEmptySafe(gridColumn.title)) {\n              return this.rxRecordGridUtilsService\n                .getFieldDefinition(gridColumn.fieldId, this.params.recordDefinition)\n                .pipe(map((fieldDefinition) => ({ ...gridColumn, fallbackTitle: `[${fieldDefinition.name}]` })));\n            }\n\n            return of({ ...gridColumn, fallbackTitle: `[${gridColumn.title}]` });\n          })\n        ).pipe(defaultIfEmpty([]))\n      : of([]);\n\n  constructor(\n    private activeModalRef: ActiveModalRef,\n    protected injector: Injector,\n    private rxModalService: RxModalService,\n    private rxRecordGridDesignUtilsService: RxRecordGridDesignUtilsService,\n    private rxRecordGridFilterSelectHelperService: RxRecordGridFilterSelectHelperService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxStringService: RxStringService\n  ) {\n    super(activeModalRef, injector);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.gridColumns$.pipe(take(1)).subscribe((gridColumns) => {\n      this.namedFilterOptions =\n        this.rxRecordGridFilterSelectHelperService.getNamedFilterOptionsFromColumns(gridColumns);\n\n      this.presets = this.params.presetsList.map(({ guid, name }, index) => {\n        const presetComponent = this.params.viewPresets.find(({ data }) => data.viewPresetGuid === guid);\n        const gridColumnsIds = gridColumns.filter((col) => col.filterable).map((col) => col.fieldId);\n        const viewPresetGuid = presetComponent.data.viewPresetGuid;\n\n        const presetColumns: IRecordGridViewPresetColumnData[] = cloneDeep(\n          presetComponent.children.filter((col) => col.type === RX_RECORD_GRID.components.columnViewPreset)\n        );\n\n        const sortedColumn = presetColumns.find((col) => isObject(col.data.sortable));\n\n        const sortModel: IRecordGridSortEditorModel = sortedColumn\n          ? {\n              fieldId: sortedColumn.data.fieldId,\n              direction: (sortedColumn.data.sortable as IRecordGridSortableObject).direction\n            }\n          : null;\n\n        return {\n          presetName: name,\n          gridColumns,\n          presetColumns,\n          guid: viewPresetGuid,\n          tags: this.getTags(presetColumns, gridColumns),\n          isOpen: this.params.activePreset ? this.params.activePreset === viewPresetGuid : index === 0,\n          sortModel,\n          filters: {\n            basicFilters: this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(\n              presetComponent.children\n            ),\n            filtersJson: presetComponent.data.filters\n          },\n          filterSelectControlOptions: {\n            primaryRecordDefinition: {\n              ...this.params.recordDefinition,\n              fieldDefinitions: this.params.recordDefinition.fieldDefinitions.filter((definition) =>\n                gridColumnsIds.includes(String(definition.id))\n              )\n            },\n            selectedFieldIds: gridColumns.map((column) => column.fieldId),\n            namedFilterOptions: this.namedFilterOptions\n          },\n          sortEditorControlOptions: {\n            label: 'Initial column sort',\n            gridColumns: sortBy(gridColumns, 'title'),\n            recordDefinition: this.params.recordDefinition\n          }\n        };\n      });\n    });\n  }\n\n  saveChanges(): void {\n    this.activeModalRef.close({\n      presets: this.presets\n    } as IRecordGridEditViewPresetsModalResult);\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  expandAll(event: MouseEvent): void {\n    event.stopPropagation();\n\n    this.presets.forEach((preset) => (preset.isOpen = true));\n  }\n\n  collapseAll(event: MouseEvent): void {\n    event.stopPropagation();\n\n    this.presets.forEach((preset) => (preset.isOpen = false));\n  }\n\n  openPresetColumnsModal(preset: IRecordGridEditViewPresetsModalData): void {\n    this.rxModalService\n      .openModal({\n        title: `Edit grid columns for ${preset.presetName}`,\n        content: RecordGridViewPresetColumnsModalComponent,\n        size: OpenViewActionModalSize.Large as any,\n        data: {\n          gridColumns: preset.gridColumns,\n          presetColumns: preset.presetColumns,\n          isReadOnly: this.isReadOnly\n        } as IRecordGridViewPresetColumnsModalOptions,\n        testID: 'edit-grid-columns-for-view-preset'\n      })\n      .then((result: IRecordGridViewPresetColumnsModalResult) => {\n        if (result?.presetColumns) {\n          preset.presetColumns = result.presetColumns;\n          preset.tags = this.getTags(preset.presetColumns, preset.gridColumns);\n          this.markAsDirty();\n        }\n      })\n      .catch(noop);\n  }\n\n  trackByPreset(index: number, item: IRecordGridEditViewPresetsModalData): string {\n    return item.guid;\n  }\n\n  private getTags(\n    presetColumns: IRecordGridViewPresetColumnData[],\n    gridColumns: IRecordGridDesignInspectorColumnConfig[]\n  ): IRecordGridEditViewPresetsModalTags {\n    const allColumnTitles = presetColumns\n      .filter((column) => column.data.visible)\n      .map((column) => {\n        const gridColumn = gridColumns.find((col) => col.fieldId === column.data.fieldId);\n        return gridColumn.title || gridColumn.fallbackTitle;\n      });\n\n    const displayedColumnTitles = allColumnTitles.slice(0, 5);\n\n    return {\n      items: displayedColumnTitles,\n      restCount: allColumnTitles.length - displayedColumnTitles.length\n    };\n  }\n\n  onSortChange(sortModel: IRecordGridSortEditorModel, preset: IRecordGridEditViewPresetsModalData): void {\n    preset.presetColumns.forEach((column) => {\n      column.data.sortable = column.data.fieldId === sortModel?.fieldId ? pick(sortModel, 'direction') : null;\n    });\n\n    this.markAsDirty();\n  }\n}\n","<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex justify-content-end\">\n        <div class=\"btn-group\">\n          <button adapt-button btn-type=\"tertiary\" type=\"button\" rx-id=\"expand-all-button\" (click)=\"expandAll($event)\">\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"collapseAll($event)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div class=\"designer-modal-accordion-wrapper\">\n        <adapt-accordion [multiselect]=\"true\">\n          <div\n            *ngFor=\"let preset of presets; let index = index; trackBy: trackByPreset\"\n            class=\"designer-modal-accordion-content\"\n          >\n            <adapt-accordion-tab\n              class=\"d-block\"\n              [isOpen]=\"preset.isOpen\"\n              (open)=\"preset.isOpen = true\"\n              (close)=\"preset.isOpen = false\"\n            >\n              <div class=\"card-title-text w-100\">\n                <div class=\"designer-modal-card-title-content\">\n                  <div class=\"left-header-block pl-0\">\n                    <div class=\"rx-ellipsis\" [title]=\"preset.presetName\" rx-id=\"card-title\">\n                      {{ preset.presetName }}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <adapt-button\n                btn-type=\"tertiary\"\n                rx-id=\"open-grid-preset-columns-modal-button\"\n                class=\"p-0 pb-1\"\n                (click)=\"openPresetColumnsModal(preset)\"\n              >\n                <span class=\"d-icon-plus_circle\"></span>\n\n                Edit grid columns\n              </adapt-button>\n\n              <div class=\"mb-3\">\n                <adapt-tag type=\"active\" *ngFor=\"let tag of preset.tags.items\">{{ tag }}</adapt-tag>\n\n                <button\n                  *ngIf=\"preset.tags.restCount\"\n                  class=\"btn-link rx-button-unstyled ml-1\"\n                  type=\"button\"\n                  (click)=\"openPresetColumnsModal(preset)\"\n                >\n                  +{{ preset.tags.restCount }} more\n                </button>\n              </div>\n\n              <rx-record-grid-sort-editor-control\n                class=\"d-block w-50\"\n                [options]=\"preset.sortEditorControlOptions\"\n                [disabled]=\"isReadOnly\"\n                [(ngModel)]=\"preset.sortModel\"\n                (ngModelChange)=\"onSortChange($event, preset)\"\n              ></rx-record-grid-sort-editor-control>\n\n              <rx-record-grid-filter-select-control\n                [options]=\"preset.filterSelectControlOptions\"\n                [disabled]=\"isReadOnly\"\n                [(ngModel)]=\"preset.filters\"\n                (ngModelChange)=\"markAsDirty()\"\n              ></rx-record-grid-filter-select-control>\n            </adapt-accordion-tab>\n          </div>\n        </adapt-accordion>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"!isDirty()\"\n    (click)=\"saveChanges()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n"]}