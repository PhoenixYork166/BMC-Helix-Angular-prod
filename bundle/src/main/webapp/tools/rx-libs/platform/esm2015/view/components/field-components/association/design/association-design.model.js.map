{"version":3,"file":"association-design.model.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/field-components/association/design/association-design.model.ts"],"names":[],"mappings":"AACA,OAAO,EAEL,+BAA+B,EAC/B,yBAAyB,EACzB,mCAAmC,EACpC,MAAM,iCAAiC,CAAC;AAEzC,OAAO,EAGL,2BAA2B,EAC3B,sBAAsB,EACtB,0BAA0B,EAC1B,8BAA8B,EAC/B,MAAM,mCAAmC,CAAC;AAC3C,OAAO,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAC;AACtD,OAAO,EAAE,qCAAqC,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AACtG,OAAO,EAKL,0BAA0B,EAC3B,MAAM,+BAA+B,CAAC;AACvC,OAAO,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE,GAAG,IAAI,IAAI,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AACvF,OAAO,EAAE,aAAa,EAAE,KAAK,EAAc,EAAE,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AACrE,OAAO,EACL,SAAS,EACT,WAAW,EACX,oBAAoB,EACpB,MAAM,EACN,GAAG,EACH,KAAK,EACL,QAAQ,EACR,QAAQ,EACR,WAAW,EACX,IAAI,EACJ,SAAS,EACT,IAAI,EACJ,SAAS,EACT,GAAG,EACH,cAAc,EACf,MAAM,gBAAgB,CAAC;AAExB,OAAO,EAAE,cAAc,EAAE,wBAAwB,EAAE,MAAM,sBAAsB,CAAC;AAChF,OAAO,EAAE,8BAA8B,EAAE,MAAM,qCAAqC,CAAC;AAWrF,OAAO,EAAE,uBAAuB,EAAE,MAAM,4BAA4B,CAAC;AAGrE,MAAM,OAAO,sBAAuB,SAAQ,0BAA0B;IAsCpE,YAAsB,QAAkB,EAAS,OAAkE;QACjH,KAAK,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QADL,aAAQ,GAAR,QAAQ,CAAU;QAAS,YAAO,GAAP,OAAO,CAA2D;QArC3G,wCAAmC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAC7D,mCAAmC,CACpC,CAAC;QAEM,kBAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAgB,aAAa,CAAC,CAAC;QAChE,4BAAuB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAA0B,uBAAuB,CAAC,CAAC;QAE9F,mCAA8B,GACpC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAiC,8BAA8B,CAAC,CAAC;QAE5E,qBAAgB,GAA0C,IAAI,OAAO,EAAE,CAAC;QAGxE,qBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,sBAAsB,EAAE,CAAC;QACzD,oCAA+B,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QAEhE,2BAAsB,GAA6B,EAAE,CAAC;QACtD,iCAA4B,GAA6B,EAAE,CAAC;QAC5D,2BAAsB,GAAuB,EAAE,CAAC;QAChD,6BAAwB,GAA6B,EAAE,CAAC;QAExD,4BAAuB,GAAG,KAAK,CAAC;QAI/B,iBAAY,GAAG,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAAC,aAAa,CAAC,CAAC;QACrE,WAAM,GAAG,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC;QAchE,oBAAoB;QACpB,IAAI,CAAC,gBAAgB;aAClB,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;aACvE,SAAS,CAAC,CAAC,SAAS,EAAE,EAAE;YACvB,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEL,MAAM,qBAAqB,GAAG,OAAO,CAAC,yBAAyB,CAAC,sBAAsB,CAAC,CAAC;QAExF,MAAM,uBAAuB,GAAG,qBAAqB,CAAC,IAAI,CACxD,SAAS,CAAC,CAAC,oBAAoB,EAAE,EAAE,CACjC,oBAAoB,CAAC,CAAC,CAAC,IAAI,CAAC,4BAA4B,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CACxF,CACF,CAAC;QAEF,IAAI,CAAC,gBAAgB,GAAG,aAAa,CAAC;YACpC,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAC7B,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,KAAK,cAAc,CAAC,cAAc,CAAC,qBAAqB,CACtF;YACD,uBAAuB;SACxB,CAAC,CAAC,IAAI,CACL,GAAG,CAAC,CAAC,CAAC,UAAU,EAAE,eAAe,CAAiD,EAAE,EAAE,CACpF,IAAI,CAAC,8BAA8B,CAAC,mCAAmC,CAAC,UAAU,EAAE,eAAe,CAAC,CACrG,CACF,CAAC;QAEF,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,OAAO,CAAC,sBAAsB,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAE7G,IAAI,CAAC,2CAA2C,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAC5E,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAA0B,IAAI,CAAC,CAAC,EAC5E,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE,CAClB,KAAK,CAAC,0BAA0B,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAC1G,EACD,WAAW,CAAC,CAAC,CAAC,EACd,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CACnC,CAAC;QAEF,IAAI,CAAC,yCAAyC,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAC1E,SAAS,CAAC,CAAC,gBAAgB,EAAE,EAAE;YAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAC3C,sBAAsB,EACtB,gBAAgB,CACjB,CAAC;QACJ,CAAC,CAAC,EACF,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;QAEF,IAAI,CAAC,yCAAyC;aAC3C,IAAI,CACH,SAAS,CAAC,CAAC,gCAAgC,EAAE,EAAE,CAC7C,gCAAgC;YAC9B,CAAC,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,IAAI,CAAC,+BAA+B,CAAC,CAAC,CAAC,IAAI,CAC3F,SAAS,CAAC,CAAC,CAAC,mBAAmB,EAAE,8BAA8B,CAAC,EAAE,EAAE;gBAClE,MAAM,gBAAgB,GAAG,gCAAgC;oBACvD,CAAC,CAAC,IAAI,CAAC,+BAA+B,CAAC,mBAAmB,CAAC;oBAC3D,CAAC,CAAC,EAAE,CAAC;gBAEP,MAAM,iBAAiB,GAAG,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;gBAEnG,OAAO,iBAAiB,CAAC,IAAI,CAC3B,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;oBACT,mBAAmB,kCAAO,8BAA8B,GAAK,mBAAmB,CAAE;oBAClF,gCAAgC;iBACjC,CAAC,CAAC,CACJ,CAAC;YACJ,CAAC,CAAC,EACF,IAAI,CAAC,CAAC,CAAC,CACR;YACH,CAAC,CAAC,EAAE,CAAC;gBACD,mBAAmB,EAAE,IAAI;gBACzB,gCAAgC,EAAE,IAAI;aACvC,CAAC,CACP,EACD,cAAc,CAAC,IAAI,CAAC,iBAAiB,CAAC,EACtC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CACnC;aACA,SAAS,CAAC,CAAC,CAAC,EAAE,mBAAmB,EAAE,gCAAgC,EAAE,EAAE,gBAAgB,CAAC,EAAE,EAAE;YAC3F,MAAM,iBAAiB,GAAG,IAAI,CAAC,8BAA8B,CAAC,oBAAoB,EAAE,CAAC;YAErF,MAAM,UAAU,iDACX,iBAAiB,GACjB,mBAAmB,KACtB,eAAe,EAAE,OAAO,CAAC,CAAA,mBAAmB,aAAnB,mBAAmB,uBAAnB,mBAAmB,CAAE,eAAe,MAAK,MAAM,CAAC,GAC1E,CAAC;YAEF,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;YACzC,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAAC,UAAU,CAAC,CAAC;YAEnD,IAAI,CAAC,gBAAgB,CAAC,IAAI,CACxB,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,gCAAgC,EAAE,gBAAgB,CAAC,CACxF,CAAC;QACJ,CAAC,CAAC,CAAC;QAEL,MAAM,oBAAoB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CACrD,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CACnE,CAAC;QAEF,IAAI,CAAC,OAAO;aACT,yBAAyB,CAAC,sBAAsB,CAAC;aACjD,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,cAAc,CAAC,oBAAoB,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;aACvF,SAAS,CAAC,CAAC,CAAC,oBAAoB,EAAE,mBAAmB,CAAC,EAAE,EAAE;YACzD,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAAC;gBACrC,oBAAoB;gBACpB,KAAK,EAAE,IAAI;gBACX,yBAAyB,EAAE,IAAI;gBAC/B,wBAAwB,EAAE,IAAI;gBAC9B,WAAW,EAAE,wBAAwB,CAAC,KAAK;gBAC3C,2BAA2B,EAAE,IAAI;gBACjC,2BAA2B,EAAE,IAAI;gBACjC,OAAO,EAAE,IAAI;gBACb,eAAe,EAAE,KAAK;gBACtB,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,IAAI;gBACf,eAAe,EAAE,EAAE;gBACnB,mBAAmB,EAAE,IAAI;gBACzB,QAAQ,EAAE,IAAI;aACf,CAAC,CAAC;YAEH,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEL,IAAI,CAAC,OAAO;aACT,yBAAyB,CAAC,sBAAsB,CAAC;aACjD,IAAI,CACH,IAAI,CAAC,CAAC,CAAC,EACP,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,EAC9C,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE,CAClB,aAAa,CAAC;YACZ,IAAI,CAAC,mCAAmC,CAAC,KAAK,CAAC,oBAAoB,CAAC;YACpE,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC,oBAAoB,CAAC;YAC7D,IAAI,CAAC,yCAAyC,CAAC,KAAK,CAAC,oBAAoB,CAAC;YAC1E,IAAI,CAAC,gCAAgC,CAAC,KAAK,CAAC,yBAAyB,CAAC;YACtE,IAAI,CAAC,qCAAqC,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,OAAO,CAAC;SACtF,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAC/B,EACD,cAAc,CAAC,IAAI,CAAC,yCAAyC,EAAE,IAAI,CAAC,iBAAiB,CAAC,EACtF,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CACnC;aACA,SAAS,CAAC,CAAC,CAAC,cAAc,EAAE,wCAAwC,EAAE,gBAAgB,CAAC,EAAE,EAAE;YAC1F,IAAI,CAAC,gBAAgB,CAAC,IAAI,CACxB,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,wCAAwC,EAAE,gBAAgB,CAAC,CACpG,CAAC;QACJ,CAAC,CAAC,CAAC;QAEL,IAAI,CAAC,OAAO;aACT,yBAAyB,CAAC,aAAa,CAAC;aACxC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,cAAc,CAAC,oBAAoB,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;aACvF,SAAS,CAAC,CAAC,CAAC,WAAW,EAAE,mBAAmB,CAAC,EAAE,EAAE;YAChD,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAAC;gBACrC,WAAW;gBACX,2BAA2B,EAAE,IAAI;gBACjC,2BAA2B,EAAE,IAAI;gBACjC,OAAO,EAAE,IAAI;gBACb,eAAe,EAAE,KAAK;gBACtB,SAAS,EAAE,IAAI;gBACf,SAAS,EAAE,IAAI;gBACf,eAAe,EAAE,EAAE;gBACnB,mBAAmB,EAAE,IAAI;gBACzB,QAAQ,EAAE,IAAI;aACf,CAAC,CAAC;YAEH,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEL,IAAI,CAAC,OAAO,CAAC,oBAAoB;aAC9B,IAAI,CACH,IAAI,CAAC,CAAC,CAAC,EACP,QAAQ,EAAE,EACV,cAAc,CAAC,IAAI,CAAC,gBAAgB,CAAC,EACrC,SAAS,CACP,CAAC,CAAC,CAAC,kBAAkB,EAAE,UAAU,CAAC,EAAE,QAAQ,CAG3C,EAAE,EAAE;YACH,MAAM,iBAAiB,qBAAQ,UAAU,CAAE,CAAC;YAC5C,MAAM,wBAAwB,GAAG,EAAE,CAAC;YAEpC,QAAQ,IAAI,EAAE;gBACZ,KAAK,kBAAkB,CAAC,2BAA2B,KAAK,UAAU,CAAC,2BAA2B;oBAC5F,IAAI,CAAC,iCAAiC,CACpC,UAAU,EACV,QAAoC,EACpC,cAAc,CAAC,OAAO,CAAC,SAAS,CACjC,CAAC;oBAEF,MAAM;gBAER,KAAK,kBAAkB,CAAC,2BAA2B,KAAK,UAAU,CAAC,2BAA2B;oBAC5F,IAAI,CAAC,iCAAiC,CACpC,UAAU,EACV,QAAoC,EACpC,cAAc,CAAC,OAAO,CAAC,kBAAkB,CAC1C,CAAC;oBAEF,MAAM;gBAER,KAAK,kBAAkB,CAAC,mBAAmB,KAAK,UAAU,CAAC,mBAAmB,CAAC;gBAC/E,KAAK,kBAAkB,CAAC,QAAQ,KAAK,UAAU,CAAC,QAAQ;oBACtD,MAAM,eAAe,GAAG,QAAQ,CAAC,IAAI,CACnC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,KAAK,cAAc,CAAC,cAAc,CAAC,iBAAiB,CAC5D,CAAC;oBAExB,IAAI,CAAC,gCAAgC,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;oBAEnE,MAAM;gBAER,KAAK,CAAC,OAAO,CAAC,kBAAkB,CAAC,eAAe,EAAE,UAAU,CAAC,eAAe,CAAC;oBAC3E,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,eAAe,EAAE,QAAoC,CAAC,CAAC;oBAEnG,MAAM;gBAER,KAAK,kBAAkB,CAAC,yBAAyB,KAAK,UAAU,CAAC,yBAAyB;oBACxF,iBAAiB,CAAC,WAAW,GAAG,wBAAwB,CAAC,KAAK,CAAC;oBAC/D,IAAI,CAAC,8BAA8B,CAAC,6BAA6B,CAAC,iBAAiB,CAAC,CAAC;oBAErF,IAAI,UAAU,CAAC,yBAAyB,EAAE;wBACxC,wBAAwB,CAAC,IAAI,CAC3B,IAAI,CAAC,mCAAmC;6BACrC,wBAAwB,CAAC,UAAU,CAAC,yBAAyB,CAAC;6BAC9D,IAAI,CACH,GAAG,CAAC,CAAC,qBAAqB,EAAE,EAAE;4BAC5B,iBAAiB,CAAC,wBAAwB;gCACxC,qBAAqB,CAAC,OAAO,KAAK,UAAU,CAAC,oBAAoB;oCAC/D,CAAC,CAAC,+BAA+B,CAAC,KAAK,CAAC,KAAK;oCAC7C,CAAC,CAAC,+BAA+B,CAAC,KAAK,CAAC,KAAK,CAAC;4BAElD,IAAI,CAAC,0BAA0B,CAAC,qBAAqB,CAAC,CAAC;4BACvD,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAAC,iBAAiB,CAAC,CAAC;4BAE1D,IAAI,IAAI,CAAC,uBAAuB,EAAE;gCAChC,IAAI,CAAC,8BAA8B,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC;6BACvE;wBACH,CAAC,CAAC,CACH,CACJ,CAAC;qBACH;yBAAM;wBACL,IAAI,CAAC,uBAAuB,GAAG,KAAK,CAAC;qBACtC;oBAED,wBAAwB,CAAC,IAAI,CAC3B,IAAI,CAAC,gCAAgC,CAAC,UAAU,CAAC,yBAAyB,CAAC,CAC5E,CAAC;oBAEF,MAAM;gBAER,KAAK,kBAAkB,CAAC,wBAAwB,KAAK,UAAU,CAAC,wBAAwB;oBACtF,iBAAiB,CAAC,WAAW,GAAG,wBAAwB,CAAC,KAAK,CAAC;oBAC/D,IAAI,CAAC,8BAA8B,CAAC,6BAA6B,CAAC,iBAAiB,CAAC,CAAC;oBAErF,MAAM;gBAER,KAAK,kBAAkB,CAAC,eAAe,KAAK,UAAU,CAAC,eAAe;oBACpE,IAAI,UAAU,CAAC,eAAe,KAAK,IAAI,EAAE;wBACvC,iBAAiB,CAAC,SAAS,GAAG,IAAI,CAAC;wBACnC,iBAAiB,CAAC,SAAS,GAAG,IAAI,CAAC;qBACpC;oBAED,MAAM;gBAER,KAAK,kBAAkB,CAAC,SAAS,KAAK,UAAU,CAAC,SAAS;oBACxD,kBAAkB,CAAC,SAAS,KAAK,UAAU,CAAC,SAAS;oBACrD,IAAI,WAAW,CAAC,UAAU,CAAC,eAAe,CAAC,EAAE;wBAC3C,QAAQ,CAAC,iBAAiB,EAAE;4BAC1B,SAAS,EAAE,IAAI;4BACf,SAAS,EAAE,IAAI;4BACf,eAAe,EAAE,KAAK;yBACvB,CAAC,CAAC;qBACJ;yBAAM;wBACL,iBAAiB,CAAC,eAAe,GAAG,KAAK,CAAC;qBAC3C;oBAED,MAAM;aACT;YAED,MAAM,iBAAiB,GACrB,wBAAwB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;YAE3F,OAAO,iBAAiB,CAAC,IAAI,CAC3B,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,mBAAmB,EAAE,iBAAiB,EAAE,CAAC,CAAC,EAC7E,cAAc,CAAC,IAAI,CAAC,yCAAyC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CACvF,CAAC;QACJ,CAAC,CACF,EACD,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CACnC;aACA,SAAS,CACR,CAAC,CAAC,EAAE,UAAU,EAAE,mBAAmB,EAAE,EAAE,wCAAwC,EAAE,gBAAgB,CAAC,EAAE,EAAE;YACpG,MAAM,iBAAiB,GAAG,IAAI,CAAC,8BAA8B,CAAC,oBAAoB,EAAE,CAAC;YAErF,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;YAEzC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CACxB,IAAI,CAAC,kBAAkB,iCAChB,iBAAiB,GAAK,mBAAmB,GAC9C,wCAAwC,EACxC,gBAAgB,CACjB,CACF,CAAC;QACJ,CAAC,CACF,CAAC;QAEJ,IAAI,CAAC,OAAO;aACT,yBAAyB,CAAC,SAAS,CAAC;aACpC,IAAI;QACH,qDAAqD;QACrD,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAC7C,oBAAoB,EAAE,EACtB,QAAQ,EAAE,CACX;aACA,IAAI,CACH,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC;QACjD,yFAAyF;QACzF,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,KAAK,wBAAwB,CAAC,QAAQ,CAAC,CAAC,EAC/F,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,OAAO,CAAC,EAAE,KAAK,CAAC,EAAE,EAAE,CAC5C,IAAI,CAAC,8BAA8B,CAAC,mBAAmB,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAC,IAAI,CACtF,GAAG,CAAC,CAAC,gBAAgB,EAAE,EAAE;;YACvB,MAAM,uBAAuB,GAAG,MAAA,gBAAgB,CAAC,gBAAgB,CAAC,IAAI,CACpE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,MAAM,CAAC,WAAW,CAAC,CAC5C,0CAAE,IAAI,CAAC;YAER,MAAM,0BAA0B,GAAG,MAAA,gBAAgB,CAAC,gBAAgB,CAAC,IAAI,CACvE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,MAAM,CAAC,OAAO,CAAC,CACxC,0CAAE,IAAI,CAAC;YAER,+EAA+E;YAC/E,OAAO,CAAC,KAAK,CAAC,KAAK,IAAI,uBAAuB,KAAK,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC;QAC5G,CAAC,CAAC,CACH,CACF,EACD,oBAAoB,EAAE,EACtB,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CACnC;aACA,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE;YACnB,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEL,aAAa,CAAC;YACZ,IAAI,CAAC,OAAO,CAAC,oBAAoB;YACjC,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;SACzE,CAAC;aACC,IAAI,CACH,SAAS,CAAC,CAAC,CAAC,mBAAmB,EAAE,eAAe,CAAC,EAAE,EAAE;YACnD,MAAM,YAAY,GAAuC,mBAAmB,CAAC,yBAAyB;gBACpG,CAAC,CAAC,IAAI,CAAC,mCAAmC,CAAC,wBAAwB,CAC/D,mBAAmB,CAAC,yBAAyB,CAC9C;gBACH,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;YAEX,OAAO,YAAY,CAAC,IAAI,CACtB,GAAG,CAAC,CAAC,qBAAqB,EAAE,EAAE;gBAC5B,OAAO,IAAI,CAAC,8BAA8B,CAAC,QAAQ,CACjD,IAAI,CAAC,OAAO,EACZ,mBAAmB,EACnB,qBAAqB,EACrB,eAAe,CAChB,CAAC;YACJ,CAAC,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,EACF,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CACnC;aACA,SAAS,CAAC,CAAC,gBAAgB,EAAE,EAAE;YAC9B,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEL,aAAa,CAAC;YACZ,IAAI,CAAC,MAAM;YACX,IAAI,CAAC,OAAO;iBACT,yBAAyB,CAAC,2BAA2B,CAAC;iBACtD,IAAI,CACH,GAAG,CAAC,CAAC,yBAAyB,EAAE,EAAE,CAChC,yBAAyB,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC,IAAI,CAC1G,CACF;SACJ,CAAC;aACC,IAAI,CACH,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,qBAAqB,CAAC,EAAE,EAAE;YACrC,IAAI,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC;YAEjD,IAAI,qBAAqB,IAAI,KAAK,EAAE;gBAClC,aAAa,IAAI,KAAK,qBAAqB,KAAK,KAAK,GAAG,CAAC;aAC1D;iBAAM,IAAI,qBAAqB,IAAI,KAAK,EAAE;gBACzC,aAAa,IAAI,KAAK,qBAAqB,IAAI,KAAK,GAAG,CAAC;aACzD;YAED,OAAO,aAAa,CAAC;QACvB,CAAC,CAAC,EACF,oBAAoB,EAAE,EACtB,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CACnC;aACA,SAAS,CAAC,CAAC,aAAa,EAAE,EAAE;YAC3B,IAAI,CAAC,OAAO,CAAC,mCAAmC,CAAC,aAAa,EAAE;gBAC9D;oBACE,KAAK,EAAE,UAAU;oBACjB,UAAU,EAAE,IAAI,CAAC,wBAAwB,CAAC,UAAU,CAAC;iBACtD;gBACD;oBACE,KAAK,EAAE,QAAQ;oBACf,UAAU,EAAE,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC;iBACpD;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IA5ZD,MAAM,CAAC,oBAAoB,CAAC,iBAA+C;QACzE,uCACK,qCAAqC,GACrC,iBAAiB,EACpB;IACJ,CAAC;IAyZD,mBAAmB,CAAC,UAAwC;QAC1D,OAAO,IAAI,iCAEJ,UAAU,KACb,cAAc,EAAE,IAAI,CAAC,gBAAgB;gBACnC,CAAC,CAAC,sBAAsB,IAAI,CAAC,gBAAgB,kBAAkB;gBAC/D,CAAC,CAAC,UAAU,CAAC,cAAc,EAC7B,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;gBACrC,CAAC,CAAC,sBAAsB,IAAI,CAAC,gBAAgB,oBAAoB;gBACjE,CAAC,CAAC,UAAU,CAAC,gBAAgB,KAEjC;YACE,iBAAiB;YACjB,qBAAqB;YACrB,UAAU;YACV,6BAA6B;YAC7B,6BAA6B;SAC9B,CACwB,CAAC;IAC9B,CAAC;IAEO,gCAAgC,CACtC,mBAAiD,EACjD,eAAmC;QAEnC,IAAI,eAAe,EAAE;YACnB,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC;SACvD;QAED,IAAI,mBAAmB,CAAC,mBAAmB,EAAE;YAC3C,MAAM,SAAS,GAAG;gBAChB,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;gBACnC,IAAI,EAAE,cAAc,CAAC,cAAc,CAAC,iBAAiB;gBACrD,gBAAgB,EAAE;oBAChB,yBAAyB,EAAE,mBAAmB,CAAC,mBAAmB;oBAClE,gBAAgB,EAAE,mBAAmB,CAAC,QAAQ;iBAC/C;aACF,CAAC;YAEF,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;SACxC;IACH,CAAC;IAEO,iCAAiC,CACvC,UAAwC,EACxC,QAAkC,EAClC,MAAc;QAEd,MAAM,qBAAqB,GAAG,QAAQ,CAAC,IAAI,CACzC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,KAAK,mBAAmB,CAAC,YAAY,IAAI,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,MAAM,CAC1G,CAAC;QAEF,MAAM,0BAA0B,GAC9B,MAAM,KAAK,cAAc,CAAC,OAAO,CAAC,kBAAkB;YAClD,CAAC,CAAC,UAAU,CAAC,2BAA2B;YACxC,CAAC,CAAC,UAAU,CAAC,2BAA2B,CAAC;QAE7C,IAAI,qBAAqB,EAAE;YACzB,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAC;SAC7D;QAED,IAAI,0BAA0B,EAAE;YAC9B,MAAM,MAAM,GAAG,IAAI,CAAC,8BAA8B,CAAC,yBAAyB,CAC1E,UAAU,EACV,MAAM,EACN,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CACrB,CAAC;YAEF,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;SACrC;IACH,CAAC;IAEO,2BAA2B,CACjC,eAAyC,EACzC,QAAkC;QAElC,MAAM,KAAK,GAAG,QAAQ;aACnB,MAAM,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,KAAK,cAAc,CAAC,cAAc,CAAC,qBAAqB,CAAC;aAC7F,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAEtC,MAAM,YAAY,GAAuC,eAAe,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YACvF,IAAI,EAAE,cAAc,CAAC,cAAc,CAAC,qBAAqB;YACzD,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;YACnC,gBAAgB,EAAE;gBAChB,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,OAAO;gBAC3B,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE;gBAC7B,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK;aACxB;SACF,CAAC,CAAC,CAAC;QAEJ,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YACpB,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;SACtC;QAED,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;IAC1C,CAAC;IAEO,sBAAsB;QAC5B,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAC/B,GAAG,CAAC,CAAC,UAAsC,EAAE,EAAE;;YAC7C,MAAM,8BAA8B,GAAgC,EAAE,CAAC;YAEvE,MAAM,kBAAkB,GAAG,UAAU,CAAC,MAAM,CAC1C,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,KAAK,cAAc,CAAC,cAAc,CAAC,iBAAiB,CAClF,CAAC;YAEF,8BAA8B,CAAC,eAAe,GAAG,UAAU,CAAC,MAAM,CAChE,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,KAAK,cAAc,CAAC,cAAc,CAAC,qBAAqB,CAC5D,CAAC;YAE9B,IAAI,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE;gBACjC,8BAA8B,CAAC,QAAQ,GAAG,MAAA,kBAAkB,CAAC,CAAC,CAAC,CAAC,IAAI,0CAAE,gBAAgB,CAAC;gBACvF,8BAA8B,CAAC,mBAAmB,GAAG,MAAA,kBAAkB,CAAC,CAAC,CAAC,CAAC,IAAI,0CAAE,yBAAyB,CAAC;aAC5G;YAED,MAAM,sBAAsB,GAAG,IAAI,CAAC,mCAAmC,CACrE,UAAU,EACV,cAAc,CAAC,OAAO,CAAC,kBAAkB,CAC1C,CAAC;YAEF,IAAI,sBAAsB,EAAE;gBAC1B,8BAA8B,CAAC,2BAA2B,GAAG,sBAAsB,CAAC;aACrF;YAED,MAAM,aAAa,GAAG,IAAI,CAAC,mCAAmC,CAAC,UAAU,EAAE,cAAc,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAE7G,IAAI,aAAa,EAAE;gBACjB,8BAA8B,CAAC,2BAA2B,GAAG,aAAa,CAAC;aAC5E;YAED,OAAO,8BAA8B,CAAC;QACxC,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAEO,+BAA+B,CACrC,mBAA2C;QAE3C,MAAM,gBAAgB,GAAG,EAAE,CAAC;QAE5B,IAAI,mBAAmB,CAAC,oBAAoB,EAAE;YAC5C,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,4BAA4B,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAEnG,IAAI,mBAAmB,CAAC,OAAO,EAAE;gBAC/B,gBAAgB,CAAC,IAAI,CACnB,IAAI,CAAC,qCAAqC,CACxC,mBAAmB,CAAC,oBAAoB,EACxC,mBAAmB,CAAC,OAAO,CAC5B,CACF,CAAC;aACH;YAED,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,mCAAmC,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,CAAC,CAAC;SAC3G;QAED,IAAI,mBAAmB,CAAC,yBAAyB,EAAE;YACjD,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,yCAAyC,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,CAAC,CAAC;YAEhH,gBAAgB,CAAC,IAAI,CACnB,IAAI,CAAC,mCAAmC;iBACrC,wBAAwB,CAAC,mBAAmB,CAAC,yBAAyB,CAAC;iBACvE,IAAI,CAAC,GAAG,CAAC,CAAC,qBAAqB,EAAE,EAAE,CAAC,IAAI,CAAC,0BAA0B,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAChG,CAAC;SACH;QAED,IAAI,mBAAmB,CAAC,wBAAwB,EAAE;YAChD,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,gCAAgC,CAAC,mBAAmB,CAAC,yBAAyB,CAAC,CAAC,CAAC;SAC7G;QAED,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAEO,qCAAqC,CAC3C,+BAAuC,EACvC,OAAe;QAEf,OAAO,IAAI,CAAC,4BAA4B,CAAC,+BAA+B,CAAC,CAAC,IAAI,CAC5E,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;YACb,OAAO,CAAC,IAAI,CAAC,+BAA+B,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QACvG,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAEO,0BAA0B,CAAC,qBAA6C;QAC9E,IAAI,qBAAqB,EAAE;YACzB,IAAI,CAAC,uBAAuB;gBAC1B,qBAAqB,CAAC,WAAW,KAAK,yBAAyB,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC;SAChG;IACH,CAAC;IAEO,mCAAmC,CAAC,UAAsC,EAAE,MAAc;QAChG,MAAM,YAAY,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE,WAAC,OAAA,CAAA,MAAA,UAAU,CAAC,IAAI,0CAAE,MAAM,MAAK,MAAM,CAAA,EAAA,CAAC,CAAC;QAEzF,OAAO,YAAY,IAAI,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,qCAAqC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACjH,CAAC;IAEO,qCAAqC,CAAC,YAAsC;QAClF,MAAM,eAAe,GAAG,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,mBAAmB,CAAC,MAAM,CAAC,CAAC;QAE/G,OAAO,GAAG,CAAC,eAAe,EAAE,yBAAyB,EAAE,IAAI,CAAC,CAAC;IAC/D,CAAC;IAEO,4BAA4B,CAAC,+BAAuC;QAC1E,OAAO,CACL,+BAA+B;YAC7B,CAAC,CAAC,IAAI,CAAC,8BAA8B;iBAChC,mBAAmB,CAAC,+BAA+B,CAAC;iBACpD,IAAI,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC;YACvE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CACX,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACtF,CAAC;IAEO,gCAAgC,CAAC,yBAAiC;QACxE,MAAM,gCAAgC,GAAG,yBAAyB;YAChE,CAAC,CAAC,IAAI,CAAC,mCAAmC;iBACrC,wBAAwB,CAAC,yBAAyB,CAAC;iBACnD,IAAI,CACH,GAAG,CAAC,CAAC,qBAAqB,EAAE,EAAE,CAC5B,IAAI,CAAC,8BAA8B,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,CAC9E,CACF;YACL,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAEX,OAAO,gCAAgC,CAAC,IAAI,CAC1C,GAAG,CAAC,CAAC,+BAA+B,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,wBAAwB,GAAG,+BAA+B,CAAC,CAAC,CAC5G,CAAC;IACJ,CAAC;IAEO,mCAAmC,CACzC,+BAAuC;QAEvC,OAAO,IAAI,CAAC,yCAAyC,CAAC,IAAI,CACxD,SAAS,CAAC,CAAC,oBAAoB,EAAE,EAAE,CACjC,+BAA+B,IAAI,oBAAoB;YACrD,CAAC,CAAC,IAAI,CAAC,8BAA8B,CAAC,wBAAwB,CAC1D,+BAA+B,EAC/B,oBAAoB,CACrB;YACH,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CACX,EACD,GAAG,CAAC,CAAC,4BAA4B,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,GAAG,4BAA4B,CAAC,CAAC,CACpG,CAAC;IACJ,CAAC;IAEO,yCAAyC,CAC/C,+BAAuC;QAEvC,OAAO,IAAI,CAAC,2CAA2C,CAAC,IAAI,CAC1D,QAAQ,CAAC,CAAC,KAAK,EAAE,EAAE,CACjB,KAAK,CAAC,MAAM;YACV,CAAC,CAAC,aAAa,CACX,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CACjB,IAAI,CAAC,OAAO,CAAC,yBAAyB,CACpC,sBAAsB,EACtB,IAAI,CACL,CACF,CACF,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CACX,EACD,SAAS,CAAC,CAAC,qBAAqB,EAAE,EAAE,CAClC,qBAAqB,CAAC,MAAM,IAAI,+BAA+B;YAC7D,CAAC,CAAC,KAAK,CACH,GAAG,qBAAqB,CAAC,GAAG,CAAC,CAAC,oBAAoB,EAAE,EAAE,CACpD,IAAI,CAAC,8BAA8B,CAAC,wBAAwB,CAC1D,+BAA+B,EAC/B,oBAAoB,CACrB,CACF,CACF;YACH,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CACX,EACD,GAAG,CAAC,CAAC,4BAA4B,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,4BAA4B,GAAG,4BAA4B,CAAC,CAAC,CAC1G,CAAC;IACJ,CAAC;IAEO,kBAAkB,CACxB,UAAwC,EACxC,wCAAgD,EAChD,gBAAwB;QAExB,MAAM,eAAe,GAAiC;YACpD,uBAAuB,EAAE;gBACvB;oBACE,KAAK,EAAE,SAAS;oBAChB,QAAQ,EAAE,EAAE;iBACb;aACF;SACF,CAAC;QAEF,IAAI,wCAAwC,EAAE;YAC5C,MAAM,sBAAsB,GAAG,eAAe,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;YAEnF,sBAAsB,CAAC,IAAI,CAAC;gBAC1B,IAAI,EAAE,sBAAsB;gBAC5B,SAAS,EAAE,2BAA2B;gBACtC,OAAO,EAAE;oBACP,KAAK,EAAE,gCAAgC;oBACvC,cAAc,EAAE,sBAAsB,CAAC,kBAAkB;oBACzD,QAAQ,EAAE,IAAI;iBACf;aACF,CAAC,CAAC;YAEH,IAAI,UAAU,CAAC,oBAAoB,EAAE;gBACnC,sBAAsB,CAAC,IAAI,CAAC;oBAC1B,IAAI,EAAE,2BAA2B;oBACjC,SAAS,EAAE,0BAA0B;oBACrC,OAAO,EAAE;wBACP,KAAK,EAAE,oBAAoB;wBAC3B,OAAO,EAAE,IAAI,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC,qBAAqB,EAAE,EAAE,CAAC,CAAC;4BACnE,EAAE,EAAE,qBAAqB,CAAC,IAAI;4BAC9B,IAAI,EAAE,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,qBAAqB,CAAC,IAAI,CAAC;yBAC9E,CAAC,CAAC;wBACH,WAAW,EAAE,IAAI;wBACjB,QAAQ,EAAE,IAAI;qBACc;iBAC/B,CAAC,CAAC;aACJ;YAED,IAAI,UAAU,CAAC,oBAAoB,IAAI,IAAI,CAAC,wBAAwB,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC/E,sBAAsB,CAAC,IAAI,CAAC;oBAC1B,IAAI,EAAE,0BAA0B;oBAChC,SAAS,EAAE,0BAA0B;oBACrC,OAAO,EAAE;wBACP,KAAK,EAAE,6BAA6B;wBACpC,OAAO,EAAE,IAAI,CAAC,wBAAwB;wBACtC,QAAQ,EAAE,IAAI;qBACc;iBAC/B,CAAC,CAAC;aACJ;YAED,IACE,UAAU,CAAC,oBAAoB;gBAC/B,IAAI,CAAC,8BAA8B,CAAC,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,sBAAsB,CAAC,EAC7F;gBACA,sBAAsB,CAAC,IAAI,CAAC;oBAC1B,IAAI,EAAE,aAAa;oBACnB,SAAS,EAAE,0BAA0B;oBACrC,OAAO,EAAE;wBACP,KAAK,EAAE,0BAA0B;wBACjC,OAAO,EAAE,IAAI,CAAC,wBAAwB,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;wBACrE,QAAQ,EAAE,IAAI;qBACc;iBAC/B,CAAC,CAAC;aACJ;YAED,YAAY;YACZ,IAAI,CAAC,UAAU,CAAC,WAAW,IAAI,UAAU,CAAC,WAAW,KAAK,wBAAwB,CAAC,KAAK,EAAE;gBACxF,sBAAsB,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,8BAA8B,CAAC,4BAA4B,EAAE,CAAC,CAAC;gBAEnG,IAAI,IAAI,CAAC,uBAAuB,IAAI,UAAU,CAAC,yBAAyB,EAAE;oBACxE,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,8BAA8B,CAAC,yBAAyB,EAAE,CAAC,CAAC;oBAE7F,IAAI,CAAC,UAAU,CAAC,eAAe,EAAE;wBAC/B,sBAAsB,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,8BAA8B,CAAC,qBAAqB,EAAE,CAAC,CAAC;qBAC7F;iBACF;gBAED,IAAI,UAAU,CAAC,oBAAoB,EAAE;oBACnC,sBAAsB,CAAC,IAAI,CACzB,IAAI,CAAC,8BAA8B,CAAC,yBAAyB,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAC3F,CAAC;iBACH;aACF;YAED,gBAAgB;YAChB,IAAI,UAAU,CAAC,WAAW,KAAK,wBAAwB,CAAC,QAAQ,EAAE;gBAChE,sBAAsB,CAAC,IAAI,CACzB,GAAG,IAAI,CAAC,8BAA8B,CAAC,gCAAgC,CACrE,IAAI,CAAC,sBAAsB,EAC3B,IAAI,CAAC,4BAA4B,CAClC,CACF,CAAC;gBAEF,IAAI,UAAU,CAAC,mBAAmB,EAAE;oBAClC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,8BAA8B,CAAC,kBAAkB,EAAE,CAAC,CAAC;iBACvF;aACF;YAED,sBAAsB,CAAC,IAAI,CACzB,GAAG,IAAI,CAAC,8BAA8B,CAAC,2BAA2B,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAChG,CAAC;SACH;aAAM;YACL,eAAe,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,QAAQ,GAAG;gBACpD;oBACE,SAAS,EAAE,8BAA8B;oBACzC,OAAO,EAAE;wBACP,IAAI,EAAE,qEAAqE;wBAC3E,aAAa,EAAE,gBAAgB;wBAC/B,YAAY,EAAE,sBAAsB;qBACJ;iBACnC;aACF,CAAC;SACH;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;CACF","sourcesContent":["import { Injector } from '@angular/core';\nimport {\n  IAssociationDefinition,\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RX_ASSOCIATION_DEFINITION,\n  RxAssociationDefinitionCacheService\n} from '@helix/platform/association/api';\nimport { IFieldDefinition } from '@helix/platform/record/api';\nimport {\n  ISelectFormControlOptions,\n  IValidationFormControlOptions,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  ValidationFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE, RxViewComponentType } from '@helix/platform/view/api';\nimport {\n  IViewComponentDesignData,\n  IViewComponentDesignSandbox,\n  IViewDesignerInspectorConfig,\n  ViewComponentAddComponentPayload,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { defaults, get, isEqual, isNil, isUndefined, map as _map, omit } from 'lodash';\nimport { combineLatest, merge, Observable, of, Subject } from 'rxjs';\nimport {\n  concatMap,\n  concatMapTo,\n  distinctUntilChanged,\n  filter,\n  map,\n  mapTo,\n  mergeMap,\n  pairwise,\n  shareReplay,\n  skip,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { IRecordEditorProperties } from '../../../record-editor/design/record-editor-design.types';\nimport { RX_ASSOCIATION, RxAssociationEditingMode } from '../association.types';\nimport { AssociationDesignHelperService } from './association-design-helper.service';\nimport {\n  IAssociationChildComponents,\n  IAssociationDesignProperties,\n  IAssociationProperties\n} from './association-design.types';\nimport {\n  IAssociatedRecordField,\n  IAssociationChild,\n  IAssociationFilter\n} from './association-record-field-selector-field';\nimport { RxDefinitionNameService } from '@helix/platform/shared/api';\nimport { RecordEditorDesignModel } from '../../../record-editor/design/record-editor-design.model';\n\nexport class AssociationDesignModel extends ViewDesignerComponentModel {\n  private rxAssociationDefinitionCacheService = this.injector.get<RxAssociationDefinitionCacheService>(\n    RxAssociationDefinitionCacheService\n  );\n\n  private rxGuidService = this.injector.get<RxGuidService>(RxGuidService);\n  private rxDefinitionNameService = this.injector.get<RxDefinitionNameService>(RxDefinitionNameService);\n\n  private associationDesignHelperService =\n    this.injector.get<AssociationDesignHelperService>(AssociationDesignHelperService);\n\n  private updateInspector$: Subject<IViewDesignerInspectorConfig> = new Subject();\n  private recordEditorGuid: string;\n  private recordDefinitionNameFromHostRecordEditor$: Observable<string>;\n  private childComponents$ = this.sandbox.getChildComponentsTree();\n  private associationChildComponentsData$ = this.getChildComponentsData();\n\n  private associationDefinitions: IAssociationDefinition[] = [];\n  private associationDefinitionFilters: IAssociationDefinition[] = [];\n  private recordDefinitionFields: IFieldDefinition[] = [];\n  private associatedRecordNodeSide: IAssociationDefinition[] = [];\n  private previousDropdownFieldDefinition: IFieldDefinition;\n  private isManyToManyAssociation = false;\n\n  readonly otherAssociationRecordEditorComponentGuids$: Observable<string[]>;\n  readonly recordEditorGuid$: Observable<string>;\n  readonly editingMode$ = this.sandbox.getComponentPropertyValue('editingMode');\n  readonly label$ = this.sandbox.getComponentPropertyValue('label');\n\n  readonly displayedFields$: Observable<IAssociatedRecordField[]>;\n\n  static getInitialProperties(initialProperties: IAssociationDesignProperties): IAssociationDesignProperties {\n    return {\n      ...RX_AVAILABLE_ON_DEVICES_DEFAULT_VALUE,\n      ...initialProperties\n    };\n  }\n\n  constructor(protected injector: Injector, public sandbox: IViewComponentDesignSandbox<IAssociationDesignProperties>) {\n    super(injector, sandbox);\n\n    // TODO: performance\n    this.updateInspector$\n      .pipe(distinctUntilChanged(isEqual), takeUntil(this.sandbox.destroyed$))\n      .subscribe((inspector) => {\n        this.sandbox.updateInspectorConfig(inspector);\n      });\n\n    const recordDefinitionName$ = sandbox.getComponentPropertyValue('recordDefinitionName');\n\n    const recordDefinitionFields$ = recordDefinitionName$.pipe(\n      switchMap((recordDefinitionName) =>\n        recordDefinitionName ? this.updateRecordDefinitionFields(recordDefinitionName) : of([])\n      )\n    );\n\n    this.displayedFields$ = combineLatest([\n      this.sandbox.getChildComponents(\n        (component) => component.type === RX_ASSOCIATION.componentTypes.associatedRecordField\n      ),\n      recordDefinitionFields$\n    ]).pipe(\n      map(([components, availableFields]: [IAssociatedRecordField[], IFieldDefinition[]]) =>\n        this.associationDesignHelperService.getFieldsInChildComponentsWithNames(components, availableFields)\n      )\n    );\n\n    this.recordEditorGuid$ = this.sandbox.getParentComponentGuid(RxViewComponentType.RecordEditor).pipe(take(1));\n\n    this.otherAssociationRecordEditorComponentGuids$ = this.recordEditorGuid$.pipe(\n      map((guid) => this.sandbox.getComponentModel<RecordEditorDesignModel>(guid)),\n      switchMap((model) =>\n        model.associationComponentGuids$.pipe(map((guids) => guids.filter((guid) => guid !== this.sandbox.guid)))\n      ),\n      shareReplay(1),\n      takeUntil(this.sandbox.destroyed$)\n    );\n\n    this.recordDefinitionNameFromHostRecordEditor$ = this.recordEditorGuid$.pipe(\n      switchMap((recordEditorGuid) => {\n        return this.sandbox.getComponentPropertyValue<'recordDefinitionName', IRecordEditorProperties>(\n          'recordDefinitionName',\n          recordEditorGuid\n        );\n      }),\n      shareReplay(1)\n    );\n\n    this.recordDefinitionNameFromHostRecordEditor$\n      .pipe(\n        switchMap((recordDefinitionRecordEditorName) =>\n          recordDefinitionRecordEditorName\n            ? combineLatest([this.sandbox.componentProperties$, this.associationChildComponentsData$]).pipe(\n                switchMap(([componentProperties, associationChildComponentsData]) => {\n                  const updateParameters = recordDefinitionRecordEditorName\n                    ? this.generateInitialUpdateParameters(componentProperties)\n                    : [];\n\n                  const updateParameters$ = updateParameters.length > 0 ? combineLatest(updateParameters) : of(null);\n\n                  return updateParameters$.pipe(\n                    map(() => ({\n                      componentProperties: { ...associationChildComponentsData, ...componentProperties },\n                      recordDefinitionRecordEditorName\n                    }))\n                  );\n                }),\n                take(1)\n              )\n            : of({\n                componentProperties: null,\n                recordDefinitionRecordEditorName: null\n              })\n        ),\n        withLatestFrom(this.recordEditorGuid$),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(([{ componentProperties, recordDefinitionRecordEditorName }, recordEditorGuid]) => {\n        const initialProperties = this.associationDesignHelperService.getInitialProperties();\n\n        const properties: IAssociationDesignProperties = {\n          ...initialProperties,\n          ...componentProperties,\n          useDefaultRoles: Boolean(componentProperties?.useDefaultRoles === 'true')\n        };\n\n        this.recordEditorGuid = recordEditorGuid;\n        this.sandbox.updateComponentProperties(properties);\n\n        this.updateInspector$.next(\n          this.getInspectorConfig(properties, recordDefinitionRecordEditorName, recordEditorGuid)\n        );\n      });\n\n    const childComponentGuids$ = this.childComponents$.pipe(\n      map((components) => components.map((component) => component.guid))\n    );\n\n    this.sandbox\n      .getComponentPropertyValue('recordDefinitionName')\n      .pipe(skip(1), withLatestFrom(childComponentGuids$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([recordDefinitionName, childComponentGuids]) => {\n        this.sandbox.updateComponentProperties({\n          recordDefinitionName,\n          label: null,\n          associationDefinitionName: null,\n          associatedRecordNodeSide: null,\n          editingMode: RxAssociationEditingMode.Views,\n          viewDefinitionNameForSelect: null,\n          viewDefinitionNameForCreate: null,\n          fieldId: null,\n          useDefaultRoles: false,\n          nodeARole: null,\n          nodeBRole: null,\n          displayedFields: [],\n          filterByAssociation: null,\n          recordId: null\n        });\n\n        this.sandbox.removeComponents(childComponentGuids);\n      });\n\n    this.sandbox\n      .getComponentPropertyValue('recordDefinitionName')\n      .pipe(\n        skip(1),\n        concatMapTo(this.sandbox.componentProperties$),\n        concatMap((props) =>\n          combineLatest([\n            this.updateAssociationDefinitionsOptions(props.recordDefinitionName),\n            this.updateRecordDefinitionFields(props.recordDefinitionName),\n            this.updateAssociationDefinitionsFilterOptions(props.recordDefinitionName),\n            this.updateAssociationNodeSideOptions(props.associationDefinitionName),\n            this.updatePreviousDropdownFieldDefinition(props.recordDefinitionName, props.fieldId)\n          ]).pipe(take(1), mapTo(props))\n        ),\n        withLatestFrom(this.recordDefinitionNameFromHostRecordEditor$, this.recordEditorGuid$),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(([componentProps, recordDefinitionNameFromHostRecordEditor, recordEditorGuid]) => {\n        this.updateInspector$.next(\n          this.getInspectorConfig(componentProps, recordDefinitionNameFromHostRecordEditor, recordEditorGuid)\n        );\n      });\n\n    this.sandbox\n      .getComponentPropertyValue('editingMode')\n      .pipe(skip(1), withLatestFrom(childComponentGuids$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([editingMode, childComponentGuids]) => {\n        this.sandbox.updateComponentProperties({\n          editingMode,\n          viewDefinitionNameForSelect: null,\n          viewDefinitionNameForCreate: null,\n          fieldId: null,\n          useDefaultRoles: false,\n          nodeARole: null,\n          nodeBRole: null,\n          displayedFields: [],\n          filterByAssociation: null,\n          recordId: null\n        });\n\n        this.sandbox.removeComponents(childComponentGuids);\n      });\n\n    this.sandbox.componentProperties$\n      .pipe(\n        skip(1),\n        pairwise(),\n        withLatestFrom(this.childComponents$),\n        switchMap(\n          ([[previousProperties, properties], children]: [\n            [IAssociationDesignProperties, IAssociationDesignProperties],\n            IAssociationChild[]\n          ]) => {\n            const updatedProperties = { ...properties };\n            const updatedParametersStreams = [];\n\n            switch (true) {\n              case previousProperties.viewDefinitionNameForSelect !== properties.viewDefinitionNameForSelect:\n                this.updateChildActionButtonDefinition(\n                  properties,\n                  children as IAssociatedRecordField[],\n                  RX_ASSOCIATION.actions.associate\n                );\n\n                break;\n\n              case previousProperties.viewDefinitionNameForCreate !== properties.viewDefinitionNameForCreate:\n                this.updateChildActionButtonDefinition(\n                  properties,\n                  children as IAssociatedRecordField[],\n                  RX_ASSOCIATION.actions.createAndAssociate\n                );\n\n                break;\n\n              case previousProperties.filterByAssociation !== properties.filterByAssociation:\n              case previousProperties.recordId !== properties.recordId:\n                const filterComponent = children.find(\n                  (component) => component.type === RX_ASSOCIATION.componentTypes.associationFilter\n                ) as IAssociationFilter;\n\n                this.updateAssociationFilterComponent(properties, filterComponent);\n\n                break;\n\n              case !isEqual(previousProperties.displayedFields, properties.displayedFields):\n                this.updateComponentRecordFields(properties.displayedFields, children as IAssociatedRecordField[]);\n\n                break;\n\n              case previousProperties.associationDefinitionName !== properties.associationDefinitionName:\n                updatedProperties.editingMode = RxAssociationEditingMode.Views;\n                this.associationDesignHelperService.cleanEditingModeDependentData(updatedProperties);\n\n                if (properties.associationDefinitionName) {\n                  updatedParametersStreams.push(\n                    this.rxAssociationDefinitionCacheService\n                      .getAssociationDefinition(properties.associationDefinitionName)\n                      .pipe(\n                        map((associationDefinition) => {\n                          updatedProperties.associatedRecordNodeSide =\n                            associationDefinition.nodeAId === properties.recordDefinitionName\n                              ? RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value\n                              : RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value;\n\n                          this.setIsManyToManyAssociation(associationDefinition);\n                          this.sandbox.updateComponentProperties(updatedProperties);\n\n                          if (this.isManyToManyAssociation) {\n                            this.associationDesignHelperService.resetRolesData(updatedProperties);\n                          }\n                        })\n                      )\n                  );\n                } else {\n                  this.isManyToManyAssociation = false;\n                }\n\n                updatedParametersStreams.push(\n                  this.updateAssociationNodeSideOptions(properties.associationDefinitionName)\n                );\n\n                break;\n\n              case previousProperties.associatedRecordNodeSide !== properties.associatedRecordNodeSide:\n                updatedProperties.editingMode = RxAssociationEditingMode.Views;\n                this.associationDesignHelperService.cleanEditingModeDependentData(updatedProperties);\n\n                break;\n\n              case previousProperties.useDefaultRoles !== properties.useDefaultRoles:\n                if (properties.useDefaultRoles === true) {\n                  updatedProperties.nodeARole = null;\n                  updatedProperties.nodeBRole = null;\n                }\n\n                break;\n\n              case previousProperties.nodeARole !== properties.nodeARole ||\n                previousProperties.nodeBRole !== properties.nodeBRole:\n                if (isUndefined(properties.useDefaultRoles)) {\n                  defaults(updatedProperties, {\n                    nodeARole: null,\n                    nodeBRole: null,\n                    useDefaultRoles: false\n                  });\n                } else {\n                  updatedProperties.useDefaultRoles = false;\n                }\n\n                break;\n            }\n\n            const updateParameters$ =\n              updatedParametersStreams.length > 0 ? combineLatest(updatedParametersStreams) : of(null);\n\n            return updateParameters$.pipe(\n              map((parameters) => ({ parameters, componentProperties: updatedProperties })),\n              withLatestFrom(this.recordDefinitionNameFromHostRecordEditor$, this.recordEditorGuid$)\n            );\n          }\n        ),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(\n        ([{ parameters, componentProperties }, recordDefinitionNameFromHostRecordEditor, recordEditorGuid]) => {\n          const initialProperties = this.associationDesignHelperService.getInitialProperties();\n\n          this.recordEditorGuid = recordEditorGuid;\n\n          this.updateInspector$.next(\n            this.getInspectorConfig(\n              { ...initialProperties, ...componentProperties },\n              recordDefinitionNameFromHostRecordEditor,\n              recordEditorGuid\n            )\n          );\n        }\n      );\n\n    this.sandbox\n      .getComponentPropertyValue('fieldId')\n      .pipe(\n        // transform initial value to null if it is undefined\n        map((value) => (isNil(value) ? null : value)),\n        distinctUntilChanged(),\n        pairwise()\n      )\n      .pipe(\n        withLatestFrom(this.sandbox.componentProperties$),\n        // Check if editing mode is dropdown to prevent label reset after change fieldId to null.\n        filter(([fieldIds, props]) => Boolean(props.editingMode === RxAssociationEditingMode.Dropdown)),\n        switchMap(([[prevFieldId, fieldId], props]) =>\n          this.associationDesignHelperService.getRecordDefinition(props.recordDefinitionName).pipe(\n            map((recordDefinition) => {\n              const prevFieldDefinitionName = recordDefinition.fieldDefinitions.find(\n                (field) => field.id === Number(prevFieldId)\n              )?.name;\n\n              const currentFieldDefinitionName = recordDefinition.fieldDefinitions.find(\n                (field) => field.id === Number(fieldId)\n              )?.name;\n\n              // If the label is changed by user it must not be updated after fieldId change.\n              return !props.label || prevFieldDefinitionName === props.label ? currentFieldDefinitionName : props.label;\n            })\n          )\n        ),\n        distinctUntilChanged(),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((label) => {\n        this.sandbox.updateComponentProperties({ label });\n      });\n\n    combineLatest([\n      this.sandbox.componentProperties$,\n      this.associationChildComponentsData$.pipe(distinctUntilChanged(isEqual))\n    ])\n      .pipe(\n        switchMap(([componentProperties, childComponents]) => {\n          const association$: Observable<IAssociationDefinition> = componentProperties.associationDefinitionName\n            ? this.rxAssociationDefinitionCacheService.getAssociationDefinition(\n                componentProperties.associationDefinitionName\n              )\n            : of({});\n\n          return association$.pipe(\n            map((associationDefinition) => {\n              return this.associationDesignHelperService.validate(\n                this.sandbox,\n                componentProperties,\n                associationDefinition,\n                childComponents\n              );\n            })\n          );\n        }),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((validationIssues) => {\n        this.sandbox.setValidationIssues(validationIssues);\n      });\n\n    combineLatest([\n      this.label$,\n      this.sandbox\n        .getComponentPropertyValue('associationDefinitionName')\n        .pipe(\n          map((associationDefinitionName) =>\n            associationDefinitionName ? this.rxDefinitionNameService.getDisplayName(associationDefinitionName) : null\n          )\n        )\n    ])\n      .pipe(\n        map(([label, definitionDisplayName]) => {\n          let componentName = this.sandbox.descriptor.name;\n\n          if (definitionDisplayName && label) {\n            componentName += ` (${definitionDisplayName}: ${label})`;\n          } else if (definitionDisplayName || label) {\n            componentName += ` (${definitionDisplayName || label})`;\n          }\n\n          return componentName;\n        }),\n        distinctUntilChanged(),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe((componentName) => {\n        this.sandbox.setSettablePropertiesDataDictionary(componentName, [\n          {\n            label: 'Disabled',\n            expression: this.getExpressionForProperty('disabled')\n          },\n          {\n            label: 'Hidden',\n            expression: this.getExpressionForProperty('hidden')\n          }\n        ]);\n      });\n  }\n\n  getPropertiesByName(properties: IAssociationDesignProperties): IAssociationProperties {\n    return omit(\n      {\n        ...properties,\n        recordInstance: this.recordEditorGuid\n          ? `\\${view.components.${this.recordEditorGuid}.recordInstance}`\n          : properties.recordInstance,\n        recordDefinition: this.recordEditorGuid\n          ? `\\${view.components.${this.recordEditorGuid}.recordDefinition}`\n          : properties.recordDefinition\n      },\n      [\n        'displayedFields',\n        'filterByAssociation',\n        'recordId',\n        'viewDefinitionNameForSelect',\n        'viewDefinitionNameForCreate'\n      ]\n    ) as IAssociationProperties;\n  }\n\n  private updateAssociationFilterComponent(\n    componentProperties: IAssociationDesignProperties,\n    filterComponent: IAssociationFilter\n  ): void {\n    if (filterComponent) {\n      this.sandbox.removeComponents([filterComponent.guid]);\n    }\n\n    if (componentProperties.filterByAssociation) {\n      const filterNew = {\n        guid: this.rxGuidService.generate(),\n        type: RX_ASSOCIATION.componentTypes.associationFilter,\n        propertiesByName: {\n          associationDefinitionName: componentProperties.filterByAssociation,\n          recordInstanceId: componentProperties.recordId\n        }\n      };\n\n      this.sandbox.addComponent([filterNew]);\n    }\n  }\n\n  private updateChildActionButtonDefinition(\n    properties: IAssociationDesignProperties,\n    children: IAssociatedRecordField[],\n    action: string\n  ): void {\n    const actionButtonComponent = children.find(\n      (component) => component.type === RxViewComponentType.ActionButton && component.data['action'] === action\n    );\n\n    const viewDefinitionNameToUpdate =\n      action === RX_ASSOCIATION.actions.createAndAssociate\n        ? properties.viewDefinitionNameForCreate\n        : properties.viewDefinitionNameForSelect;\n\n    if (actionButtonComponent) {\n      this.sandbox.removeComponents([actionButtonComponent.guid]);\n    }\n\n    if (viewDefinitionNameToUpdate) {\n      const button = this.associationDesignHelperService.getActionButtonDefinition(\n        properties,\n        action,\n        this.sandbox['guid']\n      );\n\n      this.sandbox.addComponent([button]);\n    }\n  }\n\n  private updateComponentRecordFields(\n    displayedFields: IAssociatedRecordField[],\n    children: IAssociatedRecordField[]\n  ): void {\n    const guids = children\n      .filter((component) => component.type === RX_ASSOCIATION.componentTypes.associatedRecordField)\n      .map((component) => component.guid);\n\n    const recordFields: ViewComponentAddComponentPayload[] = displayedFields.map((field) => ({\n      type: RX_ASSOCIATION.componentTypes.associatedRecordField,\n      guid: this.rxGuidService.generate(),\n      propertiesByName: {\n        fieldId: field.data.fieldId,\n        label: field.data.label || '',\n        index: field.data.index\n      }\n    }));\n\n    if (guids.length > 0) {\n      this.sandbox.removeComponents(guids);\n    }\n\n    this.sandbox.addComponent(recordFields);\n  }\n\n  private getChildComponentsData(): Observable<IAssociationChildComponents> {\n    return this.childComponents$.pipe(\n      map((components: IViewComponentDesignData[]) => {\n        const associationChildComponentsData: IAssociationChildComponents = {};\n\n        const associationFilters = components.filter(\n          (component) => component.type === RX_ASSOCIATION.componentTypes.associationFilter\n        );\n\n        associationChildComponentsData.displayedFields = components.filter(\n          (definition) => definition.type === RX_ASSOCIATION.componentTypes.associatedRecordField\n        ) as IAssociatedRecordField[];\n\n        if (associationFilters.length > 0) {\n          associationChildComponentsData.recordId = associationFilters[0].data?.recordInstanceId;\n          associationChildComponentsData.filterByAssociation = associationFilters[0].data?.associationDefinitionName;\n        }\n\n        const createAndAssociateView = this.getViewDefinitionNameForAssociation(\n          components,\n          RX_ASSOCIATION.actions.createAndAssociate\n        );\n\n        if (createAndAssociateView) {\n          associationChildComponentsData.viewDefinitionNameForCreate = createAndAssociateView;\n        }\n\n        const associateView = this.getViewDefinitionNameForAssociation(components, RX_ASSOCIATION.actions.associate);\n\n        if (associateView) {\n          associationChildComponentsData.viewDefinitionNameForSelect = associateView;\n        }\n\n        return associationChildComponentsData;\n      })\n    );\n  }\n\n  private generateInitialUpdateParameters(\n    componentProperties: IAssociationProperties\n  ): Observable<IFieldDefinition[] | IFieldDefinition | IAssociationDefinition[]>[] {\n    const updateParameters = [];\n\n    if (componentProperties.recordDefinitionName) {\n      updateParameters.push(this.updateRecordDefinitionFields(componentProperties.recordDefinitionName));\n\n      if (componentProperties.fieldId) {\n        updateParameters.push(\n          this.updatePreviousDropdownFieldDefinition(\n            componentProperties.recordDefinitionName,\n            componentProperties.fieldId\n          )\n        );\n      }\n\n      updateParameters.push(this.updateAssociationDefinitionsOptions(componentProperties.recordDefinitionName));\n    }\n\n    if (componentProperties.associationDefinitionName) {\n      updateParameters.push(this.updateAssociationDefinitionsFilterOptions(componentProperties.recordDefinitionName));\n\n      updateParameters.push(\n        this.rxAssociationDefinitionCacheService\n          .getAssociationDefinition(componentProperties.associationDefinitionName)\n          .pipe(map((associationDefinition) => this.setIsManyToManyAssociation(associationDefinition)))\n      );\n    }\n\n    if (componentProperties.associatedRecordNodeSide) {\n      updateParameters.push(this.updateAssociationNodeSideOptions(componentProperties.associationDefinitionName));\n    }\n\n    return updateParameters;\n  }\n\n  private updatePreviousDropdownFieldDefinition(\n    recordDefinitionToAssociateName: string,\n    fieldId: string\n  ): Observable<IFieldDefinition> {\n    return this.updateRecordDefinitionFields(recordDefinitionToAssociateName).pipe(\n      map((fields) => {\n        return (this.previousDropdownFieldDefinition = fields.find((field) => field.id === Number(fieldId)));\n      })\n    );\n  }\n\n  private setIsManyToManyAssociation(associationDefinition: IAssociationDefinition): void {\n    if (associationDefinition) {\n      this.isManyToManyAssociation =\n        associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value;\n    }\n  }\n\n  private getViewDefinitionNameForAssociation(components: IViewComponentDesignData[], action: string): string | null {\n    const actionButton = components.find((definition) => definition.data?.action === action);\n\n    return actionButton && actionButton.children ? this.getViewDefinitionNameFromActionButton(actionButton) : null;\n  }\n\n  private getViewDefinitionNameFromActionButton(actionButton: IViewComponentDesignData): string | null {\n    const actionComponent = actionButton.children.find((children) => children.type === RxViewComponentType.Action);\n\n    return get(actionComponent, 'data.viewDefinitionName', null);\n  }\n\n  private updateRecordDefinitionFields(recordDefinitionToAssociateName: string): Observable<IFieldDefinition[]> {\n    return (\n      recordDefinitionToAssociateName\n        ? this.associationDesignHelperService\n            .getRecordDefinition(recordDefinitionToAssociateName)\n            .pipe(map((recordDefinition) => recordDefinition.fieldDefinitions))\n        : of([])\n    ).pipe(tap((fieldDefinitions) => (this.recordDefinitionFields = fieldDefinitions)));\n  }\n\n  private updateAssociationNodeSideOptions(associationDefinitionName: string): Observable<IAssociationDefinition[]> {\n    const associatedRecordNodeSideOptions$ = associationDefinitionName\n      ? this.rxAssociationDefinitionCacheService\n          .getAssociationDefinition(associationDefinitionName)\n          .pipe(\n            map((associationDefinition) =>\n              this.associationDesignHelperService.getNodeSideOptions(associationDefinition)\n            )\n          )\n      : of([]);\n\n    return associatedRecordNodeSideOptions$.pipe(\n      tap((associatedRecordNodeSideOptions) => (this.associatedRecordNodeSide = associatedRecordNodeSideOptions))\n    );\n  }\n\n  private updateAssociationDefinitionsOptions(\n    recordDefinitionToAssociateName: string\n  ): Observable<IAssociationDefinition[]> {\n    return this.recordDefinitionNameFromHostRecordEditor$.pipe(\n      switchMap((associatedRecordName) =>\n        recordDefinitionToAssociateName && associatedRecordName\n          ? this.associationDesignHelperService.getAvailableAssociations(\n              recordDefinitionToAssociateName,\n              associatedRecordName\n            )\n          : of([])\n      ),\n      tap((associationDefinitionOptions) => (this.associationDefinitions = associationDefinitionOptions))\n    );\n  }\n\n  private updateAssociationDefinitionsFilterOptions(\n    recordDefinitionToAssociateName: string\n  ): Observable<IAssociationDefinition[]> {\n    return this.otherAssociationRecordEditorComponentGuids$.pipe(\n      mergeMap((guids) =>\n        guids.length\n          ? combineLatest(\n              guids.map((guid) =>\n                this.sandbox.getComponentPropertyValue<'recordDefinitionName', IAssociationDesignProperties>(\n                  'recordDefinitionName',\n                  guid\n                )\n              )\n            ).pipe(take(1))\n          : of([])\n      ),\n      switchMap((associatedRecordNames) =>\n        associatedRecordNames.length && recordDefinitionToAssociateName\n          ? merge(\n              ...associatedRecordNames.map((associatedRecordName) =>\n                this.associationDesignHelperService.getAvailableAssociations(\n                  recordDefinitionToAssociateName,\n                  associatedRecordName\n                )\n              )\n            )\n          : of([])\n      ),\n      map((associationDefinitionFilters) => (this.associationDefinitionFilters = associationDefinitionFilters))\n    );\n  }\n\n  private getInspectorConfig(\n    properties: IAssociationDesignProperties,\n    recordDefinitionNameFromHostRecordEditor: string,\n    recordEditorGuid: string\n  ): IViewDesignerInspectorConfig {\n    const inspectorConfig: IViewDesignerInspectorConfig = {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: []\n        }\n      ]\n    };\n\n    if (recordDefinitionNameFromHostRecordEditor) {\n      const generalSectionControls = inspectorConfig.inspectorSectionConfigs[0].controls;\n\n      generalSectionControls.push({\n        name: 'recordDefinitionName',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label: 'Record definition to associate',\n          definitionType: RxDefinitionPickerType.StandardDataRecord,\n          required: true\n        }\n      });\n\n      if (properties.recordDefinitionName) {\n        generalSectionControls.push({\n          name: 'associationDefinitionName',\n          component: SelectFormControlComponent,\n          options: {\n            label: 'Association to use',\n            options: this.associationDefinitions.map((associationDefinition) => ({\n              id: associationDefinition.name,\n              name: this.rxDefinitionNameService.getDisplayName(associationDefinition.name)\n            })),\n            emptyOption: true,\n            required: true\n          } as ISelectFormControlOptions\n        });\n      }\n\n      if (properties.recordDefinitionName && this.associatedRecordNodeSide.length > 0) {\n        generalSectionControls.push({\n          name: 'associatedRecordNodeSide',\n          component: SelectFormControlComponent,\n          options: {\n            label: 'Associated record node Side',\n            options: this.associatedRecordNodeSide,\n            required: true\n          } as ISelectFormControlOptions\n        });\n      }\n\n      if (\n        properties.recordDefinitionName &&\n        this.associationDesignHelperService.isCardinalityOne(properties, this.associationDefinitions)\n      ) {\n        generalSectionControls.push({\n          name: 'editingMode',\n          component: SelectFormControlComponent,\n          options: {\n            label: 'Association editing mode',\n            options: _map(RxAssociationEditingMode, (id, name) => ({ id, name })),\n            required: true\n          } as ISelectFormControlOptions\n        });\n      }\n\n      // View Mode\n      if (!properties.editingMode || properties.editingMode === RxAssociationEditingMode.Views) {\n        generalSectionControls.push(...this.associationDesignHelperService.getViewModeInspectorControls());\n\n        if (this.isManyToManyAssociation && properties.associationDefinitionName) {\n          generalSectionControls.push(this.associationDesignHelperService.getUseDefaultRolesControl());\n\n          if (!properties.useDefaultRoles) {\n            generalSectionControls.push(...this.associationDesignHelperService.getNodeABRoleControls());\n          }\n        }\n\n        if (properties.recordDefinitionName) {\n          generalSectionControls.push(\n            this.associationDesignHelperService.getDisplayedFieldsControl(this.recordDefinitionFields)\n          );\n        }\n      }\n\n      // Dropdown Mode\n      if (properties.editingMode === RxAssociationEditingMode.Dropdown) {\n        generalSectionControls.push(\n          ...this.associationDesignHelperService.getDropdownModeInspectorControls(\n            this.recordDefinitionFields,\n            this.associationDefinitionFilters\n          )\n        );\n\n        if (properties.filterByAssociation) {\n          generalSectionControls.push(this.associationDesignHelperService.getRecordIdControl());\n        }\n      }\n\n      generalSectionControls.push(\n        ...this.associationDesignHelperService.getInitialInspectorControls(this.expressionConfigurator)\n      );\n    } else {\n      inspectorConfig.inspectorSectionConfigs[0].controls = [\n        {\n          component: ValidationFormControlComponent,\n          options: {\n            text: 'You must select a Record definition before editing field component.',\n            componentGuid: recordEditorGuid,\n            propertyName: 'recordDefinitionName'\n          } as IValidationFormControlOptions\n        }\n      ];\n    }\n\n    return inspectorConfig;\n  }\n}\n"]}