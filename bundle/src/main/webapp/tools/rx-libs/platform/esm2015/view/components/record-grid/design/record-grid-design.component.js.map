{"version":3,"file":"record-grid-design.component.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/record-grid/design/record-grid-design.component.ts","../../../../../../../../libs/platform/view/components/record-grid/design/record-grid-design.component.html"],"names":[],"mappings":"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","sourcesContent":["import { ChangeDetectionStrategy, Component, Input, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport { IViewComponentDropData } from '@helix/platform/view/designer';\nimport { isEqual, isObject, sortBy } from 'lodash';\nimport { SortEvent } from 'primeng/api';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay, take } from 'rxjs/operators';\nimport { ActionButtonStyle, IActionButtonProperties } from '../../action-button/action-button.types';\nimport { RxRecordGridUtilsService } from '../common/services/record-grid-utils.service';\nimport { RxRecordGridConfigUtilsService } from '../runtime/services/record-grid-config-utils.service';\nimport { IAdaptTableColumnConfig } from '../runtime/types/record-grid-column.types';\nimport { ColumnSortDirection, IRecordGridSortableObject } from '../common/types/record-grid.types';\nimport { IRecordGridSortEditorModel } from './editors/record-grid-sort-editor-control';\nimport { RecordGridDesignModel } from './record-grid-design.model';\nimport { IRecordGridDesignAdaptTableConfig } from './record-grid-design.types';\n\n@Component({\n  selector: 'rx-record-grid-design',\n  templateUrl: './record-grid-design.component.html',\n  styleUrls: ['./record-grid-design.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RecordGridDesignComponent implements OnInit {\n  @Input()\n  model: RecordGridDesignModel;\n\n  @ViewChild('filterTemplate', { static: true })\n  filterTemplate: TemplateRef<any>;\n\n  @ViewChild('visibleColumnsMenuTemplate', { static: true })\n  visibleColumnsMenuTemplate: TemplateRef<any>;\n\n  @Input()\n  isReadOnly: boolean;\n\n  adaptTableConfig$: Observable<IRecordGridDesignAdaptTableConfig>;\n  hasRecordDefinitionName$: Observable<boolean>;\n\n  constructor(\n    private rxRecordGridConfigUtilsService: RxRecordGridConfigUtilsService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService\n  ) {}\n\n  ngOnInit(): void {\n    this.adaptTableConfig$ = this.model.columns$.pipe(\n      map((columns) => {\n        const gridColumns = sortBy(columns, (column) => column.index);\n        const initialSortGridColumn = gridColumns.find((gridColumn) => isObject(gridColumn.sortable));\n\n        let sortMeta = {\n          field: null,\n          order: null\n        };\n\n        if (initialSortGridColumn) {\n          const gridSortableObject = initialSortGridColumn.sortable as IRecordGridSortableObject;\n\n          sortMeta = {\n            field: String(initialSortGridColumn.fieldId),\n            order: this.rxRecordGridConfigUtilsService.getColumnSortOrder(gridSortableObject.direction)\n          };\n        }\n\n        return {\n          columns: gridColumns.map(\n            (gridColumn): IAdaptTableColumnConfig => ({\n              field: gridColumn.fieldId,\n              header: gridColumn.title,\n              sortable: Boolean(gridColumn.sortable),\n              hidden: !gridColumn.visible,\n              testId: this.rxRecordGridUtilsService.getTestIdForGridColumn(gridColumn.fieldId)\n            })\n          ),\n          sortMeta,\n          toolbarConfig: {\n            counter: false,\n            quickFilter: true,\n            filter: true,\n            filterTemplate: this.filterTemplate,\n            filterResults: false,\n            visibleColumnsMenu: true,\n            visibleColumnsMenuTemplate: this.visibleColumnsMenuTemplate,\n            quickFilterTriggerable: true\n          }\n        };\n      }),\n      shareReplay(1)\n    );\n\n    this.hasRecordDefinitionName$ = this.model.recordDefinition$.pipe(map(Boolean), shareReplay(1));\n  }\n\n  onSort(event: SortEvent): void {\n    this.adaptTableConfig$.pipe(take(1)).subscribe((adaptTableConfig) => {\n      if (!isEqual(event, adaptTableConfig.sortMeta)) {\n        let initialSortColumn: IRecordGridSortEditorModel;\n\n        const column = this.model.currentGridDesignProperties.columns.find(\n          (gridColumn) => gridColumn.fieldId === event.field\n        );\n\n        if (isObject(column.sortable)) {\n          if (column.sortable.direction === ColumnSortDirection.Desc) {\n            initialSortColumn = null;\n          } else {\n            initialSortColumn = { fieldId: column.fieldId, direction: ColumnSortDirection.Desc };\n          }\n        } else {\n          initialSortColumn = { fieldId: column.fieldId, direction: ColumnSortDirection.Asc };\n        }\n\n        this.model.componentPropertiesChangeFromCanvas$.next({\n          ...this.model.currentGridDesignProperties,\n          initialSortColumn\n        });\n      }\n    });\n  }\n\n  onBeforeViewComponentDrop(data: IViewComponentDropData): void {\n    if (\n      data.draggedViewComponentDescriptor.type === RxViewComponentType.ActionButton &&\n      !data.draggedViewComponentGuid\n    ) {\n      data.initialPropertiesByName = {\n        ...data.initialPropertiesByName,\n        style: ActionButtonStyle.Tertiary\n      } as IActionButtonProperties;\n    }\n  }\n}\n","<div class=\"rx-record-grid-design\" [class.border]=\"!(hasRecordDefinitionName$ | async)\">\n  <adapt-empty-state\n    *ngIf=\"!(hasRecordDefinitionName$ | async); else gridTemplate\"\n    type=\"objects\"\n    label=\"Select a record definition and edit grid columns in the Properties panel.\"\n  ></adapt-empty-state>\n\n  <ng-template #gridTemplate>\n    <rx-canvas-outlet\n      [dropListOrientation]=\"'horizontal'\"\n      class=\"rx-record-grid-design__action-buttons-canvas\"\n      (beforeViewComponentDrop)=\"onBeforeViewComponentDrop($event)\"\n      [dropPredicate]=\"model.actionButtonDropPredicate\"\n    ></rx-canvas-outlet>\n\n    <adapt-table\n      #adaptTable\n      class=\"rx-record-grid-design__table\"\n      [columns]=\"(adaptTableConfig$ | async).columns\"\n      [sortable]=\"!isReadOnly\"\n      [scrollable]=\"true\"\n      [scrollHeight]=\"'80px'\"\n      [rowExpandMode]=\"\"\n      [sortMode]=\"'single'\"\n      [toolbarConfig]=\"(adaptTableConfig$ | async).toolbarConfig\"\n      [filterable]=\"false\"\n      [sortField]=\"(adaptTableConfig$ | async).sortMeta.field\"\n      [sortOrder]=\"(adaptTableConfig$ | async).sortMeta.order\"\n      [bordered]=\"true\"\n      [totalRecords]=\"0\"\n      (onSort)=\"onSort($event)\"\n      [hasEmptyState]=\"false\"\n      [dontEmitLazyLoadOnInputChange]=\"false\"\n    ></adapt-table>\n  </ng-template>\n</div>\n\n<ng-template #filterTemplate let-context>\n  <span class=\"rx-record-grid-design__toolbar-item btn-link d-icon-refresh grid-toolbar-icon mx-2 p-1\"></span>\n  <div class=\"btn-link px-0 d-icon-left-filter d-icon-right-triangle_down\" *ngIf=\"model.enableFiltering$ | async\">\n    Filter\n  </div>\n</ng-template>\n\n<ng-template #visibleColumnsMenuTemplate></ng-template>\n"]}