{"version":3,"file":"expression-editor-plugin.service.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/rich-text/design/expression-editor-plugin.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;;AAK3C,MAAM,OAAO,+BAA+B;IAC1C;QACE,MAAM,EAAE,GAAG,IAAI,CAAC;QAEhB,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE;YACxC,IAAI,CAAC,MAAM;gBACT,MAAM,CAAC,UAAU,CAAC,kBAAkB,EAAE;oBACpC,IAAI;wBACF,MAAM,CAAC,IAAI,CAAC,sBAAsB,EAAE,IAAI,CAAC,CAAC;wBAE1C,OAAO,IAAI,CAAC;oBACd,CAAC;iBACF,CAAC,CAAC;gBAEH,MAAM,CAAC,EAAE,CACP,aAAa,EACb,CAAC,GAAG,EAAE,EAAE;oBACN,MAAM,OAAO,GAAG,EAAE,CAAC,4BAA4B,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAElE,IAAI,OAAO,EAAE;wBACX,MAAM,CAAC,IAAI,CAAC,sBAAsB,EAAE,OAAO,CAAC,CAAC;qBAC9C;gBACH,CAAC,EACD,IAAI,EACJ,IAAI,EACJ,CAAC,CACF,CAAC;gBAEF,MAAM,CAAC,EAAE,CAAC,SAAS,CAAC,kBAAkB,EAAE;oBACtC,KAAK,EAAE,mBAAmB;oBAC1B,OAAO,EAAE,kBAAkB;oBAC3B,OAAO,EAAE,EAAE;oBACX,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,aAAa;iBACpE,CAAC,CAAC;YACL,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IAEO,4BAA4B,CAAC,OAA6B;QAChE,IAAI,OAAO,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC,YAAY,CAAC,eAAe,CAAC,EAAE;YAC/D,OAAO,OAAO,CAAC;SAChB;aAAM;YACL,MAAM,aAAa,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;YAE1C,IAAI,aAAa,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,aAAa,CAAC,YAAY,CAAC,eAAe,CAAC,EAAE;gBAC3E,OAAO,aAAa,CAAC;aACtB;SACF;IACH,CAAC;IAEO,cAAc,CAAC,MAAuB;QAC5C,MAAM,SAAS,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC;QAExC,IAAI,SAAS,EAAE;YACb,SAAS,CAAC,eAAe,EAAE,CAAC;SAC7B;IACH,CAAC;;4HAxDU,+BAA+B;gIAA/B,+BAA+B,cAF9B,MAAM;2FAEP,+BAA+B;kBAH3C,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxExpressionEditorPluginService {\n  constructor() {\n    const me = this;\n\n    CKEDITOR.plugins.add('expression-editor', {\n      init(editor) {\n        editor.addCommand('insertExpression', {\n          exec() {\n            editor.fire('openExpressionEditor', null);\n\n            return true;\n          }\n        });\n\n        editor.on(\n          'doubleclick',\n          (evt) => {\n            const element = me.getSelectedExpressionElement(evt.data.element);\n\n            if (element) {\n              editor.fire('openExpressionEditor', element);\n            }\n          },\n          null,\n          null,\n          0\n        );\n\n        editor.ui.addButton('ExpressionEditor', {\n          label: 'Insert Expression',\n          command: 'insertExpression',\n          toolbar: '',\n          icon: CKEDITOR.plugins.getPath('expression-editor') + 'toolbar.png'\n        });\n      }\n    });\n  }\n\n  private getSelectedExpressionElement(element: CKEDITOR.dom.element): CKEDITOR.dom.element | void {\n    if (element.is('span') && element.hasAttribute('rx-expression')) {\n      return element;\n    } else {\n      const parentElement = element.getParent();\n\n      if (parentElement.is('span') && parentElement.hasAttribute('rx-expression')) {\n        return parentElement;\n      }\n    }\n  }\n\n  private clearSelection(editor: CKEDITOR.editor): void {\n    const selection = editor.getSelection();\n\n    if (selection) {\n      selection.removeAllRanges();\n    }\n  }\n}\n"]}