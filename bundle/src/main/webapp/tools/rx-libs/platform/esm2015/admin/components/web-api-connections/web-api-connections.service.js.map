{"version":3,"file":"web-api-connections.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/admin/components/web-api-connections/web-api-connections.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { EMPTY, forkJoin, Observable } from 'rxjs';\nimport { IAuthTypeDetails, IWebApiConnection } from './web-api-connections.interfaces';\nimport { castArray, cloneDeep } from 'lodash';\nimport { IRxRecordGridApi, RxViewActionUtilsService } from '@helix/platform/view/api';\nimport { RX_WEB_API_CONNECTIONS } from './web-api-connections.constant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxWebAPIConnectionsService {\n  private path = '/api/rx/application/webapi/connection';\n\n  constructor(\n    private httpClient: HttpClient,\n    private injector: Injector,\n    private rxViewActionUtilsService: RxViewActionUtilsService\n  ) {}\n\n  private getAuthTypeDetails(webApiConnection: IWebApiConnection): IAuthTypeDetails {\n    const authTypeDetails: IAuthTypeDetails = cloneDeep(webApiConnection.authTypeDetails);\n\n    if (authTypeDetails.credentials === RX_WEB_API_CONNECTIONS.passwordMask) {\n      authTypeDetails.credentials = null;\n    }\n\n    delete authTypeDetails.grantType;\n\n    return authTypeDetails;\n  }\n\n  save(webApiConnection: IWebApiConnection, id: string): Observable<any> {\n    return this.httpClient.put(this.getUrl(id), this.getWebApiConnectionToSave(webApiConnection));\n  }\n\n  create(webApiConnection: IWebApiConnection): Observable<any> {\n    return this.httpClient.post(this.path, this.getWebApiConnectionToSave(webApiConnection));\n  }\n\n  private getWebApiConnectionToSave(webApiConnection: IWebApiConnection): IWebApiConnection {\n    return {\n      authTypeCode: webApiConnection.authTypeCode[0].id,\n      authTypeDetails: this.getAuthTypeDetails(webApiConnection),\n      hostname: webApiConnection.hostname,\n      name: webApiConnection.name,\n      port: webApiConnection.port,\n      secure: webApiConnection.secure[0].id\n    };\n  }\n\n  private getUrl(id: string): string {\n    return `${this.path}/${encodeURIComponent(id)}`;\n  }\n\n  private delete(id: string): Observable<any> {\n    return this.httpClient.delete(this.getUrl(id));\n  }\n\n  deleteRecords(recordsApi: IRxRecordGridApi): Observable<any> {\n    const records = castArray(recordsApi.getSelectedRows());\n    const recordIds = this.rxViewActionUtilsService.extractRecordIds(records);\n\n    if (recordIds.length) {\n      const deleteObservables = recordIds.map((recordId) => this.delete(recordId));\n\n      return forkJoin(deleteObservables);\n    }\n\n    return EMPTY;\n  }\n}\n"]}