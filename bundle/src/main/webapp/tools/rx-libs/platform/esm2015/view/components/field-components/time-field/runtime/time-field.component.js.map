{"version":3,"file":"time-field.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/field-components/time-field/runtime/time-field.component.ts","../../../../../../../../../libs/platform/view/components/field-components/time-field/runtime/time-field.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAC3C,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAEpD,OAAO,MAAM,MAAM,YAAY,CAAC;AAChC,OAAO,EAAE,8BAA8B,EAAE,MAAM,iFAAiF,CAAC;AACjI,OAAO,EAAE,sBAAsB,EAAE,oBAAoB,EAAE,MAAM,uBAAuB,CAAC;AACrF,OAAO,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;;;;;;AAQnD,MAAM,OAAO,kBAAmB,SAAQ,8BAA8B;IAGpE,YAAY,QAAkB,EAAU,QAAkB;QACxD,KAAK,CAAC,QAAQ,CAAC,CAAC;QADsB,aAAQ,GAAR,QAAQ,CAAU;QAF1D,eAAU,GAAG,oBAAoB,CAAC,IAAI,CAAC;IAIvC,CAAC;IAED,eAAe;;QACb,MAAM,YAAY,GAAW,KAAK,CAAC,eAAe,EAAE,CAAC;QAErD,IAAI,CAAC,YAAY,EAAE;YACjB,OAAO,GAAG,CAAC;SACZ;aAAM;YACL,MAAM,iBAAiB,GAAG,MAAM,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC;YAE/D,OAAO,MAAA,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,iBAAiB,EAAE,YAAY,CAAC,mCAAI,GAAG,CAAC;SACxE;IACH,CAAC;IAED,kBAAkB;QAChB,MAAM,WAAW,GAAG,CAAC,OAAwB,EAA2B,EAAE;YACxE,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAEjE,OAAO,OAAO,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBAC7C,CAAC,CAAC,EAAE,gBAAgB,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,UAAU,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE;gBACnE,CAAC,CAAC,IAAI,CAAC;QACX,CAAC,CAAC;QAEF,OAAO,CAAC,WAAW,CAAC,CAAC;IACvB,CAAC;;+GA7BU,kBAAkB;mGAAlB,kBAAkB,wCAFlB,CAAC,EAAE,OAAO,EAAE,sBAAsB,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC,iDCZzE,shBAmBA;2FDLa,kBAAkB;kBAL9B,SAAS;mBAAC;oBACT,QAAQ,EAAE,eAAe;oBACzB,WAAW,EAAE,6BAA6B;oBAC1C,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,sBAAsB,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC;iBACxE","sourcesContent":["import { DatePipe } from '@angular/common';\nimport { Component, Injector } from '@angular/core';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport moment from 'moment-es6';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { AdaptRxDatetimeAdapter, RxDatetimePickerMode } from '@bmc-ux/adapt-angular';\nimport { TimeAdapter } from './time-adapter.class';\nimport { AbstractControl, ValidationErrors, Validator, ValidatorFn } from '@angular/forms';\n\n@Component({\n  selector: 'rx-time-field',\n  templateUrl: './time-field.component.html',\n  providers: [{ provide: AdaptRxDatetimeAdapter, useClass: TimeAdapter }]\n})\nexport class TimeFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent {\n  pickerMode = RxDatetimePickerMode.Time;\n\n  constructor(injector: Injector, private datePipe: DatePipe) {\n    super(injector);\n  }\n\n  getDisplayValue(): string {\n    const displayValue: string = super.getDisplayValue();\n\n    if (!displayValue) {\n      return '-';\n    } else {\n      const readOnlyTimeValue = moment(displayValue, 'LTS').toDate();\n\n      return this.datePipe.transform(readOnlyTimeValue, 'mediumTime') ?? '-';\n    }\n  }\n\n  getFieldValidators(): ValidatorFn[] {\n    const validatorFn = (control: AbstractControl): ValidationErrors | null => {\n      const date = control.value ? moment(control.value, 'LTS') : null;\n\n      return control.value && date && !date.isValid()\n        ? { rxDatetimeFormat: { mode: this.pickerMode, hasSeconds: true } }\n        : null;\n    };\n\n    return [validatorFn];\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-datetime\n    [label]=\"label\"\n    [required]=\"isRequired\"\n    [formControl]=\"formControl\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [mode]=\"pickerMode\"\n    hasSeconds=\"true\"\n  ></adapt-rx-datetime>\n</ng-template>\n"]}