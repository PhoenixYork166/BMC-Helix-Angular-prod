{"version":3,"file":"view-definition-cache.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/api/services/view-definition-cache.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AACpE,OAAO,EAAE,+BAA+B,EAAE,MAAM,qCAAqC,CAAC;AAItF,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AACzD,OAAO,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;;;;AAKjC,MAAM,OAAO,4BAA4B;IAKvC,YACU,uBAAgD,EAChD,6BAA8D;QAD9D,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,kCAA6B,GAA7B,6BAA6B,CAAiC;QANhE,wBAAmB,GAA6C,IAAI,GAAG,EAAE,CAAC;QAC1E,6BAAwB,GAAsC,IAAI,GAAG,EAAE,CAAC;QACxE,cAAS,GAAG,IAAI,GAAG,EAAmB,CAAC;IAK5C,CAAC;IAEJ,sBAAsB,CAAC,QAAgB;QACrC,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YAChD,MAAM,oBAAoB,GAAG,IAAI,CAAC,6BAA6B;iBAC5D,GAAG,CAAC;gBACH,OAAO,EAAE,EAAE,sBAAsB,EAAE,QAAQ,EAAE;gBAC7C,MAAM,EAAE,EAAE,iBAAiB,EAAE,CAAC,MAAM,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE;aAC7D,CAAC;iBACD,IAAI,CACH,KAAK,CAAC,MAAM,CAAC,EACb,GAAG,CAAC,CAAC,oBAAwC,EAAE,EAAE,CAC/C,oBAAoB,CAAC,GAAG,CAAC,CAAC,cAAc,EAAE,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,CAClE,EACD,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;YAEJ,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,QAAQ,EAAE,oBAAoB,CAAC,CAAC;SACnE;QAED,OAAO,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACrD,CAAC;IAED,iBAAiB,CAAC,kBAA0B,EAAE,OAAwB;QACpE,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE;YACrD,MAAM,eAAe,GAAG,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,kBAAkB,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;YAE3G,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC;SACnE;QAED,OAAO,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;IAC1D,CAAC;IAED,gBAAgB,CAAC,gBAAiC;QAChD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAErC,gBAAgB,CAAC,SAAS,CAAC,GAAG,EAAE;YAC9B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;YAExC,IAAI,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;gBAC3B,IAAI,CAAC,UAAU,EAAE,CAAC;aACnB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,UAAU;QAChB,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,CAAC;QACjC,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,CAAC;IACxC,CAAC;;yHAxDU,4BAA4B;6HAA5B,4BAA4B,cAF3B,MAAM;2FAEP,4BAA4B;kBAHxC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { RxViewDefinitionService } from './view-definition.service';\nimport { RxViewDefinitionDataPageService } from './view-definition-data-page.service';\nimport { Observable } from 'rxjs';\nimport { IHttpGetParams } from '@helix/platform/shared/api';\nimport { IViewDefinition } from '../domain/view-definition.interface';\nimport { map, pluck, shareReplay } from 'rxjs/operators';\nimport { isEmpty } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxViewDefinitionCacheService {\n  private viewDefinitionCache: Map<string, Observable<IViewDefinition>> = new Map();\n  private viewDefinitionNamesCache: Map<string, Observable<string[]>> = new Map();\n  private consumers = new Set<Observable<any>>();\n\n  constructor(\n    private rxViewDefinitionService: RxViewDefinitionService,\n    private viewDefinitionDataPageService: RxViewDefinitionDataPageService\n  ) {}\n\n  getViewDefinitionNames(bundleId: string): Observable<string[]> {\n    if (!this.viewDefinitionNamesCache.has(bundleId)) {\n      const viewDefinitionNames$ = this.viewDefinitionDataPageService\n        .get({\n          headers: { 'default-bundle-scope': bundleId },\n          params: { propertySelection: ['name'], viewType: 'REGULAR' }\n        })\n        .pipe(\n          pluck('data'),\n          map((viewDefinitionsNames: { name: string }[]) =>\n            viewDefinitionsNames.map((viewDefinition) => viewDefinition.name)\n          ),\n          shareReplay(1)\n        );\n\n      this.viewDefinitionNamesCache.set(bundleId, viewDefinitionNames$);\n    }\n\n    return this.viewDefinitionNamesCache.get(bundleId);\n  }\n\n  getViewDefinition(viewDefinitionName: string, options?: IHttpGetParams): Observable<IViewDefinition> {\n    if (!this.viewDefinitionCache.has(viewDefinitionName)) {\n      const viewDefinition$ = this.rxViewDefinitionService.get(viewDefinitionName, options).pipe(shareReplay(1));\n\n      this.viewDefinitionCache.set(viewDefinitionName, viewDefinition$);\n    }\n\n    return this.viewDefinitionCache.get(viewDefinitionName);\n  }\n\n  registerConsumer(consumerDestroy$: Observable<any>): void {\n    this.consumers.add(consumerDestroy$);\n\n    consumerDestroy$.subscribe(() => {\n      this.consumers.delete(consumerDestroy$);\n\n      if (isEmpty(this.consumers)) {\n        this.clearCache();\n      }\n    });\n  }\n\n  private clearCache(): void {\n    this.viewDefinitionCache.clear();\n    this.viewDefinitionNamesCache.clear();\n  }\n}\n"]}