{"version":3,"file":"edit-records-data.service.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/actions/edit-records/services/edit-records-data.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { filter, forEach, forIn, has, isEmpty, isNull, map as _map, noop, pick, some, transform, values } from 'lodash';\nimport {\n  IFieldInstance,\n  IRecordInstance,\n  IRxRecordInstanceAssociationInstances,\n  RX_RECORD_INSTANCE\n} from '@helix/platform/record/api';\nimport { AdaptModalService, ModalDeferred } from '@bmc-ux/adapt-angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IPreparedRecordInstance } from '../interfaces/prepared-record-instance.interface';\nimport { IPreparedFile } from '../interfaces/prepared-file.interface';\nimport { IFields } from '../interfaces/fields.interface';\nimport { IRecordData } from '../interfaces/record-data.interface';\nimport { IEditRecordsActionResults } from '../interfaces/edit-records-action-results.interface';\nimport { ResultModalComponent } from '../result-modal/result-modal.component';\nimport { RX_ERROR_HANDLING, RxCommandFactoryService } from '@helix/platform/shared/api';\nimport { from, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { IEditRecordsActionResponse, IEditRecordsActionResponseMessage } from '../interfaces/action-response.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxEditRecordsDataService {\n  private resourceType = 'com.bmc.arsys.rx.application.record.command.UpdateRecordInstancesCommand';\n  private editRecordsCommand = this.rxCommandFactoryService.forResourceType(this.resourceType);\n\n  constructor(\n    private adaptModalService: AdaptModalService,\n    private translateService: TranslateService,\n    private rxCommandFactoryService: RxCommandFactoryService\n  ) {}\n\n  editRecords(preparedRecordData): Observable<any> {\n    return this.editRecordsCommand.execute(preparedRecordData);\n  }\n\n  showActionResults(actionResults: IEditRecordsActionResults): Promise<ModalDeferred> {\n    return this.adaptModalService\n      .open({\n        size: 'sm',\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.title'\n        ),\n        data: actionResults,\n        content: ResultModalComponent\n      })\n      .catch(noop);\n  }\n\n  runAction(recordInstanceIds: string[], recordInstance: IRecordInstance): Observable<ModalDeferred> {\n    const preparedRecordData = this.prepareRecordData(recordInstanceIds, recordInstance);\n    const formData = new FormData();\n\n    formData.append('commandInstance', JSON.stringify(preparedRecordData.commandInstance));\n\n    forEach(preparedRecordData.attachments, (attachment) => {\n      formData.append(attachment.key as string, attachment.file);\n    });\n\n    Object.keys(preparedRecordData || {}).map((item) => {\n      if (item !== 'commandInstance' && item !== 'attachments') {\n        formData.append(item, JSON.stringify(preparedRecordData[item]));\n      }\n    });\n\n    return this.editRecords(formData).pipe(\n      map((response) => this.prepareActionResults(response, preparedRecordData)),\n      switchMap((actionResults) => {\n        return from(Promise.resolve(this.showActionResults(actionResults)));\n      })\n    );\n  }\n\n  private cleanUnchangedFields(recordInstance: IPreparedRecordInstance): { [fieldId: number]: IFieldInstance } {\n    return forIn(recordInstance.fieldInstances, (field, key) => {\n      if (isNull(field.value)) {\n        delete recordInstance.fieldInstances[key];\n      }\n    });\n  }\n\n  private prepareFiles(fields: IFields, keyPrefix?: string): IPreparedFile[] {\n    return values(fields)\n      .filter((field) => has(field, 'file'))\n      .map((attachment) => ({\n        key: keyPrefix ? keyPrefix + '/' + attachment.id : attachment.id,\n        file: attachment.file\n      }));\n  }\n\n  private cleanFiles(fields: IFields): IFields {\n    Object.keys(fields).map((key, index) => {\n      fields[key].hasOwnProperty('file') ? delete fields[key] : delete fields[key].file;\n    });\n\n    return fields;\n  }\n\n  private prepareAssociationInstancesForSaving(associationInstances: IRxRecordInstanceAssociationInstances): any[] {\n    return transform(\n      associationInstances,\n      (result, associationInstance, associationDefinitionName) => {\n        forEach(associationInstance, (associationGroups: any, role) => {\n          if (!isEmpty(associationGroups.pending)) {\n            result.push({\n              associationDefinitionName: associationDefinitionName,\n              recordInstanceIds: _map(associationGroups.pending, 'id'),\n              nodeSide: role,\n              resourceType: RX_RECORD_INSTANCE.association.operationResourceTypes.associate\n            });\n          }\n        });\n      },\n      []\n    );\n  }\n\n  private prepareRecordData(recordInstanceIds: Array<string>, recordInstance: IRecordInstance): IRecordData {\n    const record = pick(recordInstance, ['resourceType', 'recordDefinitionName', 'fieldInstances']);\n    const resourceType = 'com.bmc.arsys.rx.application.record.command.UpdateRecordInstancesCommand';\n\n    record.fieldInstances = this.cleanUnchangedFields(record);\n\n    const attachments = this.prepareFiles(record.fieldInstances);\n\n    record.fieldInstances = this.cleanFiles(record.fieldInstances);\n\n    const associationInstances = this.prepareAssociationInstancesForSaving(recordInstance.associationInstances);\n\n    const data: IRecordData = {\n      shouldOverrideOptimisticLock: false,\n      commandInstance: { resourceType },\n      recordInstanceIds: recordInstanceIds,\n      recordInstance: record,\n      attachments: attachments\n    };\n\n    if (!isEmpty(associationInstances)) {\n      data.associationOperations = associationInstances.map((associationInstance) => ({\n        ...associationInstance,\n        nodeSide: associationInstance.nodeSide.split(':')[0]\n      }));\n    }\n\n    return data;\n  }\n\n  private prepareActionResults(\n    response: IEditRecordsActionResponse,\n    requestData: IRecordData\n  ): IEditRecordsActionResults {\n    const newLine = '\\n';\n    const updatedInstanceIdsCount = requestData.recordInstanceIds.length;\n    const detailsMessageLabel = this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.details.record-instance-id.label'\n    );\n\n    const summary = {\n      successCount: 0,\n      errorCount: 0,\n      warningCount: 0,\n      infoCount: 0\n    };\n\n    let details: string;\n\n    if (!isEmpty(response)) {\n      summary.errorCount = filter(response, (messages) =>\n        some(messages, ['messageType', RX_ERROR_HANDLING.messageTypes.error])\n      ).length;\n\n      summary.warningCount = filter(response, (messages) =>\n        some(messages, ['messageType', RX_ERROR_HANDLING.messageTypes.warning])\n      ).length;\n\n      summary.infoCount = filter(response, (messages) =>\n        some(messages, ['messageType', RX_ERROR_HANDLING.messageTypes.info])\n      ).length;\n\n      summary.successCount = filter(response, (messages) =>\n        some(messages, ['messageType', RX_ERROR_HANDLING.messageTypes.success])\n      ).length;\n\n      details = _map(response, (messages, recordInstanceId) => {\n        const recordInstanceIdMessageHeader = detailsMessageLabel + ': ' + recordInstanceId;\n\n        const messageText = values(messages).map(this.convertMessageToString).join(', ');\n\n        return recordInstanceIdMessageHeader + newLine + messageText;\n      }).join(newLine + newLine);\n    } else {\n      details = '';\n    }\n\n    summary.successCount = updatedInstanceIdsCount - summary.errorCount - summary.warningCount;\n\n    return { summary, details };\n  }\n\n  private convertMessageToString(message: IEditRecordsActionResponseMessage): string {\n    return `${message.messageType}: ${values([message.messageText, message.appendedText]).join(' ')}`;\n  }\n}\n"]}