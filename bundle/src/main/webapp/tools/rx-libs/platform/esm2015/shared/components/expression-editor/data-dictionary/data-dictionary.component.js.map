{"version":3,"file":"data-dictionary.component.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/shared/components/expression-editor/data-dictionary/data-dictionary.component.ts","../../../../../../../../libs/platform/shared/components/expression-editor/data-dictionary/data-dictionary.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,YAAY,EAAE,KAAK,EAAa,MAAM,EAAiB,MAAM,eAAe,CAAC;AAE/G,OAAO,EAAE,OAAO,EAAE,GAAG,IAAI,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;;;;AAQvE,MAAM,OAAO,uBAAuB;IALpC;QAUE,iBAAY,GAAG,IAAI,YAAY,EAAE,CAAC;QAGlC,cAAS,GAAG,IAAI,YAAY,EAAO,CAAC;KAiDrC;IA5CC,WAAW,CAAC,KAAgB;QAC1B,MAAM,KAAK,GAAI,KAAK,CAAC,MAAkB,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;QAEtE,IAAI,KAAK,EAAE;YACT,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;SAC5C;aAAM;YACL,KAAK,CAAC,cAAc,EAAE,CAAC;SACxB;IACH,CAAC;IAED,WAAW,CAAC,OAAsB;QAChC,IAAI,OAAO,CAAC,cAAc,EAAE;YAC1B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;SAC3D;IACH,CAAC;IAED,YAAY,CAAC,CAAC,IAAG,CAAC;IAElB,cAAc,CAAC,IAAmB;QAChC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAEO,mBAAmB,CAAC,cAA+B;QACzD,OAAO,IAAI,CACT,CAAC,UAAU,EAAE,EAAE,CACb,IAAI,CAAC,UAAU,EAAE,CAAC,OAAO,EAAE,EAAE;;YAC3B,OAAA,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,KAAI,MAAA,OAAO,CAAC,QAAQ,0CAAE,MAAM,CAAA,CAAC;gBACjE,CAAC,CAAC;oBACE,KAAK,EAAE,OAAO,CAAC,KAAK;oBACpB,QAAQ,EAAE,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,QAAQ,CAAC;oBACpD,QAAQ,EAAE,OAAO,CAAC,QAAQ;oBAC1B,IAAI,EAAE;wBACJ,UAAU,EAAE,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU;wBACpF,IAAI,EAAE,OAAO,CAAC,IAAI;wBAClB,IAAI,EAAE,OAAO,CAAC,IAAI;qBACnB;oBACD,GAAG,EAAE,QAAQ,EAAE;oBACf,SAAS,EAAE,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC;iBACvC;gBACH,CAAC,CAAC,IAAI,CAAA;SAAA,CACT,EACH,CAAC,UAAU,EAAE,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,CACpC,CAAC,cAAc,CAAC,CAAC;IACpB,CAAC;;oHAxDU,uBAAuB;wGAAvB,uBAAuB,6PCVpC,uZASA;2FDCa,uBAAuB;kBALnC,SAAS;mBAAC;oBACT,QAAQ,EAAE,oBAAoB;oBAC9B,WAAW,EAAE,kCAAkC;oBAC/C,SAAS,EAAE,CAAC,kCAAkC,CAAC;iBAChD;8BAGC,cAAc;sBADb,KAAK;gBAIN,YAAY;sBADX,MAAM;gBAIP,SAAS;sBADR,MAAM;gBAMP,WAAW;sBADV,YAAY;uBAAC,WAAW,EAAE,CAAC,QAAQ,CAAC","sourcesContent":["import { Component, EventEmitter, HostListener, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { AdaptTreeNode } from '@bmc-ux/adapt-angular';\nimport { isArray, map as _map, uniqueId, flow, compact } from 'lodash';\nimport { IDataDictionary } from '@helix/platform/shared/api';\n\n@Component({\n  selector: 'rx-data-dictionary',\n  templateUrl: './data-dictionary.component.html',\n  styleUrls: ['./data-dictionary.component.scss']\n})\nexport class DataDictionaryComponent implements OnChanges {\n  @Input()\n  dataDictionary: IDataDictionary;\n\n  @Output()\n  nodeSelected = new EventEmitter();\n\n  @Output()\n  dragStart = new EventEmitter<any>();\n\n  tree: AdaptTreeNode[];\n\n  @HostListener('dragstart', ['$event'])\n  onDragStart(event: DragEvent) {\n    const value = (event.target as Element).getAttribute('rx-expression');\n\n    if (value) {\n      event.dataTransfer.setData('value', value);\n    } else {\n      event.preventDefault();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.dataDictionary) {\n      this.tree = this.prepareTreeForAdapt(this.dataDictionary);\n    }\n  }\n\n  onNodeExpand(e) {}\n\n  onNodeSelected(node: AdaptTreeNode): void {\n    this.nodeSelected.next(node);\n  }\n\n  private prepareTreeForAdapt(dataDictionary: IDataDictionary): AdaptTreeNode[] {\n    return flow(\n      (dictionary) =>\n        _map(dictionary, (element) =>\n          !element.hidden && (element.expression || element.children?.length)\n            ? {\n                label: element.label,\n                children: this.prepareTreeForAdapt(element.children),\n                expanded: element.expanded,\n                data: {\n                  expression: isArray(element.expression) ? element.expression[0] : element.expression,\n                  icon: element.icon,\n                  info: element.info\n                },\n                key: uniqueId(),\n                draggable: Boolean(element.expression)\n              }\n            : null\n        ),\n      (dictionary) => compact(dictionary)\n    )(dataDictionary);\n  }\n}\n","<adapt-tree #treeComponent [value]=\"tree\" filter=\"true\" (onNodeExpand)=\"onNodeExpand($event)\" [draggableNodes]=\"true\">\n  <ng-template let-node adaptTreeNodeTemplate>\n    <rx-data-dictionary-node\n      [filterQuery]=\"treeComponent.filterQuery\"\n      [node]=\"node\"\n      (expressionNodeSelected)=\"onNodeSelected($event)\"\n    ></rx-data-dictionary-node>\n  </ng-template>\n</adapt-tree>\n"]}