{"version":3,"file":"log.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/logging/log.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,MAAM,QAAQ,CAAC;AAChD,OAAO,MAAM,MAAM,YAAY,CAAC;AAChC,OAAO,EAAE,oBAAoB,EAAE,MAAM,8BAA8B,CAAC;AACpE,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;;;AAElD,MAAM,uBAAuB,GAAG,mBAAmB,CAAC;AAEpD,4BAA4B;AAI5B,MAAM,OAAO,YAAY;IAavB,YAAoB,oBAA0C;QAA1C,yBAAoB,GAApB,oBAAoB,CAAsB;QAXtD,qBAAgB,GAAG,EAAE,CAAC;QACtB,wBAAmB,GAAG,KAAK,CAAC;QAWlC,IAAI;YACF,MAAM,gBAAgB,GAAG,cAAc,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;YAEzE,IAAI,CAAC,UAAU,GAAG,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;SACxE;QAAC,OAAO,CAAC,EAAE;YACV,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;SACtB;QAED,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAClC,CAAC;IAlBD,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,UAAU,IAAI,EAAE,CAAC;IAC/B,CAAC;IAED,IAAI,mBAAmB;QACrB,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAcD,SAAS,CAAC,UAAyB;QACjC,IAAI,CAAC,mBAAmB,GAAG,QAAQ,CAAC,UAAU,EAAE,WAAW,CAAC,GAAG,CAAC,CAAC;QAEjE,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,mBAAmB;YAC9C,CAAC,CAAC,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC;YACtC,CAAC,CAAC,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAEnE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;QAE5E,IAAI,CAAC,UAAU,CAAC,MAAM;YACpB,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,uBAAuB,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAClF,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC,uBAAuB,CAAC,CAAC;IACzD,CAAC;IAED,KAAK,CAAC,OAAe;QACnB,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;IACtD,CAAC;IAED,OAAO,CAAC,OAAe;QACrB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;IACrD,CAAC;IAED,IAAI,CAAC,OAAe;QAClB,IAAI,IAAI,CAAC,mBAAmB,IAAI,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,WAAW,CAAC,GAAG,CAAC,EAAE;YAC7E,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;SACpD;IACH,CAAC;IAED,KAAK,CAAC,OAAe;QACnB,IAAI,IAAI,CAAC,mBAAmB,IAAI,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,WAAW,CAAC,GAAG,CAAC,EAAE;YAC7E,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;SACrD;IACH,CAAC;IAED,GAAG,CAAC,OAAe;QACjB,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;YAC7B,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;SACtB;IACH,CAAC;IAED,wCAAwC;IAChC,iBAAiB,CAAC,IAAY,EAAE,IAAY;QAClD,MAAM,WAAW,GAAG,IAAI,CAAC,oBAAoB,CAAC,GAAG,EAAE,CAAC;QAEpD,OAAO,CACL,OAAO,IAAI,IAAI;YACf,oBAAoB;YACpB,uBAAuB;YACvB,sBAAsB;YACtB,UAAU,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,4CAA4C;YAC9F,4DAA4D;YAC5D,mBAAmB,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE,aAAa;YACpF,MAAM,MAAM,EAAE,CAAC,MAAM,CAAC,+BAA+B,CAAC,OAAO,IAAI,EAAE,CACpE,CAAC;IACJ,CAAC;;yGA/EU,YAAY;6GAAZ,YAAY,cAFX,MAAM;2FAEP,YAAY;kBAHxB,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { includes, intersection } from 'lodash';\nimport moment from 'moment-es6';\nimport { RxCurrentUserService } from '../user/current-user.service';\nimport { RX_LOG, LogCategory } from './log.types';\n\nconst sessionLogCategoriesKey = 'RX_LOG_CATEGORIES';\n\n// tslint:disable:no-console\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxLogService {\n  private categories: LogCategory[];\n  private serverCategories = '';\n  private shouldLogEverything = false;\n\n  get logCategories(): string[] {\n    return this.categories || [];\n  }\n\n  get serverLogCategories(): string {\n    return this.serverCategories;\n  }\n\n  constructor(private rxCurrentUserService: RxCurrentUserService) {\n    try {\n      const storedCategories = sessionStorage.getItem(sessionLogCategoriesKey);\n\n      this.categories = storedCategories ? JSON.parse(storedCategories) : [];\n    } catch (e) {\n      this.categories = [];\n    }\n\n    this.configure(this.categories);\n  }\n\n  configure(categories: LogCategory[]): void {\n    this.shouldLogEverything = includes(categories, LogCategory.All);\n\n    this.serverCategories = this.shouldLogEverything\n      ? RX_LOG.serverLogCategories.join(',')\n      : intersection(categories, RX_LOG.serverLogCategories).join(',');\n\n    this.categories = this.shouldLogEverything ? [LogCategory.All] : categories;\n\n    this.categories.length\n      ? sessionStorage.setItem(sessionLogCategoriesKey, JSON.stringify(this.categories))\n      : sessionStorage.removeItem(sessionLogCategoriesKey);\n  }\n\n  error(message: string): void {\n    console.error(this.prepareLogMessage(message, 'E'));\n  }\n\n  warning(message: string): void {\n    console.warn(this.prepareLogMessage(message, 'W'));\n  }\n\n  info(message: string): void {\n    if (this.shouldLogEverything || includes(this.logCategories, LogCategory.Cli)) {\n      console.info(this.prepareLogMessage(message, 'I'));\n    }\n  }\n\n  debug(message: string): void {\n    if (this.shouldLogEverything || includes(this.logCategories, LogCategory.Cli)) {\n      console.debug(this.prepareLogMessage(message, 'D'));\n    }\n  }\n\n  log(message: string): void {\n    if (this.logCategories.length) {\n      console.log(message);\n    }\n  }\n\n  // tslint:disable:no-trailing-whitespace\n  private prepareLogMessage(text: string, type: string): string {\n    const currentUser = this.rxCurrentUserService.get();\n\n    return (\n      `<CLI${type}> ` +\n      '<TID: 0000000000> ' +\n      '<RPC ID: 0000000000> ' +\n      '<Queue:           > ' +\n      `<USER: ${currentUser ? currentUser.loginName : ''}                                        > ` +\n      '<Tenant-ID:                                             > ' +\n      `<Overlay-Group: ${currentUser ? currentUser.defaultOverlayGroupId : ''}         > ` +\n      `/* ${moment().format('ddd MMM DD YYYY HH:mm:ss.SSSS')} */ ${text}`\n    );\n  }\n}\n"]}