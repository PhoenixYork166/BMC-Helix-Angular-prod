{"version":3,"file":"expression-evaluator.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/api/expressions/expression-evaluator.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mCAAmC,EAAE,MAAM,wCAAwC,CAAC;AAC7F,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACrD,OAAO,EAAE,mCAAmC,EAAE,MAAM,wCAAwC,CAAC;AAE7F,OAAO,EAAE,YAAY,EAAE,qBAAqB,EAAE,MAAM,4BAA4B,CAAC;;;;;AAKjF,MAAM,OAAO,4BAA4B;IACvC,YACU,QAAkB,EAClB,YAA0B,EAC1B,mCAAwE,EACxE,mCAAwE,EACxE,qBAA4C;QAJ5C,aAAQ,GAAR,QAAQ,CAAU;QAClB,iBAAY,GAAZ,YAAY,CAAc;QAC1B,wCAAmC,GAAnC,mCAAmC,CAAqC;QACxE,wCAAmC,GAAnC,mCAAmC,CAAqC;QACxE,0BAAqB,GAArB,qBAAqB,CAAuB;IACnD,CAAC;IAEJ,QAAQ,CAAC,UAAkB,EAAE,IAAa,EAAE,sBAA6C;QACvF,MAAM,SAAS,GAAG,sBAAsB,IAAI,IAAI,CAAC,mCAAmC,CAAC;QAErF,MAAM,mBAAmB,GAAG,SAAS,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAEjE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,wBAAwB,UAAU,KAAK,mBAAmB,EAAE,CAAC,CAAC;QAEtF,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IAED,WAAW,CACT,UAAkB,EAClB,IAAa,EACb,sBAA6C,EAC7C,eAAoB,IAAI;QAExB,IAAI,MAAM,GAAQ,YAAY,CAAC;QAE/B,IAAI;YACF,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,EAAE,sBAAsB,CAAC,CAAC;SAClE;QAAC,OAAO,KAAK,EAAE;YACd,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SAC3D;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,OAAO,CAAC,UAAU,EAAE,sBAA6C;QAC/D,OAAO,IAAI,CAAC,mCAAmC,CAAC,OAAO,CAAC,UAAU,EAAE,sBAAsB,CAAC,CAAC;IAC9F,CAAC;;yHAtCU,4BAA4B;6HAA5B,4BAA4B,cAF3B,MAAM;2FAEP,4BAA4B;kBAHxC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { RxDefaultExpressionEvaluatorService } from './default-expression-evaluator.service';\nimport { Injectable, Injector } from '@angular/core';\nimport { RxDefaultExpressionValidatorService } from './default-expression-validator.service';\nimport { IExpressionEvaluator } from './expression-evaluator.types';\nimport { RxLogService, RxNotificationService } from '@helix/platform/shared/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxExpressionEvaluatorService {\n  constructor(\n    private injector: Injector,\n    private rxLogService: RxLogService,\n    private rxDefaultExpressionEvaluatorService: RxDefaultExpressionEvaluatorService,\n    private rxDefaultExpressionValidatorService: RxDefaultExpressionValidatorService,\n    private rxNotificationService: RxNotificationService\n  ) {}\n\n  evaluate(expression: string, data?: object, customEvaluatorService?: IExpressionEvaluator): any {\n    const evaluator = customEvaluatorService || this.rxDefaultExpressionEvaluatorService;\n\n    const evaluatedExpression = evaluator.evaluate(expression, data);\n\n    this.rxLogService.debug(`EVALUATED EXPRESSION ${expression}: ${evaluatedExpression}`);\n\n    return evaluatedExpression;\n  }\n\n  tryEvaluate(\n    expression: string,\n    data?: object,\n    customEvaluatorService?: IExpressionEvaluator,\n    defaultValue: any = null\n  ): any {\n    let result: any = defaultValue;\n\n    try {\n      result = this.evaluate(expression, data, customEvaluatorService);\n    } catch (error) {\n      this.rxNotificationService.addErrorMessage(error.message);\n    }\n\n    return result;\n  }\n\n  isValid(expression, customEvaluatorService?: IExpressionEvaluator): boolean {\n    return this.rxDefaultExpressionValidatorService.isValid(expression, customEvaluatorService);\n  }\n}\n"]}