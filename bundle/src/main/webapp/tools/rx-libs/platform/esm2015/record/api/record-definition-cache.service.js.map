{"version":3,"file":"record-definition-cache.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/record/api/record-definition-cache.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { forkJoin, Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { assign, castArray, fromPairs, isEmpty } from 'lodash';\n\nimport {\n  IAssociationDefinition,\n  IAssociationTree,\n  RxAssociationDefinitionDataPageService,\n  RxAssociationNodeTreeDataPageService\n} from '@helix/platform/association/api';\nimport { IHttpGetParams } from '@helix/platform/shared/api';\n\nimport { IRecordDefinition } from './record-definition.types';\nimport { RxRecordDefinitionService } from './record-definition.service';\n\nexport interface IRecordAssociationDefinitionData {\n  [associationDefinitionName: string]: Array<IAssociationDefinition>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordDefinitionCacheService {\n  private consumers = new Set<Observable<any>>();\n  private recordDefinitions: Map<string, Observable<IRecordDefinition>> = new Map();\n  private recordAssociationDefinitions: Map<string, Observable<any>> = new Map();\n  private recordAssociationTrees: Map<string, Observable<IAssociationTree[]>> = new Map();\n\n  constructor(\n    private rxAssociationDefinitionDataPageService: RxAssociationDefinitionDataPageService,\n    private rxAssociationNodeTreeDataPageService: RxAssociationNodeTreeDataPageService,\n    private rxRecordDefinitionService: RxRecordDefinitionService\n  ) {}\n\n  getRecordAssociationDefinitions(\n    recordDefinitionNames: string[] | string\n  ): Observable<IRecordAssociationDefinitionData> {\n    recordDefinitionNames = castArray(recordDefinitionNames);\n\n    const requestedAssociationDefinitions = [];\n\n    recordDefinitionNames.forEach((recordDefinitionName) => {\n      if (!this.recordAssociationDefinitions.has(recordDefinitionName)) {\n        const recordAssociationDefinition$ = this.rxAssociationDefinitionDataPageService\n          .getRecordAssociationDefinitions(recordDefinitionName)\n          .pipe(\n            map((result) => fromPairs([[recordDefinitionName, result[0].data]])),\n            shareReplay(1)\n          );\n\n        this.recordAssociationDefinitions.set(recordDefinitionName, recordAssociationDefinition$);\n      }\n\n      requestedAssociationDefinitions.push(this.recordAssociationDefinitions.get(recordDefinitionName));\n    });\n\n    return forkJoin(requestedAssociationDefinitions).pipe(\n      map((recordAssociationDefinitionData: Array<IRecordAssociationDefinitionData>) => {\n        return assign({}, ...recordAssociationDefinitionData);\n      })\n    );\n  }\n\n  getRecordAssociationTree(recordDefinitionName: string): Observable<IAssociationTree[]> {\n    if (!this.recordAssociationTrees.has(recordDefinitionName)) {\n      this.recordAssociationTrees.set(\n        recordDefinitionName,\n        this.rxAssociationNodeTreeDataPageService\n          .get({\n            params: {\n              startIndex: 0,\n              pageSize: -1,\n              depth: 2,\n              recorddefinition: recordDefinitionName\n            }\n          })\n          .pipe(\n            map((dataPage) => dataPage.data as IAssociationTree[]),\n            shareReplay(1)\n          )\n      );\n    }\n\n    return this.recordAssociationTrees.get(recordDefinitionName);\n  }\n\n  getRecordAssociationTrees(recordDefinitionNames: string[]): Observable<IAssociationTree[][]> {\n    return forkJoin(\n      recordDefinitionNames.map((recordDefinitionName) => this.getRecordAssociationTree(recordDefinitionName))\n    );\n  }\n\n  getRecordDefinition(recordDefinitionName: string, options?: IHttpGetParams): Observable<IRecordDefinition> {\n    if (!this.recordDefinitions.has(recordDefinitionName)) {\n      const recordDefinition$ = this.rxRecordDefinitionService.get(recordDefinitionName, options).pipe(shareReplay(1));\n\n      this.recordDefinitions.set(recordDefinitionName, recordDefinition$);\n    }\n\n    return this.recordDefinitions.get(recordDefinitionName);\n  }\n\n  getRecordDefinitions(recordDefinitionNames: string[], options?: IHttpGetParams): Observable<IRecordDefinition[]> {\n    return forkJoin(\n      recordDefinitionNames.map((recordDefinitionName) => this.getRecordDefinition(recordDefinitionName, options))\n    );\n  }\n\n  registerConsumer(consumerDestroy$: Observable<any>): void {\n    this.consumers.add(consumerDestroy$);\n\n    consumerDestroy$.subscribe(() => {\n      this.consumers.delete(consumerDestroy$);\n\n      if (isEmpty(this.consumers)) {\n        this.clearCache();\n      }\n    });\n  }\n\n  private clearCache(): void {\n    this.recordDefinitions.clear();\n    this.recordAssociationDefinitions.clear();\n  }\n}\n"]}