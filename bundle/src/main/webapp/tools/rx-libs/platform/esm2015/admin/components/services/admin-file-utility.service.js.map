{"version":3,"file":"admin-file-utility.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/admin/components/services/admin-file-utility.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClC,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;;AAKnC,MAAM,OAAO,yBAAyB;IACpC,mBAAmB,CAAC,aAAqB,EAAE,QAAgB,EAAE,QAAgB;QAC3E,IAAI,aAAa,EAAE;YACjB,MAAM,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;YAC1E,MAAM,UAAU,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;YAE1C,OAAO,IAAI,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;SAC7D;aAAM;YACL,OAAO,IAAI,CAAC;SACb;IACH,CAAC;IAED,mBAAmB,CAAC,IAAU;QAC5B,OAAO,IAAI,UAAU,CAAS,CAAC,QAAQ,EAAE,EAAE;YACzC,MAAM,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;YAEpC,UAAU,CAAC,SAAS,GAAG,GAAG,EAAE;gBAC1B,MAAM,YAAY,GAAG,IAAI,CAAE,UAAU,CAAC,MAAiB,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;gBAEpE,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC5B,QAAQ,CAAC,QAAQ,EAAE,CAAC;YACtB,CAAC,CAAC;YAEF,UAAU,CAAC,OAAO,GAAG,GAAG,EAAE;gBACxB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtB,CAAC,CAAC;YAEF,UAAU,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC;;sHA7BU,yBAAyB;0HAAzB,yBAAyB,cAFxB,MAAM;2FAEP,yBAAyB;kBAHrC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { last, map } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxAdminFileUtilityService {\n  convertBase64ToFile(decodedString: string, fileName: string, fileType: string): File {\n    if (decodedString) {\n      const buffer = map(atob(decodedString), (symbol) => symbol.charCodeAt(0));\n      const uint8Array = new Uint8Array(buffer);\n\n      return new File([uint8Array], fileName, { type: fileType });\n    } else {\n      return null;\n    }\n  }\n\n  convertFileToBase64(file: File): Observable<string> {\n    return new Observable<string>((observer) => {\n      const fileReader = new FileReader();\n\n      fileReader.onloadend = () => {\n        const base64String = last((fileReader.result as string).split(','));\n\n        observer.next(base64String);\n        observer.complete();\n      };\n\n      fileReader.onerror = () => {\n        observer.next(null);\n      };\n\n      fileReader.readAsDataURL(file);\n    });\n  }\n}\n"]}