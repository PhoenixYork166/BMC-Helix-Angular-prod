{"version":3,"file":"localization.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/localization/localization.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\n\nimport { AdaptTranslateService } from '@bmc-ux/adapt-angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { findKey, some } from 'lodash';\nimport moment from 'moment-es6';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, mapTo, shareReplay, switchMap, take, tap } from 'rxjs/operators';\nimport { RxCurrentUserService } from '../user/current-user.service';\nimport {\n  ILocaleInfo,\n  ILocalizedStrings,\n  ILocalizedStringsForLoginPageResponse,\n  RX_DEFAULT_STRINGS\n} from './localization.types';\nimport { RxRssoDebugService } from '../dev/rsso-debug.service';\n\nconst SUPPORTED_LOCALES: { [key: string]: ILocaleInfo } = {\n  de: { adapt: 'de-de' },\n  en: { adapt: 'en-us' },\n  es: { adapt: 'es-es' },\n  fr: { adapt: 'fr-fr' },\n  it: { adapt: 'it-it' },\n  ja: { adapt: 'ja-jp' },\n  ko: { adapt: 'ko-kr' },\n  nl: { adapt: 'nl-nl' },\n  pt: { adapt: 'pt-br' },\n  ru: { adapt: 'ru-ru' },\n  sv: { adapt: 'sv-se' },\n  da: { adapt: 'da-dk' },\n  no: { moment: 'nb', angular: 'nb', adapt: 'no-no', similar: ['nb', 'nn'] },\n  'zh-Hans': { moment: 'zh-CN', adapt: 'zh-cn', similar: ['zh-CN'] }\n};\n\nconst LOGIN_LOCALE = 'login';\nconst DEFAULT_LOCALE = 'en';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxLocalizationService {\n  currentLocale: string = DEFAULT_LOCALE;\n  angularLocale: string = DEFAULT_LOCALE;\n\n  onTranslationsLoaded$ = this.translateService.onLangChange.pipe(shareReplay(1));\n\n  loginLocalizedStrings$ = this.getLocalizedStringsForLoginPage().pipe(shareReplay(1));\n\n  private preferredLocale$: Observable<string> = this.rxCurrentUserService.user$.pipe(\n    filter(Boolean),\n    take(1),\n    map(() => this.rxCurrentUserService.getPreferredLocale() || this.rxCurrentUserService.getPreferredUserLocale()),\n    switchMap((preferredLocale) =>\n      preferredLocale\n        ? of(preferredLocale)\n        : this.loginLocalizedStrings$.pipe(map((response) => Object.keys(response.body)[0]))\n    ),\n    map((locale) => this.normalizeLocale(locale)),\n    shareReplay(1)\n  );\n\n  constructor(\n    private httpClient: HttpClient,\n    private translateService: TranslateService,\n    private rxCurrentUserService: RxCurrentUserService,\n    private adaptTranslateService: AdaptTranslateService,\n    private rxRssoDebugService: RxRssoDebugService,\n    @Inject(DOCUMENT) private document: any,\n    @Inject(RX_DEFAULT_STRINGS) private defaultStrings: ILocalizedStrings\n  ) {}\n\n  getDefaultApplicationStrings(): ILocalizedStrings {\n    return this.defaultStrings;\n  }\n\n  setDefaultApplicationStrings(defaultApplicationStrings: ILocalizedStrings) {\n    this.defaultStrings = { ...this.defaultStrings, ...defaultApplicationStrings };\n  }\n\n  initLoginTranslations(): Observable<ILocalizedStringsForLoginPageResponse> {\n    return this.loginLocalizedStrings$.pipe(\n      map((response) => response.body),\n      tap((payload) => {\n        const localeKey = Object.keys(payload)[0];\n\n        this.setLocale(this.normalizeLocale(localeKey));\n        this.translateService.setTranslation(LOGIN_LOCALE, payload[localeKey], true);\n      }),\n      switchMap(() => this.translateService.use(LOGIN_LOCALE))\n    );\n  }\n\n  initTranslations(useDefault = false): Observable<string> {\n    return (useDefault ? of(DEFAULT_LOCALE) : this.preferredLocale$).pipe(\n      switchMap((locale) => this.translateService.use(locale).pipe(mapTo(locale))),\n      tap((locale) => {\n        this.setLocale(locale);\n\n        const adaptLocale = this.getCurrentLocaleDescriptor().adapt;\n\n        Object.assign(this.adaptTranslateService.languages[adaptLocale], {\n          'adapt.rx.error.min': this.translateService.instant('com.bmc.arsys.rx.client.error.min'),\n          'adapt.rx.error.max': this.translateService.instant('com.bmc.arsys.rx.client.error.max'),\n          'adapt.rx.error.required': this.translateService.instant(\n            'com.bmc.arsys.rx.client.view-components.validation.required.message'\n          ),\n          'adapt.select.emptyStateDescription': ''\n        });\n      })\n    );\n  }\n\n  private setLocale(locale: string): void {\n    this.currentLocale = locale;\n    this.setDocumentLang(this.currentLocale);\n\n    const descriptor = this.getCurrentLocaleDescriptor();\n\n    this.adaptTranslateService.useLanguage(descriptor.adapt);\n    moment.locale(descriptor.moment);\n    this.angularLocale = descriptor.angular;\n  }\n\n  private getCurrentLocaleDescriptor(): ILocaleInfo {\n    const locale = findKey(SUPPORTED_LOCALES, (localeInfo: ILocaleInfo, key: string) => {\n      const language = this.currentLocale.split('-')[0];\n\n      return (\n        key === this.currentLocale ||\n        key === language ||\n        some(localeInfo.similar, (item) => item === this.currentLocale || item === language)\n      );\n    });\n\n    return {\n      angular: locale ? SUPPORTED_LOCALES[locale].angular || locale : DEFAULT_LOCALE,\n      moment: (SUPPORTED_LOCALES[locale] && SUPPORTED_LOCALES[locale].moment) || this.currentLocale,\n      adapt: (SUPPORTED_LOCALES[locale] && SUPPORTED_LOCALES[locale].adapt) || SUPPORTED_LOCALES[DEFAULT_LOCALE].adapt\n    };\n  }\n\n  private getLocalizedStringsForLoginPage(): Observable<HttpResponse<ILocalizedStringsForLoginPageResponse>> {\n    // When debugging on an RSSO environment, this (/api/rx/application/logincontent/login.json) call fails\n    // repeatedly with a http 401 error,so we have bypassed it. This call is only useful for the Innovation\n    // Studio login page which is not accessed in RSSO environment.\n    return this.rxRssoDebugService.isRssoDebugEnabled()\n      ? of()\n      : this.httpClient.get<ILocalizedStringsForLoginPageResponse>('/api/rx/application/logincontent/login.json', {\n          observe: 'response'\n        });\n  }\n\n  private setDocumentLang(lang: string): void {\n    this.document.documentElement.setAttribute('lang', lang);\n  }\n\n  // Safari returns the web browser locale information Region in lowercase\n  // en-us instead of en-US which causes issues with localized field.\n  private normalizeLocale(locale: string): string {\n    const localeInformation = locale.split('-');\n\n    if (localeInformation.length > 1) {\n      localeInformation[1] = localeInformation[1].toUpperCase();\n    }\n\n    return localeInformation.join('-');\n  }\n}\n"]}