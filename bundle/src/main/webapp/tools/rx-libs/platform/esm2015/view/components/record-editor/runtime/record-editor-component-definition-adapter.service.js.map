{"version":3,"file":"record-editor-component-definition-adapter.service.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/record-editor/runtime/record-editor-component-definition-adapter.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,GAAG,EAAE,WAAW,EAAE,MAAM,QAAQ,CAAC;AAE1C,OAAO,EAGL,mBAAmB,EACnB,6BAA6B,EAC9B,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,gBAAgB,EAAE,MAAM,+BAA+B,CAAC;;;AAGjE,MAAM,OAAO,6CAA6C;IAExD,YAAoB,2BAA0D;QAA1D,gCAA2B,GAA3B,2BAA2B,CAA+B;IAAG,CAAC;IAElF,eAAe,CAAC,+BAAkE;QAChF,MAAM,UAAU,GAAG,GAAG,CAAC,+BAA+B,EAAE,kBAAkB,CAAC,CAAC;QAE5E,IAAI,UAAU,CAAC,IAAI,KAAK,gBAAgB,CAAC,IAAI,IAAI,WAAW,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;YAClF,UAAU,CAAC,SAAS,GAAG,GAAG,CAAC;SAC5B;QAED,IAAI,CAAC,2BAA2B;aAC7B,aAAa,CAAC,+BAA+B,CAAC;aAC9C,MAAM,CACL,CAAC,aAAa,EAAE,EAAE,CAChB,aAAa,CAAC,mBAAmB,CAAC,IAAI,KAAK,mBAAmB,CAAC,YAAY;YAC3E,CAAC,aAAa,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,cAAc,CAAC,SAAS,CAAC;gBAC3E,aAAa,CAAC,mBAAmB,CAAC,IAAI,KAAK,mBAAmB,CAAC,WAAW,CAAC,CAChF;aACA,GAAG,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,aAAa,CAAC,mBAAmB,CAAC;aACzD,OAAO,CAAC,CAAC,wBAAwB,EAAE,EAAE;YACpC,MAAM,CAAC,MAAM,CAAC,wBAAwB,CAAC,gBAAgB,EAAE;gBACvD,GAAG,EAAE,sBAAsB,+BAA+B,CAAC,IAAI,OAAO;gBACtE,WAAW,EAAE,sBAAsB,+BAA+B,CAAC,IAAI,eAAe;gBACtF,gBAAgB,EAAE,sBAAsB,+BAA+B,CAAC,IAAI,oBAAoB;gBAChG,cAAc,EAAE,sBAAsB,+BAA+B,CAAC,IAAI,kBAAkB;aAC7F,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;;0IA5BU,6CAA6C;8IAA7C,6CAA6C;2FAA7C,6CAA6C;kBADzD,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { get, isUndefined } from 'lodash';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport {\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  RxViewComponentType,\n  RxViewDefinitionParserService\n} from '@helix/platform/view/api';\nimport { RecordEditorMode } from '../common/record-editor.types';\n\n@Injectable()\nexport class RecordEditorComponentDefinitionAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition> {\n  constructor(private viewDefinitionParserService: RxViewDefinitionParserService) {}\n\n  adaptDefinition(recordEditorComponentDefinition: IContainerViewComponentDefinition) {\n    const properties = get(recordEditorComponentDefinition, 'propertiesByName');\n\n    if (properties.mode === RecordEditorMode.Edit && isUndefined(properties.allowEdit)) {\n      properties.allowEdit = '1';\n    }\n\n    this.viewDefinitionParserService\n      .getComponents(recordEditorComponentDefinition)\n      .filter(\n        (componentPair) =>\n          componentPair.componentDefinition.type !== RxViewComponentType.ActionButton &&\n          (componentPair.componentDefinition.propertiesByName.hasOwnProperty('fieldId') ||\n            componentPair.componentDefinition.type === RxViewComponentType.Association)\n      )\n      .map((componentPair) => componentPair.componentDefinition)\n      .forEach((fieldComponentDefinition) => {\n        Object.assign(fieldComponentDefinition.propertiesByName, {\n          api: `\\${view.components.${recordEditorComponentDefinition.guid}.api}`,\n          inReadState: `\\${view.components.${recordEditorComponentDefinition.guid}.inReadState}`,\n          recordDefinition: `\\${view.components.${recordEditorComponentDefinition.guid}.recordDefinition}`,\n          recordInstance: `\\${view.components.${recordEditorComponentDefinition.guid}.recordInstance}`\n        });\n      });\n  }\n}\n"]}