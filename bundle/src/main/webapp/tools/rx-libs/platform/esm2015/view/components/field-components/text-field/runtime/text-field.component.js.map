{"version":3,"file":"text-field.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/field-components/text-field/runtime/text-field.component.ts","../../../../../../../../../libs/platform/view/components/field-components/text-field/runtime/text-field.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Injector, ViewChild } from '@angular/core';\nimport { RX_RECORD_DEFINITION, RxFieldDefinitionService } from '@helix/platform/record/api';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport { compact, find, first, get, includes, isEqual, isNil } from 'lodash';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { TextFieldMultiSelectionType } from './text-field.types';\nimport { INamedListDefinition, RxNamedListDefinitionService, RxNamedListService } from '@helix/platform/named-list/api';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  pluck,\n  shareReplay,\n  startWith,\n  take,\n  takeUntil\n} from 'rxjs/operators';\nimport {\n  IRxSelectWithPaginationOption,\n  IRxSelectWithPaginationOptionsPage,\n  RxSelectWithPaginationComponent\n} from '@helix/platform/shared/components';\nimport { IRxTextFieldConfig } from './text-field-config.interface';\n\n@Component({\n  selector: 'rx-text-field',\n  templateUrl: './text-field.component.html'\n})\nexport class TextFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent {\n  isPasswordField: boolean;\n  isNamedListAttached: boolean;\n  isMultipleSelectionEnabled: boolean;\n  maxLength: number;\n  showDefaultTitle: boolean;\n\n  @ViewChild(RxSelectWithPaginationComponent)\n  selectWithPaginationComponent: RxSelectWithPaginationComponent;\n\n  optionLoaderFunc = this.getNamedListOptionPage.bind(this);\n  viewToModelValueAdapterFunc = this.viewToModelValueAdapter.bind(this);\n  modelToViewValueAdapterFunc = this.modelToViewValueAdapter.bind(this);\n\n  private displayValue: string;\n  private selectedOptions: IRxSelectWithPaginationOption[] = [];\n  private namedListDefinition: INamedListDefinition;\n  private namedListDefinitionName: string;\n  private namedListFormattedValue: string;\n  private multiSelectDelimiter = ';';\n  private isDropdownOpen = false;\n  private additionalQueryCriteria: string;\n\n  constructor(\n    injector: Injector,\n    private fieldDefinitionService: RxFieldDefinitionService,\n    private rxNamedListDefinitionService: RxNamedListDefinitionService,\n    private rxNamedListService: RxNamedListService\n  ) {\n    super(injector);\n  }\n\n  onConfigInitialized(config: IRxTextFieldConfig): void {\n    super.onConfigInitialized(config);\n\n    this.isPasswordField =\n      includes(RX_RECORD_DEFINITION.passwordFieldIds, this.fieldId) || this.fieldDefinition.shouldPersistHashed;\n\n    this.namedListDefinitionName = this.fieldDefinition.namedListDefinition;\n    this.isNamedListAttached = Boolean(this.namedListDefinitionName);\n    this.isMultipleSelectionEnabled = config.enableMultiSelection === TextFieldMultiSelectionType.Enabled;\n\n    if (this.fieldDefinition.maxLength && !this.fieldDefinitionService.isSystemField(this.fieldDefinition)) {\n      this.maxLength = this.fieldDefinition.maxLength;\n    }\n\n    if (this.isNamedListAttached) {\n      const namedListDefinition$ = this.rxNamedListDefinitionService\n        .get(this.namedListDefinitionName)\n        .pipe(shareReplay(1), take(1));\n\n      const valueChanges$ = this.formControl.valueChanges.pipe(\n        distinctUntilChanged(isEqual),\n        startWith(this.formControl.value as string),\n        filter(() => !this.isDropdownOpen),\n        takeUntil(this.destroyed$)\n      );\n\n      this.config\n        .pipe(debounceTime(250), pluck('additionalQueryCriteria'), distinctUntilChanged(), takeUntil(this.destroyed$))\n        .subscribe((additionalQueryCriteria: string) => {\n          if (!isNil(this.additionalQueryCriteria)) {\n            this.selectWithPaginationComponent.resetLoadedOptions();\n            this.setFieldValue(null);\n          }\n\n          this.additionalQueryCriteria = additionalQueryCriteria;\n        });\n\n      combineLatest([namedListDefinition$, valueChanges$]).subscribe(([namedListDefinition]) => {\n        this.namedListDefinition = namedListDefinition;\n\n        this.updateSelection();\n      });\n    }\n  }\n\n  getDisplayValue(): string {\n    let displayValue = super.getDisplayValue();\n\n    if (this.isPasswordField) {\n      displayValue = '********';\n    } else if (this.isNamedListAttached) {\n      displayValue = this.namedListFormattedValue;\n    }\n\n    return displayValue;\n  }\n\n  getNamedListOptionPage(\n    startIndex: number,\n    pageSize: number,\n    searchQuery?: string\n  ): Observable<IRxSelectWithPaginationOptionsPage> {\n    return this.rxNamedListService.getOptionPage(\n      this.namedListDefinition,\n      searchQuery,\n      this.additionalQueryCriteria,\n      startIndex,\n      pageSize\n    );\n  }\n\n  // [{displayValue: 'FOO', value: 'foo'}, {displayValue: 'BAR', value: 'bar'}] -> 'foo;bar'\n  viewToModelValueAdapter(selectedOptions: IRxSelectWithPaginationOption[]): string {\n    this.selectedOptions = selectedOptions;\n\n    this.updateNamedListFormattedValue();\n\n    return selectedOptions.map((option) => option.value).join(this.multiSelectDelimiter);\n  }\n\n  // 'foo;bar' -> [{displayValue: 'FOO', value: 'foo'}, {displayValue: 'BAR', value: 'bar'}]\n  modelToViewValueAdapter(modelValue: string): IRxSelectWithPaginationOption[] {\n    return modelValue ? this.selectedOptions : [];\n  }\n\n  onToggleDropdown(isOpen: boolean): void {\n    this.isDropdownOpen = isOpen;\n  }\n\n  private getOptionValues(modelValue: string): string[] {\n    return modelValue ? compact(modelValue.split(this.multiSelectDelimiter)) : [];\n  }\n\n  // Update selection by form control value.\n  // Usually, this needs to be done when form control value changes programmatically, e.g:\n  // - in initialization text field component phase\n  // - by set property action\n  // - after record editor record instance id change\n  private updateSelection(): void {\n    this.showDefaultTitle = false;\n\n    const selectedOptionValues = this.getOptionValues(this.formControl.value);\n\n    if (!this.isMultipleSelectionEnabled && selectedOptionValues.length > 1) {\n      // If the field instance contains multiple values but the component doesn't have multiple selection enabled\n      // e.g. when field was edited in the data editor, the display value will be blank (null).\n      this.selectedOptions = [\n        {\n          displayValue: null,\n          value: this.formControl.value\n        }\n      ];\n\n      this.triggerModelToViewValueUpdate();\n      this.updateNamedListFormattedValue();\n    } else {\n      // Select with pagination component is not available in the record editor READ mode.\n      const loadedOptions = get(this.selectWithPaginationComponent, 'options', []);\n      // Check if all options for selected values are already loaded.\n      (selectedOptionValues.every((selectedValue) => loadedOptions.find((option) => option.value === selectedValue))\n        ? of(loadedOptions)\n        : this.rxNamedListService.getOptionsForValues(this.namedListDefinition, selectedOptionValues)\n      ).subscribe((options) => {\n        this.showDefaultTitle = true;\n\n        if (!this.isMultipleSelectionEnabled && selectedOptionValues.length > 1) {\n          // If the field instance contains multiple values but the component doesn't have multiple selection\n          // enabled e.g. when field was edited in the data editor, the display value will be blank (null).\n          this.selectedOptions = [\n            {\n              displayValue: null,\n              value: this.formControl.value\n            }\n          ];\n        } else {\n          // If the record instance with a given value is not found e.g. referenced record\n          // was deleted, the display value for such record instance will be blank (null).\n          this.selectedOptions = selectedOptionValues.map(\n            (optionValue) =>\n              find(options, { value: optionValue }) || {\n                displayValue: null,\n                value: optionValue\n              }\n          );\n        }\n\n        if (this.formControl.dirty) {\n          this.formControl.markAsTouched();\n        }\n\n        this.triggerModelToViewValueUpdate();\n        this.updateNamedListFormattedValue();\n      });\n    }\n  }\n\n  private updateNamedListFormattedValue(): void {\n    if (this.isMultipleSelectionEnabled) {\n      const visibleOptionsCount = 50;\n\n      this.namedListFormattedValue =\n        this.selectedOptions\n          .slice(0, visibleOptionsCount)\n          .map((option) => option.displayValue)\n          .filter(Boolean)\n          .join(', ') || null;\n\n      if (this.selectedOptions.length >= visibleOptionsCount) {\n        this.namedListFormattedValue += '...';\n      }\n    } else {\n      this.namedListFormattedValue = this.selectedOptions.length ? first(this.selectedOptions).displayValue : null;\n    }\n  }\n\n  private triggerModelToViewValueUpdate(): void {\n    // trigger writeValue function in the control value accessor\n    this.formControl.setValue(this.formControl.value, { emitEvent: false });\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-textfield\n    *ngIf=\"!isNamedListAttached\"\n    [label]=\"label\"\n    [isPassword]=\"isPasswordField\"\n    [formControl]=\"formControl\"\n    [maxlength]=\"maxLength\"\n    [required]=\"isRequired\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [autocomplete]=\"!isPasswordField\"\n    [requiredLabel]=\"'com.bmc.arsys.rx.client.common.required-field.label' | translate\"\n  ></adapt-rx-textfield>\n\n  <rx-select-with-pagination\n    *ngIf=\"isNamedListAttached\"\n    [showDefaultTitle]=\"showDefaultTitle\"\n    [label]=\"label\"\n    [formControl]=\"formControl\"\n    [readonly]=\"isDisabled\"\n    [viewToModelValueAdapter]=\"viewToModelValueAdapterFunc\"\n    [modelToViewValueAdapter]=\"modelToViewValueAdapterFunc\"\n    [optionLoader]=\"optionLoaderFunc\"\n    [required]=\"isRequired\"\n    [isMultiSelectionMode]=\"isMultipleSelectionEnabled\"\n    (toggleDropdown)=\"onToggleDropdown($event)\"\n    [template]=\"namedListOptionTemplate\"\n  ></rx-select-with-pagination>\n</ng-template>\n\n<ng-template #namedListOptionTemplate let-option>\n  {{ option.displayValue }}\n  <div *ngIf=\"option.contextualFields\" class=\"text-secondary text-truncate\" [title]=\"option.title\">\n    <span class=\"breadcrumb-item active\" *ngFor=\"let contextualFieldValue of option.contextualFields\">\n      <small> {{ contextualFieldValue }} </small>\n    </span>\n  </div>\n</ng-template>\n"]}