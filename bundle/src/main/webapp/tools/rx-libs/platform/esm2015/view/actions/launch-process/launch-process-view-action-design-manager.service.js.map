{"version":3,"file":"launch-process-view-action-design-manager.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/actions/launch-process/launch-process-view-action-design-manager.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IViewActionDesignManager, RxViewActionRegistryService } from '@helix/platform/view/api';\nimport { ILaunchProcessViewDesignProperties } from './launch-process-view-action.types';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { IViewComponentDesignValidationIssue, RxViewExpressionValidatorService } from '@helix/platform/view/designer';\nimport { RxProcessDefinitionService } from '@helix/platform/process/api';\nimport { defaultIfEmpty, map, switchMap } from 'rxjs/operators';\nimport { flatten, forEach, isEmpty } from 'lodash';\nimport { IPlainObject } from '@helix/platform/shared/api';\n\n@Injectable()\nexport class RxLaunchProcessViewActionDesignManagerService\n  implements IViewActionDesignManager<ILaunchProcessViewDesignProperties>\n{\n  constructor(\n    private rxProcessDefinitionService: RxProcessDefinitionService,\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxViewExpressionValidatorService: RxViewExpressionValidatorService\n  ) {}\n\n  validate(\n    properties: ILaunchProcessViewDesignProperties,\n    propertyName: string\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    if (properties.processDefinitionName) {\n      return this.rxProcessDefinitionService.get(properties.processDefinitionName).pipe(\n        switchMap((processDefinition) =>\n          combineLatest([\n            this.validateInputParams(properties, propertyName, processDefinition.inputParams),\n            this.validateInputParamExpressions(properties, propertyName, processDefinition.inputParams)\n          ])\n        ),\n        map(flatten)\n      );\n    } else {\n      return of([]);\n    }\n  }\n\n  private validateInputParamExpressions(\n    actionParams: ILaunchProcessViewDesignProperties,\n    issuePropertyName: string,\n    processInputParams: IPlainObject[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    const actionDescriptor = this.rxViewActionRegistryService.get(actionParams.name);\n\n    const issues: Observable<IViewComponentDesignValidationIssue[]>[] = processInputParams\n      .filter((processInputParam) => actionParams[`actionProcessInputParams.${processInputParam.name}`])\n      .map((processInputParam) =>\n        this.rxViewExpressionValidatorService\n          .validate(\n            actionParams[`actionProcessInputParams.${processInputParam.name}`],\n            issuePropertyName,\n            actionDescriptor.label\n          )\n          .pipe(\n            map((issues) =>\n              issues.map((issue) => ({\n                ...issue,\n                description: `${actionDescriptor.label} action: ${issue.description}`\n              }))\n            )\n          )\n      );\n\n    return combineLatest(issues).pipe(defaultIfEmpty([]), map(flatten));\n  }\n\n  private validateInputParams(\n    actionParams: ILaunchProcessViewDesignProperties,\n    issuePropertyName: string,\n    processInputParams: IPlainObject[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    const actionDescriptor = this.rxViewActionRegistryService.get(actionParams.name);\n    const validationIssues = [];\n\n    forEach(processInputParams, (processInputParam) => {\n      const actionParamName = `actionProcessInputParams.${processInputParam.name}`;\n\n      if (processInputParam.fieldOption === 'REQUIRED' && isEmpty(actionParams[actionParamName])) {\n        validationIssues.push({\n          type: 'error',\n          description: `${actionDescriptor.label}: ${processInputParam.name} cannot be blank.`,\n          propertyName: issuePropertyName\n        });\n      }\n    });\n\n    return of(validationIssues);\n  }\n}\n"]}