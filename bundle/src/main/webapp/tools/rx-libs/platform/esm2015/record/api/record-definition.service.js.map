{"version":3,"file":"record-definition.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/record/api/record-definition.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  ICommand,\n  IHttpGetParams,\n  IHttpOptions,\n  RX_BUNDLE,\n  RxCommandFactoryService,\n  IPlainObject\n} from '@helix/platform/shared/api';\nimport { Observable, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { RX_RECORD_DEFINITION } from './record-definition.constant';\nimport { ArchiveType, AssociationSelectionType, IIndexDefinition, IRecordDefinition } from './record-definition.types';\nimport { IFieldDefinition, IFieldDefinitionsById } from './field-definition.interfaces';\nimport { assign, cloneDeep, defaults, get, mapValues, reduce, size } from 'lodash';\nimport { IFieldDefinitionOption } from './field-definition-option.interface';\nimport { ISelectionFieldDefinition } from './selection-field-definition.interface';\nimport { RxGuidService } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordDefinitionService {\n  private renameCommand: ICommand = this.rxCommandFactoryService.forResourceType(\n    'com.bmc.arsys.rx.application.record.command.RenameRecordDefinitionCommand'\n  );\n\n  private revertCustomizationCommand: ICommand = this.rxCommandFactoryService.forResourceType(\n    'com.bmc.arsys.rx.application.record.command.RevertRecordDefinitionCommand'\n  );\n\n  constructor(\n    private httpClient: HttpClient,\n    private rxCommandFactoryService: RxCommandFactoryService,\n    private rxGuidService: RxGuidService\n  ) {}\n\n  get(\n    recordDefinitionName: string,\n    options: IHttpGetParams = {},\n    skipLocalization = false\n  ): Observable<IRecordDefinition> {\n    return this.httpClient.get<IRecordDefinition>(this.getUrl(recordDefinitionName), options).pipe(\n      tap((recordDefinition: IRecordDefinition) => {\n        if (!skipLocalization) {\n          this.applyLocalization(recordDefinition);\n        }\n      })\n    );\n  }\n\n  getNew(): Observable<IRecordDefinition> {\n    const definition: IRecordDefinition = {\n      name: '',\n      description: null,\n      resourceType: RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType,\n      fieldDefinitions: cloneDeep(RX_RECORD_DEFINITION.coreFields) as IFieldDefinition[],\n      allowPermissionsOverlay: false,\n      allowOtherPropertiesOverlay: false,\n      allowNonAdminToDeleteRecordInstances: false,\n      allowIndexesOverlay: false,\n      allowFieldsOverlay: false,\n      archiveDescriptor: {\n        ageQualifierFieldId: RX_RECORD_DEFINITION.coreFieldIds.modifiedDate,\n        ageQualifierInDays: 365,\n        archiveDataCriteria: null,\n        archiveRecordDefinitionName: null,\n        archiveType: ArchiveType.None,\n        description: null,\n        includeAttachments: false,\n        isEnabled: false\n      },\n      associationsToFollowForArchive: {\n        specificAssociationNames: [],\n        selectionType: AssociationSelectionType.AllEnforced\n      },\n      enableCognitiveSearch: false,\n      indexDefinitions: [],\n      scope: RX_BUNDLE.definitionScopeTypes.bundle\n    };\n\n    definition.fieldDefinitions.filter(this.isSelectionFieldDefinition).forEach((selectionFieldDefinition) => {\n      selectionFieldDefinition.optionLabelsById = mapValues(selectionFieldDefinition.optionNamesById, () =>\n        this.rxGuidService.generate()\n      );\n    });\n\n    return of(definition);\n  }\n\n  create(recordDefinition: IRecordDefinition): Observable<any> {\n    return this.httpClient.post(this.getUrl(), recordDefinition);\n  }\n\n  update(recordDefinition: IRecordDefinition, options?: IHttpOptions): Observable<any> {\n    return this.httpClient.put(this.getUrl(recordDefinition.name), recordDefinition, options);\n  }\n\n  delete(recordDefinitionName: string): Observable<any> {\n    return this.httpClient.delete(this.getUrl(recordDefinitionName));\n  }\n\n  rename(oldRecordDefinitionName: string, newRecordDefinitionName: string): Observable<any> {\n    return this.renameCommand.execute({\n      name: oldRecordDefinitionName,\n      newName: newRecordDefinitionName\n    });\n  }\n\n  revertCustomization(recordDefinitionName: string): Observable<any> {\n    return this.revertCustomizationCommand.execute({ recordDefinitionName });\n  }\n\n  private getUrl(recordDefinitionName?: string): string {\n    return recordDefinitionName\n      ? `/api/rx/application/record/recorddefinition/${encodeURIComponent(recordDefinitionName)}`\n      : '/api/rx/application/record/recorddefinition';\n  }\n\n  private setOptionsByIdProperty(fieldDefinition: IFieldDefinition): void {\n    fieldDefinition.optionsById = reduce(\n      fieldDefinition.optionNamesById,\n      (optionsById, optionName, optionId) => {\n        optionsById[optionId] = {\n          id: optionId,\n          label: optionName\n        };\n\n        return optionsById;\n      },\n      {} as { [id: string]: IFieldDefinitionOption }\n    );\n  }\n\n  buildFieldDefinitionsByIdMap(recordDefinition: IRecordDefinition): IFieldDefinitionsById {\n    return reduce(\n      recordDefinition.fieldDefinitions,\n      (fieldDefinitionsById, fieldDefinition) => {\n        this.addFieldDefinitionToMap(fieldDefinition, fieldDefinitionsById, fieldDefinition.id);\n\n        return fieldDefinitionsById;\n      },\n      {} as IFieldDefinitionsById\n    );\n  }\n\n  addFieldDefinitionToMap(\n    fieldDefinition: IFieldDefinition,\n    fieldDefinitionsById: IFieldDefinitionsById,\n    field: string | number\n  ): void {\n    if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.selection.resourceType) {\n      this.setOptionsByIdProperty(fieldDefinition);\n    }\n\n    fieldDefinitionsById[field] = fieldDefinition;\n  }\n\n  setFieldDefinitionsToOptional(recordDefinition: IRecordDefinition): IRecordDefinition {\n    recordDefinition.fieldDefinitions.forEach((fieldDefinition) => {\n      if (fieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required) {\n        fieldDefinition.fieldOption = RX_RECORD_DEFINITION.fieldOptions.optional;\n      }\n    });\n\n    return recordDefinition;\n  }\n\n  private isSelectionFieldDefinition(fieldDefinition: IFieldDefinition): fieldDefinition is ISelectionFieldDefinition {\n    return fieldDefinition?.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection;\n  }\n\n  applyLocalization(recordDefinition: IRecordDefinition): void {\n    recordDefinition.fieldDefinitions\n      .filter(this.isSelectionFieldDefinition)\n      .forEach((fieldDefinition: ISelectionFieldDefinition) => {\n        const localizableStringsForField = get(recordDefinition.localizableStringsByFieldId, fieldDefinition.id);\n\n        fieldDefinition.optionLabelsById = mapValues(\n          defaults(fieldDefinition.optionLabelsById, fieldDefinition.optionNamesById),\n          (stringGuid, optionId) =>\n            get(localizableStringsForField, stringGuid, fieldDefinition.optionNamesById[optionId])\n        );\n      });\n  }\n\n  isRegularRecord(recordDefinition: IRecordDefinition): boolean {\n    return recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType;\n  }\n\n  isExternalRecord(recordDefinition: IRecordDefinition): boolean {\n    return (\n      recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.external.recordDefinitionType &&\n      !this.isCustomRecord(recordDefinition)\n    );\n  }\n\n  isJoinRecord(recordDefinition: IRecordDefinition): boolean {\n    return recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType;\n  }\n\n  isCustomRecord(recordDefinition: IRecordDefinition): boolean {\n    return (\n      recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.external.recordDefinitionType &&\n      recordDefinition.type === RX_RECORD_DEFINITION.externalRecordDefinitionTypes.custom\n    );\n  }\n\n  isAutomaticIndex(index: IIndexDefinition): boolean {\n    return (\n      index.unique && size(index.indexFieldIds) === 1 && index.indexFieldIds[0] === RX_RECORD_DEFINITION.coreFieldIds.id\n    );\n  }\n}\n"]}