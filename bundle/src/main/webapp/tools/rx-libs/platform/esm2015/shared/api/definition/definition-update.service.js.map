{"version":3,"file":"definition-update.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/definition/definition-update.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,sBAAsB,EAAE,MAAM,wBAAwB,CAAC;AAChE,OAAO,EAAE,IAAI,EAAc,UAAU,EAAE,MAAM,MAAM,CAAC;AACpD,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AACvD,OAAO,EAAE,iBAAiB,EAAE,MAAM,2CAA2C,CAAC;;;AAM9E,MAAM,OAAO,yBAAyB;IACpC,YAAoB,sBAA8C;QAA9C,2BAAsB,GAAtB,sBAAsB,CAAwB;IAAG,CAAC;IAEtE,OAAO,CAAC,QAAyD;QAC/D,OAAO,QAAQ,EAAE,CAAC,IAAI,CACpB,UAAU,CAAC,CAAC,KAAK,EAAE,EAAE;YACnB,IAAI,KAAK,CAAC,MAAM,KAAK,iBAAiB,CAAC,6BAA6B,EAAE;gBACpE,OAAO,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,qBAAqB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAC7F,SAAS,CAAC,CAAC,WAAW,EAAE,EAAE;oBACxB,IAAI,WAAW,EAAE;wBACf,OAAO,QAAQ,CAAC;4BACd,OAAO,EAAE;gCACP,0BAA0B,EAAE,MAAM;6BACnC;yBACF,CAAC,CAAC;qBACJ;yBAAM;wBACL,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;qBAC1B;gBACH,CAAC,CAAC,CACH,CAAC;aACH;iBAAM;gBACL,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;aAC1B;QACH,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;;sHAzBU,yBAAyB;0HAAzB,yBAAyB,cAFxB,MAAM;2FAEP,yBAAyB;kBAHrC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { RxUtilityModalsService } from '@helix/platform/ui-kit';\nimport { from, Observable, throwError } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { RX_ERROR_HANDLING } from '../error-handling/error-handling.constant';\nimport { IHttpOptions } from '../http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxDefinitionUpdateService {\n  constructor(private rxUtilityModalsService: RxUtilityModalsService) {}\n\n  execute(updateFn: (httpOptions?: IHttpOptions) => Observable<any>): Observable<any> {\n    return updateFn().pipe(\n      catchError((error) => {\n        if (error.status === RX_ERROR_HANDLING.optimisticLockErrorHttpStatus) {\n          return from(this.rxUtilityModalsService.confirmExternalChange(error.error[0].messageText)).pipe(\n            switchMap((isConfirmed) => {\n              if (isConfirmed) {\n                return updateFn({\n                  headers: {\n                    'Override-Optimistic-Lock': 'true'\n                  }\n                });\n              } else {\n                return throwError(error);\n              }\n            })\n          );\n        } else {\n          return throwError(error);\n        }\n      })\n    );\n  }\n}\n"]}