{"version":3,"file":"view-action-expression-configurator.class.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/designer/expression-configurator/view-action-expression-configurator.class.ts"],"names":[],"mappings":"AACA,OAAO,EAGL,mCAAmC,EACnC,2BAA2B,EAC5B,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AAC7B,OAAO,EAAE,4BAA4B,EAAE,MAAM,sCAAsC,CAAC;AACpF,OAAO,EAAE,2BAA2B,EAAE,MAAM,iDAAiD,CAAC;AAE9F,MAAM,OAAO,kCACX,SAAQ,4BAA4B;IAapC,YAAsB,QAAkB,EAAY,UAAkB,EAAY,UAAkB;QAClG,KAAK,CAAC,QAAQ,CAAC,CAAC;QADI,aAAQ,GAAR,QAAQ,CAAU;QAAY,eAAU,GAAV,UAAU,CAAQ;QAAY,eAAU,GAAV,UAAU,CAAQ;QAV5F,gCAA2B,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAA8B,2BAA2B,CAAC,CAAC;QAE1G,wCAAmC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAC7D,mCAAmC,CACpC,CAAC;QAEM,gCAA2B,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAA8B,2BAA2B,CAAC,CAAC;QAElH,0BAAqB,GAAG,IAAI,CAAC,2BAA2B,CAAC,uBAAuB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAIlG,CAAC;IAED,sBAAsB,CAAC,YAAoB;QACzC,MAAM,kBAAkB,GAAG,IAAI,CAAC,2BAA2B;aACxD,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;aACpB,UAAU,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,YAAY,CAAC,CAAC;QAE3D,OAAO,GAAG,CAAC,kBAAkB,EAAE,kBAAkB,EAAE,IAAI,CAAC,mCAAmC,CAAC,CAAC;IAC/F,CAAC;CACF","sourcesContent":["import { Injector } from '@angular/core';\nimport {\n  IExpressionEvaluator,\n  IViewActionExpressionConfigurator,\n  RxDefaultExpressionEvaluatorService,\n  RxViewActionRegistryService\n} from '@helix/platform/view/api';\nimport { get } from 'lodash';\nimport { RxViewExpressionConfigurator } from './view-expression-configurator.class';\nimport { RxViewDataDictionaryService } from '../data-dictionary/view-data-dictionary.service';\n\nexport class RxViewActionExpressionConfigurator\n  extends RxViewExpressionConfigurator\n  implements IViewActionExpressionConfigurator\n{\n  private rxViewDataDictionaryService = this.injector.get<RxViewDataDictionaryService>(RxViewDataDictionaryService);\n\n  private rxDefaultExpressionEvaluatorService = this.injector.get<RxDefaultExpressionEvaluatorService>(\n    RxDefaultExpressionEvaluatorService\n  );\n\n  private rxViewActionRegistryService = this.injector.get<RxViewActionRegistryService>(RxViewActionRegistryService);\n\n  commonDataDictionary$ = this.rxViewDataDictionaryService.getActionDataDictionary(this.actionGuid);\n\n  constructor(protected injector: Injector, protected actionType: string, protected actionGuid: string) {\n    super(injector);\n  }\n\n  getExpressionEvaluator(propertyName: string): IExpressionEvaluator {\n    const propertyDescriptor = this.rxViewActionRegistryService\n      .get(this.actionType)\n      .parameters.find((param) => param.name === propertyName);\n\n    return get(propertyDescriptor, 'evaluatorService', this.rxDefaultExpressionEvaluatorService);\n  }\n}\n"]}