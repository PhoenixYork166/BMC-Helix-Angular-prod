{"version":3,"file":"string.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/utils/string/string.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAC;AACtH,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,eAAe,MAAM,kBAAkB,CAAC;;AAK/C,MAAM,OAAO,eAAe;IAC1B,QAAQ,CAAC,KAAa;QACpB,OAAO,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACtC,CAAC;IAED,gBAAgB,CAAC,GAAQ;QACvB,OAAO,QAAQ,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC;IACzC,CAAC;IAED,WAAW,CAAC,MAAc;QACxB,OAAO,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IAC/B,CAAC;IAED,MAAM,CAAC,GAAW;QAChB,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;IACxB,CAAC;IAED,YAAY,CAAC,IAAY;QACvB,OAAO,IAAI,CAAC,OAAO,CAAC,0BAA0B,EAAE,MAAM,CAAC,CAAC;IAC1D,CAAC;IAED,qBAAqB,CAAC,QAAgB,EAAE,SAAiB;QACvD,OAAO,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;IACzD,CAAC;IAED,sBAAsB,CAAC,aAAqB,EAAE,eAAuB;QACnE,OAAO,OAAO,CAAC,aAAa,CAAC,KAAK,OAAO,CAAC,eAAe,CAAC,CAAC;IAC7D,CAAC;IAED,qFAAqF;IACrF,4EAA4E;IAC5E,0FAA0F;IAC1F,0FAA0F;IAC1F,2BAA2B;IAC3B,OAAO,CAAC,cAAsB;QAC5B,OAAO,cAAc,IAAI,cAAc,CAAC,KAAK,CAAC,iBAAiB,CAAC;YAC9D,CAAC,CAAC,IAAI,CAAC,MAAM,CACT,eAAe,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,8BAA8B,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAC3G;YACH,CAAC,CAAC,cAAc,CAAC;IACrB,CAAC;IAED,yDAAyD;IACzD,6FAA6F;IAC7F,UAAU,CAAC,GAAW,EAAE,KAA6B;QACnD,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE;YAC1B,IAAI,KAAK,GAAG,KAAK,CAAC;YAElB,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;gBAClB,KAAK,GAAG,IAAI,KAAK,GAAG,CAAC;aACtB;iBAAM,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;gBACzB,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACxB;YAED,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;;4GAxDU,eAAe;gHAAf,eAAe,cAFd,MAAM;2FAEP,eAAe;kBAH3B,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { includes, isEmpty, isString, kebabCase, toLower, trim, some, isRegExp, lowerCase, upperFirst } from 'lodash';\nimport utf8 from 'utf8';\nimport quotedPrintable from 'quoted-printable';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxStringService {\n  prettify(value: string): string {\n    return upperFirst(lowerCase(value));\n  }\n\n  isNonEmptyString(str: any): boolean {\n    return isString(str) && str.length > 0;\n  }\n\n  isEmptySafe(string: string): boolean {\n    return isEmpty(trim(string));\n  }\n\n  toRxId(str: string): string {\n    return kebabCase(str);\n  }\n\n  escapeRegExp(text: string): string {\n    return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  caseInsensitiveSearch(searchIn: string, searchFor: string): boolean {\n    return includes(toLower(searchIn), toLower(searchFor));\n  }\n\n  caseInsensitiveIsEqual(stringInitial: string, stringToCompare: string): boolean {\n    return toLower(stringInitial) === toLower(stringToCompare);\n  }\n\n  // Decodes a UTF-8 string encoded with Q encoding according to the rules of RFC 2047.\n  // The decoding is done with the use of utf8 and quoted-printable libraries.\n  // Some manipulations are done first to strip the 'charset' and 'encoding' from the string\n  // as well as replace underscores (_) with a space (=20) in order to convert the string to\n  // quoted-printable format.\n  decodeQ(qEncodedString: string): string {\n    return qEncodedString && qEncodedString.match(/^=\\?utf-8\\?q\\?/i)\n      ? utf8.decode(\n          quotedPrintable.decode(qEncodedString.replace(/\\s?=\\?utf-8\\?q\\?([^?]+)\\?=/gi, '$1').replace(/\\_/g, '=20'))\n        )\n      : qEncodedString;\n  }\n\n  // Determines if a given string is included in the array.\n  // Array can contain strings, or regular expressions against which the string will be tested.\n  isIncluded(str: string, array: Array<string | RegExp>): boolean {\n    return some(array, (item) => {\n      let match = false;\n\n      if (isString(item)) {\n        match = item === str;\n      } else if (isRegExp(item)) {\n        match = item.test(str);\n      }\n\n      return match;\n    });\n  }\n}\n"]}