{"version":3,"file":"interactive-evaluation-blade.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/admin/components/cognitive-training/components/interactive-evaluation-blade/interactive-evaluation-blade.component.ts","../../../../../../../../../libs/platform/admin/components/cognitive-training/components/interactive-evaluation-blade/interactive-evaluation-blade.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Injector, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { chain } from 'lodash';\nimport { DismissReasons, DockedPanelContext, RxSelectOption } from '@bmc-ux/adapt-angular';\nimport { RX_RECORD_DEFINITION, RxRecordInstanceDataPageService } from '@helix/platform/record/api';\nimport { IDataPageParams, IDataPageResult, IPlainObject, RxCommandFactoryService } from '@helix/platform/shared/api';\nimport { RxModalClass } from '@helix/platform/ui-kit';\nimport { RX_COGNITIVE_TRAINING } from '../../cognitive-training.constant';\nimport { ICognitiveTrainingClassification, ICognitiveTrainingDataSet } from '../../cognitive-training.types';\n\n@Component({\n  selector: 'rx-interactive-evaluation-blade',\n  templateUrl: './interactive-evaluation-blade.component.html'\n})\nexport class InteractiveEvaluationBladeComponent extends RxModalClass implements OnInit {\n  @ViewChild('interactiveEvaluationForm', { static: true, read: NgForm })\n  interactiveEvaluationForm: NgForm;\n\n  busy: Subscription;\n  contextData: IPlainObject;\n  trainedDataSet: RxSelectOption;\n\n  classifications: ICognitiveTrainingClassification[] = [];\n  evaluationText = '';\n  trainedDataSetOptions: RxSelectOption[] = [];\n\n  constructor(\n    private dockedPanelContext: DockedPanelContext,\n    private rxCommandFactoryService: RxCommandFactoryService,\n    private rxRecordInstanceDataPageService: RxRecordInstanceDataPageService,\n    protected injector: Injector\n  ) {\n    super(dockedPanelContext, injector);\n    this.contextData = this.dockedPanelContext.getData();\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n    this.getDataSetList();\n  }\n\n  isDirty(): boolean {\n    return this.interactiveEvaluationForm.dirty;\n  }\n\n  optionFormatter = (opt: RxSelectOption) => opt.name;\n\n  getDataSetList(): void {\n    const params: IDataPageParams = {\n      recorddefinition: RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName,\n      sortBy: RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName,\n\n      queryExpression:\n        this.contextData.evaluation.queryExpression +\n        JSON.stringify(this.contextData.bundleId) +\n        this.contextData.evaluation.serviceProviderQueryExpresion +\n        this.contextData.trainingType.uniqueValue,\n\n      propertySelection: [\n        RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName,\n        RX_RECORD_DEFINITION.coreFieldIds.status\n      ].join(',')\n    };\n\n    this.busy = this.rxRecordInstanceDataPageService.post({ params }).subscribe((result: IDataPageResult) => {\n      this.trainedDataSetOptions = chain(result.data)\n        .filter(\n          (dataSet: ICognitiveTrainingDataSet) =>\n            dataSet[RX_RECORD_DEFINITION.coreFieldIds.status] ===\n              RX_COGNITIVE_TRAINING.settings.trainingStatuses.trained.value ||\n            dataSet[RX_RECORD_DEFINITION.coreFieldIds.status] ===\n              RX_COGNITIVE_TRAINING.settings.trainingStatuses.pendingRetraining.value\n        )\n        .map((dataSet: ICognitiveTrainingDataSet) => ({\n          id: this.trainedDataSetOptions.length + 1,\n          name: dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName]\n        }))\n        .value();\n    });\n  }\n\n  classify(): void {\n    this.rxCommandFactoryService\n      .forResourceType(RX_COGNITIVE_TRAINING.settings.commands.classify)\n      .execute({\n        textToClassify: this.evaluationText,\n        trainingDataSetName: this.contextData.bundleId + ':' + this.trainedDataSet[0].name\n      })\n      .subscribe((classifications: ICognitiveTrainingClassification[]) => {\n        this.classifications = classifications;\n      });\n  }\n\n  displayClassification(classification: ICognitiveTrainingClassification): string {\n    return `${classification.className} ${classification.confidence.toFixed(2)}`;\n  }\n\n  onCloseClick(): void {\n    this.dockedPanelContext.dismiss(DismissReasons.CLOSE_BTN);\n  }\n}\n","<div class=\"dp-body\">\n  <form #interactiveEvaluationForm=\"ngForm\">\n    <rx-busy-indicator [options]=\"{ busy: busy, loaderType: 'section' }\"></rx-busy-indicator>\n\n    <div class=\"d-flex flex-row justify-content-between\">\n      <adapt-rx-select\n        class=\"form-group d-block w-100\"\n        name=\"trained-data-set\"\n        label=\"{{\n          'com.bmc.arsys.rx.client.admin.cognitive-training.interactive-evaluation-blade.trained-data-set.label'\n            | translate\n        }}\"\n        rx-id=\"trained-data-set-field\"\n        required\n        [options]=\"trainedDataSetOptions\"\n        [optionFormatter]=\"optionFormatter\"\n        [(ngModel)]=\"trainedDataSet\"\n      >\n      </adapt-rx-select>\n\n      <button\n        class=\"d-icon-refresh_adapt\"\n        type=\"button\"\n        rx-id=\"refresh-button\"\n        adapt-button\n        btn-type=\"tertiary\"\n        (click)=\"getDataSetList()\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.refresh.label' | translate }}\n      </button>\n    </div>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"evaluation-text\"\n      label=\"{{\n        'com.bmc.arsys.rx.client.admin.cognitive-training.interactive-evaluation-blade.text.label' | translate\n      }}\"\n      rx-id=\"evaluation-text-field\"\n      required\n      [tooltip]=\"{\n        iconName: 'question_circle_o',\n        content: 'Separate text entries for multiple fields with a comma.',\n        placement: 'right',\n        popoverMode: true\n      }\"\n      [(ngModel)]=\"evaluationText\"\n    >\n    </adapt-rx-textfield>\n\n    <button\n      type=\"button\"\n      rx-id=\"classify-button\"\n      adapt-button\n      btn-type=\"primary\"\n      [disabled]=\"interactiveEvaluationForm.invalid\"\n      (click)=\"classify()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.interactive-evaluation.classify.label' | translate }}\n    </button>\n\n    <div *ngIf=\"classifications\">\n      <hr />\n\n      <div class=\"card card-well mb-2\" *ngFor=\"let classification of classifications; let index = index\">\n        {{ displayClassification(classification) }}\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button class=\"mr-2\" type=\"button\" rx-id=\"close-button\" adapt-button btn-type=\"secondary\" (click)=\"onCloseClick()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n"]}