{"version":3,"file":"view-component-descriptor.types.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/api/registries/view-component-descriptor.types.ts"],"names":[],"mappings":"AA2GA,MAAM,CAAN,IAAY,yBAMX;AAND,WAAY,yBAAyB;IACnC,gDAAmB,CAAA;IACnB,8CAAiB,CAAA;IACjB,8CAAiB,CAAA;IACjB,4CAAe,CAAA;IACf,8CAAiB,CAAA;AACnB,CAAC,EANW,yBAAyB,KAAzB,yBAAyB,QAMpC","sourcesContent":["import { ComponentFactory, Injector, Type } from '@angular/core';\nimport { IExpressionConfigurator, IExpressionConfiguratorProvider, IPlainObject } from '@helix/platform/shared/api';\nimport { IExpressionEvaluator } from '../expressions/expression-evaluator.types';\nimport { IViewDefinitionPermission } from '../domain/view-definition-permission.interface';\n\nexport interface IViewComponentDescriptor {\n  // type/selector that uniquely identifies the component\n  type: string;\n\n  // alternative types that can be used by component\n  aliases?: string[];\n\n  // named areas withing a component where the child components will be rendered\n  outlets?: { name: string }[];\n\n  // component factory for creating the component at runtime\n  componentFactory?: ComponentFactory<any>; // IViewComponent\n\n  // descriptors of a component's runtime properties\n  properties?: IComponentPropertyDescriptor[];\n\n  // name of a property in the parent component's propertiesByName where\n  // propertiesByName of the current data component will be stored at runtime\n  configPropertyName?: string;\n\n  // name of the component as displayed in the view designer palette\n  // and used as the default label\n  name?: string;\n\n  // optional index that used for sorting components in palette\n  index?: number;\n\n  // ID of a bundle to which this component logically belongs.\n  // If the specified bundle is not deployed, the component will not be available\n  // in the view designer palette.\n  bundleId?: string;\n\n  // list of bundle IDs within which this component will be available at design time;\n  // if not specified, or blank, the component will be available in all bundles.\n  availableInBundles?: Array<string | RegExp>;\n\n  // component factory for creating the component at design time\n  designComponentFactory?: ComponentFactory<any>;\n\n  // component's design time model\n  designComponentModel?: IViewDesignerComponentModelConstructor;\n\n  expressionConfigurator?: Type<IExpressionConfigurator>;\n\n  // name of a view designer palette group in which this component will be displayed\n  group?: string;\n\n  // flag indicating whether the component should be hidden in the view designer palette;\n  // data and page components are always hidden\n  hidden?: boolean;\n\n  // CSS class name for the icon to display in the view designer palette\n  icon?: string;\n\n  // flag indicating whether this component can contain child components, including data components\n  isContainerComponent?: boolean;\n\n  // flag indicating whether this is a data component\n  // used for storing the data related to its parent component\n  // but not rendered as an individual component, e.g. record grid column\n  isDataComponent?: boolean;\n\n  // flag indicating whether this is a page component\n  isPageComponent?: boolean;\n\n  // additional options\n  options?: IPlainObject;\n\n  // callback that is executed to decide whether this component can be dropped\n  // on a target component on the view designer canvas\n  canBeInsertedInto?(componentTypes: string[]): boolean;\n}\n\nexport interface IViewDesignerComponentModel<TProperties = IPlainObject, TDesignProperties = TProperties>\n  extends IExpressionConfiguratorProvider {\n  rxInit?(): void;\n\n  getPropertiesByName?(props: TDesignProperties): TProperties;\n}\n\nexport interface IViewDesignerComponentModelConstructor {\n  new (injector: Injector, sandbox: any): IViewDesignerComponentModel;\n\n  getInitialProperties?(initialProperties: IPlainObject): IPlainObject;\n\n  getDefaultPermissions?(): IViewDefinitionPermission[];\n}\n\nexport interface IComponentPropertyDescriptor {\n  name: string;\n  label?: string;\n  // if provided, runtime will try to cast property value to provided type\n  type?: ViewComponentPropertyType;\n  // if provided, designer will try to cast property value to provided type\n  designType?: ViewComponentPropertyType;\n  enableExpressionEvaluation?: boolean;\n  // custom Expression Evaluator Service\n  evaluatorService?: IExpressionEvaluator;\n  // if provided true, property value will be localizable\n  localizable?: boolean;\n}\n\nexport enum ViewComponentPropertyType {\n  Boolean = 'boolean',\n  String = 'string',\n  Number = 'number',\n  Array = 'array',\n  Object = 'object'\n}\n"]}