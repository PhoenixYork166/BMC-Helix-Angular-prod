{"version":3,"file":"wizard.types.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/components/wizard/wizard.types.ts"],"names":[],"mappings":"","sourcesContent":["import { ComponentFactory } from '@angular/core';\nimport { IPlainObject } from '@helix/platform/shared/api';\n\nexport interface IWizardApi {\n  isCurrentStepActive(stepId: string): boolean;\n\n  addStep(step: IWizardStep, index?: number): void;\n\n  complete(): void;\n\n  disableFinishButton(): void;\n\n  disableNextButton(): void;\n\n  disablePreviousButton(): void;\n\n  enableFinishButton(): void;\n\n  enableNextButton(): void;\n\n  enablePreviousButton(): void;\n\n  getSteps(): IWizardStep[];\n\n  markPristine(): void;\n\n  markDirty(): void;\n\n  removeNextSteps(startIndex: number): void;\n\n  removeStep(index: number): void;\n\n  renew(): void;\n\n  setFinishButtonLabel(label: string): void;\n\n  updateContext(context: IPlainObject, markDirty?: boolean): void;\n}\n\nexport interface IWizardStep {\n  componentFactory: ComponentFactory<any>;\n  id: string;\n  isActivated?: boolean;\n  name: string;\n  options?: IPlainObject;\n\n  // If set to true, the wizard will not automatically go to the next step when the Next button is pressed.\n  // It will only emit a value using the next$ observable.\n  // The step component has to subscribe to it and call next() with the 'force' parameter in order to navigate to the next step.\n  handlesNext?: boolean;\n}\n\nexport interface IWizardOptions {\n  allowClose?: boolean;\n  allowFinish?: boolean;\n  finishButtonLabel?: string;\n  isDirty?: boolean;\n  isFinishButtonDisabled?: boolean;\n  isNextButtonDisabled?: boolean;\n  isPreviousButtonDisabled?: boolean;\n  notificationMessage?: string;\n  steps: IWizardStep[];\n  title: string;\n}\n\nexport interface IWizardConfig<TContext> {\n  context: TContext;\n\n  options: IWizardOptions;\n}\n"]}