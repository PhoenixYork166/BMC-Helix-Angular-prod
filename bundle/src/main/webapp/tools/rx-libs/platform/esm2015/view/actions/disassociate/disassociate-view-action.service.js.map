{"version":3,"file":"disassociate-view-action.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/actions/disassociate/disassociate-view-action.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAC1D,OAAO,EAAE,wBAAwB,EAAE,MAAM,0BAA0B,CAAC;AACpE,OAAO,EACL,+BAA+B,EAC/B,8BAA8B,EAC9B,4BAA4B,EAC7B,MAAM,iCAAiC,CAAC;AAEzC,OAAO,EAAc,EAAE,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAClD,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AAClD,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;;;;;AAKhD,MAAM,OAAO,+BAA+B;IAC1C,YACU,YAA0B,EAC1B,wBAAkD,EAClD,8BAA8D,EAC9D,4BAA0D;QAH1D,iBAAY,GAAZ,YAAY,CAAc;QAC1B,6BAAwB,GAAxB,wBAAwB,CAA0B;QAClD,mCAA8B,GAA9B,8BAA8B,CAAgC;QAC9D,iCAA4B,GAA5B,4BAA4B,CAA8B;IACjE,CAAC;IAEJ,OAAO,CAAC,MAAqC;QAC3C,IAAI,CAAC,MAAM,CAAC,kBAAkB,EAAE;YAC9B,OAAO,UAAU,CAAC,IAAI,OAAO,CAAC,4DAA4D,CAAC,CAAC,CAAC;SAC9F;QAED,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;QAElG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,wCAAwC,WAAW,CAAC,MAAM,YAAY,CAAC,CAAC;QAEhG,IAAI,WAAW,CAAC,MAAM,EAAE;YACtB,OAAO,IAAI,CAAC,8BAA8B,CAAC,GAAG,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC,IAAI,CACnF,SAAS,CAAC,GAAG,EAAE;gBACb,IAAI,QAAkB,EACpB,QAAQ,GAAa,EAAE,CAAC;gBAE1B,IAAI,MAAM,CAAC,yBAAyB,KAAK,+BAA+B,CAAC,KAAK,CAAC,KAAK,EAAE;oBACpF,QAAQ,GAAG,WAAW,CAAC;oBACvB,QAAQ,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;iBACxC;qBAAM,IAAI,MAAM,CAAC,yBAAyB,KAAK,+BAA+B,CAAC,KAAK,CAAC,KAAK,EAAE;oBAC3F,QAAQ,GAAG,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;oBACvC,QAAQ,GAAG,WAAW,CAAC;iBACxB;gBAED,OAAO,IAAI,CAAC,4BAA4B;qBACrC,mBAAmB,CAAC,MAAM,CAAC,yBAAyB,EAAE,QAAQ,EAAE,QAAQ,CAAC;qBACzE,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;YAC9B,CAAC,CAAC,CACH,CAAC;SACH;aAAM;YACL,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;SACf;IACH,CAAC;;4HAvCU,+BAA+B;gIAA/B,+BAA+B,cAF9B,MAAM;2FAEP,+BAA+B;kBAH3C,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IViewActionService } from '@helix/platform/view/api';\nimport { RxLogService } from '@helix/platform/shared/api';\nimport { RxViewActionUtilsService } from '@helix/platform/view/api';\nimport {\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RxAssociationDefinitionService,\n  RxAssociationInstanceService\n} from '@helix/platform/association/api';\nimport { IDisassociateViewActionParams } from './disassociate-view-action.interfaces';\nimport { Observable, of, throwError } from 'rxjs';\nimport { switchMap, mapTo } from 'rxjs/operators';\nimport { RxError } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxDisassociateViewActionService implements IViewActionService<IDisassociateViewActionParams, string[]> {\n  constructor(\n    private rxLogService: RxLogService,\n    private rxViewActionUtilsService: RxViewActionUtilsService,\n    private rxAssociationDefinitionService: RxAssociationDefinitionService,\n    private rxAssociationInstanceService: RxAssociationInstanceService\n  ) {}\n\n  execute(params: IDisassociateViewActionParams): Observable<string[]> {\n    if (!params.associatedRecordId) {\n      return throwError(new RxError('rxDisassociateAction: Associated Record ID is not defined.'));\n    }\n\n    const instanceIds = this.rxViewActionUtilsService.extractRecordIds(params.disassociatedRecordIds);\n\n    this.rxLogService.debug(`RxDisassociateAction: disassociating ${instanceIds.length} record(s)`);\n\n    if (instanceIds.length) {\n      return this.rxAssociationDefinitionService.get(params.associationDefinitionName).pipe(\n        switchMap(() => {\n          let nodeAIds: string[],\n            nodeBIds: string[] = [];\n\n          if (params.associationDefinitionRole === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value) {\n            nodeAIds = instanceIds;\n            nodeBIds = [params.associatedRecordId];\n          } else if (params.associationDefinitionRole === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value) {\n            nodeAIds = [params.associatedRecordId];\n            nodeBIds = instanceIds;\n          }\n\n          return this.rxAssociationInstanceService\n            .disassociateRecords(params.associationDefinitionName, nodeAIds, nodeBIds)\n            .pipe(mapTo(instanceIds));\n        })\n      );\n    } else {\n      return of([]);\n    }\n  }\n}\n"]}