{"version":3,"file":"record-instance.class.js","sourceRoot":"","sources":["../../../../../../libs/platform/record/api/record-instance.class.ts"],"names":[],"mappings":"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","sourcesContent":["import { IRecordDefinition } from './record-definition.types';\nimport { RecordInstanceValidation } from './record-instance-validation.class';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { IFieldInstance } from './field-instance.interface';\nimport {\n  cloneDeep,\n  find,\n  forEach,\n  forOwn,\n  get,\n  includes,\n  isNull,\n  isNaN,\n  isString,\n  isUndefined,\n  reduce,\n  set,\n  some,\n  toNumber\n} from 'lodash';\nimport {\n  IFieldValueChanged,\n  IRecordInstance,\n  IRxFieldValidationResult,\n  IRxRecordInstanceAssociationInstances,\n  IRxValidationResult\n} from './record-instance.types';\nimport { IAssociationRecords } from '@helix/platform/association/api';\nimport { RX_RECORD_DEFINITION } from './record-definition.constant';\nimport { Injector } from '@angular/core';\nimport { RxLocalizationService, RxLogService } from '@helix/platform/shared/api';\nimport BigNumber from 'bignumber.js';\nimport { IFieldDefinition } from './field-definition.interfaces';\nimport { RxNumberUtilsService, RxStringService } from '@helix/platform/utils';\n\nexport class RecordInstance implements IRecordInstance {\n  readonly resourceType: string;\n\n  private fieldValueChangedSubject = new Subject<IFieldValueChanged>();\n\n  validation$ = new BehaviorSubject<IRxValidationResult>(null);\n  id: string;\n  fieldValueChanged$: Observable<IFieldValueChanged> = this.fieldValueChangedSubject.asObservable();\n  displayId: string;\n  recordDefinitionName: string;\n  permittedGroupsBySecurityLabels: any;\n  permittedUsersBySecurityLabels: any;\n  permittedRolesBySecurityLabels: any;\n  fieldInstances: { [fieldId: number]: IFieldInstance };\n  originalData: IRecordInstance;\n  associationInstances: IRxRecordInstanceAssociationInstances;\n\n  private rxLogService: RxLogService = this.injector.get<RxLogService>(RxLogService);\n  private rxLocalizationService: RxLocalizationService =\n    this.injector.get<RxLocalizationService>(RxLocalizationService);\n  private rxStringService: RxStringService = this.injector.get<RxStringService>(RxStringService);\n  private rxNumberUtilsService: RxNumberUtilsService = this.injector.get<RxNumberUtilsService>(RxNumberUtilsService);\n  private validationService: RecordInstanceValidation = new RecordInstanceValidation();\n\n  constructor(public recordDefinition: IRecordDefinition, recordInstance: IRecordInstance, private injector: Injector) {\n    this.prepareRecordInstance(recordInstance);\n\n    this.originalData = cloneDeep(recordInstance);\n\n    Object.assign(this, recordInstance);\n\n    this.validate();\n  }\n\n  private prepareRecordInstance(recordInstance: IRecordInstance): void {\n    // convert numeric field instance values from string to BigNumber instance\n    this.recordDefinition.fieldDefinitions\n      .filter((fieldDefinition) =>\n        includes(\n          [\n            RX_RECORD_DEFINITION.dataTypes.integer.resourceType,\n            RX_RECORD_DEFINITION.dataTypes.decimal.resourceType,\n            RX_RECORD_DEFINITION.dataTypes.real.resourceType\n          ],\n          fieldDefinition.resourceType\n        )\n      )\n      .forEach((fieldDefinition) => {\n        const fieldInstance = recordInstance.fieldInstances[fieldDefinition.id];\n\n        if (fieldInstance && fieldInstance.value) {\n          fieldInstance.value = new BigNumber(fieldInstance.value);\n        }\n      });\n\n    // update decimal field definition min and max numbers based on the precision\n    this.recordDefinition.fieldDefinitions\n      .filter((fieldDefinition) => fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.decimal.resourceType)\n      .forEach((fieldDefinition: IFieldDefinition) => {\n        // According to the backend side, min and max number must be based on the precision. E.g when:\n        // - precision is 1, safe number will be 1e27 - 0.1 = 99999999999999999999999999.9\n        // - precision is 3, safe number will be 1e25 - 0.001 = 999999999999999999999999.999\n        const base = new BigNumber(0.1).pow(fieldDefinition.precision);\n        const safeRangeNumber = new BigNumber(1e28).multipliedBy(base).minus(base);\n\n        fieldDefinition.maxValue = new BigNumber(fieldDefinition.maxValue);\n        fieldDefinition.minValue = new BigNumber(fieldDefinition.minValue);\n\n        if (fieldDefinition.maxValue.isGreaterThanOrEqualTo(safeRangeNumber)) {\n          fieldDefinition.maxValue = safeRangeNumber;\n        }\n\n        if (fieldDefinition.minValue.isLessThanOrEqualTo(safeRangeNumber.negated())) {\n          fieldDefinition.minValue = safeRangeNumber.negated();\n        }\n      });\n\n    // convert boolean and selection field instance values from string to number\n    this.recordDefinition.fieldDefinitions\n      .filter((fieldDefinition) =>\n        includes(\n          [RX_RECORD_DEFINITION.dataTypes.boolean.resourceType, RX_RECORD_DEFINITION.dataTypes.selection.resourceType],\n          fieldDefinition.resourceType\n        )\n      )\n      .forEach((fieldDefinition) => {\n        const fieldInstance = recordInstance.fieldInstances[fieldDefinition.id];\n\n        if (fieldInstance && fieldInstance.value) {\n          fieldInstance.value = toNumber(fieldInstance.value);\n        }\n      });\n\n    // add default value for localized character field component\n    this.recordDefinition.fieldDefinitions\n      .filter(\n        (fieldDefinition) =>\n          RX_RECORD_DEFINITION.dataTypes.localizedCharacter.resourceType === fieldDefinition.resourceType\n      )\n      .forEach((fieldDefinition) => {\n        const fieldInstance = recordInstance.fieldInstances[fieldDefinition.id];\n        const currentLocaleCode = this.rxLocalizationService.currentLocale;\n        const defaultLocaleCode = 'en-US';\n\n        if (fieldInstance && !fieldInstance.value && fieldInstance.valueByLocale) {\n          fieldInstance.value =\n            fieldInstance.valueByLocale[currentLocaleCode] || fieldInstance.valueByLocale[defaultLocaleCode];\n        }\n      });\n\n    // set placeholder value for password fields\n    RX_RECORD_DEFINITION.passwordFieldIds.forEach((passwordFieldId) => {\n      const passwordFieldInstance = recordInstance.fieldInstances[passwordFieldId];\n\n      if (passwordFieldInstance) {\n        passwordFieldInstance.value = '********';\n      }\n    });\n  }\n\n  getFieldValue(fieldId: number, associatedRecordPath?: string[]): any {\n    const fieldInstance = this.getFieldInstance(fieldId, associatedRecordPath);\n\n    return get(fieldInstance, 'value', null);\n  }\n\n  setFieldValue(fieldId: number, value: any, associatedRecordPath?: string[]): void {\n    const recordInstance = this.getRecordInstance(associatedRecordPath);\n    const fieldInstance = this.getFieldInstance(fieldId, associatedRecordPath);\n    const fieldDefinition = find(recordInstance.recordDefinition.fieldDefinitions, { id: fieldId });\n\n    let newValue = isUndefined(value) ? null : value;\n\n    if (fieldInstance) {\n      switch (fieldDefinition.resourceType) {\n        case RX_RECORD_DEFINITION.dataTypes.character.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.localizedCharacter.resourceType:\n          if (!isNull(newValue)) {\n            if (!isString(newValue)) {\n              newValue = String(newValue);\n            } else if (this.rxStringService.isEmptySafe(newValue)) {\n              newValue = null;\n            }\n          }\n\n          break;\n\n        case RX_RECORD_DEFINITION.dataTypes.integer.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.real.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.decimal.resourceType:\n          if (!isNull(newValue)) {\n            if (this.rxNumberUtilsService.isFiniteOrNumberString(newValue)) {\n              newValue = new BigNumber(value);\n            } else {\n              this.logIncorrectFieldValueWarning(newValue, fieldDefinition);\n              newValue = isNaN(value) ? value : null;\n            }\n          }\n\n          break;\n\n        case RX_RECORD_DEFINITION.dataTypes.selection.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.boolean.resourceType:\n          if (!isNull(newValue)) {\n            if (!this.rxStringService.isEmptySafe(newValue) && isFinite(Number(newValue))) {\n              newValue = Number(newValue);\n            } else {\n              this.logIncorrectFieldValueWarning(newValue, fieldDefinition);\n              newValue = null;\n            }\n          }\n\n          break;\n\n        case RX_RECORD_DEFINITION.dataTypes.attachment.resourceType:\n          if (value instanceof File) {\n            newValue = value.name;\n            set(fieldInstance, 'file', value);\n          } else {\n            if (!isNull(newValue)) {\n              this.logIncorrectFieldValueWarning(newValue, fieldDefinition);\n            }\n\n            newValue = null;\n\n            delete fieldInstance.file;\n          }\n\n          break;\n      }\n\n      set(fieldInstance, 'value', newValue);\n\n      this.validate();\n\n      recordInstance.fieldValueChangedSubject.next({\n        fieldId,\n        value: fieldInstance.value\n      });\n    }\n  }\n\n  getFieldProp(fieldId: number, prop: string, associatedRecordPath?: string[]): any {\n    const fieldInstance = this.getFieldInstance(fieldId, associatedRecordPath);\n\n    return get(fieldInstance, prop);\n  }\n\n  setFieldProp(fieldId: number, prop: string, value: any, associatedRecordPath?: string[]): void {\n    const fieldInstance = this.getFieldInstance(fieldId, associatedRecordPath);\n\n    set(fieldInstance, prop, value);\n  }\n\n  getFieldInstance(fieldId: number, associatedRecordPath?: string[]): IFieldInstance {\n    if (associatedRecordPath) {\n      return get(this.getRecordInstance(associatedRecordPath), ['fieldInstances', fieldId]);\n    } else {\n      return this.fieldInstances[fieldId];\n    }\n  }\n\n  getRecordInstance(associatedRecordPath?: string[]): RecordInstance {\n    return associatedRecordPath ? get(this, ['associationInstances', ...associatedRecordPath]) : this;\n  }\n\n  isFieldValueChanged(fieldId: number, newValue: any, associatedRecordPath?: string[]) {\n    const fieldDefinition = find(this.getRecordInstance(associatedRecordPath).recordDefinition.fieldDefinitions, {\n      id: fieldId\n    });\n\n    const value = this.getFieldValue(fieldId, associatedRecordPath);\n\n    switch (fieldDefinition.resourceType) {\n      case RX_RECORD_DEFINITION.dataTypes.attachment.resourceType:\n        return value !== (newValue instanceof File ? newValue.name : newValue);\n\n      case RX_RECORD_DEFINITION.dataTypes.integer.resourceType:\n      case RX_RECORD_DEFINITION.dataTypes.real.resourceType:\n      case RX_RECORD_DEFINITION.dataTypes.decimal.resourceType:\n        return !new BigNumber(value).eq(newValue);\n\n      default:\n        return value !== newValue;\n    }\n  }\n\n  revertFieldInstances(): void {\n    this.fieldInstances = cloneDeep(this.originalData.fieldInstances);\n    this.validate();\n\n    forEach(this.getExtensionRecords(), (recordInstance: RecordInstance) => recordInstance.revertFieldInstances());\n  }\n\n  reset(): void {\n    Object.assign(this, cloneDeep(this.originalData));\n    this.associationInstances = null;\n    this.validate();\n  }\n\n  getOriginalRecordInstance(): RecordInstance {\n    return new RecordInstance(this.recordDefinition, this.originalData, this.injector);\n  }\n\n  validate(): void {\n    const errors = this.validationService.validate(this, this.recordDefinition);\n\n    this.validation$.next(errors);\n  }\n\n  validateSingleField(fieldId: number, value: any, associatedRecordPath?: string[]): IRxFieldValidationResult {\n    let result = {};\n\n    if (associatedRecordPath) {\n      const associatedRecordInstance: RecordInstance = this.getRecordInstance(associatedRecordPath);\n\n      if (associatedRecordInstance) {\n        result = associatedRecordInstance.validationService.validateSingleField(fieldId, value);\n      }\n    } else {\n      result = this.validationService.validateSingleField(fieldId, value);\n    }\n\n    return result;\n  }\n\n  private getExtensionRecords(): RecordInstance[] {\n    return reduce(\n      this.associationInstances,\n      (result, value, key) => {\n        forEach(value, (associationRecords: IAssociationRecords, nodeSide: string) => {\n          result.push(...associationRecords.extensions);\n        });\n\n        return result;\n      },\n      []\n    );\n  }\n\n  private isDeletedOrPendingAssociations(): boolean {\n    return some(this.associationInstances, (value) => {\n      return some(value, (associationRecords: IAssociationRecords, nodeSide: string) => {\n        return Boolean(associationRecords.deleted.length || associationRecords.pending.length);\n      });\n    });\n  }\n\n  private logIncorrectFieldValueWarning(value: any, fieldDefinition: IFieldDefinition) {\n    const fieldTypeName = find(RX_RECORD_DEFINITION.dataTypes, {\n      resourceType: fieldDefinition.resourceType\n    }).displayName;\n\n    this.rxLogService.warning(`${value} cannot be assigned to ${fieldTypeName} field.`);\n  }\n\n  prepareForBulkEdit(): void {\n    forEach(this.fieldInstances, (fieldInstance) => {\n      fieldInstance.value = null;\n\n      if (fieldInstance.resourceType === RX_RECORD_DEFINITION.resourceTypes.localizedFieldInstance) {\n        forOwn(fieldInstance.valueByLocale, (value, key) => {\n          fieldInstance.valueByLocale[key] = null;\n        });\n      }\n    });\n\n    this.originalData.fieldInstances = cloneDeep(this.fieldInstances);\n\n    this.validate();\n  }\n}\n"]}