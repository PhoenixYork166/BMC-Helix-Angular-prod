{"version":3,"file":"global-cache.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/caching/global-cache.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { RxBundleDataPageService } from '../bundle/bundle-data-page.service';\nimport { IBundleDescriptor } from '../bundle/bundle.interfaces';\nimport { defaults } from 'lodash';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { RxLogService } from '../logging/log.service';\nimport { IDataPageResult } from '../data-page';\nimport { RxBundleLoadType } from '../bundle/bundle-load.types';\nimport { RX_APPLICATION } from '../application';\nimport { IFunctionDescriptor } from '../function/function-descriptor.interfaces';\nimport { RxFunctionDataPageService } from '../function/function-data-page.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxGlobalCacheService {\n  private bundleDescriptorsById: { [id: string]: Observable<IBundleDescriptor> } = {};\n  private bundleDescriptors: Observable<IBundleDescriptor[]> | null = null;\n  private functionDescriptors: Observable<IFunctionDescriptor[]> = null;\n\n  private applicationIdValue = '';\n  private applicationIdSubject = new ReplaySubject<string>(1);\n  public applicationId$ = this.applicationIdSubject.asObservable();\n\n  get applicationId(): string {\n    return this.applicationIdValue;\n  }\n\n  set applicationId(value: string) {\n    if (this.applicationIdValue !== value) {\n      this.applicationIdValue = value;\n\n      this.applicationIdSubject.next(value);\n\n      this.rxLogService.debug(`RxGlobalCacheService: application ID set to ${value}`);\n    }\n  }\n\n  constructor(\n    private rxBundleDataPageService: RxBundleDataPageService,\n    private rxFunctionDataPageService: RxFunctionDataPageService,\n    private rxLogService: RxLogService\n  ) {}\n\n  getBundleDescriptors(): Observable<IBundleDescriptor[]> {\n    if (!this.bundleDescriptors) {\n      this.bundleDescriptors = this.rxBundleDataPageService.get().pipe(\n        map(\n          (bundleDescriptors: IDataPageResult) =>\n            bundleDescriptors.data.map((dataPageData) => {\n              const defaultUiOptions = {\n                options: {\n                  loadJs: RxBundleLoadType.always,\n                  loadCss: RxBundleLoadType.always\n                }\n              };\n\n              let uiOptions;\n\n              try {\n                uiOptions = JSON.parse(dataPageData.uiOptions) ?? defaultUiOptions;\n\n                if (Boolean(uiOptions.options) && typeof uiOptions.options === 'object') {\n                  defaults(uiOptions.options, defaultUiOptions.options);\n                } else {\n                  this.rxLogService.warning(`Invalid structure of uiOptions in bundle ${dataPageData.name}.`);\n\n                  uiOptions = defaultUiOptions;\n                }\n              } catch (e) {\n                this.rxLogService.warning(`Cannot parse uiOptions in bundle ${dataPageData.name}.`);\n\n                uiOptions = defaultUiOptions;\n              }\n\n              return {\n                ...dataPageData,\n                uiOptions\n              };\n            }) as IBundleDescriptor[]\n        ),\n        shareReplay(1)\n      );\n    }\n\n    return this.bundleDescriptors;\n  }\n\n  getFunctionDescriptors(): Observable<IFunctionDescriptor[]> {\n    if (!this.functionDescriptors) {\n      this.functionDescriptors = this.rxFunctionDataPageService.get().pipe(\n        map((dataPage) => dataPage.data as IFunctionDescriptor[]),\n        shareReplay(1)\n      );\n    }\n\n    return this.functionDescriptors;\n  }\n\n  getLicensedBundleDescriptors(): Observable<IBundleDescriptor[]> {\n    return this.getBundleDescriptors().pipe(\n      map((bundleDescriptors) => bundleDescriptors.filter((bundleDescriptor) => bundleDescriptor.isLicensed))\n    );\n  }\n\n  getBundleDescriptor(bundleId: string): Observable<IBundleDescriptor> {\n    if (!this.bundleDescriptorsById[bundleId]) {\n      this.bundleDescriptorsById[bundleId] = this.getBundleDescriptors().pipe(\n        map(\n          (bundleDescriptors) =>\n            bundleDescriptors.find((bundleDescriptor) => bundleDescriptor.id === bundleId) as IBundleDescriptor\n        ),\n        shareReplay(1)\n      );\n    }\n\n    return this.bundleDescriptorsById[bundleId];\n  }\n\n  getApplicationBundleDescriptor(): Observable<IBundleDescriptor> {\n    return this.applicationIdSubject.pipe(switchMap((applicationId) => this.getBundleDescriptor(applicationId)));\n  }\n\n  private _getBundleFriendlyName(descriptor: IBundleDescriptor, defaultValue?: string): string {\n    return descriptor?.friendlyName || descriptor?.id || defaultValue || '';\n  }\n\n  getBundleFriendlyName(bundleId: string, defaultValue?: string): Observable<string> {\n    return this.getBundleDescriptor(bundleId).pipe(\n      map((bundleDescriptor) => this._getBundleFriendlyName(bundleDescriptor, defaultValue))\n    );\n  }\n\n  getBundleDisplayName(bundleId: string): Observable<string> {\n    return this.getBundleDescriptor(bundleId).pipe(\n      map(\n        (bundleDescriptor) =>\n          (this.applicationId !== RX_APPLICATION.innovationStudioBundleId && bundleDescriptor?.localizedDisplayName) ||\n          this._getBundleFriendlyName(bundleDescriptor)\n      )\n    );\n  }\n\n  clear() {\n    this.bundleDescriptorsById = {};\n    this.bundleDescriptors = null;\n    this.functionDescriptors = null;\n\n    this.rxLogService.debug('RxGlobalCacheService: cleared.');\n  }\n}\n"]}