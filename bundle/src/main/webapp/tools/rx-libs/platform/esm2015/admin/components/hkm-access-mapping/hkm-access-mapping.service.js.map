{"version":3,"file":"hkm-access-mapping.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/admin/components/hkm-access-mapping/hkm-access-mapping.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,EAAE,EAAE,MAAM,MAAM,CAAC;AAC1B,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;;;AAOrC,MAAM,OAAO,yBAAyB;IACpC,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAEzB,iBAAY,GAAG,+BAA+B,CAAC;QAC/C,gBAAW,GAAG,IAAI,GAAG,EAAwB,CAAC;IAHlB,CAAC;IAKvC,kBAAkB;QACvB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAgC,GAAG,IAAI,CAAC,YAAY,eAAe,CAAC,CAAC;IACjG,CAAC;IAEM,iBAAiB;QACtB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAe,GAAG,IAAI,CAAC,YAAY,cAAc,CAAC,CAAC;IAC/E,CAAC;IAEM,eAAe,CAAC,WAAmB,EAAE,QAAgB,EAAE,MAAc;QAC1E,MAAM,QAAQ,GAAG,GAAG,WAAW,IAAI,QAAQ,IAAI,MAAM,EAAE,CAAC;QAExD,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YAClC,OAAO,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC3C;QAED,MAAM,OAAO,GAAG,kBAAkB,CAAC,oBAAoB,WAAW,IAAI,QAAQ,IAAI,MAAM,EAAE,CAAC,CAAC;QAE5F,OAAO,IAAI,CAAC,UAAU;aACnB,GAAG,CAAe,GAAG,IAAI,CAAC,YAAY,qBAAqB,OAAO,EAAE,CAAC;aACrE,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;IACrE,CAAC;IAEM,oBAAoB,CAAC,kBAA4B;QACtD,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAO,GAAG,IAAI,CAAC,YAAY,mBAAmB,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IAC7G,CAAC;IAEM,kBAAkB,CAAC,gBAA4C;QACpE,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAO,GAAG,IAAI,CAAC,YAAY,eAAe,EAAE,gBAAgB,CAAC,CAAC;IAC3F,CAAC;;sHAlCU,yBAAyB;0HAAzB,yBAAyB,cAFxB,MAAM;2FAEP,yBAAyB;kBAHrC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { IDataPageResult } from '@helix/platform/shared/api';\nimport { of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { IHkmFolder, IHkmMappingConfiguration, IHkmPortal, IItsmCompany } from './hkm-access-mapping.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxHkmAccessMappingService {\n  constructor(private httpClient: HttpClient) {}\n\n  private readonly knowledgeApi = '/api/rx/application/knowledge';\n  private readonly folderCache = new Map<String, IHkmFolder[]>();\n\n  public callItsmMappingApi() {\n    return this.httpClient.get<IDataPageResult<IItsmCompany>>(`${this.knowledgeApi}/mapping/itsm`);\n  }\n\n  public callHkmMappingApi() {\n    return this.httpClient.get<IHkmPortal[]>(`${this.knowledgeApi}/mapping/hkm`);\n  }\n\n  public getFolderAccess(userGroupId: number, portalId: number, nodeId: number) {\n    const cacheKey = `${userGroupId}-${portalId}-${nodeId}`;\n\n    if (this.folderCache.has(cacheKey)) {\n      return of(this.folderCache.get(cacheKey));\n    }\n\n    const request = encodeURIComponent(`v1/contentaccess/${userGroupId}/${portalId}/${nodeId}`);\n\n    return this.httpClient\n      .get<IHkmFolder[]>(`${this.knowledgeApi}?ComAroundRequest=${request}`)\n      .pipe(tap((folders) => this.folderCache.set(cacheKey, folders)));\n  }\n\n  public deleteAccessMappings(hkmGroupMappingIds: string[]) {\n    return this.httpClient.delete<void>(`${this.knowledgeApi}/mapping/delete/${hkmGroupMappingIds.join(',')}`);\n  }\n\n  public saveAccessMappings(hkmGroupMappings: IHkmMappingConfiguration[]) {\n    return this.httpClient.post<void>(`${this.knowledgeApi}/mapping/save`, hkmGroupMappings);\n  }\n}\n"]}