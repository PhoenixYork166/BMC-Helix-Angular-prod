{"version":3,"file":"cognitive-service-connections.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/admin/components/cognitive-service/components/connections/cognitive-service-connections.component.ts","../../../../../../../../../libs/platform/admin/components/cognitive-service/components/connections/cognitive-service-connections.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { KeyValueObject } from '@bmc-ux/adapt-angular';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { assign, forIn, isEmpty, toLower, transform } from 'lodash';\nimport { RX_COGNITIVE_SERVICE } from '../../cognitive-service.constant';\nimport {\n  ISystemConfiguration,\n  IUserOverlayGroupDescriptorChildren,\n  MachineLearningProviderNames,\n  RX_OVERLAY,\n  RxCurrentUserService,\n  RxNotificationService,\n  RxSystemConfigurationService\n} from '@helix/platform/shared/api';\nimport { RxCognitiveServiceService } from '../../cognitive-service.service';\nimport { IConnectionTestPayload, ISettingPayload, IServiceDefinitionField } from '../../cognitive-service.interfaces';\nimport { forkJoin, throwError } from 'rxjs';\nimport { ConnectionTestStatus } from '@helix/platform/ui-kit';\nimport { catchError, finalize } from 'rxjs/operators';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'rx-cognitive-service-connections',\n  templateUrl: './cognitive-service-connections.component.html',\n  styleUrls: ['./cognitive-service-connections.component.scss']\n})\nexport class CognitiveServiceConnectionsComponent implements OnInit {\n  @Input()\n  isAdministrator: boolean;\n\n  @Input()\n  currentOverlayContext: IUserOverlayGroupDescriptorChildren;\n\n  @Input()\n  isNativeClassificationProvider: boolean;\n\n  connectionInfo = RX_COGNITIVE_SERVICE.connections.payload;\n  serviceDefinitions = RX_COGNITIVE_SERVICE.connections.serviceDefinitions;\n  realTimeTranslationProvider: string;\n  availableServicesList = [];\n  connectionTestStatusesByServiceId: KeyValueObject<ConnectionTestStatus> = {};\n  connectionTestStatus: ConnectionTestStatus = ConnectionTestStatus.Invalid;\n  isFormFieldChanged = false;\n\n  availableServices: KeyValueObject<boolean> = {\n    classification: true,\n    discovery: true,\n    toneAnalyzer: true\n  };\n\n  constructor(\n    private rxCognitiveServiceService: RxCognitiveServiceService,\n    private rxCurrentUserService: RxCurrentUserService,\n    private rxNotificationService: RxNotificationService,\n    private rxSystemConfigurationService: RxSystemConfigurationService,\n    private rxJsonParserService: RxJsonParserService,\n    private translateService: TranslateService\n  ) {}\n\n  ngOnInit(): void {\n    this.rxSystemConfigurationService\n      .queryConfiguration([\n        RX_COGNITIVE_SERVICE.connections.systemSettingKeys.cognitiveServiceCredential,\n        RX_COGNITIVE_SERVICE.connections.systemSettingKeys.classificationServiceProvider,\n        RX_COGNITIVE_SERVICE.connections.systemSettingKeys.translationServiceProvider,\n        RX_COGNITIVE_SERVICE.connections.systemSettingKeys.helixPortalUrl,\n        RX_COGNITIVE_SERVICE.connections.systemSettingKeys.helixServiceCredential\n      ])\n      .pipe(finalize(() => this.loadServices()))\n      .subscribe(\n        ([\n          cognitiveServiceCredential,\n          classificationServiceProvider,\n          translationServiceProvider,\n          helixPortalUrl,\n          helixServiceCredential\n        ]) => {\n          this.loadCognitiveSystemSettings(cognitiveServiceCredential);\n\n          if (classificationServiceProvider.value === MachineLearningProviderNames.Helix) {\n            this.loadHelixCognitiveSystemSettings(helixServiceCredential);\n            this.connectionInfo[helixPortalUrl.id] = helixPortalUrl.value;\n          }\n\n          this.loadClassificationServiceProvider(classificationServiceProvider);\n          this.loadRealTimeTranslationProviders(translationServiceProvider);\n        }\n      );\n  }\n\n  isFormDirty(): boolean {\n    return this.isFormFieldChanged;\n  }\n\n  private loadServices(): void {\n    this.availableServicesList = transform(\n      this.serviceDefinitions,\n      (result, value, key) => {\n        if (this.availableServices[key]) {\n          result.push(key);\n        }\n      },\n      []\n    );\n  }\n\n  private loadClassificationServiceProvider(provider: ISystemConfiguration): void {\n    if (this.isNativeClassificationProvider) {\n      this.availableServices[this.serviceDefinitions.classification.id] = false;\n      this.availableServices[this.serviceDefinitions.serviceAccountCredentials.id] = true;\n\n      this.rxSystemConfigurationService\n        .getConfiguration(RX_COGNITIVE_SERVICE.connections.systemSettingKeys.serviceAccountCredential)\n        .subscribe((settingData) => {\n          this.connectionInfo.serviceAccountCredentials = settingData.value as string;\n        });\n\n      return;\n    }\n\n    if (provider.value === MachineLearningProviderNames.Helix) {\n      this.availableServices[this.serviceDefinitions.classification.id] = false;\n      this.availableServices[this.serviceDefinitions.helixClassifier.id] = true;\n    }\n  }\n\n  private loadRealTimeTranslationProviders(settingsData: ISystemConfiguration): void {\n    const realTimeTranslationProvider = toLower(settingsData.value as string);\n\n    if (realTimeTranslationProvider) {\n      this.realTimeTranslationProvider = realTimeTranslationProvider;\n      this.availableServices[this.serviceDefinitions[realTimeTranslationProvider].id] = true;\n\n      this.rxSystemConfigurationService\n        .getConfiguration(RX_COGNITIVE_SERVICE.connections.systemSettingKeys[realTimeTranslationProvider])\n        .subscribe((settingData) => {\n          if (realTimeTranslationProvider === this.serviceDefinitions.google.id) {\n            this.connectionInfo.apiKey = settingData.value as string;\n          } else if (realTimeTranslationProvider === this.serviceDefinitions.microsoft.id) {\n            this.connectionInfo = assign(\n              this.connectionInfo,\n              this.rxJsonParserService.tryParseJson(settingData.value as string, {})\n            );\n          }\n        });\n    }\n  }\n\n  private loadHelixCognitiveSystemSettings(settingsData: ISystemConfiguration): void {\n    const credentials = this.rxJsonParserService.tryParseJson(settingsData.value as string);\n    this.connectionInfo.helixClassifierKey = credentials?.accessKey ?? '';\n    this.connectionInfo.helixClassifierSecret = credentials?.secretKey ?? '';\n  }\n\n  private loadCognitiveSystemSettings(settingsData: ISystemConfiguration): void {\n    const credentials = JSON.parse(settingsData.value as string)[RX_COGNITIVE_SERVICE.credentialsProvider];\n\n    if (credentials) {\n      forIn(credentials, (value, key) => {\n        this.connectionInfo[key] = credentials[key];\n      });\n    }\n  }\n\n  private isConnectionTestStatusInvalid(form: NgForm): boolean {\n    return (\n      !(\n        this.isAdministrator &&\n        this.currentOverlayContext.overlayGroupId !== RX_OVERLAY.overlayGroupIds.base &&\n        !this.currentOverlayContext.isShared\n      ) ||\n      form.invalid ||\n      form.pristine\n    );\n  }\n\n  private getConnectionTestPayload(serviceId: string, serviceForm: NgForm): IConnectionTestPayload {\n    const serviceDefinition = this.serviceDefinitions[serviceId];\n\n    if (!serviceDefinition.isApiKeyTest) {\n      const isGoogleServiceId = serviceId === this.serviceDefinitions.google.id;\n\n      return {\n        credential: isGoogleServiceId ? serviceForm.value[serviceDefinition.model] : JSON.stringify(serviceForm.value),\n        resourceType: 'com.bmc.arsys.rx.application.cognitive.command.PingTranslationServiceCommand'\n      };\n    }\n\n    // Get the fields that are supposed to be sent as credentials\n    const editableFields: IServiceDefinitionField[] = serviceDefinition.fields.filter(\n      (field: IServiceDefinitionField) => !field.readonly\n    );\n\n    if (editableFields.length === 1) {\n      // use the model name as the apiKey\n      return {\n        apiKey: serviceForm.value[serviceDefinition.model],\n        serviceType: serviceDefinition.serviceType,\n        resourceType: 'com.bmc.arsys.rx.application.cognitive.command.PingCognitiveServiceCommand'\n      };\n    }\n\n    // If more than one field, username and passowrd are required to test the connection\n    const [usernameField, passwordField] = editableFields.map((field: IServiceDefinitionField) => field.name);\n\n    return {\n      userName: serviceForm.value[usernameField],\n      password: serviceForm.value[passwordField],\n      serviceType: serviceDefinition.serviceType,\n      resourceType: 'com.bmc.arsys.rx.application.cognitive.command.PingCognitiveServiceCommand'\n    };\n  }\n\n  resetConnectionTest(serviceId: string, form: NgForm): void {\n    this.connectionTestStatus = ConnectionTestStatus.Unknown;\n    this.isFormFieldChanged = form.dirty;\n\n    this.connectionTestStatusesByServiceId[serviceId] = this.isConnectionTestStatusInvalid(form)\n      ? ConnectionTestStatus.Invalid\n      : ConnectionTestStatus.Unknown;\n  }\n\n  onTestConnection(serviceId: string, form: NgForm): void {\n    const connectionTestPayload = this.getConnectionTestPayload(serviceId, form);\n\n    this.rxCognitiveServiceService\n      .testConnection(connectionTestPayload)\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          this.connectionTestStatusesByServiceId[serviceId] = ConnectionTestStatus.Failed;\n\n          return throwError(error);\n        })\n      )\n      .subscribe(() => {\n        this.connectionTestStatusesByServiceId[serviceId] = ConnectionTestStatus.Passed;\n        this.connectionTestStatus = ConnectionTestStatus.Passed;\n      });\n  }\n\n  save(): void {\n    const settingsPayload: ISettingPayload[] = [];\n\n    if (\n      this.isNativeClassificationProvider &&\n      this.connectionTestStatusesByServiceId[this.serviceDefinitions.serviceAccountCredentials.id] ===\n        ConnectionTestStatus.Passed &&\n      !(\n        this.connectionTestStatusesByServiceId[this.serviceDefinitions.classification.id] ===\n          ConnectionTestStatus.Passed ||\n        this.connectionTestStatusesByServiceId[this.serviceDefinitions.discovery.id] === ConnectionTestStatus.Passed ||\n        this.connectionTestStatusesByServiceId[this.serviceDefinitions.toneAnalyzer.id] ===\n          ConnectionTestStatus.Passed ||\n        (this.realTimeTranslationProvider &&\n          this.connectionTestStatusesByServiceId[this.serviceDefinitions[this.realTimeTranslationProvider].id] ===\n            ConnectionTestStatus.Passed)\n      )\n    ) {\n      settingsPayload.push({\n        name: RX_COGNITIVE_SERVICE.connections.systemSettingKeys.serviceAccountCredential,\n        value: JSON.stringify(JSON.parse(this.connectionInfo[this.serviceDefinitions.serviceAccountCredentials.id]))\n      });\n    } else {\n      if (\n        this.realTimeTranslationProvider &&\n        this.connectionTestStatusesByServiceId[this.serviceDefinitions[this.realTimeTranslationProvider].id] ===\n          ConnectionTestStatus.Passed\n      ) {\n        const fields = this.serviceDefinitions[this.realTimeTranslationProvider].fields;\n\n        settingsPayload.push({\n          name: RX_COGNITIVE_SERVICE.connections.systemSettingKeys[this.realTimeTranslationProvider],\n          value:\n            this.realTimeTranslationProvider === this.serviceDefinitions.google.id\n              ? this.connectionInfo[fields[0].name]\n              : JSON.stringify(\n                  transform(\n                    fields,\n                    (result, value) => {\n                      const fieldName = value['name'];\n\n                      return (result[fieldName] = this.connectionInfo[fieldName]);\n                    },\n                    {}\n                  )\n                )\n        });\n      }\n\n      const cognitiveCredentials = transform(\n        RX_COGNITIVE_SERVICE.connections.cognitiveServiceCredentialKeys,\n        (result, value, key) => {\n          if (this.connectionTestStatusesByServiceId[this.serviceDefinitions[key].id] === ConnectionTestStatus.Passed) {\n            return (result[value] = this.connectionInfo[value]);\n          }\n        },\n        {}\n      );\n\n      if (!isEmpty(cognitiveCredentials)) {\n        settingsPayload.push({\n          name: RX_COGNITIVE_SERVICE.connections.systemSettingKeys.cognitiveServiceCredential,\n          value: JSON.stringify({\n            [RX_COGNITIVE_SERVICE.credentialsProvider]: cognitiveCredentials\n          })\n        });\n      }\n    }\n\n    const { helixClassifier } = this.serviceDefinitions;\n\n    if (helixClassifier && this.connectionTestStatusesByServiceId[helixClassifier.id] === ConnectionTestStatus.Passed) {\n      settingsPayload.push({\n        name: RX_COGNITIVE_SERVICE.connections.systemSettingKeys.helixServiceCredential,\n        value: JSON.stringify({\n          accessKey: this.connectionInfo.helixClassifierKey,\n          secretKey: this.connectionInfo.helixClassifierSecret\n        })\n      });\n    }\n\n    forkJoin(\n      settingsPayload.map((settingPayload: ISettingPayload) =>\n        this.rxSystemConfigurationService.setConfiguration(settingPayload.name, settingPayload.value)\n      )\n    ).subscribe(() => {\n      this.rxNotificationService.addSuccessMessage(\n        this.translateService.instant(RX_COGNITIVE_SERVICE.notificationMessages.serviceConnectionSaved)\n      );\n\n      this.connectionTestStatus = ConnectionTestStatus.Invalid;\n      this.connectionTestStatusesByServiceId = {};\n      this.isFormFieldChanged = false;\n    });\n  }\n\n  isSaveButtonDisabled(): boolean {\n    return this.connectionTestStatus !== ConnectionTestStatus.Passed;\n  }\n\n  isSaveButtonVisible(): boolean {\n    return (\n      this.isAdministrator &&\n      this.currentOverlayContext.overlayGroupId !== RX_OVERLAY.overlayGroupIds.base &&\n      !this.currentOverlayContext.isShared\n    );\n  }\n}\n","<adapt-accordion multiselect=\"true\">\n  <form *ngFor=\"let serviceId of availableServicesList\" #serviceForm=\"ngForm\">\n    <adapt-accordion-tab\n      [title]=\"serviceDefinitions[serviceId].title | translate\"\n      [isOpen]=\"serviceDefinitions[serviceId].isOpen\"\n      [attr.rx-id]=\"serviceDefinitions[serviceId].id\"\n      class=\"mb-3\"\n    >\n      <div *ngFor=\"let field of serviceDefinitions[serviceId].fields\" class=\"form-group\">\n        <adapt-rx-textfield\n          [name]=\"field.name\"\n          [(ngModel)]=\"connectionInfo[field.name]\"\n          [attr.rx-id]=\"field.rxId\"\n          [label]=\"field.label | translate\"\n          [required]=\"field.required\"\n          *ngIf=\"field.type === 'password'\"\n          maxlength=\"254\"\n          [isPassword]=\"true\"\n          (ngModelChange)=\"resetConnectionTest(serviceId, serviceForm)\"\n          class=\"d-block\"\n        >\n        </adapt-rx-textfield>\n\n        <adapt-rx-textfield\n          [name]=\"field.name\"\n          [(ngModel)]=\"connectionInfo[field.name]\"\n          [attr.rx-id]=\"field.rxId\"\n          [label]=\"field.label | translate\"\n          [required]=\"field.required\"\n          [disabled]=\"field.readonly\"\n          *ngIf=\"field.type === 'text'\"\n          [pattern]=\"field.pattern\"\n          (ngModelChange)=\"resetConnectionTest(serviceId, serviceForm)\"\n          class=\"d-block\"\n        >\n        </adapt-rx-textfield>\n\n        <adapt-rx-textarea\n          [name]=\"field.name\"\n          [(ngModel)]=\"connectionInfo[field.name]\"\n          [attr.rx-id]=\"field.rxId\"\n          [label]=\"field.label | translate\"\n          [required]=\"field.required\"\n          *ngIf=\"field.type === 'json'\"\n          (ngModelChange)=\"resetConnectionTest(serviceId, serviceForm)\"\n          rows=\"6\"\n          class=\"d-block\"\n          [rxJson]=\"{\n            errorMessage: field.jsonValidatorErrorMessage\n          }\"\n        ></adapt-rx-textarea>\n      </div>\n\n      <rx-connection-tester\n        class=\"mt-1\"\n        [status]=\"connectionTestStatusesByServiceId[serviceId]\"\n        (testConnection)=\"onTestConnection(serviceId, serviceForm)\"\n      ></rx-connection-tester>\n    </adapt-accordion-tab>\n  </form>\n\n  <button\n    adapt-button\n    rx-id=\"save-button\"\n    btn-type=\"primary\"\n    class=\"mt-4\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    *ngIf=\"isSaveButtonVisible()\"\n    (click)=\"save()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n</adapt-accordion>\n"]}