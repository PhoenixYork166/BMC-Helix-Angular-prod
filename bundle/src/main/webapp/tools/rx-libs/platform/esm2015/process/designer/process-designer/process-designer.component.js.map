{"version":3,"file":"process-designer.component.js","sourceRoot":"","sources":["../../../../../../../libs/platform/process/designer/process-designer/process-designer.component.ts","../../../../../../../libs/platform/process/designer/process-designer/process-designer.component.html"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,YAAY,EACZ,QAAQ,EACR,KAAK,EAIL,MAAM,EAEN,SAAS,EACV,MAAM,eAAe,CAAC;AAEvB,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACvD,OAAO,EAAE,qBAAqB,EAAE,MAAM,uBAAuB,CAAC;AAC9D,OAAO,EAAE,eAAe,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAc,EAAE,EAAE,aAAa,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAC/G,OAAO,EACL,YAAY,EACZ,oBAAoB,EACpB,GAAG,EACH,WAAW,EACX,SAAS,EACT,SAAS,EACT,IAAI,EACJ,SAAS,EACT,GAAG,EACH,cAAc,EACf,MAAM,gBAAgB,CAAC;AACxB,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAEvE,OAAO,EAA6C,mBAAmB,EAAE,MAAM,wBAAwB,CAAC;AACxG,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACnE,OAAO,EAGL,oBAAoB,EACpB,uBAAuB,EACvB,sBAAsB,EACtB,oBAAoB,EACpB,gBAAgB,EACjB,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAEL,8BAA8B,EAC9B,0BAA0B,EAC1B,+BAA+B,EAC/B,6BAA6B,EAC9B,MAAM,6BAA6B,CAAC;AACrC,OAAO,EAA2B,gBAAgB,EAAE,MAAM,kCAAkC,CAAC;AAE7F,OAAO,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AACtE,OAAO,EAAE,sBAAsB,EAAE,MAAM,gCAAgC,CAAC;;;;;;;;;;;;AAOxE,MAAM,OAAO,wBAAwB;IA8WnC,YACmB,QAAkB,EAClB,oBAA0C,EAC1C,uBAAgD,EAChD,sBAA8C,EAC9C,oBAA0C,EAC1C,aAA4B,EAC5B,WAAwB,EACxB,gBAAkC,EAClC,8BAA8D,EAC9D,0BAAsD,EACtD,wBAAkD,EAClD,+BAAgE,EAChE,6BAA4D,EAC5D,gBAAkC,EAClC,gBAAkC;QAdlC,aAAQ,GAAR,QAAQ,CAAU;QAClB,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,2BAAsB,GAAtB,sBAAsB,CAAwB;QAC9C,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,kBAAa,GAAb,aAAa,CAAe;QAC5B,gBAAW,GAAX,WAAW,CAAa;QACxB,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,mCAA8B,GAA9B,8BAA8B,CAAgC;QAC9D,+BAA0B,GAA1B,0BAA0B,CAA4B;QACtD,6BAAwB,GAAxB,wBAAwB,CAA0B;QAClD,oCAA+B,GAA/B,+BAA+B,CAAiC;QAChE,kCAA6B,GAA7B,6BAA6B,CAA+B;QAC5D,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAxXrD,kBAAa,GAAuB,IAAI,YAAY,EAAQ,CAAC;QAG7D,2BAAsB,GAAuB,IAAI,YAAY,EAAE,CAAC;QAGhE,oBAAe,GAAyB,IAAI,YAAY,EAAE,CAAC;QAQnD,oBAAe,GAAG,IAAI,eAAe,CAAS,IAAI,CAAC,CAAC;QACpD,iCAA4B,GAAG,IAAI,OAAO,EAA2B,CAAC;QACtE,sCAAiC,GAAG,IAAI,OAAO,EAAO,CAAC;QACvD,0BAAqB,GAAG,IAAI,eAAe,CAAS,IAAI,CAAC,CAAC;QAC1D,eAAU,GAAG,IAAI,aAAa,CAAU,CAAC,CAAC,CAAC;QAC3C,oCAA+B,GAAG,IAAI,eAAe,CAA6C,IAAI,CAAC,CAAC;QACxG,yCAAoC,GAAG,IAAI,eAAe,CAA6C,IAAI,CAAC,CAAC;QAE7G,UAAK,GAAG,IAAI,sBAAsB,CAAC;YACzC,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,OAAO,EAAE;gBACP,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;aACzC;SACF,CAAC,CAAC;QAEK,uBAAkB,GAAG,IAAI,OAAO,EAA0B,CAAC;QAC3D,iBAAY,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5D,wBAAmB,GAAG,IAAI,eAAe,CAAU,IAAI,CAAC,CAAC;QACzD,+BAA0B,GAAG,IAAI,eAAe,CAAS,IAAI,CAAC,CAAC;QAC/D,yBAAoB,GAAG,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QAE3G,yBAAoB,GAAG,QAAQ,CAAC;YACtC,IAAI,CAAC,oBAAoB,CAAC,cAAc,EAAE;YAC1C,IAAI,CAAC,oBAAoB,CAAC,oBAAoB,EAAE;YAChD,IAAI,CAAC,oBAAoB,CAAC,sBAAsB,EAAE;SACnD,CAAC,CAAC,IAAI,CACL,GAAG,CAAC,CAAC,CAAC,WAAW,EAAE,iBAAiB,EAAE,mBAAmB,CAAC,EAAE,EAAE;YAC5D,IAAI,CAAC,sBAAsB,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YACxD,IAAI,CAAC,sBAAsB,CAAC,sBAAsB,CAAC,mBAAmB,CAAC,CAAC;QAC1E,CAAC,CAAC,EACF,GAAG,CAAC,CAAC,CAAC,WAAW,EAAE,iBAAiB,CAAC,EAAE,EAAE,CACvC,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,WAAW,EAAE,iBAAiB,CAAC,CAC3E,EACD,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;QAEM,gBAAW,GAAG,aAAa,CAAC,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,IAAI,CAC/F,SAAS,CAAC,CAAC,CAAC,cAAc,CAAC,EAAE,EAAE,CAC7B,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,MAAM,EAAE,CAChH,EACD,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;QAEM,gBAAW,GAAG,aAAa,CAAC;YAClC,IAAI,CAAC,WAAW;YAChB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC7G,CAAC,CAAC,IAAI,CACL,GAAG,CACD,CAAC,CAAC,UAAU,EAAE,wBAAwB,CAAC,EAAE,EAAE,CACzC,CAAC,wBAAwB,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,cAAc,EAAE,UAAU,CAAC,CACzG,EACD,oBAAoB,EAAE,EACtB,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;QAEM,mCAA8B,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAC5D,GAAG,CAAC,CAAC,UAA8B,EAAE,EAAE,CACrC,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,CAAC,UAAU,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CACtF,CACF,CAAC;QAEM,WAAM,GAAG,aAAa,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,8BAA8B,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAC5G,GAAG,CAAC,CAAC,CAAC,UAAU,EAAE,6BAA6B,EAAE,UAAU,CAAC,EAAE,EAAE;YAC9D,IAAI,CAAC,UAAU,EAAE;gBACf,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,EAAE;oBAClD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC3C,CAAC,CAAC,CAAC;gBAEH,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,YAAY,EAAE,eAAe,EAAE,EAAE;oBACjE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,EAAE;wBAC7B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBAC1C;gBACH,CAAC,CAAC,CAAC;aACJ;YAED,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC;YAC/C,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,6BAA6B,CAAC,CAAC;QAC/D,CAAC,CAAC,EACF,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,EACrB,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;QAEM,8BAAyB,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CACxD,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,EAC7E,oBAAoB,CAAC,OAAO,CAAC,CAC9B,CAAC;QAEM,qBAAgB,GAAG,KAAK,CAAC,IAAI,CAAC,8BAA8B,EAAE,IAAI,CAAC,yBAAyB,CAAC,CAAC,IAAI,CACxG,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;QAEM,+BAA0B,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAC7D,GAAG,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC,CACpF,CAAC;QAEM,wCAAmC,GAAG,aAAa,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,IAAI,CAC7G,GAAG,CAAC,CAAC,CAAC,UAAU,EAAE,mBAAmB,CAAC,EAAE,EAAE;YACxC,IAAI,oBAAoB,GAAG,IAAI,CAAC;YAEhC,IAAI,mBAAmB,EAAE;gBACvB,MAAM,WAAW,GAAG,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,UAAU,EAAE;oBACtE,IAAI,EAAE,mBAAmB;iBAC1B,CAAC,CAAC;gBAEH,IAAI,WAAW,EAAE;oBACf,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE;wBAChE,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,mBAAmB,CAAC;qBAClD,CAAC,CAAC;oBAEH,MAAM,cAAc,GAAG,IAAI,CAAC,+BAA+B,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC;oBAErG,oBAAoB,GAAG,cAAc,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC;iBAC3E;aACF;YAED,OAAO,oBAAoB,CAAC;QAC9B,CAAC,CAAC,CACH,CAAC;QAEM,mCAA8B,GAAG,aAAa,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,IAAI,CACzG,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,mBAAmB,CAAC,EAAE,EAAE;YACnC,IAAI,oBAAoB,GAAG,IAAI,CAAC;YAEhC,IAAI,mBAAmB,EAAE;gBACvB,MAAM,mBAAmB,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBAEzF,oBAAoB,GAAG,mBAAmB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;aACjE;YAED,OAAO,oBAAoB,CAAC;QAC9B,CAAC,CAAC,CACH,CAAC;QAEM,0BAAqB,GAAG,KAAK,CACnC,IAAI,CAAC,mCAAmC,EACxC,IAAI,CAAC,8BAA8B,CACpC,CAAC,IAAI,CACJ,GAAG,CAAC,CAAC,oBAAoB,EAAE,EAAE;;YAC3B,IAAI,MAAA,IAAI,CAAC,gBAAgB,0CAAE,aAAa,EAAE;gBACxC,IAAI,OAAO,CAAC,oBAAoB,CAAC,EAAE;oBACjC,IAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC;iBACnC;qBAAM;oBACL,IAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC;iBACnC;aACF;QACH,CAAC,CAAC,EACF,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;QAEM,oCAA+B,GAAG,aAAa,CAAC,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAC/G,GAAG,CAAC,CAAC,CAAC,oBAAoB,EAAE,eAAe,CAAC,EAAE,EAAE;YAC9C,IAAI,8BAA8B,GAAG,IAAI,CAAC;YAE1C,IAAI,oBAAoB,EAAE;gBACxB,MAAM,cAAc,GAAG,IAAI,CAAC,+BAA+B,CAAC,GAAG,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC;gBAE1G,8BAA8B,GAAG,cAAc,CAAC,kBAAkB,CAAC,oBAAoB,EAAE;oBACvF,sBAAsB,EAAE,eAAe;iBACxC,CAAC,CAAC;aACJ;YAED,OAAO,8BAA8B,CAAC;QACxC,CAAC,CAAC,CACH,CAAC;QAEM,6BAAwB,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAC9D,SAAS,CAAC,CAAC,YAAY,EAAE,EAAE;YACzB,OAAO,YAAY;gBACjB,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC;gBACV,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CACd,IAAI,CAAC,CAAC,CAAC,EACP,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,sBAAsB,EAAE,CAAC,CAC/C,CAAC;QACR,CAAC,CAAC,CACH,CAAC;QAEM,wBAAmB,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CACrD,SAAS,CAAC,CAAC,QAAgB,EAAE,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC,CAC3F,CAAC;QAEF,8DAA8D;QACtD,yBAAoB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAClD,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE;YACjB,OAAO;gBACL,eAAe,EAAE,IAAI,CAAC,+BAA+B;gBACrD,oBAAoB,EAAE,IAAI;gBAC1B,WAAW,EAAE,CAAC,UAAU;gBACxB,UAAU;gBACV,WAAW,EAAE,IAAI;aAClB,CAAC;QACJ,CAAC,CAAC,CACH,CAAC;QAEM,qBAAgB,GAAG,aAAa,CAAC,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,IAAI,CAChG,GAAG,CAAC,CAAC,CAAC,eAAe,EAAE,oBAAoB,CAAC,EAAE,EAAE;YAC9C,MAAM,eAAe,GAAG;gBACtB;oBACE,KAAK,EACH,eAAe,CAAC,IAAI;wBACpB,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,4DAA4D,CAAC,GAAG;oBACpG,IAAI,EAAE,EAAE;iBACT;aACF,CAAC;YAEF,IAAI,oBAAoB,EAAE;gBACxB,eAAe,CAAC,IAAI,CAAC;oBACnB,KAAK,EAAE,oBAAoB,CAAC,KAAK;oBACjC,IAAI,EAAE,EAAE;iBACT,CAAC,CAAC;aACJ;YAED,OAAO,eAAe,CAAC;QACzB,CAAC,CAAC,CACH,CAAC;QAEM,oCAA+B,GAA0C,IAAI,CAAC,YAAY,CAAC,IAAI,CACrG,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE;YAClB,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YAEvE,OAAO,QAAQ,CACb,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;gBACjB,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBAC/C,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBAEnC,MAAM,eAAe,GAAG,IAAI,CAAC,+BAA+B,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBAE3E,OAAO,eAAe,CAAC,cAAc,CAAC,QAAQ,CAAC,YAAY,EAAE,MAAM,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,YAAY,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CACvG,GAAG,CAAC,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC;oBAChC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,eAAe,CAAC,WAAW,CAAC;oBACpG,MAAM,EAAE,uBAAuB;iBAChC,CAAC,CAAC,CACJ,CAAC;YACJ,CAAC,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CACH,CAAC;QAEM,mCAA8B,GAAwC,IAAI,CAAC,YAAY,CAAC,IAAI,CAClG,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE;YAClB,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;YAE1D,OAAO,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CACnC,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,EACnC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,EAAE,WAAW,CAAC,EAAE,EAAE,CAAC,CACjD,CAAC;QACJ,CAAC,CAAC,EACF,GAAG,CAAC,CAAC,uBAAuB,EAAE,EAAE,CAAC,CAAC;YAChC,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,kDAAkD,CAAC;YACxF,MAAM,EAAE,uBAAuB;SAChC,CAAC,CAAC,CACJ,CAAC;QAEM,6BAAwB,GAAG,aAAa,CAAC;YAC/C,IAAI,CAAC,8BAA8B;YACnC,IAAI,CAAC,+BAA+B;SACrC,CAAC,CAAC,IAAI,CACL,GAAG,CAAC,CAAC,CAAC,6BAA6B,EAAE,8BAA8B,CAAC,EAAE,EAAE;YACtE,MAAM,uBAAuB,GAA8B,EAAE,CAAC;YAE9D,IAAI,CAAC,OAAO,CAAC,6BAA6B,CAAC,MAAM,CAAC,EAAE;gBAClD,uBAAuB,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;aAC7D;YAED,8BAA8B,CAAC,OAAO,CAAC,CAAC,6BAA6B,EAAE,EAAE;gBACvE,IAAI,CAAC,OAAO,CAAC,6BAA6B,CAAC,MAAM,CAAC,EAAE;oBAClD,uBAAuB,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;iBAC7D;YACH,CAAC,CAAC,CAAC;YAEH,OAAO,uBAAuB,CAAC;QACjC,CAAC,CAAC,EACF,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;QAEM,yBAAoB,GAAG,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAC/D,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,mBAAmB,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EACzG,oBAAoB,EAAE,EACtB,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;QAEF,uDAAuD;QAC/C,0BAAqB,GAAG,aAAa,CAAC,CAAC,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAC/F,GAAG,CAAC,CAAC,CAAC,mBAAmB,EAAE,UAAU,CAAC,EAAE,EAAE,CAAC,mBAAmB,IAAI,UAAU,CAAC,EAC7E,SAAS,CAAC,IAAI,CAAC,CAChB,CAAC;QAEF,+CAA0C,GAAG,aAAa,CAAC,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CACxG,GAAG,CAAC,CAAC,CAAC,oBAAoB,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;YACtC,YAAY,EAAE,oBAAoB;YAClC,KAAK;SACN,CAAC,CAAC,CACJ,CAAC;QAEF,8BAAyB,GAAG,IAAI,CAAC,+BAA+B,CAAC,YAAY,EAAE,CAAC;QAChF,mCAA8B,GAAG,IAAI,CAAC,oCAAoC,CAAC,YAAY,EAAE,CAAC;QAE1F,QAAG,GAAG,aAAa,CAAC;YAClB,IAAI,CAAC,gBAAgB;YACrB,IAAI,CAAC,mBAAmB;YACxB,IAAI,CAAC,oBAAoB;YACzB,IAAI,CAAC,wBAAwB;YAC7B,IAAI,CAAC,0BAA0B;YAC/B,IAAI,CAAC,gBAAgB;YACrB,IAAI,CAAC,MAAM;YACX,IAAI,CAAC,oBAAoB;YACzB,IAAI,CAAC,WAAW;YAChB,IAAI,CAAC,qBAAqB;YAC1B,IAAI,CAAC,oBAAoB;YACzB,IAAI,CAAC,+BAA+B;YACpC,IAAI,CAAC,qBAAqB;YAC1B,IAAI,CAAC,wBAAwB;SAC9B,CAAC,CAAC,IAAI,CACL,GAAG,CACD,CAAC,CACC,eAAe,EACf,kBAAkB,EAClB,mBAAmB,EACnB,uBAAuB,EACvB,yBAAyB,EACzB,eAAe,EACf,KAAK,EACL,mBAAmB,EACnB,UAAU,EACV,oBAAoB,EACpB,mBAAmB,EACnB,8BAA8B,EAC9B,oBAAoB,EACpB,uBAAuB,CACxB,EAAE,EAAE,CAAC,CAAC;YACL,eAAe;YACf,kBAAkB;YAClB,mBAAmB;YACnB,uBAAuB;YACvB,yBAAyB;YACzB,eAAe;YACf,KAAK;YACL,mBAAmB;YACnB,UAAU;YACV,oBAAoB;YACpB,mBAAmB;YACnB,8BAA8B;YAC9B,oBAAoB;YACpB,uBAAuB;SACxB,CAAC,CACH,CACF,CAAC;IAkBC,CAAC;IAEJ,QAAQ;QACN,0DAA0D;QAC1D,IAAI,CAAC,4BAA4B;aAC9B,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aAChF,SAAS,CAAC,CAAC,CAAC,eAAe,EAAE,KAAK,CAAC,EAAE,EAAE;YACtC,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;YAC1D,MAAM,cAAc,GAAG,IAAI,CAAC,uBAAuB,CAAC,GAAG,EAAE,CAAC;YAE1D,cAAc,CAAC,gBAAgB,EAAE,CAAC;YAElC,OAAO,CAAC,eAAe,EAAE,CAAC,aAAa,EAAE,YAAY,EAAE,EAAE;gBACvD,WAAW,CAAC,IAAI,CAAC,mBAAmB,YAAY,EAAE,EAAE,aAAa,CAAC,CAAC;YACrE,CAAC,CAAC,CAAC;YAEH,cAAc,CAAC,iBAAiB,EAAE,CAAC;QACrC,CAAC,CAAC,CAAC;QAEL,0DAA0D;QAC1D,IAAI,CAAC,iCAAiC;aACnC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aAChF,SAAS,CAAC,CAAC,CAAC,oBAAoB,EAAE,KAAK,CAAC,EAAE,EAAE;YAC3C,MAAM,mBAAmB,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC;YAC/F,MAAM,cAAc,GAAG,IAAI,CAAC,uBAAuB,CAAC,GAAG,EAAE,CAAC;YAE1D,cAAc,CAAC,gBAAgB,EAAE,CAAC;YAElC,OAAO,CAAC,oBAAoB,EAAE,CAAC,aAAa,EAAE,YAAY,EAAE,EAAE;gBAC5D,mBAAmB,CAAC,IAAI,CAAC,gBAAgB,YAAY,EAAE,EAAE,aAAa,CAAC,CAAC;YAC1E,CAAC,CAAC,CAAC;YAEH,cAAc,CAAC,iBAAiB,EAAE,CAAC;QACrC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,WAAW,CAAC,OAAsB;QAChC,IAAI,OAAO,CAAC,aAAa,CAAC,YAAY,CAAC,cAAc,EAAE;YACrD,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACnB,IAAI,CAAC,8BAA8B,CAAC,KAAK,EAAE,CAAC;YAE5C,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACpC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;SACpF;QAED,IAAI,OAAO,CAAC,aAAa,CAAC,YAAY,CAAC,QAAQ,EAAE;YAC/C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;SACxE;IACH,CAAC;IAED,WAAW;QACT,IAAI,CAAC,8BAA8B,CAAC,KAAK,EAAE,CAAC;QAE5C,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;QAChC,IAAI,CAAC,4BAA4B,CAAC,QAAQ,EAAE,CAAC;QAC7C,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,CAAC;QACtC,IAAI,CAAC,+BAA+B,CAAC,QAAQ,EAAE,CAAC;QAChD,IAAI,CAAC,oCAAoC,CAAC,QAAQ,EAAE,CAAC;QACrD,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC;QACnC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,CAAC;QACpC,IAAI,CAAC,0BAA0B,CAAC,QAAQ,EAAE,CAAC;QAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3B,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;IAC7B,CAAC;IAED,aAAa;QACX,OAAO,IAAI,CAAC;IACd,CAAC;IAED,oBAAoB,CAAC,IAAY;QAC/B,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC;SACnC;aAAM;YACL,IAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC;SACnC;IACH,CAAC;IAED,uBAAuB,CAAC,IAAY;QAClC,IAAI,CAAC,IAAI,EAAE;YACT,IAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC;SACnC;QAED,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;IAED,cAAc,CAAC,eAAiC;QAC9C,IAAI,CAAC,yBAAyB,CAAC,eAAe,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAEvE,IAAI,eAAe,CAAC,IAAI,CAAC,iBAAiB,KAAK,CAAC,EAAE;YAChD,UAAU,CACR,GAAG,EAAE,CACH,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC;gBACxC,UAAU,EAAE,eAAe,CAAC,IAAI,CAAC,YAAY;gBAC7C,IAAI,EAAE,eAAe,CAAC,IAAI;aAC3B,CAAC,EACJ,EAAE,CACH,CAAC;SACH;aAAM,IAAI,eAAe,CAAC,IAAI,CAAC,iBAAiB,KAAK,CAAC,EAAE;YACvD,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAEhE,UAAU,CACR,GAAG,EAAE,CACH,IAAI,CAAC,oCAAoC,CAAC,IAAI,CAAC;gBAC7C,UAAU,EAAE,eAAe,CAAC,IAAI,CAAC,YAAY;gBAC7C,IAAI,EAAE,eAAe,CAAC,IAAI;aAC3B,CAAC,EACJ,EAAE,CACH,CAAC;SACH;IACH,CAAC;IAED,gCAAgC;QAC9B,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC;YACxC,UAAU,EAAE,MAAM;YAClB,IAAI,EAAE,EAAE;SACT,CAAC,CAAC;IACL,CAAC;IAED,uBAAuB,CAAC,eAAwC;QAC9D,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC1D,CAAC;IAED,wBAAwB;IACxB,uBAAuB,CAAC,QAA0B;QAChD,IAAI,CAAC,cAAc,GAAG,QAAQ,CAAC;IACjC,CAAC;IAED,4BAA4B,CAAC,oBAAyB;QACpD,IAAI,CAAC,iCAAiC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACpE,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,MAAM;aACR,IAAI,CACH,IAAI,CAAC,CAAC,CAAC,EACP,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,sBAAsB,EAAE,CAAC,CAC/C;aACA,SAAS,EAAE,CAAC;IACjB,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;IACjE,CAAC;IAEO,yBAAyB,CAAC,EAAU;QAC1C,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;IACtC,CAAC;;qHAhhBU,wBAAwB;yGAAxB,wBAAwB,qXC1DrC,inIAgGA;2FDtCa,wBAAwB;kBALpC,SAAS;mBAAC;oBACT,QAAQ,EAAE,qBAAqB;oBAC/B,WAAW,EAAE,mCAAmC;oBAChD,SAAS,EAAE,CAAC,mCAAmC,CAAC;iBACjD;0lBAGC,aAAa;sBADZ,KAAK;gBAIN,aAAa;sBADZ,MAAM;gBAIP,sBAAsB;sBADrB,MAAM;gBAIP,eAAe;sBADd,MAAM;gBAIP,gBAAgB;sBADf,SAAS;uBAAC,kBAAkB,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Injector,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { CdkDragDrop } from '@angular/cdk/drag-drop/drag-events';\nimport { TranslateService } from '@ngx-translate/core';\nimport { AdaptSidebarComponent } from '@bmc-ux/adapt-angular';\nimport { BehaviorSubject, combineLatest, forkJoin, merge, Observable, of, ReplaySubject, Subject } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  map,\n  shareReplay,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { find, forEach, isEmpty, isEqual, reject, some } from 'lodash';\n\nimport { IValidationIssue, IValidationIssueSection, ValidationIssueType } from '@helix/platform/ui-kit';\nimport { RxGuidService, RxIdService } from '@helix/platform/utils';\nimport {\n  IDesignerConfiguration,\n  IPlainObject,\n  RxBundleCacheService,\n  RxCommandManagerService,\n  RxDesignerCacheService,\n  RxGlobalCacheService,\n  RxOverlayService\n} from '@helix/platform/shared/api';\nimport {\n  IProcessDefinition,\n  RxProcessDataDictionaryService,\n  RxProcessDefinitionService,\n  RxProcessElementRegistryService,\n  RxProcessElementSearchService\n} from '@helix/platform/process/api';\nimport { IProcessDefinitionModel, RxProcessService } from '@helix/platform/process/elements';\n\nimport { RxProcessDesignerService } from './process-designer.service';\nimport { RxProcessDesignerGraph } from './process-designer-graph.class';\n\n@Component({\n  selector: 'rx-process-designer',\n  templateUrl: './process-designer.component.html',\n  styleUrls: ['./process-designer.component.scss']\n})\nexport class ProcessDesignerComponent implements OnInit, OnChanges, OnDestroy {\n  @Input()\n  configuration: IDesignerConfiguration;\n\n  @Output()\n  closeDesigner: EventEmitter<void> = new EventEmitter<void>();\n\n  @Output()\n  definitionErrorLoading: EventEmitter<void> = new EventEmitter();\n\n  @Output()\n  definitionSaved: EventEmitter<string> = new EventEmitter();\n\n  @ViewChild('inspectorSidebar', { static: false })\n  inspectorSidebar: AdaptSidebarComponent;\n\n  // TODO-VS: update types\n  droppedElement: CdkDragDrop<any>;\n\n  private bundleIdSubject = new BehaviorSubject<string>(null);\n  private definitionModelChangeSubject = new Subject<IProcessDefinitionModel>();\n  private selectedElementModelChangeSubject = new Subject<any>();\n  private definitionNameSubject = new BehaviorSubject<string>(null);\n  private destroyed$ = new ReplaySubject<boolean>(1);\n  private focusDefinitionInspectorSubject = new BehaviorSubject<{ editorName: string; data: IPlainObject }>(null);\n  private focusSelectedElementInspectorSubject = new BehaviorSubject<{ editorName: string; data: IPlainObject }>(null);\n\n  private graph = new RxProcessDesignerGraph({\n    injector: this.injector,\n    options: {\n      processId: this.rxGuidService.generate()\n    }\n  });\n\n  private graphChangeSubject = new Subject<RxProcessDesignerGraph>();\n  private graphChange$ = this.graphChangeSubject.pipe(shareReplay(1));\n  private isDesignModeSubject = new BehaviorSubject<boolean>(true);\n  private selectedElementGuidSubject = new BehaviorSubject<string>(null);\n  private selectedElementGuid$ = this.selectedElementGuidSubject.pipe(distinctUntilChanged(isEqual), shareReplay(1));\n\n  private paletteElementsTree$ = forkJoin([\n    this.rxBundleCacheService.getActionTypes(),\n    this.rxGlobalCacheService.getBundleDescriptors(),\n    this.rxGlobalCacheService.getFunctionDescriptors()\n  ]).pipe(\n    tap(([actionTypes, bundleDescriptors, functionDescriptors]) => {\n      this.rxDesignerCacheService.setActionTypes(actionTypes);\n      this.rxDesignerCacheService.setFunctionDescriptors(functionDescriptors);\n    }),\n    map(([actionTypes, bundleDescriptors]) =>\n      this.rxProcessDesignerService.buildPalette(actionTypes, bundleDescriptors)\n    ),\n    shareReplay(1)\n  );\n\n  private definition$ = combineLatest([this.definitionNameSubject, this.paletteElementsTree$]).pipe(\n    switchMap(([definitionName]) =>\n      definitionName ? this.rxProcessDefinitionService.get(definitionName) : this.rxProcessDefinitionService.getNew()\n    ),\n    shareReplay(1)\n  );\n\n  private isReadOnly$ = combineLatest([\n    this.definition$,\n    this.bundleIdSubject.pipe(switchMap((bundleId) => this.rxOverlayService.areNewDefinitionsAllowed(bundleId)))\n  ]).pipe(\n    map(\n      ([definition, areNewDefinitionsAllowed]) =>\n        !areNewDefinitionsAllowed || !this.rxOverlayService.isCustomizationEnabled('allowOverlay', definition)\n    ),\n    distinctUntilChanged(),\n    shareReplay(1)\n  );\n\n  private definitionModelFromDefinition$ = this.definition$.pipe(\n    map((definition: IProcessDefinition) =>\n      this.rxProcessService.getModelFromDefinition(definition, this.configuration.bundleId)\n    )\n  );\n\n  private graph$ = combineLatest([this.definition$, this.definitionModelFromDefinition$, this.isReadOnly$]).pipe(\n    tap(([definition, definitionModelFromDefinition, isReadOnly]) => {\n      if (!isReadOnly) {\n        this.graph.on('add', (element, elements, options) => {\n          this.graphChangeSubject.next(this.graph);\n        });\n\n        this.graph.on('change', (element, elementModel, changedProperty) => {\n          if (!element.changed.position) {\n            this.graphChangeSubject.next(this.graph);\n          }\n        });\n      }\n\n      this.graph.loadGraphFromDefinition(definition);\n      this.graph.addDefaultElements(definitionModelFromDefinition);\n    }),\n    map(() => this.graph),\n    shareReplay(1)\n  );\n\n  private definitionModelFromGraph$ = this.graphChange$.pipe(\n    map((graph) => graph.getCell(graph.get('processId')).prop('definitionModel')),\n    distinctUntilChanged(isEqual)\n  );\n\n  private definitionModel$ = merge(this.definitionModelFromDefinition$, this.definitionModelFromGraph$).pipe(\n    shareReplay(1)\n  );\n\n  private definitionInspectorConfig$ = this.definitionModel$.pipe(\n    map((definitionModel) => this.rxProcessService.getInspectorConfig(definitionModel))\n  );\n\n  private selectedElementModelFromDefinition$ = combineLatest([this.definition$, this.selectedElementGuid$]).pipe(\n    map(([definition, selectedElementGuid]) => {\n      let selectedElementModel = null;\n\n      if (selectedElementGuid) {\n        const flowElement = this.rxProcessElementSearchService.find(definition, {\n          guid: selectedElementGuid\n        });\n\n        if (flowElement) {\n          const selectedElement = find(JSON.parse(definition.layout).cells, {\n            id: this.rxIdService.getBase(selectedElementGuid)\n          });\n\n          const elementService = this.rxProcessElementRegistryService.get(selectedElement.type).elementService;\n\n          selectedElementModel = elementService.getModelFromDefinition(flowElement);\n        }\n      }\n\n      return selectedElementModel;\n    })\n  );\n\n  private selectedElementModelFromGraph$ = combineLatest([this.graphChange$, this.selectedElementGuid$]).pipe(\n    map(([graph, selectedElementGuid]) => {\n      let selectedElementModel = null;\n\n      if (selectedElementGuid) {\n        const selectedElementCell = graph.getCell(this.rxIdService.getBase(selectedElementGuid));\n\n        selectedElementModel = selectedElementCell.prop('elementModel');\n      }\n\n      return selectedElementModel;\n    })\n  );\n\n  private selectedElementModel$ = merge(\n    this.selectedElementModelFromDefinition$,\n    this.selectedElementModelFromGraph$\n  ).pipe(\n    tap((selectedElementModel) => {\n      if (this.inspectorSidebar?.isPanelOpened) {\n        if (isEmpty(selectedElementModel)) {\n          this.openInspectorSidebarPanel(0);\n        } else {\n          this.openInspectorSidebarPanel(1);\n        }\n      }\n    }),\n    shareReplay(1)\n  );\n\n  private selectedElementInspectorConfig$ = combineLatest([this.selectedElementModel$, this.definitionModel$]).pipe(\n    map(([selectedElementModel, definitionModel]) => {\n      let selectedElementInspectorConfig = null;\n\n      if (selectedElementModel) {\n        const elementService = this.rxProcessElementRegistryService.get(selectedElementModel.type).elementService;\n\n        selectedElementInspectorConfig = elementService.getInspectorConfig(selectedElementModel, {\n          processDefinitionModel: definitionModel\n        });\n      }\n\n      return selectedElementInspectorConfig;\n    })\n  );\n\n  private definitionForCodeViewer$ = this.isDesignModeSubject.pipe(\n    switchMap((isDesignMode) => {\n      return isDesignMode\n        ? of(null)\n        : this.graph$.pipe(\n            take(1),\n            map((graph) => graph.getDefinitionFromGraph())\n          );\n    })\n  );\n\n  private bundleFriendlyName$ = this.bundleIdSubject.pipe(\n    switchMap((bundleId: string) => this.rxGlobalCacheService.getBundleFriendlyName(bundleId))\n  );\n\n  // TODO-VS: update canvas configuration (interactive property)\n  private canvasConfiguration$ = this.isReadOnly$.pipe(\n    map((isReadOnly) => {\n      return {\n        elementRegistry: this.rxProcessElementRegistryService,\n        enableMultiSelection: true,\n        interactive: !isReadOnly,\n        isReadOnly,\n        showToolbar: true\n      };\n    })\n  );\n\n  private breadcrumbItems$ = combineLatest([this.definitionModel$, this.selectedElementModel$]).pipe(\n    map(([definitionModel, selectedElementModel]) => {\n      const breadcrumbItems = [\n        {\n          label:\n            definitionModel.name ||\n            `<${this.translateService.instant('com.bmc.arsys.rx.client.process-designer.new-process.label')}>`,\n          data: {}\n        }\n      ];\n\n      if (selectedElementModel) {\n        breadcrumbItems.push({\n          label: selectedElementModel.label,\n          data: {}\n        });\n      }\n\n      return breadcrumbItems;\n    })\n  );\n\n  private elementValidationIssueSections$: Observable<IValidationIssueSection[]> = this.graphChange$.pipe(\n    switchMap((graph) => {\n      const cells = reject(graph.getCells(), { id: graph.get('processId') });\n\n      return forkJoin(\n        cells.map((cell) => {\n          const elementModel = cell.prop('elementModel');\n          const cellType = cell.prop('type');\n\n          const elementRegistry = this.rxProcessElementRegistryService.get(cellType);\n\n          return elementRegistry.elementService.validate(elementModel, reject(cells, { id: elementModel.id })).pipe(\n            map((elementValidationIssues) => ({\n              title: cell.prop('elementModel').label || this.translateService.instant(elementRegistry.displayName),\n              issues: elementValidationIssues\n            }))\n          );\n        })\n      );\n    })\n  );\n\n  private processValidationIssueSection$: Observable<IValidationIssueSection> = this.graphChange$.pipe(\n    switchMap((graph) => {\n      const processCell = graph.getCell(graph.get('processId'));\n\n      return this.rxProcessService.validate(\n        processCell.prop('definitionModel'),\n        reject(graph.getCells(), { id: processCell.id })\n      );\n    }),\n    map((processValidationIssues) => ({\n      title: this.translateService.instant('com.bmc.arsys.rx.client.process-definition.label'),\n      issues: processValidationIssues\n    }))\n  );\n\n  private validationIssueSections$ = combineLatest([\n    this.processValidationIssueSection$,\n    this.elementValidationIssueSections$\n  ]).pipe(\n    map(([processValidationIssueSection, elementValidationIssueSections]) => {\n      const validationIssueSections: IValidationIssueSection[] = [];\n\n      if (!isEmpty(processValidationIssueSection.issues)) {\n        validationIssueSections.push(processValidationIssueSection);\n      }\n\n      elementValidationIssueSections.forEach((elementValidationIssueSection) => {\n        if (!isEmpty(elementValidationIssueSection.issues)) {\n          validationIssueSections.push(elementValidationIssueSection);\n        }\n      });\n\n      return validationIssueSections;\n    }),\n    shareReplay(1)\n  );\n\n  private hasValidationErrors$ = this.validationIssueSections$.pipe(\n    map((sections) => some(sections, (section) => find(section.issues, { type: ValidationIssueType.Error }))),\n    distinctUntilChanged(),\n    shareReplay(1)\n  );\n\n  // TODO-VS: update the logic to rely on command manager\n  private isSaveButtonDisabled$ = combineLatest([this.hasValidationErrors$, this.isReadOnly$]).pipe(\n    map(([hasValidationErrors, isReadOnly]) => hasValidationErrors || isReadOnly),\n    startWith(true)\n  );\n\n  selectedElementInspectorDesignerItemModel$ = combineLatest([this.selectedElementModel$, this.graph$]).pipe(\n    map(([selectedElementModel, graph]) => ({\n      elementModel: selectedElementModel,\n      graph\n    }))\n  );\n\n  focusDefinitionInspector$ = this.focusDefinitionInspectorSubject.asObservable();\n  focusSelectedElementInspector$ = this.focusSelectedElementInspectorSubject.asObservable();\n\n  vm$ = combineLatest([\n    this.breadcrumbItems$,\n    this.bundleFriendlyName$,\n    this.canvasConfiguration$,\n    this.definitionForCodeViewer$,\n    this.definitionInspectorConfig$,\n    this.definitionModel$,\n    this.graph$,\n    this.hasValidationErrors$,\n    this.isReadOnly$,\n    this.isSaveButtonDisabled$,\n    this.paletteElementsTree$,\n    this.selectedElementInspectorConfig$,\n    this.selectedElementModel$,\n    this.validationIssueSections$\n  ]).pipe(\n    map(\n      ([\n        breadcrumbItems,\n        bundleFriendlyName,\n        canvasConfiguration,\n        definitionForCodeViewer,\n        definitionInspectorConfig,\n        definitionModel,\n        graph,\n        hasValidationErrors,\n        isReadOnly,\n        isSaveButtonDisabled,\n        paletteElementsTree,\n        selectedElementInspectorConfig,\n        selectedElementModel,\n        validationIssueSections\n      ]) => ({\n        breadcrumbItems,\n        bundleFriendlyName,\n        canvasConfiguration,\n        definitionForCodeViewer,\n        definitionInspectorConfig,\n        definitionModel,\n        graph,\n        hasValidationErrors,\n        isReadOnly,\n        isSaveButtonDisabled,\n        paletteElementsTree,\n        selectedElementInspectorConfig,\n        selectedElementModel,\n        validationIssueSections\n      })\n    )\n  );\n\n  constructor(\n    private readonly injector: Injector,\n    private readonly rxBundleCacheService: RxBundleCacheService,\n    private readonly rxCommandManagerService: RxCommandManagerService,\n    private readonly rxDesignerCacheService: RxDesignerCacheService,\n    private readonly rxGlobalCacheService: RxGlobalCacheService,\n    private readonly rxGuidService: RxGuidService,\n    private readonly rxIdService: RxIdService,\n    private readonly rxOverlayService: RxOverlayService,\n    private readonly rxProcessDataDictionaryService: RxProcessDataDictionaryService,\n    private readonly rxProcessDefinitionService: RxProcessDefinitionService,\n    private readonly rxProcessDesignerService: RxProcessDesignerService,\n    private readonly rxProcessElementRegistryService: RxProcessElementRegistryService,\n    private readonly rxProcessElementSearchService: RxProcessElementSearchService,\n    private readonly rxProcessService: RxProcessService,\n    private readonly translateService: TranslateService\n  ) {}\n\n  ngOnInit(): void {\n    // TODO-VS: update logic not to debounce model change here\n    this.definitionModelChangeSubject\n      .pipe(debounceTime(300), withLatestFrom(this.graph$), takeUntil(this.destroyed$))\n      .subscribe(([definitionModel, graph]) => {\n        const processCell = graph.getCell(graph.get('processId'));\n        const commandManager = this.rxCommandManagerService.get();\n\n        commandManager.initBatchCommand();\n\n        forEach(definitionModel, (propertyValue, propertyName) => {\n          processCell.prop(`definitionModel/${propertyName}`, propertyValue);\n        });\n\n        commandManager.storeBatchCommand();\n      });\n\n    // TODO-VS: update logic not to debounce model change here\n    this.selectedElementModelChangeSubject\n      .pipe(debounceTime(300), withLatestFrom(this.graph$), takeUntil(this.destroyed$))\n      .subscribe(([selectedElementModel, graph]) => {\n        const selectedElementCell = graph.getCell(this.rxIdService.getBase(selectedElementModel.guid));\n        const commandManager = this.rxCommandManagerService.get();\n\n        commandManager.initBatchCommand();\n\n        forEach(selectedElementModel, (propertyValue, propertyName) => {\n          selectedElementCell.prop(`elementModel/${propertyName}`, propertyValue);\n        });\n\n        commandManager.storeBatchCommand();\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.configuration.currentValue.definitionName) {\n      this.graph.reset();\n      this.rxProcessDataDictionaryService.clear();\n\n      this.isDesignModeSubject.next(true);\n      this.definitionNameSubject.next(changes.configuration.currentValue.definitionName);\n    }\n\n    if (changes.configuration.currentValue.bundleId) {\n      this.bundleIdSubject.next(changes.configuration.currentValue.bundleId);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.rxProcessDataDictionaryService.clear();\n\n    this.bundleIdSubject.complete();\n    this.definitionModelChangeSubject.complete();\n    this.definitionNameSubject.complete();\n    this.focusDefinitionInspectorSubject.complete();\n    this.focusSelectedElementInspectorSubject.complete();\n    this.graphChangeSubject.complete();\n    this.isDesignModeSubject.complete();\n    this.selectedElementGuidSubject.complete();\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  canDeactivate(): boolean {\n    return true;\n  }\n\n  onBreadcrumbSelected(guid: string): void {\n    if (guid) {\n      this.openInspectorSidebarPanel(1);\n    } else {\n      this.openInspectorSidebarPanel(0);\n    }\n  }\n\n  onCanvasElementSelected(guid: string): void {\n    if (!guid) {\n      this.openInspectorSidebarPanel(0);\n    }\n\n    this.selectedElementGuidSubject.next(guid);\n  }\n\n  onCorrectIssue(validationIssue: IValidationIssue): void {\n    this.openInspectorSidebarPanel(validationIssue.data.inspectorTabIndex);\n\n    if (validationIssue.data.inspectorTabIndex === 0) {\n      setTimeout(\n        () =>\n          this.focusDefinitionInspectorSubject.next({\n            editorName: validationIssue.data.propertyName,\n            data: validationIssue.data\n          }),\n        10\n      );\n    } else if (validationIssue.data.inspectorTabIndex === 1) {\n      this.selectedElementGuidSubject.next(validationIssue.data.guid);\n\n      setTimeout(\n        () =>\n          this.focusSelectedElementInspectorSubject.next({\n            editorName: validationIssue.data.propertyName,\n            data: validationIssue.data\n          }),\n        10\n      );\n    }\n  }\n\n  onDefinitionInspectorInitialized(): void {\n    this.focusDefinitionInspectorSubject.next({\n      editorName: 'name',\n      data: {}\n    });\n  }\n\n  onDefinitionModelChange(definitionModel: IProcessDefinitionModel): void {\n    this.definitionModelChangeSubject.next(definitionModel);\n  }\n\n  // TODO-VS: update types\n  onPaletteElementDropped(dropData: CdkDragDrop<any>) {\n    this.droppedElement = dropData;\n  }\n\n  onSelectedElementModelChange(selectedElementModel: any): void {\n    this.selectedElementModelChangeSubject.next(selectedElementModel);\n  }\n\n  saveDefinition(): void {\n    this.graph$\n      .pipe(\n        take(1),\n        map((graph) => graph.getDefinitionFromGraph())\n      )\n      .subscribe();\n  }\n\n  toggleDesignMode(): void {\n    this.isDesignModeSubject.next(!this.isDesignModeSubject.value);\n  }\n\n  private openInspectorSidebarPanel(id: number): void {\n    this.inspectorSidebar.openPanel(id);\n  }\n}\n","<ng-container *ngIf=\"vm$ | async as vm\">\n  <rx-designer-header\n    [bundleName]=\"vm.bundleFriendlyName\"\n    [breadcrumbItems]=\"vm.breadcrumbItems\"\n    [isSaveButtonDisabled]=\"vm.isSaveButtonDisabled\"\n    (breadcrumbSelected)=\"onBreadcrumbSelected($event.data.guid)\"\n    (toggleDesignMode)=\"toggleDesignMode()\"\n    (closeDesigner)=\"closeDesigner.emit()\"\n    (save)=\"saveDefinition()\"\n  ></rx-designer-header>\n\n  <div class=\"rx-designer-component\" [hidden]=\"vm.definitionForCodeViewer\">\n    <adapt-sidebar position=\"right\" panelWidth=\"280px\" [openedId]=\"0\" #inspectorSidebar>\n      <adapt-sidebar-item\n        headerTitle=\"{{ 'com.bmc.arsys.rx.client.process-designer.inspector.process-properties.title' | translate }}\"\n        tooltipText=\"{{ 'com.bmc.arsys.rx.client.process-designer.inspector.process-properties.title' | translate }}\"\n        iconClass=\"d-icon-pencil\"\n      >\n        <rx-form-builder\n          [config]=\"vm.definitionInspectorConfig\"\n          [model]=\"vm.definitionModel\"\n          [focusEditor$]=\"focusDefinitionInspector$\"\n          (formInitialized)=\"onDefinitionInspectorInitialized()\"\n          [isReadOnly]=\"vm.isReadOnly\"\n          (modelChange)=\"onDefinitionModelChange($event)\"\n        ></rx-form-builder>\n      </adapt-sidebar-item>\n\n      <adapt-sidebar-item\n        headerTitle=\"{{ 'com.bmc.arsys.rx.client.process-designer.inspector.element-properties.title' | translate }}\"\n        tooltipText=\"{{ 'com.bmc.arsys.rx.client.process-designer.inspector.element-properties.title' | translate }}\"\n        iconClass=\"d-icon-gear\"\n      >\n        <rx-form-builder\n          *ngIf=\"vm.selectedElementInspectorConfig; else missingElementAlert\"\n          rxInspector\n          [config]=\"vm.selectedElementInspectorConfig\"\n          [model]=\"vm.selectedElementModel\"\n          [designerItemModel]=\"selectedElementInspectorDesignerItemModel$\"\n          [focusEditor$]=\"focusSelectedElementInspector$\"\n          [isReadOnly]=\"vm.isReadOnly\"\n          (modelChange)=\"onSelectedElementModelChange($event)\"\n        ></rx-form-builder>\n\n        <ng-template #missingElementAlert>\n          <adapt-alert\n            class=\"p-3 definition-valid-message\"\n            [config]=\"{\n              content: 'com.bmc.arsys.rx.client.process-designer.inspector.missing-element.label' | translate,\n              variant: 'info',\n              type: 'inline'\n            }\"\n          ></adapt-alert>\n        </ng-template>\n      </adapt-sidebar-item>\n\n      <adapt-sidebar-item\n        headerTitle=\"{{ 'com.bmc.arsys.rx.client.designer.validation-issues.label' | translate }}\"\n        tooltipText=\"{{ 'com.bmc.arsys.rx.client.designer.validation-issues.label' | translate }}\"\n        [iconClass]=\"vm.hasValidationErrors ? 'd-icon-exclamation_triangle text-danger' : 'd-icon-exclamation_triangle'\"\n      >\n        <rx-validation-issues\n          [issueSections]=\"vm.validationIssueSections\"\n          [definitionTypeDisplayName]=\"'com.bmc.arsys.rx.client.common.process-definition.label' | translate\"\n          (correctIssue)=\"onCorrectIssue($event)\"\n        ></rx-validation-issues>\n      </adapt-sidebar-item>\n\n      <div class=\"main\">\n        <!-- TODO-VS: remove blade in favour of adapt sidebar -->\n        <rx-blade [title]=\"'Palette'\" rx-id=\"palette\" [isExpanded]=\"true\">\n          <rx-designer-palette\n            [tree]=\"vm.paletteElementsTree\"\n            (elementDropped)=\"onPaletteElementDropped($event)\"\n          ></rx-designer-palette>\n        </rx-blade>\n\n        <rx-designer-canvas\n          [configuration]=\"vm.canvasConfiguration\"\n          [graph]=\"vm.graph\"\n          [droppedElement]=\"droppedElement\"\n          (elementSelected)=\"onCanvasElementSelected($event)\"\n        ></rx-designer-canvas>\n      </div>\n    </adapt-sidebar>\n  </div>\n\n  <adapt-code-viewer\n    *ngIf=\"vm.definitionForCodeViewer\"\n    class=\"full-size\"\n    theme=\"light\"\n    lang=\"javascript\"\n    [hasToolbar]=\"false\"\n    [code]=\"vm.definitionForCodeViewer | json\"\n  ></adapt-code-viewer>\n</ng-container>\n"]}