{"version":3,"file":"boolean-field-design.model.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/field-components/boolean-field/design/boolean-field-design.model.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAE,oBAAoB,EAAE,MAAM,4BAA4B,CAAC;AAElE,OAAO,EAA6B,0BAA0B,EAAE,MAAM,mCAAmC,CAAC;AAC1G,OAAO,EAAE,2BAA2B,EAAE,MAAM,6EAA6E,CAAC;AAC1H,OAAO,EAAE,uBAAuB,EAAE,MAAM,wBAAwB,CAAC;AACjE,OAAO,EAAE,SAAS,EAAE,GAAG,IAAI,IAAI,EAAE,MAAM,QAAQ,CAAC;AAGhD,OAAO,EAAE,OAAO,EAAE,MAAM,4BAA4B,CAAC;AAErD,MAAM,OAAO,uBAAwB,SAAQ,2BAA2B;IAYtE,YAAmB,QAAkB,EAAS,OAA6D;QACzG,KAAK,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QADR,aAAQ,GAAR,QAAQ,CAAU;QAAS,YAAO,GAAP,OAAO,CAAsD;QAX3G,yBAAoB,GAAwC,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC;QAC9F,uBAAkB,GAAG,CAAC,oBAAoB,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IAYlE,CAAC;IAVD,MAAM,CAAC,oBAAoB,CAAC,iBAA2C;QACrE,qDACK,2BAA2B,CAAC,oBAAoB,EAAE,KACrD,WAAW,EAAE,uBAAuB,CAAC,MAAM,KACxC,iBAAiB,EACpB;IACJ,CAAC;IAMD,kBAAkB;QAChB,OAAO,KAAK;aACT,kBAAkB,EAAE;aACpB,IAAI,CAAC,GAAG,CAAC,CAAC,eAA6C,EAAE,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;IAC7G,CAAC;IAEO,mBAAmB,CAAC,eAA6C;QACvE,MAAM,iBAAiB,GAAG,SAAS,CACjC,eAAe,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,QAAQ,EACnD,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO,CAChC,CAAC;QAEF,MAAM,kBAAkB,GAAG;YACzB,IAAI,EAAE,aAAa;YACnB,SAAS,EAAE,0BAA0B;YACrC,OAAO,EAAE;gBACP,KAAK,EAAE,cAAc;gBACrB,OAAO,EAAE,IAAI,OAAO,CAAC,iEAAiE,CAAC;gBACvF,QAAQ,EAAE,KAAK;gBACf,OAAO,EAAE,IAAI,CAAC,uBAAuB,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;oBACvD,EAAE,EAAE,KAAK;oBACT,IAAI;iBACL,CAAC,CAAC;aACyB;SAC/B,CAAC;QAEF,IAAI,iBAAiB,KAAK,CAAC,CAAC,EAAE;YAC5B,eAAe,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,EAAE,kBAAkB,CAAC,CAAC;SACtG;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;CACF","sourcesContent":["import { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IViewComponentDesignSandbox, IViewDesignerInspectorConfig } from '@helix/platform/view/designer';\nimport { ISelectFormControlOptions, SelectFormControlComponent } from '@helix/platform/shared/components';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design/base-record-editor-field-design.class';\nimport { BooleanFieldEditingMode } from '../boolean-field.types';\nimport { findIndex, map as _map } from 'lodash';\nimport { Injector } from '@angular/core';\nimport { IBooleanFieldProperties } from './boolean-field-design.types';\nimport { Tooltip } from '@helix/platform/shared/api';\n\nexport class BooleanFieldDesignModel extends BaseRecordEditorFieldDesign {\n  componentProperties$: Observable<IBooleanFieldProperties> = this.sandbox.componentProperties$;\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.boolean];\n\n  static getInitialProperties(initialProperties?: IBooleanFieldProperties): IBooleanFieldProperties {\n    return {\n      ...BaseRecordEditorFieldDesign.getInitialProperties(),\n      editingMode: BooleanFieldEditingMode.Switch,\n      ...initialProperties\n    };\n  }\n\n  constructor(public injector: Injector, public sandbox: IViewComponentDesignSandbox<IBooleanFieldProperties>) {\n    super(injector, sandbox);\n  }\n\n  getInspectorConfig(): Observable<IViewDesignerInspectorConfig> {\n    return super\n      .getInspectorConfig()\n      .pipe(map((inspectorConfig: IViewDesignerInspectorConfig) => this.editInspectorConfig(inspectorConfig)));\n  }\n\n  private editInspectorConfig(inspectorConfig: IViewDesignerInspectorConfig): IViewDesignerInspectorConfig {\n    const valueControlIndex = findIndex(\n      inspectorConfig.inspectorSectionConfigs[0].controls,\n      (item) => item.name === 'value'\n    );\n\n    const editingModeControl = {\n      name: 'editingMode',\n      component: SelectFormControlComponent,\n      options: {\n        label: 'Editing mode',\n        tooltip: new Tooltip('An optional Boolean field will always be displayed as a Switch.'),\n        required: false,\n        options: _map(BooleanFieldEditingMode, (value, name) => ({\n          id: value,\n          name\n        }))\n      } as ISelectFormControlOptions\n    };\n\n    if (valueControlIndex !== -1) {\n      inspectorConfig.inspectorSectionConfigs[0].controls.splice(valueControlIndex, 0, editingModeControl);\n    }\n\n    return inspectorConfig;\n  }\n}\n"]}