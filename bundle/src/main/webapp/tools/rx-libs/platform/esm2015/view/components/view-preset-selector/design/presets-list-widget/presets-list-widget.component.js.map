{"version":3,"file":"presets-list-widget.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/view-preset-selector/design/presets-list-widget/presets-list-widget.component.ts","../../../../../../../../../libs/platform/view/components/view-preset-selector/design/presets-list-widget/presets-list-widget.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Injector, OnInit, ViewChild } from '@angular/core';\nimport { AdaptRxListBuilderComponent, RxListBuilderItem } from '@bmc-ux/adapt-angular';\nimport { InspectorWidgetBase } from '@helix/platform/shared/components';\nimport { ViewPresetSelectorDesignModel } from '../view-preset-selector-design.model';\nimport { IFormFocusable, IFormWidgetComponent, IPlainObject } from '@helix/platform/shared/api';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport { IViewComponentDesignSetPayload } from '@helix/platform/view/designer';\nimport { IViewPresetProperties } from '../../view-preset-selector.types';\nimport { first, takeUntil } from 'rxjs/operators';\nimport { TranslateService } from '@ngx-translate/core';\nimport { chain, cloneDeep, trim } from 'lodash';\n\n@Component({\n  selector: 'rx-presets-list-widget',\n  templateUrl: './presets-list-widget.component.html',\n  styleUrls: ['./presets-list-widget.component.scss']\n})\nexport class PresetsListWidgetComponent\n  extends InspectorWidgetBase<IPlainObject, ViewPresetSelectorDesignModel>\n  implements OnInit, IFormWidgetComponent, IFormFocusable\n{\n  private editedPreset: RxListBuilderItem = null;\n\n  presets: RxListBuilderItem[] = [];\n\n  isDisabled: boolean;\n\n  @ViewChild(AdaptRxListBuilderComponent)\n  adaptRxListBuilderComponent: AdaptRxListBuilderComponent;\n\n  private strings = {\n    cannotBeBlank: this.translateService.instant(\n      'com.bmc.arsys.rx.client.designer.validation.cannot-be-blank.message',\n      {\n        propertyName: 'View preset name'\n      }\n    ),\n    duplicateValue: this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.duplicate-value.message')\n  };\n\n  itemValidationFn = this.itemValidation.bind(this);\n\n  constructor(protected injector: Injector, private translateService: TranslateService) {\n    super(injector);\n  }\n\n  ngOnInit(): void {\n    this.designerItemModel.sandbox\n      .getChildComponents()\n      .pipe(first(), takeUntil(this.designerItemModel.sandbox.destroyed$))\n      .subscribe((res) => {\n        res.sort((a, b) => a.data.index - b.data.index);\n\n        this.presets = res.map((component) => ({\n          name: component.data.label,\n          id: component.guid\n        }));\n      });\n  }\n\n  onPresetsListChange(items: RxListBuilderItem[]) {\n    items.forEach((item) => {\n      item.name = trim(item.name);\n    });\n\n    this.presets = cloneDeep(items);\n\n    const payload: IViewComponentDesignSetPayload<IViewPresetProperties>[] = items.map(({ name, id }, index) => ({\n      type: RxViewComponentType.ViewPreset,\n      guid: String(id),\n      data: {\n        label: name,\n        index\n      }\n    }));\n\n    this.designerItemModel.sandbox.setChildren(payload);\n  }\n\n  onListItemAdd(): void {\n    this.presets.push(this.presets.shift());\n  }\n\n  onListItemEdit(preset: RxListBuilderItem): void {\n    this.editedPreset = preset;\n  }\n\n  onListItemUpdate(): void {\n    this.editedPreset = null;\n  }\n\n  focus(): void {\n    this.adaptRxListBuilderComponent.inputEl.nativeElement.focus();\n  }\n\n  private itemValidation(value: string, items: RxListBuilderItem[], isEdit: boolean): string {\n    let errorMessage: string = null;\n\n    const otherItemNames = chain(items)\n      .reject((item) => isEdit && item.id === this.editedPreset.id)\n      .map('name')\n      .value();\n\n    const trimmedValue = trim(value);\n\n    if (trimmedValue.length === 0) {\n      errorMessage = this.strings.cannotBeBlank;\n    } else if (otherItemNames.includes(trimmedValue)) {\n      errorMessage = this.strings.duplicateValue;\n    }\n\n    return errorMessage;\n  }\n}\n","<adapt-rx-list-builder\n  [label]=\"'View preset names'\"\n  [(ngModel)]=\"presets\"\n  (ngModelChange)=\"onPresetsListChange($event)\"\n  [hideListAreaLabel]=\"true\"\n  [texts]=\"options.texts\"\n  [readonly]=\"isDisabled\"\n  (listItemAdd)=\"onListItemAdd()\"\n  (listItemEdit)=\"onListItemEdit($event)\"\n  (listItemUpdate)=\"onListItemUpdate()\"\n  [itemValidation]=\"itemValidationFn\"\n>\n</adapt-rx-list-builder>\n"]}