{"version":3,"file":"expression-input-map-inspector-widget.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/process/elements/shared/components/expression-input-map-inspector-widget/expression-input-map-inspector-widget.component.ts","../../../../../../../../../libs/platform/process/elements/shared/components/expression-input-map-inspector-widget/expression-input-map-inspector-widget.component.html"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ElementRef,\n  Injector,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { Observable, of, ReplaySubject } from 'rxjs';\nimport { map, pluck, take, takeUntil } from 'rxjs/operators';\nimport { isEqual } from 'lodash';\n\nimport { RxIdService } from '@helix/platform/utils';\nimport { IFormWidgetComponent, IProcessActionElementModel, RxDesignerCacheService } from '@helix/platform/shared/api';\nimport {\n  IExpressionEditorProperty,\n  IExpressionEditorPropertyChange,\n  InspectorWidgetBase,\n  RxExpressionEditorService\n} from '@helix/platform/shared/components';\nimport { ISelectedElementInspectorDesignerItemModel } from '@helix/platform/process/api';\n\nimport {\n  IExpressionInputMapInspectorConfig,\n  IExpressionInputMapInspectorWidgetOptions\n} from './expression-input-map-inspector-widget.types';\n\n@Component({\n  selector: 'rx-expression-input-map-inspector-widget',\n  templateUrl: './expression-input-map-inspector-widget.component.html',\n  styleUrls: ['./expression-input-map-inspector-widget.component.scss']\n})\nexport class RxExpressionInputMapInspectorWidgetComponent\n  extends InspectorWidgetBase<\n    IExpressionInputMapInspectorWidgetOptions,\n    Observable<ISelectedElementInspectorDesignerItemModel<IProcessActionElementModel>>\n  >\n  implements OnInit, OnDestroy, OnChanges, IFormWidgetComponent\n{\n  @ViewChild('expressionInputMapInspector', { read: ElementRef })\n  expressionInputMapInspectorElementRef: ElementRef;\n\n  config: IExpressionInputMapInspectorConfig[];\n  elementModel$: Observable<IProcessActionElementModel>;\n  graph$: Observable<any>;\n\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  constructor(\n    private renderer: Renderer2,\n    private rxDesignerCacheService: RxDesignerCacheService,\n    private rxExpressionEditorService: RxExpressionEditorService,\n    private rxIdService: RxIdService,\n    protected injector: Injector\n  ) {\n    super(injector);\n  }\n\n  ngOnInit(): void {\n    this.elementModel$ = this.designerItemModel.pipe(pluck('elementModel'), takeUntil(this.destroyed$));\n    this.graph$ = this.designerItemModel.pipe(pluck('graph'), takeUntil(this.destroyed$));\n\n    this.patchConfig(this.options);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!isEqual(changes.options.currentValue, changes.options.previousValue)) {\n      this.patchConfig(changes.options.currentValue);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  openExpressionEditor(\n    section: IExpressionInputMapInspectorConfig,\n    elementModel: IProcessActionElementModel,\n    inspectorElementRef: ElementRef\n  ) {\n    this.graph$.pipe(take(1)).subscribe((graph) => {\n      this.rxExpressionEditorService\n        .openEditor({\n          expressionConfigurator: this.options.expressionConfigurator,\n\n          expressionPropertyNavigator: {\n            getProperties: this.getExpressionProperties.bind(this, elementModel, inspectorElementRef)\n          },\n\n          isReadOnly: false,\n\n          property: {\n            path: `inputMap/${section.name}`,\n            value: elementModel.inputMap[section.name],\n            label: section.options.label\n          }\n        })\n        .pipe(takeUntil(this.destroyed$))\n        .subscribe((expression: IExpressionEditorPropertyChange) => {\n          const selectedElementCell = graph.getCell(this.rxIdService.getBase(elementModel.guid));\n\n          selectedElementCell.prop(`elementModel/${expression.path}`, expression.value);\n        });\n    });\n  }\n\n  private getExpressionProperties(\n    elementModel: IProcessActionElementModel,\n    inspectorElementRef: ElementRef\n  ): Observable<IExpressionEditorProperty[]> {\n    return of(elementModel.inputMap).pipe(\n      map((modelProperties) =>\n        Array.from(\n          this.renderer\n            .selectRootElement(inspectorElementRef.nativeElement, true)\n            .querySelectorAll('rx-expression-form-control')\n        ).map((element: Element) => {\n          const propertyPath = element.getAttribute('property-path');\n\n          return {\n            path: `inputMap/${propertyPath}`,\n            value: modelProperties[propertyPath],\n            label: element.getAttribute('property-label')\n          };\n        })\n      )\n    );\n  }\n\n  private patchConfig(options: IExpressionInputMapInspectorWidgetOptions): void {\n    this.config = options.expressionInputMapInspectorOptions.map((expressionInputMapInspectorOption) => ({\n      name: expressionInputMapInspectorOption.name,\n      options: {\n        label: expressionInputMapInspectorOption.label,\n        dataDictionary$: options.expressionConfigurator.getDataDictionary(\n          `inputMap/${expressionInputMapInspectorOption.name}`\n        ),\n        operators: options.expressionConfigurator.getOperators(`inputMap/${expressionInputMapInspectorOption.name}`)\n      }\n    }));\n  }\n}\n","<div *ngIf=\"elementModel$ | async as elementModel\" #expressionInputMapInspector>\n  <rx-expression-form-control\n    *ngFor=\"let section of config\"\n    [options]=\"section.options\"\n    [propertyPath]=\"section.name\"\n    [ngModel]=\"elementModel.inputMap[section.name]\"\n    (events)=\"openExpressionEditor(section, elementModel, expressionInputMapInspectorElementRef)\"\n  >\n  </rx-expression-form-control>\n</div>\n"]}