{"version":3,"file":"upgrade-tracker.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/upgrade-tracker/upgrade-tracker.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,aAAa,EAAc,EAAE,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAC9D,OAAO,EAAE,KAAK,EAAE,MAAM,gBAAgB,CAAC;AACvC,OAAO,EAAE,qBAAqB,EAAE,MAAM,sCAAsC,CAAC;AAC7E,OAAO,EAAE,qBAAqB,EAAE,MAAM,sCAAsC,CAAC;AAC7E,OAAO,EAAwB,4BAA4B,EAAE,MAAM,mBAAmB,CAAC;;;;;AAKvF,MAAM,OAAO,uBAAuB;IAOlC,YACU,qBAA4C,EAC5C,qBAA4C,EAC5C,4BAA0D;QAF1D,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,iCAA4B,GAA5B,4BAA4B,CAA8B;QAT5D,yBAAoB,GAAG,KAAK,CAAC;QAC7B,oBAAe,GAAG,EAAE,CAAC;QACrB,+BAA0B,GAAG,IAAI,OAAO,EAAW,CAAC;QAE5D,yBAAoB,GAAwB,IAAI,CAAC,0BAA0B,CAAC,YAAY,EAAE,CAAC;IAMxF,CAAC;IAEJ,IAAI,cAAc,CAAC,OAAe;QAChC,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC;IACjC,CAAC;IAED,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,eAAe,CAAC;IAC9B,CAAC;IAED,IAAI,mBAAmB,CAAC,mBAA4B;QAClD,MAAM,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,KAAK,mBAAmB,CAAC;QAE3E,IAAI,CAAC,oBAAoB,GAAG,mBAAmB,CAAC;QAEhD,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;YAC9B,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;SAC3B;QAED,IAAI,gBAAgB,EAAE;YACpB,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;SAC3D;IACH,CAAC;IAED,IAAI,mBAAmB;QACrB,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACnC,CAAC;IAEO,sBAAsB;QAC5B,IAAI,mBAAqD,CAAC;QAE1D,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YACzB,mBAAmB,GAAG,IAAI,CAAC,4BAA4B,CAAC,gBAAgB,CAAC,2BAA2B,CAAC,CAAC;SACvG;aAAM;YACL,mBAAmB,GAAG,EAAE,CAAC;gBACvB,EAAE,EAAE,EAAE;gBACN,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE,IAAI,CAAC,eAAe;aAC5B,CAAC,CAAC;SACJ;QAED,OAAO,mBAAmB,CAAC;IAC7B,CAAC;IAED,0BAA0B,CAAC,iBAA0B;QACnD,IAAI,IAAI,CAAC,mBAAmB,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,iBAAiB,CAAC,EAAE;YAC3E,aAAa,CAAC,CAAC,IAAI,CAAC,sBAAsB,EAAE,EAAE,IAAI,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,CAAC;iBAC7F,IAAI,CAAC,KAAK,EAAE,CAAC;iBACb,SAAS,CAAC,CAAC,CAAC,cAAc,CAAC,EAAE,EAAE;gBAC9B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC,KAAe,CAAC;gBACrD,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YACpE,CAAC,CAAC,CAAC;SACN;IACH,CAAC;;oHAhEU,uBAAuB;wHAAvB,uBAAuB,cAFtB,MAAM;2FAEP,uBAAuB;kBAHnC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { combineLatest, Observable, of, Subject } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { RxNotificationService } from '../notification/notification.service';\nimport { RxLocalizationService } from '../localization/localization.service';\nimport { ISystemConfiguration, RxSystemConfigurationService } from '../administration';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxUpgradeTrackerService {\n  private _isUpgradeInProgress = false;\n  private _upgradeMessage = '';\n  private isUpgradeInProgressSubject = new Subject<boolean>();\n\n  isUpgradeInProgress$: Observable<boolean> = this.isUpgradeInProgressSubject.asObservable();\n\n  constructor(\n    private rxLocalizationService: RxLocalizationService,\n    private rxNotificationService: RxNotificationService,\n    private rxSystemConfigurationService: RxSystemConfigurationService\n  ) {}\n\n  set upgradeMessage(message: string) {\n    this._upgradeMessage = message;\n  }\n\n  get upgradeMessage(): string {\n    return this._upgradeMessage;\n  }\n\n  set isUpgradeInProgress(isUpgradeInProgress: boolean) {\n    const hasStatusChanged = this._isUpgradeInProgress !== isUpgradeInProgress;\n\n    this._isUpgradeInProgress = isUpgradeInProgress;\n\n    if (!this._isUpgradeInProgress) {\n      this._upgradeMessage = '';\n    }\n\n    if (hasStatusChanged) {\n      this.isUpgradeInProgressSubject.next(isUpgradeInProgress);\n    }\n  }\n\n  get isUpgradeInProgress(): boolean {\n    return this._isUpgradeInProgress;\n  }\n\n  private getUpgradeNotification(): Observable<ISystemConfiguration> {\n    let upgradeNotification: Observable<ISystemConfiguration>;\n\n    if (!this._upgradeMessage) {\n      upgradeNotification = this.rxSystemConfigurationService.getConfiguration('Upgrade-Notification-Text');\n    } else {\n      upgradeNotification = of({\n        id: '',\n        name: '',\n        value: this._upgradeMessage\n      });\n    }\n\n    return upgradeNotification;\n  }\n\n  displayUpgradeNotification(forceNotification: boolean): void {\n    if (this.isUpgradeInProgress && (!this.upgradeMessage || forceNotification)) {\n      combineLatest([this.getUpgradeNotification(), this.rxLocalizationService.onTranslationsLoaded$])\n        .pipe(first())\n        .subscribe(([upgradeMessage]) => {\n          this.upgradeMessage = upgradeMessage.value as string;\n          this.rxNotificationService.addWarningMessage(this.upgradeMessage);\n        });\n    }\n  }\n}\n"]}