{"version":3,"file":"view-action-validator.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/designer/validation/view-action-validator.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { flatten, flow, map as _map, compact, find, isFunction, isString } from 'lodash';\nimport {\n  IViewActionDescriptor,\n  IViewActionDesignManager,\n  IViewActionDesignProperties,\n  RxViewActionRegistryService\n} from '@helix/platform/view/api';\nimport { RxStringService } from '@helix/platform/utils';\nimport { map } from 'rxjs/operators';\nimport { RxLogService } from '@helix/platform/shared/api';\nimport { RxViewExpressionValidatorService } from './view-expression-validator.service';\nimport { IViewComponentDesignData } from '../public-interfaces/view-component-design.types';\nimport { IViewComponentDesignValidationIssue } from '../public-interfaces/view-component-design-validation-issue.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxViewActionValidatorService {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxStringService: RxStringService,\n    private rxLogService: RxLogService,\n    private rxViewExpressionValidatorService: RxViewExpressionValidatorService\n  ) {}\n\n  validate(\n    actionsDesignData: IViewComponentDesignData<IViewActionDesignProperties>[],\n    propertyName: string\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    const issues: Observable<IViewComponentDesignValidationIssue[]>[] = flow(\n      (actions: IViewComponentDesignData<IViewActionDesignProperties>[]) =>\n        actions.map(({ data }) => {\n          const descriptor = this.rxViewActionRegistryService.get(data.name);\n\n          return [\n            of(this.validateRequiredProps(data, descriptor, propertyName)),\n            this.performCustomValidation(data, descriptor, propertyName),\n            this.validateExpressions(data, descriptor, propertyName)\n          ];\n        }),\n      flatten\n    )(actionsDesignData);\n\n    return combineLatest([of(this.validateActionSequence(actionsDesignData, propertyName)), ...issues]).pipe(\n      map(flatten)\n    );\n  }\n\n  private performCustomValidation(\n    actionProps: IViewActionDesignProperties,\n    descriptor: IViewActionDescriptor,\n    issuePropertyName: string\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    const designManager: IViewActionDesignManager = this.rxViewActionRegistryService.getDesignManager(descriptor.name);\n\n    return designManager\n      ? designManager.validate(actionProps, issuePropertyName).pipe(\n          map((issues) =>\n            issues.map((issue) => ({\n              ...issue,\n              data: {\n                actionIndex: actionProps.index\n              }\n            }))\n          )\n        )\n      : of([]);\n  }\n\n  private validateRequiredProps(\n    actionProps: IViewActionDesignProperties,\n    descriptor: IViewActionDescriptor,\n    issuePropertyName: string\n  ): IViewComponentDesignValidationIssue[] {\n    return flow(\n      (descriptorParams) =>\n        descriptorParams.filter(\n          (param) => param.isRequired === true && this.rxStringService.isEmptySafe(actionProps[param.name])\n        ),\n      (descriptorParams) =>\n        descriptorParams.map((param) => ({\n          type: 'error',\n          description: `${descriptor.label} action: ${param.label || param.name} cannot be blank.`,\n          propertyName: issuePropertyName,\n          data: {\n            actionIndex: actionProps.index\n          }\n        }))\n    )(descriptor.parameters);\n  }\n\n  private validateExpressions(\n    actionProps: IViewActionDesignProperties,\n    descriptor: IViewActionDescriptor,\n    issuePropertyName: string\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    const actionIssues: Observable<IViewComponentDesignValidationIssue[]>[] = descriptor.parameters\n      .filter(\n        (paramDescriptor) => paramDescriptor.enableExpressionEvaluation === true && actionProps[paramDescriptor.name]\n      )\n      .map((paramDescriptor) =>\n        this.rxViewExpressionValidatorService\n          .validate(\n            actionProps[paramDescriptor.name],\n            issuePropertyName,\n            paramDescriptor.label || paramDescriptor.name,\n            paramDescriptor.evaluatorService\n          )\n          .pipe(\n            map((issues) =>\n              issues.map((issue) => ({\n                ...issue,\n                description: `${descriptor.label} action: ${issue.description}`,\n                data: {\n                  actionIndex: actionProps.index\n                }\n              }))\n            )\n          )\n      );\n\n    return actionIssues.length ? combineLatest(actionIssues).pipe(map(flatten)) : of([]);\n  }\n\n  private validateActionSequence(\n    actions: IViewComponentDesignData<IViewActionDesignProperties>[],\n    issuePropertyName: string\n  ): IViewComponentDesignValidationIssue[] {\n    return flow(\n      (actionsDesignData: IViewComponentDesignData<IViewActionDesignProperties>[]) =>\n        _map(actionsDesignData, ({ data }) => {\n          const descriptor = this.rxViewActionRegistryService.get(data.name);\n\n          return descriptor\n            ? _map(data, (propertyValue, propertyName) => {\n                if (\n                  descriptor.parameters.find((param) => param.name === propertyName)?.enableExpressionEvaluation &&\n                  this.rxStringService.isNonEmptyString(propertyValue)\n                ) {\n                  // Extract <ID> from ${view.components.<ID>.<Path>}\n                  const matches = (propertyValue as string).match(/\\${view\\.components\\.([0-9a-z-]+)\\..+}/);\n\n                  if (matches && matches[1]) {\n                    const referencedAction = find(actionsDesignData, { guid: matches[1] });\n\n                    if (Number(referencedAction?.data.index) > Number(data.index)) {\n                      return {\n                        type: 'error',\n                        description: `${descriptor.label} action: invalid expression for ${propertyName}.`,\n                        propertyName: issuePropertyName\n                      } as IViewComponentDesignValidationIssue;\n                    }\n                  }\n                }\n              })\n            : [];\n        }),\n      flatten,\n      compact\n    )(actions);\n  }\n}\n"]}