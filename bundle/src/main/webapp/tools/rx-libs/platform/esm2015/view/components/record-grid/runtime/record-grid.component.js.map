{"version":3,"file":"record-grid.component.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/record-grid/runtime/record-grid.component.ts","../../../../../../../../libs/platform/view/components/record-grid/runtime/record-grid.component.html"],"names":[],"mappings":"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","sourcesContent":["import { DatePipe, DecimalPipe } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewChildren\n} from '@angular/core';\nimport {\n  AdaptAdvancedFilterComponent,\n  AdaptDeviceDetectionService,\n  AdaptModalService,\n  AdaptPopoverDirective,\n  AdvancedFilterOption,\n  AdvancedFilterOptionDataType,\n  AdvancedFilterTag,\n  AdvancedFilterTagsChangedEvent,\n  BeforeActiveSavedFilterChangeEvent,\n  CreateAdvancedFilterEvent,\n  EditSavedFilterClickEvent,\n  getValueOrFunc,\n  KeyValueObject,\n  ModalDeferred,\n  SelectedAdvancedFilter,\n  UpdateSavedFilterEvent,\n  ValueOrFunc1\n} from '@bmc-ux/adapt-angular';\nimport {\n  AdaptLazyLoadEvent,\n  AdaptTableComponent,\n  AdaptTableEventSource,\n  AdaptTableHeaderSelectionMode,\n  AdaptTableToolbarComponent,\n  ColumnConfig,\n  DataCellTemplateParams,\n  DataCellTooltipParams,\n  ExportEvent,\n  ExportType,\n  ResizeMode,\n  RowDataItem,\n  SortOrder,\n  ToolbarItemsByPriority\n} from '@bmc-ux/adapt-table';\nimport { IAssociationDescriptor, RxAssociationInstanceDataPageService } from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxFieldDefinitionService,\n  RxRecordDefinitionCacheService,\n  RxRecordDefinitionService,\n  RxRecordInstanceDataPageService,\n  RxRecordInstanceService\n} from '@helix/platform/record/api';\nimport {\n  DataPage,\n  IDataPageResult,\n  IPlainObject,\n  RxBooleanPipe,\n  RxCurrentUserService,\n  RxGlobalEventsService,\n  RxLogService,\n  RxNotificationService\n} from '@helix/platform/shared/api';\nimport { RxGuidService, RxObjectUtilsService, RxStringService } from '@helix/platform/utils';\nimport {\n  ApplyGridFilterMode,\n  IRecordGridColumnPublicProperties,\n  IRecordGridFilterData,\n  IRowDataItem,\n  IViewPresetsByViewComponentGuid,\n  IRxRecordGridApi,\n  IViewInputParams,\n  RowDataItemIdFieldName,\n  RX_EXPRESSION_EVALUATOR,\n  RX_LAUNCH_BEHAVIOR,\n  RX_VIEW_ACTION,\n  RX_VIEW_DEFINITION,\n  RxExpressionEvaluatorService,\n  RxViewActionService,\n  RxViewActionUtilsService\n} from '@helix/platform/view/api';\nimport {\n  BaseViewComponent,\n  IChildComponentData,\n  IViewComponentPropertyChanged,\n  RuntimeViewCanvasItemComponent,\n  RuntimeViewModelApi,\n  VIEW_COMPONENT_DEFAULT_EVENT_NAME\n} from '@helix/platform/view/runtime';\nimport { TranslateService } from '@ngx-translate/core';\nimport { saveAs } from 'file-saver';\nimport {\n  castArray,\n  chain,\n  cloneDeep,\n  differenceBy,\n  endsWith,\n  find,\n  findIndex,\n  findLast,\n  forEach,\n  get,\n  includes,\n  intersectionBy,\n  isEmpty,\n  isEqual,\n  isFunction,\n  isNil,\n  isNull,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n  last,\n  map as _map,\n  max,\n  min,\n  noop,\n  reduce,\n  remove,\n  round,\n  set,\n  some,\n  sortBy,\n  toString as _toString,\n  transform,\n  uniq\n} from 'lodash';\nimport moment from 'moment-es6';\nimport { SortEvent, SortMeta } from 'primeng/api';\nimport { BehaviorSubject, combineLatest, EMPTY, forkJoin, merge, Observable, of, Subject, throwError } from 'rxjs';\nimport {\n  catchError,\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  finalize,\n  map,\n  shareReplay,\n  skip,\n  switchMap,\n  switchMapTo,\n  take,\n  takeUntil,\n  tap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { ActionButtonComponent } from '../../action-button/runtime/action-button.component';\nimport { IActionButtonConfig } from '../../action-button/runtime/action-button.types';\nimport { PageComponent } from '../../page/runtime/page.component';\nimport { RxAdvancedFilteringFieldsProviderComponent } from '../common/components/advanced-filtering-fields-provider/advanced-filtering-fields-provider.component';\nimport { IRemoveFilterTagEvent } from '../common/components/filter-tags/filter-tags.types';\nimport { RxRecordGridAdvancedFilteringService } from '../common/services/record-grid-advanced-filtering.service';\nimport { RxRecordGridFilterHelperService } from '../common/services/record-grid-filter-helper.service';\nimport { RxRecordGridUtilsService } from '../common/services/record-grid-utils.service';\nimport { RxRecordGridAdvancedFilterValue } from '../common/types/record-grid-advanced-filter-value.class';\nimport { ITagInfo } from '../common/types/record-grid-filter-config.interfaces';\nimport {\n  IRecordGridFilterTag,\n  IRxRecordGridSavedAdvancedFilter,\n  IRxRecordGridSharedFilterPreset\n} from '../common/types/record-grid-filter.types';\nimport {\n  IRecordGridColumnNamedFilterOption,\n  IRecordGridNamedFilterOptionsMap\n} from '../common/types/record-grid.types';\nimport { RX_RECORD_GRID } from '../record-grid.constant';\nimport { RxFilterByCardSelectionDialogComponent } from './filter-by-card-selection-dialog/filter-by-card-selection-dialog.component';\nimport { IChangedCardLayoutEvent } from './record-grid-card-layout/changed-card-layout-event.interface';\nimport { RxRecordGridConfigUtilsService } from './services/record-grid-config-utils.service';\nimport { RxRecordGridConfiguratorService } from './services/record-grid-configurator.service';\nimport { RxRecordGridFilterConfigService } from './services/record-grid-filter-config.service';\nimport { RxRecordGridFilterService } from './services/record-grid-filter.service';\nimport { RxRecordGridSharedFilterPresetsCacheService } from './services/record-grid-shared-filter-presets-cache.service';\nimport { RxRecordGridUserPreferencesService } from './services/record-grid-user-preferences.service';\nimport { IAdaptTableConfig } from './types/adapt-table-config.interface';\nimport { IRecordGridActionButton } from './types/record-grid-action-button.interface';\nimport { IRxRecordGridAction, RxRecordGridActionFunction } from './types/record-grid-action.types';\nimport {\n  IAdaptTableColumnConfig,\n  IColumnSortInfo,\n  IRecordGridColumnWithMetadata\n} from './types/record-grid-column.types';\nimport { IRecordGridConfig } from './types/record-grid-config.interface';\nimport { IRecordGridDataLoadContext } from './types/record-grid-data-load-context.interface';\nimport { IRecordGridDataPageRequestParams } from './types/record-grid-data-page-params.interface';\nimport { IRecordGridState } from './types/record-grid-state.interface';\nimport { RowSelectionMode } from './types/row-selection-mode.enum';\nimport { IRecordGridSharedViewPreset } from './types/record-grid-user-preferences.interface';\n\n@Component({\n  selector: 'rx-record-grid',\n  templateUrl: './record-grid.component.html',\n  styleUrls: ['record-grid.component.scss'],\n  providers: [RxRecordGridUserPreferencesService]\n})\nexport class RecordGridComponent extends BaseViewComponent implements OnInit, AfterViewInit, OnDestroy {\n  @Input()\n  config: Observable<IRecordGridConfig>;\n\n  @Output()\n  dataLoaded: EventEmitter<void> = new EventEmitter();\n\n  @ViewChild('adaptTable', { static: true })\n  adaptTable: AdaptTableComponent;\n\n  @ViewChild('adaptAdvancedFilter')\n  adaptAdvancedFilter: AdaptAdvancedFilterComponent;\n\n  @ViewChild('cardLayoutRowDetailsTemplate', { static: true })\n  cardLayoutRowDetailsTemplate: TemplateRef<any>;\n\n  @ViewChild('cellTemplate', { static: true })\n  cellTemplate: TemplateRef<DataCellTemplateParams>;\n\n  @ViewChild('filterTemplate', { static: true })\n  filterTemplate: TemplateRef<any>;\n\n  @ViewChild('leftCustomSectionTemplate', { static: true })\n  leftCustomSectionTemplate: TemplateRef<any>;\n\n  @ViewChild('rightCustomSectionTemplate', { static: true })\n  rightCustomSectionTemplate: TemplateRef<any>;\n\n  @ViewChild('rowActionButtonsTemplate', { static: true })\n  rowActionButtonsTemplate: TemplateRef<any>;\n\n  @ViewChild('visibleColumnsMenuTemplate', { static: true })\n  visibleColumnsMenuTemplate: TemplateRef<any>;\n\n  @ViewChild(RxAdvancedFilteringFieldsProviderComponent, { static: true })\n  fieldsProvider: RxAdvancedFilteringFieldsProviderComponent;\n\n  @ViewChildren(ActionButtonComponent)\n  private actionButtonComponents: QueryList<ActionButtonComponent>;\n\n  // Check if user clicked on a cell, filter popover,\n  // filter by selection dialog, or filter by selection dropdown.\n  // If not, then clear the selected cell.\n  @HostListener('document:click', ['$event'])\n  private onClickOutside(event: MouseEvent): void {\n    const isClickOutside = !(\n      (event.target as HTMLElement).closest('.ui-table-tbody') ||\n      (event.target as HTMLElement).closest('.popover.table-filtering') ||\n      (event.target as HTMLElement).closest('.rx-filter-by-card-selection-dialog') ||\n      (event.target as HTMLElement).closest('.rx-filter-by-card-selection-field-dropdown')\n    );\n\n    if (isClickOutside) {\n      this.clearSelectedCells();\n    }\n  }\n\n  get isTotalRecordCountKnown(): boolean {\n    return !isNull(this.adaptTableConfig.totalRecords);\n  }\n\n  private isExportInProgress = false;\n  cardLayoutOpenedModal: ModalDeferred;\n  columnSearchText: string;\n  lastQueryExpression: string;\n  lastPropertySelection: string[] = [];\n\n  adaptTableConfig: IAdaptTableConfig = {\n    data: [],\n    columns: [],\n    columnResizeMode: ResizeMode.Fit,\n    cardLayoutColumns: null,\n    bordered: true,\n    scrollable: true,\n    striped: false,\n    toolbarConfig: {\n      counter: false,\n      quickFilter: true,\n      leftCustomSection: true,\n      leftCustomSectionTemplate: null,\n      filter: true,\n      filterTemplate: null,\n      filterResults: false,\n      filterResultsTemplate: null,\n      rightCustomSection: false,\n      rightCustomSectionTemplate: null,\n      visibleColumnsMenu: true,\n      visibleColumnsMenuTemplate: null,\n      quickFilterTriggerable: true,\n      export: {\n        exportTypes: [{ type: ExportType.CSV }],\n        showExportForSelected: true\n      }\n    },\n    filterable: false,\n    selectedItems: [],\n    filters: {},\n    rows: 50,\n    first: 0,\n    multiSortMeta: null,\n    rowSelectionMode: null,\n    isLoadingData: false,\n    totalRecords: null,\n    primaryKey: null,\n    isLoadingMoreData: false,\n    texts: null,\n    expandedGroupsKeys: {},\n    virtualScroll: true,\n    virtualRowHeight: RX_RECORD_GRID.defaultRowHeight\n  };\n\n  actionButtons: IChildComponentData[] = null;\n  adaptTableHeaderSelectionMode = AdaptTableHeaderSelectionMode.Chunk;\n\n  api: IRxRecordGridApi = {\n    applyViewPreset: this.applyViewPreset.bind(this),\n    shareViewPreset: this.shareViewPreset.bind(this),\n    refresh: this.refresh.bind(this),\n    setFilter: this.setFilter.bind(this),\n    deleteViewPreset: this.deleteViewPreset.bind(this),\n    discardViewPresetChanges: this.discardViewPresetChanges.bind(this),\n    getColumns: this.getColumns.bind(this),\n    getRecordDefinitionName: this.getRecordDefinitionName.bind(this),\n    getSelectedRows: this.getSelectedRows.bind(this),\n    getFirstSelectedRow: this.getFirstSelectedRow.bind(this),\n    getSelectedRowCount: this.getSelectedRowCount.bind(this),\n    setSelectedRows: this.onRowsSelectionChange.bind(this),\n    getVisibleRows: this.getVisibleRows.bind(this),\n    saveViewPreset: this.saveViewPreset.bind(this),\n    applyFilters: this.applyFilters.bind(this)\n  };\n\n  filteredVisibleColumns: IAdaptTableColumnConfig[] = [];\n  getDataCellClassBind = this.getDataCellClass.bind(this);\n\n  gridEvents = {\n    cellClick: (gridRow: IRowDataItem, columnId: string) => {\n      const columnWithActions = this.state.columnsWithMetadata.find((column) => column.fieldId === columnId);\n\n      this.addSelectionFieldOptionNames(gridRow);\n\n      gridRow = this.expandRowProperties(gridRow);\n\n      this.state.lastActionRow = gridRow;\n\n      this.notifyPropertyChanged('clickableRow', gridRow, null);\n\n      this.executeViewActions(columnWithActions.guid, get(columnWithActions, 'actions'), gridRow).catch(noop);\n    },\n\n    cellKeyDown: (event: KeyboardEvent, gridRow: IRowDataItem, columnId: string) => {\n      if (includes(['Space', 'Enter'], event.code)) {\n        this.gridEvents.cellClick(gridRow, columnId);\n        event.preventDefault();\n      }\n    }\n  };\n\n  isFilterBySelectionButtonVisible = false;\n  isUserAllowedToDeleteRecords = false;\n  openSortByDialog = this.openSortByDialogFn.bind(this);\n  rowActionButtons: IChildComponentData[] = null;\n  rowSelectionChanged = new BehaviorSubject<IRowDataItem[]>([]);\n  selectedFilteredRowsCount = 0;\n  shouldDisplayActionButtons = false;\n  showCellTooltip = false;\n  sortedColumnsByTitle: IAdaptTableColumnConfig[] = [];\n\n  state: IRecordGridState = {\n    actionButtons: [],\n    rowActionButtons: [],\n    lastActionRow: null,\n    associatedRecordId: null,\n    associatedRoleName: null,\n    associatedRecordNodeSide: null,\n    associationDefinitionName: null,\n    bordered: true,\n    cardLayoutWidth: null,\n    columns: [],\n    columnsWithMetadata: [],\n    defaultFilterPreset: null,\n    enableFiltering: false,\n    requiredFilters: 0,\n    getDataForHiddenColumns: true,\n    enableFilterPresets: true,\n    enableRowSelection: RowSelectionMode.Multiple,\n    expandable: false,\n    filterExpression: null,\n    filters: null,\n    filterTagsLimit: null,\n    getData: null,\n    recordDefinition: null,\n    associationDescriptors: [],\n    recordDefinitionName: null,\n    recordGridFilters: [],\n    recordIdField: null,\n    showDataForAllLocales: null,\n    striped: false,\n    styles: null,\n    initialFilters: null,\n    expandGroups: false,\n    advancedFiltering: {\n      activeSavedFilter: null,\n      savedFilters: [],\n      filterOptions: [],\n      selectedFilters: [],\n      recordGridFilterConfigs: null,\n      filterTexts: null,\n      hasLoadedSharedFilterPresets: false,\n      isLoading: false,\n      appliedSharedFilterPreset: null,\n      toolbarTags: [],\n      pendingSelectedFilters: [],\n      selectedCardValues: {}\n    },\n    emptyStateLabelText: this.translateService.instant('com.bmc.arsys.rx.client.empty-state.no-items-to-display.label'),\n    emptyStateWithFilterLabelText: this.translateService.instant(\n      'com.bmc.arsys.rx.client.empty-state.no-items-to-display.label'\n    ),\n    searchFieldPlaceholderText: this.translateService.instant('com.bmc.arsys.rx.client.common.search.label'),\n    enableColumnSelection: true,\n    namedFilterOptions: null,\n    predefinedFilterPresets: [],\n    viewPresetSelector: null,\n    virtualScroll: true\n  };\n\n  visibleColumns: IAdaptTableColumnConfig[] = [];\n\n  private clickableWithHrefActionExpressionEvaluationData: IPlainObject;\n  private cursor: string;\n  private initializationCompleted$: Observable<boolean>;\n  private isProgrammaticUse: boolean;\n  private selectionFieldOptionLabelsByFieldId: IPlainObject;\n\n  private cellValueFormatters: { [name: string]: (...args: any[]) => string } = {};\n  private clickableWithHrefColumnActions: { [columnId: string]: IRxRecordGridAction[] } = {};\n  private dataLoadContextSubject: Subject<IRecordGridDataLoadContext> = new Subject();\n  private popovers: AdaptPopoverDirective[] = [];\n  private userPreferencesChanged$: Subject<void> = new Subject<void>();\n\n  private readonly exportSelectedRowText = this.translateService.instant(\n    'com.bmc.arsys.rx.client.view-components.record-grid.export-selected-row.label'\n  );\n\n  private readonly exportSelectedRowsText = this.translateService.instant(\n    'com.bmc.arsys.rx.client.view-components.record-grid.export-selected-rows.label'\n  );\n\n  constructor(\n    private adaptDeviceDetectionService: AdaptDeviceDetectionService,\n    private adaptModalService: AdaptModalService,\n    private changeDetector: ChangeDetectorRef,\n    private datePipe: DatePipe,\n    private decimalPipe: DecimalPipe,\n    private ngZone: NgZone,\n    private rxAssociationInstanceDataPageService: RxAssociationInstanceDataPageService,\n    private rxBooleanPipe: RxBooleanPipe,\n    private rxCurrentUserService: RxCurrentUserService,\n    private rxExpressionEvaluatorService: RxExpressionEvaluatorService,\n    private rxFieldDefinitionService: RxFieldDefinitionService,\n    private rxGridConfiguratorService: RxRecordGridConfiguratorService,\n    private rxGuidService: RxGuidService,\n    private rxLogService: RxLogService,\n    private rxNotificationService: RxNotificationService,\n    private rxObjectUtilsService: RxObjectUtilsService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxRecordDefinitionService: RxRecordDefinitionService,\n    private rxRecordGridAdvancedFilteringService: RxRecordGridAdvancedFilteringService,\n    private rxRecordGridConfigUtilsService: RxRecordGridConfigUtilsService,\n    private rxRecordGridFilterConfigService: RxRecordGridFilterConfigService,\n    private rxRecordGridFilterService: RxRecordGridFilterService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService,\n    private rxRecordGridSharedFilterPresetsCacheService: RxRecordGridSharedFilterPresetsCacheService,\n    private rxRecordGridUserPreferencesService: RxRecordGridUserPreferencesService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxRecordInstanceDataPageService: RxRecordInstanceDataPageService,\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private rxViewActionService: RxViewActionService,\n    private rxViewActionUtilsService: RxViewActionUtilsService,\n    private translateService: TranslateService,\n    public elementRef: ElementRef,\n    public rxStringService: RxStringService,\n    private rxGlobalEventsService: RxGlobalEventsService,\n    @Optional() private pageComponent: PageComponent,\n    @Optional() private runtimeViewCanvasItemComponent: RuntimeViewCanvasItemComponent\n  ) {\n    super();\n\n    this.getNamedFilterOptions = this.getNamedFilterOptions.bind(this);\n\n    this.rxRecordDefinitionCacheService.registerConsumer(this.destroyed$);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.isProgrammaticUse = Boolean(this.pageComponent) || !this.runtimeViewCanvasItemComponent;\n\n    if (this.isProgrammaticUse) {\n      this.adaptTableConfig.toolbarConfig.export = null;\n    }\n\n    this.notifyPropertyChanged('api', this.api);\n\n    this.initializationCompleted$ = this.config.pipe(\n      take(1),\n      map((rxGridConfiguration) => this.rxGridConfiguratorService.getGridConfig(rxGridConfiguration)),\n      tap((gridConfig) => {\n        Object.assign(this.state, gridConfig);\n      }),\n      switchMap(() => {\n        if (this.state.guid) {\n          this.guid = this.state.guid;\n        }\n\n        const requests$: Observable<any>[] = [this.initRecordDefinitions()];\n\n        if (this.guid) {\n          this.userPreferencesChanged$.pipe(debounceTime(1000), takeUntil(this.destroyed$)).subscribe(() => {\n            this.rxRecordGridUserPreferencesService.saveUserPreferences(this.guid, this.adaptTableConfig, this.state);\n            this.checkIfViewPresetEdited();\n          });\n\n          requests$.push(this.rxRecordGridUserPreferencesService.get(this.guid));\n        }\n\n        return forkJoin(requests$);\n      }),\n      switchMap(() => this.initGrid()),\n      shareReplay(1)\n    );\n\n    this.initializationCompleted$.subscribe();\n\n    const configChanged$ = combineLatest([\n      this.initializationCompleted$,\n      this.dataLoaded,\n      this.config.pipe(\n        skip(1),\n        debounceTime(250),\n        map((rxGridConfiguration) => this.rxGridConfiguratorService.getGridConfig(rxGridConfiguration)),\n        takeUntil(this.destroyed$)\n      )\n    ]).pipe(map(([initializationCompleted, dataLoaded, configChanged]) => configChanged));\n\n    // updates named list column filter options after additional query expression evaluation\n    configChanged$\n      .pipe(\n        map((config) => differenceBy(config.columns, this.state.columns, 'additionalQueryCriteria')),\n        filter((changedColumns) => changedColumns.length > 0),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((namedListColumns) => {\n        namedListColumns.forEach((column) => {\n          const namedListColumnFilterOption = this.state.advancedFiltering.filterOptions.find(\n            (filterOption) => filterOption.id === column.fieldId\n          );\n\n          namedListColumnFilterOption.data.additionalQueryCriteria = column.additionalQueryCriteria;\n\n          const existingColumnIndex = this.state.columns.findIndex(\n            (existingColumn) => existingColumn.fieldId === column.fieldId\n          );\n\n          this.state.columns[existingColumnIndex].additionalQueryCriteria = column.additionalQueryCriteria;\n        });\n      });\n\n    const namedFilterOptionCache = new Map<string, IRecordGridColumnNamedFilterOption>();\n\n    // updates namedFilterOptions after expression evaluation and triggers data load if expression value is changed\n    configChanged$\n      .pipe(\n        // cut additional configChanged$ emissions that can happen in a moment after first dataLoadContextSubject emission\n        debounceTime(10),\n        map((config) => this.getNamedFilterOptionsState(config.columns)),\n        withLatestFrom(this.dataLoadContextSubject),\n        filter(\n          ([namedFilterOptionsMap, dataLoadContext]) =>\n            !isEqual(namedFilterOptionsMap, dataLoadContext.namedFilterOptions)\n        ),\n        tap(([namedFilterOptionsMap]) => {\n          this.state.namedFilterOptions = namedFilterOptionsMap;\n        }),\n        map(([namedFilterOptionsMap]) =>\n          Object.values(namedFilterOptionsMap).reduce((res, options) => res.concat(options), [])\n        ),\n        map((namedFilterOptionsList) => {\n          const selectedNamedFilterOptionsGuids = this.state.advancedFiltering.selectedFilters.reduce(\n            (res: string[], filterValue) => res.concat(filterValue.value.namedOptions),\n            []\n          );\n\n          return namedFilterOptionsList.some((option) => {\n            const isOptionCached = Boolean(namedFilterOptionCache.get(option.guid));\n\n            if (!isOptionCached) {\n              namedFilterOptionCache.set(option.guid, option);\n            }\n\n            const isFilterValueChanged =\n              option.filterExpression !== namedFilterOptionCache.get(option.guid).filterExpression;\n\n            const shouldLoadData =\n              selectedNamedFilterOptionsGuids.includes(option.guid) && (isFilterValueChanged || !isOptionCached);\n\n            if (isFilterValueChanged) {\n              namedFilterOptionCache.set(option.guid, option);\n            }\n\n            return shouldLoadData;\n          });\n        }),\n        filter((v) => v),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(() => {\n        this.loadRowData();\n      });\n\n    configChanged$\n      .pipe(\n        // cut additional configChanged$ emissions that can happen in a moment after first dataLoadContextSubject emission\n        debounceTime(10),\n        withLatestFrom(this.dataLoadContextSubject),\n        filter(\n          ([config, dataLoadContext]) =>\n            config.associatedRecordId !== dataLoadContext.associatedRecordId ||\n            config.associatedRoleName !== dataLoadContext.associatedRoleName ||\n            config.filterExpression !== dataLoadContext.filterExpression\n        ),\n        tap(([config]) => {\n          Object.assign(this.state, config);\n        })\n      )\n      .subscribe(() => {\n        this.loadRowData();\n      });\n\n    this.config\n      .pipe(\n        map((cfg) => cfg.viewPresetSelector),\n        distinctUntilChanged(),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((viewPresetSelector) => {\n        this.state.viewPresetSelector = viewPresetSelector;\n      });\n\n    if (this.isProgrammaticUse) {\n      configChanged$\n        .pipe(\n          map((config) => ({\n            actionButtons: config.actionButtons,\n            rowActionButtons: config.rowActionButtons\n          })),\n          distinctUntilChanged(isEqual)\n        )\n        .subscribe(({ actionButtons, rowActionButtons }) => {\n          this.state.actionButtons = actionButtons;\n          this.actionButtons = this.getProgrammaticActionButtons(this.state.actionButtons);\n\n          this.state.rowActionButtons = rowActionButtons;\n          this.rowActionButtons = this.getProgrammaticActionButtons(this.state.rowActionButtons);\n        });\n\n      configChanged$\n        .pipe(\n          distinctUntilChanged(isEqual),\n          map((rxGridConfiguration) => this.rxGridConfiguratorService.getGridConfig(rxGridConfiguration)),\n          tap((gridConfig) => {\n            Object.assign(this.state, gridConfig);\n            this.state.advancedFiltering.selectedFilters = [];\n            this.adaptTableConfig.multiSortMeta = [];\n          }),\n          switchMap(() => {\n            if (this.state.guid) {\n              this.guid = this.state.guid;\n            }\n\n            const requests$: Observable<any>[] = [this.initRecordDefinitions()];\n\n            if (this.guid) {\n              requests$.push(this.rxRecordGridUserPreferencesService.get(this.guid));\n            }\n\n            return forkJoin(requests$);\n          }),\n          switchMap(() => this.initGrid())\n        )\n        .subscribe();\n    }\n\n    this.adaptTableConfig.virtualScroll = this.state.virtualScroll;\n\n    const toolbarConfig = this.adaptTableConfig.toolbarConfig;\n\n    toolbarConfig.visibleColumnsMenu = this.state.enableColumnSelection;\n    toolbarConfig.visibleColumnsMenuTemplate = this.visibleColumnsMenuTemplate;\n    toolbarConfig.rightCustomSectionTemplate = this.rightCustomSectionTemplate;\n    toolbarConfig.leftCustomSectionTemplate = this.leftCustomSectionTemplate;\n    toolbarConfig.filterTemplate = this.filterTemplate;\n\n    this.notifyPropertyChanged('totalRowCount', 0);\n    this.notifyPropertyChanged('selectedRows', []);\n    this.notifyPropertyChanged('selectedRowCount', 0);\n    this.notifyPropertyChanged('fieldValuesByFieldId', {});\n    this.notifyPropertyChanged('firstSelectedRow', null);\n    this.notifyPropertyChanged('queryExpression', '');\n    this.notifyPropertyChanged('lastRefreshTime', '');\n\n    this.initAdvancedFilterTexts();\n    this.initCustomTexts();\n\n    this.rxGlobalEventsService.viewActionsCompleted$.pipe(takeUntil(this.destroyed$)).subscribe(() => {\n      if (!isEmpty(this.pendingFiltersToApply)) {\n        this.onAdvancedFiltersChange(this.pendingFiltersToApply);\n      }\n\n      this.pendingFiltersToApply = null;\n    });\n  }\n\n  ngAfterViewInit(): void {\n    // The action buttons are rendered by the record grid component,\n    // hence we have to handle their property changes here.\n    this.actionButtonComponents.changes\n      .pipe(\n        switchMap((buttons) =>\n          merge<IViewComponentPropertyChanged>(\n            // Emit \"api\" change because native action button's property change happens later and we cannot catch it.\n            ...buttons.map((button) =>\n              of({\n                guid: button.guid,\n                propertyName: 'api',\n                newValue: button.api,\n                oldValue: null\n              })\n            ),\n            // Handle other property changes, e.g \"hidden\", or \"disabled\".\n            ...buttons.map((button) => button.propertyChanged.asObservable())\n          )\n        )\n      )\n      .subscribe((event) => this.propertyChanged.emit(event));\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n\n    this.dataLoadContextSubject.complete();\n    this.userPreferencesChanged$.complete();\n  }\n\n  applyFilterBySelection(): void {\n    if (isEmpty(this.state.advancedFiltering.selectedCardValues)) {\n      this.applyPendingSelectedFilters();\n    } else {\n      this.cardLayoutOpenedModal = this.adaptModalService.open({\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.record-grid.filter-by-selection.title'\n        ),\n        content: RxFilterByCardSelectionDialogComponent,\n        data: {\n          filterableFields: this.visibleColumns\n            .filter((column) => {\n              if (column.filterable) {\n                const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[column.field];\n\n                const isRequiredBooleanFilter =\n                  fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.boolean.resourceType &&\n                  this.rxFieldDefinitionService.isRequiredField(fieldDefinition);\n\n                return !isRequiredBooleanFilter;\n              } else {\n                return false;\n              }\n            })\n            .map((column) => ({\n              id: column.field,\n              name: column.header || column.fallbackTitle\n            }))\n        },\n        customClass: 'rx-filter-by-card-selection-dialog'\n      });\n\n      this.cardLayoutOpenedModal\n        .then((fieldId) => {\n          this.state.advancedFiltering.pendingSelectedFilters = [\n            {\n              filterOptionId: fieldId,\n              value: this.state.advancedFiltering.selectedCardValues[fieldId]\n            }\n          ];\n\n          this.applyPendingSelectedFilters();\n        })\n        .catch(noop);\n    }\n  }\n\n  buildQueryByAdvancedFilters(advancedFilters: SelectedAdvancedFilter[]): string {\n    const queryFilters = advancedFilters.map((filter) => {\n      let queryFilter = null;\n      const fieldId = filter.filterOptionId;\n      const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[fieldId];\n\n      if (fieldDefinition) {\n        const filterConfig = this.state.advancedFiltering.recordGridFilterConfigs[fieldDefinition.resourceType];\n\n        queryFilter = filterConfig.getQueryFilter(\n          filter,\n          fieldDefinition,\n          fieldId,\n          this.state.namedFilterOptions[fieldId] ?? []\n        );\n      }\n\n      return queryFilter;\n    });\n\n    return this.rxRecordGridFilterService.addQueries(...queryFilters);\n  }\n\n  downloadAttachment(row: IPlainObject, col: ColumnConfig, fileName: string, event?: KeyboardEvent): void {\n    if (event && !includes(['Space', 'Enter'], event.code)) {\n      return;\n    }\n\n    if (this.rxRecordGridUtilsService.isAssociatedRecordFieldId(col.field)) {\n      const fieldLocator = this.rxRecordGridUtilsService.getFieldLocator(col.field);\n\n      const associationDescriptor = find(this.state.associationDescriptors, {\n        associationDefinition: { guid: fieldLocator.associationGuid }\n      });\n\n      this.rxAssociationInstanceDataPageService\n        .post({\n          params: {\n            pageSize: 1,\n            startIndex: 0,\n            associationDefinition: associationDescriptor.associationDefinition.name,\n            nodeToQuery: fieldLocator.associationNodeSide,\n            associatedRecordInstanceId: row[RX_RECORD_DEFINITION.coreFieldIds.id],\n            propertySelection: RX_RECORD_DEFINITION.coreFieldIds.id\n          }\n        })\n        .pipe(take(1))\n        .subscribe((dataPageResult: IDataPageResult) => {\n          const recordInstanceId = dataPageResult.data[0][RX_RECORD_DEFINITION.coreFieldIds.id];\n\n          this.rxRecordInstanceService.downloadAttachment(\n            associationDescriptor.recordDefinitionName,\n            Number(fieldLocator.fieldId),\n            recordInstanceId,\n            fileName\n          );\n        });\n    } else {\n      this.rxRecordInstanceService.downloadAttachment(\n        this.state.recordDefinitionName,\n        Number(col.field),\n        row[RX_RECORD_DEFINITION.coreFieldIds.id],\n        fileName\n      );\n    }\n  }\n\n  executeViewActions(guid: string, actions: IRxRecordGridAction[], lastActionRow?: IRowDataItem): Promise<any> {\n    if (this.isProgrammaticUse) {\n      const sortedActions = sortBy(actions, 'index');\n\n      return sortedActions.reduce((promise, action) => {\n        return isFunction(action.name)\n          ? promise.then((result) => (action.name as RxRecordGridActionFunction)(result, lastActionRow))\n          : isString(action.name)\n          ? promise.then((result) =>\n              (\n                (() => {\n                  this.rxViewActionService.execute(action.name.toString(), action.params).subscribe();\n                }) as RxRecordGridActionFunction\n              )(result, lastActionRow)\n            )\n          : promise;\n      }, Promise.resolve());\n    }\n\n    return this.runtimeViewModelApi.triggerViewActions(guid, VIEW_COMPONENT_DEFAULT_EVENT_NAME);\n  }\n\n  getActionButtonConfig(\n    isHidden: boolean,\n    actionButtonConfig: Observable<IActionButtonConfig | IRecordGridActionButton>\n  ) {\n    return isHidden\n      ? actionButtonConfig.pipe(map((config) => ({ ...config, cls: 'dropdown-item' })))\n      : actionButtonConfig;\n  }\n\n  getCellValue(row: IRowDataItem, col: ColumnConfig): string {\n    const cellValueFormatter = this.cellValueFormatters[col.field];\n\n    return cellValueFormatter(row[col.field]);\n  }\n\n  getDataCellClass(): string {\n    return this.popovers.length ? 'rx-cell-selection-mode' : '';\n  }\n\n  getLoadRecordCountLinkText(): string {\n    return `${this.adaptTableConfig.data.length}+`;\n  }\n\n  getMultipleRowsSelectedText(): string {\n    return this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-components.record-grid.multiple-rows-selected.label',\n      {\n        count: this.adaptTableConfig.selectedItems.length,\n        total: this.isTotalRecordCountKnown ? this.adaptTableConfig.totalRecords : this.getLoadRecordCountLinkText()\n      }\n    );\n  }\n\n  getMultipleRowsSelectedTextFirstPart(): string {\n    const text = this.getMultipleRowsSelectedText();\n\n    return text.substring(0, text.indexOf(this.getLoadRecordCountLinkText()));\n  }\n\n  getMultipleRowsSelectedTextSecondPart(): string {\n    const text = this.getMultipleRowsSelectedText();\n    const totalParameterForTranslate = this.getLoadRecordCountLinkText();\n\n    return text.substring(text.indexOf(totalParameterForTranslate) + totalParameterForTranslate.length);\n  }\n\n  getNamedFilterOptions(filterOptionConfig: AdvancedFilterOption): IRecordGridColumnNamedFilterOption[] {\n    return this.state.namedFilterOptions[filterOptionConfig.id];\n  }\n\n  getSharedFilterPresets(): Observable<IRxRecordGridSharedFilterPreset[]> {\n    this.state.advancedFiltering.isLoading = true;\n\n    const onLoadingEnd = () => {\n      this.state.advancedFiltering.isLoading = false;\n      this.state.advancedFiltering.hasLoadedSharedFilterPresets = true;\n    };\n\n    return this.rxRecordGridSharedFilterPresetsCacheService.getSharedFilterPresets(this.guid).pipe(\n      catchError((err) => {\n        onLoadingEnd();\n\n        return throwError(err);\n      }),\n      tap(() => {\n        onLoadingEnd();\n      })\n    );\n  }\n\n  getSortedColumnsByTitle(): ColumnConfig[] {\n    return this.adaptTableConfig.columns\n      .slice()\n      .sort((column1, column2) => column1.header.localeCompare(column2.header));\n  }\n\n  getToolbarTags(filterTags: IRecordGridFilterTag[]): Observable<IRecordGridFilterTag[]> {\n    const toolbarTags$ = (filterTags || []).map((tag): Observable<IRecordGridFilterTag> => {\n      if (tag.data.filterOption && tag.data.filterOption.id !== RX_RECORD_GRID.externalPresetFilterOptionId) {\n        const fieldId = tag.data.filterOption.id;\n        const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[fieldId];\n        const filterConfig = this.state.advancedFiltering.recordGridFilterConfigs[fieldDefinition.resourceType];\n\n        if (isFunction(filterConfig.getToolbarTagInfo)) {\n          return filterConfig\n            .getToolbarTagInfo({\n              primaryRecordDefinition: this.state.recordDefinition,\n              fieldDefinition,\n              value: tag.data.value,\n              tag,\n              fieldId,\n              namedFilterOptions: this.state.namedFilterOptions[fieldId]\n            })\n            .pipe(\n              tap((tagInfo: ITagInfo) => (tag.data.value.title = tagInfo.tooltip)),\n              map((tagInfo: ITagInfo): AdvancedFilterTag => ({ ...tag, text: tagInfo.text }))\n            );\n        }\n      }\n\n      return of({ ...tag });\n    });\n\n    return toolbarTags$.length ? forkJoin(toolbarTags$) : of([]);\n  }\n\n  getVisibleColumns(): IAdaptTableColumnConfig[] {\n    return this.adaptTable.getVisibleColumns(this.adaptTableConfig.columns);\n  }\n\n  getVisibleRows(): IRowDataItem[] {\n    return this.adaptTableConfig.data;\n  }\n\n  handleHeaderCheckboxToggle(event): void {\n    this.setSelectedFilteredRowsCount();\n  }\n\n  isCellSelected(cellPopover: AdaptPopoverDirective): boolean {\n    return some(this.popovers, (popover) => popover === cellPopover);\n  }\n\n  loadSavedFilterPresetFilters(savedFilter: IRxRecordGridSavedAdvancedFilter): Observable<SelectedAdvancedFilter[]> {\n    this.state.advancedFiltering.isLoading = true;\n\n    return this.rxRecordGridFilterService\n      .getAdvancedFilterData(\n        savedFilter.filterData,\n        this.state.recordDefinition.fieldDefinitionsById,\n        this.state.advancedFiltering.recordGridFilterConfigs,\n        this.state.recordDefinition,\n        this.state.advancedFiltering.filterOptions,\n        this.state.associationDescriptors\n      )\n      .pipe(\n        tap((filters) => {\n          // combined fake preset filters with actual filters.\n          savedFilter.filters = (savedFilter.filters || []).concat(filters);\n\n          this.state.advancedFiltering.isLoading = false;\n        })\n      );\n  }\n\n  loadTotalRowCount(): void {\n    this.getTotalRowCount().subscribe((result: IDataPageResult) => {\n      this.adaptTableConfig.totalRecords = result.totalSize;\n    });\n  }\n\n  onActiveSavedAdvancedFilterChange(\n    savedFilter: IRxRecordGridSavedAdvancedFilter | IRxRecordGridSharedFilterPreset\n  ): void {\n    this.state.advancedFiltering.activeSavedFilter = savedFilter;\n  }\n\n  onAdvancedFilterExpressionTagsChanged(event: AdvancedFilterTagsChangedEvent): void {\n    const hasAllValidTags = event.filterExpressionTags.every((filterTag) => isEmpty(filterTag.data.validationErrors));\n\n    if (hasAllValidTags) {\n      const oldToolbarTags = this.state.advancedFiltering.toolbarTags;\n\n      this.updateToolbarTags(event.filterExpressionTags);\n\n      // workaround: run changeDetector to avoid the ExpressionChangedAfterItHasBeenCheckedError\n      if (oldToolbarTags !== this.state.advancedFiltering.toolbarTags) {\n        this.changeDetector.detectChanges();\n      }\n    }\n  }\n\n  onAdvancedFiltersChange(filters: SelectedAdvancedFilter[]): void {\n    this.state.advancedFiltering.appliedSharedFilterPreset = null;\n\n    const appliedExternalPresetFilter = this.getAppliedExternalPresetFilter(filters);\n\n    if (appliedExternalPresetFilter) {\n      const filterPresetData = this.state.advancedFiltering.savedFilters.find(\n        (savedFilter) => savedFilter.id === appliedExternalPresetFilter.value\n      );\n\n      if (this.isSharedFilterPreset(filterPresetData)) {\n        this.state.advancedFiltering.appliedSharedFilterPreset = filterPresetData;\n      } else {\n        if (filterPresetData.appliedSharedFilterPresetGuid) {\n          const appliedSharedFilterPreset = find(this.state.advancedFiltering.savedFilters, {\n            id: filterPresetData.appliedSharedFilterPresetGuid\n          }) as IRxRecordGridSharedFilterPreset;\n\n          this.state.advancedFiltering.appliedSharedFilterPreset = appliedSharedFilterPreset;\n        }\n      }\n    }\n\n    this.adaptTableConfig.first = 0;\n    this.state.advancedFiltering.selectedFilters = filters;\n    this.adaptTableConfig.isLoadingMoreData = false;\n\n    this.updateAdaptTableFilters();\n\n    this.userPreferencesChanged$.next();\n\n    this.updateToolbarTags(this.state.advancedFiltering.toolbarTags);\n\n    if (this.state.useExternalFiltering) {\n      this.loadRowData(false);\n    } else {\n      this.adaptTableConfig.data = this.filterRows(this.adaptTableConfig.originalRows);\n    }\n  }\n\n  onBeforeActiveSavedFilterChange(event: BeforeActiveSavedFilterChangeEvent): void {\n    const savedFilterToSelect = event.savedFilterToSelect as\n      | IRxRecordGridSavedAdvancedFilter\n      | IRxRecordGridSharedFilterPreset;\n\n    if (savedFilterToSelect) {\n      if (!savedFilterToSelect.filters || !this.areNonExternalPresetFiltersApplied(savedFilterToSelect.filters)) {\n        this.loadSavedFilterPresetFilters(savedFilterToSelect).subscribe();\n      }\n    }\n  }\n\n  onCellClick(\n    event: MouseEvent,\n    columns?: IAdaptTableColumnConfig[],\n    rowItem?: IRowDataItem,\n    popover?: AdaptPopoverDirective,\n    isCardLayout?: boolean\n  ): void {\n    const isLinkClicked = !!(event.target as HTMLElement).closest('a');\n\n    if (isLinkClicked) {\n      this.clearSelectedCells();\n    } else {\n      if (this.popovers.length) {\n        if (!(event.metaKey || event.ctrlKey)) {\n          this.clearSelectedCells();\n        }\n      }\n\n      if (columns) {\n        this.toggleCellSelection(\n          columns.filter((col) => !col.isRowActionsColumn),\n          rowItem,\n          popover,\n          isCardLayout\n        );\n      }\n    }\n  }\n\n  onFilterBySelection(event: MouseEvent, columns?: IAdaptTableColumnConfig[], rowItem?: IRowDataItem): void {\n    this.onCellClick(event, columns, rowItem, null, true);\n    this.applyFilterBySelection();\n  }\n\n  onCellMouseOver($event: MouseEvent): void {\n    const element = $event.currentTarget as HTMLElement;\n    this.showCellTooltip = element.offsetWidth < element.scrollWidth;\n  }\n\n  onChangedCardLayout(event: IChangedCardLayoutEvent): void {\n    this.adaptTableConfig.cardLayoutColumns = event.cardLayoutColumns;\n    this.clearSelectedCells();\n\n    if (this.cardLayoutOpenedModal) {\n      this.cardLayoutOpenedModal.reject();\n      this.cardLayoutOpenedModal = null;\n    }\n\n    if (this.guid) {\n      this.rxRecordGridUserPreferencesService.applyUserPreferencesForColumns(\n        this.adaptTableConfig,\n        this.state.columnsWithMetadata,\n        this.guid\n      );\n    }\n\n    this.visibleColumns = this.getVisibleColumns();\n    this.adaptTableConfig.virtualRowHeight = this.getVirtualRowHeight();\n  }\n\n  onColReorder(colReorderEvent: ColumnConfig[]): void {\n    this.visibleColumns = this.getVisibleColumns();\n    this.userPreferencesChanged$.next();\n  }\n\n  onColumnResize(): void {\n    const adaptTableRectData = this.adaptTable.el.nativeElement.getBoundingClientRect();\n\n    const tableWidth = adaptTableRectData?.width;\n\n    const availableColumnWidth = this.adaptTable.dataHeaderCells.reduce(\n      (accum, cell) => accum + cell.element.nativeElement.offsetWidth,\n      0\n    );\n\n    const defaultColumnWidth = `${(availableColumnWidth * 100) / (tableWidth * this.getVisibleColumns().length)}%`;\n\n    const visibleColumnWidthMap = reduce(\n      this.adaptTable.dataHeaderCells.toArray(),\n      (result, cell) => {\n        const renderingColumnConfig = cell.data.renderingColumn.columnsConfigs[0];\n        let width = null;\n\n        if (availableColumnWidth) {\n          width =\n            endsWith(renderingColumnConfig.width, 'px') || this.state.expandable\n              ? `${cell.element.nativeElement.offsetWidth}px`\n              : `${round((cell.element.nativeElement.offsetWidth / availableColumnWidth) * 100, 2)}%`;\n        }\n\n        result[renderingColumnConfig.field] = width;\n\n        return result;\n      },\n      {}\n    );\n\n    this.adaptTableConfig.columns.forEach((column: IAdaptTableColumnConfig) => {\n      if (!column.hidden) {\n        column.width = visibleColumnWidthMap[column.field] ?? defaultColumnWidth;\n      }\n    });\n\n    this.userPreferencesChanged$.next();\n  }\n\n  onColumnVisibilityChange(isVisible: boolean, column: IAdaptTableColumnConfig): void {\n    if (column.hidden === isVisible) {\n      column.hidden = !isVisible;\n\n      this.userPreferencesChanged$.next();\n\n      this.visibleColumns = this.getVisibleColumns();\n      this.adaptTableConfig.virtualRowHeight = this.getVirtualRowHeight();\n\n      if (isVisible) {\n        if (!this.lastPropertySelection.includes(column.field)) {\n          this.loadRowData();\n        }\n      } else {\n        // #ADAPT-8052 workaround.\n        this.avoidSystemColumnExpansion();\n      }\n    }\n  }\n\n  onCreateNewFilterPreset(event: CreateAdvancedFilterEvent): void {\n    const newFilter: IRxRecordGridSavedAdvancedFilter = {\n      filters: event.filters,\n      name: event.name,\n      id: this.rxGuidService.generate()\n    };\n\n    const appliedSharedPreset = this.getAppliedExternalPresetFilter(event.filters);\n\n    if (appliedSharedPreset) {\n      newFilter.appliedSharedFilterPresetGuid = appliedSharedPreset.value;\n    }\n\n    this.state.advancedFiltering.savedFilters.push(newFilter);\n    this.state.advancedFiltering.activeSavedFilter = newFilter;\n    this.userPreferencesChanged$.next();\n  }\n\n  onDeleteSavedFilterPreset(filterPresetToDelete: IRxRecordGridSavedAdvancedFilter): void {\n    remove(this.state.advancedFiltering.savedFilters, (filterPreset) => filterPreset.id === filterPresetToDelete.id);\n    this.userPreferencesChanged$.next();\n  }\n\n  onEditSavedFilterClick(event: EditSavedFilterClickEvent): void {\n    let editCustomTagsFn = null;\n\n    if ((event.savedFilter as IRxRecordGridSavedAdvancedFilter).appliedSharedFilterPresetGuid) {\n      editCustomTagsFn = (tags: IRecordGridFilterTag[]) => tags;\n    }\n\n    if (!event.savedFilter.filters || !this.areNonExternalPresetFiltersApplied(event.savedFilter.filters)) {\n      event.preventDefault();\n\n      this.loadSavedFilterPresetFilters(event.savedFilter).subscribe(() => {\n        event.initSavedFilterEditing(editCustomTagsFn && editCustomTagsFn.bind(this));\n      });\n    } else if ((event.savedFilter as IRxRecordGridSavedAdvancedFilter).appliedSharedFilterPresetGuid) {\n      event.preventDefault();\n\n      event.initSavedFilterEditing(editCustomTagsFn.bind(this));\n    }\n  }\n\n  onExport(options: ExportEvent): void {\n    if (this.isExportInProgress) {\n      this.rxNotificationService.addInfoMessage(\n        this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.export-in-progress.message')\n      );\n\n      return;\n    }\n\n    const visibleColumns = this.getVisibleColumns().filter((column) => !column.isRowActionsColumn);\n\n    if (!visibleColumns.length) {\n      this.rxNotificationService.addWarningMessage(\n        this.translateService.instant('com.bmc.arsys.rx.client.view-components.record-grid.no-data-to-export.message')\n      );\n\n      return;\n    }\n\n    const columnHeaders: string[] = visibleColumns.map((column) => column.header || column.fallbackTitle);\n\n    let rows$: Observable<KeyValueObject[]>;\n\n    if (options.selectionOnly) {\n      rows$ = of(intersectionBy(this.adaptTableConfig.data, this.getSelectedRows(), RowDataItemIdFieldName));\n    } else {\n      const headers = this.getHeaders();\n      const params = this.prepareQueryParamsAndQueryArgs(false);\n\n      params.pageSize = -1;\n      params.propertySelection = visibleColumns.map((column) => column.field);\n\n      delete params.cursor;\n\n      this.isExportInProgress = true;\n\n      rows$ = this.getDataPageService()\n        .post({ params, headers })\n        .pipe(\n          map((dataPage) => dataPage.data),\n          finalize(() => {\n            this.isExportInProgress = false;\n          })\n        );\n    }\n\n    rows$.subscribe((rows) => {\n      const cellValues = this.getCellValues(rows, visibleColumns);\n\n      this.exportDataToCsv(cellValues, columnHeaders);\n    });\n  }\n\n  onLazyLoad(event: AdaptLazyLoadEvent): void {\n    if (this.state.useExternalFiltering) {\n      if (event.loadMore || event.eventSource !== AdaptTableEventSource.LoadMore) {\n        this.adaptTableConfig.multiSortMeta = event.multiSortMeta;\n        this.adaptTableConfig.filters = event.filters;\n        this.adaptTableConfig.isLoadingMoreData = event.loadMore;\n\n        this.loadRowData(event.loadMore);\n      }\n    } else {\n      if (event.eventSource === AdaptTableEventSource.FilterChange) {\n        this.adaptTableConfig.filters = event.filters;\n        this.adaptTableConfig.data = this.filterRows(this.adaptTableConfig.originalRows);\n      }\n    }\n  }\n\n  onRefreshClick(): void {\n    if (!this.state.useExternalFiltering) {\n      this.loadRowData(false);\n    }\n\n    const searchText = this.adaptTable.toolbarComponent.getQuickFilterInputValue();\n\n    // this will trigger onLazyLoad event\n    this.adaptTable.setQuickFilter(searchText);\n  }\n\n  onRemoveFilterTag(event: IRemoveFilterTagEvent): void {\n    this.state.advancedFiltering.activeSavedFilter = null;\n\n    const selectedFilters = this.state.advancedFiltering.selectedFilters.slice();\n    const filterOptionId = event.removedTag.data.filterOption.id;\n    const index = findIndex(selectedFilters, (selectedFilter) => selectedFilter.filterOptionId === filterOptionId);\n\n    selectedFilters.splice(index, 1);\n    this.onAdvancedFiltersChange(selectedFilters);\n\n    this.setToolbarTags(event.newTags);\n  }\n\n  onRowsSelectionChange(rowDataItems: IRowDataItem[] | IRowDataItem): void {\n    const selectedItems = rowDataItems ? castArray(rowDataItems) : [];\n    const oldSelectedItems = this.adaptTableConfig.selectedItems;\n\n    this.shouldDisplayActionButtons = !isEmpty(selectedItems) && !isEmpty(this.actionButtons);\n\n    this.expandSelectedRowsProperties(selectedItems);\n\n    this.adaptTableConfig.selectedItems = selectedItems;\n\n    this.adaptTableConfig.toolbarConfig = {\n      ...this.adaptTableConfig.toolbarConfig,\n      quickFilter: !this.shouldDisplayActionButtons,\n      leftCustomSectionFixed: this.shouldDisplayActionButtons,\n      rightCustomSectionFixed: this.shouldDisplayActionButtons,\n      leftCustomSection: this.shouldDisplayActionButtons,\n      filter: !this.shouldDisplayActionButtons,\n      ...this.state.toolbarConfig\n    };\n\n    this.adaptTableConfig.texts = {\n      ...this.adaptTableConfig.texts,\n      exportSelected: this.getExportSelectedText(selectedItems)\n    };\n\n    this.addSelectionFieldOptionNames(selectedItems[0]);\n\n    this.notifyPropertyChanged('selectedRows', selectedItems, oldSelectedItems);\n    this.notifyPropertyChanged('selectedRowCount', selectedItems.length, oldSelectedItems.length);\n    this.notifyPropertyChanged('firstSelectedRow', selectedItems[0], oldSelectedItems[0]);\n    this.notifyPropertyChanged('fieldValuesByFieldId', this.prepareFieldsValueByFieldIdData(selectedItems), {});\n\n    this.rowSelectionChanged.next(selectedItems);\n  }\n\n  onSearchColumns(): void {\n    this.filteredVisibleColumns = this.sortedColumnsByTitle.filter((column) =>\n      this.rxStringService.caseInsensitiveSearch(column.header, this.columnSearchText)\n    );\n  }\n\n  onSort(sortEvent: SortEvent): void {\n    this.applySorting((sortEvent as any).multisortmeta);\n  }\n\n  onSortCards(multiSortMeta: SortMeta[]): void {\n    this.applySorting(multiSortMeta);\n    this.loadRowData();\n  }\n\n  onRowActionOpen(row: IRowDataItem): void {\n    last(this.popovers)?.close();\n\n    this.addSelectionFieldOptionNames(row);\n\n    const gridRow = this.expandRowProperties(row);\n\n    this.state.lastActionRow = gridRow;\n\n    this.notifyPropertyChanged('clickableRow', gridRow, null);\n  }\n\n  onUpdateSavedFilterPreset(event: UpdateSavedFilterEvent): void {\n    const savedFilter = find(\n      this.state.advancedFiltering.savedFilters,\n      (filterPreset) => filterPreset.id === event.oldSavedFilter.id\n    );\n\n    if (savedFilter) {\n      if (\n        savedFilter.appliedSharedFilterPresetGuid &&\n        !find(\n          event.newSavedFilter.filters,\n          (filter) => filter.filterOptionId === RX_RECORD_GRID.externalPresetFilterOptionId\n        )\n      ) {\n        delete savedFilter.appliedSharedFilterPresetGuid;\n      }\n\n      Object.assign(savedFilter, event.newSavedFilter);\n\n      this.userPreferencesChanged$.next();\n    }\n  }\n\n  openRowDetails(columns: IAdaptTableColumnConfig[], rowDataItem: IRowDataItem) {\n    last(this.popovers)?.close();\n\n    this.cardLayoutOpenedModal = this.adaptModalService.open({\n      title: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid.cards.record-details.dialog.title'\n      ),\n      content: this.cardLayoutRowDetailsTemplate,\n      data: {\n        columns,\n        rowDataItem\n      }\n    });\n\n    this.cardLayoutOpenedModal.catch(noop);\n  }\n\n  setToolbarTags(toolbarTags: IRecordGridFilterTag[]): void {\n    this.state.advancedFiltering.toolbarTags = toolbarTags;\n    this.updateToolbarItems();\n  }\n\n  trackByColumnField(index: number, column: IAdaptTableColumnConfig): string {\n    return column.field;\n  }\n\n  updateToolbarTags(filterTags: IRecordGridFilterTag[]): void {\n    this.getToolbarTags(filterTags).subscribe((toolbarTags) => {\n      this.setToolbarTags(toolbarTags);\n    });\n  }\n\n  private addAssociationFieldsToRecordDefinition(columnsWithMetadata: IRecordGridColumnWithMetadata[]): void {\n    const fieldDefinitionsById = this.state.recordDefinition.fieldDefinitionsById;\n\n    columnsWithMetadata.forEach((columnWithMetadata) => {\n      if (!fieldDefinitionsById[columnWithMetadata.fieldId]) {\n        this.rxRecordDefinitionService.addFieldDefinitionToMap(\n          columnWithMetadata.fieldDefinition,\n          fieldDefinitionsById,\n          columnWithMetadata.fieldId\n        );\n      }\n    });\n\n    this.state.recordDefinition.fieldDefinitionsById = {\n      ...fieldDefinitionsById,\n      ...this.rxObjectUtilsService.expandProperties(fieldDefinitionsById)\n    };\n\n    this.notifyPropertyChanged('recordDefinition', this.state.recordDefinition);\n  }\n\n  private areNonExternalPresetFiltersApplied(filters: SelectedAdvancedFilter[]): boolean {\n    return filters.some((filter) => filter.filterOptionId !== RX_RECORD_GRID.externalPresetFilterOptionId);\n  }\n\n  private getAppliedExternalPresetFilter(filters: SelectedAdvancedFilter[]): SelectedAdvancedFilter {\n    return filters.find((filter) => filter.filterOptionId === RX_RECORD_GRID.externalPresetFilterOptionId);\n  }\n\n  private prepareFieldsValueByFieldIdData(selectedData: IRowDataItem[]): { [id: number]: string[] } {\n    const columnIds = _map(this.adaptTableConfig.columns, 'field');\n\n    return reduce(\n      selectedData,\n      (result, row, index) => {\n        columnIds.forEach(function (id) {\n          result[id] = result[id] || [];\n          result[id][index] = row[id];\n        });\n\n        return result;\n      },\n      {}\n    );\n  }\n\n  private addSelectionFieldOptionNames(row: IRowDataItem): void {\n    if (row) {\n      row.selectionFieldOptionNamesById = transform(\n        this.selectionFieldOptionLabelsByFieldId,\n        (result, value, fieldId) => {\n          result[fieldId] = value[row[fieldId]];\n        },\n        {}\n      );\n    }\n  }\n\n  pendingFiltersToApply = null;\n\n  private applyFilters(filters: IRecordGridFilterData, mode: ApplyGridFilterMode): void {\n    this.initializationCompleted$\n      .pipe(\n        switchMap(() =>\n          this.rxRecordGridFilterService.getAdvancedFilterData(\n            filters,\n            this.state.recordDefinition.fieldDefinitionsById,\n            this.state.advancedFiltering.recordGridFilterConfigs,\n            this.state.recordDefinition,\n            this.state.advancedFiltering.filterOptions,\n            this.state.associationDescriptors\n          )\n        ),\n        take(1),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((filtersToApply: SelectedAdvancedFilter<RxRecordGridAdvancedFilterValue>[]) => {\n        let currentFilters = !isEmpty(this.pendingFiltersToApply)\n          ? this.pendingFiltersToApply\n          : cloneDeep(this.state.advancedFiltering.selectedFilters);\n\n        let resultingFilters;\n\n        switch (mode) {\n          case ApplyGridFilterMode.Begin:\n            if (this.pendingFiltersToApply) {\n              resultingFilters = this.pendingFiltersToApply;\n            } else {\n              this.pendingFiltersToApply = [];\n            }\n\n            break;\n          case ApplyGridFilterMode.Append:\n            // filters that will not be affected\n            const remainingFilters = currentFilters.filter(\n              (currentFilter) =>\n                !filtersToApply.find((filter) => filter.filterOptionId === currentFilter.filterOptionId)\n            );\n\n            resultingFilters = [...remainingFilters, ...filtersToApply];\n            break;\n          case ApplyGridFilterMode.Remove:\n            resultingFilters = currentFilters.reduce(\n              (result, currentFilter: SelectedAdvancedFilter<RxRecordGridAdvancedFilterValue>) => {\n                const filterToApply = filtersToApply.find(\n                  (filter) => filter.filterOptionId === currentFilter.filterOptionId\n                );\n\n                if (filterToApply) {\n                  if (this.isRangeFilter(currentFilter.filterOptionId)) {\n                    if (isEqual(currentFilter.value.filterValue, filterToApply.value.filterValue)) {\n                      currentFilter.value.filterValue = [null, null];\n                    }\n                  } else {\n                    currentFilter.value.filterValue = currentFilter.value.filterValue.filter(\n                      (val) => !filterToApply.value.filterValue.includes(val)\n                    );\n                  }\n\n                  currentFilter.value.namedOptions = currentFilter.value.namedOptions.filter(\n                    (val) => !filterToApply.value.namedOptions.includes(val)\n                  );\n\n                  if (!RxRecordGridAdvancedFilterValue.isEmptyWithRange(currentFilter.value)) {\n                    result.push(currentFilter);\n                  }\n                } else {\n                  result.push(currentFilter);\n                }\n\n                return result;\n              },\n              []\n            );\n\n            break;\n          case ApplyGridFilterMode.Merge:\n            resultingFilters = [...currentFilters, ...filtersToApply].reduce((result, filter) => {\n              const existingFilter = result.find((f) => f.filterOptionId === filter.filterOptionId);\n\n              if (!existingFilter) {\n                result.push(filter);\n              } else {\n                if (this.isRangeFilter(filter.filterOptionId)) {\n                  existingFilter.value.filterValue = [...filter.value.filterValue];\n                } else {\n                  existingFilter.value.filterValue = uniq(\n                    existingFilter.value.filterValue.concat(filter.value.filterValue)\n                  );\n                }\n\n                existingFilter.value.namedOptions = uniq(\n                  existingFilter.value.namedOptions.concat(filter.value.namedOptions)\n                );\n              }\n\n              return result;\n            }, []);\n\n            break;\n          case ApplyGridFilterMode.Overwrite:\n            this.state.advancedFiltering.appliedSharedFilterPreset = null;\n            this.state.advancedFiltering.activeSavedFilter = null;\n            resultingFilters = filtersToApply;\n            break;\n          case ApplyGridFilterMode.Clear:\n            this.state.advancedFiltering.appliedSharedFilterPreset = null;\n            this.state.advancedFiltering.activeSavedFilter = null;\n            resultingFilters = [];\n\n            if (this.pendingFiltersToApply) {\n              this.state.advancedFiltering.selectedFilters = [];\n            }\n\n            break;\n          case ApplyGridFilterMode.End:\n            if (this.pendingFiltersToApply) {\n              resultingFilters = this.pendingFiltersToApply;\n\n              this.pendingFiltersToApply = null;\n            }\n\n            break;\n        }\n\n        if (this.pendingFiltersToApply) {\n          this.pendingFiltersToApply = resultingFilters || [];\n        } else if (resultingFilters) {\n          this.onAdvancedFiltersChange(resultingFilters);\n        }\n      });\n  }\n\n  private applyPendingSelectedFilters(): void {\n    const existingFilters = cloneDeep(this.state.advancedFiltering.selectedFilters);\n\n    forEach(this.state.advancedFiltering.pendingSelectedFilters, (pendingSelectedFilter) => {\n      const existingFilter = find(existingFilters, { filterOptionId: pendingSelectedFilter.filterOptionId });\n      const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[pendingSelectedFilter.filterOptionId];\n\n      let filterValues = [];\n\n      switch (fieldDefinition.resourceType) {\n        case RX_RECORD_DEFINITION.dataTypes.dateOnly.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.dateTime.resourceType: {\n          filterValues = pendingSelectedFilter.value.map((filterValue) => moment(filterValue));\n          filterValues = [moment.min(filterValues), moment.max(filterValues)];\n\n          break;\n        }\n\n        case RX_RECORD_DEFINITION.dataTypes.timeOnly.resourceType: {\n          filterValues = pendingSelectedFilter.value.map((filterValue) => moment(filterValue, 'LTS'));\n          filterValues = [moment.min(filterValues), moment.max(filterValues)];\n\n          break;\n        }\n\n        case RX_RECORD_DEFINITION.dataTypes.integer.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.decimal.resourceType:\n        case RX_RECORD_DEFINITION.dataTypes.real.resourceType: {\n          filterValues = [min(pendingSelectedFilter.value), max(pendingSelectedFilter.value)];\n\n          break;\n        }\n\n        case RX_RECORD_DEFINITION.dataTypes.boolean.resourceType: {\n          filterValues = pendingSelectedFilter.value.map((filterValue) =>\n            filterValue === '$NULL$' ? 'blank' : filterValue === 1\n          );\n\n          break;\n        }\n\n        default: {\n          filterValues = uniq(pendingSelectedFilter.value.map((filterValue) => String(filterValue)));\n\n          break;\n        }\n      }\n\n      if (existingFilter) {\n        existingFilter.value.filterValue = filterValues;\n      } else {\n        pendingSelectedFilter.value = new RxRecordGridAdvancedFilterValue(filterValues);\n        existingFilters.push(pendingSelectedFilter);\n      }\n    });\n\n    this.onAdvancedFiltersChange(existingFilters);\n    this.clearSelectedCells();\n  }\n\n  private applySorting(multiSortMeta: SortMeta[]): void {\n    this.adaptTableConfig.multiSortMeta = multiSortMeta;\n    this.userPreferencesChanged$.next();\n\n    if (!this.state.useExternalFiltering) {\n      this.adaptTableConfig.data = this.filterRows(this.adaptTableConfig.data);\n    }\n  }\n\n  private applyViewPreset(\n    viewPresetSelectorGuid: string,\n    viewPresetGuid: string,\n    sharedViewPresets: IViewPresetsByViewComponentGuid\n  ): Observable<any> {\n    if (viewPresetSelectorGuid === this.state.viewPresetSelector?.getGuid()) {\n      return this.applyViewPresetInner(viewPresetGuid, sharedViewPresets);\n    }\n\n    return EMPTY;\n  }\n\n  private shareViewPreset(viewPresetSelectorGuid: string): Observable<IRecordGridSharedViewPreset> {\n    if (viewPresetSelectorGuid === this.state.viewPresetSelector?.getGuid()) {\n      return of(this.rxRecordGridUserPreferencesService.getSharedViewPresetData());\n    }\n\n    return of(null);\n  }\n\n  private applyViewPresetInner(\n    viewPresetGuid: string,\n    sharedViewPresets?: IViewPresetsByViewComponentGuid\n  ): Observable<any> {\n    return this.initializationCompleted$.pipe(\n      switchMap(() => {\n        const viewPresetData = sharedViewPresets && (sharedViewPresets[this.guid] as IRecordGridSharedViewPreset);\n\n        if (viewPresetData) {\n          return this.rxRecordGridUserPreferencesService.applySharedViewPreset(\n            this.state,\n            this.adaptTableConfig,\n            viewPresetGuid,\n            viewPresetData\n          );\n        } else {\n          return this.rxRecordGridUserPreferencesService.applyViewPreset(\n            this.state,\n            this.adaptTableConfig,\n            viewPresetGuid\n          );\n        }\n      }),\n      take(1),\n      tap(() => {\n        this.loadRowData();\n        this.userPreferencesChanged$.next();\n        this.checkIfViewPresetEdited();\n      })\n    );\n  }\n\n  private areUserFiltersApplied(): boolean {\n    return (\n      this.isSearchApplied() ||\n      Boolean(this.state.advancedFiltering.appliedSharedFilterPreset) ||\n      !isEmpty(this.state.advancedFiltering.selectedFilters)\n    );\n  }\n\n  private isSearchApplied(): boolean {\n    const searchText = get(this.adaptTableConfig.filters, 'global.value', '').toString().trim();\n\n    return Boolean(searchText);\n  }\n\n  private checkIfViewPresetEdited(): void {\n    if (this.state.viewPresetSelector && this.rxRecordGridUserPreferencesService.isCurrentViewPresetEdited()) {\n      this.state.viewPresetSelector.markAppliedViewPresetAsEdited();\n    }\n  }\n\n  private clearSelectedCells(): void {\n    last(this.popovers)?.close();\n\n    this.popovers = [];\n    this.state.advancedFiltering.pendingSelectedFilters = [];\n    this.state.advancedFiltering.selectedCardValues = {};\n  }\n\n  private compareRows(firstRow: IRowDataItem | RowDataItem, secondRow: IRowDataItem | RowDataItem): number {\n    const sortMetas = this.adaptTableConfig.multiSortMeta;\n\n    return reduce(\n      sortMetas,\n      (sortRank, sortMeta) => {\n        let firstValue;\n        let secondValue;\n\n        if (firstRow.groupField && secondRow.groupField) {\n          firstValue = firstRow.groupField === sortMeta.field ? firstRow.groupValue : null;\n          secondValue = secondRow.groupField === sortMeta.field ? secondRow.groupValue : null;\n        } else {\n          firstValue = firstRow[sortMeta.field];\n          secondValue = secondRow[sortMeta.field];\n        }\n\n        // TODO: this is a naive implementation that needs to be improved to\n        // take into account the type of data.\n        // For example, this implementation will sort dates as strings.\n        if (!isNaN(firstValue) && !isNaN(secondValue)) {\n          const firstValueNum = Number(firstValue);\n          const secondValueNum = Number(secondValue);\n\n          sortRank =\n            sortRank || sortMeta.order * (firstValueNum < secondValueNum ? -1 : firstValueNum > secondValueNum ? 1 : 0);\n        } else {\n          // toString will convert null to '' to allow comparison with strings using localeCompare\n          sortRank = sortRank || sortMeta.order * _toString(firstValue).localeCompare(_toString(secondValue));\n        }\n\n        return sortRank;\n      },\n      0\n    );\n  }\n\n  private createCsvExportFile(csvData: string): void {\n    const byteOrderMark = '\\uFEFF';\n\n    // Prepend byte order mark to indicate that csvData may contain unicode characters\n    const file = new Blob([`${byteOrderMark}${csvData}`], { type: 'text/csv;charset=utf-8' });\n\n    this.ngZone.runOutsideAngular(() => {\n      saveAs(file, `${this.getExportFileName()}.csv`);\n    });\n  }\n\n  private deleteViewPreset(viewPresetGuid: string): Observable<never> {\n    this.rxRecordGridUserPreferencesService.deleteViewPreset(viewPresetGuid);\n    this.userPreferencesChanged$.next();\n\n    return EMPTY;\n  }\n\n  private discardViewPresetChanges(\n    viewPresetGuid: string,\n    sharedViewPresets?: IViewPresetsByViewComponentGuid\n  ): Observable<void> {\n    if (this.rxRecordGridUserPreferencesService.isExistingViewPreset(viewPresetGuid)) {\n      this.rxRecordGridUserPreferencesService.discardViewPresetChanges(viewPresetGuid);\n\n      return this.applyViewPresetInner(viewPresetGuid, sharedViewPresets);\n    } else {\n      return EMPTY;\n    }\n  }\n\n  private enrichRowEntity(gridRowDataItem: IRowDataItem): IRowDataItem {\n    let hrefParams = {};\n\n    if (!isEmpty(this.clickableWithHrefColumnActions)) {\n      this.addSelectionFieldOptionNames(gridRowDataItem);\n\n      const expandedGridRowData: IRowDataItem = this.expandRowProperties(gridRowDataItem);\n\n      set(\n        this.clickableWithHrefActionExpressionEvaluationData,\n        `view.components.${this.guid}.clickableRow`,\n        expandedGridRowData\n      );\n\n      hrefParams = reduce(\n        this.clickableWithHrefColumnActions,\n        (result, gridActions, columnId) => {\n          const gridAction = this.findEnabledGridAction(gridActions);\n\n          if (gridAction?.name === RX_VIEW_ACTION.viewActionNames.openView) {\n            result[`${columnId}$ROUTER_LINK$`] = this.rxViewActionUtilsService.generateViewUrl(\n              gridAction.viewDefinitionName\n            );\n\n            result[`${columnId}$QUERY_PARAMS$`] = this.evaluateViewInputParameters(gridAction.viewParams);\n          } else if (gridAction?.name === RX_VIEW_ACTION.viewActionNames.launchUrl) {\n            result[`${columnId}$LAUNCH_URL$`] = this.rxExpressionEvaluatorService.tryEvaluate(\n              gridAction.url,\n              this.clickableWithHrefActionExpressionEvaluationData\n            );\n\n            result[`${columnId}$TARGET$`] = RX_LAUNCH_BEHAVIOR[gridAction.launchBehavior].target;\n          } else {\n            result[`${columnId}$LAUNCH_URL$`] = null;\n            result[`${columnId}$ROUTER_LINK$`] = null;\n          }\n\n          return result;\n        },\n        {}\n      );\n    }\n\n    return Object.assign(\n      {},\n      gridRowDataItem,\n      {\n        [RowDataItemIdFieldName]: gridRowDataItem[this.adaptTableConfig.primaryKey]\n      },\n      hrefParams\n    );\n  }\n\n  private expandRowProperties(rowDataItem: IRowDataItem): IRowDataItem {\n    return {\n      ...rowDataItem,\n      ...this.rxObjectUtilsService.expandProperties(rowDataItem)\n    };\n  }\n\n  private expandSelectedRowsProperties(rowDataItems: IRowDataItem[]): void {\n    forEach(rowDataItems, (rowDataItem, index) => {\n      rowDataItems[index] = this.expandRowProperties(rowDataItem);\n    });\n  }\n\n  private exportDataToCsv(cellValues: string[][], columnHeaders: string[]): void {\n    const csvSeparator = '\",\"';\n    const newLineSymbol = '\\n';\n\n    const columnHeadersString = `\"${columnHeaders.join(csvSeparator)}\"${newLineSymbol}`;\n\n    const rowsString = cellValues.map((row) => `\"${row.join(csvSeparator)}\"${newLineSymbol}`).join('');\n\n    const csvData = `${columnHeadersString}${rowsString}`;\n\n    this.createCsvExportFile(csvData);\n  }\n\n  private evaluateViewInputParameters(viewInputParams: IViewInputParams): IViewInputParams {\n    const evaluatedViewInputParams: IViewInputParams = {};\n\n    forEach(viewInputParams, (expression: string, parameterName: string) => {\n      const evaluatedExpression = this.rxExpressionEvaluatorService.tryEvaluate(\n        expression,\n        this.clickableWithHrefActionExpressionEvaluationData\n      );\n\n      evaluatedViewInputParams[parameterName] = evaluatedExpression || '';\n    });\n\n    return evaluatedViewInputParams;\n  }\n\n  private filterRows(rows: IRowDataItem[]): IRowDataItem[] {\n    const searchText = get(this.adaptTableConfig.filters, 'global.value', '').toString().trim();\n\n    let filteredRows = cloneDeep(rows);\n\n    if (searchText) {\n      const visibleColumns = this.getVisibleColumns();\n\n      filteredRows = filteredRows.filter((row: IRowDataItem) =>\n        some(visibleColumns, (column) => {\n          if (row.groupField) {\n            if (this.rxStringService.caseInsensitiveSearch(row.groupValue, searchText)) {\n              return true;\n            } else {\n              row.items = this.getFilteredItems(row.items, visibleColumns, searchText);\n\n              return row.items.length;\n            }\n          } else {\n            return this.rxStringService.caseInsensitiveSearch(this.getCellValue(row, column), searchText);\n          }\n        })\n      );\n    }\n\n    if (!isEmpty(this.state.advancedFiltering.selectedFilters)) {\n      filteredRows = this.rxRecordGridFilterService.filterRows(\n        filteredRows,\n        this.state.advancedFiltering.selectedFilters,\n        this.state.recordDefinition,\n        this.state.advancedFiltering.recordGridFilterConfigs\n      );\n    }\n\n    if (this.adaptTableConfig.multiSortMeta) {\n      if (this.state.expandGroups) {\n        this.sortRows(filteredRows);\n      } else {\n        filteredRows.sort((firstRow, secondRow) => this.compareRows(firstRow, secondRow));\n      }\n    }\n\n    if (this.state.expandGroups) {\n      const getGroupItemsCount = (rowsWithGroups) => {\n        const groups = rowsWithGroups.filter((row) => row.items);\n        let count = rowsWithGroups.length - groups.length;\n\n        groups?.forEach((group) => (count += getGroupItemsCount(group.items)));\n\n        return count;\n      };\n\n      this.adaptTableConfig.totalRecords = getGroupItemsCount(filteredRows);\n    } else {\n      this.adaptTableConfig.totalRecords = filteredRows.length;\n    }\n\n    return filteredRows;\n  }\n\n  private findEnabledGridAction(gridActions: IRxRecordGridAction[]): IRxRecordGridAction {\n    return gridActions.find((gridAction: IRxRecordGridAction) => {\n      const conditionExpression = gridAction['$condition$'];\n\n      const condition = this.rxExpressionEvaluatorService.tryEvaluate(\n        conditionExpression,\n        this.clickableWithHrefActionExpressionEvaluationData\n      );\n\n      return condition !== false;\n    });\n  }\n\n  private getAdvancedFilterOptions(): AdvancedFilterOption[] {\n    return reduce(\n      this.state.recordDefinition.fieldDefinitionsById,\n      (filterOptions, fieldDefinition, field) => {\n        // Due to nested structure need to check if it is a fieldDefinition\n        if (!isUndefined(fieldDefinition.id)) {\n          const gridColumn = this.adaptTableConfig.columns.find((column) => column.field === field);\n          const isHidden = !gridColumn || !gridColumn.filterable;\n          const filterConfig = this.state.advancedFiltering.recordGridFilterConfigs[fieldDefinition.resourceType];\n          const additionalQueryCriteria = gridColumn?.additionalQueryCriteria;\n\n          if (filterConfig) {\n            filterOptions.push(\n              this.rxRecordGridAdvancedFilteringService.getAdvancedFilterOption(\n                field,\n                gridColumn ? gridColumn.header || gridColumn.fallbackTitle : fieldDefinition.name,\n                fieldDefinition,\n                filterConfig,\n                isHidden,\n                {\n                  optionalBooleanFilter: this.fieldsProvider.optionalBooleanFilter,\n                  requiredBooleanFilter: this.fieldsProvider.requiredBooleanFilter,\n                  inputsForStringWithTypeAheadTemplate: this.fieldsProvider.inputsForStringWithTypeAheadTemplate,\n                  inputsForStringTypeTemplate: this.fieldsProvider.inputsForStringTypeTemplate,\n                  inputsForNumberTypeTemplate: this.fieldsProvider.inputsForNumberTypeTemplate,\n                  inputsForTimeTypeTemplate: this.fieldsProvider.inputsForTimeTypeTemplate,\n                  inputsForDateTypeTemplate: this.fieldsProvider.inputsForDateTypeTemplate,\n                  inputsForDatetimeTypeTemplate: this.fieldsProvider.inputsForDatetimeTypeTemplate,\n                  inputsForSelectionTypeTemplate: this.fieldsProvider.inputsForSelectionTypeTemplate\n                },\n                null,\n                this.state.namedFilterOptions[field],\n                gridColumn?.typeaheadKeystrokeCount ?? null,\n                gridColumn?.filterable ? additionalQueryCriteria : null\n              )\n            );\n          }\n        }\n\n        return filterOptions;\n      },\n      [] as AdvancedFilterOption[]\n    ).sort((filterOption1, filterOption2) => filterOption1.label.localeCompare(filterOption2.label));\n  }\n\n  private getAssociationDescriptors(): Observable<IAssociationDescriptor[]> {\n    const recordDefinitionName = this.getRecordDefinitionName();\n\n    return recordDefinitionName\n      ? this.rxRecordGridUtilsService.getAssociationDescriptors(recordDefinitionName)\n      : of([]);\n  }\n\n  private getBaseDataPageParams(): IRecordGridDataPageRequestParams {\n    const state = this.state;\n\n    const params = {\n      recorddefinition: state.recordDefinitionName\n    } as IRecordGridDataPageRequestParams;\n\n    if (Boolean(state.associationDefinitionName)) {\n      Object.assign(params, {\n        associatedRecordInstanceId: state.associatedRecordId,\n        associationDefinition: state.associationDefinitionName,\n        nodeToQuery: state.associatedRecordNodeSide,\n        recordDefinitionToQuery: state.recordDefinitionName\n      } as IRecordGridDataPageRequestParams);\n    }\n\n    if (state.associatedRoleName) {\n      params.roleName = state.associatedRoleName;\n    }\n\n    return params;\n  }\n\n  private getCellValueFormatter(column: IRecordGridColumnWithMetadata): (...args: any[]) => string {\n    const fieldDefinition = column.fieldDefinition;\n    let cellValueFormatter = (value) => value;\n\n    switch (fieldDefinition.resourceType) {\n      case RX_RECORD_DEFINITION.dataTypes.boolean.resourceType: {\n        cellValueFormatter = (value) => this.rxBooleanPipe.transform(value);\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.selection.resourceType: {\n        // column.fieldId should be used here because fieldId uniquely identifies the field,\n        // while fieldDefinition.id may be the same for core and associated fields\n        cellValueFormatter = (value: string) => this.selectionFieldOptionLabelsByFieldId[column.fieldId][value];\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.dateTime.resourceType: {\n        cellValueFormatter = (value) => this.datePipe.transform(value, 'medium');\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.dateOnly.resourceType: {\n        cellValueFormatter = (value) => this.datePipe.transform(value);\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.timeOnly.resourceType: {\n        cellValueFormatter = (value) =>\n          value ? this.datePipe.transform(new Date(`2000-01-01T${value}`), 'mediumTime') : value;\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.attachment.resourceType: {\n        cellValueFormatter = (value) => {\n          const attachmentName = get(value, 'name');\n\n          return isString(attachmentName) ? attachmentName : value;\n        };\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.decimal.resourceType:\n      case RX_RECORD_DEFINITION.dataTypes.real.resourceType: {\n        const precision = (fieldDefinition as IFieldDefinition).precision;\n        const digitsInfo = isNil(precision) || precision === -1 ? null : `1.${precision}-${precision}`;\n\n        cellValueFormatter = (value) => this.decimalPipe.transform(value, digitsInfo);\n\n        break;\n      }\n\n      case RX_RECORD_DEFINITION.dataTypes.integer.resourceType: {\n        cellValueFormatter = (value) => this.decimalPipe.transform(value);\n\n        break;\n      }\n    }\n\n    return cellValueFormatter;\n  }\n\n  private getCellValues(rows: KeyValueObject[], visibleColumns: IAdaptTableColumnConfig[]): string[][] {\n    return rows.map((row) =>\n      visibleColumns.map((visibleColumnConfig) => this.getCellValue(row as IRowDataItem, visibleColumnConfig))\n    );\n  }\n\n  private getColumns(): IRecordGridColumnPublicProperties[] {\n    return this.adaptTableConfig.columns.map((column: IAdaptTableColumnConfig) => {\n      const columnMetadata: IRecordGridColumnWithMetadata = find(this.state.columnsWithMetadata, {\n        fieldId: column.field\n      });\n\n      return {\n        field: column.field,\n        header: column.header,\n        hidden: getValueOrFunc(column.hidden),\n        fieldDefinition: columnMetadata.fieldDefinition\n      };\n    });\n  }\n\n  private getData(startIndex: number): Observable<IDataPageResult> {\n    return this.getDataBase(startIndex, false).pipe(\n      tap((dataPage: IDataPageResult) => {\n        this.cursor = dataPage.cursor || undefined;\n      })\n    );\n  }\n\n  private getDataBase(startIndex: number, onlyForTotalCount: boolean): Observable<IDataPageResult> {\n    let data$: Observable<IDataPageResult>;\n    const params = this.prepareQueryParamsAndQueryArgs(onlyForTotalCount);\n\n    if (params.queryExpression?.includes(RX_EXPRESSION_EVALUATOR.operands.undefined)) {\n      this.rxLogService.debug(`Query expression contains undefined operands: ${params.queryExpression}`);\n\n      return this.rxRecordInstanceDataPageService.getEmptyDataPage();\n    }\n\n    if (\n      this.state.enableFiltering &&\n      !this.isSearchApplied() &&\n      this.state.requiredFilters > this.state.advancedFiltering.selectedFilters.length\n    ) {\n      this.rxNotificationService.addWarningMessage(\n        this.getFiltersRequiredMessage(this.state.requiredFilters),\n        this.translateService.instant('com.bmc.arsys.rx.client.common.alert.label')\n      );\n\n      return this.rxRecordInstanceDataPageService.getEmptyDataPage();\n    }\n\n    if (isNumber(startIndex)) {\n      params.startIndex = startIndex;\n    }\n\n    if (startIndex === 0) {\n      delete params.cursor;\n    }\n\n    this.lastQueryExpression = params.queryExpression ?? '';\n\n    if (!onlyForTotalCount) {\n      this.lastPropertySelection = params.propertySelection;\n    }\n\n    if (this.state.getData) {\n      data$ = this.state.getData({\n        ...params,\n        searchText: get(this.adaptTableConfig.filters, 'global.value', '').toString().trim()\n      });\n    } else if (this.hasAssociationAndEmptyRecordId()) {\n      data$ = this.rxAssociationInstanceDataPageService.getEmptyDataPage();\n    } else {\n      const dataPageService = this.getDataPageService();\n\n      data$ = dataPageService.post({ params, headers: this.getHeaders() });\n    }\n\n    return data$;\n  }\n\n  private getDataCellStyle(column: IRecordGridColumnWithMetadata): IPlainObject {\n    let textAlign = '';\n\n    switch (column.alignment) {\n      case RX_RECORD_GRID.columnAlignment.left:\n        textAlign = 'left';\n        break;\n      case RX_RECORD_GRID.columnAlignment.right:\n        textAlign = 'right';\n        break;\n      case RX_RECORD_GRID.columnAlignment.center:\n        textAlign = 'center';\n        break;\n      default:\n        const rightAlignmentTypes = [\n          RX_RECORD_DEFINITION.dataTypes.integer.resourceType,\n          RX_RECORD_DEFINITION.dataTypes.decimal.resourceType,\n          RX_RECORD_DEFINITION.dataTypes.real.resourceType\n        ];\n\n        if (column.fieldDefinition.resourceType.search(rightAlignmentTypes.join('|')) !== -1) {\n          textAlign = 'right';\n        }\n\n        break;\n    }\n\n    return {\n      'text-align': textAlign\n    };\n  }\n\n  private getDataPageService(): DataPage {\n    return Boolean(this.state.associationDefinitionName)\n      ? this.rxAssociationInstanceDataPageService\n      : this.rxRecordInstanceDataPageService;\n  }\n\n  private getExportFileName(): string {\n    const date = this.datePipe.transform(new Date(), 'yyyy-MM-dd');\n\n    return `${date} Grid Data`;\n  }\n\n  private getFilteredItems(\n    items: RowDataItem,\n    visibleColumns: IAdaptTableColumnConfig[],\n    searchText: string\n  ): RowDataItem {\n    return items.filter((item: IRowDataItem) => {\n      let result;\n\n      if (item.groupField) {\n        if (this.rxStringService.caseInsensitiveSearch(item.groupValue, searchText)) {\n          result = true;\n        } else {\n          item.items = this.getFilteredItems(item.items, visibleColumns, searchText);\n\n          result = item.items.length;\n        }\n      } else {\n        result = some(visibleColumns, (visibleColumn) =>\n          this.rxStringService.caseInsensitiveSearch(this.getCellValue(item, visibleColumn), searchText)\n        );\n      }\n\n      return result;\n    });\n  }\n\n  private getFirstSelectedRow(): IRowDataItem {\n    return get(this.adaptTableConfig.selectedItems, '0', null);\n  }\n\n  private getGridColumnDefinitions(columnsWithMetadata: IRecordGridColumnWithMetadata[]): IAdaptTableColumnConfig[] {\n    const columnsConfig: IAdaptTableColumnConfig[] = [];\n\n    columnsWithMetadata\n      .slice()\n      .sort((a, b) => a.index - b.index)\n      .map((column) => {\n        let sortable: boolean;\n        const sortConfig = this.rxRecordGridConfigUtilsService.parseConfigString(column.sortable);\n        const testId = this.rxRecordGridUtilsService.getTestIdForGridColumn(column.fieldId);\n\n        if (isObject(sortConfig)) {\n          sortable = true;\n\n          if (this.adaptTableConfig.multiSortMeta) {\n            this.adaptTableConfig.multiSortMeta.splice(sortConfig.priority, 0, {\n              field: column.fieldId,\n              order: this.rxRecordGridConfigUtilsService.getColumnSortOrder((sortConfig as IColumnSortInfo).direction)\n            });\n          } else {\n            this.adaptTableConfig.multiSortMeta = [\n              {\n                field: column.fieldId,\n                order: this.rxRecordGridConfigUtilsService.getColumnSortOrder((sortConfig as IColumnSortInfo).direction)\n              }\n            ];\n          }\n        } else {\n          sortable = sortConfig;\n        }\n\n        const isColumnWidthInPixels = endsWith(column.width, 'px');\n\n        const columnWidth =\n          this.adaptTableConfig.columnResizeMode === ResizeMode.Expand && !isColumnWidthInPixels ? null : column.width;\n\n        const columnMinWidth = (\n          isColumnWidthInPixels && parseInt(columnWidth) < RX_RECORD_GRID.defaultColumnMinWidth ? columnWidth : null\n        ) as ValueOrFunc1<`${number}px`>;\n\n        if (column.fieldId === RX_RECORD_GRID.actionsColumnFieldDefinition.id) {\n          columnsConfig.push({\n            field: column.fieldId,\n            header: column.title,\n            fallbackTitle: column.fallbackTitle,\n            width: columnWidth,\n            minWidth: columnMinWidth,\n            hidden: !column.visible,\n            cellTemplate: this.rowActionButtonsTemplate,\n            editTemplate: null,\n            filterTemplate: null,\n            headerTitleTemplate: null,\n            cellTooltip: null,\n            headerTooltip: null,\n            headerClass: null,\n            filterable: column.filterable,\n            searchable: column.searchable,\n            sortable,\n            editable: false,\n            customTemplate: this.rowActionButtonsTemplate,\n            clickable: false,\n            dataCellClass: 'rx-row-action-cell',\n            isRowActionsColumn: true,\n            testId\n          });\n        } else {\n          columnsConfig.push({\n            field: column.fieldId,\n            header: column.title,\n            fallbackTitle: column.fallbackTitle,\n            width: columnWidth,\n            minWidth: columnMinWidth,\n            hidden: !column.visible,\n            cellTemplate: this.cellTemplate,\n            editTemplate: null,\n            filterTemplate: null,\n            headerTitleTemplate: null,\n            cellTooltip: (params: DataCellTooltipParams<IRowDataItem>) => {\n              return (this.showCellTooltip && this.getCellValue(params.dataItem, params.column)) || null;\n            },\n            headerTooltip: column.headerTooltip,\n            dataCellClass: this.getDataCellClass.bind(this),\n            dataCellStyle: this.getDataCellStyle(column),\n            headerClass: null,\n            sortable,\n            editable: null,\n            filterable: column.filterable,\n            searchable: column.searchable,\n            filterName: null,\n            filterParams: null,\n            clickable: column.clickable,\n            filterType: column.filterType,\n            isDownloadableAttachment: this.isDownloadableAttachmentColumn(column),\n            clickableWithHref: column.clickableWithHref,\n            customTemplate: column.cellTemplate,\n            wrapText: column.wrapText,\n            referenced: column.referenced,\n            cellDisplayProperties: column.cellDisplayProperties,\n            typeaheadKeystrokeCount: column.typeaheadKeystrokeCount,\n            additionalQueryCriteria: column.additionalQueryCriteria,\n            testId\n          });\n\n          this.cellValueFormatters[column.fieldId] = this.getCellValueFormatter(column);\n        }\n      });\n\n    return columnsConfig;\n  }\n\n  private getGridData(loadMore?: boolean): Observable<IDataPageResult> {\n    const onRequestEnd = () => {\n      this.adaptTableConfig.isLoadingData = false;\n      this.adaptTableConfig.isLoadingMoreData = false;\n    };\n\n    this.adaptTableConfig.isLoadingData = true;\n\n    return this.getData(loadMore ? this.adaptTableConfig.data.length : 0).pipe(\n      tap((res) => {\n        onRequestEnd();\n\n        const mappedData: IRowDataItem[] = res.data.map(this.enrichRowEntity.bind(this));\n\n        if (this.state.useExternalFiltering) {\n          if (loadMore) {\n            this.adaptTableConfig.data = this.adaptTableConfig.data.concat(mappedData);\n\n            if (mappedData.length === 0 || mappedData.length < this.adaptTableConfig.rows) {\n              this.adaptTableConfig.totalRecords = this.adaptTableConfig.data.length;\n            }\n          } else {\n            this.adaptTableConfig.data = mappedData;\n\n            if (mappedData.length < this.adaptTableConfig.rows) {\n              this.adaptTableConfig.totalRecords = mappedData.length;\n            } else {\n              this.adaptTableConfig.totalRecords = null;\n            }\n          }\n        } else {\n          this.adaptTableConfig.originalRows = mappedData;\n          this.adaptTableConfig.data = this.filterRows(this.adaptTableConfig.originalRows);\n        }\n\n        if (this.state.expandGroups) {\n          this.adaptTableConfig.expandedGroupsKeys = {};\n\n          const expandGroupsDeep = (rows) => {\n            rows.forEach((row) => {\n              if (row.items) {\n                const expandedGroupKey = this.adaptTableConfig.expandedGroupsKeys[row.groupField];\n\n                if (expandedGroupKey) {\n                  expandedGroupKey[row.groupValue] = true;\n                } else {\n                  this.adaptTableConfig.expandedGroupsKeys[row.groupField] = { [row.groupValue]: true };\n                }\n\n                expandGroupsDeep(row.items);\n              }\n            });\n          };\n\n          expandGroupsDeep(this.adaptTableConfig.data);\n        }\n\n        this.adaptTableConfig.toolbarConfig.rightCustomSection = Boolean(\n          this.state.enableRowSelection && this.adaptTableConfig.data.length\n        );\n\n        this.notifyPropertyChanged('totalRowCount', this.adaptTableConfig.data.length);\n        this.notifyPropertyChanged('queryExpression', this.lastQueryExpression);\n        this.notifyPropertyChanged('lastRefreshTime', new Date().toISOString());\n\n        if (!loadMore) {\n          this.onRowsSelectionChange([]);\n          this.scrollToTop();\n        }\n\n        this.setSelectedFilteredRowsCount();\n\n        this.dataLoaded.emit();\n\n        this.dataLoadContextSubject.next({\n          associatedRecordId: this.state.associatedRecordId,\n          associatedRoleName: this.state.associatedRoleName,\n          filterExpression: this.state.filterExpression,\n          namedFilterOptions: this.state.namedFilterOptions\n        });\n\n        this.changeDetector.markForCheck();\n      }),\n      catchError((err) => {\n        onRequestEnd();\n\n        return throwError(err);\n      })\n    );\n  }\n\n  private getHeaders(): IPlainObject {\n    return {\n      'Should-Query-All-Locales': this.state.showDataForAllLocales ? 'true' : []\n    };\n  }\n\n  private getNamedFilterOptionsState(\n    columns: { predefinedFilterPresets?: IRecordGridColumnNamedFilterOption[]; fieldId: string }[]\n  ): IRecordGridNamedFilterOptionsMap {\n    return columns.reduce((result, col) => {\n      if (col.predefinedFilterPresets) {\n        result[col.fieldId] = col.predefinedFilterPresets.sort((a, b) => a.index - b.index);\n      }\n\n      return result;\n    }, {});\n  }\n\n  private getProgrammaticActionButtons(\n    recordGridActionButtons: IRecordGridActionButton[]\n  ): IChildComponentData<IRecordGridActionButton>[] {\n    return recordGridActionButtons.map((actionButton): IChildComponentData<IRecordGridActionButton> => {\n      let actionButtonConfig: Observable<IRecordGridActionButton>;\n\n      if (isFunction(actionButton.disabled) || isFunction(actionButton.hidden)) {\n        actionButtonConfig = this.rowSelectionChanged.pipe(\n          map((selectedItems) => {\n            return {\n              ...actionButton,\n              disabled: isFunction(actionButton.disabled)\n                ? actionButton.disabled(selectedItems)\n                : actionButton.disabled,\n              hidden: isFunction(actionButton.hidden) ? actionButton.hidden(selectedItems) : actionButton.hidden\n            };\n          })\n        );\n      } else {\n        actionButtonConfig = of(actionButton);\n      }\n\n      return {\n        guid: actionButton.guid,\n        config: actionButtonConfig,\n        runtimeViewModelApi: {\n          triggerViewActions: (guid, viewActionTriggerEventName) =>\n            this.executeViewActions(actionButton.guid, get(actionButton, 'actions'), this.state.lastActionRow)\n        } as RuntimeViewModelApi,\n        factory: null,\n        outlets: null\n      };\n    });\n  }\n\n  private getRecordDefinition(): Observable<IRecordDefinition> {\n    if (this.state.getRecordDefinition) {\n      return this.state\n        .getRecordDefinition()\n        .pipe(\n          tap((recordDefinition: IRecordDefinition) =>\n            this.rxRecordDefinitionService.applyLocalization(recordDefinition)\n          )\n        );\n    }\n\n    return this.rxRecordDefinitionCacheService.getRecordDefinition(this.state.recordDefinitionName);\n  }\n\n  private getRecordDefinitionName(): string {\n    return this.state.recordDefinitionName;\n  }\n\n  private getSelectedRowCount(): number {\n    return this.adaptTableConfig.selectedItems.length;\n  }\n\n  private getSelectedRows(inSortOrder = false): IRowDataItem[] {\n    if (inSortOrder) {\n      // returns selected rows in order of sorting applied to grid\n      return intersectionBy(this.adaptTableConfig.data, this.adaptTableConfig.selectedItems, RowDataItemIdFieldName);\n    } else {\n      // returns selected rows in order of selection\n      return this.adaptTableConfig.selectedItems;\n    }\n  }\n\n  private getTotalRowCount(): Observable<IDataPageResult> {\n    return this.getDataBase(null, true);\n  }\n\n  private getVirtualRowHeight(): number {\n    if (!this.adaptTableConfig.cardLayoutColumns?.length) {\n      return RX_RECORD_GRID.defaultRowHeight;\n    }\n\n    const singleRowHeight = 32;\n    const padding = 3;\n\n    return singleRowHeight * this.visibleColumns.length + 2 * padding;\n  }\n\n  private hasAssociationAndEmptyRecordId() {\n    return Boolean(this.state.associationDefinitionName) && !this.state.associatedRecordId;\n  }\n\n  private initActionButtons() {\n    if (this.isProgrammaticUse) {\n      this.actionButtons = this.getProgrammaticActionButtons(this.state.actionButtons);\n    } else {\n      this.actionButtons = get(\n        this.runtimeViewCanvasItemComponent.getChildren(RX_VIEW_DEFINITION.defaultOutletName),\n        '[0].children'\n      );\n    }\n  }\n\n  private initAdvancedFilterTexts(): void {\n    this.state.advancedFiltering.filterTexts = {\n      initialDropdownAnchorLabel: this.translateService.instant('com.bmc.arsys.rx.client.common.filter-data.label')\n    };\n  }\n\n  private initCustomTexts(): void {\n    this.adaptTableConfig.texts = {\n      searchPlaceholder: this.state.searchFieldPlaceholderText,\n      emptyStateLabelText: this.state.emptyStateLabelText,\n      emptyStateWithFilterLabelText: this.state.emptyStateWithFilterLabelText,\n      exportEntireDocument: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid.export-all-rows.label'\n      ),\n      exportSelected: this.translateService.instant(\n        'com.bmc.arsys.rx.client.view-components.record-grid.export-selected-rows.label'\n      )\n    };\n  }\n\n  private initGrid(): Observable<any> {\n    this.state.guid = this.guid;\n\n    return forkJoin([\n      this.rxGridConfiguratorService.getColumnsWithMetadata(this.guid, this.state.columns, this.state.recordDefinition),\n      this.guid && this.state.enableFiltering ? this.getSharedFilterPresets() : of(null)\n    ]).pipe(\n      switchMap(([columnsWithMetadata, sharedFilterPresets]) => {\n        this.state.columnsWithMetadata = columnsWithMetadata;\n        this.state.namedFilterOptions = this.getNamedFilterOptionsState(columnsWithMetadata);\n\n        this.isUserAllowedToDeleteRecords = this.state.recordDefinition\n          ? this.state.recordDefinition.allowNonAdminToDeleteRecordInstances !== false ||\n            this.rxCurrentUserService.isAdministrator()\n          : false;\n\n        this.notifyPropertyChanged('isUserAllowedToDeleteRecords', this.isUserAllowedToDeleteRecords);\n\n        this.addAssociationFieldsToRecordDefinition(columnsWithMetadata);\n\n        // this has to be set prior to calling getGridColumnDefinitions\n        this.selectionFieldOptionLabelsByFieldId =\n          this.rxGridConfiguratorService.getSelectionFieldOptionLabelsByFieldId(\n            this.state.columns,\n            this.state.recordDefinition\n          );\n\n        this.adaptTableConfig.columnResizeMode = this.state.expandable ? ResizeMode.Expand : ResizeMode.Fit;\n        this.adaptTableConfig.columns = this.getGridColumnDefinitions(columnsWithMetadata);\n        this.state.advancedFiltering.recordGridFilterConfigs = this.rxRecordGridFilterConfigService.getConfigs();\n        this.state.advancedFiltering.filterOptions = this.getAdvancedFilterOptions();\n\n        this.state.advancedFiltering.filterOptions.push({\n          id: RX_RECORD_GRID.externalPresetFilterOptionId,\n          label: RX_RECORD_GRID.externalPresetFilterOptionId,\n          dataType: AdvancedFilterOptionDataType.custom,\n          isHidden: true,\n          customConfig: {\n            getTagText: (value) =>\n              this.state.advancedFiltering.savedFilters.find((savedFilter) => savedFilter.id === value)?.name\n          }\n        });\n\n        this.adaptTableConfig.rowSelectionMode = this.state.enableRowSelection;\n        this.adaptTableConfig.primaryKey = this.state.recordIdField;\n        this.adaptTableConfig.bordered = this.state.bordered;\n        this.adaptTableConfig.striped = this.state.striped;\n\n        this.adaptTableConfig.toolbarConfig.rightCustomSection = Boolean(\n          this.state.enableRowSelection && this.adaptTableConfig.data.length\n        );\n\n        this.state.initialFilters = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n          this.state.filters,\n          this.state.recordGridFilters\n        );\n\n        this.clickableWithHrefColumnActions = reduce(\n          columnsWithMetadata,\n          (result, column: IRecordGridColumnWithMetadata) => {\n            if (column.clickableWithHref) {\n              result[column.fieldId] = column.actions;\n            }\n\n            return result;\n          },\n          {}\n        );\n\n        if (!isEmpty(this.clickableWithHrefColumnActions)) {\n          this.clickableWithHrefActionExpressionEvaluationData = {\n            view: {\n              components: {\n                [this.guid]: {\n                  recordDefinition: this.state.recordDefinition\n                }\n              },\n\n              inputParams: this.runtimeViewModelApi.getViewInputParameters()\n            }\n          };\n        }\n\n        if (this.guid) {\n          return this.rxRecordGridUserPreferencesService.applyUserPreferences(\n            this.adaptTableConfig,\n            this.state.columnsWithMetadata,\n            this.state,\n            sharedFilterPresets\n          );\n        }\n\n        return of(null);\n      }),\n      tap(() => {\n        this.sortedColumnsByTitle = this.getSortedColumnsByTitle();\n        this.filteredVisibleColumns = this.sortedColumnsByTitle;\n        this.visibleColumns = this.getVisibleColumns();\n        this.isFilterBySelectionButtonVisible = this.state.enableFiltering && some(this.visibleColumns, 'filterable');\n        this.initActionButtons();\n        this.initRowActionButtons();\n\n        if (!this.state.viewPresetSelector) {\n          // #ADAPT-8052 workaround.\n          this.avoidSystemColumnExpansion();\n\n          this.loadRowData();\n        }\n\n        this.updateToolbarTags(this.state.advancedFiltering.toolbarTags);\n        this.updateAdaptTableFilters();\n      })\n    );\n  }\n\n  // #ADAPT-8052 workaround. System column width changes when removing a column from the grid.\n  // If all columns have custom width in percents, proportionally increase the width of all columns.\n  // If all columns have custom width in pixels, change the largest column width property to auto-expandable (width = null).\n  // If % and px are both used, change the largest column width in % to auto-expandable (width= null).\n  // If Actions column has customized width, avoid width change when possible. Preserving width in pixels is in priority.\n  // Note:\n  // Those column width modifications applied during initial rendering of the grid are not saved to User preferences,\n  // because it is not the user intention but a workaround.\n  private avoidSystemColumnExpansion() {\n    if (this.adaptTableConfig.cardLayoutColumns) {\n      this.avoidSystemCardColumnExpansion();\n\n      return;\n    }\n\n    const columnsWithWidthInPixels: IAdaptTableColumnConfig[] = [];\n    const columnsWithWidthInPercent: IAdaptTableColumnConfig[] = [];\n\n    const visibleActionsColumn: IAdaptTableColumnConfig = find(this.adaptTableConfig.columns, {\n      field: RX_RECORD_GRID.actionsColumnFieldDefinition.id,\n      hidden: false\n    });\n\n    let maxWidthInPixels = 0;\n    let maxWidthInPercent = 0;\n    let totalWidthInPercent = 0;\n\n    const isEveryVisibleColumnWithCustomWidth = this.adaptTableConfig.columns.every(\n      (column: IAdaptTableColumnConfig) => {\n        if (!column.hidden) {\n          if (isNil(column.width)) {\n            return false;\n          }\n\n          const columnWidth = parseFloat(column.width);\n\n          if (column.width.endsWith('px')) {\n            columnsWithWidthInPixels.push(column);\n\n            if (column !== visibleActionsColumn) {\n              maxWidthInPixels = Math.max(maxWidthInPixels, columnWidth);\n            }\n          } else {\n            columnsWithWidthInPercent.push(column);\n            totalWidthInPercent += columnWidth;\n\n            if (column !== visibleActionsColumn) {\n              maxWidthInPercent = Math.max(maxWidthInPercent, columnWidth);\n            }\n          }\n        }\n\n        return true;\n      }\n    );\n\n    if (isEveryVisibleColumnWithCustomWidth && totalWidthInPercent < 100) {\n      const hasColumnsWithWidthInPercent = Boolean(columnsWithWidthInPercent.length);\n      const hasColumnsWithWidthInPixels = Boolean(columnsWithWidthInPixels.length);\n\n      if (hasColumnsWithWidthInPercent && !hasColumnsWithWidthInPixels) {\n        columnsWithWidthInPercent.forEach((column) => {\n          column.width = `${((parseFloat(column.width) / totalWidthInPercent) * 100).toFixed(4)}%`;\n        });\n      }\n\n      if (!hasColumnsWithWidthInPercent && hasColumnsWithWidthInPixels) {\n        if (columnsWithWidthInPixels.length === 1 && visibleActionsColumn) {\n          visibleActionsColumn.width = null;\n          visibleActionsColumn.minWidth = null;\n        } else {\n          findLast(columnsWithWidthInPixels, (column) => {\n            if (parseInt(column.width) === maxWidthInPixels && column !== visibleActionsColumn) {\n              column.width = null;\n              column.minWidth = null;\n\n              return true;\n            } else {\n              return false;\n            }\n          });\n        }\n      }\n\n      if (hasColumnsWithWidthInPercent && hasColumnsWithWidthInPixels) {\n        if (columnsWithWidthInPercent.length === 1 && visibleActionsColumn) {\n          visibleActionsColumn.width = null;\n          visibleActionsColumn.minWidth = null;\n        } else {\n          findLast(columnsWithWidthInPercent, (column) => {\n            if (parseFloat(column.width) === maxWidthInPercent && column !== visibleActionsColumn) {\n              column.width = null;\n\n              return true;\n            } else {\n              return false;\n            }\n          });\n        }\n      }\n    }\n  }\n\n  // This is a workaround for Adapt defect on System column (checkbox)\n  // when the user is using an Ios device and the grid is in card mode.\n  // It seems setting the columns in % does not work correctly, in the case of\n  // card display we have only two columns with 35% and 65%, however\n  // the Adapt grid tries to display the cards around 50% each.\n  // For example for an Iphone 14 Pro on Xcode simulator the grid total size is 359px:\n  // -> 96.31px for the system column (instead of 33px),\n  // -> 130.34px for the second column,\n  // -> 131.34px for the third column,\n  // In order to \"fix\" the issue, the user has to \"tap\" on the separator\n  // between columns 2 and 3, which then seems to \"redraw\" the grid.\n  // Workaround:\n  // Setting the values of both columns in px instead of % solves the problem.\n  // For now, we only apply this workaround on ios platform.\n  private avoidSystemCardColumnExpansion() {\n    if (!this.adaptDeviceDetectionService.iosPlatform()) {\n      return;\n    }\n\n    const adaptSystemColumnWidth = 33;\n\n    const availableColumnWidth =\n      this.adaptTable.dataHeaderCells.reduce((accum, cell) => accum + cell.element.nativeElement.offsetWidth, 0) -\n      adaptSystemColumnWidth;\n\n    this.adaptTableConfig.cardLayoutColumns.forEach((column: IAdaptTableColumnConfig) => {\n      column.width = `${((parseFloat(column.width) * availableColumnWidth) / 100).toFixed(4)}px`;\n    });\n  }\n\n  private initRecordDefinitions(): Observable<IRecordDefinition> {\n    this.setRecordDefinition(null);\n    this.state.associationDescriptors = [];\n\n    const hasAssociatedRecordFieldColumns = some(this.state.columns, (column) =>\n      this.rxRecordGridUtilsService.isAssociatedRecordFieldId(column.fieldId)\n    );\n\n    return forkJoin([\n      this.getRecordDefinition(),\n      hasAssociatedRecordFieldColumns ? this.getAssociationDescriptors() : of([])\n    ]).pipe(\n      tap(([recordDefinition, associationDescriptors]) => {\n        this.setRecordDefinition(recordDefinition);\n        this.state.associationDescriptors = associationDescriptors;\n      }),\n      map(([recordDefinition]) => recordDefinition)\n    );\n  }\n\n  private initRowActionButtons(): void {\n    if (this.isProgrammaticUse) {\n      this.rowActionButtons = this.getProgrammaticActionButtons(this.state.rowActionButtons);\n    } else {\n      this.rowActionButtons = get(\n        this.runtimeViewCanvasItemComponent.getChildren(RX_RECORD_GRID.rowActionsOutletName),\n        '[0].children'\n      );\n    }\n  }\n\n  private isDownloadableAttachmentColumn(column: IRecordGridColumnWithMetadata): boolean {\n    const recordDefinitionType = get(this.state.recordDefinition, 'resourceType');\n    const fieldDefinitionType = get(column, 'fieldDefinition.resourceType');\n\n    return (\n      !this.isProgrammaticUse &&\n      (recordDefinitionType === RX_RECORD_DEFINITION.recordDefinitionTypes.regular.recordDefinitionType ||\n        recordDefinitionType === RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType) &&\n      fieldDefinitionType === RX_RECORD_DEFINITION.dataTypes.attachment.resourceType\n    );\n  }\n\n  private isRangeFilter(fieldId: string): boolean {\n    const rangeFields = [\n      RX_RECORD_DEFINITION.dataTypes.dateOnly.resourceType,\n      RX_RECORD_DEFINITION.dataTypes.dateTime.resourceType,\n      RX_RECORD_DEFINITION.dataTypes.timeOnly.resourceType,\n      RX_RECORD_DEFINITION.dataTypes.integer.resourceType,\n      RX_RECORD_DEFINITION.dataTypes.decimal.resourceType,\n      RX_RECORD_DEFINITION.dataTypes.real.resourceType\n    ];\n\n    const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[fieldId];\n\n    return includes(rangeFields, fieldDefinition.resourceType);\n  }\n\n  private isSharedFilterPreset(\n    savedFilter: IRxRecordGridSavedAdvancedFilter | IRxRecordGridSharedFilterPreset\n  ): savedFilter is IRxRecordGridSharedFilterPreset {\n    return Boolean((savedFilter as IRxRecordGridSharedFilterPreset).filterExpression);\n  }\n\n  private loadRowData(loadMore?: boolean): void {\n    this.getGridData(loadMore).subscribe();\n  }\n\n  private openSortByDialogFn(config: any): Promise<any> {\n    this.cardLayoutOpenedModal = this.adaptModalService.open(config);\n\n    return this.cardLayoutOpenedModal;\n  }\n\n  private prepareQueryParamsAndQueryArgs(onlyForTotalCount: boolean): IRecordGridDataPageRequestParams {\n    const primaryKey = this.adaptTableConfig.primaryKey;\n\n    const queryParams: IRecordGridDataPageRequestParams = {\n      ...this.getBaseDataPageParams(),\n      shouldIncludeTotalSize: onlyForTotalCount,\n      pageSize: onlyForTotalCount ? 0 : this.adaptTableConfig.rows,\n      startIndex: onlyForTotalCount ? 0 : this.adaptTableConfig.first\n    };\n\n    if (this.cursor && !onlyForTotalCount) {\n      queryParams.cursor = this.cursor;\n    }\n\n    if (!onlyForTotalCount) {\n      queryParams.propertySelection = chain(\n        this.adaptTableConfig.columns\n          .filter(\n            (col) => !col.isRowActionsColumn && (this.state.getDataForHiddenColumns || !col.hidden || col.referenced)\n          )\n          .map((col) => col.field)\n      )\n        .union([primaryKey])\n        .value();\n    }\n\n    const multiSortMeta = this.adaptTableConfig.multiSortMeta;\n\n    if (!onlyForTotalCount && multiSortMeta && multiSortMeta.length) {\n      queryParams.sortBy = multiSortMeta.map((metaItem) =>\n        metaItem.order === SortOrder.Asc ? `${metaItem.field}` : `-${metaItem.field}`\n      );\n    }\n\n    const searchText = get(this.adaptTableConfig.filters, 'global.value', '').toString().trim();\n\n    const textSearchQuery = this.rxRecordGridFilterService.generateTextFilterQuery(\n      searchText,\n      this.adaptTableConfig.columns\n    );\n\n    const appliedSharedFilterPreset = this.state.advancedFiltering.appliedSharedFilterPreset;\n\n    const sharedFilterPresetExpression =\n      appliedSharedFilterPreset && appliedSharedFilterPreset.filterExpression\n        ? `(${appliedSharedFilterPreset.filterExpression})`\n        : null;\n\n    const resultingQuery = this.rxRecordGridFilterService.addQueries(\n      this.rxRecordGridFilterService.getQueryFromRecordGridFilterData(\n        this.state.initialFilters,\n        this.state.recordDefinition.fieldDefinitionsById\n      ),\n      this.buildQueryByAdvancedFilters(this.state.advancedFiltering.selectedFilters),\n      textSearchQuery,\n      this.state.filterExpression,\n      sharedFilterPresetExpression\n    );\n\n    if (resultingQuery) {\n      queryParams.queryExpression = resultingQuery;\n    }\n\n    return queryParams;\n  }\n\n  private refresh(): Observable<never> {\n    return this.initializationCompleted$.pipe(\n      switchMap(() => this.getGridData()),\n      switchMapTo(EMPTY)\n    );\n  }\n\n  private saveViewPreset(viewPresetGuid: string): Observable<never> {\n    this.rxRecordGridUserPreferencesService.saveViewPreset(viewPresetGuid);\n    this.userPreferencesChanged$.next();\n\n    return EMPTY;\n  }\n\n  private scrollToTop(): void {\n    if (this.adaptTable) {\n      const scrollableBodyElement = this.adaptTable.getScrollableBodyElement();\n\n      if (scrollableBodyElement) {\n        scrollableBodyElement.scrollTop = 0;\n      }\n    }\n  }\n\n  private setFilter(newFilter: SelectedAdvancedFilter[]): void {\n    this.state.advancedFiltering.selectedFilters = newFilter;\n  }\n\n  private setRecordDefinition(recordDefinition: IRecordDefinition): void {\n    this.state.recordDefinition = cloneDeep(recordDefinition);\n\n    if (recordDefinition) {\n      this.state.recordDefinition.fieldDefinitionsById = this.rxRecordDefinitionService.buildFieldDefinitionsByIdMap(\n        this.state.recordDefinition\n      );\n    }\n\n    this.notifyPropertyChanged('recordDefinition', this.state.recordDefinition);\n  }\n\n  private setSelectedFilteredRowsCount(): void {\n    this.selectedFilteredRowsCount = this.adaptTable.hasFilter() ? this.getSelectedRows().length : 0;\n  }\n\n  private sortRows(rows: RowDataItem[]): void {\n    rows.sort((firstRow: RowDataItem, secondRow: RowDataItem) => this.compareRows(firstRow, secondRow));\n\n    forEach(rows, (row) => {\n      if (row.items?.length) {\n        this.sortRows(row.items);\n      }\n    });\n  }\n\n  private toggleCellSelection(\n    columns: IAdaptTableColumnConfig[],\n    rowItem: IRowDataItem,\n    popover: AdaptPopoverDirective,\n    isCardLayout?: boolean\n  ): void {\n    if (this.state.enableFiltering) {\n      if (!isCardLayout) {\n        const column = columns[0];\n\n        if (column.filterable) {\n          const existingPendingFilter = find(this.state.advancedFiltering.pendingSelectedFilters, {\n            filterOptionId: column.field\n          });\n\n          const filterValue = !rowItem[column.field] && rowItem[column.field] !== 0 ? '$NULL$' : rowItem[column.field];\n          const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[column.field];\n          const isRangeFilter = this.isRangeFilter(column.field);\n\n          const isRequiredBooleanFilter =\n            fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.boolean.resourceType &&\n            this.rxFieldDefinitionService.isRequiredField(fieldDefinition);\n\n          const isFilterAvailable = !(\n            (isRangeFilter && existingPendingFilter && existingPendingFilter.value.length === 2) ||\n            (isRequiredBooleanFilter && existingPendingFilter) ||\n            (filterValue === '$NULL$' && (isRangeFilter || isRequiredBooleanFilter))\n          );\n\n          if (existingPendingFilter) {\n            if (this.isCellSelected(popover)) {\n              const elementIndex = findIndex(existingPendingFilter.value, filterValue);\n\n              existingPendingFilter.value.splice(elementIndex, 1);\n              this.trackPopoverAnchor(popover);\n\n              if (!existingPendingFilter.value.length) {\n                remove(this.state.advancedFiltering.pendingSelectedFilters, existingPendingFilter);\n              }\n            } else if (isFilterAvailable) {\n              existingPendingFilter.value.push(filterValue);\n              this.trackPopoverAnchor(popover);\n            }\n          } else if (isFilterAvailable) {\n            const selectedFilter = {\n              filterOptionId: column.field,\n              value: [filterValue]\n            };\n\n            this.state.advancedFiltering.pendingSelectedFilters.push(selectedFilter);\n            this.trackPopoverAnchor(popover);\n          }\n        }\n      } else {\n        const filterableColumns = columns.filter((column) => {\n          const fieldDefinition = this.state.recordDefinition.fieldDefinitionsById[column.field];\n\n          const isRequiredBooleanFilter =\n            fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.boolean.resourceType &&\n            this.rxFieldDefinitionService.isRequiredField(fieldDefinition);\n\n          return column.filterable && !isRequiredBooleanFilter;\n        });\n\n        const isCellSelected = this.isCellSelected(popover);\n\n        forEach(filterableColumns, (column) => {\n          if (column.filterable) {\n            const filterValue =\n              !rowItem[column.field] && rowItem[column.field] !== 0 ? '$NULL$' : rowItem[column.field];\n\n            if (!this.state.advancedFiltering.selectedCardValues[column.field]) {\n              this.state.advancedFiltering.selectedCardValues[column.field] = [filterValue];\n            } else if (isCellSelected) {\n              remove(this.state.advancedFiltering.selectedCardValues[column.field], filterValue);\n            } else {\n              this.state.advancedFiltering.selectedCardValues[column.field].push(filterValue);\n            }\n          }\n        });\n      }\n    }\n  }\n\n  private trackPopoverAnchor(cellPopover: AdaptPopoverDirective): void {\n    if (this.isCellSelected(cellPopover)) {\n      const isCurrentPopoverLast = cellPopover === last(this.popovers);\n\n      remove(this.popovers, cellPopover);\n\n      if (isCurrentPopoverLast) {\n        cellPopover.close();\n\n        last(this.popovers)?.open();\n      }\n    } else {\n      last(this.popovers)?.close();\n\n      this.popovers.push(cellPopover);\n      cellPopover.open();\n    }\n  }\n\n  private updateAdaptTableFilters(): void {\n    const globalFilter = this.adaptTable.filters.global;\n\n    this.adaptTable.filters = this.areUserFiltersApplied() ? { dummyFilter: {} } : {};\n\n    if (globalFilter) {\n      this.adaptTable.filters.global = globalFilter;\n    }\n  }\n\n  private updateToolbarItems(): void {\n    if (this.adaptTable) {\n      const toolbarComponent = this.adaptTable.toolbarComponent as AdaptTableToolbarComponent;\n\n      const filterSection = toolbarComponent.toolbarContentItems.find(\n        (toolbarContentItem) => toolbarContentItem.adaptToolbarItem === ToolbarItemsByPriority.FILTER\n      );\n\n      setTimeout(() => {\n        // don't update toolbar items when filter is hidden\n        if (filterSection && !filterSection.itemContext.hidden) {\n          toolbarComponent.updateToolbarItems();\n        }\n      });\n    }\n  }\n\n  private getExportSelectedText(selectedItems: IRowDataItem[]): string {\n    return selectedItems.length > 1 ? this.exportSelectedRowsText : this.exportSelectedRowText;\n  }\n\n  private getFiltersRequiredMessage(requiredFiltersCount: number): string {\n    return requiredFiltersCount > 1\n      ? this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.record-grid.require-filtering.missing-filters-warning.message',\n          {\n            requiredFiltersCount: requiredFiltersCount\n          }\n        )\n      : this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.record-grid.require-filtering.missing-filter-warning.message'\n        );\n  }\n}\n","<adapt-table\n  #adaptTable\n  rxCardLayout\n  scrollHeight=\"flex\"\n  (changedCardLayout)=\"onChangedCardLayout($event)\"\n  [cardLayoutWidth]=\"state.cardLayoutWidth\"\n  [cardLayoutFieldsHeaderTemplate]=\"cardLayoutFieldsHeaderTemplate\"\n  [cardLayoutFieldsDataCellTemplate]=\"cardLayoutFieldsDataCellTemplate\"\n  [cardLayoutValuesDataCellTemplate]=\"cardLayoutValuesDataCellTemplate\"\n  [cardLayoutValuesHeaderTemplate]=\"cardLayoutValuesHeaderTemplate\"\n  [cardLayoutRecordGridElementRef]=\"elementRef\"\n  [cardLayoutGetDataCellClass]=\"getDataCellClassBind\"\n  [value]=\"adaptTableConfig.data\"\n  [columns]=\"adaptTableConfig.cardLayoutColumns || adaptTableConfig.columns\"\n  [rows]=\"adaptTableConfig.rows\"\n  [first]=\"adaptTableConfig.first\"\n  [scrollable]=\"adaptTableConfig.scrollable\"\n  [sortable]=\"true\"\n  [rowExpandMode]=\"\"\n  [sortMode]=\"'multiple'\"\n  [resizableColumns]=\"true\"\n  [columnResizeMode]=\"adaptTableConfig.columnResizeMode\"\n  [selectionMode]=\"adaptTableConfig.rowSelectionMode\"\n  [selection]=\"adaptTableConfig.selectedItems\"\n  [toolbarConfig]=\"adaptTableConfig.toolbarConfig\"\n  [filterable]=\"adaptTableConfig.filterable\"\n  [filters]=\"adaptTableConfig.filters\"\n  [multiSortMeta]=\"adaptTableConfig.multiSortMeta\"\n  [dataKey]=\"adaptTableConfig.primaryKey\"\n  [bordered]=\"adaptTableConfig.bordered\"\n  [totalRecords]=\"adaptTableConfig.totalRecords\"\n  [totalRecordsInGroup]=\"state.expandGroups ? adaptTableConfig.totalRecords : 0\"\n  [lazy]=\"true\"\n  [lazyLoadOnInit]=\"false\"\n  [loading]=\"adaptTableConfig.isLoadingData\"\n  [enableInfiniteScrolling]=\"true\"\n  [expandedGroupsKeys]=\"adaptTableConfig.expandedGroupsKeys\"\n  [loadingMore]=\"adaptTableConfig.isLoadingMoreData\"\n  [suppressTooltip]=\"false\"\n  [virtualScroll]=\"adaptTableConfig.virtualScroll\"\n  [virtualRowHeight]=\"adaptTableConfig.virtualRowHeight\"\n  (selectionChange)=\"onRowsSelectionChange($event)\"\n  (onSort)=\"onSort($event)\"\n  (onLazyLoad)=\"onLazyLoad($event)\"\n  (onColReorder)=\"onColReorder($event)\"\n  [striped]=\"adaptTableConfig.striped\"\n  [texts]=\"adaptTableConfig.texts\"\n  (onColResize)=\"onColumnResize()\"\n  (export)=\"onExport($event)\"\n  [selectedFilteredRowsCount]=\"selectedFilteredRowsCount\"\n  [headerSelectionMode]=\"adaptTableHeaderSelectionMode\"\n  (onHeaderCheckboxToggle)=\"handleHeaderCheckboxToggle($event)\"\n></adapt-table>\n\n<ng-template #visibleColumnsMenuTemplate>\n  <adapt-rx-search\n    [(ngModel)]=\"columnSearchText\"\n    [placeholder]=\"\n      'com.bmc.arsys.rx.client.view-components.record-grid.visible-columns-menu.search.placeholder' | translate\n    \"\n    [autofocus]=\"true\"\n    (ngModelChange)=\"onSearchColumns()\"\n  >\n  </adapt-rx-search>\n  <div\n    class=\"dropdown-item visible-columns-item px-3\"\n    *ngFor=\"let column of filteredVisibleColumns; trackBy: trackByColumnField\"\n    (click)=\"$event.stopPropagation()\"\n  >\n    <adapt-rx-checkbox\n      class=\"m-0 adapt-table-toolbar__column-visibility-control\"\n      [label]=\"column.header || column.fallbackTitle\"\n      [ngModel]=\"!column.hidden\"\n      (ngModelChange)=\"onColumnVisibilityChange($event, column)\"\n    ></adapt-rx-checkbox>\n  </div>\n  <adapt-empty-state\n    *ngIf=\"!filteredVisibleColumns.length\"\n    [type]=\"'search'\"\n    [label]=\"'com.bmc.arsys.rx.client.view-components.record-grid.visible-columns-menu.empty.label' | translate\"\n  >\n  </adapt-empty-state>\n</ng-template>\n\n<ng-template #rightCustomSectionTemplate>\n  <div class=\"px-2\" rx-id=\"selected-row-count\">\n    <ng-container *ngIf=\"isTotalRecordCountKnown\">\n      {{ getMultipleRowsSelectedText() }}\n    </ng-container>\n\n    <ng-container *ngIf=\"!isTotalRecordCountKnown\">\n      <div class=\"d-flex align-items-center\">\n        {{ getMultipleRowsSelectedTextFirstPart() }}\n        <button type=\"button\" class=\"btn btn-link p-0 mx-1\" (click)=\"loadTotalRowCount()\">\n          {{ getLoadRecordCountLinkText() }}\n        </button>\n        {{ getMultipleRowsSelectedTextSecondPart() }}\n      </div>\n    </ng-container>\n  </div>\n</ng-template>\n\n<ng-template #leftCustomSectionTemplate>\n  <div [adaptSubnav] *ngIf=\"shouldDisplayActionButtons\" class=\"pl-1 w-100 align-items-center\">\n    <div [adaptSubnavItem]=\"actionButtonTemplate\" *ngFor=\"let actionButton of actionButtons\">\n      <ng-template #actionButtonTemplate let-hidden>\n        <rx-action-button\n          class=\"m-1\"\n          [guid]=\"actionButton.guid\"\n          [config]=\"getActionButtonConfig(hidden, actionButton.config)\"\n          [runtimeViewModelApi]=\"actionButton.runtimeViewModelApi\"\n        ></rx-action-button>\n      </ng-template>\n    </div>\n\n    <div [adaptSubnavDropdown]>\n      <button type=\"button\" class=\"btn btn-secondary btn-xs d-icon-triangle_down ml-1\"></button>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #filterTemplate let-context>\n  <button\n    type=\"button\"\n    class=\"btn btn-link d-icon-refresh grid-toolbar-icon ml-2 p-1\"\n    [ngClass]=\"{ 'd-block': context.hidden }\"\n    rx-id=\"refresh-button\"\n    [attr.aria-label]=\"'com.bmc.arsys.rx.client.common.refresh.label' | translate\"\n    (click)=\"onRefreshClick()\"\n  ></button>\n\n  <adapt-advanced-filter\n    #adaptAdvancedFilter\n    *ngIf=\"state.enableFiltering\"\n    class=\"ml-2\"\n    [ngClass]=\"{ 'd-inline-block': context.hidden, 'd-block': !context.hidden }\"\n    [appendDropdownToBody]=\"true\"\n    [texts]=\"state.advancedFiltering.filterTexts\"\n    [showAnchorButtonLabel]=\"!context.collapsed\"\n    [filterOptions]=\"state.advancedFiltering.filterOptions\"\n    (selectedFiltersChange)=\"onAdvancedFiltersChange($event)\"\n    [selectedFilters]=\"state.advancedFiltering.selectedFilters\"\n    [savedFilters]=\"state.advancedFiltering.savedFilters\"\n    [enableSavedFilters]=\"!!guid && state.enableFilterPresets\"\n    (deleteSavedFilter)=\"onDeleteSavedFilterPreset($event)\"\n    (createNewFilter)=\"onCreateNewFilterPreset($event)\"\n    (updateSavedFilter)=\"onUpdateSavedFilterPreset($event)\"\n    [activeSavedFilter]=\"state.advancedFiltering.activeSavedFilter\"\n    (activeSavedFilterChange)=\"onActiveSavedAdvancedFilterChange($event)\"\n    (beforeActiveSavedFilterChange)=\"onBeforeActiveSavedFilterChange($event)\"\n    (editSavedFilterClick)=\"onEditSavedFilterClick($event)\"\n    [isLoading]=\"state.advancedFiltering.isLoading\"\n    [selectedFiltersIndicationStyle]=\"'mark'\"\n    (filterExpressionTagsChanged)=\"onAdvancedFilterExpressionTagsChanged($event)\"\n    [applyFiltersByUserAction]=\"true\"\n  ></adapt-advanced-filter>\n\n  <span\n    *ngIf=\"(context.collapsed || context.hidden) && state.advancedFiltering.toolbarTags.length\"\n    class=\"btn-link ml-1\"\n    >{{\n      'com.bmc.arsys.rx.client.view-components.record-grid.filters.number-of-active-filters.label'\n        | translate: { count: state.advancedFiltering.toolbarTags.length }\n    }}</span\n  >\n\n  <rx-filter-tags\n    class=\"ml-2\"\n    [hidden]=\"context.collapsed || context.hidden\"\n    [tags]=\"state.advancedFiltering.toolbarTags\"\n    [tagsLimit]=\"state.filterTagsLimit\"\n    (removeTag)=\"onRemoveFilterTag($event)\"\n  ></rx-filter-tags>\n</ng-template>\n\n<ng-template #cellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <div\n    *ngIf=\"column.cellDisplayProperties\"\n    class=\"rx-custom-cell rx-ellipsis\"\n    [rxCellDisplayProps]=\"column.cellDisplayProperties\"\n    [rxCellDisplayPropsBadgeElem]=\"badgeElem\"\n    [rxCellDisplayPropsDataItem]=\"dataItem\"\n    #popoverAnchor=\"adaptPopover\"\n    [adaptPopover]=\"filterButton\"\n    [autoClose]=\"false\"\n    [popoverClass]=\"'table-filtering'\"\n    [triggers]=\"'manual'\"\n    [appendToBody]=\"true\"\n    [placement]=\"'top'\"\n    [class.rx-selected-custom-cell]=\"isCellSelected(popoverAnchor)\"\n    (click)=\"onCellClick($event, [column], dataItem, popoverAnchor)\"\n    (mouseover)=\"onCellMouseOver($event)\"\n  >\n    <span #badgeElem (click)=\"$event.stopPropagation()\" [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      <ng-template\n        [ngTemplateOutlet]=\"column.customTemplate || defaultCellTemplate\"\n        [ngTemplateOutletContext]=\"{ column: column, dataItem: dataItem }\"\n      >\n      </ng-template>\n    </span>\n  </div>\n\n  <div\n    *ngIf=\"!column.cellDisplayProperties\"\n    class=\"rx-custom-cell rx-ellipsis\"\n    #popoverAnchor=\"adaptPopover\"\n    [adaptPopover]=\"filterButton\"\n    [autoClose]=\"false\"\n    [popoverClass]=\"'table-filtering'\"\n    [triggers]=\"'manual'\"\n    [appendToBody]=\"true\"\n    [placement]=\"'top'\"\n    [class.rx-selected-custom-cell]=\"isCellSelected(popoverAnchor)\"\n    (click)=\"onCellClick($event, [column], dataItem, popoverAnchor)\"\n    (mouseover)=\"onCellMouseOver($event)\"\n  >\n    <span (click)=\"$event.stopPropagation()\" [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      <ng-template\n        [ngTemplateOutlet]=\"column.customTemplate || defaultCellTemplate\"\n        [ngTemplateOutletContext]=\"{ column: column, dataItem: dataItem }\"\n      >\n      </ng-template>\n    </span>\n  </div>\n</ng-template>\n\n<ng-template #defaultCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <ng-container\n    *ngIf=\"\n      (!column.clickable ||\n        (column.clickableWithHref &&\n          !dataItem[column.field + '$ROUTER_LINK$'] &&\n          !dataItem[column.field + '$LAUNCH_URL$'])) &&\n      !column.isDownloadableAttachment\n    \"\n  >\n    <span [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\"> {{ getCellValue(dataItem, column) }}</span>\n  </ng-container>\n\n  <a\n    tabindex=\"0\"\n    class=\"attachment-link\"\n    *ngIf=\"!column.clickable && column.isDownloadableAttachment\"\n    (click)=\"downloadAttachment(dataItem, column, getCellValue(dataItem, column))\"\n    (keydown)=\"downloadAttachment(dataItem, column, getCellValue(dataItem, column), $event)\"\n  >\n    <span [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      {{ getCellValue(dataItem, column) }}\n    </span>\n  </a>\n\n  <a\n    tabindex=\"0\"\n    class=\"no-href-link\"\n    *ngIf=\"column.clickable && !column.clickableWithHref\"\n    (click)=\"gridEvents.cellClick(dataItem, column.field)\"\n    (keydown)=\"gridEvents.cellKeyDown($event, dataItem, column.field)\"\n  >\n    <span [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      {{ getCellValue(dataItem, column) }}\n    </span>\n  </a>\n\n  <a\n    *ngIf=\"column.clickableWithHref && dataItem[column.field + '$ROUTER_LINK$']\"\n    [routerLink]=\"'/' + dataItem[column.field + '$ROUTER_LINK$']\"\n    [queryParams]=\"dataItem[column.field + '$QUERY_PARAMS$']\"\n  >\n    <span [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      {{ getCellValue(dataItem, column) }}\n    </span>\n  </a>\n\n  <a\n    *ngIf=\"column.clickableWithHref && dataItem[column.field + '$LAUNCH_URL$']\"\n    [href]=\"dataItem[column.field + '$LAUNCH_URL$']\"\n    [target]=\"dataItem[column.field + '$TARGET$']\"\n  >\n    <span [ngClass]=\"{ 'rx-cell-wrap': column.wrapText }\">\n      {{ getCellValue(dataItem, column) }}\n    </span>\n  </a>\n</ng-template>\n\n<ng-template #cardLayoutFieldsHeaderTemplate let-column=\"column\">\n  <rx-card-layout-cell-header\n    [title]=\"column.header || column.fallbackTitle\"\n    [columns]=\"adaptTableConfig.columns\"\n    [adaptTable]=\"adaptTable\"\n    [openDialog]=\"openSortByDialog\"\n    (sort)=\"onSortCards($event)\"\n  ></rx-card-layout-cell-header>\n</ng-template>\n\n<ng-template #cardLayoutValuesHeaderTemplate let-column=\"column\">\n  <rx-card-layout-cell-header\n    [title]=\"column.header || column.fallbackTitle\"\n    [columns]=\"adaptTableConfig.columns\"\n    [adaptTable]=\"adaptTable\"\n    [openDialog]=\"openSortByDialog\"\n    (sort)=\"onSortCards($event)\"\n  ></rx-card-layout-cell-header>\n</ng-template>\n\n<ng-template #cardLayoutFieldsDataCellTemplate>\n  <div class=\"rx-card-layout-cell\" (click)=\"onCellClick($event)\">\n    <div\n      class=\"rx-card-layout-cell-item\"\n      *ngFor=\"let column of visibleColumns; trackBy: trackByColumnField\"\n      [attr.data-testid]=\"column.testId + '-name'\"\n    >\n      {{ column.header || column.fallbackTitle }}:\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #cardLayoutValuesDataCellTemplate let-dataItem=\"dataItem\">\n  <div class=\"rx-card-layout-cell-values rx-card-layout-cell\">\n    <div\n      *ngFor=\"let column of visibleColumns; trackBy: trackByColumnField\"\n      class=\"rx-card-layout-cell-item\"\n      [attr.data-testid]=\"column.testId + '-value'\"\n    >\n      <div *ngIf=\"column.isRowActionsColumn\">\n        <ng-container\n          [ngTemplateOutlet]=\"cardLayoutRowActionButtonsTemplate\"\n          [ngTemplateOutletContext]=\"{ dataItem: dataItem }\"\n        ></ng-container>\n      </div>\n      <div\n        *ngIf=\"\n          (!column.clickable ||\n            (column.clickableWithHref &&\n              !dataItem[column.field + '$ROUTER_LINK$'] &&\n              !dataItem[column.field + '$LAUNCH_URL$'])) &&\n          !column.isDownloadableAttachment &&\n          !column.isRowActionsColumn\n        \"\n      >\n        {{ getCellValue(dataItem, column) }}\n      </div>\n      <a\n        *ngIf=\"!column.clickable && column.isDownloadableAttachment\"\n        tabindex=\"0\"\n        class=\"attachment-link\"\n        (click)=\"downloadAttachment(dataItem, column, getCellValue(dataItem, column))\"\n        (keydown)=\"downloadAttachment(dataItem, column, getCellValue(dataItem, column), $event)\"\n      >\n        {{ getCellValue(dataItem, column) }}\n      </a>\n\n      <a\n        tabindex=\"0\"\n        *ngIf=\"column.clickable && !column.clickableWithHref\"\n        class=\"no-href-link\"\n        (click)=\"gridEvents.cellClick(dataItem, column.field)\"\n        (keydown)=\"gridEvents.cellKeyDown($event, dataItem, column.field)\"\n      >\n        {{ getCellValue(dataItem, column) }}\n      </a>\n\n      <a\n        *ngIf=\"column.clickableWithHref && dataItem[column.field + '$ROUTER_LINK$']\"\n        [routerLink]=\"'/' + dataItem[column.field + '$ROUTER_LINK$']\"\n        [queryParams]=\"dataItem[column.field + '$QUERY_PARAMS$']\"\n      >\n        {{ getCellValue(dataItem, column) }}\n      </a>\n\n      <a\n        *ngIf=\"column.clickableWithHref && dataItem[column.field + '$LAUNCH_URL$']\"\n        [href]=\"dataItem[column.field + '$LAUNCH_URL$']\"\n        [target]=\"dataItem[column.field + '$TARGET$']\"\n      >\n        {{ getCellValue(dataItem, column) }}\n      </a>\n    </div>\n  </div>\n\n  <button\n    *ngIf=\"isFilterBySelectionButtonVisible\"\n    adapt-button\n    rx-id=\"filter-by-selection-button\"\n    class=\"btn btn-link d-icon-filter_adapt filter-by-selection-icon\"\n    (click)=\"onFilterBySelection($event, visibleColumns, dataItem)\"\n  ></button>\n\n  <button\n    class=\"btn btn-link d-icon-pop_up record-details-icon\"\n    rx-id=\"show-record-details-button\"\n    [attr.aria-label]=\"\n      'com.bmc.arsys.rx.client.view-components.record-grid.cards.record-details.button.label' | translate\n    \"\n    (click)=\"openRowDetails(adaptTableConfig.columns, dataItem)\"\n  ></button>\n</ng-template>\n\n<ng-template #cardLayoutRowDetailsTemplate let-close=\"close\" let-getData=\"getData\">\n  <div class=\"modal-body rx-record-details\">\n    <div class=\"row mb-3\" *ngFor=\"let column of getData().columns\">\n      <div class=\"col-sm-4 font-weight-bold rx-text-break\">{{ column.header || column.fallbackTitle }}:</div>\n\n      <div class=\"col-sm-8 rx-text-break\" *ngIf=\"!column.isDownloadableAttachment && !column.isRowActionsColumn\">\n        {{ getCellValue(getData().rowDataItem, column) }}\n      </div>\n\n      <div class=\"col-sm-8\" *ngIf=\"column.isDownloadableAttachment\">\n        <a\n          tabindex=\"0\"\n          class=\"row-details-attachment-link\"\n          (click)=\"downloadAttachment(getData().rowDataItem, column, getCellValue(getData().rowDataItem, column))\"\n          (keydown)=\"\n            downloadAttachment(getData().rowDataItem, column, getCellValue(getData().rowDataItem, column), $event)\n          \"\n        >\n          {{ getCellValue(getData().rowDataItem, column) }}</a\n        >\n      </div>\n\n      <div class=\"col-sm-8\" *ngIf=\"column.isRowActionsColumn\">\n        <ng-container\n          [ngTemplateOutlet]=\"cardLayoutRowActionButtonsTemplate\"\n          [ngTemplateOutletContext]=\"{ dataItem: getData().rowDataItem }\"\n        ></ng-container>\n      </div>\n    </div>\n  </div>\n  <div class=\"modal-footer\">\n    <button type=\"button\" class=\"btn btn-secondary btn-sm\" (click)=\"close()\">\n      {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n    </button>\n  </div>\n</ng-template>\n\n<ng-template #filterButton>\n  <button\n    adapt-button\n    btn-type=\"tertiary\"\n    size=\"small\"\n    class=\"d-icon-filter_adapt p-0\"\n    (click)=\"applyFilterBySelection()\"\n  ></button>\n</ng-template>\n\n<ng-template #rowActionButtonsTemplate let-dataItem=\"dataItem\">\n  <div class=\"dropdown dropdown-kabob\" adaptDropdown appendToBody=\"true\" (onOpen)=\"onRowActionOpen(dataItem)\">\n    <button id=\"row-actions-dropdown-button\" class=\"dropdown-kabob-btn\" adaptDropdownToggle></button>\n    <div class=\"dropdown-menu\" aria-labelledby=\"row-actions-dropdown-button\" adaptDropdownMenu>\n      <rx-action-button\n        class=\"action-button-list\"\n        *ngFor=\"let rowActionButton of rowActionButtons\"\n        [guid]=\"rowActionButton.guid\"\n        [config]=\"rowActionButton.config\"\n        [runtimeViewModelApi]=\"rowActionButton.runtimeViewModelApi\"\n      ></rx-action-button>\n\n      <div class=\"empty-list-label pl-3\">\n        {{ 'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.no-actions-available.label' | translate }}\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #cardLayoutRowActionButtonsTemplate let-dataItem=\"dataItem\">\n  <div\n    class=\"dropdown mb-1\"\n    adaptDropdown\n    appendToBody=\"true\"\n    (click)=\"$event.stopPropagation()\"\n    (onOpen)=\"onRowActionOpen(dataItem)\"\n  >\n    <button id=\"card-layout-dropdown-button\" class=\"btn btn-secondary btn-xs\" size=\"xtra-small\" adaptDropdownToggle>\n      {{ 'com.bmc.arsys.rx.client.view-components.record-grid-row-actions.dropdown.label' | translate }}\n    </button>\n    <div class=\"dropdown-menu\" aria-labelledby=\"card-layout-dropdown-button\" adaptDropdownMenu>\n      <rx-action-button\n        class=\"row-actions-dropdown-item\"\n        *ngFor=\"let rowActionButton of rowActionButtons\"\n        [guid]=\"rowActionButton.guid\"\n        [config]=\"rowActionButton.config\"\n        [runtimeViewModelApi]=\"rowActionButton.runtimeViewModelApi\"\n      ></rx-action-button>\n    </div>\n  </div>\n</ng-template>\n\n<rx-advanced-filtering-fields-provider\n  [namedFilterOptionsGetter]=\"getNamedFilterOptions\"\n></rx-advanced-filtering-fields-provider>\n"]}