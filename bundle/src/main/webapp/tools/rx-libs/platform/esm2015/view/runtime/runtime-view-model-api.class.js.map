{"version":3,"file":"runtime-view-model-api.class.js","sourceRoot":"","sources":["../../../../../../libs/platform/view/runtime/runtime-view-model-api.class.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;;AAO3C,MAAM,OAAO,mBAAmB;IAG9B,KAAK;QACH,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAC/B,CAAC;IAED,IAAI,CAAC,KAAuB;QAC1B,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;YAC1B,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;SAC/B;IACH,CAAC;IAED,kBAAkB,CAAC,IAAY,EAAE,SAAiB;QAChD,OAAO,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IACnE,CAAC;IAED,MAAM,CAAC,cAAwB;QAC7B,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;IACtD,CAAC;IAED,KAAK;QACH,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,CAAC;IACvC,CAAC;IAED,sBAAsB;QACpB,OAAO,IAAI,CAAC,gBAAgB,CAAC,sBAAsB,EAAE,CAAC;IACxD,CAAC;IAED,eAAe,CACb,sBAA8B,EAC9B,cAAsB,EACtB,iBAAmD;QAEnD,OAAO,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,sBAAsB,EAAE,cAAc,EAAE,iBAAiB,CAAC,CAAC;IAC1G,CAAC;IAED,gBAAgB,CAAC,cAAsB;QACrC,OAAO,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,cAAc,CAAC,CAAC;IAChE,CAAC;IAED,wBAAwB,CACtB,cAAsB,EACtB,iBAAmD;QAEnD,OAAO,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,CAAC,cAAc,EAAE,iBAAiB,CAAC,CAAC;IAC3F,CAAC;IAED,cAAc,CAAC,cAAsB;QACnC,OAAO,IAAI,CAAC,gBAAgB,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;IAC9D,CAAC;IAED,eAAe,CAAC,sBAA8B;QAC5C,OAAO,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC,sBAAsB,CAAC,CAAC;IACvE,CAAC;;gHAtDU,mBAAmB;oHAAnB,mBAAmB;2FAAnB,mBAAmB;kBAD/B,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IViewInputParams, IViewPresetsByViewComponentGuid } from '@helix/platform/view/api';\nimport { Observable } from 'rxjs';\nimport { IRuntimeViewOutputParameter } from './interfaces/index';\nimport { RuntimeViewModel } from './runtime-view.model';\n\n@Injectable()\nexport class RuntimeViewModelApi {\n  private runtimeViewModel: RuntimeViewModel;\n\n  clear() {\n    this.runtimeViewModel = null;\n  }\n\n  init(model: RuntimeViewModel) {\n    if (!this.runtimeViewModel) {\n      this.runtimeViewModel = model;\n    }\n  }\n\n  triggerViewActions(guid: string, eventName: string): Promise<void> {\n    return this.runtimeViewModel.triggerViewActions(guid, eventName);\n  }\n\n  cancel(skipDirtyCheck?: boolean): Observable<never> {\n    return this.runtimeViewModel.cancel(skipDirtyCheck);\n  }\n\n  close(): Observable<IRuntimeViewOutputParameter> {\n    return this.runtimeViewModel.close();\n  }\n\n  getViewInputParameters(): IViewInputParams {\n    return this.runtimeViewModel.getViewInputParameters();\n  }\n\n  applyViewPreset(\n    viewPresetSelectorGuid: string,\n    viewPresetGuid: string,\n    sharedViewPresets?: IViewPresetsByViewComponentGuid\n  ): Observable<never> {\n    return this.runtimeViewModel.applyViewPreset(viewPresetSelectorGuid, viewPresetGuid, sharedViewPresets);\n  }\n\n  deleteViewPreset(viewPresetGuid: string): Observable<never> {\n    return this.runtimeViewModel.deleteViewPreset(viewPresetGuid);\n  }\n\n  discardViewPresetChanges(\n    viewPresetGuid: string,\n    sharedViewPresets?: IViewPresetsByViewComponentGuid\n  ): Observable<never> {\n    return this.runtimeViewModel.discardViewPresetChanges(viewPresetGuid, sharedViewPresets);\n  }\n\n  saveViewPreset(viewPresetGuid: string): Observable<never> {\n    return this.runtimeViewModel.saveViewPreset(viewPresetGuid);\n  }\n\n  shareViewPreset(viewPresetSelectorGuid: string): Observable<IViewPresetsByViewComponentGuid> {\n    return this.runtimeViewModel.shareViewPreset(viewPresetSelectorGuid);\n  }\n}\n"]}