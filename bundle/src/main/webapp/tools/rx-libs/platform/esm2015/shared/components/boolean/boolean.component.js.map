{"version":3,"file":"boolean.component.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/components/boolean/boolean.component.ts","../../../../../../../libs/platform/shared/components/boolean/boolean.component.html"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,UAAU,EACV,YAAY,EACZ,QAAQ,EACR,KAAK,EAEL,MAAM,EACN,SAAS,EACT,YAAY,EACb,MAAM,eAAe,CAAC;AACvB,OAAO,EAAe,iBAAiB,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC3E,OAAO,EAAE,oBAAoB,EAAE,MAAM,uBAAuB,CAAC;AAC7D,OAAO,EAAE,aAAa,EAAE,MAAM,gCAAgC,CAAC;;;;;;AAc/D,MAAM,OAAO,kBAAmB,SAAQ,aAAsB;IAwB5D,YAAoB,QAAkB;QACpC,KAAK,EAAE,CAAC;QADU,aAAQ,GAAR,QAAQ,CAAU;QAPtC,WAAM,GAAG,IAAI,YAAY,EAAc,CAAC;IASxC,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,OAAsB,CAAC;IACrE,CAAC;IAED,aAAa,CAAC,KAAc;QAC1B,OAAO,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC;IACxD,CAAC;IAED,YAAY,CAAC,KAAiB;QAC5B,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,aAAa,KAAK,KAAK,CAAC,aAAa,CAAC,EAAE;YAC1G,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACzB;IACH,CAAC;IAED,QAAQ,CAAC,KAAc;QACrB,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,EAAE;YACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;SACnB;aAAM;YACL,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACpB;IACH,CAAC;;+GAjDU,kBAAkB;mGAAlB,kBAAkB,wNARlB;QACT;YACE,OAAO,EAAE,iBAAiB;YAC1B,WAAW,EAAE,kBAAkB;YAC/B,KAAK,EAAE,IAAI;SACZ;KACF,sDAqBa,oBAAoB,2BAAU,UAAU,oDC9CxD,+yDA+DA;2FDpCa,kBAAkB;kBAZ9B,SAAS;mBAAC;oBACT,QAAQ,EAAE,YAAY;oBACtB,WAAW,EAAE,0BAA0B;oBACvC,SAAS,EAAE,CAAC,0BAA0B,CAAC;oBACvC,SAAS,EAAE;wBACT;4BACE,OAAO,EAAE,iBAAiB;4BAC1B,WAAW,oBAAoB;4BAC/B,KAAK,EAAE,IAAI;yBACZ;qBACF;iBACF;+FAGC,uBAAuB;sBADtB,KAAK;gBAIN,QAAQ;sBADP,KAAK;gBAIN,UAAU;sBADT,KAAK;gBAIN,KAAK;sBADJ,KAAK;gBAIN,OAAO;sBADN,KAAK;gBAIN,MAAM;sBADL,MAAM;gBAIP,OAAO;sBADN,YAAY;uBAAC,oBAAoB,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE","sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Injector,\n  Input,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChildren\n} from '@angular/core';\nimport { FormControl, NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';\nimport { AdaptButtonComponent } from '@bmc-ux/adapt-angular';\nimport { ValueAccessor } from '../form-builder/value-accessor';\n\n@Component({\n  selector: 'rx-boolean',\n  templateUrl: './boolean.component.html',\n  styleUrls: ['./boolean.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RxBooleanComponent,\n      multi: true\n    }\n  ]\n})\nexport class RxBooleanComponent extends ValueAccessor<boolean> implements OnInit {\n  @Input()\n  shouldDisplayAsCheckbox: boolean;\n\n  @Input()\n  required: boolean;\n\n  @Input()\n  isDisabled: boolean;\n\n  @Input()\n  label: string;\n\n  @Input()\n  tooltip: string;\n\n  @Output()\n  rxBlur = new EventEmitter<FocusEvent>();\n\n  @ViewChildren(AdaptButtonComponent, { read: ElementRef })\n  buttons: QueryList<ElementRef>;\n\n  control: FormControl;\n\n  constructor(private injector: Injector) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.control = this.injector.get(NgControl).control as FormControl;\n  }\n\n  getButtonType(value: boolean): string {\n    return value === this.value ? 'primary' : 'secondary';\n  }\n\n  onButtonBlur(event: FocusEvent): void {\n    if (!event.relatedTarget || !this.buttons.find((element) => element.nativeElement === event.relatedTarget)) {\n      this.onTouched();\n      this.rxBlur.emit(event);\n    }\n  }\n\n  setValue(value: boolean): void {\n    if (this.value === value) {\n      this.value = null;\n    } else {\n      this.value = value;\n    }\n  }\n}\n","<div *ngIf=\"!shouldDisplayAsCheckbox\" [class.has-danger]=\"adaptRxFeedbackRef.hasUIErrorState\">\n  <adapt-rx-control-label [label]=\"label\" [showRequiredLabel]=\"required\"></adapt-rx-control-label>\n\n  <div\n    class=\"btn-group\"\n    [attr.tabindex]=\"isDisabled ? 0 : undefined\"\n    [attr.aria-label]=\"isDisabled ? label + value : label\"\n    [class.focusable]=\"isDisabled\"\n  >\n    <button\n      adapt-button\n      size=\"small\"\n      [disabled]=\"isDisabled\"\n      [btn-type]=\"getButtonType(true)\"\n      (click)=\"setValue(true)\"\n      [attr.aria-label]=\"'com.bmc.arsys.rx.client.common.true' | translate\"\n      [attr.aria-pressed]=\"value === true\"\n      (blur)=\"onButtonBlur($event)\"\n      rx-id=\"true-button\"\n    >\n      <span class=\"d-icon-check_adapt\"></span>\n    </button>\n\n    <button\n      adapt-button\n      size=\"small\"\n      [disabled]=\"isDisabled\"\n      [btn-type]=\"getButtonType(false)\"\n      (click)=\"setValue(false)\"\n      [attr.aria-label]=\"'com.bmc.arsys.rx.client.common.false' | translate\"\n      [attr.aria-pressed]=\"value === false\"\n      (blur)=\"onButtonBlur($event)\"\n      rx-id=\"false-button\"\n    >\n      <span class=\"d-icon-circle_slash_o\"></span>\n    </button>\n  </div>\n\n  <adapt-rx-feedback\n    #adaptRxFeedbackRef\n    [errors]=\"control.errors\"\n    [controlTouched]=\"control.touched\"\n  ></adapt-rx-feedback>\n</div>\n\n<adapt-rx-checkbox\n  *ngIf=\"shouldDisplayAsCheckbox\"\n  [required]=\"required\"\n  [readonly]=\"isDisabled\"\n  [label]=\"label\"\n  [(ngModel)]=\"value\"\n  (onBlur)=\"onTouched(); rxBlur.emit($event)\"\n  [tooltip]=\"\n    tooltip\n      ? {\n          iconName: 'question_circle_o',\n          content: tooltip,\n          popoverMode: true\n        }\n      : null\n  \"\n>\n</adapt-rx-checkbox>\n"]}