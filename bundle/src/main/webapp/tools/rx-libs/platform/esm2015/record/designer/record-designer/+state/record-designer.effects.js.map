{"version":3,"file":"record-designer.effects.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/record/designer/record-designer/+state/record-designer.effects.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AAC9D,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAC;AACtD,OAAO,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;AACpC,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACvD,OAAO,EAAE,qBAAqB,EAAE,MAAM,4BAA4B,CAAC;AACnE,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,MAAM,wBAAwB,CAAC;AAClE,OAAO,EAAqB,oBAAoB,EAAE,yBAAyB,EAAE,MAAM,4BAA4B,CAAC;AAChH,OAAO,EAAE,oBAAoB,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AACnG,OAAO,KAAK,qBAAqB,MAAM,2BAA2B,CAAC;AACnE,OAAO,EACL,gBAAgB,EAChB,uBAAuB,EACvB,sBAAsB,EACtB,yBAAyB,EAC1B,MAAM,6BAA6B,CAAC;AACrC,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAC3E,OAAO,EAAE,+BAA+B,EAAE,MAAM,8CAA8C,CAAC;AAE/F,OAAO,EAAE,IAAI,EAAE,MAAM,MAAM,CAAC;AAC5B,OAAO,EAAE,uBAAuB,EAAE,MAAM,4BAA4B,CAAC;;;;;;;;;;;AAGrE,MAAM,OAAO,qBAAqB;IAChC,YACU,MAAkB,EAClB,QAAiB,EACjB,+BAAgE,EAChE,yBAAoD,EACpD,cAA8B,EAC9B,qBAA4C,EAC5C,gBAAkC,EAClC,aAA4B,EAC5B,uBAAgD;QARhD,WAAM,GAAN,MAAM,CAAY;QAClB,aAAQ,GAAR,QAAQ,CAAS;QACjB,oCAA+B,GAA/B,+BAA+B,CAAiC;QAChE,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,mBAAc,GAAd,cAAc,CAAgB;QAC9B,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,kBAAa,GAAb,aAAa,CAAe;QAC5B,4BAAuB,GAAvB,uBAAuB,CAAyB;QAG1D,wBAAmB,GAAG,YAAY,CAAC,GAAG,EAAE,CACtC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChB,MAAM,CAAC,qBAAqB,CAAC,IAAI,CAAC,EAClC,GAAG,CAAC,GAAG,EAAE,CAAC,qBAAqB,CAAC,cAAc,EAAE,CAAC,CAClD,CACF,CAAC;QAEF,oBAAe,GAAG,YAAY,CAAC,GAAG,EAAE,CAClC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChB,MAAM,CAAC,qBAAqB,CAAC,cAAc,CAAC,EAC5C,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,EAC1D,SAAS,CAAC,CAAC,CAAC,MAAM,EAAE,cAAc,CAAC,EAAE,EAAE,CACrC,cAAc;YACZ,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,GAAG,CAAC,cAAc,EAAE,EAAE,EAAE,IAAI,CAAC;YAC9D,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,MAAM,EAAE,CAC5C,EACD,GAAG,CAAC,CAAC,UAA6B,EAAE,EAAE,CACpC,qBAAqB,CAAC,qBAAqB,CAAC;YAC1C,UAAU;SACX,CAAC,CACH,CACF,CACF,CAAC;QAEF,2BAAsB,GAAG,YAAY,CAAC,GAAG,EAAE,CACzC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChB,MAAM,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,EACnD,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CACb,qBAAqB,CAAC,mBAAmB,CAAC;YACxC,6BAA6B,EAAE,IAAI,CAAC,uBAAuB,CAAC,gCAAgC,CAC1F,MAAM,CAAC,UAAU,CAClB;SACF,CAAC,CACH,CACF,CACF,CAAC;QAEF,yBAAoB,GAAG,YAAY,CAAC,GAAG,EAAE,CACvC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChB,MAAM,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,EACjD,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,EAC3D,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,eAAe,CAAC,EAAE,EAAE;YAChC,IAAI,YAAY,CAAC;YACjB,IAAI,eAAe,GAAG,CAAC,CAAC;YAExB,MAAM,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,OAAO,CACpD,2DAA2D,CAC5D,CAAC;YAEF,GAAG;gBACD,YAAY,GAAG,GAAG,gBAAgB,IAAI,EAAE,eAAe,EAAE,CAAC;aAC3D,QAAQ,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,EAAE;YAE/D,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;YAE3C,MAAM,aAAa,GACjB,IAAI,CAAC,+BAA+B,CAAC,0BAA0B,CAAC,MAAM,CAAC,YAAY,EAAE;gBACnF,EAAE,EAAE,IAAI;gBACR,UAAU,EAAE,IAAI;gBAChB,IAAI,EAAE,YAAY;gBAClB,IAAI;gBACJ,QAAQ,EAAE,IAAI;gBACd,QAAQ,EAAE,IAAI;gBACd,oBAAoB,EAAE,EAAE;gBACxB,8BAA8B,EAC5B,MAAM,CAAC,YAAY,KAAK,oBAAoB,CAAC,SAAS,CAAC,SAAS,CAAC,YAAY;oBAC3E,CAAC,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,eAAe,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE;oBACvE,CAAC,CAAC,IAAI;aACX,CAAC,CAAC;YAEL,OAAO,qBAAqB,CAAC,aAAa,CAAC,EAAE,aAAa,EAAE,CAAC,CAAC;QAChE,CAAC,CAAC,CACH,CACF,CAAC;QAEF,uBAAkB,GAAG,YAAY,CAAC,GAAG,EAAE,CACrC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChB,MAAM,CAAC,qBAAqB,CAAC,iCAAiC,CAAC,EAC/D,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,EAC3D,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,eAAe,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,EACnD,oBAAoB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,qBAAqB,EAAE,CAAC,CAAC,qBAAqB,CAAC,CAAC,EACzF,MAAM,CACJ,CAAC,eAAe,EAAE,EAAE,CAAC,eAAe,CAAC,qBAAqB,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,kBAAkB,CAAC,CAC3G,EACD,SAAS,CAAC,GAAG,EAAE,CACb,IAAI,CACF,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC;YAC1B,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,8CAA8C,CAAC;YACpF,UAAU,EAAE,QAAQ,CAAC,WAAW,CAAC,OAAO;YACxC,OAAO,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CACpC,gGAAgG,CACjG;SACF,CAAC,CACH,CACF,EACD,MAAM,CAAC,OAAO,CAAC,EACf,GAAG,CAAC,GAAG,EAAE,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,CAAC,CACrD,CACF,CAAC;QAEF,sBAAiB,GAAG,YAAY,CAAC,GAAG,EAAE,CACpC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChB,MAAM,CAAC,qBAAqB,CAAC,aAAa,CAAC,EAC3C,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,EAAE,IAAI,EAAE,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,CAAC,CACjG,CACF,CAAC;QAEF,uBAAkB,GAAG,YAAY,CAAC,GAAG,EAAE,CACrC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChB,MAAM,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,EAC/C,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,uBAAuB,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC,EAC1G,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,eAAe,EAAE,iBAAiB,CAAC,EAAE,EAAE;YACnD,MAAM,aAAa,GAAG,eAAe,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,KAAK,iBAAiB,CAAC,CAAC;YAE/F,MAAM,iBAAiB,mCAClB,aAAa,KAChB,EAAE,EAAE,IAAI,EACR,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,EACnC,IAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,gEAAgE,EAAE;oBACpG,SAAS,EAAE,aAAa,CAAC,IAAI;iBAC9B,CAAC,EACF,8BAA8B,kCACzB,aAAa,CAAC,8BAA8B,KAC/C,gBAAgB,EACd,aAAa,CAAC,YAAY,KAAK,oBAAoB,CAAC,aAAa,CAAC,SAAS;wBACzE,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,8BAA8B,CAAC,eAAe,EAAE,GAAG,EAAE,CAC3E,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAC9B;wBACH,CAAC,CAAC,IAAI,MAEb,CAAC;YAEF,OAAO,qBAAqB,CAAC,aAAa,CAAC,EAAE,aAAa,EAAE,iBAAiB,EAAE,CAAC,CAAC;QACnF,CAAC,CAAC,CACH,CACF,CAAC;QAEF,yBAAoB,GAAG,YAAY,CAAC,GAAG,EAAE,CACvC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChB,MAAM,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,EACjD,SAAS,CAAC,GAAG,EAAE,CACb,IAAI,CACF,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC;YAC1B,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,8CAA8C,CAAC;YACpF,UAAU,EAAE,QAAQ,CAAC,WAAW,CAAC,OAAO;YACxC,OAAO,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CACpC,sEAAsE,CACvE;SACF,CAAC,CACH,CACF,EACD,MAAM,CAAC,OAAO,CAAC,EACf,GAAG,CAAC,GAAG,EAAE,CAAC,qBAAqB,CAAC,yBAAyB,EAAE,CAAC,CAC7D,CACF,CAAC;QAEF,+BAA0B,GAAG,YAAY,CAAC,GAAG,EAAE,CAC7C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChB,MAAM,CAAC,qBAAqB,CAAC,yBAAyB,CAAC,EACvD,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,uBAAuB,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,yBAAyB,CAAC,CAAC,EAC1G,SAAS,CAAC,CAAC,CAAC,MAAM,EAAE,eAAe,EAAE,IAAI,CAAC,EAAE,EAAE;YAC5C,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;YAErD,MAAM,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,gBAAgB,EAAE,CAAC,eAAsC,EAAE,EAAE,CACxG,QAAQ,CAAC,eAAe,CAAC,aAAa,EAAE,KAAK,CAAC,EAAE,CAAC,CAClD,CAAC;YAEF,OAAO,eAAe;gBACpB,CAAC,CAAC,IAAI,CACF,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;oBACxB,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,8CAA8C,CAAC;oBACpF,UAAU,EAAE,QAAQ,CAAC,WAAW,CAAC,OAAO;oBACxC,OAAO,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CACpC,+EAA+E,EAC/E,EAAE,SAAS,EAAE,KAAK,CAAC,IAAI,EAAE,CAC1B;iBACF,CAAC,CACH,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,qBAAqB,CAAC,wBAAwB,EAAE,CAAC,CAAC;gBACrE,CAAC,CAAC,CAAC,qBAAqB,CAAC,0BAA0B,EAAE,CAAC,CAAC;QAC3D,CAAC,CAAC,CACH,CACF,CAAC;QAEF,2BAAsB,GAAG,YAAY,CAAC,GAAG,EAAE,CACzC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChB,MAAM,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,EACnD,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,sBAAsB,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,EAChG,GAAG,CAAC,GAAG,EAAE;YACP,IAAI,CAAC,qBAAqB,CAAC,iBAAiB,CAC1C,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,wEAAwE,EAAE;gBACtG,yBAAyB,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,iDAAiD,CAAC;aAC5G,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,EACF,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,cAAc,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,cAAc,CAAC,EAChE,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,cAAc,EAAE,QAAQ,CAAwB,EAAE,EAAE,CAChE,qBAAqB,CAAC,IAAI,CAAC;YACzB,OAAO,EAAE,EAAE,cAAc,EAAE,QAAQ,EAAE;SACtC,CAAC,CACH,CACF,CACF,CAAC;QAEF,wBAAmB,GAAG,YAAY,CAAC,GAAG,EAAE,CACtC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChB,MAAM,CAAC,qBAAqB,CAAC,mBAAmB,EAAE,qBAAqB,CAAC,0BAA0B,CAAC,EACnG,GAAG,CAAC,GAAG,EAAE,CAAC,qBAAqB,CAAC,sBAAsB,EAAE,CAAC,CAC1D,CACF,CAAC;QAEF,kBAAa,GAAG,YAAY,CAAC,GAAG,EAAE,CAChC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChB,MAAM,CAAC,qBAAqB,CAAC,mBAAmB,EAAE,qBAAqB,CAAC,qBAAqB,CAAC,EAC9F,GAAG,CAAC,GAAG,EAAE,CAAC,qBAAqB,CAAC,oBAAoB,EAAE,CAAC,CACxD,CACF,CAAC;QAEF,eAAU,GAAG,YAAY,CAAC,GAAG,EAAE,CAC7B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAChB,MAAM,CACJ,qBAAqB,CAAC,aAAa,EACnC,qBAAqB,CAAC,iCAAiC,EACvD,qBAAqB,CAAC,wBAAwB,EAC9C,qBAAqB,CAAC,0BAA0B,CACjD,EACD,GAAG,CAAC,GAAG,EAAE,CAAC,qBAAqB,CAAC,iBAAiB,EAAE,CAAC,CACrD,CACF,CAAC;IArOC,CAAC;;kHAXO,qBAAqB;sHAArB,qBAAqB;2FAArB,qBAAqB;kBADjC,UAAU","sourcesContent":["import { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Injectable } from '@angular/core';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RxNotificationService } from '@helix/platform/shared/api';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { IRecordDefinition, RX_RECORD_DEFINITION, RxRecordDefinitionService } from '@helix/platform/record/api';\nimport { distinctUntilChanged, filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport * as RecordDesignerActions from './record-designer.actions';\nimport {\n  bundleIdSelector,\n  definitionModelSelector,\n  definitionNameSelector,\n  selectedFieldGuidSelector\n} from './record-designer.selectors';\nimport { find, includes, isEmpty, isEqual, mapValues, some } from 'lodash';\nimport { RxFieldDefinitionManagerService } from '../services/field-definition-manager.service';\nimport { IIndexDefinitionModel, IRecordFieldDefinitionModel } from '../../record-designer.types';\nimport { from } from 'rxjs';\nimport { RxRecordDesignerService } from '../record-designer.service';\n\n@Injectable()\nexport class RecordDesignerEffects {\n  constructor(\n    private store$: Store<any>,\n    private actions$: Actions,\n    private rxFieldDefinitionManagerService: RxFieldDefinitionManagerService,\n    private rxRecordDefinitionService: RxRecordDefinitionService,\n    private rxModalService: RxModalService,\n    private rxNotificationService: RxNotificationService,\n    private translateService: TranslateService,\n    private rxGuidService: RxGuidService,\n    private rxRecordDesignerService: RxRecordDesignerService\n  ) {}\n\n  initRecordDesigner$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(RecordDesignerActions.init),\n      map(() => RecordDesignerActions.loadDefinition())\n    )\n  );\n\n  loadDefinition$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(RecordDesignerActions.loadDefinition),\n      withLatestFrom(this.store$.select(definitionNameSelector)),\n      switchMap(([action, definitionName]) =>\n        definitionName\n          ? this.rxRecordDefinitionService.get(definitionName, {}, true)\n          : this.rxRecordDefinitionService.getNew()\n      ),\n      map((definition: IRecordDefinition) =>\n        RecordDesignerActions.loadDefinitionSuccess({\n          definition\n        })\n      )\n    )\n  );\n\n  loadDefinitionSuccess$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(RecordDesignerActions.loadDefinitionSuccess),\n      map((action) =>\n        RecordDesignerActions.initDefinitionModel({\n          definitionModelFromDefinition: this.rxRecordDesignerService.getDefinitionModelFromDefinition(\n            action.definition\n          )\n        })\n      )\n    )\n  );\n\n  createNewFieldModel$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(RecordDesignerActions.createNewFieldModel),\n      withLatestFrom(this.store$.select(definitionModelSelector)),\n      map(([action, definitionModel]) => {\n        let newFieldName;\n        let fieldNameSuffix = 0;\n\n        const defaultFieldName = this.translateService.instant(\n          'com.bmc.arsys.rx.client.designer.default-field-name.label'\n        );\n\n        do {\n          newFieldName = `${defaultFieldName} ${++fieldNameSuffix}`;\n        } while (some(definitionModel.fields, { name: newFieldName }));\n\n        const guid = this.rxGuidService.generate();\n\n        const newFieldModel: IRecordFieldDefinitionModel =\n          this.rxFieldDefinitionManagerService.getNewFieldDefinitionModel(action.resourceType, {\n            id: null,\n            isNewField: true,\n            name: newFieldName,\n            guid,\n            minValue: null,\n            maxValue: null,\n            defaultValueByLocale: {},\n            selectionFieldOptionProperties:\n              action.resourceType === RX_RECORD_DEFINITION.dataTypes.selection.resourceType\n                ? { defaultValue: null, optionNamesById: null, optionLabelsById: null }\n                : null\n          });\n\n        return RecordDesignerActions.addFieldModel({ newFieldModel });\n      })\n    )\n  );\n\n  clearSearchFields$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(RecordDesignerActions.updateDefinitionModelFromDesigner),\n      withLatestFrom(this.store$.select(definitionModelSelector)),\n      map(([action, definitionModel]) => definitionModel),\n      distinctUntilChanged((a, b) => isEqual(a.enableCognitiveSearch, b.enableCognitiveSearch)),\n      filter(\n        (definitionModel) => definitionModel.enableCognitiveSearch && !isEmpty(definitionModel.recordSearchFields)\n      ),\n      switchMap(() =>\n        from(\n          this.rxModalService.confirm({\n            title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),\n            modalStyle: RX_MODAL.modalStyles.warning,\n            message: this.translateService.instant(\n              'com.bmc.arsys.rx.client.record-designer.search-fields.clear-search-fields-confirmation.message'\n            )\n          })\n        )\n      ),\n      filter(Boolean),\n      map(() => RecordDesignerActions.clearSearchFields())\n    )\n  );\n\n  addNewFieldModel$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(RecordDesignerActions.addFieldModel),\n      map((action) => RecordDesignerActions.setSelectedFieldGuid({ guid: action.newFieldModel.guid }))\n    )\n  );\n\n  copySelectedField$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(RecordDesignerActions.copySelectedField),\n      withLatestFrom(this.store$.select(definitionModelSelector), this.store$.select(selectedFieldGuidSelector)),\n      map(([action, definitionModel, selectedFieldGuid]) => {\n        const selectedField = definitionModel.fields.find((field) => field.guid === selectedFieldGuid);\n\n        const selectedFieldCopy: IRecordFieldDefinitionModel = {\n          ...selectedField,\n          id: null,\n          guid: this.rxGuidService.generate(),\n          name: this.translateService.instant('com.bmc.arsys.rx.client.designer.default-field-copy-name.label', {\n            fieldName: selectedField.name\n          }),\n          selectionFieldOptionProperties: {\n            ...selectedField.selectionFieldOptionProperties,\n            optionLabelsById:\n              selectedField.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection\n                ? mapValues(selectedField.selectionFieldOptionProperties.optionNamesById, () =>\n                    this.rxGuidService.generate()\n                  )\n                : null\n          }\n        };\n\n        return RecordDesignerActions.addFieldModel({ newFieldModel: selectedFieldCopy });\n      })\n    )\n  );\n\n  deleteSelectedField$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(RecordDesignerActions.deleteSelectedField),\n      switchMap(() =>\n        from(\n          this.rxModalService.confirm({\n            title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),\n            modalStyle: RX_MODAL.modalStyles.warning,\n            message: this.translateService.instant(\n              'com.bmc.arsys.rx.client.record-designer.delete-field-warning.message'\n            )\n          })\n        )\n      ),\n      filter(Boolean),\n      map(() => RecordDesignerActions.checkIfFieldUsedByIndexes())\n    )\n  );\n\n  checkIfFieldUsedByIndexes$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(RecordDesignerActions.checkIfFieldUsedByIndexes),\n      withLatestFrom(this.store$.select(definitionModelSelector), this.store$.select(selectedFieldGuidSelector)),\n      switchMap(([result, definitionModel, guid]) => {\n        const field = find(definitionModel.fields, { guid });\n\n        const isUsedByIndexes = some(definitionModel.indexDefinitions, (indexDefinition: IIndexDefinitionModel) =>\n          includes(indexDefinition.indexFieldIds, field.id)\n        );\n\n        return isUsedByIndexes\n          ? from(\n              this.rxModalService.alert({\n                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),\n                modalStyle: RX_MODAL.modalStyles.warning,\n                message: this.translateService.instant(\n                  'com.bmc.arsys.rx.client.record-designer.indexes.field-used-by-indexes.message',\n                  { fieldName: field.name }\n                )\n              })\n            ).pipe(map(() => RecordDesignerActions.deleteSelectedFieldError()))\n          : [RecordDesignerActions.deleteSelectedFieldSuccess()];\n      })\n    )\n  );\n\n  saveDefinitionSuccess$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(RecordDesignerActions.saveDefinitionSuccess),\n      withLatestFrom(this.store$.select(definitionNameSelector), this.store$.select(bundleIdSelector)),\n      tap(() => {\n        this.rxNotificationService.addSuccessMessage(\n          this.translateService.instant('com.bmc.arsys.rx.client.designer.definition-saved-successfully.message', {\n            definitionTypeDisplayName: this.translateService.instant('com.bmc.arsys.rx.client.record-definition.label')\n          })\n        );\n      }),\n      filter(([action, definitionName, bundleId]) => !!definitionName),\n      map(([action, definitionName, bundleId]: [any, string, string]) =>\n        RecordDesignerActions.init({\n          payload: { definitionName, bundleId }\n        })\n      )\n    )\n  );\n\n  clearSelectedField$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(RecordDesignerActions.initDefinitionModel, RecordDesignerActions.deleteSelectedFieldSuccess),\n      map(() => RecordDesignerActions.clearSelectedFieldGuid())\n    )\n  );\n\n  markPristine$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(RecordDesignerActions.initDefinitionModel, RecordDesignerActions.saveDefinitionSuccess),\n      map(() => RecordDesignerActions.markDesignerPristine())\n    )\n  );\n\n  markDirty$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(\n        RecordDesignerActions.addFieldModel,\n        RecordDesignerActions.updateDefinitionModelFromDesigner,\n        RecordDesignerActions.updateSelectedFieldModel,\n        RecordDesignerActions.deleteSelectedFieldSuccess\n      ),\n      map(() => RecordDesignerActions.markDesignerDirty())\n    )\n  );\n}\n"]}