{"version":3,"file":"data-import-mapping-step.component.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/dataload/components/data-import/data-import-mapping-step/data-import-mapping-step.component.ts","../../../../../../../../libs/platform/dataload/components/data-import/data-import-mapping-step/data-import-mapping-step.component.html"],"names":[],"mappings":"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","sourcesContent":["import { AfterViewInit, ChangeDetectorRef, Component, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport {\n  IDataImportSheetConfiguration,\n  IDataloadExcelSheetConfiguration,\n  IDataloadWizardContext,\n  IFieldMapping,\n  ITargetField\n} from '../data-import.types';\nimport { RxSelectionChangeEvent, RxSelectOption } from '@bmc-ux/adapt-angular';\nimport {\n  IDefinitionPickerComponentOptions,\n  RX_DEFINITION_PICKER,\n  RxDefinitionPickerType,\n  RxWizardModalComponent\n} from '@helix/platform/shared/components';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RecordFieldOption,\n  RX_RECORD_DEFINITION,\n  RxRecordDefinitionCacheService\n} from '@helix/platform/record/api';\nimport { IAssociationDefinition, RxAssociationDefinitionService } from '@helix/platform/association/api';\nimport {\n  cloneDeep,\n  compact,\n  filter as _filter,\n  find,\n  flatten,\n  flow,\n  forEach,\n  get,\n  includes,\n  intersectionBy,\n  lowerCase,\n  map as _map,\n  some,\n  sortBy\n} from 'lodash';\nimport { IPlainObject, RxDefinitionNameService, RxNotificationService } from '@helix/platform/shared/api';\nimport { iif, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, finalize, map, takeUntil, tap } from 'rxjs/operators';\nimport { DataExportService } from '../../data-export/data-export.service';\nimport { DataImportService } from '../data-import.service';\nimport { NgForm } from '@angular/forms';\nimport { DL_DATA_IMPORT } from '../data-import.constant';\nimport { RxModalService } from '@helix/platform/ui-kit';\n\n@Component({\n  selector: 'dl-data-import-mapping-step',\n  templateUrl: './data-import-mapping-step.component.html',\n  styleUrls: ['./data-import-mapping-step.component.scss']\n})\nexport class DataImportMappingStepComponent implements OnInit, OnDestroy, AfterViewInit {\n  @Input()\n  context: IDataloadWizardContext;\n\n  @Input()\n  options: IPlainObject;\n\n  @ViewChild('dataImportConfigurationForm')\n  dataImportConfigurationForm: NgForm;\n\n  private excelSheetName: string;\n  sourceFieldNameList: string[] = [];\n  targetFieldList: ITargetField[] = [];\n\n  definitionTypes = {\n    record: 'record',\n    association: 'association'\n  };\n\n  definitionTypeOptions: RxSelectOption[] = [\n    {\n      value: this.definitionTypes.record,\n      displayValue: this.translateService.instant('com.bmc.arsys.rx.client.definition-type.record.label')\n    },\n    {\n      value: this.definitionTypes.association,\n      displayValue: this.translateService.instant('com.bmc.arsys.rx.client.definition-type.association.label')\n    }\n  ];\n\n  recordPickerOptions: IDefinitionPickerComponentOptions = {\n    label: '',\n    definitionType: RxDefinitionPickerType.Record,\n    availableDefinitionPickerStates: {\n      definitionButtonsGroups: [RX_DEFINITION_PICKER.definitionScopes.all],\n      search: RX_DEFINITION_PICKER.definitionScopes.all\n    }\n  };\n\n  associationPickerOptions: IDefinitionPickerComponentOptions = {\n    label: '',\n    definitionType: RxDefinitionPickerType.Association,\n    availableDefinitionPickerStates: {\n      definitionButtonsGroups: [RX_DEFINITION_PICKER.definitionScopes.all],\n      search: RX_DEFINITION_PICKER.definitionScopes.all\n    }\n  };\n\n  currentSheetDataImportMapping: IDataImportSheetConfiguration;\n\n  private currentExcelSheetConfiguration: IDataloadExcelSheetConfiguration;\n  private destroyed$ = new ReplaySubject<boolean>(1);\n  private requiredFieldNames: string[];\n  areFieldsLoading: boolean;\n\n  duplicateHandlingOptions: RxSelectOption[] = [\n    {\n      id: DL_DATA_IMPORT.mergeOptions.generateNewIds,\n      name: this.translateService.instant(\n        'com.bmc.arsys.rx.client.dataload.import.wizard.tabs.duplicate-handling.handle-by.generating-new-id-for-all'\n      )\n    },\n    {\n      id: DL_DATA_IMPORT.mergeOptions.generateNewIdsForDuplicates,\n      name: this.translateService.instant(\n        'com.bmc.arsys.rx.client.dataload.import.wizard.tabs.duplicate-handling.handle-by.generating-new-id-for-duplicates'\n      )\n    },\n    {\n      id: DL_DATA_IMPORT.mergeOptions.rejectDuplicates,\n      name: this.translateService.instant(\n        'com.bmc.arsys.rx.client.dataload.import.wizard.tabs.duplicate-handling.handle-by.rejecting-duplicate'\n      )\n    },\n    {\n      id: DL_DATA_IMPORT.mergeOptions.replaceRecords,\n      name: this.translateService.instant(\n        'com.bmc.arsys.rx.client.dataload.import.wizard.tabs.duplicate-handling.handle-by.replacing-existing-records'\n      )\n    },\n    {\n      id: DL_DATA_IMPORT.mergeOptions.updateRecords,\n      name: this.translateService.instant(\n        'com.bmc.arsys.rx.client.dataload.import.wizard.tabs.duplicate-handling.handle-by.updating-old-with-new'\n      )\n    }\n  ];\n\n  dataOptions: RxSelectOption[] = [\n    {\n      id: 1,\n      name: this.translateService.instant(\n        'com.bmc.arsys.rx.client.dataload.import.wizard.tabs.options.remove-leading-spaces-and-tabs'\n      ),\n      isSelected: false\n    },\n    {\n      id: 2,\n      name: this.translateService.instant(\n        'com.bmc.arsys.rx.client.dataload.import.wizard.tabs.options.remove-trailing-spaces-and-tabs'\n      ),\n      isSelected: false\n    },\n    {\n      id: 3,\n      name: this.translateService.instant(\n        'com.bmc.arsys.rx.client.dataload.import.wizard.tabs.options.truncate-long-strings'\n      ),\n      isSelected: false\n    }\n  ];\n\n  matchDuplicateByFields: RxSelectOption[] = [];\n  selectedMatchDuplicateByFields: RxSelectOption[] = [];\n\n  dateTimeFormatOptions: RxSelectOption[] = [\n    {\n      id: 1,\n      name: 'dd/MM/yy',\n      example: '25/11/21'\n    },\n    {\n      id: 2,\n      name: 'dd/MM/yyyy',\n      example: '25/11/2021'\n    },\n    {\n      id: 3,\n      name: 'MM/dd/yyyy',\n      example: '11/25/2021'\n    },\n    {\n      id: 4,\n      name: 'yyyy/MM/dd',\n      example: '2021/11/25'\n    },\n    {\n      id: 5,\n      name: `yyyy-MM-dd'T'HH:mm:ss:SSSZ`,\n      example: '2021-11-25T11:12:13:000+0530'\n    }\n  ];\n\n  constructor(\n    private dataImportService: DataImportService,\n    private dataExportService: DataExportService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private changeDetectorRef: ChangeDetectorRef,\n    private rxModalService: RxModalService,\n    private rxWizardModalComponent: RxWizardModalComponent,\n    private definitionNameService: RxDefinitionNameService,\n    private translateService: TranslateService,\n    private rxAssociationDefinitionService: RxAssociationDefinitionService,\n    private rxNotificationService: RxNotificationService\n  ) {}\n\n  ngOnInit(): void {\n    this.excelSheetName = this.options.sheetName;\n\n    this.currentSheetDataImportMapping = this.dataImportService.getEmptyCurrentSheetDataMapConfig(this.excelSheetName);\n\n    this.currentExcelSheetConfiguration = this.context.excelSheetsConfiguration[this.excelSheetName];\n    this.sourceFieldNameList = _map(this.currentExcelSheetConfiguration.fields, 'name');\n\n    this.currentSheetDataImportMapping.configurations.duplicateHandlingOptions.handleDuplicateBy = [\n      find(this.duplicateHandlingOptions, { id: DL_DATA_IMPORT.mergeOptions.generateNewIds })\n    ];\n\n    const isCloningConfig: boolean = Boolean(this.context.clonedConfigurationInstanceId);\n\n    if (isCloningConfig && this.context.isClonedConfigMatched) {\n      this.currentSheetDataImportMapping = cloneDeep(\n        this.getRefactoredClonedConfiguration(\n          find(this.context.dataImportContext.dataImportConfigurations.sheets, {\n            name: this.excelSheetName\n          })\n        )\n      );\n\n      setTimeout(() => this.updateDataChangesToSheetMapContext());\n\n      if (this.getRecordDefinitionName()) {\n        this.loadTargetAndOtherFields(false, false);\n      } else {\n        this.setTypeFromExcelSheet();\n      }\n    } else {\n      this.setTypeFromExcelSheet();\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this.dataImportConfigurationForm.control.valueChanges\n      .pipe(distinctUntilChanged(), takeUntil(this.destroyed$))\n      .subscribe((values) => setTimeout(() => this.updateDataChangesToSheetMapContext()));\n  }\n\n  removeMapping(index: number): void {\n    this.currentSheetDataImportMapping.configurations.definitionMappings.fieldMappings.splice(index, 1);\n  }\n\n  addFieldMapping(sourceFieldName: string = null, targetField: ITargetField = null): void {\n    this.currentSheetDataImportMapping.configurations.definitionMappings.fieldMappings.push({\n      sourceField: { fieldName: sourceFieldName ? [sourceFieldName] : null },\n      targetField: targetField ? [targetField] : null\n    });\n\n    this.updateWizardButtons();\n  }\n\n  private setDefinitionTypeNameFromExcelSheet(): void {\n    this.setTypeFromExcelSheet();\n    this.currentSheetDataImportMapping.configurations.definitionMappings.targetDefinition.name =\n      this.currentExcelSheetConfiguration.definition.value;\n  }\n\n  private setTypeFromExcelSheet(): void {\n    this.currentSheetDataImportMapping.configurations.definitionMappings.targetDefinition.type =\n      this.getTypeFromExcelSheet();\n  }\n\n  autoMapping(): void {\n    this.clearMappingFields();\n    this.setDefinitionTypeNameFromExcelSheet();\n    this.loadTargetAndOtherFields(true);\n  }\n\n  private loadTargetAndOtherFields(isAutoMapping: boolean = false, autoPopulateRequiredFields: boolean = false): void {\n    this.areFieldsLoading = true;\n    this.requiredFieldNames = [];\n\n    iif(\n      () => this.isDefinitionTypeRecord(),\n      this.rxRecordDefinitionCacheService.getRecordDefinition(this.getRecordDefinitionName()),\n      this.rxAssociationDefinitionService.get(this.getRecordDefinitionName())\n    )\n      .pipe(\n        map((definitionResponse: IRecordDefinition | IAssociationDefinition) => {\n          if (this.dataExportService.isRecordDefinitionResponse(definitionResponse)) {\n            this.targetFieldList = definitionResponse.fieldDefinitions\n              .sort(function (a, b) {\n                if (a.fieldOption === RecordFieldOption.Required && !a.defaultValue) {\n                  return -1;\n                } else {\n                  b.name.localeCompare(a.name);\n                }\n              })\n              .map((fieldDefinition: IFieldDefinition) => {\n                if (this.isMappingFieldDefinitionRequired(fieldDefinition)) {\n                  this.requiredFieldNames.push(fieldDefinition.name);\n\n                  if (autoPopulateRequiredFields) {\n                    this.addFieldMapping(null, {\n                      name: fieldDefinition.name,\n                      _fieldId: fieldDefinition.id\n                    });\n                  }\n                }\n\n                return {\n                  name: fieldDefinition.name,\n                  _fieldId: fieldDefinition.id\n                };\n              });\n          } else {\n            this.targetFieldList = [\n              {\n                name: definitionResponse.nodeAName || '',\n                _fieldId: definitionResponse.nodeAKeys[0] || ''\n              },\n              {\n                name: definitionResponse.nodeBName || '',\n                _fieldId: definitionResponse.nodeBKeys[0]\n              }\n            ].filter((field: ITargetField) => field.name);\n          }\n        }),\n        tap(() => {\n          if (isAutoMapping) {\n            this.generateAutoMappingFields();\n          }\n        }),\n        finalize(() => {\n          this.areFieldsLoading = false;\n        })\n      )\n      .subscribe(() => {\n        this.currentSheetDataImportMapping.configurations.definitionMappings.fieldMappings = sortBy(\n          this.currentSheetDataImportMapping.configurations.definitionMappings.fieldMappings,\n          (fieldMap: IFieldMapping) => get(fieldMap, 'targetField[0].name')\n        );\n      });\n  }\n\n  private isMappingFieldDefinitionRequired(fieldDefinition: IFieldDefinition): boolean {\n    return fieldDefinition.fieldOption === RecordFieldOption.Required && !fieldDefinition.defaultValue;\n  }\n\n  private generateAutoMappingFields(): void {\n    forEach(this.sourceFieldNameList, (sourceFieldName) => {\n      const matchedTargetField = this.targetFieldList.find(\n        (targetField: ITargetField) =>\n          sourceFieldName === targetField.name || sourceFieldName === String(targetField._fieldId)\n      );\n\n      if (matchedTargetField) {\n        this.addFieldMapping(sourceFieldName, matchedTargetField);\n      } else {\n        this.addFieldMapping(sourceFieldName, null);\n      }\n    });\n\n    const targetFieldMappings: ITargetField[] = flatten(\n      _map(this.currentSheetDataImportMapping.configurations.definitionMappings.fieldMappings, 'targetField')\n    );\n\n    forEach(this.targetFieldList, (targetField: ITargetField) => {\n      if (!find(targetFieldMappings, { name: targetField.name }) && this.isRequiredTargetField(targetField)) {\n        this.addFieldMapping(null, targetField);\n      }\n    });\n  }\n\n  onDefinitionChange(definitionName: string): void {\n    this.clearMappingFields();\n\n    if (definitionName) {\n      if (!this.definitionNameService.getBundleId(definitionName)) {\n        this.showInvalidDefinitionSelectedMsg();\n      } else {\n        this.loadTargetAndOtherFields(false, true);\n      }\n    }\n  }\n\n  clearMappingFields(): void {\n    this.currentSheetDataImportMapping.configurations.definitionMappings.fieldMappings = [];\n  }\n\n  private getRecordDefinitionName(isAutoMapping?: boolean): string {\n    return isAutoMapping\n      ? this.currentExcelSheetConfiguration.definition.value\n      : this.currentSheetDataImportMapping.configurations.definitionMappings.targetDefinition.name;\n  }\n\n  private clearDefinitionSelection(): void {\n    this.changeDetectorRef.detectChanges();\n    this.currentSheetDataImportMapping.configurations.definitionMappings.targetDefinition.name = null;\n  }\n\n  onDefinitionTypeChange(): void {\n    this.clearMappingFields();\n    this.clearDefinitionSelection();\n  }\n\n  private showInvalidDefinitionSelectedMsg(): void {\n    this.rxNotificationService.addErrorMessage(\n      this.translateService.instant('com.bmc.arsys.rx.client.dataload.global-record-not-allowed.message')\n    );\n\n    this.clearDefinitionSelection();\n  }\n\n  private isDefinitionTypeRecord(): boolean {\n    return (\n      this.currentSheetDataImportMapping.configurations.definitionMappings.targetDefinition.type ===\n      this.definitionTypes.record\n    );\n  }\n\n  optionFormatter(field: RxSelectOption): string {\n    return field.name;\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n\n  isStepActive(): boolean {\n    return this.rxWizardModalComponent.api.isCurrentStepActive(this.currentExcelSheetConfiguration?.stepId);\n  }\n\n  onTargetFieldSelection($event: RxSelectionChangeEvent, index): void {\n    const isFieldAlreadySelected = flow(\n      (fields) => _filter(fields, (value, key) => key !== index),\n      (alreadySelectedFields: IFieldMapping[]) =>\n        find(\n          alreadySelectedFields,\n          (fieldMap) => fieldMap.targetField && fieldMap?.targetField[0]?.name === $event.options[0]?.name\n        ),\n      (fieldMap: IFieldMapping) => fieldMap\n    )(this.currentSheetDataImportMapping.configurations.definitionMappings.fieldMappings);\n\n    if (isFieldAlreadySelected) {\n      this.rxNotificationService.addErrorMessage(\n        this.translateService.instant(\n          'com.bmc.arsys.rx.client.dataload.import.wizard.target-field-already-selected.message.title'\n        )\n      );\n\n      $event.preventDefault();\n    } else {\n      setTimeout(() => this.updateDataChangesToSheetMapContext());\n    }\n  }\n\n  isRequiredTargetField(targetField: ITargetField): boolean {\n    return includes(this.requiredFieldNames, targetField?.name || get(targetField, '[0].name'));\n  }\n\n  shouldGenerateNewIdForDuplicateRecords(): boolean {\n    return (\n      this.currentSheetDataImportMapping.configurations.duplicateHandlingOptions.handleDuplicateBy &&\n      this.currentSheetDataImportMapping.configurations.duplicateHandlingOptions.handleDuplicateBy[0]?.id === 1\n    );\n  }\n\n  onTabActivated(event): void {\n    if (event.index === 1) {\n      this.matchDuplicateByFields = flow(\n        (fields) => _map(fields, 'targetField'),\n        compact,\n        flatten\n      )(this.currentSheetDataImportMapping.configurations.definitionMappings.fieldMappings);\n\n      const defaultMatchByField = find(this.matchDuplicateByFields, { _fieldId: RX_RECORD_DEFINITION.coreFieldIds.id });\n\n      if (defaultMatchByField && !this.selectedMatchDuplicateByFields.length) {\n        this.selectedMatchDuplicateByFields = [defaultMatchByField];\n      }\n\n      this.selectedMatchDuplicateByFields = intersectionBy(\n        this.matchDuplicateByFields,\n        this.selectedMatchDuplicateByFields,\n        'name'\n      );\n    }\n  }\n\n  private getTypeFromExcelSheet(): string {\n    return lowerCase(this.currentExcelSheetConfiguration.definition.name);\n  }\n\n  get timeFormatExample(): string {\n    return (\n      this.currentSheetDataImportMapping.configurations.timeFormatOptions &&\n      this.currentSheetDataImportMapping.configurations.timeFormatOptions[0]?.example\n    );\n  }\n\n  areFieldMappingsInvalid(): boolean {\n    return some(\n      this.currentSheetDataImportMapping.configurations.definitionMappings.fieldMappings,\n      (fieldMap: IFieldMapping) => !fieldMap.sourceField.fieldName || !fieldMap.targetField\n    );\n  }\n\n  private updateWizardButtons(): void {\n    this.rxWizardModalComponent.config.options.allowFinish =\n      this.rxWizardModalComponent.activeTabIndex === this.rxWizardModalComponent.config.options.steps.length - 1;\n\n    if (this.dataImportConfigurationForm.invalid || this.areFieldMappingsInvalid()) {\n      this.rxWizardModalComponent.api.disableNextButton();\n      this.rxWizardModalComponent.api.disableFinishButton();\n    } else {\n      this.rxWizardModalComponent.api.enableNextButton();\n      this.rxWizardModalComponent.api.enableFinishButton();\n    }\n  }\n\n  updateDataChangesToSheetMapContext(): void {\n    this.updateWizardButtons();\n    this.rxWizardModalComponent.api.markDirty();\n    const currentConfigurations = cloneDeep(this.currentSheetDataImportMapping.configurations);\n\n    _filter(\n      currentConfigurations.definitionMappings.fieldMappings,\n      (field: IFieldMapping) => field.targetField\n    ).forEach((field: IFieldMapping) => {\n      field.sourceField = { fieldName: get(field.sourceField, 'fieldName[0]') };\n      field.targetField = field.targetField[0];\n    });\n\n    currentConfigurations.duplicateHandlingOptions.handleDuplicateBy = get(\n      currentConfigurations.duplicateHandlingOptions.handleDuplicateBy,\n      '[0].id'\n    );\n\n    if (this.shouldGenerateNewIdForDuplicateRecords()) {\n      currentConfigurations.duplicateHandlingOptions.matchDuplicateBy = [];\n    } else {\n      currentConfigurations.duplicateHandlingOptions.matchDuplicateBy = _map(\n        this.selectedMatchDuplicateByFields,\n        (field: ITargetField) => ({\n          _fieldId: field._fieldId,\n          name: field.name\n        })\n      );\n    }\n\n    currentConfigurations.dataHandlingOptions = this.dataOptions\n      .filter((option: RxSelectOption) => option.isSelected)\n      .map((option: RxSelectOption) => option.id);\n\n    currentConfigurations.timeFormatOptions = get(currentConfigurations.timeFormatOptions, '[0].name');\n\n    const sheetImportConfig = find(this.context.dataImportContext.dataImportConfigurations.sheets, {\n      name: this.excelSheetName\n    });\n\n    sheetImportConfig.configurations = currentConfigurations;\n  }\n\n  private getRefactoredClonedConfiguration(\n    configuration: IDataImportSheetConfiguration\n  ): IDataImportSheetConfiguration {\n    forEach(configuration.configurations.definitionMappings.fieldMappings, (fieldMap: IFieldMapping) => {\n      fieldMap.targetField = [fieldMap.targetField];\n      fieldMap.sourceField.fieldName = [fieldMap.sourceField.fieldName];\n    });\n\n    this.dataOptions.forEach((option: RxSelectOption) => {\n      option.isSelected = includes(configuration.configurations.dataHandlingOptions, option.id);\n    });\n\n    configuration.configurations.timeFormatOptions = configuration.configurations.timeFormatOptions\n      ? [\n          find(this.dateTimeFormatOptions, {\n            name: configuration.configurations.timeFormatOptions\n          })\n        ]\n      : [];\n\n    configuration.configurations.duplicateHandlingOptions.handleDuplicateBy = configuration.configurations\n      .duplicateHandlingOptions.handleDuplicateBy\n      ? [\n          find(this.duplicateHandlingOptions, {\n            id: configuration.configurations.duplicateHandlingOptions.handleDuplicateBy\n          })\n        ]\n      : [find(this.duplicateHandlingOptions, { id: DL_DATA_IMPORT.mergeOptions.generateNewIds })];\n\n    if (configuration.configurations.duplicateHandlingOptions.matchDuplicateBy.length) {\n      this.selectedMatchDuplicateByFields = configuration.configurations.duplicateHandlingOptions.matchDuplicateBy;\n    }\n\n    return configuration;\n  }\n}\n","<form #dataImportConfigurationForm=\"ngForm\">\n  <adapt-tabset type=\"pills\" [tab-active]=\"0\" (tab-active-changed)=\"onTabActivated($event)\">\n    <adapt-tab-panel\n      adapt-tab-title=\"{{ 'com.bmc.arsys.rx.client.dataload.import.wizard.tabs.data-mapping.title' | translate }}\"\n    >\n      <div *ngIf=\"isStepActive()\" class=\"mt-2\">\n        <button\n          adapt-button\n          btn-type=\"primary\"\n          type=\"button\"\n          rx-id=\"auto-mapping\"\n          (click)=\"autoMapping()\"\n          size=\"small\"\n          class=\"d-icon-left-arrow_schema form-group\"\n          [disabled]=\"areFieldsLoading\"\n        >\n          {{ 'com.bmc.arsys.rx.client.dataload.import.wizard.tabs.data-mapping.types.auto-mapping.label' | translate }}\n        </button>\n\n        <adapt-rx-radiobutton-group\n          [(ngModel)]=\"currentSheetDataImportMapping.configurations.definitionMappings.targetDefinition.type\"\n          (ngModelChange)=\"onDefinitionTypeChange()\"\n          name=\"definitionType\"\n          label=\"{{ 'com.bmc.arsys.rx.client.common.definition.label' | translate }}\"\n          rx-id=\"definition-type\"\n        >\n          <adapt-rx-radiobutton\n            *ngFor=\"let definitionType of definitionTypeOptions; let index = index\"\n            class=\"radio-inline m-0\"\n            [value]=\"definitionType.value\"\n            [label]=\"definitionType.displayValue\"\n            [ngClass]=\"{ 'mr-3': index === 0 }\"\n          ></adapt-rx-radiobutton>\n        </adapt-rx-radiobutton-group>\n\n        <rx-definition-picker\n          *ngIf=\"\n            currentSheetDataImportMapping.configurations.definitionMappings.targetDefinition.type ===\n            definitionTypes.record\n          \"\n          class=\"d-block form-group\"\n          [options]=\"recordPickerOptions\"\n          rx-id=\"record-definition-picker\"\n          [(ngModel)]=\"currentSheetDataImportMapping.configurations.definitionMappings.targetDefinition.name\"\n          (ngModelChange)=\"onDefinitionChange($event)\"\n          name=\"recordDefinitionName\"\n        >\n        </rx-definition-picker>\n\n        <rx-definition-picker\n          *ngIf=\"\n            currentSheetDataImportMapping.configurations.definitionMappings.targetDefinition.type ===\n            definitionTypes.association\n          \"\n          class=\"d-block form-group\"\n          [options]=\"associationPickerOptions\"\n          rx-id=\"association-definition-picker\"\n          [(ngModel)]=\"currentSheetDataImportMapping.configurations.definitionMappings.targetDefinition.name\"\n          (ngModelChange)=\"onDefinitionChange($event)\"\n          name=\"associationDefinitionName\"\n        >\n        </rx-definition-picker>\n\n        <div *ngIf=\"currentSheetDataImportMapping.configurations.definitionMappings.targetDefinition.name\">\n          <div class=\"row border-bottom form-group\">\n            <div class=\"col-6\">\n              <adapt-rx-control-label\n                label=\"{{\n                  'com.bmc.arsys.rx.client.dataload.import.wizard.tabs.data-mapping.mapping-title.title' | translate\n                }}\"\n              >\n              </adapt-rx-control-label>\n            </div>\n\n            <div class=\"col-6\">\n              <button\n                class=\"d-icon-left-plus_circle float-right py-0 px-2\"\n                adapt-button\n                btn-type=\"tertiary\"\n                type=\"button\"\n                rx-id=\"add-mapping\"\n                (click)=\"addFieldMapping()\"\n              >\n                {{\n                  'com.bmc.arsys.rx.client.dataload.import.wizard.tabs.data-mapping.types.manual-mapping.label'\n                    | translate\n                }}\n              </button>\n            </div>\n          </div>\n\n          <div class=\"row\" *ngIf=\"currentSheetDataImportMapping.configurations.definitionMappings.fieldMappings.length\">\n            <div class=\"col-6\">\n              <adapt-rx-control-label\n                label=\"{{\n                  'com.bmc.arsys.rx.client.dataload.import.wizard.tabs.data-mapping.source-fields.label' | translate\n                }}\"\n              ></adapt-rx-control-label>\n            </div>\n\n            <div class=\"col-6 pl-0\">\n              <adapt-rx-control-label\n                label=\"{{\n                  'com.bmc.arsys.rx.client.dataload.import.wizard.tabs.data-mapping.target-fields.label' | translate\n                }}\"\n              ></adapt-rx-control-label>\n            </div>\n          </div>\n\n          <div class=\"loader-container\" *ngIf=\"areFieldsLoading\">\n            <div class=\"loader-section\"></div>\n          </div>\n\n          <div\n            class=\"row no-gutters\"\n            *ngFor=\"\n              let fieldMapping of currentSheetDataImportMapping.configurations.definitionMappings.fieldMappings;\n              let $index = index\n            \"\n          >\n            <div class=\"col-5\">\n              <adapt-rx-select\n                class=\"d-block form-group\"\n                [(ngModel)]=\"fieldMapping.sourceField.fieldName\"\n                [options]=\"sourceFieldNameList\"\n                [required]=\"true\"\n                [enableFilter]=\"true\"\n                [ngModelOptions]=\"{ standalone: true }\"\n                (ngModelChange)=\"updateDataChangesToSheetMapContext()\"\n                rx-id=\"source-field-names\"\n              >\n              </adapt-rx-select>\n            </div>\n\n            <div class=\"col-1 d-icon-arrow_right text-tertiary mt-2 text-center\"></div>\n\n            <div class=\"col-5\">\n              <adapt-rx-select\n                class=\"d-block form-group\"\n                [(ngModel)]=\"fieldMapping.targetField\"\n                [options]=\"targetFieldList\"\n                [optionFormatter]=\"optionFormatter\"\n                [required]=\"true\"\n                (onSelectionChange)=\"onTargetFieldSelection($event, $index)\"\n                [enableFilter]=\"true\"\n                [disabled]=\"isRequiredTargetField(fieldMapping.targetField)\"\n                [ngModelOptions]=\"{ standalone: true }\"\n                rx-id=\"target-fields\"\n              >\n              </adapt-rx-select>\n            </div>\n\n            <div class=\"col-1 pl-3\">\n              <button\n                [disabled]=\"isRequiredTargetField(fieldMapping.targetField)\"\n                [ngClass]=\"{ 'text-tertiary': isRequiredTargetField(fieldMapping.targetField) }\"\n                class=\"d-icon-minus_circle text-danger form-group px-0\"\n                adapt-button\n                btn-type=\"tertiary\"\n                type=\"button\"\n                rx-id=\"remove-mapping-button\"\n                (click)=\"removeMapping($index)\"\n              ></button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </adapt-tab-panel>\n\n    <adapt-tab-panel\n      adapt-tab-title=\"{{ 'com.bmc.arsys.rx.client.dataload.import.wizard.tabs.duplicate-handling.title' | translate }}\"\n    >\n      <adapt-rx-select\n        label=\"{{\n          'com.bmc.arsys.rx.client.dataload.import.wizard.tabs.duplicate-handling.handle-by.label' | translate\n        }}\"\n        class=\"d-block form-group mt-2\"\n        [(ngModel)]=\"currentSheetDataImportMapping.configurations.duplicateHandlingOptions.handleDuplicateBy\"\n        [options]=\"duplicateHandlingOptions\"\n        name=\"handleDuplicatesBy\"\n        rx-id=\"handle-duplicates-by\"\n        [optionFormatter]=\"optionFormatter\"\n      >\n      </adapt-rx-select>\n\n      <adapt-rx-select\n        label=\"{{\n          'com.bmc.arsys.rx.client.dataload.import.wizard.tabs.duplicate-handling.match-by.label' | translate\n        }}\"\n        *ngIf=\"!shouldGenerateNewIdForDuplicateRecords()\"\n        class=\"d-block form-group\"\n        [(ngModel)]=\"selectedMatchDuplicateByFields\"\n        [options]=\"matchDuplicateByFields\"\n        [multiple]=\"true\"\n        [enableFilter]=\"true\"\n        [selectAllButton]=\"true\"\n        [deselectAllButton]=\"true\"\n        [optionFormatter]=\"optionFormatter\"\n        [required]=\"!shouldGenerateNewIdForDuplicateRecords()\"\n        name=\"matchDuplicatesBy\"\n        rx-id=\"match-duplicates-by\"\n      >\n      </adapt-rx-select>\n    </adapt-tab-panel>\n\n    <adapt-tab-panel adapt-tab-title=\"{{ 'com.bmc.arsys.rx.client.common.options.label' | translate }}\">\n      <adapt-rx-checkbox\n        *ngFor=\"let dataOption of dataOptions; let index = index\"\n        [(ngModel)]=\"dataOption.isSelected\"\n        label=\"{{ dataOption.name }}\"\n        [ngClass]=\"{ 'd-block form-group': index === 2 }\"\n        name=\"{{ 'data-option' + dataOption.id }}\"\n        [attr.rx-id]=\"'data-option' + dataOption.id\"\n      ></adapt-rx-checkbox>\n\n      <adapt-rx-select\n        label=\"{{ 'com.bmc.arsys.rx.client.dataload.import.wizard.tabs.options.date-format.label' | translate }}\"\n        class=\"d-block mb-1\"\n        [(ngModel)]=\"currentSheetDataImportMapping.configurations.timeFormatOptions\"\n        [options]=\"dateTimeFormatOptions\"\n        [optionFormatter]=\"optionFormatter\"\n        [optionContentTemplate]=\"optionTemplate\"\n        name=\"dateFormat\"\n        rx-id=\"date-format\"\n      >\n      </adapt-rx-select>\n\n      <div class=\"text-tertiary\" *ngIf=\"timeFormatExample\">\n        {{ 'com.bmc.arsys.rx.client.common.example.label' | translate }}:\n        {{ timeFormatExample }}\n      </div>\n    </adapt-tab-panel>\n  </adapt-tabset>\n</form>\n\n<ng-template #optionTemplate let-option>\n  <strong>{{ option.name }}</strong>\n\n  <div class=\"text-tertiary\">e.g. {{ option.example }}</div>\n</ng-template>\n"]}