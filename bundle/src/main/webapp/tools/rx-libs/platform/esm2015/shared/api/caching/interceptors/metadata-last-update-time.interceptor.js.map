{"version":3,"file":"metadata-last-update-time.interceptor.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/shared/api/caching/interceptors/metadata-last-update-time.interceptor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAwD,YAAY,EAAE,MAAM,sBAAsB,CAAC;AAC1G,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;;;AAGxD,MAAM,OAAO,mCAAmC;IAC9C,YAAoB,iBAAoC;QAApC,sBAAiB,GAAjB,iBAAiB,CAAmB;IAAG,CAAC;IAE5D,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAC9B,GAAG,CAAC,CAAC,KAAqB,EAAE,EAAE;YAC5B,IAAI,KAAK,YAAY,YAAY,EAAE;gBACjC,MAAM,sBAAsB,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;gBAE9E,IAAI,sBAAsB,EAAE;oBAC1B,IAAI,CAAC,iBAAiB,CAAC,yBAAyB,CAAC,sBAAsB,CAAC,CAAC;iBAC1E;aACF;QACH,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;;gIAfU,mCAAmC;oIAAnC,mCAAmC;2FAAnC,mCAAmC;kBAD/C,UAAU","sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { RxMetadataService } from '../metadata.service';\n\n@Injectable()\nexport class RxMetadataLastUpdateTimeInterceptor implements HttpInterceptor {\n  constructor(private rxMetadataService: RxMetadataService) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      tap((event: HttpEvent<any>) => {\n        if (event instanceof HttpResponse) {\n          const metadataLastUpdateTime = event.headers.get('metadata-last-update-time');\n\n          if (metadataLastUpdateTime) {\n            this.rxMetadataService.setMetadataLastUpdateTime(metadataLastUpdateTime);\n          }\n        }\n      })\n    );\n  }\n}\n"]}