{"version":3,"file":"connector-configuration-editor.component.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/admin/components/connector-configuration/connector-configuration-editor/connector-configuration-editor.component.ts","../../../../../../../../libs/platform/admin/components/connector-configuration/connector-configuration-editor/connector-configuration-editor.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Injector, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { DismissReasons, DockedPanelContext, RxSelectionChangeEvent } from '@bmc-ux/adapt-angular';\nimport { RecordInstance, RX_RECORD_DEFINITION, RxRecordInstanceService } from '@helix/platform/record/api';\nimport { RxNotificationService } from '@helix/platform/shared/api';\nimport { RxModalClass } from '@helix/platform/ui-kit';\nimport { isUndefined } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { RX_CONNECTOR_CONFIGURATION } from '../connector-configuration.constant';\nimport { IConnector, IConnectorConfiguration, IConnectorProfile } from '../connector-configuration.interface';\nimport { RxConnectorConfigurationService } from '../connector-configuration.service';\n\n@Component({\n  selector: 'rx-connector-configuration-editor',\n  templateUrl: './connector-configuration-editor.component.html'\n})\nexport class ConnectorConfigurationEditorComponent extends RxModalClass implements OnInit {\n  connectorConfigurationForm: FormGroup;\n  loadingConfigs: boolean;\n  loadingProfiles: boolean;\n  loadingConnectors: boolean;\n\n  connectorProfiles: IConnectorProfile[] = [];\n  connectorList: IConnector[] = [];\n  connectorConfigurations: IConnectorConfiguration[] = [];\n\n  currentRecordInstance: Observable<RecordInstance>;\n  isNewConfiguration: boolean;\n\n  constructor(\n    private dockedPanelContext: DockedPanelContext,\n    private formBuilder: FormBuilder,\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private rxNotificationService: RxNotificationService,\n    private rxConnectorConfigurationService: RxConnectorConfigurationService,\n    protected injector: Injector\n  ) {\n    super(dockedPanelContext, injector);\n  }\n\n  ngOnInit() {\n    super.ngOnInit();\n\n    this.isNewConfiguration = this.dockedPanelContext.getData().isNewConfiguration;\n    this.connectorList = this.dockedPanelContext.getData().connectorList;\n\n    this.connectorConfigurationForm = this.formBuilder.group({\n      configurationName: '',\n      connector: [\n        {\n          id: '',\n          name: ''\n        }\n      ],\n      connectorConfiguration: [\n        {\n          id: '',\n          name: ''\n        }\n      ],\n      connectorProfile: [\n        {\n          id: '',\n          name: ''\n        }\n      ]\n    });\n\n    if (!this.isNewConfiguration) {\n      this.currentRecordInstance = this.rxRecordInstanceService.get(\n        RX_CONNECTOR_CONFIGURATION.recordDefinitionName,\n        this.dockedPanelContext.getData().recordId\n      );\n\n      this.currentRecordInstance.subscribe((recordInstance) => {\n        this.connectorConfigurationForm\n          .get('configurationName')\n          .setValue(recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.targetName].value);\n\n        this.connectorConfigurationForm.get('connector').setValue([\n          {\n            id: recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorId].value,\n            name: recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorName].value\n          }\n        ]);\n\n        this.connectorConfigurationForm.get('connectorConfiguration').setValue([\n          {\n            id: recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorConfigId].value,\n            name: recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorConfigName].value\n          }\n        ]);\n\n        this.connectorConfigurationForm.get('connectorProfile').setValue(\n          recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileId].value\n            ? [\n                {\n                  id: recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileId].value,\n                  name: recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileName].value\n                }\n              ]\n            : []\n        );\n\n        this.loadConnectorConfigurations(\n          recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorId].value\n        );\n\n        this.loadConnectorProfiles(\n          recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorConfigId].value\n        );\n      });\n    }\n  }\n\n  isDirty(): boolean {\n    return this.connectorConfigurationForm.dirty;\n  }\n\n  loadConnectorConfigurations(event: RxSelectionChangeEvent): void {\n    if (this.isSelectionChangeEvent(event)) {\n      this.resetFields();\n    }\n\n    this.loadingConfigs = true;\n    const selectedConnectorId = this.isSelectionChangeEvent(event) ? event.options[0].id : event;\n\n    this.rxConnectorConfigurationService\n      .getConnectorConfigurations(selectedConnectorId)\n      .subscribe((configurations: IConnectorConfiguration[]) => {\n        this.connectorConfigurations = configurations;\n        this.loadingConfigs = false;\n      });\n  }\n\n  loadConnectorProfiles(event: RxSelectionChangeEvent): void {\n    if (this.isSelectionChangeEvent(event)) {\n      this.connectorConfigurationForm.get('connectorProfile').setValue([]);\n    }\n\n    this.loadingProfiles = true;\n\n    const selectedConfigId = this.isSelectionChangeEvent(event) ? event.options[0].id : event;\n    const selectedConnectorId = this.connectorConfigurationForm.get('connector').value[0].id;\n\n    this.rxConnectorConfigurationService\n      .getConnectorProfiles(selectedConnectorId, selectedConfigId)\n      .subscribe((profiles: IConnectorProfile[]) => {\n        this.connectorProfiles = profiles;\n        this.loadingProfiles = false;\n      });\n  }\n\n  saveConnectorConfiguration(): void {\n    if (this.isNewConfiguration) {\n      this.currentRecordInstance = this.rxRecordInstanceService.getNew(RX_CONNECTOR_CONFIGURATION.recordDefinitionName);\n    }\n\n    this.currentRecordInstance\n      .pipe(\n        map((recordInstance) => {\n          recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorId].value =\n            this.connectorConfigurationForm.value.connector[0].id;\n\n          recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorName].value =\n            this.connectorConfigurationForm.value.connector[0].name;\n\n          recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorConfigId].value =\n            this.connectorConfigurationForm.value.connectorConfiguration[0].id;\n\n          recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorConfigName].value =\n            this.connectorConfigurationForm.value.connectorConfiguration[0].name;\n\n          if (this.connectorConfigurationForm.value.connectorProfile.length) {\n            recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileId].value =\n              this.connectorConfigurationForm.value.connectorProfile[0].id;\n\n            recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileName].value =\n              this.connectorConfigurationForm.value.connectorProfile[0].name;\n          } else {\n            recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileId].value = null;\n            recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileName].value = null;\n          }\n\n          recordInstance.fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.description].value =\n            this.connectorConfigurationForm.value.configurationName;\n\n          recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.targetName].value =\n            this.connectorConfigurationForm.value.configurationName;\n\n          return recordInstance;\n        }),\n        switchMap((recordInstance) => {\n          if (this.isNewConfiguration) {\n            return this.rxRecordInstanceService.create(recordInstance);\n          } else {\n            return this.rxRecordInstanceService.save(recordInstance);\n          }\n        })\n      )\n      .subscribe(() => {\n        this.rxNotificationService.addSuccessMessage('Configuration saved successfully.');\n        this.dockedPanelContext.close(null);\n      });\n  }\n\n  optionFormatter(option: IConnector): string {\n    return option.name;\n  }\n\n  cancel(): void {\n    this.dockedPanelContext.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  private isSelectionChangeEvent(event: RxSelectionChangeEvent | string): event is RxSelectionChangeEvent {\n    return !isUndefined((event as RxSelectionChangeEvent).options);\n  }\n\n  private resetFields(): void {\n    this.connectorProfiles = [];\n    this.connectorConfigurations = [];\n    this.connectorConfigurationForm.get('connectorConfiguration').setValue([]);\n    this.connectorConfigurationForm.get('connectorProfile').setValue([]);\n    this.connectorConfigurationForm.markAsPristine();\n  }\n}\n","<div class=\"dp-body\">\n  <form [formGroup]=\"connectorConfigurationForm\">\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      rx-id=\"configuration-name\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.name.label' | translate }}\"\n      formControlName=\"configurationName\"\n      required=\"true\"\n      [readonly]=\"!isNewConfiguration\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.connector-configuration.connector-type.label' | translate }}\"\n      rx-id=\"connector\"\n      formControlName=\"connector\"\n      [options]=\"connectorList\"\n      enableFilter=\"true\"\n      [optionFormatter]=\"optionFormatter\"\n      (onSelectionChange)=\"loadConnectorConfigurations($event)\"\n      [loadingState]=\"loadingConnectors\"\n      required=\"true\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.connector-configuration.configuration.label' | translate }}\"\n      rx-id=\"connector-configuration\"\n      formControlName=\"connectorConfiguration\"\n      [options]=\"connectorConfigurations\"\n      [optionFormatter]=\"optionFormatter\"\n      enableFilter=\"true\"\n      (onSelectionChange)=\"loadConnectorProfiles($event)\"\n      [loadingState]=\"loadingConfigs\"\n      required=\"true\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.connector-configuration.profile.label' | translate }}\"\n      rx-id=\"connector-profile\"\n      formControlName=\"connectorProfile\"\n      [options]=\"connectorProfiles\"\n      [optionFormatter]=\"optionFormatter\"\n      [loadingState]=\"loadingProfiles\"\n    >\n    </adapt-rx-select>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button\n    type=\"button\"\n    adapt-button\n    size=\"small\"\n    btn-type=\"primary\"\n    rx-id=\"save-button\"\n    class=\"mr-2\"\n    [disabled]=\"connectorConfigurationForm.pristine || connectorConfigurationForm.invalid\"\n    (click)=\"saveConnectorConfiguration()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button type=\"button\" size=\"small\" adapt-button (click)=\"cancel()\" btn-type=\"secondary\" rx-id=\"cancel-button\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n"]}