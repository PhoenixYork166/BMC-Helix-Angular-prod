{"version":3,"file":"issue-reporting-configuration.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/admin/components/issue-reporting-configuration/issue-reporting-configuration.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAE,gCAAgC,EAAE,MAAM,0CAA0C,CAAC;AAG5F,OAAO,EAAE,oBAAoB,EAAE,+BAA+B,EAAE,MAAM,4BAA4B,CAAC;AACnG,OAAO,EAAE,4BAA4B,EAAE,oBAAoB,EAAE,MAAM,4BAA4B,CAAC;AAChG,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;;;;;AAK7B,MAAM,OAAO,oCAAoC;IAC/C,YACU,UAAsB,EACtB,+BAAgE,EAChE,oBAA0C,EAC1C,4BAA0D;QAH1D,eAAU,GAAV,UAAU,CAAY;QACtB,oCAA+B,GAA/B,+BAA+B,CAAiC;QAChE,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,iCAA4B,GAA5B,4BAA4B,CAA8B;IACjE,CAAC;IAEJ,cAAc;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAe,gCAAgC,CAAC,QAAQ,CAAC,CAAC;IACtF,CAAC;IAED,YAAY;QACV,OAAO,IAAI,CAAC,4BAA4B;aACrC,gBAAgB,CAAC,gCAAgC,CAAC,WAAW,CAAC;aAC9D,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAe,CAAC,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,CAAC;IAC/E,CAAC;IAED,YAAY,CAAC,SAAiB;QAC5B,OAAO,IAAI,CAAC,4BAA4B,CAAC,gBAAgB,CAAC,gCAAgC,CAAC,WAAW,EAAE;YACtG,SAAS;SACV,CAAC,CAAC;IACL,CAAC;IAED,gBAAgB;QACd,OAAO,IAAI,CAAC,+BAA+B;aACxC,IAAI,CAAC;YACJ,MAAM,EAAE;gBACN,gBAAgB,EAAE,gCAAgC,CAAC,kBAAkB,CAAC,oBAAoB;gBAC1F,eAAe,EAAE,IACf,gCAAgC,CAAC,kBAAkB,CAAC,QAAQ,CAAC,SAC/D,QAAQ,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,GAAG;gBAC9C,iBAAiB,EAAE;oBACjB,oBAAoB,CAAC,YAAY,CAAC,EAAE;oBACpC,gCAAgC,CAAC,kBAAkB,CAAC,QAAQ,CAAC,SAAS;oBACtE,gCAAgC,CAAC,kBAAkB,CAAC,QAAQ,CAAC,YAAY;iBAC1E;aACF;SACF,CAAC;aACD,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;IACzD,CAAC;;iIAxCU,oCAAoC;qIAApC,oCAAoC,cAFnC,MAAM;2FAEP,oCAAoC;kBAHhD,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { RX_ISSUE_REPORTING_CONFIGURATION } from './issue-reporting-configuration.constant';\nimport { Observable } from 'rxjs';\nimport { IOauthConfig, ISupportConfig } from './issue-reporting-configuration.types';\nimport { RX_RECORD_DEFINITION, RxRecordInstanceDataPageService } from '@helix/platform/record/api';\nimport { RxSystemConfigurationService, RxCurrentUserService } from '@helix/platform/shared/api';\nimport { map } from 'rxjs/operators';\nimport { get } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxIssueReportingConfigurationService {\n  constructor(\n    private httpClient: HttpClient,\n    private rxRecordInstanceDataPageService: RxRecordInstanceDataPageService,\n    private rxCurrentUserService: RxCurrentUserService,\n    private rxSystemConfigurationService: RxSystemConfigurationService\n  ) {}\n\n  getOauthConfig(): Observable<IOauthConfig> {\n    return this.httpClient.get<IOauthConfig>(RX_ISSUE_REPORTING_CONFIGURATION.oauthUrl);\n  }\n\n  getSupportId(): Observable<string> {\n    return this.rxSystemConfigurationService\n      .getConfiguration(RX_ISSUE_REPORTING_CONFIGURATION.settingName)\n      .pipe(map((result) => JSON.parse(result.value as string).supportId || ''));\n  }\n\n  setSupportId(supportId: string): Observable<any> {\n    return this.rxSystemConfigurationService.setConfiguration(RX_ISSUE_REPORTING_CONFIGURATION.settingName, {\n      supportId\n    });\n  }\n\n  getSupportConfig(): Observable<ISupportConfig | null> {\n    return this.rxRecordInstanceDataPageService\n      .post({\n        params: {\n          recorddefinition: RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.recordDefinitionName,\n          queryExpression: `'${\n            RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.fieldIds.loginName\n          }' = \"${this.rxCurrentUserService.getName()}\"`,\n          propertySelection: [\n            RX_RECORD_DEFINITION.coreFieldIds.id,\n            RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.fieldIds.loginName,\n            RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.fieldIds.supportEmail\n          ]\n        }\n      })\n      .pipe(map((result) => get(result, 'data[0]', null)));\n  }\n}\n"]}