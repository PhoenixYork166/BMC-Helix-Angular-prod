{"version":3,"file":"selection-field-options.component.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/components/selection-field-options/selection-field-options.component.ts","../../../../../../../libs/platform/shared/components/selection-field-options/selection-field-options.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { AdaptButtonComponent, RxSelectionChangeEvent } from '@bmc-ux/adapt-angular';\nimport { IFormControlComponent, IFormFocusable } from '@helix/platform/shared/api';\nimport { RxModalService } from '@helix/platform/ui-kit';\nimport { TranslateService } from '@ngx-translate/core';\nimport { find, forEach, isNil, map, noop, pullAllBy } from 'lodash';\nimport { ValueAccessor } from '../form-builder';\nimport { ISelectOption } from '../form-controls/select-form-control';\nimport { SelectionFieldOptionsEditorComponent } from './selection-field-options-editor.component';\nimport { ISelectionFieldOptionProperties, ISelectionOption } from './selection-field-options.interface';\n\n@Component({\n  selector: 'rx-selection-field-options',\n  templateUrl: './selection-field-options.component.html',\n  styleUrls: ['./selection-field-options.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: SelectionFieldOptionsComponent,\n      multi: true\n    }\n  ]\n})\nexport class SelectionFieldOptionsComponent\n  extends ValueAccessor<ISelectionFieldOptionProperties>\n  implements IFormControlComponent, IFormFocusable\n{\n  @Input()\n  options: ISelectionFieldOptionProperties;\n\n  @ViewChild(AdaptButtonComponent)\n  adaptButtonComponent: AdaptButtonComponent;\n\n  currentOptions: ISelectionOption[] = [];\n  defaultOption: ISelectionOption[] = [];\n\n  constructor(private rxModalService: RxModalService, private translateService: TranslateService) {\n    super();\n  }\n\n  onWriteValue(currentOptionProperties: ISelectionFieldOptionProperties): void {\n    const currentOptionsById = currentOptionProperties?.optionNamesById || this.options.optionNamesById;\n    const currentLabelsById = currentOptionProperties?.optionLabelsById || this.options.optionLabelsById;\n\n    this.currentOptions = map(currentOptionsById, (name, id) => ({\n      name,\n      id: Number(id),\n      stringKey: currentLabelsById[id]\n    }));\n\n    this.defaultOption = !isNil(currentOptionProperties?.defaultValue)\n      ? [find(this.currentOptions, { id: Number(currentOptionProperties.defaultValue) })]\n      : [];\n  }\n\n  openOptionsEditor(): void {\n    this.rxModalService\n      .openModal({\n        title: this.translateService.instant('com.bmc.arsys.rx.client.selection-field-options-editor.title'),\n        content: SelectionFieldOptionsEditorComponent,\n        data: {\n          existingOptions: this.currentOptions,\n          isReadOnly: this.options.isReadOnly\n        }\n      })\n      .then((response: Omit<ISelectionFieldOptionProperties, 'defaultValue'>) => {\n        this.value = {\n          defaultValue: this.value?.defaultValue,\n          optionNamesById: response.optionNamesById,\n          optionLabelsById: response.optionLabelsById\n        };\n\n        setTimeout(() => {\n          this.validateDefaultValue();\n        });\n      })\n      .catch(noop);\n  }\n\n  private fetchValue(options: ISelectionOption[]): ISelectionFieldOptionProperties {\n    const optionNamesById = {};\n    const optionKeysById = {};\n\n    forEach(options, (option: ISelectionOption) => {\n      optionNamesById[option.id] = option.name;\n    });\n\n    forEach(options, (option: ISelectionOption) => {\n      optionKeysById[option.id] = option.stringKey;\n    });\n\n    return { defaultValue: this.value?.defaultValue, optionNamesById, optionLabelsById: optionKeysById };\n  }\n\n  private validateDefaultValue(): void {\n    if (!isNil(this.value?.defaultValue) && !find(this.currentOptions, { id: this.value.defaultValue })) {\n      this.defaultOption = [];\n\n      this.value = {\n        ...this.value,\n        defaultValue: null\n      };\n    }\n  }\n\n  onSelectionChange(event: RxSelectionChangeEvent): void {\n    this.value = {\n      ...this.value,\n      defaultValue: event.options[0]?.id ?? null\n    };\n  }\n\n  focus(): void {\n    this.adaptButtonComponent.elem.nativeElement.focus();\n    this.openOptionsEditor();\n  }\n\n  optionFormatter(option: ISelectOption): string {\n    return option.name;\n  }\n\n  removeOption(option: ISelectionOption): void {\n    pullAllBy(this.currentOptions, [option], 'id');\n    this.validateDefaultValue();\n    this.value = this.fetchValue(this.currentOptions);\n  }\n}\n","<div class=\"d-flex\">\n  <adapt-rx-control-label\n    label=\"{{ 'com.bmc.arsys.rx.client.common.options.label' | translate }}\"\n    [showRequiredLabel]=\"true\"\n  >\n  </adapt-rx-control-label>\n\n  <adapt-button btn-type=\"tertiary\" class=\"d-icon-left-pencil p-0 ml-auto\" (click)=\"openOptionsEditor()\"\n    >{{ 'com.bmc.arsys.rx.client.common.edit.label' | translate }}\n  </adapt-button>\n</div>\n\n<div class=\"form-group tags-wrapper\">\n  <adapt-tag\n    [removable]=\"true\"\n    (remove)=\"removeOption(option)\"\n    *ngFor=\"let option of currentOptions\"\n    [type]=\"'active'\"\n    [disabled]=\"options.isReadOnly\"\n  >\n    {{ option.name }}</adapt-tag\n  >\n\n  <div class=\"fade-line position-absolute w-100 text-center\">\n    <span class=\"d-icon-ellipsis_horizontal\"></span>\n  </div>\n</div>\n\n<adapt-rx-select\n  label=\"{{ 'com.bmc.arsys.rx.client.common.default-value.label' | translate }}\"\n  [options]=\"currentOptions\"\n  (onSelectionChange)=\"onSelectionChange($event)\"\n  [(ngModel)]=\"defaultOption\"\n  [optionFormatter]=\"optionFormatter\"\n  [emptyOption]=\"true\"\n  *ngIf=\"!options.hideDefaultValue\"\n  [disabled]=\"options.isReadOnly\"\n>\n</adapt-rx-select>\n"]}