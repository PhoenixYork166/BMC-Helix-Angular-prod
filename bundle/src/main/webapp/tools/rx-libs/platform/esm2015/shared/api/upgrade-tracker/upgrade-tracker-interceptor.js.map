{"version":3,"file":"upgrade-tracker-interceptor.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/upgrade-tracker/upgrade-tracker-interceptor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAwD,YAAY,EAAE,MAAM,sBAAsB,CAAC;AAC1G,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAE,iBAAiB,EAAE,MAAM,6BAA6B,CAAC;AAChE,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;;;;AAGpE,MAAM,OAAO,2BAA2B;IACtC,YAAoB,iBAAoC,EAAU,uBAAgD;QAA9F,sBAAiB,GAAjB,iBAAiB,CAAmB;QAAU,4BAAuB,GAAvB,uBAAuB,CAAyB;IAAG,CAAC;IAEtH,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAC9B,GAAG,CAAC,CAAC,SAAyB,EAAE,EAAE;YAChC,MAAM,eAAe,GAAG,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,iBAAiB,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC;YAEvI,wFAAwF;YACxF,wFAAwF;YACxF,IAAI,CAAC,eAAe,IAAI,SAAS,YAAY,YAAY,IAAI,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBAC1F,IAAI,CAAC,uBAAuB,CAAC,mBAAmB,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;aAC1F;QACH,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;;wHAfU,2BAA2B;4HAA3B,2BAA2B;2FAA3B,2BAA2B;kBADvC,UAAU","sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { RxMetadataService } from '../caching/metadata.service';\nimport { RxUpgradeTrackerService } from './upgrade-tracker.service';\n\n@Injectable()\nexport class RxUpgradeTrackerInterceptor implements HttpInterceptor {\n  constructor(private rxMetadataService: RxMetadataService, private rxUpgradeTrackerService: RxUpgradeTrackerService) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      tap((httpEvent: HttpEvent<any>) => {\n        const isCachedRequest = this.rxMetadataService.isMetadataRequest(request) || this.rxMetadataService.isLocalizedStringsRequest(request);\n\n        // Exclude resource calls since they never have the upgrade-mode header in the response.\n        // Exclude API calls that may be cached by browser with an outdated value of the header.\n        if (!isCachedRequest && httpEvent instanceof HttpResponse && /\\/api\\/rx/.test(request.url)) {\n          this.rxUpgradeTrackerService.isUpgradeInProgress = httpEvent.headers.has('upgrade-mode');\n        }\n      })\n    );\n  }\n}\n"]}