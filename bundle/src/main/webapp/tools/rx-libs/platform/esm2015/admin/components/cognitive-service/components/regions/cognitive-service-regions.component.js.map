{"version":3,"file":"cognitive-service-regions.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/admin/components/cognitive-service/components/regions/cognitive-service-regions.component.ts","../../../../../../../../../libs/platform/admin/components/cognitive-service/components/regions/cognitive-service-regions.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { isEmpty, get, mapValues } from 'lodash';\nimport { RX_COGNITIVE_SERVICE } from '../../cognitive-service.constant';\nimport { RxCognitiveServiceService } from '../../cognitive-service.service';\nimport {\n  IUserOverlayGroupDescriptorChildren,\n  RX_OVERLAY,\n  RxNotificationService,\n  RxSystemConfigurationService\n} from '@helix/platform/shared/api';\nimport { RxSelectOption } from '@bmc-ux/adapt-angular';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'rx-cognitive-service-regions',\n  templateUrl: './cognitive-service-regions.component.html',\n  styleUrls: ['./cognitive-service-regions.component.scss']\n})\nexport class CognitiveServiceRegionsComponent implements OnInit {\n  @Input()\n  isAdministrator: boolean;\n\n  @Input()\n  currentOverlayContext: IUserOverlayGroupDescriptorChildren;\n\n  cognitiveServiceRegionConfigurationForm: FormGroup;\n  settings: RxSelectOption[] = RX_COGNITIVE_SERVICE.cognitiveServiceRegions.settings;\n\n  regions: RxSelectOption[] = RX_COGNITIVE_SERVICE.regionsList.map((region) => ({\n    ...region,\n    name: this.translateService.instant(region.name)\n  }));\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private rxCognitiveServiceService: RxCognitiveServiceService,\n    private rxNotificationService: RxNotificationService,\n    private rxSystemConfigurationService: RxSystemConfigurationService,\n    private translateService: TranslateService\n  ) {}\n\n  ngOnInit() {\n    this.cognitiveServiceRegionConfigurationForm = this.formBuilder.group({\n      naturalLanguageClassifier: [],\n      conversation: [],\n      search: [],\n      toneAnalyzer: []\n    });\n\n    this.loadSystemSettings();\n  }\n\n  isFormDirty(): boolean {\n    return this.cognitiveServiceRegionConfigurationForm.dirty;\n  }\n\n  private loadSystemSettings(): void {\n    this.rxSystemConfigurationService\n      .getConfiguration(RX_COGNITIVE_SERVICE.cognitiveServiceRegions.systemSettingsKey)\n      .subscribe((settingsData) => {\n        let watsonServiceRegionsData = JSON.parse(settingsData.value as string);\n\n        if (watsonServiceRegionsData[RX_COGNITIVE_SERVICE.credentialsProvider]) {\n          watsonServiceRegionsData = watsonServiceRegionsData[RX_COGNITIVE_SERVICE.credentialsProvider];\n\n          this.settings.forEach((setting: RxSelectOption) => {\n            if (!isEmpty(watsonServiceRegionsData[setting.id])) {\n              const value = this.regions.find((region) => region.id === watsonServiceRegionsData[setting.id]);\n\n              this.cognitiveServiceRegionConfigurationForm.controls[setting.id].setValue([value]);\n            }\n          });\n        }\n      });\n  }\n\n  optionFormatter(regionNameOption: RxSelectOption): string {\n    return regionNameOption.name;\n  }\n\n  save(): void {\n    const formValue = this.cognitiveServiceRegionConfigurationForm.getRawValue();\n\n    const configurations = mapValues(formValue, function (value) {\n      return get(value, '[0].id', '');\n    });\n\n    this.rxSystemConfigurationService\n      .setConfiguration(\n        RX_COGNITIVE_SERVICE.cognitiveServiceRegions.systemSettingsKey,\n        JSON.stringify({ WATSON: configurations })\n      )\n      .subscribe(() => {\n        this.rxNotificationService.addSuccessMessage(\n          this.translateService.instant(RX_COGNITIVE_SERVICE.notificationMessages.serviceRegionConfigurationSaved)\n        );\n\n        this.cognitiveServiceRegionConfigurationForm.markAsPristine();\n      });\n  }\n\n  isSaveButtonDisabled(): boolean {\n    return this.cognitiveServiceRegionConfigurationForm.pristine;\n  }\n\n  isSaveButtonVisible(): boolean {\n    return (\n      this.isAdministrator &&\n      this.currentOverlayContext.overlayGroupId !== RX_OVERLAY.overlayGroupIds.base &&\n      !this.currentOverlayContext.isShared\n    );\n  }\n}\n","<form [formGroup]=\"cognitiveServiceRegionConfigurationForm\">\n  <adapt-accordion rx-id=\"accordion-cognitive-service-region\">\n    <adapt-accordion-tab\n      title=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-service.regions.title' | translate }}\"\n      isOpen=\"true\"\n    >\n      <adapt-alert\n        class=\"mb-4\"\n        [config]=\"{\n          type: 'inline',\n          variant: 'warning',\n          content: 'com.bmc.arsys.rx.client.admin.cognitive-service.regions.warning' | translate\n        }\"\n      ></adapt-alert>\n\n      <div\n        *ngFor=\"let setting of settings\"\n        [attr.rx-id]=\"'select-block-cognitive-service-region--' + setting.id\"\n        class=\"form-group\"\n      >\n        <adapt-rx-select\n          emptyOption=\"true\"\n          [formControlName]=\"setting.id\"\n          [label]=\"setting.name\"\n          [options]=\"regions\"\n          [optionFormatter]=\"optionFormatter\"\n          class=\"d-block\"\n        ></adapt-rx-select>\n      </div>\n    </adapt-accordion-tab>\n\n    <button\n      adapt-button\n      type=\"button\"\n      rx-id=\"save-button\"\n      btn-type=\"primary\"\n      class=\"mt-4\"\n      [disabled]=\"isSaveButtonDisabled()\"\n      *ngIf=\"isSaveButtonVisible()\"\n      (click)=\"save()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </adapt-accordion>\n</form>\n"]}