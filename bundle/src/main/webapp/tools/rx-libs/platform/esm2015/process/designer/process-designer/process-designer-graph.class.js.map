{"version":3,"file":"process-designer-graph.class.js","sourceRoot":"","sources":["../../../../../../../libs/platform/process/designer/process-designer/process-designer-graph.class.ts"],"names":[],"mappings":"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","sourcesContent":["import { chain, clone, has, isFunction, pick } from 'lodash';\n\nimport { RxIdService, RxJsonParserService } from '@helix/platform/utils';\nimport { IDesignerGraph, IDesignerGraphConfig } from '@helix/platform/shared/api';\nimport { RX_DESIGNER_CANVAS } from '@helix/platform/shared/components';\nimport {\n  IProcessDefinition,\n  IProcessFlowElementDefinition,\n  ISubProcessDefinition,\n  RxProcessElementRegistryService,\n  RxProcessElementSearchService\n} from '@helix/platform/process/api';\nimport {\n  IProcessDefinitionModel,\n  RxEndEventService,\n  RxProcessService,\n  RxStartEventService\n} from '@helix/platform/process/elements';\n\ndeclare var joint: any;\n\nexport class RxProcessDesignerGraph\n  extends joint.dia.Graph\n  implements IDesignerGraph<IProcessDefinition, IProcessDefinitionModel>\n{\n  rxEndEventService: RxEndEventService;\n  rxIdService: RxIdService;\n  rxJsonParserService: RxJsonParserService;\n  rxProcessElementRegistryService: RxProcessElementRegistryService;\n  rxProcessElementSearchService: RxProcessElementSearchService;\n  rxProcessService: RxProcessService;\n  rxStartEventService: RxStartEventService;\n\n  constructor(config: IDesignerGraphConfig) {\n    super(config.options);\n\n    this.rxEndEventService = config.injector.get(RxEndEventService);\n    this.rxIdService = config.injector.get(RxIdService);\n    this.rxJsonParserService = config.injector.get(RxJsonParserService);\n    this.rxProcessElementRegistryService = config.injector.get(RxProcessElementRegistryService);\n    this.rxProcessElementSearchService = config.injector.get(RxProcessElementSearchService);\n    this.rxProcessService = config.injector.get(RxProcessService);\n    this.rxStartEventService = config.injector.get(RxStartEventService);\n  }\n\n  // joint.dia.Graph methods\n  reset(): void {\n    this.off('add');\n    this.off('change');\n\n    this.clear();\n  }\n\n  // Custom methods\n  addDefaultElements(definitionModel: IProcessDefinitionModel): void {\n    this.addCell(\n      this.rxProcessService.getShape({\n        definitionModel,\n        id: this.get('processId')\n      })\n    );\n\n    const isGraphEmpty = chain(this.getCells())\n      .reject({ id: this.get('processId') })\n      .isEmpty()\n      .value();\n\n    if (isGraphEmpty) {\n      const elementSize = 30;\n\n      this.addCells([\n        this.rxStartEventService.getShape({\n          position: {\n            x: elementSize,\n            y: (RX_DESIGNER_CANVAS.paperOptions.height - elementSize) / 2\n          }\n        }),\n\n        this.rxEndEventService.getShape({\n          position: {\n            x: RX_DESIGNER_CANVAS.paperOptions.width - 2 * elementSize,\n            y: (RX_DESIGNER_CANVAS.paperOptions.height - elementSize) / 2\n          }\n        })\n      ]);\n    }\n  }\n\n  // TODO-VS: update when element shapes logic is implemented\n  getDefinitionFromGraph(): Partial<IProcessDefinition> {\n    return {\n      ...this.getDefinitionBase(this.getCell(this.get('processId'))),\n      flowElements: this.getFlowElements(this.getCells()),\n      layout: this.getLayout(this.get('cells').models)\n    };\n  }\n\n  // TODO-VS: update types\n  loadGraphFromDefinition(definition: IProcessDefinition): any {\n    return this.fromJSON(this.getJsonObject(definition));\n  }\n\n  // TODO-VS: update types\n  private getDefinitionBase(processCell: any): Partial<IProcessDefinition> {\n    return this.rxProcessService.getDefinitionFromModel(processCell.prop('definitionModel'));\n  }\n\n  // TODO-VS: update types\n  private getFlowElements(cells: any[]): Array<ISubProcessDefinition | Partial<IProcessFlowElementDefinition>> {\n    return chain(cells)\n      .reject({ id: this.get('processId') })\n      .map((cell) => {\n        const elementModel = cell.prop('elementModel');\n\n        const elementService = this.rxProcessElementRegistryService.get(elementModel.type).elementService;\n\n        return elementService.getDefinitionFromModel(elementModel);\n      })\n      .value();\n  }\n\n  // TODO-VS: update types\n  private getJsonObject(definition: IProcessDefinition): any {\n    const jsonObject = this.rxJsonParserService.tryParseJson(definition.layout, { cells: [] });\n\n    jsonObject.cells.forEach((cell) => {\n      const embeddedElementIds = chain(jsonObject.cells).filter({ parent: cell.id }).map('id').value();\n\n      if (embeddedElementIds.length) {\n        cell.embeds = embeddedElementIds;\n      }\n\n      cell.ownerProcessDefinitionName = definition.lastUpdateTime ? definition.name : definition.guid;\n\n      const flowElement = this.rxProcessElementSearchService.findByGuid(definition, this.rxIdService.get(cell.id));\n\n      const elementService = this.rxProcessElementRegistryService.get(cell.type).elementService;\n\n      cell.elementModel = elementService.getModelFromDefinition(flowElement);\n    });\n\n    return jsonObject;\n  }\n\n  // TODO-VS: update types\n  private getLayout(models: any[]): string {\n    const cells = chain(models)\n      .reject({ id: this.get('processId') })\n      .map((cell) => {\n        if (isFunction(cell.getLayout)) {\n          return this.adaptCell(cell.getLayout());\n        }\n      })\n      .value();\n\n    return cells.length ? JSON.stringify({ cells: cells }) : null;\n  }\n\n  // TODO-VS: update types\n  private adaptCell(cell: any) {\n    return this.removeRedundantProperties(cell);\n  }\n\n  // remove properties from the process and sub-process layouts\n  // that are set programmatically and don't have to be persisted\n  // TODO-VS: update types\n  private removeRedundantProperties(cell: any): any {\n    let attrs;\n\n    if (has(cell, 'attrs[\".label\"]')) {\n      attrs = {\n        '.label': clone(cell.attrs['.label'])\n      };\n    }\n\n    // list of properties that must be kept in the layout, all others will be set programmatically\n    let adaptedCell = pick<any>(cell, [\n      'collapsedSize',\n      'content',\n      'expanded',\n      'flowType',\n      'id',\n      'labels',\n      'parent',\n      'position',\n      'size',\n      'source',\n      'target',\n      'type',\n      'vertices',\n      'z'\n    ]);\n\n    if (attrs) {\n      adaptedCell.attrs = attrs;\n    }\n\n    return adaptedCell;\n  }\n}\n"]}