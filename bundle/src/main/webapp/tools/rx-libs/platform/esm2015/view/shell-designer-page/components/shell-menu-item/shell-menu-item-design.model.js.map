{"version":3,"file":"shell-menu-item-design.model.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/shell-designer-page/components/shell-menu-item/shell-menu-item-design.model.ts"],"names":[],"mappings":"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","sourcesContent":["import { IFormControlBuilderConfig, IPlainObject, RX_PERMISSION, Tooltip } from '@helix/platform/shared/api';\nimport {\n  IViewDefinition,\n  IViewDefinitionPermission,\n  IViewDesignerComponentModel,\n  IViewLayout,\n  OpenViewActionLaunchBehavior,\n  OpenViewActionModalSize,\n  OpenViewActionType,\n  RX_LAUNCH_BEHAVIOR,\n  RX_SHELL,\n  RxViewDefinitionCacheService,\n  RxViewLayout\n} from '@helix/platform/view/api';\nimport {\n  IComponentPermissionEditorConfig,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  IViewDesignerInspectorSectionConfig,\n  RxComponentPermissionEditorWidgetComponent,\n  validateCssClassName,\n  validateCssClassNames,\n  ViewDesignerComponentModel,\n  ViewDesignerFacade\n} from '@helix/platform/view/designer';\nimport {\n  IconPickerFormControlComponent,\n  ISelectFormControlOptions,\n  ITagsFormControlOptions,\n  ITextFormControlOptions,\n  SelectFormControlComponent,\n  SwitchFormControlComponent,\n  TagsFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport { forEach, isEmpty, keys, map as _map, pick, reject, transform, trim } from 'lodash';\nimport { IRxShellMenuItemProperties } from './shell-menu-item-design.types';\nimport { map, pairwise, pluck, skip, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { RxOpenViewModelHelperService } from '@helix/platform/view/actions';\n\nexport interface IShellActionDescriptor {\n  name: string;\n  label: string;\n  parameters?: IFormControlBuilderConfig[];\n  requiredParams?: IPlainObject;\n  defaultParams?: IPlainObject;\n}\n\nexport class RxShellMenuItemDesignModel\n  extends ViewDesignerComponentModel<IRxShellMenuItemProperties>\n  implements IViewDesignerComponentModel<IRxShellMenuItemProperties>\n{\n  componentProperties$: Observable<IRxShellMenuItemProperties> = this.sandbox.componentProperties$;\n  label$ = this.componentProperties$.pipe(pluck('menuItemName'));\n\n  isActionItem$: Observable<boolean> = this.sandbox.getParentComponentGuid().pipe(\n    switchMap((guid) => this.sandbox.getLayout(guid)),\n    map((layout) => this.isActionItem(layout))\n  );\n\n  menuItemIcon$: Observable<string> = this.sandbox.getComponentPropertyValue('menuItemIcon');\n  iconClass$ = this.menuItemIcon$.pipe(map((className) => (className ? `d-icon-left-${className}` : '')));\n  menuItemNameLabel = 'Label';\n\n  rxViewDefinitionCacheService = this.injector.get(RxViewDefinitionCacheService);\n  viewDesignerFacade = this.injector.get(ViewDesignerFacade);\n  rxOpenViewModelHelperService = this.injector.get(RxOpenViewModelHelperService);\n\n  shellActions: { [actionName: string]: IShellActionDescriptor } = {\n    [RX_SHELL.actions.launchURL]: {\n      name: RX_SHELL.actions.launchURL,\n      label: 'Launch URL',\n      parameters: [\n        {\n          name: 'url',\n          component: TextFormControlComponent,\n          options: {\n            label: 'URL',\n            required: true\n          } as ITextFormControlOptions\n        },\n        {\n          name: 'launchBehavior',\n          component: SelectFormControlComponent,\n          options: {\n            label: 'Launch behavior',\n            options: _map(RX_LAUNCH_BEHAVIOR, (value) => ({\n              name: value.content,\n              id: value.value\n            })),\n            required: true,\n            sortAlphabetically: false\n          } as ISelectFormControlOptions\n        }\n      ],\n      requiredParams: {\n        url: 'URL',\n        launchBehavior: 'Launch behavior'\n      },\n      defaultParams: {\n        url: null,\n        launchBehavior: RX_LAUNCH_BEHAVIOR.newWindow.value\n      }\n    },\n    [RX_SHELL.actions.navigateToView]: {\n      name: RX_SHELL.actions.navigateToView,\n      label: 'Open view',\n      requiredParams: {\n        viewDefinitionName: 'View'\n      },\n      defaultParams: {\n        viewDefinitionName: null,\n        'viewParams.*': null,\n        'presentation.type': OpenViewActionType.FullWidth,\n        'presentation.launchBehavior': OpenViewActionLaunchBehavior.SameWindow,\n        'presentation.modalSize': null,\n        'presentation.title': null\n      }\n    },\n    [RX_SHELL.actions.navigateToSmartReporting]: {\n      name: RX_SHELL.actions.navigateToSmartReporting,\n      label: 'Navigate to Smart Reporting'\n    }\n  };\n\n  private viewDefinitionName$: Observable<string> = this.sandbox.getComponentPropertyValue('viewDefinitionName');\n\n  private inputParams$ = this.viewDefinitionName$.pipe(\n    switchMap((viewDefinitionName) => this.getViewInputParams(viewDefinitionName)),\n    map((params) => _map(params, 'name')),\n    tap((currentViewInputNames) => {\n      this.currentViewInputNames = currentViewInputNames;\n    })\n  );\n\n  private currentViewInputNames: string[] = [];\n\n  isInShellRoot: boolean;\n\n  private isInShellRoot$: Observable<boolean> = this.sandbox.getParentComponentGuid().pipe(\n    switchMap((guid) => this.viewDesignerFacade.getComponentType(guid)),\n    map((type) => type === RX_SHELL.componentName),\n    tap<boolean>((isInShellRoot) => (this.isInShellRoot = isInShellRoot))\n  );\n\n  static getInitialProperties(initialProperties?: IRxShellMenuItemProperties): IRxShellMenuItemProperties {\n    const result: IRxShellMenuItemProperties = {\n      menuItemName: 'New menu item',\n      menuItemIcon: null,\n      hidden: false,\n      styles: null,\n\n      actionName: RX_SHELL.actions.navigateToView,\n      'presentation.type': OpenViewActionType.FullWidth,\n      'presentation.launchBehavior': OpenViewActionLaunchBehavior.SameWindow,\n\n      ...initialProperties\n    };\n\n    // navigateToState not supported anymore, so converting to navigateToView\n    if (result.actionName === RX_SHELL.actions.navigateToState) {\n      result.actionName = RX_SHELL.actions.navigateToView;\n\n      delete result.state;\n    }\n\n    if (result.actionName === RX_SHELL.actions.navigateToView) {\n      result['presentation.modalSize'] = OpenViewActionModalSize.Medium;\n    }\n\n    return result;\n  }\n\n  static getDefaultPermissions(): IViewDefinitionPermission[] {\n    return [\n      {\n        ownerId: RX_PERMISSION.permissionDialogMetadata.viewComponent.defaultPermission,\n        type: RX_PERMISSION.permissionDialogMetadata.viewComponent.defaultPermittedAction\n      } as IViewDefinitionPermission\n    ];\n  }\n\n  rxInit(): void {\n    combineLatest([this.componentProperties$, this.inputParams$, this.isInShellRoot$, this.isActionItem$]).subscribe(\n      ([props, inputParams, isInShellRoot, isActionItem]) => {\n        this.sandbox.updateInspectorConfig(this.getInspector(props, inputParams, isInShellRoot, isActionItem));\n        this.sandbox.setValidationIssues(this.validate(props));\n      }\n    );\n\n    // clear view input params after viewDefinitionName is changed\n    this.viewDefinitionName$\n      .pipe(skip(1), withLatestFrom(this.componentProperties$))\n      .subscribe(([viewDefinitionName, props]) => {\n        const viewParams = this.getEmptyViewParams(props);\n\n        if (!isEmpty(viewParams)) {\n          this.sandbox.updateComponentProperties(viewParams);\n        }\n      });\n\n    this.sandbox.getComponentPropertyValue('menuItemName').subscribe((menuGroupName) => {\n      this.sandbox.setBreadcrumbs(menuGroupName);\n    });\n\n    // clear previous action properties after actionName is changed\n    this.sandbox\n      .getComponentPropertyValue('actionName')\n      .pipe(pairwise(), withLatestFrom(this.componentProperties$))\n      .subscribe(([[prevActionName, actionName], props]) => {\n        const prevProps = this.getActionDefaultProps(prevActionName, props);\n        const nextProps = this.getActionDefaultProps(actionName, props);\n        const result = { ...prevProps, ...nextProps };\n\n        if (!isEmpty(result)) {\n          this.sandbox.updateComponentProperties(result);\n        }\n      });\n  }\n\n  getPropertiesByName(props: IRxShellMenuItemProperties): IRxShellMenuItemProperties {\n    const componentProps = ['menuItemName', 'menuItemIcon', 'hidden', 'styles', 'actionName'];\n    const viewParams =\n      props.actionName === RX_SHELL.actions.navigateToView\n        ? this.currentViewInputNames.map((name) => `viewParams.${name}`)\n        : [];\n\n    const actionProps = reject(this.getActionProps(props.actionName, props), (prop) => {\n      return props['presentation.type'] === OpenViewActionType.FullWidth\n        ? prop === 'presentation.modalSize' || prop === 'presentation.title'\n        : prop === 'presentation.launchBehavior';\n    });\n\n    return pick(props, ...componentProps, ...actionProps, ...viewParams) as IRxShellMenuItemProperties;\n  }\n\n  private getEmptyViewParams(props: IRxShellMenuItemProperties): IPlainObject {\n    return transform(\n      props,\n      (result, value, key) => {\n        if (key.startsWith('viewParams')) {\n          result[key] = null;\n        }\n      },\n      {}\n    );\n  }\n\n  private getActionDefaultProps(actionName: string, props: IRxShellMenuItemProperties): IPlainObject {\n    const currentAction = this.shellActions[actionName];\n\n    return transform(\n      currentAction.defaultParams,\n      (res, value: any, name: string) => {\n        if (name.endsWith('.*')) {\n          const key = name.replace('*', '');\n\n          forEach(props, (propValue, propName) => {\n            if (propName.startsWith(key)) {\n              res[propName] = value;\n            }\n          });\n        } else {\n          res[name] = value;\n        }\n      },\n      {}\n    );\n  }\n\n  private getActionProps(actionName: string, props: IRxShellMenuItemProperties): string[] {\n    const currentAction = this.shellActions[actionName];\n\n    return transform(\n      currentAction.defaultParams,\n      (res, value: any, name: string) => {\n        if (!name.endsWith('.*')) {\n          res.push(name);\n        }\n      },\n      []\n    );\n  }\n\n  private getInspector(\n    props: IRxShellMenuItemProperties,\n    viewInputParamNames: string[],\n    isInShellRoot: boolean,\n    isActionItem = false\n  ): IViewDesignerInspectorConfig {\n    const inspector: IViewDesignerInspectorConfig = {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'menuItemName',\n              component: TextFormControlComponent,\n              options: {\n                label: this.menuItemNameLabel,\n                required: true\n              }\n            },\n            {\n              name: 'hidden',\n              component: SwitchFormControlComponent,\n              options: {\n                label: 'Hidden'\n              }\n            },\n            {\n              name: 'styles',\n              component: TagsFormControlComponent,\n              options: {\n                label: 'CSS classes',\n                placeholder: 'Add CSS classes',\n                tooltip: new Tooltip('Enter CSS class names to apply to this view component.'),\n                errorCheck: validateCssClassName\n              } as ITagsFormControlOptions\n            },\n            {\n              component: RxComponentPermissionEditorWidgetComponent,\n              options: {\n                label: 'Permissions',\n                type: 'view',\n                componentGuid: this.sandbox.guid\n              } as IComponentPermissionEditorConfig\n            }\n          ]\n        }\n      ]\n    };\n\n    const menuItemIconControl = {\n      name: 'menuItemIcon',\n      component: IconPickerFormControlComponent,\n      options: {\n        label: 'Icon'\n      }\n    };\n\n    if (!isInShellRoot || isActionItem) {\n      inspector.inspectorSectionConfigs[0].controls.splice(1, 0, menuItemIconControl);\n    }\n\n    const actionSection: IViewDesignerInspectorSectionConfig = {\n      label: 'Action',\n      controls: [\n        {\n          name: 'actionName',\n          component: SelectFormControlComponent,\n          options: {\n            label: 'Action name',\n            options: _map(this.shellActions, (actionDescriptor) => ({\n              name: actionDescriptor.label,\n              id: actionDescriptor.name\n            }))\n          } as ISelectFormControlOptions\n        }\n      ]\n    };\n\n    inspector.inspectorSectionConfigs.push(actionSection);\n\n    if (props.actionName) {\n      const actionDescriptor = this.shellActions[props.actionName];\n\n      if (actionDescriptor?.parameters?.length) {\n        actionSection.controls.push(...actionDescriptor.parameters);\n      }\n\n      if (props.actionName === RX_SHELL.actions.navigateToView) {\n        actionSection.controls.push(\n          ...this.rxOpenViewModelHelperService.getOpenViewInspector(\n            viewInputParamNames.map((name) => ({ name })),\n            props['presentation.type'],\n            props['presentation.modalSize'],\n            this.expressionConfigurator\n          )\n        );\n      }\n    }\n\n    return inspector;\n  }\n\n  protected validate(props: IRxShellMenuItemProperties): IViewComponentDesignValidationIssue[] {\n    const validationIssues: IViewComponentDesignValidationIssue[] = [];\n\n    if (!trim(props.menuItemName)) {\n      validationIssues.push(this.sandbox.createError('Label cannot be blank.', 'menuItemName'));\n    }\n\n    validationIssues.push(...this.validateActionParams(props), ...validateCssClassNames(props.styles));\n\n    return validationIssues;\n  }\n\n  private validateActionParams(props: IRxShellMenuItemProperties): IViewComponentDesignValidationIssue[] {\n    const validationIssues: IViewComponentDesignValidationIssue[] = [];\n    const currentAction = this.shellActions[props.actionName];\n\n    (keys(currentAction.requiredParams) || [])\n      .filter((param) => !props[param])\n      .forEach((param) => {\n        validationIssues.push(\n          this.sandbox.createError(`${currentAction.requiredParams[param] || param} cannot be blank.`, param)\n        );\n      });\n\n    return validationIssues;\n  }\n\n  private getViewInputParams(viewDefinitionName: string): Observable<IViewDefinition['inputParams']> {\n    return viewDefinitionName\n      ? this.rxViewDefinitionCacheService.getViewDefinition(viewDefinitionName).pipe(pluck('inputParams'))\n      : of([]);\n  }\n\n  private isActionItem(layout: IViewLayout): boolean {\n    const actionOutlet = layout?.outlets.find((outlet) => outlet.name === RX_SHELL.outlets.actions);\n\n    return (actionOutlet && RxViewLayout.outletHasChild(actionOutlet, this.sandbox.guid)) || false;\n  }\n}\n"]}