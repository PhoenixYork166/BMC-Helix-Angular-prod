{"version":3,"file":"record-designer-expression-configurator.class.js","sourceRoot":"","sources":["../../../../../../../libs/platform/record/designer/record-designer/record-designer-expression-configurator.class.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,oBAAoB,EAAE,8BAA8B,EAAE,MAAM,4BAA4B,CAAC;AAClG,OAAO,EACL,uBAAuB,EACvB,6BAA6B,EAI7B,wBAAwB,EACzB,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACvD,OAAO,EAAE,GAAG,EAAc,EAAE,EAAE,MAAM,MAAM,CAAC;AAC3C,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAGrC,MAAM,OAAO,oCAAqC,SAAQ,wBAAwB;IAkBhF,YAAoB,QAAkB;QACpC,KAAK,EAAE,CAAC;QADU,aAAQ,GAAR,QAAQ,CAAU;QAjBtC,mCAA8B,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;QACnF,qBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAEvD,0BAAqB,GAAgC,EAAE,CAAC,EAAE,CAAC,CAAC;QAE3C,iBAAY,GAA0B;YACrD,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,oDAAoD,CAAC;YAC1F,MAAM,EAAE,IAAI;YACZ,QAAQ,EAAE;gBACR;oBACE,KAAK,EAAE,MAAM;oBACb,IAAI,EAAE,eAAe;oBACrB,UAAU,EAAE,QAAQ;iBACrB;aACF;SACF,CAAC;IAIF,CAAC;IAED,gBAAgB;QACd,uCACK,KAAK,CAAC,gBAAgB,EAAE,KAC3B,SAAS,EAAE,6BAA6B,CAAC,GAAG,CAAC,uBAAuB,CAAC,SAAS,CAAC,IAC/E;IACJ,CAAC;IAED,8BAA8B,CAC5B,eAAuC,EACvC,QAAgB;QAEhB,MAAM,IAAI,GAA0B;YAClC,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,wDAAwD,CAAC;YAC9F,QAAQ,EAAE,IAAI;SACf,CAAC;QAEF,OAAO,GAAG,CACR,GAAG,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,cAAc,EACtC,IAAI,CAAC,8BAA8B,CAAC,mBAAmB,CAAC,GAAG,QAAQ,IAAI,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CACjG,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;YACnB,MAAM,EAAE,UAAU,CAAC,gBAAgB;SACpC,CAAC,CAAC,CACJ,EACD,EAAE,CAAC,eAAe,CAAC,CACpB,CAAC,IAAI,CACJ,GAAG,CAAC,CAAC,KAA6B,EAAE,EAAE;YACpC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,MAAM;iBACzB,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,YAAY,KAAK,oBAAoB,CAAC,SAAS,CAAC,UAAU,CAAC,YAAY,CAAC;iBAChG,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;gBACf,KAAK,EAAE,KAAK,CAAC,IAAI;gBACjB,IAAI,EAAE,iCAAiC;gBACvC,UAAU,EAAE,IAAI,KAAK,CAAC,IAAI,GAAG;aAC9B,CAAC,CAAC,CAAC;YAEN,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;QACnC,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { Injector } from '@angular/core';\nimport { RX_RECORD_DEFINITION, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport {\n  ExpressionOperatorGroup,\n  ExpressionOperatorRowsByGroup,\n  IDataDictionary,\n  IDataDictionaryBranch,\n  IExpressionConfiguratorDefaultPropertyConfig,\n  RxExpressionConfigurator\n} from '@helix/platform/shared/api';\nimport { TranslateService } from '@ngx-translate/core';\nimport { iif, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { IRecordDefinitionModel } from '../record-designer.types';\n\nexport class RecordDesignerExpressionConfigurator extends RxExpressionConfigurator {\n  rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n  translateService = this.injector.get(TranslateService);\n\n  commonDataDictionary$: Observable<IDataDictionary> = of([]);\n\n  private readonly generalGroup: IDataDictionaryBranch = {\n    label: this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),\n    hidden: true,\n    children: [\n      {\n        label: 'NULL',\n        icon: 'd-icon-dollar',\n        expression: '$NULL$'\n      }\n    ]\n  };\n\n  constructor(private injector: Injector) {\n    super();\n  }\n\n  getDefaultConfig(): IExpressionConfiguratorDefaultPropertyConfig {\n    return {\n      ...super.getDefaultConfig(),\n      operators: ExpressionOperatorRowsByGroup.get(ExpressionOperatorGroup.AllClient)\n    };\n  }\n\n  recordExpressionDataDictionary(\n    definitionModel: IRecordDefinitionModel,\n    bundleId: string\n  ): Observable<IDataDictionary> {\n    const data: IDataDictionaryBranch = {\n      label: this.translateService.instant('com.bmc.arsys.rx.client.common.record-definition.label'),\n      expanded: true\n    };\n\n    return iif(\n      () => !!definitionModel.lastUpdateTime,\n      this.rxRecordDefinitionCacheService.getRecordDefinition(`${bundleId}:${definitionModel.name}`).pipe(\n        map((definition) => ({\n          fields: definition.fieldDefinitions\n        }))\n      ),\n      of(definitionModel)\n    ).pipe(\n      map((model: IRecordDefinitionModel) => {\n        data.children = model.fields\n          .filter((field) => field.resourceType !== RX_RECORD_DEFINITION.dataTypes.attachment.resourceType)\n          .map((field) => ({\n            label: field.name,\n            icon: 'd-icon-arrow_right_square_input',\n            expression: `'${field.name}'`\n          }));\n\n        return [data, this.generalGroup];\n      })\n    );\n  }\n}\n"]}