{"version":3,"file":"runtime-view-layout.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/runtime/layout/runtime-view-layout.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { ComponentFactoryResolver, Injectable } from '@angular/core';\nimport {\n  IViewComponentDefinitionWithParent,\n  IViewDefinition,\n  IViewLayout,\n  RxOldViewLayoutAdapterService,\n  RxViewComponentRegistryService,\n  RxViewComponentType,\n  RxViewDefinitionParserService\n} from '@helix/platform/view/api';\nimport { RxTreeService, RxJsonParserService } from '@helix/platform/utils';\nimport { RuntimeViewRootComponent } from '../components/runtime-component/runtime-view-root.component';\nimport { RuntimeViewModelApi } from '../runtime-view-model-api.class';\nimport { RuntimeViewModel } from '../runtime-view.model';\nimport { RuntimeLayoutItem } from './runtime-layout-item.class';\nimport { RxLogService } from '@helix/platform/shared/api';\n\n/**\n * @desc Represents runtime component tree\n */\n@Injectable()\nexport class RuntimeViewLayoutService {\n  layout: RuntimeLayoutItem;\n\n  private runtimeViewModel: RuntimeViewModel;\n  private runtimeViewModelApi: RuntimeViewModelApi;\n\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private viewDefinitionParserService: RxViewDefinitionParserService,\n    private factoryResolver: ComponentFactoryResolver,\n    private tree: RxTreeService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxLogService: RxLogService,\n    private rxOldViewLayoutAdapterService: RxOldViewLayoutAdapterService\n  ) {}\n\n  clear() {\n    this.layout = null;\n  }\n\n  init(runtimeViewModel: RuntimeViewModel, runtimeViewModelApi: RuntimeViewModelApi) {\n    this.runtimeViewModel = runtimeViewModel;\n    this.runtimeViewModelApi = runtimeViewModelApi;\n\n    this.viewDefinitionParserService\n      .getComponents(runtimeViewModel.viewDefinition)\n      .forEach(this.processDefinition.bind(this));\n  }\n\n  private processDefinition(componentDefinitionItem: IViewComponentDefinitionWithParent): void {\n    this.rxOldViewLayoutAdapterService.convertLayout(componentDefinitionItem);\n\n    if (!componentDefinitionItem.parentComponentDefinition) {\n      this.initializeView((componentDefinitionItem as any).componentDefinition as IViewDefinition);\n    } else {\n      const componentDescriptor = this.rxViewComponentRegistryService.get(\n        componentDefinitionItem.componentDefinition.type\n      );\n\n      if (\n        componentDefinitionItem.componentDefinition.type !== RxViewComponentType.Action &&\n        componentDescriptor &&\n        !this.runtimeViewModel.isDataViewComponentDefinition(componentDescriptor)\n      ) {\n        // todo move this logic to separate method\n        const parentComponentDefinitionLayout = JSON.parse(\n          componentDefinitionItem.parentComponentDefinition.layout\n        ) as IViewLayout;\n\n        let columnIndex = 0;\n        const parentOutlet = parentComponentDefinitionLayout.outlets.find((outlet) => {\n          return outlet.columns.find((col, colIndex) => {\n            const includes = col.children.includes(componentDefinitionItem.componentDefinition.guid);\n\n            if (includes) {\n              columnIndex = colIndex;\n            }\n\n            return includes;\n          });\n        });\n\n        if (parentOutlet) {\n          const viewComponentConfig = this.runtimeViewModel.viewComponentStates\n            .get(componentDefinitionItem.componentDefinition.guid)\n            .config$.asObservable();\n\n          const parentLayoutItem = this.getLayoutItem(componentDefinitionItem.parentComponentDefinition.guid);\n\n          parentLayoutItem.addLayoutItem(\n            new RuntimeLayoutItem({\n              guid: componentDefinitionItem.componentDefinition.guid,\n              config: viewComponentConfig,\n              parent: parentLayoutItem,\n              runtimeViewModelApi: this.runtimeViewModelApi,\n              outlets: componentDescriptor.outlets,\n              factory: componentDescriptor.componentFactory\n            }),\n            {\n              parentOutlet,\n              columnIndex\n            }\n          );\n        } else {\n          const component = componentDefinitionItem.componentDefinition;\n\n          this.rxLogService.warning(\n            `Cannot render view component. ${component.type} (${component.guid}) is not used in layout.`\n          );\n        }\n      }\n    }\n  }\n\n  private initializeView(viewDefinition: IViewDefinition): void {\n    const layout: IViewLayout = this.rxJsonParserService.tryParseJson(viewDefinition.layout);\n\n    this.layout = new RuntimeLayoutItem({\n      guid: viewDefinition.guid,\n      parent: null,\n      runtimeViewModelApi: this.runtimeViewModelApi,\n      outlets: layout.outlets,\n      factory: this.factoryResolver.resolveComponentFactory(RuntimeViewRootComponent)\n    });\n  }\n\n  private getLayoutItem(guid: string): RuntimeLayoutItem {\n    const flattenedLayoutItems = this.tree.flattenBy(this.layout, (currentLayout) => {\n      return currentLayout.outlets.reduce((result, outlet) => {\n        outlet.columns.forEach((column) => {\n          column.children.forEach((canvasLayout) => {\n            result.push(canvasLayout);\n          });\n        });\n\n        return result;\n      }, []);\n    });\n\n    return flattenedLayoutItems.find((flattenedLayoutItem) => flattenedLayoutItem.guid === guid);\n  }\n}\n"]}