{"version":3,"file":"view-designer.effects.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/designer/+state/view-designer.effects.ts"],"names":[],"mappings":";AACA,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EACL,oBAAoB,EACpB,kCAAkC,EAClC,uBAAuB,EACvB,yBAAyB,EACzB,oBAAoB,EACpB,YAAY,EACb,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,cAAc,EAAE,sBAAsB,EAAE,MAAM,wBAAwB,CAAC;AAChF,OAAO,EAAE,aAAa,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAC3E,OAAO,EAQL,kBAAkB,EAClB,6BAA6B,EAC7B,4CAA4C,EAC5C,2BAA2B,EAC3B,8BAA8B,EAC9B,mBAAmB,EACnB,6BAA6B,EAC7B,uBAAuB,EACvB,YAAY,EACZ,yBAAyB,EAC1B,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,eAAe,CAAC;AACxD,OAAO,EAAU,KAAK,EAAE,MAAM,aAAa,CAAC;AAC5C,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAC;AACvF,OAAO,EAAE,IAAI,EAAc,EAAE,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AACxD,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAC3F,OAAO,EAAE,+BAA+B,EAAE,MAAM,yCAAyC,CAAC;AAC1F,OAAO,EAAE,sBAAsB,EAAE,MAAM,wBAAwB,CAAC;AAChE,OAAO,EAAE,gCAAgC,EAAE,MAAM,4CAA4C,CAAC;AAC9F,OAAO,EAAE,gCAAgC,EAAE,MAAM,2CAA2C,CAAC;AAC7F,OAAO,EAAE,8BAA8B,EAAE,MAAM,yCAAyC,CAAC;AACzF,OAAO,EAAE,oBAAoB,EAAE,MAAM,sCAAsC,CAAC;AAG5E,OAAO,KAAK,qBAAqB,MAAM,0BAA0B,CAAC;AAMlE,OAAO,EAAE,gCAAgC,EAAE,MAAM,sCAAsC,CAAC;AACxF,OAAO,KAAK,mBAAmB,MAAM,yBAAyB,CAAC;AAC/D,OAAO,EACL,8BAA8B,EAC9B,2BAA2B,EAC3B,iBAAiB,EAClB,MAAM,2BAA2B,CAAC;;;;;;;;;;;;;AAGnC,MAAM,OAAO,mBAAmB;IAC9B,YACU,QAAiB,EACjB,MAAkB,EAClB,oBAA0C,EAC1C,uBAAgD,EAChD,yBAAoD,EACpD,oBAA0C,EAC1C,mBAAwC,EACxC,8BAA8D,EAC9D,2BAAwD,EACxD,uBAAgD,EAChD,kBAAwC,EACxC,6BAA4D,EAC5D,6BAA4D,EAC5D,YAA0B,EAC1B,cAA8B,EAC9B,YAA0B,EAC1B,sBAA8C,EAC9C,kCAAsE,EACtE,8BAA8D,EAC9D,gCAAkE,EAClE,gCAAkE,EAClE,4CAA0F,EAC1F,aAA4B,EAC5B,gCAAkE;QAvBlE,aAAQ,GAAR,QAAQ,CAAS;QACjB,WAAM,GAAN,MAAM,CAAY;QAClB,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,8BAAyB,GAAzB,yBAAyB,CAA2B;QACpD,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,mCAA8B,GAA9B,8BAA8B,CAAgC;QAC9D,gCAA2B,GAA3B,2BAA2B,CAA6B;QACxD,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,uBAAkB,GAAlB,kBAAkB,CAAsB;QACxC,kCAA6B,GAA7B,6BAA6B,CAA+B;QAC5D,kCAA6B,GAA7B,6BAA6B,CAA+B;QAC5D,iBAAY,GAAZ,YAAY,CAAc;QAC1B,mBAAc,GAAd,cAAc,CAAgB;QAC9B,iBAAY,GAAZ,YAAY,CAAc;QAC1B,2BAAsB,GAAtB,sBAAsB,CAAwB;QAC9C,uCAAkC,GAAlC,kCAAkC,CAAoC;QACtE,mCAA8B,GAA9B,8BAA8B,CAAgC;QAC9D,qCAAgC,GAAhC,gCAAgC,CAAkC;QAClE,qCAAgC,GAAhC,gCAAgC,CAAkC;QAClE,iDAA4C,GAA5C,4CAA4C,CAA8C;QAC1F,kBAAa,GAAb,aAAa,CAAe;QAC5B,qCAAgC,GAAhC,gCAAgC,CAAkC;QAI5E,sBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CACpC,MAAM,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,EAC5C,SAAS,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;YACxB,MAAM,EAAE,kBAAkB,EAAE,cAAc,EAAE,GAAG,OAAO,CAAC;YAEvD,IAAI,CAAC,aAAa,EAAE,CAAC;YAErB,OAAO;gBACL,mBAAmB,CAAC,sBAAsB,EAAE;gBAC5C,mBAAmB,CAAC,kBAAkB,CAAC;oBACrC,kBAAkB;oBAClB,cAAc;iBACf,CAAC;aACH,CAAC;QACJ,CAAC,CAAC,CACH,CAAC;QAGF,yBAAoB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CACvC,MAAM,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,EAC/C,GAAG,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAChC,CAAC;QAGF,4BAAuB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAC1C,MAAM,CAAC,mBAAmB,CAAC,sBAAsB,CAAC,EAClD,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,EAClG,SAAS,CAAC,CAAC,UAAU,EAAE,EAAE;YACvB,IAAI,OAAO,CAAC;YAEZ,IAAI,UAAU,EAAE;gBACd,OAAO,GAAG,EAAE,CACV,mBAAmB,CAAC,6BAA6B,CAAC;oBAChD,kBAAkB,EAAE,UAAU,CAAC,YAAY;iBAC5C,CAAC,CACH,CAAC;aACH;iBAAM;gBACL,OAAO,GAAG,UAAU,CAAC,WAAW,IAAI,CAAC,oBAAoB,CAAC,QAAQ,aAAa,CAAC,CAAC;aAClF;YAED,OAAO,OAAO,CAAC,IAAI,CACjB,UAAU,CAAC,CAAC,KAAK,EAAE,EAAE;gBACnB,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAErC,OAAO,EAAE,CAAC,mBAAmB,CAAC,2BAA2B,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;YACjF,CAAC,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CACH,CAAC;QAGF,wBAAmB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CACtC,MAAM,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,EAC9C,SAAS,CAAC,CAAC,EAAE,kBAAkB,EAAE,cAAc,EAAE,EAAE,EAAE;YACnD,MAAM,eAAe,GAAgC,kBAAkB;gBACrE,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,kBAAkB,CAAC;gBACtD,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YAExD,OAAO,eAAe,CAAC,IAAI,CACzB,GAAG,CAAC,CAAC,cAAc,EAAE,EAAE,CACrB,mBAAmB,CAAC,yBAAyB,CAAC;gBAC5C,cAAc;aACf,CAAC,CACH,EACD,UAAU,CAAC,CAAC,KAAK,EAAE,EAAE;gBACnB,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAErC,OAAO,EAAE,CAAC,mBAAmB,CAAC,uBAAuB,EAAE,CAAC,CAAC;YAC3D,CAAC,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CACH,CAAC;QAGF,+BAA0B,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAC7C,MAAM,CAAC,mBAAmB,CAAC,yBAAyB,CAAC,EACrD,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,EACrD,QAAQ,CAAC,CAAC,CAAC,OAAO,EAAE,SAAS,CAAC,EAAE,EAAE;YAChC,+FAA+F;YAC/F,sGAAsG;YACtG,OAAO,SAAS;gBACd,CAAC,CAAC,IAAI,CAAC,oCAAoC,CAAC,OAAO,CAAC,cAAc,CAAC;gBACnE,CAAC,CAAC,IAAI,CAAC,gCAAgC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACpE,CAAC,CAAC,CACH,CAAC;QAGF,yBAAoB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CACvC,MAAM,CAAC,qBAAqB,CAAC,eAAe,CAAC,EAC7C,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,8BAA8B,CAAC,CAAC,EACzG,QAAQ,CAAC,CAAC,CAAC,MAAM,EAAE,SAAS,EAAE,qBAAqB,CAAC,EAAE,EAAE;YACtD,MAAM,oBAAoB,GAAG,SAAS,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAEpE,IAAI,oBAAoB,KAAK,qBAAqB,EAAE;gBAClD,OAAO;oBACL,mBAAmB,CAAC,kBAAkB,CAAC;wBACrC,KAAK,EAAE,oBAAoB;qBAC5B,CAAC;iBACH,CAAC;aACH;iBAAM;gBACL,OAAO,EAAE,CAAC;aACX;QACH,CAAC,CAAC,CACH,CAAC;QAGF,4BAAuB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAC1C,MAAM,CAAC,mBAAmB,CAAC,sBAAsB,CAAC,EAClD,cAAc,CACZ,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,EACrC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,2BAA2B,CAAC,EAC/C,CAAC,MAAM,EAAE,SAAS,EAAE,eAAe,EAAE,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,eAAe,EAAE,CAAC,CACzE,EACD,GAAG,CAAC,CAAC,EAAE,SAAS,EAAE,eAAe,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,gCAAgC,CAAC,QAAQ,CAAC,SAAS,EAAE,eAAe,CAAC,CAAC,EACnH,GAAG,CAAC,CAAC,cAA+B,EAAE,EAAE,CACtC,mBAAmB,CAAC,0BAA0B,CAAC,EAAE,OAAO,EAAE,cAAc,EAAE,CAAC,CAC5E,CACF,CAAC;QAGF,wBAAmB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CACtC,MAAM,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,EAC9C,cAAc,CACZ,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,EACrC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,2BAA2B,CAAC,EAC/C,CAAC,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,CAC/D,EACD,SAAS,CAAC,CAAC,EAAE,SAAS,EAAE,UAAU,EAAE,EAAE,EAAE;YACtC,MAAM,cAAc,GAAG,IAAI,CAAC,gCAAgC,CAAC,QAAQ,CAAC,SAAS,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;YAEnG,OAAO,CACL,cAAc,CAAC,cAAc;gBAC3B,CAAC,CAAC,IAAI,CAAC,yBAAyB,CAAC,OAAO,CACpC,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,IAAI,CACtC,IAAI,CAAC,uBAAuB,EAC5B,cAAc,CAAC,IAAI,EACnB,cAAc,CACf,CACF;gBACH,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,cAAc,CAAC,CACxD,CAAC,IAAI,CACJ,SAAS,CAAC,CAAC,QAA2B,EAAE,EAAE;gBACxC,MAAM,cAAc,GAClB,kBAAkB,CAAC,IAAI,CAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,IAAI,cAAc,CAAC,IAAI,CAAC;gBAEtG,OAAO;oBACL,mBAAmB,CAAC,yBAAyB,CAAC,EAAE,kBAAkB,EAAE,cAAc,EAAE,CAAC;oBACrF,cAAc,CAAC,cAAc;wBAC3B,CAAC,CAAC,mBAAmB,CAAC,kBAAkB,CAAC;4BACrC,kBAAkB,EAAE,cAAc,CAAC,IAAI;yBACxC,CAAC;wBACJ,CAAC,CAAC,IAAI;iBACT,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACpB,CAAC,CAAC,EACF,UAAU,CAAC,CAAC,KAAK,EAAE,EAAE;gBACnB,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAErC,OAAO,EAAE,CAAC,mBAAmB,CAAC,uBAAuB,EAAE,CAAC,CAAC;YAC3D,CAAC,CAAC,CACH,CAAC;QACJ,CAAC,CAAC,CACH,CAAC;QAGF,iBAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAC/B,MAAM,CAAC,mBAAmB,CAAC,WAAW,CAAC,EACvC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,EACrD,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,SAAS,CAAC,EAAE,EAAE,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,EAAE,KAAK,EAAE,sBAAsB,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CACnH,CAAC;QAGF,gBAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAC9B,MAAM,CAAC,mBAAmB,CAAC,UAAU,CAAC,EACtC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,EAAE,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,EACvF,SAAS,CAAC,CAAC,SAA2B,EAAE,EAAE,CACxC,SAAS,CAAC,wBAAwB;YAChC,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,SAAS,CAAC,wBAAwB,CAAC;YACtE,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,CAClB,EACD,GAAG,CAAC,CAAC,SAA2B,EAAE,EAAE;YAClC,MAAM,yBAAyB,GAAG,kBAAkB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACrE,IAAI,GAAG,GAAG,sBAAsB,IAAI,CAAC,oBAAoB,CAAC,QAAQ,YAAY,yBAAyB,EAAE,CAAC;YAE1G,IAAI,SAAS,CAAC,WAAW,CAAC,MAAM,EAAE;gBAChC,IAAI,CAAC,cAAc;qBAChB,SAAS,CAAC;oBACT,KAAK,EAAE,6BAA6B;oBACpC,OAAO,EAAE,+BAA+B;oBACxC,IAAI,EAAE,EAAE,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,MAAM,CAAC,EAAE;oBAC1D,IAAI,EAAE,IAAI;iBACX,CAAC;qBACD,KAAK,CAAC,IAAI,CAAC;qBACX,IAAI,CAAC,CAAC,MAAuC,EAAE,EAAE;oBAChD,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;wBAC/C,OAAO,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,kBAAkB,CAAC,KAAK,CAAC,EAAE,CAAC;oBACpE,CAAC,CAAC,CAAC;oBAEH,GAAG,IAAI,IAAI,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;oBAEnC,IAAI,MAAM,EAAE;wBACV,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;qBAClB;gBACH,CAAC,CAAC,CAAC;aACN;iBAAM;gBACL,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAClB;QACH,CAAC,CAAC,CACH,CAAC;IAlNC,CAAC;IAoNI,aAAa;QACnB,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,CAAC;QAChC,IAAI,CAAC,8BAA8B,CAAC,KAAK,EAAE,CAAC;QAC5C,IAAI,CAAC,gCAAgC,CAAC,KAAK,EAAE,CAAC;IAChD,CAAC;IAEO,4BAA4B,CAAC,cAA+B;QAClE,MAAM,eAAe,GAAG,OAAO,CAAC,cAAc,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QAEhH,IAAI,CAAC,6BAA6B;aAC/B,aAAa,CAAC,cAAc,CAAC;aAC7B,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,6BAA6B,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC;QAEzF,MAAM,SAAS,GAAqB,IAAI,CAAC,cAAc,EAAE,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CAAqB,CAAC;QACjH,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAc,cAAc,CAAC,MAAM,CAAC,CAAC;QAEzF,SAAS,CAAC,MAAM,GAAG,YAAY,CAAC,4BAA4B,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QAC7E,SAAS,CAAC,WAAW,GAAG,kBAAkB,CAAC,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QACxG,SAAS,CAAC,UAAU,GAAG,YAAY,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QACpE,SAAS,CAAC,eAAe,GAAG,eAAe,CAAC;QAE5C,OAAO,SAAS,CAAC;IACnB,CAAC;IAEO,iCAAiC,CACvC,UAAsC,EACtC,UAAkB,EAClB,UAA4D;QAE5D,MAAM,cAAc,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CAA8B,CAAC;QAEzG,cAAc,CAAC,UAAU,GAAG,UAAU,CAAC;QACvC,IAAI,CAAC,oCAAoC,CAAC,cAAc,EAAE,UAAU,CAAC,CAAC;QAEtE,IAAI,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,EAAE;YACzC,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAc,UAAU,CAAC,MAAM,CAAC,CAAC;YAErF,cAAc,CAAC,MAAM,GAAG,YAAY,CAAC,4BAA4B,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;SACnF;QAED,OAAO,cAAc,CAAC;IACxB,CAAC;IAEO,oCAAoC,CAC1C,cAAyC,EACzC,UAA4D;QAE5D,cAAc,CAAC,gBAAgB,GAAG,SAAS,CACzC,cAAc,CAAC,gBAAgB,EAC/B,CAAC,MAAM,EAAE,aAAa,EAAE,WAAW,EAAE,EAAE;YACrC,MAAM,kBAAkB,GAAG,IAAI,CAC5B,UAAuC,CAAC,UAAU,IAAK,UAAoC,CAAC,UAAU,EACvG;gBACE,IAAI,EAAE,WAAW;aAClB,CACF,CAAC;YAEF,IAAI,kBAAkB,IAAI,kBAAkB,CAAC,UAAU,EAAE;gBACvD,QAAQ,IAAI,EAAE;oBACZ,KAAK,kBAAkB,CAAC,UAAU,KAAK,yBAAyB,CAAC,MAAM;wBACrE,MAAM,CAAC,WAAW,CAAC,GAAG,aAAa,CAAC;wBAEpC,MAAM;oBAER;wBACE,MAAM,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;wBAE1F,MAAM;iBACT;aACF;iBAAM;gBACL,MAAM,CAAC,WAAW,CAAC,GAAG,aAAa,CAAC;aACrC;YAED,OAAO,MAAM,CAAC;QAChB,CAAC,EACD,EAAE,CACH,CAAC;QAEF,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;YACnD,cAAc,CAAC,gBAAgB,CAAC,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC;SAC5D;QAED,IAAI,MAAM,IAAI,UAAU,EAAE;YACxB,cAAc,CAAC,gBAAgB,GAAG,IAAI,CAAC,gCAAgC,CAAC,6BAA6B,CACnG,cAAc,CAAC,gBAAgB,EAC/B,UAAU,CACX,CAAC;SACH;IACH,CAAC;IAEO,oBAAoB,CAC1B,SAA8D,EAC9D,SAOS;QAET,MAAM,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,SAAS,CAAC,MAAM,CAAgB,CAAC;QAC/F,MAAM,yBAAyB,GAAG,SAAS,CAAC,oBAAoB,CAAC;QAEjE,IAAI,eAAe,EAAE;YACnB,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;gBACzC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAE;oBAC1C,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,kBAAkB,EAAE,KAAK,EAAE,EAAE;wBACpD,MAAM,wBAAwB,GAAG,yBAAyB,CAAC,IAAI,CAC7D,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,KAAK,kBAAkB,CACvD,CAAC;wBAEF,IAAI,wBAAwB,EAAE;4BAC5B,SAAS,CAAC,wBAAwB,EAAE,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;4BAE/F,IAAK,wBAA8D,CAAC,oBAAoB,EAAE;gCACxF,IAAI,CAAC,oBAAoB,CAAC,wBAA6D,EAAE,SAAS,CAAC,CAAC;6BACrG;yBACF;oBACH,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;QAED,yBAAyB;aACtB,MAAM,CAAC,CAAC,UAAU,EAAE,EAAE;YACrB,MAAM,UAAU,GAAG,IAAI,CAAC,8BAA8B,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAE5E,OAAO,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,eAAe,MAAI,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,eAAe,CAAA,CAAC;QACpE,CAAC,CAAC;aACD,OAAO,CAAC,CAAC,wBAAwB,EAAE,KAAK,EAAE,EAAE;YAC3C,SAAS,CAAC,wBAAwB,EAAE,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAEvE,IAAK,wBAA8D,CAAC,oBAAoB,EAAE;gBACxF,IAAI,CAAC,oBAAoB,CAAC,wBAA6D,EAAE,SAAS,CAAC,CAAC;aACrG;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,oBAAoB,CAC1B,UAAwE;QAExE,OAAO,OAAO,CAAE,UAAgD,CAAC,MAAM,CAAC,CAAC;IAC3E,CAAC;IAEO,gCAAgC,CAAC,cAA+B;QACtE,MAAM,mBAAmB,GAAG,SAAS,CAAC,cAAc,CAAC,CAAC;QACtD,MAAM,SAAS,GAAG,IAAI,CAAC,4BAA4B,CAAC,mBAAmB,CAAC,CAAC;QAEzE,MAAM,0BAA0B,GAA6C,EAAE,CAAC;QAChF,MAAM,8BAA8B,GAAiD,EAAE,CAAC;QAExF,IAAI,CAAC,oBAAoB,CACvB,mBAAmB,EACnB,CAAC,mBAAmB,EAAE,UAAU,EAAE,UAAU,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,EAAE;YACpF,MAAM,mBAAmB,GAAG,IAAI,CAAC,8BAA8B,CAAC,GAAG,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YAE9F,IAAI,mBAAmB,IAAI,CAAC,mBAAmB,CAAC,eAAe,EAAE;gBAC/D,MAAM,OAAO,GACX,mBAAmB,CAAC,IAAI,KAAK,mBAAmB,CAAC,MAAM;oBACrD,CAAC,CAAC,IAAI,CAAC,4CAA4C,CAAC,gBAAgB,CAChE,mBAAmB,CAAC,gBAAgB,CAAC,IAAI,CAC1C;oBACH,CAAC,CAAC,IAAI,CAAC,kCAAkC,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;gBAEzF,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,eAAe,CAAC,mBAAmB,EAAE,mBAAmB,CAAC,CAAC;gBAEnE,IAAI,gBAAgB,CAAC;gBAErB,IAAI,mBAAmB,CAAC,IAAI,KAAK,mBAAmB,CAAC,MAAM,EAAE;oBAC3D,gBAAgB,GAAG,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;oBAEnG,IAAI,CAAC,gBAAgB,EAAE;wBACrB,gBAAgB,GAAG,IAAI,CAAC,2BAA2B,CAAC,qBAAqB,CACvE,mBAAmB,CAAC,gBAAgB,CAAC,IAAI,CAC1C,CAAC;qBACH;iBACF;gBAED,MAAM,cAAc,GAAG,IAAI,CAAC,iCAAiC,CAC3D,mBAAmB,EACnB,UAAU,EACV,gBAAgB,IAAI,mBAAmB,CACxC,CAAC;gBAEF,IACE,IAAI,CAAC,8BAA8B,CAAC,yBAAyB,CAAC,mBAAmB,CAAC;oBAClF,UAAU,KAAK,IAAI,EACnB;oBACA,8BAA8B,CAAC,IAAI,CAAC;wBAClC,cAAc;qBACf,CAAC,CAAC;iBACJ;qBAAM;oBACL,0BAA0B,CAAC,IAAI,CAAC;wBAC9B,WAAW;wBACX,WAAW;wBACX,cAAc;wBACd,UAAU;wBACV,UAAU;qBACX,CAAC,CAAC;iBACJ;aACF;iBAAM,IAAI,IAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC,mBAAmB,CAAC,EAAE;gBACvE,IAAI,4BAA4B,GAAG,IAAI,CAAC,8BAA8B,CAAC,GAAG,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;gBAErG,IAAI,CAAC,4BAA4B,EAAE;oBACjC,4BAA4B,GAAG;wBAC7B,IAAI,EAAE,mBAAmB,CAAC,IAAI;wBAC9B,IAAI,EAAE,kBAAkB,CAAC,oBAAoB,CAAC,IAAI;qBACnD,CAAC;iBACH;gBAED,MAAM,cAAc,GAAG,IAAI,CAAC,iCAAiC,CAC3D,mBAAmB,EACnB,UAAU,EACV,4BAA4B,CAC7B,CAAC;gBAEF,8BAA8B,CAAC,IAAI,CAAC;oBAClC,cAAc;iBACf,CAAC,CAAC;aACJ;iBAAM;gBACL,MAAM,0BAA0B,mCAC3B,IAAI,CAAC,8BAA8B,CAAC,GAAG,CAAC,mBAAmB,CAAC,OAAO,CAAC,KACvE,IAAI,EAAE,mBAAmB,CAAC,IAAI,GAC/B,CAAC;gBAEF,IAAI,CAAC,8BAA8B,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;gBAE7E,MAAM,cAAc,GAAG,IAAI,CAAC,iCAAiC,CAC3D,mBAAmB,EACnB,UAAU,EACV,0BAA0B,CAC3B,CAAC;gBAEF,0BAA0B,CAAC,IAAI,CAAC;oBAC9B,WAAW;oBACX,WAAW;oBACX,cAAc;oBACd,UAAU;oBACV,UAAU;iBACX,CAAC,CAAC;gBAEH,IAAI,CAAC,YAAY,CAAC,OAAO,CACvB,mEAAmE,mBAAmB,CAAC,IAAI,aAAa,CACzG,CAAC;aACH;QACH,CAAC,CACF,CAAC;QAEF,OAAO;YACL,mBAAmB,CAAC,YAAY,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC;YACxD,0BAA0B,CAAC,MAAM;gBAC/B,CAAC,CAAC,qBAAqB,CAAC,yBAAyB,CAAC,EAAE,OAAO,EAAE,0BAA0B,EAAE,CAAC;gBAC1F,CAAC,CAAC,IAAI;YACR,8BAA8B,CAAC,MAAM;gBACnC,CAAC,CAAC,qBAAqB,CAAC,6BAA6B,CAAC,EAAE,OAAO,EAAE,8BAA8B,EAAE,CAAC;gBAClG,CAAC,CAAC,IAAI;YACR,0BAA0B,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,mBAAmB,CAAC,qBAAqB,EAAE;SACvF,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACpB,CAAC;IAEO,oCAAoC,CAAC,cAA+B;QAC1E,MAAM,mBAAmB,GAAG,SAAS,CAAC,cAAc,CAAC,CAAC;QAEtD,MAAM,4BAA4B,GAAmC,IAAI,CAAC,6BAA6B;aACpG,aAAa,CAAC,mBAAmB,EAAE,IAAI,CAAC;aACxC,GAAG,CAAC,CAAC,EAAE,mBAAmB,EAAE,EAAE,EAAE,CAAC,CAAC;YACjC,IAAI,EAAE,mBAAmB,CAAC,IAAI;YAC9B,YAAY,EAAE,IAAI,CAAC,mBAAmB,EAAE;gBACtC,QAAQ;gBACR,kBAAkB;gBAClB,sBAAsB;aACvB,CAAuC;SACzC,CAAC,CAAC,CAAC;QAEN,OAAO;YACL,mBAAmB,CAAC,eAAe,CAAC;gBAClC,OAAO,EAAE,IAAI,CAAC,mBAAmB,EAAE,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CAAC;aACvE,CAAC;YACF,4BAA4B,CAAC,MAAM;gBACjC,CAAC,CAAC,qBAAqB,CAAC,oBAAoB,CAAC,EAAE,OAAO,EAAE,4BAA4B,EAAE,CAAC;gBACvF,CAAC,CAAC,IAAI;YACR,mBAAmB,CAAC,0BAA0B,EAAE;SACjD,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACpB,CAAC;;gHA1gBU,mBAAmB;oHAAnB,mBAAmB;AA6B9B;IADC,MAAM,EAAE;;8DAgBP;AAGF;IADC,MAAM,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;;iEAI1B;AAGF;IADC,MAAM,EAAE;;oEAyBP;AAGF;IADC,MAAM,EAAE;;gEAqBP;AAGF;IADC,MAAM,EAAE;;uEAWP;AAGF;IADC,MAAM,EAAE;;iEAiBP;AAGF;IADC,MAAM,EAAE;;oEAYP;AAGF;IADC,MAAM,EAAE;;gEA0CP;AAGF;IADC,MAAM,EAAE;;yDAKP;AAGF;IADC,MAAM,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC;;wDAqC1B;2FA5OS,mBAAmB;kBAD/B,UAAU;49BA8BT,iBAAiB,MAkBjB,oBAAoB,MAMpB,uBAAuB,MA2BvB,mBAAmB,MAuBnB,0BAA0B,MAa1B,oBAAoB,MAmBpB,uBAAuB,MAcvB,mBAAmB,MA4CnB,YAAY,MAOZ,WAAW","sourcesContent":["import { HttpResponse } from '@angular/common/http';\nimport { ErrorHandler, Injectable } from '@angular/core';\nimport {\n  RxBundleCacheService,\n  RxDefinitionAdapterRegistryService,\n  RxDefinitionNameService,\n  RxDefinitionUpdateService,\n  RxGlobalCacheService,\n  RxLogService\n} from '@helix/platform/shared/api';\nimport { RxModalService, RxUtilityModalsService } from '@helix/platform/ui-kit';\nimport { RxGuidService, RxJsonParserService } from '@helix/platform/utils';\nimport {\n  AnyViewComponentDefinition,\n  IContainerViewComponentDefinition,\n  IViewActionDescriptor,\n  IViewComponentDefinition,\n  IViewComponentDescriptor,\n  IViewDefinition,\n  IViewLayout,\n  RX_VIEW_DEFINITION,\n  RxOldViewLayoutAdapterService,\n  RxViewActionDefinitionAdapterRegistryService,\n  RxViewActionRegistryService,\n  RxViewComponentRegistryService,\n  RxViewComponentType,\n  RxViewDefinitionParserService,\n  RxViewDefinitionService,\n  RxViewLayout,\n  ViewComponentPropertyType\n} from '@helix/platform/view/api';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action, Store } from '@ngrx/store';\nimport { cloneDeep, find, includes, last, map as _map, omit, transform } from 'lodash';\nimport { noop, Observable, of, throwError } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { RuntimeViewParamsModalComponent } from '../components/runtime-view-params-modal';\nimport { getChildGuidsFromModel } from '../core/layout-helpers';\nimport { RxViewDataDictionaryStoreService } from '../core/view-data-dictionary-store.service';\nimport { RxViewDefinitionGeneratorService } from '../core/view-definition-generator.service';\nimport { RxViewDesignerInspectorService } from '../core/view-designer-inspector.service';\nimport { RxViewDesignerModels } from '../core/view-designer-models.service';\nimport { IViewComponentDesignModel } from '../interfaces/view-component-design-model.interface';\nimport { IViewDesignModel } from '../interfaces/view-design-model.interface';\nimport * as ViewComponentsActions from './view-component.actions';\nimport {\n  IInitializeComponentModelActionPayload,\n  IInitializeDataComponentModelActionPayload,\n  IUpdateComponentModelPayload\n} from './view-component.types';\nimport { RxViewDesignerStateHelperService } from './view-designer-state-helper.service';\nimport * as ViewDesignerActions from './view-designer.actions';\nimport {\n  selectedInspectorTabIdSelector,\n  viewComponentModelsSelector,\n  viewModelSelector\n} from './view-designer.selectors';\n\n@Injectable()\nexport class ViewDesignerEffects {\n  constructor(\n    private actions$: Actions,\n    private store$: Store<any>,\n    private rxBundleCacheService: RxBundleCacheService,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxDefinitionUpdateService: RxDefinitionUpdateService,\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxViewDefinitionService: RxViewDefinitionService,\n    private viewDesignerModels: RxViewDesignerModels,\n    private rxOldViewLayoutAdapterService: RxOldViewLayoutAdapterService,\n    private rxViewDefinitionParserService: RxViewDefinitionParserService,\n    private rxLogService: RxLogService,\n    private rxModalService: RxModalService,\n    private errorHandler: ErrorHandler,\n    private rxUtilityModalsService: RxUtilityModalsService,\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private rxViewDesignerInspectorService: RxViewDesignerInspectorService,\n    private rxViewDefinitionGeneratorService: RxViewDefinitionGeneratorService,\n    private rxViewDesignerStateHelperService: RxViewDesignerStateHelperService,\n    private rxViewActionDefinitionAdapterRegistryService: RxViewActionDefinitionAdapterRegistryService,\n    private rxGuidService: RxGuidService,\n    private rxViewDataDictionaryStoreService: RxViewDataDictionaryStoreService\n  ) {}\n\n  @Effect()\n  initViewDesigner$ = this.actions$.pipe(\n    ofType(ViewDesignerActions.initViewDesigner),\n    switchMap(({ payload }) => {\n      const { viewDefinitionName, layoutTemplate } = payload;\n\n      this.clearStorages();\n\n      return [\n        ViewDesignerActions.loadFriendlyBundleName(),\n        ViewDesignerActions.loadViewDefinition({\n          viewDefinitionName,\n          layoutTemplate\n        })\n      ];\n    })\n  );\n\n  @Effect({ dispatch: false })\n  destroyViewDesigner$ = this.actions$.pipe(\n    ofType(ViewDesignerActions.destroyViewDesigner),\n    tap(() => this.clearStorages())\n  );\n\n  @Effect()\n  loadFriendlyBundleName$ = this.actions$.pipe(\n    ofType(ViewDesignerActions.loadFriendlyBundleName),\n    switchMap(() => this.rxGlobalCacheService.getBundleDescriptor(this.rxBundleCacheService.bundleId)),\n    switchMap((descriptor) => {\n      let result$;\n\n      if (descriptor) {\n        result$ = of(\n          ViewDesignerActions.friendlyBundleNameLoadSuccess({\n            friendlyBundleName: descriptor.friendlyName\n          })\n        );\n      } else {\n        result$ = throwError(`Bundle \"${this.rxBundleCacheService.bundleId}\" not found`);\n      }\n\n      return result$.pipe(\n        catchError((error) => {\n          this.errorHandler.handleError(error);\n\n          return of(ViewDesignerActions.friendlyBundleNameLoadError({ payload: error }));\n        })\n      );\n    })\n  );\n\n  @Effect()\n  loadViewDefinition$ = this.actions$.pipe(\n    ofType(ViewDesignerActions.loadViewDefinition),\n    switchMap(({ viewDefinitionName, layoutTemplate }) => {\n      const viewDefinition$: Observable<IViewDefinition> = viewDefinitionName\n        ? this.rxViewDefinitionService.get(viewDefinitionName)\n        : this.rxViewDefinitionService.getNew(layoutTemplate);\n\n      return viewDefinition$.pipe(\n        map((viewDefinition) =>\n          ViewDesignerActions.viewDefinitionLoadSuccess({\n            viewDefinition\n          })\n        ),\n        catchError((error) => {\n          this.errorHandler.handleError(error);\n\n          return of(ViewDesignerActions.viewDefinitionLoadError());\n        })\n      );\n    })\n  );\n\n  @Effect()\n  viewDefinitionLoadSuccess$ = this.actions$.pipe(\n    ofType(ViewDesignerActions.viewDefinitionLoadSuccess),\n    withLatestFrom(this.store$.select(viewModelSelector)),\n    mergeMap(([payload, viewModel]) => {\n      // If viewModel isn't empty it's considered that view definition is loaded after save to update\n      // existing view models with properties added by server e.g 'lastChangedBy', 'lastUpdateTime' and etc.\n      return viewModel\n        ? this.getActionsToUpdateExistingViewModels(payload.viewDefinition)\n        : this.getActionsToInitializeViewModels(payload.viewDefinition);\n    })\n  );\n\n  @Effect()\n  selectViewComponent$ = this.actions$.pipe(\n    ofType(ViewComponentsActions.selectComponent),\n    withLatestFrom(this.store$.select(viewModelSelector), this.store$.select(selectedInspectorTabIdSelector)),\n    mergeMap(([action, viewModel, currentInspectorTabId]) => {\n      const selectedInspectorTab = viewModel.guid === action.guid ? 0 : 1;\n\n      if (selectedInspectorTab !== currentInspectorTabId) {\n        return [\n          ViewDesignerActions.selectInspectorTab({\n            tabId: selectedInspectorTab\n          })\n        ];\n      } else {\n        return [];\n      }\n    })\n  );\n\n  @Effect()\n  generateViewDefinition$ = this.actions$.pipe(\n    ofType(ViewDesignerActions.generateViewDefinition),\n    withLatestFrom(\n      this.store$.select(viewModelSelector),\n      this.store$.select(viewComponentModelsSelector),\n      (action, viewModel, componentModels) => ({ viewModel, componentModels })\n    ),\n    map(({ viewModel, componentModels }) => this.rxViewDefinitionGeneratorService.generate(viewModel, componentModels)),\n    map((viewDefinition: IViewDefinition) =>\n      ViewDesignerActions.setGeneratedViewDefinition({ payload: viewDefinition })\n    )\n  );\n\n  @Effect()\n  saveViewDefinition$ = this.actions$.pipe(\n    ofType(ViewDesignerActions.saveViewDefinition),\n    withLatestFrom(\n      this.store$.select(viewModelSelector),\n      this.store$.select(viewComponentModelsSelector),\n      (action, viewModel, components) => ({ viewModel, components })\n    ),\n    switchMap(({ viewModel, components }) => {\n      const viewDefinition = this.rxViewDefinitionGeneratorService.generate(viewModel, components, true);\n\n      return (\n        viewDefinition.lastUpdateTime\n          ? this.rxDefinitionUpdateService.execute(\n              this.rxViewDefinitionService.update.bind(\n                this.rxViewDefinitionService,\n                viewDefinition.name,\n                viewDefinition\n              )\n            )\n          : this.rxViewDefinitionService.create(viewDefinition)\n      ).pipe(\n        switchMap((response: HttpResponse<any>) => {\n          const definitionName =\n            decodeURIComponent(last(response?.headers.get('Location').split('/')) || '') || viewDefinition.name;\n\n          return [\n            ViewDesignerActions.viewDefinitionSaveSuccess({ viewDefinitionName: definitionName }),\n            viewDefinition.lastUpdateTime\n              ? ViewDesignerActions.loadViewDefinition({\n                  viewDefinitionName: viewDefinition.name\n                })\n              : null\n          ].filter(Boolean);\n        }),\n        catchError((error) => {\n          this.errorHandler.handleError(error);\n\n          return of(ViewDesignerActions.viewDefinitionSaveError());\n        })\n      );\n    })\n  );\n\n  @Effect()\n  clearCanvas$ = this.actions$.pipe(\n    ofType(ViewDesignerActions.clearCanvas),\n    withLatestFrom(this.store$.select(viewModelSelector)),\n    map(([action, viewModel]) => ViewComponentsActions.removeComponents({ guids: getChildGuidsFromModel(viewModel) }))\n  );\n\n  @Effect({ dispatch: false })\n  runPreview$ = this.actions$.pipe(\n    ofType(ViewDesignerActions.runPreview),\n    withLatestFrom(this.store$.select(viewModelSelector), (action, viewModel) => viewModel),\n    switchMap((viewModel: IViewDesignModel) =>\n      viewModel.targetViewDefinitionName\n        ? this.rxViewDefinitionService.get(viewModel.targetViewDefinitionName)\n        : of(viewModel)\n    ),\n    tap((viewModel: IViewDesignModel) => {\n      const encodedViewDefinitionName = encodeURIComponent(viewModel.name);\n      let url = `/helix/index.html#/${this.rxBundleCacheService.bundleId}/preview/${encodedViewDefinitionName}`;\n\n      if (viewModel.inputParams.length) {\n        this.rxModalService\n          .openModal({\n            title: 'Enter view parameter values',\n            content: RuntimeViewParamsModalComponent,\n            data: { inputParams: _map(viewModel.inputParams, 'name') },\n            size: 'sm'\n          })\n          .catch(noop)\n          .then((params: { [inputName: string]: string }) => {\n            const inputConfig = _map(params, (value, name) => {\n              return `${encodeURIComponent(name)}=${encodeURIComponent(value)}`;\n            });\n\n            url += `?${inputConfig.join('&')}`;\n\n            if (params) {\n              window.open(url);\n            }\n          });\n      } else {\n        window.open(url);\n      }\n    })\n  );\n\n  private clearStorages(): void {\n    this.viewDesignerModels.clear();\n    this.rxViewDesignerInspectorService.clear();\n    this.rxViewDataDictionaryStoreService.clear();\n  }\n\n  private convertViewDefinitionToModel(viewDefinition: IViewDefinition): IViewDesignModel {\n    const isAngularJsView = Boolean(viewDefinition.lastUpdateTime) && !includes(viewDefinition.layout, '\"outlets\"');\n\n    this.rxViewDefinitionParserService\n      .getComponents(viewDefinition)\n      .forEach((definition) => this.rxOldViewLayoutAdapterService.convertLayout(definition));\n\n    const viewModel: IViewDesignModel = omit(viewDefinition, ['componentDefinitions', 'layout']) as IViewDesignModel;\n    const layout = this.rxJsonParserService.tryParseJson<IViewLayout>(viewDefinition.layout);\n\n    viewModel.layout = RxViewLayout.getEmptyViewLayoutForOutlets(layout.outlets);\n    viewModel.displayName = decodeURIComponent(this.rxDefinitionNameService.getDisplayName(viewModel.name));\n    viewModel.layoutName = RxViewLayout.getLayoutName(viewModel.layout);\n    viewModel.isAngularJsView = isAngularJsView;\n\n    return viewModel;\n  }\n\n  private convertComponentDefinitionToModel(\n    definition: AnyViewComponentDefinition,\n    parentGuid: string,\n    descriptor: IViewComponentDescriptor | IViewActionDescriptor\n  ): IViewComponentDesignModel {\n    const componentModel = omit(definition, ['componentDefinitions', 'layout']) as IViewComponentDesignModel;\n\n    componentModel.parentGuid = parentGuid;\n    this.processComponentDefinitionProperties(componentModel, descriptor);\n\n    if (this.isComponentHasLayout(definition)) {\n      const layout = this.rxJsonParserService.tryParseJson<IViewLayout>(definition.layout);\n\n      componentModel.layout = RxViewLayout.getEmptyViewLayoutForOutlets(layout.outlets);\n    }\n\n    return componentModel;\n  }\n\n  private processComponentDefinitionProperties(\n    componentModel: IViewComponentDesignModel,\n    descriptor: IViewComponentDescriptor | IViewActionDescriptor\n  ) {\n    componentModel.propertiesByName = transform(\n      componentModel.propertiesByName,\n      (result, propertyValue, propertyKey) => {\n        const propertyDescriptor = find(\n          (descriptor as IViewComponentDescriptor).properties || (descriptor as IViewActionDescriptor).parameters,\n          {\n            name: propertyKey\n          }\n        );\n\n        if (propertyDescriptor && propertyDescriptor.designType) {\n          switch (true) {\n            case propertyDescriptor.designType === ViewComponentPropertyType.String:\n              result[propertyKey] = propertyValue;\n\n              break;\n\n            default:\n              result[propertyKey] = this.rxJsonParserService.tryParseJson(propertyValue, propertyValue);\n\n              break;\n          }\n        } else {\n          result[propertyKey] = propertyValue;\n        }\n\n        return result;\n      },\n      {}\n    );\n\n    if (!this.rxGuidService.isGuid(componentModel.name)) {\n      componentModel.propertiesByName.name = componentModel.name;\n    }\n\n    if ('type' in descriptor) {\n      componentModel.propertiesByName = this.rxViewDesignerStateHelperService.getInitialComponentProperties(\n        componentModel.propertiesByName,\n        descriptor\n      );\n    }\n  }\n\n  private traverseByComponents(\n    component: IViewDefinition | IContainerViewComponentDefinition,\n    predicate: (\n      definition: IViewComponentDefinition,\n      guid: string,\n      name: string,\n      index: number,\n      colIndex: number,\n      columnSpan: number\n    ) => void\n  ): void {\n    const componentLayout = this.rxJsonParserService.tryParseJson(component.layout) as IViewLayout;\n    const childComponentDefinitions = component.componentDefinitions;\n\n    if (componentLayout) {\n      componentLayout.outlets.forEach((outlet) => {\n        outlet.columns.forEach((column, colIndex) => {\n          column.children.forEach((childComponentGuid, index) => {\n            const childComponentDefinition = childComponentDefinitions.find(\n              (definition) => definition.guid === childComponentGuid\n            );\n\n            if (childComponentDefinition) {\n              predicate(childComponentDefinition, component.guid, outlet.name, index, colIndex, column.span);\n\n              if ((childComponentDefinition as IContainerViewComponentDefinition).componentDefinitions) {\n                this.traverseByComponents(childComponentDefinition as IContainerViewComponentDefinition, predicate);\n              }\n            }\n          });\n        });\n      });\n    }\n\n    childComponentDefinitions\n      .filter((definition) => {\n        const descriptor = this.rxViewComponentRegistryService.get(definition.type);\n\n        return descriptor?.isDataComponent || descriptor?.isPageComponent;\n      })\n      .forEach((childComponentDefinition, index) => {\n        predicate(childComponentDefinition, component.guid, null, index, 0, 0);\n\n        if ((childComponentDefinition as IContainerViewComponentDefinition).componentDefinitions) {\n          this.traverseByComponents(childComponentDefinition as IContainerViewComponentDefinition, predicate);\n        }\n      });\n  }\n\n  private isComponentHasLayout(\n    definition: IViewComponentDefinition | IContainerViewComponentDefinition\n  ): definition is IContainerViewComponentDefinition {\n    return Boolean((definition as IContainerViewComponentDefinition).layout);\n  }\n\n  private getActionsToInitializeViewModels(viewDefinition: IViewDefinition): Action[] {\n    const viewDefinitionClone = cloneDeep(viewDefinition);\n    const viewModel = this.convertViewDefinitionToModel(viewDefinitionClone);\n\n    const initComponentModelsPayload: IInitializeComponentModelActionPayload[] = [];\n    const initDataComponentModelsPayload: IInitializeDataComponentModelActionPayload[] = [];\n\n    this.traverseByComponents(\n      viewDefinitionClone,\n      (componentDefinition, parentGuid, outletName, insertIndex, columnIndex, columnSpan) => {\n        const componentDescriptor = this.rxViewComponentRegistryService.get(componentDefinition.type);\n\n        if (componentDescriptor && !componentDescriptor.isPageComponent) {\n          const adapter =\n            componentDefinition.type === RxViewComponentType.Action\n              ? this.rxViewActionDefinitionAdapterRegistryService.getDesignAdapter(\n                  componentDefinition.propertiesByName.name\n                )\n              : this.rxDefinitionAdapterRegistryService.getDesignAdapter(componentDefinition.type);\n\n          adapter?.adaptDefinition(componentDefinition, viewDefinitionClone);\n\n          let actionDescriptor;\n\n          if (componentDefinition.type === RxViewComponentType.Action) {\n            actionDescriptor = this.rxViewActionRegistryService.get(componentDefinition.propertiesByName.name);\n\n            if (!actionDescriptor) {\n              actionDescriptor = this.rxViewActionRegistryService.registerUnknownAction(\n                componentDefinition.propertiesByName.name\n              );\n            }\n          }\n\n          const componentModel = this.convertComponentDefinitionToModel(\n            componentDefinition,\n            parentGuid,\n            actionDescriptor || componentDescriptor\n          );\n\n          if (\n            this.rxViewComponentRegistryService.isDataComponentDescriptor(componentDescriptor) ||\n            outletName === null\n          ) {\n            initDataComponentModelsPayload.push({\n              componentModel\n            });\n          } else {\n            initComponentModelsPayload.push({\n              insertIndex,\n              columnIndex,\n              componentModel,\n              outletName,\n              columnSpan\n            });\n          }\n        } else if (this.rxViewDefinitionService.isPageView(viewDefinitionClone)) {\n          let pageComponentChildDescriptor = this.rxViewComponentRegistryService.get(componentDefinition.type);\n\n          if (!pageComponentChildDescriptor) {\n            pageComponentChildDescriptor = {\n              type: componentDefinition.type,\n              name: RX_VIEW_DEFINITION.unknownPageComponent.name\n            };\n          }\n\n          const componentModel = this.convertComponentDefinitionToModel(\n            componentDefinition,\n            parentGuid,\n            pageComponentChildDescriptor\n          );\n\n          initDataComponentModelsPayload.push({\n            componentModel\n          });\n        } else {\n          const unknownComponentDescriptor = {\n            ...this.rxViewComponentRegistryService.get(RxViewComponentType.Unknown),\n            type: componentDefinition.type\n          };\n\n          this.rxViewComponentRegistryService.registerSync(unknownComponentDescriptor);\n\n          const componentModel = this.convertComponentDefinitionToModel(\n            componentDefinition,\n            parentGuid,\n            unknownComponentDescriptor\n          );\n\n          initComponentModelsPayload.push({\n            insertIndex,\n            columnIndex,\n            componentModel,\n            outletName,\n            columnSpan\n          });\n\n          this.rxLogService.warning(\n            `Cannot initialize view component. View Component Descriptor for ${componentDefinition.type} not found.`\n          );\n        }\n      }\n    );\n\n    return [\n      ViewDesignerActions.setViewModel({ payload: viewModel }),\n      initComponentModelsPayload.length\n        ? ViewComponentsActions.initializeComponentModels({ payload: initComponentModelsPayload })\n        : null,\n      initDataComponentModelsPayload.length\n        ? ViewComponentsActions.initializeDataComponentModels({ payload: initDataComponentModelsPayload })\n        : null,\n      initComponentModelsPayload.length ? null : ViewDesignerActions.viewModelsInitialized()\n    ].filter(Boolean);\n  }\n\n  private getActionsToUpdateExistingViewModels(viewDefinition: IViewDefinition): Action[] {\n    const viewDefinitionClone = cloneDeep(viewDefinition);\n\n    const updateComponentModelPayloads: IUpdateComponentModelPayload[] = this.rxViewDefinitionParserService\n      .getComponents(viewDefinitionClone, true)\n      .map(({ componentDefinition }) => ({\n        guid: componentDefinition.guid,\n        partialModel: omit(componentDefinition, [\n          'layout',\n          'propertiesByName',\n          'componentDefinitions'\n        ]) as Partial<IViewComponentDesignModel>\n      }));\n\n    return [\n      ViewDesignerActions.updateViewModel({\n        payload: omit(viewDefinitionClone, ['layout', 'componentDefinitions'])\n      }),\n      updateComponentModelPayloads.length\n        ? ViewComponentsActions.updateComponentModel({ payload: updateComponentModelPayloads })\n        : null,\n      ViewDesignerActions.viewModelsUpdatedAfterSave()\n    ].filter(Boolean);\n  }\n}\n"]}