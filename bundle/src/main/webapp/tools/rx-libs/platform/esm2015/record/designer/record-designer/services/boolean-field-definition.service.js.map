{"version":3,"file":"boolean-field-definition.service.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/record/designer/record-designer/services/boolean-field-definition.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,4BAA4B,CAAC;AAClE,OAAO,EAAE,4BAA4B,EAAE,MAAM,iCAAiC,CAAC;AAC/E,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAGrD,OAAO,EAA6B,0BAA0B,EAAE,MAAM,mCAAmC,CAAC;;AAK1G,MAAM,OAAO,+BAAgC,SAAQ,4BAA4B;IAG/E,YAAY,QAAkB;QAC5B,KAAK,CAAC,QAAQ,CAAC,CAAC;QAHlB,iBAAY,GAAG,oBAAoB,CAAC,SAAS,CAAC,OAAO,CAAC,YAAY,CAAC;IAInE,CAAC;IAED,uBAAuB,CACrB,UAAuC,EACvC,eAAuC,EACvC,UAAmB;QAEnB,MAAM,eAAe,GAAG,KAAK,CAAC,uBAAuB,CAAC,UAAU,EAAE,eAAe,EAAE,UAAU,CAAC,CAAC;QAE/F,+DAA+D;QAC/D,eAAe,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC;YAC/B,IAAI,EAAE,cAAc;YACpB,SAAS,EAAE,0BAA0B;YACrC,UAAU,EAAE,UAAU;YACtB,OAAO,EAAE;gBACP,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,oDAAoD,CAAC;gBAC1F,WAAW,EAAE,IAAI;gBACjB,OAAO,EAAE;oBACP;wBACE,EAAE,EAAE,GAAG;wBACP,IAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,qCAAqC,CAAC;qBAC3E;oBACD;wBACE,EAAE,EAAE,GAAG;wBACP,IAAI,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,sCAAsC,CAAC;qBAC5E;iBACF;aAC2B;SAC/B,CAAC,CAAC;QAEH,OAAO,eAAe,CAAC;IACzB,CAAC;;4HApCU,+BAA+B;gIAA/B,+BAA+B,cAF9B,MAAM;2FAEP,+BAA+B;kBAH3C,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { RxBaseFieldDefinitionService } from './base-field-definition.service';\nimport { Injectable, Injector } from '@angular/core';\nimport { IFormBuilderConfig } from '@helix/platform/shared/api';\nimport { IRecordDefinitionModel, IRecordFieldDefinitionModel } from '../../record-designer.types';\nimport { ISelectFormControlOptions, SelectFormControlComponent } from '@helix/platform/shared/components';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxBooleanFieldDefinitionService extends RxBaseFieldDefinitionService {\n  resourceType = RX_RECORD_DEFINITION.dataTypes.boolean.resourceType;\n\n  constructor(injector: Injector) {\n    super(injector);\n  }\n\n  getFieldInspectorConfig(\n    fieldModel: IRecordFieldDefinitionModel,\n    definitionModel: IRecordDefinitionModel,\n    isReadOnly: boolean\n  ): IFormBuilderConfig {\n    const inspectorConfig = super.getFieldInspectorConfig(fieldModel, definitionModel, isReadOnly);\n\n    // Adding controls specific to boolean field to Details section\n    inspectorConfig[1].controls.push({\n      name: 'defaultValue',\n      component: SelectFormControlComponent,\n      isDisabled: isReadOnly,\n      options: {\n        label: this.translateService.instant('com.bmc.arsys.rx.client.common.default-value.label'),\n        emptyOption: true,\n        options: [\n          {\n            id: '0',\n            name: this.translateService.instant('com.bmc.arsys.rx.client.common.true')\n          },\n          {\n            id: '1',\n            name: this.translateService.instant('com.bmc.arsys.rx.client.common.false')\n          }\n        ]\n      } as ISelectFormControlOptions\n    });\n\n    return inspectorConfig;\n  }\n}\n"]}