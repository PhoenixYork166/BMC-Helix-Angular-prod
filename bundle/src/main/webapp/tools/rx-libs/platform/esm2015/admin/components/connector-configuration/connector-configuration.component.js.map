{"version":3,"file":"connector-configuration.component.js","sourceRoot":"","sources":["../../../../../../../libs/platform/admin/components/connector-configuration/connector-configuration.component.ts","../../../../../../../libs/platform/admin/components/connector-configuration/connector-configuration.component.html"],"names":[],"mappings":"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","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { IRecordDefinition, RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { RxModalService } from '@helix/platform/ui-kit';\nimport { IRowDataItem } from '@helix/platform/view/api';\nimport {\n  IRecordGridColumn,\n  IRecordGridConfig,\n  RecordGridComponent,\n  RowSelectionMode\n} from '@helix/platform/view/components';\nimport { get, noop } from 'lodash';\nimport { Observable, of, Subscription } from 'rxjs';\nimport { ConnectorConfigurationEditorComponent } from './connector-configuration-editor/connector-configuration-editor.component';\nimport { RX_CONNECTOR_CONFIGURATION } from './connector-configuration.constant';\nimport { IConnector } from './connector-configuration.interface';\nimport { RxConnectorConfigurationService } from './connector-configuration.service';\n\n@Component({\n  selector: 'rx-admin-connector-configuration',\n  templateUrl: './connector-configuration.component.html'\n})\nexport class ConnectorConfigurationAdminComponent implements OnInit {\n  errorText: string;\n  gridConfig: Observable<IRecordGridConfig>;\n  connectorList: IConnector[] = [];\n  busySubscription: Subscription;\n\n  @ViewChild('grid')\n  grid: RecordGridComponent;\n\n  @ViewChild('connectorConfigurationTemplate', { static: true })\n  connectorConfigurationTemplate: TemplateRef<any>;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private rxModalService: RxModalService,\n    private rxConnectorConfigurationService: RxConnectorConfigurationService\n  ) {}\n\n  ngOnInit() {\n    this.busySubscription = this.rxConnectorConfigurationService.getConnectors().subscribe(\n      (connectors: IConnector[]) => {\n        this.connectorList = connectors;\n      },\n      (response: HttpErrorResponse) => {\n        this.errorText = get(response, 'error[0].appendedText', 'Unknown error.');\n      }\n    );\n\n    this.gridConfig = of({\n      actionButtons: [\n        {\n          label: 'Edit',\n          style: 'tertiary',\n          icon: 'pencil',\n          actions: [\n            {\n              name: () => {\n                this.openConnectionConfiguration(this.grid.api.getFirstSelectedRow());\n              }\n            }\n          ]\n        }\n      ],\n      recordDefinitionName: RX_CONNECTOR_CONFIGURATION.recordDefinitionName,\n      enableRowSelection: RowSelectionMode.Single,\n      getRecordDefinition: () => of(this.getRecordDefinition()),\n      columns: this.getColumns(),\n      styles: 'flex-fill'\n    });\n  }\n\n  newConnectionConfiguration(): void {\n    this.openConnectorConfigurationEditor(true);\n  }\n\n  private openConnectionConfiguration(selectedRecord): void {\n    this.openConnectorConfigurationEditor(false, selectedRecord[RX_RECORD_DEFINITION.coreFieldIds.id]);\n  }\n\n  private getRecordDefinition(): IRecordDefinition {\n    return {\n      fieldDefinitions: [\n        {\n          id: RX_RECORD_DEFINITION.coreFieldIds.id,\n          resourceType: RX_RECORD_DEFINITION.resourceTypes.character\n        },\n        {\n          id: RX_CONNECTOR_CONFIGURATION.fields.targetName,\n          resourceType: RX_RECORD_DEFINITION.resourceTypes.character\n        },\n        {\n          id: RX_CONNECTOR_CONFIGURATION.fields.connectorName,\n          resourceType: RX_RECORD_DEFINITION.resourceTypes.character\n        },\n        {\n          id: RX_CONNECTOR_CONFIGURATION.fields.connectorConfigName,\n          resourceType: RX_RECORD_DEFINITION.resourceTypes.character\n        },\n        {\n          id: RX_CONNECTOR_CONFIGURATION.fields.connectorProfileName,\n          resourceType: RX_RECORD_DEFINITION.resourceTypes.character\n        }\n      ]\n    };\n  }\n\n  private getColumns(): IRecordGridColumn[] {\n    return [\n      {\n        index: 0,\n        title: 'Name',\n        fieldId: String(RX_CONNECTOR_CONFIGURATION.fields.targetName),\n        clickable: true,\n        actions: [\n          {\n            name: (previousAction: any, selectedRow: IRowDataItem) => this.openConnectionConfiguration(selectedRow)\n          }\n        ]\n      },\n      {\n        index: 1,\n        title: 'Connector type',\n        fieldId: String(RX_CONNECTOR_CONFIGURATION.fields.connectorName)\n      },\n      {\n        index: 2,\n        title: 'Configuration',\n        fieldId: String(RX_CONNECTOR_CONFIGURATION.fields.connectorConfigName)\n      },\n      {\n        index: 3,\n        title: 'Profile',\n        fieldId: String(RX_CONNECTOR_CONFIGURATION.fields.connectorProfileName)\n      },\n      {\n        index: 4,\n        title: 'ID',\n        fieldId: String(RX_RECORD_DEFINITION.coreFieldIds.id),\n        visible: false\n      }\n    ];\n  }\n\n  private openConnectorConfigurationEditor(isNewConfiguration: boolean, recordId?: string): Promise<any> {\n    return this.rxModalService\n      .openDockedPanel({\n        title: 'Connector configuration',\n        content: ConnectorConfigurationEditorComponent,\n        data: {\n          connectorList: this.connectorList,\n          isNewConfiguration,\n          recordId\n        }\n      })\n      .then(() => {\n        this.grid.api.refresh().subscribe();\n      })\n      .catch(noop);\n  }\n}\n","<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.connector-configuration.header.title' | translate }}\"\n  [busy]=\"busySubscription\"\n>\n  <adapt-alert\n    [config]=\"{\n      title:\n        'com.bmc.arsys.rx.client.admin.connection-configuration.invalid-integration-service-configuration.message'\n        | translate,\n      content: errorText,\n      variant: 'danger',\n      dismissible: false\n    }\"\n    *ngIf=\"errorText\"\n  >\n  </adapt-alert>\n\n  <ng-container *ngIf=\"!errorText\">\n    <button\n      adapt-button\n      type=\"button\"\n      btn-type=\"tertiary\"\n      class=\"d-icon-plus_circle align-self-start\"\n      rx-id=\"new-button\"\n      (click)=\"newConnectionConfiguration()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n    </button>\n\n    <rx-record-grid #grid [config]=\"gridConfig\"></rx-record-grid>\n  </ng-container>\n</rx-admin-settings>\n"]}