{"version":3,"file":"process-shape-view.mixin.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/process/elements/shared/process-shape/process-shape-view.mixin.ts"],"names":[],"mappings":"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","sourcesContent":["import { chain, filter, isEmpty, isFunction, map, max, min } from 'lodash';\n\nimport { Constructor } from '@helix/platform/utils';\n\ndeclare var joint: any;\n\nexport function RxProcessShapeViewMixin<TBase extends Constructor>(Base: TBase) {\n  return class RxProcessShapeView extends Base {\n    initialize(config: any): void {\n      // @ts-ignore\n      super.initialize(config);\n    }\n\n    canInteract(): boolean {\n      // @ts-ignore\n      return isFunction(this.paper.options.interactive)\n        ? // @ts-ignore\n          this.paper.options.interactive(this)\n        : // @ts-ignore\n          this.paper.options.interactive;\n    }\n\n    prepareEmbedding(): void {\n      // @ts-ignore\n      const hasNeighbors = !isEmpty(this.paper.model.getNeighbors(this.model));\n\n      // @ts-ignore\n      const hasBoundaryElementsWithNeighbors = chain(this.model.getEmbeddedCells())\n        .filter({ isBoundaryEvent: true })\n        .some(function (embeddedCell) {\n          return !isEmpty(this.paper.model.getNeighbors(embeddedCell));\n        });\n\n      // @ts-ignore\n      if (this.model.get('parent') && !hasNeighbors && !hasBoundaryElementsWithNeighbors) {\n        joint.dia.ElementView.prototype.prepareEmbedding.apply(this, arguments);\n      }\n    }\n\n    getEmbeddedBBox(): any {\n      let result;\n\n      // @ts-ignore\n      const embeddedCellModels = filter(this.model.getEmbeddedCells(), (cellModel) => {\n        return cellModel && cellModel.get('type') !== 'rx.SequenceFlow' && !cellModel.isBoundaryEvent;\n      });\n\n      if (embeddedCellModels.length) {\n        const bboxes = chain(embeddedCellModels)\n          .map((cellModel) => {\n            // @ts-ignore\n            var view = this.paper.findViewByModel(cellModel);\n\n            // @ts-ignore\n            return new joint.V(view.el).bbox(false, this.paper.viewport);\n          })\n          .value();\n\n        const minX = min(map(bboxes, (bbox) => bbox.x));\n\n        const minY = min(map(bboxes, (bbox) => bbox.y));\n\n        const maxX = max(map(bboxes, (bbox) => bbox.x + bbox.width));\n\n        const maxY = max(map(bboxes, (bbox) => bbox.y + bbox.height));\n\n        result = joint.g.rect(minX, minY, maxX - minX, maxY - minY);\n      } else {\n        result = joint.g.rect(0, 0, 0, 0);\n      }\n\n      return result;\n    }\n  };\n}\n"]}