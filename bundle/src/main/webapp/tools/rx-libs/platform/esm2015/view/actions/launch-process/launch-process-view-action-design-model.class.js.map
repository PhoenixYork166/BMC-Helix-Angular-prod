{"version":3,"file":"launch-process-view-action-design-model.class.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/actions/launch-process/launch-process-view-action-design-model.class.ts"],"names":[],"mappings":"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","sourcesContent":["import { RxViewDesignerActionModel } from '@helix/platform/view/designer';\nimport { Injector } from '@angular/core';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map, pluck, skip, switchMap } from 'rxjs/operators';\nimport { map as _map, isEqual } from 'lodash';\n\nimport { Tooltip } from '@helix/platform/shared/api';\nimport {\n  ExpressionFormControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionFormControlOptions,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SwitchFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport {\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  IViewActionOutputDataDictionary,\n  IViewActionOutputDataDictionaryBranch,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport {\n  IProcessDefinition,\n  IRecordInstanceFieldDefinitionLight,\n  RX_PROCESS_DEFINITION,\n  RxProcessDefinitionCacheService\n} from '@helix/platform/process/api';\n\nimport { ILaunchProcessViewDesignProperties } from './launch-process-view-action.types';\n\nexport class RxLaunchProcessViewActionDesignModel extends RxViewDesignerActionModel {\n  private rxProcessDefinitionCacheService = this.injector.get<RxProcessDefinitionCacheService>(\n    RxProcessDefinitionCacheService\n  );\n\n  private rxRecordDefinitionCacheService =\n    this.injector.get<RxRecordDefinitionCacheService>(RxRecordDefinitionCacheService);\n\n  defaultProps: ViewActionDesignEditableProperties<ILaunchProcessViewDesignProperties> = {\n    processDefinitionName: null,\n    waitForProcessCompletion: false\n  };\n\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<ILaunchProcessViewDesignProperties>\n  ): ViewActionDesignEditableProperties<ILaunchProcessViewDesignProperties> {\n    return {\n      processDefinitionName: null,\n      waitForProcessCompletion: false,\n      ...initialProperties\n    };\n  }\n\n  constructor(\n    protected injector: Injector,\n    readonly sandbox: IViewActionDesignSandbox<ILaunchProcessViewDesignProperties>\n  ) {\n    super(injector, sandbox);\n\n    const processDefinitionName$ = this.sandbox.actionProperties$.pipe(\n      pluck('processDefinitionName'),\n      distinctUntilChanged()\n    );\n\n    processDefinitionName$.pipe(skip(1)).subscribe((processDefinitionName) => {\n      this.sandbox.setActionProperties({\n        processDefinitionName,\n        waitForProcessCompletion: false\n      });\n    });\n\n    processDefinitionName$\n      .pipe(\n        switchMap<string, Observable<IProcessDefinition>>((processDefinitionName) =>\n          processDefinitionName\n            ? this.rxProcessDefinitionCacheService.getProcessDefinition(processDefinitionName)\n            : of(null)\n        )\n      )\n      .subscribe((processDefinition) =>\n        this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig(processDefinition))\n      );\n\n    this.sandbox.actionProperties$\n      .pipe(\n        map((props) => [props.processDefinitionName, props.waitForProcessCompletion]),\n        distinctUntilChanged(isEqual),\n        switchMap(([processDefinitionName, waitForProcessCompletion]) =>\n          this.getActionOutputDataDictionary(processDefinitionName, waitForProcessCompletion)\n        )\n      )\n      .subscribe((dataDictionary) => this.sandbox.setActionOutputDataDictionary(dataDictionary));\n  }\n\n  private getActionEditorConfig(processDefinition: IProcessDefinition): IViewActionDesignPropertyEditorConfig {\n    return [\n      {\n        name: 'processDefinitionName',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label: 'Process to start',\n          definitionType: RxDefinitionPickerType.Process,\n          required: true\n        } as IDefinitionPickerComponentOptions\n      },\n      {\n        name: 'waitForProcessCompletion',\n        component: SwitchFormControlComponent,\n        isDisabled: processDefinition ? !processDefinition.synchronous : true,\n        options: {\n          label: 'Wait for process completion',\n          tooltip: new Tooltip(\n            'If a process runs synchronously, it is possible to get output data from the process once the process completes. Enable Wait for completion in order to define an output map for the selected process.'\n          )\n        } as IDefinitionPickerComponentOptions\n      },\n      ...(processDefinition\n        ? _map(processDefinition.inputParams, (param) => ({\n            name: `actionProcessInputParams.${param.name}`,\n            component: ExpressionFormControlComponent,\n            options: {\n              label: param.name,\n              dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n              operators: this.expressionConfigurator.getOperators(),\n              isRequired: param.fieldOption === 'REQUIRED'\n            } as IExpressionFormControlOptions\n          }))\n        : [])\n    ];\n  }\n\n  private getActionOutputDataDictionary(\n    processDefinitionName: string,\n    waitForProcessCompletion: boolean\n  ): Observable<IViewActionOutputDataDictionary> {\n    return waitForProcessCompletion\n      ? this.rxProcessDefinitionCacheService.getOutputParams(processDefinitionName).pipe(\n          switchMap((outputParams) =>\n            forkJoin(\n              outputParams.map((param): Observable<IViewActionOutputDataDictionaryBranch> => {\n                let dataDictionary;\n\n                if (param.fieldTypeName === RX_PROCESS_DEFINITION.processVariableTypes.record) {\n                  const recordInstanceParam = param as IRecordInstanceFieldDefinitionLight;\n\n                  dataDictionary = this.rxRecordDefinitionCacheService\n                    .getRecordDefinition(recordInstanceParam.recordDefinitionName)\n                    .pipe(\n                      map((recordDefinition) => ({\n                        label: recordInstanceParam.name,\n                        expression: this.getOutputExpressionForPropertyPath(recordInstanceParam.name),\n                        children: _map(recordDefinition.fieldDefinitions, (fieldDefinition) => ({\n                          label: fieldDefinition.name,\n                          expression: this.getOutputExpressionForPropertyPath(\n                            `${recordInstanceParam.name}.${fieldDefinition.id}`\n                          )\n                        }))\n                      }))\n                    );\n                } else {\n                  dataDictionary = of({\n                    label: param.name,\n                    expression: this.getOutputExpressionForPropertyPath(param.name)\n                  });\n                }\n\n                return dataDictionary;\n              })\n            )\n          )\n        )\n      : of([]);\n  }\n}\n"]}