{"version":3,"file":"view-data-dictionary-builder.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/designer/core/view-data-dictionary-builder.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,IAAI,EAAE,MAAM,QAAQ,CAAC;;AAWzD,MAAM,OAAO,kCAAkC;IAH/C;QAIU,kBAAa,GAAG,eAAe,CAAC;QAChC,0BAAqB,GAAG,oBAAoB,CAAC;QAC7C,2BAAsB,GAAG,iCAAiC,CAAC;QAC3D,qBAAgB,GAAG,oBAAoB,CAAC;KAqDjD;IAnDC,mCAAmC,CACjC,UAAkB,EAClB,cAA+C;QAE/C,OAAO;YACL,KAAK,EAAE,UAAU;YACjB,IAAI,EAAE,oBAAoB;YAC1B,QAAQ,EAAE,IAAI,CAAC,cAAc,EAAE,CAAC,oBAAoB,EAAE,EAAE,CACtD,IAAI,CAAC,yBAAyB,CAAC,oBAAoB,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAC5E;SACF,CAAC;IACJ,CAAC;IAED,sCAAsC,CACpC,MAAsD;QAEtD,uCACK,MAAM,KACT,IAAI,EAAE,IAAI,CAAC,aAAa,EACxB,QAAQ,EAAE,IAAI,CACZ,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC,EACzG,OAAO,CACR,CAAC,MAAM,CAAC,QAAQ,CAAC,IAClB;IACJ,CAAC;IAED,mCAAmC,CAAC,QAA8D;QAChG,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,yBAAyB,CAAC,MAAM,EAAE,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC;IACxG,CAAC;IAEO,yBAAyB,CAC/B,MAAmH,EACnH,IAAI;QAEJ,MAAM,IAAI,qBACL,MAAM,CACV,CAAC;QAEF,IAAI,MAAM,CAAC,UAAU,EAAE;YACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SAClB;QAED,IAAI,MAAM,CAAC,QAAQ,EAAE;YACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAClB,CAAC,QAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,EACnF,OAAO,CACR,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;SACpB;QAED,OAAO,IAAI,CAAC;IACd,CAAC;;+HAxDU,kCAAkC;mIAAlC,kCAAkC,cAFjC,MAAM;2FAEP,kCAAkC;kBAH9C,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IDataDictionary, IDataDictionaryBranch } from '@helix/platform/shared/api';\nimport { map, flow, compact, map as _map } from 'lodash';\nimport { IViewComponentDesignCommonDataDictionaryBranch } from '../public-interfaces/view-component-design-common-data-dictionary.interfaces';\nimport {\n  IViewComponentDesignSettablePropertiesDataDictionary,\n  IViewComponentDesignSettablePropertiesDataDictionaryBranch\n} from '../public-interfaces/view-component-design-settable-properties-data-dictionary.interfaces';\nimport { IViewActionOutputDataDictionary } from '@helix/platform/view/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxViewDataDictionaryBuilderService {\n  private componentIcon = 'd-icon-file_o';\n  private componentPropertyIcon = 'd-icon-file_o_gear';\n  private settablePropertiesIcon = 'd-icon-arrow_right_square_input';\n  private actionOutputIcon = 'd-icon-arrow_chart';\n\n  getActionOutputDataDictionaryBranch(\n    actionName: string,\n    dataDictionary: IViewActionOutputDataDictionary\n  ): IDataDictionaryBranch {\n    return {\n      label: actionName,\n      icon: 'd-icon-arrow_chart',\n      children: _map(dataDictionary, (dataDictionaryBranch) =>\n        this.buildDataDictionaryBranch(dataDictionaryBranch, this.actionOutputIcon)\n      )\n    };\n  }\n\n  getComponentCommonDataDictionaryBranch(\n    branch: IViewComponentDesignCommonDataDictionaryBranch\n  ): IDataDictionaryBranch {\n    return {\n      ...branch,\n      icon: this.componentIcon,\n      children: flow(\n        (children) => map(children, (child) => this.buildDataDictionaryBranch(child, this.componentPropertyIcon)),\n        compact\n      )(branch.children)\n    };\n  }\n\n  getSettablePropertiesDataDictionary(branches: IViewComponentDesignSettablePropertiesDataDictionary): IDataDictionary {\n    return map(branches, (branch) => this.buildDataDictionaryBranch(branch, this.settablePropertiesIcon));\n  }\n\n  private buildDataDictionaryBranch(\n    branch: IViewComponentDesignCommonDataDictionaryBranch | IViewComponentDesignSettablePropertiesDataDictionaryBranch,\n    icon\n  ): IDataDictionaryBranch {\n    const node: IDataDictionaryBranch = {\n      ...branch\n    };\n\n    if (branch.expression) {\n      node.icon = icon;\n    }\n\n    if (branch.children) {\n      node.children = flow(\n        (children) => map(children, (child) => this.buildDataDictionaryBranch(child, icon)),\n        compact\n      )(branch.children);\n    }\n\n    return node;\n  }\n}\n"]}