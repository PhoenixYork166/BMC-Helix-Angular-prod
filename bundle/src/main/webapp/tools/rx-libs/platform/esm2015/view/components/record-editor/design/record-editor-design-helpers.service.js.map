{"version":3,"file":"record-editor-design-helpers.service.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/record-editor/design/record-editor-design-helpers.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxFieldDefinitionService,\n  RxRecordDefinitionCacheService\n} from '@helix/platform/record/api';\nimport { EMPTY, from, Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { RECORD_EDITOR, RecordEditorMode, RecordEditorState } from '../common/record-editor.types';\nimport {\n  getAvailableOnDevicesInspectorConfig,\n  getStylesFieldInspectorConfig,\n  IViewComponentDesignData,\n  IViewComponentDesignSandbox,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  validateStandardProps\n} from '@helix/platform/view/designer';\nimport {\n  ExpressionInspectorControlComponent,\n  GroupButtonFormControlComponent,\n  IExpressionInspectorControlOptions,\n  IGroupButtonFormControlOptions,\n  IOptionalExpressionInspectorControlOptions,\n  ISelectFormControlOptions,\n  ISelectOption,\n  ISwitcherFormControlOptions,\n  OptionalExpressionInspectorControlComponent,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  SwitchFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { flow, get, inRange, isEmpty, isFinite, isNil, omit, omitBy } from 'lodash';\nimport {\n  IRecordEditorFieldsControlOptions,\n  IRecordFieldDefinitionItem\n} from './components/fields-inspector-widget/fields-inspector-widget.types';\nimport { IRecordEditorDesignProperties, IRecordEditorProperties } from './record-editor-design.types';\nimport { FieldsInspectorWidgetComponent } from './components/fields-inspector-widget/fields-inspector-widget.component';\nimport { IPlainObject, RxDefinitionNameService, Tooltip } from '@helix/platform/shared/api';\nimport {\n  IViewDefinition,\n  RxViewComponentRegistryService,\n  RxViewComponentType,\n  RxViewDefinitionCacheService,\n  RxViewDefinitionParserService\n} from '@helix/platform/view/api';\nimport { RX_ASSOCIATION_DEFINITION, RxAssociationDefinitionDataPageService } from '@helix/platform/association/api';\nimport { IBaseRecordEditorFieldProperties } from '../../field-components/base-record-editor-field/design';\n\n@Injectable()\nexport class RxRecordEditorDesignHelpersService {\n  constructor(\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxModalService: RxModalService,\n    private rxFieldDefinitionService: RxFieldDefinitionService,\n    private rxViewDefinitionCacheService: RxViewDefinitionCacheService,\n    private rxAssociationDefinitionDataPageService: RxAssociationDefinitionDataPageService,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private rxViewDefinitionParserService: RxViewDefinitionParserService\n  ) {}\n\n  getRecordFieldDefinitionItems(recordDefinition: IRecordDefinition): IRecordFieldDefinitionItem[] {\n    return recordDefinition.fieldDefinitions.map((fieldDefinition) => ({\n      id: String(fieldDefinition.id),\n      name: fieldDefinition.name,\n      resourceType: fieldDefinition.resourceType,\n      fieldOption: fieldDefinition.fieldOption,\n      viewComponentType: this.getViewComponentType(fieldDefinition)\n    }));\n  }\n\n  getViewComponentType(fieldDefinition: IFieldDefinition): string {\n    let viewComponentType = RECORD_EDITOR.fieldTypes[fieldDefinition.resourceType];\n\n    if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.character) {\n      viewComponentType =\n        fieldDefinition.namedListDefinition || inRange(fieldDefinition.maxLength, 1, 255)\n          ? RxViewComponentType.Character\n          : RxViewComponentType.Textarea;\n    }\n\n    if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.real) {\n      viewComponentType = RxViewComponentType.Decimal;\n    }\n\n    return viewComponentType;\n  }\n\n  getComponentProperties(properties: IRecordEditorDesignProperties): IRecordEditorProperties {\n    const requiredPropertyNames = ['recordDefinitionName', 'mode', 'allowEdit'];\n\n    return flow(\n      // Remove design properties.\n      (props: IRecordEditorDesignProperties) => omit(props, 'showReadOnlyState'),\n      // Remove optional properties with empty values.\n      (props: IRecordEditorProperties) =>\n        omitBy(\n          props,\n          (propertyValue, propertyName) =>\n            !requiredPropertyNames.includes(propertyName) && (isNil(propertyValue) || propertyValue === '')\n        )\n    )(properties) as IRecordEditorProperties;\n  }\n\n  getRecordDefinition(recordDefinitionName: string): Observable<IRecordDefinition> {\n    if (recordDefinitionName) {\n      return this.rxRecordDefinitionCacheService\n        .getRecordDefinition(recordDefinitionName)\n        .pipe(catchError((error) => EMPTY));\n    } else {\n      return of(null);\n    }\n  }\n\n  validate(\n    sandbox: IViewComponentDesignSandbox,\n    properties: IRecordEditorProperties,\n    recordDefinition: IRecordDefinition,\n    childFieldIds: string[],\n    isAssociationRequired = false,\n    isExtensionView = false\n  ): IViewComponentDesignValidationIssue[] {\n    const validationIssues: IViewComponentDesignValidationIssue[] = [];\n\n    if (!properties.recordDefinitionName) {\n      validationIssues.push(sandbox.createError('Record definition name cannot be blank.', 'recordDefinitionName'));\n    }\n\n    if (isAssociationRequired && properties.recordDefinitionName && !properties.associationDefinitionName) {\n      validationIssues.push(sandbox.createError('Association to use cannot be blank.', 'associationDefinitionName'));\n    }\n\n    if (!isExtensionView && properties.mode === RecordEditorMode.Edit && !properties.recordInstanceId) {\n      validationIssues.push(sandbox.createError('Record ID cannot be blank.', 'recordInstanceId'));\n    }\n\n    if (recordDefinition && properties.recordDefinitionName && properties.mode === RecordEditorMode.Create) {\n      // Add warning for Join Record Definition case\n      if (recordDefinition.resourceType === RX_RECORD_DEFINITION.recordDefinitionTypes.join.recordDefinitionType) {\n        validationIssues.push(\n          sandbox.createWarning(\n            `You have configured a record editor to create join record instances.\n                        Please ensure that one or more processes or rules have been defined to perform the creation\n                        of the join record instance.`,\n            undefined,\n            true\n          )\n        );\n      }\n\n      // System fields in 'CREATE' mode cannot be chosen\n      const systemFieldNames = childFieldIds\n        .map((selectedFieldId) =>\n          recordDefinition.fieldDefinitions.find((fieldDefinition) => fieldDefinition.id === Number(selectedFieldId))\n        )\n        .filter(this.rxFieldDefinitionService.isSystemField)\n        .map((fieldDefinition) => fieldDefinition.name);\n\n      if (systemFieldNames.length) {\n        validationIssues.push(\n          sandbox.createError(\n            `System fields (${systemFieldNames.join(', ')}) cannot be present when Record editor is in Create mode.`\n          )\n        );\n      }\n\n      // Required fields without default value must be included when in 'CREATE' mode.\n      // When in extension view, this validation is only needed when the Record Editor\n      // is bound to an associated record, i.e. not the same record as the target Record Editor,\n      // which should already contain all such fields.\n      if (!isExtensionView || properties.associationDefinitionName) {\n        const requiredFieldsWithoutDefaultValues = recordDefinition.fieldDefinitions.filter((fieldDefinition) => {\n          const isLocalizedCharacterField =\n            fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.localizedCharacter;\n\n          const hasDefaultValue =\n            fieldDefinition.defaultValue ||\n            isFinite(fieldDefinition.defaultValue) ||\n            (isLocalizedCharacterField && !isEmpty(fieldDefinition.defaultValueByLocale));\n\n          return fieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required && !hasDefaultValue;\n        });\n\n        const requiredFieldNames = requiredFieldsWithoutDefaultValues\n          .filter((fieldDefinition) => !childFieldIds.includes(String(fieldDefinition.id)))\n          .map((fieldDefinition) => fieldDefinition.name);\n\n        if (requiredFieldNames.length) {\n          validationIssues.push(sandbox.createError(`Required fields are missing: ${requiredFieldNames.join(', ')}.`));\n        }\n      }\n    }\n\n    validationIssues.push(...validateStandardProps(properties));\n\n    return validationIssues;\n  }\n\n  getViewDefinition(viewDefinitionName: string): Observable<IViewDefinition> {\n    if (viewDefinitionName) {\n      return this.rxViewDefinitionCacheService.getViewDefinition(viewDefinitionName).pipe(catchError(() => of(null)));\n    } else {\n      return of(null);\n    }\n  }\n\n  getInspector(\n    recordDefinitionName: string,\n    mode: RecordEditorMode,\n    showReadOnlyState: boolean,\n    recordFieldDefinitionItems: IRecordFieldDefinitionItem[] = [],\n    isExtensionView = false,\n    associationOptions: ISelectOption[] = [],\n    isAssociationRequired: boolean = false,\n    onBeforeModeChange: () => Promise<boolean>\n  ): IViewDesignerInspectorConfig {\n    const inspectorConfig: IViewDesignerInspectorConfig = {\n      inspectorSectionConfigs: [\n        {\n          label: 'General',\n          controls: [\n            {\n              name: 'name',\n              component: TextFormControlComponent,\n              options: {\n                label: 'Name',\n                tooltip: new Tooltip('Enter a name to uniquely identify the Record editor.')\n              }\n            },\n            {\n              name: 'recordDefinitionName',\n              component: RxDefinitionPickerComponent,\n              options: {\n                label: 'Record definition name',\n                definitionType: RxDefinitionPickerType.StandardDataRecord,\n                required: true,\n\n                beforeValueChange: (oldValue: string, newValue: string): Promise<boolean> => {\n                  if (Boolean(oldValue)) {\n                    return this.rxModalService.confirm({\n                      title: 'Warning',\n                      modalStyle: RX_MODAL.modalStyles.warning,\n                      message: 'All view components will be removed from the Record editor. Do you want to continue?'\n                    });\n                  } else {\n                    return Promise.resolve(true);\n                  }\n                }\n              }\n            },\n            {\n              name: 'mode',\n              component: GroupButtonFormControlComponent,\n              options: {\n                label: 'Mode',\n                tooltip: new Tooltip(\n                  '<b>Record editor modes:</b><br><ul><li>Create mode is for creating new records.</li><li>Edit mode is for updating records.</li><li>Temporary mode is for holding data that does not need to be saved.</li></ul>'\n                ),\n                required: true,\n                items: [\n                  {\n                    name: 'Create',\n                    value: RecordEditorMode.Create\n                  },\n                  {\n                    name: 'Edit',\n                    value: RecordEditorMode.Edit\n                  },\n                  {\n                    name: 'Temporary',\n                    value: RecordEditorMode.Temporary\n                  }\n                ],\n                beforeValueChange: onBeforeModeChange\n              }\n            }\n          ]\n        }\n      ]\n    };\n\n    const generalSectionControls = inspectorConfig.inspectorSectionConfigs[0].controls;\n\n    if (mode === RecordEditorMode.Edit && !isExtensionView) {\n      generalSectionControls.push({\n        name: 'recordInstanceId',\n        component: ExpressionInspectorControlComponent,\n        options: {\n          label: 'Record ID',\n          tooltip: new Tooltip('Enter the record ID of the record that the users need to edit.'),\n          isRequired: true\n        } as IExpressionInspectorControlOptions\n      });\n\n      generalSectionControls.push({\n        name: 'showReadOnlyState',\n        component: SwitchFormControlComponent,\n        options: {\n          label: 'Enable read state'\n        } as ISwitcherFormControlOptions\n      });\n\n      if (showReadOnlyState) {\n        generalSectionControls.push({\n          name: 'defaultState',\n          component: GroupButtonFormControlComponent,\n          options: {\n            label: 'Default state',\n            items: [\n              {\n                name: 'Read',\n                value: RecordEditorState.Read\n              },\n              {\n                name: 'Edit',\n                value: RecordEditorState.Edit\n              }\n            ]\n          } as IGroupButtonFormControlOptions\n        });\n      }\n\n      generalSectionControls.push({\n        name: 'allowEdit',\n        component: OptionalExpressionInspectorControlComponent,\n        options: {\n          label: 'Allow edit'\n        } as IOptionalExpressionInspectorControlOptions\n      });\n    }\n\n    generalSectionControls.push(getAvailableOnDevicesInspectorConfig(), getStylesFieldInspectorConfig());\n\n    if (isExtensionView) {\n      generalSectionControls.splice(1, 0, {\n        name: 'label',\n        component: TextFormControlComponent,\n        options: {\n          label: 'Display label',\n          tooltip: new Tooltip(\n            `Enter a Display label for the Record editor. When this view is injected into the view to extend,\n              the Display label will be shown above the Record editor's fields. If a Display label is not defined,\n              the name of the source application or library will be shown above the fields.`\n          )\n        }\n      });\n\n      if (recordDefinitionName) {\n        generalSectionControls.splice(3, 0, {\n          name: 'associationDefinitionName',\n          component: SelectFormControlComponent,\n          options: {\n            label: 'Association to use',\n            options: associationOptions,\n            emptyOption: !isAssociationRequired,\n            required: isAssociationRequired\n          } as ISelectFormControlOptions\n        });\n      }\n    }\n\n    const formContentsSection = {\n      label: 'Form contents',\n      controls: [\n        {\n          component: FieldsInspectorWidgetComponent,\n          options: {\n            label: 'Selected fields',\n            hideSystemFields: mode === RecordEditorMode.Create\n          } as IRecordEditorFieldsControlOptions\n        }\n      ]\n    };\n\n    if (recordDefinitionName) {\n      inspectorConfig.inspectorSectionConfigs.push(formContentsSection);\n    }\n\n    return inspectorConfig;\n  }\n\n  getAssociationOptions(\n    firstRecordDefinitionName: string,\n    secondRecordDefinitionName: string\n  ): Observable<ISelectOption[]> {\n    if (firstRecordDefinitionName && secondRecordDefinitionName) {\n      return this.getAssociations(firstRecordDefinitionName, secondRecordDefinitionName).pipe(\n        map((res) =>\n          res.data\n            .filter((association) => association.nodeAId === firstRecordDefinitionName)\n            .map((association) => ({\n              id: association.name,\n              name: this.rxDefinitionNameService.getDisplayName(association.name)\n            }))\n        )\n      );\n    } else {\n      return of([]);\n    }\n  }\n\n  getAssociations(firstRecordDefinitionName: string, secondRecordDefinitionName: string): Observable<any> {\n    return this.rxAssociationDefinitionDataPageService.get({\n      params: {\n        propertySelection: ['name', 'scope', 'nodeAId'],\n        firstRecordDefinitionName: firstRecordDefinitionName,\n        secondRecordDefinitionName: secondRecordDefinitionName,\n        cardinality: RX_ASSOCIATION_DEFINITION.cardinality.oneToOne.value,\n        nodeAModality: RX_ASSOCIATION_DEFINITION.modality.required,\n        shouldCascadeDelete: true\n      },\n      headers: { 'default-bundle-scope': '' }\n    });\n  }\n\n  getTargetRecordEditorProperties(viewDefinition: IViewDefinition, targetExtensionContainerGuid: string): IPlainObject {\n    let targetRecordEditor;\n\n    if (viewDefinition && targetExtensionContainerGuid) {\n      targetRecordEditor = this.rxViewDefinitionParserService.findParentComponentDefinition(\n        viewDefinition,\n        { guid: targetExtensionContainerGuid },\n        (definition) => definition.type === RxViewComponentType.RecordEditor\n      );\n    }\n\n    return get(targetRecordEditor, 'propertiesByName', {});\n  }\n\n  confirmSystemFieldRemoval(): Observable<boolean> {\n    return from(\n      this.rxModalService.confirm({\n        title: 'Warning',\n        modalStyle: RX_MODAL.modalStyles.warning,\n        message: 'System fields will be removed. Do you want to continue?'\n      })\n    );\n  }\n\n  getSystemFieldModelGuids(\n    plainFieldModels: IViewComponentDesignData<IBaseRecordEditorFieldProperties>[],\n    recordDefinition: IRecordDefinition\n  ): string[] {\n    if (!isEmpty(plainFieldModels)) {\n      return plainFieldModels.reduce(\n        (systemFieldGuids: string[], model: IViewComponentDesignData<IBaseRecordEditorFieldProperties>) => {\n          const fieldDefinition = recordDefinition.fieldDefinitions.find(\n            (definition) => String(definition.id) === model.data.fieldId\n          );\n\n          if (this.rxFieldDefinitionService.isSystemField(fieldDefinition)) {\n            systemFieldGuids.push(model.guid);\n          }\n\n          return systemFieldGuids;\n        },\n        []\n      );\n    } else {\n      return [];\n    }\n  }\n\n  isFieldComponent(component: IViewComponentDesignData): boolean {\n    return (\n      ![\n        RxViewComponentType.Action,\n        RxViewComponentType.ActionButton,\n        RxViewComponentType.Association,\n        RxViewComponentType.AssociatedRecordField\n      ].includes(component.type as RxViewComponentType) &&\n      Boolean(\n        this.rxViewComponentRegistryService.get(component.type).properties.find((prop) => prop.name === 'fieldId')\n      )\n    );\n  }\n}\n"]}