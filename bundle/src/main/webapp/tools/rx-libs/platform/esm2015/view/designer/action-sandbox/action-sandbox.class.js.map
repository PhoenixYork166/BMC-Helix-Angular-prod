{"version":3,"file":"action-sandbox.class.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/designer/action-sandbox/action-sandbox.class.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injector } from '@angular/core';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { distinctUntilChanged, first, map, takeUntil } from 'rxjs/operators';\nimport { isEqual, omit } from 'lodash';\nimport { ViewDesignerFacade } from '../+state/view-designer.facade';\nimport {\n  IViewActionDescriptor,\n  IViewActionDesignProperties,\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  IViewActionOutputDataDictionary,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport { ExpressionFormControlComponent, IExpressionFormControlOptions } from '@helix/platform/shared/components';\nimport { RxViewActionExpressionConfigurator } from '../expression-configurator/view-action-expression-configurator.class';\nimport { Tooltip } from '@helix/platform/shared/api';\nimport { IViewComponentDesignSetPayload } from '../public-interfaces/view-component-design.types';\n\nexport class ActionSandbox implements IViewActionDesignSandbox {\n  private destroyedSubject = new Subject<void>();\n  private viewDesignerFacade = this.injector.get(ViewDesignerFacade);\n  private actionPropertyEditorConfigSubject = new BehaviorSubject<IViewActionDesignPropertyEditorConfig>([]);\n  private actionPropertiesSubject = new BehaviorSubject<IViewActionDesignProperties>(this.initialProps);\n  private children: IViewComponentDesignSetPayload[] = [];\n\n  readonly children$ = this.viewDesignerFacade.getChildComponents(this.guid);\n  readonly destroyed$ = this.destroyedSubject.asObservable();\n  readonly actionPropertyEditorConfig$ = this.actionPropertyEditorConfigSubject.pipe(takeUntil(this.destroyed$));\n\n  readonly actionProperties$ = this.actionPropertiesSubject.pipe(\n    map(() => omit(this.getActionProperties(), ['name'])),\n    distinctUntilChanged(isEqual),\n    takeUntil(this.destroyed$)\n  );\n\n  constructor(\n    private injector: Injector,\n    readonly descriptor: IViewActionDescriptor,\n    readonly guid: string,\n    private initialProps: IViewActionDesignProperties\n  ) {\n    this.children$.pipe(first(), takeUntil(this.destroyed$)).subscribe((children) => {\n      this.setChildren(children);\n    });\n  }\n\n  updateActionProperties(props: Partial<ViewActionDesignEditableProperties<IViewActionDesignProperties>>): void {\n    this.actionPropertiesSubject.next({\n      ...this.actionPropertiesSubject.getValue(),\n      ...props\n    });\n  }\n\n  setActionProperties(props: ViewActionDesignEditableProperties<IViewActionDesignProperties>): void {\n    const { name, index } = this.actionPropertiesSubject.getValue();\n\n    this.actionPropertiesSubject.next({\n      $condition$: null,\n      ...props,\n      name,\n      index\n    });\n  }\n\n  getActionProperties(): IViewActionDesignProperties {\n    return this.actionPropertiesSubject.getValue();\n  }\n\n  getActionPropertyValue<T extends keyof IViewActionDesignProperties>(propertyName: T): IViewActionDesignProperties[T] {\n    return this.actionPropertiesSubject.getValue()[propertyName];\n  }\n\n  setActionPropertyEditorConfig(actionEditorConfig: IViewActionDesignPropertyEditorConfig): void {\n    const expressionConfigurator = new RxViewActionExpressionConfigurator(\n      this.injector,\n      this.descriptor.name,\n      this.guid\n    );\n\n    actionEditorConfig = [\n      {\n        name: '$condition$',\n        component: ExpressionFormControlComponent,\n        options: {\n          label: 'Condition',\n          tooltip: new Tooltip('The action will execute if the condition is true, or if no condition is defined.'),\n          dataDictionary$: expressionConfigurator.getDataDictionary(),\n          operators: expressionConfigurator.getOperators()\n        } as IExpressionFormControlOptions\n      },\n      ...actionEditorConfig\n    ];\n\n    this.actionPropertyEditorConfigSubject.next(actionEditorConfig);\n  }\n\n  getActionPropertyEditorConfig(): IViewActionDesignPropertyEditorConfig {\n    return this.actionPropertyEditorConfigSubject.getValue();\n  }\n\n  setActionOutputDataDictionary(dataDictionary: IViewActionOutputDataDictionary): void {\n    // check why index is coming as a string for existing actions\n    this.viewDesignerFacade.setActionDataDictionaryBranch(\n      this.guid,\n      this.getActionPropertyValue('index'),\n      this.descriptor.label,\n      dataDictionary\n    );\n  }\n\n  setChildren(data: IViewComponentDesignSetPayload[]): void {\n    this.children = data;\n  }\n\n  getChildren(): IViewComponentDesignSetPayload[] {\n    return this.children;\n  }\n\n  onDestroy(): void {\n    this.destroyedSubject.next();\n    this.destroyedSubject.complete();\n  }\n}\n"]}