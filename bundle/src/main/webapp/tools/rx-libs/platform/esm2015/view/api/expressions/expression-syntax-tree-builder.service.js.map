{"version":3,"file":"expression-syntax-tree-builder.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/api/expressions/expression-syntax-tree-builder.service.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAC7B,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,kBAAkB,EAAE,MAAM,4BAA4B,CAAC;;AAKhE,MAAM,OAAO,oCAAoC;IAG/C;QACE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACtD,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;QACjD,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAChD,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACnD,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAEhD,0CAA0C;QAC1C,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAChC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAChC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC/B,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAEhC,yCAAyC;QACzC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QAE7B,6DAA6D;QAC7D,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;IACtC,CAAC;IAED,SAAS,CAAC,UAAkB;QAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC/B,CAAC;;iIAnCU,oCAAoC;qIAApC,oCAAoC,cAFnC,MAAM;2FAEP,oCAAoC;kBAHhD,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import * as jsep from 'jsep';\nimport { Injectable } from '@angular/core';\nimport { ExpressionOperator } from '@helix/platform/shared/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxExpressionSyntaxTreeBuilderService {\n  private jsep;\n\n  constructor() {\n    this.jsep = jsep;\n\n    this.jsep.addBinaryOp(ExpressionOperator.Contains, 7);\n    this.jsep.addBinaryOp(ExpressionOperator.Like, 7);\n    this.jsep.addBinaryOp(ExpressionOperator.And, 2);\n    this.jsep.addBinaryOp(ExpressionOperator.Or, 1);\n    this.jsep.addBinaryOp(ExpressionOperator.Equal, 6);\n    this.jsep.addBinaryOp(ExpressionOperator.In, 8);\n\n    // Remove default unused binary operators.\n    this.jsep.removeBinaryOp('||');\n    this.jsep.removeBinaryOp('&&');\n    this.jsep.removeBinaryOp('|');\n    this.jsep.removeBinaryOp('^');\n    this.jsep.removeBinaryOp('&');\n    this.jsep.removeBinaryOp('==');\n    this.jsep.removeBinaryOp('===');\n    this.jsep.removeBinaryOp('!==');\n    this.jsep.removeBinaryOp('<<');\n    this.jsep.removeBinaryOp('>>');\n    this.jsep.removeBinaryOp('>>>');\n\n    // Remove default unused unary operators.\n    this.jsep.removeUnaryOp('~');\n\n    // Remove _, but keep $ to match AR expressions, e.g. $USER$.\n    this.jsep.removeIdentifierChar('_');\n  }\n\n  buildTree(expression: string): jsep.Expression {\n    return this.jsep(expression);\n  }\n}\n"]}