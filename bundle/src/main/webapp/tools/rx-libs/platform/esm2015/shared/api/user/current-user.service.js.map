{"version":3,"file":"current-user.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/user/current-user.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,eAAe,EAAc,MAAM,MAAM,CAAC;AACnD,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;;AAM7C,MAAM,OAAO,oBAAoB;IAHjC;QAIU,iBAAY,GAAG,IAAI,eAAe,CAAe,IAAI,CAAC,CAAC;QAC/D,UAAK,GAA6B,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;KAiDzF;IA/CC,kBAAkB;;QAChB,OAAO,MAAA,MAAA,IAAI,CAAC,GAAG,EAAE,0CAAE,eAAe,mCAAI,EAAE,CAAC;IAC3C,CAAC;IAED,sBAAsB;;QACpB,OAAO,MAAA,MAAA,IAAI,CAAC,GAAG,EAAE,0CAAE,mBAAmB,mCAAI,EAAE,CAAC;IAC/C,CAAC;IAED,OAAO;;QACL,OAAO,MAAA,MAAA,IAAI,CAAC,GAAG,EAAE,0CAAE,SAAS,mCAAI,EAAE,CAAC;IACrC,CAAC;IAED,GAAG,CAAC,IAAW;QACb,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/B,CAAC;IAED,GAAG;QACD,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;IACtC,CAAC;IAED,iBAAiB;;QACf,OAAO,MAAA,MAAA,IAAI,CAAC,GAAG,EAAE,0CAAE,iBAAiB,mCAAI,KAAK,CAAC;IAChD,CAAC;IAED,eAAe;;QACb,OAAO,MAAA,MAAA,IAAI,CAAC,GAAG,EAAE,0CAAE,eAAe,mCAAI,KAAK,CAAC;IAC9C,CAAC;IAED,kBAAkB;;QAChB,OAAO,CAAA,MAAA,IAAI,CAAC,GAAG,EAAE,0CAAE,eAAe,KAAI,EAAE,CAAC;IAC3C,CAAC;IAED,cAAc;;QACZ,OAAO,MAAA,MAAA,IAAI,CAAC,GAAG,EAAE,0CAAE,YAAY,mCAAI,KAAK,CAAC;IAC3C,CAAC;IAED,wBAAwB;;QACtB,OAAO,MAAA,MAAA,IAAI,CAAC,GAAG,EAAE,0CAAE,mBAAmB,mCAAI,KAAK,CAAC;IAClD,CAAC;IAED,yBAAyB,CAAC,mBAA4B;QACpD,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAExB,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;SAChD;IACH,CAAC;;iHAlDU,oBAAoB;qHAApB,oBAAoB,cAFnB,MAAM;2FAEP,oBAAoB;kBAHhC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\nimport { IUser } from './user.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxCurrentUserService {\n  private userSubject$ = new BehaviorSubject<IUser | null>(null);\n  user$: Observable<IUser | null> = this.userSubject$.asObservable().pipe(shareReplay(1));\n\n  getPreferredLocale(): string {\n    return this.get()?.preferredLocale ?? '';\n  }\n\n  getPreferredUserLocale(): string {\n    return this.get()?.preferredUserLocale ?? '';\n  }\n\n  getName(): string {\n    return this.get()?.loginName ?? '';\n  }\n\n  set(user: IUser): void {\n    this.userSubject$.next(user);\n  }\n\n  get(): IUser | null {\n    return this.userSubject$.getValue();\n  }\n\n  isBusinessAnalyst(): boolean {\n    return this.get()?.isBusinessAnalyst ?? false;\n  }\n\n  isAdministrator(): boolean {\n    return this.get()?.isAdministrator ?? false;\n  }\n\n  getEditableBundles(): string[] {\n    return this.get()?.editableBundles || [];\n  }\n\n  isSupportStaff(): boolean {\n    return this.get()?.supportStaff ?? false;\n  }\n\n  isAvailableForAssignment(): boolean {\n    return this.get()?.assignmentAvailable ?? false;\n  }\n\n  setAssignmentAvailability(assignmentAvailable: boolean): void {\n    const user = this.get();\n\n    if (user) {\n      user.assignmentAvailable = assignmentAvailable;\n    }\n  }\n}\n"]}