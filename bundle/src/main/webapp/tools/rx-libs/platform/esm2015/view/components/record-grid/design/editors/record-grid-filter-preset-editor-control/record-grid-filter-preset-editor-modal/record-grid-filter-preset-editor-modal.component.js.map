{"version":3,"file":"record-grid-filter-preset-editor-modal.component.js","sourceRoot":"","sources":["../../../../../../../../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-preset-editor-control/record-grid-filter-preset-editor-modal/record-grid-filter-preset-editor-modal.component.ts","../../../../../../../../../../../libs/platform/view/components/record-grid/design/editors/record-grid-filter-preset-editor-control/record-grid-filter-preset-editor-modal/record-grid-filter-preset-editor-modal.component.html"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Injector,\n  QueryList,\n  ViewChild,\n  ViewChildren,\n  ViewEncapsulation\n} from '@angular/core';\nimport { AbstractControl, NgForm, ValidationErrors } from '@angular/forms';\nimport { findIndex, isEmpty, map, some } from 'lodash';\nimport { ActiveModalRef, AdaptAccordionTabComponent, DismissReasons } from '@bmc-ux/adapt-angular';\nimport { IRecordDefinition } from '@helix/platform/record/api';\nimport { RX_MODAL, RxModalClass, RxModalService } from '@helix/platform/ui-kit';\nimport { RxGuidService } from '@helix/platform/utils';\nimport { IRecordGridPredefinedFilterPreset } from '../../../../runtime/types/record-grid-predefined-filter-preset.interface';\nimport {\n  IPredefinedFilterPresetEditorPresetData,\n  IRecordGridFilterPresetEditorModalParams,\n  IRecordGridFilterPresetEditorModalResult\n} from '../record-grid-filter-preset-editor.types';\n\n@Component({\n  selector: 'rx-record-grid-filter-preset-editor-modal',\n  templateUrl: './record-grid-filter-preset-editor-modal.component.html',\n  styleUrls: ['./record-grid-filter-preset-editor-modal.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class RecordGridFilterPresetEditorModalComponent extends RxModalClass implements AfterViewInit {\n  @ViewChildren(AdaptAccordionTabComponent, { read: ElementRef })\n  private accordionTabEls: QueryList<ElementRef>;\n\n  @ViewChild('filterPresetsForm', { read: NgForm, static: true })\n  filterPresetsForm: NgForm;\n\n  isReadOnly: boolean;\n  recordDefinition: IRecordDefinition;\n  selectedFieldIds: string[];\n  filterPresets: IPredefinedFilterPresetEditorPresetData[] = [];\n  params: IRecordGridFilterPresetEditorModalParams = this.activeModalRef.getData();\n\n  constructor(\n    private activeModalRef: ActiveModalRef,\n    private rxModalService: RxModalService,\n    private rxGuidService: RxGuidService,\n    protected injector: Injector\n  ) {\n    super(activeModalRef, injector);\n\n    const activeFilterPreset = this.params.activeFilterPreset;\n\n    this.recordDefinition = this.params.primaryRecordDefinition;\n    this.selectedFieldIds = this.params.selectedFieldIds;\n    this.isReadOnly = this.params.isReadOnly;\n\n    this.filterPresets = map(\n      this.params.filterPresets,\n      (filterPreset): IPredefinedFilterPresetEditorPresetData =>\n        this.createFilterPresetEditorData(filterPreset, filterPreset === activeFilterPreset)\n    );\n  }\n\n  ngAfterViewInit(): void {\n    const openFilterPresetIndex = findIndex(this.filterPresets, 'isOpen');\n\n    if (openFilterPresetIndex !== -1) {\n      this.accordionTabEls.toArray()[openFilterPresetIndex].nativeElement.scrollIntoView({\n        block: 'nearest'\n      });\n    }\n  }\n\n  addFilterPreset(): void {\n    this.markAsDirty();\n\n    this.filterPresets.push(\n      this.createFilterPresetEditorData(\n        {\n          guid: this.rxGuidService.generate(),\n          title: 'New preset' + (this.filterPresets.length === 0 ? '' : ' ' + this.filterPresets.length),\n          filters: '',\n          recordGridFilters: []\n        },\n        true\n      )\n    );\n\n    setTimeout(() => {\n      this.accordionTabEls.last.nativeElement.scrollIntoView({\n        block: 'nearest'\n      });\n    });\n  }\n\n  removeFilterPreset(index: number): void {\n    this.markAsDirty();\n\n    this.filterPresets.splice(index, 1);\n  }\n\n  createFilterPresetEditorData(\n    filterPreset: IRecordGridPredefinedFilterPreset,\n    isOpen: boolean\n  ): IPredefinedFilterPresetEditorPresetData {\n    return {\n      ...filterPreset,\n      isOpen,\n      filterSelectOptions: {\n        primaryRecordDefinition: this.recordDefinition,\n        tagsLimit: 2,\n        namedFilterOptions: this.params.namedFilterOptions,\n        selectedFieldIds: this.selectedFieldIds\n      },\n      filterSelect: {\n        basicFilters: filterPreset.recordGridFilters,\n        filtersJson: filterPreset.filters\n      }\n    };\n  }\n\n  getCheckPresetTitleDuplicateValidator(\n    currentFilterPreset: IPredefinedFilterPresetEditorPresetData\n  ): (control: AbstractControl) => ValidationErrors | null {\n    return (control: AbstractControl) => {\n      const title = control.value;\n\n      if (\n        title &&\n        this.filterPresets.some(\n          (filterPreset) => filterPreset.title === title && filterPreset.guid !== currentFilterPreset.guid\n        )\n      ) {\n        return { duplicatePresetName: { message: 'Duplicate Name' } };\n      }\n\n      return null;\n    };\n  }\n\n  trackByForFilterPresets(index: number, filterPreset: IPredefinedFilterPresetEditorPresetData): string {\n    return filterPreset.guid;\n  }\n\n  toggleOpen(expandAll: boolean): void {\n    this.filterPresets.forEach((action) => (action.isOpen = expandAll));\n  }\n\n  onSaveChangesClick(): void {\n    const result: IRecordGridFilterPresetEditorModalResult = {\n      filterPresets: this.filterPresets.map(\n        (filterPreset): IRecordGridPredefinedFilterPreset => ({\n          filters: filterPreset.filterSelect.filtersJson,\n          recordGridFilters: filterPreset.filterSelect.basicFilters,\n          guid: filterPreset.guid,\n          title: filterPreset.title\n        })\n      )\n    };\n\n    const hasEmptyFilterPreset = some(result.filterPresets, (filterPreset) => isEmpty(filterPreset.recordGridFilters));\n\n    if (hasEmptyFilterPreset) {\n      this.rxModalService\n        .confirm({\n          title: 'Warning',\n          modalStyle: RX_MODAL.modalStyles.warning,\n          message:\n            'The filter preset will not filter records because no filters have been specified. Do you want to continue?'\n        })\n        .then((confirmResult) => {\n          if (confirmResult) {\n            this.activeModalRef.close(result);\n          }\n        });\n    } else {\n      this.activeModalRef.close(result);\n    }\n  }\n\n  cancel(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n}\n","<div class=\"designer-modal-body modal-body d-flex mh-100\">\n  <div class=\"row flex-grow-1 w-100\">\n    <div class=\"d-flex flex-column mh-100 col\">\n      <div class=\"d-flex align-items-start justify-content-between\">\n        <button\n          *ngIf=\"!isReadOnly\"\n          class=\"mt-2 p-0\"\n          rx-id=\"add-button\"\n          adapt-button\n          type=\"button\"\n          btn-type=\"tertiary\"\n          (click)=\"addFilterPreset()\"\n        >\n          <span class=\"d-icon-left-plus_circle\"></span>\n\n          {{\n            'com.bmc.arsys.rx.client.view-components.record-grid-filter-preset.add-filter-preset.button.label'\n              | translate\n          }}\n        </button>\n\n        <div *ngIf=\"filterPresets.length\" class=\"btn-group\">\n          <button adapt-button btn-type=\"tertiary\" type=\"button\" rx-id=\"expand-all-button\" (click)=\"toggleOpen(true)\">\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            adapt-button\n            btn-type=\"tertiary\"\n            type=\"button\"\n            rx-id=\"collapse-all-button\"\n            (click)=\"toggleOpen(false)\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div class=\"designer-modal-accordion-wrapper\">\n        <adapt-accordion [multiselect]=\"true\">\n          <form #filterPresetsForm=\"ngForm\">\n            <div\n              *ngFor=\"let filterPreset of filterPresets; let index = index; trackBy: trackByForFilterPresets\"\n              class=\"designer-modal-accordion-content\"\n            >\n              <adapt-accordion-tab\n                class=\"d-block\"\n                [isOpen]=\"filterPreset.isOpen\"\n                (open)=\"filterPreset.isOpen = true\"\n                (close)=\"filterPreset.isOpen = false\"\n                #accordionTab\n              >\n                <div class=\"card-title-text w-100\">\n                  <div class=\"designer-modal-card-title-content\">\n                    <div class=\"left-header-block pl-0\">\n                      <div class=\"rx-ellipsis\" [title]=\"filterPreset.title\" rx-id=\"card-title\">\n                        {{ filterPreset.title }}\n                      </div>\n                    </div>\n\n                    <div *ngIf=\"!isReadOnly\" class=\"right-header-block\">\n                      <button\n                        class=\"d-icon-left-cross_adapt p-1 pr-4 ml-3\"\n                        adapt-button\n                        size=\"small\"\n                        type=\"button\"\n                        (click)=\"$event.stopPropagation(); removeFilterPreset(index)\"\n                        rx-id=\"remove-button\"\n                      >\n                        {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n\n                <adapt-rx-textfield\n                  label=\"{{\n                    'com.bmc.arsys.rx.client.view-components.record-grid-filter-preset.name-field.label' | translate\n                  }}\"\n                  [name]=\"'filterPresetTitle-' + filterPreset.guid\"\n                  [required]=\"true\"\n                  [disabled]=\"isReadOnly\"\n                  [rxCustomValidators]=\"getCheckPresetTitleDuplicateValidator(filterPreset)\"\n                  (ngModelChange)=\"markAsDirty()\"\n                  [(ngModel)]=\"filterPreset.title\"\n                  rxNoWhitespace\n                ></adapt-rx-textfield>\n\n                <div *ngIf=\"accordionTab.isOpenOrCloseAnimationProcessing\">\n                  <rx-record-grid-filter-select-control\n                    [name]=\"'filterPresetFilterSelect-' + filterPreset.guid\"\n                    [disabled]=\"isReadOnly\"\n                    [options]=\"filterPreset.filterSelectOptions\"\n                    (ngModelChange)=\"markAsDirty()\"\n                    [(ngModel)]=\"filterPreset.filterSelect\"\n                  ></rx-record-grid-filter-select-control>\n                </div>\n              </adapt-accordion-tab>\n            </div>\n          </form>\n        </adapt-accordion>\n      </div>\n\n      <div *ngIf=\"!filterPresets.length\" class=\"d-flex justify-content-center h-100 align-items-center mt-2\">\n        <adapt-empty-state\n          class=\"w-100\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.view-components.record-grid-filter-preset.empty-state.message' | translate\n          }}\"\n          type=\"search\"\n        ></adapt-empty-state>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isReadOnly\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    [disabled]=\"filterPresetsForm.form.invalid || !isDirty()\"\n    (click)=\"onSaveChangesClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{\n      isReadOnly\n        ? ('com.bmc.arsys.rx.client.common.close.label' | translate)\n        : ('com.bmc.arsys.rx.client.common.cancel.label' | translate)\n    }}\n  </button>\n</div>\n"]}