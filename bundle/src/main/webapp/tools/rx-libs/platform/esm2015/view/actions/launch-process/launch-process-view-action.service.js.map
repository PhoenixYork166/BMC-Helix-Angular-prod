{"version":3,"file":"launch-process-view-action.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/actions/launch-process/launch-process-view-action.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { last, forEach, isEmpty, reduce } from 'lodash';\nimport { Observable, of, forkJoin } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\nimport {\n  RxProcessDefinitionCacheService,\n  RxProcessInstanceService,\n  RxProcessInstanceCommandsService,\n  RX_PROCESS_DEFINITION\n} from '@helix/platform/process/api';\nimport { RxRecordDefinitionCacheService, RxRecordInstanceService } from '@helix/platform/record/api';\nimport { RxLogService, IPlainObject } from '@helix/platform/shared/api';\nimport { IViewActionService } from '@helix/platform/view/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { ILaunchProcessViewActionParams } from './launch-process-view-action.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxLaunchProcessViewActionService\n  implements IViewActionService<ILaunchProcessViewActionParams, IPlainObject> {\n  constructor(\n    private rxJsonParserService: RxJsonParserService,\n    private rxLogService: RxLogService,\n    private rxProcessDefinitionCacheService: RxProcessDefinitionCacheService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxProcessInstanceCommandsService: RxProcessInstanceCommandsService,\n    private rxProcessInstanceService: RxProcessInstanceService,\n    private rxRecordInstanceService: RxRecordInstanceService\n  ) {}\n\n  execute(params: ILaunchProcessViewActionParams): Observable<IPlainObject> {\n    let processId: string;\n    let processDefinitionOutputParams: IPlainObject;\n\n    return this.rxProcessInstanceCommandsService\n      .start(params.processDefinitionName, params.actionProcessInputParams)\n      .pipe(\n        switchMap((res) => {\n          if (params.waitForProcessCompletion) {\n            const location = res.headers.get('location');\n\n            processId = location ? last(location.split('/')) : null;\n\n            return this.rxProcessDefinitionCacheService.getOutputParams(params.processDefinitionName);\n          } else {\n            return of(null);\n          }\n        }),\n        switchMap((plainOutputParams) => {\n          if (!isEmpty(plainOutputParams)) {\n            processDefinitionOutputParams = plainOutputParams.reduce((outputParams, value) => {\n              outputParams[value.name] = value;\n\n              return outputParams;\n            }, {});\n\n            return this.rxProcessInstanceService.get(\n              params.processDefinitionName,\n              `${processId}/processOutputVariables`\n            );\n          } else {\n            return of(null);\n          }\n        }),\n        switchMap((processOutputVariables: IPlainObject) => {\n          const outputResult: IPlainObject = {};\n\n          forEach(processOutputVariables, (variableValue, variableName) => {\n            if (\n              processDefinitionOutputParams[variableName].fieldTypeName ===\n              RX_PROCESS_DEFINITION.processVariableTypes.record\n            ) {\n              const recordInstanceOutputData = this.rxJsonParserService.tryParseJson(variableValue);\n\n              if (\n                recordInstanceOutputData &&\n                recordInstanceOutputData.recordDefinitionName &&\n                recordInstanceOutputData.id\n              ) {\n                outputResult[variableName] = this.rxRecordInstanceService\n                  .get(recordInstanceOutputData.recordDefinitionName, recordInstanceOutputData.id)\n                  .pipe(\n                    map((recordInstance) =>\n                      reduce(\n                        recordInstance.fieldInstances,\n                        (result, fieldInstance) => {\n                          result[fieldInstance.id] = fieldInstance.value;\n\n                          return result;\n                        },\n                        {}\n                      )\n                    )\n                  );\n              } else {\n                this.rxLogService.warning(\n                  'rxLaunchProcessAction: unknown format for record instance as output data for process'\n                );\n              }\n            } else {\n              outputResult[variableName] = of(variableValue);\n            }\n          });\n\n          return forkJoin(outputResult);\n        })\n      );\n  }\n}\n"]}