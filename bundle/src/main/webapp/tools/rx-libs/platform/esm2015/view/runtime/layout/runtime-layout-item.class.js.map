{"version":3,"file":"runtime-layout-item.class.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/runtime/layout/runtime-layout-item.class.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,mBAAmB,EAAE,yBAAyB,EAAE,MAAM,+BAA+B,CAAC;AAI/F,MAAM,OAAO,iBAAiB;IAQ5B,YAAY,OAOX;QAZD,YAAO,GAA0B,EAAE,CAAC;QACpC,WAAM,GAAsB,IAAI,CAAC;QACjC,wBAAmB,GAAwB,IAAI,CAAC;QAW9C,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE;YAClB,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,MAAM,EAAE,OAAO,CAAC,MAAM;YACtB,mBAAmB,EAAE,OAAO,CAAC,mBAAmB;YAChD,OAAO,EAAE,OAAO,CAAC,OAAO;SACzB,CAAC,CAAC;QAEH,IAAI,OAAO,CAAC,OAAO,EAAE;YACnB,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;SACzC;IACH,CAAC;IAED,iBAAiB,CAAC,OAAc;QAC9B,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YACzB,MAAM,gBAAgB,GAAG,IAAI,mBAAmB,EAAE,CAAC;YAEnD,gBAAgB,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;YACpC,gBAAgB,CAAC,MAAM,GAAG,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC;YAEjF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;IACL,CAAC;IAED,aAAa,CACX,cAAiC,EACjC,YAGC;QAED,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,KAAK,YAAY,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACrG,MAAM,WAAW,GAAG,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,OAAO,CAC9F,cAAc,CAAC,IAAI,CACpB,CAAC;QAEF,YAAY,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,EAAE;YAChE,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;gBAChC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,IAAI,yBAAyB,EAAE,CAAC;aAC/D;YAED,IAAI,MAAM,CAAC,QAAQ,EAAE;gBACnB,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;aACxD;YAED,IAAI,MAAM,CAAC,IAAI,EAAE;gBACf,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;aAChD;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,cAAc,EAAE;YAClB,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,cAAc,CAAC;SACjF;IACH,CAAC;CACF","sourcesContent":["import { Observable } from 'rxjs';\nimport { IViewComponentRuntimeState } from '../interfaces/view-component-runtime-state.interface';\nimport { RuntimeViewModelApi } from '../runtime-view-model-api.class';\nimport { RuntimeLayoutOutlet, RuntimeLayoutOutletColumn } from './runtime-layout-outlet.class';\nimport { ComponentFactory } from '@angular/core';\nimport { IViewLayoutOutlet } from '@helix/platform/view/api';\n\nexport class RuntimeLayoutItem {\n  config: Observable<IViewComponentRuntimeState>;\n  guid: string;\n  outlets: RuntimeLayoutOutlet[] = [];\n  parent: RuntimeLayoutItem = null;\n  runtimeViewModelApi: RuntimeViewModelApi = null;\n  factory: ComponentFactory<any>;\n\n  constructor(options: {\n    guid: string;\n    parent: RuntimeLayoutItem;\n    runtimeViewModelApi: RuntimeViewModelApi;\n    outlets?: any[];\n    config?: any;\n    factory: any;\n  }) {\n    Object.assign(this, {\n      guid: options.guid,\n      config: options.config,\n      parent: options.parent,\n      runtimeViewModelApi: options.runtimeViewModelApi,\n      factory: options.factory\n    });\n\n    if (options.outlets) {\n      this.initializeOutlets(options.outlets);\n    }\n  }\n\n  initializeOutlets(outlets: any[]) {\n    outlets.forEach((outlet) => {\n      const layoutOutletItem = new RuntimeLayoutOutlet();\n\n      layoutOutletItem.name = outlet.name;\n      layoutOutletItem.height = outlet.hasOwnProperty('height') ? outlet.height : null;\n\n      this.outlets.push(layoutOutletItem);\n    });\n  }\n\n  addLayoutItem(\n    layoutTreeItem: RuntimeLayoutItem,\n    columnConfig: {\n      columnIndex: number;\n      parentOutlet?: IViewLayoutOutlet;\n    }\n  ) {\n    const outlet = this.outlets.find((outletItem) => outletItem.name === columnConfig.parentOutlet.name);\n    const insertIndex = columnConfig.parentOutlet.columns[columnConfig.columnIndex].children.indexOf(\n      layoutTreeItem.guid\n    );\n\n    columnConfig.parentOutlet.columns.forEach((column, columnIndex) => {\n      if (!outlet.columns[columnIndex]) {\n        outlet.columns[columnIndex] = new RuntimeLayoutOutletColumn();\n      }\n\n      if (column.cssClass) {\n        outlet.columns[columnIndex].cssClass = column.cssClass;\n      }\n\n      if (column.span) {\n        outlet.columns[columnIndex].span = column.span;\n      }\n    });\n\n    if (layoutTreeItem) {\n      outlet.columns[columnConfig.columnIndex].children[insertIndex] = layoutTreeItem;\n    }\n  }\n}\n"]}