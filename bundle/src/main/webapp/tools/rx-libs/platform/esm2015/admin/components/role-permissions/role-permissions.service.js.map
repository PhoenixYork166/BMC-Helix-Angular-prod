{"version":3,"file":"role-permissions.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/admin/components/role-permissions/role-permissions.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,QAAQ,EAAc,MAAM,MAAM,CAAC;;;AAK5C,MAAM,OAAO,wBAAwB;IAGnC,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAFlC,SAAI,GAAG,0BAA0B,CAAC;IAEG,CAAC;IAEtC,MAAM,CAAC,cAAyC;QACtD,OAAO,GAAG,IAAI,CAAC,IAAI,IAAI,kBAAkB,CAAC,cAAc,CAAC,eAAe,CAAC,IAAI,kBAAkB,CAC7F,cAAc,CAAC,IAAI,CACpB,EAAE,CAAC;IACN,CAAC;IAED,GAAG,CAAC,cAAyC;QAC3C,OAA0B,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;IAC7E,CAAC;IAEO,UAAU,CAAC,cAAyC;QAC1D,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED,MAAM,CAAC,KAAkC;QACvC,MAAM,iBAAiB,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;QAErE,OAAO,QAAQ,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;IAED,MAAM,CAAC,IAAW;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC/C,CAAC;IAED,MAAM,CAAC,IAAW,EAAE,QAAgB;QAClC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,eAAe,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;IAC3G,CAAC;;qHA/BU,wBAAwB;yHAAxB,wBAAwB,cAFvB,MAAM;2FAEP,wBAAwB;kBAHpC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { IFunctionalRoleDescriptor, IRole } from '@helix/platform/shared/api';\nimport { forkJoin, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRolePermissionsService {\n  private path = '/api/rx/application/role';\n\n  constructor(private httpClient: HttpClient) {}\n\n  private getUrl(roleDescriptor: IFunctionalRoleDescriptor): string {\n    return `${this.path}/${encodeURIComponent(roleDescriptor.applicationName)}/${encodeURIComponent(\n      roleDescriptor.name\n    )}`;\n  }\n\n  get(roleDescriptor: IFunctionalRoleDescriptor): Observable<IRole> {\n    return <Observable<IRole>>this.httpClient.get(this.getUrl(roleDescriptor));\n  }\n\n  private deleteRole(roleDescriptor: IFunctionalRoleDescriptor): Observable<any> {\n    return this.httpClient.delete(this.getUrl(roleDescriptor));\n  }\n\n  delete(roles: IFunctionalRoleDescriptor[]): Observable<any> {\n    const deleteObservables = roles.map((role) => this.deleteRole(role));\n\n    return forkJoin(deleteObservables);\n  }\n\n  create(role: IRole): Observable<any> {\n    return this.httpClient.post(this.path, role);\n  }\n\n  update(role: IRole, roleName: string): Observable<any> {\n    return this.httpClient.put(this.getUrl({ applicationName: role.applicationName, name: roleName }), role);\n  }\n}\n"]}