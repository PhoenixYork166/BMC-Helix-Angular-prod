{"version":3,"file":"named-list-expression-configurator.class.js","sourceRoot":"","sources":["../../../../../../../libs/platform/named-list/designer/named-list-designer/named-list-expression-configurator.class.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,oBAAoB,EAAE,8BAA8B,EAAE,MAAM,4BAA4B,CAAC;AAClG,OAAO,EACL,uBAAuB,EACvB,6BAA6B,EAI7B,wBAAwB,EACzB,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACvD,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,IAAI,IAAI,EAAE,MAAM,QAAQ,CAAC;AACpD,OAAO,EAAc,EAAE,EAAE,MAAM,MAAM,CAAC;AACtC,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAErC,MAAM,OAAO,iCAAkC,SAAQ,wBAAwB;IAkB7E,YAAsB,QAAkB;QACtC,KAAK,EAAE,CAAC;QADY,aAAQ,GAAR,QAAQ,CAAU;QAjBxC,mCAA8B,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;QACnF,qBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAEvD,0BAAqB,GAAgC,EAAE,CAAC,EAAE,CAAC,CAAC;QAE3C,iBAAY,GAA0B;YACrD,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,oDAAoD,CAAC;YAC1F,MAAM,EAAE,IAAI;YACZ,QAAQ,EAAE;gBACR;oBACE,KAAK,EAAE,MAAM;oBACb,IAAI,EAAE,eAAe;oBACrB,UAAU,EAAE,QAAQ;iBACrB;aACF;SACF,CAAC;IAIF,CAAC;IAED,gBAAgB;QACd,uCACK,KAAK,CAAC,gBAAgB,EAAE,KAC3B,SAAS,EAAE,6BAA6B,CAAC,GAAG,CAAC,uBAAuB,CAAC,SAAS,CAAC,IAC/E;IACJ,CAAC;IAED,iCAAiC,CAAC,mBAAyC;QACzE,MAAM,IAAI,GAA0B;YAClC,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAClC,2FAA2F,CAC5F;YACD,QAAQ,EAAE,IAAI;SACf,CAAC;QAEF,IAAI,mBAAmB,CAAC,oBAAoB,EAAE;YAC5C,OAAO,IAAI,CAAC,8BAA8B,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAC3G,GAAG,CAAC,CAAC,gBAAgB,EAAE,EAAE;gBACvB,IAAI,CAAC,QAAQ,GAAG,gBAAgB;oBAC9B,CAAC,CAAC,IAAI,CACF,CAAC,gBAAgB,EAAE,EAAE,CACnB,IAAI,CAAC,gBAAgB,EAAE,CAAC,eAAe,EAAE,EAAE;wBACzC,IAAI,eAAe,CAAC,YAAY,KAAK,oBAAoB,CAAC,SAAS,CAAC,UAAU,CAAC,YAAY,EAAE;4BAC3F,OAAO;gCACL,KAAK,EAAE,eAAe,CAAC,IAAI;gCAC3B,IAAI,EAAE,iCAAiC;gCACvC,UAAU,EAAE,IAAI,eAAe,CAAC,IAAI,GAAG;6BACxC,CAAC;yBACH;oBACH,CAAC,CAAC,EACJ,OAAO,CACR,CAAC,gBAAgB,CAAC,gBAAgB,CAAC;oBACtC,CAAC,CAAC,EAAE,CAAC;gBAEP,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;YACnC,CAAC,CAAC,CACH,CAAC;SACH;aAAM;YACL,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;SAChC;IACH,CAAC;CACF","sourcesContent":["import { Injector } from '@angular/core';\nimport { INamedListDefinition } from '@helix/platform/named-list/api';\nimport { RX_RECORD_DEFINITION, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport {\n  ExpressionOperatorGroup,\n  ExpressionOperatorRowsByGroup,\n  IDataDictionary,\n  IDataDictionaryBranch,\n  IExpressionConfiguratorDefaultPropertyConfig,\n  RxExpressionConfigurator\n} from '@helix/platform/shared/api';\nimport { TranslateService } from '@ngx-translate/core';\nimport { compact, flow, map as _map } from 'lodash';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nexport class RxNamedListExpressionConfigurator extends RxExpressionConfigurator {\n  rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n  translateService = this.injector.get(TranslateService);\n\n  commonDataDictionary$: Observable<IDataDictionary> = of([]);\n\n  private readonly generalGroup: IDataDictionaryBranch = {\n    label: this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),\n    hidden: true,\n    children: [\n      {\n        label: 'NULL',\n        icon: 'd-icon-dollar',\n        expression: '$NULL$'\n      }\n    ]\n  };\n\n  constructor(protected injector: Injector) {\n    super();\n  }\n\n  getDefaultConfig(): IExpressionConfiguratorDefaultPropertyConfig {\n    return {\n      ...super.getDefaultConfig(),\n      operators: ExpressionOperatorRowsByGroup.get(ExpressionOperatorGroup.AllClient)\n    };\n  }\n\n  namedListExpressionDataDictionary(namedListDefinition: INamedListDefinition): Observable<IDataDictionary> {\n    const data: IDataDictionaryBranch = {\n      label: this.translateService.instant(\n        'com.bmc.arsys.rx.client.named-list-designer.expression-configurator.record-instance.label'\n      ),\n      expanded: true\n    };\n\n    if (namedListDefinition.recordDefinitionName) {\n      return this.rxRecordDefinitionCacheService.getRecordDefinition(namedListDefinition.recordDefinitionName).pipe(\n        map((recordDefinition) => {\n          data.children = recordDefinition\n            ? flow(\n                (fieldDefinitions) =>\n                  _map(fieldDefinitions, (fieldDefinition) => {\n                    if (fieldDefinition.resourceType !== RX_RECORD_DEFINITION.dataTypes.attachment.resourceType) {\n                      return {\n                        label: fieldDefinition.name,\n                        icon: 'd-icon-arrow_right_square_input',\n                        expression: `'${fieldDefinition.name}'`\n                      };\n                    }\n                  }),\n                compact\n              )(recordDefinition.fieldDefinitions)\n            : [];\n\n          return [data, this.generalGroup];\n        })\n      );\n    } else {\n      return of([this.generalGroup]);\n    }\n  }\n}\n"]}