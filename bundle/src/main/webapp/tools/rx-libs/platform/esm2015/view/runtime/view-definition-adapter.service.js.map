{"version":3,"file":"view-definition-adapter.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/view/runtime/view-definition-adapter.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAIL,iCAAiC,EACjC,iCAAiC,EACjC,wBAAwB,EACxB,YAAY,EACb,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,mBAAmB,EAAE,oBAAoB,EAAE,MAAM,uBAAuB,CAAC;;;;AAKlF,MAAM,OAAO,8BAA8B;IACzC,YACU,oBAA0C,EAC1C,mBAAwC,EACxC,wBAAkD;QAFlD,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,6BAAwB,GAAxB,wBAAwB,CAA0B;IACzD,CAAC;IAEJ,oFAAoF;IACpF,wBAAwB,CAAC,cAA+B;;QACtD,MAAA,cAAc,CAAC,oBAAoB,0CAAE,OAAO,CAAC,CAAC,wBAAwB,EAAE,EAAE;YACxE,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC;IAED,yFAAyF;IACzF,yBAAyB,CAAC,cAA+B;;QACvD,MAAA,cAAc,CAAC,oBAAoB,0CAAE,OAAO,CAAC,CAAC,wBAAwB,EAAE,EAAE;YACxE,IAAI,CAAC,yBAAyB,CAAC,wBAAwB,EAAE,cAAc,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,gBAAgB,CAAC,mBAAmB;QAC1C,mBAAmB,CAAC,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,CAAC,gBAAgB,CAC/E,mBAAmB,CAAC,gBAAgB,CACrC,CAAC;QAEF,IAAI,mBAAmB,CAAC,oBAAoB,EAAE;YAC5C,mBAAmB,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,wBAAwB,EAAE,EAAE;gBAC5E,IAAI,CAAC,gBAAgB,CAAC,wBAAwB,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAEO,yBAAyB,CAC/B,mBAA+C,EAC/C,MAA2D;;QAE3D,MAAM,sBAAsB,GAC1B,IAAI,CAAC,mBAAmB,CAAC,YAAY,CACnC,MAAA,mBAAmB,CAAC,gBAAgB,0CAAG,iCAAiC,CAAC,EACzE,iCAAiC,CAClC,IAAI,iCAAiC,CAAC;QAEzC,IAAI,sBAAsB,CAAC,QAAQ,CAAC,IAAI,CAAC,wBAAwB,CAAC,aAAa,CAAC,EAAE;YAChF,IAAI,sBAAsB,IAAI,mBAAmB,EAAE;gBACjD,mBAAmB,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC,wBAAwB,EAAE,EAAE;oBAC5E,IAAI,CAAC,yBAAyB,CAAC,wBAAwB,EAAE,mBAAmB,CAAC,CAAC;gBAChF,CAAC,CAAC,CAAC;aACJ;SACF;aAAM;YACL,MAAM,CAAC,oBAAoB,GAAG,MAAM,CAAC,oBAAoB,CAAC,MAAM,CAC9D,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,KAAK,mBAAmB,CACnD,CAAC;YAEF,IAAI,MAAM,CAAC,MAAM,EAAE;gBACjB,MAAM,aAAa,GAAG,YAAY,CAAC,qBAAqB,CACtD,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,EACpD,mBAAmB,CAAC,IAAI,CACzB,CAAC;gBAEF,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;aAC/C;SACF;IACH,CAAC;;2HA/DU,8BAA8B;+HAA9B,8BAA8B,cAF7B,MAAM;2FAEP,8BAA8B;kBAH1C,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  AnyViewComponentDefinition,\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  RX_AVAILABLE_ON_DEVICES_ALL_VALUE,\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RxDeviceDetectionService,\n  RxViewLayout\n} from '@helix/platform/view/api';\nimport { RxJsonParserService, RxObjectUtilsService } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxViewDefinitionAdapterService {\n  constructor(\n    private rxObjectUtilsService: RxObjectUtilsService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxDeviceDetectionService: RxDeviceDetectionService\n  ) {}\n\n  // called to make view modifications before the view component adapters are executed\n  preProcessViewDefinition(viewDefinition: IViewDefinition): void {\n    viewDefinition.componentDefinitions?.forEach((childComponentDefinition) => {\n      this.expandProperties(childComponentDefinition);\n    });\n  }\n\n  // called to make view modifications after the view component adapters have been executed\n  postProcessViewDefinition(viewDefinition: IViewDefinition): void {\n    viewDefinition.componentDefinitions?.forEach((childComponentDefinition) => {\n      this.filterComponentsForDevice(childComponentDefinition, viewDefinition);\n    });\n  }\n\n  private expandProperties(componentDefinition): void {\n    componentDefinition.propertiesByName = this.rxObjectUtilsService.expandProperties(\n      componentDefinition.propertiesByName\n    );\n\n    if (componentDefinition.componentDefinitions) {\n      componentDefinition.componentDefinitions.forEach((childComponentDefinition) => {\n        this.expandProperties(childComponentDefinition);\n      });\n    }\n  }\n\n  private filterComponentsForDevice(\n    componentDefinition: AnyViewComponentDefinition,\n    parent: IContainerViewComponentDefinition | IViewDefinition\n  ): void {\n    const availableOnDevicesProp =\n      this.rxJsonParserService.tryParseJson(\n        componentDefinition.propertiesByName?.[RX_AVAILABLE_ON_DEVICES_PROP_NAME],\n        RX_AVAILABLE_ON_DEVICES_ALL_VALUE\n      ) || RX_AVAILABLE_ON_DEVICES_ALL_VALUE;\n\n    if (availableOnDevicesProp.includes(this.rxDeviceDetectionService.currentDevice)) {\n      if ('componentDefinitions' in componentDefinition) {\n        componentDefinition.componentDefinitions.forEach((childComponentDefinition) => {\n          this.filterComponentsForDevice(childComponentDefinition, componentDefinition);\n        });\n      }\n    } else {\n      parent.componentDefinitions = parent.componentDefinitions.filter(\n        (definition) => definition !== componentDefinition\n      );\n\n      if (parent.layout) {\n        const updatedLayout = RxViewLayout.removeChildFromLayout(\n          this.rxJsonParserService.tryParseJson(parent.layout),\n          componentDefinition.guid\n        );\n\n        parent.layout = JSON.stringify(updatedLayout);\n      }\n    }\n  }\n}\n"]}