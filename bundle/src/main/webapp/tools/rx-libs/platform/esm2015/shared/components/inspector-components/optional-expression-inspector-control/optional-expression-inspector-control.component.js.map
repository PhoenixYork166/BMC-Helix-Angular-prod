{"version":3,"file":"optional-expression-inspector-control.component.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/shared/components/inspector-components/optional-expression-inspector-control/optional-expression-inspector-control.component.ts","../../../../../../../../libs/platform/shared/components/inspector-components/optional-expression-inspector-control/optional-expression-inspector-control.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAoC,MAAM,eAAe,CAAC;AAC5E,OAAO,EAAe,iBAAiB,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3E,OAAO,EAAE,oBAAoB,EAAE,MAAM,8CAA8C,CAAC;;;;AAepF,MAAM,OAAO,2CACX,SAAQ,oBAAyG;IAZnH;;QAeE,gBAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,OAAsB,CAAC;KAoBnE;IAjBC,QAAQ;QACN,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,WAAW,CAAC,OAAsB;QAChC,IAAI,OAAO,CAAC,OAAO,EAAE;YACnB,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;IACH,CAAC;IAEO,YAAY;QAClB,IAAI,CAAC,oCAAoC,mCACpC,IAAI,CAAC,OAAO,KACf,eAAe,EAAE,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,iBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,EACnG,SAAS,EAAE,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,GACzF,CAAC;IACJ,CAAC;;wIAvBU,2CAA2C;4HAA3C,2CAA2C,mEAR3C;QACT;YACE,OAAO,EAAE,iBAAiB;YAC1B,WAAW,EAAE,2CAA2C;YACxD,KAAK,EAAE,IAAI;SACZ;KACF,sEChBH,+OAMA;2FDYa,2CAA2C;kBAXvD,SAAS;mBAAC;oBACT,QAAQ,EAAE,0CAA0C;oBACpD,WAAW,EAAE,wDAAwD;oBACrE,SAAS,EAAE;wBACT;4BACE,OAAO,EAAE,iBAAiB;4BAC1B,WAAW,6CAA6C;4BACxD,KAAK,EAAE,IAAI;yBACZ;qBACF;iBACF","sourcesContent":["import { Component, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { FormControl, NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';\nimport { IExpressionConfiguratorProvider } from '@helix/platform/shared/api';\nimport { InspectorControlBase } from '../../inspector/inspector-control-base.class';\nimport { IOptionalExpressionInspectorControlOptions } from './optional-expression-inspector-control-options.interface';\nimport { IOptionalExpressionControlOptions } from '../../form-controls';\n\n@Component({\n  selector: 'rx-optional-expression-inspector-control',\n  templateUrl: './optional-expression-inspector-control.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: OptionalExpressionInspectorControlComponent,\n      multi: true\n    }\n  ]\n})\nexport class OptionalExpressionInspectorControlComponent\n  extends InspectorControlBase<string, IOptionalExpressionInspectorControlOptions, IExpressionConfiguratorProvider>\n  implements OnInit, OnChanges\n{\n  formControl = this.injector.get(NgControl).control as FormControl;\n  optionalExpressionFormControlOptions: IOptionalExpressionControlOptions;\n\n  ngOnInit(): void {\n    this.patchOptions();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.optinos) {\n      this.patchOptions();\n    }\n  }\n\n  private patchOptions(): void {\n    this.optionalExpressionFormControlOptions = {\n      ...this.options,\n      dataDictionary$: this.designerItemModel.expressionConfigurator.getDataDictionary(this.propertyPath),\n      operators: this.designerItemModel.expressionConfigurator.getOperators(this.propertyPath)\n    };\n  }\n}\n","<rx-optional-expression-form-control\n  [formControl]=\"formControl\"\n  [propertyPath]=\"propertyPath\"\n  [options]=\"optionalExpressionFormControlOptions\"\n  (events)=\"events.emit($event)\"\n></rx-optional-expression-form-control>\n"]}