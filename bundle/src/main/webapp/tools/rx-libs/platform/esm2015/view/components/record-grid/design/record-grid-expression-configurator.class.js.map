{"version":3,"file":"record-grid-expression-configurator.class.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/record-grid/design/record-grid-expression-configurator.class.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injector } from '@angular/core';\nimport { RxViewComponentExpressionConfigurator } from '@helix/platform/view/designer';\nimport { ExpressionOperatorGroup, RxDefinitionNameService } from '@helix/platform/shared/api';\nimport { IRecordDefinition, RxRecordDefinitionCacheService, RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IAssociationDescriptor } from '@helix/platform/association/api';\nimport { forkJoin, of } from 'rxjs';\nimport { concatMap, map, switchMap } from 'rxjs/operators';\nimport { RecordGridDesignModel } from './record-grid-design.model';\nimport { RxRecordGridUtilsService } from '../common/services/record-grid-utils.service';\nimport { map as _map } from 'lodash';\nimport { RX_RECORD_GRID_DESIGN } from './record-grid-design.constant';\n\nexport class RecordGridExpressionConfigurator extends RxViewComponentExpressionConfigurator {\n  private rxDefinitionNameService = this.injector.get(RxDefinitionNameService);\n  private rxRecordGridUtilsService = this.injector.get(RxRecordGridUtilsService);\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n\n  constructor(injector: Injector, protected componentGuid: string, protected componentModel: RecordGridDesignModel) {\n    super(injector, componentGuid, componentModel);\n\n    const filterExpressionBranch$ = this.getComponentCommonDataDictionary().pipe(\n      switchMap((componentCommonBranch) =>\n        componentCommonBranch\n          ? componentModel.recordDefinition$.pipe(\n              concatMap((recordDefinition) =>\n                this.rxRecordGridUtilsService.getAssociationDescriptors(recordDefinition.name).pipe(\n                  concatMap((associationDescriptors) =>\n                    associationDescriptors.length\n                      ? forkJoin(\n                          associationDescriptors.map((associationDescriptor) =>\n                            this.rxRecordDefinitionCacheService\n                              .getRecordDefinition(associationDescriptor.recordDefinitionName)\n                              .pipe(\n                                map((associationRecordDefinition) => ({\n                                  ...associationDescriptor,\n                                  recordDefinition: associationRecordDefinition\n                                }))\n                              )\n                          )\n                        )\n                      : of([])\n                  ),\n                  map(\n                    (\n                      associationDescriptors: Array<\n                        IAssociationDescriptor & {\n                          recordDefinition: IRecordDefinition;\n                        }\n                      >\n                    ) =>\n                      recordDefinition\n                        ? {\n                            label: 'Filter by',\n                            children: [\n                              {\n                                label: this.rxDefinitionNameService.getDisplayName(recordDefinition.name),\n                                icon: 'd-icon-file_o_gear',\n                                children: recordDefinition.fieldDefinitions.map((fieldDefinition) => {\n                                  const selectionList =\n                                    fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection\n                                      ? _map(fieldDefinition.optionNamesById, (optionName, optionValue) => ({\n                                          label: optionName,\n                                          expression: `\\${view.components.${componentGuid}.recordDefinition.fieldDefinitionsById[${fieldDefinition.id}].optionsById[${optionValue}].id}`\n                                        }))\n                                      : undefined;\n\n                                  return {\n                                    label: fieldDefinition.name,\n                                    icon: 'd-icon-file_o_gear',\n                                    expression: `'${fieldDefinition.id}'`,\n                                    children:\n                                      fieldDefinition.resourceType === RX_RECORD_DEFINITION.resourceTypes.selection\n                                        ? [\n                                            {\n                                              label: 'Options',\n                                              children: selectionList\n                                            }\n                                          ]\n                                        : null,\n                                    autocompleteOptions: selectionList\n                                  };\n                                })\n                              },\n                              ...(associationDescriptors\n                                ? associationDescriptors.map((descriptor) => ({\n                                    label: this.rxDefinitionNameService.getDisplayName(\n                                      descriptor.associationDefinition.name\n                                    ),\n                                    icon: 'd-icon-file_o_gear',\n                                    children: descriptor.recordDefinition.fieldDefinitions.map((fieldDefinition) => ({\n                                      label: fieldDefinition.name,\n                                      icon: 'd-icon-file_o_gear',\n                                      expression: `'\\${recordContext._associations.${descriptor.associationDefinition.guid}.${descriptor.nodeSide}[0].${fieldDefinition.id}}'`\n                                    }))\n                                  }))\n                                : [])\n                            ]\n                          }\n                        : []\n                  )\n                )\n              ),\n              map((filterByBranch) => ({\n                ...componentCommonBranch,\n                children: [filterByBranch, ...componentCommonBranch.children]\n              }))\n            )\n          : of(null)\n      )\n    );\n\n    this.configureForProperty({\n      propertyPath: 'filterExpression',\n      operators: this.getOperatorRowsByGroup(ExpressionOperatorGroup.AllServer),\n      dataDictionary$: this.getCommonDataDictionary(filterExpressionBranch$).pipe(\n        map((dataDictionary) => [\n          RX_RECORD_GRID_DESIGN.keywords,\n          ...(dataDictionary.filter(\n            (dataDictionaryBranch) =>\n              dataDictionaryBranch.label !== 'General' && dataDictionaryBranch.label !== 'Functions'\n          ) || [])\n        ])\n      )\n    });\n  }\n}\n"]}