{"version":3,"file":"expression-configurator-operator.types.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/expression-configurator/expression-configurator-operator.types.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExpressionOperator } from '../expression-operator/expression-operator.enum';\n\nexport enum ExpressionOperatorGroup {\n  All = 'all',\n  AllServer = 'allServer',\n  AllClient = 'allClient',\n  Math = 'math',\n  MathClient = 'mathClient'\n}\n\nexport interface IExpressionOperator {\n  displayValue: string;\n  value: ExpressionOperator | string;\n  tooltip?: {\n    title: string;\n    content: string;\n  };\n}\n\nexport interface IExpressionOperatorRow extends Array<IExpressionOperator> {}\n\nconst allOperatorsMap = new Map<ExpressionOperator, IExpressionOperator>(\n  Object.values(ExpressionOperator).map((value) => [\n    value,\n    {\n      displayValue: value === ExpressionOperator.NullExpression ? 'NULL' : value,\n      value\n    }\n  ])\n);\n\nconst allOperatorRows = [\n  [\n    allOperatorsMap.get(ExpressionOperator.LeftGrouping),\n    allOperatorsMap.get(ExpressionOperator.RightGrouping),\n    allOperatorsMap.get(ExpressionOperator.DoubleQuote),\n    allOperatorsMap.get(ExpressionOperator.Add),\n    allOperatorsMap.get(ExpressionOperator.Subtract),\n    allOperatorsMap.get(ExpressionOperator.Multiply),\n    allOperatorsMap.get(ExpressionOperator.Divide),\n    allOperatorsMap.get(ExpressionOperator.Remainder)\n  ],\n  [\n    allOperatorsMap.get(ExpressionOperator.GreaterThan),\n    allOperatorsMap.get(ExpressionOperator.LessThan),\n    allOperatorsMap.get(ExpressionOperator.Equal),\n    allOperatorsMap.get(ExpressionOperator.NotEqual),\n    allOperatorsMap.get(ExpressionOperator.GreaterThanOrEqual),\n    allOperatorsMap.get(ExpressionOperator.LessThanOrEqual),\n    allOperatorsMap.get(ExpressionOperator.Like)\n  ],\n  [\n    allOperatorsMap.get(ExpressionOperator.And),\n    allOperatorsMap.get(ExpressionOperator.Or),\n    allOperatorsMap.get(ExpressionOperator.Not),\n    allOperatorsMap.get(ExpressionOperator.NullExpression)\n  ]\n];\n\nconst allClientOperatorRows = [\n  [...allOperatorRows[0]],\n  [\n    allOperatorsMap.get(ExpressionOperator.GreaterThan),\n    allOperatorsMap.get(ExpressionOperator.LessThan),\n    allOperatorsMap.get(ExpressionOperator.Equal),\n    allOperatorsMap.get(ExpressionOperator.NotEqual),\n    allOperatorsMap.get(ExpressionOperator.GreaterThanOrEqual),\n    allOperatorsMap.get(ExpressionOperator.LessThanOrEqual),\n    allOperatorsMap.get(ExpressionOperator.Contains)\n  ],\n  [\n    allOperatorsMap.get(ExpressionOperator.And),\n    allOperatorsMap.get(ExpressionOperator.Or),\n    allOperatorsMap.get(ExpressionOperator.Not),\n    allOperatorsMap.get(ExpressionOperator.Null)\n  ]\n];\n\nconst mathOperatorRow = [\n  allOperatorsMap.get(ExpressionOperator.LeftGrouping),\n  allOperatorsMap.get(ExpressionOperator.RightGrouping),\n  allOperatorsMap.get(ExpressionOperator.DoubleQuote),\n  allOperatorsMap.get(ExpressionOperator.Add),\n  allOperatorsMap.get(ExpressionOperator.Subtract),\n  allOperatorsMap.get(ExpressionOperator.Multiply),\n  allOperatorsMap.get(ExpressionOperator.Divide),\n  allOperatorsMap.get(ExpressionOperator.Remainder)\n];\n\nexport const ExpressionOperatorRowsByGroup = new Map<ExpressionOperatorGroup, IExpressionOperatorRow[]>([\n  [ExpressionOperatorGroup.All, allOperatorRows],\n  [ExpressionOperatorGroup.AllServer, allOperatorRows],\n  [ExpressionOperatorGroup.AllClient, allClientOperatorRows],\n  [ExpressionOperatorGroup.Math, [[...mathOperatorRow, allOperatorsMap.get(ExpressionOperator.NullExpression)]]],\n  [ExpressionOperatorGroup.MathClient, [[...mathOperatorRow, allOperatorsMap.get(ExpressionOperator.Null)]]]\n]);\n"]}