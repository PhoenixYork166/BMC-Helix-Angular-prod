{"version":3,"file":"tags-form-control.component.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/shared/components/form-controls/tags-form-control/tags-form-control.component.ts","../../../../../../../../libs/platform/shared/components/form-controls/tags-form-control/tags-form-control.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AACvE,OAAO,EAAE,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AAEnD,OAAO,EAAE,aAAa,EAAE,MAAM,mCAAmC,CAAC;AAElE,OAAO,EAAE,qBAAqB,EAAuB,MAAM,uBAAuB,CAAC;AACnF,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAE3C,OAAO,EAAE,YAAY,EAAE,oBAAoB,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACzE,OAAO,EAAE,eAAe,EAAE,MAAM,uBAAuB,CAAC;;;;;AAcxD,MAAM,OAAO,wBAAyB,SAAQ,aAAqB;IAYjE,YAAoB,eAAgC,EAAU,QAAmB;QAC/E,KAAK,EAAE,CAAC;QADU,oBAAe,GAAf,eAAe,CAAiB;QAAU,aAAQ,GAAR,QAAQ,CAAW;QAHjF,4BAAuB,GACrB,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAIrC,CAAC;IAED,KAAK;QACH,aAAa;QACb,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC,yBAAyB,CAAC,QAAQ,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;IACrH,CAAC;IAED,iBAAiB,CAAC,IAA6B;QAC7C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;IAED,YAAY,CAAC,KAAa;QACxB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC;IAED,iBAAiB,CAAC,IAA6B;QAC7C,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE;YACjB,OAAO,IAAI,CAAC;SACb;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAE5G,OAAO,UAAU,CAAC,OAAO,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;IAC5C,CAAC;IAED,iBAAiB,CAAC,GAA0B;QAC1C,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;IACvB,CAAC;IAED,iBAAiB,CAAC,UAAkB;QAClC,IAAI,UAAU,EAAE;YACd,MAAM,IAAI,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACnC,MAAM,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC;YAE3D,IAAI,OAAO,CAAC,kBAAkB,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC;aACb;YAED,OAAO,IAAI;iBACR,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC;iBACtG,MAAM,CAAC,OAAO,CAAC,CAAC;SACpB;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;IAED,kBAAkB,CAAC,KAAyB;QAC1C,OAAO,KAAK,CAAC,IAAI,CACf,YAAY,CAAC,GAAG,CAAC,EACjB,oBAAoB,EAAE,EACtB,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE;YACjB,MAAM,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC;YAE3D,IAAI,OAAO,CAAC,kBAAkB,CAAC,EAAE;gBAC/B,OAAO,EAAE,CAAC;aACX;YAED,OAAO,kBAAkB,CAAC,MAAM,CAAC,CAAC,iBAAiB,EAAE,EAAE,CACrD,IAAI,CAAC,eAAe,CAAC,qBAAqB,CAAC,iBAAiB,CAAC,IAAI,EAAE,UAAU,CAAC,CAC/E,CAAC;QACJ,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED,gBAAgB,CAAC,KAA0B;QACzC,MAAM,GAAG,GAAG,KAAK,CAAC,GAA4B,CAAC;QAE/C,IAAI,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,EAAE;YAC/B,KAAK,CAAC,cAAc,EAAE,CAAC;SACxB;IACH,CAAC;;qHAtFU,wBAAwB;yGAAxB,wBAAwB,+EATxB;QACT;YACE,OAAO,EAAE,iBAAiB;YAC1B,WAAW,EAAE,wBAAwB;YACrC,KAAK,EAAE,IAAI;SACZ;KACF,+KCpBH,4kBAkBA;2FDKa,wBAAwB;kBAZpC,SAAS;mBAAC;oBACT,QAAQ,EAAE,sBAAsB;oBAChC,WAAW,EAAE,oCAAoC;oBACjD,SAAS,EAAE;wBACT;4BACE,OAAO,EAAE,iBAAiB;4BAC1B,WAAW,0BAA0B;4BACrC,KAAK,EAAE,IAAI;yBACZ;qBACF;oBACD,SAAS,EAAE,CAAC,oCAAoC,CAAC;iBAClD;8HAGC,OAAO;sBADN,KAAK;gBAIN,aAAa;sBADZ,SAAS;uBAAC,eAAe,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE","sourcesContent":["import { Component, Input, Renderer2, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IFormControlComponent, IFormFocusable } from '@helix/platform/shared/api';\nimport { ValueAccessor } from '../../form-builder/value-accessor';\nimport { ITagsFormControlOptions, ITagsFormControlModel, ITagAutocompleteValue } from './tags-form-control.types';\nimport { AdaptMetatagComponent, InitTagEditingEvent } from '@bmc-ux/adapt-angular';\nimport { isEmpty, isObject } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\nimport { RxStringService } from '@helix/platform/utils';\n\n@Component({\n  selector: 'rx-tags-form-control',\n  templateUrl: './tags-form-control.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: TagsFormControlComponent,\n      multi: true\n    }\n  ],\n  styleUrls: ['./tags-form-control.component.scss']\n})\nexport class TagsFormControlComponent extends ValueAccessor<string> implements IFormControlComponent, IFormFocusable {\n  @Input()\n  options: ITagsFormControlOptions;\n\n  @ViewChild('adaptTagField', { static: true })\n  adaptTagField: AdaptMetatagComponent;\n\n  tags: ITagsFormControlModel[];\n\n  autocompleteSearchBound: (text$: Observable<string>) => Observable<ITagAutocompleteValue[]> =\n    this.autocompleteSearch.bind(this);\n\n  constructor(private rxStringService: RxStringService, private renderer: Renderer2) {\n    super();\n  }\n\n  focus(): void {\n    // @ts-ignore\n    this.renderer.selectRootElement(this.adaptTagField.adaptRxTypeaheadComponent.inputRef.nativeElement, true).focus();\n  }\n\n  onTagsModelChange(tags: ITagsFormControlModel[]): void {\n    this.tags = tags;\n\n    this.value = this.getStringFromTags(tags);\n  }\n\n  onWriteValue(value: string): void {\n    this.tags = this.getTagsFromString(value);\n  }\n\n  getStringFromTags(tags: ITagsFormControlModel[]): string {\n    if (isEmpty(tags)) {\n      return null;\n    }\n\n    const tagsString = tags.map((tag) => (this.isAutocompleteTag(tag) ? tag.data.value : tag).trim()).join(' ');\n\n    return tagsString.replace(/\\s{2,}/g, ' ');\n  }\n\n  isAutocompleteTag(tag: ITagsFormControlModel): tag is ITagAutocompleteValue {\n    return isObject(tag);\n  }\n\n  getTagsFromString(tagsString: string): ITagsFormControlModel[] {\n    if (tagsString) {\n      const tags = tagsString.split(' ');\n      const autocompleteValues = this.options.autocompleteValues;\n\n      if (isEmpty(autocompleteValues)) {\n        return tags;\n      }\n\n      return tags\n        .map((tag) => autocompleteValues.find((autocomplete) => autocomplete.data.value === tag) || tag.trim())\n        .filter(Boolean);\n    }\n\n    return [];\n  }\n\n  autocompleteSearch(text$: Observable<string>): Observable<ITagAutocompleteValue[]> {\n    return text$.pipe(\n      debounceTime(250),\n      distinctUntilChanged(),\n      map((searchTerm) => {\n        const autocompleteValues = this.options.autocompleteValues;\n\n        if (isEmpty(autocompleteValues)) {\n          return [];\n        }\n\n        return autocompleteValues.filter((autocompleteValue) =>\n          this.rxStringService.caseInsensitiveSearch(autocompleteValue.text, searchTerm)\n        );\n      })\n    );\n  }\n\n  onInitTagEditing(event: InitTagEditingEvent): void {\n    const tag = event.tag as ITagsFormControlModel;\n\n    if (this.isAutocompleteTag(tag)) {\n      event.preventDefault();\n    }\n  }\n}\n","<adapt-tag-field\n  #adaptTagField\n  [label]=\"options.label\"\n  [placeholder]=\"options.placeholder\"\n  [required]=\"options.required\"\n  [ngModel]=\"tags\"\n  [disabled]=\"isDisabled\"\n  [popoverContent]=\"options.tooltip?.content\"\n  [popoverIcon]=\"options.tooltip?.iconName\"\n  (ngModelChange)=\"onTagsModelChange($event)\"\n  [replaceModelOnWrite]=\"true\"\n  [delimiterSymbol]=\"null\"\n  [search]=\"autocompleteSearchBound\"\n  [openDropdownOnFocus]=\"true\"\n  [errorCheck]=\"options.errorCheck\"\n  (initTagEditing)=\"onInitTagEditing($event)\"\n>\n</adapt-tag-field>\n"]}