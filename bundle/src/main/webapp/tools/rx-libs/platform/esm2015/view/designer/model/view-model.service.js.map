{"version":3,"file":"view-model.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/designer/model/view-model.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Injector, OnDestroy } from '@angular/core';\nimport {\n  concatMapTo,\n  distinctUntilChanged,\n  filter,\n  first,\n  map,\n  shareReplay,\n  skip,\n  switchMap,\n  switchMapTo,\n  take,\n  takeUntil,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { compact, find, findIndex, flatten, flow, isEmpty, isEqual, map as _map, uniq } from 'lodash';\nimport {\n  IViewDefinition,\n  RX_VIEW_DEFINITION,\n  RxViewComponentRegistryService,\n  RxViewComponentType,\n  RxViewDefinitionCacheService,\n  RxViewDefinitionParserService\n} from '@helix/platform/view/api';\nimport { RxGuidService, RxStringService } from '@helix/platform/utils';\nimport { IViewComponentDesignValidationIssue, IViewDesignerInspectorConfig } from '../public-interfaces';\nimport { validateCssClassName, validateCssClassNames } from '../core/validation-helpers';\nimport { IViewComponentDesignModels } from '../interfaces/view-component-design-models.interface';\nimport { IViewDesignModel } from '../interfaces/view-design-model.interface';\nimport {\n  IListFormControlOptions,\n  IPermissionEditorComponentOptions,\n  ISelectFormControlOptions,\n  ISelectOption,\n  ITagsFormControlOptions,\n  ITextareaFormControlOptions,\n  ITextFormControlOptions,\n  ListFormControlComponent,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  RxPermissionEditorComponent,\n  SelectFormControlComponent,\n  TagsFormControlComponent,\n  TextareaFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport {\n  IDataDictionaryBranch,\n  IFormSectionBuilderConfig,\n  RxBundleCacheService,\n  RxDefinitionNameService,\n  RxOverlayService,\n  Tooltip\n} from '@helix/platform/shared/api';\nimport { ViewDesignerFacade } from '../+state/view-designer.facade';\nimport { getChildGuidsFromModel } from '../core/layout-helpers';\nimport * as ViewComponentActions from '../+state/view-component.actions';\nimport { ViewDesignerDispatcher } from '../+state/view-designer-dispatcher.service';\nimport { combineLatest, Observable, of, ReplaySubject } from 'rxjs';\nimport { RxViewExpressionValidatorService } from '../validation/view-expression-validator.service';\nimport { RxViewComponentExpressionConfigurator } from '../expression-configurator/view-component-expression-configurator.class';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { RxViewCustomizationOptionsComponent } from '../form-controls/view-customization-options-widget/view-customization-options.component';\nimport { RxViewRevertCustomizationComponent } from '../form-controls/view-revert-customization';\n\n@Injectable()\nexport class RxViewModel implements OnDestroy {\n  readonly expressionConfigurator = new RxViewComponentExpressionConfigurator(this.injector, null, this);\n\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  private allViewDefinitionNamesByBundleId$ = this.viewDesignerFacade.currentBundleId$.pipe(\n    filter<string>(Boolean),\n    switchMap((bundleId) =>\n      this.rxViewDefinitionCacheService\n        .getViewDefinitionNames(bundleId)\n        .pipe(map((names) => names.map((name) => this.rxDefinitionNameService.getDisplayNameForValidation(name))))\n    )\n  );\n\n  private targetExtensionContainerOptions$ = this.viewDesignerFacade\n    .getViewPropertyValue('targetViewDefinitionName')\n    .pipe(\n      switchMap((targetViewDefinitionName) =>\n        targetViewDefinitionName\n          ? this.getTargetExtensionContainerOptions(targetViewDefinitionName).pipe(take(1))\n          : of(null)\n      ),\n      shareReplay(1)\n    );\n\n  private targetViewDefinition$ = this.viewDesignerFacade.getViewPropertyValue('targetViewDefinitionName').pipe(\n    filter<string>(Boolean),\n    switchMap((targetViewDefinitionName) =>\n      this.rxViewDefinitionCacheService.getViewDefinition(targetViewDefinitionName)\n    )\n  );\n\n  constructor(\n    private injector: Injector,\n    private viewDesignerFacade: ViewDesignerFacade,\n    private rxStringService: RxStringService,\n    private rxOverlayService: RxOverlayService,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private rxBundleCacheService: RxBundleCacheService,\n    private rxModalService: RxModalService,\n    private rxViewDefinitionCacheService: RxViewDefinitionCacheService,\n    private rxViewDefinitionParserService: RxViewDefinitionParserService,\n    private rxGuidService: RxGuidService,\n    private viewDesignerDispatcher: ViewDesignerDispatcher,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxViewExpressionValidatorService: RxViewExpressionValidatorService\n  ) {\n    this.init();\n  }\n\n  private init(): void {\n    // Initial model and inspector configuration.\n    this.viewDesignerFacade.initViewDesigner$\n      .pipe(\n        concatMapTo(\n          this.viewDesignerFacade.viewModelsInitialized$.pipe(\n            switchMapTo(\n              combineLatest([\n                this.viewDesignerFacade.viewComponentModels$.pipe(\n                  map((viewComponentModels) => {\n                    const pageComponentModel = Object.values(viewComponentModels).find(\n                      (model) => model.type === RxViewComponentType.Page\n                    );\n\n                    return pageComponentModel\n                      ? viewComponentModels[pageComponentModel.childDataComponentGuids[0]].type\n                      : null;\n                  })\n                ),\n                this.viewDesignerFacade.viewModel$,\n                this.targetExtensionContainerOptions$\n              ]).pipe(take(1))\n            )\n          )\n        ),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(([componentType, viewModel, targetExtensionContainerOptions]) => {\n        this.viewDesignerFacade.updateViewProperties({\n          pageComponent: componentType\n        });\n\n        this.viewDesignerFacade.setViewInspectorConfig(\n          this.getInspector({ ...viewModel, pageComponent: componentType }, targetExtensionContainerOptions)\n        );\n      });\n\n    this.viewDesignerFacade.initViewDesigner$\n      .pipe(\n        switchMapTo(\n          this.targetExtensionContainerOptions$.pipe(\n            // Ignore initial property change.\n            skip(1),\n            withLatestFrom(this.viewDesignerFacade.viewModel$)\n          )\n        ),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(([options, viewModel]) => this.onTargetExtensionContainerOptionsChange(options, viewModel));\n\n    this.viewDesignerFacade.initViewDesigner$\n      .pipe(\n        switchMapTo(\n          this.viewDesignerFacade.getViewPropertyValue('pageComponent').pipe(\n            // Ignore initial property change.\n            skip(1),\n            switchMapTo(\n              combineLatest([\n                this.viewDesignerFacade.viewModel$,\n                this.viewDesignerFacade.viewComponentModels$,\n                this.targetExtensionContainerOptions$\n              ]).pipe(take(1))\n            )\n          )\n        ),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(([viewModel, viewComponentModels, targetExtensionContainerOptions]) =>\n        this.onPageComponentChange(viewModel, viewComponentModels, targetExtensionContainerOptions)\n      );\n\n    this.viewDesignerFacade.initViewDesigner$\n      .pipe(\n        switchMapTo(this.viewDesignerFacade.getViewPropertyValue('targetViewDefinitionName').pipe(skip(1))),\n        switchMap(() => this.viewDesignerFacade.viewComponentModels$.pipe(first())),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((viewComponentModels) => {\n        if (!isEmpty(viewComponentModels)) {\n          this.viewDesignerFacade.clearCanvas();\n        }\n      });\n\n    this.viewDesignerFacade.initViewDesigner$\n      .pipe(\n        switchMapTo(\n          combineLatest([\n            this.viewDesignerFacade.getViewPropertyValue('styles').pipe(map(validateCssClassNames)),\n            this.validateDisplayName(),\n            this.validateInputParams(),\n            this.validateOutputParamExpressions(),\n            this.validateExtensionContainer()\n          ]).pipe(map(flatten), map(compact), withLatestFrom(this.viewDesignerFacade.viewModelGuid$))\n        ),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(([issues, guid]) => {\n        this.viewDesignerFacade.setValidationIssues(guid, issues);\n      });\n\n    this.viewDesignerFacade.initViewDesigner$\n      .pipe(switchMapTo(this.viewDesignerFacade.getViewPropertyValue('inputParams')), takeUntil(this.destroyed$))\n      .subscribe((inputParams) =>\n        this.viewDesignerFacade.setViewCommonDataDictionaryBranch(this.getViewCommonDataDictionary(inputParams))\n      );\n\n    this.viewDesignerFacade\n      .getViewPropertyValue('targetExtensionContainerGuid')\n      .pipe(\n        withLatestFrom(this.targetViewDefinition$),\n        map(([targetExtensionContainerGuid, targetViewDefinition]) =>\n          this.getTargetRecordDefinitionName(targetViewDefinition, targetExtensionContainerGuid)\n        ),\n        distinctUntilChanged(),\n        switchMapTo(this.viewDesignerFacade.viewComponentModels$.pipe(take(1))),\n        filter((viewComponentModels) => !isEmpty(viewComponentModels)),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(() => this.viewDesignerFacade.clearCanvas());\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  private getTargetExtensionContainerOptions(targetViewDefinitionName: string): Observable<ISelectOption[]> {\n    return this.rxViewDefinitionCacheService.getViewDefinition(targetViewDefinitionName).pipe(\n      map((viewDefinition) =>\n        this.rxViewDefinitionParserService\n          .getComponents(viewDefinition)\n          .filter(({ componentDefinition }) => componentDefinition.type === RxViewComponentType.ExtensionContainer)\n          .map(({ componentDefinition }) => ({\n            id: componentDefinition.guid,\n            name: componentDefinition.propertiesByName.name || componentDefinition.name\n          }))\n      )\n    );\n  }\n\n  private onTargetExtensionContainerOptionsChange(options: ISelectOption[], viewModel: IViewDesignModel): void {\n    this.viewDesignerFacade.setViewInspectorConfig(this.getInspector(viewModel, options));\n\n    // targetViewDefinitionName is not selected when options are not defined.\n    if (!options) {\n      this.viewDesignerFacade.updateViewProperties({\n        targetExtensionContainerGuid: null\n      });\n    } else if (options.length === 1) {\n      this.viewDesignerFacade.updateViewProperties({\n        targetExtensionContainerGuid: options[0].id\n      });\n    }\n  }\n\n  private onPageComponentChange(\n    viewModel: IViewDesignModel,\n    componentModels: IViewComponentDesignModels,\n    options: ISelectOption[]\n  ): void {\n    const pageComponentModel = find(componentModels, { type: RxViewComponentType.Page });\n    this.viewDesignerFacade.setViewInspectorConfig(this.getInspector(viewModel, options));\n\n    const actions = [];\n\n    if (viewModel.pageComponent) {\n      if (pageComponentModel) {\n        this.viewDesignerFacade.updateComponentModel(pageComponentModel.childDataComponentGuids[0], {\n          type: viewModel.pageComponent\n        });\n      } else {\n        const pageComponentGuid = this.rxGuidService.generate();\n\n        if (!isEmpty(componentModels)) {\n          this.viewDesignerFacade.removeViewComponents(getChildGuidsFromModel(viewModel));\n        }\n\n        actions.push(\n          ViewComponentActions.initializeComponentModels({\n            payload: [\n              {\n                componentModel: {\n                  guid: pageComponentGuid,\n                  resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n                  type: RxViewComponentType.Page,\n                  propertiesByName: {},\n                  parentGuid: viewModel.guid\n                },\n                insertIndex: 0,\n                columnIndex: 0,\n                outletName: RX_VIEW_DEFINITION.defaultOutletName\n              }\n            ]\n          }),\n          ViewComponentActions.initializeDataComponentModels({\n            payload: [\n              {\n                componentModel: {\n                  guid: this.rxGuidService.generate(),\n                  type: viewModel.pageComponent,\n                  resourceType: RX_VIEW_DEFINITION.resourceTypes.viewComponent,\n                  propertiesByName: {},\n                  parentGuid: pageComponentGuid\n                }\n              }\n            ]\n          })\n        );\n      }\n\n      this.viewDesignerFacade.updateViewProperties({\n        inputParams: [],\n        outputParams: []\n      });\n    } else if (pageComponentModel) {\n      this.viewDesignerFacade.removeViewComponents([pageComponentModel.guid]);\n    }\n\n    actions.forEach((action) => this.viewDesignerDispatcher.dispatch(action));\n  }\n\n  private getInspector(\n    viewDesignModel: IViewDesignModel,\n    targetExtensionContainerOptions: ISelectOption[] = []\n  ): IViewDesignerInspectorConfig {\n    const isExistingView = Boolean(viewDesignModel.lastUpdateTime);\n\n    const isCustomizationAllowed = isExistingView\n      ? this.rxOverlayService.isCustomizationEnabled('allowOverlay', viewDesignModel)\n      : true;\n\n    const availablePageComponents = this.rxViewComponentRegistryService\n      .getBundlePageComponents(this.rxBundleCacheService.bundleId)\n      .map((pageComponent) => ({\n        id: pageComponent.type,\n        name: pageComponent.name\n      }));\n\n    if (viewDesignModel.pageComponent && !this.rxViewComponentRegistryService.get(viewDesignModel.pageComponent)) {\n      availablePageComponents.unshift({\n        name: RX_VIEW_DEFINITION.unknownPageComponent.name,\n        id: viewDesignModel.pageComponent\n      });\n    }\n\n    const pageComponentControl = {\n      name: 'pageComponent',\n      component: SelectFormControlComponent,\n      options: {\n        label: 'Page component',\n        options: availablePageComponents,\n        beforeValueChange: (oldValue: string[], newValue: string[]) =>\n          this.viewDesignerFacade.viewModel$\n            .pipe(\n              take(1),\n              withLatestFrom(this.viewDesignerFacade.viewComponentModels$),\n              map(\n                ([viewModel, viewComponentModels]) =>\n                  !oldValue?.length &&\n                  newValue.length &&\n                  (viewModel.inputParams.length || viewModel.outputParams.length || !isEmpty(viewComponentModels))\n              )\n            )\n            .toPromise()\n            .then((isConfirmationRequired) =>\n              isConfirmationRequired\n                ? this.rxModalService.confirm({\n                    title: 'Warning',\n                    modalStyle: RX_MODAL.modalStyles.warning,\n                    message: 'The view canvas, input and output parameters will be cleared. Do you want to continue?'\n                  })\n                : true\n            ),\n        emptyOption: true\n      } as ISelectFormControlOptions\n    };\n\n    const extensionContainerControl = {\n      name: 'targetExtensionContainerGuid',\n      component: SelectFormControlComponent,\n      options: {\n        label: 'Extension container',\n        tooltip: new Tooltip(\n          `Select an extension container in the view to extend where record editor fields from this view will be injected.\n            The records defined for the view to extend and for this view must be associated one-to-one.`\n        ),\n        options: targetExtensionContainerOptions || [],\n        required: true,\n        beforeValueChange: (oldValue: string, newValue: string) => {\n          return this.isTargetRecordDefinitionChanged(oldValue, newValue)\n            .pipe(\n              withLatestFrom(this.viewDesignerFacade.viewComponentModels$),\n              map(\n                ([isRecordDefinitionChanged, viewComponentModels]) =>\n                  !isEmpty(viewComponentModels) && isRecordDefinitionChanged\n              ),\n              take(1)\n            )\n            .toPromise()\n            .then((isConfirmationRequired: boolean) =>\n              isConfirmationRequired\n                ? this.rxModalService.confirm({\n                    title: 'Warning',\n                    modalStyle: RX_MODAL.modalStyles.warning,\n                    message: 'The view canvas will be cleared. Do you want to continue?'\n                  })\n                : true\n            );\n        }\n      } as ISelectFormControlOptions\n    };\n\n    const layout: IFormSectionBuilderConfig[] = [\n      {\n        label: 'General',\n        controls: [\n          {\n            name: 'displayName',\n            component: TextFormControlComponent,\n            isDisabled: Boolean(viewDesignModel.lastUpdateTime),\n            options: {\n              required: true,\n              label: 'Name'\n            } as ITextFormControlOptions\n          },\n          {\n            name: 'description',\n            component: TextareaFormControlComponent,\n            isDisabled: !isCustomizationAllowed,\n            options: {\n              label: 'Description',\n              rows: 3\n            } as ITextareaFormControlOptions\n          },\n          {\n            name: 'layoutName',\n            component: TextFormControlComponent,\n            isDisabled: true,\n            options: {\n              label: 'Layout template'\n            } as ITextFormControlOptions\n          },\n          {\n            name: 'targetViewDefinitionName',\n            component: RxDefinitionPickerComponent,\n            isDisabled: !isCustomizationAllowed,\n            options: {\n              label: 'View to extend',\n              tooltip: new Tooltip(\n                `Select a view to extend in order to inject this view into it.\n                The view to extend may be read-only, but must contain at least one Record editor with an Extension container.`\n              ),\n              definitionType: RxDefinitionPickerType.View,\n              beforeValueChange: (oldValue: string[], newValue: string[]): Promise<boolean> =>\n                this.viewDesignerFacade.viewComponentModels$\n                  .pipe(first(), withLatestFrom(this.viewDesignerFacade.viewModel$))\n                  .toPromise()\n                  .then(([components, viewModel]) => {\n                    const isViewParametersPresent: boolean = Boolean(\n                      !oldValue?.length &&\n                        newValue.length &&\n                        (viewModel.inputParams.length || viewModel.outputParams.length)\n                    );\n\n                    let message: string;\n\n                    if (!isEmpty(components) && isViewParametersPresent) {\n                      message =\n                        'The view canvas, input and output parameters will be cleared. Do you want to continue?';\n                    } else if (!isEmpty(components)) {\n                      message = 'The view canvas will be cleared. Do you want to continue?';\n                    } else if (isViewParametersPresent) {\n                      message = 'The input and output parameters will be cleared. Do you want to continue?';\n                    }\n\n                    return message\n                      ? this.rxModalService.confirm({\n                          title: 'Warning',\n                          modalStyle: RX_MODAL.modalStyles.warning,\n                          message: message\n                        })\n                      : true;\n                  })\n            }\n          },\n          {\n            name: 'styles',\n            component: TagsFormControlComponent,\n            isDisabled: !isCustomizationAllowed,\n            options: {\n              label: 'CSS classes',\n              placeholder: 'Add CSS classes',\n              tooltip: new Tooltip('Enter CSS class names to apply to this view.'),\n              errorCheck: validateCssClassName\n            } as ITagsFormControlOptions\n          },\n          {\n            name: 'permissions',\n            component: RxPermissionEditorComponent,\n            isDisabled: !isCustomizationAllowed,\n            options: {\n              label: 'Permissions',\n              type: 'view'\n            } as IPermissionEditorComponentOptions\n          },\n          {\n            component: RxViewRevertCustomizationComponent\n          },\n          {\n            component: RxViewCustomizationOptionsComponent\n          }\n        ]\n      },\n      {\n        label: 'Input parameters',\n        controls: [\n          {\n            name: 'inputParams',\n            component: ListFormControlComponent,\n            isDisabled: !isCustomizationAllowed,\n            options: {\n              addItemText: 'Add',\n              emptyListText: 'No input parameters added.',\n              items: [\n                {\n                  label: 'Name',\n                  propertyName: 'name'\n                }\n              ]\n            } as IListFormControlOptions\n          }\n        ]\n      },\n      {\n        label: 'Output parameters',\n        controls: [\n          {\n            name: 'outputParams',\n            component: ListFormControlComponent,\n            isDisabled: !isCustomizationAllowed,\n            options: {\n              addItemText: 'Add',\n              emptyListText: 'No output parameters added.',\n              items: [\n                {\n                  label: 'Name',\n                  propertyName: 'name'\n                },\n                {\n                  label: 'Source',\n                  propertyName: 'source',\n                  dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                  operators: this.expressionConfigurator.getOperators()\n                }\n              ]\n            } as IListFormControlOptions\n          }\n        ]\n      }\n    ];\n\n    if (availablePageComponents.length) {\n      layout[0].controls.splice(2, 0, pageComponentControl as any);\n    }\n\n    // hide 'View to extend' and 'Extention container' controls if a page component is selected\n    if (viewDesignModel.pageComponent) {\n      layout.splice(1, 2);\n      layout[0].controls.splice(findIndex(layout[0].controls, { name: 'targetViewDefinitionName' }), 1);\n    }\n\n    if (viewDesignModel.targetViewDefinitionName) {\n      const targetViewDefinitionNameControlIndex = findIndex(layout[0].controls, { name: 'targetViewDefinitionName' });\n\n      layout[0].controls.splice(targetViewDefinitionNameControlIndex + 1, 0, extensionContainerControl as any);\n\n      // hide 'Page component' control if 'View to extend' is selected\n      layout[0].controls.splice(findIndex(layout[0].controls, { name: 'pageComponent' }), 1);\n\n      // hide 'Input parameters' and 'Output parameters' control if 'View to extend' is selected\n      layout.splice(1, 2);\n\n      this.viewDesignerFacade.updateViewProperties({\n        inputParams: [],\n        outputParams: []\n      });\n    }\n\n    return {\n      inspectorSectionConfigs: layout\n    } as IViewDesignerInspectorConfig;\n  }\n\n  private validateDisplayName(): Observable<IViewComponentDesignValidationIssue[]> {\n    // View definition names for validation will be loaded only in case if user changes view name.\n    return this.viewDesignerFacade\n      .getViewPropertyValue('displayName')\n      .pipe(\n        switchMap((displayName) =>\n          combineLatest([\n            of(\n              displayName\n                ? RX_RECORD_DEFINITION.validDefinitionNameRegex.test(displayName)\n                  ? null\n                  : {\n                      type: 'error',\n                      propertyName: 'displayName',\n                      description: 'View name can only contain letters, numbers, spaces, dashes, and underscores.'\n                    }\n                : {\n                    type: 'error',\n                    propertyName: 'displayName',\n                    description: 'View name cannot be blank.'\n                  }\n            ),\n            this.viewDesignerFacade.getViewPropertyValue('lastUpdateTime').pipe(\n              switchMap((lastUpdateTime) =>\n                displayName && !lastUpdateTime\n                  ? this.allViewDefinitionNamesByBundleId$.pipe(\n                      map((viewDefinitionNames): IViewComponentDesignValidationIssue => {\n                        const isNameAlreadyExists =\n                          !lastUpdateTime &&\n                          viewDefinitionNames?.some((name) =>\n                            this.rxStringService.caseInsensitiveIsEqual(displayName, name)\n                          );\n\n                        return isNameAlreadyExists\n                          ? {\n                              type: 'error',\n                              propertyName: 'displayName',\n                              description: 'View definition with this name already exists.'\n                            }\n                          : null;\n                      }),\n                      take(1)\n                    )\n                  : of(null)\n              ),\n              take(1)\n            )\n          ])\n        )\n      )\n      .pipe(map(compact));\n  }\n\n  private validateInputParams(): Observable<IViewComponentDesignValidationIssue[]> {\n    return this.viewDesignerFacade.getViewPropertyValue('inputParams').pipe(\n      map((inputParams) => {\n        const notBlankInputParams = flow((params) => _map(params, (param) => param.name), compact)(inputParams);\n        const uniqueInputParams = uniq(notBlankInputParams);\n        const validationIssues = [];\n\n        if (inputParams.length && notBlankInputParams.length !== inputParams.length) {\n          validationIssues.push({\n            type: 'error',\n            propertyName: 'inputParams',\n            description: 'Input parameter name cannot be blank.'\n          });\n        }\n\n        if (notBlankInputParams.length !== uniqueInputParams.length) {\n          validationIssues.push({\n            type: 'error',\n            propertyName: 'inputParams',\n            description: 'Input parameter names must be unique.'\n          });\n        }\n\n        return validationIssues;\n      })\n    );\n  }\n\n  private validateOutputParamExpressions(): Observable<IViewComponentDesignValidationIssue[]> {\n    return this.viewDesignerFacade.getViewPropertyValue('outputParams').pipe(\n      map((outputParams) => _map(outputParams, (param) => param.source).filter(Boolean)),\n      distinctUntilChanged(isEqual),\n      switchMap((sourceValues: string[]) =>\n        sourceValues.length\n          ? combineLatest(\n              sourceValues.map((value) =>\n                this.rxViewExpressionValidatorService.validate(value, 'source', 'Output parameter source')\n              )\n            ).pipe(map(flatten))\n          : of([])\n      )\n    );\n  }\n\n  private validateExtensionContainer(): Observable<IViewComponentDesignValidationIssue> {\n    return combineLatest([\n      this.viewDesignerFacade.getViewPropertyValue('targetViewDefinitionName'),\n      this.viewDesignerFacade.getViewPropertyValue('targetExtensionContainerGuid')\n    ]).pipe(\n      map(([targetViewDefinitionName, targetExtensionContainerGuid]) =>\n        targetViewDefinitionName && !targetExtensionContainerGuid\n          ? {\n              type: 'error',\n              propertyName: 'targetExtensionContainerGuid',\n              description: 'Extension container cannot be blank.'\n            }\n          : null\n      )\n    );\n  }\n\n  private getViewCommonDataDictionary(inputParams: IViewDesignModel['inputParams']): IDataDictionaryBranch {\n    return {\n      label: 'View',\n      expression: '${view.api}',\n      icon: 'd-icon-file_o',\n      expanded: true,\n      children: [\n        ...(isEmpty(inputParams)\n          ? []\n          : [\n              {\n                label: 'Input parameters',\n                expanded: true,\n                children: inputParams\n                  .filter((param) => param.name)\n                  .map((param) => ({\n                    label: param.name,\n                    expression: `$\\{view.inputParams.${param.name}}`,\n                    icon: 'd-icon-arrow_right_square_input'\n                  }))\n              }\n            ]),\n        {\n          label: 'Properties',\n          expanded: true,\n          children: [\n            {\n              label: 'Is valid',\n              expression: '${view.isValid}',\n              icon: 'd-icon-arrow_right_square_input'\n            }\n          ]\n        }\n      ]\n    };\n  }\n\n  private isTargetRecordDefinitionChanged(\n    previousTargetExtensionContainerGuid: string,\n    currentTargetExtensionContainerGuid: string\n  ): Observable<boolean> {\n    return this.targetViewDefinition$.pipe(\n      map((viewDefinition) => {\n        const previousTargetRecordDefinitionName = this.getTargetRecordDefinitionName(\n          viewDefinition,\n          previousTargetExtensionContainerGuid\n        );\n\n        const currentTargetRecordDefinitionName = this.getTargetRecordDefinitionName(\n          viewDefinition,\n          currentTargetExtensionContainerGuid\n        );\n\n        return previousTargetRecordDefinitionName !== currentTargetRecordDefinitionName;\n      })\n    );\n  }\n\n  private getTargetRecordDefinitionName(viewDefinition: IViewDefinition, targetExtensionContainerGuid: string): string {\n    const targetRecordEditor = this.rxViewDefinitionParserService.findParentComponentDefinition(\n      viewDefinition,\n      { guid: targetExtensionContainerGuid },\n      (definition) => definition.type === RxViewComponentType.RecordEditor\n    );\n\n    return targetRecordEditor?.propertiesByName.recordDefinitionName;\n  }\n}\n"]}