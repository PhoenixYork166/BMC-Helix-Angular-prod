{"version":3,"file":"bundle-cache.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/caching/bundle-cache.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,YAAY,EAAE,MAAM,wBAAwB,CAAC;AACtD,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAC9D,OAAO,EAAE,SAAS,EAAE,MAAM,2BAA2B,CAAC;AACtD,OAAO,EAAE,GAAG,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC7D,OAAO,EAAc,aAAa,EAAE,MAAM,MAAM,CAAC;AAGjD,OAAO,EAAE,2BAA2B,EAAE,MAAM,8CAA8C,CAAC;AAG3F,OAAO,EAAE,mBAAmB,EAAE,MAAM,kCAAkC,CAAC;;;;;;AAKvE,MAAM,OAAO,oBAAoB;IAY/B,YACU,2BAAwD,EACxD,YAA0B,EAC1B,oBAA0C,EAC1C,mBAAwC;QAHxC,gCAA2B,GAA3B,2BAA2B,CAA6B;QACxD,iBAAY,GAAZ,YAAY,CAAc;QAC1B,yBAAoB,GAApB,oBAAoB,CAAsB;QAC1C,wBAAmB,GAAnB,mBAAmB,CAAqB;QAf1C,iBAAY,GAA8B,IAAI,CAAC,2BAA2B;aAC/E,GAAG,CAAC,EAAE,MAAM,EAAE,EAAE,gBAAgB,EAAE,IAAI,EAAE,EAAE,CAAC;aAC3C,IAAI,CACH,GAAG,CAAC,CAAC,WAA4B,EAAE,EAAE,CAAC,WAAW,CAAC,IAAqB,CAAC,EACxE,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;QAGI,qBAAgB,GAAG,IAAI,aAAa,CAAS,CAAC,CAAC,CAAC;QACjD,cAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAC;IAOrD,CAAC;IAEJ,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,aAAa,CAAC;IAC5B,CAAC;IAED,IAAI,QAAQ,CAAC,KAAa;QACxB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAE3B,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAElC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,0CAA0C,KAAK,EAAE,CAAC,CAAC;IAC7E,CAAC;IAED,cAAc;QACZ,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,0BAA0B;QACxB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC/G,CAAC;IAED,sBAAsB,CAAC,mBAA2B;QAChD,OAAO,IAAI,CAAC,0BAA0B,EAAE,CAAC,IAAI,CAC3C,GAAG,CAAC,CAAC,gBAAgB,EAAE,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,mBAAmB,EAAE,gBAAgB,CAAC,CAAC,CACxG,CAAC;IACJ,CAAC;IAED,kCAAkC;QAChC,OAAO,IAAI,CAAC,0BAA0B,EAAE,CAAC,IAAI,CAC3C,GAAG,CAAC,CAAC,gBAAgB,EAAE,EAAE,CACvB,gBAAgB,CAAC,aAAa;YAC5B,CAAC,CAAC,SAAS,CAAC,0CAA0C;YACtD,CAAC,CAAC,SAAS,CAAC,sCAAsC,CACrD,CACF,CAAC;IACJ,CAAC;;iHArDU,oBAAoB;qHAApB,oBAAoB,cAFnB,MAAM;2FAEP,oBAAoB;kBAHhC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { RxLogService } from '../logging/log.service';\nimport { RxGlobalCacheService } from './global-cache.service';\nimport { RX_BUNDLE } from '../bundle/bundle.constant';\nimport { map, shareReplay, switchMap } from 'rxjs/operators';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { IBundleDescriptor } from '../bundle';\nimport { IScopeSelectionOption } from '../common-types';\nimport { RxActionTypeDataPageService } from '../action-type/action-type-data-page.service';\nimport { IActionType } from '../action-type/action-type.interfaces';\nimport { IDataPageResult } from '../data-page';\nimport { RxDefinitionService } from '../definition/definition.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxBundleCacheService {\n  private actionTypes$: Observable<IActionType[]> = this.rxActionTypeDataPageService\n    .get({ params: { requireDependent: true } })\n    .pipe(\n      map((actionTypes: IDataPageResult) => actionTypes.data as IActionType[]),\n      shareReplay(1)\n    );\n\n  private bundleIdValue: string;\n  private bundleIdSubject$ = new ReplaySubject<string>(1);\n  public bundleId$ = this.bundleIdSubject$.asObservable();\n\n  constructor(\n    private rxActionTypeDataPageService: RxActionTypeDataPageService,\n    private rxLogService: RxLogService,\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private rxDefinitionService: RxDefinitionService\n  ) {}\n\n  get bundleId(): string {\n    return this.bundleIdValue;\n  }\n\n  set bundleId(value: string) {\n    this.bundleIdValue = value;\n\n    this.bundleIdSubject$.next(value);\n\n    this.rxLogService.debug(`RxBundleCacheService: bundle ID set to ${value}`);\n  }\n\n  getActionTypes(): Observable<IActionType[]> {\n    return this.actionTypes$;\n  }\n\n  getCurrentBundleDescriptor(): Observable<IBundleDescriptor> {\n    return this.bundleId$.pipe(switchMap((bundleId) => this.rxGlobalCacheService.getBundleDescriptor(bundleId)));\n  }\n\n  getDefinitionScopeName(definitionScopeType: string): Observable<string> {\n    return this.getCurrentBundleDescriptor().pipe(\n      map((bundleDescriptor) => this.rxDefinitionService.getScopeName(definitionScopeType, bundleDescriptor))\n    );\n  }\n\n  getDefinitionScopeSelectionOptions(): Observable<IScopeSelectionOption[]> {\n    return this.getCurrentBundleDescriptor().pipe(\n      map((bundleDescriptor) =>\n        bundleDescriptor.isApplication\n          ? RX_BUNDLE.applicationDefinitionScopeSelectionOptions\n          : RX_BUNDLE.libraryDefinitionScopeSelectionOptions\n      )\n    );\n  }\n}\n"]}