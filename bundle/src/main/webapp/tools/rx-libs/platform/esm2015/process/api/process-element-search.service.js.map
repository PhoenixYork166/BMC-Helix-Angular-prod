{"version":3,"file":"process-element-search.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/process/api/process-element-search.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;;AAKnE,MAAM,OAAO,6BAA6B;IACxC,IAAI,CAAC,UAAU,EAAE,SAAS;QACxB,IAAI,cAAc,GAAG,IAAI,CAAC,uBAAuB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAEzE,IAAI,CAAC,cAAc,EAAE;YACnB,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE,SAAS,CAAC,CAAC;SACpE;QAED,OAAO,cAAc,CAAC;IACxB,CAAC;IAED,uBAAuB,CAAC,UAAU,EAAE,SAAS;QAC3C,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,SAAS,CAAC,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;IAC3F,CAAC;IAED,SAAS,CAAC,UAAU,EAAE,IAAI;QACxB,MAAM,cAAc,GAAG,IAAI,CAAC,uBAAuB,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;QAChF,IAAI,MAAM,CAAC;QAEX,IAAI,cAAc,EAAE;YAClB,MAAM,GAAG,UAAU,CAAC;SACrB;aAAM;YACL,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,EAAE;gBAC1D,OAAO,IAAI,CAAC,uBAAuB,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;YAC/D,CAAC,CAAC,CAAC;SACJ;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;IAED,UAAU,CAAC,UAAU,EAAE,IAAI;QACzB,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAC/C,CAAC;IAED,MAAM,CAAC,UAAU,EAAE,SAAS;QAC1B,OAAO,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE,SAAS,CAAC,CAAC;IAC7D,CAAC;IAED,OAAO,CAAC,UAAU,EAAE,QAAQ;QAC1B,OAAO,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,EAAE,QAAQ,CAAC,CAAC;IAC7D,CAAC;IAED,eAAe,CAAC,UAAU;QACxB,OAAO,OAAO,CACZ,SAAS,CACP,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,YAAY,IAAI,EAAE,EAAE,UAAU,CAAC,SAAS,IAAI,EAAE,CAAC,EACpE,CAAC,MAAgB,EAAE,OAAY,EAAE,EAAE;YACjC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAErB,IAAI,OAAO,CAAC,YAAY,EAAE;gBACxB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC;aAC5C;QACH,CAAC,EACD,EAAE,CACH,CACF,CAAC;IACJ,CAAC;;0HAxDU,6BAA6B;8HAA7B,6BAA6B,cAF5B,MAAM;2FAEP,6BAA6B;kBAHzC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { find, forEach, filter, transform, flatten } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxProcessElementSearchService {\n  find(definition, predicate): any {\n    let processElement = this.findElementInDefinition(definition, predicate);\n\n    if (!processElement) {\n      processElement = find(this.flattenElements(definition), predicate);\n    }\n\n    return processElement;\n  }\n\n  findElementInDefinition(definition, predicate) {\n    return find(definition.flowElements, predicate) || find(definition.artifacts, predicate);\n  }\n\n  findOwner(definition, guid) {\n    const processElement = this.findElementInDefinition(definition, { guid: guid });\n    let result;\n\n    if (processElement) {\n      result = definition;\n    } else {\n      result = find(this.flattenElements(definition), (element) => {\n        return this.findElementInDefinition(element, { guid: guid });\n      });\n    }\n\n    return result;\n  }\n\n  findByGuid(definition, guid) {\n    return this.find(definition, { guid: guid });\n  }\n\n  filter(definition, predicate) {\n    return filter(this.flattenElements(definition), predicate);\n  }\n\n  forEach(definition, iteratee) {\n    return forEach(this.flattenElements(definition), iteratee);\n  }\n\n  flattenElements(definition): object[] {\n    return flatten(\n      transform(\n        [].concat(definition.flowElements || [], definition.artifacts || []),\n        (result: object[], element: any) => {\n          result.push(element);\n\n          if (element.flowElements) {\n            result.push(this.flattenElements(element));\n          }\n        },\n        []\n      )\n    );\n  }\n}\n"]}