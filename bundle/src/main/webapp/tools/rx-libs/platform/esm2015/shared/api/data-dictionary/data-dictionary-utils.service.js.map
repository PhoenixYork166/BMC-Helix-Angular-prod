{"version":3,"file":"data-dictionary-utils.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/data-dictionary/data-dictionary-utils.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;AAGpC,OAAO,EAIL,YAAY,EACb,MAAM,yBAAyB,CAAC;;AAKjC,MAAM,OAAO,qBAAqB;IAChC,WAAW,CACT,cAA+B,EAC/B,eAAwB;QAExB,OAAO,GAAG,CAAC,cAAc,EAAE,CAAC,IAAI,EAAE,EAAE;YAClC,MAAM,OAAO,GAAG,eAAe,CAAC,CAAC,CAAC,GAAG,eAAe,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;YAEpF,uCACK,IAAI,KACP,OAAO,EACP,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,IACzE;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,wCAAwC;IACxC,gCAAgC,CAAC,mBAAwD;QACvF,OAAO,KAAK,CAAC,mBAAmB,CAAC;aAC9B,OAAO,CAAC,UAAU,CAAC;aACnB,GAAG,CAAC,CAAC,mBAAwD,EAAE,QAAgB,EAAE,EAAE,CAAC,CAAC;YACpF,KAAK,EAAE,QAAQ;YACf,QAAQ,EAAE,GAAG,CAAC,mBAAmB,EAAE,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;gBAC1D,KAAK,EAAE,kBAAkB,CAAC,IAAI,GAAG,IAAI;gBACrC,IAAI,EAAE,8BAA8B;gBACpC,UAAU,EAAE,kBAAkB,CAAC,IAAI,GAAG,IAAI;gBAC1C,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY,CAAC,QAAQ;oBAC3B,IAAI,EAAE,kBAAkB;iBACzB;aACF,CAAC,CAAC;SACJ,CAAC,CAAC;aACF,KAAK,EAAE,CAAC;IACb,CAAC;IAED,+BAA+B,CAAC,mBAA0C;QACxE,OAAO,KAAK,CAAC,mBAAmB,CAAC;aAC9B,OAAO,CAAC,MAAM,CAAC;aACf,GAAG,CAAC,CAAC,mBAA0C,EAAE,YAAoB,EAAE,EAAE,CAAC,CAAC;YAC1E,KAAK,EAAE,YAAY;YACnB,QAAQ,EAAE,GAAG,CAAC,mBAAmB,EAAE,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;gBAC1D,KAAK,EAAE,kBAAkB,CAAC,IAAI,GAAG,IAAI;gBACrC,IAAI,EAAE,8BAA8B;gBACpC,UAAU,EAAE,kBAAkB,CAAC,IAAI,GAAG,IAAI;gBAC1C,IAAI,EAAE;oBACJ,IAAI,EAAE,YAAY,CAAC,QAAQ;oBAC3B,IAAI,EAAE,kBAAkB;iBACzB;aACF,CAAC,CAAC;SACJ,CAAC,CAAC;aACF,KAAK,EAAE,CAAC;IACb,CAAC;;kHAnDU,qBAAqB;sHAArB,qBAAqB,cAFpB,MAAM;2FAEP,qBAAqB;kBAHjC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { chain, map } from 'lodash';\n\nimport { IFunctionDescriptor } from '../function/function-descriptor.interfaces';\nimport {\n  IDataDictionary,\n  IDataDictionaryBranch,\n  IFunctionDataDictionaryDescriptor,\n  NodeInfoType\n} from './data-dictionary.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxDataDictionaryUtils {\n  addTooltips(\n    dataDictionary: IDataDictionary,\n    parentNodeLabel?: string\n  ): Array<IDataDictionaryBranch & { tooltip: string }> {\n    return map(dataDictionary, (node) => {\n      const tooltip = parentNodeLabel ? `${parentNodeLabel} > ${node.label}` : node.label;\n\n      return {\n        ...node,\n        tooltip,\n        children: node.children ? this.addTooltips(node.children, tooltip) : null\n      };\n    });\n  }\n\n  // TODO-VS: refactor to use below method\n  getFunctionsDataDictionaryBranch(functionDescriptors: IFunctionDataDictionaryDescriptor[]): IDataDictionaryBranch[] {\n    return chain(functionDescriptors)\n      .groupBy('category')\n      .map((functionDescriptors: IFunctionDataDictionaryDescriptor[], category: string) => ({\n        label: category,\n        children: map(functionDescriptors, (functionDescriptor) => ({\n          label: functionDescriptor.name + '()',\n          icon: 'd-icon-mathematical_function',\n          expression: functionDescriptor.name + '()',\n          info: {\n            type: NodeInfoType.function,\n            data: functionDescriptor\n          }\n        }))\n      }))\n      .value();\n  }\n\n  getFunctionDataDictionaryBranch(functionDescriptors: IFunctionDescriptor[]): IDataDictionaryBranch[] {\n    return chain(functionDescriptors)\n      .groupBy('type')\n      .map((functionDescriptors: IFunctionDescriptor[], functionType: string) => ({\n        label: functionType,\n        children: map(functionDescriptors, (functionDescriptor) => ({\n          label: functionDescriptor.name + '()',\n          icon: 'd-icon-mathematical_function',\n          expression: functionDescriptor.name + '()',\n          info: {\n            type: NodeInfoType.function,\n            data: functionDescriptor\n          }\n        }))\n      }))\n      .value();\n  }\n}\n"]}