{"version":3,"file":"association-designer.effects.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/association/designer/association-designer/+state/association-designer.effects.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpResponse } from '@angular/common/http';\nimport { ErrorHandler, Injectable } from '@angular/core';\nimport {\n  IAssociationDefinition,\n  RX_ASSOCIATION_DEFINITION,\n  RxAssociationDefinitionService\n} from '@helix/platform/association/api';\nimport {\n  IFieldDefinition,\n  RecordFieldOption,\n  RX_RECORD_DEFINITION,\n  RxRecordDefinitionService\n} from '@helix/platform/record/api';\nimport {\n  RxComponentCanDeactivateGuard,\n  RxDefinitionUpdateService,\n  RxNotificationService\n} from '@helix/platform/shared/api';\nimport { RxModalService } from '@helix/platform/ui-kit';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport { cloneDeep, last, reject, some } from 'lodash';\nimport { forkJoin, of } from 'rxjs';\nimport { catchError, filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { AssociationDesignerService } from '../../association-designer.service';\nimport { IAssociationDefinitionModel } from '../../association-designer.types';\nimport * as AssociationDesignerActions from './association-designer.actions';\nimport {\n  definitionModelSelector,\n  definitionNameSelector,\n  isForeignKeyCreatedSelector,\n  isForeignKeyMissingSelector,\n  originalDefinitionSelector\n} from './association-designer.selectors';\n\n@Injectable()\nexport class AssociationDesignerEffects {\n  constructor(\n    private store$: Store<any>,\n    private actions$: Actions,\n    private errorHandler: ErrorHandler,\n    private rxDefinitionUpdateService: RxDefinitionUpdateService,\n    private associationDesignerService: AssociationDesignerService,\n    private rxRecordDefinitionService: RxRecordDefinitionService,\n    private rxComponentCanDeactivateGuard: RxComponentCanDeactivateGuard,\n    private rxAssociationDefinitionService: RxAssociationDefinitionService,\n    private rxModalService: RxModalService,\n    private rxNotificationService: RxNotificationService,\n    private translateService: TranslateService\n  ) {}\n\n  initAssociationDesigner$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AssociationDesignerActions.init),\n      map(() => AssociationDesignerActions.loadDefinition())\n    )\n  );\n\n  loadDefinition$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AssociationDesignerActions.loadDefinition),\n      withLatestFrom(this.store$.select(definitionNameSelector)),\n      switchMap(([_, definitionName]) =>\n        definitionName\n          ? this.rxAssociationDefinitionService.get(definitionName)\n          : this.rxAssociationDefinitionService.getNew()\n      ),\n      map((definition: IAssociationDefinition) => AssociationDesignerActions.loadDefinitionSuccess({ definition }))\n    )\n  );\n\n  loadDefinitionSuccess$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AssociationDesignerActions.loadDefinitionSuccess),\n      map((action) =>\n        AssociationDesignerActions.initDefinitionData({\n          definition: action.definition,\n          definitionModel: this.associationDesignerService.getDefinitionModelFromDefinition(action.definition)\n        })\n      )\n    )\n  );\n\n  saveDefinition$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AssociationDesignerActions.saveDefinition),\n      withLatestFrom(this.store$.select(definitionModelSelector)),\n      map(([action, definitionModel]) =>\n        definitionModel.cardinality[0].value === RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value\n          ? AssociationDesignerActions.createOrUpdateDefinition()\n          : AssociationDesignerActions.getRecordDefinition({ checkForMissingFieldAction: true })\n      )\n    )\n  );\n\n  getRecordDefinition$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AssociationDesignerActions.getRecordDefinition),\n      withLatestFrom(this.store$.select(definitionModelSelector)),\n      switchMap(([action, definitionModel]: [any, IAssociationDefinitionModel]) =>\n        this.associationDesignerService.getRecordDefinition(definitionModel.nodeBId, true).pipe(\n          map((definition) => {\n            if (action.checkForMissingFieldAction) {\n              return AssociationDesignerActions.checkForMissingForeignKeyField({ definition });\n            } else if (action.createForeignKeyFieldAction) {\n              return AssociationDesignerActions.createForeignKeyField({ definition });\n            }\n          }),\n          catchError((error) => {\n            this.errorHandler.handleError(error);\n\n            return of(AssociationDesignerActions.getRecordDefinitionError());\n          })\n        )\n      )\n    )\n  );\n\n  checkForMissingForeignKeyField$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AssociationDesignerActions.checkForMissingForeignKeyField),\n      withLatestFrom(this.store$.select(definitionModelSelector)),\n      switchMap(([action, definitionModel]: [any, IAssociationDefinitionModel]) => {\n        if (!definitionModel.lastUpdateTime) {\n          return this.associationDesignerService.getForeignKeyFieldId(definitionModel, true).pipe(\n            map((foreignKeyFieldId: number) =>\n              // Update nodeBKeys again in case we get new foreign key field ID in force reload definition\n              AssociationDesignerActions.foreignKeyFieldMissingCheckSuccess({\n                payload: {\n                  updatedForeignKeyFieldId: foreignKeyFieldId,\n                  isForeignKeyFieldMissing: !foreignKeyFieldId\n                }\n              })\n            ),\n            catchError((error) => {\n              this.errorHandler.handleError(error);\n\n              return of(AssociationDesignerActions.getForeignKeyFieldIdError());\n            })\n          );\n        } else if (definitionModel.lastUpdateTime) {\n          const missingForeignKeyFields = reject(definitionModel.nodeBKeys, (fieldId) =>\n            some(action.definition.fieldDefinitions, { id: fieldId })\n          );\n\n          return [\n            AssociationDesignerActions.foreignKeyFieldMissingCheckSuccess({\n              payload: {\n                updatedForeignKeyFieldId: null,\n                isForeignKeyFieldMissing: missingForeignKeyFields.length > 0\n              }\n            })\n          ];\n        } else {\n          return [\n            AssociationDesignerActions.foreignKeyFieldMissingCheckSuccess({\n              payload: {\n                updatedForeignKeyFieldId: null,\n                isForeignKeyFieldMissing: false\n              }\n            })\n          ];\n        }\n      })\n    )\n  );\n\n  foreignKeyFieldMissingCheckSuccess$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AssociationDesignerActions.foreignKeyFieldMissingCheckSuccess),\n      withLatestFrom(this.store$.select(isForeignKeyMissingSelector)),\n      map(([action, isForeignKeyMissing]) =>\n        isForeignKeyMissing\n          ? AssociationDesignerActions.getRecordDefinition({ createForeignKeyFieldAction: true })\n          : AssociationDesignerActions.createOrUpdateDefinition()\n      )\n    )\n  );\n\n  createForeignKeyField$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AssociationDesignerActions.createForeignKeyField),\n      withLatestFrom(this.store$.select(definitionModelSelector)),\n      switchMap(([action, definitionModel]) => {\n        const definition = cloneDeep(action.definition);\n\n        definition.fieldDefinitions.push({\n          resourceType: RX_RECORD_DEFINITION.dataTypes.character.resourceType,\n          name: this.associationDesignerService.getForeignKeyFieldName(definitionModel),\n          description: null,\n          fieldOption: RecordFieldOption.Optional,\n          maxLength: 254,\n          defaultValue: null\n        } as IFieldDefinition);\n\n        return this.rxRecordDefinitionService.update(definition).pipe(\n          map(() => AssociationDesignerActions.createForeignKeyFieldSuccess()),\n          catchError((error) => {\n            this.errorHandler.handleError(error);\n\n            return of(AssociationDesignerActions.createForeignKeyFieldError());\n          })\n        );\n      })\n    )\n  );\n\n  createForeignKeyFieldSuccess$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AssociationDesignerActions.createForeignKeyFieldSuccess),\n      map(() => AssociationDesignerActions.getCreatedForeignKeyFieldId())\n    )\n  );\n\n  getCreatedForeignKeyFieldId$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AssociationDesignerActions.getCreatedForeignKeyFieldId),\n      withLatestFrom(this.store$.select(definitionModelSelector)),\n      switchMap(([action, definitionModel]) =>\n        this.associationDesignerService.getForeignKeyFieldId(definitionModel, true).pipe(\n          map((fieldId: number) => AssociationDesignerActions.getCreatedForeignKeyFieldIdSuccess({ fieldId })),\n          catchError((error) => {\n            this.errorHandler.handleError(error);\n\n            return of(AssociationDesignerActions.getCreatedForeignKeyFieldIdError());\n          })\n        )\n      )\n    )\n  );\n\n  getCreatedForeignKeyFieldIdSuccess$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AssociationDesignerActions.getCreatedForeignKeyFieldIdSuccess),\n      map(() => AssociationDesignerActions.createOrUpdateDefinition())\n    )\n  );\n\n  createOrUpdateDefinition$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AssociationDesignerActions.createOrUpdateDefinition),\n      withLatestFrom(this.store$.select(definitionModelSelector), this.store$.select(originalDefinitionSelector)),\n      switchMap(([action, definitionModel, originalDefinition]) => {\n        const definition = this.associationDesignerService.getDefinitionFromDefinitionModel(definitionModel);\n\n        return definitionModel.lastUpdateTime\n          ? this.rxDefinitionUpdateService\n              .execute(\n                this.rxAssociationDefinitionService.update.bind(this.rxAssociationDefinitionService, {\n                  ...originalDefinition,\n                  ...definition\n                })\n              )\n              .pipe(\n                map(() =>\n                  AssociationDesignerActions.saveDefinitionSuccess({\n                    savedDefinitionName: definitionModel.name\n                  })\n                ),\n                catchError((error) => {\n                  this.errorHandler.handleError(error);\n\n                  return of(AssociationDesignerActions.updateDefinitionError());\n                })\n              )\n          : this.rxAssociationDefinitionService.create(definition).pipe(\n              map((response: HttpResponse<any>) => {\n                const savedDefinitionName =\n                  decodeURIComponent(last(response?.headers?.get('location').split('/')) || '') || definitionModel.name;\n\n                return AssociationDesignerActions.saveDefinitionSuccess({\n                  savedDefinitionName\n                });\n              }),\n              catchError((error) => {\n                this.errorHandler.handleError(error);\n\n                // If POST of AssociationDefinition fails and the foreign key field has been added,\n                // that field will be removed via createDefinitionError action.\n                return of(AssociationDesignerActions.createDefinitionError());\n              })\n            );\n      })\n    )\n  );\n\n  createDefinitionError$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AssociationDesignerActions.createDefinitionError),\n      map(() => AssociationDesignerActions.getCreatedForeignKeyField())\n    )\n  );\n\n  getCreatedForeignKeyField$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AssociationDesignerActions.getCreatedForeignKeyField),\n      withLatestFrom(this.store$.select(isForeignKeyCreatedSelector)),\n      filter(([action, isForeignKeyCreated]) => isForeignKeyCreated),\n      withLatestFrom(this.store$.select(definitionModelSelector)),\n      switchMap(([action, definitionModel]) =>\n        forkJoin([\n          this.associationDesignerService.getForeignKeyFieldId(definitionModel, true),\n          this.associationDesignerService.getRecordDefinition(definitionModel.nodeBId, true)\n        ]).pipe(\n          map(([foreignKeyFieldId, definition]) => {\n            definition.fieldDefinitions = reject(definition.fieldDefinitions, {\n              id: foreignKeyFieldId\n            });\n\n            return AssociationDesignerActions.removeCreatedForeignKeyField({ foreignKeyFieldId, definition });\n          }),\n          catchError((error) => {\n            this.errorHandler.handleError(error);\n\n            return of(AssociationDesignerActions.getCreatedForeignKeyFieldError());\n          })\n        )\n      )\n    )\n  );\n\n  removeCreatedForeignKeyField$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AssociationDesignerActions.removeCreatedForeignKeyField),\n      withLatestFrom(this.store$.select(isForeignKeyCreatedSelector)),\n      filter(([action, isForeignKeyCreated]) => isForeignKeyCreated),\n      switchMap(([action]) => {\n        const definition = {\n          ...action.definition,\n          fieldDefinitions: reject(action.definition.fieldDefinitions, {\n            id: action.foreignKeyFieldId\n          })\n        };\n\n        return this.rxRecordDefinitionService.update(definition).pipe(\n          map(() => AssociationDesignerActions.removeCreatedForeignKeyFieldSuccess()),\n          catchError((error) => {\n            this.errorHandler.handleError(error);\n\n            return of(AssociationDesignerActions.removeCreatedForeignKeyFieldError());\n          })\n        );\n      })\n    )\n  );\n\n  saveDefinitionSuccess$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(AssociationDesignerActions.saveDefinitionSuccess),\n      withLatestFrom(this.store$.select(definitionNameSelector)),\n      tap(() => {\n        this.rxNotificationService.addSuccessMessage(\n          this.translateService.instant('com.bmc.arsys.rx.client.designer.definition-saved-successfully.message', {\n            definitionTypeDisplayName: this.translateService.instant(\n              'com.bmc.arsys.rx.client.common.association-definition.label'\n            )\n          })\n        );\n      }),\n      filter(([_, definitionName]) => !!definitionName),\n      map(() => AssociationDesignerActions.loadDefinition())\n    )\n  );\n\n  revertCustomization$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(AssociationDesignerActions.revertCustomization),\n        withLatestFrom(this.store$.select(definitionModelSelector)),\n        switchMap(([_, definitionModel]) =>\n          this.rxAssociationDefinitionService.revertCustomization(definitionModel.name)\n        ),\n        tap(() => {\n          this.rxComponentCanDeactivateGuard.disable();\n          window.location.reload();\n        })\n      ),\n    { dispatch: false }\n  );\n\n  markPristine$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(\n        AssociationDesignerActions.initDefinitionData,\n        AssociationDesignerActions.saveDefinition,\n        AssociationDesignerActions.saveDefinitionSuccess\n      ),\n      map(() => AssociationDesignerActions.markDesignerPristine())\n    )\n  );\n\n  markDirty$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(\n        AssociationDesignerActions.updateDefinitionModelFromDesigner,\n        AssociationDesignerActions.getRecordDefinitionError,\n        AssociationDesignerActions.getForeignKeyFieldIdError,\n        AssociationDesignerActions.createForeignKeyFieldError,\n        AssociationDesignerActions.getCreatedForeignKeyFieldError,\n        AssociationDesignerActions.createDefinitionError,\n        AssociationDesignerActions.updateDefinitionError,\n        AssociationDesignerActions.removeCreatedForeignKeyFieldError\n      ),\n      map(() => AssociationDesignerActions.markDesignerDirty())\n    )\n  );\n}\n"]}