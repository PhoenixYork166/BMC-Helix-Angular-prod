{"version":3,"file":"designer-stencil-builder.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/designer/designer-stencil-builder.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AACzF,OAAO,EAAE,QAAQ,EAAc,MAAM,MAAM,CAAC;AAC5C,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;;AAMrC,MAAM,OAAO,wBAAwB;IACnC,iBAAiB,CACf,eAAwD,EACxD,aAA4C;QAE5C,OAAO,QAAQ,CAAC,eAAe,CAAC,CAAC,IAAI,CACnC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;YACf,OAAO,IAAI,CACT,OAAO,EACP,CAAC,aAAa,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,EAAE,OAAO,CAAC,EAC/C,IAAI,EACJ,OAAO,EACP,CAAC,UAAoB,EAAE,EAAE,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,SAAiB,EAAE,EAAE,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,EAC5F,CAAC,UAAoB,EAAE,EAAE,CACvB,MAAM,CACJ,UAAU,EACV,CAAC,SAAiB,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC,QAAQ,CACpG,EACH,CAAC,UAAoB,EAAE,EAAE,CACvB,IAAI,CAAC,UAAU,EAAE,CAAC,SAAiB,EAAE,EAAE;gBACrC,OAAO;oBACL,KAAK,EAAE,SAAS;oBAChB,QAAQ,EAAE,IAAI,CACZ,OAAO,EACP,CAAC,aAAwC,EAAE,EAAE,CAAC,MAAM,CAAC,aAAa,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,EACzF,CAAC,aAAwC,EAAE,EAAE,CAC3C,MAAM,CAAC,aAAa,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC,CAClE,CAAC,QAAQ,CAAC;iBACZ,CAAC;YACJ,CAAC,CAAC,CACL,CAAC,QAAQ,CAAC,CAAC;QACd,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;;qHAjCU,wBAAwB;yHAAxB,wBAAwB,cAFvB,MAAM;2FAEP,wBAAwB;kBAHpC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { compact, flow, filter, find, flatten, map as _map, sortBy, uniq } from 'lodash';\nimport { forkJoin, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { IDesignerStencilElement, IDesignerStencilElementGroups, IDesignerStencilElementTree } from './designer.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxDesignerStencilBuilder {\n  buildElementsTree(\n    elementsSources: Observable<IDesignerStencilElement[]>[],\n    elementGroups: IDesignerStencilElementGroups\n  ): Observable<IDesignerStencilElementTree[]> {\n    return forkJoin(elementsSources).pipe(\n      map((elements) => {\n        return flow(\n          flatten,\n          (chainElements) => _map(chainElements, 'group'),\n          uniq,\n          compact,\n          (groupNames: string[]) => sortBy(groupNames, (groupName: string) => groupName.toLowerCase()),\n          (groupNames: string[]) =>\n            sortBy(\n              groupNames,\n              (groupName: string) => (find(elementGroups, { name: groupName }) || elementGroups.default).priority\n            ),\n          (groupNames: string[]) =>\n            _map(groupNames, (groupName: string) => {\n              return {\n                label: groupName,\n                children: flow(\n                  flatten,\n                  (chainElements: IDesignerStencilElement[]) => filter(chainElements, { group: groupName }),\n                  (chainElements: IDesignerStencilElement[]) =>\n                    sortBy(chainElements, (element) => element.label.toLowerCase())\n                )(elements)\n              };\n            })\n        )(elements);\n      })\n    );\n  }\n}\n"]}