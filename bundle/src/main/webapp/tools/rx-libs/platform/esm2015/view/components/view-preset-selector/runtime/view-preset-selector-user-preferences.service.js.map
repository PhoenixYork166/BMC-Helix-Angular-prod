{"version":3,"file":"view-preset-selector-user-preferences.service.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/view-preset-selector/runtime/view-preset-selector-user-preferences.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { find, pick } from 'lodash';\nimport { IUserPreferencesData, RxUserPreferencesService } from '@helix/platform/shared/api';\nimport { RxViewComponentType } from '@helix/platform/view/api';\nimport {\n  IViewPresetSelectorState,\n  IViewPresetSelectorUserPreferences,\n  IViewPresetSelectorUserPreferencesApplyResult\n} from './view-preset-selector.types';\nimport { RxShareViewPresetService } from './share-view-preset/share-view-preset.service';\n\n@Injectable()\nexport class RxViewPresetSelectorUserPreferencesService {\n  private viewPresetSelectorGuid: string;\n\n  constructor(\n    private rxUserPreferencesService: RxUserPreferencesService,\n    private rxShareViewPresetService: RxShareViewPresetService\n  ) {}\n\n  save(viewPresetSelectorState: IViewPresetSelectorState): Observable<any> {\n    const customViewPresets = viewPresetSelectorState.customViewPresetOptions.map((customViewPresetOption) =>\n      pick(customViewPresetOption, ['guid', 'label', 'userSharedViewPresetGuid'])\n    );\n\n    const sharedViewPresets = viewPresetSelectorState.sharedViewPresetOptions.map((sharedViewPresetOption) =>\n      pick(sharedViewPresetOption, ['guid', 'label'])\n    );\n\n    const data: IUserPreferencesData = {\n      preferences: JSON.stringify({\n        customViewPresets,\n        sharedViewPresets,\n        viewPresetGuid: viewPresetSelectorState.appliedViewPresetOption.guid\n      }),\n      componentTypeName: RxViewComponentType.ViewPresetSelector,\n      version: '1.0',\n      componentId: this.viewPresetSelectorGuid\n    };\n\n    return this.rxUserPreferencesService.setUiComponentPreferences(data, this.viewPresetSelectorGuid);\n  }\n\n  applyUserPreferences(\n    viewPresetSelectorGuid: string,\n    viewPresetSelectorState: IViewPresetSelectorState\n  ): Observable<IViewPresetSelectorUserPreferencesApplyResult> {\n    this.viewPresetSelectorGuid = viewPresetSelectorGuid;\n\n    return this.get(viewPresetSelectorGuid).pipe(\n      map((preferences) => {\n        viewPresetSelectorState.customViewPresetOptions = preferences.customViewPresets;\n\n        if (preferences.sharedViewPresets) {\n          viewPresetSelectorState.sharedViewPresetOptions = preferences.sharedViewPresets.map((preset) => ({\n            ...preset,\n            isShared: true\n          }));\n        }\n\n        viewPresetSelectorState.appliedViewPresetOption =\n          find(viewPresetSelectorState.customViewPresetOptions, { guid: preferences.viewPresetGuid }) ||\n          find(viewPresetSelectorState.systemViewPresetOptions, { guid: preferences.viewPresetGuid }) ||\n          find(viewPresetSelectorState.sharedViewPresetOptions, { guid: preferences.viewPresetGuid }) ||\n          viewPresetSelectorState.systemViewPresetOptions[0];\n\n        return viewPresetSelectorState;\n      }),\n      switchMap((state) => this.checkSharedViewPresets(state))\n    );\n  }\n\n  private get(guid: string): Observable<IViewPresetSelectorUserPreferences> {\n    return this.rxUserPreferencesService.getUiComponentPreferences<IViewPresetSelectorUserPreferences>(guid).pipe(\n      map(\n        (preferences) =>\n          preferences ?? {\n            customViewPresets: [],\n            sharedViewPresets: [],\n            viewPresetGuid: null\n          }\n      )\n    );\n  }\n\n  private checkSharedViewPresets(\n    state: IViewPresetSelectorState\n  ): Observable<IViewPresetSelectorUserPreferencesApplyResult> {\n    if (state.sharedViewPresetOptions.length) {\n      return this.rxShareViewPresetService.getSharedViewPresetsForCurrentUser(this.viewPresetSelectorGuid).pipe(\n        map((sharedPresets) => {\n          let shouldUpdatePreferences = false;\n          let removedPresetGuid = null;\n\n          // checking if already added shared presets are still available\n          // and updating preset names in case of renaming\n          state.sharedViewPresetOptions = state.sharedViewPresetOptions.reduce((result, presetOption) => {\n            const existingPreset = sharedPresets.find((sharedPreset) => sharedPreset.guid === presetOption.guid);\n\n            if (existingPreset) {\n              if (presetOption.label !== existingPreset.label) {\n                presetOption.label = existingPreset.label;\n                shouldUpdatePreferences = true;\n              }\n\n              result.push(presetOption);\n            } else {\n              shouldUpdatePreferences = true;\n            }\n\n            return result;\n          }, []);\n\n          // checking if current selected preset is still available\n          // and if not - switching to first system preset\n          if (state.appliedViewPresetOption.isShared) {\n            const isOptionStillAvailable = state.sharedViewPresetOptions.find(\n              (option) => option.guid === state.appliedViewPresetOption.guid\n            );\n\n            // if preset it not available anymore or sharing was disabled\n            if (!isOptionStillAvailable || !state.isSharingEnabled) {\n              if (!isOptionStillAvailable) {\n                removedPresetGuid = state.appliedViewPresetOption.guid;\n              }\n\n              state.appliedViewPresetOption = state.systemViewPresetOptions[0];\n            }\n          }\n\n          return { state, shouldUpdatePreferences, removedPresetGuid };\n        })\n      );\n    } else {\n      return of({ state, shouldUpdatePreferences: false, removedPresetGuid: null });\n    }\n  }\n}\n"]}