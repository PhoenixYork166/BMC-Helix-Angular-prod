{"version":3,"file":"approval-notification-expression-configurator.class.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/admin/components/approval-notifications/approval-notifiction-expression-configurator/approval-notification-expression-configurator.class.ts"],"names":[],"mappings":"AAAA,OAAO,EAA4C,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AAEhH,OAAO,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAClC,OAAO,EAAc,EAAE,EAAE,MAAM,MAAM,CAAC;AACtC,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACvD,OAAO,EAAoB,oBAAoB,EAAE,8BAA8B,EAAE,MAAM,4BAA4B,CAAC;AACpH,OAAO,EAAE,yBAAyB,EAAE,MAAM,oCAAoC,CAAC;AAE/E,MAAM,OAAO,4CACX,SAAQ,wBAAwB;IAMhC,YAAoB,QAAkB;QACpC,KAAK,EAAE,CAAC;QADU,aAAQ,GAAR,QAAQ,CAAU;QAH9B,qBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QACvD,mCAA8B,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAC;QAM3F,0BAAqB,GAAgC,EAAE,CAAC;YACtD;gBACE,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,oDAAoD,CAAC;gBAC1F,QAAQ,EAAE,EAAE;aACb;SACF,CAAC,CAAC;IAPH,CAAC;IASD,4CAA4C,CAC1C,oBAA4B,EAC5B,2BAAoC;QAEpC,IAAI,oBAAoB,EAAE;YACxB,OAAO,IAAI,CAAC,8BAA8B,CAAC,mBAAmB,CAAC,oBAAoB,CAAC,CAAC,IAAI,CACvF,GAAG,CAAC,CAAC,gBAAgB,EAAE,EAAE;gBACvB,OAAO;oBACL;wBACE,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAClC,mGAAmG,CACpG;wBACD,QAAQ,EAAE,gBAAgB,CAAC,gBAAgB;6BACxC,MAAM,CACL,CAAC,eAAiC,EAAE,EAAE;;4BACpC,OAAA,eAAe,CAAC,YAAY,KAAK,oBAAoB,CAAC,SAAS,CAAC,UAAU,CAAC,YAAY;gCACvF,CAAA,MAAA,eAAe,CAAC,YAAY,0CAAE,MAAM,MAAK,2BAA2B;gCACpE,CAAC,QAAQ,CACP;oCACE,oBAAoB,CAAC,YAAY,CAAC,SAAS;oCAC3C,oBAAoB,CAAC,YAAY,CAAC,EAAE;oCACpC,yBAAyB,CAAC,wBAAwB,CAAC,MAAM,CAAC,mBAAmB;iCAC9E,EACD,eAAe,CAAC,EAAE,CACnB,CAAA;yBAAA,CACJ;6BACA,GAAG,CAAC,CAAC,eAAiC,EAAE,EAAE,CAAC,CAAC;4BAC3C,KAAK,EAAE,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,WAAW,CAAC,EAAE,EAAE,CAAC;4BAChE,IAAI,EAAE,mBAAmB;4BACzB,UAAU,EAAE,2BAA2B;gCACrC,CAAC,CAAC,IAAI,eAAe,CAAC,IAAI,GAAG;gCAC7B,CAAC,CAAC,OAAO,eAAe,CAAC,IAAI,IAAI;4BACnC,YAAY,EAAE,eAAe,CAAC,YAAY;yBAC3C,CAAC,CAAC;qBACN;oBACD;wBACE,KAAK,EAAE,MAAM;wBACb,IAAI,EAAE,eAAe;wBACrB,UAAU,EAAE,QAAQ;wBACpB,MAAM,EAAE,IAAI;qBACb;iBACF,CAAC;YACJ,CAAC,CAAC,CACH,CAAC;SACH;aAAM;YACL,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;SACf;IACH,CAAC;CACF","sourcesContent":["import { IDataDictionary, IExpressionConfigurator, RxExpressionConfigurator } from '@helix/platform/shared/api';\nimport { Injector } from '@angular/core';\nimport { includes } from 'lodash';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IFieldDefinition, RX_RECORD_DEFINITION, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { RX_APPROVAL_NOTIFICATIONS } from '../approval-notifications.constant';\n\nexport class RxApprovalNotificationExpressionConfigurator\n  extends RxExpressionConfigurator\n  implements IExpressionConfigurator\n{\n  private translateService = this.injector.get(TranslateService);\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n\n  constructor(private injector: Injector) {\n    super();\n  }\n\n  commonDataDictionary$: Observable<IDataDictionary> = of([\n    {\n      label: this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),\n      children: []\n    }\n  ]);\n\n  approvalNotificationExpressionDataDictionary(\n    recordDefinitionName: string,\n    isSingleQuoteTextExpression: boolean\n  ): Observable<IDataDictionary> {\n    if (recordDefinitionName) {\n      return this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName).pipe(\n        map((recordDefinition) => {\n          return [\n            {\n              label: this.translateService.instant(\n                'com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.record-definition.title'\n              ),\n              children: recordDefinition.fieldDefinitions\n                .filter(\n                  (fieldDefinition: IFieldDefinition) =>\n                    fieldDefinition.resourceType !== RX_RECORD_DEFINITION.dataTypes.attachment.resourceType &&\n                    fieldDefinition.fieldMapping?.source === 'PRIMARY_RECORD_DEFINITION' &&\n                    !includes(\n                      [\n                        RX_RECORD_DEFINITION.coreFieldIds.displayId,\n                        RX_RECORD_DEFINITION.coreFieldIds.id,\n                        RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.applicationBundleId\n                      ],\n                      fieldDefinition.id\n                    )\n                )\n                .map((fieldDefinition: IFieldDefinition) => ({\n                  label: fieldDefinition.name.replace(new RegExp(' Primary$'), ''),\n                  icon: 'd-icon-field_text',\n                  expression: isSingleQuoteTextExpression\n                    ? `'${fieldDefinition.name}'`\n                    : `'\\${${fieldDefinition.name}}'`,\n                  resourceType: fieldDefinition.resourceType\n                }))\n            },\n            {\n              label: 'NULL',\n              icon: 'd-icon-dollar',\n              expression: '$NULL$',\n              hidden: true\n            }\n          ];\n        })\n      );\n    } else {\n      return of([]);\n    }\n  }\n}\n"]}