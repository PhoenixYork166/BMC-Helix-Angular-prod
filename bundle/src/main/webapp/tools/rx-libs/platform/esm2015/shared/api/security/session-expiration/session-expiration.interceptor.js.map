{"version":3,"file":"session-expiration.interceptor.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/shared/api/security/session-expiration/session-expiration.interceptor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAwD,YAAY,EAAE,MAAM,sBAAsB,CAAC;AAC1G,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAE,UAAU,EAAE,MAAM,qBAAqB,CAAC;AACjD,OAAO,EAAE,qBAAqB,EAAE,MAAM,gCAAgC,CAAC;AACvE,OAAO,EAAE,0BAA0B,EAAE,MAAM,8BAA8B,CAAC;;;AAG1E,MAAM,OAAO,8BAA8B;IAGzC,YAAoB,0BAAsD;QAAtD,+BAA0B,GAA1B,0BAA0B,CAA4B;IAAG,CAAC;IAE9E,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAC9B,GAAG,CAAC,CAAC,KAAqB,EAAE,EAAE;YAC5B,IAAI,KAAK,YAAY,YAAY,EAAE;gBACjC,MAAM,YAAY,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;gBAEzD,IAAI,CAAC,IAAI,CAAC,gBAAgB,IAAI,YAAY,IAAI,IAAI,CAAC,gBAAgB,EAAE;oBACnE,IAAI,CAAC,gBAAgB,GAAG,YAAY,CAAC;oBAErC,MAAM,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;oBACzE,MAAM,eAAe,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;oBAEjF,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,qBAAqB,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;oBACpF,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,qBAAqB,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;iBAC7F;aACF;QACH,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;;2HAvBU,8BAA8B;+HAA9B,8BAA8B;2FAA9B,8BAA8B;kBAD1C,UAAU","sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { RX_SESSION } from '../session.constant';\nimport { SessionExpirationType } from './session-expiration.interface';\nimport { RxSessionExpirationService } from './session-expiration.service';\n\n@Injectable()\nexport class RxSessionExpirationInterceptor implements HttpInterceptor {\n  private lastResponseDate: Date;\n\n  constructor(private rxSessionExpirationService: RxSessionExpirationService) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      tap((event: HttpEvent<any>) => {\n        if (event instanceof HttpResponse) {\n          const responseDate = new Date(event.headers.get('date'));\n\n          if (!this.lastResponseDate || responseDate >= this.lastResponseDate) {\n            this.lastResponseDate = responseDate;\n\n            const idleTimeout = event.headers.get(RX_SESSION.expirationHeaders.idle);\n            const absoluteTimeout = event.headers.get(RX_SESSION.expirationHeaders.absolute);\n\n            this.rxSessionExpirationService.setTimeout(SessionExpirationType.Idle, idleTimeout);\n            this.rxSessionExpirationService.setTimeout(SessionExpirationType.Absolute, absoluteTimeout);\n          }\n        }\n      })\n    );\n  }\n}\n"]}