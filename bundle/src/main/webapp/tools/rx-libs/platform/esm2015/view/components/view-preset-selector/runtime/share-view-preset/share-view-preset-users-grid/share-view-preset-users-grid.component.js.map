{"version":3,"file":"share-view-preset-users-grid.component.js","sourceRoot":"","sources":["../../../../../../../../../../libs/platform/view/components/view-preset-selector/runtime/share-view-preset/share-view-preset-users-grid/share-view-preset-users-grid.component.ts","../../../../../../../../../../libs/platform/view/components/view-preset-selector/runtime/share-view-preset/share-view-preset-users-grid/share-view-preset-users-grid.component.html"],"names":[],"mappings":"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","sourcesContent":["import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n  ViewChild\n} from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { IRecordGridColumn } from '../../../../record-grid/runtime/types/record-grid-column.types';\nimport { IRecordGridConfig } from '../../../../record-grid/runtime/types/record-grid-config.interface';\nimport { RecordGridComponent } from '../../../../record-grid/runtime/record-grid.component';\nimport { RowSelectionMode } from '../../../../record-grid/runtime/types/row-selection-mode.enum';\nimport { IRecordDefinition, RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IDataPageResult } from '@helix/platform/shared/api';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IShareViewPresetUserPayload } from '../share-view-preset.types';\n\n@Component({\n  selector: 'rx-share-view-preset-users-grid',\n  templateUrl: './share-view-preset-users-grid.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class ShareViewPresetUsersGridComponent implements OnChanges {\n  @ViewChild(RecordGridComponent, { static: true })\n  recordGrid: RecordGridComponent;\n\n  @Input()\n  users: IShareViewPresetUserPayload[] = [];\n\n  @Output()\n  remove = new EventEmitter<string[]>();\n\n  recordGridConfig$: Observable<IRecordGridConfig> = this.getRecordGridConfig();\n\n  constructor(private translateService: TranslateService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.users.currentValue && !changes.users.firstChange) {\n      this.recordGrid.api.refresh().subscribe();\n    }\n  }\n\n  private getRecordGridConfig(): Observable<IRecordGridConfig> {\n    const gridColumns: IRecordGridColumn[] = [\n      {\n        fieldId: 'fullName',\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.grid.column.name.title'\n        )\n      },\n      {\n        fieldId: 'emailAddress',\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-components.view-preset-selector.share-view-preset.grid.column.email.title'\n        )\n      }\n    ];\n\n    const gridRecordDefinition: IRecordDefinition = {\n      fieldDefinitions: [\n        {\n          id: 'fullName',\n          resourceType: RX_RECORD_DEFINITION.resourceTypes.character\n        },\n        {\n          id: 'emailAddress',\n          resourceType: RX_RECORD_DEFINITION.resourceTypes.character\n        }\n      ]\n    };\n\n    return of({\n      columns: gridColumns,\n      enableFiltering: false,\n      enableRowSelection: RowSelectionMode.Multiple,\n      recordIdField: 'loginId',\n      styles: 'flex-fill',\n      toolbarConfig: {\n        filter: false,\n        visibleColumnsMenu: false\n      },\n      useExternalFiltering: false,\n      actionButtons: [\n        {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.remove.label'),\n          style: 'tertiary',\n          iconCls: 'minus_circle_o',\n          disabled: () => this.recordGrid.api.getSelectedRows().length === 0,\n          actions: [\n            {\n              name: () => {\n                const selectedUserLoginIds = this.recordGrid.api.getSelectedRows().map((row) => row.loginId);\n\n                this.remove.emit(selectedUserLoginIds);\n              }\n            }\n          ]\n        }\n      ],\n      getRecordDefinition: () => of(gridRecordDefinition),\n      getData: (): Observable<IDataPageResult> =>\n        of({\n          data: this.users,\n          totalSize: this.users.length\n        })\n    });\n  }\n}\n","<rx-record-grid [config]=\"recordGridConfig$\"></rx-record-grid>\n"]}