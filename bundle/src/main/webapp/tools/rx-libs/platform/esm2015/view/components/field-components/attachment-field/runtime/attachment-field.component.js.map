{"version":3,"file":"attachment-field.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/field-components/attachment-field/runtime/attachment-field.component.ts","../../../../../../../../../libs/platform/view/components/field-components/attachment-field/runtime/attachment-field.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Injector, OnInit } from '@angular/core';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { IBaseRecordEditorFieldComponentConfig } from '../../base-record-editor-field/runtime/base-record-editor-field-component.types';\nimport { DownloadConfig, FileObj, UploaderTexts } from '@bmc-ux/adapt-angular';\nimport { RX_ATTACHMENT_FIELD } from '../attachment-field.constant';\nimport { first, has, toString } from 'lodash';\nimport { IFieldDefinition } from '@helix/platform/record/api';\nimport { FormControl } from '@angular/forms';\nimport { distinctUntilChanged, filter, startWith, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'rx-attachment-field',\n  styleUrls: ['./attachment-field.scss'],\n  templateUrl: './attachment-field.component.html'\n})\nexport class AttachmentFieldComponent extends BaseRecordEditorFieldComponent implements IViewComponent, OnInit {\n  fieldDefinition: IFieldDefinition;\n  attachment: File;\n  attachmentFormControl: FormControl;\n\n  // Uploader options\n  filesCount = RX_ATTACHMENT_FIELD.defaultOptions.filesCount;\n  mode = RX_ATTACHMENT_FIELD.defaultOptions.mode;\n  selectionMode = RX_ATTACHMENT_FIELD.defaultOptions.selectionMode;\n  chunkSize = RX_ATTACHMENT_FIELD.defaultOptions.chunkSize;\n  maxFileSize = RX_ATTACHMENT_FIELD.defaultOptions.maxFileSize;\n  showFiles: FileObj[] = [];\n  texts: UploaderTexts = {};\n\n  readStateConfig: DownloadConfig = {\n    fileName: null,\n    downloadURL: null\n  };\n\n  constructor(injector: Injector) {\n    super(injector);\n  }\n\n  onConfigInitialized(config: IBaseRecordEditorFieldComponentConfig): void {\n    super.onConfigInitialized(config);\n\n    this.attachmentFormControl = new FormControl(this.showFiles);\n\n    this.maxFileSize = this.fieldDefinition.maxSize\n      ? toString(this.fieldDefinition.maxSize)\n      : RX_ATTACHMENT_FIELD.defaultOptions.maxFileSize;\n\n    this.formControl.valueChanges\n      .pipe(\n        startWith(this.formControl.value as string),\n        // Update ADAPT component only when formControl value will be a file name string.\n        // When value comes as a File, it means this file is already attached to ADAPT component.\n        filter((value) => !(value instanceof File)),\n        distinctUntilChanged((previous, next) => {\n          return (\n            previous === next &&\n            // After uploading a file, adapt-rx-uploader component has to be updated with the URL to download the file.\n            // This happens when the record editor updates the entire form with values from the saved record instance.\n            // valueChange will emit the same value as before, but adapt-rx-uploader will not have a downloadURL yet.\n            has(this.attachmentFormControl.value, '[0].downloadURL')\n          );\n        }),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe(() => {\n        this.attachmentFormControl.reset();\n        this.addAttachedFileToAttachmentList(this.getFieldValue());\n      });\n\n    this.formControl.touched$.pipe(takeUntil(this.destroyed$)).subscribe((touched) => {\n      touched ? this.attachmentFormControl.markAsTouched() : this.attachmentFormControl.markAsUntouched();\n    });\n  }\n\n  addAttachedFileToAttachmentList(fileName?: string): void {\n    if (fileName) {\n      const downloadAttachmentUrl = this.recordEditorApi.getAttachmentDownloadUrl(this.fieldId);\n      let attachment;\n\n      attachment = {\n        data: {\n          name: fileName\n        },\n        isUploading: true\n      };\n\n      if (downloadAttachmentUrl) {\n        attachment.downloadURL = downloadAttachmentUrl;\n      }\n\n      this.showFiles = [attachment];\n    } else {\n      this.showFiles = [];\n    }\n\n    this.attachmentFormControl.setValue(this.showFiles);\n  }\n\n  onConfigUpdated(config: IBaseRecordEditorFieldComponentConfig): void {\n    super.onConfigUpdated(config);\n\n    if (this.inReadState) {\n      this.readStateConfig = {\n        fileName: this.getDisplayValue(),\n        downloadURL: this.recordEditorApi.getAttachmentDownloadUrl(this.fieldId)\n      };\n    }\n  }\n\n  removeAttachment(attachment: any): void {\n    if (attachment) {\n      this.attachment = null;\n    }\n\n    this.addAttachedFileToAttachmentList();\n    this.setFieldValue(this.attachment);\n  }\n\n  addAttachment(attachments: FileObj[]): void {\n    const attachment = first(attachments);\n\n    if (attachment) {\n      this.attachment = attachment.data;\n      this.setFieldValue(this.attachment);\n    }\n  }\n\n  onBlur(): void {\n    this.formControl.markAsTouched();\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <ng-container *ngIf=\"inReadState; else editStateElementRef\">\n    <div *ngIf=\"getDisplayValue(); else emptyReadonlyField\" [attr.aria-label]=\"label\">\n      <label aria-hidden=\"true\">{{ label }}</label>\n\n      <adapt-downloader class=\"d-block\" *ngIf=\"getDisplayValue()\" [config]=\"readStateConfig\"></adapt-downloader>\n    </div>\n  </ng-container>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-uploader\n    [ngClass]=\"{ 'attachment-disabled': isDisabled }\"\n    [reusable]=\"true\"\n    [label]=\"label\"\n    [readonly]=\"isDisabled\"\n    [required]=\"isRequired\"\n    [allowDeletion]=\"false\"\n    [uploadMode]=\"mode\"\n    [selectionMode]=\"selectionMode\"\n    [filesCount]=\"filesCount\"\n    [maxFileSize]=\"maxFileSize\"\n    [chunkSize]=\"chunkSize\"\n    [texts]=\"texts\"\n    (removedFileFromQueue)=\"removeAttachment($event)\"\n    (deletedFile)=\"removeAttachment($event)\"\n    (afterFilesAdded)=\"addAttachment($event)\"\n    [formControl]=\"attachmentFormControl\"\n    (onBlur)=\"onBlur()\"\n  >\n  </adapt-rx-uploader>\n</ng-template>\n\n<ng-template #emptyReadonlyField>\n  <rx-read-only-field [label]=\"label\" [value]=\"'-'\"></rx-read-only-field>\n</ng-template>\n"]}