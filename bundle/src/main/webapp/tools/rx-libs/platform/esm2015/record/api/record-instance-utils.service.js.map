{"version":3,"file":"record-instance-utils.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/record/api/record-instance-utils.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { IDataPageParams, IPlainObject, RxLogService } from '@helix/platform/shared/api';\nimport BigNumber from 'bignumber.js';\nimport { get, isEqual, last, map as _map, toNumber, transform } from 'lodash';\nimport { Observable, of } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { IFieldInstance } from './field-instance.interface';\nimport { RX_RECORD_DEFINITION } from './record-definition.constant';\nimport { RxRecordInstanceDataPageService } from './record-instance-data-page.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordInstanceUtilsService {\n  displayFieldsCache: { [serializedParams: string]: IPlainObject[] } = {};\n\n  constructor(\n    private rxRecordInstanceDataPageService: RxRecordInstanceDataPageService,\n    private rxLogService: RxLogService\n  ) {}\n\n  convertFromDataPageRowToPlainRecordInstance(dataPageRow: IPlainObject): {\n    fieldInstances: { [fieldId: number]: IFieldInstance };\n    id: string;\n  } {\n    return {\n      id: dataPageRow[RX_RECORD_DEFINITION.coreFieldIds.id],\n      fieldInstances: transform(\n        dataPageRow,\n        (result, value, key) => {\n          result[key] = {\n            id: toNumber(key),\n            value: value\n          };\n        },\n        {}\n      )\n    };\n  }\n\n  escapeTextWildcards(value) {\n    // escape double quotes with double quotes, e.g. replace \"textInQuotes\" with \"\"textInQuotes\"\"\n    // escape wildcards with backslash, e.g. replace `search%And_` with `search\\%And\\_`\n    return value.replace(/\"/g, '\"\"').replace(/[%_]/g, '\\\\$&');\n  }\n\n  isFieldValueEqual(value: any, other: any) {\n    if (value instanceof BigNumber || other instanceof BigNumber) {\n      return new BigNumber(value).eq(new BigNumber(other));\n    } else {\n      return isEqual(value, other);\n    }\n  }\n\n  isNoRecordFoundError(error: Error) {\n    return error instanceof HttpErrorResponse && get(error, 'error[0].messageNumber') === 302;\n  }\n\n  getFieldValues(\n    recordDefinitionName: string,\n    recordInstanceIds: string[],\n    fieldIds: string[]\n  ): Observable<IPlainObject[]> {\n    const queryExpression = _map(\n      recordInstanceIds,\n      (recordInstanceId) => `'${RX_RECORD_DEFINITION.coreFieldIds.id}'=\"${recordInstanceId}\"`\n    ).join(' OR ');\n\n    const params: IDataPageParams = {\n      recorddefinition: recordDefinitionName,\n      propertySelection: fieldIds.join(','),\n      queryExpression,\n      pageSize: -1,\n      startIndex: 0\n    };\n\n    const serializedParams = JSON.stringify(params);\n\n    if (this.displayFieldsCache[serializedParams]) {\n      return of(this.displayFieldsCache[serializedParams]);\n    }\n\n    return this.rxRecordInstanceDataPageService.post({ params }).pipe(\n      shareReplay(1),\n      map((result) => {\n        this.displayFieldsCache[serializedParams] = result.data;\n\n        return result.data;\n      })\n    );\n  }\n\n  // This method parses content-disposition header and returns decoded file name, for example:\n  // 'attachment; filename*=UTF-8\\'\\'foo+bar.jpg' will become 'foo bar.jpg'\n  // Additional notes:\n  // 1. returns empty string if failed to parse content-disposition\n  // 2. '+'  symbols will be replaced with '%20' which will then be evaluated to spaces after decoding\n  tryParseContentDisposition(contentDisposition: string): string {\n    try {\n      let fileName = contentDisposition.match(/(?:attachment; filename\\*=UTF-8'')(.*)/)[1];\n\n      fileName = fileName.replace(/\\+/g, '%20');\n\n      return decodeURIComponent(fileName);\n    } catch (e) {\n      this.rxLogService.warning(`Cannot parse content-disposition response header: ${contentDisposition}`);\n\n      return '';\n    }\n  }\n}\n"]}