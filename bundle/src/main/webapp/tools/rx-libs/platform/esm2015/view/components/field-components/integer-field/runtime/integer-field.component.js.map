{"version":3,"file":"integer-field.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/field-components/integer-field/runtime/integer-field.component.ts","../../../../../../../../../libs/platform/view/components/field-components/integer-field/runtime/integer-field.component.html"],"names":[],"mappings":"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","sourcesContent":["import { DecimalPipe } from '@angular/common';\nimport { Component, Injector, OnInit, ViewChild } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { IFieldDefinition } from '@helix/platform/record/api';\nimport { IViewComponent } from '@helix/platform/view/runtime';\nimport BigNumber from 'bignumber.js';\nimport { isEqual, isFinite, isNil, isNull } from 'lodash';\nimport { distinctUntilChanged, filter, startWith, takeUntil } from 'rxjs/operators';\nimport { BaseRecordEditorFieldComponent } from '../../base-record-editor-field/runtime/base-record-editor-field-component.class';\nimport { IBaseRecordEditorFieldComponentConfig } from '../../base-record-editor-field/runtime/base-record-editor-field-component.types';\n\n@Component({\n  selector: 'rx-integer-field',\n  templateUrl: './integer-field.component.html'\n})\nexport class IntegerFieldComponent extends BaseRecordEditorFieldComponent implements OnInit, IViewComponent {\n  fieldDefinition: IFieldDefinition;\n  decimalPipe: DecimalPipe;\n  counterFormControl: FormControl;\n\n  private hasFocus = false;\n\n  @ViewChild('counterComponent')\n  counterComponent;\n\n  constructor(injector: Injector) {\n    super(injector);\n\n    this.decimalPipe = injector.get(DecimalPipe);\n  }\n\n  onConfigInitialized(config: IBaseRecordEditorFieldComponentConfig): void {\n    super.onConfigInitialized(config);\n\n    // A separate formControl is used to handle the scenario when invalid number typed to the counter component.\n    this.counterFormControl = new FormControl(this.formControl.value, this.formControl.validator);\n\n    this.counterFormControl.valueChanges\n      .pipe(\n        filter((value) => !isEqual(this.formControl.value, value)),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((value) => {\n        this.setFieldValue(value);\n      });\n\n    this.formControl.valueChanges\n      .pipe(startWith(this.formControl.value as number), distinctUntilChanged(isEqual), takeUntil(this.destroyed$))\n      .subscribe(() => {\n        // To prevent reset the counter invalid value (e.g '-', 'e') during the typing,\n        // in this case counterFormControl value is NaN and formControl value is null,\n        // counter must be updated only when it doesn't have a focus\n        if (!this.hasFocus) {\n          this.counterFormControl.setValue(this.formControl.value);\n        }\n      });\n\n    this.formControl.touched$.pipe(takeUntil(this.destroyed$)).subscribe((touched) => {\n      touched ? this.counterFormControl.markAsTouched() : this.counterFormControl.markAsUntouched();\n    });\n  }\n\n  onBlur(): void {\n    this.hasFocus = false;\n    this.formControl.markAsTouched();\n  }\n\n  onFocus(): void {\n    this.hasFocus = true;\n  }\n\n  getDisplayValue(): string {\n    const fieldValue = this.getFieldValue();\n\n    return isNil(fieldValue) ? fieldValue : this.decimalPipe.transform(String(fieldValue));\n  }\n\n  setFieldValue(value: any): void {\n    if (!isNull(value) && isFinite(value)) {\n      const bigNumberVal = new BigNumber(value);\n\n      if (!bigNumberVal.eq(this.formControl.value)) {\n        this.formControl.markAsDirty();\n        this.formControl.setValue(bigNumberVal);\n      }\n    } else {\n      super.setFieldValue(value);\n    }\n  }\n}\n","<ng-container *ngIf=\"!isHidden\">\n  <rx-read-only-field\n    *ngIf=\"inReadState; else editStateElementRef\"\n    [label]=\"label\"\n    [value]=\"getDisplayValue()\"\n  ></rx-read-only-field>\n</ng-container>\n\n<ng-template #editStateElementRef>\n  <adapt-rx-counter\n    #counterComponent\n    class=\"mb-0\"\n    [label]=\"label\"\n    [formControl]=\"counterFormControl\"\n    [readonly]=\"isDisabled\"\n    [disabledStyleForReadonlyState]=\"true\"\n    [required]=\"isRequired\"\n    [min]=\"fieldDefinition.minValue\"\n    [max]=\"fieldDefinition.maxValue\"\n    [adaptMin]=\"fieldDefinition.minValue\"\n    [adaptMax]=\"fieldDefinition.maxValue\"\n    adaptIntegerNumber\n    (onBlur)=\"onBlur()\"\n    (onFocus)=\"onFocus()\"\n  ></adapt-rx-counter>\n</ng-template>\n"]}