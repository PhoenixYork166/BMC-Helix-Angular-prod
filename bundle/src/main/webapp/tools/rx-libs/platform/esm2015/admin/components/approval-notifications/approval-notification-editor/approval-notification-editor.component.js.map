{"version":3,"file":"approval-notification-editor.component.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/admin/components/approval-notifications/approval-notification-editor/approval-notification-editor.component.ts","../../../../../../../../libs/platform/admin/components/approval-notifications/approval-notification-editor/approval-notification-editor.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Injector, OnDestroy, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  ActiveModalRef,\n  AdaptRxControlLabelTooltip,\n  AdaptTreeNode,\n  DismissReasons,\n  KeyValueObject,\n  RxSelectionChangeEvent,\n  RxSelectOptionsGroup,\n  TreeWrap\n} from '@bmc-ux/adapt-angular';\nimport { IApprovalNotification, IApprovalNotificationData, IApprovalTemplate } from '../approval-notifications.types';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  cloneDeep,\n  every,\n  filter,\n  find,\n  flow,\n  forEach,\n  groupBy,\n  includes,\n  isEmpty,\n  map as _map,\n  map,\n  values\n} from 'lodash';\nimport { switchMap } from 'rxjs/operators';\nimport { BehaviorSubject, forkJoin, Observable } from 'rxjs';\nimport {\n  IDefinitionPickerComponentOptions,\n  IExpressionEditorPropertyChange,\n  IExpressionFormControlOptions,\n  RxDefinitionPickerScope,\n  RxDefinitionPickerType,\n  RxExpressionEditorService\n} from '@helix/platform/shared/components';\nimport { RxApprovalNotificationExpressionConfigurator } from '../approval-notifiction-expression-configurator/approval-notification-expression-configurator.class';\nimport {\n  ExpressionOperatorGroup,\n  IDataPageResult,\n  RxDefinitionNameService,\n  RxNotificationService\n} from '@helix/platform/shared/api';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxRecordDefinitionCacheService,\n  RxRecordInstanceDataPageService\n} from '@helix/platform/record/api';\nimport { RxApprovalNotificationsService } from '../approval-notifications.service';\nimport { RX_APPROVAL_NOTIFICATIONS } from '../approval-notifications.constant';\nimport { RX_CONNECTION_MAPPING } from '../../connection-mapping/common/connection-mapping.constant';\nimport { IDialogApi, RxModalClass } from '@helix/platform/ui-kit';\n\n@Component({\n  selector: 'rx-approval-notification-editor',\n  templateUrl: './approval-notification-editor.component.html',\n  styleUrls: ['./approval-notification-editor.component.scss']\n})\nexport class ApprovalNotificationEditorComponent extends RxModalClass implements OnInit, OnDestroy {\n  approvalNotificationForm: FormGroup;\n  approvalNotificationData: IApprovalNotificationData;\n  recordDefinitions: RxSelectOptionsGroup[] = [];\n  sendToOtherOptions: KeyValueObject[] = [];\n  emailProfileOptions: KeyValueObject[] = [];\n  emailTemplateOptions: IApprovalTemplate[] = [];\n  isEditMode = false;\n  approvalNotification: IApprovalNotification;\n  expressionFormControlOptions: IExpressionFormControlOptions;\n  subjectExpressionFormControlOptions: IExpressionFormControlOptions;\n  notificationMessageExpressionOptions: IExpressionFormControlOptions;\n  groupedData: KeyValueObject = {};\n  processList: string[] = [];\n  isTreeTouched: boolean;\n  treeWrap: TreeWrap = TreeWrap.WrapAll;\n\n  private expressionDialogApi: IDialogApi;\n  private recordDefinitionSubject: BehaviorSubject<string>;\n  protected subjectExpressionConfigurator: RxApprovalNotificationExpressionConfigurator;\n  protected expressionConfigurator: RxApprovalNotificationExpressionConfigurator;\n\n  selectedFlows: AdaptTreeNode[] = [];\n  availableFlows: AdaptTreeNode[] = [];\n\n  processDefinitionPickerOptions: IDefinitionPickerComponentOptions = {\n    label: this.translateService.instant(\n      'com.bmc.arsys.rx.client.approval.notification-configuration.process-name-field.label'\n    ),\n    definitionType: RxDefinitionPickerType.Process,\n    required: true,\n    availableDefinitionPickerStates: {\n      definitionButtonsGroups: [RxDefinitionPickerScope.All],\n      search: RxDefinitionPickerScope.All\n    }\n  };\n\n  notificationTypeTooltip: AdaptRxControlLabelTooltip = {\n    popoverMode: true,\n    iconName: 'question_circle_o',\n    placement: 'right',\n    content: this.translateService.instant(\n      'com.bmc.arsys.rx.client.approval.notification-configuration.notification-type-field.tooltip'\n    )\n  };\n\n  approverSelectionTooltip: AdaptRxControlLabelTooltip = {\n    popoverMode: true,\n    iconName: 'question_circle_o',\n    placement: 'right',\n    content: this.translateService.instant(\n      'com.bmc.arsys.rx.client.approval.notification-configuration.send-to.options.approver-selection.tooltip'\n    )\n  };\n\n  sendToOptionValue = {\n    allApprovers: '0',\n    selectedApprover: '1'\n  };\n\n  sendToOption = [\n    {\n      id: this.sendToOptionValue.allApprovers,\n      name: this.translateService.instant(\n        'com.bmc.arsys.rx.client.approval.notification-configuration.send-to.options.all-approvers.name'\n      )\n    },\n    {\n      id: this.sendToOptionValue.selectedApprover,\n      name: this.translateService.instant(\n        'com.bmc.arsys.rx.client.approval.notification-configuration.send-to.options.other.name'\n      )\n    }\n  ];\n\n  globalNotificationOptionValue = {\n    global: 'global',\n    flows: 'flows'\n  };\n\n  globalNotificationOptions = [\n    {\n      label: this.translateService.instant(\n        'com.bmc.arsys.rx.client.approval.notification-configuration.notification-type-field.types.flow.label'\n      ),\n      value: this.globalNotificationOptionValue.flows\n    },\n    {\n      label: this.translateService.instant(\n        'com.bmc.arsys.rx.client.approval.notification-configuration.notification-type-field.types.global.label'\n      ),\n      value: this.globalNotificationOptionValue.global\n    }\n  ];\n\n  notificationMethodOptions = [\n    {\n      id: '2',\n      name: this.translateService.instant(\n        'com.bmc.arsys.rx.client.approval.notification-configuration.notification-method.types.email.name'\n      )\n    },\n    {\n      id: '5',\n      name: this.translateService.instant(\n        'com.bmc.arsys.rx.client.approval.notification-configuration.notification-method.types.process.name'\n      )\n    }\n  ];\n\n  notifyOnOptions = [\n    {\n      id: 0,\n      name: this.translateService.instant(\n        'com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.new-signature.name'\n      )\n    },\n    {\n      id: 1,\n      name: this.translateService.instant(\n        'com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.approve.name'\n      )\n    },\n    {\n      id: 2,\n      name: this.translateService.instant(\n        'com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.reject.name'\n      )\n    },\n    {\n      id: 9,\n      name: this.translateService.instant(\n        'com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.reassign.name'\n      )\n    },\n    {\n      id: 11,\n      name: this.translateService.instant(\n        'com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.cancel.name'\n      )\n    },\n    {\n      id: 12,\n      name: this.translateService.instant(\n        'com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.more-info-provided.name'\n      )\n    },\n    {\n      id: 16,\n      name: this.translateService.instant(\n        'com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.hold.name'\n      )\n    },\n    {\n      id: 17,\n      name: this.translateService.instant(\n        'com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.more-info.name'\n      )\n    }\n  ];\n\n  handleTemplateDependentFieldSelection(event: boolean) {\n    if (event) {\n      this.approvalNotificationForm.get('message').disable();\n      this.approvalNotificationForm.get('outgoingEmailProfile').enable();\n    } else {\n      this.approvalNotificationForm.get('message').enable();\n      this.approvalNotificationForm.get('outgoingEmailProfile').disable();\n    }\n  }\n\n  optionFormatter(option: KeyValueObject): string {\n    return option.name;\n  }\n\n  constructor(\n    protected injector: Injector,\n    private formBuilder: FormBuilder,\n    private activeModalRef: ActiveModalRef,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxExpressionEditorService: RxExpressionEditorService,\n    private rxRecordInstanceDataPageService: RxRecordInstanceDataPageService,\n    private rxApprovalNotificationsService: RxApprovalNotificationsService,\n    private translateService: TranslateService,\n    private rxNotificationService: RxNotificationService,\n    private rxDefinitionNameService: RxDefinitionNameService\n  ) {\n    super(activeModalRef, injector);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n    this.approvalNotificationForm = this.createApprovalNotificationForm();\n    this.approvalNotificationData = this.activeModalRef.getData();\n    this.recordDefinitions = this.approvalNotificationData.recordDefinitions;\n    this.emailTemplateOptions = this.approvalNotificationData.templateList;\n    this.approvalNotification = this.approvalNotificationData.approvalNotification;\n    this.isEditMode = Boolean(this.approvalNotification.notificationName);\n    this.expressionConfigurator = new RxApprovalNotificationExpressionConfigurator(this.injector);\n    this.recordDefinitionSubject = new BehaviorSubject<string>('');\n    this.subjectExpressionConfigurator = new RxApprovalNotificationExpressionConfigurator(this.injector);\n\n    this.subjectExpressionConfigurator.configureForProperty({\n      propertyPath: 'subject',\n      dataDictionary$: this.recordDefinitionSubject\n        .asObservable()\n        .pipe(\n          switchMap((recordDefinitionName) =>\n            this.subjectExpressionConfigurator.approvalNotificationExpressionDataDictionary(recordDefinitionName, false)\n          )\n        ),\n      operators: null\n    });\n\n    this.expressionConfigurator.configureForProperty({\n      propertyPath: 'approvalNotification',\n      dataDictionary$: this.recordDefinitionSubject\n        .asObservable()\n        .pipe(\n          switchMap((recordDefinitionName) =>\n            this.expressionConfigurator.approvalNotificationExpressionDataDictionary(recordDefinitionName, true)\n          )\n        ),\n      operators: this.expressionConfigurator.getOperatorRowsByGroup(ExpressionOperatorGroup.All)\n    });\n\n    this.expressionFormControlOptions = {\n      label: this.translateService.instant(\n        'com.bmc.arsys.rx.client.approval.notification-configuration.notification-expression-field.label'\n      ),\n      dataDictionary$: this.expressionConfigurator.getDataDictionary('approvalNotification'),\n      operators: this.expressionConfigurator.getOperators('approvalNotification'),\n      isRequired: false,\n      tooltip: {\n        popoverMode: true,\n        iconName: 'question_circle_o',\n        placement: 'right',\n        content: this.translateService.instant(\n          'com.bmc.arsys.rx.client.approval.notification-configuration.notification-expression-field.tooltip'\n        )\n      }\n    };\n\n    this.subjectExpressionFormControlOptions = {\n      label: this.translateService.instant(\n        'com.bmc.arsys.rx.client.approval.notification-configuration.subject-field.label'\n      ),\n      dataDictionary$: this.subjectExpressionConfigurator.getDataDictionary('subject'),\n      operators: this.expressionConfigurator.getOperators('subject'),\n      isRequired: this.isRequiredForEmail()\n    };\n\n    this.notificationMessageExpressionOptions = {\n      label: this.translateService.instant('com.bmc.arsys.rx.client.common.message.label'),\n      dataDictionary$: this.subjectExpressionConfigurator.getDataDictionary('subject'),\n      operators: this.expressionConfigurator.getOperators('subject'),\n      isRequired: this.isRequiredForEmail()\n    };\n\n    this.approvalNotificationForm\n      .get('primaryRecordName')\n      .valueChanges.subscribe((value) => this.onRecordDefinitionChange(value));\n\n    this.approvalNotificationForm\n      .get('notificationMethod')\n      .valueChanges.subscribe((value) => this.onNotificationMethodChange(value));\n\n    if (this.isEditMode) {\n      this.initializeApprovalNotificationForm();\n    }\n  }\n\n  isDirty(): boolean {\n    return Boolean(this.approvalNotificationForm?.dirty || this.expressionDialogApi?.isDirty());\n  }\n\n  ngOnDestroy() {\n    this.recordDefinitionSubject.complete();\n  }\n\n  createApprovalNotificationForm(): FormGroup {\n    return this.formBuilder.group({\n      primaryRecordName: [[], Validators.required],\n      notificationName: ['', Validators.required],\n      notifyOn: [[], Validators.required],\n      additionalQualification: '',\n      notificationType: this.globalNotificationOptionValue.flows,\n      useTemplate: false,\n      outgoingEmailProfile: [{ value: [], disabled: true }, Validators.required],\n      approvalTemplate: [[], Validators.nullValidator],\n      sendTo: ['0'],\n      subject: '',\n      notificationMethod: [[this.notificationMethodOptions[0]], Validators.required],\n      status: true,\n      message: '',\n      approver: [{ value: [], disabled: true }, Validators.required],\n      rxProcessName: '',\n      check: false\n    });\n  }\n\n  reset(): void {\n    this.approvalNotificationForm.get('additionalQualification').setValue('');\n    this.approvalNotificationForm.get('rxProcessName').setValue('');\n    this.approvalNotificationForm.get('subject').setValue('');\n    this.approvalNotificationForm.get('message').setValue('');\n    this.approvalNotificationForm.get('sendTo').setValue('0');\n    this.approvalNotificationForm.get('notifyOn').setValue([]);\n    this.approvalNotificationForm.get('notificationType').setValue(this.globalNotificationOptionValue.flows);\n    this.approvalNotificationForm.get('useTemplate').setValue(false);\n    this.approvalNotificationForm.get('notificationMethod').setValue([this.notificationMethodOptions[0]]);\n    this.approvalNotificationForm.get('outgoingEmailProfile').setValue([]);\n    this.approvalNotificationForm.get('approvalTemplate').setValue([]);\n    this.approvalNotificationForm.get('approver').setValue([]);\n    this.approvalNotificationForm.get('status').setValue(true);\n  }\n\n  onNotificationMethodChange(value: KeyValueObject): void {\n    // check if notification method is process or email i.e '5' or '2'\n    if (value[0].id === this.notificationMethodOptions[1].id) {\n      this.approvalNotificationForm.get('subject').setValue('');\n      this.approvalNotificationForm.get('message').setValue('');\n      this.approvalNotificationForm.controls['subject'].disable();\n      this.approvalNotificationForm.controls['message'].disable();\n      this.approvalNotificationForm.controls['rxProcessName'].enable();\n    } else if (value[0].id === this.notificationMethodOptions[0].id) {\n      this.approvalNotificationForm.get('rxProcessName').setValue('');\n      this.approvalNotificationForm.controls['rxProcessName'].disable();\n      this.approvalNotificationForm.controls['subject'].enable();\n      this.approvalNotificationForm.controls['message'].enable();\n    }\n  }\n\n  handleSendToOptionSelection() {\n    if (this.approvalNotificationForm.get('sendTo').value === this.sendToOptionValue.selectedApprover) {\n      this.approvalNotificationForm.get('approver').enable();\n    } else {\n      this.approvalNotificationForm.get('approver').disable();\n    }\n  }\n\n  initializeApprovalNotification(\n    recordDefinitionName: string\n  ): Observable<[IRecordDefinition, IDataPageResult, IDataPageResult]> {\n    return forkJoin([\n      this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName + ' Detail Signature'),\n      this.rxRecordInstanceDataPageService.post({\n        params: {\n          recorddefinition: RX_APPROVAL_NOTIFICATIONS.arSystemEmailMailboxConfiguration.name,\n          propertySelection: [RX_RECORD_DEFINITION.coreFieldIds.id],\n          queryExpression: `'${RX_RECORD_DEFINITION.coreFieldIds.status}' = \"0\" AND '${RX_APPROVAL_NOTIFICATIONS.arSystemEmailMailboxConfiguration.fields.mailboxFunction}' = \"1\"`\n        }\n      }),\n      this.rxRecordInstanceDataPageService.post({\n        params: {\n          recorddefinition: RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.name,\n          propertySelection: values(RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.fields).join(),\n          queryExpression: `'${RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.fields.recordDefinition}' == \"${recordDefinitionName}\"`\n        }\n      })\n    ]);\n  }\n\n  initializeApprovalNotificationForm(): void {\n    this.approvalNotificationForm.get('notificationName').setValue(this.approvalNotification.notificationName);\n    this.approvalNotificationForm.get('status').setValue(this.approvalNotification.status === '0');\n    this.approvalNotificationForm.get('rxProcessName').setValue(this.approvalNotification.rxProcessName);\n\n    this.approvalNotificationForm\n      .get('subject')\n      .setValue(this.convertExpressionFromServerFormat(this.approvalNotification.subject));\n\n    this.approvalNotificationForm\n      .get('message')\n      .setValue(this.convertExpressionFromServerFormat(this.approvalNotification.message));\n\n    this.approvalNotificationForm.get('sendTo').setValue(this.approvalNotification.sendTo);\n    this.handleSendToOptionSelection();\n\n    this.approvalNotificationForm\n      .get('additionalQualification')\n      .setValue(this.approvalNotification.additionalQualification);\n\n    this.approvalNotificationForm\n      .get('notifyOn')\n      .setValue(filter(this.notifyOnOptions, { id: this.approvalNotification.notifyOn }));\n\n    this.approvalNotificationForm\n      .get('notificationType')\n      .setValue(\n        this.approvalNotification.notificationType === 1\n          ? this.globalNotificationOptionValue.global\n          : this.globalNotificationOptionValue.flows\n      );\n\n    this.approvalNotificationForm.get('useTemplate').setValue(this.approvalNotification.useTemplate === '1');\n    this.handleTemplateDependentFieldSelection(true);\n\n    this.approvalNotificationForm\n      .get('notificationMethod')\n      .setValue(filter(this.notificationMethodOptions, { id: this.approvalNotification.notificationMethod }));\n\n    this.approvalNotificationForm.get('outgoingEmailProfile').setValue([\n      {\n        name: this.approvalNotification.emailProfile,\n        id: this.approvalNotification.emailProfileGuid\n      }\n    ]);\n\n    this.approvalNotificationForm.get('approvalTemplate').setValue([\n      {\n        name: this.approvalNotification.approvalTemplateName,\n        id: this.approvalNotification.approvalTemplateGuid\n      }\n    ]);\n\n    this.approvalNotificationForm.get('primaryRecordName').setValue(\n      this.approvalNotification.primaryRecordName\n        ? [\n            {\n              value: this.approvalNotification.primaryRecordName,\n              displayValue: this.rxDefinitionNameService.getDisplayName(this.approvalNotification.primaryRecordName)\n            }\n          ]\n        : []\n    );\n  }\n\n  onRecordDefinitionChange(recordDefinitionOption): void {\n    const oldRecordDefinitionName = this.approvalNotificationForm.value.primaryRecordName.length\n      ? this.approvalNotificationForm.value.primaryRecordName[0]\n      : '';\n\n    const newRecordDefinitionName = recordDefinitionOption[0].value;\n    const threeWayRecordDefinitionName = newRecordDefinitionName + ' Detail Signature';\n\n    if (newRecordDefinitionName !== oldRecordDefinitionName) {\n      if (!this.isEditMode) {\n        this.reset();\n      }\n\n      this.recordDefinitionSubject.next(threeWayRecordDefinitionName);\n\n      if (newRecordDefinitionName) {\n        this.initializeApprovalNotification(newRecordDefinitionName).subscribe(\n          ([recordDefinition, outgoingMailboxes, recordInstances]) => {\n            this.prepareApprovalFlowTree(recordInstances);\n            this.initializeSendToFromControlOptions(recordDefinition);\n            this.initializeEmailProfiles(outgoingMailboxes, newRecordDefinitionName);\n          }\n        );\n      }\n    }\n  }\n\n  onSelectionChange() {\n    this.isTreeTouched = true;\n    this.approvalNotificationForm.markAsDirty();\n  }\n\n  private isGlobalNotification(): boolean {\n    return (\n      this.isEditMode &&\n      this.approvalNotificationForm.get('notificationType').value === this.globalNotificationOptionValue.global\n    );\n  }\n\n  prepareApprovalFlowTree(recordInstances: IDataPageResult): void {\n    this.selectedFlows = [];\n\n    this.availableFlows = flow(\n      (instanceData) => groupBy(instanceData, RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.fields.flowGroup),\n      (flowsByFlowGroup) =>\n        map(flowsByFlowGroup, (flows, flowGroupName) => ({\n          label: flowGroupName,\n          disallowMultipleNodeSelection: this.isGlobalNotification(),\n          expanded: true,\n          children: _map(flows, (approvalFlow) => {\n            const leafNode = {\n              label: approvalFlow[RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.fields.flowName],\n              key: approvalFlow[\n                RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.fields.arApprovalProcessDefinitionGuid\n              ],\n              leaf: true,\n              data: flowGroupName,\n              disallowMultipleNodeSelection: this.isGlobalNotification()\n            };\n\n            if (\n              includes(\n                this.approvalNotification.processList,\n                approvalFlow[RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.fields.arApprovalProcessDefinitionGuid]\n              )\n            ) {\n              this.selectedFlows.push(leafNode);\n            }\n\n            return leafNode;\n          })\n        }))\n    )(recordInstances.data);\n\n    this.updateParentNodesForSelectedFlows();\n  }\n\n  private updateParentNodesForSelectedFlows() {\n    forEach(this.selectedFlows, (selectedFlow) => {\n      const availableParentNode = find(\n        this.availableFlows,\n        (availableFlow) => availableFlow.label === selectedFlow.data\n      );\n\n      if (every(availableParentNode.children, (node) => includes(this.selectedFlows, node))) {\n        this.selectedFlows.push(availableParentNode);\n      } else {\n        availableParentNode.partialSelected = true;\n      }\n    });\n  }\n\n  initializeEmailProfiles(outgoingMailboxes: IDataPageResult, recordDefinitionName: string): void {\n    let additionalExpression = `'${RX_CONNECTION_MAPPING.aliasMapping.fields.aliasType}' = \"email\"`;\n    let expression = '';\n\n    if (recordDefinitionName) {\n      additionalExpression += ` AND ('${\n        RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId\n      }' = \"${this.rxDefinitionNameService.getBundleId(recordDefinitionName)}\" OR '${\n        RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId\n      }' = \"None\")`;\n    }\n\n    forEach(outgoingMailboxes.data, (outgoingMailbox) => {\n      if (!isEmpty(expression)) {\n        expression += ' OR ';\n      }\n\n      expression += `'${RX_CONNECTION_MAPPING.aliasMapping.fields.aliasValue}' = \"${\n        outgoingMailbox[RX_RECORD_DEFINITION.coreFieldIds.id]\n      }\"`;\n    });\n\n    expression = expression ? ' AND ((' + expression + '))' : '';\n\n    this.rxRecordInstanceDataPageService\n      .post({\n        params: {\n          recorddefinition: 'Alias Mapping',\n          propertySelection: [\n            RX_CONNECTION_MAPPING.aliasMapping.fields.aliasName,\n            RX_RECORD_DEFINITION.coreFieldIds.id,\n            RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId\n          ],\n          queryExpression: additionalExpression + expression\n        }\n      })\n      .subscribe((result) => {\n        this.emailProfileOptions = result.data.map((emailData: KeyValueObject) => {\n          return {\n            name: emailData[RX_CONNECTION_MAPPING.aliasMapping.fields.aliasName],\n            id: emailData[RX_RECORD_DEFINITION.coreFieldIds.id]\n          };\n        });\n      });\n  }\n\n  initializeSendToFromControlOptions(recordDefinition: IRecordDefinition): void {\n    if (recordDefinition && recordDefinition.fieldDefinitions) {\n      this.sendToOtherOptions = this.filterFieldDefinitions(recordDefinition.fieldDefinitions);\n\n      this.approvalNotificationForm\n        .get('approver')\n        .setValue(filter(this.sendToOtherOptions, { id: this.approvalNotification.sendToOthers }));\n    }\n  }\n\n  private filterFieldDefinitions(fieldDefinitions: IFieldDefinition[]): KeyValueObject[] {\n    return fieldDefinitions\n      .filter(\n        (fieldDefinition: IFieldDefinition) =>\n          fieldDefinition.resourceType !== RX_RECORD_DEFINITION.dataTypes.attachment.resourceType &&\n          fieldDefinition.fieldMapping?.source === 'PRIMARY_RECORD_DEFINITION' &&\n          !includes(\n            [\n              RX_RECORD_DEFINITION.coreFieldIds.displayId,\n              RX_RECORD_DEFINITION.coreFieldIds.id,\n              RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.applicationBundleId\n            ],\n            fieldDefinition.id\n          )\n      )\n      .map((fieldDefinition: IFieldDefinition) => ({\n        name: fieldDefinition.name.replace(/ Primary$/, ''),\n        id: `'\\$\\{${fieldDefinition.name}\\}'`\n      }));\n  }\n\n  buildExpression(propertyName): void {\n    this.selectApprovalNotificationExpression(propertyName);\n  }\n\n  private selectApprovalNotificationExpression(propertyName: string): void {\n    let fieldLabel = '';\n\n    if (propertyName === 'additionalQualification') {\n      fieldLabel = this.translateService.instant(\n        'com.bmc.arsys.rx.client.approval.notification-configuration.notification-expression-field.label'\n      );\n    } else if (propertyName === 'subject') {\n      fieldLabel = this.translateService.instant(\n        'com.bmc.arsys.rx.client.approval.notification-configuration.subject-field.label'\n      );\n    } else if (propertyName === 'message') {\n      fieldLabel = this.translateService.instant('com.bmc.arsys.rx.client.common.message.label');\n    }\n\n    const expressionEditorConfig = {\n      property: {\n        path: propertyName === 'additionalQualification' ? 'approvalNotification' : 'subject',\n        value: this.approvalNotificationForm.get(propertyName).value,\n        label: fieldLabel\n      },\n      expressionConfigurator:\n        propertyName === 'additionalQualification' ? this.expressionConfigurator : this.subjectExpressionConfigurator,\n      legend: [\n        {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),\n          icon: 'd-icon-dollar'\n        },\n        {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.field.label'),\n          icon: 'd-icon-field_text'\n        }\n      ]\n    };\n\n    this.rxExpressionEditorService\n      .openEditor(expressionEditorConfig, (dialogApi: IDialogApi) => (this.expressionDialogApi = dialogApi))\n      .subscribe((expression: IExpressionEditorPropertyChange) => {\n        this.expressionDialogApi = null;\n        this.approvalNotificationForm.get(propertyName).setValue(expression.value);\n        this.approvalNotificationForm.get(propertyName).markAsDirty();\n      });\n  }\n\n  private transformFormControlData(): IApprovalNotification {\n    const approvalNotificationRecord = cloneDeep(this.approvalNotificationForm.value);\n\n    approvalNotificationRecord.primaryRecordName = approvalNotificationRecord.primaryRecordName[0].value;\n\n    approvalNotificationRecord.notifyOn = approvalNotificationRecord.notifyOn.length\n      ? approvalNotificationRecord.notifyOn[0].id\n      : '';\n\n    if (approvalNotificationRecord.notificationType === this.globalNotificationOptionValue.flows) {\n      approvalNotificationRecord.notificationType = 0;\n\n      approvalNotificationRecord.processList = this.selectedFlows\n        .filter((approvalFlow: AdaptTreeNode) => approvalFlow.leaf)\n        .map((approvalFlow: AdaptTreeNode) => approvalFlow.key);\n    } else {\n      approvalNotificationRecord.notificationType = 1;\n    }\n\n    if (approvalNotificationRecord?.outgoingEmailProfile?.length) {\n      approvalNotificationRecord.emailProfile = approvalNotificationRecord.outgoingEmailProfile[0].name;\n      approvalNotificationRecord.emailProfileGuid = approvalNotificationRecord.outgoingEmailProfile[0].id;\n    }\n\n    delete approvalNotificationRecord.outgoingEmailProfile;\n\n    if (approvalNotificationRecord.approvalTemplate.length) {\n      approvalNotificationRecord.approvalTemplateName = approvalNotificationRecord.approvalTemplate.name;\n      approvalNotificationRecord.approvalTemplateGuid = approvalNotificationRecord.approvalTemplate.id;\n    }\n\n    delete approvalNotificationRecord.approvalTemplate;\n\n    approvalNotificationRecord.sendToOthers = approvalNotificationRecord.approver?.length\n      ? approvalNotificationRecord.approver[0].id\n      : '';\n\n    approvalNotificationRecord.notificationMethod = approvalNotificationRecord.notificationMethod.length\n      ? approvalNotificationRecord.notificationMethod[0].id\n      : '';\n\n    if (approvalNotificationRecord.notificationMethod === this.notificationMethodOptions[1].id) {\n      approvalNotificationRecord.subject = approvalNotificationRecord.notificationName;\n      approvalNotificationRecord.message = approvalNotificationRecord.notificationName;\n    } else if (approvalNotificationRecord.useTemplate) {\n      approvalNotificationRecord.message = approvalNotificationRecord.notificationName;\n    }\n\n    approvalNotificationRecord.useTemplate = approvalNotificationRecord.useTemplate ? '1' : '0';\n    approvalNotificationRecord.status = approvalNotificationRecord.status ? '0' : '1';\n\n    approvalNotificationRecord.subject = this.convertExpressionToServerFormat(approvalNotificationRecord.subject);\n    approvalNotificationRecord.message = this.convertExpressionToServerFormat(approvalNotificationRecord.message);\n\n    delete approvalNotificationRecord.approver;\n    delete approvalNotificationRecord.check;\n\n    if (this.isEditMode) {\n      approvalNotificationRecord.notificationGuid = this.approvalNotification.notificationGuid;\n    }\n\n    return approvalNotificationRecord;\n  }\n\n  save(): void {\n    this.approvalNotificationForm.markAsPristine();\n    const approvalNotificationRecord = this.transformFormControlData();\n\n    this.rxApprovalNotificationsService.createApprovalNotification(approvalNotificationRecord).subscribe(() => {\n      this.rxNotificationService.addSuccessMessage(\n        this.translateService.instant(\n          'com.bmc.arsys.rx.client.approval.notification-configuration.notification-saved.message'\n        )\n      );\n\n      this.activeModalRef.close(approvalNotificationRecord);\n    });\n  }\n\n  update(): void {\n    this.approvalNotificationForm.markAsPristine();\n    const approvalNotificationRecord = this.transformFormControlData();\n\n    this.rxApprovalNotificationsService.updateApprovalNotification(approvalNotificationRecord).subscribe(() => {\n      this.rxNotificationService.addSuccessMessage(\n        this.translateService.instant(\n          'com.bmc.arsys.rx.client.approval.notification-configuration.notification-updated.message'\n        )\n      );\n\n      this.activeModalRef.close(approvalNotificationRecord);\n    });\n  }\n\n  closeModal(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  shouldUseTemplate(): boolean {\n    return this.approvalNotificationForm.get('notifyOn').value[0]?.id === 0;\n  }\n\n  showProcessDefinitionPicker(): boolean {\n    return this.approvalNotificationForm.get('notificationMethod').value[0]?.id === '5';\n  }\n\n  private isRequiredForEmail(): boolean {\n    return this.approvalNotificationForm.get('notificationMethod').value[0]?.id === '2';\n  }\n\n  onNotifyChange(event?: RxSelectionChangeEvent): void {\n    if (event.options[0].id !== 0) {\n      this.approvalNotificationForm.get('useTemplate').setValue(false);\n    }\n  }\n\n  isNotificationOptionInvalid(): boolean {\n    return this.approvalNotificationForm.get('notificationType').value === this.globalNotificationOptionValue.flows\n      ? !this.selectedFlows.length\n      : false;\n  }\n\n  definitionOptionFormatter(option: KeyValueObject): string {\n    return option.displayValue;\n  }\n\n  // Convert expression received from server to format supported by expression editor,\n  // e.g. $Assignee Primary$ -> '${Assignee Primary}'\n  private convertExpressionFromServerFormat(expression: string): string {\n    const fieldTokenServerFormatRegExp = new RegExp(\n      '(\\\\$' + RX_RECORD_DEFINITION.validDefinitionNameRegExpString + '\\\\$)',\n      'g'\n    );\n\n    return (\n      expression &&\n      expression.replace(fieldTokenServerFormatRegExp, function (match) {\n        const expressionEntry = match.replace(/\\$/g, '');\n\n        return expressionEntry ? \"'${\" + expressionEntry + \"}'\" : match;\n      })\n    );\n  }\n\n  // Convert expression to format expected by the server,\n  // e.g. '${Assignee Primary}' -> $Assignee Primary$\n  private convertExpressionToServerFormat(expression: string): string {\n    const fieldTokenExpressionEditorFormatRegExp = new RegExp(\n      \"('\\\\${\" + RX_RECORD_DEFINITION.validDefinitionNameRegExpString + \"}')\",\n      'g'\n    );\n\n    return (\n      expression &&\n      expression.replace(fieldTokenExpressionEditorFormatRegExp, function (match) {\n        return '$' + match.replace(/['${}]/g, '') + '$';\n      })\n    );\n  }\n}\n","<div class=\"modal-body\">\n  <form [formGroup]=\"approvalNotificationForm\">\n    <div class=\"row\">\n      <div class=\"col-12 col-md-6\">\n        <adapt-rx-select\n          class=\"d-block form-group\"\n          formControlName=\"primaryRecordName\"\n          [options]=\"recordDefinitions\"\n          rx-id=\"record-definition-name\"\n          [disabled]=\"isEditMode\"\n          label=\"{{ 'com.bmc.arsys.rx.client.approval.record-definition-field.label' | translate }}\"\n          [optionFormatter]=\"definitionOptionFormatter\"\n        >\n        </adapt-rx-select>\n      </div>\n\n      <div class=\"col-12 col-md-6\">\n        <adapt-rx-textfield\n          class=\"d-block form-group\"\n          rx-id=\"notification-name\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.approval.notification-configuration.notification-name-field.label' | translate\n          }}\"\n          formControlName=\"notificationName\"\n        ></adapt-rx-textfield>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-12 col-md-6 d-flex flex-column\">\n        <adapt-rx-select\n          class=\"d-block form-group\"\n          formControlName=\"notifyOn\"\n          [options]=\"notifyOnOptions\"\n          [optionFormatter]=\"optionFormatter\"\n          rx-id=\"notify-on\"\n          (onSelectionChange)=\"onNotifyChange($event)\"\n          label=\"{{ 'com.bmc.arsys.rx.client.approval.notification-configuration.notify-on-field.label' | translate }}\"\n        >\n        </adapt-rx-select>\n\n        <rx-expression-form-control\n          class=\"d-block form-group\"\n          [options]=\"expressionFormControlOptions\"\n          formControlName=\"additionalQualification\"\n          rx-id=\"additional-qualification\"\n          (events)=\"buildExpression('additionalQualification')\"\n          required=\"false\"\n        ></rx-expression-form-control>\n\n        <adapt-rx-radiobutton-group\n          class=\"d-block form-group\"\n          formControlName=\"notificationType\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.approval.notification-configuration.notification-type-field.label' | translate\n          }}\"\n          [tooltip]=\"notificationTypeTooltip\"\n          rx-id=\"notification-type\"\n        >\n          <adapt-rx-radiobutton\n            *ngFor=\"let option of globalNotificationOptions; let index = index\"\n            [label]=\"option.label\"\n            [value]=\"option.value\"\n            [disabled]=\"isEditMode\"\n            class=\"radio-inline m-0\"\n            [ngClass]=\"{ 'mr-3': index === 0 }\"\n          ></adapt-rx-radiobutton>\n        </adapt-rx-radiobutton-group>\n\n        <div\n          class=\"d-flex flex-column h-100\"\n          *ngIf=\"approvalNotificationForm.get('notificationType').value === globalNotificationOptionValue.flows\"\n        >\n          <adapt-rx-control-label\n            label=\"{{\n              'com.bmc.arsys.rx.client.approval.notification-configuration.notification-type-field.types.flow.sub-label'\n                | translate\n            }}\"\n            [showRequiredLabel]=\"true\"\n          >\n          </adapt-rx-control-label>\n\n          <div class=\"card flex-fill\" [ngClass]=\"{ 'border-danger': isTreeTouched && isNotificationOptionInvalid() }\">\n            <div class=\"card-block\">\n              <adapt-empty-state\n                *ngIf=\"!availableFlows.length\"\n                [type]=\"'grid'\"\n                label=\"{{\n                  'com.bmc.arsys.rx.client.approval.notification-configuration.no-flows-available.message' | translate\n                }}\"\n              >\n              </adapt-empty-state>\n\n              <adapt-tree\n                [value]=\"availableFlows\"\n                selectionMode=\"checkbox\"\n                [(selection)]=\"selectedFlows\"\n                *ngIf=\"availableFlows.length\"\n                (selectionChange)=\"onSelectionChange()\"\n                [wrap]=\"treeWrap\"\n              >\n              </adapt-tree>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"col-md-6\">\n        <adapt-rx-radiobutton-group\n          class=\"d-block form-group\"\n          formControlName=\"sendTo\"\n          label=\"{{ 'com.bmc.arsys.rx.client.approval.notification-configuration.send-to-field.label' | translate }}\"\n        >\n          <adapt-rx-radiobutton\n            *ngFor=\"let option of sendToOption; let index = index\"\n            [value]=\"option.id\"\n            [label]=\"option.name\"\n            class=\"radio-inline m-0\"\n            [ngClass]=\"{ 'mr-3': index === 0 }\"\n            rx-id=\"send-to-option\"\n            (checkedChange)=\"handleSendToOptionSelection()\"\n          ></adapt-rx-radiobutton>\n        </adapt-rx-radiobutton-group>\n\n        <adapt-rx-select\n          class=\"d-block form-group\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.approval.notification-configuration.send-to.options.approver-selection' | translate\n          }}\"\n          *ngIf=\"approvalNotificationForm.get('sendTo').value === '1'\"\n          formControlName=\"approver\"\n          [options]=\"sendToOtherOptions\"\n          [optionFormatter]=\"optionFormatter\"\n          [tooltip]=\"approverSelectionTooltip\"\n          rx-id=\"approver\"\n        >\n        </adapt-rx-select>\n\n        <adapt-rx-select\n          class=\"d-block form-group\"\n          formControlName=\"notificationMethod\"\n          [options]=\"notificationMethodOptions\"\n          [optionFormatter]=\"optionFormatter\"\n          rx-id=\"notification-method\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.approval.notification-configuration.notification-method-field.label' | translate\n          }}\"\n        >\n        </adapt-rx-select>\n\n        <adapt-rx-checkbox\n          *ngIf=\"shouldUseTemplate()\"\n          class=\"d-block form-group\"\n          formControlName=\"useTemplate\"\n          rx-id=\"use-template\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.approval.notification-configuration.email-based-approval-field.label' | translate\n          }}\"\n          (ngModelChange)=\"handleTemplateDependentFieldSelection($event)\"\n        ></adapt-rx-checkbox>\n\n        <div *ngIf=\"approvalNotificationForm.get('useTemplate').value\">\n          <adapt-rx-select\n            class=\"d-block form-group\"\n            formControlName=\"outgoingEmailProfile\"\n            [options]=\"emailProfileOptions\"\n            [optionFormatter]=\"optionFormatter\"\n            rx-id=\"outgoing-email-profile\"\n            label=\"{{\n              'com.bmc.arsys.rx.client.approval.notification-configuration.email-outgoing-profile-field.label'\n                | translate\n            }}\"\n          >\n          </adapt-rx-select>\n\n          <adapt-rx-select\n            class=\"d-block form-group\"\n            formControlName=\"approvalTemplate\"\n            [options]=\"emailTemplateOptions\"\n            [optionFormatter]=\"optionFormatter\"\n            rx-id=\"approval-template\"\n            label=\"{{ 'com.bmc.arsys.rx.client.approval.notification-configuration.template-field.label' | translate }}\"\n          >\n          </adapt-rx-select>\n        </div>\n\n        <rx-expression-form-control\n          class=\"d-block form-group\"\n          *ngIf=\"approvalNotificationForm.get('notificationMethod').value[0]['id'] === '2'\"\n          [options]=\"subjectExpressionFormControlOptions\"\n          formControlName=\"subject\"\n          rx-id=\"subject\"\n          (events)=\"buildExpression('subject')\"\n          required=\"true\"\n        ></rx-expression-form-control>\n\n        <rx-expression-form-control\n          class=\"d-block form-group\"\n          *ngIf=\"\n            approvalNotificationForm.get('notificationMethod').value[0]['id'] === '2' &&\n            !approvalNotificationForm.get('useTemplate').value\n          \"\n          [options]=\"notificationMessageExpressionOptions\"\n          formControlName=\"message\"\n          rx-id=\"message\"\n          (events)=\"buildExpression('message')\"\n          required=\"true\"\n        ></rx-expression-form-control>\n\n        <rx-definition-picker\n          class=\"d-block form-group\"\n          *ngIf=\"showProcessDefinitionPicker()\"\n          [options]=\"processDefinitionPickerOptions\"\n          formControlName=\"rxProcessName\"\n          rx-id=\"definition-field\"\n          required=\"true\"\n        >\n        </rx-definition-picker>\n\n        <adapt-rx-switch\n          formControlName=\"status\"\n          rx-id=\"status\"\n          label=\"{{ 'com.bmc.arsys.rx.client.approval.notification-configuration.enabled-field.label' | translate }}\"\n          [isLabelBefore]=\"false\"\n        ></adapt-rx-switch>\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isEditMode\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    class=\"mr-2\"\n    (click)=\"save()\"\n    [disabled]=\"approvalNotificationForm.pristine || approvalNotificationForm.invalid || isNotificationOptionInvalid()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button\n    *ngIf=\"isEditMode\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    class=\"mr-2\"\n    rx-id=\"save-button\"\n    (click)=\"update()\"\n    [disabled]=\"approvalNotificationForm.pristine || approvalNotificationForm.invalid || isNotificationOptionInvalid()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.approval.update.button.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" class=\"mr-2\" type=\"button\" rx-id=\"cancel-button\" (click)=\"closeModal()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n"]}