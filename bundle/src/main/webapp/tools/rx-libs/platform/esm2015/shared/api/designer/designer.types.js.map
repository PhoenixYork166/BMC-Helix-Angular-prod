{"version":3,"file":"designer.types.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/designer/designer.types.ts"],"names":[],"mappings":"","sourcesContent":["import { Injector } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { IValidationIssue } from '@helix/platform/ui-kit';\n\nimport { IPlainObject } from '../common-types';\nimport { IFormBuilderConfig } from '../form-builder';\nimport { IDataDictionaryBranch } from '../data-dictionary';\n\nexport interface IDesignerConfiguration {\n  bundleId: string;\n  definitionName: string;\n  designerOptions?: IPlainObject;\n}\n\nexport interface IDesignerElementService<TElementDefinition = IPlainObject, TElementModel = IPlainObject> {\n  getDefinitionFromModel(model: TElementModel): Partial<TElementDefinition>;\n\n  getInspectorConfig(model: TElementModel, options?: IPlainObject): IFormBuilderConfig;\n\n  getModelFromDefinition(definition: TElementDefinition, options?: IPlainObject): TElementModel;\n\n  getShape(options: IPlainObject): any;\n\n  setCommonDataDictionaryBranch(guid: string, dataDictionaryBranch: Observable<IDataDictionaryBranch>): void;\n\n  validate(model: TElementModel, availableCells: any): Observable<IValidationIssue[]>;\n}\n\ninterface IDesignerPaletteIcon {\n  path: string;\n  position: string;\n}\n\nexport interface IDesignerPaletteItem {\n  border: string;\n  icon?: IDesignerPaletteIcon;\n  label: string;\n  shape: string;\n}\n\nexport interface IDesignerElementDescriptor {\n  elementService: IDesignerElementService;\n  group: string;\n  paletteItem: IDesignerPaletteItem;\n  resourceType: string;\n  shapeClass: any;\n  shapeType: string;\n  type: string;\n  viewShapeClass: any;\n  viewShapeType: string;\n}\n\nexport interface IDesignerElementRegistry {\n  get(type: string): IDesignerElementDescriptor;\n\n  getAll(): IDesignerElementDescriptor[];\n\n  register(descriptor: IDesignerElementDescriptor): void;\n}\n\n// TODO-VS: update types\nexport interface IDesignerGraph<TDefinition, TModel> {\n  reset(): void;\n\n  addDefaultElements(model: TModel): void;\n\n  getDefinitionFromGraph(): Partial<TDefinition>;\n\n  loadGraphFromDefinition(definition: TDefinition): any;\n}\n\nexport interface IDesignerGraphConfig {\n  injector: Injector;\n  options: IPlainObject;\n}\n\nexport interface IDesignerStencilElement {\n  group: string;\n  label: string;\n  value: {\n    [name: string]: string;\n  };\n  selected?: boolean;\n}\n\nexport interface IDesignerStencilElementGroups {\n  [name: string]: {\n    name?: string;\n    priority: number;\n  };\n}\n\nexport interface IDesignerStencilElementTree {\n  expanded?: boolean;\n  label: string;\n  children: IDesignerStencilElement[];\n  allChildElementsSelected?: boolean;\n  someChildElementsSelected?: boolean;\n}\n\nexport interface IAssignmentExpression {\n  assignTarget: string;\n  expression: string;\n}\n\nexport interface IMultiInstanceLoopDefinition {\n  completionCondition: string;\n  inputDataItem: string;\n  isSequential: boolean;\n  loopDataInputRef: string;\n}\n\nexport interface IServerActionModel {\n  actionTypeName: string;\n  deprecatedText: string;\n  guid: string;\n  inputMap: IPlainObject;\n  isDeprecated: boolean;\n  label: string;\n  name: string;\n  outputMap: IAssignmentExpression[];\n  resourceType: string;\n  type: string;\n}\n\nexport interface IProcessActionElementModel extends IServerActionModel {\n  description: string;\n  multiInstanceLoopDefinition: IMultiInstanceLoopDefinition;\n  runAsUser: string;\n}\n\nexport interface IDesignerModel<TDefinition, TDefinitionModel> {\n  bundleId: string;\n  definitionName: string;\n  isDesignMode: boolean;\n  definitionModelFromDefinition: TDefinitionModel;\n  definitionModel: TDefinitionModel;\n  isDirty: boolean;\n  savedDefinitionName: string;\n  originalDefinition: TDefinition;\n}\n"]}