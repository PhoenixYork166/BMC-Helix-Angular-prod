{"version":3,"file":"chatbot-data-set-blade.component.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/admin/components/cognitive-training/components/chatbot-data-set-blade/chatbot-data-set-blade.component.ts","../../../../../../../../../libs/platform/admin/components/cognitive-training/components/chatbot-data-set-blade/chatbot-data-set-blade.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Injector, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { DismissReasons, DockedPanelContext, RxSelectOption, UploaderMode } from '@bmc-ux/adapt-angular';\nimport { RX_RECORD_DEFINITION, RxRecordInstanceService } from '@helix/platform/record/api';\nimport {\n  IChatbotDefinition,\n  IPlainObject,\n  RX_CHATBOT,\n  RxChatbotDefinitionDataPageService\n} from '@helix/platform/shared/api';\nimport { IDefinitionPickerComponentOptions, RxDefinitionPickerType } from '@helix/platform/shared/components';\nimport { assign, find, isEmpty } from 'lodash';\nimport moment from 'moment-es6';\nimport { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\nimport { map, shareReplay, switchMap } from 'rxjs/operators';\nimport { RxCognitiveTrainingUtilsService } from '../../cognitive-training-utils.service';\nimport { RX_COGNITIVE_TRAINING } from '../../cognitive-training.constant';\nimport { RxCognitiveTrainingService } from '../../cognitive-training.service';\nimport { ICognitiveTrainingDataSet } from '../../cognitive-training.types';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RxModalClass } from '@helix/platform/ui-kit';\n\n@Component({\n  selector: 'rx-chatbot-data-set-blade',\n  templateUrl: './chatbot-data-set-blade.component.html'\n})\nexport class ChatbotDataSetBladeComponent extends RxModalClass implements OnInit, OnDestroy {\n  @ViewChild('chatbotDataSetForm', { static: true, read: NgForm })\n  chatbotDataSetForm: NgForm;\n\n  contextData: IPlainObject;\n  dataSet: ICognitiveTrainingDataSet;\n  localeOptions: RxSelectOption[];\n\n  chatbotDefinitionPickerOptions: IDefinitionPickerComponentOptions = {\n    label: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.name.label'),\n    definitionType: RxDefinitionPickerType.Chatbot,\n    required: true\n  };\n\n  csvFileUploadMode: number = UploaderMode.Auto;\n\n  private chatbotDefinitionName$ = new BehaviorSubject<string>('');\n\n  private chatbotDefinitions$: Observable<IChatbotDefinition[]> = this.rxChatbotDefinitionDataPageService\n    .get({\n      headers: {\n        'default-bundle-scope': ''\n      },\n      params: {\n        propertySelection: ['chatbotName', 'id', 'enableTranslation']\n      }\n    })\n    .pipe(map((dataPage) => dataPage.data as IChatbotDefinition[]));\n\n  chatbotDefinition$: Observable<IChatbotDefinition> = combineLatest([\n    this.chatbotDefinitionName$,\n    this.chatbotDefinitions$\n  ]).pipe(\n    map(\n      ([chatbotDefinitionName, chatbotDefinitions]) =>\n        find(chatbotDefinitions, { chatbotName: chatbotDefinitionName }) || null\n    ),\n    shareReplay(1)\n  );\n\n  isChatbotTranslationEnabled$: Observable<boolean> = this.chatbotDefinition$.pipe(\n    map((chatbotDefinition) => chatbotDefinition?.enableTranslation === 1)\n  );\n\n  chatbotLocaleOptions$: Observable<RxSelectOption[]> = this.chatbotDefinition$.pipe(\n    switchMap((chatbotDefinition) =>\n      chatbotDefinition\n        ? this.rxCognitiveTrainingService\n            .getChatbotLocalesById(chatbotDefinition.id)\n            .pipe(\n              map(\n                (dataPageResult) =>\n                  dataPageResult.data.map(\n                    (localeFieldIds) => localeFieldIds[RX_CHATBOT.chatbotLocales.fieldIds.locale]\n                  ) as RxSelectOption[]\n              )\n            )\n        : of([])\n    )\n  );\n\n  constructor(\n    private dockedPanelContext: DockedPanelContext,\n    private rxChatbotDefinitionDataPageService: RxChatbotDefinitionDataPageService,\n    private rxCognitiveTrainingService: RxCognitiveTrainingService,\n    private rxCognitiveTrainingUtilsService: RxCognitiveTrainingUtilsService,\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private translateService: TranslateService,\n    protected injector: Injector\n  ) {\n    super(dockedPanelContext, injector);\n    this.contextData = this.dockedPanelContext.getData().data;\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this.localeOptions = this.rxCognitiveTrainingUtilsService.getTrainingLocales(\n      RX_COGNITIVE_TRAINING.settings.trainingTypes.chatbot.value\n    );\n\n    const dataSource = this.contextData.recordInstance.getFieldValue(\n      RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource\n    );\n\n    this.dataSet = {\n      dataSetName: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName),\n      description: this.contextData.recordInstance.getFieldValue(RX_RECORD_DEFINITION.coreFieldIds.description),\n      csvFile: null,\n      chatbotLocale: [this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.locale)],\n\n      chatbotDefinitionName: this.contextData.recordInstance.getFieldValue(\n        RX_COGNITIVE_TRAINING.settings.fieldIds.chatbotName\n      ),\n\n      locale: [\n        this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetLocale) ||\n          RX_COGNITIVE_TRAINING.settings.defaultTrainingLocale\n      ],\n\n      lastSubmittedDate: this.contextData.recordInstance.getFieldValue(\n        RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastSubmitted\n      ),\n\n      status: find(RX_COGNITIVE_TRAINING.settings.trainingStatuses, {\n        value: this.contextData.recordInstance.getFieldValue(RX_RECORD_DEFINITION.coreFieldIds.status)\n      })\n    };\n\n    if (dataSource && (this.contextData.editDataSet || this.contextData.copyDataSet)) {\n      this.rxRecordInstanceService\n        .getAttachment(\n          RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName,\n          RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource,\n          this.contextData.getAttachmentRecordInstanceId\n        )\n        .subscribe((blob) => {\n          this.dataSet.csvFile = [\n            {\n              data: assign(blob, {\n                name: dataSource\n              }),\n              downloadURL: this.rxRecordInstanceService.getAttachmentDownloadUrl(\n                RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName,\n                RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource,\n                this.contextData.recordInstance.id\n              ),\n              isUploading: true\n            }\n          ];\n        });\n    }\n\n    if (this.dataSet.chatbotDefinitionName) {\n      this.chatbotDefinitionName$.next(this.dataSet.chatbotDefinitionName);\n    }\n  }\n\n  isDirty(): boolean {\n    return this.chatbotDataSetForm.dirty;\n  }\n\n  ngOnDestroy(): void {\n    this.chatbotDefinitionName$.complete();\n  }\n\n  onChatbotDefinitionNameChange(chatbotDefinitionName: string): void {\n    this.dataSet.chatbotLocale = [];\n    this.dataSet.locale = [];\n\n    this.chatbotDefinitionName$.next(chatbotDefinitionName);\n  }\n\n  optionFormatter = (opt: RxSelectOption) => opt;\n\n  onSaveClick(): void {\n    this.contextData.recordInstance.setFieldValue(\n      RX_COGNITIVE_TRAINING.settings.fieldIds.dataSourceHistory,\n      JSON.stringify({\n        resourceType: this.contextData.dataSourceType.resourceType,\n        fileName: this.dataSet.csvFile && this.dataSet.csvFile[0].data.name\n      })\n    );\n\n    this.contextData.recordInstance.setFieldProp(\n      RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource,\n      'file',\n      (!isEmpty(this.dataSet.csvFile) && this.dataSet.csvFile[0].data) || null\n    );\n\n    this.contextData.recordInstance.setFieldProp(\n      RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource,\n      'value',\n      (!isEmpty(this.dataSet.csvFile) && this.dataSet.csvFile[0].data.name) || null\n    );\n\n    this.contextData.recordInstance.setFieldValue(\n      RX_RECORD_DEFINITION.coreFieldIds.description,\n      this.dataSet.description\n    );\n\n    this.contextData.recordInstance.setFieldValue(\n      RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetLocale,\n      this.dataSet.locale[0] || null\n    );\n\n    this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastSubmitted, moment());\n\n    if (this.contextData.isNewDataSet || this.contextData.copyDataSet) {\n      this.contextData.recordInstance.setFieldValue(\n        RX_COGNITIVE_TRAINING.settings.fieldIds.bundleId,\n        this.contextData.bundleId\n      );\n\n      this.contextData.recordInstance.setFieldValue(\n        RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName,\n        this.dataSet.dataSetName\n      );\n\n      this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetID, '');\n\n      this.contextData.recordInstance.setFieldValue(\n        RX_COGNITIVE_TRAINING.settings.fieldIds.chatbotName,\n        this.dataSet.chatbotDefinitionName\n      );\n\n      this.contextData.recordInstance.setFieldValue(\n        RX_COGNITIVE_TRAINING.settings.fieldIds.locale,\n        this.dataSet.chatbotLocale[0]\n      );\n\n      this.contextData.recordInstance.setFieldValue(\n        RX_RECORD_DEFINITION.coreFieldIds.status,\n        RX_COGNITIVE_TRAINING.settings.trainingStatuses.untrained.value\n      );\n\n      this.contextData.recordInstance.setFieldValue(\n        RX_COGNITIVE_TRAINING.settings.fieldIds.trainingType,\n        RX_COGNITIVE_TRAINING.settings.trainingTypes.chatbot.value\n      );\n\n      this.rxRecordInstanceService.create(this.contextData.recordInstance).subscribe(() => {\n        this.dockedPanelContext.close('save');\n      });\n    } else if (this.contextData.editDataSet) {\n      if (\n        this.dataSet.status.value === RX_COGNITIVE_TRAINING.settings.trainingStatuses.trained.value ||\n        this.dataSet.status.value === RX_COGNITIVE_TRAINING.settings.trainingStatuses.failed.value\n      ) {\n        this.contextData.recordInstance.setFieldValue(\n          RX_RECORD_DEFINITION.coreFieldIds.status,\n          RX_COGNITIVE_TRAINING.settings.trainingStatuses.pendingRetraining.value\n        );\n      }\n\n      this.rxRecordInstanceService.save(this.contextData.recordInstance).subscribe(() => {\n        this.dockedPanelContext.close('save');\n      });\n    }\n  }\n\n  onCloseClick(): void {\n    this.dockedPanelContext.dismiss(DismissReasons.CLOSE_BTN);\n  }\n}\n","<div class=\"dp-body\">\n  <form #chatbotDataSetForm=\"ngForm\">\n    <div class=\"d-flex justify-content-between m-0 mb-4\" *ngIf=\"contextData.editDataSet\">\n      <label class=\"form-control-label\">\n        {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.date-last-submitted.label' | translate }}\n      </label>\n\n      <div>{{ dataSet.lastSubmittedDate | date: 'medium' }}</div>\n    </div>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"data-set-name\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.data-set-name.label' | translate }}\"\n      rx-id=\"data-set-name-field\"\n      required\n      [(ngModel)]=\"dataSet.dataSetName\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"description\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.description.label' | translate }}\"\n      rx-id=\"description-field\"\n      required\n      [(ngModel)]=\"dataSet.description\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-uploader\n      class=\"form-group d-block\"\n      name=\"csv-file\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.csv-file.label' | translate }}\"\n      rx-id=\"csv-file-field\"\n      required\n      reusable=\"true\"\n      [uploadMode]=\"csvFileUploadMode\"\n      [allowedTypes]=\"['csv']\"\n      [(ngModel)]=\"dataSet.csvFile\"\n    >\n    </adapt-rx-uploader>\n\n    <rx-definition-picker\n      class=\"form-group d-block\"\n      name=\"chatbot-name\"\n      rx-id=\"chatbot-name-field\"\n      required\n      [options]=\"chatbotDefinitionPickerOptions\"\n      [(ngModel)]=\"dataSet.chatbotDefinitionName\"\n      (ngModelChange)=\"onChatbotDefinitionNameChange($event)\"\n    >\n    </rx-definition-picker>\n\n    <div *ngIf=\"chatbotDefinition$ | async\">\n      <adapt-rx-select\n        class=\"form-group d-block\"\n        name=\"chatbot-locale\"\n        label=\"{{\n          'com.bmc.arsys.rx.client.admin.cognitive-training.chatbot-data-set-blade.chatbot-locale.label' | translate\n        }}\"\n        rx-id=\"chatbot-locale-field\"\n        required\n        [options]=\"(chatbotLocaleOptions$ | async) || []\"\n        [optionFormatter]=\"optionFormatter\"\n        [(ngModel)]=\"dataSet.chatbotLocale\"\n      >\n      </adapt-rx-select>\n\n      <adapt-rx-select\n        class=\"form-group d-block\"\n        *ngIf=\"isChatbotTranslationEnabled$ | async\"\n        name=\"locale\"\n        label=\"{{\n          'com.bmc.arsys.rx.client.admin.cognitive-training.chatbot-data-set-blade.data-set-locale.label' | translate\n        }}\"\n        rx-id=\"locale-field\"\n        required\n        [options]=\"localeOptions\"\n        [optionFormatter]=\"optionFormatter\"\n        [(ngModel)]=\"dataSet.locale\"\n      >\n      </adapt-rx-select>\n    </div>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button\n    class=\"mr-2\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    adapt-button\n    btn-type=\"primary\"\n    [disabled]=\"chatbotDataSetForm.pristine || chatbotDataSetForm.invalid\"\n    (click)=\"onSaveClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button class=\"mr-2\" type=\"button\" rx-id=\"close-button\" adapt-button btn-type=\"secondary\" (click)=\"onCloseClick()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n"]}