{"version":3,"file":"cognitive-service.component.js","sourceRoot":"","sources":["../../../../../../../libs/platform/admin/components/cognitive-service/cognitive-service.component.ts","../../../../../../../libs/platform/admin/components/cognitive-service/cognitive-service.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, ViewChild } from '@angular/core';\nimport { RxSelectOption } from '@bmc-ux/adapt-angular';\nimport {\n  IUserOverlayGroupDescriptorChildren,\n  RX_OVERLAY,\n  RxCurrentUserService,\n  RxOverlayService,\n  RxSystemConfigurationService\n} from '@helix/platform/shared/api';\nimport { RxModalService } from '@helix/platform/ui-kit';\nimport { BaseViewComponent } from '@helix/platform/view/runtime';\nimport { TranslateService } from '@ngx-translate/core';\nimport { noop, reject } from 'lodash';\nimport { RX_COGNITIVE_SERVICE } from './cognitive-service.constant';\nimport { RxCognitiveServiceService } from './cognitive-service.service';\nimport { CognitiveServiceAdministrationCredentialsComponent } from './components/administration-credentials/cognitive-service-administration-credentials.component';\nimport { CognitiveServiceChatbotComponent } from './components/chatbot/cognitive-service-chatbot.component';\nimport { CognitiveServiceConnectionsComponent } from './components/connections/cognitive-service-connections.component';\nimport { CognitiveServiceOnboardComponent } from './components/onboard/cognitive-service-onboard.component';\nimport { CognitiveServiceRegionsComponent } from './components/regions/cognitive-service-regions.component';\nimport { CognitiveServiceSummarizationComponent } from './components/summarization/cognitive-service-summarization.component';\nimport { CognitiveServiceToneAnalyzerComponent } from './components/tone-analyzer/cognitive-service-tone-analyzer.component';\n\n@Component({\n  selector: 'rx-admin-cognitive-service',\n  templateUrl: './cognitive-service.component.html',\n  styleUrls: ['./cognitive-service.component.scss']\n})\nexport class CognitiveServiceAdminComponent extends BaseViewComponent implements OnInit {\n  @ViewChild('selectedConfiguration')\n  selectedConfiguration:\n    | CognitiveServiceAdministrationCredentialsComponent\n    | CognitiveServiceConnectionsComponent\n    | CognitiveServiceChatbotComponent\n    | CognitiveServiceRegionsComponent\n    | CognitiveServiceSummarizationComponent\n    | CognitiveServiceToneAnalyzerComponent;\n\n  cognitiveServices: RxSelectOption[] = RX_COGNITIVE_SERVICE.cognitiveServicesList.map((service) => ({\n    ...service,\n    name: this.translateService.instant(service.name)\n  }));\n\n  selectedService: [RxSelectOption] = [this.cognitiveServices[2]];\n  supportedCognitiveServices: RxSelectOption[] = [];\n  isAdministrator: boolean = this.rxCurrentUserService.isAdministrator();\n  currentOverlayContext: IUserOverlayGroupDescriptorChildren = this.rxOverlayService.getCurrentOverlayContext();\n  isNativeClassificationProvider: boolean;\n\n  constructor(\n    private rxModalService: RxModalService,\n    private rxCognitiveServiceService: RxCognitiveServiceService,\n    private rxCurrentUserService: RxCurrentUserService,\n    private rxOverlayService: RxOverlayService,\n    private rxSystemConfigurationService: RxSystemConfigurationService,\n    public translateService: TranslateService\n  ) {\n    super();\n  }\n\n  ngOnInit() {\n    this.notifyPropertyChanged('api', {\n      isDirty: () => this.selectedConfiguration.isFormDirty()\n    });\n\n    this.rxSystemConfigurationService\n      .getConfiguration(RX_COGNITIVE_SERVICE.connections.systemSettingKeys.classificationServiceProvider)\n      .subscribe((settingsData) => {\n        let cognitiveServices = this.cognitiveServices;\n\n        if (RX_COGNITIVE_SERVICE.nativeProvider === settingsData.value) {\n          this.isNativeClassificationProvider = true;\n\n          cognitiveServices = reject(cognitiveServices, {\n            id: RX_COGNITIVE_SERVICE.cognitiveServicesList[1].id\n          });\n        }\n\n        this.supportedCognitiveServices = cognitiveServices;\n      });\n  }\n\n  optionFormatter(option: RxSelectOption): string {\n    return option.name;\n  }\n\n  getSelectedServiceId(): string {\n    return this.selectedService[0].id;\n  }\n\n  isOwnCognitiveProviderButtonVisible(): boolean {\n    return (\n      this.isAdministrator &&\n      this.currentOverlayContext.overlayGroupId !== RX_OVERLAY.overlayGroupIds.base &&\n      !this.currentOverlayContext.isShared\n    );\n  }\n\n  openOnboardServicesPanel(): void {\n    this.rxModalService\n      .openDockedPanel({\n        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-service.onboard-services.label'),\n        content: CognitiveServiceOnboardComponent,\n        size: 'lg'\n      })\n      .catch(noop);\n  }\n}\n","<rx-admin-settings header=\" {{ 'com.bmc.arsys.rx.client.admin.cognitive-service.header.title' | translate }} \">\n  <div class=\"mb-4 d-flex align-items-baseline\" *ngIf=\"isOwnCognitiveProviderButtonVisible()\">\n    <adapt-button\n      class=\"text-truncate\"\n      rx-id=\"onboard-services-button\"\n      btn-type=\"secondary\"\n      (click)=\"openOnboardServicesPanel()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.admin.cognitive-service-component.button.title' | translate }}\n    </adapt-button>\n\n    <adapt-icon\n      name=\"question_circle_o\"\n      class=\"ml-2\"\n      placement=\"bottom\"\n      maxWidth=\"400\"\n      [adaptPopover]=\"'com.bmc.arsys.rx.client.admin.cognitive-service-component.tooltip' | translate\"\n    >\n    </adapt-icon>\n  </div>\n\n  <div class=\"mb-4 align-items-end\">\n    <adapt-rx-select\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-service.configure.label' | translate }}\"\n      [options]=\"supportedCognitiveServices\"\n      [(ngModel)]=\"selectedService\"\n      [optionFormatter]=\"optionFormatter\"\n    >\n    </adapt-rx-select>\n  </div>\n\n  <div class=\"row pb-4\">\n    <div [ngSwitch]=\"getSelectedServiceId()\" class=\"col-12\">\n      <rx-cognitive-service-chatbot\n        [isAdministrator]=\"isAdministrator\"\n        [currentOverlayContext]=\"currentOverlayContext\"\n        *ngSwitchCase=\"cognitiveServices[0].id\"\n        #selectedConfiguration\n      >\n      </rx-cognitive-service-chatbot>\n\n      <rx-cognitive-service-administration-credentials\n        [isAdministrator]=\"isAdministrator\"\n        [currentOverlayContext]=\"currentOverlayContext\"\n        *ngSwitchCase=\"cognitiveServices[1].id\"\n        #selectedConfiguration\n      ></rx-cognitive-service-administration-credentials>\n\n      <rx-cognitive-service-connections\n        [isAdministrator]=\"isAdministrator\"\n        [currentOverlayContext]=\"currentOverlayContext\"\n        [isNativeClassificationProvider]=\"isNativeClassificationProvider\"\n        *ngSwitchCase=\"cognitiveServices[2].id\"\n        #selectedConfiguration\n      ></rx-cognitive-service-connections>\n\n      <rx-cognitive-service-summarization\n        [isAdministrator]=\"isAdministrator\"\n        [currentOverlayContext]=\"currentOverlayContext\"\n        *ngSwitchCase=\"cognitiveServices[3].id\"\n        #selectedConfiguration\n      ></rx-cognitive-service-summarization>\n\n      <rx-cognitive-service-regions\n        [isAdministrator]=\"isAdministrator\"\n        [currentOverlayContext]=\"currentOverlayContext\"\n        *ngSwitchCase=\"cognitiveServices[4].id\"\n        #selectedConfiguration\n      ></rx-cognitive-service-regions>\n\n      <rx-cognitive-service-tone-analyzer\n        [isAdministrator]=\"isAdministrator\"\n        [currentOverlayContext]=\"currentOverlayContext\"\n        *ngSwitchCase=\"cognitiveServices[5].id\"\n        #selectedConfiguration\n      ></rx-cognitive-service-tone-analyzer>\n    </div>\n  </div>\n</rx-admin-settings>\n"]}