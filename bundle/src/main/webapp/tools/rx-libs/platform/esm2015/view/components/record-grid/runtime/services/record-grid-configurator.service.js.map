{"version":3,"file":"record-grid-configurator.service.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/record-grid/runtime/services/record-grid-configurator.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IRecordDefinition, RX_RECORD_DEFINITION, RxFieldDefinitionService } from '@helix/platform/record/api';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport { RxError, RxGuidService } from '@helix/platform/utils';\nimport {\n  IViewInputParams,\n  OpenViewActionLaunchBehavior,\n  OpenViewActionType,\n  RX_VIEW_ACTION\n} from '@helix/platform/view/api';\nimport { TranslateService } from '@ngx-translate/core';\nimport { defaults, every, has, isUndefined, reduce } from 'lodash';\nimport { forkJoin, Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { RxRecordGridUtilsService } from '../../common/services/record-grid-utils.service';\nimport { RX_RECORD_GRID } from '../../record-grid.constant';\nimport { IColumnSortInfo, IRecordGridColumn, IRecordGridColumnWithMetadata } from '../types/record-grid-column.types';\nimport { IRecordGridConfig } from '../types/record-grid-config.interface';\nimport { RxRecordGridConfigUtilsService } from './record-grid-config-utils.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordGridConfiguratorService {\n  private allowedOpenViewActionExpressionsForHrefRegex: RegExp;\n\n  constructor(\n    private rxGuidService: RxGuidService,\n    private rxFieldDefinitionService: RxFieldDefinitionService,\n    private rxRecordGridConfigUtilsService: RxRecordGridConfigUtilsService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private translateService: TranslateService\n  ) {}\n\n  getGridConfig(rxConfiguration: IRecordGridConfig): IRecordGridConfig {\n    const config = defaults(this.rxRecordGridConfigUtilsService.configDeepClone(rxConfiguration), {\n      associatedRecordId: null,\n      associatedRoleName: null,\n      enableColumnSelection: true,\n      enableFiltering: true,\n      expandable: false,\n      useExternalFiltering: true,\n      enableRowSelection: RX_RECORD_GRID.selectionTypes.multiple,\n      filterExpression: null,\n      filters: RX_RECORD_GRID.defaultFilter,\n      filterTagsLimit: 3,\n      recordIdField: RX_RECORD_DEFINITION.coreFieldIds.id.toString(),\n      emptyStateLabelText: this.translateService.instant(\n        'com.bmc.arsys.rx.client.empty-state.no-items-to-display.label'\n      ),\n      emptyStateWithFilterLabelText: this.translateService.instant(\n        'com.bmc.arsys.rx.client.empty-state.no-items-to-display.label'\n      ),\n      searchFieldPlaceholderText: this.translateService.instant('com.bmc.arsys.rx.client.common.search.label'),\n      styles: ''\n    } as IRecordGridConfig);\n\n    if (!config.recordDefinitionName) {\n      if (!rxConfiguration.getRecordDefinition) {\n        throwError(new RxError('getRecordDefinition function must be defined if recordDefinitionName is not set.'));\n      }\n      if (!rxConfiguration.getData) {\n        throwError(new RxError('getData function must be defined if recordDefinitionName is not set.'));\n      }\n    }\n\n    config.enableFiltering = Boolean(config.enableFiltering);\n    config.cardLayoutWidth = parseFloat(config.cardLayoutWidth as string) || null;\n\n    return config;\n  }\n\n  getColumnsWithMetadata(\n    recordGridGuid: string,\n    columns: IRecordGridColumn[],\n    recordDefinition: IRecordDefinition\n  ): Observable<IRecordGridColumnWithMetadata[]> {\n    const columnsClone = this.rxRecordGridConfigUtilsService.columnsDeepClone(columns);\n\n    this.allowedOpenViewActionExpressionsForHrefRegex = new RegExp(\n      `^\\\\$\\\\{view\\\\.components\\\\.${recordGridGuid}\\\\.(clickableRow|recordDefinition)\\\\.|^\\\\$\\\\{view\\\\.inputParams\\\\.`\n    );\n\n    const columnsDefinitions$ = columnsClone.map((column) => {\n      return this.rxRecordGridUtilsService.getFieldDefinition(column.fieldId, recordDefinition).pipe(\n        map((fieldDefinition) => {\n          let filterType = fieldDefinition.resourceType\n            ? this.getFieldDefinitionResourceTypeShortName(fieldDefinition.resourceType)\n            : null;\n\n          if (filterType === RX_RECORD_DEFINITION.dataTypes.attachment.shortName) {\n            filterType = RX_RECORD_DEFINITION.dataTypes.character.shortName;\n          }\n\n          const filterable =\n            this.rxRecordGridConfigUtilsService.getBooleanValue(column.filterable) || isUndefined(column.filterable);\n\n          const searchable = has(column, 'searchable')\n            ? this.rxRecordGridConfigUtilsService.getBooleanValue(column.searchable)\n            : filterable && this.rxRecordGridUtilsService.isSearchable(fieldDefinition, recordDefinition);\n\n          const columnWithMetadata: IRecordGridColumnWithMetadata = {\n            ...column,\n            clickable: this.rxRecordGridConfigUtilsService.getBooleanValue(column.clickable),\n            filterable,\n            sortable:\n              (this.rxRecordGridConfigUtilsService.parseConfigString(column.sortable) as IColumnSortInfo | boolean) ||\n              isUndefined(column.sortable),\n            visible: this.rxRecordGridConfigUtilsService.getBooleanValue(column.visible) || isUndefined(column.visible),\n            searchable,\n            fieldDefinition,\n            filterType,\n            clickableWithHref: this.isColumnClickableWithHref(column),\n            title: column.title?.trim(),\n            fallbackTitle: `[${fieldDefinition.name}]`\n          };\n\n          return columnWithMetadata;\n        })\n      );\n    });\n\n    return forkJoin(columnsDefinitions$);\n  }\n\n  getSelectionFieldOptionLabelsByFieldId(\n    columns: IRecordGridColumn[],\n    recordDefinition: IRecordDefinition\n  ): IPlainObject {\n    return reduce(\n      columns,\n      (result, column) => {\n        const fieldDefinition = recordDefinition.fieldDefinitionsById[column.fieldId];\n\n        if (fieldDefinition.resourceType === RX_RECORD_DEFINITION.dataTypes.selection.resourceType) {\n          result[column.fieldId] = fieldDefinition.optionLabelsById;\n        }\n\n        return result;\n      },\n      {}\n    );\n  }\n\n  private getFieldDefinitionResourceTypeShortName(resourceType) {\n    return resourceType\n      .split('.')\n      .pop()\n      .replace(/fieldDefinition/i, '');\n  }\n\n  private isColumnClickableWithHref(column: IRecordGridColumn): boolean {\n    let clickableWithHref = false;\n\n    if (this.rxRecordGridConfigUtilsService.getBooleanValue(column.clickable)) {\n      clickableWithHref = column.actions.every((action) => {\n        return (\n          (action.name === RX_VIEW_ACTION.viewActionNames.launchUrl ||\n            (action.name === RX_VIEW_ACTION.viewActionNames.openView &&\n              action.presentation.launchBehavior === OpenViewActionLaunchBehavior.SameWindow &&\n              action.presentation.type === OpenViewActionType.FullWidth &&\n              this.canViewParamsBeEvaluatedForHref(action.viewParams))) &&\n          this.canExpressionBeEvaluatedForHref(action.$condition$)\n        );\n      });\n    }\n\n    return clickableWithHref;\n  }\n\n  private canViewParamsBeEvaluatedForHref(viewParams: IViewInputParams): boolean {\n    return every(viewParams, (viewParamValue) => this.canExpressionBeEvaluatedForHref(viewParamValue));\n  }\n\n  private canExpressionBeEvaluatedForHref(expression: string): boolean {\n    return every(expression?.match(/\\$\\{[^{]*\\}/g), (expressionToken) =>\n      this.allowedOpenViewActionExpressionsForHrefRegex.test(expressionToken)\n    );\n  }\n}\n"]}