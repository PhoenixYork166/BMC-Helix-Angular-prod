{"version":3,"file":"process-action.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/process/elements/process-action/process-action.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { chain, isArray, isEmpty, reduce, transform } from 'lodash';\n\nimport { IValidationIssue, ValidationIssueType } from '@helix/platform/ui-kit';\nimport {\n  IAssignmentExpression,\n  IDataDictionary,\n  IDataDictionaryBranch,\n  IExpressionConfigurator,\n  IFormBuilderConfig,\n  IFormControlBuilderConfig,\n  IFormWidgetBuilderConfig,\n  IPlainObject,\n  IProcessActionElementModel,\n  IServiceParameter,\n  RxActionTypeUtilsService,\n  RxServerActionService,\n  Tooltip\n} from '@helix/platform/shared/api';\nimport {\n  AssignmentExpressionListFormControlComponent,\n  AssignmentExpressionListTargetFieldType,\n  IAssignmentExpressionListFormControlOptions,\n  ILabelFormControlOptions,\n  ISelectFormControlOptions,\n  ITextareaFormControlOptions,\n  ITextFormControlOptions,\n  LabelFormControlComponent,\n  SelectFormControlComponent,\n  TextareaFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  IServiceTaskDefinition,\n  RX_PROCESS_DEFINITION,\n  RxProcessDataDictionaryService\n} from '@helix/platform/process/api';\n\nimport { RxExpressionInputMapInspectorWidgetComponent } from '../shared/components/expression-input-map-inspector-widget/expression-input-map-inspector-widget.component';\nimport { IOutputDataDictionaryBranch, IProcessActionElementService } from './process-action.types';\nimport { RxProcessActionExpressionConfigurator } from './process-action-expression-configurator.class';\n\ndeclare var joint: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxProcessActionService extends RxServerActionService implements IProcessActionElementService {\n  private rxActionTypeUtilsService: RxActionTypeUtilsService;\n  private rxProcessDataDictionaryService: RxProcessDataDictionaryService;\n\n  private expressionConfigurator: IExpressionConfigurator;\n\n  constructor(protected injector: Injector) {\n    super(injector);\n\n    this.rxActionTypeUtilsService = injector.get(RxActionTypeUtilsService);\n    this.rxProcessDataDictionaryService = injector.get(RxProcessDataDictionaryService);\n  }\n\n  // PUBLIC\n  // TODO-VS: eliminate Partial (new IProcessDefinitionLight to eliminate overlayDescriptor form IDefinitionLight?)\n  getDefinitionFromModel(model: IProcessActionElementModel): Partial<IServiceTaskDefinition> {\n    return {\n      actionTypeName: model.actionTypeName,\n      description: model.description,\n      guid: model.guid,\n      inputMap: this.getInputMapFromModel(model),\n      multiInstanceLoopDefinition: model.multiInstanceLoopDefinition,\n      name: model.name,\n      outputMap: model.outputMap,\n      resourceType: model.resourceType,\n      runAsUser: RX_PROCESS_DEFINITION.runAsUser[model.runAsUser].definitionValue\n    };\n  }\n\n  getExpressionConfigurator(): IExpressionConfigurator {\n    return (this.expressionConfigurator ??= new (this.getExpressionConfiguratorClass())(this.injector));\n  }\n\n  getInspectorConfig(model: IProcessActionElementModel, options: IPlainObject): IFormBuilderConfig {\n    const generalConfigControls: IFormControlBuilderConfig[] = [\n      {\n        name: 'actionTypeName',\n        component: TextFormControlComponent,\n        isDisabled: true,\n        options: {\n          label: this.translateService.instant(\n            'com.bmc.arsys.rx.client.designer.server-action-properties.action-type-name.label'\n          )\n        } as ITextFormControlOptions\n      },\n      {\n        name: 'label',\n        component: TextFormControlComponent,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.label.label'),\n          required: true\n        } as ITextFormControlOptions\n      },\n      {\n        name: 'description',\n        component: TextareaFormControlComponent,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.description.label'),\n          rows: 3\n        } as ITextareaFormControlOptions\n      },\n      {\n        name: 'guid',\n        component: TextFormControlComponent,\n        isDisabled: true,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.id.label')\n        } as ITextareaFormControlOptions\n      },\n      {\n        name: 'runAsUser',\n        component: SelectFormControlComponent,\n        options: {\n          label: this.translateService.instant(\n            'com.bmc.arsys.rx.client.process-designer.elements.process.run-as.label'\n          ),\n          tooltip: new Tooltip(\n            this.translateService.instant('com.bmc.arsys.rx.client.process-designer.elements.inspector.run-as.tooltip')\n          ),\n          options: [\n            {\n              name: this.translateService.instant('com.bmc.arsys.rx.client.common.administrator.label'),\n              id: RX_PROCESS_DEFINITION.runAsUser.administrator.modelValue\n            },\n            {\n              name: this.translateService.instant('com.bmc.arsys.rx.client.common.current-user.label'),\n              id: RX_PROCESS_DEFINITION.runAsUser.currentUser.modelValue\n            },\n            {\n              name: this.translateService.instant(\n                'com.bmc.arsys.rx.client.process-designer.process-action.inherit-from-process.label'\n              ),\n              id: RX_PROCESS_DEFINITION.runAsUser.inheritFromProcess.modelValue\n            }\n          ]\n        } as ISelectFormControlOptions\n      }\n    ];\n\n    if (model.isDeprecated) {\n      generalConfigControls.unshift({\n        name: 'isDeprecated',\n        component: LabelFormControlComponent,\n        options: {\n          label: this.translateService.instant(\n            'com.bmc.arsys.rx.client.designer.server-action-properties.deprecated.label',\n            {\n              definitionType: this.translateService.instant('com.bmc.arsys.rx.client.definition-type.process.label')\n            }\n          )\n        } as ILabelFormControlOptions\n      });\n    }\n\n    return [\n      {\n        label: this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),\n        controls: generalConfigControls\n      },\n      {\n        label: this.translateService.instant('com.bmc.arsys.rx.client.designer.element-properties.input-map.label'),\n        controls: [this.getInputMapInspectorWidgetConfig(model)]\n      },\n      {\n        label: this.translateService.instant('com.bmc.arsys.rx.client.designer.element-properties.output-map.label'),\n        controls: [\n          {\n            name: 'outputMap',\n            component: AssignmentExpressionListFormControlComponent,\n            options: {\n              confirmationMessage:\n                'com.bmc.arsys.rx.client.designer.inspector.delete-output-map-item-confirmation.message',\n              sourceFieldOptions: {\n                expressionConfigurator: this.getExpressionConfigurator(),\n                options: {\n                  dataDictionary$: this.getExpressionConfigurator().getDataDictionary('outputMap'),\n                  operators: this.getExpressionConfigurator().getOperators('outputMap')\n                }\n              },\n              targetFieldOptions: {\n                type: AssignmentExpressionListTargetFieldType.Select,\n                options: {\n                  options: chain([\n                    ...options.processDefinitionModel.inputParams,\n                    ...options.processDefinitionModel.outputParams,\n                    ...options.processDefinitionModel.localVariables\n                  ])\n                    .map('name')\n                    .uniq()\n                    .map((name) => ({\n                      name,\n                      id: name\n                    }))\n                    .value()\n                }\n              }\n            } as IAssignmentExpressionListFormControlOptions\n          }\n        ]\n      }\n    ];\n  }\n\n  getModelFromDefinition(definition: IServiceTaskDefinition): IProcessActionElementModel {\n    const actionType = super.getActionTypeByName(definition.actionTypeName);\n\n    const name =\n      actionType.displayName || this.rxActionTypeUtilsService.prettifyActionTypeName(actionType.actionTypeName);\n\n    return definition.guid\n      ? {\n          actionTypeName: definition.actionTypeName,\n          deprecatedText: actionType.deprecatedText,\n          description: definition.description,\n          guid: definition.guid,\n          inputMap: this.getInputMapFromDefinition(definition),\n          isDeprecated: actionType.isDeprecated,\n          label: definition.name,\n          multiInstanceLoopDefinition: definition.multiInstanceLoopDefinition,\n          name: definition.name,\n          outputMap: definition.outputMap,\n          resourceType: definition.resourceType,\n          runAsUser: this.getRunAsUserFromDefinition(definition),\n          type: this.getElementType(actionType.actionTypeName)\n        }\n      : {\n          actionTypeName: actionType.actionTypeName,\n          deprecatedText: actionType.deprecatedText,\n          description: '',\n          guid: '',\n          inputMap: {},\n          isDeprecated: actionType.isDeprecated,\n          label: name,\n          multiInstanceLoopDefinition: null,\n          name,\n          outputMap: [],\n          resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.processAction,\n          runAsUser: RX_PROCESS_DEFINITION.runAsUser.inheritFromProcess.modelValue,\n          type: this.getElementType(actionType.actionTypeName)\n        };\n  }\n\n  // TODO-VS: update types\n  getShape(options: IPlainObject): any {\n    const ProcessActionClass = this.getClass();\n    const classConfig = super.getClassConfig(options);\n\n    return new ProcessActionClass(classConfig);\n  }\n\n  setCommonDataDictionaryBranch(guid: string, dataDictionaryBranch: Observable<IDataDictionaryBranch>): void {\n    this.rxProcessDataDictionaryService.setCommonActivitiesDataDictionaryBranch(guid, dataDictionaryBranch);\n  }\n\n  // TODO-VS: update types\n  validate(model: IProcessActionElementModel, availableCells: any): Observable<IValidationIssue[]> {\n    return super.validateServerAction(model, availableCells).pipe(\n      map((serverActionValidationIssues) => {\n        const validationIssues = [...serverActionValidationIssues];\n\n        const inboundLinks = availableCells.filter((cell) => cell.prop('targetNode') === model.guid);\n        const outboundLinks = availableCells.filter((cell) => cell.prop('sourceNode') === model.guid);\n\n        if (isEmpty(inboundLinks)) {\n          validationIssues.push({\n            type: ValidationIssueType.Warning,\n            description: this.translateService.instant(\n              'com.bmc.arsys.rx.client.designer.validation.is-required.message',\n              {\n                propertyName: this.translateService.instant(\n                  'com.bmc.arsys.rx.client.process-designer.inbound-sequence-flow.label'\n                )\n              }\n            ),\n            data: {\n              guid: model.guid,\n              inspectorTabIndex: 1\n            }\n          });\n        }\n\n        if (outboundLinks.length !== 1) {\n          validationIssues.push({\n            type: ValidationIssueType.Warning,\n            description: this.translateService.instant(\n              'com.bmc.arsys.rx.client.designer.validation.is-required.message',\n              {\n                propertyName: this.translateService.instant(\n                  'com.bmc.arsys.rx.client.process-designer.outbound-sequence-flow.label'\n                )\n              }\n            ),\n            data: {\n              guid: model.guid,\n              inspectorTabIndex: 1\n            }\n          });\n        }\n\n        return validationIssues;\n      })\n    );\n  }\n\n  // OVERRIDES\n  buildDataDictionaryBranch(model: IProcessActionElementModel): Observable<IDataDictionaryBranch> {\n    const outputParams = super.getActionTypeByName(model.actionTypeName).outputParams;\n\n    return isEmpty(outputParams)\n      ? of(null)\n      : this.buildOutputDataDictionaryBranch(model, outputParams).pipe(\n          map((outputDataDictionaryBranch) => {\n            const isArrayOrListDataType = this.rxActionTypeUtilsService.isActionParameterArrayOrList(outputParams[0]);\n\n            if (isArray(outputDataDictionaryBranch)) {\n              let children = outputDataDictionaryBranch;\n\n              if (isEmpty(outputDataDictionaryBranch)) {\n                children = this.buildDefaultOutputDataDictionaryBranch(outputParams[0].dataTypeDetail);\n              }\n\n              return {\n                label: model.label,\n                icon: 'd-icon-arrow_chart',\n                children: [\n                  {\n                    label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.output.label'),\n                    icon: 'd-icon-arrow_chart',\n                    expression: '${activityResults.' + model.guid + '.output' + (isArrayOrListDataType ? '[0]}' : '}'),\n                    children: this.updateOutputDataDictionaryBranch(children, model.guid, isArrayOrListDataType)\n                  }\n                ]\n              };\n            } else {\n              return null;\n            }\n          })\n        );\n  }\n\n  buildOutputDataDictionaryBranch(\n    model: IProcessActionElementModel,\n    outputParams?: IServiceParameter[]\n  ): Observable<IOutputDataDictionaryBranch[]> {\n    return of([]);\n  }\n\n  getClass(): any {\n    return joint.shapes.rx.ProcessAction;\n  }\n\n  getDefinitionInputMapParam(inputParamName: string, inputParamValue: string): IAssignmentExpression {\n    return {\n      assignTarget: inputParamName,\n      expression: inputParamValue\n    };\n  }\n\n  getElementType(actionTypeName: string): string {\n    return RX_PROCESS_DEFINITION.processElementTypes.processAction;\n  }\n\n  getExpressionConfiguratorClass(): any {\n    return RxProcessActionExpressionConfigurator;\n  }\n\n  getInputMapInspectorWidgetConfig(model: IProcessActionElementModel): IFormWidgetBuilderConfig {\n    const actionType = this.getActionTypeByName(model.actionTypeName);\n\n    return {\n      component: RxExpressionInputMapInspectorWidgetComponent,\n      options: {\n        expressionConfigurator: this.getExpressionConfigurator(),\n        expressionInputMapInspectorOptions: actionType.inputParams.map((inputParam) => ({\n          name: inputParam.name,\n          label: inputParam.displayName || this.rxStringService.prettify(inputParam.name)\n        }))\n      }\n    };\n  }\n\n  getInputMapFromDefinition(definition: IServiceTaskDefinition): IPlainObject {\n    const actionType = super.getActionTypeByName(definition.actionTypeName);\n\n    const initialInputMap = actionType\n      ? transform(actionType.inputParams, (inputMap, inputParam) => (inputMap[inputParam.name] = ''), {})\n      : {};\n\n    return transform(\n      definition?.inputMap || [],\n      (inputMap, inputMapField) => (inputMap[inputMapField.assignTarget] = inputMapField.expression),\n      initialInputMap\n    );\n  }\n\n  // HELPERS\n  private buildDefaultOutputDataDictionaryBranch(\n    outputParams: IServiceParameter[],\n    outputPropertyPathOpener?: string\n  ): IOutputDataDictionaryBranch[] {\n    return isEmpty(outputParams)\n      ? null\n      : outputParams.map((outputParam) => {\n          const isArrayOrListDataType = this.rxActionTypeUtilsService.isActionParameterArrayOrList(outputParam);\n\n          const outputPropertyPath =\n            (outputPropertyPathOpener ? outputPropertyPathOpener + '.' + outputParam.name : outputParam.name) +\n            (isArrayOrListDataType ? '[0]' : '');\n\n          return {\n            label: this.rxStringService.prettify(outputParam.name),\n            outputPropertyPath: outputPropertyPath,\n            children: this.buildDefaultOutputDataDictionaryBranch(outputParam.dataTypeDetail, outputPropertyPath)\n          };\n        });\n  }\n\n  private getInputMapFromModel(model: IProcessActionElementModel): IAssignmentExpression[] {\n    return reduce(\n      model.inputMap,\n      (inputMap, propertyValue, propertyName) => {\n        let inputMapParam;\n\n        if (!isEmpty(propertyValue)) {\n          inputMapParam = this.getDefinitionInputMapParam(propertyName, propertyValue);\n\n          if (inputMapParam) {\n            inputMap.push(inputMapParam);\n          }\n        }\n\n        return inputMap;\n      },\n      []\n    );\n  }\n\n  private getOutputDataDictionaryExpression(\n    flowElementGuid: string,\n    isArrayOrListDataType: boolean,\n    outputPropertyPath: string | number\n  ): string {\n    return (\n      '${activityResults.' +\n      flowElementGuid +\n      '.output' +\n      (isArrayOrListDataType ? '[0].' : '.') +\n      outputPropertyPath +\n      '}'\n    );\n  }\n\n  private getRunAsUserFromDefinition(definition: IServiceTaskDefinition): string {\n    let runAsUser: string;\n\n    switch (definition.runAsUser) {\n      case true: {\n        runAsUser = RX_PROCESS_DEFINITION.runAsUser.currentUser.modelValue;\n\n        break;\n      }\n\n      case false: {\n        runAsUser = RX_PROCESS_DEFINITION.runAsUser.administrator.modelValue;\n\n        break;\n      }\n\n      default: {\n        runAsUser = RX_PROCESS_DEFINITION.runAsUser.inheritFromProcess.modelValue;\n\n        break;\n      }\n    }\n\n    return runAsUser;\n  }\n\n  private updateOutputDataDictionaryBranch(\n    children: IOutputDataDictionaryBranch[],\n    flowElementGuid: string,\n    isArrayOrListDataType: boolean\n  ): IDataDictionary {\n    return isEmpty(children)\n      ? null\n      : children.map((child) => {\n          let expression = child.expression;\n\n          if (child.outputPropertyPath) {\n            if (isArray(child.outputPropertyPath)) {\n              expression = child.outputPropertyPath.map((outputPropertyPath) =>\n                this.getOutputDataDictionaryExpression(flowElementGuid, isArrayOrListDataType, outputPropertyPath)\n              );\n            } else {\n              expression = this.getOutputDataDictionaryExpression(\n                flowElementGuid,\n                isArrayOrListDataType,\n                child.outputPropertyPath\n              );\n            }\n          }\n\n          return {\n            label: child.label,\n            icon: expression ? 'd-icon-arrow_chart' : null,\n            expression,\n            children: this.updateOutputDataDictionaryBranch(child.children, flowElementGuid, isArrayOrListDataType)\n          };\n        });\n  }\n}\n"]}