{"version":3,"file":"expression-editor.component.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/components/expression-editor/expression-editor.component.ts","../../../../../../../libs/platform/shared/components/expression-editor/expression-editor.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Injector, OnInit, ViewChild } from '@angular/core';\nimport { NgModel } from '@angular/forms';\nimport { ActiveModalRef, AdaptTreeNode, DismissReasons } from '@bmc-ux/adapt-angular';\nimport {\n  IDataDictionary,\n  IExpressionConfigurator,\n  IExpressionOperatorRow,\n  RxExpressionParserService\n} from '@helix/platform/shared/api';\nimport { RxModalClass } from '@helix/platform/ui-kit';\nimport { RxError } from '@helix/platform/utils';\nimport { TranslateService } from '@ngx-translate/core';\nimport { findIndex, sortBy } from 'lodash';\nimport { concat, EMPTY, Observable, of, throwError } from 'rxjs';\nimport { concatMap, finalize, switchMap, switchMapTo, take, tap } from 'rxjs/operators';\nimport { IExpressionEditorModalConfig } from './expression-editor-modal-config.interface';\nimport { IExpressionEditorLegendItem, IExpressionEditorProperty } from './expression-editor.interfaces';\nimport { RichExpressionEditorComponent } from './rich-expression-editor/rich-expression-editor.component';\n\n@Component({\n  selector: 'rx-expression-editor',\n  templateUrl: './expression-editor.component.html',\n  styleUrls: ['./expression-editor.component.scss']\n})\nexport class ExpressionEditorComponent extends RxModalClass implements OnInit {\n  get expression(): string {\n    return this.currentProperty && this.currentProperty.value;\n  }\n\n  set expression(value: string) {\n    if (this.currentProperty) {\n      this.currentProperty.value = value;\n    }\n  }\n\n  currentProperty: IExpressionEditorProperty;\n  dataDictionary: IDataDictionary;\n  legend: IExpressionEditorLegendItem[];\n  operatorRows: IExpressionOperatorRow[];\n\n  private isPropertyContextReady = false;\n  private config: IExpressionEditorModalConfig = this.activeModalRef.getData();\n  private expressionConfigurator: IExpressionConfigurator = this.config.expressionConfigurator;\n  private availableExpressionProperties: IExpressionEditorProperty[] = [];\n\n  private invalidExpressionMessage = this.translateService.instant(\n    'com.bmc.arsys.rx.client.expression-editor.invalid-expression.message'\n  );\n\n  get isReadOnly(): boolean {\n    return this.config.isReadOnly;\n  }\n\n  get isNavigationEnabled(): boolean {\n    return this.isPropertyContextReady && (this.hasPreviousProperty() || this.hasNextProperty());\n  }\n\n  get isPreviousButtonDisabled(): boolean {\n    return !this.isPropertyContextReady || this.richExpressionEditorControl.invalid || !this.hasPreviousProperty();\n  }\n\n  get isNextButtonDisabled(): boolean {\n    return !this.isPropertyContextReady || this.richExpressionEditorControl.invalid || !this.hasNextProperty();\n  }\n\n  @ViewChild(RichExpressionEditorComponent, { static: true })\n  richExpressionEditor: RichExpressionEditorComponent;\n\n  @ViewChild(RichExpressionEditorComponent, { read: NgModel, static: true })\n  richExpressionEditorControl: NgModel;\n\n  constructor(\n    public activeModalRef: ActiveModalRef,\n    private translateService: TranslateService,\n    private rxExpressionParserService: RxExpressionParserService,\n    protected injector: Injector\n  ) {\n    super(activeModalRef, injector);\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n    this.initialize(this.config.property).subscribe();\n  }\n\n  onSave(): void {\n    this.writeValue().subscribe({\n      complete: () => {\n        this.activeModalRef.close();\n      }\n    });\n  }\n\n  onNodeSelected(node: AdaptTreeNode): void {\n    this.richExpressionEditor.insertHtml(node.data.expression);\n  }\n\n  navigateToNextProperty(): void {\n    this.navigateToProperty(this.getCurrentPropertyIndex() + 1);\n  }\n\n  navigateToPreviousProperty(): void {\n    this.navigateToProperty(this.getCurrentPropertyIndex() - 1);\n  }\n\n  cancelModal(): void {\n    this.activeModalRef.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  isDirty(): boolean {\n    return this.richExpressionEditorControl.dirty;\n  }\n\n  private navigateToProperty(index: number): void {\n    this.isPropertyContextReady = false;\n\n    concat(\n      this.writeValue(),\n      // getPropertyByIndex must be called when writeValue observable will be\n      // completed to make sure availableExpressionProperties are up to date.\n      of(index).pipe(concatMap((i) => this.initialize(this.getPropertyByIndex(i))))\n    )\n      .pipe(\n        finalize(() => {\n          this.isPropertyContextReady = true;\n          this.richExpressionEditorControl.control.markAsPristine();\n        })\n      )\n      .subscribe();\n  }\n\n  private initialize(property: IExpressionEditorProperty): Observable<never> {\n    return concat(\n      this.updateAvailableExpressionProperties(),\n      this.expressionConfigurator.getDataDictionary(property.path).pipe(\n        tap((dataDictionary) => {\n          this.currentProperty = property;\n          this.operatorRows = this.expressionConfigurator.getOperatorRows(property.path);\n          this.dataDictionary = dataDictionary;\n          this.legend = sortBy(this.config.legend, 'label');\n\n          this.isPropertyContextReady = true;\n        }),\n        take(1),\n        switchMapTo(EMPTY)\n      )\n    );\n  }\n\n  private writeValue(): Observable<never> {\n    return this.expressionConfigurator.validateProperty(this.currentProperty.path, this.currentProperty.value).pipe(\n      tap((isValid) => {\n        if (isValid) {\n          this.config.api.writeValue(\n            this.currentProperty.path,\n            this.rxExpressionParserService.stripSpaces(this.currentProperty.value)\n          );\n        } else {\n          this.richExpressionEditorControl.control.setErrors({\n            invalidExpression: {\n              message: this.invalidExpressionMessage\n            }\n          });\n        }\n      }),\n      switchMap((isValid) => (isValid ? EMPTY : throwError(new RxError())))\n    );\n  }\n\n  private updateAvailableExpressionProperties(): Observable<never> {\n    return this.config.expressionPropertyNavigator\n      ? this.config.expressionPropertyNavigator.getProperties().pipe(\n          take(1),\n          tap((properties) => {\n            this.availableExpressionProperties = properties;\n          }),\n          switchMapTo(EMPTY)\n        )\n      : EMPTY;\n  }\n\n  private hasPreviousProperty(): boolean {\n    const currentIndex = this.getCurrentPropertyIndex();\n\n    return currentIndex > 0;\n  }\n\n  private hasNextProperty(): boolean {\n    const currentIndex = this.getCurrentPropertyIndex();\n\n    return currentIndex !== this.availableExpressionProperties.length - 1 && currentIndex !== -1;\n  }\n\n  private getCurrentPropertyIndex(): number {\n    return findIndex(this.availableExpressionProperties, { path: this.currentProperty.path });\n  }\n\n  private getPropertyByIndex(propertyIndex: number): IExpressionEditorProperty {\n    return this.availableExpressionProperties[propertyIndex];\n  }\n}\n","<div class=\"modal-body row\">\n  <div class=\"d-flex flex-column h-100\" [ngClass]=\"isReadOnly ? 'col' : 'col-6'\">\n    <div class=\"d-flex align-items-center\">\n      <ng-container *ngIf=\"isNavigationEnabled\">\n        <button\n          type=\"button\"\n          class=\"d-icon-angle_left mr-1\"\n          adapt-button\n          btn-type=\"secondary\"\n          size=\"small\"\n          (click)=\"navigateToPreviousProperty()\"\n          [disabled]=\"isPreviousButtonDisabled\"\n          rx-id=\"previous-button\"\n        ></button>\n\n        <button\n          type=\"button\"\n          class=\"d-icon-angle_right mr-2\"\n          adapt-button\n          btn-type=\"secondary\"\n          size=\"small\"\n          (click)=\"navigateToNextProperty()\"\n          [disabled]=\"isNextButtonDisabled\"\n          rx-id=\"next-button\"\n        ></button>\n      </ng-container>\n\n      <h5 class=\"m-0 text-truncate\">\n        {{\n          'com.bmc.arsys.rx.client.expression-editor.expression-for-property.label'\n            | translate: { propertyName: currentProperty?.label || (currentProperty?.path | titlecase) }\n        }}\n      </h5>\n    </div>\n\n    <div class=\"flex flex-grow-1 h-100 mt-2\">\n      <rx-rich-expression-editor\n        class=\"flex-grow-1 h-100\"\n        [dataDictionary]=\"dataDictionary\"\n        [(ngModel)]=\"expression\"\n        [operatorRows]=\"operatorRows\"\n        [disabled]=\"isReadOnly\"\n      ></rx-rich-expression-editor>\n    </div>\n  </div>\n\n  <div class=\"col-6 d-flex flex-column h-100 pr-0\" *ngIf=\"!isReadOnly\">\n    <ng-template #legendContentTemplate>\n      <div class=\"text-left p-2\">\n        <div *ngFor=\"let item of legend; let last = last\" [class.pb-2]=\"!last\">\n          <span class=\"legend-item-icon px-2 py-1\" [ngClass]=\"item.icon\"></span>\n          <span class=\"ml-2\">{{ item.label }}</span>\n        </div>\n      </div>\n    </ng-template>\n    <h5 class=\"mt-0\">\n      {{ 'com.bmc.arsys.rx.client.expression-editor.available-values.label' | translate }}\n      <adapt-icon\n        name=\"info_circle_o_adapt\"\n        [adaptTooltip]=\"legendContentTemplate\"\n        width=\"260\"\n        placement=\"bottom\"\n      ></adapt-icon>\n    </h5>\n\n    <div class=\"data-dictionary-container flex-grow-1\">\n      <rx-data-dictionary\n        [dataDictionary]=\"dataDictionary\"\n        (nodeSelected)=\"onNodeSelected($event)\"\n      ></rx-data-dictionary>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isReadOnly\"\n    type=\"button\"\n    adapt-button\n    btn-type=\"primary\"\n    (click)=\"onSave()\"\n    [disabled]=\"richExpressionEditorControl.invalid || richExpressionEditorControl.pristine\"\n    rx-id=\"save-button\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.ok.label' | translate }}\n  </button>\n\n  <button type=\"button\" adapt-button btn-type=\"secondary\" (click)=\"cancelModal()\" rx-id=\"cancel-button\">\n    {{\n      (isReadOnly ? 'com.bmc.arsys.rx.client.common.close.label' : 'com.bmc.arsys.rx.client.common.cancel.label')\n        | translate\n    }}\n  </button>\n</div>\n"]}