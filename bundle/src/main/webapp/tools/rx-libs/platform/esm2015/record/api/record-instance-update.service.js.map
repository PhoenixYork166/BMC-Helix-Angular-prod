{"version":3,"file":"record-instance-update.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/record/api/record-instance-update.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,uBAAuB,EAAE,MAAM,2BAA2B,CAAC;AAEpE,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AACvD,OAAO,EAAE,IAAI,EAAc,UAAU,EAAE,MAAM,MAAM,CAAC;AACpD,OAAO,EAAE,iBAAiB,EAAE,MAAM,4BAA4B,CAAC;AAC/D,OAAO,EAAE,sBAAsB,EAAE,MAAM,wBAAwB,CAAC;;;;AAKhE,MAAM,OAAO,6BAA6B;IACxC,YACU,uBAAgD,EAChD,sBAA8C;QAD9C,4BAAuB,GAAvB,uBAAuB,CAAyB;QAChD,2BAAsB,GAAtB,sBAAsB,CAAwB;IACrD,CAAC;IAEJ,OAAO,CAAC,cAA8B;QACpC,OAAO,IAAI,CAAC,uBAAuB;aAChC,IAAI,CAAC,cAAc,CAAC;aACpB,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,2BAA2B,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC;IAC1F,CAAC;IAEO,2BAA2B,CAAC,KAAK,EAAE,cAA8B;QACvE,IAAI,KAAK,CAAC,MAAM,KAAK,iBAAiB,CAAC,6BAA6B,EAAE;YACpE,OAAO,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,qBAAqB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CAC7F,SAAS,CAAC,CAAC,WAAW,EAAE,EAAE;gBACxB,IAAI,WAAW,EAAE;oBACf,OAAO,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,cAAc,EAAE;wBACvD,OAAO,EAAE;4BACP,0BAA0B,EAAE,MAAM;yBACnC;qBACF,CAAC,CAAC;iBACJ;qBAAM;oBACL,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;iBAC1B;YACH,CAAC,CAAC,CACH,CAAC;SACH;aAAM;YACL,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC;SAC1B;IACH,CAAC;;0HA9BU,6BAA6B;8HAA7B,6BAA6B,cAF5B,MAAM;2FAEP,6BAA6B;kBAHzC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { RxRecordInstanceService } from './record-instance.service';\nimport { RecordInstance } from './record-instance.class';\nimport { catchError, switchMap } from 'rxjs/operators';\nimport { from, Observable, throwError } from 'rxjs';\nimport { RX_ERROR_HANDLING } from '@helix/platform/shared/api';\nimport { RxUtilityModalsService } from '@helix/platform/ui-kit';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordInstanceUpdateService {\n  constructor(\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private rxUtilityModalsService: RxUtilityModalsService\n  ) {}\n\n  execute(recordInstance: RecordInstance): Observable<any> {\n    return this.rxRecordInstanceService\n      .save(recordInstance)\n      .pipe(catchError((error) => this.handleModifiedInstanceError(error, recordInstance)));\n  }\n\n  private handleModifiedInstanceError(error, recordInstance: RecordInstance): Observable<any> {\n    if (error.status === RX_ERROR_HANDLING.optimisticLockErrorHttpStatus) {\n      return from(this.rxUtilityModalsService.confirmExternalChange(error.error[0].messageText)).pipe(\n        switchMap((isConfirmed) => {\n          if (isConfirmed) {\n            return this.rxRecordInstanceService.save(recordInstance, {\n              headers: {\n                'Override-Optimistic-Lock': 'true'\n              }\n            });\n          } else {\n            return throwError(error);\n          }\n        })\n      );\n    } else {\n      return throwError(error);\n    }\n  }\n}\n"]}