{"version":3,"file":"associate-view-action.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/actions/associate/associate-view-action.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IViewActionService, RxViewActionUtilsService } from '@helix/platform/view/api';\nimport {\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RX_ASSOCIATION_DEFINITION,\n  RxAssociationDefinitionService,\n  RxAssociationInstanceService\n} from '@helix/platform/association/api';\nimport { RxOpenViewActionService } from '../open-view/open-view-action.service';\nimport { RxLogService } from '@helix/platform/shared/api';\nimport { IAssociateViewActionParams } from './associate-view-action.interfaces';\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\nimport { map, mapTo, switchMap } from 'rxjs/operators';\nimport { compact, flatten, flow, map as _map, uniq } from 'lodash';\nimport { RX_OPEN_VIEW } from '../open-view/open-view-action.constant';\nimport { RxError } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxAssociateViewActionService implements IViewActionService<IAssociateViewActionParams> {\n  constructor(\n    private rxAssociationInstanceService: RxAssociationInstanceService,\n    private rxOpenViewActionService: RxOpenViewActionService,\n    private rxAssociationDefinitionService: RxAssociationDefinitionService,\n    private rxLogService: RxLogService,\n    private rxViewActionUtilsService: RxViewActionUtilsService\n  ) {}\n\n  execute(params: IAssociateViewActionParams) {\n    if (!params.associatedRecordId) {\n      return throwError(new RxError('rxAssociateAction: Associated Record ID is not defined.'));\n    }\n\n    return forkJoin([\n      this.getInstanceIds(params),\n      this.rxAssociationDefinitionService.get(params.associationDefinitionName)\n    ]).pipe(\n      switchMap(([instanceIds, associationDefinition]) => {\n        let nodeAIds = [];\n        let nodeBIds = [];\n\n        if (instanceIds.length) {\n          if (params.associationDefinitionRole === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value) {\n            nodeAIds = instanceIds;\n            nodeBIds = [params.associatedRecordId];\n          } else if (params.associationDefinitionRole === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value) {\n            nodeAIds = [params.associatedRecordId];\n            nodeBIds = instanceIds;\n          }\n\n          if (associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToOne.value) {\n            nodeAIds = nodeAIds[0];\n            nodeBIds = nodeBIds[0];\n          } else if (associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToMany.value) {\n            nodeAIds = nodeAIds[0];\n          }\n\n          return this.rxAssociationInstanceService\n            .associateRecords(\n              params.associationDefinitionName,\n              nodeAIds,\n              nodeBIds,\n              params.useDefaultRoles,\n              params.nodeARole,\n              params.nodeBRole\n            )\n            .pipe(mapTo(instanceIds));\n        }\n\n        return of(instanceIds);\n      })\n    );\n  }\n\n  private getInstanceIds(params: IAssociateViewActionParams): Observable<string[]> {\n    return this.rxOpenViewActionService\n      .execute({\n        presentation: {\n          modalSize: RX_OPEN_VIEW.modalSize.Large,\n          type: RX_OPEN_VIEW.type.DockedRightModal\n        },\n        viewDefinitionName: params.viewDefinitionName,\n        viewParams: null\n      })\n      .pipe(\n        map((output) => {\n          const instanceIds = flow(\n            (outs) => _map(outs, (out) => this.rxViewActionUtilsService.extractRecordIds(out)),\n            flatten,\n            compact,\n            uniq\n          )(output);\n\n          this.rxLogService.debug(`RxAssociateAction: associating ${instanceIds.length} record(s)`);\n\n          return instanceIds;\n        })\n      );\n  }\n}\n"]}