{"version":3,"file":"assignment-expression-list-form-control.component.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/shared/components/form-controls/assignment-expression-list-form-control/assignment-expression-list-form-control.component.ts","../../../../../../../../libs/platform/shared/components/form-controls/assignment-expression-list-form-control/assignment-expression-list-form-control.component.html"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  QueryList,\n  Renderer2,\n  SimpleChanges,\n  ViewChildren\n} from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { isEqual } from 'lodash';\n\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { IFormBuilderEvent, IFormControlComponent, IFormFocusable, IPlainObject } from '@helix/platform/shared/api';\n\nimport { ValueAccessor } from '../../form-builder/value-accessor';\nimport { IExpressionEditorPropertyChange } from '../../expression-editor/expression-editor.interfaces';\nimport { RxExpressionEditorService } from '../../expression-editor/expression-editor.service';\nimport {\n  AssignmentExpressionListTargetFieldType,\n  IAssignmentExpressionListFormControlOptions\n} from './assignment-expression-list-form-control.types';\n\n@Component({\n  selector: 'rx-assignment-expression-list-form-control',\n  templateUrl: './assignment-expression-list-form-control.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: AssignmentExpressionListFormControlComponent,\n      multi: true\n    }\n  ]\n})\nexport class AssignmentExpressionListFormControlComponent\n  extends ValueAccessor<any[]>\n  implements IFormControlComponent, IFormFocusable, OnInit, OnChanges, OnDestroy\n{\n  @Input()\n  options: IAssignmentExpressionListFormControlOptions;\n\n  @Input()\n  propertyPath: string;\n\n  @ViewChildren('fieldGroups', { read: ElementRef })\n  private fieldGroups: QueryList<ElementRef>;\n\n  currentOptions: IAssignmentExpressionListFormControlOptions;\n  formArray: FormArray = this.formBuilder.array([]);\n\n  private defaultOptions = {\n    addItemText: 'com.bmc.arsys.rx.client.common.add.label',\n    confirmationMessage: 'com.bmc.arsys.rx.client.common.delete-item-confirmation.message',\n    sourceFieldOptions: {\n      options: {\n        label: 'com.bmc.arsys.rx.client.designer.assignment-expression.source.label',\n        required: true\n      },\n      propertyName: 'expression'\n    },\n    targetFieldOptions: {\n      options: {\n        label: 'com.bmc.arsys.rx.client.designer.assignment-expression.target.label',\n        required: true\n      },\n      propertyName: 'assignTarget'\n    }\n  };\n\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private renderer: Renderer2,\n    private rxExpressionEditorService: RxExpressionEditorService,\n    private rxModalService: RxModalService,\n    private translateService: TranslateService\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.formArray.valueChanges.pipe(takeUntil(this.destroyed$)).subscribe((value) => {\n      this.value = value;\n    });\n\n    this.patchOptions(this.options);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.options.currentValue !== changes.options.previousValue) {\n      this.patchOptions(changes.options.currentValue);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.formArray.clear();\n\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  focus(data: IPlainObject): void {\n    const fieldGroup = this.fieldGroups.get(data.index);\n\n    if (data.fieldName === this.currentOptions.targetFieldOptions.propertyName) {\n      const targetFieldElement =\n        this.currentOptions.targetFieldOptions.type === AssignmentExpressionListTargetFieldType.Text\n          ? fieldGroup.nativeElement.querySelector('rx-text-form-control input')\n          : fieldGroup.nativeElement.querySelector('rx-select-form-control button');\n\n      targetFieldElement.focus();\n    } else if (data.fieldName === this.currentOptions.sourceFieldOptions.propertyName) {\n      const sourceFieldButton = fieldGroup.nativeElement.querySelector('rx-expression-form-control button');\n\n      sourceFieldButton.focus();\n      sourceFieldButton.click();\n    }\n  }\n\n  onWriteValue(value: IPlainObject[]): void {\n    if (!isEqual(value, this.formArray.value)) {\n      this.formArray.clear();\n\n      value.forEach((item) => this.addItem(item));\n    }\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    super.setDisabledState(isDisabled);\n\n    if (isDisabled) {\n      this.formArray.disable();\n    } else {\n      this.formArray.enable();\n    }\n  }\n\n  addItem(item?: IPlainObject): void {\n    this.formArray.push(\n      this.formBuilder.group(\n        item ?? {\n          [this.currentOptions.targetFieldOptions.propertyName]: null,\n          [this.currentOptions.sourceFieldOptions.propertyName]: null\n        }\n      )\n    );\n  }\n\n  openExpressionEditor(event: IFormBuilderEvent, formControl: FormControl): void {\n    this.rxExpressionEditorService\n      .openEditor({\n        expressionConfigurator: this.currentOptions.sourceFieldOptions.expressionConfigurator,\n        isReadOnly: this.isDisabled,\n        property: {\n          path: event.payload.propertyPath,\n          value: formControl.value,\n          label: event.payload.propertyLabel\n        }\n      })\n      .subscribe((expression: IExpressionEditorPropertyChange) => {\n        formControl.setValue(expression.value);\n      });\n  }\n\n  removeItem(index: number): void {\n    if (!this.isDisabled) {\n      this.rxModalService\n        .confirm({\n          title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),\n          modalStyle: RX_MODAL.modalStyles.warning,\n          message: this.currentOptions.confirmationMessage\n        })\n        .then((confirmed) => {\n          if (confirmed) {\n            this.formArray.removeAt(index);\n          }\n        });\n    }\n  }\n\n  private patchOptions(options: IAssignmentExpressionListFormControlOptions): void {\n    this.currentOptions = {\n      addItemText: this.translateService.instant(options.addItemText || this.defaultOptions.addItemText),\n      confirmationMessage: this.translateService.instant(\n        options.confirmationMessage || this.defaultOptions.confirmationMessage\n      ),\n      sourceFieldOptions: {\n        expressionConfigurator: options.sourceFieldOptions.expressionConfigurator,\n        options: {\n          label: this.translateService.instant(this.defaultOptions.sourceFieldOptions.options.label),\n          isRequired: this.defaultOptions.sourceFieldOptions.options.required,\n          ...options.sourceFieldOptions.options\n        },\n        propertyName: options.sourceFieldOptions.propertyName || this.defaultOptions.sourceFieldOptions.propertyName\n      },\n      targetFieldOptions: {\n        options: {\n          label: this.translateService.instant(this.defaultOptions.targetFieldOptions.options.label),\n          required: this.defaultOptions.targetFieldOptions.options.required,\n          ...options.targetFieldOptions.options\n        },\n        propertyName: options.targetFieldOptions.propertyName || this.defaultOptions.targetFieldOptions.propertyName,\n        type: options.targetFieldOptions.type\n      }\n    };\n  }\n}\n","<button\n  *ngIf=\"!isDisabled\"\n  class=\"btn btn-sm btn-link px-0 py-0\"\n  type=\"button\"\n  aria-label=\"{{ 'com.bmc.arsys.rx.client.common.add.label' | translate }}\"\n  rx-id=\"add-item-button\"\n  (click)=\"addItem()\"\n>\n  <span class=\"d-icon-plus_circle mr-1\" aria-hidden=\"true\"></span>\n\n  {{ currentOptions.addItemText }}\n</button>\n\n<div *ngFor=\"let formGroup of formArray.controls; let index = index\" class=\"card mt-2\">\n  <div class=\"card-block p-3\" #fieldGroups>\n    <button\n      *ngIf=\"!isDisabled\"\n      class=\"close position-relative\"\n      type=\"button\"\n      aria-label=\"{{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\"\n      rx-id=\"remove-item-button\"\n      (click)=\"removeItem(index)\"\n    ></button>\n\n    <div class=\"pb-3\">\n      <rx-text-form-control\n        *ngIf=\"currentOptions.targetFieldOptions.type === 'text'\"\n        [formControl]=\"formGroup.get(currentOptions.targetFieldOptions.propertyName)\"\n        [options]=\"currentOptions.targetFieldOptions.options\"\n      ></rx-text-form-control>\n\n      <rx-select-form-control\n        *ngIf=\"currentOptions.targetFieldOptions.type === 'select'\"\n        [formControl]=\"formGroup.get(currentOptions.targetFieldOptions.propertyName)\"\n        [options]=\"currentOptions.targetFieldOptions.options\"\n      ></rx-select-form-control>\n    </div>\n\n    <rx-expression-form-control\n      [formControl]=\"formGroup.get(currentOptions.sourceFieldOptions.propertyName)\"\n      [options]=\"currentOptions.sourceFieldOptions.options\"\n      [isDisabled]=\"isDisabled\"\n      [propertyPath]=\"this.propertyPath + '[' + index + '].' + currentOptions.sourceFieldOptions.propertyName\"\n      (events)=\"openExpressionEditor($event, formGroup.get(currentOptions.sourceFieldOptions.propertyName))\"\n    ></rx-expression-form-control>\n  </div>\n</div>\n"]}