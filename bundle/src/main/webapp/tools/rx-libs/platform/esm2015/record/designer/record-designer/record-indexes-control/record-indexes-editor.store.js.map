{"version":3,"file":"record-indexes-editor.store.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/record/designer/record-designer/record-indexes-control/record-indexes-editor.store.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ComponentStore } from '@ngrx/component-store';\nimport { Observable } from 'rxjs';\nimport { IFieldState, IIndexEditorState, IIndexesEditorOptions, IIndexState } from './record-indexes-control.types';\nimport { reject, some } from 'lodash';\nimport { RxGuidService } from '@helix/platform/utils';\n\n@Injectable()\nexport class RecordIndexesEditorStore extends ComponentStore<IIndexEditorState> {\n  readonly isDirty$: Observable<boolean> = this.select((state: IIndexEditorState) => state.isDirty);\n  readonly indexes$: Observable<any> = this.select((state: IIndexEditorState) => state.indexes);\n\n  readonly addIndex = this.updater((state: IIndexEditorState, index: IIndexState) => ({\n    ...state,\n    indexes: [...state.indexes, index],\n    isDirty: true\n  }));\n\n  readonly updateIndex = this.updater((state: IIndexEditorState, indexToUpdate: IIndexState) => ({\n    ...state,\n    indexes: state.indexes.map((index) => (index.guid === indexToUpdate.guid ? { ...indexToUpdate } : index)),\n    isDirty: true\n  }));\n\n  readonly removeIndex = this.updater((state: IIndexEditorState, guid: string) => ({\n    ...state,\n    indexes: state.indexes.filter((field) => field.guid !== guid),\n    isDirty: true\n  }));\n\n  readonly checkAvailableFields = this.updater(\n    (state: IIndexEditorState, payload: { indexGuid: string; checkedFields: IFieldState[] }) => ({\n      ...state,\n      indexes: state.indexes.map((index) =>\n        index.guid === payload.indexGuid\n          ? {\n              ...index,\n              checkedAvailableFields: [...payload.checkedFields]\n            }\n          : index\n      )\n    })\n  );\n\n  readonly toggleSelectedFieldChecked = this.updater(\n    (state: IIndexEditorState, payload: { indexGuid: string; indexField: IFieldState }) => ({\n      ...state,\n      indexes: state.indexes.map((index) => {\n        if (index.guid === payload.indexGuid) {\n          const selectedFields = index.selectedFields.map((field) =>\n            field.id === payload.indexField.id ? { ...field } : field\n          );\n\n          return {\n            ...index,\n            selectedFields,\n            isMoveToAvailableButtonEnabled: some(selectedFields, 'selected')\n          };\n        } else {\n          return index;\n        }\n      })\n    })\n  );\n\n  readonly assignCheckedFields = this.updater((state: IIndexEditorState, indexToAssign: IIndexState) => {\n    return {\n      ...state,\n      indexes: state.indexes.map((index) =>\n        index.guid === indexToAssign.guid\n          ? {\n              ...index,\n              selectedFields: [...index.selectedFields, ...index.checkedAvailableFields].map(\n                (field, itemIndex: number) => ({\n                  ...field,\n                  selected: false,\n                  fieldOrder: itemIndex++\n                })\n              ),\n              availableFields: [\n                ...index.availableFields.filter((field) => !some(index.checkedAvailableFields, { id: field.id }))\n              ],\n              checkedAvailableFields: []\n            }\n          : index\n      ),\n      isDirty: true\n    };\n  });\n\n  readonly unassignCheckedFields = this.updater((state: IIndexEditorState, indexToAssign: IIndexState) => {\n    return {\n      ...state,\n      indexes: state.indexes.map((index) =>\n        index.guid === indexToAssign.guid\n          ? {\n              ...index,\n              selectedFields: index.selectedFields.filter((field) => !field.selected),\n              availableFields: [...index.availableFields, ...index.selectedFields.filter((field) => field.selected)]\n                .map((field) => ({\n                  ...field,\n                  fieldOrder: null\n                }))\n                .sort((a, b) => a.name.localeCompare(b.name)),\n              isMoveToAvailableButtonEnabled: false\n            }\n          : index\n      ),\n      isDirty: true\n    };\n  });\n\n  readonly sortSelectedFields = this.updater(\n    (state: IIndexEditorState, payload: { indexGuid: string; fields: IFieldState[] }) => ({\n      ...state,\n      indexes: state.indexes.map((index) =>\n        index.guid === payload.indexGuid\n          ? {\n              ...index,\n              selectedFields: [\n                ...payload.fields.map((field, itemIndex: number) => ({ ...field, fieldOrder: itemIndex }))\n              ]\n            }\n          : index\n      )\n    })\n  );\n\n  readonly removeField = this.updater(\n    (state: IIndexEditorState, payload: { indexGuid: string; field: IFieldState }) => ({\n      ...state,\n      indexes: state.indexes.map((index) =>\n        index.guid === payload.indexGuid\n          ? {\n              ...index,\n              selectedFields: index.selectedFields.filter((field) => field.id !== payload.field.id),\n              availableFields: [...index.availableFields, payload.field].sort((a, b) => a.name.localeCompare(b.name))\n            }\n          : index\n      ),\n      isDirty: true\n    })\n  );\n\n  readonly expandAll = this.updater((state: IIndexEditorState) => ({\n    ...state,\n    indexes: state.indexes.map((field) => ({ ...field, isOpen: true }))\n  }));\n\n  readonly collapseAll = this.updater((state: IIndexEditorState) => ({\n    ...state,\n    indexes: state.indexes.map((field) => ({ ...field, isOpen: false }))\n  }));\n\n  readonly markDirty = this.updater((state: IIndexEditorState) => ({\n    ...state,\n    isDirty: true\n  }));\n\n  readonly vm$ = this.select(this.indexes$, this.isDirty$, (indexes, isDirty) => ({\n    indexes,\n    isDirty\n  }));\n\n  constructor(private rxGuidService: RxGuidService) {\n    super({ indexes: [], isDirty: false });\n  }\n\n  initialize(indexesEditorOptions: IIndexesEditorOptions): void {\n    this.patchState({\n      isDirty: false,\n      indexes: indexesEditorOptions.indexes.map((index, itemIndex) => ({\n        ...index,\n\n        availableFields: reject(\n          indexesEditorOptions.fields,\n          (field) => field.isNewField || index.indexFieldIds.includes(field.id as number)\n        )\n          .map((field) => ({ id: field.id, name: field.name, fieldOrder: null }))\n          .sort((a, b) => a.name.localeCompare(b.name)),\n\n        checkedAvailableFields: [],\n\n        selectedFields: indexesEditorOptions.fields\n          .filter((field) => !field.isNewField && index.indexFieldIds.includes(field.id as number))\n          .sort((a, b) => index.indexFieldIds.indexOf(a.id as number) - index.indexFieldIds.indexOf(b.id as number))\n          .map((field, index) => ({ id: field.id, name: field.name, fieldOrder: index })),\n\n        guid: this.rxGuidService.generate(),\n        isOpen: indexesEditorOptions?.indexToEditIndex === itemIndex,\n        isMoveToAvailableButtonEnabled: false\n      }))\n    });\n  }\n}\n"]}