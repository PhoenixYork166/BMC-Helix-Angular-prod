{"version":3,"file":"cognitive-training-utils.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/admin/components/cognitive-training/cognitive-training-utils.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,4BAA4B,EAAE,MAAM,4BAA4B,CAAC;AAE1E,OAAO,EAAE,qBAAqB,EAAE,MAAM,+BAA+B,CAAC;;AAKtE,MAAM,OAAO,+BAA+B;IAC1C,iBAAiB,CAAC,iBAAsD;QACtE,IAAI,cAAgD,CAAC;QAErD,IAAI,iBAAiB,CAAC,QAAQ,EAAE;YAC9B,cAAc,GAAG,qBAAqB,CAAC,QAAQ,CAAC,eAAe,CAAC,cAAc,CAAC;SAChF;aAAM,IAAI,iBAAiB,CAAC,oBAAoB,EAAE;YACjD,cAAc,GAAG,qBAAqB,CAAC,QAAQ,CAAC,eAAe,CAAC,yBAAyB,CAAC;SAC3F;QAED,OAAO,cAAc,CAAC;IACxB,CAAC;IAED,kBAAkB,CAAC,iBAAyB;QAC1C,IAAI,MAAgB,CAAC;QAErB,IAAI,iBAAiB,KAAK,qBAAqB,CAAC,QAAQ,CAAC,aAAa,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE;YACjH,MAAM,GAAG,qBAAqB,CAAC,QAAQ,CAAC,6BAA6B,CAAC;SACvE;aAAM,IACL,iBAAiB,KAAK,qBAAqB,CAAC,QAAQ,CAAC,aAAa,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC,KAAK,EAC7G;YACA,MAAM,GAAG,qBAAqB,CAAC,QAAQ,CAAC,6BAA6B,CAAC;SACvE;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;;4HAzBU,+BAA+B;gIAA/B,+BAA+B,cAF9B,MAAM;2FAEP,+BAA+B;kBAH3C,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { MachineLearningProviderNames } from '@helix/platform/shared/api';\nimport { ICognitiveTrainingDataSourceHistory, ICognitiveTrainingDataSourceType } from './cognitive-training.types';\nimport { RX_COGNITIVE_TRAINING } from './cognitive-training.constant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxCognitiveTrainingUtilsService {\n  getDataSourceType(dataSourceHistory: ICognitiveTrainingDataSourceHistory): ICognitiveTrainingDataSourceType {\n    let dataSourceType: ICognitiveTrainingDataSourceType;\n\n    if (dataSourceHistory.fileName) {\n      dataSourceType = RX_COGNITIVE_TRAINING.settings.dataSourceTypes.fileDataSource;\n    } else if (dataSourceHistory.recordDefinitionName) {\n      dataSourceType = RX_COGNITIVE_TRAINING.settings.dataSourceTypes.innovationSuiteDataSource;\n    }\n\n    return dataSourceType;\n  }\n\n  getTrainingLocales(trainingTypeValue: number): string[] {\n    let result: string[];\n\n    if (trainingTypeValue === RX_COGNITIVE_TRAINING.settings.trainingTypes[MachineLearningProviderNames.Native].value) {\n      result = RX_COGNITIVE_TRAINING.settings.nativeProviderTrainingLocales;\n    } else if (\n      trainingTypeValue === RX_COGNITIVE_TRAINING.settings.trainingTypes[MachineLearningProviderNames.Watson].value\n    ) {\n      result = RX_COGNITIVE_TRAINING.settings.watsonProviderTrainingLocales;\n    }\n\n    return result;\n  }\n}\n"]}