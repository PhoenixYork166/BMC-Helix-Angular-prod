{"version":3,"file":"json-validator.directive.js","sourceRoot":"","sources":["../../../../../../libs/platform/utils/json/json-validator.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAU,MAAM,eAAe,CAAC;AACzD,OAAO,EAAmB,aAAa,EAA+B,MAAM,gBAAgB,CAAC;AAE7F,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACvD,OAAO,EAAE,GAAG,EAAE,MAAM,QAAQ,CAAC;;;AAM7B,MAAM,OAAO,eAAe;IAM1B,YAAoB,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAF9C,iBAAY,GAAG,EAAE,CAAC;IAE+B,CAAC;IAE1D,QAAQ;QACN,IAAI,CAAC,YAAY,GAAG,GAAG,CACrB,IAAI,CAAC,MAAM,EACX,cAAc,EACd,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,4DAA4D,CAAC,CAC5F,CAAC;IACJ,CAAC;IAED,QAAQ,CAAC,OAAwB;QAC/B,IAAI,MAAM,GAAG,IAAI,CAAC;QAElB,IAAI,OAAO,CAAC,KAAK,EAAE;YACjB,IAAI;gBACF,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;aAC3B;YAAC,OAAO,OAAO,EAAE;gBAChB,MAAM,GAAG;oBACP,KAAK,EAAE;wBACL,OAAO,EAAE,IAAI,CAAC,YAAY;qBAC3B;iBACF,CAAC;aACH;SACF;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;;4GAhCU,eAAe;gGAAf,eAAe,iEAFf,CAAC,EAAE,OAAO,EAAE,aAAa,EAAE,WAAW,EAAE,eAAe,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;2FAEvE,eAAe;kBAJ3B,SAAS;mBAAC;oBACT,QAAQ,EAAE,UAAU;oBACpB,SAAS,EAAE,CAAC,EAAE,OAAO,EAAE,aAAa,EAAE,WAAW,iBAAiB,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;iBACnF;uGAGC,MAAM;sBADL,KAAK","sourcesContent":["import { Directive, Input, OnInit } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator } from '@angular/forms';\nimport { IJsonValidatorConfig } from './json.types';\nimport { TranslateService } from '@ngx-translate/core';\nimport { get } from 'lodash';\n\n@Directive({\n  selector: '[rxJson]',\n  providers: [{ provide: NG_VALIDATORS, useExisting: RxJsonValidator, multi: true }]\n})\nexport class RxJsonValidator implements OnInit, Validator {\n  @Input()\n  rxJson!: IJsonValidatorConfig;\n\n  private errorMessage = '';\n\n  constructor(private translateService: TranslateService) {}\n\n  ngOnInit() {\n    this.errorMessage = get(\n      this.rxJson,\n      'errorMessage',\n      this.translateService.instant('com.bmc.arsys.rx.client.utils.json-validator.error-message')\n    );\n  }\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    let result = null;\n\n    if (control.value) {\n      try {\n        JSON.parse(control.value);\n      } catch (ignored) {\n        result = {\n          error: {\n            message: this.errorMessage\n          }\n        };\n      }\n    }\n\n    return result;\n  }\n}\n"]}