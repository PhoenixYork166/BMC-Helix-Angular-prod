{"version":3,"file":"server-information.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/admin/components/server-information/server-information.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAwB,4BAA4B,EAAkB,MAAM,4BAA4B,CAAC;AAChH,OAAO,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;AAE9B,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;;;AAKrC,MAAM,OAAO,0BAA0B;IACrC,YAAoB,4BAA0D;QAA1D,iCAA4B,GAA5B,4BAA4B,CAA8B;IAAG,CAAC;IAElF,oBAAoB;QAClB,MAAM,WAAW,GAAG;YAClB,SAAS;YACT,YAAY;YACZ,IAAI;YACJ,UAAU;YACV,aAAa;YACb,aAAa;YACb,oBAAoB;YACpB,SAAS;YACT,SAAS;YACT,YAAY;YACZ,SAAS;SACV,CAAC;QAEF,OAAO,IAAI,CAAC,4BAA4B,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,IAAI,CAC3E,GAAG,CAAC,CAAC,iBAAyC,EAAE,EAAE;YAChD,OAAO;gBACL,aAAa,EAAE,IAAI,CAAC,iBAAiB,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,KAAK;gBAC/D,eAAe,EAAE,IAAI,CAAC,iBAAiB,EAAE,EAAE,EAAE,EAAE,YAAY,EAAE,CAAC,CAAC,KAAK;gBACpE,eAAe,EAAE,IAAI,CAAC,iBAAiB,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK;gBAC5D,QAAQ,EAAE,IAAI,CAAC,iBAAiB,EAAE,EAAE,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC,KAAK;gBAC3D,UAAU,EAAE,IAAI,CAAC,iBAAiB,EAAE,EAAE,EAAE,EAAE,aAAa,EAAE,CAAC,CAAC,KAAK;gBAChE,UAAU,EAAE,IAAI,IAAI,CACjB,IAAI,CAAC,iBAAiB,EAAE,EAAE,EAAE,EAAE,aAAa,EAAE,CAAC,CAAC,KAAgB,GAAG,IAAI,CACxE,CAAC,cAAc,EAAE;gBAClB,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,EAAE,EAAE,EAAE,EAAE,oBAAoB,EAAE,CAAC,CAAC,KAAK;gBAC9E,YAAY,EAAE,IAAI,CAAC,iBAAiB,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,KAAK;gBAC9D,YAAY,EAAE,IAAI,CAAC,iBAAiB,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,KAAK;gBAC9D,eAAe,EAAE,IAAI,CAAC,iBAAiB,EAAE,EAAE,EAAE,EAAE,YAAY,EAAE,CAAC,CAAC,KAAK;gBACpE,YAAY,EAAE,IAAI,CAAC,iBAAiB,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC,KAAK;aACzC,CAAC;QAC1B,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;;uHArCU,0BAA0B;2HAA1B,0BAA0B,cAFzB,MAAM;2FAEP,0BAA0B;kBAHtC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ISystemConfiguration, RxSystemConfigurationService, RX_ENVIRONMENT } from '@helix/platform/shared/api';\nimport { find } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { IServerInformation } from './server-information.interface';\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxServerInformationService {\n  constructor(private rxSystemConfigurationService: RxSystemConfigurationService) {}\n\n  getServerInformation(): Observable<IServerInformation> {\n    const identifiers = [\n      'VERSION',\n      'SERVER_DIR',\n      'OS',\n      'HARDWARE',\n      'SERVER_NAME',\n      'SERVER_TIME',\n      'CONFIGURATION_NAME',\n      'DB_TYPE',\n      'DB_NAME',\n      'DB_VERSION',\n      'DB_USER'\n    ];\n\n    return this.rxSystemConfigurationService.queryConfiguration(identifiers).pipe(\n      map((serverInformation: ISystemConfiguration[]) => {\n        return {\n          serverVersion: find(serverInformation, { id: 'VERSION' }).value,\n          serverDirectory: find(serverInformation, { id: 'SERVER_DIR' }).value,\n          operatingSystem: find(serverInformation, { id: 'OS' }).value,\n          hardware: find(serverInformation, { id: 'HARDWARE' }).value,\n          serverName: find(serverInformation, { id: 'SERVER_NAME' }).value,\n          serverTime: new Date(\n            (find(serverInformation, { id: 'SERVER_TIME' }).value as number) * 1000\n          ).toLocaleString(),\n          configurationName: find(serverInformation, { id: 'CONFIGURATION_NAME' }).value,\n          databaseType: find(serverInformation, { id: 'DB_TYPE' }).value,\n          databaseName: find(serverInformation, { id: 'DB_NAME' }).value,\n          databaseVersion: find(serverInformation, { id: 'DB_VERSION' }).value,\n          databaseUser: find(serverInformation, { id: 'DB_USER' }).value\n        } as IServerInformation;\n      })\n    );\n  }\n}\n"]}