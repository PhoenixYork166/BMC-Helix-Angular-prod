{"version":3,"file":"array-utils.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/utils/array-utils/array-utils.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAChD,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,QAAQ,CAAC;;AAKhE,MAAM,OAAO,mBAAmB;IAC9B,iBAAiB,CAAI,MAAW,EAAE,oBAA8B,EAAE,KAAa;QAC7E,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;QAE3B,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAExE,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,EAAE;YACjD,IAAI,KAAK,GAAG,CAAC,EAAE;gBACb,IAAI,oBAAoB,CAAC,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC7E,YAAY,CAAC,oBAAoB,EAAE,CAAC,WAAW,EAAE,EAAE;wBACjD,MAAM,CAAC,MAAM,CAAC,WAAW,GAAG,KAAK,EAAE,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC1E,CAAC,CAAC,CAAC;iBACJ;aACF;iBAAM;gBACL,IAAI,oBAAoB,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;oBAC/B,OAAO,CAAC,oBAAoB,EAAE,CAAC,WAAW,EAAE,EAAE;wBAC5C,MAAM,CAAC,MAAM,CAAC,WAAW,GAAG,KAAK,EAAE,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;oBAC1E,CAAC,CAAC,CAAC;iBACJ;aACF;SACF;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;;gHAvBU,mBAAmB;oHAAnB,mBAAmB,cAFlB,MAAM;2FAEP,mBAAmB;kBAH/B,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { isEmpty } from '@bmc-ux/adapt-angular';\nimport { cloneDeep, forEach, forEachRight, uniq } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxArrayUtilsService {\n  moveArrayElements<T>(source: T[], elementIndexesToMove: number[], delta: number): T[] {\n    source = cloneDeep(source);\n\n    elementIndexesToMove = uniq(elementIndexesToMove.sort((a, b) => a - b));\n\n    if (delta !== 0 && !isEmpty(elementIndexesToMove)) {\n      if (delta > 0) {\n        if (elementIndexesToMove[elementIndexesToMove.length - 1] < source.length - 1) {\n          forEachRight(elementIndexesToMove, (indexToMove) => {\n            source.splice(indexToMove + delta, 0, source.splice(indexToMove, 1)[0]);\n          });\n        }\n      } else {\n        if (elementIndexesToMove[0] > 0) {\n          forEach(elementIndexesToMove, (indexToMove) => {\n            source.splice(indexToMove + delta, 0, source.splice(indexToMove, 1)[0]);\n          });\n        }\n      }\n    }\n\n    return source;\n  }\n}\n"]}