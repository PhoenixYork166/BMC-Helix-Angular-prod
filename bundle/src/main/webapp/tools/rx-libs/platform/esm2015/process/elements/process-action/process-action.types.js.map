{"version":3,"file":"process-action.types.js","sourceRoot":"","sources":["../../../../../../../libs/platform/process/elements/process-action/process-action.types.ts"],"names":[],"mappings":"","sourcesContent":["import { Observable } from 'rxjs';\n\nimport {\n  IAssignmentExpression,\n  IDataDictionaryBranch,\n  IDesignerElementService,\n  IExpressionConfigurator,\n  IFormWidgetBuilderConfig,\n  IPlainObject,\n  IProcessActionElementModel,\n  IServiceParameter\n} from '@helix/platform/shared/api';\nimport { IServiceTaskDefinition } from '@helix/platform/process/api';\n\nexport interface IOutputDataDictionaryBranch {\n  children?: IOutputDataDictionaryBranch[];\n  expression?: string | string[];\n  label: string;\n  outputPropertyPath?: string | number | (string | number)[];\n}\n\nexport interface IProcessActionElementService extends IDesignerElementService {\n  buildDataDictionaryBranch(model: IProcessActionElementModel): Observable<IDataDictionaryBranch>;\n\n  buildOutputDataDictionaryBranch(\n    model: IProcessActionElementModel,\n    outputParams?: IServiceParameter[]\n  ): Observable<IOutputDataDictionaryBranch[]>;\n\n  getClass(): any;\n\n  getDefinitionInputMapParam(inputParamName: string, inputParamValue: string): IAssignmentExpression;\n\n  getElementType(actionTypeName: string): string;\n\n  getExpressionConfigurator(): IExpressionConfigurator;\n\n  getExpressionConfiguratorClass(): any;\n\n  getInputMapFromDefinition(definition: IServiceTaskDefinition): IPlainObject;\n\n  getInputMapInspectorWidgetConfig(model?: IProcessActionElementModel): IFormWidgetBuilderConfig;\n}\n"]}