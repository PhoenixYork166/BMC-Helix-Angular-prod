{"version":3,"file":"apply-grid-filter-view-action-design-model.class.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/actions/apply-grid-filter/apply-grid-filter-view-action-design-model.class.ts"],"names":[],"mappings":"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","sourcesContent":["import { RxViewDesignerActionModel, ViewDesignerFacade } from '@helix/platform/view/designer';\nimport { Injector } from '@angular/core';\nimport {\n  ApplyGridFilterMode,\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport { IApplyGridFilterViewActionDesignProperties } from './apply-grid-filter-view-action.types';\nimport {\n  ExpressionFormControlComponent,\n  IExpressionFormControlOptions,\n  IRadioFormControlOptions,\n  IRadioItem,\n  MessageType,\n  RadioFormControlComponent,\n  ValidationFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  distinctUntilChanged,\n  filter,\n  first,\n  map,\n  pluck,\n  skip,\n  switchMap,\n  takeUntil,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { combineLatest, merge, Observable, of } from 'rxjs';\nimport {\n  IRecordGridDesignInspectorColumnConfig,\n  IRecordGridDesignProperties,\n  IRecordGridFilterSelectControlOptions,\n  IRecordGridNamedFilterOptionsMap,\n  RecordGridFilterSelectControlComponent,\n  RX_RECORD_GRID,\n  RxRecordGridDesignUtilsService,\n  RxRecordGridFilterSelectHelperService\n} from '@helix/platform/view/components';\nimport { IRecordDefinition, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { includes, omit } from 'lodash';\nimport { Tooltip } from '@helix/platform/shared/api';\n\nexport class RxApplyGridFilterViewActionDesignModelClass extends RxViewDesignerActionModel {\n  private viewDesignerFacade = this.injector.get(ViewDesignerFacade);\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n  private rxRecordGridDesignUtilsService = this.injector.get(RxRecordGridDesignUtilsService);\n  private rxRecordGridFilterSelectHelperService = this.injector.get(RxRecordGridFilterSelectHelperService);\n\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<IApplyGridFilterViewActionDesignProperties>\n  ): ViewActionDesignEditableProperties<IApplyGridFilterViewActionDesignProperties> {\n    return {\n      targetApi: null,\n      mode: ApplyGridFilterMode.Append,\n      filterValue: {\n        filtersJson: null,\n        basicFilters: null\n      },\n      ...initialProperties\n    };\n  }\n\n  constructor(\n    protected injector: Injector,\n    readonly sandbox: IViewActionDesignSandbox<IApplyGridFilterViewActionDesignProperties>\n  ) {\n    super(injector, sandbox);\n\n    // set initial filters select value from child filter components\n    this.sandbox.children$\n      .pipe(\n        first(),\n        withLatestFrom(this.sandbox.actionProperties$.pipe(pluck('filters'))),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(([filterComponents, filtersJson]) => {\n        const basicFilters =\n          this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(filterComponents);\n\n        this.sandbox.updateActionProperties({\n          filterValue: {\n            basicFilters,\n            filtersJson\n          }\n        });\n      });\n\n    const filterValue$ = this.sandbox.actionProperties$.pipe(pluck('filterValue'), distinctUntilChanged());\n\n    // set filters data on filter select change\n    filterValue$.pipe(skip(1), takeUntil(this.sandbox.destroyed$)).subscribe(({ filtersJson, basicFilters }) => {\n      const filterPayloads = this.rxRecordGridDesignUtilsService.getGridFilterComponentPayloads(basicFilters);\n\n      this.sandbox.setChildren(filterPayloads);\n\n      this.sandbox.updateActionProperties({\n        filters: filtersJson\n      });\n    });\n\n    const mode$ = this.sandbox.actionProperties$.pipe(pluck('mode'), distinctUntilChanged());\n    const targetApi$ = this.sandbox.actionProperties$.pipe(pluck('targetApi'), distinctUntilChanged());\n\n    const gridGuid$: Observable<string> = targetApi$.pipe(\n      map(RxApplyGridFilterViewActionDesignModelClass.extractGuidFromExpression)\n    );\n\n    // reset filters after grid change or when clear mode is selected\n    merge(gridGuid$.pipe(skip(1)), mode$.pipe(filter((mode) => mode === ApplyGridFilterMode.Clear)))\n      .pipe(takeUntil(this.sandbox.destroyed$))\n      .subscribe(() => {\n        this.sandbox.updateActionProperties({\n          filterValue: {\n            basicFilters: null,\n            filtersJson: null\n          }\n        });\n      });\n\n    const gridProperties$: Observable<IRecordGridDesignProperties> = gridGuid$.pipe(\n      switchMap((guid) => (guid ? this.viewDesignerFacade.getComponent(guid) : of(null))),\n      map((item) => (item?.type === RX_RECORD_GRID.type ? item.data : null))\n    );\n\n    const recordDefinition$: Observable<IRecordDefinition> = gridProperties$.pipe(\n      map((item) => item?.recordDefinitionName ?? null),\n      switchMap((recordDefinitionName) =>\n        recordDefinitionName ? this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName) : of(null)\n      )\n    );\n\n    const gridColumns$ = gridProperties$.pipe(map((gridData) => gridData?.columns ?? []));\n\n    const recordDefinitionFiltered$: Observable<IRecordDefinition> = recordDefinition$.pipe(\n      withLatestFrom(gridColumns$),\n      map(([recordDefinition, columns]) => {\n        const fieldIds = columns.filter((col) => col.filterable).map((col) => col.fieldId);\n\n        return recordDefinition\n          ? {\n              ...recordDefinition,\n              fieldDefinitions: recordDefinition.fieldDefinitions.filter((definition) =>\n                fieldIds.includes(String(definition.id))\n              )\n            }\n          : null;\n      })\n    );\n\n    const namedFilterOptionsMap$ = gridColumns$.pipe(\n      map((columns) => this.rxRecordGridFilterSelectHelperService.getNamedFilterOptionsFromColumns(columns))\n    );\n\n    combineLatest([recordDefinitionFiltered$, mode$])\n      .pipe(withLatestFrom(namedFilterOptionsMap$, gridColumns$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([[recordDefinition, mode], namedFilterOptions, columns]) => {\n        this.sandbox.setActionPropertyEditorConfig(\n          this.getActionEditorConfig(recordDefinition, namedFilterOptions, mode, columns)\n        );\n      });\n  }\n\n  getPropertiesByName(): IApplyGridFilterViewActionDesignProperties {\n    return omit(super.getPropertiesByName() as IApplyGridFilterViewActionDesignProperties, 'filterValue');\n  }\n\n  private getActionEditorConfig(\n    recordDefinition?: IRecordDefinition,\n    namedFilterOptions?: IRecordGridNamedFilterOptionsMap,\n    mode?: ApplyGridFilterMode,\n    columns?: IRecordGridDesignInspectorColumnConfig[]\n  ): IViewActionDesignPropertyEditorConfig {\n    const tooltip = new Tooltip(\n      '<b>Begin</b><p>Begin a batch of filter updates.</p><br><b>Append</b><p>Applied filters are added with the AND operator; existing filters for the specified fields are removed.</p><br><b>Remove</b><p>Existing filters are removed if they match the applied filters.</p><br><b>Overwrite</b><p>All existing filters are replaced with the applied filters.</p><br><b>Merge</b><p>Existing filters with a range of values are replaced with the matching applied filters; existing filters for the other fields are combined with the matching applied filters using the OR operator; applied filters for new fields are added with the AND operator.</p><br><b>Clear</b><p>All existing filters are removed.</p><br><b>End</b><p>Apply all pending filter updates executed in a batch.</p>'\n    );\n\n    tooltip.maxWidth = 310;\n\n    const controls: IViewActionDesignPropertyEditorConfig = [\n      {\n        name: 'targetApi',\n        component: ExpressionFormControlComponent,\n        options: {\n          label: 'Record grid',\n          dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n          operators: this.expressionConfigurator.getOperators(),\n          isRequired: true\n        } as IExpressionFormControlOptions\n      },\n      {\n        name: 'mode',\n        component: RadioFormControlComponent,\n        options: {\n          label: 'Mode',\n          tooltip,\n          items: [\n            { label: 'Begin', value: ApplyGridFilterMode.Begin },\n            { label: 'Append', value: ApplyGridFilterMode.Append },\n            { label: 'Remove', value: ApplyGridFilterMode.Remove },\n            { label: 'Overwrite', value: ApplyGridFilterMode.Overwrite },\n            { label: 'Merge', value: ApplyGridFilterMode.Merge },\n            { label: 'Clear', value: ApplyGridFilterMode.Clear },\n            { label: 'End', value: ApplyGridFilterMode.End }\n          ] as IRadioItem[]\n        } as IRadioFormControlOptions\n      }\n    ];\n\n    const filterSelectControl = {\n      name: 'filterValue',\n      component: RecordGridFilterSelectControlComponent,\n      options: {\n        primaryRecordDefinition: recordDefinition,\n        selectedFieldIds: columns.map((column) => column.fieldId),\n        namedFilterOptions,\n        anchorDisabled: !recordDefinition\n      } as IRecordGridFilterSelectControlOptions\n    };\n\n    const emptyFilterMessageControl = {\n      name: 'emptyFilterMessage',\n      component: ValidationFormControlComponent,\n      options: {\n        text: 'Record grid expression required to define a filter.',\n        messageType: MessageType.Error,\n        customStyle: { 'margin-top': '-1rem' }\n      }\n    };\n\n    if (!includes([ApplyGridFilterMode.Begin, ApplyGridFilterMode.End, ApplyGridFilterMode.Clear], mode)) {\n      controls.push(filterSelectControl);\n\n      if (!recordDefinition) {\n        controls.push(emptyFilterMessageControl);\n      }\n    }\n\n    return controls;\n  }\n\n  static extractGuidFromExpression(val: string): string {\n    const matches = val?.match(/^\\${view\\.components\\.([0-9a-z-]+)\\.api}$/);\n\n    return (matches && matches[1]) ?? null;\n  }\n}\n"]}