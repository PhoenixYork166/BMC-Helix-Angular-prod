{"version":3,"file":"select-group-design.model.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/field-components/select-group/design/select-group-design.model.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,+BAA+B,EAC/B,gCAAgC,EAMhC,qBAAqB,EACrB,0BAA0B,EAC3B,MAAM,+BAA+B,CAAC;AACvC,OAAO,EAAiC,8BAA8B,EAAE,MAAM,mCAAmC,CAAC;AAElH,OAAO,EAAE,UAAU,EAAE,oBAAoB,EAAE,GAAG,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AACrH,OAAO,EAAE,MAAM,IAAI,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,IAAI,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AACjH,OAAO,EAAE,aAAa,EAAE,KAAK,EAAc,EAAE,EAAE,MAAM,MAAM,CAAC;AAC5D,OAAO,EAAE,4BAA4B,EAAE,MAAM,oCAAoC,CAAC;AAClF,OAAO,EACL,iCAAiC,EACjC,8BAA8B,EAC9B,gCAAgC,EAChC,mBAAmB,EACpB,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAGL,oBAAoB,EACpB,wBAAwB,EACxB,8BAA8B,EAC/B,MAAM,4BAA4B,CAAC;AAOpC,OAAO,EAAE,gBAAgB,EAAE,MAAM,mDAAmD,CAAC;AAGrF,MAAM,OAAO,sBAAuB,SAAQ,0BAA0B;IA0FpE,YAAmB,QAAkB,EAAY,OAA4D;QAC3G,KAAK,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QADR,aAAQ,GAAR,QAAQ,CAAU;QAAY,YAAO,GAAP,OAAO,CAAqD;QAzF7G,mCAA8B,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAiC,8BAA8B,CAAC,CAAC;QACnH,6BAAwB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAA2B,wBAAwB,CAAC,CAAC;QAEjG,sBAAiB,GAAG,IAAI,CAAC,OAAO;aAC7B,sBAAsB,CAAC,mBAAmB,CAAC,YAAY,CAAC;aACxD,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QAEjC,sBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAC7C,SAAS,CAAC,CAAC,gBAAgB,EAAE,EAAE;YAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAAkC,MAAM,EAAE,gBAAgB,CAAC,CAAC;QAC3G,CAAC,CAAC,CACH,CAAC;QAEF,0BAAqB,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CACjD,SAAS,CAAC,CAAC,gBAAgB,EAAE,EAAE;YAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,yBAAyB,CAC3C,sBAAsB,EACtB,gBAAgB,CACjB,CAAC;QACJ,CAAC,CAAC,EACF,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;QAEF,sBAAiB,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CACjD,SAAS,CAAC,CAAC,oBAA4B,EAAE,EAAE;YACzC,IAAI,oBAAoB,EAAE;gBACxB,OAAO,IAAI,CAAC,8BAA8B;qBACvC,mBAAmB,CAAC,oBAAoB,CAAC;qBACzC,IAAI,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;aACvC;iBAAM;gBACL,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;aACjB;QACH,CAAC,CAAC,EACF,oBAAoB,EAAE,EACtB,GAAG,CAAwC,CAAC,gBAAmC,EAAE,EAAE;YACjF,IAAI,gBAAgB,IAAI,gBAAgB,CAAC,gBAAgB,EAAE;gBACzD,OAAO,OAAO,CAAC,gBAAgB,CAAC,gBAAgB,EAAE;oBAChD,YAAY,EAAE,oBAAoB,CAAC,aAAa,CAAC,SAAS;iBAC3D,CAAC,CAAC;aACJ;iBAAM;gBACL,OAAO,EAAE,CAAC;aACX;QACH,CAAC,CAAC,EACF,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;QAEF,iCAA4B,GAAG,aAAa,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CACjG,GAAG,CAAC,CAAC,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,EAAE,EAAE,CAAC;YAC5C,OAAO,CAAC,gBAAgB,EAAE,EAAE,YAAY,EAAE,oBAAoB,CAAC,aAAa,CAAC,SAAS,EAAE,CAAC;YACzF,gBAAgB;SACjB,CAAC,EACF,GAAG,CAA2D,CAAC,CAAC,yBAAyB,EAAE,gBAAgB,CAAC,EAAE,EAAE,CAC9G,IAAI,CACF,CAAC,gBAAgB,EAAE,EAAE,CACnB,OAAO,CAAC,gBAAgB,EAAE,CAAC,UAAU,EAAE,EAAE;YACvC,MAAM,aAAa,GAAG,IAAI,CAAC,wBAAwB,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;YAE9E,OAAO,CAAC,aAAa,IAAI,CAAC,aAAa,IAAI,gBAAgB,KAAK,gBAAgB,CAAC,IAAI,CAAC,CAAC;QACzF,CAAC,CAAC,EACJ,CAAC,gBAAgB,EAAE,EAAE,CACnB,IAAI,CAAC,gBAAgB,EAAE,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;YACtC,IAAI,EAAE,UAAU,CAAC,IAAI;YACrB,EAAE,EAAE,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC;SAC1B,CAAC,CAAC,EACL,CAAC,OAAO,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,CACrC,CAAC,yBAAyB,CAAC,CAC7B,EACD,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;QAEF,sBAAiB,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAA+B,CAAC;QAEnF,qBAAgB,GAA8C,IAAI,CAAC,iBAAiB,CAAC,IAAI,CACvF,GAAG,CAAC,CAAC,yBAAyB,EAAE,EAAE,CAChC,IAAI,CAAC,yBAAyB,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,iCACtC,KAAK,CAAC,IAAI,KACb,IAAI,EAAE,KAAK,CAAC,IAAI,IAChB,CAAC,CACJ,CACF,CAAC;QAaA,+DAA+D;QAC/D,aAAa,CAAC,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,4BAA4B,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;aACnG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACb,SAAS,CAAC,CAAC,CAAC,oBAAoB,EAAE,2BAA2B,EAAE,gBAAgB,CAAC,EAAE,EAAE;YACnF,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAChC,IAAI,CAAC,sBAAsB,CAAC,2BAA2B,EAAE,oBAAoB,EAAE,gBAAgB,CAAC,CACjG,CAAC;QACJ,CAAC,CAAC,CAAC;QAEL,IAAI,CAAC,4BAA4B;aAC9B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;aACxE,SAAS,CAAC,CAAC,CAAC,2BAA2B,EAAE,oBAAoB,EAAE,gBAAgB,CAAC,EAAE,EAAE;YACnF,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAChC,IAAI,CAAC,sBAAsB,CAAC,2BAA2B,EAAE,oBAAoB,EAAE,gBAAgB,CAAC,CACjG,CAAC;QACJ,CAAC,CAAC,CAAC;QAEL,aAAa,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;aACtE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,mBAAmB,EAAE,eAAe,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,mBAAmB,EAAE,eAAe,CAAC,CAAC,CAAC;aAChH,SAAS,CAAC,CAAC,gBAAuD,EAAE,EAAE;YACrE,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACP,CAAC;IAjCD,MAAM,CAAC,oBAAoB,CAAC,iBAA0C;QACpE,qDACK,8BAA8B,GAC9B,gCAAgC,GAChC,iBAAiB,EACpB;IACJ,CAAC;IA6BD,uBAAuB,CAAC,eAA8C;QACpE,MAAM,sBAAsB,GAAG,IAAI,CAAC,yBAAyB,CAAC,eAAe,CAAC,CAAC;QAE/E,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,sBAAsB,CAAC,CAAC;IACnD,CAAC;IAED,eAAe,CAAC,KAA4D;QAC1E,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAChC,GAAG,CAAC,CAAC,gBAAgB,EAAE,EAAE;YACvB,MAAM,eAAe,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,gBAAgB,EAAE,EAAE,EAAE,EAAE,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YAEzG,OAAO,OAAO,CAAC,eAAe,CAAC,IAAI,eAAe,CAAC,WAAW,KAAK,oBAAoB,CAAC,YAAY,CAAC,QAAQ,CAAC;QAChH,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED,mBAAmB,CAAC,UAAU;QAC5B,OAAO,IAAI,CAAC,UAAU,EAAE,CAAC,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,iCAAiC,CAAC,CAAC,CAAC;IAC/F,CAAC;IAEO,QAAQ,CACd,mBAA2C,EAC3C,eAA8C;QAE9C,MAAM,uBAAuB,GAAa,EAAE,CAAC;QAE7C,IAAI,OAAO,CAAC,eAAe,CAAC,EAAE;YAC5B,uBAAuB,CAAC,IAAI,CAAC,4BAA4B,CAAC,CAAC;SAC5D;aAAM;YACL,MAAM,eAAe,GAAG,OAAO,CAAC,eAAe,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAEzE,IAAI,eAAe,CAAC,MAAM,KAAK,eAAe,CAAC,MAAM,EAAE;gBACrD,uBAAuB,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;aAChE;YAED,IAAI,MAAM,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC,MAAM,KAAK,eAAe,CAAC,MAAM,EAAE;gBACtE,uBAAuB,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;aAChE;YAED,IAAI,MAAM,CAAC,eAAe,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC,MAAM,EAAE;gBAC5E,uBAAuB,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;aACzE;YAED,IAAI,MAAM,CAAC,eAAe,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE;gBAC5D,uBAAuB,CAAC,IAAI,CAAC,0DAA0D,CAAC,CAAC;aAC1F;SACF;QAED,MAAM,gBAAgB,GAAG,uBAAuB;aAC7C,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;aACnD,MAAM,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,CAAC,CAAC;QAEtD,OAAO,EAAE,CAAC,gBAAgB,CAAC,CAAC;IAC9B,CAAC;IAEO,yBAAyB,CAAC,eAA8C;QAC9E,OAAO,IAAI,CAAC,eAAe,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YACvC,IAAI,EAAE,mBAAmB,CAAC,gBAAgB;YAC1C,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,MAAM,CAAC;SAC1B,CAAC,CAAC,CAAC;IACN,CAAC;IAEO,sBAAsB,CAC5B,kBAAoC,EACpC,oBAA4B,EAC5B,gBAAwB;QAExB,MAAM,YAAY,GAAG;YACnB,KAAK,EAAE,SAAS;YAChB,QAAQ,EAAE,EAAE;SACb,CAAC;QAEF,IAAI,oBAAoB,EAAE;YACxB,YAAY,CAAC,QAAQ,GAAG,CAAC,+BAA+B,EAAE,EAAE,GAAG,gCAAgC,EAAE,CAAC,CAAC;SACpG;aAAM;YACL,YAAY,CAAC,QAAQ,GAAG;gBACtB;oBACE,SAAS,EAAE,8BAA8B;oBACzC,OAAO,EAAE;wBACP,IAAI,EAAE,qEAAqE;wBAC3E,YAAY,EAAE,sBAAsB;wBACpC,aAAa,EAAE,gBAAgB;qBACC;iBACnC;aACF,CAAC;SACH;QAED,OAAO;YACL,uBAAuB,EAAE,oBAAoB;gBAC3C,CAAC,CAAC;oBACE,YAAY;oBACZ;wBACE,KAAK,EAAE,WAAW;wBAClB,QAAQ,EAAE;4BACR;gCACE,SAAS,EAAE,4BAA4B;gCACvC,OAAO,EAAE;oCACP,kBAAkB,EAAE,kBAAkB;iCACL;6BACpC;yBACF;qBACF;iBACF;gBACH,CAAC,CAAC,CAAC,YAAY,CAAC;SACnB,CAAC;IACJ,CAAC;CACF","sourcesContent":["import {\n  getDisabledFieldInspectorConfig,\n  getStandardPropsInspectorConfigs,\n  IViewComponentDesignData,\n  IViewComponentDesignSandbox,\n  IViewComponentDesignSetPayload,\n  IViewComponentDesignValidationIssue,\n  IViewDesignerInspectorConfig,\n  validateStandardProps,\n  ViewDesignerComponentModel\n} from '@helix/platform/view/designer';\nimport { IValidationFormControlOptions, ValidationFormControlComponent } from '@helix/platform/shared/components';\nimport { Injector } from '@angular/core';\nimport { catchError, distinctUntilChanged, map, shareReplay, switchMap, take, withLatestFrom } from 'rxjs/operators';\nimport { filter as _filter, find, flow, isEmpty, map as _map, omit, pick, reject, sortBy, uniqBy } from 'lodash';\nimport { combineLatest, EMPTY, Observable, of } from 'rxjs';\nimport { FieldSetFormControlComponent } from './field-set-form-control.component';\nimport {\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RX_DISABLED_PROP_DEFAULT_VALUE,\n  RX_STANDARD_PROPS_DEFAULT_VALUES,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport {\n  IFieldDefinition,\n  IRecordDefinition,\n  RX_RECORD_DEFINITION,\n  RxFieldDefinitionService,\n  RxRecordDefinitionCacheService\n} from '@helix/platform/record/api';\nimport { RxSelectOption } from '@bmc-ux/adapt-angular';\nimport {\n  ISelectGroupFieldProperties,\n  ISelectGroupFormControlOptions,\n  ISelectGroupProperties\n} from './select-group-design.types';\nimport { RecordEditorMode } from '../../../record-editor/common/record-editor.types';\nimport { IRecordEditorProperties } from '../../../record-editor/design/record-editor-design.types';\n\nexport class SelectGroupDesignModel extends ViewDesignerComponentModel {\n  rxRecordDefinitionCacheService = this.injector.get<RxRecordDefinitionCacheService>(RxRecordDefinitionCacheService);\n  rxFieldDefinitionService = this.injector.get<RxFieldDefinitionService>(RxFieldDefinitionService);\n\n  recordEditorGuid$ = this.sandbox\n    .getParentComponentGuid(RxViewComponentType.RecordEditor)\n    .pipe(take(1), shareReplay(1));\n\n  recordEditorMode$ = this.recordEditorGuid$.pipe(\n    switchMap((recordEditorGuid) => {\n      return this.sandbox.getComponentPropertyValue<'mode', IRecordEditorProperties>('mode', recordEditorGuid);\n    })\n  );\n\n  recordDefinitionName$ = this.recordEditorGuid$.pipe(\n    switchMap((recordEditorGuid) => {\n      return this.sandbox.getComponentPropertyValue<'recordDefinitionName', IRecordEditorProperties>(\n        'recordDefinitionName',\n        recordEditorGuid\n      );\n    }),\n    shareReplay(1)\n  );\n\n  fieldDefinitions$ = this.recordDefinitionName$.pipe(\n    switchMap((recordDefinitionName: string) => {\n      if (recordDefinitionName) {\n        return this.rxRecordDefinitionCacheService\n          .getRecordDefinition(recordDefinitionName)\n          .pipe(catchError((error) => EMPTY));\n      } else {\n        return of(null);\n      }\n    }),\n    distinctUntilChanged(),\n    map<IRecordDefinition, IFieldDefinition[]>((recordDefinition: IRecordDefinition) => {\n      if (recordDefinition && recordDefinition.fieldDefinitions) {\n        return _filter(recordDefinition.fieldDefinitions, {\n          resourceType: RX_RECORD_DEFINITION.resourceTypes.character\n        });\n      } else {\n        return [];\n      }\n    }),\n    shareReplay(1)\n  );\n\n  inspectorTargetFieldOptions$ = combineLatest([this.fieldDefinitions$, this.recordEditorMode$]).pipe(\n    map(([fieldDefinitions, recordEditorMode]) => [\n      _filter(fieldDefinitions, { resourceType: RX_RECORD_DEFINITION.resourceTypes.character }),\n      recordEditorMode\n    ]),\n    map<[IFieldDefinition[], RecordEditorMode], RxSelectOption[]>(([characterFieldDefinitions, recordEditorMode]) =>\n      flow(\n        (fieldDefinitions) =>\n          _filter(fieldDefinitions, (definition) => {\n            const isSystemField = this.rxFieldDefinitionService.isSystemField(definition);\n\n            return !isSystemField || (isSystemField && recordEditorMode === RecordEditorMode.Edit);\n          }),\n        (fieldDefinitions) =>\n          _map(fieldDefinitions, (definition) => ({\n            name: definition.name,\n            id: String(definition.id)\n          })),\n        (options) => sortBy(options, 'name')\n      )(characterFieldDefinitions)\n    ),\n    shareReplay(1)\n  );\n\n  fieldsDesignData$ = this.sandbox.getChildComponents<ISelectGroupFieldProperties>();\n\n  fieldProperties$: Observable<ISelectGroupFieldProperties[]> = this.fieldsDesignData$.pipe(\n    map((fieldComponentsDesignData) =>\n      _map(fieldComponentsDesignData, (field) => ({\n        ...field.data,\n        guid: field.guid\n      }))\n    )\n  );\n\n  static getInitialProperties(initialProperties?: ISelectGroupProperties): ISelectGroupProperties {\n    return {\n      ...RX_DISABLED_PROP_DEFAULT_VALUE,\n      ...RX_STANDARD_PROPS_DEFAULT_VALUES,\n      ...initialProperties\n    };\n  }\n\n  constructor(public injector: Injector, protected sandbox: IViewComponentDesignSandbox<ISelectGroupProperties>) {\n    super(injector, sandbox);\n\n    // initial inspector configuration and component properties set\n    combineLatest([this.recordDefinitionName$, this.inspectorTargetFieldOptions$, this.recordEditorGuid$])\n      .pipe(take(1))\n      .subscribe(([recordDefinitionName, inspectorTargetFieldOptions, recordEditorGuid]) => {\n        this.sandbox.updateInspectorConfig(\n          this.getBaseInspectorConfig(inspectorTargetFieldOptions, recordDefinitionName, recordEditorGuid)\n        );\n      });\n\n    this.inspectorTargetFieldOptions$\n      .pipe(withLatestFrom(this.recordDefinitionName$, this.recordEditorGuid$))\n      .subscribe(([inspectorTargetFieldOptions, recordDefinitionName, recordEditorGuid]) => {\n        this.sandbox.updateInspectorConfig(\n          this.getBaseInspectorConfig(inspectorTargetFieldOptions, recordDefinitionName, recordEditorGuid)\n        );\n      });\n\n    combineLatest([this.sandbox.componentProperties$, this.fieldProperties$])\n      .pipe(switchMap(([componentProperties, fieldProperties]) => this.validate(componentProperties, fieldProperties)))\n      .subscribe((validationIssues: IViewComponentDesignValidationIssue[]) => {\n        this.sandbox.setValidationIssues(validationIssues);\n      });\n  }\n\n  onFieldPropertiesChange(fieldProperties: ISelectGroupFieldProperties[]): void {\n    const fieldComponentPayloads = this.getFieldComponentPayloads(fieldProperties);\n\n    this.sandbox.setChildren(fieldComponentPayloads);\n  }\n\n  isFieldRequired(field: IViewComponentDesignData<ISelectGroupFieldProperties>): Observable<boolean> {\n    return this.fieldDefinitions$.pipe(\n      map((fieldDefinitions) => {\n        const fieldDefinition = field.data.fieldId && find(fieldDefinitions, { id: Number(field.data.fieldId) });\n\n        return Boolean(fieldDefinition) && fieldDefinition.fieldOption === RX_RECORD_DEFINITION.fieldOptions.required;\n      })\n    );\n  }\n\n  getPropertiesByName(properties) {\n    return pick(properties, ['disabled', 'hidden', 'styles', RX_AVAILABLE_ON_DEVICES_PROP_NAME]);\n  }\n\n  private validate(\n    componentProperties: ISelectGroupProperties,\n    fieldProperties: ISelectGroupFieldProperties[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    const validationErrorMessages: string[] = [];\n\n    if (isEmpty(fieldProperties)) {\n      validationErrorMessages.push('Field set cannot be empty.');\n    } else {\n      const fieldsWithLabel = _filter(fieldProperties, (model) => model.label);\n\n      if (fieldsWithLabel.length !== fieldProperties.length) {\n        validationErrorMessages.push('Display label cannot be blank.');\n      }\n\n      if (uniqBy(fieldsWithLabel, 'label').length !== fieldsWithLabel.length) {\n        validationErrorMessages.push('Display labels must be unique.');\n      }\n\n      if (reject(fieldProperties, (model) => model.namedListDefinitionName).length) {\n        validationErrorMessages.push('Named list for options cannot be blank.');\n      }\n\n      if (reject(fieldProperties, (model) => model.fieldId).length) {\n        validationErrorMessages.push('Field for storing selected option value cannot be blank.');\n      }\n    }\n\n    const validationIssues = validationErrorMessages\n      .map((message) => this.sandbox.createError(message))\n      .concat(validateStandardProps(componentProperties));\n\n    return of(validationIssues);\n  }\n\n  private getFieldComponentPayloads(fieldProperties: ISelectGroupFieldProperties[]): IViewComponentDesignSetPayload[] {\n    return _map(fieldProperties, (model) => ({\n      type: RxViewComponentType.SelectGroupField,\n      guid: model.guid,\n      data: omit(model, 'guid')\n    }));\n  }\n\n  private getBaseInspectorConfig(\n    targetFieldOptions: RxSelectOption[],\n    recordDefinitionName: string,\n    recordEditorGuid: string\n  ): IViewDesignerInspectorConfig {\n    const generalGroup = {\n      label: 'General',\n      controls: []\n    };\n\n    if (recordDefinitionName) {\n      generalGroup.controls = [getDisabledFieldInspectorConfig(), ...getStandardPropsInspectorConfigs()];\n    } else {\n      generalGroup.controls = [\n        {\n          component: ValidationFormControlComponent,\n          options: {\n            text: 'You must select a Record definition before editing field component.',\n            propertyName: 'recordDefinitionName',\n            componentGuid: recordEditorGuid\n          } as IValidationFormControlOptions\n        }\n      ];\n    }\n\n    return {\n      inspectorSectionConfigs: recordDefinitionName\n        ? [\n            generalGroup,\n            {\n              label: 'Field set',\n              controls: [\n                {\n                  component: FieldSetFormControlComponent,\n                  options: {\n                    targetFieldOptions: targetFieldOptions\n                  } as ISelectGroupFormControlOptions\n                }\n              ]\n            }\n          ]\n        : [generalGroup]\n    };\n  }\n}\n"]}