{"version":3,"file":"rich-textarea-field-design.model.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/field-components/rich-textarea-field/design/rich-textarea-field-design.model.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,4BAA4B,CAAC;AAElE,OAAO,EAAE,SAAS,EAAE,MAAM,QAAQ,CAAC;AAEnC,OAAO,EAAE,GAAG,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AACrD,OAAO,EAAE,2BAA2B,EAAE,MAAM,uCAAuC,CAAC;AAEpF,MAAM,OAAO,4BAA6B,SAAQ,2BAA2B;IAA7E;;QACE,uBAAkB,GAAG,CAAC,oBAAoB,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;IAqBtE,CAAC;IAnBC,kBAAkB;QAChB,OAAO,KAAK,CAAC,kBAAkB,EAAE,CAAC,IAAI,CACpC,cAAc,CAAC,IAAI,CAAC,0BAA0B,CAAC,EAC/C,GAAG,CAAC,CAAC,CAAC,eAAe,EAAE,uBAAuB,CAAC,EAAE,EAAE;YACjD,MAAM,eAAe,GAAG,uBAAuB;iBAC5C,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC;iBACnC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;gBACf,EAAE,EAAE,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;gBACpB,IAAI,EAAE,KAAK,CAAC,IAAI;aACjB,CAAC,CAAC,CAAC;YAEN,MAAM,kBAAkB,GAAiC,SAAS,CAAC,eAAe,CAAC,CAAC;YAEpF,kBAAkB,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,GAAG,CAAC,GAAG,eAAe,CAAC,CAAC;YAEjG,OAAO,kBAAkB,CAAC;QAC5B,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport { IViewDesignerInspectorConfig } from '@helix/platform/view/designer';\nimport { cloneDeep } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { BaseRecordEditorFieldDesign } from '../../base-record-editor-field/design';\n\nexport class RichTextareaFieldDesignModel extends BaseRecordEditorFieldDesign {\n  fieldResourceTypes = [RX_RECORD_DEFINITION.resourceTypes.character];\n\n  getInspectorConfig(): Observable<IViewDesignerInspectorConfig> {\n    return super.getInspectorConfig().pipe(\n      withLatestFrom(this.availableFieldDefinitions$),\n      map(([inspectorConfig, recordFieldsSelectItems]) => {\n        const availableFields = recordFieldsSelectItems\n          .filter((field) => !field.maxLength)\n          .map((field) => ({\n            id: String(field.id),\n            name: field.name\n          }));\n\n        const newInspectorConfig: IViewDesignerInspectorConfig = cloneDeep(inspectorConfig);\n\n        newInspectorConfig.inspectorSectionConfigs[0].controls[0].options.options = [...availableFields];\n\n        return newInspectorConfig;\n      })\n    );\n  }\n}\n"]}