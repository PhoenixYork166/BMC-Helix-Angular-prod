{"version":3,"file":"definition-picker-or-expression-form-control.component.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/shared/components/form-controls/definition-picker-or-expression-form-control/definition-picker-or-expression-form-control.component.ts","../../../../../../../../libs/platform/shared/components/form-controls/definition-picker-or-expression-form-control/definition-picker-or-expression-form-control.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAU,MAAM,EAAE,MAAM,eAAe,CAAC;AAC/E,OAAO,EAAE,iBAAiB,EAAE,MAAM,gBAAgB,CAAC;AAInD,OAAO,EAAE,oBAAoB,EAAE,MAAM,yBAAyB,CAAC;AAC/D,OAAO,EAAE,aAAa,EAAE,MAAM,mCAAmC,CAAC;;;;;;;;AAIlE,IAAK,yCAGJ;AAHD,WAAK,yCAAyC;IAC5C,sEAAyB,CAAA;IACzB,sEAAyB,CAAA;AAC3B,CAAC,EAHI,yCAAyC,KAAzC,yCAAyC,QAG7C;AAcD,MAAM,OAAO,gDACX,SAAQ,aAAqB;IAb/B;;QAuBE,WAAM,GAAsB,IAAI,YAAY,EAAE,CAAC;QAI/C,kBAAa,GAAG,yCAAyC,CAAC;QAC1D,eAAU,GAAG,yCAAyC,CAAC,UAAU,CAAC;KAwCnE;IAtCC,QAAQ;QACN,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,KAAK,CAAC;YACxD,CAAC,CAAC,yCAAyC,CAAC,UAAU;YACtD,CAAC,CAAC,yCAAyC,CAAC,UAAU,CAAC;QAEzD,IAAI,CAAC,uBAAuB,GAAG;YAC7B,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,cAAc;YAC3C,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;SAC1B,CAAC;QAEF,IAAI,CAAC,4BAA4B,GAAG;YAClC,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe;YAC7C,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;YACjC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;SAC1B,CAAC;IACJ,CAAC;IAED,UAAU,CAAC,IAA+C;QACxD,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,EAAE;YAC5B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;SACnB;aAAM,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;YACjD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;gBACf,IAAI,EAAE,oBAAoB,CAAC,MAAM,CAAC,oBAAoB;gBACtD,OAAO,EAAE;oBACP,YAAY,EAAE,IAAI,CAAC,YAAY;iBAChC;aACF,CAAC,CAAC;SACJ;IACH,CAAC;IAED,kBAAkB,CAAC,eAAuB;QACxC,IAAI,CAAC,KAAK,GAAG,eAAe,CAAC;IAC/B,CAAC;IAEO,uBAAuB,CAAC,cAAsB;QACpD,OAAO,OAAO,CAAC,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;IACpD,CAAC;;6IAvDU,gDAAgD;iIAAhD,gDAAgD,uKARhD;QACT;YACE,OAAO,EAAE,iBAAiB;YAC1B,WAAW,EAAE,gDAAgD;YAC7D,KAAK,EAAE,IAAI;SACZ;KACF,iDCzBH,smDAiDA;2FDtBa,gDAAgD;kBAZ5D,SAAS;mBAAC;oBACT,QAAQ,EAAE,iDAAiD;oBAC3D,WAAW,EAAE,6DAA6D;oBAC1E,SAAS,EAAE,CAAC,6DAA6D,CAAC;oBAC1E,SAAS,EAAE;wBACT;4BACE,OAAO,EAAE,iBAAiB;4BAC1B,WAAW,kDAAkD;4BAC7D,KAAK,EAAE,IAAI;yBACZ;qBACF;iBACF;8BAMC,OAAO;sBADN,KAAK;gBAIN,YAAY;sBADX,KAAK;gBAIN,MAAM;sBADL,MAAM","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { IFormControlComponent } from '@helix/platform/shared/api';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IDefinitionPickerComponentOptions } from '../../definition-picker';\nimport { RX_EXPRESSION_EDITOR } from '../../expression-editor';\nimport { ValueAccessor } from '../../form-builder/value-accessor';\nimport { IExpressionFormControlOptions } from '../expression-form-control';\nimport { IDefinitionPickerOrExpressionFormControlOptions } from './definition-picker-or-expression-form-control.types';\n\nenum DefinitionPickerOrExpressionComponentMode {\n  Definition = 'Definition',\n  Expression = 'Expression'\n}\n\n@Component({\n  selector: 'rx-definition-picker-or-expression-form-control',\n  templateUrl: 'definition-picker-or-expression-form-control.component.html',\n  styleUrls: ['definition-picker-or-expression-form-control.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: DefinitionPickerOrExpressionFormControlComponent,\n      multi: true\n    }\n  ]\n})\nexport class DefinitionPickerOrExpressionFormControlComponent\n  extends ValueAccessor<string>\n  implements OnInit, IFormControlComponent\n{\n  @Input()\n  options: IDefinitionPickerOrExpressionFormControlOptions;\n\n  @Input()\n  propertyPath: string;\n\n  @Output()\n  events: EventEmitter<any> = new EventEmitter();\n\n  definitionPickerOptions: IDefinitionPickerComponentOptions;\n  expressionFormControlOptions: IExpressionFormControlOptions;\n  componentMode = DefinitionPickerOrExpressionComponentMode;\n  activeMode = DefinitionPickerOrExpressionComponentMode.Definition;\n\n  ngOnInit(): void {\n    this.activeMode = this.isDynamicDefinitionName(this.value)\n      ? DefinitionPickerOrExpressionComponentMode.Expression\n      : DefinitionPickerOrExpressionComponentMode.Definition;\n\n    this.definitionPickerOptions = {\n      definitionType: this.options.definitionType,\n      label: this.options.label\n    };\n\n    this.expressionFormControlOptions = {\n      dataDictionary$: this.options.dataDictionary$,\n      operators: this.options.operators,\n      label: this.options.label\n    };\n  }\n\n  selectMode(mode: DefinitionPickerOrExpressionComponentMode): void {\n    if (this.activeMode !== mode) {\n      this.activeMode = mode;\n      this.value = null;\n    } else if (this.activeMode === mode && this.value) {\n      this.events.emit({\n        type: RX_EXPRESSION_EDITOR.events.openExpressionEditor,\n        payload: {\n          propertyPath: this.propertyPath\n        }\n      });\n    }\n  }\n\n  onModelValueChange(expressionValue: string): void {\n    this.value = expressionValue;\n  }\n\n  private isDynamicDefinitionName(definitionName: string): boolean {\n    return Boolean(definitionName?.match(/\\$\\{.*\\}/));\n  }\n}\n","<div class=\"d-flex flex-row-reverse row toggle-dropdown\">\n  <div class=\"dropdown\" adaptDropdown>\n    <button rx-id=\"toggle-button\" class=\"btn btn-link pl-0\" adaptDropdownToggle type=\"button\">\n      <span class=\"flex-grow-1 rx-ellipsis rx-selected-item\">\n        {{ 'com.bmc.arsys.rx.client.common.select.label' | translate }}\n      </span>\n    </button>\n\n    <div class=\"dropdown-menu\" adaptDropdownMenu>\n      <button\n        type=\"button\"\n        class=\"dropdown-item\"\n        (click)=\"selectMode(componentMode.Definition)\"\n        [class.active]=\"activeMode === componentMode.Definition\"\n      >\n        Select {{ options.definitionType }}\n      </button>\n\n      <button\n        type=\"button\"\n        class=\"dropdown-item\"\n        (click)=\"selectMode(componentMode.Expression)\"\n        [class.active]=\"activeMode === componentMode.Expression\"\n      >\n        {{ 'com.bmc.arsys.rx.client.expression-editor.edit-expression.title' | translate }}\n      </button>\n    </div>\n  </div>\n</div>\n\n<rx-definition-picker\n  *ngIf=\"activeMode === componentMode.Definition\"\n  [ngModel]=\"value\"\n  (ngModelChange)=\"onModelValueChange($event)\"\n  [options]=\"definitionPickerOptions\"\n  [isDisabled]=\"isDisabled\"\n>\n</rx-definition-picker>\n\n<rx-expression-form-control\n  *ngIf=\"activeMode === componentMode.Expression\"\n  [options]=\"expressionFormControlOptions\"\n  [propertyPath]=\"propertyPath\"\n  [disabled]=\"isDisabled\"\n  [ngModel]=\"value\"\n  (ngModelChange)=\"onModelValueChange($event)\"\n  (events)=\"events.emit($event)\"\n>\n</rx-expression-form-control>\n"]}