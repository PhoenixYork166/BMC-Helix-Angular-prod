{"version":3,"file":"object-utils.service.js","sourceRoot":"","sources":["../../../../../../libs/platform/utils/object-utils/object-utils.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { assign, forOwn, isEmpty, isObject, isPlainObject, isUndefined, keys, transform } from 'lodash';\n\ninterface IPlainObject {\n  [name: string]: any;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxObjectUtilsService {\n  /*\n    This method creates an object from a string using '.' as separator, for example:\n    {\n      'foo.bar': 'value',\n      'foo.bar2': 'value2'\n      'foo1[0].bar3': 'value3'\n    }\n    will become:\n    {\n      foo: {\n        bar: 'value',\n        bar2: 'value2'\n      },\n      foo1: {\n        0: {\n          bar3: 'value3\n        }\n      }\n    }\n   */\n  expandProperties<T = object, TResult = T>(serializedParameters: T): TResult {\n    const deserializedParameters = {} as TResult;\n\n    function setNewValue(parameters: IPlainObject, keySegments: string[], value: IPlainObject): void {\n      let i = 0;\n\n      while (i < keySegments.length - 1) {\n        parameters[keySegments[i]] = parameters[keySegments[i]] || {};\n        parameters = parameters[keySegments[i]];\n        i++;\n      }\n\n      parameters[keySegments[i]] = value;\n    }\n\n    forOwn(serializedParameters, function (parameter, key) {\n      /*\n        Regex\n        Input: 'a.b[1].2.c'\n        Output: [\"a\", \"b\", \"1\", \"\", \"2\", \"c\"]\n      */\n      const keySegments = key.split(/[\\.(\\[\\])]/gi).filter(Boolean);\n\n      setNewValue(deserializedParameters, keySegments, parameter);\n    });\n\n    return deserializedParameters;\n  }\n\n  /*\n    This method serializes nested object using '.' as separator, for example:\n    {\n      foo: {\n        bar: 'value',\n        bar2: 'value2'\n      },\n      foo1: 2\n    }\n\n    will become:\n    {\n      'foo.bar': 'value',\n      'foo.bar2': 'value2'\n      'foo1': '2'\n    }\n   */\n  serializeObject<TSource extends IPlainObject, TResult extends IPlainObject>(object: TSource): TResult {\n    return processObject(object) as TResult;\n\n    function processObject(obj: IPlainObject, startWith = {}, prefix?: string): IPlainObject {\n      return transform(\n        obj,\n        (result: IPlainObject, value: any, key: string) => {\n          const setKey = prefix ? [prefix, key].join('.') : key;\n\n          if (isObject(value)) {\n            assign(result, processObject(value, startWith, setKey));\n          } else {\n            result[setKey] = value;\n          }\n        },\n        startWith\n      );\n    }\n  }\n\n  isEmptyObject(value: any): boolean {\n    return isPlainObject(value) && keys(value).length === 0;\n  }\n\n  /**\n   * Creates a deep clone of a value using JSON converting. This method is much faster than cloneDeep from lodash,\n   * but has some serious limitations. To get more details please check JSON.stringify method description.\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description\n   */\n  cloneDeep<T>(value: T): T {\n    return isUndefined(value) ? value : JSON.parse(JSON.stringify(value));\n  }\n\n  mapFromArray<T, K extends keyof T>(collection: T[], propertyName: K): Map<K, T> {\n    return transform(\n      collection,\n      (result, item) => {\n        if (!isEmpty(item[propertyName])) {\n          result.set(item[propertyName], item);\n        }\n      },\n      new Map()\n    );\n  }\n}\n"]}