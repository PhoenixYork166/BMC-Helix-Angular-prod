{"version":3,"file":"view-action.interfaces.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/api/view-action/view-action.interfaces.ts"],"names":[],"mappings":"","sourcesContent":["import { IExpressionEvaluator } from '../expressions/expression-evaluator.types';\nimport { ViewComponentPropertyType } from '../registries/view-component-descriptor.types';\nimport { Injector, Type } from '@angular/core';\nimport {\n  IExpressionConfigurator,\n  IFormControlBuilderConfig,\n  IFormControlComponent,\n  IPlainObject\n} from '@helix/platform/shared/api';\nimport { Observable } from 'rxjs';\nimport { AdaptRxControlLabelTooltip } from '@bmc-ux/adapt-angular';\n\nexport interface IViewActionService<TActionParams = any, TActionResult = any> {\n  execute(params: TActionParams): Observable<TActionResult>;\n}\n\nexport interface IViewActionOutputDataDictionary extends Array<IViewActionOutputDataDictionaryBranch> {}\n\nexport interface IViewActionOutputDataDictionaryBranch {\n  label: string;\n  expression: string;\n  children?: IViewActionOutputDataDictionary;\n}\n\nexport interface IViewActionDescriptor {\n  name: string;\n  bundleId: string;\n  label?: string;\n  availableInBundles?: Array<string | RegExp>;\n  hidden?: boolean;\n  service: IViewActionService;\n  designManager?: IViewActionDesignManager;\n  designModel?: IViewActionDesignModelConstructor;\n  parameters?: IViewActionParamDescriptor[];\n}\n\nexport interface IViewActionChildData<TProperties = IPlainObject> {\n  guid: string;\n  data: TProperties;\n  type: string;\n}\n\nexport interface IViewActionChildSetData<TProperties = IPlainObject> {\n  type: string;\n  guid?: string;\n  data?: TProperties;\n}\n\nexport interface IViewActionDesignSandbox<TDesignActionProperties = IViewActionDesignProperties> {\n  readonly actionProperties$: Observable<ViewActionDesignEditableProperties<TDesignActionProperties>>;\n  readonly actionPropertyEditorConfig$: Observable<IViewActionDesignPropertyEditorConfig>;\n  readonly guid: string;\n  readonly descriptor: IViewActionDescriptor;\n  readonly destroyed$: Observable<void>;\n  readonly children$: Observable<IViewActionChildData[]>;\n\n  updateActionProperties(props: Partial<ViewActionDesignEditableProperties<TDesignActionProperties>>): void;\n\n  setActionProperties(props: ViewActionDesignEditableProperties<TDesignActionProperties>): void;\n\n  getActionProperties(): TDesignActionProperties;\n\n  getActionPropertyValue<TDesignActionPropertyName extends keyof TDesignActionProperties>(\n    propertyName: TDesignActionPropertyName\n  ): TDesignActionProperties[TDesignActionPropertyName];\n\n  setActionPropertyEditorConfig(config: IViewActionDesignPropertyEditorConfig): void;\n\n  getActionPropertyEditorConfig(): IViewActionDesignPropertyEditorConfig;\n\n  setActionOutputDataDictionary(dataDictionary: IViewActionOutputDataDictionary): void;\n\n  setChildren(data: IViewActionChildSetData[]): void;\n\n  getChildren(): IViewActionChildSetData[];\n}\n\nexport interface IViewActionDesignModelConstructor<TViewActionDesignProperties = IViewActionDesignProperties> {\n  new (\n    injector: Injector,\n    sandbox: IViewActionDesignSandbox<TViewActionDesignProperties>\n  ): IViewActionDesignModel<TViewActionDesignProperties>;\n\n  getInitialProperties?(\n    initialProperties: ViewActionDesignEditableProperties<TViewActionDesignProperties>\n  ): ViewActionDesignEditableProperties<TViewActionDesignProperties>;\n}\n\nexport interface IViewActionDesignModel<TViewActionDesignProperties = IViewActionDesignProperties> {\n  readonly guid: string;\n  readonly sandbox: IViewActionDesignSandbox<TViewActionDesignProperties>;\n\n  getPropertiesByName(): TViewActionDesignProperties;\n  getExpressionConfigurator(): IExpressionConfigurator;\n  getChildren?(): IViewActionChildSetData[];\n}\n\nexport interface IViewActionDesignManager<T = IViewActionDesignProperties> {\n  // todo put correct type Observable<IViewComponentDesignValidationIssue[]>\n  validate(actionProperties: T, propertyName: string): Observable<IPlainObject[]>;\n}\n\nexport interface IViewActionDesignProperties {\n  $condition$?: string;\n  readonly name: string;\n  index: number;\n}\n\nexport interface IViewActionDesignPropertyEditorConfig extends Array<IFormControlBuilderConfig> {}\n\nexport type ViewActionDesignEditableProperties<TViewActionDesignProperties> = Omit<\n  TViewActionDesignProperties,\n  'name' | 'index'\n>;\n\nexport interface IViewActionParamDescriptor {\n  name: string;\n  label?: string;\n  tooltip?: AdaptRxControlLabelTooltip;\n  localizable?: boolean;\n  type?: ViewComponentPropertyType;\n  designType?: ViewComponentPropertyType;\n  defaultValue?: any;\n  evaluatorService?: IExpressionEvaluator;\n  enableExpressionEvaluation?: boolean;\n  isRequired?: boolean;\n  editor?: Type<IFormControlComponent>;\n  editorOptions?: IPlainObject;\n  attributes?: IViewActionParamAttribute[]; // used to localize action param attributes\n}\n\nexport interface IViewActionParamAttribute {\n  name: string;\n  localizable?: boolean;\n}\n\n// tslint:disable-next-line:no-empty-interface\nexport interface IViewActionExpressionConfigurator extends IExpressionConfigurator {}\n"]}