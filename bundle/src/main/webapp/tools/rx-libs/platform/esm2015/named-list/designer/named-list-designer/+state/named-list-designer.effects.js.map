{"version":3,"file":"named-list-designer.effects.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/named-list/designer/named-list-designer/+state/named-list-designer.effects.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpResponse } from '@angular/common/http';\nimport { ErrorHandler, Injectable } from '@angular/core';\nimport { INamedListDefinition, RxNamedListDefinitionService } from '@helix/platform/named-list/api';\nimport {\n  RxComponentCanDeactivateGuard,\n  RxDefinitionNameService,\n  RxDefinitionUpdateService,\n  RxNotificationService\n} from '@helix/platform/shared/api';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport { last } from 'lodash';\nimport { of } from 'rxjs';\nimport { catchError, filter, map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport { NamedListDesignerService } from '../../named-list-designer.service';\nimport * as NamedListDesignerActions from './named-list-designer.actions';\nimport {\n  bundleIdSelector,\n  definitionModelSelector,\n  definitionNameSelector,\n  originalDefinitionSelector\n} from './named-list-designer.selectors';\n\n@Injectable()\nexport class NamedListDesignerEffects {\n  constructor(\n    private store$: Store<any>,\n    private actions$: Actions,\n    private errorHandler: ErrorHandler,\n    private rxDefinitionUpdateService: RxDefinitionUpdateService,\n    private namedListDesignerService: NamedListDesignerService,\n    private rxNotificationService: RxNotificationService,\n    private translateService: TranslateService,\n    private rxNamedListDefinitionService: RxNamedListDefinitionService,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private rxComponentCanDeactivateGuard: RxComponentCanDeactivateGuard\n  ) {}\n\n  initNamedListDesigner$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(NamedListDesignerActions.init),\n      map((action) => NamedListDesignerActions.loadDefinition())\n    )\n  );\n\n  loadDefinition$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(NamedListDesignerActions.loadDefinition),\n      withLatestFrom(this.store$.select(definitionNameSelector)),\n      switchMap(([action, definitionName]) =>\n        definitionName\n          ? this.rxNamedListDefinitionService.get(definitionName)\n          : this.rxNamedListDefinitionService.getNew()\n      ),\n      map((definition: INamedListDefinition) =>\n        NamedListDesignerActions.loadDefinitionSuccess({\n          definition\n        })\n      )\n    )\n  );\n\n  loadDefinitionSuccess$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(NamedListDesignerActions.loadDefinitionSuccess),\n      map((action) => {\n        let definitionModelFromDefinition = {\n          version: action.definition.version,\n          lastUpdateTime: action.definition.lastUpdateTime,\n          lastChangedBy: action.definition.lastChangedBy,\n          owner: action.definition.owner,\n          name: this.rxDefinitionNameService.getDisplayName(action.definition.name),\n          tags: action.definition.tags,\n          description: action.definition.description,\n          guid: action.definition.guid,\n          recordDefinitionName: action.definition.recordDefinitionName,\n          queryCriteria: action.definition.queryCriteria,\n          searchBehavior: action.definition.searchBehavior,\n          labelFieldId: action.definition.labelFieldId,\n          valueFieldId: action.definition.valueFieldId,\n          fields: action.definition.fields,\n          customizationOptions: {\n            isDisabled: false,\n            definitionTypeDisplayName: null,\n            allowOverlay: action.definition.allowOverlay,\n            scope: action.definition.scope,\n            overlayGroupId: action.definition.overlayGroupId,\n            overlayDescriptor: action.definition.overlayDescriptor\n          }\n        };\n\n        return NamedListDesignerActions.initDefinitionData({\n          definition: action.definition,\n          definitionModel: definitionModelFromDefinition\n        });\n      })\n    )\n  );\n\n  revertCustomization$ = createEffect(\n    () =>\n      this.actions$.pipe(\n        ofType(NamedListDesignerActions.revertCustomization),\n        withLatestFrom(this.store$.select(definitionModelSelector), this.store$.select(bundleIdSelector)),\n        switchMap(([_, definitionModel, bundleId]) =>\n          this.rxNamedListDefinitionService.revertCustomization(`${bundleId}:${definitionModel.name}`)\n        ),\n        tap(() => {\n          this.rxComponentCanDeactivateGuard.disable();\n          window.location.reload();\n        })\n      ),\n    { dispatch: false }\n  );\n\n  markPristine$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(NamedListDesignerActions.initDefinitionData, NamedListDesignerActions.saveDefinition),\n      map(() => NamedListDesignerActions.markDesignerPristine())\n    )\n  );\n\n  markDirty$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(NamedListDesignerActions.updateDefinitionModelFromDesigner, NamedListDesignerActions.saveDefinitionError),\n      map(() => NamedListDesignerActions.markDesignerDirty())\n    )\n  );\n\n  saveDefinition$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(NamedListDesignerActions.saveDefinition),\n      withLatestFrom(\n        this.store$.select(definitionModelSelector),\n        this.store$.select(originalDefinitionSelector),\n        this.store$.select(bundleIdSelector)\n      ),\n      switchMap(([_, definitionModel, originalDefinition, bundleId]) => {\n        const definition = {\n          ...originalDefinition,\n          ...this.namedListDesignerService.getDefinitionFromDefinitionModel(definitionModel, bundleId)\n        };\n\n        return (\n          definition.lastUpdateTime\n            ? this.rxDefinitionUpdateService.execute(\n                this.rxNamedListDefinitionService.update.bind(this.rxNamedListDefinitionService, definition)\n              )\n            : this.rxNamedListDefinitionService.create(definition)\n        ).pipe(\n          map((response: HttpResponse<any>) => {\n            const definitionName =\n              decodeURIComponent(last(response?.headers.get('location').split('/')) || '') ||\n              this.rxDefinitionNameService.getDefinitionName(bundleId, definitionModel.name);\n\n            return NamedListDesignerActions.saveDefinitionSuccess({\n              savedDefinitionName: definitionName\n            });\n          }),\n          catchError((error) => {\n            this.errorHandler.handleError(error);\n\n            return of(NamedListDesignerActions.saveDefinitionError());\n          })\n        );\n      })\n    )\n  );\n\n  saveDefinitionSuccess$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(NamedListDesignerActions.saveDefinitionSuccess),\n      withLatestFrom(this.store$.select(definitionNameSelector)),\n      tap(() => {\n        this.rxNotificationService.addSuccessMessage(\n          this.translateService.instant('com.bmc.arsys.rx.client.designer.definition-saved-successfully.message', {\n            definitionTypeDisplayName: this.translateService.instant(\n              'com.bmc.arsys.rx.client.common.named-list-definition.label'\n            )\n          })\n        );\n      }),\n      filter(([action, definitionName]) => !!definitionName),\n      map(() => NamedListDesignerActions.loadDefinition())\n    )\n  );\n}\n"]}