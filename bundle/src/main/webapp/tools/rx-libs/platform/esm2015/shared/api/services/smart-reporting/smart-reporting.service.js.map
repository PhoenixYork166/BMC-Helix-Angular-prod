{"version":3,"file":"smart-reporting.service.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/shared/api/services/smart-reporting/smart-reporting.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAqB,MAAM,sBAAsB,CAAC;AACrE,OAAO,EAAc,EAAE,EAAE,MAAM,MAAM,CAAC;AACtC,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAE9D,OAAO,EAAE,mBAAmB,EAAE,MAAM,uBAAuB,CAAC;AAC5D,OAAO,EAAE,2BAA2B,EAAE,MAAM,sBAAsB,CAAC;;;;;AAKnE,MAAM,OAAO,uBAAuB;IAGlC,YACU,UAAsB,EACtB,mBAAwC,EACxC,2BAAwD;QAFxD,eAAU,GAAV,UAAU,CAAY;QACtB,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,gCAA2B,GAA3B,2BAA2B,CAA6B;QAEhE,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC,IAAI,CACzD,UAAU,CAAC,CAAC,KAAwB,EAAE,EAAE;YACtC,IAAI,CAAC,2BAA2B,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YAE/C,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;QAChB,CAAC,CAAC,EACF,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;IACJ,CAAC;IAED,sEAAsE;IACtE,wFAAwF;IACxF,+GAA+G;IAC/G,kBAAkB,CAAC,MAAM,GAAG,QAAQ,EAAE,cAA4B,EAAE;QAClE,MAAM,mBAAmB,GAAG,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QAEpD,OAAO,IAAI,CAAC,qBAAqB,CAAC,WAAW,CAAC,CAAC,IAAI,CACjD,GAAG,CAAC,CAAC,iBAAyB,EAAE,EAAE;YAChC,mBAAmB,CAAC,QAAQ,CAAC,IAAI,GAAG,iBAAiB,CAAC;YAEtD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,EACF,UAAU,CAAC,CAAC,aAAgC,EAAE,EAAE;YAC9C,mBAAmB,CAAC,KAAK,EAAE,CAAC;YAE5B,IAAI,aAAa,CAAC,KAAK,KAAK,IAAI,EAAE;gBAChC,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;aAClB;YAED,MAAM,aAAa,CAAC;QACtB,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;IAED,oBAAoB;QAClB,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC;IAEO,qBAAqB,CAAC,cAA4B,EAAE;QAC1D,OAAO,IAAI,CAAC,UAAU;aACnB,GAAG,CAAC,wCAAwC,EAAE;YAC7C,YAAY,EAAE,MAAM;YACpB,MAAM,EAAE,WAAW;SACpB,CAAC;aACD,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACjD,CAAC;;oHArDU,uBAAuB;wHAAvB,uBAAuB,cAFtB,MAAM;2FAEP,uBAAuB;kBAHnC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, shareReplay } from 'rxjs/operators';\nimport { IPlainObject } from '../../common-types';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { RxServerErrorHandlerService } from '../../error-handling';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxSmartReportingService {\n  private smartReportingUrl$: Observable<string>;\n\n  constructor(\n    private httpClient: HttpClient,\n    private rxJsonParserService: RxJsonParserService,\n    private rxServerErrorHandlerService: RxServerErrorHandlerService\n  ) {\n    this.smartReportingUrl$ = this._getSmartReportingUrl().pipe(\n      catchError((error: HttpErrorResponse) => {\n        this.rxServerErrorHandlerService.handle(error);\n\n        return of('');\n      }),\n      shareReplay(1)\n    );\n  }\n\n  // We have to open a blank tab and then or change its url or close it.\n  // Sadly there is no other way around it (even forcing a click on a button for example).\n  // https://tech.europace.de/how-to-open-async-calls-in-a-new-tab-instead-of-new-window-within-an-angularjs-app/\n  openSmartReporting(target = '_blank', queryParams: IPlainObject = {}): Observable<boolean> {\n    const smartReportingPopup = window.open('', target);\n\n    return this._getSmartReportingUrl(queryParams).pipe(\n      map((smartReportingUrl: string) => {\n        smartReportingPopup.location.href = smartReportingUrl;\n\n        return true;\n      }),\n      catchError((errorResponse: HttpErrorResponse) => {\n        smartReportingPopup.close();\n\n        if (errorResponse.error === '[]') {\n          return of(false);\n        }\n\n        throw errorResponse;\n      })\n    );\n  }\n\n  getSmartReportingUrl(): Observable<string> {\n    return this.smartReportingUrl$;\n  }\n\n  private _getSmartReportingUrl(queryParams: IPlainObject = {}): Observable<string> {\n    return this.httpClient\n      .get('/api/rx/application/smartreporting/url', {\n        responseType: 'text',\n        params: queryParams\n      })\n      .pipe(map((url) => decodeURIComponent(url)));\n  }\n}\n"]}