{"version":3,"file":"apply-grid-filter-view-action-design-manager.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/actions/apply-grid-filter/apply-grid-filter-view-action-design-manager.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ApplyGridFilterMode,\n  IViewActionDesignManager,\n  IViewActionDesignProperties,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport {\n  IViewComponentDesignData,\n  IViewComponentDesignValidationIssue,\n  ViewDesignerFacade\n} from '@helix/platform/view/designer';\nimport { forkJoin, merge, Observable, of } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport {\n  IApplyGridFilterViewActionData,\n  IApplyGridFilterViewActionDesignProperties,\n  IApplyGridFilterViewActionGridData,\n  RxApplyGridFilterActionName\n} from './apply-grid-filter-view-action.types';\nimport { distinctUntilChanged, filter, map, shareReplay, skip, switchMap, take, withLatestFrom } from 'rxjs/operators';\nimport { RxApplyGridFilterViewActionDesignModelClass } from './apply-grid-filter-view-action-design-model.class';\nimport {\n  IRecordGridDesignProperties,\n  IRecordGridFilterDescriptorModel,\n  RX_RECORD_GRID,\n  RxRecordGridDesignUtilsService,\n  RxRecordGridFilterHelperService\n} from '@helix/platform/view/components';\nimport { cloneDeep, compact, includes, isEqual, omit, sortBy, uniq } from 'lodash';\n\n@Injectable()\nexport class RxApplyGridFilterViewActionDesignManagerService\n  implements IViewActionDesignManager<IApplyGridFilterViewActionDesignProperties>\n{\n  constructor(\n    private viewDesignerFacade: ViewDesignerFacade,\n    private rxRecordGridDesignUtilsService: RxRecordGridDesignUtilsService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService\n  ) {\n    const applyGridFilterActions$: Observable<IApplyGridFilterViewActionData[]> = this.viewDesignerFacade\n      .getComponentsByType<IViewActionDesignProperties>(RxViewComponentType.Action)\n      .pipe(\n        map(\n          (components) =>\n            components.filter(\n              (comp) => comp.data.name === RxApplyGridFilterActionName\n            ) as IApplyGridFilterViewActionData[]\n        ),\n        shareReplay({ refCount: true, bufferSize: 1 })\n      );\n\n    const gridGuids$ = applyGridFilterActions$.pipe(\n      map((actions) =>\n        actions.map((action) =>\n          RxApplyGridFilterViewActionDesignModelClass.extractGuidFromExpression(action.data.targetApi)\n        )\n      ),\n      map((guids) => sortBy(uniq(compact(guids)))),\n      filter((guids) => Boolean(guids.length)),\n      distinctUntilChanged((a, b) => isEqual(a, b)),\n      shareReplay({ refCount: true, bufferSize: 1 })\n    );\n\n    const updateActionFiltersOnGridColumnsChange$ = gridGuids$.pipe(\n      switchMap((gridGuids) => {\n        const actionsToUpdate$ = gridGuids.map((gridGuid) =>\n          this.getActionsToUpdate(gridGuid, applyGridFilterActions$)\n        );\n\n        return merge(...actionsToUpdate$);\n      })\n    );\n\n    const clearFiltersOnGridDefinitionChange$ = gridGuids$.pipe(\n      switchMap((gridGuids) => {\n        const actionsToUpdate$ = gridGuids.map((gridGuid) =>\n          this.getGridDefinitionChanges(gridGuid).pipe(\n            skip(1),\n            map(() => gridGuid),\n            withLatestFrom(applyGridFilterActions$),\n            map(([guid, actions]) => {\n              const affectedActions = actions.filter((action) => action.data.targetApi.includes(guid));\n\n              return affectedActions.map((actionComponent) => {\n                const updatedActionComponent = cloneDeep(actionComponent);\n\n                updatedActionComponent.data.filters = null;\n\n                return {\n                  component: updatedActionComponent,\n                  children: []\n                };\n              });\n            })\n          )\n        );\n\n        return merge(...actionsToUpdate$);\n      })\n    );\n\n    merge(clearFiltersOnGridDefinitionChange$, updateActionFiltersOnGridColumnsChange$).subscribe((components) => {\n      components.forEach((item) => {\n        this.viewDesignerFacade.updateComponentProperties(item.component.guid, item.component.data);\n        this.viewDesignerFacade.setChildren(item.component.guid, item.children);\n      });\n    });\n  }\n\n  private getActionsToUpdate(gridGuid: string, applyGridFilterActions$: Observable<IApplyGridFilterViewActionData[]>) {\n    return this.getGridColumnChanges(gridGuid).pipe(\n      skip(1),\n      withLatestFrom(applyGridFilterActions$),\n      switchMap(([gridData, actions]) => {\n        // getting actions bound to changed grid\n        const affectedActions = actions.filter((action) => action.data.targetApi.includes(gridData.guid));\n\n        const actionsWithFilters$ = affectedActions.map((action) =>\n          this.viewDesignerFacade.getChildComponents<IRecordGridFilterDescriptorModel>(action.guid).pipe(\n            map((filterComponents) => ({ ...cloneDeep(action), children: filterComponents })),\n            take(1)\n          )\n        );\n\n        return forkJoin(actionsWithFilters$).pipe(\n          map((actionComponents) => {\n            const gridColumnIds = gridData.columns.map((col) => col.fieldId);\n\n            return actionComponents.reduce((result, actionComponent) => {\n              const componentsToUpdate = this.getUpdatedFilterComponents(\n                omit(actionComponent, 'children'),\n                actionComponent.children,\n                gridColumnIds\n              );\n\n              return componentsToUpdate ? result.concat(componentsToUpdate) : result;\n            }, []);\n          })\n        );\n      })\n    );\n  }\n\n  private getGridColumnChanges(guid: string): Observable<IApplyGridFilterViewActionGridData> {\n    return this.viewDesignerFacade\n      .getComponentPropertyValue<'columns', IRecordGridDesignProperties>(guid, 'columns')\n      .pipe(\n        filter((columns) => Array.isArray(columns)),\n        map((columns) => ({\n          guid,\n          columns: columns.map((col) => ({\n            fieldId: col.fieldId,\n            namedFilterOptions: col.namedFilterOptions\n          }))\n        })),\n        distinctUntilChanged<IApplyGridFilterViewActionGridData>(isEqual)\n      );\n  }\n\n  private getGridDefinitionChanges(guid: string): Observable<string> {\n    return this.viewDesignerFacade.getComponentPropertyValue(guid, 'recordDefinitionName').pipe(distinctUntilChanged());\n  }\n\n  private getUpdatedFilterComponents(\n    component: IApplyGridFilterViewActionData,\n    filterComponents: IViewComponentDesignData<IRecordGridFilterDescriptorModel>[],\n    gridColumnIds: string[]\n  ): {\n    component: IApplyGridFilterViewActionData;\n    children: IViewComponentDesignData<IRecordGridFilterDescriptorModel>[];\n  } {\n    const filterComponentsForColumns = filterComponents.filter((item) => gridColumnIds.includes(item.data.fieldId));\n\n    if (filterComponentsForColumns.length !== filterComponents.length) {\n      const updatedFilterComponents =\n        this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(filterComponentsForColumns);\n\n      const newFilterData = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n        component.data.filters,\n        updatedFilterComponents\n      );\n\n      // updating filters JSON after column remove\n      component.data.filters = newFilterData\n        ? this.rxRecordGridFilterHelperService.denormalizeFilterString(\n            JSON.stringify(newFilterData),\n            updatedFilterComponents\n          )\n        : null;\n\n      return {\n        component,\n        children: filterComponentsForColumns\n      };\n    }\n\n    return null;\n  }\n\n  validate(\n    actionProperties: IApplyGridFilterViewActionDesignProperties,\n    propertyName: string\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    const filterValidation =\n      !actionProperties.filters &&\n      !includes([ApplyGridFilterMode.Begin, ApplyGridFilterMode.End, ApplyGridFilterMode.Clear], actionProperties.mode)\n        ? {\n            type: 'error',\n            description: 'Apply grid filter action: Filter is required',\n            propertyName\n          }\n        : null;\n\n    return of(actionProperties.targetApi).pipe(\n      map((targetApi) => RxApplyGridFilterViewActionDesignModelClass.extractGuidFromExpression(targetApi)),\n      switchMap((guid) => (guid ? this.viewDesignerFacade.getComponent(guid) : of(null))),\n      take(1),\n      map((item) => {\n        const issues = [];\n\n        if (actionProperties.targetApi && item?.type !== RX_RECORD_GRID.type) {\n          issues.push({\n            type: 'error',\n            description: 'Apply grid filter action: Record grid expression must point to a record grid.',\n            propertyName\n          });\n        }\n\n        if (actionProperties.targetApi && !issues.length && filterValidation) {\n          issues.push(filterValidation);\n        }\n\n        return issues;\n      })\n    );\n  }\n}\n"]}