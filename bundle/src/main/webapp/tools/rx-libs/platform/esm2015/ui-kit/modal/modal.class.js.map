{"version":3,"file":"modal.class.js","sourceRoot":"","sources":["../../../../../../libs/platform/ui-kit/modal/modal.class.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAU,MAAM,eAAe,CAAC;AACrE,OAAO,EAAE,cAAc,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AAC3E,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;;AAGlE,MAAM,OAAO,YAAY;IASvB,YAC0D,OAA4C,EAC1F,QAAkB;QAD4B,YAAO,GAAP,OAAO,CAAqC;QAC1F,aAAQ,GAAR,QAAQ,CAAU;QATtB,aAAQ,GAAG,KAAK,CAAC;QAEf,cAAS,GAAG;YACpB,aAAa,EAAE,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC;YAC5C,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;SACjC,CAAC;QAMA,IAAI,CAAC,sBAAsB,GAAG,QAAQ,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;IACrE,CAAC;IAED,IAAI,YAAY;;QACd,OAAO,MAAA,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,YAAY,mCAAI,IAAI,CAAC;IACrD,CAAC;IAED,IAAI,YAAY,CAAC,KAAc;QAC7B,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,YAAY,GAAG,KAAK,CAAC;IAC9C,CAAC;IAED,WAAW;QACT,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACvB,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACpD,CAAC;IAED,aAAa;QACX,IAAI,IAAI,CAAC,YAAY,KAAK,KAAK,EAAE;YAC/B,OAAO;SACR;QAED,IAAI,IAAI,CAAC,OAAO,EAAE,EAAE;YAClB,IAAI,CAAC,sBAAsB,CAAC,qBAAqB,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;gBAClE,IAAI,MAAM,EAAE;oBACV,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBAC5B;YACH,CAAC,CAAC,CAAC;SACJ;aAAM;YACL,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC5B;IACH,CAAC;;yGAlDU,YAAY,kBAUb,kBAAkB,IAAI,cAAc;6GAVnC,YAAY;2FAAZ,YAAY;kBADxB,UAAU;;0BAWN,MAAM;2BAAC,kBAAkB,IAAI,cAAc","sourcesContent":["import { Inject, Injectable, Injector, OnInit } from '@angular/core';\nimport { ActiveModalRef, DockedPanelContext } from '@bmc-ux/adapt-angular';\nimport { RxUtilityModalsService } from './utility-modals.service';\n\n@Injectable()\nexport class RxModalClass implements OnInit {\n  private rxUtilityModalsService: RxUtilityModalsService;\n  private _isDirty = false;\n\n  protected dialogApi = {\n    dismissDialog: this.dismissDialog.bind(this),\n    isDirty: this.isDirty.bind(this)\n  };\n\n  constructor(\n    @Inject(DockedPanelContext || ActiveModalRef) protected context: DockedPanelContext | ActiveModalRef,\n    protected injector: Injector\n  ) {\n    this.rxUtilityModalsService = injector.get(RxUtilityModalsService);\n  }\n\n  get allowDismiss(): boolean {\n    return this.context.getData().allowDismiss ?? true;\n  }\n\n  set allowDismiss(value: boolean) {\n    this.context.getData().allowDismiss = value;\n  }\n\n  markAsDirty(): void {\n    this._isDirty = true;\n  }\n\n  isDirty(): boolean {\n    return this._isDirty;\n  }\n\n  ngOnInit() {\n    this.context.getData().onApiReady(this.dialogApi);\n  }\n\n  dismissDialog(): void {\n    if (this.allowDismiss === false) {\n      return;\n    }\n\n    if (this.isDirty()) {\n      this.rxUtilityModalsService.confirmUnsavedChanges().then((result) => {\n        if (result) {\n          this.context.dismiss(null);\n        }\n      });\n    } else {\n      this.context.dismiss(null);\n    }\n  }\n}\n"]}