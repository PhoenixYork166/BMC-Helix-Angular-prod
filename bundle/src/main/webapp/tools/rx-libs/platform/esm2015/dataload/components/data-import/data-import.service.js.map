{"version":3,"file":"data-import.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/dataload/components/data-import/data-import.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,cAAc,EAAE,MAAM,4BAA4B,CAAC;;;AAM5D,MAAM,OAAO,iBAAiB;IAG5B,YAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAF1C,QAAG,GAAG,QAAQ,cAAc,CAAC,gBAAgB,2BAA2B,CAAC;IAE5B,CAAC;IAE9C,cAAc,CAAC,EAAU;QACvB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACtD,CAAC;IAED,kBAAkB,CAAC,EAAU;QAC3B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,QAAQ,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IAC3D,CAAC;IAED,sBAAsB,CAAC,QAAgB;QACrC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAqB,GAAG,IAAI,CAAC,GAAG,GAAG,QAAQ,kBAAkB,CAAC,CAAC;IAC3F,CAAC;IAED,iCAAiC,CAAC,SAAiB;QACjD,OAAO;YACL,IAAI,EAAE,SAAS;YACf,cAAc,EAAE;gBACd,kBAAkB,EAAE;oBAClB,gBAAgB,EAAE;wBAChB,IAAI,EAAE,IAAI;wBACV,IAAI,EAAE,IAAI;qBACX;oBACD,aAAa,EAAE,EAAE;iBAClB;gBACD,mBAAmB,EAAE,EAAE;gBACvB,iBAAiB,EAAE,IAAI;gBACvB,wBAAwB,EAAE;oBACxB,gBAAgB,EAAE,EAAE;oBACpB,iBAAiB,EAAE,IAAI;iBACxB;aACF;SACF,CAAC;IACJ,CAAC;;8GApCU,iBAAiB;kHAAjB,iBAAiB,cAFhB,MAAM;2FAEP,iBAAiB;kBAH7B,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\r\nimport { IDataImportSheetConfiguration, IDataloadWorksheet } from './data-import.types';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DataImportService {\r\n  url = `/api/${RX_APPLICATION.dataloadBundleId}/rx/application/dataload/`;\r\n\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  runLoadProcess(id: string): Observable<any> {\r\n    return this.httpClient.post(`${this.url}${id}`, {});\r\n  }\r\n\r\n  stopDataProcessing(id: string): Observable<any> {\r\n    return this.httpClient.post(`${this.url}stop/${id}`, {});\r\n  }\r\n\r\n  getDataRecordWorksheet(recordId: string): Observable<IDataloadWorksheet> {\r\n    return this.httpClient.get<IDataloadWorksheet>(`${this.url}${recordId}/input_file_conf`);\r\n  }\r\n\r\n  getEmptyCurrentSheetDataMapConfig(sheetName: string): IDataImportSheetConfiguration {\r\n    return {\r\n      name: sheetName,\r\n      configurations: {\r\n        definitionMappings: {\r\n          targetDefinition: {\r\n            type: null,\r\n            name: null\r\n          },\r\n          fieldMappings: []\r\n        },\r\n        dataHandlingOptions: [],\r\n        timeFormatOptions: null,\r\n        duplicateHandlingOptions: {\r\n          matchDuplicateBy: [],\r\n          handleDuplicateBy: null\r\n        }\r\n      }\r\n    };\r\n  }\r\n}\r\n"]}