{"version":3,"file":"record-grid-design-adapter.service.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/record-grid/design/record-grid-design-adapter.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport {\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  IViewLayout,\n  RxViewDefinitionParserService,\n  RxViewLayout\n} from '@helix/platform/view/api';\nimport { find, forEach, pull } from 'lodash';\nimport { RX_RECORD_GRID } from '../record-grid.constant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRecordGridDesignAdapterService\n  implements IDefinitionAdapter<IContainerViewComponentDefinition, IViewDefinition>\n{\n  constructor(\n    private rxJsonParserService: RxJsonParserService,\n    private rxViewDefinitionParserService: RxViewDefinitionParserService\n  ) {}\n\n  adaptDefinition(elementDefinition: IContainerViewComponentDefinition): void {\n    const layout: IViewLayout = this.rxJsonParserService.tryParseJson(elementDefinition.layout);\n    const rowActionsOutlet = find(layout.outlets, { name: RX_RECORD_GRID.rowActionsOutletName });\n\n    elementDefinition.propertiesByName.enableFilterPresets =\n      elementDefinition.propertiesByName.enableFilterPresets ?? 'true';\n\n    if (!rowActionsOutlet) {\n      layout.outlets.push(RxViewLayout.getOutlet(RX_RECORD_GRID.rowActionsOutletName));\n    } else {\n      // move row actions to the end to make sure they are in the same order as in layout outlet\n      forEach(rowActionsOutlet.columns[0]?.children, (rowActionGuid) => {\n        const rowAction = find(elementDefinition.componentDefinitions, { guid: rowActionGuid });\n\n        pull(elementDefinition.componentDefinitions, rowAction).push(rowAction);\n      });\n    }\n\n    elementDefinition.layout = JSON.stringify(layout);\n\n    Object.assign(elementDefinition.propertiesByName, {\n      expandable: elementDefinition.propertiesByName.expandable ?? false,\n      showDataForAllLocales: elementDefinition.propertiesByName.showDataForAllLocales ?? false,\n      requiredFilters:\n        elementDefinition.propertiesByName.requiredFilters ??\n        (elementDefinition.propertiesByName.requireFiltering === 'true' ? 1 : 0)\n    });\n\n    delete elementDefinition.propertiesByName.requireFiltering;\n\n    this.rxViewDefinitionParserService\n      .getComponents(elementDefinition)\n      .map((componentDefinition) => componentDefinition.componentDefinition as IContainerViewComponentDefinition)\n      .forEach((componentDefinition) => {\n        if (componentDefinition.type === RX_RECORD_GRID.components.column) {\n          Object.assign(componentDefinition.propertiesByName, {\n            wrapText: componentDefinition.propertiesByName.wrapText ?? false,\n            typeaheadKeystrokeCount: Number(\n              componentDefinition.propertiesByName.typeaheadKeystrokeCount ??\n                RX_RECORD_GRID.defaultTypeaheadKeystrokeCount\n            )\n          });\n        }\n      });\n  }\n}\n"]}