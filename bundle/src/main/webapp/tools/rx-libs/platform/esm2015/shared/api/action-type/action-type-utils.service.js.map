{"version":3,"file":"action-type-utils.service.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/action-type/action-type-utils.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,QAAQ,CAAC;AAErE,OAAO,EAAE,uBAAuB,EAAE,MAAM,uCAAuC,CAAC;;;AAMhF,MAAM,OAAO,wBAAwB;IACnC,YAAoB,uBAAgD;QAAhD,4BAAuB,GAAvB,uBAAuB,CAAyB;IAAG,CAAC;IAExE,+BAA+B,CAAC,iBAAsC,EAAE,UAAuB;;QAC7F,MAAM,QAAQ,GAAG,IAAI,CAAC,uBAAuB,CAAC,WAAW,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;QAErF,OAAO,CAAC,QAAQ,KAAI,MAAA,IAAI,CAAC,iBAAiB,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,0CAAE,YAAY,CAAA,CAAC,IAAI,EAAE,CAAC;IACrF,CAAC;IAED,4BAA4B,CAAC,eAAoB;QAC/C,OAAO,QAAQ,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,+BAA+B,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;IAC9G,CAAC;IAED,sBAAsB,CAAC,cAAsB;QAC3C,IAAI,MAAM,GAAG,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;QAEzE,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,GAAG,CAAC,EAAE;YAClC,MAAM,GAAG,KAAK,CAAC,MAAM,EAAE,+CAA+C,CAAC;iBACpE,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;iBAChE,IAAI,CAAC,GAAG,CAAC,CAAC;SACd;QAED,OAAO,MAAM,CAAC;IAChB,CAAC;;qHAvBU,wBAAwB;yHAAxB,wBAAwB,cAFvB,MAAM;2FAEP,wBAAwB;kBAHpC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { find, includes, isString, upperFirst, words } from 'lodash';\nimport { IBundleDescriptor } from '../bundle';\nimport { RxDefinitionNameService } from '../definition/definition-name.service';\nimport { IActionType } from './action-type.interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxActionTypeUtilsService {\n  constructor(private rxDefinitionNameService: RxDefinitionNameService) {}\n\n  getActionTypeBundleFriendlyName(bundleDescriptors: IBundleDescriptor[], actionType: IActionType): string {\n    const bundleId = this.rxDefinitionNameService.getBundleId(actionType.actionTypeName);\n\n    return (bundleId && find(bundleDescriptors, { id: bundleId })?.friendlyName) || '';\n  }\n\n  isActionParameterArrayOrList(actionParameter: any) {\n    return isString(actionParameter.dataType) && /^java\\.util\\.List.*|.*\\[.*].*/.test(actionParameter.dataType);\n  }\n\n  prettifyActionTypeName(actionTypeName: string): string {\n    let result = this.rxDefinitionNameService.getDisplayName(actionTypeName);\n\n    if (!includes(actionTypeName, ' ')) {\n      result = words(result, /[a-z|A-Z|0-9]+?([A-Z|0-9]*)+?([-_a-z|0-9]*)+/g)\n        .map((value, index) => (index === 0 ? upperFirst(value) : value))\n        .join(' ');\n    }\n\n    return result;\n  }\n}\n"]}