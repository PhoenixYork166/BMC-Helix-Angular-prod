{"version":3,"file":"text-field-expression-configurator.js","sourceRoot":"","sources":["../../../../../../../../../libs/platform/view/components/field-components/text-field/design/text-field-expression-configurator.ts"],"names":[],"mappings":"AAEA,OAAO,EACL,qCAAqC,EACrC,qCAAqC,EACtC,MAAM,+BAA+B,CAAC;AACvC,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AACnD,OAAO,EAAE,uBAAuB,EAAE,6BAA6B,EAAE,MAAM,4BAA4B,CAAC;AAEpG,MAAM,OAAO,+BAAgC,SAAQ,qCAAqC;IACxF,YACY,QAAkB,EAClB,aAAqB,EACrB,cAAoC;QAE9C,KAAK,CAAC,QAAQ,EAAE,aAAa,EAAE,cAAc,CAAC,CAAC;QAJrC,aAAQ,GAAR,QAAQ,CAAU;QAClB,kBAAa,GAAb,aAAa,CAAQ;QACrB,mBAAc,GAAd,cAAc,CAAsB;QAI9C,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,wBAAwB,CAAC,IAAI,CACvE,MAAM,CAAC,CAAC,eAAe,EAAE,EAAE,CAAC,OAAO,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC,EACzE,SAAS,CAAC,CAAC,eAAe,EAAE,EAAE;YAC5B,MAAM,qCAAqC,GAAG,IAAI,qCAAqC,CACrF,eAAe,EACf,IAAI,CAAC,QAAQ,CACd,CAAC;YAEF,OAAO,qCAAqC,CAAC,iBAAiB,EAAE,CAAC;QACnE,CAAC,CAAC,CACH,CAAC;QAEF,IAAI,CAAC,oBAAoB,CAAC;YACxB,YAAY,EAAE,yBAAyB;YACvC,eAAe;YACf,SAAS,EAAE,6BAA6B,CAAC,GAAG,CAAC,uBAAuB,CAAC,SAAS,CAAC;SAChF,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import { Injector } from '@angular/core';\nimport { TextFieldDesignModel } from './text-field-design.model';\nimport {\n  NamedListFilterExpressionConfigurator,\n  RxViewComponentExpressionConfigurator\n} from '@helix/platform/view/designer';\nimport { filter, switchMap } from 'rxjs/operators';\nimport { ExpressionOperatorGroup, ExpressionOperatorRowsByGroup } from '@helix/platform/shared/api';\n\nexport class TextFieldExpressionConfigurator extends RxViewComponentExpressionConfigurator {\n  constructor(\n    protected injector: Injector,\n    protected componentGuid: string,\n    protected componentModel: TextFieldDesignModel\n  ) {\n    super(injector, componentGuid, componentModel);\n\n    const dataDictionary$ = this.componentModel.selectedFieldDefinition$.pipe(\n      filter((fieldDefinition) => Boolean(fieldDefinition.namedListDefinition)),\n      switchMap((fieldDefinition) => {\n        const namedListFilterExpressionConfigurator = new NamedListFilterExpressionConfigurator(\n          fieldDefinition,\n          this.injector\n        );\n\n        return namedListFilterExpressionConfigurator.getDataDictionary();\n      })\n    );\n\n    this.configureForProperty({\n      propertyPath: 'additionalQueryCriteria',\n      dataDictionary$,\n      operators: ExpressionOperatorRowsByGroup.get(ExpressionOperatorGroup.AllServer)\n    });\n  }\n}\n"]}