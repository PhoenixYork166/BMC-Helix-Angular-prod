{"version":3,"file":"record-grid-sort-editor-control.component.js","sourceRoot":"","sources":["../../../../../../../../../../libs/platform/view/components/record-grid/design/editors/record-grid-sort-editor-control/record-grid-sort-editor-control.component.ts","../../../../../../../../../../libs/platform/view/components/record-grid/design/editors/record-grid-sort-editor-control/record-grid-sort-editor-control.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, OnChanges, OnDestroy, Renderer2, SimpleChanges, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { head, isEmpty, isEqual } from 'lodash';\nimport {\n  IRecordGridSortEditorControlOptions,\n  IRecordGridSortEditorModel\n} from './record-grid-sort-editor-control.types';\nimport { AdaptRxSelectComponent } from '@bmc-ux/adapt-angular';\nimport { IFormFocusable, IFormControlComponent } from '@helix/platform/shared/api';\nimport { ValueAccessor, ISelectOption } from '@helix/platform/shared/components';\nimport { ColumnSortDirection } from '../../../common/types/record-grid.types';\nimport { BehaviorSubject, forkJoin, of } from 'rxjs';\nimport { RxRecordGridUtilsService } from '../../../common/services/record-grid-utils.service';\nimport { defaultIfEmpty, map, switchMap, take } from 'rxjs/operators';\nimport { RxStringService } from '@helix/platform/utils';\n\n@Component({\n  selector: 'rx-record-grid-sort-editor-control',\n  templateUrl: './record-grid-sort-editor-control.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RecordGridSortEditorControlComponent,\n      multi: true\n    }\n  ]\n})\nexport class RecordGridSortEditorControlComponent\n  extends ValueAccessor<IRecordGridSortEditorModel>\n  implements IFormControlComponent, IFormFocusable, OnChanges, OnDestroy\n{\n  @Input()\n  options: IRecordGridSortEditorControlOptions;\n\n  @ViewChild('adaptRxSelect', { static: true })\n  adaptRxSelect: AdaptRxSelectComponent;\n\n  ColumnSortDirection = ColumnSortDirection;\n  updateOptionsSubject = new BehaviorSubject<void>(null);\n\n  columnOptions$ = this.updateOptionsSubject.pipe(\n    switchMap(() =>\n      this.options.gridColumns && this.options.recordDefinition\n        ? forkJoin(\n            this.options.gridColumns\n              .filter((gridColumn) => gridColumn.sortable)\n              .map((gridColumn) => {\n                if (this.rxStringService.isEmptySafe(gridColumn.title)) {\n                  return this.rxRecordGridUtilsService\n                    .getFieldDefinition(gridColumn.fieldId, this.options.recordDefinition)\n                    .pipe(map((fieldDefinition) => ({ id: gridColumn.fieldId, name: `[${fieldDefinition.name}]` })));\n                }\n\n                return of({ id: gridColumn.fieldId, name: gridColumn.title });\n              })\n          ).pipe(defaultIfEmpty([]))\n        : of([])\n    )\n  );\n\n  selectedColumnOption: ISelectOption[] = [];\n\n  get selectedSortDirection(): ColumnSortDirection {\n    return this.value ? this.value.direction : null;\n  }\n\n  constructor(\n    private renderer: Renderer2,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private rxStringService: RxStringService\n  ) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      changes.options?.previousValue &&\n      (!isEqual(\n        (changes.options.currentValue as IRecordGridSortEditorControlOptions).gridColumns,\n        (changes.options.previousValue as IRecordGridSortEditorControlOptions).gridColumns\n      ) ||\n        (changes.options.currentValue as IRecordGridSortEditorControlOptions).recordDefinition?.name !==\n          (changes.options.previousValue as IRecordGridSortEditorControlOptions).recordDefinition?.name)\n    ) {\n      this.updateOptionsSubject.next();\n    }\n  }\n\n  onWriteValue(value: IRecordGridSortEditorModel) {\n    this.columnOptions$.pipe(take(1)).subscribe((columnOptions) => {\n      this.selectedColumnOption = value ? [columnOptions.find((option) => option.id === value.fieldId)] : [];\n    });\n  }\n\n  focus(): void {\n    this.renderer.selectRootElement(this.adaptRxSelect.selectButtonRef.nativeElement, true).focus();\n  }\n\n  onSelectModelChange(value: ISelectOption[]): void {\n    this.selectedColumnOption = value;\n\n    this.value = isEmpty(value) ? null : { fieldId: head(value).id, direction: ColumnSortDirection.Asc };\n  }\n\n  setSortDirection(sortDirection: ColumnSortDirection): void {\n    this.value = { ...this.value, direction: sortDirection };\n  }\n\n  optionFormatter(option: ISelectOption): string {\n    return option.name;\n  }\n\n  ngOnDestroy(): void {\n    this.updateOptionsSubject.complete();\n  }\n}\n","<div class=\"form-group\" [ngClass]=\"{ 'is-required': options.required }\">\n  <label class=\"form-control-label\" *ngIf=\"options.label\">{{ options.label }}</label>\n\n  <div class=\"d-flex\">\n    <adapt-rx-select\n      #adaptRxSelect\n      class=\"pr-1 w-100\"\n      *ngIf=\"columnOptions$ | async as columnOptions\"\n      [options]=\"columnOptions\"\n      [required]=\"options.required\"\n      [disabled]=\"isDisabled\"\n      [ngModel]=\"selectedColumnOption\"\n      (ngModelChange)=\"onSelectModelChange($event)\"\n      [optionFormatter]=\"optionFormatter\"\n      [emptyOption]=\"true\"\n    ></adapt-rx-select>\n\n    <div class=\"btn-group\" data-toggle=\"buttons\" *ngIf=\"selectedColumnOption.length\">\n      <button\n        adapt-button\n        btn-type=\"secondary\"\n        type=\"button\"\n        class=\"pl-2 pr-2 d-icon-arrow_up\"\n        (click)=\"setSortDirection(ColumnSortDirection.Asc)\"\n        [class.active]=\"selectedSortDirection === ColumnSortDirection.Asc\"\n      ></button>\n      <button\n        adapt-button\n        btn-type=\"secondary\"\n        type=\"button\"\n        class=\"pl-2 pr-2 d-icon-arrow_down\"\n        (click)=\"setSortDirection(ColumnSortDirection.Desc)\"\n        [class.active]=\"selectedSortDirection === ColumnSortDirection.Desc\"\n      ></button>\n    </div>\n  </div>\n</div>\n"]}