{"version":3,"file":"icon-picker-form-control.component.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/shared/components/form-controls/icon-picker-form-control/icon-picker-form-control.component.ts","../../../../../../../../libs/platform/shared/components/form-controls/icon-picker-form-control/icon-picker-form-control.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, OnInit, Renderer2, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged, map } from 'rxjs/operators';\nimport { merge, Observable, OperatorFunction, Subject } from 'rxjs';\nimport { noop, get, sortBy } from 'lodash';\nimport { AdaptModalService, AdaptRxTypeaheadComponent, RxTypeaheadSelectItemEvent } from '@bmc-ux/adapt-angular';\nimport iconFontConfig from '@bmc-ux/dpl-iconfont/config/if_dpl.json';\nimport { RX_LEGACY_ICONS } from '@helix/platform/view/api';\nimport { IFormControlComponent } from '@helix/platform/shared/api';\nimport { IIconGlyph, IIconBrowserDialogConfig, IIconPickerFormControlOptions } from './icon-picker.types';\nimport { IconBrowserDialogComponent } from './icon-browser-dialog/icon-browser-dialog.component';\nimport { ValueAccessor } from '../../form-builder/value-accessor';\n\n@Component({\n  selector: 'rx-icon-picker-form-control',\n  templateUrl: './icon-picker-form-control.component.html',\n  styleUrls: ['./icon-picker-form-control.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: IconPickerFormControlComponent,\n      multi: true\n    }\n  ]\n})\nexport class IconPickerFormControlComponent extends ValueAccessor<string> implements OnInit, IFormControlComponent {\n  @Input()\n  options: IIconPickerFormControlOptions;\n\n  selectedIcon: IIconGlyph;\n\n  private focus$ = new Subject<FocusEvent>();\n\n  private iconGlyphs = iconFontConfig.glyphs as IIconGlyph[];\n\n  @ViewChild(AdaptRxTypeaheadComponent, { static: true })\n  typeahead: AdaptRxTypeaheadComponent;\n\n  constructor(private adaptModalService: AdaptModalService, private renderer: Renderer2) {\n    super();\n  }\n\n  ngOnInit(): void {\n    this.iconGlyphs = sortBy(this.iconGlyphs, (glyph) => glyph.name.toLowerCase());\n  }\n\n  search: OperatorFunction<string, IIconGlyph[]> = (text$: Observable<string>) => {\n    const userInput$ = text$.pipe(debounceTime(200), distinctUntilChanged());\n\n    const inputFocus$ = this.focus$.pipe(map((event) => (event.target as HTMLInputElement).value));\n\n    return merge(userInput$, inputFocus$).pipe(\n      map((term) =>\n        term\n          ? this.iconGlyphs.filter(({ name }) => name.toLowerCase().indexOf(term.toLowerCase()) > -1)\n          : this.iconGlyphs\n      )\n    );\n  };\n\n  inputFormatter(option: IIconGlyph): string {\n    return option.name;\n  }\n\n  onSelectItem(event: RxTypeaheadSelectItemEvent): void {\n    this.value = event.item.id;\n  }\n\n  onWriteValue(value: string): void {\n    const iconId = get(RX_LEGACY_ICONS, value, value);\n\n    if (!this.selectedIcon || this.selectedIcon.id !== iconId) {\n      this.selectedIcon = this.iconGlyphs.find((icon) => icon.id === iconId);\n    }\n  }\n\n  onFocus(event: FocusEvent): void {\n    this.focus$.next(event);\n  }\n\n  onBlur(): void {\n    this.selectedIcon = this.iconGlyphs.find((icon) => icon.id === this.value);\n\n    const inputValue = this.typeahead.inputRef.nativeElement.value;\n\n    if (!inputValue || !this.selectedIcon) {\n      this.value = '';\n\n      this.onWriteValue(this.value);\n\n      this.renderer.setProperty(this.typeahead.inputRef.nativeElement, 'value', '');\n    }\n  }\n\n  openIconBrowserDialog(): void {\n    this.adaptModalService\n      .open({\n        title: 'Select icon',\n        data: {\n          selectedIcon: this.selectedIcon,\n          icons: this.iconGlyphs\n        } as IIconBrowserDialogConfig,\n        content: IconBrowserDialogComponent\n      })\n      .then((selectedIcon: IIconGlyph) => {\n        this.value = selectedIcon.id;\n        this.selectedIcon = selectedIcon;\n      })\n      .catch(noop);\n  }\n}\n","<div class=\"d-flex justify-content-between align-items-center pb-1\">\n  <label class=\"form-control-label mb-0\">{{ options.label }}</label>\n\n  <button\n    *ngIf=\"!isDisabled\"\n    adapt-button\n    type=\"button\"\n    class=\"p-0 border-0\"\n    btn-type=\"tertiary\"\n    rx-id=\"browse-button\"\n    (click)=\"openIconBrowserDialog()\"\n  >\n    <span class=\"d-icon-folder_open\"></span>\n    Browse\n  </button>\n</div>\n\n<div class=\"control-wrapper d-flex\">\n  <adapt-rx-typeahead\n    class=\"w-100\"\n    [class.has-selected-icon]=\"selectedIcon\"\n    rx-id=\"input-field\"\n    [required]=\"options.required\"\n    [disabled]=\"isDisabled\"\n    [appendToBody]=\"options.appendToBody\"\n    [typeahead]=\"search\"\n    [inputFormatter]=\"inputFormatter\"\n    [resultTemplate]=\"resultTemplate\"\n    [virtualScroll]=\"true\"\n    [(ngModel)]=\"selectedIcon\"\n    (onSelectItem)=\"onSelectItem($event)\"\n    (onFocus)=\"onFocus($event)\"\n    (onBlur)=\"onBlur()\"\n    [title]=\"selectedIcon?.name ?? ''\"\n  ></adapt-rx-typeahead>\n  <adapt-icon\n    *ngIf=\"selectedIcon\"\n    class=\"icon-preview\"\n    [name]=\"selectedIcon.id\"\n    [testID]=\"selectedIcon.id\"\n  ></adapt-icon>\n</div>\n\n<ng-template #resultTemplate let-result=\"result\">\n  <span class=\"icon-item\" [ngClass]=\"'d-icon-left-' + result.id\"></span>\n  {{ result.name }}\n</ng-template>\n"]}