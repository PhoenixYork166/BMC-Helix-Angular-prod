{"version":3,"file":"launch-process-designer-action-design-model.class.js","sourceRoot":"","sources":["../../../../../../../libs/platform/view/actions/launch-process-designer/launch-process-designer-action-design-model.class.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACvD,OAAO,EAAE,IAAI,EAAE,MAAM,gBAAgB,CAAC;AACtC,OAAO,EACL,gDAAgD,EAEhD,sBAAsB,EACvB,MAAM,mCAAmC,CAAC;AAM3C,OAAO,EAAE,yBAAyB,EAAE,MAAM,+BAA+B,CAAC;AAE1E,OAAO,EAAE,uCAAuC,EAAE,MAAM,mCAAmC,CAAC;AAE5F,MAAM,OAAO,2CAA4C,SAAQ,yBAAyB;IAaxF,YACE,QAAkB,EACT,OAAmF;QAE5F,KAAK,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAFhB,YAAO,GAAP,OAAO,CAA4E;QAdtF,qBAAgB,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;QAkB7D,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE;YAC1D,IAAI,CAAC,OAAO,CAAC,6BAA6B,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC;YAEzE,IAAI,CAAC,OAAO,CAAC,6BAA6B,CAAC;gBACzC;oBACE,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,8DAA8D,CAAC;oBACpG,UAAU,EAAE,IAAI,CAAC,kCAAkC,CAAC,uBAAuB,CAAC;iBAC7E;aACF,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IA1BD,MAAM,CAAC,oBAAoB,CACzB,iBAAuG;QAEvG,uBACE,qBAAqB,EAAE,IAAI,EAC3B,eAAe,EAAE,IAAI,IAClB,iBAAiB,EACpB;IACJ,CAAC;IAoBO,qBAAqB;QAC3B,OAAO;YACL;gBACE,IAAI,EAAE,uBAAuB;gBAC7B,SAAS,EAAE,gDAAgD;gBAC3D,OAAO,EAAE;oBACP,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,8DAA8D,CAAC;oBACpG,cAAc,EAAE,sBAAsB,CAAC,OAAO;oBAC9C,eAAe,EAAE,IAAI,CAAC,sBAAsB,CAAC,iBAAiB,EAAE;oBAChE,SAAS,EAAE,IAAI,CAAC,sBAAsB,CAAC,YAAY,EAAE;iBACrB;aACnC;YACD;gBACE,IAAI,EAAE,iBAAiB;gBACvB,SAAS,EAAE,uCAAuC;gBAClD,OAAO,EAAE;oBACP,KAAK,EAAE,4BAA4B;iBACH;aACnC;SACF,CAAC;IACJ,CAAC;CACF","sourcesContent":["import { Injector } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { take } from 'rxjs/operators';\nimport {\n  DefinitionPickerOrExpressionFormControlComponent,\n  IExpressionFormControlOptions,\n  RxDefinitionPickerType\n} from '@helix/platform/shared/components';\nimport {\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport { RxViewDesignerActionModel } from '@helix/platform/view/designer';\nimport { ILaunchProcessDesignerViewActionDesignProperties } from './launch-process-designer-action.types';\nimport { RxProcessDesignerElementPickerComponent } from './process-designer-element-picker';\n\nexport class LaunchProcessDesignerActionDesignModelClass extends RxViewDesignerActionModel {\n  private translateService = this.injector.get(TranslateService);\n\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<ILaunchProcessDesignerViewActionDesignProperties>\n  ): ViewActionDesignEditableProperties<ILaunchProcessDesignerViewActionDesignProperties> {\n    return {\n      processDefinitionName: null,\n      paletteElements: null,\n      ...initialProperties\n    };\n  }\n\n  constructor(\n    injector: Injector,\n    readonly sandbox: IViewActionDesignSandbox<ILaunchProcessDesignerViewActionDesignProperties>\n  ) {\n    super(injector, sandbox);\n\n    this.sandbox.actionProperties$.pipe(take(1)).subscribe(() => {\n      this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig());\n\n      this.sandbox.setActionOutputDataDictionary([\n        {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.process-definition-name.label'),\n          expression: this.getOutputExpressionForPropertyPath('processDefinitionName')\n        }\n      ]);\n    });\n  }\n\n  private getActionEditorConfig(): IViewActionDesignPropertyEditorConfig {\n    return [\n      {\n        name: 'processDefinitionName',\n        component: DefinitionPickerOrExpressionFormControlComponent,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.process-definition-name.label'),\n          definitionType: RxDefinitionPickerType.Process,\n          dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n          operators: this.expressionConfigurator.getOperators()\n        } as IExpressionFormControlOptions\n      },\n      {\n        name: 'paletteElements',\n        component: RxProcessDesignerElementPickerComponent,\n        options: {\n          label: 'Available palette elements'\n        } as IExpressionFormControlOptions\n      }\n    ];\n  }\n}\n"]}