{"version":3,"file":"extension-container-section.component.js","sourceRoot":"","sources":["../../../../../../../../../../libs/platform/view/components/field-components/extension-container/runtime/extension-container-section/extension-container-section.component.ts","../../../../../../../../../../libs/platform/view/components/field-components/extension-container/runtime/extension-container-section/extension-container-section.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, Inject, OnInit } from '@angular/core';\nimport { BaseViewComponent, IViewComponent } from '@helix/platform/view/runtime';\nimport { RX_ASSOCIATION_DEFINITION } from '@helix/platform/association/api';\nimport { RecordInstance, RxRecordInstanceService } from '@helix/platform/record/api';\nimport { RxExtensionContainerComponent } from '../extension-container.component';\nimport { map, shareReplay, startWith, switchMap, takeUntil, tap, withLatestFrom } from 'rxjs/operators';\nimport { RecordEditorMode, RxAssociationManagerService } from '../../../../record-editor';\nimport { RecordEditorComponent } from '../../../../record-editor/runtime/record-editor.component';\nimport { RxRecordEditorUtilsService } from '../../../../record-editor/common/record-editor-utils.service';\nimport { get, isEmpty, isEqual } from 'lodash';\nimport { combineLatest, forkJoin, Observable, of } from 'rxjs';\nimport { IRxExtensionContainerSectionConfig } from '../extension-container.types';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport { RxExtensionContainerHelperService } from '../extension-container-helper.service';\n\n@Component({\n  selector: 'rx-extension-container-section',\n  templateUrl: './extension-container-section.component.html'\n})\nexport class ExtensionContainerSectionComponent extends BaseViewComponent implements IViewComponent, OnInit {\n  config: Observable<IRxExtensionContainerSectionConfig>;\n  isInitialized = false;\n  selectionFieldOptionNamesById: IPlainObject = null;\n\n  constructor(\n    private rxExtensionContainerComponent: RxExtensionContainerComponent,\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private rxRecordEditorUtilsService: RxRecordEditorUtilsService,\n    private rxExtensionContainerHelperService: RxExtensionContainerHelperService,\n    private recordEditorComponent: RecordEditorComponent\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    // will close once officially fixed : https://github.com/ReactiveX/rxjs/issues/4772\n    combineLatest([this.config, this.recordEditorComponent.recordInstanceChanged$.pipe(startWith(null))])\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe(([config, recordInstanceUpdated]) => {\n        if (config.recordDefinitionName) {\n          this.rxExtensionContainerComponent.loadRecordDefinition(config.recordDefinitionName);\n        }\n\n        if (!config.associationDefinitionName) {\n          return (this.isInitialized = true);\n        }\n\n        if (config.api) {\n          let associatedRecordInstanceId = null;\n\n          if (this.recordEditorComponent.state.mode === RecordEditorMode.Edit) {\n            associatedRecordInstanceId = this.recordEditorComponent.state.recordInstance.id;\n          }\n\n          const associationManager: RxAssociationManagerService = config.api.getAssociationManager({\n            associationDefinitionName: config.associationDefinitionName,\n            associatedRecordNodeSide: RX_ASSOCIATION_DEFINITION.roles.second.value,\n            associatedRecordInstanceId: associatedRecordInstanceId,\n            recordDefinitionName: config.recordDefinitionName,\n            allFieldIds: true,\n            associatedRecordPath: config.associatedRecordPath\n          });\n\n          let initialize$: Observable<any>;\n\n          if (this.recordEditorComponent.state.mode === RecordEditorMode.Edit) {\n            initialize$ = associationManager.loadExtensions().pipe(\n              switchMap((recordInstance) => {\n                if (isEmpty(associationManager.extensions)) {\n                  return this.addNewRecordInstanceToExtension(associationManager);\n                } else {\n                  return of(recordInstance);\n                }\n              })\n            );\n          } else if (\n            this.recordEditorComponent.state.mode === RecordEditorMode.Create ||\n            this.recordEditorComponent.state.mode === RecordEditorMode.Temporary\n          ) {\n            initialize$ = forkJoin([\n              associationManager.initialize(),\n              this.addNewRecordInstanceToExtension(associationManager)\n            ]);\n          }\n\n          initialize$\n            .pipe(\n              tap(() => {\n                this.isInitialized = true;\n              }),\n              switchMap(() => {\n                const recordInstance$ = associationManager.extensions$.pipe(\n                  map((arr) => arr[0]),\n                  tap((recordInstance) => this.updateSelectionFieldOptionNames(recordInstance)),\n                  shareReplay(1)\n                );\n\n                return recordInstance$.pipe(\n                  switchMap((inst) => inst.fieldValueChanged$),\n                  withLatestFrom(recordInstance$)\n                );\n              }),\n              takeUntil(this.destroyed$)\n            )\n            .subscribe(([change, recordInstance]) => {\n              this.updateSelectionFieldOptionNames(recordInstance);\n            });\n        }\n      });\n  }\n\n  addNewRecordInstanceToExtension(associationManager): Observable<RecordInstance> {\n    return this.rxRecordInstanceService.getNew(associationManager.options.recordDefinitionName).pipe(\n      tap((recordInstance: any) => {\n        recordInstance.isNewInstance = true;\n\n        associationManager.addExtension(recordInstance);\n      })\n    );\n  }\n\n  private updateSelectionFieldOptionNames(recordInstance: RecordInstance): void {\n    if (get(recordInstance, 'recordDefinition.fieldDefinitions')) {\n      const newSelectionFieldOptionNames = this.rxRecordEditorUtilsService.getSelectionFieldOptionNames(\n        recordInstance.recordDefinition,\n        recordInstance\n      );\n\n      if (!isEqual(this.selectionFieldOptionNamesById, newSelectionFieldOptionNames)) {\n        const propName = this.rxExtensionContainerHelperService.getSelectionFieldOptionNamesByIdExpression(this.guid);\n\n        this.rxExtensionContainerComponent.notifyPropertyChanged(propName, newSelectionFieldOptionNames);\n      }\n    }\n  }\n}\n","<h5>{{ (config | async)?.label }}</h5>\n<rx-runtime-view-canvas-outlet *ngIf=\"isInitialized\"></rx-runtime-view-canvas-outlet>\n"]}