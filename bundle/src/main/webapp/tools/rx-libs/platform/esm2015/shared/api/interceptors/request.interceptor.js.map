{"version":3,"file":"request.interceptor.js","sourceRoot":"","sources":["../../../../../../../libs/platform/shared/api/interceptors/request.interceptor.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAChD,OAAO,EAAE,oBAAoB,EAAE,MAAM,iCAAiC,CAAC;AACvE,OAAO,EAAE,oBAAoB,EAAE,MAAM,iCAAiC,CAAC;;;;AAKvE,MAAM,OAAO,oBAAoB;IAC/B,YAAoB,oBAA0C,EAAU,oBAA0C;QAA9F,yBAAoB,GAApB,oBAAoB,CAAsB;QAAU,yBAAoB,GAApB,oBAAoB,CAAsB;IAAG,CAAC;IAEtH,SAAS,CAAC,OAAyB,EAAE,IAAiB;QACpD,MAAM,QAAQ,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC;QACpD,MAAM,aAAa,GAAG,IAAI,CAAC,oBAAoB,CAAC,aAAa,CAAC;QAE9D,oEAAoE;QACpE,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;YACtB,OAAO,EAAE,OAAO,CAAC,OAAO;iBACrB,GAAG,CAAC,gBAAgB,EAAE,gBAAgB,CAAC;iBACvC,GAAG,CAAC,mBAAmB,EAAE,+BAA+B,CAAC;iBACzD,GAAG,CAAC,eAAe,EAAE,UAAU,CAAC;iBAChC,GAAG,CAAC,QAAQ,EAAE,UAAU,CAAC;SAC7B,CAAC,CAAC;QAEH,IAAI,QAAQ,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,EAAE;YAC5D,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;gBACtB,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,QAAQ,CAAC;aAC/D,CAAC,CAAC;SACJ;QAED,IAAI,aAAa,KAAK,cAAc,CAAC,wBAAwB,EAAE;YAC7D,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;gBACtB,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,CAAC;aACpD,CAAC,CAAC;SACJ;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;;iHA7BU,oBAAoB;qHAApB,oBAAoB,cAFnB,MAAM;2FAEP,oBAAoB;kBAHhC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { RX_APPLICATION } from '../application';\nimport { RxBundleCacheService } from '../caching/bundle-cache.service';\nimport { RxGlobalCacheService } from '../caching/global-cache.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRequestInterceptor implements HttpInterceptor {\n  constructor(private rxBundleCacheService: RxBundleCacheService, private rxGlobalCacheService: RxGlobalCacheService) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const bundleId = this.rxBundleCacheService.bundleId;\n    const applicationId = this.rxGlobalCacheService.applicationId;\n\n    // LMA:: Check if those headers are still necessary. Test with IE11.\n    request = request.clone({\n      headers: request.headers\n        .set('X-Requested-By', 'XMLHttpRequest')\n        .set('If-Modified-Since', 'Mon, 26 Jul 1997 05:00:00 GMT')\n        .set('Cache-Control', 'no-cache')\n        .set('Pragma', 'no-cache')\n    });\n\n    if (bundleId && !request.headers.has('default-bundle-scope')) {\n      request = request.clone({\n        headers: request.headers.set('default-bundle-scope', bundleId)\n      });\n    }\n\n    if (applicationId === RX_APPLICATION.innovationStudioBundleId) {\n      request = request.clone({\n        headers: request.headers.set('Design-Time', 'true')\n      });\n    }\n\n    return next.handle(request);\n  }\n}\n"]}