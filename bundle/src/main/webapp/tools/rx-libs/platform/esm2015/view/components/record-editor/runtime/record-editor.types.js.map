{"version":3,"file":"record-editor.types.js","sourceRoot":"","sources":["../../../../../../../../libs/platform/view/components/record-editor/runtime/record-editor.types.ts"],"names":[],"mappings":"","sourcesContent":["import { FormControl, ValidatorFn } from '@angular/forms';\nimport { IAssociationRecords } from '@helix/platform/association/api';\nimport { IRecordDefinition, RecordInstance } from '@helix/platform/record/api';\nimport { IPlainObject, RxEvaluatedExpression } from '@helix/platform/shared/api';\nimport {\n  IViewComponentIsDirty,\n  IViewComponentIsValid,\n  IViewComponentRefresh,\n  IViewComponentSave,\n  IViewComponentSetProperty\n} from '@helix/platform/view/runtime';\nimport { IRolesConfig } from '../../field-components/association/runtime/association.types';\nimport { RecordEditorMode, RecordEditorState } from '../common/record-editor.types';\nimport { RxAssociationManagerService } from './association-manager.class';\nimport { RecordEditorForm } from './record-editor-form.class';\nimport { RecordEditorFormControl } from './record-editor-form-control.class';\n\nexport interface IRecordEditorConfig {\n  mode: RecordEditorMode;\n  recordInstanceId: RxEvaluatedExpression<string>;\n  recordDefinitionName: string;\n  defaultState?: RecordEditorState;\n  styles?: string;\n  allowEdit: RxEvaluatedExpression;\n}\n\nexport interface IRecordEditorState extends IRecordEditorConfig {\n  recordInstance: RecordInstance;\n  recordDefinition: IRecordDefinition;\n  isDataLoading: boolean;\n  isReadOnlyStateAvailable: boolean;\n  currentState: RecordEditorState;\n  form: RecordEditorForm;\n  isDirty: boolean;\n  isSaving: boolean;\n  canSave: boolean;\n  selectionFieldOptionNamesById: IPlainObject;\n}\n\nexport interface IAssociationManagerConfig {\n  allFieldIds?: boolean;\n  associatedRecordNodeSide: string;\n  associatedRecordInstanceId?: string;\n  associatedRecordPath?: string[];\n  associationDefinitionName: string;\n  associationInstances?: IAssociationRecords;\n  canLoadAssociations?: boolean;\n  startIndex?: number;\n  fieldIds?: any[];\n  pageSize?: number;\n  recordDefinitionName: string;\n  rolesConfig?: IRolesConfig;\n}\n\nexport interface IRxAssociationManagerMap {\n  [name: string]: RxAssociationManagerService;\n}\n\nexport interface IRecordEditorApi\n  extends IViewComponentSave,\n    IViewComponentIsDirty,\n    IViewComponentIsValid,\n    IViewComponentRefresh,\n    IViewComponentSetProperty {\n  getFieldControl(\n    fieldId: number,\n    guid: string,\n    validator?: ValidatorFn | ValidatorFn[],\n    associatedRecordPath?: string[]\n  ): RecordEditorFormControl;\n\n  downloadAttachment(fieldId: number): void;\n\n  getAttachmentDownloadUrl(fieldId: number): string;\n\n  getPermissionType(fieldId: number, associatedRecordPath?: string[]): string;\n\n  getAssociationManager(options: IAssociationManagerConfig): RxAssociationManagerService;\n\n  isReady(): boolean;\n\n  notifyComponentReady(componentId: string, isReady: boolean): void;\n\n  setFieldValue(fieldId: number, value: any, associatedRecordPath?: string[], options?: { markAsDirty: boolean }): void;\n\n  getFieldValue(fieldId: number, associatedRecordPath?: string[]): any;\n\n  getFieldInstanceProp(fieldId: number, prop: string, associatedRecordPath?: string[]): any;\n\n  getRecordEditorMode(): RecordEditorMode;\n\n  setFieldInstanceProp(fieldId: number, prop: string, value: any, associatedRecordPath?: string[]): void;\n\n  markAsDirty(): void;\n}\n"]}