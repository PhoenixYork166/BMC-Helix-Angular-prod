{"version":3,"file":"helix-platform-view-runtime.js","sources":["../../../../libs/platform/view/runtime/layout/runtime-layout-outlet.class.ts","../../../../libs/platform/view/runtime/layout/runtime-layout-item.class.ts","../../../../libs/platform/view/runtime/components/runtime-view-canvas/component/runtime-view-canvas.service.ts","../../../../libs/platform/view/runtime/components/runtime-view-canvas/components/canvas-item/runtime-view-canvas-item.service.ts","../../../../libs/platform/view/runtime/components/runtime-view-canvas/components/canvas-item/runtime-view-canvas-item.component.ts","../../../../libs/platform/view/runtime/components/runtime-view-canvas/components/canvas-item/runtime-view-canvas-item.component.html","../../../../libs/platform/view/runtime/components/runtime-view-canvas/components/canvas-item-container/runtime-view-canvas-item-container.component.ts","../../../../libs/platform/view/runtime/components/runtime-view-canvas/components/canvas-item-container/runtime-view-canvas-item-container.component.html","../../../../libs/platform/view/runtime/components/runtime-component/runtime-view-root.component.ts","../../../../libs/platform/view/runtime/components/runtime-component/runtime-component.html","../../../../libs/platform/view/runtime/layout/runtime-view-layout.service.ts","../../../../libs/platform/view/runtime/runtime-view-model-api.class.ts","../../../../libs/platform/view/runtime/component/component-expression.class.ts","../../../../libs/platform/view/runtime/event-manager/view-component-event-manager.class.ts","../../../../libs/platform/view/runtime/event-manager/view-component-event-manager.constant.ts","../../../../libs/platform/view/runtime/runtime-view-utils.service.ts","../../../../libs/platform/view/runtime/view-definition-adapter.service.ts","../../../../libs/platform/view/runtime/runtime-view.model.ts","../../../../libs/platform/view/runtime/runtime-view-registry.service.ts","../../../../libs/platform/view/runtime/components/runtime-view-canvas/component/runtime-view-canvas.component.ts","../../../../libs/platform/view/runtime/components/runtime-view-canvas/component/runtime-view-canvas.component.html","../../../../libs/platform/view/runtime/component/runtime-view.component.ts","../../../../libs/platform/view/runtime/component/runtime-view.component.html","../../../../libs/platform/view/runtime/components/base-view-component/base-view-component.class.ts","../../../../libs/platform/view/runtime/components/runtime-view-canvas/components/canvas-outlet/runtime-view-canvas-outlet.component.ts","../../../../libs/platform/view/runtime/components/runtime-view-canvas/components/canvas-outlet/runtime-view-canvas-outlet.component.html","../../../../libs/platform/view/runtime/components/runtime-view-canvas/runtime-view-canvas.module.ts","../../../../libs/platform/view/runtime/components/runtime-view-modal/runtime-view-modal.component.ts","../../../../libs/platform/view/runtime/components/runtime-view-modal/runtime-view-modal.component.html","../../../../libs/platform/view/runtime/interfaces/runtime-view.constant.ts","../../../../libs/platform/view/runtime/runtime-view.module.ts","../../../../libs/platform/view/runtime/helix-platform-view-runtime.ts"],"sourcesContent":["import { RuntimeLayoutItem } from './runtime-layout-item.class';\n\nexport class RuntimeLayoutOutletColumn {\n  children: RuntimeLayoutItem[] = [];\n  cssClass?: string;\n  span?: number;\n}\n\nexport class RuntimeLayoutOutlet {\n  name: string;\n  children: RuntimeLayoutItem[] = [];\n  columns: RuntimeLayoutOutletColumn[] = [new RuntimeLayoutOutletColumn()];\n  height: number = null;\n}\n","import { Observable } from 'rxjs';\nimport { IViewComponentRuntimeState } from '../interfaces/view-component-runtime-state.interface';\nimport { RuntimeViewModelApi } from '../runtime-view-model-api.class';\nimport { RuntimeLayoutOutlet, RuntimeLayoutOutletColumn } from './runtime-layout-outlet.class';\nimport { ComponentFactory } from '@angular/core';\nimport { IViewLayoutOutlet } from '@helix/platform/view/api';\n\nexport class RuntimeLayoutItem {\n  config: Observable<IViewComponentRuntimeState>;\n  guid: string;\n  outlets: RuntimeLayoutOutlet[] = [];\n  parent: RuntimeLayoutItem = null;\n  runtimeViewModelApi: RuntimeViewModelApi = null;\n  factory: ComponentFactory<any>;\n\n  constructor(options: {\n    guid: string;\n    parent: RuntimeLayoutItem;\n    runtimeViewModelApi: RuntimeViewModelApi;\n    outlets?: any[];\n    config?: any;\n    factory: any;\n  }) {\n    Object.assign(this, {\n      guid: options.guid,\n      config: options.config,\n      parent: options.parent,\n      runtimeViewModelApi: options.runtimeViewModelApi,\n      factory: options.factory\n    });\n\n    if (options.outlets) {\n      this.initializeOutlets(options.outlets);\n    }\n  }\n\n  initializeOutlets(outlets: any[]) {\n    outlets.forEach((outlet) => {\n      const layoutOutletItem = new RuntimeLayoutOutlet();\n\n      layoutOutletItem.name = outlet.name;\n      layoutOutletItem.height = outlet.hasOwnProperty('height') ? outlet.height : null;\n\n      this.outlets.push(layoutOutletItem);\n    });\n  }\n\n  addLayoutItem(\n    layoutTreeItem: RuntimeLayoutItem,\n    columnConfig: {\n      columnIndex: number;\n      parentOutlet?: IViewLayoutOutlet;\n    }\n  ) {\n    const outlet = this.outlets.find((outletItem) => outletItem.name === columnConfig.parentOutlet.name);\n    const insertIndex = columnConfig.parentOutlet.columns[columnConfig.columnIndex].children.indexOf(\n      layoutTreeItem.guid\n    );\n\n    columnConfig.parentOutlet.columns.forEach((column, columnIndex) => {\n      if (!outlet.columns[columnIndex]) {\n        outlet.columns[columnIndex] = new RuntimeLayoutOutletColumn();\n      }\n\n      if (column.cssClass) {\n        outlet.columns[columnIndex].cssClass = column.cssClass;\n      }\n\n      if (column.span) {\n        outlet.columns[columnIndex].span = column.span;\n      }\n    });\n\n    if (layoutTreeItem) {\n      outlet.columns[columnConfig.columnIndex].children[insertIndex] = layoutTreeItem;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ReplaySubject, Subject } from 'rxjs';\nimport { ICanvasComponentPropertyChanged } from '../interfaces/canvas-component-property-changed.interface';\n\n@Injectable()\nexport class RuntimeViewCanvasService {\n  private componentPropertyChangedSubject = new Subject<ICanvasComponentPropertyChanged>();\n  componentPropertyChanged$ = this.componentPropertyChangedSubject.asObservable();\n\n  onViewComponentPropertyChanged(componentPropertyChange: ICanvasComponentPropertyChanged): void {\n    this.componentPropertyChangedSubject.next(componentPropertyChange);\n  }\n}\n","import {\n  ComponentFactoryResolver,\n  ComponentRef,\n  Injectable,\n  Injector,\n  OnDestroy,\n  ViewContainerRef\n} from '@angular/core';\nimport { pick } from 'lodash';\nimport { delay, distinctUntilChanged, skipWhile, takeUntil } from 'rxjs/operators';\nimport { ReplaySubject } from 'rxjs';\nimport { RuntimeViewCanvasService } from '../../component/runtime-view-canvas.service';\nimport { RuntimeLayoutItem } from '../../../../layout/runtime-layout-item.class';\nimport { RuntimeLayoutOutlet } from '../../../../layout/runtime-layout-outlet.class';\nimport { IViewComponent } from '../../../../interfaces/view-component.interface';\nimport { IChildColumn } from '../../interfaces/child-column.interface';\nimport { ComponentFactory } from '@angular/core';\n\n@Injectable()\nexport class RuntimeViewCanvasItemService implements OnDestroy {\n  container: ViewContainerRef;\n  layout: RuntimeLayoutItem;\n  componentRef: ComponentRef<any>;\n  componentInstance: IViewComponent;\n\n  hasMargin = true;\n  hasAutoFill = false;\n  hasAutoScroll = false;\n  isHidden = false;\n\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  constructor(\n    private injector: Injector,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private runtimeViewCanvasService: RuntimeViewCanvasService\n  ) {}\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  registerOutlet(\n    outletName: string,\n    outletViewContainerRef: ViewContainerRef,\n    containerComponent?: ComponentFactory<any>\n  ): void {\n    const currentOutlet = this.layout.outlets.find((outlet) => outlet.name === outletName);\n\n    if (currentOutlet) {\n      this.renderContainerComponent(outletViewContainerRef, currentOutlet, containerComponent);\n    }\n  }\n\n  getChildren(outletName: string): IChildColumn[] {\n    const currentOutlet = this.layout.outlets.find((outlet) => outlet.name === outletName);\n\n    return currentOutlet.columns.map((column) => ({\n      ...column,\n      children: column.children\n        .filter(Boolean)\n        .map((child) => pick(child, 'config', 'guid', 'runtimeViewModelApi', 'factory', 'outlets'))\n    }));\n  }\n\n  renderViewComponent(): void {\n    this.componentRef = this.container.createComponent(this.layout.factory, null, this.injector);\n    this.componentInstance = this.componentRef.instance;\n    this.componentInstance.guid = this.layout.guid;\n    this.componentInstance.config = this.layout.config;\n    this.componentInstance.runtimeViewModelApi = this.layout.runtimeViewModelApi;\n\n    this.componentInstance.propertyChanged?.pipe(takeUntil(this.destroyed$)).subscribe((propertyChange) => {\n      this.runtimeViewCanvasService.onViewComponentPropertyChanged(propertyChange);\n    });\n\n    // Update hasMargin, hasAutoScroll, and hasAutoFill property bindings asynchronously using timeout\n    // to trigger change detection. Otherwise \"ExpressionChangedAfterItHasBeenCheckedError\" will occur.\n    this.componentInstance.hidden\n      ?.pipe(\n        skipWhile((value) => !value),\n        distinctUntilChanged(),\n        delay(0),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((hidden) => {\n        this.hasMargin = !hidden;\n        this.isHidden = hidden;\n      });\n\n    this.componentInstance.autoScroll\n      ?.pipe(\n        skipWhile((value) => !value),\n        distinctUntilChanged(),\n        delay(0),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((autoScroll) => {\n        this.hasAutoScroll = autoScroll;\n      });\n\n    this.componentInstance.autoFill\n      ?.pipe(\n        skipWhile((value) => !value),\n        distinctUntilChanged(),\n        delay(0),\n        takeUntil(this.destroyed$)\n      )\n      .subscribe((autoFill) => {\n        this.hasAutoFill = autoFill;\n      });\n  }\n\n  private renderContainerComponent(\n    outletViewContainerRef: ViewContainerRef,\n    currentOutlet: RuntimeLayoutOutlet,\n    containerComponent?: ComponentFactory<any>\n  ): void {\n    const containerComponentFactory = containerComponent;\n\n    const containerRef = outletViewContainerRef.createComponent(containerComponentFactory);\n\n    containerRef.instance.columns = currentOutlet.columns;\n    containerRef.instance.outlet = currentOutlet;\n  }\n}\n","import { Component, HostBinding, Input, OnChanges, SimpleChanges, ViewChild, ViewContainerRef } from '@angular/core';\nimport { RuntimeLayoutItem } from '../../../../layout/runtime-layout-item.class';\nimport { IChildColumn } from '../../interfaces/child-column.interface';\nimport { RuntimeViewCanvasItemService } from './runtime-view-canvas-item.service';\n\n@Component({\n  selector: 'rx-runtime-view-canvas-item',\n  templateUrl: './runtime-view-canvas-item.component.html',\n  providers: [RuntimeViewCanvasItemService]\n})\nexport class RuntimeViewCanvasItemComponent implements OnChanges {\n  @Input()\n  layout: RuntimeLayoutItem;\n\n  @ViewChild('container', { read: ViewContainerRef, static: true })\n  container: ViewContainerRef;\n\n  @HostBinding('class.rx-runtime-view-canvas-item-margin')\n  get hasMargin() {\n    return this.runtimeViewCanvasItemService.hasMargin;\n  }\n\n  @HostBinding('class.rx-runtime-view-canvas-item-auto-fill')\n  get hasAutoFill() {\n    return this.runtimeViewCanvasItemService.hasAutoFill && !this.runtimeViewCanvasItemService.isHidden;\n  }\n\n  @HostBinding('class.rx-runtime-view-canvas-item-auto-scroll')\n  get hasAutoScroll() {\n    return this.runtimeViewCanvasItemService.hasAutoScroll;\n  }\n\n  constructor(private runtimeViewCanvasItemService: RuntimeViewCanvasItemService) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!this.runtimeViewCanvasItemService.container) {\n      this.runtimeViewCanvasItemService.container = this.container;\n    }\n\n    if (changes.layout.currentValue) {\n      this.runtimeViewCanvasItemService.layout = changes.layout.currentValue;\n\n      if (changes.layout.previousValue) {\n        this.container.clear();\n      }\n\n      this.runtimeViewCanvasItemService.renderViewComponent();\n    }\n  }\n\n  registerOutlet(outletName: string, outletViewContainerRef: ViewContainerRef): void {\n    this.runtimeViewCanvasItemService.registerOutlet(outletName, outletViewContainerRef);\n  }\n\n  getChildren(outletName: string): IChildColumn[] {\n    return this.runtimeViewCanvasItemService.getChildren(outletName);\n  }\n}\n","<ng-container #container></ng-container>\n","import { Component, HostBinding, Input } from '@angular/core';\nimport { RuntimeLayoutItem, RuntimeLayoutOutlet, RuntimeLayoutOutletColumn } from '../../../../layout';\n\n@Component({\n  selector: 'rx-runtime-view-canvas-item-container',\n  templateUrl: './runtime-view-canvas-item-container.component.html',\n  styleUrls: ['./runtime-view-canvas-item-container.component.scss']\n})\nexport class RuntimeViewCanvasItemContainerComponent {\n  @Input() columns: RuntimeLayoutOutletColumn[] = [];\n  @Input() outlet: RuntimeLayoutOutlet;\n\n  @HostBinding('style.min-height')\n  get hostClass(): string {\n    if (this.outlet.height) {\n      return `${this.outlet.height}px`;\n    }\n\n    return null;\n  }\n\n  trackByFn(index: number, item: RuntimeLayoutItem): string | number {\n    return item?.guid || index;\n  }\n}\n","<ng-container *ngIf=\"columns.length > 1\">\n  <div class=\"row rx-runtime-view-canvas-item-container-row\">\n    <div\n      class=\"rx-runtime-view-canvas-item-container-column\"\n      [ngClass]=\"column.cssClass ? column.cssClass : column.span ? 'col-' + column.span : 'col'\"\n      *ngFor=\"let column of columns\"\n    >\n      <ng-container *ngTemplateOutlet=\"itemTpl; context: { $implicit: column.children }\"></ng-container>\n    </div>\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"columns.length === 1\">\n  <ng-container *ngTemplateOutlet=\"itemTpl; context: { $implicit: columns[0].children }\"></ng-container>\n</ng-container>\n\n<ng-template #itemTpl let-layoutItems>\n  <rx-runtime-view-canvas-item\n    #item\n    *ngFor=\"let layoutItem of layoutItems; trackBy: trackByFn\"\n    [layout]=\"layoutItem\"\n  ></rx-runtime-view-canvas-item>\n</ng-template>\n","import { Component } from '@angular/core';\nimport { RuntimeViewCanvasItemComponent } from '../runtime-view-canvas/components/canvas-item/runtime-view-canvas-item.component';\nimport { RX_VIEW_DEFINITION, ViewLayoutRole } from '@helix/platform/view/api';\nimport { RuntimeLayoutOutlet } from '../../layout';\n\n@Component({\n  selector: 'rx-runtime-view-root',\n  templateUrl: './runtime-component.html',\n  styleUrls: ['./runtime-component.scss']\n})\nexport class RuntimeViewRootComponent {\n  defaultOutletName = RX_VIEW_DEFINITION.defaultOutletName;\n  layoutRole = ViewLayoutRole;\n\n  constructor(public runtimeCanvasItemComponent: RuntimeViewCanvasItemComponent) {}\n\n  isHidden(outlet: RuntimeLayoutOutlet): boolean {\n    return outlet.name === ViewLayoutRole.Header && outlet.columns[0].children.length === 0;\n  }\n}\n","<rx-runtime-view-canvas-item-container\n  *ngFor=\"let outlet of runtimeCanvasItemComponent.layout.outlets\"\n  [hidden]=\"isHidden(outlet)\"\n  [columns]=\"outlet.columns\"\n  [outlet]=\"outlet\"\n  [ngClass]=\"{\n    'content-outlet': outlet.name === defaultOutletName,\n    'outlet-padding': [layoutRole.Header, layoutRole.Footer, defaultOutletName].includes(outlet.name)\n  }\"\n></rx-runtime-view-canvas-item-container>\n","import { ComponentFactoryResolver, Injectable } from '@angular/core';\nimport {\n  IViewComponentDefinitionWithParent,\n  IViewDefinition,\n  IViewLayout,\n  RxOldViewLayoutAdapterService,\n  RxViewComponentRegistryService,\n  RxViewComponentType,\n  RxViewDefinitionParserService\n} from '@helix/platform/view/api';\nimport { RxTreeService, RxJsonParserService } from '@helix/platform/utils';\nimport { RuntimeViewRootComponent } from '../components/runtime-component/runtime-view-root.component';\nimport { RuntimeViewModelApi } from '../runtime-view-model-api.class';\nimport { RuntimeViewModel } from '../runtime-view.model';\nimport { RuntimeLayoutItem } from './runtime-layout-item.class';\nimport { RxLogService } from '@helix/platform/shared/api';\n\n/**\n * @desc Represents runtime component tree\n */\n@Injectable()\nexport class RuntimeViewLayoutService {\n  layout: RuntimeLayoutItem;\n\n  private runtimeViewModel: RuntimeViewModel;\n  private runtimeViewModelApi: RuntimeViewModelApi;\n\n  constructor(\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private viewDefinitionParserService: RxViewDefinitionParserService,\n    private factoryResolver: ComponentFactoryResolver,\n    private tree: RxTreeService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxLogService: RxLogService,\n    private rxOldViewLayoutAdapterService: RxOldViewLayoutAdapterService\n  ) {}\n\n  clear() {\n    this.layout = null;\n  }\n\n  init(runtimeViewModel: RuntimeViewModel, runtimeViewModelApi: RuntimeViewModelApi) {\n    this.runtimeViewModel = runtimeViewModel;\n    this.runtimeViewModelApi = runtimeViewModelApi;\n\n    this.viewDefinitionParserService\n      .getComponents(runtimeViewModel.viewDefinition)\n      .forEach(this.processDefinition.bind(this));\n  }\n\n  private processDefinition(componentDefinitionItem: IViewComponentDefinitionWithParent): void {\n    this.rxOldViewLayoutAdapterService.convertLayout(componentDefinitionItem);\n\n    if (!componentDefinitionItem.parentComponentDefinition) {\n      this.initializeView((componentDefinitionItem as any).componentDefinition as IViewDefinition);\n    } else {\n      const componentDescriptor = this.rxViewComponentRegistryService.get(\n        componentDefinitionItem.componentDefinition.type\n      );\n\n      if (\n        componentDefinitionItem.componentDefinition.type !== RxViewComponentType.Action &&\n        componentDescriptor &&\n        !this.runtimeViewModel.isDataViewComponentDefinition(componentDescriptor)\n      ) {\n        // todo move this logic to separate method\n        const parentComponentDefinitionLayout = JSON.parse(\n          componentDefinitionItem.parentComponentDefinition.layout\n        ) as IViewLayout;\n\n        let columnIndex = 0;\n        const parentOutlet = parentComponentDefinitionLayout.outlets.find((outlet) => {\n          return outlet.columns.find((col, colIndex) => {\n            const includes = col.children.includes(componentDefinitionItem.componentDefinition.guid);\n\n            if (includes) {\n              columnIndex = colIndex;\n            }\n\n            return includes;\n          });\n        });\n\n        if (parentOutlet) {\n          const viewComponentConfig = this.runtimeViewModel.viewComponentStates\n            .get(componentDefinitionItem.componentDefinition.guid)\n            .config$.asObservable();\n\n          const parentLayoutItem = this.getLayoutItem(componentDefinitionItem.parentComponentDefinition.guid);\n\n          parentLayoutItem.addLayoutItem(\n            new RuntimeLayoutItem({\n              guid: componentDefinitionItem.componentDefinition.guid,\n              config: viewComponentConfig,\n              parent: parentLayoutItem,\n              runtimeViewModelApi: this.runtimeViewModelApi,\n              outlets: componentDescriptor.outlets,\n              factory: componentDescriptor.componentFactory\n            }),\n            {\n              parentOutlet,\n              columnIndex\n            }\n          );\n        } else {\n          const component = componentDefinitionItem.componentDefinition;\n\n          this.rxLogService.warning(\n            `Cannot render view component. ${component.type} (${component.guid}) is not used in layout.`\n          );\n        }\n      }\n    }\n  }\n\n  private initializeView(viewDefinition: IViewDefinition): void {\n    const layout: IViewLayout = this.rxJsonParserService.tryParseJson(viewDefinition.layout);\n\n    this.layout = new RuntimeLayoutItem({\n      guid: viewDefinition.guid,\n      parent: null,\n      runtimeViewModelApi: this.runtimeViewModelApi,\n      outlets: layout.outlets,\n      factory: this.factoryResolver.resolveComponentFactory(RuntimeViewRootComponent)\n    });\n  }\n\n  private getLayoutItem(guid: string): RuntimeLayoutItem {\n    const flattenedLayoutItems = this.tree.flattenBy(this.layout, (currentLayout) => {\n      return currentLayout.outlets.reduce((result, outlet) => {\n        outlet.columns.forEach((column) => {\n          column.children.forEach((canvasLayout) => {\n            result.push(canvasLayout);\n          });\n        });\n\n        return result;\n      }, []);\n    });\n\n    return flattenedLayoutItems.find((flattenedLayoutItem) => flattenedLayoutItem.guid === guid);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IViewInputParams, IViewPresetsByViewComponentGuid } from '@helix/platform/view/api';\nimport { Observable } from 'rxjs';\nimport { IRuntimeViewOutputParameter } from './interfaces/index';\nimport { RuntimeViewModel } from './runtime-view.model';\n\n@Injectable()\nexport class RuntimeViewModelApi {\n  private runtimeViewModel: RuntimeViewModel;\n\n  clear() {\n    this.runtimeViewModel = null;\n  }\n\n  init(model: RuntimeViewModel) {\n    if (!this.runtimeViewModel) {\n      this.runtimeViewModel = model;\n    }\n  }\n\n  triggerViewActions(guid: string, eventName: string): Promise<void> {\n    return this.runtimeViewModel.triggerViewActions(guid, eventName);\n  }\n\n  cancel(skipDirtyCheck?: boolean): Observable<never> {\n    return this.runtimeViewModel.cancel(skipDirtyCheck);\n  }\n\n  close(): Observable<IRuntimeViewOutputParameter> {\n    return this.runtimeViewModel.close();\n  }\n\n  getViewInputParameters(): IViewInputParams {\n    return this.runtimeViewModel.getViewInputParameters();\n  }\n\n  applyViewPreset(\n    viewPresetSelectorGuid: string,\n    viewPresetGuid: string,\n    sharedViewPresets?: IViewPresetsByViewComponentGuid\n  ): Observable<never> {\n    return this.runtimeViewModel.applyViewPreset(viewPresetSelectorGuid, viewPresetGuid, sharedViewPresets);\n  }\n\n  deleteViewPreset(viewPresetGuid: string): Observable<never> {\n    return this.runtimeViewModel.deleteViewPreset(viewPresetGuid);\n  }\n\n  discardViewPresetChanges(\n    viewPresetGuid: string,\n    sharedViewPresets?: IViewPresetsByViewComponentGuid\n  ): Observable<never> {\n    return this.runtimeViewModel.discardViewPresetChanges(viewPresetGuid, sharedViewPresets);\n  }\n\n  saveViewPreset(viewPresetGuid: string): Observable<never> {\n    return this.runtimeViewModel.saveViewPreset(viewPresetGuid);\n  }\n\n  shareViewPreset(viewPresetSelectorGuid: string): Observable<IViewPresetsByViewComponentGuid> {\n    return this.runtimeViewModel.shareViewPreset(viewPresetSelectorGuid);\n  }\n}\n","import { IExpressionEvaluator, RxExpressionEvaluatorService } from '@helix/platform/view/api';\nimport { IExpressionContext } from '../interfaces/expression-context.interface';\nimport { includes } from 'lodash';\n\nexport class ComponentExpression {\n  constructor(\n    public propertyName: string,\n    private expression: string,\n    private rxExpressionEvaluatorService: RxExpressionEvaluatorService,\n    private customEvaluatorService: IExpressionEvaluator\n  ) {}\n\n  evaluate(expressionContext: IExpressionContext): any {\n    return this.rxExpressionEvaluatorService.tryEvaluate(\n      this.expression,\n      expressionContext,\n      this.customEvaluatorService\n    );\n  }\n\n  hasDependency(guid: string, propertyName: string): boolean {\n    return includes(this.expression, `${guid}.${propertyName}`);\n  }\n\n  hasTokens(): boolean {\n    return includes(this.expression, '${view.') || this.hasKeywordTokens();\n  }\n\n  hasKeywordTokens(): boolean {\n    return includes(this.expression, '${keywords.');\n  }\n\n  hasViewTokens(): boolean {\n    return (\n      includes(this.expression, '${view.inputParams') ||\n      includes(this.expression, '${view.api') ||\n      this.hasViewIsValidToken()\n    );\n  }\n\n  hasViewIsValidToken(): boolean {\n    return includes(this.expression, '${view.isValid}');\n  }\n\n  hasComponentTokens(): boolean {\n    return includes(this.expression, '${view.components');\n  }\n}\n","import { ErrorHandler, Injectable } from '@angular/core';\nimport { castArray, isString } from 'lodash';\nimport { from } from 'rxjs';\nimport { map, mergeScan, take } from 'rxjs/operators';\nimport { RxGlobalEventsService, RxLogService } from '@helix/platform/shared/api';\nimport { RxViewActionService } from '@helix/platform/view/api';\nimport { IViewComponentActionConfig } from './view-component-action-config.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ViewComponentEventManager {\n  constructor(\n    private rxGlobalEventsService: RxGlobalEventsService,\n    private rxLogService: RxLogService,\n    private rxViewActionService: RxViewActionService,\n    private errorHandler: ErrorHandler\n  ) {}\n\n  executeActions(\n    actions: IViewComponentActionConfig[],\n    actionCallback: (action: IViewComponentActionConfig, result: any) => any\n  ): Promise<void> {\n    return new Promise((resolve, reject) => {\n      let resultValue: any;\n\n      from(actions)\n        .pipe(\n          mergeScan(\n            (acc, currentAction) => {\n              this.rxLogService.debug('ACTION STARTED: ' + currentAction.name);\n\n              return this.rxViewActionService.execute(currentAction.name, currentAction.parameters).pipe(\n                map((result) => actionCallback(currentAction, result)),\n                take(1)\n              );\n            },\n            null,\n            1\n          )\n        )\n        .subscribe({\n          next: (result) => (resultValue = result),\n          error: (error) => {\n            reject(error);\n\n            this.rxGlobalEventsService.viewActionsCompleted$.next();\n\n            castArray(error).forEach((e) => {\n              if (isString(e)) {\n                this.rxLogService.warning(e);\n              } else if (e) {\n                this.errorHandler.handleError(e);\n              }\n            });\n          },\n          complete: () => {\n            this.rxGlobalEventsService.viewActionsCompleted$.next();\n            resolve(resultValue);\n          }\n        });\n    });\n  }\n}\n","export const VIEW_COMPONENT_DEFAULT_EVENT_NAME = 'default';\n","import { Injectable } from '@angular/core';\nimport { IPlainObject, RxDefinitionAdapterRegistryService } from '@helix/platform/shared/api';\nimport {\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  RxViewActionDefinitionAdapterRegistryService,\n  RxViewComponentType,\n  RxViewDefinitionCacheService,\n  RxViewDefinitionParserService,\n  RxViewDefinitionService\n} from '@helix/platform/view/api';\nimport { isEmpty, isString, head, chain, isObject, values } from 'lodash';\nimport { map, take } from 'rxjs/operators';\nimport { EMPTY, Observable, of } from 'rxjs';\nimport { RX_GUID } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRuntimeViewUtilsService {\n  constructor(\n    private rxViewDefinitionService: RxViewDefinitionService,\n    private rxViewDefinitionParserService: RxViewDefinitionParserService,\n    private rxDefinitionAdapterRegistryService: RxDefinitionAdapterRegistryService,\n    private rxViewActionDefinitionAdapterRegistryService: RxViewActionDefinitionAdapterRegistryService,\n    private rxViewDefinitionCacheService: RxViewDefinitionCacheService\n  ) {}\n\n  isViewCancellable(viewDefinitionName: string | IViewDefinition): Observable<boolean> {\n    if (isString(viewDefinitionName)) {\n      return this.rxViewDefinitionCacheService\n        .getViewDefinition(viewDefinitionName)\n        .pipe(\n          map(\n            (viewDefinition: IViewDefinition) =>\n              this.hasPageComponent(viewDefinition) || this.hasViewCancellingAction(viewDefinition)\n          )\n        );\n    } else {\n      return of(this.hasPageComponent(viewDefinitionName) || this.hasViewCancellingAction(viewDefinitionName));\n    }\n  }\n\n  runAdaptersForComponents(\n    viewDefinition: IViewDefinition,\n    containerViewComponentDefinition?: IContainerViewComponentDefinition\n  ): Observable<any>[] {\n    const componentPairs = this.rxViewDefinitionParserService.getComponents(\n      containerViewComponentDefinition || viewDefinition\n    );\n\n    const regex = new RegExp(`\\\\$\\{view.components.${RX_GUID.baseGuidPattern}.`);\n\n    viewDefinition.viewComponentExpressions = chain(componentPairs)\n      .map((component) => values(component.componentDefinition.propertiesByName))\n      .flatten()\n      .map((propertyValue) => (isObject(propertyValue) ? values(propertyValue) : propertyValue))\n      .flatten()\n      .filter(isString)\n      .filter((propertyValue) => regex.test(propertyValue))\n      .value();\n\n    const result = componentPairs.reduce((adapterObservables$, { componentDefinition }) => {\n      const adapter =\n        componentDefinition.type === RxViewComponentType.Action\n          ? this.rxViewActionDefinitionAdapterRegistryService.getRuntimeAdapter(\n              componentDefinition.propertiesByName.name\n            )\n          : this.rxDefinitionAdapterRegistryService.getRuntimeAdapter(componentDefinition.type);\n\n      if (adapter) {\n        const result$ = adapter.adaptDefinition(componentDefinition, viewDefinition);\n\n        adapterObservables$.push(result$ ? result$.pipe(take(1)) : EMPTY);\n      }\n\n      return adapterObservables$;\n    }, []);\n\n    return isEmpty(result) ? [EMPTY] : result;\n  }\n\n  private hasViewCancellingAction(viewDefinition: IViewDefinition): boolean {\n    return Boolean(\n      this.rxViewDefinitionParserService.findViewComponent(\n        viewDefinition,\n        (viewComponentDefinition) =>\n          viewComponentDefinition.type === RxViewComponentType.Action &&\n          viewComponentDefinition.propertiesByName.name === 'rxCloseViewAction' &&\n          viewComponentDefinition.propertiesByName.actAsCancel === 'true'\n      )\n    );\n  }\n\n  private hasPageComponent(viewDefinition: IViewDefinition): boolean {\n    return head(viewDefinition.componentDefinitions)?.type === RxViewComponentType.Page;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  AnyViewComponentDefinition,\n  IContainerViewComponentDefinition,\n  IViewDefinition,\n  RX_AVAILABLE_ON_DEVICES_ALL_VALUE,\n  RX_AVAILABLE_ON_DEVICES_PROP_NAME,\n  RxDeviceDetectionService,\n  RxViewLayout\n} from '@helix/platform/view/api';\nimport { RxJsonParserService, RxObjectUtilsService } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxViewDefinitionAdapterService {\n  constructor(\n    private rxObjectUtilsService: RxObjectUtilsService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxDeviceDetectionService: RxDeviceDetectionService\n  ) {}\n\n  // called to make view modifications before the view component adapters are executed\n  preProcessViewDefinition(viewDefinition: IViewDefinition): void {\n    viewDefinition.componentDefinitions?.forEach((childComponentDefinition) => {\n      this.expandProperties(childComponentDefinition);\n    });\n  }\n\n  // called to make view modifications after the view component adapters have been executed\n  postProcessViewDefinition(viewDefinition: IViewDefinition): void {\n    viewDefinition.componentDefinitions?.forEach((childComponentDefinition) => {\n      this.filterComponentsForDevice(childComponentDefinition, viewDefinition);\n    });\n  }\n\n  private expandProperties(componentDefinition): void {\n    componentDefinition.propertiesByName = this.rxObjectUtilsService.expandProperties(\n      componentDefinition.propertiesByName\n    );\n\n    if (componentDefinition.componentDefinitions) {\n      componentDefinition.componentDefinitions.forEach((childComponentDefinition) => {\n        this.expandProperties(childComponentDefinition);\n      });\n    }\n  }\n\n  private filterComponentsForDevice(\n    componentDefinition: AnyViewComponentDefinition,\n    parent: IContainerViewComponentDefinition | IViewDefinition\n  ): void {\n    const availableOnDevicesProp =\n      this.rxJsonParserService.tryParseJson(\n        componentDefinition.propertiesByName?.[RX_AVAILABLE_ON_DEVICES_PROP_NAME],\n        RX_AVAILABLE_ON_DEVICES_ALL_VALUE\n      ) || RX_AVAILABLE_ON_DEVICES_ALL_VALUE;\n\n    if (availableOnDevicesProp.includes(this.rxDeviceDetectionService.currentDevice)) {\n      if ('componentDefinitions' in componentDefinition) {\n        componentDefinition.componentDefinitions.forEach((childComponentDefinition) => {\n          this.filterComponentsForDevice(childComponentDefinition, componentDefinition);\n        });\n      }\n    } else {\n      parent.componentDefinitions = parent.componentDefinitions.filter(\n        (definition) => definition !== componentDefinition\n      );\n\n      if (parent.layout) {\n        const updatedLayout = RxViewLayout.removeChildFromLayout(\n          this.rxJsonParserService.tryParseJson(parent.layout),\n          componentDefinition.guid\n        );\n\n        parent.layout = JSON.stringify(updatedLayout);\n      }\n    }\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  RxBundleService,\n  RxCurrentUserService,\n  RxGlobalCacheService,\n  RxLogService,\n  RxNotificationService\n} from '@helix/platform/shared/api';\nimport { RxUtilityModalsService } from '@helix/platform/ui-kit';\nimport { RxJsonParserService, RxObjectUtilsService } from '@helix/platform/utils';\nimport {\n  IComponentPropertyDescriptor,\n  IContainerViewComponentDefinition,\n  IExpressionEvaluator,\n  IRuntimeComponentApiCallResult,\n  IViewActionParamDescriptor,\n  IViewComponentDefinition,\n  IViewComponentDefinitionWithParent,\n  IViewComponentDescriptor,\n  IViewDefinition,\n  IViewInputParams,\n  IViewPresetsByViewComponentGuid,\n  RxExpressionEvaluatorService,\n  RxViewActionRegistryService,\n  RxViewComponentRegistryService,\n  RxViewComponentType,\n  RxViewDefinitionCacheService,\n  RxViewDefinitionParserService,\n  RxViewDefinitionService,\n  ViewComponentPropertyType\n} from '@helix/platform/view/api';\nimport {\n  every,\n  find,\n  forEach,\n  forIn,\n  forOwn,\n  get,\n  groupBy,\n  has,\n  includes,\n  intersection,\n  isEmpty,\n  isFunction,\n  isNil,\n  isObject,\n  isString,\n  keys,\n  map as _map,\n  set,\n  some,\n  sortBy,\n  toNumber\n} from 'lodash';\nimport {\n  asyncScheduler,\n  BehaviorSubject,\n  combineLatest,\n  EMPTY,\n  from,\n  merge,\n  Observable,\n  of,\n  ReplaySubject,\n  Subject,\n  throwError\n} from 'rxjs';\nimport {\n  catchError,\n  defaultIfEmpty,\n  distinct,\n  filter,\n  map,\n  reduce,\n  switchMap,\n  switchMapTo,\n  take,\n  tap\n} from 'rxjs/operators';\nimport { ComponentExpression } from './component/component-expression.class';\nimport { ViewComponentEventManager } from './event-manager/view-component-event-manager.class';\nimport { VIEW_COMPONENT_DEFAULT_EVENT_NAME } from './event-manager/view-component-event-manager.constant';\nimport { IExpressionContext } from './interfaces/expression-context.interface';\nimport { IRuntimeViewApi } from './interfaces/runtime-view-api.interface';\nimport { IViewComponentActionState } from './interfaces/runtime-view-component-action-state.interface';\nimport { IViewComponentState } from './interfaces/runtime-view-component-state.interface';\nimport { IRuntimeViewConfiguration } from './interfaces/runtime-view-configuration.interface';\nimport { IRuntimeViewOutputParameter } from './interfaces/runtime-view-output-parameter.interface';\nimport { IViewComponentPropertyChanged } from './interfaces/view-component-property-changed.interface';\nimport { IViewComponentRuntimeState } from './interfaces/view-component-runtime-state.interface';\nimport { RxRuntimeViewUtilsService } from './runtime-view-utils.service';\nimport { RxViewDefinitionAdapterService } from './view-definition-adapter.service';\n\n@Injectable()\nexport class RuntimeViewModel {\n  // public api which available for runtime view client\n  api: IRuntimeViewApi = {\n    save: this.save.bind(this),\n    close: this.close.bind(this),\n    cancel: this.cancel.bind(this),\n    refresh: this.refresh.bind(this),\n    canClose: this.canClose.bind(this),\n    applyViewPreset: this.applyViewPreset.bind(this),\n    deleteViewPreset: this.deleteViewPreset.bind(this),\n    discardViewPresetChanges: this.discardViewPresetChanges.bind(this),\n    saveViewPreset: this.saveViewPreset.bind(this)\n  };\n\n  private saveSubject: Subject<void> = new Subject();\n  private closeSubject: Subject<IRuntimeViewOutputParameter> = new Subject();\n  private cancelSubject: Subject<void> = new Subject();\n\n  save$: Observable<void> = this.saveSubject.asObservable();\n  close$: Observable<IRuntimeViewOutputParameter> = this.closeSubject.asObservable();\n  cancel$: Observable<void> = this.cancelSubject.asObservable();\n\n  viewDefinition: IViewDefinition;\n\n  isUserInteractionDetected: boolean;\n\n  private dependentOnViewIsValidPropViewComponentGuids: string[];\n\n  viewComponentStates: Map<string, IViewComponentState> = new Map();\n\n  private configuration: IRuntimeViewConfiguration;\n\n  // store all components state, needed for component expression re-evaluation\n  private evaluationData: IExpressionContext = {\n    view: {\n      api: this.api,\n      components: {},\n      inputParams: {},\n      isValid: false\n    },\n    keywords: {\n      user: this.rxCurrentUserService.getName(),\n      newLine: '\\n'\n    }\n  };\n\n  constructor(\n    private rxBundleService: RxBundleService,\n    private rxGlobalCacheService: RxGlobalCacheService,\n    private rxViewComponentRegistryService: RxViewComponentRegistryService,\n    private rxViewDefinitionAdapterService: RxViewDefinitionAdapterService,\n    private rxViewDefinitionParserService: RxViewDefinitionParserService,\n    private rxViewDefinitionService: RxViewDefinitionService,\n    private rxRuntimeViewUtilsService: RxRuntimeViewUtilsService,\n    private rxExpressionEvaluatorService: RxExpressionEvaluatorService,\n    private rxNotificationService: RxNotificationService,\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxLogService: RxLogService,\n    private viewComponentEventManager: ViewComponentEventManager,\n    private rxUtilityModalsService: RxUtilityModalsService,\n    private rxViewDefinitionCacheService: RxViewDefinitionCacheService,\n    private rxObjectUtilsService: RxObjectUtilsService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxCurrentUserService: RxCurrentUserService\n  ) {}\n\n  init(configuration: IRuntimeViewConfiguration): Observable<never> {\n    this.configuration = configuration;\n\n    this.clear();\n\n    const viewDefinition$: Observable<IViewDefinition> = isString(configuration.viewDefinitionName)\n      ? this.rxViewDefinitionCacheService.getViewDefinition(configuration.viewDefinitionName)\n      : of(configuration.viewDefinitionName);\n\n    return viewDefinition$.pipe(\n      switchMap((viewDefinition) => {\n        const viewComponents = this.rxViewDefinitionParserService.getComponents(viewDefinition, true);\n\n        const ownerBundleIds: Observable<string>[] = viewComponents.map(\n          (viewComponent: IViewComponentDefinitionWithParent) =>\n            viewComponent.componentDefinition.type === RxViewComponentType.Action\n              ? this.rxViewActionRegistryService.getActionOwnerBundleId(\n                  viewComponent.componentDefinition.propertiesByName.name\n                )\n              : this.rxViewComponentRegistryService.getComponentOwnerBundleId(viewComponent.componentDefinition.type)\n        );\n\n        return merge(...ownerBundleIds).pipe(\n          filter(Boolean),\n          distinct(),\n          reduce((acc, bundleId) => {\n            acc.push(bundleId);\n\n            return acc;\n          }, []),\n          switchMap((bundleIds) =>\n            bundleIds.length\n              ? this.rxBundleService.loadBundles(bundleIds, true).pipe(map(() => viewDefinition))\n              : of(viewDefinition)\n          ),\n          switchMap((viewDefinition: IViewDefinition) =>\n            this.rxViewComponentRegistryService.resolveAsyncDescriptors().pipe(map(() => viewDefinition))\n          )\n        );\n      }),\n      switchMap((viewDefinition: IViewDefinition) => this.processViewDefinition(viewDefinition))\n    );\n  }\n\n  clear(): void {\n    this.viewComponentStates.clear();\n\n    this.evaluationData.view.components = {};\n    this.evaluationData.view.inputParams = {};\n  }\n\n  save(closeViewAfterSave: boolean = false): Observable<never> {\n    return this.callRuntimeComponentsApi('save', closeViewAfterSave).pipe(\n      tap({\n        complete: () => this.saveSubject.next()\n      })\n    );\n  }\n\n  close(): Observable<IRuntimeViewOutputParameter> {\n    const viewOutputParams = this.evaluateViewOutputParams();\n\n    this.closeSubject.next(viewOutputParams);\n\n    return of(viewOutputParams);\n  }\n\n  cancel(skipDirtyCheck?: boolean): Observable<never> {\n    if (skipDirtyCheck) {\n      this.cancelSubject.next();\n\n      return EMPTY;\n    } else {\n      return this.isDirtyView().pipe(\n        switchMap((isDirty) => (isDirty ? this.rxUtilityModalsService.confirmUnsavedChanges() : of(true))),\n        tap((canClose) => {\n          if (canClose) {\n            this.cancelSubject.next();\n          }\n        }),\n        switchMap((canClose) => {\n          return canClose ? EMPTY : throwError(null);\n        })\n      );\n    }\n  }\n\n  refresh(): Observable<never> {\n    return this.callRuntimeComponentsApi('refresh');\n  }\n\n  canClose(): boolean {\n    let canClose = true;\n\n    this.isDirtyView().subscribe((isDirty) => (canClose = !isDirty));\n\n    return canClose;\n  }\n\n  applyViewPreset(\n    viewPresetSelectorGuid: string,\n    viewPresetGuid: string,\n    sharedViewPresets: IViewPresetsByViewComponentGuid\n  ): Observable<never> {\n    return this.callRuntimeComponentsApi(\n      'applyViewPreset',\n      viewPresetSelectorGuid,\n      viewPresetGuid,\n      sharedViewPresets\n    ).pipe(switchMap(() => EMPTY));\n  }\n\n  deleteViewPreset(viewPresetGuid: string): Observable<never> {\n    return this.callRuntimeComponentsApi('deleteViewPreset', viewPresetGuid).pipe(switchMap(() => EMPTY));\n  }\n\n  discardViewPresetChanges(\n    viewPresetGuid: string,\n    sharedViewPresets: IViewPresetsByViewComponentGuid\n  ): Observable<never> {\n    return this.callRuntimeComponentsApi('discardViewPresetChanges', viewPresetGuid, sharedViewPresets).pipe(\n      switchMap(() => EMPTY)\n    );\n  }\n\n  saveViewPreset(viewPresetGuid: string): Observable<never> {\n    return this.callRuntimeComponentsApi('saveViewPreset', viewPresetGuid).pipe(switchMap(() => EMPTY));\n  }\n\n  shareViewPreset(viewPresetSelectorGuid: string): Observable<IViewPresetsByViewComponentGuid> {\n    return this.callRuntimeComponentsApi<IRuntimeComponentApiCallResult[]>(\n      'shareViewPreset',\n      viewPresetSelectorGuid\n    ).pipe(\n      defaultIfEmpty([]),\n      map((data: IRuntimeComponentApiCallResult[]) =>\n        data\n          .filter((item) => Boolean(item?.data))\n          .reduce((result, item) => {\n            result[item.guid] = item.data;\n            return result;\n          }, {})\n      )\n    );\n  }\n\n  // launch view component actions for particular event\n  triggerViewActions(componentGuid: string, viewActionTriggerEventName: string): Promise<void> {\n    let actionsResult = Promise.resolve();\n\n    const viewComponentState = this.viewComponentStates.get(componentGuid);\n\n    if (viewComponentState) {\n      const eventState = viewComponentState.eventStates[viewActionTriggerEventName];\n\n      if (eventState) {\n        const actionStates = eventState.map((actionState) => ({\n          guid: actionState.guid,\n          name: actionState.name,\n          parameters: actionState.config\n        }));\n\n        // execute view component actions for particular event\n        actionsResult = this.viewComponentEventManager.executeActions(actionStates, (actionState, result) => {\n          // hook which is called after each action execution\n          // update action shared state and re-evaluate dependent action view component\n          this.onViewComponentActionOutputChanged(componentGuid, actionState.guid, result);\n        });\n      } else {\n        this.rxLogService.warning(\n          `Cannot trigger view actions. View Action Trigger Event ${viewActionTriggerEventName} not found.`\n        );\n      }\n    } else {\n      this.rxLogService.warning(`Cannot trigger view actions. View Component ${componentGuid} not found.`);\n    }\n\n    return actionsResult;\n  }\n\n  // hook which is called when view component triggers \"property changed\" event\n  onViewComponentPropertyChanged({ guid, propertyName, newValue }: IViewComponentPropertyChanged): void {\n    const viewComponentState = this.viewComponentStates.get(guid);\n\n    viewComponentState.publicState[propertyName] = newValue;\n\n    this.updateEvaluationData(viewComponentState);\n\n    // update config if changed property exist in component properties descriptor\n    if (propertyName !== 'api' && some(viewComponentState.componentDescriptor.properties, { name: propertyName })) {\n      this.updateComponentConfigProperty(propertyName, newValue, viewComponentState);\n      this.updateViewComponentConfig(viewComponentState);\n    }\n\n    const dependentViewComponentGuids = viewComponentState.dependentViewComponentsMap.get(propertyName);\n    let dependentViewComponentStates: IViewComponentState[];\n\n    // find all view components which depend on changed view component based on expressions\n    if (dependentViewComponentGuids) {\n      // restore dependent components from the cache\n      dependentViewComponentStates = dependentViewComponentGuids.map((viewComponentGuid) =>\n        this.viewComponentStates.get(viewComponentGuid)\n      );\n    } else {\n      dependentViewComponentStates = this.getDependentViewComponentStates((expression) =>\n        expression.hasDependency(guid, propertyName)\n      );\n\n      // cache dependent view component guids\n      viewComponentState.dependentViewComponentsMap.set(\n        propertyName,\n        dependentViewComponentStates.map((state) => state.guid)\n      );\n    }\n\n    // evaluate expressions for all dependent view components\n    dependentViewComponentStates.forEach((dependentViewComponentState) => {\n      this.evaluateDependentProperties(dependentViewComponentState, guid, propertyName);\n    });\n\n    // update config$ for all dependent view components\n    dependentViewComponentStates\n      .map((dependentViewComponentState) => {\n        // if dependentViewComponentState is data view component\n        // config$ should be updated for nearest parent view component with UI representation\n        // i.e. if rx-record-grid-column is dependent component then rx-record-grid config$ should be update\n        if (dependentViewComponentState.isDataViewComponent) {\n          return this.getParentViewComponent(dependentViewComponentState);\n        } else {\n          return dependentViewComponentState;\n        }\n      })\n      .forEach((dependentViewComponentState) => {\n        this.updateViewComponentConfig(dependentViewComponentState);\n      });\n\n    if (propertyName === 'isValid') {\n      this.triggerViewValidation(newValue);\n    }\n  }\n\n  // ts guard - defines whether componentDescriptor is data view component\n  isDataViewComponentDefinition(componentDescriptor: IViewComponentDescriptor): boolean {\n    return componentDescriptor.configPropertyName !== undefined;\n  }\n\n  getViewInputParameters(): IViewInputParams {\n    return this.configuration.inputParams;\n  }\n\n  private isDirtyView(): Observable<boolean> {\n    // Used a separate observable to handle scenario when callRuntimeComponentsApi observable\n    // will be immediately completed. It can happen when no view components will have 'isDirty' API.\n    const isDirtySubject = new ReplaySubject<boolean>(1);\n    let isDirtyView = false;\n\n    if (this.isUserInteractionDetected) {\n      this.callRuntimeComponentsApi<IRuntimeComponentApiCallResult<boolean>[]>('isDirty')\n        .pipe(tap((result) => (isDirtyView = result.some(({ data }) => data))))\n        .subscribe({\n          complete: () => isDirtySubject.next(isDirtyView)\n        });\n    } else {\n      isDirtySubject.next(isDirtyView);\n    }\n\n    return isDirtySubject.asObservable().pipe(take(1));\n  }\n\n  private triggerViewValidation(isValid): void {\n    if (isValid) {\n      isValid = Array.from(this.viewComponentStates.values())\n        .filter((viewComponent) => has(viewComponent.publicState, 'isValid'))\n        .every((viewComponent) => viewComponent.publicState.isValid);\n    }\n\n    if (this.evaluationData.view.isValid !== isValid) {\n      this.evaluationData.view.isValid = isValid;\n\n      let dependentViewComponentStates;\n\n      if (this.dependentOnViewIsValidPropViewComponentGuids) {\n        dependentViewComponentStates = this.dependentOnViewIsValidPropViewComponentGuids.map((guid) =>\n          this.viewComponentStates.get(guid)\n        );\n      } else {\n        dependentViewComponentStates = this.getDependentViewComponentStates((expression) =>\n          expression.hasViewIsValidToken()\n        );\n\n        this.dependentOnViewIsValidPropViewComponentGuids = dependentViewComponentStates.map((state) => state.guid);\n      }\n\n      dependentViewComponentStates.forEach((viewComponentState) => {\n        this.evaluateComponentExpressions(viewComponentState, (expression) => expression.hasViewIsValidToken());\n      });\n\n      // update view component configs in next javascript event loop, to avoid\n      // 'ExpressionChangedAfterItHasBeenCheckedError' error in components,\n      // dependent on the view isValid property e.g Action button disabled property\n      asyncScheduler.schedule(() => {\n        dependentViewComponentStates.forEach(this.updateViewComponentConfig.bind(this));\n      });\n    }\n  }\n\n  // return nearest parent view component with UI representation\n  private getParentViewComponent(viewComponentState: IViewComponentState): IViewComponentState {\n    let currentViewComponentState = viewComponentState;\n\n    while (currentViewComponentState.isDataViewComponent) {\n      currentViewComponentState = this.viewComponentStates.get(currentViewComponentState.parentViewComponentGuid);\n    }\n\n    return currentViewComponentState;\n  }\n\n  // return all view components which depend on particular expression\n  private getDependentViewComponentStates(\n    expressionFilterFn: (componentExpression: ComponentExpression) => boolean\n  ): IViewComponentState[] {\n    return Array.from(this.viewComponentStates.values()).filter((viewComponentState) => {\n      const isDependentComponentState = some(viewComponentState.expressions, expressionFilterFn);\n\n      const isDependentEventState = some(viewComponentState.eventStates, (eventState) =>\n        some(eventState, (event) => some(event.expressions, expressionFilterFn))\n      );\n\n      return isDependentComponentState || isDependentEventState;\n    });\n  }\n\n  // pass new view component config to the @Component\n  private updateViewComponentConfig(viewComponentState: IViewComponentState): void {\n    // finally update config\n    viewComponentState.config$.next(this.buildComponentConfig(viewComponentState));\n  }\n\n  // build view component config based on configState and child data view component\n  private buildComponentConfig(viewComponentState: IViewComponentState): IViewComponentRuntimeState {\n    const viewComponentConfigState = {\n      ...viewComponentState.configState\n    };\n\n    // build child data component states\n    this.buildComponentChildDataConfig(viewComponentState, viewComponentConfigState);\n\n    return viewComponentConfigState;\n  }\n\n  // recursively build view component config based on data view components\n  private buildComponentChildDataConfig(\n    viewComponentState: IViewComponentState,\n    viewComponentChildConfig: object = {}\n  ): void {\n    // find all child data view components\n    const dataViewComponentChildStates = viewComponentState.childViewComponentGuids\n      .map((viewComponentGuid) => this.viewComponentStates.get(viewComponentGuid))\n      .filter((currentViewComponentState) => Boolean(currentViewComponentState))\n      .filter((currentViewComponentState) => currentViewComponentState.isDataViewComponent);\n\n    // group data view components on config property name\n    const dataViewComponentChildStateGroups = groupBy<IViewComponentState>(\n      dataViewComponentChildStates,\n      (dataViewComponentState) => dataViewComponentState.configPropertyName\n    );\n\n    // store each data view component config under corresponding config property name\n    Object.keys(dataViewComponentChildStateGroups).forEach((configPropertyName) => {\n      viewComponentChildConfig[configPropertyName] = dataViewComponentChildStateGroups[configPropertyName].map(\n        (dataViewComponentStateChild) => {\n          const dataViewComponentChildState = {\n            ...dataViewComponentStateChild.configState\n          };\n\n          // recursively build data view component config\n          this.buildComponentChildDataConfig(dataViewComponentStateChild, dataViewComponentChildState);\n\n          return dataViewComponentChildState;\n        }\n      );\n    });\n  }\n\n  // update action view component shared state\n  // re-evaluate all dependent action view components\n  private onViewComponentActionOutputChanged(componentGuid: string, actionGuid: string, viewActionOutput: any): void {\n    const viewComponentState = this.viewComponentStates.get(componentGuid);\n\n    if (viewComponentState) {\n      const actionState = viewComponentState.eventStates[VIEW_COMPONENT_DEFAULT_EVENT_NAME].find((currentAction) => {\n        return currentAction.guid === actionGuid;\n      });\n\n      actionState.publicState.output = viewActionOutput;\n\n      this.updateEvaluationData(viewComponentState);\n\n      this.evaluateDependentProperties(viewComponentState, actionGuid, 'output');\n    }\n  }\n\n  private evaluateViewOutputParams(): IRuntimeViewOutputParameter {\n    return this.viewDefinition.outputParams.reduce((result, outputParam) => {\n      result[outputParam.name] = this.rxExpressionEvaluatorService.tryEvaluate(outputParam.source, this.evaluationData);\n\n      return result;\n    }, {});\n  }\n\n  private processViewDefinition(viewDefinition: IViewDefinition): Observable<never> {\n    this.viewDefinition = this.rxObjectUtilsService.cloneDeep(viewDefinition);\n\n    this.rxViewDefinitionAdapterService.preProcessViewDefinition(this.viewDefinition);\n\n    const adapters$ = this.rxRuntimeViewUtilsService.runAdaptersForComponents(this.viewDefinition);\n\n    return combineLatest(adapters$).pipe(\n      switchMapTo(EMPTY),\n      tap({\n        complete: () => {\n          this.rxViewDefinitionAdapterService.postProcessViewDefinition(this.viewDefinition);\n\n          this.rxViewDefinitionParserService\n            .getComponents(this.viewDefinition)\n            .forEach(this.processComponentDefinition.bind(this));\n\n          // evaluate expressions with keyword tokens\n          this.viewComponentStates.forEach((viewComponent) => {\n            this.evaluateComponentExpressions(viewComponent, (componentExpression) =>\n              componentExpression.hasKeywordTokens()\n            );\n          });\n\n          // evaluate expressions without tokens\n          this.viewComponentStates.forEach((viewComponent) => {\n            this.evaluateComponentExpressions(viewComponent, (componentExpression) => !componentExpression.hasTokens());\n          });\n\n          // evaluate expressions with view tokens\n          this.viewComponentStates.forEach((viewComponent) => {\n            this.evaluateComponentExpressions(viewComponent, (componentExpression) =>\n              componentExpression.hasViewTokens()\n            );\n          });\n\n          // evaluate expressions with component tokens\n          this.viewComponentStates.forEach((viewComponent) => {\n            this.evaluateComponentExpressions(viewComponent, (componentExpression) =>\n              componentExpression.hasComponentTokens()\n            );\n          });\n\n          // update all component configs\n          this.viewComponentStates.forEach((viewComponentState) => {\n            this.updateViewComponentConfig(viewComponentState);\n          });\n        }\n      })\n    );\n  }\n\n  private processComponentDefinition(componentDefinitionItem: IViewComponentDefinitionWithParent): void {\n    if (!componentDefinitionItem.parentComponentDefinition) {\n      // process root component definition\n      const configuredParamNames = _map(\n        ((<any>componentDefinitionItem.componentDefinition) as IViewDefinition).inputParams,\n        'name'\n      );\n\n      const passedParamNames = keys(this.configuration.inputParams);\n\n      const onlyPositionalParams =\n        passedParamNames.length > 0 && every(passedParamNames, (inputParamName) => /^\\$[0-9]+\\$$/.test(inputParamName));\n\n      if (onlyPositionalParams && intersection(configuredParamNames, passedParamNames).length === 0) {\n        forEach(passedParamNames, (inputParamName) => {\n          const paramIndex = Number(inputParamName.match(/^\\$([0-9]+)\\$$/)[1]);\n\n          const definitionParamName = get(\n            componentDefinitionItem.componentDefinition,\n            `inputParams[${paramIndex}].name`\n          );\n\n          this.evaluationData.view.inputParams[definitionParamName] = this.configuration.inputParams[inputParamName];\n        });\n      } else {\n        forEach(configuredParamNames, (inputParamName) => {\n          this.evaluationData.view.inputParams[inputParamName] = this.configuration.inputParams[inputParamName];\n        });\n      }\n    } else {\n      const componentDefinition = componentDefinitionItem.componentDefinition;\n\n      const viewComponentState = this.buildViewComponentState(componentDefinitionItem);\n\n      if (viewComponentState) {\n        this.viewComponentStates.set(componentDefinition.guid, viewComponentState);\n      }\n    }\n  }\n\n  // generate view component state based on component definition\n  private buildViewComponentState(componentDefinitionItem: IViewComponentDefinitionWithParent): IViewComponentState {\n    const componentDefinition = componentDefinitionItem.componentDefinition;\n    const componentDescriptor = this.rxViewComponentRegistryService.get(componentDefinition.type);\n\n    if (componentDescriptor) {\n      const viewComponentState: IViewComponentState = {\n        guid: componentDefinition.guid,\n        type: componentDefinition.type,\n        config$: new BehaviorSubject<IViewComponentRuntimeState>({}),\n        expressions: [],\n        eventStates: {\n          [VIEW_COMPONENT_DEFAULT_EVENT_NAME]: []\n        },\n        configState: {},\n        publicState: {},\n        isDataViewComponent: false,\n        configPropertyName: null,\n        parentViewComponentGuid: componentDefinitionItem.parentComponentDefinition.guid,\n        childViewComponentGuids: [],\n        dependentViewComponentsMap: new Map<string, string[]>(),\n        componentDescriptor\n      };\n\n      if (this.isDataViewComponentDefinition(componentDescriptor)) {\n        viewComponentState.isDataViewComponent = true;\n        viewComponentState.configPropertyName = componentDescriptor.configPropertyName;\n      }\n\n      forOwn(componentDefinition.propertiesByName, (propertyValue, propertyName) => {\n        const viewComponentPropertyDescriptor = find(\n          componentDescriptor.properties,\n          (descriptor) => propertyName === descriptor.name\n        );\n\n        const isExpressionEvaluationEnabled =\n          viewComponentPropertyDescriptor && viewComponentPropertyDescriptor.enableExpressionEvaluation;\n\n        // initialize view component expressions\n        if (isExpressionEvaluationEnabled) {\n          // create expression for property\n          viewComponentState.expressions.push(\n            new ComponentExpression(\n              propertyName,\n              propertyValue,\n              this.rxExpressionEvaluatorService,\n              viewComponentPropertyDescriptor.evaluatorService\n            )\n          );\n        }\n\n        // update view component config state object\n        this.updateComponentConfigProperty(\n          propertyName,\n          isExpressionEvaluationEnabled ? null : propertyValue,\n          viewComponentState\n        );\n      });\n\n      // add initial view component state to evaluationData\n      this.updateEvaluationData(viewComponentState);\n\n      if (this.isContainerComponentDefinition(componentDefinition)) {\n        // set up view component events\n        componentDefinition.componentDefinitions\n          .filter((currentComponentDefinition) => currentComponentDefinition.type === RxViewComponentType.Action)\n          .forEach((actionComponentDefinition) => {\n            const actionState = this.buildViewComponentActionState(actionComponentDefinition);\n\n            if (actionState) {\n              viewComponentState.eventStates[VIEW_COMPONENT_DEFAULT_EVENT_NAME].push(actionState);\n            }\n          });\n\n        // sort actions in correct order\n        viewComponentState.eventStates[VIEW_COMPONENT_DEFAULT_EVENT_NAME] = sortBy(\n          viewComponentState.eventStates[VIEW_COMPONENT_DEFAULT_EVENT_NAME],\n          'index'\n        );\n\n        // set up child view component guids\n        viewComponentState.childViewComponentGuids = componentDefinition.componentDefinitions\n          .filter((currentComponentDefinition) => currentComponentDefinition.type !== RxViewComponentType.Action)\n          .map((currentComponentDefinition) => currentComponentDefinition.guid);\n      }\n\n      return viewComponentState;\n    } else if (componentDefinition.type !== RxViewComponentType.Action) {\n      this.rxLogService.warning(\n        `Cannot initialize view component. View Component Descriptor for ${componentDefinition.type} not found.`\n      );\n    }\n  }\n\n  // generate action view component state\n  private buildViewComponentActionState(\n    actionComponentDefinition: IViewComponentDefinition\n  ): IViewComponentActionState {\n    const actionDescriptor = this.rxViewActionRegistryService.get(actionComponentDefinition.propertiesByName.name);\n\n    if (actionDescriptor) {\n      const actionState: IViewComponentActionState = {\n        guid: actionComponentDefinition.guid,\n        name: actionComponentDefinition.propertiesByName.name,\n        index: toNumber(actionComponentDefinition.propertiesByName.index) || 0,\n        config: {},\n        publicState: {},\n        expressions: []\n      };\n\n      Object.keys(actionComponentDefinition.propertiesByName || {})\n        .filter((parameterName) => parameterName !== 'name')\n        .map((parameterName) => {\n          const actionPropertyDescriptor = (actionDescriptor.parameters || []).find(\n            (descriptor) => parameterName === descriptor.name\n          );\n\n          const isExpressionEvaluationEnabled =\n            actionPropertyDescriptor && actionPropertyDescriptor.enableExpressionEvaluation;\n\n          // initialize action view component expressions\n          if (isExpressionEvaluationEnabled) {\n            // create expression for property\n            this.initializeActionExpressionForProperty(\n              actionState,\n              actionPropertyDescriptor.evaluatorService,\n              parameterName,\n              actionComponentDefinition.propertiesByName[parameterName]\n            );\n          }\n\n          // add initial action view component state to evaluationData\n          this.updateActionConfigProperty(\n            parameterName,\n            isExpressionEvaluationEnabled ? null : actionComponentDefinition.propertiesByName[parameterName],\n            actionState\n          );\n        });\n\n      return actionState;\n    }\n  }\n\n  private initializeActionExpressionForProperty(\n    actionState: IViewComponentActionState,\n    evaluatorService: IExpressionEvaluator,\n    propertyName: string,\n    propertyValue: any\n  ): void {\n    if (isObject(propertyValue)) {\n      forIn(propertyValue, (value, name) => {\n        this.initializeActionExpressionForProperty(actionState, evaluatorService, `${propertyName}.${name}`, value);\n      });\n    } else {\n      actionState.expressions.push(\n        new ComponentExpression(propertyName, propertyValue, this.rxExpressionEvaluatorService, evaluatorService)\n      );\n    }\n  }\n\n  private callRuntimeComponentsApi<T = never>(methodName: string, ...args): Observable<T> {\n    const resultSubject = new ReplaySubject<T>(1);\n    const errors: Array<Error | HttpErrorResponse | string> = [];\n\n    const apiCallResults = Array.from(this.viewComponentStates.values())\n      .filter((viewComponent) =>\n        Boolean(viewComponent.publicState.api && isFunction(viewComponent.publicState.api[methodName]))\n      )\n      .map((viewComponent) => {\n        let result = viewComponent.publicState.api[methodName].apply(null, args);\n\n        if (result && result.then) {\n          result = from(result);\n        } else if (!(result instanceof Observable)) {\n          result = of(result);\n        }\n\n        return result.pipe(\n          take(1),\n          map((res) => ({\n            guid: viewComponent.guid,\n            data: res\n          })),\n          tap({\n            error: (error) => errors.push(error)\n          }),\n          // catch errors from each view component api call to allow to successfully finish other api calls.\n          catchError(() => EMPTY)\n        );\n      });\n\n    combineLatest<T>(apiCallResults).subscribe({\n      next: (results) => resultSubject.next(results),\n      complete: () => (isEmpty(errors) ? resultSubject.complete() : resultSubject.error(errors))\n    });\n\n    return resultSubject.asObservable();\n  }\n\n  private evaluateComponentExpressions(\n    viewComponent: IViewComponentState,\n    expressionFilterFunc: (componentEx: ComponentExpression) => boolean\n  ): void {\n    // update component expressions\n    viewComponent.expressions.filter(expressionFilterFunc).forEach((componentExpression) => {\n      this.updateComponentConfigProperty(\n        componentExpression.propertyName,\n        this.evaluateExpression(componentExpression),\n        viewComponent\n      );\n    });\n\n    this.updateEvaluationData(viewComponent);\n\n    // update event expressions\n    Object.keys(viewComponent.eventStates).forEach((eventName) => {\n      viewComponent.eventStates[eventName].forEach((actionState) => {\n        actionState.expressions.filter(expressionFilterFunc).forEach((componentExpression) => {\n          this.updateActionConfigProperty(\n            componentExpression.propertyName,\n            this.evaluateExpression(componentExpression),\n            actionState\n          );\n\n          this.updateEvaluationData(viewComponent);\n        });\n      });\n    });\n  }\n\n  private evaluateDependentProperties(viewComponent: IViewComponentState, guid: string, propertyName: string): void {\n    this.evaluateComponentExpressions(viewComponent, (componentExpression) =>\n      componentExpression.hasDependency(guid, propertyName)\n    );\n  }\n\n  private evaluateExpression(componentExpression: ComponentExpression): any {\n    let evaluatedValue;\n\n    try {\n      evaluatedValue = componentExpression.evaluate(this.evaluationData);\n    } catch (e) {\n      evaluatedValue = null;\n\n      this.rxNotificationService.addErrorMessage(e.message, '');\n    }\n\n    return evaluatedValue;\n  }\n\n  // update view component config property based on property descriptor\n  private updateComponentConfigProperty(\n    propertyName: string,\n    propertyValue: any,\n    viewComponent: IViewComponentState\n  ): void {\n    const viewComponentDescriptor = this.rxViewComponentRegistryService.get(viewComponent.type);\n    const viewComponentPropertyDescriptor: IComponentPropertyDescriptor = find(viewComponentDescriptor.properties, {\n      name: propertyName\n    });\n\n    viewComponent.configState[propertyName] = this.processPropertyValue(propertyValue, viewComponentPropertyDescriptor);\n  }\n\n  // update action view component config property based on property descriptor\n  private updateActionConfigProperty(\n    propertyName: string,\n    propertyValue: any,\n    actionComponent: IViewComponentActionState\n  ): void {\n    const viewActionDescriptor = this.rxViewActionRegistryService.get(actionComponent.name);\n\n    let viewActionParameterDescriptor: IViewActionParamDescriptor = find(viewActionDescriptor.parameters, {\n      name: propertyName\n    });\n\n    if (!viewActionParameterDescriptor && includes(propertyName, '.')) {\n      const primaryPropertyName = propertyName.split('.')[0];\n\n      viewActionParameterDescriptor = find(viewActionDescriptor.parameters, { name: primaryPropertyName });\n    }\n\n    set(actionComponent.config, propertyName, this.processPropertyValue(propertyValue, viewActionParameterDescriptor));\n  }\n\n  // sync component data with expression data\n  private updateEvaluationData(viewComponent: IViewComponentState): void {\n    // update component data\n    this.evaluationData.view.components[viewComponent.guid] = {\n      ...viewComponent.configState,\n      ...viewComponent.publicState\n    };\n\n    // update component actions data\n    Object.keys(viewComponent.eventStates).forEach((eventName) => {\n      viewComponent.eventStates[eventName].forEach((actionState) => {\n        this.evaluationData.view.components[actionState.guid] = actionState.publicState;\n      });\n    });\n  }\n\n  // cast property value to the type defined in the descriptor\n  private processPropertyValue(\n    propertyValue: any,\n    propertyDescriptor: IComponentPropertyDescriptor | IViewActionParamDescriptor\n  ): any {\n    if (propertyDescriptor && propertyDescriptor.type && !isNil(propertyValue)) {\n      // try to cast property value to type defined in component descriptor\n      if (propertyDescriptor.type === ViewComponentPropertyType.Boolean) {\n        if (includes(['0', 'false'], propertyValue)) {\n          propertyValue = false;\n        } else {\n          propertyValue = Boolean(propertyValue);\n        }\n      } else if (propertyDescriptor.type === ViewComponentPropertyType.Number) {\n        propertyValue = Number(propertyValue);\n\n        if (Number.isNaN(propertyValue)) {\n          propertyValue = null;\n        }\n      } else if (propertyDescriptor.type === ViewComponentPropertyType.String) {\n        propertyValue = String(propertyValue);\n      } else if (\n        [ViewComponentPropertyType.Array, ViewComponentPropertyType.Object].includes(propertyDescriptor.type)\n      ) {\n        propertyValue = this.rxJsonParserService.tryParseJson(propertyValue);\n      }\n    }\n\n    return propertyValue;\n  }\n\n  private isContainerComponentDefinition(\n    componentDefinition: IViewComponentDefinition | IContainerViewComponentDefinition\n  ): componentDefinition is IContainerViewComponentDefinition {\n    return (componentDefinition as IContainerViewComponentDefinition).componentDefinitions !== undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { pull } from 'lodash';\nimport { RuntimeViewModel } from './runtime-view.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRuntimeViewRegistryService {\n  private activeRuntimeViews: RuntimeViewModel[] = [];\n\n  register(runtimeViewModel: RuntimeViewModel): void {\n    if (!this.activeRuntimeViews.includes(runtimeViewModel)) {\n      this.activeRuntimeViews.push(runtimeViewModel);\n    }\n  }\n\n  getAll(): RuntimeViewModel[] {\n    return this.activeRuntimeViews;\n  }\n\n  unregister(runtimeViewModel: RuntimeViewModel): void {\n    pull(this.activeRuntimeViews, runtimeViewModel);\n  }\n}\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { RuntimeLayoutItem } from '../../../layout/runtime-layout-item.class';\nimport { RuntimeViewCanvasService } from './runtime-view-canvas.service';\nimport { ICanvasComponentPropertyChanged } from '../interfaces/canvas-component-property-changed.interface';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'rx-runtime-view-canvas',\n  templateUrl: './runtime-view-canvas.component.html',\n  providers: [RuntimeViewCanvasService]\n})\nexport class RuntimeViewCanvasComponent implements OnInit, OnDestroy {\n  @Input() layout: RuntimeLayoutItem;\n\n  @Output() componentPropertyChanged: EventEmitter<ICanvasComponentPropertyChanged> = new EventEmitter();\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  constructor(private runtimeViewCanvasService: RuntimeViewCanvasService) {}\n\n  ngOnInit(): void {\n    this.runtimeViewCanvasService.componentPropertyChanged$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((event: ICanvasComponentPropertyChanged) => {\n        this.componentPropertyChanged.emit(event);\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.unsubscribe();\n  }\n}\n","<rx-runtime-view-canvas-item class=\"root-item\" *ngIf=\"layout\" [layout]=\"layout\"></rx-runtime-view-canvas-item>\n","import {\n  Component,\n  EventEmitter,\n  HostBinding,\n  HostListener,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { RxRecordDefinitionCacheService } from '@helix/platform/record/api';\n\nimport { IRuntimeViewConfiguration } from '../interfaces/runtime-view-configuration.interface';\nimport { IRuntimeViewOutputParameter } from '../interfaces/runtime-view-output-parameter.interface';\nimport { RuntimeViewLayoutService } from '../layout/runtime-view-layout.service';\nimport { RuntimeViewModelApi } from '../runtime-view-model-api.class';\nimport { RuntimeViewModel } from '../runtime-view.model';\nimport { RxRuntimeViewRegistryService } from '../runtime-view-registry.service';\nimport { RxViewDefinitionCacheService, RxViewDefinitionService } from '@helix/platform/view/api';\nimport { RxAssociationDefinitionCacheService } from '@helix/platform/association/api';\nimport { RxProcessDefinitionCacheService } from '@helix/platform/process/api';\n\n@Component({\n  selector: 'rx-runtime-view',\n  templateUrl: './runtime-view.component.html',\n  styleUrls: ['./runtime-view.component.scss'],\n  providers: [RuntimeViewModel, RuntimeViewModelApi, RuntimeViewLayoutService]\n})\nexport class RuntimeViewComponent implements OnInit, OnChanges, OnDestroy {\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  @Input() configuration: IRuntimeViewConfiguration;\n\n  @Output() save: EventEmitter<void> = new EventEmitter();\n  @Output() closeView: EventEmitter<IRuntimeViewOutputParameter> = new EventEmitter();\n  @Output() cancelView: EventEmitter<void> = new EventEmitter();\n  @Output() beforeLoad: EventEmitter<void> = new EventEmitter();\n  @Output() afterLoad: EventEmitter<void> = new EventEmitter();\n\n  @HostBinding('class') hostClass: string;\n  @HostBinding('attr.rx-view-definition-guid') viewDefinitionGuid: string;\n\n  @HostListener('focusin')\n  onTrigger() {\n    this.runtimeViewModel.isUserInteractionDetected = true;\n  }\n\n  constructor(\n    private runtimeViewModelApi: RuntimeViewModelApi,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    public runtimeViewLayoutService: RuntimeViewLayoutService,\n    public runtimeViewModel: RuntimeViewModel,\n    private rxProcessDefinitionCacheService: RxProcessDefinitionCacheService,\n    private rxRuntimeViewRegistryService: RxRuntimeViewRegistryService,\n    private rxViewDefinitionCacheService: RxViewDefinitionCacheService,\n    private rxAssociationDefinitionCacheService: RxAssociationDefinitionCacheService,\n    private rxViewDefinitionService: RxViewDefinitionService\n  ) {\n    this.rxAssociationDefinitionCacheService.registerConsumer(this.destroyed$);\n    this.rxProcessDefinitionCacheService.registerConsumer(this.destroyed$);\n    this.rxRecordDefinitionCacheService.registerConsumer(this.destroyed$);\n    this.rxViewDefinitionCacheService.registerConsumer(this.destroyed$);\n  }\n\n  ngOnInit() {\n    this.init();\n\n    this.runtimeViewModel.cancel$.pipe(takeUntil(this.destroyed$)).subscribe(() => this.cancelView.emit());\n    this.runtimeViewModel.save$.pipe(takeUntil(this.destroyed$)).subscribe(() => this.save.emit());\n\n    this.runtimeViewModel.close$\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((viewOutputParams) => this.closeView.emit(viewOutputParams));\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      changes.configuration.currentValue &&\n      changes.configuration.previousValue &&\n      changes.configuration.currentValue.viewDefinitionName !== changes.configuration.previousValue.viewDefinitionName\n    ) {\n      this.runtimeViewModelApi.clear();\n      this.runtimeViewLayoutService.clear();\n\n      this.configuration = changes.configuration.currentValue;\n\n      this.init();\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n    this.rxRuntimeViewRegistryService.unregister(this.runtimeViewModel);\n  }\n\n  private init() {\n    this.beforeLoad.emit();\n\n    this.runtimeViewModel.init(this.configuration).subscribe({\n      complete: () => {\n        this.runtimeViewModelApi.init(this.runtimeViewModel);\n        this.runtimeViewLayoutService.init(this.runtimeViewModel, this.runtimeViewModelApi);\n        this.hostClass = this.runtimeViewModel.viewDefinition.styles || '';\n\n        if (this.rxViewDefinitionService.isPageView(this.runtimeViewModel.viewDefinition)) {\n          this.hostClass = this.hostClass + ' rx-page-view';\n        }\n\n        this.viewDefinitionGuid = this.runtimeViewModel.viewDefinition.guid;\n\n        this.runtimeViewModel.isUserInteractionDetected = false;\n\n        this.afterLoad.emit();\n      }\n    });\n\n    if (this.configuration.onRegisterApi) {\n      this.configuration.onRegisterApi(this.runtimeViewModel.api);\n    }\n\n    this.rxRuntimeViewRegistryService.register(this.runtimeViewModel);\n  }\n}\n","<rx-runtime-view-canvas\n  (componentPropertyChanged)=\"runtimeViewModel.onViewComponentPropertyChanged($event)\"\n  *ngIf=\"runtimeViewLayoutService.layout\"\n  [layout]=\"runtimeViewLayoutService.layout\"\n></rx-runtime-view-canvas>\n","import { Directive, EventEmitter, HostBinding, OnDestroy, OnInit, Output } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { VIEW_COMPONENT_DEFAULT_EVENT_NAME } from '../../event-manager/view-component-event-manager.constant';\nimport { IViewComponentPropertyChanged } from '../../interfaces/view-component-property-changed.interface';\nimport { IViewComponent } from '../../interfaces/view-component.interface';\nimport { RuntimeViewModelApi } from '../../runtime-view-model-api.class';\nimport { pluck, takeUntil } from 'rxjs/operators';\nimport { IPlainObject } from '@helix/platform/shared/api';\n\n@Directive()\n// tslint:disable-next-line:directive-class-suffix\nexport abstract class BaseViewComponent implements IViewComponent, OnDestroy, OnInit {\n  @HostBinding('attr.rx-view-component-id')\n  guid: string;\n\n  @HostBinding('class')\n  customCssClasses = '';\n\n  @Output()\n  autoFill = new EventEmitter<boolean>();\n\n  @Output()\n  autoScroll = new EventEmitter<boolean>();\n\n  @Output()\n  hidden = new EventEmitter<boolean>();\n\n  @HostBinding('hidden')\n  get isHidden(): boolean {\n    return this.isComponentHidden;\n  }\n\n  set isHidden(value: boolean) {\n    this.hidden.emit(value);\n\n    this.isComponentHidden = Boolean(value);\n  }\n\n  private isComponentHidden = false;\n  protected destroyed$ = new ReplaySubject<boolean>(1);\n\n  config: Observable<IPlainObject>;\n  runtimeViewModelApi: RuntimeViewModelApi;\n  propertyChanged: EventEmitter<IViewComponentPropertyChanged> = new EventEmitter();\n\n  ngOnInit(): void {\n    this.config.pipe(pluck('styles'), takeUntil(this.destroyed$)).subscribe((styles: string) => {\n      this.customCssClasses = styles || '';\n\n      this.autoFill.emit(this.customCssClasses.includes('rx-auto-fill'));\n      this.autoScroll.emit(this.customCssClasses.includes('rx-auto-scroll'));\n    });\n  }\n\n  notifyPropertyChanged(propertyName: string, newValue: any, oldValue?: any): void {\n    this.propertyChanged.next({\n      guid: this.guid,\n      propertyName,\n      newValue,\n      oldValue\n    });\n  }\n\n  triggerViewActions(\n    guid: string = this.guid,\n    viewActionTriggerEventName: string = VIEW_COMPONENT_DEFAULT_EVENT_NAME\n  ): Promise<void> {\n    return this.runtimeViewModelApi.triggerViewActions(guid, viewActionTriggerEventName);\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n}\n","import { Component, Input, OnInit, ViewChild, ViewContainerRef, ComponentFactoryResolver } from '@angular/core';\nimport { RX_VIEW_DEFINITION } from '@helix/platform/view/api';\nimport { RuntimeViewCanvasItemService } from '../canvas-item/runtime-view-canvas-item.service';\nimport { RuntimeViewCanvasItemContainerComponent } from '../canvas-item-container/runtime-view-canvas-item-container.component';\n\n@Component({\n  selector: 'rx-runtime-view-canvas-outlet',\n  templateUrl: './runtime-view-canvas-outlet.component.html'\n})\nexport class RuntimeViewCanvasOutletComponent implements OnInit {\n  @Input() name = RX_VIEW_DEFINITION.defaultOutletName;\n  @ViewChild('container', { read: ViewContainerRef, static: true }) container: ViewContainerRef;\n\n  constructor(\n    private runtimeViewCanvasItemService: RuntimeViewCanvasItemService,\n    private componentFactoryResolver: ComponentFactoryResolver\n  ) {}\n\n  ngOnInit() {\n    this.runtimeViewCanvasItemService.registerOutlet(\n      this.name,\n      this.container,\n      this.componentFactoryResolver.resolveComponentFactory(RuntimeViewCanvasItemContainerComponent)\n    );\n  }\n}\n","<ng-container #container></ng-container>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RuntimeViewCanvasComponent } from './component/runtime-view-canvas.component';\nimport { RuntimeViewCanvasItemContainerComponent } from './components/canvas-item-container/runtime-view-canvas-item-container.component';\nimport { RuntimeViewCanvasItemComponent } from './components/canvas-item/runtime-view-canvas-item.component';\nimport { RuntimeViewCanvasOutletComponent } from './components/canvas-outlet/runtime-view-canvas-outlet.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [CommonModule, FormsModule],\n\n  declarations: [\n    RuntimeViewCanvasComponent,\n    RuntimeViewCanvasItemComponent,\n    RuntimeViewCanvasItemContainerComponent,\n    RuntimeViewCanvasOutletComponent\n  ],\n\n  exports: [\n    RuntimeViewCanvasOutletComponent,\n    RuntimeViewCanvasComponent,\n    RuntimeViewCanvasItemComponent,\n    RuntimeViewCanvasItemContainerComponent\n  ],\n\n  entryComponents: [RuntimeViewCanvasItemContainerComponent]\n})\nexport class RuntimeViewCanvasModule {}\n","import { ChangeDetectorRef, Component, Optional } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { NEVER, Subscription } from 'rxjs';\nimport { ActiveModalRef, DismissReasons, DockedPanelContext } from '@bmc-ux/adapt-angular';\n\nimport { RxUtilityModalsService } from '@helix/platform/ui-kit';\nimport { IRuntimeViewConfiguration } from '../../interfaces/runtime-view-configuration.interface';\nimport { IRuntimeViewOutputParameter } from '../../interfaces/runtime-view-output-parameter.interface';\nimport { RxRuntimeViewRegistryService } from '../../runtime-view-registry.service';\n\n@Component({\n  selector: 'rx-runtime-view-modal',\n  templateUrl: './runtime-view-modal.component.html',\n  styleUrls: ['./runtime-view-modal.component.scss']\n})\nexport class RuntimeViewModalComponent {\n  configuration: IRuntimeViewConfiguration;\n  context: ActiveModalRef | DockedPanelContext;\n  title: string;\n  notification: string;\n  isCancellable: boolean;\n  isBlade = false;\n  closeLabel: string;\n  busySubscription: Subscription;\n\n  constructor(\n    private rxRuntimeViewRegistryService: RxRuntimeViewRegistryService,\n    private rxUtilityModalsService: RxUtilityModalsService,\n    private translateService: TranslateService,\n    private changeDetector: ChangeDetectorRef,\n    @Optional() private activeModalRef?: ActiveModalRef,\n    @Optional() private dockedPanelContext?: DockedPanelContext\n  ) {\n    this.context = dockedPanelContext || activeModalRef;\n    this.isBlade = Boolean(dockedPanelContext);\n\n    const data = this.context.getData();\n\n    this.configuration = data.configuration;\n    this.title = data.title;\n    this.notification = data.notification;\n    this.isCancellable = data.isCancellable;\n\n    this.closeLabel = translateService.instant('com.bmc.arsys.rx.client.common.close.label');\n  }\n\n  onCancelView(): void {\n    this.context.dismiss(null);\n  }\n\n  closeModal(): void {\n    this.context.dismiss(DismissReasons.CLOSE_BTN);\n  }\n\n  onClose(viewOutputParams: IRuntimeViewOutputParameter): void {\n    this.context.close(viewOutputParams);\n  }\n\n  onBeforeLoad(): void {\n    this.busySubscription = NEVER.subscribe();\n\n    // workaround: run changeDetector to avoid the ExpressionChangedAfterItHasBeenCheckedError\n    this.changeDetector.detectChanges();\n  }\n\n  onAfterLoad(): void {\n    this.busySubscription?.unsubscribe();\n  }\n}\n","<ng-container *ngIf=\"title || isCancellable\">\n  <div class=\"dp-header\" *ngIf=\"isBlade; else modalHeader\">\n    <span class=\"dp-title\">{{ title }}</span>\n    <button\n      class=\"close dp-close\"\n      rx-id=\"x-button\"\n      [attr.aria-label]=\"closeLabel\"\n      *ngIf=\"isCancellable\"\n      (click)=\"closeModal()\"\n    ></button>\n  </div>\n</ng-container>\n\n<ng-template #modalHeader>\n  <div class=\"modal-header\">\n    <h5 class=\"modal-title\">{{ title }}</h5>\n    <button\n      class=\"close dp-close\"\n      rx-id=\"x-button\"\n      [attr.aria-label]=\"closeLabel\"\n      *ngIf=\"isCancellable\"\n      (click)=\"closeModal()\"\n    ></button>\n  </div>\n</ng-template>\n\n<adapt-alert\n  *ngIf=\"notification\"\n  class=\"pl-4 pt-4\"\n  [config]=\"{\n    content: notification,\n    type: 'inline',\n    variant: 'info'\n  }\"\n></adapt-alert>\n\n<div\n  [ngClass]=\"{\n    'modal-body p-0': !isBlade,\n    'dp-content': isBlade\n  }\"\n>\n  <div class=\"position-relative\">\n    <rx-busy-indicator\n      [options]=\"{\n        busy: busySubscription,\n        loaderType: 'lineLoader',\n        delay: 250,\n        backdrop: false,\n        message: null\n      }\"\n    >\n    </rx-busy-indicator>\n  </div>\n\n  <rx-runtime-view\n    [configuration]=\"configuration\"\n    (cancelView)=\"onCancelView()\"\n    (closeView)=\"onClose($event)\"\n    (beforeLoad)=\"onBeforeLoad()\"\n    (afterLoad)=\"onAfterLoad()\"\n  ></rx-runtime-view>\n</div>\n","export const RX_RUNTIME_VIEW = {\n  actions: {\n    save: 'rx-runtime-view-save',\n    close: 'rx-runtime-view-close',\n    cancel: 'rx-runtime-view-cancel'\n  }\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { AdaptAlertModule } from '@bmc-ux/adapt-angular';\n\nimport { RxBusyIndicatorModule } from '@helix/platform/ui-kit';\nimport { RuntimeViewComponent } from './component/runtime-view.component';\nimport { RuntimeViewRootComponent } from './components/runtime-component/runtime-view-root.component';\nimport { RuntimeViewCanvasModule } from './components/runtime-view-canvas/runtime-view-canvas.module';\nimport { RuntimeViewModalComponent } from './components/runtime-view-modal/runtime-view-modal.component';\n\n@NgModule({\n  imports: [CommonModule, RuntimeViewCanvasModule, TranslateModule, AdaptAlertModule, RxBusyIndicatorModule],\n  exports: [RuntimeViewCanvasModule, RuntimeViewComponent, RuntimeViewRootComponent, RuntimeViewModalComponent],\n  declarations: [RuntimeViewComponent, RuntimeViewRootComponent, RuntimeViewModalComponent],\n  entryComponents: [RuntimeViewRootComponent, RuntimeViewModalComponent]\n})\nexport class RuntimeViewModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["_map"],"mappings":"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"}