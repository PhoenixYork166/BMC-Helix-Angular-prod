{"version":3,"file":"helix-platform-process-server-actions.js","sources":["../../../../libs/platform/process/server-actions/create-list/process/create-list-process-action.class.ts","../../../../libs/platform/process/server-actions/create-list/process/create-list-process-action.service.ts","../../../../libs/platform/process/server-actions/create-list/create-list-registration.module.ts","../../../../libs/platform/process/server-actions/record/record-server-action.constant.ts","../../../../libs/platform/process/server-actions/record/record-server-action-service.mixin.ts","../../../../libs/platform/process/server-actions/record/get-record/get-record-server-action-service.mixin.ts","../../../../libs/platform/process/server-actions/record/get-record/components/get-record-input-map-inspector-widget/get-record-input-map-inspector-widget.component.ts","../../../../libs/platform/process/server-actions/record/get-record/components/get-record-input-map-inspector-widget/get-record-input-map-inspector-widget.component.html","../../../../libs/platform/process/server-actions/record/get-record/components/get-record-input-map-inspector-widget/get-record-input-map-inspector-widget.module.ts","../../../../libs/platform/process/server-actions/record/record-server-action-expression-configurator.mixin.ts","../../../../libs/platform/process/server-actions/record/get-record/process/get-record-process-action-expression-configurator.class.ts","../../../../libs/platform/process/server-actions/record/get-record/process/get-record-process-action.service.ts","../../../../libs/platform/process/server-actions/record/record-server-action.mixin.ts","../../../../libs/platform/process/server-actions/record/get-record/get-record-server-action.mixin.ts","../../../../libs/platform/process/server-actions/record/get-record/process/get-record-process-action.class.ts","../../../../libs/platform/process/server-actions/record/get-record/get-record-server-action-registration.module.ts","../../../../libs/platform/process/server-actions/record/record-server-action.module.ts","../../../../libs/platform/process/server-actions/server-actions.module.ts","../../../../libs/platform/process/server-actions/helix-platform-process-server-actions.ts"],"sourcesContent":["import { RxProcessAction } from '@helix/platform/process/elements';\n\nexport class RxCreateListProcessAction extends RxProcessAction {\n  initialize(config: any): any {\n    // @ts-ignore\n    super.initialize(config);\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\n\nimport { IFormWidgetBuilderConfig } from '@helix/platform/shared/api';\nimport { RxProcessDefinitionService } from '@helix/platform/process/api';\nimport { RxExpressionInputMapInspectorWidgetComponent, RxProcessActionService } from '@helix/platform/process/elements';\n\ndeclare var joint: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxCreateListProcessActionService extends RxProcessActionService {\n  constructor(private rxProcessDefinitionService: RxProcessDefinitionService, protected injector: Injector) {\n    super(injector);\n  }\n\n  getInputMapInspectorWidgetConfig(): IFormWidgetBuilderConfig {\n    return {\n      component: RxExpressionInputMapInspectorWidgetComponent,\n      options: {\n        expressionConfigurator: this.getExpressionConfigurator(),\n        expressionInputMapInspectorOptions: [\n          {\n            label: this.translateService.instant(\n              'com.bmc.arsys.rx.client.designer.server-actions.create-list.source-list.label'\n            ),\n            name: 'Source List'\n          },\n          {\n            label: this.translateService.instant(\n              'com.bmc.arsys.rx.client.designer.server-actions.create-list.item-to-add.label'\n            ),\n            name: 'Item To Add'\n          }\n        ]\n      }\n    };\n  }\n\n  getElementType(actionTypeName: string): string {\n    return this.rxProcessDefinitionService.getServerActionModelType(actionTypeName);\n  }\n\n  getClass(): any {\n    return joint.shapes.rx.ProcessActions.createList;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { RX_DESIGNER, RX_DESIGNER_ELEMENT_SHAPE } from '@helix/platform/shared/api';\nimport { RX_PROCESS_DEFINITION, RxProcessElementRegistryService } from '@helix/platform/process/api';\nimport { RxExpressionInputMapInspectorWidgetModule, RxProcessActionView } from '@helix/platform/process/elements';\n\nimport { RxCreateListProcessAction } from './process/create-list-process-action.class';\nimport { RxCreateListProcessActionService } from './process/create-list-process-action.service';\n\n@NgModule({\n  imports: [RxExpressionInputMapInspectorWidgetModule]\n})\nexport class RxCreateListRegistrationModule {\n  constructor(\n    rxCreateListProcessActionService: RxCreateListProcessActionService,\n    rxProcessElementRegistryService: RxProcessElementRegistryService,\n    translateService: TranslateService\n  ) {\n    rxProcessElementRegistryService.register({\n      displayName: translateService.instant('com.bmc.arsys.rx.client.designer.server-actions.create-list.name.label'),\n      elementService: rxCreateListProcessActionService,\n      group: RX_PROCESS_DEFINITION.standardProcessElementGroups.platformActions.name,\n      paletteItem: {\n        border: RX_DESIGNER.paletteItemBorder.solid,\n        icon: {\n          path: RX_DESIGNER_ELEMENT_SHAPE.bpmnIcons.gear,\n          position: RX_DESIGNER.paletteIconPosition.top\n        },\n        label: RX_DESIGNER.paletteItemLabel.inner,\n        shape: RX_DESIGNER.paletteItemShape.rectangle\n      },\n      resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.processAction,\n      shapeClass: RxCreateListProcessAction,\n      shapeType: 'ProcessActions.createList',\n      type: 'rx.ProcessActions.createList',\n      viewShapeClass: RxProcessActionView,\n      viewShapeType: 'ProcessActions.createListView'\n    });\n  }\n}\n","export const RX_RECORD_SERVER_ACTION = {\n  dynamicRecordDefinitionNameRegex: /\\${.*}/\n};\n","import { reduce } from 'lodash';\n\nimport { Constructor } from '@helix/platform/utils';\nimport { IAssignmentExpression } from '@helix/platform/shared/api';\nimport { RxProcessActionService } from '@helix/platform/process/elements';\n\nimport { RX_RECORD_SERVER_ACTION } from './record-server-action.constant';\nimport { IRecordServerActionInputMapModel, IRecordServerActionService } from './record-server-action.types';\n\nexport function RxRecordServerActionServiceMixin<TBase extends Constructor<RxProcessActionService>>(Base: TBase) {\n  return class RxRecordServerActionService extends Base implements IRecordServerActionService {\n    constructor(...args: any[]) {\n      super(...args);\n    }\n\n    getRecordDefinitionInputMapParam(inputParamName: string, inputParamValue: string): IAssignmentExpression {\n      if (inputParamName === 'recordDefinitionName') {\n        if (inputParamValue.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n          return {\n            assignTarget: inputParamName,\n            expression: inputParamValue\n          };\n        } else {\n          return {\n            assignTarget: inputParamName,\n            expression: '\"' + inputParamValue + '\"'\n          };\n        }\n      } else if (inputParamName === 'sampleRecordDefinitionName') {\n        return {\n          assignTarget: inputParamName,\n          expression: '\"' + inputParamValue + '\"'\n        };\n      } else {\n        return super.getDefinitionInputMapParam(inputParamName, inputParamValue);\n      }\n    }\n\n    getRecordDefinitionNameFromInputMap(inputMap: IRecordServerActionInputMapModel): string {\n      let recordDefinitionNameFromInputMap: string = null;\n\n      if (inputMap.recordDefinitionName) {\n        if (inputMap.recordDefinitionName.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n          if (inputMap.sampleRecordDefinitionName) {\n            recordDefinitionNameFromInputMap = inputMap.sampleRecordDefinitionName;\n          }\n        } else {\n          recordDefinitionNameFromInputMap = inputMap.recordDefinitionName;\n        }\n      }\n\n      return recordDefinitionNameFromInputMap;\n    }\n\n    // TODO-VS: update definition type to use \"IServiceTaskDefinition | ICustomRuleAction\"\n    getRecordInputMapModel(definition: any): IRecordServerActionInputMapModel {\n      return reduce(\n        definition?.inputMap || [],\n        (inputMap, inputMapField) => {\n          const assignTarget = inputMapField.assignTarget;\n\n          if (assignTarget === 'recordDefinitionName') {\n            if (inputMapField.expression.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n              inputMap[assignTarget] = inputMapField.expression;\n            } else {\n              inputMap[assignTarget] = inputMapField.expression.replace(/^\"|\"$/g, '');\n            }\n          } else if (assignTarget === 'sampleRecordDefinitionName') {\n            inputMap[assignTarget] = inputMapField.expression.replace(/^\"|\"$/g, '');\n          } else {\n            inputMap[assignTarget] = inputMapField.expression;\n          }\n\n          return inputMap;\n        },\n        {\n          recordDefinitionName: null,\n          sampleRecordDefinitionName: null,\n          recordID: null\n        }\n      );\n    }\n  };\n}\n","import { Constructor } from '@helix/platform/utils';\nimport { IAssignmentExpression } from '@helix/platform/shared/api';\n\nimport { IRecordServerActionInputMapModel, IRecordServerActionService } from '../record-server-action.types';\nimport { IGetRecordServerActionService } from './get-record-server-action.types';\n\nexport function RxGetRecordServerActionServiceMixin<TBase extends Constructor<IRecordServerActionService>>(\n  Base: TBase\n) {\n  return class RxGetRecordServerActionService extends Base implements IGetRecordServerActionService {\n    constructor(...args: any[]) {\n      super(...args);\n    }\n\n    getDefinitionInputMapParam(inputParamName: string, inputParamValue: string): IAssignmentExpression {\n      return super.getRecordDefinitionInputMapParam(inputParamName, inputParamValue);\n    }\n\n    // TODO-VS: update definition type to use \"IServiceTaskDefinition | ICustomRuleAction\"\n    getInputMapFromDefinition(definition: any): IRecordServerActionInputMapModel {\n      return super.getRecordInputMapModel(definition);\n    }\n  };\n}\n","import { Component, Injector, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { distinctUntilChanged, map, pluck, take, takeUntil } from 'rxjs/operators';\nimport { isEqual } from 'lodash';\n\nimport { RxIdService } from '@helix/platform/utils';\nimport { IFormWidgetComponent } from '@helix/platform/shared/api';\nimport {\n  IDefinitionPickerComponentOptions,\n  IExpressionEditorPropertyChange,\n  IExpressionFormControlOptions,\n  InspectorWidgetBase,\n  RxDefinitionPickerType,\n  RxExpressionEditorService\n} from '@helix/platform/shared/components';\nimport { ISelectedElementInspectorDesignerItemModel } from '@helix/platform/process/api';\n\nimport { RX_RECORD_SERVER_ACTION } from '../../../record-server-action.constant';\nimport { IGetRecordServerActionModel } from '../../get-record-server-action.types';\nimport { IGetRecordInputMapInspectorWidgetOptions } from './get-record-input-map-inspector-widget.types';\n\n@Component({\n  selector: 'rx-get-record-input-map-inspector-widget',\n  templateUrl: './get-record-input-map-inspector-widget.component.html',\n  styleUrls: ['./get-record-input-map-inspector-widget.component.scss']\n})\nexport class RxGetRecordInputMapInspectorWidgetComponent\n  extends InspectorWidgetBase<\n    IGetRecordInputMapInspectorWidgetOptions,\n    Observable<ISelectedElementInspectorDesignerItemModel<IGetRecordServerActionModel>>\n  >\n  implements OnInit, OnDestroy, OnChanges, IFormWidgetComponent\n{\n  elementModel$: Observable<IGetRecordServerActionModel>;\n  graph$: Observable<any>;\n  isDynamicRecordDefinitionName$: Observable<boolean>;\n  recordDefinitionPickerOptions: IDefinitionPickerComponentOptions;\n  recordIDExpressionOptions: IExpressionFormControlOptions;\n  sampleRecordDefinitionPickerOptions: IDefinitionPickerComponentOptions;\n\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  constructor(\n    private rxExpressionEditorService: RxExpressionEditorService,\n    private rxIdService: RxIdService,\n    private translateService: TranslateService,\n    protected injector: Injector\n  ) {\n    super(injector);\n  }\n\n  ngOnInit() {\n    this.elementModel$ = this.designerItemModel.pipe(pluck('elementModel'), takeUntil(this.destroyed$));\n\n    this.isDynamicRecordDefinitionName$ = this.elementModel$.pipe(\n      map((elementModel) => elementModel?.inputMap.recordDefinitionName),\n      distinctUntilChanged(),\n      map((recordDefinitionName) => {\n        return RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex.test(recordDefinitionName);\n      })\n    );\n\n    this.graph$ = this.designerItemModel.pipe(pluck('graph'), takeUntil(this.destroyed$));\n\n    this.patchOptions(this.options);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!isEqual(changes.options.currentValue, changes.options.previousValue)) {\n      this.patchOptions(changes.options.currentValue);\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  onRecordDefinitionChange(recordDefinitionName: string, elementModel: IGetRecordServerActionModel) {\n    this.graph$.pipe(take(1)).subscribe((graph) => {\n      const selectedElementCell = graph.getCell(this.rxIdService.getBase(elementModel.guid));\n\n      selectedElementCell.prop(`elementModel/inputMap/recordDefinitionName`, recordDefinitionName);\n    });\n  }\n\n  onSampleRecordDefinitionChange(sampleRecordDefinitionName: string, elementModel: IGetRecordServerActionModel) {\n    this.graph$.pipe(take(1)).subscribe((graph) => {\n      const selectedElementCell = graph.getCell(this.rxIdService.getBase(elementModel.guid));\n\n      selectedElementCell.prop(`elementModel/inputMap/sampleRecordDefinitionName`, sampleRecordDefinitionName);\n    });\n  }\n\n  openExpressionEditor(elementModel: IGetRecordServerActionModel) {\n    this.graph$.pipe(take(1)).subscribe((graph) => {\n      this.rxExpressionEditorService\n        .openEditor({\n          expressionConfigurator: this.options.expressionConfigurator,\n\n          isReadOnly: false,\n\n          legend: [\n            {\n              label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.field-name.label'),\n              icon: 'd-icon-arrow_right_square_input'\n            }\n          ],\n\n          property: {\n            path: 'inputMap/recordID',\n            value: elementModel.inputMap.recordID,\n            label: 'Record ID'\n          }\n        })\n        .pipe(takeUntil(this.destroyed$))\n        .subscribe((expression: IExpressionEditorPropertyChange) => {\n          const selectedElementCell = graph.getCell(this.rxIdService.getBase(elementModel.guid));\n\n          selectedElementCell.prop(`elementModel/inputMap/recordID`, expression.value);\n        });\n    });\n  }\n\n  private patchOptions(options: IGetRecordInputMapInspectorWidgetOptions) {\n    this.recordDefinitionPickerOptions = {\n      label: 'Record definition name',\n      definitionType: RxDefinitionPickerType.Record,\n      required: true\n    };\n\n    this.sampleRecordDefinitionPickerOptions = {\n      label: 'Sample record definition name',\n      definitionType: RxDefinitionPickerType.Record,\n      required: true\n    };\n\n    this.recordIDExpressionOptions = {\n      label: 'Record ID',\n      dataDictionary$: options.expressionConfigurator.getDataDictionary('inputMap/recordID'),\n      operators: options.expressionConfigurator.getOperators('inputMap/recordID'),\n      isRequired: true\n    };\n  }\n}\n","<div *ngIf=\"elementModel$ | async as elementModel\">\n  <rx-definition-picker\n    name=\"recordDefinition\"\n    rx-id=\"record-definition\"\n    [options]=\"recordDefinitionPickerOptions\"\n    [ngModel]=\"elementModel.inputMap.recordDefinitionName\"\n    (ngModelChange)=\"onRecordDefinitionChange($event, elementModel)\"\n  >\n  </rx-definition-picker>\n\n  <rx-definition-picker\n    *ngIf=\"isDynamicRecordDefinitionName$ | async\"\n    name=\"sampleRecordDefinition\"\n    rx-id=\"sample-record-definition\"\n    [options]=\"sampleRecordDefinitionPickerOptions\"\n    [ngModel]=\"elementModel.inputMap.sampleRecordDefinitionName\"\n    (ngModelChange)=\"onSampleRecordDefinitionChange($event, elementModel)\"\n  >\n  </rx-definition-picker>\n\n  <rx-expression-form-control\n    rx-id=\"record-id\"\n    [options]=\"recordIDExpressionOptions\"\n    [propertyPath]=\"'inputMap/recordID'\"\n    [ngModel]=\"elementModel.inputMap.recordID\"\n    (events)=\"openExpressionEditor(elementModel)\"\n  >\n  </rx-expression-form-control>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { ExpressionFormControlModule, RxDefinitionPickerModule } from '@helix/platform/shared/components';\n\nimport { RxGetRecordInputMapInspectorWidgetComponent } from './get-record-input-map-inspector-widget.component';\n\n@NgModule({\n  declarations: [RxGetRecordInputMapInspectorWidgetComponent],\n  imports: [CommonModule, RxDefinitionPickerModule, FormsModule, ExpressionFormControlModule],\n  exports: [RxGetRecordInputMapInspectorWidgetComponent]\n})\nexport class RxGetRecordInputMapInspectorWidgetModule {}\n","import { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { find } from 'lodash';\n\nimport { Constructor } from '@helix/platform/utils';\nimport { IDataDictionary } from '@helix/platform/shared/api';\nimport { RxRecordDefinitionCacheService } from '@helix/platform/record/api';\n\nimport { RX_RECORD_SERVER_ACTION } from './record-server-action.constant';\n\nexport function RxRecordServerActionExpressionConfiguratorMixin<TBase extends Constructor>(Base: TBase) {\n  return class RxRecordServerActionExpressionConfigurator extends Base {\n    constructor(...args: any[]) {\n      super(...args);\n    }\n\n    validateInputMapExpression(propertyName: string, expression: string) {\n      let isValid = true;\n\n      if (\n        propertyName === 'recordDefinitionName' &&\n        expression &&\n        !expression.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)\n      ) {\n        isValid = false;\n      }\n\n      return of(isValid);\n    }\n  };\n}\n","import { Injector } from '@angular/core';\n\nimport { RxProcessActionExpressionConfigurator } from '@helix/platform/process/elements';\n\nimport { RxRecordServerActionExpressionConfiguratorMixin } from '../../record-server-action-expression-configurator.mixin';\n\nexport class RxGetRecordProcessActionExpressionConfiguratorClass extends RxRecordServerActionExpressionConfiguratorMixin(\n  RxProcessActionExpressionConfigurator\n) {\n  constructor(protected injector: Injector) {\n    super(injector);\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { chain, isEmpty } from 'lodash';\n\nimport { RxTreeService } from '@helix/platform/utils';\nimport { IFormWidgetBuilderConfig, RxDefinitionNameService } from '@helix/platform/shared/api';\nimport { IAssociationTree } from '@helix/platform/association/api';\nimport { IRecordDefinition, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { RxProcessDefinitionService } from '@helix/platform/process/api';\nimport { IOutputDataDictionaryBranch, RxProcessActionService } from '@helix/platform/process/elements';\n\nimport { RxRecordServerActionServiceMixin } from '../../record-server-action-service.mixin';\nimport { RxGetRecordServerActionServiceMixin } from '../get-record-server-action-service.mixin';\nimport { IGetRecordServerActionModel } from '../get-record-server-action.types';\nimport { RxGetRecordInputMapInspectorWidgetComponent } from '../components/get-record-input-map-inspector-widget';\nimport { RxGetRecordProcessActionExpressionConfiguratorClass } from './get-record-process-action-expression-configurator.class';\n\ndeclare var joint: any;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxGetRecordProcessActionService extends RxGetRecordServerActionServiceMixin(\n  RxRecordServerActionServiceMixin(RxProcessActionService)\n) {\n  constructor(\n    protected rxDefinitionNameService: RxDefinitionNameService,\n    protected rxProcessDefinitionService: RxProcessDefinitionService,\n    protected rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    protected rxTreeService: RxTreeService,\n    protected injector: Injector\n  ) {\n    super(injector);\n  }\n\n  buildOutputDataDictionaryBranch(model: IGetRecordServerActionModel): Observable<IOutputDataDictionaryBranch[]> {\n    const recordDefinitionName = super.getRecordDefinitionNameFromInputMap(model.inputMap);\n\n    return recordDefinitionName\n      ? this.rxRecordDefinitionCacheService.getRecordAssociationTree(recordDefinitionName).pipe(\n          switchMap((recordAssociationTrees) => {\n            const recordDefinitionNames = chain(recordAssociationTrees)\n              .map('value')\n              .compact()\n              .map('recordDefinitionName')\n              .push(recordDefinitionName)\n              .value();\n\n            return this.rxRecordDefinitionCacheService\n              .getRecordDefinitions(recordDefinitionNames)\n              .pipe(\n                map((recordDefinitions) =>\n                  this.getOutputChildrenBranch(recordDefinitionName, recordAssociationTrees, recordDefinitions)\n                )\n              );\n          })\n        )\n      : of(null);\n  }\n\n  getClass(): any {\n    return joint.shapes.rx.ProcessActions.getRecord;\n  }\n\n  getElementType(actionTypeName: string): string {\n    return this.rxProcessDefinitionService.getServerActionModelType(actionTypeName);\n  }\n\n  getExpressionConfiguratorClass(): any {\n    return RxGetRecordProcessActionExpressionConfiguratorClass;\n  }\n\n  getInputMapInspectorWidgetConfig(): IFormWidgetBuilderConfig {\n    return {\n      component: RxGetRecordInputMapInspectorWidgetComponent,\n      options: {\n        expressionConfigurator: this.getExpressionConfigurator()\n      }\n    };\n  }\n\n  private getAssociationsBranch(\n    recordAssociationTree: IAssociationTree[],\n    recordDefinitions: IRecordDefinition[],\n    prefix?: string\n  ): IOutputDataDictionaryBranch {\n    return isEmpty(recordAssociationTree)\n      ? null\n      : {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.designer.keywords.associations.label'),\n          children: recordAssociationTree.map((association) => {\n            let newPrefix = `_associations.${association.value.associationDefintionGuid}.${association.value.nodeSide}[0]`;\n\n            const recordDefinitionName = association.value.recordDefinitionName;\n\n            newPrefix = prefix ? `${prefix}.${newPrefix}` : newPrefix;\n\n            const associationNodeLabel =\n              association.value.nodeName !== recordDefinitionName\n                ? `${this.rxDefinitionNameService.getDisplayName(\n                    recordDefinitionName\n                  )} (${this.rxDefinitionNameService.getDisplayName(association.value.nodeName)})`\n                : this.rxDefinitionNameService.getDisplayName(recordDefinitionName);\n\n            return {\n              label: associationNodeLabel,\n              outputPropertyPath: newPrefix,\n              children: this.getAssociationChildren(\n                recordDefinitionName,\n                association.children,\n                recordDefinitions,\n                newPrefix\n              )\n            };\n          })\n        };\n  }\n\n  private getAssociationChildren(\n    recordDefinitionName: string,\n    recordAssociationTree: IAssociationTree[],\n    recordDefinitions: IRecordDefinition[],\n    prefix: string\n  ): IOutputDataDictionaryBranch[] {\n    const associationsBranch = this.getAssociationsBranch(recordAssociationTree, recordDefinitions, prefix);\n\n    const children: IOutputDataDictionaryBranch[] = chain(recordDefinitions)\n      .find({ name: recordDefinitionName })\n      .get('fieldDefinitions')\n      .map(function (fieldDefinition) {\n        return {\n          label: fieldDefinition.name,\n          outputPropertyPath: `${prefix}.${fieldDefinition.id}`\n        };\n      })\n      .value();\n\n    if (!isEmpty(associationsBranch)) {\n      children.push(associationsBranch);\n    }\n\n    return children;\n  }\n\n  private getOutputChildrenBranch(\n    recordDefinitionName: string,\n    recordAssociationTree: IAssociationTree[],\n    recordDefinitions: IRecordDefinition[]\n  ): IOutputDataDictionaryBranch[] {\n    const associationsBranch = this.getAssociationsBranch(recordAssociationTree, recordDefinitions);\n\n    const children: IOutputDataDictionaryBranch[] = chain(recordDefinitions)\n      .find({ name: recordDefinitionName })\n      .get('fieldDefinitions')\n      .map((fieldDefinition) => ({\n        label: fieldDefinition.name,\n        outputPropertyPath: [fieldDefinition.id, fieldDefinition.name]\n      }))\n      .value();\n\n    if (!isEmpty(associationsBranch)) {\n      children.push(associationsBranch);\n    }\n\n    return children;\n  }\n}\n","import { TranslateService } from '@ngx-translate/core';\n\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { Constructor } from '@helix/platform/utils';\nimport { RxRootInjector } from '@helix/platform/shared/api';\nimport { RX_SELECT_EXPRESSION_DROPDOWN } from '@helix/platform/shared/components';\n\nimport { RX_RECORD_SERVER_ACTION } from './record-server-action.constant';\nimport { IRecordServerActionInputMapModel } from './record-server-action.types';\n\nexport function RxRecordServerActionMixin<TBase extends Constructor>(Base: TBase) {\n  return class RxRecordServerAction extends Base {\n    lastRecordDefinitionName: string;\n    lastSampleRecordDefinitionName: string;\n    selectExpressionDropdownValue: string;\n\n    initialize(config: any): void {\n      // @ts-ignore\n      super.initialize(config);\n\n      this.lastRecordDefinitionName = this.getRecordDefinitionName();\n      this.lastSampleRecordDefinitionName = this.getSampleRecordDefinitionName();\n\n      if (this.lastRecordDefinitionName) {\n        if (this.lastRecordDefinitionName.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n          this.selectExpressionDropdownValue = RX_SELECT_EXPRESSION_DROPDOWN.dropDownOptionsValue.expression;\n        } else {\n          this.selectExpressionDropdownValue = RX_SELECT_EXPRESSION_DROPDOWN.dropDownOptionsValue.select;\n        }\n      }\n    }\n\n    afterRecordDefinitionNameChange(recordDefinitionName: string): void {\n      this.lastRecordDefinitionName = recordDefinitionName;\n\n      // @ts-ignore\n      this.getCommandManager().storeBatchCommand();\n    }\n\n    afterSampleRecordDefinitionNameChange(sampleRecordDefinitionName: string): void {\n      this.lastSampleRecordDefinitionName = sampleRecordDefinitionName;\n\n      // @ts-ignore\n      this.getCommandManager().storeBatchCommand();\n    }\n\n    getRecordDefinitionName(): string {\n      // @ts-ignore\n      const recordDefinitionName = this.getInputMap().recordDefinitionName;\n\n      return recordDefinitionName ? recordDefinitionName.replace(/^\"|\"$/g, '') : null;\n    }\n\n    getRecordDefinitionNameChangeConfirmationMessageKey(): string {\n      return 'com.bmc.arsys.rx.client.process-designer.inspector.clear-input-output-maps-confirmation.message';\n    }\n\n    getSampleRecordDefinitionName(): string {\n      // @ts-ignore\n      const sampleRecordDefinitionName = this.getInputMap().sampleRecordDefinitionName;\n\n      return sampleRecordDefinitionName ? sampleRecordDefinitionName.replace(/^\"|\"$/g, '') : null;\n    }\n\n    onInputMapChanged(\n      element: any,\n      inputMap: IRecordServerActionInputMapModel,\n      inputMapPropertyPath: string,\n      inputMapPropertyValue: string,\n      isCommandManagerOperation: boolean\n    ): void {\n      if (inputMapPropertyPath === 'recordDefinitionName') {\n        if (isCommandManagerOperation) {\n          this.lastRecordDefinitionName = inputMapPropertyValue;\n        } else if (inputMapPropertyValue !== this.lastRecordDefinitionName) {\n          // @ts-ignore\n          this.getCommandManager().initBatchCommand();\n\n          // @ts-ignore\n          if (this.lastRecordDefinitionName) {\n            RxRootInjector.injector\n              .get(RxModalService)\n              .confirm({\n                title: RxRootInjector.injector\n                  .get(TranslateService)\n                  .instant('com.bmc.arsys.rx.client.common.warning.label'),\n                modalStyle: RX_MODAL.modalStyles.warning,\n                message: RxRootInjector.injector\n                  .get(TranslateService)\n                  .instant(this.getRecordDefinitionNameChangeConfirmationMessageKey())\n              })\n              .then((context) => {\n                if (context) {\n                  this.afterRecordDefinitionNameChange(inputMapPropertyValue);\n                } else {\n                  // @ts-ignore\n                  this.getCommandManager().storeBatchCommand();\n                  // @ts-ignore\n                  this.getCommandManager().cancel();\n                }\n              })\n              .catch(() => {\n                // @ts-ignore\n                this.getCommandManager().storeBatchCommand();\n                // @ts-ignore\n                this.getCommandManager().cancel();\n              });\n          } else {\n            this.afterRecordDefinitionNameChange(inputMapPropertyValue);\n          }\n        }\n\n        if (inputMapPropertyValue) {\n          if (inputMapPropertyValue.match(RX_RECORD_SERVER_ACTION.dynamicRecordDefinitionNameRegex)) {\n            this.selectExpressionDropdownValue = RX_SELECT_EXPRESSION_DROPDOWN.dropDownOptionsValue.expression;\n          } else {\n            this.selectExpressionDropdownValue = RX_SELECT_EXPRESSION_DROPDOWN.dropDownOptionsValue.select;\n          }\n        }\n      }\n\n      if (inputMapPropertyPath === 'sampleRecordDefinitionName') {\n        if (isCommandManagerOperation) {\n          this.lastSampleRecordDefinitionName = inputMapPropertyValue;\n        } else if (inputMapPropertyValue !== this.lastSampleRecordDefinitionName) {\n          // @ts-ignore\n          this.getCommandManager().initBatchCommand();\n\n          if (this.lastSampleRecordDefinitionName) {\n            RxRootInjector.injector\n              .get(RxModalService)\n              .confirm({\n                title: RxRootInjector.injector\n                  .get(TranslateService)\n                  .instant('com.bmc.arsys.rx.client.common.warning.label'),\n                modalStyle: RX_MODAL.modalStyles.warning,\n                message: RxRootInjector.injector\n                  .get(TranslateService)\n                  .instant(this.getRecordDefinitionNameChangeConfirmationMessageKey())\n              })\n              .then(() => {\n                this.afterSampleRecordDefinitionNameChange(inputMapPropertyValue);\n              })\n              .catch(() => {\n                // @ts-ignore\n                this.getCommandManager().storeBatchCommand();\n                // @ts-ignore\n                this.getCommandManager().cancel();\n              });\n          } else {\n            this.afterSampleRecordDefinitionNameChange(inputMapPropertyValue);\n          }\n        }\n      }\n    }\n  };\n}\n","import { assign } from 'lodash';\n\nimport { Constructor } from '@helix/platform/utils';\n\nexport function RxGetRecordServerActionMixin<TBase extends Constructor>(Base: TBase) {\n  return class RxGetRecordServerAction extends Base {\n    initialize(config: any): void {\n      // @ts-ignore\n      super.initialize(config);\n    }\n\n    afterRecordDefinitionNameChange(inputMapPropertyValue: string): void {\n      // @ts-ignore\n      this.lastRecordDefinitionName = inputMapPropertyValue;\n\n      // @ts-ignore\n      this.clearOutputMap();\n\n      // @ts-ignore\n      this.setInputMap(\n        // @ts-ignore\n        assign(this.getInputMap(), {\n          // @ts-ignore\n          recordDefinitionName: this.lastRecordDefinitionName,\n          sampleRecordDefinitionName: null,\n          attachmentFieldID: ''\n        })\n      );\n\n      // @ts-ignore\n      this.getCommandManager().storeBatchCommand();\n    }\n\n    afterSampleRecordDefinitionNameChange(inputMapPropertyValue: string): void {\n      // @ts-ignore\n      this.lastSampleRecordDefinitionName = inputMapPropertyValue;\n\n      // @ts-ignore\n      this.clearOutputMap();\n\n      // @ts-ignore\n      this.setInputMap(\n        // @ts-ignore\n        assign(this.getInputMap(), {\n          // @ts-ignore\n          recordDefinitionName: this.lastRecordDefinitionName,\n          // @ts-ignore\n          sampleRecordDefinitionName: this.lastSampleRecordDefinitionName\n        })\n      );\n\n      // @ts-ignore\n      this.getCommandManager().storeBatchCommand();\n    }\n\n    getRecordDefinitionNameChangeConfirmationMessageKey(): string {\n      return 'com.bmc.arsys.rx.client.process-designer.inspector.clear-output-map-confirmation.message';\n    }\n  };\n}\n","import { RxProcessAction } from '@helix/platform/process/elements';\n\nimport { RxRecordServerActionMixin } from '../../record-server-action.mixin';\nimport { RxGetRecordServerActionMixin } from '../get-record-server-action.mixin';\n\nexport class RxGetRecordProcessAction extends RxGetRecordServerActionMixin(RxRecordServerActionMixin(RxProcessAction)) {\n  initialize(config: any): any {\n    // @ts-ignore\n    super.initialize(config);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\nimport { RX_DESIGNER, RX_DESIGNER_ELEMENT_SHAPE } from '@helix/platform/shared/api';\nimport { RX_PROCESS_DEFINITION, RxProcessElementRegistryService } from '@helix/platform/process/api';\nimport { RxProcessActionView } from '@helix/platform/process/elements';\n\nimport { RxGetRecordProcessActionService } from './process/get-record-process-action.service';\nimport { RxGetRecordProcessAction } from './process/get-record-process-action.class';\nimport { RxGetRecordInputMapInspectorWidgetModule } from './components/get-record-input-map-inspector-widget/get-record-input-map-inspector-widget.module';\n\n@NgModule({\n  imports: [RxGetRecordInputMapInspectorWidgetModule]\n})\nexport class RxGetRecordServerActionRegistrationModule {\n  constructor(\n    rxGetRecordProcessActionService: RxGetRecordProcessActionService,\n    rxProcessElementRegistryService: RxProcessElementRegistryService,\n    translateService: TranslateService\n  ) {\n    rxProcessElementRegistryService.register({\n      displayName: translateService.instant('com.bmc.arsys.rx.client.designer.server-actions.get-record.name.label'),\n      elementService: rxGetRecordProcessActionService,\n      group: RX_PROCESS_DEFINITION.standardProcessElementGroups.platformActions.name,\n      paletteItem: {\n        border: RX_DESIGNER.paletteItemBorder.solid,\n        icon: {\n          path: RX_DESIGNER_ELEMENT_SHAPE.bpmnIcons.gear,\n          position: RX_DESIGNER.paletteIconPosition.top\n        },\n        label: RX_DESIGNER.paletteItemLabel.inner,\n        shape: RX_DESIGNER.paletteItemShape.rectangle\n      },\n      resourceType: RX_PROCESS_DEFINITION.processElementResourceTypes.processAction,\n      shapeClass: RxGetRecordProcessAction,\n      shapeType: 'ProcessActions.getRecord',\n      type: 'rx.ProcessActions.getRecord',\n      viewShapeClass: RxProcessActionView,\n      viewShapeType: 'ProcessActions.getRecordView'\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\n\nimport { RxGetRecordServerActionRegistrationModule } from './get-record/get-record-server-action-registration.module';\n\n@NgModule({\n  imports: [RxGetRecordServerActionRegistrationModule]\n})\nexport class RxRecordServerActionModule {}\n","import { NgModule } from '@angular/core';\n\nimport { RxCreateListRegistrationModule } from './create-list/create-list-registration.module';\nimport { RxRecordServerActionModule } from './record/record-server-action.module';\n\n@NgModule({\n  imports: [RxCreateListRegistrationModule, RxRecordServerActionModule]\n})\nexport class RxServerActionsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}