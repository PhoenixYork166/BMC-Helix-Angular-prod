{"version":3,"file":"helix-platform-view-actions.js","sources":["../../../../libs/platform/view/actions/apply-grid-filter/apply-grid-filter-view-action.types.ts","../../../../libs/platform/view/actions/apply-grid-filter/apply-grid-filter-view-action.service.ts","../../../../libs/platform/view/actions/apply-grid-filter/apply-grid-filter-view-action-design-model.class.ts","../../../../libs/platform/view/actions/apply-grid-filter/apply-grid-filter-view-action-definition-adapter.service.ts","../../../../libs/platform/view/actions/apply-grid-filter/apply-grid-filter-view-action.module.ts","../../../../libs/platform/view/actions/open-view/open-view-action.constant.ts","../../../../libs/platform/view/actions/open-view/open-view-action.service.ts","../../../../libs/platform/view/actions/associate/associate-view-action.service.ts","../../../../libs/platform/view/actions/open-view/open-view-action-definition-adapter.service.ts","../../../../libs/platform/view/actions/open-view/open-view-action.types.ts","../../../../libs/platform/view/actions/open-view/open-view-model-helper.service.ts","../../../../libs/platform/view/actions/open-view/open-view-action-design-model.class.ts","../../../../libs/platform/view/actions/open-view/open-view-action.module.ts","../../../../libs/platform/view/actions/associate/associate-view-action-design-model.class.ts","../../../../libs/platform/view/actions/associate/associate-view-action.module.ts","../../../../libs/platform/view/actions/avc-associate/avc-associate-action.service.ts","../../../../libs/platform/view/actions/avc-associate/avc-associate-action.module.ts","../../../../libs/platform/view/actions/close-view/close-view-action.service.ts","../../../../libs/platform/view/actions/close-view/close-view-action.module.ts","../../../../libs/platform/view/actions/delete-records/delete-records-view-action.service.ts","../../../../libs/platform/view/actions/delete-records/delete-records-view-action.module.ts","../../../../libs/platform/view/actions/disassociate/disassociate-view-action.service.ts","../../../../libs/platform/view/actions/disassociate/disassociate-view-action-design-model.class.ts","../../../../libs/platform/view/actions/disassociate/disassociate-view-action.module.ts","../../../../libs/platform/view/actions/edit-records/result-modal/result-modal.component.ts","../../../../libs/platform/view/actions/edit-records/result-modal/result-modal.html","../../../../libs/platform/view/actions/edit-records/services/edit-records-data.service.ts","../../../../libs/platform/view/actions/edit-records/services/edit-records-view-builder.service.ts","../../../../libs/platform/view/actions/edit-records/services/edit-records-view-action.service.ts","../../../../libs/platform/view/actions/edit-records/edit-records-view-action.module.ts","../../../../libs/platform/view/actions/launch-process/launch-process-view-action-design-manager.service.ts","../../../../libs/platform/view/actions/launch-process/launch-process-view-action-design-model.class.ts","../../../../libs/platform/view/actions/launch-process/launch-process-view-action.service.ts","../../../../libs/platform/view/actions/launch-process/launch-process-view-action.module.ts","../../../../libs/platform/view/actions/launch-url/launch-url-view-action.service.ts","../../../../libs/platform/view/actions/launch-url/launch-url-view-action-design-model.class.ts","../../../../libs/platform/view/actions/launch-url/launch-url-view-action-definition-adapter.service.ts","../../../../libs/platform/view/actions/launch-url/launch-url-view-action.module.ts","../../../../libs/platform/view/actions/refresh/refresh-view-action.service.ts","../../../../libs/platform/view/actions/refresh/refresh-view-action.module.ts","../../../../libs/platform/view/actions/save/save-view-action.service.ts","../../../../libs/platform/view/actions/save/save-view-action.module.ts","../../../../libs/platform/view/actions/set-property/set-property-view-action.service.ts","../../../../libs/platform/view/actions/set-property/set-property-view-action-expression-configurator.class.ts","../../../../libs/platform/view/actions/set-property/set-property-view-action-design-model.class.ts","../../../../libs/platform/view/actions/set-property/set-property-view-action-design-manager.service.ts","../../../../libs/platform/view/actions/set-property/set-property-view-action.module.ts","../../../../libs/platform/view/actions/launch-process-designer/process-designer-frame.component.ts","../../../../libs/platform/view/actions/launch-process-designer/process-designer-frame.component.html","../../../../libs/platform/view/actions/launch-process-designer/launch-process-designer-action.service.ts","../../../../libs/platform/view/actions/launch-process-designer/process-designer-element-picker/process-designer-element-picker.component.ts","../../../../libs/platform/view/actions/launch-process-designer/process-designer-element-picker/process-designer-element-picker.component.html","../../../../libs/platform/view/actions/launch-process-designer/process-designer-element-picker/process-designer-element-picker.module.ts","../../../../libs/platform/view/actions/launch-process-designer/launch-process-designer-action-design-model.class.ts","../../../../libs/platform/view/actions/launch-process-designer/launch-process-designer-expression-evaluator.service.ts","../../../../libs/platform/view/actions/launch-process-designer/launch-process-designer-action.module.ts","../../../../libs/platform/view/actions/unknown/unknown-view-action.service.ts","../../../../libs/platform/view/actions/unknown/unknown-view-action-design-manager.service.ts","../../../../libs/platform/view/actions/unknown/unknown-view-action-design-model.class.ts","../../../../libs/platform/view/actions/unknown/unknown-view-action.module.ts","../../../../libs/platform/view/actions/view-actions.module.ts","../../../../libs/platform/view/actions/apply-grid-filter/apply-grid-filter-view-action-design-manager.service.ts","../../../../libs/platform/view/actions/apply-grid-filter/apply-grid-filter-view-action-design.module.ts","../../../../libs/platform/view/actions/view-actions-design.module.ts","../../../../libs/platform/view/actions/helix-platform-view-actions.ts"],"sourcesContent":["import {\n  ApplyGridFilterMode,\n  IRecordGridFilterData,\n  IRxRecordGridApi,\n  IViewActionDesignProperties\n} from '@helix/platform/view/api';\nimport { IRecordGridDesignInspectorColumnConfig, IRecordGridFilterModel } from '@helix/platform/view/components';\nimport { IViewComponentDesignData } from '@helix/platform/view/designer';\n\nexport const RxApplyGridFilterActionName = 'rxApplyGridFilterAction';\n\nexport interface IApplyGridFilterViewActionParams extends IViewActionDesignProperties {\n  targetApi: IRxRecordGridApi;\n  mode: ApplyGridFilterMode;\n  filters: IRecordGridFilterData;\n}\n\nexport interface IApplyGridFilterViewActionDesignProperties extends IViewActionDesignProperties {\n  targetApi: string;\n  mode: ApplyGridFilterMode;\n  filterValue?: IRecordGridFilterModel;\n  filters: string;\n}\n\nexport interface IApplyGridFilterViewActionGridData {\n  guid: string;\n  columns: Pick<IRecordGridDesignInspectorColumnConfig, 'namedFilterOptions' | 'fieldId'>[];\n}\n\nexport interface IApplyGridFilterViewActionData\n  extends IViewComponentDesignData<IApplyGridFilterViewActionDesignProperties> {}\n","import { Injectable } from '@angular/core';\nimport { RxError } from '@helix/platform/utils';\nimport { IViewActionService } from '@helix/platform/view/api';\nimport { EMPTY, Observable, throwError } from 'rxjs';\nimport { IApplyGridFilterViewActionParams, RxApplyGridFilterActionName } from './apply-grid-filter-view-action.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxApplyGridFilterViewActionService implements IViewActionService<IApplyGridFilterViewActionParams, never> {\n  execute(params: IApplyGridFilterViewActionParams): Observable<never> {\n    if (params.targetApi) {\n      if (params.targetApi.applyFilters) {\n        params.targetApi.applyFilters(params.filters, params.mode);\n\n        return EMPTY;\n      } else {\n        throwError(new RxError(`${RxApplyGridFilterActionName}: target component does not support applyFilters API.`));\n      }\n\n      return EMPTY;\n    } else {\n      return throwError(new RxError('rxApplyGridFilterAction: component is not specified.'));\n    }\n  }\n}\n","import { RxViewDesignerActionModel, ViewDesignerFacade } from '@helix/platform/view/designer';\nimport { Injector } from '@angular/core';\nimport {\n  ApplyGridFilterMode,\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport { IApplyGridFilterViewActionDesignProperties } from './apply-grid-filter-view-action.types';\nimport {\n  ExpressionFormControlComponent,\n  IExpressionFormControlOptions,\n  IRadioFormControlOptions,\n  IRadioItem,\n  MessageType,\n  RadioFormControlComponent,\n  ValidationFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  distinctUntilChanged,\n  filter,\n  first,\n  map,\n  pluck,\n  skip,\n  switchMap,\n  takeUntil,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { combineLatest, merge, Observable, of } from 'rxjs';\nimport {\n  IRecordGridDesignInspectorColumnConfig,\n  IRecordGridDesignProperties,\n  IRecordGridFilterSelectControlOptions,\n  IRecordGridNamedFilterOptionsMap,\n  RecordGridFilterSelectControlComponent,\n  RX_RECORD_GRID,\n  RxRecordGridDesignUtilsService,\n  RxRecordGridFilterSelectHelperService\n} from '@helix/platform/view/components';\nimport { IRecordDefinition, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { includes, omit } from 'lodash';\nimport { Tooltip } from '@helix/platform/shared/api';\n\nexport class RxApplyGridFilterViewActionDesignModelClass extends RxViewDesignerActionModel {\n  private viewDesignerFacade = this.injector.get(ViewDesignerFacade);\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n  private rxRecordGridDesignUtilsService = this.injector.get(RxRecordGridDesignUtilsService);\n  private rxRecordGridFilterSelectHelperService = this.injector.get(RxRecordGridFilterSelectHelperService);\n\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<IApplyGridFilterViewActionDesignProperties>\n  ): ViewActionDesignEditableProperties<IApplyGridFilterViewActionDesignProperties> {\n    return {\n      targetApi: null,\n      mode: ApplyGridFilterMode.Append,\n      filterValue: {\n        filtersJson: null,\n        basicFilters: null\n      },\n      ...initialProperties\n    };\n  }\n\n  constructor(\n    protected injector: Injector,\n    readonly sandbox: IViewActionDesignSandbox<IApplyGridFilterViewActionDesignProperties>\n  ) {\n    super(injector, sandbox);\n\n    // set initial filters select value from child filter components\n    this.sandbox.children$\n      .pipe(\n        first(),\n        withLatestFrom(this.sandbox.actionProperties$.pipe(pluck('filters'))),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(([filterComponents, filtersJson]) => {\n        const basicFilters =\n          this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(filterComponents);\n\n        this.sandbox.updateActionProperties({\n          filterValue: {\n            basicFilters,\n            filtersJson\n          }\n        });\n      });\n\n    const filterValue$ = this.sandbox.actionProperties$.pipe(pluck('filterValue'), distinctUntilChanged());\n\n    // set filters data on filter select change\n    filterValue$.pipe(skip(1), takeUntil(this.sandbox.destroyed$)).subscribe(({ filtersJson, basicFilters }) => {\n      const filterPayloads = this.rxRecordGridDesignUtilsService.getGridFilterComponentPayloads(basicFilters);\n\n      this.sandbox.setChildren(filterPayloads);\n\n      this.sandbox.updateActionProperties({\n        filters: filtersJson\n      });\n    });\n\n    const mode$ = this.sandbox.actionProperties$.pipe(pluck('mode'), distinctUntilChanged());\n    const targetApi$ = this.sandbox.actionProperties$.pipe(pluck('targetApi'), distinctUntilChanged());\n\n    const gridGuid$: Observable<string> = targetApi$.pipe(\n      map(RxApplyGridFilterViewActionDesignModelClass.extractGuidFromExpression)\n    );\n\n    // reset filters after grid change or when clear mode is selected\n    merge(gridGuid$.pipe(skip(1)), mode$.pipe(filter((mode) => mode === ApplyGridFilterMode.Clear)))\n      .pipe(takeUntil(this.sandbox.destroyed$))\n      .subscribe(() => {\n        this.sandbox.updateActionProperties({\n          filterValue: {\n            basicFilters: null,\n            filtersJson: null\n          }\n        });\n      });\n\n    const gridProperties$: Observable<IRecordGridDesignProperties> = gridGuid$.pipe(\n      switchMap((guid) => (guid ? this.viewDesignerFacade.getComponent(guid) : of(null))),\n      map((item) => (item?.type === RX_RECORD_GRID.type ? item.data : null))\n    );\n\n    const recordDefinition$: Observable<IRecordDefinition> = gridProperties$.pipe(\n      map((item) => item?.recordDefinitionName ?? null),\n      switchMap((recordDefinitionName) =>\n        recordDefinitionName ? this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName) : of(null)\n      )\n    );\n\n    const gridColumns$ = gridProperties$.pipe(map((gridData) => gridData?.columns ?? []));\n\n    const recordDefinitionFiltered$: Observable<IRecordDefinition> = recordDefinition$.pipe(\n      withLatestFrom(gridColumns$),\n      map(([recordDefinition, columns]) => {\n        const fieldIds = columns.filter((col) => col.filterable).map((col) => col.fieldId);\n\n        return recordDefinition\n          ? {\n              ...recordDefinition,\n              fieldDefinitions: recordDefinition.fieldDefinitions.filter((definition) =>\n                fieldIds.includes(String(definition.id))\n              )\n            }\n          : null;\n      })\n    );\n\n    const namedFilterOptionsMap$ = gridColumns$.pipe(\n      map((columns) => this.rxRecordGridFilterSelectHelperService.getNamedFilterOptionsFromColumns(columns))\n    );\n\n    combineLatest([recordDefinitionFiltered$, mode$])\n      .pipe(withLatestFrom(namedFilterOptionsMap$, gridColumns$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([[recordDefinition, mode], namedFilterOptions, columns]) => {\n        this.sandbox.setActionPropertyEditorConfig(\n          this.getActionEditorConfig(recordDefinition, namedFilterOptions, mode, columns)\n        );\n      });\n  }\n\n  getPropertiesByName(): IApplyGridFilterViewActionDesignProperties {\n    return omit(super.getPropertiesByName() as IApplyGridFilterViewActionDesignProperties, 'filterValue');\n  }\n\n  private getActionEditorConfig(\n    recordDefinition?: IRecordDefinition,\n    namedFilterOptions?: IRecordGridNamedFilterOptionsMap,\n    mode?: ApplyGridFilterMode,\n    columns?: IRecordGridDesignInspectorColumnConfig[]\n  ): IViewActionDesignPropertyEditorConfig {\n    const tooltip = new Tooltip(\n      '<b>Begin</b><p>Begin a batch of filter updates.</p><br><b>Append</b><p>Applied filters are added with the AND operator; existing filters for the specified fields are removed.</p><br><b>Remove</b><p>Existing filters are removed if they match the applied filters.</p><br><b>Overwrite</b><p>All existing filters are replaced with the applied filters.</p><br><b>Merge</b><p>Existing filters with a range of values are replaced with the matching applied filters; existing filters for the other fields are combined with the matching applied filters using the OR operator; applied filters for new fields are added with the AND operator.</p><br><b>Clear</b><p>All existing filters are removed.</p><br><b>End</b><p>Apply all pending filter updates executed in a batch.</p>'\n    );\n\n    tooltip.maxWidth = 310;\n\n    const controls: IViewActionDesignPropertyEditorConfig = [\n      {\n        name: 'targetApi',\n        component: ExpressionFormControlComponent,\n        options: {\n          label: 'Record grid',\n          dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n          operators: this.expressionConfigurator.getOperators(),\n          isRequired: true\n        } as IExpressionFormControlOptions\n      },\n      {\n        name: 'mode',\n        component: RadioFormControlComponent,\n        options: {\n          label: 'Mode',\n          tooltip,\n          items: [\n            { label: 'Begin', value: ApplyGridFilterMode.Begin },\n            { label: 'Append', value: ApplyGridFilterMode.Append },\n            { label: 'Remove', value: ApplyGridFilterMode.Remove },\n            { label: 'Overwrite', value: ApplyGridFilterMode.Overwrite },\n            { label: 'Merge', value: ApplyGridFilterMode.Merge },\n            { label: 'Clear', value: ApplyGridFilterMode.Clear },\n            { label: 'End', value: ApplyGridFilterMode.End }\n          ] as IRadioItem[]\n        } as IRadioFormControlOptions\n      }\n    ];\n\n    const filterSelectControl = {\n      name: 'filterValue',\n      component: RecordGridFilterSelectControlComponent,\n      options: {\n        primaryRecordDefinition: recordDefinition,\n        selectedFieldIds: columns.map((column) => column.fieldId),\n        namedFilterOptions,\n        anchorDisabled: !recordDefinition\n      } as IRecordGridFilterSelectControlOptions\n    };\n\n    const emptyFilterMessageControl = {\n      name: 'emptyFilterMessage',\n      component: ValidationFormControlComponent,\n      options: {\n        text: 'Record grid expression required to define a filter.',\n        messageType: MessageType.Error,\n        customStyle: { 'margin-top': '-1rem' }\n      }\n    };\n\n    if (!includes([ApplyGridFilterMode.Begin, ApplyGridFilterMode.End, ApplyGridFilterMode.Clear], mode)) {\n      controls.push(filterSelectControl);\n\n      if (!recordDefinition) {\n        controls.push(emptyFilterMessageControl);\n      }\n    }\n\n    return controls;\n  }\n\n  static extractGuidFromExpression(val: string): string {\n    const matches = val?.match(/^\\${view\\.components\\.([0-9a-z-]+)\\.api}$/);\n\n    return (matches && matches[1]) ?? null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport {\n  IContainerViewComponentDefinition,\n  IViewComponentDefinition,\n  IViewDefinition,\n  RecordGridNamedFilterOptionKey\n} from '@helix/platform/view/api';\nimport { IApplyGridFilterViewActionDesignProperties } from './apply-grid-filter-view-action.types';\nimport {\n  IRecordGridFilterDescriptorModel,\n  IRxRecordGridFilter,\n  RxRecordGridFilterHelperService\n} from '@helix/platform/view/components';\nimport { RxJsonParserService } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxApplyGridFilterViewActionDefinitionAdapterService\n  implements IDefinitionAdapter<IViewComponentDefinition, IViewDefinition>\n{\n  constructor(\n    private rxJsonParserService: RxJsonParserService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService\n  ) {}\n\n  adaptDefinition({\n    componentDefinitions,\n    propertiesByName\n  }: IContainerViewComponentDefinition<IApplyGridFilterViewActionDesignProperties>) {\n    const recordGridFilters: IRxRecordGridFilter[] = componentDefinitions.map(\n      (definition: IViewComponentDefinition<IRecordGridFilterDescriptorModel>) => {\n        let value = definition.propertiesByName.value;\n        const parsedValue = this.rxJsonParserService.tryParseJson(value);\n\n        if (parsedValue && parsedValue[RecordGridNamedFilterOptionKey]) {\n          value = parsedValue;\n        }\n\n        return {\n          guid: definition.guid,\n          fieldId: definition.propertiesByName.fieldId,\n          value\n        };\n      }\n    );\n\n    // @ts-ignore - converting type\n    propertiesByName.filters = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n      propertiesByName.filters,\n      recordGridFilters\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxViewActionDefinitionAdapterRegistryService, RxViewActionRegistryService } from '@helix/platform/view/api';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxApplyGridFilterViewActionService } from './apply-grid-filter-view-action.service';\nimport { RxApplyGridFilterViewActionDesignModelClass } from './apply-grid-filter-view-action-design-model.class';\nimport { RxApplyGridFilterViewActionDefinitionAdapterService } from './apply-grid-filter-view-action-definition-adapter.service';\nimport { RxApplyGridFilterActionName } from './apply-grid-filter-view-action.types';\n\n@NgModule()\nexport class ApplyGridFilterViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxApplyGridFilterViewActionService: RxApplyGridFilterViewActionService,\n    private rxApplyGridFilterViewActionDefinitionAdapterService: RxApplyGridFilterViewActionDefinitionAdapterService,\n    private rxViewActionDefinitionAdapterRegistryService: RxViewActionDefinitionAdapterRegistryService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: RxApplyGridFilterActionName,\n      label: 'Apply grid filter',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: rxApplyGridFilterViewActionService,\n      designModel: RxApplyGridFilterViewActionDesignModelClass,\n      parameters: [\n        {\n          name: 'targetApi',\n          label: 'Record grid',\n          isRequired: true,\n          enableExpressionEvaluation: true\n        },\n        {\n          name: 'mode',\n          label: 'Mode'\n        },\n        {\n          name: 'filters'\n        }\n      ]\n    });\n\n    rxViewActionDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxApplyGridFilterActionName,\n      this.rxApplyGridFilterViewActionDefinitionAdapterService\n    );\n  }\n}\n","import { OpenViewActionLaunchBehavior, OpenViewActionType, OpenViewActionModalSize } from '@helix/platform/view/api';\n\nexport const RX_OPEN_VIEW = {\n  actionName: 'rxOpenViewAction',\n  modalSize: OpenViewActionModalSize,\n  type: OpenViewActionType,\n  launchBehavior: OpenViewActionLaunchBehavior\n};\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  AdaptDockedPanelService,\n  AdaptModalService,\n  DismissReasons,\n  DockedPanelDirection\n} from '@bmc-ux/adapt-angular';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport { IViewActionService, RxViewActionUtilsService } from '@helix/platform/view/api';\nimport { IRuntimeViewApi, RuntimeViewModalComponent, RxRuntimeViewUtilsService } from '@helix/platform/view/runtime';\nimport { defaults, isObject, transform } from 'lodash';\nimport { EMPTY, from, Observable, throwError } from 'rxjs';\nimport { catchError, switchMap, switchMapTo, take } from 'rxjs/operators';\nimport { RX_OPEN_VIEW } from './open-view-action.constant';\nimport { IOpenViewActionParams } from './open-view-action.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxOpenViewActionService implements IViewActionService<IOpenViewActionParams, IPlainObject> {\n  constructor(\n    private adaptDockedPanelService: AdaptDockedPanelService,\n    private adaptModalService: AdaptModalService,\n    private router: Router,\n    private rxRuntimeViewUtilsService: RxRuntimeViewUtilsService,\n    private rxViewActionUtilsService: RxViewActionUtilsService\n  ) {}\n\n  execute(params: IOpenViewActionParams): Observable<IPlainObject> {\n    const inputParams = transform(\n      params.viewParams,\n      (result, value, key) => {\n        result[key] = isObject(value) ? JSON.stringify(value) : String(value ?? '');\n      },\n      {}\n    );\n\n    return this.rxRuntimeViewUtilsService.isViewCancellable(params.viewDefinitionName).pipe(\n      switchMap((isViewCancellable: boolean) => {\n        let runtimeViewApi: IRuntimeViewApi;\n\n        const modalData = {\n          configuration: {\n            viewDefinitionName: params.viewDefinitionName,\n            inputParams: inputParams,\n\n            onRegisterApi(api: IRuntimeViewApi) {\n              runtimeViewApi = api;\n            }\n          },\n\n          title: params.presentation.title,\n          notification: params.presentation.notification,\n          isCancellable: isViewCancellable\n        };\n\n        const modalConfig = {\n          beforeDismiss: (reason) => {\n            // determine if the view is being closed programmatically,\n            // i.e. via executing the Close View action.\n            const isCloseViewAction = !Object.values(DismissReasons).includes(reason);\n\n            // do not close modal/blade when user clicked on backdrop except when view is cancellable\n            if (!isCloseViewAction && (reason !== DismissReasons.BACKDROP_CLICK || isViewCancellable)) {\n              runtimeViewApi\n                .cancel()\n                .pipe(\n                  take(1),\n                  catchError((error) => (error ? throwError(error) : EMPTY))\n                )\n                .subscribe();\n            }\n\n            // only allow to close view if dismiss is triggered by close view action with act as cancel\n            return isCloseViewAction;\n          },\n          blockKeyboard: !isViewCancellable,\n          content: RuntimeViewModalComponent,\n          size: params.presentation.modalSize as any,\n          data: modalData\n        };\n\n        switch (params.presentation.type) {\n          case RX_OPEN_VIEW.type.FullWidth: {\n            return this.openFullWidth(params.presentation.launchBehavior, params.viewDefinitionName, inputParams);\n          }\n\n          case RX_OPEN_VIEW.type.CenteredModal: {\n            return this.adaptModalService.open(modalConfig);\n          }\n\n          case RX_OPEN_VIEW.type.DockedLeftModal: {\n            return this.adaptDockedPanelService.open(defaults({ direction: DockedPanelDirection.LEFT }, modalConfig));\n          }\n\n          case RX_OPEN_VIEW.type.DockedRightModal: {\n            return this.adaptDockedPanelService.open(defaults({ direction: DockedPanelDirection.RIGHT }, modalConfig));\n          }\n\n          default: {\n            return this.openFullWidth(params.presentation.launchBehavior, params.viewDefinitionName, inputParams);\n          }\n        }\n      })\n    );\n  }\n\n  private openFullWidth(launchBehavior, viewDefinitionName, inputParams): Observable<never> {\n    const url = this.rxViewActionUtilsService.generateViewUrl(viewDefinitionName, inputParams);\n\n    if (launchBehavior === RX_OPEN_VIEW.launchBehavior.NewWindow) {\n      window.open(`${window.location.pathname}#${url}`);\n\n      return throwError(null);\n    } else {\n      return from(this.router.navigateByUrl(url)).pipe(switchMapTo(throwError(null)));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IViewActionService, RxViewActionUtilsService } from '@helix/platform/view/api';\nimport {\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RX_ASSOCIATION_DEFINITION,\n  RxAssociationDefinitionService,\n  RxAssociationInstanceService\n} from '@helix/platform/association/api';\nimport { RxOpenViewActionService } from '../open-view/open-view-action.service';\nimport { RxLogService } from '@helix/platform/shared/api';\nimport { IAssociateViewActionParams } from './associate-view-action.interfaces';\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\nimport { map, mapTo, switchMap } from 'rxjs/operators';\nimport { compact, flatten, flow, map as _map, uniq } from 'lodash';\nimport { RX_OPEN_VIEW } from '../open-view/open-view-action.constant';\nimport { RxError } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxAssociateViewActionService implements IViewActionService<IAssociateViewActionParams> {\n  constructor(\n    private rxAssociationInstanceService: RxAssociationInstanceService,\n    private rxOpenViewActionService: RxOpenViewActionService,\n    private rxAssociationDefinitionService: RxAssociationDefinitionService,\n    private rxLogService: RxLogService,\n    private rxViewActionUtilsService: RxViewActionUtilsService\n  ) {}\n\n  execute(params: IAssociateViewActionParams) {\n    if (!params.associatedRecordId) {\n      return throwError(new RxError('rxAssociateAction: Associated Record ID is not defined.'));\n    }\n\n    return forkJoin([\n      this.getInstanceIds(params),\n      this.rxAssociationDefinitionService.get(params.associationDefinitionName)\n    ]).pipe(\n      switchMap(([instanceIds, associationDefinition]) => {\n        let nodeAIds = [];\n        let nodeBIds = [];\n\n        if (instanceIds.length) {\n          if (params.associationDefinitionRole === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value) {\n            nodeAIds = instanceIds;\n            nodeBIds = [params.associatedRecordId];\n          } else if (params.associationDefinitionRole === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value) {\n            nodeAIds = [params.associatedRecordId];\n            nodeBIds = instanceIds;\n          }\n\n          if (associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToOne.value) {\n            nodeAIds = nodeAIds[0];\n            nodeBIds = nodeBIds[0];\n          } else if (associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToMany.value) {\n            nodeAIds = nodeAIds[0];\n          }\n\n          return this.rxAssociationInstanceService\n            .associateRecords(\n              params.associationDefinitionName,\n              nodeAIds,\n              nodeBIds,\n              params.useDefaultRoles,\n              params.nodeARole,\n              params.nodeBRole\n            )\n            .pipe(mapTo(instanceIds));\n        }\n\n        return of(instanceIds);\n      })\n    );\n  }\n\n  private getInstanceIds(params: IAssociateViewActionParams): Observable<string[]> {\n    return this.rxOpenViewActionService\n      .execute({\n        presentation: {\n          modalSize: RX_OPEN_VIEW.modalSize.Large,\n          type: RX_OPEN_VIEW.type.DockedRightModal\n        },\n        viewDefinitionName: params.viewDefinitionName,\n        viewParams: null\n      })\n      .pipe(\n        map((output) => {\n          const instanceIds = flow(\n            (outs) => _map(outs, (out) => this.rxViewActionUtilsService.extractRecordIds(out)),\n            flatten,\n            compact,\n            uniq\n          )(output);\n\n          this.rxLogService.debug(`RxAssociateAction: associating ${instanceIds.length} record(s)`);\n\n          return instanceIds;\n        })\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport { IViewComponentDefinition, IViewDefinition } from '@helix/platform/view/api';\nimport { RX_OPEN_VIEW } from './open-view-action.constant';\nimport { get } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxOpenViewDefinitionAdapterService\n  implements IDefinitionAdapter<IViewComponentDefinition, IViewDefinition> {\n  private modalSizeMap = {\n    small: RX_OPEN_VIEW.modalSize.Small,\n    medium: RX_OPEN_VIEW.modalSize.Medium,\n    large: RX_OPEN_VIEW.modalSize.Large\n  };\n\n  adaptDefinition(viewComponentDefinition) {\n    const propertiesByName = get(viewComponentDefinition, 'propertiesByName', {});\n\n    if (propertiesByName.name === RX_OPEN_VIEW.actionName) {\n      const modalSize = propertiesByName.presentation.modalSize;\n\n      if (this.modalSizeMap[modalSize]) {\n        propertiesByName.presentation.modalSize = this.modalSizeMap[modalSize];\n      }\n    }\n  }\n}\n","import {\n  IViewActionDesignProperties,\n  IViewDefinition,\n  IViewInputParams,\n  OpenViewActionLaunchBehavior,\n  OpenViewActionModalSize,\n  OpenViewActionType\n} from '@helix/platform/view/api';\n\nexport interface IOpenViewActionParams {\n  viewDefinitionName: string | IViewDefinition;\n  viewParams: IViewInputParams;\n  presentation: IOpenViewActionPresentationParams & {\n    notification?: string;\n  };\n}\n\nexport interface IOpenViewActionPresentationParams {\n  type: OpenViewActionType;\n  launchBehavior?: OpenViewActionLaunchBehavior;\n  modalSize?: OpenViewActionModalSize;\n  title?: string;\n}\n\nexport interface IOpenViewActionDesignProperties extends IViewActionDesignProperties {\n  viewDefinitionName: string;\n  'presentation.type'?: OpenViewActionType;\n  'presentation.launchBehavior'?: OpenViewActionLaunchBehavior;\n  'presentation.modalSize'?: OpenViewActionModalSize;\n  'presentation.title'?: string;\n}\n\nexport const RX_OPEN_VIEW_MODAL_SIZE_OPTIONS = [\n  {\n    id: OpenViewActionModalSize.Xsmall,\n    name: 'Extra Small (450 px)'\n  },\n  {\n    id: OpenViewActionModalSize.Small,\n    name: 'Small (650 px)'\n  },\n  {\n    id: OpenViewActionModalSize.Medium,\n    name: 'Medium (800 px)'\n  },\n  {\n    id: OpenViewActionModalSize.Large,\n    name: 'Large (1024 px)'\n  },\n  {\n    id: OpenViewActionModalSize.Xlarge,\n    name: 'Extra Large (1200 px)'\n  },\n  {\n    id: OpenViewActionModalSize.Xxlarge,\n    name: 'Extra Extra Large (1600 px)'\n  },\n  {\n    id: OpenViewActionModalSize.FullSize,\n    name: 'Full Size'\n  }\n];\n\nexport const RX_OPEN_VIEW_TYPE_OPTIONS = [\n  {\n    id: OpenViewActionType.FullWidth,\n    name: 'Full width'\n  },\n  {\n    id: OpenViewActionType.CenteredModal,\n    name: 'Centered modal'\n  },\n  {\n    id: OpenViewActionType.DockedLeftModal,\n    name: 'Docked left modal'\n  },\n  {\n    id: OpenViewActionType.DockedRightModal,\n    name: 'Docked right modal'\n  }\n];\n\nexport const RX_OPEN_VIEW_LAUNCH_BEHAVIOR_OPTIONS = [\n  {\n    id: OpenViewActionLaunchBehavior.NewWindow,\n    name: 'Open in a new tab'\n  },\n  {\n    id: OpenViewActionLaunchBehavior.SameWindow,\n    name: 'Open in the same tab'\n  }\n];\n","import { Injectable } from '@angular/core';\nimport {\n  IViewActionDesignPropertyEditorConfig,\n  OpenViewActionModalSize,\n  OpenViewActionType\n} from '@helix/platform/view/api';\nimport {\n  ExpressionFormControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionFormControlOptions,\n  ISelectFormControlOptions,\n  ITextFormControlOptions,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport { IExpressionConfigurator, Tooltip } from '@helix/platform/shared/api';\nimport {\n  RX_OPEN_VIEW_LAUNCH_BEHAVIOR_OPTIONS,\n  RX_OPEN_VIEW_MODAL_SIZE_OPTIONS,\n  RX_OPEN_VIEW_TYPE_OPTIONS\n} from './open-view-action.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxOpenViewModelHelperService {\n  getOpenViewInspector(\n    inputParams: { name: string }[],\n    presentationType: OpenViewActionType,\n    presentationModalSize: OpenViewActionModalSize,\n    expressionConfigurator: IExpressionConfigurator\n  ): IViewActionDesignPropertyEditorConfig {\n    const viewInputControls = inputParams.map((param) => ({\n      name: `viewParams.${param.name}`,\n      component: ExpressionFormControlComponent,\n      options: {\n        label: param.name,\n        dataDictionary$: expressionConfigurator.getDataDictionary(param.name),\n        operators: expressionConfigurator.getOperators(param.name)\n      } as IExpressionFormControlOptions\n    }));\n\n    const isFullWidthType = presentationType === OpenViewActionType.FullWidth;\n\n    const isCenteredModalWithFullSize =\n      presentationType === OpenViewActionType.CenteredModal &&\n      presentationModalSize === OpenViewActionModalSize.FullSize;\n\n    return [\n      {\n        name: 'viewDefinitionName',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label: 'View',\n          required: true,\n          definitionType: RxDefinitionPickerType.View\n        } as IDefinitionPickerComponentOptions\n      },\n      ...viewInputControls,\n      {\n        name: 'presentation.type',\n        component: SelectFormControlComponent,\n        options: {\n          label: 'Presentation',\n          tooltip: new Tooltip('Select how to display the view in the application.'),\n          options: RX_OPEN_VIEW_TYPE_OPTIONS,\n          sortAlphabetically: false\n        } as ISelectFormControlOptions\n      },\n      ...(isFullWidthType\n        ? [\n            {\n              name: 'presentation.launchBehavior',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Launch behavior',\n                options: RX_OPEN_VIEW_LAUNCH_BEHAVIOR_OPTIONS,\n                sortAlphabetically: true\n              } as ISelectFormControlOptions\n            }\n          ]\n        : [\n            {\n              name: 'presentation.modalSize',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Size',\n                options:\n                  presentationType === OpenViewActionType.CenteredModal\n                    ? RX_OPEN_VIEW_MODAL_SIZE_OPTIONS\n                    : RX_OPEN_VIEW_MODAL_SIZE_OPTIONS.filter(\n                        (option) => option.id !== OpenViewActionModalSize.FullSize\n                      ),\n                sortAlphabetically: false\n              } as ISelectFormControlOptions\n            },\n            ...(isCenteredModalWithFullSize\n              ? []\n              : [\n                  {\n                    name: 'presentation.title',\n                    component: TextFormControlComponent,\n                    options: {\n                      label: 'Title'\n                    } as ITextFormControlOptions\n                  }\n                ])\n          ])\n    ];\n  }\n}\n","import { Injector } from '@angular/core';\nimport { RxViewDesignerActionModel } from '@helix/platform/view/designer';\nimport {\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  IViewDefinition,\n  OpenViewActionLaunchBehavior,\n  OpenViewActionModalSize,\n  OpenViewActionType,\n  RxViewDefinitionCacheService,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map, pluck, skip, switchMap } from 'rxjs/operators';\nimport { omit } from 'lodash';\nimport { IOpenViewActionDesignProperties } from './open-view-action.types';\nimport { RxOpenViewModelHelperService } from './open-view-model-helper.service';\n\nexport class RxOpenViewActionDesignModel extends RxViewDesignerActionModel {\n  private rxViewDefinitionCacheService = this.injector.get(RxViewDefinitionCacheService);\n  private rxOpenViewModelHelperService = this.injector.get(RxOpenViewModelHelperService);\n\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<IOpenViewActionDesignProperties>\n  ): ViewActionDesignEditableProperties<IOpenViewActionDesignProperties> {\n    return {\n      viewDefinitionName: null,\n      'presentation.type': OpenViewActionType.FullWidth,\n      'presentation.launchBehavior': OpenViewActionLaunchBehavior.SameWindow,\n      ...initialProperties\n    };\n  }\n\n  constructor(injector: Injector, readonly sandbox: IViewActionDesignSandbox<IOpenViewActionDesignProperties>) {\n    super(injector, sandbox);\n\n    const viewDefinitionName$ = this.sandbox.actionProperties$.pipe(\n      pluck('viewDefinitionName'),\n      distinctUntilChanged()\n    );\n\n    const presentationType$ = this.sandbox.actionProperties$.pipe(pluck('presentation.type'), distinctUntilChanged());\n\n    const presentationModalSize$ = this.sandbox.actionProperties$.pipe(\n      pluck('presentation.modalSize'),\n      distinctUntilChanged()\n    );\n\n    combineLatest([viewDefinitionName$, presentationType$, presentationModalSize$])\n      .pipe(\n        switchMap(([viewDefinitionName, presentationType, presentationModalSize]) =>\n          this.getActionEditorConfig(viewDefinitionName, presentationType, presentationModalSize)\n        )\n      )\n      .subscribe((config) => this.sandbox.setActionPropertyEditorConfig(config));\n\n    viewDefinitionName$\n      .pipe(switchMap((viewDefinitionName) => this.getViewOutputParams(viewDefinitionName)))\n      .subscribe((outputParams) => {\n        this.sandbox.setActionOutputDataDictionary(\n          outputParams.map(({ name }) => ({\n            label: name,\n            expression: this.getOutputExpressionForPropertyPath(name)\n          }))\n        );\n      });\n\n    presentationType$.pipe(skip(1)).subscribe((presentationType) => {\n      let props = this.sandbox.getActionProperties();\n\n      if (presentationType === OpenViewActionType.FullWidth) {\n        props['presentation.launchBehavior'] = OpenViewActionLaunchBehavior.SameWindow;\n\n        props = omit(props, ['presentation.modalSize', 'presentation.title']);\n      } else {\n        props = omit(props, ['presentation.launchBehavior']);\n\n        if (\n          !props['presentation.modalSize'] ||\n          this.sandbox.getActionPropertyValue('presentation.modalSize') === OpenViewActionModalSize.FullSize\n        ) {\n          props['presentation.modalSize'] = OpenViewActionModalSize.Medium;\n        }\n      }\n\n      this.sandbox.setActionProperties(props);\n    });\n\n    presentationModalSize$.pipe(skip(1)).subscribe((presentationModalSize) => {\n      if (presentationModalSize === OpenViewActionModalSize.FullSize) {\n        this.sandbox.setActionProperties(omit(this.sandbox.getActionProperties(), ['presentation.title']));\n      }\n    });\n  }\n\n  private getActionEditorConfig(\n    viewDefinitionName: string,\n    presentationType: OpenViewActionType,\n    presentationModalSize: OpenViewActionModalSize\n  ): Observable<IViewActionDesignPropertyEditorConfig> {\n    return this.getViewInputParams(viewDefinitionName).pipe(\n      map((inputParams) =>\n        this.rxOpenViewModelHelperService.getOpenViewInspector(\n          inputParams,\n          presentationType,\n          presentationModalSize,\n          this.expressionConfigurator\n        )\n      )\n    );\n  }\n\n  private getViewInputParams(viewDefinitionName: string): Observable<IViewDefinition['inputParams']> {\n    return viewDefinitionName\n      ? this.rxViewDefinitionCacheService.getViewDefinition(viewDefinitionName).pipe(pluck('inputParams'))\n      : of([]);\n  }\n\n  private getViewOutputParams(viewDefinitionName: string): Observable<IViewDefinition['outputParams']> {\n    return viewDefinitionName\n      ? this.rxViewDefinitionCacheService.getViewDefinition(viewDefinitionName).pipe(pluck('outputParams'))\n      : of([]);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AdaptDockedPanelModule } from '@bmc-ux/adapt-angular';\nimport { RxViewActionDefinitionAdapterRegistryService, RxViewActionRegistryService } from '@helix/platform/view/api';\nimport { RuntimeViewModule } from '@helix/platform/view/runtime';\nimport { RxOpenViewActionService } from './open-view-action.service';\nimport { RxOpenViewDefinitionAdapterService } from './open-view-action-definition-adapter.service';\nimport { RX_OPEN_VIEW } from './open-view-action.constant';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxOpenViewActionDesignModel } from './open-view-action-design-model.class';\n\n@NgModule({\n  imports: [CommonModule, RuntimeViewModule, AdaptDockedPanelModule]\n})\nexport class OpenViewActionModule {\n  constructor(\n    private rxViewActionDefinitionAdapterRegistryService: RxViewActionDefinitionAdapterRegistryService,\n    private openViewDefinitionAdapterService: RxOpenViewDefinitionAdapterService,\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxOpenViewActionService: RxOpenViewActionService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: RX_OPEN_VIEW.actionName,\n      label: 'Open view',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxOpenViewActionService,\n      designModel: RxOpenViewActionDesignModel,\n      parameters: [\n        {\n          name: 'viewDefinitionName',\n          label: 'View',\n          isRequired: true\n        },\n        {\n          name: 'viewParams',\n          enableExpressionEvaluation: true\n        },\n        {\n          name: 'presentation',\n          attributes: [\n            {\n              name: 'title',\n              localizable: true\n            }\n          ]\n        }\n      ]\n    });\n\n    rxViewActionDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RX_OPEN_VIEW.actionName,\n      this.openViewDefinitionAdapterService\n    );\n  }\n}\n","import { RxViewDesignerActionModel } from '@helix/platform/view/designer';\nimport { Injector } from '@angular/core';\nimport {\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport { IAssociateViewActionDesignProperties } from './associate-view-action.interfaces';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map, pluck, shareReplay, skip, switchMap, take, withLatestFrom } from 'rxjs/operators';\nimport {\n  ExpressionFormControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionFormControlOptions,\n  ISelectFormControlOptions,\n  ISelectOption,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  SwitchFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RX_ASSOCIATION_DEFINITION,\n  RxAssociatedRecordNodeSide,\n  RxAssociationDefinitionService\n} from '@helix/platform/association/api';\nimport { RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { RxDefinitionNameService } from '@helix/platform/shared/api';\nimport { omit } from 'lodash';\n\nexport class RxAssociateViewActionDesignModel extends RxViewDesignerActionModel {\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n  private rxDefinitionNameService = this.injector.get(RxDefinitionNameService);\n  private rxAssociationDefinitionService = this.injector.get(RxAssociationDefinitionService);\n\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<IAssociateViewActionDesignProperties>\n  ): ViewActionDesignEditableProperties<IAssociateViewActionDesignProperties> {\n    return {\n      recordDefinitionName: null,\n      associationDefinitionName: null,\n      associationDefinitionRole: null,\n      associatedRecordId: null,\n      viewDefinitionName: null,\n      ...initialProperties\n    };\n  }\n\n  constructor(\n    protected injector: Injector,\n    readonly sandbox: IViewActionDesignSandbox<IAssociateViewActionDesignProperties>\n  ) {\n    super(injector, sandbox);\n\n    const recordDefinitionName$ = this.sandbox.actionProperties$.pipe(\n      pluck('recordDefinitionName'),\n      distinctUntilChanged()\n    );\n\n    const associationDefinitionName$ = this.sandbox.actionProperties$.pipe(\n      pluck('associationDefinitionName'),\n      distinctUntilChanged()\n    );\n\n    const associationNameOptions$: Observable<ISelectOption[]> = recordDefinitionName$.pipe(\n      switchMap((recordDefinitionName) =>\n        recordDefinitionName\n          ? this.rxRecordDefinitionCacheService.getRecordAssociationDefinitions(recordDefinitionName).pipe(\n              map((associationDefinitions) =>\n                associationDefinitions[recordDefinitionName].map((recordDefinition) => ({\n                  id: recordDefinition.name,\n                  name: this.rxDefinitionNameService.getDisplayName(recordDefinition.name)\n                }))\n              )\n            )\n          : of([])\n      )\n    );\n\n    const associationDefinition$ = associationDefinitionName$.pipe(\n      switchMap((associationDefinitionName) =>\n        associationDefinitionName ? this.rxAssociationDefinitionService.get(associationDefinitionName) : of(null)\n      ),\n      shareReplay(1)\n    );\n\n    const isSymmetricalAssociation$ = associationDefinition$.pipe(\n      map((association) => (association ? association.nodeAId === association.nodeBId : false))\n    );\n\n    const isManyToManyAssociation$ = associationDefinition$.pipe(\n      map((association) =>\n        association ? association.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value : false\n      )\n    );\n\n    const useDefaultRoles$ = this.sandbox.actionProperties$.pipe(\n      pluck('useDefaultRoles'),\n      map(Boolean),\n      distinctUntilChanged()\n    );\n\n    useDefaultRoles$.pipe(distinctUntilChanged(), skip(1)).subscribe((useDefaultRoles) => {\n      if (useDefaultRoles) {\n        this.sandbox.setActionProperties(omit(this.sandbox.getActionProperties(), ['nodeARole', 'nodeBRole']));\n      }\n    });\n\n    const associationRoleOptions$: Observable<ISelectOption[]> = associationDefinition$.pipe(\n      map((association) =>\n        association\n          ? [\n              {\n                id: RxAssociatedRecordNodeSide.NodeA,\n                name: association.nodeAName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.defaultName\n              },\n              {\n                id: RxAssociatedRecordNodeSide.NodeB,\n                name: association.nodeBName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.defaultName\n              }\n            ]\n          : []\n      )\n    );\n\n    // skip initial props set\n    recordDefinitionName$.pipe(skip(1)).subscribe(() => {\n      this.sandbox.updateActionProperties({\n        associationDefinitionName: null,\n        associationDefinitionRole: null\n      });\n    });\n\n    associationDefinition$\n      .pipe(\n        // skip initial props set\n        skip(1),\n        withLatestFrom(isSymmetricalAssociation$, recordDefinitionName$)\n      )\n      .subscribe(([associationDefinition, isSymmetricalAssociation, recordDefinitionName]) => {\n        if (associationDefinition && !isSymmetricalAssociation) {\n          const associationDefinitionRole =\n            recordDefinitionName === associationDefinition.nodeAId\n              ? RxAssociatedRecordNodeSide.NodeA\n              : RxAssociatedRecordNodeSide.NodeB;\n\n          this.sandbox.updateActionProperties({\n            associationDefinitionRole\n          });\n        } else {\n          this.sandbox.updateActionProperties({\n            associationDefinitionRole: null\n          });\n        }\n      });\n\n    combineLatest([recordDefinitionName$, associationNameOptions$, associationRoleOptions$, useDefaultRoles$])\n      .pipe(withLatestFrom(isSymmetricalAssociation$, isManyToManyAssociation$))\n      .subscribe(\n        ([\n          [recordDefinitionName, associationNameOptions, associationRoleOptions, useDefaultRoles],\n          isSymmetricalAssociation,\n          isManyToManyAssociation\n        ]) => {\n          this.sandbox.setActionPropertyEditorConfig(\n            this.getActionEditorConfig(\n              recordDefinitionName,\n              associationNameOptions,\n              associationRoleOptions,\n              isSymmetricalAssociation,\n              isManyToManyAssociation,\n              useDefaultRoles\n            )\n          );\n        }\n      );\n  }\n\n  private getActionEditorConfig(\n    recordDefinitionName: string,\n    associationNameOptions: ISelectOption[],\n    associationRoleOptions: ISelectOption[],\n    isSymmetricalAssociation: boolean,\n    isManyToManyAssociation: boolean,\n    useDefaultRoles: boolean\n  ): IViewActionDesignPropertyEditorConfig {\n    return [\n      {\n        name: 'recordDefinitionName',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label: 'Record definition to associate',\n          definitionType: RxDefinitionPickerType.StandardDataRecord,\n          required: true\n        } as IDefinitionPickerComponentOptions\n      },\n      ...(recordDefinitionName\n        ? [\n            {\n              name: 'associationDefinitionName',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Association to use',\n                options: associationNameOptions,\n                required: true\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'associationDefinitionRole',\n              component: SelectFormControlComponent,\n              isDisabled: !isSymmetricalAssociation,\n              options: {\n                label: 'Associated record node side',\n                required: true,\n                options: associationRoleOptions\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'associatedRecordId',\n              component: ExpressionFormControlComponent,\n              options: {\n                label: 'Associated record ID',\n                dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                operators: this.expressionConfigurator.getOperators(),\n                isRequired: true\n              } as IExpressionFormControlOptions\n            },\n            {\n              name: 'viewDefinitionName',\n              component: RxDefinitionPickerComponent,\n              options: {\n                label: 'View for selecting or creating associated records',\n                required: true,\n                definitionType: RxDefinitionPickerType.View\n              } as IDefinitionPickerComponentOptions\n            },\n            ...(isManyToManyAssociation\n              ? [\n                  {\n                    name: 'useDefaultRoles',\n                    component: SwitchFormControlComponent,\n                    options: {\n                      label: 'Use default roles'\n                    } as IExpressionFormControlOptions\n                  },\n                  ...(isManyToManyAssociation && useDefaultRoles\n                    ? []\n                    : [\n                        {\n                          name: 'nodeARole',\n                          component: ExpressionFormControlComponent,\n                          options: {\n                            label: 'First record role',\n                            dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                            operators: this.expressionConfigurator.getOperators()\n                          } as IExpressionFormControlOptions\n                        },\n                        {\n                          name: 'nodeBRole',\n                          component: ExpressionFormControlComponent,\n                          options: {\n                            label: 'Second record role',\n                            dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                            operators: this.expressionConfigurator.getOperators()\n                          } as IExpressionFormControlOptions\n                        }\n                      ])\n                ]\n              : [])\n          ]\n        : [])\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxViewActionRegistryService, ViewComponentPropertyType } from '@helix/platform/view/api';\nimport { RxAssociateViewActionService } from './associate-view-action.service';\nimport { OpenViewActionModule } from '../open-view/open-view-action.module';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxAssociateViewActionDesignModel } from './associate-view-action-design-model.class';\n\n@NgModule({\n  imports: [OpenViewActionModule]\n})\nexport class AssociateViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxAssociateViewActionService: RxAssociateViewActionService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxAssociateAction',\n      label: 'Associate records',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxAssociateViewActionService,\n      designModel: RxAssociateViewActionDesignModel,\n      parameters: [\n        {\n          name: 'recordDefinitionName',\n          label: 'Record definition to associate',\n          isRequired: true,\n          type: ViewComponentPropertyType.String\n        },\n        {\n          name: 'associationDefinitionName',\n          label: 'Association to use',\n          isRequired: true\n        },\n        {\n          name: 'associationDefinitionRole',\n          label: 'Associated record node side',\n          isRequired: true\n        },\n        {\n          name: 'associatedRecordId',\n          label: 'Associated record ID',\n          enableExpressionEvaluation: true,\n          isRequired: true\n        },\n        {\n          name: 'viewDefinitionName',\n          label: 'View for selecting or creating associated records',\n          isRequired: true,\n          type: ViewComponentPropertyType.String\n        },\n        {\n          name: 'useDefaultRoles'\n        },\n        {\n          name: 'nodeARole',\n          enableExpressionEvaluation: true\n        },\n        {\n          name: 'nodeBRole',\n          enableExpressionEvaluation: true\n        }\n      ]\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  IViewActionService,\n  OpenViewActionModalSize,\n  OpenViewActionType,\n  RowDataItemIdFieldName\n} from '@helix/platform/view/api';\nimport { EMPTY, Observable } from 'rxjs';\nimport { switchMapTo, tap } from 'rxjs/operators';\nimport { IFieldInstance, RX_RECORD_DEFINITION, RxRecordInstanceUtilsService } from '@helix/platform/record/api';\nimport { compact, flatten, flow, isArray, isFunction, isObject, map, some, uniq } from 'lodash';\nimport { RxGuidService, RxStringService } from '@helix/platform/utils';\nimport { RxOpenViewActionService } from '../open-view/open-view-action.service';\nimport { IAvcAssociateActionParams } from './avc-associate-action-params.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxAvcAssociateActionService implements IViewActionService<IAvcAssociateActionParams, never> {\n  constructor(\n    private rxGuidService: RxGuidService,\n    private rxOpenViewActionService: RxOpenViewActionService,\n    private rxStringService: RxStringService,\n    private rxRecordInstanceUtilsService: RxRecordInstanceUtilsService\n  ) {}\n\n  execute(params: IAvcAssociateActionParams): Observable<never> {\n    return this.rxOpenViewActionService\n      .execute({\n        viewDefinitionName: params.viewDefinitionName,\n        viewParams: null,\n        presentation: {\n          modalSize: OpenViewActionModalSize.Large,\n          type: OpenViewActionType.DockedRightModal\n        }\n      })\n      .pipe(\n        tap((output) => {\n          const recordInstances = flow(\n            (outputs) => map(outputs, (outputsItem) => this.extractRecordInstance(outputsItem)),\n            flatten,\n            compact,\n            uniq\n          )(output);\n\n          params.associationViewComponent.associate(recordInstances);\n        }),\n        switchMapTo(EMPTY)\n      );\n  }\n\n  private extractRecordInstance(source: {\n    [fieldId: string]: any;\n    fieldInstances: { [fieldId: number]: IFieldInstance };\n  }) {\n    let recordInstanceFields = [];\n\n    // for record grid\n    if (isFunction(source.getSelectedRows)) {\n      recordInstanceFields = map(\n        source.getSelectedRows(),\n        this.rxRecordInstanceUtilsService.convertFromDataPageRowToPlainRecordInstance\n      );\n\n      // for record grid row\n    } else if (isObject(source) && this.rxStringService.isNonEmptyString(source[RowDataItemIdFieldName])) {\n      recordInstanceFields.push(this.rxRecordInstanceUtilsService.convertFromDataPageRowToPlainRecordInstance(source));\n\n      // for selected rows\n    } else if (isArray(source) && some(source, isObject)) {\n      recordInstanceFields = map(source, this.rxRecordInstanceUtilsService.convertFromDataPageRowToPlainRecordInstance);\n\n      // for existing record instance\n    } else if (isObject(source) && isObject(source.fieldInstances) && source.id) {\n      recordInstanceFields.push(source);\n\n      // for new record instance\n    } else if (isObject(source) && isObject(source.fieldInstances) && !source.id) {\n      const dummyId = this.rxGuidService.generate();\n\n      source.id = dummyId;\n      source.fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.id].value = dummyId;\n      source.isNewInstance = true;\n\n      recordInstanceFields.push(source);\n    }\n\n    return recordInstanceFields;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RxViewActionRegistryService } from '@helix/platform/view/api';\nimport { RxAvcAssociateActionService } from './avc-associate-action.service';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\n\n@NgModule({\n  imports: [CommonModule]\n})\nexport class AvcAssociateActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxAvcAssociateActionService: RxAvcAssociateActionService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxAvcAssociate',\n      label: 'Avc associate',\n      bundleId: RX_APPLICATION.platformBundleId,\n      hidden: true,\n      service: this.rxAvcAssociateActionService,\n      parameters: [\n        {\n          name: 'viewDefinitionName'\n        },\n        {\n          name: 'associationViewComponent',\n          enableExpressionEvaluation: true\n        }\n      ]\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IViewActionService } from '@helix/platform/view/api';\nimport { EMPTY, Observable } from 'rxjs';\nimport { ICloseViewActionParams } from './close-view-action-params.interface';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxCloseViewActionService implements IViewActionService<ICloseViewActionParams, never> {\n  execute(params: ICloseViewActionParams): Observable<never> {\n    return params.actAsCancel\n      ? params.viewApi.cancel()\n      : EMPTY.pipe(\n          tap({\n            complete() {\n              params.viewApi.close();\n            }\n          })\n        );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxViewActionRegistryService, ViewComponentPropertyType } from '@helix/platform/view/api';\nimport { RxCloseViewActionService } from './close-view-action.service';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { SwitchFormControlComponent } from '@helix/platform/shared/components';\n\n@NgModule()\nexport class CloseViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxCloseViewActionService: RxCloseViewActionService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxCloseViewAction',\n      label: 'Close view',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxCloseViewActionService,\n      parameters: [\n        {\n          name: 'viewApi',\n          enableExpressionEvaluation: true,\n          defaultValue: '${view.api}'\n        },\n        {\n          name: 'actAsCancel',\n          label: 'Act as cancel',\n          editor: SwitchFormControlComponent,\n          type: ViewComponentPropertyType.Boolean,\n          designType: ViewComponentPropertyType.Boolean\n        }\n      ]\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { IRxRecordGridApi, IViewActionService, RxViewActionUtilsService } from '@helix/platform/view/api';\nimport { RxRecordInstanceService } from '@helix/platform/record/api';\nimport { RxLogService, RxNotificationService } from '@helix/platform/shared/api';\nimport { EMPTY, forkJoin, from, Observable, throwError } from 'rxjs';\nimport { IDeleteRecordsViewActionParams } from './delete-records-view-action-params.interface';\nimport { switchMap, switchMapTo, tap } from 'rxjs/operators';\nimport { RxError, RxStringService } from '@helix/platform/utils';\nimport { castArray, isEmpty, isFunction } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxDeleteRecordsViewActionService implements IViewActionService<IDeleteRecordsViewActionParams, never> {\n  constructor(\n    private rxLogService: RxLogService,\n    private rxModalService: RxModalService,\n    private translateService: TranslateService,\n    private rxNotificationService: RxNotificationService,\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private rxViewActionUtilsService: RxViewActionUtilsService,\n    private rxStringService: RxStringService\n  ) {}\n\n  execute(params: IDeleteRecordsViewActionParams): Observable<never> {\n    if (\n      isEmpty(params.recordDefinitionName) &&\n      params.records &&\n      isFunction((<IRxRecordGridApi>params.records).getRecordDefinitionName)\n    ) {\n      params.recordDefinitionName = (<IRxRecordGridApi>params.records).getRecordDefinitionName();\n    }\n\n    if (this.rxStringService.isNonEmptyString(params.recordDefinitionName)) {\n      let records = [];\n\n      if (params.records) {\n        if (isFunction((<IRxRecordGridApi>params.records).getSelectedRows)) {\n          records = castArray((<IRxRecordGridApi>params.records).getSelectedRows());\n        } else {\n          records = castArray(<IRxRecordGridApi>params.records);\n        }\n      }\n\n      const recordIds = this.rxViewActionUtilsService.extractRecordIds(records);\n\n      if (recordIds.length) {\n        const message =\n          recordIds.length === 1\n            ? 'com.bmc.arsys.rx.client.view-actions.delete-record.confirmation-dialog.message'\n            : 'com.bmc.arsys.rx.client.view-actions.delete-records.confirmation-dialog.message';\n\n        return from(\n          this.rxModalService.confirm({\n            title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),\n            modalStyle: RX_MODAL.modalStyles.warning,\n            message: this.translateService.instant(message, { count: recordIds.length })\n          })\n        ).pipe(\n          switchMap((res) => {\n            if (res) {\n              const deleteObservables = recordIds.map((recordId) =>\n                this.rxRecordInstanceService.delete(params.recordDefinitionName, recordId)\n              );\n\n              return forkJoin(deleteObservables).pipe(\n                tap(() => {\n                  this.rxNotificationService.addSuccessMessage(\n                    this.translateService.instant(\n                      'com.bmc.arsys.rx.client.view-actions.delete-records.records-deleted.message'\n                    )\n                  );\n                }),\n                switchMapTo(\n                  isFunction((<IRxRecordGridApi>params.records).refresh)\n                    ? (<IRxRecordGridApi>params.records).refresh()\n                    : EMPTY\n                )\n              );\n            } else {\n              return throwError(null);\n            }\n          })\n        );\n      } else {\n        this.rxLogService.debug('rxDeleteRecordsAction: no records to delete.');\n\n        return EMPTY;\n      }\n    } else {\n      return throwError(new RxError('rxDeleteRecordsAction: Record Definition Name is not defined.'));\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxViewActionRegistryService, ViewComponentPropertyType } from '@helix/platform/view/api';\nimport { RxDeleteRecordsViewActionService } from './delete-records-view-action.service';\nimport { RX_APPLICATION, Tooltip } from '@helix/platform/shared/api';\nimport {\n  ExpressionFormControlComponent,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType\n} from '@helix/platform/shared/components';\n\n@NgModule()\nexport class DeleteRecordsViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxDeleteRecordsViewActionService: RxDeleteRecordsViewActionService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxDeleteRecordsAction',\n      label: 'Delete records',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxDeleteRecordsViewActionService,\n      parameters: [\n        {\n          name: 'records',\n          label: 'Records',\n          enableExpressionEvaluation: true,\n          isRequired: true,\n          editor: ExpressionFormControlComponent,\n          tooltip: new Tooltip(\n            `Build an expression that evaluates to one of the following:<br>\n            1) Record grid<br>\n            2) A collection of record instances or<br>\n            3) A collection of record instance IDs. <br>For options 2 and 3, select a record definition in the field below.`\n          )\n        },\n        {\n          name: 'recordDefinitionName',\n          label: 'Record definition',\n          type: ViewComponentPropertyType.String,\n          editor: RxDefinitionPickerComponent,\n          editorOptions: {\n            definitionType: RxDefinitionPickerType.StandardDataRecord\n          },\n          defaultValue: null\n        }\n      ]\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IViewActionService } from '@helix/platform/view/api';\nimport { RxLogService } from '@helix/platform/shared/api';\nimport { RxViewActionUtilsService } from '@helix/platform/view/api';\nimport {\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RxAssociationDefinitionService,\n  RxAssociationInstanceService\n} from '@helix/platform/association/api';\nimport { IDisassociateViewActionParams } from './disassociate-view-action.interfaces';\nimport { Observable, of, throwError } from 'rxjs';\nimport { switchMap, mapTo } from 'rxjs/operators';\nimport { RxError } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxDisassociateViewActionService implements IViewActionService<IDisassociateViewActionParams, string[]> {\n  constructor(\n    private rxLogService: RxLogService,\n    private rxViewActionUtilsService: RxViewActionUtilsService,\n    private rxAssociationDefinitionService: RxAssociationDefinitionService,\n    private rxAssociationInstanceService: RxAssociationInstanceService\n  ) {}\n\n  execute(params: IDisassociateViewActionParams): Observable<string[]> {\n    if (!params.associatedRecordId) {\n      return throwError(new RxError('rxDisassociateAction: Associated Record ID is not defined.'));\n    }\n\n    const instanceIds = this.rxViewActionUtilsService.extractRecordIds(params.disassociatedRecordIds);\n\n    this.rxLogService.debug(`RxDisassociateAction: disassociating ${instanceIds.length} record(s)`);\n\n    if (instanceIds.length) {\n      return this.rxAssociationDefinitionService.get(params.associationDefinitionName).pipe(\n        switchMap(() => {\n          let nodeAIds: string[],\n            nodeBIds: string[] = [];\n\n          if (params.associationDefinitionRole === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value) {\n            nodeAIds = instanceIds;\n            nodeBIds = [params.associatedRecordId];\n          } else if (params.associationDefinitionRole === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value) {\n            nodeAIds = [params.associatedRecordId];\n            nodeBIds = instanceIds;\n          }\n\n          return this.rxAssociationInstanceService\n            .disassociateRecords(params.associationDefinitionName, nodeAIds, nodeBIds)\n            .pipe(mapTo(instanceIds));\n        })\n      );\n    } else {\n      return of([]);\n    }\n  }\n}\n","import { Injector } from '@angular/core';\nimport { RxViewDesignerActionModel } from '@helix/platform/view/designer';\nimport {\n  ExpressionFormControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionFormControlOptions,\n  ISelectFormControlOptions,\n  ISelectOption,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { RxDefinitionNameService } from '@helix/platform/shared/api';\nimport {\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RxAssociatedRecordNodeSide,\n  RxAssociationDefinitionService\n} from '@helix/platform/association/api';\nimport {\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, pluck, switchMap, map, withLatestFrom, shareReplay, skip, take } from 'rxjs/operators';\nimport { IDisassociateViewActionDesignProperties } from './disassociate-view-action.interfaces';\n\nexport class RxDisassociateViewActionDesignModel extends RxViewDesignerActionModel {\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n  private rxDefinitionNameService = this.injector.get(RxDefinitionNameService);\n  private rxAssociationDefinitionService = this.injector.get(RxAssociationDefinitionService);\n\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<IDisassociateViewActionDesignProperties>\n  ): ViewActionDesignEditableProperties<IDisassociateViewActionDesignProperties> {\n    return {\n      recordDefinitionName: null,\n      associationDefinitionName: null,\n      associationDefinitionRole: null,\n      associatedRecordId: null,\n      disassociatedRecordIds: null,\n      ...initialProperties\n    };\n  }\n\n  constructor(\n    protected injector: Injector,\n    readonly sandbox: IViewActionDesignSandbox<IDisassociateViewActionDesignProperties>\n  ) {\n    super(injector, sandbox);\n\n    const recordDefinitionName$ = this.sandbox.actionProperties$.pipe(\n      pluck('recordDefinitionName'),\n      distinctUntilChanged()\n    );\n\n    const associationDefinitionName$ = this.sandbox.actionProperties$.pipe(\n      pluck('associationDefinitionName'),\n      distinctUntilChanged()\n    );\n\n    const associationNameOptions$: Observable<ISelectOption[]> = recordDefinitionName$.pipe(\n      switchMap((recordDefinitionName) =>\n        recordDefinitionName\n          ? this.rxRecordDefinitionCacheService.getRecordAssociationDefinitions(recordDefinitionName).pipe(\n              map((associationDefinitions) =>\n                associationDefinitions[recordDefinitionName].map((recordDefinition) => ({\n                  id: recordDefinition.name,\n                  name: this.rxDefinitionNameService.getDisplayName(recordDefinition.name)\n                }))\n              )\n            )\n          : of([])\n      )\n    );\n\n    const associationDefinition$ = associationDefinitionName$.pipe(\n      switchMap((associationDefinitionName) =>\n        associationDefinitionName ? this.rxAssociationDefinitionService.get(associationDefinitionName) : of(null)\n      ),\n      shareReplay(1)\n    );\n\n    const isSymmetricalAssociation$ = associationDefinition$.pipe(\n      map((association) => (association ? association.nodeAId === association.nodeBId : false))\n    );\n\n    const associationRoleOptions$: Observable<ISelectOption[]> = associationDefinition$.pipe(\n      map((association) =>\n        association\n          ? [\n              {\n                id: RxAssociatedRecordNodeSide.NodeA,\n                name: association.nodeAName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.defaultName\n              },\n              {\n                id: RxAssociatedRecordNodeSide.NodeB,\n                name: association.nodeBName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.defaultName\n              }\n            ]\n          : []\n      )\n    );\n\n    // skip initial props set\n    recordDefinitionName$.pipe(skip(1)).subscribe(() => {\n      this.sandbox.updateActionProperties({\n        associationDefinitionName: null,\n        associationDefinitionRole: null\n      });\n    });\n\n    associationDefinition$\n      .pipe(\n        // skip initial props set\n        skip(1),\n        withLatestFrom(isSymmetricalAssociation$, recordDefinitionName$)\n      )\n      .subscribe(([associationDefinition, isSymmetricalAssociation, recordDefinitionName]) => {\n        if (associationDefinition && !isSymmetricalAssociation) {\n          const associationDefinitionRole =\n            recordDefinitionName === associationDefinition.nodeAId\n              ? RxAssociatedRecordNodeSide.NodeA\n              : RxAssociatedRecordNodeSide.NodeB;\n\n          this.sandbox.updateActionProperties({\n            associationDefinitionRole\n          });\n        } else {\n          this.sandbox.updateActionProperties({\n            associationDefinitionRole: null\n          });\n        }\n      });\n\n    combineLatest([recordDefinitionName$, associationNameOptions$, associationRoleOptions$])\n      .pipe(withLatestFrom(isSymmetricalAssociation$))\n      .subscribe(\n        ([[recordDefinitionName, associationNameOptions, associationRoleOptions], isSymmetricalAssociation]) => {\n          this.sandbox.setActionPropertyEditorConfig(\n            this.getActionEditorConfig(\n              recordDefinitionName,\n              associationNameOptions,\n              associationRoleOptions,\n              isSymmetricalAssociation\n            )\n          );\n        }\n      );\n  }\n\n  private getActionEditorConfig(\n    recordDefinitionName: string,\n    associationNameOptions: ISelectOption[],\n    associationRoleOptions: ISelectOption[],\n    isSymmetricalAssociation: boolean\n  ): IViewActionDesignPropertyEditorConfig {\n    return [\n      {\n        name: 'recordDefinitionName',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label: 'Record definition to disassociate',\n          definitionType: RxDefinitionPickerType.StandardDataRecord,\n          required: true\n        } as IDefinitionPickerComponentOptions\n      },\n      ...(recordDefinitionName\n        ? [\n            {\n              name: 'associationDefinitionName',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Association to use',\n                options: associationNameOptions,\n                required: true\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'associationDefinitionRole',\n              component: SelectFormControlComponent,\n              isDisabled: !isSymmetricalAssociation,\n              options: {\n                label: 'Associated record node side',\n                required: true,\n                options: associationRoleOptions\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'associatedRecordId',\n              component: ExpressionFormControlComponent,\n              options: {\n                label: 'Associated record ID',\n                dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                operators: this.expressionConfigurator.getOperators(),\n                isRequired: true\n              } as IExpressionFormControlOptions\n            },\n            {\n              name: 'disassociatedRecordIds',\n              component: ExpressionFormControlComponent,\n              options: {\n                label: 'Records to disassociate',\n                dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                operators: this.expressionConfigurator.getOperators(),\n                isRequired: true\n              } as IExpressionFormControlOptions\n            }\n          ]\n        : [])\n    ];\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxViewActionRegistryService, ViewComponentPropertyType } from '@helix/platform/view/api';\nimport { RxDisassociateViewActionService } from './disassociate-view-action.service';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxDisassociateViewActionDesignModel } from './disassociate-view-action-design-model.class';\n\n@NgModule()\nexport class DisassociateViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxDisassociateViewActionService: RxDisassociateViewActionService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxDisassociateAction',\n      label: 'Disassociate records',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxDisassociateViewActionService,\n      designModel: RxDisassociateViewActionDesignModel,\n      parameters: [\n        {\n          name: 'recordDefinitionName',\n          label: 'Record definition to disassociate',\n          isRequired: true,\n          type: ViewComponentPropertyType.String\n        },\n        {\n          name: 'associationDefinitionName',\n          label: 'Association to use',\n          isRequired: true\n        },\n        {\n          name: 'associationDefinitionRole',\n          label: 'Associated record node side',\n          isRequired: true\n        },\n        {\n          name: 'associatedRecordId',\n          label: 'Associated record ID',\n          enableExpressionEvaluation: true,\n          isRequired: true\n        },\n        {\n          name: 'disassociatedRecordIds',\n          label: 'Records to disassociate',\n          enableExpressionEvaluation: true,\n          isRequired: true\n        }\n      ]\n    });\n  }\n}\n","import { Component } from '@angular/core';\nimport { ActiveModalRef } from '@bmc-ux/adapt-angular';\nimport { IEditRecordsActionResults } from '../interfaces/edit-records-action-results.interface';\n\n@Component({\n  selector: 'rx-edit-records-result-modal',\n  styleUrls: ['./result-modal.scss'],\n  templateUrl: './result-modal.html'\n})\nexport class ResultModalComponent {\n  data;\n\n  constructor(public activeModelRef: ActiveModalRef) {\n    this.data = this.activeModelRef.getData();\n  }\n\n  close() {\n    this.activeModelRef.close();\n  }\n\n  hasActionResultDetails(data: IEditRecordsActionResults): boolean {\n    return ['warningCount', 'errorCount', 'infoCount', 'successCount'].some((prop) => data.summary[prop]);\n  }\n}\n","<div class=\"modal-body\">\n  <div class=\"mb-2\">\n    <adapt-icon [name]=\"'check_circle'\" class=\"mr-1 text-success-icon\"></adapt-icon>\n    {{'com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.updated-successfully.label' |\n    translate}}: {{data.summary.successCount}}\n  </div>\n\n  <div class=\"mb-2\">\n    <adapt-icon [name]=\"'exclamation_circle'\" class=\"mr-1 text-warning-icon\"></adapt-icon>\n    {{'com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.updated-with-warnings.label' | translate\n    }}: {{data.summary.warningCount}}\n  </div>\n\n  <div>\n    <adapt-icon [name]=\"'exclamation_triangle'\" class=\"mr-1 text-danger-icon\"></adapt-icon>\n    {{'com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.update-failures.label' | translate }}:\n    {{data.summary.errorCount}}\n  </div>\n\n  <div class=\"mt-2\" *ngIf=\"hasActionResultDetails(data) && data.details\">\n    <adapt-rx-textarea\n      class=\"resize-none\"\n      label=\"{{'com.bmc.arsys.rx.client.common.messages.label' | translate }}\"\n      readonly\n      rows=\"15\"\n      [ngModel]=\"data.details\"\n    >\n    </adapt-rx-textarea>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button class=\"btn btn-secondary btn-sm\" (click)=\"close()\" type=\"button\">\n    {{'com.bmc.arsys.rx.client.common.close.label' | translate}}\n  </button>\n</div>\n","import { Injectable } from '@angular/core';\nimport { filter, forEach, forIn, has, isEmpty, isNull, map as _map, noop, pick, some, transform, values } from 'lodash';\nimport {\n  IFieldInstance,\n  IRecordInstance,\n  IRxRecordInstanceAssociationInstances,\n  RX_RECORD_INSTANCE\n} from '@helix/platform/record/api';\nimport { AdaptModalService, ModalDeferred } from '@bmc-ux/adapt-angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IPreparedRecordInstance } from '../interfaces/prepared-record-instance.interface';\nimport { IPreparedFile } from '../interfaces/prepared-file.interface';\nimport { IFields } from '../interfaces/fields.interface';\nimport { IRecordData } from '../interfaces/record-data.interface';\nimport { IEditRecordsActionResults } from '../interfaces/edit-records-action-results.interface';\nimport { ResultModalComponent } from '../result-modal/result-modal.component';\nimport { RX_ERROR_HANDLING, RxCommandFactoryService } from '@helix/platform/shared/api';\nimport { from, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { IEditRecordsActionResponse, IEditRecordsActionResponseMessage } from '../interfaces/action-response.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxEditRecordsDataService {\n  private resourceType = 'com.bmc.arsys.rx.application.record.command.UpdateRecordInstancesCommand';\n  private editRecordsCommand = this.rxCommandFactoryService.forResourceType(this.resourceType);\n\n  constructor(\n    private adaptModalService: AdaptModalService,\n    private translateService: TranslateService,\n    private rxCommandFactoryService: RxCommandFactoryService\n  ) {}\n\n  editRecords(preparedRecordData): Observable<any> {\n    return this.editRecordsCommand.execute(preparedRecordData);\n  }\n\n  showActionResults(actionResults: IEditRecordsActionResults): Promise<ModalDeferred> {\n    return this.adaptModalService\n      .open({\n        size: 'sm',\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.title'\n        ),\n        data: actionResults,\n        content: ResultModalComponent\n      })\n      .catch(noop);\n  }\n\n  runAction(recordInstanceIds: string[], recordInstance: IRecordInstance): Observable<ModalDeferred> {\n    const preparedRecordData = this.prepareRecordData(recordInstanceIds, recordInstance);\n    const formData = new FormData();\n\n    formData.append('commandInstance', JSON.stringify(preparedRecordData.commandInstance));\n\n    forEach(preparedRecordData.attachments, (attachment) => {\n      formData.append(attachment.key as string, attachment.file);\n    });\n\n    Object.keys(preparedRecordData || {}).map((item) => {\n      if (item !== 'commandInstance' && item !== 'attachments') {\n        formData.append(item, JSON.stringify(preparedRecordData[item]));\n      }\n    });\n\n    return this.editRecords(formData).pipe(\n      map((response) => this.prepareActionResults(response, preparedRecordData)),\n      switchMap((actionResults) => {\n        return from(Promise.resolve(this.showActionResults(actionResults)));\n      })\n    );\n  }\n\n  private cleanUnchangedFields(recordInstance: IPreparedRecordInstance): { [fieldId: number]: IFieldInstance } {\n    return forIn(recordInstance.fieldInstances, (field, key) => {\n      if (isNull(field.value)) {\n        delete recordInstance.fieldInstances[key];\n      }\n    });\n  }\n\n  private prepareFiles(fields: IFields, keyPrefix?: string): IPreparedFile[] {\n    return values(fields)\n      .filter((field) => has(field, 'file'))\n      .map((attachment) => ({\n        key: keyPrefix ? keyPrefix + '/' + attachment.id : attachment.id,\n        file: attachment.file\n      }));\n  }\n\n  private cleanFiles(fields: IFields): IFields {\n    Object.keys(fields).map((key, index) => {\n      fields[key].hasOwnProperty('file') ? delete fields[key] : delete fields[key].file;\n    });\n\n    return fields;\n  }\n\n  private prepareAssociationInstancesForSaving(associationInstances: IRxRecordInstanceAssociationInstances): any[] {\n    return transform(\n      associationInstances,\n      (result, associationInstance, associationDefinitionName) => {\n        forEach(associationInstance, (associationGroups: any, role) => {\n          if (!isEmpty(associationGroups.pending)) {\n            result.push({\n              associationDefinitionName: associationDefinitionName,\n              recordInstanceIds: _map(associationGroups.pending, 'id'),\n              nodeSide: role,\n              resourceType: RX_RECORD_INSTANCE.association.operationResourceTypes.associate\n            });\n          }\n        });\n      },\n      []\n    );\n  }\n\n  private prepareRecordData(recordInstanceIds: Array<string>, recordInstance: IRecordInstance): IRecordData {\n    const record = pick(recordInstance, ['resourceType', 'recordDefinitionName', 'fieldInstances']);\n    const resourceType = 'com.bmc.arsys.rx.application.record.command.UpdateRecordInstancesCommand';\n\n    record.fieldInstances = this.cleanUnchangedFields(record);\n\n    const attachments = this.prepareFiles(record.fieldInstances);\n\n    record.fieldInstances = this.cleanFiles(record.fieldInstances);\n\n    const associationInstances = this.prepareAssociationInstancesForSaving(recordInstance.associationInstances);\n\n    const data: IRecordData = {\n      shouldOverrideOptimisticLock: false,\n      commandInstance: { resourceType },\n      recordInstanceIds: recordInstanceIds,\n      recordInstance: record,\n      attachments: attachments\n    };\n\n    if (!isEmpty(associationInstances)) {\n      data.associationOperations = associationInstances.map((associationInstance) => ({\n        ...associationInstance,\n        nodeSide: associationInstance.nodeSide.split(':')[0]\n      }));\n    }\n\n    return data;\n  }\n\n  private prepareActionResults(\n    response: IEditRecordsActionResponse,\n    requestData: IRecordData\n  ): IEditRecordsActionResults {\n    const newLine = '\\n';\n    const updatedInstanceIdsCount = requestData.recordInstanceIds.length;\n    const detailsMessageLabel = this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.details.record-instance-id.label'\n    );\n\n    const summary = {\n      successCount: 0,\n      errorCount: 0,\n      warningCount: 0,\n      infoCount: 0\n    };\n\n    let details: string;\n\n    if (!isEmpty(response)) {\n      summary.errorCount = filter(response, (messages) =>\n        some(messages, ['messageType', RX_ERROR_HANDLING.messageTypes.error])\n      ).length;\n\n      summary.warningCount = filter(response, (messages) =>\n        some(messages, ['messageType', RX_ERROR_HANDLING.messageTypes.warning])\n      ).length;\n\n      summary.infoCount = filter(response, (messages) =>\n        some(messages, ['messageType', RX_ERROR_HANDLING.messageTypes.info])\n      ).length;\n\n      summary.successCount = filter(response, (messages) =>\n        some(messages, ['messageType', RX_ERROR_HANDLING.messageTypes.success])\n      ).length;\n\n      details = _map(response, (messages, recordInstanceId) => {\n        const recordInstanceIdMessageHeader = detailsMessageLabel + ': ' + recordInstanceId;\n\n        const messageText = values(messages).map(this.convertMessageToString).join(', ');\n\n        return recordInstanceIdMessageHeader + newLine + messageText;\n      }).join(newLine + newLine);\n    } else {\n      details = '';\n    }\n\n    summary.successCount = updatedInstanceIdsCount - summary.errorCount - summary.warningCount;\n\n    return { summary, details };\n  }\n\n  private convertMessageToString(message: IEditRecordsActionResponseMessage): string {\n    return `${message.messageType}: ${values([message.messageText, message.appendedText]).join(' ')}`;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { assign } from 'lodash';\nimport { RxGuidService } from '@helix/platform/utils';\nimport {\n  IContainerViewComponentDefinition,\n  IViewComponentDefinition,\n  IViewDefinition,\n  RX_VIEW_DEFINITION,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { RX_RECORD_DEFINITION, RxFieldDefinitionService } from '@helix/platform/record/api';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  ContainerRowWrap,\n  IColumnDescriptor,\n  RecordEditorMode,\n  RxAssociationEditingMode,\n  RxDefaultRecordEditorInputType\n} from '@helix/platform/view/components';\nimport { RX_ADMINISTRATION, RxSystemConfigurationService } from '@helix/platform/shared/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxEditRecordsViewBuilder {\n  constructor(\n    private rxGuidService: RxGuidService,\n    private rxDefaultRecordEditorInputType: RxDefaultRecordEditorInputType,\n    private rxFieldDefinitionService: RxFieldDefinitionService,\n    private translateService: TranslateService,\n    private rxSystemConfigurationService: RxSystemConfigurationService\n  ) {}\n\n  getViewDefinition(recordDefinitionName: string, columnDescriptors: IColumnDescriptor[]): IViewDefinition {\n    const closeButtonId = this.rxGuidService.generate(),\n      containerId = this.rxGuidService.generate(),\n      recordEditorId = this.rxGuidService.generate(),\n      recordInstanceId = null,\n      saveButtonId = this.rxGuidService.generate(),\n      viewDefinitionId = this.rxGuidService.generate(),\n      recordEditorComponentDefinitions = this.getComponentDefinitions(columnDescriptors, recordEditorId);\n\n    return {\n      guid: viewDefinitionId,\n      layout: JSON.stringify({\n        outlets: [\n          {\n            name: RX_VIEW_DEFINITION.defaultOutletName,\n            columns: [\n              {\n                children: [recordEditorId]\n              }\n            ]\n          },\n          {\n            name: 'footer',\n            height: 60,\n            columns: [\n              {\n                children: [containerId]\n              }\n            ]\n          }\n        ]\n      }),\n      outputParams: [\n        {\n          name: 'recordInstance',\n          source: '${view.components.' + recordEditorId + '.recordInstance}'\n        }\n      ],\n      inputParams: [],\n      componentDefinitions: [\n        {\n          resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n          guid: recordEditorId,\n          type: RxViewComponentType.RecordEditor,\n          propertiesByName: {\n            recordInstanceId: `${recordInstanceId}`,\n            mode: RecordEditorMode.BulkEdit,\n            recordDefinitionName: recordDefinitionName,\n            styles: 'p-0 border-0'\n          },\n          componentDefinitions: recordEditorComponentDefinitions,\n          layout: JSON.stringify({\n            outlets: [\n              {\n                name: RX_VIEW_DEFINITION.defaultOutletName,\n                columns: [\n                  {\n                    children: recordEditorComponentDefinitions.map((componentDefinition) => componentDefinition.guid)\n                  }\n                ]\n              }\n            ]\n          })\n        },\n        {\n          resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n          guid: containerId,\n          type: RxViewComponentType.ButtonBar,\n          propertiesByName: {\n            alignment: 'right',\n            hidden: '0'\n          },\n          layout: JSON.stringify({\n            outlets: [\n              {\n                name: RX_VIEW_DEFINITION.defaultOutletName,\n                columns: [\n                  {\n                    children: [saveButtonId, closeButtonId]\n                  }\n                ]\n              }\n            ]\n          }),\n          componentDefinitions: [\n            {\n              resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n              guid: closeButtonId,\n              type: RxViewComponentType.ActionButton,\n              propertiesByName: {\n                label: this.translateService.instant('com.bmc.arsys.rx.client.common.cancel.label'),\n                style: 'secondary',\n                size: 'default'\n              },\n              componentDefinitions: [\n                {\n                  resourceType: RX_VIEW_DEFINITION.resourceTypes.viewComponent,\n                  guid: this.rxGuidService.generate(),\n                  type: RxViewComponentType.Action,\n                  propertiesByName: {\n                    viewApi: '${view.api}',\n                    name: 'rxCloseViewAction',\n                    actAsCancel: 'true'\n                  }\n                }\n              ]\n            },\n            {\n              resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n              guid: saveButtonId,\n              type: RxViewComponentType.ActionButton,\n              propertiesByName: {\n                label: this.translateService.instant('com.bmc.arsys.rx.client.common.save.label'),\n                style: 'primary',\n                disabled: 'NOT${view.components.' + recordEditorId + '.canSave}',\n                size: 'default'\n              },\n              componentDefinitions: [\n                {\n                  resourceType: RX_VIEW_DEFINITION.resourceTypes.viewComponent,\n                  guid: this.rxGuidService.generate(),\n                  type: RxViewComponentType.Action,\n                  propertiesByName: {\n                    viewApi: '${view.api}',\n                    name: 'rxCloseViewAction',\n                    actAsCancel: 'false'\n                  }\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    };\n  }\n\n  private getComponentDefinitions(\n    columnDescriptors: IColumnDescriptor[],\n    recordEditorId: string\n  ): IContainerViewComponentDefinition[] {\n    const submitterMode = this.rxSystemConfigurationService.getConfigurationSync('Submitter-Mode');\n\n    if (submitterMode === RX_ADMINISTRATION.submitterModes.locked) {\n      columnDescriptors = columnDescriptors.filter(\n        (columnDescriptor) => Number(columnDescriptor.fieldId) !== RX_RECORD_DEFINITION.coreFieldIds.createdBy\n      );\n    }\n\n    const fieldContainerComponentDefinitions = this.getFieldContainerComponentDefinitions(\n      columnDescriptors,\n      recordEditorId\n    );\n\n    return [\n      {\n        resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n        guid: this.rxGuidService.generate(),\n        type: RxViewComponentType.Container,\n        propertiesByName: {\n          rowWrap: ContainerRowWrap.Sm,\n          columnCount: '1'\n        },\n        componentDefinitions: fieldContainerComponentDefinitions,\n        layout: JSON.stringify({\n          outlets: [\n            {\n              name: RX_VIEW_DEFINITION.defaultOutletName,\n              columns: [\n                {\n                  children: fieldContainerComponentDefinitions.map((componentDefinition) => componentDefinition.guid)\n                }\n              ]\n            }\n          ]\n        })\n      }\n    ];\n  }\n\n  private getFieldContainerComponentDefinitions(\n    columnDescriptors: IColumnDescriptor[],\n    recordEditorId: string\n  ): IContainerViewComponentDefinition[] {\n    return columnDescriptors\n      .filter((columnDescriptor) => !this.rxFieldDefinitionService.isSystemField(columnDescriptor.fieldDefinition))\n      .map((columnDescriptor) => {\n        let resourceType, componentType;\n        const isAssociated = Boolean(columnDescriptor.associationDescriptor);\n\n        if (isAssociated) {\n          resourceType = RX_VIEW_DEFINITION.resourceTypes.containerViewComponent;\n          componentType = RxViewComponentType.Association;\n        } else {\n          resourceType = RX_VIEW_DEFINITION.resourceTypes.viewComponent;\n          componentType = this.rxDefaultRecordEditorInputType.getFieldTypeByFieldDefinition(\n            columnDescriptor.fieldDefinition\n          );\n        }\n\n        const componentDefinition: IViewComponentDefinition = {\n          resourceType: resourceType,\n          guid: this.rxGuidService.generate(),\n          type: componentType,\n          propertiesByName: {\n            fieldId: columnDescriptor.fieldDefinition.id,\n            recordDefinition: '${view.components.' + recordEditorId + '.recordDefinition}',\n            recordInstance: '${view.components.' + recordEditorId + '.recordInstance}',\n            label: columnDescriptor.title,\n            fieldOption: RX_RECORD_DEFINITION.fieldOptions.optional\n          }\n        };\n\n        if (isAssociated) {\n          (componentDefinition as IContainerViewComponentDefinition).componentDefinitions = [];\n\n          assign(componentDefinition.propertiesByName, {\n            associatedRecordNodeSide: columnDescriptor.associationDescriptor.nodeSide,\n            editingMode: RxAssociationEditingMode.Dropdown,\n            associationDefinitionName: columnDescriptor.associationDescriptor.associationDefinition.name,\n            recordDefinitionName: columnDescriptor.associationDescriptor.recordDefinitionName\n          });\n        }\n\n        return componentDefinition;\n      })\n      .reduce<IContainerViewComponentDefinition[]>(\n        (fieldContainerComponentDefinitions, fieldComponentDefinition, index, fieldComponentDefinitions) => {\n          if (index % 2 === 0) {\n            fieldContainerComponentDefinitions.push({\n              resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n              guid: this.rxGuidService.generate(),\n              type: RxViewComponentType.Container,\n              propertiesByName: {\n                rowWrap: ContainerRowWrap.Sm,\n                columnCount: '2'\n              },\n              componentDefinitions: fieldComponentDefinitions.slice(index, index + 2),\n              layout: JSON.stringify({\n                outlets: [\n                  {\n                    name: RX_VIEW_DEFINITION.defaultOutletName,\n                    columns: [\n                      {\n                        children: [fieldComponentDefinition.guid],\n                        span: '6'\n                      },\n                      {\n                        children:\n                          fieldComponentDefinitions.length > index + 1\n                            ? [fieldComponentDefinitions[index + 1].guid]\n                            : [],\n                        span: '6'\n                      }\n                    ]\n                  }\n                ]\n              })\n            });\n          }\n          return fieldContainerComponentDefinitions;\n        },\n        []\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RxDefinitionNameService, RxLogService } from '@helix/platform/shared/api';\nimport { RxError } from '@helix/platform/utils';\nimport { IRxRecordGridApi, IViewActionService, RxViewActionUtilsService } from '@helix/platform/view/api';\nimport { RxRecordGridUtilsService } from '@helix/platform/view/components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { isEmpty, isFunction, isNil } from 'lodash';\nimport { EMPTY, from, Observable, throwError } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { RX_OPEN_VIEW } from '../../open-view/open-view-action.constant';\nimport { RxOpenViewActionService } from '../../open-view/open-view-action.service';\nimport { IEditRecordsViewActionParams } from '../interfaces/edit-records-view-action-params.interface';\nimport { RxEditRecordsDataService } from './edit-records-data.service';\nimport { RxEditRecordsViewBuilder } from './edit-records-view-builder.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxEditRecordsViewActionService implements IViewActionService<IEditRecordsViewActionParams, never> {\n  constructor(\n    private rxEditRecordsViewBuilder: RxEditRecordsViewBuilder,\n    private rxEditRecordsDataService: RxEditRecordsDataService,\n    private rxLogService: RxLogService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private translateService: TranslateService,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private openViewAction: RxOpenViewActionService,\n    private rxViewActionUtilsService: RxViewActionUtilsService\n  ) {}\n\n  execute(params: IEditRecordsViewActionParams): Observable<never> {\n    let { recordDefinitionName } = params;\n\n    if (isNil(params.records)) {\n      return throwError(new RxError('rxEditRecordsAction: no records to edit.'));\n    }\n\n    if (isEmpty(recordDefinitionName) && isFunction((<IRxRecordGridApi>params.records).getRecordDefinitionName)) {\n      recordDefinitionName = (<IRxRecordGridApi>params.records).getRecordDefinitionName();\n    }\n\n    if (recordDefinitionName) {\n      const recordIds = this.rxViewActionUtilsService.extractRecordIds(params.records);\n\n      if (recordIds.length) {\n        return from(this.rxRecordGridUtilsService.getColumnDescriptors(recordDefinitionName, params.records)).pipe(\n          switchMap((columnDescriptors) => {\n            const localizedViewTitle = this.translateService.instant(\n              'com.bmc.arsys.rx.client.view-actions.edit-records.view.title',\n              { recordDefinitionName: this.rxDefinitionNameService.getDisplayName(recordDefinitionName) }\n            );\n\n            const localizedViewNotification = this.translateService.instant(\n              'com.bmc.arsys.rx.client.view-actions.edit-records.view.notification'\n            );\n\n            return this.openViewAction\n              .execute({\n                presentation: {\n                  modalSize: RX_OPEN_VIEW.modalSize.Large,\n                  title: localizedViewTitle,\n                  notification: localizedViewNotification,\n                  type: RX_OPEN_VIEW.type.DockedRightModal\n                },\n                viewDefinitionName: this.rxEditRecordsViewBuilder.getViewDefinition(\n                  recordDefinitionName,\n                  columnDescriptors\n                ),\n                viewParams: null\n              })\n              .pipe(\n                switchMap((viewOutput) =>\n                  viewOutput && viewOutput.recordInstance\n                    ? this.rxEditRecordsDataService\n                        .runAction(recordIds, viewOutput.recordInstance)\n                        .pipe(\n                          switchMap(() =>\n                            isFunction((<IRxRecordGridApi>params.records).refresh)\n                              ? (<IRxRecordGridApi>params.records).refresh()\n                              : EMPTY\n                          )\n                        )\n                    : EMPTY\n                )\n              );\n          })\n        );\n      } else {\n        this.rxLogService.debug('rxEditRecordsAction: no records to edit.');\n      }\n    } else {\n      this.rxLogService.error('rxEditRecordsAction: Record Definition Name is not defined.');\n    }\n\n    return EMPTY;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxViewActionRegistryService, ViewComponentPropertyType } from '@helix/platform/view/api';\nimport { RxEditRecordsViewActionService } from './services/edit-records-view-action.service';\nimport { ResultModalComponent } from './result-modal/result-modal.component';\nimport { CommonModule } from '@angular/common';\nimport { AdaptIconModule, AdaptRxTextareaModule } from '@bmc-ux/adapt-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { FormsModule } from '@angular/forms';\nimport { RX_APPLICATION, Tooltip } from '@helix/platform/shared/api';\nimport {\n  ExpressionFormControlComponent,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType\n} from '@helix/platform/shared/components';\n\n@NgModule({\n  imports: [CommonModule, AdaptIconModule, TranslateModule, FormsModule, AdaptRxTextareaModule],\n  declarations: [ResultModalComponent],\n  entryComponents: [ResultModalComponent]\n})\nexport class EditRecordsViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxEditRecordsActionService: RxEditRecordsViewActionService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxEditRecordsAction',\n      label: 'Edit records',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxEditRecordsActionService,\n      parameters: [\n        {\n          name: 'records',\n          label: 'Records',\n          isRequired: true,\n          tooltip: new Tooltip(\n            `Build an expression that evaluates to one of the following:<br>\n            1) Record Grid;<br>\n            2) A collection of Record Instances, or<br>\n            3) A collection of Record Instance IDs. <br>For options 2 and 3, select a Record Definition in the field below.`\n          ),\n          enableExpressionEvaluation: true,\n          editor: ExpressionFormControlComponent\n        },\n        {\n          name: 'recordDefinitionName',\n          label: 'Record definition',\n          type: ViewComponentPropertyType.String,\n          editor: RxDefinitionPickerComponent,\n          editorOptions: {\n            definitionType: RxDefinitionPickerType.StandardDataRecord\n          },\n          defaultValue: null\n        }\n      ]\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IViewActionDesignManager, RxViewActionRegistryService } from '@helix/platform/view/api';\nimport { ILaunchProcessViewDesignProperties } from './launch-process-view-action.types';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { IViewComponentDesignValidationIssue, RxViewExpressionValidatorService } from '@helix/platform/view/designer';\nimport { RxProcessDefinitionService } from '@helix/platform/process/api';\nimport { defaultIfEmpty, map, switchMap } from 'rxjs/operators';\nimport { flatten, forEach, isEmpty } from 'lodash';\nimport { IPlainObject } from '@helix/platform/shared/api';\n\n@Injectable()\nexport class RxLaunchProcessViewActionDesignManagerService\n  implements IViewActionDesignManager<ILaunchProcessViewDesignProperties>\n{\n  constructor(\n    private rxProcessDefinitionService: RxProcessDefinitionService,\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxViewExpressionValidatorService: RxViewExpressionValidatorService\n  ) {}\n\n  validate(\n    properties: ILaunchProcessViewDesignProperties,\n    propertyName: string\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    if (properties.processDefinitionName) {\n      return this.rxProcessDefinitionService.get(properties.processDefinitionName).pipe(\n        switchMap((processDefinition) =>\n          combineLatest([\n            this.validateInputParams(properties, propertyName, processDefinition.inputParams),\n            this.validateInputParamExpressions(properties, propertyName, processDefinition.inputParams)\n          ])\n        ),\n        map(flatten)\n      );\n    } else {\n      return of([]);\n    }\n  }\n\n  private validateInputParamExpressions(\n    actionParams: ILaunchProcessViewDesignProperties,\n    issuePropertyName: string,\n    processInputParams: IPlainObject[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    const actionDescriptor = this.rxViewActionRegistryService.get(actionParams.name);\n\n    const issues: Observable<IViewComponentDesignValidationIssue[]>[] = processInputParams\n      .filter((processInputParam) => actionParams[`actionProcessInputParams.${processInputParam.name}`])\n      .map((processInputParam) =>\n        this.rxViewExpressionValidatorService\n          .validate(\n            actionParams[`actionProcessInputParams.${processInputParam.name}`],\n            issuePropertyName,\n            actionDescriptor.label\n          )\n          .pipe(\n            map((issues) =>\n              issues.map((issue) => ({\n                ...issue,\n                description: `${actionDescriptor.label} action: ${issue.description}`\n              }))\n            )\n          )\n      );\n\n    return combineLatest(issues).pipe(defaultIfEmpty([]), map(flatten));\n  }\n\n  private validateInputParams(\n    actionParams: ILaunchProcessViewDesignProperties,\n    issuePropertyName: string,\n    processInputParams: IPlainObject[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    const actionDescriptor = this.rxViewActionRegistryService.get(actionParams.name);\n    const validationIssues = [];\n\n    forEach(processInputParams, (processInputParam) => {\n      const actionParamName = `actionProcessInputParams.${processInputParam.name}`;\n\n      if (processInputParam.fieldOption === 'REQUIRED' && isEmpty(actionParams[actionParamName])) {\n        validationIssues.push({\n          type: 'error',\n          description: `${actionDescriptor.label}: ${processInputParam.name} cannot be blank.`,\n          propertyName: issuePropertyName\n        });\n      }\n    });\n\n    return of(validationIssues);\n  }\n}\n","import { RxViewDesignerActionModel } from '@helix/platform/view/designer';\nimport { Injector } from '@angular/core';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map, pluck, skip, switchMap } from 'rxjs/operators';\nimport { map as _map, isEqual } from 'lodash';\n\nimport { Tooltip } from '@helix/platform/shared/api';\nimport {\n  ExpressionFormControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionFormControlOptions,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SwitchFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport {\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  IViewActionOutputDataDictionary,\n  IViewActionOutputDataDictionaryBranch,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport {\n  IProcessDefinition,\n  IRecordInstanceFieldDefinitionLight,\n  RX_PROCESS_DEFINITION,\n  RxProcessDefinitionCacheService\n} from '@helix/platform/process/api';\n\nimport { ILaunchProcessViewDesignProperties } from './launch-process-view-action.types';\n\nexport class RxLaunchProcessViewActionDesignModel extends RxViewDesignerActionModel {\n  private rxProcessDefinitionCacheService = this.injector.get<RxProcessDefinitionCacheService>(\n    RxProcessDefinitionCacheService\n  );\n\n  private rxRecordDefinitionCacheService =\n    this.injector.get<RxRecordDefinitionCacheService>(RxRecordDefinitionCacheService);\n\n  defaultProps: ViewActionDesignEditableProperties<ILaunchProcessViewDesignProperties> = {\n    processDefinitionName: null,\n    waitForProcessCompletion: false\n  };\n\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<ILaunchProcessViewDesignProperties>\n  ): ViewActionDesignEditableProperties<ILaunchProcessViewDesignProperties> {\n    return {\n      processDefinitionName: null,\n      waitForProcessCompletion: false,\n      ...initialProperties\n    };\n  }\n\n  constructor(\n    protected injector: Injector,\n    readonly sandbox: IViewActionDesignSandbox<ILaunchProcessViewDesignProperties>\n  ) {\n    super(injector, sandbox);\n\n    const processDefinitionName$ = this.sandbox.actionProperties$.pipe(\n      pluck('processDefinitionName'),\n      distinctUntilChanged()\n    );\n\n    processDefinitionName$.pipe(skip(1)).subscribe((processDefinitionName) => {\n      this.sandbox.setActionProperties({\n        processDefinitionName,\n        waitForProcessCompletion: false\n      });\n    });\n\n    processDefinitionName$\n      .pipe(\n        switchMap<string, Observable<IProcessDefinition>>((processDefinitionName) =>\n          processDefinitionName\n            ? this.rxProcessDefinitionCacheService.getProcessDefinition(processDefinitionName)\n            : of(null)\n        )\n      )\n      .subscribe((processDefinition) =>\n        this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig(processDefinition))\n      );\n\n    this.sandbox.actionProperties$\n      .pipe(\n        map((props) => [props.processDefinitionName, props.waitForProcessCompletion]),\n        distinctUntilChanged(isEqual),\n        switchMap(([processDefinitionName, waitForProcessCompletion]) =>\n          this.getActionOutputDataDictionary(processDefinitionName, waitForProcessCompletion)\n        )\n      )\n      .subscribe((dataDictionary) => this.sandbox.setActionOutputDataDictionary(dataDictionary));\n  }\n\n  private getActionEditorConfig(processDefinition: IProcessDefinition): IViewActionDesignPropertyEditorConfig {\n    return [\n      {\n        name: 'processDefinitionName',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label: 'Process to start',\n          definitionType: RxDefinitionPickerType.Process,\n          required: true\n        } as IDefinitionPickerComponentOptions\n      },\n      {\n        name: 'waitForProcessCompletion',\n        component: SwitchFormControlComponent,\n        isDisabled: processDefinition ? !processDefinition.synchronous : true,\n        options: {\n          label: 'Wait for process completion',\n          tooltip: new Tooltip(\n            'If a process runs synchronously, it is possible to get output data from the process once the process completes. Enable Wait for completion in order to define an output map for the selected process.'\n          )\n        } as IDefinitionPickerComponentOptions\n      },\n      ...(processDefinition\n        ? _map(processDefinition.inputParams, (param) => ({\n            name: `actionProcessInputParams.${param.name}`,\n            component: ExpressionFormControlComponent,\n            options: {\n              label: param.name,\n              dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n              operators: this.expressionConfigurator.getOperators(),\n              isRequired: param.fieldOption === 'REQUIRED'\n            } as IExpressionFormControlOptions\n          }))\n        : [])\n    ];\n  }\n\n  private getActionOutputDataDictionary(\n    processDefinitionName: string,\n    waitForProcessCompletion: boolean\n  ): Observable<IViewActionOutputDataDictionary> {\n    return waitForProcessCompletion\n      ? this.rxProcessDefinitionCacheService.getOutputParams(processDefinitionName).pipe(\n          switchMap((outputParams) =>\n            forkJoin(\n              outputParams.map((param): Observable<IViewActionOutputDataDictionaryBranch> => {\n                let dataDictionary;\n\n                if (param.fieldTypeName === RX_PROCESS_DEFINITION.processVariableTypes.record) {\n                  const recordInstanceParam = param as IRecordInstanceFieldDefinitionLight;\n\n                  dataDictionary = this.rxRecordDefinitionCacheService\n                    .getRecordDefinition(recordInstanceParam.recordDefinitionName)\n                    .pipe(\n                      map((recordDefinition) => ({\n                        label: recordInstanceParam.name,\n                        expression: this.getOutputExpressionForPropertyPath(recordInstanceParam.name),\n                        children: _map(recordDefinition.fieldDefinitions, (fieldDefinition) => ({\n                          label: fieldDefinition.name,\n                          expression: this.getOutputExpressionForPropertyPath(\n                            `${recordInstanceParam.name}.${fieldDefinition.id}`\n                          )\n                        }))\n                      }))\n                    );\n                } else {\n                  dataDictionary = of({\n                    label: param.name,\n                    expression: this.getOutputExpressionForPropertyPath(param.name)\n                  });\n                }\n\n                return dataDictionary;\n              })\n            )\n          )\n        )\n      : of([]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { last, forEach, isEmpty, reduce } from 'lodash';\nimport { Observable, of, forkJoin } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\nimport {\n  RxProcessDefinitionCacheService,\n  RxProcessInstanceService,\n  RxProcessInstanceCommandsService,\n  RX_PROCESS_DEFINITION\n} from '@helix/platform/process/api';\nimport { RxRecordDefinitionCacheService, RxRecordInstanceService } from '@helix/platform/record/api';\nimport { RxLogService, IPlainObject } from '@helix/platform/shared/api';\nimport { IViewActionService } from '@helix/platform/view/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { ILaunchProcessViewActionParams } from './launch-process-view-action.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxLaunchProcessViewActionService\n  implements IViewActionService<ILaunchProcessViewActionParams, IPlainObject> {\n  constructor(\n    private rxJsonParserService: RxJsonParserService,\n    private rxLogService: RxLogService,\n    private rxProcessDefinitionCacheService: RxProcessDefinitionCacheService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxProcessInstanceCommandsService: RxProcessInstanceCommandsService,\n    private rxProcessInstanceService: RxProcessInstanceService,\n    private rxRecordInstanceService: RxRecordInstanceService\n  ) {}\n\n  execute(params: ILaunchProcessViewActionParams): Observable<IPlainObject> {\n    let processId: string;\n    let processDefinitionOutputParams: IPlainObject;\n\n    return this.rxProcessInstanceCommandsService\n      .start(params.processDefinitionName, params.actionProcessInputParams)\n      .pipe(\n        switchMap((res) => {\n          if (params.waitForProcessCompletion) {\n            const location = res.headers.get('location');\n\n            processId = location ? last(location.split('/')) : null;\n\n            return this.rxProcessDefinitionCacheService.getOutputParams(params.processDefinitionName);\n          } else {\n            return of(null);\n          }\n        }),\n        switchMap((plainOutputParams) => {\n          if (!isEmpty(plainOutputParams)) {\n            processDefinitionOutputParams = plainOutputParams.reduce((outputParams, value) => {\n              outputParams[value.name] = value;\n\n              return outputParams;\n            }, {});\n\n            return this.rxProcessInstanceService.get(\n              params.processDefinitionName,\n              `${processId}/processOutputVariables`\n            );\n          } else {\n            return of(null);\n          }\n        }),\n        switchMap((processOutputVariables: IPlainObject) => {\n          const outputResult: IPlainObject = {};\n\n          forEach(processOutputVariables, (variableValue, variableName) => {\n            if (\n              processDefinitionOutputParams[variableName].fieldTypeName ===\n              RX_PROCESS_DEFINITION.processVariableTypes.record\n            ) {\n              const recordInstanceOutputData = this.rxJsonParserService.tryParseJson(variableValue);\n\n              if (\n                recordInstanceOutputData &&\n                recordInstanceOutputData.recordDefinitionName &&\n                recordInstanceOutputData.id\n              ) {\n                outputResult[variableName] = this.rxRecordInstanceService\n                  .get(recordInstanceOutputData.recordDefinitionName, recordInstanceOutputData.id)\n                  .pipe(\n                    map((recordInstance) =>\n                      reduce(\n                        recordInstance.fieldInstances,\n                        (result, fieldInstance) => {\n                          result[fieldInstance.id] = fieldInstance.value;\n\n                          return result;\n                        },\n                        {}\n                      )\n                    )\n                  );\n              } else {\n                this.rxLogService.warning(\n                  'rxLaunchProcessAction: unknown format for record instance as output data for process'\n                );\n              }\n            } else {\n              outputResult[variableName] = of(variableValue);\n            }\n          });\n\n          return forkJoin(outputResult);\n        })\n      );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxViewActionRegistryService, ViewComponentPropertyType } from '@helix/platform/view/api';\nimport { RxLaunchProcessViewActionDesignManagerService } from './launch-process-view-action-design-manager.service';\nimport { RxLaunchProcessViewActionDesignModel } from './launch-process-view-action-design-model.class';\nimport { RxLaunchProcessViewActionService } from './launch-process-view-action.service';\n\n@NgModule({\n  providers: [RxLaunchProcessViewActionDesignManagerService]\n})\nexport class LaunchProcessViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxLaunchProcessViewActionService: RxLaunchProcessViewActionService,\n    private rxLaunchProcessViewActionDesignManagerService: RxLaunchProcessViewActionDesignManagerService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxLaunchProcessAction',\n      label: 'Launch process',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxLaunchProcessViewActionService,\n      designManager: this.rxLaunchProcessViewActionDesignManagerService,\n      designModel: RxLaunchProcessViewActionDesignModel,\n      parameters: [\n        {\n          name: 'processDefinitionName',\n          label: 'Process to start',\n          type: ViewComponentPropertyType.String,\n          isRequired: true\n        },\n        {\n          name: 'waitForProcessCompletion',\n          type: ViewComponentPropertyType.Boolean,\n          designType: ViewComponentPropertyType.Boolean\n        },\n        {\n          name: 'actionProcessInputParams',\n          label: 'Input map',\n          enableExpressionEvaluation: true\n        }\n      ]\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EMPTY, Observable, throwError } from 'rxjs';\nimport { IViewActionService, RX_LAUNCH_BEHAVIOR } from '@helix/platform/view/api';\nimport { ILaunchUrlViewActionParams } from './launch-url-view-action-params.interface';\nimport { RxError } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxLaunchUrlViewActionService implements IViewActionService<ILaunchUrlViewActionParams, never> {\n  execute(params: ILaunchUrlViewActionParams): Observable<never> {\n    if (params.url) {\n      window.open(params.url, RX_LAUNCH_BEHAVIOR[params.launchBehavior].target);\n\n      return EMPTY;\n    } else {\n      return throwError(new RxError('rxLaunchUrlAction: URL is not specified.'));\n    }\n  }\n}\n","import { RxViewDesignerActionModel } from '@helix/platform/view/designer';\nimport { Injector } from '@angular/core';\n\nimport {\n  ExpressionFormControlComponent,\n  IExpressionFormControlOptions,\n  ISelectFormControlOptions,\n  SelectFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  RX_LAUNCH_BEHAVIOR,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport { ILaunchUrlViewActionParams } from './launch-url-view-action-params.interface';\nimport { map } from 'lodash';\n\nexport class RxLaunchUrlViewActionDesignModel extends RxViewDesignerActionModel {\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<ILaunchUrlViewActionParams>\n  ): ViewActionDesignEditableProperties<ILaunchUrlViewActionParams> {\n    return {\n      url: null,\n      launchBehavior: RX_LAUNCH_BEHAVIOR.newWindow.value,\n      ...initialProperties\n    };\n  }\n\n  constructor(protected injector: Injector, readonly sandbox: IViewActionDesignSandbox<ILaunchUrlViewActionParams>) {\n    super(injector, sandbox);\n    this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig());\n  }\n\n  private getActionEditorConfig(): IViewActionDesignPropertyEditorConfig {\n    return [\n      {\n        name: 'url',\n        component: ExpressionFormControlComponent,\n        options: {\n          label: 'URL',\n          isRequired: true,\n          dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n          operators: this.expressionConfigurator.getOperators()\n        } as IExpressionFormControlOptions\n      },\n      {\n        name: 'launchBehavior',\n        component: SelectFormControlComponent,\n        options: {\n          label: 'Launch behavior',\n          options: map(RX_LAUNCH_BEHAVIOR, (value) => ({\n            name: value.content,\n            id: value.value\n          })),\n          sortAlphabetically: false\n        } as ISelectFormControlOptions\n      }\n    ];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport { IViewComponentDefinition, IViewDefinition, RX_LAUNCH_BEHAVIOR } from '@helix/platform/view/api';\nimport { get } from 'lodash';\nimport { ILaunchUrlViewActionParams } from './launch-url-view-action-params.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxLaunchUrlViewActionDefinitionAdapterService\n  implements IDefinitionAdapter<IViewComponentDefinition, IViewDefinition>\n{\n  adaptDefinition(viewComponentDefinition) {\n    const propertiesByName: ILaunchUrlViewActionParams = get(viewComponentDefinition, 'propertiesByName', {});\n\n    propertiesByName.launchBehavior = propertiesByName.launchBehavior ?? RX_LAUNCH_BEHAVIOR.newWindow.value;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxViewActionDefinitionAdapterRegistryService, RxViewActionRegistryService } from '@helix/platform/view/api';\nimport { RxLaunchUrlViewActionService } from './launch-url-view-action.service';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxLaunchUrlViewActionDesignModel } from './launch-url-view-action-design-model.class';\nimport { RxLaunchUrlViewActionDefinitionAdapterService } from './launch-url-view-action-definition-adapter.service';\n\n@NgModule()\nexport class LaunchUrlViewActionModule {\n  constructor(\n    private rxViewActionDefinitionAdapterRegistryService: RxViewActionDefinitionAdapterRegistryService,\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxLaunchUrlViewActionService: RxLaunchUrlViewActionService,\n    private rxLaunchUrlActionDefinitionAdapterService: RxLaunchUrlViewActionDefinitionAdapterService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxLaunchUrlAction',\n      label: 'Launch URL',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxLaunchUrlViewActionService,\n      designModel: RxLaunchUrlViewActionDesignModel,\n      parameters: [\n        {\n          name: 'url',\n          label: 'URL',\n          enableExpressionEvaluation: true,\n          isRequired: true\n        },\n        {\n          name: 'launchBehavior',\n          label: 'Launch behavior'\n        }\n      ]\n    });\n\n    rxViewActionDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      'rxLaunchUrlAction',\n      this.rxLaunchUrlActionDefinitionAdapterService\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IViewActionService } from '@helix/platform/view/api';\nimport { isFunction } from 'lodash';\nimport { Observable, throwError } from 'rxjs';\nimport { IRefreshViewActionParams } from './refresh-view-action-params.interface';\nimport { RxError } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRefreshViewActionService implements IViewActionService<IRefreshViewActionParams, never> {\n  execute(params: IRefreshViewActionParams): Observable<never> {\n    if (params.component) {\n      return isFunction(params.component.refresh)\n        ? params.component.refresh()\n        : throwError(new RxError('rxRefreshAction: target component does not support refresh API.'));\n    } else {\n      return throwError(new RxError('rxRefreshAction: component is not specified.'));\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxViewActionRegistryService } from '@helix/platform/view/api';\nimport { RxRefreshViewActionService } from './refresh-view-action.service';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { ExpressionFormControlComponent } from '@helix/platform/shared/components';\n\n@NgModule()\nexport class RefreshViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxRefreshViewActionService: RxRefreshViewActionService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxRefreshAction',\n      label: 'Refresh',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxRefreshViewActionService,\n      parameters: [\n        {\n          name: 'component',\n          label: 'View/Component',\n          enableExpressionEvaluation: true,\n          isRequired: true,\n          editor: ExpressionFormControlComponent\n        }\n      ]\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IViewActionService } from '@helix/platform/view/api';\nimport { isFunction } from 'lodash';\nimport { concat, EMPTY, Observable, throwError } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ISaveViewActionParams } from './save-view-action.interfaces';\nimport { RxError } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxSaveViewActionService implements IViewActionService<ISaveViewActionParams, never> {\n  execute(params: ISaveViewActionParams): Observable<never> {\n    if (isFunction(params.targetApi.save)) {\n      const closeAfterSave$ = isFunction(params.viewApi.close)\n        ? EMPTY.pipe(\n            tap({\n              complete() {\n                params.viewApi.close();\n              }\n            })\n          )\n        : throwError(new RxError('rxSaveAction: target view does not support close API.'));\n\n      return concat(params.targetApi.save(params.closeAfterSave), params.closeAfterSave ? closeAfterSave$ : EMPTY);\n    } else {\n      return throwError(new RxError('rxSaveAction: target view/component does not support save API.'));\n    }\n  }\n}\n","import { RxSaveViewActionService } from './save-view-action.service';\nimport { NgModule } from '@angular/core';\nimport { RxViewActionRegistryService, ViewComponentPropertyType } from '@helix/platform/view/api';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { ExpressionFormControlComponent, SwitchFormControlComponent } from '@helix/platform/shared/components';\n\n@NgModule()\nexport class SaveViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxSaveViewActionService: RxSaveViewActionService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxSaveAction',\n      label: 'Save',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxSaveViewActionService,\n      parameters: [\n        {\n          name: 'targetApi',\n          label: 'View/Component',\n          editor: ExpressionFormControlComponent,\n          isRequired: true,\n          enableExpressionEvaluation: true\n        },\n        {\n          name: 'closeAfterSave',\n          label: 'Close after save',\n          editor: SwitchFormControlComponent,\n          type: ViewComponentPropertyType.Boolean,\n          designType: ViewComponentPropertyType.Boolean\n        },\n        {\n          name: 'viewApi',\n          enableExpressionEvaluation: true,\n          defaultValue: '${view.api}'\n        }\n      ]\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IViewActionService } from '@helix/platform/view/api';\nimport { isFunction } from 'lodash';\nimport { EMPTY, isObservable, Observable, throwError } from 'rxjs';\nimport { ISetPropertyViewActionParams } from './set-property-view-action.interfaces';\nimport { RxError } from '@helix/platform/utils';\n\n@Injectable()\nexport class RxSetPropertyViewActionService implements IViewActionService<ISetPropertyViewActionParams, never> {\n  execute(params: ISetPropertyViewActionParams): Observable<never> {\n    let executionResult: Observable<never> | void = throwError(\n      new RxError('rxSetPropertyAction: component is not specified.')\n    );\n\n    if (params.componentApi && isFunction(params.componentApi.setProperty) && params.propertyPath) {\n      // Extract <Path> from  ${view.components.<ID>.<Path>}\n      const matches = params.propertyPath.match(/^\\$\\{view\\.components\\.[0-9a-z-]+\\.(.+)}$/);\n\n      if (matches && matches[1]) {\n        executionResult = params.componentApi.setProperty(matches[1], params.propertyValue);\n      }\n    }\n\n    return isObservable(executionResult) ? executionResult : EMPTY;\n  }\n}\n","import { Injector } from '@angular/core';\nimport { RxViewActionExpressionConfigurator, RxViewDataDictionaryService } from '@helix/platform/view/designer';\nimport { ExpressionOperatorGroup } from '@helix/platform/shared/api';\n\nexport class RxSetPropertyViewActionExpressionConfigurator extends RxViewActionExpressionConfigurator {\n  constructor(injector: Injector, actionType: string, actionGuid: string) {\n    super(injector, actionType, actionGuid);\n\n    this.configureForProperty({\n      propertyPath: 'propertyPath',\n      dataDictionary$:\n        injector.get<RxViewDataDictionaryService>(RxViewDataDictionaryService).settablePropertiesDataDictionary$,\n      operators: this.getOperatorRowsByGroup(ExpressionOperatorGroup.MathClient)\n    });\n  }\n}\n","import { Injector } from '@angular/core';\nimport { RxViewDesignerActionModel } from '@helix/platform/view/designer';\nimport { ExpressionFormControlComponent, IExpressionFormControlOptions } from '@helix/platform/shared/components';\nimport {\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport { distinctUntilChanged, pluck, take } from 'rxjs/operators';\nimport { RxSetPropertyViewActionExpressionConfigurator } from './set-property-view-action-expression-configurator.class';\nimport { ISetPropertyViewActionDesignProperties } from './set-property-view-action.interfaces';\n\nexport class RxSetPropertyViewActionDesignModel extends RxViewDesignerActionModel {\n  protected expressionConfigurator = new RxSetPropertyViewActionExpressionConfigurator(\n    this.injector,\n    this.sandbox.descriptor.name,\n    this.guid\n  );\n\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<ISetPropertyViewActionDesignProperties>\n  ): ViewActionDesignEditableProperties<ISetPropertyViewActionDesignProperties> {\n    return {\n      componentApi: null,\n      propertyPath: null,\n      propertyValue: null,\n      ...initialProperties\n    };\n  }\n\n  constructor(\n    protected injector: Injector,\n    readonly sandbox: IViewActionDesignSandbox<ISetPropertyViewActionDesignProperties>\n  ) {\n    super(injector, sandbox);\n\n    this.sandbox.actionProperties$\n      .pipe(take(1))\n      .subscribe(() => this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig()));\n\n    this.sandbox.actionProperties$.pipe(pluck('propertyPath'), distinctUntilChanged()).subscribe((propertyPath) => {\n      let componentApi = null;\n\n      if (propertyPath && propertyPath.length) {\n        // Extract <ID> from ${view.components.<ID>.<Path>}\n        const matches = propertyPath.match(/\\${view\\.components\\.([0-9a-z-]+)\\..+}/);\n\n        if (matches && matches[1]) {\n          componentApi = `\\${view.components.${matches[1]}.api}`;\n        }\n      }\n\n      this.sandbox.updateActionProperties({\n        componentApi\n      });\n    });\n  }\n\n  private getActionEditorConfig(): IViewActionDesignPropertyEditorConfig {\n    return [\n      {\n        name: 'propertyPath',\n        component: ExpressionFormControlComponent,\n        options: {\n          label: 'Property path',\n          dataDictionary$: this.expressionConfigurator.getDataDictionary('propertyPath'),\n          operators: this.expressionConfigurator.getOperators('propertyPath'),\n          isRequired: true\n        } as IExpressionFormControlOptions\n      },\n      {\n        name: 'propertyValue',\n        component: ExpressionFormControlComponent,\n        options: {\n          label: 'Property value',\n          dataDictionary$: this.expressionConfigurator.getDataDictionary('propertyValue'),\n          operators: this.expressionConfigurator.getOperators('propertyValue')\n        } as IExpressionFormControlOptions\n      }\n    ];\n  }\n}\n","import { IViewActionDesignManager } from '@helix/platform/view/api';\nimport { IViewComponentDesignValidationIssue } from '@helix/platform/view/designer';\nimport { Observable, of } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { ISetPropertyViewActionDesignProperties } from './set-property-view-action.interfaces';\n\n@Injectable()\nexport class RxSetPropertyViewActionDesignManagerService\n  implements IViewActionDesignManager<ISetPropertyViewActionDesignProperties> {\n  validate(\n    actionProperties: ISetPropertyViewActionDesignProperties,\n    propertyName: string\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    return of(\n      actionProperties.propertyPath && !/\\${view\\.components\\.([0-9a-z-]+)\\..+}/.test(actionProperties.propertyPath)\n        ? [\n            {\n              type: 'error',\n              description: 'Set property action: Property path is invalid.',\n              propertyName\n            }\n          ]\n        : []\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxViewActionRegistryService } from '@helix/platform/view/api';\nimport { RxSetPropertyViewActionService } from './set-property-view-action.service';\nimport { RxSetPropertyViewActionDesignModel } from './set-property-view-action-design-model.class';\nimport { RxSetPropertyViewActionDesignManagerService } from './set-property-view-action-design-manager.service';\n\n@NgModule({\n  providers: [RxSetPropertyViewActionService, RxSetPropertyViewActionDesignManagerService]\n})\nexport class SetPropertyViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxSetPropertyViewActionService: RxSetPropertyViewActionService,\n    private rxSetPropertyViewActionDesignManagerService: RxSetPropertyViewActionDesignManagerService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxSetPropertyAction',\n      label: 'Set property',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxSetPropertyViewActionService,\n      designModel: RxSetPropertyViewActionDesignModel,\n      designManager: rxSetPropertyViewActionDesignManagerService,\n      parameters: [\n        {\n          name: 'componentApi',\n          label: 'Component API',\n          enableExpressionEvaluation: true\n        },\n        {\n          name: 'propertyPath',\n          label: 'Property path',\n          isRequired: true\n        },\n        {\n          name: 'propertyValue',\n          enableExpressionEvaluation: true\n        }\n      ]\n    });\n  }\n}\n","import { Component, HostListener } from '@angular/core';\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\nimport { ActiveModalRef, DismissReasons } from '@bmc-ux/adapt-angular';\nimport { RxProcessDefinitionCacheService } from '@helix/platform/process/api';\nimport { RX_DESIGNER, RxApplicationLoaderService, RxBundleCacheService } from '@helix/platform/shared/api';\nimport { RxUtilityModalsService } from '@helix/platform/ui-kit';\nimport { IWindowMessage, RxJsonParserService } from '@helix/platform/utils';\n\n@Component({\n  selector: 'rx-process-designer-frame',\n  templateUrl: './process-designer-frame.component.html',\n  styleUrls: ['./process-designer-frame.component.scss']\n})\nexport class ProcessDesignerFrameComponent {\n  context: ActiveModalRef;\n  iframeSrc: SafeResourceUrl;\n  isProcessDesignerLoadingInProgress = true;\n  isDefinitionDirty = false;\n\n  @HostListener('window:message', ['$event'])\n  onMessage(event: MessageEvent): void {\n    if (event.data) {\n      const message = this.rxJsonParserService.tryParseJson<IWindowMessage>(event.data);\n\n      if (message) {\n        switch (message.messageType) {\n          case RX_DESIGNER.messageTypes.designerLoaded: {\n            this.isProcessDesignerLoadingInProgress = false;\n\n            break;\n          }\n\n          case RX_DESIGNER.messageTypes.afterSave: {\n            this.isDefinitionDirty = false;\n\n            break;\n          }\n\n          case RX_DESIGNER.messageTypes.definitionStatusChanged: {\n            this.isDefinitionDirty = message.payload.isDirty;\n\n            break;\n          }\n\n          case RX_DESIGNER.messageTypes.closeDesigner: {\n            if (message.payload.processDefinitionName) {\n              if (this.isDefinitionDirty) {\n                this.rxUtilityModalsService.confirmUnsavedChanges().then((isConfirmed) => {\n                  if (isConfirmed) {\n                    this.closeProcessDesigner(message.payload.processDefinitionName);\n                  }\n                });\n              } else {\n                this.closeProcessDesigner(message.payload.processDefinitionName);\n              }\n            } else {\n              if (this.isDefinitionDirty) {\n                this.rxUtilityModalsService.confirmUnsavedChanges().then((isConfirmed) => {\n                  if (isConfirmed) {\n                    this.context.dismiss(DismissReasons.CLOSE_BTN);\n                  }\n                });\n              } else {\n                this.context.dismiss(DismissReasons.CLOSE_BTN);\n              }\n            }\n\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  constructor(\n    private rxApplicationLoaderService: RxApplicationLoaderService,\n    private rxBundleCacheService: RxBundleCacheService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxProcessDefinitionCacheService: RxProcessDefinitionCacheService,\n    private domSanitizer: DomSanitizer,\n    private activeModalRef: ActiveModalRef,\n    private rxUtilityModalsService: RxUtilityModalsService\n  ) {\n    this.context = activeModalRef;\n\n    const data = this.context.getData();\n\n    localStorage.setItem('ProcessDesignerPaletteElements', data.paletteElements);\n\n    this.iframeSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(\n      `/com.bmc.arsys.rx.innovationstudio/index.html#/app/bundle/${this.rxBundleCacheService.bundleId}/iprocess/${\n        data.processDefinitionName ? data.processDefinitionName : ''\n      }`\n    );\n  }\n\n  private closeProcessDesigner(processDefinitionName: string): void {\n    this.rxProcessDefinitionCacheService.clearCache([processDefinitionName]);\n    this.context.close({ processDefinitionName });\n  }\n}\n","<div id=\"rx-application-loader-container\" class=\"position-absolute w-100\" *ngIf=\"isProcessDesignerLoadingInProgress\">\n  <div class=\"rx-application-loader\"></div>\n</div>\n\n<iframe [src]=\"iframeSrc\" class=\"h-100\"></iframe>\n","import { Injectable } from '@angular/core';\nimport { AdaptModalService, ModalDeferred } from '@bmc-ux/adapt-angular';\nimport { RxProcessDefinitionCacheService } from '@helix/platform/process/api';\nimport { IViewActionService, OpenViewActionModalSize } from '@helix/platform/view/api';\nimport { defer, from, Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { ILaunchProcessDesignerActionParams } from './launch-process-designer-action.types';\nimport { ProcessDesignerFrameComponent } from './process-designer-frame.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxLaunchProcessDesignerActionService implements IViewActionService<ILaunchProcessDesignerActionParams> {\n  constructor(\n    private adaptModalService: AdaptModalService,\n    private rxProcessDefinitionCacheService: RxProcessDefinitionCacheService\n  ) {}\n\n  execute(parameters: ILaunchProcessDesignerActionParams): Observable<any> {\n    return parameters.processDefinitionName\n      ? this.rxProcessDefinitionCacheService\n          .getProcessDefinition(parameters.processDefinitionName)\n          .pipe(switchMap(() => this.openModal(parameters)))\n      : defer(() => from(this.openModal(parameters)));\n  }\n\n  private openModal(parameters: ILaunchProcessDesignerActionParams): ModalDeferred {\n    return this.adaptModalService.open({\n      content: ProcessDesignerFrameComponent,\n      size: OpenViewActionModalSize.FullSize as any,\n      data: parameters\n    });\n  }\n}\n","import { Component, ElementRef, Input, OnDestroy, OnInit, Renderer2, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { AdaptTreeNode } from '@bmc-ux/adapt-angular';\nimport { RxProcessElementsService, RX_PROCESS_DEFINITION } from '@helix/platform/process/api';\nimport { IDesignerStencilElementTree, RxDesignerStencilBuilder } from '@helix/platform/shared/api';\nimport { ValueAccessor } from '@helix/platform/shared/components';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { TranslateService } from '@ngx-translate/core';\nimport { flatten, forEach, isEmpty, isEqual, map, some } from 'lodash';\nimport { ReplaySubject } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport {\n  IProcessDesignerElementsPickerComponentOptions,\n  IProcessElementTreeNode,\n  IProcessElementTreeNodeValue\n} from './process-designer-element-picker.interfaces';\n\n@Component({\n  selector: 'rx-process-designer-element-picker',\n  templateUrl: './process-designer-element-picker.component.html',\n  styleUrls: ['./process-designer-element-picker.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RxProcessDesignerElementPickerComponent,\n      multi: true\n    }\n  ]\n})\nexport class RxProcessDesignerElementPickerComponent extends ValueAccessor<string> implements OnInit, OnDestroy {\n  @Input()\n  options: IProcessDesignerElementsPickerComponentOptions;\n\n  @ViewChild('dropdownButton', { static: true })\n  dropdownButton: ElementRef;\n\n  dropdownWidth: number;\n  processElementsTree: AdaptTreeNode[];\n  selectedPaletteElementsByLabel: string;\n  selection: IProcessElementTreeNode[] = [];\n\n  private selectedPaletteElements: IProcessElementTreeNodeValue[] | string;\n  private stencilElements: IProcessElementTreeNode[];\n\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  constructor(\n    private rxDesignerStencilBuilder: RxDesignerStencilBuilder,\n    private rxJsonParserService: RxJsonParserService,\n    private rxProcessElementsService: RxProcessElementsService,\n    private renderer: Renderer2,\n    private translateService: TranslateService\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    const paletteElementsControl = this.innerValue;\n\n    this.selectedPaletteElements =\n      paletteElementsControl === '*' ? '*' : this.rxJsonParserService.tryParseJson(paletteElementsControl, null);\n\n    this.rxDesignerStencilBuilder\n      .buildElementsTree(\n        this.rxProcessElementsService.getProcessElements(),\n        RX_PROCESS_DEFINITION.standardProcessElementGroups\n      )\n      .pipe(take(1))\n      .subscribe((processElementsTree: IDesignerStencilElementTree[]) => {\n        forEach(processElementsTree, (group) => {\n          group.expanded = true;\n          group.allChildElementsSelected = true;\n\n          if (this.selectedPaletteElements?.length) {\n            forEach(group.children, (element) => {\n              if (\n                this.selectedPaletteElements === '*' ||\n                some(this.selectedPaletteElements as [], (selectedPaletteElement) =>\n                  isEqual(selectedPaletteElement, element.value)\n                )\n              ) {\n                this.selection.push(element);\n              } else {\n                group.allChildElementsSelected = false;\n              }\n            });\n\n            if (group.allChildElementsSelected) {\n              this.selection.push(group as unknown as IProcessElementTreeNode);\n            }\n          }\n        });\n\n        this.processElementsTree = [\n          {\n            label: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.all-elements.label'),\n            expanded: true,\n            children: processElementsTree\n          }\n        ];\n\n        this.stencilElements = flatten(map(processElementsTree, 'children'));\n\n        if (this.selectedPaletteElements === '*') {\n          this.selection.push(...this.processElementsTree as IProcessElementTreeNode[]);\n          this.selectedPaletteElements = map(this.stencilElements, 'value');\n        }\n\n        this.updatePickerFakeInputValue();\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  onSelectionChange(): void {\n    this.selectedPaletteElements = this.selection.filter((node) => !node.children).map((node) => node.value);\n\n    if (this.selectedPaletteElements.length === 0) {\n      this.selectedPaletteElements = null;\n      this.value = null;\n    } else if (this.stencilElements.length === this.selectedPaletteElements.length) {\n      this.value = '*';\n    } else {\n      this.value = JSON.stringify(this.selectedPaletteElements);\n    }\n\n    this.updatePickerFakeInputValue();\n  }\n\n  updatePickerFakeInputValue(): void {\n    if (isEmpty(this.selectedPaletteElements)) {\n      this.selectedPaletteElementsByLabel = '';\n    } else if (this.stencilElements.length === this.selectedPaletteElements.length) {\n      this.selectedPaletteElementsByLabel = this.translateService.instant('com.bmc.arsys.rx.client.common.all.label');\n    } else if (this.selectedPaletteElements.length === 1) {\n      this.selectedPaletteElementsByLabel = this.translateService.instant(\n        'com.bmc.arsys.rx.client.process-designer.one-element-selected.label'\n      );\n    } else {\n      this.selectedPaletteElementsByLabel = this.translateService.instant(\n        'com.bmc.arsys.rx.client.process-designer.many-elements-selected.label',\n        {\n          count: this.selectedPaletteElements.length\n        }\n      );\n    }\n  }\n\n  clearDefinition(e: Event): void {\n    e.stopPropagation();\n\n    this.selection = [];\n\n    this.selectedPaletteElements = null;\n    this.selectedPaletteElementsByLabel = '';\n\n    this.value = null;\n  }\n\n  setDropdownWidth(): void {\n    setTimeout(() => {\n      const dropdownButton = this.renderer.selectRootElement(this.dropdownButton.nativeElement, true);\n\n      // 2px - border\n      this.dropdownWidth = Math.max(dropdownButton.clientWidth) + 2;\n    });\n  }\n}\n","<adapt-rx-control-label [label]=\"options.label\"></adapt-rx-control-label>\n\n<div\n  adaptDropdown\n  appendToBody=\"true\"\n  autoClose=\"outside\"\n  class=\"dropdown\"\n  placement=\"bottom-left\"\n  (onOpen)=\"setDropdownWidth()\"\n>\n  <button\n    adaptDropdownToggle\n    class=\"btn btn-secondary d-flex text-center w-100\"\n    rx-id=\"toggle-button\"\n    type=\"button\"\n    #dropdownButton\n  >\n    <span class=\"rx-selected-item text-left flex-grow-1\">{{ selectedPaletteElementsByLabel }}</span>\n\n    <span rx-id=\"clear-button\" class=\"d-icon-cross_adapt btn-link\" (click)=\"clearDefinition($event)\" *ngIf=\"value\">\n    </span>\n  </button>\n\n  <div class=\"dropdown-menu px-3\" [style.width.px]=\"dropdownWidth\" adaptDropdownMenu>\n    <adapt-tree\n      [value]=\"processElementsTree\"\n      [selectionMode]=\"'checkbox'\"\n      [(selection)]=\"selection\"\n      (selectionChange)=\"onSelectionChange()\"\n    ></adapt-tree>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AdaptDropdownModule, AdaptRxCheckboxModule, AdaptRxLabelModule, AdaptTreeModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\nimport { RxProcessDesignerElementPickerComponent } from './process-designer-element-picker.component';\n\n@NgModule({\n  declarations: [RxProcessDesignerElementPickerComponent],\n  exports: [RxProcessDesignerElementPickerComponent],\n  entryComponents: [RxProcessDesignerElementPickerComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    AdaptRxCheckboxModule,\n    AdaptDropdownModule.forRoot(),\n    AdaptRxLabelModule,\n    AdaptTreeModule\n  ]\n})\nexport class ProcessDesignerElementPickerModule {}\n","import { Injector } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { take } from 'rxjs/operators';\nimport {\n  DefinitionPickerOrExpressionFormControlComponent,\n  IExpressionFormControlOptions,\n  RxDefinitionPickerType\n} from '@helix/platform/shared/components';\nimport {\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport { RxViewDesignerActionModel } from '@helix/platform/view/designer';\nimport { ILaunchProcessDesignerViewActionDesignProperties } from './launch-process-designer-action.types';\nimport { RxProcessDesignerElementPickerComponent } from './process-designer-element-picker';\n\nexport class LaunchProcessDesignerActionDesignModelClass extends RxViewDesignerActionModel {\n  private translateService = this.injector.get(TranslateService);\n\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<ILaunchProcessDesignerViewActionDesignProperties>\n  ): ViewActionDesignEditableProperties<ILaunchProcessDesignerViewActionDesignProperties> {\n    return {\n      processDefinitionName: null,\n      paletteElements: null,\n      ...initialProperties\n    };\n  }\n\n  constructor(\n    injector: Injector,\n    readonly sandbox: IViewActionDesignSandbox<ILaunchProcessDesignerViewActionDesignProperties>\n  ) {\n    super(injector, sandbox);\n\n    this.sandbox.actionProperties$.pipe(take(1)).subscribe(() => {\n      this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig());\n\n      this.sandbox.setActionOutputDataDictionary([\n        {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.process-definition-name.label'),\n          expression: this.getOutputExpressionForPropertyPath('processDefinitionName')\n        }\n      ]);\n    });\n  }\n\n  private getActionEditorConfig(): IViewActionDesignPropertyEditorConfig {\n    return [\n      {\n        name: 'processDefinitionName',\n        component: DefinitionPickerOrExpressionFormControlComponent,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.process-definition-name.label'),\n          definitionType: RxDefinitionPickerType.Process,\n          dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n          operators: this.expressionConfigurator.getOperators()\n        } as IExpressionFormControlOptions\n      },\n      {\n        name: 'paletteElements',\n        component: RxProcessDesignerElementPickerComponent,\n        options: {\n          label: 'Available palette elements'\n        } as IExpressionFormControlOptions\n      }\n    ];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IExpressionEvaluator, RxDefaultExpressionEvaluatorService } from '@helix/platform/view/api';\nimport { Expression } from 'jsep';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\n\n@Injectable()\nexport class RxLaunchProcessDesignerExpressionEvaluatorService implements IExpressionEvaluator {\n  constructor(private rxDefaultExpressionEvaluatorService: RxDefaultExpressionEvaluatorService) {}\n\n  evaluate(expression: string, data: object): string {\n    let evaluatedExpression = expression;\n\n    if (!RX_RECORD_DEFINITION.validFullDefinitionName.test(expression)) {\n      evaluatedExpression = this.rxDefaultExpressionEvaluatorService.evaluate(expression, data);\n    }\n\n    return evaluatedExpression;\n  }\n\n  parseExpression(expression): Expression {\n    let parsedExpression;\n\n    if (!RX_RECORD_DEFINITION.validFullDefinitionName.test(expression)) {\n      parsedExpression = this.rxDefaultExpressionEvaluatorService.parseExpression(expression);\n    }\n\n    return parsedExpression;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxProcessApiModule } from '@helix/platform/process/api';\nimport { RxViewActionRegistryService, ViewComponentPropertyType } from '@helix/platform/view/api';\nimport { RxIframeModule } from '@helix/platform/shared/components';\nimport { RxLaunchProcessDesignerActionService } from './launch-process-designer-action.service';\nimport { LaunchProcessDesignerActionDesignModelClass } from './launch-process-designer-action-design-model.class';\nimport { RxLaunchProcessDesignerExpressionEvaluatorService } from './launch-process-designer-expression-evaluator.service';\nimport { ProcessDesignerFrameComponent } from './process-designer-frame.component';\n\n@NgModule({\n  imports: [CommonModule, RxProcessApiModule, RxIframeModule],\n  declarations: [ProcessDesignerFrameComponent],\n  entryComponents: [ProcessDesignerFrameComponent],\n  providers: [RxLaunchProcessDesignerExpressionEvaluatorService]\n})\nexport class LaunchProcessDesignerActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxLaunchProcessDesignerActionService: RxLaunchProcessDesignerActionService,\n    private rxLaunchProcessDesignerExpressionActionEvaluatorService: RxLaunchProcessDesignerExpressionEvaluatorService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxLaunchProcessDesignerAction',\n      label: 'Launch process designer',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxLaunchProcessDesignerActionService,\n      designModel: LaunchProcessDesignerActionDesignModelClass,\n      parameters: [\n        {\n          name: 'processDefinitionName',\n          label: 'Process definition name',\n          type: ViewComponentPropertyType.String,\n          enableExpressionEvaluation: true,\n          evaluatorService: this.rxLaunchProcessDesignerExpressionActionEvaluatorService\n        },\n        {\n          name: 'paletteElements',\n          label: 'Available palette elements',\n          type: ViewComponentPropertyType.String\n        }\n      ]\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { IViewActionService } from '@helix/platform/view/api';\n\n@Injectable()\nexport class RxUnknownViewActionService implements IViewActionService {\n  execute(): Observable<never> {\n    return EMPTY;\n  }\n}\n","import { IViewActionDesignManager, IViewActionDesignProperties } from '@helix/platform/view/api';\nimport { IViewComponentDesignValidationIssue } from '@helix/platform/view/designer';\nimport { Observable, of } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class RxUnknownViewActionDesignManager implements IViewActionDesignManager {\n  validate(\n    actionProperties: IViewActionDesignProperties,\n    propertyName: string\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    return of([\n      {\n        type: 'error',\n        description: `Unknown action: ${actionProperties.name}`,\n        propertyName\n      }\n    ]);\n  }\n}\n","import { Injector } from '@angular/core';\nimport { RxViewDesignerActionModel } from '@helix/platform/view/designer';\nimport { TextFormControlComponent } from '@helix/platform/shared/components';\nimport { IViewActionDesignPropertyEditorConfig, IViewActionDesignSandbox } from '@helix/platform/view/api';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport { take } from 'rxjs/operators';\nimport { keys } from 'lodash';\n\nexport class RxUnknownViewActionDesignModel extends RxViewDesignerActionModel {\n  constructor(protected injector: Injector, readonly sandbox: IViewActionDesignSandbox) {\n    super(injector, sandbox);\n\n    this.sandbox.actionProperties$.pipe(take(1)).subscribe((actionProperties: IPlainObject) => {\n      this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig(actionProperties));\n    });\n  }\n\n  private getActionEditorConfig(actionProperties: IPlainObject): IViewActionDesignPropertyEditorConfig {\n    return keys(actionProperties).map((propertyName) => ({\n      name: propertyName,\n      component: TextFormControlComponent,\n      isDisabled: true,\n      options: {\n        label: propertyName\n      }\n    }));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxViewActionRegistryService } from '@helix/platform/view/api';\nimport { RxUnknownViewActionService } from './unknown-view-action.service';\nimport { RxUnknownViewActionDesignManager } from './unknown-view-action-design-manager.service';\nimport { RxUnknownViewActionDesignModel } from './unknown-view-action-design-model.class';\n\n@NgModule({\n  providers: [RxUnknownViewActionService, RxUnknownViewActionDesignManager]\n})\nexport class UnknownViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxUnknownViewActionService: RxUnknownViewActionService,\n    private rxUnknownViewActionDesignManager: RxUnknownViewActionDesignManager\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxUnknownViewAction',\n      label: 'Unknown',\n      bundleId: RX_APPLICATION.platformBundleId,\n      designModel: RxUnknownViewActionDesignModel,\n      designManager: this.rxUnknownViewActionDesignManager,\n      service: this.rxUnknownViewActionService,\n      parameters: [],\n      hidden: true\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AssociateViewActionModule } from './associate/associate-view-action.module';\nimport { AvcAssociateActionModule } from './avc-associate/avc-associate-action.module';\nimport { CloseViewActionModule } from './close-view/close-view-action.module';\nimport { DeleteRecordsViewActionModule } from './delete-records/delete-records-view-action.module';\nimport { DisassociateViewActionModule } from './disassociate/disassociate-view-action.module';\nimport { EditRecordsViewActionModule } from './edit-records/edit-records-view-action.module';\nimport { LaunchProcessViewActionModule } from './launch-process/launch-process-view-action.module';\nimport { LaunchProcessDesignerActionModule } from './launch-process-designer/launch-process-designer-action.module';\nimport { LaunchUrlViewActionModule } from './launch-url/launch-url-view-action.module';\nimport { OpenViewActionModule } from './open-view/open-view-action.module';\nimport { RefreshViewActionModule } from './refresh/refresh-view-action.module';\nimport { SaveViewActionModule } from './save/save-view-action.module';\nimport { SetPropertyViewActionModule } from './set-property/set-property-view-action.module';\nimport { UnknownViewActionModule } from './unknown/unknown-view-action.module';\nimport { ApplyGridFilterViewActionModule } from './apply-grid-filter/apply-grid-filter-view-action.module';\n\n@NgModule({\n  imports: [\n    ApplyGridFilterViewActionModule,\n    AssociateViewActionModule,\n    AvcAssociateActionModule,\n    CloseViewActionModule,\n    DeleteRecordsViewActionModule,\n    DisassociateViewActionModule,\n    EditRecordsViewActionModule,\n    LaunchProcessViewActionModule,\n    LaunchProcessDesignerActionModule,\n    LaunchUrlViewActionModule,\n    OpenViewActionModule,\n    RefreshViewActionModule,\n    SaveViewActionModule,\n    SetPropertyViewActionModule,\n    UnknownViewActionModule\n  ]\n})\nexport class ViewActionsModule {}\n","import {\n  ApplyGridFilterMode,\n  IViewActionDesignManager,\n  IViewActionDesignProperties,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport {\n  IViewComponentDesignData,\n  IViewComponentDesignValidationIssue,\n  ViewDesignerFacade\n} from '@helix/platform/view/designer';\nimport { forkJoin, merge, Observable, of } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport {\n  IApplyGridFilterViewActionData,\n  IApplyGridFilterViewActionDesignProperties,\n  IApplyGridFilterViewActionGridData,\n  RxApplyGridFilterActionName\n} from './apply-grid-filter-view-action.types';\nimport { distinctUntilChanged, filter, map, shareReplay, skip, switchMap, take, withLatestFrom } from 'rxjs/operators';\nimport { RxApplyGridFilterViewActionDesignModelClass } from './apply-grid-filter-view-action-design-model.class';\nimport {\n  IRecordGridDesignProperties,\n  IRecordGridFilterDescriptorModel,\n  RX_RECORD_GRID,\n  RxRecordGridDesignUtilsService,\n  RxRecordGridFilterHelperService\n} from '@helix/platform/view/components';\nimport { cloneDeep, compact, includes, isEqual, omit, sortBy, uniq } from 'lodash';\n\n@Injectable()\nexport class RxApplyGridFilterViewActionDesignManagerService\n  implements IViewActionDesignManager<IApplyGridFilterViewActionDesignProperties>\n{\n  constructor(\n    private viewDesignerFacade: ViewDesignerFacade,\n    private rxRecordGridDesignUtilsService: RxRecordGridDesignUtilsService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService\n  ) {\n    const applyGridFilterActions$: Observable<IApplyGridFilterViewActionData[]> = this.viewDesignerFacade\n      .getComponentsByType<IViewActionDesignProperties>(RxViewComponentType.Action)\n      .pipe(\n        map(\n          (components) =>\n            components.filter(\n              (comp) => comp.data.name === RxApplyGridFilterActionName\n            ) as IApplyGridFilterViewActionData[]\n        ),\n        shareReplay({ refCount: true, bufferSize: 1 })\n      );\n\n    const gridGuids$ = applyGridFilterActions$.pipe(\n      map((actions) =>\n        actions.map((action) =>\n          RxApplyGridFilterViewActionDesignModelClass.extractGuidFromExpression(action.data.targetApi)\n        )\n      ),\n      map((guids) => sortBy(uniq(compact(guids)))),\n      filter((guids) => Boolean(guids.length)),\n      distinctUntilChanged((a, b) => isEqual(a, b)),\n      shareReplay({ refCount: true, bufferSize: 1 })\n    );\n\n    const updateActionFiltersOnGridColumnsChange$ = gridGuids$.pipe(\n      switchMap((gridGuids) => {\n        const actionsToUpdate$ = gridGuids.map((gridGuid) =>\n          this.getActionsToUpdate(gridGuid, applyGridFilterActions$)\n        );\n\n        return merge(...actionsToUpdate$);\n      })\n    );\n\n    const clearFiltersOnGridDefinitionChange$ = gridGuids$.pipe(\n      switchMap((gridGuids) => {\n        const actionsToUpdate$ = gridGuids.map((gridGuid) =>\n          this.getGridDefinitionChanges(gridGuid).pipe(\n            skip(1),\n            map(() => gridGuid),\n            withLatestFrom(applyGridFilterActions$),\n            map(([guid, actions]) => {\n              const affectedActions = actions.filter((action) => action.data.targetApi.includes(guid));\n\n              return affectedActions.map((actionComponent) => {\n                const updatedActionComponent = cloneDeep(actionComponent);\n\n                updatedActionComponent.data.filters = null;\n\n                return {\n                  component: updatedActionComponent,\n                  children: []\n                };\n              });\n            })\n          )\n        );\n\n        return merge(...actionsToUpdate$);\n      })\n    );\n\n    merge(clearFiltersOnGridDefinitionChange$, updateActionFiltersOnGridColumnsChange$).subscribe((components) => {\n      components.forEach((item) => {\n        this.viewDesignerFacade.updateComponentProperties(item.component.guid, item.component.data);\n        this.viewDesignerFacade.setChildren(item.component.guid, item.children);\n      });\n    });\n  }\n\n  private getActionsToUpdate(gridGuid: string, applyGridFilterActions$: Observable<IApplyGridFilterViewActionData[]>) {\n    return this.getGridColumnChanges(gridGuid).pipe(\n      skip(1),\n      withLatestFrom(applyGridFilterActions$),\n      switchMap(([gridData, actions]) => {\n        // getting actions bound to changed grid\n        const affectedActions = actions.filter((action) => action.data.targetApi.includes(gridData.guid));\n\n        const actionsWithFilters$ = affectedActions.map((action) =>\n          this.viewDesignerFacade.getChildComponents<IRecordGridFilterDescriptorModel>(action.guid).pipe(\n            map((filterComponents) => ({ ...cloneDeep(action), children: filterComponents })),\n            take(1)\n          )\n        );\n\n        return forkJoin(actionsWithFilters$).pipe(\n          map((actionComponents) => {\n            const gridColumnIds = gridData.columns.map((col) => col.fieldId);\n\n            return actionComponents.reduce((result, actionComponent) => {\n              const componentsToUpdate = this.getUpdatedFilterComponents(\n                omit(actionComponent, 'children'),\n                actionComponent.children,\n                gridColumnIds\n              );\n\n              return componentsToUpdate ? result.concat(componentsToUpdate) : result;\n            }, []);\n          })\n        );\n      })\n    );\n  }\n\n  private getGridColumnChanges(guid: string): Observable<IApplyGridFilterViewActionGridData> {\n    return this.viewDesignerFacade\n      .getComponentPropertyValue<'columns', IRecordGridDesignProperties>(guid, 'columns')\n      .pipe(\n        filter((columns) => Array.isArray(columns)),\n        map((columns) => ({\n          guid,\n          columns: columns.map((col) => ({\n            fieldId: col.fieldId,\n            namedFilterOptions: col.namedFilterOptions\n          }))\n        })),\n        distinctUntilChanged<IApplyGridFilterViewActionGridData>(isEqual)\n      );\n  }\n\n  private getGridDefinitionChanges(guid: string): Observable<string> {\n    return this.viewDesignerFacade.getComponentPropertyValue(guid, 'recordDefinitionName').pipe(distinctUntilChanged());\n  }\n\n  private getUpdatedFilterComponents(\n    component: IApplyGridFilterViewActionData,\n    filterComponents: IViewComponentDesignData<IRecordGridFilterDescriptorModel>[],\n    gridColumnIds: string[]\n  ): {\n    component: IApplyGridFilterViewActionData;\n    children: IViewComponentDesignData<IRecordGridFilterDescriptorModel>[];\n  } {\n    const filterComponentsForColumns = filterComponents.filter((item) => gridColumnIds.includes(item.data.fieldId));\n\n    if (filterComponentsForColumns.length !== filterComponents.length) {\n      const updatedFilterComponents =\n        this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(filterComponentsForColumns);\n\n      const newFilterData = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n        component.data.filters,\n        updatedFilterComponents\n      );\n\n      // updating filters JSON after column remove\n      component.data.filters = newFilterData\n        ? this.rxRecordGridFilterHelperService.denormalizeFilterString(\n            JSON.stringify(newFilterData),\n            updatedFilterComponents\n          )\n        : null;\n\n      return {\n        component,\n        children: filterComponentsForColumns\n      };\n    }\n\n    return null;\n  }\n\n  validate(\n    actionProperties: IApplyGridFilterViewActionDesignProperties,\n    propertyName: string\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    const filterValidation =\n      !actionProperties.filters &&\n      !includes([ApplyGridFilterMode.Begin, ApplyGridFilterMode.End, ApplyGridFilterMode.Clear], actionProperties.mode)\n        ? {\n            type: 'error',\n            description: 'Apply grid filter action: Filter is required',\n            propertyName\n          }\n        : null;\n\n    return of(actionProperties.targetApi).pipe(\n      map((targetApi) => RxApplyGridFilterViewActionDesignModelClass.extractGuidFromExpression(targetApi)),\n      switchMap((guid) => (guid ? this.viewDesignerFacade.getComponent(guid) : of(null))),\n      take(1),\n      map((item) => {\n        const issues = [];\n\n        if (actionProperties.targetApi && item?.type !== RX_RECORD_GRID.type) {\n          issues.push({\n            type: 'error',\n            description: 'Apply grid filter action: Record grid expression must point to a record grid.',\n            propertyName\n          });\n        }\n\n        if (actionProperties.targetApi && !issues.length && filterValidation) {\n          issues.push(filterValidation);\n        }\n\n        return issues;\n      })\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxViewActionRegistryService } from '@helix/platform/view/api';\nimport { RxApplyGridFilterViewActionDesignManagerService } from './apply-grid-filter-view-action-design-manager.service';\nimport { RxApplyGridFilterActionName } from './apply-grid-filter-view-action.types';\n\n@NgModule({\n  providers: [RxApplyGridFilterViewActionDesignManagerService]\n})\nexport class ApplyGridFilterViewActionDesignModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxApplyGridFilterViewActionDesignManagerService: RxApplyGridFilterViewActionDesignManagerService\n  ) {\n    this.rxViewActionRegistryService.registerDesignManager(\n      RxApplyGridFilterActionName,\n      rxApplyGridFilterViewActionDesignManagerService\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ViewActionsModule } from './view-actions.module';\nimport { ApplyGridFilterViewActionDesignModule } from './apply-grid-filter/apply-grid-filter-view-action-design.module';\n\n@NgModule({\n  imports: [ViewActionsModule, ApplyGridFilterViewActionDesignModule]\n})\nexport class ViewActionsDesignModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["_map","map","filter"],"mappings":"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"}