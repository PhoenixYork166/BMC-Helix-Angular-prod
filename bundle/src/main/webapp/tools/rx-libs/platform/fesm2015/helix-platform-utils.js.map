{"version":3,"file":"helix-platform-utils.js","sources":["../../../../libs/platform/utils/array-utils/array-utils.service.ts","../../../../libs/platform/utils/color-utils/color-utils.serivce.ts","../../../../libs/platform/utils/date-utils/date-utils.service.ts","../../../../libs/platform/utils/file-utils/size-units.constant.ts","../../../../libs/platform/utils/file-utils/file.service.ts","../../../../libs/platform/utils/file-utils/csv.service.ts","../../../../libs/platform/utils/file-utils/unit.service.ts","../../../../libs/platform/utils/guid/guid.constant.ts","../../../../libs/platform/utils/guid/guid.service.ts","../../../../libs/platform/utils/id/id.service.ts","../../../../libs/platform/utils/iframe-utils/iframe-utils.service.ts","../../../../libs/platform/utils/json/json-validator.directive.ts","../../../../libs/platform/utils/json/json.module.ts","../../../../libs/platform/utils/json/json-parser.service.ts","../../../../libs/platform/utils/no-whitespace-validator/no-whitespace-validator.directive.ts","../../../../libs/platform/utils/no-whitespace-validator/no-whitespace-validator.module.ts","../../../../libs/platform/utils/object-utils/object-utils.service.ts","../../../../libs/platform/utils/number-utils/number-utils.service.ts","../../../../libs/platform/utils/number-utils/number.constant.ts","../../../../libs/platform/utils/string/string.service.ts","../../../../libs/platform/utils/tree/tree.service.ts","../../../../libs/platform/utils/unique-validator/unique-validator.directive.ts","../../../../libs/platform/utils/unique-validator/unique-validator.module.ts","../../../../libs/platform/utils/url-utils/url-utils.service.ts","../../../../libs/platform/utils/error/error.class.ts","../../../../libs/platform/utils/helix-platform-utils.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { isEmpty } from '@bmc-ux/adapt-angular';\nimport { cloneDeep, forEach, forEachRight, uniq } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxArrayUtilsService {\n  moveArrayElements<T>(source: T[], elementIndexesToMove: number[], delta: number): T[] {\n    source = cloneDeep(source);\n\n    elementIndexesToMove = uniq(elementIndexesToMove.sort((a, b) => a - b));\n\n    if (delta !== 0 && !isEmpty(elementIndexesToMove)) {\n      if (delta > 0) {\n        if (elementIndexesToMove[elementIndexesToMove.length - 1] < source.length - 1) {\n          forEachRight(elementIndexesToMove, (indexToMove) => {\n            source.splice(indexToMove + delta, 0, source.splice(indexToMove, 1)[0]);\n          });\n        }\n      } else {\n        if (elementIndexesToMove[0] > 0) {\n          forEach(elementIndexesToMove, (indexToMove) => {\n            source.splice(indexToMove + delta, 0, source.splice(indexToMove, 1)[0]);\n          });\n        }\n      }\n    }\n\n    return source;\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxColorUtilsService {\n  private rgbColorRegex = /^rgb\\(\\d{1,3},\\d{1,3},\\d{1,3}\\)$/i;\n\n  normalize(color: string): string | null {\n    let normalizedColor = color;\n\n    if (this.isValidColor(color)) {\n      if (color.length === 4) {\n        normalizedColor = `#${color[1]}${color[1]}${color[2]}${color[2]}${color[3]}${color[3]}`;\n      } else if (this.rgbColorRegex.test(color)) {\n        normalizedColor = this.rgbToHex(color);\n      }\n    } else {\n      normalizedColor = '';\n    }\n\n    return normalizedColor.toLowerCase() || null;\n  }\n\n  isSameColor(color1: string, color2: string): boolean {\n    return this.normalize(color1) === this.normalize(color2);\n  }\n\n  private rgbToHex(rgbColor: string): string {\n    const hexColor = rgbColor\n      .match(/\\d+/g)\n      .map((x) => Number(x).toString(16).padStart(2, '0'))\n      .join('');\n\n    return `#${hexColor}`;\n  }\n\n  private isValidColor(color: string): boolean {\n    const hexColorRegex = /^#([0-9a-f]{3}|[0-9a-f]{6})$/i;\n\n    return hexColorRegex.test(color) || this.rgbColorRegex.test(color);\n  }\n}\n","import { formatDate } from '@angular/common';\nimport { Inject, Injectable, LOCALE_ID } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxDateUtilsService {\n  constructor(@Inject(LOCALE_ID) private locale: string) {}\n\n  formatDate(date: string | number | Date, format: string, locale?: string): string {\n    return formatDate(date, format, locale ?? this.locale);\n  }\n\n  isTwelveHourClock(): boolean {\n    const dateString = new Date().toLocaleString();\n\n    return /am|pm/i.test(dateString);\n  }\n}\n","export const RX_SIZE_UNITS = {\n  bytes: {\n    unit: 'Bytes',\n    value: 1\n  },\n  kilobytes: {\n    unit: 'KB',\n    value: 1_000\n  },\n  megabytes: {\n    unit: 'MB',\n    value: 1_000_000\n  },\n  gigabytes: {\n    unit: 'GB',\n    value: 1_000_000_000\n  }\n};\n","import { HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { saveAs } from 'file-saver';\nimport { replace, words } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxFileService {\n  static saveFile(fileStream: HttpResponse<ArrayBuffer>) {\n    const arrayBufferView = new Uint8Array(fileStream.body as ArrayBuffer);\n    const fileName = RxFileService.extractFileName(fileStream);\n\n    const file = new Blob([arrayBufferView], {\n      type: fileStream.headers.get('content-type') ?? undefined\n    });\n\n    saveAs(file, fileName);\n  }\n\n  static extractFileName(fileStream: HttpResponse<ArrayBuffer>): string | undefined {\n    const contentDisposition = fileStream.headers.get('content-disposition') ?? '';\n\n    /*\n     *  words('attachment; filename = logs.tar.gz'.replace(/\\s/g, ''), /filename=(.*)/)[1];\n     *  => 'logs.tar.gz'\n     */\n    return words(contentDisposition.replace(/\\s/g, ''), /filename=(.*)/)[1];\n  }\n\n  createAndDownloadBlob(data: any, type: string, name: string, extension: string): void {\n    const blob: Blob = new Blob([data], { type });\n\n    saveAs(blob, `${name}.${extension}`);\n  }\n\n  extractFileName(fileStream: HttpResponse<ArrayBuffer>): string | undefined {\n    return RxFileService.extractFileName(fileStream);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { forEach, join } from 'lodash';\nimport { CsvData } from './csv.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxCsvService {\n  convertToCsv(csvData: CsvData): string {\n    let csv = '';\n\n    forEach(csvData, (row) => {\n      const record = join(row, ',');\n\n      csv += `${record}\\n`;\n    });\n\n    return csv;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RX_SIZE_UNITS } from './size-units.constant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxUnitService {\n  getValueWithUnits(value: number): string | null {\n    const kilobytes = RX_SIZE_UNITS.kilobytes;\n    const megabytes = RX_SIZE_UNITS.megabytes;\n    const gigabytes = RX_SIZE_UNITS.gigabytes;\n\n    let valueWithUnits = null;\n\n    if (value < kilobytes.value) {\n      valueWithUnits = `${value} ${RX_SIZE_UNITS.bytes.unit}`;\n    } else if (value < megabytes.value) {\n      valueWithUnits = `${value / kilobytes.value} ${kilobytes.unit}`;\n    } else if (value < gigabytes.value) {\n      valueWithUnits = `${value / megabytes.value} ${megabytes.unit}`;\n    } else {\n      valueWithUnits = `${value / gigabytes.value} ${gigabytes.unit}`;\n    }\n\n    return valueWithUnits;\n  }\n\n  getValueWithoutUnitsByUnitType(value: number, unitType: string): number | null {\n    const kilobytes = RX_SIZE_UNITS.kilobytes;\n    const megabytes = RX_SIZE_UNITS.megabytes;\n    const gigabytes = RX_SIZE_UNITS.gigabytes;\n\n    let valueWithoutUnits = null;\n\n    if (unitType === kilobytes.unit) {\n      valueWithoutUnits = value / kilobytes.value;\n    } else if (unitType === megabytes.unit) {\n      valueWithoutUnits = value / megabytes.value;\n    } else if (unitType === gigabytes.unit) {\n      valueWithoutUnits = value / gigabytes.value;\n    } else {\n      valueWithoutUnits = value;\n    }\n\n    return valueWithoutUnits;\n  }\n}\n","const baseGuidPattern = '[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}';\nconst idPrefix = 'rx-';\n\nexport const RX_GUID = {\n  baseGuidPattern,\n  baseIdPattern: idPrefix + baseGuidPattern,\n  idPrefix\n};\n","import { Injectable } from '@angular/core';\nimport { RX_GUID } from './guid.constant';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxGuidService {\n  generate(prefix?: string): string {\n    // taken from JointJS, credit: http://stackoverflow.com/posts/2117523/revisions\n\n    let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n      const r = (Math.random() * 16) | 0; // tslint:disable-line\n      const v = c == 'x' ? r : (r & 0x3) | 0x8; // tslint:disable-line\n\n      return v.toString(16);\n    });\n\n    if (prefix) {\n      uuid = prefix + uuid;\n    }\n\n    return uuid;\n  }\n\n  isGuid(tested: string): boolean {\n    const guidPattern = new RegExp('^' + RX_GUID.baseGuidPattern + '$', 'i');\n\n    return guidPattern.test(tested);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RxGuidService } from '../guid/guid.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxIdService {\n  constructor(private rxGuidService: RxGuidService) {}\n\n  private prefix = 'rx-';\n\n  get(cellId: string): string {\n    return cellId ? (cellId.slice(0, this.prefix.length) === this.prefix ? cellId : this.prefix + cellId) : cellId;\n  }\n\n  getBase(id: string): string {\n    return id.slice(this.prefix.length);\n  }\n\n  generate(): string {\n    return this.rxGuidService.generate(this.prefix);\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxIframeUtilsService {\n  isRunningInIframe(): boolean {\n    try {\n      return window.self !== window.top;\n    } catch (e) {\n      return true;\n    }\n  }\n\n  postMessageToHost(messageObject: any): void {\n    window.parent.postMessage(JSON.stringify(messageObject), '*');\n  }\n}\n","import { Directive, Input, OnInit } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator } from '@angular/forms';\nimport { IJsonValidatorConfig } from './json.types';\nimport { TranslateService } from '@ngx-translate/core';\nimport { get } from 'lodash';\n\n@Directive({\n  selector: '[rxJson]',\n  providers: [{ provide: NG_VALIDATORS, useExisting: RxJsonValidator, multi: true }]\n})\nexport class RxJsonValidator implements OnInit, Validator {\n  @Input()\n  rxJson!: IJsonValidatorConfig;\n\n  private errorMessage = '';\n\n  constructor(private translateService: TranslateService) {}\n\n  ngOnInit() {\n    this.errorMessage = get(\n      this.rxJson,\n      'errorMessage',\n      this.translateService.instant('com.bmc.arsys.rx.client.utils.json-validator.error-message')\n    );\n  }\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    let result = null;\n\n    if (control.value) {\n      try {\n        JSON.parse(control.value);\n      } catch (ignored) {\n        result = {\n          error: {\n            message: this.errorMessage\n          }\n        };\n      }\n    }\n\n    return result;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxJsonValidator } from './json-validator.directive';\n\n@NgModule({\n  declarations: [RxJsonValidator],\n  exports: [RxJsonValidator]\n})\nexport class RxJsonModule {}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxJsonParserService {\n  tryParseJson<T = any>(value: string, defaultValue?: T): T | undefined {\n    try {\n      return JSON.parse(value);\n    } catch (ignored) {\n      return defaultValue;\n    }\n  }\n}\n","import { Directive, Input } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport { isEmpty, trim } from 'lodash';\n\n@Directive({\n  selector: '[rxNoWhitespace]',\n  providers: [{ provide: NG_VALIDATORS, useExisting: RxNoWhitespaceValidator, multi: true }]\n})\nexport class RxNoWhitespaceValidator implements Validator {\n  @Input()\n  rxNoWhitespace: boolean;\n\n  constructor(private translateService: TranslateService) {}\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    let result = null;\n\n    if (this.rxNoWhitespace !== false && control.value && isEmpty(trim(control.value))) {\n      result = {\n        error: {\n          message: this.translateService.instant('com.bmc.arsys.rx.client.view-components.validation.required.message')\n        }\n      };\n    }\n\n    return result;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxNoWhitespaceValidator } from './no-whitespace-validator.directive';\n\n@NgModule({\n  declarations: [RxNoWhitespaceValidator],\n  exports: [RxNoWhitespaceValidator]\n})\nexport class RxNoWhitespaceValidatorModule {}\n","import { Injectable } from '@angular/core';\nimport { assign, forOwn, isEmpty, isObject, isPlainObject, isUndefined, keys, transform } from 'lodash';\n\ninterface IPlainObject {\n  [name: string]: any;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxObjectUtilsService {\n  /*\n    This method creates an object from a string using '.' as separator, for example:\n    {\n      'foo.bar': 'value',\n      'foo.bar2': 'value2'\n      'foo1[0].bar3': 'value3'\n    }\n    will become:\n    {\n      foo: {\n        bar: 'value',\n        bar2: 'value2'\n      },\n      foo1: {\n        0: {\n          bar3: 'value3\n        }\n      }\n    }\n   */\n  expandProperties<T = object, TResult = T>(serializedParameters: T): TResult {\n    const deserializedParameters = {} as TResult;\n\n    function setNewValue(parameters: IPlainObject, keySegments: string[], value: IPlainObject): void {\n      let i = 0;\n\n      while (i < keySegments.length - 1) {\n        parameters[keySegments[i]] = parameters[keySegments[i]] || {};\n        parameters = parameters[keySegments[i]];\n        i++;\n      }\n\n      parameters[keySegments[i]] = value;\n    }\n\n    forOwn(serializedParameters, function (parameter, key) {\n      /*\n        Regex\n        Input: 'a.b[1].2.c'\n        Output: [\"a\", \"b\", \"1\", \"\", \"2\", \"c\"]\n      */\n      const keySegments = key.split(/[\\.(\\[\\])]/gi).filter(Boolean);\n\n      setNewValue(deserializedParameters, keySegments, parameter);\n    });\n\n    return deserializedParameters;\n  }\n\n  /*\n    This method serializes nested object using '.' as separator, for example:\n    {\n      foo: {\n        bar: 'value',\n        bar2: 'value2'\n      },\n      foo1: 2\n    }\n\n    will become:\n    {\n      'foo.bar': 'value',\n      'foo.bar2': 'value2'\n      'foo1': '2'\n    }\n   */\n  serializeObject<TSource extends IPlainObject, TResult extends IPlainObject>(object: TSource): TResult {\n    return processObject(object) as TResult;\n\n    function processObject(obj: IPlainObject, startWith = {}, prefix?: string): IPlainObject {\n      return transform(\n        obj,\n        (result: IPlainObject, value: any, key: string) => {\n          const setKey = prefix ? [prefix, key].join('.') : key;\n\n          if (isObject(value)) {\n            assign(result, processObject(value, startWith, setKey));\n          } else {\n            result[setKey] = value;\n          }\n        },\n        startWith\n      );\n    }\n  }\n\n  isEmptyObject(value: any): boolean {\n    return isPlainObject(value) && keys(value).length === 0;\n  }\n\n  /**\n   * Creates a deep clone of a value using JSON converting. This method is much faster than cloneDeep from lodash,\n   * but has some serious limitations. To get more details please check JSON.stringify method description.\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Description\n   */\n  cloneDeep<T>(value: T): T {\n    return isUndefined(value) ? value : JSON.parse(JSON.stringify(value));\n  }\n\n  mapFromArray<T, K extends keyof T>(collection: T[], propertyName: K): Map<K, T> {\n    return transform(\n      collection,\n      (result, item) => {\n        if (!isEmpty(item[propertyName])) {\n          result.set(item[propertyName], item);\n        }\n      },\n      new Map()\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport BigNumber from 'bignumber.js';\nimport { isFinite, isString } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxNumberUtilsService {\n  isFinite(value: any): value is number | BigNumber {\n    return BigNumber.isBigNumber(value) || isFinite(value);\n  }\n\n  isFiniteOrNumberString(value: any): value is string | number | BigNumber {\n    return this.isFinite(value) || this.isFiniteNumberString(value);\n  }\n\n  isFiniteNumberString(value: any): value is string {\n    return isString(value) && value.trim() !== '' && isFinite(Number(value));\n  }\n}\n","export const RX_NUMBER = {\n  maxInteger: 2147483647,\n  minInteger: -2147483648,\n  minDecimal: -1e26,\n  maxDecimal: 1e26\n};\n","import { Injectable } from '@angular/core';\nimport { includes, isEmpty, isString, kebabCase, toLower, trim, some, isRegExp, lowerCase, upperFirst } from 'lodash';\nimport utf8 from 'utf8';\nimport quotedPrintable from 'quoted-printable';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxStringService {\n  prettify(value: string): string {\n    return upperFirst(lowerCase(value));\n  }\n\n  isNonEmptyString(str: any): boolean {\n    return isString(str) && str.length > 0;\n  }\n\n  isEmptySafe(string: string): boolean {\n    return isEmpty(trim(string));\n  }\n\n  toRxId(str: string): string {\n    return kebabCase(str);\n  }\n\n  escapeRegExp(text: string): string {\n    return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  caseInsensitiveSearch(searchIn: string, searchFor: string): boolean {\n    return includes(toLower(searchIn), toLower(searchFor));\n  }\n\n  caseInsensitiveIsEqual(stringInitial: string, stringToCompare: string): boolean {\n    return toLower(stringInitial) === toLower(stringToCompare);\n  }\n\n  // Decodes a UTF-8 string encoded with Q encoding according to the rules of RFC 2047.\n  // The decoding is done with the use of utf8 and quoted-printable libraries.\n  // Some manipulations are done first to strip the 'charset' and 'encoding' from the string\n  // as well as replace underscores (_) with a space (=20) in order to convert the string to\n  // quoted-printable format.\n  decodeQ(qEncodedString: string): string {\n    return qEncodedString && qEncodedString.match(/^=\\?utf-8\\?q\\?/i)\n      ? utf8.decode(\n          quotedPrintable.decode(qEncodedString.replace(/\\s?=\\?utf-8\\?q\\?([^?]+)\\?=/gi, '$1').replace(/\\_/g, '=20'))\n        )\n      : qEncodedString;\n  }\n\n  // Determines if a given string is included in the array.\n  // Array can contain strings, or regular expressions against which the string will be tested.\n  isIncluded(str: string, array: Array<string | RegExp>): boolean {\n    return some(array, (item) => {\n      let match = false;\n\n      if (isString(item)) {\n        match = item === str;\n      } else if (isRegExp(item)) {\n        match = item.test(str);\n      }\n\n      return match;\n    });\n  }\n}\n","import { forEach, isEmpty, size } from 'lodash';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxTreeService {\n  flatten(tree: any, childrenPropertyName: string = 'children'): any[] {\n    const flattenElements: any[] = [];\n    const stack = [];\n    let currentNode: any;\n\n    stack.push(tree);\n\n    while (stack.length > 0) {\n      currentNode = stack.pop();\n\n      flattenElements.push(currentNode);\n\n      if (!isEmpty(currentNode[childrenPropertyName])) {\n        currentNode[childrenPropertyName].forEach((childrenNode: any) => {\n          stack.push(childrenNode);\n        });\n      }\n    }\n\n    return flattenElements;\n  }\n\n  flattenTree(tree: any, ...childrenPropertyNames: string[]): any[] {\n    let queue: any[] = [];\n    let currentIndex = 0;\n    let currentNode: any;\n\n    queue.push(tree);\n\n    while (currentIndex < queue.length) {\n      currentNode = queue[currentIndex++];\n\n      if (currentNode) {\n        forEach(childrenPropertyNames, function (propertyName) {\n          if (size(currentNode[propertyName]) > 0) {\n            queue = queue.concat(currentNode[propertyName]);\n          }\n        });\n      }\n    }\n\n    return queue;\n  }\n\n  flattenBy(tree: any, predicate: (node: any) => any[]): any[] {\n    const flattenElements = [];\n    const stack = [];\n    let currentNode = null;\n\n    stack.push(tree);\n\n    while (stack.length > 0) {\n      currentNode = stack.pop();\n\n      flattenElements.push(currentNode);\n\n      predicate(currentNode).forEach((childrenNode) => {\n        stack.push(childrenNode);\n      });\n    }\n\n    return flattenElements;\n  }\n}\n","import { Directive, Input } from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator } from '@angular/forms';\nimport { IUniqueValidatorConfig } from './unique-validator.types';\nimport { includes } from 'lodash';\n\n@Directive({\n  selector: '[rxUnique]',\n  providers: [{ provide: NG_VALIDATORS, useExisting: RxUniqueValidator, multi: true }]\n})\nexport class RxUniqueValidator implements Validator {\n  @Input()\n  rxUnique!: IUniqueValidatorConfig;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    let result = null;\n\n    if (control.dirty && control.value && includes(this.rxUnique.items, control.value)) {\n      result = {\n        error: {\n          message: this.rxUnique.errorMessage\n        }\n      };\n    }\n\n    return result;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxUniqueValidator } from './unique-validator.directive';\n\n@NgModule({\n  declarations: [RxUniqueValidator],\n  exports: [RxUniqueValidator]\n})\nexport class RxUniqueValidatorModule {}\n","import { Injectable, SecurityContext } from '@angular/core';\nimport { get, map } from 'lodash';\nimport { Router } from '@angular/router';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxUrlUtilsService {\n  constructor(private router: Router, private domSanitizer: DomSanitizer) {}\n\n  buildUrl(baseUrl: string, ...queryParams: Object[]): string {\n    let url = baseUrl;\n    const queryString = this.toQueryString(...queryParams);\n\n    if (queryString) {\n      url += '?' + queryString;\n    }\n\n    return url;\n  }\n\n  isValidUrl(url: string, isProtocolRequired = true): boolean {\n    const regExp = isProtocolRequired\n      ? /^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/\n      : /^((https?|ftp):\\/\\/)?[^\\s/$.?#].[^\\s]*$/;\n\n    return regExp.test(url);\n  }\n\n  toQueryString(...queryParams: Object[]): string {\n    return map(queryParams, (params) =>\n      map(params as any, (value, key) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`).join('&')\n    ).join('&');\n  }\n\n  getBundleIdFromUrl(url?: string): string {\n    return get(\n      this.router.parseUrl(url ?? window.location.hash.substring(1)),\n      'root.children.primary.segments[0].path'\n    );\n  }\n\n  isUrlSafe(url: string): boolean {\n    const sanitizedUrl = this.domSanitizer.sanitize(SecurityContext.URL, url);\n\n    return url === sanitizedUrl;\n  }\n}\n","export class RxError extends Error {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["isEmpty"],"mappings":"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"}