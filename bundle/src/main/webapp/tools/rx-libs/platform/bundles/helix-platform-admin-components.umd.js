(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('@bmc-ux/adapt-angular'), require('@helix/platform/shared/components'), require('@helix/platform/ui-kit'), require('@helix/platform/view/actions'), require('@helix/platform/view/components'), require('@helix/platform/view/runtime'), require('@ngx-translate/core'), require('lodash'), require('rxjs'), require('rxjs/operators'), require('@helix/platform/record/api'), require('@helix/platform/shared/api'), require('@helix/platform/utils'), require('@angular/router'), require('@bmc-ux/adapt-table'), require('@angular/common/http'), require('@helix/platform/view/api'), require('@angular/cdk/drag-drop'), require('@angular/compiler'), require('@helix/platform/association/api'), require('@helix/platform/chatbot/api'), require('@bmc-ux/adapt-charts'), require('moment-es6'), require('@helix/platform/process/api'), require('@bmc-ux/dpl-iconfont'), require('@helix/platform/rule/api'), require('@angular/cdk/clipboard')) :
    typeof define === 'function' && define.amd ? define('@helix/platform/admin/components', ['exports', '@angular/common', '@angular/core', '@angular/forms', '@bmc-ux/adapt-angular', '@helix/platform/shared/components', '@helix/platform/ui-kit', '@helix/platform/view/actions', '@helix/platform/view/components', '@helix/platform/view/runtime', '@ngx-translate/core', 'lodash', 'rxjs', 'rxjs/operators', '@helix/platform/record/api', '@helix/platform/shared/api', '@helix/platform/utils', '@angular/router', '@bmc-ux/adapt-table', '@angular/common/http', '@helix/platform/view/api', '@angular/cdk/drag-drop', '@angular/compiler', '@helix/platform/association/api', '@helix/platform/chatbot/api', '@bmc-ux/adapt-charts', 'moment-es6', '@helix/platform/process/api', '@bmc-ux/dpl-iconfont', '@helix/platform/rule/api', '@angular/cdk/clipboard'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.helix = global.helix || {}, global.helix.platform = global.helix.platform || {}, global.helix.platform.admin = global.helix.platform.admin || {}, global.helix.platform.admin.components = {}), global.ng.common, global.ng.core, global.ng.forms, global.adaptAngular, global.helix.platform.shared.components, global.helix.platform["ui-kit"], global.helix.platform.view.actions, global.helix.platform.view.components, global.helix.platform.view.runtime, global.ngxTranslateCore, global.lodash, global.rxjs, global.rxjs.operators, global.helix.platform.record.api, global.helix.platform.shared.api, global.helix.platform.utils, global.ng.router, global.adaptTable, global.ng.common.http, global.helix.platform.view.api, global.ng.cdk.dragDrop, global.ng.compiler, global.helix.platform.association.api, global.helix.platform.chatbot.api, global.adaptCharts, global.moment, global.helix.platform.process.api, global.dplIconfont, global.helix.platform.rule.api, global.ng.cdk.clipboard));
})(this, (function (exports, i8, i0, i1, i1$2, i4, i1$1, i4$4, i7, i4$2, i4$1, lodash, rxjs, operators, i3, i2, i3$1, i3$2, i4$3, i1$3, i1$4, i9, compiler, api, i2$1, i3$3, moment, i3$4, dplIconfont, i2$2, i11) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$2);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1$1);
    var i4__namespace$4 = /*#__PURE__*/_interopNamespace(i4$4);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i4__namespace$2 = /*#__PURE__*/_interopNamespace(i4$2);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4$1);
    var i3__namespace$2 = /*#__PURE__*/_interopNamespace(i3);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3$1);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$2);
    var i4__namespace$3 = /*#__PURE__*/_interopNamespace(i4$3);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$3);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$4);
    var i9__namespace = /*#__PURE__*/_interopNamespace(i9);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i3__namespace$3 = /*#__PURE__*/_interopNamespace(i3$3);
    var moment__default = /*#__PURE__*/_interopDefaultLegacy(moment);
    var i3__namespace$4 = /*#__PURE__*/_interopNamespace(i3$4);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i11__namespace = /*#__PURE__*/_interopNamespace(i11);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var RX_ADMIN = {
        defaultImages: {
            'rx-theme-favicon-logo': {
                name: 'favicon.ico',
                type: 'image/x-icon'
            },
            'rx-theme-large-logo-light': {
                name: 'company.svg',
                type: 'image/svg+xml'
            },
            'rx-theme-large-logo-dark': {
                name: 'company-dark.svg',
                type: 'image/svg+xml'
            },
            'rx-theme-small-logo-light': {
                name: 'company.svg',
                type: 'image/svg+xml'
            },
            'rx-theme-small-logo-dark': {
                name: 'company-dark.svg',
                type: 'image/svg+xml'
            }
        },
        settingResourceTypes: {
            character: i3.RX_RECORD_DEFINITION.resourceTypes.character,
            selection: i3.RX_RECORD_DEFINITION.resourceTypes.selection,
            integer: i3.RX_RECORD_DEFINITION.resourceTypes.integer,
            decimal: i3.RX_RECORD_DEFINITION.resourceTypes.decimal,
            boolean: i3.RX_RECORD_DEFINITION.resourceTypes.boolean,
            dateOnly: i3.RX_RECORD_DEFINITION.resourceTypes.dateOnly,
            color: 'com.bmc.arsys.rx.admin-settings.ColorChooserFieldDefinition',
            attachment: 'com.bmc.arsys.rx.admin-settings.AttachmentFieldDefinition',
            secure: 'com.bmc.arsys.rx.admin-settings.SecureDataFieldDefinition'
        }
    };

    var RxAdminCommonSettingsService = /** @class */ (function () {
        function RxAdminCommonSettingsService(rxAdminSettingsService, translateService, rxNotificationService, rxModalService, rxNumberUtilsService) {
            this.rxAdminSettingsService = rxAdminSettingsService;
            this.translateService = translateService;
            this.rxNotificationService = rxNotificationService;
            this.rxModalService = rxModalService;
            this.rxNumberUtilsService = rxNumberUtilsService;
        }
        RxAdminCommonSettingsService.prototype.openSettingsDetails = function (_a) {
            var title = _a.title, componentName = _a.componentName, groups = _a.groups, ownerKeyValue = _a.ownerKeyValue, isChildSetting = _a.isChildSetting, childOwnerKeyValue = _a.childOwnerKeyValue, onDialogApiReady = _a.onDialogApiReady;
            var isNew = isChildSetting ? !(ownerKeyValue && childOwnerKeyValue) : !ownerKeyValue;
            return this.rxModalService.openDockedPanel({
                content: AdminCommonSettingsBladeComponent,
                size: 'lg',
                title: title,
                data: {
                    config: {
                        componentName: componentName,
                        groups: groups,
                        ownerKeyValue: ownerKeyValue,
                        isNew: isNew,
                        isChildSetting: isChildSetting,
                        childOwnerKeyValue: childOwnerKeyValue
                    },
                    onApiReady: function (dialogApi) {
                        onDialogApiReady === null || onDialogApiReady === void 0 ? void 0 : onDialogApiReady(dialogApi);
                    }
                }
            });
        };
        RxAdminCommonSettingsService.prototype.createPropertyConfig = function (adminComponentControl) {
            var config = {
                name: adminComponentControl.id,
                isDisabled: !adminComponentControl.changePermission,
                dataType: adminComponentControl.dataType,
                options: {
                    label: adminComponentControl.label,
                    required: adminComponentControl.required
                },
                validators: []
            };
            if (adminComponentControl.required) {
                config.validators.push(i1.Validators.required);
            }
            if (adminComponentControl.defaultValue) {
                config.defaultValue = adminComponentControl.defaultValue;
            }
            else {
                config.defaultValue = null;
            }
            switch (adminComponentControl.dataType) {
                case RX_ADMIN.settingResourceTypes.selection: {
                    config.component = i4.SelectFormControlComponent;
                    config.options = Object.assign(Object.assign({}, config.options), { options: lodash.map(adminComponentControl.optionNamesById, function (value, key) { return ({
                            id: key,
                            name: value
                        }); }), emptyOption: !adminComponentControl.required });
                    break;
                }
                case RX_ADMIN.settingResourceTypes.secure:
                case RX_ADMIN.settingResourceTypes.character: {
                    config.component = i4.TextFormControlComponent;
                    config.options.isPassword = adminComponentControl.dataType === RX_ADMIN.settingResourceTypes.secure;
                    if (adminComponentControl.maxValue) {
                        config.options.maxLength = Number(adminComponentControl.maxValue);
                        config.validators.push(i1.Validators.maxLength(config.options.maxLength));
                    }
                    if (adminComponentControl.minValue) {
                        config.options.minLength = Number(adminComponentControl.minValue);
                        config.validators.push(i1.Validators.minLength(config.options.minLength));
                    }
                    break;
                }
                case RX_ADMIN.settingResourceTypes.boolean: {
                    config.component = i4.BooleanFormControlComponent;
                    config.options.label = '';
                    config.options.description = adminComponentControl.label;
                    config.options.shouldDisplayAsCheckbox = config.options.required;
                    if (config.defaultValue) {
                        config.defaultValue = config.defaultValue === 'true';
                    }
                    else if (config.options.required) {
                        config.defaultValue = false;
                    }
                    break;
                }
                case RX_ADMIN.settingResourceTypes.color: {
                    config.component = i4.ColorPickerFormControlComponent;
                    config.defaultValue = config.defaultValue || null;
                    break;
                }
                case RX_ADMIN.settingResourceTypes.decimal:
                case RX_ADMIN.settingResourceTypes.integer: {
                    config.component = i4.CounterFormControlComponent;
                    config.options.allowIntegerOnly = adminComponentControl.dataType === RX_ADMIN.settingResourceTypes.integer;
                    if (adminComponentControl.maxValue) {
                        config.options.maxValue = Number(adminComponentControl.maxValue);
                        config.validators.push(i1.Validators.max(Number(adminComponentControl.maxValue)));
                    }
                    if (adminComponentControl.minValue) {
                        config.options.minValue = Number(adminComponentControl.minValue);
                        config.validators.push(i1.Validators.min(Number(adminComponentControl.minValue)));
                    }
                    if (this.rxNumberUtilsService.isFiniteNumberString(adminComponentControl.defaultValue)) {
                        config.defaultValue = Number(adminComponentControl.defaultValue);
                    }
                    break;
                }
                case RX_ADMIN.settingResourceTypes.dateOnly: {
                    config.component = i4.DateFormControlComponent;
                    break;
                }
                case RX_ADMIN.settingResourceTypes.attachment: {
                    config.component = i4.AttachmentFormControlComponent;
                    config.options.maxFileSize = adminComponentControl.maxValue;
                    break;
                }
                default: {
                    config.component = i4.TextFormControlComponent;
                    break;
                }
            }
            return config;
        };
        RxAdminCommonSettingsService.prototype.getRecordGridConfig = function (_a) {
            var _this = this;
            var componentName = _a.componentName, controls = _a.controls, getCurrentGridFn = _a.getCurrentGridFn, createPermission = _a.createPermission, groups = _a.groups, bladeTitle = _a.bladeTitle, ownerKeyValue = _a.ownerKeyValue, groupName = _a.groupName, onDialogApiReady = _a.onDialogApiReady;
            var subUrl = ownerKeyValue ? groupName + "/" + ownerKeyValue : componentName;
            var fieldDefinitions = controls.map(function (control) {
                var fieldDefinition = {
                    id: control.id,
                    resourceType: control.dataType
                };
                if (control.dataType === RX_ADMIN.settingResourceTypes.selection &&
                    control.optionNamesById &&
                    control.optionLabelsById) {
                    fieldDefinition.optionNamesById = control.optionNamesById;
                    fieldDefinition.optionLabelsById = control.optionLabelsById;
                }
                return fieldDefinition;
            });
            var fieldDefinitionsById = fieldDefinitions.reduce(function (result, fieldDefinition) {
                result[fieldDefinition.id] = lodash.cloneDeep(fieldDefinition);
                return result;
            }, {});
            var recordDefinition = {
                fieldDefinitions: fieldDefinitions,
                fieldDefinitionsById: fieldDefinitionsById
            };
            var columns = controls.map(function (control, index) { return ({
                index: index,
                title: control.label,
                fieldId: control.id,
                visible: control.keySetting,
                sortable: true,
                filterable: false,
                alignment: i7.RecordGridColumnAlignment.Left
            }); });
            var actionButtons = [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.edit.label'),
                    style: 'tertiary',
                    iconCls: 'pencil',
                    actions: [
                        {
                            name: function () {
                                var currentGrid = getCurrentGridFn(groupName);
                                var selectedRow = currentGrid.api.getFirstSelectedRow();
                                if (createPermission) {
                                    var componentOwnerKeyValue = ownerKeyValue || selectedRow.ownerKeyValue1;
                                    var childOwnerKeyValue = ownerKeyValue ? selectedRow.ownerKeyValue1 : null;
                                    _this.openSettingsDetails({
                                        title: bladeTitle || groupName,
                                        componentName: componentName,
                                        groups: groups,
                                        ownerKeyValue: componentOwnerKeyValue,
                                        isChildSetting: Boolean(groupName),
                                        childOwnerKeyValue: childOwnerKeyValue,
                                        onDialogApiReady: onDialogApiReady
                                    })
                                        .then(function () {
                                        currentGrid.api.refresh().subscribe();
                                    })
                                        .catch(lodash.noop);
                                }
                            }
                        }
                    ]
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                    style: 'tertiary',
                    icon: 'trash',
                    actions: [
                        {
                            name: function () {
                                var currentGrid = getCurrentGridFn(groupName);
                                var selectedRow = currentGrid.api.getFirstSelectedRow();
                                if (createPermission) {
                                    _this.rxModalService
                                        .confirm({
                                        title: _this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                                        modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                                        message: _this.translateService.instant('com.bmc.arsys.rx.client.admin.admin-settings.delete-confirmation.message')
                                    })
                                        .then(function (response) {
                                        if (response) {
                                            _this.rxAdminSettingsService
                                                .deleteComponentSettings((groupName || componentName) + "/" + selectedRow.ownerKeyValue1)
                                                .pipe(operators.switchMap(function () { return currentGrid.api.refresh(); }))
                                                .subscribe();
                                        }
                                    });
                                }
                            }
                        }
                    ]
                }
            ];
            return rxjs.of({
                actionButtons: createPermission ? actionButtons : [],
                enableRowSelection: i7.RowSelectionMode.Single,
                getRecordDefinition: function () { return rxjs.of(recordDefinition); },
                getData: function () { return _this.rxAdminSettingsService.getComponentGridData(subUrl).pipe(operators.map(function (data) { return ({
                    data: data.rows,
                    totalSize: data.rows.length
                }); })); },
                columns: columns,
                enableFiltering: false,
                useExternalFiltering: false,
                recordIdField: 'ownerKeyValue1'
            });
        };
        return RxAdminCommonSettingsService;
    }());
    RxAdminCommonSettingsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAdminCommonSettingsService, deps: [{ token: i2__namespace.RxAdminSettingsService }, { token: i4__namespace.TranslateService }, { token: i2__namespace.RxNotificationService }, { token: i1__namespace.RxModalService }, { token: i3__namespace.RxNumberUtilsService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxAdminCommonSettingsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAdminCommonSettingsService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAdminCommonSettingsService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i2__namespace.RxAdminSettingsService }, { type: i4__namespace.TranslateService }, { type: i2__namespace.RxNotificationService }, { type: i1__namespace.RxModalService }, { type: i3__namespace.RxNumberUtilsService }]; } });

    var RxAdminFileUtilityService = /** @class */ (function () {
        function RxAdminFileUtilityService() {
        }
        RxAdminFileUtilityService.prototype.convertBase64ToFile = function (decodedString, fileName, fileType) {
            if (decodedString) {
                var buffer = lodash.map(atob(decodedString), function (symbol) { return symbol.charCodeAt(0); });
                var uint8Array = new Uint8Array(buffer);
                return new File([uint8Array], fileName, { type: fileType });
            }
            else {
                return null;
            }
        };
        RxAdminFileUtilityService.prototype.convertFileToBase64 = function (file) {
            return new rxjs.Observable(function (observer) {
                var fileReader = new FileReader();
                fileReader.onloadend = function () {
                    var base64String = lodash.last(fileReader.result.split(','));
                    observer.next(base64String);
                    observer.complete();
                };
                fileReader.onerror = function () {
                    observer.next(null);
                };
                fileReader.readAsDataURL(file);
            });
        };
        return RxAdminFileUtilityService;
    }());
    RxAdminFileUtilityService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAdminFileUtilityService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxAdminFileUtilityService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAdminFileUtilityService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAdminFileUtilityService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }] });

    var AdminCommonSettingsEditorComponent = /** @class */ (function () {
        function AdminCommonSettingsEditorComponent(rxAdminSettingsService, rxAdminFileUtilityService, rxNotificationService, rxModalService, translateService, adaptDockedPanelComponent) {
            this.rxAdminSettingsService = rxAdminSettingsService;
            this.rxAdminFileUtilityService = rxAdminFileUtilityService;
            this.rxNotificationService = rxNotificationService;
            this.rxModalService = rxModalService;
            this.translateService = translateService;
            this.ownerKeyValue = '';
            this.closeEditor = new i0.EventEmitter();
            this.busy = new i0.EventEmitter();
            this.save = new i0.EventEmitter();
            this.isInDockedPanel = false;
            this.isInDockedPanel = !!adaptDockedPanelComponent;
            this.class = this.isInDockedPanel ? 'dp-content' : '';
        }
        AdminCommonSettingsEditorComponent.prototype.ngOnInit = function () {
            var _this = this;
            var componentSettingRequest;
            this.isSettingsActionsAvailable = this.isChildSetting || lodash.some(this.groups, function (group) { return !group.supportsMultiple; });
            if (!this.isChildSetting) {
                if (!this.isNew) {
                    var componentName = this.ownerKeyValue ? this.componentName + "/" + this.ownerKeyValue : this.componentName;
                    this.busy.emit(true);
                    componentSettingRequest = this.rxAdminSettingsService.getComponentSettings(componentName).pipe(operators.tap(function (componentSettings) {
                        _this.ownerKeyValue = componentSettings.values.length ? lodash.last(componentSettings.values).ownerKeyValue1 : '';
                        _this.generalSettings = componentSettings.values;
                        _this.isNew = !Boolean(componentSettings.values.length);
                        if (!_this.assigneeGroup && componentSettings.values.length) {
                            _this.assigneeGroup = lodash.last(componentSettings.values).assigneeGroupPermission;
                        }
                        lodash.forEach(_this.groups, function (group) {
                            if (!group.supportsMultiple && !group.isComponent) {
                                _this.setGroupSettingValues(group, _this.generalSettings);
                            }
                        });
                    }), operators.switchMap(function () {
                        var childSettings$ = [];
                        if (!_this.isNew && _this.ownerKeyValue) {
                            lodash.forEach(_this.groups, function (group) {
                                childSettings$.push(_this.setChildSettings(group));
                            });
                        }
                        return rxjs.forkJoin(childSettings$);
                    }));
                }
                else {
                    lodash.forEach(this.groups, function (group) {
                        if (!group.supportsMultiple && !group.isComponent) {
                            _this.setGroupSettingValues(group, []);
                        }
                    });
                }
            }
            else {
                this.groups = lodash.cloneDeep(this.groups);
                if (!this.isNew) {
                    this.busy.emit(true);
                    componentSettingRequest = this.rxAdminSettingsService
                        .getComponentSettings(this.groups[0].name + "/" + this.childOwnerKeyValue)
                        .pipe(operators.tap(function (childCommonSettings) {
                        _this.groups[0].settings = childCommonSettings.values;
                        _this.setGroupSettingValues(_this.groups[0], _this.groups[0].settings);
                    }));
                }
                else {
                    this.setGroupSettingValues(this.groups[0], []);
                }
            }
            componentSettingRequest === null || componentSettingRequest === void 0 ? void 0 : componentSettingRequest.pipe(operators.defaultIfEmpty(null), operators.tap(function () { return _this.busy.emit(false); }), operators.catchError(function (err) {
                _this.busy.emit(false);
                return rxjs.throwError(err);
            })).subscribe();
        };
        AdminCommonSettingsEditorComponent.prototype.addNewSetting = function (group) {
            var _this = this;
            var currentGrid = this.getCurrentGrid(group.name);
            return this.openSettingsDetails({
                title: group.name,
                componentName: this.componentName,
                groups: [group],
                ownerKeyValue: this.ownerKeyValue,
                isChildSetting: true,
                onDialogApiReady: function (dialogApi) { return (_this.dialogApi = dialogApi); }
            })
                .then(function () {
                _this.dialogApi = null;
                currentGrid.api.refresh().subscribe();
            })
                .catch(function () {
                _this.dialogApi = null;
                currentGrid.api.refresh().subscribe();
            });
        };
        AdminCommonSettingsEditorComponent.prototype.getCurrentGrid = function (groupName) {
            var groupsWithGrid = lodash.filter(this.groups, 'supportsMultiple');
            var gridIndex = lodash.findIndex(groupsWithGrid, { name: groupName });
            return this.recordGridInstances.toArray()[gridIndex];
        };
        AdminCommonSettingsEditorComponent.prototype.setChildSettings = function (group) {
            var _this = this;
            if (group.isComponent) {
                if (group.supportsMultiple) {
                    group.recordGridConfig = this.getRecordGridConfig({
                        componentName: this.componentName,
                        controls: group.controls,
                        getCurrentGridFn: this.getCurrentGrid.bind(this),
                        createPermission: this.createPermission,
                        groups: [group],
                        bladeTitle: group.name,
                        ownerKeyValue: this.ownerKeyValue,
                        groupName: group.name,
                        onDialogApiReady: function (dialogApi) { return (_this.dialogApi = dialogApi); }
                    });
                }
                else {
                    return this.rxAdminSettingsService
                        .getComponentSettings(this.componentName + "/" + group.name + "/" + this.ownerKeyValue)
                        .pipe(operators.tap(function (childComponentSettings) {
                        group.settings = childComponentSettings.values;
                        _this.setGroupSettingValues(group, group.settings);
                    }));
                }
            }
            return rxjs.of(true);
        };
        AdminCommonSettingsEditorComponent.prototype.onModelChange = function (model, group) {
            group.settingValues = Object.assign(Object.assign({}, group.settingValues), model);
        };
        AdminCommonSettingsEditorComponent.prototype.setGroupSettingValues = function (group, componentSettings) {
            var _this = this;
            var settingValues = {};
            lodash.forEach(group.propertyConfigs, function (propertyConfig) {
                var componentSetting = lodash.find(componentSettings, { settingName: propertyConfig.name });
                if (componentSetting) {
                    if (componentSetting.settingValue) {
                        switch (propertyConfig.dataType) {
                            case RX_ADMIN.settingResourceTypes.attachment: {
                                settingValues[componentSetting.settingName] = [
                                    _this.rxAdminFileUtilityService.convertBase64ToFile(componentSetting.settingValue, componentSetting.fileName, componentSetting.fileType)
                                ];
                                break;
                            }
                            case RX_ADMIN.settingResourceTypes.boolean: {
                                settingValues[componentSetting.settingName] = componentSetting.settingValue === 'true';
                                break;
                            }
                            case RX_ADMIN.settingResourceTypes.decimal:
                            case RX_ADMIN.settingResourceTypes.integer: {
                                settingValues[componentSetting.settingName] = Number(componentSetting.settingValue);
                                break;
                            }
                            default: {
                                settingValues[componentSetting.settingName] = componentSetting.settingValue;
                                break;
                            }
                        }
                    }
                    else {
                        settingValues[componentSetting.settingName] = null;
                    }
                }
                else {
                    settingValues[propertyConfig.name] = propertyConfig.defaultValue;
                }
            });
            group.settingValues = Object.assign({}, settingValues);
        };
        AdminCommonSettingsEditorComponent.prototype.getSettingWithValue = function (setting, value) {
            if (Array.isArray(value)) {
                var file_1 = value[0];
                return this.rxAdminFileUtilityService.convertFileToBase64(file_1).pipe(operators.map(function (base64String) {
                    setting.fileName = file_1.name;
                    setting.fileType = file_1.type;
                    setting.settingValue = base64String;
                    return setting;
                }));
            }
            else {
                setting.settingValue = value;
                return rxjs.of(setting);
            }
        };
        AdminCommonSettingsEditorComponent.prototype.saveSettings = function () {
            var _this = this;
            var saveRequests$ = [];
            if (!this.isChildSetting) {
                if (this.isNew && this.createPermission) {
                    var generalGroups = this.groups.filter(function (group) { return !group.isComponent; });
                    var settings$_1 = [];
                    lodash.forEach(generalGroups, function (group) {
                        settings$_1 = settings$_1.concat(lodash.map(group.settingValues, function (settingValue, settingName) {
                            var propertyConfig = lodash.find(group.propertyConfigs, { name: settingName });
                            if (!lodash.isNull(settingValue) && propertyConfig && !propertyConfig.isDisabled) {
                                var setting = {
                                    componentName: _this.componentName,
                                    settingName: settingName,
                                    assigneeGroupPermission: _this.assigneeGroup
                                };
                                return _this.getSettingWithValue(setting, settingValue);
                            }
                            else {
                                return null;
                            }
                        }).filter(Boolean));
                    });
                    if (settings$_1.length) {
                        saveRequests$.push(rxjs.forkJoin(settings$_1).pipe(operators.switchMap(function (settings) { return _this.rxAdminSettingsService.createComponentSettings(_this.componentName, settings); }), operators.switchMap(function (ownerKeyValue) {
                            var requests$ = [];
                            _this.ownerKeyValue = ownerKeyValue;
                            lodash.forEach(_this.groups, function (group) {
                                requests$.push(_this.setChildSettings(group));
                            });
                            requests$.push(_this.rxAdminSettingsService.getComponentSettings(_this.componentName + "/" + ownerKeyValue).pipe(operators.tap(function (adminComponentSettings) {
                                _this.generalSettings = adminComponentSettings.values;
                            })));
                            return rxjs.forkJoin(requests$).pipe(operators.tap(function () {
                                _this.isNew = false;
                            }));
                        })));
                    }
                }
                else {
                    var generalGroups = this.groups.filter(function (group) { return !group.isComponent; });
                    var childGroups = this.groups.filter(function (group) { return group.isComponent; });
                    var generalSettings$_1 = [];
                    lodash.forEach(generalGroups, function (group) {
                        generalSettings$_1 = generalSettings$_1.concat(lodash.map(group.settingValues, function (settingValue, settingName) {
                            var propertyConfig = lodash.find(group.propertyConfigs, { name: settingName });
                            if (propertyConfig && !propertyConfig.isDisabled) {
                                var setting = lodash.find(_this.generalSettings, { settingName: settingName });
                                setting.assigneeGroupPermission = _this.assigneeGroup;
                                return _this.getSettingWithValue(setting, settingValue);
                            }
                            else {
                                return null;
                            }
                        }).filter(Boolean));
                    });
                    if (generalSettings$_1.length) {
                        saveRequests$.push(rxjs.forkJoin(generalSettings$_1).pipe(operators.switchMap(function (generalSettings) { return _this.rxAdminSettingsService.updateComponentSettings(_this.componentName + "/" + _this.ownerKeyValue, generalSettings); })));
                    }
                    var childSettings$_1 = [];
                    lodash.forEach(childGroups, function (group) {
                        if (!group.supportsMultiple) {
                            if (group.settings && group.settings.length) {
                                childSettings$_1 = childSettings$_1.concat(lodash.map(group.settingValues, function (settingValue, settingName) {
                                    var propertyConfig = lodash.find(group.propertyConfigs, { name: settingName });
                                    if (propertyConfig && !propertyConfig.isDisabled) {
                                        var setting = lodash.find(group.settings, { settingName: settingName });
                                        setting.assigneeGroupPermission = _this.assigneeGroup;
                                        return _this.getSettingWithValue(setting, settingValue);
                                    }
                                    else {
                                        return null;
                                    }
                                }).filter(Boolean));
                                saveRequests$.push(rxjs.forkJoin(childSettings$_1).pipe(operators.switchMap(function (childSettings) { return _this.rxAdminSettingsService.updateComponentSettings(group.name + "/" + lodash.last(group.settings).ownerKeyValue1, childSettings); })));
                            }
                            else {
                                childSettings$_1 = childSettings$_1.concat(lodash.map(group.settingValues, function (settingValue, settingName) {
                                    var propertyConfig = lodash.find(group.propertyConfigs, { name: settingName });
                                    if (!lodash.isNull(settingValue) && propertyConfig && !propertyConfig.isDisabled) {
                                        var childSetting = {
                                            componentName: group.name,
                                            parentComponentName: _this.componentName,
                                            settingName: settingName,
                                            ownerKeyValue2: _this.ownerKeyValue,
                                            assigneeGroupPermission: _this.assigneeGroup
                                        };
                                        return _this.getSettingWithValue(childSetting, settingValue);
                                    }
                                    else {
                                        return null;
                                    }
                                }).filter(Boolean));
                                if (childSettings$_1.length) {
                                    saveRequests$.push(rxjs.forkJoin(childSettings$_1).pipe(operators.switchMap(function (childSettings) { return _this.rxAdminSettingsService.createComponentSettings(group.name + "/" + _this.ownerKeyValue, childSettings); }), operators.switchMap(function () { return _this.setChildSettings(group); })));
                                }
                            }
                        }
                    });
                }
            }
            else {
                var childGroup_1 = this.groups[0];
                var childSettings$ = [];
                if (childGroup_1.settings && childGroup_1.settings.length) {
                    childSettings$ = childSettings$.concat(lodash.map(childGroup_1.settingValues, function (settingValue, settingName) {
                        var propertyConfig = lodash.find(childGroup_1.propertyConfigs, {
                            name: settingName
                        });
                        if (propertyConfig && !propertyConfig.isDisabled) {
                            var setting = lodash.find(childGroup_1.settings, { settingName: settingName });
                            setting.assigneeGroupPermission = _this.assigneeGroup;
                            return _this.getSettingWithValue(setting, settingValue);
                        }
                        else {
                            return null;
                        }
                    }));
                    if (childSettings$.length) {
                        saveRequests$.push(rxjs.forkJoin(childSettings$).pipe(operators.switchMap(function (childSettings) { return _this.rxAdminSettingsService.updateComponentSettings(childGroup_1.name + "/" + _this.childOwnerKeyValue, childSettings); })));
                    }
                }
                else {
                    childSettings$ = childSettings$.concat(lodash.map(childGroup_1.settingValues, function (settingValue, settingName) {
                        var propertyConfig = lodash.find(childGroup_1.propertyConfigs, { name: settingName });
                        if (!lodash.isNull(settingValue) && propertyConfig && !propertyConfig.isDisabled) {
                            var setting = {
                                componentName: childGroup_1.name,
                                parentComponentName: _this.componentName,
                                ownerKeyValue2: _this.ownerKeyValue,
                                settingName: settingName,
                                assigneeGroupPermission: _this.assigneeGroup
                            };
                            return _this.getSettingWithValue(setting, settingValue);
                        }
                        else {
                            return null;
                        }
                    }).filter(Boolean));
                    if (childSettings$.length) {
                        saveRequests$.push(rxjs.forkJoin(childSettings$).pipe(operators.switchMap(function (childSettings) { return _this.rxAdminSettingsService.createComponentSettings(childGroup_1.name + "/" + _this.ownerKeyValue, childSettings); })));
                    }
                }
            }
            if (saveRequests$.length) {
                this.busy.emit(true);
                rxjs.forkJoin(saveRequests$)
                    .pipe(operators.catchError(function (err) {
                    _this.busy.emit(false);
                    return rxjs.throwError(err);
                }))
                    .subscribe(function () {
                    _this.rxNotificationService.addSuccessMessage('Settings saved successfully.');
                    _this.forms.forEach(function (form) { return form.formGroup.markAsPristine(); });
                    _this.busy.emit(false);
                    _this.save.emit();
                });
            }
        };
        AdminCommonSettingsEditorComponent.prototype.isAbleToSave = function () {
            return (this.forms &&
                lodash.every(this.forms.toArray(), function (form) { return form.formGroup.valid; }) &&
                this.forms.some(function (form) { return form.formGroup.dirty; }));
        };
        AdminCommonSettingsEditorComponent.prototype.resetSettings = function () {
            var _this = this;
            this.rxModalService
                .confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.client.admin.reset-confirmation.message')
            })
                .then(function (response) {
                if (response) {
                    lodash.chain(_this.groups)
                        .reject(function (group) { return lodash.isEmpty(group.settingValues); })
                        .forEach(function (group) {
                        var settingValues = lodash.cloneDeep(group.settingValues);
                        lodash.forEach(group.propertyConfigs, function (propertyConfig) {
                            if (propertyConfig.dataType === RX_ADMIN.settingResourceTypes.attachment) {
                                settingValues[propertyConfig.name] = propertyConfig.defaultValue
                                    ? [
                                        _this.rxAdminFileUtilityService.convertBase64ToFile(propertyConfig.defaultValue, RX_ADMIN.defaultImages[propertyConfig.name].name, RX_ADMIN.defaultImages[propertyConfig.name].type)
                                    ]
                                    : null;
                            }
                            else {
                                settingValues[propertyConfig.name] = propertyConfig.defaultValue;
                            }
                        });
                        group.settingValues = settingValues;
                    })
                        .value();
                    _this.forms.forEach(function (form) { return form.formGroup.markAsDirty(); });
                }
            });
        };
        AdminCommonSettingsEditorComponent.prototype.onCancel = function () {
            this.closeEditor.emit();
        };
        AdminCommonSettingsEditorComponent.prototype.canClose = function () {
            var _a, _b;
            return !(((_a = this.dialogApi) === null || _a === void 0 ? void 0 : _a.isDirty()) || ((_b = this.forms) === null || _b === void 0 ? void 0 : _b.some(function (form) { return form.formGroup.dirty; })));
        };
        return AdminCommonSettingsEditorComponent;
    }());
    AdminCommonSettingsEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AdminCommonSettingsEditorComponent, deps: [{ token: i2__namespace.RxAdminSettingsService }, { token: RxAdminFileUtilityService }, { token: i2__namespace.RxNotificationService }, { token: i1__namespace.RxModalService }, { token: i4__namespace.TranslateService }, { token: i1__namespace$1.AdaptDockedPanelComponent, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AdminCommonSettingsEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: AdminCommonSettingsEditorComponent, selector: "rx-admin-common-settings-editor", inputs: { componentName: "componentName", ownerKeyValue: "ownerKeyValue", groups: "groups", createPermission: "createPermission", isNew: "isNew", isChildSetting: "isChildSetting", childOwnerKeyValue: "childOwnerKeyValue", getRecordGridConfig: "getRecordGridConfig", openSettingsDetails: "openSettingsDetails" }, outputs: { closeEditor: "closeEditor", busy: "busy", save: "save" }, host: { properties: { "class": "this.class" } }, viewQueries: [{ propertyName: "recordGridInstances", predicate: i7.RecordGridComponent, descendants: true }, { propertyName: "forms", predicate: i4.FormBuilderComponent, descendants: true }], ngImport: i0__namespace, template: "<adapt-accordion [multiselect]=\"true\" [class.dp-body]=\"isInDockedPanel\">\n  <adapt-accordion-tab\n    *ngFor=\"let commonSettingsGroup of groups; let $index = index\"\n    [isOpen]=\"$index === 0\"\n    [title]=\"commonSettingsGroup.name\"\n    [disabled]=\"isNew && commonSettingsGroup.isComponent && !isChildSetting\"\n  >\n    <div class=\"property-controls\" *ngIf=\"!commonSettingsGroup.supportsMultiple || isChildSetting\">\n      <rx-form-builder\n        [config]=\"[{ controls: commonSettingsGroup.propertyConfigs }]\"\n        (modelChange)=\"onModelChange($event, commonSettingsGroup)\"\n        [model]=\"commonSettingsGroup.settingValues\"\n        *ngIf=\"commonSettingsGroup.settingValues\"\n      ></rx-form-builder>\n    </div>\n\n    <div *ngIf=\"commonSettingsGroup.supportsMultiple && commonSettingsGroup.recordGridConfig && !isChildSetting\">\n      <button\n        *ngIf=\"createPermission\"\n        adapt-button\n        type=\"button\"\n        class=\"px-0\"\n        btn-type=\"tertiary\"\n        (click)=\"addNewSetting(commonSettingsGroup)\"\n      >\n        <span class=\"d-icon-plus_circle\"></span>\n        {{ 'com.bmc.arsys.rx.client.admin.add-new-setting.label' | translate }}\n      </button>\n      <rx-record-grid [config]=\"commonSettingsGroup.recordGridConfig\"></rx-record-grid>\n    </div>\n  </adapt-accordion-tab>\n</adapt-accordion>\n\n<div\n  [ngClass]=\"{\n    'justify-content-start': !isInDockedPanel,\n    'justify-content-end': isInDockedPanel,\n    'dp-footer': isInDockedPanel\n  }\"\n  class=\"pt-3\"\n>\n  <button\n    adapt-button\n    *ngIf=\"isSettingsActionsAvailable && createPermission\"\n    class=\"mr-2\"\n    btn-type=\"primary\"\n    type=\"button\"\n    [disabled]=\"!isAbleToSave()\"\n    (click)=\"saveSettings()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button\n    adapt-button\n    *ngIf=\"isSettingsActionsAvailable && createPermission\"\n    btn-type=\"secondary\"\n    type=\"button\"\n    (click)=\"resetSettings()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.admin.reset.label' | translate }}\n  </button>\n\n  <button adapt-button class=\"ml-2\" btn-type=\"secondary\" type=\"button\" *ngIf=\"isInDockedPanel\" (click)=\"onCancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", styles: [".property-controls{max-width:400px}\n"], components: [{ type: i1__namespace$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i4__namespace$1.FormBuilderComponent, selector: "rx-form-builder", inputs: ["config", "model", "guid", "isReadOnly", "focusEditor$"], outputs: ["modelChange", "editorEvent", "formInitialized"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], directives: [{ type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AdminCommonSettingsEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-common-settings-editor',
                        templateUrl: './admin-common-settings-editor.component.html',
                        styleUrls: ['./admin-common-settings-editor.component.scss']
                    }]
            }], ctorParameters: function () {
            return [{ type: i2__namespace.RxAdminSettingsService }, { type: RxAdminFileUtilityService }, { type: i2__namespace.RxNotificationService }, { type: i1__namespace.RxModalService }, { type: i4__namespace.TranslateService }, { type: i1__namespace$1.AdaptDockedPanelComponent, decorators: [{
                            type: i0.Optional
                        }] }];
        }, propDecorators: { componentName: [{
                    type: i0.Input
                }], ownerKeyValue: [{
                    type: i0.Input
                }], groups: [{
                    type: i0.Input
                }], createPermission: [{
                    type: i0.Input
                }], isNew: [{
                    type: i0.Input
                }], isChildSetting: [{
                    type: i0.Input
                }], childOwnerKeyValue: [{
                    type: i0.Input
                }], getRecordGridConfig: [{
                    type: i0.Input
                }], openSettingsDetails: [{
                    type: i0.Input
                }], closeEditor: [{
                    type: i0.Output
                }], busy: [{
                    type: i0.Output
                }], save: [{
                    type: i0.Output
                }], recordGridInstances: [{
                    type: i0.ViewChildren,
                    args: [i7.RecordGridComponent]
                }], forms: [{
                    type: i0.ViewChildren,
                    args: [i4.FormBuilderComponent]
                }], class: [{
                    type: i0.HostBinding,
                    args: ['class']
                }] } });

    var AdminCommonSettingsBladeComponent = /** @class */ (function (_super) {
        __extends(AdminCommonSettingsBladeComponent, _super);
        function AdminCommonSettingsBladeComponent(context, injector, rxAdminCommonSettingsService) {
            var _this = _super.call(this, context, injector) || this;
            _this.context = context;
            _this.injector = injector;
            _this.rxAdminCommonSettingsService = rxAdminCommonSettingsService;
            _this.busySubscription = null;
            _this.getRecordGridConfig = _this.getRecordGridConfig.bind(_this);
            _this.openSettingsDetails = _this.openSettingsDetails.bind(_this);
            return _this;
        }
        AdminCommonSettingsBladeComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            var data = this.context.getData();
            this.groups = lodash.cloneDeep(data.config.groups);
            this.isNew = data.config.isNew;
            this.ownerKeyValue = data.config.ownerKeyValue;
            this.childOwnerKeyValue = data.config.childOwnerKeyValue;
            this.componentName = data.config.componentName;
            this.isChildSetting = data.config.isChildSetting;
        };
        AdminCommonSettingsBladeComponent.prototype.isDirty = function () {
            return this.adminCommonSettingsEditorComponent ? !this.adminCommonSettingsEditorComponent.canClose() : false;
        };
        AdminCommonSettingsBladeComponent.prototype.onCloseEditor = function () {
            this.context.dismiss(i1$2.DismissReasons.CLOSE_BTN);
        };
        AdminCommonSettingsBladeComponent.prototype.onBusy = function (isBusy) {
            var _a;
            if (isBusy) {
                this.busySubscription = rxjs.NEVER.subscribe();
            }
            else {
                (_a = this.busySubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
            }
        };
        AdminCommonSettingsBladeComponent.prototype.getRecordGridConfig = function (options) {
            return this.rxAdminCommonSettingsService.getRecordGridConfig(options);
        };
        AdminCommonSettingsBladeComponent.prototype.openSettingsDetails = function (options) {
            return this.rxAdminCommonSettingsService.openSettingsDetails(options);
        };
        AdminCommonSettingsBladeComponent.prototype.onSave = function () {
            this.context.close(null);
        };
        return AdminCommonSettingsBladeComponent;
    }(i1$1.RxModalClass));
    AdminCommonSettingsBladeComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AdminCommonSettingsBladeComponent, deps: [{ token: i1__namespace$1.DockedPanelContext }, { token: i0__namespace.Injector }, { token: RxAdminCommonSettingsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AdminCommonSettingsBladeComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: AdminCommonSettingsBladeComponent, selector: "rx-admin-common-settings-blade", viewQueries: [{ propertyName: "adminCommonSettingsEditorComponent", first: true, predicate: ["editor"], descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<rx-admin-settings [busy]=\"busySubscription\">\n  <rx-admin-common-settings-editor\n    #editor\n    [componentName]=\"componentName\"\n    [isNew]=\"isNew\"\n    [groups]=\"groups\"\n    [isChildSetting]=\"isChildSetting\"\n    [ownerKeyValue]=\"ownerKeyValue\"\n    [childOwnerKeyValue]=\"childOwnerKeyValue\"\n    [createPermission]=\"true\"\n    [getRecordGridConfig]=\"getRecordGridConfig\"\n    [openSettingsDetails]=\"openSettingsDetails\"\n    (closeEditor)=\"onCloseEditor()\"\n    (busy)=\"onBusy($event)\"\n    (save)=\"onSave()\"\n  ></rx-admin-common-settings-editor>\n</rx-admin-settings>\n", styles: ["rx-admin-settings{padding:0!important}\n"], components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: AdminCommonSettingsEditorComponent, selector: "rx-admin-common-settings-editor", inputs: ["componentName", "ownerKeyValue", "groups", "createPermission", "isNew", "isChildSetting", "childOwnerKeyValue", "getRecordGridConfig", "openSettingsDetails"], outputs: ["closeEditor", "busy", "save"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AdminCommonSettingsBladeComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-common-settings-blade',
                        templateUrl: './admin-common-settings-blade.component.html',
                        styleUrls: ['./admin-common-settings-blade.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.DockedPanelContext }, { type: i0__namespace.Injector }, { type: RxAdminCommonSettingsService }]; }, propDecorators: { adminCommonSettingsEditorComponent: [{
                    type: i0.ViewChild,
                    args: ['editor']
                }] } });

    var AdminCommonSettingsComponent = /** @class */ (function () {
        function AdminCommonSettingsComponent(rxModalService, rxAdminSettingsService, rxAdminCommonSettingsService) {
            this.rxModalService = rxModalService;
            this.rxAdminSettingsService = rxAdminSettingsService;
            this.rxAdminCommonSettingsService = rxAdminCommonSettingsService;
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.getRecordGridConfig = this.getRecordGridConfig.bind(this);
            this.openSettingsDetails = this.openSettingsDetails.bind(this);
        }
        AdminCommonSettingsComponent.prototype.ngOnInit = function () {
            var _this = this;
            var busySubject;
            this.componentName$
                .pipe(operators.filter(Boolean), operators.tap(function (componentName) {
                busySubject = new rxjs.Subject();
                _this.componentName = componentName;
                _this.state = null;
                _this.busySubscription = busySubject.pipe(operators.take(1)).subscribe();
            }), operators.switchMap(function (componentName) { return _this.rxAdminSettingsService.getComponentDefinition(componentName); }), operators.tap(function (adminComponentDefinition) {
                _this.navigationMenuLabel = adminComponentDefinition.header;
            }), operators.switchMap(function (adminComponentDefinition) {
                var state = {
                    headerLabel: adminComponentDefinition.header,
                    createPermission: adminComponentDefinition.createPermission,
                    componentName: adminComponentDefinition.compName,
                    supportsMultiple: false,
                    commonSettingGroups: []
                };
                var commonSettingGroups$ = [];
                lodash.forEach(adminComponentDefinition.groups, function (group) {
                    var propertyConfigs$ = [];
                    var commonSettingGroup = {
                        name: group.name,
                        supportsMultiple: group.supportsMultiple,
                        isComponent: group.component,
                        settings: []
                    };
                    if (commonSettingGroup.isComponent) {
                        propertyConfigs$.push(_this.rxAdminSettingsService.getComponentDefinition(group.name).pipe(operators.map(function (childAdminComponentDefinition) {
                            var childGroup = childAdminComponentDefinition.groups[0];
                            if (commonSettingGroup.supportsMultiple) {
                                commonSettingGroup.controls = childGroup.controls;
                            }
                            return childGroup.controls.map(function (control) { return _this.rxAdminCommonSettingsService.createPropertyConfig(control); });
                        })));
                    }
                    else {
                        lodash.forEach(group.controls, function (control) {
                            propertyConfigs$.push(rxjs.of(_this.rxAdminCommonSettingsService.createPropertyConfig(control)));
                        });
                    }
                    commonSettingGroups$.push(rxjs.forkJoin(propertyConfigs$).pipe(operators.map(function (propertyConfigs) {
                        commonSettingGroup.propertyConfigs = lodash.flatten(propertyConfigs);
                        return commonSettingGroup;
                    })));
                });
                return commonSettingGroups$.length
                    ? rxjs.forkJoin(commonSettingGroups$).pipe(operators.map(function (commonSettingGroups) {
                        state.commonSettingGroups = commonSettingGroups;
                        if (adminComponentDefinition.supportsMultiple) {
                            state.supportsMultiple = true;
                            var controls = lodash.flatten(adminComponentDefinition.groups.filter(function (group) { return !group.component; }).map(function (group) { return group.controls; }));
                            state.recordGridConfig = _this.rxAdminCommonSettingsService
                                .getRecordGridConfig({
                                componentName: state.componentName,
                                controls: controls,
                                getCurrentGridFn: _this.getCurrentGrid.bind(_this),
                                createPermission: state.createPermission,
                                groups: state.commonSettingGroups,
                                bladeTitle: state.headerLabel,
                                ownerKeyValue: null,
                                groupName: null,
                                onDialogApiReady: function (dialogApi) { return (_this.dialogApi = dialogApi); }
                            })
                                .pipe(operators.map(function (recordGridConfig) { return (Object.assign(Object.assign({}, recordGridConfig), { styles: 'h-auto flex-fill mw-100' })); }));
                        }
                        return state;
                    }))
                    : rxjs.of(null);
            }), operators.takeUntil(this.destroyed$))
                .subscribe(function (state) {
                _this.state = state;
                busySubject.next();
            });
        };
        AdminCommonSettingsComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        AdminCommonSettingsComponent.prototype.addNewSetting = function () {
            var _this = this;
            this.rxAdminCommonSettingsService
                .openSettingsDetails({
                title: this.state.headerLabel,
                componentName: this.componentName,
                groups: this.state.commonSettingGroups,
                onDialogApiReady: function (dialogApi) { return (_this.dialogApi = dialogApi); }
            })
                .then(function () {
                _this.dialogApi = null;
                _this.recordGridComponent.api.refresh().subscribe();
            })
                .catch(function () {
                _this.dialogApi = null;
            });
        };
        AdminCommonSettingsComponent.prototype.onBusy = function (isBusy) {
            var _a;
            if (isBusy) {
                this.busySubscription = rxjs.NEVER.subscribe();
            }
            else {
                (_a = this.busySubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
            }
        };
        AdminCommonSettingsComponent.prototype.getRecordGridConfig = function (options) {
            return this.rxAdminCommonSettingsService.getRecordGridConfig(options);
        };
        AdminCommonSettingsComponent.prototype.openSettingsDetails = function (options) {
            return this.rxAdminCommonSettingsService.openSettingsDetails(options);
        };
        AdminCommonSettingsComponent.prototype.getCurrentGrid = function () {
            return this.recordGridComponent;
        };
        AdminCommonSettingsComponent.prototype.canClose = function () {
            var _a, _b, _c;
            return Boolean((_b = (_a = this.adminCommonSettingsEditorComponent) === null || _a === void 0 ? void 0 : _a.canClose()) !== null && _b !== void 0 ? _b : !((_c = this.dialogApi) === null || _c === void 0 ? void 0 : _c.isDirty()));
        };
        return AdminCommonSettingsComponent;
    }());
    AdminCommonSettingsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AdminCommonSettingsComponent, deps: [{ token: i1__namespace.RxModalService }, { token: i2__namespace.RxAdminSettingsService }, { token: RxAdminCommonSettingsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AdminCommonSettingsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: AdminCommonSettingsComponent, selector: "rx-admin-common-settings", inputs: { componentName$: "componentName$" }, viewQueries: [{ propertyName: "recordGridComponent", first: true, predicate: i7.RecordGridComponent, descendants: true }, { propertyName: "adminCommonSettingsEditorComponent", first: true, predicate: AdminCommonSettingsEditorComponent, descendants: true }], ngImport: i0__namespace, template: "<rx-admin-settings [busy]=\"busySubscription\" [header]=\"state?.headerLabel || navigationMenuLabel\">\n  <div *ngIf=\"!state\" class=\"d-flex align-items-center justify-content-center h-100\">\n    <adapt-empty-state\n      [type]=\"'config'\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.no-settings-available.message' | translate }}\"\n    ></adapt-empty-state>\n  </div>\n\n  <div *ngIf=\"state\" class=\"d-flex flex-column align-items-start flex-fill\">\n    <ng-container *ngIf=\"state.supportsMultiple\">\n      <button *ngIf=\"state.createPermission\" adapt-button type=\"button\" btn-type=\"tertiary\" (click)=\"addNewSetting()\">\n        <span class=\"d-icon-plus_circle\"></span>\n        {{ 'com.bmc.arsys.rx.client.admin.add-new-setting.label' | translate }}\n      </button>\n\n      <rx-record-grid [config]=\"state.recordGridConfig\"></rx-record-grid>\n    </ng-container>\n\n    <div class=\"flex-fill w-100\" *ngIf=\"!state.supportsMultiple\">\n      <rx-admin-common-settings-editor\n        [componentName]=\"state.componentName\"\n        [groups]=\"state.commonSettingGroups\"\n        [isNew]=\"false\"\n        [createPermission]=\"state.createPermission\"\n        [getRecordGridConfig]=\"getRecordGridConfig\"\n        [openSettingsDetails]=\"openSettingsDetails\"\n        (busy)=\"onBusy($event)\"\n      ></rx-admin-common-settings-editor>\n    </div>\n  </div>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: AdminCommonSettingsEditorComponent, selector: "rx-admin-common-settings-editor", inputs: ["componentName", "ownerKeyValue", "groups", "createPermission", "isNew", "isChildSetting", "childOwnerKeyValue", "getRecordGridConfig", "openSettingsDetails"], outputs: ["closeEditor", "busy", "save"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AdminCommonSettingsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-common-settings',
                        templateUrl: './admin-common-settings.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.RxModalService }, { type: i2__namespace.RxAdminSettingsService }, { type: RxAdminCommonSettingsService }]; }, propDecorators: { componentName$: [{
                    type: i0.Input
                }], recordGridComponent: [{
                    type: i0.ViewChild,
                    args: [i7.RecordGridComponent]
                }], adminCommonSettingsEditorComponent: [{
                    type: i0.ViewChild,
                    args: [AdminCommonSettingsEditorComponent]
                }] } });

    var RxAdminSettingsExplorerService = /** @class */ (function () {
        function RxAdminSettingsExplorerService(rxAdminSettingsService) {
            this.rxAdminSettingsService = rxAdminSettingsService;
        }
        RxAdminSettingsExplorerService.prototype.getNavigationTreeConfig = function () {
            return this.rxAdminSettingsService.getAdminNavigationMenuItems().pipe(operators.map(this.buildTreeNodes.bind(this)));
        };
        RxAdminSettingsExplorerService.prototype.buildTreeNodes = function (administrationNavigationMenuItems, parent) {
            var _this = this;
            return (administrationNavigationMenuItems || [])
                .filter(function (navigationMenuItem) { return navigationMenuItem.compName !== 'com.bmc.arsys.rx.settings'; })
                .sort(function (item1, item2) { return item1.label.localeCompare(item2.label); })
                .map(function (navigationMenuItem) {
                var treeMenuItem = {
                    label: navigationMenuItem.label,
                    data: navigationMenuItem,
                    expanded: false,
                    selectable: Boolean(navigationMenuItem.guid),
                    key: lodash.uniqueId()
                };
                treeMenuItem.children =
                    navigationMenuItem.items && navigationMenuItem.items.length
                        ? _this.buildTreeNodes(navigationMenuItem.items, treeMenuItem)
                        : [];
                if (parent) {
                    treeMenuItem.parent = parent;
                }
                return treeMenuItem;
            });
        };
        return RxAdminSettingsExplorerService;
    }());
    RxAdminSettingsExplorerService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAdminSettingsExplorerService, deps: [{ token: i2__namespace.RxAdminSettingsService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxAdminSettingsExplorerService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAdminSettingsExplorerService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAdminSettingsExplorerService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i2__namespace.RxAdminSettingsService }]; } });

    var AdminSettingViewType;
    (function (AdminSettingViewType) {
        AdminSettingViewType["RuntimeView"] = "runtimeView";
        AdminSettingViewType["SharedView"] = "sharedView";
    })(AdminSettingViewType || (AdminSettingViewType = {}));
    var AdminSettingLinkType;
    (function (AdminSettingLinkType) {
        AdminSettingLinkType["InBundle"] = "inBundle";
        AdminSettingLinkType["External"] = "external";
    })(AdminSettingLinkType || (AdminSettingLinkType = {}));

    var AdminSettingsExplorerComponent = /** @class */ (function () {
        function AdminSettingsExplorerComponent(rxAdminSettingsExplorerService, rxAdminSettingsService, rxGlobalCacheService, router, rxBundleCacheService, activatedRoute, rxPageTitleService, rxRuntimeViewRegistryService, rxUtilityModalsService, rxComponentCanDeactivateGuard, changeDetector, translateService, rxGainsightConfiguratorService) {
            this.rxAdminSettingsExplorerService = rxAdminSettingsExplorerService;
            this.rxAdminSettingsService = rxAdminSettingsService;
            this.rxGlobalCacheService = rxGlobalCacheService;
            this.router = router;
            this.rxBundleCacheService = rxBundleCacheService;
            this.activatedRoute = activatedRoute;
            this.rxPageTitleService = rxPageTitleService;
            this.rxRuntimeViewRegistryService = rxRuntimeViewRegistryService;
            this.rxUtilityModalsService = rxUtilityModalsService;
            this.rxComponentCanDeactivateGuard = rxComponentCanDeactivateGuard;
            this.changeDetector = changeDetector;
            this.translateService = translateService;
            this.rxGainsightConfiguratorService = rxGainsightConfiguratorService;
            this.adminSettingViewType = AdminSettingViewType;
            this.componentName$ = new rxjs.BehaviorSubject('');
            this.treeWrap = i1$2.TreeWrap.WrapAll;
            this.emptyStateLabel = this.translateService.instant('com.bmc.arsys.rx.client.admin.admin-settings-explorer.select-from-settings.label');
            this.texts = {
                filterPlaceholder: this.translateService.instant('com.bmc.arsys.rx.client.common.search.label')
            };
            this.destroyed$ = new rxjs.ReplaySubject(1);
        }
        Object.defineProperty(AdminSettingsExplorerComponent.prototype, "selectedTreeNode", {
            get: function () {
                return this.selectedTreeNodeValue;
            },
            set: function (node) {
                var _this = this;
                if (node.data.guid) {
                    var prevGuid_1 = this.currentSettingGuid;
                    this.currentSettingGuid = node.data.guid;
                    this.router
                        .navigate([node.data.guid], { relativeTo: this.activatedRoute.parent })
                        .then(function (isNavigationSucceeded) {
                        if (isNavigationSucceeded) {
                            _this.selectedTreeNodeValue = node;
                            _this.displayView(node.data);
                        }
                        else {
                            _this.currentSettingGuid = prevGuid_1;
                        }
                    });
                }
            },
            enumerable: false,
            configurable: true
        });
        AdminSettingsExplorerComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.rxComponentCanDeactivateGuard.setPageComponent(this);
            rxjs.combineLatest([
                this.activatedRoute.params.pipe(operators.pluck('settingGuid')),
                this.rxAdminSettingsExplorerService.getNavigationTreeConfig()
            ])
                .pipe(operators.filter(function (_b) {
                var _c = __read(_b, 2), settingGuid = _c[0], administrationNavigationTree = _c[1];
                return settingGuid !== _this.currentSettingGuid;
            }), operators.takeUntil(this.destroyed$))
                .subscribe(function (_b) {
                var _c = __read(_b, 2), settingGuid = _c[0], administrationNavigationTree = _c[1];
                if (!_this.navigationTree) {
                    _this.navigationTree = administrationNavigationTree;
                }
                _this.currentSettingGuid = settingGuid;
                if (settingGuid !== 'root' && _this.navigationTree.length) {
                    _this.selectedTreeNodeValue = _this.findSelectedNode(settingGuid, _this.navigationTree);
                    if (_this.selectedTreeNodeValue) {
                        _this.expandParentNodes(_this.selectedTreeNodeValue);
                        _this.displayView(_this.selectedTreeNodeValue.data);
                    }
                }
                else {
                    _this.selectedTreeNodeValue = null;
                    _this.viewType = null;
                    _this.setPageTitle();
                }
            });
            if (this.rxGlobalCacheService.applicationId === i2.RX_APPLICATION.innovationStudioBundleId) {
                this.rxGainsightConfiguratorService.updateGlobalContext({
                    subProductLevel1: {
                        name: 'Design'
                    },
                    subProductLevel2: {
                        name: 'Administration'
                    }
                });
            }
            else {
                // Clear the global context for runtime administration
                this.rxGainsightConfiguratorService.removeGlobalContext(null);
            }
        };
        AdminSettingsExplorerComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
            this.rxComponentCanDeactivateGuard.setPageComponent(null);
            this.rxGainsightConfiguratorService.removeGlobalContext(['subProductLevel2']);
        };
        AdminSettingsExplorerComponent.prototype.canDeactivate = function () {
            if (this.adminCommonSettingsComponent) {
                return this.adminCommonSettingsComponent.canClose();
            }
            else {
                return lodash.every(this.rxRuntimeViewRegistryService.getAll(), function (runtimeView) { return runtimeView.canClose(); });
            }
        };
        AdminSettingsExplorerComponent.prototype.confirmDeactivation = function () {
            return this.rxUtilityModalsService.confirmUnsavedChanges();
        };
        AdminSettingsExplorerComponent.prototype.onBeforeLoad = function () {
            this.busySubscription = rxjs.NEVER.subscribe();
            // workaround: run changeDetector to avoid the ExpressionChangedAfterItHasBeenCheckedError
            this.changeDetector.detectChanges();
        };
        AdminSettingsExplorerComponent.prototype.onAfterLoad = function () {
            var _a;
            (_a = this.busySubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        };
        AdminSettingsExplorerComponent.prototype.setPageTitle = function (componentSettingLabel) {
            var titleParts = [
                componentSettingLabel,
                this.rxGlobalCacheService.applicationId === i2.RX_APPLICATION.innovationStudioBundleId
                    ? this.translateService.instant('com.bmc.arsys.rx.client.common.administration.label')
                    : this.translateService.instant('com.bmc.arsys.rx.client.common.settings.label')
            ];
            this.rxPageTitleService.set(titleParts, this.rxGlobalCacheService.applicationId);
        };
        AdminSettingsExplorerComponent.prototype.findSelectedNode = function (settingGuid, sourceTree) {
            var _this = this;
            var selectedNode;
            lodash.forEach(sourceTree, function (node) {
                if (node.data.guid === settingGuid) {
                    selectedNode = node;
                    return false;
                }
                else {
                    selectedNode = _this.findSelectedNode(settingGuid, node.children);
                    if (selectedNode) {
                        return false;
                    }
                }
            });
            return selectedNode;
        };
        AdminSettingsExplorerComponent.prototype.expandParentNodes = function (node) {
            if (node.parent) {
                node.parent.expanded = true;
                if (node.parent.parent) {
                    this.expandParentNodes(node.parent);
                }
            }
        };
        AdminSettingsExplorerComponent.prototype.displayView = function (adminNavigationMenuItem) {
            this.setPageTitle(adminNavigationMenuItem.label);
            this.rxBundleCacheService.bundleId = adminNavigationMenuItem.defaultBundleScope;
            if (adminNavigationMenuItem.isCustom) {
                if (adminNavigationMenuItem.linkType === AdminSettingLinkType.InBundle) {
                    this.viewType = AdminSettingViewType.RuntimeView;
                    this.runtimeViewConfig = { viewDefinitionName: adminNavigationMenuItem.registeredModuleName };
                }
                else if (adminNavigationMenuItem.linkType === AdminSettingLinkType.External) {
                    window.open(adminNavigationMenuItem.externalLink, '_blank');
                    this.viewType = null;
                    this.emptyStateLabel = this.translateService.instant('com.bmc.arsys.rx.client.admin.external-settings.empty-state.label');
                }
            }
            else {
                this.componentName$.next(adminNavigationMenuItem.compName);
                this.viewType = AdminSettingViewType.SharedView;
            }
        };
        return AdminSettingsExplorerComponent;
    }());
    AdminSettingsExplorerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AdminSettingsExplorerComponent, deps: [{ token: RxAdminSettingsExplorerService }, { token: i2__namespace.RxAdminSettingsService }, { token: i2__namespace.RxGlobalCacheService }, { token: i3__namespace$1.Router }, { token: i2__namespace.RxBundleCacheService }, { token: i3__namespace$1.ActivatedRoute }, { token: i2__namespace.RxPageTitleService }, { token: i4__namespace$2.RxRuntimeViewRegistryService }, { token: i1__namespace.RxUtilityModalsService }, { token: i2__namespace.RxComponentCanDeactivateGuard }, { token: i0__namespace.ChangeDetectorRef }, { token: i4__namespace.TranslateService }, { token: i4__namespace$1.RxGainsightConfiguratorService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AdminSettingsExplorerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: AdminSettingsExplorerComponent, selector: "rx-admin-settings-explorer", providers: [RxAdminSettingsExplorerService], viewQueries: [{ propertyName: "adminCommonSettingsComponent", first: true, predicate: AdminCommonSettingsComponent, descendants: true }], ngImport: i0__namespace, template: "<div class=\"position-relative busy-indicator\">\n  <rx-busy-indicator\n    [options]=\"{\n      busy: busySubscription,\n      loaderType: 'lineLoader',\n      delay: 250,\n      backdrop: false,\n      message: null\n    }\"\n  >\n  </rx-busy-indicator>\n</div>\n\n<adapt-sidebar [openedId]=\"0\" [adjustMainContainerWidth]=\"true\">\n  <adapt-sidebar-item\n    [iconClass]=\"'d-icon-layout_preview'\"\n    [headerTitle]=\"'com.bmc.arsys.rx.client.common.settings.label' | translate\"\n    [aria-label]=\"'com.bmc.arsys.rx.client.common.settings.label' | translate\"\n  >\n    <adapt-tree\n      *ngIf=\"navigationTree\"\n      [value]=\"navigationTree\"\n      selectionMode=\"single\"\n      [(selection)]=\"selectedTreeNode\"\n      [filter]=\"true\"\n      [texts]=\"texts\"\n      [wrap]=\"treeWrap\"\n    >\n    </adapt-tree>\n  </adapt-sidebar-item>\n\n  <div class=\"main rx-administration-settings-view\">\n    <rx-runtime-view\n      *ngIf=\"viewType === adminSettingViewType.RuntimeView\"\n      [configuration]=\"runtimeViewConfig\"\n      (beforeLoad)=\"onBeforeLoad()\"\n      (afterLoad)=\"onAfterLoad()\"\n    ></rx-runtime-view>\n\n    <rx-admin-common-settings\n      *ngIf=\"viewType === adminSettingViewType.SharedView\"\n      [componentName$]=\"componentName$\"\n    ></rx-admin-common-settings>\n\n    <div *ngIf=\"!viewType\" class=\"d-flex align-items-center justify-content-center h-100\">\n      <adapt-empty-state [type]=\"'config'\" [label]=\"emptyStateLabel\"></adapt-empty-state>\n    </div>\n  </div>\n</adapt-sidebar>\n", styles: ["adapt-tree ::ng-deep .a-tree__container{margin-left:10px}adapt-sidebar ::ng-deep .adapt-sidebar-main{padding:0}adapt-sidebar ::ng-deep button.close{margin:0}.rx-administration-settings-view{height:100%;overflow:auto}.busy-indicator{bottom:2px}:host rx-runtime-view ::ng-deep rx-runtime-view-root,:host rx-runtime-view ::ng-deep .content-outlet{overflow:visible}\n"], components: [{ type: i1__namespace.RxBusyIndicatorComponent, selector: "rx-busy-indicator", inputs: ["options"] }, { type: i1__namespace$1.AdaptSidebarComponent, selector: "adapt-sidebar", inputs: ["className", "navClassName", "panelWidth", "panel2Width", "position", "theme", "widthLimit", "openedId", "adjustMainContainerWidth"], outputs: ["openedIdChange", "isPanelOpenedCurrently"], exportAs: ["adaptSidebar"] }, { type: i1__namespace$1.AdaptSidebarItemComponent, selector: "adapt-sidebar-item", inputs: ["iconClass", "headerTitle", "tooltipText", "aria-label"] }, { type: i1__namespace$1.AdaptTreeComponent, selector: "adapt-tree", inputs: ["value", "filter", "texts", "filterBtnClearText", "filterPlaceholder", "testID", "lazy", "lazyLoading", "trim", "wrap", "selectAllButton", "deselectAllButton", "treeScrollHeight", "adaptRadarDisableEventSending", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "validateDrop"], outputs: ["onNodeDrop", "lazyLoad"] }, { type: i4__namespace$2.RuntimeViewComponent, selector: "rx-runtime-view", inputs: ["configuration"], outputs: ["save", "closeView", "cancelView", "beforeLoad", "afterLoad"] }, { type: AdminCommonSettingsComponent, selector: "rx-admin-common-settings", inputs: ["componentName$"] }, { type: i1__namespace$1.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AdminSettingsExplorerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-settings-explorer',
                        templateUrl: 'admin-settings-explorer.component.html',
                        styleUrls: ['./admin-settings-explorer.component.scss'],
                        providers: [RxAdminSettingsExplorerService]
                    }]
            }], ctorParameters: function () { return [{ type: RxAdminSettingsExplorerService }, { type: i2__namespace.RxAdminSettingsService }, { type: i2__namespace.RxGlobalCacheService }, { type: i3__namespace$1.Router }, { type: i2__namespace.RxBundleCacheService }, { type: i3__namespace$1.ActivatedRoute }, { type: i2__namespace.RxPageTitleService }, { type: i4__namespace$2.RxRuntimeViewRegistryService }, { type: i1__namespace.RxUtilityModalsService }, { type: i2__namespace.RxComponentCanDeactivateGuard }, { type: i0__namespace.ChangeDetectorRef }, { type: i4__namespace.TranslateService }, { type: i4__namespace$1.RxGainsightConfiguratorService }]; }, propDecorators: { adminCommonSettingsComponent: [{
                    type: i0.ViewChild,
                    args: [AdminCommonSettingsComponent]
                }] } });

    var routes = [
        {
            path: '',
            redirectTo: 'root',
            pathMatch: 'full'
        },
        {
            path: ':settingGuid',
            component: AdminSettingsExplorerComponent,
            pathMatch: 'full',
            canDeactivate: [i2.RxComponentCanDeactivateGuard]
        }
    ];
    var AdminComponentsRoutingModule = /** @class */ (function () {
        function AdminComponentsRoutingModule() {
        }
        return AdminComponentsRoutingModule;
    }());
    AdminComponentsRoutingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AdminComponentsRoutingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AdminComponentsRoutingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AdminComponentsRoutingModule, imports: [i3__namespace$1.RouterModule], exports: [i3$2.RouterModule] });
    AdminComponentsRoutingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AdminComponentsRoutingModule, imports: [[i3$2.RouterModule.forChild(routes)], i3$2.RouterModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AdminComponentsRoutingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3$2.RouterModule.forChild(routes)],
                        exports: [i3$2.RouterModule]
                    }]
            }] });

    var RX_ISSUES = {
        issuesRecordDefinitionName: 'Reported Errors',
        issuesRecordFieldIds: {
            operationId: 70100,
            applicationName: 70101,
            messageType: 70102,
            errorNumber: 70103,
            errorMessage: 70104,
            caseId: 70106,
            caseStatus: 70107,
            relatedRecordGuid: 70108,
            userDescription: 70109,
            submittedToSupportDate: 70110,
            caseGuid: 70111,
            caseStatusRefreshDate: 70112
        },
        statusOptionValues: {
            new: 0,
            submitted: 1
        },
        linkExpiredError: {
            code: 12206,
            message: 'com.bmc.arsys.rx.client.admin.application-issues.link-expired-error.message'
        },
        notificationMessages: {
            caseStatusRefreshed: 'com.bmc.arsys.rx.client.admin.application-issues.case-status-refreshed.message',
            duplicateIssuesClosed: 'com.bmc.arsys.rx.client.admin.application-issues.duplicate-issues-closed.message',
            caseSubmitted: 'com.bmc.arsys.rx.client.admin.application-issues.case-submitted.message'
        }
    };

    var IssueDetailsComponent = /** @class */ (function () {
        function IssueDetailsComponent(dockedPanelContext) {
            this.dockedPanelContext = dockedPanelContext;
        }
        IssueDetailsComponent.prototype.ngOnInit = function () {
            this.issueFields = this.dockedPanelContext.getData();
            this.fieldIds = RX_ISSUES.issuesRecordFieldIds;
            this.coreFieldIds = i3.RX_RECORD_DEFINITION.coreFieldIds;
        };
        IssueDetailsComponent.prototype.close = function () {
            this.dockedPanelContext.close(i1$2.DismissReasons.CLOSE_BTN);
        };
        return IssueDetailsComponent;
    }());
    IssueDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IssueDetailsComponent, deps: [{ token: i1__namespace$1.DockedPanelContext }], target: i0__namespace.ɵɵFactoryTarget.Component });
    IssueDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: IssueDetailsComponent, selector: "rx-issue-detail", ngImport: i0__namespace, template: "<div class=\"dp-body\">\n  <div *ngIf=\"issueFields[fieldIds.caseId]\">\n    <h6 class=\"text-tertiary\" rx-id=\"case-id\">\n      {{ 'com.bmc.arsys.rx.client.admin.application-issues.case-id.title' | translate }}\n    </h6>\n    <p class=\"text-default\">\n      {{ issueFields[fieldIds.caseId] }}\n    </p>\n    <div class=\"row\">\n      <div class=\"col-4\">\n        <h6 class=\"title-item text-tertiary\" rx-id=\"case-status\">\n          {{ 'com.bmc.arsys.rx.client.admin.application-issues.case-status.title' | translate }}\n        </h6>\n        <p class=\"text-default\">\n          {{ issueFields.selectionFieldOptionNamesById[fieldIds.caseStatus] }}\n        </p>\n      </div>\n      <div class=\"col-4\">\n        <h6 class=\"title-item text-tertiary\" rx-id=\"case-status-modified-date\">\n          {{ 'com.bmc.arsys.rx.client.admin.application-issues.case-status-refreshed-date.title' | translate }}\n        </h6>\n        <p class=\"text-default\">\n          {{ issueFields[fieldIds.caseStatusRefreshDate] | date: 'medium' }}\n        </p>\n      </div>\n      <div class=\"col-4\">\n        <h6 class=\"title-item text-tertiary\" rx-id=\"submitted-to-support-date\">\n          {{ 'com.bmc.arsys.rx.client.admin.application-issues.submitted-date.title' | translate }}\n        </h6>\n        <p class=\"text-default\">\n          {{ issueFields[fieldIds.submittedToSupportDate] | date: 'medium' }}\n        </p>\n      </div>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-4\">\n      <h6 class=\"title-item text-tertiary\" rx-id=\"issue-status\">\n        {{ 'com.bmc.arsys.rx.client.admin.application-issues.issue-status.title' | translate }}\n      </h6>\n      <p class=\"text-default\">\n        {{ issueFields.selectionFieldOptionNamesById[coreFieldIds.status] }}\n      </p>\n    </div>\n    <div class=\"col-4\">\n      <h6 class=\"title-item text-tertiary\" rx-id=\"reported-by\">\n        {{ 'com.bmc.arsys.rx.client.admin.application-issues.reported-by.title' | translate }}\n      </h6>\n      <p class=\"text-default\">\n        {{ issueFields[coreFieldIds.createdBy] }}\n      </p>\n    </div>\n    <div class=\"col-4\">\n      <h6 class=\"title-item text-tertiary\" rx-id=\"reported-date\">\n        {{ 'com.bmc.arsys.rx.client.admin.application-issues.reported-date.title' | translate }}\n      </h6>\n      <p class=\"text-default\">\n        {{ issueFields[coreFieldIds.createdDate] | date: 'medium' }}\n      </p>\n    </div>\n  </div>\n  <h6 class=\"title-item text-tertiary\" rx-id=\"application-name\">\n    {{ 'com.bmc.arsys.rx.client.admin.application-issues.application-name.title' | translate }}\n  </h6>\n  <p class=\"text-default\">\n    {{ issueFields[fieldIds.applicationName] }}\n  </p>\n  <h6 class=\"title-item text-tertiary\" rx-id=\"error-number\">\n    {{ 'com.bmc.arsys.rx.client.admin.application-issues.error-number.title' | translate }}\n  </h6>\n  <p class=\"text-default\">\n    {{ issueFields[fieldIds.errorNumber] }}\n  </p>\n  <h6 class=\"title-item text-tertiary\" rx-id=\"error-message\">\n    {{ 'com.bmc.arsys.rx.client.admin.application-issues.error-message.title' | translate }}\n  </h6>\n  <p class=\"text-default\">\n    {{ issueFields[fieldIds.errorMessage] }}\n  </p>\n  <h6 class=\"title-item text-tertiary\" rx-id=\"short-description\">\n    {{ 'com.bmc.arsys.rx.client.admin.application-issues.user-description.title' | translate }}\n  </h6>\n  <p class=\"text-default\">\n    {{ issueFields[fieldIds.userDescription] }}\n  </p>\n  <h6 class=\"title-item text-tertiary\" rx-id=\"operation-id\">\n    {{ 'com.bmc.arsys.rx.client.admin.application-issues.operation-id.title' | translate }}\n  </h6>\n  <p class=\"text-default\">\n    {{ issueFields[fieldIds.operationId] }}\n  </p>\n  <h6 class=\"title-item text-tertiary\" rx-id=\"guid\">\n    {{ 'com.bmc.arsys.rx.client.common.guid.label' | translate }}\n  </h6>\n  <p class=\"text-default\">\n    {{ issueFields[coreFieldIds.id] }}\n  </p>\n  <div *ngIf=\"issueFields[fieldIds.relatedRecordGuid]\">\n    <h6 class=\"title-item text-tertiary\" rx-id=\"related-record-guid\">\n      {{ 'com.bmc.arsys.rx.client.admin.application-issues.related-issue-guid.title' | translate }}\n    </h6>\n    <p class=\"text-default\">\n      {{ issueFields[fieldIds.relatedRecordGuid] }}\n    </p>\n  </div>\n</div>\n<div class=\"dp-footer\">\n  <button adapt-button btn-type=\"secondary\" class=\"mr-2\" rx-id=\"close-button\" (click)=\"close()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4__namespace.TranslatePipe, "date": i8__namespace.DatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IssueDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-issue-detail',
                        templateUrl: './issue-details.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.DockedPanelContext }]; } });

    var CloseDuplicateIssuesComponent = /** @class */ (function () {
        function CloseDuplicateIssuesComponent(adaptDockedPanelService, dockedPanelContext, rxCommandFactoryService, rxNotificationService, translateService) {
            this.adaptDockedPanelService = adaptDockedPanelService;
            this.dockedPanelContext = dockedPanelContext;
            this.rxCommandFactoryService = rxCommandFactoryService;
            this.rxNotificationService = rxNotificationService;
            this.translateService = translateService;
            this.selectedIssuesGridColumns = [
                {
                    field: "" + RX_ISSUES.issuesRecordFieldIds.applicationName,
                    header: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.application-name.title')
                },
                {
                    field: "" + RX_ISSUES.issuesRecordFieldIds.errorNumber,
                    header: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.error-number.title')
                },
                {
                    field: "" + RX_ISSUES.issuesRecordFieldIds.errorMessage,
                    header: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.error-message.title'),
                    sortable: false
                }
            ];
        }
        CloseDuplicateIssuesComponent.prototype.ngOnInit = function () {
            this.selectedIssuesData = this.dockedPanelContext.getData();
            this.submittedIssuesGridConfiguration();
        };
        CloseDuplicateIssuesComponent.prototype.getSubmittedIssuesGridColumns = function () {
            var _this = this;
            return [
                {
                    fieldId: "" + RX_ISSUES.issuesRecordFieldIds.applicationName,
                    index: 0,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.application-name.title')
                },
                {
                    fieldId: "" + RX_ISSUES.issuesRecordFieldIds.errorNumber,
                    index: 1,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.error-number.title'),
                    clickable: true,
                    actions: [
                        {
                            name: function (previousActionResult, lastActionRow) { return _this.showIssueDetails(lastActionRow); }
                        }
                    ]
                },
                {
                    fieldId: "" + RX_ISSUES.issuesRecordFieldIds.errorMessage,
                    index: 2,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.error-message.title')
                },
                {
                    fieldId: "" + i3.RX_RECORD_DEFINITION.coreFieldIds.createdDate,
                    index: 3,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.reported-date.title')
                },
                {
                    fieldId: "" + RX_ISSUES.issuesRecordFieldIds.caseId,
                    index: 4,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.case-id.title')
                }
            ];
        };
        CloseDuplicateIssuesComponent.prototype.submittedIssuesGridConfiguration = function () {
            this.submittedIssuesGridConfiguration$ = rxjs.of({
                recordDefinitionName: RX_ISSUES.issuesRecordDefinitionName,
                columns: this.getSubmittedIssuesGridColumns(),
                filterExpression: "'" + i3.RX_RECORD_DEFINITION.coreFieldIds.status + "' = \"" + RX_ISSUES.statusOptionValues.submitted + "\"",
                styles: 'flex-fill'
            });
        };
        CloseDuplicateIssuesComponent.prototype.cancel = function () {
            this.dockedPanelContext.close('');
        };
        CloseDuplicateIssuesComponent.prototype.closeSelectedIssues = function () {
            var _this = this;
            var selection = lodash.head(this.submittedIssuesGrid.api.getSelectedRows());
            this.rxCommandFactoryService
                .forResourceType('com.bmc.arsys.rx.application.support.command.UpdateIssuesAsDuplicateCommand')
                .execute({
                recordId: selection[i3.RX_RECORD_DEFINITION.coreFieldIds.id],
                recordIds: lodash.map(this.dockedPanelContext.getData(), function (record) { return record[i3.RX_RECORD_DEFINITION.coreFieldIds.id]; })
            })
                .subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant(RX_ISSUES.notificationMessages.duplicateIssuesClosed));
                _this.dockedPanelContext.close('close');
            });
        };
        CloseDuplicateIssuesComponent.prototype.isCloseSelectedIssuesButtonDisabled = function () {
            return this.submittedIssuesGrid.api.getSelectedRows().length === 0;
        };
        CloseDuplicateIssuesComponent.prototype.showIssueDetails = function (rowData) {
            this.adaptDockedPanelService.open({
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.issue-details.title'),
                content: IssueDetailsComponent,
                size: 'lg',
                data: rowData
            });
        };
        return CloseDuplicateIssuesComponent;
    }());
    CloseDuplicateIssuesComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CloseDuplicateIssuesComponent, deps: [{ token: i1__namespace$1.AdaptDockedPanelService }, { token: i1__namespace$1.DockedPanelContext }, { token: i2__namespace.RxCommandFactoryService }, { token: i2__namespace.RxNotificationService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CloseDuplicateIssuesComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CloseDuplicateIssuesComponent, selector: "rx-close-duplicate-issues", viewQueries: [{ propertyName: "submittedIssuesGrid", first: true, predicate: ["submittedIssuesGrid"], descendants: true, static: true }], ngImport: i0__namespace, template: "<div class=\"dp-body d-flex flex-column\">\n  <div class=\"row\">\n    <div class=\"col-12\">\n      <h5 class=\"mt-0\">\n        {{ 'com.bmc.arsys.rx.client.admin.application-issues.selected-issues.title' | translate }}\n      </h5>\n      <adapt-table\n        rx-id=\"selected-issues-grid\"\n        [columns]=\"selectedIssuesGridColumns\"\n        [bordered]=\"true\"\n        [sortable]=\"true\"\n        [value]=\"selectedIssuesData\"\n      >\n      </adapt-table>\n    </div>\n  </div>\n  <div class=\"row flex-fill\">\n    <div class=\"col-12 d-flex flex-column\">\n      <h5>\n        {{ 'com.bmc.arsys.rx.client.admin.application-issues.duplicates.title' | translate }}\n      </h5>\n      <rx-record-grid\n        class=\"flex-fill\"\n        rx-id=\"submitted-issues-grid\"\n        #submittedIssuesGrid\n        [config]=\"submittedIssuesGridConfiguration$\"\n      ></rx-record-grid>\n    </div>\n  </div>\n</div>\n<div class=\"dp-footer\">\n  <button\n    rx-id=\"close-selected-issues-button\"\n    adapt-button\n    btn-type=\"primary\"\n    class=\"mr-2\"\n    [disabled]=\"isCloseSelectedIssuesButtonDisabled()\"\n    (click)=\"closeSelectedIssues()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.admin.application-issues.close-selected.label' | translate }}\n  </button>\n  <button adapt-button btn-type=\"secondary\" rx-id=\"cancel-button\" class=\"mr-2\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i4__namespace$3.AdaptTableComponent, selector: "adapt-table", inputs: ["sortable", "filterable", "triggerableFilters", "explicitSearchBtn", "enableReorderableRows", "suppressTooltip", "toolbarConfig", "dataColumnsColsTemplate", "dataColumnsHeaderTemplate", "dataColumnsDataCellsTemplate", "headerGroupsTemplate", "alwaysShowHeaderTooltip", "alwaysShowCellTooltip", "expandedCellClass", "expandedGroupsKeys", "nestedGroupPadding", "expandindCellInitialPadding", "groupValueDataCellTemplate", "tooltipInitialDelayMs", "tooltipClass", "rowsCustomClass", "paginatorAlign", "hasEmptyState", "enableInfiniteScrolling", "updateFirstColumnWidth", "busyConfig", "defaultFiltersMatchMode", "wrapCellText", "minBufferPx", "maxBufferPx", "testID", "headerSelectionMode", "disabledSelectedRowsCount", "disabledNotSelectedRowsCount", "disabledSelectedFilteredRowsCount", "disabledNotSelectedFilteredRowsCount", "selectedFilteredRowsCount", "totalRecordsInGroup", "disableRowSelection", "nestingStructureData", "nestingKey", "enableRowEditing", "autoScrollToTop", "paginationTexts", "toolbarTexts", "tableTexts", "filtersTexts", "headerCellMenuTexts", "texts", "loadingMore", "mergeColumns", "disabledRowSelectionResolver", "allowColumnReorderingResolver", "disableRowExpandingResolver", "rowAriaDataResolver", "tableWidthConfig", "expandedRowTemplate", "isRefreshingRowData", "value", "bordered", "paginator", "striped", "loading"], outputs: ["onLazyLoad", "rowDataRefresh", "savedRowEditing", "canceledRowEditing", "groupSelection", "allGroupedRowsSelection", "groupExpansion", "columnsVisibilityChange", "rowDragStart", "rowDragRelease", "rowDragEnd", "rowDragDrop", "export", "toolbarPopupAnimationDone"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CloseDuplicateIssuesComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-close-duplicate-issues',
                        templateUrl: './close-duplicate-issues.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.AdaptDockedPanelService }, { type: i1__namespace$1.DockedPanelContext }, { type: i2__namespace.RxCommandFactoryService }, { type: i2__namespace.RxNotificationService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { submittedIssuesGrid: [{
                    type: i0.ViewChild,
                    args: ['submittedIssuesGrid', { static: true }]
                }] } });

    var RxApplicationIssuesService = /** @class */ (function () {
        function RxApplicationIssuesService(httpClient, rxSystemConfigurationService) {
            this.httpClient = httpClient;
            this.rxSystemConfigurationService = rxSystemConfigurationService;
        }
        RxApplicationIssuesService.prototype.getIssueReportingInfo = function () {
            return this.httpClient.get('/api/rx/application/oauth/token/IssueReporting');
        };
        RxApplicationIssuesService.prototype.getIssuesResource = function () {
            return rxjs.forkJoin({
                issueReportingInfo: this.getIssueReportingInfo(),
                errorReportingInfo: this.rxSystemConfigurationService.getConfiguration('Error-Reporting-Service-Saas-Configuration')
            }).pipe(operators.map(function (data) {
                var errorReportingValue = JSON.parse(data.errorReportingInfo.value);
                var issuesResource = {
                    issueReportingInfo: data.issueReportingInfo,
                    errorReportingValue: errorReportingValue
                };
                return issuesResource;
            }));
        };
        return RxApplicationIssuesService;
    }());
    RxApplicationIssuesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxApplicationIssuesService, deps: [{ token: i1__namespace$2.HttpClient }, { token: i2__namespace.RxSystemConfigurationService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxApplicationIssuesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxApplicationIssuesService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxApplicationIssuesService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }, { type: i2__namespace.RxSystemConfigurationService }]; } });

    var SubmitIssueToSupportComponent = /** @class */ (function (_super) {
        __extends(SubmitIssueToSupportComponent, _super);
        function SubmitIssueToSupportComponent(activeModalRef, formBuilder, rxApplicationIssuesService, rxCommandFactoryService, rxModalService, rxNotificationService, rxStringService, translateService, injector) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.activeModalRef = activeModalRef;
            _this.formBuilder = formBuilder;
            _this.rxApplicationIssuesService = rxApplicationIssuesService;
            _this.rxCommandFactoryService = rxCommandFactoryService;
            _this.rxModalService = rxModalService;
            _this.rxNotificationService = rxNotificationService;
            _this.rxStringService = rxStringService;
            _this.translateService = translateService;
            _this.injector = injector;
            _this.issueSeverityOptions = [
                {
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.submit-issue-to-support.severity-critical.message'),
                    id: 1
                },
                {
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.submit-issue-to-support.severity-high.message'),
                    id: 2
                },
                {
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.submit-issue-to-support.severity-medium.message'),
                    id: 3
                },
                {
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.submit-issue-to-support.severity-low.message'),
                    id: 4
                }
            ];
            return _this;
        }
        SubmitIssueToSupportComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.submitIssueForm = this.formBuilder.group({
                description: [],
                severity: []
            });
            this.issues = this.activeModalRef.getData().issues;
            this.rxApplicationIssuesService.getIssuesResource().subscribe(function (issues) {
                var errorReportingValue = issues.errorReportingValue;
                _this.supportCentralUrl = errorReportingValue.supportCentralUrl;
            });
            this.message = this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.reported-issues.title', { numberOfIssues: this.issues.length });
        };
        SubmitIssueToSupportComponent.prototype.isDirty = function () {
            return this.submitIssueForm.dirty;
        };
        SubmitIssueToSupportComponent.prototype.initSearchQuery = function () {
            if (this.issues.length >= 1) {
                var errorMessage = this.issues[0][RX_ISSUES.issuesRecordFieldIds.errorMessage];
                var errorNumber = this.issues[0][RX_ISSUES.issuesRecordFieldIds.errorNumber];
                var applicationName = this.issues[0][RX_ISSUES.issuesRecordFieldIds.applicationName];
                var searchQuery = "?fromproduct=helixplatform#q=" + errorMessage + "%20OR%20" + errorNumber + "&t=All&sort=relevancy&f:@bmcproductname=[" + applicationName + "]";
                window.open(this.supportCentralUrl + searchQuery);
            }
        };
        SubmitIssueToSupportComponent.prototype.submit = function () {
            var _this = this;
            this.rxCommandFactoryService
                .forResourceType('com.bmc.arsys.rx.application.support.command.CreateSupportCaseCommand')
                .execute({
                description: this.submitIssueForm.get('description').value,
                recordIds: lodash.map(this.issues, i3.RX_RECORD_DEFINITION.coreFieldIds.id),
                severity: this.submitIssueForm.get('severity').value[0].id
            })
                .pipe(operators.catchError(function (error) {
                if (error.error[0].messageNumber === RX_ISSUES.linkExpiredError.code) {
                    _this.rxNotificationService.addErrorMessage(RX_ISSUES.linkExpiredError.message);
                }
                return rxjs.throwError(error);
            }))
                .subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant(RX_ISSUES.notificationMessages.caseSubmitted));
                _this.activeModalRef.close('cancel');
            });
        };
        SubmitIssueToSupportComponent.prototype.optionFormatter = function (severity) {
            return severity.name;
        };
        SubmitIssueToSupportComponent.prototype.cancel = function () {
            var _this = this;
            if (this.submitIssueForm.get('description')) {
                this.rxModalService
                    .confirm({
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                    modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                    message: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.submit-issue-to-support.cancel-submission.message')
                })
                    .then(function (data) {
                    if (data)
                        _this.activeModalRef.close();
                });
            }
            else {
                this.activeModalRef.close();
            }
        };
        return SubmitIssueToSupportComponent;
    }(i1$1.RxModalClass));
    SubmitIssueToSupportComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SubmitIssueToSupportComponent, deps: [{ token: i1__namespace$1.ActiveModalRef }, { token: i1__namespace$3.FormBuilder }, { token: RxApplicationIssuesService }, { token: i2__namespace.RxCommandFactoryService }, { token: i1__namespace.RxModalService }, { token: i2__namespace.RxNotificationService }, { token: i3__namespace.RxStringService }, { token: i4__namespace.TranslateService }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    SubmitIssueToSupportComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SubmitIssueToSupportComponent, selector: "rx-submit-issue-to-support", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"modal-body pt-0\">\n  <div class=\"row bg-info\" *ngIf=\"supportCentralUrl\">\n    <button\n      adapt-button\n      rx-id=\"knowledge-articles-button\"\n      type=\"button\"\n      class=\"btn btn-secondary m-2\"\n      size=\"xtra-small\"\n      (click)=\"initSearchQuery()\"\n    >\n      <span class=\"d-icon-lightbulb_o p-2\" aria-hidden=\"true\"></span>\n      {{\n        'com.bmc.arsys.rx.client.admin.application-issues.submit-issue-to-support.knowledge-articles.title' | translate\n      }}\n    </button>\n    <span class=\"mt-3 text-default-inverse\" rx-id=\"message\">{{\n      'com.bmc.arsys.rx.client.admin.application-issues.submit-issue-to-support.search-knowledge-articles.message'\n        | translate\n    }}</span>\n  </div>\n  <div class=\"row mt-2\">\n    <div class=\"col-md-12\">\n      <p rx-id=\"message\">{{ message }}</p>\n    </div>\n  </div>\n  <form [formGroup]=\"submitIssueForm\">\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <adapt-rx-textarea\n          rx-id=\"description\"\n          formControlName=\"description\"\n          label=\"Description\"\n          placeholder=\"Enter Issue Description\"\n          rows=\"7\"\n          required\n        ></adapt-rx-textarea>\n      </div>\n    </div>\n\n    <div class=\"row mt-4 mb-4\">\n      <div class=\"col-4\">\n        <adapt-rx-select\n          rx-id=\"severity\"\n          formControlName=\"severity\"\n          [options]=\"issueSeverityOptions\"\n          [optionFormatter]=\"optionFormatter\"\n          label=\"Severity\"\n          required\n        ></adapt-rx-select>\n      </div>\n    </div>\n  </form>\n</div>\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    btn-type=\"primary\"\n    class=\"mr-2\"\n    rx-id=\"submit-case-button\"\n    [disabled]=\"submitIssueForm.invalid\"\n    (click)=\"submit()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.admin.application-issues.submit-issue-to-support.submit-case.label' | translate }}\n  </button>\n  <button rx-id=\"cancel-button\" adapt-button btn-type=\"secondary\" class=\"mr-2\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace$1.AdaptRxTextareaComponent, selector: "adapt-rx-textarea", inputs: ["rows", "maxRows", "autocomplete", "placeholder", "size", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SubmitIssueToSupportComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-submit-issue-to-support',
                        templateUrl: './submit-issue-to-support.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ActiveModalRef }, { type: i1__namespace$3.FormBuilder }, { type: RxApplicationIssuesService }, { type: i2__namespace.RxCommandFactoryService }, { type: i1__namespace.RxModalService }, { type: i2__namespace.RxNotificationService }, { type: i3__namespace.RxStringService }, { type: i4__namespace.TranslateService }, { type: i0__namespace.Injector }]; } });

    var ApplicationIssuesAdminComponent = /** @class */ (function () {
        function ApplicationIssuesAdminComponent(adaptDockedPanelService, rxApplicationIssuesService, rxCommandFactoryService, rxCurrentUserService, rxDeleteRecordsViewActionService, translateService, rxNotificationService, rxModalService) {
            var _this = this;
            this.adaptDockedPanelService = adaptDockedPanelService;
            this.rxApplicationIssuesService = rxApplicationIssuesService;
            this.rxCommandFactoryService = rxCommandFactoryService;
            this.rxCurrentUserService = rxCurrentUserService;
            this.rxDeleteRecordsViewActionService = rxDeleteRecordsViewActionService;
            this.translateService = translateService;
            this.rxNotificationService = rxNotificationService;
            this.rxModalService = rxModalService;
            this.isAdministrator = this.rxCurrentUserService.isAdministrator();
            this.issuesRecordGridConfiguration$ = new rxjs.Observable(function (observer) {
                if (_this.isAdministrator) {
                    observer.next({
                        recordDefinitionName: RX_ISSUES.issuesRecordDefinitionName,
                        columns: _this.getIssueColumns(),
                        actionButtons: _this.getActionButtons(),
                        styles: 'flex-fill'
                    });
                }
                observer.complete();
            });
        }
        ApplicationIssuesAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.rxApplicationIssuesService.getIssuesResource().subscribe(function (issues) {
                var issueReportingInfo = issues.issueReportingInfo, errorReportingValue = issues.errorReportingValue;
                _this.issueReportingInfo = issueReportingInfo;
                _this.supportCentralUrl = errorReportingValue.supportCentralUrl;
            });
        };
        ApplicationIssuesAdminComponent.prototype.getIssueColumns = function () {
            var _this = this;
            return [
                {
                    fieldId: "" + RX_ISSUES.issuesRecordFieldIds.applicationName,
                    index: 0,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.application-name.title')
                },
                {
                    fieldId: "" + RX_ISSUES.issuesRecordFieldIds.errorNumber,
                    index: 1,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.error-number.title'),
                    clickable: true,
                    actions: [
                        {
                            name: function (previousActionResult, lastActionRow) { return _this.showIssueDetails(lastActionRow); }
                        }
                    ]
                },
                {
                    fieldId: "" + RX_ISSUES.issuesRecordFieldIds.errorMessage,
                    index: 2,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.error-message.title')
                },
                {
                    fieldId: "" + i3.RX_RECORD_DEFINITION.coreFieldIds.createdBy,
                    index: 3,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.reported-by.title')
                },
                {
                    fieldId: "" + i3.RX_RECORD_DEFINITION.coreFieldIds.createdDate,
                    index: 4,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.reported-date.title')
                },
                {
                    fieldId: "" + i3.RX_RECORD_DEFINITION.coreFieldIds.status,
                    index: 5,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.issue-status.title')
                },
                {
                    fieldId: "" + RX_ISSUES.issuesRecordFieldIds.caseId,
                    index: 6,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.case-id.title')
                },
                {
                    fieldId: "" + RX_ISSUES.issuesRecordFieldIds.caseStatus,
                    index: 7,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.case-status.title')
                },
                {
                    fieldId: "" + RX_ISSUES.issuesRecordFieldIds.caseStatusRefreshDate,
                    index: 8,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.case-status-refreshed-date.title')
                },
                {
                    fieldId: "" + i3.RX_RECORD_DEFINITION.coreFieldIds.displayId,
                    index: 9,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.id.label'),
                    visible: false
                },
                {
                    fieldId: "" + i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                    index: 10,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.guid.label'),
                    visible: false
                },
                {
                    fieldId: "" + RX_ISSUES.issuesRecordFieldIds.userDescription,
                    index: 11,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.user-description.title'),
                    visible: false
                },
                {
                    fieldId: "" + RX_ISSUES.issuesRecordFieldIds.operationId,
                    index: 12,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.operation-id.title'),
                    visible: false
                },
                {
                    fieldId: "" + RX_ISSUES.issuesRecordFieldIds.relatedRecordGuid,
                    index: 13,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.related-issue-guid.title'),
                    visible: false
                }
            ];
        };
        ApplicationIssuesAdminComponent.prototype.getActionButtons = function () {
            var _this = this;
            return [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.view-details.label'),
                    style: 'tertiary',
                    disabled: function () {
                        return _this.issuesRecordGrid.api.getSelectedRowCount() !== 1;
                    },
                    iconCls: 'search_plus',
                    actions: [
                        {
                            name: function () {
                                _this.showIssueDetails(_this.issuesRecordGrid.api.getFirstSelectedRow());
                            }
                        }
                    ]
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.search-knowledge-articles.label'),
                    style: 'tertiary',
                    disabled: function () {
                        return (!_this.supportCentralUrl ||
                            _this.issuesRecordGrid.api.getSelectedRowCount() !== 1 ||
                            _this.issuesRecordGrid.api.getSelectedRows()[0][i3.RX_RECORD_DEFINITION.coreFieldIds.status] !==
                                RX_ISSUES.statusOptionValues.new);
                    },
                    iconCls: 'search',
                    actions: [
                        {
                            name: function () {
                                var selectedRow = _this.issuesRecordGrid.api.getSelectedRows();
                                var errorMessage = selectedRow[0][RX_ISSUES.issuesRecordFieldIds.errorMessage];
                                var errorNumber = selectedRow[0][RX_ISSUES.issuesRecordFieldIds.errorNumber];
                                var applicationName = selectedRow[0][RX_ISSUES.issuesRecordFieldIds.applicationName];
                                var searchQuery = "?fromproduct=helixplatform#q=" + errorMessage + "%20OR%20" + errorNumber + "&t=All&sort=relevancy&f:@bmcproductname=[" + applicationName + "]";
                                window.open(_this.supportCentralUrl + searchQuery);
                            }
                        }
                    ]
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.submit-to-bmc.label'),
                    style: 'tertiary',
                    iconCls: 'file_arrow_right',
                    disabled: function () {
                        return (!_this.issueReportingInfo.configured ||
                            lodash.some(_this.issuesRecordGrid.api.getSelectedRows(), function (record) {
                                return record[i3.RX_RECORD_DEFINITION.coreFieldIds.status] !== RX_ISSUES.statusOptionValues.new;
                            }));
                    },
                    actions: [
                        {
                            name: function () {
                                _this.rxModalService
                                    .openModal({
                                    title: _this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.submit-to-support.title'),
                                    content: SubmitIssueToSupportComponent,
                                    size: 'default',
                                    data: {
                                        issues: _this.issuesRecordGrid.api.getSelectedRows()
                                    }
                                })
                                    .then(function (result) {
                                    if (result) {
                                        _this.issuesRecordGrid.api.refresh().subscribe();
                                    }
                                })
                                    .catch(lodash.noop);
                            }
                        }
                    ]
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.refresh-case-status.label'),
                    style: 'tertiary',
                    iconCls: 'refresh',
                    disabled: function () {
                        return (!_this.issueReportingInfo.configured ||
                            lodash.some(_this.issuesRecordGrid.api.getSelectedRows(), function (record) {
                                return !record[RX_ISSUES.issuesRecordFieldIds.caseId];
                            }));
                    },
                    actions: [
                        {
                            name: function () {
                                var selection = _this.issuesRecordGrid.api.getSelectedRows();
                                _this.rxCommandFactoryService
                                    .forResourceType('com.bmc.arsys.rx.application.support.command.UpdateSupportCaseStatusCommand')
                                    .execute({ recordIds: lodash.map(selection, i3.RX_RECORD_DEFINITION.coreFieldIds.id) })
                                    .pipe(operators.catchError(function (error) {
                                    if (error.error[0].messageNumber === RX_ISSUES.linkExpiredError.code) {
                                        _this.rxNotificationService.addErrorMessage(_this.translateService.instant(RX_ISSUES.linkExpiredError.message));
                                    }
                                    return rxjs.throwError(error);
                                }), operators.tap(function () { return _this.issuesRecordGrid.api.refresh().subscribe(); }))
                                    .subscribe(function () {
                                    _this.rxNotificationService.addSuccessMessage(_this.translateService.instant(RX_ISSUES.notificationMessages.caseStatusRefreshed));
                                });
                            }
                        }
                    ]
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.close-as-duplicates.label'),
                    style: 'tertiary',
                    iconCls: 'cross_adapt',
                    disabled: function () {
                        return lodash.some(_this.issuesRecordGrid.api.getSelectedRows(), function (record) {
                            return record[i3.RX_RECORD_DEFINITION.coreFieldIds.status] !== RX_ISSUES.statusOptionValues.new;
                        });
                    },
                    actions: [
                        {
                            name: function () {
                                _this.adaptDockedPanelService
                                    .open({
                                    title: _this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.close-duplicate-issues.title'),
                                    content: CloseDuplicateIssuesComponent,
                                    data: _this.issuesRecordGrid.api.getSelectedRows(),
                                    size: 'lg'
                                })
                                    .then(function (result) {
                                    if (result) {
                                        _this.issuesRecordGrid.api.refresh().subscribe();
                                    }
                                }, function () { });
                            }
                        }
                    ]
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                    style: 'tertiary',
                    iconCls: 'trash',
                    disabled: function () {
                        return lodash.some(_this.issuesRecordGrid.api.getSelectedRows(), function (record) {
                            return record[i3.RX_RECORD_DEFINITION.coreFieldIds.status] === RX_ISSUES.statusOptionValues.submitted;
                        });
                    },
                    actions: [
                        {
                            name: function () {
                                _this.rxDeleteRecordsViewActionService
                                    .execute({
                                    recordDefinitionName: RX_ISSUES.issuesRecordDefinitionName,
                                    records: _this.issuesRecordGrid.api
                                })
                                    .subscribe();
                            }
                        }
                    ]
                }
            ];
        };
        ApplicationIssuesAdminComponent.prototype.showIssueDetails = function (rowData) {
            this.adaptDockedPanelService.open({
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.issue-details.title'),
                content: IssueDetailsComponent,
                size: 'lg',
                data: rowData
            });
        };
        return ApplicationIssuesAdminComponent;
    }());
    ApplicationIssuesAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApplicationIssuesAdminComponent, deps: [{ token: i1__namespace$1.AdaptDockedPanelService }, { token: RxApplicationIssuesService }, { token: i2__namespace.RxCommandFactoryService }, { token: i2__namespace.RxCurrentUserService }, { token: i4__namespace$4.RxDeleteRecordsViewActionService }, { token: i4__namespace.TranslateService }, { token: i2__namespace.RxNotificationService }, { token: i1__namespace.RxModalService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ApplicationIssuesAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ApplicationIssuesAdminComponent, selector: "rx-admin-application-issues", viewQueries: [{ propertyName: "issuesRecordGrid", first: true, predicate: ["issuesRecordGrid"], descendants: true }], ngImport: i0__namespace, template: "<rx-admin-settings\n  *ngIf=\"isAdministrator\"\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.application-issues.header.title' | translate }}\"\n>\n  <rx-record-grid rx-id=\"issues-grid\" #issuesRecordGrid [config]=\"issuesRecordGridConfiguration$\"></rx-record-grid>\n</rx-admin-settings>\n\n<adapt-alert\n  *ngIf=\"!isAdministrator\"\n  class=\"p-4\"\n  [config]=\"{\n    title: 'com.bmc.arsys.rx.client.admin.access-denied.title' | translate,\n    content: 'com.bmc.arsys.rx.client.admin.access-denied.message' | translate,\n    variant: 'danger'\n  }\"\n></adapt-alert>\n", styles: [".icon-size{font-size:20px}\n"], components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1__namespace$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApplicationIssuesAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-application-issues',
                        templateUrl: './application-issues.component.html',
                        styleUrls: ['./application-issues.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.AdaptDockedPanelService }, { type: RxApplicationIssuesService }, { type: i2__namespace.RxCommandFactoryService }, { type: i2__namespace.RxCurrentUserService }, { type: i4__namespace$4.RxDeleteRecordsViewActionService }, { type: i4__namespace.TranslateService }, { type: i2__namespace.RxNotificationService }, { type: i1__namespace.RxModalService }]; }, propDecorators: { issuesRecordGrid: [{
                    type: i0.ViewChild,
                    args: ['issuesRecordGrid']
                }] } });

    var ApplicationIssuesRegistrationModule = /** @class */ (function () {
        function ApplicationIssuesRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-application-issues',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(ApplicationIssuesAdminComponent),
                name: 'Application issues',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return ApplicationIssuesRegistrationModule;
    }());
    ApplicationIssuesRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApplicationIssuesRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ApplicationIssuesRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApplicationIssuesRegistrationModule, declarations: [ApplicationIssuesAdminComponent,
            IssueDetailsComponent,
            CloseDuplicateIssuesComponent,
            SubmitIssueToSupportComponent], imports: [i1__namespace$1.AdaptAlertModule, i1$2.AdaptButtonModule,
            i1$2.AdaptRxSelectModule,
            i1$2.AdaptRxTextareaModule,
            i4$3.AdaptTableModule,
            i4.AdminSettingsModule,
            i8.CommonModule,
            i1.FormsModule,
            i1.ReactiveFormsModule,
            i7.RecordGridModule,
            i4$1.TranslateModule] });
    ApplicationIssuesRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApplicationIssuesRegistrationModule, imports: [[
                i1$2.AdaptAlertModule.forRoot(),
                i1$2.AdaptButtonModule,
                i1$2.AdaptRxSelectModule,
                i1$2.AdaptRxTextareaModule,
                i4$3.AdaptTableModule,
                i4.AdminSettingsModule,
                i8.CommonModule,
                i1.FormsModule,
                i1.ReactiveFormsModule,
                i7.RecordGridModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApplicationIssuesRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ApplicationIssuesAdminComponent,
                            IssueDetailsComponent,
                            CloseDuplicateIssuesComponent,
                            SubmitIssueToSupportComponent
                        ],
                        imports: [
                            i1$2.AdaptAlertModule.forRoot(),
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptRxSelectModule,
                            i1$2.AdaptRxTextareaModule,
                            i4$3.AdaptTableModule,
                            i4.AdminSettingsModule,
                            i8.CommonModule,
                            i1.FormsModule,
                            i1.ReactiveFormsModule,
                            i7.RecordGridModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [
                            ApplicationIssuesAdminComponent,
                            IssueDetailsComponent,
                            CloseDuplicateIssuesComponent,
                            SubmitIssueToSupportComponent
                        ]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RX_APPROVAL_CONFIGURATION = {
        selfApproval: {
            apForm: {
                name: 'AP:Form',
                fields: {
                    formName: 12000,
                    formRequestId: 10014,
                    notesField: 10009,
                    requester: 10015,
                    summary: 10002,
                    field3: 10004,
                    field4: 10005,
                    field5: 10006,
                    field6: 10007,
                    field7: 61001,
                    securityLabels: 14850
                }
            },
            mapping: {
                name: 'com.bmc.arsys.rx.approval:SelfApprovalMappingV2',
                fields: {
                    precedence: 10004,
                    qualification: 10001,
                    auditInformation: 12700,
                    recordDefinition: 10000,
                    approvalFlowName: 10002,
                    approvalFlowGuid: 10003,
                    hiddenQualification: 10006,
                    applicationBundleId: 61001
                }
            },
            flowList: {
                name: 'com.bmc.arsys.rx.approval:SelfApprovalFlowList',
                fields: {
                    recordDefinition: 10000,
                    selfApprovalFlowName: 10001,
                    selfApprovalFlowProcessDefinitionGuid: 10002
                }
            }
        },
        flowQualificationProperty: 'approvalQualification',
        approverQualificationProperty: 'approverQualification',
        noApproverProvided: 'NO_APPROVER_PROVIDED',
        signingCriteriaPercentageList: [50, 60, 70, 80, 90],
        approverCriteria: {
            oneMust: 0,
            allMust: 1,
            percentage: 2
        },
        approverTypes: {
            functionalRole: 'functionalRole',
            fieldIdentifying: 'fieldIdentifying',
            people: 'people',
            company: 'company',
            org: 'org',
            dept: 'dept',
            supportCompany: 'supportCompany',
            supportOrg: 'supportOrg',
            supportGroup: 'supportGroup'
        },
        approverFields: {
            companyField: 1000000001,
            organizationField: 1000000010,
            departmentField: 200000006,
            supportOrgField: 1000000014,
            supportGroupField: 1000000015,
            firstName: 1000000019,
            lastName: 1000000018,
            remedyLoginId: 4
        },
        valueSeparator: '_',
        approverSeparator: ';',
        levelSeparator: '[:]',
        approverFormatPrefixes: {
            people: 'U[:]',
            functionalRole: 'FR[:]',
            company: 'COM',
            companyOrg: 'COMORG',
            companyOrgDept: 'COMORGDEPT',
            supportCompany: 'SCOM',
            supportCompanyOrg: 'SCOMSORG',
            supportCompanyOrgGroup: 'SCOMSORGSGRP'
        }
    };

    var RxApprovalConfigurationService = /** @class */ (function () {
        function RxApprovalConfigurationService(httpClient, rxFunctionalRoleDataPageService) {
            this.httpClient = httpClient;
            this.rxFunctionalRoleDataPageService = rxFunctionalRoleDataPageService;
            this.selfApprovalApi = '/api/com.bmc.arsys.rx.approval/rx/application/approval/approvalmapping';
            this.registrationApi = '/api/com.bmc.arsys.rx.approval/rx/application/approval/registration';
            this.flowConfigurationApi = '/api/com.bmc.arsys.rx.approval/rx/application/approval/flowconfiguration';
        }
        RxApprovalConfigurationService.prototype.getRegisteredRecordDetails = function (registeredRecordDefinitionName) {
            return this.httpClient.get(this.registrationApi + "/" + registeredRecordDefinitionName);
        };
        RxApprovalConfigurationService.prototype.registerRecord = function (approvalRegistrationRecord) {
            return this.httpClient.post(this.registrationApi, approvalRegistrationRecord);
        };
        RxApprovalConfigurationService.prototype.updateRecord = function (approvalRegistrationRecord) {
            return this.httpClient.put(this.registrationApi + "/" + approvalRegistrationRecord.recordDefinition, approvalRegistrationRecord);
        };
        RxApprovalConfigurationService.prototype.unRegisterRecord = function (definitionName) {
            return this.httpClient.delete(this.registrationApi + "/" + encodeURIComponent(definitionName));
        };
        RxApprovalConfigurationService.prototype.createSelfApprovalConfiguration = function (configuration) {
            return this.httpClient.post(this.selfApprovalApi, configuration);
        };
        RxApprovalConfigurationService.prototype.updateSelfApprovalConfiguration = function (id, configuration) {
            return this.httpClient.put(this.selfApprovalApi + "/" + RX_APPROVAL_CONFIGURATION.selfApproval.mapping.name + "/" + id, configuration);
        };
        RxApprovalConfigurationService.prototype.deleteSelfApprovalConfiguration = function (id) {
            return this.httpClient.delete(this.selfApprovalApi + "/" + RX_APPROVAL_CONFIGURATION.selfApproval.mapping.name + "/" + id);
        };
        RxApprovalConfigurationService.prototype.getFunctionalRoles = function () {
            if (!this.functionalRoles$) {
                this.functionalRoles$ = this.rxFunctionalRoleDataPageService
                    .get({
                    params: {
                        pageSize: -1,
                        propertySelection: ['applicationName', 'name']
                    }
                })
                    .pipe(operators.map(function (response) { return response.data.map(function (role) { return ({
                    id: role.id,
                    name: role.name,
                    applicationName: role.applicationName
                }); }); }), operators.shareReplay(1));
            }
            return this.functionalRoles$;
        };
        RxApprovalConfigurationService.prototype.getApprovalFlowConfigurations = function (registeredRecordDefinition) {
            return this.httpClient.get(this.flowConfigurationApi + "/" + registeredRecordDefinition);
        };
        RxApprovalConfigurationService.prototype.updateApprovalFlowGroup = function (flowGroupName, flowGroupConfiguration, recordDefinitionName) {
            return this.httpClient.put(this.flowConfigurationApi + "/" + encodeURIComponent(recordDefinitionName) + "/flowGroupName/" + encodeURIComponent(flowGroupName), flowGroupConfiguration);
        };
        RxApprovalConfigurationService.prototype.saveApprovalFlowGroup = function (flowGroupConfiguration, recordDefinitionName) {
            return this.httpClient.post(this.flowConfigurationApi + "/" + encodeURIComponent(recordDefinitionName) + "/flowGroupName", flowGroupConfiguration);
        };
        RxApprovalConfigurationService.prototype.getApprovalFlowGroup = function (recordDefinitionName, flowGroupName) {
            return this.httpClient.get(this.flowConfigurationApi + "/" + encodeURIComponent(recordDefinitionName) + "/flowGroupName/" + encodeURIComponent(flowGroupName));
        };
        RxApprovalConfigurationService.prototype.deleteApprovalFlowGroup = function (flowGroupName, recordDefinitionName) {
            return this.httpClient.delete(this.flowConfigurationApi + "/" + encodeURIComponent(recordDefinitionName) + "/flowGroupName/" + encodeURIComponent(flowGroupName));
        };
        RxApprovalConfigurationService.prototype.getCtmPeopleFormFields = function (bundleId) {
            return this.httpClient.get("/api/com.bmc.arsys.rx.approval/rx/application/approval/recorddefinition/people/" + bundleId);
        };
        RxApprovalConfigurationService.prototype.isFunctionalRole = function (approver) {
            return approver.includes(RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.functionalRole);
        };
        RxApprovalConfigurationService.prototype.getFunctionalRoleGuid = function (approver) {
            // FR[:]AGGADG2BIX85UAQM80BBQM80BBBM9X -> AGGADG2BIX85UAQM80BBQM80BBBM9X
            return approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[1];
        };
        RxApprovalConfigurationService.prototype.isApproverPeople = function (approver) {
            // check if approver is a User, returns true for 'U[:]abc'
            return approver.includes(RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.people);
        };
        RxApprovalConfigurationService.prototype.getApproverUser = function (approver) {
            // 'U[:]abc' -> abc
            return approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[1];
        };
        RxApprovalConfigurationService.prototype.isFieldIdentifyingApprover = function (approver) {
            // checks if string is surrounded by $ e.g. $Display ID$
            return Boolean(approver.match(/\$(.*?)\$/g));
        };
        RxApprovalConfigurationService.prototype.getFieldIdentifyingApprover = function (approver) {
            // $Display ID$ -> Display ID
            return lodash.trim(approver, '$');
        };
        RxApprovalConfigurationService.prototype.getLastLabel = function (approver) {
            // finds approver name from hierarchy format e.g. returns Payroll from COMORGDEPT[:]Calbro Services[:]Human Resources[:]Payroll
            return approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator).pop();
        };
        RxApprovalConfigurationService.prototype.isCompany = function (approver) {
            // true when Approver value is prefixed by COM e.g. COM[:]Calbro Services
            return (approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[0] ===
                RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.company);
        };
        RxApprovalConfigurationService.prototype.isCompanyOrg = function (approver) {
            // true when Approver value is prefixed by COMORG e.g. COMORG[:]Calbro Services[:]Human Resources
            return (approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[0] ===
                RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.companyOrg);
        };
        RxApprovalConfigurationService.prototype.isCompanyOrgDept = function (approver) {
            // true when Approver value is prefixed by COMORGDEPT i.e. value is a department with hierarchy e.g. COMORGDEPT[:]Calbro Services[:]Human Resources[:]Payroll
            return (approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[0] ===
                RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.companyOrgDept);
        };
        RxApprovalConfigurationService.prototype.isSupportCompany = function (approver) {
            // true when Approver value is prefixed by SCOM e.g. SCOM[:]Calbro Services
            return (approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[0] ===
                RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.supportCompany);
        };
        RxApprovalConfigurationService.prototype.isSupportCompanyOrg = function (approver) {
            // true when Approver value is prefixed by SCOMSORG e.g. SCOMSORG[:]Calbro Services[:]IT Support
            return (approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[0] ===
                RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.supportCompanyOrg);
        };
        RxApprovalConfigurationService.prototype.isSupportCompanyOrgGroup = function (approver) {
            // true when Approver value is prefixed by SCOMSORGSGRP e.g. SCOMSORGSGRP[:]Calbro Services[:]IT Support[:]Backoffice Support
            return (approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[0] ===
                RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.supportCompanyOrgGroup);
        };
        return RxApprovalConfigurationService;
    }());
    RxApprovalConfigurationService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxApprovalConfigurationService, deps: [{ token: i1__namespace$2.HttpClient }, { token: i2__namespace.RxFunctionalRoleDataPageService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxApprovalConfigurationService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxApprovalConfigurationService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxApprovalConfigurationService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }, { type: i2__namespace.RxFunctionalRoleDataPageService }]; } });

    var RxApprovalExpressionConfigurator = /** @class */ (function (_super) {
        __extends(RxApprovalExpressionConfigurator, _super);
        function RxApprovalExpressionConfigurator(injector) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.translateService = _this.injector.get(i4$1.TranslateService);
            _this.rxDefinitionNameService = _this.injector.get(i2.RxDefinitionNameService);
            _this.rxRecordDefinitionCacheService = _this.injector.get(i3.RxRecordDefinitionCacheService);
            _this.rxAssociationNodeTreeDataPageService = _this.injector.get(api.RxAssociationNodeTreeDataPageService);
            _this.rxTreeService = _this.injector.get(i3$1.RxTreeService);
            _this.rxApprovalConfigurationService = _this.injector.get(RxApprovalConfigurationService);
            _this.errorHandler = _this.injector.get(i0.ErrorHandler);
            _this.commonDataDictionary$ = rxjs.of([
                {
                    label: _this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),
                    children: [
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.general-group.pill.current-user.title'),
                            icon: 'd-icon-dollar',
                            expression: '$USER$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.general-group.pill.current-date.title'),
                            icon: 'd-icon-dollar',
                            expression: '$DATE$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.general-group.pill.current-time.title'),
                            icon: 'd-icon-dollar',
                            expression: '$TIME$'
                        },
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.general-group.pill.current-date-time.title'),
                            icon: 'd-icon-dollar',
                            expression: '$TIMESTAMP$'
                        }
                    ]
                }
            ]);
            return _this;
        }
        RxApprovalExpressionConfigurator.prototype.approvalExpressionDataDictionary = function (currentRecordDefinitionName) {
            var _this = this;
            var queryParams = {
                recorddefinition: currentRecordDefinitionName
            };
            return rxjs.combineLatest([
                this.rxAssociationNodeTreeDataPageService.get({ params: queryParams }),
                this.commonDataDictionary$
            ]).pipe(operators.switchMap(function (_a) {
                var _b = __read(_a, 2), associationNodeTreeDataPage = _b[0], commonDataDictionary = _b[1];
                var associations = associationNodeTreeDataPage.data;
                var associatedRecordDefinitionNames = lodash.flow(function (approvalAssociations) { return approvalAssociations.map(function (tree) { return _this.rxTreeService.flattenTree(tree, 'children').map(function (association) { return association.value; }); }); }, compiler.flatten, function (approvalAssociations) { return approvalAssociations.map(function (association) { return association.recordDefinitionName; }); })(associations);
                var definitionRequests$ = [
                    _this.rxRecordDefinitionCacheService.getRecordDefinition(currentRecordDefinitionName)
                ];
                lodash.forEach(associatedRecordDefinitionNames, function (definitionName) {
                    definitionRequests$.push(_this.rxRecordDefinitionCacheService.getRecordDefinition(definitionName));
                });
                return rxjs.forkJoin(definitionRequests$).pipe(operators.map(function (definitions) {
                    var _a;
                    var params = {
                        definitionName: currentRecordDefinitionName,
                        definitions: definitions,
                        associationsByDefinition: (_a = {},
                            _a[currentRecordDefinitionName] = associations,
                            _a)
                    };
                    return __spreadArray([
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.record-definition.title'),
                            children: [
                                {
                                    label: _this.rxDefinitionNameService.getDisplayName(currentRecordDefinitionName),
                                    children: _this.getRecordDefinitionDataDictionary(params)
                                }
                            ]
                        }
                    ], __read(commonDataDictionary));
                }));
            }), operators.shareReplay(1));
        };
        RxApprovalExpressionConfigurator.prototype.getRecordDefinitionDataDictionary = function (params) {
            var recordDefinition = lodash.find(params.definitions, { name: params.definitionName });
            var fields = recordDefinition.fieldDefinitions.map(function (field) { return ({
                label: field.name,
                icon: 'd-icon-field_text',
                expression: params.association
                    ? '${recordContext' +
                        ((params.parentAssociationExpression || '') + "._associations.") +
                        (params.association.value.associationDefintionGuid + "." + params.association.value.nodeSide + "[0]." + field.id + "}")
                    : "'" + field.name + "'"
            }); });
            if (params.associationsByDefinition && params.associationsByDefinition[recordDefinition.name]) {
                var associatedFields = this.getAssociationDataDictionary(params);
                if (associatedFields.length) {
                    fields.unshift({
                        label: this.translateService.instant('com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.record-definition-associations.title'),
                        children: associatedFields
                    });
                }
            }
            return fields;
        };
        RxApprovalExpressionConfigurator.prototype.getAssociationDataDictionary = function (params) {
            var _this = this;
            var associations = [];
            if (params.associationsByDefinition[params.definitionName].length) {
                lodash.forEach(params.associationsByDefinition[params.definitionName], function (association) {
                    var parentAssociationExpression = '';
                    var nextDefinitionAssociations = {};
                    if (params.association) {
                        parentAssociationExpression = "._associations." + params.association.value.associationDefintionGuid + "." + params.association.value.nodeSide + "[0]";
                    }
                    var currentAssociation = lodash.find(params.associationsByDefinition[params.definitionName], function (item) {
                        return item.value.recordDefinitionName === association.value.recordDefinitionName;
                    });
                    if (currentAssociation) {
                        nextDefinitionAssociations[association.value.recordDefinitionName] = currentAssociation.children;
                    }
                    associations.push({
                        label: association.value.nodeName !== association.value.recordDefinitionName
                            ? _this.rxDefinitionNameService.getDisplayName(association.value.recordDefinitionName) + " (" + _this.rxDefinitionNameService.getDisplayName(association.value.nodeName) + ")"
                            : _this.rxDefinitionNameService.getDisplayName(association.value.nodeName),
                        children: _this.getRecordDefinitionDataDictionary({
                            definitionName: association.value.recordDefinitionName,
                            definitions: params.definitions,
                            associationsByDefinition: nextDefinitionAssociations,
                            association: association,
                            parentAssociationExpression: parentAssociationExpression
                        }),
                        expression: "${recordContext" + parentAssociationExpression + "._associations." +
                            (association.value.associationDefintionGuid + "." + association.value.nodeSide + "[0]}")
                    });
                });
            }
            return associations;
        };
        RxApprovalExpressionConfigurator.prototype.getCtmPeopleFormFields = function (registeredRecordDefinitionName) {
            var _this = this;
            return rxjs.combineLatest([
                this.rxApprovalConfigurationService
                    .getCtmPeopleFormFields(this.rxDefinitionNameService.getBundleId(registeredRecordDefinitionName || ''))
                    .pipe(operators.catchError(function (error) {
                    _this.errorHandler.handleError(error);
                    return rxjs.of(null);
                })),
                this.commonDataDictionary$
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), ctmPeopleDefinition = _b[0], commonDataDictionary = _b[1];
                var dictionary = __spreadArray([], __read(commonDataDictionary));
                if (ctmPeopleDefinition) {
                    dictionary.unshift({
                        label: _this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.people.label'),
                        children: ctmPeopleDefinition.fieldDefinitions.map(function (field) { return ({
                            label: field.name,
                            icon: 'd-icon-field_text',
                            expression: "'" + field.name + "'"
                        }); })
                    });
                }
                return dictionary;
            }), operators.shareReplay(1));
        };
        return RxApprovalExpressionConfigurator;
    }(i2.RxExpressionConfigurator));

    var RxOrganizationDataPageService = /** @class */ (function (_super) {
        __extends(RxOrganizationDataPageService, _super);
        function RxOrganizationDataPageService(injector) {
            var _this = _super.call(this, injector, 'com.bmc.arsys.rx.approval.application.datapage.OrganizationDataPageQuery') || this;
            _this.injector = injector;
            return _this;
        }
        return RxOrganizationDataPageService;
    }(i2.DataPage));
    RxOrganizationDataPageService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxOrganizationDataPageService, deps: [{ token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxOrganizationDataPageService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxOrganizationDataPageService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxOrganizationDataPageService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }]; } });

    var RxSupportOrganizationDataPageService = /** @class */ (function (_super) {
        __extends(RxSupportOrganizationDataPageService, _super);
        function RxSupportOrganizationDataPageService(injector) {
            var _this = _super.call(this, injector, 'com.bmc.arsys.rx.approval.application.datapage.SupportOrganizationDataPageQuery') || this;
            _this.injector = injector;
            return _this;
        }
        return RxSupportOrganizationDataPageService;
    }(i2.DataPage));
    RxSupportOrganizationDataPageService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxSupportOrganizationDataPageService, deps: [{ token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxSupportOrganizationDataPageService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxSupportOrganizationDataPageService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxSupportOrganizationDataPageService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }]; } });

    var FlowApproversSelectorComponent = /** @class */ (function (_super) {
        __extends(FlowApproversSelectorComponent, _super);
        function FlowApproversSelectorComponent(rxTreeService, activeModalRef, rxModalService, translateService, rxGlobalCacheService, rxRecordInstanceUtilsService, rxOrganizationDataPageService, rxSupportOrganizationDataPageService, rxApprovalConfigurationService, rxRecordDefinitionCacheService, rxRecordInstanceDataPageService, injector) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.rxTreeService = rxTreeService;
            _this.activeModalRef = activeModalRef;
            _this.rxModalService = rxModalService;
            _this.translateService = translateService;
            _this.rxGlobalCacheService = rxGlobalCacheService;
            _this.rxRecordInstanceUtilsService = rxRecordInstanceUtilsService;
            _this.rxOrganizationDataPageService = rxOrganizationDataPageService;
            _this.rxSupportOrganizationDataPageService = rxSupportOrganizationDataPageService;
            _this.rxApprovalConfigurationService = rxApprovalConfigurationService;
            _this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            _this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            _this.injector = injector;
            _this.approverTypes = [];
            _this.selectedApproverSelection = [];
            _this.selectedApprovers = [];
            _this.selectedCompanies = [];
            _this.selectedOrganizations = [];
            _this.selectedDepartments = [];
            _this.selectedSupportCompanies = [];
            _this.selectedSupportOrganizations = [];
            _this.selectedSupportGroups = [];
            _this.loadingMore = false;
            _this.pageSize = 50;
            _this.loadedUsers = [];
            _this.showLoadMoreButton = true;
            _this.treeWrap = i1$2.TreeWrap.WrapAll;
            _this.availableFields = [];
            _this.availableFunctionRolesByApplication = [];
            _this.shouldShowTree = true;
            _this.separatorArrow = ' > ';
            _this.companyLoaderFunc = _this.companyLoader.bind(_this);
            _this.organizationLoaderFunc = _this.organizationLoader.bind(_this);
            _this.departmentLoaderFunc = _this.departmentLoader.bind(_this);
            _this.supportOrganizationLoaderFunc = _this.supportOrganizationLoader.bind(_this);
            _this.supportGroupLoaderFunc = _this.supportGroupLoader.bind(_this);
            return _this;
        }
        FlowApproversSelectorComponent.prototype.isDirty = function () {
            return this.hasUserInteracted;
        };
        FlowApproversSelectorComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            this.loadUsers();
            this.loadFunctionalRoles();
            this.loadFieldIdentifyingApproversApprovers();
            this.approverTypes = [
                {
                    value: RX_APPROVAL_CONFIGURATION.approverTypes.company,
                    displayValue: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.company.label'),
                    disabled: this.activeModalRef.getData().isFieldIdentifyingApprover
                },
                {
                    value: RX_APPROVAL_CONFIGURATION.approverTypes.fieldIdentifying,
                    displayValue: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.field.identifying')
                },
                {
                    value: RX_APPROVAL_CONFIGURATION.approverTypes.functionalRole,
                    displayValue: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.functional.roles'),
                    disabled: this.activeModalRef.getData().isFieldIdentifyingApprover
                },
                {
                    value: RX_APPROVAL_CONFIGURATION.approverTypes.people,
                    displayValue: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.people.label'),
                    disabled: this.activeModalRef.getData().isFieldIdentifyingApprover
                },
                {
                    value: RX_APPROVAL_CONFIGURATION.approverTypes.supportCompany,
                    displayValue: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.support-company.label'),
                    disabled: this.activeModalRef.getData().isFieldIdentifyingApprover
                }
            ];
            this.invalidMsg = this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.field.identifying.warning');
            this.approverType = [
                lodash.find(this.approverTypes, {
                    value: this.activeModalRef.getData().isFieldIdentifyingApprover
                        ? RX_APPROVAL_CONFIGURATION.approverTypes.fieldIdentifying
                        : RX_APPROVAL_CONFIGURATION.approverTypes.functionalRole
                })
            ];
        };
        FlowApproversSelectorComponent.prototype.switchApproversTree = function () {
            this.selectedCompanies = [];
            this.selectedOrganizations = [];
            this.selectedDepartments = [];
            this.selectedSupportCompanies = [];
            this.selectedSupportOrganizations = [];
            this.selectedSupportGroups = [];
            this.availableFunctionRolesByApplication.forEach(function (application) {
                application.roles.map(function (role) { return (role.selected = false); });
            });
            this.loadedUsers.map(function (user) { return (user.selected = false); });
            this.availableFields.map(function (field) { return (field.selected = false); });
        };
        FlowApproversSelectorComponent.prototype.companyLoader = function (startIndex, pageSize, searchQuery) {
            var _this = this;
            var queryParams = {
                startIndex: startIndex,
                pageSize: pageSize,
                recorddefinition: 'COM:Company',
                propertySelection: [RX_APPROVAL_CONFIGURATION.approverFields.companyField]
            };
            if (searchQuery) {
                queryParams.queryExpression = this.getAdditionalQueryExpression(searchQuery, RX_APPROVAL_CONFIGURATION.approverFields.companyField);
            }
            return this.rxRecordInstanceDataPageService
                .post({
                params: Object.assign({ startIndex: startIndex, pageSize: pageSize }, queryParams)
            })
                .pipe(operators.map(function (companyList) { return ({
                totalSize: companyList.totalSize,
                options: companyList.data.map(function (item) { return ({
                    displayValue: item[RX_APPROVAL_CONFIGURATION.approverFields.companyField],
                    value: _this.getCompanyDataFormat(item[RX_APPROVAL_CONFIGURATION.approverFields.companyField])
                }); })
            }); }));
        };
        FlowApproversSelectorComponent.prototype.getCompanyDataFormat = function (companyName) {
            return "" + RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.company + RX_APPROVAL_CONFIGURATION.levelSeparator + companyName;
        };
        FlowApproversSelectorComponent.prototype.onToggleDropdown = function (isOpen) {
            if (!isOpen) {
                this.resetLoadedOptions();
            }
        };
        FlowApproversSelectorComponent.prototype.resetLoadedOptions = function () {
            this.paginationComponents
                .toArray()
                .forEach(function (component) { return component.resetLoadedOptions(); });
        };
        FlowApproversSelectorComponent.prototype.organizationLoader = function (startIndex, pageSize, searchQuery) {
            var queryParams = {
                startIndex: startIndex,
                pageSize: pageSize
            };
            if (searchQuery) {
                queryParams.organization = searchQuery;
            }
            else {
                queryParams.queryExpression = this.getDefaultSearchExpression();
            }
            if (this.selectedCompanies.length === 1) {
                queryParams.company = this.selectedCompanies[0].displayValue;
            }
            return this.rxOrganizationDataPageService
                .get({
                params: Object.assign({ startIndex: startIndex, pageSize: pageSize }, queryParams)
            })
                .pipe(operators.map(function (response) { return ({
                totalSize: response.totalSize,
                options: response.data.map(function (item) { return ({
                    displayValue: item.organization,
                    value: item.company
                }); })
            }); }));
        };
        FlowApproversSelectorComponent.prototype.departmentLoader = function (startIndex, pageSize, searchQuery) {
            var queryParams = {
                recorddefinition: 'CTM:People Organization',
                propertySelection: [
                    RX_APPROVAL_CONFIGURATION.approverFields.companyField,
                    RX_APPROVAL_CONFIGURATION.approverFields.organizationField,
                    RX_APPROVAL_CONFIGURATION.approverFields.departmentField
                ]
            };
            var queryList = [];
            if (searchQuery) {
                queryList.push(this.getAdditionalQueryExpression(searchQuery, RX_APPROVAL_CONFIGURATION.approverFields.departmentField));
            }
            if (this.selectedCompanies.length === 1) {
                queryList.push(this.getAdditionalQueryExpression(this.selectedCompanies[0].displayValue, RX_APPROVAL_CONFIGURATION.approverFields.companyField, true));
            }
            if (this.selectedOrganizations.length === 1) {
                queryList.push(this.getAdditionalQueryExpression(this.selectedOrganizations[0].displayValue, RX_APPROVAL_CONFIGURATION.approverFields.organizationField, true));
            }
            queryParams.queryExpression = queryList.join(' AND ');
            return this.rxRecordInstanceDataPageService
                .post({
                params: Object.assign({ startIndex: startIndex, pageSize: pageSize }, queryParams)
            })
                .pipe(operators.map(function (response) { return ({
                totalSize: response.totalSize,
                options: response.data.map(function (item) { return ({
                    displayValue: item[RX_APPROVAL_CONFIGURATION.approverFields.departmentField],
                    value: item[RX_APPROVAL_CONFIGURATION.approverFields.companyField],
                    organization: item[RX_APPROVAL_CONFIGURATION.approverFields.organizationField]
                }); })
            }); }));
        };
        FlowApproversSelectorComponent.prototype.supportOrganizationLoader = function (startIndex, pageSize, searchQuery) {
            var queryParams = {
                startIndex: startIndex,
                pageSize: pageSize
            };
            if (searchQuery) {
                queryParams.supportOrganization = searchQuery;
            }
            else {
                queryParams.queryExpression = this.getDefaultSearchExpression();
            }
            if (this.selectedSupportCompanies.length === 1) {
                queryParams.company = this.selectedSupportCompanies[0].displayValue;
            }
            return this.rxSupportOrganizationDataPageService
                .get({
                params: Object.assign({ startIndex: startIndex, pageSize: pageSize }, queryParams)
            })
                .pipe(operators.map(function (response) { return ({
                totalSize: response.totalSize,
                options: response.data.map(function (item) { return ({
                    displayValue: item.supportOrganization,
                    value: item.company
                }); })
            }); }));
        };
        FlowApproversSelectorComponent.prototype.supportGroupLoader = function (startIndex, pageSize, searchQuery) {
            var queryParams = {
                recorddefinition: 'CTM:Support Group',
                propertySelection: [
                    RX_APPROVAL_CONFIGURATION.approverFields.companyField,
                    RX_APPROVAL_CONFIGURATION.approverFields.supportOrgField,
                    RX_APPROVAL_CONFIGURATION.approverFields.supportGroupField
                ]
            };
            var queryList = [];
            if (searchQuery) {
                queryList.push(this.getAdditionalQueryExpression(searchQuery, RX_APPROVAL_CONFIGURATION.approverFields.supportGroupField));
            }
            if (this.selectedSupportCompanies.length === 1) {
                queryList.push(this.getAdditionalQueryExpression(this.selectedSupportCompanies[0].displayValue, RX_APPROVAL_CONFIGURATION.approverFields.companyField, true));
            }
            if (this.selectedSupportOrganizations.length === 1) {
                queryList.push(this.getAdditionalQueryExpression(this.selectedSupportOrganizations[0].displayValue, RX_APPROVAL_CONFIGURATION.approverFields.supportOrgField, true));
            }
            queryParams.queryExpression = queryList.join(' AND ');
            return this.rxRecordInstanceDataPageService
                .post({
                params: Object.assign({ startIndex: startIndex, pageSize: pageSize }, queryParams)
            })
                .pipe(operators.map(function (response) { return ({
                totalSize: response.totalSize,
                options: response.data.map(function (item) { return ({
                    displayValue: item[RX_APPROVAL_CONFIGURATION.approverFields.supportGroupField],
                    value: item[RX_APPROVAL_CONFIGURATION.approverFields.companyField],
                    organization: item[RX_APPROVAL_CONFIGURATION.approverFields.supportOrgField]
                }); })
            }); }));
        };
        FlowApproversSelectorComponent.prototype.getAdditionalQueryExpression = function (searchQuery, fieldId, isEqualitySearch) {
            return isEqualitySearch
                ? "('" + fieldId + "' = \"" + searchQuery.replace(/"/g, '""') + "\")"
                : "('" + fieldId + "' LIKE \"%" + this.rxRecordInstanceUtilsService.escapeTextWildcards(searchQuery) + "%\")";
        };
        FlowApproversSelectorComponent.prototype.loadUsers = function (inputEvent) {
            var _this = this;
            var queryParams = {
                recorddefinition: 'CTM:People',
                propertySelection: [
                    RX_APPROVAL_CONFIGURATION.approverFields.firstName,
                    RX_APPROVAL_CONFIGURATION.approverFields.lastName,
                    RX_APPROVAL_CONFIGURATION.approverFields.remedyLoginId
                ],
                sortBy: RX_APPROVAL_CONFIGURATION.approverFields.firstName
            };
            this.startIndex = !lodash.isUndefined(this.startIndex) ? this.startIndex + this.pageSize : 0;
            this.loadingMore = true;
            if (!lodash.isUndefined(inputEvent)) {
                this.startIndex = 0;
                this.loadedUsers = [];
            }
            if (this.userSearchTextInput) {
                queryParams.queryExpression = this.getUserQueryExpression();
            }
            this.rxRecordInstanceDataPageService
                .post({
                params: Object.assign({ pageSize: this.pageSize, startIndex: this.startIndex }, queryParams)
            })
                .subscribe(function (response) {
                _this.loadedUsers = _this.loadedUsers.concat(response.data);
                _this.showLoadMoreButton = response.totalSize > _this.loadedUsers.length;
                _this.loadingMore = false;
            });
        };
        FlowApproversSelectorComponent.prototype.getUserQueryExpression = function () {
            return this.userSearchTextInput
                ? "('" + RX_APPROVAL_CONFIGURATION.approverFields.firstName + "' LIKE \"%" + this.rxRecordInstanceUtilsService.escapeTextWildcards(this.userSearchTextInput) + "%\") OR ('" + RX_APPROVAL_CONFIGURATION.approverFields.lastName + "' LIKE \"%" + this.rxRecordInstanceUtilsService.escapeTextWildcards(this.userSearchTextInput) + "%\") OR ('" + RX_APPROVAL_CONFIGURATION.approverFields.remedyLoginId + "' LIKE \"%" + this.rxRecordInstanceUtilsService.escapeTextWildcards(this.userSearchTextInput) + "%\")"
                : null;
        };
        FlowApproversSelectorComponent.prototype.loadFunctionalRoles = function () {
            var _this = this;
            rxjs.forkJoin([
                this.rxApprovalConfigurationService.getFunctionalRoles(),
                this.rxGlobalCacheService.getBundleDescriptors()
            ])
                .pipe(operators.tap(function (_a) {
                var _b = __read(_a, 2), functionalRoles = _b[0], bundleDescriptors = _b[1];
                var globalLabel = _this.translateService.instant('com.bmc.arsys.rx.client.common.global-items.label');
                _this.addExistingApproversToSelectedTree(functionalRoles);
                _this.availableFunctionRolesByApplication = lodash.flow(function (roles) { return lodash.map(roles, function (role) {
                    var bundleDescriptor = lodash.find(bundleDescriptors, { id: role.applicationName });
                    return Object.assign(Object.assign({}, role), { applicationName: (bundleDescriptor === null || bundleDescriptor === void 0 ? void 0 : bundleDescriptor.friendlyName) || (bundleDescriptor === null || bundleDescriptor === void 0 ? void 0 : bundleDescriptor.id) || globalLabel });
                }); }, function (roles) { return lodash.groupBy(roles, 'applicationName'); }, function (rolesByApplicationName) { return lodash.map(rolesByApplicationName, function (roles, applicationName) { return ({
                    applicationName: applicationName,
                    roles: lodash.map(roles, function (role) { return ({
                        id: role.id,
                        name: role.name,
                        selected: false
                    }); }).sort(function (a, b) { return a.name.localeCompare(b.name); })
                }); }).sort(function (a, b) { return a.applicationName.localeCompare(b.applicationName); }); })(functionalRoles);
            }))
                .subscribe();
        };
        FlowApproversSelectorComponent.prototype.removeApproversFromSelection = function () {
            var _this = this;
            this.hasUserInteracted = true;
            lodash.forEach(this.selectedApprovers, function (node) {
                lodash.remove(node.children, function (childNode) { return _this.tree.first.isSelected(childNode); });
            });
            this.selectedApprovers = this.selectedApprovers.filter(function (node) { return node.children.length; });
            this.selectedApproverSelection = [];
            this.reloadTree();
        };
        FlowApproversSelectorComponent.prototype.getNode = function (label, key, data) {
            return {
                label: label,
                key: key,
                data: data
            };
        };
        FlowApproversSelectorComponent.prototype.getFunctionalRoleDataFormat = function (guid) {
            return "" + RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.functionalRole + guid;
        };
        FlowApproversSelectorComponent.prototype.transformFunctionRolesToNodeStructure = function () {
            var _this = this;
            var roles = [];
            this.availableFunctionRolesByApplication.forEach(function (application) { return application.roles
                .filter(function (role) { return role.selected; })
                .forEach(function (selectedRole) { return roles.push(_this.getNode("" + selectedRole.name, "" + selectedRole.id, _this.getFunctionalRoleDataFormat(selectedRole.id))); }); });
            return roles;
        };
        FlowApproversSelectorComponent.prototype.transformFieldsToNodeStructure = function () {
            var _this = this;
            return this.availableFields
                .filter(function (field) { return field.selected; })
                .map(function (selectedField) { return _this.getNode("" + selectedField.name, "" + selectedField.name, "$" + selectedField.name + "$"); });
        };
        FlowApproversSelectorComponent.prototype.getPeopleDataFormat = function (userId) {
            return "" + RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.people + userId;
        };
        FlowApproversSelectorComponent.prototype.transformPeopleToNodeStructure = function () {
            var _this = this;
            return this.loadedUsers
                .filter(function (user) { return user.selected; })
                .map(function (selectedUser) { return _this.getNode(selectedUser[RX_APPROVAL_CONFIGURATION.approverFields.firstName] + " " + selectedUser[RX_APPROVAL_CONFIGURATION.approverFields.lastName], "" + selectedUser[4], _this.getPeopleDataFormat(selectedUser[RX_APPROVAL_CONFIGURATION.approverFields.remedyLoginId])); });
        };
        FlowApproversSelectorComponent.prototype.getOrgDataFormat = function (company, org) {
            return "" + RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.companyOrg + RX_APPROVAL_CONFIGURATION.levelSeparator + company + RX_APPROVAL_CONFIGURATION.levelSeparator + org;
        };
        FlowApproversSelectorComponent.prototype.getDeptDataFormat = function (company, org, dept) {
            return "" + RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.companyOrgDept + RX_APPROVAL_CONFIGURATION.levelSeparator + company + RX_APPROVAL_CONFIGURATION.levelSeparator + org + RX_APPROVAL_CONFIGURATION.levelSeparator + dept;
        };
        FlowApproversSelectorComponent.prototype.getSupportOrgDataFormat = function (supportCompany, supportOrg) {
            return "" + RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.supportCompanyOrg + RX_APPROVAL_CONFIGURATION.levelSeparator + supportCompany + RX_APPROVAL_CONFIGURATION.levelSeparator + supportOrg;
        };
        FlowApproversSelectorComponent.prototype.getSupportGroupDataFormat = function (supportCompany, supportOrg, supportGroup) {
            return "" + RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.supportCompanyOrgGroup + RX_APPROVAL_CONFIGURATION.levelSeparator + supportCompany + RX_APPROVAL_CONFIGURATION.levelSeparator + supportOrg + RX_APPROVAL_CONFIGURATION.levelSeparator + supportGroup;
        };
        FlowApproversSelectorComponent.prototype.transformToNodeStructure = function (selectedItems) {
            var _this = this;
            return selectedItems.map(function (option) {
                var data = '';
                var label = option.displayValue + " ";
                if (_this.shouldMoveCompanies()) {
                    data = option.value;
                }
                else if (_this.shouldMoveOrganizations()) {
                    data = _this.getOrgDataFormat(option.value, option.displayValue);
                    label += "(" + option.value + ")";
                }
                else if (_this.shouldMoveDepartments()) {
                    data = _this.getDeptDataFormat(option.value, option.organization, option.displayValue);
                    label += "(" + option.value + _this.separatorArrow + option.organization + ")";
                }
                else if (_this.shouldMoveSupportCompanies()) {
                    data = "" + RX_APPROVAL_CONFIGURATION.approverFormatPrefixes.supportCompany + RX_APPROVAL_CONFIGURATION.levelSeparator + option.displayValue;
                }
                else if (_this.shouldMoveSupportOrganizations()) {
                    data = _this.getSupportOrgDataFormat(option.value, option.displayValue);
                    label += "(" + option.value + ")";
                }
                else if (_this.shouldMoveSupportGroups()) {
                    data = _this.getSupportGroupDataFormat(option.value, option.organization, option.displayValue);
                    label += "(" + option.value + _this.separatorArrow + option.organization + ")";
                }
                return _this.getNode(label, option.displayValue, data);
            });
        };
        FlowApproversSelectorComponent.prototype.onCompanySelectionChange = function () {
            this.selectedOrganizations = [];
            this.selectedDepartments = [];
        };
        FlowApproversSelectorComponent.prototype.onOrganizationSelectionChange = function () {
            this.selectedDepartments = [];
        };
        FlowApproversSelectorComponent.prototype.onSupportCompanySelectionChange = function () {
            this.selectedSupportOrganizations = [];
            this.selectedSupportGroups = [];
        };
        FlowApproversSelectorComponent.prototype.onSupportOrganizationSelectionChange = function () {
            this.selectedSupportGroups = [];
        };
        FlowApproversSelectorComponent.prototype.shouldMoveCompanies = function () {
            return this.selectedCompanies.length && !this.selectedOrganizations.length && !this.selectedDepartments.length;
        };
        FlowApproversSelectorComponent.prototype.shouldMoveOrganizations = function () {
            return this.selectedOrganizations.length && this.selectedCompanies.length <= 1 && !this.selectedDepartments.length;
        };
        FlowApproversSelectorComponent.prototype.shouldMoveDepartments = function () {
            return (this.selectedDepartments.length && this.selectedCompanies.length <= 1 && this.selectedOrganizations.length <= 1);
        };
        FlowApproversSelectorComponent.prototype.shouldMoveSupportCompanies = function () {
            return (this.selectedSupportCompanies.length &&
                !this.selectedSupportOrganizations.length &&
                !this.selectedSupportGroups.length);
        };
        FlowApproversSelectorComponent.prototype.shouldMoveSupportOrganizations = function () {
            return (this.selectedSupportOrganizations.length &&
                this.selectedSupportCompanies.length <= 1 &&
                !this.selectedSupportGroups.length);
        };
        FlowApproversSelectorComponent.prototype.shouldMoveSupportGroups = function () {
            return (this.selectedSupportGroups.length &&
                this.selectedSupportCompanies.length <= 1 &&
                this.selectedSupportOrganizations.length <= 1);
        };
        FlowApproversSelectorComponent.prototype.setFieldIdentifyingApprovers = function () {
            this.selectedApprovers = [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.field.identifying'),
                    type: RX_APPROVAL_CONFIGURATION.approverTypes.fieldIdentifying,
                    children: this.transformFieldsToNodeStructure(),
                    expanded: true
                }
            ];
        };
        FlowApproversSelectorComponent.prototype.moveToSelectedApprovers = function () {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            var _this = this;
            var approverTypeNode = lodash.find(this.selectedApprovers, { type: this.approverType[0].value });
            if (this.isFieldIdentifyingSelection()) {
                if (this.selectedApprovers.length &&
                    !lodash.find(this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.fieldIdentifying })) {
                    this.rxModalService
                        .confirm({
                        title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                        modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                        message: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.field-identifying-select.warning')
                    })
                        .then(function (result) {
                        if (result) {
                            _this.setFieldIdentifyingApprovers();
                        }
                    });
                }
                else {
                    this.setFieldIdentifyingApprovers();
                }
            }
            else if (this.isFunctionalRoleSelection()) {
                if (!approverTypeNode) {
                    this.selectedApprovers.push({
                        label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.functional.roles'),
                        type: RX_APPROVAL_CONFIGURATION.approverTypes.functionalRole,
                        children: this.transformFunctionRolesToNodeStructure(),
                        expanded: true
                    });
                }
                else {
                    (_a = approverTypeNode.children).push.apply(_a, __spreadArray([], __read(this.transformFunctionRolesToNodeStructure())));
                }
            }
            else if (this.isPeopleSelection()) {
                if (!approverTypeNode) {
                    this.selectedApprovers.push({
                        label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.people.label'),
                        type: RX_APPROVAL_CONFIGURATION.approverTypes.people,
                        children: this.transformPeopleToNodeStructure(),
                        expanded: true
                    });
                }
                else {
                    (_b = approverTypeNode.children).push.apply(_b, __spreadArray([], __read(this.transformPeopleToNodeStructure())));
                }
            }
            else if (this.isCompanySelection()) {
                if (this.shouldMoveCompanies()) {
                    if (!approverTypeNode) {
                        this.selectedApprovers.push({
                            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.company.label'),
                            type: RX_APPROVAL_CONFIGURATION.approverTypes.company,
                            children: this.transformToNodeStructure(this.selectedCompanies),
                            expanded: true
                        });
                    }
                    else {
                        (_c = approverTypeNode.children).push.apply(_c, __spreadArray([], __read(this.transformToNodeStructure(this.selectedCompanies))));
                    }
                }
                else if (this.shouldMoveOrganizations()) {
                    approverTypeNode = lodash.find(this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.org });
                    if (!approverTypeNode) {
                        this.selectedApprovers.push({
                            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.organization.label'),
                            type: RX_APPROVAL_CONFIGURATION.approverTypes.org,
                            children: this.transformToNodeStructure(this.selectedOrganizations),
                            expanded: true
                        });
                    }
                    else {
                        (_d = approverTypeNode.children).push.apply(_d, __spreadArray([], __read(this.transformToNodeStructure(this.selectedOrganizations))));
                    }
                }
                else if (this.shouldMoveDepartments()) {
                    approverTypeNode = lodash.find(this.selectedApprovers, {
                        type: RX_APPROVAL_CONFIGURATION.approverTypes.dept
                    });
                    if (!approverTypeNode) {
                        this.selectedApprovers.push({
                            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.department.label'),
                            type: RX_APPROVAL_CONFIGURATION.approverTypes.dept,
                            children: this.transformToNodeStructure(this.selectedDepartments),
                            expanded: true
                        });
                    }
                    else {
                        (_e = approverTypeNode.children).push.apply(_e, __spreadArray([], __read(this.transformToNodeStructure(this.selectedDepartments))));
                    }
                }
            }
            else if (this.isSupportCompanySelection()) {
                if (this.shouldMoveSupportCompanies()) {
                    approverTypeNode = lodash.find(this.selectedApprovers, {
                        type: RX_APPROVAL_CONFIGURATION.approverTypes.company
                    });
                    if (!approverTypeNode) {
                        this.selectedApprovers.push({
                            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.company.label'),
                            type: RX_APPROVAL_CONFIGURATION.approverTypes.company,
                            children: this.transformToNodeStructure(this.selectedSupportCompanies),
                            expanded: true
                        });
                    }
                    else {
                        (_f = approverTypeNode.children).push.apply(_f, __spreadArray([], __read(this.transformToNodeStructure(this.selectedSupportCompanies))));
                    }
                }
                else if (this.shouldMoveSupportOrganizations()) {
                    approverTypeNode = lodash.find(this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.supportOrg });
                    if (!approverTypeNode) {
                        this.selectedApprovers.push({
                            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.support-org.label'),
                            type: RX_APPROVAL_CONFIGURATION.approverTypes.supportOrg,
                            children: this.transformToNodeStructure(this.selectedSupportOrganizations),
                            expanded: true
                        });
                    }
                    else {
                        (_g = approverTypeNode.children).push.apply(_g, __spreadArray([], __read(this.transformToNodeStructure(this.selectedSupportOrganizations))));
                    }
                }
                else if (this.shouldMoveSupportGroups()) {
                    approverTypeNode = lodash.find(this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.supportGroup });
                    if (!approverTypeNode) {
                        this.selectedApprovers.push({
                            label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.support-group.label'),
                            type: RX_APPROVAL_CONFIGURATION.approverTypes.supportGroup,
                            children: this.transformToNodeStructure(this.selectedSupportGroups),
                            expanded: true
                        });
                    }
                    else {
                        (_h = approverTypeNode.children).push.apply(_h, __spreadArray([], __read(this.transformToNodeStructure(this.selectedSupportGroups))));
                    }
                }
            }
            if (!this.isFieldIdentifyingSelection()) {
                lodash.remove(this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.fieldIdentifying });
            }
            if (approverTypeNode) {
                approverTypeNode.expanded = true;
                approverTypeNode.children = lodash.uniqBy(approverTypeNode.children, 'key');
            }
            this.selectedApprovers = this.selectedApprovers
                .filter(function (approverNode) { return approverNode.children.length; })
                .map(function (node) {
                node.children.sort(function (a, b) { return a.label.localeCompare(b.label); });
                return node;
            });
            this.hasUserInteracted = true;
            this.reloadTree();
        };
        FlowApproversSelectorComponent.prototype.reloadTree = function () {
            var _this = this;
            this.shouldShowTree = false;
            setTimeout(function () { return (_this.shouldShowTree = true); });
        };
        FlowApproversSelectorComponent.prototype.loadFieldIdentifyingApproversApprovers = function () {
            var _this = this;
            this.rxRecordDefinitionCacheService
                .getRecordDefinition(this.activeModalRef.getData().registeredRecordDefinitionName)
                .subscribe(function (fieldIdentifyingResponse) { return (_this.availableFields = fieldIdentifyingResponse.fieldDefinitions
                .map(function (field) { return ({
                name: field.name,
                selected: false
            }); })
                .sort(function (a, b) { return a.name.localeCompare(b.name); })); });
        };
        FlowApproversSelectorComponent.prototype.noApproverSelected = function () {
            return ((this.isFieldIdentifyingSelection() && !lodash.some(this.availableFields, function (field) { return field.selected; })) ||
                (this.isPeopleSelection() && !lodash.some(this.loadedUsers, function (user) { return user.selected; })) ||
                (this.isFunctionalRoleSelection() &&
                    !lodash.some(this.availableFunctionRolesByApplication, function (application) { return lodash.some(application.roles, function (role) { return role.selected; }); })) ||
                Boolean(this.isCompanySelection() &&
                    !this.selectedCompanies.length &&
                    !this.selectedOrganizations.length &&
                    !this.selectedDepartments.length));
        };
        FlowApproversSelectorComponent.prototype.isInvalidFieIdentifyingApprover = function () {
            return this.isFieldIdentifyingSelection() && lodash.sumBy(this.availableFields, 'selected') > 1;
        };
        FlowApproversSelectorComponent.prototype.optionFormatter = function (option) {
            return option.displayValue;
        };
        FlowApproversSelectorComponent.prototype.isFieldIdentifyingSelection = function () {
            return this.approverType[0].value === RX_APPROVAL_CONFIGURATION.approverTypes.fieldIdentifying;
        };
        FlowApproversSelectorComponent.prototype.isCompanySelection = function () {
            return this.approverType[0].value === RX_APPROVAL_CONFIGURATION.approverTypes.company;
        };
        FlowApproversSelectorComponent.prototype.isSupportCompanySelection = function () {
            return this.approverType[0].value === RX_APPROVAL_CONFIGURATION.approverTypes.supportCompany;
        };
        FlowApproversSelectorComponent.prototype.isPeopleSelection = function () {
            return this.approverType[0].value === RX_APPROVAL_CONFIGURATION.approverTypes.people;
        };
        FlowApproversSelectorComponent.prototype.isFunctionalRoleSelection = function () {
            return this.approverType[0].value === RX_APPROVAL_CONFIGURATION.approverTypes.functionalRole;
        };
        FlowApproversSelectorComponent.prototype.completeSelection = function () {
            var _this = this;
            var approvers = lodash.flow(function (allNodes) { return lodash.map(allNodes, 'children'); }, lodash.flatten, function (nodes) { return lodash.map(nodes, function (node) {
                var label = '';
                if (_this.rxApprovalConfigurationService.isCompanyOrg(node.data) ||
                    _this.rxApprovalConfigurationService.isCompanyOrgDept(node.data) ||
                    _this.rxApprovalConfigurationService.isSupportCompanyOrg(node.data) ||
                    _this.rxApprovalConfigurationService.isSupportCompanyOrgGroup(node.data)) {
                    label = _this.rxApprovalConfigurationService.getLastLabel(node.data);
                }
                return {
                    value: node.data,
                    displayValue: label || node.label
                };
            }); })(this.selectedApprovers);
            var approver = {
                value: approvers.map(function (node) { return node.value; }).join(RX_APPROVAL_CONFIGURATION.approverSeparator),
                displayValue: lodash.flow(function (items) { return lodash.take(items, 10); }, function (items) { return lodash.map(items, 'displayValue'); }, function (items) { return lodash.join(items, ', '); })(approvers)
            };
            if (approvers.length > 10) {
                approver.displayValue += '...';
            }
            this.activeModalRef.close(approver);
        };
        FlowApproversSelectorComponent.prototype.getEmptyApproverTree = function () {
            return [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.functional.roles'),
                    type: RX_APPROVAL_CONFIGURATION.approverTypes.functionalRole,
                    children: []
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.people.label'),
                    type: RX_APPROVAL_CONFIGURATION.approverTypes.people,
                    children: []
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.company.label'),
                    type: RX_APPROVAL_CONFIGURATION.approverTypes.company,
                    children: []
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.organization.label'),
                    type: RX_APPROVAL_CONFIGURATION.approverTypes.org,
                    children: []
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.department.label'),
                    type: RX_APPROVAL_CONFIGURATION.approverTypes.dept,
                    children: []
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.support-company.label'),
                    type: RX_APPROVAL_CONFIGURATION.approverTypes.supportCompany,
                    children: []
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.support-group.label'),
                    type: RX_APPROVAL_CONFIGURATION.approverTypes.supportGroup,
                    children: []
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.support-org.label'),
                    type: RX_APPROVAL_CONFIGURATION.approverTypes.supportOrg,
                    children: []
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.field.identifying'),
                    type: RX_APPROVAL_CONFIGURATION.approverTypes.fieldIdentifying,
                    children: []
                }
            ];
        };
        FlowApproversSelectorComponent.prototype.addExistingApproversToSelectedTree = function (allFunctionalRoles) {
            var _this = this;
            this.selectedApprovers = this.getEmptyApproverTree();
            var approverList = this.activeModalRef
                .getData()
                .existingApprovers.split(RX_APPROVAL_CONFIGURATION.approverSeparator);
            lodash.forEach(approverList, function (approver) {
                if (_this.rxApprovalConfigurationService.isFieldIdentifyingApprover(approver)) {
                    _this.approverType = [
                        lodash.find(_this.approverTypes, {
                            value: RX_APPROVAL_CONFIGURATION.approverTypes.fieldIdentifying
                        })
                    ];
                    _this.selectedApprovers = [
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.field.identifying'),
                            type: RX_APPROVAL_CONFIGURATION.approverTypes.fieldIdentifying,
                            children: [
                                {
                                    label: _this.rxApprovalConfigurationService.getFieldIdentifyingApprover(approver),
                                    key: _this.rxApprovalConfigurationService.getFieldIdentifyingApprover(approver),
                                    data: "$" + _this.rxApprovalConfigurationService.getFieldIdentifyingApprover(approver) + "$"
                                }
                            ],
                            expanded: true
                        }
                    ];
                }
                else if (_this.rxApprovalConfigurationService.isFunctionalRole(approver)) {
                    lodash.find(_this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.functionalRole }).children.push({
                        key: _this.rxApprovalConfigurationService.getFunctionalRoleGuid(approver),
                        data: _this.getFunctionalRoleDataFormat(_this.rxApprovalConfigurationService.getFunctionalRoleGuid(approver)),
                        label: lodash.get(lodash.find(allFunctionalRoles, {
                            id: _this.rxApprovalConfigurationService.getFunctionalRoleGuid(approver)
                        }), 'name')
                    });
                }
                else if (_this.rxApprovalConfigurationService.isApproverPeople(approver)) {
                    lodash.find(_this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.people }).children.push({
                        key: approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[1],
                        label: approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[1],
                        data: _this.getPeopleDataFormat(approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[1])
                    });
                }
                else if (_this.rxApprovalConfigurationService.isCompany(approver) ||
                    _this.rxApprovalConfigurationService.isSupportCompany(approver)) {
                    lodash.find(_this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.company }).children.push({
                        label: _this.rxApprovalConfigurationService.getLastLabel(approver),
                        key: "" + _this.rxApprovalConfigurationService.getLastLabel(approver),
                        data: _this.getCompanyDataFormat(_this.rxApprovalConfigurationService.getLastLabel(approver))
                    });
                }
                else if (_this.rxApprovalConfigurationService.isCompanyOrg(approver)) {
                    lodash.find(_this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.org }).children.push({
                        label: "" + _this.rxApprovalConfigurationService.getLastLabel(approver) + _this.getHierarchyLabel(approver),
                        key: "" + _this.rxApprovalConfigurationService.getLastLabel(approver),
                        data: _this.getOrgDataFormat(approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[1], approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[2])
                    });
                }
                else if (_this.rxApprovalConfigurationService.isCompanyOrgDept(approver)) {
                    lodash.find(_this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.dept }).children.push({
                        label: "" + _this.rxApprovalConfigurationService.getLastLabel(approver) + _this.getHierarchyLabel(approver),
                        key: "" + _this.rxApprovalConfigurationService.getLastLabel(approver),
                        data: _this.getDeptDataFormat(approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[1], approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[2], approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[3])
                    });
                }
                else if (_this.rxApprovalConfigurationService.isSupportCompanyOrg(approver)) {
                    lodash.find(_this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.supportOrg }).children.push({
                        label: "" + _this.rxApprovalConfigurationService.getLastLabel(approver) + _this.getHierarchyLabel(approver),
                        key: "" + _this.rxApprovalConfigurationService.getLastLabel(approver),
                        data: _this.getSupportOrgDataFormat(approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[1], approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[2])
                    });
                }
                else if (_this.rxApprovalConfigurationService.isSupportCompanyOrgGroup(approver)) {
                    lodash.find(_this.selectedApprovers, { type: RX_APPROVAL_CONFIGURATION.approverTypes.supportGroup }).children.push({
                        label: "" + _this.rxApprovalConfigurationService.getLastLabel(approver) + _this.getHierarchyLabel(approver),
                        key: "" + _this.rxApprovalConfigurationService.getLastLabel(approver),
                        data: _this.getSupportGroupDataFormat(approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[1], approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[2], approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator)[3])
                    });
                }
            });
            this.selectedApprovers = this.selectedApprovers
                .filter(function (node) { return node.children.length; })
                .map(function (node) {
                node.children.sort(function (a, b) { return a.label.localeCompare(b.label); });
                return node;
            });
        };
        FlowApproversSelectorComponent.prototype.getHierarchyLabel = function (approver) {
            var temp = approver.split(RX_APPROVAL_CONFIGURATION.levelSeparator);
            temp.shift();
            temp.pop();
            return "(" + temp.join(this.separatorArrow) + ")";
        };
        FlowApproversSelectorComponent.prototype.close = function () {
            this.activeModalRef.dismiss(i1$2.DismissReasons.CLOSE_BTN);
        };
        FlowApproversSelectorComponent.prototype.getDefaultSearchExpression = function () {
            return RX_APPROVAL_CONFIGURATION.approverFields.companyField + " != NULL";
        };
        return FlowApproversSelectorComponent;
    }(i1$1.RxModalClass));
    FlowApproversSelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FlowApproversSelectorComponent, deps: [{ token: i3__namespace.RxTreeService }, { token: i1__namespace$1.ActiveModalRef }, { token: i1__namespace.RxModalService }, { token: i4__namespace.TranslateService }, { token: i2__namespace.RxGlobalCacheService }, { token: i3__namespace$2.RxRecordInstanceUtilsService }, { token: RxOrganizationDataPageService }, { token: RxSupportOrganizationDataPageService }, { token: RxApprovalConfigurationService }, { token: i3__namespace$2.RxRecordDefinitionCacheService }, { token: i3__namespace$2.RxRecordInstanceDataPageService }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FlowApproversSelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: FlowApproversSelectorComponent, selector: "rx-flow-approvers-selector", viewQueries: [{ propertyName: "paginationComponents", predicate: ["paginationComponents"], descendants: true }, { propertyName: "tree", predicate: ["tree"], descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"approver-modal-body\">\n  <rx-busy-indicator [options]=\"{ busy: busy, loaderType: 'section' }\"></rx-busy-indicator>\n\n  <adapt-alert\n    *ngIf=\"isInvalidFieIdentifyingApprover()\"\n    [config]=\"{\n      variant: 'warning',\n      dismissible: false,\n      content: invalidMsg\n    }\"\n  ></adapt-alert>\n\n  <div class=\"d-flex h-100\">\n    <div class=\"flex-wrapper d-flex flex-column mh-100 wrapper-max-width\">\n      <h5 class=\"mt-1 mb-4\">\n        {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.approvers.available.label' | translate }}\n      </h5>\n\n      <adapt-rx-select\n        class=\"d-block form-group w-75\"\n        rx-id=\"approver-type\"\n        [(ngModel)]=\"approverType\"\n        [options]=\"approverTypes\"\n        (onSelectionChange)=\"switchApproversTree()\"\n        [optionFormatter]=\"optionFormatter\"\n      >\n      </adapt-rx-select>\n\n      <div class=\"flex-fill available-list\">\n        <div *ngIf=\"isCompanySelection()\" class=\"border section-wrapper flex-fill h-100\">\n          <rx-select-with-pagination\n            label=\"{{\n              'com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.company.label' | translate\n            }}\"\n            class=\"form-group d-block\"\n            [(ngModel)]=\"selectedCompanies\"\n            [optionLoader]=\"companyLoaderFunc\"\n            isMultiSelectionMode=\"true\"\n            (selectionChange)=\"onCompanySelectionChange()\"\n          ></rx-select-with-pagination>\n\n          <rx-select-with-pagination\n            label=\"{{\n              'com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.organization.label' | translate\n            }}\"\n            class=\"form-group d-block\"\n            [(ngModel)]=\"selectedOrganizations\"\n            [optionLoader]=\"organizationLoaderFunc\"\n            [template]=\"orgOptionTemplate\"\n            isMultiSelectionMode=\"true\"\n            (selectionChange)=\"onOrganizationSelectionChange()\"\n            #paginationComponents\n            [disabled]=\"selectedCompanies.length > 1\"\n            (toggleDropdown)=\"onToggleDropdown($event)\"\n          ></rx-select-with-pagination>\n\n          <rx-select-with-pagination\n            label=\"{{\n              'com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.department.label' | translate\n            }}\"\n            class=\"form-group d-block\"\n            [(ngModel)]=\"selectedDepartments\"\n            [optionLoader]=\"departmentLoaderFunc\"\n            [template]=\"optionTemplate\"\n            isMultiSelectionMode=\"true\"\n            #paginationComponents\n            [disabled]=\"selectedCompanies.length > 1 || selectedOrganizations.length > 1\"\n            (toggleDropdown)=\"onToggleDropdown($event)\"\n          ></rx-select-with-pagination>\n        </div>\n\n        <div *ngIf=\"isSupportCompanySelection()\" class=\"border section-wrapper flex-fill h-100\">\n          <rx-select-with-pagination\n            label=\"{{\n              'com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.support-company.label' | translate\n            }}\"\n            class=\"form-group d-block\"\n            [(ngModel)]=\"selectedSupportCompanies\"\n            [optionLoader]=\"companyLoaderFunc\"\n            isMultiSelectionMode=\"true\"\n            (selectionChange)=\"onSupportCompanySelectionChange()\"\n          ></rx-select-with-pagination>\n\n          <rx-select-with-pagination\n            label=\"{{\n              'com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.support-org.label' | translate\n            }}\"\n            class=\"form-group d-block\"\n            [(ngModel)]=\"selectedSupportOrganizations\"\n            [optionLoader]=\"supportOrganizationLoaderFunc\"\n            [template]=\"orgOptionTemplate\"\n            isMultiSelectionMode=\"true\"\n            (selectionChange)=\"onSupportOrganizationSelectionChange()\"\n            #paginationComponents\n            [disabled]=\"selectedSupportCompanies.length > 1\"\n            (toggleDropdown)=\"onToggleDropdown($event)\"\n          ></rx-select-with-pagination>\n\n          <rx-select-with-pagination\n            label=\"{{\n              'com.bmc.arsys.rx.client.approval.configuration.flow.approvers.types.support-group.label' | translate\n            }}\"\n            class=\"form-group d-block\"\n            [(ngModel)]=\"selectedSupportGroups\"\n            [optionLoader]=\"supportGroupLoaderFunc\"\n            [template]=\"optionTemplate\"\n            isMultiSelectionMode=\"true\"\n            #paginationComponents\n            [disabled]=\"selectedSupportCompanies.length > 1 || selectedSupportOrganizations.length > 1\"\n            (toggleDropdown)=\"onToggleDropdown($event)\"\n          ></rx-select-with-pagination>\n        </div>\n      </div>\n\n      <div\n        class=\"available-list d-flex flex-column flex-fill h-100 border-top functional-roles border\"\n        *ngIf=\"isFunctionalRoleSelection()\"\n      >\n        <adapt-accordion [multiselect]=\"true\">\n          <adapt-accordion-tab\n            *ngFor=\"let application of availableFunctionRolesByApplication\"\n            title=\"{{ application.applicationName }}\"\n            [isOpen]=\"true\"\n          >\n            <adapt-rx-checkbox\n              *ngFor=\"let role of application.roles; let index = index\"\n              label=\"{{ role.name }}\"\n              [(ngModel)]=\"application.roles[index].selected\"\n            ></adapt-rx-checkbox>\n          </adapt-accordion-tab>\n        </adapt-accordion>\n      </div>\n\n      <div class=\"available-list user-list h-100 border section-wrapper\" *ngIf=\"isPeopleSelection()\">\n        <ul class=\"list-unstyled\">\n          <div class=\"border-bottom-0 user-search-wrapper\">\n            <adapt-rx-search\n              [(ngModel)]=\"userSearchTextInput\"\n              placeholder=\"Filter\"\n              [debounceTime]=\"200\"\n              (ngModelChange)=\"loadUsers($event)\"\n            >\n            </adapt-rx-search>\n          </div>\n\n          <li *ngFor=\"let user of loadedUsers; let index = index\">\n            <adapt-rx-checkbox\n              label=\"{{ user[1000000019] + ' ' + user[1000000018] }}\"\n              [(ngModel)]=\"loadedUsers[index].selected\"\n            ></adapt-rx-checkbox>\n          </li>\n\n          <button\n            class=\"py-0\"\n            type=\"button\"\n            adapt-button\n            btn-type=\"tertiary\"\n            rx-id=\"load-more-button\"\n            (click)=\"loadUsers()\"\n            *ngIf=\"showLoadMoreButton && !loadingMore\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.load-more.label' | translate }}\n          </button>\n\n          <div class=\"loader-container\" *ngIf=\"loadingMore\">\n            <div class=\"loader-inline\"></div>\n            <span class=\"ml-2\">{{ 'com.bmc.arsys.rx.client.common.loading-data' | translate }}</span>\n          </div>\n        </ul>\n      </div>\n\n      <div class=\"available-list h-100 border field-identifying section-wrapper\" *ngIf=\"isFieldIdentifyingSelection()\">\n        <ul class=\"list-unstyled\">\n          <li *ngFor=\"let field of availableFields; let index = index\">\n            <adapt-rx-checkbox\n              label=\"{{ field.name }}\"\n              [(ngModel)]=\"availableFields[index].selected\"\n            ></adapt-rx-checkbox>\n          </li>\n        </ul>\n      </div>\n    </div>\n\n    <button\n      type=\"button\"\n      adapt-button\n      class=\"d-icon-right-angle_right form-group move-button\"\n      btn-type=\"secondary\"\n      rx-id=\"move-button\"\n      (click)=\"moveToSelectedApprovers()\"\n      [disabled]=\"isInvalidFieIdentifyingApprover() || noApproverSelected()\"\n    ></button>\n\n    <div class=\"flex-wrapper d-flex flex-column mh-100\">\n      <h5 class=\"mt-1 mb-4\">\n        {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.approvers.selected.label' | translate }}\n      </h5>\n\n      <button\n        type=\"button\"\n        adapt-button\n        class=\"d-icon-left-trash form-group align-self-start\"\n        btn-type=\"secondary\"\n        rx-id=\"remove-button\"\n        (click)=\"removeApproversFromSelection()\"\n        [disabled]=\"!selectedApproverSelection.length\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n      </button>\n\n      <div class=\"card available-list flex-fill\">\n        <div class=\"card-block\">\n          <adapt-tree\n            #tree\n            *ngIf=\"selectedApprovers.length && shouldShowTree\"\n            filter=\"true\"\n            [value]=\"selectedApprovers\"\n            selectionMode=\"checkbox\"\n            [(selection)]=\"selectedApproverSelection\"\n            [wrap]=\"treeWrap\"\n          >\n          </adapt-tree>\n        </div>\n\n        <div class=\"vertical-center\" *ngIf=\"!selectedApprovers.length\">\n          <div class=\"empty-state empty-state--config\"></div>\n          <div class=\"empty-state__label\">\n            {{ 'com.bmc.arsys.rx.client.empty-state.no-items-available.label' | translate }}\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    rx-id=\"save-button\"\n    (click)=\"completeSelection()\"\n    [disabled]=\"!hasUserInteracted\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button adapt-button type=\"button\" btn-type=\"secondary\" rx-id=\"close-button\" (click)=\"close()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n\n<ng-template #optionTemplate let-option>\n  <strong>{{ option.displayValue }}</strong>\n\n  <div class=\"text-secondary\">\n    {{ option.value + separatorArrow + option.organization }}\n  </div>\n</ng-template>\n\n<ng-template #orgOptionTemplate let-option>\n  <strong>{{ option.displayValue }}</strong>\n\n  <div class=\"text-secondary\">\n    {{ option.value }}\n  </div>\n</ng-template>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}:host::ng-deep .checkbox{margin:0}:host::ng-deep .dropdown-item{white-space:normal}.approver-modal-body{padding:15px;height:645px}.available-list{overflow:auto}.section-wrapper{padding:15px}.flex-wrapper{flex-grow:1;flex-basis:0}.vertical-center{position:absolute;margin:auto;top:0;bottom:0;left:20px;right:20px;height:130px}.move-button{margin:325px 20px auto}.wrapper-max-width{max-width:365px}.loader-container{padding:0 16px}.user-search-wrapper{padding-bottom:15px}.user-list li,.field-identifying li{margin-bottom:8px}:host ::ng-deep adapt-rx-checkbox .checkbox__item{white-space:normal;word-break:break-all}:host ::ng-deep .functional-roles .adapt-accordion adapt-accordion-tab:last-child .card{border-bottom:0}:host ::ng-deep .functional-roles .adapt-accordion adapt-accordion-tab .card{border-left:0;border-right:0}\n"], components: [{ type: i1__namespace.RxBusyIndicatorComponent, selector: "rx-busy-indicator", inputs: ["options"] }, { type: i1__namespace$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i4__namespace$1.RxSelectWithPaginationComponent, selector: "rx-select-with-pagination", inputs: ["label", "required", "isMultiSelectionMode", "optionLoader", "pageSize", "showDefaultTitle", "showUncheckAll", "readonly", "template", "viewToModelValueAdapter", "modelToViewValueAdapter", "optionFormatter"], outputs: ["toggleDropdown", "selectionChange"] }, { type: i1__namespace$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace$1.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }, { type: i1__namespace$1.AdaptRxSearchComponent, selector: "adapt-rx-search", inputs: ["mode", "autocomplete", "placeholder", "size", "searchButton", "searchButtonText", "clearButtonText", "debounceTime", "ariaControlsPopupId", "ariaActiveDescendant", "initialAlign"], outputs: ["editModeChange"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace$1.AdaptTreeComponent, selector: "adapt-tree", inputs: ["value", "filter", "texts", "filterBtnClearText", "filterPlaceholder", "testID", "lazy", "lazyLoading", "trim", "wrap", "selectAllButton", "deselectAllButton", "treeScrollHeight", "adaptRadarDisableEventSending", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "validateDrop"], outputs: ["onNodeDrop", "lazyLoad"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FlowApproversSelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-flow-approvers-selector',
                        templateUrl: './flow-approvers-selector.component.html',
                        styleUrls: ['./flow-approvers-selector.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace.RxTreeService }, { type: i1__namespace$1.ActiveModalRef }, { type: i1__namespace.RxModalService }, { type: i4__namespace.TranslateService }, { type: i2__namespace.RxGlobalCacheService }, { type: i3__namespace$2.RxRecordInstanceUtilsService }, { type: RxOrganizationDataPageService }, { type: RxSupportOrganizationDataPageService }, { type: RxApprovalConfigurationService }, { type: i3__namespace$2.RxRecordDefinitionCacheService }, { type: i3__namespace$2.RxRecordInstanceDataPageService }, { type: i0__namespace.Injector }]; }, propDecorators: { paginationComponents: [{
                    type: i0.ViewChildren,
                    args: ['paginationComponents']
                }], tree: [{
                    type: i0.ViewChildren,
                    args: ['tree']
                }] } });

    var ApprovalFlowConfigurationComponent = /** @class */ (function () {
        function ApprovalFlowConfigurationComponent(injector, errorHandler, rxModalService, translateService, rxNotificationService, rxExpressionEditorService, rxApprovalConfigurationService) {
            this.injector = injector;
            this.errorHandler = errorHandler;
            this.rxModalService = rxModalService;
            this.translateService = translateService;
            this.rxNotificationService = rxNotificationService;
            this.rxExpressionEditorService = rxExpressionEditorService;
            this.rxApprovalConfigurationService = rxApprovalConfigurationService;
            this.allAvailableFlowGroups = [];
            this.signingCriteriaList = [
                {
                    value: RX_APPROVAL_CONFIGURATION.approverCriteria.oneMust,
                    displayValue: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.if-multiple-approvers.types.one-must-approve')
                },
                {
                    value: RX_APPROVAL_CONFIGURATION.approverCriteria.allMust,
                    displayValue: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.if-multiple-approvers.types.all-must-approve')
                },
                {
                    value: RX_APPROVAL_CONFIGURATION.approverCriteria.percentage,
                    displayValue: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.if-multiple-approvers.types.percentage-must-approve')
                }
            ];
            this.signingCriteriaPercentageList = RX_APPROVAL_CONFIGURATION.signingCriteriaPercentageList;
            this.processOnApproveOptions = {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.outcome.on-approve-label'),
                definitionType: i4.RxDefinitionPickerType.PublicProcess
            };
            this.processOnRejectOptions = {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.outcome.on-rejection-label'),
                definitionType: i4.RxDefinitionPickerType.PublicProcess
            };
            this.processOnErrorOptions = {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.outcome.on-error-label'),
                definitionType: i4.RxDefinitionPickerType.PublicProcess
            };
            this.existingFlowGroupNames = [];
            this.isSaveInProgress = false;
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.deletedFlowGroups = [];
            this.selectedFlowGroup = this.getEmptyFlowGroup();
        }
        ApprovalFlowConfigurationComponent.prototype.getEmptyFlowGroup = function () {
            return {
                flowGroup: null,
                approvalFlowConfigurationList: []
            };
        };
        ApprovalFlowConfigurationComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.expressionConfigurator = new RxApprovalExpressionConfigurator(this.injector);
            this.expressionConfigurator.configureForProperty({
                propertyPath: RX_APPROVAL_CONFIGURATION.flowQualificationProperty,
                dataDictionary$: this.expressionConfigurator.approvalExpressionDataDictionary(this.registeredRecordDefinitionName),
                operators: this.expressionConfigurator.getOperatorRowsByGroup(i2.ExpressionOperatorGroup.All)
            });
            this.flowQualificationOptions = {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.qualification'),
                dataDictionary$: this.expressionConfigurator.getDataDictionary(RX_APPROVAL_CONFIGURATION.flowQualificationProperty),
                operators: this.expressionConfigurator.getOperators(RX_APPROVAL_CONFIGURATION.flowQualificationProperty),
                isRequired: true
            };
            this.expressionConfigurator.configureForProperty({
                propertyPath: RX_APPROVAL_CONFIGURATION.approverQualificationProperty,
                dataDictionary$: this.expressionConfigurator.getCtmPeopleFormFields(this.registeredRecordDefinitionName),
                operators: this.expressionConfigurator.getOperatorRowsByGroup(i2.ExpressionOperatorGroup.All)
            });
            this.qualifyApproversOptions = {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.general.qualify-approvers.label'),
                dataDictionary$: this.expressionConfigurator.getDataDictionary(RX_APPROVAL_CONFIGURATION.approverQualificationProperty),
                operators: this.expressionConfigurator.getOperators(RX_APPROVAL_CONFIGURATION.approverQualificationProperty)
            };
            this.rxApprovalConfigurationService
                .getFunctionalRoles()
                .pipe(operators.tap(function (functionalRoles) {
                _this.availableFunctionalRoles = functionalRoles;
            }), operators.switchMap(function () { return _this.getFlowGroups(); }))
                .subscribe();
        };
        ApprovalFlowConfigurationComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.approvalFlowsForm.form.valueChanges.pipe(operators.distinctUntilChanged(), operators.takeUntil(this.destroyed$)).subscribe(function () {
                if (_this.approvalFlowsForm.dirty) {
                    _this.selectedFlowGroup.isDirty = true;
                }
            });
        };
        ApprovalFlowConfigurationComponent.prototype.getFlowGroups = function () {
            var _this = this;
            this.existingFlowGroupNames = [];
            this.deletedFlowGroups = [];
            return this.rxApprovalConfigurationService.getApprovalFlowConfigurations(this.registeredRecordDefinitionName).pipe(operators.tap(function (flowConfigurationResponse) {
                var _a;
                _this.allAvailableFlowGroups = flowConfigurationResponse.approvalFlowGroupConfigurations;
                if ((_a = _this.allAvailableFlowGroups) === null || _a === void 0 ? void 0 : _a.length) {
                    _this.allAvailableFlowGroups = _this.allAvailableFlowGroups
                        .map(function (flowGroup) {
                        flowGroup.isDirty = false;
                        flowGroup.hasError = false;
                        _this.existingFlowGroupNames.push(flowGroup.flowGroup);
                        flowGroup.approvalFlowConfigurationList = _this.refactorFlowsResponse(flowGroup.approvalFlowConfigurationList);
                        return flowGroup;
                    })
                        .sort(function (a, b) { return a.flowGroup.localeCompare(b.flowGroup); });
                    _this.selectedFlowGroup = _this.selectedFlowGroup.flowGroup
                        ? lodash.find(_this.allAvailableFlowGroups, { flowGroup: _this.selectedFlowGroup.flowGroup })
                        : _this.allAvailableFlowGroups[0];
                    _this.collapseAll();
                    _this.isSaveInProgress = false;
                }
            }));
        };
        ApprovalFlowConfigurationComponent.prototype.preparePayload = function (flowGroup) {
            var _this = this;
            var flowGroupConfiguration = lodash.cloneDeep(lodash.omit(flowGroup, ['isDirty', 'hasError']));
            flowGroupConfiguration.approvalFlowConfigurationList = lodash.map(flowGroupConfiguration.approvalFlowConfigurationList, function (approvalFlow) {
                approvalFlow = Object.assign({}, lodash.omit(approvalFlow, [
                    'isOpen',
                    'hasError',
                    'approversDisplayValue',
                    'isFieldIdentifyingApprover',
                    'signingCriteriaList'
                ]));
                approvalFlow.approvalFlowOutcomeMappingList = lodash.reject(approvalFlow.approvalFlowOutcomeMappingList, function (outcome) { return !outcome.processName; });
                approvalFlow.flowName = lodash.trim(approvalFlow.flowName);
                approvalFlow.signingCriteria = approvalFlow.signingCriteria[0].value;
                approvalFlow.approvalOverridePercentage =
                    approvalFlow.signingCriteria === RX_APPROVAL_CONFIGURATION.approverCriteria.percentage
                        ? approvalFlow.approvalOverridePercentage[0]
                        : 0;
                if (approvalFlow.approvers &&
                    !_this.rxApprovalConfigurationService.isFieldIdentifyingApprover(approvalFlow.approvers)) {
                    approvalFlow.approvers = '\\"' + approvalFlow.approvers + '\\"';
                }
                approvalFlow.approvers = approvalFlow.approvers || RX_APPROVAL_CONFIGURATION.noApproverProvided;
                return approvalFlow;
            });
            return flowGroupConfiguration;
        };
        ApprovalFlowConfigurationComponent.prototype.canSave = function () {
            return !this.isSaveInProgress && ((this.areFlowGroupsValid() && this.isDirty()) || !!this.deletedFlowGroups.length);
        };
        ApprovalFlowConfigurationComponent.prototype.isDirty = function () {
            var _a;
            return (lodash.some(this.allAvailableFlowGroups, function (flowGroup) { return flowGroup.isDirty; }) ||
                Boolean((_a = this.dialogApi) === null || _a === void 0 ? void 0 : _a.isDirty()) ||
                !!this.deletedFlowGroups.length);
        };
        ApprovalFlowConfigurationComponent.prototype.areFlowGroupsValid = function () {
            return !lodash.some(this.allAvailableFlowGroups, this.isInvalidFlowGroup);
        };
        ApprovalFlowConfigurationComponent.prototype.isInvalidFlowGroup = function (flowGroup) {
            return (!flowGroup.approvalFlowConfigurationList.length ||
                lodash.some(flowGroup.approvalFlowConfigurationList, function (flow) { return !flow.flowName || !flow.qualification || (flow.isLevelUp && flow.levels < 1) || flow.hasError; }));
        };
        ApprovalFlowConfigurationComponent.prototype.hasFlowGroups = function () {
            return this.selectedFlowGroup.flowGroup;
        };
        ApprovalFlowConfigurationComponent.prototype.isInvalidFlow = function (flow) {
            return (!flow.flowName ||
                !flow.qualification ||
                (flow.isLevelUp && flow.levels < 1) ||
                (!flow.isLevelUp && !flow.approvers && !flow.approverQualification));
        };
        ApprovalFlowConfigurationComponent.prototype.markInvalidSelectedGroupAndFlows = function () {
            var _this = this;
            this.selectedFlowGroup.approvalFlowConfigurationList.forEach(function (approvalFlow) {
                approvalFlow.hasError = _this.isInvalidFlow(approvalFlow);
            });
            this.selectedFlowGroup.hasError =
                !this.selectedFlowGroup.approvalFlowConfigurationList.length ||
                    lodash.some(this.selectedFlowGroup.approvalFlowConfigurationList, function (flow) { return flow.hasError; });
        };
        ApprovalFlowConfigurationComponent.prototype.markInvalidGroupsAndFlows = function () {
            var _this = this;
            this.allAvailableFlowGroups.forEach(function (flowGroup) {
                flowGroup.approvalFlowConfigurationList.forEach(function (approvalFlow) {
                    approvalFlow.hasError = _this.isInvalidFlow(approvalFlow);
                });
                flowGroup.hasError =
                    !flowGroup.approvalFlowConfigurationList.length ||
                        lodash.some(flowGroup.approvalFlowConfigurationList, function (flow) { return flow.hasError; });
            });
        };
        ApprovalFlowConfigurationComponent.prototype.saveFlowGroups = function () {
            var _this = this;
            this.approvalFlowsForm.form.markAsPristine();
            var createFailedCount = 0;
            var createSuccessCount = 0;
            var updateFailedCount = 0;
            var updateSuccessCount = 0;
            var deleteFailedCount = 0;
            var deleteSuccessCount = 0;
            var updateRequests$ = [];
            var createRequests$ = [];
            var deleteRequests$ = this.deletedFlowGroups.map(function (flowGroupName) { return _this.rxApprovalConfigurationService
                .deleteApprovalFlowGroup(flowGroupName, _this.registeredRecordDefinitionName)
                .pipe(operators.map(function () { return ({ status: 'Success' }); }), operators.catchError(function (error) { return rxjs.of({
                status: 'Failed',
                error: error
            }); })); });
            this.allAvailableFlowGroups.forEach(function (flowGroup) {
                if (flowGroup.isDirty) {
                    _this.isSaveInProgress = true;
                    var flowGroupConfiguration_1 = _this.preparePayload(flowGroup);
                    if (_this.isExistingFlowGroup(flowGroupConfiguration_1.flowGroup) || flowGroupConfiguration_1.flowGroupOldName) {
                        updateRequests$.push(_this.rxApprovalConfigurationService
                            .updateApprovalFlowGroup(flowGroupConfiguration_1.flowGroupOldName || flowGroupConfiguration_1.flowGroup, lodash.omit(flowGroupConfiguration_1, 'flowGroupOldName'), _this.registeredRecordDefinitionName)
                            .pipe(operators.map(function () { return ({
                            status: 'Success'
                        }); }), operators.catchError(function (error) { return rxjs.of({
                            status: 'Failed',
                            error: error
                        }); })));
                    }
                    else {
                        createRequests$.push(_this.rxApprovalConfigurationService
                            .saveApprovalFlowGroup(flowGroupConfiguration_1, _this.registeredRecordDefinitionName)
                            .pipe(operators.switchMap(function () { return _this.rxApprovalConfigurationService.getApprovalFlowGroup(_this.registeredRecordDefinitionName, flowGroupConfiguration_1.flowGroup); }), operators.tap(function (createdFlowGroup) {
                            _this.existingFlowGroupNames.push(createdFlowGroup.flowGroup);
                            var flowGroup = lodash.find(_this.allAvailableFlowGroups, { flowGroup: createdFlowGroup.flowGroup });
                            flowGroup.isDirty = false;
                            lodash.forEach(flowGroup.approvalFlowConfigurationList, function (flow, flowIndex) {
                                flow.approvalProcessId =
                                    createdFlowGroup.approvalFlowConfigurationList[flowIndex].approvalProcessId;
                                flow.guid = createdFlowGroup.approvalFlowConfigurationList[flowIndex].guid;
                            });
                        }), operators.map(function () { return ({
                            status: 'Success'
                        }); }), operators.catchError(function (error) { return rxjs.of({
                            status: 'Failed',
                            error: error
                        }); })));
                    }
                }
            });
            rxjs.forkJoin({
                createRequests: rxjs.forkJoin(createRequests$).pipe(operators.defaultIfEmpty([])),
                updateRequests: rxjs.forkJoin(updateRequests$).pipe(operators.defaultIfEmpty([])),
                deleteRequests: rxjs.forkJoin(deleteRequests$).pipe(operators.defaultIfEmpty([]))
            })
                .pipe(operators.tap(function (response) {
                var message = '';
                var failedResponses = lodash.flatten(lodash.map(response, function (requestResponses) { return lodash.filter(requestResponses, { status: 'Failed' }); }));
                createFailedCount = lodash.filter(response.createRequests, { status: 'Failed' }).length;
                createSuccessCount = lodash.filter(response.createRequests, { status: 'Success' }).length;
                updateFailedCount = lodash.filter(response.updateRequests, { status: 'Failed' }).length;
                updateSuccessCount = lodash.filter(response.updateRequests, { status: 'Success' }).length;
                deleteFailedCount = lodash.filter(response.deleteRequests, { status: 'Failed' }).length;
                deleteSuccessCount = lodash.filter(response.deleteRequests, { status: 'Success' }).length;
                if (createSuccessCount) {
                    message += _this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.message.flowgroup.created', { count: createSuccessCount }) + "\n";
                }
                if (updateSuccessCount) {
                    message += _this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.message.flowgroup.updated', { count: updateSuccessCount }) + "\n";
                }
                if (deleteSuccessCount) {
                    message += _this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.message.flowgroup.deleted', { count: deleteSuccessCount }) + "\n";
                }
                if (createFailedCount) {
                    message += _this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.message.flowgroup.create-failed', { count: createFailedCount }) + "\n";
                }
                if (updateFailedCount) {
                    message += _this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.message.flowgroup.update-failed', { count: updateFailedCount }) + "\n";
                }
                if (deleteFailedCount) {
                    message += _this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.message.flowgroup.delete-failed', { count: deleteFailedCount }) + "\n";
                }
                if (createFailedCount || updateFailedCount || deleteFailedCount) {
                    _this.rxNotificationService.addWarningMessage(message);
                }
                else {
                    _this.rxNotificationService.addSuccessMessage(message);
                }
                lodash.forEach(failedResponses, function (requestResponse) {
                    _this.errorHandler.handleError(requestResponse.error);
                });
            }), operators.filter(function () { return !(createFailedCount || updateFailedCount || deleteFailedCount); }), operators.switchMap(function () { return _this.getFlowGroups(); }))
                .subscribe({
                complete: function () {
                    _this.isSaveInProgress = false;
                }
            });
        };
        ApprovalFlowConfigurationComponent.prototype.onKeyDownNew = function (event) {
            if (event.code === 'Enter' && !this.isAddNewFlowGroupButtonDisabled()) {
                this.addNewFlowGroup();
            }
        };
        ApprovalFlowConfigurationComponent.prototype.addNewFlowGroup = function () {
            this.markInvalidSelectedGroupAndFlows();
            this.adaptPopoverDirective.close();
            this.allAvailableFlowGroups.push({
                flowGroup: lodash.trim(this.flowGroupName),
                hasError: true,
                approvalFlowConfigurationList: []
            });
            this.allAvailableFlowGroups.sort(function (a, b) { return a.flowGroup.localeCompare(b.flowGroup); });
            this.selectedFlowGroup = lodash.find(this.allAvailableFlowGroups, { flowGroup: lodash.trim(this.flowGroupName) });
            this.flowGroupName = null;
        };
        ApprovalFlowConfigurationComponent.prototype.onKeyDownRename = function (event, context) {
            if (event.code === 'Enter') {
                this.renameFlowGroup(context);
            }
        };
        ApprovalFlowConfigurationComponent.prototype.renameFlowGroup = function (context) {
            var _this = this;
            if (!this.isExistingFlowGroup()) {
                this.selectedFlowGroup.flowGroup = lodash.trim(this.flowGroupNewName);
                context.close();
            }
            else {
                this.rxModalService
                    .confirm({
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                    modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                    message: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.message.flowgroup.updatingGroupName')
                })
                    .then(function (result) {
                    if (result) {
                        _this.selectedFlowGroup.isDirty = true;
                        _this.selectedFlowGroup.flowGroupOldName = _this.selectedFlowGroup.flowGroup;
                        _this.selectedFlowGroup.flowGroup = lodash.trim(_this.flowGroupNewName);
                    }
                });
            }
        };
        ApprovalFlowConfigurationComponent.prototype.deleteFlowGroup = function () {
            var _this = this;
            if (!this.isExistingFlowGroup()) {
                this.rxModalService
                    .confirm({
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                    modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                    message: this.translateService.instant('com.bmc.arsys.rx.client.common.unsaved-data.message')
                })
                    .then(function (result) {
                    if (result) {
                        lodash.remove(_this.allAvailableFlowGroups, { flowGroup: _this.selectedFlowGroup.flowGroup });
                        _this.setEmptyFlowGroup();
                    }
                });
            }
            else {
                this.rxModalService
                    .confirm({
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                    modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                    message: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.message.flowgroup.confirm')
                })
                    .then(function (result) {
                    if (result) {
                        _this.deletedFlowGroups.push(_this.selectedFlowGroup.flowGroup);
                        lodash.remove(_this.allAvailableFlowGroups, { flowGroup: _this.selectedFlowGroup.flowGroup });
                        _this.setEmptyFlowGroup();
                    }
                });
            }
        };
        ApprovalFlowConfigurationComponent.prototype.setEmptyFlowGroup = function () {
            this.selectedFlowGroup = this.getEmptyFlowGroup();
        };
        ApprovalFlowConfigurationComponent.prototype.onFlowQualificationEvent = function (flowIndex) {
            this.selectFlowQualificationExpression(flowIndex);
        };
        ApprovalFlowConfigurationComponent.prototype.selectFlowQualificationExpression = function (flowIndex) {
            var _this = this;
            this.rxExpressionEditorService
                .openEditor({
                property: {
                    path: RX_APPROVAL_CONFIGURATION.flowQualificationProperty,
                    value: this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].qualification,
                    label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.qualification')
                },
                expressionConfigurator: this.expressionConfigurator,
                legend: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),
                        icon: 'd-icon-dollar'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.field.label'),
                        icon: 'd-icon-field_text'
                    }
                ]
            }, function (dialogApi) { return (_this.dialogApi = dialogApi); })
                .subscribe(function (expression) {
                _this.dialogApi = null;
                _this.approvalFlowsForm.form.markAsDirty();
                _this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].qualification = expression.value;
            });
        };
        ApprovalFlowConfigurationComponent.prototype.onApproverQualificationEvent = function (flowIndex) {
            this.selectApproverQualificationExpression(flowIndex);
        };
        ApprovalFlowConfigurationComponent.prototype.selectApproverQualificationExpression = function (flowIndex) {
            var _this = this;
            this.rxExpressionEditorService
                .openEditor({
                property: {
                    path: RX_APPROVAL_CONFIGURATION.approverQualificationProperty,
                    value: this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].approverQualification,
                    label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.general.qualify-approvers.label')
                },
                expressionConfigurator: this.expressionConfigurator,
                legend: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),
                        icon: 'd-icon-dollar'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.field.label'),
                        icon: 'd-icon-field_text'
                    }
                ]
            }, function (dialogApi) { return (_this.dialogApi = dialogApi); })
                .subscribe(function (expression) {
                _this.dialogApi = null;
                _this.approvalFlowsForm.form.markAsDirty();
                _this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].approverQualification = expression.value;
                _this.updateFlowErrorState(flowIndex);
            });
        };
        ApprovalFlowConfigurationComponent.prototype.updateFlowErrorState = function (flowIndex) {
            this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].hasError = Boolean(!this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].approverQualification &&
                !this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].approvers);
            this.selectedFlowGroup.hasError = lodash.some(this.selectedFlowGroup.approvalFlowConfigurationList, function (flow) { return flow.hasError; });
        };
        ApprovalFlowConfigurationComponent.prototype.getFlowEmptyOutcomes = function () {
            return [
                {
                    processName: null,
                    action: '2',
                    statusOutcome: '1'
                },
                {
                    processName: null,
                    action: '2',
                    statusOutcome: '2'
                },
                {
                    processName: null,
                    action: '2',
                    statusOutcome: '6'
                }
            ];
        };
        ApprovalFlowConfigurationComponent.prototype.getEmptyGeneralApprovalFlow = function () {
            return {
                isOpen: true,
                hasError: false,
                approvalProcessId: null,
                flowName: '',
                processType: null,
                qualification: null,
                formattedQualification: null,
                precedence: this.selectedFlowGroup.approvalFlowConfigurationList.length,
                signingCriteria: this.getCriteria(),
                signingCriteriaList: this.getFlowCriteriaList(),
                approvalOverridePercentage: 50,
                isLevelUp: false,
                levels: null,
                approvers: '',
                applyApproverExclusion: true,
                approversDisplayValue: '',
                approverQualification: null,
                approvalFlowOutcomeMappingList: this.getFlowEmptyOutcomes()
            };
        };
        ApprovalFlowConfigurationComponent.prototype.getCriteria = function (value) {
            return [lodash.find(this.getFlowCriteriaList(), { value: value || RX_APPROVAL_CONFIGURATION.approverCriteria.oneMust })];
        };
        ApprovalFlowConfigurationComponent.prototype.getFlowCriteriaList = function () {
            return lodash.cloneDeep(this.signingCriteriaList);
        };
        ApprovalFlowConfigurationComponent.prototype.addNewGeneralFlow = function () {
            var _this = this;
            this.collapseAll();
            setTimeout(function () {
                _this.selectedFlowGroup.approvalFlowConfigurationList.push(_this.getEmptyGeneralApprovalFlow());
            });
        };
        ApprovalFlowConfigurationComponent.prototype.addNewLevelUpFlow = function () {
            var _this = this;
            this.collapseAll();
            setTimeout(function () {
                _this.selectedFlowGroup.approvalFlowConfigurationList.push(Object.assign(Object.assign({}, _this.getEmptyGeneralApprovalFlow()), { isLevelUp: true }));
            });
        };
        ApprovalFlowConfigurationComponent.prototype.selectFlowGroup = function (flowGroupName) {
            this.selectedFlowGroup = lodash.find(this.allAvailableFlowGroups, { flowGroup: flowGroupName });
            if (!this.selectedFlowGroup.isDirty) {
                this.approvalFlowsForm.form.markAsPristine();
            }
            this.collapseAll();
            this.markInvalidGroupsAndFlows();
        };
        ApprovalFlowConfigurationComponent.prototype.onSelectedFlowDrop = function (event) {
            this.moveFlow(event.previousIndex, event.currentIndex);
        };
        ApprovalFlowConfigurationComponent.prototype.moveFlow = function (previousIndex, currentIndex) {
            i9.moveItemInArray(this.selectedFlowGroup.approvalFlowConfigurationList, previousIndex, currentIndex);
            this.resetFlowPrecedences();
        };
        ApprovalFlowConfigurationComponent.prototype.moveFlowUp = function (currentIndex) {
            i9.moveItemInArray(this.selectedFlowGroup.approvalFlowConfigurationList, currentIndex, currentIndex - 1);
            this.resetFlowPrecedences();
        };
        ApprovalFlowConfigurationComponent.prototype.moveFlowDown = function (currentIndex) {
            i9.moveItemInArray(this.selectedFlowGroup.approvalFlowConfigurationList, currentIndex, currentIndex + 1);
            this.resetFlowPrecedences();
        };
        ApprovalFlowConfigurationComponent.prototype.removeFlow = function (index) {
            this.selectedFlowGroup.approvalFlowConfigurationList.splice(index, 1);
            this.markInvalidSelectedGroupAndFlows();
            this.resetFlowPrecedences();
        };
        ApprovalFlowConfigurationComponent.prototype.resetFlowPrecedences = function () {
            this.approvalFlowsForm.form.markAsDirty();
            this.selectedFlowGroup.approvalFlowConfigurationList = this.selectedFlowGroup.approvalFlowConfigurationList.map(function (currentFlow, index) {
                currentFlow.precedence = index;
                return currentFlow;
            });
        };
        ApprovalFlowConfigurationComponent.prototype.optionFormatter = function (option) {
            return option.displayValue;
        };
        ApprovalFlowConfigurationComponent.prototype.refactorFlowsResponse = function (approvalFlows) {
            var _this = this;
            return lodash.flow(function (flows) { return lodash.sortBy(flows, 'precedence'); }, function (flows) { return lodash.map(flows, function (currentFlow) {
                currentFlow.isOpen = false;
                var flowOutcomeMappings = lodash.cloneDeep(currentFlow.approvalFlowOutcomeMappingList);
                currentFlow.approvalFlowOutcomeMappingList[0] =
                    lodash.find(flowOutcomeMappings, { statusOutcome: '1' }) || _this.getFlowEmptyOutcomes()[0];
                currentFlow.approvalFlowOutcomeMappingList[1] =
                    lodash.find(flowOutcomeMappings, { statusOutcome: '2' }) || _this.getFlowEmptyOutcomes()[1];
                currentFlow.approvalFlowOutcomeMappingList[2] =
                    lodash.find(flowOutcomeMappings, { statusOutcome: '6' }) || _this.getFlowEmptyOutcomes()[2];
                if (!currentFlow.approvers || currentFlow.approvers === RX_APPROVAL_CONFIGURATION.noApproverProvided) {
                    currentFlow.approvers = '';
                }
                currentFlow.approvers = currentFlow.approvers.replace(/\\"/g, '');
                currentFlow.approversDisplayValue = _this.getApproversDisplay(currentFlow);
                currentFlow.signingCriteriaList = _this.getFlowCriteriaList();
                currentFlow.approvalOverridePercentage = [currentFlow.approvalOverridePercentage];
                currentFlow.signingCriteria = [
                    {
                        value: currentFlow.signingCriteria,
                        displayValue: _this.getCriteria(currentFlow.signingCriteria)[0].displayValue
                    }
                ];
                return currentFlow;
            }); })(approvalFlows);
        };
        ApprovalFlowConfigurationComponent.prototype.isExistingFlowGroup = function (flowGroupName) {
            if (flowGroupName === void 0) { flowGroupName = null; }
            return this.existingFlowGroupNames.includes(flowGroupName || this.selectedFlowGroup.flowGroup);
        };
        ApprovalFlowConfigurationComponent.prototype.isRenameFlowGroupButtonDisabled = function () {
            var _this = this;
            return (lodash.trim(this.flowGroupNewName) !== this.selectedFlowGroup.flowGroup &&
                lodash.some(this.allAvailableFlowGroups, function (flowGroup) { return flowGroup.flowGroup.toLowerCase() === lodash.trim(_this.flowGroupNewName.toLowerCase()); }));
        };
        ApprovalFlowConfigurationComponent.prototype.isAddNewFlowGroupButtonDisabled = function () {
            var _this = this;
            return (!this.flowGroupName ||
                lodash.some(this.allAvailableFlowGroups, function (flowGroup) { return flowGroup.flowGroup.toLowerCase() === lodash.trim(_this.flowGroupName.toLowerCase()); }));
        };
        ApprovalFlowConfigurationComponent.prototype.expandAll = function () {
            this.selectedFlowGroup.approvalFlowConfigurationList.forEach(function (approvalFlow) { return (approvalFlow.isOpen = true); });
        };
        ApprovalFlowConfigurationComponent.prototype.collapseAll = function () {
            this.selectedFlowGroup.approvalFlowConfigurationList.forEach(function (approvalFlow) { return (approvalFlow.isOpen = false); });
        };
        ApprovalFlowConfigurationComponent.prototype.selectFlowApprovers = function (flowIndex) {
            var _this = this;
            this.rxModalService
                .openModal({
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow.select-approvers-dialog.title') +
                    ': ' +
                    this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].flowName,
                data: {
                    registeredRecordDefinitionName: this.registeredRecordDefinitionName,
                    existingApprovers: this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].approvers,
                    isFieldIdentifyingApprover: this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].isFieldIdentifyingApprover,
                    onApiReady: function (dialogApi) {
                        _this.dialogApi = dialogApi;
                    }
                },
                content: FlowApproversSelectorComponent,
                size: i1$4.OpenViewActionModalSize.Large
            })
                .then(function (result) {
                _this.dialogApi = null;
                _this.approvalFlowsForm.form.markAsDirty();
                _this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].approvers = result.value;
                _this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].approversDisplayValue = result.displayValue;
                _this.manageApproverCriteriaOption(flowIndex);
                _this.updateFlowErrorState(flowIndex);
                _this.selectedFlowGroup.isDirty = true;
            })
                .catch(function () {
                _this.dialogApi = null;
            });
        };
        ApprovalFlowConfigurationComponent.prototype.manageApproverCriteriaOption = function (flowIndex) {
            if (this.rxApprovalConfigurationService.isFieldIdentifyingApprover(this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].approvers)) {
                this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].signingCriteria = this.getCriteria();
                lodash.find(this.selectedFlowGroup.approvalFlowConfigurationList[flowIndex].signingCriteriaList, {
                    value: RX_APPROVAL_CONFIGURATION.approverCriteria.percentage
                }).disabled = true;
            }
        };
        ApprovalFlowConfigurationComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        ApprovalFlowConfigurationComponent.prototype.getApproversDisplay = function (approvalFlow) {
            var _this = this;
            var approvers = approvalFlow.approvers.split(RX_APPROVAL_CONFIGURATION.approverSeparator);
            return lodash.map(approvers, function (approver) {
                if (_this.rxApprovalConfigurationService.isFieldIdentifyingApprover(approvalFlow.approvers)) {
                    approvalFlow.isFieldIdentifyingApprover = true;
                    approver = _this.rxApprovalConfigurationService.getFieldIdentifyingApprover(approver);
                }
                else if (_this.rxApprovalConfigurationService.isFunctionalRole(approver)) {
                    approver = lodash.get(lodash.find(_this.availableFunctionalRoles, {
                        id: _this.rxApprovalConfigurationService.getFunctionalRoleGuid(approver)
                    }), 'name');
                }
                else if (_this.rxApprovalConfigurationService.isApproverPeople(approver)) {
                    approver = _this.rxApprovalConfigurationService.getApproverUser(approver);
                }
                else {
                    approver = _this.rxApprovalConfigurationService.getLastLabel(approver);
                }
                return approver;
            })
                .filter(Boolean)
                .join(', ');
        };
        ApprovalFlowConfigurationComponent.prototype.getFlowName = function (flow) {
            return (flow.flowName ||
                (flow.isLevelUp
                    ? "[" + this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow-group.level-flow.new.default-value') + "]"
                    : "[" + this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.flow-group.general-flow.new.default-value') + "]"));
        };
        return ApprovalFlowConfigurationComponent;
    }());
    ApprovalFlowConfigurationComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApprovalFlowConfigurationComponent, deps: [{ token: i0__namespace.Injector }, { token: i0__namespace.ErrorHandler }, { token: i1__namespace.RxModalService }, { token: i4__namespace.TranslateService }, { token: i2__namespace.RxNotificationService }, { token: i4__namespace$1.RxExpressionEditorService }, { token: RxApprovalConfigurationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ApprovalFlowConfigurationComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ApprovalFlowConfigurationComponent, selector: "rx-approval-flow-configuration", inputs: { registeredRecordDefinitionName: "registeredRecordDefinitionName" }, viewQueries: [{ propertyName: "adaptPopoverDirective", first: true, predicate: i1$2.AdaptPopoverDirective, descendants: true }, { propertyName: "approvalFlowsForm", first: true, predicate: ["approvalFlowsForm"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"row d-flex h-100\">\n  <div class=\"col-3 border-right d-flex flex-column h-100\">\n    <h5>\n      {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.available-flow-groups.title' | translate }}\n    </h5>\n\n    <button\n      type=\"button\"\n      adapt-button\n      btn-type=\"tertiary\"\n      rx-id=\"new-flow-group-button\"\n      class=\"d-icon-plus_circle px-0 align-self-start\"\n      [adaptPopover]=\"newFlowGroupTemplate\"\n      maxWidth=\"365\"\n      autoClose=\"outside\"\n      appendToBody=\"true\"\n      placement=\"bottom-left\"\n      fallbackPlacement=\"bottom\"\n    >\n      {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.new.title' | translate }}\n    </button>\n\n    <div class=\"available-list border p-3 flex-fill\">\n      <div class=\"vertical-center\" *ngIf=\"!allAvailableFlowGroups.length\">\n        <adapt-empty-state\n          [type]=\"'list'\"\n          label=\"{{ 'com.bmc.arsys.rx.client.empty-state.no-items-available.label' | translate }}\"\n        ></adapt-empty-state>\n      </div>\n\n      <button\n        type=\"button\"\n        adapt-button\n        btn-type=\"tertiary\"\n        rx-id=\"rename-flow-group-button\"\n        class=\"d-icon-field_text px-0 pt-0\"\n        [disabled]=\"!selectedFlowGroup.flowGroup\"\n        [adaptPopover]=\"renameFlowGroupTemplate\"\n        maxWidth=\"365\"\n        autoClose=\"outside\"\n        appendToBody=\"true\"\n        placement=\"bottom-left\"\n        fallbackPlacement=\"bottom\"\n        (shown)=\"flowGroupNewName = selectedFlowGroup.flowGroup\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.rename.label' | translate }}\n      </button>\n\n      <button\n        type=\"button\"\n        adapt-button\n        btn-type=\"tertiary\"\n        rx-id=\"delete-flow-group-button\"\n        class=\"d-icon-trash pt-0\"\n        [disabled]=\"!selectedFlowGroup.flowGroup\"\n        (click)=\"deleteFlowGroup()\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.delete.label' | translate }}\n      </button>\n\n      <adapt-rx-radiobutton-group\n        class=\"d-block form-group\"\n        rx-id=\"available-flow-groups\"\n        (ngModelChange)=\"selectFlowGroup($event)\"\n        [(ngModel)]=\"selectedFlowGroup.flowGroup\"\n      >\n        <div *ngFor=\"let group of allAvailableFlowGroups\" class=\"d-flex align-items-center\">\n          <adapt-rx-radiobutton\n            class=\"mb-0 mt-0 wrap-word\"\n            [value]=\"group.flowGroup\"\n            [label]=\"group.flowGroup\"\n          ></adapt-rx-radiobutton>\n\n          <div class=\"ml-1 mb-1 d-icon-exclamation_triangle text-danger\" *ngIf=\"group.hasError\"></div>\n        </div>\n      </adapt-rx-radiobutton-group>\n    </div>\n  </div>\n\n  <div class=\"col-9 d-flex flex-column h-100\">\n    <div class=\"d-flex flex-column h-100\">\n      <h5>\n        {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.selected-flow-group.title' | translate }}:\n        {{ selectedFlowGroup.flowGroup || ('com.bmc.arsys.rx.client.common.none.label' | translate) }}\n      </h5>\n\n      <div class=\"row\">\n        <div class=\"col-12 col-sm-6\">\n          <div class=\"d-inline-flex align-items-center\">\n            <button\n              type=\"button\"\n              adapt-button\n              btn-type=\"tertiary\"\n              rx-id=\"new-general-flow-button\"\n              class=\"d-icon-plus_circle px-0\"\n              [disabled]=\"!selectedFlowGroup.flowGroup\"\n              (click)=\"addNewGeneralFlow()\"\n            >\n              {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.general.new.label' | translate }}\n            </button>\n            <span\n              class=\"d-icon-right-question_circle_o ml-1 mr-4\"\n              adaptPopover=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.flow.general.info' | translate }}\"\n              placement=\"right\"\n              appendToBody=\"true\"\n            >\n            </span>\n          </div>\n\n          <div class=\"d-inline-flex align-items-center\">\n            <button\n              type=\"button\"\n              adapt-button\n              btn-type=\"tertiary\"\n              rx-id=\"new-level-flow-button\"\n              class=\"d-icon-plus_circle px-0\"\n              [disabled]=\"!selectedFlowGroup.flowGroup\"\n              (click)=\"addNewLevelUpFlow()\"\n            >\n              {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.level.new.label' | translate }}\n            </button>\n\n            <span\n              class=\"d-icon-right-question_circle_o ml-1\"\n              adaptPopover=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.flow.level.info' | translate }}\"\n              placement=\"right\"\n              appendToBody=\"true\"\n            >\n            </span>\n          </div>\n        </div>\n\n        <div class=\"col-12 col-sm-6 text-right\">\n          <button\n            type=\"button\"\n            adapt-button\n            btn-type=\"tertiary\"\n            rx-id=\"expand-button\"\n            (click)=\"expandAll()\"\n            *ngIf=\"selectedFlowGroup.approvalFlowConfigurationList.length\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.expand-all.label' | translate }}\n          </button>\n\n          <button\n            type=\"button\"\n            adapt-button\n            btn-type=\"tertiary\"\n            rx-id=\"collapse-button\"\n            (click)=\"collapseAll()\"\n            *ngIf=\"selectedFlowGroup.approvalFlowConfigurationList.length\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.collapse-all.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <adapt-alert\n        *ngIf=\"selectedFlowGroup.flowGroup && !selectedFlowGroup.approvalFlowConfigurationList.length\"\n        [config]=\"{\n          variant: 'warning',\n          dismissible: false,\n          content: 'com.bmc.arsys.rx.client.approval.configuration.flow.group-has-no-flows-error.message' | translate\n        }\"\n      ></adapt-alert>\n\n      <div class=\"vertical-center\">\n        <adapt-empty-state\n          *ngIf=\"!selectedFlowGroup.flowGroup && !selectedFlowGroup.approvalFlowConfigurationList.length\"\n          [type]=\"'rules'\"\n          label=\"{{ 'com.bmc.arsys.rx.client.empty-state.no-items-available.label' | translate }}\"\n        ></adapt-empty-state>\n      </div>\n\n      <div\n        class=\"designer-modal-accordion-wrapper flex-fill pt-0\"\n        [ngClass]=\"{ 'border-top': selectedFlowGroup.approvalFlowConfigurationList.length }\"\n        cdkDropList\n        (cdkDropListDropped)=\"onSelectedFlowDrop($event)\"\n      >\n        <form #approvalFlowsForm=\"ngForm\">\n          <adapt-accordion [multiselect]=\"true\" class=\"flex-fill\">\n            <div\n              *ngFor=\"\n                let flow of selectedFlowGroup.approvalFlowConfigurationList;\n                let index = index;\n                let first = first;\n                let last = last\n              \"\n              class=\"designer-modal-accordion-content\"\n              cdkDrag\n              cdkDragLockAxis=\"y\"\n              [cdkDragData]=\"flow\"\n            >\n              <div class=\"d-icon-left-dots designer-modal-drag-handle\" cdkDragHandle></div>\n\n              <adapt-accordion-tab\n                class=\"d-block\"\n                [isOpen]=\"flow.isOpen\"\n                (open)=\"flow.isOpen = true\"\n                (close)=\"flow.isOpen = false; markInvalidSelectedGroupAndFlows()\"\n              >\n                <div class=\"card-title-text w-100\">\n                  <div class=\"designer-modal-card-title-content\">\n                    <div class=\"left-header-block\">\n                      <div class=\"rx-ellipsis\" [title]=\"getFlowName(flow)\" rx-id=\"card-title\">\n                        {{ getFlowName(flow) }}\n                      </div>\n                      <div class=\"d-icon-exclamation_triangle text-danger\" *ngIf=\"flow.hasError\"></div>\n                    </div>\n\n                    <div class=\"right-header-block\">\n                      <div class=\"designer-modal-card-title-index-buttons\">\n                        <button\n                          class=\"d-icon-angle_up px-3 py-1\"\n                          adapt-button\n                          btn-type=\"tertiary\"\n                          size=\"small\"\n                          type=\"button\"\n                          [disabled]=\"first\"\n                          (click)=\"$event.stopPropagation(); moveFlowUp(index)\"\n                        ></button>\n\n                        <button\n                          class=\"d-icon-angle_down px-3 py-1\"\n                          adapt-button\n                          btn-type=\"tertiary\"\n                          size=\"small\"\n                          type=\"button\"\n                          [disabled]=\"last\"\n                          (click)=\"$event.stopPropagation(); moveFlowDown(index)\"\n                        ></button>\n                      </div>\n\n                      <button\n                        class=\"d-icon-left-cross_adapt p-1 pr-4\"\n                        adapt-button\n                        size=\"small\"\n                        type=\"button\"\n                        (click)=\"removeFlow(index)\"\n                      >\n                        {{ 'com.bmc.arsys.rx.client.common.remove.label' | translate }}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n\n                <adapt-alert\n                  *ngIf=\"flow.hasError\"\n                  [config]=\"{\n                    variant: 'warning',\n                    dismissible: false,\n                    content:\n                      'com.bmc.arsys.rx.client.approval.configuration.flow.approvers.not-selected.message' | translate\n                  }\"\n                ></adapt-alert>\n\n                <adapt-rx-textfield\n                  class=\"form-group d-block\"\n                  rx-id=\"flow-name\"\n                  label=\"{{\n                    'com.bmc.arsys.rx.client.approval.configuration.flow.general.flow-name.label' | translate\n                  }}\"\n                  required=\"true\"\n                  [(ngModel)]=\"flow.flowName\"\n                  [autofocus]=\"true\"\n                  name=\"{{ 'flowName' + index }}\"\n                  maxlength=\"254\"\n                >\n                </adapt-rx-textfield>\n\n                <adapt-rx-counter\n                  *ngIf=\"flow.isLevelUp\"\n                  adaptMin=\"1\"\n                  [min]=\"1\"\n                  class=\"form-group d-block\"\n                  rx-id=\"flow-levels\"\n                  label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.levels' | translate }}\"\n                  required=\"true\"\n                  [(ngModel)]=\"flow.levels\"\n                  name=\"{{ 'levels' + index }}\"\n                >\n                </adapt-rx-counter>\n\n                <rx-expression-form-control\n                  class=\"d-block\"\n                  [ngClass]=\"{ 'form-group': !flow.isLevelUp }\"\n                  rx-id=\"flow-qualification\"\n                  [options]=\"flowQualificationOptions\"\n                  [(ngModel)]=\"flow.qualification\"\n                  (events)=\"onFlowQualificationEvent(index)\"\n                  name=\"{{ 'flowQualification' + index }}\"\n                ></rx-expression-form-control>\n\n                <div *ngIf=\"!flow.isLevelUp\" rx-id=\"flow-approvers\" class=\"form-group\">\n                  <label class=\"form-control-label\">\n                    {{ 'com.bmc.arsys.rx.client.approval.configuration.approvers' | translate }}\n\n                    <button\n                      type=\"button\"\n                      adapt-button\n                      class=\"d-icon-pencil px-1 ml-3 mb-1\"\n                      btn-type=\"tertiary\"\n                      rx-id=\"edit-button\"\n                      (click)=\"selectFlowApprovers(index)\"\n                    >\n                      {{ 'com.bmc.arsys.rx.client.common.edit.label' | translate }}\n                    </button>\n                  </label>\n\n                  <adapt-rx-checkbox\n                    *ngIf=\"!flow.isLevelUp\"\n                    class=\"checkbox-inline ml-4\"\n                    label=\"{{\n                      'com.bmc.arsys.rx.client.approval.configuration.apply-approver-exclusion.label' | translate\n                    }}\"\n                    [(ngModel)]=\"flow.applyApproverExclusion\"\n                    name=\"{{ 'applyApproverExclusion' + index }}\"\n                  >\n                  </adapt-rx-checkbox>\n                  <span\n                    class=\"d-icon-right-question_circle_o ml-1\"\n                    adaptPopover=\"{{\n                      'com.bmc.arsys.rx.client.approval.configuration.apply-approver-exclusion.tooltip' | translate\n                    }}\"\n                    placement=\"right\"\n                    appendToBody=\"true\"\n                  >\n                  </span>\n\n                  <div class=\"approver-list bg-secondary p-1\">\n                    {{ flow.approversDisplayValue }}\n                  </div>\n                </div>\n\n                <rx-expression-form-control\n                  *ngIf=\"!flow.isLevelUp\"\n                  class=\"d-block form-group\"\n                  rx-id=\"approver-qualification\"\n                  [options]=\"qualifyApproversOptions\"\n                  [(ngModel)]=\"flow.approverQualification\"\n                  (events)=\"onApproverQualificationEvent(index)\"\n                  name=\"{{ 'approverQualification' + index }}\"\n                ></rx-expression-form-control>\n\n                <div class=\"row\">\n                  <div class=\"col-12 col-sm-6 form-group\">\n                    <adapt-rx-select\n                      *ngIf=\"!flow.isLevelUp\"\n                      class=\"d-block\"\n                      label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.if.multiple.approvers' | translate }}\"\n                      rx-id=\"signing-criteria\"\n                      [(ngModel)]=\"flow.signingCriteria\"\n                      [options]=\"flow.signingCriteriaList\"\n                      [optionFormatter]=\"optionFormatter\"\n                      name=\"{{ 'signingCriteria' + index }}\"\n                    >\n                    </adapt-rx-select>\n                  </div>\n\n                  <div class=\"col-12 col-sm-6 form-group\">\n                    <adapt-rx-select\n                      *ngIf=\"!flow.isLevelUp && flow.signingCriteria[0]?.value === 2\"\n                      class=\"d-block\"\n                      label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.value.of' | translate }}\"\n                      rx-id=\"signing-criteria-percentage\"\n                      [(ngModel)]=\"flow.approvalOverridePercentage\"\n                      [options]=\"signingCriteriaPercentageList\"\n                      name=\"{{ 'signingCriteriaPercentage' + index }}\"\n                    >\n                    </adapt-rx-select>\n                  </div>\n                </div>\n\n                <hr class=\"my-1\" />\n                <h6>{{ 'com.bmc.arsys.rx.client.approval.configuration.flow.outcome.label' | translate }}</h6>\n\n                <div class=\"row\" *ngIf=\"flow.isOpen\">\n                  <div class=\"col-12 col-sm-6 form-group\">\n                    <rx-definition-picker\n                      [options]=\"processOnApproveOptions\"\n                      [(ngModel)]=\"flow.approvalFlowOutcomeMappingList[0].processName\"\n                      rx-id=\"process-on-approval\"\n                      name=\"{{ 'processOnApproval' + index }}\"\n                    >\n                    </rx-definition-picker>\n                  </div>\n\n                  <div class=\"col-12 col-sm-6 form-group\">\n                    <rx-definition-picker\n                      [options]=\"processOnRejectOptions\"\n                      [(ngModel)]=\"flow.approvalFlowOutcomeMappingList[1].processName\"\n                      rx-id=\"process-on-rejection\"\n                      name=\"{{ 'processOnRejection' + index }}\"\n                    >\n                    </rx-definition-picker>\n                  </div>\n\n                  <div class=\"col-12 col-sm-6 form-group\">\n                    <rx-definition-picker\n                      [options]=\"processOnErrorOptions\"\n                      [(ngModel)]=\"flow.approvalFlowOutcomeMappingList[2].processName\"\n                      rx-id=\"process-on-error\"\n                      name=\"{{ 'processOnError' + index }}\"\n                    >\n                    </rx-definition-picker>\n                  </div>\n                </div>\n              </adapt-accordion-tab>\n            </div>\n          </adapt-accordion>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #newFlowGroupTemplate let-context=\"context\">\n  <div class=\"flow-group-template\">\n    <div class=\"text-center mb-3 font-weight-bold\">\n      {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.new.title' | translate }}\n    </div>\n\n    <adapt-rx-textfield\n      class=\"mb-1 d-block\"\n      rx-id=\"new-flow-button\"\n      label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.flow.flow-group-name.label' | translate }}\"\n      required=\"true\"\n      [(ngModel)]=\"flowGroupName\"\n      [autofocus]=\"true\"\n      (keydown)=\"onKeyDownNew($event)\"\n      maxlength=\"254\"\n    >\n    </adapt-rx-textfield>\n\n    <div class=\"text-danger\" *ngIf=\"flowGroupName && isAddNewFlowGroupButtonDisabled()\">\n      {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.flow-group-exists.warning' | translate }}\n    </div>\n\n    <div class=\"text-right mt-5\">\n      <button\n        type=\"button\"\n        adapt-button\n        btn-type=\"primary\"\n        rx-id=\"add-button\"\n        (click)=\"addNewFlowGroup()\"\n        [disabled]=\"isAddNewFlowGroupButtonDisabled()\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.add.label' | translate }}\n      </button>\n\n      <button\n        type=\"button\"\n        adapt-button\n        btn-type=\"secondary\"\n        rx-id=\"cancel-button\"\n        (click)=\"context.close()\"\n        class=\"ml-2\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n      </button>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #renameFlowGroupTemplate let-context=\"context\">\n  <div class=\"flow-group-template\">\n    <div class=\"text-center mb-3 font-weight-bold\">\n      {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.rename.title' | translate }}\n    </div>\n\n    <adapt-rx-textfield\n      class=\"mb-1 d-block\"\n      rx-id=\"rename-flow-button\"\n      label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.flow.flow-group-name.label' | translate }}\"\n      required=\"true\"\n      [(ngModel)]=\"flowGroupNewName\"\n      [autofocus]=\"true\"\n      (keydown)=\"onKeyDownRename($event, context)\"\n      maxlength=\"254\"\n    >\n    </adapt-rx-textfield>\n\n    <div class=\"text-danger\" *ngIf=\"flowGroupNewName && isRenameFlowGroupButtonDisabled()\">\n      {{ 'com.bmc.arsys.rx.client.approval.configuration.flow.flow-group-exists.warning' | translate }}\n    </div>\n\n    <div class=\"text-right mt-5\">\n      <button\n        type=\"button\"\n        adapt-button\n        btn-type=\"primary\"\n        rx-id=\"rename-button\"\n        (click)=\"renameFlowGroup(context)\"\n        [disabled]=\"isRenameFlowGroupButtonDisabled()\"\n      >\n        {{ 'com.bmc.arsys.rx.client.approval.update.button.label' | translate }}\n      </button>\n    </div>\n  </div>\n</ng-template>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.designer-modal-body{height:645px;min-height:calc(100% - 61px)!important}.designer-modal-accordion-wrapper{display:flex;flex-direction:column;height:100%;overflow:auto;padding-top:10px}.designer-modal-accordion-content{position:relative}.designer-modal-accordion-content.cdk-drag-preview{z-index:1200!important}.designer-modal-drag-handle{cursor:move;position:absolute;top:0;left:0;height:46px;padding:14px 10px 14px 14px;z-index:1}.designer-modal-card-title-content{width:100%;display:flex}.designer-modal-card-title-content .left-header-block,.designer-modal-card-title-content .right-header-block{display:flex;align-items:center}.designer-modal-card-title-content .left-header-block{flex-grow:1;min-width:0;font-size:14px;padding-left:22px}.designer-modal-card-sub-title{color:#7c7f81;font-weight:normal}.designer-modal-card-title-index-buttons{display:flex;font-size:19px}.rx-card{overflow:auto}.rx-tree-draggable-node{cursor:pointer}.rx-tree-draggable-node.cdk-drag-preview{z-index:1200!important}.rx-tree-draggable-node.cdk-drag{opacity:1}.rx-tree-node-label{word-break:break-all}rx-form-builder{max-width:400px}.accordion-wrapper{max-height:540px;overflow:auto}.available-list{overflow:auto}.vertical-center{position:absolute;margin:auto;top:0;bottom:0;left:20px;right:20px;height:130px}.flow-group-template{width:290px}.approver-list{min-height:28px}.wrap-word{word-break:break-all}.left-header-block .d-icon-exclamation_triangle{margin-left:5px}\n"], components: [{ type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace$1.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }, { type: i1__namespace$1.AdaptRxRadiobuttonGroupComponent, selector: "adapt-rx-radiobutton-group", inputs: ["formControlName"] }, { type: i1__namespace$1.AdaptRxRadiobuttonComponent, selector: "adapt-rx-radiobutton", inputs: ["name", "label", "id", "value", "checked", "disabled", "ariaLabel", "ariaLabeledBy", "ariaDescribedBy", "testID", "tabIndex"], outputs: ["onFocus", "onBlur", "checkedChange"] }, { type: i1__namespace$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1__namespace$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i4__namespace$1.ExpressionFormControlComponent, selector: "rx-expression-form-control", inputs: ["options", "isDisabled", "propertyPath"], outputs: ["events"] }, { type: i1__namespace$1.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i4__namespace$1.RxDefinitionPickerComponent, selector: "rx-definition-picker", inputs: ["options", "isDisabled"] }], directives: [{ type: i1__namespace$1.AdaptPopoverDirective, selector: "[adaptPopover]", inputs: ["adaptPopover", "popoverTitle", "placement", "fallbackPlacement", "triggers", "container", "appendToBody", "closeBtn", "popupDelay", "disablePopover", "popoverClass", "autoClose", "closeOnOutOfView", "maxWidth", "minWidth"], outputs: ["shown", "hidden"], exportAs: ["adaptPopover"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i9__namespace.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "id", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListAutoScrollDisabled", "cdkDropListOrientation", "cdkDropListLockAxis", "cdkDropListData", "cdkDropListAutoScrollStep"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { type: i8__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i9__namespace.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragDisabled", "cdkDragStartDelay", "cdkDragLockAxis", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragBoundary", "cdkDragRootElement", "cdkDragPreviewContainer", "cdkDragData", "cdkDragFreeDragPosition"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { type: i9__namespace.CdkDragHandle, selector: "[cdkDragHandle]", inputs: ["cdkDragHandleDisabled"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i1__namespace$1.AdaptMinValidatorDirective, selector: "[adaptMin][ngModel],[adaptMin][formControl]", inputs: ["adaptMin", "adaptMinMessageFn"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApprovalFlowConfigurationComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-approval-flow-configuration',
                        templateUrl: './approval-flow-configuration.component.html',
                        styleUrls: ['./approval-flow-configuration.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i0__namespace.ErrorHandler }, { type: i1__namespace.RxModalService }, { type: i4__namespace.TranslateService }, { type: i2__namespace.RxNotificationService }, { type: i4__namespace$1.RxExpressionEditorService }, { type: RxApprovalConfigurationService }]; }, propDecorators: { registeredRecordDefinitionName: [{
                    type: i0.Input
                }], adaptPopoverDirective: [{
                    type: i0.ViewChild,
                    args: [i1$2.AdaptPopoverDirective]
                }], approvalFlowsForm: [{
                    type: i0.ViewChild,
                    args: ['approvalFlowsForm']
                }] } });

    var RxFieldDefinitionPickerService = /** @class */ (function () {
        function RxFieldDefinitionPickerService(rxRecordGridUtilsService, rxRecordDefinitionCacheService, rxDefinitionNameService) {
            this.rxRecordGridUtilsService = rxRecordGridUtilsService;
            this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            this.rxDefinitionNameService = rxDefinitionNameService;
        }
        RxFieldDefinitionPickerService.prototype.getAssociatedRecordFields = function (recordDefinitionName) {
            var _this = this;
            return this.rxRecordGridUtilsService.getAssociationDescriptors(recordDefinitionName).pipe(operators.switchMap(function (associationDescriptors) {
                if (associationDescriptors.length) {
                    associationDescriptors.sort(function (descriptor1, descriptor2) { return descriptor1.label.localeCompare(descriptor2.label); });
                    return rxjs.forkJoin(associationDescriptors.map(function (associationDescriptor) {
                        return _this.rxRecordDefinitionCacheService
                            .getRecordDefinition(associationDescriptor.recordDefinitionName)
                            .pipe(operators.map(function (recordDefinition) { return ({
                            fields: _this.getFieldDefinitions(recordDefinition.fieldDefinitions, associationDescriptor),
                            label: associationDescriptor.label,
                            isAssociatedRecord: true,
                            isExpanded: false,
                            value: associationDescriptor.associationDefinition.name,
                            associationDescriptor: associationDescriptor
                        }); }));
                    }));
                }
                return rxjs.of([]);
            }), operators.shareReplay({
                bufferSize: 1,
                refCount: true
            }));
        };
        RxFieldDefinitionPickerService.prototype.getRecordFields = function (recordDefinitionName) {
            var _this = this;
            return rxjs.forkJoin([
                this.getAssociatedRecordFields(recordDefinitionName),
                this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName)
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), associatedRecordFields = _b[0], recordDefinition = _b[1];
                return __spreadArray([
                    {
                        fields: _this.getFieldDefinitions(recordDefinition.fieldDefinitions, null),
                        isExpanded: true,
                        isAssociatedRecord: false,
                        label: _this.rxDefinitionNameService.getDisplayName(recordDefinitionName),
                        value: recordDefinitionName
                    }
                ], __read(associatedRecordFields));
            }), operators.shareReplay({
                bufferSize: 1,
                refCount: true
            }));
        };
        RxFieldDefinitionPickerService.prototype.getFieldDefinitions = function (fieldDefinitions, associationDescriptor) {
            var _this = this;
            return fieldDefinitions
                .filter(function (fieldDefinition) { return fieldDefinition.resourceType !== i3.RX_RECORD_DEFINITION.resourceTypes.attachment; })
                .map(function (fieldDefinition) {
                var fieldKey = associationDescriptor
                    ? _this.getFieldIdExpression(fieldDefinition.id, associationDescriptor)
                    : fieldDefinition.name;
                return {
                    label: fieldDefinition.name,
                    value: fieldKey
                };
            })
                .sort(function (field1, field2) { return field1.label.localeCompare(field2.label); });
        };
        RxFieldDefinitionPickerService.prototype.getFieldIdExpression = function (fieldId, associationDescriptor) {
            return "recordContext._associations." + associationDescriptor.associationDefinition.guid + "." + associationDescriptor.nodeSide + "[0]." + fieldId;
        };
        return RxFieldDefinitionPickerService;
    }());
    RxFieldDefinitionPickerService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxFieldDefinitionPickerService, deps: [{ token: i7__namespace.RxRecordGridUtilsService }, { token: i3__namespace$2.RxRecordDefinitionCacheService }, { token: i2__namespace.RxDefinitionNameService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxFieldDefinitionPickerService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxFieldDefinitionPickerService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxFieldDefinitionPickerService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i7__namespace.RxRecordGridUtilsService }, { type: i3__namespace$2.RxRecordDefinitionCacheService }, { type: i2__namespace.RxDefinitionNameService }]; } });

    var RxFieldDefinitionPickerComponent = /** @class */ (function (_super) {
        __extends(RxFieldDefinitionPickerComponent, _super);
        function RxFieldDefinitionPickerComponent(rxDefinitionNameService, rxRecordGridUtilsService, rxRecordDefinitionCacheService, translateService, rxFieldDefinitionPickerService, rxStringService, rxObjectUtilsService, renderer) {
            var _this = _super.call(this) || this;
            _this.rxDefinitionNameService = rxDefinitionNameService;
            _this.rxRecordGridUtilsService = rxRecordGridUtilsService;
            _this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            _this.translateService = translateService;
            _this.rxFieldDefinitionPickerService = rxFieldDefinitionPickerService;
            _this.rxStringService = rxStringService;
            _this.rxObjectUtilsService = rxObjectUtilsService;
            _this.renderer = renderer;
            _this.defaultText = _this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');
            _this.filteredFieldsTree = [];
            _this.searchText = '';
            return _this;
        }
        RxFieldDefinitionPickerComponent.prototype.ngOnChanges = function (changes) {
            var _a;
            var fieldsTree = (_a = changes.options.currentValue) === null || _a === void 0 ? void 0 : _a.fieldsTree;
            if (fieldsTree === null || fieldsTree === void 0 ? void 0 : fieldsTree.length) {
                this.filteredFieldsTree = this.rxObjectUtilsService.cloneDeep(fieldsTree);
            }
            else {
                this.filteredFieldsTree = [];
            }
            this.updateFieldLabel();
        };
        RxFieldDefinitionPickerComponent.prototype.setDropdownWidth = function () {
            var dropdownButton = this.renderer.selectRootElement(this.dropdownButton.nativeElement, true);
            this.dropdownWidth = dropdownButton.clientWidth + 2;
        };
        RxFieldDefinitionPickerComponent.prototype.selectField = function (fieldNode) {
            this.dropdown.close();
            this.label = fieldNode.label;
            this.value = fieldNode.value;
        };
        RxFieldDefinitionPickerComponent.prototype.clearFieldDefinition = function (e) {
            e.stopPropagation();
            this.reset();
        };
        RxFieldDefinitionPickerComponent.prototype.reset = function () {
            this.label = '';
            this.value = '';
        };
        RxFieldDefinitionPickerComponent.prototype.updateFieldLabel = function () {
            var _this = this;
            if (this.value) {
                if (this.value.indexOf('associations') !== -1) {
                    this.initializeAssociatedFieldLabel().subscribe(function (fieldLabel) { return (_this.label = fieldLabel); });
                }
                else {
                    this.label = this.value;
                }
            }
            else {
                this.label = '';
            }
        };
        RxFieldDefinitionPickerComponent.prototype.initializeAssociatedFieldLabel = function () {
            var _this = this;
            if (this.options.recordDefinitionName) {
                return this.rxRecordDefinitionCacheService
                    .getRecordDefinition(this.options.recordDefinitionName)
                    .pipe(operators.mergeMap(function (recordDefinition) { return _this.rxRecordGridUtilsService
                    .getFieldDefinition(_this.value, recordDefinition)
                    .pipe(operators.map(function (fieldDefinition) { return fieldDefinition.name; })); }));
            }
        };
        RxFieldDefinitionPickerComponent.prototype.filterFields = function (searchText) {
            var _this = this;
            this.filteredFieldsTree = this.rxObjectUtilsService.cloneDeep(this.options.fieldsTree);
            if (searchText) {
                this.filteredFieldsTree = this.filteredFieldsTree
                    .map(function (recordFields) { return (Object.assign(Object.assign({}, recordFields), { fields: recordFields.fields.filter(function (fieldDefinitionData) { return _this.rxStringService.caseInsensitiveSearch(fieldDefinitionData.label, searchText); }) })); })
                    .filter(function (recordFields) { return recordFields.fields.length; });
            }
        };
        return RxFieldDefinitionPickerComponent;
    }(i4.ValueAccessor));
    RxFieldDefinitionPickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxFieldDefinitionPickerComponent, deps: [{ token: i2__namespace.RxDefinitionNameService }, { token: i7__namespace.RxRecordGridUtilsService }, { token: i3__namespace$2.RxRecordDefinitionCacheService }, { token: i4__namespace.TranslateService }, { token: RxFieldDefinitionPickerService }, { token: i3__namespace.RxStringService }, { token: i3__namespace.RxObjectUtilsService }, { token: i0__namespace.Renderer2 }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RxFieldDefinitionPickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxFieldDefinitionPickerComponent, selector: "rx-field-definition-picker", inputs: { options: "options" }, providers: [
            {
                provide: i1.NG_VALUE_ACCESSOR,
                useExisting: RxFieldDefinitionPickerComponent,
                multi: true
            }
        ], viewQueries: [{ propertyName: "dropdownButton", first: true, predicate: ["dropdownButton"], descendants: true, static: true }, { propertyName: "dropdown", first: true, predicate: ["fieldDefinitionPicker"], descendants: true, static: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace, template: "<div class=\"d-flex\">\n  <adapt-rx-control-label *ngIf=\"options.label\" [label]=\"options.label\" [showRequiredLabel]=\"options.required\">\n  </adapt-rx-control-label>\n\n  <span\n    *ngIf=\"options?.tooltip\"\n    class=\"d-icon-right-question_circle_o ml-2\"\n    [adaptPopover]=\"options.tooltip\"\n    placement=\"right\"\n    appendToBody=\"true\"\n  >\n  </span>\n</div>\n\n<div\n  class=\"dropdown\"\n  adaptDropdown\n  appendToBody=\"true\"\n  [autoClose]=\"'outside'\"\n  [autoFocusFirst]=\"false\"\n  #fieldDefinitionPicker=\"adaptDropdown\"\n>\n  <button\n    rx-id=\"toggle-button\"\n    #dropdownButton\n    class=\"btn btn-secondary\"\n    (click)=\"setDropdownWidth()\"\n    adaptDropdownToggle\n    type=\"button\"\n    [disabled]=\"!options.recordDefinitionName\"\n  >\n    <span class=\"rx-selected-item rx-ellipsis\">{{ label || defaultText }}</span>\n\n    <span\n      rx-id=\"clear-button\"\n      class=\"d-icon-cross_adapt btn-link\"\n      *ngIf=\"value && !isDisabled\"\n      (click)=\"clearFieldDefinition($event)\"\n    >\n    </span>\n  </button>\n\n  <div class=\"dropdown-menu p-0\" [style.width.px]=\"dropdownWidth\" adaptDropdownMenu>\n    <div class=\"dropdown-header\">\n      <adapt-rx-search\n        [(ngModel)]=\"searchText\"\n        placeholder=\"{{ 'com.bmc.arsys.rx.client.common.filter-data.label' | translate }}\"\n        debounceTime=\"250\"\n        class=\"py-2\"\n        (ngModelChange)=\"filterFields($event)\"\n      >\n      </adapt-rx-search>\n    </div>\n\n    <ul class=\"records\" *ngIf=\"filteredFieldsTree.length\">\n      <li\n        class=\"record rx-ellipsis\"\n        *ngFor=\"let recordNode of filteredFieldsTree\"\n        (click)=\"recordNode.isExpanded = !recordNode.isExpanded\"\n      >\n        <span rx-id=\"expand-button\" class=\"expand-arrow d-icon-angle_right\" [class.open]=\"recordNode.isExpanded\"></span>\n\n        <span\n          class=\"px-1\"\n          [ngClass]=\"recordNode.isAssociatedRecord ? 'd-icon-arrow_schema' : 'd-icon-file_text'\"\n        ></span>\n\n        <span> {{ recordNode.label }} </span>\n\n        <div class=\"fields\" *ngIf=\"recordNode.isExpanded\">\n          <button\n            class=\"dropdown-item rx-ellipsis\"\n            (click)=\"$event.stopPropagation(); selectField(fieldNode)\"\n            type=\"button\"\n            [class.active]=\"value === fieldNode.label\"\n            *ngFor=\"let fieldNode of recordNode.fields\"\n          >\n            <adapt-highlight [result]=\"fieldNode.label\" [term]=\"searchText\"></adapt-highlight>\n          </button>\n        </div>\n      </li>\n    </ul>\n  </div>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.dropdown-header{border-bottom:1px solid #d6d7d8;display:flex;align-items:center;padding:0 10px;width:100%;height:50px}adapt-rx-search{flex-grow:1;align-items:center;margin:0}.expand-arrow{padding:5px;transition:.2s}.expand-arrow.open{transform:rotate(90deg)}.records{overflow-y:auto;margin:0;list-style:none;padding:5px 0;width:100%;height:275px}.record{width:100%;padding:0 5px;line-height:30px;cursor:pointer}span[rx-id=clear-button]{cursor:pointer;margin-right:5px}span[rx-id=clear-button]:not(:hover){color:#313538}span[rx-id=expand-button]{display:inline-flex;width:15px}.rx-selected-item{flex-grow:1}.dropdown-menu{height:330px}.dropdown-toggle{width:100%;display:flex;text-align:left}.dropdown-item{padding:0 15px 0 30px}\n"], components: [{ type: i1__namespace$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace$1.AdaptDropdownDirective, selector: "adapt-dropdown, [adaptDropdown]", inputs: ["autoClose", "customClass", "closeOnEscape", "placement", "animationPlacement", "holdFocusInMenu", "holdFocusOnOpen", "autoFocusFirst", "restoreFocusAfterClose", "focusNextElementAfterClose", "appendToBody", "appendTo", "positionTo", "anchorPositionTrackingIntervalMs", "enableAnchorPositionTracking", "recalculatePositionOnElementResize", "setMobileState", "mobileView"], outputs: ["onOpen", "onClose", "anchorPositionChange", "popupAnimationDone"], exportAs: ["adaptDropdown"] }, { type: i1__namespace$1.AdaptRxSearchComponent, selector: "adapt-rx-search", inputs: ["mode", "autocomplete", "placeholder", "size", "searchButton", "searchButtonText", "clearButtonText", "debounceTime", "ariaControlsPopupId", "ariaActiveDescendant", "initialAlign"], outputs: ["editModeChange"] }, { type: i1__namespace$1.AdaptHighlightDirective, selector: "adapt-highlight, ngb-highlight", inputs: ["highlightClass", "result", "term"], outputs: ["wordMatch"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$1.AdaptPopoverDirective, selector: "[adaptPopover]", inputs: ["adaptPopover", "popoverTitle", "placement", "fallbackPlacement", "triggers", "container", "appendToBody", "closeBtn", "popupDelay", "disablePopover", "popoverClass", "autoClose", "closeOnOutOfView", "maxWidth", "minWidth"], outputs: ["shown", "hidden"], exportAs: ["adaptPopover"] }, { type: i1__namespace$1.AdaptDropdownToggleDirective, selector: "[adaptDropdownToggle]", inputs: ["showCaret", "dropdownTogglerType"] }, { type: i1__namespace$1.AdaptDropdownMenuDirective, selector: "[adaptDropdownMenu]" }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxFieldDefinitionPickerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-field-definition-picker',
                        templateUrl: './field-definition-picker.component.html',
                        styleUrls: ['./field-definition-picker.component.scss'],
                        providers: [
                            {
                                provide: i1.NG_VALUE_ACCESSOR,
                                useExisting: RxFieldDefinitionPickerComponent,
                                multi: true
                            }
                        ]
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxDefinitionNameService }, { type: i7__namespace.RxRecordGridUtilsService }, { type: i3__namespace$2.RxRecordDefinitionCacheService }, { type: i4__namespace.TranslateService }, { type: RxFieldDefinitionPickerService }, { type: i3__namespace.RxStringService }, { type: i3__namespace.RxObjectUtilsService }, { type: i0__namespace.Renderer2 }]; }, propDecorators: { options: [{
                    type: i0.Input
                }], dropdownButton: [{
                    type: i0.ViewChild,
                    args: ['dropdownButton', { static: true }]
                }], dropdown: [{
                    type: i0.ViewChild,
                    args: ['fieldDefinitionPicker', { static: true }]
                }] } });

    var RecordRegistrationComponent = /** @class */ (function () {
        function RecordRegistrationComponent(formBuilder, changeDetector, translateService, rxDefinitionNameService, rxApprovalConfigurationService, rxRecordDefinitionCacheService, rxRecordInstanceDataPageService, rxNotificationService, rxRecordGridUtilsService, rxFieldDefinitionPickerService) {
            var _this = this;
            this.formBuilder = formBuilder;
            this.changeDetector = changeDetector;
            this.translateService = translateService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxApprovalConfigurationService = rxApprovalConfigurationService;
            this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            this.rxNotificationService = rxNotificationService;
            this.rxRecordGridUtilsService = rxRecordGridUtilsService;
            this.rxFieldDefinitionPickerService = rxFieldDefinitionPickerService;
            this.recordRegistered = new i0.EventEmitter();
            this.recordRegistrationForm = this.createRecordRegistrationForm();
            this.recordDefinitionSecurityLabels = [];
            this.fieldNames = [];
            this.isSaveInProgress = false;
            this.alertConfig = {
                content: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record-registration.info'),
                type: 'inline',
                variant: 'info'
            };
            this.recordDefinitionPickerOptions = {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.definition'),
                definitionType: i4.RxDefinitionPickerType.PublicRegularDataRecord,
                required: true,
                availableDefinitionPickerStates: {
                    definitionButtonsGroups: [i4.RxDefinitionPickerScope.Rx],
                    search: i4.RxDefinitionPickerScope.Rx
                }
            };
            this.permissionTooltip = {
                popoverMode: true,
                iconName: 'question_circle_o',
                placement: 'right',
                content: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.permissions.tooltip')
            };
            this.justificationTooltip = {
                popoverMode: true,
                iconName: 'question_circle_o',
                placement: 'right',
                content: this.translateService.instant('com.bmc.arsys.rx.client.approval.justification.tooltip')
            };
            this.recordDefinitionName$ = new rxjs.BehaviorSubject('');
            this.fieldsTree$ = this.recordDefinitionName$.pipe(operators.switchMap(function (recordDefinitionName) {
                return recordDefinitionName ? _this.rxFieldDefinitionPickerService.getRecordFields(recordDefinitionName) : rxjs.of([]);
            }));
            this.requesterFieldDefinitionPickerOptions$ = rxjs.combineLatest([
                this.recordDefinitionName$,
                this.fieldsTree$
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), recordDefinitionName = _b[0], fieldsTree = _b[1];
                return ({
                    recordDefinitionName: recordDefinitionName,
                    label: _this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.requester'),
                    required: true,
                    tooltip: _this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.requester.tooltip'),
                    fieldsTree: fieldsTree
                });
            }));
            this.approverExclusionFieldDefinitionPickerOptions$ = rxjs.combineLatest([
                this.recordDefinitionName$,
                this.fieldsTree$
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), recordDefinitionName = _b[0], fieldsTree = _b[1];
                return ({
                    recordDefinitionName: recordDefinitionName,
                    label: _this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.approver-exclusion.label'),
                    required: false,
                    tooltip: _this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.approver-exclusion.tooltip'),
                    fieldsTree: fieldsTree
                });
            }));
            this.summaryFieldDefinitionPickerOptions$ = rxjs.combineLatest([
                this.recordDefinitionName$,
                this.fieldsTree$
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), recordDefinitionName = _b[0], fieldsTree = _b[1];
                return ({
                    recordDefinitionName: recordDefinitionName,
                    label: _this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.summary'),
                    required: true,
                    fieldsTree: fieldsTree
                });
            }));
            this.notesFieldDefinitionPickerOptions$ = rxjs.combineLatest([
                this.recordDefinitionName$,
                this.fieldsTree$
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), recordDefinitionName = _b[0], fieldsTree = _b[1];
                return ({
                    recordDefinitionName: recordDefinitionName,
                    label: _this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.notes'),
                    required: false,
                    fieldsTree: fieldsTree
                });
            }));
            this.fieldDefinitionPickerOptions$ = rxjs.combineLatest([
                this.recordDefinitionName$,
                this.fieldsTree$
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), recordDefinitionName = _b[0], fieldsTree = _b[1];
                return ({
                    recordDefinitionName: recordDefinitionName,
                    required: false,
                    fieldsTree: fieldsTree
                });
            }));
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.isNewConfiguration = true;
        }
        RecordRegistrationComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.isEditMode) {
                this.initializeRecordRegistrationForm();
            }
            this.recordRegistrationForm
                .get('recordDefinition')
                .valueChanges.pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (value) { return _this.onRecordDefinitionChange(value); });
            this.recordRegistrationForm
                .get('field3Mapping.fieldID')
                .valueChanges.pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (value) { return _this.onFieldMappingChange('field3Mapping.label', value); });
            this.recordRegistrationForm
                .get('field4Mapping.fieldID')
                .valueChanges.pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (value) { return _this.onFieldMappingChange('field4Mapping.label', value); });
            this.recordRegistrationForm
                .get('field5Mapping.fieldID')
                .valueChanges.pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (value) { return _this.onFieldMappingChange('field5Mapping.label', value); });
            this.recordRegistrationForm
                .get('field6Mapping.fieldID')
                .valueChanges.pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (value) { return _this.onFieldMappingChange('field6Mapping.label', value); });
        };
        RecordRegistrationComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        RecordRegistrationComponent.prototype.createRecordRegistrationForm = function () {
            return this.formBuilder.group({
                recordDefinition: ['', i1.Validators.required],
                summaryField: ['', i1.Validators.required],
                requestorField: ['', i1.Validators.required],
                approverExclusionField: null,
                permissionsFromSecurityLabels: [[], i1.Validators.nullValidator],
                requestIDField: '',
                notesField: '',
                justificationFieldName: [[], i1.Validators.nullValidator],
                justificationRequired: this.formBuilder.group({
                    toApprove: false,
                    toReject: false
                }),
                field3Mapping: this.formBuilder.group(this.createAdditionalField()),
                field4Mapping: this.formBuilder.group(this.createAdditionalField()),
                field5Mapping: this.formBuilder.group(this.createAdditionalField()),
                field6Mapping: this.formBuilder.group(this.createAdditionalField())
            });
        };
        RecordRegistrationComponent.prototype.initializeRecordRegistrationForm = function () {
            var _this = this;
            rxjs.forkJoin([
                this.rxRecordDefinitionCacheService.getRecordDefinition(this.registeredRecordDefinitionName),
                this.rxApprovalConfigurationService.getRegisteredRecordDetails(this.registeredRecordDefinitionName)
            ]).subscribe(function (_a) {
                var _b = __read(_a, 2), recordDefinition = _b[0], registrationRecord = _b[1];
                _this.isNewConfiguration = registrationRecord.isNewConfiguration;
                _this.recordDefinition = recordDefinition;
                _this.recordRegistrationForm.get('recordDefinition').setValue(registrationRecord.recordDefinition);
                _this.recordRegistrationForm.controls['recordDefinition'].disable();
                _this.recordRegistrationForm.get('summaryField').setValue(registrationRecord.summaryField);
                _this.recordRegistrationForm.get('requestorField').setValue(registrationRecord.requestorField);
                _this.recordRegistrationForm.get('requestIDField').setValue(registrationRecord.requestIDField);
                _this.recordRegistrationForm.get('notesField').setValue(registrationRecord.notesField);
                _this.recordRegistrationForm.get('approverExclusionField').setValue(registrationRecord.approverExclusionField);
                if (registrationRecord.field3Mapping) {
                    _this.recordRegistrationForm.get('field3Mapping').setValue(registrationRecord.field3Mapping);
                }
                if (registrationRecord.field4Mapping) {
                    _this.recordRegistrationForm.get('field4Mapping').setValue(registrationRecord.field4Mapping);
                }
                if (registrationRecord.field5Mapping) {
                    _this.recordRegistrationForm.get('field5Mapping').setValue(registrationRecord.field5Mapping);
                }
                if (registrationRecord.field6Mapping) {
                    _this.recordRegistrationForm.get('field6Mapping').setValue(registrationRecord.field6Mapping);
                }
                _this.recordRegistrationForm
                    .get('justificationFieldName')
                    .setValue(registrationRecord.justificationFieldName ? [registrationRecord.justificationFieldName] : []);
                _this.recordRegistrationForm
                    .get('permissionsFromSecurityLabels')
                    .setValue(_this.getSecurityLabels(registrationRecord));
                _this.recordRegistrationForm.get('justificationRequired').setValue({
                    toApprove: registrationRecord.justificationRequired === i2.JustificationRequirement.RequiredForApprovalOrRejection ||
                        registrationRecord.justificationRequired === i2.JustificationRequirement.RequiredForApproval,
                    toReject: registrationRecord.justificationRequired === i2.JustificationRequirement.RequiredForApprovalOrRejection ||
                        registrationRecord.justificationRequired === i2.JustificationRequirement.RequiredForRejection
                });
            });
        };
        RecordRegistrationComponent.prototype.getSecurityLabels = function (approvalRegistrationRecord) {
            var _this = this;
            return approvalRegistrationRecord.permissionsFromSecurityLabels.map(function (parentId) { return _this.recordDefinition.securityLabels.find(function (securityLabel) { return securityLabel.id === parentId; }); });
        };
        RecordRegistrationComponent.prototype.createAdditionalField = function () {
            return {
                fieldID: '',
                label: ''
            };
        };
        RecordRegistrationComponent.prototype.onFieldMappingChange = function (formControlName, value) {
            if (value && !value.includes('recordContext._associations')) {
                this.recordRegistrationForm.get(formControlName).setValue(value);
            }
            else {
                value
                    ? this.setAssociatedRecordFieldLabel(value, formControlName)
                    : this.recordRegistrationForm.get(formControlName).setValue('');
            }
        };
        RecordRegistrationComponent.prototype.setAssociatedRecordFieldLabel = function (fieldId, formControlName) {
            var _this = this;
            this.rxRecordGridUtilsService.getFieldDefinition(fieldId, this.recordDefinition).subscribe(function (fieldDefinition) {
                _this.recordRegistrationForm.get(formControlName).setValue(fieldDefinition.name);
            });
        };
        RecordRegistrationComponent.prototype.onRecordDefinitionChange = function (newRecordDefinitionName) {
            var _this = this;
            var oldRecordDefinitionName = this.recordRegistrationForm.value.recordDefinition;
            if (newRecordDefinitionName !== oldRecordDefinitionName) {
                this.reset();
                this.recordDefinitionName$.next(newRecordDefinitionName);
                if (newRecordDefinitionName) {
                    this.rxRecordDefinitionCacheService
                        .getRecordDefinition(newRecordDefinitionName)
                        .subscribe(function (recordDefinition) {
                        _this.recordDefinition = recordDefinition;
                        _this.initializeFormControls();
                    });
                }
            }
        };
        RecordRegistrationComponent.prototype.initializeFormControls = function () {
            var _this = this;
            this.recordDefinitionSecurityLabels = lodash.cloneDeep(this.recordDefinition.securityLabels);
            this.fieldNames = this.recordDefinition.fieldDefinitions
                ? this.recordDefinition.fieldDefinitions
                    .filter(function (fieldDefinition) { return fieldDefinition.resourceType !== i3.RX_RECORD_DEFINITION.resourceTypes.attachment; })
                    .map(function (fieldDefinition) {
                    if (fieldDefinition.id === 1) {
                        _this.recordRegistrationForm.get('requestIDField').setValue(fieldDefinition.name);
                    }
                    return fieldDefinition.name;
                })
                : [];
        };
        RecordRegistrationComponent.prototype.optionFormatter = function (securityLabel) {
            return securityLabel.name;
        };
        RecordRegistrationComponent.prototype.justificationReasonOptionFormatter = function (fieldDefinition) {
            return fieldDefinition.name;
        };
        RecordRegistrationComponent.prototype.save = function () {
            this.isSaveInProgress = true;
            if (this.isEditMode) {
                this.updateRecordRegistration();
            }
            else {
                this.saveRecordRegistration();
            }
        };
        RecordRegistrationComponent.prototype.canSave = function () {
            return !this.isSaveInProgress && this.recordRegistrationForm.valid && this.recordRegistrationForm.dirty;
        };
        RecordRegistrationComponent.prototype.isFormValid = function () {
            return this.recordRegistrationForm.valid;
        };
        RecordRegistrationComponent.prototype.isFormDirty = function () {
            return this.recordRegistrationForm.dirty;
        };
        RecordRegistrationComponent.prototype.saveRecordRegistration = function () {
            var _this = this;
            var registrationRecord = this.transformFormControlData();
            registrationRecord.isNewConfiguration = true;
            this.rxRecordInstanceDataPageService
                .post({
                params: {
                    recorddefinition: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.name
                }
            })
                .subscribe(function (result) {
                var isRecordRegistered = lodash.find(result.data, function (record) { return record[RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formName] ===
                    registrationRecord.recordDefinition; });
                if (!isRecordRegistered) {
                    _this.rxApprovalConfigurationService
                        .registerRecord(registrationRecord)
                        .pipe(operators.finalize(function () {
                        _this.isSaveInProgress = false;
                    }))
                        .subscribe(function () {
                        _this.isEditMode = true;
                        _this.recordRegistrationForm.controls['recordDefinition'].disable();
                        _this.recordRegistered.emit(registrationRecord.recordDefinition);
                        _this.recordRegistrationForm.markAsPristine();
                        _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.register.success'));
                    });
                }
                else {
                    _this.isSaveInProgress = false;
                    _this.rxNotificationService.addWarningMessage(_this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.register.duplicate'));
                }
            });
        };
        RecordRegistrationComponent.prototype.updateRecordRegistration = function () {
            var _this = this;
            var registrationRecord = this.transformFormControlData();
            registrationRecord.isNewConfiguration = this.isNewConfiguration;
            registrationRecord.recordDefinition = this.recordRegistrationForm.get('recordDefinition').value;
            this.rxApprovalConfigurationService
                .updateRecord(registrationRecord)
                .pipe(operators.finalize(function () {
                _this.isSaveInProgress = false;
            }))
                .subscribe(function () {
                _this.isEditMode = true;
                _this.recordRegistrationForm.markAsPristine();
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.update', {
                    recordDefinitionName: _this.rxDefinitionNameService.getDisplayName(registrationRecord.recordDefinition)
                }));
            });
        };
        RecordRegistrationComponent.prototype.transformFormControlData = function () {
            var approvalRecord = lodash.cloneDeep(this.recordRegistrationForm.value);
            approvalRecord.justificationFieldName = approvalRecord.justificationFieldName.length
                ? approvalRecord.justificationFieldName.join()
                : null;
            approvalRecord.permissionsFromSecurityLabels = approvalRecord.permissionsFromSecurityLabels
                ? approvalRecord.permissionsFromSecurityLabels.map(function (securityLabel) {
                    return securityLabel.id;
                })
                : null;
            if (!approvalRecord.permissionsFromSecurityLabels) {
                delete approvalRecord.permissionsFromSecurityLabels;
            }
            if (!approvalRecord.justificationFieldName) {
                delete approvalRecord.justificationFieldName;
            }
            this.updateAdditionalFieldLabel(approvalRecord.field3Mapping);
            this.updateAdditionalFieldLabel(approvalRecord.field4Mapping);
            this.updateAdditionalFieldLabel(approvalRecord.field5Mapping);
            this.updateAdditionalFieldLabel(approvalRecord.field6Mapping);
            if (approvalRecord.justificationRequired.toApprove && approvalRecord.justificationRequired.toReject) {
                approvalRecord.justificationRequired = i2.JustificationRequirement.RequiredForApprovalOrRejection;
            }
            else if (approvalRecord.justificationRequired.toApprove) {
                approvalRecord.justificationRequired = i2.JustificationRequirement.RequiredForApproval;
            }
            else if (approvalRecord.justificationRequired.toReject) {
                approvalRecord.justificationRequired = i2.JustificationRequirement.RequiredForRejection;
            }
            else {
                approvalRecord.justificationRequired = i2.JustificationRequirement.NotRequired;
            }
            return approvalRecord;
        };
        RecordRegistrationComponent.prototype.updateAdditionalFieldLabel = function (fieldMapping) {
            if (fieldMapping.fieldID !== '' &&
                !fieldMapping.fieldID.includes('recordContext._associations') &&
                fieldMapping.label === '') {
                fieldMapping.label = fieldMapping.fieldID;
            }
        };
        RecordRegistrationComponent.prototype.reset = function () {
            this.recordDefinitionSecurityLabels = [];
            this.fieldNames = [];
            this.recordRegistrationForm.get('summaryField').setValue('');
            this.recordRegistrationForm.get('requestorField').setValue('');
            this.recordRegistrationForm.get('approverExclusionField').setValue('');
            this.recordRegistrationForm.get('permissionsFromSecurityLabels').setValue([]);
            this.recordRegistrationForm.get('justificationRequired').setValue({
                toApprove: false,
                toReject: false
            });
            this.recordRegistrationForm.get('justificationFieldName').setValue([]);
            this.recordRegistrationForm.get('requestIDField').setValue('');
            this.recordRegistrationForm.get('notesField').setValue('');
            this.recordRegistrationForm.get('field3Mapping').setValue(this.createAdditionalField());
            this.recordRegistrationForm.get('field4Mapping').setValue(this.createAdditionalField());
            this.recordRegistrationForm.get('field5Mapping').setValue(this.createAdditionalField());
            this.recordRegistrationForm.get('field6Mapping').setValue(this.createAdditionalField());
        };
        RecordRegistrationComponent.prototype.handleJustificationField = function () {
            if (this.recordRegistrationForm.dirty &&
                !this.recordRegistrationForm.get('justificationRequired').value.toApprove &&
                !this.recordRegistrationForm.get('justificationRequired').value.toReject) {
                this.recordRegistrationForm.get('justificationFieldName').setValue([]);
            }
        };
        return RecordRegistrationComponent;
    }());
    RecordRegistrationComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordRegistrationComponent, deps: [{ token: i1__namespace$3.FormBuilder }, { token: i0__namespace.ChangeDetectorRef }, { token: i4__namespace.TranslateService }, { token: i2__namespace.RxDefinitionNameService }, { token: RxApprovalConfigurationService }, { token: i3__namespace$2.RxRecordDefinitionCacheService }, { token: i3__namespace$2.RxRecordInstanceDataPageService }, { token: i2__namespace.RxNotificationService }, { token: i7__namespace.RxRecordGridUtilsService }, { token: RxFieldDefinitionPickerService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RecordRegistrationComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordRegistrationComponent, selector: "rx-record-registration", inputs: { registeredRecordDefinitionName: "registeredRecordDefinitionName", isEditMode: "isEditMode" }, outputs: { recordRegistered: "recordRegistered" }, ngImport: i0__namespace, template: "<adapt-alert [config]=\"alertConfig\"></adapt-alert>\n\n<form [formGroup]=\"recordRegistrationForm\">\n  <div class=\"row\">\n    <div class=\"col-4 form-group\">\n      <rx-definition-picker\n        [options]=\"recordDefinitionPickerOptions\"\n        formControlName=\"recordDefinition\"\n        rx-id=\"definition-field\"\n        required=\"true\"\n      >\n      </rx-definition-picker>\n    </div>\n\n    <div class=\"col-4 form-group\">\n      <rx-field-definition-picker\n        [options]=\"requesterFieldDefinitionPickerOptions$ | async\"\n        formControlName=\"requestorField\"\n        rx-id=\"requester-id-field\"\n      ></rx-field-definition-picker>\n    </div>\n\n    <div class=\"col-4 form-group\">\n      <rx-field-definition-picker\n        [options]=\"approverExclusionFieldDefinitionPickerOptions$ | async\"\n        formControlName=\"approverExclusionField\"\n        rx-id=\"approver-exclusion-field\"\n      ></rx-field-definition-picker>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-4 form-group\">\n      <adapt-rx-select\n        [options]=\"recordDefinitionSecurityLabels\"\n        label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.record.permissions' | translate }}\"\n        name=\"permissionsFromSecurityLabels\"\n        [optionFormatter]=\"optionFormatter\"\n        [multiple]=\"true\"\n        formControlName=\"permissionsFromSecurityLabels\"\n        [selectAllButton]=\"true\"\n        [deselectAllButton]=\"true\"\n        [disabled]=\"!recordDefinitionSecurityLabels.length\"\n        rx-id=\"permissions-field\"\n        [tooltip]=\"permissionTooltip\"\n      ></adapt-rx-select>\n    </div>\n\n    <div class=\"col-4 form-group\">\n      <adapt-rx-textfield\n        rx-id=\"request-id-field\"\n        label=\"{{ 'com.bmc.arsys.rx.client.approval.console.detail.RequestId' | translate }}\"\n        formControlName=\"requestIDField\"\n        [readonly]=\"true\"\n        [disabledStyleForReadonlyState]=\"true\"\n      >\n      </adapt-rx-textfield>\n    </div>\n\n    <div class=\"col-4 form-group\">\n      <rx-field-definition-picker\n        [options]=\"summaryFieldDefinitionPickerOptions$ | async\"\n        formControlName=\"summaryField\"\n        rx-id=\"summary-field\"\n      ></rx-field-definition-picker>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-4 form-group\">\n      <rx-field-definition-picker\n        [options]=\"notesFieldDefinitionPickerOptions$ | async\"\n        formControlName=\"notesField\"\n        rx-id=\"notes-field\"\n      ></rx-field-definition-picker>\n    </div>\n\n    <div class=\"col-4 form-group\">\n      <adapt-rx-control-label\n        label=\"{{ 'com.bmc.arsys.rx.client.approval.justification.require-on.label' | translate }}\"\n      ></adapt-rx-control-label>\n\n      <div formGroupName=\"justificationRequired\">\n        <adapt-rx-checkbox\n          class=\"checkbox-inline\"\n          formControlName=\"toApprove\"\n          label=\"{{ 'com.bmc.arsys.rx.client.approval.justification.require-on.approval.label' | translate }}\"\n          [disabled]=\"!fieldNames.length\"\n          (ngModelChange)=\"handleJustificationField()\"\n        >\n        </adapt-rx-checkbox>\n\n        <adapt-rx-checkbox\n          class=\"checkbox-inline\"\n          formControlName=\"toReject\"\n          label=\"{{ 'com.bmc.arsys.rx.client.approval.justification.require-on.rejection.label' | translate }}\"\n          [disabled]=\"!fieldNames.length\"\n          (ngModelChange)=\"handleJustificationField()\"\n        >\n        </adapt-rx-checkbox>\n      </div>\n    </div>\n\n    <div class=\"col-4 form-group\">\n      <adapt-rx-select\n        [options]=\"fieldNames\"\n        [emptyOption]=\"true\"\n        label=\"{{ 'com.bmc.arsys.rx.client.approval.justification-reason.label' | translate }}\"\n        formControlName=\"justificationFieldName\"\n        name=\"justificationFieldName\"\n        [selectAllButton]=\"true\"\n        enableFilter=\"true\"\n        closeOnSelect=\"true\"\n        rx-id=\"justification-reason-field\"\n        [deselectAllButton]=\"true\"\n        [disabled]=\"!fieldNames.length\"\n        [tooltip]=\"justificationTooltip\"\n        [required]=\"\n          recordRegistrationForm.get('justificationRequired').value.toApprove ||\n          recordRegistrationForm.get('justificationRequired').value.toReject\n        \"\n      ></adapt-rx-select>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-4\">\n      <adapt-rx-control-label\n        label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.record.fields' | translate }}\"\n      ></adapt-rx-control-label>\n    </div>\n\n    <div class=\"col-4\">\n      <adapt-rx-control-label\n        label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.record.fields.labels' | translate }}\"\n      ></adapt-rx-control-label>\n    </div>\n  </div>\n\n  <div class=\"row\" formGroupName=\"field3Mapping\">\n    <div class=\"col-4 form-group\">\n      <rx-field-definition-picker\n        [options]=\"fieldDefinitionPickerOptions$ | async\"\n        formControlName=\"fieldID\"\n        rx-id=\"field3-mapping-field\"\n      ></rx-field-definition-picker>\n    </div>\n\n    <div class=\"col-4 form-group\">\n      <adapt-rx-textfield\n        formControlName=\"label\"\n        name=\"field3MappingLabel\"\n        adaptRequired\n        [disabled]=\"!recordRegistrationForm.get('field3Mapping').get('fieldID').value\"\n      ></adapt-rx-textfield>\n    </div>\n  </div>\n\n  <div class=\"row\" formGroupName=\"field4Mapping\">\n    <div class=\"col-4 form-group\">\n      <rx-field-definition-picker\n        [options]=\"fieldDefinitionPickerOptions$ | async\"\n        formControlName=\"fieldID\"\n        rx-id=\"field4-mapping-field\"\n      ></rx-field-definition-picker>\n    </div>\n\n    <div class=\"col-4 form-group\">\n      <adapt-rx-textfield\n        formControlName=\"label\"\n        name=\"field4MappingLabel\"\n        adaptRequired\n        [disabled]=\"!recordRegistrationForm.get('field4Mapping').get('fieldID').value\"\n      ></adapt-rx-textfield>\n    </div>\n  </div>\n  <div class=\"row\" formGroupName=\"field5Mapping\">\n    <div class=\"col-4 form-group\">\n      <rx-field-definition-picker\n        rx-id=\"field5-mapping-field\"\n        [options]=\"fieldDefinitionPickerOptions$ | async\"\n        formControlName=\"fieldID\"\n      ></rx-field-definition-picker>\n    </div>\n\n    <div class=\"col-4 form-group\">\n      <adapt-rx-textfield\n        formControlName=\"label\"\n        name=\"field5MappingLabel\"\n        adaptRequired\n        [disabled]=\"!recordRegistrationForm.get('field5Mapping').get('fieldID').value\"\n      ></adapt-rx-textfield>\n    </div>\n  </div>\n\n  <div class=\"row\" formGroupName=\"field6Mapping\">\n    <div class=\"col-4 form-group\">\n      <rx-field-definition-picker\n        rx-id=\"field6-mapping-field\"\n        [options]=\"fieldDefinitionPickerOptions$ | async\"\n        formControlName=\"fieldID\"\n      ></rx-field-definition-picker>\n    </div>\n\n    <div class=\"col-4 form-group\">\n      <adapt-rx-textfield\n        formControlName=\"label\"\n        name=\"field6MappingLabel\"\n        adaptRequired\n        [disabled]=\"!recordRegistrationForm.get('field6Mapping').get('fieldID').value\"\n      ></adapt-rx-textfield>\n    </div>\n  </div>\n</form>\n", components: [{ type: i1__namespace$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i4__namespace$1.RxDefinitionPickerComponent, selector: "rx-definition-picker", inputs: ["options", "isDisabled"] }, { type: RxFieldDefinitionPickerComponent, selector: "rx-field-definition-picker", inputs: ["options"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace$1.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$3.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }], pipes: { "async": i8__namespace.AsyncPipe, "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordRegistrationComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-record-registration',
                        templateUrl: './record-registration.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }, { type: i0__namespace.ChangeDetectorRef }, { type: i4__namespace.TranslateService }, { type: i2__namespace.RxDefinitionNameService }, { type: RxApprovalConfigurationService }, { type: i3__namespace$2.RxRecordDefinitionCacheService }, { type: i3__namespace$2.RxRecordInstanceDataPageService }, { type: i2__namespace.RxNotificationService }, { type: i7__namespace.RxRecordGridUtilsService }, { type: RxFieldDefinitionPickerService }]; }, propDecorators: { registeredRecordDefinitionName: [{
                    type: i0.Input
                }], isEditMode: [{
                    type: i0.Input
                }], recordRegistered: [{
                    type: i0.Output
                }] } });

    var approvalMappingDataPage = 'com.bmc.arsys.rx.approval.application.datapage.ApprovalMappingDataPage';
    var RxApprovalMappingDataPageService = /** @class */ (function (_super) {
        __extends(RxApprovalMappingDataPageService, _super);
        function RxApprovalMappingDataPageService(injector) {
            var _this = _super.call(this, injector, approvalMappingDataPage) || this;
            _this.injector = injector;
            return _this;
        }
        return RxApprovalMappingDataPageService;
    }(i2.DataPage));
    RxApprovalMappingDataPageService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxApprovalMappingDataPageService, deps: [{ token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxApprovalMappingDataPageService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxApprovalMappingDataPageService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxApprovalMappingDataPageService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }]; } });

    var SelfApprovalConfigurationComponent = /** @class */ (function () {
        function SelfApprovalConfigurationComponent(injector, formBuilder, rxModalService, translateService, rxGlobalCacheService, rxNotificationService, rxDefinitionNameService, rxExpressionEditorService, rxApprovalConfigurationService, rxRecordDefinitionCacheService, rxApprovalMappingDataPageService) {
            this.injector = injector;
            this.formBuilder = formBuilder;
            this.rxModalService = rxModalService;
            this.translateService = translateService;
            this.rxGlobalCacheService = rxGlobalCacheService;
            this.rxNotificationService = rxNotificationService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxExpressionEditorService = rxExpressionEditorService;
            this.rxApprovalConfigurationService = rxApprovalConfigurationService;
            this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            this.rxApprovalMappingDataPageService = rxApprovalMappingDataPageService;
            this.alertConfig = {
                content: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.self-approval.information'),
                type: 'inline',
                variant: 'info'
            };
            this.processOptions = [];
        }
        SelfApprovalConfigurationComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.isUpdateButtonVisible = false;
            this.expressionConfigurator = new RxApprovalExpressionConfigurator(this.injector);
            this.expressionConfigurator.configureForProperty({
                propertyPath: 'approvalQualification',
                dataDictionary$: this.expressionConfigurator.approvalExpressionDataDictionary(this.registeredRecordDefinitionName),
                operators: this.expressionConfigurator.getOperatorRowsByGroup(i2.ExpressionOperatorGroup.All)
            });
            this.options = {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.self-approval.approval-qualification-field.label'),
                dataDictionary$: this.expressionConfigurator.getDataDictionary('approvalQualification'),
                operators: this.expressionConfigurator.getOperators('approvalQualification'),
                isRequired: true
            };
            this.selfApprovalConfigurationForm = this.formBuilder.group({
                qualificationExpression: null,
                precedence: null,
                auditInformation: null,
                process: []
            });
            this.gridConfig = rxjs.of({
                actionButtons: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.common.edit.label'),
                        style: 'tertiary',
                        icon: 'pencil',
                        actions: [
                            {
                                name: this.setCurrentRecordValuesToForm.bind(this)
                            }
                        ],
                        disabled: function () { return _this.grid.api.getSelectedRowCount() > 1; }
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                        style: 'tertiary',
                        icon: 'trash',
                        actions: [
                            {
                                name: this.deleteConfiguration.bind(this)
                            }
                        ]
                    }
                ],
                recordDefinitionName: RX_APPROVAL_CONFIGURATION.selfApproval.mapping.name,
                enableRowSelection: i7.RowSelectionMode.Multiple,
                getData: function (queryParams) { return _this.getData(queryParams); },
                getRecordDefinition: function () { return rxjs.of(_this.getRecordDefinition()); },
                columns: this.getColumns(),
                styles: 'flex-fill'
            });
            this.grid.adaptTable.selectionChange.subscribe(function () {
                _this.isUpdateButtonVisible = false;
                _this.clearFormValues();
            });
            this.loadProcesses();
        };
        SelfApprovalConfigurationComponent.prototype.getData = function (queryParams) {
            var _b;
            var params = Object.assign(Object.assign({}, lodash.omit(queryParams, ['searchText'])), (_b = {}, _b[RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.recordDefinition] = this.registeredRecordDefinitionName, _b));
            return this.rxApprovalMappingDataPageService.get({ params: params });
        };
        SelfApprovalConfigurationComponent.prototype.loadProcesses = function () {
            var _this = this;
            this.loadingProcesses = true;
            var queryParams = {
                recorddefinition: RX_APPROVAL_CONFIGURATION.selfApproval.flowList.name,
                propertySelection: [
                    RX_APPROVAL_CONFIGURATION.selfApproval.flowList.fields.recordDefinition,
                    RX_APPROVAL_CONFIGURATION.selfApproval.flowList.fields.selfApprovalFlowName,
                    RX_APPROVAL_CONFIGURATION.selfApproval.flowList.fields.selfApprovalFlowProcessDefinitionGuid
                ].join(',')
            };
            this.rxApprovalMappingDataPageService
                .get({ params: queryParams })
                .pipe(operators.map(function (response) {
                var _b;
                var bundleInfoRequests = lodash.chain(response.data)
                    .filter((_b = {},
                    _b[RX_APPROVAL_CONFIGURATION.selfApproval.flowList.fields.recordDefinition] = _this.registeredRecordDefinitionName,
                    _b))
                    .map(function (processData) {
                    var id = _this.rxDefinitionNameService.getBundleId(processData[RX_APPROVAL_CONFIGURATION.selfApproval.flowList.fields.selfApprovalFlowName]);
                    return _this.rxGlobalCacheService.getBundleFriendlyName(id).pipe(operators.map(function (friendlyName) { return ({
                        id: id,
                        friendlyName: friendlyName
                    }); }));
                })
                    .value();
                rxjs.forkJoin(bundleInfoRequests).subscribe(function (bundleIdNameData) {
                    var _b;
                    _this.processOptions = lodash.chain(response.data)
                        .filter((_b = {},
                        _b[RX_APPROVAL_CONFIGURATION.selfApproval.flowList.fields.recordDefinition] = _this.registeredRecordDefinitionName,
                        _b))
                        .map(function (processData) {
                        return {
                            id: _this.rxDefinitionNameService.getBundleId(processData[RX_APPROVAL_CONFIGURATION.selfApproval.flowList.fields.selfApprovalFlowName]),
                            processGuid: processData[RX_APPROVAL_CONFIGURATION.selfApproval.flowList.fields.selfApprovalFlowProcessDefinitionGuid],
                            value: processData[RX_APPROVAL_CONFIGURATION.selfApproval.flowList.fields.selfApprovalFlowName],
                            displayValue: _this.rxDefinitionNameService.getDisplayName(processData[RX_APPROVAL_CONFIGURATION.selfApproval.flowList.fields.selfApprovalFlowName])
                        };
                    })
                        .groupBy('id')
                        .map(function (options, id) {
                        return {
                            name: lodash.find(bundleIdNameData, { id: id }).friendlyName,
                            children: lodash.map(options, function (option) {
                                return {
                                    value: option.value,
                                    displayValue: option.displayValue,
                                    processGuid: option.processGuid
                                };
                            })
                        };
                    })
                        .value();
                }, function () { }, function () { return (_this.loadingProcesses = false); });
            }))
                .subscribe();
        };
        SelfApprovalConfigurationComponent.prototype.onEvent = function () {
            this.selectApprovalQualificationExpression();
        };
        SelfApprovalConfigurationComponent.prototype.selectApprovalQualificationExpression = function () {
            var _this = this;
            this.rxExpressionEditorService
                .openEditor({
                property: {
                    path: 'approvalQualification',
                    value: this.selfApprovalConfigurationForm.value.qualificationExpression,
                    label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.self-approval.approval-qualification-field.label')
                },
                expressionConfigurator: this.expressionConfigurator,
                legend: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),
                        icon: 'd-icon-dollar'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.field.label'),
                        icon: 'd-icon-field_text'
                    }
                ]
            }, function (dialogApi) { return (_this.dialogApi = dialogApi); })
                .subscribe(function (expression) {
                _this.dialogApi = null;
                _this.selfApprovalConfigurationForm.get('qualificationExpression').setValue(expression.value);
                _this.selfApprovalConfigurationForm.get('qualificationExpression').markAsDirty();
            });
        };
        SelfApprovalConfigurationComponent.prototype.createSelfApprovalConfiguration = function () {
            var _this = this;
            this.selfApprovalConfigurationForm.markAsPristine();
            var configuration = this.getSelfApprovalConfiguration();
            this.rxApprovalConfigurationService.createSelfApprovalConfiguration(configuration).subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.self-approval.expression-saved.message'));
                _this.clearFormValues();
                _this.grid.api.refresh().subscribe();
            });
        };
        SelfApprovalConfigurationComponent.prototype.updateSelfApprovalConfiguration = function () {
            var _this = this;
            this.selfApprovalConfigurationForm.markAsPristine();
            var configuration = this.getSelfApprovalConfiguration();
            configuration.id = this.grid.api.getFirstSelectedRow()[i3.RX_RECORD_DEFINITION.coreFieldIds.id];
            this.rxApprovalConfigurationService
                .updateSelfApprovalConfiguration(this.grid.api.getFirstSelectedRow()[i3.RX_RECORD_DEFINITION.coreFieldIds.id], configuration)
                .subscribe(function () {
                _this.clearFormValues();
                _this.isUpdateButtonVisible = false;
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.self-approval.expression-updated.message'));
                _this.grid.api.refresh().subscribe();
            });
        };
        SelfApprovalConfigurationComponent.prototype.getSelfApprovalConfiguration = function () {
            var selectedProcess = lodash.get(this.selfApprovalConfigurationForm.get('process').value, '[0]', {});
            return {
                auditText: this.selfApprovalConfigurationForm.value.auditInformation,
                precedence: this.selfApprovalConfigurationForm.value.precedence,
                qualification: this.selfApprovalConfigurationForm.value.qualificationExpression,
                description: this.registeredRecordDefinitionName,
                recordDefinition: this.registeredRecordDefinitionName,
                approvalFlowName: selectedProcess.value || '',
                approvalFlowProcessDefinitionGUID: selectedProcess.processGuid || '',
                approvalMappingRecordDefinition: RX_APPROVAL_CONFIGURATION.selfApproval.mapping.name
            };
        };
        SelfApprovalConfigurationComponent.prototype.setCurrentRecordValuesToForm = function () {
            this.isUpdateButtonVisible = true;
            var selectedRow = this.grid.api.getFirstSelectedRow();
            this.selfApprovalConfigurationForm
                .get('qualificationExpression')
                .setValue(selectedRow[RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.qualification]);
            this.selfApprovalConfigurationForm
                .get('precedence')
                .setValue(selectedRow[RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.precedence]);
            this.selfApprovalConfigurationForm
                .get('auditInformation')
                .setValue(selectedRow[RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.auditInformation]);
            var process = selectedRow[RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.approvalFlowName]
                ? [
                    {
                        value: selectedRow[RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.approvalFlowName],
                        displayValue: this.rxDefinitionNameService.getDisplayName(selectedRow[RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.approvalFlowName])
                    }
                ]
                : [];
            this.selfApprovalConfigurationForm.get('process').setValue(process);
        };
        SelfApprovalConfigurationComponent.prototype.deleteConfiguration = function () {
            var _this = this;
            this.rxModalService
                .confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.self-approval.expression-delete-confirmation.message')
            })
                .then(function (result) {
                if (result) {
                    var deleteRequests$ = _this.grid.api
                        .getSelectedRows()
                        .map(function (record) { return _this.rxApprovalConfigurationService.deleteSelfApprovalConfiguration(record[i3.RX_RECORD_DEFINITION.coreFieldIds.id]); });
                    rxjs.forkJoin(deleteRequests$).subscribe(function () {
                        _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.self-approval.expression-deleted.message'));
                        _this.clearFormValues();
                        _this.isUpdateButtonVisible = false;
                        _this.grid.api.refresh().subscribe();
                    });
                }
            });
        };
        SelfApprovalConfigurationComponent.prototype.clearFormValues = function () {
            this.selfApprovalConfigurationForm.reset();
            this.selfApprovalConfigurationForm.get('process').setValue([]);
        };
        SelfApprovalConfigurationComponent.prototype.optionFormatter = function (option) {
            return option.displayValue;
        };
        SelfApprovalConfigurationComponent.prototype.getRecordDefinition = function () {
            return {
                fieldDefinitions: [
                    {
                        id: RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.hiddenQualification,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.precedence,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.integer
                    },
                    {
                        id: RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.auditInformation,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.approvalFlowName,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.qualification,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.recordDefinition,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.approvalFlowGuid,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    }
                ]
            };
        };
        SelfApprovalConfigurationComponent.prototype.getColumns = function () {
            return [
                {
                    index: 0,
                    fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.hiddenQualification),
                    sortable: false,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.selfApproval.grid.column.approvalExpression')
                },
                {
                    index: 1,
                    fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.precedence),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.selfApproval.grid.column.precedence')
                },
                {
                    index: 2,
                    fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.auditInformation),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.selfApproval.grid.column.auditInformation')
                },
                {
                    index: 3,
                    fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.approvalFlowName),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.selfApproval.grid.column.processFlow')
                },
                {
                    index: 4,
                    fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.qualification),
                    visible: false,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.selfApproval.grid.column.expressionValue')
                },
                {
                    index: 5,
                    fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.recordDefinition),
                    visible: false,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.selfApproval.grid.column.recordDefinition'),
                    cellTemplate: this.definitionNameCellTemplate
                },
                {
                    index: 6,
                    fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.mapping.fields.approvalFlowGuid),
                    visible: false,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.selfApproval.grid.column.processFlowGUID')
                },
                {
                    index: 7,
                    fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.id),
                    visible: false,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.selfApproval.grid.column.id')
                }
            ];
        };
        SelfApprovalConfigurationComponent.prototype.isDirty = function () {
            var _a;
            return this.selfApprovalConfigurationForm.dirty || Boolean((_a = this.dialogApi) === null || _a === void 0 ? void 0 : _a.isDirty());
        };
        return SelfApprovalConfigurationComponent;
    }());
    SelfApprovalConfigurationComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelfApprovalConfigurationComponent, deps: [{ token: i0__namespace.Injector }, { token: i1__namespace$3.FormBuilder }, { token: i1__namespace.RxModalService }, { token: i4__namespace.TranslateService }, { token: i2__namespace.RxGlobalCacheService }, { token: i2__namespace.RxNotificationService }, { token: i2__namespace.RxDefinitionNameService }, { token: i4__namespace$1.RxExpressionEditorService }, { token: RxApprovalConfigurationService }, { token: i3__namespace$2.RxRecordDefinitionCacheService }, { token: RxApprovalMappingDataPageService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    SelfApprovalConfigurationComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SelfApprovalConfigurationComponent, selector: "rx-self-approval-configuration", inputs: { registeredRecordDefinitionName: "registeredRecordDefinitionName" }, viewQueries: [{ propertyName: "definitionNameCellTemplate", first: true, predicate: ["definitionNameCellTemplate"], descendants: true, static: true }, { propertyName: "grid", first: true, predicate: ["grid"], descendants: true, static: true }], ngImport: i0__namespace, template: "<adapt-alert [config]=\"alertConfig\"></adapt-alert>\n\n<form [formGroup]=\"selfApprovalConfigurationForm\">\n  <rx-expression-form-control\n    class=\"d-block form-group\"\n    [options]=\"options\"\n    formControlName=\"qualificationExpression\"\n    (events)=\"onEvent()\"\n    required=\"true\"\n  ></rx-expression-form-control>\n\n  <div class=\"row\">\n    <div class=\"col-md-4 col-12\">\n      <div class=\"row\">\n        <div class=\"col-12 form-group\">\n          <adapt-rx-counter\n            rx-id=\"precedence\"\n            label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.precedence' | translate }}\"\n            required=\"true\"\n            formControlName=\"precedence\"\n          >\n          </adapt-rx-counter>\n        </div>\n\n        <div class=\"col-12 form-group\">\n          <adapt-rx-select\n            class=\"d-block\"\n            label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.selfApproval.process' | translate }}\"\n            rx-id=\"process\"\n            formControlName=\"process\"\n            [options]=\"processOptions\"\n            enableFilter=\"true\"\n            emptyOption=\"true\"\n            [optionFormatter]=\"optionFormatter\"\n            [loadingState]=\"loadingProcesses\"\n          >\n          </adapt-rx-select>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-md-8 col-12 form-group\">\n      <adapt-rx-textarea\n        label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.auditInformation' | translate }}\"\n        formControlName=\"auditInformation\"\n        rx-id=\"audit-information\"\n        required=\"true\"\n        rows=\"5\"\n      >\n      </adapt-rx-textarea>\n    </div>\n  </div>\n\n  <button\n    class=\"d-icon-plus_adapt form-group\"\n    type=\"button\"\n    adapt-button\n    btn-type=\"primary\"\n    rx-id=\"add-button\"\n    size=\"small\"\n    [hidden]=\"isUpdateButtonVisible\"\n    [disabled]=\"selfApprovalConfigurationForm.pristine || selfApprovalConfigurationForm.invalid\"\n    (click)=\"createSelfApprovalConfiguration()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.add.label' | translate }}\n  </button>\n\n  <button\n    class=\"form-group\"\n    type=\"button\"\n    adapt-button\n    btn-type=\"primary\"\n    rx-id=\"update-button\"\n    size=\"small\"\n    [hidden]=\"!isUpdateButtonVisible\"\n    [disabled]=\"selfApprovalConfigurationForm.pristine || selfApprovalConfigurationForm.invalid\"\n    (click)=\"updateSelfApprovalConfiguration()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.approval.update.button.label' | translate }}\n  </button>\n</form>\n\n<rx-record-grid #grid [config]=\"gridConfig\"></rx-record-grid>\n\n<ng-template #definitionNameCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  {{ dataItem[column.field] | rxDefinitionNamePipe }}\n</ng-template>\n", styles: ["rx-record-grid{height:262px}:host::ng-deep rx-expression-form-control button{height:2rem}\n"], components: [{ type: i1__namespace$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i4__namespace$1.ExpressionFormControlComponent, selector: "rx-expression-form-control", inputs: ["options", "isDisabled", "propertyPath"], outputs: ["events"] }, { type: i1__namespace$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptRxTextareaComponent, selector: "adapt-rx-textarea", inputs: ["rows", "maxRows", "autocomplete", "placeholder", "size", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4__namespace.TranslatePipe, "rxDefinitionNamePipe": i2__namespace.RxDefinitionNamePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SelfApprovalConfigurationComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-self-approval-configuration',
                        templateUrl: './self-approval-configuration.component.html',
                        styleUrls: ['./self-approval-configuration.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i1__namespace$3.FormBuilder }, { type: i1__namespace.RxModalService }, { type: i4__namespace.TranslateService }, { type: i2__namespace.RxGlobalCacheService }, { type: i2__namespace.RxNotificationService }, { type: i2__namespace.RxDefinitionNameService }, { type: i4__namespace$1.RxExpressionEditorService }, { type: RxApprovalConfigurationService }, { type: i3__namespace$2.RxRecordDefinitionCacheService }, { type: RxApprovalMappingDataPageService }]; }, propDecorators: { registeredRecordDefinitionName: [{
                    type: i0.Input
                }], definitionNameCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['definitionNameCellTemplate', { static: true }]
                }], grid: [{
                    type: i0.ViewChild,
                    args: ['grid', { static: true }]
                }] } });

    var ApprovalConfigurationEditorComponent = /** @class */ (function (_super) {
        __extends(ApprovalConfigurationEditorComponent, _super);
        function ApprovalConfigurationEditorComponent(translateService, rxNotificationService, activeModalRef, injector) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.translateService = translateService;
            _this.rxNotificationService = rxNotificationService;
            _this.activeModalRef = activeModalRef;
            _this.injector = injector;
            _this.activatedTabs = [true, false, false];
            _this.selectedRecordDefinition = _this.activeModalRef.getData().selectedRecordDefinition;
            _this.editMode = _this.activeModalRef.getData().editMode;
            return _this;
        }
        ApprovalConfigurationEditorComponent.prototype.isDirty = function () {
            var _a, _b, _c;
            return (((_a = this.recordRegistrationComponent) === null || _a === void 0 ? void 0 : _a.isFormDirty()) ||
                ((_b = this.approvalFlowConfigurationComponent) === null || _b === void 0 ? void 0 : _b.isDirty()) ||
                ((_c = this.selfApprovalConfigurationComponent) === null || _c === void 0 ? void 0 : _c.isDirty()));
        };
        ApprovalConfigurationEditorComponent.prototype.onRecordRegistered = function (registeredRecordDefinitionName) {
            this.editMode = true;
            this.selectedRecordDefinition = registeredRecordDefinitionName;
        };
        ApprovalConfigurationEditorComponent.prototype.isSaveButtonDisabled = function () {
            var _a, _b, _c;
            if (this.editMode) {
                return !((_a = this.recordRegistrationComponent) === null || _a === void 0 ? void 0 : _a.canSave()) && !((_b = this.approvalFlowConfigurationComponent) === null || _b === void 0 ? void 0 : _b.canSave());
            }
            else {
                return !((_c = this.recordRegistrationComponent) === null || _c === void 0 ? void 0 : _c.canSave());
            }
        };
        ApprovalConfigurationEditorComponent.prototype.saveApprovalConfiguration = function () {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            if (((_a = this.recordRegistrationComponent) === null || _a === void 0 ? void 0 : _a.isFormDirty()) && ((_b = this.recordRegistrationComponent) === null || _b === void 0 ? void 0 : _b.isFormValid())) {
                this.recordRegistrationComponent.save();
            }
            else if (((_c = this.recordRegistrationComponent) === null || _c === void 0 ? void 0 : _c.isFormDirty()) && !((_d = this.recordRegistrationComponent) === null || _d === void 0 ? void 0 : _d.isFormValid())) {
                this.rxNotificationService.addWarningMessage(this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.message.validation.error'));
                this.tabSetComponent.setActiveTab(0, true, null);
            }
            if (this.editMode && ((_e = this.approvalFlowConfigurationComponent) === null || _e === void 0 ? void 0 : _e.canSave())) {
                (_f = this.approvalFlowConfigurationComponent) === null || _f === void 0 ? void 0 : _f.markInvalidGroupsAndFlows();
                if ((_g = this.approvalFlowConfigurationComponent) === null || _g === void 0 ? void 0 : _g.areFlowGroupsValid()) {
                    this.approvalFlowConfigurationComponent.saveFlowGroups();
                }
                else if ((_h = this.approvalFlowConfigurationComponent) === null || _h === void 0 ? void 0 : _h.hasFlowGroups()) {
                    this.rxNotificationService.addWarningMessage(this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.message.validation.error'));
                    this.tabSetComponent.setActiveTab(2, true, null);
                }
            }
        };
        ApprovalConfigurationEditorComponent.prototype.closeModal = function () {
            this.activeModalRef.dismiss(i1$2.DismissReasons.CLOSE_BTN);
        };
        return ApprovalConfigurationEditorComponent;
    }(i1$1.RxModalClass));
    ApprovalConfigurationEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApprovalConfigurationEditorComponent, deps: [{ token: i4__namespace.TranslateService }, { token: i2__namespace.RxNotificationService }, { token: i1__namespace$1.ActiveModalRef }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ApprovalConfigurationEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ApprovalConfigurationEditorComponent, selector: "rx-approval-configuration-editor", viewQueries: [{ propertyName: "approvalFlowConfigurationComponent", first: true, predicate: ApprovalFlowConfigurationComponent, descendants: true }, { propertyName: "recordRegistrationComponent", first: true, predicate: RecordRegistrationComponent, descendants: true }, { propertyName: "selfApprovalConfigurationComponent", first: true, predicate: SelfApprovalConfigurationComponent, descendants: true }, { propertyName: "tabSetComponent", first: true, predicate: ["tabSetComponent"], descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"designer-modal-body d-flex mh-100 flex-column\">\n  <adapt-tabset [fullHeight]=\"true\" #tabSetComponent (tab-active-changed)=\"activatedTabs[$event.index] = true\">\n    <adapt-tab-panel\n      adapt-tab-title=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.tab.registration' | translate }}\"\n    >\n      <rx-record-registration\n        [registeredRecordDefinitionName]=\"selectedRecordDefinition\"\n        [isEditMode]=\"editMode\"\n        (recordRegistered)=\"onRecordRegistered($event)\"\n      ></rx-record-registration>\n    </adapt-tab-panel>\n\n    <adapt-tab-panel\n      adapt-tab-title=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.tab.selfApproval' | translate }}\"\n      [disabled]=\"!editMode\"\n    >\n      <rx-self-approval-configuration\n        [registeredRecordDefinitionName]=\"selectedRecordDefinition\"\n        *ngIf=\"editMode && activatedTabs[1]\"\n      >\n      </rx-self-approval-configuration>\n    </adapt-tab-panel>\n\n    <adapt-tab-panel\n      adapt-tab-title=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.tab.approvalFlows' | translate }}\"\n      [disabled]=\"!editMode\"\n    >\n      <rx-approval-flow-configuration\n        [registeredRecordDefinitionName]=\"selectedRecordDefinition\"\n        *ngIf=\"editMode && activatedTabs[2]\"\n      ></rx-approval-flow-configuration>\n    </adapt-tab-panel>\n  </adapt-tabset>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    rx-id=\"save-button\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    (click)=\"saveApprovalConfiguration()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button type=\"button\" btn-type=\"secondary\" rx-id=\"close-button\" (click)=\"closeModal()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.designer-modal-body{height:645px;min-height:calc(100% - 61px)!important}.designer-modal-accordion-wrapper{display:flex;flex-direction:column;height:100%;overflow:auto;padding-top:10px}.designer-modal-accordion-content{position:relative}.designer-modal-accordion-content.cdk-drag-preview{z-index:1200!important}.designer-modal-drag-handle{cursor:move;position:absolute;top:0;left:0;height:46px;padding:14px 10px 14px 14px;z-index:1}.designer-modal-card-title-content{width:100%;display:flex}.designer-modal-card-title-content .left-header-block,.designer-modal-card-title-content .right-header-block{display:flex;align-items:center}.designer-modal-card-title-content .left-header-block{flex-grow:1;min-width:0;font-size:14px;padding-left:22px}.designer-modal-card-sub-title{color:#7c7f81;font-weight:normal}.designer-modal-card-title-index-buttons{display:flex;font-size:19px}.rx-card{overflow:auto}.rx-tree-draggable-node{cursor:pointer}.rx-tree-draggable-node.cdk-drag-preview{z-index:1200!important}.rx-tree-draggable-node.cdk-drag{opacity:1}.rx-tree-node-label{word-break:break-all}rx-form-builder{max-width:400px}\n"], components: [{ type: i1__namespace$1.AdaptTabsComponent, selector: "adapt-tabset", inputs: ["showTabToolbar", "customCssTabContent", "fullHeight", "texts", "enableDnD", "customClassTabList", "allow-tabs-adding", "id", "testID", "dropdown-title", "fadeColor", "carouselMode", "justify", "type", "tab-active"], outputs: ["tab-index-closed", "tab-active-changed", "add-tab-clicked", "tabClicked", "tabDropped"], exportAs: ["adaptTabset"] }, { type: i1__namespace$1.AdaptTabsPanelComponent, selector: "adapt-tab-panel, div[tab-panel]", inputs: ["isActive", "badge-type", "animateBadge", "showBadgeAlert", "badgeAlertVariant", "badgeCustomClass", "adapt-tab-title", "disabled", "isHidden", "icon", "subtext", "icon-right", "icon-close", "aria-label", "aria-labelledby", "kebabMenu", "id", "renderContentWhenInactive", "badge"] }, { type: RecordRegistrationComponent, selector: "rx-record-registration", inputs: ["registeredRecordDefinitionName", "isEditMode"], outputs: ["recordRegistered"] }, { type: SelfApprovalConfigurationComponent, selector: "rx-self-approval-configuration", inputs: ["registeredRecordDefinitionName"] }, { type: ApprovalFlowConfigurationComponent, selector: "rx-approval-flow-configuration", inputs: ["registeredRecordDefinitionName"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApprovalConfigurationEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-approval-configuration-editor',
                        templateUrl: './approval-configuration-editor.component.html',
                        styleUrls: ['./approval-configuration-editor.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i4__namespace.TranslateService }, { type: i2__namespace.RxNotificationService }, { type: i1__namespace$1.ActiveModalRef }, { type: i0__namespace.Injector }]; }, propDecorators: { approvalFlowConfigurationComponent: [{
                    type: i0.ViewChild,
                    args: [ApprovalFlowConfigurationComponent]
                }], recordRegistrationComponent: [{
                    type: i0.ViewChild,
                    args: [RecordRegistrationComponent]
                }], selfApprovalConfigurationComponent: [{
                    type: i0.ViewChild,
                    args: [SelfApprovalConfigurationComponent]
                }], tabSetComponent: [{
                    type: i0.ViewChild,
                    args: ['tabSetComponent']
                }] } });

    var recordDefinitionRegistrationDataPageQuery = 'com.bmc.arsys.rx.approval.application.datapage.RecordDefinitionRegistrationDataPageQuery';
    var RxRecordDefinitionRegistrationDataPageService = /** @class */ (function (_super) {
        __extends(RxRecordDefinitionRegistrationDataPageService, _super);
        function RxRecordDefinitionRegistrationDataPageService(injector) {
            var _this = _super.call(this, injector, recordDefinitionRegistrationDataPageQuery) || this;
            _this.injector = injector;
            return _this;
        }
        return RxRecordDefinitionRegistrationDataPageService;
    }(i2.DataPage));
    RxRecordDefinitionRegistrationDataPageService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordDefinitionRegistrationDataPageService, deps: [{ token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRecordDefinitionRegistrationDataPageService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordDefinitionRegistrationDataPageService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRecordDefinitionRegistrationDataPageService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }]; } });

    var RxAssociatedRecordFieldNamePipe = /** @class */ (function () {
        function RxAssociatedRecordFieldNamePipe() {
        }
        RxAssociatedRecordFieldNamePipe.prototype.transform = function (value, associatedRecordFieldNames) {
            return (associatedRecordFieldNames === null || associatedRecordFieldNames === void 0 ? void 0 : associatedRecordFieldNames[value]) || value;
        };
        return RxAssociatedRecordFieldNamePipe;
    }());
    RxAssociatedRecordFieldNamePipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAssociatedRecordFieldNamePipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    RxAssociatedRecordFieldNamePipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAssociatedRecordFieldNamePipe, name: "rxAssociatedRecordFieldNamePipe" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxAssociatedRecordFieldNamePipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'rxAssociatedRecordFieldNamePipe'
                    }]
            }] });

    var ApprovalConfigurationAdminComponent = /** @class */ (function () {
        function ApprovalConfigurationAdminComponent(rxModalService, translateService, adaptModalService, rxNotificationService, rxApprovalConfigurationService, rxRecordDefinitionRegistrationDataPageService) {
            this.rxModalService = rxModalService;
            this.translateService = translateService;
            this.adaptModalService = adaptModalService;
            this.rxNotificationService = rxNotificationService;
            this.rxApprovalConfigurationService = rxApprovalConfigurationService;
            this.rxRecordDefinitionRegistrationDataPageService = rxRecordDefinitionRegistrationDataPageService;
        }
        ApprovalConfigurationAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.gridConfig = rxjs.of({
                actionButtons: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.de-register.button.label'),
                        style: 'tertiary',
                        icon: 'trash',
                        actions: [
                            {
                                name: function () {
                                    _this.unregisterRecord();
                                }
                            }
                        ]
                    }
                ],
                recordDefinitionName: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.name,
                filterExpression: "('61001'!=$NULL$ AND '61001'!=\"\" AND ('14860' != $NULL$ AND '14860' = 1 ))",
                getData: function (queryParams) { return _this.getData(queryParams); },
                enableRowSelection: i7.RowSelectionMode.Single,
                getRecordDefinition: function () { return rxjs.of(_this.getRecordDefinition()); },
                columns: this.getColumns(),
                styles: 'flex-fill',
                enableFiltering: false
            });
        };
        ApprovalConfigurationAdminComponent.prototype.getData = function (queryParams) {
            delete queryParams.searchText;
            queryParams.pageSize = -1;
            return this.rxRecordDefinitionRegistrationDataPageService.get({ params: queryParams });
        };
        ApprovalConfigurationAdminComponent.prototype.newApprovalConfiguration = function () {
            this.openApprovalConfiguration({
                editMode: false,
                selectedRecordDefinition: ''
            });
        };
        ApprovalConfigurationAdminComponent.prototype.editApprovalConfiguration = function (clickedColumnRow) {
            this.openApprovalConfiguration({
                editMode: true,
                selectedRecordDefinition: clickedColumnRow[RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formName]
            });
        };
        ApprovalConfigurationAdminComponent.prototype.openApprovalConfiguration = function (data) {
            var _this = this;
            this.rxModalService
                .openModal({
                title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.main.title'),
                content: ApprovalConfigurationEditorComponent,
                size: i1$4.OpenViewActionModalSize.Large,
                data: Object.assign({}, data)
            })
                .then(function () { }, function () {
                _this.grid.api.refresh().subscribe();
            })
                .catch(function () { });
        };
        ApprovalConfigurationAdminComponent.prototype.unregisterRecord = function () {
            var _this = this;
            this.rxModalService
                .confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.de-register.warning')
            })
                .then(function (result) {
                if (result) {
                    _this.rxApprovalConfigurationService
                        .unRegisterRecord(_this.grid.api.getFirstSelectedRow()[RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formName])
                        .subscribe(function () {
                        _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.record.de-register.success'));
                        _this.grid.api.refresh().subscribe();
                    });
                }
            });
        };
        ApprovalConfigurationAdminComponent.prototype.getRecordDefinition = function () {
            return {
                fieldDefinitions: [
                    {
                        id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formName,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formRequestId,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.requester,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.summary,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.notesField,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field3,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field4,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field5,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field6,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field7,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.securityLabels,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    }
                ]
            };
        };
        ApprovalConfigurationAdminComponent.prototype.getColumns = function () {
            return [
                {
                    index: 0,
                    fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formName),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.recordDefinition'),
                    cellTemplate: this.definitionNameCellTemplate
                },
                {
                    index: 1,
                    fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formRequestId),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.requestId'),
                    cellTemplate: this.fieldNameCellTemplate,
                    visible: false
                },
                {
                    index: 2,
                    fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.requester),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.requester'),
                    cellTemplate: this.fieldNameCellTemplate,
                    visible: false
                },
                {
                    index: 3,
                    fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.summary),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.description'),
                    cellTemplate: this.fieldNameCellTemplate
                },
                {
                    index: 4,
                    fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.id),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.formInstanceId'),
                    visible: false
                },
                {
                    index: 5,
                    fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.notesField),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.notes'),
                    cellTemplate: this.fieldNameCellTemplate,
                    visible: false
                },
                {
                    index: 6,
                    fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field3),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.field3'),
                    cellTemplate: this.fieldNameCellTemplate,
                    visible: false
                },
                {
                    index: 7,
                    fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field4),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.field4'),
                    cellTemplate: this.fieldNameCellTemplate,
                    visible: false
                },
                {
                    index: 8,
                    fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field5),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.field5'),
                    cellTemplate: this.fieldNameCellTemplate,
                    visible: false
                },
                {
                    index: 9,
                    fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field6),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.field6'),
                    visible: false
                },
                {
                    index: 10,
                    fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field7),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.field7'),
                    visible: false
                },
                {
                    index: 11,
                    fieldId: String(RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.securityLabels),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.securityLabels'),
                    visible: false
                }
            ];
        };
        return ApprovalConfigurationAdminComponent;
    }());
    ApprovalConfigurationAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApprovalConfigurationAdminComponent, deps: [{ token: i1__namespace.RxModalService }, { token: i4__namespace.TranslateService }, { token: i1__namespace$1.AdaptModalService }, { token: i2__namespace.RxNotificationService }, { token: RxApprovalConfigurationService }, { token: RxRecordDefinitionRegistrationDataPageService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ApprovalConfigurationAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ApprovalConfigurationAdminComponent, selector: "rx-admin-approval-configuration", viewQueries: [{ propertyName: "definitionNameCellTemplate", first: true, predicate: ["definitionNameCellTemplate"], descendants: true, static: true }, { propertyName: "fieldNameCellTemplate", first: true, predicate: ["fieldNameCellTemplate"], descendants: true, static: true }, { propertyName: "grid", first: true, predicate: ["grid"], descendants: true, static: true }], ngImport: i0__namespace, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.title' | translate }}\">\n  <ng-container>\n    <button\n      adapt-button\n      type=\"button\"\n      btn-type=\"tertiary\"\n      class=\"d-icon-plus_circle align-self-start\"\n      rx-id=\"new-button\"\n      (click)=\"newApprovalConfiguration()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n    </button>\n\n    <rx-record-grid #grid [config]=\"gridConfig\"></rx-record-grid>\n  </ng-container>\n</rx-admin-settings>\n\n<ng-template #definitionNameCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <a href=\"javascript:void(0)\" (click)=\"editApprovalConfiguration(dataItem)\">\n    {{ dataItem[column.field] | rxDefinitionNamePipe }}\n  </a>\n</ng-template>\n\n<ng-template #fieldNameCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  {{ dataItem[column.field] | rxAssociatedRecordFieldNamePipe: dataItem.associationsLabels }}\n</ng-template>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i4__namespace.TranslatePipe, "rxDefinitionNamePipe": i2__namespace.RxDefinitionNamePipe, "rxAssociatedRecordFieldNamePipe": RxAssociatedRecordFieldNamePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApprovalConfigurationAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-approval-configuration',
                        templateUrl: './approval-configuration.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.RxModalService }, { type: i4__namespace.TranslateService }, { type: i1__namespace$1.AdaptModalService }, { type: i2__namespace.RxNotificationService }, { type: RxApprovalConfigurationService }, { type: RxRecordDefinitionRegistrationDataPageService }]; }, propDecorators: { definitionNameCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['definitionNameCellTemplate', { static: true }]
                }], fieldNameCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['fieldNameCellTemplate', { static: true }]
                }], grid: [{
                    type: i0.ViewChild,
                    args: ['grid', { static: true }]
                }] } });

    var ApprovalConfigurationRegistrationModule = /** @class */ (function () {
        function ApprovalConfigurationRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-approval-configuration',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(ApprovalConfigurationAdminComponent),
                name: 'Approval configuration',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return ApprovalConfigurationRegistrationModule;
    }());
    ApprovalConfigurationRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApprovalConfigurationRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ApprovalConfigurationRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApprovalConfigurationRegistrationModule, declarations: [ApprovalConfigurationAdminComponent,
            ApprovalFlowConfigurationComponent,
            RxAssociatedRecordFieldNamePipe,
            SelfApprovalConfigurationComponent,
            RecordRegistrationComponent,
            RxFieldDefinitionPickerComponent,
            FlowApproversSelectorComponent,
            ApprovalConfigurationEditorComponent], imports: [i1$2.AdaptAlertModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptHighlightModule,
            i1$2.AdaptRxSelectModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptTabsModule,
            i4.AdminSettingsModule,
            i8.CommonModule,
            i4.ExpressionFormControlModule,
            i7.RecordGridModule,
            i1$1.RxBusyIndicatorModule,
            i4.RxDefinitionPickerModule,
            i4$1.TranslateModule,
            i1.ReactiveFormsModule,
            i1$2.AdaptRxLabelModule,
            i1.FormsModule,
            i1$2.AdaptDropdownModule,
            i1$2.AdaptRxSearchModule,
            i1$2.AdaptTreeModule,
            i2.RxDefinitionModule,
            i1$2.AdaptRxCounterModule,
            i1$2.AdaptRxTextareaModule,
            i1$2.AdaptPopoverModule,
            i1$2.AdaptTooltipModule,
            i9.DragDropModule,
            i1$2.AdaptAccordionModule,
            i1$2.AdaptRxRadiobuttonModule,
            i1$2.AdaptBusyModule,
            i4.RxSelectWithPaginationModule,
            i1$2.AdaptRxCheckboxModule,
            i1$2.AdaptRxValidatorsModule,
            i1$2.AdaptEmptyStateModule] });
    ApprovalConfigurationRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApprovalConfigurationRegistrationModule, imports: [[
                i1$2.AdaptAlertModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptHighlightModule,
                i1$2.AdaptRxSelectModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptTabsModule,
                i4.AdminSettingsModule,
                i8.CommonModule,
                i4.ExpressionFormControlModule,
                i7.RecordGridModule,
                i1$1.RxBusyIndicatorModule,
                i4.RxDefinitionPickerModule,
                i4$1.TranslateModule,
                i1.ReactiveFormsModule,
                i1$2.AdaptRxLabelModule,
                i1.FormsModule,
                i1$2.AdaptDropdownModule,
                i1$2.AdaptRxSearchModule,
                i1$2.AdaptTreeModule,
                i2.RxDefinitionModule,
                i1$2.AdaptRxCounterModule,
                i1$2.AdaptRxTextareaModule,
                i1$2.AdaptPopoverModule,
                i1$2.AdaptTooltipModule,
                i9.DragDropModule,
                i1$2.AdaptAccordionModule,
                i1$2.AdaptRxRadiobuttonModule,
                i1$2.AdaptBusyModule,
                i4.RxSelectWithPaginationModule,
                i1$2.AdaptRxCheckboxModule,
                i1$2.AdaptRxValidatorsModule,
                i1$2.AdaptEmptyStateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApprovalConfigurationRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ApprovalConfigurationAdminComponent,
                            ApprovalFlowConfigurationComponent,
                            RxAssociatedRecordFieldNamePipe,
                            SelfApprovalConfigurationComponent,
                            RecordRegistrationComponent,
                            RxFieldDefinitionPickerComponent,
                            FlowApproversSelectorComponent,
                            ApprovalConfigurationEditorComponent
                        ],
                        imports: [
                            i1$2.AdaptAlertModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptHighlightModule,
                            i1$2.AdaptRxSelectModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptTabsModule,
                            i4.AdminSettingsModule,
                            i8.CommonModule,
                            i4.ExpressionFormControlModule,
                            i7.RecordGridModule,
                            i1$1.RxBusyIndicatorModule,
                            i4.RxDefinitionPickerModule,
                            i4$1.TranslateModule,
                            i1.ReactiveFormsModule,
                            i1$2.AdaptRxLabelModule,
                            i1.FormsModule,
                            i1$2.AdaptDropdownModule,
                            i1$2.AdaptRxSearchModule,
                            i1$2.AdaptTreeModule,
                            i2.RxDefinitionModule,
                            i1$2.AdaptRxCounterModule,
                            i1$2.AdaptRxTextareaModule,
                            i1$2.AdaptPopoverModule,
                            i1$2.AdaptTooltipModule,
                            i9.DragDropModule,
                            i1$2.AdaptAccordionModule,
                            i1$2.AdaptRxRadiobuttonModule,
                            i1$2.AdaptBusyModule,
                            i4.RxSelectWithPaginationModule,
                            i1$2.AdaptRxCheckboxModule,
                            i1$2.AdaptRxValidatorsModule,
                            i1$2.AdaptEmptyStateModule
                        ],
                        entryComponents: [ApprovalConfigurationAdminComponent, FlowApproversSelectorComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RX_APPROVAL_NOTIFICATIONS = {
        approvalNotificationForm: {
            name: 'AP: Approval Notification',
            fields: {
                status: i3.RX_RECORD_DEFINITION.coreFieldIds.status,
                notificationName: i3.RX_RECORD_DEFINITION.coreFieldIds.description,
                sendToOther: 12300,
                method: 12301,
                sendTo: 12302,
                notificationMessage: 12303,
                subject: 12305,
                notifyOn: 12307,
                additionalConditions: 12308,
                useTemplate: 14053,
                applicationName: 14861,
                globalNotification: 14862,
                applicationBundleId: 61001
            }
        },
        apProcessDefinitionForm: {
            name: 'AP:Process Definition',
            fields: {
                processName: 10000,
                application: 10050
            }
        },
        approvalFlowConfiguration: {
            name: 'com.bmc.arsys.rx.approval:ApprovalFlowConfiguration',
            fields: {
                flowGroup: 10007,
                flowName: 10008,
                recordDefinition: 10000,
                arApprovalProcessDefinitionGuid: 57060
            }
        },
        arSystemEmailMailboxConfiguration: {
            name: 'AR System Email Mailbox Configuration',
            fields: {
                mailboxFunction: 18049
            }
        },
        arSystemAdministrationTextTemplate: {
            name: 'AR System Administration: TextTemplate',
            fields: {
                id: i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                name: 41202,
                applicationBundleId: 61001
            }
        }
    };

    var RxApprovalNotificationExpressionConfigurator = /** @class */ (function (_super) {
        __extends(RxApprovalNotificationExpressionConfigurator, _super);
        function RxApprovalNotificationExpressionConfigurator(injector) {
            var _this = _super.call(this) || this;
            _this.injector = injector;
            _this.translateService = _this.injector.get(i4$1.TranslateService);
            _this.rxRecordDefinitionCacheService = _this.injector.get(i3.RxRecordDefinitionCacheService);
            _this.commonDataDictionary$ = rxjs.of([
                {
                    label: _this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),
                    children: []
                }
            ]);
            return _this;
        }
        RxApprovalNotificationExpressionConfigurator.prototype.approvalNotificationExpressionDataDictionary = function (recordDefinitionName, isSingleQuoteTextExpression) {
            var _this = this;
            if (recordDefinitionName) {
                return this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName).pipe(operators.map(function (recordDefinition) {
                    return [
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.client.approval.expression-editor.data-dictionary.values.record-definition.title'),
                            children: recordDefinition.fieldDefinitions
                                .filter(function (fieldDefinition) {
                                var _a;
                                return fieldDefinition.resourceType !== i3.RX_RECORD_DEFINITION.dataTypes.attachment.resourceType &&
                                    ((_a = fieldDefinition.fieldMapping) === null || _a === void 0 ? void 0 : _a.source) === 'PRIMARY_RECORD_DEFINITION' &&
                                    !lodash.includes([
                                        i3.RX_RECORD_DEFINITION.coreFieldIds.displayId,
                                        i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                                        RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.applicationBundleId
                                    ], fieldDefinition.id);
                            })
                                .map(function (fieldDefinition) { return ({
                                label: fieldDefinition.name.replace(new RegExp(' Primary$'), ''),
                                icon: 'd-icon-field_text',
                                expression: isSingleQuoteTextExpression
                                    ? "'" + fieldDefinition.name + "'"
                                    : "'${" + fieldDefinition.name + "}'",
                                resourceType: fieldDefinition.resourceType
                            }); })
                        },
                        {
                            label: 'NULL',
                            icon: 'd-icon-dollar',
                            expression: '$NULL$',
                            hidden: true
                        }
                    ];
                }));
            }
            else {
                return rxjs.of([]);
            }
        };
        return RxApprovalNotificationExpressionConfigurator;
    }(i2.RxExpressionConfigurator));

    var RX_CONNECTION_MAPPING = {
        aliasTypes: {
            dataSource: 'DataSource',
            webRequest: 'WebRequest',
            connector: 'connector'
        },
        connector: {
            recordDefinitionName: 'Connector Configurations',
            fields: {
                status: i3.RX_RECORD_DEFINITION.coreFieldIds.status,
                id: i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                target_name: 56110,
                connector_id: 56111,
                connector_name: 56112,
                connector_config_id: 56113,
                connector_config_name: 56114,
                connector_profile_id: 56115,
                connector_profile_Name: 56116
            }
        },
        webRequest: {
            recordDefinitionName: 'WebAPI Connection',
            fields: {
                authentication: 70034,
                hostname: 70030,
                id: i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                name: i3.RX_RECORD_DEFINITION.coreFieldIds.description,
                port: 70031
            }
        },
        dataSource: {
            recordDefinitionName: 'Data Source',
            fields: {
                name: i3.RX_RECORD_DEFINITION.coreFieldIds.description,
                id: i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                sourceType: 70051
            }
        },
        aliasMapping: {
            recordDefinitionName: 'Alias Mapping',
            queryExpression: "'56150' != 'email'",
            fields: {
                status: i3.RX_RECORD_DEFINITION.coreFieldIds.status,
                id: i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                aliasType: 56150,
                aliasName: 56153,
                aliasValue: 56154,
                applicationId: 56151,
                applicationName: 56152
            }
        }
    };

    var RxApprovalNotificationsService = /** @class */ (function () {
        function RxApprovalNotificationsService(httpClient) {
            this.httpClient = httpClient;
            this.approvalNotificationApi = '/api/com.bmc.arsys.rx.approval/rx/application/approval/configuration/notification';
        }
        RxApprovalNotificationsService.prototype.getApprovalNotification = function (notificationRecordInstanceId) {
            return this.httpClient.get(this.approvalNotificationApi + "/" + notificationRecordInstanceId);
        };
        RxApprovalNotificationsService.prototype.createApprovalNotification = function (approvalNotificationRecord) {
            return this.httpClient.post(this.approvalNotificationApi, approvalNotificationRecord);
        };
        RxApprovalNotificationsService.prototype.updateApprovalNotification = function (approvalNotificationRecord) {
            return this.httpClient.put(this.approvalNotificationApi + "/" + approvalNotificationRecord.notificationGuid, approvalNotificationRecord);
        };
        RxApprovalNotificationsService.prototype.deleteApprovalNotifications = function (recordInstanceIds) {
            var _this = this;
            return rxjs.forkJoin(lodash.map(recordInstanceIds, function (id) {
                return _this.httpClient.delete(_this.approvalNotificationApi + "/" + id);
            }));
        };
        return RxApprovalNotificationsService;
    }());
    RxApprovalNotificationsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxApprovalNotificationsService, deps: [{ token: i1__namespace$2.HttpClient }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxApprovalNotificationsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxApprovalNotificationsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxApprovalNotificationsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }]; } });

    var ApprovalNotificationEditorComponent = /** @class */ (function (_super) {
        __extends(ApprovalNotificationEditorComponent, _super);
        function ApprovalNotificationEditorComponent(injector, formBuilder, activeModalRef, rxRecordDefinitionCacheService, rxExpressionEditorService, rxRecordInstanceDataPageService, rxApprovalNotificationsService, translateService, rxNotificationService, rxDefinitionNameService) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.injector = injector;
            _this.formBuilder = formBuilder;
            _this.activeModalRef = activeModalRef;
            _this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            _this.rxExpressionEditorService = rxExpressionEditorService;
            _this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            _this.rxApprovalNotificationsService = rxApprovalNotificationsService;
            _this.translateService = translateService;
            _this.rxNotificationService = rxNotificationService;
            _this.rxDefinitionNameService = rxDefinitionNameService;
            _this.recordDefinitions = [];
            _this.sendToOtherOptions = [];
            _this.emailProfileOptions = [];
            _this.emailTemplateOptions = [];
            _this.isEditMode = false;
            _this.groupedData = {};
            _this.processList = [];
            _this.treeWrap = i1$2.TreeWrap.WrapAll;
            _this.selectedFlows = [];
            _this.availableFlows = [];
            _this.processDefinitionPickerOptions = {
                label: _this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.process-name-field.label'),
                definitionType: i4.RxDefinitionPickerType.Process,
                required: true,
                availableDefinitionPickerStates: {
                    definitionButtonsGroups: [i4.RxDefinitionPickerScope.All],
                    search: i4.RxDefinitionPickerScope.All
                }
            };
            _this.notificationTypeTooltip = {
                popoverMode: true,
                iconName: 'question_circle_o',
                placement: 'right',
                content: _this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-type-field.tooltip')
            };
            _this.approverSelectionTooltip = {
                popoverMode: true,
                iconName: 'question_circle_o',
                placement: 'right',
                content: _this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.send-to.options.approver-selection.tooltip')
            };
            _this.sendToOptionValue = {
                allApprovers: '0',
                selectedApprover: '1'
            };
            _this.sendToOption = [
                {
                    id: _this.sendToOptionValue.allApprovers,
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.send-to.options.all-approvers.name')
                },
                {
                    id: _this.sendToOptionValue.selectedApprover,
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.send-to.options.other.name')
                }
            ];
            _this.globalNotificationOptionValue = {
                global: 'global',
                flows: 'flows'
            };
            _this.globalNotificationOptions = [
                {
                    label: _this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-type-field.types.flow.label'),
                    value: _this.globalNotificationOptionValue.flows
                },
                {
                    label: _this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-type-field.types.global.label'),
                    value: _this.globalNotificationOptionValue.global
                }
            ];
            _this.notificationMethodOptions = [
                {
                    id: '2',
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-method.types.email.name')
                },
                {
                    id: '5',
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-method.types.process.name')
                }
            ];
            _this.notifyOnOptions = [
                {
                    id: 0,
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.new-signature.name')
                },
                {
                    id: 1,
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.approve.name')
                },
                {
                    id: 2,
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.reject.name')
                },
                {
                    id: 9,
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.reassign.name')
                },
                {
                    id: 11,
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.cancel.name')
                },
                {
                    id: 12,
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.more-info-provided.name')
                },
                {
                    id: 16,
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.hold.name')
                },
                {
                    id: 17,
                    name: _this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.more-info.name')
                }
            ];
            return _this;
        }
        ApprovalNotificationEditorComponent.prototype.handleTemplateDependentFieldSelection = function (event) {
            if (event) {
                this.approvalNotificationForm.get('message').disable();
                this.approvalNotificationForm.get('outgoingEmailProfile').enable();
            }
            else {
                this.approvalNotificationForm.get('message').enable();
                this.approvalNotificationForm.get('outgoingEmailProfile').disable();
            }
        };
        ApprovalNotificationEditorComponent.prototype.optionFormatter = function (option) {
            return option.name;
        };
        ApprovalNotificationEditorComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.approvalNotificationForm = this.createApprovalNotificationForm();
            this.approvalNotificationData = this.activeModalRef.getData();
            this.recordDefinitions = this.approvalNotificationData.recordDefinitions;
            this.emailTemplateOptions = this.approvalNotificationData.templateList;
            this.approvalNotification = this.approvalNotificationData.approvalNotification;
            this.isEditMode = Boolean(this.approvalNotification.notificationName);
            this.expressionConfigurator = new RxApprovalNotificationExpressionConfigurator(this.injector);
            this.recordDefinitionSubject = new rxjs.BehaviorSubject('');
            this.subjectExpressionConfigurator = new RxApprovalNotificationExpressionConfigurator(this.injector);
            this.subjectExpressionConfigurator.configureForProperty({
                propertyPath: 'subject',
                dataDictionary$: this.recordDefinitionSubject
                    .asObservable()
                    .pipe(operators.switchMap(function (recordDefinitionName) { return _this.subjectExpressionConfigurator.approvalNotificationExpressionDataDictionary(recordDefinitionName, false); })),
                operators: null
            });
            this.expressionConfigurator.configureForProperty({
                propertyPath: 'approvalNotification',
                dataDictionary$: this.recordDefinitionSubject
                    .asObservable()
                    .pipe(operators.switchMap(function (recordDefinitionName) { return _this.expressionConfigurator.approvalNotificationExpressionDataDictionary(recordDefinitionName, true); })),
                operators: this.expressionConfigurator.getOperatorRowsByGroup(i2.ExpressionOperatorGroup.All)
            });
            this.expressionFormControlOptions = {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-expression-field.label'),
                dataDictionary$: this.expressionConfigurator.getDataDictionary('approvalNotification'),
                operators: this.expressionConfigurator.getOperators('approvalNotification'),
                isRequired: false,
                tooltip: {
                    popoverMode: true,
                    iconName: 'question_circle_o',
                    placement: 'right',
                    content: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-expression-field.tooltip')
                }
            };
            this.subjectExpressionFormControlOptions = {
                label: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.subject-field.label'),
                dataDictionary$: this.subjectExpressionConfigurator.getDataDictionary('subject'),
                operators: this.expressionConfigurator.getOperators('subject'),
                isRequired: this.isRequiredForEmail()
            };
            this.notificationMessageExpressionOptions = {
                label: this.translateService.instant('com.bmc.arsys.rx.client.common.message.label'),
                dataDictionary$: this.subjectExpressionConfigurator.getDataDictionary('subject'),
                operators: this.expressionConfigurator.getOperators('subject'),
                isRequired: this.isRequiredForEmail()
            };
            this.approvalNotificationForm
                .get('primaryRecordName')
                .valueChanges.subscribe(function (value) { return _this.onRecordDefinitionChange(value); });
            this.approvalNotificationForm
                .get('notificationMethod')
                .valueChanges.subscribe(function (value) { return _this.onNotificationMethodChange(value); });
            if (this.isEditMode) {
                this.initializeApprovalNotificationForm();
            }
        };
        ApprovalNotificationEditorComponent.prototype.isDirty = function () {
            var _a, _b;
            return Boolean(((_a = this.approvalNotificationForm) === null || _a === void 0 ? void 0 : _a.dirty) || ((_b = this.expressionDialogApi) === null || _b === void 0 ? void 0 : _b.isDirty()));
        };
        ApprovalNotificationEditorComponent.prototype.ngOnDestroy = function () {
            this.recordDefinitionSubject.complete();
        };
        ApprovalNotificationEditorComponent.prototype.createApprovalNotificationForm = function () {
            return this.formBuilder.group({
                primaryRecordName: [[], i1.Validators.required],
                notificationName: ['', i1.Validators.required],
                notifyOn: [[], i1.Validators.required],
                additionalQualification: '',
                notificationType: this.globalNotificationOptionValue.flows,
                useTemplate: false,
                outgoingEmailProfile: [{ value: [], disabled: true }, i1.Validators.required],
                approvalTemplate: [[], i1.Validators.nullValidator],
                sendTo: ['0'],
                subject: '',
                notificationMethod: [[this.notificationMethodOptions[0]], i1.Validators.required],
                status: true,
                message: '',
                approver: [{ value: [], disabled: true }, i1.Validators.required],
                rxProcessName: '',
                check: false
            });
        };
        ApprovalNotificationEditorComponent.prototype.reset = function () {
            this.approvalNotificationForm.get('additionalQualification').setValue('');
            this.approvalNotificationForm.get('rxProcessName').setValue('');
            this.approvalNotificationForm.get('subject').setValue('');
            this.approvalNotificationForm.get('message').setValue('');
            this.approvalNotificationForm.get('sendTo').setValue('0');
            this.approvalNotificationForm.get('notifyOn').setValue([]);
            this.approvalNotificationForm.get('notificationType').setValue(this.globalNotificationOptionValue.flows);
            this.approvalNotificationForm.get('useTemplate').setValue(false);
            this.approvalNotificationForm.get('notificationMethod').setValue([this.notificationMethodOptions[0]]);
            this.approvalNotificationForm.get('outgoingEmailProfile').setValue([]);
            this.approvalNotificationForm.get('approvalTemplate').setValue([]);
            this.approvalNotificationForm.get('approver').setValue([]);
            this.approvalNotificationForm.get('status').setValue(true);
        };
        ApprovalNotificationEditorComponent.prototype.onNotificationMethodChange = function (value) {
            // check if notification method is process or email i.e '5' or '2'
            if (value[0].id === this.notificationMethodOptions[1].id) {
                this.approvalNotificationForm.get('subject').setValue('');
                this.approvalNotificationForm.get('message').setValue('');
                this.approvalNotificationForm.controls['subject'].disable();
                this.approvalNotificationForm.controls['message'].disable();
                this.approvalNotificationForm.controls['rxProcessName'].enable();
            }
            else if (value[0].id === this.notificationMethodOptions[0].id) {
                this.approvalNotificationForm.get('rxProcessName').setValue('');
                this.approvalNotificationForm.controls['rxProcessName'].disable();
                this.approvalNotificationForm.controls['subject'].enable();
                this.approvalNotificationForm.controls['message'].enable();
            }
        };
        ApprovalNotificationEditorComponent.prototype.handleSendToOptionSelection = function () {
            if (this.approvalNotificationForm.get('sendTo').value === this.sendToOptionValue.selectedApprover) {
                this.approvalNotificationForm.get('approver').enable();
            }
            else {
                this.approvalNotificationForm.get('approver').disable();
            }
        };
        ApprovalNotificationEditorComponent.prototype.initializeApprovalNotification = function (recordDefinitionName) {
            return rxjs.forkJoin([
                this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName + ' Detail Signature'),
                this.rxRecordInstanceDataPageService.post({
                    params: {
                        recorddefinition: RX_APPROVAL_NOTIFICATIONS.arSystemEmailMailboxConfiguration.name,
                        propertySelection: [i3.RX_RECORD_DEFINITION.coreFieldIds.id],
                        queryExpression: "'" + i3.RX_RECORD_DEFINITION.coreFieldIds.status + "' = \"0\" AND '" + RX_APPROVAL_NOTIFICATIONS.arSystemEmailMailboxConfiguration.fields.mailboxFunction + "' = \"1\""
                    }
                }),
                this.rxRecordInstanceDataPageService.post({
                    params: {
                        recorddefinition: RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.name,
                        propertySelection: lodash.values(RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.fields).join(),
                        queryExpression: "'" + RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.fields.recordDefinition + "' == \"" + recordDefinitionName + "\""
                    }
                })
            ]);
        };
        ApprovalNotificationEditorComponent.prototype.initializeApprovalNotificationForm = function () {
            this.approvalNotificationForm.get('notificationName').setValue(this.approvalNotification.notificationName);
            this.approvalNotificationForm.get('status').setValue(this.approvalNotification.status === '0');
            this.approvalNotificationForm.get('rxProcessName').setValue(this.approvalNotification.rxProcessName);
            this.approvalNotificationForm
                .get('subject')
                .setValue(this.convertExpressionFromServerFormat(this.approvalNotification.subject));
            this.approvalNotificationForm
                .get('message')
                .setValue(this.convertExpressionFromServerFormat(this.approvalNotification.message));
            this.approvalNotificationForm.get('sendTo').setValue(this.approvalNotification.sendTo);
            this.handleSendToOptionSelection();
            this.approvalNotificationForm
                .get('additionalQualification')
                .setValue(this.approvalNotification.additionalQualification);
            this.approvalNotificationForm
                .get('notifyOn')
                .setValue(lodash.filter(this.notifyOnOptions, { id: this.approvalNotification.notifyOn }));
            this.approvalNotificationForm
                .get('notificationType')
                .setValue(this.approvalNotification.notificationType === 1
                ? this.globalNotificationOptionValue.global
                : this.globalNotificationOptionValue.flows);
            this.approvalNotificationForm.get('useTemplate').setValue(this.approvalNotification.useTemplate === '1');
            this.handleTemplateDependentFieldSelection(true);
            this.approvalNotificationForm
                .get('notificationMethod')
                .setValue(lodash.filter(this.notificationMethodOptions, { id: this.approvalNotification.notificationMethod }));
            this.approvalNotificationForm.get('outgoingEmailProfile').setValue([
                {
                    name: this.approvalNotification.emailProfile,
                    id: this.approvalNotification.emailProfileGuid
                }
            ]);
            this.approvalNotificationForm.get('approvalTemplate').setValue([
                {
                    name: this.approvalNotification.approvalTemplateName,
                    id: this.approvalNotification.approvalTemplateGuid
                }
            ]);
            this.approvalNotificationForm.get('primaryRecordName').setValue(this.approvalNotification.primaryRecordName
                ? [
                    {
                        value: this.approvalNotification.primaryRecordName,
                        displayValue: this.rxDefinitionNameService.getDisplayName(this.approvalNotification.primaryRecordName)
                    }
                ]
                : []);
        };
        ApprovalNotificationEditorComponent.prototype.onRecordDefinitionChange = function (recordDefinitionOption) {
            var _this = this;
            var oldRecordDefinitionName = this.approvalNotificationForm.value.primaryRecordName.length
                ? this.approvalNotificationForm.value.primaryRecordName[0]
                : '';
            var newRecordDefinitionName = recordDefinitionOption[0].value;
            var threeWayRecordDefinitionName = newRecordDefinitionName + ' Detail Signature';
            if (newRecordDefinitionName !== oldRecordDefinitionName) {
                if (!this.isEditMode) {
                    this.reset();
                }
                this.recordDefinitionSubject.next(threeWayRecordDefinitionName);
                if (newRecordDefinitionName) {
                    this.initializeApprovalNotification(newRecordDefinitionName).subscribe(function (_c) {
                        var _d = __read(_c, 3), recordDefinition = _d[0], outgoingMailboxes = _d[1], recordInstances = _d[2];
                        _this.prepareApprovalFlowTree(recordInstances);
                        _this.initializeSendToFromControlOptions(recordDefinition);
                        _this.initializeEmailProfiles(outgoingMailboxes, newRecordDefinitionName);
                    });
                }
            }
        };
        ApprovalNotificationEditorComponent.prototype.onSelectionChange = function () {
            this.isTreeTouched = true;
            this.approvalNotificationForm.markAsDirty();
        };
        ApprovalNotificationEditorComponent.prototype.isGlobalNotification = function () {
            return (this.isEditMode &&
                this.approvalNotificationForm.get('notificationType').value === this.globalNotificationOptionValue.global);
        };
        ApprovalNotificationEditorComponent.prototype.prepareApprovalFlowTree = function (recordInstances) {
            var _this = this;
            this.selectedFlows = [];
            this.availableFlows = lodash.flow(function (instanceData) { return lodash.groupBy(instanceData, RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.fields.flowGroup); }, function (flowsByFlowGroup) { return lodash.map(flowsByFlowGroup, function (flows, flowGroupName) { return ({
                label: flowGroupName,
                disallowMultipleNodeSelection: _this.isGlobalNotification(),
                expanded: true,
                children: lodash.map(flows, function (approvalFlow) {
                    var leafNode = {
                        label: approvalFlow[RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.fields.flowName],
                        key: approvalFlow[RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.fields.arApprovalProcessDefinitionGuid],
                        leaf: true,
                        data: flowGroupName,
                        disallowMultipleNodeSelection: _this.isGlobalNotification()
                    };
                    if (lodash.includes(_this.approvalNotification.processList, approvalFlow[RX_APPROVAL_NOTIFICATIONS.approvalFlowConfiguration.fields.arApprovalProcessDefinitionGuid])) {
                        _this.selectedFlows.push(leafNode);
                    }
                    return leafNode;
                })
            }); }); })(recordInstances.data);
            this.updateParentNodesForSelectedFlows();
        };
        ApprovalNotificationEditorComponent.prototype.updateParentNodesForSelectedFlows = function () {
            var _this = this;
            lodash.forEach(this.selectedFlows, function (selectedFlow) {
                var availableParentNode = lodash.find(_this.availableFlows, function (availableFlow) { return availableFlow.label === selectedFlow.data; });
                if (lodash.every(availableParentNode.children, function (node) { return lodash.includes(_this.selectedFlows, node); })) {
                    _this.selectedFlows.push(availableParentNode);
                }
                else {
                    availableParentNode.partialSelected = true;
                }
            });
        };
        ApprovalNotificationEditorComponent.prototype.initializeEmailProfiles = function (outgoingMailboxes, recordDefinitionName) {
            var _this = this;
            var additionalExpression = "'" + RX_CONNECTION_MAPPING.aliasMapping.fields.aliasType + "' = \"email\"";
            var expression = '';
            if (recordDefinitionName) {
                additionalExpression += " AND ('" + RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId + "' = \"" + this.rxDefinitionNameService.getBundleId(recordDefinitionName) + "\" OR '" + RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId + "' = \"None\")";
            }
            lodash.forEach(outgoingMailboxes.data, function (outgoingMailbox) {
                if (!lodash.isEmpty(expression)) {
                    expression += ' OR ';
                }
                expression += "'" + RX_CONNECTION_MAPPING.aliasMapping.fields.aliasValue + "' = \"" + outgoingMailbox[i3.RX_RECORD_DEFINITION.coreFieldIds.id] + "\"";
            });
            expression = expression ? ' AND ((' + expression + '))' : '';
            this.rxRecordInstanceDataPageService
                .post({
                params: {
                    recorddefinition: 'Alias Mapping',
                    propertySelection: [
                        RX_CONNECTION_MAPPING.aliasMapping.fields.aliasName,
                        i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                        RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId
                    ],
                    queryExpression: additionalExpression + expression
                }
            })
                .subscribe(function (result) {
                _this.emailProfileOptions = result.data.map(function (emailData) {
                    return {
                        name: emailData[RX_CONNECTION_MAPPING.aliasMapping.fields.aliasName],
                        id: emailData[i3.RX_RECORD_DEFINITION.coreFieldIds.id]
                    };
                });
            });
        };
        ApprovalNotificationEditorComponent.prototype.initializeSendToFromControlOptions = function (recordDefinition) {
            if (recordDefinition && recordDefinition.fieldDefinitions) {
                this.sendToOtherOptions = this.filterFieldDefinitions(recordDefinition.fieldDefinitions);
                this.approvalNotificationForm
                    .get('approver')
                    .setValue(lodash.filter(this.sendToOtherOptions, { id: this.approvalNotification.sendToOthers }));
            }
        };
        ApprovalNotificationEditorComponent.prototype.filterFieldDefinitions = function (fieldDefinitions) {
            return fieldDefinitions
                .filter(function (fieldDefinition) {
                var _a;
                return fieldDefinition.resourceType !== i3.RX_RECORD_DEFINITION.dataTypes.attachment.resourceType &&
                    ((_a = fieldDefinition.fieldMapping) === null || _a === void 0 ? void 0 : _a.source) === 'PRIMARY_RECORD_DEFINITION' &&
                    !lodash.includes([
                        i3.RX_RECORD_DEFINITION.coreFieldIds.displayId,
                        i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                        RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.applicationBundleId
                    ], fieldDefinition.id);
            })
                .map(function (fieldDefinition) { return ({
                name: fieldDefinition.name.replace(/ Primary$/, ''),
                id: "'${" + fieldDefinition.name + "}'"
            }); });
        };
        ApprovalNotificationEditorComponent.prototype.buildExpression = function (propertyName) {
            this.selectApprovalNotificationExpression(propertyName);
        };
        ApprovalNotificationEditorComponent.prototype.selectApprovalNotificationExpression = function (propertyName) {
            var _this = this;
            var fieldLabel = '';
            if (propertyName === 'additionalQualification') {
                fieldLabel = this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-expression-field.label');
            }
            else if (propertyName === 'subject') {
                fieldLabel = this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.subject-field.label');
            }
            else if (propertyName === 'message') {
                fieldLabel = this.translateService.instant('com.bmc.arsys.rx.client.common.message.label');
            }
            var expressionEditorConfig = {
                property: {
                    path: propertyName === 'additionalQualification' ? 'approvalNotification' : 'subject',
                    value: this.approvalNotificationForm.get(propertyName).value,
                    label: fieldLabel
                },
                expressionConfigurator: propertyName === 'additionalQualification' ? this.expressionConfigurator : this.subjectExpressionConfigurator,
                legend: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),
                        icon: 'd-icon-dollar'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.field.label'),
                        icon: 'd-icon-field_text'
                    }
                ]
            };
            this.rxExpressionEditorService
                .openEditor(expressionEditorConfig, function (dialogApi) { return (_this.expressionDialogApi = dialogApi); })
                .subscribe(function (expression) {
                _this.expressionDialogApi = null;
                _this.approvalNotificationForm.get(propertyName).setValue(expression.value);
                _this.approvalNotificationForm.get(propertyName).markAsDirty();
            });
        };
        ApprovalNotificationEditorComponent.prototype.transformFormControlData = function () {
            var _a, _b;
            var approvalNotificationRecord = lodash.cloneDeep(this.approvalNotificationForm.value);
            approvalNotificationRecord.primaryRecordName = approvalNotificationRecord.primaryRecordName[0].value;
            approvalNotificationRecord.notifyOn = approvalNotificationRecord.notifyOn.length
                ? approvalNotificationRecord.notifyOn[0].id
                : '';
            if (approvalNotificationRecord.notificationType === this.globalNotificationOptionValue.flows) {
                approvalNotificationRecord.notificationType = 0;
                approvalNotificationRecord.processList = this.selectedFlows
                    .filter(function (approvalFlow) { return approvalFlow.leaf; })
                    .map(function (approvalFlow) { return approvalFlow.key; });
            }
            else {
                approvalNotificationRecord.notificationType = 1;
            }
            if ((_a = approvalNotificationRecord === null || approvalNotificationRecord === void 0 ? void 0 : approvalNotificationRecord.outgoingEmailProfile) === null || _a === void 0 ? void 0 : _a.length) {
                approvalNotificationRecord.emailProfile = approvalNotificationRecord.outgoingEmailProfile[0].name;
                approvalNotificationRecord.emailProfileGuid = approvalNotificationRecord.outgoingEmailProfile[0].id;
            }
            delete approvalNotificationRecord.outgoingEmailProfile;
            if (approvalNotificationRecord.approvalTemplate.length) {
                approvalNotificationRecord.approvalTemplateName = approvalNotificationRecord.approvalTemplate.name;
                approvalNotificationRecord.approvalTemplateGuid = approvalNotificationRecord.approvalTemplate.id;
            }
            delete approvalNotificationRecord.approvalTemplate;
            approvalNotificationRecord.sendToOthers = ((_b = approvalNotificationRecord.approver) === null || _b === void 0 ? void 0 : _b.length)
                ? approvalNotificationRecord.approver[0].id
                : '';
            approvalNotificationRecord.notificationMethod = approvalNotificationRecord.notificationMethod.length
                ? approvalNotificationRecord.notificationMethod[0].id
                : '';
            if (approvalNotificationRecord.notificationMethod === this.notificationMethodOptions[1].id) {
                approvalNotificationRecord.subject = approvalNotificationRecord.notificationName;
                approvalNotificationRecord.message = approvalNotificationRecord.notificationName;
            }
            else if (approvalNotificationRecord.useTemplate) {
                approvalNotificationRecord.message = approvalNotificationRecord.notificationName;
            }
            approvalNotificationRecord.useTemplate = approvalNotificationRecord.useTemplate ? '1' : '0';
            approvalNotificationRecord.status = approvalNotificationRecord.status ? '0' : '1';
            approvalNotificationRecord.subject = this.convertExpressionToServerFormat(approvalNotificationRecord.subject);
            approvalNotificationRecord.message = this.convertExpressionToServerFormat(approvalNotificationRecord.message);
            delete approvalNotificationRecord.approver;
            delete approvalNotificationRecord.check;
            if (this.isEditMode) {
                approvalNotificationRecord.notificationGuid = this.approvalNotification.notificationGuid;
            }
            return approvalNotificationRecord;
        };
        ApprovalNotificationEditorComponent.prototype.save = function () {
            var _this = this;
            this.approvalNotificationForm.markAsPristine();
            var approvalNotificationRecord = this.transformFormControlData();
            this.rxApprovalNotificationsService.createApprovalNotification(approvalNotificationRecord).subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-saved.message'));
                _this.activeModalRef.close(approvalNotificationRecord);
            });
        };
        ApprovalNotificationEditorComponent.prototype.update = function () {
            var _this = this;
            this.approvalNotificationForm.markAsPristine();
            var approvalNotificationRecord = this.transformFormControlData();
            this.rxApprovalNotificationsService.updateApprovalNotification(approvalNotificationRecord).subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-updated.message'));
                _this.activeModalRef.close(approvalNotificationRecord);
            });
        };
        ApprovalNotificationEditorComponent.prototype.closeModal = function () {
            this.activeModalRef.dismiss(i1$2.DismissReasons.CLOSE_BTN);
        };
        ApprovalNotificationEditorComponent.prototype.shouldUseTemplate = function () {
            var _a;
            return ((_a = this.approvalNotificationForm.get('notifyOn').value[0]) === null || _a === void 0 ? void 0 : _a.id) === 0;
        };
        ApprovalNotificationEditorComponent.prototype.showProcessDefinitionPicker = function () {
            var _a;
            return ((_a = this.approvalNotificationForm.get('notificationMethod').value[0]) === null || _a === void 0 ? void 0 : _a.id) === '5';
        };
        ApprovalNotificationEditorComponent.prototype.isRequiredForEmail = function () {
            var _a;
            return ((_a = this.approvalNotificationForm.get('notificationMethod').value[0]) === null || _a === void 0 ? void 0 : _a.id) === '2';
        };
        ApprovalNotificationEditorComponent.prototype.onNotifyChange = function (event) {
            if (event.options[0].id !== 0) {
                this.approvalNotificationForm.get('useTemplate').setValue(false);
            }
        };
        ApprovalNotificationEditorComponent.prototype.isNotificationOptionInvalid = function () {
            return this.approvalNotificationForm.get('notificationType').value === this.globalNotificationOptionValue.flows
                ? !this.selectedFlows.length
                : false;
        };
        ApprovalNotificationEditorComponent.prototype.definitionOptionFormatter = function (option) {
            return option.displayValue;
        };
        // Convert expression received from server to format supported by expression editor,
        // e.g. $Assignee Primary$ -> '${Assignee Primary}'
        ApprovalNotificationEditorComponent.prototype.convertExpressionFromServerFormat = function (expression) {
            var fieldTokenServerFormatRegExp = new RegExp('(\\$' + i3.RX_RECORD_DEFINITION.validDefinitionNameRegExpString + '\\$)', 'g');
            return (expression &&
                expression.replace(fieldTokenServerFormatRegExp, function (match) {
                    var expressionEntry = match.replace(/\$/g, '');
                    return expressionEntry ? "'${" + expressionEntry + "}'" : match;
                }));
        };
        // Convert expression to format expected by the server,
        // e.g. '${Assignee Primary}' -> $Assignee Primary$
        ApprovalNotificationEditorComponent.prototype.convertExpressionToServerFormat = function (expression) {
            var fieldTokenExpressionEditorFormatRegExp = new RegExp("('\\${" + i3.RX_RECORD_DEFINITION.validDefinitionNameRegExpString + "}')", 'g');
            return (expression &&
                expression.replace(fieldTokenExpressionEditorFormatRegExp, function (match) {
                    return '$' + match.replace(/['${}]/g, '') + '$';
                }));
        };
        return ApprovalNotificationEditorComponent;
    }(i1$1.RxModalClass));
    ApprovalNotificationEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApprovalNotificationEditorComponent, deps: [{ token: i0__namespace.Injector }, { token: i1__namespace$3.FormBuilder }, { token: i1__namespace$1.ActiveModalRef }, { token: i3__namespace$2.RxRecordDefinitionCacheService }, { token: i4__namespace$1.RxExpressionEditorService }, { token: i3__namespace$2.RxRecordInstanceDataPageService }, { token: RxApprovalNotificationsService }, { token: i4__namespace.TranslateService }, { token: i2__namespace.RxNotificationService }, { token: i2__namespace.RxDefinitionNameService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ApprovalNotificationEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ApprovalNotificationEditorComponent, selector: "rx-approval-notification-editor", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"modal-body\">\n  <form [formGroup]=\"approvalNotificationForm\">\n    <div class=\"row\">\n      <div class=\"col-12 col-md-6\">\n        <adapt-rx-select\n          class=\"d-block form-group\"\n          formControlName=\"primaryRecordName\"\n          [options]=\"recordDefinitions\"\n          rx-id=\"record-definition-name\"\n          [disabled]=\"isEditMode\"\n          label=\"{{ 'com.bmc.arsys.rx.client.approval.record-definition-field.label' | translate }}\"\n          [optionFormatter]=\"definitionOptionFormatter\"\n        >\n        </adapt-rx-select>\n      </div>\n\n      <div class=\"col-12 col-md-6\">\n        <adapt-rx-textfield\n          class=\"d-block form-group\"\n          rx-id=\"notification-name\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.approval.notification-configuration.notification-name-field.label' | translate\n          }}\"\n          formControlName=\"notificationName\"\n        ></adapt-rx-textfield>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-12 col-md-6 d-flex flex-column\">\n        <adapt-rx-select\n          class=\"d-block form-group\"\n          formControlName=\"notifyOn\"\n          [options]=\"notifyOnOptions\"\n          [optionFormatter]=\"optionFormatter\"\n          rx-id=\"notify-on\"\n          (onSelectionChange)=\"onNotifyChange($event)\"\n          label=\"{{ 'com.bmc.arsys.rx.client.approval.notification-configuration.notify-on-field.label' | translate }}\"\n        >\n        </adapt-rx-select>\n\n        <rx-expression-form-control\n          class=\"d-block form-group\"\n          [options]=\"expressionFormControlOptions\"\n          formControlName=\"additionalQualification\"\n          rx-id=\"additional-qualification\"\n          (events)=\"buildExpression('additionalQualification')\"\n          required=\"false\"\n        ></rx-expression-form-control>\n\n        <adapt-rx-radiobutton-group\n          class=\"d-block form-group\"\n          formControlName=\"notificationType\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.approval.notification-configuration.notification-type-field.label' | translate\n          }}\"\n          [tooltip]=\"notificationTypeTooltip\"\n          rx-id=\"notification-type\"\n        >\n          <adapt-rx-radiobutton\n            *ngFor=\"let option of globalNotificationOptions; let index = index\"\n            [label]=\"option.label\"\n            [value]=\"option.value\"\n            [disabled]=\"isEditMode\"\n            class=\"radio-inline m-0\"\n            [ngClass]=\"{ 'mr-3': index === 0 }\"\n          ></adapt-rx-radiobutton>\n        </adapt-rx-radiobutton-group>\n\n        <div\n          class=\"d-flex flex-column h-100\"\n          *ngIf=\"approvalNotificationForm.get('notificationType').value === globalNotificationOptionValue.flows\"\n        >\n          <adapt-rx-control-label\n            label=\"{{\n              'com.bmc.arsys.rx.client.approval.notification-configuration.notification-type-field.types.flow.sub-label'\n                | translate\n            }}\"\n            [showRequiredLabel]=\"true\"\n          >\n          </adapt-rx-control-label>\n\n          <div class=\"card flex-fill\" [ngClass]=\"{ 'border-danger': isTreeTouched && isNotificationOptionInvalid() }\">\n            <div class=\"card-block\">\n              <adapt-empty-state\n                *ngIf=\"!availableFlows.length\"\n                [type]=\"'grid'\"\n                label=\"{{\n                  'com.bmc.arsys.rx.client.approval.notification-configuration.no-flows-available.message' | translate\n                }}\"\n              >\n              </adapt-empty-state>\n\n              <adapt-tree\n                [value]=\"availableFlows\"\n                selectionMode=\"checkbox\"\n                [(selection)]=\"selectedFlows\"\n                *ngIf=\"availableFlows.length\"\n                (selectionChange)=\"onSelectionChange()\"\n                [wrap]=\"treeWrap\"\n              >\n              </adapt-tree>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"col-md-6\">\n        <adapt-rx-radiobutton-group\n          class=\"d-block form-group\"\n          formControlName=\"sendTo\"\n          label=\"{{ 'com.bmc.arsys.rx.client.approval.notification-configuration.send-to-field.label' | translate }}\"\n        >\n          <adapt-rx-radiobutton\n            *ngFor=\"let option of sendToOption; let index = index\"\n            [value]=\"option.id\"\n            [label]=\"option.name\"\n            class=\"radio-inline m-0\"\n            [ngClass]=\"{ 'mr-3': index === 0 }\"\n            rx-id=\"send-to-option\"\n            (checkedChange)=\"handleSendToOptionSelection()\"\n          ></adapt-rx-radiobutton>\n        </adapt-rx-radiobutton-group>\n\n        <adapt-rx-select\n          class=\"d-block form-group\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.approval.notification-configuration.send-to.options.approver-selection' | translate\n          }}\"\n          *ngIf=\"approvalNotificationForm.get('sendTo').value === '1'\"\n          formControlName=\"approver\"\n          [options]=\"sendToOtherOptions\"\n          [optionFormatter]=\"optionFormatter\"\n          [tooltip]=\"approverSelectionTooltip\"\n          rx-id=\"approver\"\n        >\n        </adapt-rx-select>\n\n        <adapt-rx-select\n          class=\"d-block form-group\"\n          formControlName=\"notificationMethod\"\n          [options]=\"notificationMethodOptions\"\n          [optionFormatter]=\"optionFormatter\"\n          rx-id=\"notification-method\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.approval.notification-configuration.notification-method-field.label' | translate\n          }}\"\n        >\n        </adapt-rx-select>\n\n        <adapt-rx-checkbox\n          *ngIf=\"shouldUseTemplate()\"\n          class=\"d-block form-group\"\n          formControlName=\"useTemplate\"\n          rx-id=\"use-template\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.approval.notification-configuration.email-based-approval-field.label' | translate\n          }}\"\n          (ngModelChange)=\"handleTemplateDependentFieldSelection($event)\"\n        ></adapt-rx-checkbox>\n\n        <div *ngIf=\"approvalNotificationForm.get('useTemplate').value\">\n          <adapt-rx-select\n            class=\"d-block form-group\"\n            formControlName=\"outgoingEmailProfile\"\n            [options]=\"emailProfileOptions\"\n            [optionFormatter]=\"optionFormatter\"\n            rx-id=\"outgoing-email-profile\"\n            label=\"{{\n              'com.bmc.arsys.rx.client.approval.notification-configuration.email-outgoing-profile-field.label'\n                | translate\n            }}\"\n          >\n          </adapt-rx-select>\n\n          <adapt-rx-select\n            class=\"d-block form-group\"\n            formControlName=\"approvalTemplate\"\n            [options]=\"emailTemplateOptions\"\n            [optionFormatter]=\"optionFormatter\"\n            rx-id=\"approval-template\"\n            label=\"{{ 'com.bmc.arsys.rx.client.approval.notification-configuration.template-field.label' | translate }}\"\n          >\n          </adapt-rx-select>\n        </div>\n\n        <rx-expression-form-control\n          class=\"d-block form-group\"\n          *ngIf=\"approvalNotificationForm.get('notificationMethod').value[0]['id'] === '2'\"\n          [options]=\"subjectExpressionFormControlOptions\"\n          formControlName=\"subject\"\n          rx-id=\"subject\"\n          (events)=\"buildExpression('subject')\"\n          required=\"true\"\n        ></rx-expression-form-control>\n\n        <rx-expression-form-control\n          class=\"d-block form-group\"\n          *ngIf=\"\n            approvalNotificationForm.get('notificationMethod').value[0]['id'] === '2' &&\n            !approvalNotificationForm.get('useTemplate').value\n          \"\n          [options]=\"notificationMessageExpressionOptions\"\n          formControlName=\"message\"\n          rx-id=\"message\"\n          (events)=\"buildExpression('message')\"\n          required=\"true\"\n        ></rx-expression-form-control>\n\n        <rx-definition-picker\n          class=\"d-block form-group\"\n          *ngIf=\"showProcessDefinitionPicker()\"\n          [options]=\"processDefinitionPickerOptions\"\n          formControlName=\"rxProcessName\"\n          rx-id=\"definition-field\"\n          required=\"true\"\n        >\n        </rx-definition-picker>\n\n        <adapt-rx-switch\n          formControlName=\"status\"\n          rx-id=\"status\"\n          label=\"{{ 'com.bmc.arsys.rx.client.approval.notification-configuration.enabled-field.label' | translate }}\"\n          [isLabelBefore]=\"false\"\n        ></adapt-rx-switch>\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    *ngIf=\"!isEditMode\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    class=\"mr-2\"\n    (click)=\"save()\"\n    [disabled]=\"approvalNotificationForm.pristine || approvalNotificationForm.invalid || isNotificationOptionInvalid()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button\n    *ngIf=\"isEditMode\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    class=\"mr-2\"\n    rx-id=\"save-button\"\n    (click)=\"update()\"\n    [disabled]=\"approvalNotificationForm.pristine || approvalNotificationForm.invalid || isNotificationOptionInvalid()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.approval.update.button.label' | translate }}\n  </button>\n\n  <button adapt-button btn-type=\"secondary\" class=\"mr-2\" type=\"button\" rx-id=\"cancel-button\" (click)=\"closeModal()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.approval-notification-flow{overflow-y:auto;max-height:320px}adapt-rx-textfield,adapt-rx-select,rx-definition-picker{max-width:400px}:host::ng-deep rx-expression-form-control button{height:2.38rem}:host::ng-deep adapt-rx-radiobutton .radio{margin:8px 0}.card{min-height:152px;max-height:285px;overflow:auto}\n"], components: [{ type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i4__namespace$1.ExpressionFormControlComponent, selector: "rx-expression-form-control", inputs: ["options", "isDisabled", "propertyPath"], outputs: ["events"] }, { type: i1__namespace$1.AdaptRxRadiobuttonGroupComponent, selector: "adapt-rx-radiobutton-group", inputs: ["formControlName"] }, { type: i1__namespace$1.AdaptRxRadiobuttonComponent, selector: "adapt-rx-radiobutton", inputs: ["name", "label", "id", "value", "checked", "disabled", "ariaLabel", "ariaLabeledBy", "ariaDescribedBy", "testID", "tabIndex"], outputs: ["onFocus", "onBlur", "checkedChange"] }, { type: i1__namespace$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace$1.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }, { type: i1__namespace$1.AdaptTreeComponent, selector: "adapt-tree", inputs: ["value", "filter", "texts", "filterBtnClearText", "filterPlaceholder", "testID", "lazy", "lazyLoading", "trim", "wrap", "selectAllButton", "deselectAllButton", "treeScrollHeight", "adaptRadarDisableEventSending", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "validateDrop"], outputs: ["onNodeDrop", "lazyLoad"] }, { type: i1__namespace$1.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }, { type: i4__namespace$1.RxDefinitionPickerComponent, selector: "rx-definition-picker", inputs: ["options", "isDisabled"] }, { type: i1__namespace$1.AdaptRxSwitchComponent, selector: "adapt-rx-switch", inputs: ["value", "size", "isLabelBefore", "checked"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApprovalNotificationEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-approval-notification-editor',
                        templateUrl: './approval-notification-editor.component.html',
                        styleUrls: ['./approval-notification-editor.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }, { type: i1__namespace$3.FormBuilder }, { type: i1__namespace$1.ActiveModalRef }, { type: i3__namespace$2.RxRecordDefinitionCacheService }, { type: i4__namespace$1.RxExpressionEditorService }, { type: i3__namespace$2.RxRecordInstanceDataPageService }, { type: RxApprovalNotificationsService }, { type: i4__namespace.TranslateService }, { type: i2__namespace.RxNotificationService }, { type: i2__namespace.RxDefinitionNameService }]; } });

    var approvalNotificationDataPageQuery = 'com.bmc.arsys.rx.approval.application.datapage.ApprovalNotificationDataPageQuery';
    var RxApprovalNotificationsDataPageService = /** @class */ (function (_super) {
        __extends(RxApprovalNotificationsDataPageService, _super);
        function RxApprovalNotificationsDataPageService(injector) {
            return _super.call(this, injector, approvalNotificationDataPageQuery) || this;
        }
        return RxApprovalNotificationsDataPageService;
    }(i2.DataPage));
    RxApprovalNotificationsDataPageService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxApprovalNotificationsDataPageService, deps: [{ token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxApprovalNotificationsDataPageService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxApprovalNotificationsDataPageService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxApprovalNotificationsDataPageService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }]; } });

    var ApprovalNotificationsComponent = /** @class */ (function (_super) {
        __extends(ApprovalNotificationsComponent, _super);
        function ApprovalNotificationsComponent(rxModalService, adaptModalService, translateService, rxGlobalCacheService, rxDefinitionNameService, rxApprovalNotificationsDataPageService, rxApprovalNotificationsService, rxNotificationService, rxRecordInstanceDataPageService) {
            var _this = _super.call(this) || this;
            _this.rxModalService = rxModalService;
            _this.adaptModalService = adaptModalService;
            _this.translateService = translateService;
            _this.rxGlobalCacheService = rxGlobalCacheService;
            _this.rxDefinitionNameService = rxDefinitionNameService;
            _this.rxApprovalNotificationsDataPageService = rxApprovalNotificationsDataPageService;
            _this.rxApprovalNotificationsService = rxApprovalNotificationsService;
            _this.rxNotificationService = rxNotificationService;
            _this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            return _this;
        }
        ApprovalNotificationsComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.editMode = false;
            this.gridConfig = rxjs.of({
                actionButtons: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                        style: 'tertiary',
                        icon: 'trash',
                        actions: [
                            {
                                name: function () {
                                    _this.deleteNotification();
                                }
                            }
                        ]
                    }
                ],
                getData: function (queryParams) { return _this.getData(queryParams); },
                getRecordDefinition: function () { return rxjs.of(_this.getRecordDefinition()); },
                columns: this.getColumns(),
                styles: 'flex-fill',
                enableRowSelection: i7.RowSelectionMode.Multiple
            });
        };
        ApprovalNotificationsComponent.prototype.createApprovalNotification = function () {
            this.editMode = false;
            this.initializeApprovalNotificationForm({
                notificationName: '',
                primaryRecordName: ''
            });
        };
        ApprovalNotificationsComponent.prototype.initializeApprovalNotificationForm = function (approvalNotification) {
            var _this = this;
            rxjs.forkJoin([
                this.rxRecordInstanceDataPageService.post({
                    params: {
                        recorddefinition: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.name,
                        propertySelection: RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formName,
                        queryExpression: "('" + RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field7 + "'!=$NULL$ OR '" + RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.field7 + "'!=\"\")"
                    }
                }),
                this.rxRecordInstanceDataPageService.post({
                    params: {
                        recorddefinition: 'AR System Administration: TextTemplate',
                        propertySelection: lodash.values(RX_APPROVAL_NOTIFICATIONS.arSystemAdministrationTextTemplate.fields).join()
                    }
                }),
                this.rxGlobalCacheService.getBundleDescriptors()
            ]).subscribe(function (_a) {
                var _b = __read(_a, 3), apFormInstances = _b[0], emailTemplateInstances = _b[1], bundleDescriptors = _b[2];
                var globalLabel = _this.translateService.instant('com.bmc.arsys.rx.client.common.global-items.label');
                var recordDefinitions = lodash.flow(function (instanceData) { return lodash.map(instanceData, function (recordInstance) {
                    var bundleDescriptor = lodash.find(bundleDescriptors, {
                        id: _this.rxDefinitionNameService.getBundleId(recordInstance[RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formName])
                    });
                    return {
                        value: recordInstance[RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formName],
                        displayValue: _this.rxDefinitionNameService.getDisplayName(recordInstance[RX_APPROVAL_CONFIGURATION.selfApproval.apForm.fields.formName]),
                        applicationName: (bundleDescriptor === null || bundleDescriptor === void 0 ? void 0 : bundleDescriptor.friendlyName) || (bundleDescriptor === null || bundleDescriptor === void 0 ? void 0 : bundleDescriptor.id) || globalLabel
                    };
                }); }, function (definitions) { return lodash.groupBy(definitions, 'applicationName'); }, function (optionsByApplicationName) { return lodash.map(optionsByApplicationName, function (options, applicationName) { return ({
                    name: applicationName,
                    children: lodash.map(options, function (option) {
                        return {
                            value: option.value,
                            displayValue: option.displayValue
                        };
                    })
                }); }); })(apFormInstances.data);
                var templateList = [];
                if (emailTemplateInstances.data.length) {
                    var nonApprovalTemplates = lodash.filter(emailTemplateInstances.data, function (template) {
                        return (template[RX_APPROVAL_NOTIFICATIONS.arSystemAdministrationTextTemplate.fields.applicationBundleId] !==
                            i2.RX_APPLICATION.approvalBundleId);
                    });
                    lodash.forEach(nonApprovalTemplates, function (template) {
                        templateList.push({
                            name: template[RX_APPROVAL_NOTIFICATIONS.arSystemAdministrationTextTemplate.fields.name],
                            guid: template[i3.RX_RECORD_DEFINITION.coreFieldIds.id]
                        });
                    });
                }
                var title = _this.editMode
                    ? _this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.edit-approval-notification.title')
                    : _this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.new-approval-notification.title');
                _this.openModal(title, {
                    approvalNotification: _this.editMode
                        ? approvalNotification
                        : {
                            notificationName: '',
                            primaryRecordName: ''
                        },
                    recordDefinitions: recordDefinitions,
                    templateList: templateList
                });
            });
        };
        ApprovalNotificationsComponent.prototype.openModal = function (title, data) {
            var _this = this;
            this.rxModalService
                .openModal({
                title: title,
                content: ApprovalNotificationEditorComponent,
                data: Object.assign({}, data)
            })
                .then(function (result) {
                if (result) {
                    _this.recordGridComponent.api.refresh().subscribe();
                    _this.editMode = false;
                }
            })
                .catch(lodash.noop);
        };
        ApprovalNotificationsComponent.prototype.deleteNotification = function () {
            var _this = this;
            this.rxModalService
                .confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.delete-selected-notification-confirmation.message')
            })
                .then(function (result) {
                if (result) {
                    var selectedApprovalNotifications = _this.recordGridComponent.api.getSelectedRows();
                    var selectedApprovalNotificationsIds = lodash.map(selectedApprovalNotifications, i3.RX_RECORD_DEFINITION.coreFieldIds.id);
                    _this.rxApprovalNotificationsService
                        .deleteApprovalNotifications(selectedApprovalNotificationsIds)
                        .subscribe(function () {
                        _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-deleted.message'));
                        _this.recordGridComponent.api.refresh().subscribe();
                    });
                }
            });
        };
        ApprovalNotificationsComponent.prototype.getData = function (queryParams) {
            var propertySelection = Object.values(RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields);
            var additionalQueryExpression = "('" + RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.applicationBundleId + "' != $NULL$)";
            var queryExpression = queryParams.queryExpression
                ? '(' +
                    additionalQueryExpression.substring(1, additionalQueryExpression.length - 1) +
                    ' AND ' +
                    queryParams.queryExpression.substring(1, queryParams.queryExpression.length - 1) +
                    ')'
                : additionalQueryExpression;
            queryParams = Object.assign(Object.assign({}, queryParams), { propertySelection: propertySelection, queryExpression: queryExpression });
            return this.rxApprovalNotificationsDataPageService.get({ params: queryParams });
        };
        ApprovalNotificationsComponent.prototype.getRecordDefinition = function () {
            return {
                fieldDefinitions: [
                    {
                        id: RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.notificationName,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.notifyOn,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.selection,
                        optionNamesById: {
                            0: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.new-signature.name'),
                            1: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.approve.name'),
                            2: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.reject.name'),
                            9: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.reassign.name'),
                            10: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.error.name'),
                            11: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.cancel.name'),
                            12: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.more-info-provided.name'),
                            16: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.hold.name'),
                            17: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.more-info.name')
                        }
                    },
                    {
                        id: RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.method,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.selection,
                        optionNamesById: {
                            2: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-method.types.email.name'),
                            5: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notification-method.types.process.name')
                        }
                    },
                    {
                        id: RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.status,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.selection,
                        optionNamesById: {
                            0: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.grid.column.status.options.active.value'),
                            1: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.grid.column.status.options.inactive.value')
                        }
                    },
                    {
                        id: RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.applicationName,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.globalNotification,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.selection,
                        optionNamesById: {
                            0: this.translateService.instant('com.bmc.arsys.rx.client.common.no.label'),
                            1: this.translateService.instant('com.bmc.arsys.rx.client.common.yes.label')
                        }
                    }
                ]
            };
        };
        ApprovalNotificationsComponent.prototype.getColumns = function () {
            var _this = this;
            return [
                {
                    index: 0,
                    fieldId: String(RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.notificationName),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.grid.column.notification-name.title'),
                    clickable: true,
                    actions: [
                        {
                            name: function (previousAction, clickedColumnRow) { return _this.editApprovalNotification(clickedColumnRow); }
                        }
                    ]
                },
                {
                    index: 1,
                    fieldId: String(RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.applicationName),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.grid.column.record-definition.title'),
                    filterable: false
                },
                {
                    index: 2,
                    fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.id),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.grid.column.id.title'),
                    visible: false
                },
                {
                    index: 3,
                    fieldId: String(RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.notifyOn),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.grid.column.notify-on.title')
                },
                {
                    index: 4,
                    fieldId: String(RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.method),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.grid.column.notification-method.title')
                },
                {
                    index: 5,
                    fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.status),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.grid.column.status.title')
                },
                {
                    index: 6,
                    fieldId: String(RX_APPROVAL_NOTIFICATIONS.approvalNotificationForm.fields.globalNotification),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.grid.column.global-notification.title')
                }
            ];
        };
        ApprovalNotificationsComponent.prototype.editApprovalNotification = function (approvalNotificationRow) {
            var _this = this;
            this.editMode = true;
            this.rxApprovalNotificationsService
                .getApprovalNotification(approvalNotificationRow[i3.RX_RECORD_DEFINITION.coreFieldIds.id])
                .subscribe(function (approvalNotification) {
                _this.initializeApprovalNotificationForm(approvalNotification);
            });
        };
        return ApprovalNotificationsComponent;
    }(i4$2.BaseViewComponent));
    ApprovalNotificationsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApprovalNotificationsComponent, deps: [{ token: i1__namespace.RxModalService }, { token: i1__namespace$1.AdaptModalService }, { token: i4__namespace.TranslateService }, { token: i2__namespace.RxGlobalCacheService }, { token: i2__namespace.RxDefinitionNameService }, { token: RxApprovalNotificationsDataPageService }, { token: RxApprovalNotificationsService }, { token: i2__namespace.RxNotificationService }, { token: i3__namespace$2.RxRecordInstanceDataPageService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ApprovalNotificationsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ApprovalNotificationsComponent, selector: "rx-admin-approval-notifications", viewQueries: [{ propertyName: "recordGridComponent", first: true, predicate: ["recordGrid"], descendants: true, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.approval.notification-configuration.title' | translate }}\">\n  <button\n    type=\"button\"\n    adapt-button\n    btn-type=\"tertiary\"\n    class=\"d-icon-plus_circle align-self-start\"\n    rx-id=\"new-button\"\n    (click)=\"createApprovalNotification()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n  </button>\n\n  <rx-record-grid rx-id=\"approval-notifications-grid\" #recordGrid [config]=\"gridConfig\"></rx-record-grid>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApprovalNotificationsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-approval-notifications',
                        templateUrl: './approval-notifications.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.RxModalService }, { type: i1__namespace$1.AdaptModalService }, { type: i4__namespace.TranslateService }, { type: i2__namespace.RxGlobalCacheService }, { type: i2__namespace.RxDefinitionNameService }, { type: RxApprovalNotificationsDataPageService }, { type: RxApprovalNotificationsService }, { type: i2__namespace.RxNotificationService }, { type: i3__namespace$2.RxRecordInstanceDataPageService }]; }, propDecorators: { recordGridComponent: [{
                    type: i0.ViewChild,
                    args: ['recordGrid', { static: true }]
                }] } });

    var ApprovalNotificationsRegistrationModule = /** @class */ (function () {
        function ApprovalNotificationsRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-approval-notifications',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(ApprovalNotificationsComponent),
                name: 'Approval notifications',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return ApprovalNotificationsRegistrationModule;
    }());
    ApprovalNotificationsRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApprovalNotificationsRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ApprovalNotificationsRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApprovalNotificationsRegistrationModule, declarations: [ApprovalNotificationsComponent, ApprovalNotificationEditorComponent], imports: [i1$2.AdaptEmptyStateModule,
            i4.AdminSettingsModule,
            i1$2.AdaptRxSelectModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptRxSwitchModule,
            i1$2.AdaptRxCheckboxModule,
            i1$2.AdaptRxRadiobuttonModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptAccordionModule,
            i8.CommonModule,
            i4.ExpressionFormControlModule,
            i7.RecordGridModule,
            i1.ReactiveFormsModule,
            i4.RxDefinitionPickerModule,
            i4$1.TranslateModule,
            i1$2.AdaptRxLabelModule,
            i1$2.AdaptTreeModule] });
    ApprovalNotificationsRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApprovalNotificationsRegistrationModule, imports: [[
                i1$2.AdaptEmptyStateModule,
                i4.AdminSettingsModule,
                i1$2.AdaptRxSelectModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptRxSwitchModule,
                i1$2.AdaptRxCheckboxModule,
                i1$2.AdaptRxRadiobuttonModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptAccordionModule,
                i8.CommonModule,
                i4.ExpressionFormControlModule,
                i7.RecordGridModule,
                i1.ReactiveFormsModule,
                i4.RxDefinitionPickerModule,
                i4$1.TranslateModule,
                i1$2.AdaptRxLabelModule,
                i1$2.AdaptTreeModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApprovalNotificationsRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ApprovalNotificationsComponent, ApprovalNotificationEditorComponent],
                        imports: [
                            i1$2.AdaptEmptyStateModule,
                            i4.AdminSettingsModule,
                            i1$2.AdaptRxSelectModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptRxSwitchModule,
                            i1$2.AdaptRxCheckboxModule,
                            i1$2.AdaptRxRadiobuttonModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptAccordionModule,
                            i8.CommonModule,
                            i4.ExpressionFormControlModule,
                            i7.RecordGridModule,
                            i1.ReactiveFormsModule,
                            i4.RxDefinitionPickerModule,
                            i4$1.TranslateModule,
                            i1$2.AdaptRxLabelModule,
                            i1$2.AdaptTreeModule
                        ],
                        entryComponents: [ApprovalNotificationsComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var BmcServiceCloudAccountAdminComponent = /** @class */ (function (_super) {
        __extends(BmcServiceCloudAccountAdminComponent, _super);
        function BmcServiceCloudAccountAdminComponent(formBuilder, rxCurrentUserService, rxNotificationService, rxSystemConfigurationService, translateService) {
            var _this = _super.call(this) || this;
            _this.formBuilder = formBuilder;
            _this.rxCurrentUserService = rxCurrentUserService;
            _this.rxNotificationService = rxNotificationService;
            _this.rxSystemConfigurationService = rxSystemConfigurationService;
            _this.translateService = translateService;
            _this.isAdministrator = _this.rxCurrentUserService.isAdministrator();
            _this.settingName = 'errorReportingServiceSaasConfiguration';
            return _this;
        }
        BmcServiceCloudAccountAdminComponent.prototype.getConfiguration = function () {
            var _this = this;
            this.busy = this.rxSystemConfigurationService.getConfiguration(this.settingName).subscribe(function (data) {
                _this.bmcServiceCloudAccountConfigForm.patchValue(JSON.parse(data.value));
            });
        };
        BmcServiceCloudAccountAdminComponent.prototype.saveConfig = function () {
            var _this = this;
            var formValue = this.bmcServiceCloudAccountConfigForm.getRawValue();
            this.rxSystemConfigurationService.setConfiguration(this.settingName, formValue).subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.bmc-service-cloud-account.save-successful.message'));
                _this.bmcServiceCloudAccountConfigForm.markAsPristine();
            });
        };
        BmcServiceCloudAccountAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.notifyPropertyChanged('api', {
                isDirty: function () { var _a; return (_a = _this.bmcServiceCloudAccountConfigForm) === null || _a === void 0 ? void 0 : _a.dirty; }
            });
            if (this.isAdministrator) {
                this.bmcServiceCloudAccountConfigForm = this.formBuilder.group({
                    clientId: '',
                    clientSecret: '',
                    dataCenterUrl: '',
                    authorizationUrl: '',
                    serviceCloudInstanceUrl: '',
                    supportCentralUrl: ''
                });
                this.getConfiguration();
            }
        };
        return BmcServiceCloudAccountAdminComponent;
    }(i4$2.BaseViewComponent));
    BmcServiceCloudAccountAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BmcServiceCloudAccountAdminComponent, deps: [{ token: i1__namespace$3.FormBuilder }, { token: i2__namespace.RxCurrentUserService }, { token: i2__namespace.RxNotificationService }, { token: i2__namespace.RxSystemConfigurationService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    BmcServiceCloudAccountAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: BmcServiceCloudAccountAdminComponent, selector: "rx-admin-bmc-service-cloud-account", usesInheritance: true, ngImport: i0__namespace, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.bmc-service-cloud-account.header.title' | translate }}\"\n  [busy]=\"busy\"\n>\n  <form [formGroup]=\"bmcServiceCloudAccountConfigForm\">\n    <adapt-rx-textfield\n      rx-id=\"client-id\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.bmc-service-cloud-account.client-id.label' | translate }}\"\n      formControlName=\"clientId\"\n      required=\"true\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      rx-id=\"client-secret\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.bmc-service-cloud-account.client-secret.label' | translate }}\"\n      formControlName=\"clientSecret\"\n      required=\"true\"\n      [isPassword]=\"true\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      rx-id=\"data-center-url\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.bmc-service-cloud-account.data-center-url.label' | translate }}\"\n      formControlName=\"dataCenterUrl\"\n      required=\"true\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      rx-id=\"authorization-url\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.bmc-service-cloud-account.authorization-url.label' | translate }}\"\n      formControlName=\"authorizationUrl\"\n      required=\"true\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      rx-id=\"service-cloud-instance-url\"\n      label=\"{{\n        'com.bmc.arsys.rx.client.admin.bmc-service-cloud-account.service-cloud-instance-url.label' | translate\n      }}\"\n      formControlName=\"serviceCloudInstanceUrl\"\n      required=\"true\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      rx-id=\"support-central-url\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.bmc-service-cloud-account.support-central-url.label' | translate }}\"\n      formControlName=\"supportCentralUrl\"\n      required=\"true\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n\n    <button\n      adapt-button\n      type=\"button\"\n      rx-id=\"save-button\"\n      btn-type=\"primary\"\n      class=\"mt-4\"\n      [disabled]=\"bmcServiceCloudAccountConfigForm.pristine || bmcServiceCloudAccountConfigForm.invalid\"\n      (click)=\"saveConfig()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </form>\n</rx-admin-settings>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield{max-width:400px}\n"], components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BmcServiceCloudAccountAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-bmc-service-cloud-account',
                        templateUrl: 'bmc-service-cloud-account.component.html',
                        styleUrls: ['./bmc-service-cloud-account.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }, { type: i2__namespace.RxCurrentUserService }, { type: i2__namespace.RxNotificationService }, { type: i2__namespace.RxSystemConfigurationService }, { type: i4__namespace.TranslateService }]; } });

    var BmcServiceCloudAccountRegistrationModule = /** @class */ (function () {
        function BmcServiceCloudAccountRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-bmc-service-cloud-account',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(BmcServiceCloudAccountAdminComponent),
                name: 'BMC Service Cloud account',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return BmcServiceCloudAccountRegistrationModule;
    }());
    BmcServiceCloudAccountRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BmcServiceCloudAccountRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    BmcServiceCloudAccountRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BmcServiceCloudAccountRegistrationModule, declarations: [BmcServiceCloudAccountAdminComponent], imports: [i1$2.AdaptAccordionModule,
            i1$2.AdaptAlertModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptIconModule,
            i1$2.AdaptRxTextfieldModule,
            i4.AdminSettingsModule,
            i8.CommonModule,
            i1.ReactiveFormsModule,
            i4$1.TranslateModule] });
    BmcServiceCloudAccountRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BmcServiceCloudAccountRegistrationModule, imports: [[
                i1$2.AdaptAccordionModule,
                i1$2.AdaptAlertModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptIconModule,
                i1$2.AdaptRxTextfieldModule,
                i4.AdminSettingsModule,
                i8.CommonModule,
                i1.ReactiveFormsModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: BmcServiceCloudAccountRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$2.AdaptAccordionModule,
                            i1$2.AdaptAlertModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptIconModule,
                            i1$2.AdaptRxTextfieldModule,
                            i4.AdminSettingsModule,
                            i8.CommonModule,
                            i1.ReactiveFormsModule,
                            i4$1.TranslateModule
                        ],
                        declarations: [BmcServiceCloudAccountAdminComponent],
                        entryComponents: [BmcServiceCloudAccountAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var ChatbotsAdminComponent = /** @class */ (function (_super) {
        __extends(ChatbotsAdminComponent, _super);
        function ChatbotsAdminComponent(rxAdminSettingsService, rxChatbotDefinitionService, rxCurrentUserService, rxModalService, rxNotificationService, translateService) {
            var _this = _super.call(this) || this;
            _this.rxAdminSettingsService = rxAdminSettingsService;
            _this.rxChatbotDefinitionService = rxChatbotDefinitionService;
            _this.rxCurrentUserService = rxCurrentUserService;
            _this.rxModalService = rxModalService;
            _this.rxNotificationService = rxNotificationService;
            _this.translateService = translateService;
            _this.sections = lodash.cloneDeep(i2$1.RX_CHATBOTS.sections);
            _this.isAdministrator = _this.rxCurrentUserService.isAdministrator();
            return _this;
        }
        ChatbotsAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.notifyPropertyChanged('api', {
                isDirty: function () { return _this.displayChatbotsDropdownSwitch.dirty; }
            });
            if (this.isAdministrator) {
                this.busy = this.rxAdminSettingsService
                    .getComponentSettings(i2$1.RX_CHATBOTS.componentSettings.componentName, {
                    'default-bundle-scope': i2.RX_APPLICATION.settingsBundleId
                })
                    .subscribe(function (componentSettings) {
                    _this.componentSettings = componentSettings.values;
                    var componentSetting = lodash.find(_this.componentSettings, {
                        settingName: i2$1.RX_CHATBOTS.componentSettings.settingNames.displayChatbotsDropdown
                    });
                    _this.sections.globalChatbotSettings.displayChatbotsDropdown = JSON.parse(componentSetting.settingValue);
                });
            }
            this.recordGridConfig = rxjs.of({
                enableFiltering: true,
                recordDefinitionName: i2$1.RX_CHATBOTS.chatbotSettings.recordDefinitionName,
                enableRowSelection: i7.RowSelectionMode.Multiple,
                columns: [
                    {
                        index: 0,
                        fieldId: String(i2$1.RX_CHATBOTS.chatbotSettings.recordFieldIds.name),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.chatbot.title'),
                        cellTemplate: this.nameColumnTemplate
                    },
                    {
                        index: 1,
                        fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.description),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.description.title')
                    },
                    {
                        index: 2,
                        fieldId: String(i2$1.RX_CHATBOTS.chatbotSettings.recordFieldIds.bundleId),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.application-library-id.title')
                    },
                    {
                        index: 3,
                        fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.id),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.chatbot-id.title')
                    }
                ],
                actionButtons: [
                    {
                        label: 'Rename',
                        style: 'tertiary',
                        icon: 'pencil',
                        disabled: function () {
                            return !_this.isAdministrator || _this.chatbotConfigurationsRecordGrid.api.getSelectedRows().length !== 1;
                        },
                        actions: [
                            {
                                name: function () {
                                    var selectedChatbot = lodash.head(_this.chatbotConfigurationsRecordGrid.api.getSelectedRows());
                                    _this.rxModalService
                                        .openModal({
                                        title: _this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.rename-chatbot.title'),
                                        size: 'sm',
                                        content: i4.RenameDefinitionModalComponent,
                                        data: {
                                            definitionName: selectedChatbot[i2$1.RX_CHATBOTS.chatbotSettings.recordFieldIds.name],
                                            infoText: _this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.name-uniqueness-validation.message'),
                                            fieldLabel: _this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.name.label'),
                                            validationErrorText: _this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.name-validation.message'),
                                            definitionType: _this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.chatbot.title'),
                                            definitionNames: _this.chatbotConfigurationsRecordGrid.adaptTableConfig.data
                                                .filter(function (chatbot) { return chatbot[i2$1.RX_CHATBOTS.chatbotSettings.recordFieldIds.bundleId] ===
                                                selectedChatbot[i2$1.RX_CHATBOTS.chatbotSettings.recordFieldIds.bundleId]; })
                                                .map(function (chatbot) { return chatbot[i2$1.RX_CHATBOTS.chatbotSettings.recordFieldIds.name]; })
                                        }
                                    })
                                        .then(function (definitionName) {
                                        _this.rxChatbotDefinitionService
                                            .rename(selectedChatbot[i3.RX_RECORD_DEFINITION.coreFieldIds.id], definitionName)
                                            .subscribe(function () {
                                            _this.refreshChatbotGrid();
                                        });
                                    })
                                        .catch(lodash.noop);
                                }
                            }
                        ]
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                        style: 'tertiary',
                        icon: 'trash',
                        disabled: function () {
                            return !_this.isAdministrator || _this.chatbotConfigurationsRecordGrid.api.getSelectedRows().length === 0;
                        },
                        actions: [
                            {
                                name: function () {
                                    var confirmationMessage = _this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.delete-confirmation.message');
                                    var selectedChatbots = _this.chatbotConfigurationsRecordGrid.api.getSelectedRows();
                                    var selectedChatbotIds = lodash.map(selectedChatbots, i3.RX_RECORD_DEFINITION.coreFieldIds.id);
                                    if (lodash.includes(selectedChatbotIds, i2$1.RX_CHATBOTS.chatbotSettings.defaultBotId)) {
                                        var defaultChatbot = lodash.find(selectedChatbots, [
                                            i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                                            i2$1.RX_CHATBOTS.chatbotSettings.defaultBotId
                                        ]);
                                        confirmationMessage = _this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.configurations-delete-confirmation.message', { defaultChatbotName: defaultChatbot[i2$1.RX_CHATBOTS.chatbotSettings.recordFieldIds.name] });
                                    }
                                    _this.rxModalService
                                        .confirm({
                                        title: _this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                                        modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                                        message: confirmationMessage
                                    })
                                        .then(function (result) {
                                        if (result) {
                                            _this.rxChatbotDefinitionService.delete(selectedChatbotIds).subscribe(function () {
                                                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.delete-success.message'));
                                                _this.refreshChatbotGrid();
                                            });
                                        }
                                    });
                                }
                            }
                        ]
                    }
                ]
            });
        };
        ChatbotsAdminComponent.prototype.getCellValue = function (dataItem, column) {
            return dataItem[column.field];
        };
        ChatbotsAdminComponent.prototype.onSaveClick = function () {
            var _this = this;
            var componentSetting = lodash.find(this.componentSettings, [
                'settingName',
                i2$1.RX_CHATBOTS.componentSettings.settingNames.displayChatbotsDropdown
            ]);
            componentSetting.settingValue = lodash.toString(this.sections.globalChatbotSettings.displayChatbotsDropdown);
            this.rxAdminSettingsService
                .updateComponentSettings(i2$1.RX_CHATBOTS.componentSettings.componentName + "/" + lodash.head(this.componentSettings).ownerKeyValue1, this.componentSettings)
                .subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.global-chatbot-settings-saved.message'));
                _this.displayChatbotsDropdownSwitch.control.markAsPristine();
            });
        };
        ChatbotsAdminComponent.prototype.openChatbot = function (row) {
            if (row) {
                var bundleId = row[i2$1.RX_CHATBOTS.chatbotSettings.recordFieldIds.bundleId];
                var encodedBotName = encodeURIComponent(row[i2$1.RX_CHATBOTS.chatbotSettings.recordFieldIds.name]);
                var chatbotDesignerUrl = "/innovationstudio/index.html#/app/bundle/" + bundleId + "/ichatbot/" + encodedBotName;
                window.open(chatbotDesignerUrl);
            }
        };
        ChatbotsAdminComponent.prototype.refreshChatbotGrid = function () {
            this.chatbotConfigurationsRecordGrid.api.refresh().subscribe();
        };
        return ChatbotsAdminComponent;
    }(i4$2.BaseViewComponent));
    ChatbotsAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ChatbotsAdminComponent, deps: [{ token: i2__namespace.RxAdminSettingsService }, { token: i2__namespace$1.RxChatbotDefinitionService }, { token: i2__namespace.RxCurrentUserService }, { token: i1__namespace.RxModalService }, { token: i2__namespace.RxNotificationService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ChatbotsAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ChatbotsAdminComponent, selector: "rx-admin-chatbots", viewQueries: [{ propertyName: "chatbotConfigurationsRecordGrid", first: true, predicate: ["chatbotConfigurationsRecordGrid"], descendants: true, static: true }, { propertyName: "nameColumnTemplate", first: true, predicate: ["nameColumnTemplate"], descendants: true, static: true }, { propertyName: "displayChatbotsDropdownSwitch", first: true, predicate: ["displayChatbotsDropdownSwitch"], descendants: true, read: i1.NgModel }], usesInheritance: true, ngImport: i0__namespace, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.chatbots.header.title' | translate }}\">\n  <adapt-accordion [multiselect]=\"true\" class=\"pb-4\">\n    <adapt-accordion-tab\n      [title]=\"sections.chatbotConfigurations.title | translate\"\n      [isOpen]=\"sections.chatbotConfigurations.isExpanded\"\n    >\n      <rx-record-grid #chatbotConfigurationsRecordGrid [config]=\"recordGridConfig\"></rx-record-grid>\n    </adapt-accordion-tab>\n\n    <adapt-accordion-tab\n      *ngIf=\"isAdministrator\"\n      [title]=\"sections.globalChatbotSettings.title | translate\"\n      [isOpen]=\"sections.globalChatbotSettings.isExpanded\"\n    >\n      <adapt-rx-switch\n        class=\"d-block\"\n        name=\"displayChatbotsDropdown\"\n        label=\" {{ 'com.bmc.arsys.rx.client.admin.chatbots.display-available-chatbots.label' | translate }} \"\n        [(ngModel)]=\"sections.globalChatbotSettings.displayChatbotsDropdown\"\n        #displayChatbotsDropdownSwitch=\"ngModel\"\n      ></adapt-rx-switch>\n\n      <button\n        class=\"mt-4\"\n        rx-id=\"save-button\"\n        adapt-button\n        btn-type=\"primary\"\n        size=\"small\"\n        type=\"button\"\n        [disabled]=\"!displayChatbotsDropdownSwitch.dirty\"\n        (click)=\"onSaveClick()\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n      </button>\n    </adapt-accordion-tab>\n  </adapt-accordion>\n</rx-admin-settings>\n\n<ng-template #nameColumnTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <a href=\"javascript:void(0)\" (click)=\"openChatbot(dataItem)\">\n    {{ getCellValue(dataItem, column) | rxDefinitionNamePipe }}\n  </a>\n</ng-template>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1__namespace$1.AdaptRxSwitchComponent, selector: "adapt-rx-switch", inputs: ["value", "size", "isLabelBefore", "checked"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i4__namespace.TranslatePipe, "rxDefinitionNamePipe": i2__namespace.RxDefinitionNamePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ChatbotsAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-chatbots',
                        templateUrl: './chatbots.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxAdminSettingsService }, { type: i2__namespace$1.RxChatbotDefinitionService }, { type: i2__namespace.RxCurrentUserService }, { type: i1__namespace.RxModalService }, { type: i2__namespace.RxNotificationService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { chatbotConfigurationsRecordGrid: [{
                    type: i0.ViewChild,
                    args: ['chatbotConfigurationsRecordGrid', { static: true }]
                }], nameColumnTemplate: [{
                    type: i0.ViewChild,
                    args: ['nameColumnTemplate', { static: true }]
                }], displayChatbotsDropdownSwitch: [{
                    type: i0.ViewChild,
                    args: ['displayChatbotsDropdownSwitch', { read: i1.NgModel, static: false }]
                }] } });

    var ChatbotsRegistrationModule = /** @class */ (function () {
        function ChatbotsRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-chatbots',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(ChatbotsAdminComponent),
                name: 'Chatbots',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return ChatbotsRegistrationModule;
    }());
    ChatbotsRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ChatbotsRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ChatbotsRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ChatbotsRegistrationModule, declarations: [ChatbotsAdminComponent], imports: [i1$2.AdaptAccordionModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptIconModule,
            i1$2.AdaptRxSwitchModule,
            i4.AdminSettingsModule,
            i8.CommonModule,
            i1.FormsModule,
            i7.RecordGridModule,
            i4.RenameDefinitionModalModule,
            i2.RxDefinitionModule,
            i1$1.RxDirectivesModule,
            i4$1.TranslateModule] });
    ChatbotsRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ChatbotsRegistrationModule, imports: [[
                i1$2.AdaptAccordionModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptIconModule,
                i1$2.AdaptRxSwitchModule,
                i4.AdminSettingsModule,
                i8.CommonModule,
                i1.FormsModule,
                i7.RecordGridModule,
                i4.RenameDefinitionModalModule,
                i2.RxDefinitionModule,
                i1$1.RxDirectivesModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ChatbotsRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ChatbotsAdminComponent],
                        imports: [
                            i1$2.AdaptAccordionModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptIconModule,
                            i1$2.AdaptRxSwitchModule,
                            i4.AdminSettingsModule,
                            i8.CommonModule,
                            i1.FormsModule,
                            i7.RecordGridModule,
                            i4.RenameDefinitionModalModule,
                            i2.RxDefinitionModule,
                            i1$1.RxDirectivesModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [ChatbotsAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var ChartGroup;
    (function (ChartGroup) {
        ChartGroup["Chat"] = "chat";
        ChartGroup["ChatByUser"] = "chatbyuser";
        ChartGroup["Classify"] = "classify";
        ChartGroup["SearchDiskUsage"] = "searchdiskusage";
        ChartGroup["SearchDocumentUsage"] = "searchdocumentusage";
        ChartGroup["Search"] = "search";
    })(ChartGroup || (ChartGroup = {}));
    var ChartType;
    (function (ChartType) {
        ChartType["Area"] = "area";
        ChartType["HorizontalColumn"] = "horizontal-column";
    })(ChartType || (ChartType = {}));

    var RX_COGNITIVE_CONSUMPTION = {
        sections: [
            {
                id: ChartGroup.Chat,
                title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.cognitive-service-chatbot.title',
                groups: [
                    {
                        id: ChartGroup.Chat,
                        label: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.number-of-conversations.label',
                        unit: 'N',
                        charts: [
                            {
                                title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.conversations.title',
                                type: ChartType.HorizontalColumn
                            },
                            {
                                title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.conversation-summary.title',
                                type: ChartType.Area
                            }
                        ]
                    }
                ]
            },
            {
                id: ChartGroup.ChatByUser,
                title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.chatbot-users.title',
                groups: [
                    {
                        id: ChartGroup.ChatByUser,
                        unit: 'N',
                        label: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.number-of-users.label',
                        charts: [
                            {
                                title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.users.title',
                                type: ChartType.HorizontalColumn
                            },
                            {
                                title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.user-summary.title',
                                type: ChartType.Area
                            }
                        ]
                    }
                ]
            },
            {
                id: ChartGroup.Classify,
                title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.cognitive-service-automation.title',
                groups: [
                    {
                        id: ChartGroup.Classify,
                        label: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.number-of-api-calls.label',
                        unit: 'N',
                        charts: [
                            {
                                title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.api-calls.title',
                                type: ChartType.HorizontalColumn
                            },
                            {
                                title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.api-call-summary.title',
                                type: ChartType.Area
                            }
                        ]
                    }
                ]
            },
            {
                id: ChartGroup.Search,
                title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.cognitive-search.title',
                groups: [
                    {
                        id: ChartGroup.SearchDocumentUsage,
                        label: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.number-of-documents.label',
                        unit: 'N',
                        capacityName: 'Count',
                        charts: [
                            {
                                title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.documents.title',
                                type: ChartType.HorizontalColumn
                            },
                            {
                                title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.document-summary.title',
                                type: ChartType.Area
                            }
                        ]
                    },
                    {
                        id: ChartGroup.SearchDiskUsage,
                        label: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.document-size.label',
                        unit: 'GB',
                        capacityName: 'Size',
                        charts: [
                            {
                                title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.document-storage.title',
                                type: ChartType.HorizontalColumn
                            },
                            {
                                title: 'com.bmc.arsys.rx.client.admin.cognitive-consumption.document-storage-summary.title',
                                type: ChartType.Area
                            }
                        ]
                    }
                ]
            }
        ],
        settings: {
            countType: 'BY_MONTH',
            licenseType: 'com.bmc.arsys.rx.services.cognitive.CognitiveService',
            fields: {
                emailsAddressFieldId: 103,
                consumedCapacityField: 'consumedCapacity',
                thresholdReachedField: 'thresholdReached',
                notificationDateField: 'notificationDate',
                recipientsField: 'recipients'
            }
        }
    };

    var notificationConfigApi = '/api/rx/application/telemetry/notification/config';
    var RxCognitiveConsumptionService = /** @class */ (function () {
        function RxCognitiveConsumptionService(httpClient) {
            this.httpClient = httpClient;
        }
        RxCognitiveConsumptionService.prototype.getCognitiveConsumptionNotificationConfig = function (params) {
            return this.httpClient.get(notificationConfigApi, {
                params: {
                    action: params.action,
                    domain: params.domain
                }
            });
        };
        RxCognitiveConsumptionService.prototype.postCognitiveConsumptionNotificationConfigEntity = function (entity) {
            return this.httpClient.post(notificationConfigApi, entity);
        };
        RxCognitiveConsumptionService.prototype.putCognitiveConsumptionNotificationConfigEntity = function (entity) {
            return this.httpClient.put(notificationConfigApi, entity);
        };
        RxCognitiveConsumptionService.prototype.getCognitiveConsumptionNotificationHistory = function (params) {
            return this.httpClient.get('/api/rx/application/telemetry/notification/history', {
                params: {
                    action: params.action,
                    domain: params.domain
                }
            });
        };
        RxCognitiveConsumptionService.prototype.getCognitiveLicenseUsage = function (licenseType, id, params) {
            return this.httpClient.get("/api/rx/application/license/licenseusage/" + licenseType + "/" + id, {
                params: {
                    countType: params.countType,
                    endDate: moment__default["default"](params.endDate, 'YYYY-MM').endOf('month').format('YYYY-MM-DD') + 'T23:59:59.999Z',
                    startDate: moment__default["default"](params.startDate, 'YYYY-MM').startOf('month').format('YYYY-MM-DD') + 'T00:00:00.000Z'
                }
            });
        };
        return RxCognitiveConsumptionService;
    }());
    RxCognitiveConsumptionService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveConsumptionService, deps: [{ token: i1__namespace$2.HttpClient }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxCognitiveConsumptionService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveConsumptionService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveConsumptionService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }]; } });

    var DownloadReportModalComponent = /** @class */ (function () {
        function DownloadReportModalComponent(activeModalRef, rxCognitiveConsumptionService, rxCsvService, rxFileService, rxUnitService, translateService) {
            this.activeModalRef = activeModalRef;
            this.rxCognitiveConsumptionService = rxCognitiveConsumptionService;
            this.rxCsvService = rxCsvService;
            this.rxFileService = rxFileService;
            this.rxUnitService = rxUnitService;
            this.translateService = translateService;
            this.dateTimePickerMode = i1$2.RxDatetimePickerMode.DateTime;
            this.parameters = {
                startDate: '',
                endDate: '',
                countType: RX_COGNITIVE_CONSUMPTION.settings.countType
            };
            this.periodOptions = [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption.download-report-modal.last-twelve-months.label'),
                    value: '12'
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption.download-report-modal.last-twenty-four-months.label'),
                    value: '24'
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption.download-report-modal.last-thirty-six-months.label'),
                    value: '36'
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption.download-report-modal.selected-time-period.label'),
                    value: 'custom'
                }
            ];
            this.csvData = [['Operation', 'Application', 'Period', 'Count']];
            this.modalData = this.activeModalRef.getData();
        }
        DownloadReportModalComponent.prototype.ngOnInit = function () {
            this.period = lodash.head(this.periodOptions).value;
        };
        DownloadReportModalComponent.prototype.onDownloadClick = function () {
            var _this = this;
            if (this.period === 'custom') {
                this.parameters.endDate = moment__default["default"](lodash.last(this.customRange)).format('YYYY-MM');
                this.parameters.startDate = moment__default["default"](lodash.head(this.customRange)).format('YYYY-MM');
            }
            else {
                this.parameters.endDate = moment__default["default"]().format('YYYY-MM');
                this.parameters.startDate = moment__default["default"](this.parameters.endDate, 'YYYY-MM')
                    .add(-1 * lodash.parseInt(this.period, 10), 'months')
                    .format('YYYY-MM');
            }
            var sections = lodash.filter(RX_COGNITIVE_CONSUMPTION.sections, function (section) { return lodash.includes(_this.modalData.sectionIds, section.id); });
            var groupIds = [];
            lodash.forEach(sections, function (section) {
                lodash.forEach(section.groups, function (group) {
                    groupIds.push(group.id);
                });
            });
            rxjs.forkJoin(lodash.map(groupIds, function (groupId) {
                return _this.rxCognitiveConsumptionService.getCognitiveLicenseUsage(RX_COGNITIVE_CONSUMPTION.settings.licenseType, groupId, _this.parameters);
            })).subscribe(function (licenseUsages) {
                lodash.forEach(licenseUsages, function (licenseUsage) {
                    var currentSection = lodash.find(sections, function (section) { return lodash.some(section.groups, ['id', licenseUsage.operation]); });
                    var group = lodash.find(currentSection.groups, ['id', licenseUsage.operation]);
                    lodash.forEach(licenseUsage.licenseUsageCount, function (licenseUsageCount) {
                        lodash.forEach(licenseUsageCount.count, function (value, period) {
                            _this.csvData.push([
                                _this.translateService.instant(currentSection.title) + " - " + _this.translateService.instant(lodash.head(group.charts).title),
                                licenseUsageCount.bundleId,
                                period,
                                group.unit === i3$1.RX_SIZE_UNITS.gigabytes.unit ? _this.rxUnitService.getValueWithUnits(value) : value
                            ]);
                        });
                    });
                });
                var csv = _this.rxCsvService.convertToCsv(_this.csvData);
                _this.rxFileService.createAndDownloadBlob(csv, 'text/csv;charset=utf-8;', 'report', 'csv');
                _this.activeModalRef.close();
            });
        };
        DownloadReportModalComponent.prototype.onCancelClick = function () {
            this.activeModalRef.dismiss();
        };
        return DownloadReportModalComponent;
    }());
    DownloadReportModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DownloadReportModalComponent, deps: [{ token: i1__namespace$1.ActiveModalRef }, { token: RxCognitiveConsumptionService }, { token: i3__namespace.RxCsvService }, { token: i3__namespace.RxFileService }, { token: i3__namespace.RxUnitService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DownloadReportModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DownloadReportModalComponent, selector: "rx-download-report-modal", ngImport: i0__namespace, template: "<div class=\"modal-body\">\n  <form>\n    <adapt-rx-radiobutton-group name=\"period\" [(ngModel)]=\"period\">\n      <adapt-rx-radiobutton\n        *ngFor=\"let option of periodOptions\"\n        [label]=\"option.label | translate\"\n        [value]=\"option.value\"\n      ></adapt-rx-radiobutton>\n    </adapt-rx-radiobutton-group>\n\n    <adapt-rx-datetime-range\n      name=\"customDatetimeRange\"\n      label=\" {{\n        'com.bmc.arsys.rx.client.admin.cognitive-consumption.download-report-modal.select-range.label' | translate\n      }}\"\n      [mode]=\"dateTimePickerMode\"\n      [disabled]=\"period !== 'custom'\"\n      [(ngModel)]=\"customRange\"\n    ></adapt-rx-datetime-range>\n  </form>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    rx-id=\"download-button\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    (click)=\"onDownloadClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.download.label' | translate }}\n  </button>\n\n  <button rx-id=\"cancel-button\" adapt-button btn-type=\"secondary\" type=\"button\" (click)=\"onCancelClick()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1__namespace$1.AdaptRxRadiobuttonGroupComponent, selector: "adapt-rx-radiobutton-group", inputs: ["formControlName"] }, { type: i1__namespace$1.AdaptRxRadiobuttonComponent, selector: "adapt-rx-radiobutton", inputs: ["name", "label", "id", "value", "checked", "disabled", "ariaLabel", "ariaLabeledBy", "ariaDescribedBy", "testID", "tabIndex"], outputs: ["onFocus", "onBlur", "checkedChange"] }, { type: i1__namespace$1.AdaptRxDatetimeRangeComponent, selector: "adapt-rx-datetime-range", inputs: ["placeholder", "inline", "placement", "appendToBody", "inlineLight", "inlineCompact", "dayFilter", "disableWizard", "mode", "hasSeconds", "use12HoursTime", "firstDayOfWeek", "initialDatetime", "defaultDatetime", "disabledStyleForReadonlyState", "popupClass", "texts", "inputFormat"], outputs: ["onPopupOpenChange", "onDatetimeChange"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DownloadReportModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-download-report-modal',
                        templateUrl: './download-report-modal.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ActiveModalRef }, { type: RxCognitiveConsumptionService }, { type: i3__namespace.RxCsvService }, { type: i3__namespace.RxFileService }, { type: i3__namespace.RxUnitService }, { type: i4__namespace.TranslateService }]; } });

    var CognitiveConsumptionNotificationHistoryModalComponent = /** @class */ (function () {
        function CognitiveConsumptionNotificationHistoryModalComponent(activeModalRef, rxCognitiveConsumptionService, translateService) {
            this.activeModalRef = activeModalRef;
            this.rxCognitiveConsumptionService = rxCognitiveConsumptionService;
            this.translateService = translateService;
            this.modalData = this.activeModalRef.getData();
        }
        CognitiveConsumptionNotificationHistoryModalComponent.prototype.ngOnInit = function () {
            var _this = this;
            var recordDefinition = {
                fieldDefinitions: [
                    {
                        id: RX_COGNITIVE_CONSUMPTION.settings.fields.consumedCapacityField,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_COGNITIVE_CONSUMPTION.settings.fields.thresholdReachedField,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_COGNITIVE_CONSUMPTION.settings.fields.notificationDateField,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.dateTime
                    },
                    {
                        id: RX_COGNITIVE_CONSUMPTION.settings.fields.recipientsField,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    }
                ]
            };
            var columns = [
                {
                    index: 0,
                    fieldId: RX_COGNITIVE_CONSUMPTION.settings.fields.consumedCapacityField,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption-notification-history.consumption-measure.title')
                },
                {
                    index: 1,
                    fieldId: RX_COGNITIVE_CONSUMPTION.settings.fields.thresholdReachedField,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption-notification-history.threshold-reached.title')
                },
                {
                    index: 2,
                    fieldId: RX_COGNITIVE_CONSUMPTION.settings.fields.notificationDateField,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption-notification-history.notification-date.title')
                },
                {
                    index: 3,
                    fieldId: RX_COGNITIVE_CONSUMPTION.settings.fields.recipientsField,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption-notification-history.email-recipient.title')
                }
            ];
            this.recordGridConfig = rxjs.of({
                columns: columns,
                enableFiltering: false,
                useExternalFiltering: false,
                enableRowSelection: i7.RowSelectionMode.Multiple,
                styles: 'flex-fill',
                getRecordDefinition: function () { return rxjs.of(recordDefinition); },
                getData: function () { return _this.rxCognitiveConsumptionService
                    .getCognitiveConsumptionNotificationHistory({
                    action: _this.modalData.groupId,
                    domain: _this.modalData.domain
                })
                    .pipe(operators.map(function (data) { return ({
                    data: data.entity,
                    totalSize: data.entity.length
                }); })); }
            });
        };
        CognitiveConsumptionNotificationHistoryModalComponent.prototype.onCloseClick = function () {
            this.activeModalRef.close();
        };
        return CognitiveConsumptionNotificationHistoryModalComponent;
    }());
    CognitiveConsumptionNotificationHistoryModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveConsumptionNotificationHistoryModalComponent, deps: [{ token: i1__namespace$1.ActiveModalRef }, { token: RxCognitiveConsumptionService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CognitiveConsumptionNotificationHistoryModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveConsumptionNotificationHistoryModalComponent, selector: "rx-cognitive-consumption-notification-history-modal", ngImport: i0__namespace, template: "<div class=\"modal-body d-flex\">\n  <rx-record-grid [config]=\"recordGridConfig\"></rx-record-grid>\n</div>\n\n<div class=\"modal-footer\">\n  <button rx-id=\"close-button\" adapt-button btn-type=\"secondary\" type=\"button\" (click)=\"onCloseClick()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n", styles: [":host ::ng-deep rx-record-grid{height:auto}\n"], components: [{ type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveConsumptionNotificationHistoryModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-cognitive-consumption-notification-history-modal',
                        templateUrl: './cognitive-consumption-notification-history-modal.component.html',
                        styleUrls: ['./cognitive-consumption-notification-history-modal.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ActiveModalRef }, { type: RxCognitiveConsumptionService }, { type: i4__namespace.TranslateService }]; } });

    var CognitiveConsumptionNotificationModalComponent = /** @class */ (function (_super) {
        __extends(CognitiveConsumptionNotificationModalComponent, _super);
        function CognitiveConsumptionNotificationModalComponent(activeModalRef, adaptModalService, rxCognitiveConsumptionService, rxCurrentUserService, rxLogService, rxNotificationService, translateService, injector) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.activeModalRef = activeModalRef;
            _this.adaptModalService = adaptModalService;
            _this.rxCognitiveConsumptionService = rxCognitiveConsumptionService;
            _this.rxCurrentUserService = rxCurrentUserService;
            _this.rxLogService = rxLogService;
            _this.rxNotificationService = rxNotificationService;
            _this.translateService = translateService;
            _this.injector = injector;
            _this.isEdit = false;
            _this.selectedEmailRecipients = [];
            _this.thresholds = [
                {
                    id: 1,
                    value: 0
                },
                {
                    id: 2,
                    value: 0
                },
                {
                    id: 3,
                    value: 0
                }
            ];
            _this.modalData = _this.activeModalRef.getData();
            _this.isAdministrator = _this.rxCurrentUserService.isAdministrator();
            return _this;
        }
        CognitiveConsumptionNotificationModalComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            lodash.forEach(RX_COGNITIVE_CONSUMPTION.sections, function (section) {
                var group = lodash.find(section.groups, ['id', _this.modalData.groupId]);
                if (group) {
                    _this.group = group;
                }
            });
            this.label = this.translateService.instant(this.group.label) + " (" + this.group.unit + ")";
            this.entity = {
                action: this.modalData.groupId,
                capacity: 0,
                domain: 'com.bmc.dsm.innovationsuite.cognitive',
                emailIds: [],
                thresholds: [null, null, null]
            };
            this.busy = this.rxCognitiveConsumptionService
                .getCognitiveConsumptionNotificationConfig({
                action: this.entity.action,
                domain: this.entity.domain
            })
                .pipe(operators.catchError(function (error) {
                return lodash.get(error, 'error[0].messageNumber') === 302 ? rxjs.EMPTY : rxjs.throwError(error);
            }))
                .subscribe(function (config) {
                _this.isEdit = true;
                lodash.merge(_this.entity, config.entity);
                _this.thresholds = lodash.map(_this.entity.thresholds, function (threshold, index) {
                    return {
                        id: index + 1,
                        value: threshold || 0
                    };
                });
                _this.selectedEmailRecipients = _this.entity.emailIds;
            });
            this.recordGridConfig = rxjs.of({
                enableFiltering: false,
                recordDefinitionName: 'User',
                enableRowSelection: i7.RowSelectionMode.Multiple,
                filterExpression: "('" + RX_COGNITIVE_CONSUMPTION.settings.fields.emailsAddressFieldId + "' != $NULL$)",
                columns: [
                    {
                        index: 0,
                        fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.description),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.full-name.title')
                    },
                    {
                        index: 1,
                        fieldId: String(RX_COGNITIVE_CONSUMPTION.settings.fields.emailsAddressFieldId),
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.primary-email-address.title')
                    }
                ]
            });
        };
        CognitiveConsumptionNotificationModalComponent.prototype.isDirty = function () {
            return this.notificationForm.dirty;
        };
        CognitiveConsumptionNotificationModalComponent.prototype.canSelectRecipients = function () {
            var recipients = this.availableEmailNotificationRecipientsRecordGrid.api.getSelectedRows();
            return lodash.inRange(lodash.add(recipients.length, this.selectedEmailRecipients.length), 0, 11);
        };
        CognitiveConsumptionNotificationModalComponent.prototype.getEmptyCapacityValueValidator = function () {
            var _this = this;
            return function (control) {
                var result = null;
                if (control.touched && !control.value) {
                    result = {
                        emptyCapacityValue: {
                            message: _this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.capacity-empty-validation.message')
                        }
                    };
                }
                return result;
            };
        };
        CognitiveConsumptionNotificationModalComponent.prototype.getEmptyThresholdValuesValidator = function () {
            var _this = this;
            return function (control) {
                var result = null;
                if (control.touched && !control.value && lodash.every(_this.thresholds, ['value', 0])) {
                    result = {
                        emptyThresholdValues: {
                            message: _this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.capacity-threshold-validation.message')
                        }
                    };
                }
                return result;
            };
        };
        CognitiveConsumptionNotificationModalComponent.prototype.isSaveButtonDisabled = function () {
            return this.notificationForm.invalid || lodash.isEmpty(this.selectedEmailRecipients);
        };
        CognitiveConsumptionNotificationModalComponent.prototype.onCloseClick = function () {
            this.activeModalRef.dismiss(i1$2.DismissReasons.CLOSE_BTN);
        };
        CognitiveConsumptionNotificationModalComponent.prototype.onMoveToSelectedClick = function () {
            var _this = this;
            var recipients = this.availableEmailNotificationRecipientsRecordGrid.api.getSelectedRows();
            if (this.canSelectRecipients()) {
                lodash.forEach(recipients, function (recipient) {
                    if (!lodash.includes(_this.selectedEmailRecipients, recipient[RX_COGNITIVE_CONSUMPTION.settings.fields.emailsAddressFieldId])) {
                        _this.selectedEmailRecipients.push(recipient[RX_COGNITIVE_CONSUMPTION.settings.fields.emailsAddressFieldId]);
                    }
                });
            }
        };
        CognitiveConsumptionNotificationModalComponent.prototype.onNotificationHistoryClick = function () {
            this.adaptModalService
                .open({
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.notification-history.title'),
                content: CognitiveConsumptionNotificationHistoryModalComponent,
                size: i1$4.OpenViewActionModalSize.Large,
                data: {
                    domain: this.entity.domain,
                    groupId: this.modalData.groupId
                }
            })
                .catch(lodash.noop);
        };
        CognitiveConsumptionNotificationModalComponent.prototype.onRemoveRecipientClick = function (index) {
            lodash.pullAt(this.selectedEmailRecipients, [index]);
        };
        CognitiveConsumptionNotificationModalComponent.prototype.onSaveClick = function () {
            var _this = this;
            lodash.forEach(this.notificationForm.controls, function (control) {
                control.markAsTouched();
                control.updateValueAndValidity();
            });
            var entity = {
                action: this.entity.action,
                capacity: this.entity.capacity,
                domain: this.entity.domain,
                emailIds: this.selectedEmailRecipients,
                thresholds: lodash.compact(lodash.map(this.thresholds, 'value'))
            };
            if (this.notificationForm.valid) {
                if (this.isEdit) {
                    this.rxCognitiveConsumptionService.putCognitiveConsumptionNotificationConfigEntity(entity).subscribe(function () {
                        _this.activeModalRef.close();
                        _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.common.saved-successfully.message'));
                    });
                }
                else {
                    this.rxCognitiveConsumptionService.postCognitiveConsumptionNotificationConfigEntity(entity).subscribe(function () {
                        _this.activeModalRef.close();
                        _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.common.saved-successfully.message'));
                    });
                }
            }
        };
        CognitiveConsumptionNotificationModalComponent.prototype.onThresholdCounterModelChange = function () {
            var controls = lodash.omit(this.notificationForm.controls, 'capacity');
            lodash.forEach(controls, function (control) {
                control.markAsTouched();
                control.updateValueAndValidity();
            });
        };
        return CognitiveConsumptionNotificationModalComponent;
    }(i1$1.RxModalClass));
    CognitiveConsumptionNotificationModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveConsumptionNotificationModalComponent, deps: [{ token: i1__namespace$1.ActiveModalRef }, { token: i1__namespace$1.AdaptModalService }, { token: RxCognitiveConsumptionService }, { token: i2__namespace.RxCurrentUserService }, { token: i2__namespace.RxLogService }, { token: i2__namespace.RxNotificationService }, { token: i4__namespace.TranslateService }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CognitiveConsumptionNotificationModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveConsumptionNotificationModalComponent, selector: "rx-cognitive-consumption-notification-modal", viewQueries: [{ propertyName: "availableEmailNotificationRecipientsRecordGrid", first: true, predicate: ["availableEmailNotificationRecipientsRecordGrid"], descendants: true, static: true }, { propertyName: "notificationForm", first: true, predicate: ["notificationForm"], descendants: true, read: i1.NgForm, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"modal-body d-flex\">\n  <rx-busy-indicator [options]=\"{ busy: busy, loaderType: 'section' }\"></rx-busy-indicator>\n\n  <form class=\"d-flex flex-column\" #notificationForm=\"ngForm\">\n    <div class=\"mb-4\" [style.width.%]=\"32\">\n      <h5 class=\"m-0 mb-4\">\n        {{ 'com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.capacity.title' | translate }}\n      </h5>\n\n      <adapt-rx-counter\n        name=\"capacity\"\n        [label]=\"label\"\n        placeholder=\"0\"\n        min=\"0\"\n        max=\"100\"\n        required\n        [rxCustomValidators]=\"getEmptyCapacityValueValidator()\"\n        [(ngModel)]=\"entity.capacity\"\n      >\n      </adapt-rx-counter>\n    </div>\n\n    <div class=\"mb-4\">\n      <h5 class=\"m-0 mb-4\">\n        {{ 'com.bmc.arsys.rx.client.admin.cognitive-consumption.capacity-consumption-thresholds.title' | translate }}\n      </h5>\n\n      <div class=\"d-flex justify-content-between\">\n        <adapt-rx-counter\n          *ngFor=\"let threshold of thresholds\"\n          [style.width.%]=\"32\"\n          name=\"threshold-{{ threshold.id }}\"\n          label=\"Threshold {{ threshold.id }} (%)\"\n          placeholder=\"0\"\n          min=\"0\"\n          max=\"100\"\n          adaptIntegerNumber\n          [rxCustomValidators]=\"getEmptyThresholdValuesValidator()\"\n          [(ngModel)]=\"threshold.value\"\n          (ngModelChange)=\"onThresholdCounterModelChange()\"\n        >\n        </adapt-rx-counter>\n      </div>\n    </div>\n\n    <div class=\"d-flex h-100\">\n      <div class=\"col-6 d-flex flex-column h-100 p-0\">\n        <h5 class=\"m-0 mb-4\">\n          {{\n            'com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.available-email-recipient.title'\n              | translate\n          }}\n        </h5>\n\n        <rx-record-grid\n          class=\"flex-grow-1\"\n          [config]=\"recordGridConfig\"\n          #availableEmailNotificationRecipientsRecordGrid\n        ></rx-record-grid>\n      </div>\n\n      <button\n        class=\"d-icon-angle_right align-self-center mx-4\"\n        adapt-button\n        btn-type=\"secondary\"\n        type=\"button\"\n        rx-id=\"move-to-selected-button\"\n        [disabled]=\"!canSelectRecipients()\"\n        (click)=\"onMoveToSelectedClick()\"\n      ></button>\n\n      <div class=\"col d-flex flex-column h-100 p-0\">\n        <h5 class=\"m-0 mb-4\">\n          {{\n            'com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.selected-email-recipient.title'\n              | translate\n          }}\n        </h5>\n\n        <ul *ngIf=\"selectedEmailRecipients.length\" class=\"list-group\">\n          <li\n            *ngFor=\"let recipient of selectedEmailRecipients; let $index = index\"\n            class=\"list-group-item d-flex justify-content-between p-0 px-2\"\n          >\n            {{ recipient }}\n\n            <button\n              class=\"d-icon-trash_adapt\"\n              adapt-button\n              btn-type=\"tertiary\"\n              type=\"button\"\n              rx-id=\"remove-recipient\"\n              (click)=\"onRemoveRecipientClick($index)\"\n            ></button>\n          </li>\n        </ul>\n\n        <div *ngIf=\"!selectedEmailRecipients.length\" class=\"card h-100\">\n          <div class=\"card-block\">\n            <adapt-empty-state\n              type=\"objects\"\n              label=\"{{\n                'com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.recipient-not-selected.message'\n                  | translate\n              }}\"\n            ></adapt-empty-state>\n          </div>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"modal-footer d-flex\">\n  <button\n    class=\"mr-auto\"\n    rx-id=\"notification-history-button\"\n    adapt-button\n    btn-type=\"secondary\"\n    type=\"button\"\n    (click)=\"onNotificationHistoryClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.admin.cognitive-consumption-notification.notification-history.title' | translate }}\n  </button>\n\n  <button\n    rx-id=\"save-button\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    (click)=\"onSaveClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button rx-id=\"close-button\" adapt-button btn-type=\"secondary\" size=\"small\" type=\"button\" (click)=\"onCloseClick()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n", styles: [":host ::ng-deep .card-block{display:flex;justify-content:center;align-items:center}\n"], components: [{ type: i1__namespace.RxBusyIndicatorComponent, selector: "rx-busy-indicator", inputs: ["options"] }, { type: i1__namespace$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace$1.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace.RxCustomValidatorsDirective, selector: "[rxCustomValidators][ngModel],[rxCustomValidators][formControl]", inputs: ["rxCustomValidators"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveConsumptionNotificationModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-cognitive-consumption-notification-modal',
                        templateUrl: './cognitive-consumption-notification-modal.component.html',
                        styleUrls: ['./cognitive-consumption-notification-modal.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ActiveModalRef }, { type: i1__namespace$1.AdaptModalService }, { type: RxCognitiveConsumptionService }, { type: i2__namespace.RxCurrentUserService }, { type: i2__namespace.RxLogService }, { type: i2__namespace.RxNotificationService }, { type: i4__namespace.TranslateService }, { type: i0__namespace.Injector }]; }, propDecorators: { availableEmailNotificationRecipientsRecordGrid: [{
                    type: i0.ViewChild,
                    args: ['availableEmailNotificationRecipientsRecordGrid', { static: true }]
                }], notificationForm: [{
                    type: i0.ViewChild,
                    args: ['notificationForm', { static: true, read: i1.NgForm }]
                }] } });

    var CognitiveConsumptionChartComponent = /** @class */ (function () {
        function CognitiveConsumptionChartComponent(rxStringService, rxUnitService, translateService) {
            this.rxStringService = rxStringService;
            this.rxUnitService = rxUnitService;
            this.translateService = translateService;
            this.areaChartType = ChartType.Area;
            this.horizontalColumnChartType = ChartType.HorizontalColumn;
        }
        CognitiveConsumptionChartComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.chartConfig = {
                height: 400,
                width: 500,
                header: {
                    title: this.translateService.instant(this.chart.title),
                    allowHideLegend: true
                },
                suppressLegend: this.isCapacityAvailable(),
                xAxis: {
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption.x-axis-months.title'),
                    categories: []
                },
                yAxis: {
                    title: this.translateService.instant(this.groupData.label) + " (" + this.groupData.unit + ")"
                },
                series: []
            };
            if (this.chart.type === ChartType.HorizontalColumn) {
                lodash.assign(this.chartConfig, {
                    type: 'column',
                    seriesDisplay: 'horizontal',
                    showSlider: true,
                    slidePointsCount: 3
                });
                var defaultCount_1 = lodash.flow(function (licenceUsage) { return lodash.map(licenceUsage, 'count'); }, function (countData) { return lodash.reduce(countData, lodash.assign, {}); }, function (countData) { return lodash.mapValues(countData, lodash.constant(0)); })(this.licenceUsageCount);
                lodash.forEach(this.licenceUsageCount, function (item) {
                    lodash.defaults(item.count, defaultCount_1);
                });
            }
            lodash.forEach(this.licenceUsageCount, function (item) {
                var name = _this.groupData.capacityName || _this.rxStringService.prettify(lodash.last(lodash.split(item.bundleId, '.')));
                var data = lodash.map(item.count, function (key, value) {
                    var result;
                    var countValue = _this.groupData.unit === i3$1.RX_SIZE_UNITS.gigabytes.unit
                        ? _this.rxUnitService.getValueWithoutUnitsByUnitType(key, i3$1.RX_SIZE_UNITS.gigabytes.unit)
                        : key;
                    if (_this.chart.type === ChartType.Area) {
                        result = {
                            x: moment__default["default"](value).valueOf(),
                            y: countValue
                        };
                    }
                    else {
                        result = countValue;
                    }
                    return result;
                });
                _this.chartConfig.series.push({
                    name: name,
                    data: data
                });
            });
            var firstLicenceUsageCount = lodash.head(this.licenceUsageCount);
            this.chartConfig.xAxis.categories = lodash.map(lodash.keys(firstLicenceUsageCount.count), function (key) {
                return moment__default["default"](key).format('MMM YYYY');
            });
            if (this.isCapacityAvailable()) {
                this.capacity = {
                    title: "Capacity (" + this.groupData.unit + ")",
                    value: this.groupData.unit === i3$1.RX_SIZE_UNITS.gigabytes.unit
                        ? this.rxUnitService.getValueWithoutUnitsByUnitType(firstLicenceUsageCount.capacity, i3$1.RX_SIZE_UNITS.gigabytes.unit)
                        : firstLicenceUsageCount.capacity
                };
            }
        };
        CognitiveConsumptionChartComponent.prototype.formatXAxisVal = function (xValue) {
            return moment__default["default"](xValue).format('MMM YYYY');
        };
        CognitiveConsumptionChartComponent.prototype.isCapacityAvailable = function () {
            return Boolean(this.groupData.capacityName);
        };
        return CognitiveConsumptionChartComponent;
    }());
    CognitiveConsumptionChartComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveConsumptionChartComponent, deps: [{ token: i3__namespace.RxStringService }, { token: i3__namespace.RxUnitService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CognitiveConsumptionChartComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveConsumptionChartComponent, selector: "rx-cognitive-consumption-chart", inputs: { chart: "chart", groupData: "groupData", licenceUsageCount: "licenceUsageCount" }, ngImport: i0__namespace, template: "<ng-container [ngSwitch]=\"chart.type\">\n  <adapt-stacked-chart\n    *ngSwitchCase=\"horizontalColumnChartType\"\n    [header]=\"chartConfig.header\"\n    [height]=\"chartConfig.height\"\n    [width]=\"chartConfig.width\"\n    [xAxis]=\"chartConfig.xAxis\"\n    [yAxis]=\"chartConfig.yAxis\"\n    [series]=\"chartConfig.series\"\n    [tooltip]=\"horizontalColumnChartTooltip\"\n    [type]=\"chartConfig.type\"\n    [showSlider]=\"chartConfig.showSlider\"\n    [slidePointsCount]=\"chartConfig.slidePointsCount\"\n    [seriesDisplay]=\"chartConfig.seriesDisplay\"\n    [suppressLegend]=\"chartConfig.suppressLegend\"\n    [thresholdLine]=\"isCapacityAvailable() ? capacity.value : null\"\n  >\n  </adapt-stacked-chart>\n\n  <adapt-area-graph\n    *ngSwitchCase=\"areaChartType\"\n    [header]=\"chartConfig.header\"\n    [height]=\"chartConfig.height\"\n    [width]=\"chartConfig.width\"\n    [xAxis]=\"chartConfig.xAxis\"\n    [yAxis]=\"chartConfig.yAxis\"\n    [series]=\"chartConfig.series\"\n    [tooltip]=\"areaChartTooltip\"\n    [suppressLegend]=\"chartConfig.suppressLegend\"\n    [thresholdLine]=\"isCapacityAvailable() ? capacity.value : null\"\n  >\n  </adapt-area-graph>\n</ng-container>\n\n<ng-template #horizontalColumnChartTooltip let-data=\"data\">\n  <div>\n    <span class=\"chart-tooltip-color-spot\" [style.background]=\"data?.color\"></span>\n    <span class=\"chart-tooltip-category\">{{ data.category }}</span>\n  </div>\n\n  <div>\n    {{ chartConfig.yAxis.title }}:\n    <span class=\"font-weight-semibold\">{{ data.value }}</span>\n  </div>\n\n  <div *ngIf=\"capacity\">\n    {{ capacity.title }}:\n    <span class=\"font-weight-semibold\">{{ capacity.value }}</span>\n  </div>\n</ng-template>\n\n<ng-template #areaChartTooltip let-data=\"data\">\n  <div>\n    <span class=\"chart-tooltip-color-spot\" [style.background]=\"data?.color\"></span>\n    <span class=\"chart-tooltip-category\">{{ data.category }}</span>\n  </div>\n\n  <div>\n    {{ chartConfig.xAxis.title }}:\n    <span class=\"font-weight-semibold\">{{ formatXAxisVal(data.xValue) }}</span>\n  </div>\n\n  <div>\n    {{ chartConfig.yAxis.title }}:\n    <span class=\"font-weight-semibold\">{{ data.yValue }}</span>\n  </div>\n\n  <div *ngIf=\"capacity\">\n    {{ capacity.title }}:\n    <span class=\"font-weight-semibold\">{{ capacity.value }}</span>\n  </div>\n</ng-template>\n", components: [{ type: i3__namespace$3.AdaptStackedChartComponent, selector: "adapt-stacked-chart", inputs: ["backgroundColor", "width", "height", "header", "suppressHeader", "suppressLegend", "tooltip", "dataBuilder", "type", "xAxis", "yAxis", "showSlider", "hasTotalLabels", "seriesDisplay", "totalLabelTextFormatter", "barWidth", "slidePointsCount", "hideAxises", "rotateXAxis", "xAxisTickFormatResolver", "scientificMode", "renderLegend", "thresholdLine", "showEmptyColIndicator", "series", "legend"], outputs: ["clickChart", "categoryShow", "categoryHide"] }, { type: i3__namespace$3.AdaptAreaGraphComponent, selector: "adapt-area-graph", inputs: ["formatXAxisValue", "getTooltipXValueTitle"], outputs: ["categoryShow", "categoryHide"] }], directives: [{ type: i8__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i8__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveConsumptionChartComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-cognitive-consumption-chart',
                        templateUrl: './cognitive-consumption-chart.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace.RxStringService }, { type: i3__namespace.RxUnitService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { chart: [{
                    type: i0.Input
                }], groupData: [{
                    type: i0.Input
                }], licenceUsageCount: [{
                    type: i0.Input
                }] } });

    var CognitiveConsumptionGroupComponent = /** @class */ (function () {
        function CognitiveConsumptionGroupComponent(rxModalService, rxCognitiveConsumptionService, translateService) {
            this.rxModalService = rxModalService;
            this.rxCognitiveConsumptionService = rxCognitiveConsumptionService;
            this.translateService = translateService;
            this.parameters = {
                startDate: '',
                endDate: moment__default["default"]().format('YYYY-MM'),
                countType: RX_COGNITIVE_CONSUMPTION.settings.countType
            };
        }
        CognitiveConsumptionGroupComponent.prototype.ngOnInit = function () {
            this.generateCognitiveConsumptionGroup();
        };
        CognitiveConsumptionGroupComponent.prototype.generateCognitiveConsumptionGroup = function () {
            var _this = this;
            this.licenceUsageCount = [];
            this.groupData = lodash.omit(this.group, ['charts']);
            this.parameters.startDate = moment__default["default"](this.parameters.endDate, 'YYYY-MM')
                .add(-1 * 36, 'months')
                .format('YYYY-MM');
            this.busy = this.rxCognitiveConsumptionService
                .getCognitiveLicenseUsage(RX_COGNITIVE_CONSUMPTION.settings.licenseType, this.group.id, this.parameters)
                .subscribe(function (licenseUsage) {
                lodash.forEach(licenseUsage.licenseUsageCount, function (licenseUsageCount) {
                    if (licenseUsageCount && !lodash.isEmpty(licenseUsageCount.count)) {
                        _this.licenceUsageCount.push(licenseUsageCount);
                    }
                });
            });
        };
        CognitiveConsumptionGroupComponent.prototype.onNotificationsClick = function () {
            this.rxModalService
                .openModal({
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption-group.add-edit-notifications.title'),
                content: CognitiveConsumptionNotificationModalComponent,
                size: 'rx-lg',
                data: {
                    groupId: this.group.id
                }
            })
                .catch(lodash.noop);
        };
        return CognitiveConsumptionGroupComponent;
    }());
    CognitiveConsumptionGroupComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveConsumptionGroupComponent, deps: [{ token: i1__namespace.RxModalService }, { token: RxCognitiveConsumptionService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CognitiveConsumptionGroupComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveConsumptionGroupComponent, selector: "rx-cognitive-consumption-group", inputs: { group: "group", isAdministrator: "isAdministrator", sectionId: "sectionId" }, ngImport: i0__namespace, template: "<button\n  *ngIf=\"isAdministrator\"\n  class=\"d-icon-envelope_o mb-4\"\n  adapt-button\n  btn-type=\"tertiary\"\n  type=\"button\"\n  rx-id=\"notifications-button\"\n  (click)=\"onNotificationsClick()\"\n>\n  {{ 'com.bmc.arsys.rx.client.admin.cognitive-consumption-group.notifications.label' | translate }}\n</button>\n\n<div class=\"d-flex flex-row flex-wrap\">\n  <div class=\"card mb-4 mr-4 placeholder\" *ngFor=\"let chart of group.charts\">\n    <div class=\"card-block p-4\">\n      <rx-busy-indicator [options]=\"{ busy: busy, loaderType: 'section' }\"></rx-busy-indicator>\n\n      <div *ngIf=\"licenceUsageCount.length\">\n        <rx-cognitive-consumption-chart\n          [chart]=\"chart\"\n          [groupData]=\"groupData\"\n          [licenceUsageCount]=\"licenceUsageCount\"\n        ></rx-cognitive-consumption-chart>\n      </div>\n\n      <div *ngIf=\"!licenceUsageCount.length\">\n        <h5 class=\"m-0\">{{ chart.title | translate }}</h5>\n        <div class=\"mt-6 pt-4\">\n          <adapt-empty-state\n            type=\"chart\"\n            label=\"{{ 'com.bmc.arsys.rx.client.empty-state.no-data-to-display.label' | translate }}\"\n          ></adapt-empty-state>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", styles: [".placeholder{min-width:550px;min-height:400px}\n"], components: [{ type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace.RxBusyIndicatorComponent, selector: "rx-busy-indicator", inputs: ["options"] }, { type: CognitiveConsumptionChartComponent, selector: "rx-cognitive-consumption-chart", inputs: ["chart", "groupData", "licenceUsageCount"] }, { type: i1__namespace$1.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveConsumptionGroupComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-cognitive-consumption-group',
                        templateUrl: './cognitive-consumption-group.component.html',
                        styleUrls: ['./cognitive-consumption-group.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.RxModalService }, { type: RxCognitiveConsumptionService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { group: [{
                    type: i0.Input
                }], isAdministrator: [{
                    type: i0.Input
                }], sectionId: [{
                    type: i0.Input
                }] } });

    var CognitiveConsumptionAdminComponent = /** @class */ (function () {
        function CognitiveConsumptionAdminComponent(adaptModalService, rxLicenseDataPageService, rxCurrentUserService, translateService) {
            this.adaptModalService = adaptModalService;
            this.rxLicenseDataPageService = rxLicenseDataPageService;
            this.rxCurrentUserService = rxCurrentUserService;
            this.translateService = translateService;
        }
        CognitiveConsumptionAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.isAdministrator = this.rxCurrentUserService.isAdministrator();
            this.busy = this.rxLicenseDataPageService
                .get({
                params: {
                    startIndex: -1,
                    pageSize: 0,
                    propertySelection: ['name', 'serviceLicensedCount'].join(',')
                }
            })
                .subscribe(function (result) {
                var isHelixCognitiveChatbotPerUserLicensed = lodash.find(result.data[0].serviceLicenseDescriptors, [
                    'name',
                    'HelixCognitiveChatbotPerUser'
                ]).licensed;
                _this.sectionIds = [
                    isHelixCognitiveChatbotPerUserLicensed ? ChartGroup.ChatByUser : ChartGroup.Chat,
                    ChartGroup.Classify,
                    ChartGroup.Search
                ];
                _this.sections = lodash.filter(RX_COGNITIVE_CONSUMPTION.sections, function (section) { return lodash.includes(_this.sectionIds, section.id); });
            });
        };
        CognitiveConsumptionAdminComponent.prototype.onDownloadClick = function () {
            this.adaptModalService
                .open({
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-consumption.download-csv-file.title'),
                type: 'default',
                size: 'sm',
                content: DownloadReportModalComponent,
                data: {
                    sectionIds: this.sectionIds
                }
            })
                .catch(lodash.noop);
        };
        CognitiveConsumptionAdminComponent.prototype.onRefreshClick = function () {
            this.cognitiveConsumptionGroups.forEach(function (cognitiveConsumptionGroup) {
                cognitiveConsumptionGroup.generateCognitiveConsumptionGroup();
            });
        };
        return CognitiveConsumptionAdminComponent;
    }());
    CognitiveConsumptionAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveConsumptionAdminComponent, deps: [{ token: i1__namespace$1.AdaptModalService }, { token: i2__namespace.RxLicenseDataPageService }, { token: i2__namespace.RxCurrentUserService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CognitiveConsumptionAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveConsumptionAdminComponent, selector: "rx-admin-cognitive-consumption", viewQueries: [{ propertyName: "cognitiveConsumptionGroups", predicate: CognitiveConsumptionGroupComponent, descendants: true }], ngImport: i0__namespace, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-consumption.header.title' | translate }}\"\n  [busy]=\"busy\"\n>\n  <div class=\"mb-4\">\n    <button\n      class=\"d-icon-refresh_adapt\"\n      adapt-button\n      btn-type=\"tertiary\"\n      type=\"button\"\n      rx-id=\"refresh-button\"\n      (click)=\"onRefreshClick()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.refresh.label' | translate }}\n    </button>\n\n    <button\n      class=\"d-icon-download_csv\"\n      adapt-button\n      btn-type=\"tertiary\"\n      type=\"button\"\n      rx-id=\"download-button\"\n      (click)=\"onDownloadClick()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.download.label' | translate }}\n    </button>\n  </div>\n\n  <div *ngFor=\"let section of sections\">\n    <h4 class=\"m-0 mb-4\">{{ section.title | translate }}</h4>\n\n    <rx-cognitive-consumption-group\n      *ngFor=\"let group of section.groups\"\n      [group]=\"group\"\n      [sectionId]=\"section.id\"\n      [isAdministrator]=\"isAdministrator\"\n    >\n    </rx-cognitive-consumption-group>\n  </div>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: CognitiveConsumptionGroupComponent, selector: "rx-cognitive-consumption-group", inputs: ["group", "isAdministrator", "sectionId"] }], directives: [{ type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveConsumptionAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-cognitive-consumption',
                        templateUrl: './cognitive-consumption.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.AdaptModalService }, { type: i2__namespace.RxLicenseDataPageService }, { type: i2__namespace.RxCurrentUserService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { cognitiveConsumptionGroups: [{
                    type: i0.ViewChildren,
                    args: [CognitiveConsumptionGroupComponent]
                }] } });

    var CognitiveConsumptionRegistrationModule = /** @class */ (function () {
        function CognitiveConsumptionRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-cognitive-consumption',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(CognitiveConsumptionAdminComponent),
                name: 'Cognitive consumption',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return CognitiveConsumptionRegistrationModule;
    }());
    CognitiveConsumptionRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveConsumptionRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CognitiveConsumptionRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveConsumptionRegistrationModule, declarations: [CognitiveConsumptionAdminComponent,
            CognitiveConsumptionChartComponent,
            CognitiveConsumptionGroupComponent,
            CognitiveConsumptionNotificationHistoryModalComponent,
            CognitiveConsumptionNotificationModalComponent,
            DownloadReportModalComponent], imports: [i1$2.AdaptButtonModule,
            i3$3.AdaptChartsModule,
            i1$2.AdaptEmptyStateModule,
            i1$2.AdaptModalModule,
            i1$2.AdaptRxCounterModule,
            i1$2.AdaptRxDatetimeModule,
            i1$2.AdaptRxListBuilderModule,
            i1$2.AdaptRxRadiobuttonModule,
            i4.AdminSettingsModule,
            i8.CommonModule,
            i7.RecordGridModule,
            i1$1.RxBusyIndicatorModule,
            i1$1.RxDirectivesModule,
            i1.FormsModule,
            i4$1.TranslateModule] });
    CognitiveConsumptionRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveConsumptionRegistrationModule, imports: [[
                i1$2.AdaptButtonModule,
                i3$3.AdaptChartsModule,
                i1$2.AdaptEmptyStateModule,
                i1$2.AdaptModalModule,
                i1$2.AdaptRxCounterModule,
                i1$2.AdaptRxDatetimeModule,
                i1$2.AdaptRxListBuilderModule,
                i1$2.AdaptRxRadiobuttonModule,
                i4.AdminSettingsModule,
                i8.CommonModule,
                i7.RecordGridModule,
                i1$1.RxBusyIndicatorModule,
                i1$1.RxDirectivesModule,
                i1.FormsModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveConsumptionRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            CognitiveConsumptionAdminComponent,
                            CognitiveConsumptionChartComponent,
                            CognitiveConsumptionGroupComponent,
                            CognitiveConsumptionNotificationHistoryModalComponent,
                            CognitiveConsumptionNotificationModalComponent,
                            DownloadReportModalComponent
                        ],
                        imports: [
                            i1$2.AdaptButtonModule,
                            i3$3.AdaptChartsModule,
                            i1$2.AdaptEmptyStateModule,
                            i1$2.AdaptModalModule,
                            i1$2.AdaptRxCounterModule,
                            i1$2.AdaptRxDatetimeModule,
                            i1$2.AdaptRxListBuilderModule,
                            i1$2.AdaptRxRadiobuttonModule,
                            i4.AdminSettingsModule,
                            i8.CommonModule,
                            i7.RecordGridModule,
                            i1$1.RxBusyIndicatorModule,
                            i1$1.RxDirectivesModule,
                            i1.FormsModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [
                            CognitiveConsumptionAdminComponent,
                            CognitiveConsumptionNotificationHistoryModalComponent,
                            CognitiveConsumptionNotificationModalComponent,
                            DownloadReportModalComponent
                        ]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RX_COGNITIVE_SEARCH = {
        definitionName: 'Cognitive Service Data Set Descriptor',
        resourceType: 'com.bmc.arsys.rx.services.cognitive.domain.SearchDataSource',
        queryExpression: "'1732' = 2 AND '61001' = ",
        defaultLocale: 'en',
        maxCollectionsPerProject: 5,
        datasetTypes: {
            bmcHelixPlatForm: 0,
            external: 10
        },
        searchDatasetTypeOptions: [
            {
                displayName: 'com.bmc.arsys.rx.client.admin.cognitive-search.bmc-helix-platform-data-set.label',
                datasetType: 0
            },
            {
                displayName: 'com.bmc.arsys.rx.client.admin.cognitive-search.external-data-set.label',
                datasetType: 10
            }
        ],
        externalDatasetSourceTypes: {
            rkm: '10',
            other: '20'
        },
        fields: {
            datasetId: 1730,
            datasetName: 1731,
            searchType: 1732,
            datasetError: 1733,
            dateLastSubmitted: 1735,
            bundleId: 61001,
            locale: 1737,
            dataSource: 1738,
            newDatasetId: 1740,
            searchDatasetType: 1815,
            externalDatasetSource: 1817,
            confidenceThreshold: 1821,
            projectId: 1832
        },
        datasetStatus: {
            failed: {
                id: 3,
                label: 'com.bmc.arsys.rx.client.admin.cognitive-search.failed.label',
                variant: 'danger'
            },
            inProgress: {
                id: 5,
                label: 'com.bmc.arsys.rx.client.admin.cognitive-search.in-progress.label',
                variant: 'info'
            },
            created: {
                id: 6,
                label: 'com.bmc.arsys.rx.client.admin.cognitive-search.created.label',
                variant: 'success'
            }
        },
        templateFields: {
            templateType: 1818
        },
        templateTypes: {
            webChannel: '10',
            nonWebChannel: '20'
        },
        templateDefinitionName: 'Cognitive Service Chatbot Knowledge Article Template',
        templateAssociationDefinitionName: 'Cognitive Service Data Set To Cognitive Service Chatbot Knowledge Article Template'
    };

    var dataPageType$1 = 'com.bmc.arsys.rx.application.cognitive.datapage.CognitiveSearchProjectDataPageQuery';
    var RxCognitiveSearchProjectDataPageService = /** @class */ (function (_super) {
        __extends(RxCognitiveSearchProjectDataPageService, _super);
        function RxCognitiveSearchProjectDataPageService(injector) {
            var _this = _super.call(this, injector, dataPageType$1) || this;
            _this.injector = injector;
            return _this;
        }
        return RxCognitiveSearchProjectDataPageService;
    }(i2.DataPage));
    RxCognitiveSearchProjectDataPageService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveSearchProjectDataPageService, deps: [{ token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxCognitiveSearchProjectDataPageService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveSearchProjectDataPageService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveSearchProjectDataPageService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }]; } });

    var dataPageType = 'com.bmc.arsys.rx.application.cognitive.datapage.CognitiveSearchCollectionDataPageQuery';
    var RxCognitiveSearchCollectionDataPageService = /** @class */ (function (_super) {
        __extends(RxCognitiveSearchCollectionDataPageService, _super);
        function RxCognitiveSearchCollectionDataPageService(injector) {
            var _this = _super.call(this, injector, dataPageType) || this;
            _this.injector = injector;
            return _this;
        }
        return RxCognitiveSearchCollectionDataPageService;
    }(i2.DataPage));
    RxCognitiveSearchCollectionDataPageService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveSearchCollectionDataPageService, deps: [{ token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxCognitiveSearchCollectionDataPageService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveSearchCollectionDataPageService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveSearchCollectionDataPageService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }]; } });

    var CognitiveSearchEditorAdminComponent = /** @class */ (function (_super) {
        __extends(CognitiveSearchEditorAdminComponent, _super);
        function CognitiveSearchEditorAdminComponent(formBuilder, dockedPanelContext, rxRecordInstanceService, rxNotificationService, rxBundleCacheService, rxCognitiveSearchProjectDataPageService, rxCognitiveSearchCollectionDataPageService, translateService, injector) {
            var _this = _super.call(this, dockedPanelContext, injector) || this;
            _this.formBuilder = formBuilder;
            _this.dockedPanelContext = dockedPanelContext;
            _this.rxRecordInstanceService = rxRecordInstanceService;
            _this.rxNotificationService = rxNotificationService;
            _this.rxBundleCacheService = rxBundleCacheService;
            _this.rxCognitiveSearchProjectDataPageService = rxCognitiveSearchProjectDataPageService;
            _this.rxCognitiveSearchCollectionDataPageService = rxCognitiveSearchCollectionDataPageService;
            _this.translateService = translateService;
            _this.injector = injector;
            _this.externalDatasetSourceOptions = [
                {
                    value: '10',
                    displayValue: _this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.rkm.label')
                },
                {
                    value: '20',
                    displayValue: _this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.other.label')
                }
            ];
            _this.options = {
                label: _this.translateService.instant('com.bmc.arsys.rx.client.common.record-definition-name.label'),
                definitionType: i4.RxDefinitionPickerType.Record,
                required: true
            };
            _this.searchLocaleOptions = ['en', 'ar', 'fr', 'de', 'ja', 'it', 'pt', 'es'];
            return _this;
        }
        CognitiveSearchEditorAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.isEditMode = this.dockedPanelContext.getData().isEditMode;
            this.datasetType = this.dockedPanelContext.getData().datasetType;
            this.formatDataSource = this.dockedPanelContext.getData().formatDataSource;
            this.searchDatasetForm = this.formBuilder.group({
                datasetName: null,
                description: null,
                locale: [],
                recordDefinition: null,
                projectId: [],
                collectionId: [],
                externalDatasetSource: [],
                confidenceThreshold: 0
            });
            this.collections$ = this.searchDatasetForm.controls.projectId.valueChanges.pipe(operators.distinctUntilChanged(), operators.map(function (selection) { return (_this.isExternalDataset() ? selection === null || selection === void 0 ? void 0 : selection[0] : null); }), operators.filter(Boolean), operators.switchMap(function (project) { return _this.rxCognitiveSearchCollectionDataPageService.get({
                params: { projectId: project.id }
            }); }), operators.map(function (dataPage) { return dataPage.data.sort(function (a, b) { return a.name.localeCompare(b.name); }); }), operators.startWith([]), operators.tap(function (collections) {
                if (!_this.isEditMode && _this.isExternalDataset()) {
                    _this.searchDatasetForm.controls.collectionId.setValue([]);
                    collections.length
                        ? _this.searchDatasetForm.controls.collectionId.enable()
                        : _this.searchDatasetForm.controls.collectionId.disable();
                }
            }));
            this.projects$ = this.rxCognitiveSearchProjectDataPageService.get().pipe(operators.map(function (dataPage) { return dataPage.data.sort(function (a, b) { return a.name.localeCompare(b.name); }); }), operators.startWith([]), operators.shareReplay(1), operators.tap(function () {
                if (!_this.isEditMode) {
                    _this.searchDatasetForm.controls.projectId.enable();
                }
            }), operators.map(function (projects) { return !_this.isEditMode && _this.isHelixPlatformDataset()
                ? projects.filter(function (project) { return project.collectionCount < RX_COGNITIVE_SEARCH.maxCollectionsPerProject; })
                : projects; }));
            if (this.isEditMode) {
                this.searchDatasetForm.get('datasetName').disable();
                this.searchDatasetForm.get('description').disable();
                this.searchDatasetForm.get('locale').disable();
                this.searchDatasetForm.get('recordDefinition').disable();
                this.searchDatasetForm.get('projectId').disable();
                this.searchDatasetForm.get('collectionId').disable();
                this.searchDatasetForm.get('externalDatasetSource').disable();
                var recordInstance$ = this.rxRecordInstanceService
                    .get(RX_COGNITIVE_SEARCH.definitionName, this.dockedPanelContext.getData().recordId)
                    .pipe(operators.tap(function (recordInstance) { return (_this.recordInstance = recordInstance); }));
                var subscription = rxjs.forkJoin([recordInstance$, this.projects$])
                    .pipe(operators.switchMap(function (_a) {
                    var _b = __read(_a, 2), recordInstance = _b[0], projects = _b[1];
                    var projectId = recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.projectId].value;
                    var project = projects.find(function (project) { return project.id === projectId; });
                    if (project) {
                        _this.searchDatasetForm.controls.projectId.setValue([project]);
                    }
                    else {
                        _this.searchDatasetForm.controls.projectId.setValue([
                            {
                                name: _this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.project-not-found.label'),
                                id: projectId
                            }
                        ], { emitEvent: false });
                    }
                    return project
                        ? _this.rxCognitiveSearchCollectionDataPageService.get({ params: { projectId: projectId } })
                        : _this.rxCognitiveSearchCollectionDataPageService.getEmptyDataPage();
                }), operators.map(function (dataPage) { return dataPage.data; }), operators.withLatestFrom(recordInstance$))
                    .subscribe(function (_a) {
                    var _b = __read(_a, 2), collections = _b[0], recordInstance = _b[1];
                    var collectionId = recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.datasetId].value;
                    var selectedCollection = collections.find(function (collection) { return collection.id === collectionId; });
                    _this.searchDatasetForm.controls.collectionId.setValue([
                        selectedCollection || {
                            name: _this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.collection-not-found.label'),
                            id: collectionId
                        }
                    ]);
                    _this.setFormControlValues();
                });
                this.busyConfig = {
                    busy: subscription,
                    loaderType: i1$2.LoaderType.SECTION,
                    message: 'Loading'
                };
            }
            else {
                this.searchDatasetForm.get('locale').setValue([this.searchLocaleOptions[0]]);
                this.searchDatasetForm.get('confidenceThreshold').setValue(0);
                this.searchDatasetForm.get('projectId').disable();
                this.searchDatasetForm.get('collectionId').disable();
                if (this.isHelixPlatformDataset()) {
                    this.searchDatasetForm.get('externalDatasetSource').disable();
                }
                else if (this.isExternalDataset()) {
                    this.searchDatasetForm.get('recordDefinition').disable();
                    this.searchDatasetForm
                        .get('externalDatasetSource')
                        .setValue([
                        lodash.find(this.externalDatasetSourceOptions, { value: RX_COGNITIVE_SEARCH.externalDatasetSourceTypes.rkm })
                    ]);
                }
                this.rxRecordInstanceService
                    .getNew(RX_COGNITIVE_SEARCH.definitionName)
                    .subscribe(function (recordInstance) { return (_this.recordInstance = recordInstance); });
            }
        };
        CognitiveSearchEditorAdminComponent.prototype.isDirty = function () {
            return this.searchDatasetForm.dirty;
        };
        CognitiveSearchEditorAdminComponent.prototype.isHelixPlatformDataset = function () {
            return this.datasetType === RX_COGNITIVE_SEARCH.datasetTypes.bmcHelixPlatForm;
        };
        CognitiveSearchEditorAdminComponent.prototype.isExternalDataset = function () {
            return this.datasetType === RX_COGNITIVE_SEARCH.datasetTypes.external;
        };
        CognitiveSearchEditorAdminComponent.prototype.setFormControlValues = function () {
            var status = lodash.find(RX_COGNITIVE_SEARCH.datasetStatus, {
                id: this.recordInstance.fieldInstances[i3.RX_RECORD_DEFINITION.coreFieldIds.status].value
            });
            this.statusAlert = {
                content: this.translateService.instant(status.label),
                type: 'inline',
                variant: status.variant
            };
            this.failedReasonAlert = this.recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.datasetError].value
                ? {
                    content: this.recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.datasetError].value,
                    type: 'page',
                    variant: 'warning',
                    dismissible: false
                }
                : null;
            this.searchDatasetForm
                .get('datasetName')
                .setValue(this.recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.datasetName].value);
            this.searchDatasetForm
                .get('description')
                .setValue(this.recordInstance.fieldInstances[i3.RX_RECORD_DEFINITION.coreFieldIds.description].value);
            this.searchDatasetForm
                .get('locale')
                .setValue([this.recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.locale].value]);
            if (this.isHelixPlatformDataset()) {
                this.searchDatasetForm
                    .get('recordDefinition')
                    .setValue(this.formatDataSource(this.recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.dataSource].value));
            }
            else if (this.isExternalDataset()) {
                this.searchDatasetForm.get('externalDatasetSource').setValue([
                    lodash.find(this.externalDatasetSourceOptions, {
                        value: String(this.recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.externalDatasetSource].value)
                    })
                ]);
            }
            this.searchDatasetForm
                .get('confidenceThreshold')
                .setValue(this.recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.confidenceThreshold].value);
        };
        CognitiveSearchEditorAdminComponent.prototype.optionFormatter = function (option) {
            return option.displayValue || option.name;
        };
        CognitiveSearchEditorAdminComponent.prototype.thresholdRangeValidator = function () {
            var _this = this;
            return function (control) {
                return control.value && !/^(0(\.[0-9]{1,6})?)|^(1(\.0{1,6})?)$/.test(control.value)
                    ? {
                        thresholdOutOfRange: {
                            message: _this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.range-validation.message')
                        }
                    }
                    : null;
            };
        };
        CognitiveSearchEditorAdminComponent.prototype.saveSearchDataset = function () {
            var _this = this;
            this.searchDatasetForm.markAsPristine();
            if (!this.isEditMode) {
                this.recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.searchType].value = this.translateService.instant('com.bmc.arsys.rx.client.common.search.label');
                this.recordInstance.setFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.status, RX_COGNITIVE_SEARCH.datasetStatus.inProgress.id);
                this.recordInstance.setFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.description, this.searchDatasetForm.get('description').value);
                this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.datasetId, '');
                this.recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.datasetId].value =
                    this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.datasetName, this.searchDatasetForm.get('datasetName').value);
                this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.bundleId, this.rxBundleCacheService.bundleId);
                this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.locale, this.searchDatasetForm.get('locale').value[0]);
                this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.dateLastSubmitted, moment__default["default"]());
                this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.searchDatasetType, this.datasetType);
                this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.projectId, [
                    this.searchDatasetForm.get('projectId').value[0].id
                ]);
                if (this.isExternalDataset()) {
                    this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.datasetId, [
                        this.searchDatasetForm.get('collectionId').value[0].id
                    ]);
                    this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.externalDatasetSource, this.searchDatasetForm.get('externalDatasetSource').value[0].value);
                }
                else if (this.isHelixPlatformDataset()) {
                    this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.dataSource, JSON.stringify({
                        resourceType: RX_COGNITIVE_SEARCH.resourceType,
                        recordDefinitions: [this.searchDatasetForm.get('recordDefinition').value]
                    }));
                }
                this.recordInstance.associationInstances = this.prepareAssociatedRecordInstance(this.recordInstance.fieldInstances[RX_COGNITIVE_SEARCH.fields.datasetName].value);
            }
            this.recordInstance.setFieldValue(RX_COGNITIVE_SEARCH.fields.confidenceThreshold, this.searchDatasetForm.get('confidenceThreshold').value);
            if (this.isEditMode) {
                this.rxRecordInstanceService.save(this.recordInstance).subscribe(function () { return _this.successCallback(); });
            }
            else {
                this.rxRecordInstanceService.create(this.recordInstance).subscribe(function () { return _this.successCallback(); });
            }
        };
        CognitiveSearchEditorAdminComponent.prototype.successCallback = function () {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.search-data-save-successful.message'));
            this.dockedPanelContext.close(null);
        };
        CognitiveSearchEditorAdminComponent.prototype.prepareAssociatedRecordInstance = function (datasetName) {
            var _a, _b;
            var associationOperations = lodash.set({}, 'nodeB', {
                pending: [
                    {
                        recordDefinitionName: RX_COGNITIVE_SEARCH.templateDefinitionName,
                        isNewInstance: true,
                        id: RX_COGNITIVE_SEARCH.templateFields.templateType,
                        fieldInstances: (_a = {},
                            _a[RX_COGNITIVE_SEARCH.templateFields.templateType] = {
                                id: RX_COGNITIVE_SEARCH.templateFields.templateType,
                                value: RX_COGNITIVE_SEARCH.templateTypes.webChannel
                            },
                            _a[i3.RX_RECORD_DEFINITION.coreFieldIds.description] = {
                                id: i3.RX_RECORD_DEFINITION.coreFieldIds.description,
                                value: 'Template for ' + datasetName
                            },
                            _a)
                    },
                    {
                        recordDefinitionName: RX_COGNITIVE_SEARCH.templateDefinitionName,
                        isNewInstance: true,
                        id: RX_COGNITIVE_SEARCH.templateFields.templateType,
                        fieldInstances: (_b = {},
                            _b[RX_COGNITIVE_SEARCH.templateFields.templateType] = {
                                id: RX_COGNITIVE_SEARCH.templateFields.templateType,
                                value: RX_COGNITIVE_SEARCH.templateTypes.nonWebChannel
                            },
                            _b[i3.RX_RECORD_DEFINITION.coreFieldIds.description] = {
                                id: i3.RX_RECORD_DEFINITION.coreFieldIds.description,
                                value: 'Template for ' + datasetName
                            },
                            _b)
                    }
                ]
            });
            return lodash.set({}, RX_COGNITIVE_SEARCH.templateAssociationDefinitionName, associationOperations);
        };
        CognitiveSearchEditorAdminComponent.prototype.cancel = function () {
            this.dockedPanelContext.dismiss(i1$2.DismissReasons.CLOSE_BTN);
        };
        return CognitiveSearchEditorAdminComponent;
    }(i1$1.RxModalClass));
    CognitiveSearchEditorAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveSearchEditorAdminComponent, deps: [{ token: i1__namespace$3.FormBuilder }, { token: i1__namespace$1.DockedPanelContext }, { token: i3__namespace$2.RxRecordInstanceService }, { token: i2__namespace.RxNotificationService }, { token: i2__namespace.RxBundleCacheService }, { token: RxCognitiveSearchProjectDataPageService }, { token: RxCognitiveSearchCollectionDataPageService }, { token: i4__namespace.TranslateService }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CognitiveSearchEditorAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveSearchEditorAdminComponent, selector: "rx-cognitive-search-editor", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"dp-body\" [ngBusy]=\"busyConfig\">\n  <div class=\"mb-1\" *ngIf=\"isEditMode && statusAlert\">\n    <label class=\"form-control-label\">\n      {{ 'com.bmc.arsys.rx.client.admin.cognitive-search.status.label' | translate }}\n    </label>\n    <adapt-alert [config]=\"statusAlert\"></adapt-alert>\n  </div>\n\n  <div class=\"mb-1\" *ngIf=\"isEditMode && failedReasonAlert\">\n    <label class=\"form-control-label\">\n      {{ 'com.bmc.arsys.rx.client.common.error.label' | translate }}\n    </label>\n    <adapt-alert [config]=\"failedReasonAlert\"></adapt-alert>\n  </div>\n\n  <form [formGroup]=\"searchDatasetForm\">\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      rx-id=\"dataset-name\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.data-set-name.label' | translate }}\"\n      formControlName=\"datasetName\"\n      required=\"true\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      rx-id=\"description\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.description.label' | translate }}\"\n      formControlName=\"description\"\n      required=\"true\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.locale.label' | translate }}\"\n      rx-id=\"locale\"\n      formControlName=\"locale\"\n      [options]=\"searchLocaleOptions\"\n      required=\"true\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.project-id.label' | translate }}\"\n      rx-id=\"project-id\"\n      formControlName=\"projectId\"\n      [options]=\"projects$ | async\"\n      [optionFormatter]=\"optionFormatter\"\n      required=\"true\"\n      [tooltip]=\"\n        isHelixPlatformDataset()\n          ? {\n              iconName: 'question_circle_o',\n              content: 'com.bmc.arsys.rx.client.admin.cognitive-search.project-id.tooltip' | translate,\n              placement: 'right',\n              popoverMode: true\n            }\n          : null\n      \"\n    >\n    </adapt-rx-select>\n\n    <rx-definition-picker\n      *ngIf=\"isHelixPlatformDataset()\"\n      class=\"form-group d-block\"\n      [options]=\"options\"\n      formControlName=\"recordDefinition\"\n      rx-id=\"record-definition\"\n      required=\"true\"\n    >\n    </rx-definition-picker>\n\n    <adapt-rx-select\n      *ngIf=\"isExternalDataset()\"\n      class=\"form-group d-block\"\n      rx-id=\"collection-id\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.collection-id.label' | translate }}\"\n      formControlName=\"collectionId\"\n      [options]=\"collections$ | async\"\n      [optionFormatter]=\"optionFormatter\"\n      required=\"true\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-select\n      *ngIf=\"isExternalDataset()\"\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.external-data-set-source.label' | translate }}\"\n      rx-id=\"external-data-set-source\"\n      formControlName=\"externalDatasetSource\"\n      [options]=\"externalDatasetSourceOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      required=\"true\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-counter\n      adaptRange\n      class=\"form-group d-block\"\n      rx-id=\"confidence-threshold\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.confidence-threshold.label' | translate }}\"\n      [max]=\"1\"\n      [min]=\"0\"\n      [formControl]=\"searchDatasetForm.controls.confidenceThreshold\"\n      [rxCustomValidators]=\"thresholdRangeValidator()\"\n      [step]=\"0.1\"\n      [tooltip]=\"{\n        iconName: 'question_circle_o',\n        content: popoverContent,\n        placement: 'right',\n        popoverMode: true\n      }\"\n    >\n    </adapt-rx-counter>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button\n    type=\"button\"\n    adapt-button\n    btn-type=\"primary\"\n    rx-id=\"save-button\"\n    class=\"mr-2\"\n    [disabled]=\"searchDatasetForm.pristine || searchDatasetForm.invalid\"\n    (click)=\"saveSearchDataset()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button type=\"button\" adapt-button (click)=\"cancel()\" btn-type=\"secondary\" rx-id=\"cancel-button\">Cancel</button>\n</div>\n\n<ng-template #popoverContent>\n  <div\n    style=\"white-space: pre-wrap\"\n    [innerHTML]=\"'com.bmc.arsys.rx.client.admin.cognitive-search.data-set-range.tooltip' | translate\"\n  ></div>\n</ng-template>\n", components: [{ type: i1__namespace$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i4__namespace$1.RxDefinitionPickerComponent, selector: "rx-definition-picker", inputs: ["options", "isDisabled"] }, { type: i1__namespace$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$1.AdaptBusyDirective, selector: "[adapt-busy], [ngBusy]", inputs: ["ngBusy", "adaptRadarDisableEventSending", "busyPromise", "determinate"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$1.AdaptRangeValidatorDirective, selector: "[adaptRange][ngModel],[adaptRange][formControl]", inputs: ["adaptRange", "adaptRangeMessageFn"] }, { type: i1__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i1__namespace.RxCustomValidatorsDirective, selector: "[rxCustomValidators][ngModel],[rxCustomValidators][formControl]", inputs: ["rxCustomValidators"] }], pipes: { "translate": i4__namespace.TranslatePipe, "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveSearchEditorAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-cognitive-search-editor',
                        templateUrl: './cognitive-search-editor.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }, { type: i1__namespace$1.DockedPanelContext }, { type: i3__namespace$2.RxRecordInstanceService }, { type: i2__namespace.RxNotificationService }, { type: i2__namespace.RxBundleCacheService }, { type: RxCognitiveSearchProjectDataPageService }, { type: RxCognitiveSearchCollectionDataPageService }, { type: i4__namespace.TranslateService }, { type: i0__namespace.Injector }]; } });

    var CognitiveSearchAdminComponent = /** @class */ (function (_super) {
        __extends(CognitiveSearchAdminComponent, _super);
        function CognitiveSearchAdminComponent(formBuilder, rxModalService, rxCurrentUserService, rxBundleCacheService, rxNotificationService, rxRecordInstanceService, rxDefinitionNameService, translateService, rxRecordInstanceDataPageService) {
            var _this = _super.call(this) || this;
            _this.formBuilder = formBuilder;
            _this.rxModalService = rxModalService;
            _this.rxCurrentUserService = rxCurrentUserService;
            _this.rxBundleCacheService = rxBundleCacheService;
            _this.rxNotificationService = rxNotificationService;
            _this.rxRecordInstanceService = rxRecordInstanceService;
            _this.rxDefinitionNameService = rxDefinitionNameService;
            _this.translateService = translateService;
            _this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            _this.isAdministrator = _this.rxCurrentUserService.isAdministrator();
            return _this;
        }
        CognitiveSearchAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.searchDatasetTypes = RX_COGNITIVE_SEARCH.searchDatasetTypeOptions.map(function (dataSetType) { return (Object.assign(Object.assign({}, dataSetType), { displayName: _this.translateService.instant(dataSetType.displayName) })); });
            this.gridConfig = rxjs.of({
                actionButtons: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                        style: 'tertiary',
                        icon: 'trash',
                        actions: [
                            {
                                name: this.deleteSearchDataset.bind(this)
                            }
                        ]
                    }
                ],
                enableFiltering: true,
                recordDefinitionName: RX_COGNITIVE_SEARCH.definitionName,
                enableRowSelection: i7.RowSelectionMode.Multiple,
                getData: function (queryParams) { return _this.getData(queryParams); },
                columns: this.getColumns(),
                filterExpression: RX_COGNITIVE_SEARCH.queryExpression + " \"" + this.rxBundleCacheService.bundleId + "\"",
                styles: 'flex-fill'
            });
        };
        CognitiveSearchAdminComponent.prototype.getData = function (queryParams) {
            return this.rxRecordInstanceDataPageService.post({
                params: Object.assign({}, lodash.omit(queryParams, ['searchText']))
            });
        };
        CognitiveSearchAdminComponent.prototype.createNewSearchDataset = function (datasetType) {
            this.openCognitiveSearchEditor(false, datasetType);
        };
        CognitiveSearchAdminComponent.prototype.editSearchDataset = function (selectedRecord) {
            if (!this.isAdministrator) {
                this.rxNotificationService.addWarningMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.warning.message'));
            }
            else {
                this.openCognitiveSearchEditor(true, selectedRecord[RX_COGNITIVE_SEARCH.fields.searchDatasetType], selectedRecord[i3.RX_RECORD_DEFINITION.coreFieldIds.id]);
            }
        };
        CognitiveSearchAdminComponent.prototype.deleteSearchDataset = function () {
            var _this = this;
            this.rxModalService
                .confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.delete-confirmation.message')
            })
                .then(function (result) {
                if (result) {
                    var deleteRequests$_1 = [];
                    lodash.map(_this.grid.api.getSelectedRows(), function (record) {
                        deleteRequests$_1.push(_this.rxRecordInstanceService.delete(RX_COGNITIVE_SEARCH.definitionName, record[i3.RX_RECORD_DEFINITION.coreFieldIds.id]));
                    });
                    rxjs.forkJoin(deleteRequests$_1).subscribe(function () {
                        _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.data-set-deletion.message'));
                        _this.grid.api.refresh().subscribe();
                    });
                }
            });
        };
        CognitiveSearchAdminComponent.prototype.formatDataSource = function (dataSource) {
            var _this = this;
            return dataSource
                ? lodash.map(JSON.parse(dataSource).recordDefinitions, function (recordDefinitionName) { return _this.rxDefinitionNameService.getDisplayName(recordDefinitionName); }).join(', ')
                : '';
        };
        CognitiveSearchAdminComponent.prototype.getDatasetType = function (searchDatasetType) {
            return lodash.find(this.searchDatasetTypes, { datasetType: searchDatasetType }).displayName;
        };
        CognitiveSearchAdminComponent.prototype.getColumns = function () {
            var _this = this;
            return [
                {
                    index: 0,
                    fieldId: String(RX_COGNITIVE_SEARCH.fields.datasetName),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.data-set-name.label'),
                    clickable: true,
                    actions: [
                        {
                            name: function (previousAction, selectedRow) {
                                _this.editSearchDataset(selectedRow);
                            }
                        }
                    ]
                },
                {
                    index: 1,
                    fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.status),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.status.label')
                },
                {
                    index: 2,
                    fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.description),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.description.label')
                },
                {
                    index: 3,
                    fieldId: String(RX_COGNITIVE_SEARCH.fields.searchDatasetType),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.type.title'),
                    cellTemplate: this.datasetTypeTemplate
                },
                {
                    index: 4,
                    fieldId: String(RX_COGNITIVE_SEARCH.fields.locale),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.locale.label')
                },
                {
                    index: 5,
                    fieldId: String(RX_COGNITIVE_SEARCH.fields.dataSource),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.record-definition.label'),
                    cellTemplate: this.definitionNameCellTemplate
                },
                {
                    index: 6,
                    fieldId: String(RX_COGNITIVE_SEARCH.fields.confidenceThreshold),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.confidence-threshold.label')
                },
                {
                    index: 7,
                    fieldId: String(RX_COGNITIVE_SEARCH.fields.datasetId),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.data-set-id.title'),
                    visible: false
                },
                {
                    index: 8,
                    fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.modifiedDate),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.date-modified.title'),
                    visible: false
                },
                {
                    index: 9,
                    fieldId: String(RX_COGNITIVE_SEARCH.fields.searchType),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.search-type.title'),
                    visible: false
                },
                {
                    index: 10,
                    fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.displayId),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.request-id.title'),
                    visible: false
                },
                {
                    index: 11,
                    fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.id),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.instance-id.title'),
                    visible: false
                },
                {
                    index: 12,
                    fieldId: String(RX_COGNITIVE_SEARCH.fields.datasetError),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.error.label'),
                    visible: false
                },
                {
                    index: 13,
                    fieldId: String(RX_COGNITIVE_SEARCH.fields.projectId),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.project-id.title'),
                    visible: false
                }
            ];
        };
        CognitiveSearchAdminComponent.prototype.openCognitiveSearchEditor = function (isEditMode, datasetType, recordId) {
            var _this = this;
            return this.rxModalService
                .openDockedPanel({
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.cognitive-search-data-set.title'),
                content: CognitiveSearchEditorAdminComponent,
                data: {
                    isEditMode: isEditMode,
                    datasetType: datasetType,
                    formatDataSource: this.formatDataSource.bind(this),
                    recordId: recordId
                }
            })
                .then(function () {
                _this.grid.api.refresh().subscribe();
            })
                .catch(lodash.noop);
        };
        return CognitiveSearchAdminComponent;
    }(i4$2.BaseViewComponent));
    CognitiveSearchAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveSearchAdminComponent, deps: [{ token: i1__namespace$3.FormBuilder }, { token: i1__namespace.RxModalService }, { token: i2__namespace.RxCurrentUserService }, { token: i2__namespace.RxBundleCacheService }, { token: i2__namespace.RxNotificationService }, { token: i3__namespace$2.RxRecordInstanceService }, { token: i2__namespace.RxDefinitionNameService }, { token: i4__namespace.TranslateService }, { token: i3__namespace$2.RxRecordInstanceDataPageService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CognitiveSearchAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveSearchAdminComponent, selector: "rx-cognitive-search", viewQueries: [{ propertyName: "grid", first: true, predicate: ["grid"], descendants: true, static: true }, { propertyName: "dropdownButton", first: true, predicate: ["dropdownButton"], descendants: true, static: true }, { propertyName: "searchDatasetConfigurationTemplate", first: true, predicate: ["searchDatasetConfigurationTemplate"], descendants: true, static: true }, { propertyName: "definitionNameCellTemplate", first: true, predicate: ["definitionNameCellTemplate"], descendants: true, static: true }, { propertyName: "datasetTypeTemplate", first: true, predicate: ["datasetTypeTemplate"], descendants: true, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.header.title' | translate }}\">\n  <ng-container>\n    <div class=\"dropdown\" adaptDropdown>\n      <button\n        adapt-button\n        #dropdownButton\n        adaptDropdownToggle\n        type=\"button\"\n        btn-type=\"tertiary\"\n        class=\"d-icon-plus_circle align-self-start\"\n        rx-id=\"new-button\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n      </button>\n\n      <div class=\"dropdown-menu\" adaptDropdownMenu>\n        <button\n          *ngFor=\"let dataset of searchDatasetTypes\"\n          class=\"dropdown-item\"\n          (click)=\"createNewSearchDataset(dataset.datasetType)\"\n          [disabled]=\"!isAdministrator\"\n        >\n          {{ dataset.displayName | translate }}\n        </button>\n      </div>\n    </div>\n\n    <rx-record-grid #grid [config]=\"gridConfig\"></rx-record-grid>\n  </ng-container>\n</rx-admin-settings>\n\n<ng-template #definitionNameCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  {{ formatDataSource(dataItem[column.field]) }}\n</ng-template>\n\n<ng-template #datasetTypeTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  {{ getDatasetType(dataItem[column.field]) }}\n</ng-template>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptDropdownDirective, selector: "adapt-dropdown, [adaptDropdown]", inputs: ["autoClose", "customClass", "closeOnEscape", "placement", "animationPlacement", "holdFocusInMenu", "holdFocusOnOpen", "autoFocusFirst", "restoreFocusAfterClose", "focusNextElementAfterClose", "appendToBody", "appendTo", "positionTo", "anchorPositionTrackingIntervalMs", "enableAnchorPositionTracking", "recalculatePositionOnElementResize", "setMobileState", "mobileView"], outputs: ["onOpen", "onClose", "anchorPositionChange", "popupAnimationDone"], exportAs: ["adaptDropdown"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], directives: [{ type: i1__namespace$1.AdaptDropdownToggleDirective, selector: "[adaptDropdownToggle]", inputs: ["showCaret", "dropdownTogglerType"] }, { type: i1__namespace$1.AdaptDropdownMenuDirective, selector: "[adaptDropdownMenu]" }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveSearchAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-cognitive-search',
                        templateUrl: './cognitive-search.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }, { type: i1__namespace.RxModalService }, { type: i2__namespace.RxCurrentUserService }, { type: i2__namespace.RxBundleCacheService }, { type: i2__namespace.RxNotificationService }, { type: i3__namespace$2.RxRecordInstanceService }, { type: i2__namespace.RxDefinitionNameService }, { type: i4__namespace.TranslateService }, { type: i3__namespace$2.RxRecordInstanceDataPageService }]; }, propDecorators: { grid: [{
                    type: i0.ViewChild,
                    args: ['grid', { static: true }]
                }], dropdownButton: [{
                    type: i0.ViewChild,
                    args: ['dropdownButton', { static: true }]
                }], searchDatasetConfigurationTemplate: [{
                    type: i0.ViewChild,
                    args: ['searchDatasetConfigurationTemplate', { static: true }]
                }], definitionNameCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['definitionNameCellTemplate', { static: true }]
                }], datasetTypeTemplate: [{
                    type: i0.ViewChild,
                    args: ['datasetTypeTemplate', { static: true }]
                }] } });

    var CognitiveSearchRegistrationModule = /** @class */ (function () {
        function CognitiveSearchRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-cognitive-search',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(CognitiveSearchAdminComponent),
                name: 'Cognitive search',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return CognitiveSearchRegistrationModule;
    }());
    CognitiveSearchRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveSearchRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CognitiveSearchRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveSearchRegistrationModule, declarations: [CognitiveSearchAdminComponent, CognitiveSearchEditorAdminComponent], imports: [i8.CommonModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptDropdownModule,
            i1$2.AdaptRxCounterModule,
            i1$2.AdaptRxSelectModule,
            i1$2.AdaptRxTextfieldModule,
            i1.ReactiveFormsModule,
            i7.RecordGridModule,
            i1$1.RxDirectivesModule,
            i4.RxDefinitionPickerModule,
            i4$1.TranslateModule,
            i4.AdminSettingsModule,
            i1$2.AdaptRxLabelModule,
            i1$2.AdaptRxValidatorsModule,
            i1$2.AdaptAlertModule,
            i1$2.AdaptBusyModule] });
    CognitiveSearchRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveSearchRegistrationModule, imports: [[
                i8.CommonModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptDropdownModule,
                i1$2.AdaptRxCounterModule,
                i1$2.AdaptRxSelectModule,
                i1$2.AdaptRxTextfieldModule,
                i1.ReactiveFormsModule,
                i7.RecordGridModule,
                i1$1.RxDirectivesModule,
                i4.RxDefinitionPickerModule,
                i4$1.TranslateModule,
                i4.AdminSettingsModule,
                i1$2.AdaptRxLabelModule,
                i1$2.AdaptRxValidatorsModule,
                i1$2.AdaptAlertModule,
                i1$2.AdaptBusyModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveSearchRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [CognitiveSearchAdminComponent, CognitiveSearchEditorAdminComponent],
                        imports: [
                            i8.CommonModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptDropdownModule,
                            i1$2.AdaptRxCounterModule,
                            i1$2.AdaptRxSelectModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1.ReactiveFormsModule,
                            i7.RecordGridModule,
                            i1$1.RxDirectivesModule,
                            i4.RxDefinitionPickerModule,
                            i4$1.TranslateModule,
                            i4.AdminSettingsModule,
                            i1$2.AdaptRxLabelModule,
                            i1$2.AdaptRxValidatorsModule,
                            i1$2.AdaptAlertModule,
                            i1$2.AdaptBusyModule
                        ],
                        entryComponents: [CognitiveSearchAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var passwordMask = '********';
    var urlPattern = /^((http[s]?):\/)\/?([^:\/\s]+)((\/\w+)*\/)?([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$/;
    var RX_COGNITIVE_SERVICE = {
        passwordMask: passwordMask,
        credentialsProvider: 'WATSON',
        nativeProvider: 'NATIVE',
        chatbot: {
            chatContextVariablesProcessName: 'chatContextVariablesProcessName',
            systemSettings: {
                chatSessionIdleTimeout: 900,
                chatUserIdleTimeout: 30,
                chatbotNotificationsIdleTime: 900,
                chatbotNotificationsMaxTime: 3600,
                chatContextVariablesProcessName: '',
                removePoweredByBmcHelix: 0
            }
        },
        cognitiveAdministrationCredentials: {
            systemSettingsKey: 'cognitiveAdminTenantCredential',
            cognitiveAdminPlatformApiKey: 'cognitiveAdminPlatformApiKey',
            payload: {
                WATSON: {
                    cognitiveAdminPlatformApiKey: passwordMask
                }
            }
        },
        connections: {
            systemSettingKeys: {
                helixPortalUrl: 'helixPortalUrl',
                helixServiceCredential: 'helixServiceCredential',
                cognitiveServiceCredential: 'cognitiveServiceCredential',
                classificationServiceProvider: 'classificationServiceProvider',
                translationServiceProvider: 'translationServiceProvider',
                serviceAccountCredential: 'gcpServiceCredential',
                google: 'gcpTranslationServiceCredential',
                microsoft: 'microsoftServiceCredential'
            },
            cognitiveServiceCredentialKeys: {
                classification: 'naturalLanguageClassifierAPIKey',
                discovery: 'searchAPIKey',
                toneAnalyzer: 'toneAnalyzerAPIKey'
            },
            payload: {
                helixClassifierKey: '',
                helixClassifierSecret: '',
                naturalLanguageClassifierAPIKey: '',
                searchAPIKey: '',
                toneAnalyzerAPIKey: '',
                serviceAccountCredentials: '',
                apiKey: ''
            },
            serviceDefinitions: {
                helixClassifier: {
                    id: 'helixClassifier',
                    title: 'com.bmc.arsys.rx.client.admin.cognitive-service.helix-ade.title',
                    isOpen: true,
                    isApiKeyTest: true,
                    serviceType: 'NATURAL_LANGUAGE_CLASSIFIER',
                    fields: [
                        {
                            label: 'com.bmc.arsys.rx.client.admin.cognitive-service.helix-portal-url.label',
                            name: 'helixPortalUrl',
                            readonly: true,
                            type: 'text',
                            required: false
                        },
                        {
                            name: 'helixClassifierKey',
                            label: 'com.bmc.arsys.rx.client.admin.cognitive-service.access-key.label',
                            type: 'text',
                            required: true,
                            rxId: 'accessKey'
                        },
                        {
                            name: 'helixClassifierSecret',
                            label: 'com.bmc.arsys.rx.client.admin.cognitive-service.secret-key.label',
                            type: 'password',
                            required: true,
                            rxId: 'secretKey'
                        }
                    ]
                },
                classification: {
                    id: 'classification',
                    title: 'com.bmc.arsys.rx.client.admin.cognitive-service.ibm-watson-assistant.title',
                    model: 'naturalLanguageClassifierAPIKey',
                    isOpen: true,
                    isApiKeyTest: true,
                    serviceType: 'NATURAL_LANGUAGE_CLASSIFIER',
                    fields: [
                        {
                            name: 'naturalLanguageClassifierAPIKey',
                            label: 'com.bmc.arsys.rx.client.admin.cognitive-service.api-key.label',
                            type: 'password',
                            required: true,
                            rxId: 'api-key'
                        }
                    ]
                },
                serviceAccountCredentials: {
                    id: 'serviceAccountCredentials',
                    title: 'com.bmc.arsys.rx.client.admin.cognitive-service.bmc-native.title',
                    model: 'serviceAccountCredentials',
                    isOpen: true,
                    isApiKeyTest: true,
                    serviceType: 'NATURAL_LANGUAGE_CLASSIFIER',
                    fields: [
                        {
                            name: 'serviceAccountCredentials',
                            label: 'com.bmc.arsys.rx.client.admin.cognitive-service.service-account-credentials.api-key.label',
                            type: 'json',
                            required: true,
                            rxId: 'api-key',
                            jsonValidatorErrorMessage: 'Credentials are invalid.'
                        }
                    ]
                },
                discovery: {
                    id: 'discovery',
                    title: 'com.bmc.arsys.rx.client.admin.cognitive-service.ibm-watson-discovery.title',
                    model: 'searchAPIKey',
                    isOpen: false,
                    isApiKeyTest: true,
                    serviceType: 'SEARCH',
                    fields: [
                        {
                            name: 'searchAPIKey',
                            label: 'com.bmc.arsys.rx.client.admin.cognitive-service.api-key.label',
                            type: 'password',
                            required: true,
                            rxId: 'api-key'
                        }
                    ]
                },
                toneAnalyzer: {
                    id: 'toneAnalyzer',
                    title: 'com.bmc.arsys.rx.client.admin.cognitive-service.ibm-watson-tone-analyzer.title',
                    model: 'toneAnalyzerAPIKey',
                    isOpen: false,
                    isApiKeyTest: true,
                    serviceType: 'TONE_ANALYZER',
                    fields: [
                        {
                            name: 'toneAnalyzerAPIKey',
                            label: 'com.bmc.arsys.rx.client.admin.cognitive-service.api-key.label',
                            type: 'password',
                            required: true,
                            rxId: 'api-key'
                        }
                    ]
                },
                microsoft: {
                    id: 'microsoft',
                    title: 'com.bmc.arsys.rx.client.admin.cognitive-service.microsoft-translator.title',
                    isOpen: false,
                    isApiKeyTest: false,
                    fields: [
                        {
                            name: 'apiKey',
                            label: 'com.bmc.arsys.rx.client.admin.cognitive-service.service-account-credentials.microsoft-azure-api-key.label',
                            type: 'password',
                            required: true,
                            rxId: 'microsoft-azure-api-key'
                        },
                        {
                            name: 'serviceURL',
                            label: 'com.bmc.arsys.rx.client.admin.cognitive-service.service-account-credentials.service-url.label',
                            type: 'text',
                            required: true,
                            pattern: urlPattern,
                            rxId: 'microsoft-translator-service-url'
                        },
                        {
                            name: 'authURL',
                            label: 'com.bmc.arsys.rx.client.admin.cognitive-service.service-account-credentials.oauth-url.label',
                            type: 'text',
                            required: true,
                            pattern: urlPattern,
                            rxId: 'microsoft-translator-oauth-url'
                        }
                    ]
                },
                google: {
                    id: 'google',
                    title: 'com.bmc.arsys.rx.client.admin.cognitive-service.google-translation.title',
                    model: 'apiKey',
                    isOpen: false,
                    isApiKeyTest: false,
                    fields: [
                        {
                            name: 'apiKey',
                            label: 'com.bmc.arsys.rx.client.admin.cognitive-service.google-cloud-service-key.label',
                            type: 'json',
                            required: true,
                            rxId: 'google-cloud-service-key',
                            jsonValidatorErrorMessage: 'Service key is invalid.'
                        }
                    ]
                }
            }
        },
        cognitiveServiceRegions: {
            systemSettingsKey: 'cognitiveServiceRegionTenantConfiguration',
            settings: [
                { id: 'naturalLanguageClassifier', name: 'Natural language classification' },
                { id: 'conversation', name: 'Chatbot' },
                { id: 'search', name: 'Cognitive search' },
                { id: 'toneAnalyzer', name: 'Tone analysis' }
            ]
        },
        toneAnalyzer: {
            systemSettingsKey: 'toneScoreThreshold'
        },
        summarization: {
            systemSettingsKey: 'summarizationServiceTenantConfiguration'
        },
        onboard: {
            cognitiveProvidersList: [
                {
                    id: 'watson',
                    name: 'IBM Watson'
                }
            ],
            providers: {
                watson: 'WATSON'
            },
            providerServices: {
                watson: {
                    naturalLanguageClassifier: {
                        id: 'naturalLanguageClassifier',
                        apiKeyPropertyName: 'naturalLanguageClassifierAPIKey',
                        regionPropertyName: 'naturalLanguageClassifierRegion',
                        switchLabel: 'com.bmc.arsys.rx.client.admin.cognitive-service.ibm-watson-assistant.title'
                    },
                    conversation: {
                        id: 'conversation',
                        apiKeyPropertyName: 'conversationAPIKey',
                        regionPropertyName: 'conversationRegion',
                        switchLabel: 'com.bmc.arsys.rx.client.admin.cognitive-service.ibm-watson-assistant-for-chatbot.message',
                        tooltipText: 'com.bmc.arsys.rx.client.admin.cognitive-service.provider.conversation.tooltip'
                    },
                    toneAnalyzer: {
                        id: 'toneAnalyzer',
                        apiKeyPropertyName: 'toneAnalyzerAPIKey',
                        regionPropertyName: 'toneAnalyzerRegion',
                        switchLabel: 'com.bmc.arsys.rx.client.admin.cognitive-service.ibm-watson-tone-analyzer.title'
                    }
                }
            }
        },
        cognitiveServicesList: [
            {
                id: 'chatbot',
                name: 'com.bmc.arsys.rx.client.admin.chatbots.chatbot.title'
            },
            {
                id: 'cognitiveAdministrationCredentials',
                name: 'com.bmc.arsys.rx.client.admin.cognitive-service.cognitive-administration-credentials.title'
            },
            {
                id: 'connections',
                name: 'com.bmc.arsys.rx.client.admin.cognitive-service.cognitive-service-connections.title'
            },
            {
                id: 'summarization',
                name: 'com.bmc.arsys.rx.client.admin.summarization-service-configuration.title'
            },
            {
                id: 'cognitiveServiceRegions',
                name: 'com.bmc.arsys.rx.client.admin.cognitive-service.regions.title'
            },
            {
                id: 'toneAnalyzerConfiguration',
                name: 'com.bmc.arsys.rx.client.admin.cognitive-service.tone-analyzer.title'
            }
        ],
        regionsList: [
            {
                id: 'EU_DE',
                name: 'com.bmc.arsys.rx.client.admin.cognitive-service.region.germany.label'
            },
            {
                id: 'AU_SYD',
                name: 'com.bmc.arsys.rx.client.admin.cognitive-service.region.sydney.label'
            },
            {
                id: 'US_EAST',
                name: 'com.bmc.arsys.rx.client.admin.cognitive-service.region.us-east.label'
            },
            {
                id: 'US_SOUTH',
                name: 'com.bmc.arsys.rx.client.admin.cognitive-service.region.us-south.label'
            },
            {
                id: 'EU_GB',
                name: 'com.bmc.arsys.rx.client.admin.cognitive-service.region.uk.label'
            }
        ],
        notificationMessages: {
            chatProviderSettingsSaved: 'com.bmc.arsys.rx.client.admin.cognitive-service.provider.chat-provider-settings-saved.message',
            cognitiveAdministrationCredentialsSaved: 'com.bmc.arsys.rx.client.admin.cognitive-service.provider.cognitive-administration-credentials-saved.message',
            toneAnalyzerConfigurationSaved: 'com.bmc.arsys.rx.client.admin.cognitive-service.provider.tone-analyzer-configuration-saved.message',
            serviceRegionConfigurationSaved: 'com.bmc.arsys.rx.client.admin.cognitive-service.provider.service-region-configuration-saved.message',
            serviceConnectionSaved: 'com.bmc.arsys.rx.client.admin.cognitive-service.provider.service-connection-saved.message',
            summarizationConfigurationSaved: 'com.bmc.arsys.rx.client.admin.cognitive-service.provider.summarization-configuration-saved.message',
            serviceOnboarded: 'com.bmc.arsys.rx.client.admin.cognitive-service.provider.service-onboarded.message'
        }
    };

    var systemConfigurationDataPageQuery = 'com.bmc.arsys.rx.application.common.datapage.SystemConfigurationDataPageQuery';
    var RxCognitiveServiceSystemConfigurationDataPageService = /** @class */ (function (_super) {
        __extends(RxCognitiveServiceSystemConfigurationDataPageService, _super);
        function RxCognitiveServiceSystemConfigurationDataPageService(injector) {
            var _this = _super.call(this, injector, systemConfigurationDataPageQuery) || this;
            _this.injector = injector;
            return _this;
        }
        return RxCognitiveServiceSystemConfigurationDataPageService;
    }(i2.DataPage));
    RxCognitiveServiceSystemConfigurationDataPageService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveServiceSystemConfigurationDataPageService, deps: [{ token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxCognitiveServiceSystemConfigurationDataPageService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveServiceSystemConfigurationDataPageService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveServiceSystemConfigurationDataPageService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }]; } });

    var RxCognitiveServiceService = /** @class */ (function () {
        function RxCognitiveServiceService(httpClient, rxCognitiveServiceSystemConfigurationDataPageService, rxProcessDefinitionDataPageService) {
            this.httpClient = httpClient;
            this.rxCognitiveServiceSystemConfigurationDataPageService = rxCognitiveServiceSystemConfigurationDataPageService;
            this.rxProcessDefinitionDataPageService = rxProcessDefinitionDataPageService;
        }
        RxCognitiveServiceService.prototype.filterMaskPassword = function (password) {
            return password === RX_COGNITIVE_SERVICE.passwordMask ? '' : password;
        };
        RxCognitiveServiceService.prototype.getChatbotProcessDefinitionNames = function () {
            return this.rxProcessDefinitionDataPageService
                .get({
                headers: {
                    'default-bundle-scope': i2.RX_APPLICATION.chatbotBundleId
                },
                params: {
                    propertySelection: ['name']
                }
            })
                .pipe(operators.map(function (response) { return lodash.map(response.data, 'name'); }));
        };
        RxCognitiveServiceService.prototype.getSystemSettings = function (settingList) {
            return this.rxCognitiveServiceSystemConfigurationDataPageService.get({
                params: { name: settingList.join(',') }
            });
        };
        RxCognitiveServiceService.prototype.testConnection = function (requestPayload) {
            return this.httpClient.post(i2.RX_RESOURCE_URLS.command, requestPayload);
        };
        return RxCognitiveServiceService;
    }());
    RxCognitiveServiceService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveServiceService, deps: [{ token: i1__namespace$2.HttpClient }, { token: RxCognitiveServiceSystemConfigurationDataPageService }, { token: i3__namespace$4.RxProcessDefinitionDataPageService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxCognitiveServiceService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveServiceService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveServiceService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }, { type: RxCognitiveServiceSystemConfigurationDataPageService }, { type: i3__namespace$4.RxProcessDefinitionDataPageService }]; } });

    var CognitiveServiceChatbotComponent = /** @class */ (function () {
        function CognitiveServiceChatbotComponent(formBuilder, rxCognitiveServiceService, rxDefinitionNameService, rxNotificationService, rxSystemConfigurationService, translateService) {
            var _this = this;
            this.formBuilder = formBuilder;
            this.rxCognitiveServiceService = rxCognitiveServiceService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxNotificationService = rxNotificationService;
            this.rxSystemConfigurationService = rxSystemConfigurationService;
            this.translateService = translateService;
            this.initialChatbotProviderValues = lodash.cloneDeep(RX_COGNITIVE_SERVICE.chatbot.systemSettings);
            this.chatbotProcessDefinitionNameOptions = [];
            this.defaultSelection = this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');
            this.approverSelectionTooltip = {
                popoverMode: true,
                iconName: 'question_circle_o',
                placement: 'right',
                content: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-service-component.user-idle.tooltip')
            };
            this.chatbotNotificationsIdleTimeTooltip = {
                popoverMode: true,
                iconName: 'question_circle_o',
                placement: 'right',
                content: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-service-component.proactive-chatbot-notifications-idle-time.tooltip')
            };
            this.chatbotNotificationsMaxTimeTooltip = {
                popoverMode: true,
                iconName: 'question_circle_o',
                placement: 'right',
                content: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-service-component.proactive-chatbot-notifications-max-time.tooltip')
            };
            this.optionFormatter = function (processDefinitionNameOption) {
                return lodash.get(processDefinitionNameOption, 'name', _this.defaultSelection);
            };
        }
        CognitiveServiceChatbotComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.chatbotProvidersForm = this.formBuilder.group({
                chatSessionIdleTimeout: RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatSessionIdleTimeout,
                chatUserIdleTimeout: RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatUserIdleTimeout,
                chatContextVariablesProcessName: [],
                chatbotNotificationsIdleTime: RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatbotNotificationsIdleTime,
                chatbotNotificationsMaxTime: RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatbotNotificationsMaxTime,
                removePoweredByBmcHelix: RX_COGNITIVE_SERVICE.chatbot.systemSettings.removePoweredByBmcHelix
            });
            rxjs.forkJoin({
                processDefinitionNameOptions: this.getProcessDefinitionNameOptions(),
                settingsData: this.rxCognitiveServiceService.getSystemSettings(lodash.keys(RX_COGNITIVE_SERVICE.chatbot.systemSettings))
            }).subscribe(function (result) {
                _this.chatbotProcessDefinitionNameOptions = result.processDefinitionNameOptions;
                _this.loadChatbotSystemSettings(result.settingsData.data);
            });
        };
        CognitiveServiceChatbotComponent.prototype.isFormDirty = function () {
            return this.chatbotProvidersForm.dirty;
        };
        CognitiveServiceChatbotComponent.prototype.getProcessDefinitionNameOptions = function () {
            var _this = this;
            return this.rxCognitiveServiceService.getChatbotProcessDefinitionNames().pipe(operators.map(function (processDefinitionNames) { return processDefinitionNames.sort().map(function (processDefinitionName) {
                return {
                    id: processDefinitionName,
                    name: _this.rxDefinitionNameService.getDisplayName(processDefinitionName)
                };
            }); }));
        };
        CognitiveServiceChatbotComponent.prototype.loadChatbotSystemSettings = function (settings) {
            var _this = this;
            lodash.forEach(settings, function (setting) {
                var settingValue;
                if (setting.name === RX_COGNITIVE_SERVICE.chatbot.chatContextVariablesProcessName) {
                    settingValue = [_this.chatbotProcessDefinitionNameOptions.find(function (process) { return process.id === setting.value; })];
                }
                else {
                    settingValue = setting.value;
                }
                _this.setFormFieldValue(setting.name, settingValue);
                _this.initialChatbotProviderValues[setting.name] = settingValue;
            });
        };
        CognitiveServiceChatbotComponent.prototype.setFormFieldValue = function (name, value) {
            this.chatbotProvidersForm.controls[name].setValue(value);
        };
        CognitiveServiceChatbotComponent.prototype.setDefaultSessionIdleTimeout = function () {
            if (RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatSessionIdleTimeout !==
                this.chatbotProvidersForm.controls.chatSessionIdleTimeout.value) {
                this.setFormFieldValue('chatSessionIdleTimeout', RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatSessionIdleTimeout);
                this.chatbotProvidersForm.markAsDirty();
            }
        };
        CognitiveServiceChatbotComponent.prototype.setDefaultUserIdleTimeout = function () {
            if (RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatUserIdleTimeout !==
                this.chatbotProvidersForm.controls.chatUserIdleTimeout.value) {
                this.setFormFieldValue('chatUserIdleTimeout', RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatUserIdleTimeout);
                this.chatbotProvidersForm.markAsDirty();
            }
        };
        CognitiveServiceChatbotComponent.prototype.setDefaultChatbotNotificationsIdleTime = function () {
            if (RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatbotNotificationsIdleTime !==
                this.chatbotProvidersForm.controls.chatbotNotificationsIdleTime.value) {
                this.setFormFieldValue('chatbotNotificationsIdleTime', RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatbotNotificationsIdleTime);
                this.chatbotProvidersForm.markAsDirty();
            }
        };
        CognitiveServiceChatbotComponent.prototype.setDefaultChatbotNotificationsMaxTime = function () {
            if (RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatbotNotificationsMaxTime !==
                this.chatbotProvidersForm.controls.chatbotNotificationsMaxTime.value) {
                this.setFormFieldValue('chatbotNotificationsMaxTime', RX_COGNITIVE_SERVICE.chatbot.systemSettings.chatbotNotificationsMaxTime);
                this.chatbotProvidersForm.markAsDirty();
            }
        };
        CognitiveServiceChatbotComponent.prototype.save = function () {
            var _this = this;
            var formValue = this.chatbotProvidersForm.getRawValue();
            var systemPropertyObservables = Object.keys(RX_COGNITIVE_SERVICE.chatbot.systemSettings).reduce(function (result, settingName) {
                var _a, _b;
                var settingValue = formValue[settingName];
                if (lodash.isArray(settingValue)) {
                    settingValue = (_b = (_a = settingValue[0]) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : '';
                }
                if (!lodash.isEqual(_this.initialChatbotProviderValues[settingName], settingValue)) {
                    result.push(_this.rxSystemConfigurationService.setConfiguration(settingName, settingValue));
                }
                return result;
            }, []);
            rxjs.forkJoin(systemPropertyObservables).subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant(RX_COGNITIVE_SERVICE.notificationMessages.chatProviderSettingsSaved));
                _this.initialChatbotProviderValues = formValue;
                _this.chatbotProvidersForm.markAsPristine();
            });
        };
        CognitiveServiceChatbotComponent.prototype.isSaveButtonDisabled = function () {
            return this.chatbotProvidersForm.pristine || this.chatbotProvidersForm.invalid;
        };
        CognitiveServiceChatbotComponent.prototype.isSaveButtonVisible = function () {
            return (this.isAdministrator &&
                this.currentOverlayContext.overlayGroupId !== i2.RX_OVERLAY.overlayGroupIds.base &&
                !this.currentOverlayContext.isShared);
        };
        return CognitiveServiceChatbotComponent;
    }());
    CognitiveServiceChatbotComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveServiceChatbotComponent, deps: [{ token: i1__namespace$3.FormBuilder }, { token: RxCognitiveServiceService }, { token: i2__namespace.RxDefinitionNameService }, { token: i2__namespace.RxNotificationService }, { token: i2__namespace.RxSystemConfigurationService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CognitiveServiceChatbotComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveServiceChatbotComponent, selector: "rx-cognitive-service-chatbot", inputs: { isAdministrator: "isAdministrator", currentOverlayContext: "currentOverlayContext" }, ngImport: i0__namespace, template: "<form [formGroup]=\"chatbotProvidersForm\">\n  <adapt-accordion rx-id=\"accordion-chatbot-provider\">\n    <adapt-accordion-tab\n      title=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-service.chatbot.title' | translate }}\"\n      isOpen=\"true\"\n    >\n      <div class=\"chat-session-idle-timeout form-group\">\n        <adapt-rx-counter\n          adaptRange\n          [min]=\"300\"\n          [max]=\"1200\"\n          [adaptRange]=\"[300, 1200]\"\n          rx-id=\"chatbot-provider-chat-session-idle-time\"\n          [label]=\"'com.bmc.arsys.rx.client.admin.cognitive-service.chat-session-idle.label' | translate\"\n          required=\"true\"\n          [formControl]=\"chatbotProvidersForm.controls.chatSessionIdleTimeout\"\n          class=\"adapt-counter-prefix px-0 mr-2\"\n        >\n        </adapt-rx-counter>\n\n        <adapt-button\n          class=\"align-self-baseline\"\n          rx-id=\"chatbot-provider-default-chat-session-idle-time\"\n          btn-type=\"secondary\"\n          (click)=\"setDefaultSessionIdleTimeout()\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.default.label' | translate }}\n        </adapt-button>\n      </div>\n\n      <div class=\"chat-session-idle-timeout form-group\">\n        <adapt-rx-counter\n          adaptRange\n          [min]=\"5\"\n          [max]=\"1200\"\n          [adaptRange]=\"[5, 1200]\"\n          rx-id=\"chatbot-provider-chat-user-idle-time\"\n          [label]=\"'com.bmc.arsys.rx.client.admin.cognitive-service.chat-user-idle.label' | translate\"\n          required=\"true\"\n          [formControl]=\"chatbotProvidersForm.controls.chatUserIdleTimeout\"\n          [tooltip]=\"approverSelectionTooltip\"\n          class=\"adapt-counter-prefix px-0 mr-2\"\n        >\n        </adapt-rx-counter>\n\n        <adapt-button\n          class=\"align-self-baseline\"\n          rx-id=\"chatbot-provider-default-chat-user-idle-time\"\n          btn-type=\"secondary\"\n          (click)=\"setDefaultUserIdleTimeout()\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.default.label' | translate }}\n        </adapt-button>\n      </div>\n\n      <adapt-rx-select\n        rx-id=\"chat-context-variables-process-name\"\n        formControlName=\"chatContextVariablesProcessName\"\n        label=\"Chat context variables process name\"\n        [options]=\"chatbotProcessDefinitionNameOptions\"\n        [optionFormatter]=\"optionFormatter\"\n        class=\"d-block form-group\"\n      ></adapt-rx-select>\n\n      <adapt-rx-control-label\n        label=\"{{\n          'com.bmc.arsys.rx.client.admin.cognitive-service.remove-powered-by-bmc-helix.label'\n            | translate: { poweredByBmcHelix: 'Powered by BMC Helix' }\n        }}\"\n      ></adapt-rx-control-label>\n\n      <adapt-rx-switch\n        [formControl]=\"chatbotProvidersForm.controls.removePoweredByBmcHelix\"\n        rx-id=\"remove-powered-by-bmc-helix\"\n        [isLabelBefore]=\"false\"\n      ></adapt-rx-switch>\n    </adapt-accordion-tab>\n\n    <adapt-accordion rx-id=\"accordion-proactive-chatbot-notifications\">\n      <adapt-accordion-tab\n        title=\"{{\n          'com.bmc.arsys.rx.client.admin.cognitive-service.proactive-chatbot-notifications.title' | translate\n        }}\"\n        isOpen=\"true\"\n      >\n        <div class=\"proactive-chatbot-notifications-idle-time form-group\">\n          <adapt-rx-counter\n            adaptRange\n            [min]=\"300\"\n            [max]=\"1200\"\n            [adaptRange]=\"[300, 1200]\"\n            rx-id=\"notifications-idle-time\"\n            [label]=\"\n              'com.bmc.arsys.rx.client.admin.cognitive-service.proactive-chatbot-notifications-idle-time.label'\n                | translate\n            \"\n            required=\"true\"\n            [formControl]=\"chatbotProvidersForm.controls.chatbotNotificationsIdleTime\"\n            [tooltip]=\"chatbotNotificationsIdleTimeTooltip\"\n            class=\"adapt-counter-prefix px-0 mr-2\"\n          >\n          </adapt-rx-counter>\n\n          <adapt-button\n            class=\"align-self-baseline\"\n            rx-id=\"notifications-idle-time-default-button\"\n            btn-type=\"secondary\"\n            (click)=\"setDefaultChatbotNotificationsIdleTime()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.default.label' | translate }}\n          </adapt-button>\n        </div>\n\n        <div class=\"proactive-chatbot-notifications-max-time form-group\">\n          <adapt-rx-counter\n            adaptRange\n            [min]=\"120\"\n            [max]=\"3600\"\n            [adaptRange]=\"[120, 3600]\"\n            rx-id=\"notifications-max-time\"\n            [label]=\"\n              'com.bmc.arsys.rx.client.admin.cognitive-service.proactive-chatbot-notifications-max-time.label'\n                | translate\n            \"\n            required=\"true\"\n            [formControl]=\"chatbotProvidersForm.controls.chatbotNotificationsMaxTime\"\n            [tooltip]=\"chatbotNotificationsMaxTimeTooltip\"\n            class=\"adapt-counter-prefix px-0 mr-2\"\n          >\n          </adapt-rx-counter>\n\n          <adapt-button\n            class=\"align-self-baseline\"\n            rx-id=\"notifications-max-time-default-button\"\n            btn-type=\"secondary\"\n            (click)=\"setDefaultChatbotNotificationsMaxTime()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.default.label' | translate }}\n          </adapt-button>\n        </div>\n      </adapt-accordion-tab>\n    </adapt-accordion>\n\n    <button\n      adapt-button\n      type=\"button\"\n      rx-id=\"save-button\"\n      btn-type=\"primary\"\n      class=\"mt-4\"\n      [disabled]=\"isSaveButtonDisabled()\"\n      *ngIf=\"isSaveButtonVisible()\"\n      (click)=\"save()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </adapt-accordion>\n</form>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.chat-session-idle-timeout,.proactive-chatbot-notifications-idle-time,.proactive-chatbot-notifications-max-time{display:flex}.chat-session-idle-timeout adapt-button,.proactive-chatbot-notifications-idle-time adapt-button,.proactive-chatbot-notifications-max-time adapt-button{margin-top:1.5rem}adapt-rx-counter,adapt-rx-select{max-width:400px}\n"], components: [{ type: i1__namespace$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace$1.AdaptRxSwitchComponent, selector: "adapt-rx-switch", inputs: ["value", "size", "isLabelBefore", "checked"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$1.AdaptRangeValidatorDirective, selector: "[adaptRange][ngModel],[adaptRange][formControl]", inputs: ["adaptRange", "adaptRangeMessageFn"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveServiceChatbotComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-cognitive-service-chatbot',
                        templateUrl: './cognitive-service-chatbot.component.html',
                        styleUrls: ['./cognitive-service-chatbot.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }, { type: RxCognitiveServiceService }, { type: i2__namespace.RxDefinitionNameService }, { type: i2__namespace.RxNotificationService }, { type: i2__namespace.RxSystemConfigurationService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { isAdministrator: [{
                    type: i0.Input
                }], currentOverlayContext: [{
                    type: i0.Input
                }] } });

    var CognitiveServiceAdministrationCredentialsComponent = /** @class */ (function () {
        function CognitiveServiceAdministrationCredentialsComponent(formBuilder, rxCognitiveServiceService, rxCurrentUserService, rxNotificationService, rxSystemConfigurationService, translateService) {
            this.formBuilder = formBuilder;
            this.rxCognitiveServiceService = rxCognitiveServiceService;
            this.rxCurrentUserService = rxCurrentUserService;
            this.rxNotificationService = rxNotificationService;
            this.rxSystemConfigurationService = rxSystemConfigurationService;
            this.translateService = translateService;
        }
        CognitiveServiceAdministrationCredentialsComponent.prototype.ngOnInit = function () {
            this.cognitiveAdministrationCredentialsProvidersForm = this.formBuilder.group({
                cognitiveAdminPlatformApiKey: ''
            });
            this.loadSystemSettings();
        };
        CognitiveServiceAdministrationCredentialsComponent.prototype.isFormDirty = function () {
            return this.cognitiveAdministrationCredentialsProvidersForm.dirty;
        };
        CognitiveServiceAdministrationCredentialsComponent.prototype.loadSystemSettings = function () {
            var _this = this;
            this.rxSystemConfigurationService
                .getConfiguration(RX_COGNITIVE_SERVICE.cognitiveAdministrationCredentials.systemSettingsKey)
                .subscribe(function (settingsData) {
                _this.watsonAdminCredentialsData = JSON.parse(settingsData.value);
                _this.loadCognitiveAdminCredentialsValues();
            });
        };
        CognitiveServiceAdministrationCredentialsComponent.prototype.getWatsonAdminCredentialsData = function (property) {
            return this.watsonAdminCredentialsData[RX_COGNITIVE_SERVICE.credentialsProvider][property] || '';
        };
        CognitiveServiceAdministrationCredentialsComponent.prototype.loadCognitiveAdminCredentialsValues = function () {
            var apiKeyValue = '';
            if (this.watsonAdminCredentialsData[RX_COGNITIVE_SERVICE.credentialsProvider]) {
                apiKeyValue = this.getWatsonAdminCredentialsData(RX_COGNITIVE_SERVICE.cognitiveAdministrationCredentials.cognitiveAdminPlatformApiKey)
                    ? RX_COGNITIVE_SERVICE.passwordMask
                    : '';
            }
            this.cognitiveAdministrationCredentialsProvidersForm.controls.cognitiveAdminPlatformApiKey.setValue(apiKeyValue);
        };
        CognitiveServiceAdministrationCredentialsComponent.prototype.save = function () {
            var _this = this;
            var newApiKey = this.cognitiveAdministrationCredentialsProvidersForm.value.cognitiveAdminPlatformApiKey;
            var newCredentials = lodash.cloneDeep(RX_COGNITIVE_SERVICE.cognitiveAdministrationCredentials.payload);
            newCredentials[RX_COGNITIVE_SERVICE.credentialsProvider][RX_COGNITIVE_SERVICE.cognitiveAdministrationCredentials.cognitiveAdminPlatformApiKey] = this.rxCognitiveServiceService.filterMaskPassword(newApiKey);
            this.rxSystemConfigurationService
                .setConfiguration(RX_COGNITIVE_SERVICE.cognitiveAdministrationCredentials.systemSettingsKey, JSON.stringify(newCredentials))
                .subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant(RX_COGNITIVE_SERVICE.notificationMessages.cognitiveAdministrationCredentialsSaved));
                _this.cognitiveAdministrationCredentialsProvidersForm.markAsPristine();
            });
        };
        CognitiveServiceAdministrationCredentialsComponent.prototype.isSaveButtonDisabled = function () {
            return (this.cognitiveAdministrationCredentialsProvidersForm.pristine ||
                this.cognitiveAdministrationCredentialsProvidersForm.invalid);
        };
        CognitiveServiceAdministrationCredentialsComponent.prototype.isSaveButtonVisible = function () {
            return (this.isAdministrator &&
                this.currentOverlayContext.overlayGroupId !== i2.RX_OVERLAY.overlayGroupIds.base &&
                !this.currentOverlayContext.isShared);
        };
        return CognitiveServiceAdministrationCredentialsComponent;
    }());
    CognitiveServiceAdministrationCredentialsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveServiceAdministrationCredentialsComponent, deps: [{ token: i1__namespace$3.FormBuilder }, { token: RxCognitiveServiceService }, { token: i2__namespace.RxCurrentUserService }, { token: i2__namespace.RxNotificationService }, { token: i2__namespace.RxSystemConfigurationService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CognitiveServiceAdministrationCredentialsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveServiceAdministrationCredentialsComponent, selector: "rx-cognitive-service-administration-credentials", inputs: { isAdministrator: "isAdministrator", currentOverlayContext: "currentOverlayContext" }, ngImport: i0__namespace, template: "<form [formGroup]=\"cognitiveAdministrationCredentialsProvidersForm\">\n  <adapt-accordion>\n    <adapt-accordion-tab\n      title=\"{{\n        'com.bmc.arsys.rx.client.admin.cognitive-service.cognitive-administration-credentials.title' | translate\n      }}\"\n      isOpen=\"true\"\n    >\n      <div class=\"form-group\">\n        <adapt-rx-textfield\n          rx-id=\"platform-api-key\"\n          label=\"Platform API key\"\n          formControlName=\"cognitiveAdminPlatformApiKey\"\n          maxlength=\"254\"\n          required=\"true\"\n          [isPassword]=\"true\"\n          class=\"d-block\"\n        >\n        </adapt-rx-textfield>\n      </div>\n    </adapt-accordion-tab>\n    <button\n      adapt-button\n      type=\"button\"\n      rx-id=\"save-button\"\n      btn-type=\"primary\"\n      class=\"mt-4\"\n      [disabled]=\"isSaveButtonDisabled()\"\n      *ngIf=\"isSaveButtonVisible()\"\n      (click)=\"save()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </adapt-accordion>\n</form>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield{max-width:400px}\n"], components: [{ type: i1__namespace$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveServiceAdministrationCredentialsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-cognitive-service-administration-credentials',
                        templateUrl: './cognitive-service-administration-credentials.component.html',
                        styleUrls: ['./cognitive-service-administration-credentials.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }, { type: RxCognitiveServiceService }, { type: i2__namespace.RxCurrentUserService }, { type: i2__namespace.RxNotificationService }, { type: i2__namespace.RxSystemConfigurationService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { isAdministrator: [{
                    type: i0.Input
                }], currentOverlayContext: [{
                    type: i0.Input
                }] } });

    var CognitiveServiceConnectionsComponent = /** @class */ (function () {
        function CognitiveServiceConnectionsComponent(rxCognitiveServiceService, rxCurrentUserService, rxNotificationService, rxSystemConfigurationService, rxJsonParserService, translateService) {
            this.rxCognitiveServiceService = rxCognitiveServiceService;
            this.rxCurrentUserService = rxCurrentUserService;
            this.rxNotificationService = rxNotificationService;
            this.rxSystemConfigurationService = rxSystemConfigurationService;
            this.rxJsonParserService = rxJsonParserService;
            this.translateService = translateService;
            this.connectionInfo = RX_COGNITIVE_SERVICE.connections.payload;
            this.serviceDefinitions = RX_COGNITIVE_SERVICE.connections.serviceDefinitions;
            this.availableServicesList = [];
            this.connectionTestStatusesByServiceId = {};
            this.connectionTestStatus = i1$1.ConnectionTestStatus.Invalid;
            this.isFormFieldChanged = false;
            this.availableServices = {
                classification: true,
                discovery: true,
                toneAnalyzer: true
            };
        }
        CognitiveServiceConnectionsComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.rxSystemConfigurationService
                .queryConfiguration([
                RX_COGNITIVE_SERVICE.connections.systemSettingKeys.cognitiveServiceCredential,
                RX_COGNITIVE_SERVICE.connections.systemSettingKeys.classificationServiceProvider,
                RX_COGNITIVE_SERVICE.connections.systemSettingKeys.translationServiceProvider,
                RX_COGNITIVE_SERVICE.connections.systemSettingKeys.helixPortalUrl,
                RX_COGNITIVE_SERVICE.connections.systemSettingKeys.helixServiceCredential
            ])
                .pipe(operators.finalize(function () { return _this.loadServices(); }))
                .subscribe(function (_c) {
                var _d = __read(_c, 5), cognitiveServiceCredential = _d[0], classificationServiceProvider = _d[1], translationServiceProvider = _d[2], helixPortalUrl = _d[3], helixServiceCredential = _d[4];
                _this.loadCognitiveSystemSettings(cognitiveServiceCredential);
                if (classificationServiceProvider.value === i2.MachineLearningProviderNames.Helix) {
                    _this.loadHelixCognitiveSystemSettings(helixServiceCredential);
                    _this.connectionInfo[helixPortalUrl.id] = helixPortalUrl.value;
                }
                _this.loadClassificationServiceProvider(classificationServiceProvider);
                _this.loadRealTimeTranslationProviders(translationServiceProvider);
            });
        };
        CognitiveServiceConnectionsComponent.prototype.isFormDirty = function () {
            return this.isFormFieldChanged;
        };
        CognitiveServiceConnectionsComponent.prototype.loadServices = function () {
            var _this = this;
            this.availableServicesList = lodash.transform(this.serviceDefinitions, function (result, value, key) {
                if (_this.availableServices[key]) {
                    result.push(key);
                }
            }, []);
        };
        CognitiveServiceConnectionsComponent.prototype.loadClassificationServiceProvider = function (provider) {
            var _this = this;
            if (this.isNativeClassificationProvider) {
                this.availableServices[this.serviceDefinitions.classification.id] = false;
                this.availableServices[this.serviceDefinitions.serviceAccountCredentials.id] = true;
                this.rxSystemConfigurationService
                    .getConfiguration(RX_COGNITIVE_SERVICE.connections.systemSettingKeys.serviceAccountCredential)
                    .subscribe(function (settingData) {
                    _this.connectionInfo.serviceAccountCredentials = settingData.value;
                });
                return;
            }
            if (provider.value === i2.MachineLearningProviderNames.Helix) {
                this.availableServices[this.serviceDefinitions.classification.id] = false;
                this.availableServices[this.serviceDefinitions.helixClassifier.id] = true;
            }
        };
        CognitiveServiceConnectionsComponent.prototype.loadRealTimeTranslationProviders = function (settingsData) {
            var _this = this;
            var realTimeTranslationProvider = lodash.toLower(settingsData.value);
            if (realTimeTranslationProvider) {
                this.realTimeTranslationProvider = realTimeTranslationProvider;
                this.availableServices[this.serviceDefinitions[realTimeTranslationProvider].id] = true;
                this.rxSystemConfigurationService
                    .getConfiguration(RX_COGNITIVE_SERVICE.connections.systemSettingKeys[realTimeTranslationProvider])
                    .subscribe(function (settingData) {
                    if (realTimeTranslationProvider === _this.serviceDefinitions.google.id) {
                        _this.connectionInfo.apiKey = settingData.value;
                    }
                    else if (realTimeTranslationProvider === _this.serviceDefinitions.microsoft.id) {
                        _this.connectionInfo = lodash.assign(_this.connectionInfo, _this.rxJsonParserService.tryParseJson(settingData.value, {}));
                    }
                });
            }
        };
        CognitiveServiceConnectionsComponent.prototype.loadHelixCognitiveSystemSettings = function (settingsData) {
            var _a, _b;
            var credentials = this.rxJsonParserService.tryParseJson(settingsData.value);
            this.connectionInfo.helixClassifierKey = (_a = credentials === null || credentials === void 0 ? void 0 : credentials.accessKey) !== null && _a !== void 0 ? _a : '';
            this.connectionInfo.helixClassifierSecret = (_b = credentials === null || credentials === void 0 ? void 0 : credentials.secretKey) !== null && _b !== void 0 ? _b : '';
        };
        CognitiveServiceConnectionsComponent.prototype.loadCognitiveSystemSettings = function (settingsData) {
            var _this = this;
            var credentials = JSON.parse(settingsData.value)[RX_COGNITIVE_SERVICE.credentialsProvider];
            if (credentials) {
                lodash.forIn(credentials, function (value, key) {
                    _this.connectionInfo[key] = credentials[key];
                });
            }
        };
        CognitiveServiceConnectionsComponent.prototype.isConnectionTestStatusInvalid = function (form) {
            return (!(this.isAdministrator &&
                this.currentOverlayContext.overlayGroupId !== i2.RX_OVERLAY.overlayGroupIds.base &&
                !this.currentOverlayContext.isShared) ||
                form.invalid ||
                form.pristine);
        };
        CognitiveServiceConnectionsComponent.prototype.getConnectionTestPayload = function (serviceId, serviceForm) {
            var serviceDefinition = this.serviceDefinitions[serviceId];
            if (!serviceDefinition.isApiKeyTest) {
                var isGoogleServiceId = serviceId === this.serviceDefinitions.google.id;
                return {
                    credential: isGoogleServiceId ? serviceForm.value[serviceDefinition.model] : JSON.stringify(serviceForm.value),
                    resourceType: 'com.bmc.arsys.rx.application.cognitive.command.PingTranslationServiceCommand'
                };
            }
            // Get the fields that are supposed to be sent as credentials
            var editableFields = serviceDefinition.fields.filter(function (field) { return !field.readonly; });
            if (editableFields.length === 1) {
                // use the model name as the apiKey
                return {
                    apiKey: serviceForm.value[serviceDefinition.model],
                    serviceType: serviceDefinition.serviceType,
                    resourceType: 'com.bmc.arsys.rx.application.cognitive.command.PingCognitiveServiceCommand'
                };
            }
            // If more than one field, username and passowrd are required to test the connection
            var _c = __read(editableFields.map(function (field) { return field.name; }), 2), usernameField = _c[0], passwordField = _c[1];
            return {
                userName: serviceForm.value[usernameField],
                password: serviceForm.value[passwordField],
                serviceType: serviceDefinition.serviceType,
                resourceType: 'com.bmc.arsys.rx.application.cognitive.command.PingCognitiveServiceCommand'
            };
        };
        CognitiveServiceConnectionsComponent.prototype.resetConnectionTest = function (serviceId, form) {
            this.connectionTestStatus = i1$1.ConnectionTestStatus.Unknown;
            this.isFormFieldChanged = form.dirty;
            this.connectionTestStatusesByServiceId[serviceId] = this.isConnectionTestStatusInvalid(form)
                ? i1$1.ConnectionTestStatus.Invalid
                : i1$1.ConnectionTestStatus.Unknown;
        };
        CognitiveServiceConnectionsComponent.prototype.onTestConnection = function (serviceId, form) {
            var _this = this;
            var connectionTestPayload = this.getConnectionTestPayload(serviceId, form);
            this.rxCognitiveServiceService
                .testConnection(connectionTestPayload)
                .pipe(operators.catchError(function (error) {
                _this.connectionTestStatusesByServiceId[serviceId] = i1$1.ConnectionTestStatus.Failed;
                return rxjs.throwError(error);
            }))
                .subscribe(function () {
                _this.connectionTestStatusesByServiceId[serviceId] = i1$1.ConnectionTestStatus.Passed;
                _this.connectionTestStatus = i1$1.ConnectionTestStatus.Passed;
            });
        };
        CognitiveServiceConnectionsComponent.prototype.save = function () {
            var _c;
            var _this = this;
            var settingsPayload = [];
            if (this.isNativeClassificationProvider &&
                this.connectionTestStatusesByServiceId[this.serviceDefinitions.serviceAccountCredentials.id] ===
                    i1$1.ConnectionTestStatus.Passed &&
                !(this.connectionTestStatusesByServiceId[this.serviceDefinitions.classification.id] ===
                    i1$1.ConnectionTestStatus.Passed ||
                    this.connectionTestStatusesByServiceId[this.serviceDefinitions.discovery.id] === i1$1.ConnectionTestStatus.Passed ||
                    this.connectionTestStatusesByServiceId[this.serviceDefinitions.toneAnalyzer.id] ===
                        i1$1.ConnectionTestStatus.Passed ||
                    (this.realTimeTranslationProvider &&
                        this.connectionTestStatusesByServiceId[this.serviceDefinitions[this.realTimeTranslationProvider].id] ===
                            i1$1.ConnectionTestStatus.Passed))) {
                settingsPayload.push({
                    name: RX_COGNITIVE_SERVICE.connections.systemSettingKeys.serviceAccountCredential,
                    value: JSON.stringify(JSON.parse(this.connectionInfo[this.serviceDefinitions.serviceAccountCredentials.id]))
                });
            }
            else {
                if (this.realTimeTranslationProvider &&
                    this.connectionTestStatusesByServiceId[this.serviceDefinitions[this.realTimeTranslationProvider].id] ===
                        i1$1.ConnectionTestStatus.Passed) {
                    var fields = this.serviceDefinitions[this.realTimeTranslationProvider].fields;
                    settingsPayload.push({
                        name: RX_COGNITIVE_SERVICE.connections.systemSettingKeys[this.realTimeTranslationProvider],
                        value: this.realTimeTranslationProvider === this.serviceDefinitions.google.id
                            ? this.connectionInfo[fields[0].name]
                            : JSON.stringify(lodash.transform(fields, function (result, value) {
                                var fieldName = value['name'];
                                return (result[fieldName] = _this.connectionInfo[fieldName]);
                            }, {}))
                    });
                }
                var cognitiveCredentials = lodash.transform(RX_COGNITIVE_SERVICE.connections.cognitiveServiceCredentialKeys, function (result, value, key) {
                    if (_this.connectionTestStatusesByServiceId[_this.serviceDefinitions[key].id] === i1$1.ConnectionTestStatus.Passed) {
                        return (result[value] = _this.connectionInfo[value]);
                    }
                }, {});
                if (!lodash.isEmpty(cognitiveCredentials)) {
                    settingsPayload.push({
                        name: RX_COGNITIVE_SERVICE.connections.systemSettingKeys.cognitiveServiceCredential,
                        value: JSON.stringify((_c = {},
                            _c[RX_COGNITIVE_SERVICE.credentialsProvider] = cognitiveCredentials,
                            _c))
                    });
                }
            }
            var helixClassifier = this.serviceDefinitions.helixClassifier;
            if (helixClassifier && this.connectionTestStatusesByServiceId[helixClassifier.id] === i1$1.ConnectionTestStatus.Passed) {
                settingsPayload.push({
                    name: RX_COGNITIVE_SERVICE.connections.systemSettingKeys.helixServiceCredential,
                    value: JSON.stringify({
                        accessKey: this.connectionInfo.helixClassifierKey,
                        secretKey: this.connectionInfo.helixClassifierSecret
                    })
                });
            }
            rxjs.forkJoin(settingsPayload.map(function (settingPayload) { return _this.rxSystemConfigurationService.setConfiguration(settingPayload.name, settingPayload.value); })).subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant(RX_COGNITIVE_SERVICE.notificationMessages.serviceConnectionSaved));
                _this.connectionTestStatus = i1$1.ConnectionTestStatus.Invalid;
                _this.connectionTestStatusesByServiceId = {};
                _this.isFormFieldChanged = false;
            });
        };
        CognitiveServiceConnectionsComponent.prototype.isSaveButtonDisabled = function () {
            return this.connectionTestStatus !== i1$1.ConnectionTestStatus.Passed;
        };
        CognitiveServiceConnectionsComponent.prototype.isSaveButtonVisible = function () {
            return (this.isAdministrator &&
                this.currentOverlayContext.overlayGroupId !== i2.RX_OVERLAY.overlayGroupIds.base &&
                !this.currentOverlayContext.isShared);
        };
        return CognitiveServiceConnectionsComponent;
    }());
    CognitiveServiceConnectionsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveServiceConnectionsComponent, deps: [{ token: RxCognitiveServiceService }, { token: i2__namespace.RxCurrentUserService }, { token: i2__namespace.RxNotificationService }, { token: i2__namespace.RxSystemConfigurationService }, { token: i3__namespace.RxJsonParserService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CognitiveServiceConnectionsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveServiceConnectionsComponent, selector: "rx-cognitive-service-connections", inputs: { isAdministrator: "isAdministrator", currentOverlayContext: "currentOverlayContext", isNativeClassificationProvider: "isNativeClassificationProvider" }, ngImport: i0__namespace, template: "<adapt-accordion multiselect=\"true\">\n  <form *ngFor=\"let serviceId of availableServicesList\" #serviceForm=\"ngForm\">\n    <adapt-accordion-tab\n      [title]=\"serviceDefinitions[serviceId].title | translate\"\n      [isOpen]=\"serviceDefinitions[serviceId].isOpen\"\n      [attr.rx-id]=\"serviceDefinitions[serviceId].id\"\n      class=\"mb-3\"\n    >\n      <div *ngFor=\"let field of serviceDefinitions[serviceId].fields\" class=\"form-group\">\n        <adapt-rx-textfield\n          [name]=\"field.name\"\n          [(ngModel)]=\"connectionInfo[field.name]\"\n          [attr.rx-id]=\"field.rxId\"\n          [label]=\"field.label | translate\"\n          [required]=\"field.required\"\n          *ngIf=\"field.type === 'password'\"\n          maxlength=\"254\"\n          [isPassword]=\"true\"\n          (ngModelChange)=\"resetConnectionTest(serviceId, serviceForm)\"\n          class=\"d-block\"\n        >\n        </adapt-rx-textfield>\n\n        <adapt-rx-textfield\n          [name]=\"field.name\"\n          [(ngModel)]=\"connectionInfo[field.name]\"\n          [attr.rx-id]=\"field.rxId\"\n          [label]=\"field.label | translate\"\n          [required]=\"field.required\"\n          [disabled]=\"field.readonly\"\n          *ngIf=\"field.type === 'text'\"\n          [pattern]=\"field.pattern\"\n          (ngModelChange)=\"resetConnectionTest(serviceId, serviceForm)\"\n          class=\"d-block\"\n        >\n        </adapt-rx-textfield>\n\n        <adapt-rx-textarea\n          [name]=\"field.name\"\n          [(ngModel)]=\"connectionInfo[field.name]\"\n          [attr.rx-id]=\"field.rxId\"\n          [label]=\"field.label | translate\"\n          [required]=\"field.required\"\n          *ngIf=\"field.type === 'json'\"\n          (ngModelChange)=\"resetConnectionTest(serviceId, serviceForm)\"\n          rows=\"6\"\n          class=\"d-block\"\n          [rxJson]=\"{\n            errorMessage: field.jsonValidatorErrorMessage\n          }\"\n        ></adapt-rx-textarea>\n      </div>\n\n      <rx-connection-tester\n        class=\"mt-1\"\n        [status]=\"connectionTestStatusesByServiceId[serviceId]\"\n        (testConnection)=\"onTestConnection(serviceId, serviceForm)\"\n      ></rx-connection-tester>\n    </adapt-accordion-tab>\n  </form>\n\n  <button\n    adapt-button\n    rx-id=\"save-button\"\n    btn-type=\"primary\"\n    class=\"mt-4\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    *ngIf=\"isSaveButtonVisible()\"\n    (click)=\"save()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n</adapt-accordion>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield{max-width:400px}\n"], components: [{ type: i1__namespace$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxTextareaComponent, selector: "adapt-rx-textarea", inputs: ["rows", "maxRows", "autocomplete", "placeholder", "size", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace.RxConnectionTesterComponent, selector: "rx-connection-tester", inputs: ["status", "buttonType"], outputs: ["testConnection"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$3.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { type: i3__namespace.RxJsonValidator, selector: "[rxJson]", inputs: ["rxJson"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveServiceConnectionsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-cognitive-service-connections',
                        templateUrl: './cognitive-service-connections.component.html',
                        styleUrls: ['./cognitive-service-connections.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: RxCognitiveServiceService }, { type: i2__namespace.RxCurrentUserService }, { type: i2__namespace.RxNotificationService }, { type: i2__namespace.RxSystemConfigurationService }, { type: i3__namespace.RxJsonParserService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { isAdministrator: [{
                    type: i0.Input
                }], currentOverlayContext: [{
                    type: i0.Input
                }], isNativeClassificationProvider: [{
                    type: i0.Input
                }] } });

    var CognitiveServiceOnboardComponent = /** @class */ (function (_super) {
        __extends(CognitiveServiceOnboardComponent, _super);
        function CognitiveServiceOnboardComponent(dockedPanelContext, rxCognitiveServiceService, rxCommandFactoryService, rxModalService, rxNotificationService, rxRecordInstanceDataPageService, rxSystemConfigurationService, translateService, injector) {
            var _this = _super.call(this, dockedPanelContext, injector) || this;
            _this.dockedPanelContext = dockedPanelContext;
            _this.rxCognitiveServiceService = rxCognitiveServiceService;
            _this.rxCommandFactoryService = rxCommandFactoryService;
            _this.rxModalService = rxModalService;
            _this.rxNotificationService = rxNotificationService;
            _this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            _this.rxSystemConfigurationService = rxSystemConfigurationService;
            _this.translateService = translateService;
            _this.injector = injector;
            _this.supportedCognitiveProviders = RX_COGNITIVE_SERVICE.onboard.cognitiveProvidersList;
            _this.cognitiveProvider = [RX_COGNITIVE_SERVICE.onboard.cognitiveProvidersList[0]];
            _this.regions = RX_COGNITIVE_SERVICE.regionsList.map(function (region) { return (Object.assign(Object.assign({}, region), { name: _this.translateService.instant(region.name) })); });
            _this.providerServices = {};
            _this.defaultServiceId = RX_COGNITIVE_SERVICE.onboard.cognitiveProvidersList[0].id;
            _this.defaultSelection = _this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');
            _this.optionFormatter = function (regionNameOption) {
                return lodash.get(regionNameOption, 'name', _this.defaultSelection);
            };
            return _this;
        }
        CognitiveServiceOnboardComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            var params = {
                recorddefinition: i2.RX_CHATBOT.chatbotLocales.recordDefinitionName,
                queryExpression: "'" + i2.RX_CHATBOT.chatbotLocales.fieldIds.botConfigurationId + "'=\"" + i2.RX_CHATBOT.defaultChatbotId + "\"",
                propertySelection: [
                    i2.RX_CHATBOT.chatbotLocales.fieldIds.botConfigurationId,
                    i2.RX_CHATBOT.chatbotLocales.fieldIds.providerPassword
                ]
            };
            rxjs.forkJoin({
                cognitiveServiceCredential: this.rxSystemConfigurationService.getConfiguration(RX_COGNITIVE_SERVICE.connections.systemSettingKeys.cognitiveServiceCredential),
                cognitiveServiceRegions: this.rxSystemConfigurationService.getConfiguration(RX_COGNITIVE_SERVICE.cognitiveServiceRegions.systemSettingsKey),
                botLocales: this.rxRecordInstanceDataPageService.post({
                    params: params
                })
            }).subscribe(function (result) {
                _this.providerServices = RX_COGNITIVE_SERVICE.onboard.providerServices[_this.defaultServiceId];
                _this.loadCredentialAndRegions(JSON.parse(result.cognitiveServiceCredential.value), JSON.parse(result.cognitiveServiceRegions.value));
                _this.setBotLocaleConversation(result.botLocales.data);
                _this.loadServiceProviderApiKey();
            });
        };
        CognitiveServiceOnboardComponent.prototype.isDirty = function () {
            return this.ownCognitivePoviderConfigurationForm.dirty;
        };
        CognitiveServiceOnboardComponent.prototype.loadCredentialAndRegions = function (credentials, serviceRegions) {
            var _this = this;
            var cognitiveServiceRegions = serviceRegions[RX_COGNITIVE_SERVICE.onboard.providers[this.defaultServiceId]];
            lodash.forEach(this.providerServices, function (serviceConfig, serviceId) {
                serviceConfig.apiKey = lodash.get(credentials[RX_COGNITIVE_SERVICE.onboard.providers[_this.defaultServiceId]], serviceConfig.apiKeyPropertyName, '');
                if (lodash.get(cognitiveServiceRegions, serviceId)) {
                    var regionValue = _this.regions.find(function (region) { return region.id === cognitiveServiceRegions[serviceId]; });
                    serviceConfig.region = [regionValue];
                }
            });
        };
        CognitiveServiceOnboardComponent.prototype.setBotLocaleConversation = function (locales) {
            var localeKey = RX_COGNITIVE_SERVICE.onboard.providerServices[this.defaultServiceId].conversation.id;
            this.providerServices[localeKey].apiKey = lodash.get(locales[0], i2.RX_CHATBOT.chatbotLocales.fieldIds.providerPassword, '');
        };
        CognitiveServiceOnboardComponent.prototype.loadServiceProviderApiKey = function () {
            lodash.forEach(this.providerServices, function (serviceConfig) {
                serviceConfig.isEnabled = serviceConfig.hasApiKey = Boolean(serviceConfig.apiKey);
            });
        };
        CognitiveServiceOnboardComponent.prototype.isOnboardButtonDisabled = function () {
            return (this.isOnboardingInProgress ||
                !lodash.some(this.providerServices, 'isEnabled') ||
                this.ownCognitivePoviderConfigurationForm.pristine ||
                this.ownCognitivePoviderConfigurationForm.invalid);
        };
        CognitiveServiceOnboardComponent.prototype.close = function () {
            this.dockedPanelContext.dismiss(i1$2.DismissReasons.CLOSE_BTN);
        };
        CognitiveServiceOnboardComponent.prototype.onboard = function () {
            var _this = this;
            this.isOnboardingInProgress = true;
            var onboardSettings = {};
            onboardSettings[RX_COGNITIVE_SERVICE.onboard.providers[this.defaultServiceId]] = lodash.transform(this.providerServices, function (result, value) {
                if (!value.hasApiKey && value.isEnabled) {
                    result[value.apiKeyPropertyName] = value.apiKey;
                    result[value.regionPropertyName] = lodash.get(value.region, '0.id', '');
                }
            }, {});
            this.rxCommandFactoryService
                .forResourceType('com.bmc.arsys.rx.application.cognitive.command.ConfigureOwnCognitiveProvidersCommand')
                .execute({ ownCognitiveProvidersConfiguration: JSON.stringify(onboardSettings) })
                .pipe(operators.catchError(function (err) {
                _this.isOnboardingInProgress = false;
                return rxjs.throwError(err);
            }))
                .subscribe(function () {
                _this.loadServiceProviderApiKey();
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant(RX_COGNITIVE_SERVICE.notificationMessages.serviceOnboarded));
                _this.ownCognitivePoviderConfigurationForm.form.markAsPristine();
                _this.isOnboardingInProgress = false;
            });
        };
        CognitiveServiceOnboardComponent.prototype.keepKeyValueOrder = function () {
            return 0;
        };
        return CognitiveServiceOnboardComponent;
    }(i1$1.RxModalClass));
    CognitiveServiceOnboardComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveServiceOnboardComponent, deps: [{ token: i1__namespace$1.DockedPanelContext }, { token: RxCognitiveServiceService }, { token: i2__namespace.RxCommandFactoryService }, { token: i1__namespace.RxModalService }, { token: i2__namespace.RxNotificationService }, { token: i3__namespace$2.RxRecordInstanceDataPageService }, { token: i2__namespace.RxSystemConfigurationService }, { token: i4__namespace.TranslateService }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CognitiveServiceOnboardComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveServiceOnboardComponent, selector: "rx-cognitive-service-onboard", inputs: { isAdministrator: "isAdministrator", currentOverlayContext: "currentOverlayContext" }, viewQueries: [{ propertyName: "ownCognitivePoviderConfigurationForm", first: true, predicate: ["ownCognitivePoviderConfigurationForm"], descendants: true, read: i1.NgForm, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"dp-body\">\n  <form #ownCognitivePoviderConfigurationForm=\"ngForm\">\n    <div class=\"row\">\n      <div class=\"col-sm-12\">\n        <adapt-rx-select\n          name=\"cognitiveProvider\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-service.cognitive-provider.label' | translate }}\"\n          rx-id=\"cognitive-provider\"\n          [options]=\"supportedCognitiveProviders\"\n          [optionFormatter]=\"optionFormatter\"\n          [(ngModel)]=\"cognitiveProvider\"\n        >\n        </adapt-rx-select>\n      </div>\n\n      <div class=\"col-sm-12\">\n        <div class=\"mt-2 mb-2\">\n          {{ 'com.bmc.arsys.rx.client.admin.cognitive-service.onboard-services.instructions.label' | translate }}\n        </div>\n\n        <div class=\"card p-3 mb-3\" *ngFor=\"let service of providerServices | keyvalue: keepKeyValueOrder\">\n          <adapt-rx-switch\n            class=\"form-group\"\n            [name]=\"service.key + 'ProviderEnable'\"\n            [attr.rx-id]=\"'enable-cognitive-service-provider-' + service.key\"\n            [label]=\"service.value.switchLabel | translate\"\n            [(ngModel)]=\"service.value.isEnabled\"\n            [disabled]=\"service.value.hasApiKey\"\n            [tooltip]=\"\n              service.value.tooltipText\n                ? {\n                    iconName: 'question_circle_o',\n                    content: service.value.tooltipText | translate,\n                    placement: 'bottom',\n                    popoverMode: true\n                  }\n                : null\n            \"\n          ></adapt-rx-switch>\n\n          <adapt-rx-select\n            class=\"form-group\"\n            label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-service.region.label' | translate }}\"\n            emptyOption=\"true\"\n            [name]=\"service.key + 'ProviderRegion'\"\n            [attr.rx-id]=\"'cognitive-service-provider-region-' + service.key\"\n            [options]=\"regions\"\n            [optionFormatter]=\"optionFormatter\"\n            [(ngModel)]=\"service.value.region\"\n            [disabled]=\"!service.value.isEnabled || service.value.hasApiKey\"\n          >\n          </adapt-rx-select>\n\n          <adapt-rx-textfield\n            class=\"form-group\"\n            label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-service.api-key.label' | translate }}\"\n            maxlength=\"254\"\n            required=\"true\"\n            [isPassword]=\"true\"\n            [name]=\"service.key + 'ProviderApiKey'\"\n            [attr.rx-id]=\"'cognitive-service-provider-' + service.key + '-api-key'\"\n            [(ngModel)]=\"service.value.apiKey\"\n            [disabled]=\"!service.value.isEnabled || service.value.hasApiKey\"\n          >\n          </adapt-rx-textfield>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"dp-footer align-items-end\">\n  <div>\n    <button\n      adapt-button\n      btn-type=\"primary\"\n      type=\"button\"\n      class=\"mr-2\"\n      activeText=\"Onboarding...\"\n      rx-id=\"onboarding-button\"\n      [adaptInlineLoader]=\"isOnboardingInProgress\"\n      [disabled]=\"isOnboardButtonDisabled()\"\n      (click)=\"onboard()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.admin.cognitive-service.onboard-services.button.onboard.label' | translate }}\n    </button>\n    <button\n      adapt-button\n      btn-type=\"secondary\"\n      type=\"button\"\n      rx-id=\"close-button\"\n      (click)=\"close()\"\n      [disabled]=\"isOnboardingInProgress\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n    </button>\n  </div>\n</div>\n", components: [{ type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptRxSwitchComponent, selector: "adapt-rx-switch", inputs: ["value", "size", "isLabelBefore", "checked"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$1.AdaptInlineStandaloneDirective, selector: "[adaptInlineLoader]", inputs: ["adaptInlineLoader", "activeText"] }], pipes: { "translate": i4__namespace.TranslatePipe, "keyvalue": i8__namespace.KeyValuePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveServiceOnboardComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-cognitive-service-onboard',
                        templateUrl: './cognitive-service-onboard.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.DockedPanelContext }, { type: RxCognitiveServiceService }, { type: i2__namespace.RxCommandFactoryService }, { type: i1__namespace.RxModalService }, { type: i2__namespace.RxNotificationService }, { type: i3__namespace$2.RxRecordInstanceDataPageService }, { type: i2__namespace.RxSystemConfigurationService }, { type: i4__namespace.TranslateService }, { type: i0__namespace.Injector }]; }, propDecorators: { isAdministrator: [{
                    type: i0.Input
                }], currentOverlayContext: [{
                    type: i0.Input
                }], ownCognitivePoviderConfigurationForm: [{
                    type: i0.ViewChild,
                    args: ['ownCognitivePoviderConfigurationForm', { read: i1.NgForm, static: true }]
                }] } });

    var CognitiveServiceRegionsComponent = /** @class */ (function () {
        function CognitiveServiceRegionsComponent(formBuilder, rxCognitiveServiceService, rxNotificationService, rxSystemConfigurationService, translateService) {
            var _this = this;
            this.formBuilder = formBuilder;
            this.rxCognitiveServiceService = rxCognitiveServiceService;
            this.rxNotificationService = rxNotificationService;
            this.rxSystemConfigurationService = rxSystemConfigurationService;
            this.translateService = translateService;
            this.settings = RX_COGNITIVE_SERVICE.cognitiveServiceRegions.settings;
            this.regions = RX_COGNITIVE_SERVICE.regionsList.map(function (region) { return (Object.assign(Object.assign({}, region), { name: _this.translateService.instant(region.name) })); });
        }
        CognitiveServiceRegionsComponent.prototype.ngOnInit = function () {
            this.cognitiveServiceRegionConfigurationForm = this.formBuilder.group({
                naturalLanguageClassifier: [],
                conversation: [],
                search: [],
                toneAnalyzer: []
            });
            this.loadSystemSettings();
        };
        CognitiveServiceRegionsComponent.prototype.isFormDirty = function () {
            return this.cognitiveServiceRegionConfigurationForm.dirty;
        };
        CognitiveServiceRegionsComponent.prototype.loadSystemSettings = function () {
            var _this = this;
            this.rxSystemConfigurationService
                .getConfiguration(RX_COGNITIVE_SERVICE.cognitiveServiceRegions.systemSettingsKey)
                .subscribe(function (settingsData) {
                var watsonServiceRegionsData = JSON.parse(settingsData.value);
                if (watsonServiceRegionsData[RX_COGNITIVE_SERVICE.credentialsProvider]) {
                    watsonServiceRegionsData = watsonServiceRegionsData[RX_COGNITIVE_SERVICE.credentialsProvider];
                    _this.settings.forEach(function (setting) {
                        if (!lodash.isEmpty(watsonServiceRegionsData[setting.id])) {
                            var value = _this.regions.find(function (region) { return region.id === watsonServiceRegionsData[setting.id]; });
                            _this.cognitiveServiceRegionConfigurationForm.controls[setting.id].setValue([value]);
                        }
                    });
                }
            });
        };
        CognitiveServiceRegionsComponent.prototype.optionFormatter = function (regionNameOption) {
            return regionNameOption.name;
        };
        CognitiveServiceRegionsComponent.prototype.save = function () {
            var _this = this;
            var formValue = this.cognitiveServiceRegionConfigurationForm.getRawValue();
            var configurations = lodash.mapValues(formValue, function (value) {
                return lodash.get(value, '[0].id', '');
            });
            this.rxSystemConfigurationService
                .setConfiguration(RX_COGNITIVE_SERVICE.cognitiveServiceRegions.systemSettingsKey, JSON.stringify({ WATSON: configurations }))
                .subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant(RX_COGNITIVE_SERVICE.notificationMessages.serviceRegionConfigurationSaved));
                _this.cognitiveServiceRegionConfigurationForm.markAsPristine();
            });
        };
        CognitiveServiceRegionsComponent.prototype.isSaveButtonDisabled = function () {
            return this.cognitiveServiceRegionConfigurationForm.pristine;
        };
        CognitiveServiceRegionsComponent.prototype.isSaveButtonVisible = function () {
            return (this.isAdministrator &&
                this.currentOverlayContext.overlayGroupId !== i2.RX_OVERLAY.overlayGroupIds.base &&
                !this.currentOverlayContext.isShared);
        };
        return CognitiveServiceRegionsComponent;
    }());
    CognitiveServiceRegionsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveServiceRegionsComponent, deps: [{ token: i1__namespace$3.FormBuilder }, { token: RxCognitiveServiceService }, { token: i2__namespace.RxNotificationService }, { token: i2__namespace.RxSystemConfigurationService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CognitiveServiceRegionsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveServiceRegionsComponent, selector: "rx-cognitive-service-regions", inputs: { isAdministrator: "isAdministrator", currentOverlayContext: "currentOverlayContext" }, ngImport: i0__namespace, template: "<form [formGroup]=\"cognitiveServiceRegionConfigurationForm\">\n  <adapt-accordion rx-id=\"accordion-cognitive-service-region\">\n    <adapt-accordion-tab\n      title=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-service.regions.title' | translate }}\"\n      isOpen=\"true\"\n    >\n      <adapt-alert\n        class=\"mb-4\"\n        [config]=\"{\n          type: 'inline',\n          variant: 'warning',\n          content: 'com.bmc.arsys.rx.client.admin.cognitive-service.regions.warning' | translate\n        }\"\n      ></adapt-alert>\n\n      <div\n        *ngFor=\"let setting of settings\"\n        [attr.rx-id]=\"'select-block-cognitive-service-region--' + setting.id\"\n        class=\"form-group\"\n      >\n        <adapt-rx-select\n          emptyOption=\"true\"\n          [formControlName]=\"setting.id\"\n          [label]=\"setting.name\"\n          [options]=\"regions\"\n          [optionFormatter]=\"optionFormatter\"\n          class=\"d-block\"\n        ></adapt-rx-select>\n      </div>\n    </adapt-accordion-tab>\n\n    <button\n      adapt-button\n      type=\"button\"\n      rx-id=\"save-button\"\n      btn-type=\"primary\"\n      class=\"mt-4\"\n      [disabled]=\"isSaveButtonDisabled()\"\n      *ngIf=\"isSaveButtonVisible()\"\n      (click)=\"save()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </adapt-accordion>\n</form>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-select{max-width:400px}\n"], components: [{ type: i1__namespace$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveServiceRegionsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-cognitive-service-regions',
                        templateUrl: './cognitive-service-regions.component.html',
                        styleUrls: ['./cognitive-service-regions.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }, { type: RxCognitiveServiceService }, { type: i2__namespace.RxNotificationService }, { type: i2__namespace.RxSystemConfigurationService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { isAdministrator: [{
                    type: i0.Input
                }], currentOverlayContext: [{
                    type: i0.Input
                }] } });

    var CognitiveServiceSummarizationComponent = /** @class */ (function () {
        function CognitiveServiceSummarizationComponent(rxCurrentUserService, rxCognitiveServiceService, rxNotificationService, rxSystemConfigurationService, formBuilder, translateService) {
            this.rxCurrentUserService = rxCurrentUserService;
            this.rxCognitiveServiceService = rxCognitiveServiceService;
            this.rxNotificationService = rxNotificationService;
            this.rxSystemConfigurationService = rxSystemConfigurationService;
            this.formBuilder = formBuilder;
            this.translateService = translateService;
            this.connectionTestStatus = i1$1.ConnectionTestStatus.Invalid;
        }
        CognitiveServiceSummarizationComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.isAdministratorOverlayConfigured =
                this.isAdministrator &&
                    this.currentOverlayContext.overlayGroupId !== i2.RX_OVERLAY.overlayGroupIds.base &&
                    !this.currentOverlayContext.isShared;
            this.testConnection()
                .pipe(operators.catchError(function (error) {
                _this.isSummarizationServiceConfigured = false;
                return rxjs.EMPTY;
            }))
                .subscribe(function () {
                _this.isSummarizationServiceConfigured = true;
            });
            this.summarizationConfigurationForm = this.formBuilder.group({
                enableSummarization: { value: 0, disabled: this.isEnableSummarizationCheckboxDisabled() },
                summarizationPercentage: ''
            });
            this.loadSystemSettings();
        };
        CognitiveServiceSummarizationComponent.prototype.isFormDirty = function () {
            return this.summarizationConfigurationForm.dirty;
        };
        CognitiveServiceSummarizationComponent.prototype.loadSystemSettings = function () {
            var _this = this;
            this.rxSystemConfigurationService
                .getConfiguration(RX_COGNITIVE_SERVICE.summarization.systemSettingsKey)
                .subscribe(function (settingsData) {
                var summarizationData = JSON.parse(settingsData.value);
                _this.summarizationConfigurationForm.setValue(summarizationData);
            });
        };
        CognitiveServiceSummarizationComponent.prototype.save = function () {
            var _this = this;
            var formValue = this.summarizationConfigurationForm.getRawValue();
            formValue.enableSummarization = formValue.enableSummarization ? 1 : 0;
            var configurations = lodash.mapValues(formValue, function (value) { return value; });
            this.rxSystemConfigurationService
                .setConfiguration(RX_COGNITIVE_SERVICE.summarization.systemSettingsKey, JSON.stringify(configurations))
                .subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant(RX_COGNITIVE_SERVICE.notificationMessages.summarizationConfigurationSaved));
                _this.connectionTestStatus = i1$1.ConnectionTestStatus.Invalid;
                _this.summarizationConfigurationForm.markAsPristine();
            });
        };
        CognitiveServiceSummarizationComponent.prototype.isSaveButtonDisabled = function () {
            return !this.summarizationConfigurationForm.controls.enableSummarization.value &&
                this.summarizationConfigurationForm.dirty
                ? false
                : this.connectionTestStatus !== i1$1.ConnectionTestStatus.Passed;
        };
        CognitiveServiceSummarizationComponent.prototype.isEnableSummarizationCheckboxDisabled = function () {
            return !(this.rxCurrentUserService.isAdministrator() &&
                this.currentOverlayContext.overlayGroupId !== i2.RX_OVERLAY.overlayGroupIds.base &&
                !this.currentOverlayContext.isShared);
        };
        CognitiveServiceSummarizationComponent.prototype.isConnectionTestStatusInvalid = function () {
            return (!this.isAdministratorOverlayConfigured ||
                this.summarizationConfigurationForm.invalid ||
                this.summarizationConfigurationForm.pristine ||
                !this.summarizationConfigurationForm.controls.enableSummarization.value);
        };
        CognitiveServiceSummarizationComponent.prototype.resetConnectionTest = function () {
            this.connectionTestStatus = this.isConnectionTestStatusInvalid()
                ? i1$1.ConnectionTestStatus.Invalid
                : i1$1.ConnectionTestStatus.Unknown;
            if (this.summarizationConfigurationForm.controls.enableSummarization.value) {
                this.summarizationConfigurationForm.get('summarizationPercentage').enable();
            }
            else {
                this.summarizationConfigurationForm.get('summarizationPercentage').disable();
            }
        };
        CognitiveServiceSummarizationComponent.prototype.testConnection = function () {
            return this.rxCognitiveServiceService.testConnection({
                resourceType: 'com.bmc.arsys.rx.application.cognitive.command.PingSummarizationServiceCommand'
            });
        };
        CognitiveServiceSummarizationComponent.prototype.onTestConnection = function () {
            var _this = this;
            this.testConnection()
                .pipe(operators.catchError(function (error) {
                _this.connectionTestStatus = i1$1.ConnectionTestStatus.Failed;
                return rxjs.throwError(error);
            }))
                .subscribe(function () {
                _this.connectionTestStatus = i1$1.ConnectionTestStatus.Passed;
            });
        };
        return CognitiveServiceSummarizationComponent;
    }());
    CognitiveServiceSummarizationComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveServiceSummarizationComponent, deps: [{ token: i2__namespace.RxCurrentUserService }, { token: RxCognitiveServiceService }, { token: i2__namespace.RxNotificationService }, { token: i2__namespace.RxSystemConfigurationService }, { token: i1__namespace$3.FormBuilder }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CognitiveServiceSummarizationComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveServiceSummarizationComponent, selector: "rx-cognitive-service-summarization", inputs: { isAdministrator: "isAdministrator", currentOverlayContext: "currentOverlayContext" }, ngImport: i0__namespace, template: "<adapt-alert\n  *ngIf=\"isSummarizationServiceConfigured === false\"\n  [config]=\"{ content: 'Summarization service has not been configured.', type: 'inline', variant: 'warning' }\"\n></adapt-alert>\n\n<form [formGroup]=\"summarizationConfigurationForm\" *ngIf=\"isSummarizationServiceConfigured\">\n  <adapt-accordion rx-id=\"accordion-summarization-configuration\">\n    <adapt-accordion-tab\n      title=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-service.summarization.title' | translate }}\"\n    >\n      <adapt-rx-switch\n        class=\"form-group\"\n        rx-id=\"enable-summarization-service\"\n        formControlName=\"enableSummarization\"\n        label=\"Enable summarization service\"\n        (ngModelChange)=\"resetConnectionTest()\"\n      ></adapt-rx-switch>\n\n      <adapt-rx-counter\n        class=\"d-block form-group\"\n        adaptRange\n        rx-id=\"summarization-percentage\"\n        [min]=\"1\"\n        [max]=\"50\"\n        label=\"Summarization %\"\n        required=\"true\"\n        [formControl]=\"summarizationConfigurationForm.controls.summarizationPercentage\"\n        [step]=\"1\"\n        [tooltip]=\"{\n          iconName: 'question_circle_o',\n          content: 'com.bmc.arsys.rx.client.admin.cognitive-service.summarization.percentage.tooltip' | translate,\n          placement: 'right',\n          popoverMode: true\n        }\"\n        (ngModelChange)=\"resetConnectionTest()\"\n      ></adapt-rx-counter>\n\n      <rx-connection-tester\n        class=\"mt-1\"\n        *ngIf=\"isAdministrator\"\n        [status]=\"connectionTestStatus\"\n        (testConnection)=\"onTestConnection()\"\n      ></rx-connection-tester>\n    </adapt-accordion-tab>\n\n    <button\n      adapt-button\n      rx-id=\"save-button\"\n      btn-type=\"primary\"\n      class=\"mt-4\"\n      [disabled]=\"isSaveButtonDisabled()\"\n      *ngIf=\"isAdministratorOverlayConfigured\"\n      (click)=\"save()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </adapt-accordion>\n</form>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-counter{max-width:400px}\n"], components: [{ type: i1__namespace$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1__namespace$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace$1.AdaptRxSwitchComponent, selector: "adapt-rx-switch", inputs: ["value", "size", "isLabelBefore", "checked"] }, { type: i1__namespace$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1__namespace.RxConnectionTesterComponent, selector: "rx-connection-tester", inputs: ["status", "buttonType"], outputs: ["testConnection"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$1.AdaptRangeValidatorDirective, selector: "[adaptRange][ngModel],[adaptRange][formControl]", inputs: ["adaptRange", "adaptRangeMessageFn"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveServiceSummarizationComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-cognitive-service-summarization',
                        templateUrl: './cognitive-service-summarization.component.html',
                        styleUrls: ['./cognitive-service-summarization.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxCurrentUserService }, { type: RxCognitiveServiceService }, { type: i2__namespace.RxNotificationService }, { type: i2__namespace.RxSystemConfigurationService }, { type: i1__namespace$3.FormBuilder }, { type: i4__namespace.TranslateService }]; }, propDecorators: { isAdministrator: [{
                    type: i0.Input
                }], currentOverlayContext: [{
                    type: i0.Input
                }] } });

    var CognitiveServiceToneAnalyzerComponent = /** @class */ (function () {
        function CognitiveServiceToneAnalyzerComponent(formBuilder, rxCognitiveServiceService, rxNotificationService, rxSystemConfigurationService, translateService) {
            this.formBuilder = formBuilder;
            this.rxCognitiveServiceService = rxCognitiveServiceService;
            this.rxNotificationService = rxNotificationService;
            this.rxSystemConfigurationService = rxSystemConfigurationService;
            this.translateService = translateService;
        }
        CognitiveServiceToneAnalyzerComponent.prototype.ngOnInit = function () {
            this.toneAnalyzerConfigurationForm = this.formBuilder.group({
                toneScoreThreshold: 0.5
            });
            this.loadSystemSettings();
        };
        CognitiveServiceToneAnalyzerComponent.prototype.isFormDirty = function () {
            return this.toneAnalyzerConfigurationForm.dirty;
        };
        CognitiveServiceToneAnalyzerComponent.prototype.loadSystemSettings = function () {
            var _this = this;
            this.rxSystemConfigurationService
                .getConfiguration(RX_COGNITIVE_SERVICE.toneAnalyzer.systemSettingsKey)
                .subscribe(function (settingsData) {
                _this.toneAnalyzerConfigurationForm.controls[settingsData.name].setValue(settingsData.value);
            });
        };
        CognitiveServiceToneAnalyzerComponent.prototype.save = function () {
            var _this = this;
            this.rxSystemConfigurationService
                .setConfiguration(RX_COGNITIVE_SERVICE.toneAnalyzer.systemSettingsKey, this.toneAnalyzerConfigurationForm.value.toneScoreThreshold)
                .subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant(RX_COGNITIVE_SERVICE.notificationMessages.toneAnalyzerConfigurationSaved));
                _this.toneAnalyzerConfigurationForm.markAsPristine();
            });
        };
        CognitiveServiceToneAnalyzerComponent.prototype.isSaveButtonDisabled = function () {
            return this.toneAnalyzerConfigurationForm.pristine || this.toneAnalyzerConfigurationForm.invalid;
        };
        CognitiveServiceToneAnalyzerComponent.prototype.isSaveButtonVisible = function () {
            return (this.isAdministrator &&
                this.currentOverlayContext.overlayGroupId !== i2.RX_OVERLAY.overlayGroupIds.base &&
                !this.currentOverlayContext.isShared);
        };
        return CognitiveServiceToneAnalyzerComponent;
    }());
    CognitiveServiceToneAnalyzerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveServiceToneAnalyzerComponent, deps: [{ token: i1__namespace$3.FormBuilder }, { token: RxCognitiveServiceService }, { token: i2__namespace.RxNotificationService }, { token: i2__namespace.RxSystemConfigurationService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CognitiveServiceToneAnalyzerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveServiceToneAnalyzerComponent, selector: "rx-cognitive-service-tone-analyzer", inputs: { isAdministrator: "isAdministrator", currentOverlayContext: "currentOverlayContext" }, ngImport: i0__namespace, template: "<form [formGroup]=\"toneAnalyzerConfigurationForm\">\n  <adapt-accordion>\n    <adapt-accordion-tab title=\"Tone analyzer configuration\" isOpen=\"true\">\n      <adapt-rx-counter\n        adaptRange\n        label=\"Tone score threshold\"\n        required=\"true\"\n        class=\"d-block form-group\"\n        [max]=\"1\"\n        [min]=\"0.5\"\n        adaptFloatNumber\n        [formControl]=\"toneAnalyzerConfigurationForm.controls.toneScoreThreshold\"\n        [step]=\"0.1\"\n        [tooltip]=\"{\n          iconName: 'question_circle_o',\n          content: popoverContent,\n          placement: 'right',\n          popoverMode: true\n        }\"\n      ></adapt-rx-counter>\n\n      <ng-template #popoverContent>\n        <div\n          style=\"white-space: pre-wrap\"\n          [innerHTML]=\"\n            'com.bmc.arsys.rx.client.admin.cognitive-service.tone-analyzer.tone-score-threshold.tooltip' | translate\n          \"\n        ></div>\n      </ng-template>\n    </adapt-accordion-tab>\n\n    <button\n      adapt-button\n      type=\"button\"\n      rx-id=\"save-button\"\n      btn-type=\"primary\"\n      class=\"mt-4\"\n      [disabled]=\"isSaveButtonDisabled()\"\n      *ngIf=\"isSaveButtonVisible()\"\n      (click)=\"save()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </adapt-accordion>\n</form>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-counter{max-width:400px}\n"], components: [{ type: i1__namespace$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$1.AdaptRangeValidatorDirective, selector: "[adaptRange][ngModel],[adaptRange][formControl]", inputs: ["adaptRange", "adaptRangeMessageFn"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$1.AdaptFloatNumberValidatorDirective, selector: "[adaptFloatNumber][ngModel], [adaptFloatNumber][formControl]", inputs: ["adaptFloatNumberMessageFn"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveServiceToneAnalyzerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-cognitive-service-tone-analyzer',
                        templateUrl: './cognitive-service-tone-analyzer.component.html',
                        styleUrls: ['./cognitive-service-tone-analyzer.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }, { type: RxCognitiveServiceService }, { type: i2__namespace.RxNotificationService }, { type: i2__namespace.RxSystemConfigurationService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { isAdministrator: [{
                    type: i0.Input
                }], currentOverlayContext: [{
                    type: i0.Input
                }] } });

    var CognitiveServiceAdminComponent = /** @class */ (function (_super) {
        __extends(CognitiveServiceAdminComponent, _super);
        function CognitiveServiceAdminComponent(rxModalService, rxCognitiveServiceService, rxCurrentUserService, rxOverlayService, rxSystemConfigurationService, translateService) {
            var _this = _super.call(this) || this;
            _this.rxModalService = rxModalService;
            _this.rxCognitiveServiceService = rxCognitiveServiceService;
            _this.rxCurrentUserService = rxCurrentUserService;
            _this.rxOverlayService = rxOverlayService;
            _this.rxSystemConfigurationService = rxSystemConfigurationService;
            _this.translateService = translateService;
            _this.cognitiveServices = RX_COGNITIVE_SERVICE.cognitiveServicesList.map(function (service) { return (Object.assign(Object.assign({}, service), { name: _this.translateService.instant(service.name) })); });
            _this.selectedService = [_this.cognitiveServices[2]];
            _this.supportedCognitiveServices = [];
            _this.isAdministrator = _this.rxCurrentUserService.isAdministrator();
            _this.currentOverlayContext = _this.rxOverlayService.getCurrentOverlayContext();
            return _this;
        }
        CognitiveServiceAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.notifyPropertyChanged('api', {
                isDirty: function () { return _this.selectedConfiguration.isFormDirty(); }
            });
            this.rxSystemConfigurationService
                .getConfiguration(RX_COGNITIVE_SERVICE.connections.systemSettingKeys.classificationServiceProvider)
                .subscribe(function (settingsData) {
                var cognitiveServices = _this.cognitiveServices;
                if (RX_COGNITIVE_SERVICE.nativeProvider === settingsData.value) {
                    _this.isNativeClassificationProvider = true;
                    cognitiveServices = lodash.reject(cognitiveServices, {
                        id: RX_COGNITIVE_SERVICE.cognitiveServicesList[1].id
                    });
                }
                _this.supportedCognitiveServices = cognitiveServices;
            });
        };
        CognitiveServiceAdminComponent.prototype.optionFormatter = function (option) {
            return option.name;
        };
        CognitiveServiceAdminComponent.prototype.getSelectedServiceId = function () {
            return this.selectedService[0].id;
        };
        CognitiveServiceAdminComponent.prototype.isOwnCognitiveProviderButtonVisible = function () {
            return (this.isAdministrator &&
                this.currentOverlayContext.overlayGroupId !== i2.RX_OVERLAY.overlayGroupIds.base &&
                !this.currentOverlayContext.isShared);
        };
        CognitiveServiceAdminComponent.prototype.openOnboardServicesPanel = function () {
            this.rxModalService
                .openDockedPanel({
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-service.onboard-services.label'),
                content: CognitiveServiceOnboardComponent,
                size: 'lg'
            })
                .catch(lodash.noop);
        };
        return CognitiveServiceAdminComponent;
    }(i4$2.BaseViewComponent));
    CognitiveServiceAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveServiceAdminComponent, deps: [{ token: i1__namespace.RxModalService }, { token: RxCognitiveServiceService }, { token: i2__namespace.RxCurrentUserService }, { token: i2__namespace.RxOverlayService }, { token: i2__namespace.RxSystemConfigurationService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CognitiveServiceAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveServiceAdminComponent, selector: "rx-admin-cognitive-service", viewQueries: [{ propertyName: "selectedConfiguration", first: true, predicate: ["selectedConfiguration"], descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<rx-admin-settings header=\" {{ 'com.bmc.arsys.rx.client.admin.cognitive-service.header.title' | translate }} \">\n  <div class=\"mb-4 d-flex align-items-baseline\" *ngIf=\"isOwnCognitiveProviderButtonVisible()\">\n    <adapt-button\n      class=\"text-truncate\"\n      rx-id=\"onboard-services-button\"\n      btn-type=\"secondary\"\n      (click)=\"openOnboardServicesPanel()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.admin.cognitive-service-component.button.title' | translate }}\n    </adapt-button>\n\n    <adapt-icon\n      name=\"question_circle_o\"\n      class=\"ml-2\"\n      placement=\"bottom\"\n      maxWidth=\"400\"\n      [adaptPopover]=\"'com.bmc.arsys.rx.client.admin.cognitive-service-component.tooltip' | translate\"\n    >\n    </adapt-icon>\n  </div>\n\n  <div class=\"mb-4 align-items-end\">\n    <adapt-rx-select\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-service.configure.label' | translate }}\"\n      [options]=\"supportedCognitiveServices\"\n      [(ngModel)]=\"selectedService\"\n      [optionFormatter]=\"optionFormatter\"\n    >\n    </adapt-rx-select>\n  </div>\n\n  <div class=\"row pb-4\">\n    <div [ngSwitch]=\"getSelectedServiceId()\" class=\"col-12\">\n      <rx-cognitive-service-chatbot\n        [isAdministrator]=\"isAdministrator\"\n        [currentOverlayContext]=\"currentOverlayContext\"\n        *ngSwitchCase=\"cognitiveServices[0].id\"\n        #selectedConfiguration\n      >\n      </rx-cognitive-service-chatbot>\n\n      <rx-cognitive-service-administration-credentials\n        [isAdministrator]=\"isAdministrator\"\n        [currentOverlayContext]=\"currentOverlayContext\"\n        *ngSwitchCase=\"cognitiveServices[1].id\"\n        #selectedConfiguration\n      ></rx-cognitive-service-administration-credentials>\n\n      <rx-cognitive-service-connections\n        [isAdministrator]=\"isAdministrator\"\n        [currentOverlayContext]=\"currentOverlayContext\"\n        [isNativeClassificationProvider]=\"isNativeClassificationProvider\"\n        *ngSwitchCase=\"cognitiveServices[2].id\"\n        #selectedConfiguration\n      ></rx-cognitive-service-connections>\n\n      <rx-cognitive-service-summarization\n        [isAdministrator]=\"isAdministrator\"\n        [currentOverlayContext]=\"currentOverlayContext\"\n        *ngSwitchCase=\"cognitiveServices[3].id\"\n        #selectedConfiguration\n      ></rx-cognitive-service-summarization>\n\n      <rx-cognitive-service-regions\n        [isAdministrator]=\"isAdministrator\"\n        [currentOverlayContext]=\"currentOverlayContext\"\n        *ngSwitchCase=\"cognitiveServices[4].id\"\n        #selectedConfiguration\n      ></rx-cognitive-service-regions>\n\n      <rx-cognitive-service-tone-analyzer\n        [isAdministrator]=\"isAdministrator\"\n        [currentOverlayContext]=\"currentOverlayContext\"\n        *ngSwitchCase=\"cognitiveServices[5].id\"\n        #selectedConfiguration\n      ></rx-cognitive-service-tone-analyzer>\n    </div>\n  </div>\n</rx-admin-settings>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-select{max-width:400px}\n"], components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace$1.AdaptIconComponent, selector: "adapt-icon", inputs: ["name", "classList", "description", "testID"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: CognitiveServiceChatbotComponent, selector: "rx-cognitive-service-chatbot", inputs: ["isAdministrator", "currentOverlayContext"] }, { type: CognitiveServiceAdministrationCredentialsComponent, selector: "rx-cognitive-service-administration-credentials", inputs: ["isAdministrator", "currentOverlayContext"] }, { type: CognitiveServiceConnectionsComponent, selector: "rx-cognitive-service-connections", inputs: ["isAdministrator", "currentOverlayContext", "isNativeClassificationProvider"] }, { type: CognitiveServiceSummarizationComponent, selector: "rx-cognitive-service-summarization", inputs: ["isAdministrator", "currentOverlayContext"] }, { type: CognitiveServiceRegionsComponent, selector: "rx-cognitive-service-regions", inputs: ["isAdministrator", "currentOverlayContext"] }, { type: CognitiveServiceToneAnalyzerComponent, selector: "rx-cognitive-service-tone-analyzer", inputs: ["isAdministrator", "currentOverlayContext"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$1.AdaptPopoverDirective, selector: "[adaptPopover]", inputs: ["adaptPopover", "popoverTitle", "placement", "fallbackPlacement", "triggers", "container", "appendToBody", "closeBtn", "popupDelay", "disablePopover", "popoverClass", "autoClose", "closeOnOutOfView", "maxWidth", "minWidth"], outputs: ["shown", "hidden"], exportAs: ["adaptPopover"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i8__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveServiceAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-cognitive-service',
                        templateUrl: './cognitive-service.component.html',
                        styleUrls: ['./cognitive-service.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.RxModalService }, { type: RxCognitiveServiceService }, { type: i2__namespace.RxCurrentUserService }, { type: i2__namespace.RxOverlayService }, { type: i2__namespace.RxSystemConfigurationService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { selectedConfiguration: [{
                    type: i0.ViewChild,
                    args: ['selectedConfiguration']
                }] } });

    var CognitiveServiceRegistrationModule = /** @class */ (function () {
        function CognitiveServiceRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            this.rxViewComponentRegistryService.register({
                type: 'rx-admin-cognitive-service',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(CognitiveServiceAdminComponent),
                name: 'Cognitive service',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return CognitiveServiceRegistrationModule;
    }());
    CognitiveServiceRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveServiceRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CognitiveServiceRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveServiceRegistrationModule, declarations: [CognitiveServiceAdminComponent,
            CognitiveServiceAdministrationCredentialsComponent,
            CognitiveServiceChatbotComponent,
            CognitiveServiceConnectionsComponent,
            CognitiveServiceOnboardComponent,
            CognitiveServiceRegionsComponent,
            CognitiveServiceSummarizationComponent,
            CognitiveServiceToneAnalyzerComponent], imports: [i1$2.AdaptAccordionModule, i1__namespace$1.AdaptAlertModule, i1$2.AdaptBusyModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptIconModule,
            i1$2.AdaptPopoverModule,
            i1$2.AdaptRxCheckboxModule,
            i1$2.AdaptRxCounterModule,
            i1$2.AdaptRxSelectModule,
            i1$2.AdaptRxSwitchModule,
            i1$2.AdaptRxTextareaModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptRxValidatorsModule,
            i4.AdminSettingsModule,
            i8.CommonModule,
            i1.FormsModule,
            i1.ReactiveFormsModule,
            i1$1.RxConnectionTesterModule,
            i3$1.RxJsonModule,
            i4$1.TranslateModule,
            i1$2.AdaptRxLabelModule] });
    CognitiveServiceRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveServiceRegistrationModule, imports: [[
                i1$2.AdaptAccordionModule,
                i1$2.AdaptAlertModule.forRoot(),
                i1$2.AdaptBusyModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptIconModule,
                i1$2.AdaptPopoverModule,
                i1$2.AdaptRxCheckboxModule,
                i1$2.AdaptRxCounterModule,
                i1$2.AdaptRxSelectModule,
                i1$2.AdaptRxSwitchModule,
                i1$2.AdaptRxTextareaModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptRxValidatorsModule,
                i4.AdminSettingsModule,
                i8.CommonModule,
                i1.FormsModule,
                i1.ReactiveFormsModule,
                i1$1.RxConnectionTesterModule,
                i3$1.RxJsonModule,
                i4$1.TranslateModule,
                i1$2.AdaptRxLabelModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveServiceRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            CognitiveServiceAdminComponent,
                            CognitiveServiceAdministrationCredentialsComponent,
                            CognitiveServiceChatbotComponent,
                            CognitiveServiceConnectionsComponent,
                            CognitiveServiceOnboardComponent,
                            CognitiveServiceRegionsComponent,
                            CognitiveServiceSummarizationComponent,
                            CognitiveServiceToneAnalyzerComponent
                        ],
                        imports: [
                            i1$2.AdaptAccordionModule,
                            i1$2.AdaptAlertModule.forRoot(),
                            i1$2.AdaptBusyModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptIconModule,
                            i1$2.AdaptPopoverModule,
                            i1$2.AdaptRxCheckboxModule,
                            i1$2.AdaptRxCounterModule,
                            i1$2.AdaptRxSelectModule,
                            i1$2.AdaptRxSwitchModule,
                            i1$2.AdaptRxTextareaModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptRxValidatorsModule,
                            i4.AdminSettingsModule,
                            i8.CommonModule,
                            i1.FormsModule,
                            i1.ReactiveFormsModule,
                            i1$1.RxConnectionTesterModule,
                            i3$1.RxJsonModule,
                            i4$1.TranslateModule,
                            i1$2.AdaptRxLabelModule
                        ],
                        entryComponents: [CognitiveServiceAdminComponent, CognitiveServiceOnboardComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var CognitiveTrainingTabNames;
    (function (CognitiveTrainingTabNames) {
        CognitiveTrainingTabNames["DataSets"] = "dataSets";
        CognitiveTrainingTabNames["TestResults"] = "testResults";
    })(CognitiveTrainingTabNames || (CognitiveTrainingTabNames = {}));
    var CognitiveTrainingDataSourceNames;
    (function (CognitiveTrainingDataSourceNames) {
        CognitiveTrainingDataSourceNames["InnovationSuiteDataSource"] = "innovationSuiteDataSource";
        CognitiveTrainingDataSourceNames["FileDataSource"] = "fileDataSource";
    })(CognitiveTrainingDataSourceNames || (CognitiveTrainingDataSourceNames = {}));
    var CognitiveTrainingEvaluationNames;
    (function (CognitiveTrainingEvaluationNames) {
        CognitiveTrainingEvaluationNames["AutoClassificationTrainingAndEvaluation"] = "autoClassificationTrainingAndEvaluation";
        CognitiveTrainingEvaluationNames["ChatbotEvaluation"] = "chatbotEvaluation";
    })(CognitiveTrainingEvaluationNames || (CognitiveTrainingEvaluationNames = {}));

    var _a, _b, _c, _d;
    var defaultTrainDataPercentage = 80;
    var RX_COGNITIVE_TRAINING = {
        settings: {
            sections: [
                {
                    title: 'com.bmc.arsys.rx.client.admin.cognitive-training.auto-classification-training.evaluation.title',
                    evaluationName: CognitiveTrainingEvaluationNames.AutoClassificationTrainingAndEvaluation,
                    isExpanded: true
                },
                {
                    title: 'com.bmc.arsys.rx.client.admin.cognitive-training.chatbot-evaluation-ibm.watson.assistant.title',
                    evaluationName: CognitiveTrainingEvaluationNames.ChatbotEvaluation,
                    isExpanded: false
                }
            ],
            tabs: (_a = {},
                _a[CognitiveTrainingTabNames.DataSets] = {
                    title: 'com.bmc.arsys.rx.client.admin.cognitive-training.data-sets.title',
                    name: CognitiveTrainingTabNames.DataSets,
                    deletionConfirmationMessage: 'com.bmc.arsys.rx.client.admin.cognitive-training.data-set-delete-confirmation.message',
                    deletionSuccessMessage: 'com.bmc.arsys.rx.client.admin.cognitive-training.data-set-deleted.message',
                    recordDefinitionName: 'Cognitive Service Data Set Descriptor'
                },
                _a[CognitiveTrainingTabNames.TestResults] = {
                    title: 'com.bmc.arsys.rx.client.admin.cognitive-training.test-results.title',
                    name: CognitiveTrainingTabNames.TestResults,
                    deletionConfirmationMessage: 'com.bmc.arsys.rx.client.admin.cognitive-training.test-results-delete-confirmation.message',
                    deletionSuccessMessage: 'com.bmc.arsys.rx.client.admin.cognitive-training.test-results-deleted.message',
                    recordDefinitionName: 'Cognitive Service Test Results'
                },
                _a),
            evaluations: (_b = {},
                _b[CognitiveTrainingEvaluationNames.AutoClassificationTrainingAndEvaluation] = {
                    name: CognitiveTrainingEvaluationNames.AutoClassificationTrainingAndEvaluation,
                    queryExpression: "'1732' = 0 AND '61001' = ",
                    serviceProviderQueryExpresion: " AND '1820' = "
                },
                _b[CognitiveTrainingEvaluationNames.ChatbotEvaluation] = {
                    name: CognitiveTrainingEvaluationNames.ChatbotEvaluation,
                    queryExpression: "'1732' = 1 AND '61001' = "
                },
                _b),
            trainingTypes: (_c = {},
                _c[i2.MachineLearningProviderNames.Watson] = {
                    title: 'com.bmc.arsys.rx.client.admin.cognitive-training.auto-classification-training.evaluation-ibm-watson.title',
                    displayName: 'com.bmc.arsys.rx.client.admin.cognitive-training.ibm-watson-conversation.title',
                    name: i2.MachineLearningProviderNames.Watson,
                    value: 0,
                    uniqueValue: 0
                },
                _c[i2.MachineLearningProviderNames.Native] = {
                    title: 'com.bmc.arsys.rx.client.admin.cognitive-training.auto-classification-training.evaluation-bmc-native-google.title',
                    displayName: 'com.bmc.arsys.rx.client.admin.cognitive-service.bmc-native.title',
                    name: 'native',
                    value: 0,
                    uniqueValue: 1
                },
                _c[i2.MachineLearningProviderNames.Helix] = {
                    title: 'com.bmc.arsys.rx.client.admin.cognitive-training.auto-classification-training.evaluation-helix-ade.title',
                    displayName: 'com.bmc.arsys.rx.client.admin.cognitive-service.helix-ade.title',
                    name: i2.MachineLearningProviderNames.Helix,
                    value: 0,
                    uniqueValue: 2
                },
                _c.chatbot = {
                    value: 1
                },
                _c),
            dataSourceTypes: (_d = {},
                _d[CognitiveTrainingDataSourceNames.InnovationSuiteDataSource] = {
                    displayName: 'com.bmc.arsys.rx.client.admin.cognitive-search.bmc-helix-platform-data-set.label',
                    name: CognitiveTrainingDataSourceNames.InnovationSuiteDataSource,
                    resourceType: 'com.bmc.arsys.rx.services.cognitive.domain.InnovationSuiteDataSource',
                    dataSourceHistory: {
                        layout: {
                            queryExpressionBasic: {
                                filtersJson: null,
                                basicFilters: null
                            },
                            textFields: [],
                            categoryFields: []
                        },
                        resourceType: 'com.bmc.arsys.rx.services.cognitive.domain.InnovationSuiteDataSource',
                        recordDefinitionName: '',
                        queryExpression: '',
                        trainingDataMapper: {
                            resourceType: 'com.bmc.arsys.rx.services.cognitive.domain.CategorizationTrainingDataMapper',
                            textFields: [],
                            categoryFields: []
                        },
                        timeCriteria: null,
                        isScheduleEnabled: false
                    }
                },
                _d[CognitiveTrainingDataSourceNames.FileDataSource] = {
                    displayName: 'com.bmc.arsys.rx.client.admin.cognitive-training.csv-data-set.label',
                    name: CognitiveTrainingDataSourceNames.FileDataSource,
                    resourceType: 'com.bmc.arsys.rx.services.cognitive.domain.FileDataSource',
                    dataSourceHistory: {
                        resourceType: 'com.bmc.arsys.rx.services.cognitive.domain.FileDataSource',
                        fileName: ''
                    }
                },
                _d),
            commands: {
                classify: 'com.bmc.arsys.rx.application.cognitive.command.AutomaticCategorySuggestionCommand',
                train: 'com.bmc.arsys.rx.application.cognitive.command.TrainCognitiveServiceCommand',
                test: 'com.bmc.arsys.rx.application.cognitive.command.TestChatbotCommand'
            },
            trainingStatuses: {
                untrained: {
                    label: 'Untrained',
                    value: 0
                },
                training: {
                    label: 'Training',
                    value: 1
                },
                trained: {
                    label: 'Trained',
                    value: 2
                },
                failed: {
                    label: 'Failed',
                    value: 3
                },
                pendingRetraining: {
                    label: 'Pending retraining',
                    value: 4
                },
                inProgress: {
                    label: 'In progress',
                    value: 5
                },
                created: {
                    label: 'Created',
                    value: 6
                }
            },
            evaluationStatuses: {
                queued: {
                    label: 'Queued',
                    value: 0
                },
                running: {
                    label: 'Running',
                    value: 10
                },
                completed: {
                    label: 'Completed',
                    value: 20
                },
                failed: {
                    label: 'Failed',
                    value: 30
                }
            },
            nativeProviderTrainingLocales: ['de', 'en', 'es', 'fr', 'it', 'pt'],
            watsonProviderTrainingLocales: ['ar', 'de', 'en', 'es', 'fr', 'it', 'ja', 'ko', 'nl', 'pt', 'zh-cn', 'zh-tw'],
            defaultTrainingLocale: 'en',
            dataSetDefinitionName: 'Cognitive Service Data Set Descriptor',
            testResultsDefinitionName: 'Cognitive Service Test Results',
            fieldIds: {
                modifiedDate: 6,
                evaluationStatus: 7,
                instanceId: 379,
                dataSetID: 1730,
                dataSetName: 1731,
                trainingType: 1732,
                machineLearningError: 1733,
                error: 1733,
                dataSource: 1734,
                dateLastSubmitted: 1735,
                dateLastTrained: 1736,
                locale: 1737,
                dataSourceHistory: 1738,
                developerId: 1739,
                newDataSetId: 1740,
                useSeedTrainingData: 1741,
                resultCsv: 1795,
                serviceInstanceGuid: 1742,
                trainDataPercent: 1796,
                testDataPercent: 1797,
                trainingDataCsv: 1798,
                testDataCsv: 1799,
                accuracy: 1806,
                precision: 1807,
                recall: 1808,
                fScore: 1809,
                dateLastTested: 1811,
                chatbotName: 1816,
                classificationServiceProvider: 1820,
                dataSetLocale: 1829,
                bundleId: 61001
            },
            defaultTrainDataPercentage: defaultTrainDataPercentage,
            defaultTestDataPercentage: 100 - defaultTrainDataPercentage
        }
    };

    var RxCognitiveTrainingService = /** @class */ (function () {
        function RxCognitiveTrainingService(rxSystemConfigurationService, rxRecordInstanceDataPageService) {
            this.rxSystemConfigurationService = rxSystemConfigurationService;
            this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
        }
        RxCognitiveTrainingService.prototype.getClassificationServiceProvider = function () {
            return this.rxSystemConfigurationService.getConfiguration('classificationServiceProvider');
        };
        RxCognitiveTrainingService.prototype.getChatbotLocalesById = function (id) {
            return this.rxRecordInstanceDataPageService.post({
                params: {
                    recorddefinition: i2.RX_CHATBOT.chatbotLocales.recordDefinitionName,
                    propertySelection: lodash.values(i2.RX_CHATBOT.chatbotLocales.fieldIds).join(','),
                    queryExpression: "'" + i2.RX_CHATBOT.chatbotLocales.fieldIds.botConfigurationId + "'=\"" + id + "\""
                }
            });
        };
        return RxCognitiveTrainingService;
    }());
    RxCognitiveTrainingService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveTrainingService, deps: [{ token: i2__namespace.RxSystemConfigurationService }, { token: i3__namespace$2.RxRecordInstanceDataPageService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxCognitiveTrainingService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveTrainingService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveTrainingService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxSystemConfigurationService }, { type: i3__namespace$2.RxRecordInstanceDataPageService }]; } });

    var RxCognitiveTrainingUtilsService = /** @class */ (function () {
        function RxCognitiveTrainingUtilsService() {
        }
        RxCognitiveTrainingUtilsService.prototype.getDataSourceType = function (dataSourceHistory) {
            var dataSourceType;
            if (dataSourceHistory.fileName) {
                dataSourceType = RX_COGNITIVE_TRAINING.settings.dataSourceTypes.fileDataSource;
            }
            else if (dataSourceHistory.recordDefinitionName) {
                dataSourceType = RX_COGNITIVE_TRAINING.settings.dataSourceTypes.innovationSuiteDataSource;
            }
            return dataSourceType;
        };
        RxCognitiveTrainingUtilsService.prototype.getTrainingLocales = function (trainingTypeValue) {
            var result;
            if (trainingTypeValue === RX_COGNITIVE_TRAINING.settings.trainingTypes[i2.MachineLearningProviderNames.Native].value) {
                result = RX_COGNITIVE_TRAINING.settings.nativeProviderTrainingLocales;
            }
            else if (trainingTypeValue === RX_COGNITIVE_TRAINING.settings.trainingTypes[i2.MachineLearningProviderNames.Watson].value) {
                result = RX_COGNITIVE_TRAINING.settings.watsonProviderTrainingLocales;
            }
            return result;
        };
        return RxCognitiveTrainingUtilsService;
    }());
    RxCognitiveTrainingUtilsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveTrainingUtilsService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxCognitiveTrainingUtilsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveTrainingUtilsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCognitiveTrainingUtilsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }] });

    var ChatbotDataSetBladeComponent = /** @class */ (function (_super) {
        __extends(ChatbotDataSetBladeComponent, _super);
        function ChatbotDataSetBladeComponent(dockedPanelContext, rxChatbotDefinitionDataPageService, rxCognitiveTrainingService, rxCognitiveTrainingUtilsService, rxRecordInstanceService, translateService, injector) {
            var _this = _super.call(this, dockedPanelContext, injector) || this;
            _this.dockedPanelContext = dockedPanelContext;
            _this.rxChatbotDefinitionDataPageService = rxChatbotDefinitionDataPageService;
            _this.rxCognitiveTrainingService = rxCognitiveTrainingService;
            _this.rxCognitiveTrainingUtilsService = rxCognitiveTrainingUtilsService;
            _this.rxRecordInstanceService = rxRecordInstanceService;
            _this.translateService = translateService;
            _this.injector = injector;
            _this.chatbotDefinitionPickerOptions = {
                label: _this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.name.label'),
                definitionType: i4.RxDefinitionPickerType.Chatbot,
                required: true
            };
            _this.csvFileUploadMode = i1$2.UploaderMode.Auto;
            _this.chatbotDefinitionName$ = new rxjs.BehaviorSubject('');
            _this.chatbotDefinitions$ = _this.rxChatbotDefinitionDataPageService
                .get({
                headers: {
                    'default-bundle-scope': ''
                },
                params: {
                    propertySelection: ['chatbotName', 'id', 'enableTranslation']
                }
            })
                .pipe(operators.map(function (dataPage) { return dataPage.data; }));
            _this.chatbotDefinition$ = rxjs.combineLatest([
                _this.chatbotDefinitionName$,
                _this.chatbotDefinitions$
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), chatbotDefinitionName = _b[0], chatbotDefinitions = _b[1];
                return lodash.find(chatbotDefinitions, { chatbotName: chatbotDefinitionName }) || null;
            }), operators.shareReplay(1));
            _this.isChatbotTranslationEnabled$ = _this.chatbotDefinition$.pipe(operators.map(function (chatbotDefinition) { return (chatbotDefinition === null || chatbotDefinition === void 0 ? void 0 : chatbotDefinition.enableTranslation) === 1; }));
            _this.chatbotLocaleOptions$ = _this.chatbotDefinition$.pipe(operators.switchMap(function (chatbotDefinition) { return chatbotDefinition
                ? _this.rxCognitiveTrainingService
                    .getChatbotLocalesById(chatbotDefinition.id)
                    .pipe(operators.map(function (dataPageResult) { return dataPageResult.data.map(function (localeFieldIds) { return localeFieldIds[i2.RX_CHATBOT.chatbotLocales.fieldIds.locale]; }); }))
                : rxjs.of([]); }));
            _this.optionFormatter = function (opt) { return opt; };
            _this.contextData = _this.dockedPanelContext.getData().data;
            return _this;
        }
        ChatbotDataSetBladeComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.localeOptions = this.rxCognitiveTrainingUtilsService.getTrainingLocales(RX_COGNITIVE_TRAINING.settings.trainingTypes.chatbot.value);
            var dataSource = this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource);
            this.dataSet = {
                dataSetName: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName),
                description: this.contextData.recordInstance.getFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.description),
                csvFile: null,
                chatbotLocale: [this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.locale)],
                chatbotDefinitionName: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.chatbotName),
                locale: [
                    this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetLocale) ||
                        RX_COGNITIVE_TRAINING.settings.defaultTrainingLocale
                ],
                lastSubmittedDate: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastSubmitted),
                status: lodash.find(RX_COGNITIVE_TRAINING.settings.trainingStatuses, {
                    value: this.contextData.recordInstance.getFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.status)
                })
            };
            if (dataSource && (this.contextData.editDataSet || this.contextData.copyDataSet)) {
                this.rxRecordInstanceService
                    .getAttachment(RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName, RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, this.contextData.getAttachmentRecordInstanceId)
                    .subscribe(function (blob) {
                    _this.dataSet.csvFile = [
                        {
                            data: lodash.assign(blob, {
                                name: dataSource
                            }),
                            downloadURL: _this.rxRecordInstanceService.getAttachmentDownloadUrl(RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName, RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, _this.contextData.recordInstance.id),
                            isUploading: true
                        }
                    ];
                });
            }
            if (this.dataSet.chatbotDefinitionName) {
                this.chatbotDefinitionName$.next(this.dataSet.chatbotDefinitionName);
            }
        };
        ChatbotDataSetBladeComponent.prototype.isDirty = function () {
            return this.chatbotDataSetForm.dirty;
        };
        ChatbotDataSetBladeComponent.prototype.ngOnDestroy = function () {
            this.chatbotDefinitionName$.complete();
        };
        ChatbotDataSetBladeComponent.prototype.onChatbotDefinitionNameChange = function (chatbotDefinitionName) {
            this.dataSet.chatbotLocale = [];
            this.dataSet.locale = [];
            this.chatbotDefinitionName$.next(chatbotDefinitionName);
        };
        ChatbotDataSetBladeComponent.prototype.onSaveClick = function () {
            var _this = this;
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSourceHistory, JSON.stringify({
                resourceType: this.contextData.dataSourceType.resourceType,
                fileName: this.dataSet.csvFile && this.dataSet.csvFile[0].data.name
            }));
            this.contextData.recordInstance.setFieldProp(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, 'file', (!lodash.isEmpty(this.dataSet.csvFile) && this.dataSet.csvFile[0].data) || null);
            this.contextData.recordInstance.setFieldProp(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, 'value', (!lodash.isEmpty(this.dataSet.csvFile) && this.dataSet.csvFile[0].data.name) || null);
            this.contextData.recordInstance.setFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.description, this.dataSet.description);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetLocale, this.dataSet.locale[0] || null);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastSubmitted, moment__default["default"]());
            if (this.contextData.isNewDataSet || this.contextData.copyDataSet) {
                this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.bundleId, this.contextData.bundleId);
                this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName, this.dataSet.dataSetName);
                this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetID, '');
                this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.chatbotName, this.dataSet.chatbotDefinitionName);
                this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.locale, this.dataSet.chatbotLocale[0]);
                this.contextData.recordInstance.setFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.status, RX_COGNITIVE_TRAINING.settings.trainingStatuses.untrained.value);
                this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainingType, RX_COGNITIVE_TRAINING.settings.trainingTypes.chatbot.value);
                this.rxRecordInstanceService.create(this.contextData.recordInstance).subscribe(function () {
                    _this.dockedPanelContext.close('save');
                });
            }
            else if (this.contextData.editDataSet) {
                if (this.dataSet.status.value === RX_COGNITIVE_TRAINING.settings.trainingStatuses.trained.value ||
                    this.dataSet.status.value === RX_COGNITIVE_TRAINING.settings.trainingStatuses.failed.value) {
                    this.contextData.recordInstance.setFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.status, RX_COGNITIVE_TRAINING.settings.trainingStatuses.pendingRetraining.value);
                }
                this.rxRecordInstanceService.save(this.contextData.recordInstance).subscribe(function () {
                    _this.dockedPanelContext.close('save');
                });
            }
        };
        ChatbotDataSetBladeComponent.prototype.onCloseClick = function () {
            this.dockedPanelContext.dismiss(i1$2.DismissReasons.CLOSE_BTN);
        };
        return ChatbotDataSetBladeComponent;
    }(i1$1.RxModalClass));
    ChatbotDataSetBladeComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ChatbotDataSetBladeComponent, deps: [{ token: i1__namespace$1.DockedPanelContext }, { token: i2__namespace.RxChatbotDefinitionDataPageService }, { token: RxCognitiveTrainingService }, { token: RxCognitiveTrainingUtilsService }, { token: i3__namespace$2.RxRecordInstanceService }, { token: i4__namespace.TranslateService }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ChatbotDataSetBladeComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ChatbotDataSetBladeComponent, selector: "rx-chatbot-data-set-blade", viewQueries: [{ propertyName: "chatbotDataSetForm", first: true, predicate: ["chatbotDataSetForm"], descendants: true, read: i1.NgForm, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"dp-body\">\n  <form #chatbotDataSetForm=\"ngForm\">\n    <div class=\"d-flex justify-content-between m-0 mb-4\" *ngIf=\"contextData.editDataSet\">\n      <label class=\"form-control-label\">\n        {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.date-last-submitted.label' | translate }}\n      </label>\n\n      <div>{{ dataSet.lastSubmittedDate | date: 'medium' }}</div>\n    </div>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"data-set-name\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.data-set-name.label' | translate }}\"\n      rx-id=\"data-set-name-field\"\n      required\n      [(ngModel)]=\"dataSet.dataSetName\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"description\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.description.label' | translate }}\"\n      rx-id=\"description-field\"\n      required\n      [(ngModel)]=\"dataSet.description\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-uploader\n      class=\"form-group d-block\"\n      name=\"csv-file\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.csv-file.label' | translate }}\"\n      rx-id=\"csv-file-field\"\n      required\n      reusable=\"true\"\n      [uploadMode]=\"csvFileUploadMode\"\n      [allowedTypes]=\"['csv']\"\n      [(ngModel)]=\"dataSet.csvFile\"\n    >\n    </adapt-rx-uploader>\n\n    <rx-definition-picker\n      class=\"form-group d-block\"\n      name=\"chatbot-name\"\n      rx-id=\"chatbot-name-field\"\n      required\n      [options]=\"chatbotDefinitionPickerOptions\"\n      [(ngModel)]=\"dataSet.chatbotDefinitionName\"\n      (ngModelChange)=\"onChatbotDefinitionNameChange($event)\"\n    >\n    </rx-definition-picker>\n\n    <div *ngIf=\"chatbotDefinition$ | async\">\n      <adapt-rx-select\n        class=\"form-group d-block\"\n        name=\"chatbot-locale\"\n        label=\"{{\n          'com.bmc.arsys.rx.client.admin.cognitive-training.chatbot-data-set-blade.chatbot-locale.label' | translate\n        }}\"\n        rx-id=\"chatbot-locale-field\"\n        required\n        [options]=\"(chatbotLocaleOptions$ | async) || []\"\n        [optionFormatter]=\"optionFormatter\"\n        [(ngModel)]=\"dataSet.chatbotLocale\"\n      >\n      </adapt-rx-select>\n\n      <adapt-rx-select\n        class=\"form-group d-block\"\n        *ngIf=\"isChatbotTranslationEnabled$ | async\"\n        name=\"locale\"\n        label=\"{{\n          'com.bmc.arsys.rx.client.admin.cognitive-training.chatbot-data-set-blade.data-set-locale.label' | translate\n        }}\"\n        rx-id=\"locale-field\"\n        required\n        [options]=\"localeOptions\"\n        [optionFormatter]=\"optionFormatter\"\n        [(ngModel)]=\"dataSet.locale\"\n      >\n      </adapt-rx-select>\n    </div>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button\n    class=\"mr-2\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    adapt-button\n    btn-type=\"primary\"\n    [disabled]=\"chatbotDataSetForm.pristine || chatbotDataSetForm.invalid\"\n    (click)=\"onSaveClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button class=\"mr-2\" type=\"button\" rx-id=\"close-button\" adapt-button btn-type=\"secondary\" (click)=\"onCloseClick()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxUploaderComponent, selector: "adapt-rx-uploader", inputs: ["uploadMode", "selectionMode", "enableFileDialog", "allowedTypes", "forbiddenTypes", "suppressParallel", "filesCount", "allowDuplicates", "showUploadFolderAlert", "visibleFiles", "reusable", "allowDeletion", "customErrors", "indeterminateFileLoader", "url", "deleteUrl", "droppableArea", "enableCustomDownload", "customDownload", "popoverAppendToBody", "showTypesRestriction", "showMinSizeRestriction", "showMaxSizeRestriction", "showFilesCountRestriction", "texts", "icons", "fileErrors", "enableDnD", "maxFileSize", "minFileSize", "chunkSize", "testID"], outputs: ["beforeFileDialogOpen", "afterFileDialogOpen", "beforeFilesAdded", "afterFilesAdded", "dropped", "dragOver", "startFileUploading", "processFileUploading", "endFileUploading", "errorFileUploading", "finishedFileUploading", "removedFileFromQueue", "deletedFile", "cancelUploading"] }, { type: i4__namespace$1.RxDefinitionPickerComponent, selector: "rx-definition-picker", inputs: ["options", "isDisabled"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i4__namespace.TranslatePipe, "date": i8__namespace.DatePipe, "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ChatbotDataSetBladeComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-chatbot-data-set-blade',
                        templateUrl: './chatbot-data-set-blade.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.DockedPanelContext }, { type: i2__namespace.RxChatbotDefinitionDataPageService }, { type: RxCognitiveTrainingService }, { type: RxCognitiveTrainingUtilsService }, { type: i3__namespace$2.RxRecordInstanceService }, { type: i4__namespace.TranslateService }, { type: i0__namespace.Injector }]; }, propDecorators: { chatbotDataSetForm: [{
                    type: i0.ViewChild,
                    args: ['chatbotDataSetForm', { static: true, read: i1.NgForm }]
                }] } });

    var FileDataSetBladeComponent = /** @class */ (function (_super) {
        __extends(FileDataSetBladeComponent, _super);
        function FileDataSetBladeComponent(dockedPanelContext, rxCognitiveTrainingUtilsService, rxRecordInstanceService, injector) {
            var _this = _super.call(this, dockedPanelContext, injector) || this;
            _this.dockedPanelContext = dockedPanelContext;
            _this.rxCognitiveTrainingUtilsService = rxCognitiveTrainingUtilsService;
            _this.rxRecordInstanceService = rxRecordInstanceService;
            _this.injector = injector;
            _this.csvFileUploadMode = i1$2.UploaderMode.Auto;
            _this.optionFormatter = function (opt) { return opt; };
            _this.contextData = _this.dockedPanelContext.getData().data;
            return _this;
        }
        FileDataSetBladeComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.localeOptions = this.rxCognitiveTrainingUtilsService.getTrainingLocales(this.contextData.trainingType.value);
            var dataSource = this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource);
            this.dataSet = {
                dataSetName: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName),
                description: this.contextData.recordInstance.getFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.description),
                csvFile: null,
                locale: [
                    this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.locale) ||
                        RX_COGNITIVE_TRAINING.settings.defaultTrainingLocale
                ],
                testDataPercent: this.contextData.isNewDataSet
                    ? RX_COGNITIVE_TRAINING.settings.defaultTestDataPercentage
                    : this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.testDataPercent),
                trainDataPercent: this.contextData.isNewDataSet
                    ? RX_COGNITIVE_TRAINING.settings.defaultTrainDataPercentage
                    : this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainDataPercent),
                status: lodash.find(RX_COGNITIVE_TRAINING.settings.trainingStatuses, {
                    value: this.contextData.recordInstance.getFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.status)
                }),
                lastSubmittedDate: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastSubmitted),
                lastTrainedDate: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastTrained),
                machineLearningError: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.machineLearningError)
            };
            if (dataSource && (this.contextData.editDataSet || this.contextData.copyDataSet)) {
                this.rxRecordInstanceService
                    .getAttachment(RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName, RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, this.contextData.getAttachmentRecordInstanceId)
                    .subscribe(function (blob) {
                    _this.dataSet.csvFile = [
                        {
                            data: lodash.assign(blob, {
                                name: dataSource
                            }),
                            downloadURL: _this.rxRecordInstanceService.getAttachmentDownloadUrl(RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName, RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, _this.contextData.recordInstance.id),
                            isUploading: true
                        }
                    ];
                });
            }
        };
        FileDataSetBladeComponent.prototype.isDirty = function () {
            return this.fileDataSetForm.dirty;
        };
        FileDataSetBladeComponent.prototype.onTrainDataPercentCounterChange = function (trainDataPercent) {
            this.dataSet.testDataPercent = 100 - trainDataPercent;
        };
        FileDataSetBladeComponent.prototype.onTestDataPercentCounterChange = function (testDataPercent) {
            this.dataSet.trainDataPercent = 100 - testDataPercent;
        };
        FileDataSetBladeComponent.prototype.onSaveClick = function () {
            var _this = this;
            this.contextData.recordInstance.setFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.description, this.dataSet.description);
            this.contextData.recordInstance.setFieldProp(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, 'file', (!lodash.isEmpty(this.dataSet.csvFile) && this.dataSet.csvFile[0].data) || null);
            this.contextData.recordInstance.setFieldProp(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, 'value', (!lodash.isEmpty(this.dataSet.csvFile) && this.dataSet.csvFile[0].data.name) || null);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSourceHistory, JSON.stringify({
                resourceType: this.contextData.dataSourceType.resourceType,
                fileName: this.dataSet.csvFile[0].data.name
            }));
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.locale, this.dataSet.locale[0]);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastSubmitted, moment__default["default"]());
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.testDataPercent, this.dataSet.testDataPercent);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainDataPercent, this.dataSet.trainDataPercent);
            if (this.contextData.isNewDataSet || this.contextData.copyDataSet) {
                this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.bundleId, this.contextData.bundleId);
                this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName, this.dataSet.dataSetName);
                this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetID, '');
                this.contextData.recordInstance.setFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.status, RX_COGNITIVE_TRAINING.settings.trainingStatuses.untrained.value);
                this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.classificationServiceProvider, this.contextData.trainingType.uniqueValue);
                this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainingType, this.contextData.trainingType.value);
                this.rxRecordInstanceService.create(this.contextData.recordInstance).subscribe(function () {
                    _this.dockedPanelContext.close('save');
                });
            }
            else if (this.contextData.editDataSet) {
                if (this.dataSet.status.value === RX_COGNITIVE_TRAINING.settings.trainingStatuses.trained.value ||
                    this.dataSet.status.value === RX_COGNITIVE_TRAINING.settings.trainingStatuses.failed.value) {
                    this.contextData.recordInstance.setFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.status, RX_COGNITIVE_TRAINING.settings.trainingStatuses.pendingRetraining.value);
                }
                this.rxRecordInstanceService.save(this.contextData.recordInstance).subscribe(function () {
                    _this.dockedPanelContext.close('save');
                });
            }
        };
        FileDataSetBladeComponent.prototype.onCloseClick = function () {
            this.dockedPanelContext.dismiss(i1$2.DismissReasons.CLOSE_BTN);
        };
        return FileDataSetBladeComponent;
    }(i1$1.RxModalClass));
    FileDataSetBladeComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FileDataSetBladeComponent, deps: [{ token: i1__namespace$1.DockedPanelContext }, { token: RxCognitiveTrainingUtilsService }, { token: i3__namespace$2.RxRecordInstanceService }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FileDataSetBladeComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: FileDataSetBladeComponent, selector: "rx-file-data-set-blade", viewQueries: [{ propertyName: "fileDataSetForm", first: true, predicate: ["fileDataSetForm"], descendants: true, read: i1.NgForm, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"dp-body\">\n  <form #fileDataSetForm=\"ngForm\">\n    <div *ngIf=\"contextData.editDataSet\">\n      <div class=\"d-flex justify-content-between m-0 mb-3\">\n        <div>\n          <label class=\"form-control-label\">\n            {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.status.label' | translate }}\n          </label>\n\n          <div>{{ dataSet.status.label }}</div>\n        </div>\n\n        <div>\n          <label class=\"form-control-label\">\n            {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.date-last-submitted.label' | translate }}\n          </label>\n\n          <div>{{ dataSet.lastSubmittedDate | date: 'medium' }}</div>\n        </div>\n\n        <div>\n          <label class=\"form-control-label\">\n            {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.date-last-trained.label' | translate }}\n          </label>\n\n          <div>{{ dataSet.lastTrainedDate | date: 'medium' }}</div>\n        </div>\n      </div>\n\n      <adapt-alert\n        *ngIf=\"dataSet.machineLearningError\"\n        [config]=\"{\n          content: dataSet.machineLearningError,\n          type: 'inline',\n          variant: 'danger'\n        }\"\n      ></adapt-alert>\n    </div>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"data-set-name\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.data-set-name.label' | translate }}\"\n      rx-id=\"data-set-name-field\"\n      required\n      [disabled]=\"contextData.editDataSet\"\n      [(ngModel)]=\"dataSet.dataSetName\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"description\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.chatbots.description.title' | translate }}\"\n      rx-id=\"description-field\"\n      required\n      [(ngModel)]=\"dataSet.description\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"training-type\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.training-type.label' | translate }}\"\n      rx-id=\"training-type-field\"\n      required\n      disabled\n      [(ngModel)]=\"contextData.trainingType.displayName\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-uploader\n      class=\"form-group d-block\"\n      name=\"csv-file\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.csv-file.label' | translate }}\"\n      rx-id=\"csv-file-field\"\n      required\n      reusable=\"true\"\n      [uploadMode]=\"csvFileUploadMode\"\n      [allowedTypes]=\"['csv']\"\n      [(ngModel)]=\"dataSet.csvFile\"\n    >\n    </adapt-rx-uploader>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      name=\"locale\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.locale.label' | translate }}\"\n      rx-id=\"locale-field\"\n      required\n      [options]=\"localeOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      [(ngModel)]=\"dataSet.locale\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-counter\n      class=\"form-group d-block\"\n      name=\"training-data\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.training-data.label' | translate }}\"\n      rx-id=\"training-data-field\"\n      placeholder=\"0\"\n      adaptMin=\"0\"\n      adaptMax=\"100\"\n      min=\"0\"\n      max=\"100\"\n      required\n      (ngModelChange)=\"onTrainDataPercentCounterChange($event)\"\n      [(ngModel)]=\"dataSet.trainDataPercent\"\n    >\n    </adapt-rx-counter>\n\n    <adapt-rx-counter\n      class=\"form-group d-block\"\n      name=\"test-data\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.test-data.label' | translate }}\"\n      rx-id=\"test-data-field\"\n      placeholder=\"0\"\n      adaptMin=\"0\"\n      adaptMax=\"100\"\n      min=\"0\"\n      max=\"100\"\n      required\n      (ngModelChange)=\"onTestDataPercentCounterChange($event)\"\n      [(ngModel)]=\"dataSet.testDataPercent\"\n    >\n    </adapt-rx-counter>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button\n    class=\"mr-2\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    adapt-button\n    btn-type=\"primary\"\n    [disabled]=\"fileDataSetForm.pristine || fileDataSetForm.invalid\"\n    (click)=\"onSaveClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button class=\"mr-2\" type=\"button\" rx-id=\"close-button\" adapt-button btn-type=\"secondary\" (click)=\"onCloseClick()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1__namespace$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxUploaderComponent, selector: "adapt-rx-uploader", inputs: ["uploadMode", "selectionMode", "enableFileDialog", "allowedTypes", "forbiddenTypes", "suppressParallel", "filesCount", "allowDuplicates", "showUploadFolderAlert", "visibleFiles", "reusable", "allowDeletion", "customErrors", "indeterminateFileLoader", "url", "deleteUrl", "droppableArea", "enableCustomDownload", "customDownload", "popoverAppendToBody", "showTypesRestriction", "showMinSizeRestriction", "showMaxSizeRestriction", "showFilesCountRestriction", "texts", "icons", "fileErrors", "enableDnD", "maxFileSize", "minFileSize", "chunkSize", "testID"], outputs: ["beforeFileDialogOpen", "afterFileDialogOpen", "beforeFilesAdded", "afterFilesAdded", "dropped", "dragOver", "startFileUploading", "processFileUploading", "endFileUploading", "errorFileUploading", "finishedFileUploading", "removedFileFromQueue", "deletedFile", "cancelUploading"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1__namespace$1.AdaptMinValidatorDirective, selector: "[adaptMin][ngModel],[adaptMin][formControl]", inputs: ["adaptMin", "adaptMinMessageFn"] }, { type: i1__namespace$1.AdaptMaxValidatorDirective, selector: "[adaptMax][ngModel],[adaptMax][formControl]", inputs: ["adaptMax", "adaptMaxMessageFn"] }], pipes: { "translate": i4__namespace.TranslatePipe, "date": i8__namespace.DatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FileDataSetBladeComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-file-data-set-blade',
                        templateUrl: './file-data-set-blade.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.DockedPanelContext }, { type: RxCognitiveTrainingUtilsService }, { type: i3__namespace$2.RxRecordInstanceService }, { type: i0__namespace.Injector }]; }, propDecorators: { fileDataSetForm: [{
                    type: i0.ViewChild,
                    args: ['fileDataSetForm', { static: true, read: i1.NgForm }]
                }] } });

    var InteractiveEvaluationBladeComponent = /** @class */ (function (_super) {
        __extends(InteractiveEvaluationBladeComponent, _super);
        function InteractiveEvaluationBladeComponent(dockedPanelContext, rxCommandFactoryService, rxRecordInstanceDataPageService, injector) {
            var _this = _super.call(this, dockedPanelContext, injector) || this;
            _this.dockedPanelContext = dockedPanelContext;
            _this.rxCommandFactoryService = rxCommandFactoryService;
            _this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            _this.injector = injector;
            _this.classifications = [];
            _this.evaluationText = '';
            _this.trainedDataSetOptions = [];
            _this.optionFormatter = function (opt) { return opt.name; };
            _this.contextData = _this.dockedPanelContext.getData();
            return _this;
        }
        InteractiveEvaluationBladeComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            this.getDataSetList();
        };
        InteractiveEvaluationBladeComponent.prototype.isDirty = function () {
            return this.interactiveEvaluationForm.dirty;
        };
        InteractiveEvaluationBladeComponent.prototype.getDataSetList = function () {
            var _this = this;
            var params = {
                recorddefinition: RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName,
                sortBy: RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName,
                queryExpression: this.contextData.evaluation.queryExpression +
                    JSON.stringify(this.contextData.bundleId) +
                    this.contextData.evaluation.serviceProviderQueryExpresion +
                    this.contextData.trainingType.uniqueValue,
                propertySelection: [
                    RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName,
                    i3.RX_RECORD_DEFINITION.coreFieldIds.status
                ].join(',')
            };
            this.busy = this.rxRecordInstanceDataPageService.post({ params: params }).subscribe(function (result) {
                _this.trainedDataSetOptions = lodash.chain(result.data)
                    .filter(function (dataSet) { return dataSet[i3.RX_RECORD_DEFINITION.coreFieldIds.status] ===
                    RX_COGNITIVE_TRAINING.settings.trainingStatuses.trained.value ||
                    dataSet[i3.RX_RECORD_DEFINITION.coreFieldIds.status] ===
                        RX_COGNITIVE_TRAINING.settings.trainingStatuses.pendingRetraining.value; })
                    .map(function (dataSet) { return ({
                    id: _this.trainedDataSetOptions.length + 1,
                    name: dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName]
                }); })
                    .value();
            });
        };
        InteractiveEvaluationBladeComponent.prototype.classify = function () {
            var _this = this;
            this.rxCommandFactoryService
                .forResourceType(RX_COGNITIVE_TRAINING.settings.commands.classify)
                .execute({
                textToClassify: this.evaluationText,
                trainingDataSetName: this.contextData.bundleId + ':' + this.trainedDataSet[0].name
            })
                .subscribe(function (classifications) {
                _this.classifications = classifications;
            });
        };
        InteractiveEvaluationBladeComponent.prototype.displayClassification = function (classification) {
            return classification.className + " " + classification.confidence.toFixed(2);
        };
        InteractiveEvaluationBladeComponent.prototype.onCloseClick = function () {
            this.dockedPanelContext.dismiss(i1$2.DismissReasons.CLOSE_BTN);
        };
        return InteractiveEvaluationBladeComponent;
    }(i1$1.RxModalClass));
    InteractiveEvaluationBladeComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: InteractiveEvaluationBladeComponent, deps: [{ token: i1__namespace$1.DockedPanelContext }, { token: i2__namespace.RxCommandFactoryService }, { token: i3__namespace$2.RxRecordInstanceDataPageService }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    InteractiveEvaluationBladeComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: InteractiveEvaluationBladeComponent, selector: "rx-interactive-evaluation-blade", viewQueries: [{ propertyName: "interactiveEvaluationForm", first: true, predicate: ["interactiveEvaluationForm"], descendants: true, read: i1.NgForm, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"dp-body\">\n  <form #interactiveEvaluationForm=\"ngForm\">\n    <rx-busy-indicator [options]=\"{ busy: busy, loaderType: 'section' }\"></rx-busy-indicator>\n\n    <div class=\"d-flex flex-row justify-content-between\">\n      <adapt-rx-select\n        class=\"form-group d-block w-100\"\n        name=\"trained-data-set\"\n        label=\"{{\n          'com.bmc.arsys.rx.client.admin.cognitive-training.interactive-evaluation-blade.trained-data-set.label'\n            | translate\n        }}\"\n        rx-id=\"trained-data-set-field\"\n        required\n        [options]=\"trainedDataSetOptions\"\n        [optionFormatter]=\"optionFormatter\"\n        [(ngModel)]=\"trainedDataSet\"\n      >\n      </adapt-rx-select>\n\n      <button\n        class=\"d-icon-refresh_adapt\"\n        type=\"button\"\n        rx-id=\"refresh-button\"\n        adapt-button\n        btn-type=\"tertiary\"\n        (click)=\"getDataSetList()\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.refresh.label' | translate }}\n      </button>\n    </div>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"evaluation-text\"\n      label=\"{{\n        'com.bmc.arsys.rx.client.admin.cognitive-training.interactive-evaluation-blade.text.label' | translate\n      }}\"\n      rx-id=\"evaluation-text-field\"\n      required\n      [tooltip]=\"{\n        iconName: 'question_circle_o',\n        content: 'Separate text entries for multiple fields with a comma.',\n        placement: 'right',\n        popoverMode: true\n      }\"\n      [(ngModel)]=\"evaluationText\"\n    >\n    </adapt-rx-textfield>\n\n    <button\n      type=\"button\"\n      rx-id=\"classify-button\"\n      adapt-button\n      btn-type=\"primary\"\n      [disabled]=\"interactiveEvaluationForm.invalid\"\n      (click)=\"classify()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.interactive-evaluation.classify.label' | translate }}\n    </button>\n\n    <div *ngIf=\"classifications\">\n      <hr />\n\n      <div class=\"card card-well mb-2\" *ngFor=\"let classification of classifications; let index = index\">\n        {{ displayClassification(classification) }}\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button class=\"mr-2\" type=\"button\" rx-id=\"close-button\" adapt-button btn-type=\"secondary\" (click)=\"onCloseClick()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1__namespace.RxBusyIndicatorComponent, selector: "rx-busy-indicator", inputs: ["options"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: InteractiveEvaluationBladeComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-interactive-evaluation-blade',
                        templateUrl: './interactive-evaluation-blade.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.DockedPanelContext }, { type: i2__namespace.RxCommandFactoryService }, { type: i3__namespace$2.RxRecordInstanceDataPageService }, { type: i0__namespace.Injector }]; }, propDecorators: { interactiveEvaluationForm: [{
                    type: i0.ViewChild,
                    args: ['interactiveEvaluationForm', { static: true, read: i1.NgForm }]
                }] } });

    var RxRecordDataSetExpressionConfigurator = /** @class */ (function (_super) {
        __extends(RxRecordDataSetExpressionConfigurator, _super);
        function RxRecordDataSetExpressionConfigurator() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.commonDataDictionary$ = rxjs.of([
                {
                    label: 'Keywords',
                    children: [
                        {
                            label: 'Current user',
                            icon: 'd-icon-dollar',
                            expression: "$USER$"
                        },
                        {
                            label: 'NULL',
                            icon: 'd-icon-dollar',
                            expression: '$NULL$',
                            hidden: true
                        },
                        {
                            label: 'Time stamp',
                            icon: 'd-icon-dollar',
                            expression: '$TIMESTAMP$'
                        }
                    ]
                }
            ]);
            return _this;
        }
        return RxRecordDataSetExpressionConfigurator;
    }(i2.RxExpressionConfigurator));

    var RecordDataSetBladeComponent = /** @class */ (function (_super) {
        __extends(RecordDataSetBladeComponent, _super);
        function RecordDataSetBladeComponent(dockedPanelContext, rxCognitiveTrainingUtilsService, rxDefinitionNameService, rxExpressionEditorService, rxRecordDefinitionCacheService, rxRecordInstanceService, translateService, injector) {
            var _this = _super.call(this, dockedPanelContext, injector) || this;
            _this.dockedPanelContext = dockedPanelContext;
            _this.rxCognitiveTrainingUtilsService = rxCognitiveTrainingUtilsService;
            _this.rxDefinitionNameService = rxDefinitionNameService;
            _this.rxExpressionEditorService = rxExpressionEditorService;
            _this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            _this.rxRecordInstanceService = rxRecordInstanceService;
            _this.translateService = translateService;
            _this.injector = injector;
            _this.csvFileUploadMode = i1$2.UploaderMode.Auto;
            _this.recordDefinitionPickerOptions = {
                label: _this.translateService.instant('com.bmc.arsys.rx.client.approval.record-definition-field.label'),
                definitionType: i4.RxDefinitionPickerType.Record,
                required: true
            };
            _this.filterModeOptions = {
                label: _this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set-blade.filters.label'),
                items: [
                    {
                        name: _this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set-blade.basic.label'),
                        value: i7.RecordGridFilterMode.Basic
                    },
                    {
                        name: _this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set-blade.expression.label'),
                        value: i7.RecordGridFilterMode.Expression
                    }
                ]
            };
            _this.recordDefinitionName$ = new rxjs.BehaviorSubject('');
            _this.recordDefinition$ = _this.recordDefinitionName$.pipe(operators.switchMap(function (recordDefinitionName) { return recordDefinitionName ? _this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName) : rxjs.of(null); }), operators.shareReplay(1));
            _this.fieldOptions$ = _this.recordDefinition$.pipe(operators.map(function (recordDefinition) { return recordDefinition === null || recordDefinition === void 0 ? void 0 : recordDefinition.fieldDefinitions.map(function (fieldDefinition) { return lodash.pick(fieldDefinition, ['name', 'id']); }).sort(function (a, b) { return a.name.localeCompare(b.name); }); }), operators.shareReplay(1));
            _this.optionFormatter = function (opt) { return opt; };
            _this.fieldOptionsFormatter = function (opt) { return opt.name; };
            _this.contextData = _this.dockedPanelContext.getData().data;
            return _this;
        }
        RecordDataSetBladeComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.expressionConfigurator = new RxRecordDataSetExpressionConfigurator();
            this.expressionConfigurator.configureForProperty({
                propertyPath: 'queryExpression',
                operators: this.expressionConfigurator.getOperatorRowsByGroup(i2.ExpressionOperatorGroup.All),
                dataDictionary$: this.recordDefinition$.pipe(operators.withLatestFrom(this.expressionConfigurator.commonDataDictionary$), operators.map(function (_a) {
                    var _b = __read(_a, 2), recordDefinition = _b[0], commonDataDictionary = _b[1];
                    return [
                        {
                            label: _this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set-blade.filter-by.label'),
                            children: [
                                {
                                    label: _this.rxDefinitionNameService.getDisplayName(recordDefinition === null || recordDefinition === void 0 ? void 0 : recordDefinition.name),
                                    children: recordDefinition === null || recordDefinition === void 0 ? void 0 : recordDefinition.fieldDefinitions.map(function (field) { return ({
                                        label: field.name,
                                        icon: 'd-icon-field_text',
                                        expression: "'" + field.id + "'"
                                    }); })
                                }
                            ]
                        },
                        commonDataDictionary[0]
                    ];
                }))
            });
            this.queryExpressionOptions = {
                label: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set-blade.expression.label'),
                dataDictionary$: this.expressionConfigurator.getDataDictionary('queryExpression'),
                operators: this.expressionConfigurator.getOperators()
            };
            this.localeOptions = this.rxCognitiveTrainingUtilsService.getTrainingLocales(this.contextData.trainingType.value);
            var dataSource = this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource);
            this.dataSet = {
                dataSetName: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName),
                description: this.contextData.recordInstance.getFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.description),
                csvFile: null,
                locale: [
                    this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.locale) ||
                        RX_COGNITIVE_TRAINING.settings.defaultTrainingLocale
                ],
                useSeedTrainingData: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.useSeedTrainingData),
                testDataPercent: this.contextData.isNewDataSet
                    ? RX_COGNITIVE_TRAINING.settings.defaultTestDataPercentage
                    : this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.testDataPercent),
                trainDataPercent: this.contextData.isNewDataSet
                    ? RX_COGNITIVE_TRAINING.settings.defaultTrainDataPercentage
                    : this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainDataPercent),
                status: lodash.find(RX_COGNITIVE_TRAINING.settings.trainingStatuses, {
                    value: this.contextData.recordInstance.getFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.status)
                }),
                lastSubmittedDate: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastSubmitted),
                lastTrainedDate: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastTrained),
                machineLearningError: this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.machineLearningError)
            };
            var dataSourceHistory = JSON.parse(this.contextData.recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSourceHistory));
            if (dataSourceHistory) {
                dataSourceHistory.layout = JSON.parse(dataSourceHistory.layout);
                dataSourceHistory.layout.categoryFields = lodash.map(dataSourceHistory.layout.categoryFields, function (categoryField) { return lodash.pick(categoryField, ['name', 'id']); });
                dataSourceHistory.layout.textFields = lodash.map(dataSourceHistory.layout.textFields, function (textField) { return lodash.pick(textField, ['name', 'id']); });
                dataSourceHistory.layout.queryExpressionBasic = {
                    filtersJson: JSON.stringify(dataSourceHistory.layout.queryExpressionBasic.filtersJson),
                    basicFilters: dataSourceHistory.layout.queryExpressionBasic.basicFilters
                };
            }
            else {
                dataSourceHistory = this.contextData.dataSourceType.dataSourceHistory;
            }
            this.dataSet.dataSourceHistory = dataSourceHistory;
            this.dataSet.filterMode = dataSourceHistory.queryExpression
                ? i7.RecordGridFilterMode.Expression
                : i7.RecordGridFilterMode.Basic;
            if (dataSource && (this.contextData.editDataSet || this.contextData.copyDataSet)) {
                this.rxRecordInstanceService
                    .getAttachment(RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName, RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, this.contextData.getAttachmentRecordInstanceId)
                    .subscribe(function (blob) {
                    _this.dataSet.csvFile = [
                        {
                            data: lodash.assign(blob, {
                                name: dataSource
                            }),
                            downloadURL: _this.rxRecordInstanceService.getAttachmentDownloadUrl(RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName, RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, _this.contextData.recordInstance.id),
                            isUploading: true
                        }
                    ];
                });
            }
            if (this.dataSet.dataSourceHistory.recordDefinitionName) {
                this.recordDefinitionName$.next(this.dataSet.dataSourceHistory.recordDefinitionName);
            }
        };
        RecordDataSetBladeComponent.prototype.isDirty = function () {
            return this.recordDataSetForm.dirty;
        };
        RecordDataSetBladeComponent.prototype.ngOnDestroy = function () {
            this.recordDefinitionName$.complete();
        };
        RecordDataSetBladeComponent.prototype.openExpressionEditor = function () {
            var _this = this;
            this.rxExpressionEditorService
                .openEditor({
                property: {
                    path: 'queryExpression',
                    value: this.dataSet.dataSourceHistory.queryExpression,
                    label: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set-blade.filter-expression.label')
                },
                expressionConfigurator: this.expressionConfigurator,
                legend: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.keyword.label'),
                        icon: 'd-icon-dollar'
                    },
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.expression-editor.legend.field.label'),
                        icon: 'd-icon-arrow_right_square_input'
                    }
                ]
            })
                .subscribe(function (expression) {
                _this.dataSet.dataSourceHistory.queryExpression = expression.value;
            });
        };
        RecordDataSetBladeComponent.prototype.isBasicFilterMode = function () {
            return this.dataSet.filterMode === i7.RecordGridFilterMode.Basic;
        };
        RecordDataSetBladeComponent.prototype.isExpressionFilterMode = function () {
            return this.dataSet.filterMode === i7.RecordGridFilterMode.Expression;
        };
        RecordDataSetBladeComponent.prototype.onRecordDefinitionNameChange = function (recordDefinitionName) {
            this.dataSet.filterMode = i7.RecordGridFilterMode.Basic;
            this.dataSet.dataSourceHistory.layout.queryExpressionBasic = {
                filtersJson: null,
                basicFilters: null
            };
            this.dataSet.dataSourceHistory.queryExpression = null;
            this.dataSet.dataSourceHistory.layout.textFields = [];
            this.dataSet.dataSourceHistory.layout.categoryFields = [];
            this.recordDefinitionName$.next(recordDefinitionName);
        };
        RecordDataSetBladeComponent.prototype.onTrainDataPercentCounterChange = function (trainDataPercent) {
            this.dataSet.testDataPercent = 100 - trainDataPercent;
        };
        RecordDataSetBladeComponent.prototype.onTestDataPercentCounterChange = function (testDataPercent) {
            this.dataSet.trainDataPercent = 100 - testDataPercent;
        };
        RecordDataSetBladeComponent.prototype.onFilterModeChange = function () {
            this.dataSet.dataSourceHistory.layout.queryExpressionBasic = {
                filtersJson: null,
                basicFilters: null
            };
            this.dataSet.dataSourceHistory.queryExpression = '';
        };
        RecordDataSetBladeComponent.prototype.onSaveClick = function () {
            var _this = this;
            this.contextData.recordInstance.setFieldProp(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, 'file', (!lodash.isEmpty(this.dataSet.csvFile) && this.dataSet.csvFile[0].data) || null);
            this.contextData.recordInstance.setFieldProp(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, 'value', (!lodash.isEmpty(this.dataSet.csvFile) && this.dataSet.csvFile[0].data.name) || null);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastSubmitted, moment__default["default"]());
            this.contextData.recordInstance.setFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.description, this.dataSet.description);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.locale, this.dataSet.locale[0]);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.testDataPercent, this.dataSet.testDataPercent);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainDataPercent, this.dataSet.trainDataPercent);
            this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSourceHistory, JSON.stringify({
                layout: JSON.stringify({
                    queryExpressionBasic: {
                        filtersJson: JSON.parse(this.dataSet.dataSourceHistory.layout.queryExpressionBasic.filtersJson),
                        basicFilters: this.dataSet.dataSourceHistory.layout.queryExpressionBasic.basicFilters
                    },
                    textFields: this.dataSet.dataSourceHistory.layout.textFields,
                    categoryFields: this.dataSet.dataSourceHistory.layout.categoryFields
                }),
                resourceType: this.contextData.dataSourceType.resourceType,
                recordDefinitionName: this.dataSet.dataSourceHistory.recordDefinitionName,
                queryExpression: this.dataSet.dataSourceHistory.queryExpression,
                trainingDataMapper: {
                    resourceType: this.dataSet.dataSourceHistory.trainingDataMapper.resourceType,
                    textFields: lodash.map(this.dataSet.dataSourceHistory.layout.textFields, 'id'),
                    categoryFields: lodash.map(this.dataSet.dataSourceHistory.layout.categoryFields, 'id')
                },
                timeCriteria: this.dataSet.dataSourceHistory.timeCriteria,
                isScheduleEnabled: this.dataSet.dataSourceHistory.isScheduleEnabled
            }));
            if (this.contextData.isNewDataSet || this.contextData.copyDataSet) {
                this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.bundleId, this.contextData.bundleId);
                this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName, this.dataSet.dataSetName);
                this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetID, '');
                this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.classificationServiceProvider, this.contextData.trainingType.uniqueValue);
                this.contextData.recordInstance.setFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.status, RX_COGNITIVE_TRAINING.settings.trainingStatuses.untrained.value);
                this.contextData.recordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainingType, this.contextData.trainingType.value);
                this.rxRecordInstanceService.create(this.contextData.recordInstance).subscribe(function () {
                    _this.dockedPanelContext.close('save');
                });
            }
            else if (this.contextData.editDataSet) {
                if (this.dataSet.status.value === RX_COGNITIVE_TRAINING.settings.trainingStatuses.trained.value ||
                    this.dataSet.status.value === RX_COGNITIVE_TRAINING.settings.trainingStatuses.failed.value) {
                    this.contextData.recordInstance.setFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.status, RX_COGNITIVE_TRAINING.settings.trainingStatuses.pendingRetraining.value);
                }
                this.rxRecordInstanceService.save(this.contextData.recordInstance).subscribe(function () {
                    _this.dockedPanelContext.close('save');
                });
            }
        };
        RecordDataSetBladeComponent.prototype.onCloseClick = function () {
            this.dockedPanelContext.dismiss(i1$2.DismissReasons.CLOSE_BTN);
        };
        return RecordDataSetBladeComponent;
    }(i1$1.RxModalClass));
    RecordDataSetBladeComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordDataSetBladeComponent, deps: [{ token: i1__namespace$1.DockedPanelContext }, { token: RxCognitiveTrainingUtilsService }, { token: i2__namespace.RxDefinitionNameService }, { token: i4__namespace$1.RxExpressionEditorService }, { token: i3__namespace$2.RxRecordDefinitionCacheService }, { token: i3__namespace$2.RxRecordInstanceService }, { token: i4__namespace.TranslateService }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RecordDataSetBladeComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RecordDataSetBladeComponent, selector: "rx-record-data-set-blade", viewQueries: [{ propertyName: "recordDataSetForm", first: true, predicate: ["recordDataSetForm"], descendants: true, read: i1.NgForm }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"dp-body\">\n  <form #recordDataSetForm=\"ngForm\">\n    <div *ngIf=\"contextData.editDataSet\">\n      <div class=\"d-flex justify-content-between m-0 mb-3\">\n        <div>\n          <label class=\"form-control-label\">\n            {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.status.label' | translate }}\n          </label>\n\n          <div>{{ dataSet.status.label }}</div>\n        </div>\n\n        <div>\n          <label class=\"form-control-label\">\n            {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.date-last-submitted.label' | translate }}\n          </label>\n\n          <div>{{ dataSet.lastSubmittedDate | date: 'medium' }}</div>\n        </div>\n\n        <div>\n          <label class=\"form-control-label\">\n            {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.date-last-trained.label' | translate }}\n          </label>\n\n          <div>{{ dataSet.lastTrainedDate | date: 'medium' }}</div>\n        </div>\n      </div>\n\n      <adapt-alert\n        *ngIf=\"dataSet.machineLearningError\"\n        [config]=\"{\n          content: dataSet.machineLearningError,\n          type: 'inline',\n          variant: 'danger'\n        }\"\n      ></adapt-alert>\n    </div>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"data-set-name\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.data-set-name.label' | translate }}\"\n      rx-id=\"data-set-name-field\"\n      required\n      [disabled]=\"contextData.editDataSet\"\n      [(ngModel)]=\"dataSet.dataSetName\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"description\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.description.label' | translate }}\"\n      rx-id=\"description-field\"\n      required\n      [(ngModel)]=\"dataSet.description\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      name=\"training-type\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.training-type.label' | translate }}\"\n      rx-id=\"training-type-field\"\n      required\n      disabled\n      [(ngModel)]=\"contextData.trainingType.displayName\"\n    >\n    </adapt-rx-textfield>\n\n    <span class=\"form-group d-block\" *ngIf=\"dataSet.useSeedTrainingData\">\n      {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set.seed-data-required.label' | translate }}\n    </span>\n\n    <span class=\"form-group d-block\" *ngIf=\"!dataSet.useSeedTrainingData\">\n      {{ 'com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set.no-seed-data-required.label' | translate }}\n    </span>\n\n    <adapt-rx-uploader\n      class=\"form-group d-block\"\n      name=\"csv-file\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.csv-file.label' | translate }}\"\n      rx-id=\"csv-file-field\"\n      reusable=\"true\"\n      [uploadMode]=\"csvFileUploadMode\"\n      [allowedTypes]=\"['csv']\"\n      [(ngModel)]=\"dataSet.csvFile\"\n    >\n    </adapt-rx-uploader>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      name=\"locale\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-search.locale.label' | translate }}\"\n      rx-id=\"locale-field\"\n      required\n      [options]=\"localeOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      [(ngModel)]=\"dataSet.locale\"\n    >\n    </adapt-rx-select>\n\n    <rx-definition-picker\n      class=\"form-group d-block\"\n      name=\"record-definition-name\"\n      rx-id=\"record-definition-name-field\"\n      required\n      [options]=\"recordDefinitionPickerOptions\"\n      [(ngModel)]=\"dataSet.dataSourceHistory.recordDefinitionName\"\n      (ngModelChange)=\"onRecordDefinitionNameChange($event)\"\n    >\n    </rx-definition-picker>\n\n    <div *ngIf=\"recordDefinition$ | async\">\n      <rx-group-button-form-control\n        class=\"form-group d-block\"\n        name=\"filter-mode\"\n        rx-id=\"filter-mode-field\"\n        [options]=\"filterModeOptions\"\n        (ngModelChange)=\"onFilterModeChange()\"\n        [(ngModel)]=\"dataSet.filterMode\"\n      >\n      </rx-group-button-form-control>\n\n      <div *ngIf=\"isBasicFilterMode()\">\n        <rx-record-grid-filter-select-control\n          class=\"form-group d-block\"\n          name=\"filters\"\n          rx-id=\"filters-field\"\n          [options]=\"{ primaryRecordDefinition: recordDefinition$ | async }\"\n          [(ngModel)]=\"dataSet.dataSourceHistory.layout.queryExpressionBasic\"\n        >\n        </rx-record-grid-filter-select-control>\n      </div>\n\n      <div *ngIf=\"isExpressionFilterMode()\">\n        <rx-expression-form-control\n          class=\"form-group d-block\"\n          name=\"query-expression\"\n          rx-id=\"query-expression-field\"\n          [options]=\"queryExpressionOptions\"\n          (events)=\"openExpressionEditor()\"\n          [(ngModel)]=\"dataSet.dataSourceHistory.queryExpression\"\n        >\n        </rx-expression-form-control>\n      </div>\n\n      <adapt-rx-select\n        class=\"form-group d-block\"\n        name=\"text-fields\"\n        label=\"{{\n          'com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set-blade.text-fields.label' | translate\n        }}\"\n        rx-id=\"text-fields-field\"\n        required\n        multiple=\"true\"\n        [options]=\"fieldOptions$ | async\"\n        [optionFormatter]=\"fieldOptionsFormatter\"\n        [(ngModel)]=\"dataSet.dataSourceHistory.layout.textFields\"\n      >\n      </adapt-rx-select>\n\n      <adapt-rx-select\n        class=\"form-group d-block\"\n        name=\"category-fields\"\n        label=\"{{\n          'com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set-blade.category-fields.label' | translate\n        }}\"\n        rx-id=\"category-fields-field\"\n        required\n        multiple=\"true\"\n        [options]=\"fieldOptions$ | async\"\n        [optionFormatter]=\"fieldOptionsFormatter\"\n        [(ngModel)]=\"dataSet.dataSourceHistory.layout.categoryFields\"\n      >\n      </adapt-rx-select>\n    </div>\n\n    <adapt-rx-counter\n      class=\"form-group d-block\"\n      name=\"training-data\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.training-data.label' | translate }}\"\n      rx-id=\"training-data-field\"\n      placeholder=\"0\"\n      adaptMin=\"0\"\n      adaptMax=\"100\"\n      min=\"0\"\n      max=\"100\"\n      required\n      (ngModelChange)=\"onTrainDataPercentCounterChange($event)\"\n      [(ngModel)]=\"dataSet.trainDataPercent\"\n    >\n    </adapt-rx-counter>\n\n    <adapt-rx-counter\n      class=\"form-group d-block\"\n      name=\"test-data\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.test-data.label' | translate }}\"\n      rx-id=\"test-data-field\"\n      placeholder=\"0\"\n      adaptMin=\"0\"\n      adaptMax=\"100\"\n      min=\"0\"\n      max=\"100\"\n      required\n      (ngModelChange)=\"onTestDataPercentCounterChange($event)\"\n      [(ngModel)]=\"dataSet.testDataPercent\"\n    >\n    </adapt-rx-counter>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button\n    class=\"mr-2\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    adapt-button\n    btn-type=\"primary\"\n    [disabled]=\"recordDataSetForm.pristine || recordDataSetForm.invalid\"\n    (click)=\"onSaveClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button class=\"mr-2\" type=\"button\" rx-id=\"close-button\" adapt-button btn-type=\"secondary\" (click)=\"onCloseClick()\">\n    {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1__namespace$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxUploaderComponent, selector: "adapt-rx-uploader", inputs: ["uploadMode", "selectionMode", "enableFileDialog", "allowedTypes", "forbiddenTypes", "suppressParallel", "filesCount", "allowDuplicates", "showUploadFolderAlert", "visibleFiles", "reusable", "allowDeletion", "customErrors", "indeterminateFileLoader", "url", "deleteUrl", "droppableArea", "enableCustomDownload", "customDownload", "popoverAppendToBody", "showTypesRestriction", "showMinSizeRestriction", "showMaxSizeRestriction", "showFilesCountRestriction", "texts", "icons", "fileErrors", "enableDnD", "maxFileSize", "minFileSize", "chunkSize", "testID"], outputs: ["beforeFileDialogOpen", "afterFileDialogOpen", "beforeFilesAdded", "afterFilesAdded", "dropped", "dragOver", "startFileUploading", "processFileUploading", "endFileUploading", "errorFileUploading", "finishedFileUploading", "removedFileFromQueue", "deletedFile", "cancelUploading"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i4__namespace$1.RxDefinitionPickerComponent, selector: "rx-definition-picker", inputs: ["options", "isDisabled"] }, { type: i4__namespace$1.GroupButtonFormControlComponent, selector: "rx-group-button-form-control", inputs: ["options"] }, { type: i7__namespace.RecordGridFilterSelectControlComponent, selector: "rx-record-grid-filter-select-control", inputs: ["options"] }, { type: i4__namespace$1.ExpressionFormControlComponent, selector: "rx-expression-form-control", inputs: ["options", "isDisabled", "propertyPath"], outputs: ["events"] }, { type: i1__namespace$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1__namespace$1.AdaptMinValidatorDirective, selector: "[adaptMin][ngModel],[adaptMin][formControl]", inputs: ["adaptMin", "adaptMinMessageFn"] }, { type: i1__namespace$1.AdaptMaxValidatorDirective, selector: "[adaptMax][ngModel],[adaptMax][formControl]", inputs: ["adaptMax", "adaptMaxMessageFn"] }], pipes: { "translate": i4__namespace.TranslatePipe, "date": i8__namespace.DatePipe, "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RecordDataSetBladeComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-record-data-set-blade',
                        templateUrl: './record-data-set-blade.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.DockedPanelContext }, { type: RxCognitiveTrainingUtilsService }, { type: i2__namespace.RxDefinitionNameService }, { type: i4__namespace$1.RxExpressionEditorService }, { type: i3__namespace$2.RxRecordDefinitionCacheService }, { type: i3__namespace$2.RxRecordInstanceService }, { type: i4__namespace.TranslateService }, { type: i0__namespace.Injector }]; }, propDecorators: { recordDataSetForm: [{
                    type: i0.ViewChild,
                    args: ['recordDataSetForm', { read: i1.NgForm }]
                }] } });

    var CognitiveTrainingRecordGridComponent = /** @class */ (function () {
        function CognitiveTrainingRecordGridComponent(rxBundleCacheService, rxCommandFactoryService, rxCognitiveTrainingUtilsService, rxCurrentUserService, rxDefinitionNameService, rxJsonParserService, rxModalService, rxNotificationService, rxRecordInstanceDataPageService, rxRecordInstanceService, translateService) {
            this.rxBundleCacheService = rxBundleCacheService;
            this.rxCommandFactoryService = rxCommandFactoryService;
            this.rxCognitiveTrainingUtilsService = rxCognitiveTrainingUtilsService;
            this.rxCurrentUserService = rxCurrentUserService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxJsonParserService = rxJsonParserService;
            this.rxModalService = rxModalService;
            this.rxNotificationService = rxNotificationService;
            this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            this.rxRecordInstanceService = rxRecordInstanceService;
            this.translateService = translateService;
            this.fileDataSourceType = RX_COGNITIVE_TRAINING.settings.dataSourceTypes[CognitiveTrainingDataSourceNames.FileDataSource];
            this.innovationSuiteDataSourceType = RX_COGNITIVE_TRAINING.settings.dataSourceTypes[CognitiveTrainingDataSourceNames.InnovationSuiteDataSource];
            this.bundleId = this.rxBundleCacheService.bundleId;
            this.isAdministrator = this.rxCurrentUserService.isAdministrator();
        }
        CognitiveTrainingRecordGridComponent.prototype.ngOnInit = function () {
            var _a, _b;
            var _this = this;
            this.trainingType.displayName = this.translateService.instant(this.trainingType.displayName);
            var availableActionButtons = (_a = {},
                _a[CognitiveTrainingEvaluationNames.AutoClassificationTrainingAndEvaluation] = {
                    dataSets: [
                        {
                            label: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.train-and-test.label'),
                            style: 'tertiary',
                            iconCls: 'play_o',
                            disabled: function () { return _this.isDataSetActionButtonDisabled(); },
                            actions: [
                                {
                                    name: function () {
                                        _this.trainDataSet(lodash.head(_this.cognitiveTrainingRecordGrid.api.getSelectedRows()));
                                    }
                                }
                            ]
                        }
                    ],
                    testResults: []
                },
                _a[CognitiveTrainingEvaluationNames.ChatbotEvaluation] = {
                    dataSets: [
                        {
                            label: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.test.label'),
                            style: 'tertiary',
                            iconCls: 'play_o',
                            disabled: function () { return !_this.isAdministrator || _this.cognitiveTrainingRecordGrid.api.getSelectedRows().length !== 1; },
                            actions: [
                                {
                                    name: function () {
                                        _this.testDataSet(lodash.head(_this.cognitiveTrainingRecordGrid.api.getSelectedRows()));
                                    }
                                }
                            ]
                        }
                    ]
                },
                _a.common = {
                    dataSets: [
                        {
                            label: this.translateService.instant('com.bmc.arsys.rx.client.common.edit.label'),
                            style: 'tertiary',
                            icon: 'pencil',
                            disabled: function () { return _this.isChatbotDataSetEditButtonDisabled(); },
                            actions: [
                                {
                                    name: function () {
                                        _this.editDataSet(lodash.head(_this.cognitiveTrainingRecordGrid.api.getSelectedRows()));
                                    }
                                }
                            ]
                        },
                        {
                            label: this.translateService.instant('com.bmc.arsys.rx.client.common.copy.label'),
                            style: 'tertiary',
                            icon: 'files_copy_o',
                            disabled: function () { return !_this.isAdministrator || _this.cognitiveTrainingRecordGrid.api.getSelectedRows().length !== 1; },
                            actions: [
                                {
                                    name: function () {
                                        _this.copyDataSet(lodash.head(_this.cognitiveTrainingRecordGrid.api.getSelectedRows()));
                                    }
                                }
                            ]
                        },
                        {
                            label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                            style: 'tertiary',
                            icon: 'trash',
                            disabled: function () { return !_this.isAdministrator; },
                            actions: [
                                {
                                    name: function () {
                                        _this.delete();
                                    }
                                }
                            ]
                        }
                    ],
                    testResults: [
                        {
                            label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                            style: 'tertiary',
                            icon: 'trash',
                            disabled: function () { return _this.isTestResultsDeletionRestricted(); },
                            actions: [
                                {
                                    name: function () {
                                        _this.delete();
                                    }
                                }
                            ]
                        }
                    ]
                },
                _a);
            var availableColumns = (_b = {},
                _b[CognitiveTrainingEvaluationNames.AutoClassificationTrainingAndEvaluation] = {
                    dataSets: [
                        {
                            index: 2,
                            fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.status),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.status.label')
                        },
                        {
                            index: 3,
                            fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.description),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.grid.column.description'),
                            visible: false
                        },
                        {
                            index: 4,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSourceHistory),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.data-source.label'),
                            visible: false,
                            cellTemplate: this.dataSourceHistoryNameCellTemplate
                        },
                        {
                            index: 6,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.trainingType),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.training-type.label')
                        },
                        {
                            index: 8,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.locale),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.locale.label'),
                            visible: false
                        },
                        {
                            index: 11,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.trainDataPercent),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.train-data-percent.label')
                        },
                        {
                            index: 12,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.testDataPercent),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.test-data-percent.label')
                        },
                        {
                            index: 13,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.classificationServiceProvider),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.classification-service-provider.label'),
                            visible: true
                        }
                    ],
                    testResults: [
                        {
                            index: 6,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.trainingDataCsv),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.training-data.label'),
                            clickable: true,
                            actions: [
                                {
                                    name: function (previousActionResult, lastActionRow) { return _this.downloadTrainingData(lastActionRow); }
                                }
                            ]
                        }
                    ]
                },
                _b[CognitiveTrainingEvaluationNames.ChatbotEvaluation] = {
                    dataSets: [
                        {
                            index: 2,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.chatbotName),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.name.label'),
                            visible: true,
                            cellTemplate: this.chatbotNameCellTemplate
                        },
                        {
                            index: 3,
                            fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.status),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.status.label'),
                            visible: false
                        },
                        {
                            index: 4,
                            fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.description),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.description.title')
                        },
                        {
                            index: 5,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSourceHistory),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.data-source.label'),
                            cellTemplate: this.dataSourceHistoryNameCellTemplate
                        },
                        {
                            index: 7,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.trainingType),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.training-type.label'),
                            visible: false
                        },
                        {
                            index: 9,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.locale),
                            title: 'Locale'
                        },
                        {
                            index: 12,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetLocale),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.chatbot-data-set-blade.data-set-locale.label'),
                            visible: false
                        }
                    ]
                },
                _b.common = {
                    dataSets: [
                        {
                            index: 0,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetID),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.data-set-id.title'),
                            visible: false
                        },
                        {
                            index: 1,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.data-set-name.label')
                        },
                        {
                            index: 5,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.current-data-source.title'),
                            visible: false
                        },
                        {
                            index: 7,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastTrained),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.date-last-trained.label'),
                            visible: false
                        },
                        {
                            index: 10,
                            fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.displayId),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.request-id.title'),
                            visible: false
                        },
                        {
                            index: 10,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.instanceId),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.instance-id.title'),
                            visible: false
                        }
                    ],
                    testResults: [
                        {
                            index: 0,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetID),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.data-set-id.title'),
                            visible: false
                        },
                        {
                            index: 1,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.trainingType),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.data-set-type.label'),
                            visible: false
                        },
                        {
                            index: 2,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.data-set-name.label')
                        },
                        {
                            index: 3,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.evaluationStatus),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.evaluation-status.label')
                        },
                        {
                            index: 4,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.dateLastTested),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.data-last-tested.label'),
                            visible: false
                        },
                        {
                            index: 5,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.modifiedDate),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.modified-date.label'),
                            visible: false
                        },
                        {
                            index: 7,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.testDataCsv),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.test-data.label'),
                            clickable: true,
                            actions: [
                                {
                                    name: function (previousActionResult, lastActionRow) { return _this.downloadTestData(lastActionRow); }
                                }
                            ]
                        },
                        {
                            index: 8,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.accuracy),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.accuracy.label')
                        },
                        {
                            index: 9,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.precision),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.precision.label')
                        },
                        {
                            index: 10,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.recall),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.recall.label')
                        },
                        {
                            index: 11,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.fScore),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.f-score.label')
                        },
                        {
                            index: 12,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.resultCsv),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.results.label'),
                            clickable: true,
                            actions: [
                                {
                                    name: function (previousActionResult, lastActionRow) { return _this.downloadResults(lastActionRow); }
                                }
                            ]
                        },
                        {
                            index: 13,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.instanceId),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-search.instance-id.title'),
                            visible: false
                        },
                        {
                            index: 14,
                            fieldId: String(RX_COGNITIVE_TRAINING.settings.fieldIds.error),
                            title: this.translateService.instant('com.bmc.arsys.rx.client.approval.notification-configuration.notify-on.options.error.name'),
                            visible: false
                        }
                    ]
                },
                _b);
            this.evaluation = RX_COGNITIVE_TRAINING.settings.evaluations[this.evaluationName];
            this.recordGridConfig = rxjs.of({
                enableFiltering: true,
                enableRowSelection: i7.RowSelectionMode.Multiple,
                recordDefinitionName: this.recordDefinitionName,
                actionButtons: lodash.chain(availableActionButtons.common[this.tab.name])
                    .concat(availableActionButtons[this.evaluation.name][this.tab.name])
                    .compact()
                    .value(),
                columns: lodash.chain(availableColumns.common[this.tab.name])
                    .concat(availableColumns[this.evaluation.name][this.tab.name])
                    .compact()
                    .value(),
                getData: function (queryParams) {
                    var queryExpression = _this.evaluation.queryExpression + JSON.stringify(_this.bundleId);
                    if (_this.evaluation.name ===
                        RX_COGNITIVE_TRAINING.settings.evaluations.autoClassificationTrainingAndEvaluation.name) {
                        queryExpression += _this.evaluation.serviceProviderQueryExpresion + _this.trainingType.uniqueValue;
                    }
                    var params = {
                        recorddefinition: queryParams.recorddefinition,
                        pageSize: queryParams.pageSize,
                        queryExpression: lodash.compact([queryParams.queryExpression, queryExpression]).join(' AND ')
                    };
                    return _this.rxRecordInstanceDataPageService.post({ params: params });
                }
            });
        };
        CognitiveTrainingRecordGridComponent.prototype.createDataSet = function (dataSourceTypeName) {
            var _this = this;
            this.rxRecordInstanceService
                .getNew(RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName)
                .subscribe(function (recordInstance) {
                var data = {
                    bundleId: _this.bundleId,
                    dataSourceType: lodash.cloneDeep(RX_COGNITIVE_TRAINING.settings.dataSourceTypes[dataSourceTypeName]),
                    evaluation: _this.evaluation,
                    isNewDataSet: true,
                    recordInstance: recordInstance,
                    trainingType: _this.trainingType
                };
                if (_this.isAutoClassificationTrainingAndEvaluation()) {
                    if (dataSourceTypeName === RX_COGNITIVE_TRAINING.settings.dataSourceTypes.innovationSuiteDataSource.name) {
                        _this.openDockedPanel({
                            title: _this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.new-data-set.title', {
                                dataSetName: _this.translateService.instant(RX_COGNITIVE_TRAINING.settings.dataSourceTypes.innovationSuiteDataSource.displayName)
                            }),
                            content: RecordDataSetBladeComponent,
                            size: 'lg',
                            data: {
                                data: data
                            }
                        })
                            .then(function (result) {
                            if (result) {
                                _this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                            }
                        })
                            .catch(lodash.noop);
                    }
                    else if (dataSourceTypeName === RX_COGNITIVE_TRAINING.settings.dataSourceTypes.fileDataSource.name) {
                        _this.openDockedPanel({
                            title: _this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.new-data-set.title', {
                                dataSetName: _this.translateService.instant(RX_COGNITIVE_TRAINING.settings.dataSourceTypes.fileDataSource.displayName)
                            }),
                            content: FileDataSetBladeComponent,
                            size: 'lg',
                            data: {
                                data: data
                            }
                        })
                            .then(function (result) {
                            if (result) {
                                _this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                            }
                        })
                            .catch(lodash.noop);
                    }
                }
                else if (_this.isChatbotEvaluation()) {
                    _this.openDockedPanel({
                        title: _this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.new-chatbot-data-set.title'),
                        content: ChatbotDataSetBladeComponent,
                        size: 'lg',
                        data: {
                            data: data
                        }
                    })
                        .then(function (result) {
                        if (result) {
                            _this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                        }
                    })
                        .catch(lodash.noop);
                }
            });
        };
        CognitiveTrainingRecordGridComponent.prototype.editDataSet = function (dataSet) {
            var _this = this;
            var recordInstanceId = dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.instanceId];
            this.rxRecordInstanceService
                .get(RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName, recordInstanceId)
                .subscribe(function (recordInstance) {
                var dataSourceHistory = _this.rxJsonParserService.tryParseJson(recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSourceHistory));
                var dataSourceType = _this.rxCognitiveTrainingUtilsService.getDataSourceType(dataSourceHistory);
                var data = {
                    dataSourceType: dataSourceType,
                    editDataSet: true,
                    evaluation: _this.evaluation,
                    recordInstance: recordInstance,
                    trainingType: _this.trainingType,
                    getAttachmentRecordInstanceId: recordInstance.id
                };
                if (_this.isAutoClassificationTrainingAndEvaluation()) {
                    if (dataSourceType.name === RX_COGNITIVE_TRAINING.settings.dataSourceTypes.innovationSuiteDataSource.name) {
                        _this.openDockedPanel({
                            title: _this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.edit-data-set.title', {
                                dataSetName: _this.translateService.instant(RX_COGNITIVE_TRAINING.settings.dataSourceTypes.innovationSuiteDataSource.displayName)
                            }),
                            content: RecordDataSetBladeComponent,
                            size: 'lg',
                            data: {
                                data: data
                            }
                        })
                            .then(function (result) {
                            if (result) {
                                _this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                            }
                        })
                            .catch(lodash.noop);
                    }
                    else if (dataSourceType.name === RX_COGNITIVE_TRAINING.settings.dataSourceTypes.fileDataSource.name) {
                        _this.openDockedPanel({
                            title: _this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.edit-data-set.title', {
                                dataSetName: _this.translateService.instant(RX_COGNITIVE_TRAINING.settings.dataSourceTypes.fileDataSource.displayName)
                            }),
                            content: FileDataSetBladeComponent,
                            size: 'lg',
                            data: {
                                data: data
                            }
                        })
                            .then(function (result) {
                            if (result) {
                                _this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                            }
                        })
                            .catch(lodash.noop);
                    }
                }
                else if (_this.isChatbotEvaluation()) {
                    _this.openDockedPanel({
                        title: _this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.edit-chatbot-data-set.title'),
                        content: ChatbotDataSetBladeComponent,
                        size: 'lg',
                        data: {
                            data: data
                        }
                    })
                        .then(function (result) {
                        if (result) {
                            _this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                        }
                    })
                        .catch(lodash.noop);
                }
            });
        };
        CognitiveTrainingRecordGridComponent.prototype.copyDataSet = function (dataSet) {
            var _this = this;
            var recordInstanceId = dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.instanceId];
            rxjs.combineLatest([
                this.rxRecordInstanceService.get(RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName, recordInstanceId),
                this.rxRecordInstanceService.getNew(RX_COGNITIVE_TRAINING.settings.dataSetDefinitionName)
            ]).subscribe(function (_a) {
                var _b = __read(_a, 2), recordInstance = _b[0], newRecordInstance = _b[1];
                var dataSourceHistory = _this.rxJsonParserService.tryParseJson(recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSourceHistory));
                var dataSourceType = _this.rxCognitiveTrainingUtilsService.getDataSourceType(dataSourceHistory);
                newRecordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName, '');
                newRecordInstance.setFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.description, recordInstance.getFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.description));
                newRecordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainingType, recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainingType));
                newRecordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.locale, recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.locale));
                newRecordInstance.setFieldProp(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource, 'value', recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSource) || null);
                newRecordInstance.fieldInstances[RX_COGNITIVE_TRAINING.settings.fieldIds.dataSourceHistory].value =
                    JSON.stringify(dataSourceHistory);
                var data = {
                    bundleId: _this.bundleId,
                    dataSourceType: dataSourceType,
                    copyDataSet: true,
                    evaluation: _this.evaluation,
                    recordInstance: null,
                    trainingType: _this.trainingType,
                    getAttachmentRecordInstanceId: recordInstance.id
                };
                if (_this.isAutoClassificationTrainingAndEvaluation()) {
                    newRecordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.classificationServiceProvider, recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.classificationServiceProvider));
                    newRecordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainDataPercent, recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.trainDataPercent));
                    newRecordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.testDataPercent, recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.testDataPercent));
                    data.recordInstance = newRecordInstance;
                    if (dataSourceType.name === RX_COGNITIVE_TRAINING.settings.dataSourceTypes.innovationSuiteDataSource.name) {
                        _this.openDockedPanel({
                            title: _this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.copy-data-set.title', {
                                dataSetName: _this.translateService.instant(RX_COGNITIVE_TRAINING.settings.dataSourceTypes.innovationSuiteDataSource.displayName)
                            }),
                            content: RecordDataSetBladeComponent,
                            size: 'lg',
                            data: {
                                data: data
                            }
                        })
                            .then(function (result) {
                            if (result) {
                                _this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                            }
                        })
                            .catch(lodash.noop);
                    }
                    else if (dataSourceType.name === RX_COGNITIVE_TRAINING.settings.dataSourceTypes.fileDataSource.name) {
                        _this.openDockedPanel({
                            title: _this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.copy-data-set.title', {
                                dataSetName: _this.translateService.instant(RX_COGNITIVE_TRAINING.settings.dataSourceTypes.fileDataSource.displayName)
                            }),
                            content: FileDataSetBladeComponent,
                            size: 'lg',
                            data: {
                                data: data
                            }
                        })
                            .then(function (result) {
                            if (result) {
                                _this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                            }
                        })
                            .catch(lodash.noop);
                    }
                }
                else if (_this.isChatbotEvaluation()) {
                    newRecordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.chatbotName, recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.chatbotName));
                    newRecordInstance.setFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetLocale, recordInstance.getFieldValue(RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetLocale));
                    data.recordInstance = newRecordInstance;
                    _this.openDockedPanel({
                        title: _this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.copy-chatbot-data-set.title'),
                        content: ChatbotDataSetBladeComponent,
                        size: 'lg',
                        data: {
                            data: data
                        }
                    })
                        .then(function (result) {
                        if (result) {
                            _this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                        }
                    })
                        .catch(lodash.noop);
                }
            });
        };
        CognitiveTrainingRecordGridComponent.prototype.delete = function () {
            var _this = this;
            this.rxModalService
                .confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant(this.tab.deletionConfirmationMessage)
            })
                .then(function (result) {
                if (result) {
                    rxjs.forkJoin(lodash.map(_this.cognitiveTrainingRecordGrid.api.getSelectedRows(), function (dataSet) { return _this.rxRecordInstanceService.delete(_this.tab.recordDefinitionName, dataSet[i3.RX_RECORD_DEFINITION.coreFieldIds.id]); })).subscribe(function () {
                        _this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                        _this.rxNotificationService.addSuccessMessage(_this.translateService.instant(_this.tab.deletionSuccessMessage));
                    });
                }
            });
        };
        CognitiveTrainingRecordGridComponent.prototype.trainDataSet = function (dataSet) {
            var _this = this;
            this.rxCommandFactoryService
                .forResourceType(RX_COGNITIVE_TRAINING.settings.commands.train)
                .execute({
                trainingDataSetName: this.bundleId + ":" + dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName]
            })
                .pipe(operators.catchError(function (errorResponse) { return rxjs.throwError(errorResponse); }), operators.finalize(function () { return _this.cognitiveTrainingRecordGrid.api.refresh().subscribe(); }))
                .subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.training-process-triggered.message'));
            });
        };
        CognitiveTrainingRecordGridComponent.prototype.testDataSet = function (dataSet) {
            var _this = this;
            this.rxCommandFactoryService
                .forResourceType(RX_COGNITIVE_TRAINING.settings.commands.test)
                .execute({
                trainingDataSetName: this.bundleId + ":" + dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.dataSetName]
            })
                .pipe(operators.catchError(function (errorResponse) { return rxjs.throwError(errorResponse); }), operators.finalize(function () { return _this.cognitiveTrainingRecordGrid.api.refresh().subscribe(); }))
                .subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.data-set-submitted.message'));
            });
        };
        CognitiveTrainingRecordGridComponent.prototype.downloadTrainingData = function (dataSet) {
            this.rxRecordInstanceService.downloadAttachment(RX_COGNITIVE_TRAINING.settings.testResultsDefinitionName, RX_COGNITIVE_TRAINING.settings.fieldIds.trainingDataCsv, dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.instanceId], dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.trainingDataCsv]);
        };
        CognitiveTrainingRecordGridComponent.prototype.downloadTestData = function (dataSet) {
            this.rxRecordInstanceService.downloadAttachment(RX_COGNITIVE_TRAINING.settings.testResultsDefinitionName, RX_COGNITIVE_TRAINING.settings.fieldIds.testDataCsv, dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.instanceId], dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.testDataCsv]);
        };
        CognitiveTrainingRecordGridComponent.prototype.downloadResults = function (dataSet) {
            this.rxRecordInstanceService.downloadAttachment(RX_COGNITIVE_TRAINING.settings.testResultsDefinitionName, RX_COGNITIVE_TRAINING.settings.fieldIds.resultCsv, dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.instanceId], dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.resultCsv]);
        };
        CognitiveTrainingRecordGridComponent.prototype.openInteractiveEvaluationBlade = function () {
            var _this = this;
            this.openDockedPanel({
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.cognitive-training.auto-classification-interactive.evaluation.title'),
                content: InteractiveEvaluationBladeComponent,
                size: 'lg',
                data: {
                    bundleId: this.bundleId,
                    evaluation: this.evaluation,
                    trainingType: this.trainingType
                }
            })
                .then(function (result) {
                if (result) {
                    _this.cognitiveTrainingRecordGrid.api.refresh().subscribe();
                }
            })
                .catch(lodash.noop);
        };
        CognitiveTrainingRecordGridComponent.prototype.isDataSetsTab = function () {
            return this.tab.name === 'dataSets';
        };
        CognitiveTrainingRecordGridComponent.prototype.isTestResultsTab = function () {
            return this.tab.name === 'testResults';
        };
        CognitiveTrainingRecordGridComponent.prototype.isAutoClassificationTrainingAndEvaluation = function () {
            return (this.evaluation.name === RX_COGNITIVE_TRAINING.settings.evaluations.autoClassificationTrainingAndEvaluation.name);
        };
        CognitiveTrainingRecordGridComponent.prototype.isChatbotEvaluation = function () {
            return this.evaluation.name === RX_COGNITIVE_TRAINING.settings.evaluations.chatbotEvaluation.name;
        };
        CognitiveTrainingRecordGridComponent.prototype.formatDataSourceHistory = function (dataItem, column) {
            var dataSourceHistory = JSON.parse(this.getCellValue(dataItem, column));
            return (dataSourceHistory.fileName || this.rxDefinitionNameService.getDisplayName(dataSourceHistory.recordDefinitionName));
        };
        CognitiveTrainingRecordGridComponent.prototype.getCellValue = function (dataItem, column) {
            return dataItem[column.field];
        };
        CognitiveTrainingRecordGridComponent.prototype.isDataSetActionButtonDisabled = function () {
            var dataSets = this.cognitiveTrainingRecordGrid.api.getSelectedRows();
            return (!this.isAdministrator ||
                dataSets.length !== 1 ||
                dataSets[0][i3.RX_RECORD_DEFINITION.coreFieldIds.status] ===
                    RX_COGNITIVE_TRAINING.settings.trainingStatuses.training.value ||
                dataSets[0][i3.RX_RECORD_DEFINITION.coreFieldIds.status] ===
                    RX_COGNITIVE_TRAINING.settings.trainingStatuses.inProgress.value);
        };
        CognitiveTrainingRecordGridComponent.prototype.isChatbotDataSetEditButtonDisabled = function () {
            var dataSets = this.cognitiveTrainingRecordGrid.api.getSelectedRows();
            return (!this.isAdministrator ||
                dataSets.length !== 1 ||
                dataSets[0][i3.RX_RECORD_DEFINITION.coreFieldIds.status] ===
                    RX_COGNITIVE_TRAINING.settings.trainingStatuses.training.value);
        };
        CognitiveTrainingRecordGridComponent.prototype.isTestResultsDeletionRestricted = function () {
            var dataSets = this.cognitiveTrainingRecordGrid.api.getSelectedRows();
            return (!this.isAdministrator ||
                lodash.some(dataSets, function (dataSet) { return dataSet[RX_COGNITIVE_TRAINING.settings.fieldIds.evaluationStatus] ===
                    RX_COGNITIVE_TRAINING.settings.evaluationStatuses.queued.value; }));
        };
        CognitiveTrainingRecordGridComponent.prototype.openDockedPanel = function (config) {
            return this.rxModalService.openDockedPanel(config).catch(lodash.noop);
        };
        return CognitiveTrainingRecordGridComponent;
    }());
    CognitiveTrainingRecordGridComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveTrainingRecordGridComponent, deps: [{ token: i2__namespace.RxBundleCacheService }, { token: i2__namespace.RxCommandFactoryService }, { token: RxCognitiveTrainingUtilsService }, { token: i2__namespace.RxCurrentUserService }, { token: i2__namespace.RxDefinitionNameService }, { token: i3__namespace.RxJsonParserService }, { token: i1__namespace.RxModalService }, { token: i2__namespace.RxNotificationService }, { token: i3__namespace$2.RxRecordInstanceDataPageService }, { token: i3__namespace$2.RxRecordInstanceService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CognitiveTrainingRecordGridComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveTrainingRecordGridComponent, selector: "rx-cognitive-training-record-grid", inputs: { tab: "tab", evaluationName: "evaluationName", recordDefinitionName: "recordDefinitionName", trainingType: "trainingType" }, viewQueries: [{ propertyName: "cognitiveTrainingRecordGrid", first: true, predicate: ["cognitiveTrainingRecordGrid"], descendants: true, static: true }, { propertyName: "chatbotNameCellTemplate", first: true, predicate: ["chatbotNameCellTemplate"], descendants: true, static: true }, { propertyName: "dataSourceHistoryNameCellTemplate", first: true, predicate: ["dataSourceHistoryNameCellTemplate"], descendants: true, static: true }], ngImport: i0__namespace, template: "<div *ngIf=\"isDataSetsTab()\">\n  <div class=\"dropdown\" *ngIf=\"isAutoClassificationTrainingAndEvaluation()\" adaptDropdown [autoFocusFirst]=\"false\">\n    <button\n      class=\"d-icon-plus_circle align-self-start\"\n      type=\"button\"\n      rx-id=\"data-set-dropdown\"\n      adapt-button\n      adaptDropdownToggle\n      btn-type=\"tertiary\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n    </button>\n\n    <div class=\"dropdown-menu\" adaptDropdownMenu>\n      <button\n        class=\"dropdown-item\"\n        rx-id=\"create-record-data-set\"\n        [disabled]=\"!isAdministrator\"\n        (click)=\"createDataSet(innovationSuiteDataSourceType.name)\"\n      >\n        {{ innovationSuiteDataSourceType.displayName | translate }}\n      </button>\n\n      <button\n        class=\"dropdown-item\"\n        rx-id=\"create-file-data-set\"\n        [disabled]=\"!isAdministrator\"\n        (click)=\"createDataSet(fileDataSourceType.name)\"\n      >\n        {{ fileDataSourceType.displayName | translate }}\n      </button>\n    </div>\n  </div>\n\n  <button\n    class=\"d-icon-plus_circle align-self-start\"\n    *ngIf=\"isChatbotEvaluation()\"\n    type=\"button\"\n    rx-id=\"create-chatbot-data-set\"\n    adapt-button\n    btn-type=\"tertiary\"\n    [disabled]=\"!isAdministrator\"\n    (click)=\"createDataSet(fileDataSourceType.name)\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n  </button>\n</div>\n\n<button\n  class=\"d-icon-target_cursor align-self-start\"\n  *ngIf=\"isAutoClassificationTrainingAndEvaluation() && isTestResultsTab()\"\n  type=\"button\"\n  rx-id=\"interactive-evaluation\"\n  adapt-button\n  btn-type=\"tertiary\"\n  [disabled]=\"!isAdministrator\"\n  (click)=\"openInteractiveEvaluationBlade()\"\n>\n  {{\n    'com.bmc.arsys.rx.client.admin.cognitive-training.cognitive-training-record-grid.interactive-evaluation.label'\n      | translate\n  }}\n</button>\n\n<rx-record-grid #cognitiveTrainingRecordGrid [config]=\"recordGridConfig\"></rx-record-grid>\n\n<ng-template #dataSourceHistoryNameCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <ng-container>\n    {{ formatDataSourceHistory(dataItem, column) }}\n  </ng-container>\n</ng-template>\n\n<ng-template #chatbotNameCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n  <ng-container>\n    {{ getCellValue(dataItem, column) | rxDefinitionNamePipe }}\n  </ng-container>\n</ng-template>\n", components: [{ type: i1__namespace$1.AdaptDropdownDirective, selector: "adapt-dropdown, [adaptDropdown]", inputs: ["autoClose", "customClass", "closeOnEscape", "placement", "animationPlacement", "holdFocusInMenu", "holdFocusOnOpen", "autoFocusFirst", "restoreFocusAfterClose", "focusNextElementAfterClose", "appendToBody", "appendTo", "positionTo", "anchorPositionTrackingIntervalMs", "enableAnchorPositionTracking", "recalculatePositionOnElementResize", "setMobileState", "mobileView"], outputs: ["onOpen", "onClose", "anchorPositionChange", "popupAnimationDone"], exportAs: ["adaptDropdown"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$1.AdaptDropdownToggleDirective, selector: "[adaptDropdownToggle]", inputs: ["showCaret", "dropdownTogglerType"] }, { type: i1__namespace$1.AdaptDropdownMenuDirective, selector: "[adaptDropdownMenu]" }], pipes: { "translate": i4__namespace.TranslatePipe, "rxDefinitionNamePipe": i2__namespace.RxDefinitionNamePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveTrainingRecordGridComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-cognitive-training-record-grid',
                        templateUrl: './cognitive-training-record-grid.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxBundleCacheService }, { type: i2__namespace.RxCommandFactoryService }, { type: RxCognitiveTrainingUtilsService }, { type: i2__namespace.RxCurrentUserService }, { type: i2__namespace.RxDefinitionNameService }, { type: i3__namespace.RxJsonParserService }, { type: i1__namespace.RxModalService }, { type: i2__namespace.RxNotificationService }, { type: i3__namespace$2.RxRecordInstanceDataPageService }, { type: i3__namespace$2.RxRecordInstanceService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { cognitiveTrainingRecordGrid: [{
                    type: i0.ViewChild,
                    args: ['cognitiveTrainingRecordGrid', { static: true }]
                }], chatbotNameCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['chatbotNameCellTemplate', { static: true }]
                }], dataSourceHistoryNameCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['dataSourceHistoryNameCellTemplate', { static: true }]
                }], tab: [{
                    type: i0.Input
                }], evaluationName: [{
                    type: i0.Input
                }], recordDefinitionName: [{
                    type: i0.Input
                }], trainingType: [{
                    type: i0.Input
                }] } });

    var CognitiveTrainingAdminComponent = /** @class */ (function (_super) {
        __extends(CognitiveTrainingAdminComponent, _super);
        function CognitiveTrainingAdminComponent(rxCognitiveTrainingService) {
            var _this = _super.call(this) || this;
            _this.rxCognitiveTrainingService = rxCognitiveTrainingService;
            _this.sections = RX_COGNITIVE_TRAINING.settings.sections;
            _this.tabs = [
                RX_COGNITIVE_TRAINING.settings.tabs[CognitiveTrainingTabNames.DataSets],
                RX_COGNITIVE_TRAINING.settings.tabs[CognitiveTrainingTabNames.TestResults]
            ];
            _this.destroyed$ = new rxjs.ReplaySubject(1);
            return _this;
        }
        CognitiveTrainingAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.busy = this.rxCognitiveTrainingService
                .getClassificationServiceProvider()
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (classificationServiceProvider) {
                _this.trainingType = RX_COGNITIVE_TRAINING.settings.trainingTypes[classificationServiceProvider.value];
                lodash.find(_this.sections, {
                    evaluationName: RX_COGNITIVE_TRAINING.settings.evaluations.autoClassificationTrainingAndEvaluation.name
                }).title = _this.trainingType.title;
            });
        };
        CognitiveTrainingAdminComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        return CognitiveTrainingAdminComponent;
    }(i4$2.BaseViewComponent));
    CognitiveTrainingAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveTrainingAdminComponent, deps: [{ token: RxCognitiveTrainingService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CognitiveTrainingAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CognitiveTrainingAdminComponent, selector: "rx-admin-cognitive-training", usesInheritance: true, ngImport: i0__namespace, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.cognitive-training.header.title' | translate }}\">\n  <adapt-accordion multiselect=\"true\">\n    <adapt-accordion-tab\n      *ngFor=\"let section of sections\"\n      [title]=\"section.title | translate\"\n      [isOpen]=\"section.isExpanded\"\n    >\n      <adapt-tabset *ngIf=\"trainingType\">\n        <adapt-tab-panel *ngFor=\"let tab of tabs\" [adapt-tab-title]=\"tab.title | translate\">\n          <rx-cognitive-training-record-grid\n            [evaluationName]=\"section.evaluationName\"\n            [tab]=\"tab\"\n            [recordDefinitionName]=\"tab.recordDefinitionName\"\n            [trainingType]=\"trainingType\"\n          >\n          </rx-cognitive-training-record-grid>\n        </adapt-tab-panel>\n      </adapt-tabset>\n    </adapt-accordion-tab>\n  </adapt-accordion>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace$1.AdaptTabsComponent, selector: "adapt-tabset", inputs: ["showTabToolbar", "customCssTabContent", "fullHeight", "texts", "enableDnD", "customClassTabList", "allow-tabs-adding", "id", "testID", "dropdown-title", "fadeColor", "carouselMode", "justify", "type", "tab-active"], outputs: ["tab-index-closed", "tab-active-changed", "add-tab-clicked", "tabClicked", "tabDropped"], exportAs: ["adaptTabset"] }, { type: i1__namespace$1.AdaptTabsPanelComponent, selector: "adapt-tab-panel, div[tab-panel]", inputs: ["isActive", "badge-type", "animateBadge", "showBadgeAlert", "badgeAlertVariant", "badgeCustomClass", "adapt-tab-title", "disabled", "isHidden", "icon", "subtext", "icon-right", "icon-close", "aria-label", "aria-labelledby", "kebabMenu", "id", "renderContentWhenInactive", "badge"] }, { type: CognitiveTrainingRecordGridComponent, selector: "rx-cognitive-training-record-grid", inputs: ["tab", "evaluationName", "recordDefinitionName", "trainingType"] }], directives: [{ type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveTrainingAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-cognitive-training',
                        templateUrl: './cognitive-training.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: RxCognitiveTrainingService }]; } });

    var CognitiveTrainingRegistrationModule = /** @class */ (function () {
        function CognitiveTrainingRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-cognitive-training',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(CognitiveTrainingAdminComponent),
                name: 'Cognitive training',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return CognitiveTrainingRegistrationModule;
    }());
    CognitiveTrainingRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveTrainingRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CognitiveTrainingRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveTrainingRegistrationModule, declarations: [ChatbotDataSetBladeComponent,
            CognitiveTrainingAdminComponent,
            CognitiveTrainingRecordGridComponent,
            FileDataSetBladeComponent,
            InteractiveEvaluationBladeComponent,
            RecordDataSetBladeComponent], imports: [i1$2.AdaptAccordionModule,
            i1$2.AdaptAlertModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptDockedPanelModule,
            i1$2.AdaptDropdownModule,
            i1$2.AdaptModalModule,
            i1$2.AdaptRxCounterModule,
            i1$2.AdaptRxSelectModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptRxUploaderModule,
            i1$2.AdaptRxValidatorsModule,
            i1$2.AdaptTabsModule,
            i4.AdminSettingsModule,
            i8.CommonModule,
            i4.ExpressionFormControlModule,
            i1.FormsModule,
            i4.GroupButtonFormControlModule,
            i7.RecordGridDesignModule,
            i7.RecordGridModule,
            i1$1.RxBusyIndicatorModule,
            i2.RxDefinitionModule,
            i4.RxDefinitionPickerModule,
            i4$1.TranslateModule,
            i7.RecordGridFilterSelectControlModule] });
    CognitiveTrainingRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveTrainingRegistrationModule, imports: [[
                i1$2.AdaptAccordionModule,
                i1$2.AdaptAlertModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptDockedPanelModule,
                i1$2.AdaptDropdownModule,
                i1$2.AdaptModalModule,
                i1$2.AdaptRxCounterModule,
                i1$2.AdaptRxSelectModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptRxUploaderModule,
                i1$2.AdaptRxValidatorsModule,
                i1$2.AdaptTabsModule,
                i4.AdminSettingsModule,
                i8.CommonModule,
                i4.ExpressionFormControlModule,
                i1.FormsModule,
                i4.GroupButtonFormControlModule,
                i7.RecordGridDesignModule,
                i7.RecordGridModule,
                i1$1.RxBusyIndicatorModule,
                i2.RxDefinitionModule,
                i4.RxDefinitionPickerModule,
                i4$1.TranslateModule,
                i7.RecordGridFilterSelectControlModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CognitiveTrainingRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            ChatbotDataSetBladeComponent,
                            CognitiveTrainingAdminComponent,
                            CognitiveTrainingRecordGridComponent,
                            FileDataSetBladeComponent,
                            InteractiveEvaluationBladeComponent,
                            RecordDataSetBladeComponent
                        ],
                        imports: [
                            i1$2.AdaptAccordionModule,
                            i1$2.AdaptAlertModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptDockedPanelModule,
                            i1$2.AdaptDropdownModule,
                            i1$2.AdaptModalModule,
                            i1$2.AdaptRxCounterModule,
                            i1$2.AdaptRxSelectModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptRxUploaderModule,
                            i1$2.AdaptRxValidatorsModule,
                            i1$2.AdaptTabsModule,
                            i4.AdminSettingsModule,
                            i8.CommonModule,
                            i4.ExpressionFormControlModule,
                            i1.FormsModule,
                            i4.GroupButtonFormControlModule,
                            i7.RecordGridDesignModule,
                            i7.RecordGridModule,
                            i1$1.RxBusyIndicatorModule,
                            i2.RxDefinitionModule,
                            i4.RxDefinitionPickerModule,
                            i4$1.TranslateModule,
                            i7.RecordGridFilterSelectControlModule
                        ],
                        entryComponents: [
                            ChatbotDataSetBladeComponent,
                            CognitiveTrainingAdminComponent,
                            CognitiveTrainingRecordGridComponent,
                            FileDataSetBladeComponent,
                            InteractiveEvaluationBladeComponent,
                            RecordDataSetBladeComponent
                        ]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RX_COMAROUND_KNOWLEDGE = {
        configName: 'ComAround Knowledge',
        pingComAroundCommand: 'com.bmc.dsm.chatbot.command.PingComAroundCommand',
        settingNames: {
            serverUrl: 'ComAround Knowledge URL',
            subscriptionId: 'ComAround Knowledge Subscription ID',
            userName: 'ComAround Knowledge User',
            password: 'ComAround Knowledge Password',
            frameUrl: 'ComAround Knowledge Frame URL',
            mainUrl: 'ComAround Knowledge Main URL',
            portalId: 'ComAround Knowledge Portal ID'
        }
    };

    var ComaroundKnowledgeAdminComponent = /** @class */ (function (_super) {
        __extends(ComaroundKnowledgeAdminComponent, _super);
        function ComaroundKnowledgeAdminComponent(formBuilder, rxUrlUtilsService, rxNotificationService, rxAdminSettingsService, rxCommandFactoryService, rxCognitiveServiceService, httpClient, translateService) {
            var _this = _super.call(this) || this;
            _this.formBuilder = formBuilder;
            _this.rxUrlUtilsService = rxUrlUtilsService;
            _this.rxNotificationService = rxNotificationService;
            _this.rxAdminSettingsService = rxAdminSettingsService;
            _this.rxCommandFactoryService = rxCommandFactoryService;
            _this.rxCognitiveServiceService = rxCognitiveServiceService;
            _this.httpClient = httpClient;
            _this.translateService = translateService;
            _this.connectionTestStatus = i1$1.ConnectionTestStatus.Invalid;
            _this.availablePortals = [];
            _this.isNewConfigurationSetting = false;
            _this.comaroundComponentSettingsValues = [];
            _this.subscription = new rxjs.Subscription();
            return _this;
        }
        Object.defineProperty(ComaroundKnowledgeAdminComponent.prototype, "comaroundConfigFormGroup", {
            get: function () {
                return this.knowledgeConfigForm.controls.comaroundForm;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ComaroundKnowledgeAdminComponent.prototype, "portalControl", {
            get: function () {
                return this.knowledgeConfigForm.controls.portal;
            },
            enumerable: false,
            configurable: true
        });
        ComaroundKnowledgeAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.notifyPropertyChanged('api', {
                isDirty: function () { return _this.knowledgeConfigForm.dirty; }
            });
            this.knowledgeConfigForm = this.formBuilder.group({
                comaroundForm: this.formBuilder.group({
                    mainUrl: this.formBuilder.control(null, this.validateUrl),
                    frameUrl: this.formBuilder.control(null, this.validateUrl),
                    subscriptionId: this.formBuilder.control(null, i1.Validators.required),
                    userName: this.formBuilder.control(null, i1.Validators.required),
                    password: this.formBuilder.control(null, i1.Validators.required),
                    serverUrl: this.formBuilder.control(null, [i1.Validators.required, this.validateUrl])
                }),
                portal: this.formBuilder.control({ value: [], disabled: true })
            });
            this.busy = this.getComaroundComponentSettings()
                .pipe(operators.tap(function (componentSettings) {
                var _a;
                var settingNames = Object.values(RX_COMAROUND_KNOWLEDGE.settingNames);
                var values = componentSettings.values;
                _this.isNewConfigurationSetting = values.length === 0;
                _this.comaroundComponentSettingsValues = values;
                // complete the missing configuration settings
                // works for new configuration too
                if (values.length < settingNames.length) {
                    var ownerKey_1 = (_a = values[0]) === null || _a === void 0 ? void 0 : _a.ownerKeyValue1;
                    settingNames
                        .filter(function (name) { return !values.find(function (setting) { return setting.settingName === name; }); })
                        .forEach(function (name) { return values.push({
                        // these fields satisfy update/create settings
                        componentName: RX_COMAROUND_KNOWLEDGE.configName,
                        ownerKeyValue1: ownerKey_1,
                        settingName: name,
                        settingValue: null
                    }); });
                }
                _this.comaroundConfigFormGroup.patchValue({
                    serverUrl: _this.getValue(RX_COMAROUND_KNOWLEDGE.settingNames.serverUrl),
                    subscriptionId: _this.getValue(RX_COMAROUND_KNOWLEDGE.settingNames.subscriptionId),
                    userName: _this.getValue(RX_COMAROUND_KNOWLEDGE.settingNames.userName),
                    password: _this.getValue(RX_COMAROUND_KNOWLEDGE.settingNames.password),
                    frameUrl: _this.getValue(RX_COMAROUND_KNOWLEDGE.settingNames.frameUrl),
                    mainUrl: _this.getValue(RX_COMAROUND_KNOWLEDGE.settingNames.mainUrl)
                });
            }), operators.switchMap(function () {
                return _this.getValue(RX_COMAROUND_KNOWLEDGE.settingNames.portalId) ? _this.getAvailablePortals() : rxjs.of([]);
            }), operators.tap(function (portals) {
                _this.availablePortals = portals;
                if (portals.length) {
                    var configuredPortalId_1 = _this.getValue(RX_COMAROUND_KNOWLEDGE.settingNames.portalId);
                    var selectedPortal = configuredPortalId_1 && portals.find(function (portal) { return portal.id == configuredPortalId_1; });
                    selectedPortal !== null && selectedPortal !== void 0 ? selectedPortal : (selectedPortal = portals.find(function (portal) { return portal.isDefault; }));
                    _this.portalControl.setValue([selectedPortal]);
                }
            }))
                .subscribe();
            this.subscription = this.comaroundConfigFormGroup.valueChanges.subscribe(function () {
                _this.connectionTestStatus =
                    _this.comaroundConfigFormGroup.pristine || _this.comaroundConfigFormGroup.invalid
                        ? i1$1.ConnectionTestStatus.Invalid
                        : i1$1.ConnectionTestStatus.Unknown;
                if (_this.portalControl.enabled) {
                    _this.portalControl.disable();
                }
            });
        };
        ComaroundKnowledgeAdminComponent.prototype.getComaroundComponentSettings = function () {
            return this.rxAdminSettingsService.getComponentSettings(RX_COMAROUND_KNOWLEDGE.configName, {
                'default-bundle-scope': i2.RX_APPLICATION.chatbotBundleId
            });
        };
        ComaroundKnowledgeAdminComponent.prototype.getAvailablePortals = function () {
            return this.httpClient
                .get('/api/rx/application/knowledge?ComAroundRequest=v1/user/portals')
                .pipe(operators.catchError(function () { return rxjs.of([]); }));
        };
        ComaroundKnowledgeAdminComponent.prototype.portalOptionFormatter = function (option) {
            return option.name;
        };
        ComaroundKnowledgeAdminComponent.prototype.getValue = function (settingName) {
            var setting = lodash.find(this.comaroundComponentSettingsValues, {
                settingName: settingName
            });
            return setting === null || setting === void 0 ? void 0 : setting.settingValue;
        };
        ComaroundKnowledgeAdminComponent.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        ComaroundKnowledgeAdminComponent.prototype.isSaveButtonDisabled = function () {
            return (this.knowledgeConfigForm.pristine ||
                this.knowledgeConfigForm.invalid ||
                this.connectionTestStatus !== i1$1.ConnectionTestStatus.Passed);
        };
        ComaroundKnowledgeAdminComponent.prototype.setValue = function (settingName, value) {
            var setting = lodash.find(this.comaroundComponentSettingsValues, {
                settingName: settingName
            });
            if (setting) {
                setting.settingValue = value;
            }
        };
        ComaroundKnowledgeAdminComponent.prototype.saveConfiguration = function () {
            var _this = this;
            var _a;
            var formValue = Object.assign(Object.assign({}, this.comaroundConfigFormGroup.getRawValue()), { portal: this.portalControl.value });
            var adminSetting$;
            this.setValue(RX_COMAROUND_KNOWLEDGE.settingNames.serverUrl, formValue.serverUrl);
            this.setValue(RX_COMAROUND_KNOWLEDGE.settingNames.subscriptionId, formValue.subscriptionId);
            this.setValue(RX_COMAROUND_KNOWLEDGE.settingNames.userName, formValue.userName);
            this.setValue(RX_COMAROUND_KNOWLEDGE.settingNames.password, formValue.password);
            this.setValue(RX_COMAROUND_KNOWLEDGE.settingNames.frameUrl, formValue.frameUrl);
            this.setValue(RX_COMAROUND_KNOWLEDGE.settingNames.mainUrl, formValue.mainUrl);
            this.setValue(RX_COMAROUND_KNOWLEDGE.settingNames.portalId, (_a = formValue.portal[0]) === null || _a === void 0 ? void 0 : _a.id);
            if (this.isNewConfigurationSetting) {
                adminSetting$ = this.rxAdminSettingsService
                    .createComponentSettings(RX_COMAROUND_KNOWLEDGE.configName, this.comaroundComponentSettingsValues)
                    .pipe(operators.switchMap(function () { return _this.getComaroundComponentSettings(); }), operators.tap(function (response) {
                    _this.isNewConfigurationSetting = false;
                    _this.comaroundComponentSettingsValues = response.values;
                }));
            }
            else {
                adminSetting$ = this.rxAdminSettingsService.updateComponentSettings(RX_COMAROUND_KNOWLEDGE.configName + "/" + this.comaroundComponentSettingsValues[0].ownerKeyValue1, this.comaroundComponentSettingsValues);
            }
            this.busy = adminSetting$.subscribe(function () {
                _this.knowledgeConfigForm.markAsPristine();
                _this.updateComaroundTokenWithLatestValues();
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.comaround-knowledge.configuration-saved.message'));
                _this.connectionTestStatus = i1$1.ConnectionTestStatus.Invalid;
                _this.portalControl.disable();
            });
        };
        ComaroundKnowledgeAdminComponent.prototype.updateComaroundTokenWithLatestValues = function () {
            this.rxCommandFactoryService
                .forResourceType('com.bmc.dsm.chatbot.command.UpdateComAroundTokenCommand')
                .execute({})
                .subscribe();
        };
        ComaroundKnowledgeAdminComponent.prototype.onTestConnection = function () {
            var _this = this;
            var formValue = this.comaroundConfigFormGroup.getRawValue();
            this.knowledgeConfigForm.disable();
            this.rxCognitiveServiceService
                .testConnection({
                resourceType: RX_COMAROUND_KNOWLEDGE.pingComAroundCommand,
                serverUrl: formValue.serverUrl,
                subscriptionId: formValue.subscriptionId,
                userName: formValue.userName,
                password: formValue.password,
                frameUrl: formValue.frameUrl,
                mainUrl: formValue.mainUrl
            })
                .pipe(operators.finalize(function () { return _this.comaroundConfigFormGroup.enable({ emitEvent: false }); }), operators.catchError(function (error) {
                _this.connectionTestStatus = i1$1.ConnectionTestStatus.Failed;
                return rxjs.throwError(error);
            }))
                .subscribe(function (portals) {
                _this.availablePortals = portals || [];
                if (portals) {
                    var configuredPortalId_2 = _this.getValue(RX_COMAROUND_KNOWLEDGE.settingNames.portalId);
                    var selectedPortal = configuredPortalId_2 && portals.find(function (portal) { return portal.id == configuredPortalId_2; });
                    selectedPortal !== null && selectedPortal !== void 0 ? selectedPortal : (selectedPortal = portals.find(function (portal) { return portal.isDefault; }));
                    _this.portalControl.setValue([selectedPortal]);
                    _this.portalControl.enable();
                }
                _this.connectionTestStatus = i1$1.ConnectionTestStatus.Passed;
            });
        };
        ComaroundKnowledgeAdminComponent.prototype.validateUrl = function () {
            var _this = this;
            return function (control) {
                return control.value && !_this.rxUrlUtilsService.isValidUrl(control.value, true)
                    ? { invalidUrl: { message: _this.translateService.instant('com.bmc.arsys.rx.client.admin.invalid-url.label') } }
                    : null;
            };
        };
        return ComaroundKnowledgeAdminComponent;
    }(i4$2.BaseViewComponent));
    ComaroundKnowledgeAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ComaroundKnowledgeAdminComponent, deps: [{ token: i1__namespace$3.FormBuilder }, { token: i3__namespace.RxUrlUtilsService }, { token: i2__namespace.RxNotificationService }, { token: i2__namespace.RxAdminSettingsService }, { token: i2__namespace.RxCommandFactoryService }, { token: RxCognitiveServiceService }, { token: i1__namespace$2.HttpClient }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ComaroundKnowledgeAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ComaroundKnowledgeAdminComponent, selector: "rx-admin-comaround-knowledge", usesInheritance: true, ngImport: i0__namespace, template: "<rx-admin-settings\n  header=\" {{ 'com.bmc.arsys.rx.client.admin.comaround-knowledge.header.title' | translate }}\"\n  [busy]=\"busy\">\n  <form [formGroup]=\"knowledgeConfigForm\">\n    <fieldset formGroupName=\"comaroundForm\">\n      <adapt-rx-textfield\n        rx-id=\"main-url\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.comaround-knowledge.main-url.label' | translate }}\"\n        class=\"d-block form-group\"\n        formControlName=\"mainUrl\">\n      </adapt-rx-textfield>\n\n      <adapt-rx-textfield\n        rx-id=\"frame-url\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.comaround-knowledge.frame-url.label' | translate }}\"\n        class=\"d-block form-group\"\n        formControlName=\"frameUrl\">\n      </adapt-rx-textfield>\n\n      <adapt-rx-textfield\n        rx-id=\"server-url\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.comaround-knowledge.api-endpoint-url.label' | translate }}\"\n        class=\"d-block form-group\"\n        formControlName=\"serverUrl\">\n      </adapt-rx-textfield>\n\n      <adapt-rx-textfield\n        rx-id=\"subscription-id\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.comaround-knowledge.subscription-id.label' | translate }}\"\n        formControlName=\"subscriptionId\"\n        class=\"d-block form-group\">\n      </adapt-rx-textfield>\n\n      <adapt-rx-textfield\n        rx-id=\"user-name\"\n        label=\"{{ 'com.bmc.arsys.rx.client.common.user-name.label' | translate }}\"\n        formControlName=\"userName\"\n        class=\"d-block form-group\">\n      </adapt-rx-textfield>\n\n      <adapt-rx-textfield\n        rx-id=\"password\"\n        label=\"{{ 'com.bmc.arsys.rx.client.common.password.label' | translate }}\"\n        formControlName=\"password\"\n        isPassword=\"true\"\n        class=\"d-block form-group\">\n      </adapt-rx-textfield>\n\n      <rx-connection-tester\n        buttonType=\"secondary\"\n        [status]=\"connectionTestStatus\"\n        (testConnection)=\"onTestConnection()\"\n        rx-id=\"test-button\"\n        class=\"d-block form-group\">\n      </rx-connection-tester>\n\n    </fieldset>\n\n    <hr />\n\n    <adapt-rx-select\n      rx-id=\"portal\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.comaround-knowledge.portal.label' | translate }}\"\n      formControlName=\"portal\"\n      [options]=\"availablePortals\"\n      [optionFormatter]=\"portalOptionFormatter\"\n      class=\"d-block form-group\"></adapt-rx-select>\n\n    <adapt-alert\n      *ngIf=\"portalControl.disabled\"\n      [config]=\"{type: 'inline', variant: 'info', icon: true}\">\n      {{ \"com.bmc.arsys.rx.client.admin.comaround-knowledge.portal-cannot-be-selected.message\" | translate }}\n    </adapt-alert>\n\n    <div class=\"d-flex justify-content-start mt-5\">\n      <button\n        adapt-button\n        class=\"mr-2\"\n        btn-type=\"primary\"\n        type=\"button\"\n        rx-id=\"save-button\"\n        [disabled]=\"isSaveButtonDisabled()\"\n        (click)=\"saveConfiguration()\">\n        {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n      </button>\n    </div>\n  </form>\n</rx-admin-settings>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}form>*{max-width:400px}\n"], components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace.RxConnectionTesterComponent, selector: "rx-connection-tester", inputs: ["status", "buttonType"], outputs: ["testConnection"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ComaroundKnowledgeAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-comaround-knowledge',
                        templateUrl: './comaround-knowledge.component.html',
                        styleUrls: ['./comaround-knowledge.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }, { type: i3__namespace.RxUrlUtilsService }, { type: i2__namespace.RxNotificationService }, { type: i2__namespace.RxAdminSettingsService }, { type: i2__namespace.RxCommandFactoryService }, { type: RxCognitiveServiceService }, { type: i1__namespace$2.HttpClient }, { type: i4__namespace.TranslateService }]; } });

    var ComaroundKnowledgeRegistrationModule = /** @class */ (function () {
        function ComaroundKnowledgeRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-comaround-knowledge',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(ComaroundKnowledgeAdminComponent),
                name: 'ComAround knowledge',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return ComaroundKnowledgeRegistrationModule;
    }());
    ComaroundKnowledgeRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ComaroundKnowledgeRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ComaroundKnowledgeRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ComaroundKnowledgeRegistrationModule, declarations: [ComaroundKnowledgeAdminComponent], imports: [i1$2.AdaptButtonModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptRxSelectModule,
            i1$2.AdaptAlertModule,
            i1$2.AdaptAccordionModule,
            i4.AdminSettingsModule,
            i8.CommonModule,
            i1.ReactiveFormsModule,
            i1$1.RxConnectionTesterModule,
            i1$1.RxDirectivesModule,
            i4$1.TranslateModule] });
    ComaroundKnowledgeRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ComaroundKnowledgeRegistrationModule, imports: [[
                i1$2.AdaptButtonModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptRxSelectModule,
                i1$2.AdaptAlertModule,
                i1$2.AdaptAccordionModule,
                i4.AdminSettingsModule,
                i8.CommonModule,
                i1.ReactiveFormsModule,
                i1$1.RxConnectionTesterModule,
                i1$1.RxDirectivesModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ComaroundKnowledgeRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ComaroundKnowledgeAdminComponent],
                        imports: [
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptRxSelectModule,
                            i1$2.AdaptAlertModule,
                            i1$2.AdaptAccordionModule,
                            i4.AdminSettingsModule,
                            i8.CommonModule,
                            i1.ReactiveFormsModule,
                            i1$1.RxConnectionTesterModule,
                            i1$1.RxDirectivesModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [ComaroundKnowledgeAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var AliasType;
    (function (AliasType) {
        AliasType["DataSource"] = "dataSource";
        AliasType["WebRequest"] = "webRequest";
        AliasType["Connector"] = "connector";
    })(AliasType || (AliasType = {}));

    var ConnectionMappingComponent = /** @class */ (function () {
        function ConnectionMappingComponent(rxNotificationService, rxRecordInstanceService, rxRecordInstanceUpdateService, translateService) {
            this.rxNotificationService = rxNotificationService;
            this.rxRecordInstanceService = rxRecordInstanceService;
            this.rxRecordInstanceUpdateService = rxRecordInstanceUpdateService;
            this.translateService = translateService;
            this.aliasNameId = RX_CONNECTION_MAPPING.aliasMapping.fields.aliasName;
            this.optionFormatter = this.optionFormatter.bind(this);
        }
        ConnectionMappingComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.aliasMapping[RX_CONNECTION_MAPPING.aliasMapping.fields.aliasValue]) {
                var connectionConfiguration = this.configurations.find(function (config) { return config[RX_CONNECTION_MAPPING.dataSource.fields.id] ===
                    _this.aliasMapping[RX_CONNECTION_MAPPING.aliasMapping.fields.aliasValue]; });
                this.connectionConfiguration = [connectionConfiguration];
            }
        };
        ConnectionMappingComponent.prototype.optionFormatter = function (configurationOption) {
            var fieldName = this.aliasType === AliasType.Connector
                ? RX_CONNECTION_MAPPING.connector.fields.target_name
                : RX_CONNECTION_MAPPING.dataSource.fields.name;
            return lodash.get(configurationOption, fieldName, 'Select configuration');
        };
        ConnectionMappingComponent.prototype.onConnectionConfigurationChange = function (configuration) {
            var _this = this;
            this.rxRecordInstanceService
                .get(RX_CONNECTION_MAPPING.aliasMapping.recordDefinitionName, this.aliasMapping[RX_CONNECTION_MAPPING.aliasMapping.fields.id])
                .subscribe(function (recordInstance) {
                recordInstance.setFieldValue(RX_CONNECTION_MAPPING.aliasMapping.fields.aliasValue, configuration[0][RX_CONNECTION_MAPPING.dataSource.fields.id]);
                _this.rxRecordInstanceUpdateService.execute(recordInstance).subscribe(function () {
                    _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.connection-mapping.mapping-saved.message'));
                });
            });
        };
        return ConnectionMappingComponent;
    }());
    ConnectionMappingComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConnectionMappingComponent, deps: [{ token: i2__namespace.RxNotificationService }, { token: i3__namespace$2.RxRecordInstanceService }, { token: i3__namespace$2.RxRecordInstanceUpdateService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConnectionMappingComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ConnectionMappingComponent, selector: "rx-connection-mapping", inputs: { configurations: "configurations", aliasMapping: "aliasMapping", aliasType: "aliasType" }, ngImport: i0__namespace, template: "<div class=\"row\">\n  <adapt-rx-textfield\n    class=\"col-md-6 form-group\"\n    rx-id=\"connection-target\"\n    label=\"{{ 'com.bmc.arsys.rx.client.admin.connection-mapping.connection-target.label' | translate }}\"\n    disabled=\"true\"\n    [(ngModel)]=\"aliasMapping[this.aliasNameId]\"\n  ></adapt-rx-textfield>\n\n  <adapt-rx-select\n    class=\"d-block col-md-6 form-group\"\n    rx-id=\"connection-configuration\"\n    label=\"{{ 'com.bmc.arsys.rx.client.admin.connection-mapping.connection-configuration.label' | translate }}\"\n    [ngModel]=\"connectionConfiguration\"\n    [options]=\"configurations\"\n    [optionFormatter]=\"optionFormatter\"\n    (ngModelChange)=\"onConnectionConfigurationChange($event)\"\n  ></adapt-rx-select>\n</div>\n", components: [{ type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConnectionMappingComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-connection-mapping',
                        templateUrl: './connection-mapping.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxNotificationService }, { type: i3__namespace$2.RxRecordInstanceService }, { type: i3__namespace$2.RxRecordInstanceUpdateService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { configurations: [{
                    type: i0.Input
                }], aliasMapping: [{
                    type: i0.Input
                }], aliasType: [{
                    type: i0.Input
                }] } });

    var RxConnectionMappingModule = /** @class */ (function () {
        function RxConnectionMappingModule() {
        }
        return RxConnectionMappingModule;
    }());
    RxConnectionMappingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxConnectionMappingModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RxConnectionMappingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxConnectionMappingModule, declarations: [ConnectionMappingComponent], imports: [i8.CommonModule, i1$2.AdaptRxSelectModule, i1.FormsModule, i1$2.AdaptRxTextfieldModule, i4$1.TranslateModule], exports: [ConnectionMappingComponent] });
    RxConnectionMappingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxConnectionMappingModule, imports: [[i8.CommonModule, i1$2.AdaptRxSelectModule, i1.FormsModule, i1$2.AdaptRxTextfieldModule, i4$1.TranslateModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxConnectionMappingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i8.CommonModule, i1$2.AdaptRxSelectModule, i1.FormsModule, i1$2.AdaptRxTextfieldModule, i4$1.TranslateModule],
                        declarations: [ConnectionMappingComponent],
                        exports: [ConnectionMappingComponent]
                    }]
            }] });

    var ConnectorMappingAdminComponent = /** @class */ (function () {
        function ConnectorMappingAdminComponent(rxRecordInstanceDataPageService, translateService) {
            this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            this.translateService = translateService;
            this.mappingSelectOptions = [];
        }
        ConnectorMappingAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.busy = this.getRecordInstanceDataPage({
                recorddefinition: RX_CONNECTION_MAPPING.aliasMapping.recordDefinitionName,
                queryExpression: "'" + RX_CONNECTION_MAPPING.aliasMapping.fields.aliasType + "'!=\"email\"",
                propertySelection: lodash.values(RX_CONNECTION_MAPPING.aliasMapping.fields).join()
            }).subscribe(function (response) {
                _this.mappingSelectOptions = lodash.uniqBy(response.data, RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId);
            });
        };
        ConnectorMappingAdminComponent.prototype.optionFormatter = function (application) {
            return application[RX_CONNECTION_MAPPING.aliasMapping.fields.applicationName];
        };
        ConnectorMappingAdminComponent.prototype.getRecordInstanceDataPage = function (params) {
            return this.rxRecordInstanceDataPageService.post({ params: params });
        };
        ConnectorMappingAdminComponent.prototype.onApplicationChange = function (selectedApplication) {
            var _this = this;
            var applicationId = lodash.get(selectedApplication, "0." + RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId);
            if (applicationId) {
                rxjs.forkJoin({
                    configurationList: this.getRecordInstanceDataPage({
                        recorddefinition: RX_CONNECTION_MAPPING.connector.recordDefinitionName,
                        propertySelection: lodash.values(RX_CONNECTION_MAPPING.connector.fields).join()
                    }),
                    applicationMappingList: this.getRecordInstanceDataPage({
                        recorddefinition: RX_CONNECTION_MAPPING.aliasMapping.recordDefinitionName,
                        propertySelection: lodash.values(RX_CONNECTION_MAPPING.aliasMapping.fields).join(),
                        queryExpression: "(('" + RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId + "'=\"" + applicationId + "\" AND " +
                            ("'" + RX_CONNECTION_MAPPING.aliasMapping.fields.aliasType + "'=\"" + RX_CONNECTION_MAPPING.aliasTypes.connector + "\"))")
                    })
                }).subscribe(function (result) {
                    _this.configurationList = result.configurationList.data;
                    _this.mappingList = result.applicationMappingList.data;
                });
            }
        };
        return ConnectorMappingAdminComponent;
    }());
    ConnectorMappingAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConnectorMappingAdminComponent, deps: [{ token: i3__namespace$2.RxRecordInstanceDataPageService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConnectorMappingAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ConnectorMappingAdminComponent, selector: "rx-connector-mapping", ngImport: i0__namespace, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.connection-mapping.connector-mapping.header.title' | translate }}\"\n  [busy]=\"busy\"\n>\n  <div class=\"row\">\n    <adapt-rx-select\n      class=\"col-md-6 form-group\"\n      rx-id=\"application\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.connection-mapping.connector-mapping.application.label' | translate }}\"\n      [ngModel]=\"selectedMapping\"\n      [options]=\"mappingSelectOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      (ngModelChange)=\"onApplicationChange($event)\"\n    ></adapt-rx-select>\n  </div>\n\n  <rx-connection-mapping\n    *ngFor=\"let mapping of mappingList\"\n    [configurations]=\"configurationList\"\n    [aliasMapping]=\"mapping\"\n    aliasType=\"connector\"\n  >\n  </rx-connection-mapping>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: ConnectionMappingComponent, selector: "rx-connection-mapping", inputs: ["configurations", "aliasMapping", "aliasType"] }], directives: [{ type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConnectorMappingAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-connector-mapping',
                        templateUrl: './connector-mapping.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace$2.RxRecordInstanceDataPageService }, { type: i4__namespace.TranslateService }]; } });

    var ConnectorMappingRegistrationModule = /** @class */ (function () {
        function ConnectorMappingRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-connector-mapping',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(ConnectorMappingAdminComponent),
                name: 'Connector mapping',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return ConnectorMappingRegistrationModule;
    }());
    ConnectorMappingRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConnectorMappingRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConnectorMappingRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConnectorMappingRegistrationModule, declarations: [ConnectorMappingAdminComponent], imports: [i4.AdminSettingsModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptRxSelectModule,
            i8.CommonModule,
            i1.FormsModule,
            RxConnectionMappingModule,
            i4$1.TranslateModule] });
    ConnectorMappingRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConnectorMappingRegistrationModule, imports: [[
                i4.AdminSettingsModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptRxSelectModule,
                i8.CommonModule,
                i1.FormsModule,
                RxConnectionMappingModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConnectorMappingRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ConnectorMappingAdminComponent],
                        imports: [
                            i4.AdminSettingsModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptRxSelectModule,
                            i8.CommonModule,
                            i1.FormsModule,
                            RxConnectionMappingModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [ConnectorMappingAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var DataSourceMappingAdminComponent = /** @class */ (function () {
        function DataSourceMappingAdminComponent(rxRecordInstanceDataPageService) {
            this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            this.applicationSelectOptions = [];
        }
        DataSourceMappingAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.busy = this.getRecordInstanceDataPage({
                recorddefinition: RX_CONNECTION_MAPPING.aliasMapping.recordDefinitionName,
                queryExpression: "'" + RX_CONNECTION_MAPPING.aliasMapping.fields.aliasType + "'!=\"email\"",
                propertySelection: lodash.values(RX_CONNECTION_MAPPING.aliasMapping.fields).join()
            }).subscribe(function (response) {
                _this.applicationSelectOptions = lodash.uniqBy(response.data, RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId);
            });
        };
        DataSourceMappingAdminComponent.prototype.optionFormatter = function (application) {
            return application[RX_CONNECTION_MAPPING.aliasMapping.fields.applicationName];
        };
        DataSourceMappingAdminComponent.prototype.getRecordInstanceDataPage = function (params) {
            return this.rxRecordInstanceDataPageService.post({ params: params });
        };
        DataSourceMappingAdminComponent.prototype.onApplicationChange = function (selectedApplication) {
            var _this = this;
            var applicationId = lodash.get(selectedApplication, "0." + RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId);
            if (applicationId) {
                rxjs.forkJoin({
                    configurationList: this.getRecordInstanceDataPage({
                        recorddefinition: RX_CONNECTION_MAPPING.dataSource.recordDefinitionName,
                        propertySelection: lodash.values(RX_CONNECTION_MAPPING.dataSource.fields).join()
                    }),
                    applicationMappingList: this.getRecordInstanceDataPage({
                        recorddefinition: RX_CONNECTION_MAPPING.aliasMapping.recordDefinitionName,
                        propertySelection: lodash.values(RX_CONNECTION_MAPPING.aliasMapping.fields).join(),
                        queryExpression: "(('" + RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId + "'=\"" + applicationId + "\" AND " +
                            ("'" + RX_CONNECTION_MAPPING.aliasMapping.fields.aliasType + "'=\"" + RX_CONNECTION_MAPPING.aliasTypes.dataSource + "\"))")
                    })
                }).subscribe(function (result) {
                    _this.configurationList = result.configurationList.data;
                    _this.applicationMappingList = result.applicationMappingList.data;
                });
            }
        };
        return DataSourceMappingAdminComponent;
    }());
    DataSourceMappingAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DataSourceMappingAdminComponent, deps: [{ token: i3__namespace$2.RxRecordInstanceDataPageService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DataSourceMappingAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DataSourceMappingAdminComponent, selector: "rx-admin-data-source-mapping", ngImport: i0__namespace, template: "<rx-admin-settings header=\"Data source mapping\" [busy]=\"busy\">\n  <div class=\"row\">\n    <adapt-rx-select\n      class=\"col-md-6 form-group\"\n      rx-id=\"data-source-application\"\n      label=\"Application\"\n      [ngModel]=\"selectedApplication\"\n      [options]=\"applicationSelectOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      (ngModelChange)=\"onApplicationChange($event)\"\n    ></adapt-rx-select>\n  </div>\n\n  <rx-connection-mapping\n    *ngFor=\"let applicationMapping of applicationMappingList\"\n    [configurations]=\"configurationList\"\n    [aliasMapping]=\"applicationMapping\"\n    aliasType=\"dataSource\"\n  >\n  </rx-connection-mapping>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: ConnectionMappingComponent, selector: "rx-connection-mapping", inputs: ["configurations", "aliasMapping", "aliasType"] }], directives: [{ type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DataSourceMappingAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-data-source-mapping',
                        templateUrl: './data-source-mapping.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace$2.RxRecordInstanceDataPageService }]; } });

    var DataSourceMappingModule = /** @class */ (function () {
        function DataSourceMappingModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-data-source-mapping',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(DataSourceMappingAdminComponent),
                name: 'Data source mapping',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return DataSourceMappingModule;
    }());
    DataSourceMappingModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DataSourceMappingModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DataSourceMappingModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DataSourceMappingModule, declarations: [DataSourceMappingAdminComponent], imports: [i8.CommonModule,
            i4.AdminSettingsModule,
            i1$2.AdaptRxSelectModule,
            i1.FormsModule,
            i1$2.AdaptRxTextfieldModule,
            RxConnectionMappingModule] });
    DataSourceMappingModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DataSourceMappingModule, imports: [[
                i8.CommonModule,
                i4.AdminSettingsModule,
                i1$2.AdaptRxSelectModule,
                i1.FormsModule,
                i1$2.AdaptRxTextfieldModule,
                RxConnectionMappingModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DataSourceMappingModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [DataSourceMappingAdminComponent],
                        imports: [
                            i8.CommonModule,
                            i4.AdminSettingsModule,
                            i1$2.AdaptRxSelectModule,
                            i1.FormsModule,
                            i1$2.AdaptRxTextfieldModule,
                            RxConnectionMappingModule
                        ],
                        entryComponents: [DataSourceMappingAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var WebApiMappingAdminComponent = /** @class */ (function () {
        function WebApiMappingAdminComponent(rxGlobalCacheService, rxRecordInstanceDataPageService) {
            this.rxGlobalCacheService = rxGlobalCacheService;
            this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            this.mappingSelectOptions = [];
        }
        WebApiMappingAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.busy = rxjs.forkJoin([
                this.getRecordInstanceDataPage({
                    recorddefinition: RX_CONNECTION_MAPPING.aliasMapping.recordDefinitionName,
                    queryExpression: "'" + RX_CONNECTION_MAPPING.aliasMapping.fields.aliasType + "'!=\"email\"",
                    propertySelection: lodash.values(RX_CONNECTION_MAPPING.aliasMapping.fields).join()
                }),
                this.rxGlobalCacheService.getBundleDescriptors()
            ]).subscribe(function (_a) {
                var _b = __read(_a, 2), dataPage = _b[0], bundleDescriptors = _b[1];
                _this.mappingSelectOptions = lodash.uniqBy(dataPage.data, RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId)
                    .map(function (mapping) { return (Object.assign(Object.assign({}, mapping), { friendlyName: lodash.find(bundleDescriptors, {
                        id: mapping[RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId]
                    }).friendlyName })); })
                    .sort(function (a, b) { return a.friendlyName.localeCompare(b.friendlyName); });
            });
        };
        WebApiMappingAdminComponent.prototype.optionFormatter = function (application) {
            return application.friendlyName;
        };
        WebApiMappingAdminComponent.prototype.getRecordInstanceDataPage = function (params) {
            return this.rxRecordInstanceDataPageService.post({ params: params });
        };
        WebApiMappingAdminComponent.prototype.onApplicationChange = function (selectedApplication) {
            var _this = this;
            var applicationId = lodash.get(selectedApplication, "0." + RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId);
            if (applicationId) {
                rxjs.forkJoin({
                    configurationList: this.getRecordInstanceDataPage({
                        recorddefinition: RX_CONNECTION_MAPPING.webRequest.recordDefinitionName,
                        propertySelection: lodash.values(RX_CONNECTION_MAPPING.webRequest.fields).join()
                    }),
                    applicationMappingList: this.getRecordInstanceDataPage({
                        recorddefinition: RX_CONNECTION_MAPPING.aliasMapping.recordDefinitionName,
                        propertySelection: lodash.values(RX_CONNECTION_MAPPING.aliasMapping.fields).join(),
                        queryExpression: "(('" + RX_CONNECTION_MAPPING.aliasMapping.fields.applicationId + "'=\"" + applicationId + "\" AND " +
                            ("'" + RX_CONNECTION_MAPPING.aliasMapping.fields.aliasType + "'=\"" + RX_CONNECTION_MAPPING.aliasTypes.webRequest + "\"))")
                    })
                }).subscribe(function (result) {
                    _this.configurationList = result.configurationList.data;
                    _this.mappingList = result.applicationMappingList.data;
                });
            }
        };
        return WebApiMappingAdminComponent;
    }());
    WebApiMappingAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiMappingAdminComponent, deps: [{ token: i2__namespace.RxGlobalCacheService }, { token: i3__namespace$2.RxRecordInstanceDataPageService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    WebApiMappingAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: WebApiMappingAdminComponent, selector: "rx-web-api-mapping", ngImport: i0__namespace, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.web-api-mapping.header.title' | translate }}\"\n  [busy]=\"busy\"\n>\n  <div class=\"row\">\n    <adapt-rx-select\n      class=\"col-md-6 form-group\"\n      rx-id=\"application\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.application.label' | translate }}\"\n      [ngModel]=\"selectedMapping\"\n      [options]=\"mappingSelectOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      (ngModelChange)=\"onApplicationChange($event)\"\n    ></adapt-rx-select>\n  </div>\n\n  <rx-connection-mapping\n    *ngFor=\"let mapping of mappingList\"\n    [configurations]=\"configurationList\"\n    [aliasMapping]=\"mapping\"\n    aliasType=\"webRequest\"\n  >\n  </rx-connection-mapping>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: ConnectionMappingComponent, selector: "rx-connection-mapping", inputs: ["configurations", "aliasMapping", "aliasType"] }], directives: [{ type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiMappingAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-web-api-mapping',
                        templateUrl: './web-api-mapping.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxGlobalCacheService }, { type: i3__namespace$2.RxRecordInstanceDataPageService }]; } });

    var WebApiMappingRegistrationModule = /** @class */ (function () {
        function WebApiMappingRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-web-api-mapping',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(WebApiMappingAdminComponent),
                name: 'Web API mapping',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return WebApiMappingRegistrationModule;
    }());
    WebApiMappingRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiMappingRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    WebApiMappingRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiMappingRegistrationModule, declarations: [WebApiMappingAdminComponent], imports: [i4.AdminSettingsModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptRxSelectModule,
            i8.CommonModule,
            i1.FormsModule,
            RxConnectionMappingModule,
            i4$1.TranslateModule] });
    WebApiMappingRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiMappingRegistrationModule, imports: [[
                i4.AdminSettingsModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptRxSelectModule,
                i8.CommonModule,
                i1.FormsModule,
                RxConnectionMappingModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiMappingRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [WebApiMappingAdminComponent],
                        imports: [
                            i4.AdminSettingsModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptRxSelectModule,
                            i8.CommonModule,
                            i1.FormsModule,
                            RxConnectionMappingModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [WebApiMappingAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RX_CONNECTOR_CONFIGURATION = {
        dataPageType: 'com.bmc.arsys.rx.application.record.datapage.RecordInstanceDataPageQuery',
        recordDefinitionName: 'Connector Configurations',
        connectorType: 'connector',
        fields: {
            targetName: 56110,
            connectorId: 56111,
            connectorName: 56112,
            connectorConfigId: 56113,
            connectorConfigName: 56114,
            connectorProfileId: 56115,
            connectorProfileName: 56116
        }
    };

    var connectorsDataPageQuery = 'com.bmc.arsys.rx.application.integration.ConnectorDataPageQuery';
    var RxConnectorsDataPageService = /** @class */ (function (_super) {
        __extends(RxConnectorsDataPageService, _super);
        function RxConnectorsDataPageService(injector) {
            var _this = _super.call(this, injector, connectorsDataPageQuery) || this;
            _this.injector = injector;
            return _this;
        }
        return RxConnectorsDataPageService;
    }(i2.DataPage));
    RxConnectorsDataPageService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxConnectorsDataPageService, deps: [{ token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxConnectorsDataPageService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxConnectorsDataPageService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxConnectorsDataPageService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }]; } });

    var connectorConfigurationDataPageQuery = 'com.bmc.arsys.rx.application.integration.ConnectorConfigDataPageQuery';
    var RxConnectorConfigurationDataPageService = /** @class */ (function (_super) {
        __extends(RxConnectorConfigurationDataPageService, _super);
        function RxConnectorConfigurationDataPageService(injector) {
            var _this = _super.call(this, injector, connectorConfigurationDataPageQuery) || this;
            _this.injector = injector;
            return _this;
        }
        return RxConnectorConfigurationDataPageService;
    }(i2.DataPage));
    RxConnectorConfigurationDataPageService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxConnectorConfigurationDataPageService, deps: [{ token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxConnectorConfigurationDataPageService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxConnectorConfigurationDataPageService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxConnectorConfigurationDataPageService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }]; } });

    var RxConnectorConfigurationService = /** @class */ (function () {
        function RxConnectorConfigurationService(httpClient, rxConnectorsDataPageService, rxConnectorConfigurationDataPageService) {
            this.httpClient = httpClient;
            this.rxConnectorsDataPageService = rxConnectorsDataPageService;
            this.rxConnectorConfigurationDataPageService = rxConnectorConfigurationDataPageService;
            this.connectorConfigs = {};
            this.connectorProfiles = {};
        }
        RxConnectorConfigurationService.prototype.getConnectors = function () {
            return this.rxConnectorsDataPageService.get().pipe(operators.map(function (response) {
                return response.data.map(function (connector) { return ({
                    id: connector.id,
                    name: connector.name
                }); });
            }));
        };
        RxConnectorConfigurationService.prototype.getConnectorConfigurations = function (connectorId) {
            if (!this.connectorConfigs[connectorId]) {
                this.connectorConfigs[connectorId] = this.rxConnectorConfigurationDataPageService
                    .get({
                    params: {
                        connectorId: connectorId
                    }
                })
                    .pipe(operators.map(function (response) {
                    return response.data.map(function (connectorConfig) { return ({
                        id: connectorConfig.id,
                        name: connectorConfig.name,
                        profiles: connectorConfig.profiles
                    }); });
                }), operators.shareReplay(1));
            }
            return this.connectorConfigs[connectorId];
        };
        RxConnectorConfigurationService.prototype.getConnectorProfiles = function (connectorId, configId) {
            if (!this.connectorProfiles[configId]) {
                this.connectorProfiles[configId] = this.getConnectorConfigurations(connectorId).pipe(operators.map(function (configs) {
                    var config = lodash.find(configs, { id: configId });
                    return config.profiles;
                }));
            }
            return this.connectorProfiles[configId];
        };
        return RxConnectorConfigurationService;
    }());
    RxConnectorConfigurationService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxConnectorConfigurationService, deps: [{ token: i1__namespace$2.HttpClient }, { token: RxConnectorsDataPageService }, { token: RxConnectorConfigurationDataPageService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxConnectorConfigurationService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxConnectorConfigurationService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxConnectorConfigurationService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }, { type: RxConnectorsDataPageService }, { type: RxConnectorConfigurationDataPageService }]; } });

    var ConnectorConfigurationEditorComponent = /** @class */ (function (_super) {
        __extends(ConnectorConfigurationEditorComponent, _super);
        function ConnectorConfigurationEditorComponent(dockedPanelContext, formBuilder, rxRecordInstanceService, rxNotificationService, rxConnectorConfigurationService, injector) {
            var _this = _super.call(this, dockedPanelContext, injector) || this;
            _this.dockedPanelContext = dockedPanelContext;
            _this.formBuilder = formBuilder;
            _this.rxRecordInstanceService = rxRecordInstanceService;
            _this.rxNotificationService = rxNotificationService;
            _this.rxConnectorConfigurationService = rxConnectorConfigurationService;
            _this.injector = injector;
            _this.connectorProfiles = [];
            _this.connectorList = [];
            _this.connectorConfigurations = [];
            return _this;
        }
        ConnectorConfigurationEditorComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.isNewConfiguration = this.dockedPanelContext.getData().isNewConfiguration;
            this.connectorList = this.dockedPanelContext.getData().connectorList;
            this.connectorConfigurationForm = this.formBuilder.group({
                configurationName: '',
                connector: [
                    {
                        id: '',
                        name: ''
                    }
                ],
                connectorConfiguration: [
                    {
                        id: '',
                        name: ''
                    }
                ],
                connectorProfile: [
                    {
                        id: '',
                        name: ''
                    }
                ]
            });
            if (!this.isNewConfiguration) {
                this.currentRecordInstance = this.rxRecordInstanceService.get(RX_CONNECTOR_CONFIGURATION.recordDefinitionName, this.dockedPanelContext.getData().recordId);
                this.currentRecordInstance.subscribe(function (recordInstance) {
                    _this.connectorConfigurationForm
                        .get('configurationName')
                        .setValue(recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.targetName].value);
                    _this.connectorConfigurationForm.get('connector').setValue([
                        {
                            id: recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorId].value,
                            name: recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorName].value
                        }
                    ]);
                    _this.connectorConfigurationForm.get('connectorConfiguration').setValue([
                        {
                            id: recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorConfigId].value,
                            name: recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorConfigName].value
                        }
                    ]);
                    _this.connectorConfigurationForm.get('connectorProfile').setValue(recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileId].value
                        ? [
                            {
                                id: recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileId].value,
                                name: recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileName].value
                            }
                        ]
                        : []);
                    _this.loadConnectorConfigurations(recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorId].value);
                    _this.loadConnectorProfiles(recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorConfigId].value);
                });
            }
        };
        ConnectorConfigurationEditorComponent.prototype.isDirty = function () {
            return this.connectorConfigurationForm.dirty;
        };
        ConnectorConfigurationEditorComponent.prototype.loadConnectorConfigurations = function (event) {
            var _this = this;
            if (this.isSelectionChangeEvent(event)) {
                this.resetFields();
            }
            this.loadingConfigs = true;
            var selectedConnectorId = this.isSelectionChangeEvent(event) ? event.options[0].id : event;
            this.rxConnectorConfigurationService
                .getConnectorConfigurations(selectedConnectorId)
                .subscribe(function (configurations) {
                _this.connectorConfigurations = configurations;
                _this.loadingConfigs = false;
            });
        };
        ConnectorConfigurationEditorComponent.prototype.loadConnectorProfiles = function (event) {
            var _this = this;
            if (this.isSelectionChangeEvent(event)) {
                this.connectorConfigurationForm.get('connectorProfile').setValue([]);
            }
            this.loadingProfiles = true;
            var selectedConfigId = this.isSelectionChangeEvent(event) ? event.options[0].id : event;
            var selectedConnectorId = this.connectorConfigurationForm.get('connector').value[0].id;
            this.rxConnectorConfigurationService
                .getConnectorProfiles(selectedConnectorId, selectedConfigId)
                .subscribe(function (profiles) {
                _this.connectorProfiles = profiles;
                _this.loadingProfiles = false;
            });
        };
        ConnectorConfigurationEditorComponent.prototype.saveConnectorConfiguration = function () {
            var _this = this;
            if (this.isNewConfiguration) {
                this.currentRecordInstance = this.rxRecordInstanceService.getNew(RX_CONNECTOR_CONFIGURATION.recordDefinitionName);
            }
            this.currentRecordInstance
                .pipe(operators.map(function (recordInstance) {
                recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorId].value =
                    _this.connectorConfigurationForm.value.connector[0].id;
                recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorName].value =
                    _this.connectorConfigurationForm.value.connector[0].name;
                recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorConfigId].value =
                    _this.connectorConfigurationForm.value.connectorConfiguration[0].id;
                recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorConfigName].value =
                    _this.connectorConfigurationForm.value.connectorConfiguration[0].name;
                if (_this.connectorConfigurationForm.value.connectorProfile.length) {
                    recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileId].value =
                        _this.connectorConfigurationForm.value.connectorProfile[0].id;
                    recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileName].value =
                        _this.connectorConfigurationForm.value.connectorProfile[0].name;
                }
                else {
                    recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileId].value = null;
                    recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.connectorProfileName].value = null;
                }
                recordInstance.fieldInstances[i3.RX_RECORD_DEFINITION.coreFieldIds.description].value =
                    _this.connectorConfigurationForm.value.configurationName;
                recordInstance.fieldInstances[RX_CONNECTOR_CONFIGURATION.fields.targetName].value =
                    _this.connectorConfigurationForm.value.configurationName;
                return recordInstance;
            }), operators.switchMap(function (recordInstance) {
                if (_this.isNewConfiguration) {
                    return _this.rxRecordInstanceService.create(recordInstance);
                }
                else {
                    return _this.rxRecordInstanceService.save(recordInstance);
                }
            }))
                .subscribe(function () {
                _this.rxNotificationService.addSuccessMessage('Configuration saved successfully.');
                _this.dockedPanelContext.close(null);
            });
        };
        ConnectorConfigurationEditorComponent.prototype.optionFormatter = function (option) {
            return option.name;
        };
        ConnectorConfigurationEditorComponent.prototype.cancel = function () {
            this.dockedPanelContext.dismiss(i1$2.DismissReasons.CLOSE_BTN);
        };
        ConnectorConfigurationEditorComponent.prototype.isSelectionChangeEvent = function (event) {
            return !lodash.isUndefined(event.options);
        };
        ConnectorConfigurationEditorComponent.prototype.resetFields = function () {
            this.connectorProfiles = [];
            this.connectorConfigurations = [];
            this.connectorConfigurationForm.get('connectorConfiguration').setValue([]);
            this.connectorConfigurationForm.get('connectorProfile').setValue([]);
            this.connectorConfigurationForm.markAsPristine();
        };
        return ConnectorConfigurationEditorComponent;
    }(i1$1.RxModalClass));
    ConnectorConfigurationEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConnectorConfigurationEditorComponent, deps: [{ token: i1__namespace$1.DockedPanelContext }, { token: i1__namespace$3.FormBuilder }, { token: i3__namespace$2.RxRecordInstanceService }, { token: i2__namespace.RxNotificationService }, { token: RxConnectorConfigurationService }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConnectorConfigurationEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ConnectorConfigurationEditorComponent, selector: "rx-connector-configuration-editor", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"dp-body\">\n  <form [formGroup]=\"connectorConfigurationForm\">\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      rx-id=\"configuration-name\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.name.label' | translate }}\"\n      formControlName=\"configurationName\"\n      required=\"true\"\n      [readonly]=\"!isNewConfiguration\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.connector-configuration.connector-type.label' | translate }}\"\n      rx-id=\"connector\"\n      formControlName=\"connector\"\n      [options]=\"connectorList\"\n      enableFilter=\"true\"\n      [optionFormatter]=\"optionFormatter\"\n      (onSelectionChange)=\"loadConnectorConfigurations($event)\"\n      [loadingState]=\"loadingConnectors\"\n      required=\"true\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.connector-configuration.configuration.label' | translate }}\"\n      rx-id=\"connector-configuration\"\n      formControlName=\"connectorConfiguration\"\n      [options]=\"connectorConfigurations\"\n      [optionFormatter]=\"optionFormatter\"\n      enableFilter=\"true\"\n      (onSelectionChange)=\"loadConnectorProfiles($event)\"\n      [loadingState]=\"loadingConfigs\"\n      required=\"true\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.connector-configuration.profile.label' | translate }}\"\n      rx-id=\"connector-profile\"\n      formControlName=\"connectorProfile\"\n      [options]=\"connectorProfiles\"\n      [optionFormatter]=\"optionFormatter\"\n      [loadingState]=\"loadingProfiles\"\n    >\n    </adapt-rx-select>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button\n    type=\"button\"\n    adapt-button\n    size=\"small\"\n    btn-type=\"primary\"\n    rx-id=\"save-button\"\n    class=\"mr-2\"\n    [disabled]=\"connectorConfigurationForm.pristine || connectorConfigurationForm.invalid\"\n    (click)=\"saveConnectorConfiguration()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button type=\"button\" size=\"small\" adapt-button (click)=\"cancel()\" btn-type=\"secondary\" rx-id=\"cancel-button\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConnectorConfigurationEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-connector-configuration-editor',
                        templateUrl: './connector-configuration-editor.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.DockedPanelContext }, { type: i1__namespace$3.FormBuilder }, { type: i3__namespace$2.RxRecordInstanceService }, { type: i2__namespace.RxNotificationService }, { type: RxConnectorConfigurationService }, { type: i0__namespace.Injector }]; } });

    var ConnectorConfigurationAdminComponent = /** @class */ (function () {
        function ConnectorConfigurationAdminComponent(formBuilder, rxModalService, rxConnectorConfigurationService) {
            this.formBuilder = formBuilder;
            this.rxModalService = rxModalService;
            this.rxConnectorConfigurationService = rxConnectorConfigurationService;
            this.connectorList = [];
        }
        ConnectorConfigurationAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.busySubscription = this.rxConnectorConfigurationService.getConnectors().subscribe(function (connectors) {
                _this.connectorList = connectors;
            }, function (response) {
                _this.errorText = lodash.get(response, 'error[0].appendedText', 'Unknown error.');
            });
            this.gridConfig = rxjs.of({
                actionButtons: [
                    {
                        label: 'Edit',
                        style: 'tertiary',
                        icon: 'pencil',
                        actions: [
                            {
                                name: function () {
                                    _this.openConnectionConfiguration(_this.grid.api.getFirstSelectedRow());
                                }
                            }
                        ]
                    }
                ],
                recordDefinitionName: RX_CONNECTOR_CONFIGURATION.recordDefinitionName,
                enableRowSelection: i7.RowSelectionMode.Single,
                getRecordDefinition: function () { return rxjs.of(_this.getRecordDefinition()); },
                columns: this.getColumns(),
                styles: 'flex-fill'
            });
        };
        ConnectorConfigurationAdminComponent.prototype.newConnectionConfiguration = function () {
            this.openConnectorConfigurationEditor(true);
        };
        ConnectorConfigurationAdminComponent.prototype.openConnectionConfiguration = function (selectedRecord) {
            this.openConnectorConfigurationEditor(false, selectedRecord[i3.RX_RECORD_DEFINITION.coreFieldIds.id]);
        };
        ConnectorConfigurationAdminComponent.prototype.getRecordDefinition = function () {
            return {
                fieldDefinitions: [
                    {
                        id: i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_CONNECTOR_CONFIGURATION.fields.targetName,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_CONNECTOR_CONFIGURATION.fields.connectorName,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_CONNECTOR_CONFIGURATION.fields.connectorConfigName,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_CONNECTOR_CONFIGURATION.fields.connectorProfileName,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    }
                ]
            };
        };
        ConnectorConfigurationAdminComponent.prototype.getColumns = function () {
            var _this = this;
            return [
                {
                    index: 0,
                    title: 'Name',
                    fieldId: String(RX_CONNECTOR_CONFIGURATION.fields.targetName),
                    clickable: true,
                    actions: [
                        {
                            name: function (previousAction, selectedRow) { return _this.openConnectionConfiguration(selectedRow); }
                        }
                    ]
                },
                {
                    index: 1,
                    title: 'Connector type',
                    fieldId: String(RX_CONNECTOR_CONFIGURATION.fields.connectorName)
                },
                {
                    index: 2,
                    title: 'Configuration',
                    fieldId: String(RX_CONNECTOR_CONFIGURATION.fields.connectorConfigName)
                },
                {
                    index: 3,
                    title: 'Profile',
                    fieldId: String(RX_CONNECTOR_CONFIGURATION.fields.connectorProfileName)
                },
                {
                    index: 4,
                    title: 'ID',
                    fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.id),
                    visible: false
                }
            ];
        };
        ConnectorConfigurationAdminComponent.prototype.openConnectorConfigurationEditor = function (isNewConfiguration, recordId) {
            var _this = this;
            return this.rxModalService
                .openDockedPanel({
                title: 'Connector configuration',
                content: ConnectorConfigurationEditorComponent,
                data: {
                    connectorList: this.connectorList,
                    isNewConfiguration: isNewConfiguration,
                    recordId: recordId
                }
            })
                .then(function () {
                _this.grid.api.refresh().subscribe();
            })
                .catch(lodash.noop);
        };
        return ConnectorConfigurationAdminComponent;
    }());
    ConnectorConfigurationAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConnectorConfigurationAdminComponent, deps: [{ token: i1__namespace$3.FormBuilder }, { token: i1__namespace.RxModalService }, { token: RxConnectorConfigurationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConnectorConfigurationAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ConnectorConfigurationAdminComponent, selector: "rx-admin-connector-configuration", viewQueries: [{ propertyName: "grid", first: true, predicate: ["grid"], descendants: true }, { propertyName: "connectorConfigurationTemplate", first: true, predicate: ["connectorConfigurationTemplate"], descendants: true, static: true }], ngImport: i0__namespace, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.connector-configuration.header.title' | translate }}\"\n  [busy]=\"busySubscription\"\n>\n  <adapt-alert\n    [config]=\"{\n      title:\n        'com.bmc.arsys.rx.client.admin.connection-configuration.invalid-integration-service-configuration.message'\n        | translate,\n      content: errorText,\n      variant: 'danger',\n      dismissible: false\n    }\"\n    *ngIf=\"errorText\"\n  >\n  </adapt-alert>\n\n  <ng-container *ngIf=\"!errorText\">\n    <button\n      adapt-button\n      type=\"button\"\n      btn-type=\"tertiary\"\n      class=\"d-icon-plus_circle align-self-start\"\n      rx-id=\"new-button\"\n      (click)=\"newConnectionConfiguration()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n    </button>\n\n    <rx-record-grid #grid [config]=\"gridConfig\"></rx-record-grid>\n  </ng-container>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConnectorConfigurationAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-connector-configuration',
                        templateUrl: './connector-configuration.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }, { type: i1__namespace.RxModalService }, { type: RxConnectorConfigurationService }]; }, propDecorators: { grid: [{
                    type: i0.ViewChild,
                    args: ['grid']
                }], connectorConfigurationTemplate: [{
                    type: i0.ViewChild,
                    args: ['connectorConfigurationTemplate', { static: true }]
                }] } });

    var ConnectorConfigurationRegistrationModule = /** @class */ (function () {
        function ConnectorConfigurationRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-connector-configuration',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(ConnectorConfigurationAdminComponent),
                name: 'Connector configuration',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return ConnectorConfigurationRegistrationModule;
    }());
    ConnectorConfigurationRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConnectorConfigurationRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConnectorConfigurationRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConnectorConfigurationRegistrationModule, declarations: [ConnectorConfigurationAdminComponent, ConnectorConfigurationEditorComponent], imports: [i8.CommonModule,
            i1$2.AdaptButtonModule,
            i4.AdminSettingsModule,
            i7.RecordGridModule,
            i1$2.AdaptRxTextfieldModule,
            i1.ReactiveFormsModule,
            i1$2.AdaptRxSelectModule,
            i1$2.AdaptAlertModule,
            i4$1.TranslateModule] });
    ConnectorConfigurationRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConnectorConfigurationRegistrationModule, imports: [[
                i8.CommonModule,
                i1$2.AdaptButtonModule,
                i4.AdminSettingsModule,
                i7.RecordGridModule,
                i1$2.AdaptRxTextfieldModule,
                i1.ReactiveFormsModule,
                i1$2.AdaptRxSelectModule,
                i1$2.AdaptAlertModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ConnectorConfigurationRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ConnectorConfigurationAdminComponent, ConnectorConfigurationEditorComponent],
                        imports: [
                            i8.CommonModule,
                            i1$2.AdaptButtonModule,
                            i4.AdminSettingsModule,
                            i7.RecordGridModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1.ReactiveFormsModule,
                            i1$2.AdaptRxSelectModule,
                            i1$2.AdaptAlertModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [ConnectorConfigurationAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RxCustomDataSourceProviderPickerComponent = /** @class */ (function (_super) {
        __extends(RxCustomDataSourceProviderPickerComponent, _super);
        function RxCustomDataSourceProviderPickerComponent(translateService, renderer) {
            var _this = _super.call(this) || this;
            _this.translateService = translateService;
            _this.renderer = renderer;
            _this.defaultText = _this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');
            return _this;
        }
        RxCustomDataSourceProviderPickerComponent.prototype.setDropdownWidth = function () {
            var dropdownButton = this.renderer.selectRootElement(this.dropdownButton.nativeElement, true);
            this.dropdownWidth = dropdownButton.clientWidth + 2;
        };
        RxCustomDataSourceProviderPickerComponent.prototype.selectProvider = function (providerName) {
            this.dropdown.close();
            this.value = providerName;
        };
        return RxCustomDataSourceProviderPickerComponent;
    }(i4.ValueAccessor));
    RxCustomDataSourceProviderPickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCustomDataSourceProviderPickerComponent, deps: [{ token: i4__namespace.TranslateService }, { token: i0__namespace.Renderer2 }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RxCustomDataSourceProviderPickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxCustomDataSourceProviderPickerComponent, selector: "rx-custom-data-source-provider-picker", inputs: { options: "options" }, providers: [
            {
                provide: i1.NG_VALUE_ACCESSOR,
                useExisting: RxCustomDataSourceProviderPickerComponent,
                multi: true
            }
        ], viewQueries: [{ propertyName: "dropdownButton", first: true, predicate: ["dropdownButton"], descendants: true, static: true }, { propertyName: "dropdown", first: true, predicate: ["providerPicker"], descendants: true, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"d-flex\">\n  <adapt-rx-control-label\n    *ngIf=\"options.label\"\n    [label]=\"options.label | translate\"\n    [showRequiredLabel]=\"options.required\"\n  ></adapt-rx-control-label>\n</div>\n\n<div class=\"dropdown\" adaptDropdown [autoClose]=\"'outside'\" [autoFocusFirst]=\"false\" #providerPicker=\"adaptDropdown\">\n  <button\n    rx-id=\"toggle-button\"\n    #dropdownButton\n    class=\"btn btn-secondary\"\n    (click)=\"setDropdownWidth()\"\n    adaptDropdownToggle\n    type=\"button\"\n  >\n    <span class=\"rx-selected-item rx-ellipsis\">\n      {{ (value | rxDefinitionNamePipe) || defaultText }}\n    </span>\n  </button>\n\n  <div class=\"dropdown-menu p-0\" [style.width.px]=\"dropdownWidth\" adaptDropdownMenu>\n    <ul class=\"providers\" *ngIf=\"options.providersTree.length\">\n      <li\n        class=\"provider rx-ellipsis\"\n        *ngFor=\"let providersTreeNode of options.providersTree\"\n        (click)=\"providersTreeNode.isExpanded = !providersTreeNode.isExpanded\"\n      >\n        <span\n          rx-id=\"expand-button\"\n          class=\"expand-arrow d-icon-angle_right\"\n          [class.open]=\"providersTreeNode.isExpanded\"\n        ></span>\n        <span> {{ providersTreeNode.label }} </span>\n\n        <div *ngIf=\"providersTreeNode.isExpanded\">\n          <button\n            class=\"dropdown-item rx-ellipsis\"\n            type=\"button\"\n            *ngFor=\"let provider of providersTreeNode.providers\"\n            (click)=\"$event.stopPropagation(); selectProvider(provider)\"\n            [class.active]=\"value === provider\"\n          >\n            <span>{{ provider | rxDefinitionNamePipe }}</span>\n          </button>\n        </div>\n      </li>\n    </ul>\n  </div>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.expand-arrow{padding:5px;transition:.2s}.expand-arrow.open{transform:rotate(90deg)}.providers{overflow-y:auto;margin:0;list-style:none;padding:5px 0;width:100%;height:275px}.provider{width:100%;padding:0 5px;line-height:30px;cursor:pointer}span[rx-id=expand-button]{display:inline-flex;width:15px}.rx-selected-item{flex-grow:1}.dropdown-menu{height:330px}.dropdown-toggle{width:100%;display:flex;text-align:left}.dropdown-item{padding:0 15px 0 30px}\n"], components: [{ type: i1__namespace$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace$1.AdaptDropdownDirective, selector: "adapt-dropdown, [adaptDropdown]", inputs: ["autoClose", "customClass", "closeOnEscape", "placement", "animationPlacement", "holdFocusInMenu", "holdFocusOnOpen", "autoFocusFirst", "restoreFocusAfterClose", "focusNextElementAfterClose", "appendToBody", "appendTo", "positionTo", "anchorPositionTrackingIntervalMs", "enableAnchorPositionTracking", "recalculatePositionOnElementResize", "setMobileState", "mobileView"], outputs: ["onOpen", "onClose", "anchorPositionChange", "popupAnimationDone"], exportAs: ["adaptDropdown"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$1.AdaptDropdownToggleDirective, selector: "[adaptDropdownToggle]", inputs: ["showCaret", "dropdownTogglerType"] }, { type: i1__namespace$1.AdaptDropdownMenuDirective, selector: "[adaptDropdownMenu]" }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4__namespace.TranslatePipe, "rxDefinitionNamePipe": i2__namespace.RxDefinitionNamePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCustomDataSourceProviderPickerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-custom-data-source-provider-picker',
                        templateUrl: './custom-data-source-provider-picker.component.html',
                        styleUrls: ['./custom-data-source-provider-picker.component.scss'],
                        providers: [
                            {
                                provide: i1.NG_VALUE_ACCESSOR,
                                useExisting: RxCustomDataSourceProviderPickerComponent,
                                multi: true
                            }
                        ]
                    }]
            }], ctorParameters: function () { return [{ type: i4__namespace.TranslateService }, { type: i0__namespace.Renderer2 }]; }, propDecorators: { options: [{
                    type: i0.Input
                }], dropdownButton: [{
                    type: i0.ViewChild,
                    args: ['dropdownButton', { static: true }]
                }], dropdown: [{
                    type: i0.ViewChild,
                    args: ['providerPicker', { static: true }]
                }] } });

    var resourceTypes = {
        arSystem: {
            value: 'com.bmc.arsys.rx.services.datasource.domain.ARSystemDataSource',
            name: 'com.bmc.arsys.rx.client.admin.data-source-connections.ar-system.label'
        },
        custom: {
            value: 'com.bmc.arsys.rx.services.datasource.domain.CustomDataSource',
            name: 'com.bmc.arsys.rx.client.admin.data-source-connections.custom.label'
        },
        webApi: {
            value: 'com.bmc.arsys.rx.services.datasource.domain.WebApiDataSource',
            name: 'com.bmc.arsys.rx.client.admin.data-source-connections.web-api.label'
        }
    };
    var authTypes$1 = [
        {
            name: 'com.bmc.arsys.rx.client.admin.data-source-connections.rsso.label',
            value: 'rsso'
        },
        {
            name: 'com.bmc.arsys.rx.client.admin.data-source-connections.ras.label',
            value: 'ras'
        }
    ];
    var RX_DATA_SOURCE_CONNECTIONS = {
        recordDefinitionName: 'Data Source',
        dataPageQueryType: 'com.bmc.arsys.rx.application.datasource.datapage.DataSourceDataPageQuery',
        dataSourceConnectionUrl: '/api/rx/application/datasource/configuration',
        resourceTypes: resourceTypes,
        authTypes: authTypes$1,
        portMinValue: 0,
        portMaxValue: 65535,
        hostNameMaxLength: 254,
        pingConfigurationCommand: 'com.bmc.arsys.rx.application.datasource.command.ValidateDataSourceCommand',
        initialWizardContext: {
            dataSourceName: '',
            resourceType: resourceTypes.arSystem,
            hostName: '',
            portNumber: null,
            authType: lodash.head(authTypes$1).name,
            rasPassword: '',
            enforceAuthorization: false,
            webApiDataSourceGuid: '',
            isEditMode: false,
            isGeneralFormPristine: true
        }
    };

    var DataSourceConnectionGeneralComponent = /** @class */ (function () {
        function DataSourceConnectionGeneralComponent(rxWizardModalComponent, translateService) {
            var _this = this;
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.translateService = translateService;
            this.dataSourceConfigTypes = Object.values(RX_DATA_SOURCE_CONNECTIONS.resourceTypes).map(function (resourceType) { return (Object.assign(Object.assign({}, resourceType), { name: _this.translateService.instant(resourceType.name) })); });
            this.defaultSelection = this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.optionFormatter = function (dataSourceOption) {
                return lodash.get(dataSourceOption, 'name', _this.defaultSelection);
            };
        }
        DataSourceConnectionGeneralComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.rxWizardModalComponent.context$.pipe(operators.take(1)).subscribe(function (context) {
                _this.generalForm = new i1.FormGroup({
                    dataSourceName: new i1.FormControl(context.dataSourceName, [i1.Validators.required]),
                    resourceType: new i1.FormControl([context.resourceType], [i1.Validators.required])
                });
                if (_this.generalForm.invalid) {
                    _this.rxWizardModalComponent.api.disableNextButton();
                }
            });
            this.generalForm.valueChanges
                .pipe(operators.withLatestFrom(this.rxWizardModalComponent.context$), operators.takeUntil(this.destroyed$))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), value = _b[0], context = _b[1];
                _this.rxWizardModalComponent.api.updateContext(Object.assign(Object.assign({}, value), { resourceType: lodash.head(value.resourceType), isGeneralFormPristine: _this.generalForm.pristine }));
                if (_this.generalForm.valid) {
                    _this.rxWizardModalComponent.api.enableNextButton();
                }
                else {
                    _this.rxWizardModalComponent.api.disableNextButton();
                }
            });
        };
        DataSourceConnectionGeneralComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        return DataSourceConnectionGeneralComponent;
    }());
    DataSourceConnectionGeneralComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DataSourceConnectionGeneralComponent, deps: [{ token: i4__namespace$1.RxWizardModalComponent }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DataSourceConnectionGeneralComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DataSourceConnectionGeneralComponent, selector: "rx-data-source-connection-general", ngImport: i0__namespace, template: "<form [formGroup]=\"generalForm\">\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <adapt-rx-textfield\n        label=\"{{ 'com.bmc.arsys.rx.client.common.name.label' | translate }}\"\n        name=\"dataSourceName\"\n        formControlName=\"dataSourceName\"\n        rx-id=\"name-field\"\n        class=\"d-block form-group\"\n      >\n      </adapt-rx-textfield>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <adapt-rx-select\n        label=\"{{ 'com.bmc.arsys.rx.client.common.item-type.label' | translate }}\"\n        name=\"resourceType\"\n        class=\"d-block form-group\"\n        rx-id=\"type-field\"\n        formControlName=\"resourceType\"\n        [options]=\"dataSourceConfigTypes\"\n        [optionFormatter]=\"optionFormatter\"\n      >\n      </adapt-rx-select>\n    </div>\n  </div>\n</form>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield,adapt-rx-select{max-width:400px}\n"], components: [{ type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DataSourceConnectionGeneralComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-data-source-connection-general',
                        templateUrl: './data-source-connection-general.component.html',
                        styleUrls: ['./data-source-connection-general.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i4__namespace$1.RxWizardModalComponent }, { type: i4__namespace.TranslateService }]; } });

    var RxCustomDataSourceProviderDataPageService = /** @class */ (function (_super) {
        __extends(RxCustomDataSourceProviderDataPageService, _super);
        function RxCustomDataSourceProviderDataPageService(injector) {
            var _this = _super.call(this, injector, 'com.bmc.arsys.rx.application.query.CustomDataSourceProviderDataPageQuery') || this;
            _this.injector = injector;
            return _this;
        }
        return RxCustomDataSourceProviderDataPageService;
    }(i2.DataPage));
    RxCustomDataSourceProviderDataPageService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCustomDataSourceProviderDataPageService, deps: [{ token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxCustomDataSourceProviderDataPageService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCustomDataSourceProviderDataPageService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxCustomDataSourceProviderDataPageService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }]; } });

    var DataSourceConnectionPropertiesComponent = /** @class */ (function () {
        function DataSourceConnectionPropertiesComponent(rxCognitiveServiceService, rxRecordInstanceDataPageService, rxCustomDataSourceProviderDataPageService, rxDefinitionNameService, rxWizardModalComponent, translateService, rxGlobalCacheService) {
            var _this = this;
            this.rxCognitiveServiceService = rxCognitiveServiceService;
            this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            this.rxCustomDataSourceProviderDataPageService = rxCustomDataSourceProviderDataPageService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.translateService = translateService;
            this.rxGlobalCacheService = rxGlobalCacheService;
            this.isRasPasswordDisabled = true;
            this.connectionTestStatus = i1$1.ConnectionTestStatus.Invalid;
            this.webApis = [];
            this.customDataSourceProvidersPickerOptions = {
                label: 'com.bmc.arsys.rx.client.admin.data-source-connection-properties.custom-data-source-provider.label',
                required: true,
                providersTree: []
            };
            this.dataSourceAuthenticationTypes = RX_DATA_SOURCE_CONNECTIONS.authTypes.map(function (authType) { return (Object.assign(Object.assign({}, authType), { name: _this.translateService.instant(authType.name) })); });
            this.isResourceTypeArSystem$ = this.rxWizardModalComponent.context$.pipe(operators.map(function (context) { return context.resourceType.value === RX_DATA_SOURCE_CONNECTIONS.resourceTypes.arSystem.value; }), operators.shareReplay(1));
            this.isResourceTypeCustom$ = this.rxWizardModalComponent.context$.pipe(operators.map(function (context) { return context.resourceType.value === RX_DATA_SOURCE_CONNECTIONS.resourceTypes.custom.value; }), operators.shareReplay(1));
            this.isResourceTypeWebApi$ = this.rxWizardModalComponent.context$.pipe(operators.map(function (context) { return context.resourceType.value === RX_DATA_SOURCE_CONNECTIONS.resourceTypes.webApi.value; }), operators.shareReplay(1));
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.defaultSelection = this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');
            this.isDataLoaded = {};
            this.optionFormatter = function (dataSourceOption) { return lodash.get(dataSourceOption, 'name', _this.defaultSelection); };
        }
        DataSourceConnectionPropertiesComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.rxWizardModalComponent.context$.pipe(operators.take(1)).subscribe(function (context) {
                _this.connectionPropertiesForm = new i1.FormGroup({
                    hostName: new i1.FormControl(context.hostName, [i1.Validators.required]),
                    port: new i1.FormControl(context.port, [i1.Validators.required]),
                    authType: new i1.FormControl(context.authType, [i1.Validators.required]),
                    rasPassword: new i1.FormControl(context.rasPassword),
                    enforceAuthorization: new i1.FormControl(context.enforceAuthorization),
                    selectedWebApi: new i1.FormControl(context.webApiDataSourceGuid, [i1.Validators.required]),
                    providerId: new i1.FormControl(context.providerId, [i1.Validators.required])
                });
            });
            this.rxWizardModalComponent.context$.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (context) {
                var arSystemControls = ['hostName', 'port', 'authType', 'rasPassword', 'enforceAuthorization'];
                if (context.resourceType.value === RX_DATA_SOURCE_CONNECTIONS.resourceTypes.arSystem.value) {
                    arSystemControls.forEach(function (control) { return _this.connectionPropertiesForm.get(control).enable({ emitEvent: false }); });
                    _this.connectionPropertiesForm.get('selectedWebApi').disable({ emitEvent: false });
                    _this.connectionPropertiesForm.get('providerId').disable({ emitEvent: false });
                }
                else if (context.resourceType.value === RX_DATA_SOURCE_CONNECTIONS.resourceTypes.webApi.value) {
                    arSystemControls.forEach(function (control) { return _this.connectionPropertiesForm.get(control).disable({ emitEvent: false }); });
                    _this.connectionPropertiesForm.get('selectedWebApi').enable({ emitEvent: false });
                    _this.connectionPropertiesForm.get('providerId').disable({ emitEvent: false });
                }
                else if (context.resourceType.value === RX_DATA_SOURCE_CONNECTIONS.resourceTypes.custom.value) {
                    arSystemControls.forEach(function (control) { return _this.connectionPropertiesForm.get(control).disable({ emitEvent: false }); });
                    _this.connectionPropertiesForm.get('selectedWebApi').disable({ emitEvent: false });
                    _this.connectionPropertiesForm.get('providerId').enable({ emitEvent: false });
                }
                _this.loadCustomDataSourceProviders(context);
                _this.loadWebApis(context);
                if (_this.connectionPropertiesForm.valid && !context.isGeneralFormPristine) {
                    _this.rxWizardModalComponent.api.enableFinishButton();
                }
                else {
                    _this.rxWizardModalComponent.api.disableFinishButton();
                }
            });
            this.connectionPropertiesForm.valueChanges
                .pipe(operators.withLatestFrom(this.isResourceTypeWebApi$), operators.takeUntil(this.destroyed$))
                .subscribe(function (_b) {
                var _c = __read(_b, 2), value = _c[0], isResourceTypeWebApi = _c[1];
                _this.rxWizardModalComponent.api.updateContext(lodash.omit(value, ['selectedWebApi']));
                if (!isResourceTypeWebApi) {
                    _this.connectionTestStatus =
                        _this.connectionPropertiesForm.pristine || _this.connectionPropertiesForm.invalid
                            ? i1$1.ConnectionTestStatus.Invalid
                            : i1$1.ConnectionTestStatus.Unknown;
                }
            });
            this.connectionPropertiesForm.valueChanges
                .pipe(operators.withLatestFrom(this.rxWizardModalComponent.context$), operators.takeUntil(this.destroyed$))
                .subscribe(function (_b) {
                var _c = __read(_b, 2), _ = _c[0], context = _c[1];
                if (_this.connectionPropertiesForm.invalid ||
                    (_this.connectionPropertiesForm.pristine && context.isGeneralFormPristine)) {
                    _this.rxWizardModalComponent.api.disableFinishButton();
                }
                else {
                    _this.rxWizardModalComponent.api.enableFinishButton();
                }
            });
        };
        DataSourceConnectionPropertiesComponent.prototype.setAuthType = function (type) {
            var newContext = {
                authType: type
            };
            this.isRasPasswordDisabled = type !== RX_DATA_SOURCE_CONNECTIONS.authTypes[1].name;
            if (this.isRasPasswordDisabled) {
                newContext.rasPassword = null;
            }
            this.rxWizardModalComponent.api.updateContext(newContext);
        };
        DataSourceConnectionPropertiesComponent.prototype.onTestConnection = function () {
            var _this = this;
            this.rxWizardModalComponent.context$
                .pipe(operators.switchMap(function (context) { return _this.rxCognitiveServiceService.testConnection({
                resourceType: RX_DATA_SOURCE_CONNECTIONS.pingConfigurationCommand,
                dataSource: {
                    resourceType: RX_DATA_SOURCE_CONNECTIONS.resourceTypes.arSystem.value,
                    authType: context.authType,
                    hostName: context.hostName,
                    port: context.port,
                    rasPassword: context.rasPassword,
                    enforceAuthorization: context.enforceAuthorization
                }
            }); }), operators.catchError(function (error) {
                _this.connectionTestStatus = i1$1.ConnectionTestStatus.Failed;
                return rxjs.throwError(error);
            }))
                .subscribe(function () {
                _this.connectionTestStatus = i1$1.ConnectionTestStatus.Passed;
            });
        };
        DataSourceConnectionPropertiesComponent.prototype.loadCustomDataSourceProviders = function (context) {
            var _this = this;
            if (context.resourceType.value === RX_DATA_SOURCE_CONNECTIONS.resourceTypes.custom.value &&
                !this.isDataLoaded[RX_DATA_SOURCE_CONNECTIONS.resourceTypes.custom.value]) {
                var globalLabel_1 = this.translateService.instant('com.bmc.arsys.rx.client.common.global-items.label');
                this.isDataLoaded[RX_DATA_SOURCE_CONNECTIONS.resourceTypes.custom.value] = true;
                this.rxCustomDataSourceProviderDataPageService
                    .get()
                    .pipe(operators.switchMap(function (dataPage) { return rxjs.forkJoin(dataPage.data.map(function (customDataSourceProvider) {
                    var bundleId = _this.rxDefinitionNameService.getBundleId(customDataSourceProvider.name) || globalLabel_1;
                    return _this.rxGlobalCacheService.getBundleFriendlyName(bundleId, bundleId).pipe(operators.map(function (bundleFriendlyName) { return ({
                        bundleFriendlyName: bundleFriendlyName,
                        value: customDataSourceProvider.name
                    }); }));
                })); }))
                    .subscribe(function (providers) {
                    var _a;
                    var customDataSourceProvidersByBundleFriendlyName = lodash.groupBy(providers, 'bundleFriendlyName');
                    _this.customDataSourceProvidersPickerOptions.providersTree = Object.keys(customDataSourceProvidersByBundleFriendlyName)
                        .map(function (bundleFriendlyName) { return ({
                        label: bundleFriendlyName,
                        isExpanded: true,
                        providers: customDataSourceProvidersByBundleFriendlyName[bundleFriendlyName]
                            .map(function (provider) { return provider.value; })
                            .sort()
                    }); })
                        .sort(function (provider1, provider2) {
                        if (provider1.label === globalLabel_1) {
                            return -1;
                        }
                        return provider1.label > provider2.label ? 1 : -1;
                    });
                    _this.connectionPropertiesForm
                        .get('providerId')
                        .setValue((_a = lodash.find(providers, function (provider) { return provider.value === context.providerId; })) === null || _a === void 0 ? void 0 : _a.value, {
                        emitEvent: false
                    });
                });
            }
        };
        DataSourceConnectionPropertiesComponent.prototype.loadWebApis = function (context) {
            var _this = this;
            if (context.resourceType.value === RX_DATA_SOURCE_CONNECTIONS.resourceTypes.webApi.value &&
                !this.isDataLoaded[RX_DATA_SOURCE_CONNECTIONS.resourceTypes.webApi.value]) {
                var params = {
                    recorddefinition: 'WebAPI Connection'
                };
                this.isDataLoaded[RX_DATA_SOURCE_CONNECTIONS.resourceTypes.webApi.value] = true;
                this.rxRecordInstanceDataPageService.post({ params: params }).subscribe(function (result) {
                    _this.webApis = result.data.map(function (webApi) { return ({
                        name: webApi[i3.RX_RECORD_DEFINITION.coreFieldIds.description],
                        id: webApi[i3.RX_RECORD_DEFINITION.coreFieldIds.id]
                    }); });
                    _this.connectionPropertiesForm
                        .get('selectedWebApi')
                        .setValue(lodash.filter(_this.webApis, ['id', context.webApiDataSourceGuid]), { emitEvent: false });
                });
            }
        };
        DataSourceConnectionPropertiesComponent.prototype.onWebApiChange = function (event) {
            this.rxWizardModalComponent.api.updateContext({
                webApiDataSourceGuid: event.options[0].id
            });
        };
        DataSourceConnectionPropertiesComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next();
            this.destroyed$.complete();
        };
        return DataSourceConnectionPropertiesComponent;
    }());
    DataSourceConnectionPropertiesComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DataSourceConnectionPropertiesComponent, deps: [{ token: RxCognitiveServiceService }, { token: i3__namespace$2.RxRecordInstanceDataPageService }, { token: RxCustomDataSourceProviderDataPageService }, { token: i2__namespace.RxDefinitionNameService }, { token: i4__namespace$1.RxWizardModalComponent }, { token: i4__namespace.TranslateService }, { token: i2__namespace.RxGlobalCacheService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DataSourceConnectionPropertiesComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DataSourceConnectionPropertiesComponent, selector: "rx-data-source-connection-properties", ngImport: i0__namespace, template: "<form [formGroup]=\"connectionPropertiesForm\">\n  <ng-container *ngIf=\"isResourceTypeArSystem$ | async\">\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <adapt-rx-textfield\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.data-source-connection-properties.host-name.label' | translate }}\"\n          name=\"hostName\"\n          formControlName=\"hostName\"\n          rx-id=\"host-name-field\"\n          class=\"d-block form-group\"\n          maxlength=\"254\"\n        >\n        </adapt-rx-textfield>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <adapt-rx-counter\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.data-source-connection-properties.port.label' | translate }}\"\n          name=\"port\"\n          adaptRange\n          [formControl]=\"connectionPropertiesForm.controls.port\"\n          [min]=\"0\"\n          [max]=\"65535\"\n          adaptIntegerNumber\n          rx-id=\"port-field\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-counter>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <adapt-rx-radiobutton-group\n          label=\"{{\n            'com.bmc.arsys.rx.client.admin.data-source-connection-properties.authentication.label' | translate\n          }}\"\n          name=\"authType\"\n          rx-id=\"authentication-field\"\n          formControlName=\"authType\"\n          (ngModelChange)=\"setAuthType($event)\"\n        >\n          <adapt-rx-radiobutton\n            *ngFor=\"let selectionValue of dataSourceAuthenticationTypes\"\n            [value]=\"selectionValue.name\"\n            [label]=\"selectionValue.name\"\n          >\n          </adapt-rx-radiobutton>\n        </adapt-rx-radiobutton-group>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <adapt-rx-textfield\n          formControlName=\"rasPassword\"\n          [isPassword]=\"true\"\n          name=\"password\"\n          rx-id=\"password-field\"\n          class=\"d-block form-group\"\n          [disabled]=\"isRasPasswordDisabled\"\n        >\n        </adapt-rx-textfield>\n      </div>\n      <div class=\"col-md-6\">\n        <adapt-rx-checkbox\n          name=\"permission\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.admin.data-source-connection-properties.use-current-user-permissions.label'\n              | translate\n          }}\"\n          rx-id=\"permission-field\"\n          formControlName=\"enforceAuthorization\"\n          [tooltip]=\"{\n            iconName: 'question_circle_o',\n            content: 'com.bmc.arsys.rx.client.admin.data-source-connection-properties.permission.tooltip' | translate,\n            placement: 'top',\n            popoverMode: true\n          }\"\n        >\n        </adapt-rx-checkbox>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-8 mt-2\">\n        <rx-connection-tester\n          buttonType=\"secondary\"\n          [status]=\"connectionTestStatus\"\n          (testConnection)=\"onTestConnection()\"\n          rx-id=\"test-connection-button\"\n        ></rx-connection-tester>\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"isResourceTypeCustom$ | async\">\n    <div class=\"row\">\n      <rx-custom-data-source-provider-picker\n        class=\"col-md-6\"\n        name=\"providerId\"\n        formControlName=\"providerId\"\n        rx-id=\"custom-data-source-provider-field\"\n        [options]=\"customDataSourceProvidersPickerOptions\"\n      ></rx-custom-data-source-provider-picker>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"isResourceTypeWebApi$ | async\">\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <adapt-rx-select\n          label=\"{{\n            'com.bmc.arsys.rx.client.admin.data-source-connection-properties.web-api-connection.label' | translate\n          }}\"\n          name=\"webApiConnection\"\n          class=\"d-block form-group\"\n          rx-id=\"web-api-connection-field\"\n          [options]=\"webApis\"\n          formControlName=\"selectedWebApi\"\n          (onSelectionChange)=\"onWebApiChange($event)\"\n          [optionFormatter]=\"optionFormatter\"\n        >\n        </adapt-rx-select>\n      </div>\n    </div>\n  </ng-container>\n</form>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield,adapt-rx-select,adapt-rx-counter{max-width:400px}\n"], components: [{ type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxRadiobuttonGroupComponent, selector: "adapt-rx-radiobutton-group", inputs: ["formControlName"] }, { type: i1__namespace$1.AdaptRxRadiobuttonComponent, selector: "adapt-rx-radiobutton", inputs: ["name", "label", "id", "value", "checked", "disabled", "ariaLabel", "ariaLabeledBy", "ariaDescribedBy", "testID", "tabIndex"], outputs: ["onFocus", "onBlur", "checkedChange"] }, { type: i1__namespace$1.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }, { type: i1__namespace.RxConnectionTesterComponent, selector: "rx-connection-tester", inputs: ["status", "buttonType"], outputs: ["testConnection"] }, { type: RxCustomDataSourceProviderPickerComponent, selector: "rx-custom-data-source-provider-picker", inputs: ["options"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i1__namespace$1.AdaptRangeValidatorDirective, selector: "[adaptRange][ngModel],[adaptRange][formControl]", inputs: ["adaptRange", "adaptRangeMessageFn"] }, { type: i1__namespace$1.AdaptIntegerNumberValidatorDirective, selector: "[adaptIntegerNumber][ngModel], [adaptIntegerNumber][formControl]", inputs: ["adaptIntegerNumberMessageFn"] }, { type: i1__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i8__namespace.AsyncPipe, "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DataSourceConnectionPropertiesComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-data-source-connection-properties',
                        templateUrl: './data-source-connection-properties.component.html',
                        styleUrls: ['./data-source-connection-properties.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: RxCognitiveServiceService }, { type: i3__namespace$2.RxRecordInstanceDataPageService }, { type: RxCustomDataSourceProviderDataPageService }, { type: i2__namespace.RxDefinitionNameService }, { type: i4__namespace$1.RxWizardModalComponent }, { type: i4__namespace.TranslateService }, { type: i2__namespace.RxGlobalCacheService }]; } });

    var RxDataSourceConnectionsService = /** @class */ (function () {
        function RxDataSourceConnectionsService(httpClient) {
            this.httpClient = httpClient;
        }
        RxDataSourceConnectionsService.prototype.getDataSourceConnection = function (connectionId) {
            return this.httpClient.get(RX_DATA_SOURCE_CONNECTIONS.dataSourceConnectionUrl + "/" + connectionId);
        };
        RxDataSourceConnectionsService.prototype.createDataSourceConnection = function (dataSourceConnection) {
            return this.httpClient.post(RX_DATA_SOURCE_CONNECTIONS.dataSourceConnectionUrl, dataSourceConnection);
        };
        RxDataSourceConnectionsService.prototype.updateDataSourceConnection = function (connectionId, dataSourceConnection) {
            return this.httpClient.put(RX_DATA_SOURCE_CONNECTIONS.dataSourceConnectionUrl + "/" + connectionId, dataSourceConnection);
        };
        RxDataSourceConnectionsService.prototype.deleteDataSourceConnections = function (recordInstanceIds) {
            var _this = this;
            return rxjs.forkJoin(lodash.map(recordInstanceIds, function (id) { return _this.httpClient.delete(RX_DATA_SOURCE_CONNECTIONS.dataSourceConnectionUrl + "/" + id); }));
        };
        return RxDataSourceConnectionsService;
    }());
    RxDataSourceConnectionsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxDataSourceConnectionsService, deps: [{ token: i1__namespace$2.HttpClient }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxDataSourceConnectionsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxDataSourceConnectionsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxDataSourceConnectionsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }]; } });

    var DataSourceConnectionsAdminComponent = /** @class */ (function () {
        function DataSourceConnectionsAdminComponent(rxModalService, rxDataPageService, rxDataSourceConnectionsService, rxNotificationService, adaptModalService, componentFactoryResolver, rxWizardService, translateService) {
            var _this = this;
            this.rxModalService = rxModalService;
            this.rxDataPageService = rxDataPageService;
            this.rxDataSourceConnectionsService = rxDataSourceConnectionsService;
            this.rxNotificationService = rxNotificationService;
            this.adaptModalService = adaptModalService;
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxWizardService = rxWizardService;
            this.translateService = translateService;
            this.getData = function (queryParams) {
                delete queryParams.searchText;
                delete queryParams.shouldIncludeTotalSize;
                return _this.resource.get({ params: queryParams });
            };
            this.resource = this.rxDataPageService.withType(RX_DATA_SOURCE_CONNECTIONS.dataPageQueryType);
        }
        DataSourceConnectionsAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            RX_DATA_SOURCE_CONNECTIONS.resourceTypes = Object.entries(RX_DATA_SOURCE_CONNECTIONS.resourceTypes).reduce(function (resourceTypesWithTranslatedName, _a) {
                var _b;
                var _c = __read(_a, 2), key = _c[0], resourceType = _c[1];
                return (Object.assign(Object.assign({}, resourceTypesWithTranslatedName), (_b = {}, _b[key] = {
                    value: resourceType.value,
                    name: _this.translateService.instant(resourceType.name)
                }, _b)));
            }, {});
            RX_DATA_SOURCE_CONNECTIONS.authTypes = RX_DATA_SOURCE_CONNECTIONS.authTypes.map(function (authType) { return (Object.assign(Object.assign({}, authType), { name: _this.translateService.instant(authType.name) })); });
            RX_DATA_SOURCE_CONNECTIONS.initialWizardContext.resourceType = RX_DATA_SOURCE_CONNECTIONS.resourceTypes.arSystem;
            RX_DATA_SOURCE_CONNECTIONS.initialWizardContext.authType = RX_DATA_SOURCE_CONNECTIONS.authTypes[0].name;
            var gridColumns = [
                {
                    index: 0,
                    fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.id),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.id.label'),
                    visible: false
                },
                {
                    index: 1,
                    fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.description),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label'),
                    clickable: true,
                    actions: [
                        {
                            name: function (previousActionResult, lastActionRow) { return _this.editDataSourceConnection(lastActionRow); }
                        }
                    ]
                },
                {
                    index: 2,
                    fieldId: String(RX_CONNECTION_MAPPING.dataSource.fields.sourceType),
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.data-source-connections.source-type.title')
                }
            ];
            var recordDefinition = {
                fieldDefinitions: [
                    {
                        id: i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: i3.RX_RECORD_DEFINITION.coreFieldIds.description,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_CONNECTION_MAPPING.dataSource.fields.sourceType,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    }
                ]
            };
            var actionButtons = [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                    style: 'tertiary',
                    icon: 'trash',
                    actions: [
                        {
                            name: function () {
                                _this.rxModalService
                                    .confirm({
                                    title: _this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                                    modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                                    message: _this.translateService.instant('com.bmc.arsys.rx.client.admin.data-source-connections.delete-confirmation.message')
                                })
                                    .then(function (result) {
                                    if (result) {
                                        var selectedDataSourceConnections = _this.dataSourceConnectionsGrid.api.getSelectedRows();
                                        var selectedDataSourceConnectionsIds = lodash.map(selectedDataSourceConnections, i3.RX_RECORD_DEFINITION.coreFieldIds.id);
                                        _this.rxDataSourceConnectionsService
                                            .deleteDataSourceConnections(selectedDataSourceConnectionsIds)
                                            .subscribe(function () {
                                            _this.rxNotificationService.addSuccessMessage('Data source connection(s) deleted successfully.');
                                            _this.refreshDataSourceConnectionsGrid();
                                        });
                                    }
                                });
                            }
                        }
                    ]
                }
            ];
            this.recordGridConfig = rxjs.of({
                enableFiltering: true,
                columns: gridColumns,
                getRecordDefinition: function () { return rxjs.of(recordDefinition); },
                enableRowSelection: i7.RowSelectionMode.Multiple,
                recordDefinitionName: RX_DATA_SOURCE_CONNECTIONS.recordDefinitionName,
                actionButtons: actionButtons,
                getData: this.getData,
                styles: 'flex-fill'
            });
        };
        DataSourceConnectionsAdminComponent.prototype.getCellValue = function (dataItem, column) {
            return dataItem[column.field];
        };
        DataSourceConnectionsAdminComponent.prototype.createDataSourceConnection = function () {
            this.wizardTitle = this.translateService.instant('com.bmc.arsys.rx.client.admin.data-source-connections.new-data-source-connection.label');
            this.finishButtonLabel = 'Save';
            this.wizardConfigData = lodash.cloneDeep(RX_DATA_SOURCE_CONNECTIONS.initialWizardContext);
            this.openWizard();
        };
        DataSourceConnectionsAdminComponent.prototype.editDataSourceConnection = function (dataItem) {
            var _this = this;
            this.wizardTitle = this.translateService.instant('com.bmc.arsys.rx.client.admin.data-source-connections.edit-data-source-connection.label');
            this.finishButtonLabel = this.translateService.instant('com.bmc.arsys.rx.client.approval.update.button.label');
            this.selectedConnectionId = dataItem[i3.RX_RECORD_DEFINITION.coreFieldIds.id];
            this.rxDataSourceConnectionsService.getDataSourceConnection(this.selectedConnectionId).subscribe(function (result) {
                _this.wizardConfigData = {
                    dataSourceName: result.dataSourceName,
                    resourceType: Object.values(RX_DATA_SOURCE_CONNECTIONS.resourceTypes).find(function (resourceType) { return resourceType.value === result.resourceType; }),
                    hostName: result.hostName,
                    port: result.port,
                    authType: result.authType,
                    rasPassword: result.rasPassword,
                    enforceAuthorization: result.enforceAuthorization,
                    webApiDataSourceGuid: result.webApiDataSourceGuid,
                    isEditMode: true,
                    isGeneralFormPristine: true,
                    providerId: result.providerId
                };
                _this.openWizard();
            });
        };
        DataSourceConnectionsAdminComponent.prototype.refreshDataSourceConnectionsGrid = function () {
            this.dataSourceConnectionsGrid.api.refresh().subscribe();
        };
        DataSourceConnectionsAdminComponent.prototype.openWizard = function () {
            var _this = this;
            var dataSourceWizardConfig = {
                title: this.wizardTitle,
                allowFinish: true,
                finishButtonLabel: this.finishButtonLabel,
                steps: [
                    {
                        id: 'general',
                        name: this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),
                        componentFactory: this.componentFactoryResolver.resolveComponentFactory(DataSourceConnectionGeneralComponent)
                    },
                    {
                        id: 'connection-properties',
                        name: this.translateService.instant('com.bmc.arsys.rx.client.admin.data-source-connections.connection-properties.label'),
                        componentFactory: this.componentFactoryResolver.resolveComponentFactory(DataSourceConnectionPropertiesComponent)
                    }
                ]
            };
            this.rxWizardService
                .open({
                context: this.wizardConfigData,
                options: dataSourceWizardConfig
            })
                .then(function (result) {
                if (result) {
                    _this.save();
                }
            });
        };
        DataSourceConnectionsAdminComponent.prototype.save = function () {
            var _this = this;
            var dataSourceConnection = {
                dataSourceName: this.wizardConfigData.dataSourceName,
                resourceType: this.wizardConfigData.resourceType.value,
                hostName: this.wizardConfigData.hostName,
                port: this.wizardConfigData.port,
                rasPassword: this.wizardConfigData.rasPassword || null,
                authType: this.wizardConfigData.authType,
                enforceAuthorization: this.wizardConfigData.enforceAuthorization,
                providerId: this.wizardConfigData.providerId
            };
            if (this.wizardConfigData.resourceType.value === RX_DATA_SOURCE_CONNECTIONS.resourceTypes.webApi.value) {
                dataSourceConnection = lodash.pick(dataSourceConnection, ['dataSourceName', 'resourceType']);
                dataSourceConnection.webApiDataSourceGuid = this.wizardConfigData.webApiDataSourceGuid;
            }
            else if (this.wizardConfigData.resourceType.value === RX_DATA_SOURCE_CONNECTIONS.resourceTypes.custom.value) {
                dataSourceConnection = lodash.pick(dataSourceConnection, ['dataSourceName', 'resourceType', 'providerId']);
            }
            var writeEvent = this.wizardConfigData.isEditMode
                ? this.rxDataSourceConnectionsService.updateDataSourceConnection(this.selectedConnectionId, dataSourceConnection)
                : this.rxDataSourceConnectionsService.createDataSourceConnection(dataSourceConnection);
            writeEvent.subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.data-source-connections.edit-data-source-connection-saved.message'));
                _this.refreshDataSourceConnectionsGrid();
            });
        };
        return DataSourceConnectionsAdminComponent;
    }());
    DataSourceConnectionsAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DataSourceConnectionsAdminComponent, deps: [{ token: i1__namespace.RxModalService }, { token: i2__namespace.RxDataPageFactoryService }, { token: RxDataSourceConnectionsService }, { token: i2__namespace.RxNotificationService }, { token: i1__namespace$1.AdaptModalService }, { token: i0__namespace.ComponentFactoryResolver }, { token: i4__namespace$1.RxWizardService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DataSourceConnectionsAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DataSourceConnectionsAdminComponent, selector: "rx-admin-data-source-connections", viewQueries: [{ propertyName: "dataSourceConnectionsGrid", first: true, predicate: ["dataSourceConnectionsGrid"], descendants: true, static: true }], ngImport: i0__namespace, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.data-source-connections.header.title' | translate }}\">\n  <ng-container>\n    <button\n      adapt-button\n      type=\"button\"\n      btn-type=\"tertiary\"\n      class=\"d-icon-plus_circle align-self-start\"\n      rx-id=\"new-button\"\n      (click)=\"createDataSourceConnection()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n    </button>\n\n    <rx-record-grid #dataSourceConnectionsGrid [config]=\"recordGridConfig\"></rx-record-grid>\n  </ng-container>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DataSourceConnectionsAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-data-source-connections',
                        templateUrl: './data-source-connections.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.RxModalService }, { type: i2__namespace.RxDataPageFactoryService }, { type: RxDataSourceConnectionsService }, { type: i2__namespace.RxNotificationService }, { type: i1__namespace$1.AdaptModalService }, { type: i0__namespace.ComponentFactoryResolver }, { type: i4__namespace$1.RxWizardService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { dataSourceConnectionsGrid: [{
                    type: i0.ViewChild,
                    args: ['dataSourceConnectionsGrid', { static: true }]
                }] } });

    var DataSourceConnectionsRegistrationModule = /** @class */ (function () {
        function DataSourceConnectionsRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-data-source-connections',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(DataSourceConnectionsAdminComponent),
                name: 'Data source connections',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return DataSourceConnectionsRegistrationModule;
    }());
    DataSourceConnectionsRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DataSourceConnectionsRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DataSourceConnectionsRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DataSourceConnectionsRegistrationModule, declarations: [DataSourceConnectionsAdminComponent,
            DataSourceConnectionGeneralComponent,
            DataSourceConnectionPropertiesComponent,
            RxCustomDataSourceProviderPickerComponent], imports: [i1$2.AdaptButtonModule,
            i1$2.AdaptDropdownModule,
            i1$2.AdaptRxCheckboxModule,
            i1$2.AdaptRxCounterModule,
            i1$2.AdaptRxFormControlModule,
            i1$2.AdaptRxRadiobuttonModule,
            i1$2.AdaptRxSelectModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptRxValidatorsModule,
            i1$2.AdaptTreeModule,
            i4.AdminSettingsModule,
            i8.CommonModule,
            i1.FormsModule,
            i1.ReactiveFormsModule,
            i7.RecordGridModule,
            i1$1.RxConnectionTesterModule,
            i2.RxDefinitionModule,
            i4.RxWizardModule,
            i4$1.TranslateModule] });
    DataSourceConnectionsRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DataSourceConnectionsRegistrationModule, imports: [[
                i1$2.AdaptButtonModule,
                i1$2.AdaptDropdownModule,
                i1$2.AdaptRxCheckboxModule,
                i1$2.AdaptRxCounterModule,
                i1$2.AdaptRxFormControlModule,
                i1$2.AdaptRxRadiobuttonModule,
                i1$2.AdaptRxSelectModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptRxValidatorsModule,
                i1$2.AdaptTreeModule,
                i4.AdminSettingsModule,
                i8.CommonModule,
                i1.FormsModule,
                i1.ReactiveFormsModule,
                i7.RecordGridModule,
                i1$1.RxConnectionTesterModule,
                i2.RxDefinitionModule,
                i4.RxWizardModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DataSourceConnectionsRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            DataSourceConnectionsAdminComponent,
                            DataSourceConnectionGeneralComponent,
                            DataSourceConnectionPropertiesComponent,
                            RxCustomDataSourceProviderPickerComponent
                        ],
                        imports: [
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptDropdownModule,
                            i1$2.AdaptRxCheckboxModule,
                            i1$2.AdaptRxCounterModule,
                            i1$2.AdaptRxFormControlModule,
                            i1$2.AdaptRxRadiobuttonModule,
                            i1$2.AdaptRxSelectModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptRxValidatorsModule,
                            i1$2.AdaptTreeModule,
                            i4.AdminSettingsModule,
                            i8.CommonModule,
                            i1.FormsModule,
                            i1.ReactiveFormsModule,
                            i7.RecordGridModule,
                            i1$1.RxConnectionTesterModule,
                            i2.RxDefinitionModule,
                            i4.RxWizardModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [
                            DataSourceConnectionsAdminComponent,
                            DataSourceConnectionGeneralComponent,
                            DataSourceConnectionPropertiesComponent
                        ]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var aliasTypeFieldId = 56150;
    var aliasTypeDefaultValue = 'email';
    var incomingMailboxType = 0;
    var outgoingMailboxType = 1;
    var RX_EMAIL_PROFILES = {
        aliasMapping: {
            recordDefinitionName: 'Alias Mapping',
            queryExpression: "'" + aliasTypeFieldId + "' = \"" + aliasTypeDefaultValue + "\"",
            fieldIds: {
                aliasType: {
                    id: aliasTypeFieldId,
                    defaultValue: aliasTypeDefaultValue
                },
                applicationId: 56151,
                applicationName: 56152,
                aliasName: 56153,
                aliasValue: 56154,
                description: i3.RX_RECORD_DEFINITION.coreFieldIds.description,
                assignee: i3.RX_RECORD_DEFINITION.coreFieldIds.assignee,
                status: i3.RX_RECORD_DEFINITION.coreFieldIds.status
            },
            mailboxType: {
                outgoing: 0,
                incoming: 1
            },
            status: {
                new: 0,
                assigned: 1
            }
        },
        mailbox: {
            recordDefinitionName: 'AR System Email Mailbox Configuration',
            queryExpression: "'" + i3.RX_RECORD_DEFINITION.coreFieldIds.status + "' = \"0\"",
            fieldIds: {
                mailboxName: {
                    id: 18037,
                    label: 'Mailbox name'
                },
                mailboxFunction: 18049
            },
            mailboxFunctions: {
                incoming: {
                    id: incomingMailboxType,
                    label: 'com.bmc.arsys.rx.client.admin.email-profiles.incoming-mailbox.label',
                    value: String(incomingMailboxType)
                },
                outgoing: {
                    id: outgoingMailboxType,
                    label: 'com.bmc.arsys.rx.client.admin.email-profiles.outgoing-mailbox.label',
                    value: String(outgoingMailboxType)
                }
            }
        }
    };

    var CreateEmailProfileComponent = /** @class */ (function (_super) {
        __extends(CreateEmailProfileComponent, _super);
        function CreateEmailProfileComponent(formBuilder, rxGlobalCacheService, rxRecordInstanceDataPageService, dockedPanelContext, injector) {
            var _this = _super.call(this, dockedPanelContext, injector) || this;
            _this.formBuilder = formBuilder;
            _this.rxGlobalCacheService = rxGlobalCacheService;
            _this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            _this.dockedPanelContext = dockedPanelContext;
            _this.injector = injector;
            _this.mailboxFunctions = RX_EMAIL_PROFILES.mailbox.mailboxFunctions;
            _this.bundleOptions = [];
            _this.mailboxOptions = [];
            _this.availableMailboxOptions = [];
            _this.validDefinitionNameRegex = i3.RX_RECORD_DEFINITION.validDefinitionNameRegex;
            _this.subscription = new rxjs.Subscription();
            return _this;
        }
        CreateEmailProfileComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.emailProfile = this.dockedPanelContext.getData().profile;
            this.createEmailProfileFormGroup = this.formBuilder.group({
                profileName: '',
                mailboxFunction: this.mailboxFunctions.incoming.value,
                mailbox: [],
                application: []
            });
            rxjs.forkJoin({
                bundleDescriptors: this.rxGlobalCacheService.getBundleDescriptors(),
                mailboxes: this.rxRecordInstanceDataPageService.post({
                    params: {
                        recorddefinition: RX_EMAIL_PROFILES.mailbox.recordDefinitionName,
                        queryExpression: RX_EMAIL_PROFILES.mailbox.queryExpression
                    }
                })
            }).subscribe(function (result) {
                _this.bundleOptions = lodash.reject(result.bundleDescriptors, function (bundleDescriptor) {
                    return lodash.includes([i2.RX_APPLICATION.innovationStudioBundleId, i2.RX_APPLICATION.platformBundleId], bundleDescriptor.id);
                }).sort(function (a, b) { return a.friendlyName.localeCompare(b.friendlyName); });
                _this.availableMailboxOptions = result.mailboxes.data;
                if (_this.emailProfile) {
                    _this.createEmailProfileFormGroup.controls.mailboxFunction.disable();
                    _this.loadEmailProfileData();
                }
                else {
                    _this.filterMailboxes(_this.mailboxFunctions.incoming.value);
                }
                _this.subscription = _this.createEmailProfileFormGroup
                    .get('mailboxFunction')
                    .valueChanges.subscribe(function (mailboxFunctionName) {
                    _this.createEmailProfileFormGroup.controls.mailbox.setValue([]);
                    _this.filterMailboxes(mailboxFunctionName);
                });
            });
        };
        CreateEmailProfileComponent.prototype.isDirty = function () {
            return this.createEmailProfileFormGroup.dirty;
        };
        CreateEmailProfileComponent.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        CreateEmailProfileComponent.prototype.filterMailboxes = function (mailBoxFunctionName) {
            this.mailboxOptions = lodash.filter(this.availableMailboxOptions, function (mailbox) {
                return mailbox[RX_EMAIL_PROFILES.mailbox.fieldIds.mailboxFunction] === parseInt(mailBoxFunctionName, 10);
            });
        };
        CreateEmailProfileComponent.prototype.loadEmailProfileData = function () {
            var _this = this;
            var selectedMailboxType = '';
            if (this.emailProfile.mailboxType === RX_EMAIL_PROFILES.mailbox.mailboxFunctions.incoming.id) {
                selectedMailboxType = this.mailboxFunctions.incoming.value;
            }
            else if (this.emailProfile.mailboxType === RX_EMAIL_PROFILES.mailbox.mailboxFunctions.outgoing.id) {
                selectedMailboxType = this.mailboxFunctions.outgoing.value;
            }
            this.filterMailboxes(selectedMailboxType);
            var selectedApplication = this.bundleOptions.find(function (bundle) { return bundle.id === _this.emailProfile.application; });
            var selectedMailbox = this.availableMailboxOptions.find(function (mailbox) { return mailbox[i3.RX_RECORD_DEFINITION.coreFieldIds.id] === _this.emailProfile.mailbox; });
            this.createEmailProfileFormGroup.patchValue({
                profileName: this.emailProfile.profileName,
                mailboxFunction: selectedMailboxType,
                mailbox: selectedMailbox ? [selectedMailbox] : [],
                application: selectedApplication ? [selectedApplication] : []
            });
        };
        CreateEmailProfileComponent.prototype.bundleNameFormatter = function (bundleOption) {
            return bundleOption.friendlyName;
        };
        CreateEmailProfileComponent.prototype.mailboxNameFormatter = function (mailboxOption) {
            return mailboxOption[RX_EMAIL_PROFILES.mailbox.fieldIds.mailboxName.id];
        };
        CreateEmailProfileComponent.prototype.save = function () {
            this.dockedPanelContext.close(this.createEmailProfileFormGroup.getRawValue());
        };
        CreateEmailProfileComponent.prototype.cancel = function () {
            this.dockedPanelContext.dismiss(i1$2.DismissReasons.CLOSE_BTN);
        };
        return CreateEmailProfileComponent;
    }(i1$1.RxModalClass));
    CreateEmailProfileComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CreateEmailProfileComponent, deps: [{ token: i1__namespace$3.FormBuilder }, { token: i2__namespace.RxGlobalCacheService }, { token: i3__namespace$2.RxRecordInstanceDataPageService }, { token: i1__namespace$1.DockedPanelContext }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CreateEmailProfileComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: CreateEmailProfileComponent, selector: "rx-create-email-profile", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"dp-body\">\n  <form [formGroup]=\"createEmailProfileFormGroup\">\n    <adapt-rx-textfield\n      class=\"d-block form-group\"\n      rx-id=\"profile-name\"\n      formControlName=\"profileName\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.create-email-profile.profile-name.label' | translate }}\"\n      required\n      maxlength=\"254\"\n      [pattern]=\"validDefinitionNameRegex\"\n    ></adapt-rx-textfield>\n\n    <adapt-rx-radiobutton-group\n      class=\"d-block form-group\"\n      rx-id=\"mailbox-function\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.create-email-profile.mailbox-function.label' | translate }}\"\n      required\n      [formControl]=\"createEmailProfileFormGroup.controls.mailboxFunction\"\n    >\n      <adapt-rx-radiobutton\n        class=\"mb-0 mt-0 radio-inline\"\n        *ngFor=\"let mailboxFunction of mailboxFunctions | keyvalue\"\n        [value]=\"mailboxFunction.value.value\"\n        [label]=\"mailboxFunction.value.label | translate\"\n      ></adapt-rx-radiobutton>\n    </adapt-rx-radiobutton-group>\n\n    <adapt-rx-select\n      class=\"d-block form-group\"\n      formControlName=\"mailbox\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.create-email-profile.mailbox.label' | translate }}\"\n      rx-id=\"mailbox\"\n      required\n      [options]=\"mailboxOptions\"\n      [optionFormatter]=\"mailboxNameFormatter\"\n    ></adapt-rx-select>\n\n    <adapt-rx-select\n      class=\"d-block form-group\"\n      emptyOption=\"true\"\n      formControlName=\"application\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.create-email-profile.application.label' | translate }}\"\n      rx-id=\"application\"\n      [options]=\"bundleOptions\"\n      [optionFormatter]=\"bundleNameFormatter\"\n    ></adapt-rx-select>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    class=\"mr-2\"\n    rx-id=\"save-button\"\n    [disabled]=\"createEmailProfileFormGroup.invalid || createEmailProfileFormGroup.pristine\"\n    (click)=\"save()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button type=\"button\" btn-type=\"secondary\" rx-id=\"close-button\" class=\"mr-2\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxRadiobuttonGroupComponent, selector: "adapt-rx-radiobutton-group", inputs: ["formControlName"] }, { type: i1__namespace$1.AdaptRxRadiobuttonComponent, selector: "adapt-rx-radiobutton", inputs: ["name", "label", "id", "value", "checked", "disabled", "ariaLabel", "ariaLabeledBy", "ariaDescribedBy", "testID", "tabIndex"], outputs: ["onFocus", "onBlur", "checkedChange"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i1__namespace$3.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { type: i1__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4__namespace.TranslatePipe, "keyvalue": i8__namespace.KeyValuePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: CreateEmailProfileComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-create-email-profile',
                        templateUrl: './create-email-profile.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }, { type: i2__namespace.RxGlobalCacheService }, { type: i3__namespace$2.RxRecordInstanceDataPageService }, { type: i1__namespace$1.DockedPanelContext }, { type: i0__namespace.Injector }]; } });

    var RxEmailProfilesService = /** @class */ (function () {
        function RxEmailProfilesService(rxRecordInstanceService) {
            this.rxRecordInstanceService = rxRecordInstanceService;
        }
        RxEmailProfilesService.prototype.deleteEmailProfiles = function (recordDefinitionName, recordInstanceIds) {
            var _this = this;
            return rxjs.forkJoin(lodash.map(recordInstanceIds, function (id) {
                return _this.rxRecordInstanceService.delete(recordDefinitionName, id);
            }));
        };
        return RxEmailProfilesService;
    }());
    RxEmailProfilesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxEmailProfilesService, deps: [{ token: i3__namespace$2.RxRecordInstanceService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxEmailProfilesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxEmailProfilesService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxEmailProfilesService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace$2.RxRecordInstanceService }]; } });

    var EmailProfilesAdminComponent = /** @class */ (function () {
        function EmailProfilesAdminComponent(rxRecordInstanceDataPageService, rxRecordInstanceService, rxNotificationService, rxModalService, rxEmailProfilesService, translateService) {
            var _this = this;
            this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            this.rxRecordInstanceService = rxRecordInstanceService;
            this.rxNotificationService = rxNotificationService;
            this.rxModalService = rxModalService;
            this.rxEmailProfilesService = rxEmailProfilesService;
            this.translateService = translateService;
            this.getData = function (queryParams) {
                delete queryParams.searchText;
                delete queryParams.shouldIncludeTotalSize;
                queryParams.recorddefinition = RX_EMAIL_PROFILES.aliasMapping.recordDefinitionName;
                queryParams.propertySelection.push("" + i3.RX_RECORD_DEFINITION.coreFieldIds.status, "" + RX_EMAIL_PROFILES.aliasMapping.fieldIds.applicationId);
                if (!queryParams.queryExpression) {
                    queryParams.queryExpression = RX_EMAIL_PROFILES.aliasMapping.queryExpression;
                }
                else {
                    queryParams.queryExpression += "AND " + RX_EMAIL_PROFILES.aliasMapping.queryExpression;
                }
                return _this.rxRecordInstanceDataPageService.post({ params: queryParams }).pipe(operators.switchMap(function (aliasMappings) {
                    if (aliasMappings.totalSize === 0) {
                        return rxjs.of(aliasMappings);
                    }
                    else {
                        var expression_1 = '';
                        aliasMappings.data.forEach(function (aliasMapping) {
                            if (aliasMapping[RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasValue] !== null) {
                                if (!lodash.isEmpty(expression_1)) {
                                    expression_1 += ' OR ';
                                }
                                expression_1 += "'" + i3.RX_RECORD_DEFINITION.coreFieldIds.id + "' = \"" + aliasMapping[RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasValue] + "\"";
                            }
                        });
                        var query = {
                            queryExpression: RX_EMAIL_PROFILES.mailbox.queryExpression,
                            recorddefinition: RX_EMAIL_PROFILES.mailbox.recordDefinitionName
                        };
                        if (!lodash.isEmpty(expression_1)) {
                            query.queryExpression += " AND ((" + expression_1 + "))";
                        }
                        return _this.rxRecordInstanceDataPageService.post({ params: query }).pipe(operators.map(function (outgoingMailboxes) {
                            if (outgoingMailboxes.totalSize === 0) {
                                return aliasMappings;
                            }
                            else {
                                outgoingMailboxes.data.forEach(function (outgoingMailbox) {
                                    aliasMappings.data = lodash.transform(aliasMappings.data, function (result, value) {
                                        if (value[RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasValue] ===
                                            outgoingMailbox[i3.RX_RECORD_DEFINITION.coreFieldIds.id]) {
                                            value[RX_EMAIL_PROFILES.aliasMapping.fieldIds.description] =
                                                outgoingMailbox[RX_EMAIL_PROFILES.mailbox.fieldIds.mailboxName.id];
                                            value[RX_EMAIL_PROFILES.aliasMapping.fieldIds.assignee] =
                                                outgoingMailbox[RX_EMAIL_PROFILES.mailbox.fieldIds.mailboxFunction];
                                        }
                                        result.push(value);
                                    }, []);
                                });
                                return aliasMappings;
                            }
                        }));
                    }
                }));
            };
        }
        EmailProfilesAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            var gridColumns = [
                {
                    fieldId: "" + i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                    index: 0,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.id.label'),
                    visible: false
                },
                {
                    fieldId: "" + RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasName,
                    index: 1,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.create-email-profile.profile-name.label'),
                    clickable: true,
                    actions: [
                        {
                            name: function (previousActionResult, selectedRow) {
                                _this.currentRecordInstance = _this.rxRecordInstanceService.get(RX_EMAIL_PROFILES.aliasMapping.recordDefinitionName, selectedRow[i3.RX_RECORD_DEFINITION.coreFieldIds.id]);
                                var profileData = {
                                    profileName: selectedRow[RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasName],
                                    mailbox: selectedRow[RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasValue],
                                    application: selectedRow[RX_EMAIL_PROFILES.aliasMapping.fieldIds.applicationId],
                                    mailboxType: (function () {
                                        var assignee = lodash.parseInt(selectedRow[RX_EMAIL_PROFILES.aliasMapping.fieldIds.assignee], 10);
                                        return lodash.map(RX_EMAIL_PROFILES.mailbox.mailboxFunctions, function (mailboxFunction) { return mailboxFunction.id; }).includes(assignee)
                                            ? assignee
                                            : null;
                                    })()
                                };
                                _this.createEmailProfile(profileData);
                            }
                        }
                    ]
                },
                {
                    fieldId: "" + RX_EMAIL_PROFILES.aliasMapping.fieldIds.description,
                    index: 2,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.create-email-profile.mailbox.label'),
                    sortable: false,
                    filterable: false
                },
                {
                    fieldId: "" + RX_EMAIL_PROFILES.aliasMapping.fieldIds.assignee,
                    index: 3,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.create-email-profile.mailbox-function.label'),
                    sortable: false,
                    filterable: false,
                    cellTemplate: this.mailboxFunctionCellTemplate
                },
                {
                    fieldId: "" + RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasValue,
                    index: 4,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.email-profiles.outgoing-mailbox-id.label'),
                    visible: false
                },
                {
                    fieldId: "" + RX_EMAIL_PROFILES.aliasMapping.fieldIds.applicationName,
                    index: 5,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.create-email-profile.application.label')
                }
            ];
            var recordDefinition = {
                fieldDefinitions: [
                    {
                        id: i3.RX_RECORD_DEFINITION.coreFieldIds.description,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_EMAIL_PROFILES.aliasMapping.fieldIds.assignee,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasName,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_EMAIL_PROFILES.aliasMapping.fieldIds.applicationName,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasValue,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    }
                ]
            };
            var actionButtons = [
                {
                    label: 'Delete',
                    style: 'tertiary',
                    icon: 'trash',
                    actions: [
                        {
                            name: function () {
                                _this.rxModalService
                                    .confirm({
                                    title: _this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                                    modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                                    message: _this.translateService.instant('com.bmc.arsys.rx.client.admin.email-profiles.delete-confirmation.message')
                                })
                                    .then(function (response) {
                                    if (response) {
                                        var selectedEmailProfiles = _this.emailProfilesGrid.api.getSelectedRows();
                                        var selectedEmailProfileIds = lodash.map(selectedEmailProfiles, i3.RX_RECORD_DEFINITION.coreFieldIds.id);
                                        _this.rxEmailProfilesService
                                            .deleteEmailProfiles(RX_EMAIL_PROFILES.aliasMapping.recordDefinitionName, selectedEmailProfileIds)
                                            .subscribe(function () {
                                            _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.email-profiles.deleted-email-profile.message'));
                                            _this.refreshEmailProfilesGrid();
                                        });
                                    }
                                });
                            }
                        }
                    ]
                }
            ];
            this.emailProfilesGridConfig$ = rxjs.of({
                enableFiltering: true,
                columns: gridColumns,
                getRecordDefinition: function () { return rxjs.of(recordDefinition); },
                actionButtons: actionButtons,
                getData: this.getData,
                styles: 'flex-fill'
            });
        };
        EmailProfilesAdminComponent.prototype.createEmailProfile = function (profile) {
            var _this = this;
            this.rxModalService
                .openDockedPanel({
                title: profile
                    ? this.translateService.instant('com.bmc.arsys.rx.client.admin.email-profiles.update-email-profile.message')
                    : this.translateService.instant('com.bmc.arsys.rx.client.admin.email-profiles.add-new-email-profile.message'),
                content: CreateEmailProfileComponent,
                size: 'lg',
                data: {
                    profile: profile
                }
            })
                .then(function (emailProfile) {
                if (!profile) {
                    _this.currentRecordInstance = _this.rxRecordInstanceService.getNew(RX_EMAIL_PROFILES.aliasMapping.recordDefinitionName);
                }
                return _this.currentRecordInstance
                    .pipe(operators.map(function (recordInstance) {
                    recordInstance.setFieldValue(RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasType.id, _this.translateService.instant(RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasType.defaultValue));
                    recordInstance.setFieldValue(RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasName, emailProfile.profileName);
                    recordInstance.setFieldValue(RX_EMAIL_PROFILES.aliasMapping.fieldIds.applicationId, lodash.get(emailProfile, 'application[0].id', 'None'));
                    recordInstance.setFieldValue(RX_EMAIL_PROFILES.aliasMapping.fieldIds.applicationName, lodash.get(emailProfile, 'application[0].name', 'None'));
                    recordInstance.setFieldValue(RX_EMAIL_PROFILES.aliasMapping.fieldIds.aliasValue, emailProfile.mailbox[0][i3.RX_RECORD_DEFINITION.coreFieldIds.id]);
                    recordInstance.setFieldValue(RX_EMAIL_PROFILES.aliasMapping.fieldIds.description, 'Email profile');
                    recordInstance.setFieldValue(RX_EMAIL_PROFILES.aliasMapping.fieldIds.status, lodash.parseInt(emailProfile.mailboxFunction, 10) === RX_EMAIL_PROFILES.mailbox.mailboxFunctions.outgoing.id
                        ? RX_EMAIL_PROFILES.aliasMapping.status.new
                        : RX_EMAIL_PROFILES.aliasMapping.status.assigned);
                    return recordInstance;
                }), operators.switchMap(function (recordInstance) {
                    if (profile) {
                        return _this.rxRecordInstanceService.save(recordInstance);
                    }
                    else {
                        return _this.rxRecordInstanceService.create(recordInstance);
                    }
                }))
                    .subscribe(function () {
                    _this.refreshEmailProfilesGrid();
                    _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.email-profiles.saved-email-profile.message'));
                });
            })
                .catch(lodash.noop);
        };
        EmailProfilesAdminComponent.prototype.refreshEmailProfilesGrid = function () {
            this.emailProfilesGrid.api.refresh().subscribe();
        };
        EmailProfilesAdminComponent.prototype.getMailboxFunctionType = function (dataItem) {
            var mailbox = lodash.find(RX_EMAIL_PROFILES.mailbox.mailboxFunctions, function (mailboxFunction) { return mailboxFunction.id === dataItem[RX_EMAIL_PROFILES.aliasMapping.fieldIds.assignee]; });
            return mailbox ? this.translateService.instant(mailbox.label) : 'None';
        };
        return EmailProfilesAdminComponent;
    }());
    EmailProfilesAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: EmailProfilesAdminComponent, deps: [{ token: i3__namespace$2.RxRecordInstanceDataPageService }, { token: i3__namespace$2.RxRecordInstanceService }, { token: i2__namespace.RxNotificationService }, { token: i1__namespace.RxModalService }, { token: RxEmailProfilesService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    EmailProfilesAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: EmailProfilesAdminComponent, selector: "rx-admin-email-profiles", viewQueries: [{ propertyName: "emailProfilesGrid", first: true, predicate: ["emailProfilesGrid"], descendants: true }, { propertyName: "mailboxFunctionCellTemplate", first: true, predicate: ["mailboxFunctionCellTemplate"], descendants: true, static: true }], ngImport: i0__namespace, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.email-profiles.header.title' | translate }}\">\n  <div>\n    <button\n      adapt-button\n      type=\"button\"\n      btn-type=\"tertiary\"\n      class=\"d-icon-left-plus_circle\"\n      rx-id=\"new-email-profile-button\"\n      (click)=\"createEmailProfile()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n    </button>\n  </div>\n  <rx-record-grid rx-id=\"email-profile-grid\" #emailProfilesGrid [config]=\"emailProfilesGridConfig$\"></rx-record-grid>\n</rx-admin-settings>\n\n<ng-template #mailboxFunctionCellTemplate let-dataItem=\"dataItem\">\n  <div>\n    {{ getMailboxFunctionType(dataItem) }}\n  </div>\n</ng-template>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: EmailProfilesAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-email-profiles',
                        templateUrl: './email-profiles.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace$2.RxRecordInstanceDataPageService }, { type: i3__namespace$2.RxRecordInstanceService }, { type: i2__namespace.RxNotificationService }, { type: i1__namespace.RxModalService }, { type: RxEmailProfilesService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { emailProfilesGrid: [{
                    type: i0.ViewChild,
                    args: ['emailProfilesGrid']
                }], mailboxFunctionCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['mailboxFunctionCellTemplate', { static: true }]
                }] } });

    var EmailProfilesRegistrationModule = /** @class */ (function () {
        function EmailProfilesRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-email-profiles',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(EmailProfilesAdminComponent),
                name: 'Email profiles',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return EmailProfilesRegistrationModule;
    }());
    EmailProfilesRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: EmailProfilesRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    EmailProfilesRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: EmailProfilesRegistrationModule, declarations: [EmailProfilesAdminComponent, CreateEmailProfileComponent], imports: [i4.AdminSettingsModule,
            i8.CommonModule,
            i7.RecordGridModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptRxRadiobuttonModule,
            i1$2.AdaptRxSelectModule,
            i1.FormsModule,
            i1.ReactiveFormsModule,
            i1$2.AdaptButtonModule,
            i4$1.TranslateModule] });
    EmailProfilesRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: EmailProfilesRegistrationModule, imports: [[
                i4.AdminSettingsModule,
                i8.CommonModule,
                i7.RecordGridModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptRxRadiobuttonModule,
                i1$2.AdaptRxSelectModule,
                i1.FormsModule,
                i1.ReactiveFormsModule,
                i1$2.AdaptButtonModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: EmailProfilesRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [EmailProfilesAdminComponent, CreateEmailProfileComponent],
                        imports: [
                            i4.AdminSettingsModule,
                            i8.CommonModule,
                            i7.RecordGridModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptRxRadiobuttonModule,
                            i1$2.AdaptRxSelectModule,
                            i1.FormsModule,
                            i1.ReactiveFormsModule,
                            i1$2.AdaptButtonModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [EmailProfilesAdminComponent, CreateEmailProfileComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RxFuntionalRoleService = /** @class */ (function () {
        function RxFuntionalRoleService(httpClient) {
            this.httpClient = httpClient;
            this.path = '/api/rx/application/functionalrole';
        }
        RxFuntionalRoleService.prototype.getUrl = function (functionalRoleDescriptor) {
            return this.path + "/" + encodeURIComponent(functionalRoleDescriptor.applicationName) + "/" + encodeURIComponent(functionalRoleDescriptor.name);
        };
        RxFuntionalRoleService.prototype.get = function (functionalRoleDescriptor) {
            return this.httpClient.get(this.getUrl(functionalRoleDescriptor));
        };
        RxFuntionalRoleService.prototype.deleteFunctionalRole = function (functionalRoleDescriptor) {
            return this.httpClient.delete(this.getUrl(functionalRoleDescriptor));
        };
        RxFuntionalRoleService.prototype.delete = function (roles) {
            var _this = this;
            var deleteObservables = roles.map(function (role) { return _this.deleteFunctionalRole(role); });
            return rxjs.forkJoin(deleteObservables);
        };
        RxFuntionalRoleService.prototype.create = function (functionalRole) {
            return this.httpClient.post(this.path, functionalRole);
        };
        RxFuntionalRoleService.prototype.save = function (functionalRole, roleName) {
            return this.httpClient.put(this.getUrl({ applicationName: functionalRole.applicationName, name: roleName }), functionalRole);
        };
        return RxFuntionalRoleService;
    }());
    RxFuntionalRoleService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxFuntionalRoleService, deps: [{ token: i1__namespace$2.HttpClient }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxFuntionalRoleService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxFuntionalRoleService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxFuntionalRoleService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }]; } });

    var FunctionalRoleEditorComponent = /** @class */ (function (_super) {
        __extends(FunctionalRoleEditorComponent, _super);
        function FunctionalRoleEditorComponent(rxGlobalCacheService, activeModalRef, rxRoleDataPage, rxFuntionalRoleService, rxNotificationService, translateService, injector) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.rxGlobalCacheService = rxGlobalCacheService;
            _this.activeModalRef = activeModalRef;
            _this.rxRoleDataPage = rxRoleDataPage;
            _this.rxFuntionalRoleService = rxFuntionalRoleService;
            _this.rxNotificationService = rxNotificationService;
            _this.translateService = translateService;
            _this.injector = injector;
            _this.availableRoles = [];
            _this.isEditMode = false;
            _this.isSaveButtonDisabled = true;
            _this.selectedRolesList = [];
            _this.destroyed$ = new rxjs.ReplaySubject(1);
            _this.treeWrap = i1$2.TreeWrap.WrapAll;
            _this.validatorFn = _this.functionalRoleNameValidator.bind(_this);
            return _this;
        }
        Object.defineProperty(FunctionalRoleEditorComponent.prototype, "selectedRoles", {
            get: function () {
                return this.selectedRolesList;
            },
            set: function (roles) {
                this.selectedRolesList = roles;
                this.isSaveButtonDisabled = !this.functionalRoleEditorForm.valid;
            },
            enumerable: false,
            configurable: true
        });
        FunctionalRoleEditorComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            var roleQueryParams = {
                propertySelection: ['applicationName', 'roleName'].join(','),
                includeSmartAppRolesOnly: true
            };
            var excludedBundles = [
                i2.RX_APPLICATION.innovationStudioBundleId,
                i2.RX_APPLICATION.standardlib,
                i2.RX_APPLICATION.settingsBundleId,
                i2.RX_APPLICATION.platformBundleId
            ];
            var startIndex = 0;
            var pageSize = -1;
            this.functionalRole = this.activeModalRef.getData().functionalRole;
            this.isEditMode = Boolean(this.functionalRole.id);
            this.busy = rxjs.forkJoin([
                this.rxRoleDataPage.get({
                    params: Object.assign({ startIndex: startIndex, pageSize: pageSize }, roleQueryParams)
                }),
                this.rxGlobalCacheService.getBundleDescriptors()
            ]).subscribe(function (_a) {
                var _b = __read(_a, 2), roleDataPage = _b[0], bundleDescriptors = _b[1];
                _this.applicationOptions = bundleDescriptors
                    .filter(function (bundleDescriptor) { return !excludedBundles.includes(bundleDescriptor.id); })
                    .sort(function (bundleDescriptor, bundleDescriptorToCompare) { return bundleDescriptor.friendlyName.localeCompare(bundleDescriptorToCompare.friendlyName); })
                    .map(function (bundleDescriptor) { return ({
                    displayValue: bundleDescriptor.friendlyName,
                    value: bundleDescriptor.id
                }); });
                if (!_this.isEditMode) {
                    _this.selectedApplication = [_this.applicationOptions[0]];
                }
                else {
                    var selectedApplication = lodash.find(_this.applicationOptions, { value: _this.functionalRole.applicationName });
                    if (!selectedApplication) {
                        selectedApplication = {
                            displayValue: _this.functionalRole.applicationName,
                            value: _this.functionalRole.applicationName
                        };
                        _this.applicationOptions.push(selectedApplication);
                    }
                    _this.selectedApplication = [selectedApplication];
                    _this.oldRoleName = _this.functionalRole.name;
                }
                _this.availableRoles = lodash.chain(roleDataPage.data)
                    .groupBy('applicationName')
                    .map(function (roles, application) { return ({
                    children: _this.getChildren(roles),
                    leaf: false,
                    label: lodash.find(bundleDescriptors, { id: application }).friendlyName,
                    key: application,
                    data: { name: '', applicationName: application }
                }); })
                    .value();
                if (_this.isEditMode) {
                    _this.updateParentNodesForSelectedRoles();
                }
            });
            this.functionalRoleEditorForm.statusChanges
                .pipe(operators.distinctUntilChanged(), operators.takeUntil(this.destroyed$))
                .subscribe(function (value) {
                _this.isSaveButtonDisabled = !_this.functionalRoleEditorForm.valid || _this.functionalRoleEditorForm.pristine;
            });
            this.functionalRoleEditorForm.valueChanges
                .pipe(operators.distinctUntilChanged(), operators.takeUntil(this.destroyed$))
                .subscribe(function (value) {
                _this.isSaveButtonDisabled = !_this.functionalRoleEditorForm.valid || _this.functionalRoleEditorForm.pristine;
            });
        };
        FunctionalRoleEditorComponent.prototype.isDirty = function () {
            return this.functionalRoleEditorForm.dirty;
        };
        FunctionalRoleEditorComponent.prototype.getChildren = function (rolesForApplication) {
            var _this = this;
            return rolesForApplication.map(function (role) {
                var node = {
                    children: null,
                    leaf: true,
                    label: role.roleName,
                    key: role.applicationName + ":" + role.roleName,
                    data: { name: role.roleName, applicationName: role.applicationName }
                };
                if (_this.isEditMode) {
                    _this.checkAndAddToSelectedRoles(node);
                }
                return node;
            });
        };
        FunctionalRoleEditorComponent.prototype.checkAndAddToSelectedRoles = function (node) {
            if (this.functionalRole.applicationRoles) {
                if (lodash.has(this.functionalRole.applicationRoles, node.data.applicationName)) {
                    var selectedRolesList = this.functionalRole.applicationRoles[node.data.applicationName];
                    if (selectedRolesList.includes(node.data.name)) {
                        this.selectedRolesList.push(node);
                    }
                }
            }
        };
        FunctionalRoleEditorComponent.prototype.updateParentNodesForSelectedRoles = function () {
            var _this = this;
            lodash.map(this.selectedRolesList, function (role) {
                var parentNode = lodash.find(_this.availableRoles, function (availableRole) { return availableRole.data.applicationName === role.data.applicationName; });
                var selectedChildNodes = lodash.filter(_this.selectedRolesList, function (selectedRole) { return parentNode.children.find(function (child) { return child.data.name === selectedRole.data.name &&
                    parentNode.data.applicationName === selectedRole.data.applicationName; }); });
                if (selectedChildNodes.length === parentNode.children.length) {
                    if (!_this.selectedRolesList.includes(parentNode)) {
                        _this.selectedRolesList.push(parentNode);
                    }
                }
                else {
                    parentNode.partialSelected = true;
                }
            });
        };
        FunctionalRoleEditorComponent.prototype.optionFormatter = function (option) {
            return option.displayValue;
        };
        FunctionalRoleEditorComponent.prototype.save = function () {
            var _this = this;
            this.allowDismiss = false;
            this.isSaveButtonDisabled = true;
            if (!this.isEditMode) {
                this.functionalRole.applicationName = this.selectedApplication[0].value;
            }
            var leafNodes = lodash.filter(this.selectedRolesList, function (role) { return role.leaf; });
            this.functionalRole.applicationRoles = lodash.chain(leafNodes)
                .groupBy(function (role) { return role.data.applicationName; })
                .map(function (roles, applicationName) {
                var _a;
                return (_a = {},
                    _a[applicationName] = roles.map(function (role) { return role.label; }),
                    _a);
            })
                .reduce(function (applicationName, roles) { return Object.assign(applicationName, roles); }, {})
                .value();
            var result$ = this.isEditMode
                ? this.rxFuntionalRoleService.save(this.functionalRole, this.oldRoleName)
                : this.rxFuntionalRoleService.create(this.functionalRole);
            result$
                .pipe(operators.finalize(function () {
                _this.allowDismiss = true;
                _this.isSaveButtonDisabled = false;
            }))
                .subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.functional-roles.functional-role-saved.label'));
                _this.activeModalRef.close(true);
            });
        };
        FunctionalRoleEditorComponent.prototype.functionalRoleNameValidator = function (control) {
            return control.value && !i3.RX_RECORD_DEFINITION.validDefinitionNameRegex.test(control.value)
                ? {
                    invalidRoleName: {
                        message: this.translateService.instant('com.bmc.arsys.rx.client.admin.functional-roles.functional-role-name-validation.message')
                    }
                }
                : null;
        };
        FunctionalRoleEditorComponent.prototype.cancel = function () {
            this.activeModalRef.dismiss(i1$2.DismissReasons.CLOSE_BTN);
        };
        FunctionalRoleEditorComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        return FunctionalRoleEditorComponent;
    }(i1$1.RxModalClass));
    FunctionalRoleEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FunctionalRoleEditorComponent, deps: [{ token: i2__namespace.RxGlobalCacheService }, { token: i1__namespace$1.ActiveModalRef }, { token: i2__namespace.RxRoleDataPageService }, { token: RxFuntionalRoleService }, { token: i2__namespace.RxNotificationService }, { token: i4__namespace.TranslateService }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FunctionalRoleEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: FunctionalRoleEditorComponent, selector: "rx-functional-role-editor", viewQueries: [{ propertyName: "functionalRoleEditorForm", first: true, predicate: ["functionalRoleEditorForm"], descendants: true, read: i1.NgForm, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"modal-header\">\n  <h5 class=\"modal-title\">\n    {{\n      (isEditMode\n        ? 'com.bmc.arsys.rx.client.admin.functional-roles.edit-functional-role.label'\n        : 'com.bmc.arsys.rx.client.admin.functional-roles.create-functional-role.label'\n      ) | translate\n    }}\n  </h5>\n\n  <button class=\"close dp-close\" type=\"button\" rx-id=\"x-button\" [disabled]=\"!allowDismiss\" (click)=\"cancel()\"></button>\n</div>\n\n<div class=\"modal-body functional-role-editor-modal-body d-flex\">\n  <rx-busy-indicator [options]=\"{ busy: busy, loaderType: 'section' }\"></rx-busy-indicator>\n\n  <form #functionalRoleEditorForm=\"ngForm\" class=\"w-100\">\n    <div class=\"row h-100\" *ngIf=\"applicationOptions\">\n      <div class=\"col-6 d-flex flex-column mh-100 mt-2\">\n        <adapt-rx-select\n          class=\"form-group d-block\"\n          label=\"{{ 'com.bmc.arsys.rx.client.common.application-or-library.label' | translate }}\"\n          rx-id=\"application-name\"\n          [(ngModel)]=\"selectedApplication\"\n          [options]=\"applicationOptions\"\n          [optionFormatter]=\"optionFormatter\"\n          required=\"true\"\n          name=\"application\"\n          [readonly]=\"isEditMode\"\n        >\n        </adapt-rx-select>\n        <adapt-rx-textfield\n          rx-id=\"name\"\n          class=\"form-group d-block\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.functional-roles.functional-role-name.label' | translate }}\"\n          required=\"true\"\n          [(ngModel)]=\"functionalRole.name\"\n          name=\"name\"\n          [rxCustomValidators]=\"validatorFn\"\n        >\n        </adapt-rx-textfield>\n        <adapt-rx-textfield\n          rx-id=\"description\"\n          class=\"form-group d-block\"\n          required=\"true\"\n          [(ngModel)]=\"functionalRole.description\"\n          label=\"{{ 'com.bmc.arsys.rx.client.common.description.label' | translate }}\"\n          name=\"description\"\n        ></adapt-rx-textfield>\n        <adapt-rx-textfield\n          *ngIf=\"isEditMode\"\n          rx-id=\"id\"\n          class=\"form-group d-block\"\n          [(ngModel)]=\"functionalRole.id\"\n          label=\"{{ 'com.bmc.arsys.rx.client.common.id.label' | translate }}\"\n          name=\"id\"\n          [readonly]=\"true\"\n          [disabledStyleForReadonlyState]=\"true\"\n        ></adapt-rx-textfield>\n      </div>\n      <div class=\"col-6 d-flex flex-column mh-100 mt-2\">\n        <adapt-rx-control-label label=\"Roles\"> </adapt-rx-control-label>\n        <div class=\"card roles-list-wrapper flex-grow-1\">\n          <div class=\"card-block\">\n            <adapt-tree\n              *ngIf=\"availableRoles.length\"\n              [value]=\"availableRoles\"\n              filter=\"true\"\n              selectionMode=\"checkbox\"\n              [(selection)]=\"selectedRoles\"\n              [wrap]=\"treeWrap\"\n            >\n            </adapt-tree>\n          </div>\n        </div>\n      </div>\n    </div>\n  </form>\n</div>\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    (click)=\"save()\"\n    [adaptInlineLoader]=\"!allowDismiss\"\n    [disabled]=\"isSaveButtonDisabled || !allowDismiss\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button\n    adapt-button\n    btn-type=\"secondary\"\n    type=\"button\"\n    rx-id=\"cancel-button\"\n    (click)=\"cancel()\"\n    [disabled]=\"!allowDismiss\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.functional-role-editor-modal-body{height:645px}.roles-list-wrapper{overflow:auto}adapt-rx-select,adapt-rx-textfield{max-width:500px}\n"], components: [{ type: i1__namespace.RxBusyIndicatorComponent, selector: "rx-busy-indicator", inputs: ["options"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace$1.AdaptTreeComponent, selector: "adapt-tree", inputs: ["value", "filter", "texts", "filterBtnClearText", "filterPlaceholder", "testID", "lazy", "lazyLoading", "trim", "wrap", "selectAllButton", "deselectAllButton", "treeScrollHeight", "adaptRadarDisableEventSending", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "validateDrop"], outputs: ["onNodeDrop", "lazyLoad"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1__namespace.RxCustomValidatorsDirective, selector: "[rxCustomValidators][ngModel],[rxCustomValidators][formControl]", inputs: ["rxCustomValidators"] }, { type: i1__namespace$1.AdaptInlineStandaloneDirective, selector: "[adaptInlineLoader]", inputs: ["adaptInlineLoader", "activeText"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FunctionalRoleEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-functional-role-editor',
                        templateUrl: './functional-role-editor.component.html',
                        styleUrls: ['./functional-role-editor.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxGlobalCacheService }, { type: i1__namespace$1.ActiveModalRef }, { type: i2__namespace.RxRoleDataPageService }, { type: RxFuntionalRoleService }, { type: i2__namespace.RxNotificationService }, { type: i4__namespace.TranslateService }, { type: i0__namespace.Injector }]; }, propDecorators: { functionalRoleEditorForm: [{
                    type: i0.ViewChild,
                    args: ['functionalRoleEditorForm', { read: i1.NgForm, static: true }]
                }] } });

    var RX_FUNCTIONAL_ROLES = {
        recordDefinitionName: 'Functional Roles',
        fieldIds: {
            applicationName: 1720,
            name: 1721
        }
    };

    var FunctionalRolesAdminComponent = /** @class */ (function () {
        function FunctionalRolesAdminComponent(rxFuntionalRoleService, rxNotificationService, rxModalService, translateService) {
            var _this = this;
            this.rxFuntionalRoleService = rxFuntionalRoleService;
            this.rxNotificationService = rxNotificationService;
            this.rxModalService = rxModalService;
            this.translateService = translateService;
            this.gridConfig$ = new rxjs.Observable(function (observer) {
                observer.next({
                    recordDefinitionName: RX_FUNCTIONAL_ROLES.recordDefinitionName,
                    columns: _this.getColumns(),
                    actionButtons: _this.getActionButtons(),
                    styles: 'flex-fill'
                });
                observer.complete();
            });
        }
        FunctionalRolesAdminComponent.prototype.getActionButtons = function () {
            var _this = this;
            return [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                    style: 'tertiary',
                    iconCls: 'trash',
                    actions: [
                        {
                            name: function () {
                                _this.rxModalService
                                    .confirm({
                                    title: _this.translateService.instant('com.bmc.arsys.rx.client.dialog.warning.label'),
                                    modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                                    message: _this.translateService.instant('com.bmc.arsys.rx.client.admin.functional-roles.functional-role-delete-confirmation.message')
                                })
                                    .then(function (response) {
                                    if (response) {
                                        var selectedRecords = lodash.castArray(_this.functionalRolesRecordGrid.api.getSelectedRows());
                                        var rolesToDelete = selectedRecords.map(function (record) {
                                            return {
                                                applicationName: record[RX_FUNCTIONAL_ROLES.fieldIds.applicationName],
                                                name: record[RX_FUNCTIONAL_ROLES.fieldIds.name]
                                            };
                                        });
                                        _this.rxFuntionalRoleService.delete(rolesToDelete).subscribe(function () {
                                            _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.functional-roles.functional-role-deleted.message'));
                                            _this.functionalRolesRecordGrid.api.refresh().subscribe();
                                        });
                                    }
                                });
                            }
                        }
                    ]
                }
            ];
        };
        FunctionalRolesAdminComponent.prototype.getColumns = function () {
            var _this = this;
            return [
                {
                    fieldId: "" + RX_FUNCTIONAL_ROLES.fieldIds.name,
                    index: 0,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label'),
                    clickable: true,
                    actions: [
                        {
                            name: function (previousActionResult, lastActionRow) { return _this.editFunctionalRole(lastActionRow); }
                        }
                    ]
                },
                {
                    fieldId: "" + RX_FUNCTIONAL_ROLES.fieldIds.applicationName,
                    index: 1,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.functional-roles.application-library-name.label')
                },
                {
                    fieldId: "" + i3.RX_RECORD_DEFINITION.coreFieldIds.description,
                    index: 2,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.chatbots.description.title')
                },
                {
                    fieldId: "" + i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                    index: 3,
                    title: 'ID'
                }
            ];
        };
        FunctionalRolesAdminComponent.prototype.openModal = function (data) {
            var _this = this;
            this.rxModalService
                .openModal({
                content: FunctionalRoleEditorComponent,
                size: 'default',
                data: {
                    functionalRole: data
                }
            })
                .then(function (result) {
                if (result) {
                    _this.functionalRolesRecordGrid.api.refresh().subscribe();
                }
            })
                .catch(lodash.noop);
        };
        FunctionalRolesAdminComponent.prototype.createFunctionalRole = function () {
            this.openModal({
                name: '',
                applicationName: '',
                description: '',
                applicationRoles: {}
            });
        };
        FunctionalRolesAdminComponent.prototype.editFunctionalRole = function (functionalRoleRow) {
            var _this = this;
            this.rxFuntionalRoleService
                .get({
                applicationName: functionalRoleRow[RX_FUNCTIONAL_ROLES.fieldIds.applicationName],
                name: functionalRoleRow[RX_FUNCTIONAL_ROLES.fieldIds.name]
            })
                .subscribe(function (functionalRole) {
                _this.openModal(functionalRole);
            });
        };
        return FunctionalRolesAdminComponent;
    }());
    FunctionalRolesAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FunctionalRolesAdminComponent, deps: [{ token: RxFuntionalRoleService }, { token: i2__namespace.RxNotificationService }, { token: i1__namespace.RxModalService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    FunctionalRolesAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: FunctionalRolesAdminComponent, selector: "rx-admin-functional-roles", viewQueries: [{ propertyName: "functionalRolesRecordGrid", first: true, predicate: ["functionalRolesRecordGrid"], descendants: true }], ngImport: i0__namespace, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.functional.roles' | translate }}\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"tertiary\"\n    class=\"d-icon-plus_circle align-self-start\"\n    rx-id=\"new-button\"\n    (click)=\"createFunctionalRole()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n  </button>\n  <rx-record-grid rx-id=\"functional-roles-grid\" #functionalRolesRecordGrid [config]=\"gridConfig$\"> </rx-record-grid>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FunctionalRolesAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-functional-roles',
                        templateUrl: './functional-roles.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: RxFuntionalRoleService }, { type: i2__namespace.RxNotificationService }, { type: i1__namespace.RxModalService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { functionalRolesRecordGrid: [{
                    type: i0.ViewChild,
                    args: ['functionalRolesRecordGrid', { static: false }]
                }] } });

    var FunctionalRolesRegistrationModule = /** @class */ (function () {
        function FunctionalRolesRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-functional-roles',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(FunctionalRolesAdminComponent),
                name: 'Functional roles',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return FunctionalRolesRegistrationModule;
    }());
    FunctionalRolesRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FunctionalRolesRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FunctionalRolesRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FunctionalRolesRegistrationModule, declarations: [FunctionalRolesAdminComponent, FunctionalRoleEditorComponent], imports: [i8.CommonModule,
            i1.FormsModule,
            i4.AdminSettingsModule,
            i7.RecordGridModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptBusyModule,
            i1$2.AdaptRxSelectModule,
            i1$2.AdaptRxFormControlModule,
            i1$2.AdaptTreeModule,
            i1$1.RxBusyIndicatorModule,
            i4$1.TranslateModule,
            i1$1.RxDirectivesModule] });
    FunctionalRolesRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FunctionalRolesRegistrationModule, imports: [[
                i8.CommonModule,
                i1.FormsModule,
                i4.AdminSettingsModule,
                i7.RecordGridModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptBusyModule,
                i1$2.AdaptRxSelectModule,
                i1$2.AdaptRxFormControlModule,
                i1$2.AdaptTreeModule,
                i1$1.RxBusyIndicatorModule,
                i4$1.TranslateModule,
                i1$1.RxDirectivesModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: FunctionalRolesRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [FunctionalRolesAdminComponent, FunctionalRoleEditorComponent],
                        imports: [
                            i8.CommonModule,
                            i1.FormsModule,
                            i4.AdminSettingsModule,
                            i7.RecordGridModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptBusyModule,
                            i1$2.AdaptRxSelectModule,
                            i1$2.AdaptRxFormControlModule,
                            i1$2.AdaptTreeModule,
                            i1$1.RxBusyIndicatorModule,
                            i4$1.TranslateModule,
                            i1$1.RxDirectivesModule
                        ],
                        entryComponents: [FunctionalRolesAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RxHkmAccessMappingService = /** @class */ (function () {
        function RxHkmAccessMappingService(httpClient) {
            this.httpClient = httpClient;
            this.knowledgeApi = '/api/rx/application/knowledge';
            this.folderCache = new Map();
        }
        RxHkmAccessMappingService.prototype.callItsmMappingApi = function () {
            return this.httpClient.get(this.knowledgeApi + "/mapping/itsm");
        };
        RxHkmAccessMappingService.prototype.callHkmMappingApi = function () {
            return this.httpClient.get(this.knowledgeApi + "/mapping/hkm");
        };
        RxHkmAccessMappingService.prototype.getFolderAccess = function (userGroupId, portalId, nodeId) {
            var _this = this;
            var cacheKey = userGroupId + "-" + portalId + "-" + nodeId;
            if (this.folderCache.has(cacheKey)) {
                return rxjs.of(this.folderCache.get(cacheKey));
            }
            var request = encodeURIComponent("v1/contentaccess/" + userGroupId + "/" + portalId + "/" + nodeId);
            return this.httpClient
                .get(this.knowledgeApi + "?ComAroundRequest=" + request)
                .pipe(operators.tap(function (folders) { return _this.folderCache.set(cacheKey, folders); }));
        };
        RxHkmAccessMappingService.prototype.deleteAccessMappings = function (hkmGroupMappingIds) {
            return this.httpClient.delete(this.knowledgeApi + "/mapping/delete/" + hkmGroupMappingIds.join(','));
        };
        RxHkmAccessMappingService.prototype.saveAccessMappings = function (hkmGroupMappings) {
            return this.httpClient.post(this.knowledgeApi + "/mapping/save", hkmGroupMappings);
        };
        return RxHkmAccessMappingService;
    }());
    RxHkmAccessMappingService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxHkmAccessMappingService, deps: [{ token: i1__namespace$2.HttpClient }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxHkmAccessMappingService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxHkmAccessMappingService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxHkmAccessMappingService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }]; } });

    var HkmAccessMapEditorComponent = /** @class */ (function () {
        function HkmAccessMapEditorComponent(dockedPanelContext, rxNotificationService, translateService, rxModalService, rxHkmAccessMappingService) {
            this.dockedPanelContext = dockedPanelContext;
            this.rxNotificationService = rxNotificationService;
            this.translateService = translateService;
            this.rxModalService = rxModalService;
            this.rxHkmAccessMappingService = rxHkmAccessMappingService;
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.userGroupToFoldersMap = new Map();
            this.selectedItsmSupportGroups = [];
            this.alertConfig = {
                title: '',
                content: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping-editor.mapping-info.message'),
                type: 'inline',
                variant: 'info'
            };
            var contextData = this.dockedPanelContext.getData();
            this.selectedItsmSupportGroups = contextData.selectedSupportGroups;
            this.portals = contextData.hkmPortals;
            this.company = contextData.company;
            this.portalUserGroups = contextData.selectedHkmPortal.userGroups;
            this.selectedPortal = new i1.FormControl([contextData.selectedHkmPortal]);
            this.selectedUserGroups = new i1.FormControl(contextData.selectedHkmUserGroups);
        }
        HkmAccessMapEditorComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.selectedPortal.valueChanges.pipe(operators.takeUntil(this.destroyed$)).subscribe(function (_a) {
                var _b = __read(_a, 1), portal = _b[0];
                _this.portalUserGroups = portal.userGroups;
                _this.selectedUserGroups.reset([]);
            });
            this.selectedUserGroups.valueChanges
                .pipe(operators.takeUntil(this.destroyed$), operators.startWith(this.selectedUserGroups.value || []), operators.switchMap(function (userGroups) {
                if (userGroups.length === 0) {
                    return rxjs.of(userGroups);
                }
                var _a = __read(_this.selectedPortal.value, 1), selectedPortal = _a[0];
                var folderAcecssRequests = userGroups.map(function (userGroup) {
                    return _this.rxHkmAccessMappingService
                        .getFolderAccess(userGroup.id, selectedPortal.portalId, selectedPortal.nodeId)
                        .pipe(operators.tap(function (folders) { return _this.userGroupToFoldersMap.set(userGroup, folders); }));
                });
                return rxjs.forkJoin(folderAcecssRequests).pipe(operators.map(function () { return userGroups; }));
            }))
                .subscribe(function (userGroups) {
                _this.setUpFoldersFromHkmPortalUserGroups(userGroups);
            });
        };
        HkmAccessMapEditorComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        HkmAccessMapEditorComponent.prototype.cancel = function () {
            this.dockedPanelContext.dismiss(i1$2.DismissReasons.ESC);
        };
        HkmAccessMapEditorComponent.prototype.save = function () {
            var _this = this;
            if (this.selectedItsmSupportGroups.length === 0) {
                this.rxNotificationService.addErrorMessage(this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping-editor.select-support-group.message'));
                return;
            }
            if (this.selectedUserGroups.value.length === 0) {
                this.rxNotificationService.addErrorMessage(this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping-editor.select-user-group.message'));
                return;
            }
            var hkmGroupFoldersNames = this.hkmFolders.map(function (data) { return data.name; });
            var selectedUserGroups = this.selectedUserGroups.value;
            var mappingConfigurations = this.selectedItsmSupportGroups.map(function (itsmSupportGroup) { return ({
                AppCompanyID: _this.company.permissionId,
                AppCompanyName: _this.company.name,
                AppGroupName: itsmSupportGroup.supportGroupName,
                AppName: 'ITSM',
                IsMapped: true,
                AppGroupID: itsmSupportGroup.permissionGroupId,
                HKMPortalID: _this.selectedPortal.value[0].portalId,
                HKMPortalName: _this.selectedPortal.value[0].portalName,
                HKMRoleName: selectedUserGroups.map(function (group) { return group.role; }).join(','),
                HKMGroupID: selectedUserGroups.map(function (group) { return group.id; }).join(','),
                HKMGroupFoldersNames: hkmGroupFoldersNames,
                HKMGroupName: selectedUserGroups.map(function (group) { return group.name; }).join(',')
            }); });
            this.rxHkmAccessMappingService.saveAccessMappings(mappingConfigurations).subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.connection-mapping.mapping-saved.message'));
                _this.dockedPanelContext.close(i1$2.DismissReasons.CLOSE_BTN);
            }, function () {
                _this.dockedPanelContext.close(i1$2.DismissReasons.BACKDROP_CLICK);
            });
        };
        HkmAccessMapEditorComponent.prototype.hkmFolderSortFn = function (first, second) {
            if (first.hasFolderChildren !== second.hasFolderChildren) {
                return +second.hasFolderChildren - +first.hasFolderChildren;
            }
            return first.name.localeCompare(second.name);
        };
        HkmAccessMapEditorComponent.prototype.setUpFoldersFromHkmPortalUserGroups = function (userGroups) {
            var _this = this;
            var items = lodash.flatMap(userGroups, function (group) { return _this.userGroupToFoldersMap
                .get(group)
                .filter(function (folder) { return folder.haveAccess; })
                .map(function (folder) { return ({ group: group, folder: folder }); }); });
            items.sort(function (first, second) { return _this.hkmFolderSortFn(first.folder, second.folder); });
            var uniqueItems = lodash.uniqBy(items, function (item) { return item.folder.nodeId; });
            this.hkmFolders = uniqueItems.map(function (item) { return item.folder; });
            this.filesTree = uniqueItems.map(function (item) { return ({
                data: item,
                expandedIcon: item.folder.hasFolderChildren ? 'd-icon-folder_open' : 'd-icon-folder_o',
                collapsedIcon: item.folder.hasFolderChildren ? 'd-icon-folder' : 'd-icon-folder_o',
                label: item.folder.name,
                level: 1,
                expression: "'" + item.folder.nodeId + "'",
                children: null,
                leaf: !item.folder.hasFolderChildren
            }); });
        };
        HkmAccessMapEditorComponent.prototype.deleteVisibilityGroup = function (group) {
            var _this = this;
            this.rxModalService
                .confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping-editor.delete-visibility-group.message')
            })
                .then(function (result) {
                if (result) {
                    _this.selectedItsmSupportGroups.forEach(function (element, index) {
                        if (element.supportGroupName === group.supportGroupName) {
                            _this.selectedItsmSupportGroups.splice(index, 1);
                        }
                    });
                }
            });
        };
        HkmAccessMapEditorComponent.prototype.onNodeExpand = function (_a) {
            var _this = this;
            var node = _a.node;
            if (node && !node.children) {
                this.rxHkmAccessMappingService
                    .getFolderAccess(node.data.group.id, node.data.folder.portalId, node.data.folder.nodeId)
                    .subscribe(function (hkmFolders) {
                    node.children = hkmFolders
                        .filter(function (folder) { return folder.haveAccess; })
                        .sort(_this.hkmFolderSortFn)
                        .map(function (folder) { return ({
                        data: { group: node.data.group, folder: folder },
                        expandedIcon: folder.hasFolderChildren ? 'd-icon-folder_open' : 'd-icon-folder_o',
                        collapsedIcon: folder.hasFolderChildren ? 'd-icon-folder' : 'd-icon-folder_o',
                        label: folder.name,
                        level: 1,
                        expression: "'" + folder.nodeId + "'",
                        children: null,
                        leaf: !folder.hasFolderChildren
                    }); });
                });
            }
        };
        HkmAccessMapEditorComponent.prototype.supportGroupFormatter = function (group) {
            return group.supportGroupName;
        };
        HkmAccessMapEditorComponent.prototype.userGroupOptionformatter = function (group) {
            return group.name;
        };
        HkmAccessMapEditorComponent.prototype.hkmPortalFormatter = function (portal) {
            return portal.portalName;
        };
        return HkmAccessMapEditorComponent;
    }());
    HkmAccessMapEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: HkmAccessMapEditorComponent, deps: [{ token: i1__namespace$1.DockedPanelContext }, { token: i2__namespace.RxNotificationService }, { token: i4__namespace.TranslateService }, { token: i1__namespace.RxModalService }, { token: RxHkmAccessMappingService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    HkmAccessMapEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: HkmAccessMapEditorComponent, selector: "rx-hkm-access-map-editor", ngImport: i0__namespace, template: "<div class=\"container col d-flex flex-column\" style=\"overflow-y: auto\">\n  <div class=\"row justify-content-between\">\n    <div class=\"col-5 form-control-label\">\n      <adapt-rx-textfield\n        [disabled]=\"true\"\n        rx-id=\"company-field\"\n        [label]=\"'com.bmc.arsys.rx.client.hkm-access-mapping.company.label' | translate\"\n        [(ngModel)]=\"company.name\"\n      ></adapt-rx-textfield>\n    </div>\n    <div class=\"col-1 d-flex align-items-end p-2 justify-content-center\">\n      <adapt-icon name=\"arrow_right\"></adapt-icon>\n    </div>\n    <div class=\"col-6 form-control-label\">\n      <adapt-rx-select\n        [formControl]=\"selectedPortal\"\n        [options]=\"portals\"\n        rx-id=\"portal-select\"\n        [optionFormatter]=\"hkmPortalFormatter\"\n        [label]=\"'com.bmc.arsys.rx.client.hkm-access-mapping-editor.header.label' | translate\"\n      ></adapt-rx-select>\n    </div>\n  </div>\n  <hr />\n  <div class=\"row\">\n    <div class=\"col\">\n      <adapt-alert [config]=\"alertConfig\"></adapt-alert>\n    </div>\n  </div>\n  <div class=\"row flex-grow-1 py-3 justify-content-between\">\n    <div class=\"col-5 d-flex flex-column\">\n      <div class=\"pb-1\">\n        <span class=\"form-control-label\">\n          {{\n            'com.bmc.arsys.rx.client.hkm-access-mapping-editor.support-group.label'\n              | translate: { count: selectedItsmSupportGroups.length }\n          }}\n        </span>\n      </div>\n      <div class=\"card flex-grow-1\" rx-id=\"selected-support-groups\">\n        <div\n          class=\"d-flex px-2 align-items-center adapt-rx-list-item cursor-pointer\"\n          *ngFor=\"let group of selectedItsmSupportGroups\"\n        >\n          <span>{{ group.supportGroupName }}</span>\n          <button\n            type=\"button\"\n            [disabled]=\"false\"\n            class=\"btn btn-link d-icon-trash p-1\"\n            rx-id=\"delete-button\"\n            (click)=\"deleteVisibilityGroup(group)\"\n          ></button>\n        </div>\n      </div>\n    </div>\n    <div class=\"col-1 d-flex p-2 mt-4 justify-content-center\">\n      <adapt-icon [name]=\"'arrow_right'\"></adapt-icon>\n    </div>\n    <div class=\"col-6 d-flex flex-column\">\n      <adapt-rx-select\n        [formControl]=\"selectedUserGroups\"\n        rx-id=\"user-groups-select\"\n        [label]=\"'com.bmc.arsys.rx.client.hkm-access-mapping-editor.select-hkm-user-groups.label' | translate\"\n        [options]=\"portalUserGroups\"\n        [optionFormatter]=\"userGroupOptionformatter\"\n        [selectAllButton]=\"true\"\n        [deselectAllButton]=\"true\"\n        [enableFilter]=\"true\"\n        [multiple]=\"true\"\n      >\n      </adapt-rx-select>\n      <div class=\"mt-3 pb-1\">\n        <span class=\"form-control-label\">\n          {{ 'com.bmc.arsys.rx.client.hkm-access-mapping-editor.accessible-folders.title' | translate }}\n        </span>\n      </div>\n      <div class=\"card flex-grow-1 p-2\">\n        <div class=\"mh-100\" style=\"overflow-y: auto\">\n          <adapt-tree [value]=\"filesTree\" (onNodeExpand)=\"onNodeExpand($event)\"> </adapt-tree>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"dp-footer\">\n  <div>\n    <button rx-id=\"save-button\" type=\"button\" class=\"btn btn-primary mr-2\" (click)=\"save()\">\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </div>\n  <div>\n    <button rx-id=\"cancel-button\" type=\"button\" class=\"btn btn-secondary\" (click)=\"cancel()\">\n      {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n    </button>\n  </div>\n</div>\n", components: [{ type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptIconComponent, selector: "adapt-icon", inputs: ["name", "classList", "description", "testID"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1__namespace$1.AdaptTreeComponent, selector: "adapt-tree", inputs: ["value", "filter", "texts", "filterBtnClearText", "filterPlaceholder", "testID", "lazy", "lazyLoading", "trim", "wrap", "selectAllButton", "deselectAllButton", "treeScrollHeight", "adaptRadarDisableEventSending", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "validateDrop"], outputs: ["onNodeDrop", "lazyLoad"] }], directives: [{ type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: HkmAccessMapEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-hkm-access-map-editor',
                        templateUrl: './hkm-access-map-editor.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.DockedPanelContext }, { type: i2__namespace.RxNotificationService }, { type: i4__namespace.TranslateService }, { type: i1__namespace.RxModalService }, { type: RxHkmAccessMappingService }]; } });

    var PredefinedLobOptions;
    (function (PredefinedLobOptions) {
        PredefinedLobOptions["All"] = "$ALL$";
        PredefinedLobOptions["None"] = "$NONE$";
    })(PredefinedLobOptions || (PredefinedLobOptions = {}));

    var HkmAccessMappingAdminComponent = /** @class */ (function (_super) {
        __extends(HkmAccessMappingAdminComponent, _super);
        function HkmAccessMappingAdminComponent(adaptDockedPanelService, translateService, rxModalService, rxHkmAccessMappingService) {
            var _this = _super.call(this) || this;
            _this.adaptDockedPanelService = adaptDockedPanelService;
            _this.translateService = translateService;
            _this.rxModalService = rxModalService;
            _this.rxHkmAccessMappingService = rxHkmAccessMappingService;
            _this.predefinedLinesOfBusiness = [
                { id: PredefinedLobOptions.All, name: _this.translateService.instant('com.bmc.arsys.rx.client.common.all.label') },
                { id: PredefinedLobOptions.None, name: _this.translateService.instant('com.bmc.arsys.rx.client.common.none.label') }
            ];
            _this.hkmPortals = [];
            _this.supportGroups = [];
            _this.selectedLob = _this.predefinedLinesOfBusiness[0];
            _this.itsmCompanies = [];
            _this.linesOfBusiness = [];
            return _this;
        }
        HkmAccessMappingAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.loadItsmHkmMappingData();
            this.rxHkmAccessMappingService.callHkmMappingApi().subscribe(function (portals) {
                _this.hkmPortals = portals;
            });
            this.setupGridInit();
        };
        HkmAccessMappingAdminComponent.prototype.setupGridInit = function () {
            var _this = this;
            this.gridColumns = [
                {
                    fieldId: 'supportGroupName',
                    title: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.hkm-permission-group.title'),
                    filterable: false,
                    cellTemplate: this.visibilityGroupColTemplate
                },
                {
                    fieldId: 'description',
                    title: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.support-group-description.title'),
                    filterable: false
                },
                {
                    fieldId: 'permissionGroupId',
                    title: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.hkm-permission-group-id.title'),
                    filterable: false,
                    visible: false
                },
                {
                    filterable: true,
                    fieldId: 'isMapped',
                    title: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.status.title'),
                    cellTemplate: this.statusColTemplate
                },
                {
                    fieldId: 'hkmportalName',
                    title: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.hkm-portal-name.title'),
                    visible: true,
                    filterable: false
                },
                {
                    fieldId: 'hkmgroupName',
                    title: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.hkm-group-name.title'),
                    visible: true,
                    filterable: false
                },
                {
                    fieldId: 'hkmgroupID',
                    title: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.hkm-group-id.title'),
                    visible: false,
                    filterable: false
                },
                {
                    fieldId: 'hkmroleName',
                    title: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.hkm-role.title'),
                    visible: true,
                    filterable: false
                }
            ];
            var gridRecordDefinition = {
                fieldDefinitions: [
                    {
                        id: 'supportGroupName',
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'description',
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'permissionGroupId',
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'isMapped',
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.selection,
                        optionNamesById: {
                            true: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.status.mapped.label'),
                            false: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.status.unmapped.label')
                        }
                    },
                    {
                        id: 'hkmportalName',
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'hkmgroupName',
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'hkmgroupID',
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'hkmroleName',
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    }
                ]
            };
            var actionButtons = [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.map-access.button.label'),
                    style: 'tertiary',
                    iconCls: 'cubes_restart',
                    disabled: function (selectedRows) { return !_this.hasPortals() || selectedRows.length === 0 || selectedRows.some(function (row) { return row.isMapped; }); },
                    actions: [{ name: function () { return _this.openAccessMappingDialog(); } }]
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.grid.unmap-access.button.label'),
                    style: 'tertiary',
                    iconCls: 'cube_cross_circle',
                    disabled: function (selectedRows) { return !_this.hasPortals() || selectedRows.length === 0 || selectedRows.some(function (row) { return !row.isMapped; }); },
                    actions: [{ name: function () { return _this.deleteMapping(); } }]
                }
            ];
            this.recordGridConfig$ = rxjs.of({
                columns: this.gridColumns,
                emptyStateLabelText: this.translateService.instant('com.bmc.arsys.rx.innovation-studio.external-record-wizard.document-selection.grid.empty-state.label'),
                enableRowSelection: i7.RowSelectionMode.Multiple,
                enableFiltering: true,
                recordIdField: 'requestId',
                styles: 'flex-fill',
                useExternalFiltering: false,
                getRecordDefinition: function () { return rxjs.of(gridRecordDefinition); },
                getData: function () { return rxjs.of({
                    totalSize: _this.supportGroups.length,
                    data: _this.supportGroups
                }); },
                actionButtons: actionButtons,
                filterMode: i7.RecordGridFilterMode.Basic
            });
        };
        HkmAccessMappingAdminComponent.prototype.setUpValues = function () {
            var _this = this;
            if (this.selectedLob.id === PredefinedLobOptions.All) {
                this.supportGroups = __spreadArray([], __read(this.selectedCompany.supportGroups));
            }
            else if (this.selectedLob.id === PredefinedLobOptions.None) {
                this.supportGroups = this.selectedCompany.supportGroups.filter(function (group) { return lodash.isEmpty(group.lineOfBusiness); });
            }
            else {
                this.supportGroups = this.selectedCompany.supportGroups.filter(function (group) { var _a; return (_a = group.lineOfBusiness) === null || _a === void 0 ? void 0 : _a.some(function (lob) { return lob === _this.selectedLob.id; }); });
            }
            this.itsmHkmMappingDataGrid.api.refresh().subscribe();
        };
        HkmAccessMappingAdminComponent.prototype.loadItsmHkmMappingData = function () {
            var _this = this;
            this.busy = this.rxHkmAccessMappingService
                .callItsmMappingApi()
                .subscribe(function (_b) {
                var data = _b.data;
                var _a;
                _this.itsmCompanies = __spreadArray([], __read(data));
                var extractedLinesOfBusiness = lodash.chain(data)
                    .flatMap(function (company) { return company.supportGroups; })
                    .filter(function (group) { return !lodash.isEmpty(group.lineOfBusiness); })
                    .flatMap(function (group) { return group.lineOfBusiness; })
                    .sort()
                    .sortedUniq()
                    .map(function (lob) { return ({ id: lob, name: lob }); })
                    .value();
                _this.linesOfBusiness = __spreadArray(__spreadArray([], __read(_this.predefinedLinesOfBusiness)), __read(extractedLinesOfBusiness));
                if (lodash.isEmpty((_a = _this.selectedCompany) === null || _a === void 0 ? void 0 : _a.name)) {
                    _this.setSelected(0);
                }
                else {
                    var currentCompanyId_1 = _this.selectedCompany.permissionId;
                    _this.selectedCompany = _this.itsmCompanies.find(function (company) { return company.permissionId === currentCompanyId_1; });
                    _this.setUpValues();
                }
            });
        };
        HkmAccessMappingAdminComponent.prototype.setSelected = function (index) {
            this.selectedCompany = this.itsmCompanies[index];
            this.setUpValues();
        };
        HkmAccessMappingAdminComponent.prototype.setSelectedLineOfBusiness = function (lob) {
            this.selectedLob = lob;
            this.setUpValues();
        };
        HkmAccessMappingAdminComponent.prototype.openAccessMappingDialog = function (supportGroup) {
            if (supportGroup === void 0) { supportGroup = null; }
            var title = this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping-editor.new.title');
            var portal = this.hkmPortals[0];
            var selectedSupportGroups = this.itsmHkmMappingDataGrid.api.getSelectedRows();
            var userGroups = [];
            if (supportGroup) {
                var mappedUserGroupsIds_1 = supportGroup.hkmgroupID.split(',').map(Number);
                title = this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping-editor.edit.title');
                portal = this.hkmPortals.find(function (hkmPortal) { return hkmPortal.portalName === supportGroup.hkmportalName; });
                selectedSupportGroups = [supportGroup];
                userGroups = portal.userGroups.filter(function (group) { return mappedUserGroupsIds_1.includes(group.id); });
            }
            this.openDetailDialog(title, selectedSupportGroups, portal, userGroups);
        };
        HkmAccessMappingAdminComponent.prototype.openDetailDialog = function (dialogTitle, selectedSupportGroups, selectedHkmPortal, selectedHkmUserGroups) {
            var _this = this;
            if (selectedHkmUserGroups === void 0) { selectedHkmUserGroups = []; }
            var _a;
            if (((_a = this.hkmPortals) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                this.adaptDockedPanelService
                    .open({
                    title: dialogTitle,
                    content: HkmAccessMapEditorComponent,
                    size: i1$4.OpenViewActionModalSize.Small,
                    data: {
                        company: this.selectedCompany,
                        hkmPortals: this.hkmPortals,
                        selectedLob: this.selectedLob,
                        selectedSupportGroups: selectedSupportGroups,
                        selectedHkmPortal: selectedHkmPortal,
                        selectedHkmUserGroups: selectedHkmUserGroups
                    }
                })
                    .then(function (result) {
                    if (result === i1$2.DismissReasons.CLOSE_BTN) {
                        _this.loadItsmHkmMappingData();
                    }
                })
                    .catch(lodash.noop);
            }
        };
        HkmAccessMappingAdminComponent.prototype.deleteMapping = function () {
            var _this = this;
            var selectedGroups = this.itsmHkmMappingDataGrid.api.getSelectedRows();
            var selectedGroupIds = selectedGroups.map(function (group) { return group.id; });
            this.rxModalService
                .confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.client.hkm-access-mapping.delete-mapping.message')
            })
                .then(function (result) {
                if (result) {
                    _this.rxHkmAccessMappingService
                        .deleteAccessMappings(selectedGroupIds)
                        .subscribe(function () { return _this.loadItsmHkmMappingData(); });
                }
            });
        };
        HkmAccessMappingAdminComponent.prototype.hasPortals = function () {
            return !lodash.isEmpty(this.hkmPortals);
        };
        return HkmAccessMappingAdminComponent;
    }(i4$2.BaseViewComponent));
    HkmAccessMappingAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: HkmAccessMappingAdminComponent, deps: [{ token: i1__namespace$1.AdaptDockedPanelService }, { token: i4__namespace.TranslateService }, { token: i1__namespace.RxModalService }, { token: RxHkmAccessMappingService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    HkmAccessMappingAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: HkmAccessMappingAdminComponent, selector: "rx-admin-hkm-access-mapping", viewQueries: [{ propertyName: "itsmHkmMappingDataGrid", first: true, predicate: ["itsmHkmMappingDataGrid"], descendants: true }, { propertyName: "statusColTemplate", first: true, predicate: ["statusColTemplate"], descendants: true, static: true }, { propertyName: "visibilityGroupColTemplate", first: true, predicate: ["visibilityGroupColTemplate"], descendants: true, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.hkm-access-mapping.header.label' | translate }}\" [busy]=\"busy\">\n  <div class=\"d-flex\">\n    <div class=\"d-flex pr-3 align-items-baseline\">\n      <label class=\"text-strong\">{{ 'com.bmc.arsys.rx.client.hkm-access-mapping.company.label' | translate }}:</label>\n      <div class=\"d-flex\" adaptDropdown>\n        <button\n          class=\"pl-1\"\n          adapt-button\n          #dropdownButton\n          rx-id=\"company-dropdown\"\n          adaptDropdownToggle\n          type=\"button\"\n          btn-type=\"tertiary\">\n          {{ selectedCompany?.name }}\n        </button>\n        <div class=\"dropdown-menu\" adaptDropdownMenu>\n          <button\n            *ngFor=\"let company of itsmCompanies; let index = index\"\n            [class.text-active]=\"company?.permissionId === selectedCompany?.permissionId\"\n            [class.active]=\"company?.permissionId === selectedCompany?.permissionId\"\n            type=\"button\"\n            class=\"dropdown-item\"\n            (click)=\"setSelected(index)\">\n            {{ company.name }}\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"d-flex align-items-baseline\">\n      <label class=\"text-strong\">{{ 'com.bmc.arsys.rx.client.hkm-access-mapping.line-of-business.label' | translate\n        }}:</label>\n      <div class=\"d-flex\" adaptDropdown >\n        <button\n          adapt-button\n          #dropdownButton\n          adaptDropdownToggle\n          type=\"button\"\n          rx-id=\"lob-dropdown\"\n          btn-type=\"tertiary\"\n          class=\"pl-1\">\n          {{ selectedLob?.name }}\n        </button>\n        <div class=\"dropdown-menu\" adaptDropdownMenu>\n          <button\n            type=\"button\"\n            *ngFor=\"let lob of linesOfBusiness\"\n            [class.text-active]=\"lob.id === selectedLob.id\"\n            [class.active]=\"lob.id === selectedLob.id\"\n            class=\"dropdown-item\"\n            (click)=\"setSelectedLineOfBusiness(lob)\">\n            {{ lob.name }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <rx-record-grid class=\"mb-3 mt-1\" [config]=\"recordGridConfig$\" #itsmHkmMappingDataGrid></rx-record-grid>\n\n  <ng-template #statusColTemplate let-dataItem=\"dataItem\">\n    <div class=\"cm-container container\">\n      <div class=\"row\">\n        <div class=\"col-sm-6 align-start\">\n          <adapt-badge\n            [animate]=\"animation\"\n            variant=\"warning\"\n            [showAlert]=\"false\"\n            alertVariant=\"warning\"\n            *ngIf=\"!dataItem.isMapped\"\n          >\n            {{ 'com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.status.unmapped.label' | translate }}\n          </adapt-badge>\n          <adapt-badge\n            [animate]=\"animation\"\n            variant=\"success\"\n            [showAlert]=\"false\"\n            alertVariant=\"success\"\n            *ngIf=\"dataItem.isMapped\"\n          >\n            {{ 'com.bmc.arsys.rx.client.hkm-access-mapping.grid.column.status.mapped.label' | translate }}\n          </adapt-badge>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #visibilityGroupColTemplate let-dataItem=\"dataItem\">\n    <div class=\"cm-container container\">\n      <div class=\"row align-start\" *ngIf=\"dataItem.isMapped && hasPortals()\">\n        <a href=\"javascript:void(0)\" (click)=\"openAccessMappingDialog(dataItem)\" class=\"alert-link\">{{\n          dataItem.supportGroupName\n        }}</a>\n      </div>\n      <div class=\"row align-start\" *ngIf=\"!dataItem.isMapped || !hasPortals()\">\n        {{ dataItem.supportGroupName }}\n      </div>\n    </div>\n  </ng-template>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptDropdownDirective, selector: "adapt-dropdown, [adaptDropdown]", inputs: ["autoClose", "customClass", "closeOnEscape", "placement", "animationPlacement", "holdFocusInMenu", "holdFocusOnOpen", "autoFocusFirst", "restoreFocusAfterClose", "focusNextElementAfterClose", "appendToBody", "appendTo", "positionTo", "anchorPositionTrackingIntervalMs", "enableAnchorPositionTracking", "recalculatePositionOnElementResize", "setMobileState", "mobileView"], outputs: ["onOpen", "onClose", "anchorPositionChange", "popupAnimationDone"], exportAs: ["adaptDropdown"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1__namespace$1.AdaptBadgeComponent, selector: "adapt-badge", inputs: ["animate", "showAlert", "variant", "alertVariant", "customCls"] }], directives: [{ type: i1__namespace$1.AdaptDropdownToggleDirective, selector: "[adaptDropdownToggle]", inputs: ["showCaret", "dropdownTogglerType"] }, { type: i1__namespace$1.AdaptDropdownMenuDirective, selector: "[adaptDropdownMenu]" }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: HkmAccessMappingAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-hkm-access-mapping',
                        templateUrl: './hkm-access-mapping.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.AdaptDockedPanelService }, { type: i4__namespace.TranslateService }, { type: i1__namespace.RxModalService }, { type: RxHkmAccessMappingService }]; }, propDecorators: { itsmHkmMappingDataGrid: [{
                    type: i0.ViewChild,
                    args: ['itsmHkmMappingDataGrid']
                }], statusColTemplate: [{
                    type: i0.ViewChild,
                    args: ['statusColTemplate', { static: true }]
                }], visibilityGroupColTemplate: [{
                    type: i0.ViewChild,
                    args: ['visibilityGroupColTemplate', { static: true }]
                }] } });

    var HkmAccessMappingRegistrationModule = /** @class */ (function () {
        function HkmAccessMappingRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-hkm-access-mapping',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(HkmAccessMappingAdminComponent),
                name: 'HKM Access Mapping',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return HkmAccessMappingRegistrationModule;
    }());
    HkmAccessMappingRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: HkmAccessMappingRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    HkmAccessMappingRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: HkmAccessMappingRegistrationModule, declarations: [HkmAccessMappingAdminComponent, HkmAccessMapEditorComponent], imports: [i4.AdminSettingsModule,
            i1.FormsModule,
            i1.ReactiveFormsModule,
            i8.CommonModule,
            i4$1.TranslateModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptRxListBuilderModule,
            i1$2.AdaptEmptyStateModule,
            i1$2.AdaptIconModule,
            i1$2.AdaptRxSelectModule,
            i1$2.AdaptPopoverModule,
            i1$2.AdaptTabsModule,
            i4$3.AdaptTableModule,
            i1$2.AdaptDropdownModule,
            i1$2.AdaptBadgeModule,
            i1$2.AdaptAdvancedFilteringModule,
            i1$2.AdaptTreeModule,
            i1$2.AdaptSubnavModule,
            i1$2.AdaptBusyModule,
            i7.RecordGridModule,
            i1$2.AdaptAlertModule] });
    HkmAccessMappingRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: HkmAccessMappingRegistrationModule, providers: [i1$2.ActiveModalRef], imports: [[
                i4.AdminSettingsModule,
                i1.FormsModule,
                i1.ReactiveFormsModule,
                i8.CommonModule,
                i4$1.TranslateModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptRxListBuilderModule,
                i1$2.AdaptEmptyStateModule,
                i1$2.AdaptIconModule,
                i1$2.AdaptRxSelectModule,
                i1$2.AdaptPopoverModule,
                i1$2.AdaptTabsModule,
                i4$3.AdaptTableModule,
                i1$2.AdaptDropdownModule,
                i1$2.AdaptBadgeModule,
                i1$2.AdaptAdvancedFilteringModule,
                i1$2.AdaptTreeModule,
                i1$2.AdaptSubnavModule,
                i1$2.AdaptBusyModule,
                i7.RecordGridModule,
                i1$2.AdaptAlertModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: HkmAccessMappingRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [HkmAccessMappingAdminComponent, HkmAccessMapEditorComponent],
                        imports: [
                            i4.AdminSettingsModule,
                            i1.FormsModule,
                            i1.ReactiveFormsModule,
                            i8.CommonModule,
                            i4$1.TranslateModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptRxListBuilderModule,
                            i1$2.AdaptEmptyStateModule,
                            i1$2.AdaptIconModule,
                            i1$2.AdaptRxSelectModule,
                            i1$2.AdaptPopoverModule,
                            i1$2.AdaptTabsModule,
                            i4$3.AdaptTableModule,
                            i1$2.AdaptDropdownModule,
                            i1$2.AdaptBadgeModule,
                            i1$2.AdaptAdvancedFilteringModule,
                            i1$2.AdaptTreeModule,
                            i1$2.AdaptSubnavModule,
                            i1$2.AdaptBusyModule,
                            i7.RecordGridModule,
                            i1$2.AdaptAlertModule
                        ],
                        providers: [i1$2.ActiveModalRef],
                        entryComponents: [HkmAccessMappingAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RX_IFRAME_SECURITY = {
        sections: {
            iframeAllowedSites: {
                infoMessage: 'com.bmc.arsys.rx.client.admin.iframe-security.allowed-sites-info.message',
                name: 'iframeAllowedSites',
                settingName: 'iframeAllowedSites',
                title: 'com.bmc.arsys.rx.client.admin.iframe-security.trusted-web-applications.title',
                urls: []
            },
            trustedWebsites: {
                infoMessage: 'com.bmc.arsys.rx.client.admin.iframe-security.trusted-sites-info.message',
                name: 'trustedWebsites',
                settingName: 'trustedWebsites',
                title: 'com.bmc.arsys.rx.client.admin.iframe-security.trusted-websites.title',
                urls: []
            }
        }
    };

    var RxIframeSecurityService = /** @class */ (function () {
        function RxIframeSecurityService(rxSystemConfigurationService) {
            this.rxSystemConfigurationService = rxSystemConfigurationService;
        }
        RxIframeSecurityService.prototype.getIframeSecurities = function () {
            return rxjs.forkJoin({
                iframeAllowedSites: this.rxSystemConfigurationService.getConfiguration(RX_IFRAME_SECURITY.sections.iframeAllowedSites.settingName),
                trustedWebsites: this.rxSystemConfigurationService.getConfiguration(RX_IFRAME_SECURITY.sections.trustedWebsites.settingName)
            });
        };
        RxIframeSecurityService.prototype.postIframeSecurities = function (allowedSitesData, trustedWebsitesData) {
            return rxjs.forkJoin([
                this.rxSystemConfigurationService.setConfiguration(RX_IFRAME_SECURITY.sections.iframeAllowedSites.settingName, allowedSitesData.value),
                this.rxSystemConfigurationService.setConfiguration(RX_IFRAME_SECURITY.sections.trustedWebsites.settingName, trustedWebsitesData.value)
            ]);
        };
        return RxIframeSecurityService;
    }());
    RxIframeSecurityService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxIframeSecurityService, deps: [{ token: i2__namespace.RxSystemConfigurationService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxIframeSecurityService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxIframeSecurityService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxIframeSecurityService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxSystemConfigurationService }]; } });

    var IframeSecurityAdminComponent = /** @class */ (function (_super) {
        __extends(IframeSecurityAdminComponent, _super);
        function IframeSecurityAdminComponent(rxIframeSecurityService, rxNotificationService, rxUrlUtilsService, translateService) {
            var _this = _super.call(this) || this;
            _this.rxIframeSecurityService = rxIframeSecurityService;
            _this.rxNotificationService = rxNotificationService;
            _this.rxUrlUtilsService = rxUrlUtilsService;
            _this.translateService = translateService;
            _this.hostClass = 'd-block col-12 col-sm-12 col-md-10 col-lg-8 col-xl-6 p-0';
            _this.sections = lodash.cloneDeep(RX_IFRAME_SECURITY.sections);
            _this.listBuilderTexts = {
                searchPlaceholder: _this.translateService.instant('com.bmc.arsys.rx.client.admin.iframe-security.filter-or-add-urls.label'),
                notFound: _this.translateService.instant('com.bmc.arsys.rx.client.admin.iframe-security.no-urls-added.label')
            };
            _this.counter = 0;
            _this.invalidUrlMsg = _this.translateService.instant('com.bmc.arsys.rx.client.admin.invalid-url.label');
            _this.duplicateUrlMsg = _this.translateService.instant('com.bmc.arsys.rx.client.designer.validation.duplicate-value.message');
            _this.generateId = function () {
                return _this.counter++;
            };
            _this.iframeAllowedSitesValidation = function (value, items) {
                return _this.itemValidation(value, items, false);
            };
            _this.trustedWebsitesValidation = function (value, items) {
                return _this.itemValidation(value, items);
            };
            return _this;
        }
        IframeSecurityAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.notifyPropertyChanged('api', {
                isDirty: function () { return _this.isDirty(); }
            });
            this.busy = this.rxIframeSecurityService.getIframeSecurities().subscribe(function (result) {
                var iframeAllowedSites = result.iframeAllowedSites;
                var trustedWebsites = result.trustedWebsites;
                if (iframeAllowedSites.value) {
                    _this.sections.iframeAllowedSites.urls = lodash.map(iframeAllowedSites.value.split(' '), function (url) { return ({
                        id: _this.generateId(),
                        name: url
                    }); });
                }
                if (trustedWebsites.value) {
                    _this.sections.trustedWebsites.urls = lodash.map(trustedWebsites.value.split(' '), function (url) { return ({
                        id: _this.generateId(),
                        name: url
                    }); });
                }
            });
        };
        IframeSecurityAdminComponent.prototype.isDirty = function () {
            return this.iframeAllowedSitesListBuilder.dirty || this.trustedWebsitesListBuilder.dirty;
        };
        IframeSecurityAdminComponent.prototype.onSaveClick = function () {
            var _this = this;
            var iframeAllowedSitesData = {
                id: this.sections.iframeAllowedSites.name,
                name: this.sections.iframeAllowedSites.name,
                value: lodash.map(this.sections.iframeAllowedSites.urls, 'name').join(' ')
            };
            var trustedWebsitesData = {
                id: this.sections.trustedWebsites.name,
                name: this.sections.trustedWebsites.name,
                value: lodash.map(this.sections.trustedWebsites.urls, 'name').join(' ')
            };
            this.rxIframeSecurityService.postIframeSecurities(iframeAllowedSitesData, trustedWebsitesData).subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.iframe-security.iframe-security-information-saved.message'));
                _this.iframeAllowedSitesListBuilder.control.markAsPristine();
                _this.trustedWebsitesListBuilder.control.markAsPristine();
            });
        };
        IframeSecurityAdminComponent.prototype.itemValidation = function (value, items, isProtocolRequired) {
            if (isProtocolRequired === void 0) { isProtocolRequired = true; }
            var errorMessage = null;
            if (lodash.some(items, { name: value })) {
                errorMessage = this.duplicateUrlMsg;
            }
            else if (!this.rxUrlUtilsService.isValidUrl(value, isProtocolRequired)) {
                errorMessage = this.invalidUrlMsg;
            }
            return errorMessage;
        };
        return IframeSecurityAdminComponent;
    }(i4$2.BaseViewComponent));
    IframeSecurityAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IframeSecurityAdminComponent, deps: [{ token: RxIframeSecurityService }, { token: i2__namespace.RxNotificationService }, { token: i3__namespace.RxUrlUtilsService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    IframeSecurityAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: IframeSecurityAdminComponent, selector: "rx-admin-iframe-security", host: { properties: { "class": "this.hostClass" } }, viewQueries: [{ propertyName: "iframeAllowedSitesListBuilder", first: true, predicate: ["iframeAllowedSitesListBuilder"], descendants: true, read: i1.NgModel, static: true }, { propertyName: "trustedWebsitesListBuilder", first: true, predicate: ["trustedWebsitesListBuilder"], descendants: true, read: i1.NgModel, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "<rx-admin-settings header=\"Iframe security\" [busy]=\"busy\">\n  <h4>{{ sections.iframeAllowedSites.title | translate }}</h4>\n\n  <adapt-rx-list-builder\n    class=\"d-block mb-4\"\n    name=\"iframeAllowedSitesListBuilder\"\n    [(ngModel)]=\"sections.iframeAllowedSites.urls\"\n    [label]=\"sections.iframeAllowedSites.infoMessage | translate\"\n    [texts]=\"listBuilderTexts\"\n    [itemValidation]=\"iframeAllowedSitesValidation\"\n    hideListAreaLabel=\"true\"\n    #iframeAllowedSitesListBuilder=\"ngModel\"\n  ></adapt-rx-list-builder>\n\n  <h4>{{ sections.trustedWebsites.title | translate }}</h4>\n\n  <adapt-rx-list-builder\n    class=\"d-block mb-4\"\n    name=\"trustedWebsitesListBuilder\"\n    [(ngModel)]=\"sections.trustedWebsites.urls\"\n    [label]=\"sections.trustedWebsites.infoMessage | translate\"\n    [texts]=\"listBuilderTexts\"\n    [itemValidation]=\"trustedWebsitesValidation\"\n    hideListAreaLabel=\"true\"\n    #trustedWebsitesListBuilder=\"ngModel\"\n  ></adapt-rx-list-builder>\n\n  <button\n    class=\"align-self-start\"\n    rx-id=\"save-button\"\n    adapt-button\n    btn-type=\"primary\"\n    size=\"small\"\n    type=\"button\"\n    [disabled]=\"!isDirty()\"\n    (click)=\"onSaveClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptRxListBuilderComponent, selector: "adapt-rx-list-builder", inputs: ["hideSearchField", "hideEdit", "hideDelete", "hideListAreaLabel", "customSort", "texts", "menuHeight", "listItemMaxLength", "generateListItemId", "itemValidation", "disabled", "treeStructure", "listItemFormatter", "listItemSetterProp", "listItemContentTemplate", "selectionMode"], outputs: ["listItemAdd", "listItemEdit", "listItemUpdate", "listItemRemove"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IframeSecurityAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-iframe-security',
                        templateUrl: './iframe-security.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: RxIframeSecurityService }, { type: i2__namespace.RxNotificationService }, { type: i3__namespace.RxUrlUtilsService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { hostClass: [{
                    type: i0.HostBinding,
                    args: ['class']
                }], iframeAllowedSitesListBuilder: [{
                    type: i0.ViewChild,
                    args: ['iframeAllowedSitesListBuilder', { read: i1.NgModel, static: true }]
                }], trustedWebsitesListBuilder: [{
                    type: i0.ViewChild,
                    args: ['trustedWebsitesListBuilder', { read: i1.NgModel, static: true }]
                }] } });

    var IframeSecurityRegistrationModule = /** @class */ (function () {
        function IframeSecurityRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-iframe-security',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(IframeSecurityAdminComponent),
                name: 'Iframe security',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return IframeSecurityRegistrationModule;
    }());
    IframeSecurityRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IframeSecurityRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    IframeSecurityRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IframeSecurityRegistrationModule, declarations: [IframeSecurityAdminComponent], imports: [i1$2.AdaptButtonModule,
            i1$2.AdaptRxListBuilderModule,
            i4.AdminSettingsModule,
            i8.CommonModule,
            i1.FormsModule,
            i4$1.TranslateModule] });
    IframeSecurityRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IframeSecurityRegistrationModule, imports: [[
                i1$2.AdaptButtonModule,
                i1$2.AdaptRxListBuilderModule,
                i4.AdminSettingsModule,
                i8.CommonModule,
                i1.FormsModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IframeSecurityRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [IframeSecurityAdminComponent],
                        imports: [
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptRxListBuilderModule,
                            i4.AdminSettingsModule,
                            i8.CommonModule,
                            i1.FormsModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [IframeSecurityAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var AuthTypes;
    (function (AuthTypes) {
        AuthTypes[AuthTypes["ANONYMOUS"] = 0] = "ANONYMOUS";
        AuthTypes[AuthTypes["BASIC"] = 10] = "BASIC";
        AuthTypes[AuthTypes["APIKEY"] = 20] = "APIKEY";
        AuthTypes[AuthTypes["OAUTH2"] = 30] = "OAUTH2";
        AuthTypes[AuthTypes["CUSTOM"] = 40] = "CUSTOM";
    })(AuthTypes || (AuthTypes = {}));

    var authTypeOptions$1 = [
        {
            id: AuthTypes.ANONYMOUS,
            key: 'ANONYMOUS',
            labelKey: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.anonymous.label'
        },
        {
            id: AuthTypes.BASIC,
            key: 'BASIC',
            labelKey: 'com.bmc.arsys.rx.client.admin.cognitive-training.record-data-set-blade.basic.label'
        },
        {
            id: AuthTypes.APIKEY,
            key: 'APIKEY',
            labelKey: 'com.bmc.arsys.rx.client.admin.cognitive-service.api-key.label'
        },
        {
            id: AuthTypes.OAUTH2,
            key: 'OAUTH2',
            labelKey: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.oauth.label'
        },
        {
            id: AuthTypes.CUSTOM,
            key: 'CUSTOM',
            labelKey: 'com.bmc.arsys.rx.client.admin.web-api-connections.endpoint-type.custom.label'
        }
    ];
    var RX_IPAAS_APIS = {
        fieldIds: {
            groupName: 71003,
            apiName: 71004,
            organization: 71001,
            environment: 71002,
            path: 71005,
            method: 71006
        },
        methods: {
            0: 'GET',
            10: 'POST',
            20: 'PUT',
            30: 'DELETE'
        },
        authTypeOptions: authTypeOptions$1,
        authTypeFields: {
            0: [],
            10: [
                {
                    name: 'username',
                    labelKey: 'com.bmc.arsys.rx.client.common.user-name.label',
                    rxId: 'username',
                    isRequired: true
                },
                {
                    name: 'credentials',
                    labelKey: 'com.bmc.arsys.rx.client.common.password.label',
                    rxId: 'password',
                    isPassword: true,
                    isRequired: true
                }
            ],
            20: [
                {
                    name: 'key',
                    labelKey: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-key-name.label',
                    rxId: 'key',
                    isRequired: true
                },
                {
                    name: 'value',
                    labelKey: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-key-value.label',
                    rxId: 'value',
                    isPassword: true,
                    isRequired: true
                }
            ],
            30: [
                {
                    name: 'authServerEndpoint',
                    labelKey: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.auth-server-endpoint.label',
                    rxId: 'authServerEndpoint',
                    isRequired: true
                },
                {
                    name: 'tokenPath',
                    labelKey: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.token-url.label',
                    rxId: 'tokenPath',
                    isRequired: true
                },
                {
                    name: 'username',
                    labelKey: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-id.label',
                    rxId: 'username',
                    isRequired: true
                },
                {
                    name: 'credentials',
                    labelKey: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-secret.label',
                    rxId: 'credentials',
                    isPassword: true,
                    isRequired: true
                },
                {
                    name: 'redirectUri',
                    labelKey: 'com.bmc.arsys.rx.client.admin.web-api-connections.redirect-uri.label',
                    rxId: 'redirectUri'
                },
                {
                    name: 'scope',
                    labelKey: 'com.bmc.arsys.rx.client.admin.web-api-connections.scope.label',
                    rxId: 'scope'
                }
            ]
        }
    };

    var ApiEditorBase = /** @class */ (function (_super) {
        __extends(ApiEditorBase, _super);
        function ApiEditorBase(activeModalRef, injector) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.activeModalRef = activeModalRef;
            _this.injector = injector;
            _this.formBuilder = _this.injector.get(i1.FormBuilder);
            _this.rxNotificationService = _this.injector.get(i2.RxNotificationService);
            _this.translateService = _this.injector.get(i4$1.TranslateService);
            _this.rxRecordInstanceDataPageService = _this.injector.get(i3.RxRecordInstanceDataPageService);
            _this.organizations = [];
            _this.environments = [];
            _this.groupNameList = [];
            _this.methodTypeOptions = [];
            _this.authTypeOptions = [];
            _this.activeIndex = 0;
            _this.isEditMode = false;
            _this.authTypeFields = [];
            _this.apiPaths = [];
            _this.loadingState = false;
            _this.defaultSelection = _this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');
            _this.destroyed$ = new rxjs.ReplaySubject(1);
            _this.optionFormatterLabel = function (option) { return _this.translateService.instant(lodash.get(option, 'labelKey', _this.defaultSelection)); };
            _this.optionFormatterName = function (option) { return _this.translateService.instant(lodash.get(option, 'name', _this.defaultSelection)); };
            _this.selectedApiDefinition = _this.activeModalRef.getData();
            _this.isEditMode = Boolean(_this.selectedApiDefinition.id);
            return _this;
        }
        ApiEditorBase.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.ipaasApiEditorForm = this.formBuilder.group({
                organization: [[], i1.Validators.required],
                environment: [[], i1.Validators.required],
                apiPath: [[], i1.Validators.required],
                apiGroupName: ['', [i1.Validators.required, i1.Validators.maxLength(254), i1.Validators.pattern('^[a-zA-Z0-9 _-]+$')]],
                apiName: ['', [i1.Validators.required, i1.Validators.maxLength(254), i1.Validators.pattern('^[a-zA-Z0-9 _-]+$')]],
                requestMethod: [[], i1.Validators.required],
                authorizationType: [[], i1.Validators.required],
                headers: this.formBuilder.array([]),
                queryParameters: this.formBuilder.array([]),
                authTypeDetails: this.formBuilder.array([]),
                customAuthTypeHeaders: this.formBuilder.array([]),
                customAuthTypeQueryParams: this.formBuilder.array([])
            });
            this.ipaasApiEditorForm.patchValue({ apiGroupName: this.selectedApiDefinition.groupName });
            this.busy = this.getOrganizationsAndEnvironments().subscribe(function (data) {
                _this.organizations = data;
                if (_this.organizations.length === 1) {
                    _this.ipaasApiEditorForm.get('organization').setValue([_this.organizations[0]]);
                    _this.getEnvironments(_this.organizations[0]);
                }
            });
            this.getGroupAndApiDetails();
            if (this.isEditMode) {
                this.busy = this.getApiDefinition(this.selectedApiDefinition.id)
                    .pipe(operators.switchMap(function (data) {
                    var _a, _b;
                    _this.initialApiDefinition = lodash.cloneDeep(data);
                    _this.ipaasApiEditorForm.patchValue({
                        organization: [{ name: data.organization, id: data.organizationId }],
                        environment: [{ name: data.environment, id: data.environmentId }],
                        apiPath: [data.path],
                        apiGroupName: data.group,
                        apiName: data.name,
                        requestMethod: [RX_IPAAS_APIS.methods[data.method]],
                        authorizationType: [lodash.find(RX_IPAAS_APIS.authTypeOptions, function (type) { return type.id === data.authType; })]
                    });
                    _this.selectedOrganization = { id: data.organizationId, name: data.organization };
                    _this.authTypeFields = RX_IPAAS_APIS.authTypeFields[data.authType];
                    _this.isCustomAuthType = data.authType === AuthTypes.CUSTOM;
                    if (_this.isCustomAuthType) {
                        lodash.forEach(data.authTypeDetails.httpHeaders, function (httpHeader) { return _this.ipaasApiEditorForm.get('customAuthTypeHeaders').push(_this.customAuthTypeFormItem(httpHeader)); });
                        lodash.forEach(data.authTypeDetails.queryParams, function (queryParam) { return _this.ipaasApiEditorForm.get('customAuthTypeQueryParams').push(_this.customAuthTypeFormItem(queryParam)); });
                    }
                    else {
                        _this.createAuthTypeFormFields();
                    }
                    lodash.forEach(lodash.compact((_a = data.headers) === null || _a === void 0 ? void 0 : _a.split(',')), function (header) {
                        _this.setApiVariables('headers', header);
                    });
                    lodash.forEach(lodash.compact((_b = data.queryParams) === null || _b === void 0 ? void 0 : _b.split(',')), function (param) {
                        _this.setApiVariables('queryParameters', param);
                    });
                    return _this.getApiPathDefinitions({ name: data.environment, id: data.environmentId });
                }))
                    .subscribe(function (apiPath) {
                    _this.onEditMethodAndAuthTypeUpdate(apiPath);
                });
            }
            this.ipaasApiEditorForm
                .get('apiName')
                .valueChanges.pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (value) {
                var _a;
                var isApiNameAlreadyExists = !(((_a = _this.selectedApiDefinition) === null || _a === void 0 ? void 0 : _a.apiName) === value) &&
                    lodash.some(_this.groupAndApiNameList, function (group) { return group[RX_IPAAS_APIS.fieldIds.groupName] === lodash.trim(_this.ipaasApiEditorForm.get('apiGroupName').value) &&
                        lodash.includes(group.apis, lodash.trim(value)); });
                if (isApiNameAlreadyExists) {
                    _this.ipaasApiEditorForm.get('apiName').setErrors({
                        invalidApi: {
                            message: _this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-api-editor.api-name-exists.error.message')
                        }
                    });
                }
            });
            this.ipaasApiEditorForm
                .get('apiGroupName')
                .valueChanges.pipe(operators.distinctUntilChanged(), operators.takeUntil(this.destroyed$))
                .subscribe(function () {
                _this.ipaasApiEditorForm.get('apiName').updateValueAndValidity();
            });
        };
        ApiEditorBase.prototype.isDirty = function () {
            return this.ipaasApiEditorForm.dirty;
        };
        ApiEditorBase.prototype.createFormItem = function (value) {
            return this.formBuilder.group({
                name: [value, [i1.Validators.maxLength(254), i1.Validators.pattern('^[a-zA-Z0-9_-]+$')]]
            });
        };
        ApiEditorBase.prototype.customAuthTypeFormItem = function (fieldData) {
            return this.formBuilder.group({
                key: [fieldData.key, [i1.Validators.required, i1.Validators.maxLength(254), i1.Validators.pattern('^[a-zA-Z0-9_-]+$')]],
                value: [fieldData.value, [i1.Validators.required, i1.Validators.maxLength(254), i1.Validators.pattern('^[a-zA-Z0-9_-]+$')]]
            });
        };
        ApiEditorBase.prototype.getEnvironments = function (organization) {
            this.selectedOrganization = organization;
            this.environments = organization.environments || [];
            if (this.environments.length === 1) {
                this.ipaasApiEditorForm.get('environment').setValue([this.environments[0]]);
                this.getApiPaths(this.environments[0]);
            }
            else {
                this.ipaasApiEditorForm.get('environment').setValue([]);
                this.getApiPaths();
            }
        };
        ApiEditorBase.prototype.setApiVariables = function (type, value) {
            var apiVariable = this.ipaasApiEditorForm.get(type);
            apiVariable.push(this.createFormItem(value));
        };
        ApiEditorBase.prototype.getAuthTypes = function (method) {
            var _this = this;
            var _a, _b, _c, _d;
            this.ipaasApiEditorForm.get('authorizationType').setValue([]);
            this.authTypeFieldDetails = (_a = this.apiPathDetails[this.selectedApiPath][method]) === null || _a === void 0 ? void 0 : _a.authTypes;
            this.authTypeOptions = lodash.map(this.authTypeFieldDetails, function (option) { return lodash.find(RX_IPAAS_APIS.authTypeOptions, function (type) { return type.id === AuthTypes[lodash.keys(option)[0]]; }); });
            if (((_b = this.authTypeOptions) === null || _b === void 0 ? void 0 : _b.length) === 1) {
                this.ipaasApiEditorForm.get('authorizationType').setValue([this.authTypeOptions[0]]);
                this.getAuthTypeFields(this.authTypeOptions[0]);
            }
            else {
                this.authTypeFields = RX_IPAAS_APIS.authTypeFields[0];
                this.createAuthTypeFormFields();
            }
            lodash.forEach((_c = this.apiPathDetails[this.selectedApiPath][method]) === null || _c === void 0 ? void 0 : _c.headers, function (header) {
                _this.setApiVariables('headers', header);
            });
            lodash.forEach((_d = this.apiPathDetails[this.selectedApiPath][method]) === null || _d === void 0 ? void 0 : _d.queryParams, function (param) {
                _this.setApiVariables('queryParameters', param);
            });
        };
        ApiEditorBase.prototype.onEditMethodAndAuthTypeUpdate = function (apiPath) {
            var _a;
            this.environments = this.getEnvironmentList();
            this.apiPaths = lodash.keys(apiPath);
            this.apiPathDetails = apiPath;
            this.selectedApiPath = this.initialApiDefinition.path;
            this.methodTypeOptions = lodash.keys(apiPath[this.initialApiDefinition.path]);
            this.authTypeFieldDetails =
                (_a = this.apiPathDetails[this.selectedApiPath][RX_IPAAS_APIS.methods[this.initialApiDefinition.method]]) === null || _a === void 0 ? void 0 : _a.authTypes;
            this.authTypeOptions = lodash.map(this.authTypeFieldDetails, function (option) { return lodash.find(RX_IPAAS_APIS.authTypeOptions, { id: AuthTypes[lodash.keys(option)[0]] }); });
        };
        ApiEditorBase.prototype.getApiPaths = function (environment) {
            var _this = this;
            this.ipaasApiEditorForm.get('apiPath').setValue([]);
            this.apiPaths = [];
            this.resetFormFields();
            if (environment) {
                this.loadingState = true;
                this.getApiPathDefinitions(environment).subscribe(function (response) {
                    _this.apiPathDetails = response;
                    _this.apiPaths = lodash.keys(response);
                    if (_this.apiPaths.length === 1) {
                        _this.ipaasApiEditorForm.get('apiPath').setValue([_this.apiPaths[0]]);
                        _this.getApiMethods(_this.apiPaths[0]);
                    }
                    _this.loadingState = false;
                }, function () {
                    _this.loadingState = false;
                });
            }
        };
        ApiEditorBase.prototype.getApiMethods = function (apiPath) {
            var _a;
            this.resetFormFields();
            this.selectedApiPath = apiPath;
            this.methodTypeOptions = lodash.keys(this.apiPathDetails[this.selectedApiPath]);
            if (((_a = this.methodTypeOptions) === null || _a === void 0 ? void 0 : _a.length) === 1) {
                this.ipaasApiEditorForm.get('requestMethod').setValue([this.methodTypeOptions[0]]);
                this.getAuthTypes(this.methodTypeOptions[0]);
            }
        };
        ApiEditorBase.prototype.getGroupAndApiDetails = function () {
            var _this = this;
            var params = {
                startIndex: 0,
                pageSize: -1,
                recorddefinition: this.selectedApiDefinition.recordDefinitionName,
                propertySelection: [
                    RX_IPAAS_APIS.fieldIds.groupName,
                    RX_IPAAS_APIS.fieldIds.apiName,
                    i3.RX_RECORD_DEFINITION.coreFieldIds.id
                ]
            };
            this.rxRecordInstanceDataPageService
                .post({ params: params })
                .pipe(operators.map(function (response) { return ({
                data: lodash.map(lodash.groupBy(response.data, RX_IPAAS_APIS.fieldIds.groupName), function (options, id) {
                    var _e;
                    return _e = {},
                        _e[RX_IPAAS_APIS.fieldIds.groupName] = id,
                        _e.apis = lodash.map(options, function (option) { return option[RX_IPAAS_APIS.fieldIds.apiName]; }),
                        _e;
                })
            }); }))
                .subscribe(function (response) {
                _this.groupAndApiNameList = response.data;
                _this.groupNameList = lodash.sortBy(lodash.map(_this.groupAndApiNameList, function (option) { return option[RX_IPAAS_APIS.fieldIds.groupName]; }));
            });
        };
        ApiEditorBase.prototype.getAuthTypeFields = function (authType) {
            var _this = this;
            var _a, _b, _c, _d;
            var authTypeDetail = lodash.find(this.authTypeFieldDetails, authType.key)[authType.key];
            this.isCustomAuthType = authType.id === AuthTypes.CUSTOM;
            if (this.isCustomAuthType) {
                // "[foo, bar]" => ["foo", "bar"]
                var headerKeys = ((_b = (_a = authTypeDetail.headers) === null || _a === void 0 ? void 0 : _a.replace(/[\[\] ]/g, '')) === null || _b === void 0 ? void 0 : _b.split(',')) || [];
                var queryParamKeys = ((_d = (_c = authTypeDetail.queryParams) === null || _c === void 0 ? void 0 : _c.replace(/[\[\] ]/g, '')) === null || _d === void 0 ? void 0 : _d.split(',')) || [];
                this.ipaasApiEditorForm.get('customAuthTypeHeaders').clear();
                this.ipaasApiEditorForm.get('customAuthTypeQueryParams').clear();
                lodash.forEach(headerKeys, function (headerKey) { return _this.ipaasApiEditorForm.get('customAuthTypeHeaders').push(_this.customAuthTypeFormItem({ key: headerKey, value: '' })); });
                lodash.forEach(queryParamKeys, function (queryParamKey) { return _this.ipaasApiEditorForm.get('customAuthTypeQueryParams').push(_this.customAuthTypeFormItem({ key: queryParamKey, value: '' })); });
            }
            else {
                this.authTypeFields = RX_IPAAS_APIS.authTypeFields[authType.id];
                this.createAuthTypeFormFields(authTypeDetail);
            }
        };
        ApiEditorBase.prototype.createAuthTypeFormFields = function (fieldDetails) {
            var formArrayFields = this.authTypeFields.reduce(function (obj, item) {
                var _e;
                return Object.assign(obj, (_e = {}, _e[item.name] = '', _e));
            }, {});
            var authTypeDetails = this.ipaasApiEditorForm.get('authTypeDetails');
            this.isCustomAuthType = false;
            if (authTypeDetails === null || authTypeDetails === void 0 ? void 0 : authTypeDetails.length) {
                authTypeDetails.removeAt(0);
            }
            authTypeDetails.push(this.formBuilder.group(formArrayFields));
            fieldDetails =
                (this.initialApiDefinition && lodash.merge(this.initialApiDefinition.authTypeDetails, fieldDetails)) || fieldDetails;
            if (fieldDetails) {
                this.ipaasApiEditorForm.controls.authTypeDetails.patchValue([fieldDetails]);
            }
        };
        ApiEditorBase.prototype.tabChanged = function (_e) {
            var index = _e.index;
            this.activeIndex = index;
        };
        ApiEditorBase.prototype.addHeader = function () {
            this.headers = this.ipaasApiEditorForm.get('headers');
            this.headers.push(this.createFormItem(''));
        };
        ApiEditorBase.prototype.removeHeader = function (index) {
            this.headers = this.ipaasApiEditorForm.get('headers');
            this.headers.removeAt(index);
            this.ipaasApiEditorForm.markAsDirty();
        };
        ApiEditorBase.prototype.addQueryParameter = function () {
            this.queryParameters = this.ipaasApiEditorForm.get('queryParameters');
            this.queryParameters.push(this.createFormItem(''));
        };
        ApiEditorBase.prototype.removeQueryParameter = function (index) {
            this.queryParameters = this.ipaasApiEditorForm.get('queryParameters');
            this.queryParameters.removeAt(index);
            this.ipaasApiEditorForm.markAsDirty();
        };
        ApiEditorBase.prototype.addCustomAuthTypeHeader = function () {
            this.ipaasApiEditorForm.get('customAuthTypeHeaders').push(this.customAuthTypeFormItem({ key: '', value: '' }));
        };
        ApiEditorBase.prototype.removeCustomAuthTypeHeader = function (index) {
            this.ipaasApiEditorForm.get('customAuthTypeHeaders').removeAt(index);
            this.ipaasApiEditorForm.markAsDirty();
        };
        ApiEditorBase.prototype.addCustomAuthTypeQueryParam = function () {
            this.ipaasApiEditorForm.get('customAuthTypeQueryParams').push(this.customAuthTypeFormItem({ key: '', value: '' }));
        };
        ApiEditorBase.prototype.removeCustomAuthTypeQueryParam = function (index) {
            this.ipaasApiEditorForm.get('customAuthTypeQueryParams').removeAt(index);
            this.ipaasApiEditorForm.markAsDirty();
        };
        ApiEditorBase.prototype.isSaveButtonDisabled = function () {
            return this.ipaasApiEditorForm.pristine || this.ipaasApiEditorForm.invalid;
        };
        ApiEditorBase.prototype.save = function () {
            var _this = this;
            var adminSetting$;
            var formValue = this.ipaasApiEditorForm.getRawValue();
            var headers = lodash.map(formValue.headers, function (header) { return header.name; });
            var queryParams = lodash.map(formValue.queryParameters, function (parameter) { return parameter.name; });
            if (this.isCustomAuthType) {
                formValue.authTypeDetails = [
                    {
                        httpHeaders: formValue.customAuthTypeHeaders,
                        queryParams: formValue.customAuthTypeQueryParams
                    }
                ];
            }
            var param = {
                organization: formValue.organization[0].name,
                environment: formValue.environment[0].name,
                group: formValue.apiGroupName,
                name: formValue.apiName,
                path: formValue.apiPath[0],
                method: lodash.findKey(RX_IPAAS_APIS.methods, function (value) { return value === formValue.requestMethod[0]; }),
                authType: formValue.authorizationType[0].id,
                queryParams: lodash.pull(queryParams, '').toString(),
                headers: lodash.pull(headers, '').toString(),
                description: formValue.apiGroupName + ": " + formValue.apiName,
                authTypeDetails: formValue.authTypeDetails[0] || {}
            };
            if (this.isEditMode) {
                param.id = this.initialApiDefinition.id;
                adminSetting$ = this.editApiDefinition(param, formValue);
            }
            else {
                adminSetting$ = this.createApiDefinition(param, formValue);
            }
            this.busy = adminSetting$.subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-api-editor.save.success.message'));
                _this.activeModalRef.close(adminSetting$);
            });
        };
        ApiEditorBase.prototype.cancel = function () {
            this.activeModalRef.dismiss(i1$2.DismissReasons.CLOSE_BTN);
        };
        ApiEditorBase.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        ApiEditorBase.prototype.resetFormFields = function () {
            this.methodTypeOptions = [];
            this.ipaasApiEditorForm.get('requestMethod').setValue([]);
            this.authTypeOptions = [];
            this.ipaasApiEditorForm.get('authorizationType').setValue([]);
            this.authTypeFields = RX_IPAAS_APIS.authTypeFields[0];
            this.createAuthTypeFormFields();
        };
        return ApiEditorBase;
    }(i1$1.RxModalClass));
    ApiEditorBase.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApiEditorBase, deps: [{ token: i1__namespace$1.ActiveModalRef }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ApiEditorBase.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApiEditorBase });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ApiEditorBase, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ActiveModalRef }, { type: i0__namespace.Injector }]; } });

    var RxJitterbitApisService = /** @class */ (function () {
        function RxJitterbitApisService(httpClient) {
            this.httpClient = httpClient;
            this.apiDefinitionUrl = '/api/com.bmc.dsm.ipaas-jitterbit/rx/application/ipaas/jitterbit';
        }
        RxJitterbitApisService.prototype.deleteApiDefinition = function (apiId) {
            return this.httpClient.delete(this.apiDefinitionUrl + "/apidefinition/" + apiId);
        };
        RxJitterbitApisService.prototype.createApiDefinition = function (apiDefinition) {
            return this.httpClient.post(this.apiDefinitionUrl + "/apidefinition", apiDefinition);
        };
        RxJitterbitApisService.prototype.getApiDefinition = function (apiId) {
            return this.httpClient.get(this.apiDefinitionUrl + "/apidefinition/" + apiId);
        };
        RxJitterbitApisService.prototype.editApiDefinition = function (apiDefinition) {
            return this.httpClient.put(this.apiDefinitionUrl + "/apidefinition/" + apiDefinition.id, apiDefinition);
        };
        RxJitterbitApisService.prototype.getOrganizationsAndEnvironments = function () {
            return this.httpClient.get(this.apiDefinitionUrl + "/organization-info");
        };
        RxJitterbitApisService.prototype.getApiPathDefinitions = function (organization, environment) {
            return this.httpClient.get(this.apiDefinitionUrl + "/api-specs/" + encodeURIComponent(organization) + "/" + encodeURIComponent(environment));
        };
        return RxJitterbitApisService;
    }());
    RxJitterbitApisService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxJitterbitApisService, deps: [{ token: i1__namespace$2.HttpClient }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxJitterbitApisService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxJitterbitApisService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxJitterbitApisService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }]; } });

    var JitterbitApiEditorComponent = /** @class */ (function (_super) {
        __extends(JitterbitApiEditorComponent, _super);
        function JitterbitApiEditorComponent(rxJitterbitApisService, activeModalRef, injector) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.rxJitterbitApisService = rxJitterbitApisService;
            _this.activeModalRef = activeModalRef;
            _this.injector = injector;
            return _this;
        }
        JitterbitApiEditorComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        JitterbitApiEditorComponent.prototype.getOrganizationsAndEnvironments = function () {
            return this.rxJitterbitApisService.getOrganizationsAndEnvironments().pipe(operators.map(function (organizationEnvironmentList) { return lodash.map(organizationEnvironmentList, function (environments, organization) { return ({
                name: organization,
                environments: lodash.map(environments, function (environment) { return ({ name: environment }); })
            }); }); }));
        };
        JitterbitApiEditorComponent.prototype.getApiPathDefinitions = function (environment) {
            return this.rxJitterbitApisService.getApiPathDefinitions(this.selectedOrganization.name, environment.name);
        };
        JitterbitApiEditorComponent.prototype.getApiDefinition = function (apiId) {
            return this.rxJitterbitApisService.getApiDefinition(apiId);
        };
        JitterbitApiEditorComponent.prototype.editApiDefinition = function (apiDefinition) {
            return this.rxJitterbitApisService.editApiDefinition(apiDefinition);
        };
        JitterbitApiEditorComponent.prototype.createApiDefinition = function (apiDefinition) {
            return this.rxJitterbitApisService.createApiDefinition(apiDefinition);
        };
        JitterbitApiEditorComponent.prototype.getEnvironmentList = function () {
            var _this = this;
            var _a;
            return ((_a = this.organizations.find(function (value) { return value.name === _this.selectedOrganization.name; })) === null || _a === void 0 ? void 0 : _a.environments) || [];
        };
        return JitterbitApiEditorComponent;
    }(ApiEditorBase));
    JitterbitApiEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JitterbitApiEditorComponent, deps: [{ token: RxJitterbitApisService }, { token: i1__namespace$1.ActiveModalRef }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    JitterbitApiEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: JitterbitApiEditorComponent, selector: "rx-jitterbit-api-editor", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"modal-body api-editor-modal-body\">\n  <rx-busy-indicator [options]=\"{ busy: busy, loaderType: 'section' }\"></rx-busy-indicator>\n\n  <form [formGroup]=\"ipaasApiEditorForm\">\n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <h6 class=\"mt-1 mb-3\">\n          {{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-path.label' | translate }}\n        </h6>\n\n        <adapt-rx-select\n          formControlName=\"organization\"\n          [options]=\"organizations\"\n          [optionFormatter]=\"optionFormatterName\"\n          rx-id=\"organization\"\n          label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.org' | translate }}\"\n          (onSelectionChange)=\"getEnvironments($event.options[0])\"\n          class=\"form-group d-block\"\n        >\n        </adapt-rx-select>\n\n        <adapt-rx-select\n          formControlName=\"environment\"\n          [options]=\"environments\"\n          [optionFormatter]=\"optionFormatterName\"\n          rx-id=\"environment\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-apis.environment.label' | translate }}\"\n          (onSelectionChange)=\"getApiPaths($event.options[0])\"\n          class=\"form-group d-block\"\n        >\n        </adapt-rx-select>\n\n        <adapt-rx-select\n          formControlName=\"apiPath\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-path.label' | translate }}\"\n          [options]=\"apiPaths\"\n          [enableFilter]=\"true\"\n          [loadingState]=\"loadingState\"\n          (onSelectionChange)=\"getApiMethods($event.options[0])\"\n          [tooltip]=\"{\n            iconName: 'question_circle_o',\n            content: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-paths.tooltip' | translate,\n            placement: 'right',\n            popoverMode: true\n          }\"\n        >\n        </adapt-rx-select>\n      </div>\n\n      <div class=\"col-md-4\">\n        <h6 class=\"mt-1 mb-3\">\n          {{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-properties.label' | translate }}\n        </h6>\n\n        <adapt-rx-select-editable\n          formControlName=\"apiGroupName\"\n          [options]=\"groupNameList\"\n          rx-id=\"api-group-name\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.api-group-name.label' | translate }}\"\n          class=\"form-group d-block\"\n          customOptionTitle=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.add-new.label' | translate }}\"\n          [customOptionOnTop]=\"true\"\n          [tooltip]=\"{\n            iconName: 'question_circle_o',\n            content: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-group-name.tooltip' | translate,\n            placement: 'right',\n            popoverMode: true\n          }\"\n        >\n        </adapt-rx-select-editable>\n\n        <adapt-rx-textfield\n          formControlName=\"apiName\"\n          rx-id=\"api-name\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-apis.api-name.label' | translate }}\"\n          class=\"form-group d-block\"\n          [tooltip]=\"\n            isEditMode\n              ? {\n                  iconName: 'question_circle_o',\n                  content: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.edit-api.api-name.tooltip' | translate,\n                  placement: 'right',\n                  popoverMode: true\n                }\n              : null\n          \"\n        >\n        </adapt-rx-textfield>\n\n        <adapt-rx-select\n          formControlName=\"requestMethod\"\n          [options]=\"methodTypeOptions\"\n          (onSelectionChange)=\"getAuthTypes($event.options[0])\"\n          rx-id=\"request-method\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.request-method.label' | translate }}\"\n          class=\"form-group d-block\"\n        >\n        </adapt-rx-select>\n\n        <adapt-rx-select\n          formControlName=\"authorizationType\"\n          [options]=\"authTypeOptions\"\n          [optionFormatter]=\"optionFormatterLabel\"\n          (onSelectionChange)=\"getAuthTypeFields($event.options[0])\"\n          rx-id=\"authorization-type\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.authorization-type.label' | translate }}\"\n          class=\"form-group d-block\"\n        >\n        </adapt-rx-select>\n\n        <ng-container *ngIf=\"!isCustomAuthType\">\n          <div\n            formArrayName=\"authTypeDetails\"\n            *ngFor=\"let authType of ipaasApiEditorForm.get('authTypeDetails')['controls']; let $index = index\"\n          >\n            <div [formGroupName]=\"$index\">\n              <adapt-rx-textfield\n                class=\"form-group d-block\"\n                *ngFor=\"let field of authTypeFields\"\n                [label]=\"field.labelKey | translate\"\n                [isPassword]=\"field.isPassword\"\n                [formControlName]=\"field.name\"\n                [attr.rx-id]=\"field.rxId\"\n                [required]=\"field.isRequired\"\n              >\n              </adapt-rx-textfield>\n            </div>\n          </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"isCustomAuthType\">\n          <button\n            adapt-button\n            type=\"button\"\n            btn-type=\"tertiary\"\n            class=\"d-icon-plus_circle px-0 d-block\"\n            rx-id=\"add-button\"\n            (click)=\"addCustomAuthTypeHeader()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.add-http-header.label' | translate }}\n          </button>\n          <div\n            formArrayName=\"customAuthTypeHeaders\"\n            *ngFor=\"\n              let customAuthTypeHeaders of ipaasApiEditorForm.get('customAuthTypeHeaders')['controls'];\n              let $index = index\n            \"\n          >\n            <div [formGroupName]=\"$index\">\n              <div class=\"card form-group\">\n                <div class=\"card-block\">\n                  <div class=\"d-flex justify-content-between\">\n                    <adapt-rx-control-label\n                      label=\"{{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.http-header.label' | translate }}\"\n                      showRequiredLabel=\"true\"\n                    ></adapt-rx-control-label>\n                    <span\n                      class=\"d-icon-cross_adapt form-group alert-link\"\n                      (click)=\"removeCustomAuthTypeHeader($index)\"\n                    ></span>\n                  </div>\n                  <adapt-rx-textfield\n                    formControlName=\"key\"\n                    placeholder=\"{{\n                      'com.bmc.arsys.rx.client.name-value-pairs-editor.enter-name.placeholder' | translate\n                    }}\"\n                    class=\"d-block form-group\"\n                  ></adapt-rx-textfield>\n                  <adapt-rx-textfield\n                    formControlName=\"value\"\n                    placeholder=\"{{\n                      'com.bmc.arsys.rx.client.name-value-pairs-editor.enter-value.placeholder' | translate\n                    }}\"\n                    class=\"d-block\"\n                  ></adapt-rx-textfield>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <button\n            adapt-button\n            type=\"button\"\n            btn-type=\"tertiary\"\n            class=\"d-icon-plus_circle px-0 d-block\"\n            rx-id=\"add-button\"\n            (click)=\"addCustomAuthTypeQueryParam()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.add-query-parameter.label' | translate }}\n          </button>\n          <div\n            formArrayName=\"customAuthTypeQueryParams\"\n            *ngFor=\"\n              let customAuthTypeQueryParams of ipaasApiEditorForm.get('customAuthTypeQueryParams')['controls'];\n              let $index = index\n            \"\n          >\n            <div [formGroupName]=\"$index\">\n              <div class=\"card form-group\">\n                <div class=\"card-block\">\n                  <div class=\"d-flex justify-content-between\">\n                    <adapt-rx-control-label\n                      label=\"{{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.query-parameter.label' | translate }}\"\n                      showRequiredLabel=\"true\"\n                    ></adapt-rx-control-label>\n                    <span\n                      class=\"d-icon-cross_adapt form-group alert-link\"\n                      (click)=\"removeCustomAuthTypeQueryParam($index)\"\n                    ></span>\n                  </div>\n                  <adapt-rx-textfield\n                    formControlName=\"key\"\n                    placeholder=\"{{\n                      'com.bmc.arsys.rx.client.name-value-pairs-editor.enter-name.placeholder' | translate\n                    }}\"\n                    class=\"d-block form-group\"\n                  ></adapt-rx-textfield>\n                  <adapt-rx-textfield\n                    formControlName=\"value\"\n                    placeholder=\"{{\n                      'com.bmc.arsys.rx.client.name-value-pairs-editor.enter-value.placeholder' | translate\n                    }}\"\n                    class=\"d-block\"\n                  ></adapt-rx-textfield>\n                </div>\n              </div>\n            </div>\n          </div>\n        </ng-container>\n      </div>\n\n      <div class=\"col-md-4\">\n        <h6 class=\"my-1\">\n          {{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-variables.label' | translate }}\n        </h6>\n\n        <adapt-tabset [type]=\"'pills'\" [tab-active]=\"activeIndex\" (tab-active-changed)=\"tabChanged($event)\">\n          <adapt-tab-panel\n            adapt-tab-title=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.headers.label' | translate }}\"\n          >\n            <button\n              adapt-button\n              type=\"button\"\n              btn-type=\"tertiary\"\n              class=\"d-icon-plus_circle px-0 align-self-start\"\n              rx-id=\"add-button\"\n              (click)=\"addHeader()\"\n            >\n              {{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.add-header.label' | translate }}\n            </button>\n\n            <div\n              formArrayName=\"headers\"\n              *ngFor=\"let header of ipaasApiEditorForm.get('headers')['controls']; let $index = index\"\n            >\n              <div class=\"d-flex\" [formGroupName]=\"$index\">\n                <adapt-rx-textfield\n                  formControlName=\"name\"\n                  class=\"d-block form-group pr-2 flex-fill\"\n                ></adapt-rx-textfield>\n                <button\n                  class=\"d-icon-minus_circle text-danger form-group px-0\"\n                  adapt-button\n                  btn-type=\"tertiary\"\n                  type=\"button\"\n                  (click)=\"removeHeader($index)\"\n                ></button>\n              </div>\n            </div>\n          </adapt-tab-panel>\n\n          <adapt-tab-panel\n            adapt-tab-title=\"{{\n              'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.query-parameters.label' | translate\n            }}\"\n          >\n            <button\n              adapt-button\n              type=\"button\"\n              btn-type=\"tertiary\"\n              class=\"d-icon-plus_circle px-0 align-self-start\"\n              rx-id=\"add-button\"\n              (click)=\"addQueryParameter()\"\n            >\n              {{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.add-query-parameter.label' | translate }}\n            </button>\n\n            <div\n              formArrayName=\"queryParameters\"\n              *ngFor=\"let parameter of ipaasApiEditorForm.get('queryParameters')['controls']; let $index = index\"\n            >\n              <div class=\"d-flex\" [formGroupName]=\"$index\">\n                <adapt-rx-textfield\n                  formControlName=\"name\"\n                  class=\"d-block form-group pr-2 flex-fill\"\n                ></adapt-rx-textfield>\n                <button\n                  class=\"d-icon-minus_circle text-danger form-group px-0\"\n                  adapt-button\n                  btn-type=\"tertiary\"\n                  type=\"button\"\n                  (click)=\"removeQueryParameter($index)\"\n                ></button>\n              </div>\n            </div>\n          </adapt-tab-panel>\n        </adapt-tabset>\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    (click)=\"save()\"\n    rx-id=\"save-button\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button type=\"button\" btn-type=\"secondary\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-select,adapt-rx-select-editable,adapt-rx-textfield{max-width:400px}.api-editor-modal-body{height:645px}.modal-body{overflow-y:auto}\n"], components: [{ type: i1__namespace.RxBusyIndicatorComponent, selector: "rx-busy-indicator", inputs: ["options"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptRxSelectEditableComponent, selector: "adapt-rx-select-editable", inputs: ["options", "placeholder", "customOptionTitle", "customOptionOnTop", "size", "menuMaxHeight", "placement", "appendToBody", "mobileView", "disabledStyleForReadonlyState", "popupClass", "customValueMatcher"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace$1.AdaptTabsComponent, selector: "adapt-tabset", inputs: ["showTabToolbar", "customCssTabContent", "fullHeight", "texts", "enableDnD", "customClassTabList", "allow-tabs-adding", "id", "testID", "dropdown-title", "fadeColor", "carouselMode", "justify", "type", "tab-active"], outputs: ["tab-index-closed", "tab-active-changed", "add-tab-clicked", "tabClicked", "tabDropped"], exportAs: ["adaptTabset"] }, { type: i1__namespace$1.AdaptTabsPanelComponent, selector: "adapt-tab-panel, div[tab-panel]", inputs: ["isActive", "badge-type", "animateBadge", "showBadgeAlert", "badgeAlertVariant", "badgeCustomClass", "adapt-tab-title", "disabled", "isHidden", "icon", "subtext", "icon-right", "icon-close", "aria-label", "aria-labelledby", "kebabMenu", "id", "renderContentWhenInactive", "badge"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace$3.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i1__namespace$3.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JitterbitApiEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-jitterbit-api-editor',
                        templateUrl: '../ipaas-base-apis/api-editor/api-editor.component.html',
                        styleUrls: ['../ipaas-base-apis/api-editor/api-editor.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: RxJitterbitApisService }, { type: i1__namespace$1.ActiveModalRef }, { type: i0__namespace.Injector }]; } });

    var GroupEditorComponent = /** @class */ (function (_super) {
        __extends(GroupEditorComponent, _super);
        function GroupEditorComponent(activeModalRef, injector) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.activeModalRef = activeModalRef;
            _this.injector = injector;
            return _this;
        }
        GroupEditorComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            this.groupName = this.activeModalRef.getData().groupName;
            this.groupNames = lodash.pull(this.activeModalRef.getData().groupNames, this.groupName);
            this.oldGroupName = this.groupName;
        };
        GroupEditorComponent.prototype.isDirty = function () {
            return this.groupNameForm.dirty;
        };
        GroupEditorComponent.prototype.isSaveButtonDisabled = function () {
            return this.groupNameForm.pristine || this.groupNameForm.invalid || this.oldGroupName === this.groupName;
        };
        GroupEditorComponent.prototype.saveGroupName = function () {
            this.activeModalRef.close(this.groupName);
        };
        GroupEditorComponent.prototype.cancel = function () {
            this.activeModalRef.dismiss(i1$2.DismissReasons.CLOSE_BTN);
        };
        return GroupEditorComponent;
    }(i1$1.RxModalClass));
    GroupEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: GroupEditorComponent, deps: [{ token: i1__namespace$1.ActiveModalRef }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    GroupEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: GroupEditorComponent, selector: "rx-group-editor", viewQueries: [{ propertyName: "groupNameForm", first: true, predicate: ["groupNameForm"], descendants: true, read: i1.NgForm, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "<form #groupNameForm=\"ngForm\">\n  <adapt-rx-textfield\n    name=\"group-name\"\n    rx-id=\"group-name\"\n    label=\"{{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.api-group-name.label' | translate }}\"\n    [(ngModel)]=\"groupName\"\n    [rxUnique]=\"{\n      errorMessage: 'com.bmc.arsys.rx.client.admin.ipaas-api-editor.group-name-exists.error.message' | translate,\n      items: groupNames\n    }\"\n    pattern=\"^[a-zA-Z0-9 _-]+$\"\n    maxlength=\"254\"\n    required=\"true\"\n    class=\"d-block form-group m-4\"\n  >\n  </adapt-rx-textfield>\n</form>\n\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    rx-id=\"save-button\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    (click)=\"saveGroupName()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button type=\"button\" btn-type=\"secondary\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield{max-width:400px}\n"], components: [{ type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { type: i1__namespace$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3__namespace.RxUniqueValidator, selector: "[rxUnique]", inputs: ["rxUnique"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: GroupEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-group-editor',
                        templateUrl: './group-editor.component.html',
                        styleUrls: ['./group-editor.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ActiveModalRef }, { type: i0__namespace.Injector }]; }, propDecorators: { groupNameForm: [{
                    type: i0.ViewChild,
                    args: ['groupNameForm', { read: i1.NgForm, static: true }]
                }] } });

    var RxIpaasBaseApisService = /** @class */ (function () {
        function RxIpaasBaseApisService(httpClient) {
            this.httpClient = httpClient;
        }
        RxIpaasBaseApisService.prototype.renameApiGroup = function (resourceType, oldGroupName, newGroupName) {
            return this.httpClient.post(i2.RX_RESOURCE_URLS.command, {
                resourceType: resourceType,
                oldGroup: oldGroupName,
                newGroup: newGroupName
            });
        };
        return RxIpaasBaseApisService;
    }());
    RxIpaasBaseApisService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxIpaasBaseApisService, deps: [{ token: i1__namespace$2.HttpClient }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxIpaasBaseApisService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxIpaasBaseApisService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxIpaasBaseApisService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }]; } });

    var IpaasBaseApisComponent = /** @class */ (function () {
        function IpaasBaseApisComponent(translateService, rxIpaasBaseApisService, rxNotificationService, rxModalService, rxViewActionUtilsService, rxRecordInstanceDataPageService) {
            this.translateService = translateService;
            this.rxIpaasBaseApisService = rxIpaasBaseApisService;
            this.rxNotificationService = rxNotificationService;
            this.rxModalService = rxModalService;
            this.rxViewActionUtilsService = rxViewActionUtilsService;
            this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            this.createApi = new i0.EventEmitter();
            this.editApi = new i0.EventEmitter();
            this.deleteApis = new i0.EventEmitter();
            this.recordDefinition = {
                fieldDefinitions: [
                    {
                        id: RX_IPAAS_APIS.fieldIds.groupName,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_IPAAS_APIS.fieldIds.apiName,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_IPAAS_APIS.fieldIds.organization,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_IPAAS_APIS.fieldIds.environment,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_IPAAS_APIS.fieldIds.path,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_IPAAS_APIS.fieldIds.method,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.selection,
                        optionNamesById: RX_IPAAS_APIS.methods
                    }
                ]
            };
        }
        IpaasBaseApisComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.gridConfig$ = rxjs.of({
                getData: this.getData.bind(this),
                recordDefinitionName: this.ipaasApisConfig.recordDefinitionName,
                columns: this.getColumns(),
                actionButtons: this.getActionButtons(),
                getRecordDefinition: function () { return rxjs.of(_this.recordDefinition); },
                styles: 'flex-fill'
            });
        };
        IpaasBaseApisComponent.prototype.getData = function (queryParams) {
            var params = Object.assign(Object.assign({}, queryParams), { propertySelection: [
                    i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                    RX_IPAAS_APIS.fieldIds.groupName,
                    RX_IPAAS_APIS.fieldIds.apiName,
                    RX_IPAAS_APIS.fieldIds.organization,
                    RX_IPAAS_APIS.fieldIds.environment,
                    RX_IPAAS_APIS.fieldIds.path,
                    RX_IPAAS_APIS.fieldIds.method
                ] });
            delete params.searchText;
            return this.rxRecordInstanceDataPageService.post({ params: params });
        };
        IpaasBaseApisComponent.prototype.getColumns = function () {
            var _this = this;
            return [
                {
                    fieldId: String(RX_IPAAS_APIS.fieldIds.groupName),
                    index: 0,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.jitterbit-apis.group-name.label'),
                    clickable: true,
                    actions: [
                        {
                            name: function (previousActionResult, lastActionRow) { return _this.renameGroup(lastActionRow); }
                        }
                    ],
                    sortable: { direction: i7.ColumnSortDirection.Asc, priority: 0 }
                },
                {
                    fieldId: String(RX_IPAAS_APIS.fieldIds.apiName),
                    index: 1,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.jitterbit-apis.api-name.label'),
                    clickable: true,
                    actions: [
                        {
                            name: function (previousActionResult, lastActionRow) { return _this.openEditApiDialog(lastActionRow); }
                        }
                    ],
                    sortable: { direction: i7.ColumnSortDirection.Asc, priority: 1 }
                },
                {
                    fieldId: String(RX_IPAAS_APIS.fieldIds.organization),
                    index: 2,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.approval.configuration.org')
                },
                {
                    fieldId: String(RX_IPAAS_APIS.fieldIds.environment),
                    index: 3,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.jitterbit-apis.environment.label')
                },
                {
                    fieldId: String(RX_IPAAS_APIS.fieldIds.path),
                    index: 4,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.jitterbit-apis.path.label')
                },
                {
                    fieldId: String(RX_IPAAS_APIS.fieldIds.method),
                    index: 5,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.jitterbit-apis.method.label')
                }
            ];
        };
        IpaasBaseApisComponent.prototype.getActionButtons = function () {
            var _this = this;
            return [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                    style: 'tertiary',
                    iconCls: 'trash',
                    actions: [
                        {
                            name: function () {
                                _this.rxModalService
                                    .confirm({
                                    title: _this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                                    modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                                    message: _this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-apis.delete-api.confirmation.message')
                                })
                                    .then(function (result) {
                                    if (result) {
                                        var records = lodash.castArray(_this.ipaasApisGrid.api.getSelectedRows());
                                        var recordIds = _this.rxViewActionUtilsService.extractRecordIds(records);
                                        _this.deleteApis.emit(recordIds);
                                    }
                                });
                            }
                        }
                    ]
                },
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.edit.label'),
                    style: 'tertiary',
                    icon: 'pencil',
                    disabled: function () { return _this.ipaasApisGrid.api.getSelectedRowCount() !== 1; },
                    actions: [
                        {
                            name: function () { return _this.openEditApiDialog(_this.ipaasApisGrid.api.getFirstSelectedRow()); }
                        }
                    ]
                }
            ];
        };
        IpaasBaseApisComponent.prototype.renameGroup = function (row) {
            var _this = this;
            this.rxModalService
                .openModal({
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-apis.rename-api-group.label'),
                content: GroupEditorComponent,
                size: i1$4.OpenViewActionModalSize.Xsmall,
                data: {
                    groupName: row[RX_IPAAS_APIS.fieldIds.groupName],
                    groupNames: lodash.map(this.ipaasApisGrid.adaptTableConfig.data, RX_IPAAS_APIS.fieldIds.groupName)
                }
            })
                .then(function (groupName) {
                _this.rxIpaasBaseApisService
                    .renameApiGroup(_this.ipaasApisConfig.resourceType, row[RX_IPAAS_APIS.fieldIds.groupName], groupName)
                    .subscribe(function () {
                    _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-apis.rename-group-save.success.message'));
                    _this.refreshIpaasGrid();
                });
            })
                .catch(rxjs.noop);
        };
        IpaasBaseApisComponent.prototype.openAddApiDialog = function () {
            var selectedGroup = this.ipaasApisGrid.api.getFirstSelectedRow();
            this.createApi.emit({
                groupName: lodash.get(selectedGroup, RX_IPAAS_APIS.fieldIds.groupName, ''),
                recordDefinitionName: this.ipaasApisConfig.recordDefinitionName
            });
        };
        IpaasBaseApisComponent.prototype.openEditApiDialog = function (row) {
            this.editApi.emit({
                id: row[i3.RX_RECORD_DEFINITION.coreFieldIds.id],
                apiName: row[RX_IPAAS_APIS.fieldIds.apiName],
                groupName: row[RX_IPAAS_APIS.fieldIds.groupName],
                recordDefinitionName: this.ipaasApisConfig.recordDefinitionName
            });
        };
        IpaasBaseApisComponent.prototype.refreshIpaasGrid = function () {
            this.ipaasApisGrid.api.refresh().subscribe();
        };
        return IpaasBaseApisComponent;
    }());
    IpaasBaseApisComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IpaasBaseApisComponent, deps: [{ token: i4__namespace.TranslateService }, { token: RxIpaasBaseApisService }, { token: i2__namespace.RxNotificationService }, { token: i1__namespace.RxModalService }, { token: i1__namespace$4.RxViewActionUtilsService }, { token: i3__namespace$2.RxRecordInstanceDataPageService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    IpaasBaseApisComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: IpaasBaseApisComponent, selector: "rx-ipaas-base-apis", inputs: { ipaasApisConfig: "ipaasApisConfig" }, outputs: { createApi: "createApi", editApi: "editApi", deleteApis: "deleteApis" }, viewQueries: [{ propertyName: "ipaasApisGrid", first: true, predicate: ["ipaasApisGrid"], descendants: true }], ngImport: i0__namespace, template: "<rx-admin-settings header=\"{{ ipaasApisConfig.titleKey | translate }}\">\n  <div class=\"d-flex ml-2\">\n    <button\n      adapt-button\n      type=\"button\"\n      btn-type=\"tertiary\"\n      class=\"d-icon-plus_circle align-self-start\"\n      rx-id=\"new-button\"\n      (click)=\"openAddApiDialog()\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.add.label' | translate }}\n    </button>\n  </div>\n\n  <rx-record-grid rx-id=\"ipaas-apis-grid\" #ipaasApisGrid [config]=\"gridConfig$\"></rx-record-grid>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IpaasBaseApisComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-ipaas-base-apis',
                        templateUrl: './ipaas-base-apis.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i4__namespace.TranslateService }, { type: RxIpaasBaseApisService }, { type: i2__namespace.RxNotificationService }, { type: i1__namespace.RxModalService }, { type: i1__namespace$4.RxViewActionUtilsService }, { type: i3__namespace$2.RxRecordInstanceDataPageService }]; }, propDecorators: { ipaasApisConfig: [{
                    type: i0.Input
                }], createApi: [{
                    type: i0.Output
                }], editApi: [{
                    type: i0.Output
                }], deleteApis: [{
                    type: i0.Output
                }], ipaasApisGrid: [{
                    type: i0.ViewChild,
                    args: ['ipaasApisGrid']
                }] } });

    var JitterbitApisAdminComponent = /** @class */ (function () {
        function JitterbitApisAdminComponent(rxModalService, rxNotificationService, translateService, rxJitterbitApisService) {
            this.rxModalService = rxModalService;
            this.rxNotificationService = rxNotificationService;
            this.translateService = translateService;
            this.rxJitterbitApisService = rxJitterbitApisService;
            this.jitterbitApisConfig = {
                titleKey: 'com.bmc.arsys.rx.client.admin.jitterbit-apis.header.title',
                recordDefinitionName: 'com.bmc.dsm.ipaas-jitterbit:iPaaS Jitterbit API Definition',
                resourceType: 'com.bmc.dsm.ipaas.jitterbit.command.RenameJitterbitApiGroupCommand'
            };
        }
        JitterbitApisAdminComponent.prototype.openJitterbitCreateApiEditor = function (apiInfo) {
            var _this = this;
            return this.rxModalService
                .openModal({
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-api-editor.add-api.label'),
                content: JitterbitApiEditorComponent,
                data: apiInfo
            })
                .then(function (result) {
                if (result) {
                    _this.ipaasBaseApisComponent.refreshIpaasGrid();
                }
            })
                .catch(rxjs.noop);
        };
        JitterbitApisAdminComponent.prototype.openJitterbitEditApiEditor = function (apiInfo) {
            var _this = this;
            return this.rxModalService
                .openModal({
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-api-editor.edit-api.label'),
                content: JitterbitApiEditorComponent,
                data: apiInfo
            })
                .then(function (result) {
                if (result) {
                    _this.ipaasBaseApisComponent.refreshIpaasGrid();
                }
            })
                .catch(rxjs.noop);
        };
        JitterbitApisAdminComponent.prototype.deleteJitterbitApis = function (apiIds) {
            var _this = this;
            this.deleteApiDefinitions(apiIds).subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-apis.delete-api.success.message'));
                _this.ipaasBaseApisComponent.refreshIpaasGrid();
            });
        };
        JitterbitApisAdminComponent.prototype.deleteApiDefinitions = function (apiIds) {
            var _this = this;
            if (apiIds.length) {
                var deleteApiObservables$ = apiIds.map(function (apiId) { return _this.rxJitterbitApisService.deleteApiDefinition(apiId); });
                return rxjs.forkJoin(deleteApiObservables$);
            }
            return rxjs.EMPTY;
        };
        return JitterbitApisAdminComponent;
    }());
    JitterbitApisAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JitterbitApisAdminComponent, deps: [{ token: i1__namespace.RxModalService }, { token: i2__namespace.RxNotificationService }, { token: i4__namespace.TranslateService }, { token: RxJitterbitApisService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    JitterbitApisAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: JitterbitApisAdminComponent, selector: "rx-admin-jitterbit-apis", viewQueries: [{ propertyName: "ipaasBaseApisComponent", first: true, predicate: ["ipaasBaseApisConfiguration"], descendants: true }], ngImport: i0__namespace, template: "<rx-ipaas-base-apis\n  [ipaasApisConfig]=\"jitterbitApisConfig\"\n  (createApi)=\"openJitterbitCreateApiEditor($event)\"\n  (editApi)=\"openJitterbitEditApiEditor($event)\"\n  (deleteApis)=\"deleteJitterbitApis($event)\"\n  #ipaasBaseApisConfiguration\n></rx-ipaas-base-apis>\n", components: [{ type: IpaasBaseApisComponent, selector: "rx-ipaas-base-apis", inputs: ["ipaasApisConfig"], outputs: ["createApi", "editApi", "deleteApis"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JitterbitApisAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-jitterbit-apis',
                        templateUrl: './jitterbit-apis.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.RxModalService }, { type: i2__namespace.RxNotificationService }, { type: i4__namespace.TranslateService }, { type: RxJitterbitApisService }]; }, propDecorators: { ipaasBaseApisComponent: [{
                    type: i0.ViewChild,
                    args: ['ipaasBaseApisConfiguration']
                }] } });

    var IpaasBaseApisModule = /** @class */ (function () {
        function IpaasBaseApisModule() {
        }
        return IpaasBaseApisModule;
    }());
    IpaasBaseApisModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IpaasBaseApisModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    IpaasBaseApisModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IpaasBaseApisModule, declarations: [IpaasBaseApisComponent, GroupEditorComponent], imports: [i8.CommonModule,
            i4.AdminSettingsModule,
            i7.RecordGridModule,
            i4$1.TranslateModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptRxTextfieldModule,
            i1.FormsModule,
            i3$1.RxUniqueValidatorModule], exports: [IpaasBaseApisComponent] });
    IpaasBaseApisModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IpaasBaseApisModule, imports: [[
                i8.CommonModule,
                i4.AdminSettingsModule,
                i7.RecordGridModule,
                i4$1.TranslateModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptRxTextfieldModule,
                i1.FormsModule,
                i3$1.RxUniqueValidatorModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IpaasBaseApisModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i8.CommonModule,
                            i4.AdminSettingsModule,
                            i7.RecordGridModule,
                            i4$1.TranslateModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1.FormsModule,
                            i3$1.RxUniqueValidatorModule
                        ],
                        declarations: [IpaasBaseApisComponent, GroupEditorComponent],
                        exports: [IpaasBaseApisComponent]
                    }]
            }] });

    var JitterbitApisRegistrationModule = /** @class */ (function () {
        function JitterbitApisRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-jitterbit-apis',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(JitterbitApisAdminComponent),
                name: 'iPaaS Jitterbit APIs',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return JitterbitApisRegistrationModule;
    }());
    JitterbitApisRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JitterbitApisRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    JitterbitApisRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JitterbitApisRegistrationModule, declarations: [JitterbitApisAdminComponent, JitterbitApiEditorComponent], imports: [IpaasBaseApisModule,
            i1$1.RxBusyIndicatorModule,
            i1.ReactiveFormsModule,
            i1$2.AdaptRxLabelModule,
            i1$2.AdaptRxSelectModule,
            i1$2.AdaptRxSelectEditableModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptTabsModule,
            i4$1.TranslateModule,
            i1$2.AdaptButtonModule,
            i8.CommonModule] });
    JitterbitApisRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JitterbitApisRegistrationModule, imports: [[
                IpaasBaseApisModule,
                i1$1.RxBusyIndicatorModule,
                i1.ReactiveFormsModule,
                i1$2.AdaptRxLabelModule,
                i1$2.AdaptRxSelectModule,
                i1$2.AdaptRxSelectEditableModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptTabsModule,
                i4$1.TranslateModule,
                i1$2.AdaptButtonModule,
                i8.CommonModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JitterbitApisRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            IpaasBaseApisModule,
                            i1$1.RxBusyIndicatorModule,
                            i1.ReactiveFormsModule,
                            i1$2.AdaptRxLabelModule,
                            i1$2.AdaptRxSelectModule,
                            i1$2.AdaptRxSelectEditableModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptTabsModule,
                            i4$1.TranslateModule,
                            i1$2.AdaptButtonModule,
                            i8.CommonModule
                        ],
                        declarations: [JitterbitApisAdminComponent, JitterbitApiEditorComponent],
                        entryComponents: [JitterbitApisAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var IpaasBaseConfigurationComponent = /** @class */ (function () {
        function IpaasBaseConfigurationComponent(rxAdminSettingsService, rxCognitiveServiceService, rxNotificationService, translateService) {
            this.rxAdminSettingsService = rxAdminSettingsService;
            this.rxCognitiveServiceService = rxCognitiveServiceService;
            this.rxNotificationService = rxNotificationService;
            this.translateService = translateService;
            this.connectionTestStatus = i1$1.ConnectionTestStatus.Invalid;
        }
        IpaasBaseConfigurationComponent.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.busy = this.getComponentSettings()
                .pipe(operators.tap(function (componentSettings) {
                _this.isNewIpaasConfiguration = !lodash.get(componentSettings, 'values', []).length;
                if (_this.isNewIpaasConfiguration) {
                    _this.componentSettings = lodash.map(lodash.values(_this.ipaasConfig.settingNames), function (settingName) { return ({
                        assigneeGroupPermission: null,
                        componentName: _this.ipaasConfig.componentName,
                        settingId: null,
                        settingName: settingName,
                        settingValue: null,
                        ownerKeyValue1: null
                    }); });
                }
                else {
                    _this.componentSettings = componentSettings.values;
                    _this.updateConfigFormValues();
                }
            }))
                .subscribe();
            this.childFormGroup.valueChanges
                .pipe(operators.tap(function () {
                _this.connectionTestStatus =
                    _this.childFormGroup.pristine || _this.childFormGroup.invalid
                        ? i1$1.ConnectionTestStatus.Invalid
                        : i1$1.ConnectionTestStatus.Unknown;
            }))
                .subscribe();
        };
        IpaasBaseConfigurationComponent.prototype.updateConfigFormValues = function () {
            var _this = this;
            var savedValues = {};
            lodash.forEach(this.ipaasConfig.controlsConfig, function (fieldValue, fieldName) { return (savedValues[fieldName] = _this.getValueFromSetting(fieldName)); });
            if (lodash.isFunction(this.ipaasConfig.getFormValues)) {
                this.childFormGroup.patchValue(this.ipaasConfig.getFormValues(savedValues));
            }
            else {
                this.childFormGroup.patchValue(savedValues);
            }
        };
        IpaasBaseConfigurationComponent.prototype.onTestConnection = function () {
            var _this = this;
            this.rxCognitiveServiceService
                .testConnection(Object.assign({ resourceType: this.ipaasConfig.resourceType }, this.ipaasConfig.getPayload(this.childFormGroup.getRawValue())))
                .pipe(operators.catchError(function (error) {
                _this.connectionTestStatus = i1$1.ConnectionTestStatus.Failed;
                return rxjs.throwError(error);
            }))
                .subscribe(function () {
                _this.connectionTestStatus = i1$1.ConnectionTestStatus.Passed;
            });
        };
        IpaasBaseConfigurationComponent.prototype.save = function () {
            var _this = this;
            if (this.childFormGroup.valid && this.connectionTestStatus === i1$1.ConnectionTestStatus.Passed) {
                var adminSetting$ = void 0;
                var payload = this.ipaasConfig.getPayload(this.childFormGroup.getRawValue());
                lodash.forEach(payload, function (settingValue, settingName) { return _this.setSettingValue(settingName, settingValue); });
                if (this.isNewIpaasConfiguration) {
                    adminSetting$ = this.rxAdminSettingsService.createComponentSettings(this.ipaasConfig.componentName, this.componentSettings, {
                        'default-bundle-scope': this.ipaasConfig.bundleScope
                    });
                }
                else {
                    adminSetting$ = this.rxAdminSettingsService.updateComponentSettings(this.ipaasConfig.componentName + "/" + this.componentSettings[0].ownerKeyValue1, this.componentSettings, {
                        'default-bundle-scope': this.ipaasConfig.bundleScope
                    });
                }
                this.busy = adminSetting$
                    .pipe(operators.tap(function () {
                    _this.rxNotificationService.addSuccessMessage(_this.translateService.instant(_this.ipaasConfig.saveMessageKey));
                    _this.connectionTestStatus = i1$1.ConnectionTestStatus.Invalid;
                    _this.childFormGroup.markAsPristine();
                }), operators.switchMap(function () { return _this.getComponentSettings(); }), operators.tap(function (response) {
                    _this.isNewIpaasConfiguration = false;
                    _this.componentSettings = response.values;
                    _this.updateConfigFormValues();
                }))
                    .subscribe();
            }
        };
        IpaasBaseConfigurationComponent.prototype.isSaveButtonDisabled = function () {
            return (this.childFormGroup.pristine ||
                this.childFormGroup.invalid ||
                this.connectionTestStatus !== i1$1.ConnectionTestStatus.Passed);
        };
        IpaasBaseConfigurationComponent.prototype.getComponentSettings = function () {
            return this.rxAdminSettingsService.getComponentSettings(this.ipaasConfig.componentName, {
                'default-bundle-scope': this.ipaasConfig.bundleScope
            });
        };
        IpaasBaseConfigurationComponent.prototype.setSettingValue = function (settingName, value) {
            lodash.find(this.componentSettings, {
                settingName: settingName
            }).settingValue = value;
        };
        IpaasBaseConfigurationComponent.prototype.getValueFromSetting = function (settingName) {
            return lodash.get(lodash.find(this.componentSettings, {
                settingName: settingName
            }), 'settingValue', null);
        };
        return IpaasBaseConfigurationComponent;
    }());
    IpaasBaseConfigurationComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IpaasBaseConfigurationComponent, deps: [{ token: i2__namespace.RxAdminSettingsService }, { token: RxCognitiveServiceService }, { token: i2__namespace.RxNotificationService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    IpaasBaseConfigurationComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: IpaasBaseConfigurationComponent, selector: "rx-ipaas-base-configuration", inputs: { ipaasConfig: "ipaasConfig", childFormGroup: "childFormGroup" }, ngImport: i0__namespace, template: "<rx-admin-settings [header]=\"ipaasConfig.titleKey | translate\" [busy]=\"busy\">\n  <ng-content> </ng-content>\n\n  <rx-connection-tester\n    class=\"d-block form-group\"\n    buttonType=\"secondary\"\n    [status]=\"connectionTestStatus\"\n    (testConnection)=\"onTestConnection()\"\n    rx-id=\"ipaas-configuration-test-button\"\n  ></rx-connection-tester>\n\n  <div class=\"align-items-baseline\">\n    <button\n      type=\"button\"\n      adapt-button\n      btn-type=\"primary\"\n      [disabled]=\"isSaveButtonDisabled()\"\n      (click)=\"save()\"\n      rx-id=\"save-button\"\n      class=\"mt-3\"\n    >\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </div>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace.RxConnectionTesterComponent, selector: "rx-connection-tester", inputs: ["status", "buttonType"], outputs: ["testConnection"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IpaasBaseConfigurationComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-ipaas-base-configuration',
                        templateUrl: './ipaas-base-configuration.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxAdminSettingsService }, { type: RxCognitiveServiceService }, { type: i2__namespace.RxNotificationService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { ipaasConfig: [{
                    type: i0.Input
                }], childFormGroup: [{
                    type: i0.Input
                }] } });

    var IpaasBaseConfigurationModule = /** @class */ (function () {
        function IpaasBaseConfigurationModule() {
        }
        return IpaasBaseConfigurationModule;
    }());
    IpaasBaseConfigurationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IpaasBaseConfigurationModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    IpaasBaseConfigurationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IpaasBaseConfigurationModule, declarations: [IpaasBaseConfigurationComponent], imports: [i4.AdminSettingsModule,
            i1$2.AdaptButtonModule,
            i8.CommonModule,
            i4$1.TranslateModule,
            i1$1.RxConnectionTesterModule,
            i1.ReactiveFormsModule], exports: [IpaasBaseConfigurationComponent] });
    IpaasBaseConfigurationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IpaasBaseConfigurationModule, imports: [[
                i4.AdminSettingsModule,
                i1$2.AdaptButtonModule,
                i8.CommonModule,
                i4$1.TranslateModule,
                i1$1.RxConnectionTesterModule,
                i1.ReactiveFormsModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IpaasBaseConfigurationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i4.AdminSettingsModule,
                            i1$2.AdaptButtonModule,
                            i8.CommonModule,
                            i4$1.TranslateModule,
                            i1$1.RxConnectionTesterModule,
                            i1.ReactiveFormsModule
                        ],
                        declarations: [IpaasBaseConfigurationComponent],
                        exports: [IpaasBaseConfigurationComponent]
                    }]
            }] });

    var JitterbitConfigurationAdminComponent = /** @class */ (function (_super) {
        __extends(JitterbitConfigurationAdminComponent, _super);
        function JitterbitConfigurationAdminComponent(formBuilder) {
            var _this = _super.call(this) || this;
            _this.formBuilder = formBuilder;
            _this.jitterbitConfig = {
                componentName: 'iPaaS Jitterbit Configuration',
                resourceType: 'com.bmc.dsm.ipaas.jitterbit.command.PingJitterbitCommand',
                bundleScope: i2.RX_APPLICATION.ipaasJitterbitBundleId,
                titleKey: 'com.bmc.arsys.rx.client.admin.jitterbit-configuration.header.title',
                saveMessageKey: 'com.bmc.arsys.rx.client.admin.jitterbit-configuration.saved.message',
                controlsConfig: {
                    url: '',
                    username: '',
                    password: ''
                },
                settingNames: {
                    url: 'url',
                    userName: 'username',
                    password: 'password'
                },
                getPayload: function (formValue) { return ({
                    url: formValue.url,
                    username: formValue.username,
                    password: formValue.password
                }); }
            };
            return _this;
        }
        JitterbitConfigurationAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.jitterBitConfigurationForm = this.formBuilder.group(this.jitterbitConfig.controlsConfig);
            this.notifyPropertyChanged('api', {
                isDirty: function () { return _this.ipaasBaseConfigurationComponent.childFormGroup.dirty; }
            });
        };
        return JitterbitConfigurationAdminComponent;
    }(i4$2.BaseViewComponent));
    JitterbitConfigurationAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JitterbitConfigurationAdminComponent, deps: [{ token: i1__namespace$3.FormBuilder }], target: i0__namespace.ɵɵFactoryTarget.Component });
    JitterbitConfigurationAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: JitterbitConfigurationAdminComponent, selector: "rx-admin-jitterbit-configuration", viewQueries: [{ propertyName: "ipaasBaseConfigurationComponent", first: true, predicate: IpaasBaseConfigurationComponent, descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<rx-ipaas-base-configuration [ipaasConfig]=\"jitterbitConfig\" [childFormGroup]=\"jitterBitConfigurationForm\">\n  <ng-container [formGroup]=\"jitterBitConfigurationForm\">\n    <adapt-rx-textfield\n      rx-id=\"endpoint-url\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-configuration.end-point-url.label' | translate }}\"\n      formControlName=\"url\"\n      required=\"true\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n    <adapt-rx-textfield\n      rx-id=\"user-name\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.user-name.label' | translate }}\"\n      formControlName=\"username\"\n      required=\"true\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n    <adapt-rx-textfield\n      rx-id=\"password\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.password.label' | translate }}\"\n      formControlName=\"password\"\n      required=\"true\"\n      [isPassword]=\"true\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n  </ng-container>\n</rx-ipaas-base-configuration>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield{max-width:400px}\n"], components: [{ type: IpaasBaseConfigurationComponent, selector: "rx-ipaas-base-configuration", inputs: ["ipaasConfig", "childFormGroup"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }], directives: [{ type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JitterbitConfigurationAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-jitterbit-configuration',
                        templateUrl: './jitterbit-configuration.component.html',
                        styleUrls: ['./jitterbit-configuration.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }]; }, propDecorators: { ipaasBaseConfigurationComponent: [{
                    type: i0.ViewChild,
                    args: [IpaasBaseConfigurationComponent]
                }] } });

    var JitterbitConfigurationRegistrationModule = /** @class */ (function () {
        function JitterbitConfigurationRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-jitterbit-configuration',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(JitterbitConfigurationAdminComponent),
                name: 'iPaaS Jitterbit configuration',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return JitterbitConfigurationRegistrationModule;
    }());
    JitterbitConfigurationRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JitterbitConfigurationRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    JitterbitConfigurationRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JitterbitConfigurationRegistrationModule, declarations: [JitterbitConfigurationAdminComponent], imports: [i8.CommonModule, i1$2.AdaptRxTextfieldModule, IpaasBaseConfigurationModule, i1.ReactiveFormsModule, i4$1.TranslateModule] });
    JitterbitConfigurationRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JitterbitConfigurationRegistrationModule, imports: [[i8.CommonModule, i1$2.AdaptRxTextfieldModule, IpaasBaseConfigurationModule, i1.ReactiveFormsModule, i4$1.TranslateModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: JitterbitConfigurationRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i8.CommonModule, i1$2.AdaptRxTextfieldModule, IpaasBaseConfigurationModule, i1.ReactiveFormsModule, i4$1.TranslateModule],
                        declarations: [JitterbitConfigurationAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RxMulesoftApisService = /** @class */ (function () {
        function RxMulesoftApisService(httpClient) {
            this.httpClient = httpClient;
            this.apiDefinitionUrl = '/api/com.bmc.dsm.ipaas-mulesoft/rx/application/ipaas/mulesoft';
        }
        RxMulesoftApisService.prototype.deleteApiDefinition = function (apiId) {
            return this.httpClient.delete(this.apiDefinitionUrl + "/apidefinition/" + apiId);
        };
        RxMulesoftApisService.prototype.createApiDefinition = function (apiDefinition) {
            return this.httpClient.post(this.apiDefinitionUrl + "/apidefinition", apiDefinition);
        };
        RxMulesoftApisService.prototype.getApiDefinition = function (apiId) {
            return this.httpClient.get(this.apiDefinitionUrl + "/apidefinition/" + apiId);
        };
        RxMulesoftApisService.prototype.editApiDefinition = function (apiDefinition) {
            return this.httpClient.put(this.apiDefinitionUrl + "/apidefinition/" + apiDefinition.id, apiDefinition);
        };
        RxMulesoftApisService.prototype.getOrganizationsAndEnvironments = function () {
            return this.httpClient.get(this.apiDefinitionUrl + "/organization-info");
        };
        RxMulesoftApisService.prototype.getApiPathDefinitions = function (organization, environment) {
            return this.httpClient.get(this.apiDefinitionUrl + "/api-specs/" + encodeURIComponent(organization) + "/" + encodeURIComponent(environment));
        };
        return RxMulesoftApisService;
    }());
    RxMulesoftApisService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxMulesoftApisService, deps: [{ token: i1__namespace$2.HttpClient }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxMulesoftApisService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxMulesoftApisService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxMulesoftApisService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }]; } });

    var MulesoftApiEditorComponent = /** @class */ (function (_super) {
        __extends(MulesoftApiEditorComponent, _super);
        function MulesoftApiEditorComponent(rxMulesoftApisService, activeModalRef, injector) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.rxMulesoftApisService = rxMulesoftApisService;
            _this.activeModalRef = activeModalRef;
            _this.injector = injector;
            return _this;
        }
        MulesoftApiEditorComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
        };
        MulesoftApiEditorComponent.prototype.getOrganizationsAndEnvironments = function () {
            return this.rxMulesoftApisService.getOrganizationsAndEnvironments();
        };
        MulesoftApiEditorComponent.prototype.getApiPathDefinitions = function (environment) {
            return this.rxMulesoftApisService.getApiPathDefinitions(this.selectedOrganization.id, environment.id);
        };
        MulesoftApiEditorComponent.prototype.getApiDefinition = function (apiId) {
            return this.rxMulesoftApisService.getApiDefinition(apiId);
        };
        MulesoftApiEditorComponent.prototype.editApiDefinition = function (apiDefinition, formValue) {
            apiDefinition.organizationId = formValue.organization[0].id;
            apiDefinition.environmentId = formValue.environment[0].id;
            return this.rxMulesoftApisService.editApiDefinition(apiDefinition);
        };
        MulesoftApiEditorComponent.prototype.createApiDefinition = function (apiDefinition, formValue) {
            apiDefinition.organizationId = formValue.organization[0].id;
            apiDefinition.environmentId = formValue.environment[0].id;
            return this.rxMulesoftApisService.createApiDefinition(apiDefinition);
        };
        MulesoftApiEditorComponent.prototype.getEnvironmentList = function () {
            var _this = this;
            var _a;
            return ((_a = this.organizations.find(function (value) { return value.id === _this.selectedOrganization.id; })) === null || _a === void 0 ? void 0 : _a.environments) || [];
        };
        return MulesoftApiEditorComponent;
    }(ApiEditorBase));
    MulesoftApiEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: MulesoftApiEditorComponent, deps: [{ token: RxMulesoftApisService }, { token: i1__namespace$1.ActiveModalRef }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    MulesoftApiEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: MulesoftApiEditorComponent, selector: "rx-mulesoft-api-editor", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"modal-body api-editor-modal-body\">\n  <rx-busy-indicator [options]=\"{ busy: busy, loaderType: 'section' }\"></rx-busy-indicator>\n\n  <form [formGroup]=\"ipaasApiEditorForm\">\n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <h6 class=\"mt-1 mb-3\">\n          {{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-path.label' | translate }}\n        </h6>\n\n        <adapt-rx-select\n          formControlName=\"organization\"\n          [options]=\"organizations\"\n          [optionFormatter]=\"optionFormatterName\"\n          rx-id=\"organization\"\n          label=\"{{ 'com.bmc.arsys.rx.client.approval.configuration.org' | translate }}\"\n          (onSelectionChange)=\"getEnvironments($event.options[0])\"\n          class=\"form-group d-block\"\n        >\n        </adapt-rx-select>\n\n        <adapt-rx-select\n          formControlName=\"environment\"\n          [options]=\"environments\"\n          [optionFormatter]=\"optionFormatterName\"\n          rx-id=\"environment\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-apis.environment.label' | translate }}\"\n          (onSelectionChange)=\"getApiPaths($event.options[0])\"\n          class=\"form-group d-block\"\n        >\n        </adapt-rx-select>\n\n        <adapt-rx-select\n          formControlName=\"apiPath\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-path.label' | translate }}\"\n          [options]=\"apiPaths\"\n          [enableFilter]=\"true\"\n          [loadingState]=\"loadingState\"\n          (onSelectionChange)=\"getApiMethods($event.options[0])\"\n          [tooltip]=\"{\n            iconName: 'question_circle_o',\n            content: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-paths.tooltip' | translate,\n            placement: 'right',\n            popoverMode: true\n          }\"\n        >\n        </adapt-rx-select>\n      </div>\n\n      <div class=\"col-md-4\">\n        <h6 class=\"mt-1 mb-3\">\n          {{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-properties.label' | translate }}\n        </h6>\n\n        <adapt-rx-select-editable\n          formControlName=\"apiGroupName\"\n          [options]=\"groupNameList\"\n          rx-id=\"api-group-name\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.api-group-name.label' | translate }}\"\n          class=\"form-group d-block\"\n          customOptionTitle=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.add-new.label' | translate }}\"\n          [customOptionOnTop]=\"true\"\n          [tooltip]=\"{\n            iconName: 'question_circle_o',\n            content: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-group-name.tooltip' | translate,\n            placement: 'right',\n            popoverMode: true\n          }\"\n        >\n        </adapt-rx-select-editable>\n\n        <adapt-rx-textfield\n          formControlName=\"apiName\"\n          rx-id=\"api-name\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-apis.api-name.label' | translate }}\"\n          class=\"form-group d-block\"\n          [tooltip]=\"\n            isEditMode\n              ? {\n                  iconName: 'question_circle_o',\n                  content: 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.edit-api.api-name.tooltip' | translate,\n                  placement: 'right',\n                  popoverMode: true\n                }\n              : null\n          \"\n        >\n        </adapt-rx-textfield>\n\n        <adapt-rx-select\n          formControlName=\"requestMethod\"\n          [options]=\"methodTypeOptions\"\n          (onSelectionChange)=\"getAuthTypes($event.options[0])\"\n          rx-id=\"request-method\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.request-method.label' | translate }}\"\n          class=\"form-group d-block\"\n        >\n        </adapt-rx-select>\n\n        <adapt-rx-select\n          formControlName=\"authorizationType\"\n          [options]=\"authTypeOptions\"\n          [optionFormatter]=\"optionFormatterLabel\"\n          (onSelectionChange)=\"getAuthTypeFields($event.options[0])\"\n          rx-id=\"authorization-type\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.authorization-type.label' | translate }}\"\n          class=\"form-group d-block\"\n        >\n        </adapt-rx-select>\n\n        <ng-container *ngIf=\"!isCustomAuthType\">\n          <div\n            formArrayName=\"authTypeDetails\"\n            *ngFor=\"let authType of ipaasApiEditorForm.get('authTypeDetails')['controls']; let $index = index\"\n          >\n            <div [formGroupName]=\"$index\">\n              <adapt-rx-textfield\n                class=\"form-group d-block\"\n                *ngFor=\"let field of authTypeFields\"\n                [label]=\"field.labelKey | translate\"\n                [isPassword]=\"field.isPassword\"\n                [formControlName]=\"field.name\"\n                [attr.rx-id]=\"field.rxId\"\n                [required]=\"field.isRequired\"\n              >\n              </adapt-rx-textfield>\n            </div>\n          </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"isCustomAuthType\">\n          <button\n            adapt-button\n            type=\"button\"\n            btn-type=\"tertiary\"\n            class=\"d-icon-plus_circle px-0 d-block\"\n            rx-id=\"add-button\"\n            (click)=\"addCustomAuthTypeHeader()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.add-http-header.label' | translate }}\n          </button>\n          <div\n            formArrayName=\"customAuthTypeHeaders\"\n            *ngFor=\"\n              let customAuthTypeHeaders of ipaasApiEditorForm.get('customAuthTypeHeaders')['controls'];\n              let $index = index\n            \"\n          >\n            <div [formGroupName]=\"$index\">\n              <div class=\"card form-group\">\n                <div class=\"card-block\">\n                  <div class=\"d-flex justify-content-between\">\n                    <adapt-rx-control-label\n                      label=\"{{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.http-header.label' | translate }}\"\n                      showRequiredLabel=\"true\"\n                    ></adapt-rx-control-label>\n                    <span\n                      class=\"d-icon-cross_adapt form-group alert-link\"\n                      (click)=\"removeCustomAuthTypeHeader($index)\"\n                    ></span>\n                  </div>\n                  <adapt-rx-textfield\n                    formControlName=\"key\"\n                    placeholder=\"{{\n                      'com.bmc.arsys.rx.client.name-value-pairs-editor.enter-name.placeholder' | translate\n                    }}\"\n                    class=\"d-block form-group\"\n                  ></adapt-rx-textfield>\n                  <adapt-rx-textfield\n                    formControlName=\"value\"\n                    placeholder=\"{{\n                      'com.bmc.arsys.rx.client.name-value-pairs-editor.enter-value.placeholder' | translate\n                    }}\"\n                    class=\"d-block\"\n                  ></adapt-rx-textfield>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <button\n            adapt-button\n            type=\"button\"\n            btn-type=\"tertiary\"\n            class=\"d-icon-plus_circle px-0 d-block\"\n            rx-id=\"add-button\"\n            (click)=\"addCustomAuthTypeQueryParam()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.add-query-parameter.label' | translate }}\n          </button>\n          <div\n            formArrayName=\"customAuthTypeQueryParams\"\n            *ngFor=\"\n              let customAuthTypeQueryParams of ipaasApiEditorForm.get('customAuthTypeQueryParams')['controls'];\n              let $index = index\n            \"\n          >\n            <div [formGroupName]=\"$index\">\n              <div class=\"card form-group\">\n                <div class=\"card-block\">\n                  <div class=\"d-flex justify-content-between\">\n                    <adapt-rx-control-label\n                      label=\"{{ 'com.bmc.arsys.rx.client.admin.ipaas-apis.query-parameter.label' | translate }}\"\n                      showRequiredLabel=\"true\"\n                    ></adapt-rx-control-label>\n                    <span\n                      class=\"d-icon-cross_adapt form-group alert-link\"\n                      (click)=\"removeCustomAuthTypeQueryParam($index)\"\n                    ></span>\n                  </div>\n                  <adapt-rx-textfield\n                    formControlName=\"key\"\n                    placeholder=\"{{\n                      'com.bmc.arsys.rx.client.name-value-pairs-editor.enter-name.placeholder' | translate\n                    }}\"\n                    class=\"d-block form-group\"\n                  ></adapt-rx-textfield>\n                  <adapt-rx-textfield\n                    formControlName=\"value\"\n                    placeholder=\"{{\n                      'com.bmc.arsys.rx.client.name-value-pairs-editor.enter-value.placeholder' | translate\n                    }}\"\n                    class=\"d-block\"\n                  ></adapt-rx-textfield>\n                </div>\n              </div>\n            </div>\n          </div>\n        </ng-container>\n      </div>\n\n      <div class=\"col-md-4\">\n        <h6 class=\"my-1\">\n          {{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.api-variables.label' | translate }}\n        </h6>\n\n        <adapt-tabset [type]=\"'pills'\" [tab-active]=\"activeIndex\" (tab-active-changed)=\"tabChanged($event)\">\n          <adapt-tab-panel\n            adapt-tab-title=\"{{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.headers.label' | translate }}\"\n          >\n            <button\n              adapt-button\n              type=\"button\"\n              btn-type=\"tertiary\"\n              class=\"d-icon-plus_circle px-0 align-self-start\"\n              rx-id=\"add-button\"\n              (click)=\"addHeader()\"\n            >\n              {{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.add-header.label' | translate }}\n            </button>\n\n            <div\n              formArrayName=\"headers\"\n              *ngFor=\"let header of ipaasApiEditorForm.get('headers')['controls']; let $index = index\"\n            >\n              <div class=\"d-flex\" [formGroupName]=\"$index\">\n                <adapt-rx-textfield\n                  formControlName=\"name\"\n                  class=\"d-block form-group pr-2 flex-fill\"\n                ></adapt-rx-textfield>\n                <button\n                  class=\"d-icon-minus_circle text-danger form-group px-0\"\n                  adapt-button\n                  btn-type=\"tertiary\"\n                  type=\"button\"\n                  (click)=\"removeHeader($index)\"\n                ></button>\n              </div>\n            </div>\n          </adapt-tab-panel>\n\n          <adapt-tab-panel\n            adapt-tab-title=\"{{\n              'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.query-parameters.label' | translate\n            }}\"\n          >\n            <button\n              adapt-button\n              type=\"button\"\n              btn-type=\"tertiary\"\n              class=\"d-icon-plus_circle px-0 align-self-start\"\n              rx-id=\"add-button\"\n              (click)=\"addQueryParameter()\"\n            >\n              {{ 'com.bmc.arsys.rx.client.admin.jitterbit-api-editor.add-query-parameter.label' | translate }}\n            </button>\n\n            <div\n              formArrayName=\"queryParameters\"\n              *ngFor=\"let parameter of ipaasApiEditorForm.get('queryParameters')['controls']; let $index = index\"\n            >\n              <div class=\"d-flex\" [formGroupName]=\"$index\">\n                <adapt-rx-textfield\n                  formControlName=\"name\"\n                  class=\"d-block form-group pr-2 flex-fill\"\n                ></adapt-rx-textfield>\n                <button\n                  class=\"d-icon-minus_circle text-danger form-group px-0\"\n                  adapt-button\n                  btn-type=\"tertiary\"\n                  type=\"button\"\n                  (click)=\"removeQueryParameter($index)\"\n                ></button>\n              </div>\n            </div>\n          </adapt-tab-panel>\n        </adapt-tabset>\n      </div>\n    </div>\n  </form>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    [disabled]=\"isSaveButtonDisabled()\"\n    (click)=\"save()\"\n    rx-id=\"save-button\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button type=\"button\" btn-type=\"secondary\" rx-id=\"cancel-button\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-select,adapt-rx-select-editable,adapt-rx-textfield{max-width:400px}.api-editor-modal-body{height:645px}.modal-body{overflow-y:auto}\n"], components: [{ type: i1__namespace.RxBusyIndicatorComponent, selector: "rx-busy-indicator", inputs: ["options"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptRxSelectEditableComponent, selector: "adapt-rx-select-editable", inputs: ["options", "placeholder", "customOptionTitle", "customOptionOnTop", "size", "menuMaxHeight", "placement", "appendToBody", "mobileView", "disabledStyleForReadonlyState", "popupClass", "customValueMatcher"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace$1.AdaptTabsComponent, selector: "adapt-tabset", inputs: ["showTabToolbar", "customCssTabContent", "fullHeight", "texts", "enableDnD", "customClassTabList", "allow-tabs-adding", "id", "testID", "dropdown-title", "fadeColor", "carouselMode", "justify", "type", "tab-active"], outputs: ["tab-index-closed", "tab-active-changed", "add-tab-clicked", "tabClicked", "tabDropped"], exportAs: ["adaptTabset"] }, { type: i1__namespace$1.AdaptTabsPanelComponent, selector: "adapt-tab-panel, div[tab-panel]", inputs: ["isActive", "badge-type", "animateBadge", "showBadgeAlert", "badgeAlertVariant", "badgeCustomClass", "adapt-tab-title", "disabled", "isHidden", "icon", "subtext", "icon-right", "icon-close", "aria-label", "aria-labelledby", "kebabMenu", "id", "renderContentWhenInactive", "badge"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace$3.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i1__namespace$3.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: MulesoftApiEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-mulesoft-api-editor',
                        templateUrl: '../ipaas-base-apis/api-editor/api-editor.component.html',
                        styleUrls: ['../ipaas-base-apis/api-editor/api-editor.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: RxMulesoftApisService }, { type: i1__namespace$1.ActiveModalRef }, { type: i0__namespace.Injector }]; } });

    var MulesoftApisAdminComponent = /** @class */ (function () {
        function MulesoftApisAdminComponent(rxModalService, rxNotificationService, translateService, rxMulesoftApisService) {
            this.rxModalService = rxModalService;
            this.rxNotificationService = rxNotificationService;
            this.translateService = translateService;
            this.rxMulesoftApisService = rxMulesoftApisService;
            this.mulesoftConfig = {
                titleKey: 'com.bmc.arsys.rx.client.admin.mulesoft-apis.header.title',
                recordDefinitionName: 'com.bmc.dsm.ipaas-mulesoft:iPaaS MuleSoft API Definition',
                resourceType: 'com.bmc.dsm.ipaas.mulesoft.command.RenameMuleSoftApiGroupCommand'
            };
        }
        MulesoftApisAdminComponent.prototype.openMulesoftCreateApiEditor = function (apiInfo) {
            var _this = this;
            return this.rxModalService
                .openModal({
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-api-editor.add-api.label'),
                content: MulesoftApiEditorComponent,
                data: apiInfo
            })
                .then(function (result) {
                if (result) {
                    _this.ipaasBaseApisComponent.refreshIpaasGrid();
                }
            })
                .catch(rxjs.noop);
        };
        MulesoftApisAdminComponent.prototype.openMulesoftEditApiEditor = function (apiInfo) {
            var _this = this;
            return this.rxModalService
                .openModal({
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-api-editor.edit-api.label'),
                content: MulesoftApiEditorComponent,
                data: apiInfo
            })
                .then(function (result) {
                if (result) {
                    _this.ipaasBaseApisComponent.refreshIpaasGrid();
                }
            })
                .catch(rxjs.noop);
        };
        MulesoftApisAdminComponent.prototype.deleteMulesoftApis = function (apiIds) {
            var _this = this;
            this.deleteApiDefinitions(apiIds).subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.ipaas-apis.delete-api.success.message'));
                _this.ipaasBaseApisComponent.refreshIpaasGrid();
            });
        };
        MulesoftApisAdminComponent.prototype.deleteApiDefinitions = function (apiIds) {
            var _this = this;
            if (apiIds.length) {
                var deleteApiObservables$ = apiIds.map(function (apiId) { return _this.rxMulesoftApisService.deleteApiDefinition(apiId); });
                return rxjs.forkJoin(deleteApiObservables$);
            }
            return rxjs.EMPTY;
        };
        return MulesoftApisAdminComponent;
    }());
    MulesoftApisAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: MulesoftApisAdminComponent, deps: [{ token: i1__namespace.RxModalService }, { token: i2__namespace.RxNotificationService }, { token: i4__namespace.TranslateService }, { token: RxMulesoftApisService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    MulesoftApisAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: MulesoftApisAdminComponent, selector: "rx-admin-mulesoft-apis", viewQueries: [{ propertyName: "ipaasBaseApisComponent", first: true, predicate: ["ipaasBaseApisConfiguration"], descendants: true }], ngImport: i0__namespace, template: "<rx-ipaas-base-apis\n  [ipaasApisConfig]=\"mulesoftConfig\"\n  (createApi)=\"openMulesoftCreateApiEditor($event)\"\n  (editApi)=\"openMulesoftEditApiEditor($event)\"\n  (deleteApis)=\"deleteMulesoftApis($event)\"\n  #ipaasBaseApisConfiguration\n></rx-ipaas-base-apis>\n", components: [{ type: IpaasBaseApisComponent, selector: "rx-ipaas-base-apis", inputs: ["ipaasApisConfig"], outputs: ["createApi", "editApi", "deleteApis"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: MulesoftApisAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-mulesoft-apis',
                        templateUrl: './mulesoft-apis.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.RxModalService }, { type: i2__namespace.RxNotificationService }, { type: i4__namespace.TranslateService }, { type: RxMulesoftApisService }]; }, propDecorators: { ipaasBaseApisComponent: [{
                    type: i0.ViewChild,
                    args: ['ipaasBaseApisConfiguration']
                }] } });

    var MulesoftApisRegistrationModule = /** @class */ (function () {
        function MulesoftApisRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-mulesoft-apis',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(MulesoftApisAdminComponent),
                name: 'iPaaS MuleSoft APIs',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return MulesoftApisRegistrationModule;
    }());
    MulesoftApisRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: MulesoftApisRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MulesoftApisRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: MulesoftApisRegistrationModule, declarations: [MulesoftApisAdminComponent, MulesoftApiEditorComponent], imports: [IpaasBaseApisModule,
            i1$1.RxBusyIndicatorModule,
            i1.ReactiveFormsModule,
            i1$2.AdaptRxLabelModule,
            i1$2.AdaptRxSelectModule,
            i1$2.AdaptRxSelectEditableModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptTabsModule,
            i4$1.TranslateModule,
            i1$2.AdaptButtonModule,
            i8.CommonModule] });
    MulesoftApisRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: MulesoftApisRegistrationModule, imports: [[
                IpaasBaseApisModule,
                i1$1.RxBusyIndicatorModule,
                i1.ReactiveFormsModule,
                i1$2.AdaptRxLabelModule,
                i1$2.AdaptRxSelectModule,
                i1$2.AdaptRxSelectEditableModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptTabsModule,
                i4$1.TranslateModule,
                i1$2.AdaptButtonModule,
                i8.CommonModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: MulesoftApisRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            IpaasBaseApisModule,
                            i1$1.RxBusyIndicatorModule,
                            i1.ReactiveFormsModule,
                            i1$2.AdaptRxLabelModule,
                            i1$2.AdaptRxSelectModule,
                            i1$2.AdaptRxSelectEditableModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptTabsModule,
                            i4$1.TranslateModule,
                            i1$2.AdaptButtonModule,
                            i8.CommonModule
                        ],
                        declarations: [MulesoftApisAdminComponent, MulesoftApiEditorComponent],
                        entryComponents: [MulesoftApisAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var AUTH_TYPE = {
        basicAuth: '0',
        oAuth2: '1'
    };
    var MULESOFT_AUTH_TYPE_OPTIONS = [
        {
            id: AUTH_TYPE.basicAuth,
            label: 'Basic'
        },
        {
            id: AUTH_TYPE.oAuth2,
            label: 'OAuth 2.0'
        }
    ];

    var MulesoftConfigurationAdminComponent = /** @class */ (function (_super) {
        __extends(MulesoftConfigurationAdminComponent, _super);
        function MulesoftConfigurationAdminComponent(formBuilder) {
            var _this = _super.call(this) || this;
            _this.formBuilder = formBuilder;
            _this.mulesoftConfig = {
                componentName: 'iPaaS MuleSoft Configuration',
                resourceType: 'com.bmc.dsm.ipaas.mulesoft.command.PingMuleSoftCommand',
                bundleScope: i2.RX_APPLICATION.ipaasMulesoftBundleId,
                titleKey: 'com.bmc.arsys.rx.client.admin.mulesoft-configuration.header.title',
                saveMessageKey: 'com.bmc.arsys.rx.client.admin.mulesoft-configuration.saved.message',
                controlsConfig: {
                    url: ['', i1$2.AdaptValidators.required()],
                    authType: ['', i1$2.AdaptValidators.required()],
                    username: '',
                    password: '',
                    clientId: '',
                    clientSecret: ''
                },
                getFormValues: function (formValue) { return ({
                    url: formValue.url,
                    authType: _this.getAuthTypeOption(formValue.authType),
                    username: formValue.username,
                    password: formValue.password,
                    clientId: formValue.clientId,
                    clientSecret: formValue.clientSecret
                }); },
                settingNames: {
                    url: 'url',
                    userName: 'username',
                    password: 'password',
                    authType: 'authType',
                    clientId: 'clientId',
                    clientSecret: 'clientSecret'
                },
                getPayload: function (formValue) {
                    var _a;
                    switch ((_a = lodash.first(formValue.authType)) === null || _a === void 0 ? void 0 : _a.id) {
                        case AUTH_TYPE.oAuth2: {
                            return {
                                url: formValue.url,
                                authType: _this.getAuthTypePayload(formValue.authType),
                                username: null,
                                password: null,
                                clientId: formValue.clientId,
                                clientSecret: formValue.clientSecret
                            };
                        }
                        default: {
                            return {
                                url: formValue.url,
                                authType: _this.getAuthTypePayload(formValue.authType),
                                username: formValue.username,
                                password: formValue.password,
                                clientId: null,
                                clientSecret: null
                            };
                        }
                    }
                }
            };
            _this.authenticationOptions = MULESOFT_AUTH_TYPE_OPTIONS;
            _this.optionFormatter = function (authenticationOption) { return authenticationOption.label; };
            return _this;
        }
        MulesoftConfigurationAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.mulesoftConfigurationForm = this.formBuilder.group(this.mulesoftConfig.controlsConfig);
            this.mulesoftConfigurationForm.patchValue({ authType: [lodash.first(MULESOFT_AUTH_TYPE_OPTIONS)] });
            this.authType.valueChanges.pipe(operators.map(function (authType) { return _this.getAuthTypePayload(authType); })).subscribe(function (authType) {
                if (authType === AUTH_TYPE.basicAuth) {
                    _this.mulesoftConfigurationForm.controls.username.setValidators(i1$2.AdaptValidators.required());
                    _this.mulesoftConfigurationForm.controls.username.enable();
                    _this.mulesoftConfigurationForm.controls.password.setValidators(i1$2.AdaptValidators.required());
                    _this.mulesoftConfigurationForm.controls.password.enable();
                    _this.mulesoftConfigurationForm.controls.clientId.clearValidators();
                    _this.mulesoftConfigurationForm.controls.clientId.disable();
                    _this.mulesoftConfigurationForm.controls.clientSecret.clearValidators();
                    _this.mulesoftConfigurationForm.controls.clientSecret.disable();
                }
                else if (authType === AUTH_TYPE.oAuth2) {
                    _this.mulesoftConfigurationForm.controls.username.clearValidators();
                    _this.mulesoftConfigurationForm.controls.username.disable();
                    _this.mulesoftConfigurationForm.controls.password.clearValidators();
                    _this.mulesoftConfigurationForm.controls.password.disable();
                    _this.mulesoftConfigurationForm.controls.clientId.setValidators(i1$2.AdaptValidators.required());
                    _this.mulesoftConfigurationForm.controls.clientId.enable();
                    _this.mulesoftConfigurationForm.controls.clientSecret.setValidators(i1$2.AdaptValidators.required());
                    _this.mulesoftConfigurationForm.controls.clientSecret.enable();
                }
            });
            this.mulesoftConfigurationForm.patchValue({ authType: [lodash.first(MULESOFT_AUTH_TYPE_OPTIONS)] });
            this.notifyPropertyChanged('api', {
                isDirty: function () { return _this.ipaasBaseConfigurationComponent.childFormGroup.dirty; }
            });
        };
        Object.defineProperty(MulesoftConfigurationAdminComponent.prototype, "authType", {
            get: function () {
                return this.mulesoftConfigurationForm.get('authType');
            },
            enumerable: false,
            configurable: true
        });
        MulesoftConfigurationAdminComponent.prototype.getAuthTypeOption = function (id) {
            var authType = lodash.find(MULESOFT_AUTH_TYPE_OPTIONS, { id: id });
            return authType ? [authType] : [];
        };
        MulesoftConfigurationAdminComponent.prototype.getAuthTypePayload = function (authType) {
            var _a;
            return (_a = lodash.first(authType)) === null || _a === void 0 ? void 0 : _a.id;
        };
        return MulesoftConfigurationAdminComponent;
    }(i4$2.BaseViewComponent));
    MulesoftConfigurationAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: MulesoftConfigurationAdminComponent, deps: [{ token: i1__namespace$3.FormBuilder }], target: i0__namespace.ɵɵFactoryTarget.Component });
    MulesoftConfigurationAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: MulesoftConfigurationAdminComponent, selector: "rx-admin-mulesoft-configuration", viewQueries: [{ propertyName: "ipaasBaseConfigurationComponent", first: true, predicate: IpaasBaseConfigurationComponent, descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<rx-ipaas-base-configuration [ipaasConfig]=\"mulesoftConfig\" [childFormGroup]=\"mulesoftConfigurationForm\">\n  <ng-container [formGroup]=\"mulesoftConfigurationForm\">\n    <adapt-rx-textfield\n      rx-id=\"endpoint-url\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.mulesoft-configuration.end-point-url.label' | translate }}\"\n      formControlName=\"url\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-select\n      rx-id=\"auth-type\"\n      formControlName=\"authType\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.data-source-connection-properties.authentication.label' | translate }}\"\n      [options]=\"authenticationOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-select>\n\n    <ng-container [ngSwitch]=\"authType.value[0]?.id\">\n      <ng-container *ngSwitchDefault>\n        <adapt-rx-textfield\n          rx-id=\"user-name\"\n          label=\"{{ 'com.bmc.arsys.rx.client.common.user-name.label' | translate }}\"\n          formControlName=\"username\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-textfield>\n        <adapt-rx-textfield\n          rx-id=\"password\"\n          label=\"{{ 'com.bmc.arsys.rx.client.common.password.label' | translate }}\"\n          formControlName=\"password\"\n          [isPassword]=\"true\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-textfield>\n      </ng-container>\n\n      <ng-container *ngSwitchCase=\"authenticationOptions[1].id\">\n        <adapt-rx-textfield\n          rx-id=\"client-id\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.bmc-service-cloud-account.client-id.label' | translate }}\"\n          formControlName=\"clientId\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-textfield>\n        <adapt-rx-textfield\n          rx-id=\"client-secret\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.bmc-service-cloud-account.client-secret.label' | translate }}\"\n          formControlName=\"clientSecret\"\n          [isPassword]=\"true\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-textfield>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</rx-ipaas-base-configuration>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield,adapt-rx-select{max-width:400px}\n"], components: [{ type: IpaasBaseConfigurationComponent, selector: "rx-ipaas-base-configuration", inputs: ["ipaasConfig", "childFormGroup"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }], directives: [{ type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i8__namespace.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: i8__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: MulesoftConfigurationAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-mulesoft-configuration',
                        templateUrl: './mulesoft-configuration.component.html',
                        styleUrls: ['./mulesoft-configuration.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }]; }, propDecorators: { ipaasBaseConfigurationComponent: [{
                    type: i0.ViewChild,
                    args: [IpaasBaseConfigurationComponent]
                }] } });

    var MulesoftConfigurationRegistrationModule = /** @class */ (function () {
        function MulesoftConfigurationRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-mulesoft-configuration',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(MulesoftConfigurationAdminComponent),
                name: 'iPaaS MuleSoft configuration',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return MulesoftConfigurationRegistrationModule;
    }());
    MulesoftConfigurationRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: MulesoftConfigurationRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MulesoftConfigurationRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: MulesoftConfigurationRegistrationModule, declarations: [MulesoftConfigurationAdminComponent], imports: [i8.CommonModule,
            i1.ReactiveFormsModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptRxSelectModule,
            i4$1.TranslateModule,
            IpaasBaseConfigurationModule] });
    MulesoftConfigurationRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: MulesoftConfigurationRegistrationModule, imports: [[
                i8.CommonModule,
                i1.ReactiveFormsModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptRxSelectModule,
                i4$1.TranslateModule,
                IpaasBaseConfigurationModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: MulesoftConfigurationRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i8.CommonModule,
                            i1.ReactiveFormsModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptRxSelectModule,
                            i4$1.TranslateModule,
                            IpaasBaseConfigurationModule
                        ],
                        declarations: [MulesoftConfigurationAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RX_ISSUE_REPORTING_CONFIGURATION = {
        oauthUrl: '/api/rx/application/oauth/token/IssueReporting',
        settingName: 'errorReportingServiceTenantConfiguration',
        supportUserMapping: {
            recordDefinitionName: 'SupportUserMapping',
            defaultDescription: 'com.bmc.arsys.rx.client.admin.issue-reporting-configuration.default-description.label',
            fieldIds: {
                loginName: 70221,
                supportEmail: 70222
            }
        }
    };

    var RxIssueReportingConfigurationService = /** @class */ (function () {
        function RxIssueReportingConfigurationService(httpClient, rxRecordInstanceDataPageService, rxCurrentUserService, rxSystemConfigurationService) {
            this.httpClient = httpClient;
            this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            this.rxCurrentUserService = rxCurrentUserService;
            this.rxSystemConfigurationService = rxSystemConfigurationService;
        }
        RxIssueReportingConfigurationService.prototype.getOauthConfig = function () {
            return this.httpClient.get(RX_ISSUE_REPORTING_CONFIGURATION.oauthUrl);
        };
        RxIssueReportingConfigurationService.prototype.getSupportId = function () {
            return this.rxSystemConfigurationService
                .getConfiguration(RX_ISSUE_REPORTING_CONFIGURATION.settingName)
                .pipe(operators.map(function (result) { return JSON.parse(result.value).supportId || ''; }));
        };
        RxIssueReportingConfigurationService.prototype.setSupportId = function (supportId) {
            return this.rxSystemConfigurationService.setConfiguration(RX_ISSUE_REPORTING_CONFIGURATION.settingName, {
                supportId: supportId
            });
        };
        RxIssueReportingConfigurationService.prototype.getSupportConfig = function () {
            return this.rxRecordInstanceDataPageService
                .post({
                params: {
                    recorddefinition: RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.recordDefinitionName,
                    queryExpression: "'" + RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.fieldIds.loginName + "' = \"" + this.rxCurrentUserService.getName() + "\"",
                    propertySelection: [
                        i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                        RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.fieldIds.loginName,
                        RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.fieldIds.supportEmail
                    ]
                }
            })
                .pipe(operators.map(function (result) { return lodash.get(result, 'data[0]', null); }));
        };
        return RxIssueReportingConfigurationService;
    }());
    RxIssueReportingConfigurationService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxIssueReportingConfigurationService, deps: [{ token: i1__namespace$2.HttpClient }, { token: i3__namespace$2.RxRecordInstanceDataPageService }, { token: i2__namespace.RxCurrentUserService }, { token: i2__namespace.RxSystemConfigurationService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxIssueReportingConfigurationService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxIssueReportingConfigurationService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxIssueReportingConfigurationService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }, { type: i3__namespace$2.RxRecordInstanceDataPageService }, { type: i2__namespace.RxCurrentUserService }, { type: i2__namespace.RxSystemConfigurationService }]; } });

    var IssueReportingConfigurationAdminComponent = /** @class */ (function (_super) {
        __extends(IssueReportingConfigurationAdminComponent, _super);
        function IssueReportingConfigurationAdminComponent(formBuilder, rxCurrentUserService, rxIssueReportingConfigurationService, rxNotificationService, rxRecordInstanceService, rxRecordInstanceUpdateService, translateService) {
            var _this = _super.call(this) || this;
            _this.formBuilder = formBuilder;
            _this.rxCurrentUserService = rxCurrentUserService;
            _this.rxIssueReportingConfigurationService = rxIssueReportingConfigurationService;
            _this.rxNotificationService = rxNotificationService;
            _this.rxRecordInstanceService = rxRecordInstanceService;
            _this.rxRecordInstanceUpdateService = rxRecordInstanceUpdateService;
            _this.translateService = translateService;
            _this.isAdministrator = _this.rxCurrentUserService.isAdministrator();
            _this.oauthUrl = '';
            return _this;
        }
        IssueReportingConfigurationAdminComponent.prototype.saveConfig = function () {
            var _this = this;
            var formValue = this.issueReportingConfigurationForm.getRawValue();
            this.rxIssueReportingConfigurationService.setSupportId(formValue.supportId).subscribe();
            if (this.configId) {
                this.rxRecordInstanceService
                    .get(RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.recordDefinitionName, this.configId)
                    .subscribe(function (recordInstance) {
                    recordInstance.setFieldValue(RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.fieldIds.supportEmail, formValue.supportEmail);
                    _this.rxRecordInstanceUpdateService.execute(recordInstance).subscribe(function () {
                        _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.issue-reporting-configuration.issue-reporting-configuration-updated.message'));
                        _this.issueReportingConfigurationForm.markAsPristine();
                    });
                });
            }
            else {
                this.rxRecordInstanceService
                    .getNew(RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.recordDefinitionName)
                    .subscribe(function (recordInstance) {
                    recordInstance.setFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.description, _this.translateService.instant(RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.defaultDescription));
                    recordInstance.setFieldValue(RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.fieldIds.supportEmail, formValue.supportEmail);
                    recordInstance.setFieldValue(RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.fieldIds.loginName, _this.rxCurrentUserService.getName());
                    _this.rxRecordInstanceService.create(recordInstance).subscribe(function () {
                        _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.issue-reporting-configuration.issue-reporting-configuration-saved.message'));
                        _this.issueReportingConfigurationForm.markAsPristine();
                    });
                });
            }
        };
        IssueReportingConfigurationAdminComponent.prototype.getOauthData = function () {
            var _this = this;
            this.busy = this.rxIssueReportingConfigurationService.getOauthConfig().subscribe(function (data) {
                _this.oauthUrl = data.authorizeURL;
                _this.isAccountLinked = data.configured;
            });
        };
        IssueReportingConfigurationAdminComponent.prototype.openWindow = function () {
            var title = 'BMC Cloud Service';
            var openedWindow = window.open(this.oauthUrl, title, 'scrollbars=1,height=600,width=670');
            this.assertWindowClosed(openedWindow);
        };
        IssueReportingConfigurationAdminComponent.prototype.assertWindowClosed = function (openedWindow) {
            var _this = this;
            var interval = setInterval(function () {
                if (!openedWindow || !openedWindow.closed) {
                    return;
                }
                clearInterval(interval);
                _this.getOauthData();
            }, 100);
        };
        IssueReportingConfigurationAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.notifyPropertyChanged('api', {
                isDirty: function () { var _a; return (_a = _this.issueReportingConfigurationForm) === null || _a === void 0 ? void 0 : _a.dirty; }
            });
            if (this.isAdministrator) {
                this.issueReportingConfigurationForm = this.formBuilder.group({
                    supportId: '',
                    supportEmail: ''
                });
                this.busy = rxjs.forkJoin({
                    supportId: this.rxIssueReportingConfigurationService.getSupportId(),
                    supportConfig: this.rxIssueReportingConfigurationService.getSupportConfig()
                }).subscribe(function (result) {
                    var supportEmail = '';
                    if (result.supportConfig) {
                        _this.configId = result.supportConfig[i3.RX_RECORD_DEFINITION.coreFieldIds.id];
                        supportEmail =
                            result.supportConfig[RX_ISSUE_REPORTING_CONFIGURATION.supportUserMapping.fieldIds.supportEmail];
                    }
                    _this.issueReportingConfigurationForm.patchValue({
                        supportId: result.supportId,
                        supportEmail: supportEmail
                    });
                });
                this.getOauthData();
            }
        };
        return IssueReportingConfigurationAdminComponent;
    }(i4$2.BaseViewComponent));
    IssueReportingConfigurationAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IssueReportingConfigurationAdminComponent, deps: [{ token: i1__namespace$3.FormBuilder }, { token: i2__namespace.RxCurrentUserService }, { token: RxIssueReportingConfigurationService }, { token: i2__namespace.RxNotificationService }, { token: i3__namespace$2.RxRecordInstanceService }, { token: i3__namespace$2.RxRecordInstanceUpdateService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    IssueReportingConfigurationAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: IssueReportingConfigurationAdminComponent, selector: "rx-admin-issue-reporting-configuration", usesInheritance: true, ngImport: i0__namespace, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.issue-reporting-configuration.header.title' | translate }}\"\n  [busy]=\"busy\"\n>\n  <adapt-accordion multiselect=\"true\" class=\"pb-4\">\n    <form [formGroup]=\"issueReportingConfigurationForm\" *ngIf=\"isAdministrator\">\n      <adapt-accordion-tab\n        title=\"{{\n          'com.bmc.arsys.rx.client.admin.issue-reporting-configuration.bmc-service-cloud-account-configuration.label'\n            | translate\n        }}\"\n        isOpen=\"true\"\n      >\n        <adapt-rx-textfield\n          rx-id=\"support-id\"\n          label=\"Support ID\"\n          formControlName=\"supportId\"\n          required=\"true\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-textfield>\n        <adapt-rx-textfield\n          rx-id=\"support-email\"\n          label=\"Support email\"\n          formControlName=\"supportEmail\"\n          required=\"true\"\n          email=\"true\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-textfield>\n      </adapt-accordion-tab>\n\n      <adapt-accordion-tab title=\"Link BMC Service Cloud account to BMC Helix platform\" isOpen=\"true\" class=\"d-block\">\n        <adapt-alert\n          *ngIf=\"oauthUrl === null\"\n          class=\"py-2\"\n          [config]=\"{\n            content:\n              'com.bmc.arsys.rx.client.admin.issue-reporting-configuration.issue-reporting-configuration-missing.message'\n              | translate,\n            type: 'inline',\n            variant: 'danger'\n          }\"\n        ></adapt-alert>\n        <ng-container *ngIf=\"oauthUrl\">\n          <adapt-alert\n            *ngIf=\"isAccountLinked\"\n            class=\"py-2\"\n            [config]=\"{\n              content:\n                'com.bmc.arsys.rx.client.admin.issue-reporting-configuration.account-is-linked.message' | translate,\n              type: 'inline',\n              variant: 'success'\n            }\"\n          ></adapt-alert>\n          <adapt-alert\n            *ngIf=\"!isAccountLinked\"\n            class=\"py-2\"\n            [config]=\"{\n              content:\n                'com.bmc.arsys.rx.client.admin.issue-reporting-configuration.account-is-not-linked.message' | translate,\n              type: 'inline',\n              variant: 'warning'\n            }\"\n          ></adapt-alert>\n          <button\n            adapt-button\n            type=\"button\"\n            rx-id=\"link-account-button\"\n            btn-type=\"secondary\"\n            [disabled]=\"isAccountLinked\"\n            (click)=\"openWindow()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.admin.issue-reporting-configuration.link-account.label' | translate }}\n          </button>\n        </ng-container>\n      </adapt-accordion-tab>\n\n      <button\n        adapt-button\n        type=\"button\"\n        rx-id=\"save-button\"\n        btn-type=\"primary\"\n        class=\"mt-4\"\n        [disabled]=\"issueReportingConfigurationForm.pristine || issueReportingConfigurationForm.invalid\"\n        (click)=\"saveConfig()\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n      </button>\n    </form>\n  </adapt-accordion>\n</rx-admin-settings>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield{max-width:400px}\n"], components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$3.EmailValidator, selector: "[email][formControlName],[email][formControl],[email][ngModel]", inputs: ["email"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IssueReportingConfigurationAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-issue-reporting-configuration',
                        templateUrl: './issue-reporting-configuration.component.html',
                        styleUrls: ['./issue-reporting-configuration.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }, { type: i2__namespace.RxCurrentUserService }, { type: RxIssueReportingConfigurationService }, { type: i2__namespace.RxNotificationService }, { type: i3__namespace$2.RxRecordInstanceService }, { type: i3__namespace$2.RxRecordInstanceUpdateService }, { type: i4__namespace.TranslateService }]; } });

    var IssueReportingConfigurationModule = /** @class */ (function () {
        function IssueReportingConfigurationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-issue-reporting-configuration',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(IssueReportingConfigurationAdminComponent),
                name: 'Issue reporting configuration',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return IssueReportingConfigurationModule;
    }());
    IssueReportingConfigurationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IssueReportingConfigurationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    IssueReportingConfigurationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IssueReportingConfigurationModule, declarations: [IssueReportingConfigurationAdminComponent], imports: [i1$2.AdaptAccordionModule,
            i1$2.AdaptAlertModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptIconModule,
            i1$2.AdaptRxTextfieldModule,
            i4.AdminSettingsModule,
            i8.CommonModule,
            i1.ReactiveFormsModule,
            i4$1.TranslateModule] });
    IssueReportingConfigurationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IssueReportingConfigurationModule, imports: [[
                i1$2.AdaptAccordionModule,
                i1$2.AdaptAlertModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptIconModule,
                i1$2.AdaptRxTextfieldModule,
                i4.AdminSettingsModule,
                i8.CommonModule,
                i1.ReactiveFormsModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: IssueReportingConfigurationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$2.AdaptAccordionModule,
                            i1$2.AdaptAlertModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptIconModule,
                            i1$2.AdaptRxTextfieldModule,
                            i4.AdminSettingsModule,
                            i8.CommonModule,
                            i1.ReactiveFormsModule,
                            i4$1.TranslateModule
                        ],
                        declarations: [IssueReportingConfigurationAdminComponent],
                        entryComponents: [IssueReportingConfigurationAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var TenantFields;
    (function (TenantFields) {
        TenantFields["Name"] = "name";
        TenantFields["DomainIdentifier"] = "domainIdentifier";
        TenantFields["VirtualHostname"] = "virtualHostname";
    })(TenantFields || (TenantFields = {}));

    var RxTenantService = /** @class */ (function () {
        function RxTenantService(httpClient) {
            this.httpClient = httpClient;
            this.tenantApiUrl = '/api/rx/application/tenant';
        }
        RxTenantService.prototype.createTenant = function (tenant) {
            return this.httpClient.post(this.tenantApiUrl, tenant);
        };
        RxTenantService.prototype.deleteTenant = function (tenantName) {
            return this.httpClient.delete(this.tenantApiUrl + "/" + tenantName);
        };
        RxTenantService.prototype.editTenant = function (tenant) {
            return this.httpClient.put(this.tenantApiUrl + "/" + tenant.name, tenant);
        };
        RxTenantService.prototype.getTenant = function (tenantName) {
            return this.httpClient.get(this.tenantApiUrl + "/" + tenantName);
        };
        return RxTenantService;
    }());
    RxTenantService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxTenantService, deps: [{ token: i1__namespace$2.HttpClient }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxTenantService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxTenantService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxTenantService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }]; } });

    var TenantEditorComponent = /** @class */ (function (_super) {
        __extends(TenantEditorComponent, _super);
        function TenantEditorComponent(formBuilder, dockedPanelContext, rxManageTenantService, rxNotificationService, translateService, injector) {
            var _this = _super.call(this, dockedPanelContext, injector) || this;
            _this.formBuilder = formBuilder;
            _this.dockedPanelContext = dockedPanelContext;
            _this.rxManageTenantService = rxManageTenantService;
            _this.rxNotificationService = rxNotificationService;
            _this.translateService = translateService;
            _this.injector = injector;
            _this.domainIdentifierRegexp = /^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/;
            _this.isEditMode = false;
            return _this;
        }
        TenantEditorComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            var selectedTenantData = this.dockedPanelContext.getData().tenant;
            this.tenantEditorFormGroup = this.formBuilder.group({
                name: '',
                domainIdentifier: '',
                virtualHostname: ''
            });
            if (selectedTenantData) {
                this.isEditMode = true;
                this.tenantEditorFormGroup.patchValue({
                    name: selectedTenantData.name,
                    domainIdentifier: selectedTenantData.domainIdentifier,
                    virtualHostname: selectedTenantData.virtualHostname
                });
            }
        };
        TenantEditorComponent.prototype.isDirty = function () {
            return this.tenantEditorFormGroup.dirty;
        };
        TenantEditorComponent.prototype.save = function () {
            var _this = this;
            var tenantPayload = this.tenantEditorFormGroup.getRawValue();
            if (this.isEditMode) {
                tenantPayload.tenantId = this.dockedPanelContext.getData().tenant.tenantId;
            }
            var writeEvent = this.isEditMode
                ? this.rxManageTenantService.editTenant(tenantPayload)
                : this.rxManageTenantService.createTenant(tenantPayload);
            writeEvent.subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.isEditMode
                    ? _this.translateService.instant('com.bmc.arsys.rx.client.admin.manage-tenant.tenant-editor.tenant-updated.message')
                    : _this.translateService.instant('com.bmc.arsys.rx.client.admin.manage-tenant.tenant-editor.tenant-created.message'));
                _this.tenantEditorFormGroup.markAsPristine();
                _this.dockedPanelContext.close('');
            });
        };
        TenantEditorComponent.prototype.cancel = function () {
            this.dockedPanelContext.dismiss(i1$2.DismissReasons.CLOSE_BTN);
        };
        return TenantEditorComponent;
    }(i1$1.RxModalClass));
    TenantEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TenantEditorComponent, deps: [{ token: i1__namespace$3.FormBuilder }, { token: i1__namespace$1.DockedPanelContext }, { token: RxTenantService }, { token: i2__namespace.RxNotificationService }, { token: i4__namespace.TranslateService }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TenantEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: TenantEditorComponent, selector: "rx-tenant-editor", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"dp-body\">\n  <form [formGroup]=\"tenantEditorFormGroup\">\n    <adapt-rx-textfield\n      class=\"d-block form-group\"\n      rx-id=\"tenant-name-field\"\n      formControlName=\"name\"\n      label=\" {{ 'com.bmc.arsys.rx.client.admin.manage-tenant.tenant-editor.tenant-name.label' | translate }}\"\n      required\n      maxlength=\"20\"\n      [disabled]=\"isEditMode\"\n    ></adapt-rx-textfield>\n    <adapt-rx-textfield\n      class=\"d-block form-group\"\n      rx-id=\"domain-identifier-field\"\n      formControlName=\"domainIdentifier\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.manage-tenant.tenant-editor.domain-identifier.label' | translate }}\"\n      placeholder=\"e.g. domain.com\"\n      required\n      maxlength=\"254\"\n      [pattern]=\"domainIdentifierRegexp\"\n    ></adapt-rx-textfield>\n    <adapt-rx-textfield\n      class=\"d-block form-group\"\n      rx-id=\"virtual-host-name-field\"\n      formControlName=\"virtualHostname\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.manage-tenant.tenant-editor.virtual-host-name.label' | translate }}\"\n      placeholder=\"e.g. host.domain.com\"\n      required\n      maxlength=\"254\"\n      [pattern]=\"domainIdentifierRegexp\"\n    ></adapt-rx-textfield>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"primary\"\n    class=\"mr-2\"\n    rx-id=\"save-button\"\n    [disabled]=\"tenantEditorFormGroup.invalid || tenantEditorFormGroup.pristine\"\n    (click)=\"save()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button type=\"button\" btn-type=\"secondary\" rx-id=\"close-button\" class=\"mr-2\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i1__namespace$3.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: TenantEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-tenant-editor',
                        templateUrl: './tenant-editor.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }, { type: i1__namespace$1.DockedPanelContext }, { type: RxTenantService }, { type: i2__namespace.RxNotificationService }, { type: i4__namespace.TranslateService }, { type: i0__namespace.Injector }]; } });

    var ManageTenantAdminComponent = /** @class */ (function () {
        function ManageTenantAdminComponent(rxDataPageService, rxTenantService, rxModalService, rxNotificationService, translateService) {
            var _this = this;
            this.rxDataPageService = rxDataPageService;
            this.rxTenantService = rxTenantService;
            this.rxModalService = rxModalService;
            this.rxNotificationService = rxNotificationService;
            this.translateService = translateService;
            this.getData = function (queryParams) { return _this.dataPage.get({ params: lodash.omit(queryParams, ['searchText', 'recorddefinition']) }); };
            this.dataPage = this.rxDataPageService.withType('com.bmc.arsys.rx.application.tenant.datapage.TenantDataPageQuery');
        }
        ManageTenantAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.manageTenantGridConfig = rxjs.of({
                actionButtons: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                        style: 'tertiary',
                        icon: 'trash',
                        actions: [
                            {
                                name: function () { return _this.deleteTenant(); }
                            }
                        ]
                    }
                ],
                recordIdField: 'name',
                enableRowSelection: i7.RowSelectionMode.Single,
                enableFiltering: false,
                getData: function (queryParams) { return _this.getData(queryParams); },
                getRecordDefinition: function () { return rxjs.of(_this.getRecordDefinition()); },
                columns: [
                    {
                        index: 0,
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.manage-tenant.tenant.label'),
                        fieldId: TenantFields.Name,
                        clickable: true,
                        sortable: false,
                        actions: [
                            {
                                name: function (previousActionResult, lastActionRow) { return _this.editTenant(lastActionRow); }
                            }
                        ]
                    },
                    {
                        index: 1,
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.manage-tenant.tenant-editor.domain-identifier.label'),
                        fieldId: TenantFields.DomainIdentifier,
                        sortable: false
                    },
                    {
                        index: 2,
                        title: this.translateService.instant('com.bmc.arsys.rx.client.admin.manage-tenant.tenant-editor.virtual-host-name.label'),
                        fieldId: TenantFields.VirtualHostname,
                        sortable: false
                    }
                ],
                styles: 'flex-fill'
            });
        };
        ManageTenantAdminComponent.prototype.getRecordDefinition = function () {
            return {
                fieldDefinitions: [
                    {
                        id: TenantFields.Name,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: TenantFields.DomainIdentifier,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: TenantFields.VirtualHostname,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    }
                ]
            };
        };
        ManageTenantAdminComponent.prototype.refreshManageTenantGrid = function () {
            this.manageTenantGrid.api.refresh().subscribe();
        };
        ManageTenantAdminComponent.prototype.addTenant = function () {
            var tenantCount = this.manageTenantGrid.adaptTableConfig.data.length;
            if (tenantCount > 0) {
                this.rxNotificationService.addErrorMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.manage-tenant.tenant-already-exists.message'));
            }
            else {
                this.openDockedPanel();
            }
        };
        ManageTenantAdminComponent.prototype.editTenant = function (selectedTenant) {
            var _this = this;
            var selectedTenantName = selectedTenant[TenantFields.Name];
            this.rxTenantService.getTenant(selectedTenantName).subscribe(function (tenant) {
                _this.openDockedPanel(tenant);
            });
        };
        ManageTenantAdminComponent.prototype.openDockedPanel = function (tenant) {
            var _this = this;
            this.rxModalService
                .openDockedPanel({
                title: tenant
                    ? this.translateService.instant('com.bmc.arsys.rx.client.admin.manage-tenant.edit-tenant.label')
                    : this.translateService.instant('com.bmc.arsys.rx.client.admin.manage-tenant.new-tenant.label'),
                content: TenantEditorComponent,
                size: 'lg',
                data: {
                    tenant: tenant
                }
            })
                .then(function () {
                _this.refreshManageTenantGrid();
            })
                .catch(lodash.noop);
        };
        ManageTenantAdminComponent.prototype.deleteTenant = function () {
            var _this = this;
            this.rxModalService
                .confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.client.admin.manage-tenant.delete-confirmation.message')
            })
                .then(function (result) {
                if (result) {
                    var selectedTenantDefinition = _this.manageTenantGrid.api.getFirstSelectedRow();
                    _this.rxTenantService.deleteTenant(selectedTenantDefinition.name).subscribe(function () {
                        _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.manage-tenant.tenant-deleted.message'));
                        _this.refreshManageTenantGrid();
                    });
                }
            });
        };
        return ManageTenantAdminComponent;
    }());
    ManageTenantAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ManageTenantAdminComponent, deps: [{ token: i2__namespace.RxDataPageFactoryService }, { token: RxTenantService }, { token: i1__namespace.RxModalService }, { token: i2__namespace.RxNotificationService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ManageTenantAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ManageTenantAdminComponent, selector: "rx-admin-manage-tenant", viewQueries: [{ propertyName: "manageTenantGrid", first: true, predicate: ["manageTenantGrid"], descendants: true, static: true }], ngImport: i0__namespace, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.manage-tenant.tenant-activation.header.title' | translate }}\"\n>\n  <button\n    type=\"button\"\n    adapt-button\n    btn-type=\"tertiary\"\n    class=\"d-icon-plus_circle align-self-start\"\n    rx-id=\"new-button\"\n    (click)=\"addTenant()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n  </button>\n\n  <rx-record-grid rx-id=\"manage-tenant-grid\" #manageTenantGrid [config]=\"manageTenantGridConfig\"></rx-record-grid>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ManageTenantAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-manage-tenant',
                        templateUrl: './manage-tenant.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxDataPageFactoryService }, { type: RxTenantService }, { type: i1__namespace.RxModalService }, { type: i2__namespace.RxNotificationService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { manageTenantGrid: [{
                    type: i0.ViewChild,
                    args: ['manageTenantGrid', { static: true }]
                }] } });

    var ManageTenantRegistrationModule = /** @class */ (function () {
        function ManageTenantRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-manage-tenant',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(ManageTenantAdminComponent),
                name: 'Manage tenant',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return ManageTenantRegistrationModule;
    }());
    ManageTenantRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ManageTenantRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ManageTenantRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ManageTenantRegistrationModule, declarations: [ManageTenantAdminComponent, TenantEditorComponent], imports: [i8.CommonModule,
            i4.AdminSettingsModule,
            i7.RecordGridModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptRxTextfieldModule,
            i1.ReactiveFormsModule,
            i4$1.TranslateModule] });
    ManageTenantRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ManageTenantRegistrationModule, imports: [[
                i8.CommonModule,
                i4.AdminSettingsModule,
                i7.RecordGridModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptRxTextfieldModule,
                i1.ReactiveFormsModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ManageTenantRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ManageTenantAdminComponent, TenantEditorComponent],
                        imports: [
                            i8.CommonModule,
                            i4.AdminSettingsModule,
                            i7.RecordGridModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1.ReactiveFormsModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [ManageTenantAdminComponent, TenantEditorComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RX_OUTGOING_MAILBOX_STATUS = {
        availableTimeFrames: [
            {
                id: '1',
                name: 'com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.last-hour.label',
                duration: moment__default["default"].duration(1, 'hour')
            },
            {
                id: '2',
                name: 'com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.last-three-hours.label',
                duration: moment__default["default"].duration(3, 'hour')
            },
            {
                id: '3',
                name: 'com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.last-day.label',
                duration: moment__default["default"].duration(1, 'day')
            },
            {
                id: '4',
                name: 'com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.last-week.label',
                duration: moment__default["default"].duration(1, 'week')
            },
            {
                id: '5',
                name: 'com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.last-month.label',
                duration: moment__default["default"].duration(1, 'month')
            }
        ],
        fields: {
            mailboxName: 'MailBoxName',
            pending: 'Pending',
            sent: 'Sent',
            error: 'Error'
        }
    };

    var dataPageQuery = 'com.bmc.arsys.rx.application.email.datapage.OutgoingEmailMessageStatusDataPageQuery';
    var RxOutgoingMailboxStatusDataPageService = /** @class */ (function (_super) {
        __extends(RxOutgoingMailboxStatusDataPageService, _super);
        function RxOutgoingMailboxStatusDataPageService(injector) {
            var _this = _super.call(this, injector, dataPageQuery) || this;
            _this.injector = injector;
            return _this;
        }
        return RxOutgoingMailboxStatusDataPageService;
    }(i2.DataPage));
    RxOutgoingMailboxStatusDataPageService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxOutgoingMailboxStatusDataPageService, deps: [{ token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxOutgoingMailboxStatusDataPageService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxOutgoingMailboxStatusDataPageService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxOutgoingMailboxStatusDataPageService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Injector }]; } });

    var OutgoingMailboxStatusAdminComponent = /** @class */ (function () {
        function OutgoingMailboxStatusAdminComponent(rxOutgoingMailboxStatusDataPageService, translateService, iconConfig) {
            var _this = this;
            this.rxOutgoingMailboxStatusDataPageService = rxOutgoingMailboxStatusDataPageService;
            this.translateService = translateService;
            this.iconConfig = iconConfig;
            this.availableTimeFrames = RX_OUTGOING_MAILBOX_STATUS.availableTimeFrames.map(function (timeFrame) { return (Object.assign(Object.assign({}, timeFrame), { name: _this.translateService.instant(timeFrame.name) })); });
            this.selectedTimeFrame = [this.availableTimeFrames[0]];
            iconConfig.registerIcons([dplIconfont.ai_info_circle_o_adapt]);
        }
        OutgoingMailboxStatusAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            var gridColumns = [
                {
                    index: 0,
                    fieldId: RX_OUTGOING_MAILBOX_STATUS.fields.mailboxName,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.mailbox-name.label')
                },
                {
                    index: 1,
                    fieldId: RX_OUTGOING_MAILBOX_STATUS.fields.pending,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.pending.label'),
                    filterable: false
                },
                {
                    index: 2,
                    fieldId: RX_OUTGOING_MAILBOX_STATUS.fields.error,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.error.label'),
                    filterable: false
                },
                {
                    index: 3,
                    fieldId: RX_OUTGOING_MAILBOX_STATUS.fields.sent,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.sent.label'),
                    filterable: false
                }
            ];
            var recordDefinition = {
                fieldDefinitions: [
                    {
                        id: RX_OUTGOING_MAILBOX_STATUS.fields.mailboxName,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_OUTGOING_MAILBOX_STATUS.fields.pending,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_OUTGOING_MAILBOX_STATUS.fields.error,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_OUTGOING_MAILBOX_STATUS.fields.sent,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    }
                ]
            };
            this.recordGridConfig = rxjs.of({
                columns: gridColumns,
                enableFiltering: true,
                enableRowSelection: null,
                getRecordDefinition: function () { return rxjs.of(recordDefinition); },
                getData: function (queryParams) {
                    lodash.assign(queryParams, {
                        messagesBefore: moment__default["default"]().subtract(_this.selectedTimeFrame[0].duration).toISOString()
                    });
                    return _this.rxOutgoingMailboxStatusDataPageService.get({ params: queryParams });
                },
                styles: 'flex-fill',
                useExternalFiltering: false
            });
        };
        OutgoingMailboxStatusAdminComponent.prototype.onTimeFrameChange = function (timeFrame) {
            this.selectedTimeFrame = timeFrame;
            this.recordGrid.api.refresh().subscribe();
        };
        OutgoingMailboxStatusAdminComponent.prototype.optionFormatter = function (timeFrame) {
            return timeFrame.name;
        };
        return OutgoingMailboxStatusAdminComponent;
    }());
    OutgoingMailboxStatusAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: OutgoingMailboxStatusAdminComponent, deps: [{ token: RxOutgoingMailboxStatusDataPageService }, { token: i4__namespace.TranslateService }, { token: i1__namespace$1.AdaptIconConfig }], target: i0__namespace.ɵɵFactoryTarget.Component });
    OutgoingMailboxStatusAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: OutgoingMailboxStatusAdminComponent, selector: "rx-admin-outgoing-mailbox-status", viewQueries: [{ propertyName: "recordGrid", first: true, predicate: ["recordGrid"], descendants: true }], ngImport: i0__namespace, template: "<rx-admin-settings header=\"Outgoing mailbox status\">\n  <div class=\"d-flex flex-wrap\">\n    <adapt-rx-select\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.time-frame.label' | translate }}\"\n      class=\"form-group\"\n      rx-id=\"time-frame\"\n      [options]=\"availableTimeFrames\"\n      [ngModel]=\"selectedTimeFrame\"\n      [optionFormatter]=\"optionFormatter\"\n      (ngModelChange)=\"onTimeFrameChange($event)\"\n    >\n    </adapt-rx-select>\n\n    <button\n      adapt-button\n      btn-type=\"tertiary\"\n      class=\"form-group ml-auto align-self-end\"\n      placement=\"bottom\"\n      type=\"button\"\n      [adaptPopover]=\"'com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.about-sent-email.tooltip' | translate\"\n    >\n      <span>\n        <adapt-icon name=\"info_circle_o_adapt\"></adapt-icon>\n        {{ 'com.bmc.arsys.rx.client.admin.outgoing-mailbox-status.about-sent-email.label' | translate }}\n      </span>\n    </button>\n  </div>\n\n  <rx-record-grid rx-id=\"outgoing-mailbox-status-grid\" #recordGrid [config]=\"recordGridConfig\"></rx-record-grid>\n</rx-admin-settings>\n", styles: ["adapt-rx-select[rx-id=time-frame]{width:150px}\n"], components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace$1.AdaptIconComponent, selector: "adapt-icon", inputs: ["name", "classList", "description", "testID"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], directives: [{ type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1__namespace$1.AdaptPopoverDirective, selector: "[adaptPopover]", inputs: ["adaptPopover", "popoverTitle", "placement", "fallbackPlacement", "triggers", "container", "appendToBody", "closeBtn", "popupDelay", "disablePopover", "popoverClass", "autoClose", "closeOnOutOfView", "maxWidth", "minWidth"], outputs: ["shown", "hidden"], exportAs: ["adaptPopover"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: OutgoingMailboxStatusAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-outgoing-mailbox-status',
                        templateUrl: './outgoing-mailbox-status.component.html',
                        styleUrls: ['./outgoing-mailbox-status.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: RxOutgoingMailboxStatusDataPageService }, { type: i4__namespace.TranslateService }, { type: i1__namespace$1.AdaptIconConfig }]; }, propDecorators: { recordGrid: [{
                    type: i0.ViewChild,
                    args: ['recordGrid']
                }] } });

    var OutgoingMailboxStatusRegistrationModule = /** @class */ (function () {
        function OutgoingMailboxStatusRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-outgoing-mailbox-status',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(OutgoingMailboxStatusAdminComponent),
                name: 'Outgoing mailbox status',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return OutgoingMailboxStatusRegistrationModule;
    }());
    OutgoingMailboxStatusRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: OutgoingMailboxStatusRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    OutgoingMailboxStatusRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: OutgoingMailboxStatusRegistrationModule, declarations: [OutgoingMailboxStatusAdminComponent], imports: [i8.CommonModule,
            i4.AdminSettingsModule,
            i7.RecordGridModule,
            i1$2.AdaptRxSelectModule,
            i1.FormsModule,
            i1$2.AdaptIconModule,
            i1$2.AdaptPopoverModule,
            i1$2.AdaptButtonModule,
            i4$1.TranslateModule] });
    OutgoingMailboxStatusRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: OutgoingMailboxStatusRegistrationModule, imports: [[
                i8.CommonModule,
                i4.AdminSettingsModule,
                i7.RecordGridModule,
                i1$2.AdaptRxSelectModule,
                i1.FormsModule,
                i1$2.AdaptIconModule,
                i1$2.AdaptPopoverModule,
                i1$2.AdaptButtonModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: OutgoingMailboxStatusRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [OutgoingMailboxStatusAdminComponent],
                        imports: [
                            i8.CommonModule,
                            i4.AdminSettingsModule,
                            i7.RecordGridModule,
                            i1$2.AdaptRxSelectModule,
                            i1.FormsModule,
                            i1$2.AdaptIconModule,
                            i1$2.AdaptPopoverModule,
                            i1$2.AdaptButtonModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [OutgoingMailboxStatusAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var PermissionsPolicyHeaderAdminComponent = /** @class */ (function (_super) {
        __extends(PermissionsPolicyHeaderAdminComponent, _super);
        function PermissionsPolicyHeaderAdminComponent(rxNotificationService, translateService, rxSystemConfigurationService) {
            var _this = _super.call(this) || this;
            _this.rxNotificationService = rxNotificationService;
            _this.translateService = translateService;
            _this.rxSystemConfigurationService = rxSystemConfigurationService;
            _this.settingName = 'permissionsPolicy';
            _this.permissionsPolicyHeader = '';
            _this.syntaxUrl = 'https://github.com/w3c/webappsec-permissions-policy/blob/main/permissions-policy-explainer.md';
            return _this;
        }
        PermissionsPolicyHeaderAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.notifyPropertyChanged('api', {
                isDirty: function () { return _this.isDirty(); }
            });
            this.busy = this.rxSystemConfigurationService.getConfiguration(this.settingName).subscribe(function (settingsData) {
                _this.permissionsPolicyHeader = settingsData.value;
            });
        };
        PermissionsPolicyHeaderAdminComponent.prototype.isDirty = function () {
            var _a;
            return (_a = this.permissionPolicyHeaderModel) === null || _a === void 0 ? void 0 : _a.dirty;
        };
        PermissionsPolicyHeaderAdminComponent.prototype.onSaveClick = function () {
            var _this = this;
            this.rxSystemConfigurationService.setConfiguration(this.settingName, this.permissionsPolicyHeader).subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.settings-saved.message'));
                _this.permissionPolicyHeaderModel.control.markAsPristine();
            });
        };
        return PermissionsPolicyHeaderAdminComponent;
    }(i4$2.BaseViewComponent));
    PermissionsPolicyHeaderAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PermissionsPolicyHeaderAdminComponent, deps: [{ token: i2__namespace.RxNotificationService }, { token: i4__namespace.TranslateService }, { token: i2__namespace.RxSystemConfigurationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    PermissionsPolicyHeaderAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: PermissionsPolicyHeaderAdminComponent, selector: "rx-admin-permissions-policy", viewQueries: [{ propertyName: "permissionPolicyHeaderModel", first: true, predicate: ["permissionPolicyHeaderModel"], descendants: true, read: i1.NgModel, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.permissions-policy-header.header.title' | translate }}\"\n  [busy]=\"busy\"\n>\n  <adapt-rx-textfield\n    [label]=\"'com.bmc.arsys.rx.client.admin.permissions-policy-header.label' | translate\"\n    [(ngModel)]=\"permissionsPolicyHeader\"\n    rx-id=\"permission-policy-header\"\n    name=\"permissionPolicyHeaderModel\"\n    class=\"form-group d-block\"\n    #permissionPolicyHeaderModel=\"ngModel\"\n    [autofocus]=\"true\"\n    [tooltip]=\"{\n      iconName: 'question_circle_o',\n      content: popover,\n      placement: 'right',\n      popoverMode: true,\n      maxWidth: 400\n    }\"\n  ></adapt-rx-textfield>\n\n  <button\n    class=\"align-self-start\"\n    rx-id=\"save-button\"\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    [disabled]=\"!permissionsPolicyHeader || !isDirty()\"\n    (click)=\"onSaveClick()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <ng-template #popover>\n    {{ 'com.bmc.arsys.rx.client.admin.permissions-policy-header.syntax-information.message' | translate }}\n    <a class=\"text-secondary\" target=\"_blank\" href=\"{{ syntaxUrl }}\">{{ syntaxUrl }}</a>\n  </ng-template>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PermissionsPolicyHeaderAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-permissions-policy',
                        templateUrl: './permissions-policy-header.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxNotificationService }, { type: i4__namespace.TranslateService }, { type: i2__namespace.RxSystemConfigurationService }]; }, propDecorators: { permissionPolicyHeaderModel: [{
                    type: i0.ViewChild,
                    args: ['permissionPolicyHeaderModel', { read: i1.NgModel, static: true }]
                }] } });

    var PermissionsPolicyHeaderRegistrationModule = /** @class */ (function () {
        function PermissionsPolicyHeaderRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-permissions-policy',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(PermissionsPolicyHeaderAdminComponent),
                name: 'Permissions Policy Header',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return PermissionsPolicyHeaderRegistrationModule;
    }());
    PermissionsPolicyHeaderRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PermissionsPolicyHeaderRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PermissionsPolicyHeaderRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PermissionsPolicyHeaderRegistrationModule, declarations: [PermissionsPolicyHeaderAdminComponent], imports: [i4.AdminSettingsModule,
            i1.FormsModule,
            i8.CommonModule,
            i4$1.TranslateModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptEmptyStateModule,
            i1$2.AdaptIconModule,
            i1$2.AdaptPopoverModule] });
    PermissionsPolicyHeaderRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PermissionsPolicyHeaderRegistrationModule, imports: [[
                i4.AdminSettingsModule,
                i1.FormsModule,
                i8.CommonModule,
                i4$1.TranslateModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptEmptyStateModule,
                i1$2.AdaptIconModule,
                i1$2.AdaptPopoverModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: PermissionsPolicyHeaderRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [PermissionsPolicyHeaderAdminComponent],
                        imports: [
                            i4.AdminSettingsModule,
                            i1.FormsModule,
                            i8.CommonModule,
                            i4$1.TranslateModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptEmptyStateModule,
                            i1$2.AdaptIconModule,
                            i1$2.AdaptPopoverModule
                        ],
                        entryComponents: [PermissionsPolicyHeaderAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RX_REAL_TIME_TRANSLATION = {
        supportedLocales: [
            {
                id: 'zh_cn',
                name: 'com.bmc.arsys.rx.client.common.language.chinese.label'
            },
            {
                id: 'nl',
                name: 'com.bmc.arsys.rx.client.common.language.dutch.label'
            },
            {
                id: 'en',
                name: 'com.bmc.arsys.rx.client.common.language.english.label'
            },
            {
                id: 'fr',
                name: 'com.bmc.arsys.rx.client.common.language.french.label'
            },
            {
                id: 'de',
                name: 'com.bmc.arsys.rx.client.common.language.german.label'
            },
            {
                id: 'it',
                name: 'com.bmc.arsys.rx.client.common.language.italian.label'
            },
            {
                id: 'ja',
                name: 'com.bmc.arsys.rx.client.common.language.japanese.label'
            },
            {
                id: 'ko',
                name: 'com.bmc.arsys.rx.client.common.language.korean.label'
            },
            {
                id: 'pt_br',
                name: 'com.bmc.arsys.rx.client.common.language.portuguese.label'
            },
            {
                id: 'ru',
                name: 'com.bmc.arsys.rx.client.common.language.russian.label'
            },
            {
                id: 'es',
                name: 'com.bmc.arsys.rx.client.common.language.spanish.label'
            },
            {
                id: 'sv',
                name: 'com.bmc.arsys.rx.client.common.language.swedish.label'
            }
        ],
        defaultSourceLocale: {
            id: 'en',
            name: 'com.bmc.arsys.rx.client.common.language.english.label'
        },
        defaultTargetLocale: {
            id: 'de',
            name: 'com.bmc.arsys.rx.client.common.language.german.label'
        }
    };

    var RealTimeTranslationAdminComponent = /** @class */ (function () {
        function RealTimeTranslationAdminComponent(rxCommandFactoryService, translateService) {
            var _this = this;
            this.rxCommandFactoryService = rxCommandFactoryService;
            this.translateService = translateService;
            this.sourceLanguage = [];
            this.targetLanguage = [];
            this.supportedLocaleOptions = RX_REAL_TIME_TRANSLATION.supportedLocales.map(function (locale) { return (Object.assign(Object.assign({}, locale), { name: _this.translateService.instant(locale.name) })); });
        }
        RealTimeTranslationAdminComponent.prototype.ngOnInit = function () {
            this.reset();
        };
        RealTimeTranslationAdminComponent.prototype.optionFormatter = function (option) {
            return option.name;
        };
        RealTimeTranslationAdminComponent.prototype.reset = function () {
            this.sourceText = this.translatedText = null;
            this.sourceLanguage = [
                Object.assign(Object.assign({}, RX_REAL_TIME_TRANSLATION.defaultSourceLocale), { name: this.translateService.instant(RX_REAL_TIME_TRANSLATION.defaultSourceLocale.name) })
            ];
            this.targetLanguage = [
                Object.assign(Object.assign({}, RX_REAL_TIME_TRANSLATION.defaultTargetLocale), { name: this.translateService.instant(RX_REAL_TIME_TRANSLATION.defaultTargetLocale.name) })
            ];
            this.realTimeTranslationForm.form.markAsPristine();
        };
        RealTimeTranslationAdminComponent.prototype.translate = function () {
            var _this = this;
            this.realTimeTranslationForm.form.markAsPristine();
            this.rxCommandFactoryService
                .forResourceType('com.bmc.arsys.rx.application.cognitive.command.TranslateTextCommand')
                .execute({
                texts: lodash.castArray(this.sourceText),
                sourceLanguage: lodash.head(this.sourceLanguage).id,
                targetLanguage: lodash.head(this.targetLanguage).id
            })
                .subscribe(function (response) {
                _this.translatedText = lodash.head(response);
            });
        };
        RealTimeTranslationAdminComponent.prototype.clearTexts = function () {
            this.sourceText = null;
            this.translatedText = null;
        };
        RealTimeTranslationAdminComponent.prototype.isTranslateButtonDisabled = function () {
            return this.realTimeTranslationForm.pristine || this.realTimeTranslationForm.invalid;
        };
        RealTimeTranslationAdminComponent.prototype.isClearButtonDisabled = function () {
            return lodash.isEmpty(this.sourceText) && lodash.isEmpty(this.translatedText);
        };
        RealTimeTranslationAdminComponent.prototype.copyTranslatedText = function () {
            var element = document.querySelector('[rx-id="translation"] textarea');
            element.select();
            document.execCommand('copy');
        };
        RealTimeTranslationAdminComponent.prototype.isCopyButtonDisabled = function () {
            return lodash.isEmpty(this.translatedText);
        };
        return RealTimeTranslationAdminComponent;
    }());
    RealTimeTranslationAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RealTimeTranslationAdminComponent, deps: [{ token: i2__namespace.RxCommandFactoryService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RealTimeTranslationAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RealTimeTranslationAdminComponent, selector: "rx-admin-real-time-translation", viewQueries: [{ propertyName: "realTimeTranslationForm", first: true, predicate: ["realTimeTranslationForm"], descendants: true, read: i1.NgForm, static: true }], ngImport: i0__namespace, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.real-time-translation.interactive-translation.header.title' | translate }}\"\n>\n  <form #realTimeTranslationForm=\"ngForm\">\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <adapt-rx-select\n          name=\"sourceLanguage\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.real-time-translation.source-language.label' | translate }}\"\n          rx-id=\"source-language\"\n          class=\"form-group d-block\"\n          [(ngModel)]=\"sourceLanguage\"\n          [options]=\"supportedLocaleOptions\"\n          [optionFormatter]=\"optionFormatter\"\n        ></adapt-rx-select>\n      </div>\n      <div class=\"col-md-6\">\n        <adapt-rx-select\n          name=\"targetLanguage\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.real-time-translation.target-language.label' | translate }}\"\n          rx-id=\"target-language\"\n          class=\"form-group d-block\"\n          [(ngModel)]=\"targetLanguage\"\n          [options]=\"supportedLocaleOptions\"\n          [optionFormatter]=\"optionFormatter\"\n        ></adapt-rx-select>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-6\">\n        <adapt-rx-textarea\n          name=\"sourceText\"\n          required=\"true\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.real-time-translation.source-text.label' | translate }}\"\n          placeholder=\"{{ 'com.bmc.arsys.rx.client.admin.real-time-translation.source-text.placeholder' | translate }}\"\n          rx-id=\"source-text\"\n          rows=\"18\"\n          class=\"form-group d-block\"\n          [(ngModel)]=\"sourceText\"\n        ></adapt-rx-textarea>\n\n        <div class=\"mb-2\">\n          <button\n            adapt-button\n            btn-type=\"primary\"\n            type=\"button\"\n            class=\"d-icon-file_arrow_right mr-2 mb-2\"\n            rx-id=\"translate-button\"\n            (click)=\"translate()\"\n            [disabled]=\"isTranslateButtonDisabled()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.admin.real-time-translation.translate.label' | translate }}\n          </button>\n\n          <button\n            type=\"button\"\n            adapt-button\n            btn-type=\"secondary\"\n            class=\"d-icon-minus_circle mb-2\"\n            rx-id=\"clear-button\"\n            (click)=\"clearTexts()\"\n            [disabled]=\"isClearButtonDisabled()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.clear.label' | translate }}\n          </button>\n        </div>\n      </div>\n\n      <div class=\"col-md-6\">\n        <adapt-rx-textarea\n          name=\"translatedText\"\n          class=\"form-group d-block\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.real-time-translation.translation.label' | translate }}\"\n          rx-id=\"translation\"\n          rows=\"18\"\n          [readonly]=\"true\"\n          [disabledStyleForReadonlyState]=\"true\"\n          [ngModel]=\"translatedText\"\n        ></adapt-rx-textarea>\n\n        <div class=\"mb-4\">\n          <button\n            adapt-button\n            btn-type=\"secondary\"\n            type=\"button\"\n            class=\"d-icon-files_copy_o\"\n            rx-id=\"copy-button\"\n            (click)=\"copyTranslatedText()\"\n            [disabled]=\"isCopyButtonDisabled()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.copy.label' | translate }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </form>\n</rx-admin-settings>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textarea ::ng-deep textarea{resize:none}adapt-rx-select{max-width:400px}\n"], components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptRxTextareaComponent, selector: "adapt-rx-textarea", inputs: ["rows", "maxRows", "autocomplete", "placeholder", "size", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RealTimeTranslationAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-real-time-translation',
                        templateUrl: './real-time-translation.component.html',
                        styleUrls: ['./real-time-translation.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxCommandFactoryService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { realTimeTranslationForm: [{
                    type: i0.ViewChild,
                    args: ['realTimeTranslationForm', { static: true, read: i1.NgForm }]
                }] } });

    var RealTimeTranslationRegistrationModule = /** @class */ (function () {
        function RealTimeTranslationRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-real-time-translation',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(RealTimeTranslationAdminComponent),
                name: 'Real time translation',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return RealTimeTranslationRegistrationModule;
    }());
    RealTimeTranslationRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RealTimeTranslationRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RealTimeTranslationRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RealTimeTranslationRegistrationModule, declarations: [RealTimeTranslationAdminComponent], imports: [i4.AdminSettingsModule,
            i1$2.AdaptRxTextfieldModule,
            i8.CommonModule,
            i1.FormsModule,
            i1$2.AdaptRxSelectModule,
            i1$2.AdaptRxTextareaModule,
            i1$2.AdaptButtonModule,
            i4$1.TranslateModule] });
    RealTimeTranslationRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RealTimeTranslationRegistrationModule, imports: [[
                i4.AdminSettingsModule,
                i1$2.AdaptRxTextfieldModule,
                i8.CommonModule,
                i1.FormsModule,
                i1$2.AdaptRxSelectModule,
                i1$2.AdaptRxTextareaModule,
                i1$2.AdaptButtonModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RealTimeTranslationRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RealTimeTranslationAdminComponent],
                        imports: [
                            i4.AdminSettingsModule,
                            i1$2.AdaptRxTextfieldModule,
                            i8.CommonModule,
                            i1.FormsModule,
                            i1$2.AdaptRxSelectModule,
                            i1$2.AdaptRxTextareaModule,
                            i1$2.AdaptButtonModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [RealTimeTranslationAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RX_ROLE_PERMISSIONS = {
        minRoleId: -2147483647,
        maxRoleId: -1
    };

    var RxRolePermissionsService = /** @class */ (function () {
        function RxRolePermissionsService(httpClient) {
            this.httpClient = httpClient;
            this.path = '/api/rx/application/role';
        }
        RxRolePermissionsService.prototype.getUrl = function (roleDescriptor) {
            return this.path + "/" + encodeURIComponent(roleDescriptor.applicationName) + "/" + encodeURIComponent(roleDescriptor.name);
        };
        RxRolePermissionsService.prototype.get = function (roleDescriptor) {
            return this.httpClient.get(this.getUrl(roleDescriptor));
        };
        RxRolePermissionsService.prototype.deleteRole = function (roleDescriptor) {
            return this.httpClient.delete(this.getUrl(roleDescriptor));
        };
        RxRolePermissionsService.prototype.delete = function (roles) {
            var _this = this;
            var deleteObservables = roles.map(function (role) { return _this.deleteRole(role); });
            return rxjs.forkJoin(deleteObservables);
        };
        RxRolePermissionsService.prototype.create = function (role) {
            return this.httpClient.post(this.path, role);
        };
        RxRolePermissionsService.prototype.update = function (role, roleName) {
            return this.httpClient.put(this.getUrl({ applicationName: role.applicationName, name: roleName }), role);
        };
        return RxRolePermissionsService;
    }());
    RxRolePermissionsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRolePermissionsService, deps: [{ token: i1__namespace$2.HttpClient }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRolePermissionsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRolePermissionsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRolePermissionsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }]; } });

    var RoleEditorComponent = /** @class */ (function (_super) {
        __extends(RoleEditorComponent, _super);
        function RoleEditorComponent(rxGlobalCacheService, rxGroupDataPageService, rxRolePermissionsService, rxNotificationService, dockedPanelContext, translateService, injector) {
            var _this = _super.call(this, dockedPanelContext, injector) || this;
            _this.rxGlobalCacheService = rxGlobalCacheService;
            _this.rxGroupDataPageService = rxGroupDataPageService;
            _this.rxRolePermissionsService = rxRolePermissionsService;
            _this.rxNotificationService = rxNotificationService;
            _this.dockedPanelContext = dockedPanelContext;
            _this.translateService = translateService;
            _this.injector = injector;
            _this.isEditMode = false;
            _this.isSaveInProgress = false;
            _this.isSaveButtonDisabled = true;
            _this.maxRoleId = RX_ROLE_PERMISSIONS.maxRoleId;
            _this.minRoleId = RX_ROLE_PERMISSIONS.minRoleId;
            _this.validDefinitionNameRegex = i3.RX_RECORD_DEFINITION.validDefinitionNameRegex;
            _this.destroyed$ = new rxjs.ReplaySubject(1);
            _this.validatorFn = _this.roleNameValidator.bind(_this);
            _this.testSearch = function (text$) { return text$.pipe(operators.distinctUntilChanged(), operators.map(function (term) { return _this.groupList.filter(function (v) { return v.toLowerCase().indexOf(term.toLowerCase()) > -1; }).slice(0, 10); })); };
            _this.productionSearch = function (text$) { return text$.pipe(operators.distinctUntilChanged(), operators.map(function (term) { return _this.groupList.filter(function (v) { return v.toLowerCase().indexOf(term.toLowerCase()) > -1; }).slice(0, 10); })); };
            return _this;
        }
        RoleEditorComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.getApplicationList();
            this.getGroupList();
            this.role = this.dockedPanelContext.getData().role;
            this.isEditMode = Boolean(this.role.roleName);
            this.isSaveButtonDisabled = !this.roleEditorForm.valid;
            this.roleEditorForm.valueChanges.pipe(operators.distinctUntilChanged(), operators.takeUntil(this.destroyed$)).subscribe(function (value) {
                _this.isSaveButtonDisabled = !_this.roleEditorForm.valid || _this.roleEditorForm.pristine;
            });
            if (this.isEditMode) {
                var selectedApplication = lodash.find(this.applicationOptions, { value: this.role.applicationName });
                if (!selectedApplication) {
                    selectedApplication = {
                        displayValue: this.role.applicationName,
                        value: this.role.applicationName
                    };
                    this.applicationOptions.push(selectedApplication);
                }
                this.selectedApplication = [selectedApplication];
                this.oldRoleName = this.role.roleName;
            }
        };
        RoleEditorComponent.prototype.isDirty = function () {
            return this.roleEditorForm.dirty;
        };
        RoleEditorComponent.prototype.optionFormatter = function (option) {
            return option.displayValue;
        };
        RoleEditorComponent.prototype.save = function () {
            var _this = this;
            this.isSaveInProgress = true;
            this.isSaveButtonDisabled = true;
            if (!this.isEditMode) {
                this.role.applicationName = this.selectedApplication[0].value;
            }
            var saveRole$ = this.isEditMode
                ? this.rxRolePermissionsService.update(this.role, this.oldRoleName)
                : this.rxRolePermissionsService.create(this.role);
            saveRole$
                .pipe(operators.catchError(function (error) {
                _this.isSaveInProgress = false;
                _this.isSaveButtonDisabled = false;
                return rxjs.throwError(error);
            }))
                .subscribe(function (response) {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.role-permissions.role-saved.message'));
                _this.isSaveInProgress = false;
                _this.isSaveButtonDisabled = false;
                _this.dockedPanelContext.close(saveRole$);
            });
        };
        RoleEditorComponent.prototype.getGroupList = function () {
            var _this = this;
            var startIndex = 0;
            var pageSize = -1;
            var queryParams = {
                propertySelection: ['groupName', 'groupId'].join(','),
                sortBy: 'groupName'
            };
            this.rxGroupDataPageService
                .get({
                params: Object.assign({ startIndex: startIndex, pageSize: pageSize }, queryParams)
            })
                .pipe(operators.map(function (groupDataPage) {
                _this.groupList = lodash.map(groupDataPage.data, 'groupName');
            }))
                .subscribe();
        };
        RoleEditorComponent.prototype.getApplicationList = function () {
            var _this = this;
            this.rxGlobalCacheService.getBundleDescriptors().subscribe(function (bundleDescriptors) {
                _this.applicationOptions = bundleDescriptors
                    .sort(function (bundleDescriptor, bundleDescriptorToCompare) { return bundleDescriptor.friendlyName.localeCompare(bundleDescriptorToCompare.friendlyName); })
                    .map(function (bundleDescriptor) { return ({
                    displayValue: bundleDescriptor.friendlyName,
                    value: bundleDescriptor.id
                }); });
            });
        };
        RoleEditorComponent.prototype.closeModal = function () {
            this.dockedPanelContext.dismiss(i1$2.DismissReasons.CLOSE_BTN);
        };
        RoleEditorComponent.prototype.roleNameValidator = function (control) {
            return control.value && !i3.RX_RECORD_DEFINITION.validDefinitionNameRegex.test(control.value)
                ? {
                    invalidRoleName: {
                        message: this.translateService.instant('com.bmc.arsys.rx.client.admin.role-permissions.role-name-validation.message')
                    }
                }
                : null;
        };
        RoleEditorComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        return RoleEditorComponent;
    }(i1$1.RxModalClass));
    RoleEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RoleEditorComponent, deps: [{ token: i2__namespace.RxGlobalCacheService }, { token: i2__namespace.RxGroupDataPageService }, { token: RxRolePermissionsService }, { token: i2__namespace.RxNotificationService }, { token: i1__namespace$1.DockedPanelContext }, { token: i4__namespace.TranslateService }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RoleEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RoleEditorComponent, selector: "rx-role-editor", viewQueries: [{ propertyName: "roleEditorForm", first: true, predicate: ["roleEditorForm"], descendants: true, read: i1.NgForm, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"dp-body\">\n  <h4 class=\"m-0 mb-3\">{{ 'com.bmc.arsys.rx.client.admin.role-permissions.general-information.label' | translate }}</h4>\n  <form #roleEditorForm=\"ngForm\">\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.application-or-library.label' | translate }}\"\n      rx-id=\"application-name\"\n      [(ngModel)]=\"selectedApplication\"\n      [options]=\"applicationOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      name=\"application\"\n      required=\"true\"\n      [readonly]=\"isEditMode\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-textfield\n      rx-id=\"role-name\"\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.role-permissions.role-name.label' | translate }}\"\n      name=\"roleName\"\n      required=\"true\"\n      [(ngModel)]=\"role.roleName\"\n      [rxCustomValidators]=\"validatorFn\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-counter\n      rx-id=\"role-id\"\n      class=\"form-group d-block\"\n      required=\"true\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.role-permissions.role-id.label' | translate }}\"\n      name=\"roleId\"\n      adaptIntegerNumber\n      [max]=\"maxRoleId\"\n      [min]=\"minRoleId\"\n      [adaptMax]=\"maxRoleId\"\n      [adaptMin]=\"minRoleId\"\n      [(ngModel)]=\"role.roleID\"\n    ></adapt-rx-counter>\n\n    <div class=\"d-row\">\n      <h4 class=\"form-group\">{{ 'com.bmc.arsys.rx.client.admin.role-permissions.group-mapping.label' | translate }}</h4>\n    </div>\n\n    <adapt-rx-typeahead\n      rx-id=\"test\"\n      class=\"form-group d-block\"\n      [(ngModel)]=\"role.test\"\n      name=\"test\"\n      [typeahead]=\"testSearch\"\n      label=\"Test\"\n      placeholder=\"Enter test group name\"\n    ></adapt-rx-typeahead>\n\n    <adapt-rx-typeahead\n      rx-id=\"production\"\n      class=\"form-group d-block\"\n      [(ngModel)]=\"role.production\"\n      name=\"production\"\n      [typeahead]=\"productionSearch\"\n      label=\"Production\"\n      placeholder=\"Enter production group name\"\n    ></adapt-rx-typeahead>\n\n    <adapt-rx-textfield\n      rx-id=\"datatag\"\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.role-permissions.datatag.label' | translate }}\"\n      name=\"datatag\"\n      placeholder=\"Enter datatag\"\n      [(ngModel)]=\"role.datatag\"\n    ></adapt-rx-textfield>\n  </form>\n</div>\n<div class=\"dp-footer\">\n  <button\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    class=\"mr-2\"\n    (click)=\"save()\"\n    [disabled]=\"isSaveButtonDisabled\"\n    [adaptInlineLoader]=\"isSaveInProgress\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button adapt-button btn-type=\"secondary\" type=\"button\" rx-id=\"cancel-button\" (click)=\"closeModal()\">Cancel</button>\n</div>\n", components: [{ type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxTypeaheadComponent, selector: "adapt-rx-typeahead", inputs: ["autocomplete", "placeholder", "editable", "focusFirst", "restoreFocusAfterClose", "inputFormatter", "typeahead", "resultFormatter", "resultTemplate", "showHint", "placement", "appendToBody", "size", "popupMaxHeight", "disabledStyleForReadonlyState", "virtualScroll", "virtualScrollItemSize", "minBufferPx", "maxBufferPx", "virtualScrollDropdownHeight", "popupClass", "popupWidth", "mobileFocusAutoscrollTopOffset", "showEmptyResultMessage", "resultStatusMessage", "showClearButton", "clearButtonText"], outputs: ["onSelectItem"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1__namespace.RxCustomValidatorsDirective, selector: "[rxCustomValidators][ngModel],[rxCustomValidators][formControl]", inputs: ["rxCustomValidators"] }, { type: i1__namespace$1.AdaptIntegerNumberValidatorDirective, selector: "[adaptIntegerNumber][ngModel], [adaptIntegerNumber][formControl]", inputs: ["adaptIntegerNumberMessageFn"] }, { type: i1__namespace$1.AdaptMaxValidatorDirective, selector: "[adaptMax][ngModel],[adaptMax][formControl]", inputs: ["adaptMax", "adaptMaxMessageFn"] }, { type: i1__namespace$1.AdaptMinValidatorDirective, selector: "[adaptMin][ngModel],[adaptMin][formControl]", inputs: ["adaptMin", "adaptMinMessageFn"] }, { type: i1__namespace$1.AdaptInlineStandaloneDirective, selector: "[adaptInlineLoader]", inputs: ["adaptInlineLoader", "activeText"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RoleEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-role-editor',
                        templateUrl: './role-editor.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxGlobalCacheService }, { type: i2__namespace.RxGroupDataPageService }, { type: RxRolePermissionsService }, { type: i2__namespace.RxNotificationService }, { type: i1__namespace$1.DockedPanelContext }, { type: i4__namespace.TranslateService }, { type: i0__namespace.Injector }]; }, propDecorators: { roleEditorForm: [{
                    type: i0.ViewChild,
                    args: ['roleEditorForm', { read: i1.NgForm, static: true }]
                }] } });

    var RoleFields;
    (function (RoleFields) {
        RoleFields["RoleId"] = "roleID";
        RoleFields["RoleName"] = "roleName";
        RoleFields["ApplicationName"] = "applicationName";
        RoleFields["Datatag"] = "datatag";
    })(RoleFields || (RoleFields = {}));

    var RolePermissionsAdminComponent = /** @class */ (function () {
        function RolePermissionsAdminComponent(rxRolePermissionsService, rxNotificationService, rxModalService, rxRoleDataPage, translateService) {
            var _this = this;
            this.rxRolePermissionsService = rxRolePermissionsService;
            this.rxNotificationService = rxNotificationService;
            this.rxModalService = rxModalService;
            this.rxRoleDataPage = rxRoleDataPage;
            this.translateService = translateService;
            this.isDirty = false;
            this.getData = function (queryParams) {
                delete queryParams.searchText;
                return _this.rxRoleDataPage.get({
                    params: Object.assign({}, queryParams)
                });
            };
        }
        RolePermissionsAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            var gridColumns = [
                {
                    index: 0,
                    fieldId: RoleFields.RoleId,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.role-permissions.role-id.label'),
                    filterable: false
                },
                {
                    index: 1,
                    fieldId: RoleFields.RoleName,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.role-permissions.role-name.label'),
                    filterable: true,
                    clickable: true,
                    actions: [
                        {
                            name: function (previousActionResult, lastActionRow) { return _this.editRole(lastActionRow); }
                        }
                    ]
                },
                {
                    index: 2,
                    fieldId: RoleFields.ApplicationName,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.application-issues.application-name.title'),
                    filterable: true
                },
                {
                    index: 3,
                    fieldId: RoleFields.Datatag,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.role-permissions.datatag.label'),
                    filterable: false
                }
            ];
            var recordDefinition = {
                fieldDefinitions: [
                    {
                        id: RoleFields.RoleId,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RoleFields.RoleName,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RoleFields.ApplicationName,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RoleFields.Datatag,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    }
                ]
            };
            var actionButtons = [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                    style: 'tertiary',
                    icon: 'trash',
                    actions: [
                        {
                            name: function () {
                                _this.rxModalService
                                    .confirm({
                                    title: _this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                                    modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                                    message: _this.translateService.instant('com.bmc.arsys.rx.client.admin.role-permissions.delete-confirmation.message')
                                })
                                    .then(function (result) {
                                    if (result) {
                                        var selectedRecords = lodash.castArray(_this.rolesPermissionsRecordGrid.api.getSelectedRows());
                                        var rolesToDelete = selectedRecords.map(function (record) {
                                            return {
                                                applicationName: record[RoleFields.ApplicationName],
                                                name: record[RoleFields.RoleName]
                                            };
                                        });
                                        _this.rxRolePermissionsService.delete(rolesToDelete).subscribe(function () {
                                            _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.role-permissions.roles-deleted.message'));
                                            _this.rolesPermissionsRecordGrid.api.refresh().subscribe();
                                        });
                                    }
                                });
                            }
                        }
                    ]
                }
            ];
            this.recordGridConfig$ = rxjs.of({
                columns: gridColumns,
                enableFiltering: true,
                recordIdField: RoleFields.RoleId,
                getRecordDefinition: function () { return rxjs.of(recordDefinition); },
                enableRowSelection: i7.RowSelectionMode.Multiple,
                actionButtons: actionButtons,
                getData: this.getData,
                styles: 'flex-fill'
            });
        };
        RolePermissionsAdminComponent.prototype.openDockedPanel = function (title, role) {
            var _this = this;
            this.rxModalService
                .openDockedPanel({
                title: title,
                content: RoleEditorComponent,
                size: 'lg',
                data: {
                    role: role
                }
            })
                .then(function (result) {
                if (result) {
                    _this.rolesPermissionsRecordGrid.api.refresh().subscribe();
                }
            })
                .catch(lodash.noop);
        };
        RolePermissionsAdminComponent.prototype.createRole = function () {
            this.openDockedPanel(this.translateService.instant('com.bmc.arsys.rx.client.admin.role-permissions.create-role.label'), {
                roleID: null,
                roleName: '',
                datatag: '',
                test: '',
                production: '',
                applicationName: ''
            });
        };
        RolePermissionsAdminComponent.prototype.editRole = function (roleRow) {
            var _this = this;
            this.rxRolePermissionsService
                .get({
                applicationName: roleRow[RoleFields.ApplicationName],
                name: roleRow[RoleFields.RoleName]
            })
                .subscribe(function (role) {
                _this.openDockedPanel(_this.translateService.instant('com.bmc.arsys.rx.client.admin.role-permissions.edit-role.label'), role);
            });
        };
        return RolePermissionsAdminComponent;
    }());
    RolePermissionsAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RolePermissionsAdminComponent, deps: [{ token: RxRolePermissionsService }, { token: i2__namespace.RxNotificationService }, { token: i1__namespace.RxModalService }, { token: i2__namespace.RxRoleDataPageService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RolePermissionsAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RolePermissionsAdminComponent, selector: "rx-admin-role-permissions", viewQueries: [{ propertyName: "rolesPermissionsRecordGrid", first: true, predicate: ["rolesPermissionsRecordGrid"], descendants: true }], ngImport: i0__namespace, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.role-permissions.header.title' | translate }}\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"tertiary\"\n    class=\"d-icon-plus_circle align-self-start btn btn-link\"\n    rx-id=\"new-button\"\n    (click)=\"createRole()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n  </button>\n\n  <rx-record-grid rx-id=\"roles-permissions-grid\" #rolesPermissionsRecordGrid [config]=\"recordGridConfig$\">\n  </rx-record-grid>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RolePermissionsAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-role-permissions',
                        templateUrl: './role-permissions.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: RxRolePermissionsService }, { type: i2__namespace.RxNotificationService }, { type: i1__namespace.RxModalService }, { type: i2__namespace.RxRoleDataPageService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { rolesPermissionsRecordGrid: [{
                    type: i0.ViewChild,
                    args: ['rolesPermissionsRecordGrid', { static: false }]
                }] } });

    var RolePermissionsRegistrationModule = /** @class */ (function () {
        function RolePermissionsRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-role-permissions',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(RolePermissionsAdminComponent),
                name: 'Role permissions',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return RolePermissionsRegistrationModule;
    }());
    RolePermissionsRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RolePermissionsRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RolePermissionsRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RolePermissionsRegistrationModule, declarations: [RolePermissionsAdminComponent, RoleEditorComponent], imports: [i1$2.AdaptBusyModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptRxCounterModule,
            i1$2.AdaptRxFormControlModule,
            i1$2.AdaptRxSelectModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptRxTypeaheadModule,
            i1$2.AdaptRxValidatorsModule,
            i4.AdminSettingsModule,
            i8.CommonModule,
            i1.FormsModule,
            i7.RecordGridModule,
            i1$1.RxDirectivesModule,
            i4$1.TranslateModule] });
    RolePermissionsRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RolePermissionsRegistrationModule, imports: [[
                i1$2.AdaptBusyModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptRxCounterModule,
                i1$2.AdaptRxFormControlModule,
                i1$2.AdaptRxSelectModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptRxTypeaheadModule,
                i1$2.AdaptRxValidatorsModule,
                i4.AdminSettingsModule,
                i8.CommonModule,
                i1.FormsModule,
                i7.RecordGridModule,
                i1$1.RxDirectivesModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RolePermissionsRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RolePermissionsAdminComponent, RoleEditorComponent],
                        imports: [
                            i1$2.AdaptBusyModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptRxCounterModule,
                            i1$2.AdaptRxFormControlModule,
                            i1$2.AdaptRxSelectModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptRxTypeaheadModule,
                            i1$2.AdaptRxValidatorsModule,
                            i4.AdminSettingsModule,
                            i8.CommonModule,
                            i1.FormsModule,
                            i7.RecordGridModule,
                            i1$1.RxDirectivesModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [RolePermissionsAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var fieldIds$1 = {
        clientId: 1780,
        clientSecret: 1781,
        apiAuthorizationEndpoint: 1782,
        oAuthProvider: 1783,
        resourceServer: 1784,
        bundleId: 61001
    };
    var sections = [
        {
            title: 'com.bmc.arsys.rx.client.admin.rsso-auth.bmc-helix-digital-workplace.title',
            isOpen: true,
            isSaveInProgress: false,
            recordInstanceId: '',
            rxId: 'digital-workplace',
            fields: [
                {
                    id: fieldIds$1.apiAuthorizationEndpoint,
                    type: 'text',
                    name: 'API authorization endpoint',
                    value: '',
                    label: 'com.bmc.arsys.rx.client.admin.rsso-auth.api-authorization-endpoint-url.label',
                    rxId: 'api-auth-endpoint'
                },
                {
                    id: fieldIds$1.resourceServer,
                    type: 'text',
                    name: 'Resource server',
                    value: '',
                    label: 'com.bmc.arsys.rx.client.admin.rsso-auth.resource-server.label',
                    rxId: 'resource-server'
                },
                {
                    id: fieldIds$1.clientId,
                    type: 'text',
                    name: 'Client ID',
                    value: '',
                    label: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-id.label',
                    rxId: 'client-id'
                },
                {
                    id: fieldIds$1.clientSecret,
                    type: 'password',
                    name: 'Client secret',
                    value: '',
                    label: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-secret.label',
                    rxId: 'client-secret'
                }
            ],
            formName: 'digitalWorkplaceForm',
            oAuthProvider: 'RSSO OAuth'
        },
        {
            title: 'com.bmc.arsys.rx.client.admin.rsso-auth.bmc-helix-cloud-cost.title',
            isOpen: true,
            isSaveInProgress: false,
            recordInstanceId: '',
            rxId: 'cloud-cost',
            fields: [
                {
                    id: fieldIds$1.apiAuthorizationEndpoint,
                    type: 'text',
                    name: 'API authorization endpoint',
                    value: '',
                    label: 'com.bmc.arsys.rx.client.admin.rsso-auth.api-authorization-endpoint-url.label',
                    rxId: 'api-auth-endpoint'
                },
                {
                    id: fieldIds$1.resourceServer,
                    type: 'text',
                    name: 'Resource server',
                    value: '',
                    label: 'com.bmc.arsys.rx.client.admin.rsso-auth.resource-server.label',
                    rxId: 'resource-server'
                },
                {
                    id: fieldIds$1.clientId,
                    type: 'text',
                    name: 'Client ID',
                    value: '',
                    label: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-id.label',
                    rxId: 'client-id'
                },
                {
                    id: fieldIds$1.clientSecret,
                    type: 'password',
                    name: 'Client secret',
                    value: '',
                    label: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-secret.label',
                    rxId: 'client-secret'
                }
            ],
            formName: 'cloudCostForm',
            oAuthProvider: 'Cloud Cost RSSO'
        }
    ];
    var RX_RSSO_OAUTH = {
        recordDefinitionName: 'OAuth Configuration',
        oAuthConfigurationDescription: 'oauth-configuration',
        fieldIds: {
            bundleId: fieldIds$1.bundleId,
            oAuthProvider: fieldIds$1.oAuthProvider
        },
        sections: sections
    };

    var RxRssoOAuthConfigurationService = /** @class */ (function () {
        function RxRssoOAuthConfigurationService(rxRecordInstanceService, rxRecordInstanceUpdateService, rxRecordInstanceDataPageService) {
            this.rxRecordInstanceService = rxRecordInstanceService;
            this.rxRecordInstanceUpdateService = rxRecordInstanceUpdateService;
            this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
        }
        RxRssoOAuthConfigurationService.prototype.getConfigs = function () {
            return this.rxRecordInstanceDataPageService
                .post({
                params: {
                    recorddefinition: RX_RSSO_OAUTH.recordDefinitionName,
                    queryExpression: "('" + i3.RX_RECORD_DEFINITION.coreFieldIds.description + "'=\"" + RX_RSSO_OAUTH.oAuthConfigurationDescription + "\")",
                    propertySelection: [i3.RX_RECORD_DEFINITION.coreFieldIds.id, RX_RSSO_OAUTH.fieldIds.oAuthProvider]
                }
            })
                .pipe(operators.map(function (response) {
                return response.data.map(function (rssoConfiguration) {
                    return Object.keys(rssoConfiguration).map(function (key) {
                        return { id: key, value: rssoConfiguration[key] };
                    });
                });
            }));
        };
        RxRssoOAuthConfigurationService.prototype.saveConfigRecordInstance = function (recordInstance) {
            if (recordInstance.id) {
                return this.rxRecordInstanceUpdateService.execute(recordInstance);
            }
            else {
                return this.rxRecordInstanceService.create(recordInstance);
            }
        };
        RxRssoOAuthConfigurationService.prototype.getConfigRecordInstance = function (recordInstanceId) {
            if (recordInstanceId) {
                return this.rxRecordInstanceService.get(RX_RSSO_OAUTH.recordDefinitionName, recordInstanceId);
            }
            else {
                return this.rxRecordInstanceService.getNew(RX_RSSO_OAUTH.recordDefinitionName);
            }
        };
        return RxRssoOAuthConfigurationService;
    }());
    RxRssoOAuthConfigurationService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRssoOAuthConfigurationService, deps: [{ token: i3__namespace$2.RxRecordInstanceService }, { token: i3__namespace$2.RxRecordInstanceUpdateService }, { token: i3__namespace$2.RxRecordInstanceDataPageService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRssoOAuthConfigurationService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRssoOAuthConfigurationService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRssoOAuthConfigurationService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace$2.RxRecordInstanceService }, { type: i3__namespace$2.RxRecordInstanceUpdateService }, { type: i3__namespace$2.RxRecordInstanceDataPageService }]; } });

    var RssoOauthAdminComponent = /** @class */ (function (_super) {
        __extends(RssoOauthAdminComponent, _super);
        function RssoOauthAdminComponent(rxRssoOAuthService, rxCurrentUserService, rxNotificationService, translateService) {
            var _this = _super.call(this) || this;
            _this.rxRssoOAuthService = rxRssoOAuthService;
            _this.rxCurrentUserService = rxCurrentUserService;
            _this.rxNotificationService = rxNotificationService;
            _this.translateService = translateService;
            _this.sections = RX_RSSO_OAUTH.sections;
            return _this;
        }
        RssoOauthAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.notifyPropertyChanged('api', {
                isDirty: function () { return _this.serviceForm.dirty; }
            });
            this.busy = this.rxRssoOAuthService
                .getConfigs()
                .pipe(operators.switchMap(function (rssoConfigurations) {
                var recondInstanceConfigs$ = lodash.map(rssoConfigurations, function (configuration) {
                    var oAuthProviderInConfiguration = lodash.find(configuration, {
                        id: String(RX_RSSO_OAUTH.fieldIds.oAuthProvider)
                    }).value;
                    var section = lodash.find(_this.sections, { oAuthProvider: oAuthProviderInConfiguration });
                    section.recordInstanceId = lodash.find(configuration, {
                        id: String(i3.RX_RECORD_DEFINITION.coreFieldIds.id)
                    }).value;
                    return _this.rxRssoOAuthService.getConfigRecordInstance(section.recordInstanceId).pipe(operators.tap(function (recordInstance) {
                        lodash.map(section.fields, function (field) {
                            field.value = recordInstance.fieldInstances[field.id].value;
                        });
                    }));
                });
                return rxjs.forkJoin(recondInstanceConfigs$);
            }))
                .subscribe();
        };
        RssoOauthAdminComponent.prototype.save = function (section, form) {
            var _this = this;
            section.isSaveInProgress = true;
            this.rxRssoOAuthService
                .getConfigRecordInstance(section.recordInstanceId)
                .pipe(operators.switchMap(function (recordInstance) {
                lodash.map(section.fields, function (field) {
                    recordInstance.fieldInstances[field.id].value = field.value;
                });
                recordInstance.setFieldValue(RX_RSSO_OAUTH.fieldIds.oAuthProvider, section.oAuthProvider);
                recordInstance.setFieldValue(RX_RSSO_OAUTH.fieldIds.bundleId, i2.RX_APPLICATION.chatbotBundleId);
                recordInstance.setFieldValue(i3.RX_RECORD_DEFINITION.coreFieldIds.description, RX_RSSO_OAUTH.oAuthConfigurationDescription);
                return _this.rxRssoOAuthService.saveConfigRecordInstance(recordInstance);
            }), operators.catchError(function (err) {
                section.isSaveInProgress = false;
                return rxjs.throwError(err);
            }))
                .subscribe(function (response) {
                if (response) {
                    section.recordInstanceId = response.id;
                }
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.rsso-auth.rsso-oauth-settings-saved.message'));
                form.form.markAsPristine();
                section.isSaveInProgress = false;
            });
        };
        RssoOauthAdminComponent.prototype.isSaveButtonDisabled = function (form) {
            return form.pristine || form.invalid;
        };
        RssoOauthAdminComponent.prototype.isSaveButtonVisible = function () {
            return this.rxCurrentUserService.isAdministrator();
        };
        RssoOauthAdminComponent.prototype.isSaveInProgress = function (section) {
            return section.isSaveInProgress;
        };
        return RssoOauthAdminComponent;
    }(i4$2.BaseViewComponent));
    RssoOauthAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RssoOauthAdminComponent, deps: [{ token: RxRssoOAuthConfigurationService }, { token: i2__namespace.RxCurrentUserService }, { token: i2__namespace.RxNotificationService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RssoOauthAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RssoOauthAdminComponent, selector: "rx-admin-rsso-oauth", viewQueries: [{ propertyName: "serviceForm", first: true, predicate: ["serviceForm"], descendants: true, read: i1.NgForm }], usesInheritance: true, ngImport: i0__namespace, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.rsso-auth.header.title' | translate }}\" [busy]=\"busy\">\n  <adapt-accordion multiselect=\"true\" class=\"pb-4\">\n    <form *ngFor=\"let section of sections\" name=\"section.formName\" #serviceForm=\"ngForm\">\n      <adapt-accordion-tab\n        [title]=\"section.title | translate\"\n        [isOpen]=\"section.isOpen\"\n        class=\"mb-3\"\n        [attr.rx-id]=\"section.rxId\"\n      >\n        <adapt-rx-textfield\n          *ngFor=\"let field of section.fields\"\n          [name]=\"field.name\"\n          [(ngModel)]=\"field.value\"\n          [required]=\"true\"\n          [attr.rx-id]=\"field.rxId\"\n          [label]=\"field.label | translate\"\n          [pattern]=\"field.pattern\"\n          class=\"d-block form-group\"\n          [isPassword]=\"field.type === 'password'\"\n        >\n        </adapt-rx-textfield>\n        <button\n          adapt-button\n          type=\"button\"\n          rx-id=\"save-button\"\n          btn-type=\"primary\"\n          class=\"mt-4\"\n          [disabled]=\"isSaveButtonDisabled(serviceForm)\"\n          [adaptInlineLoader]=\"isSaveInProgress(section)\"\n          *ngIf=\"isSaveButtonVisible()\"\n          (click)=\"save(section, serviceForm)\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n        </button>\n      </adapt-accordion-tab>\n    </form>\n  </adapt-accordion>\n</rx-admin-settings>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield{max-width:400px}\n"], components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$3.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$1.AdaptInlineStandaloneDirective, selector: "[adaptInlineLoader]", inputs: ["adaptInlineLoader", "activeText"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RssoOauthAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-rsso-oauth',
                        templateUrl: './rsso-oauth.component.html',
                        styleUrls: ['./rsso-oauth.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: RxRssoOAuthConfigurationService }, { type: i2__namespace.RxCurrentUserService }, { type: i2__namespace.RxNotificationService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { serviceForm: [{
                    type: i0.ViewChild,
                    args: ['serviceForm', { read: i1.NgForm, static: false }]
                }] } });

    var RssoOauthRegistrationModule = /** @class */ (function () {
        function RssoOauthRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-rsso-oauth',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(RssoOauthAdminComponent),
                name: 'RSSO OAuth',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return RssoOauthRegistrationModule;
    }());
    RssoOauthRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RssoOauthRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RssoOauthRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RssoOauthRegistrationModule, declarations: [RssoOauthAdminComponent], imports: [i8.CommonModule,
            i4.AdminSettingsModule,
            i1$2.AdaptAccordionModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptBusyModule,
            i1.FormsModule,
            i4$1.TranslateModule] });
    RssoOauthRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RssoOauthRegistrationModule, imports: [[
                i8.CommonModule,
                i4.AdminSettingsModule,
                i1$2.AdaptAccordionModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptBusyModule,
                i1.FormsModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RssoOauthRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RssoOauthAdminComponent],
                        imports: [
                            i8.CommonModule,
                            i4.AdminSettingsModule,
                            i1$2.AdaptAccordionModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptBusyModule,
                            i1.FormsModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [RssoOauthAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RX_RULE_POOL_MANAGEMENT = {
        ruleTypes: {
            ruleWithIssues: 'rule-with-issues',
            ruleWithoutIssues: 'rule-without-issues',
            remedyEscalationWithIssues: 'remedy-escalation-with-issues',
            remedyEscalationWithoutIssues: 'remedy-escalation-without-issues'
        },
        poolTypes: {
            poolWithIssues: 'pool-with-issues',
            poolWithoutIssues: 'pool-without-issues'
        },
        conflictsRecordFieldIds: {
            ruleName: 'rule',
            numberOfDelays: 'noOfTimesDelayed'
        }
    };

    var RxRulePoolDataService = /** @class */ (function () {
        function RxRulePoolDataService(rxDataPageService) {
            this.rxDataPageService = rxDataPageService;
            this.resource = this.rxDataPageService.withType('com.bmc.arsys.rx.application.rule.datapage.RulePoolStatisticsDataPageQuery');
        }
        RxRulePoolDataService.prototype.getRulePoolStatistics = function () {
            return this.resource.get().pipe(operators.map(function (dataPageResult) { return dataPageResult.data; }));
        };
        return RxRulePoolDataService;
    }());
    RxRulePoolDataService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRulePoolDataService, deps: [{ token: i2__namespace.RxDataPageFactoryService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRulePoolDataService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRulePoolDataService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRulePoolDataService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxDataPageFactoryService }]; } });

    var RxRulePoolManagementService = /** @class */ (function () {
        function RxRulePoolManagementService(rxGlobalCacheService, rxDefinitionNameService, rxOverlayService, rxRuleDefinitionService, rxRulePoolDataService, translateService) {
            this.rxGlobalCacheService = rxGlobalCacheService;
            this.rxDefinitionNameService = rxDefinitionNameService;
            this.rxOverlayService = rxOverlayService;
            this.rxRuleDefinitionService = rxRuleDefinitionService;
            this.rxRulePoolDataService = rxRulePoolDataService;
            this.translateService = translateService;
            this.availablePoolsTreeSubject$ = new rxjs.BehaviorSubject([]);
            this.availablePoolsTree$ = this.availablePoolsTreeSubject$
                .asObservable()
                .pipe(operators.shareReplay(1));
        }
        RxRulePoolManagementService.prototype.fetchAvailablePoolsTree = function () {
            var _this = this;
            return rxjs.forkJoin([
                this.rxRulePoolDataService.getRulePoolStatistics(),
                this.rxGlobalCacheService.getBundleDescriptors()
            ])
                .pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), rulePoolStatistics = _b[0], bundleDescriptors = _b[1];
                _this.availablePoolsTreeSubject$.next(_this.buildTreeNodes(rulePoolStatistics, bundleDescriptors));
            }))
                .subscribe();
        };
        RxRulePoolManagementService.prototype.getAvailablePoolOptions = function () {
            return this.availablePoolsTree$.pipe(operators.map(this.buildSelectOptions));
        };
        RxRulePoolManagementService.prototype.getRuleConflictsData = function (adaptTreeNode) {
            if (!adaptTreeNode) {
                return [];
            }
            return adaptTreeNode.data.conflictingRules.delayedByRules.concat(adaptTreeNode.data.conflictingRules.delaysOtherRules.map(function (ruleConflictOccurrences) { return (Object.assign(Object.assign({}, ruleConflictOccurrences), { noOfTimesDelayed: 0 })); }));
        };
        RxRulePoolManagementService.prototype.isRuleDesignerAvailable = function (ruleStatistics) {
            return !ruleStatistics.remedyEscalation && Boolean(this.rxDefinitionNameService.getBundleId(ruleStatistics.name));
        };
        RxRulePoolManagementService.prototype.reassignRuleToPool = function (ruleDefinitionName, poolNumber) {
            var _this = this;
            return this.rxRuleDefinitionService.get(ruleDefinitionName).pipe(operators.switchMap(function (ruleDefinition) {
                ruleDefinition.triggerEvent.poolNumber = poolNumber;
                return _this.rxRuleDefinitionService.update(ruleDefinition);
            }));
        };
        RxRulePoolManagementService.prototype.buildSelectOptions = function (poolTreeNodes) {
            return poolTreeNodes.map(function (pool) { return ({
                id: pool.data.executionPoolNumber,
                name: pool.label
            }); });
        };
        RxRulePoolManagementService.prototype.buildTreeNodes = function (rulePoolStatistics, bundleDescriptors) {
            var _this = this;
            return rulePoolStatistics.map(function (pool) {
                var children = pool.rules.map(function (rule) {
                    rule.isRuleWithIssues = Boolean(rule.conflictingRules.delayedByRules.length ||
                        rule.conflictingRules.delaysOtherRules.length ||
                        rule.designTimePoolNumber > rulePoolStatistics.length);
                    var ruleType;
                    if (rule.remedyEscalation) {
                        ruleType = rule.isRuleWithIssues
                            ? RX_RULE_POOL_MANAGEMENT.ruleTypes.remedyEscalationWithIssues
                            : RX_RULE_POOL_MANAGEMENT.ruleTypes.remedyEscalationWithoutIssues;
                    }
                    else {
                        ruleType = rule.isRuleWithIssues
                            ? RX_RULE_POOL_MANAGEMENT.ruleTypes.ruleWithIssues
                            : RX_RULE_POOL_MANAGEMENT.ruleTypes.ruleWithoutIssues;
                    }
                    rule.isEditable = _this.isRuleEditable(rule, bundleDescriptors);
                    return {
                        data: rule,
                        key: pool.executionPoolNumber + "_" + rule.guid,
                        label: _this.rxDefinitionNameService.getDisplayName(rule.name),
                        type: ruleType
                    };
                });
                var localizedStringKey = pool.isDefaultPool
                    ? 'com.bmc.arsys.rx.client.admin.rule-pool-management.available-pools.default-pool-tree-node.label'
                    : 'com.bmc.arsys.rx.client.admin.rule-pool-management.available-pools.pool-tree-node.label';
                var label = _this.translateService.instant(localizedStringKey, {
                    poolNumber: pool.executionPoolNumber,
                    ruleCount: pool.rules.length
                });
                return {
                    children: children,
                    data: pool,
                    label: label,
                    selectable: false,
                    type: pool.hasRulesWithIssues
                        ? RX_RULE_POOL_MANAGEMENT.poolTypes.poolWithIssues
                        : RX_RULE_POOL_MANAGEMENT.poolTypes.poolWithoutIssues
                };
            });
        };
        RxRulePoolManagementService.prototype.isRuleEditable = function (ruleStatistics, bundleDescriptors) {
            var bundleId = this.rxDefinitionNameService.getBundleId(ruleStatistics.name), bundleDescriptor = lodash.find(bundleDescriptors, ['id', bundleId]);
            return !ruleStatistics.remedyEscalation && Boolean(bundleId)
                ? this.rxOverlayService.areNewDefinitionsAllowedSync(bundleDescriptor)
                : false;
        };
        return RxRulePoolManagementService;
    }());
    RxRulePoolManagementService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRulePoolManagementService, deps: [{ token: i2__namespace.RxGlobalCacheService }, { token: i2__namespace.RxDefinitionNameService }, { token: i2__namespace.RxOverlayService }, { token: i2__namespace$2.RxRuleDefinitionService }, { token: RxRulePoolDataService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxRulePoolManagementService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRulePoolManagementService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxRulePoolManagementService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxGlobalCacheService }, { type: i2__namespace.RxDefinitionNameService }, { type: i2__namespace.RxOverlayService }, { type: i2__namespace$2.RxRuleDefinitionService }, { type: RxRulePoolDataService }, { type: i4__namespace.TranslateService }]; } });

    var RuleReassignmentComponent = /** @class */ (function (_super) {
        __extends(RuleReassignmentComponent, _super);
        function RuleReassignmentComponent(activeModalRef, rxNotificationService, rxRuleDefinitionService, rxRulePoolManagementService, translateService, injector) {
            var _this = _super.call(this, activeModalRef, injector) || this;
            _this.activeModalRef = activeModalRef;
            _this.rxNotificationService = rxNotificationService;
            _this.rxRuleDefinitionService = rxRuleDefinitionService;
            _this.rxRulePoolManagementService = rxRulePoolManagementService;
            _this.translateService = translateService;
            _this.injector = injector;
            _this.isSaveButtonDisabled = true;
            _this.poolFormControl = new i1.FormControl([]);
            _this.destroyed$ = new rxjs.ReplaySubject(1);
            _this.poolFormControl.valueChanges.pipe(operators.takeUntil(_this.destroyed$)).subscribe(function (selectedPools) {
                _this.selectedPoolId = selectedPools[0].id;
                _this.isSaveButtonDisabled = false;
            });
            return _this;
        }
        RuleReassignmentComponent.prototype.ngOnInit = function () {
            _super.prototype.ngOnInit.call(this);
            this.poolSelectOptions$ = this.rxRulePoolManagementService.getAvailablePoolOptions();
        };
        RuleReassignmentComponent.prototype.optionFormatter = function (selectOption) {
            return selectOption.name;
        };
        RuleReassignmentComponent.prototype.save = function () {
            var _this = this;
            this.allowDismiss = false;
            this.isSaveButtonDisabled = true;
            this.rxRulePoolManagementService
                .reassignRuleToPool(this.activeModalRef.getData().ruleName, this.selectedPoolId)
                .pipe(operators.take(1), operators.finalize(function () {
                _this.allowDismiss = true;
                _this.isSaveButtonDisabled = false;
            }))
                .subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.reassignment-saved.message'));
                _this.activeModalRef.close(true);
            });
        };
        RuleReassignmentComponent.prototype.cancel = function () {
            this.activeModalRef.dismiss(i1$2.DismissReasons.CLOSE_BTN);
        };
        RuleReassignmentComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        return RuleReassignmentComponent;
    }(i1$1.RxModalClass));
    RuleReassignmentComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RuleReassignmentComponent, deps: [{ token: i1__namespace$1.ActiveModalRef }, { token: i2__namespace.RxNotificationService }, { token: i2__namespace$2.RxRuleDefinitionService }, { token: RxRulePoolManagementService }, { token: i4__namespace.TranslateService }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RuleReassignmentComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RuleReassignmentComponent, selector: "rx-rule-reassignment", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"modal-header\">\n  <h5 class=\"modal-title\">\n    {{ 'com.bmc.arsys.rx.client.admin.rule-pool-management.reassignment-dialog.title' | translate }}\n  </h5>\n  <button\n    class=\"close dp-close\"\n    type=\"button\"\n    rx-id=\"x-button\"\n    [disabled]=\"!allowDismiss\"\n    (click)=\"cancel()\"\n  ></button>\n</div>\n\n<div class=\"modal-body\">\n  <adapt-rx-select\n    [formControl]=\"poolFormControl\"\n    [options]=\"poolSelectOptions$ | async\"\n    [optionFormatter]=\"optionFormatter\"\n    [label]=\"'com.bmc.arsys.rx.client.admin.rule-pool-management.assign-to.label' | translate\"\n  ></adapt-rx-select>\n</div>\n\n<div class=\"modal-footer\">\n  <button\n    adapt-button\n    btn-type=\"primary\"\n    type=\"button\"\n    rx-id=\"save-button\"\n    (click)=\"save()\"\n    [adaptInlineLoader]=\"!allowDismiss\"\n    [disabled]=\"isSaveButtonDisabled || !allowDismiss\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n  <button\n    adapt-button\n    btn-type=\"secondary\"\n    type=\"button\"\n    rx-id=\"cancel-button\"\n    (click)=\"cancel()\"\n    [disabled]=\"!allowDismiss\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i1__namespace$1.AdaptInlineStandaloneDirective, selector: "[adaptInlineLoader]", inputs: ["adaptInlineLoader", "activeText"] }], pipes: { "translate": i4__namespace.TranslatePipe, "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RuleReassignmentComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-rule-reassignment',
                        templateUrl: './rule-reassignment.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ActiveModalRef }, { type: i2__namespace.RxNotificationService }, { type: i2__namespace$2.RxRuleDefinitionService }, { type: RxRulePoolManagementService }, { type: i4__namespace.TranslateService }, { type: i0__namespace.Injector }]; } });

    var RulePoolManagementAdminComponent = /** @class */ (function () {
        function RulePoolManagementAdminComponent(rxModalService, rxRulePoolManagementService, translateService) {
            var _this = this;
            this.rxModalService = rxModalService;
            this.rxRulePoolManagementService = rxRulePoolManagementService;
            this.translateService = translateService;
            this.availablePoolsTree = [];
            this.ruleDesignerLink = "/helix/index.html#/" + i2.RX_APPLICATION.innovationStudioBundleId + "/rule/edit/";
            this.showOnlyRulesWithIssuesFormControl = new i1.FormControl(false);
            this.strings = {};
            this.treeWrap = i1$2.TreeWrap.WrapAll;
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.selectedRuleValue = null;
            this.selectedRuleSubject$ = new rxjs.BehaviorSubject(this.selectedRuleValue);
            this.selectedRule$ = this.selectedRuleSubject$.asObservable().pipe(operators.takeUntil(this.destroyed$));
            this.showOnlyRulesWithIssuesSubject$ = new rxjs.BehaviorSubject(false);
            this.showOnlyRulesWithIssues$ = this.showOnlyRulesWithIssuesSubject$
                .asObservable()
                .pipe(operators.takeUntil(this.destroyed$));
            this.setStrings();
            this.showOnlyRulesWithIssuesFormControl.valueChanges
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (value) { return _this.showOnlyRulesWithIssuesSubject$.next(value); });
            this.ruleConflictsTableConfig = {
                columns: [
                    {
                        header: this.strings.ruleNameColumnTitle,
                        field: "" + RX_RULE_POOL_MANAGEMENT.conflictsRecordFieldIds.ruleName
                    },
                    {
                        header: this.strings.numberOfDelaysColumnTitle,
                        field: "" + RX_RULE_POOL_MANAGEMENT.conflictsRecordFieldIds.numberOfDelays
                    }
                ],
                data: [],
                texts: { emptyStateLabelText: this.strings.ruleConflictsEmptyStateLabel }
            };
            this.selectedRule$.subscribe(function (adaptTreeNode) {
                _this.selectedRuleValue = adaptTreeNode;
                _this.ruleConflictsTableConfig.data = _this.rxRulePoolManagementService.getRuleConflictsData(adaptTreeNode);
            });
            rxjs.combineLatest([this.rxRulePoolManagementService.availablePoolsTree$, this.showOnlyRulesWithIssues$])
                .pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), availablePoolsTree = _b[0], showOnlyRulesWithIssues = _b[1];
                return showOnlyRulesWithIssues
                    ? availablePoolsTree.map(function (poolTreeNode) { return (Object.assign(Object.assign({}, poolTreeNode), { children: poolTreeNode.data.hasRulesWithIssues
                            ? poolTreeNode.children.filter(function (_a) {
                                var data = _a.data;
                                return data.isRuleWithIssues;
                            })
                            : [] })); })
                    : availablePoolsTree;
            }), operators.takeUntil(this.destroyed$))
                .subscribe(function (availablePoolsTree) {
                _this.availablePoolsTree.forEach(function (poolTreeNode, index) {
                    var updatedPool = availablePoolsTree[index];
                    updatedPool.expanded = updatedPool.children.length && poolTreeNode.expanded;
                });
                _this.availablePoolsTree = availablePoolsTree;
                if (_this.selectedRuleValue) {
                    var isSelectedRulePresentInTree = _this.availablePoolsTree.some(function (poolTreeNode) {
                        var rule = poolTreeNode.children.find(function (ruleTreeNode) { return ruleTreeNode.data.guid === _this.selectedRuleValue.data.guid; });
                        if (rule) {
                            _this.selectedRule = rule;
                            return true;
                        }
                    });
                    if (!isSelectedRulePresentInTree) {
                        _this.selectedRuleSubject$.next(null);
                    }
                }
            });
        }
        Object.defineProperty(RulePoolManagementAdminComponent.prototype, "selectedRule", {
            get: function () {
                return this.selectedRuleValue;
            },
            set: function (selectedRule) {
                this.selectedRuleSubject$.next(selectedRule);
            },
            enumerable: false,
            configurable: true
        });
        RulePoolManagementAdminComponent.prototype.ngOnInit = function () {
            this.busy = this.rxRulePoolManagementService.fetchAvailablePoolsTree();
        };
        RulePoolManagementAdminComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        RulePoolManagementAdminComponent.prototype.isAssignedPoolOutOfRange = function () {
            return this.selectedRuleValue.data.designTimePoolNumber > this.availablePoolsTree.length;
        };
        RulePoolManagementAdminComponent.prototype.isRuleDesignerAvailable = function () {
            return this.rxRulePoolManagementService.isRuleDesignerAvailable(this.selectedRuleValue.data);
        };
        RulePoolManagementAdminComponent.prototype.openReassignPoolDialog = function () {
            var _this = this;
            this.rxModalService
                .openModal({
                content: RuleReassignmentComponent,
                data: {
                    ruleName: this.selectedRuleValue.data.name
                },
                size: 'sm'
            })
                .then(function () { return _this.rxRulePoolManagementService.fetchAvailablePoolsTree(); }, lodash.noop);
        };
        RulePoolManagementAdminComponent.prototype.setStrings = function () {
            this.strings = {
                adminSettingsHeader: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.header.title'),
                assignedPoolLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.assigned-pool.label'),
                availablePoolsLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.available-pools.label'),
                availablePoolsTooltip: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.available-pools.tooltip', {
                    clockAlertIcon: '<i class="d-icon-clock_alert"></i>',
                    clockArrowIcon: '<i class="d-icon-clock_arrow"></i>',
                    dangerTriangleIcon: '<i class="text-danger d-icon-exclamation_triangle"></i>',
                    triangleIcon: '<i class="d-icon-exclamation_triangle"></i>',
                    successCheckIcon: '<i class="text-success d-icon-check_circle"></i>',
                    checkIcon: '<i class="d-icon-check_circle"></i>'
                }),
                averageExecutionTimeLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.average-execution-time.label'),
                averageLatencyLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.average-latency.label'),
                lastEndDateLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.last-end-date.label'),
                lastStartDateLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.last-start-date.label'),
                numberOfDelaysColumnTitle: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.conflicts.grid.column.delays-caused.title'),
                numberOfRunsLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.execution-count.label'),
                selectedRuleEmptyStateLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.selected-rule.empty-state.label'),
                showOnlyRulesWithIssuesLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.available-pools.show-only-rules-with-issues.label'),
                reassignButtonLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.button.reassign.label'),
                ruleConflictsEmptyStateLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.conflicts.grid.empty-state.label'),
                ruleConflictsTitle: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.conflicts.title'),
                ruleNameColumnTitle: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.conflicts.grid.column.rule-name.title'),
                ruleNameLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.rule-name.label'),
                rulePoolsEmptyStateLabel: this.translateService.instant('com.bmc.arsys.rx.client.empty-state.no-data-to-display.label'),
                ruleSummaryTitle: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.title'),
                ruleSummaryTooltip: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.tooltip'),
                timerDefinitionLabel: this.translateService.instant('com.bmc.arsys.rx.client.admin.rule-pool-management.rule-summary.timer-definition.label')
            };
        };
        return RulePoolManagementAdminComponent;
    }());
    RulePoolManagementAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RulePoolManagementAdminComponent, deps: [{ token: i1__namespace.RxModalService }, { token: RxRulePoolManagementService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RulePoolManagementAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RulePoolManagementAdminComponent, selector: "rx-admin-rule-pool-management", ngImport: i0__namespace, template: "<rx-admin-settings header=\"{{ strings.adminSettingsHeader }}\" [busy]=\"busy\">\n  <div *ngIf=\"availablePoolsTree.length; else emptyRulePoolsTemplate\" class=\"d-flex h-100 overflow-auto\">\n    <div class=\"d-flex flex-shrink-0 flex-column border-right page-content-left pr-4\">\n      <h5 class=\"m-0\">\n        {{ strings.availablePoolsLabel }}\n        <adapt-icon\n          name=\"info_circle_o_adapt\"\n          [adaptPopover]=\"availablePoolsTooltipTemplate\"\n          maxWidth=\"400\"\n        ></adapt-icon>\n      </h5>\n\n      <ng-template #availablePoolsTooltipTemplate>\n        <div [innerHtml]=\"strings.availablePoolsTooltip\"></div>\n      </ng-template>\n\n      <adapt-rx-checkbox\n        [label]=\"strings.showOnlyRulesWithIssuesLabel\"\n        [formControl]=\"showOnlyRulesWithIssuesFormControl\"\n      ></adapt-rx-checkbox>\n\n      <div class=\"overflow-auto\">\n        <adapt-tree [value]=\"availablePoolsTree\" [(selection)]=\"selectedRule\" [wrap]=\"treeWrap\" selectionMode=\"single\">\n          <ng-template let-node adaptTreeNodeTemplate=\"pool-without-issues\">\n            <span><i class=\"text-success d-icon-check_circle at-action-icon\"></i>{{ node.label }}</span>\n          </ng-template>\n          <ng-template let-node adaptTreeNodeTemplate=\"pool-with-issues\">\n            <span><i class=\"text-danger d-icon-exclamation_triangle at-action-icon\"></i>{{ node.label }}</span>\n          </ng-template>\n\n          <ng-template let-node adaptTreeNodeTemplate=\"rule-without-issues\">\n            <span class=\"d-flex\" [adaptTooltip]=\"node.data.name\" [popupDelay]=\"1000\"\n              ><i class=\"d-icon-check_circle at-action-icon\" [ngClass]=\"{ 'text-success': node.data.isEditable }\"></i\n              >{{ node.label }}</span\n            >\n          </ng-template>\n          <ng-template let-node adaptTreeNodeTemplate=\"rule-with-issues\">\n            <span class=\"d-flex\" [adaptTooltip]=\"node.data.name\" [popupDelay]=\"1000\"\n              ><i\n                class=\"d-icon-exclamation_triangle at-action-icon\"\n                [ngClass]=\"{ 'text-danger': node.data.isEditable }\"\n              ></i\n              >{{ node.label }}\n            </span>\n          </ng-template>\n          <ng-template let-node adaptTreeNodeTemplate=\"remedy-escalation-with-issues\">\n            <span class=\"d-flex\" [adaptTooltip]=\"node.data.name\" [popupDelay]=\"1000\"\n              ><i class=\"d-icon-clock_alert at-action-icon\"></i>{{ node.label }}</span\n            >\n          </ng-template>\n          <ng-template let-node adaptTreeNodeTemplate=\"remedy-escalation-without-issues\">\n            <span class=\"d-flex\" [adaptTooltip]=\"node.data.name\" [popupDelay]=\"1000\"\n              ><i class=\"d-icon-clock_arrow at-action-icon\"></i>{{ node.label }}</span\n            >\n          </ng-template>\n        </adapt-tree>\n      </div>\n    </div>\n\n    <div class=\"flex-fill pl-4\">\n      <div *ngIf=\"selectedRule?.data as rule; else noRuleSelectedTemplate\">\n        <h5 class=\"mt-0\">\n          {{ strings.ruleSummaryTitle }}\n          <adapt-icon\n            name=\"info_circle_o_adapt\"\n            [adaptPopover]=\"ruleSummaryTooltipTemplate\"\n            maxWidth=\"280\"\n            placement=\"bottom\"\n          ></adapt-icon>\n        </h5>\n\n        <ng-template #ruleSummaryTooltipTemplate>\n          <div [innerHTML]=\"strings.ruleSummaryTooltip\"></div>\n        </ng-template>\n\n        <div class=\"mb-3\">\n          <adapt-rx-control-label [label]=\"strings.ruleNameLabel\"></adapt-rx-control-label>\n\n          <span *ngIf=\"!isRuleDesignerAvailable(); else ruleFullNameWithDesignerLink\" class=\"rule-name-value\">{{\n            rule.name\n          }}</span>\n\n          <ng-template #ruleFullNameWithDesignerLink>\n            <a\n              adapt-button\n              btn-type=\"tertiary\"\n              class=\"d-icon-left-pop_up p-0 border-0 rule-name-value\"\n              rx-id=\"open-rule-designer-button\"\n              target=\"_blank\"\n              href=\"{{ ruleDesignerLink + rule.name }}\"\n            >\n              {{ rule.name }}\n            </a>\n          </ng-template>\n        </div>\n\n        <div class=\"mb-3\">\n          <adapt-rx-control-label [label]=\"strings.timerDefinitionLabel\"></adapt-rx-control-label>\n          <span>{{ rule.timeCriteria | rxRuleTriggerTimeCriteriaDisplayValue }}</span>\n        </div>\n\n        <div class=\"d-flex mb-3\">\n          <div class=\"flex-fill col-4 p-0\">\n            <adapt-rx-control-label [label]=\"strings.numberOfRunsLabel\"></adapt-rx-control-label>\n            <span>{{ rule.numberOfRuns }}</span>\n          </div>\n          <div class=\"flex-fill col-4 p-0\">\n            <adapt-rx-control-label [label]=\"strings.averageLatencyLabel\"></adapt-rx-control-label>\n            <span>{{ rule.avgWaitTime }}</span>\n          </div>\n          <div class=\"flex-fill col-4 p-0\">\n            <adapt-rx-control-label [label]=\"strings.averageExecutionTimeLabel\"></adapt-rx-control-label>\n            <span>{{ rule.avgExecutionTime }}</span>\n          </div>\n        </div>\n\n        <div class=\"d-flex mb-3\">\n          <div class=\"flex-fill col-4 p-0\">\n            <div class=\"pb-1\">\n              <span class=\"form-control-label pr-3\">{{ strings.assignedPoolLabel }}</span>\n\n              <adapt-button\n                btn-type=\"tertiary\"\n                class=\"p-0 border-0\"\n                rx-id=\"reassign-button\"\n                *ngIf=\"rule.isEditable\"\n                (click)=\"openReassignPoolDialog()\"\n                [style.vertical-align]=\"'baseline'\"\n              >\n                <span class=\"d-icon-pencil\"></span>\n                {{ strings.reassignButtonLabel }}\n              </adapt-button>\n            </div>\n            <span>\n              <i\n                *ngIf=\"isAssignedPoolOutOfRange()\"\n                class=\"d-icon-exclamation_triangle at-action-icon\"\n                [ngClass]=\"{ 'text-danger': rule.isEditable }\"\n              ></i>\n              {{ rule.designTimePoolNumber }}\n            </span>\n          </div>\n          <div class=\"flex-fill col-4 p-0\">\n            <adapt-rx-control-label [label]=\"strings.lastStartDateLabel\"></adapt-rx-control-label>\n            <span>{{ rule.lastStartTime | date: 'medium' }}</span>\n          </div>\n          <div class=\"flex-fill col-4 p-0\">\n            <adapt-rx-control-label [label]=\"strings.lastEndDateLabel\"></adapt-rx-control-label>\n            <span>{{ rule.lastEndTime | date: 'medium' }}</span>\n          </div>\n        </div>\n\n        <h5>\n          {{ strings.ruleConflictsTitle }}\n          <i\n            *ngIf=\"ruleConflictsTableConfig.data.length\"\n            class=\"text-danger d-icon-exclamation_triangle\"\n            [ngClass]=\"{ 'text-danger': rule.isEditable }\"\n          ></i>\n        </h5>\n        <adapt-table\n          [columns]=\"ruleConflictsTableConfig.columns\"\n          [bordered]=\"true\"\n          [sortable]=\"true\"\n          [texts]=\"ruleConflictsTableConfig.texts\"\n          [value]=\"ruleConflictsTableConfig.data\"\n        >\n        </adapt-table>\n      </div>\n\n      <ng-template #noRuleSelectedTemplate>\n        <div class=\"d-flex align-items-center justify-content-center h-100\">\n          <adapt-empty-state [type]=\"'rules'\" [label]=\"strings.selectedRuleEmptyStateLabel\"></adapt-empty-state>\n        </div>\n      </ng-template>\n    </div>\n  </div>\n\n  <ng-template #emptyRulePoolsTemplate>\n    <div class=\"d-flex align-items-center h-100\">\n      <adapt-empty-state\n        class=\"flex-fill\"\n        [type]=\"'rules'\"\n        [label]=\"strings.rulePoolsEmptyStateLabel\"\n      ></adapt-empty-state>\n    </div>\n  </ng-template>\n</rx-admin-settings>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}rx-admin-settings{max-height:calc(100vh - 54px)}.overflow-auto{overflow:auto}.page-content-left{width:280px}.rule-name-value{display:inline-block;vertical-align:middle;line-height:1.5385}\n"], components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptIconComponent, selector: "adapt-icon", inputs: ["name", "classList", "description", "testID"] }, { type: i1__namespace$1.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }, { type: i1__namespace$1.AdaptTreeComponent, selector: "adapt-tree", inputs: ["value", "filter", "texts", "filterBtnClearText", "filterPlaceholder", "testID", "lazy", "lazyLoading", "trim", "wrap", "selectAllButton", "deselectAllButton", "treeScrollHeight", "adaptRadarDisableEventSending", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "validateDrop"], outputs: ["onNodeDrop", "lazyLoad"] }, { type: i1__namespace$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i4__namespace$3.AdaptTableComponent, selector: "adapt-table", inputs: ["sortable", "filterable", "triggerableFilters", "explicitSearchBtn", "enableReorderableRows", "suppressTooltip", "toolbarConfig", "dataColumnsColsTemplate", "dataColumnsHeaderTemplate", "dataColumnsDataCellsTemplate", "headerGroupsTemplate", "alwaysShowHeaderTooltip", "alwaysShowCellTooltip", "expandedCellClass", "expandedGroupsKeys", "nestedGroupPadding", "expandindCellInitialPadding", "groupValueDataCellTemplate", "tooltipInitialDelayMs", "tooltipClass", "rowsCustomClass", "paginatorAlign", "hasEmptyState", "enableInfiniteScrolling", "updateFirstColumnWidth", "busyConfig", "defaultFiltersMatchMode", "wrapCellText", "minBufferPx", "maxBufferPx", "testID", "headerSelectionMode", "disabledSelectedRowsCount", "disabledNotSelectedRowsCount", "disabledSelectedFilteredRowsCount", "disabledNotSelectedFilteredRowsCount", "selectedFilteredRowsCount", "totalRecordsInGroup", "disableRowSelection", "nestingStructureData", "nestingKey", "enableRowEditing", "autoScrollToTop", "paginationTexts", "toolbarTexts", "tableTexts", "filtersTexts", "headerCellMenuTexts", "texts", "loadingMore", "mergeColumns", "disabledRowSelectionResolver", "allowColumnReorderingResolver", "disableRowExpandingResolver", "rowAriaDataResolver", "tableWidthConfig", "expandedRowTemplate", "isRefreshingRowData", "value", "bordered", "paginator", "striped", "loading"], outputs: ["onLazyLoad", "rowDataRefresh", "savedRowEditing", "canceledRowEditing", "groupSelection", "allGroupedRowsSelection", "groupExpansion", "columnsVisibilityChange", "rowDragStart", "rowDragRelease", "rowDragEnd", "rowDragDrop", "export", "toolbarPopupAnimationDone"] }, { type: i1__namespace$1.AdaptEmptyStateComponent, selector: "adapt-empty-state", inputs: ["label", "type", "inverted"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$1.AdaptPopoverDirective, selector: "[adaptPopover]", inputs: ["adaptPopover", "popoverTitle", "placement", "fallbackPlacement", "triggers", "container", "appendToBody", "closeBtn", "popupDelay", "disablePopover", "popoverClass", "autoClose", "closeOnOutOfView", "maxWidth", "minWidth"], outputs: ["shown", "hidden"], exportAs: ["adaptPopover"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i1__namespace$1.AdaptTreeNodeTemplateDirective, selector: "[adaptTreeNodeTemplate]", inputs: ["adaptTreeNodeTemplate"] }, { type: i1__namespace$1.AdaptTooltipDirective, selector: "[adaptTooltip]", inputs: ["popupDelay", "placement", "width", "minWidth", "useWidthFitting", "adaptRadarDisableEventSending", "adaptTooltip", "manual"], outputs: ["shown", "hidden"], exportAs: ["tooltip"] }, { type: i8__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "rxRuleTriggerTimeCriteriaDisplayValue": i2__namespace$2.RxRuleTriggerTimeCriteriaDisplayValuePipe, "date": i8__namespace.DatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RulePoolManagementAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-rule-pool-management',
                        templateUrl: './rule-pool-management.component.html',
                        styleUrls: ['./rule-pool-management.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.RxModalService }, { type: RxRulePoolManagementService }, { type: i4__namespace.TranslateService }]; } });

    var RulePoolManagementRegistrationModule = /** @class */ (function () {
        function RulePoolManagementRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-rule-pool-management',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(RulePoolManagementAdminComponent),
                name: 'Rule pool management',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return RulePoolManagementRegistrationModule;
    }());
    RulePoolManagementRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RulePoolManagementRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RulePoolManagementRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RulePoolManagementRegistrationModule, declarations: [RuleReassignmentComponent, RulePoolManagementAdminComponent], imports: [i1$2.AdaptBusyModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptEmptyStateModule,
            i1$2.AdaptIconModule,
            i1$2.AdaptPopoverModule,
            i1$2.AdaptRxCheckboxModule,
            i1$2.AdaptRxFormControlModule,
            i1$2.AdaptRxLabelModule,
            i1$2.AdaptRxSelectModule,
            i4$3.AdaptTableModule,
            i1$2.AdaptTooltipModule,
            i1$2.AdaptTreeModule,
            i4.AdminSettingsModule,
            i8.CommonModule,
            i1.ReactiveFormsModule,
            i2$2.RxRulePipesModule,
            i4$1.TranslateModule] });
    RulePoolManagementRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RulePoolManagementRegistrationModule, imports: [[
                i1$2.AdaptBusyModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptEmptyStateModule,
                i1$2.AdaptIconModule,
                i1$2.AdaptPopoverModule,
                i1$2.AdaptRxCheckboxModule,
                i1$2.AdaptRxFormControlModule,
                i1$2.AdaptRxLabelModule,
                i1$2.AdaptRxSelectModule,
                i4$3.AdaptTableModule,
                i1$2.AdaptTooltipModule,
                i1$2.AdaptTreeModule,
                i4.AdminSettingsModule,
                i8.CommonModule,
                i1.ReactiveFormsModule,
                i2$2.RxRulePipesModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RulePoolManagementRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RuleReassignmentComponent, RulePoolManagementAdminComponent],
                        imports: [
                            i1$2.AdaptBusyModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptEmptyStateModule,
                            i1$2.AdaptIconModule,
                            i1$2.AdaptPopoverModule,
                            i1$2.AdaptRxCheckboxModule,
                            i1$2.AdaptRxFormControlModule,
                            i1$2.AdaptRxLabelModule,
                            i1$2.AdaptRxSelectModule,
                            i4$3.AdaptTableModule,
                            i1$2.AdaptTooltipModule,
                            i1$2.AdaptTreeModule,
                            i4.AdminSettingsModule,
                            i8.CommonModule,
                            i1.ReactiveFormsModule,
                            i2$2.RxRulePipesModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [RulePoolManagementAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RxServerInformationService = /** @class */ (function () {
        function RxServerInformationService(rxSystemConfigurationService) {
            this.rxSystemConfigurationService = rxSystemConfigurationService;
        }
        RxServerInformationService.prototype.getServerInformation = function () {
            var identifiers = [
                'VERSION',
                'SERVER_DIR',
                'OS',
                'HARDWARE',
                'SERVER_NAME',
                'SERVER_TIME',
                'CONFIGURATION_NAME',
                'DB_TYPE',
                'DB_NAME',
                'DB_VERSION',
                'DB_USER'
            ];
            return this.rxSystemConfigurationService.queryConfiguration(identifiers).pipe(operators.map(function (serverInformation) {
                return {
                    serverVersion: lodash.find(serverInformation, { id: 'VERSION' }).value,
                    serverDirectory: lodash.find(serverInformation, { id: 'SERVER_DIR' }).value,
                    operatingSystem: lodash.find(serverInformation, { id: 'OS' }).value,
                    hardware: lodash.find(serverInformation, { id: 'HARDWARE' }).value,
                    serverName: lodash.find(serverInformation, { id: 'SERVER_NAME' }).value,
                    serverTime: new Date(lodash.find(serverInformation, { id: 'SERVER_TIME' }).value * 1000).toLocaleString(),
                    configurationName: lodash.find(serverInformation, { id: 'CONFIGURATION_NAME' }).value,
                    databaseType: lodash.find(serverInformation, { id: 'DB_TYPE' }).value,
                    databaseName: lodash.find(serverInformation, { id: 'DB_NAME' }).value,
                    databaseVersion: lodash.find(serverInformation, { id: 'DB_VERSION' }).value,
                    databaseUser: lodash.find(serverInformation, { id: 'DB_USER' }).value
                };
            }));
        };
        return RxServerInformationService;
    }());
    RxServerInformationService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxServerInformationService, deps: [{ token: i2__namespace.RxSystemConfigurationService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxServerInformationService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxServerInformationService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxServerInformationService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxSystemConfigurationService }]; } });

    var ServerInformationAdminComponent = /** @class */ (function () {
        function ServerInformationAdminComponent(rxServerInformationService) {
            this.rxServerInformationService = rxServerInformationService;
        }
        ServerInformationAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.busy = this.rxServerInformationService.getServerInformation().subscribe(function (serverInformation) {
                _this.serverInformation = serverInformation;
            });
        };
        return ServerInformationAdminComponent;
    }());
    ServerInformationAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServerInformationAdminComponent, deps: [{ token: RxServerInformationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ServerInformationAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ServerInformationAdminComponent, selector: "rx-admin-server-information", ngImport: i0__namespace, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.server-information.header.title' | translate }}\"\n  [busy]=\"busy\"\n>\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n      <adapt-rx-textfield\n        rx-id=\"server-version\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-information.server-version.label' | translate }}\"\n        readonly=\"true\"\n        disabledStyleForReadonlyState=\"true\"\n        [ngModel]=\"serverInformation?.serverVersion\"\n        class=\"d-block form-group\"\n      >\n      </adapt-rx-textfield>\n    </div>\n    <div class=\"col-md-4\">\n      <adapt-rx-textfield\n        rx-id=\"server-directory\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-information.server-directory.label' | translate }}\"\n        readonly=\"true\"\n        disabledStyleForReadonlyState=\"true\"\n        [ngModel]=\"serverInformation?.serverDirectory\"\n        class=\"d-block form-group\"\n      >\n      </adapt-rx-textfield>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n      <adapt-rx-textfield\n        rx-id=\"operating-system\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-information.operating-system.label' | translate }}\"\n        readonly=\"true\"\n        disabledStyleForReadonlyState=\"true\"\n        [ngModel]=\"serverInformation?.operatingSystem\"\n        class=\"d-block form-group\"\n      >\n      </adapt-rx-textfield>\n    </div>\n    <div class=\"col-md-4\">\n      <adapt-rx-textfield\n        rx-id=\"hardware\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-information.hardware.label' | translate }}\"\n        readonly=\"true\"\n        disabledStyleForReadonlyState=\"true\"\n        [ngModel]=\"serverInformation?.hardware\"\n        class=\"d-block form-group\"\n      >\n      </adapt-rx-textfield>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n      <adapt-rx-textfield\n        rx-id=\"server-name\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-information.server-name-alias.label' | translate }}\"\n        readonly=\"true\"\n        disabledStyleForReadonlyState=\"true\"\n        [ngModel]=\"serverInformation?.serverName\"\n        class=\"d-block form-group\"\n      ></adapt-rx-textfield>\n    </div>\n    <div class=\"col-md-4\">\n      <adapt-rx-textfield\n        rx-id=\"server-time\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-information.server-time.label' | translate }}\"\n        readonly=\"true\"\n        disabledStyleForReadonlyState=\"true\"\n        [ngModel]=\"serverInformation?.serverTime\"\n        class=\"d-block form-group\"\n      ></adapt-rx-textfield>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n      <adapt-rx-textfield\n        rx-id=\"configuration-name\"\n        label=\" {{ 'com.bmc.arsys.rx.client.admin.server-information.configuration-name-time.label' | translate }}\"\n        readonly=\"true\"\n        disabledStyleForReadonlyState=\"true\"\n        [ngModel]=\"serverInformation?.configurationName\"\n        class=\"d-block form-group\"\n      ></adapt-rx-textfield>\n    </div>\n    <div class=\"col-md-4\">\n      <adapt-rx-textfield\n        rx-id=\"database-type\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-information.database-type.label' | translate }}\"\n        readonly=\"true\"\n        disabledStyleForReadonlyState=\"true\"\n        [ngModel]=\"serverInformation?.databaseType\"\n        class=\"d-block form-group\"\n      ></adapt-rx-textfield>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-4\">\n      <adapt-rx-textfield\n        rx-id=\"database-name\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-information.database-tablespace-name.label' | translate }}\"\n        readonly=\"true\"\n        disabledStyleForReadonlyState=\"true\"\n        [ngModel]=\"serverInformation?.databaseName\"\n        class=\"d-block form-group\"\n      ></adapt-rx-textfield>\n    </div>\n    <div class=\"col-md-4\">\n      <adapt-rx-textfield\n        rx-id=\"database-version\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-information.database-version.label' | translate }}\"\n        readonly=\"true\"\n        disabledStyleForReadonlyState=\"true\"\n        [ngModel]=\"serverInformation?.databaseVersion\"\n        class=\"d-block form-group\"\n      ></adapt-rx-textfield>\n    </div>\n  </div>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }], directives: [{ type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServerInformationAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-server-information',
                        templateUrl: './server-information.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: RxServerInformationService }]; } });

    var ServerInformationRegistrationModule = /** @class */ (function () {
        function ServerInformationRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-server-information',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(ServerInformationAdminComponent),
                name: 'Server information',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return ServerInformationRegistrationModule;
    }());
    ServerInformationRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServerInformationRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ServerInformationRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServerInformationRegistrationModule, declarations: [ServerInformationAdminComponent], imports: [i4.AdminSettingsModule, i1$2.AdaptRxTextfieldModule, i8.CommonModule, i1.FormsModule, i4$1.TranslateModule] });
    ServerInformationRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServerInformationRegistrationModule, imports: [[i4.AdminSettingsModule, i1$2.AdaptRxTextfieldModule, i8.CommonModule, i1.FormsModule, i4$1.TranslateModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServerInformationRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ServerInformationAdminComponent],
                        imports: [i4.AdminSettingsModule, i1$2.AdaptRxTextfieldModule, i8.CommonModule, i1.FormsModule, i4$1.TranslateModule],
                        entryComponents: [ServerInformationAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RX_SERVER_LOGS = {
        configUrl: i2.RX_ADMINISTRATION.systemConfigurationUrl + "/logging/server",
        downloadUrl: i2.RX_ADMINISTRATION.systemConfigurationUrl + "/logging/server/download",
        defaultFormConfig: {
            autoTurnOffDuration: 30,
            ruleLogOn: false,
            timedRuleLogOn: false,
            processLogOn: false,
            sqlLogOn: false,
            apiLogOn: false
        }
    };

    var RxServerLogsService = /** @class */ (function () {
        function RxServerLogsService(httpClient) {
            this.httpClient = httpClient;
        }
        RxServerLogsService.prototype.getConfig = function () {
            return this.httpClient.get(RX_SERVER_LOGS.configUrl);
        };
        RxServerLogsService.prototype.save = function (logsConfig) {
            return this.httpClient.post(RX_SERVER_LOGS.configUrl, logsConfig);
        };
        RxServerLogsService.prototype.downloadServerLogs = function (logFileNames) {
            return this.httpClient.post(RX_SERVER_LOGS.downloadUrl, logFileNames, {
                observe: 'response',
                responseType: 'arraybuffer'
            });
        };
        return RxServerLogsService;
    }());
    RxServerLogsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxServerLogsService, deps: [{ token: i1__namespace$2.HttpClient }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxServerLogsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxServerLogsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxServerLogsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }]; } });

    var ServerLogsAdminComponent = /** @class */ (function (_super) {
        __extends(ServerLogsAdminComponent, _super);
        function ServerLogsAdminComponent(formBuilder, rxNotificationService, rxServerErrorHandlerService, rxServerLogsService) {
            var _this = _super.call(this) || this;
            _this.formBuilder = formBuilder;
            _this.rxNotificationService = rxNotificationService;
            _this.rxServerErrorHandlerService = rxServerErrorHandlerService;
            _this.rxServerLogsService = rxServerLogsService;
            _this.hostClass = 'd-block col-md-9 p-0';
            return _this;
        }
        ServerLogsAdminComponent.prototype.getServerLogsConfig = function () {
            var _this = this;
            this.busy = this.rxServerLogsService.getConfig().subscribe(function (serverLogsConfig) {
                _this.serverLogsForm.patchValue(serverLogsConfig);
            });
        };
        ServerLogsAdminComponent.prototype.toggleAdditionalLogTypes = function () {
            this.shouldDisplayAdditionalLogTypes = !this.shouldDisplayAdditionalLogTypes;
        };
        ServerLogsAdminComponent.prototype.save = function () {
            var _this = this;
            var formValue = this.serverLogsForm.getRawValue();
            this.rxServerLogsService.save(formValue).subscribe(function () {
                _this.rxNotificationService.addSuccessMessage('Server Logs configuration saved successfully.');
                _this.serverLogsForm.markAsPristine();
            });
        };
        ServerLogsAdminComponent.prototype.downloadLogs = function () {
            var _this = this;
            this.isDownloadInProgress = true;
            this.rxServerLogsService
                .downloadServerLogs({
                fileNames: ['server', 'License']
            })
                .subscribe(function (data) {
                i3$1.RxFileService.saveFile(data);
                _this.isDownloadInProgress = false;
            }, function (error) {
                error.data = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(error.error)));
                _this.rxServerErrorHandlerService.handle(error);
                _this.isDownloadInProgress = false;
            });
        };
        Object.defineProperty(ServerLogsAdminComponent.prototype, "autoTurnOffDuration", {
            get: function () {
                return this.serverLogsForm.get('autoTurnOffDuration').value;
            },
            enumerable: false,
            configurable: true
        });
        ServerLogsAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.notifyPropertyChanged('api', {
                isDirty: function () { return _this.serverLogsForm.dirty; }
            });
            this.serverLogsForm = this.formBuilder.group(RX_SERVER_LOGS.defaultFormConfig);
            this.getServerLogsConfig();
        };
        return ServerLogsAdminComponent;
    }(i4$2.BaseViewComponent));
    ServerLogsAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServerLogsAdminComponent, deps: [{ token: i1__namespace$3.FormBuilder }, { token: i2__namespace.RxNotificationService }, { token: i2__namespace.RxServerErrorHandlerService }, { token: RxServerLogsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ServerLogsAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ServerLogsAdminComponent, selector: "rx-admin-server-logs", host: { properties: { "class": "this.hostClass" } }, usesInheritance: true, ngImport: i0__namespace, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.server-logs.header.title' | translate }}\" [busy]=\"busy\">\n  <form [formGroup]=\"serverLogsForm\">\n    <div>\n      <h6 class=\"dt\">{{ 'com.bmc.arsys.rx.client.admin.server-logs.capture-logs.title' | translate }}</h6>\n      <div class=\"d-flex p-0 logs-duration\" rx-id=\"logs-duration\">\n        <adapt-rx-counter\n          formControlName=\"autoTurnOffDuration\"\n          min=\"1\"\n          adaptIntegerNumber\n        >\n        </adapt-rx-counter>\n        <span class=\"p-2\">{{ 'com.bmc.arsys.rx.client.admin.server-logs.minutes.label' | translate }}</span>\n      </div>\n      <div *ngIf=\"autoTurnOffDuration < 1\" class=\"adapt-mt-error\">\n        {{ 'com.bmc.arsys.rx.client.admin.server-logs.minimum-of-one-minute.label' | translate }}\n      </div>\n    </div>\n\n    <div>\n      <h6 class=\"dt\">{{ 'com.bmc.arsys.rx.client.admin.server-logs.log-types-to-be-captured.title' | translate }}</h6>\n      <adapt-rx-checkbox\n        formControlName=\"ruleLogOn\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-logs.rule.label' | translate }}\"\n      ></adapt-rx-checkbox>\n      <adapt-rx-checkbox\n        formControlName=\"timedRuleLogOn\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-logs.escalation.label' | translate }}\"\n      ></adapt-rx-checkbox>\n      <adapt-rx-checkbox\n        formControlName=\"processLogOn\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-logs.process.label' | translate }}\"\n      ></adapt-rx-checkbox>\n    </div>\n\n    <div rx-id=\"show-additional-log\" (click)=\"toggleAdditionalLogTypes()\" class=\"btn-link alert-link pt-2\">\n      {{\n        (shouldDisplayAdditionalLogTypes\n          ? 'com.bmc.arsys.rx.client.admin.server-logs.show-less.label'\n          : 'com.bmc.arsys.rx.client.admin.server-logs.show-more.label'\n        ) | translate\n      }}\n    </div>\n\n    <div *ngIf=\"shouldDisplayAdditionalLogTypes\">\n      <h6 class=\"dt\">\n        {{ 'com.bmc.arsys.rx.client.admin.server-logs.additional-log-types-to-be-captured.title' | translate }}\n      </h6>\n      <adapt-rx-checkbox\n        formControlName=\"sqlLogOn\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-logs.sql.label' | translate }}\"\n      ></adapt-rx-checkbox>\n      <adapt-rx-checkbox\n        formControlName=\"apiLogOn\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.server-logs.api.label' | translate }}\"\n      ></adapt-rx-checkbox>\n    </div>\n\n    <div class=\"mt-4 d-flex\">\n      <button\n        type=\"submit\"\n        adapt-button\n        btn-type=\"primary\"\n        [disabled]=\"serverLogsForm.pristine || autoTurnOffDuration < 1\"\n        (click)=\"save()\"\n        rx-id=\"save-button\"\n        class=\"mr-3\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n      </button>\n\n      <button\n        type=\"button\"\n        adapt-button\n        btn-type=\"secondary\"\n        [adaptInlineLoader]=\"isDownloadInProgress\"\n        activeText=\"Downloading...\"\n        (click)=\"downloadLogs()\"\n        rx-id=\"download-button\"\n      >\n        {{ 'com.bmc.arsys.rx.client.admin.server-logs.download-logs.label' | translate }}\n      </button>\n    </div>\n  </form>\n</rx-admin-settings>\n", styles: [".logs-duration{max-width:200px}\n"], components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$1.AdaptInlineStandaloneDirective, selector: "[adaptInlineLoader]", inputs: ["adaptInlineLoader", "activeText"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServerLogsAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-server-logs',
                        templateUrl: './server-logs.component.html',
                        styleUrls: ['./server-logs.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }, { type: i2__namespace.RxNotificationService }, { type: i2__namespace.RxServerErrorHandlerService }, { type: RxServerLogsService }]; }, propDecorators: { hostClass: [{
                    type: i0.HostBinding,
                    args: ['class']
                }] } });

    var ServerLogsRegistrationModule = /** @class */ (function () {
        function ServerLogsRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-server-logs',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(ServerLogsAdminComponent),
                name: 'Server logs',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return ServerLogsRegistrationModule;
    }());
    ServerLogsRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServerLogsRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ServerLogsRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServerLogsRegistrationModule, declarations: [ServerLogsAdminComponent], imports: [i1$2.AdaptBusyModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptRxCheckboxModule,
            i1$2.AdaptRxCounterModule,
            i1$2.AdaptRxValidatorsModule,
            i4.AdminSettingsModule,
            i8.CommonModule,
            i1.FormsModule,
            i1.ReactiveFormsModule,
            i4$1.TranslateModule] });
    ServerLogsRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServerLogsRegistrationModule, imports: [[
                i1$2.AdaptBusyModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptRxCheckboxModule,
                i1$2.AdaptRxCounterModule,
                i1$2.AdaptRxValidatorsModule,
                i4.AdminSettingsModule,
                i8.CommonModule,
                i1.FormsModule,
                i1.ReactiveFormsModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServerLogsRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ServerLogsAdminComponent],
                        imports: [
                            i1$2.AdaptBusyModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptRxCheckboxModule,
                            i1$2.AdaptRxCounterModule,
                            i1$2.AdaptRxValidatorsModule,
                            i4.AdminSettingsModule,
                            i8.CommonModule,
                            i1.FormsModule,
                            i1.ReactiveFormsModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [ServerLogsAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RX_SERVICES_PROVIDER_REGION = {
        connections: {
            cognitiveAdminCredential: 'cognitiveAdminCredential'
        },
        providers: {
            watson: 'WATSON'
        },
        regionOptions: [
            { name: 'com.bmc.arsys.rx.client.admin.cognitive-service.region.germany.label', id: 'EU_DE' },
            { name: 'com.bmc.arsys.rx.client.admin.cognitive-service.region.sydney.label', id: 'AU_SYD' },
            { name: 'com.bmc.arsys.rx.client.admin.cognitive-service.region.us-east.label', id: 'US_EAST' },
            { name: 'com.bmc.arsys.rx.client.admin.cognitive-service.region.us-south.label', id: 'US_SOUTH' },
            { name: 'com.bmc.arsys.rx.client.admin.cognitive-service.region.uk.label', id: 'EU_GB' }
        ]
    };

    var ServicesProviderRegionAdminComponent = /** @class */ (function () {
        function ServicesProviderRegionAdminComponent(translateService, rxSystemConfigurationService, rxNotificationService) {
            var _this = this;
            this.translateService = translateService;
            this.rxSystemConfigurationService = rxSystemConfigurationService;
            this.rxNotificationService = rxNotificationService;
            this.isSaveInProgress = false;
            this.defaultSelection = this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');
            this.regionOptions = RX_SERVICES_PROVIDER_REGION.regionOptions.map(function (region) { return (Object.assign(Object.assign({}, region), { name: _this.translateService.instant(region.name) })); });
            this.optionFormatter = function (regionNameOption) {
                return lodash.get(regionNameOption, 'name', _this.defaultSelection);
            };
        }
        ServicesProviderRegionAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.servicesProviderRegionForm = new i1.FormGroup({
                region: new i1.FormControl('')
            });
            this.rxSystemConfigurationService
                .getConfiguration(RX_SERVICES_PROVIDER_REGION.connections.cognitiveAdminCredential)
                .subscribe(function (result) {
                var cognitiveAdminCredential = JSON.parse(result.value);
                _this.servicesProviderRegionForm.get('region').setValue([
                    lodash.find(_this.regionOptions, {
                        id: cognitiveAdminCredential[RX_SERVICES_PROVIDER_REGION.providers.watson].cognitiveAdminRegionName
                    })
                ]);
            });
        };
        ServicesProviderRegionAdminComponent.prototype.save = function () {
            var _a;
            var _this = this;
            this.isSaveInProgress = true;
            var payload = (_a = {},
                _a[RX_SERVICES_PROVIDER_REGION.providers.watson] = {
                    cognitiveAdminRegionName: this.servicesProviderRegionForm.get('region').value[0].id
                },
                _a);
            this.rxSystemConfigurationService
                .setConfiguration(RX_SERVICES_PROVIDER_REGION.connections.cognitiveAdminCredential, payload)
                .subscribe(function (response) {
                _this.isSaveInProgress = false;
                _this.servicesProviderRegionForm.markAsPristine();
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.services-provider-region.saved.message'));
            }, function (error) {
                _this.isSaveInProgress = false;
            });
        };
        ServicesProviderRegionAdminComponent.prototype.canSave = function () {
            return !this.isSaveInProgress && this.servicesProviderRegionForm.valid && this.servicesProviderRegionForm.dirty;
        };
        return ServicesProviderRegionAdminComponent;
    }());
    ServicesProviderRegionAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServicesProviderRegionAdminComponent, deps: [{ token: i4__namespace.TranslateService }, { token: i2__namespace.RxSystemConfigurationService }, { token: i2__namespace.RxNotificationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ServicesProviderRegionAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ServicesProviderRegionAdminComponent, selector: "rx-admin-services-provider-region", ngImport: i0__namespace, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.services-provider-region.header.title' | translate }}\">\n  <form [formGroup]=\"servicesProviderRegionForm\">\n    <adapt-rx-select\n      [options]=\"regionOptions\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.services-provider-region.region.label' | translate }}\"\n      name=\"region\"\n      [optionFormatter]=\"optionFormatter\"\n      formControlName=\"region\"\n      rx-id=\"region\"\n      class=\"form-group d-block\"\n      required\n    ></adapt-rx-select>\n\n    <button adapt-button btn-type=\"primary\" type=\"button\" rx-id=\"save-button\" (click)=\"save()\" [disabled]=\"!canSave()\">\n      {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n    </button>\n  </form>\n</rx-admin-settings>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-select{max-width:400px}\n"], components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServicesProviderRegionAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-services-provider-region',
                        templateUrl: './services-provider-region.component.html',
                        styleUrls: ['./services-provider-region.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i4__namespace.TranslateService }, { type: i2__namespace.RxSystemConfigurationService }, { type: i2__namespace.RxNotificationService }]; } });

    var ServicesProviderRegionRegistrationModule = /** @class */ (function () {
        function ServicesProviderRegionRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-services-provider-region',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(ServicesProviderRegionAdminComponent),
                name: 'Services provider region',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return ServicesProviderRegionRegistrationModule;
    }());
    ServicesProviderRegionRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServicesProviderRegionRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ServicesProviderRegionRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServicesProviderRegionRegistrationModule, declarations: [ServicesProviderRegionAdminComponent], imports: [i8.CommonModule,
            i1.ReactiveFormsModule,
            i1$2.AdaptRxSelectModule,
            i4$1.TranslateModule,
            i4.AdminSettingsModule,
            i1$2.AdaptButtonModule] });
    ServicesProviderRegionRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServicesProviderRegionRegistrationModule, imports: [[
                i8.CommonModule,
                i1.ReactiveFormsModule,
                i1$2.AdaptRxSelectModule,
                i4$1.TranslateModule,
                i4.AdminSettingsModule,
                i1$2.AdaptButtonModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ServicesProviderRegionRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ServicesProviderRegionAdminComponent],
                        imports: [
                            i8.CommonModule,
                            i1.ReactiveFormsModule,
                            i1$2.AdaptRxSelectModule,
                            i4$1.TranslateModule,
                            i4.AdminSettingsModule,
                            i1$2.AdaptButtonModule
                        ],
                        entryComponents: [ServicesProviderRegionAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RX_SUMMARIZATION_SERVICE = {
        connections: {
            summarizationServiceEndpointConfiguration: 'summarizationServiceEndpointConfiguration'
        },
        summarizationRepository: 'NATIVE'
    };

    var SummarizationServiceAdminComponent = /** @class */ (function (_super) {
        __extends(SummarizationServiceAdminComponent, _super);
        function SummarizationServiceAdminComponent(translateService, rxCommandFactoryService, rxSystemConfigurationService, rxNotificationService, rxCurrentUserService) {
            var _this = _super.call(this) || this;
            _this.translateService = translateService;
            _this.rxCommandFactoryService = rxCommandFactoryService;
            _this.rxSystemConfigurationService = rxSystemConfigurationService;
            _this.rxNotificationService = rxNotificationService;
            _this.rxCurrentUserService = rxCurrentUserService;
            _this.connectionTestStatus = i1$1.ConnectionTestStatus.Invalid;
            _this.isSaveInProgress = false;
            _this.isAdministrator = _this.rxCurrentUserService.isAdministrator();
            return _this;
        }
        SummarizationServiceAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.notifyPropertyChanged('api', {
                isDirty: function () { return _this.summarizationServiceForm.dirty; }
            });
            this.summarizationServiceForm = new i1.FormGroup({
                endpoint: new i1.FormControl(''),
                username: new i1.FormControl(''),
                password: new i1.FormControl('')
            });
            this.rxSystemConfigurationService
                .getConfiguration(RX_SUMMARIZATION_SERVICE.connections.summarizationServiceEndpointConfiguration)
                .subscribe(function (result) {
                var summarizationConfiguration = JSON.parse(result.value)[RX_SUMMARIZATION_SERVICE.summarizationRepository];
                _this.summarizationServiceForm.get('endpoint').setValue(summarizationConfiguration.endpoint);
                _this.summarizationServiceForm.get('username').setValue(summarizationConfiguration.username);
                _this.summarizationServiceForm.get('password').setValue(summarizationConfiguration.username);
            });
            this.summarizationServiceForm.valueChanges
                .pipe(operators.takeUntil(this.destroyed$))
                .subscribe(function (value) { return _this.resetConnectionTest(); });
        };
        SummarizationServiceAdminComponent.prototype.resetConnectionTest = function () {
            this.connectionTestStatus =
                this.summarizationServiceForm.valid && this.summarizationServiceForm.dirty
                    ? i1$1.ConnectionTestStatus.Unknown
                    : i1$1.ConnectionTestStatus.Invalid;
        };
        SummarizationServiceAdminComponent.prototype.onTestConnection = function () {
            var _this = this;
            this.rxCommandFactoryService
                .forResourceType('com.bmc.arsys.rx.application.cognitive.command.PingSummarizationServiceCommand')
                .execute(this.summarizationServiceForm.value)
                .pipe(operators.catchError(function (error) {
                _this.connectionTestStatus = i1$1.ConnectionTestStatus.Failed;
                return rxjs.throwError(error);
            }))
                .subscribe(function () {
                _this.connectionTestStatus = i1$1.ConnectionTestStatus.Passed;
            });
        };
        SummarizationServiceAdminComponent.prototype.save = function () {
            var _a;
            var _this = this;
            this.isSaveInProgress = true;
            this.rxSystemConfigurationService
                .setConfiguration(RX_SUMMARIZATION_SERVICE.connections.summarizationServiceEndpointConfiguration, (_a = {},
                _a[RX_SUMMARIZATION_SERVICE.summarizationRepository] = this.summarizationServiceForm.value,
                _a))
                .subscribe(function (response) {
                _this.isSaveInProgress = false;
                _this.summarizationServiceForm.markAsPristine();
                _this.resetConnectionTest();
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.summarization-service.saved.message'));
            }, function (error) {
                _this.isSaveInProgress = false;
            });
        };
        SummarizationServiceAdminComponent.prototype.isSaveButtonDisabled = function () {
            return (this.summarizationServiceForm.pristine ||
                this.summarizationServiceForm.invalid ||
                this.connectionTestStatus !== i1$1.ConnectionTestStatus.Passed ||
                this.isSaveInProgress);
        };
        return SummarizationServiceAdminComponent;
    }(i4$2.BaseViewComponent));
    SummarizationServiceAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SummarizationServiceAdminComponent, deps: [{ token: i4__namespace.TranslateService }, { token: i2__namespace.RxCommandFactoryService }, { token: i2__namespace.RxSystemConfigurationService }, { token: i2__namespace.RxNotificationService }, { token: i2__namespace.RxCurrentUserService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    SummarizationServiceAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SummarizationServiceAdminComponent, selector: "rx-admin-summarization-service", usesInheritance: true, ngImport: i0__namespace, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.summarization-service.header.title' | translate }}\">\n  <form [formGroup]=\"summarizationServiceForm\">\n    <adapt-rx-textfield\n      name=\"endpoint\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.summarization-service.api-endpoint-url.title' | translate }}\"\n      rx-id=\"api-endpoint-url\"\n      class=\"form-group d-block\"\n      formControlName=\"endpoint\"\n      required\n    >\n    </adapt-rx-textfield>\n    <adapt-rx-textfield\n      name=\"username\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.user-name.label' | translate }}\"\n      rx-id=\"user-name\"\n      class=\"form-group d-block\"\n      formControlName=\"username\"\n      required\n    >\n    </adapt-rx-textfield>\n    <adapt-rx-textfield\n      name=\"password\"\n      label=\"{{ 'com.bmc.arsys.rx.client.common.password.label' | translate }}\"\n      rx-id=\"password\"\n      [isPassword]=\"true\"\n      class=\"form-group d-block\"\n      formControlName=\"password\"\n      required\n    >\n    </adapt-rx-textfield>\n    <div class=\"d-flex\" *ngIf=\"isAdministrator\">\n      <rx-connection-tester\n        [status]=\"connectionTestStatus\"\n        buttonType=\"secondary\"\n        rx-id=\"test-connection-button\"\n        (testConnection)=\"onTestConnection()\"\n      >\n      </rx-connection-tester>\n      <button\n        adapt-button\n        type=\"button\"\n        rx-id=\"save-button\"\n        btn-type=\"primary\"\n        class=\"ml-4\"\n        [disabled]=\"isSaveButtonDisabled()\"\n        (click)=\"save()\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n      </button>\n    </div>\n  </form>\n</rx-admin-settings>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield{max-width:400px}\n"], components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace.RxConnectionTesterComponent, selector: "rx-connection-tester", inputs: ["status", "buttonType"], outputs: ["testConnection"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SummarizationServiceAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-summarization-service',
                        templateUrl: './summarization-service.component.html',
                        styleUrls: ['./summarization-service.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i4__namespace.TranslateService }, { type: i2__namespace.RxCommandFactoryService }, { type: i2__namespace.RxSystemConfigurationService }, { type: i2__namespace.RxNotificationService }, { type: i2__namespace.RxCurrentUserService }]; } });

    var SummarizationServiceRegistrationModule = /** @class */ (function () {
        function SummarizationServiceRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-summarization-service',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(SummarizationServiceAdminComponent),
                name: 'Summarization service',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return SummarizationServiceRegistrationModule;
    }());
    SummarizationServiceRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SummarizationServiceRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SummarizationServiceRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SummarizationServiceRegistrationModule, declarations: [SummarizationServiceAdminComponent], imports: [i8.CommonModule,
            i4.AdminSettingsModule,
            i4$1.TranslateModule,
            i1$2.AdaptRxTextfieldModule,
            i1.ReactiveFormsModule,
            i1$1.RxConnectionTesterModule,
            i1$2.AdaptButtonModule] });
    SummarizationServiceRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SummarizationServiceRegistrationModule, imports: [[
                i8.CommonModule,
                i4.AdminSettingsModule,
                i4$1.TranslateModule,
                i1$2.AdaptRxTextfieldModule,
                i1.ReactiveFormsModule,
                i1$1.RxConnectionTesterModule,
                i1$2.AdaptButtonModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SummarizationServiceRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [SummarizationServiceAdminComponent],
                        imports: [
                            i8.CommonModule,
                            i4.AdminSettingsModule,
                            i4$1.TranslateModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1.ReactiveFormsModule,
                            i1$1.RxConnectionTesterModule,
                            i1$2.AdaptButtonModule
                        ],
                        entryComponents: [SummarizationServiceAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RxSummarizationTestingService = /** @class */ (function () {
        function RxSummarizationTestingService(httpClient, rxCommandFactoryService) {
            this.httpClient = httpClient;
            this.rxCommandFactoryService = rxCommandFactoryService;
            this.textSummarizationCommand = 'com.bmc.arsys.rx.application.cognitive.command.SummarizeTextCommand';
            this.recordSummarizationCommand = 'com.bmc.arsys.rx.application.cognitive.command.SummarizeFromRecInstCommand';
        }
        RxSummarizationTestingService.prototype.getTextSummarization = function (payload) {
            return this.rxCommandFactoryService.forResourceType(this.textSummarizationCommand).execute(payload);
        };
        RxSummarizationTestingService.prototype.getRecordInstanceSummarization = function (payload) {
            return this.rxCommandFactoryService.forResourceType(this.recordSummarizationCommand).execute(payload);
        };
        return RxSummarizationTestingService;
    }());
    RxSummarizationTestingService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxSummarizationTestingService, deps: [{ token: i1__namespace$2.HttpClient }, { token: i2__namespace.RxCommandFactoryService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxSummarizationTestingService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxSummarizationTestingService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxSummarizationTestingService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }, { type: i2__namespace.RxCommandFactoryService }]; } });

    var SummarizationTestingAdminComponent = /** @class */ (function () {
        function SummarizationTestingAdminComponent(formBuilder, rxSummarizationTestingService, rxNotificationService, rxRecordDefinitionCacheService, rxRecordInstanceDataPageService, adaptDockedPanelService, rxSystemConfigurationService, rxJsonParserService, translateService) {
            this.formBuilder = formBuilder;
            this.rxSummarizationTestingService = rxSummarizationTestingService;
            this.rxNotificationService = rxNotificationService;
            this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            this.rxRecordInstanceDataPageService = rxRecordInstanceDataPageService;
            this.adaptDockedPanelService = adaptDockedPanelService;
            this.rxSystemConfigurationService = rxSystemConfigurationService;
            this.rxJsonParserService = rxJsonParserService;
            this.translateService = translateService;
            this.textInputFieldOptions = [];
            this.summaryOutputFieldOptions = [];
            this.shouldShowGrid = false;
            this.dataSourceOptions = ['Email', 'Chat', 'Other'];
            this.index = 0;
            this.defaultSummarizationPercentage = 50;
            this.isSummarizationInProgress = false;
            this.isRecordSummarizationInProgress = false;
            this.disableContent = {
                variant: 'danger',
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.summarization-testing.summarization-service-disabled.message'),
                content: '',
                dismissible: false
            };
            this.recordDefinition = {
                fieldDefinitions: []
            };
            this.recordDefinitionPickerOptions = {
                label: this.translateService.instant('com.bmc.arsys.rx.client.admin.summarization-testing.record-definition.label'),
                definitionType: i4.RxDefinitionPickerType.RegularRecord,
                required: true
            };
        }
        /*ngAfterViewInit(): void {
          this.dockedPanelId = this.adaptDockedPanelService.register({
            title: this.translateService.instant(
              'com.bmc.arsys.rx.client.admin.summarization-testing.summarization-details.label'
            ),
            content: this.viewSummarizationDetailsTemplate,
            size: 'lg'
          });
        }*/
        SummarizationTestingAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.interactiveSummarizationTestingForm = this.createInteractiveSummarizationTestingForm();
            this.recordSummarizationTestingForm = this.createRecordSummarizationTestingForm();
            this.shouldShowGrid = true;
            this.rxSystemConfigurationService
                .getConfiguration('summarizationServiceTenantConfiguration')
                .subscribe(function (response) {
                var summarizationConfiguration = _this.rxJsonParserService.tryParseJson(response.value);
                _this.defaultSummarizationPercentage =
                    summarizationConfiguration['summarizationPercentage'] || _this.defaultSummarizationPercentage;
                if (summarizationConfiguration) {
                    _this.isSummarizationServiceDisabled = !summarizationConfiguration['enableSummarization'];
                    _this.interactiveSummarizationTestingForm
                        .get('summarizationPercentage')
                        .setValue(summarizationConfiguration['summarizationPercentage']);
                    _this.recordSummarizationTestingForm
                        .get('summarizationPercentage')
                        .setValue(summarizationConfiguration['summarizationPercentage']);
                }
            });
            this.updateGridConfig(true);
            this.recordSummarizationTestingForm
                .get('recordDefinition')
                .valueChanges.subscribe(function (value) { return _this.onRecordDefinitionChange(value); });
            this.recordSummarizationTestingForm
                .get('textInputField')
                .valueChanges.subscribe(function (value) { return _this.onTextInputFieldChange(value); });
        };
        SummarizationTestingAdminComponent.prototype.createInteractiveSummarizationTestingForm = function () {
            return this.formBuilder.group({
                text: ['', i1.Validators.required],
                source: [[this.dataSourceOptions[0]], i1.Validators.nullValidator],
                summarizationPercentage: [50, i1.Validators.required],
                extractedSummaryText: ''
            });
        };
        SummarizationTestingAdminComponent.prototype.createRecordSummarizationTestingForm = function () {
            return this.formBuilder.group({
                recordDefinition: ['', i1.Validators.required],
                textInputField: [[], i1.Validators.required],
                summaryOutputField: [[], i1.Validators.required],
                source: [[this.dataSourceOptions[0]]],
                summarizationPercentage: [50]
            });
        };
        SummarizationTestingAdminComponent.prototype.onRecordDefinitionChange = function (newRecordDefinitionName) {
            var _this = this;
            var oldRecordDefinitionName = this.recordSummarizationTestingForm.value.recordDefinition;
            if (newRecordDefinitionName !== oldRecordDefinitionName) {
                this.resetRecordSummarizationTestingForm();
                if (newRecordDefinitionName) {
                    this.rxRecordDefinitionCacheService
                        .getRecordDefinition(newRecordDefinitionName)
                        .subscribe(function (recordDefinition) {
                        _this.initializeFormControls(recordDefinition);
                    });
                }
            }
        };
        SummarizationTestingAdminComponent.prototype.initializeFormControls = function (recordDefinition) {
            this.textInputFieldOptions = recordDefinition.fieldDefinitions
                ? recordDefinition.fieldDefinitions
                    .filter(function (fieldDefinition) {
                    return ((fieldDefinition.fieldOption !== i3.RX_RECORD_DEFINITION.fieldOptions.system &&
                        fieldDefinition.resourceType === i3.RX_RECORD_DEFINITION.resourceTypes.character) ||
                        fieldDefinition.resourceType === i3.RX_RECORD_DEFINITION.resourceTypes.attachment);
                })
                    .map(function (fieldDefinition) {
                    return {
                        id: fieldDefinition.id,
                        name: fieldDefinition.name,
                        resourceType: fieldDefinition.resourceType
                    };
                })
                : [];
            this.summaryOutputFieldOptions = this.textInputFieldOptions.filter(function (fieldDefinition) {
                return fieldDefinition.resourceType === i3.RX_RECORD_DEFINITION.resourceTypes.character;
            });
        };
        SummarizationTestingAdminComponent.prototype.optionFormatter = function (option) {
            return option.name;
        };
        SummarizationTestingAdminComponent.prototype.onTextInputFieldChange = function (value) {
            if (value.length) {
                this.recordSummarizationTestingForm.get('summaryOutputField').setValue([]);
                this.summaryOutputFieldOptions = this.textInputFieldOptions.filter(function (fieldDefinition) {
                    return (fieldDefinition.resourceType === i3.RX_RECORD_DEFINITION.resourceTypes.character &&
                        fieldDefinition.id !== value[0].id);
                });
                this.updateGridConfig(false);
            }
        };
        SummarizationTestingAdminComponent.prototype.resetRecordSummarizationTestingForm = function () {
            this.recordSummarizationTestingForm.get('textInputField').reset([]);
            this.recordSummarizationTestingForm.get('summaryOutputField').reset([]);
            this.recordSummarizationTestingForm.get('source').reset([this.dataSourceOptions[0]]);
            this.recordSummarizationTestingForm.get('summarizationPercentage').reset(this.defaultSummarizationPercentage);
            this.updateGridConfig(true);
        };
        SummarizationTestingAdminComponent.prototype.summarizeUsingText = function () {
            var _this = this;
            this.isSummarizationInProgress = true;
            this.interactiveSummarizationTestingForm.markAsPristine();
            this.rxSummarizationTestingService
                .getTextSummarization(this.transformFormControlData())
                .pipe(operators.catchError(function (error) {
                _this.isSummarizationInProgress = false;
                return rxjs.throwError(error);
            }))
                .subscribe(function (response) {
                _this.interactiveSummarizationTestingForm.get('extractedSummaryText').setValue(response[0]);
                _this.rxNotificationService.addSuccessMessage('Summarization completed successfully.');
                _this.isSummarizationInProgress = false;
            });
        };
        SummarizationTestingAdminComponent.prototype.transformFormControlData = function () {
            var summarizationRecord = {
                texts: [],
                source: '',
                summarizationPercentage: 0
            };
            summarizationRecord.texts.push(this.interactiveSummarizationTestingForm.get('text').value);
            summarizationRecord.source = this.interactiveSummarizationTestingForm.get('source').value[0];
            summarizationRecord.summarizationPercentage =
                this.interactiveSummarizationTestingForm.get('summarizationPercentage').value;
            return summarizationRecord;
        };
        SummarizationTestingAdminComponent.prototype.resetInteractiveSummarizationTestingForm = function () {
            this.interactiveSummarizationTestingForm.get('text').reset();
            this.interactiveSummarizationTestingForm.get('source').reset([this.dataSourceOptions[0]]);
            this.interactiveSummarizationTestingForm.get('summarizationPercentage').reset(this.defaultSummarizationPercentage);
            this.interactiveSummarizationTestingForm.get('extractedSummaryText').reset('');
        };
        SummarizationTestingAdminComponent.prototype.isResetButtonDisabled = function () {
            return this.interactiveSummarizationTestingForm.pristine || this.interactiveSummarizationTestingForm.invalid;
        };
        SummarizationTestingAdminComponent.prototype.getColumns = function () {
            return [
                {
                    index: 0,
                    fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.id),
                    title: 'Text input',
                    filterable: false
                }
            ];
        };
        SummarizationTestingAdminComponent.prototype.summarizeUsingRecordInstance = function () {
            var _this = this;
            this.isRecordSummarizationInProgress = true;
            var recordSummarizationTestingRecord = lodash.cloneDeep(this.recordSummarizationTestingForm.value);
            var payload = {
                recordDefinitionName: recordSummarizationTestingRecord.recordDefinition,
                inputFieldId: this.recordSummarizationTestingForm.get('textInputField').value[0].id,
                outputFieldId: this.recordSummarizationTestingForm.get('summaryOutputField').value[0].id,
                source: this.recordSummarizationTestingForm.get('source').value[0],
                summarizationPercentage: this.recordSummarizationTestingForm.get('summarizationPercentage').value
            };
            var observables$ = this.recordGridComponent.api.getSelectedRows().map(function (row) {
                payload['recordID'] = row[i3.RX_RECORD_DEFINITION.coreFieldIds.id];
                return _this.rxSummarizationTestingService.getRecordInstanceSummarization(payload);
            });
            rxjs.forkJoin(observables$)
                .pipe(operators.catchError(function (error) {
                _this.isRecordSummarizationInProgress = false;
                return rxjs.throwError(error);
            }))
                .subscribe(function () {
                _this.rxRecordInstanceDataPageService
                    .post({
                    params: {
                        recorddefinition: _this.recordSummarizationTestingForm.get('recordDefinition').value,
                        queryExpression: _this.prepareQueryExpression()
                    }
                })
                    .subscribe(function (results) {
                    _this.isRecordSummarizationInProgress = false;
                    _this.summarizedRecords = results;
                    _this.index = 0;
                    // this.adaptDockedPanelService.open(this.dockedPanelId);
                    _this.adaptDockedPanelService.open({
                        title: _this.translateService.instant('com.bmc.arsys.rx.client.admin.summarization-testing.summarization-details.label'),
                        content: _this.viewSummarizationDetailsTemplate,
                        size: 'lg'
                    });
                });
            });
        };
        SummarizationTestingAdminComponent.prototype.prepareQueryExpression = function () {
            var expression = '';
            this.recordGridComponent.api.getSelectedRows().map(function (row) {
                if (!lodash.isEmpty(expression)) {
                    expression += ' OR ';
                }
                expression += "('" + i3.RX_RECORD_DEFINITION.coreFieldIds.id + "' = \"" + row[i3.RX_RECORD_DEFINITION.coreFieldIds.id] + "\")";
            });
            return expression;
        };
        SummarizationTestingAdminComponent.prototype.isSummarizeButtonDisabled = function () {
            return (this.isRecordSummarizationInProgress ||
                this.recordSummarizationTestingForm.invalid ||
                (this.recordGridComponent.api.getSelectedRows() && !this.recordGridComponent.api.getSelectedRows().length) ||
                this.recordGridComponent.api.getSelectedRows().length > 5);
        };
        SummarizationTestingAdminComponent.prototype.previous = function () {
            this.index--;
        };
        SummarizationTestingAdminComponent.prototype.next = function () {
            this.index++;
        };
        SummarizationTestingAdminComponent.prototype.updateGridConfig = function (isEmptyGridRequired) {
            var _this = this;
            this.shouldShowGrid = false;
            this.gridConfig = isEmptyGridRequired ? this.createEmptyGridConfiguration() : this.prepareGridConfiguration();
            setTimeout(function () {
                _this.shouldShowGrid = true;
            });
        };
        SummarizationTestingAdminComponent.prototype.getRecordDefinition = function () {
            this.recordDefinition.fieldDefinitions = [
                {
                    id: i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                    resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                }
            ];
            return this.recordDefinition;
        };
        SummarizationTestingAdminComponent.prototype.getData = function (queryParams) {
            var _this = this;
            if (this.recordSummarizationTestingForm.get('recordDefinition').value) {
                return this.rxRecordInstanceDataPageService
                    .post({
                    params: Object.assign(Object.assign({}, lodash.omit(queryParams, ['searchText'])), { recorddefinition: this.recordSummarizationTestingForm.get('recordDefinition').value })
                })
                    .pipe(operators.map(function (result) {
                    result.data = result['data'].filter(function (recordInstance) { return recordInstance[_this.recordSummarizationTestingForm.get('textInputField').value[0].id] != null; });
                    return result;
                }));
            }
            else {
                return this.rxRecordInstanceDataPageService.getEmptyDataPage();
            }
        };
        SummarizationTestingAdminComponent.prototype.createEmptyGridConfiguration = function () {
            var _this = this;
            return (this.gridConfig = rxjs.of({
                actionButtons: [],
                getData: function (queryParams) { return _this.rxRecordInstanceDataPageService.getEmptyDataPage(); },
                getRecordDefinition: function () { return rxjs.of(_this.getRecordDefinition()); },
                columns: this.getColumns(),
                enableFiltering: true,
                enableRowSelection: i7.RowSelectionMode.Multiple
            }));
        };
        SummarizationTestingAdminComponent.prototype.prepareGridConfiguration = function () {
            var _this = this;
            var columns = this.getColumns();
            var recordDefinition = this.getRecordDefinition();
            if (this.recordSummarizationTestingForm.get('textInputField').value.length) {
                var textInput = this.recordSummarizationTestingForm.get('textInputField').value[0];
                recordDefinition.fieldDefinitions[0] = {
                    id: textInput.id,
                    resourceType: textInput.resourceType,
                    name: textInput.name
                };
                columns[0] = {
                    index: 0,
                    fieldId: String(textInput.id),
                    title: "Text input:  " + textInput.name
                };
            }
            return rxjs.of({
                actionButtons: [],
                getData: function (queryParams) { return _this.getData(queryParams); },
                getRecordDefinition: function () { return rxjs.of(recordDefinition); },
                columns: columns,
                enableFiltering: true,
                enableRowSelection: i7.RowSelectionMode.Multiple
            });
        };
        return SummarizationTestingAdminComponent;
    }());
    SummarizationTestingAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SummarizationTestingAdminComponent, deps: [{ token: i1__namespace$3.FormBuilder }, { token: RxSummarizationTestingService }, { token: i2__namespace.RxNotificationService }, { token: i3__namespace$2.RxRecordDefinitionCacheService }, { token: i3__namespace$2.RxRecordInstanceDataPageService }, { token: i1__namespace$1.AdaptDockedPanelService }, { token: i2__namespace.RxSystemConfigurationService }, { token: i3__namespace.RxJsonParserService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    SummarizationTestingAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SummarizationTestingAdminComponent, selector: "rx-admin-summarization-testing", viewQueries: [{ propertyName: "recordGridComponent", first: true, predicate: ["recordGrid"], descendants: true }, { propertyName: "viewSummarizationDetailsTemplate", first: true, predicate: ["viewSummarizationDetailsTemplate"], descendants: true, static: true }], ngImport: i0__namespace, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.summarization-testing.header.title' | translate }}\">\n  <div class=\"row\" *ngIf=\"isSummarizationServiceDisabled; else summarizationTesting\">\n    <div class=\"col-md-12 form-group\">\n      <div class=\"disabled-warning\">\n        <adapt-alert [config]=\"disableContent\"></adapt-alert>\n      </div>\n    </div>\n  </div>\n\n  <ng-template #summarizationTesting>\n    <div class=\"row\">\n      <div class=\"col-md-12 form-group\">\n        <adapt-accordion [multiselect]=\"true\">\n          <adapt-accordion-tab\n            [title]=\"'com.bmc.arsys.rx.client.admin.summarization-testing.interactive-summarization.title' | translate\"\n            [isOpen]=\"true\"\n            rx-id=\"interactive-summarization\"\n          >\n            <form [formGroup]=\"interactiveSummarizationTestingForm\">\n              <div class=\"row\">\n                <div class=\"col-md-6\">\n                  <adapt-rx-select\n                    formControlName=\"source\"\n                    [options]=\"dataSourceOptions\"\n                    name=\"source\"\n                    rx-id=\"data-source\"\n                    label=\"{{ 'com.bmc.arsys.rx.client.admin.summarization-testing.data-source.label' | translate }}\"\n                    class=\"form-group d-block\"\n                  >\n                  </adapt-rx-select>\n                </div>\n              </div>\n              <div class=\"row\">\n                <div class=\"col-md-6\">\n                  <adapt-rx-textarea\n                    formControlName=\"text\"\n                    rx-id=\"text-input\"\n                    class=\"form-group d-block\"\n                    label=\"{{ 'com.bmc.arsys.rx.client.admin.summarization-testing.text-input.label' | translate }}\"\n                    rows=\"10\"\n                  >\n                  </adapt-rx-textarea>\n\n                  <div class=\"d-flex flex-wrap\">\n                    <div class=\"flex-grow-1 mr-2 summarization-percentage\">\n                      <adapt-rx-counter\n                        [formControl]=\"interactiveSummarizationTestingForm.controls.summarizationPercentage\"\n                        label=\"{{\n                          'com.bmc.arsys.rx.client.admin.summarization-testing.summarization-percentage.label'\n                            | translate\n                        }}\"\n                        rx-id=\"summarization-percentage\"\n                        required\n                        adaptRange\n                        [min]=\"1\"\n                        [max]=\"50\"\n                        [tooltip]=\"{\n                          iconName: 'question_circle_o',\n                          content:\n                            'com.bmc.arsys.rx.client.admin.summarization-testing.summarization-percentage.tooltip'\n                            | translate,\n                          placement: 'top',\n                          popoverMode: true\n                        }\"\n                      ></adapt-rx-counter>\n                    </div>\n                    <div>\n                      <button\n                        adapt-button\n                        btn-type=\"primary\"\n                        type=\"button\"\n                        rx-id=\"summarize-button\"\n                        class=\"mr-2 button-margin-top\"\n                        (click)=\"summarizeUsingText()\"\n                        [adaptInlineLoader]=\"isSummarizationInProgress\"\n                        [disabled]=\"\n                          interactiveSummarizationTestingForm.pristine || interactiveSummarizationTestingForm.invalid\n                        \"\n                      >\n                        {{ 'com.bmc.arsys.rx.client.admin.summarization-testing.summarize.button.label' | translate }}\n                      </button>\n                    </div>\n                    <div>\n                      <button\n                        adapt-button\n                        btn-type=\"secondary\"\n                        type=\"button\"\n                        rx-id=\"reset-button\"\n                        class=\"d-icon-reply button-margin-top\"\n                        (click)=\"resetInteractiveSummarizationTestingForm()\"\n                      >\n                        {{ 'com.bmc.arsys.rx.client.common.reset.label' | translate }}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n\n                <div class=\"col-md-6\">\n                  <adapt-rx-textarea\n                    formControlName=\"extractedSummaryText\"\n                    rx-id=\"summary-output\"\n                    label=\"{{ 'com.bmc.arsys.rx.client.admin.summarization-testing.summary-output.label' | translate }}\"\n                    disabled=\"true\"\n                    class=\"form-group d-block\"\n                    rows=\"10\"\n                  ></adapt-rx-textarea>\n\n                  <button\n                    adapt-button\n                    btn-type=\"secondary\"\n                    type=\"button\"\n                    rx-id=\"copy-button\"\n                    class=\"mr-2 button-margin-top d-icon-files_copy_o\"\n                    [cdkCopyToClipboard]=\"interactiveSummarizationTestingForm.get('extractedSummaryText').value\"\n                    [disabled]=\"!interactiveSummarizationTestingForm.get('extractedSummaryText').value\"\n                  >\n                    {{ 'com.bmc.arsys.rx.client.common.copy.label' | translate }}\n                  </button>\n                </div>\n              </div>\n            </form>\n          </adapt-accordion-tab>\n\n          <adapt-accordion-tab\n            [title]=\"'com.bmc.arsys.rx.client.admin.summarization-testing.record-summarization.title' | translate\"\n            [isOpen]=\"true\"\n            rx-id=\"record-summarization\"\n          >\n            <form [formGroup]=\"recordSummarizationTestingForm\">\n              <div class=\"row\">\n                <div class=\"col-md-5\">\n                  <adapt-rx-control-label\n                    label=\"{{\n                      'com.bmc.arsys.rx.client.admin.summarization-testing.summarization-options.label' | translate\n                    }}\"\n                    class=\"mb-2 d-block\"\n                  ></adapt-rx-control-label>\n                  <rx-definition-picker\n                    [options]=\"recordDefinitionPickerOptions\"\n                    formControlName=\"recordDefinition\"\n                    rx-id=\"record-definition\"\n                    required=\"true\"\n                    class=\"form-group d-block\"\n                  >\n                  </rx-definition-picker>\n\n                  <adapt-rx-select\n                    [options]=\"textInputFieldOptions\"\n                    label=\"{{\n                      'com.bmc.arsys.rx.client.admin.summarization-testing.text-input-field.label' | translate\n                    }}\"\n                    name=\"textInputField\"\n                    [optionFormatter]=\"optionFormatter\"\n                    formControlName=\"textInputField\"\n                    rx-id=\"text-input-field\"\n                    class=\"form-group d-block\"\n                    [tooltip]=\"{\n                      iconName: 'question_circle_o',\n                      content:\n                        'com.bmc.arsys.rx.client.admin.summarization-testing.text-input-field.tooltip' | translate,\n                      placement: 'left',\n                      popoverMode: true\n                    }\"\n                  ></adapt-rx-select>\n\n                  <adapt-rx-select\n                    [options]=\"summaryOutputFieldOptions\"\n                    label=\"{{\n                      'com.bmc.arsys.rx.client.admin.summarization-testing.summary-output-field.label' | translate\n                    }}\"\n                    name=\"summaryOutputField\"\n                    [optionFormatter]=\"optionFormatter\"\n                    formControlName=\"summaryOutputField\"\n                    rx-id=\"summary-output-field\"\n                    class=\"form-group d-block\"\n                  ></adapt-rx-select>\n\n                  <adapt-rx-select\n                    formControlName=\"source\"\n                    [options]=\"dataSourceOptions\"\n                    name=\"source\"\n                    rx-id=\"data-source\"\n                    label=\"{{ 'com.bmc.arsys.rx.client.admin.summarization-testing.data-source.label' | translate }}\"\n                    class=\"form-group d-block\"\n                  >\n                  </adapt-rx-select>\n\n                  <div class=\"d-flex flex-wrap\">\n                    <div class=\"flex-grow-1 mr-2 summarization-percentage\">\n                      <adapt-rx-counter\n                        [formControl]=\"recordSummarizationTestingForm.controls.summarizationPercentage\"\n                        label=\"{{\n                          'com.bmc.arsys.rx.client.admin.summarization-testing.summarization-percentage.label'\n                            | translate\n                        }}\"\n                        rx-id=\"summarization-percentage\"\n                        required\n                        adaptRange\n                        [min]=\"1\"\n                        [max]=\"50\"\n                        [tooltip]=\"{\n                          iconName: 'question_circle_o',\n                          content:\n                            'com.bmc.arsys.rx.client.admin.summarization-testing.summarization-percentage.tooltip'\n                            | translate,\n                          placement: 'top',\n                          popoverMode: true\n                        }\"\n                      ></adapt-rx-counter>\n                    </div>\n                    <div>\n                      <button\n                        adapt-button\n                        btn-type=\"primary\"\n                        type=\"button\"\n                        class=\"mr-2 button-margin-top\"\n                        rx-id=\"summarize-button\"\n                        (click)=\"summarizeUsingRecordInstance()\"\n                        [disabled]=\"isSummarizeButtonDisabled()\"\n                        [adaptInlineLoader]=\"isRecordSummarizationInProgress\"\n                      >\n                        {{ 'com.bmc.arsys.rx.client.admin.summarization-testing.summarize.button.label' | translate }}\n                      </button>\n                    </div>\n                    <div>\n                      <button\n                        adapt-button\n                        btn-type=\"secondary\"\n                        type=\"button\"\n                        rx-id=\"reset-button\"\n                        class=\"d-icon-reply button-margin-top\"\n                        (click)=\"resetRecordSummarizationTestingForm()\"\n                      >\n                        {{ 'com.bmc.arsys.rx.client.common.reset.label' | translate }}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n                <div class=\"col-md-7 d-flex flex-column\">\n                  <adapt-alert\n                    [config]=\"{\n                      title: '',\n                      content:\n                        'com.bmc.arsys.rx.client.admin.summarization-testing.select-records-alert.message' | translate,\n                      type: 'inline',\n                      variant: 'info'\n                    }\"\n                    adaptPopover=\"{{\n                      'com.bmc.arsys.rx.client.admin.summarization-testing.select-records-alert.tooltip' | translate\n                    }}\"\n                  >\n                  </adapt-alert>\n                  <rx-record-grid\n                    rx-id=\"record-grid\"\n                    #recordGrid\n                    [config]=\"gridConfig\"\n                    *ngIf=\"shouldShowGrid\"\n                    class=\"record-summarization-grid form-group\"\n                  ></rx-record-grid>\n                </div>\n              </div>\n            </form>\n          </adapt-accordion-tab>\n        </adapt-accordion>\n      </div>\n    </div>\n  </ng-template>\n</rx-admin-settings>\n\n<ng-template #viewSummarizationDetailsTemplate let-close=\"close\">\n  <div class=\"dp-content\">\n    <div class=\"row pt-4 px-4 pb-1 mr-0\">\n      <div class=\"col-12 form-inline\">\n        <button\n          type=\"button\"\n          adapt-button\n          btn-type=\"secondary\"\n          rx-id=\"previous-button\"\n          class=\"mr-2 d-icon-left-angle_left\"\n          (click)=\"previous()\"\n          [disabled]=\"!index\"\n          size=\"small\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.previous-step.label' | translate }}\n        </button>\n        <button\n          type=\"button\"\n          adapt-button\n          btn-type=\"secondary\"\n          rx-id=\"next-button\"\n          class=\"mr-2 d-icon-right-angle_right\"\n          (click)=\"next()\"\n          [disabled]=\"index === recordGridComponent.api.getSelectedRows().length - 1\"\n          size=\"small\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.next-step.label' | translate }}\n        </button>\n\n        <div class=\"mr-2 pl-3\">\n          Summarization {{ index + 1 }} of {{ recordGridComponent.api.getSelectedRows().length }}\n        </div>\n      </div>\n    </div>\n    <div class=\"dp-body\">\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <adapt-rx-control-label\n            label=\"{{ 'Text input: ' + recordSummarizationTestingForm.get('textInputField').value[0].name }}\"\n            class=\"form-group\"\n          ></adapt-rx-control-label>\n\n          <div class=\"border-secondary form-group\" rx-id=\"text-input\">\n            {{ summarizedRecords.data[index][recordSummarizationTestingForm.get('textInputField').value[0].id] }}\n          </div>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-md-12\">\n          <adapt-rx-control-label\n            class=\"form-group\"\n            label=\"{{ 'Summary output: ' + recordSummarizationTestingForm.get('summaryOutputField').value[0].name }}\"\n          ></adapt-rx-control-label>\n\n          <div class=\"border-secondary form-group\" rx-id=\"summary-output\">\n            {{ summarizedRecords.data[index][recordSummarizationTestingForm.get('summaryOutputField').value[0].id] }}\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"dp-footer\">\n      <button type=\"button\" adapt-button (click)=\"close()\" btn-type=\"secondary\" rx-id=\"close-button\">\n        {{ 'com.bmc.arsys.rx.client.common.close.label' | translate }}\n      </button>\n    </div>\n  </div>\n</ng-template>\n", styles: [".summarized-details{max-height:200px;overflow-y:auto}.record-summarization-grid{height:300px}.button-margin-top{margin-top:1.5rem}.summarization-percentage{max-width:200px}\n"], components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1__namespace$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptRxTextareaComponent, selector: "adapt-rx-textarea", inputs: ["rows", "maxRows", "autocomplete", "placeholder", "size", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i4__namespace$1.RxDefinitionPickerComponent, selector: "rx-definition-picker", inputs: ["options", "isDisabled"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$1.AdaptRangeValidatorDirective, selector: "[adaptRange][ngModel],[adaptRange][formControl]", inputs: ["adaptRange", "adaptRangeMessageFn"] }, { type: i1__namespace$3.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i1__namespace$1.AdaptInlineStandaloneDirective, selector: "[adaptInlineLoader]", inputs: ["adaptInlineLoader", "activeText"] }, { type: i11__namespace.CdkCopyToClipboard, selector: "[cdkCopyToClipboard]", inputs: ["cdkCopyToClipboard", "cdkCopyToClipboardAttempts"], outputs: ["cdkCopyToClipboardCopied"] }, { type: i1__namespace$1.AdaptPopoverDirective, selector: "[adaptPopover]", inputs: ["adaptPopover", "popoverTitle", "placement", "fallbackPlacement", "triggers", "container", "appendToBody", "closeBtn", "popupDelay", "disablePopover", "popoverClass", "autoClose", "closeOnOutOfView", "maxWidth", "minWidth"], outputs: ["shown", "hidden"], exportAs: ["adaptPopover"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SummarizationTestingAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-summarization-testing',
                        templateUrl: './summarization-testing.component.html',
                        styleUrls: ['./summarization-testing.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }, { type: RxSummarizationTestingService }, { type: i2__namespace.RxNotificationService }, { type: i3__namespace$2.RxRecordDefinitionCacheService }, { type: i3__namespace$2.RxRecordInstanceDataPageService }, { type: i1__namespace$1.AdaptDockedPanelService }, { type: i2__namespace.RxSystemConfigurationService }, { type: i3__namespace.RxJsonParserService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { recordGridComponent: [{
                    type: i0.ViewChild,
                    args: ['recordGrid']
                }], viewSummarizationDetailsTemplate: [{
                    type: i0.ViewChild,
                    args: ['viewSummarizationDetailsTemplate', { static: true }]
                }] } });

    var SummarizationTestingRegistrationModule = /** @class */ (function () {
        function SummarizationTestingRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-summarization-testing',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(SummarizationTestingAdminComponent),
                name: 'Summarization testing',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return SummarizationTestingRegistrationModule;
    }());
    SummarizationTestingRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SummarizationTestingRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SummarizationTestingRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SummarizationTestingRegistrationModule, declarations: [SummarizationTestingAdminComponent], imports: [i4.AdminSettingsModule,
            i1$2.AdaptAccordionModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptRxTextareaModule,
            i1$2.AdaptRxSelectModule,
            i1$2.AdaptRxCounterModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptRxLabelModule,
            i1$2.AdaptAlertModule,
            i8.CommonModule,
            i1.ReactiveFormsModule,
            i4.RxDefinitionPickerModule,
            i7.RecordGridModule,
            i11.ClipboardModule,
            i1$2.AdaptPopoverModule,
            i1$2.AdaptRxValidatorsModule,
            i4$1.TranslateModule,
            i1$2.AdaptBusyModule] });
    SummarizationTestingRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SummarizationTestingRegistrationModule, imports: [[
                i4.AdminSettingsModule,
                i1$2.AdaptAccordionModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptRxTextareaModule,
                i1$2.AdaptRxSelectModule,
                i1$2.AdaptRxCounterModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptRxLabelModule,
                i1$2.AdaptAlertModule,
                i8.CommonModule,
                i1.ReactiveFormsModule,
                i4.RxDefinitionPickerModule,
                i7.RecordGridModule,
                i11.ClipboardModule,
                i1$2.AdaptPopoverModule,
                i1$2.AdaptRxValidatorsModule,
                i4$1.TranslateModule,
                i1$2.AdaptBusyModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SummarizationTestingRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [SummarizationTestingAdminComponent],
                        imports: [
                            i4.AdminSettingsModule,
                            i1$2.AdaptAccordionModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptRxTextareaModule,
                            i1$2.AdaptRxSelectModule,
                            i1$2.AdaptRxCounterModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptRxLabelModule,
                            i1$2.AdaptAlertModule,
                            i8.CommonModule,
                            i1.ReactiveFormsModule,
                            i4.RxDefinitionPickerModule,
                            i7.RecordGridModule,
                            i11.ClipboardModule,
                            i1$2.AdaptPopoverModule,
                            i1$2.AdaptRxValidatorsModule,
                            i4$1.TranslateModule,
                            i1$2.AdaptBusyModule
                        ],
                        entryComponents: [SummarizationTestingAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RX_TONE_ANALYSIS_TESTING = {
        languageOptions: [
            { id: 'en', name: 'en' },
            { id: 'fr', name: 'fr' }
        ],
        userEngagementResourceType: 'com.bmc.arsys.rx.application.cognitive.command.AnalyzeCustomerEngagementToneCommand',
        documentEngagementResourceType: 'com.bmc.arsys.rx.application.cognitive.command.AnalyzeTextToneCommand',
        systemSettingKeys: {
            toneScoreThreshold: 'Tone-Score-Threshold'
        }
    };

    var DocumentToneAnalysisComponent = /** @class */ (function () {
        function DocumentToneAnalysisComponent(rxCommandFactoryService, rxSystemConfigurationService) {
            this.rxCommandFactoryService = rxCommandFactoryService;
            this.rxSystemConfigurationService = rxSystemConfigurationService;
            this.languageOptions = RX_TONE_ANALYSIS_TESTING.languageOptions;
            this.language = [];
            this.defaultToneScoreThreshold = 0.5;
        }
        DocumentToneAnalysisComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.rxSystemConfigurationService
                .getConfiguration(RX_TONE_ANALYSIS_TESTING.systemSettingKeys.toneScoreThreshold)
                .pipe(operators.finalize(function () { return _this.reset(); }))
                .subscribe(function (data) {
                _this.defaultToneScoreThreshold = data.value ? lodash.toNumber(data.value) : 0.5;
            });
        };
        DocumentToneAnalysisComponent.prototype.clearDocumentText = function () {
            this.documentText = null;
        };
        DocumentToneAnalysisComponent.prototype.optionFormatter = function (option) {
            return option.name;
        };
        DocumentToneAnalysisComponent.prototype.setDefaultThreshold = function () {
            this.toneScoreThreshold = this.defaultToneScoreThreshold;
        };
        DocumentToneAnalysisComponent.prototype.analyzeTone = function () {
            var _this = this;
            this.rxCommandFactoryService
                .forResourceType(RX_TONE_ANALYSIS_TESTING.documentEngagementResourceType)
                .execute({
                resourceType: RX_TONE_ANALYSIS_TESTING.documentEngagementResourceType,
                language: lodash.get(this.language[0], 'id'),
                text: this.documentText,
                containsHTML: this.containsHtml,
                sentenceLevelAnalysis: this.includeSentenceLevelAnalysis,
                toneScoreThreshold: this.toneScoreThreshold
            })
                .subscribe(function (response) {
                _this.extractedToneData = response;
            });
        };
        DocumentToneAnalysisComponent.prototype.reset = function () {
            this.language = [RX_TONE_ANALYSIS_TESTING.languageOptions[0]];
            this.documentText = null;
            this.toneScoreThreshold = this.defaultToneScoreThreshold;
            this.containsHtml = false;
            this.includeSentenceLevelAnalysis = false;
            this.extractedToneData = null;
            this.documentToneAnalysisForm.form.markAsPristine();
        };
        DocumentToneAnalysisComponent.prototype.isAnalyzeToneButtonDisabled = function () {
            return this.documentToneAnalysisForm.pristine || this.documentToneAnalysisForm.invalid;
        };
        DocumentToneAnalysisComponent.prototype.isResetButtonDisabled = function () {
            return this.documentToneAnalysisForm.pristine && lodash.isNil(this.documentText);
        };
        return DocumentToneAnalysisComponent;
    }());
    DocumentToneAnalysisComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DocumentToneAnalysisComponent, deps: [{ token: i2__namespace.RxCommandFactoryService }, { token: i2__namespace.RxSystemConfigurationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DocumentToneAnalysisComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: DocumentToneAnalysisComponent, selector: "rx-document-tone-analysis", viewQueries: [{ propertyName: "documentToneAnalysisForm", first: true, predicate: ["documentToneAnalysisForm"], descendants: true, read: i1.NgForm, static: true }], ngImport: i0__namespace, template: "<form #documentToneAnalysisForm=\"ngForm\">\n  <div class=\"row mb-4\">\n    <div class=\"col-md-3\">\n      <adapt-rx-select\n        rx-id=\"language\"\n        name=\"language\"\n        [(ngModel)]=\"language\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.language.label' | translate }}\"\n        [options]=\"languageOptions\"\n        [optionFormatter]=\"optionFormatter\"\n      ></adapt-rx-select>\n    </div>\n\n    <div class=\"col-md-3 contains-html\">\n      <adapt-rx-checkbox\n        rx-id=\"document-text-contains-html\"\n        name=\"containsHtml\"\n        [(ngModel)]=\"containsHtml\"\n        label=\"{{\n          'com.bmc.arsys.rx.client.admin.tone-analysis-testing.document-text-contains-html.label' | translate\n        }}\"\n      ></adapt-rx-checkbox>\n    </div>\n\n    <div class=\"col-md-6\">\n      <adapt-rx-control-label\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.document-tone.label' | translate }}\"\n      ></adapt-rx-control-label>\n      <div class=\"mt-1\">\n        <adapt-badge variant=\"info\" *ngIf=\"!extractedToneData\">\n          {{ 'com.bmc.arsys.rx.client.common.none.label' | translate }}\n        </adapt-badge>\n        <adapt-badge variant=\"info\" class=\"mr-1\" *ngFor=\"let score of extractedToneData?.documentTone?.scores\">\n          <b>{{ score.toneName }}</b> ({{ score.score }})\n        </adapt-badge>\n      </div>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-6 form-group\">\n      <button\n        rx-id=\"clear-button\"\n        type=\"button\"\n        adapt-button\n        btn-type=\"tertiary\"\n        class=\"p-0 float-right\"\n        (click)=\"clearDocumentText()\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.clear.label' | translate }}\n      </button>\n\n      <adapt-rx-textarea\n        rx-id=\"document-text\"\n        name=\"documentText\"\n        [(ngModel)]=\"documentText\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.document-text.label' | translate }}\"\n        placeholder=\"Type or paste document text here\"\n        [rows]=\"12\"\n        required\n      ></adapt-rx-textarea>\n\n      <div class=\"form-group pt-3\">\n        <button\n          type=\"button\"\n          adapt-button\n          btn-type=\"tertiary\"\n          rx-id=\"set-to-default-button\"\n          class=\"p-0 float-right\"\n          (click)=\"setDefaultThreshold()\"\n        >\n          {{ 'com.bmc.arsys.rx.client.admin.set-to-default.label' | translate }}\n        </button>\n\n        <adapt-rx-counter\n          rx-id=\"tone-score-threshold\"\n          name=\"toneScoreThresholdField\"\n          [(ngModel)]=\"toneScoreThreshold\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.tone-score-threshold.label' | translate }}\"\n          [max]=\"1.0\"\n          [min]=\"0.5\"\n          [step]=\"0.1\"\n          [size]=\"'small'\"\n          adaptRequired\n          [tooltip]=\"{\n            iconName: 'question_circle_o',\n            content: 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.tone-score-threshold.tooltip' | translate,\n            placement: 'right',\n            popoverMode: true\n          }\"\n        >\n        </adapt-rx-counter>\n      </div>\n\n      <div class=\"form-group\">\n        <adapt-rx-switch\n          rx-id=\"include-sentence-level-analysis\"\n          name=\"includeSentenceLevelAnalysis\"\n          [(ngModel)]=\"includeSentenceLevelAnalysis\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.admin.tone-analysis-testing.include-sentence-level-analysis.label' | translate\n          }}\"\n        ></adapt-rx-switch>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-12 form-group\">\n          <button\n            class=\"mr-2 d-icon-left-check_adapt\"\n            adapt-button\n            btn-type=\"primary\"\n            type=\"button\"\n            rx-id=\"analyze-tone-button\"\n            (click)=\"analyzeTone()\"\n            [disabled]=\"isAnalyzeToneButtonDisabled()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.analyze-tone.label' | translate }}\n          </button>\n\n          <button\n            class=\"mr-2 d-icon-left-undo\"\n            adapt-button\n            btn-type=\"secondary\"\n            type=\"button\"\n            rx-id=\"reset-button\"\n            (click)=\"reset()\"\n            [disabled]=\"isResetButtonDisabled()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.reset.label' | translate }}\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"col-md-6 form-group\">\n      <div rx-id=\"sentences-tone\" name=\"sentenceTone\">\n        <adapt-rx-control-label label=\"Sentences tone\"></adapt-rx-control-label>\n        <div class=\"sentences-tones form-control\">\n          <div class=\"sentences-tone\" *ngFor=\"let sentenceTone of extractedToneData?.sentencesTone\">\n            <div class=\"sentence\">{{ sentenceTone.text }}</div>\n            <div>\n              <adapt-badge class=\"mr-1\" variant=\"info\" *ngFor=\"let score of sentenceTone?.scores\">\n                <b>{{ score.toneName }}</b> ({{ score.score }})</adapt-badge\n              >\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</form>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-select[rx-id=user-language]{max-width:400px;min-width:auto}.sentences-tones{border:1px solid #d6d7d8;height:430px;overflow-y:auto}.sentences-tones .sentences-tone{padding-bottom:10px}.sentences-tones .sentences-tone .sentence:before{content:open-quote}.sentences-tones .sentences-tone .sentence:after{content:close-quote}.contains-html{display:flex;justify-content:center;align-content:center;flex-direction:column;margin-top:1.9%}\n"], components: [{ type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptRxCheckboxComponent, selector: "adapt-rx-checkbox", inputs: ["value", "checked", "indeterminate"], outputs: ["indeterminateChange"] }, { type: i1__namespace$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace$1.AdaptBadgeComponent, selector: "adapt-badge", inputs: ["animate", "showAlert", "variant", "alertVariant", "customCls"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace$1.AdaptRxTextareaComponent, selector: "adapt-rx-textarea", inputs: ["rows", "maxRows", "autocomplete", "placeholder", "size", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxSwitchComponent, selector: "adapt-rx-switch", inputs: ["value", "size", "isLabelBefore", "checked"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: DocumentToneAnalysisComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-document-tone-analysis',
                        templateUrl: './document-tone-analysis.component.html',
                        styleUrls: ['./document-tone-analysis.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxCommandFactoryService }, { type: i2__namespace.RxSystemConfigurationService }]; }, propDecorators: { documentToneAnalysisForm: [{
                    type: i0.ViewChild,
                    args: ['documentToneAnalysisForm', { static: true, read: i1.NgForm }]
                }] } });

    var UserEngagementToneAnalysisComponent = /** @class */ (function () {
        function UserEngagementToneAnalysisComponent(rxCommandFactoryService, rxSystemConfigurationService) {
            this.rxCommandFactoryService = rxCommandFactoryService;
            this.rxSystemConfigurationService = rxSystemConfigurationService;
            this.languageOptions = RX_TONE_ANALYSIS_TESTING.languageOptions;
            this.defaultToneScoreThreshold = 0.5;
        }
        UserEngagementToneAnalysisComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.rxSystemConfigurationService
                .getConfiguration(RX_TONE_ANALYSIS_TESTING.systemSettingKeys.toneScoreThreshold)
                .pipe(operators.finalize(function () { return _this.reset(); }))
                .subscribe(function (data) {
                _this.defaultToneScoreThreshold = data.value ? lodash.toNumber(data.value) : 0.5;
            });
        };
        UserEngagementToneAnalysisComponent.prototype.clearUtterances = function () {
            this.utterances = null;
        };
        UserEngagementToneAnalysisComponent.prototype.setDefaultThreshold = function () {
            this.toneScoreThreshold = this.defaultToneScoreThreshold;
        };
        UserEngagementToneAnalysisComponent.prototype.optionFormatter = function (option) {
            return option.name;
        };
        UserEngagementToneAnalysisComponent.prototype.analyzeTone = function () {
            var _this = this;
            var utterances = lodash.map(lodash.compact(this.utterances.split('\n')), function (utterance) {
                return {
                    text: utterance
                };
            });
            this.rxCommandFactoryService
                .forResourceType(RX_TONE_ANALYSIS_TESTING.userEngagementResourceType)
                .execute({
                resourceType: RX_TONE_ANALYSIS_TESTING.userEngagementResourceType,
                language: this.language.id,
                utterances: utterances,
                toneScoreThreshold: this.toneScoreThreshold
            })
                .subscribe(function (response) {
                _this.utteranceTonesData = response;
            });
        };
        UserEngagementToneAnalysisComponent.prototype.reset = function () {
            this.toneScoreThreshold = this.defaultToneScoreThreshold;
            this.language = [RX_TONE_ANALYSIS_TESTING.languageOptions[0]];
            this.utterances = null;
            this.utteranceTonesData = null;
            this.userEngagementToneAnalysisForm.form.markAsPristine();
        };
        UserEngagementToneAnalysisComponent.prototype.isAnalyzeToneButtonDisabled = function () {
            return this.userEngagementToneAnalysisForm.pristine || this.userEngagementToneAnalysisForm.invalid;
        };
        UserEngagementToneAnalysisComponent.prototype.isResetButtonDisabled = function () {
            return this.userEngagementToneAnalysisForm.pristine && lodash.isNil(this.utterances);
        };
        return UserEngagementToneAnalysisComponent;
    }());
    UserEngagementToneAnalysisComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: UserEngagementToneAnalysisComponent, deps: [{ token: i2__namespace.RxCommandFactoryService }, { token: i2__namespace.RxSystemConfigurationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    UserEngagementToneAnalysisComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: UserEngagementToneAnalysisComponent, selector: "rx-user-engagement-tone-analysis", viewQueries: [{ propertyName: "userEngagementToneAnalysisForm", first: true, predicate: ["userEngagementToneAnalysisForm"], descendants: true, read: i1.NgForm, static: true }], ngImport: i0__namespace, template: "<form #userEngagementToneAnalysisForm=\"ngForm\">\n  <div class=\"row form-group\">\n    <div class=\"col-md-3\">\n      <adapt-rx-select\n        rx-id=\"language\"\n        name=\"language\"\n        [(ngModel)]=\"language\"\n        [options]=\"languageOptions\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.language.label' | translate }}\"\n        [optionFormatter]=\"optionFormatter\"\n      ></adapt-rx-select>\n    </div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <button\n        rx-id=\"clear-button\"\n        type=\"button\"\n        adapt-button\n        btn-type=\"tertiary\"\n        class=\"p-0 float-right\"\n        (click)=\"clearUtterances()\"\n      >\n        {{ 'com.bmc.arsys.rx.client.common.clear.label' | translate }}\n      </button>\n\n      <adapt-rx-textarea\n        rx-id=\"utterances\"\n        name=\"utterances\"\n        [(ngModel)]=\"utterances\"\n        label=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.utterances.label' | translate }}\"\n        placeholder=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.utterances.placeholder' | translate }}\"\n        [rows]=\"16\"\n        required\n        [tooltip]=\"{\n          iconName: 'question_circle_o',\n          content: 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.utterances.tooltip' | translate,\n          placement: 'right',\n          popoverMode: true\n        }\"\n      ></adapt-rx-textarea>\n\n      <div class=\"form-group pt-3\">\n        <button type=\"button\" adapt-button btn-type=\"tertiary\" class=\"p-0 float-right\" (click)=\"setDefaultThreshold()\">\n          {{ 'com.bmc.arsys.rx.client.admin.set-to-default.label' | translate }}\n        </button>\n\n        <adapt-rx-counter\n          rx-id=\"tone-score-threshold\"\n          name=\"toneScoreThreshold\"\n          [(ngModel)]=\"toneScoreThreshold\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.tone-score-threshold.label' | translate }}\"\n          [max]=\"1.0\"\n          [min]=\"0.5\"\n          [step]=\"0.1\"\n          [size]=\"'small'\"\n          [tooltip]=\"{\n            iconName: 'question_circle_o',\n            content: 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.tone-score-threshold.tooltip' | translate,\n            placement: 'right',\n            popoverMode: true\n          }\"\n        >\n        </adapt-rx-counter>\n      </div>\n\n      <div class=\"my-4\">\n        <button\n          class=\"mr-2 d-icon-left-check_adapt\"\n          adapt-button\n          btn-type=\"primary\"\n          type=\"button\"\n          rx-id=\"analyze-tone-button\"\n          (click)=\"analyzeTone()\"\n          [disabled]=\"isAnalyzeToneButtonDisabled()\"\n        >\n          {{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.analyze-tone.label' | translate }}\n        </button>\n\n        <button\n          [disabled]=\"true\"\n          class=\"mr-2 d-icon-left-undo\"\n          adapt-button\n          btn-type=\"secondary\"\n          type=\"button\"\n          rx-id=\"reset-button\"\n          (click)=\"reset()\"\n          [disabled]=\"isResetButtonDisabled()\"\n        >\n          {{ 'com.bmc.arsys.rx.client.common.reset.label' | translate }}\n        </button>\n      </div>\n    </div>\n\n    <div class=\"col-md-6 mb-4\">\n      <div rx-id=\"utterance-tone\" name=\"utteranceTones\">\n        <adapt-rx-control-label\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.utterances-tone.label' | translate }}\"\n        ></adapt-rx-control-label>\n        <div class=\"sentences-tones form-control\">\n          <div class=\"sentences-tone\" *ngFor=\"let sentenceTone of utteranceTonesData?.utterancesTone\">\n            <div class=\"sentence\">{{ sentenceTone.text }}</div>\n            <div>\n              <adapt-badge variant=\"info\" class=\"mr-1\" *ngFor=\"let score of sentenceTone?.scores\">\n                <b>{{ score.toneName }}</b> ({{ score.score }})</adapt-badge\n              >\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</form>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}.sentences-tones{border:1px solid #d6d7d8;height:480px;overflow-y:auto}.sentences-tones .sentences-tone{padding-bottom:10px}.sentences-tones .sentences-tone .sentence:before{content:open-quote}.sentences-tones .sentences-tone .sentence:after{content:close-quote}adapt-rx-select{max-width:400px;min-width:auto}\n"], components: [{ type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i1__namespace$1.AdaptRxTextareaComponent, selector: "adapt-rx-textarea", inputs: ["rows", "maxRows", "autocomplete", "placeholder", "size", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxControlLabelComponent, selector: "adapt-rx-control-label", inputs: ["for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"] }, { type: i1__namespace$1.AdaptBadgeComponent, selector: "adapt-badge", inputs: ["animate", "showAlert", "variant", "alertVariant", "customCls"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: UserEngagementToneAnalysisComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-user-engagement-tone-analysis',
                        templateUrl: './user-engagement-tone-analysis.component.html',
                        styleUrls: ['./user-engagement-tone-analysis.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.RxCommandFactoryService }, { type: i2__namespace.RxSystemConfigurationService }]; }, propDecorators: { userEngagementToneAnalysisForm: [{
                    type: i0.ViewChild,
                    args: ['userEngagementToneAnalysisForm', { static: true, read: i1.NgForm }]
                }] } });

    var ToneAnalysisTestingAdminComponent = /** @class */ (function () {
        function ToneAnalysisTestingAdminComponent() {
        }
        return ToneAnalysisTestingAdminComponent;
    }());
    ToneAnalysisTestingAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ToneAnalysisTestingAdminComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ToneAnalysisTestingAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: ToneAnalysisTestingAdminComponent, selector: "rx-tone-analysis-testing", ngImport: i0__namespace, template: "<rx-admin-settings header=\"Tone analysis testing\">\n  <adapt-tabset [fullHeight]=\"true\">\n    <adapt-tab-panel\n      adapt-tab-title=\"{{\n        'com.bmc.arsys.rx.client.admin.tone-analysis-testing.document-tone-analysis.title' | translate\n      }}\"\n    >\n      <rx-document-tone-analysis></rx-document-tone-analysis>\n    </adapt-tab-panel>\n    <adapt-tab-panel\n      adapt-tab-title=\"{{\n        'com.bmc.arsys.rx.client.admin.tone-analysis-testing.user-engagement-tone-analysis.title' | translate\n      }}\"\n    >\n      <rx-user-engagement-tone-analysis></rx-user-engagement-tone-analysis>\n    </adapt-tab-panel>\n  </adapt-tabset>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptTabsComponent, selector: "adapt-tabset", inputs: ["showTabToolbar", "customCssTabContent", "fullHeight", "texts", "enableDnD", "customClassTabList", "allow-tabs-adding", "id", "testID", "dropdown-title", "fadeColor", "carouselMode", "justify", "type", "tab-active"], outputs: ["tab-index-closed", "tab-active-changed", "add-tab-clicked", "tabClicked", "tabDropped"], exportAs: ["adaptTabset"] }, { type: i1__namespace$1.AdaptTabsPanelComponent, selector: "adapt-tab-panel, div[tab-panel]", inputs: ["isActive", "badge-type", "animateBadge", "showBadgeAlert", "badgeAlertVariant", "badgeCustomClass", "adapt-tab-title", "disabled", "isHidden", "icon", "subtext", "icon-right", "icon-close", "aria-label", "aria-labelledby", "kebabMenu", "id", "renderContentWhenInactive", "badge"] }, { type: DocumentToneAnalysisComponent, selector: "rx-document-tone-analysis" }, { type: UserEngagementToneAnalysisComponent, selector: "rx-user-engagement-tone-analysis" }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ToneAnalysisTestingAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-tone-analysis-testing',
                        templateUrl: './tone-analysis-testing.component.html'
                    }]
            }] });

    var ToneAnalysisTestingRegistrationModule = /** @class */ (function () {
        function ToneAnalysisTestingRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-tone-analysis-testing',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(ToneAnalysisTestingAdminComponent),
                name: 'Tone analysis testing',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return ToneAnalysisTestingRegistrationModule;
    }());
    ToneAnalysisTestingRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ToneAnalysisTestingRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ToneAnalysisTestingRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ToneAnalysisTestingRegistrationModule, declarations: [ToneAnalysisTestingAdminComponent, DocumentToneAnalysisComponent, UserEngagementToneAnalysisComponent], imports: [i4.AdminSettingsModule,
            i1$2.AdaptTabsModule,
            i1$2.AdaptRxSelectModule,
            i1$2.AdaptRxCheckboxModule,
            i1$2.AdaptRxTextareaModule,
            i1$2.AdaptRxTextareaModule,
            i1$2.AdaptRxLabelModule,
            i1$2.AdaptRxCounterModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptRxSwitchModule,
            i1$2.AdaptBadgeModule,
            i8.CommonModule,
            i1.FormsModule,
            i1.ReactiveFormsModule,
            i4$1.TranslateModule] });
    ToneAnalysisTestingRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ToneAnalysisTestingRegistrationModule, imports: [[
                i4.AdminSettingsModule,
                i1$2.AdaptTabsModule,
                i1$2.AdaptRxSelectModule,
                i1$2.AdaptRxCheckboxModule,
                i1$2.AdaptRxTextareaModule,
                i1$2.AdaptRxTextareaModule,
                i1$2.AdaptRxLabelModule,
                i1$2.AdaptRxCounterModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptRxSwitchModule,
                i1$2.AdaptBadgeModule,
                i8.CommonModule,
                i1.FormsModule,
                i1.ReactiveFormsModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: ToneAnalysisTestingRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ToneAnalysisTestingAdminComponent, DocumentToneAnalysisComponent, UserEngagementToneAnalysisComponent],
                        imports: [
                            i4.AdminSettingsModule,
                            i1$2.AdaptTabsModule,
                            i1$2.AdaptRxSelectModule,
                            i1$2.AdaptRxCheckboxModule,
                            i1$2.AdaptRxTextareaModule,
                            i1$2.AdaptRxTextareaModule,
                            i1$2.AdaptRxLabelModule,
                            i1$2.AdaptRxCounterModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptRxSwitchModule,
                            i1$2.AdaptBadgeModule,
                            i8.CommonModule,
                            i1.FormsModule,
                            i1.ReactiveFormsModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [ToneAnalysisTestingAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RX_VIRTUAL_CHAT_CONFIGURATION = {
        virtualChatConfigName: 'Virtual Chat Configuration',
        virtualChatAdditionalSettingsName: 'Virtual Chat Additional Settings',
        pingLiveChatServiceCommand: 'com.bmc.arsys.rx.application.cognitive.command.PingLiveChatServiceCommand',
        virtualChatConfigurationSaved: 'Live Chat configuration saved successfully.',
        virtualChatVerifyAdministratorKey: 'Unable to retrieve chat topics. Please verify that the Live Chat administrator key is correct.',
        virtualChat: {
            settingNames: {
                url: 'URL',
                userName: 'Username',
                password: 'Password',
                arServerUrl: 'ARServer-URL'
            }
        },
        virtualChatAdditionalSetting: {
            settingNames: {
                adminKey: 'AdminKey',
                company: 'Company'
            }
        }
    };

    var VirtualChatConfigurationAdminComponent = /** @class */ (function (_super) {
        __extends(VirtualChatConfigurationAdminComponent, _super);
        function VirtualChatConfigurationAdminComponent(formBuilder, rxAdminSettingsService, rxNotificationService, rxModalService, rxCognitiveServiceService, rxLiveAgentSettingsService, translateService) {
            var _this = _super.call(this) || this;
            _this.formBuilder = formBuilder;
            _this.rxAdminSettingsService = rxAdminSettingsService;
            _this.rxNotificationService = rxNotificationService;
            _this.rxModalService = rxModalService;
            _this.rxCognitiveServiceService = rxCognitiveServiceService;
            _this.rxLiveAgentSettingsService = rxLiveAgentSettingsService;
            _this.translateService = translateService;
            _this.connectionTestStatus = i1$1.ConnectionTestStatus.Invalid;
            _this.isNewVirtualChatSetting = false;
            _this.isNewVirtualChatAdditionalSetting = false;
            _this.virtualChatComponentSettingsValues = [];
            _this.additionalSettingsComponentSettingsValues = [];
            return _this;
        }
        VirtualChatConfigurationAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.notifyPropertyChanged('api', {
                isDirty: function () { return _this.virtualChatConfigurationForm.dirty || _this.virtualChatAdditionalSettingsForm.dirty; }
            });
            this.virtualChatConfigurationForm = this.formBuilder.group({
                virtualChatUrl: '',
                username: '',
                password: '',
                systemServerUrl: ''
            });
            this.virtualChatAdditionalSettingsForm = this.formBuilder.group({
                administratorKey: '',
                company: ''
            });
            this.busy = rxjs.forkJoin({
                virtualChatComponentSettings: this.getVirtualChatComponentSettings(),
                additionalSettingsComponentSettings: this.getAdditionalSettingsComponentSettings()
            }).subscribe(function (response) {
                _this.isNewVirtualChatSetting = !lodash.get(response.virtualChatComponentSettings, 'values', []).length;
                _this.isNewVirtualChatAdditionalSetting = !lodash.get(response.additionalSettingsComponentSettings, 'values', []).length;
                if (_this.isNewVirtualChatSetting) {
                    _this.virtualChatComponentSettingsValues = lodash.map(lodash.values(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChat.settingNames), function (settingName) { return ({
                        assigneeGroupPermission: null,
                        componentName: RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatConfigName,
                        settingId: null,
                        settingName: settingName,
                        settingValue: null,
                        ownerKeyValue1: null
                    }); });
                }
                else {
                    _this.virtualChatComponentSettingsValues = response.virtualChatComponentSettings.values;
                }
                if (_this.isNewVirtualChatAdditionalSetting) {
                    _this.additionalSettingsComponentSettingsValues = lodash.map(lodash.values(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatAdditionalSetting.settingNames), function (settingName) { return ({
                        assigneeGroupPermission: null,
                        componentName: RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatAdditionalSettingsName,
                        ownerKeyValue1: null,
                        settingId: null,
                        settingName: settingName,
                        settingValue: null
                    }); });
                }
                else {
                    _this.additionalSettingsComponentSettingsValues = response.additionalSettingsComponentSettings.values;
                }
                _this.virtualChatConfigurationForm.patchValue({
                    virtualChatUrl: _this.getValueFromVirtualSetting(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChat.settingNames.url),
                    username: _this.getValueFromVirtualSetting(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChat.settingNames.userName),
                    password: _this.getValueFromVirtualSetting(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChat.settingNames.password),
                    systemServerUrl: _this.getValueFromVirtualSetting(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChat.settingNames.arServerUrl)
                });
                _this.virtualChatAdditionalSettingsForm.patchValue({
                    administratorKey: _this.getValueFromAdditionalSetting(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatAdditionalSetting.settingNames.adminKey),
                    company: _this.getValueFromAdditionalSetting(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatAdditionalSetting.settingNames.company)
                });
            });
            this.virtualChatConfigurationForm.valueChanges.subscribe(function () {
                _this.connectionTestStatus =
                    _this.virtualChatConfigurationForm.pristine || _this.virtualChatConfigurationForm.invalid
                        ? i1$1.ConnectionTestStatus.Invalid
                        : i1$1.ConnectionTestStatus.Unknown;
            });
        };
        VirtualChatConfigurationAdminComponent.prototype.getVirtualChatComponentSettings = function () {
            return this.rxAdminSettingsService.getComponentSettings(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatConfigName, {
                'default-bundle-scope': i2.RX_APPLICATION.settingsBundleId
            });
        };
        VirtualChatConfigurationAdminComponent.prototype.getAdditionalSettingsComponentSettings = function () {
            return this.rxAdminSettingsService.getComponentSettings(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatAdditionalSettingsName, {
                'default-bundle-scope': i2.RX_APPLICATION.settingsBundleId
            });
        };
        VirtualChatConfigurationAdminComponent.prototype.getValueFromAdditionalSetting = function (settingName) {
            return lodash.get(lodash.find(this.additionalSettingsComponentSettingsValues, {
                settingName: settingName
            }), 'settingValue', null);
        };
        VirtualChatConfigurationAdminComponent.prototype.getValueFromVirtualSetting = function (settingName) {
            return lodash.get(lodash.find(this.virtualChatComponentSettingsValues, {
                settingName: settingName
            }), 'settingValue', null);
        };
        VirtualChatConfigurationAdminComponent.prototype.onTestConnection = function () {
            var _this = this;
            var formValue = this.virtualChatConfigurationForm.getRawValue();
            this.rxCognitiveServiceService
                .testConnection({
                resourceType: RX_VIRTUAL_CHAT_CONFIGURATION.pingLiveChatServiceCommand,
                remedyMidTierUrl: formValue.virtualChatUrl,
                arAdministratorUser: formValue.username,
                arAdministratorPassword: formValue.password,
                arSystemServerUrl: formValue.systemServerUrl
            })
                .pipe(operators.catchError(function (error) {
                _this.connectionTestStatus = i1$1.ConnectionTestStatus.Failed;
                return rxjs.throwError(error);
            }))
                .subscribe(function () {
                _this.connectionTestStatus = i1$1.ConnectionTestStatus.Passed;
            });
        };
        VirtualChatConfigurationAdminComponent.prototype.isSaveButtonDisabled = function () {
            return (this.virtualChatConfigurationForm.pristine ||
                this.virtualChatConfigurationForm.invalid ||
                this.connectionTestStatus !== i1$1.ConnectionTestStatus.Passed);
        };
        VirtualChatConfigurationAdminComponent.prototype.setVirtualSettingValue = function (settingName, value) {
            lodash.find(this.virtualChatComponentSettingsValues, {
                settingName: settingName
            }).settingValue = value;
        };
        VirtualChatConfigurationAdminComponent.prototype.saveVirtualChatConfig = function () {
            var _this = this;
            var adminSetting$;
            var formValue = this.virtualChatConfigurationForm.getRawValue();
            this.setVirtualSettingValue(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChat.settingNames.url, formValue.virtualChatUrl);
            this.setVirtualSettingValue(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChat.settingNames.userName, formValue.username);
            this.setVirtualSettingValue(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChat.settingNames.password, formValue.password);
            this.setVirtualSettingValue(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChat.settingNames.arServerUrl, formValue.systemServerUrl);
            if (this.isNewVirtualChatSetting) {
                adminSetting$ = this.rxAdminSettingsService
                    .createComponentSettings(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatConfigName, this.virtualChatComponentSettingsValues)
                    .pipe(operators.switchMap(function () { return _this.getVirtualChatComponentSettings(); }), operators.tap(function (response) {
                    _this.isNewVirtualChatSetting = false;
                    _this.virtualChatComponentSettingsValues = response.values;
                }));
            }
            else {
                adminSetting$ = this.rxAdminSettingsService.updateComponentSettings(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatConfigName + "/" + this.virtualChatComponentSettingsValues[0].ownerKeyValue1, this.virtualChatComponentSettingsValues);
            }
            this.busy = adminSetting$.subscribe(function () {
                _this.rxNotificationService.addSuccessMessage(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatConfigurationSaved);
                _this.connectionTestStatus = i1$1.ConnectionTestStatus.Invalid;
                _this.virtualChatConfigurationForm.markAsPristine();
                _this.rxLiveAgentSettingsService.getAvailableTopics();
            });
        };
        VirtualChatConfigurationAdminComponent.prototype.setAdditionalSettingValue = function (settingName, value) {
            lodash.find(this.additionalSettingsComponentSettingsValues, {
                settingName: settingName
            }).settingValue = value;
        };
        VirtualChatConfigurationAdminComponent.prototype.saveAdditionalSettings = function () {
            var _this = this;
            var adminSetting$;
            var formValue = this.virtualChatAdditionalSettingsForm.getRawValue();
            this.setAdditionalSettingValue(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatAdditionalSetting.settingNames.adminKey, formValue.administratorKey);
            this.setAdditionalSettingValue(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatAdditionalSetting.settingNames.company, formValue.company);
            if (this.isNewVirtualChatAdditionalSetting) {
                adminSetting$ = this.rxAdminSettingsService
                    .createComponentSettings(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatAdditionalSettingsName, this.additionalSettingsComponentSettingsValues)
                    .pipe(operators.switchMap(function () { return _this.getAdditionalSettingsComponentSettings(); }), operators.tap(function (response) {
                    _this.isNewVirtualChatAdditionalSetting = false;
                    _this.additionalSettingsComponentSettingsValues = response.values;
                }));
            }
            else {
                adminSetting$ = this.rxAdminSettingsService.updateComponentSettings(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatAdditionalSettingsName + "/" + this.additionalSettingsComponentSettingsValues[0].ownerKeyValue1, this.additionalSettingsComponentSettingsValues);
            }
            this.busy = adminSetting$.subscribe(function () {
                _this.virtualChatAdditionalSettingsForm.markAsPristine();
                _this.rxNotificationService.addSuccessMessage(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatConfigurationSaved);
                _this.rxLiveAgentSettingsService.getAvailableTopics().subscribe(function (topics) {
                    if (lodash.isEmpty(topics)) {
                        _this.rxNotificationService.addWarningMessage(RX_VIRTUAL_CHAT_CONFIGURATION.virtualChatVerifyAdministratorKey);
                    }
                });
            });
        };
        return VirtualChatConfigurationAdminComponent;
    }(i4$2.BaseViewComponent));
    VirtualChatConfigurationAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: VirtualChatConfigurationAdminComponent, deps: [{ token: i1__namespace$3.FormBuilder }, { token: i2__namespace.RxAdminSettingsService }, { token: i2__namespace.RxNotificationService }, { token: i1__namespace.RxModalService }, { token: RxCognitiveServiceService }, { token: i2__namespace.RxLiveAgentSettingsService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    VirtualChatConfigurationAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: VirtualChatConfigurationAdminComponent, selector: "rx-admin-virtual-chat-configuration", usesInheritance: true, ngImport: i0__namespace, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.virtual-chat-configuration.header.title' | translate }}\"\n  [busy]=\"busy\"\n>\n  <adapt-accordion multiselect=\"true\" class=\"pb-4\">\n    <form [formGroup]=\"virtualChatConfigurationForm\">\n      <adapt-accordion-tab title=\"Authentication\" isOpen=\"true\" rx-id=\"authentication\">\n        <adapt-rx-textfield\n          rx-id=\"virtual-chat-url\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.admin.tone-analysis-testing.bmc-remedy-virtual-chat-api-endpoint-url.label'\n              | translate\n          }}\"\n          formControlName=\"virtualChatUrl\"\n          maxlength=\"254\"\n          required=\"true\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-textfield>\n        <adapt-rx-textfield\n          rx-id=\"administrator-user\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.ar-administrator-user.label' | translate }}\"\n          formControlName=\"username\"\n          maxlength=\"254\"\n          required=\"true\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-textfield>\n        <adapt-rx-textfield\n          rx-id=\"administrator-password\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.admin.tone-analysis-testing.ar-administrator-password.label' | translate\n          }}\"\n          formControlName=\"password\"\n          maxlength=\"254\"\n          required=\"true\"\n          [isPassword]=\"true\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-textfield>\n        <adapt-rx-textfield\n          rx-id=\"system-server-url\"\n          label=\"{{\n            'com.bmc.arsys.rx.client.admin.tone-analysis-testing.ar-system-server-api-endpoint-url.label' | translate\n          }}\"\n          formControlName=\"systemServerUrl\"\n          maxlength=\"254\"\n          required=\"true\"\n          class=\"d-block form-group\"\n        >\n        </adapt-rx-textfield>\n\n        <div class=\"d-flex justify-content-start\">\n          <rx-connection-tester\n            buttonType=\"secondary\"\n            [status]=\"connectionTestStatus\"\n            (testConnection)=\"onTestConnection()\"\n            rx-id=\"virtual-chat-configuration-test-button\"\n          ></rx-connection-tester>\n          <button\n            adapt-button\n            class=\"ml-4 mr-2\"\n            btn-type=\"primary\"\n            type=\"button\"\n            rx-id=\"save-button\"\n            [disabled]=\"isSaveButtonDisabled()\"\n            (click)=\"saveVirtualChatConfig()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n          </button>\n        </div>\n      </adapt-accordion-tab>\n    </form>\n\n    <form [formGroup]=\"virtualChatAdditionalSettingsForm\">\n      <adapt-accordion-tab title=\"Additional settings\" rx-id=\"additional-settings\" class=\"d-block\">\n        <adapt-rx-textfield\n          rx-id=\"administrator-key\"\n          label=\"{{ 'com.bmc.arsys.rx.client.admin.tone-analysis-testing.administrator-key.label' | translate }}\"\n          formControlName=\"administratorKey\"\n          class=\"d-block form-group\"\n          [tooltip]=\"{\n            iconName: 'question_circle_o',\n            content: 'com.bmc.arsys.rx.client.admin.virtual-chat-configuration.administrator-key.tooltip' | translate,\n            placement: 'right',\n            popoverMode: true\n          }\"\n        >\n        </adapt-rx-textfield>\n        <adapt-rx-textfield rx-id=\"company\" label=\"Company\" formControlName=\"company\" class=\"d-block form-group\">\n        </adapt-rx-textfield>\n\n        <div class=\"d-flex justify-content-start\">\n          <button\n            adapt-button\n            class=\"mr-2\"\n            btn-type=\"primary\"\n            type=\"button\"\n            rx-id=\"additional-settings-save-button\"\n            [disabled]=\"virtualChatAdditionalSettingsForm.pristine || virtualChatAdditionalSettingsForm.invalid\"\n            (click)=\"saveAdditionalSettings()\"\n          >\n            {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n          </button>\n        </div>\n      </adapt-accordion-tab>\n    </form>\n  </adapt-accordion>\n</rx-admin-settings>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-textfield{max-width:400px}\n"], components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptAccordionComponent, selector: "adapt-accordion", inputs: ["config", "multiselect", "bordered"], outputs: ["openTab", "closeTab"] }, { type: i1__namespace$1.AdaptAccordionTabComponent, selector: "adapt-accordion-tab", inputs: ["title", "renderContentWhenClosed", "customClass", "multiline", "icon", "disabled", "isOpen"], outputs: ["open", "close"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace.RxConnectionTesterComponent, selector: "rx-connection-tester", inputs: ["status", "buttonType"], outputs: ["testConnection"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: VirtualChatConfigurationAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-virtual-chat-configuration',
                        templateUrl: './virtual-chat-configuration.component.html',
                        styleUrls: ['./virtual-chat-configuration.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }, { type: i2__namespace.RxAdminSettingsService }, { type: i2__namespace.RxNotificationService }, { type: i1__namespace.RxModalService }, { type: RxCognitiveServiceService }, { type: i2__namespace.RxLiveAgentSettingsService }, { type: i4__namespace.TranslateService }]; } });

    var VirtualChatConfigurationRegistrationModule = /** @class */ (function () {
        function VirtualChatConfigurationRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-virtual-chat-configuration',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(VirtualChatConfigurationAdminComponent),
                name: 'Virtual Chat configuration',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return VirtualChatConfigurationRegistrationModule;
    }());
    VirtualChatConfigurationRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: VirtualChatConfigurationRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    VirtualChatConfigurationRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: VirtualChatConfigurationRegistrationModule, declarations: [VirtualChatConfigurationAdminComponent], imports: [i1$2.AdaptAccordionModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptRxTextfieldModule,
            i4.AdminSettingsModule,
            i8.CommonModule,
            i1.ReactiveFormsModule,
            i1$1.RxConnectionTesterModule,
            i4$1.TranslateModule] });
    VirtualChatConfigurationRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: VirtualChatConfigurationRegistrationModule, imports: [[
                i1$2.AdaptAccordionModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptRxTextfieldModule,
                i4.AdminSettingsModule,
                i8.CommonModule,
                i1.ReactiveFormsModule,
                i1$1.RxConnectionTesterModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: VirtualChatConfigurationRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [VirtualChatConfigurationAdminComponent],
                        imports: [
                            i1$2.AdaptAccordionModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptRxTextfieldModule,
                            i4.AdminSettingsModule,
                            i8.CommonModule,
                            i1.ReactiveFormsModule,
                            i1$1.RxConnectionTesterModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [VirtualChatConfigurationAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var fieldIds = {
        hostname: 70030,
        port: 70031,
        protocol: 70032,
        authType: 70033,
        authentication: 70034
    };
    var authTypes = {
        basicAuth: 0,
        oAuth2: 1,
        rsso: 2,
        custom: 3,
        remedy: 11,
        oAuthTokenExchange: 12
    };
    var protocolTypes = {
        http: 0,
        https: 1
    };
    var protocolTypeOptions = [
        {
            id: protocolTypes.http,
            label: 'HTTP'
        },
        {
            id: protocolTypes.https,
            label: 'HTTPS'
        }
    ];
    var grantTypeOptions = [
        {
            id: 0,
            label: 'client_credentials'
        }
    ];
    var authTypeOptions = [
        {
            id: authTypes.basicAuth,
            label: 'Basic'
        },
        {
            id: authTypes.oAuth2,
            label: 'OAuth 2.0'
        },
        {
            id: authTypes.rsso,
            label: 'RSSO'
        },
        {
            id: authTypes.custom,
            label: 'Custom'
        },
        {
            id: authTypes.remedy,
            label: 'Remedy'
        },
        {
            id: authTypes.oAuthTokenExchange,
            label: 'OAuth token exchange'
        }
    ];
    var webApiConnection = {
        authTypeCode: '',
        secure: '',
        name: '',
        hostname: '',
        port: '',
        authTypeDetails: {
            username: '',
            credentials: '',
            httpHeaders: [],
            queryParams: [],
            tokenFetchMechanism: 0,
            additionalFormParams: []
        }
    };
    var wizardSteps = [
        {
            title: 'General',
            fields: [
                {
                    type: 'text',
                    name: 'name',
                    label: 'com.bmc.arsys.rx.client.common.name.label',
                    rxId: 'name',
                    required: true
                },
                {
                    type: 'text',
                    name: 'hostname',
                    label: 'com.bmc.arsys.rx.client.admin.data-source-connection-properties.host-name.label',
                    rxId: 'host-name',
                    required: true
                },
                {
                    type: 'number',
                    name: 'port',
                    label: 'com.bmc.arsys.rx.client.admin.data-source-connection-properties.port.label',
                    rxId: 'port',
                    minValue: 1,
                    maxValue: 65535,
                    required: true,
                    allowScientific: false,
                    allowIntegerOnly: true
                },
                {
                    type: 'select',
                    name: 'secure',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.protocol.label',
                    rxId: 'protocol',
                    selectOptions: protocolTypeOptions,
                    required: true
                },
                {
                    type: 'select',
                    name: 'authTypeCode',
                    label: 'com.bmc.arsys.rx.client.admin.data-source-connection-properties.authentication.label',
                    rxId: 'authentication',
                    selectOptions: authTypeOptions,
                    required: true
                }
            ],
            id: 'General',
            formName: 'generalConfigurationForm',
            isValid: true,
            isDirty: false
        },
        {
            title: 'Authentication',
            fields: [
                {
                    type: 'text',
                    name: 'username',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.login.label',
                    rxId: 'login',
                    required: true
                },
                {
                    type: 'password',
                    name: 'credentials',
                    label: 'com.bmc.arsys.rx.client.common.password.label',
                    rxId: 'password',
                    required: true
                },
                {
                    type: 'nameValuePairs',
                    name: 'httpHeaders',
                    label: 'HTTP headers',
                    rxId: 'http-headers',
                    required: true
                }
            ],
            id: 'Authentication',
            formName: 'authenticationConfigurationForm',
            isValid: true,
            isDirty: false
        }
    ];
    var authTypeFields = [
        {
            id: authTypes.basicAuth,
            fields: [
                {
                    type: 'text',
                    name: 'username',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.login.label',
                    rxId: 'login',
                    required: true
                },
                {
                    type: 'password',
                    name: 'credentials',
                    label: 'com.bmc.arsys.rx.client.common.password.label',
                    rxId: 'password',
                    required: true
                },
                {
                    type: 'nameValuePairs',
                    name: 'httpHeaders',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.add-http-headers.label',
                    rxId: 'http-headers',
                    required: true
                }
            ]
        },
        {
            id: authTypes.oAuth2,
            fields: [
                {
                    type: 'select',
                    name: 'grantType',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.grant-type.label',
                    rxId: 'grant-type',
                    selectOptions: grantTypeOptions,
                    disabled: false,
                    required: true
                },
                {
                    type: 'text',
                    name: 'tokenPath',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.access-token-url.label',
                    rxId: 'access-token-url',
                    required: true
                },
                {
                    type: 'text',
                    name: 'username',
                    label: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-id.label',
                    rxId: 'client-id',
                    required: true
                },
                {
                    type: 'password',
                    name: 'credentials',
                    label: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-secret.label',
                    rxId: 'client-secret',
                    required: true
                },
                {
                    type: 'radio',
                    name: 'tokenFetchMechanism',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.client-credentials-transfer-mechanism.label',
                    rxId: 'token-fetch-mechanism',
                    selectOptions: [
                        {
                            label: 'com.bmc.arsys.rx.client.admin.web-api-connections.authorization-request-header.label',
                            value: 0
                        },
                        {
                            label: 'com.bmc.arsys.rx.client.admin.web-api-connections.form-parameters.label',
                            value: 1
                        }
                    ]
                },
                {
                    type: 'text',
                    name: 'redirectUri',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.redirect-uri.label',
                    rxId: 'redirect-uri',
                    required: false
                },
                {
                    type: 'text',
                    name: 'scope',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.scope.label',
                    rxId: 'scope',
                    required: false
                },
                {
                    type: 'serverEndpointRadio',
                    name: 'authServerEndpoint',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.authorization-server-endpoint.label',
                    rxId: 'auth-server-endpoint',
                    selectOptions: [
                        {
                            label: 'com.bmc.arsys.rx.client.admin.web-api-connections.endpoint-type.default-hostname.label',
                            value: 'Default'
                        },
                        {
                            label: 'com.bmc.arsys.rx.client.admin.web-api-connections.endpoint-type.custom.label',
                            value: 'Custom'
                        }
                    ],
                    placeholder: 'com.bmc.arsys.rx.client.admin.web-api-connections.authorization-server-endpoint.placeholder',
                    referenceFieldName: 'hostname',
                    tooltip: 'com.bmc.arsys.rx.client.admin.web-api-connections.authorization-server-endpoint.tooltip',
                    required: true
                },
                {
                    type: 'nameValuePairs',
                    name: 'httpHeaders',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.add-http-headers.label',
                    rxId: 'http-headers',
                    required: true
                },
                {
                    type: 'nameValuePairs',
                    name: 'additionalFormParams',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.add-form-parameters.label',
                    rxId: 'additional-form-params'
                }
            ]
        },
        {
            id: authTypes.rsso,
            fields: [
                {
                    type: 'text',
                    name: 'loginName',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.login.label',
                    rxId: 'login',
                    required: true
                },
                {
                    type: 'text',
                    name: 'tokenPath',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.access-token-url.label',
                    rxId: 'access-token-url',
                    required: true
                },
                {
                    type: 'text',
                    name: 'username',
                    label: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-id.label',
                    rxId: 'client-id',
                    required: true
                },
                {
                    type: 'password',
                    name: 'credentials',
                    label: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-secret.label',
                    rxId: 'client-secret',
                    required: true
                },
                {
                    type: 'serverEndpointRadio',
                    name: 'authServerEndpoint',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.rsso-server-endpoint.label',
                    rxId: 'auth-server-endpoint',
                    referenceFieldName: 'hostname',
                    selectOptions: [
                        {
                            label: 'com.bmc.arsys.rx.client.admin.web-api-connections.endpoint-type.default-hostname.label',
                            value: 'Default'
                        },
                        {
                            label: 'com.bmc.arsys.rx.client.admin.web-api-connections.endpoint-type.custom.label',
                            value: 'Custom'
                        }
                    ],
                    placeholder: 'com.bmc.arsys.rx.client.admin.web-api-connections.rsso-server-endpoint.placeholder',
                    required: true
                },
                {
                    type: 'nameValuePairs',
                    name: 'httpHeaders',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.add-http-headers.label',
                    rxId: 'http-headers',
                    required: true
                }
            ]
        },
        {
            id: authTypes.custom,
            fields: [
                {
                    type: 'nameValuePairs',
                    name: 'httpHeaders',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.add-http-headers.label',
                    rxId: 'http-headers',
                    required: true
                },
                {
                    type: 'nameValuePairs',
                    name: 'queryParams',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.add-query-parameters.label',
                    rxId: 'query-parameters',
                    required: true
                }
            ]
        },
        {
            id: authTypes.remedy,
            fields: [
                {
                    type: 'text',
                    name: 'username',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.login.label',
                    rxId: 'login',
                    required: true
                },
                {
                    type: 'password',
                    name: 'credentials',
                    label: 'com.bmc.arsys.rx.client.common.password.label',
                    rxId: 'password',
                    required: true
                },
                {
                    type: 'nameValuePairs',
                    name: 'httpHeaders',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.add-http-headers.label',
                    rxId: 'http-headers',
                    required: true
                }
            ]
        },
        {
            id: authTypes.oAuthTokenExchange,
            fields: [
                {
                    type: 'text',
                    name: 'loginName',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.login.label',
                    rxId: 'login'
                },
                {
                    type: 'text',
                    name: 'tokenPath',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.access-token-url.label',
                    rxId: 'access-token-url',
                    required: true
                },
                {
                    type: 'text',
                    name: 'username',
                    label: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-id.label',
                    rxId: 'client-id',
                    required: true
                },
                {
                    type: 'password',
                    name: 'credentials',
                    label: 'com.bmc.arsys.rx.client.admin.rsso-auth.client-secret.label',
                    rxId: 'client-secret',
                    required: true
                },
                {
                    type: 'text',
                    name: 'resources',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.resources.label',
                    rxId: 'resources',
                    required: true,
                    isUrl: true
                },
                {
                    type: 'serverEndpointRadio',
                    name: 'authServerEndpoint',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.oauth-token-exchange-server-endpoint.label',
                    rxId: 'auth-server-endpoint',
                    referenceFieldName: 'hostname',
                    selectOptions: [
                        {
                            label: 'com.bmc.arsys.rx.client.admin.web-api-connections.endpoint-type.default-hostname.label',
                            value: 'Default'
                        },
                        {
                            label: 'com.bmc.arsys.rx.client.admin.web-api-connections.endpoint-type.custom.label',
                            value: 'Custom'
                        }
                    ],
                    placeholder: 'com.bmc.arsys.rx.client.admin.web-api-connections.oauth-token-exchange-server-endpoint.placeholder',
                    required: true
                },
                {
                    type: 'nameValuePairs',
                    name: 'httpHeaders',
                    label: 'com.bmc.arsys.rx.client.admin.web-api-connections.add-http-headers.label',
                    rxId: 'http-headers',
                    required: true
                }
            ]
        }
    ];
    var authServerEndpoints = {
        default: 'Default',
        custom: 'Custom'
    };
    var RX_WEB_API_CONNECTIONS = {
        recordDefinitionName: 'WebAPI Connection',
        passwordMask: '********',
        fieldIds: fieldIds,
        wizardContext: {
            wizardSteps: wizardSteps,
            webApiConnection: webApiConnection,
            isEditMode: false
        },
        protocolTypeOptions: protocolTypeOptions,
        authTypes: authTypes,
        authTypeOptions: authTypeOptions,
        authTypeFields: authTypeFields,
        grantTypeOptions: grantTypeOptions,
        authServerEndpoints: authServerEndpoints
    };

    var WebApiConnectionWizardStepFieldsComponent = /** @class */ (function () {
        function WebApiConnectionWizardStepFieldsComponent(rxUrlUtilsService, translateService) {
            var _this = this;
            this.rxUrlUtilsService = rxUrlUtilsService;
            this.translateService = translateService;
            this.selectionChange = new i0.EventEmitter();
            this.formStatusChange = new i0.EventEmitter();
            this.destroyed$ = new rxjs.ReplaySubject(1);
            this.defaultSelection = this.translateService.instant('com.bmc.arsys.rx.client.common.select.label');
            this.optionFormatter = function (option) {
                return lodash.get(option, 'label', _this.defaultSelection);
            };
        }
        WebApiConnectionWizardStepFieldsComponent.prototype.onRadioButtonChange = function (event, field) {
            if (event.startsWith(RX_WEB_API_CONNECTIONS.authServerEndpoints.default)) {
                this.stepDetails[field.name] = null;
            }
        };
        WebApiConnectionWizardStepFieldsComponent.prototype.getSelectionValue = function (selectedValue, field) {
            return this.translateService.instant(selectedValue.label, {
                hostName: this.webApiConnection[field.referenceFieldName]
            });
        };
        WebApiConnectionWizardStepFieldsComponent.prototype.validate = function (field) {
            var _this = this;
            return function (control) {
                var result = null;
                if (field.isUrl && control.value) {
                    var urls = control.value.split(/[,;]/);
                    if (lodash.some(urls, function (url) { return !_this.rxUrlUtilsService.isValidUrl(url, true); })) {
                        result = { invalidUrl: { message: 'Invalid URL.' } };
                    }
                }
                return result;
            };
        };
        WebApiConnectionWizardStepFieldsComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.authEndpoint = this.stepDetails['authServerEndpoint']
                ? RX_WEB_API_CONNECTIONS.authServerEndpoints.custom
                : RX_WEB_API_CONNECTIONS.authServerEndpoints.default;
            this.configurationForm.statusChanges.pipe(operators.distinctUntilChanged(), operators.takeUntil(this.destroyed$)).subscribe(function (value) {
                _this.step.isValid = value === 'VALID';
                _this.formStatusChange.emit();
            });
            this.configurationForm.valueChanges.pipe(operators.distinctUntilChanged(), operators.takeUntil(this.destroyed$)).subscribe(function (value) {
                _this.step.isDirty = !_this.configurationForm.pristine;
                _this.formStatusChange.emit();
            });
        };
        WebApiConnectionWizardStepFieldsComponent.prototype.ngOnDestroy = function () {
            this.destroyed$.next(true);
            this.destroyed$.complete();
        };
        return WebApiConnectionWizardStepFieldsComponent;
    }());
    WebApiConnectionWizardStepFieldsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiConnectionWizardStepFieldsComponent, deps: [{ token: i3__namespace.RxUrlUtilsService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    WebApiConnectionWizardStepFieldsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: WebApiConnectionWizardStepFieldsComponent, selector: "rx-web-api-connection-wizard-step-fields", inputs: { step: "step", webApiConnection: "webApiConnection", stepDetails: "stepDetails" }, outputs: { selectionChange: "selectionChange", formStatusChange: "formStatusChange" }, viewQueries: [{ propertyName: "configurationForm", first: true, predicate: ["configurationForm"], descendants: true, read: i1.NgForm, static: true }], ngImport: i0__namespace, template: "<form [name]=\"step.formName\" #configurationForm=\"ngForm\">\n  <ng-container *ngFor=\"let field of step.fields\">\n    <adapt-rx-select\n      [name]=\"field.name\"\n      [label]=\"field.label | translate\"\n      class=\"d-block form-group\"\n      rx-id=\"field.rxId\"\n      [options]=\"field.selectOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      [(ngModel)]=\"stepDetails[field.name]\"\n      [required]=\"field.required\"\n      *ngIf=\"field.type === 'select'\"\n      [disabled]=\"field.disabled\"\n      (ngModelChange)=\"selectionChange.emit({ selection: $event, fieldName: field.name })\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-textfield\n      [name]=\"field.name\"\n      [(ngModel)]=\"stepDetails[field.name]\"\n      [required]=\"field.required\"\n      [attr.rx-id]=\"field.rxId\"\n      [label]=\"field.label | translate\"\n      class=\"d-block form-group\"\n      *ngIf=\"field.type === 'text' || field.type === 'password'\"\n      [isPassword]=\"field.type === 'password'\"\n      [placeholder]=\"field.placeholder\"\n      [rxCustomValidators]=\"validate(field)\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-counter\n      [name]=\"field.name\"\n      [(ngModel)]=\"stepDetails[field.name]\"\n      [required]=\"field.required\"\n      [attr.rx-id]=\"field.rxId\"\n      [label]=\"field.label | translate\"\n      class=\"d-block form-group\"\n      [adaptMin]=\"field.minValue\"\n      [adaptMax]=\"field.maxValue\"\n      *ngIf=\"field.type === 'number' && field.allowIntegerOnly\"\n      [placeholder]=\"field.placeholder\"\n      adaptIntegerNumber\n    >\n    </adapt-rx-counter>\n\n    <adapt-rx-counter\n      [name]=\"field.name\"\n      [(ngModel)]=\"stepDetails[field.name]\"\n      [required]=\"field.required\"\n      [attr.rx-id]=\"field.rxId\"\n      [label]=\"field.label | translate\"\n      class=\"d-block form-group\"\n      [adaptMin]=\"field.minValue\"\n      [adaptMax]=\"field.maxValue\"\n      *ngIf=\"field.type === 'number' && field.allowScientific\"\n      [placeholder]=\"field.placeholder\"\n      adaptScientificNumber\n    >\n    </adapt-rx-counter>\n\n    <rx-name-value-pairs-editor\n      addButtonLabel=\"{{ field.label | translate }}\"\n      *ngIf=\"field.type === 'nameValuePairs'\"\n      [(ngModel)]=\"stepDetails[field.name]\"\n      [name]=\"field.name\"\n    >\n    </rx-name-value-pairs-editor>\n\n    <adapt-rx-radiobutton-group\n      *ngIf=\"field.type === 'radio'\"\n      [(ngModel)]=\"stepDetails[field.name]\"\n      [name]=\"field.name\"\n      [label]=\"field.label | translate\"\n    >\n      <adapt-rx-radiobutton\n        *ngFor=\"let selectionValue of field.selectOptions\"\n        [value]=\"selectionValue.value\"\n        [label]=\"getSelectionValue(selectionValue, field)\"\n      >\n      </adapt-rx-radiobutton>\n    </adapt-rx-radiobutton-group>\n\n    <adapt-rx-radiobutton-group\n      *ngIf=\"field.type === 'serverEndpointRadio'\"\n      [(ngModel)]=\"authEndpoint\"\n      [name]=\"field.name\"\n      [label]=\"field.label | translate\"\n      [tooltip]=\"{\n        iconName: 'question_circle_o',\n        content: field.tooltip | translate,\n        placement: 'auto',\n        popoverMode: true\n      }\"\n      (ngModelChange)=\"onRadioButtonChange($event, field)\"\n    >\n      <adapt-rx-radiobutton\n        *ngFor=\"let selectionValue of field.selectOptions\"\n        [value]=\"selectionValue.value\"\n        [label]=\"getSelectionValue(selectionValue, field)\"\n      >\n      </adapt-rx-radiobutton>\n    </adapt-rx-radiobutton-group>\n\n    <adapt-rx-textfield\n      name=\"url\"\n      *ngIf=\"field.type === 'serverEndpointRadio'\"\n      [disabled]=\"authEndpoint != 'Custom'\"\n      [(ngModel)]=\"stepDetails[field.name]\"\n      [placeholder]=\"field.placeholder | translate\"\n      [required]=\"field.required\"\n      [attr.rx-id]=\"field.rxId\"\n      class=\"d-block form-group\"\n    >\n    </adapt-rx-textfield>\n  </ng-container>\n</form>\n", styles: [":root{--border-radius: 4px;--nav-background: var(--gray-900);--nav-links-color: var(--white);--font-family: \"Open Sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;--color-primary-disabled-hover: #ff8d2a;--color-primary-disabled: #ff7d18;--color-primary: #f86e00;--color-primary-hover: #e45f00;--color-primary-active: #d05100;--color-primary-active-hover: #bc4300;--color-secondary-disabled-hover: #ffffff;--color-secondary-disabled: #ffffff;--color-secondary: #f9f9fa;--color-secondary-hover: #e5e5e6;--color-secondary-active: #d2d2d3;--color-secondary-active-hover: #c0c0c2;--color-active-disabled-hover: #45c8bd;--color-active-disabled: #2db7ad;--color-active: #00a79d;--color-active-hover: #00978e;--color-active-active: #00887f;--color-active-active-hover: #007970;--color-info-disabled-hover: #66d9f1;--color-info-disabled: #52c7df;--color-info: #3cb6ce;--color-info-hover: #21a6bd;--color-info-active: #0096ad;--color-info-active-hover: #00879e;--color-success-disabled-hover: #aae860;--color-success-disabled: #99d550;--color-success: #89c341;--color-success-hover: #7ab232;--color-success-active: #6ba122;--color-success-active-hover: #5d9110;--color-warning-disabled-hover: #ffda46;--color-warning-disabled: #ffc734;--color-warning: #f1b521;--color-warning-hover: #dea406;--color-warning-active: #cc9400;--color-warning-active-hover: #ba8400;--color-danger-disabled-hover: #ff5323;--color-danger-disabled: #ff4313;--color-danger: #f83200;--color-danger-hover: #e31f00;--color-danger-active: #cd0500;--color-danger-active-hover: #b80000;--dense-spacing-custom: false;--table-scroll-width: 0}adapt-rx-select,adapt-rx-textfield,adapt-rx-counter{max-width:400px}\n"], components: [{ type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxCounterComponent, selector: "adapt-rx-counter", inputs: ["prefix", "suffix", "max", "min", "step", "size", "placeholder", "disabledStyleForReadonlyState"] }, { type: i1__namespace.RxNameValuePairsEditorComponent, selector: "rx-name-value-pairs-editor", inputs: ["addButtonLabel"] }, { type: i1__namespace$1.AdaptRxRadiobuttonGroupComponent, selector: "adapt-rx-radiobutton-group", inputs: ["formControlName"] }, { type: i1__namespace$1.AdaptRxRadiobuttonComponent, selector: "adapt-rx-radiobutton", inputs: ["name", "label", "id", "value", "checked", "disabled", "ariaLabel", "ariaLabeledBy", "ariaDescribedBy", "testID", "tabIndex"], outputs: ["onFocus", "onBlur", "checkedChange"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace.RxCustomValidatorsDirective, selector: "[rxCustomValidators][ngModel],[rxCustomValidators][formControl]", inputs: ["rxCustomValidators"] }, { type: i1__namespace$1.AdaptIntegerNumberValidatorDirective, selector: "[adaptIntegerNumber][ngModel], [adaptIntegerNumber][formControl]", inputs: ["adaptIntegerNumberMessageFn"] }, { type: i1__namespace$1.AdaptMinValidatorDirective, selector: "[adaptMin][ngModel],[adaptMin][formControl]", inputs: ["adaptMin", "adaptMinMessageFn"] }, { type: i1__namespace$1.AdaptMaxValidatorDirective, selector: "[adaptMax][ngModel],[adaptMax][formControl]", inputs: ["adaptMax", "adaptMaxMessageFn"] }, { type: i1__namespace$1.AdaptScientificNumberValidatorDirective, selector: "[adaptScientificNumber][ngModel], [adaptScientificNumber][formControl]", inputs: ["adaptScientificNumberMessageFn"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiConnectionWizardStepFieldsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-web-api-connection-wizard-step-fields',
                        templateUrl: './web-api-connection-wizard-step-fields.component.html',
                        styleUrls: ['./web-api-connection-wizard-step-fields.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace.RxUrlUtilsService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { step: [{
                    type: i0.Input
                }], webApiConnection: [{
                    type: i0.Input
                }], configurationForm: [{
                    type: i0.ViewChild,
                    args: ['configurationForm', { read: i1.NgForm, static: true }]
                }], selectionChange: [{
                    type: i0.Output
                }], formStatusChange: [{
                    type: i0.Output
                }], stepDetails: [{
                    type: i0.Input
                }] } });

    var AuthenticationWizardStepComponent = /** @class */ (function () {
        function AuthenticationWizardStepComponent(rxWizardModalComponent) {
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.context$ = this.rxWizardModalComponent.context$;
            this.isSaveButtonDisabled$ = this.rxWizardModalComponent.context$.pipe(operators.map(function (context) {
                var isDirty = lodash.some(context.wizardSteps, { isDirty: true });
                return lodash.some(context.wizardSteps, { isValid: false }) || !isDirty;
            }));
        }
        AuthenticationWizardStepComponent.prototype.onFormStatusChange = function () {
            var _this = this;
            this.isSaveButtonDisabled$.pipe(operators.take(1)).subscribe(function (isSaveButtonDisabled) {
                if (isSaveButtonDisabled) {
                    _this.rxWizardModalComponent.api.disableFinishButton();
                }
                else {
                    _this.rxWizardModalComponent.api.enableFinishButton();
                }
            });
        };
        return AuthenticationWizardStepComponent;
    }());
    AuthenticationWizardStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AuthenticationWizardStepComponent, deps: [{ token: i4__namespace$1.RxWizardModalComponent }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AuthenticationWizardStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: AuthenticationWizardStepComponent, selector: "rx-authentication-wizard-step", ngImport: i0__namespace, template: "<ng-container *ngIf=\"context$ | async as context\">\n  <rx-web-api-connection-wizard-step-fields\n    [step]=\"context.wizardSteps[1]\"\n    [stepDetails]=\"context.webApiConnection.authTypeDetails\"\n    (formStatusChange)=\"onFormStatusChange()\"\n    [webApiConnection]=\"context.webApiConnection\"\n  >\n  </rx-web-api-connection-wizard-step-fields>\n</ng-container>\n", components: [{ type: WebApiConnectionWizardStepFieldsComponent, selector: "rx-web-api-connection-wizard-step-fields", inputs: ["step", "webApiConnection", "stepDetails"], outputs: ["selectionChange", "formStatusChange"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AuthenticationWizardStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-authentication-wizard-step',
                        templateUrl: './authentication-wizard-step.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i4__namespace$1.RxWizardModalComponent }]; } });

    var GeneralWizardStepComponent = /** @class */ (function () {
        function GeneralWizardStepComponent(rxWizardModalComponent) {
            this.rxWizardModalComponent = rxWizardModalComponent;
            this.context$ = this.rxWizardModalComponent.context$;
        }
        GeneralWizardStepComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.context$.pipe(operators.take(1)).subscribe(function (context) {
                if (context.isEditMode) {
                    _this.rxWizardModalComponent.api.enableNextButton();
                    _this.savedAuthTypeCode = context.webApiConnection.authTypeCode;
                    _this.savedAuthTypeDetails = context.webApiConnection.authTypeDetails;
                }
            });
        };
        GeneralWizardStepComponent.prototype.onSelectionChange = function (selection) {
            var _this = this;
            this.context$.pipe(operators.take(1)).subscribe(function (context) {
                if (selection['fieldName'] === 'authTypeCode') {
                    var authTypeId = selection['selection'][0].id;
                    var newWizardSteps = lodash.cloneDeep(context.wizardSteps);
                    newWizardSteps[1].fields = lodash.find(RX_WEB_API_CONNECTIONS.authTypeFields, { id: authTypeId }).fields;
                    _this.rxWizardModalComponent.api.updateContext({
                        wizardSteps: newWizardSteps
                    });
                    if (_this.savedAuthTypeCode && lodash.isEqual(selection['selection'][0], _this.savedAuthTypeCode[0])) {
                        _this.rxWizardModalComponent.api.updateContext({
                            webApiConnection: _this.savedAuthTypeDetails
                        });
                    }
                    else {
                        var newWebApiConnection = lodash.cloneDeep(context.webApiConnection);
                        newWebApiConnection.authTypeDetails = {
                            username: '',
                            credentials: '',
                            httpHeaders: [],
                            queryParams: [],
                            tokenFetchMechanism: 0,
                            additionalFormParams: [],
                            grantType: [RX_WEB_API_CONNECTIONS.grantTypeOptions[0]]
                        };
                        _this.rxWizardModalComponent.api.updateContext({
                            webApiConnection: newWebApiConnection
                        });
                    }
                }
            });
        };
        GeneralWizardStepComponent.prototype.onFormStatusChange = function () {
            var _this = this;
            this.rxWizardModalComponent.context$.pipe(operators.take(1)).subscribe(function (context) {
                if (context.wizardSteps[0].isValid) {
                    _this.rxWizardModalComponent.api.enableNextButton();
                    if (context.wizardSteps[0].isDirty && context.isEditMode) {
                        _this.rxWizardModalComponent.api.enableFinishButton();
                    }
                }
                else {
                    _this.rxWizardModalComponent.api.disableNextButton();
                }
                if (context.wizardSteps[0].isDirty) {
                    _this.rxWizardModalComponent.api.markDirty();
                }
            });
        };
        return GeneralWizardStepComponent;
    }());
    GeneralWizardStepComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: GeneralWizardStepComponent, deps: [{ token: i4__namespace$1.RxWizardModalComponent }], target: i0__namespace.ɵɵFactoryTarget.Component });
    GeneralWizardStepComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: GeneralWizardStepComponent, selector: "rx-general-wizard-step", ngImport: i0__namespace, template: "<ng-container *ngIf=\"context$ | async as context\">\n  <rx-web-api-connection-wizard-step-fields\n    [step]=\"context.wizardSteps[0]\"\n    [stepDetails]=\"context.webApiConnection\"\n    (selectionChange)=\"onSelectionChange($event)\"\n    (formStatusChange)=\"onFormStatusChange()\"\n    [webApiConnection]=\"context.webApiConnection\"\n  >\n  </rx-web-api-connection-wizard-step-fields>\n</ng-container>\n", components: [{ type: WebApiConnectionWizardStepFieldsComponent, selector: "rx-web-api-connection-wizard-step-fields", inputs: ["step", "webApiConnection", "stepDetails"], outputs: ["selectionChange", "formStatusChange"] }], directives: [{ type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i8__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: GeneralWizardStepComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-general-wizard-step',
                        templateUrl: './general-wizard-step.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i4__namespace$1.RxWizardModalComponent }]; } });

    var RxWebAPIConnectionsService = /** @class */ (function () {
        function RxWebAPIConnectionsService(httpClient, injector, rxViewActionUtilsService) {
            this.httpClient = httpClient;
            this.injector = injector;
            this.rxViewActionUtilsService = rxViewActionUtilsService;
            this.path = '/api/rx/application/webapi/connection';
        }
        RxWebAPIConnectionsService.prototype.getAuthTypeDetails = function (webApiConnection) {
            var authTypeDetails = lodash.cloneDeep(webApiConnection.authTypeDetails);
            if (authTypeDetails.credentials === RX_WEB_API_CONNECTIONS.passwordMask) {
                authTypeDetails.credentials = null;
            }
            delete authTypeDetails.grantType;
            return authTypeDetails;
        };
        RxWebAPIConnectionsService.prototype.save = function (webApiConnection, id) {
            return this.httpClient.put(this.getUrl(id), this.getWebApiConnectionToSave(webApiConnection));
        };
        RxWebAPIConnectionsService.prototype.create = function (webApiConnection) {
            return this.httpClient.post(this.path, this.getWebApiConnectionToSave(webApiConnection));
        };
        RxWebAPIConnectionsService.prototype.getWebApiConnectionToSave = function (webApiConnection) {
            return {
                authTypeCode: webApiConnection.authTypeCode[0].id,
                authTypeDetails: this.getAuthTypeDetails(webApiConnection),
                hostname: webApiConnection.hostname,
                name: webApiConnection.name,
                port: webApiConnection.port,
                secure: webApiConnection.secure[0].id
            };
        };
        RxWebAPIConnectionsService.prototype.getUrl = function (id) {
            return this.path + "/" + encodeURIComponent(id);
        };
        RxWebAPIConnectionsService.prototype.delete = function (id) {
            return this.httpClient.delete(this.getUrl(id));
        };
        RxWebAPIConnectionsService.prototype.deleteRecords = function (recordsApi) {
            var _this = this;
            var records = lodash.castArray(recordsApi.getSelectedRows());
            var recordIds = this.rxViewActionUtilsService.extractRecordIds(records);
            if (recordIds.length) {
                var deleteObservables = recordIds.map(function (recordId) { return _this.delete(recordId); });
                return rxjs.forkJoin(deleteObservables);
            }
            return rxjs.EMPTY;
        };
        return RxWebAPIConnectionsService;
    }());
    RxWebAPIConnectionsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxWebAPIConnectionsService, deps: [{ token: i1__namespace$2.HttpClient }, { token: i0__namespace.Injector }, { token: i1__namespace$4.RxViewActionUtilsService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxWebAPIConnectionsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxWebAPIConnectionsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxWebAPIConnectionsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }, { type: i0__namespace.Injector }, { type: i1__namespace$4.RxViewActionUtilsService }]; } });

    var WebApiConnectionsAdminComponent = /** @class */ (function () {
        function WebApiConnectionsAdminComponent(rxModalService, rxCurrentUserService, rxWebAPIConnectionsService, rxNotificationService, rxRecordInstanceService, componentFactoryResolver, rxWizardService, translateService) {
            var _this = this;
            this.rxModalService = rxModalService;
            this.rxCurrentUserService = rxCurrentUserService;
            this.rxWebAPIConnectionsService = rxWebAPIConnectionsService;
            this.rxNotificationService = rxNotificationService;
            this.rxRecordInstanceService = rxRecordInstanceService;
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxWizardService = rxWizardService;
            this.translateService = translateService;
            this.recordDefinition = {
                fieldDefinitions: [
                    {
                        id: i3.RX_RECORD_DEFINITION.coreFieldIds.description,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_WEB_API_CONNECTIONS.fieldIds.hostname,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: RX_WEB_API_CONNECTIONS.fieldIds.port,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.integer
                    },
                    {
                        id: RX_WEB_API_CONNECTIONS.fieldIds.authentication,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    }
                ]
            };
            this.gridConfig$ = new rxjs.Observable(function (observer) {
                observer.next({
                    recordDefinitionName: RX_WEB_API_CONNECTIONS.recordDefinitionName,
                    columns: _this.getWebApiConnectionColumns(),
                    actionButtons: _this.getActionButtons(),
                    getRecordDefinition: function () { return rxjs.of(_this.recordDefinition); },
                    styles: 'flex-fill'
                });
                observer.complete();
            });
        }
        WebApiConnectionsAdminComponent.prototype.save = function () {
            var _this = this;
            var saveConnection$ = this.isNewConfiguration
                ? this.rxWebAPIConnectionsService.create(this.webApiConnectionWizardContext.webApiConnection)
                : this.rxWebAPIConnectionsService.save(this.webApiConnectionWizardContext.webApiConnection, this.currentRecordInstanceId);
            saveConnection$
                .pipe(operators.catchError(function (error) {
                _this.rxNotificationService.addErrorMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.web-api-connections.failed-to-save.message'));
                return rxjs.throwError(error);
            }))
                .subscribe(function (response) {
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.web-api-connections.connection-saved.message'));
                _this.webApiConnectionsRecordGrid.api.refresh().subscribe();
            });
        };
        WebApiConnectionsAdminComponent.prototype.getActionButtons = function () {
            var _this = this;
            return [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                    style: 'tertiary',
                    iconCls: 'trash',
                    actions: [
                        {
                            name: function () {
                                {
                                    _this.rxModalService
                                        .confirm({
                                        title: _this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                                        modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                                        message: _this.translateService.instant('com.bmc.arsys.rx.client.admin.web-api-connections.delete-confirmation.message')
                                    })
                                        .then(function (result) {
                                        if (result)
                                            _this.rxWebAPIConnectionsService
                                                .deleteRecords(_this.webApiConnectionsRecordGrid.api)
                                                .subscribe(function (response) {
                                                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.web-api-connections.deleted.message'));
                                                _this.webApiConnectionsRecordGrid.api.refresh().subscribe();
                                            });
                                    });
                                }
                            }
                        }
                    ]
                }
            ];
        };
        WebApiConnectionsAdminComponent.prototype.getWebApiConnectionColumns = function () {
            var _this = this;
            return [
                {
                    fieldId: "" + i3.RX_RECORD_DEFINITION.coreFieldIds.description,
                    index: 0,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label'),
                    clickable: true,
                    actions: [
                        {
                            name: function (previousActionResult, lastActionRow) { return _this.editWebApiConnection(lastActionRow); }
                        }
                    ]
                },
                {
                    fieldId: "" + RX_WEB_API_CONNECTIONS.fieldIds.hostname,
                    index: 1,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.data-source-connection-properties.host-name.label')
                },
                {
                    fieldId: "" + RX_WEB_API_CONNECTIONS.fieldIds.port,
                    index: 2,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.data-source-connection-properties.port.label'),
                    cellTemplate: this.portCellTemplate
                },
                {
                    fieldId: "" + RX_WEB_API_CONNECTIONS.fieldIds.authentication,
                    index: 3,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.data-source-connection-properties.authentication.label'),
                    visible: false
                },
                {
                    fieldId: "" + i3.RX_RECORD_DEFINITION.coreFieldIds.id,
                    index: 4,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.id.label'),
                    visible: false
                }
            ];
        };
        WebApiConnectionsAdminComponent.prototype.resetFields = function () {
            this.webApiConnectionWizardContext = lodash.cloneDeep(RX_WEB_API_CONNECTIONS.wizardContext);
            this.webApiConnectionWizardContext.webApiConnection.authTypeCode = [RX_WEB_API_CONNECTIONS.authTypeOptions[0]];
            this.webApiConnectionWizardContext.webApiConnection.secure = [RX_WEB_API_CONNECTIONS.protocolTypeOptions[0]];
            this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.grantType = [
                RX_WEB_API_CONNECTIONS.grantTypeOptions[0]
            ];
        };
        WebApiConnectionsAdminComponent.prototype.openWizard = function (wizardTitle, isEdit) {
            var _this = this;
            var wizardOptions = {
                title: wizardTitle,
                allowFinish: true,
                finishButtonLabel: this.translateService.instant('com.bmc.arsys.rx.client.common.save.label'),
                steps: [
                    {
                        id: 'general',
                        name: this.translateService.instant('com.bmc.arsys.rx.client.common.general-items.label'),
                        componentFactory: this.componentFactoryResolver.resolveComponentFactory(GeneralWizardStepComponent)
                    },
                    {
                        id: 'authentication',
                        name: this.translateService.instant('com.bmc.arsys.rx.client.admin.data-source-connection-properties.authentication.label'),
                        componentFactory: this.componentFactoryResolver.resolveComponentFactory(AuthenticationWizardStepComponent)
                    }
                ]
            };
            this.rxWizardService
                .open({
                context: this.webApiConnectionWizardContext,
                options: wizardOptions
            })
                .then(function (result) {
                if (lodash.isObject(result)) {
                    _this.save();
                }
            });
        };
        WebApiConnectionsAdminComponent.prototype.createWebApiConnection = function () {
            this.resetFields();
            this.isNewConfiguration = true;
            this.openWizard(this.translateService.instant('com.bmc.arsys.rx.client.admin.web-api-connections.new-web-api-connection.label'), false);
        };
        WebApiConnectionsAdminComponent.prototype.editWebApiConnection = function (selectedRecord) {
            var _this = this;
            this.resetFields();
            this.isNewConfiguration = false;
            this.currentRecordInstanceId = selectedRecord[i3.RX_RECORD_DEFINITION.coreFieldIds.id];
            var currentRecordInstance = this.rxRecordInstanceService.get(RX_WEB_API_CONNECTIONS.recordDefinitionName, selectedRecord[i3.RX_RECORD_DEFINITION.coreFieldIds.id]);
            currentRecordInstance.subscribe(function (recordInstance) {
                var authTypeId = recordInstance.fieldInstances[RX_WEB_API_CONNECTIONS.fieldIds.authType].value;
                var authTypeOption = lodash.find(RX_WEB_API_CONNECTIONS.authTypeOptions, { id: authTypeId });
                var credentials = JSON.parse(recordInstance.fieldInstances[RX_WEB_API_CONNECTIONS.fieldIds.authentication].value);
                var protocolId = recordInstance.fieldInstances[RX_WEB_API_CONNECTIONS.fieldIds.protocol].value;
                var protocolOption = lodash.find(RX_WEB_API_CONNECTIONS.protocolTypeOptions, { id: protocolId });
                _this.webApiConnectionWizardContext.webApiConnection.name =
                    recordInstance.fieldInstances[i3.RX_RECORD_DEFINITION.coreFieldIds.description].value;
                _this.webApiConnectionWizardContext.webApiConnection.hostname =
                    recordInstance.fieldInstances[RX_WEB_API_CONNECTIONS.fieldIds.hostname].value;
                _this.webApiConnectionWizardContext.webApiConnection.port =
                    recordInstance.fieldInstances[RX_WEB_API_CONNECTIONS.fieldIds.port].value;
                _this.webApiConnectionWizardContext.webApiConnection.secure = [protocolOption];
                _this.webApiConnectionWizardContext.webApiConnection.authTypeCode = [authTypeOption];
                _this.webApiConnectionWizardContext.wizardSteps[1].fields = lodash.find(RX_WEB_API_CONNECTIONS.authTypeFields, {
                    id: authTypeId
                }).fields;
                _this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.httpHeaders = credentials['httpHeaders'];
                if (authTypeId === RX_WEB_API_CONNECTIONS.authTypes.oAuth2) {
                    _this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.authServerEndpoint =
                        credentials['authServerEndpoint'];
                    _this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.redirectUri = credentials['redirectUri'];
                    _this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.scope = credentials['scope'];
                    _this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.tokenPath = credentials['tokenPath'];
                    _this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.tokenFetchMechanism =
                        credentials['tokenFetchMechanism'];
                    _this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.additionalFormParams =
                        credentials['additionalFormParams'];
                }
                if (authTypeId === RX_WEB_API_CONNECTIONS.authTypes.rsso ||
                    authTypeId === RX_WEB_API_CONNECTIONS.authTypes.oAuthTokenExchange) {
                    _this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.loginName = credentials['loginName'];
                    _this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.tokenPath = credentials['tokenPath'];
                    _this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.authServerEndpoint =
                        credentials['authServerEndpoint'];
                }
                if (authTypeId === RX_WEB_API_CONNECTIONS.authTypes.oAuthTokenExchange) {
                    _this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.resources = credentials['resources'];
                }
                if (authTypeId === RX_WEB_API_CONNECTIONS.authTypes.custom) {
                    _this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.queryParams = credentials['queryParams'];
                }
                else {
                    _this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.credentials =
                        RX_WEB_API_CONNECTIONS.passwordMask;
                    _this.webApiConnectionWizardContext.webApiConnection.authTypeDetails.username = credentials['username'];
                }
                _this.webApiConnectionWizardContext.isEditMode = true;
                _this.openWizard(_this.translateService.instant('com.bmc.arsys.rx.client.admin.web-api-connections.edit-web-api-connection.label'), true);
            });
        };
        return WebApiConnectionsAdminComponent;
    }());
    WebApiConnectionsAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiConnectionsAdminComponent, deps: [{ token: i1__namespace.RxModalService }, { token: i2__namespace.RxCurrentUserService }, { token: RxWebAPIConnectionsService }, { token: i2__namespace.RxNotificationService }, { token: i3__namespace$2.RxRecordInstanceService }, { token: i0__namespace.ComponentFactoryResolver }, { token: i4__namespace$1.RxWizardService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    WebApiConnectionsAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: WebApiConnectionsAdminComponent, selector: "rx-admin-web-api-connections", viewQueries: [{ propertyName: "webApiConnectionsRecordGrid", first: true, predicate: ["webApiConnectionsRecordGrid"], descendants: true }, { propertyName: "portCellTemplate", first: true, predicate: ["portCellTemplate"], descendants: true, static: true }], ngImport: i0__namespace, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.web-api-connections.header.title' | translate }}\">\n  <button\n    adapt-button\n    type=\"button\"\n    btn-type=\"tertiary\"\n    class=\"d-icon-plus_circle align-self-start\"\n    rx-id=\"new-button\"\n    (click)=\"createWebApiConnection()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n  </button>\n  <rx-record-grid rx-id=\"web-api-grid\" #webApiConnectionsRecordGrid [config]=\"gridConfig$\"> </rx-record-grid>\n\n  <ng-template #portCellTemplate let-dataItem=\"dataItem\" let-column=\"column\">\n    {{ dataItem[column.field] }}\n  </ng-template>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiConnectionsAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-web-api-connections',
                        templateUrl: './web-api-connections.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.RxModalService }, { type: i2__namespace.RxCurrentUserService }, { type: RxWebAPIConnectionsService }, { type: i2__namespace.RxNotificationService }, { type: i3__namespace$2.RxRecordInstanceService }, { type: i0__namespace.ComponentFactoryResolver }, { type: i4__namespace$1.RxWizardService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { webApiConnectionsRecordGrid: [{
                    type: i0.ViewChild,
                    args: ['webApiConnectionsRecordGrid', { static: false }]
                }], portCellTemplate: [{
                    type: i0.ViewChild,
                    args: ['portCellTemplate', { static: true }]
                }] } });

    var WebApiConnectionsRegistrationModule = /** @class */ (function () {
        function WebApiConnectionsRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-web-api-connections',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(WebApiConnectionsAdminComponent),
                name: 'Web API connections',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return WebApiConnectionsRegistrationModule;
    }());
    WebApiConnectionsRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiConnectionsRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    WebApiConnectionsRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiConnectionsRegistrationModule, declarations: [WebApiConnectionsAdminComponent,
            WebApiConnectionWizardStepFieldsComponent,
            GeneralWizardStepComponent,
            AuthenticationWizardStepComponent], imports: [i8.CommonModule,
            i1.FormsModule,
            i4.AdminSettingsModule,
            i7.RecordGridModule,
            i1$2.AdaptAlertModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptRxSelectModule,
            i1$2.AdaptTabsModule,
            i1$2.AdaptRxRadiobuttonModule,
            i1$2.AdaptRxFormControlModule,
            i1$1.RxNameValuePairsEditorModule,
            i1$2.AdaptRxCounterModule,
            i1$1.RxDirectivesModule,
            i4$1.TranslateModule] });
    WebApiConnectionsRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiConnectionsRegistrationModule, imports: [[
                i8.CommonModule,
                i1.FormsModule,
                i4.AdminSettingsModule,
                i7.RecordGridModule,
                i1$2.AdaptAlertModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptRxSelectModule,
                i1$2.AdaptTabsModule,
                i1$2.AdaptRxRadiobuttonModule,
                i1$2.AdaptRxFormControlModule,
                i1$1.RxNameValuePairsEditorModule,
                i1$2.AdaptRxCounterModule,
                i1$1.RxDirectivesModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebApiConnectionsRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            WebApiConnectionsAdminComponent,
                            WebApiConnectionWizardStepFieldsComponent,
                            GeneralWizardStepComponent,
                            AuthenticationWizardStepComponent
                        ],
                        imports: [
                            i8.CommonModule,
                            i1.FormsModule,
                            i4.AdminSettingsModule,
                            i7.RecordGridModule,
                            i1$2.AdaptAlertModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptRxSelectModule,
                            i1$2.AdaptTabsModule,
                            i1$2.AdaptRxRadiobuttonModule,
                            i1$2.AdaptRxFormControlModule,
                            i1$1.RxNameValuePairsEditorModule,
                            i1$2.AdaptRxCounterModule,
                            i1$1.RxDirectivesModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [WebApiConnectionsAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RX_WEBHOOK_CALLBACK_CONFIGURATION = {
        recordDefinition: {
            name: 'Webhook Callback Processor Configuration',
            fieldIds: {
                name: 56600,
                processor: 56601,
                bundleId: 56602,
                configMetadata: 56603
            }
        }
    };

    var RxWebhookCallbackConfigurationService = /** @class */ (function () {
        function RxWebhookCallbackConfigurationService(httpClient) {
            this.httpClient = httpClient;
            this.metadataFieldData = this.httpClient.get('/api/rx/application/webhook/processorsmetadata');
        }
        RxWebhookCallbackConfigurationService.prototype.getMetadataFields = function () {
            return this.metadataFieldData;
        };
        return RxWebhookCallbackConfigurationService;
    }());
    RxWebhookCallbackConfigurationService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxWebhookCallbackConfigurationService, deps: [{ token: i1__namespace$2.HttpClient }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxWebhookCallbackConfigurationService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxWebhookCallbackConfigurationService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxWebhookCallbackConfigurationService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }]; } });

    var WebhookCallbackConfigurationEditorComponent = /** @class */ (function (_super) {
        __extends(WebhookCallbackConfigurationEditorComponent, _super);
        function WebhookCallbackConfigurationEditorComponent(dockedPanelContext, rxGlobalCacheService, rxRecordDefinitionCacheService, rxRecordInstanceService, rxWebhookCallbackConfigurationService, rxOverlayService, rxJsonParserService, rxNotificationService, formBuilder, translateService, injector) {
            var _this = _super.call(this, dockedPanelContext, injector) || this;
            _this.dockedPanelContext = dockedPanelContext;
            _this.rxGlobalCacheService = rxGlobalCacheService;
            _this.rxRecordDefinitionCacheService = rxRecordDefinitionCacheService;
            _this.rxRecordInstanceService = rxRecordInstanceService;
            _this.rxWebhookCallbackConfigurationService = rxWebhookCallbackConfigurationService;
            _this.rxOverlayService = rxOverlayService;
            _this.rxJsonParserService = rxJsonParserService;
            _this.rxNotificationService = rxNotificationService;
            _this.formBuilder = formBuilder;
            _this.translateService = translateService;
            _this.injector = injector;
            _this.defaultControls = {
                configurationName: '',
                bundleId: [],
                processor: []
            };
            return _this;
        }
        WebhookCallbackConfigurationEditorComponent.prototype.ngOnInit = function () {
            var _this = this;
            _super.prototype.ngOnInit.call(this);
            this.webhookCallbackConfigurationForm = this.formBuilder.group(this.defaultControls);
            this.isEditMode = this.dockedPanelContext.getData().isEditMode;
            this.rxGlobalCacheService.getBundleDescriptors().subscribe(function (bundleDescriptors) {
                _this.bundleIdOptions = bundleDescriptors
                    .filter(function (bundleDescriptor) { return bundleDescriptor.isApplication; })
                    .sort(function (a, b) { return a.friendlyName.localeCompare(b.friendlyName); })
                    .map(function (bundleDescriptor) { return ({
                    displayValue: bundleDescriptor.friendlyName,
                    value: bundleDescriptor.id
                }); });
            });
            this.rxRecordDefinitionCacheService
                .getRecordDefinition(RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.name)
                .subscribe(function (recordDefinition) {
                _this.processorOptions = lodash.chain(recordDefinition.fieldDefinitions)
                    .find({
                    id: RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.processor
                })
                    .get('optionNamesById')
                    .map(function (optionName, optionId) { return ({
                    displayValue: optionName,
                    value: optionId
                }); })
                    .value();
            });
            if (!this.isEditMode) {
                this.rxRecordInstanceService
                    .getNew(RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.name)
                    .subscribe(function (recordInstance) { return (_this.recordInstance = recordInstance); });
            }
            else {
                this.rxRecordInstanceService
                    .get(RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.name, this.dockedPanelContext.getData().recordId)
                    .subscribe(function (recordInstance) {
                    _this.recordInstance = recordInstance;
                    _this.setFormControlValues();
                    _this.callbackUrl = [
                        location.origin,
                        'api/rx/application/webhook_callback',
                        _this.recordInstance.fieldInstances[i3.RX_RECORD_DEFINITION.coreFieldIds.id].value,
                        _this.rxOverlayService.getCurrentOverlayContext().tenantId
                    ].join('/');
                    _this.metadataFields = _this.rxJsonParserService.tryParseJson(_this.recordInstance.fieldInstances[RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.configMetadata].value);
                    _this.generateMetadataFieldFormControls();
                });
            }
        };
        WebhookCallbackConfigurationEditorComponent.prototype.isDirty = function () {
            return this.webhookCallbackConfigurationForm.dirty;
        };
        WebhookCallbackConfigurationEditorComponent.prototype.setFormControlValues = function () {
            this.webhookCallbackConfigurationForm
                .get('configurationName')
                .setValue(this.recordInstance.fieldInstances[RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.name].value);
            var bundleOption = lodash.find(this.bundleIdOptions, {
                value: this.recordInstance.fieldInstances[RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.bundleId].value
            });
            this.webhookCallbackConfigurationForm.get('bundleId').setValue([
                {
                    value: bundleOption.value,
                    displayValue: bundleOption.displayValue
                }
            ]);
            var processorOption = lodash.find(this.processorOptions, {
                value: String(this.recordInstance.fieldInstances[RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.processor].value)
            });
            this.webhookCallbackConfigurationForm.get('processor').setValue([
                {
                    value: processorOption.value,
                    displayValue: processorOption.displayValue
                }
            ]);
        };
        WebhookCallbackConfigurationEditorComponent.prototype.removeMetadataFieldFormControls = function () {
            var _this = this;
            Object.keys(this.webhookCallbackConfigurationForm.controls).forEach(function (key) {
                if (!lodash.has(_this.defaultControls, key)) {
                    _this.webhookCallbackConfigurationForm.removeControl(key);
                }
            });
        };
        WebhookCallbackConfigurationEditorComponent.prototype.generateMetadataFieldFormControls = function () {
            var _this = this;
            this.metadataFields.forEach(function (field) {
                _this.webhookCallbackConfigurationForm.addControl(field.name, new i1.FormControl(field.value || ''));
            });
        };
        WebhookCallbackConfigurationEditorComponent.prototype.loadMetadataFields = function () {
            var _this = this;
            this.rxWebhookCallbackConfigurationService.getMetadataFields().subscribe(function (metadataFieldsByProcessorId) {
                _this.metadataFields =
                    metadataFieldsByProcessorId[_this.webhookCallbackConfigurationForm.get('processor').value[0].value];
                _this.removeMetadataFieldFormControls();
                _this.generateMetadataFieldFormControls();
            });
        };
        WebhookCallbackConfigurationEditorComponent.prototype.saveConfiguration = function () {
            var _this = this;
            this.recordInstance.setFieldValue(RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.name, this.webhookCallbackConfigurationForm.get('configurationName').value);
            this.recordInstance.setFieldValue(RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.bundleId, this.webhookCallbackConfigurationForm.get('bundleId').value[0].value);
            this.recordInstance.setFieldValue(RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.processor, this.webhookCallbackConfigurationForm.get('processor').value[0].value);
            lodash.forEach(this.metadataFields, function (field) {
                field.value = _this.webhookCallbackConfigurationForm.get(field.name).value;
            });
            this.recordInstance.setFieldValue(RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.configMetadata, JSON.stringify(this.metadataFields));
            if (this.isEditMode) {
                this.rxRecordInstanceService.save(this.recordInstance).subscribe(function () { return _this.successCallback(); });
            }
            else {
                this.rxRecordInstanceService.create(this.recordInstance).subscribe(function () { return _this.successCallback(); });
            }
        };
        WebhookCallbackConfigurationEditorComponent.prototype.successCallback = function () {
            this.rxNotificationService.addSuccessMessage(this.translateService.instant('com.bmc.arsys.rx.client.admin.webhook-callback-configuration.configurations-saved.message'));
            this.dockedPanelContext.close(null);
        };
        WebhookCallbackConfigurationEditorComponent.prototype.optionFormatter = function (option) {
            return option.displayValue;
        };
        WebhookCallbackConfigurationEditorComponent.prototype.cancel = function () {
            this.dockedPanelContext.dismiss(i1$2.DismissReasons.CLOSE_BTN);
        };
        return WebhookCallbackConfigurationEditorComponent;
    }(i1$1.RxModalClass));
    WebhookCallbackConfigurationEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebhookCallbackConfigurationEditorComponent, deps: [{ token: i1__namespace$1.DockedPanelContext }, { token: i2__namespace.RxGlobalCacheService }, { token: i3__namespace$2.RxRecordDefinitionCacheService }, { token: i3__namespace$2.RxRecordInstanceService }, { token: RxWebhookCallbackConfigurationService }, { token: i2__namespace.RxOverlayService }, { token: i3__namespace.RxJsonParserService }, { token: i2__namespace.RxNotificationService }, { token: i1__namespace$3.FormBuilder }, { token: i4__namespace.TranslateService }, { token: i0__namespace.Injector }], target: i0__namespace.ɵɵFactoryTarget.Component });
    WebhookCallbackConfigurationEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: WebhookCallbackConfigurationEditorComponent, selector: "rx-webhook-callback-configuration", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"dp-body\">\n  <form [formGroup]=\"webhookCallbackConfigurationForm\">\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      rx-id=\"configuration-name\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.webhook-callback-configuration.configuration-name.label' | translate }}\"\n      formControlName=\"configurationName\"\n      required=\"true\"\n    >\n    </adapt-rx-textfield>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.webhook-callback-configuration.bundle-name.label' | translate }}\"\n      rx-id=\"bundle-name\"\n      formControlName=\"bundleId\"\n      [options]=\"bundleIdOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      required=\"true\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-select\n      class=\"form-group d-block\"\n      label=\"{{ 'com.bmc.arsys.rx.client.admin.webhook-callback-configuration.processor.label' | translate }}\"\n      rx-id=\"processor\"\n      formControlName=\"processor\"\n      [options]=\"processorOptions\"\n      [optionFormatter]=\"optionFormatter\"\n      required=\"true\"\n      (onSelectionChange)=\"loadMetadataFields()\"\n    >\n    </adapt-rx-select>\n\n    <adapt-rx-textfield\n      class=\"form-group d-block\"\n      *ngFor=\"let field of metadataFields\"\n      label=\"{{ field.name }}\"\n      [isPassword]=\"field.secure\"\n      formControlName=\"{{ field.name }}\"\n      required=\"true\"\n    >\n    </adapt-rx-textfield>\n\n    <div class=\"form-group\">\n      <label class=\"form-control-label\">{{\n        'com.bmc.arsys.rx.client.admin.webhook-callback-configuration.callback-url.label' | translate\n      }}</label>\n\n      <div class=\"callback-url bg-secondary p-1\" *ngIf=\"isEditMode\">\n        {{ callbackUrl }}\n      </div>\n\n      <adapt-alert\n        *ngIf=\"!isEditMode\"\n        [config]=\"{\n          content: 'com.bmc.arsys.rx.client.admin.webhook-callback-configuration.url-alert.message' | translate,\n          type: 'inline',\n          variant: 'info'\n        }\"\n      ></adapt-alert>\n    </div>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button\n    type=\"button\"\n    adapt-button\n    btn-type=\"primary\"\n    rx-id=\"save-button\"\n    class=\"mr-2\"\n    [disabled]=\"webhookCallbackConfigurationForm.pristine || webhookCallbackConfigurationForm.invalid\"\n    (click)=\"saveConfiguration()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button type=\"button\" adapt-button (click)=\"cancel()\" btn-type=\"secondary\" rx-id=\"cancel-button\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", styles: [".callback-url{word-break:break-all}\n"], components: [{ type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptAlertComponent, selector: "adapt-alert", inputs: ["config"], outputs: ["onClose"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebhookCallbackConfigurationEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-webhook-callback-configuration',
                        templateUrl: './webhook-callback-configuration-editor.component.html',
                        styleUrls: ['./webhook-callback-configuration-editor.component.scss']
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.DockedPanelContext }, { type: i2__namespace.RxGlobalCacheService }, { type: i3__namespace$2.RxRecordDefinitionCacheService }, { type: i3__namespace$2.RxRecordInstanceService }, { type: RxWebhookCallbackConfigurationService }, { type: i2__namespace.RxOverlayService }, { type: i3__namespace.RxJsonParserService }, { type: i2__namespace.RxNotificationService }, { type: i1__namespace$3.FormBuilder }, { type: i4__namespace.TranslateService }, { type: i0__namespace.Injector }]; } });

    var WebhookCallbackConfigurationAdminComponent = /** @class */ (function () {
        function WebhookCallbackConfigurationAdminComponent(formBuilder, rxModalService, rxNotificationService, rxRecordInstanceService, translateService) {
            this.formBuilder = formBuilder;
            this.rxModalService = rxModalService;
            this.rxNotificationService = rxNotificationService;
            this.rxRecordInstanceService = rxRecordInstanceService;
            this.translateService = translateService;
        }
        WebhookCallbackConfigurationAdminComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.gridConfig = rxjs.of({
                actionButtons: [
                    {
                        label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                        style: 'tertiary',
                        icon: 'trash',
                        actions: [
                            {
                                name: function () { return _this.deleteConfigurations(); }
                            }
                        ]
                    }
                ],
                recordDefinitionName: RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.name,
                enableRowSelection: i7.RowSelectionMode.Multiple,
                columns: this.getColumns(),
                styles: 'flex-fill'
            });
        };
        WebhookCallbackConfigurationAdminComponent.prototype.editConfiguration = function (selectedRecord) {
            this.openDockedPanel(true, selectedRecord[i3.RX_RECORD_DEFINITION.coreFieldIds.id]);
        };
        WebhookCallbackConfigurationAdminComponent.prototype.createConfiguration = function () {
            this.openDockedPanel(false);
        };
        WebhookCallbackConfigurationAdminComponent.prototype.deleteConfigurations = function () {
            var _this = this;
            this.rxModalService
                .confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.client.admin.webhook-callback-configuration.delete-confirmation.message')
            })
                .then(function (result) {
                if (result) {
                    var deleteRequests$_1 = [];
                    lodash.map(_this.grid.api.getSelectedRows(), function (record) {
                        deleteRequests$_1.push(_this.rxRecordInstanceService.delete(RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.name, record[i3.RX_RECORD_DEFINITION.coreFieldIds.id]));
                    });
                    rxjs.forkJoin(deleteRequests$_1).subscribe(function () {
                        _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.webhook-callback-configuration.configurations-deleted.message'));
                        _this.grid.api.refresh().subscribe();
                    });
                }
            });
        };
        WebhookCallbackConfigurationAdminComponent.prototype.getColumns = function () {
            var _this = this;
            return [
                {
                    index: 0,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.name.label'),
                    fieldId: String(RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.name),
                    clickable: true,
                    actions: [
                        {
                            name: function (previousAction, selectedRow) {
                                _this.editConfiguration(selectedRow);
                            }
                        }
                    ]
                },
                {
                    index: 1,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.webhook-callback-configuration.application.label'),
                    fieldId: String(RX_WEBHOOK_CALLBACK_CONFIGURATION.recordDefinition.fieldIds.processor)
                },
                {
                    index: 2,
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.webhook-callback-configuration.created-date.label'),
                    fieldId: String(i3.RX_RECORD_DEFINITION.coreFieldIds.createdDate)
                }
            ];
        };
        WebhookCallbackConfigurationAdminComponent.prototype.openDockedPanel = function (isEditMode, recordId) {
            var _this = this;
            return this.rxModalService
                .openDockedPanel({
                title: this.translateService.instant('com.bmc.arsys.rx.client.admin.webhook-callback-configuration.header.title'),
                content: WebhookCallbackConfigurationEditorComponent,
                data: {
                    isEditMode: isEditMode,
                    recordId: recordId
                }
            })
                .then(function () {
                _this.grid.api.refresh().subscribe();
            })
                .catch(lodash.noop);
        };
        return WebhookCallbackConfigurationAdminComponent;
    }());
    WebhookCallbackConfigurationAdminComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebhookCallbackConfigurationAdminComponent, deps: [{ token: i1__namespace$3.FormBuilder }, { token: i1__namespace.RxModalService }, { token: i2__namespace.RxNotificationService }, { token: i3__namespace$2.RxRecordInstanceService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    WebhookCallbackConfigurationAdminComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: WebhookCallbackConfigurationAdminComponent, selector: "rx-admin-webhook-callback-configuration", viewQueries: [{ propertyName: "grid", first: true, predicate: ["grid"], descendants: true, static: true }], ngImport: i0__namespace, template: "<rx-admin-settings\n  header=\"{{ 'com.bmc.arsys.rx.client.admin.webhook-callback-configuration.header.title' | translate }}\"\n>\n  <button\n    type=\"button\"\n    adapt-button\n    btn-type=\"tertiary\"\n    class=\"d-icon-plus_circle align-self-start\"\n    rx-id=\"new-configuration-button\"\n    (click)=\"this.createConfiguration()\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.new.label' | translate }}\n  </button>\n\n  <rx-record-grid #grid [config]=\"gridConfig\"></rx-record-grid>\n</rx-admin-settings>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }], pipes: { "translate": i4__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebhookCallbackConfigurationAdminComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-admin-webhook-callback-configuration',
                        templateUrl: './webhook-callback-configuration.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.FormBuilder }, { type: i1__namespace.RxModalService }, { type: i2__namespace.RxNotificationService }, { type: i3__namespace$2.RxRecordInstanceService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { grid: [{
                    type: i0.ViewChild,
                    args: ['grid', { static: true }]
                }] } });

    var WebhookCallbackConfigurationRegistrationModule = /** @class */ (function () {
        function WebhookCallbackConfigurationRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-admin-webhook-callback-configuration',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(WebhookCallbackConfigurationAdminComponent),
                name: 'Webhook callback configuration',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return WebhookCallbackConfigurationRegistrationModule;
    }());
    WebhookCallbackConfigurationRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebhookCallbackConfigurationRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    WebhookCallbackConfigurationRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebhookCallbackConfigurationRegistrationModule, declarations: [WebhookCallbackConfigurationAdminComponent, WebhookCallbackConfigurationEditorComponent], imports: [i8.CommonModule,
            i4.AdminSettingsModule,
            i7.RecordGridModule,
            i1$2.AdaptButtonModule,
            i1.ReactiveFormsModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptRxSelectModule,
            i1$2.AdaptAlertModule,
            i4$1.TranslateModule] });
    WebhookCallbackConfigurationRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebhookCallbackConfigurationRegistrationModule, imports: [[
                i8.CommonModule,
                i4.AdminSettingsModule,
                i7.RecordGridModule,
                i1$2.AdaptButtonModule,
                i1.ReactiveFormsModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptRxSelectModule,
                i1$2.AdaptAlertModule,
                i4$1.TranslateModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: WebhookCallbackConfigurationRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [WebhookCallbackConfigurationAdminComponent, WebhookCallbackConfigurationEditorComponent],
                        imports: [
                            i8.CommonModule,
                            i4.AdminSettingsModule,
                            i7.RecordGridModule,
                            i1$2.AdaptButtonModule,
                            i1.ReactiveFormsModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptRxSelectModule,
                            i1$2.AdaptAlertModule,
                            i4$1.TranslateModule
                        ],
                        entryComponents: [WebhookCallbackConfigurationAdminComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var RxSearchFiltersService = /** @class */ (function () {
        function RxSearchFiltersService(httpClient) {
            this.httpClient = httpClient;
            this.apiPath = '/api/com.bmc.dsm.chatbot/comaround';
        }
        RxSearchFiltersService.prototype.getSearchFilters = function () {
            return this.httpClient
                .get(this.apiPath + "/search-filters")
                .pipe(operators.map(function (items) { return ({ data: items, totalSize: items.length }); }));
        };
        RxSearchFiltersService.prototype.deleteSearchFilters = function (ids) {
            var _this = this;
            return rxjs.forkJoin(ids.map(function (id) { return _this.httpClient.delete(_this.apiPath + "/search-filters/" + id); }));
        };
        RxSearchFiltersService.prototype.createSearchFilter = function (filter) {
            return this.httpClient.post(this.apiPath + "/search-filters", filter);
        };
        RxSearchFiltersService.prototype.updateSearchFilter = function (filter) {
            return this.httpClient.put(this.apiPath + "/search-filters", filter);
        };
        RxSearchFiltersService.prototype.getTags = function () {
            return this.httpClient.get(this.apiPath + "/api/tags");
        };
        return RxSearchFiltersService;
    }());
    RxSearchFiltersService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxSearchFiltersService, deps: [{ token: i1__namespace$2.HttpClient }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    RxSearchFiltersService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxSearchFiltersService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxSearchFiltersService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.HttpClient }]; } });

    var SearchFiltersEditorComponent = /** @class */ (function (_super) {
        __extends(SearchFiltersEditorComponent, _super);
        function SearchFiltersEditorComponent(rxSearchFiltersService, dockedPanelContext, injector, rxNotificationService, translateService, rxModalService) {
            var _this = _super.call(this, dockedPanelContext, injector) || this;
            _this.rxSearchFiltersService = rxSearchFiltersService;
            _this.dockedPanelContext = dockedPanelContext;
            _this.injector = injector;
            _this.rxNotificationService = rxNotificationService;
            _this.translateService = translateService;
            _this.rxModalService = rxModalService;
            _this.tagsOperators = ['OR', 'AND'];
            _this.isEditMode = Boolean(_this.dockedPanelContext.getData());
            _this.tags$ = _this.rxSearchFiltersService.getTags().pipe(operators.shareReplay(1));
            _this.searchFilterEditorFormGroup = new i1.FormGroup({
                name: new i1.FormControl('', i1$2.AdaptValidators.required()),
                tagsOperator: new i1.FormControl([], i1$2.AdaptValidators.required()),
                tags: new i1.FormControl([], i1$2.AdaptValidators.required())
            });
            _this.tagSuggestions = function (text$) { return text$.pipe(operators.debounceTime(200), operators.distinctUntilChanged(), operators.withLatestFrom(_this.tags$), operators.map(function (_a) {
                var _b = __read(_a, 2), term = _b[0], tags = _b[1];
                return tags.filter(function (tag) { return tag.startsWith(term); });
            })); };
            return _this;
        }
        SearchFiltersEditorComponent.prototype.ngOnInit = function () {
            if (this.isEditMode) {
                this.searchFilterEditorFormGroup.setValue({
                    name: this.dockedPanelContext.getData().name,
                    tagsOperator: [this.dockedPanelContext.getData().tagsOperator],
                    tags: this.dockedPanelContext.getData().tags
                });
            }
        };
        SearchFiltersEditorComponent.prototype.save = function () {
            var _this = this;
            var id = (this.dockedPanelContext.getData() || {}).id;
            var _a = __read(this.searchFilterEditorFormGroup.value.tagsOperator, 1), tagsOperator = _a[0];
            var filter = Object.assign(Object.assign({ id: id }, this.searchFilterEditorFormGroup.getRawValue()), { tagsOperator: tagsOperator });
            var operation = this.isEditMode
                ? this.rxSearchFiltersService.updateSearchFilter(filter)
                : this.rxSearchFiltersService.createSearchFilter(filter);
            operation.subscribe(function () {
                _this.close();
                _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.common.saved-successfully.message'));
            });
        };
        SearchFiltersEditorComponent.prototype.close = function () {
            this.dockedPanelContext.close(i1$2.DismissReasons.CLOSE_BTN);
        };
        SearchFiltersEditorComponent.prototype.cancel = function () {
            var _this = this;
            if (this.searchFilterEditorFormGroup.dirty) {
                this.rxModalService
                    .confirm({
                    title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                    modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                    message: this.translateService.instant('com.bmc.arsys.rx.client.common.unsaved-data.message')
                })
                    .then(function (result) {
                    if (result) {
                        _this.close();
                    }
                });
            }
            else {
                this.close();
            }
        };
        return SearchFiltersEditorComponent;
    }(i1$1.RxModalClass));
    SearchFiltersEditorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SearchFiltersEditorComponent, deps: [{ token: RxSearchFiltersService }, { token: i1__namespace$1.DockedPanelContext }, { token: i0__namespace.Injector }, { token: i2__namespace.RxNotificationService }, { token: i4__namespace.TranslateService }, { token: i1__namespace.RxModalService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    SearchFiltersEditorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: SearchFiltersEditorComponent, selector: "rx-search-filters-editor", usesInheritance: true, ngImport: i0__namespace, template: "<div class=\"dp-body\">\n  <form [formGroup]=\"searchFilterEditorFormGroup\">\n    <div class=\"form-group\">\n      <adapt-rx-textfield\n        [formControlName]=\"'name'\"\n        [label]=\"'com.bmc.arsys.rx.client.admin.search-filters-editor.form-control.name.label' | translate\"\n      ></adapt-rx-textfield>\n    </div>\n\n    <div class=\"form-group\">\n      <adapt-rx-select\n        [formControlName]=\"'tagsOperator'\"\n        [options]=\"tagsOperators\"\n        [label]=\"'com.bmc.arsys.rx.client.admin.search-filters-editor.form-control.relationship.label' | translate\"\n        required\n      ></adapt-rx-select>\n    </div>\n\n    <div class=\"form-group\">\n      <adapt-tag-field\n        [formControlName]=\"'tags'\"\n        required\n        [suppressManual]=\"true\"\n        [label]=\"'com.bmc.arsys.rx.client.admin.search-filters-editor.form-control.tags.label' | translate\"\n        placeholder=\"\"\n        [search]=\"tagSuggestions\"\n        [openDropdownOnFocus]=\"true\"\n      ></adapt-tag-field>\n    </div>\n  </form>\n</div>\n\n<div class=\"dp-footer\">\n  <button\n    class=\"btn btn-primary mr-2\"\n    (click)=\"save()\"\n    [disabled]=\"this.searchFilterEditorFormGroup.invalid || !this.searchFilterEditorFormGroup.dirty\"\n  >\n    {{ 'com.bmc.arsys.rx.client.common.save.label' | translate }}\n  </button>\n\n  <button class=\"btn btn-secondary\" (click)=\"cancel()\">\n    {{ 'com.bmc.arsys.rx.client.common.cancel.label' | translate }}\n  </button>\n</div>\n", components: [{ type: i1__namespace$1.AdaptRxTextfieldComponent, selector: "adapt-rx-textfield", inputs: ["prepend", "append", "isPassword", "autocomplete", "placeholder", "size", "fieldTagText", "fieldTagType", "showValidState", "showValidStateIcon", "showInvalidStateIcon", "validStateMessage", "disabledStyleForReadonlyState"] }, { type: i1__namespace$1.AdaptRxSelectComponent, selector: "adapt-rx-select", inputs: ["options", "emptyOption", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "focusFirst", "texts", "multiple", "singleSelectStyle", "enableFilter", "inline", "selectAllButton", "deselectAllButton", "loadMoreButton", "loadMoreCallback", "loadMoreInProgress", "loadingState", "placeholder", "size", "closeOnSelect", "placement", "appendToBody", "popupMaxHeight", "popupClass", "pageSize", "ariaInvalid", "virtualScroll", "virtualScrollItemSize", "virtualScrollTemplateCacheSize", "minBufferPx", "maxBufferPx"], outputs: ["onSelectionChange", "onPopupOpenChange", "onFilterValueChange"] }, { type: i1__namespace$1.AdaptMetatagComponent, selector: "adapt-metatag, adapt-tag-field", inputs: ["prefix", "suffix", "maxTagLength", "truncateConfig", "id", "testID", "name", "ariaLabel", "search", "maxHeight", "suppressManual", "label", "placeholder", "mainErrorText", "warningStateText", "width", "errorCheck", "warningCheck", "selectItemTemplate", "tagTemplate", "replaceModelOnWrite", "delimiterSymbol", "popupClass", "disabledInput", "openDropdownOnFocus", "selectItemFormatter", "fullWidthEdit", "tagStyleFormatter"], outputs: ["focus", "blur", "removeTag", "addTag", "initTagEditing"] }], directives: [{ type: i1__namespace$3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1__namespace$3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "translate": i4__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SearchFiltersEditorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-search-filters-editor',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        templateUrl: './search-filters-editor.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: RxSearchFiltersService }, { type: i1__namespace$1.DockedPanelContext }, { type: i0__namespace.Injector }, { type: i2__namespace.RxNotificationService }, { type: i4__namespace.TranslateService }, { type: i1__namespace.RxModalService }]; } });

    var RxSearchFiltersComponent = /** @class */ (function (_super) {
        __extends(RxSearchFiltersComponent, _super);
        function RxSearchFiltersComponent(rxModalService, rxNotificationService, adaptDockedPanelService, rxSearchFiltersService, translateService) {
            var _this = _super.call(this) || this;
            _this.rxModalService = rxModalService;
            _this.rxNotificationService = rxNotificationService;
            _this.adaptDockedPanelService = adaptDockedPanelService;
            _this.rxSearchFiltersService = rxSearchFiltersService;
            _this.translateService = translateService;
            _this.searchFilters = [];
            return _this;
        }
        RxSearchFiltersComponent.prototype.ngOnInit = function () {
            this.initializeRecordGrid();
        };
        RxSearchFiltersComponent.prototype.initializeRecordGrid = function () {
            var _this = this;
            var gridColumns = [
                {
                    fieldId: 'id',
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.search-filters.grid.column.id.title'),
                    visible: false
                },
                {
                    fieldId: 'name',
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.search-filters.grid.column.search-filter-name.title'),
                    clickable: true,
                    actions: [
                        {
                            name: function (previousActionResult, rowDataItem) {
                                _this.openEditor(rowDataItem);
                            }
                        }
                    ]
                },
                {
                    fieldId: 'tagsOperator',
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.search-filters.grid.column.relationship.title')
                },
                {
                    fieldId: 'tags',
                    title: this.translateService.instant('com.bmc.arsys.rx.client.admin.search-filters.grid.column.tags.title'),
                    cellTemplate: this.tagsTemplate
                }
            ];
            var gridRecordDefinition = {
                fieldDefinitions: [
                    {
                        id: 'id',
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'name',
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'tagsOperator',
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    },
                    {
                        id: 'tags',
                        resourceType: i3.RX_RECORD_DEFINITION.resourceTypes.character
                    }
                ]
            };
            var actionButtons = [
                {
                    label: this.translateService.instant('com.bmc.arsys.rx.client.common.delete.label'),
                    style: 'tertiary',
                    iconCls: 'trash',
                    actions: [{ name: function () { return _this.deleteSearchFilters(); } }]
                }
            ];
            this.recordGridConfig$ = rxjs.of({
                columns: gridColumns,
                emptyStateLabelText: this.translateService.instant('com.bmc.arsys.rx.client.admin.search-filters.grid.empty-state.label'),
                enableRowSelection: i7.RowSelectionMode.Multiple,
                enableFiltering: false,
                recordIdField: 'id',
                styles: 'flex-fill',
                useExternalFiltering: false,
                getRecordDefinition: function () { return rxjs.of(gridRecordDefinition); },
                getData: function () { return _this.rxSearchFiltersService.getSearchFilters(); },
                actionButtons: actionButtons,
                filterMode: i7.RecordGridFilterMode.Basic
            });
        };
        RxSearchFiltersComponent.prototype.deleteSearchFilters = function () {
            var _this = this;
            var searchFilterIds = this.grid.api.getSelectedRows().map(function (row) { return row.id; });
            this.rxModalService
                .confirm({
                title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),
                modalStyle: i1$1.RX_MODAL.modalStyles.warning,
                message: this.translateService.instant('com.bmc.arsys.rx.client.admin.search-filters.delete-confirmation.message')
            })
                .then(function (result) {
                if (result) {
                    _this.rxSearchFiltersService.deleteSearchFilters(searchFilterIds).subscribe(function () {
                        _this.rxNotificationService.addSuccessMessage(_this.translateService.instant('com.bmc.arsys.rx.client.admin.search-filters.delete-success.message'));
                        _this.grid.api.refresh().subscribe();
                    });
                }
            });
        };
        RxSearchFiltersComponent.prototype.openEditor = function (data) {
            var _this = this;
            this.adaptDockedPanelService
                .open({
                title: this.translateService.instant(data
                    ? 'com.bmc.arsys.rx.client.admin.search-filters-editor.edit.title'
                    : 'com.bmc.arsys.rx.client.admin.search-filters-editor.new.title'),
                content: SearchFiltersEditorComponent,
                data: data
            })
                .then(function () {
                _this.grid.api.refresh().subscribe();
            })
                .catch(lodash.noop);
        };
        return RxSearchFiltersComponent;
    }(i4$2.BaseViewComponent));
    RxSearchFiltersComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxSearchFiltersComponent, deps: [{ token: i1__namespace.RxModalService }, { token: i2__namespace.RxNotificationService }, { token: i1__namespace$1.AdaptDockedPanelService }, { token: RxSearchFiltersService }, { token: i4__namespace.TranslateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    RxSearchFiltersComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.3", type: RxSearchFiltersComponent, selector: "rx-search-filters", viewQueries: [{ propertyName: "grid", first: true, predicate: i7.RecordGridComponent, descendants: true, static: true }, { propertyName: "tagsTemplate", first: true, predicate: ["tagsTemplate"], descendants: true, static: true }], usesInheritance: true, ngImport: i0__namespace, template: "<rx-admin-settings header=\"{{ 'com.bmc.arsys.rx.client.admin.search-filters.header.label' | translate }}\">\n  <div>\n    <button adapt-button type=\"button\" btn-type=\"tertiary\" (click)=\"openEditor()\">\n      <span class=\"d-icon-plus_circle\"></span>\n      {{ 'com.bmc.arsys.rx.client.admin.search-filters.new-search-filter.button.label' | translate }}\n    </button>\n  </div>\n\n  <rx-record-grid class=\"mt-2 h-100\" [config]=\"recordGridConfig$\"></rx-record-grid>\n</rx-admin-settings>\n\n<ng-template #tagsTemplate let-dataItem=\"dataItem\">\n  <div class=\"d-flex flex-row flex-wrap\">\n    <ng-container *ngFor=\"let tag of dataItem.tags\">\n      <adapt-tag [type]=\"'active'\" [removable]=\"false\">\n        {{ tag | truncate: 10 }}\n      </adapt-tag>\n    </ng-container>\n  </div>\n</ng-template>\n", components: [{ type: i4__namespace$1.AdminSettingsComponent, selector: "rx-admin-settings", inputs: ["header", "busy"] }, { type: i1__namespace$1.AdaptButtonComponent, selector: "adapt-button, button[adapt-button], a[adapt-button]", inputs: ["btn-type", "size", "disabled", "type", "tabIndex"], exportAs: ["adaptBtn"] }, { type: i7__namespace.RecordGridComponent, selector: "rx-record-grid", inputs: ["config"], outputs: ["dataLoaded"] }, { type: i1__namespace$1.AdaptTagComponent, selector: "adapt-tag", inputs: ["type", "removable", "disabled"], outputs: ["remove"] }], directives: [{ type: i8__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "translate": i4__namespace.TranslatePipe, "truncate": i1__namespace$1.AdaptTruncatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: RxSearchFiltersComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'rx-search-filters',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        templateUrl: './search-filters.component.html'
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.RxModalService }, { type: i2__namespace.RxNotificationService }, { type: i1__namespace$1.AdaptDockedPanelService }, { type: RxSearchFiltersService }, { type: i4__namespace.TranslateService }]; }, propDecorators: { grid: [{
                    type: i0.ViewChild,
                    args: [i7.RecordGridComponent, { static: true }]
                }], tagsTemplate: [{
                    type: i0.ViewChild,
                    args: ['tagsTemplate', { static: true }]
                }] } });

    var SearchFiltersRegistrationModule = /** @class */ (function () {
        function SearchFiltersRegistrationModule(componentFactoryResolver, rxViewComponentRegistryService) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.rxViewComponentRegistryService = rxViewComponentRegistryService;
            rxViewComponentRegistryService.register({
                type: 'rx-search-filters',
                componentFactory: this.componentFactoryResolver.resolveComponentFactory(RxSearchFiltersComponent),
                name: 'Search filters',
                isPageComponent: true,
                availableInBundles: [i2.RX_APPLICATION.settingsBundleId]
            });
        }
        return SearchFiltersRegistrationModule;
    }());
    SearchFiltersRegistrationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SearchFiltersRegistrationModule, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i1__namespace$4.RxViewComponentRegistryService }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    SearchFiltersRegistrationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SearchFiltersRegistrationModule, declarations: [RxSearchFiltersComponent, SearchFiltersEditorComponent], imports: [i8.CommonModule,
            i1.ReactiveFormsModule,
            i4$1.TranslateModule,
            i1$2.AdaptButtonModule,
            i1$2.AdaptMetatagModule,
            i1$2.AdaptRxFormControlModule,
            i1$2.AdaptRxSelectModule,
            i1$2.AdaptRxTextfieldModule,
            i1$2.AdaptTagModule,
            i1$2.AdaptTruncatePipeModule,
            i4.AdminSettingsModule,
            i7.RecordGridModule], exports: [RxSearchFiltersComponent] });
    SearchFiltersRegistrationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SearchFiltersRegistrationModule, imports: [[
                i8.CommonModule,
                i1.ReactiveFormsModule,
                i4$1.TranslateModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptMetatagModule,
                i1$2.AdaptRxFormControlModule,
                i1$2.AdaptRxSelectModule,
                i1$2.AdaptRxTextfieldModule,
                i1$2.AdaptTagModule,
                i1$2.AdaptTruncatePipeModule,
                i4.AdminSettingsModule,
                i7.RecordGridModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: SearchFiltersRegistrationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RxSearchFiltersComponent, SearchFiltersEditorComponent],
                        imports: [
                            i8.CommonModule,
                            i1.ReactiveFormsModule,
                            i4$1.TranslateModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptMetatagModule,
                            i1$2.AdaptRxFormControlModule,
                            i1$2.AdaptRxSelectModule,
                            i1$2.AdaptRxTextfieldModule,
                            i1$2.AdaptTagModule,
                            i1$2.AdaptTruncatePipeModule,
                            i4.AdminSettingsModule,
                            i7.RecordGridModule
                        ],
                        exports: [RxSearchFiltersComponent],
                        entryComponents: [RxSearchFiltersComponent]
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i1__namespace$4.RxViewComponentRegistryService }]; } });

    var AdminComponentsModule = /** @class */ (function () {
        function AdminComponentsModule() {
        }
        return AdminComponentsModule;
    }());
    AdminComponentsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AdminComponentsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AdminComponentsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AdminComponentsModule, declarations: [AdminSettingsExplorerComponent,
            AdminCommonSettingsComponent,
            AdminCommonSettingsEditorComponent,
            AdminCommonSettingsBladeComponent], imports: [i1$2.AdaptDockedPanelModule,
            i1$2.AdaptModalModule,
            i1$2.AdaptTreeModule,
            i1$2.AdaptEmptyStateModule,
            i1$2.AdaptSidebarModule,
            i1$2.AdaptButtonModule, i1__namespace$1.AdaptBusyModule, i1$2.AdaptAccordionModule,
            BmcServiceCloudAccountRegistrationModule,
            AdminComponentsRoutingModule,
            i4.AdminSettingsModule,
            ApplicationIssuesRegistrationModule,
            ApprovalConfigurationRegistrationModule,
            ApprovalNotificationsRegistrationModule,
            ChatbotsRegistrationModule,
            CognitiveConsumptionRegistrationModule,
            CognitiveSearchRegistrationModule,
            CognitiveServiceRegistrationModule,
            CognitiveTrainingRegistrationModule,
            ComaroundKnowledgeRegistrationModule,
            i8.CommonModule,
            ConnectorConfigurationRegistrationModule,
            ConnectorMappingRegistrationModule,
            DataSourceConnectionsRegistrationModule,
            DataSourceMappingModule,
            EmailProfilesRegistrationModule,
            i1.FormsModule,
            FunctionalRolesRegistrationModule,
            IframeSecurityRegistrationModule,
            IssueReportingConfigurationModule,
            JitterbitApisRegistrationModule,
            JitterbitConfigurationRegistrationModule,
            ManageTenantRegistrationModule,
            MulesoftApisRegistrationModule,
            MulesoftConfigurationRegistrationModule,
            OutgoingMailboxStatusRegistrationModule,
            i7.RecordGridModule,
            RolePermissionsRegistrationModule,
            RulePoolManagementRegistrationModule,
            i4$2.RuntimeViewModule,
            i4.RxFormBuilderModule,
            i1$1.RxBusyIndicatorModule,
            ServerInformationRegistrationModule,
            ServerLogsRegistrationModule,
            ServicesProviderRegionRegistrationModule,
            SummarizationServiceRegistrationModule,
            SummarizationTestingRegistrationModule,
            RealTimeTranslationRegistrationModule,
            RssoOauthRegistrationModule,
            i4$1.TranslateModule,
            VirtualChatConfigurationRegistrationModule,
            i4$4.ViewActionsModule,
            i7.ViewComponentsModule,
            WebApiMappingRegistrationModule,
            WebApiConnectionsRegistrationModule,
            WebhookCallbackConfigurationRegistrationModule,
            ToneAnalysisTestingRegistrationModule,
            PermissionsPolicyHeaderRegistrationModule,
            HkmAccessMappingRegistrationModule,
            SearchFiltersRegistrationModule] });
    AdminComponentsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AdminComponentsModule, providers: [RxAdminCommonSettingsService], imports: [[
                i1$2.AdaptDockedPanelModule,
                i1$2.AdaptModalModule,
                i1$2.AdaptTreeModule,
                i1$2.AdaptEmptyStateModule,
                i1$2.AdaptSidebarModule,
                i1$2.AdaptButtonModule,
                i1$2.AdaptBusyModule.forRoot(),
                i1$2.AdaptAccordionModule,
                BmcServiceCloudAccountRegistrationModule,
                AdminComponentsRoutingModule,
                i4.AdminSettingsModule,
                ApplicationIssuesRegistrationModule,
                ApprovalConfigurationRegistrationModule,
                ApprovalNotificationsRegistrationModule,
                ChatbotsRegistrationModule,
                CognitiveConsumptionRegistrationModule,
                CognitiveSearchRegistrationModule,
                CognitiveServiceRegistrationModule,
                CognitiveTrainingRegistrationModule,
                ComaroundKnowledgeRegistrationModule,
                i8.CommonModule,
                ConnectorConfigurationRegistrationModule,
                ConnectorMappingRegistrationModule,
                DataSourceConnectionsRegistrationModule,
                DataSourceMappingModule,
                EmailProfilesRegistrationModule,
                i1.FormsModule,
                FunctionalRolesRegistrationModule,
                IframeSecurityRegistrationModule,
                IssueReportingConfigurationModule,
                JitterbitApisRegistrationModule,
                JitterbitConfigurationRegistrationModule,
                ManageTenantRegistrationModule,
                MulesoftApisRegistrationModule,
                MulesoftConfigurationRegistrationModule,
                OutgoingMailboxStatusRegistrationModule,
                i7.RecordGridModule,
                RolePermissionsRegistrationModule,
                RulePoolManagementRegistrationModule,
                i4$2.RuntimeViewModule,
                i4.RxFormBuilderModule,
                i1$1.RxBusyIndicatorModule,
                ServerInformationRegistrationModule,
                ServerLogsRegistrationModule,
                ServicesProviderRegionRegistrationModule,
                SummarizationServiceRegistrationModule,
                SummarizationTestingRegistrationModule,
                RealTimeTranslationRegistrationModule,
                RssoOauthRegistrationModule,
                i4$1.TranslateModule,
                VirtualChatConfigurationRegistrationModule,
                i4$4.ViewActionsModule,
                i7.ViewComponentsModule,
                WebApiMappingRegistrationModule,
                WebApiConnectionsRegistrationModule,
                WebhookCallbackConfigurationRegistrationModule,
                ToneAnalysisTestingRegistrationModule,
                PermissionsPolicyHeaderRegistrationModule,
                HkmAccessMappingRegistrationModule,
                SearchFiltersRegistrationModule
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.3", ngImport: i0__namespace, type: AdminComponentsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i1$2.AdaptDockedPanelModule,
                            i1$2.AdaptModalModule,
                            i1$2.AdaptTreeModule,
                            i1$2.AdaptEmptyStateModule,
                            i1$2.AdaptSidebarModule,
                            i1$2.AdaptButtonModule,
                            i1$2.AdaptBusyModule.forRoot(),
                            i1$2.AdaptAccordionModule,
                            BmcServiceCloudAccountRegistrationModule,
                            AdminComponentsRoutingModule,
                            i4.AdminSettingsModule,
                            ApplicationIssuesRegistrationModule,
                            ApprovalConfigurationRegistrationModule,
                            ApprovalNotificationsRegistrationModule,
                            ChatbotsRegistrationModule,
                            CognitiveConsumptionRegistrationModule,
                            CognitiveSearchRegistrationModule,
                            CognitiveServiceRegistrationModule,
                            CognitiveTrainingRegistrationModule,
                            ComaroundKnowledgeRegistrationModule,
                            i8.CommonModule,
                            ConnectorConfigurationRegistrationModule,
                            ConnectorMappingRegistrationModule,
                            DataSourceConnectionsRegistrationModule,
                            DataSourceMappingModule,
                            EmailProfilesRegistrationModule,
                            i1.FormsModule,
                            FunctionalRolesRegistrationModule,
                            IframeSecurityRegistrationModule,
                            IssueReportingConfigurationModule,
                            JitterbitApisRegistrationModule,
                            JitterbitConfigurationRegistrationModule,
                            ManageTenantRegistrationModule,
                            MulesoftApisRegistrationModule,
                            MulesoftConfigurationRegistrationModule,
                            OutgoingMailboxStatusRegistrationModule,
                            i7.RecordGridModule,
                            RolePermissionsRegistrationModule,
                            RulePoolManagementRegistrationModule,
                            i4$2.RuntimeViewModule,
                            i4.RxFormBuilderModule,
                            i1$1.RxBusyIndicatorModule,
                            ServerInformationRegistrationModule,
                            ServerLogsRegistrationModule,
                            ServicesProviderRegionRegistrationModule,
                            SummarizationServiceRegistrationModule,
                            SummarizationTestingRegistrationModule,
                            RealTimeTranslationRegistrationModule,
                            RssoOauthRegistrationModule,
                            i4$1.TranslateModule,
                            VirtualChatConfigurationRegistrationModule,
                            i4$4.ViewActionsModule,
                            i7.ViewComponentsModule,
                            WebApiMappingRegistrationModule,
                            WebApiConnectionsRegistrationModule,
                            WebhookCallbackConfigurationRegistrationModule,
                            ToneAnalysisTestingRegistrationModule,
                            PermissionsPolicyHeaderRegistrationModule,
                            HkmAccessMappingRegistrationModule,
                            SearchFiltersRegistrationModule
                        ],
                        providers: [RxAdminCommonSettingsService],
                        declarations: [
                            AdminSettingsExplorerComponent,
                            AdminCommonSettingsComponent,
                            AdminCommonSettingsEditorComponent,
                            AdminCommonSettingsBladeComponent
                        ]
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AdminComponentsModule = AdminComponentsModule;
    exports.ApplicationIssuesAdminComponent = ApplicationIssuesAdminComponent;
    exports.ApplicationIssuesRegistrationModule = ApplicationIssuesRegistrationModule;
    exports.ApprovalConfigurationAdminComponent = ApprovalConfigurationAdminComponent;
    exports.ApprovalConfigurationRegistrationModule = ApprovalConfigurationRegistrationModule;
    exports.ApprovalNotificationsComponent = ApprovalNotificationsComponent;
    exports.ApprovalNotificationsRegistrationModule = ApprovalNotificationsRegistrationModule;
    exports.ChatbotsAdminComponent = ChatbotsAdminComponent;
    exports.ChatbotsRegistrationModule = ChatbotsRegistrationModule;
    exports.CloseDuplicateIssuesComponent = CloseDuplicateIssuesComponent;
    exports.CognitiveConsumptionAdminComponent = CognitiveConsumptionAdminComponent;
    exports.CognitiveConsumptionRegistrationModule = CognitiveConsumptionRegistrationModule;
    exports.CognitiveServiceAdminComponent = CognitiveServiceAdminComponent;
    exports.CognitiveServiceRegistrationModule = CognitiveServiceRegistrationModule;
    exports.CognitiveTrainingAdminComponent = CognitiveTrainingAdminComponent;
    exports.CognitiveTrainingRegistrationModule = CognitiveTrainingRegistrationModule;
    exports.ConnectorConfigurationAdminComponent = ConnectorConfigurationAdminComponent;
    exports.ConnectorConfigurationRegistrationModule = ConnectorConfigurationRegistrationModule;
    exports.ConnectorMappingAdminComponent = ConnectorMappingAdminComponent;
    exports.ConnectorMappingRegistrationModule = ConnectorMappingRegistrationModule;
    exports.DataSourceConnectionsAdminComponent = DataSourceConnectionsAdminComponent;
    exports.DataSourceConnectionsRegistrationModule = DataSourceConnectionsRegistrationModule;
    exports.DataSourceMappingAdminComponent = DataSourceMappingAdminComponent;
    exports.DataSourceMappingModule = DataSourceMappingModule;
    exports.EmailProfilesAdminComponent = EmailProfilesAdminComponent;
    exports.EmailProfilesRegistrationModule = EmailProfilesRegistrationModule;
    exports.FunctionalRolesAdminComponent = FunctionalRolesAdminComponent;
    exports.FunctionalRolesRegistrationModule = FunctionalRolesRegistrationModule;
    exports.HkmAccessMappingAdminComponent = HkmAccessMappingAdminComponent;
    exports.HkmAccessMappingRegistrationModule = HkmAccessMappingRegistrationModule;
    exports.IframeSecurityAdminComponent = IframeSecurityAdminComponent;
    exports.IframeSecurityRegistrationModule = IframeSecurityRegistrationModule;
    exports.IssueDetailsComponent = IssueDetailsComponent;
    exports.IssueReportingConfigurationAdminComponent = IssueReportingConfigurationAdminComponent;
    exports.IssueReportingConfigurationModule = IssueReportingConfigurationModule;
    exports.JitterbitApisAdminComponent = JitterbitApisAdminComponent;
    exports.JitterbitApisRegistrationModule = JitterbitApisRegistrationModule;
    exports.JitterbitConfigurationAdminComponent = JitterbitConfigurationAdminComponent;
    exports.JitterbitConfigurationRegistrationModule = JitterbitConfigurationRegistrationModule;
    exports.ManageTenantAdminComponent = ManageTenantAdminComponent;
    exports.ManageTenantRegistrationModule = ManageTenantRegistrationModule;
    exports.MulesoftApisAdminComponent = MulesoftApisAdminComponent;
    exports.MulesoftApisRegistrationModule = MulesoftApisRegistrationModule;
    exports.MulesoftConfigurationAdminComponent = MulesoftConfigurationAdminComponent;
    exports.MulesoftConfigurationRegistrationModule = MulesoftConfigurationRegistrationModule;
    exports.OutgoingMailboxStatusAdminComponent = OutgoingMailboxStatusAdminComponent;
    exports.OutgoingMailboxStatusRegistrationModule = OutgoingMailboxStatusRegistrationModule;
    exports.PermissionsPolicyHeaderAdminComponent = PermissionsPolicyHeaderAdminComponent;
    exports.PermissionsPolicyHeaderRegistrationModule = PermissionsPolicyHeaderRegistrationModule;
    exports.RealTimeTranslationAdminComponent = RealTimeTranslationAdminComponent;
    exports.RealTimeTranslationRegistrationModule = RealTimeTranslationRegistrationModule;
    exports.RoleEditorComponent = RoleEditorComponent;
    exports.RolePermissionsAdminComponent = RolePermissionsAdminComponent;
    exports.RolePermissionsRegistrationModule = RolePermissionsRegistrationModule;
    exports.RssoOauthAdminComponent = RssoOauthAdminComponent;
    exports.RssoOauthRegistrationModule = RssoOauthRegistrationModule;
    exports.RulePoolManagementAdminComponent = RulePoolManagementAdminComponent;
    exports.RulePoolManagementRegistrationModule = RulePoolManagementRegistrationModule;
    exports.ServerInformationAdminComponent = ServerInformationAdminComponent;
    exports.ServerInformationRegistrationModule = ServerInformationRegistrationModule;
    exports.ServerLogsAdminComponent = ServerLogsAdminComponent;
    exports.ServerLogsRegistrationModule = ServerLogsRegistrationModule;
    exports.ServicesProviderRegionAdminComponent = ServicesProviderRegionAdminComponent;
    exports.ServicesProviderRegionRegistrationModule = ServicesProviderRegionRegistrationModule;
    exports.SubmitIssueToSupportComponent = SubmitIssueToSupportComponent;
    exports.SummarizationServiceAdminComponent = SummarizationServiceAdminComponent;
    exports.SummarizationServiceRegistrationModule = SummarizationServiceRegistrationModule;
    exports.SummarizationTestingAdminComponent = SummarizationTestingAdminComponent;
    exports.SummarizationTestingRegistrationModule = SummarizationTestingRegistrationModule;
    exports.ToneAnalysisTestingAdminComponent = ToneAnalysisTestingAdminComponent;
    exports.ToneAnalysisTestingRegistrationModule = ToneAnalysisTestingRegistrationModule;
    exports.VirtualChatConfigurationAdminComponent = VirtualChatConfigurationAdminComponent;
    exports.VirtualChatConfigurationRegistrationModule = VirtualChatConfigurationRegistrationModule;
    exports.WebApiConnectionsAdminComponent = WebApiConnectionsAdminComponent;
    exports.WebApiConnectionsRegistrationModule = WebApiConnectionsRegistrationModule;
    exports.WebApiMappingAdminComponent = WebApiMappingAdminComponent;
    exports.WebApiMappingRegistrationModule = WebApiMappingRegistrationModule;
    exports.WebhookCallbackConfigurationAdminComponent = WebhookCallbackConfigurationAdminComponent;
    exports.WebhookCallbackConfigurationRegistrationModule = WebhookCallbackConfigurationRegistrationModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=helix-platform-admin-components.umd.js.map
