{"version":3,"file":"helix-platform-view-actions.umd.js","sources":["../../../../node_modules/tslib/tslib.es6.js","../../../../libs/platform/view/actions/apply-grid-filter/apply-grid-filter-view-action-design-model.class.ts","../../../../libs/platform/view/actions/apply-grid-filter/apply-grid-filter-view-action.types.ts","../../../../libs/platform/view/actions/apply-grid-filter/apply-grid-filter-view-action.service.ts","../../../../libs/platform/view/actions/apply-grid-filter/apply-grid-filter-view-action-definition-adapter.service.ts","../../../../libs/platform/view/actions/apply-grid-filter/apply-grid-filter-view-action.module.ts","../../../../libs/platform/view/actions/open-view/open-view-action.constant.ts","../../../../libs/platform/view/actions/open-view/open-view-action.types.ts","../../../../libs/platform/view/actions/open-view/open-view-model-helper.service.ts","../../../../libs/platform/view/actions/open-view/open-view-action-design-model.class.ts","../../../../libs/platform/view/actions/open-view/open-view-action-definition-adapter.service.ts","../../../../libs/platform/view/actions/open-view/open-view-action.service.ts","../../../../libs/platform/view/actions/open-view/open-view-action.module.ts","../../../../libs/platform/view/actions/associate/associate-view-action-design-model.class.ts","../../../../libs/platform/view/actions/associate/associate-view-action.service.ts","../../../../libs/platform/view/actions/associate/associate-view-action.module.ts","../../../../libs/platform/view/actions/avc-associate/avc-associate-action.service.ts","../../../../libs/platform/view/actions/avc-associate/avc-associate-action.module.ts","../../../../libs/platform/view/actions/close-view/close-view-action.service.ts","../../../../libs/platform/view/actions/close-view/close-view-action.module.ts","../../../../libs/platform/view/actions/delete-records/delete-records-view-action.service.ts","../../../../libs/platform/view/actions/delete-records/delete-records-view-action.module.ts","../../../../libs/platform/view/actions/disassociate/disassociate-view-action-design-model.class.ts","../../../../libs/platform/view/actions/disassociate/disassociate-view-action.service.ts","../../../../libs/platform/view/actions/disassociate/disassociate-view-action.module.ts","../../../../libs/platform/view/actions/edit-records/result-modal/result-modal.component.ts","../../../../libs/platform/view/actions/edit-records/result-modal/result-modal.html","../../../../libs/platform/view/actions/edit-records/services/edit-records-view-builder.service.ts","../../../../libs/platform/view/actions/edit-records/services/edit-records-data.service.ts","../../../../libs/platform/view/actions/edit-records/services/edit-records-view-action.service.ts","../../../../libs/platform/view/actions/edit-records/edit-records-view-action.module.ts","../../../../libs/platform/view/actions/launch-process/launch-process-view-action-design-manager.service.ts","../../../../libs/platform/view/actions/launch-process/launch-process-view-action-design-model.class.ts","../../../../libs/platform/view/actions/launch-process/launch-process-view-action.service.ts","../../../../libs/platform/view/actions/launch-process/launch-process-view-action.module.ts","../../../../libs/platform/view/actions/launch-url/launch-url-view-action-design-model.class.ts","../../../../libs/platform/view/actions/launch-url/launch-url-view-action.service.ts","../../../../libs/platform/view/actions/launch-url/launch-url-view-action-definition-adapter.service.ts","../../../../libs/platform/view/actions/launch-url/launch-url-view-action.module.ts","../../../../libs/platform/view/actions/refresh/refresh-view-action.service.ts","../../../../libs/platform/view/actions/refresh/refresh-view-action.module.ts","../../../../libs/platform/view/actions/save/save-view-action.service.ts","../../../../libs/platform/view/actions/save/save-view-action.module.ts","../../../../libs/platform/view/actions/set-property/set-property-view-action.service.ts","../../../../libs/platform/view/actions/set-property/set-property-view-action-expression-configurator.class.ts","../../../../libs/platform/view/actions/set-property/set-property-view-action-design-model.class.ts","../../../../libs/platform/view/actions/set-property/set-property-view-action-design-manager.service.ts","../../../../libs/platform/view/actions/set-property/set-property-view-action.module.ts","../../../../libs/platform/view/actions/launch-process-designer/process-designer-element-picker/process-designer-element-picker.component.ts","../../../../libs/platform/view/actions/launch-process-designer/process-designer-element-picker/process-designer-element-picker.component.html","../../../../libs/platform/view/actions/launch-process-designer/process-designer-element-picker/process-designer-element-picker.module.ts","../../../../libs/platform/view/actions/launch-process-designer/launch-process-designer-action-design-model.class.ts","../../../../libs/platform/view/actions/launch-process-designer/launch-process-designer-expression-evaluator.service.ts","../../../../libs/platform/view/actions/launch-process-designer/process-designer-frame.component.ts","../../../../libs/platform/view/actions/launch-process-designer/process-designer-frame.component.html","../../../../libs/platform/view/actions/launch-process-designer/launch-process-designer-action.service.ts","../../../../libs/platform/view/actions/launch-process-designer/launch-process-designer-action.module.ts","../../../../libs/platform/view/actions/unknown/unknown-view-action.service.ts","../../../../libs/platform/view/actions/unknown/unknown-view-action-design-manager.service.ts","../../../../libs/platform/view/actions/unknown/unknown-view-action-design-model.class.ts","../../../../libs/platform/view/actions/unknown/unknown-view-action.module.ts","../../../../libs/platform/view/actions/view-actions.module.ts","../../../../libs/platform/view/actions/apply-grid-filter/apply-grid-filter-view-action-design-manager.service.ts","../../../../libs/platform/view/actions/apply-grid-filter/apply-grid-filter-view-action-design.module.ts","../../../../libs/platform/view/actions/view-actions-design.module.ts","../../../../libs/platform/view/actions/helix-platform-view-actions.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import { RxViewDesignerActionModel, ViewDesignerFacade } from '@helix/platform/view/designer';\nimport { Injector } from '@angular/core';\nimport {\n  ApplyGridFilterMode,\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport { IApplyGridFilterViewActionDesignProperties } from './apply-grid-filter-view-action.types';\nimport {\n  ExpressionFormControlComponent,\n  IExpressionFormControlOptions,\n  IRadioFormControlOptions,\n  IRadioItem,\n  MessageType,\n  RadioFormControlComponent,\n  ValidationFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  distinctUntilChanged,\n  filter,\n  first,\n  map,\n  pluck,\n  skip,\n  switchMap,\n  takeUntil,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { combineLatest, merge, Observable, of } from 'rxjs';\nimport {\n  IRecordGridDesignInspectorColumnConfig,\n  IRecordGridDesignProperties,\n  IRecordGridFilterSelectControlOptions,\n  IRecordGridNamedFilterOptionsMap,\n  RecordGridFilterSelectControlComponent,\n  RX_RECORD_GRID,\n  RxRecordGridDesignUtilsService,\n  RxRecordGridFilterSelectHelperService\n} from '@helix/platform/view/components';\nimport { IRecordDefinition, RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { includes, omit } from 'lodash';\nimport { Tooltip } from '@helix/platform/shared/api';\n\nexport class RxApplyGridFilterViewActionDesignModelClass extends RxViewDesignerActionModel {\n  private viewDesignerFacade = this.injector.get(ViewDesignerFacade);\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n  private rxRecordGridDesignUtilsService = this.injector.get(RxRecordGridDesignUtilsService);\n  private rxRecordGridFilterSelectHelperService = this.injector.get(RxRecordGridFilterSelectHelperService);\n\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<IApplyGridFilterViewActionDesignProperties>\n  ): ViewActionDesignEditableProperties<IApplyGridFilterViewActionDesignProperties> {\n    return {\n      targetApi: null,\n      mode: ApplyGridFilterMode.Append,\n      filterValue: {\n        filtersJson: null,\n        basicFilters: null\n      },\n      ...initialProperties\n    };\n  }\n\n  constructor(\n    protected injector: Injector,\n    readonly sandbox: IViewActionDesignSandbox<IApplyGridFilterViewActionDesignProperties>\n  ) {\n    super(injector, sandbox);\n\n    // set initial filters select value from child filter components\n    this.sandbox.children$\n      .pipe(\n        first(),\n        withLatestFrom(this.sandbox.actionProperties$.pipe(pluck('filters'))),\n        takeUntil(this.sandbox.destroyed$)\n      )\n      .subscribe(([filterComponents, filtersJson]) => {\n        const basicFilters =\n          this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(filterComponents);\n\n        this.sandbox.updateActionProperties({\n          filterValue: {\n            basicFilters,\n            filtersJson\n          }\n        });\n      });\n\n    const filterValue$ = this.sandbox.actionProperties$.pipe(pluck('filterValue'), distinctUntilChanged());\n\n    // set filters data on filter select change\n    filterValue$.pipe(skip(1), takeUntil(this.sandbox.destroyed$)).subscribe(({ filtersJson, basicFilters }) => {\n      const filterPayloads = this.rxRecordGridDesignUtilsService.getGridFilterComponentPayloads(basicFilters);\n\n      this.sandbox.setChildren(filterPayloads);\n\n      this.sandbox.updateActionProperties({\n        filters: filtersJson\n      });\n    });\n\n    const mode$ = this.sandbox.actionProperties$.pipe(pluck('mode'), distinctUntilChanged());\n    const targetApi$ = this.sandbox.actionProperties$.pipe(pluck('targetApi'), distinctUntilChanged());\n\n    const gridGuid$: Observable<string> = targetApi$.pipe(\n      map(RxApplyGridFilterViewActionDesignModelClass.extractGuidFromExpression)\n    );\n\n    // reset filters after grid change or when clear mode is selected\n    merge(gridGuid$.pipe(skip(1)), mode$.pipe(filter((mode) => mode === ApplyGridFilterMode.Clear)))\n      .pipe(takeUntil(this.sandbox.destroyed$))\n      .subscribe(() => {\n        this.sandbox.updateActionProperties({\n          filterValue: {\n            basicFilters: null,\n            filtersJson: null\n          }\n        });\n      });\n\n    const gridProperties$: Observable<IRecordGridDesignProperties> = gridGuid$.pipe(\n      switchMap((guid) => (guid ? this.viewDesignerFacade.getComponent(guid) : of(null))),\n      map((item) => (item?.type === RX_RECORD_GRID.type ? item.data : null))\n    );\n\n    const recordDefinition$: Observable<IRecordDefinition> = gridProperties$.pipe(\n      map((item) => item?.recordDefinitionName ?? null),\n      switchMap((recordDefinitionName) =>\n        recordDefinitionName ? this.rxRecordDefinitionCacheService.getRecordDefinition(recordDefinitionName) : of(null)\n      )\n    );\n\n    const gridColumns$ = gridProperties$.pipe(map((gridData) => gridData?.columns ?? []));\n\n    const recordDefinitionFiltered$: Observable<IRecordDefinition> = recordDefinition$.pipe(\n      withLatestFrom(gridColumns$),\n      map(([recordDefinition, columns]) => {\n        const fieldIds = columns.filter((col) => col.filterable).map((col) => col.fieldId);\n\n        return recordDefinition\n          ? {\n              ...recordDefinition,\n              fieldDefinitions: recordDefinition.fieldDefinitions.filter((definition) =>\n                fieldIds.includes(String(definition.id))\n              )\n            }\n          : null;\n      })\n    );\n\n    const namedFilterOptionsMap$ = gridColumns$.pipe(\n      map((columns) => this.rxRecordGridFilterSelectHelperService.getNamedFilterOptionsFromColumns(columns))\n    );\n\n    combineLatest([recordDefinitionFiltered$, mode$])\n      .pipe(withLatestFrom(namedFilterOptionsMap$, gridColumns$), takeUntil(this.sandbox.destroyed$))\n      .subscribe(([[recordDefinition, mode], namedFilterOptions, columns]) => {\n        this.sandbox.setActionPropertyEditorConfig(\n          this.getActionEditorConfig(recordDefinition, namedFilterOptions, mode, columns)\n        );\n      });\n  }\n\n  getPropertiesByName(): IApplyGridFilterViewActionDesignProperties {\n    return omit(super.getPropertiesByName() as IApplyGridFilterViewActionDesignProperties, 'filterValue');\n  }\n\n  private getActionEditorConfig(\n    recordDefinition?: IRecordDefinition,\n    namedFilterOptions?: IRecordGridNamedFilterOptionsMap,\n    mode?: ApplyGridFilterMode,\n    columns?: IRecordGridDesignInspectorColumnConfig[]\n  ): IViewActionDesignPropertyEditorConfig {\n    const tooltip = new Tooltip(\n      '<b>Begin</b><p>Begin a batch of filter updates.</p><br><b>Append</b><p>Applied filters are added with the AND operator; existing filters for the specified fields are removed.</p><br><b>Remove</b><p>Existing filters are removed if they match the applied filters.</p><br><b>Overwrite</b><p>All existing filters are replaced with the applied filters.</p><br><b>Merge</b><p>Existing filters with a range of values are replaced with the matching applied filters; existing filters for the other fields are combined with the matching applied filters using the OR operator; applied filters for new fields are added with the AND operator.</p><br><b>Clear</b><p>All existing filters are removed.</p><br><b>End</b><p>Apply all pending filter updates executed in a batch.</p>'\n    );\n\n    tooltip.maxWidth = 310;\n\n    const controls: IViewActionDesignPropertyEditorConfig = [\n      {\n        name: 'targetApi',\n        component: ExpressionFormControlComponent,\n        options: {\n          label: 'Record grid',\n          dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n          operators: this.expressionConfigurator.getOperators(),\n          isRequired: true\n        } as IExpressionFormControlOptions\n      },\n      {\n        name: 'mode',\n        component: RadioFormControlComponent,\n        options: {\n          label: 'Mode',\n          tooltip,\n          items: [\n            { label: 'Begin', value: ApplyGridFilterMode.Begin },\n            { label: 'Append', value: ApplyGridFilterMode.Append },\n            { label: 'Remove', value: ApplyGridFilterMode.Remove },\n            { label: 'Overwrite', value: ApplyGridFilterMode.Overwrite },\n            { label: 'Merge', value: ApplyGridFilterMode.Merge },\n            { label: 'Clear', value: ApplyGridFilterMode.Clear },\n            { label: 'End', value: ApplyGridFilterMode.End }\n          ] as IRadioItem[]\n        } as IRadioFormControlOptions\n      }\n    ];\n\n    const filterSelectControl = {\n      name: 'filterValue',\n      component: RecordGridFilterSelectControlComponent,\n      options: {\n        primaryRecordDefinition: recordDefinition,\n        selectedFieldIds: columns.map((column) => column.fieldId),\n        namedFilterOptions,\n        anchorDisabled: !recordDefinition\n      } as IRecordGridFilterSelectControlOptions\n    };\n\n    const emptyFilterMessageControl = {\n      name: 'emptyFilterMessage',\n      component: ValidationFormControlComponent,\n      options: {\n        text: 'Record grid expression required to define a filter.',\n        messageType: MessageType.Error,\n        customStyle: { 'margin-top': '-1rem' }\n      }\n    };\n\n    if (!includes([ApplyGridFilterMode.Begin, ApplyGridFilterMode.End, ApplyGridFilterMode.Clear], mode)) {\n      controls.push(filterSelectControl);\n\n      if (!recordDefinition) {\n        controls.push(emptyFilterMessageControl);\n      }\n    }\n\n    return controls;\n  }\n\n  static extractGuidFromExpression(val: string): string {\n    const matches = val?.match(/^\\${view\\.components\\.([0-9a-z-]+)\\.api}$/);\n\n    return (matches && matches[1]) ?? null;\n  }\n}\n","import {\n  ApplyGridFilterMode,\n  IRecordGridFilterData,\n  IRxRecordGridApi,\n  IViewActionDesignProperties\n} from '@helix/platform/view/api';\nimport { IRecordGridDesignInspectorColumnConfig, IRecordGridFilterModel } from '@helix/platform/view/components';\nimport { IViewComponentDesignData } from '@helix/platform/view/designer';\n\nexport const RxApplyGridFilterActionName = 'rxApplyGridFilterAction';\n\nexport interface IApplyGridFilterViewActionParams extends IViewActionDesignProperties {\n  targetApi: IRxRecordGridApi;\n  mode: ApplyGridFilterMode;\n  filters: IRecordGridFilterData;\n}\n\nexport interface IApplyGridFilterViewActionDesignProperties extends IViewActionDesignProperties {\n  targetApi: string;\n  mode: ApplyGridFilterMode;\n  filterValue?: IRecordGridFilterModel;\n  filters: string;\n}\n\nexport interface IApplyGridFilterViewActionGridData {\n  guid: string;\n  columns: Pick<IRecordGridDesignInspectorColumnConfig, 'namedFilterOptions' | 'fieldId'>[];\n}\n\nexport interface IApplyGridFilterViewActionData\n  extends IViewComponentDesignData<IApplyGridFilterViewActionDesignProperties> {}\n","import { Injectable } from '@angular/core';\nimport { RxError } from '@helix/platform/utils';\nimport { IViewActionService } from '@helix/platform/view/api';\nimport { EMPTY, Observable, throwError } from 'rxjs';\nimport { IApplyGridFilterViewActionParams, RxApplyGridFilterActionName } from './apply-grid-filter-view-action.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxApplyGridFilterViewActionService implements IViewActionService<IApplyGridFilterViewActionParams, never> {\n  execute(params: IApplyGridFilterViewActionParams): Observable<never> {\n    if (params.targetApi) {\n      if (params.targetApi.applyFilters) {\n        params.targetApi.applyFilters(params.filters, params.mode);\n\n        return EMPTY;\n      } else {\n        throwError(new RxError(`${RxApplyGridFilterActionName}: target component does not support applyFilters API.`));\n      }\n\n      return EMPTY;\n    } else {\n      return throwError(new RxError('rxApplyGridFilterAction: component is not specified.'));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport {\n  IContainerViewComponentDefinition,\n  IViewComponentDefinition,\n  IViewDefinition,\n  RecordGridNamedFilterOptionKey\n} from '@helix/platform/view/api';\nimport { IApplyGridFilterViewActionDesignProperties } from './apply-grid-filter-view-action.types';\nimport {\n  IRecordGridFilterDescriptorModel,\n  IRxRecordGridFilter,\n  RxRecordGridFilterHelperService\n} from '@helix/platform/view/components';\nimport { RxJsonParserService } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxApplyGridFilterViewActionDefinitionAdapterService\n  implements IDefinitionAdapter<IViewComponentDefinition, IViewDefinition>\n{\n  constructor(\n    private rxJsonParserService: RxJsonParserService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService\n  ) {}\n\n  adaptDefinition({\n    componentDefinitions,\n    propertiesByName\n  }: IContainerViewComponentDefinition<IApplyGridFilterViewActionDesignProperties>) {\n    const recordGridFilters: IRxRecordGridFilter[] = componentDefinitions.map(\n      (definition: IViewComponentDefinition<IRecordGridFilterDescriptorModel>) => {\n        let value = definition.propertiesByName.value;\n        const parsedValue = this.rxJsonParserService.tryParseJson(value);\n\n        if (parsedValue && parsedValue[RecordGridNamedFilterOptionKey]) {\n          value = parsedValue;\n        }\n\n        return {\n          guid: definition.guid,\n          fieldId: definition.propertiesByName.fieldId,\n          value\n        };\n      }\n    );\n\n    // @ts-ignore - converting type\n    propertiesByName.filters = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n      propertiesByName.filters,\n      recordGridFilters\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxViewActionDefinitionAdapterRegistryService, RxViewActionRegistryService } from '@helix/platform/view/api';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxApplyGridFilterViewActionService } from './apply-grid-filter-view-action.service';\nimport { RxApplyGridFilterViewActionDesignModelClass } from './apply-grid-filter-view-action-design-model.class';\nimport { RxApplyGridFilterViewActionDefinitionAdapterService } from './apply-grid-filter-view-action-definition-adapter.service';\nimport { RxApplyGridFilterActionName } from './apply-grid-filter-view-action.types';\n\n@NgModule()\nexport class ApplyGridFilterViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxApplyGridFilterViewActionService: RxApplyGridFilterViewActionService,\n    private rxApplyGridFilterViewActionDefinitionAdapterService: RxApplyGridFilterViewActionDefinitionAdapterService,\n    private rxViewActionDefinitionAdapterRegistryService: RxViewActionDefinitionAdapterRegistryService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: RxApplyGridFilterActionName,\n      label: 'Apply grid filter',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: rxApplyGridFilterViewActionService,\n      designModel: RxApplyGridFilterViewActionDesignModelClass,\n      parameters: [\n        {\n          name: 'targetApi',\n          label: 'Record grid',\n          isRequired: true,\n          enableExpressionEvaluation: true\n        },\n        {\n          name: 'mode',\n          label: 'Mode'\n        },\n        {\n          name: 'filters'\n        }\n      ]\n    });\n\n    rxViewActionDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RxApplyGridFilterActionName,\n      this.rxApplyGridFilterViewActionDefinitionAdapterService\n    );\n  }\n}\n","import { OpenViewActionLaunchBehavior, OpenViewActionType, OpenViewActionModalSize } from '@helix/platform/view/api';\n\nexport const RX_OPEN_VIEW = {\n  actionName: 'rxOpenViewAction',\n  modalSize: OpenViewActionModalSize,\n  type: OpenViewActionType,\n  launchBehavior: OpenViewActionLaunchBehavior\n};\n","import {\n  IViewActionDesignProperties,\n  IViewDefinition,\n  IViewInputParams,\n  OpenViewActionLaunchBehavior,\n  OpenViewActionModalSize,\n  OpenViewActionType\n} from '@helix/platform/view/api';\n\nexport interface IOpenViewActionParams {\n  viewDefinitionName: string | IViewDefinition;\n  viewParams: IViewInputParams;\n  presentation: IOpenViewActionPresentationParams & {\n    notification?: string;\n  };\n}\n\nexport interface IOpenViewActionPresentationParams {\n  type: OpenViewActionType;\n  launchBehavior?: OpenViewActionLaunchBehavior;\n  modalSize?: OpenViewActionModalSize;\n  title?: string;\n}\n\nexport interface IOpenViewActionDesignProperties extends IViewActionDesignProperties {\n  viewDefinitionName: string;\n  'presentation.type'?: OpenViewActionType;\n  'presentation.launchBehavior'?: OpenViewActionLaunchBehavior;\n  'presentation.modalSize'?: OpenViewActionModalSize;\n  'presentation.title'?: string;\n}\n\nexport const RX_OPEN_VIEW_MODAL_SIZE_OPTIONS = [\n  {\n    id: OpenViewActionModalSize.Xsmall,\n    name: 'Extra Small (450 px)'\n  },\n  {\n    id: OpenViewActionModalSize.Small,\n    name: 'Small (650 px)'\n  },\n  {\n    id: OpenViewActionModalSize.Medium,\n    name: 'Medium (800 px)'\n  },\n  {\n    id: OpenViewActionModalSize.Large,\n    name: 'Large (1024 px)'\n  },\n  {\n    id: OpenViewActionModalSize.Xlarge,\n    name: 'Extra Large (1200 px)'\n  },\n  {\n    id: OpenViewActionModalSize.Xxlarge,\n    name: 'Extra Extra Large (1600 px)'\n  },\n  {\n    id: OpenViewActionModalSize.FullSize,\n    name: 'Full Size'\n  }\n];\n\nexport const RX_OPEN_VIEW_TYPE_OPTIONS = [\n  {\n    id: OpenViewActionType.FullWidth,\n    name: 'Full width'\n  },\n  {\n    id: OpenViewActionType.CenteredModal,\n    name: 'Centered modal'\n  },\n  {\n    id: OpenViewActionType.DockedLeftModal,\n    name: 'Docked left modal'\n  },\n  {\n    id: OpenViewActionType.DockedRightModal,\n    name: 'Docked right modal'\n  }\n];\n\nexport const RX_OPEN_VIEW_LAUNCH_BEHAVIOR_OPTIONS = [\n  {\n    id: OpenViewActionLaunchBehavior.NewWindow,\n    name: 'Open in a new tab'\n  },\n  {\n    id: OpenViewActionLaunchBehavior.SameWindow,\n    name: 'Open in the same tab'\n  }\n];\n","import { Injectable } from '@angular/core';\nimport {\n  IViewActionDesignPropertyEditorConfig,\n  OpenViewActionModalSize,\n  OpenViewActionType\n} from '@helix/platform/view/api';\nimport {\n  ExpressionFormControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionFormControlOptions,\n  ISelectFormControlOptions,\n  ITextFormControlOptions,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  TextFormControlComponent\n} from '@helix/platform/shared/components';\nimport { IExpressionConfigurator, Tooltip } from '@helix/platform/shared/api';\nimport {\n  RX_OPEN_VIEW_LAUNCH_BEHAVIOR_OPTIONS,\n  RX_OPEN_VIEW_MODAL_SIZE_OPTIONS,\n  RX_OPEN_VIEW_TYPE_OPTIONS\n} from './open-view-action.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxOpenViewModelHelperService {\n  getOpenViewInspector(\n    inputParams: { name: string }[],\n    presentationType: OpenViewActionType,\n    presentationModalSize: OpenViewActionModalSize,\n    expressionConfigurator: IExpressionConfigurator\n  ): IViewActionDesignPropertyEditorConfig {\n    const viewInputControls = inputParams.map((param) => ({\n      name: `viewParams.${param.name}`,\n      component: ExpressionFormControlComponent,\n      options: {\n        label: param.name,\n        dataDictionary$: expressionConfigurator.getDataDictionary(param.name),\n        operators: expressionConfigurator.getOperators(param.name)\n      } as IExpressionFormControlOptions\n    }));\n\n    const isFullWidthType = presentationType === OpenViewActionType.FullWidth;\n\n    const isCenteredModalWithFullSize =\n      presentationType === OpenViewActionType.CenteredModal &&\n      presentationModalSize === OpenViewActionModalSize.FullSize;\n\n    return [\n      {\n        name: 'viewDefinitionName',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label: 'View',\n          required: true,\n          definitionType: RxDefinitionPickerType.View\n        } as IDefinitionPickerComponentOptions\n      },\n      ...viewInputControls,\n      {\n        name: 'presentation.type',\n        component: SelectFormControlComponent,\n        options: {\n          label: 'Presentation',\n          tooltip: new Tooltip('Select how to display the view in the application.'),\n          options: RX_OPEN_VIEW_TYPE_OPTIONS,\n          sortAlphabetically: false\n        } as ISelectFormControlOptions\n      },\n      ...(isFullWidthType\n        ? [\n            {\n              name: 'presentation.launchBehavior',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Launch behavior',\n                options: RX_OPEN_VIEW_LAUNCH_BEHAVIOR_OPTIONS,\n                sortAlphabetically: true\n              } as ISelectFormControlOptions\n            }\n          ]\n        : [\n            {\n              name: 'presentation.modalSize',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Size',\n                options:\n                  presentationType === OpenViewActionType.CenteredModal\n                    ? RX_OPEN_VIEW_MODAL_SIZE_OPTIONS\n                    : RX_OPEN_VIEW_MODAL_SIZE_OPTIONS.filter(\n                        (option) => option.id !== OpenViewActionModalSize.FullSize\n                      ),\n                sortAlphabetically: false\n              } as ISelectFormControlOptions\n            },\n            ...(isCenteredModalWithFullSize\n              ? []\n              : [\n                  {\n                    name: 'presentation.title',\n                    component: TextFormControlComponent,\n                    options: {\n                      label: 'Title'\n                    } as ITextFormControlOptions\n                  }\n                ])\n          ])\n    ];\n  }\n}\n","import { Injector } from '@angular/core';\nimport { RxViewDesignerActionModel } from '@helix/platform/view/designer';\nimport {\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  IViewDefinition,\n  OpenViewActionLaunchBehavior,\n  OpenViewActionModalSize,\n  OpenViewActionType,\n  RxViewDefinitionCacheService,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map, pluck, skip, switchMap } from 'rxjs/operators';\nimport { omit } from 'lodash';\nimport { IOpenViewActionDesignProperties } from './open-view-action.types';\nimport { RxOpenViewModelHelperService } from './open-view-model-helper.service';\n\nexport class RxOpenViewActionDesignModel extends RxViewDesignerActionModel {\n  private rxViewDefinitionCacheService = this.injector.get(RxViewDefinitionCacheService);\n  private rxOpenViewModelHelperService = this.injector.get(RxOpenViewModelHelperService);\n\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<IOpenViewActionDesignProperties>\n  ): ViewActionDesignEditableProperties<IOpenViewActionDesignProperties> {\n    return {\n      viewDefinitionName: null,\n      'presentation.type': OpenViewActionType.FullWidth,\n      'presentation.launchBehavior': OpenViewActionLaunchBehavior.SameWindow,\n      ...initialProperties\n    };\n  }\n\n  constructor(injector: Injector, readonly sandbox: IViewActionDesignSandbox<IOpenViewActionDesignProperties>) {\n    super(injector, sandbox);\n\n    const viewDefinitionName$ = this.sandbox.actionProperties$.pipe(\n      pluck('viewDefinitionName'),\n      distinctUntilChanged()\n    );\n\n    const presentationType$ = this.sandbox.actionProperties$.pipe(pluck('presentation.type'), distinctUntilChanged());\n\n    const presentationModalSize$ = this.sandbox.actionProperties$.pipe(\n      pluck('presentation.modalSize'),\n      distinctUntilChanged()\n    );\n\n    combineLatest([viewDefinitionName$, presentationType$, presentationModalSize$])\n      .pipe(\n        switchMap(([viewDefinitionName, presentationType, presentationModalSize]) =>\n          this.getActionEditorConfig(viewDefinitionName, presentationType, presentationModalSize)\n        )\n      )\n      .subscribe((config) => this.sandbox.setActionPropertyEditorConfig(config));\n\n    viewDefinitionName$\n      .pipe(switchMap((viewDefinitionName) => this.getViewOutputParams(viewDefinitionName)))\n      .subscribe((outputParams) => {\n        this.sandbox.setActionOutputDataDictionary(\n          outputParams.map(({ name }) => ({\n            label: name,\n            expression: this.getOutputExpressionForPropertyPath(name)\n          }))\n        );\n      });\n\n    presentationType$.pipe(skip(1)).subscribe((presentationType) => {\n      let props = this.sandbox.getActionProperties();\n\n      if (presentationType === OpenViewActionType.FullWidth) {\n        props['presentation.launchBehavior'] = OpenViewActionLaunchBehavior.SameWindow;\n\n        props = omit(props, ['presentation.modalSize', 'presentation.title']);\n      } else {\n        props = omit(props, ['presentation.launchBehavior']);\n\n        if (\n          !props['presentation.modalSize'] ||\n          this.sandbox.getActionPropertyValue('presentation.modalSize') === OpenViewActionModalSize.FullSize\n        ) {\n          props['presentation.modalSize'] = OpenViewActionModalSize.Medium;\n        }\n      }\n\n      this.sandbox.setActionProperties(props);\n    });\n\n    presentationModalSize$.pipe(skip(1)).subscribe((presentationModalSize) => {\n      if (presentationModalSize === OpenViewActionModalSize.FullSize) {\n        this.sandbox.setActionProperties(omit(this.sandbox.getActionProperties(), ['presentation.title']));\n      }\n    });\n  }\n\n  private getActionEditorConfig(\n    viewDefinitionName: string,\n    presentationType: OpenViewActionType,\n    presentationModalSize: OpenViewActionModalSize\n  ): Observable<IViewActionDesignPropertyEditorConfig> {\n    return this.getViewInputParams(viewDefinitionName).pipe(\n      map((inputParams) =>\n        this.rxOpenViewModelHelperService.getOpenViewInspector(\n          inputParams,\n          presentationType,\n          presentationModalSize,\n          this.expressionConfigurator\n        )\n      )\n    );\n  }\n\n  private getViewInputParams(viewDefinitionName: string): Observable<IViewDefinition['inputParams']> {\n    return viewDefinitionName\n      ? this.rxViewDefinitionCacheService.getViewDefinition(viewDefinitionName).pipe(pluck('inputParams'))\n      : of([]);\n  }\n\n  private getViewOutputParams(viewDefinitionName: string): Observable<IViewDefinition['outputParams']> {\n    return viewDefinitionName\n      ? this.rxViewDefinitionCacheService.getViewDefinition(viewDefinitionName).pipe(pluck('outputParams'))\n      : of([]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport { IViewComponentDefinition, IViewDefinition } from '@helix/platform/view/api';\nimport { RX_OPEN_VIEW } from './open-view-action.constant';\nimport { get } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxOpenViewDefinitionAdapterService\n  implements IDefinitionAdapter<IViewComponentDefinition, IViewDefinition> {\n  private modalSizeMap = {\n    small: RX_OPEN_VIEW.modalSize.Small,\n    medium: RX_OPEN_VIEW.modalSize.Medium,\n    large: RX_OPEN_VIEW.modalSize.Large\n  };\n\n  adaptDefinition(viewComponentDefinition) {\n    const propertiesByName = get(viewComponentDefinition, 'propertiesByName', {});\n\n    if (propertiesByName.name === RX_OPEN_VIEW.actionName) {\n      const modalSize = propertiesByName.presentation.modalSize;\n\n      if (this.modalSizeMap[modalSize]) {\n        propertiesByName.presentation.modalSize = this.modalSizeMap[modalSize];\n      }\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {\n  AdaptDockedPanelService,\n  AdaptModalService,\n  DismissReasons,\n  DockedPanelDirection\n} from '@bmc-ux/adapt-angular';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport { IViewActionService, RxViewActionUtilsService } from '@helix/platform/view/api';\nimport { IRuntimeViewApi, RuntimeViewModalComponent, RxRuntimeViewUtilsService } from '@helix/platform/view/runtime';\nimport { defaults, isObject, transform } from 'lodash';\nimport { EMPTY, from, Observable, throwError } from 'rxjs';\nimport { catchError, switchMap, switchMapTo, take } from 'rxjs/operators';\nimport { RX_OPEN_VIEW } from './open-view-action.constant';\nimport { IOpenViewActionParams } from './open-view-action.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxOpenViewActionService implements IViewActionService<IOpenViewActionParams, IPlainObject> {\n  constructor(\n    private adaptDockedPanelService: AdaptDockedPanelService,\n    private adaptModalService: AdaptModalService,\n    private router: Router,\n    private rxRuntimeViewUtilsService: RxRuntimeViewUtilsService,\n    private rxViewActionUtilsService: RxViewActionUtilsService\n  ) {}\n\n  execute(params: IOpenViewActionParams): Observable<IPlainObject> {\n    const inputParams = transform(\n      params.viewParams,\n      (result, value, key) => {\n        result[key] = isObject(value) ? JSON.stringify(value) : String(value ?? '');\n      },\n      {}\n    );\n\n    return this.rxRuntimeViewUtilsService.isViewCancellable(params.viewDefinitionName).pipe(\n      switchMap((isViewCancellable: boolean) => {\n        let runtimeViewApi: IRuntimeViewApi;\n\n        const modalData = {\n          configuration: {\n            viewDefinitionName: params.viewDefinitionName,\n            inputParams: inputParams,\n\n            onRegisterApi(api: IRuntimeViewApi) {\n              runtimeViewApi = api;\n            }\n          },\n\n          title: params.presentation.title,\n          notification: params.presentation.notification,\n          isCancellable: isViewCancellable\n        };\n\n        const modalConfig = {\n          beforeDismiss: (reason) => {\n            // determine if the view is being closed programmatically,\n            // i.e. via executing the Close View action.\n            const isCloseViewAction = !Object.values(DismissReasons).includes(reason);\n\n            // do not close modal/blade when user clicked on backdrop except when view is cancellable\n            if (!isCloseViewAction && (reason !== DismissReasons.BACKDROP_CLICK || isViewCancellable)) {\n              runtimeViewApi\n                .cancel()\n                .pipe(\n                  take(1),\n                  catchError((error) => (error ? throwError(error) : EMPTY))\n                )\n                .subscribe();\n            }\n\n            // only allow to close view if dismiss is triggered by close view action with act as cancel\n            return isCloseViewAction;\n          },\n          blockKeyboard: !isViewCancellable,\n          content: RuntimeViewModalComponent,\n          size: params.presentation.modalSize as any,\n          data: modalData\n        };\n\n        switch (params.presentation.type) {\n          case RX_OPEN_VIEW.type.FullWidth: {\n            return this.openFullWidth(params.presentation.launchBehavior, params.viewDefinitionName, inputParams);\n          }\n\n          case RX_OPEN_VIEW.type.CenteredModal: {\n            return this.adaptModalService.open(modalConfig);\n          }\n\n          case RX_OPEN_VIEW.type.DockedLeftModal: {\n            return this.adaptDockedPanelService.open(defaults({ direction: DockedPanelDirection.LEFT }, modalConfig));\n          }\n\n          case RX_OPEN_VIEW.type.DockedRightModal: {\n            return this.adaptDockedPanelService.open(defaults({ direction: DockedPanelDirection.RIGHT }, modalConfig));\n          }\n\n          default: {\n            return this.openFullWidth(params.presentation.launchBehavior, params.viewDefinitionName, inputParams);\n          }\n        }\n      })\n    );\n  }\n\n  private openFullWidth(launchBehavior, viewDefinitionName, inputParams): Observable<never> {\n    const url = this.rxViewActionUtilsService.generateViewUrl(viewDefinitionName, inputParams);\n\n    if (launchBehavior === RX_OPEN_VIEW.launchBehavior.NewWindow) {\n      window.open(`${window.location.pathname}#${url}`);\n\n      return throwError(null);\n    } else {\n      return from(this.router.navigateByUrl(url)).pipe(switchMapTo(throwError(null)));\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AdaptDockedPanelModule } from '@bmc-ux/adapt-angular';\nimport { RxViewActionDefinitionAdapterRegistryService, RxViewActionRegistryService } from '@helix/platform/view/api';\nimport { RuntimeViewModule } from '@helix/platform/view/runtime';\nimport { RxOpenViewActionService } from './open-view-action.service';\nimport { RxOpenViewDefinitionAdapterService } from './open-view-action-definition-adapter.service';\nimport { RX_OPEN_VIEW } from './open-view-action.constant';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxOpenViewActionDesignModel } from './open-view-action-design-model.class';\n\n@NgModule({\n  imports: [CommonModule, RuntimeViewModule, AdaptDockedPanelModule]\n})\nexport class OpenViewActionModule {\n  constructor(\n    private rxViewActionDefinitionAdapterRegistryService: RxViewActionDefinitionAdapterRegistryService,\n    private openViewDefinitionAdapterService: RxOpenViewDefinitionAdapterService,\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxOpenViewActionService: RxOpenViewActionService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: RX_OPEN_VIEW.actionName,\n      label: 'Open view',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxOpenViewActionService,\n      designModel: RxOpenViewActionDesignModel,\n      parameters: [\n        {\n          name: 'viewDefinitionName',\n          label: 'View',\n          isRequired: true\n        },\n        {\n          name: 'viewParams',\n          enableExpressionEvaluation: true\n        },\n        {\n          name: 'presentation',\n          attributes: [\n            {\n              name: 'title',\n              localizable: true\n            }\n          ]\n        }\n      ]\n    });\n\n    rxViewActionDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      RX_OPEN_VIEW.actionName,\n      this.openViewDefinitionAdapterService\n    );\n  }\n}\n","import { RxViewDesignerActionModel } from '@helix/platform/view/designer';\nimport { Injector } from '@angular/core';\nimport {\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport { IAssociateViewActionDesignProperties } from './associate-view-action.interfaces';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map, pluck, shareReplay, skip, switchMap, take, withLatestFrom } from 'rxjs/operators';\nimport {\n  ExpressionFormControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionFormControlOptions,\n  ISelectFormControlOptions,\n  ISelectOption,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent,\n  SwitchFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RX_ASSOCIATION_DEFINITION,\n  RxAssociatedRecordNodeSide,\n  RxAssociationDefinitionService\n} from '@helix/platform/association/api';\nimport { RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { RxDefinitionNameService } from '@helix/platform/shared/api';\nimport { omit } from 'lodash';\n\nexport class RxAssociateViewActionDesignModel extends RxViewDesignerActionModel {\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n  private rxDefinitionNameService = this.injector.get(RxDefinitionNameService);\n  private rxAssociationDefinitionService = this.injector.get(RxAssociationDefinitionService);\n\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<IAssociateViewActionDesignProperties>\n  ): ViewActionDesignEditableProperties<IAssociateViewActionDesignProperties> {\n    return {\n      recordDefinitionName: null,\n      associationDefinitionName: null,\n      associationDefinitionRole: null,\n      associatedRecordId: null,\n      viewDefinitionName: null,\n      ...initialProperties\n    };\n  }\n\n  constructor(\n    protected injector: Injector,\n    readonly sandbox: IViewActionDesignSandbox<IAssociateViewActionDesignProperties>\n  ) {\n    super(injector, sandbox);\n\n    const recordDefinitionName$ = this.sandbox.actionProperties$.pipe(\n      pluck('recordDefinitionName'),\n      distinctUntilChanged()\n    );\n\n    const associationDefinitionName$ = this.sandbox.actionProperties$.pipe(\n      pluck('associationDefinitionName'),\n      distinctUntilChanged()\n    );\n\n    const associationNameOptions$: Observable<ISelectOption[]> = recordDefinitionName$.pipe(\n      switchMap((recordDefinitionName) =>\n        recordDefinitionName\n          ? this.rxRecordDefinitionCacheService.getRecordAssociationDefinitions(recordDefinitionName).pipe(\n              map((associationDefinitions) =>\n                associationDefinitions[recordDefinitionName].map((recordDefinition) => ({\n                  id: recordDefinition.name,\n                  name: this.rxDefinitionNameService.getDisplayName(recordDefinition.name)\n                }))\n              )\n            )\n          : of([])\n      )\n    );\n\n    const associationDefinition$ = associationDefinitionName$.pipe(\n      switchMap((associationDefinitionName) =>\n        associationDefinitionName ? this.rxAssociationDefinitionService.get(associationDefinitionName) : of(null)\n      ),\n      shareReplay(1)\n    );\n\n    const isSymmetricalAssociation$ = associationDefinition$.pipe(\n      map((association) => (association ? association.nodeAId === association.nodeBId : false))\n    );\n\n    const isManyToManyAssociation$ = associationDefinition$.pipe(\n      map((association) =>\n        association ? association.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.manyToMany.value : false\n      )\n    );\n\n    const useDefaultRoles$ = this.sandbox.actionProperties$.pipe(\n      pluck('useDefaultRoles'),\n      map(Boolean),\n      distinctUntilChanged()\n    );\n\n    useDefaultRoles$.pipe(distinctUntilChanged(), skip(1)).subscribe((useDefaultRoles) => {\n      if (useDefaultRoles) {\n        this.sandbox.setActionProperties(omit(this.sandbox.getActionProperties(), ['nodeARole', 'nodeBRole']));\n      }\n    });\n\n    const associationRoleOptions$: Observable<ISelectOption[]> = associationDefinition$.pipe(\n      map((association) =>\n        association\n          ? [\n              {\n                id: RxAssociatedRecordNodeSide.NodeA,\n                name: association.nodeAName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.defaultName\n              },\n              {\n                id: RxAssociatedRecordNodeSide.NodeB,\n                name: association.nodeBName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.defaultName\n              }\n            ]\n          : []\n      )\n    );\n\n    // skip initial props set\n    recordDefinitionName$.pipe(skip(1)).subscribe(() => {\n      this.sandbox.updateActionProperties({\n        associationDefinitionName: null,\n        associationDefinitionRole: null\n      });\n    });\n\n    associationDefinition$\n      .pipe(\n        // skip initial props set\n        skip(1),\n        withLatestFrom(isSymmetricalAssociation$, recordDefinitionName$)\n      )\n      .subscribe(([associationDefinition, isSymmetricalAssociation, recordDefinitionName]) => {\n        if (associationDefinition && !isSymmetricalAssociation) {\n          const associationDefinitionRole =\n            recordDefinitionName === associationDefinition.nodeAId\n              ? RxAssociatedRecordNodeSide.NodeA\n              : RxAssociatedRecordNodeSide.NodeB;\n\n          this.sandbox.updateActionProperties({\n            associationDefinitionRole\n          });\n        } else {\n          this.sandbox.updateActionProperties({\n            associationDefinitionRole: null\n          });\n        }\n      });\n\n    combineLatest([recordDefinitionName$, associationNameOptions$, associationRoleOptions$, useDefaultRoles$])\n      .pipe(withLatestFrom(isSymmetricalAssociation$, isManyToManyAssociation$))\n      .subscribe(\n        ([\n          [recordDefinitionName, associationNameOptions, associationRoleOptions, useDefaultRoles],\n          isSymmetricalAssociation,\n          isManyToManyAssociation\n        ]) => {\n          this.sandbox.setActionPropertyEditorConfig(\n            this.getActionEditorConfig(\n              recordDefinitionName,\n              associationNameOptions,\n              associationRoleOptions,\n              isSymmetricalAssociation,\n              isManyToManyAssociation,\n              useDefaultRoles\n            )\n          );\n        }\n      );\n  }\n\n  private getActionEditorConfig(\n    recordDefinitionName: string,\n    associationNameOptions: ISelectOption[],\n    associationRoleOptions: ISelectOption[],\n    isSymmetricalAssociation: boolean,\n    isManyToManyAssociation: boolean,\n    useDefaultRoles: boolean\n  ): IViewActionDesignPropertyEditorConfig {\n    return [\n      {\n        name: 'recordDefinitionName',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label: 'Record definition to associate',\n          definitionType: RxDefinitionPickerType.StandardDataRecord,\n          required: true\n        } as IDefinitionPickerComponentOptions\n      },\n      ...(recordDefinitionName\n        ? [\n            {\n              name: 'associationDefinitionName',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Association to use',\n                options: associationNameOptions,\n                required: true\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'associationDefinitionRole',\n              component: SelectFormControlComponent,\n              isDisabled: !isSymmetricalAssociation,\n              options: {\n                label: 'Associated record node side',\n                required: true,\n                options: associationRoleOptions\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'associatedRecordId',\n              component: ExpressionFormControlComponent,\n              options: {\n                label: 'Associated record ID',\n                dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                operators: this.expressionConfigurator.getOperators(),\n                isRequired: true\n              } as IExpressionFormControlOptions\n            },\n            {\n              name: 'viewDefinitionName',\n              component: RxDefinitionPickerComponent,\n              options: {\n                label: 'View for selecting or creating associated records',\n                required: true,\n                definitionType: RxDefinitionPickerType.View\n              } as IDefinitionPickerComponentOptions\n            },\n            ...(isManyToManyAssociation\n              ? [\n                  {\n                    name: 'useDefaultRoles',\n                    component: SwitchFormControlComponent,\n                    options: {\n                      label: 'Use default roles'\n                    } as IExpressionFormControlOptions\n                  },\n                  ...(isManyToManyAssociation && useDefaultRoles\n                    ? []\n                    : [\n                        {\n                          name: 'nodeARole',\n                          component: ExpressionFormControlComponent,\n                          options: {\n                            label: 'First record role',\n                            dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                            operators: this.expressionConfigurator.getOperators()\n                          } as IExpressionFormControlOptions\n                        },\n                        {\n                          name: 'nodeBRole',\n                          component: ExpressionFormControlComponent,\n                          options: {\n                            label: 'Second record role',\n                            dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                            operators: this.expressionConfigurator.getOperators()\n                          } as IExpressionFormControlOptions\n                        }\n                      ])\n                ]\n              : [])\n          ]\n        : [])\n    ];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IViewActionService, RxViewActionUtilsService } from '@helix/platform/view/api';\nimport {\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RX_ASSOCIATION_DEFINITION,\n  RxAssociationDefinitionService,\n  RxAssociationInstanceService\n} from '@helix/platform/association/api';\nimport { RxOpenViewActionService } from '../open-view/open-view-action.service';\nimport { RxLogService } from '@helix/platform/shared/api';\nimport { IAssociateViewActionParams } from './associate-view-action.interfaces';\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\nimport { map, mapTo, switchMap } from 'rxjs/operators';\nimport { compact, flatten, flow, map as _map, uniq } from 'lodash';\nimport { RX_OPEN_VIEW } from '../open-view/open-view-action.constant';\nimport { RxError } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxAssociateViewActionService implements IViewActionService<IAssociateViewActionParams> {\n  constructor(\n    private rxAssociationInstanceService: RxAssociationInstanceService,\n    private rxOpenViewActionService: RxOpenViewActionService,\n    private rxAssociationDefinitionService: RxAssociationDefinitionService,\n    private rxLogService: RxLogService,\n    private rxViewActionUtilsService: RxViewActionUtilsService\n  ) {}\n\n  execute(params: IAssociateViewActionParams) {\n    if (!params.associatedRecordId) {\n      return throwError(new RxError('rxAssociateAction: Associated Record ID is not defined.'));\n    }\n\n    return forkJoin([\n      this.getInstanceIds(params),\n      this.rxAssociationDefinitionService.get(params.associationDefinitionName)\n    ]).pipe(\n      switchMap(([instanceIds, associationDefinition]) => {\n        let nodeAIds = [];\n        let nodeBIds = [];\n\n        if (instanceIds.length) {\n          if (params.associationDefinitionRole === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value) {\n            nodeAIds = instanceIds;\n            nodeBIds = [params.associatedRecordId];\n          } else if (params.associationDefinitionRole === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value) {\n            nodeAIds = [params.associatedRecordId];\n            nodeBIds = instanceIds;\n          }\n\n          if (associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToOne.value) {\n            nodeAIds = nodeAIds[0];\n            nodeBIds = nodeBIds[0];\n          } else if (associationDefinition.cardinality === RX_ASSOCIATION_DEFINITION.cardinality.oneToMany.value) {\n            nodeAIds = nodeAIds[0];\n          }\n\n          return this.rxAssociationInstanceService\n            .associateRecords(\n              params.associationDefinitionName,\n              nodeAIds,\n              nodeBIds,\n              params.useDefaultRoles,\n              params.nodeARole,\n              params.nodeBRole\n            )\n            .pipe(mapTo(instanceIds));\n        }\n\n        return of(instanceIds);\n      })\n    );\n  }\n\n  private getInstanceIds(params: IAssociateViewActionParams): Observable<string[]> {\n    return this.rxOpenViewActionService\n      .execute({\n        presentation: {\n          modalSize: RX_OPEN_VIEW.modalSize.Large,\n          type: RX_OPEN_VIEW.type.DockedRightModal\n        },\n        viewDefinitionName: params.viewDefinitionName,\n        viewParams: null\n      })\n      .pipe(\n        map((output) => {\n          const instanceIds = flow(\n            (outs) => _map(outs, (out) => this.rxViewActionUtilsService.extractRecordIds(out)),\n            flatten,\n            compact,\n            uniq\n          )(output);\n\n          this.rxLogService.debug(`RxAssociateAction: associating ${instanceIds.length} record(s)`);\n\n          return instanceIds;\n        })\n      );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxViewActionRegistryService, ViewComponentPropertyType } from '@helix/platform/view/api';\nimport { RxAssociateViewActionService } from './associate-view-action.service';\nimport { OpenViewActionModule } from '../open-view/open-view-action.module';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxAssociateViewActionDesignModel } from './associate-view-action-design-model.class';\n\n@NgModule({\n  imports: [OpenViewActionModule]\n})\nexport class AssociateViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxAssociateViewActionService: RxAssociateViewActionService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxAssociateAction',\n      label: 'Associate records',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxAssociateViewActionService,\n      designModel: RxAssociateViewActionDesignModel,\n      parameters: [\n        {\n          name: 'recordDefinitionName',\n          label: 'Record definition to associate',\n          isRequired: true,\n          type: ViewComponentPropertyType.String\n        },\n        {\n          name: 'associationDefinitionName',\n          label: 'Association to use',\n          isRequired: true\n        },\n        {\n          name: 'associationDefinitionRole',\n          label: 'Associated record node side',\n          isRequired: true\n        },\n        {\n          name: 'associatedRecordId',\n          label: 'Associated record ID',\n          enableExpressionEvaluation: true,\n          isRequired: true\n        },\n        {\n          name: 'viewDefinitionName',\n          label: 'View for selecting or creating associated records',\n          isRequired: true,\n          type: ViewComponentPropertyType.String\n        },\n        {\n          name: 'useDefaultRoles'\n        },\n        {\n          name: 'nodeARole',\n          enableExpressionEvaluation: true\n        },\n        {\n          name: 'nodeBRole',\n          enableExpressionEvaluation: true\n        }\n      ]\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  IViewActionService,\n  OpenViewActionModalSize,\n  OpenViewActionType,\n  RowDataItemIdFieldName\n} from '@helix/platform/view/api';\nimport { EMPTY, Observable } from 'rxjs';\nimport { switchMapTo, tap } from 'rxjs/operators';\nimport { IFieldInstance, RX_RECORD_DEFINITION, RxRecordInstanceUtilsService } from '@helix/platform/record/api';\nimport { compact, flatten, flow, isArray, isFunction, isObject, map, some, uniq } from 'lodash';\nimport { RxGuidService, RxStringService } from '@helix/platform/utils';\nimport { RxOpenViewActionService } from '../open-view/open-view-action.service';\nimport { IAvcAssociateActionParams } from './avc-associate-action-params.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxAvcAssociateActionService implements IViewActionService<IAvcAssociateActionParams, never> {\n  constructor(\n    private rxGuidService: RxGuidService,\n    private rxOpenViewActionService: RxOpenViewActionService,\n    private rxStringService: RxStringService,\n    private rxRecordInstanceUtilsService: RxRecordInstanceUtilsService\n  ) {}\n\n  execute(params: IAvcAssociateActionParams): Observable<never> {\n    return this.rxOpenViewActionService\n      .execute({\n        viewDefinitionName: params.viewDefinitionName,\n        viewParams: null,\n        presentation: {\n          modalSize: OpenViewActionModalSize.Large,\n          type: OpenViewActionType.DockedRightModal\n        }\n      })\n      .pipe(\n        tap((output) => {\n          const recordInstances = flow(\n            (outputs) => map(outputs, (outputsItem) => this.extractRecordInstance(outputsItem)),\n            flatten,\n            compact,\n            uniq\n          )(output);\n\n          params.associationViewComponent.associate(recordInstances);\n        }),\n        switchMapTo(EMPTY)\n      );\n  }\n\n  private extractRecordInstance(source: {\n    [fieldId: string]: any;\n    fieldInstances: { [fieldId: number]: IFieldInstance };\n  }) {\n    let recordInstanceFields = [];\n\n    // for record grid\n    if (isFunction(source.getSelectedRows)) {\n      recordInstanceFields = map(\n        source.getSelectedRows(),\n        this.rxRecordInstanceUtilsService.convertFromDataPageRowToPlainRecordInstance\n      );\n\n      // for record grid row\n    } else if (isObject(source) && this.rxStringService.isNonEmptyString(source[RowDataItemIdFieldName])) {\n      recordInstanceFields.push(this.rxRecordInstanceUtilsService.convertFromDataPageRowToPlainRecordInstance(source));\n\n      // for selected rows\n    } else if (isArray(source) && some(source, isObject)) {\n      recordInstanceFields = map(source, this.rxRecordInstanceUtilsService.convertFromDataPageRowToPlainRecordInstance);\n\n      // for existing record instance\n    } else if (isObject(source) && isObject(source.fieldInstances) && source.id) {\n      recordInstanceFields.push(source);\n\n      // for new record instance\n    } else if (isObject(source) && isObject(source.fieldInstances) && !source.id) {\n      const dummyId = this.rxGuidService.generate();\n\n      source.id = dummyId;\n      source.fieldInstances[RX_RECORD_DEFINITION.coreFieldIds.id].value = dummyId;\n      source.isNewInstance = true;\n\n      recordInstanceFields.push(source);\n    }\n\n    return recordInstanceFields;\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RxViewActionRegistryService } from '@helix/platform/view/api';\nimport { RxAvcAssociateActionService } from './avc-associate-action.service';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\n\n@NgModule({\n  imports: [CommonModule]\n})\nexport class AvcAssociateActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxAvcAssociateActionService: RxAvcAssociateActionService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxAvcAssociate',\n      label: 'Avc associate',\n      bundleId: RX_APPLICATION.platformBundleId,\n      hidden: true,\n      service: this.rxAvcAssociateActionService,\n      parameters: [\n        {\n          name: 'viewDefinitionName'\n        },\n        {\n          name: 'associationViewComponent',\n          enableExpressionEvaluation: true\n        }\n      ]\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IViewActionService } from '@helix/platform/view/api';\nimport { EMPTY, Observable } from 'rxjs';\nimport { ICloseViewActionParams } from './close-view-action-params.interface';\nimport { tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxCloseViewActionService implements IViewActionService<ICloseViewActionParams, never> {\n  execute(params: ICloseViewActionParams): Observable<never> {\n    return params.actAsCancel\n      ? params.viewApi.cancel()\n      : EMPTY.pipe(\n          tap({\n            complete() {\n              params.viewApi.close();\n            }\n          })\n        );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxViewActionRegistryService, ViewComponentPropertyType } from '@helix/platform/view/api';\nimport { RxCloseViewActionService } from './close-view-action.service';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { SwitchFormControlComponent } from '@helix/platform/shared/components';\n\n@NgModule()\nexport class CloseViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxCloseViewActionService: RxCloseViewActionService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxCloseViewAction',\n      label: 'Close view',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxCloseViewActionService,\n      parameters: [\n        {\n          name: 'viewApi',\n          enableExpressionEvaluation: true,\n          defaultValue: '${view.api}'\n        },\n        {\n          name: 'actAsCancel',\n          label: 'Act as cancel',\n          editor: SwitchFormControlComponent,\n          type: ViewComponentPropertyType.Boolean,\n          designType: ViewComponentPropertyType.Boolean\n        }\n      ]\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { RX_MODAL, RxModalService } from '@helix/platform/ui-kit';\nimport { IRxRecordGridApi, IViewActionService, RxViewActionUtilsService } from '@helix/platform/view/api';\nimport { RxRecordInstanceService } from '@helix/platform/record/api';\nimport { RxLogService, RxNotificationService } from '@helix/platform/shared/api';\nimport { EMPTY, forkJoin, from, Observable, throwError } from 'rxjs';\nimport { IDeleteRecordsViewActionParams } from './delete-records-view-action-params.interface';\nimport { switchMap, switchMapTo, tap } from 'rxjs/operators';\nimport { RxError, RxStringService } from '@helix/platform/utils';\nimport { castArray, isEmpty, isFunction } from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxDeleteRecordsViewActionService implements IViewActionService<IDeleteRecordsViewActionParams, never> {\n  constructor(\n    private rxLogService: RxLogService,\n    private rxModalService: RxModalService,\n    private translateService: TranslateService,\n    private rxNotificationService: RxNotificationService,\n    private rxRecordInstanceService: RxRecordInstanceService,\n    private rxViewActionUtilsService: RxViewActionUtilsService,\n    private rxStringService: RxStringService\n  ) {}\n\n  execute(params: IDeleteRecordsViewActionParams): Observable<never> {\n    if (\n      isEmpty(params.recordDefinitionName) &&\n      params.records &&\n      isFunction((<IRxRecordGridApi>params.records).getRecordDefinitionName)\n    ) {\n      params.recordDefinitionName = (<IRxRecordGridApi>params.records).getRecordDefinitionName();\n    }\n\n    if (this.rxStringService.isNonEmptyString(params.recordDefinitionName)) {\n      let records = [];\n\n      if (params.records) {\n        if (isFunction((<IRxRecordGridApi>params.records).getSelectedRows)) {\n          records = castArray((<IRxRecordGridApi>params.records).getSelectedRows());\n        } else {\n          records = castArray(<IRxRecordGridApi>params.records);\n        }\n      }\n\n      const recordIds = this.rxViewActionUtilsService.extractRecordIds(records);\n\n      if (recordIds.length) {\n        const message =\n          recordIds.length === 1\n            ? 'com.bmc.arsys.rx.client.view-actions.delete-record.confirmation-dialog.message'\n            : 'com.bmc.arsys.rx.client.view-actions.delete-records.confirmation-dialog.message';\n\n        return from(\n          this.rxModalService.confirm({\n            title: this.translateService.instant('com.bmc.arsys.rx.client.common.warning.label'),\n            modalStyle: RX_MODAL.modalStyles.warning,\n            message: this.translateService.instant(message, { count: recordIds.length })\n          })\n        ).pipe(\n          switchMap((res) => {\n            if (res) {\n              const deleteObservables = recordIds.map((recordId) =>\n                this.rxRecordInstanceService.delete(params.recordDefinitionName, recordId)\n              );\n\n              return forkJoin(deleteObservables).pipe(\n                tap(() => {\n                  this.rxNotificationService.addSuccessMessage(\n                    this.translateService.instant(\n                      'com.bmc.arsys.rx.client.view-actions.delete-records.records-deleted.message'\n                    )\n                  );\n                }),\n                switchMapTo(\n                  isFunction((<IRxRecordGridApi>params.records).refresh)\n                    ? (<IRxRecordGridApi>params.records).refresh()\n                    : EMPTY\n                )\n              );\n            } else {\n              return throwError(null);\n            }\n          })\n        );\n      } else {\n        this.rxLogService.debug('rxDeleteRecordsAction: no records to delete.');\n\n        return EMPTY;\n      }\n    } else {\n      return throwError(new RxError('rxDeleteRecordsAction: Record Definition Name is not defined.'));\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxViewActionRegistryService, ViewComponentPropertyType } from '@helix/platform/view/api';\nimport { RxDeleteRecordsViewActionService } from './delete-records-view-action.service';\nimport { RX_APPLICATION, Tooltip } from '@helix/platform/shared/api';\nimport {\n  ExpressionFormControlComponent,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType\n} from '@helix/platform/shared/components';\n\n@NgModule()\nexport class DeleteRecordsViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxDeleteRecordsViewActionService: RxDeleteRecordsViewActionService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxDeleteRecordsAction',\n      label: 'Delete records',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxDeleteRecordsViewActionService,\n      parameters: [\n        {\n          name: 'records',\n          label: 'Records',\n          enableExpressionEvaluation: true,\n          isRequired: true,\n          editor: ExpressionFormControlComponent,\n          tooltip: new Tooltip(\n            `Build an expression that evaluates to one of the following:<br>\n            1) Record grid<br>\n            2) A collection of record instances or<br>\n            3) A collection of record instance IDs. <br>For options 2 and 3, select a record definition in the field below.`\n          )\n        },\n        {\n          name: 'recordDefinitionName',\n          label: 'Record definition',\n          type: ViewComponentPropertyType.String,\n          editor: RxDefinitionPickerComponent,\n          editorOptions: {\n            definitionType: RxDefinitionPickerType.StandardDataRecord\n          },\n          defaultValue: null\n        }\n      ]\n    });\n  }\n}\n","import { Injector } from '@angular/core';\nimport { RxViewDesignerActionModel } from '@helix/platform/view/designer';\nimport {\n  ExpressionFormControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionFormControlOptions,\n  ISelectFormControlOptions,\n  ISelectOption,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SelectFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport { RxDefinitionNameService } from '@helix/platform/shared/api';\nimport {\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RxAssociatedRecordNodeSide,\n  RxAssociationDefinitionService\n} from '@helix/platform/association/api';\nimport {\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, pluck, switchMap, map, withLatestFrom, shareReplay, skip, take } from 'rxjs/operators';\nimport { IDisassociateViewActionDesignProperties } from './disassociate-view-action.interfaces';\n\nexport class RxDisassociateViewActionDesignModel extends RxViewDesignerActionModel {\n  private rxRecordDefinitionCacheService = this.injector.get(RxRecordDefinitionCacheService);\n  private rxDefinitionNameService = this.injector.get(RxDefinitionNameService);\n  private rxAssociationDefinitionService = this.injector.get(RxAssociationDefinitionService);\n\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<IDisassociateViewActionDesignProperties>\n  ): ViewActionDesignEditableProperties<IDisassociateViewActionDesignProperties> {\n    return {\n      recordDefinitionName: null,\n      associationDefinitionName: null,\n      associationDefinitionRole: null,\n      associatedRecordId: null,\n      disassociatedRecordIds: null,\n      ...initialProperties\n    };\n  }\n\n  constructor(\n    protected injector: Injector,\n    readonly sandbox: IViewActionDesignSandbox<IDisassociateViewActionDesignProperties>\n  ) {\n    super(injector, sandbox);\n\n    const recordDefinitionName$ = this.sandbox.actionProperties$.pipe(\n      pluck('recordDefinitionName'),\n      distinctUntilChanged()\n    );\n\n    const associationDefinitionName$ = this.sandbox.actionProperties$.pipe(\n      pluck('associationDefinitionName'),\n      distinctUntilChanged()\n    );\n\n    const associationNameOptions$: Observable<ISelectOption[]> = recordDefinitionName$.pipe(\n      switchMap((recordDefinitionName) =>\n        recordDefinitionName\n          ? this.rxRecordDefinitionCacheService.getRecordAssociationDefinitions(recordDefinitionName).pipe(\n              map((associationDefinitions) =>\n                associationDefinitions[recordDefinitionName].map((recordDefinition) => ({\n                  id: recordDefinition.name,\n                  name: this.rxDefinitionNameService.getDisplayName(recordDefinition.name)\n                }))\n              )\n            )\n          : of([])\n      )\n    );\n\n    const associationDefinition$ = associationDefinitionName$.pipe(\n      switchMap((associationDefinitionName) =>\n        associationDefinitionName ? this.rxAssociationDefinitionService.get(associationDefinitionName) : of(null)\n      ),\n      shareReplay(1)\n    );\n\n    const isSymmetricalAssociation$ = associationDefinition$.pipe(\n      map((association) => (association ? association.nodeAId === association.nodeBId : false))\n    );\n\n    const associationRoleOptions$: Observable<ISelectOption[]> = associationDefinition$.pipe(\n      map((association) =>\n        association\n          ? [\n              {\n                id: RxAssociatedRecordNodeSide.NodeA,\n                name: association.nodeAName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.defaultName\n              },\n              {\n                id: RxAssociatedRecordNodeSide.NodeB,\n                name: association.nodeBName || RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.defaultName\n              }\n            ]\n          : []\n      )\n    );\n\n    // skip initial props set\n    recordDefinitionName$.pipe(skip(1)).subscribe(() => {\n      this.sandbox.updateActionProperties({\n        associationDefinitionName: null,\n        associationDefinitionRole: null\n      });\n    });\n\n    associationDefinition$\n      .pipe(\n        // skip initial props set\n        skip(1),\n        withLatestFrom(isSymmetricalAssociation$, recordDefinitionName$)\n      )\n      .subscribe(([associationDefinition, isSymmetricalAssociation, recordDefinitionName]) => {\n        if (associationDefinition && !isSymmetricalAssociation) {\n          const associationDefinitionRole =\n            recordDefinitionName === associationDefinition.nodeAId\n              ? RxAssociatedRecordNodeSide.NodeA\n              : RxAssociatedRecordNodeSide.NodeB;\n\n          this.sandbox.updateActionProperties({\n            associationDefinitionRole\n          });\n        } else {\n          this.sandbox.updateActionProperties({\n            associationDefinitionRole: null\n          });\n        }\n      });\n\n    combineLatest([recordDefinitionName$, associationNameOptions$, associationRoleOptions$])\n      .pipe(withLatestFrom(isSymmetricalAssociation$))\n      .subscribe(\n        ([[recordDefinitionName, associationNameOptions, associationRoleOptions], isSymmetricalAssociation]) => {\n          this.sandbox.setActionPropertyEditorConfig(\n            this.getActionEditorConfig(\n              recordDefinitionName,\n              associationNameOptions,\n              associationRoleOptions,\n              isSymmetricalAssociation\n            )\n          );\n        }\n      );\n  }\n\n  private getActionEditorConfig(\n    recordDefinitionName: string,\n    associationNameOptions: ISelectOption[],\n    associationRoleOptions: ISelectOption[],\n    isSymmetricalAssociation: boolean\n  ): IViewActionDesignPropertyEditorConfig {\n    return [\n      {\n        name: 'recordDefinitionName',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label: 'Record definition to disassociate',\n          definitionType: RxDefinitionPickerType.StandardDataRecord,\n          required: true\n        } as IDefinitionPickerComponentOptions\n      },\n      ...(recordDefinitionName\n        ? [\n            {\n              name: 'associationDefinitionName',\n              component: SelectFormControlComponent,\n              options: {\n                label: 'Association to use',\n                options: associationNameOptions,\n                required: true\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'associationDefinitionRole',\n              component: SelectFormControlComponent,\n              isDisabled: !isSymmetricalAssociation,\n              options: {\n                label: 'Associated record node side',\n                required: true,\n                options: associationRoleOptions\n              } as ISelectFormControlOptions\n            },\n            {\n              name: 'associatedRecordId',\n              component: ExpressionFormControlComponent,\n              options: {\n                label: 'Associated record ID',\n                dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                operators: this.expressionConfigurator.getOperators(),\n                isRequired: true\n              } as IExpressionFormControlOptions\n            },\n            {\n              name: 'disassociatedRecordIds',\n              component: ExpressionFormControlComponent,\n              options: {\n                label: 'Records to disassociate',\n                dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n                operators: this.expressionConfigurator.getOperators(),\n                isRequired: true\n              } as IExpressionFormControlOptions\n            }\n          ]\n        : [])\n    ];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IViewActionService } from '@helix/platform/view/api';\nimport { RxLogService } from '@helix/platform/shared/api';\nimport { RxViewActionUtilsService } from '@helix/platform/view/api';\nimport {\n  RX_ASSOCIATED_RECORD_NODE_SIDES,\n  RxAssociationDefinitionService,\n  RxAssociationInstanceService\n} from '@helix/platform/association/api';\nimport { IDisassociateViewActionParams } from './disassociate-view-action.interfaces';\nimport { Observable, of, throwError } from 'rxjs';\nimport { switchMap, mapTo } from 'rxjs/operators';\nimport { RxError } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxDisassociateViewActionService implements IViewActionService<IDisassociateViewActionParams, string[]> {\n  constructor(\n    private rxLogService: RxLogService,\n    private rxViewActionUtilsService: RxViewActionUtilsService,\n    private rxAssociationDefinitionService: RxAssociationDefinitionService,\n    private rxAssociationInstanceService: RxAssociationInstanceService\n  ) {}\n\n  execute(params: IDisassociateViewActionParams): Observable<string[]> {\n    if (!params.associatedRecordId) {\n      return throwError(new RxError('rxDisassociateAction: Associated Record ID is not defined.'));\n    }\n\n    const instanceIds = this.rxViewActionUtilsService.extractRecordIds(params.disassociatedRecordIds);\n\n    this.rxLogService.debug(`RxDisassociateAction: disassociating ${instanceIds.length} record(s)`);\n\n    if (instanceIds.length) {\n      return this.rxAssociationDefinitionService.get(params.associationDefinitionName).pipe(\n        switchMap(() => {\n          let nodeAIds: string[],\n            nodeBIds: string[] = [];\n\n          if (params.associationDefinitionRole === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeA.value) {\n            nodeAIds = instanceIds;\n            nodeBIds = [params.associatedRecordId];\n          } else if (params.associationDefinitionRole === RX_ASSOCIATED_RECORD_NODE_SIDES.nodeB.value) {\n            nodeAIds = [params.associatedRecordId];\n            nodeBIds = instanceIds;\n          }\n\n          return this.rxAssociationInstanceService\n            .disassociateRecords(params.associationDefinitionName, nodeAIds, nodeBIds)\n            .pipe(mapTo(instanceIds));\n        })\n      );\n    } else {\n      return of([]);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxViewActionRegistryService, ViewComponentPropertyType } from '@helix/platform/view/api';\nimport { RxDisassociateViewActionService } from './disassociate-view-action.service';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxDisassociateViewActionDesignModel } from './disassociate-view-action-design-model.class';\n\n@NgModule()\nexport class DisassociateViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxDisassociateViewActionService: RxDisassociateViewActionService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxDisassociateAction',\n      label: 'Disassociate records',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxDisassociateViewActionService,\n      designModel: RxDisassociateViewActionDesignModel,\n      parameters: [\n        {\n          name: 'recordDefinitionName',\n          label: 'Record definition to disassociate',\n          isRequired: true,\n          type: ViewComponentPropertyType.String\n        },\n        {\n          name: 'associationDefinitionName',\n          label: 'Association to use',\n          isRequired: true\n        },\n        {\n          name: 'associationDefinitionRole',\n          label: 'Associated record node side',\n          isRequired: true\n        },\n        {\n          name: 'associatedRecordId',\n          label: 'Associated record ID',\n          enableExpressionEvaluation: true,\n          isRequired: true\n        },\n        {\n          name: 'disassociatedRecordIds',\n          label: 'Records to disassociate',\n          enableExpressionEvaluation: true,\n          isRequired: true\n        }\n      ]\n    });\n  }\n}\n","import { Component } from '@angular/core';\nimport { ActiveModalRef } from '@bmc-ux/adapt-angular';\nimport { IEditRecordsActionResults } from '../interfaces/edit-records-action-results.interface';\n\n@Component({\n  selector: 'rx-edit-records-result-modal',\n  styleUrls: ['./result-modal.scss'],\n  templateUrl: './result-modal.html'\n})\nexport class ResultModalComponent {\n  data;\n\n  constructor(public activeModelRef: ActiveModalRef) {\n    this.data = this.activeModelRef.getData();\n  }\n\n  close() {\n    this.activeModelRef.close();\n  }\n\n  hasActionResultDetails(data: IEditRecordsActionResults): boolean {\n    return ['warningCount', 'errorCount', 'infoCount', 'successCount'].some((prop) => data.summary[prop]);\n  }\n}\n","<div class=\"modal-body\">\n  <div class=\"mb-2\">\n    <adapt-icon [name]=\"'check_circle'\" class=\"mr-1 text-success-icon\"></adapt-icon>\n    {{'com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.updated-successfully.label' |\n    translate}}: {{data.summary.successCount}}\n  </div>\n\n  <div class=\"mb-2\">\n    <adapt-icon [name]=\"'exclamation_circle'\" class=\"mr-1 text-warning-icon\"></adapt-icon>\n    {{'com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.updated-with-warnings.label' | translate\n    }}: {{data.summary.warningCount}}\n  </div>\n\n  <div>\n    <adapt-icon [name]=\"'exclamation_triangle'\" class=\"mr-1 text-danger-icon\"></adapt-icon>\n    {{'com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.update-failures.label' | translate }}:\n    {{data.summary.errorCount}}\n  </div>\n\n  <div class=\"mt-2\" *ngIf=\"hasActionResultDetails(data) && data.details\">\n    <adapt-rx-textarea\n      class=\"resize-none\"\n      label=\"{{'com.bmc.arsys.rx.client.common.messages.label' | translate }}\"\n      readonly\n      rows=\"15\"\n      [ngModel]=\"data.details\"\n    >\n    </adapt-rx-textarea>\n  </div>\n</div>\n\n<div class=\"modal-footer\">\n  <button class=\"btn btn-secondary btn-sm\" (click)=\"close()\" type=\"button\">\n    {{'com.bmc.arsys.rx.client.common.close.label' | translate}}\n  </button>\n</div>\n","import { Injectable } from '@angular/core';\nimport { assign } from 'lodash';\nimport { RxGuidService } from '@helix/platform/utils';\nimport {\n  IContainerViewComponentDefinition,\n  IViewComponentDefinition,\n  IViewDefinition,\n  RX_VIEW_DEFINITION,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport { RX_RECORD_DEFINITION, RxFieldDefinitionService } from '@helix/platform/record/api';\nimport { TranslateService } from '@ngx-translate/core';\nimport {\n  ContainerRowWrap,\n  IColumnDescriptor,\n  RecordEditorMode,\n  RxAssociationEditingMode,\n  RxDefaultRecordEditorInputType\n} from '@helix/platform/view/components';\nimport { RX_ADMINISTRATION, RxSystemConfigurationService } from '@helix/platform/shared/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxEditRecordsViewBuilder {\n  constructor(\n    private rxGuidService: RxGuidService,\n    private rxDefaultRecordEditorInputType: RxDefaultRecordEditorInputType,\n    private rxFieldDefinitionService: RxFieldDefinitionService,\n    private translateService: TranslateService,\n    private rxSystemConfigurationService: RxSystemConfigurationService\n  ) {}\n\n  getViewDefinition(recordDefinitionName: string, columnDescriptors: IColumnDescriptor[]): IViewDefinition {\n    const closeButtonId = this.rxGuidService.generate(),\n      containerId = this.rxGuidService.generate(),\n      recordEditorId = this.rxGuidService.generate(),\n      recordInstanceId = null,\n      saveButtonId = this.rxGuidService.generate(),\n      viewDefinitionId = this.rxGuidService.generate(),\n      recordEditorComponentDefinitions = this.getComponentDefinitions(columnDescriptors, recordEditorId);\n\n    return {\n      guid: viewDefinitionId,\n      layout: JSON.stringify({\n        outlets: [\n          {\n            name: RX_VIEW_DEFINITION.defaultOutletName,\n            columns: [\n              {\n                children: [recordEditorId]\n              }\n            ]\n          },\n          {\n            name: 'footer',\n            height: 60,\n            columns: [\n              {\n                children: [containerId]\n              }\n            ]\n          }\n        ]\n      }),\n      outputParams: [\n        {\n          name: 'recordInstance',\n          source: '${view.components.' + recordEditorId + '.recordInstance}'\n        }\n      ],\n      inputParams: [],\n      componentDefinitions: [\n        {\n          resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n          guid: recordEditorId,\n          type: RxViewComponentType.RecordEditor,\n          propertiesByName: {\n            recordInstanceId: `${recordInstanceId}`,\n            mode: RecordEditorMode.BulkEdit,\n            recordDefinitionName: recordDefinitionName,\n            styles: 'p-0 border-0'\n          },\n          componentDefinitions: recordEditorComponentDefinitions,\n          layout: JSON.stringify({\n            outlets: [\n              {\n                name: RX_VIEW_DEFINITION.defaultOutletName,\n                columns: [\n                  {\n                    children: recordEditorComponentDefinitions.map((componentDefinition) => componentDefinition.guid)\n                  }\n                ]\n              }\n            ]\n          })\n        },\n        {\n          resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n          guid: containerId,\n          type: RxViewComponentType.ButtonBar,\n          propertiesByName: {\n            alignment: 'right',\n            hidden: '0'\n          },\n          layout: JSON.stringify({\n            outlets: [\n              {\n                name: RX_VIEW_DEFINITION.defaultOutletName,\n                columns: [\n                  {\n                    children: [saveButtonId, closeButtonId]\n                  }\n                ]\n              }\n            ]\n          }),\n          componentDefinitions: [\n            {\n              resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n              guid: closeButtonId,\n              type: RxViewComponentType.ActionButton,\n              propertiesByName: {\n                label: this.translateService.instant('com.bmc.arsys.rx.client.common.cancel.label'),\n                style: 'secondary',\n                size: 'default'\n              },\n              componentDefinitions: [\n                {\n                  resourceType: RX_VIEW_DEFINITION.resourceTypes.viewComponent,\n                  guid: this.rxGuidService.generate(),\n                  type: RxViewComponentType.Action,\n                  propertiesByName: {\n                    viewApi: '${view.api}',\n                    name: 'rxCloseViewAction',\n                    actAsCancel: 'true'\n                  }\n                }\n              ]\n            },\n            {\n              resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n              guid: saveButtonId,\n              type: RxViewComponentType.ActionButton,\n              propertiesByName: {\n                label: this.translateService.instant('com.bmc.arsys.rx.client.common.save.label'),\n                style: 'primary',\n                disabled: 'NOT${view.components.' + recordEditorId + '.canSave}',\n                size: 'default'\n              },\n              componentDefinitions: [\n                {\n                  resourceType: RX_VIEW_DEFINITION.resourceTypes.viewComponent,\n                  guid: this.rxGuidService.generate(),\n                  type: RxViewComponentType.Action,\n                  propertiesByName: {\n                    viewApi: '${view.api}',\n                    name: 'rxCloseViewAction',\n                    actAsCancel: 'false'\n                  }\n                }\n              ]\n            }\n          ]\n        }\n      ]\n    };\n  }\n\n  private getComponentDefinitions(\n    columnDescriptors: IColumnDescriptor[],\n    recordEditorId: string\n  ): IContainerViewComponentDefinition[] {\n    const submitterMode = this.rxSystemConfigurationService.getConfigurationSync('Submitter-Mode');\n\n    if (submitterMode === RX_ADMINISTRATION.submitterModes.locked) {\n      columnDescriptors = columnDescriptors.filter(\n        (columnDescriptor) => Number(columnDescriptor.fieldId) !== RX_RECORD_DEFINITION.coreFieldIds.createdBy\n      );\n    }\n\n    const fieldContainerComponentDefinitions = this.getFieldContainerComponentDefinitions(\n      columnDescriptors,\n      recordEditorId\n    );\n\n    return [\n      {\n        resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n        guid: this.rxGuidService.generate(),\n        type: RxViewComponentType.Container,\n        propertiesByName: {\n          rowWrap: ContainerRowWrap.Sm,\n          columnCount: '1'\n        },\n        componentDefinitions: fieldContainerComponentDefinitions,\n        layout: JSON.stringify({\n          outlets: [\n            {\n              name: RX_VIEW_DEFINITION.defaultOutletName,\n              columns: [\n                {\n                  children: fieldContainerComponentDefinitions.map((componentDefinition) => componentDefinition.guid)\n                }\n              ]\n            }\n          ]\n        })\n      }\n    ];\n  }\n\n  private getFieldContainerComponentDefinitions(\n    columnDescriptors: IColumnDescriptor[],\n    recordEditorId: string\n  ): IContainerViewComponentDefinition[] {\n    return columnDescriptors\n      .filter((columnDescriptor) => !this.rxFieldDefinitionService.isSystemField(columnDescriptor.fieldDefinition))\n      .map((columnDescriptor) => {\n        let resourceType, componentType;\n        const isAssociated = Boolean(columnDescriptor.associationDescriptor);\n\n        if (isAssociated) {\n          resourceType = RX_VIEW_DEFINITION.resourceTypes.containerViewComponent;\n          componentType = RxViewComponentType.Association;\n        } else {\n          resourceType = RX_VIEW_DEFINITION.resourceTypes.viewComponent;\n          componentType = this.rxDefaultRecordEditorInputType.getFieldTypeByFieldDefinition(\n            columnDescriptor.fieldDefinition\n          );\n        }\n\n        const componentDefinition: IViewComponentDefinition = {\n          resourceType: resourceType,\n          guid: this.rxGuidService.generate(),\n          type: componentType,\n          propertiesByName: {\n            fieldId: columnDescriptor.fieldDefinition.id,\n            recordDefinition: '${view.components.' + recordEditorId + '.recordDefinition}',\n            recordInstance: '${view.components.' + recordEditorId + '.recordInstance}',\n            label: columnDescriptor.title,\n            fieldOption: RX_RECORD_DEFINITION.fieldOptions.optional\n          }\n        };\n\n        if (isAssociated) {\n          (componentDefinition as IContainerViewComponentDefinition).componentDefinitions = [];\n\n          assign(componentDefinition.propertiesByName, {\n            associatedRecordNodeSide: columnDescriptor.associationDescriptor.nodeSide,\n            editingMode: RxAssociationEditingMode.Dropdown,\n            associationDefinitionName: columnDescriptor.associationDescriptor.associationDefinition.name,\n            recordDefinitionName: columnDescriptor.associationDescriptor.recordDefinitionName\n          });\n        }\n\n        return componentDefinition;\n      })\n      .reduce<IContainerViewComponentDefinition[]>(\n        (fieldContainerComponentDefinitions, fieldComponentDefinition, index, fieldComponentDefinitions) => {\n          if (index % 2 === 0) {\n            fieldContainerComponentDefinitions.push({\n              resourceType: RX_VIEW_DEFINITION.resourceTypes.containerViewComponent,\n              guid: this.rxGuidService.generate(),\n              type: RxViewComponentType.Container,\n              propertiesByName: {\n                rowWrap: ContainerRowWrap.Sm,\n                columnCount: '2'\n              },\n              componentDefinitions: fieldComponentDefinitions.slice(index, index + 2),\n              layout: JSON.stringify({\n                outlets: [\n                  {\n                    name: RX_VIEW_DEFINITION.defaultOutletName,\n                    columns: [\n                      {\n                        children: [fieldComponentDefinition.guid],\n                        span: '6'\n                      },\n                      {\n                        children:\n                          fieldComponentDefinitions.length > index + 1\n                            ? [fieldComponentDefinitions[index + 1].guid]\n                            : [],\n                        span: '6'\n                      }\n                    ]\n                  }\n                ]\n              })\n            });\n          }\n          return fieldContainerComponentDefinitions;\n        },\n        []\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { filter, forEach, forIn, has, isEmpty, isNull, map as _map, noop, pick, some, transform, values } from 'lodash';\nimport {\n  IFieldInstance,\n  IRecordInstance,\n  IRxRecordInstanceAssociationInstances,\n  RX_RECORD_INSTANCE\n} from '@helix/platform/record/api';\nimport { AdaptModalService, ModalDeferred } from '@bmc-ux/adapt-angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IPreparedRecordInstance } from '../interfaces/prepared-record-instance.interface';\nimport { IPreparedFile } from '../interfaces/prepared-file.interface';\nimport { IFields } from '../interfaces/fields.interface';\nimport { IRecordData } from '../interfaces/record-data.interface';\nimport { IEditRecordsActionResults } from '../interfaces/edit-records-action-results.interface';\nimport { ResultModalComponent } from '../result-modal/result-modal.component';\nimport { RX_ERROR_HANDLING, RxCommandFactoryService } from '@helix/platform/shared/api';\nimport { from, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { IEditRecordsActionResponse, IEditRecordsActionResponseMessage } from '../interfaces/action-response.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxEditRecordsDataService {\n  private resourceType = 'com.bmc.arsys.rx.application.record.command.UpdateRecordInstancesCommand';\n  private editRecordsCommand = this.rxCommandFactoryService.forResourceType(this.resourceType);\n\n  constructor(\n    private adaptModalService: AdaptModalService,\n    private translateService: TranslateService,\n    private rxCommandFactoryService: RxCommandFactoryService\n  ) {}\n\n  editRecords(preparedRecordData): Observable<any> {\n    return this.editRecordsCommand.execute(preparedRecordData);\n  }\n\n  showActionResults(actionResults: IEditRecordsActionResults): Promise<ModalDeferred> {\n    return this.adaptModalService\n      .open({\n        size: 'sm',\n        title: this.translateService.instant(\n          'com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.title'\n        ),\n        data: actionResults,\n        content: ResultModalComponent\n      })\n      .catch(noop);\n  }\n\n  runAction(recordInstanceIds: string[], recordInstance: IRecordInstance): Observable<ModalDeferred> {\n    const preparedRecordData = this.prepareRecordData(recordInstanceIds, recordInstance);\n    const formData = new FormData();\n\n    formData.append('commandInstance', JSON.stringify(preparedRecordData.commandInstance));\n\n    forEach(preparedRecordData.attachments, (attachment) => {\n      formData.append(attachment.key as string, attachment.file);\n    });\n\n    Object.keys(preparedRecordData || {}).map((item) => {\n      if (item !== 'commandInstance' && item !== 'attachments') {\n        formData.append(item, JSON.stringify(preparedRecordData[item]));\n      }\n    });\n\n    return this.editRecords(formData).pipe(\n      map((response) => this.prepareActionResults(response, preparedRecordData)),\n      switchMap((actionResults) => {\n        return from(Promise.resolve(this.showActionResults(actionResults)));\n      })\n    );\n  }\n\n  private cleanUnchangedFields(recordInstance: IPreparedRecordInstance): { [fieldId: number]: IFieldInstance } {\n    return forIn(recordInstance.fieldInstances, (field, key) => {\n      if (isNull(field.value)) {\n        delete recordInstance.fieldInstances[key];\n      }\n    });\n  }\n\n  private prepareFiles(fields: IFields, keyPrefix?: string): IPreparedFile[] {\n    return values(fields)\n      .filter((field) => has(field, 'file'))\n      .map((attachment) => ({\n        key: keyPrefix ? keyPrefix + '/' + attachment.id : attachment.id,\n        file: attachment.file\n      }));\n  }\n\n  private cleanFiles(fields: IFields): IFields {\n    Object.keys(fields).map((key, index) => {\n      fields[key].hasOwnProperty('file') ? delete fields[key] : delete fields[key].file;\n    });\n\n    return fields;\n  }\n\n  private prepareAssociationInstancesForSaving(associationInstances: IRxRecordInstanceAssociationInstances): any[] {\n    return transform(\n      associationInstances,\n      (result, associationInstance, associationDefinitionName) => {\n        forEach(associationInstance, (associationGroups: any, role) => {\n          if (!isEmpty(associationGroups.pending)) {\n            result.push({\n              associationDefinitionName: associationDefinitionName,\n              recordInstanceIds: _map(associationGroups.pending, 'id'),\n              nodeSide: role,\n              resourceType: RX_RECORD_INSTANCE.association.operationResourceTypes.associate\n            });\n          }\n        });\n      },\n      []\n    );\n  }\n\n  private prepareRecordData(recordInstanceIds: Array<string>, recordInstance: IRecordInstance): IRecordData {\n    const record = pick(recordInstance, ['resourceType', 'recordDefinitionName', 'fieldInstances']);\n    const resourceType = 'com.bmc.arsys.rx.application.record.command.UpdateRecordInstancesCommand';\n\n    record.fieldInstances = this.cleanUnchangedFields(record);\n\n    const attachments = this.prepareFiles(record.fieldInstances);\n\n    record.fieldInstances = this.cleanFiles(record.fieldInstances);\n\n    const associationInstances = this.prepareAssociationInstancesForSaving(recordInstance.associationInstances);\n\n    const data: IRecordData = {\n      shouldOverrideOptimisticLock: false,\n      commandInstance: { resourceType },\n      recordInstanceIds: recordInstanceIds,\n      recordInstance: record,\n      attachments: attachments\n    };\n\n    if (!isEmpty(associationInstances)) {\n      data.associationOperations = associationInstances.map((associationInstance) => ({\n        ...associationInstance,\n        nodeSide: associationInstance.nodeSide.split(':')[0]\n      }));\n    }\n\n    return data;\n  }\n\n  private prepareActionResults(\n    response: IEditRecordsActionResponse,\n    requestData: IRecordData\n  ): IEditRecordsActionResults {\n    const newLine = '\\n';\n    const updatedInstanceIdsCount = requestData.recordInstanceIds.length;\n    const detailsMessageLabel = this.translateService.instant(\n      'com.bmc.arsys.rx.client.view-actions.edit-records.action-results-dialog.details.record-instance-id.label'\n    );\n\n    const summary = {\n      successCount: 0,\n      errorCount: 0,\n      warningCount: 0,\n      infoCount: 0\n    };\n\n    let details: string;\n\n    if (!isEmpty(response)) {\n      summary.errorCount = filter(response, (messages) =>\n        some(messages, ['messageType', RX_ERROR_HANDLING.messageTypes.error])\n      ).length;\n\n      summary.warningCount = filter(response, (messages) =>\n        some(messages, ['messageType', RX_ERROR_HANDLING.messageTypes.warning])\n      ).length;\n\n      summary.infoCount = filter(response, (messages) =>\n        some(messages, ['messageType', RX_ERROR_HANDLING.messageTypes.info])\n      ).length;\n\n      summary.successCount = filter(response, (messages) =>\n        some(messages, ['messageType', RX_ERROR_HANDLING.messageTypes.success])\n      ).length;\n\n      details = _map(response, (messages, recordInstanceId) => {\n        const recordInstanceIdMessageHeader = detailsMessageLabel + ': ' + recordInstanceId;\n\n        const messageText = values(messages).map(this.convertMessageToString).join(', ');\n\n        return recordInstanceIdMessageHeader + newLine + messageText;\n      }).join(newLine + newLine);\n    } else {\n      details = '';\n    }\n\n    summary.successCount = updatedInstanceIdsCount - summary.errorCount - summary.warningCount;\n\n    return { summary, details };\n  }\n\n  private convertMessageToString(message: IEditRecordsActionResponseMessage): string {\n    return `${message.messageType}: ${values([message.messageText, message.appendedText]).join(' ')}`;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { RxDefinitionNameService, RxLogService } from '@helix/platform/shared/api';\nimport { RxError } from '@helix/platform/utils';\nimport { IRxRecordGridApi, IViewActionService, RxViewActionUtilsService } from '@helix/platform/view/api';\nimport { RxRecordGridUtilsService } from '@helix/platform/view/components';\nimport { TranslateService } from '@ngx-translate/core';\nimport { isEmpty, isFunction, isNil } from 'lodash';\nimport { EMPTY, from, Observable, throwError } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { RX_OPEN_VIEW } from '../../open-view/open-view-action.constant';\nimport { RxOpenViewActionService } from '../../open-view/open-view-action.service';\nimport { IEditRecordsViewActionParams } from '../interfaces/edit-records-view-action-params.interface';\nimport { RxEditRecordsDataService } from './edit-records-data.service';\nimport { RxEditRecordsViewBuilder } from './edit-records-view-builder.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxEditRecordsViewActionService implements IViewActionService<IEditRecordsViewActionParams, never> {\n  constructor(\n    private rxEditRecordsViewBuilder: RxEditRecordsViewBuilder,\n    private rxEditRecordsDataService: RxEditRecordsDataService,\n    private rxLogService: RxLogService,\n    private rxRecordGridUtilsService: RxRecordGridUtilsService,\n    private translateService: TranslateService,\n    private rxDefinitionNameService: RxDefinitionNameService,\n    private openViewAction: RxOpenViewActionService,\n    private rxViewActionUtilsService: RxViewActionUtilsService\n  ) {}\n\n  execute(params: IEditRecordsViewActionParams): Observable<never> {\n    let { recordDefinitionName } = params;\n\n    if (isNil(params.records)) {\n      return throwError(new RxError('rxEditRecordsAction: no records to edit.'));\n    }\n\n    if (isEmpty(recordDefinitionName) && isFunction((<IRxRecordGridApi>params.records).getRecordDefinitionName)) {\n      recordDefinitionName = (<IRxRecordGridApi>params.records).getRecordDefinitionName();\n    }\n\n    if (recordDefinitionName) {\n      const recordIds = this.rxViewActionUtilsService.extractRecordIds(params.records);\n\n      if (recordIds.length) {\n        return from(this.rxRecordGridUtilsService.getColumnDescriptors(recordDefinitionName, params.records)).pipe(\n          switchMap((columnDescriptors) => {\n            const localizedViewTitle = this.translateService.instant(\n              'com.bmc.arsys.rx.client.view-actions.edit-records.view.title',\n              { recordDefinitionName: this.rxDefinitionNameService.getDisplayName(recordDefinitionName) }\n            );\n\n            const localizedViewNotification = this.translateService.instant(\n              'com.bmc.arsys.rx.client.view-actions.edit-records.view.notification'\n            );\n\n            return this.openViewAction\n              .execute({\n                presentation: {\n                  modalSize: RX_OPEN_VIEW.modalSize.Large,\n                  title: localizedViewTitle,\n                  notification: localizedViewNotification,\n                  type: RX_OPEN_VIEW.type.DockedRightModal\n                },\n                viewDefinitionName: this.rxEditRecordsViewBuilder.getViewDefinition(\n                  recordDefinitionName,\n                  columnDescriptors\n                ),\n                viewParams: null\n              })\n              .pipe(\n                switchMap((viewOutput) =>\n                  viewOutput && viewOutput.recordInstance\n                    ? this.rxEditRecordsDataService\n                        .runAction(recordIds, viewOutput.recordInstance)\n                        .pipe(\n                          switchMap(() =>\n                            isFunction((<IRxRecordGridApi>params.records).refresh)\n                              ? (<IRxRecordGridApi>params.records).refresh()\n                              : EMPTY\n                          )\n                        )\n                    : EMPTY\n                )\n              );\n          })\n        );\n      } else {\n        this.rxLogService.debug('rxEditRecordsAction: no records to edit.');\n      }\n    } else {\n      this.rxLogService.error('rxEditRecordsAction: Record Definition Name is not defined.');\n    }\n\n    return EMPTY;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxViewActionRegistryService, ViewComponentPropertyType } from '@helix/platform/view/api';\nimport { RxEditRecordsViewActionService } from './services/edit-records-view-action.service';\nimport { ResultModalComponent } from './result-modal/result-modal.component';\nimport { CommonModule } from '@angular/common';\nimport { AdaptIconModule, AdaptRxTextareaModule } from '@bmc-ux/adapt-angular';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { FormsModule } from '@angular/forms';\nimport { RX_APPLICATION, Tooltip } from '@helix/platform/shared/api';\nimport {\n  ExpressionFormControlComponent,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType\n} from '@helix/platform/shared/components';\n\n@NgModule({\n  imports: [CommonModule, AdaptIconModule, TranslateModule, FormsModule, AdaptRxTextareaModule],\n  declarations: [ResultModalComponent],\n  entryComponents: [ResultModalComponent]\n})\nexport class EditRecordsViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxEditRecordsActionService: RxEditRecordsViewActionService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxEditRecordsAction',\n      label: 'Edit records',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxEditRecordsActionService,\n      parameters: [\n        {\n          name: 'records',\n          label: 'Records',\n          isRequired: true,\n          tooltip: new Tooltip(\n            `Build an expression that evaluates to one of the following:<br>\n            1) Record Grid;<br>\n            2) A collection of Record Instances, or<br>\n            3) A collection of Record Instance IDs. <br>For options 2 and 3, select a Record Definition in the field below.`\n          ),\n          enableExpressionEvaluation: true,\n          editor: ExpressionFormControlComponent\n        },\n        {\n          name: 'recordDefinitionName',\n          label: 'Record definition',\n          type: ViewComponentPropertyType.String,\n          editor: RxDefinitionPickerComponent,\n          editorOptions: {\n            definitionType: RxDefinitionPickerType.StandardDataRecord\n          },\n          defaultValue: null\n        }\n      ]\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IViewActionDesignManager, RxViewActionRegistryService } from '@helix/platform/view/api';\nimport { ILaunchProcessViewDesignProperties } from './launch-process-view-action.types';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { IViewComponentDesignValidationIssue, RxViewExpressionValidatorService } from '@helix/platform/view/designer';\nimport { RxProcessDefinitionService } from '@helix/platform/process/api';\nimport { defaultIfEmpty, map, switchMap } from 'rxjs/operators';\nimport { flatten, forEach, isEmpty } from 'lodash';\nimport { IPlainObject } from '@helix/platform/shared/api';\n\n@Injectable()\nexport class RxLaunchProcessViewActionDesignManagerService\n  implements IViewActionDesignManager<ILaunchProcessViewDesignProperties>\n{\n  constructor(\n    private rxProcessDefinitionService: RxProcessDefinitionService,\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxViewExpressionValidatorService: RxViewExpressionValidatorService\n  ) {}\n\n  validate(\n    properties: ILaunchProcessViewDesignProperties,\n    propertyName: string\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    if (properties.processDefinitionName) {\n      return this.rxProcessDefinitionService.get(properties.processDefinitionName).pipe(\n        switchMap((processDefinition) =>\n          combineLatest([\n            this.validateInputParams(properties, propertyName, processDefinition.inputParams),\n            this.validateInputParamExpressions(properties, propertyName, processDefinition.inputParams)\n          ])\n        ),\n        map(flatten)\n      );\n    } else {\n      return of([]);\n    }\n  }\n\n  private validateInputParamExpressions(\n    actionParams: ILaunchProcessViewDesignProperties,\n    issuePropertyName: string,\n    processInputParams: IPlainObject[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    const actionDescriptor = this.rxViewActionRegistryService.get(actionParams.name);\n\n    const issues: Observable<IViewComponentDesignValidationIssue[]>[] = processInputParams\n      .filter((processInputParam) => actionParams[`actionProcessInputParams.${processInputParam.name}`])\n      .map((processInputParam) =>\n        this.rxViewExpressionValidatorService\n          .validate(\n            actionParams[`actionProcessInputParams.${processInputParam.name}`],\n            issuePropertyName,\n            actionDescriptor.label\n          )\n          .pipe(\n            map((issues) =>\n              issues.map((issue) => ({\n                ...issue,\n                description: `${actionDescriptor.label} action: ${issue.description}`\n              }))\n            )\n          )\n      );\n\n    return combineLatest(issues).pipe(defaultIfEmpty([]), map(flatten));\n  }\n\n  private validateInputParams(\n    actionParams: ILaunchProcessViewDesignProperties,\n    issuePropertyName: string,\n    processInputParams: IPlainObject[]\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    const actionDescriptor = this.rxViewActionRegistryService.get(actionParams.name);\n    const validationIssues = [];\n\n    forEach(processInputParams, (processInputParam) => {\n      const actionParamName = `actionProcessInputParams.${processInputParam.name}`;\n\n      if (processInputParam.fieldOption === 'REQUIRED' && isEmpty(actionParams[actionParamName])) {\n        validationIssues.push({\n          type: 'error',\n          description: `${actionDescriptor.label}: ${processInputParam.name} cannot be blank.`,\n          propertyName: issuePropertyName\n        });\n      }\n    });\n\n    return of(validationIssues);\n  }\n}\n","import { RxViewDesignerActionModel } from '@helix/platform/view/designer';\nimport { Injector } from '@angular/core';\nimport { forkJoin, Observable, of } from 'rxjs';\nimport { distinctUntilChanged, map, pluck, skip, switchMap } from 'rxjs/operators';\nimport { map as _map, isEqual } from 'lodash';\n\nimport { Tooltip } from '@helix/platform/shared/api';\nimport {\n  ExpressionFormControlComponent,\n  IDefinitionPickerComponentOptions,\n  IExpressionFormControlOptions,\n  RxDefinitionPickerComponent,\n  RxDefinitionPickerType,\n  SwitchFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RxRecordDefinitionCacheService } from '@helix/platform/record/api';\nimport {\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  IViewActionOutputDataDictionary,\n  IViewActionOutputDataDictionaryBranch,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport {\n  IProcessDefinition,\n  IRecordInstanceFieldDefinitionLight,\n  RX_PROCESS_DEFINITION,\n  RxProcessDefinitionCacheService\n} from '@helix/platform/process/api';\n\nimport { ILaunchProcessViewDesignProperties } from './launch-process-view-action.types';\n\nexport class RxLaunchProcessViewActionDesignModel extends RxViewDesignerActionModel {\n  private rxProcessDefinitionCacheService = this.injector.get<RxProcessDefinitionCacheService>(\n    RxProcessDefinitionCacheService\n  );\n\n  private rxRecordDefinitionCacheService =\n    this.injector.get<RxRecordDefinitionCacheService>(RxRecordDefinitionCacheService);\n\n  defaultProps: ViewActionDesignEditableProperties<ILaunchProcessViewDesignProperties> = {\n    processDefinitionName: null,\n    waitForProcessCompletion: false\n  };\n\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<ILaunchProcessViewDesignProperties>\n  ): ViewActionDesignEditableProperties<ILaunchProcessViewDesignProperties> {\n    return {\n      processDefinitionName: null,\n      waitForProcessCompletion: false,\n      ...initialProperties\n    };\n  }\n\n  constructor(\n    protected injector: Injector,\n    readonly sandbox: IViewActionDesignSandbox<ILaunchProcessViewDesignProperties>\n  ) {\n    super(injector, sandbox);\n\n    const processDefinitionName$ = this.sandbox.actionProperties$.pipe(\n      pluck('processDefinitionName'),\n      distinctUntilChanged()\n    );\n\n    processDefinitionName$.pipe(skip(1)).subscribe((processDefinitionName) => {\n      this.sandbox.setActionProperties({\n        processDefinitionName,\n        waitForProcessCompletion: false\n      });\n    });\n\n    processDefinitionName$\n      .pipe(\n        switchMap<string, Observable<IProcessDefinition>>((processDefinitionName) =>\n          processDefinitionName\n            ? this.rxProcessDefinitionCacheService.getProcessDefinition(processDefinitionName)\n            : of(null)\n        )\n      )\n      .subscribe((processDefinition) =>\n        this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig(processDefinition))\n      );\n\n    this.sandbox.actionProperties$\n      .pipe(\n        map((props) => [props.processDefinitionName, props.waitForProcessCompletion]),\n        distinctUntilChanged(isEqual),\n        switchMap(([processDefinitionName, waitForProcessCompletion]) =>\n          this.getActionOutputDataDictionary(processDefinitionName, waitForProcessCompletion)\n        )\n      )\n      .subscribe((dataDictionary) => this.sandbox.setActionOutputDataDictionary(dataDictionary));\n  }\n\n  private getActionEditorConfig(processDefinition: IProcessDefinition): IViewActionDesignPropertyEditorConfig {\n    return [\n      {\n        name: 'processDefinitionName',\n        component: RxDefinitionPickerComponent,\n        options: {\n          label: 'Process to start',\n          definitionType: RxDefinitionPickerType.Process,\n          required: true\n        } as IDefinitionPickerComponentOptions\n      },\n      {\n        name: 'waitForProcessCompletion',\n        component: SwitchFormControlComponent,\n        isDisabled: processDefinition ? !processDefinition.synchronous : true,\n        options: {\n          label: 'Wait for process completion',\n          tooltip: new Tooltip(\n            'If a process runs synchronously, it is possible to get output data from the process once the process completes. Enable Wait for completion in order to define an output map for the selected process.'\n          )\n        } as IDefinitionPickerComponentOptions\n      },\n      ...(processDefinition\n        ? _map(processDefinition.inputParams, (param) => ({\n            name: `actionProcessInputParams.${param.name}`,\n            component: ExpressionFormControlComponent,\n            options: {\n              label: param.name,\n              dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n              operators: this.expressionConfigurator.getOperators(),\n              isRequired: param.fieldOption === 'REQUIRED'\n            } as IExpressionFormControlOptions\n          }))\n        : [])\n    ];\n  }\n\n  private getActionOutputDataDictionary(\n    processDefinitionName: string,\n    waitForProcessCompletion: boolean\n  ): Observable<IViewActionOutputDataDictionary> {\n    return waitForProcessCompletion\n      ? this.rxProcessDefinitionCacheService.getOutputParams(processDefinitionName).pipe(\n          switchMap((outputParams) =>\n            forkJoin(\n              outputParams.map((param): Observable<IViewActionOutputDataDictionaryBranch> => {\n                let dataDictionary;\n\n                if (param.fieldTypeName === RX_PROCESS_DEFINITION.processVariableTypes.record) {\n                  const recordInstanceParam = param as IRecordInstanceFieldDefinitionLight;\n\n                  dataDictionary = this.rxRecordDefinitionCacheService\n                    .getRecordDefinition(recordInstanceParam.recordDefinitionName)\n                    .pipe(\n                      map((recordDefinition) => ({\n                        label: recordInstanceParam.name,\n                        expression: this.getOutputExpressionForPropertyPath(recordInstanceParam.name),\n                        children: _map(recordDefinition.fieldDefinitions, (fieldDefinition) => ({\n                          label: fieldDefinition.name,\n                          expression: this.getOutputExpressionForPropertyPath(\n                            `${recordInstanceParam.name}.${fieldDefinition.id}`\n                          )\n                        }))\n                      }))\n                    );\n                } else {\n                  dataDictionary = of({\n                    label: param.name,\n                    expression: this.getOutputExpressionForPropertyPath(param.name)\n                  });\n                }\n\n                return dataDictionary;\n              })\n            )\n          )\n        )\n      : of([]);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { last, forEach, isEmpty, reduce } from 'lodash';\nimport { Observable, of, forkJoin } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\nimport {\n  RxProcessDefinitionCacheService,\n  RxProcessInstanceService,\n  RxProcessInstanceCommandsService,\n  RX_PROCESS_DEFINITION\n} from '@helix/platform/process/api';\nimport { RxRecordDefinitionCacheService, RxRecordInstanceService } from '@helix/platform/record/api';\nimport { RxLogService, IPlainObject } from '@helix/platform/shared/api';\nimport { IViewActionService } from '@helix/platform/view/api';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { ILaunchProcessViewActionParams } from './launch-process-view-action.types';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxLaunchProcessViewActionService\n  implements IViewActionService<ILaunchProcessViewActionParams, IPlainObject> {\n  constructor(\n    private rxJsonParserService: RxJsonParserService,\n    private rxLogService: RxLogService,\n    private rxProcessDefinitionCacheService: RxProcessDefinitionCacheService,\n    private rxRecordDefinitionCacheService: RxRecordDefinitionCacheService,\n    private rxProcessInstanceCommandsService: RxProcessInstanceCommandsService,\n    private rxProcessInstanceService: RxProcessInstanceService,\n    private rxRecordInstanceService: RxRecordInstanceService\n  ) {}\n\n  execute(params: ILaunchProcessViewActionParams): Observable<IPlainObject> {\n    let processId: string;\n    let processDefinitionOutputParams: IPlainObject;\n\n    return this.rxProcessInstanceCommandsService\n      .start(params.processDefinitionName, params.actionProcessInputParams)\n      .pipe(\n        switchMap((res) => {\n          if (params.waitForProcessCompletion) {\n            const location = res.headers.get('location');\n\n            processId = location ? last(location.split('/')) : null;\n\n            return this.rxProcessDefinitionCacheService.getOutputParams(params.processDefinitionName);\n          } else {\n            return of(null);\n          }\n        }),\n        switchMap((plainOutputParams) => {\n          if (!isEmpty(plainOutputParams)) {\n            processDefinitionOutputParams = plainOutputParams.reduce((outputParams, value) => {\n              outputParams[value.name] = value;\n\n              return outputParams;\n            }, {});\n\n            return this.rxProcessInstanceService.get(\n              params.processDefinitionName,\n              `${processId}/processOutputVariables`\n            );\n          } else {\n            return of(null);\n          }\n        }),\n        switchMap((processOutputVariables: IPlainObject) => {\n          const outputResult: IPlainObject = {};\n\n          forEach(processOutputVariables, (variableValue, variableName) => {\n            if (\n              processDefinitionOutputParams[variableName].fieldTypeName ===\n              RX_PROCESS_DEFINITION.processVariableTypes.record\n            ) {\n              const recordInstanceOutputData = this.rxJsonParserService.tryParseJson(variableValue);\n\n              if (\n                recordInstanceOutputData &&\n                recordInstanceOutputData.recordDefinitionName &&\n                recordInstanceOutputData.id\n              ) {\n                outputResult[variableName] = this.rxRecordInstanceService\n                  .get(recordInstanceOutputData.recordDefinitionName, recordInstanceOutputData.id)\n                  .pipe(\n                    map((recordInstance) =>\n                      reduce(\n                        recordInstance.fieldInstances,\n                        (result, fieldInstance) => {\n                          result[fieldInstance.id] = fieldInstance.value;\n\n                          return result;\n                        },\n                        {}\n                      )\n                    )\n                  );\n              } else {\n                this.rxLogService.warning(\n                  'rxLaunchProcessAction: unknown format for record instance as output data for process'\n                );\n              }\n            } else {\n              outputResult[variableName] = of(variableValue);\n            }\n          });\n\n          return forkJoin(outputResult);\n        })\n      );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxViewActionRegistryService, ViewComponentPropertyType } from '@helix/platform/view/api';\nimport { RxLaunchProcessViewActionDesignManagerService } from './launch-process-view-action-design-manager.service';\nimport { RxLaunchProcessViewActionDesignModel } from './launch-process-view-action-design-model.class';\nimport { RxLaunchProcessViewActionService } from './launch-process-view-action.service';\n\n@NgModule({\n  providers: [RxLaunchProcessViewActionDesignManagerService]\n})\nexport class LaunchProcessViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxLaunchProcessViewActionService: RxLaunchProcessViewActionService,\n    private rxLaunchProcessViewActionDesignManagerService: RxLaunchProcessViewActionDesignManagerService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxLaunchProcessAction',\n      label: 'Launch process',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxLaunchProcessViewActionService,\n      designManager: this.rxLaunchProcessViewActionDesignManagerService,\n      designModel: RxLaunchProcessViewActionDesignModel,\n      parameters: [\n        {\n          name: 'processDefinitionName',\n          label: 'Process to start',\n          type: ViewComponentPropertyType.String,\n          isRequired: true\n        },\n        {\n          name: 'waitForProcessCompletion',\n          type: ViewComponentPropertyType.Boolean,\n          designType: ViewComponentPropertyType.Boolean\n        },\n        {\n          name: 'actionProcessInputParams',\n          label: 'Input map',\n          enableExpressionEvaluation: true\n        }\n      ]\n    });\n  }\n}\n","import { RxViewDesignerActionModel } from '@helix/platform/view/designer';\nimport { Injector } from '@angular/core';\n\nimport {\n  ExpressionFormControlComponent,\n  IExpressionFormControlOptions,\n  ISelectFormControlOptions,\n  SelectFormControlComponent\n} from '@helix/platform/shared/components';\nimport {\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  RX_LAUNCH_BEHAVIOR,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport { ILaunchUrlViewActionParams } from './launch-url-view-action-params.interface';\nimport { map } from 'lodash';\n\nexport class RxLaunchUrlViewActionDesignModel extends RxViewDesignerActionModel {\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<ILaunchUrlViewActionParams>\n  ): ViewActionDesignEditableProperties<ILaunchUrlViewActionParams> {\n    return {\n      url: null,\n      launchBehavior: RX_LAUNCH_BEHAVIOR.newWindow.value,\n      ...initialProperties\n    };\n  }\n\n  constructor(protected injector: Injector, readonly sandbox: IViewActionDesignSandbox<ILaunchUrlViewActionParams>) {\n    super(injector, sandbox);\n    this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig());\n  }\n\n  private getActionEditorConfig(): IViewActionDesignPropertyEditorConfig {\n    return [\n      {\n        name: 'url',\n        component: ExpressionFormControlComponent,\n        options: {\n          label: 'URL',\n          isRequired: true,\n          dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n          operators: this.expressionConfigurator.getOperators()\n        } as IExpressionFormControlOptions\n      },\n      {\n        name: 'launchBehavior',\n        component: SelectFormControlComponent,\n        options: {\n          label: 'Launch behavior',\n          options: map(RX_LAUNCH_BEHAVIOR, (value) => ({\n            name: value.content,\n            id: value.value\n          })),\n          sortAlphabetically: false\n        } as ISelectFormControlOptions\n      }\n    ];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EMPTY, Observable, throwError } from 'rxjs';\nimport { IViewActionService, RX_LAUNCH_BEHAVIOR } from '@helix/platform/view/api';\nimport { ILaunchUrlViewActionParams } from './launch-url-view-action-params.interface';\nimport { RxError } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxLaunchUrlViewActionService implements IViewActionService<ILaunchUrlViewActionParams, never> {\n  execute(params: ILaunchUrlViewActionParams): Observable<never> {\n    if (params.url) {\n      window.open(params.url, RX_LAUNCH_BEHAVIOR[params.launchBehavior].target);\n\n      return EMPTY;\n    } else {\n      return throwError(new RxError('rxLaunchUrlAction: URL is not specified.'));\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IDefinitionAdapter } from '@helix/platform/shared/api';\nimport { IViewComponentDefinition, IViewDefinition, RX_LAUNCH_BEHAVIOR } from '@helix/platform/view/api';\nimport { get } from 'lodash';\nimport { ILaunchUrlViewActionParams } from './launch-url-view-action-params.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxLaunchUrlViewActionDefinitionAdapterService\n  implements IDefinitionAdapter<IViewComponentDefinition, IViewDefinition>\n{\n  adaptDefinition(viewComponentDefinition) {\n    const propertiesByName: ILaunchUrlViewActionParams = get(viewComponentDefinition, 'propertiesByName', {});\n\n    propertiesByName.launchBehavior = propertiesByName.launchBehavior ?? RX_LAUNCH_BEHAVIOR.newWindow.value;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxViewActionDefinitionAdapterRegistryService, RxViewActionRegistryService } from '@helix/platform/view/api';\nimport { RxLaunchUrlViewActionService } from './launch-url-view-action.service';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxLaunchUrlViewActionDesignModel } from './launch-url-view-action-design-model.class';\nimport { RxLaunchUrlViewActionDefinitionAdapterService } from './launch-url-view-action-definition-adapter.service';\n\n@NgModule()\nexport class LaunchUrlViewActionModule {\n  constructor(\n    private rxViewActionDefinitionAdapterRegistryService: RxViewActionDefinitionAdapterRegistryService,\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxLaunchUrlViewActionService: RxLaunchUrlViewActionService,\n    private rxLaunchUrlActionDefinitionAdapterService: RxLaunchUrlViewActionDefinitionAdapterService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxLaunchUrlAction',\n      label: 'Launch URL',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxLaunchUrlViewActionService,\n      designModel: RxLaunchUrlViewActionDesignModel,\n      parameters: [\n        {\n          name: 'url',\n          label: 'URL',\n          enableExpressionEvaluation: true,\n          isRequired: true\n        },\n        {\n          name: 'launchBehavior',\n          label: 'Launch behavior'\n        }\n      ]\n    });\n\n    rxViewActionDefinitionAdapterRegistryService.registerRuntimeAdapter(\n      'rxLaunchUrlAction',\n      this.rxLaunchUrlActionDefinitionAdapterService\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IViewActionService } from '@helix/platform/view/api';\nimport { isFunction } from 'lodash';\nimport { Observable, throwError } from 'rxjs';\nimport { IRefreshViewActionParams } from './refresh-view-action-params.interface';\nimport { RxError } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxRefreshViewActionService implements IViewActionService<IRefreshViewActionParams, never> {\n  execute(params: IRefreshViewActionParams): Observable<never> {\n    if (params.component) {\n      return isFunction(params.component.refresh)\n        ? params.component.refresh()\n        : throwError(new RxError('rxRefreshAction: target component does not support refresh API.'));\n    } else {\n      return throwError(new RxError('rxRefreshAction: component is not specified.'));\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxViewActionRegistryService } from '@helix/platform/view/api';\nimport { RxRefreshViewActionService } from './refresh-view-action.service';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { ExpressionFormControlComponent } from '@helix/platform/shared/components';\n\n@NgModule()\nexport class RefreshViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxRefreshViewActionService: RxRefreshViewActionService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxRefreshAction',\n      label: 'Refresh',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxRefreshViewActionService,\n      parameters: [\n        {\n          name: 'component',\n          label: 'View/Component',\n          enableExpressionEvaluation: true,\n          isRequired: true,\n          editor: ExpressionFormControlComponent\n        }\n      ]\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IViewActionService } from '@helix/platform/view/api';\nimport { isFunction } from 'lodash';\nimport { concat, EMPTY, Observable, throwError } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ISaveViewActionParams } from './save-view-action.interfaces';\nimport { RxError } from '@helix/platform/utils';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxSaveViewActionService implements IViewActionService<ISaveViewActionParams, never> {\n  execute(params: ISaveViewActionParams): Observable<never> {\n    if (isFunction(params.targetApi.save)) {\n      const closeAfterSave$ = isFunction(params.viewApi.close)\n        ? EMPTY.pipe(\n            tap({\n              complete() {\n                params.viewApi.close();\n              }\n            })\n          )\n        : throwError(new RxError('rxSaveAction: target view does not support close API.'));\n\n      return concat(params.targetApi.save(params.closeAfterSave), params.closeAfterSave ? closeAfterSave$ : EMPTY);\n    } else {\n      return throwError(new RxError('rxSaveAction: target view/component does not support save API.'));\n    }\n  }\n}\n","import { RxSaveViewActionService } from './save-view-action.service';\nimport { NgModule } from '@angular/core';\nimport { RxViewActionRegistryService, ViewComponentPropertyType } from '@helix/platform/view/api';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { ExpressionFormControlComponent, SwitchFormControlComponent } from '@helix/platform/shared/components';\n\n@NgModule()\nexport class SaveViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxSaveViewActionService: RxSaveViewActionService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxSaveAction',\n      label: 'Save',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxSaveViewActionService,\n      parameters: [\n        {\n          name: 'targetApi',\n          label: 'View/Component',\n          editor: ExpressionFormControlComponent,\n          isRequired: true,\n          enableExpressionEvaluation: true\n        },\n        {\n          name: 'closeAfterSave',\n          label: 'Close after save',\n          editor: SwitchFormControlComponent,\n          type: ViewComponentPropertyType.Boolean,\n          designType: ViewComponentPropertyType.Boolean\n        },\n        {\n          name: 'viewApi',\n          enableExpressionEvaluation: true,\n          defaultValue: '${view.api}'\n        }\n      ]\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IViewActionService } from '@helix/platform/view/api';\nimport { isFunction } from 'lodash';\nimport { EMPTY, isObservable, Observable, throwError } from 'rxjs';\nimport { ISetPropertyViewActionParams } from './set-property-view-action.interfaces';\nimport { RxError } from '@helix/platform/utils';\n\n@Injectable()\nexport class RxSetPropertyViewActionService implements IViewActionService<ISetPropertyViewActionParams, never> {\n  execute(params: ISetPropertyViewActionParams): Observable<never> {\n    let executionResult: Observable<never> | void = throwError(\n      new RxError('rxSetPropertyAction: component is not specified.')\n    );\n\n    if (params.componentApi && isFunction(params.componentApi.setProperty) && params.propertyPath) {\n      // Extract <Path> from  ${view.components.<ID>.<Path>}\n      const matches = params.propertyPath.match(/^\\$\\{view\\.components\\.[0-9a-z-]+\\.(.+)}$/);\n\n      if (matches && matches[1]) {\n        executionResult = params.componentApi.setProperty(matches[1], params.propertyValue);\n      }\n    }\n\n    return isObservable(executionResult) ? executionResult : EMPTY;\n  }\n}\n","import { Injector } from '@angular/core';\nimport { RxViewActionExpressionConfigurator, RxViewDataDictionaryService } from '@helix/platform/view/designer';\nimport { ExpressionOperatorGroup } from '@helix/platform/shared/api';\n\nexport class RxSetPropertyViewActionExpressionConfigurator extends RxViewActionExpressionConfigurator {\n  constructor(injector: Injector, actionType: string, actionGuid: string) {\n    super(injector, actionType, actionGuid);\n\n    this.configureForProperty({\n      propertyPath: 'propertyPath',\n      dataDictionary$:\n        injector.get<RxViewDataDictionaryService>(RxViewDataDictionaryService).settablePropertiesDataDictionary$,\n      operators: this.getOperatorRowsByGroup(ExpressionOperatorGroup.MathClient)\n    });\n  }\n}\n","import { Injector } from '@angular/core';\nimport { RxViewDesignerActionModel } from '@helix/platform/view/designer';\nimport { ExpressionFormControlComponent, IExpressionFormControlOptions } from '@helix/platform/shared/components';\nimport {\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport { distinctUntilChanged, pluck, take } from 'rxjs/operators';\nimport { RxSetPropertyViewActionExpressionConfigurator } from './set-property-view-action-expression-configurator.class';\nimport { ISetPropertyViewActionDesignProperties } from './set-property-view-action.interfaces';\n\nexport class RxSetPropertyViewActionDesignModel extends RxViewDesignerActionModel {\n  protected expressionConfigurator = new RxSetPropertyViewActionExpressionConfigurator(\n    this.injector,\n    this.sandbox.descriptor.name,\n    this.guid\n  );\n\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<ISetPropertyViewActionDesignProperties>\n  ): ViewActionDesignEditableProperties<ISetPropertyViewActionDesignProperties> {\n    return {\n      componentApi: null,\n      propertyPath: null,\n      propertyValue: null,\n      ...initialProperties\n    };\n  }\n\n  constructor(\n    protected injector: Injector,\n    readonly sandbox: IViewActionDesignSandbox<ISetPropertyViewActionDesignProperties>\n  ) {\n    super(injector, sandbox);\n\n    this.sandbox.actionProperties$\n      .pipe(take(1))\n      .subscribe(() => this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig()));\n\n    this.sandbox.actionProperties$.pipe(pluck('propertyPath'), distinctUntilChanged()).subscribe((propertyPath) => {\n      let componentApi = null;\n\n      if (propertyPath && propertyPath.length) {\n        // Extract <ID> from ${view.components.<ID>.<Path>}\n        const matches = propertyPath.match(/\\${view\\.components\\.([0-9a-z-]+)\\..+}/);\n\n        if (matches && matches[1]) {\n          componentApi = `\\${view.components.${matches[1]}.api}`;\n        }\n      }\n\n      this.sandbox.updateActionProperties({\n        componentApi\n      });\n    });\n  }\n\n  private getActionEditorConfig(): IViewActionDesignPropertyEditorConfig {\n    return [\n      {\n        name: 'propertyPath',\n        component: ExpressionFormControlComponent,\n        options: {\n          label: 'Property path',\n          dataDictionary$: this.expressionConfigurator.getDataDictionary('propertyPath'),\n          operators: this.expressionConfigurator.getOperators('propertyPath'),\n          isRequired: true\n        } as IExpressionFormControlOptions\n      },\n      {\n        name: 'propertyValue',\n        component: ExpressionFormControlComponent,\n        options: {\n          label: 'Property value',\n          dataDictionary$: this.expressionConfigurator.getDataDictionary('propertyValue'),\n          operators: this.expressionConfigurator.getOperators('propertyValue')\n        } as IExpressionFormControlOptions\n      }\n    ];\n  }\n}\n","import { IViewActionDesignManager } from '@helix/platform/view/api';\nimport { IViewComponentDesignValidationIssue } from '@helix/platform/view/designer';\nimport { Observable, of } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { ISetPropertyViewActionDesignProperties } from './set-property-view-action.interfaces';\n\n@Injectable()\nexport class RxSetPropertyViewActionDesignManagerService\n  implements IViewActionDesignManager<ISetPropertyViewActionDesignProperties> {\n  validate(\n    actionProperties: ISetPropertyViewActionDesignProperties,\n    propertyName: string\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    return of(\n      actionProperties.propertyPath && !/\\${view\\.components\\.([0-9a-z-]+)\\..+}/.test(actionProperties.propertyPath)\n        ? [\n            {\n              type: 'error',\n              description: 'Set property action: Property path is invalid.',\n              propertyName\n            }\n          ]\n        : []\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxViewActionRegistryService } from '@helix/platform/view/api';\nimport { RxSetPropertyViewActionService } from './set-property-view-action.service';\nimport { RxSetPropertyViewActionDesignModel } from './set-property-view-action-design-model.class';\nimport { RxSetPropertyViewActionDesignManagerService } from './set-property-view-action-design-manager.service';\n\n@NgModule({\n  providers: [RxSetPropertyViewActionService, RxSetPropertyViewActionDesignManagerService]\n})\nexport class SetPropertyViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxSetPropertyViewActionService: RxSetPropertyViewActionService,\n    private rxSetPropertyViewActionDesignManagerService: RxSetPropertyViewActionDesignManagerService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxSetPropertyAction',\n      label: 'Set property',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxSetPropertyViewActionService,\n      designModel: RxSetPropertyViewActionDesignModel,\n      designManager: rxSetPropertyViewActionDesignManagerService,\n      parameters: [\n        {\n          name: 'componentApi',\n          label: 'Component API',\n          enableExpressionEvaluation: true\n        },\n        {\n          name: 'propertyPath',\n          label: 'Property path',\n          isRequired: true\n        },\n        {\n          name: 'propertyValue',\n          enableExpressionEvaluation: true\n        }\n      ]\n    });\n  }\n}\n","import { Component, ElementRef, Input, OnDestroy, OnInit, Renderer2, ViewChild } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { AdaptTreeNode } from '@bmc-ux/adapt-angular';\nimport { RxProcessElementsService, RX_PROCESS_DEFINITION } from '@helix/platform/process/api';\nimport { IDesignerStencilElementTree, RxDesignerStencilBuilder } from '@helix/platform/shared/api';\nimport { ValueAccessor } from '@helix/platform/shared/components';\nimport { RxJsonParserService } from '@helix/platform/utils';\nimport { TranslateService } from '@ngx-translate/core';\nimport { flatten, forEach, isEmpty, isEqual, map, some } from 'lodash';\nimport { ReplaySubject } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport {\n  IProcessDesignerElementsPickerComponentOptions,\n  IProcessElementTreeNode,\n  IProcessElementTreeNodeValue\n} from './process-designer-element-picker.interfaces';\n\n@Component({\n  selector: 'rx-process-designer-element-picker',\n  templateUrl: './process-designer-element-picker.component.html',\n  styleUrls: ['./process-designer-element-picker.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: RxProcessDesignerElementPickerComponent,\n      multi: true\n    }\n  ]\n})\nexport class RxProcessDesignerElementPickerComponent extends ValueAccessor<string> implements OnInit, OnDestroy {\n  @Input()\n  options: IProcessDesignerElementsPickerComponentOptions;\n\n  @ViewChild('dropdownButton', { static: true })\n  dropdownButton: ElementRef;\n\n  dropdownWidth: number;\n  processElementsTree: AdaptTreeNode[];\n  selectedPaletteElementsByLabel: string;\n  selection: IProcessElementTreeNode[] = [];\n\n  private selectedPaletteElements: IProcessElementTreeNodeValue[] | string;\n  private stencilElements: IProcessElementTreeNode[];\n\n  private destroyed$ = new ReplaySubject<boolean>(1);\n\n  constructor(\n    private rxDesignerStencilBuilder: RxDesignerStencilBuilder,\n    private rxJsonParserService: RxJsonParserService,\n    private rxProcessElementsService: RxProcessElementsService,\n    private renderer: Renderer2,\n    private translateService: TranslateService\n  ) {\n    super();\n  }\n\n  ngOnInit(): void {\n    const paletteElementsControl = this.innerValue;\n\n    this.selectedPaletteElements =\n      paletteElementsControl === '*' ? '*' : this.rxJsonParserService.tryParseJson(paletteElementsControl, null);\n\n    this.rxDesignerStencilBuilder\n      .buildElementsTree(\n        this.rxProcessElementsService.getProcessElements(),\n        RX_PROCESS_DEFINITION.standardProcessElementGroups\n      )\n      .pipe(take(1))\n      .subscribe((processElementsTree: IDesignerStencilElementTree[]) => {\n        forEach(processElementsTree, (group) => {\n          group.expanded = true;\n          group.allChildElementsSelected = true;\n\n          if (this.selectedPaletteElements?.length) {\n            forEach(group.children, (element) => {\n              if (\n                this.selectedPaletteElements === '*' ||\n                some(this.selectedPaletteElements as [], (selectedPaletteElement) =>\n                  isEqual(selectedPaletteElement, element.value)\n                )\n              ) {\n                this.selection.push(element);\n              } else {\n                group.allChildElementsSelected = false;\n              }\n            });\n\n            if (group.allChildElementsSelected) {\n              this.selection.push(group as unknown as IProcessElementTreeNode);\n            }\n          }\n        });\n\n        this.processElementsTree = [\n          {\n            label: this.translateService.instant('com.bmc.arsys.rx.client.process-designer.all-elements.label'),\n            expanded: true,\n            children: processElementsTree\n          }\n        ];\n\n        this.stencilElements = flatten(map(processElementsTree, 'children'));\n\n        if (this.selectedPaletteElements === '*') {\n          this.selection.push(...this.processElementsTree as IProcessElementTreeNode[]);\n          this.selectedPaletteElements = map(this.stencilElements, 'value');\n        }\n\n        this.updatePickerFakeInputValue();\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next(true);\n    this.destroyed$.complete();\n  }\n\n  onSelectionChange(): void {\n    this.selectedPaletteElements = this.selection.filter((node) => !node.children).map((node) => node.value);\n\n    if (this.selectedPaletteElements.length === 0) {\n      this.selectedPaletteElements = null;\n      this.value = null;\n    } else if (this.stencilElements.length === this.selectedPaletteElements.length) {\n      this.value = '*';\n    } else {\n      this.value = JSON.stringify(this.selectedPaletteElements);\n    }\n\n    this.updatePickerFakeInputValue();\n  }\n\n  updatePickerFakeInputValue(): void {\n    if (isEmpty(this.selectedPaletteElements)) {\n      this.selectedPaletteElementsByLabel = '';\n    } else if (this.stencilElements.length === this.selectedPaletteElements.length) {\n      this.selectedPaletteElementsByLabel = this.translateService.instant('com.bmc.arsys.rx.client.common.all.label');\n    } else if (this.selectedPaletteElements.length === 1) {\n      this.selectedPaletteElementsByLabel = this.translateService.instant(\n        'com.bmc.arsys.rx.client.process-designer.one-element-selected.label'\n      );\n    } else {\n      this.selectedPaletteElementsByLabel = this.translateService.instant(\n        'com.bmc.arsys.rx.client.process-designer.many-elements-selected.label',\n        {\n          count: this.selectedPaletteElements.length\n        }\n      );\n    }\n  }\n\n  clearDefinition(e: Event): void {\n    e.stopPropagation();\n\n    this.selection = [];\n\n    this.selectedPaletteElements = null;\n    this.selectedPaletteElementsByLabel = '';\n\n    this.value = null;\n  }\n\n  setDropdownWidth(): void {\n    setTimeout(() => {\n      const dropdownButton = this.renderer.selectRootElement(this.dropdownButton.nativeElement, true);\n\n      // 2px - border\n      this.dropdownWidth = Math.max(dropdownButton.clientWidth) + 2;\n    });\n  }\n}\n","<adapt-rx-control-label [label]=\"options.label\"></adapt-rx-control-label>\n\n<div\n  adaptDropdown\n  appendToBody=\"true\"\n  autoClose=\"outside\"\n  class=\"dropdown\"\n  placement=\"bottom-left\"\n  (onOpen)=\"setDropdownWidth()\"\n>\n  <button\n    adaptDropdownToggle\n    class=\"btn btn-secondary d-flex text-center w-100\"\n    rx-id=\"toggle-button\"\n    type=\"button\"\n    #dropdownButton\n  >\n    <span class=\"rx-selected-item text-left flex-grow-1\">{{ selectedPaletteElementsByLabel }}</span>\n\n    <span rx-id=\"clear-button\" class=\"d-icon-cross_adapt btn-link\" (click)=\"clearDefinition($event)\" *ngIf=\"value\">\n    </span>\n  </button>\n\n  <div class=\"dropdown-menu px-3\" [style.width.px]=\"dropdownWidth\" adaptDropdownMenu>\n    <adapt-tree\n      [value]=\"processElementsTree\"\n      [selectionMode]=\"'checkbox'\"\n      [(selection)]=\"selection\"\n      (selectionChange)=\"onSelectionChange()\"\n    ></adapt-tree>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AdaptDropdownModule, AdaptRxCheckboxModule, AdaptRxLabelModule, AdaptTreeModule } from '@bmc-ux/adapt-angular';\nimport { FormsModule } from '@angular/forms';\nimport { RxProcessDesignerElementPickerComponent } from './process-designer-element-picker.component';\n\n@NgModule({\n  declarations: [RxProcessDesignerElementPickerComponent],\n  exports: [RxProcessDesignerElementPickerComponent],\n  entryComponents: [RxProcessDesignerElementPickerComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    AdaptRxCheckboxModule,\n    AdaptDropdownModule.forRoot(),\n    AdaptRxLabelModule,\n    AdaptTreeModule\n  ]\n})\nexport class ProcessDesignerElementPickerModule {}\n","import { Injector } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { take } from 'rxjs/operators';\nimport {\n  DefinitionPickerOrExpressionFormControlComponent,\n  IExpressionFormControlOptions,\n  RxDefinitionPickerType\n} from '@helix/platform/shared/components';\nimport {\n  IViewActionDesignPropertyEditorConfig,\n  IViewActionDesignSandbox,\n  ViewActionDesignEditableProperties\n} from '@helix/platform/view/api';\nimport { RxViewDesignerActionModel } from '@helix/platform/view/designer';\nimport { ILaunchProcessDesignerViewActionDesignProperties } from './launch-process-designer-action.types';\nimport { RxProcessDesignerElementPickerComponent } from './process-designer-element-picker';\n\nexport class LaunchProcessDesignerActionDesignModelClass extends RxViewDesignerActionModel {\n  private translateService = this.injector.get(TranslateService);\n\n  static getInitialProperties(\n    initialProperties: ViewActionDesignEditableProperties<ILaunchProcessDesignerViewActionDesignProperties>\n  ): ViewActionDesignEditableProperties<ILaunchProcessDesignerViewActionDesignProperties> {\n    return {\n      processDefinitionName: null,\n      paletteElements: null,\n      ...initialProperties\n    };\n  }\n\n  constructor(\n    injector: Injector,\n    readonly sandbox: IViewActionDesignSandbox<ILaunchProcessDesignerViewActionDesignProperties>\n  ) {\n    super(injector, sandbox);\n\n    this.sandbox.actionProperties$.pipe(take(1)).subscribe(() => {\n      this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig());\n\n      this.sandbox.setActionOutputDataDictionary([\n        {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.process-definition-name.label'),\n          expression: this.getOutputExpressionForPropertyPath('processDefinitionName')\n        }\n      ]);\n    });\n  }\n\n  private getActionEditorConfig(): IViewActionDesignPropertyEditorConfig {\n    return [\n      {\n        name: 'processDefinitionName',\n        component: DefinitionPickerOrExpressionFormControlComponent,\n        options: {\n          label: this.translateService.instant('com.bmc.arsys.rx.client.common.process-definition-name.label'),\n          definitionType: RxDefinitionPickerType.Process,\n          dataDictionary$: this.expressionConfigurator.getDataDictionary(),\n          operators: this.expressionConfigurator.getOperators()\n        } as IExpressionFormControlOptions\n      },\n      {\n        name: 'paletteElements',\n        component: RxProcessDesignerElementPickerComponent,\n        options: {\n          label: 'Available palette elements'\n        } as IExpressionFormControlOptions\n      }\n    ];\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { IExpressionEvaluator, RxDefaultExpressionEvaluatorService } from '@helix/platform/view/api';\nimport { Expression } from 'jsep';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\n\n@Injectable()\nexport class RxLaunchProcessDesignerExpressionEvaluatorService implements IExpressionEvaluator {\n  constructor(private rxDefaultExpressionEvaluatorService: RxDefaultExpressionEvaluatorService) {}\n\n  evaluate(expression: string, data: object): string {\n    let evaluatedExpression = expression;\n\n    if (!RX_RECORD_DEFINITION.validFullDefinitionName.test(expression)) {\n      evaluatedExpression = this.rxDefaultExpressionEvaluatorService.evaluate(expression, data);\n    }\n\n    return evaluatedExpression;\n  }\n\n  parseExpression(expression): Expression {\n    let parsedExpression;\n\n    if (!RX_RECORD_DEFINITION.validFullDefinitionName.test(expression)) {\n      parsedExpression = this.rxDefaultExpressionEvaluatorService.parseExpression(expression);\n    }\n\n    return parsedExpression;\n  }\n}\n","import { Component, HostListener } from '@angular/core';\nimport { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';\nimport { ActiveModalRef, DismissReasons } from '@bmc-ux/adapt-angular';\nimport { RxProcessDefinitionCacheService } from '@helix/platform/process/api';\nimport { RX_DESIGNER, RxApplicationLoaderService, RxBundleCacheService } from '@helix/platform/shared/api';\nimport { RxUtilityModalsService } from '@helix/platform/ui-kit';\nimport { IWindowMessage, RxJsonParserService } from '@helix/platform/utils';\n\n@Component({\n  selector: 'rx-process-designer-frame',\n  templateUrl: './process-designer-frame.component.html',\n  styleUrls: ['./process-designer-frame.component.scss']\n})\nexport class ProcessDesignerFrameComponent {\n  context: ActiveModalRef;\n  iframeSrc: SafeResourceUrl;\n  isProcessDesignerLoadingInProgress = true;\n  isDefinitionDirty = false;\n\n  @HostListener('window:message', ['$event'])\n  onMessage(event: MessageEvent): void {\n    if (event.data) {\n      const message = this.rxJsonParserService.tryParseJson<IWindowMessage>(event.data);\n\n      if (message) {\n        switch (message.messageType) {\n          case RX_DESIGNER.messageTypes.designerLoaded: {\n            this.isProcessDesignerLoadingInProgress = false;\n\n            break;\n          }\n\n          case RX_DESIGNER.messageTypes.afterSave: {\n            this.isDefinitionDirty = false;\n\n            break;\n          }\n\n          case RX_DESIGNER.messageTypes.definitionStatusChanged: {\n            this.isDefinitionDirty = message.payload.isDirty;\n\n            break;\n          }\n\n          case RX_DESIGNER.messageTypes.closeDesigner: {\n            if (message.payload.processDefinitionName) {\n              if (this.isDefinitionDirty) {\n                this.rxUtilityModalsService.confirmUnsavedChanges().then((isConfirmed) => {\n                  if (isConfirmed) {\n                    this.closeProcessDesigner(message.payload.processDefinitionName);\n                  }\n                });\n              } else {\n                this.closeProcessDesigner(message.payload.processDefinitionName);\n              }\n            } else {\n              if (this.isDefinitionDirty) {\n                this.rxUtilityModalsService.confirmUnsavedChanges().then((isConfirmed) => {\n                  if (isConfirmed) {\n                    this.context.dismiss(DismissReasons.CLOSE_BTN);\n                  }\n                });\n              } else {\n                this.context.dismiss(DismissReasons.CLOSE_BTN);\n              }\n            }\n\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  constructor(\n    private rxApplicationLoaderService: RxApplicationLoaderService,\n    private rxBundleCacheService: RxBundleCacheService,\n    private rxJsonParserService: RxJsonParserService,\n    private rxProcessDefinitionCacheService: RxProcessDefinitionCacheService,\n    private domSanitizer: DomSanitizer,\n    private activeModalRef: ActiveModalRef,\n    private rxUtilityModalsService: RxUtilityModalsService\n  ) {\n    this.context = activeModalRef;\n\n    const data = this.context.getData();\n\n    localStorage.setItem('ProcessDesignerPaletteElements', data.paletteElements);\n\n    this.iframeSrc = this.domSanitizer.bypassSecurityTrustResourceUrl(\n      `/com.bmc.arsys.rx.innovationstudio/index.html#/app/bundle/${this.rxBundleCacheService.bundleId}/iprocess/${\n        data.processDefinitionName ? data.processDefinitionName : ''\n      }`\n    );\n  }\n\n  private closeProcessDesigner(processDefinitionName: string): void {\n    this.rxProcessDefinitionCacheService.clearCache([processDefinitionName]);\n    this.context.close({ processDefinitionName });\n  }\n}\n","<div id=\"rx-application-loader-container\" class=\"position-absolute w-100\" *ngIf=\"isProcessDesignerLoadingInProgress\">\n  <div class=\"rx-application-loader\"></div>\n</div>\n\n<iframe [src]=\"iframeSrc\" class=\"h-100\"></iframe>\n","import { Injectable } from '@angular/core';\nimport { AdaptModalService, ModalDeferred } from '@bmc-ux/adapt-angular';\nimport { RxProcessDefinitionCacheService } from '@helix/platform/process/api';\nimport { IViewActionService, OpenViewActionModalSize } from '@helix/platform/view/api';\nimport { defer, from, Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { ILaunchProcessDesignerActionParams } from './launch-process-designer-action.types';\nimport { ProcessDesignerFrameComponent } from './process-designer-frame.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RxLaunchProcessDesignerActionService implements IViewActionService<ILaunchProcessDesignerActionParams> {\n  constructor(\n    private adaptModalService: AdaptModalService,\n    private rxProcessDefinitionCacheService: RxProcessDefinitionCacheService\n  ) {}\n\n  execute(parameters: ILaunchProcessDesignerActionParams): Observable<any> {\n    return parameters.processDefinitionName\n      ? this.rxProcessDefinitionCacheService\n          .getProcessDefinition(parameters.processDefinitionName)\n          .pipe(switchMap(() => this.openModal(parameters)))\n      : defer(() => from(this.openModal(parameters)));\n  }\n\n  private openModal(parameters: ILaunchProcessDesignerActionParams): ModalDeferred {\n    return this.adaptModalService.open({\n      content: ProcessDesignerFrameComponent,\n      size: OpenViewActionModalSize.FullSize as any,\n      data: parameters\n    });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxProcessApiModule } from '@helix/platform/process/api';\nimport { RxViewActionRegistryService, ViewComponentPropertyType } from '@helix/platform/view/api';\nimport { RxIframeModule } from '@helix/platform/shared/components';\nimport { RxLaunchProcessDesignerActionService } from './launch-process-designer-action.service';\nimport { LaunchProcessDesignerActionDesignModelClass } from './launch-process-designer-action-design-model.class';\nimport { RxLaunchProcessDesignerExpressionEvaluatorService } from './launch-process-designer-expression-evaluator.service';\nimport { ProcessDesignerFrameComponent } from './process-designer-frame.component';\n\n@NgModule({\n  imports: [CommonModule, RxProcessApiModule, RxIframeModule],\n  declarations: [ProcessDesignerFrameComponent],\n  entryComponents: [ProcessDesignerFrameComponent],\n  providers: [RxLaunchProcessDesignerExpressionEvaluatorService]\n})\nexport class LaunchProcessDesignerActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxLaunchProcessDesignerActionService: RxLaunchProcessDesignerActionService,\n    private rxLaunchProcessDesignerExpressionActionEvaluatorService: RxLaunchProcessDesignerExpressionEvaluatorService\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxLaunchProcessDesignerAction',\n      label: 'Launch process designer',\n      bundleId: RX_APPLICATION.platformBundleId,\n      service: this.rxLaunchProcessDesignerActionService,\n      designModel: LaunchProcessDesignerActionDesignModelClass,\n      parameters: [\n        {\n          name: 'processDefinitionName',\n          label: 'Process definition name',\n          type: ViewComponentPropertyType.String,\n          enableExpressionEvaluation: true,\n          evaluatorService: this.rxLaunchProcessDesignerExpressionActionEvaluatorService\n        },\n        {\n          name: 'paletteElements',\n          label: 'Available palette elements',\n          type: ViewComponentPropertyType.String\n        }\n      ]\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { IViewActionService } from '@helix/platform/view/api';\n\n@Injectable()\nexport class RxUnknownViewActionService implements IViewActionService {\n  execute(): Observable<never> {\n    return EMPTY;\n  }\n}\n","import { IViewActionDesignManager, IViewActionDesignProperties } from '@helix/platform/view/api';\nimport { IViewComponentDesignValidationIssue } from '@helix/platform/view/designer';\nimport { Observable, of } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class RxUnknownViewActionDesignManager implements IViewActionDesignManager {\n  validate(\n    actionProperties: IViewActionDesignProperties,\n    propertyName: string\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    return of([\n      {\n        type: 'error',\n        description: `Unknown action: ${actionProperties.name}`,\n        propertyName\n      }\n    ]);\n  }\n}\n","import { Injector } from '@angular/core';\nimport { RxViewDesignerActionModel } from '@helix/platform/view/designer';\nimport { TextFormControlComponent } from '@helix/platform/shared/components';\nimport { IViewActionDesignPropertyEditorConfig, IViewActionDesignSandbox } from '@helix/platform/view/api';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport { take } from 'rxjs/operators';\nimport { keys } from 'lodash';\n\nexport class RxUnknownViewActionDesignModel extends RxViewDesignerActionModel {\n  constructor(protected injector: Injector, readonly sandbox: IViewActionDesignSandbox) {\n    super(injector, sandbox);\n\n    this.sandbox.actionProperties$.pipe(take(1)).subscribe((actionProperties: IPlainObject) => {\n      this.sandbox.setActionPropertyEditorConfig(this.getActionEditorConfig(actionProperties));\n    });\n  }\n\n  private getActionEditorConfig(actionProperties: IPlainObject): IViewActionDesignPropertyEditorConfig {\n    return keys(actionProperties).map((propertyName) => ({\n      name: propertyName,\n      component: TextFormControlComponent,\n      isDisabled: true,\n      options: {\n        label: propertyName\n      }\n    }));\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RX_APPLICATION } from '@helix/platform/shared/api';\nimport { RxViewActionRegistryService } from '@helix/platform/view/api';\nimport { RxUnknownViewActionService } from './unknown-view-action.service';\nimport { RxUnknownViewActionDesignManager } from './unknown-view-action-design-manager.service';\nimport { RxUnknownViewActionDesignModel } from './unknown-view-action-design-model.class';\n\n@NgModule({\n  providers: [RxUnknownViewActionService, RxUnknownViewActionDesignManager]\n})\nexport class UnknownViewActionModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxUnknownViewActionService: RxUnknownViewActionService,\n    private rxUnknownViewActionDesignManager: RxUnknownViewActionDesignManager\n  ) {\n    this.rxViewActionRegistryService.register({\n      name: 'rxUnknownViewAction',\n      label: 'Unknown',\n      bundleId: RX_APPLICATION.platformBundleId,\n      designModel: RxUnknownViewActionDesignModel,\n      designManager: this.rxUnknownViewActionDesignManager,\n      service: this.rxUnknownViewActionService,\n      parameters: [],\n      hidden: true\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { AssociateViewActionModule } from './associate/associate-view-action.module';\nimport { AvcAssociateActionModule } from './avc-associate/avc-associate-action.module';\nimport { CloseViewActionModule } from './close-view/close-view-action.module';\nimport { DeleteRecordsViewActionModule } from './delete-records/delete-records-view-action.module';\nimport { DisassociateViewActionModule } from './disassociate/disassociate-view-action.module';\nimport { EditRecordsViewActionModule } from './edit-records/edit-records-view-action.module';\nimport { LaunchProcessViewActionModule } from './launch-process/launch-process-view-action.module';\nimport { LaunchProcessDesignerActionModule } from './launch-process-designer/launch-process-designer-action.module';\nimport { LaunchUrlViewActionModule } from './launch-url/launch-url-view-action.module';\nimport { OpenViewActionModule } from './open-view/open-view-action.module';\nimport { RefreshViewActionModule } from './refresh/refresh-view-action.module';\nimport { SaveViewActionModule } from './save/save-view-action.module';\nimport { SetPropertyViewActionModule } from './set-property/set-property-view-action.module';\nimport { UnknownViewActionModule } from './unknown/unknown-view-action.module';\nimport { ApplyGridFilterViewActionModule } from './apply-grid-filter/apply-grid-filter-view-action.module';\n\n@NgModule({\n  imports: [\n    ApplyGridFilterViewActionModule,\n    AssociateViewActionModule,\n    AvcAssociateActionModule,\n    CloseViewActionModule,\n    DeleteRecordsViewActionModule,\n    DisassociateViewActionModule,\n    EditRecordsViewActionModule,\n    LaunchProcessViewActionModule,\n    LaunchProcessDesignerActionModule,\n    LaunchUrlViewActionModule,\n    OpenViewActionModule,\n    RefreshViewActionModule,\n    SaveViewActionModule,\n    SetPropertyViewActionModule,\n    UnknownViewActionModule\n  ]\n})\nexport class ViewActionsModule {}\n","import {\n  ApplyGridFilterMode,\n  IViewActionDesignManager,\n  IViewActionDesignProperties,\n  RxViewComponentType\n} from '@helix/platform/view/api';\nimport {\n  IViewComponentDesignData,\n  IViewComponentDesignValidationIssue,\n  ViewDesignerFacade\n} from '@helix/platform/view/designer';\nimport { forkJoin, merge, Observable, of } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport {\n  IApplyGridFilterViewActionData,\n  IApplyGridFilterViewActionDesignProperties,\n  IApplyGridFilterViewActionGridData,\n  RxApplyGridFilterActionName\n} from './apply-grid-filter-view-action.types';\nimport { distinctUntilChanged, filter, map, shareReplay, skip, switchMap, take, withLatestFrom } from 'rxjs/operators';\nimport { RxApplyGridFilterViewActionDesignModelClass } from './apply-grid-filter-view-action-design-model.class';\nimport {\n  IRecordGridDesignProperties,\n  IRecordGridFilterDescriptorModel,\n  RX_RECORD_GRID,\n  RxRecordGridDesignUtilsService,\n  RxRecordGridFilterHelperService\n} from '@helix/platform/view/components';\nimport { cloneDeep, compact, includes, isEqual, omit, sortBy, uniq } from 'lodash';\n\n@Injectable()\nexport class RxApplyGridFilterViewActionDesignManagerService\n  implements IViewActionDesignManager<IApplyGridFilterViewActionDesignProperties>\n{\n  constructor(\n    private viewDesignerFacade: ViewDesignerFacade,\n    private rxRecordGridDesignUtilsService: RxRecordGridDesignUtilsService,\n    private rxRecordGridFilterHelperService: RxRecordGridFilterHelperService\n  ) {\n    const applyGridFilterActions$: Observable<IApplyGridFilterViewActionData[]> = this.viewDesignerFacade\n      .getComponentsByType<IViewActionDesignProperties>(RxViewComponentType.Action)\n      .pipe(\n        map(\n          (components) =>\n            components.filter(\n              (comp) => comp.data.name === RxApplyGridFilterActionName\n            ) as IApplyGridFilterViewActionData[]\n        ),\n        shareReplay({ refCount: true, bufferSize: 1 })\n      );\n\n    const gridGuids$ = applyGridFilterActions$.pipe(\n      map((actions) =>\n        actions.map((action) =>\n          RxApplyGridFilterViewActionDesignModelClass.extractGuidFromExpression(action.data.targetApi)\n        )\n      ),\n      map((guids) => sortBy(uniq(compact(guids)))),\n      filter((guids) => Boolean(guids.length)),\n      distinctUntilChanged((a, b) => isEqual(a, b)),\n      shareReplay({ refCount: true, bufferSize: 1 })\n    );\n\n    const updateActionFiltersOnGridColumnsChange$ = gridGuids$.pipe(\n      switchMap((gridGuids) => {\n        const actionsToUpdate$ = gridGuids.map((gridGuid) =>\n          this.getActionsToUpdate(gridGuid, applyGridFilterActions$)\n        );\n\n        return merge(...actionsToUpdate$);\n      })\n    );\n\n    const clearFiltersOnGridDefinitionChange$ = gridGuids$.pipe(\n      switchMap((gridGuids) => {\n        const actionsToUpdate$ = gridGuids.map((gridGuid) =>\n          this.getGridDefinitionChanges(gridGuid).pipe(\n            skip(1),\n            map(() => gridGuid),\n            withLatestFrom(applyGridFilterActions$),\n            map(([guid, actions]) => {\n              const affectedActions = actions.filter((action) => action.data.targetApi.includes(guid));\n\n              return affectedActions.map((actionComponent) => {\n                const updatedActionComponent = cloneDeep(actionComponent);\n\n                updatedActionComponent.data.filters = null;\n\n                return {\n                  component: updatedActionComponent,\n                  children: []\n                };\n              });\n            })\n          )\n        );\n\n        return merge(...actionsToUpdate$);\n      })\n    );\n\n    merge(clearFiltersOnGridDefinitionChange$, updateActionFiltersOnGridColumnsChange$).subscribe((components) => {\n      components.forEach((item) => {\n        this.viewDesignerFacade.updateComponentProperties(item.component.guid, item.component.data);\n        this.viewDesignerFacade.setChildren(item.component.guid, item.children);\n      });\n    });\n  }\n\n  private getActionsToUpdate(gridGuid: string, applyGridFilterActions$: Observable<IApplyGridFilterViewActionData[]>) {\n    return this.getGridColumnChanges(gridGuid).pipe(\n      skip(1),\n      withLatestFrom(applyGridFilterActions$),\n      switchMap(([gridData, actions]) => {\n        // getting actions bound to changed grid\n        const affectedActions = actions.filter((action) => action.data.targetApi.includes(gridData.guid));\n\n        const actionsWithFilters$ = affectedActions.map((action) =>\n          this.viewDesignerFacade.getChildComponents<IRecordGridFilterDescriptorModel>(action.guid).pipe(\n            map((filterComponents) => ({ ...cloneDeep(action), children: filterComponents })),\n            take(1)\n          )\n        );\n\n        return forkJoin(actionsWithFilters$).pipe(\n          map((actionComponents) => {\n            const gridColumnIds = gridData.columns.map((col) => col.fieldId);\n\n            return actionComponents.reduce((result, actionComponent) => {\n              const componentsToUpdate = this.getUpdatedFilterComponents(\n                omit(actionComponent, 'children'),\n                actionComponent.children,\n                gridColumnIds\n              );\n\n              return componentsToUpdate ? result.concat(componentsToUpdate) : result;\n            }, []);\n          })\n        );\n      })\n    );\n  }\n\n  private getGridColumnChanges(guid: string): Observable<IApplyGridFilterViewActionGridData> {\n    return this.viewDesignerFacade\n      .getComponentPropertyValue<'columns', IRecordGridDesignProperties>(guid, 'columns')\n      .pipe(\n        filter((columns) => Array.isArray(columns)),\n        map((columns) => ({\n          guid,\n          columns: columns.map((col) => ({\n            fieldId: col.fieldId,\n            namedFilterOptions: col.namedFilterOptions\n          }))\n        })),\n        distinctUntilChanged<IApplyGridFilterViewActionGridData>(isEqual)\n      );\n  }\n\n  private getGridDefinitionChanges(guid: string): Observable<string> {\n    return this.viewDesignerFacade.getComponentPropertyValue(guid, 'recordDefinitionName').pipe(distinctUntilChanged());\n  }\n\n  private getUpdatedFilterComponents(\n    component: IApplyGridFilterViewActionData,\n    filterComponents: IViewComponentDesignData<IRecordGridFilterDescriptorModel>[],\n    gridColumnIds: string[]\n  ): {\n    component: IApplyGridFilterViewActionData;\n    children: IViewComponentDesignData<IRecordGridFilterDescriptorModel>[];\n  } {\n    const filterComponentsForColumns = filterComponents.filter((item) => gridColumnIds.includes(item.data.fieldId));\n\n    if (filterComponentsForColumns.length !== filterComponents.length) {\n      const updatedFilterComponents =\n        this.rxRecordGridDesignUtilsService.getBasicRecordGridFiltersFromChildData(filterComponentsForColumns);\n\n      const newFilterData = this.rxRecordGridFilterHelperService.getRecordGridFilterDataFromPredefinedFilter(\n        component.data.filters,\n        updatedFilterComponents\n      );\n\n      // updating filters JSON after column remove\n      component.data.filters = newFilterData\n        ? this.rxRecordGridFilterHelperService.denormalizeFilterString(\n            JSON.stringify(newFilterData),\n            updatedFilterComponents\n          )\n        : null;\n\n      return {\n        component,\n        children: filterComponentsForColumns\n      };\n    }\n\n    return null;\n  }\n\n  validate(\n    actionProperties: IApplyGridFilterViewActionDesignProperties,\n    propertyName: string\n  ): Observable<IViewComponentDesignValidationIssue[]> {\n    const filterValidation =\n      !actionProperties.filters &&\n      !includes([ApplyGridFilterMode.Begin, ApplyGridFilterMode.End, ApplyGridFilterMode.Clear], actionProperties.mode)\n        ? {\n            type: 'error',\n            description: 'Apply grid filter action: Filter is required',\n            propertyName\n          }\n        : null;\n\n    return of(actionProperties.targetApi).pipe(\n      map((targetApi) => RxApplyGridFilterViewActionDesignModelClass.extractGuidFromExpression(targetApi)),\n      switchMap((guid) => (guid ? this.viewDesignerFacade.getComponent(guid) : of(null))),\n      take(1),\n      map((item) => {\n        const issues = [];\n\n        if (actionProperties.targetApi && item?.type !== RX_RECORD_GRID.type) {\n          issues.push({\n            type: 'error',\n            description: 'Apply grid filter action: Record grid expression must point to a record grid.',\n            propertyName\n          });\n        }\n\n        if (actionProperties.targetApi && !issues.length && filterValidation) {\n          issues.push(filterValidation);\n        }\n\n        return issues;\n      })\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RxViewActionRegistryService } from '@helix/platform/view/api';\nimport { RxApplyGridFilterViewActionDesignManagerService } from './apply-grid-filter-view-action-design-manager.service';\nimport { RxApplyGridFilterActionName } from './apply-grid-filter-view-action.types';\n\n@NgModule({\n  providers: [RxApplyGridFilterViewActionDesignManagerService]\n})\nexport class ApplyGridFilterViewActionDesignModule {\n  constructor(\n    private rxViewActionRegistryService: RxViewActionRegistryService,\n    private rxApplyGridFilterViewActionDesignManagerService: RxApplyGridFilterViewActionDesignManagerService\n  ) {\n    this.rxViewActionRegistryService.registerDesignManager(\n      RxApplyGridFilterActionName,\n      rxApplyGridFilterViewActionDesignManagerService\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ViewActionsModule } from './view-actions.module';\nimport { ApplyGridFilterViewActionDesignModule } from './apply-grid-filter/apply-grid-filter-view-action-design.module';\n\n@NgModule({\n  imports: [ViewActionsModule, ApplyGridFilterViewActionDesignModule]\n})\nexport class ViewActionsDesignModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["ViewDesignerFacade","RxRecordDefinitionCacheService","RxRecordGridDesignUtilsService","RxRecordGridFilterSelectHelperService","first","withLatestFrom","pluck","takeUntil","distinctUntilChanged","skip","map","merge","filter","ApplyGridFilterMode","switchMap","of","RX_RECORD_GRID","combineLatest","omit","Tooltip","ExpressionFormControlComponent","RadioFormControlComponent","RecordGridFilterSelectControlComponent","ValidationFormControlComponent","MessageType","includes","RxViewDesignerActionModel","EMPTY","throwError","RxError","Injectable","RecordGridNamedFilterOptionKey","RX_APPLICATION","NgModule","OpenViewActionModalSize","OpenViewActionType","OpenViewActionLaunchBehavior","RxDefinitionPickerComponent","RxDefinitionPickerType","SelectFormControlComponent","TextFormControlComponent","RxViewDefinitionCacheService","get","transform","isObject","DismissReasons","take","catchError","RuntimeViewModalComponent","defaults","DockedPanelDirection","from","switchMapTo","CommonModule","RuntimeViewModule","AdaptDockedPanelModule","RxDefinitionNameService","RxAssociationDefinitionService","shareReplay","RX_ASSOCIATION_DEFINITION","RxAssociatedRecordNodeSide","RX_ASSOCIATED_RECORD_NODE_SIDES","SwitchFormControlComponent","forkJoin","mapTo","flow","_map","flatten","compact","uniq","ViewComponentPropertyType","tap","isFunction","RowDataItemIdFieldName","isArray","some","RX_RECORD_DEFINITION","isEmpty","castArray","RX_MODAL","Component","RX_VIEW_DEFINITION","RxViewComponentType","RecordEditorMode","RX_ADMINISTRATION","ContainerRowWrap","assign","RxAssociationEditingMode","noop","forEach","forIn","isNull","values","has","RX_RECORD_INSTANCE","pick","RX_ERROR_HANDLING","isNil","AdaptIconModule","TranslateModule","FormsModule","AdaptRxTextareaModule","defaultIfEmpty","RxProcessDefinitionCacheService","isEqual","RX_PROCESS_DEFINITION","last","reduce","RX_LAUNCH_BEHAVIOR","concat","isObservable","RxViewDataDictionaryService","ExpressionOperatorGroup","RxViewActionExpressionConfigurator","ReplaySubject","ValueAccessor","NG_VALUE_ACCESSOR","Input","ViewChild","AdaptRxCheckboxModule","AdaptRxLabelModule","AdaptTreeModule","AdaptDropdownModule","TranslateService","DefinitionPickerOrExpressionFormControlComponent","RX_DESIGNER","HostListener","defer","RxProcessApiModule","RxIframeModule","keys","sortBy","cloneDeep"],"mappings":"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"}