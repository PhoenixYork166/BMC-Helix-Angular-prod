import { ChangeDetectorRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import * as shape from 'd3-shape';
import { Subject } from 'rxjs';
import { AdaptDeviceDetectionService, AdaptIconConfig } from '@bmc-ux/adapt-angular';
import { AdaptFlowChartCustomTemplate, AdaptFlowChartEdge, AdaptFlowChartEmptyStateConfig, AdaptFlowChartNode, AdaptFlowChartOrientation, AdaptFlowChartTexts } from '../common/models/flow-chart.model';
import { AdaptChartColorStatus } from '../common/services/chart-color.service';
import * as i0 from "@angular/core";
export declare class AdaptFlowChartComponent implements OnInit, OnChanges {
    private _deviceDetection;
    private _changeDetectorRef;
    private _domSanitizer;
    private _iconConfig;
    center$: Subject<boolean>;
    zoomToFit$: Subject<boolean>;
    panToNode$: Subject<string>;
    update$: Subject<boolean>;
    mainTextLeftPadding: number;
    mainTextTopPadding: number;
    mainTextTopGap: number;
    mainIconDimension: number;
    mainIconLeftPadding: number;
    mainIconTopPadding: number;
    defaultNodeHeight: number;
    defaultNodeWidth: number;
    nodeRoundRadix: number;
    additionalInfoRowHeight: number;
    additionalIconDimension: number;
    basicLeftPadding: number;
    additionalLeftPadding: number;
    additionalIconTopPadding: number;
    additionalTextTopPadding: number;
    additionalLineTopPadding: number;
    defaultColor: string;
    defaultLabelColor: string;
    defaultBackgroundColor: string;
    strokeLineLength: number;
    layoutSettings: {
        orientation: AdaptFlowChartOrientation;
    };
    zoomLevel: number;
    minZoomLevel: number;
    maxZoomLevel: number;
    handleZoomChangeDebounced: Function;
    loading: boolean;
    isIE: boolean;
    componentLevelId: string;
    nodeHoverId: string;
    links: AdaptFlowChartEdge[];
    nodes: AdaptFlowChartNode[];
    curve: shape.CurveFactory;
    orientation: AdaptFlowChartOrientation;
    zoomSpeed: number;
    enableZoom: boolean;
    autoZoom: boolean;
    autoCenter: boolean;
    texts: AdaptFlowChartTexts;
    autoCenterToNode: string;
    hasEmptyState: boolean;
    emptyStateConfig: AdaptFlowChartEmptyStateConfig;
    /**
     * Allows to use a custom template for chart elements. Can be node, link or defs templates
     * @since v12.24.0
     * @docs-default
     */
    customTemplateConfig: AdaptFlowChartCustomTemplate;
    readonly clickNode: EventEmitter<{
        event: Event;
        node: AdaptFlowChartNode;
    }>;
    class: string;
    backgroundColor: string;
    private _defaultTexts;
    private _defaultEmptyStateConfig;
    constructor(_deviceDetection: AdaptDeviceDetectionService, _changeDetectorRef: ChangeDetectorRef, _domSanitizer: DomSanitizer, _iconConfig: AdaptIconConfig);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    showEmptyState(): boolean;
    showGraph(): boolean;
    getStatusColor(status: AdaptChartColorStatus): string;
    getSvgIcon(name: string): SafeHtml;
    fitGraph(): void;
    handleNodeClick(event: Event, node: AdaptFlowChartNode): void;
    handleMouseOver(node: AdaptFlowChartNode): void;
    handleZoomMouseDown(): void;
    handleZoomChange(zoomLevel: number): void;
    getNodeHeight(node: AdaptFlowChartNode): number;
    trackByForNodeData(index: number): number;
    sliderValueFormatter(value: number): string;
    private _disableAutoZoom;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptFlowChartComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptFlowChartComponent, "adapt-flow-chart", never, { "links": "links"; "nodes": "nodes"; "curve": "curve"; "orientation": "orientation"; "zoomSpeed": "zoomSpeed"; "enableZoom": "enableZoom"; "autoZoom": "autoZoom"; "autoCenter": "autoCenter"; "texts": "texts"; "autoCenterToNode": "autoCenterToNode"; "hasEmptyState": "hasEmptyState"; "emptyStateConfig": "emptyStateConfig"; "customTemplateConfig": "customTemplateConfig"; "backgroundColor": "backgroundColor"; }, { "clickNode": "clickNode"; }, never, never>;
}
