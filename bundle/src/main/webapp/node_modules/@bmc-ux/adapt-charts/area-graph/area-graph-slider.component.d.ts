import { AfterViewInit, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import * as d3 from 'd3';
import { Axis, AxisDomain } from 'd3';
import { AdaptChartDimensions } from '../common/models/chart.model';
import { AdaptAreaGraphData } from '../common/models/area-graph.model';
import * as i0 from "@angular/core";
export declare class AdaptAreaGraphSliderComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {
    private _ngZone;
    classPrefix: string;
    sliderPaddingTop: number;
    isInitialized: boolean;
    brushWidth: number;
    isActive: boolean;
    xAxis: Axis<AxisDomain>;
    height: number;
    slidePointsCount: number;
    customColors: string[];
    xBrush: d3.ScaleLinear<number, number>;
    leftShift: number;
    containerWidth: number;
    data: AdaptAreaGraphData[];
    readonly rangeChanged: EventEmitter<number[]>;
    readonly scrollEnd: EventEmitter<void>;
    private _svgContainerEl;
    private _sliderEl;
    private _chartComponent;
    private _brush;
    private _cX;
    private _xMinValue;
    private _xMaxValue;
    private _g;
    private _inMotion;
    private _dndEl;
    private _destroyed$;
    constructor(_ngZone: NgZone);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    getXPos(): number;
    getXOverlayPos(): number;
    getRightOverlayWidth(): number;
    showCategory(category: string): void;
    hideCategory(category: string): void;
    updateSlider(dim: AdaptChartDimensions): void;
    private _renderBrushXAxis;
    private _getXAxisLineRenderer;
    private _initBrush;
    private _initBrushHandlers;
    private _brushed;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptAreaGraphSliderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptAreaGraphSliderComponent, "adapt-area-graph-slider", never, { "xAxis": "xAxis"; "height": "height"; "slidePointsCount": "slidePointsCount"; "customColors": "customColors"; "xBrush": "xBrush"; "leftShift": "leftShift"; "containerWidth": "containerWidth"; "data": "data"; }, { "rangeChanged": "rangeChanged"; "scrollEnd": "scrollEnd"; }, never, never>;
}
