import { AfterViewInit, EventEmitter, OnInit } from '@angular/core';
import { Point } from '@angular/cdk/drag-drop';
import * as d3 from 'd3';
import { AdaptLineGraphComponent } from '../line-graph/line-graph.component';
import { AdaptAreaGraphData, AdaptAreaGraphSeries } from '../common/models/area-graph.model';
import { AdaptChartCategoryToggleEvent, AdaptChartDimensions, AdaptChartTooltip } from '../common/models/chart.model';
import { AdaptLineGraphDateAndData } from '../common/models/line-graph.model';
import * as i0 from "@angular/core";
export declare class AdaptAreaGraphComponent extends AdaptLineGraphComponent implements OnInit, AfterViewInit {
    formatXAxisValue: (domainValue: d3.AxisDomain, index: number) => string;
    protected _data: AdaptAreaGraphData[];
    protected _series: AdaptAreaGraphSeries[];
    protected circleRadius: number;
    protected _id: string;
    private areaOpacity;
    private areaOpacityForHovered;
    /**
     * Output that emits each time chart category shown
     * @since 12.11.0
     */
    readonly categoryShow: EventEmitter<AdaptChartCategoryToggleEvent>;
    /**
     * Output that emits each time chart category hidden
     * @since 12.11.0
     */
    readonly categoryHide: EventEmitter<AdaptChartCategoryToggleEvent>;
    getTooltipXValueTitle(): string;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    getXMaxValue(data: AdaptAreaGraphData[]): number;
    getXMinValue(data: AdaptAreaGraphData[]): number;
    protected getCircleColor(): string;
    protected getLineRenderer(): d3.Line<Point>;
    protected getXPosFunc(dim: AdaptChartDimensions, domain?: (number | string)[]): d3.ScaleLinear<number, number>;
    protected getYPosFunc(dim: AdaptChartDimensions, ticksVal: number[]): d3.ScaleLinear<number, number>;
    protected getXAxisLineRenderer(dim: AdaptChartDimensions): d3.Axis<d3.AxisDomain>;
    protected mapDataFromSeries(series: AdaptAreaGraphSeries[]): AdaptAreaGraphData[];
    protected drawAreaForSeries(lineWrapper: d3.Selection<SVGGElement, any, any, any>, dt: AdaptAreaGraphData, i: number): void;
    protected onCircleMouseover(circleEl: SVGCircleElement, dt: AdaptAreaGraphData, d: AdaptLineGraphDateAndData): void;
    protected onCircleMouseout(circleEl: SVGCircleElement): void;
    protected getCircleDarkenColor(baseColor: string, circleParentLineSelection: d3.Selection<d3.BaseType, {}, null, undefined>): string;
    protected getDataForCirclesOrLines(dt: AdaptAreaGraphData): Point[];
    protected setCirclePosition(circleSel: d3.Selection<SVGCircleElement, any, SVGGElement, any>): d3.Selection<SVGCircleElement, any, SVGGElement, any>;
    protected updateLinesAreas(): void;
    protected restrictXPosTicks(): void;
    protected getTooltipData(baseColor: string, dt: AdaptAreaGraphData, d: Point): AdaptChartTooltip;
    protected getDataYValues(row: AdaptAreaGraphData): number[];
    private get _xPos();
    private getAreaFilling;
    private fillAreaDarkerColor;
    private fillAreaDefaultColor;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptAreaGraphComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptAreaGraphComponent, "adapt-area-graph", never, { "formatXAxisValue": "formatXAxisValue"; "getTooltipXValueTitle": "getTooltipXValueTitle"; }, { "categoryShow": "categoryShow"; "categoryHide": "categoryHide"; }, never, never>;
}
