import { EventEmitter, OnChanges, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import BigNumber from 'bignumber.js';
import * as d3 from 'd3';
import { AdaptChartSliderComponent } from '../common/chart-slider/chart-slider.component';
import { AdaptChartComponent } from '../common/chart.component';
import { AdaptChartAxis, AdaptChartCategoryEvent, AdaptChartCategoryToggleEvent, AdaptChartDimensions, AdaptChartHeader, AdaptChartLegend, AdaptChartSeriesFormat, AdaptChartSliderType, AdaptSVGGroupElement } from '../common/models/chart.model';
import { CutNumberPipe } from '../common/pipes/cut-number.pipe';
import { ChartColorService } from '../common/services/chart-color.service';
import { AdaptStackedChartAbstract, AdaptStackedChartSeries, AdaptStackedChartType } from '../common/models/stacked-chart.model';
import * as i0 from "@angular/core";
export interface KeyValueNumber {
    [key: string]: number;
}
interface TooltipListInfoData {
    seriesData: {
        category: string;
        value: number;
        color: string;
    }[];
    total: number;
}
export declare class AdaptStackedChartComponent extends AdaptStackedChartAbstract<any> implements OnInit, OnChanges {
    private _cutNumber;
    private _colorService;
    tooltipTemplate: string | TemplateRef<any>;
    tooltipListInfoTemplate: string | TemplateRef<any>;
    chartComponent: AdaptChartComponent;
    chartSliderComponent: AdaptChartSliderComponent;
    sliderType: AdaptChartSliderType;
    sliderMonitorsCount: number;
    sliderHeight: number;
    sliderData: any;
    heightZero: number;
    backgroundColor: string;
    width: number;
    height: number;
    header: AdaptChartHeader;
    suppressHeader: boolean;
    suppressLegend: boolean;
    tooltip: string | TemplateRef<any>;
    dataBuilder: (g: AdaptSVGGroupElement, dim: AdaptChartDimensions) => void;
    type: AdaptStackedChartType;
    xAxis: AdaptChartAxis;
    yAxis: AdaptChartAxis;
    showSlider: boolean;
    hasTotalLabels: boolean;
    seriesDisplay: AdaptChartSeriesFormat;
    totalLabelTextFormatter: (val: number | BigNumber, d: d3.SeriesPoint<KeyValueNumber>) => string | number;
    barWidth: number;
    slidePointsCount: number;
    hideAxises: boolean;
    rotateXAxis: boolean;
    xAxisTickFormatResolver: (interval: string | number, index: number) => string;
    scientificMode: boolean;
    renderLegend: boolean;
    /**
     * Threshold line in a chart to help determine which data points are either below or above a significant value
     * @since 10.11.0
     */
    thresholdLine: number;
    showEmptyColIndicator: boolean;
    readonly clickChart: EventEmitter<any>;
    /**
     * Output that emits each time chart category shown
     * @since 12.11.0
     */
    readonly categoryShow: EventEmitter<AdaptChartCategoryToggleEvent>;
    /**
     * Output that emits each time chart category hidden
     * @since 12.11.0
     */
    readonly categoryHide: EventEmitter<AdaptChartCategoryToggleEvent>;
    get isHorizontalSeries(): boolean;
    set series(s: AdaptStackedChartSeries[]);
    get series(): AdaptStackedChartSeries[];
    alreadyChanged: boolean;
    set legend(legend: AdaptChartLegend);
    get legend(): AdaptChartLegend;
    get leftShift(): number;
    get chartWidth(): number;
    get duration(): number;
    private get _margin();
    private _g;
    private _dim;
    private _data;
    private _dataFull;
    private _colors;
    private _keys;
    private _ordinal;
    private _maxTicksCount;
    private _totalByCol;
    private _highlightColor;
    private _categoryFilter;
    private _axisXThickness;
    private _axisYThickness;
    private _axisTitleThickness;
    private _legend;
    private _series;
    private _startDataPiece;
    private _endDataPiece;
    private _xScale;
    private _yScale;
    private _xAxisCall;
    private _yAxisCall;
    private _bars;
    private _cls;
    private readonly _emptyColIndicatorWidth;
    private readonly _emptyColIndicatorHeight;
    private _id;
    constructor(_cutNumber: CutNumberPipe, _colorService: ChartColorService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    updateChart(dim?: AdaptChartDimensions): void;
    _dataBuilder(g: AdaptSVGGroupElement, dim: AdaptChartDimensions): void;
    getStackedChart(): AdaptStackedChartComponent;
    categoryEnterHandler(categoryEvent: AdaptChartCategoryEvent): void;
    categoryLeaveHandler(categoryEvent: AdaptChartCategoryEvent): void;
    categoryShowHandler(category: string): void;
    categoryHideHandler(category: string): void;
    clickChartArea(e: any): void;
    changeDataRange(range: any): void;
    getFormattedSeries(data: any): TooltipListInfoData;
    private _initData;
    private _prepareOrdinal;
    private _drawAxisX;
    private _drawAxisXForBar;
    private _drawAxisXForColumn;
    private _drawAxisXForArea;
    private _drawAxisY;
    private _drawAxisYForBar;
    private _drawAxisYForColumn;
    private _drawData;
    private _drawDataBars;
    private _getBarYPosition;
    private _getWidthForColumn;
    private _getColumnYPosForHorizontalSeries;
    private _dividePoints;
    private _getColumnXPos;
    private _getColumnYPos;
    private _setYPos;
    private _setRectPositionAndScaleForColumnsType;
    private _drawDataColumns;
    private _drawDataArea;
    private _drawTooltipLinesForArea;
    private _addTotalLabels;
    private _createTotalLabelsGroupsItems;
    private _getTotalLabelGroupOpacity;
    private _getTotalLabelText;
    private _getTotalLabelTransform;
    private _getTotalLabelsData;
    private _getCurrentCategoryIndex;
    private _getTicks;
    private _clear;
    private _updateData;
    private _updateThresholdLineArea;
    private _drawAxisTitle;
    private _updateAxisTitle;
    private _updateAxisX;
    private _updateAxisXForBar;
    private _updateAxisXForColumn;
    private _updateAxisXForArea;
    private _updateAxisY;
    private _updateAxisYForBar;
    private _updateAxisYForColumn;
    private _getCustomColorById;
    private _getDataRange;
    private _getDataLength;
    private _initSlidePointsCount;
    private _drawEmptyDataIndicator;
    private _getTickFormatForNumber;
    private _getTickFormatForString;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptStackedChartComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptStackedChartComponent, "adapt-stacked-chart", never, { "backgroundColor": "backgroundColor"; "width": "width"; "height": "height"; "header": "header"; "suppressHeader": "suppressHeader"; "suppressLegend": "suppressLegend"; "tooltip": "tooltip"; "dataBuilder": "dataBuilder"; "type": "type"; "xAxis": "xAxis"; "yAxis": "yAxis"; "showSlider": "showSlider"; "hasTotalLabels": "hasTotalLabels"; "seriesDisplay": "seriesDisplay"; "totalLabelTextFormatter": "totalLabelTextFormatter"; "barWidth": "barWidth"; "slidePointsCount": "slidePointsCount"; "hideAxises": "hideAxises"; "rotateXAxis": "rotateXAxis"; "xAxisTickFormatResolver": "xAxisTickFormatResolver"; "scientificMode": "scientificMode"; "renderLegend": "renderLegend"; "thresholdLine": "thresholdLine"; "showEmptyColIndicator": "showEmptyColIndicator"; "series": "series"; "legend": "legend"; }, { "clickChart": "clickChart"; "categoryShow": "categoryShow"; "categoryHide": "categoryHide"; }, never, never>;
}
export {};
