import { EventEmitter, OnInit, TemplateRef } from '@angular/core';
import { CutNumberPipe } from '../common/pipes/cut-number.pipe';
import { ChartColorService } from '../common/services/chart-color.service';
import { AdaptChartComponent } from '../common/chart.component';
import { AdaptChartAxis, AdaptChartCategoryEvent, AdaptChartCategoryToggleEvent, AdaptChartDimensions, AdaptChartHeader, AdaptChartLegend, AdaptSVGGroupElement } from '../common/models/chart.model';
import { AdaptDeviceDetectionService } from '@bmc-ux/adapt-angular';
import { AdaptScatterPlotAbstract, AdaptScatterPlotData } from '../common/models/scatter-plot.model';
import * as i0 from "@angular/core";
export declare class AdaptScatterPlotComponent extends AdaptScatterPlotAbstract<any> implements OnInit {
    private _cutNumber;
    private _deviceDetectionService;
    private _colorService;
    alreadyChanged: boolean;
    backgroundColor: string;
    width: number;
    height: number;
    header: AdaptChartHeader;
    set series(s: AdaptScatterPlotData[]);
    get series(): AdaptScatterPlotData[];
    xAxis: AdaptChartAxis;
    yAxis: AdaptChartAxis;
    noDataText: string;
    set legend(legend: AdaptChartLegend);
    get legend(): AdaptChartLegend;
    suppressHeader: boolean;
    suppressLegend: boolean;
    tooltip: string | TemplateRef<unknown>;
    dataBuilder: (g: AdaptSVGGroupElement, dim: AdaptChartDimensions) => void;
    updateChart: (g: AdaptSVGGroupElement, dim: AdaptChartDimensions) => void;
    scientificMode: boolean;
    readonly clickChart: EventEmitter<MouseEvent>;
    /**
     * Output that emits each time chart category shown
     * @since 12.11.0
     */
    readonly categoryShow: EventEmitter<AdaptChartCategoryToggleEvent>;
    /**
     * Output that emits each time chart category hidden
     * @since 12.11.0
     */
    readonly categoryHide: EventEmitter<AdaptChartCategoryToggleEvent>;
    tooltipTemplate: string | TemplateRef<unknown>;
    chartComponent: AdaptChartComponent;
    private _series;
    private _highLightColor;
    private _regLine;
    private _margin;
    private _dim;
    private _g;
    private _gW;
    private _x;
    private _y;
    private _line;
    private _colors;
    private _axisShift;
    private _axisScientificLeftShift;
    private _generatedData;
    private _isDeselected;
    private _legend;
    get duration(): number;
    get axisShiftLeft(): number;
    constructor(_cutNumber: CutNumberPipe, _deviceDetectionService: AdaptDeviceDetectionService, _colorService: ChartColorService);
    _updateChart: (dim: AdaptChartDimensions) => void;
    _dataBuilder: (g: AdaptSVGGroupElement, dim: AdaptChartDimensions) => void;
    ngOnInit(): void;
    isMobile(): boolean;
    categoryShowHandler(category: string): void;
    categoryHideHandler(category: string): void;
    categoryEnter(categoryEvent: AdaptChartCategoryEvent): void;
    categoryLeave(): void;
    private _getCustomColorById;
    private _updatedScatterChart;
    private _initAxis;
    private _updateAxis;
    private _updateDataLines;
    private _drawLines;
    /**
     * http://bl.ocks.org/tommyogden/f416a5c27971908845a9
     */
    private _leastSquaresequation;
    private _drawDropShadow;
    private _getTickFormatForNumber;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptScatterPlotComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptScatterPlotComponent, "adapt-scatter-plot", never, { "backgroundColor": "backgroundColor"; "width": "width"; "height": "height"; "header": "header"; "series": "series"; "xAxis": "xAxis"; "yAxis": "yAxis"; "noDataText": "noDataText"; "legend": "legend"; "suppressHeader": "suppressHeader"; "suppressLegend": "suppressLegend"; "tooltip": "tooltip"; "dataBuilder": "dataBuilder"; "updateChart": "updateChart"; "scientificMode": "scientificMode"; }, { "clickChart": "clickChart"; "categoryShow": "categoryShow"; "categoryHide": "categoryHide"; }, never, never>;
}
