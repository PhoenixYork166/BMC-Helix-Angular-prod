import { EventEmitter, TemplateRef } from '@angular/core';
import * as d3 from 'd3';
import * as i0 from "@angular/core";
export interface AdaptChartTooltip {
    color: string;
    category: string;
    xValue: any;
    yValue: any;
}
export declare abstract class AdaptChartAbstract {
    backgroundColor: string;
    width: number;
    height: number;
    header: AdaptChartHeader;
    abstract legend: AdaptChartLegend;
    suppressHeader: boolean;
    suppressLegend: boolean;
    tooltip?: string | TemplateRef<any>;
    dataBuilder: (g: AdaptSVGGroupElement, dim: AdaptChartDimensions) => void;
    noDataText?: string;
    readonly clickChart: EventEmitter<any>;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptChartAbstract, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptChartAbstract, never, never, { "backgroundColor": "backgroundColor"; "width": "width"; "height": "height"; "header": "header"; "legend": "legend"; "suppressHeader": "suppressHeader"; "suppressLegend": "suppressLegend"; "tooltip": "tooltip"; "dataBuilder": "dataBuilder"; "noDataText": "noDataText"; }, { "clickChart": "clickChart"; }, never>;
}
export interface AdaptChartLegend {
    columns?: number;
    items: string[] | AdaptChartLegendState[];
    customColors?: string[];
    activeHover?: boolean;
    activeClick?: boolean;
    width?: number;
}
export interface AdaptChartGradientLegend {
    increaseColor: string;
    decreaseColor: string;
    zeroColor?: string;
    increaseText?: string;
    decreaseText?: string;
    zeroText?: string;
    height?: string;
}
export interface AdaptChartLegendState {
    hidden: boolean;
    hover: boolean;
    item: string;
}
export interface AdaptChartCategoryToggleEvent {
    category: string;
}
export interface AdaptChartCategoryEvent {
    id: number;
    event: MouseEvent;
}
export interface AdaptChartAxis {
    title?: string;
    thickness?: number;
    categories?: string[];
}
export interface AdaptChartDimensions {
    w: number;
    h: number;
}
export interface AdaptChartHeader {
    title?: string;
    subtitle?: string;
    allowHideLegend?: boolean;
}
export interface AdaptChartDataModel<T> {
    name: string;
    data: T[];
}
export interface AdaptChartSeries<T> {
    name?: string;
    hidden?: boolean;
    data: T[];
}
export interface AdaptChartBoundaries {
    top: number;
    right: number;
    bottom: number;
    left: number;
}
export declare type AdaptChartSeriesFormat = 'vertical' | 'horizontal';
export declare type AdaptSVGGroupElement = d3.Selection<SVGGElement, any, any, any>;
export declare enum AdaptChartSliderType {
    bar = "bar",
    line = "line",
    scatterplot = "scatterplot"
}
