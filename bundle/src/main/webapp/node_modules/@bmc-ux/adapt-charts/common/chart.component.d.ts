import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, Injector, NgZone, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { DomSanitizer, SafeStyle } from '@angular/platform-browser';
import { Directionality } from '@angular/cdk/bidi';
import { Point } from '@angular/cdk/drag-drop';
import * as d3 from 'd3';
import { AdaptDeviceDetectionService, AdaptOverlayService } from '@bmc-ux/adapt-angular';
import { AdaptChartAbstract, AdaptChartAxis, AdaptChartCategoryEvent, AdaptChartDimensions, AdaptChartGradientLegend, AdaptChartHeader, AdaptChartLegend, AdaptChartLegendState, AdaptSVGGroupElement } from './models/chart.model';
import { AdaptChartSliderComponent } from './chart-slider/chart-slider.component';
import { ColorsPalette } from './services/chart-color.service';
import { ChartLegendComponent } from './legend/chart-legend.component';
import { AdaptAreaGraphSliderComponent } from '../area-graph/area-graph-slider.component';
import * as i0 from "@angular/core";
export declare class AdaptChartComponent extends AdaptChartAbstract implements OnInit, AfterViewInit, OnDestroy {
    private _deviceDetectionService;
    private _directionality;
    private _domSanitizer;
    private _injector;
    private _ngZone;
    private _changeDetectorRef;
    private _overlayService;
    $this: AdaptChartComponent;
    title: string;
    description: string;
    backgroundColor: string;
    width: number;
    height: number;
    header: AdaptChartHeader;
    legend: AdaptChartLegend;
    renderLegend: boolean;
    gradientLegend: AdaptChartGradientLegend;
    suppressHeader: boolean;
    suppressLegend: boolean;
    tooltip: string | TemplateRef<unknown>;
    noDataText: string;
    dataBuilder: (g: AdaptSVGGroupElement, dim: AdaptChartDimensions) => void;
    updateChart: (dim: AdaptChartDimensions) => void;
    colorsPalette: ColorsPalette;
    topSectionTemplate: TemplateRef<void>;
    set data(v: any);
    readonly categoryShow: EventEmitter<string>;
    readonly categoryHide: EventEmitter<string>;
    readonly categoryEnter: EventEmitter<AdaptChartCategoryEvent>;
    readonly categoryLeave: EventEmitter<AdaptChartCategoryEvent>;
    readonly categoryMove: EventEmitter<AdaptChartCategoryEvent>;
    readonly clickChart: EventEmitter<MouseEvent>;
    chartContainerId: string;
    id: number;
    currentContainerWidth: number;
    currentContainerHeight: number;
    currentSVGWidth: number;
    currentSVGHeight: number;
    isLegendHidden: boolean;
    legendWidth: number;
    defaultMaxAxisWidth: number;
    chartContainerEl: ElementRef<HTMLDivElement>;
    chartAreaEl: ElementRef<HTMLDivElement>;
    svgContainerEl: ElementRef<SVGElement>;
    legendEl: ElementRef<HTMLDivElement>;
    legendComponent: ChartLegendComponent;
    chartSliderEl: ElementRef<HTMLDivElement>;
    chartSliderCmp: AdaptChartSliderComponent;
    areaChartSliderCmp: AdaptAreaGraphSliderComponent;
    private _data;
    private _emptyText;
    get isMobile(): boolean;
    get showHeader(): boolean;
    get showLegend(): boolean;
    get chartWidth(): number;
    get chartHeight(): number;
    get transition(): SafeStyle;
    get chartBottomPadding(): number;
    set chartBottomPadding(value: number);
    private _tooltipOverlayWithPortal;
    private _tooltipOverlayDefaultOffset;
    private _tooltipOverlayPlacements;
    private _tooltipDefaultCustomCls;
    private _showEmptyText;
    private _removeClickEventListener;
    private _removeScrollEventListener;
    private _chartBottomPadding;
    private _destroyed$;
    constructor(_deviceDetectionService: AdaptDeviceDetectionService, _directionality: Directionality, _domSanitizer: DomSanitizer, _injector: Injector, _ngZone: NgZone, _changeDetectorRef: ChangeDetectorRef, _overlayService: AdaptOverlayService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    redrawChart(): void;
    showTooltip(target: HTMLElement | Point, content: string | TemplateRef<unknown>, context?: unknown, customCls?: string, offset?: number, sidePositionsFirst?: boolean): void;
    hideTooltip(): void;
    updateTooltip(content?: string | TemplateRef<any>, context?: any): void;
    toggleLegend(): void;
    clear(): void;
    clickChartArea(e: MouseEvent): void;
    updateLegend(items: string[] | AdaptChartLegendState[]): void;
    getGroupAndDimensions(): {
        group: AdaptSVGGroupElement;
        w: number;
        h: number;
    };
    updateChartBottomPadding(axisWidth: number, g: AdaptSVGGroupElement, xAxis: AdaptChartAxis, rotateAxis?: boolean): void;
    transformAxisTitles(axisBlock: d3.Selection<d3.BaseType, any, any, any>, shouldRotate: boolean): void;
    private _initChart;
    /**
     * This method manages the size of the main container element, dependently on
     * which size parameters have been set
     */
    private _setContainerSize;
    private _setChartSize;
    private _drawChart;
    private _isDataExists;
    private _drawEmptyText;
    private _removeListeners;
    private _getTooltipPositions;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptChartComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptChartComponent, "adapt-chart", never, { "title": "title"; "description": "description"; "backgroundColor": "backgroundColor"; "width": "width"; "height": "height"; "header": "header"; "legend": "legend"; "renderLegend": "renderLegend"; "gradientLegend": "gradientLegend"; "suppressHeader": "suppressHeader"; "suppressLegend": "suppressLegend"; "tooltip": "tooltip"; "noDataText": "noDataText"; "dataBuilder": "dataBuilder"; "updateChart": "updateChart"; "colorsPalette": "colorsPalette"; "topSectionTemplate": "topSectionTemplate"; "data": "data"; }, { "categoryShow": "categoryShow"; "categoryHide": "categoryHide"; "categoryEnter": "categoryEnter"; "categoryLeave": "categoryLeave"; "categoryMove": "categoryMove"; "clickChart": "clickChart"; }, ["chartSliderCmp", "areaChartSliderCmp"], ["*", "adapt-chart-slider", "adapt-area-graph-slider"]>;
}
