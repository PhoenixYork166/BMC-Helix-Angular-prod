import { EventEmitter, OnInit, NgZone, OnDestroy } from '@angular/core';
import { DomSanitizer, SafeStyle } from '@angular/platform-browser';
import { ListKeyManager } from '@angular/cdk/a11y';
import { AdaptDeviceDetectionService, AdaptListKeyManagerItemDirective } from '@bmc-ux/adapt-angular';
import { ChartColorService, ColorsPalette } from '../services/chart-color.service';
import { AdaptChartCategoryEvent, AdaptChartLegendState } from '../models/chart.model';
import * as i0 from "@angular/core";
export declare class ChartLegendComponent implements OnInit, OnDestroy {
    private _chartColorService;
    private _deviceDetectionService;
    private _sanitize;
    private _ngZone;
    static id: number;
    mainCls: string;
    isScrolled: boolean;
    items: string[] | AdaptChartLegendState[];
    columnsCount: number;
    customColors: string[];
    colorsPalette: ColorsPalette;
    activeHover: boolean;
    activeClick: boolean;
    width: number;
    focusable: boolean;
    readonly categoryShow: EventEmitter<string>;
    readonly categoryHide: EventEmitter<string>;
    readonly categoryEnter: EventEmitter<AdaptChartCategoryEvent>;
    readonly categoryLeave: EventEmitter<AdaptChartCategoryEvent>;
    readonly categoryMove: EventEmitter<AdaptChartCategoryEvent>;
    id: number;
    legend: AdaptChartLegendState[];
    columns: AdaptChartLegendState[][];
    columnSize: number;
    isMouseOver: boolean;
    activeOption: number;
    legendFocus: boolean;
    _listKeyManager: ListKeyManager<AdaptListKeyManagerItemDirective>;
    private _destroyed$;
    get isMobile(): boolean;
    constructor(_chartColorService: ChartColorService, _deviceDetectionService: AdaptDeviceDetectionService, _sanitize: DomSanitizer, _ngZone: NgZone);
    ngOnInit(): void;
    ngOnDestroy(): void;
    legendKeydownHandler(event: KeyboardEvent): void;
    keyManagerStateChange(listKeyManager?: ListKeyManager<AdaptListKeyManagerItemDirective>): void;
    parseColumns(): void;
    getColorById(id: number): SafeStyle;
    getBorderColorById(id: number): SafeStyle;
    clickLegend(id: number): void;
    toggleMouseOverStatus(): void;
    enterLegendItem(event: MouseEvent, id: number): void;
    leaveLegendItem(event: MouseEvent, id: number): void;
    moveLegendItem(event: MouseEvent, id: number): void;
    update(items: string[] | AdaptChartLegendState[]): void;
    initLegend(): void;
    trackByIndex(index: number): number;
    private _getLegend;
    private _showCategory;
    private _hideCategory;
    static ɵfac: i0.ɵɵFactoryDeclaration<ChartLegendComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ChartLegendComponent, "adapt-chart-legend", never, { "mainCls": "mainCls"; "items": "items"; "columnsCount": "columns"; "customColors": "customColors"; "colorsPalette": "colorsPalette"; "activeHover": "activeHover"; "activeClick": "activeClick"; "width": "width"; "focusable": "focusable"; }, { "categoryShow": "categoryShow"; "categoryHide": "categoryHide"; "categoryEnter": "categoryEnter"; "categoryLeave": "categoryLeave"; "categoryMove": "categoryMove"; }, never, never>;
}
