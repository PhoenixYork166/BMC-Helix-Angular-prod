import { Component, Input, Output, EventEmitter, HostBinding, NgZone } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { DOWN_ARROW, ENTER, UP_ARROW, TAB, SPACE } from '@angular/cdk/keycodes';
import { isNull, isString } from 'lodash-es';
import { ReplaySubject } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import { AdaptDeviceDetectionService, ColorType, getEventKeyCode, isUndefined } from '@bmc-ux/adapt-angular';
import { ChartColorService } from '../services/chart-color.service';
import * as i0 from "@angular/core";
import * as i1 from "../services/chart-color.service";
import * as i2 from "@bmc-ux/adapt-angular";
import * as i3 from "@angular/platform-browser";
import * as i4 from "@angular/common";
function ChartLegendComponent_ng_container_3_div_2_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r10 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementStart(2, "button", 6);
    i0.ɵɵlistener("click", function ChartLegendComponent_ng_container_3_div_2_ng_container_2_Template_button_click_2_listener() { const restoredCtx = i0.ɵɵrestoreView(_r10); const id_r8 = restoredCtx.index; const colId_r5 = i0.ɵɵnextContext().index; const ctx_r9 = i0.ɵɵnextContext(2); return ctx_r9.clickLegend(ctx_r9.columnSize * colId_r5 + id_r8); })("mouseenter", function ChartLegendComponent_ng_container_3_div_2_ng_container_2_Template_button_mouseenter_2_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r10); const id_r8 = restoredCtx.index; const colId_r5 = i0.ɵɵnextContext().index; const ctx_r12 = i0.ɵɵnextContext(2); return ctx_r12.enterLegendItem($event, ctx_r12.columnSize * colId_r5 + id_r8); })("mouseleave", function ChartLegendComponent_ng_container_3_div_2_ng_container_2_Template_button_mouseleave_2_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r10); const id_r8 = restoredCtx.index; const colId_r5 = i0.ɵɵnextContext().index; const ctx_r14 = i0.ɵɵnextContext(2); return ctx_r14.leaveLegendItem($event, ctx_r14.columnSize * colId_r5 + id_r8); })("mousemove", function ChartLegendComponent_ng_container_3_div_2_ng_container_2_Template_button_mousemove_2_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r10); const id_r8 = restoredCtx.index; const colId_r5 = i0.ɵɵnextContext().index; const ctx_r16 = i0.ɵɵnextContext(2); return ctx_r16.moveLegendItem($event, ctx_r16.columnSize * colId_r5 + id_r8); });
    i0.ɵɵtext(3, "\n              ");
    i0.ɵɵelement(4, "span", 7);
    i0.ɵɵtext(5, "\n              ");
    i0.ɵɵelementStart(6, "span", 8);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n            ");
    i0.ɵɵelement(10, "br");
    i0.ɵɵtext(11, "\n          ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const legend_r7 = ctx.$implicit;
    const id_r8 = ctx.index;
    const colId_r5 = i0.ɵɵnextContext().index;
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("adapt-chart-legend-item__hidden", legend_r7.hidden);
    i0.ɵɵattribute("id", ctx_r6.columnSize * colId_r5 + id_r8)("aria-checked", ctx_r6.activeClick ? !legend_r7.hidden : null)("aria-selected", ctx_r6.activeClick ? !legend_r7.hidden : null)("type", ctx_r6.activeClick ? "button" : null)("role", ctx_r6.activeClick ? "option" : "listitem");
    i0.ɵɵadvance(2);
    i0.ɵɵstyleProp("border-color", ctx_r6.getBorderColorById(ctx_r6.columnSize * colId_r5 + id_r8))("background-color", ctx_r6.getColorById(ctx_r6.columnSize * colId_r5 + id_r8));
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("text-active", ctx_r6.legendFocus && ctx_r6.activeOption === ctx_r6.columnSize * colId_r5 + id_r8);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(legend_r7.item);
} }
function ChartLegendComponent_ng_container_3_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 4);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵtemplate(2, ChartLegendComponent_ng_container_3_div_2_ng_container_2_Template, 12, 14, "ng-container", 5);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r4 = ctx.$implicit;
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", column_r4)("ngForTrackBy", ctx_r3.trackByIndex);
} }
function ChartLegendComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, ChartLegendComponent_ng_container_3_div_2_Template, 4, 2, "div", 3);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r0.columns)("ngForTrackBy", ctx_r0.trackByIndex);
} }
function ChartLegendComponent_ng_template_5_button_1_Template(rf, ctx) { if (rf & 1) {
    const _r23 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 10);
    i0.ɵɵlistener("click", function ChartLegendComponent_ng_template_5_button_1_Template_button_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r23); const id_r21 = restoredCtx.index; const ctx_r22 = i0.ɵɵnextContext(2); return ctx_r22.clickLegend(id_r21); });
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelement(2, "span", 7);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementStart(4, "div", 8);
    i0.ɵɵtext(5, "\n            ");
    i0.ɵɵelementStart(6, "div");
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const category_r20 = ctx.$implicit;
    const id_r21 = ctx.index;
    const ctx_r19 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵstyleProp("border-color", ctx_r19.getBorderColorById(id_r21))("background-color", ctx_r19.getColorById(id_r21));
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(category_r20.item);
} }
function ChartLegendComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n        ");
    i0.ɵɵtemplate(1, ChartLegendComponent_ng_template_5_button_1_Template, 10, 5, "button", 9);
    i0.ɵɵtext(2, "\n      ");
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r2.legend);
} }
const _c0 = function (a0) { return { "adapt-chart-legend-mouse-over": a0 }; };
export class ChartLegendComponent {
    constructor(_chartColorService, _deviceDetectionService, _sanitize, _ngZone) {
        this._chartColorService = _chartColorService;
        this._deviceDetectionService = _deviceDetectionService;
        this._sanitize = _sanitize;
        this._ngZone = _ngZone;
        this.mainCls = '';
        this.isScrolled = false;
        // eslint-disable-next-line @angular-eslint/no-input-rename
        this.columnsCount = 1;
        this.focusable = true;
        this.categoryShow = new EventEmitter();
        this.categoryHide = new EventEmitter();
        this.categoryEnter = new EventEmitter();
        this.categoryLeave = new EventEmitter();
        this.categoryMove = new EventEmitter();
        this.legend = [];
        this.columns = [];
        this.isMouseOver = this.isMobile;
        this.activeOption = null;
        this.legendFocus = false;
        this._destroyed$ = new ReplaySubject(1);
    }
    get isMobile() {
        return this._deviceDetectionService.deviceTablet() || this._deviceDetectionService.deviceMobile();
    }
    ngOnInit() {
        this.initLegend();
    }
    ngOnDestroy() {
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
    legendKeydownHandler(event) {
        var _a;
        switch (getEventKeyCode(event)) {
            case DOWN_ARROW:
            case UP_ARROW: {
                (_a = this._listKeyManager) === null || _a === void 0 ? void 0 : _a.onKeydown(event);
                break;
            }
            case ENTER:
            case SPACE: {
                if (!isNull(this.activeOption)) {
                    event.preventDefault();
                    this.clickLegend(this.activeOption);
                }
                break;
            }
            case TAB: {
                this.toggleMouseOverStatus();
                break;
            }
        }
    }
    keyManagerStateChange(listKeyManager) {
        var _a;
        this._listKeyManager = listKeyManager;
        this._ngZone.onStable
            .pipe(takeUntil(this._destroyed$), take(1))
            .subscribe(() => {
            var _a;
            (_a = this._listKeyManager) === null || _a === void 0 ? void 0 : _a.setFirstItemActive();
        });
        (_a = this._listKeyManager) === null || _a === void 0 ? void 0 : _a.change.pipe(takeUntil(this._destroyed$)).subscribe(() => {
            this.activeOption = this._listKeyManager.activeItemIndex;
        });
    }
    parseColumns() {
        let columns = (new Array(this.columnsCount)).fill([]);
        columns = columns.map((col, colId) => {
            const start = colId * this.columnSize;
            const items = this.legend.slice();
            const end = start + this.columnSize;
            return items.slice(start, end);
        });
        this.columns = columns;
        if (!this.legend || !this.legend.length || this.legend.length !== this.items.length) {
            this.initLegend();
        }
    }
    getColorById(id) {
        const defaultColor = this.customColors ? this.customColors[id] : this._chartColorService.getColor(id, this.colorsPalette);
        const hoverColor = this._chartColorService.getDarken(defaultColor, .14, ColorType.HEX);
        const color = this.legend[id].hover ? hoverColor : defaultColor;
        return this._sanitize.bypassSecurityTrustStyle(color);
    }
    getBorderColorById(id) {
        const backgroundColor = this.customColors ? this.customColors[id] : this._chartColorService.getColor(id, this.colorsPalette);
        const defaultBorderColor = this._chartColorService.getDarken(backgroundColor, .14, ColorType.HEX);
        const hoverBorderColor = this._chartColorService.getDarken(backgroundColor, .24, ColorType.HEX);
        const borderColor = this.legend[id].hover ? hoverBorderColor : defaultBorderColor;
        return this._sanitize.bypassSecurityTrustStyle(borderColor);
    }
    clickLegend(id) {
        const legend = this.legend[id];
        if (isNull(id) || !this.activeClick) {
            return;
        }
        if (legend.hidden) {
            this._showCategory(legend);
        }
        else {
            this._hideCategory(legend);
        }
    }
    toggleMouseOverStatus() {
        if (!this.activeHover) {
            return;
        }
        if (this.isMobile) {
            this.isMouseOver = true;
            return;
        }
        this.isMouseOver = !this.isMouseOver;
    }
    enterLegendItem(event, id) {
        this.activeOption = id;
        this.legend[id].hover = true;
        this.categoryEnter.emit({ id, event });
    }
    leaveLegendItem(event, id) {
        this.legend[id].hover = false;
        this.categoryLeave.emit({ id, event });
    }
    moveLegendItem(event, id) {
        this.categoryMove.emit({ id, event });
    }
    update(items) {
        this.items = items;
        this.legend = this._getLegend();
        this.columnSize = Math.ceil(this.items.length / this.columnsCount);
        this.parseColumns();
    }
    initLegend() {
        if (isUndefined(this.items) || !this.items.length || isNull(this.items)) {
            return;
        }
        this.activeHover = isUndefined(this.activeHover) ? true : this.activeHover;
        this.activeClick = isUndefined(this.activeClick) ? true : this.activeClick;
        this.legend = this._getLegend();
        this.columnSize = Math.ceil(this.items.length / this.columnsCount);
        this.parseColumns();
    }
    trackByIndex(index) {
        return index;
    }
    _getLegend() {
        return isString(this.items[0])
            ? this.items.map((item) => ({ item, hidden: false, hover: false }))
            : this.items.map((item) => ({ item: item.item, hidden: item.hidden, hover: false }));
    }
    _showCategory(legend) {
        legend.hidden = false;
        this.categoryShow.emit(legend.item);
    }
    _hideCategory(legend) {
        const visibleCount = this.legend.filter((l) => !l.hidden).length;
        if (visibleCount === 1) {
            return;
        }
        legend.hidden = true;
        this.categoryHide.emit(legend.item);
    }
}
ChartLegendComponent.id = 0;
ChartLegendComponent.ɵfac = function ChartLegendComponent_Factory(t) { return new (t || ChartLegendComponent)(i0.ɵɵdirectiveInject(i1.ChartColorService), i0.ɵɵdirectiveInject(i2.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i3.DomSanitizer), i0.ɵɵdirectiveInject(i0.NgZone)); };
ChartLegendComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ChartLegendComponent, selectors: [["adapt-chart-legend"]], hostVars: 4, hostBindings: function ChartLegendComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassMap(ctx.mainCls);
        i0.ɵɵclassProp("adapt-chart-legend-scrolled", ctx.isScrolled);
    } }, inputs: { mainCls: "mainCls", items: "items", columnsCount: ["columns", "columnsCount"], customColors: "customColors", colorsPalette: "colorsPalette", activeHover: "activeHover", activeClick: "activeClick", width: "width", focusable: "focusable" }, outputs: { categoryShow: "categoryShow", categoryHide: "categoryHide", categoryEnter: "categoryEnter", categoryLeave: "categoryLeave", categoryMove: "categoryMove" }, decls: 9, vars: 12, consts: [["adaptListKeyManager", "", "tabindex", "0", 1, "adapt-chart-legend", 3, "ngClass", "keyManagerStateChange", "keydown", "keyup.tab", "mouseenter", "mouseleave", "focus", "blur"], [4, "ngIf", "ngIfElse"], ["mobileLegend", ""], ["class", "adapt-chart-legend-col", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "adapt-chart-legend-col"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["adaptListKeyManagerItem", "", "tabindex", "-1", 1, "adapt-chart-legend-item", 3, "click", "mouseenter", "mouseleave", "mousemove"], [1, "adapt-chart-legend-item-color"], [1, "adapt-chart-legend-item-text"], ["class", "adapt-chart-legend-item", "type", "button", 3, "click", 4, "ngFor", "ngForOf"], ["type", "button", 1, "adapt-chart-legend-item", 3, "click"]], template: function ChartLegendComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtext(0, "\n    ");
        i0.ɵɵelementStart(1, "div", 0);
        i0.ɵɵlistener("keyManagerStateChange", function ChartLegendComponent_Template_div_keyManagerStateChange_1_listener($event) { return ctx.keyManagerStateChange($event); })("keydown", function ChartLegendComponent_Template_div_keydown_1_listener($event) { return ctx.legendKeydownHandler($event); })("keyup.tab", function ChartLegendComponent_Template_div_keyup_tab_1_listener() { return ctx.toggleMouseOverStatus(); })("mouseenter", function ChartLegendComponent_Template_div_mouseenter_1_listener() { return ctx.toggleMouseOverStatus(); })("mouseleave", function ChartLegendComponent_Template_div_mouseleave_1_listener() { return ctx.toggleMouseOverStatus(); })("focus", function ChartLegendComponent_Template_div_focus_1_listener() { return ctx.legendFocus = true; })("blur", function ChartLegendComponent_Template_div_blur_1_listener() { return ctx.legendFocus = false; });
        i0.ɵɵtext(2, "\n      ");
        i0.ɵɵtemplate(3, ChartLegendComponent_ng_container_3_Template, 4, 2, "ng-container", 1);
        i0.ɵɵtext(4, "\n\n      ");
        i0.ɵɵtemplate(5, ChartLegendComponent_ng_template_5_Template, 3, 1, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(7, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(8, "\n  ");
    } if (rf & 2) {
        const _r1 = i0.ɵɵreference(6);
        i0.ɵɵadvance(1);
        i0.ɵɵstyleProp("width", ctx.isMobile ? "100%" : ctx.width + "px");
        i0.ɵɵclassProp("adapt-chart-legend-mobile", ctx.isMobile);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(10, _c0, ctx.isMouseOver));
        i0.ɵɵattribute("role", ctx.activeClick ? "listbox" : "list")("aria-multiselectable", ctx.activeClick ? true : null)("aria-activedescendant", ctx.activeOption);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx.isMobile)("ngIfElse", _r1);
    } }, directives: [i2.AdaptListKeyManagerDirective, i4.NgClass, i4.NgIf, i4.NgForOf, i2.AdaptListKeyManagerItemDirective], styles: ["[_nghost-%COMP%] {\n      position: relative;\n    }\n\n    .adapt-chart-legend-item[_ngcontent-%COMP%] {\n      background: transparent;\n      border: none;\n    }"] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ChartLegendComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-chart-legend',
                template: `
    <div adaptListKeyManager
         tabindex="0"
         class="adapt-chart-legend"
         [class.adapt-chart-legend-mobile]="isMobile"
         [ngClass]="{ 'adapt-chart-legend-mouse-over': isMouseOver }"
         [style.width]="isMobile ? '100%' : width + 'px'"
         [attr.role]="activeClick ? 'listbox' : 'list'"
         [attr.aria-multiselectable]="activeClick ? true : null"
         [attr.aria-activedescendant]="activeOption"
         (keyManagerStateChange)="keyManagerStateChange($event)"
         (keydown)="legendKeydownHandler($event)"
         (keyup.tab)="toggleMouseOverStatus()"
         (mouseenter)="toggleMouseOverStatus()"
         (mouseleave)="toggleMouseOverStatus()"
         (focus)="legendFocus = true"
         (blur)="legendFocus = false">
      <ng-container *ngIf="!isMobile; else mobileLegend">
        <div class="adapt-chart-legend-col"
             *ngFor="let column of columns; let colId = index; trackBy: trackByIndex">
          <ng-container *ngFor="let legend of column; let id = index; trackBy: trackByIndex">
            <button adaptListKeyManagerItem
                    tabindex="-1"
                    class="adapt-chart-legend-item"
                    [class.adapt-chart-legend-item__hidden]="legend.hidden"
                    [attr.id]="columnSize*colId + id"
                    [attr.aria-checked]="activeClick ? !legend.hidden : null"
                    [attr.aria-selected]="activeClick ? !legend.hidden : null"
                    [attr.type]="activeClick ? 'button' : null"
                    [attr.role]="activeClick ? 'option' : 'listitem'"
                    (click)="clickLegend(columnSize*colId + id)"
                    (mouseenter)="enterLegendItem($event, columnSize*colId + id)"
                    (mouseleave)="leaveLegendItem($event, columnSize*colId + id)"
                    (mousemove)="moveLegendItem($event, columnSize*colId + id)">
              <span class="adapt-chart-legend-item-color"
                    [style.border-color]="getBorderColorById(columnSize*colId + id)"
                    [style.background-color]="getColorById(columnSize*colId + id)"></span>
              <span class="adapt-chart-legend-item-text"
                    [class.text-active]="legendFocus && (activeOption === columnSize*colId + id)">{{legend.item}}</span>
            </button>
            <br/>
          </ng-container>
        </div>
      </ng-container>

      <ng-template #mobileLegend>
        <button class="adapt-chart-legend-item"
                type="button"
                *ngFor="let category of legend; let id = index;"
                (click)="clickLegend(id)">
          <span class="adapt-chart-legend-item-color"
                [style.border-color]="getBorderColorById(id)"
                [style.background-color]="getColorById(id)"></span>
          <div class="adapt-chart-legend-item-text">
            <div>{{category.item}}</div>
          </div>
        </button>
      </ng-template>
    </div>
  `,
                styles: [`
    :host {
      position: relative;
    }

    .adapt-chart-legend-item {
      background: transparent;
      border: none;
    }
  `]
            }]
    }], function () { return [{ type: i1.ChartColorService }, { type: i2.AdaptDeviceDetectionService }, { type: i3.DomSanitizer }, { type: i0.NgZone }]; }, { mainCls: [{
            type: HostBinding,
            args: ['class']
        }, {
            type: Input
        }], isScrolled: [{
            type: HostBinding,
            args: ['class.adapt-chart-legend-scrolled']
        }], items: [{
            type: Input
        }], columnsCount: [{
            type: Input,
            args: ['columns']
        }], customColors: [{
            type: Input
        }], colorsPalette: [{
            type: Input
        }], activeHover: [{
            type: Input
        }], activeClick: [{
            type: Input
        }], width: [{
            type: Input
        }], focusable: [{
            type: Input
        }], categoryShow: [{
            type: Output
        }], categoryHide: [{
            type: Output
        }], categoryEnter: [{
            type: Output
        }], categoryLeave: [{
            type: Output
        }], categoryMove: [{
            type: Output
        }] }); })();
//# sourceMappingURL=chart-legend.component.js.map