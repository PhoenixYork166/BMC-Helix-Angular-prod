{"version":3,"file":"chart.model.js","sourceRoot":"","sources":["../../../../../../libs/adapt-charts/src/common/models/chart.model.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE,MAAM,EAAc,MAAM,eAAe,CAAC;;AAclF,MAAM,OAAgB,kBAAkB;;oFAAlB,kBAAkB;qEAAlB,kBAAkB;uFAAlB,kBAAkB;cADvC,SAAS;gBAEC,eAAe;kBAAvB,KAAK;YACG,KAAK;kBAAb,KAAK;YACG,MAAM;kBAAd,KAAK;YACG,MAAM;kBAAd,KAAK;YACY,MAAM;kBAAvB,KAAK;YACG,cAAc;kBAAtB,KAAK;YACG,cAAc;kBAAtB,KAAK;YAEG,OAAO;kBAAf,KAAK;YACG,WAAW;kBAAnB,KAAK;YACG,UAAU;kBAAlB,KAAK;YAGa,UAAU;kBAA5B,MAAM;;AA8ET,MAAM,CAAN,IAAY,oBAIX;AAJD,WAAY,oBAAoB;IAC9B,mCAAW,CAAA;IACX,qCAAa,CAAA;IACb,mDAA2B,CAAA;AAC7B,CAAC,EAJW,oBAAoB,KAApB,oBAAoB,QAI/B","sourcesContent":["import {Directive, EventEmitter, Input, Output, TemplateRef} from '@angular/core';\nimport * as d3 from 'd3';\n\n// TODO update types\nexport interface AdaptChartTooltip {\n  color: string;\n  category: string;\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  xValue: any;\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  yValue: any;\n}\n\n@Directive()\nexport abstract class AdaptChartAbstract {\n  @Input() backgroundColor: string;\n  @Input() width: number;\n  @Input() height: number;\n  @Input() header: AdaptChartHeader;\n  @Input() abstract legend: AdaptChartLegend;\n  @Input() suppressHeader: boolean;\n  @Input() suppressLegend: boolean;\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  @Input() tooltip?: string | TemplateRef<any>;\n  @Input() dataBuilder: (g: AdaptSVGGroupElement, dim: AdaptChartDimensions) => void;\n  @Input() noDataText?: string;\n\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  @Output() readonly clickChart: EventEmitter<any>;\n}\n\nexport interface AdaptChartLegend {\n  columns?: number;\n  items: string[] | AdaptChartLegendState[];\n  customColors?: string[];\n  activeHover?: boolean;\n  activeClick?: boolean;\n  width?: number;\n}\n\n// @since 10.8.0\nexport interface AdaptChartGradientLegend {\n  increaseColor: string;\n  decreaseColor: string;\n  zeroColor?: string;\n  increaseText?: string;\n  decreaseText?: string;\n  zeroText?: string;\n  height?: string;\n}\n\nexport interface AdaptChartLegendState {\n  hidden: boolean;\n  hover: boolean;\n  item: string;\n}\n\nexport interface AdaptChartCategoryToggleEvent {\n  category: string;\n}\n\nexport interface AdaptChartCategoryEvent {\n  id: number;\n  event: MouseEvent;\n}\n\nexport interface AdaptChartAxis {\n  title?: string;\n  thickness?: number;\n  categories?: string[];\n}\n\nexport interface AdaptChartDimensions {\n  w: number;\n  h: number;\n}\n\nexport interface AdaptChartHeader {\n  title?: string;\n  subtitle?: string;\n  allowHideLegend?: boolean;\n}\n\nexport interface AdaptChartDataModel<T> {\n  name: string;\n  data: T[];\n}\n\nexport interface AdaptChartSeries<T> {\n  name?: string;\n  hidden?: boolean;\n  data: T[];\n}\n\nexport interface AdaptChartBoundaries {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n}\n\nexport type AdaptChartSeriesFormat = 'vertical' | 'horizontal';\n\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nexport type AdaptSVGGroupElement = d3.Selection<SVGGElement, any, any, any>;\n\nexport enum AdaptChartSliderType {\n  bar = 'bar',\n  line = 'line',\n  scatterplot = 'scatterplot'\n}\n"]}