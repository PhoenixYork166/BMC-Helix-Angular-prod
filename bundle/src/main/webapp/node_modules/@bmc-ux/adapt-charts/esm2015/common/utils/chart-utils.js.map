{"version":3,"file":"chart-utils.js","sourceRoot":"","sources":["../../../../../../libs/adapt-charts/src/common/utils/chart-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\n\nexport function nameof<T>(key: keyof T): keyof T {\n  return key;\n}\n\n/**\n * Function allowing to 'wrap' the text from an SVG <text> element with <tspan>.\n * Based on https://github.com/mbostock/d3/issues/1642\n *\n * @example\n *   svg.append(\"g\")\n *      .attr(\"class\", \"x axis\")\n *      .attr(\"transform\", \"translate(0,\" + height + \")\")\n *      .call(xAxis)\n *      .selectAll(\".tick text\")\n *          .call(textWrap, x.rangeBand());\n *\n * @param textItems d3.Selection<Element, string, SVGGElement, string> - d3 selection for one or more <text> object\n * @param width number - global width in which the text will be word-wrapped.\n * @param paddingRightLeft number - Padding right and left between the wrapped text and the 'invisible bax' of 'width' width\n * @param paddingTopBottom number - Padding top and bottom between the wrapped text and the 'invisible bax' of 'width' width\n * @returns number[] - Number of lines created by the function, stored in a Array in case multiple <text> element are passed to the function\n */\nexport function textWrap(textItems: d3.Selection<Element, string, SVGGElement, string>, width: number, paddingRightLeft: number = 5, paddingTopBottom: number): number[] {\n  paddingTopBottom = (paddingTopBottom || 5) - 2; // Default padding (5px), remove 2 pixels because of the borders\n  const maxWidth = width; // I store the tooltip max width\n\n  width = width - (paddingRightLeft * 2); // Take the padding into account\n\n  const arrLineCreatedCount = [];\n\n  textItems.each(function (): void {\n    const text = d3.select(this);\n    const words = text.text().split(/[ \\f\\n\\r\\t\\v]+/).reverse(); // Don't cut non-breaking space (\\xA0), as well as the Unicode characters \\u00A0 \\u2028 \\u2029)\n    const lineHeight = 1.25; // Ems\n    const textAlign = text.style('text-anchor') || 'start'; // 'start' by default (start, middle, end, inherit)\n\n    let word;\n    let line = [];\n    let lineNumber = 0;\n    let x;\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    let y: any = text.attr('y');\n    let dy = parseFloat(text.attr('dy'));\n    let createdLineCount = 1; // Total line created count\n\n    // Clean the data in case <text> does not define those values\n    if (isNaN(dy)) {\n      dy = 0;\n    } // Default padding (0em) : the 'dy' attribute on the first <tspan> _must_ be identical to the 'dy' specified on the <text> element, or start at '0em' if undefined\n\n    // Offset the text position based on the text-anchor\n    const wrapTickLabels = d3.select(text.node().parentNode).classed('tick'); // Don't wrap the 'normal untranslated' <text> element and the translated <g class='tick'><text></text></g> elements the same way..\n\n    if (wrapTickLabels) {\n      switch (textAlign) {\n        case 'start':\n          x = -width / 2;\n          break;\n        case 'middle':\n          x = 0;\n          break;\n        case 'end':\n          x = 0; // width / 2;\n          break;\n        default :\n      }\n    } else { // untranslated <text> elements\n      switch (textAlign) {\n        case 'start':\n          x = paddingRightLeft;\n          break;\n        case 'middle':\n          x = maxWidth / 2;\n          break;\n        case 'end':\n          x = maxWidth - paddingRightLeft;\n          break;\n        default :\n      }\n    }\n    y = +((null === y) ? paddingTopBottom : y);\n\n    let tspan = text.text(null).append('tspan').attr('x', x).attr('y', y).attr('dy', dy + 'em');\n\n    // eslint-disable-next-line no-cond-assign\n    while (word = words.pop()) {\n      line.push(word);\n      tspan.text(line.join(' '));\n\n      if (tspan.node().getComputedTextLength() > width && line.length > 1) {\n        line.pop();\n        tspan.text(line.join(' '));\n        line = [word];\n        tspan = text.append('tspan').attr('x', x).attr('y', y).attr('dy', ++lineNumber * lineHeight + dy + 'em').text(word);\n        ++createdLineCount;\n      }\n    }\n\n    arrLineCreatedCount.push(createdLineCount); // Store the line count in the array\n  });\n\n  return arrLineCreatedCount;\n}\n"]}