{"version":3,"file":"cut-number.pipe.js","sourceRoot":"","sources":["../../../../../../libs/adapt-charts/src/common/pipes/cut-number.pipe.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,IAAI,EAAgB,MAAM,eAAe,CAAC;;AAElD,MAAe,YAAY;;AACT,cAAC,GAAW,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAC5B,cAAC,GAAW,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAC5B,cAAC,GAAW,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;AAC5B,cAAC,GAAW,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;AAM/C,MAAM,OAAO,aAAa;IACxB,2CAA2C;IAC3C,6DAA6D;IAC7D,SAAS,CAAC,KAAa,EAAE,aAAqB,CAAC;QAC7C,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC3C,IAAI,UAAkB,CAAC;QAEvB,QAAQ,CAAC,IAAI,CAAC,CAAC,aAAa,EAAE,EAAE,EAAE,EAAE;YAClC,MAAM,cAAc,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;YAExC,IAAI,KAAK,GAAG,YAAY,CAAC,aAAa,CAAC,EAAE;gBACvC,IAAI,cAAc,EAAE;oBAClB,MAAM,CAAC,GAAG,KAAK,GAAG,YAAY,CAAC,cAAc,CAAC,CAAC;oBAE/C,UAAU,GAAG,CAAC,KAAK,GAAG,YAAY,CAAC,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC;iBACzF;qBAAM;oBACL,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;iBAClD;aACF;YAED,OAAO,KAAK,GAAG,YAAY,CAAC,aAAa,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,OAAO,UAAU,CAAC;IACpB,CAAC;;0EAxBU,aAAa;+EAAb,aAAa;uFAAb,aAAa;cAHzB,IAAI;eAAC;gBACJ,IAAI,EAAE,WAAW;aAClB","sourcesContent":["import {Pipe, PipeTransform} from '@angular/core';\n\nabstract class NumberPrefix {\n  static readonly K: number = Math.pow(10, 3);\n  static readonly M: number = Math.pow(10, 6);\n  static readonly G: number = Math.pow(10, 9);\n  static readonly T: number = Math.pow(10, 12);\n}\n\n@Pipe({\n  name: 'cutNumber'\n})\nexport class CutNumberPipe implements PipeTransform {\n  // TODO: Double check 'fractional' argument\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  transform(value: number, fractional: number = 2): string {\n    const prefixes = Object.keys(NumberPrefix);\n    let shortValue: string;\n\n    prefixes.some((prefixCurrent, id) => {\n      const prefixPrevious = prefixes[id - 1];\n\n      if (value < NumberPrefix[prefixCurrent]) {\n        if (prefixPrevious) {\n          const t = value % NumberPrefix[prefixPrevious];\n\n          shortValue = (value / NumberPrefix[prefixPrevious]).toFixed(t ? 1 : 0) + prefixPrevious;\n        } else {\n          shortValue = Number(value.toFixed(6)).toString();\n        }\n      }\n\n      return value < NumberPrefix[prefixCurrent];\n    });\n\n    return shortValue;\n  }\n}\n"]}