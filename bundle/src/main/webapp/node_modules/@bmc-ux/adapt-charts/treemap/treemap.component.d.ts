import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, QueryList, Renderer2, SimpleChanges, TemplateRef } from '@angular/core';
import * as d3 from 'd3';
import { AdaptDropdownDirective, AdaptDropdownToggleDirective, AdaptListKeyManagerItemDirective } from '@bmc-ux/adapt-angular';
import { AdaptChartComponent } from '../common/chart.component';
import { AdaptChartCategoryEvent, AdaptChartDimensions, AdaptChartGradientLegend, AdaptChartHeader, AdaptChartLegend, AdaptSVGGroupElement } from '../common/models/chart.model';
import { AdaptTreemapAbstract, AdaptTreemapActionsMenu, AdaptTreemapData, AdaptTreemapDataChildren, AdaptTreemapGroupData, AdaptTreemapGroupEnterEvent, AdaptTreemapNodeAction } from '../common/models/treemap.model';
import { ChartColorService } from '../common/services/chart-color.service';
import * as i0 from "@angular/core";
export declare class AdaptTreemapComponent extends AdaptTreemapAbstract implements OnInit, OnChanges, OnDestroy {
    private _renderer;
    private _chartColorService;
    private _changeDetectorRef;
    _legend: AdaptChartLegend;
    menuData: AdaptTreemapActionsMenu;
    hasActionMenu: boolean;
    innerData: AdaptTreemapData | AdaptTreemapGroupData;
    breadCrumbs: string[];
    dataBuilderBind: (g: AdaptSVGGroupElement, dim: AdaptChartDimensions) => void;
    updateChartBind: (dim: AdaptChartDimensions) => void;
    dataBuilderForGroupsBind: (g: AdaptSVGGroupElement, dim: AdaptChartDimensions) => void;
    updateChartForGroupsBind: (dim: AdaptChartDimensions) => void;
    chartBase: AdaptChartComponent;
    treemapDefaultTooltip: TemplateRef<AdaptTreemapDataChildren>;
    treemapGroupTooltip: TemplateRef<{
        parentContext: AdaptTreemapData;
        childContext: AdaptTreemapData;
    }>;
    menuAnchor: AdaptDropdownToggleDirective;
    menuContainer: AdaptDropdownDirective;
    optionsListRef: ElementRef<HTMLDivElement>;
    items: QueryList<AdaptListKeyManagerItemDirective>;
    backgroundColor: string;
    width: number;
    height: number;
    header: AdaptChartHeader;
    legend: AdaptChartLegend;
    gradientLegend: AdaptChartGradientLegend;
    suppressHeader: boolean;
    suppressLegend: boolean;
    tooltip: string | TemplateRef<any>;
    data: AdaptTreemapData | AdaptTreemapGroupData;
    noDataText: string;
    showSizeInName: boolean;
    /**
     * @since 10.14.0
     */
    groupView: boolean;
    readonly clickChart: EventEmitter<AdaptTreemapData | AdaptTreemapGroupData>;
    readonly groupEntered: EventEmitter<AdaptTreemapGroupEnterEvent>;
    private _g;
    private _removeClickEventListener;
    private _removeScrollEventListener;
    private _tooltipEl;
    private _tooltipMouseleaveHandler;
    private _activeNode;
    private _tooltipPoint;
    private _targetWithActions;
    private _listKeyManager;
    private _closeMenuBind;
    constructor(_renderer: Renderer2, _chartColorService: ChartColorService, _changeDetectorRef: ChangeDetectorRef);
    categoryEnter(categoryEvent: AdaptChartCategoryEvent): void;
    categoryLeave(categoryEvent: AdaptChartCategoryEvent): void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    popupAnimationDone(): void;
    keydownHandler(event: any): void;
    getActiveDescendant(): string;
    isActiveDescendant(index: number): boolean;
    callAction(target: SVGElement, event: MouseEvent, context: AdaptTreemapDataChildren, action: AdaptTreemapNodeAction): void;
    enterGroup(event: MouseEvent, d: d3.HierarchyRectangularNode<AdaptTreemapGroupData>): void;
    updateBreadCrumbs(d: d3.HierarchyRectangularNode<AdaptTreemapGroupData>): void;
    navigateToGroup(event: MouseEvent, name: string, data: AdaptTreemapGroupData): void;
    private _dataBuilder;
    private _updateChart;
    private _dataBuilderForGroups;
    private _updateChartForGroups;
    private _showParentLabel;
    private _hideParentLabel;
    private _buildActionsMenu;
    private _openMenu;
    private _closeMenu;
    private _isDataContainsActions;
    private _openTooltip;
    private _closeTooltip;
    private _prepareLegend;
    private _prepareGroupLegend;
    private _initLegend;
    private _updateLegend;
    private _ellipsis;
    private _removeListeners;
    private _removeTooltipMouseleaveListener;
    private _flattenByChildren;
    private _getRelatedToLegendNodes;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptTreemapComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptTreemapComponent, "adapt-treemap", ["treemap"], { "backgroundColor": "backgroundColor"; "width": "width"; "height": "height"; "header": "header"; "legend": "legend"; "gradientLegend": "gradientLegend"; "suppressHeader": "suppressHeader"; "suppressLegend": "suppressLegend"; "tooltip": "tooltip"; "data": "data"; "noDataText": "noDataText"; "showSizeInName": "showSizeInName"; "groupView": "groupView"; }, { "clickChart": "clickChart"; "groupEntered": "groupEntered"; }, never, never>;
}
