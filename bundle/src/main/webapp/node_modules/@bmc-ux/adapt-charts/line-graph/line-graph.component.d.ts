import { ChangeDetectorRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { Point } from '@angular/cdk/drag-drop';
import { ReplaySubject } from 'rxjs';
import * as d3 from 'd3';
import { CutNumberPipe } from '../common/pipes/cut-number.pipe';
import { ChartColorService, ColorsPalette } from '../common/services/chart-color.service';
import { AdaptChartAxis, AdaptChartBoundaries, AdaptChartCategoryEvent, AdaptChartCategoryToggleEvent, AdaptChartDimensions, AdaptChartHeader, AdaptChartLegend, AdaptChartSeries, AdaptChartTooltip, AdaptSVGGroupElement } from '../common/models/chart.model';
import { AdaptAreaGraphData } from '../common/models/area-graph.model';
import { AdaptLineGraphAbstract, AdaptLineGraphData, AdaptLineGraphDateAndData } from '../common/models/line-graph.model';
import { AdaptChartComponent } from '../common/chart.component';
import { AdaptAreaGraphSliderComponent } from '../area-graph/area-graph-slider.component';
import { AdaptDeviceDetectionService } from '@bmc-ux/adapt-angular';
import * as i0 from "@angular/core";
interface NumericalValues {
    circleRadius: number;
    maxTicksCount: number;
    axisShift: AdaptChartBoundaries;
    margin: AdaptChartBoundaries;
    marginMobile: number;
}
export declare class AdaptLineGraphComponent extends AdaptLineGraphAbstract<any> implements OnInit, OnChanges, OnDestroy {
    protected _cutNumber: CutNumberPipe;
    protected _deviceDetectionService: AdaptDeviceDetectionService;
    protected _colorService: ChartColorService;
    private _ngZone;
    private _changeDetectorRef;
    alreadyChanged: boolean;
    sliderData: AdaptAreaGraphData[];
    xBrush: d3.ScalePoint<string>;
    sliderDomainData: number[];
    _dataBuilderBind: (g: AdaptSVGGroupElement, dim: AdaptChartDimensions) => void;
    _updateChartBind: (dim: AdaptChartDimensions) => void;
    readonly componentNumericalValues: NumericalValues;
    protected circleRadius: number;
    protected _series: AdaptChartSeries<any>[];
    protected _maxTicksCount: number;
    protected _data: AdaptLineGraphData[];
    protected _dim: AdaptChartDimensions;
    protected _g: AdaptSVGGroupElement;
    protected _gW: AdaptSVGGroupElement;
    protected _x: d3.ScalePoint<string>;
    protected _y: d3.ScaleLinear<number, number>;
    protected _line: d3.Line<Point>;
    protected _isDeselected: string[];
    protected _colors: string[];
    protected _destroy$: ReplaySubject<boolean>;
    protected _axisShift: AdaptChartBoundaries;
    protected _highLightColor: string;
    protected _pathLines: any;
    protected _pathLineCurrent: any;
    protected get _margin(): AdaptChartBoundaries;
    get duration(): number;
    tooltipTemplate: string | TemplateRef<any>;
    chartComponent: AdaptChartComponent;
    chartSliderComponent: AdaptAreaGraphSliderComponent;
    backgroundColor: string;
    width: number;
    height: number;
    header: AdaptChartHeader;
    colorsPalette: ColorsPalette;
    supressAxles: boolean;
    noDataText: string;
    xAxis: AdaptChartAxis;
    yAxis: AdaptChartAxis;
    suppressHeader: boolean;
    suppressLegend: boolean;
    tooltip: string | TemplateRef<any>;
    dataBuilder: (g: AdaptSVGGroupElement, dim: AdaptChartDimensions) => void;
    updateChart: (dim: AdaptChartDimensions) => void;
    showLineCircles: boolean;
    rotateXAxis: boolean;
    showSlider: boolean;
    slidePointsCount: number;
    disallowPadding: boolean;
    scientificMode: boolean;
    /**
     * Threshold line in a chart to help determine which data points are either below or above a significant value
     * @since 10.11.0
     */
    set thresholdLine(value: number);
    get thresholdLine(): number;
    set legend(legend: AdaptChartLegend);
    get legend(): AdaptChartLegend;
    set series(series: AdaptChartSeries<number>[] | AdaptChartSeries<Point>[]);
    get series(): AdaptChartSeries<number>[] | AdaptChartSeries<Point>[];
    get leftShift(): number;
    get chartWidth(): number;
    readonly clickChart: EventEmitter<any>;
    /**
     * Output that emits each time chart category shown
     * @since 12.11.0
     */
    readonly categoryShow: EventEmitter<AdaptChartCategoryToggleEvent>;
    /**
     * Output that emits each time chart category hidden
     * @since 12.11.0
     */
    readonly categoryHide: EventEmitter<AdaptChartCategoryToggleEvent>;
    private _thresholdLine;
    private _legend;
    protected _id: string;
    constructor(_cutNumber: CutNumberPipe, _deviceDetectionService: AdaptDeviceDetectionService, _colorService: ChartColorService, _ngZone: NgZone, _changeDetectorRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    _dataBuilder(g: AdaptSVGGroupElement, dim: AdaptChartDimensions): void;
    _updateChart(dim: AdaptChartDimensions, skipUpdateAxisX?: boolean): void;
    isMobile(): boolean;
    categoryShowHandler(category: string): void;
    categoryHideHandler(category: string): void;
    categoryEnter(categoryEvent: AdaptChartCategoryEvent): void;
    categoryLeave(): void;
    getTooltipXValueTitle(): string;
    rangeChanged(data: number[]): void;
    scrollEnd(): void;
    protected getXAxisLineRenderer(dim: AdaptChartDimensions): d3.Axis<d3.AxisDomain>;
    protected getYPosFunc(dim: AdaptChartDimensions, ticksVal: number[]): d3.ScaleLinear<number, number>;
    protected getXPosFunc(dim: AdaptChartDimensions, domain?: (number | string)[]): d3.ScalePoint<string> | d3.ScaleLinear<number, number>;
    protected _getCustomColorById(id: number): string;
    protected _drawLines(g: AdaptSVGGroupElement): void;
    protected onCircleMouseout(circleEl: SVGCircleElement): void;
    protected onCircleMouseover(circleEl: SVGCircleElement, dt: AdaptLineGraphData, d: AdaptLineGraphDateAndData): void;
    protected showCircleTooltip(baseColor: string, dt: AdaptLineGraphData, d: AdaptLineGraphDateAndData | any): void;
    protected getTooltipData(baseColor: string, dt: AdaptLineGraphData, d: AdaptLineGraphDateAndData | any): AdaptChartTooltip;
    protected getCircleDarkenColor(baseColor: string, circleParentLineSelection: d3.Selection<d3.BaseType, {}, null, undefined>): string;
    protected drawLineCircles(lineWrapper: AdaptSVGGroupElement, i: number, dt: AdaptLineGraphData): d3.Selection<SVGCircleElement, AdaptLineGraphDateAndData, SVGGElement, any>;
    protected toggleLineCirclesVisibility(g: AdaptSVGGroupElement, isShown: boolean): void;
    protected getDataForCirclesOrLines(dt: AdaptLineGraphData): any[];
    protected setCirclePosition(circleSel: d3.Selection<SVGCircleElement, any, SVGGElement, any>): d3.Selection<SVGCircleElement, any, SVGGElement, any>;
    protected drawLineForSeries(lineWrapper: AdaptSVGGroupElement, dt: AdaptLineGraphData, i: number): d3.Selection<SVGPathElement, any[], any, any>;
    protected getCircleColor(i: number): string;
    protected drawAreaForSeries(lineWrapper: AdaptSVGGroupElement, dt: AdaptLineGraphData, i: number): void;
    protected getLineRenderer(): d3.Line<any>;
    protected updateLinesAreas(): void;
    protected restrictXPosTicks(): void;
    protected mapDataFromSeries(series: AdaptChartSeries<any>[]): AdaptLineGraphData[];
    protected getDataYValues(row: AdaptLineGraphData): number[];
    protected nameof(key: keyof AdaptLineGraphComponent): keyof AdaptLineGraphComponent;
    protected _detectViewChanges(): void;
    private _initAxis;
    private renderYAxis;
    private getYAxisRenderer;
    private renderXAxis;
    private _updateXAxis;
    private _updateYAxis;
    private _updateAxis;
    private getCircleLine;
    private _updateDataLines;
    private _initData;
    private _getTicks;
    private _initClipPath;
    private _clear;
    private _updateThresholdLineArea;
    private _drawDropShadow;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptLineGraphComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptLineGraphComponent, "adapt-line-graph", never, { "backgroundColor": "backgroundColor"; "width": "width"; "height": "height"; "header": "header"; "colorsPalette": "colorsPalette"; "supressAxles": "supressAxles"; "noDataText": "noDataText"; "xAxis": "xAxis"; "yAxis": "yAxis"; "suppressHeader": "suppressHeader"; "suppressLegend": "suppressLegend"; "tooltip": "tooltip"; "dataBuilder": "dataBuilder"; "updateChart": "updateChart"; "showLineCircles": "showLineCircles"; "rotateXAxis": "rotateXAxis"; "showSlider": "showSlider"; "slidePointsCount": "slidePointsCount"; "disallowPadding": "disallowPadding"; "scientificMode": "scientificMode"; "thresholdLine": "thresholdLine"; "legend": "legend"; "series": "series"; }, { "clickChart": "clickChart"; "categoryShow": "categoryShow"; "categoryHide": "categoryHide"; }, never, never>;
}
export {};
