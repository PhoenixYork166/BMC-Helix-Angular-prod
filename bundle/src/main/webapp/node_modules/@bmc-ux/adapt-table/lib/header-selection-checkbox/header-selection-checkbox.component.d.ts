import { FocusMonitor, ListKeyManager } from '@angular/cdk/a11y';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit } from '@angular/core';
import { AdaptDeviceDetectionService, AdaptDropdownAnimationEvent, AdaptDropdownDirective, AdaptListKeyManagerItemDirective, AdaptOverlayService } from '@bmc-ux/adapt-angular';
import { AdaptTableComponent } from '../adapt-table.component';
import { AdaptTableHeaderCheckboxToggleEvent, AdaptTableHeaderCheckboxToggleSource, TableCustomTexts } from '../adapt-table.models';
import * as i0 from "@angular/core";
export declare class AdaptHeaderSelectionCheckboxComponent implements OnInit, AfterViewInit, OnDestroy {
    table: AdaptTableComponent;
    private _focusMonitor;
    private _ngZone;
    private _cdr;
    private _overlayService;
    private _adaptDeviceDetectionService;
    activeItem: AdaptListKeyManagerItemDirective;
    checkboxToggleSource: typeof AdaptTableHeaderCheckboxToggleSource;
    get totalRecords(): number;
    /**
     * If totalRecords was set as null we assume that all other selection related inputs(eg. selectedFilteredRowsCount)
     * was also set as null so can't be used in calculations.
     * But when totalRecords are equal to value length it means that we can use totalRecords in calculations but not selection related inputs(eg. selectedFilteredRowsCount)
     */
    get isAllSelectionInfoAvailable(): boolean;
    texts: TableCustomTexts;
    readonly headerCheckboxToggle: EventEmitter<AdaptTableHeaderCheckboxToggleEvent>;
    headerRowsSelectionDropdownRef: AdaptDropdownDirective;
    headerRowsSelectionDropdownAnchorRef: ElementRef<HTMLDivElement>;
    headerRowsSelectionDropdownMenu: ElementRef<HTMLDivElement>;
    private _listKeyManager;
    private _listKeyManagerDestroy;
    private _destroyed$;
    constructor(table: AdaptTableComponent, _focusMonitor: FocusMonitor, _ngZone: NgZone, _cdr: ChangeDetectorRef, _overlayService: AdaptOverlayService, _adaptDeviceDetectionService: AdaptDeviceDetectionService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    keyManagerStateChange(listKeyManager?: ListKeyManager<AdaptListKeyManagerItemDirective>): void;
    onPopupAnimationDone(event: AdaptDropdownAnimationEvent): void;
    onHeaderRowsSelectionMenuOpen(event: KeyboardEvent | MouseEvent): void;
    onDeselectAllRowsInTable(selectFromKeyboard?: boolean): void;
    onSelectAllRowsOnPage(selectFromKeyboard?: boolean): void;
    onSelectAllRowsInTable(selectFromKeyboard?: boolean): void;
    showHeaderRowsSelectionDD(event: MouseEvent): void;
    hideHeaderRowsSelectionDD(): void;
    getSelectAllItemsOnPageHeaderLabel(): string;
    getSelectAllItemsInTableHeaderLabel(): string;
    getDeselectAllItemsHeaderLabel(): string;
    isIndeterminateState(): boolean;
    isCheckedState(): boolean;
    isAtLeastOneRowSelected(): boolean;
    canDeselectRows(): boolean;
    showSelectionItems(): boolean;
    isChunkSelectionAvailable(): boolean;
    isAllSelectionAvailable(): boolean;
    hasAllItemsDisabledForSelection(): boolean;
    setActiveItem(keyManagerItem: AdaptListKeyManagerItemDirective): void;
    private _getAllSelectableRowsInTable;
    private _getAllSelectableRowsOnPage;
    private _getCurrentPageSelectedRows;
    private _getDisabledSelectedRows;
    private _getDisabledNotSelectedRows;
    private _checkOnDisabledRecords;
    private _toggleRowSelection;
    private _filterSelectedRows;
    private _getGroupSelectionState;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptHeaderSelectionCheckboxComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptHeaderSelectionCheckboxComponent, "adapt-header-selection-checkbox", never, { "texts": "texts"; }, { "headerCheckboxToggle": "headerCheckboxToggle"; }, never, never>;
}
