import { RxSelectOption, SelectTexts, RxSelectSettings } from '@bmc-ux/adapt-angular';
import { AdaptTableComponent } from '../../adapt-table.component';
import { ColumnConfig, FilterMatchMode, PredefinedFilterType, TableCustomTexts } from '../../adapt-table.models';
import { AdaptTableFiltersService } from '../adapt-table-filters.service';
import * as i0 from "@angular/core";
interface AppliedMergedColumnFilter {
    columnField: string;
    value: string;
    header: string;
}
export declare class AdaptTableMergedFiltersComponent {
    table: AdaptTableComponent;
    private _adaptTableFiltersService;
    columns: ColumnConfig[];
    index: number;
    texts: TableCustomTexts;
    constructor(table: AdaptTableComponent, _adaptTableFiltersService: AdaptTableFiltersService);
    getAppliedFiltersForCurrentColumns(columns: ColumnConfig[]): AppliedMergedColumnFilter[];
    onRemoveFilterFormApplied(filter: AppliedMergedColumnFilter): void;
    getDropdownButtonLabel(columns: ColumnConfig[]): string;
    filterName(column: ColumnConfig): PredefinedFilterType;
    isSingleSelect(column: ColumnConfig): boolean;
    setFilter(value: unknown, column: ColumnConfig, matchMode?: FilterMatchMode): void;
    getFilterValue(column: ColumnConfig): unknown | null;
    getFilterValueForSingleSelect(column: ColumnConfig): unknown | null;
    getSelectSettings(column: ColumnConfig): RxSelectSettings;
    getSelectOptions(column: ColumnConfig): RxSelectOption[];
    getSelectTexts(column: ColumnConfig): SelectTexts;
    onSelectModelChange(value: string | string[], column: ColumnConfig): void;
    trackByForSelectOptions(index: number, option: RxSelectOption): string | number;
    trackByForAppliedFilters(index: number, filter: AppliedMergedColumnFilter): string | number;
    selectOptionFormatter(option: RxSelectOption): string;
    private _getFilterOptionsLength;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptTableMergedFiltersComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptTableMergedFiltersComponent, "adapt-table-merged-filters", never, { "columns": "columns"; "index": "index"; "texts": "texts"; }, {}, never, never>;
}
export {};
