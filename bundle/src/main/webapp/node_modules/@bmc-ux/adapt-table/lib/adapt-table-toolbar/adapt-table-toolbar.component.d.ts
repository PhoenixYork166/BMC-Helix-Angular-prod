import { Directionality } from '@angular/cdk/bidi';
import { EventManager } from '@angular/platform-browser';
import { AfterViewInit, ChangeDetectorRef, ElementRef, NgZone, OnDestroy, OnInit, QueryList } from '@angular/core';
import { AdaptDropdownDirective, AdaptFocusMonitorService, AdaptListKeyManagerItemDirective, AdaptRxSearchComponent, ResizeService } from '@bmc-ux/adapt-angular';
import { AdaptTableComponent } from '../adapt-table.component';
import { ColumnConfig, ExportEvent, RowData, TableCustomTexts, ToolbarApi, ToolbarConfig, ToolbarItemsByPriority, ToolbarTexts } from '../adapt-table.models';
import { AdaptTableToolbarItemDirective } from './adapt-table-toolbar-item.directive';
import { ListKeyManagerOption } from '@angular/cdk/a11y';
import { ExportType } from './../adapt-table.models';
import * as i0 from "@angular/core";
export declare class AdaptTableToolbarComponent implements ToolbarApi, OnInit, AfterViewInit, OnDestroy {
    table: AdaptTableComponent;
    focusMonitorService: AdaptFocusMonitorService;
    private resizeService;
    private dir;
    private _ngZone;
    private _eventManager;
    private _cdr;
    HIDDEN_ITEMS_BTN_WIDTH: number;
    TOOLBAR_ITEMS_HIDE_TOLERANCE: number;
    TOOLBAR_ITEMS_BY_PRIORITY: typeof ToolbarItemsByPriority;
    defaultTexts: ToolbarTexts;
    hasHiddenItems: boolean;
    searchFullSize: boolean;
    filterFocus: boolean;
    openHiddenItemsMenu: boolean;
    onlySelectedRowsShown: boolean;
    isRTL: boolean;
    firstRecalculationComplete: boolean;
    /** is used for saving filteredValue while showing selected rows */
    preservedFilteredValue: RowData[];
    preservedTotalRecords: number;
    preservedFirst: number;
    activeDropdownItem: ListKeyManagerOption;
    testID: string;
    searchModel: string;
    exportType: typeof ExportType;
    showExportSelected: boolean;
    config: ToolbarConfig;
    texts: TableCustomTexts;
    filterInput: ElementRef<HTMLInputElement>;
    adaptRxSearchComponent: AdaptRxSearchComponent;
    toolbarContainerEl: ElementRef<HTMLElement>;
    toolbarSectionsSeparatorEl: ElementRef<HTMLElement>;
    toolbarContentSeparatorEl: ElementRef<HTMLElement>;
    toolbarControlsEl: ElementRef<HTMLElement>;
    toolbarContentItems: QueryList<AdaptTableToolbarItemDirective>;
    toolbarDropdownItems: QueryList<AdaptListKeyManagerItemDirective>;
    private toolbarItemsByHidePriority;
    private _destroyed$;
    private _shouldRestoreFocus;
    private _shouldFocusNext;
    constructor(table: AdaptTableComponent, focusMonitorService: AdaptFocusMonitorService, resizeService: ResizeService, dir: Directionality, _ngZone: NgZone, _eventManager: EventManager, _cdr: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    updateToolbarItems(): void;
    /**
     * This method returns not the value of the search model but the value of the search input itself
     * The difference is in case when the model wasn't applied("quickFilterTriggerable"=true and button was not clicked)
     * and you need to take the value of the search and use it somewhere
     * https://github.bmc.com/bmc-ux/adapt-angular/issues/4504
     */
    getQuickFilterInputValue(): string;
    setQuickFilterValue(value: string): void;
    changeColumnVisibility(event: boolean, column: ColumnConfig): void;
    isLastVisibleColumn(currentColumn: ColumnConfig): boolean;
    visibleColumnsFirst(a: ColumnConfig, b: ColumnConfig): number;
    getToolbarText(): string;
    getFromToOfText(): string;
    getFromToText(): string;
    getOutOfRowsShownText(): string;
    getTotalCountText(): string;
    getCurrentRowsCountText(): string;
    checkFullSizeSearchMode(event?: MouseEvent): void;
    getFromRecordsCount(): number;
    getCurrentRowsCount(): number;
    getToRecordsCount(): number;
    getToRecordsCountOrZero(): number;
    showAllSelectedRows(): void;
    updateSelectedRowsDisplaying(goToFirstPage: boolean): void;
    showAllRows(dueToFiltersChange?: boolean): void;
    showSelectionLimitText(from: number): string;
    getClassForChangeVisibilityButton(isHidden: boolean): string;
    refreshButtonClick(event: MouseEvent): void;
    popupAnimationDone(dropdown: AdaptDropdownDirective, toolbarItemType: ToolbarItemsByPriority): void;
    anchorKeydownHandler(event: KeyboardEvent, dropdown: AdaptDropdownDirective): void;
    handleDropdownMenuKeydown(event: KeyboardEvent, toolbarItemType: ToolbarItemsByPriority, dropdown: AdaptDropdownDirective): void;
    closeMenuOnKeydown(event: KeyboardEvent, dropdown: AdaptDropdownDirective): void;
    set shouldRestoreFocus(value: boolean);
    get shouldRestoreFocus(): boolean;
    set shouldFocusNext(value: boolean);
    get shouldFocusNext(): boolean;
    selectOption(optionToSelect: ListKeyManagerOption): void;
    isActiveDescendant(keyManagerItem: AdaptListKeyManagerItemDirective): boolean;
    exportAs(event: ExportEvent): void;
    private changeVisibility;
    private getToolbarItemsByHidePriority;
    private recalculateToolbarItemsVisibility;
    private getTotalRecords;
    private getTotalRecordsOrZero;
    private initFocusMonitor;
    private connectKeydownWithFocusMonitor;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptTableToolbarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptTableToolbarComponent, "adapt-table-toolbar", never, { "config": "config"; "texts": "texts"; }, {}, never, never>;
}
