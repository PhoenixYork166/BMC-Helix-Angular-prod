import { TemplateRef } from '@angular/core';
import { AdaptDataDirective } from './shared/adapt-data-directive';
import { FilterMetadata, SortMeta } from 'primeng/api';
import { KeyValueObject, ValueOrFunc2, ValueOrFunc1, StylesObject, TooltipValue, RxSelectOption, SelectTexts, RxSelectSettings, AdaptDropdownDirective, AdaptFocusMonitorService } from '@bmc-ux/adapt-angular';
import { CdkDragDrop, CdkDragEnd, CdkDragRelease, CdkDragStart } from '@angular/cdk/drag-drop';
export declare abstract class AdaptTableFilters {
    static readonly SELECT_FILTER: PredefinedFilterType;
    static readonly TEXT_FILTER: PredefinedFilterType;
    static readonly DEFAULT_FILTER: PredefinedFilterType;
}
/**
 * Allowed filter types.
 * "selectFilter" - will render a select dropdown
 * "textFilter" - will render a text input
 */
export declare type PredefinedFilterType = 'selectFilter' | 'textFilter';
/**
 * Describes data associated with a [dataKey]
 */
export declare type PrimaryKey = string | number;
/**
 * Table [value] representation for non group case
 */
export declare type RowDataItem = KeyValueObject;
/**
 * Table [value] representation for group and non group cases
 */
export declare type RowData<TModel = RowDataItem> = TModel | GroupedRowData<TModel>;
/**
 * Represents the data from "adaptData" directive
 */
export declare type AdaptTableCellData = AdaptDataDirective<DataCellDirectiveParams, HTMLTableDataCellElement>;
/**
 * Allowed variants to align table pagination
 */
export declare type AdaptPaginatorAlign = 'left' | 'right';
export declare type RowActionParams<T = RowDataItem> = DataCellTemplateParams<T>;
export declare type DataCellTooltipParams<T = RowDataItem> = DataCellTemplateParams<T>;
export declare type DataCellCustomClass<T = RowDataItem> = DataCellTemplateParams<T>;
export declare type DataCellCustomStyle<T = RowDataItem> = DataCellTemplateParams<T>;
/**
 * The visibility priority of toolbar parts.
 * It is used to control which toolbar part will be hidden to the dropdown first in case there is no space for all of them.
 * The lowest number will be hidden last.
 */
export declare enum ToolbarItemsByPriority {
    /**
     * Global table search input
     */
    SEARCH = 0,
    /**
     * Selection limit that is based on "selectionLimit" property from the "ToolbarConfig"
     */
    SELECTION_LIMIT = 1,
    /**
     * Counter text(ex. "Records from 1 to 10 of 23")
     */
    COUNTER = 2,
    /**
     * Refresh button
     */
    REFRESH = 3,
    /**
     * Columns visibility control
     */
    VISIBLE_COLUMNS = 4,
    /**
     * Section for the custom filter(eg. for Advanced filter controlled by customer)
     */
    FILTER = 5,
    /**
     * Section for the custom filtering results
     */
    FILTER_RESULTS = 6,
    /**
     * Custom section from the left side
     */
    LEFT_CUSTOM = 7,
    /**
     * Custom section from the right side
     */
    RIGHT_CUSTOM = 8,
    /**
     * Export control
     */
    EXPORT = 9
}
/**
 * Possible variants for the checkbox selection state
 */
export declare enum CheckboxState {
    /**
     * Row is not selected
     */
    Unselected = 0,
    /**
     * Row is selected
     */
    Selected = 1,
    /**
     * Some rows are selected. This is used to show the selection state of the group or table itself
     */
    Indeterminate = 2
}
/**
 * Represents the event source type for the [lazy] table
 * Can be useful to differentiate between the event source inside (onLazyLoad) to provide different behavior
 */
export declare enum AdaptTableEventSource {
    /**
     * Triggered when the lazy load is triggered on initialization. Depending on the "lazyLoadOnInit" property
     */
    LazyOnInit = "lazyOnInit",
    /**
     * Triggered when single sorting is happening
     */
    SingleSortChange = "singleSortChange",
    /**
     * Triggered when multi sorting is happening
     */
    MultipleSortChange = "multipleSortChange",
    /**
     * Triggered when filtering is happening
     */
    FilterChange = "filterChange",
    /**
     * @deprecated Not used anymore
     */
    VirtualScroll = "virtualScroll",
    /**
     * Triggered when the page is changed
     */
    PageChange = "pageChange",
    /**
     * Triggered when table "resetting"
     */
    Reset = "reset",
    /**
     * Triggered when the table data can be loaded(ex. when user scrolls to the bottom of the table)
     */
    LoadMore = "loadMore",
    /**
     * Triggered when the table is refreshing(ex. user click on the toolbar refresh button)
     */
    Refresh = "refresh"
}
export declare enum FilterMatchMode {
    /**
     * Check that the data is starts with the filter value
     */
    startsWith = "startsWith",
    /**
     * Check that the data contains filter value
     */
    contains = "contains",
    /**
     * Check that the data is ends with the filter value
     */
    endsWith = "endsWith",
    /**
     * Check that the data is equal to the filter value
     * For the "date" type data comparing by the "getTime" method
     * For all other types comparing by the "toString" method
     */
    equals = "equals",
    /**
     * Check that the data is not equal to the filter value
     * Opposite to "equals"
     */
    notEquals = "notEquals",
    /**
     * Check that the data array contains the filter value by applying "equals" comparison from https://github.com/primefaces/primeng/blob/master/src/app/components/utils/objectutils.ts
     */
    in = "in",
    /**
     * Check that the data is lower than the filter value
     */
    lt = "lt",
    /**
     * Check that the data is lower than or equal to the filter value
     */
    lte = "lte",
    /**
     * Check that the data is greater than the filter value
     */
    gt = "gt",
    /**
     * Check that the data is greater than or equal to the filter value
     */
    gte = "gte"
}
/**
 * Represents allowed sorting directions
 */
export declare enum SortOrder {
    /**
     * Sort in ascending order
     */
    Asc = 1,
    /**
     * Sort in descending order
     */
    Desc = -1
}
/**
 * Represents allowed storage types
 */
export declare enum StorageType {
    /**
     * Local storage
     */
    Local = "local",
    /**
     * Session storage
     */
    Session = "session"
}
/**
 * Represents allowed sorting modes
 */
export declare enum SortMode {
    /**
     * Sort by single column
     */
    Single = "single",
    /**
     * Sort by multiple columns
     */
    Multiple = "multiple"
}
/**
 * Represents allowed column resize modes
 */
export declare enum ResizeMode {
    /**
     * Change only width of 2 sibling columns by increasing one column and decreasing the other one
     */
    Fit = "fit",
    /**
     * Change width of one column only and also increase the width of the table itself
     */
    Expand = "expand"
}
/**
 * Represents allowed column resize directions
 */
export declare enum ResizeDirection {
    /**
     * Resize column to the left
     */
    Left = "left",
    /**
     * Resize column to the right
     */
    Right = "right"
}
/**
 * List of html classes used in the table.
 *
 * Please be aware that class names can be changed so can't be used as constants while interacting with the table template
 */
export declare enum AdaptTableClasses {
    /**
     * Always applied to the table host element(<adapt-table>)
     */
    Main = "adapt-grid",
    /**
     * Always applied to the table host element(<adapt-table>)
     */
    AdaptTable = "adapt-table",
    /**
     * Applied to the table host element(<adapt-table>) when the table has border, [bordered] is set to true
     */
    Bordered = "adapt-grid-bordered",
    /**
     * Applied to the table host element(<adapt-table>) when the table pagination is enabled, [paginator] is set to true
     */
    Pageable = "adapt-table-pageable",
    /**
     * Applied to the table host element(<adapt-table>) when the table has scrollable body, [scrollable] is set to true
     */
    Scrollable = "adapt-table-scrollable",
    /**
     * Applied to the table host element(<adapt-table>) when the table has striped rows, [striped] is set to true
     */
    Striped = "adapt-table--striped",
    /**
     * Applied to the table host element(<adapt-table>) when the table is empty, [value] is null or an empty array
     */
    IsEmptyState = "adapt-table--empty-state",
    /**
     * Applied to the table host element(<adapt-table>) when the table has no scrollable body, [scrollable] is set to false
     */
    NotScrollable = "adapt-table-not-scrollable",
    /**
     * ???
     */
    HasNotVerticalBodyOverflow = "adapt-table--has-not-overflow",
    /**
     * Applied to the table host element(<adapt-table>) when the table loading state is true, [loading] is set to true
     */
    LoadingFullTable = "adapt-grid--loading",
    /**
     * Applied to the table cell element for the column with actions
     */
    ActionsCell = "at-actions-cell",
    /**
     * Applied to the table cell element if column is editable
     */
    EditingCell = "at-cell--editing",
    /**
     * Always applied to the table element inside the table header element
     */
    HeaderContainer = "c-header-container",
    /**
     * Always applied to the table element inside the table header element
     */
    HeaderTitle = "c-header__title",
    /**
     * Always applied to the table header element
     */
    HeaderDataCell = "at-header-data-cell",
    /**
     * Always applied for scrollable body table parent container (in non-virtual scroll mode)
     */
    TableScrollableBody = "ui-table-scrollable-body",
    /**
     * Always applied for "cdk-virtual-scroll-viewport" (in virtual scroll mode)
     */
    TableVirtualScrollableBody = "ui-table-virtual-scrollable-body",
    /**
     * Always applied for scrollable header table parent container (in both modes, virtual scroll and non-virtual scroll)
     */
    TableScrollableHeader = "ui-table-scrollable-header",
    /**
     * Always applied for scrollable footer table parent container (in both modes, virtual scroll and non-virtual scroll)
     */
    TableScrollableFooter = "ui-table-scrollable-footer",
    /**
     * Always applied for scrollable body table element (in both modes, virtual scroll and non-virtual scroll)
     */
    TableScrollableBodyTable = "ui-table-scrollable-body-table",
    /**
     * Always applied for scrollable header table element (in both modes, virtual scroll and non-virtual scroll)
     */
    TableScrollableHeaderTable = "ui-table-scrollable-header-table",
    /**
     * Always applied for scrollable footer table element (in both modes, virtual scroll and non-virtual scroll)
     */
    TableScrollableFooterTable = "ui-table-scrollable-footer-table"
}
/**
 * Represent if the column merged with other column or not
 */
export declare enum RenderingColumnType {
    /**
     * The column is not merged with other column
     */
    Simple = 1,
    /**
     * The column is merged with other column
     */
    Merged = 2
}
export declare enum AdaptTableHeaderCheckboxToggleSource {
    /**
     * The source of the event is "Select all" item
     */
    SelectAll = "selectAll",
    /**
     * The source of the event is "Deselect all" item
     */
    DeselectAll = "deselectAll",
    /**
     * The source of the event is "Select on page" item
     */
    SelectOnPage = "selectOnPage",
    /**
     * @deprecated since 12.18.0
     * Not used anymore
     */
    SelectVisible = "selectVisible"
}
/**
 * @deprecated since 12.18.0
 * Not used anymore
 */
export declare enum AdaptTableSelectionMachineState {
    unselected = "unselected",
    selected = "selected",
    indeterminate = "indeterminate"
}
/**
 * Allowed values for the [headerSelectionMode] input
 */
export declare enum AdaptTableHeaderSelectionMode {
    /**
     * Allows to use both type of selection: "Select on page" and "Select all in table"
     */
    Both = "both",
    /**
     * Allows to use only "Select on page" type of selection
     */
    Chunk = "chunk",
    /**
     * Allows to use only "Select all in table" type of selection
     */
    All = "all"
}
/**
 * Allowed export formats
 */
export declare enum ExportType {
    /**
     * Export to CSV format
     */
    CSV = "CSV",
    /**
     * Export to PDF format
     */
    PDF = "PDF"
}
/**
 * Represents state of toolbar item
 */
export interface ToolbarItemContext {
    /**
     * Toolbar item visibility
     */
    hidden: boolean;
    /**
     * Toolbar item collapsed state
     */
    collapsed: boolean;
}
/**
 * Event type for the (export) Output
 */
export interface ExportEvent {
    /**
     * Export type format
     */
    type: ExportType;
    /**
     * Shows that only selected rows should be exported if set to true
     */
    selectionOnly?: boolean;
}
export interface ExportTypeConfig {
    /**
     * Export type format
     */
    type: ExportType;
}
export interface ExportConfig {
    /**
     * List of allowed export formats
     */
    exportTypes: ExportTypeConfig[];
    /**
     * Shows "Export only selected" menu if set to true
     */
    showExportForSelected?: boolean;
    /**
     * ???
     */
    exportSectionFixed?: boolean;
}
/**
 * Toolbar configuration for [toolbarConfig] input
 */
export interface ToolbarConfig {
    /**
     * Show/Hide toolbar refresh button
     */
    refreshButton?: boolean;
    /**
     * Show/Hide toolbar counter text(ex. "Records from 1 to 10 of 23")
     */
    counter?: boolean;
    /**
     * Custom template for toolbar counter text
     */
    counterTemplate?: TemplateRef<ImplicitTemplateParams<ToolbarItemContext>>;
    /**
     * Show/Hide toolbar search input
     */
    quickFilter?: boolean;
    /**
     * Use explicit search button
     */
    quickFilterTriggerable?: boolean;
    /**
     * @deprecated since 12.18.0
     * Not used anymore
     */
    explicitSearchBtn?: boolean;
    /**
     * Show/Hide toolbar export control
     */
    export?: ExportConfig;
    /**
     * Match mode for the toolbar search
     */
    quickFilterMatchMode?: string;
    /**
     * Show/Hide custom filter section(eg. for Advanced filter controlled by customer)
     */
    filter?: boolean;
    /**
     * Custom template for toolbar filter section
     */
    filterTemplate?: TemplateRef<ImplicitTemplateParams<ToolbarItemContext>>;
    /**
     * Show/Hide toolbar filter results section
     */
    filterResults?: boolean;
    /**
     * Custom template for toolbar filter results section
     */
    filterResultsTemplate?: TemplateRef<ImplicitTemplateParams<ToolbarItemContext>>;
    /**
     * Show/Hide toolbar section on the left side
     */
    leftCustomSection?: boolean;
    /**
     * ???
     */
    leftCustomSectionFixed?: boolean;
    /**
     * Custom template for toolbar section on the left side
     */
    leftCustomSectionTemplate?: TemplateRef<ImplicitTemplateParams<ToolbarItemContext>>;
    /**
     * Show/Hide toolbar section on the right side
     */
    rightCustomSection?: boolean;
    /**
     * ???
     */
    rightCustomSectionFixed?: boolean;
    /**
     * Custom template for toolbar section on the right side
     */
    rightCustomSectionTemplate?: TemplateRef<ImplicitTemplateParams<ToolbarItemContext>>;
    /**
     * Show/Hide toolbar visibility control
     */
    visibleColumnsMenu?: boolean;
    /**
     * Custom template for toolbar visibility control
     */
    visibleColumnsMenuTemplate?: TemplateRef<ImplicitTemplateParams<ToolbarItemContext>>;
    /**
     * Show/Hide toolbar column selection limit, will be hidden if set to 0 or null
     */
    selectionLimit?: number;
    /**
     * Test ID attribute that is used on several toolbar html elements. Useful for automated tests
     */
    testID?: string;
}
/**
 * Toolbar public API
 */
export interface ToolbarApi {
    /**
     * Method can be useful in case customer needs to recalculate toolbar items visibility manualy
     */
    updateToolbarItems: () => void;
    /**
     * Method returns not the value of the global search model but the value of the global search input itself
     * The difference is in case when the model wasn't applied("quickFilterTriggerable"=true and button was not clicked)
     * and you need to take the value of the search and use it somewhere
     */
    getQuickFilterInputValue: () => string;
    /**
     * Method can be useful when you need manually update the value of the global search
     * @since 12.20.0
     */
    setQuickFilterValue: (value: string) => void;
}
export interface ToolbarPopupAnimationDoneEvent {
    /**
     * Dropdown instance on which the animation is done.
     * @since 12.18.0
     */
    dropdown: AdaptDropdownDirective;
    /**
     * FocusMonitorService instance. This can be used to handle keyboard navigation for custom template
     * @since 12.18.0
     */
    focusMonitorService: AdaptFocusMonitorService;
}
export interface GroupedRowData<TModel = RowDataItem> {
    /**
     * ???
     */
    groupValue: any;
    /**
     * Analog of "ColumnConfig.field" property for the grouped data
     */
    groupField: string;
    /**
     * Grouped data
     */
    items: RowData<TModel>[];
    /**
     * Title for the group row, if not passed "groupValue" is used instead.
     * Can be useful when group titles should be uniq
     *
     * @since 11.15.0
     * */
    groupTitle?: string;
}
/**
 * Represents expansion state of the groups
 * @docs-default {}
 */
export interface ExpandedGroupKeys {
    /**
     * The key of the group is "GroupedRowData.groupField"
     */
    [field: string]: KeyValueObject;
}
export interface RenderingGroupedRowData<TModel = RowDataItem> {
    /**
     * Table [value] representation for group and non group cases
     */
    rowData: RowData<TModel>;
    /**
     * The nesting level of the group or the row
     */
    nestingLevel: number;
    /**
     * Represent if row is a group or not
     */
    isGroup: boolean;
    /**
     * ???
     */
    rowIndexForRootGroup: number;
    /**
     * Show if row is in "editing" state at the moment
     */
    editing: boolean;
    /**
     * Show if group is expanded or not
     */
    groupExpanded: boolean;
    /**
     * Show if row is expanded or not
     */
    rowExpanded: boolean;
    /**
     * ???
     */
    hidden?: boolean;
}
export interface LazyLoadEvent {
    /**
     * Represents the event source type for the [lazy] table
     * Can be useful to differentiate between the event source inside (onLazyLoad) to provide different behavior
     */
    eventSource: AdaptTableEventSource;
    /**
     * First row offset
     */
    first?: number;
    /**
     * Number of rows per page
     */
    rows?: number;
    /**
     * Field name to sort in single sort mode
     */
    sortField?: string;
    /**
     * Sort order as number, 1 for asc and -1 for dec in single sort mode
     */
    sortOrder?: number;
    /**
     * An array of SortMeta objects used in multiple columns sorting.
     * Each SortMeta has field and order properties
     */
    multiSortMeta?: SortMeta[];
    /**
     * Filters object having field as key and filter value, filter matchMode as value
     */
    filters?: {
        [s: string]: FilterMetadata;
    };
    /**
     *  Value of the global filter if available
     */
    globalFilter?: any;
}
export interface AdaptLazyLoadEvent extends LazyLoadEvent {
    /**
     * If true means that table still has some data that can be loaded
     */
    loadMore: boolean;
    /**
     * Represents the number of already loaded rows
     */
    infiniteScrollingFirst: number;
}
export interface RowActionConfig {
    /**
     * Action title
     */
    title: ValueOrFunc2<string, RowActionParams>;
    /**
     * Action enabled/disabled state
     */
    disabled?: ValueOrFunc2<boolean, RowActionParams>;
    /**
     * Action visibility state
     */
    hidden?: ValueOrFunc2<boolean, RowActionParams>;
    /**
     * The call back function that will be called when the action is clicked
     */
    action: ((params: RowActionParams) => void);
    /**
     * Action icon(html class from the dpl icons)
     */
    icon?: string;
}
export interface ColumnActionsConfig {
    /**
     * Action button title
     */
    buttonName?: string;
    /**
     * Action button enabled/disabled state
     */
    disabled?: ValueOrFunc2<boolean, RowActionParams>;
    /**
     * Action button visibility state
     */
    hidden?: ValueOrFunc2<boolean, RowActionParams>;
    /**
     * List of actions
     */
    actions: RowActionConfig[];
    /**
     * Special buttons that will be shown on "edit" action
     */
    enableRowEditingButtons?: boolean;
}
export interface BaseFilterParams {
    /**
     * Represents different match modes for the filtering.
     * Each mode has own implementation.
     * Detailed implementation can be found here - https://github.com/primefaces/primeng/blob/master/src/app/components/api/filterservice.ts
     */
    matchMode?: FilterMatchMode;
    /**
     * Custom filter params
     */
    [key: string]: unknown;
}
export interface SelectFilterCallbacks {
    /**
     * Callback will be fired on filter select when its selected items length is reached the limit
     */
    selectionLimitReached?: Function;
    /**
     * Callback will be fired on filter select when its dropdown closed
     */
    dropdownClosed?: Function;
    /**
     * Callback will be fired on filter select when its dropdown closed
     */
    dropdownOpened?: Function;
    /**
     * Callback will be fired on filter select when its model value changed
     */
    modelArrayChanged?: Function;
    /**
     * Callback will be fired on filter select when its filter value changed
     */
    filterValueChanged?: Function;
}
/**
 * This interface will be changed soon
 * @deprecated Will be deprecated from v12.0, use NewSelectFilterParams instead
 */
export interface SelectFilterParams extends BaseFilterParams {
    /**
     * @deprecated Will be deprecated from v12.0, use NewSelectFilterParams instead
     */
    single?: boolean;
    /**
     * @deprecated Will be deprecated from v12.0, use NewSelectFilterParams instead
     */
    values: (string | RxSelectOption)[];
    /**
     * @deprecated Will be deprecated from v12.0, use NewSelectFilterParams instead
     */
    selectSettings?: RxSelectSettings;
    /**
     * @deprecated Will be deprecated from v12.0, use NewSelectFilterParams instead
     */
    selectTexts?: SelectTexts;
    /**
     * @deprecated Will be deprecated from v12.0, use NewSelectFilterParams instead
     */
    callbacks?: SelectFilterCallbacks;
}
export interface NewSelectFilterParams extends BaseFilterParams {
    /**
     * Configuration of the AdaptRxSelectComponent(inputs that will be applied to the select component)
     */
    selectSettings?: RxSelectSettings;
    /**
     * Toggle single/multiple selection
     */
    single?: boolean;
    /**
     * List of select options
     */
    values: (string | RxSelectOption)[];
    /**
     * Select translations
     */
    selectTexts?: SelectTexts;
    /**
     * Callbacks that will be fired in different cases
     */
    callbacks?: SelectFilterCallbacks;
}
/**
 * Used to configure table columns
 */
export interface ColumnConfig {
    /**
     * Column identifier
     */
    field: string;
    /**
     * Column title
     */
    header?: string;
    /**
     * Column width
     */
    width?: string;
    /**
     * Column minimal width value in pixels. 45px by default if not passed
     *
     * @since 12.23.0
     */
    minWidth?: ValueOrFunc1<`${number}px`>;
    /**
     * Used to control the visibility of the column
     */
    hidden?: ValueOrFunc1<boolean>;
    /**
     * Custom body cell template
     */
    cellTemplate?: TemplateRef<DataCellTemplateParams>;
    /**
     * Custom template for cell editing
     */
    editTemplate?: TemplateRef<DataCellTemplateParams>;
    /**
     * Custom template for header filtering
     */
    filterTemplate?: TemplateRef<FilterTemplateParams>;
    /**
     * Custom template for header title
     */
    headerTitleTemplate?: TemplateRef<ColumnHeaderTemplateParams>;
    /**
     * Tooltip value for the body cell
     */
    cellTooltip?: ValueOrFunc2<TooltipValue | false, DataCellTooltipParams>;
    /**
     * Tooltip value for the header cell
     */
    headerTooltip?: ValueOrFunc1<TooltipValue | false>;
    /**
     * Custom class for the body cell
     */
    dataCellClass?: ValueOrFunc2<string, DataCellCustomClass>;
    /**
     * Custom styles for the header cell
     */
    dataCellStyle?: ValueOrFunc2<StylesObject, DataCellCustomStyle>;
    /**
     * Custom class for the header cell
     */
    headerClass?: ValueOrFunc1<string>;
    /**
     * Configure ability to sort per column
     */
    sortable?: boolean;
    /**
     * Make column editable or not
     */
    editable?: boolean;
    /**
     * Show/hide column header filter
     */
    filterable?: boolean;
    /**
     * Configure header filter type
     */
    filterName?: PredefinedFilterType;
    /**
     * Configure header filter params
     */
    filterParams?: BaseFilterParams | SelectFilterParams | NewSelectFilterParams;
    /**
     * Configure actions column
     */
    actionsConfig?: ColumnActionsConfig;
    /**
     * The "test-id" attribute that will be applied on the column header. Useful for automated testing
     */
    testId?: string;
    /**
     * ???
     */
    columnAdaptID?: number | string;
    /**
     * Mark column as "exportable" so it can be filtered while exporting
     */
    exportable?: boolean;
    /**
     * Used to mark column as "frozen" so it becomes sticky from the left(right in RTL mode) side
     *
     * All built-in columns(selection, dragging, etc.) are also become sticky if there are at least one sticky column
     * Sticky columns can't be reordered and resized. The width of the column is set by ColumnConfig.width property
     *
     * @since 12.21.0
     */
    frozen?: ValueOrFunc1<boolean>;
}
export interface FilterTemplateParams {
    /**
     * Current column configuration
     */
    column: ColumnConfig;
    /**
     * Current column index
     */
    index: number;
}
/**
 * Extends "FilterTemplateParams"
 */
export interface ColumnHeaderTemplateParams extends FilterTemplateParams {
}
export interface ImplicitTemplateParams<T> {
    /**
     * You can define local variable on ng-template through let-name
     *
     * When angular creates template by calling createEmbeddedView it can also pass context that will be used inside ng-template
     *
     * Using the key $implicit in the context object will set it's value as default.
     */
    $implicit: T;
}
/**
 * @deprecated since 8.10.0 use DataCellTemplateParams that are applied for ColumnConfig.cellTemplate instead
 */
export interface DataColumnsDataCellsTemplateParams {
    columns: ColumnConfig[];
    renderRowData: RenderingGroupedRowData;
    rowIndex: number;
}
/**
 * Extends "ImplicitTemplateParams<RenderingGroupedRowData>"
 */
export interface GroupValueDataCellTemplateParams extends ImplicitTemplateParams<RenderingGroupedRowData> {
}
export interface DataRowDirectiveParams<T = RowDataItem> {
    /**
     * Row item
     */
    dataItem: T;
    /**
     * Row index
     */
    rowIndex: number;
    /**
     * Row expanded state
     */
    expanded: boolean;
    /**
     * Row editing state
     */
    editing: boolean;
}
export interface HeaderDataCellDirectiveParams {
    /**
     * Current column configuration for not merged column
     */
    column: ColumnConfig;
    /**
     * Current columns configuration for merged columns
     */
    renderingColumn: RenderingColumnConfig;
    /**
     * Current column index
     */
    index: number;
}
export interface DataCellDirectiveParams<T = RowDataItem> extends DataRowDirectiveParams<T> {
    /**
     * Current column configuration for not merged column
     */
    column: ColumnConfig;
    /**
     * Current columns configuration for merged columns
     */
    renderingColumn: RenderingColumnConfig;
}
export interface GroupSelectionEvent<TModel = RowDataItem> {
    /**
     * Group items where selection state was changed
     */
    groupedRowData: GroupedRowData<TModel>;
    /**
     * Group selection state
     */
    selected: boolean;
}
export interface AllGroupedRowsSelectionEvent<TModel = RowDataItem> {
    /**
     * List of rows in grouped table where selection state was changed
     */
    rowsData: RowData<TModel>;
    /**
     * Selection state
     */
    selected: boolean;
}
export interface GroupExpansionEvent<TModel = RowDataItem> {
    /**
     * Group items where expansion state was changed
     */
    groupedRowData: GroupedRowData<TModel>;
    /**
     * Group expansion state
     */
    expanded: boolean;
}
/**
 * @deprecated since 8.24.0
 * Not used anymore
 */
export interface AdaptRowReorderEvent<TModel = RowDataItem> {
    /**
     * Event emitted when the user drops a draggable item inside a drop container
     * @deprecated since 8.24.0
     * Not used anymore
     */
    cdkDragDropEvent: CdkDragDrop<RowData<TModel>[]>;
}
export interface AdaptRowDragStartedEvent {
    /**
     * Event emitted when the user starts dragging a draggable
     * More information: https://material.angular.io/cdk/drag-drop/api#CdkDragStart
     */
    cdkDragStartEvent: CdkDragStart;
}
export interface AdaptRowDragReleaseEvent {
    /**
     * Event emitted when the user releases an item, before any animations have started
     * More information: https://material.angular.io/cdk/drag-drop/api#CdkDragRelease
     */
    cdkDragReleaseEvent: CdkDragRelease;
}
export interface AdaptRowDragEndEvent {
    /**
     * Event emitted when the user stops dragging a draggable
     * More information: https://material.angular.io/cdk/drag-drop/api#CdkDragEnd
     */
    cdkDragEndEvent: CdkDragEnd;
}
export interface AdaptDragDropEvent<TModel = RowDataItem> {
    /**
     * Event emitted when the user drops a draggable item inside a drop container
     * More information: https://material.angular.io/cdk/drag-drop/api#CdkDragDrop
     */
    cdkDragDropEvent: CdkDragDrop<RowData<TModel>[]>;
}
export interface ExpandedRowTemplateParams<T = RowDataItem> {
    /**
     * Current row item
     */
    dataItem: T;
    /**
     * Current row index
     */
    rowIndex: number;
    /**
     * Columns configuration
     */
    columns: ColumnConfig[];
}
export interface TableBodyTemplateParams<T = RenderingGroupedRowData> extends ImplicitTemplateParams<T> {
    /**
     * Current row index
     */
    rowIndex: number;
    /**
     * Columns configuration
     */
    columns: ColumnConfig[];
    /**
     * Current row editing state
     */
    editing?: boolean;
    /**
     * Current row expanded state
     */
    expanded?: boolean;
}
export interface DataCellTemplateParams<T = RowDataItem> {
    /**
     * Current row item
     */
    dataItem: T;
    /**
     * Current row index
     */
    rowIndex: number;
    /**
     * Columns configuration
     */
    column: ColumnConfig;
    /**
     * Current row expanded state
     */
    expanded: boolean;
    /**
     * Current row editing state
     */
    editing: boolean;
}
export interface CurrentEditingRow<T = RowDataItem> {
    /**
     * Shallow copy, {...dataItem}
     */
    editingDataItem: T;
    /**
     * Shallow copy, {...dataItem}
     */
    originalDataItem: T;
    /**
     * Reference to the row
     */
    dataItemReference: T;
}
export interface SaveRowEvent {
    /**
     * Represents the edited row state
     */
    editingRow: CurrentEditingRow;
}
/**
 * Extends "TableTexts", "PaginationTexts", "ToolbarTexts", "FiltersTexts", "HeaderCellMenuTexts"
 *
 * All properties will be moved directly to the "TableCustomTexts" interface after
 * "TableTexts", "PaginationTexts", "ToolbarTexts", "FiltersTexts", "HeaderCellMenuTexts" will be removed
 */
export interface TableCustomTexts extends TableTexts, PaginationTexts, ToolbarTexts, FiltersTexts, HeaderCellMenuTexts {
}
/**
 * @deprecated from v8.26.1 Use 'TableCustomTexts' instead
 */
export interface PaginationTexts {
    /**
     * Text for the button in the paginator tooltip where user can change the page number
     */
    goBtnText?: string;
    /**
     * Text for the input placeholder in the paginator tooltip where user can type the page number
     */
    pageNumberText?: string;
    /**
     * Text for the control label where user changes amount of rows visible per page
     */
    recordsPerPage?: string;
    /**
     * Text for the "Previous" button in the paginator, used for accessibility
     */
    prevPageBtnText?: string;
    /**
     * Text for the "Next" button in the paginator, used for accessibility
     */
    nextPageBtnText?: string;
}
/**
 * @deprecated from v8.26.1 Use 'TableCustomTexts' instead
 */
export interface TableTexts {
    /**
     * The text for the [label] input of the empty state component(AdaptEmptyStateComponent)
     */
    emptyStateLabelText?: string;
    /**
     * The text for the [label] input of the empty state component(AdaptEmptyStateComponent) if table is in filtering state
     */
    emptyStateWithFilterLabelText?: string;
    /**
     * The default text for the action button in the table row
     */
    actionButtonDefaultLabel?: string;
    /**
     * Text that describe the unselecting button in "selectionLimit" functionality
     */
    unselectAllSelectedTitle?: string;
    /**
     * Text for the "save editing row" button
     */
    saveRowEditingButtonLabel?: string;
    /**
     * Text for the "cancel editing row" button
     */
    cancelRowEditingButtonLabel?: string;
    /**
     * Text that is passed to [ariaLabel] input of the header selection checkbox(AdaptRxCheckboxComponent)
     */
    headerSelectRowsArialLabel?: string;
    /**
     * Text for the row "expand" button when its state is collapsed
     */
    expandRowText?: string;
    /**
     * Text for the row "expand" button when its state is expanded
     */
    collapseRowText?: string;
    /**
     * Text for the item in header selection menu that is used to select all rows on page
     */
    selectAllItemsOnPageHeaderLabel?: string;
    /**
     * Text for the item in header selection menu that is used to select all rows on page in filtering state
     */
    selectAllFilteredItemsOnPageHeaderLabel?: string;
    /**
     * Text for the item in header selection menu that is used to select only allowed for selection rows on page
     */
    selectAllPossibleItemsOnPageHeaderLabel?: string;
    /**
     * Text for the item in header selection menu that is used to select only allowed for selection rows on page in filtering state
     */
    selectAllPossibleFilteredItemsOnPageHeaderLabel?: string;
    /**
     * Text for the item in header selection menu that is used to select all visible(loaded) rows in table
     */
    selectAllVisibleItemsHeaderLabel?: string;
    /**
     * Text for the item in header selection menu that is used to select all visible(loaded) rows in table in filtering state
     */
    selectAllFilteredVisibleItemsHeaderLabel?: string;
    /**
     * Text for the item in header selection menu that is used to select all visible(loaded) and allowed for selection rows in table
     */
    selectAllPossibleVisibleItemsHeaderLabel?: string;
    /**
     * Text for the item in header selection menu that is used to select all visible(loaded) and allowed for selection rows in table in filtering state
     */
    selectAllPossibleFilteredVisibleItemsHeaderLabel?: string;
    /**
     * Text for the item in header selection menu that is used to select all rows in table
     */
    selectAllItemsInTableHeaderLabel?: string;
    /**
     * Text for the item in header selection menu that is used to select all rows in table if total records information is unknown
     */
    selectAllItemsInTableHeaderLabelForUnknownTotalRecords?: string;
    /**
     * Text for the item in header selection menu that is used to select all rows in table in filtering state
     */
    selectAllFilteredItemsInTableHeaderLabel?: string;
    /**
     * Text for the item in header selection menu that is used to select all allowed for selection rows in table
     */
    selectAllPossibleItemsInTableHeaderLabel?: string;
    /**
     * Text for the item in header selection menu that is used to select all allowed for selection rows in table in filtering state
     */
    selectAllPossibleFilteredItemsInTableHeaderLabel?: string;
    /**
     * Text for the item in header selection menu that is used to deselect all rows in table
     */
    deselectAllItemsInTableHeaderLabel?: string;
    /**
     * Text for the item in header selection menu that is used to deselect all rows in table in filtering state
     */
    deselectAllFilteredItemsInTableHeaderLabel?: string;
    /**
     * Text for the item in header selection menu that is used to deselect all allowed for deselection rows in table
     */
    deselectAllPossibleItemsInTableHeaderLabel?: string;
    /**
     * Text for the item in header selection menu that is used to deselect all allowed for deselection rows in table in filtering state
     */
    deselectAllPossibleFilteredItemsInTableHeaderLabel?: string;
}
/**
 * @deprecated from v8.26.1 Use 'TableCustomTexts' instead
 */
export interface ToolbarTexts {
    /**
     * Represents the text in the table toolbar that describes current rows for pagination state(eg. Records from {fromRecords} to {toRecords} of {totalRecords})
     */
    fromToOfTextTemplate?: string;
    /**
     * Represents the text in the table toolbar that describes current rows for pagination state if total records information is unknown(eg. Records from {fromRecords} to {toRecords})
     */
    fromToTextTemplate?: string;
    /**
     * Represents the text in the table toolbar that describes current rows for non-pagination and non-infinite scroll state for non-plural value(eg. {totalRecords} row total)
     */
    totalCountTextTemplate?: string;
    /**
     * Represents the text in the table toolbar that describes current rows for non-pagination and non-infinite scroll state for plural value(eg. {totalRecords} rows total)
     */
    totalCountTextTemplatePlural?: string;
    /**
     * Represents the text in the table toolbar that describes current rows if there are no records to show
     */
    noRecordsText?: string;
    /**
     * Represents the text in the table toolbar that describes current rows for infinite scroll state(eg. {currentRecordsCount} out of {totalRecords} rows shown)
     */
    outOfShownTextTemplate?: string;
    /**
     * Represents the text in the table toolbar that describes current rows for infinite scroll state when all items are loaded for plural value(eg. {currentRecordsCount} row shown)
     */
    recordsCountShownTextTemplate?: string;
    /**
     * Represents the text in the table toolbar that describes current rows for infinite scroll state when all items are loaded for non-plural value(eg. {currentRecordsCount} rows shown)
     */
    recordsCountShownTextTemplatePlural?: string;
    /**
     * Used in toolbar search as a placeholder for the search input ([placeholder] input for AdaptRxSearchComponent)
     */
    searchPlaceholder?: string;
    /**
     * Used in toolbar search as a label ([label] input for AdaptRxSearchComponent)
     */
    searchLabel?: string;
    /**
     * Represents the label for the button that used for visibility dropdown in toolbar
     */
    visibleColumnsMenuLabel?: string;
    /**
     * @deprecated from 12.18.0
     * Not used anymore
     */
    filterButtonLabel?: string;
    /**
     * Need example
     */
    selected?: string;
    /**
     * Need example
     */
    showAllSelected?: string;
    /**
     * Text for the refresh button in toolbar
     */
    refresh?: string;
    /**
     * @deprecated from 12.18.0
     * Not used anymore
     */
    clearButtonText?: string;
    /**
     * Represents text in export menu for selection case
     */
    exportSelected?: string;
    /**
     * Represents text in export menu for all rows
     */
    exportEntireDocument?: string;
    /**
     * Text for the export button in toolbar
     */
    export?: string;
}
export interface TextFilterTexts {
    /**
     * Used as a placeholder text for column filter input
     */
    placeholder?: string;
    /**
     * Used as a label for column filter input
     */
    label?: string;
}
export interface MergedFiltersTexts {
    /**
     * Used as a label for merged columns dropdown control if there are no applied filters
     */
    buttonNoAppliedFilters?: string;
    /**
     * Used as a label for merged columns dropdown control in non-plural case(if only one filter applied)
     */
    buttonAppliedFilter?: string;
    /**
     * Used as a label for merged columns dropdown control in plural case(if more than one filter applied)
     */
    buttonAppliedFilters?: string;
    /**
     * Used as a label for a merged columns filter dropdown
     */
    appliedFiltersLabel?: string;
}
/**
 * @deprecated from v8.26.1 Use 'TableCustomTexts' instead
 */
export interface FiltersTexts {
    /**
     * Texts that should describe column text-type filter
     */
    textFilterTexts?: TextFilterTexts;
    /**
     * Texts that should describe column select-type filter
     */
    selectFilterTexts?: SelectTexts;
    /**
     * Texts that should describe merged column filters
     */
    mergedFiltersTexts?: MergedFiltersTexts;
}
/**
 * @deprecated from v8.26.1 Use 'TableCustomTexts' instead
 */
export interface HeaderCellMenuTexts {
    /**
     * Text for sorting control in single sort mode
     */
    orderLabelSort?: string;
    /**
     * Text for sorting control in multi sort mode
     */
    orderLabelAddToSort?: string;
    /**
     * Text for ASC sorting control
     */
    orderAscBtn?: string;
    /**
     * Text for DESC sorting control
     */
    orderDescBtn?: string;
    /**
     * Text for control label to change sorting order in multi sort mode
     */
    selectSortOrderLabel?: string;
    /**
     * Text for control options to change sorting order in multi sort mode
     */
    selectSortOrderOption?: string;
    /**
     * Text for control to remove column from sorting
     */
    removeCurrentFromSortingBtn?: string;
    /**
     * Text for control to remove all columns from sorting
     */
    clearAllSortingBtn?: string;
}
export interface TableWidthConfig {
    /**
     * Width that will be applied for desktop devices
     */
    desktop: string;
    /**
     * Width that will be applied for mobile devices
     */
    mobile: string;
}
export interface MergeColumnConfig {
    /**
     * First field of the merge column(field is related to the ColumnConfig.field)
     */
    field1: string;
    /**
     * Second field of the merge column(field is related to the ColumnConfig.field)
     */
    field2: string;
    /**
     * The viewport width.
     * The merge will be triggered when window viewport width is less than this value
     */
    viewportWidth: number;
}
export interface RenderingColumnConfig {
    /**
     * Column configs for columns rendering
     */
    columnsConfigs: ColumnConfig[];
    /**
     * Type of rendering. Basically shows if columns are merged or not
     */
    type: RenderingColumnType;
}
export interface CellTemplateParams {
    /**
     * Current column configuration
     */
    column: ColumnConfig;
    /**
     * ???
     */
    renderRowData: RenderingGroupedRowData;
}
/**
 * The state of the column to control table state persistence
 */
export interface ColumnConfigState {
    /**
     * List of fields from ColumnConfig.field.
     * Could be multiple because of the merge columns feature
     */
    fields: string[];
    /**
     * The width of the current column
     */
    width?: number;
    /**
     * The visibility of the current column
     */
    hidden?: boolean;
}
export interface AdaptTableLocalStorageState {
    /**
     * The single sorting state of the table
     */
    singleSortMeta?: SortMeta;
    /**
     * The multi sorting state of the table
     */
    multiSortMeta?: SortMeta[];
    /**
     * Columns widths state
     */
    columnWidths?: ColumnConfigState[];
    /**
     * Columns width state for merged columns
     */
    columnMergedWidths?: ColumnConfigState[];
    /**
     * The array of column field strings(ColumnConfig.field) that shows current state of columns order
     */
    columnOrder?: string[];
}
export interface AdaptTableSessionStorageState {
    /**
     * The map of FilterMetadata objects from [filters] input
     */
    filters?: KeyValueObject<FilterMetadata>;
    /**
     * Current state of column visibility
     */
    columnsVisibility?: ColumnConfigState[];
}
/**
 * Extends "AdaptTableLocalStorageState" and "AdaptTableSessionStorageState"
 */
export interface AdaptTableState extends AdaptTableLocalStorageState, AdaptTableSessionStorageState {
}
export interface AdaptColumnsVisibilityChange {
    /**
     * Current column configuration
     */
    column: ColumnConfig;
    /**
     * The visibility state of the current column
     */
    isHidden: boolean;
}
export interface ColumnResized {
    /**
     * Table cell element that was resized
     */
    element: HTMLTableDataCellElement;
    /**
     * The number of pixels that the column was resized by(can be negative if column was shrank)
     */
    delta: number;
    /**
     * The state of the column to control table state persistence
     */
    columnsConfigState: ColumnConfigState[];
}
export interface AdaptTableToggleSelectionEvent {
    /**
     * Browser native event
     */
    originalEvent: Event;
    /**
     * Current row index
     */
    index: number;
    /**
     * Current row data
     */
    data: RowDataItem;
    /**
     * Show from where selection action was triggered(example: clicking on checkbox or entering space key on table cell)
     */
    type: 'checkbox' | 'row';
}
export interface AdaptPageChangeEvent {
    /**
     * Index of the first row to be displayed
     */
    first: number;
    /**
     * Number of rows to display per page
     */
    rows: number;
}
export interface AdaptPaginatorRowsPerPageChangeEvent {
    /**
     * Browser native event
     */
    event: MouseEvent;
    /**
     * The current value of the rows per page
     */
    rows: number;
}
export interface AdaptTableHeaderCheckboxToggleEvent {
    /**
     * Browser native event
     */
    originalEvent: Event;
    /**
     * Selection state(checked or unchecked)
     */
    checked: boolean;
    /**
     * Selection source(example: SelectAll, DeselectAll, SelectOnPage)
     */
    eventSource: AdaptTableHeaderCheckboxToggleSource;
    /**
     * The map of FilterMetadata objects from [filters] input
     */
    filters?: {
        [s: string]: FilterMetadata;
    };
    /**
     * The global filter value from [filters] input
     */
    globalFilter?: any;
}
/**
 * @since 12.14.0
 */
export interface AdaptTableRowAriaData {
    /**
     * Text that describes the row selection control
     */
    rowSelectionAriaLabel?: string;
    /**
     * Text that describes the row expand control when it is expanded
     */
    rowCollapseAriaLabel?: string;
    /**
     * Text that describes the row expand control when it is collapsed
     */
    rowExpandAriaLabel?: string;
}
export interface AdaptTableFilterEvent {
    /**
     * The map of FilterMetadata objects from [filters] input
     */
    filters: KeyValueObject<FilterMetadata>;
    /**
     * Table rows value after filtering
     */
    filteredValue: RowDataItem[];
}
export interface AdaptTableRowExpandCollapseEvent {
    /**
     * Browser native event
     */
    originalEvent: Event;
    /**
     * Current row data
     */
    data: RowDataItem;
}
export interface AdaptTableMultiSortMeta {
    /**
     * An array of SortMeta objects used in multiple columns sorting.
     * Each SortMeta has field and order properties
     */
    multisortmeta: SortMeta[];
}
export interface AdaptTableColReorderEvent {
    /**
     * The index of the column when drag started
     */
    dragIndex: number;
    /**
     * The index of the column when it was dropped(drag ended)
     */
    dropIndex: number;
    /**
     * Columns configuration
     */
    columns: ColumnConfig[];
}
export interface AdaptTableSortFunctionEvent {
    /**
     * Table rows
     */
    data: RowDataItem[];
    /**
     * Represent in which mode sorting works on single column or on multiple columns, valid values are "single" and "multiple"
     */
    mode: string;
}
export interface AdaptTableSingleSortFunctionEvent extends AdaptTableSortFunctionEvent {
    /**
     * Column identifier related to ColumnConfig.field
     */
    field: string;
    /**
     * Sort order as number, 1 for asc and -1 for dec in single sort mode
     */
    order: number;
}
export interface AdaptTableMultiSortFunctionEvent extends AdaptTableSortFunctionEvent {
    /**
     * An array of SortMeta objects used in multiple columns sorting.
     * Each SortMeta has field and order properties
     */
    multiSortMeta: SortMeta[];
}
export interface AdaptTableToggleRowEvent {
    /**
     * Browser native event
     */
    originalEvent: MouseEvent;
    /**
     * Index of the current row
     */
    rowIndex: number;
}
export interface AdaptTableSortEvent {
    /**
     * Browser native event
     */
    originalEvent: MouseEvent;
    /**
     * Column identifier related to ColumnConfig.field
     */
    field: string;
}
