import { ChangeDetectorRef, ElementRef, Renderer2 } from '@angular/core';
import { Subject } from 'rxjs';
import { ToolbarItemContext } from '../adapt-table.models';
import * as i0 from "@angular/core";
export declare class AdaptTableToolbarItemDirective {
    private _elRef;
    private _renderer;
    private _changeDetectorRef;
    width: number;
    collapsedWidth: number;
    recalculateWidth: () => void;
    itemContext: ToolbarItemContext;
    adaptToolbarItem: number;
    set fixOnToolbar(value: boolean);
    get fixOnToolbar(): boolean;
    set collapse(value: boolean);
    get collapse(): boolean;
    set hideToPopup(value: boolean);
    get hideToPopup(): boolean;
    set removeFromToolbar(value: boolean);
    get removeFromToolbar(): boolean;
    readonly itemAppearanceChange: Subject<void>;
    private _fixOnToolbar;
    private _removeFromToolbar;
    constructor(_elRef: ElementRef<HTMLElement>, _renderer: Renderer2, _changeDetectorRef: ChangeDetectorRef);
    private _initItem;
    private _checkAppearance;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptTableToolbarItemDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptTableToolbarItemDirective, "[adaptToolbarItem]", ["adaptToolbarItem"], { "adaptToolbarItem": "adaptToolbarItem"; "fixOnToolbar": "fixOnToolbar"; "collapse": "collapse"; "hideToPopup": "hideToPopup"; "removeFromToolbar": "removeFromToolbar"; }, { "itemAppearanceChange": "itemAppearanceChange"; }, never>;
}
