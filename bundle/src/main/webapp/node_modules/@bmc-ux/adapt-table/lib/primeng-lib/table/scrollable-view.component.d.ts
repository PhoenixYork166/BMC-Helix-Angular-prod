import { AfterViewChecked, AfterViewInit, ElementRef, NgZone, OnDestroy } from '@angular/core';
import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { EventManager } from '@angular/platform-browser';
import { Subscription } from 'rxjs';
import { AdaptTableComponent } from '../../adapt-table.component';
import { AdaptTableClasses, ColumnConfig } from '../../adapt-table.models';
import * as i0 from "@angular/core";
export declare class ScrollableView implements AfterViewInit, OnDestroy, AfterViewChecked {
    dt: AdaptTableComponent;
    el: ElementRef;
    zone: NgZone;
    private _eventManager;
    columns: ColumnConfig[];
    frozen: boolean;
    scrollHeaderViewChild: ElementRef;
    scrollHeaderBoxViewChild: ElementRef;
    scrollBodyViewChild: ElementRef;
    scrollTableViewChild: ElementRef;
    scrollFooterViewChild: ElementRef;
    scrollFooterBoxViewChild: ElementRef;
    scrollableAlignerViewChild: ElementRef;
    virtualScrollBody: CdkVirtualScrollViewport;
    headerScrollListener: Function;
    bodyScrollListener: EventListenerOrEventListenerObject;
    footerScrollListener: Function;
    frozenSiblingBody: HTMLDivElement;
    _scrollHeight: string;
    subscription: Subscription;
    initialized: boolean;
    preventBodyScrollPropagation: boolean;
    virtualScrollTimeout: number;
    virtualPage: number;
    tableClasses: typeof AdaptTableClasses;
    private _visualViewportResizeListenerBind;
    constructor(dt: AdaptTableComponent, el: ElementRef, zone: NgZone, _eventManager: EventManager);
    get scrollHeight(): string;
    set scrollHeight(val: string);
    ngAfterViewChecked(): void;
    ngAfterViewInit(): void;
    canShowInfiniteScrollingLoader(): boolean;
    bindEvents(): void;
    unbindEvents(): void;
    onHeaderScroll(): void;
    onFooterScroll(): void;
    onBodyScroll(event: Event): void;
    hasVerticalOverflow(): boolean;
    alignScrollBar(recalculateScrollBarWidth?: boolean): void;
    ngOnDestroy(): void;
    getPageCount(): number;
    onScrollIndexChange(index: number): void;
    scrollToVirtualIndex(index: number): void;
    scrollTo(options: ScrollToOptions): void;
    private _subscribeOnVisualViewportResize;
    private _visualViewportResizeListener;
    static ɵfac: i0.ɵɵFactoryDeclaration<ScrollableView, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ScrollableView, "[pScrollableView]", never, { "columns": "pScrollableView"; "frozen": "frozen"; "scrollHeight": "scrollHeight"; }, {}, never, never>;
}
