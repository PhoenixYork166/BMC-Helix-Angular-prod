import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef, TrackByFunction } from '@angular/core';
import { TableService } from './table.service';
import { BlockableUI, FilterMetadata, FilterService, SortMeta } from 'primeng/api';
import { AdaptLazyLoadEvent, AdaptPageChangeEvent, AdaptTableColReorderEvent, AdaptTableEventSource, AdaptTableFilterEvent, AdaptTableHeaderCheckboxToggleEvent, AdaptTableMultiSortFunctionEvent, AdaptTableMultiSortMeta, AdaptTableRowExpandCollapseEvent, AdaptTableSingleSortFunctionEvent, AdaptTableToggleSelectionEvent, ColumnConfig, ColumnResized, LazyLoadEvent, RowData, RowDataItem, ExpandedRowTemplateParams, TableBodyTemplateParams, AdaptTableToggleRowEvent, AdaptTableSortEvent } from '../../adapt-table.models';
import { KeyValueObject } from '@bmc-ux/adapt-angular';
import * as i0 from "@angular/core";
export declare class Table implements OnInit, BlockableUI, OnChanges, OnDestroy {
    el: ElementRef;
    zone: NgZone;
    tableService: TableService;
    cd: ChangeDetectorRef;
    filterService: FilterService;
    /**
     * An array of objects to display
     * @docs-default []
     */
    get value(): RowDataItem[];
    set value(val: RowDataItem[]);
    /**
     * An array of objects to represent dynamic columns
     * @docs-default
     */
    get columns(): ColumnConfig[];
    set columns(cols: ColumnConfig[]);
    /**
     * Index of the first row to be displayed
     * @docs-default 0
     */
    get first(): number;
    set first(val: number);
    /**
     * Number of rows to display per page
     * @docs-default
     */
    get rows(): number;
    set rows(val: number);
    get allTotalRecords(): number;
    /**
     * Number of total records in the table
     * @docs-default null
     */
    get totalRecords(): number;
    set totalRecords(val: number);
    /**
     * Name of the field to sort data by default
     * @docs-default
     */
    get sortField(): string;
    set sortField(val: string);
    /**
     * Order to sort when default sorting is enabled
     * 1 for ASC and -1 for DEC
     * @docs-default 1
     */
    get sortOrder(): number;
    set sortOrder(val: number);
    /**
     * An array of SortMeta objects to sort the data by default in multiple sort mode
     *
     * SortMeta {
     *     // The "field" property from the ColumnConfig
     *     field: string;
     *     // 1 for ASC and -1 for DEC
     *     order: number;
     * }
     *
     * @docs-default
     */
    get multiSortMeta(): SortMeta[];
    set multiSortMeta(val: SortMeta[]);
    /**
     * Selected row in single mode or an array of values in multiple mode
     * @docs-default
     */
    get selection(): RowDataItem[] | RowDataItem;
    set selection(val: RowDataItem[] | RowDataItem);
    /**
     * An array of objects to represent dynamic columns that are frozen
     *
     * @deprecated from 12.21.0 Use "frozen" property on "ColumnConfig" instead
     *
     * @docs-default
     */
    frozenColumns: ColumnConfig[];
    /**
     * An array of objects to display as frozen
     *
     * @deprecated from 12.21.0 Not used anymore
     *
     * @docs-default
     */
    frozenValue: RowDataItem[];
    /**
     * Width of the frozen columns container
     *
     * @deprecated from 12.21.0 Use "width" property on "ColumnConfig" instead
     *
     * @docs-default
     */
    frozenWidth: string;
    /**
     * Inline style of the component
     * @docs-default
     */
    style: KeyValueObject;
    /**
     * Style class of the component
     * @docs-default
     */
    styleClass: string;
    /**
     * Inline style of the table
     * @docs-default
     */
    tableStyle: KeyValueObject;
    /**
     * Style class of the table
     * @docs-default null
     */
    tableStyleClass: string;
    /**
     * When specified as true, enables the pagination
     * @docs-default
     */
    paginator: boolean;
    /**
     * Number of page links to display in paginator
     * @docs-default 5
     */
    pageLinks: number;
    /**
     * Array of integer values to display inside rows per page dropdown of paginator
     * @docs-default
     */
    rowsPerPageOptions: number[];
    /**
     * Whether to show pagination even there is only one page
     * @docs-default true
     */
    alwaysShowPaginator: boolean;
    /**
     * Position of the paginator, options are "top","bottom" or "both"
     * @docs-default 'bottom'
     */
    paginatorPosition: string;
    /**
     * Target element to attach the paginator dropdown overlay, valid values are "body" or a local ng-template variable of another element (note: use binding with brackets for template variables, e.g. [appendTo]="mydiv" for a div element having #mydiv as variable name)
     * @docs-default
     */
    paginatorDropdownAppendTo: 'body' | ElementRef<unknown> | TemplateRef<unknown>;
    /**
     * Paginator dropdown height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value
     * @docs-default '200px'
     */
    paginatorDropdownScrollHeight: string;
    /**
     * Template of the current page report element.
     * Available placeholders are {currentPage},{totalPages},{rows},{first},{last} and {totalRecords}
     * @docs-default '{currentPage} of {totalPages}'
     */
    currentPageReportTemplate: string;
    /**
     * Whether to display current page report
     * @docs-default
     */
    showCurrentPageReport: boolean;
    /**
     * Sort order to use when an unsorted column gets sorted by user interaction
     * @docs-default 1
     */
    defaultSortOrder: number;
    /**
     * Defines whether sorting works on single column or on multiple columns, valid values are "single" and "multiple"
     * @docs-default 'single'
     */
    sortMode: string;
    /**
     * When true, resets paginator to first page after sorting. Available only when sortMode is set to single
     * @docs-default true
     */
    resetPageOnSort: boolean;
    /**
     * Specifies the selection mode, valid values are "single" and "multiple"
     * @docs-default
     */
    selectionMode: string;
    /**
     * Defines the behavior of context menu selection, in "separate" mode context menu updates contextMenuSelection propertty whereas in joint mode selection property is used instead so that when row selection is enabled, both row selection and context menu selection use the same property
     *
     * @deprecated since 12.18.0
     * Not used anymore
     *
     * @docs-default 'separate'
     */
    contextMenuSelectionMode: string;
    /**
     * A property to uniquely identify a record in data
     * @docs-default
     */
    dataKey: string;
    /**
     * Defines whether metaKey should be considered for the selection.
     * On touch enabled devices, metaKeySelection is turned off automatically
     *
     * @deprecated since 12.18.0
     * Not used anymore
     *
     * @docs-default
     */
    metaKeySelection: boolean;
    /**
     * Defines if data is loaded and interacted with in lazy manner
     * @docs-default false
     */
    lazy: boolean;
    /**
     * Whether to call lazy loading on initialization
     * @docs-default true
     */
    lazyLoadOnInit: boolean;
    /**
     * Algorithm to define if a row is selected, valid values are "equals" that compares by reference and "deepEquals" that compares all fields
     * @docs-default 'deepEquals'
     */
    compareSelectionBy: string;
    /**
     * The map of FilterMetadata objects to provide external filters
     * The key of the map should be a "field" property from ColumnsConfig
     * @docs-default {}
     */
    filters: KeyValueObject<FilterMetadata>;
    /**
     * An array of fields("field" property from ColumnsConfig) as string to use in global filtering
     * @docs-default
     */
    globalFilterFields: string[];
    /**
     * Delay in milliseconds before filtering the data
     * @docs-default 300
     */
    filterDelay: number;
    /**
     * Total records in filtering mode.
     * Used to separate total records in filtering and non-filtering modes
     * @docs-default null
     * @since 11.10.0
     */
    filteredTotalRecords: number;
    /**
     * Map instance to keep the expanded rows where key of the map is the data key of the row
     * @docs-default {}
     */
    expandedRowKeys: KeyValueObject<boolean>;
    /**
     * Map instance to keep the rows being edited where key of the map is the data key of the row
     * @docs-default {}
     */
    editingRowKeys: KeyValueObject<boolean>;
    /**
     * Whether multiple rows can be expanded at any time. Valid values are "multiple" and "single"
     * @docs-default 'multiple'
     */
    rowExpandMode: string;
    /**
     * When specifies, enables horizontal and/or vertical scrolling
     * @docs-default
     */
    scrollable: boolean;
    /**
     * Height of the scroll viewport in fixed pixels or the "flex" keyword for a dynamic size
     * @docs-default
     */
    scrollHeight: string;
    /**
     * Whether the data should be loaded on demand during scroll
     * Additional information https://material.angular.io/cdk/scrolling/api
     * @docs-default
     */
    virtualScroll: boolean;
    /**
     * Threshold in milliseconds to delay lazy loading during scrolling
     * @docs-default 250
     */
    virtualScrollDelay: number;
    /**
     * Height of a row to use in calculations of virtual scrolling
     * Additional information https://material.angular.io/cdk/scrolling/api
     * @docs-default 37
     */
    virtualRowHeight: number;
    /**
     * Defines if the columns should be stacked in smaller screens
     * @docs-default
     */
    responsive: boolean;
    /**
     * When enabled, columns can be resized using drag and drop
     * @docs-default
     */
    resizableColumns: boolean;
    /**
     * Defines whether the overall table width should change on column resize, valid values are "fit" and "expand"
     * @docs-default 'fit'
     */
    columnResizeMode: string;
    /**
     * When enabled, columns can be reordered using drag and drop
     * @docs-default
     */
    reorderableColumns: boolean;
    /**
     * The icon to show while indicating data load is in progress
     * @docs-default 'pi pi-spinner'
     */
    loadingIcon: string;
    /**
     * Whether to show the loading mask when loading property is true
     * @docs-default true
     */
    showLoader: boolean;
    /**
     * Adds hover effect on rows without the need for selectionMode.
     * Note that TR elements that can be hovered need to have "ui-selectable-row" class for rowHover to work
     * @docs-default
     */
    rowHover: boolean;
    /**
     * Whether to use the default sorting or a custom one using "sortFunction"
     * @docs-default
     */
    customSort: boolean;
    /**
     * Whether the cell widths scale according to their content or not
     * @docs-default
     */
    autoLayout: boolean;
    /**
     * A function to implement custom export.
     * Need to return string value.<br />event.data: Field data<br />event.field: Column field
     *
     * @deprecated since 12.18.0
     * Not used anymore
     *
     * @docs-default
     */
    exportFunction: Function;
    /**
     * Unique identifier of a stateful table to use in state storage
     *
     * @deprecated since 12.18.0
     * Not used anymore
     *
     * @docs-default
     */
    stateKey: string;
    /**
     * Defines where a stateful table keeps its state, valid values are "session" for sessionStorage and "local" for localStorage
     *
     * @deprecated since 12.18.0
     * Not used anymore
     *
     * @docs-default 'session'
     */
    stateStorage: string;
    /**
     * Defines the editing mode, valid values are "cell" and "row"
     * @docs-default 'cell'
     */
    editMode: string;
    /**
     * Don't emit onLazyLoad event when changes Input value of 'sortField', 'sortOrder', 'multiSortMeta'.
     * Needs for avoiding double onLazyLoad event emitting in some cases
     *
     * @docs-default 'multiple'
     */
    dontEmitLazyLoadOnInputChange: boolean;
    /**
     * Triggered when "selection" changed. Means user selected or unselect rows
     */
    readonly selectionChange: EventEmitter<RowDataItem[] | RowDataItem>;
    /**
     * Callback to invoke when a row is selected
     */
    readonly onRowSelect: EventEmitter<AdaptTableToggleSelectionEvent>;
    /**
     * Callback to invoke when a row is unselected
     */
    readonly onRowUnselect: EventEmitter<AdaptTableToggleSelectionEvent>;
    /**
     * Callback to invoke when pagination occurs
     */
    readonly onPage: EventEmitter<AdaptPageChangeEvent>;
    /**
     * Callback to invoke when a column gets sorted
     */
    readonly onSort: EventEmitter<AdaptTableMultiSortMeta | SortMeta>;
    /**
     * Callback to invoke when data is filtered
     */
    readonly onFilter: EventEmitter<AdaptTableFilterEvent>;
    /**
     * Callback to invoke when paging, sorting or filtering happens in lazy mode
     */
    readonly onLazyLoad: EventEmitter<LazyLoadEvent | AdaptLazyLoadEvent>;
    /**
     * Callback to invoke when a row is expanded
     */
    readonly onRowExpand: EventEmitter<AdaptTableRowExpandCollapseEvent>;
    /**
     * Callback to invoke when a row is collapsed
     */
    readonly onRowCollapse: EventEmitter<AdaptTableRowExpandCollapseEvent>;
    /**
     * Callback to invoke when a column is resized
     */
    readonly onColResize: EventEmitter<ColumnResized>;
    /**
     * Callback to invoke when a column is reordered
     */
    readonly onColReorder: EventEmitter<AdaptTableColReorderEvent>;
    /**
     * Callback to invoke when state of header checkbox changes
     */
    readonly onHeaderCheckboxToggle: EventEmitter<AdaptTableHeaderCheckboxToggleEvent>;
    /**
     * In case if [customSort] is set to true "sortFunction" output will be emitted.
     * Useful for custom sorting implementation
     */
    readonly sortFunction: EventEmitter<AdaptTableSingleSortFunctionEvent | AdaptTableMultiSortFunctionEvent>;
    /**
     * Emit each time when [first] value changed
     */
    readonly firstChange: EventEmitter<number>;
    /**
     * Emit each time when [rows] value changed
     */
    readonly rowsChange: EventEmitter<number>;
    containerViewChild: ElementRef<HTMLDivElement>;
    resizeHelperViewChild: ElementRef<HTMLDivElement>;
    reorderIndicatorUpViewChild: ElementRef<HTMLSpanElement>;
    reorderIndicatorDownViewChild: ElementRef<HTMLSpanElement>;
    tableViewChild: ElementRef<HTMLTableElement>;
    _value: RowDataItem[];
    _columns: ColumnConfig[];
    _totalRecords: number;
    _first: number;
    _rows: number;
    filteredValue: RowDataItem[];
    headerTemplate: TemplateRef<{
        columns: ColumnConfig[];
    }>;
    bodyTemplate: TemplateRef<TableBodyTemplateParams>;
    loadingBodyTemplate: TemplateRef<{
        $implicit: ColumnConfig[];
        frozen: boolean;
    }>;
    frozenRowsTemplate: TemplateRef<{
        $implicit: RowDataItem;
        rowIndex: number;
        columns: ColumnConfig[];
    }>;
    footerTemplate: TemplateRef<{
        $implicit: ColumnConfig[];
    }>;
    colGroupTemplate: TemplateRef<{
        columns: ColumnConfig[];
    }>;
    expandedRowTemplateRef: TemplateRef<ExpandedRowTemplateParams>;
    frozenHeaderTemplate: TemplateRef<{
        columns: ColumnConfig[];
    }>;
    frozenBodyTemplate: TemplateRef<void>;
    frozenFooterTemplate: TemplateRef<{
        columns: ColumnConfig[];
    }>;
    frozenColGroupTemplate: TemplateRef<{
        columns: ColumnConfig[];
    }>;
    emptyMessageTemplate: TemplateRef<{
        columns: ColumnConfig[];
    }>;
    selectionKeys: KeyValueObject;
    lastResizerHelperX: number;
    reorderIconWidth: number;
    reorderIconHeight: number;
    draggedColumn: HTMLTableHeaderCellElement;
    dropPosition: number;
    _multiSortMeta: SortMeta[];
    _sortField: string;
    _sortOrder: number;
    preventSelectionSetterPropagation: boolean;
    _selection: RowDataItem[] | RowDataItem;
    anchorRowIndex: number;
    filterTimeout: number;
    initialized: boolean;
    restoringFilter: boolean;
    constructor(el: ElementRef, zone: NgZone, tableService: TableService, cd: ChangeDetectorRef, filterService: FilterService);
    /**
     * Angular trackBy function for table rows
     * @docs-default (index: number, item: RowData) => item
     */
    rowTrackBy: TrackByFunction<RowData>;
    ngOnInit(): void;
    ngOnChanges(simpleChange: SimpleChanges): void;
    ngOnDestroy(): void;
    toggleRowWithCheckbox(event: AdaptTableToggleRowEvent, rowData: RowDataItem): void;
    toggleRow(rowData: RowDataItem, event?: Event): void;
    isSingleSelectionMode(): boolean;
    isMultipleSelectionMode(): boolean;
    isSelected(rowData: RowDataItem): boolean;
    findIndexInSelection(rowData: RowDataItem): number;
    sort(event: AdaptTableSortEvent): void;
    sortSingle(): void;
    sortMultiple(): void;
    multisortField(data1: RowDataItem, data2: RowDataItem, multiSortMeta: SortMeta[], index: number): number;
    getSortMeta(field: string): SortMeta;
    isSorted(field: string): boolean;
    filter(value: unknown, field: string, matchMode: string): void;
    filterGlobal(value: unknown, matchMode: string): void;
    isFilterBlank(filter: unknown): boolean;
    _filter(): void;
    hasFilter(): boolean;
    initRowEdit(rowData: RowDataItem): void;
    saveRowEdit(rowData: RowDataItem, rowElement: HTMLTableRowElement): void;
    cancelRowEdit(rowData: RowDataItem): void;
    isRowExpanded(rowData: RowDataItem): boolean;
    isRowEditing(rowData: RowDataItem): boolean;
    onColumnResizeBegin(event: DragEvent): void;
    onColumnResize(event: DragEvent): void;
    onColumnDragStart(event: DragEvent, columnElement: HTMLTableHeaderCellElement): void;
    onColumnDragEnter(event: DragEvent, dropHeader: HTMLTableHeaderCellElement): void;
    onColumnDragLeave(event: DragEvent): void;
    onColumnDrop(event: DragEvent, dropColumn: HTMLTableHeaderCellElement): void;
    isEmpty(): boolean;
    getBlockableElement(): HTMLElement;
    updateSelectionKeys(): void;
    onPageChange(event: AdaptPageChangeEvent): void;
    equals(data1: RowDataItem, data2: RowDataItem): boolean;
    createLazyLoadMetadata(eventSource: AdaptTableEventSource): LazyLoadEvent;
    reset(): void;
    findParentScrollableView(column: HTMLTableDataCellElement): HTMLElement;
    static ɵfac: i0.ɵɵFactoryDeclaration<Table, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<Table, "p-table", never, { "value": "value"; "columns": "columns"; "first": "first"; "rows": "rows"; "totalRecords": "totalRecords"; "sortField": "sortField"; "sortOrder": "sortOrder"; "multiSortMeta": "multiSortMeta"; "selection": "selection"; "frozenColumns": "frozenColumns"; "frozenValue": "frozenValue"; "frozenWidth": "frozenWidth"; "style": "style"; "styleClass": "styleClass"; "tableStyle": "tableStyle"; "tableStyleClass": "tableStyleClass"; "paginator": "paginator"; "pageLinks": "pageLinks"; "rowsPerPageOptions": "rowsPerPageOptions"; "alwaysShowPaginator": "alwaysShowPaginator"; "paginatorPosition": "paginatorPosition"; "paginatorDropdownAppendTo": "paginatorDropdownAppendTo"; "paginatorDropdownScrollHeight": "paginatorDropdownScrollHeight"; "currentPageReportTemplate": "currentPageReportTemplate"; "showCurrentPageReport": "showCurrentPageReport"; "defaultSortOrder": "defaultSortOrder"; "sortMode": "sortMode"; "resetPageOnSort": "resetPageOnSort"; "selectionMode": "selectionMode"; "contextMenuSelectionMode": "contextMenuSelectionMode"; "dataKey": "dataKey"; "metaKeySelection": "metaKeySelection"; "lazy": "lazy"; "lazyLoadOnInit": "lazyLoadOnInit"; "compareSelectionBy": "compareSelectionBy"; "filters": "filters"; "globalFilterFields": "globalFilterFields"; "filterDelay": "filterDelay"; "filteredTotalRecords": "filteredTotalRecords"; "expandedRowKeys": "expandedRowKeys"; "editingRowKeys": "editingRowKeys"; "rowExpandMode": "rowExpandMode"; "scrollable": "scrollable"; "scrollHeight": "scrollHeight"; "virtualScroll": "virtualScroll"; "virtualScrollDelay": "virtualScrollDelay"; "virtualRowHeight": "virtualRowHeight"; "responsive": "responsive"; "resizableColumns": "resizableColumns"; "columnResizeMode": "columnResizeMode"; "reorderableColumns": "reorderableColumns"; "loadingIcon": "loadingIcon"; "showLoader": "showLoader"; "rowHover": "rowHover"; "customSort": "customSort"; "autoLayout": "autoLayout"; "exportFunction": "exportFunction"; "stateKey": "stateKey"; "stateStorage": "stateStorage"; "editMode": "editMode"; "dontEmitLazyLoadOnInputChange": "dontEmitLazyLoadOnInputChange"; "rowTrackBy": "rowTrackBy"; }, { "selectionChange": "selectionChange"; "onRowSelect": "onRowSelect"; "onRowUnselect": "onRowUnselect"; "onPage": "onPage"; "onSort": "onSort"; "onFilter": "onFilter"; "onLazyLoad": "onLazyLoad"; "onRowExpand": "onRowExpand"; "onRowCollapse": "onRowCollapse"; "onColResize": "onColResize"; "onColReorder": "onColReorder"; "onHeaderCheckboxToggle": "onHeaderCheckboxToggle"; "sortFunction": "sortFunction"; "firstChange": "firstChange"; "rowsChange": "rowsChange"; }, never, never>;
}
