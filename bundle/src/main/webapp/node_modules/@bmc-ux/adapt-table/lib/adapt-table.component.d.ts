import { Directionality } from '@angular/cdk/bidi';
import { CdkDragDrop, CdkDragEnd, CdkDragRelease, CdkDragSortEvent, CdkDragStart } from '@angular/cdk/drag-drop';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, Injector, NgZone, OnChanges, OnDestroy, OnInit, QueryList, Renderer2, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';
import { AdaptDeviceDetectionService, AdaptOverlayService, AdaptTranslateService, BusyConfig, KeyValueObject, StylesObject, ValueOrFunc2 } from '@bmc-ux/adapt-angular';
import { FilterService, SortMeta } from 'primeng/api';
import { AdaptColumnsVisibilityChange, AdaptDragDropEvent, AdaptLazyLoadEvent, AdaptPageChangeEvent, AdaptPaginatorAlign, AdaptTableRowAriaData, AdaptRowDragEndEvent, AdaptRowDragReleaseEvent, AdaptRowDragStartedEvent, AdaptTableClasses, AdaptTableEventSource, AdaptTableHeaderCheckboxToggleEvent, AdaptTableHeaderSelectionMode, AllGroupedRowsSelectionEvent, CellTemplateParams, CheckboxState, ColumnActionsConfig, ColumnConfig, ColumnResized, CurrentEditingRow, DataCellDirectiveParams, DataCellTemplateParams, DataColumnsDataCellsTemplateParams, DataRowDirectiveParams, ExpandedGroupKeys, ExpandedRowTemplateParams, ExportEvent, FilterMatchMode, FiltersTexts, GroupedRowData, GroupExpansionEvent, GroupSelectionEvent, GroupValueDataCellTemplateParams, HeaderCellMenuTexts, HeaderDataCellDirectiveParams, ImplicitTemplateParams, MergeColumnConfig, PaginationTexts, PrimaryKey, RenderingColumnConfig, RenderingColumnType, RenderingGroupedRowData, RowData, RowDataItem, SaveRowEvent, SortOrder, TableBodyTemplateParams, TableCustomTexts, TableTexts, TableWidthConfig, ToolbarApi, ToolbarConfig, ToolbarTexts, ToolbarPopupAnimationDoneEvent } from './adapt-table.models';
import { ScrollableView } from './primeng-lib/table/scrollable-view.component';
import { Table } from './primeng-lib/table/table';
import { TableService } from './primeng-lib/table/table.service';
import { AdaptDataDirective } from './shared/adapt-data-directive';
import { AdaptTableDeprecationMiddleware } from './shared/deprecation-middleware.service';
import * as i0 from "@angular/core";
/** @deprecated from v8.26.1 Use AdaptTableClasses Enum instead */
export declare abstract class AdaptGridClasses {
    static readonly MAIN: string;
    static readonly ADAPT_TABLE: string;
    static readonly BORDERED: string;
    static readonly PAGEABLE: string;
    static readonly SCROLLABLE: string;
    static readonly STRIPED: string;
    static readonly IS_EMPTY_STATE: string;
    static readonly NOT_SCROLLABLE: string;
    static readonly FULL_HEIGHT_STRETCH: string;
    static readonly HAS_NOT_VERTICAL_BODY_OVERFLOW: string;
    static readonly LOADING_FULL_TABLE: string;
    static readonly CELL: {
        ACTIONS_CELL: string;
        EDITING: string;
    };
}
export declare class AdaptTableComponent extends Table implements OnInit, OnChanges, OnDestroy, AfterViewInit {
    private _dir;
    private _renderer;
    private _adaptDeviceDetectionService;
    private _ts;
    private _deprecationMiddleware;
    private _overlayService;
    private _injector;
    static LAST_TABLE_INSTANCE_ID: number;
    el: ElementRef<HTMLElement>;
    loadingToggle: EventEmitter<boolean>;
    currentEditingRows: {
        [id in PrimaryKey]: CurrentEditingRow;
    };
    isMobile: boolean;
    rowSelectionRadiobuttonName: string;
    RenderingColumnType: typeof RenderingColumnType;
    scrollableView: ScrollableView;
    tableBodyHeight: string;
    isRtl: boolean;
    toolbarSearchModel: string;
    /** Is used for multiple range selection with shiftKey. Is set on checkbox click and `space` click on a focused cell */
    lastSelectedRowId: PrimaryKey;
    /** @deprecated from 8.25.0 All PrimeNG properties and methods are now available directly from AdaptTableComponent instance */
    primengTable: AdaptTableComponent;
    columnIndex: number;
    tableClasses: typeof AdaptTableClasses;
    emptyStateTdEl: ElementRef<HTMLTableDataCellElement>;
    toolbarComponent: ToolbarApi;
    tooltipViewContainerRef: ViewContainerRef;
    infiniteScrollingLoaderContainerEl: ViewContainerRef;
    tableContainer: ElementRef<HTMLElement>;
    tableInnerContainer: ElementRef<HTMLElement>;
    tableHeader: ElementRef<HTMLElement>;
    nonScrollableTable: ElementRef<HTMLTableElement>;
    tableBodyTemplateRef: TemplateRef<TableBodyTemplateParams>;
    tableHeaderTemplateRef: TemplateRef<{
        columns: ColumnConfig[];
    }>;
    tableColgroupTemplateRef: TemplateRef<{
        columns: ColumnConfig[];
    }>;
    tableEmptyMessageTemplateRef: TemplateRef<{
        columns: ColumnConfig[];
    }>;
    rowExpansionTemplate: TemplateRef<ExpandedRowTemplateParams>;
    dataRows: QueryList<AdaptDataDirective<DataRowDirectiveParams, HTMLTableRowElement>>;
    dataCells: QueryList<AdaptDataDirective<DataCellDirectiveParams, HTMLTableDataCellElement>>;
    dataHeaderCells: QueryList<AdaptDataDirective<HeaderDataCellDirectiveParams, HTMLTableHeaderCellElement>>;
    actionColElements: QueryList<ElementRef<HTMLTableColElement>>;
    /**
     * Enables table sorting
     * @docs-default 'false'
     */
    sortable: boolean;
    /**
     * Enables table filtering
     * @docs-default 'false'
     */
    filterable: boolean;
    /**
     * Enables triggerable search on filters
     * @docs-default 'false'
     */
    triggerableFilters: boolean;
    /**
     * Show explicit search button
     * @docs-default 'false'
     */
    explicitSearchBtn: boolean;
    /**
     * Enables table rows reordering
     * @docs-default 'false'
     */
    enableReorderableRows: boolean;
    /**
     * Hide tooltips in the entire table
     * @docs-default 'false'
     */
    suppressTooltip: boolean;
    /**
     * Config of toolbar. If not set then toolbar is not shown
     * @docs-default
     */
    toolbarConfig: ToolbarConfig;
    /**
     * Template reference that can be used to change default 'col' tags on custom html
     *
     * @docs-default
     *
     * @deprecated since 8.10.0 Columns template shouldn't be used anymore
     */
    dataColumnsColsTemplate: TemplateRef<ImplicitTemplateParams<ColumnConfig[]>>;
    /**
     * Template reference that can be used to change default 'th' tags on custom html
     *
     * @docs-default null
     *
     * @deprecated since 8.10.0 use ColumnConfig.headerTitleTemplate instead
     */
    dataColumnsHeaderTemplate: TemplateRef<ImplicitTemplateParams<ColumnConfig[]>>;
    /**
     * Template reference that can be used to change default table row on custom html
     *
     * @docs-default
     *
     * @deprecated since 8.10.0 use ColumnConfig.cellTemplate instead
     */
    dataColumnsDataCellsTemplate: TemplateRef<DataColumnsDataCellsTemplateParams>;
    /**
     * Used to create custom header group. See example of usage on "Add dynamic data" table
     * @docs-default
     */
    headerGroupsTemplate: TemplateRef<{
        $implicit: RenderingColumnConfig[];
    }>;
    /**
     * ???
     * @docs-default
     */
    alwaysShowHeaderTooltip: boolean;
    /**
     * ???
     * @docs-default
     */
    alwaysShowCellTooltip: boolean;
    /**
     * Used to set a custom cell class for the expansion cell
     * @docs-default
     */
    expandedCellClass: string | string[];
    /**
     * The hash map that is used to control the expansion state of the groups
     * @docs-default {}
     */
    expandedGroupsKeys: ExpandedGroupKeys;
    /**
     * Padding of the nested group in pixels. Useful when you want to control padding value for a table group.
     * With a big nesting level, there is still a possibility that table data will be overlapped.
     * In such a case, you can change the control table columns width.
     * @docs-default 31
     */
    nestedGroupPadding: number;
    /**
     * Initial padding of nested group in pixels
     * @docs-default 13
     */
    expandindCellInitialPadding: number;
    /**
     * The custom template for the table group row
     * @docs-default
     */
    groupValueDataCellTemplate: TemplateRef<GroupValueDataCellTemplateParams>;
    /**
     * The delay to showing tooltip for table header and for the table cell
     * @docs-default 900
     */
    tooltipInitialDelayMs: number;
    /**
     * Used to set custom class on the AdaptTooltipComponent which is used to show tooltip
     * @docs-default ''
     */
    tooltipClass: string;
    /**
     * Used to set custom class for table rows
     * @docs-default
     */
    rowsCustomClass: ValueOrFunc2<string, RenderingGroupedRowData>;
    /**
     * Align pagination block to the left or right.
     * @docs-default 'left'
     */
    paginatorAlign: AdaptPaginatorAlign;
    /**
     * Used to toggle the visibility of the empty state visualization(AdaptEmptyStateComponent) for the empty
     * table(table is empty the [value] is null or have 0 length)
     * @docs-default true
     */
    hasEmptyState: boolean;
    /**
     * Used to turn on "infinite scroll" mode.In combination with [lazy]="true" allow to load the
     * data when the user scrolls to the bottom of the table. This is alternative to the per page pagination.
     * @docs-default false
     */
    enableInfiniteScrolling: boolean;
    /**
     * When a group expands the first data column extends if there is not enough place
     * @docs-default
     */
    updateFirstColumnWidth: (maxWidth: number, th: HTMLTableHeaderCellElement) => void;
    /**
     * Config of full table loader that is used AdaptBusyDirective under the hood
     * @docs-default {busy: null, backdrop: true, sticky: true, message: '', loaderType: 'section'}
     */
    busyConfig: BusyConfig;
    /**
     * Default 'FilterMatchMode' for all filters
     * @docs-default FilterMatchMode.contains
     */
    defaultFiltersMatchMode: FilterMatchMode;
    /**
     * Wraps long text on a new line instead of truncating
     * @docs-default false
     */
    wrapCellText: boolean;
    /**
     * Minimum amount of content buffer (in pixels) that the viewport must render
     * Additional information https://material.angular.io/cdk/scrolling/api
     * @docs-default
     */
    minBufferPx: number;
    /**
     * Configures how much buffer space to render back up to when it detects that more buffer is required
     * Additional information https://material.angular.io/cdk/scrolling/api
     * @docs-default
     */
    maxBufferPx: number;
    /**
     * Unique attribute test-id for QA
     * @since 11.14.0
     * @docs-default 'adapt-table'
     */
    testID: string;
    /**
     * Based on chosen mode customer will see different variants of selection.<br/>There are 3 possible variants:<br /><b>Both</b> - allows to use both type of selection: "Select on page" and "Select all in table"<br /><b>Chunk</b> - allows to use only "Select on page" type<br /><b>All</b> - allows to use only "Select all in table" type
     * @since 11.10.0
     * @docs-default AdaptTableHeaderSelectionMode.Both
     */
    headerSelectionMode: AdaptTableHeaderSelectionMode;
    /**
     * Number of disabled rows that are selected. Used to calculate header selection menu actions visibility and checkbox state in lazy mode
     * @since 11.10.0
     * @docs-default 0
     */
    disabledSelectedRowsCount: number;
    /**
     * Number of disabled rows that are not selected. Used to calculate header selection menu actions visibility and checkbox state in lazy mode
     * @since 11.10.0
     * @docs-default 0
     */
    disabledNotSelectedRowsCount: number;
    /**
     * Number of disabled rows that are selected in filtering mode. Used to calculate header selection menu actions visibility and checkbox state in lazy mode while filtering
     * @since 11.10.0
     * @docs-default 0
     */
    disabledSelectedFilteredRowsCount: number;
    /**
     Number of disabled rows that are not selected in filtering mode. Used to calculate header selection menu actions visibility and checkbox state in lazy mode while filtering
     * @since 11.10.0
     * @docs-default 0
     */
    disabledNotSelectedFilteredRowsCount: number;
    /**
     Number of selected rows in filtering mode. Used to calculate header selection menu actions visibility and checkbox state in lazy mode while filtering
     * @since 11.10.0
     * @docs-default 0
     */
    selectedFilteredRowsCount: number;
    /**
     Total amount of records inside group. Used to calculate header selection menu actions visibility and checkbox state in lazy mode
     * @since 11.10.0
     * @docs-default 0
     */
    totalRecordsInGroup: number;
    /**
     * Disabling possibility to select rows if set to true
     * @docs-default false
     */
    disableRowSelection: boolean;
    /**
     * Flag that should be set to true if table data has nesting structure. Used to show/hide expansion icon
     * @docs-default false
     */
    nestingStructureData: boolean;
    /**
     * In case when table should have nesting view 'nestingKey' property allow to configure name of property where children elements are located. Used to show/hide expansion icon
     * @docs-default 'children'
     */
    nestingKey: string;
    /**
     * Enables row editing on 'Enter' keydown when cell is in focus
     * @docs-default false
     */
    enableRowEditing: boolean;
    /**
     * @docs-default false
     */
    autoScrollToTop: boolean;
    /**
     * @docs-default
     *
     * @deprecated from v8.26.1 Use 'texts' instead
     */
    paginationTexts: PaginationTexts;
    /**
     * @docs-default
     *
     * @deprecated from v8.26.1 Use 'texts' instead
     */
    toolbarTexts: ToolbarTexts;
    /**
     * @docs-default
     *
     * @deprecated from v8.26.1 Use 'texts' instead
     */
    tableTexts: TableTexts;
    /**
     * @docs-default
     *
     * @deprecated from v8.26.1 Use 'texts' instead
     */
    filtersTexts: FiltersTexts;
    /**
     * @docs-default
     *
     * @deprecated from v8.26.1 Use 'texts' instead
     */
    headerCellMenuTexts: HeaderCellMenuTexts;
    /**
     * Custom texts for all parts of the table
     * @docs-default
     */
    texts: TableCustomTexts;
    /**
     * For showing a loader at the bottom of the table when is loading more row data
     * @docs-default
     */
    loadingMore: boolean;
    /**
     * Allows to merge columns while table resizing
     * @docs-default
     */
    mergeColumns: MergeColumnConfig[];
    /**
     * The resolver that will be applied for each row to check selection ability. Useful to apply custom logic for row selection ability
     * @docs-default
     */
    disabledRowSelectionResolver: (rowData: RowData) => boolean;
    /**
     * Used to pass function that allow or disallow columns reordering based on result. See example of usage on "Add dynamic data" table
     * @docs-default
     */
    allowColumnReorderingResolver: (draggedHeaderColumnData: AdaptDataDirective<HeaderDataCellDirectiveParams, HTMLTableHeaderCellElement>, droppedHeaderColumnData: AdaptDataDirective<HeaderDataCellDirectiveParams, HTMLTableHeaderCellElement>) => boolean;
    /**
     * The resolver that will be applied for each row to check ability to expand row. Useful to apply custom logic for row expansion
     * @docs-default
     */
    disableRowExpandingResolver: (rowData: RowData) => boolean;
    /**
     * Input can be useful to pass aria data for different parts of the table rows(used to add aria data for checkboxes, radiobuttons, expansion buttons and groups)
     * @docs-default
     * @since 12.14.0
     */
    rowAriaDataResolver: (rowData: RowDataItem | GroupedRowData) => AdaptTableRowAriaData;
    /**
     * Used to set static width for table. By default, table is flexible and try to change width depends on viewport
     * @docs-default null
     */
    tableWidthConfig: TableWidthConfig;
    /**
     * Template that will be shown when row expanded. If not set, the expansion icon will be hidden
     * @docs-default
     */
    set expandedRowTemplate(template: TemplateRef<ExpandedRowTemplateParams>);
    get expandedRowTemplate(): TemplateRef<ExpandedRowTemplateParams>;
    /**
     * Show/hide row data refreshing state
     * @docs-default
     */
    get isRefreshingRowData(): boolean;
    set isRefreshingRowData(value: boolean);
    /**
     * Rows data
     * @docs-default []
     */
    set value(value: RowData[]);
    get value(): RowData[];
    /**
     * Toggle table borders visibility
     * @docs-default false
     */
    bordered: boolean;
    /**
     * Show paginator when set to true
     * @docs-default
     */
    paginator: boolean;
    /**
     * Toggle "striped" rows mode. If true, every other row will have different background
     * @docs-default false
     */
    striped: boolean;
    /**
     * Emits the lazy load event
     */
    readonly onLazyLoad: EventEmitter<AdaptLazyLoadEvent>;
    /**
     * Emits on refresh button click
     */
    readonly rowDataRefresh: EventEmitter<MouseEvent>;
    /**
     * Emits the event on saving of row editing
     */
    readonly savedRowEditing: EventEmitter<SaveRowEvent>;
    /**
     * Emits the event on cancel of row editing
     */
    readonly canceledRowEditing: EventEmitter<SaveRowEvent>;
    /**
     * Emits the event when user clicks on checkbox of group
     */
    readonly groupSelection: EventEmitter<GroupSelectionEvent>;
    /**
     * Emits the event on click on a checkbox in the header of the table when groups present
     */
    readonly allGroupedRowsSelection: EventEmitter<AllGroupedRowsSelectionEvent>;
    /**
     * Emits the event on group expansion
     */
    readonly groupExpansion: EventEmitter<GroupExpansionEvent>;
    /**
     * Emits when column visibility changed
     */
    readonly columnsVisibilityChange: EventEmitter<AdaptColumnsVisibilityChange[]>;
    /**
     * Emits when the user starts dragging the item
     */
    readonly rowDragStart: EventEmitter<AdaptRowDragStartedEvent>;
    /**
     * Emits when the user has released a drag item, before any animations have started
     */
    readonly rowDragRelease: EventEmitter<AdaptRowDragReleaseEvent>;
    /**
     * Emits when the user stops dragging an item in the container
     */
    readonly rowDragEnd: EventEmitter<AdaptRowDragEndEvent>;
    /**
     * Emits when the user drops the item inside a container
     */
    readonly rowDragDrop: EventEmitter<AdaptDragDropEvent>;
    /**
     * Emits when the user click on any export button. Usage: listen to this event to be notified when to handle table data export <adapt-table (export)="function($event)"></adapt-table>
     * @since 12.10.0
     */
    readonly export: EventEmitter<ExportEvent>;
    /**
     * Emits when popupAnimationDone event triggered on toolbar dropdown item
     * Can be useful when you want to handle custom logic after dropdown opened/closed(for example register items from custom template for a correct work of keyboard navigation)
     * @since 12.18.0
     */
    readonly toolbarPopupAnimationDone: EventEmitter<ToolbarPopupAnimationDoneEvent>;
    mainClass: boolean;
    adaptTableClass: boolean;
    get scrollableClass(): boolean;
    get notScrollableClass(): boolean;
    get isEmptyState(): boolean;
    get hasSelection(): boolean;
    get hasExpandingBtn(): boolean;
    get canShowFullLoader(): boolean;
    get paginatorClass(): string;
    private _loading;
    get loading(): boolean;
    /**
     * Control loading state
     * @docs-default false
     */
    set loading(val: boolean);
    get selectionLimit(): number;
    get hasSelectionLimit(): boolean;
    get isSingleSortMode(): boolean;
    get isMultipleSortMode(): boolean;
    private _hasVerticalBodyOverflow;
    private _docListener;
    private _showedTooltipAfterGridMouseLeave;
    private _showInstantiatedTooltipDelayed;
    private _lastTooltipTargetCell;
    private _lastGridMouseEvent;
    private _dontEmitInfiniteScroll;
    private _instanceId;
    private _isRefreshingRowData;
    private _expandedRowTemplate;
    private _destroyed$;
    private _tooltipOverlayWithPortal;
    private _tooltipOverlayPlacements;
    private _defaultTexts;
    private readonly _defaultMinColWidth;
    constructor(el: ElementRef<HTMLElement>, zone: NgZone, tableService: TableService, cd: ChangeDetectorRef, filterService: FilterService, _dir: Directionality, _renderer: Renderer2, _adaptDeviceDetectionService: AdaptDeviceDetectionService, _ts: AdaptTranslateService, _deprecationMiddleware: AdaptTableDeprecationMiddleware, _overlayService: AdaptOverlayService, _injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    getTableService(): TableService;
    getScrollableBodyElement(): HTMLElement;
    getColumnData(dataItem: RowDataItem, column: ColumnConfig): PrimaryKey;
    getCurrentTableColumnsCount(columns: ColumnConfig[]): number;
    getVisibleColumns(columns?: ColumnConfig[]): ColumnConfig[];
    getColumnsForRendering(columns?: ColumnConfig[]): RenderingColumnConfig[];
    getColumnWidth(column: ColumnConfig, minWidth: string, colEl?: HTMLTableColElement): string | null;
    getColumnStyles(column: ColumnConfig, colEl?: HTMLTableColElement): {
        width: string;
        minWidth: string;
    };
    getRowGroupTitle(dataItem: GroupedRowData): string | unknown;
    getPlainExpandedRenderingRows(rowsData: RowData[], withNotExpanded?: boolean): RenderingGroupedRowData[];
    getCellStyle(renderRowData: RenderingGroupedRowData, dataColumnIndex?: number, column?: ColumnConfig): StylesObject;
    getMergedCellStyle(renderRowData: RenderingGroupedRowData, dataColumnIndex?: number, columns?: ColumnConfig[]): StylesObject;
    /** Returns reference for filteredValue || value || [] */
    getAllCurrentRows(): RowData[];
    getEmptyStateLabelText(): string;
    getDataCellClass(column: ColumnConfig, renderRowData: RenderingGroupedRowData, element: HTMLTableDataCellElement): string;
    getMergedDataCellClass(columns: ColumnConfig[], renderRowData: RenderingGroupedRowData, element: HTMLTableDataCellElement): string;
    getHeaderClass(column: ColumnConfig): string;
    getMergedHeaderClass(columns: ColumnConfig[]): string;
    getDataRowClass(renderingRowData: RenderingGroupedRowData): string;
    getGroupRowClass(renderingRowData: RenderingGroupedRowData): string;
    getColumnTemplateParams(column: ColumnConfig, renderRowData: RenderingGroupedRowData): DataCellTemplateParams;
    getGroupValueDataCellTemplateParams(renderingRowData: RenderingGroupedRowData): GroupValueDataCellTemplateParams;
    getCurrentPageDisplayingRows(): RowData[];
    getCurrentPageDisplayingRowsItems(): RowDataItem[];
    getRowsItems(rows: RowData[]): RowDataItem[];
    getCurrentPageRenderingDataRows(withNotExpanded?: boolean): RenderingGroupedRowData[];
    getDataCellTabIndex(column: ColumnConfig, renderRowData: RenderingGroupedRowData): number;
    getMergedDataCellTabIndex(columns: ColumnConfig[], renderRowData: RenderingGroupedRowData): number;
    getDataRowDirectiveParams(renderingRowData: RenderingGroupedRowData): DataRowDirectiveParams;
    getHeaderDataCellDirectiveParams(renderingColumn: RenderingColumnConfig, index: number): HeaderDataCellDirectiveParams;
    getDataCellDirectiveParams(renderingColumn: RenderingColumnConfig, renderRowData: RenderingGroupedRowData): DataCellDirectiveParams;
    getExpandedRowTemplateParams(dataItem: RowDataItem, columns: ColumnConfig[], rowIndex: number): ExpandedRowTemplateParams;
    getDataCellTemplateParams(column: ColumnConfig, renderRowData: RenderingGroupedRowData): CellTemplateParams;
    getPrimaryKey(data: RowDataItem): PrimaryKey;
    getActionConfig(column: ColumnConfig): ColumnActionsConfig;
    getTableWidth(tableWidthConfig: TableWidthConfig, isMobile: boolean): string;
    hasNotRowNestingLevel(renderRowData: RenderingGroupedRowData): boolean;
    hasReachedTotalRecords(): boolean;
    /**
     * In case if user send us `totalRecords` as `null` we assume that there is no possibility to calculate
     * such data on customer side(for example server restrictions)
     */
    isTotalRecordsInfoAvailable(): boolean;
    hasAtLeastOneRowGroupedData(): boolean;
    shouldShowExpandingButton(renderRowData: RenderingGroupedRowData): boolean;
    isColumnVisible(column: ColumnConfig): boolean;
    isExpandedGroup(groupedRowData: GroupedRowData): boolean;
    isGroupCheckboxDisabled(grd: GroupedRowData): boolean;
    isChildrenExist(rowData: RowDataItem): boolean;
    isFilterableColumn(column: ColumnConfig): boolean;
    isColumnFrozen(column: ColumnConfig): boolean;
    hasAtLeastOneFrozenColumn(): boolean;
    setDefaultTexts(translation: KeyValueObject): void;
    onRadiobuttonModelChange(rowDataItem: RowDataItem): void;
    updateHasBodyScroll(): void;
    handleColumnResized(event: ColumnResized): void;
    onGroupToggleClick(groupedRowData: GroupedRowData): void;
    updateFirstHeaderCellWidth(): void;
    goRecursivelyByItemsInAllGroups(cb: (dataItem: RowDataItem) => void): void;
    goRecursivelyByItemsInGroups(rows: RowData[], cb: (dataItem: RowDataItem) => void): void;
    goRecursivelyByItemsInGroup(rowData: RowData, cb: (dataItem: RowDataItem) => void): void;
    resolveFieldData(data: RowDataItem, field: string): PrimaryKey;
    createLazyLoadMetadata(eventSource: AdaptTableEventSource): AdaptLazyLoadEvent;
    subscribeOnTableBodyScroll(): void;
    detectChangesForTooltip(): void;
    setIsLoadingState(value: boolean): void;
    tryScrollToTopTableBody(): void;
    onPageChange(event: AdaptPageChangeEvent): void;
    resetScrollTop(): void;
    scrollToVirtualIndex(index: number): void;
    handleScrollableWrapperResizing(): void;
    scrollTo(options: ScrollToOptions): void;
    setDefaultActionColWidth(): void;
    trackByForRenderingRows(index: number, renderRowData: RenderingGroupedRowData): string | number;
    trackByForRowsData(index: number, row: RowData): PrimaryKey;
    trackByForRenderingColumns(index: number, renderingColumn: RenderingColumnConfig): string | number;
    trackByForColumns(index: number, column: ColumnConfig): string | number;
    getGroupSelectionState(grd: GroupedRowData): CheckboxState;
    getRowSelectionArray(): RowDataItem[];
    getRowSelectionKeys(): KeyValueObject<boolean>;
    getSelectableRowsItems(rows: RowData[]): RowDataItem[];
    isSingleSelectionRowSelected(data: RowDataItem): boolean;
    isRowSelected(rowDataItem: RowDataItem | PrimaryKey): boolean;
    isRowSelectionCheckboxDisabled(data: RowDataItem): boolean;
    isRowSelectionDisabled(rowData: RowData): boolean;
    isSelectedGroupCheckbox(grd: GroupedRowData): boolean;
    isGroupSelectionIndeterminate(grd: GroupedRowData): boolean;
    onGroupSelectionChanged(checked: boolean, grd: GroupedRowData): void;
    addToRowSelection(dataItems: RowDataItem[]): void;
    toggleRowSelection(dataItem: RowDataItem, event?: Event): boolean;
    removeFromRowSelection(dataItems: RowDataItem[]): void;
    unselectAllSelected(): void;
    onToogleGroupedRowsSelection(checked: boolean, rows: RowData[]): void;
    handleHeaderCheckboxToggle(event: AdaptTableHeaderCheckboxToggleEvent): void;
    onReordarableRowMouseDown(elem: HTMLTableRowElement, isGroup: boolean): void;
    setColumnsWidth(row: HTMLTableRowElement): void;
    setColumnsWidthToAuto(row: HTMLTableRowElement): void;
    onCdkDropListSortedRow(event: CdkDragSortEvent<RowData[], RenderingGroupedRowData>): void;
    onRowDragStarted(event: CdkDragStart): void;
    onRowDragDropped(event: CdkDragDrop<RowData[]>, elem: HTMLTableRowElement): void;
    onRowDragEnded(event: CdkDragEnd): void;
    onRowDragReleased(event: CdkDragRelease): void;
    getEditableClonedRow(dataItem: RowDataItem): RowDataItem;
    isEditableColumn(column: ColumnConfig): boolean;
    initRowEditing(dataItem: RowDataItem): void;
    saveRowEditing(dataItem: RowDataItem): void;
    cancelRowEditing(dataItem: RowDataItem): void;
    onTableCellDoubleClick(rowData: RowDataItem): void;
    onTextfieldKeydown(dataItem: RowDataItem, event: KeyboardEvent): void;
    getSortedDataRows(): AdaptDataDirective<DataRowDirectiveParams, HTMLTableRowElement>[];
    getColumnSortOrder(field: string): SortOrder;
    isColumnSortOrderAsc(field: string): boolean;
    isSortableColumn(column: ColumnConfig): boolean;
    isSortableRenderingColumn(renderingColumn: RenderingColumnConfig): boolean;
    updateMultiSortMeta(multiSortMeta: SortMeta[]): void;
    onTableRefresh(): void;
    setQuickFilter(value: string): void;
    private _emitLazyLoadEvent;
    private _emitOnSortForMultiSorting;
    private _getColumnByField;
    private _autoScrollTopOnValueSourceChangeForNotLazy;
    private _setHostClassHasNotScroll;
    private _updateRowSelection;
    private _onTableMouseMoveDebounced;
    private _getCellTooltipData;
    private _getHeaderDataCellTooltipData;
    private _showTooltip;
    private _showInstantiatedTooltip;
    private _hideTooltip;
    private _onTableMouseLeave;
    private _onTableMouseMove;
    private _getCurrentFocusedCellData;
    private _getCellData;
    private _enableKeyboardNavigation;
    private _onTableKeydown;
    private _onTableClick;
    private _initRowEditingOfFocusedCell;
    private _saveAllEditingRows;
    private _toggleRowSelectionOfFocusedCell;
    private _focusOnCellByNavigation;
    private _hasCellFocus;
    private _getBusyConfig;
    private _hasAllChildItemsDisabledForSelection;
    private _recalculateActionColWidth;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptTableComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptTableComponent, "adapt-table", never, { "sortable": "sortable"; "filterable": "filterable"; "triggerableFilters": "triggerableFilters"; "explicitSearchBtn": "explicitSearchBtn"; "enableReorderableRows": "enableReorderableRows"; "suppressTooltip": "suppressTooltip"; "toolbarConfig": "toolbarConfig"; "dataColumnsColsTemplate": "dataColumnsColsTemplate"; "dataColumnsHeaderTemplate": "dataColumnsHeaderTemplate"; "dataColumnsDataCellsTemplate": "dataColumnsDataCellsTemplate"; "headerGroupsTemplate": "headerGroupsTemplate"; "alwaysShowHeaderTooltip": "alwaysShowHeaderTooltip"; "alwaysShowCellTooltip": "alwaysShowCellTooltip"; "expandedCellClass": "expandedCellClass"; "expandedGroupsKeys": "expandedGroupsKeys"; "nestedGroupPadding": "nestedGroupPadding"; "expandindCellInitialPadding": "expandindCellInitialPadding"; "groupValueDataCellTemplate": "groupValueDataCellTemplate"; "tooltipInitialDelayMs": "tooltipInitialDelayMs"; "tooltipClass": "tooltipClass"; "rowsCustomClass": "rowsCustomClass"; "paginatorAlign": "paginatorAlign"; "hasEmptyState": "hasEmptyState"; "enableInfiniteScrolling": "enableInfiniteScrolling"; "updateFirstColumnWidth": "updateFirstColumnWidth"; "busyConfig": "busyConfig"; "defaultFiltersMatchMode": "defaultFiltersMatchMode"; "wrapCellText": "wrapCellText"; "minBufferPx": "minBufferPx"; "maxBufferPx": "maxBufferPx"; "testID": "testID"; "headerSelectionMode": "headerSelectionMode"; "disabledSelectedRowsCount": "disabledSelectedRowsCount"; "disabledNotSelectedRowsCount": "disabledNotSelectedRowsCount"; "disabledSelectedFilteredRowsCount": "disabledSelectedFilteredRowsCount"; "disabledNotSelectedFilteredRowsCount": "disabledNotSelectedFilteredRowsCount"; "selectedFilteredRowsCount": "selectedFilteredRowsCount"; "totalRecordsInGroup": "totalRecordsInGroup"; "disableRowSelection": "disableRowSelection"; "nestingStructureData": "nestingStructureData"; "nestingKey": "nestingKey"; "enableRowEditing": "enableRowEditing"; "autoScrollToTop": "autoScrollToTop"; "paginationTexts": "paginationTexts"; "toolbarTexts": "toolbarTexts"; "tableTexts": "tableTexts"; "filtersTexts": "filtersTexts"; "headerCellMenuTexts": "headerCellMenuTexts"; "texts": "texts"; "loadingMore": "loadingMore"; "mergeColumns": "mergeColumns"; "disabledRowSelectionResolver": "disabledRowSelectionResolver"; "allowColumnReorderingResolver": "allowColumnReorderingResolver"; "disableRowExpandingResolver": "disableRowExpandingResolver"; "rowAriaDataResolver": "rowAriaDataResolver"; "tableWidthConfig": "tableWidthConfig"; "expandedRowTemplate": "expandedRowTemplate"; "isRefreshingRowData": "isRefreshingRowData"; "value": "value"; "bordered": "bordered"; "paginator": "paginator"; "striped": "striped"; "loading": "loading"; }, { "onLazyLoad": "onLazyLoad"; "rowDataRefresh": "rowDataRefresh"; "savedRowEditing": "savedRowEditing"; "canceledRowEditing": "canceledRowEditing"; "groupSelection": "groupSelection"; "allGroupedRowsSelection": "allGroupedRowsSelection"; "groupExpansion": "groupExpansion"; "columnsVisibilityChange": "columnsVisibilityChange"; "rowDragStart": "rowDragStart"; "rowDragRelease": "rowDragRelease"; "rowDragEnd": "rowDragEnd"; "rowDragDrop": "rowDragDrop"; "export": "export"; "toolbarPopupAnimationDone": "toolbarPopupAnimationDone"; }, never, never>;
}
