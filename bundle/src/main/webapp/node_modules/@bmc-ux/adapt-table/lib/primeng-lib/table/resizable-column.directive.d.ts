import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy, Renderer2 } from '@angular/core';
import { AdaptTableComponent } from '../../adapt-table.component';
import { ColumnResized } from '../../adapt-table.models';
import * as i0 from "@angular/core";
export declare class ResizableColumn implements AfterViewInit, OnDestroy {
    dt: AdaptTableComponent;
    el: ElementRef;
    zone: NgZone;
    private _renderer;
    pResizableColumnDisabled: boolean;
    readonly columnResized: EventEmitter<ColumnResized>;
    resizer: HTMLSpanElement;
    resizerMouseDownListener: EventListenerOrEventListenerObject;
    documentMouseMoveListener: EventListenerOrEventListenerObject;
    documentMouseUpListener: EventListenerOrEventListenerObject;
    private readonly _minColResizeWidth;
    constructor(dt: AdaptTableComponent, el: ElementRef, zone: NgZone, _renderer: Renderer2);
    ngAfterViewInit(): void;
    bindDocumentEvents(): void;
    unbindDocumentEvents(): void;
    onMouseDown(event: DragEvent): void;
    onDocumentMouseMove(event: DragEvent): void;
    onDocumentMouseUp(event: DragEvent): void;
    isEnabled(): boolean;
    ngOnDestroy(): void;
    onColumnResizeEnd(event: DragEvent, column: HTMLTableDataCellElement): void;
    private _checkIfOverlapLeftSibling;
    private _checkIfOverlapRightSibling;
    private _handleExpandModeResize;
    private _setScrollableItemsWidthOnExpandResize;
    private _resizeColGroup;
    private _getColumnSiblingsWidths;
    private _getColumnResizeDelta;
    private _handleFitModeResize;
    private _noSiblingOverlapResize;
    private _handleLeftSiblingOverlapResize;
    private _handleRightSiblingOverlapResize;
    private _resizeTableSections;
    private _resizeColGroupForSiblings;
    private _recalculateColumnSiblingsWidths;
    private _emitOnColResize;
    static ɵfac: i0.ɵɵFactoryDeclaration<ResizableColumn, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ResizableColumn, "[pResizableColumn]", never, { "pResizableColumnDisabled": "pResizableColumnDisabled"; }, { "columnResized": "columnResized"; }, never>;
}
