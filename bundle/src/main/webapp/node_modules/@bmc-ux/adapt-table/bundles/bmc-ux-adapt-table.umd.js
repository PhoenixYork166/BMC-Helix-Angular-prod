(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/animations'), require('@angular/cdk/drag-drop'), require('@angular/cdk/keycodes'), require('@angular/cdk/portal'), require('@angular/core'), require('@bmc-ux/adapt-angular'), require('lodash-es'), require('rxjs'), require('rxjs/operators'), require('primeng/api'), require('primeng/dom'), require('primeng/utils'), require('@angular/cdk/bidi'), require('@angular/common'), require('@angular/forms'), require('@angular/platform-browser'), require('@angular/cdk/a11y'), require('@angular/cdk/scrolling'), require('primeng/paginator')) :
    typeof define === 'function' && define.amd ? define('@bmc-ux/adapt-table', ['exports', '@angular/animations', '@angular/cdk/drag-drop', '@angular/cdk/keycodes', '@angular/cdk/portal', '@angular/core', '@bmc-ux/adapt-angular', 'lodash-es', 'rxjs', 'rxjs/operators', 'primeng/api', 'primeng/dom', 'primeng/utils', '@angular/cdk/bidi', '@angular/common', '@angular/forms', '@angular/platform-browser', '@angular/cdk/a11y', '@angular/cdk/scrolling', 'primeng/paginator'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["bmc-ux"] = global["bmc-ux"] || {}, global["bmc-ux"]["adapt-table"] = {}), global.ng.animations, global.ng.cdk.dragDrop, global.ng.cdk.keycodes, global.ng.cdk.portal, global.ng.core, global["@bmc-ux/adapt-angular"], global["lodash-es"], global.rxjs, global.rxjs.operators, global.api, global.dom, global.utils, global.ng.cdk.bidi, global.ng.common, global.ng.forms, global.ng.platformBrowser, global.ng.cdk.a11y, global.ng.cdk.scrolling, global.paginator));
})(this, (function (exports, animations, i3, keycodes, portal, i0, i1, lodashEs, rxjs, operators, i2, dom, utils, i3$1, i2$1, i5, i4, i2$2, i2$3, paginator) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3$1);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i2__namespace$3 = /*#__PURE__*/_interopNamespace(i2$3);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    // TODO: Use Enum instead
    var AdaptTableFilters = /** @class */ (function () {
        function AdaptTableFilters() {
        }
        return AdaptTableFilters;
    }());
    AdaptTableFilters.SELECT_FILTER = 'selectFilter';
    AdaptTableFilters.TEXT_FILTER = 'textFilter';
    AdaptTableFilters.DEFAULT_FILTER = AdaptTableFilters.TEXT_FILTER;
    /* Enums */
    /**
     * The visibility priority of toolbar parts.
     * It is used to control which toolbar part will be hidden to the dropdown first in case there is no space for all of them.
     * The lowest number will be hidden last.
     */
    exports.ToolbarItemsByPriority = void 0;
    (function (ToolbarItemsByPriority) {
        /**
         * Global table search input
         */
        ToolbarItemsByPriority[ToolbarItemsByPriority["SEARCH"] = 0] = "SEARCH";
        /**
         * Selection limit that is based on "selectionLimit" property from the "ToolbarConfig"
         */
        ToolbarItemsByPriority[ToolbarItemsByPriority["SELECTION_LIMIT"] = 1] = "SELECTION_LIMIT";
        /**
         * Counter text(ex. "Records from 1 to 10 of 23")
         */
        ToolbarItemsByPriority[ToolbarItemsByPriority["COUNTER"] = 2] = "COUNTER";
        /**
         * Refresh button
         */
        ToolbarItemsByPriority[ToolbarItemsByPriority["REFRESH"] = 3] = "REFRESH";
        /**
         * Columns visibility control
         */
        ToolbarItemsByPriority[ToolbarItemsByPriority["VISIBLE_COLUMNS"] = 4] = "VISIBLE_COLUMNS";
        /**
         * Section for the custom filter(eg. for Advanced filter controlled by customer)
         */
        ToolbarItemsByPriority[ToolbarItemsByPriority["FILTER"] = 5] = "FILTER";
        /**
         * Section for the custom filtering results
         */
        ToolbarItemsByPriority[ToolbarItemsByPriority["FILTER_RESULTS"] = 6] = "FILTER_RESULTS";
        /**
         * Custom section from the left side
         */
        ToolbarItemsByPriority[ToolbarItemsByPriority["LEFT_CUSTOM"] = 7] = "LEFT_CUSTOM";
        /**
         * Custom section from the right side
         */
        ToolbarItemsByPriority[ToolbarItemsByPriority["RIGHT_CUSTOM"] = 8] = "RIGHT_CUSTOM";
        /**
         * Export control
         */
        ToolbarItemsByPriority[ToolbarItemsByPriority["EXPORT"] = 9] = "EXPORT";
    })(exports.ToolbarItemsByPriority || (exports.ToolbarItemsByPriority = {}));
    /**
     * Possible variants for the checkbox selection state
     */
    exports.CheckboxState = void 0;
    (function (CheckboxState) {
        /**
         * Row is not selected
         */
        CheckboxState[CheckboxState["Unselected"] = 0] = "Unselected";
        /**
         * Row is selected
         */
        CheckboxState[CheckboxState["Selected"] = 1] = "Selected";
        /**
         * Some rows are selected. This is used to show the selection state of the group or table itself
         */
        CheckboxState[CheckboxState["Indeterminate"] = 2] = "Indeterminate";
    })(exports.CheckboxState || (exports.CheckboxState = {}));
    /**
     * Represents the event source type for the [lazy] table
     * Can be useful to differentiate between the event source inside (onLazyLoad) to provide different behavior
     */
    exports.AdaptTableEventSource = void 0;
    (function (AdaptTableEventSource) {
        /**
         * Triggered when the lazy load is triggered on initialization. Depending on the "lazyLoadOnInit" property
         */
        AdaptTableEventSource["LazyOnInit"] = "lazyOnInit";
        /**
         * Triggered when single sorting is happening
         */
        AdaptTableEventSource["SingleSortChange"] = "singleSortChange";
        /**
         * Triggered when multi sorting is happening
         */
        AdaptTableEventSource["MultipleSortChange"] = "multipleSortChange";
        /**
         * Triggered when filtering is happening
         */
        AdaptTableEventSource["FilterChange"] = "filterChange";
        /**
         * @deprecated Not used anymore
         */
        AdaptTableEventSource["VirtualScroll"] = "virtualScroll";
        /**
         * Triggered when the page is changed
         */
        AdaptTableEventSource["PageChange"] = "pageChange";
        /**
         * Triggered when table "resetting"
         */
        AdaptTableEventSource["Reset"] = "reset";
        /**
         * Triggered when the table data can be loaded(ex. when user scrolls to the bottom of the table)
         */
        AdaptTableEventSource["LoadMore"] = "loadMore";
        /**
         * Triggered when the table is refreshing(ex. user click on the toolbar refresh button)
         */
        AdaptTableEventSource["Refresh"] = "refresh";
    })(exports.AdaptTableEventSource || (exports.AdaptTableEventSource = {}));
    exports.FilterMatchMode = void 0;
    (function (FilterMatchMode) {
        /**
         * Check that the data is starts with the filter value
         */
        FilterMatchMode["startsWith"] = "startsWith";
        /**
         * Check that the data contains filter value
         */
        FilterMatchMode["contains"] = "contains";
        /**
         * Check that the data is ends with the filter value
         */
        FilterMatchMode["endsWith"] = "endsWith";
        /**
         * Check that the data is equal to the filter value
         * For the "date" type data comparing by the "getTime" method
         * For all other types comparing by the "toString" method
         */
        FilterMatchMode["equals"] = "equals";
        /**
         * Check that the data is not equal to the filter value
         * Opposite to "equals"
         */
        FilterMatchMode["notEquals"] = "notEquals";
        /**
         * Check that the data array contains the filter value by applying "equals" comparison from https://github.com/primefaces/primeng/blob/master/src/app/components/utils/objectutils.ts
         */
        FilterMatchMode["in"] = "in";
        /**
         * Check that the data is lower than the filter value
         */
        FilterMatchMode["lt"] = "lt";
        /**
         * Check that the data is lower than or equal to the filter value
         */
        FilterMatchMode["lte"] = "lte";
        /**
         * Check that the data is greater than the filter value
         */
        FilterMatchMode["gt"] = "gt";
        /**
         * Check that the data is greater than or equal to the filter value
         */
        FilterMatchMode["gte"] = "gte";
    })(exports.FilterMatchMode || (exports.FilterMatchMode = {}));
    /**
     * Represents allowed sorting directions
     */
    exports.SortOrder = void 0;
    (function (SortOrder) {
        /**
         * Sort in ascending order
         */
        SortOrder[SortOrder["Asc"] = 1] = "Asc";
        /**
         * Sort in descending order
         */
        SortOrder[SortOrder["Desc"] = -1] = "Desc";
    })(exports.SortOrder || (exports.SortOrder = {}));
    /**
     * Represents allowed storage types
     */
    exports.StorageType = void 0;
    (function (StorageType) {
        /**
         * Local storage
         */
        StorageType["Local"] = "local";
        /**
         * Session storage
         */
        StorageType["Session"] = "session";
    })(exports.StorageType || (exports.StorageType = {}));
    /**
     * Represents allowed sorting modes
     */
    exports.SortMode = void 0;
    (function (SortMode) {
        /**
         * Sort by single column
         */
        SortMode["Single"] = "single";
        /**
         * Sort by multiple columns
         */
        SortMode["Multiple"] = "multiple";
    })(exports.SortMode || (exports.SortMode = {}));
    /**
     * Represents allowed column resize modes
     */
    exports.ResizeMode = void 0;
    (function (ResizeMode) {
        /**
         * Change only width of 2 sibling columns by increasing one column and decreasing the other one
         */
        ResizeMode["Fit"] = "fit";
        /**
         * Change width of one column only and also increase the width of the table itself
         */
        ResizeMode["Expand"] = "expand";
    })(exports.ResizeMode || (exports.ResizeMode = {}));
    /**
     * Represents allowed column resize directions
     */
    exports.ResizeDirection = void 0;
    (function (ResizeDirection) {
        /**
         * Resize column to the left
         */
        ResizeDirection["Left"] = "left";
        /**
         * Resize column to the right
         */
        ResizeDirection["Right"] = "right";
    })(exports.ResizeDirection || (exports.ResizeDirection = {}));
    /**
     * List of html classes used in the table.
     *
     * Please be aware that class names can be changed so can't be used as constants while interacting with the table template
     */
    exports.AdaptTableClasses = void 0;
    (function (AdaptTableClasses) {
        /**
         * Always applied to the table host element(<adapt-table>)
         */
        AdaptTableClasses["Main"] = "adapt-grid";
        /**
         * Always applied to the table host element(<adapt-table>)
         */
        AdaptTableClasses["AdaptTable"] = "adapt-table";
        /**
         * Applied to the table host element(<adapt-table>) when the table has border, [bordered] is set to true
         */
        AdaptTableClasses["Bordered"] = "adapt-grid-bordered";
        /**
         * Applied to the table host element(<adapt-table>) when the table pagination is enabled, [paginator] is set to true
         */
        AdaptTableClasses["Pageable"] = "adapt-table-pageable";
        /**
         * Applied to the table host element(<adapt-table>) when the table has scrollable body, [scrollable] is set to true
         */
        AdaptTableClasses["Scrollable"] = "adapt-table-scrollable";
        /**
         * Applied to the table host element(<adapt-table>) when the table has striped rows, [striped] is set to true
         */
        AdaptTableClasses["Striped"] = "adapt-table--striped";
        /**
         * Applied to the table host element(<adapt-table>) when the table is empty, [value] is null or an empty array
         */
        AdaptTableClasses["IsEmptyState"] = "adapt-table--empty-state";
        /**
         * Applied to the table host element(<adapt-table>) when the table has no scrollable body, [scrollable] is set to false
         */
        AdaptTableClasses["NotScrollable"] = "adapt-table-not-scrollable";
        /**
         * ???
         */
        AdaptTableClasses["HasNotVerticalBodyOverflow"] = "adapt-table--has-not-overflow";
        /**
         * Applied to the table host element(<adapt-table>) when the table loading state is true, [loading] is set to true
         */
        AdaptTableClasses["LoadingFullTable"] = "adapt-grid--loading";
        /**
         * Applied to the table cell element for the column with actions
         */
        AdaptTableClasses["ActionsCell"] = "at-actions-cell";
        /**
         * Applied to the table cell element if column is editable
         */
        AdaptTableClasses["EditingCell"] = "at-cell--editing";
        /**
         * Always applied to the table element inside the table header element
         */
        AdaptTableClasses["HeaderContainer"] = "c-header-container";
        /**
         * Always applied to the table element inside the table header element
         */
        AdaptTableClasses["HeaderTitle"] = "c-header__title";
        /**
         * Always applied to the table header element
         */
        AdaptTableClasses["HeaderDataCell"] = "at-header-data-cell";
        /**
         * Always applied for scrollable body table parent container (in non-virtual scroll mode)
         */
        AdaptTableClasses["TableScrollableBody"] = "ui-table-scrollable-body";
        /**
         * Always applied for "cdk-virtual-scroll-viewport" (in virtual scroll mode)
         */
        AdaptTableClasses["TableVirtualScrollableBody"] = "ui-table-virtual-scrollable-body";
        /**
         * Always applied for scrollable header table parent container (in both modes, virtual scroll and non-virtual scroll)
         */
        AdaptTableClasses["TableScrollableHeader"] = "ui-table-scrollable-header";
        /**
         * Always applied for scrollable footer table parent container (in both modes, virtual scroll and non-virtual scroll)
         */
        AdaptTableClasses["TableScrollableFooter"] = "ui-table-scrollable-footer";
        /**
         * Always applied for scrollable body table element (in both modes, virtual scroll and non-virtual scroll)
         */
        AdaptTableClasses["TableScrollableBodyTable"] = "ui-table-scrollable-body-table";
        /**
         * Always applied for scrollable header table element (in both modes, virtual scroll and non-virtual scroll)
         */
        AdaptTableClasses["TableScrollableHeaderTable"] = "ui-table-scrollable-header-table";
        /**
         * Always applied for scrollable footer table element (in both modes, virtual scroll and non-virtual scroll)
         */
        AdaptTableClasses["TableScrollableFooterTable"] = "ui-table-scrollable-footer-table";
    })(exports.AdaptTableClasses || (exports.AdaptTableClasses = {}));
    /**
     * Represent if the column merged with other column or not
     */
    exports.RenderingColumnType = void 0;
    (function (RenderingColumnType) {
        /**
         * The column is not merged with other column
         */
        RenderingColumnType[RenderingColumnType["Simple"] = 1] = "Simple";
        /**
         * The column is merged with other column
         */
        RenderingColumnType[RenderingColumnType["Merged"] = 2] = "Merged";
    })(exports.RenderingColumnType || (exports.RenderingColumnType = {}));
    exports.AdaptTableHeaderCheckboxToggleSource = void 0;
    (function (AdaptTableHeaderCheckboxToggleSource) {
        /**
         * The source of the event is "Select all" item
         */
        AdaptTableHeaderCheckboxToggleSource["SelectAll"] = "selectAll";
        /**
         * The source of the event is "Deselect all" item
         */
        AdaptTableHeaderCheckboxToggleSource["DeselectAll"] = "deselectAll";
        /**
         * The source of the event is "Select on page" item
         */
        AdaptTableHeaderCheckboxToggleSource["SelectOnPage"] = "selectOnPage";
        /**
         * @deprecated since 12.18.0
         * Not used anymore
         */
        AdaptTableHeaderCheckboxToggleSource["SelectVisible"] = "selectVisible";
    })(exports.AdaptTableHeaderCheckboxToggleSource || (exports.AdaptTableHeaderCheckboxToggleSource = {}));
    /**
     * @deprecated since 12.18.0
     * Not used anymore
     */
    exports.AdaptTableSelectionMachineState = void 0;
    (function (AdaptTableSelectionMachineState) {
        AdaptTableSelectionMachineState["unselected"] = "unselected";
        AdaptTableSelectionMachineState["selected"] = "selected";
        AdaptTableSelectionMachineState["indeterminate"] = "indeterminate";
    })(exports.AdaptTableSelectionMachineState || (exports.AdaptTableSelectionMachineState = {}));
    /**
     * Allowed values for the [headerSelectionMode] input
     */
    exports.AdaptTableHeaderSelectionMode = void 0;
    (function (AdaptTableHeaderSelectionMode) {
        /**
         * Allows to use both type of selection: "Select on page" and "Select all in table"
         */
        AdaptTableHeaderSelectionMode["Both"] = "both";
        /**
         * Allows to use only "Select on page" type of selection
         */
        AdaptTableHeaderSelectionMode["Chunk"] = "chunk";
        /**
         * Allows to use only "Select all in table" type of selection
         */
        AdaptTableHeaderSelectionMode["All"] = "all";
    })(exports.AdaptTableHeaderSelectionMode || (exports.AdaptTableHeaderSelectionMode = {}));
    /**
     * Allowed export formats
     */
    exports.ExportType = void 0;
    (function (ExportType) {
        /**
         * Export to CSV format
         */
        ExportType["CSV"] = "CSV";
        /**
         * Export to PDF format
         */
        ExportType["PDF"] = "PDF";
    })(exports.ExportType || (exports.ExportType = {}));

    var TableService = /** @class */ (function () {
        function TableService() {
            this.sortSource = new rxjs.Subject();
            this.selectionSource = new rxjs.Subject();
            this.valueSource = new rxjs.Subject();
            this.totalRecordsSource = new rxjs.Subject();
            this.columnsSource = new rxjs.Subject();
            this.viewRelatedDataSource = new rxjs.Subject();
            this.sortSource$ = this.sortSource.asObservable();
            this.selectionSource$ = this.selectionSource.asObservable();
            this.valueSource$ = this.valueSource.asObservable();
            this.totalRecordsSource$ = this.totalRecordsSource.asObservable();
            this.columnsSource$ = this.columnsSource.asObservable();
            // The idea under the viewRelatedDataSource is to be triggered each time when the table view related data has changed
            this.viewRelatedDataSource$ = this.viewRelatedDataSource.asObservable();
        }
        TableService.prototype.onSort = function (sortMeta) {
            this.sortSource.next(sortMeta);
            this.onViewRelatedDataChange();
        };
        TableService.prototype.onSelectionChange = function (selection) {
            this.selectionSource.next(selection);
        };
        TableService.prototype.onValueChange = function (value) {
            this.valueSource.next(value);
            this.onViewRelatedDataChange();
        };
        TableService.prototype.onTotalRecordsChange = function (value) {
            this.totalRecordsSource.next(value);
        };
        TableService.prototype.onColumnsChange = function (columns) {
            this.columnsSource.next(columns);
            this.onViewRelatedDataChange();
        };
        TableService.prototype.onViewRelatedDataChange = function () {
            this.viewRelatedDataSource.next();
        };
        return TableService;
    }());
    TableService.ɵfac = function TableService_Factory(t) { return new (t || TableService)(); };
    TableService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: TableService, factory: TableService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(TableService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], null, null);
    })();

    var _c0$d = ["container"];
    var _c1$9 = ["resizeHelper"];
    var _c2$7 = ["reorderIndicatorUp"];
    var _c3$4 = ["reorderIndicatorDown"];
    var _c4$3 = ["table"];
    // eslint-disable-next-line @angular-eslint/component-class-suffix
    var Table = /** @class */ (function () {
        function Table(el, zone, tableService, cd, filterService) {
            this.el = el;
            this.zone = zone;
            this.tableService = tableService;
            this.cd = cd;
            this.filterService = filterService;
            /**
             * Number of page links to display in paginator
             * @docs-default 5
             */
            this.pageLinks = 5;
            /**
             * Whether to show pagination even there is only one page
             * @docs-default true
             */
            this.alwaysShowPaginator = true;
            // TODO: use type instead of string (type PaginatorPosition = "top" | "bottom" | "both")
            /**
             * Position of the paginator, options are "top","bottom" or "both"
             * @docs-default 'bottom'
             */
            this.paginatorPosition = 'bottom';
            /**
             * Paginator dropdown height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value
             * @docs-default '200px'
             */
            this.paginatorDropdownScrollHeight = '200px';
            /**
             * Template of the current page report element.
             * Available placeholders are {currentPage},{totalPages},{rows},{first},{last} and {totalRecords}
             * @docs-default '{currentPage} of {totalPages}'
             */
            this.currentPageReportTemplate = '{currentPage} of {totalPages}';
            // TODO: Use enum instead number (SortOrder {ASC: 1, DESC: -1})
            /**
             * Sort order to use when an unsorted column gets sorted by user interaction
             * @docs-default 1
             */
            this.defaultSortOrder = 1;
            // TODO: Use type instead number (type SortMode = 'single' | 'multiple')
            /**
             * Defines whether sorting works on single column or on multiple columns, valid values are "single" and "multiple"
             * @docs-default 'single'
             */
            this.sortMode = 'single';
            /**
             * When true, resets paginator to first page after sorting. Available only when sortMode is set to single
             * @docs-default true
             */
            this.resetPageOnSort = true;
            /**
             * Defines the behavior of context menu selection, in "separate" mode context menu updates contextMenuSelection propertty whereas in joint mode selection property is used instead so that when row selection is enabled, both row selection and context menu selection use the same property
             *
             * @deprecated since 12.18.0
             * Not used anymore
             *
             * @docs-default 'separate'
             */
            this.contextMenuSelectionMode = 'separate';
            /**
             * Defines if data is loaded and interacted with in lazy manner
             * @docs-default false
             */
            this.lazy = false;
            /**
             * Whether to call lazy loading on initialization
             * @docs-default true
             */
            this.lazyLoadOnInit = true;
            // TODO: Use type instead number (type ComparisonType = 'equals' | 'deepEquals')
            /**
             * Algorithm to define if a row is selected, valid values are "equals" that compares by reference and "deepEquals" that compares all fields
             * @docs-default 'deepEquals'
             */
            this.compareSelectionBy = 'deepEquals';
            /**
             * The map of FilterMetadata objects to provide external filters
             * The key of the map should be a "field" property from ColumnsConfig
             * @docs-default {}
             */
            this.filters = {};
            /**
             * Delay in milliseconds before filtering the data
             * @docs-default 300
             */
            this.filterDelay = 300;
            /**
             * Total records in filtering mode.
             * Used to separate total records in filtering and non-filtering modes
             * @docs-default null
             * @since 11.10.0
             */
            this.filteredTotalRecords = null;
            /**
             * Map instance to keep the expanded rows where key of the map is the data key of the row
             * @docs-default {}
             */
            this.expandedRowKeys = {};
            /**
             * Map instance to keep the rows being edited where key of the map is the data key of the row
             * @docs-default {}
             */
            this.editingRowKeys = {};
            // TODO: Use type instead number (type ExpandMode = 'single' | 'multiple')
            /**
             * Whether multiple rows can be expanded at any time. Valid values are "multiple" and "single"
             * @docs-default 'multiple'
             */
            this.rowExpandMode = 'multiple';
            /**
             * Threshold in milliseconds to delay lazy loading during scrolling
             * @docs-default 250
             */
            this.virtualScrollDelay = 250;
            /**
             * Height of a row to use in calculations of virtual scrolling
             * Additional information https://material.angular.io/cdk/scrolling/api
             * @docs-default 37
             */
            this.virtualRowHeight = 37;
            // TODO: Use "ResizeMode" enum instead string
            /**
             * Defines whether the overall table width should change on column resize, valid values are "fit" and "expand"
             * @docs-default 'fit'
             */
            this.columnResizeMode = 'fit';
            /**
             * The icon to show while indicating data load is in progress
             * @docs-default 'pi pi-spinner'
             */
            this.loadingIcon = 'pi pi-spinner';
            /**
             * Whether to show the loading mask when loading property is true
             * @docs-default true
             */
            this.showLoader = true;
            /**
             * Defines where a stateful table keeps its state, valid values are "session" for sessionStorage and "local" for localStorage
             *
             * @deprecated since 12.18.0
             * Not used anymore
             *
             * @docs-default 'session'
             */
            this.stateStorage = 'session';
            // TODO: Use type instead string (EditMode = 'cell' | 'row')
            /**
             * Defines the editing mode, valid values are "cell" and "row"
             * @docs-default 'cell'
             */
            this.editMode = 'cell';
            /**
             * Don't emit onLazyLoad event when changes Input value of 'sortField', 'sortOrder', 'multiSortMeta'.
             * Needs for avoiding double onLazyLoad event emitting in some cases
             *
             * @docs-default 'multiple'
             */
            this.dontEmitLazyLoadOnInputChange = true;
            /**
             * Triggered when "selection" changed. Means user selected or unselect rows
             */
            this.selectionChange = new i0.EventEmitter();
            // TODO: Refactor this if possible
            /* eslint-disable @angular-eslint/no-output-on-prefix */
            /**
             * Callback to invoke when a row is selected
             */
            this.onRowSelect = new i0.EventEmitter();
            /**
             * Callback to invoke when a row is unselected
             */
            this.onRowUnselect = new i0.EventEmitter();
            /**
             * Callback to invoke when pagination occurs
             */
            this.onPage = new i0.EventEmitter();
            /**
             * Callback to invoke when a column gets sorted
             */
            this.onSort = new i0.EventEmitter();
            /**
             * Callback to invoke when data is filtered
             */
            this.onFilter = new i0.EventEmitter();
            /**
             * Callback to invoke when paging, sorting or filtering happens in lazy mode
             */
            this.onLazyLoad = new i0.EventEmitter();
            /**
             * Callback to invoke when a row is expanded
             */
            this.onRowExpand = new i0.EventEmitter();
            /**
             * Callback to invoke when a row is collapsed
             */
            this.onRowCollapse = new i0.EventEmitter();
            /**
             * Callback to invoke when a column is resized
             */
            this.onColResize = new i0.EventEmitter();
            /**
             * Callback to invoke when a column is reordered
             */
            this.onColReorder = new i0.EventEmitter();
            /**
             * Callback to invoke when state of header checkbox changes
             */
            this.onHeaderCheckboxToggle = new i0.EventEmitter();
            /**
             * In case if [customSort] is set to true "sortFunction" output will be emitted.
             * Useful for custom sorting implementation
             */
            this.sortFunction = new i0.EventEmitter();
            /**
             * Emit each time when [first] value changed
             */
            this.firstChange = new i0.EventEmitter();
            /**
             * Emit each time when [rows] value changed
             */
            this.rowsChange = new i0.EventEmitter();
            this._value = [];
            this._totalRecords = null;
            this._first = 0;
            this.selectionKeys = {};
            this._sortOrder = 1;
            /**
             * Angular trackBy function for table rows
             * @docs-default (index: number, item: RowData) => item
             */
            this.rowTrackBy = function (index, item) { return item; };
        }
        Object.defineProperty(Table.prototype, "value", {
            /**
             * An array of objects to display
             * @docs-default []
             */
            get: function () {
                return this._value;
            },
            set: function (val) {
                this._value = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "columns", {
            /**
             * An array of objects to represent dynamic columns
             * @docs-default
             */
            get: function () {
                return this._columns;
            },
            set: function (cols) {
                this._columns = cols;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "first", {
            /**
             * Index of the first row to be displayed
             * @docs-default 0
             */
            get: function () {
                return this._first;
            },
            set: function (val) {
                this._first = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "rows", {
            /**
             * Number of rows to display per page
             * @docs-default
             */
            get: function () {
                return this._rows;
            },
            set: function (val) {
                this._rows = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "allTotalRecords", {
            // Used to separate totalRecords in filtering case and not
            get: function () {
                /**
                 * When there is no totalRecords info available(means that for some reasons customer doesn't know how many records are in the table)
                 * we assume that totalRecords are at least on one record more than loaded records length until customer can set correct totalRecords value.
                 *
                 * This allows correctly calculate visibility of items in selection menu
                 */
                if (lodashEs.isNil(this._totalRecords) && this.value) {
                    return this.value.length + 1;
                }
                return this._totalRecords;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "totalRecords", {
            /**
             * Number of total records in the table
             * @docs-default null
             */
            get: function () {
                var _a;
                return this.hasFilter() ? ((_a = this.filteredTotalRecords) !== null && _a !== void 0 ? _a : this._totalRecords) : this._totalRecords;
            },
            set: function (val) {
                this._totalRecords = val;
                this.tableService.onTotalRecordsChange(this._totalRecords);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "sortField", {
            /**
             * Name of the field to sort data by default
             * @docs-default
             */
            get: function () {
                return this._sortField;
            },
            set: function (val) {
                this._sortField = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "sortOrder", {
            // TODO: Use enum instead number (SortOrder {ASC: 1, DESC: -1})
            /**
             * Order to sort when default sorting is enabled
             * 1 for ASC and -1 for DEC
             * @docs-default 1
             */
            get: function () {
                return this._sortOrder;
            },
            set: function (val) {
                this._sortOrder = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "multiSortMeta", {
            /**
             * An array of SortMeta objects to sort the data by default in multiple sort mode
             *
             * SortMeta {
             *     // The "field" property from the ColumnConfig
             *     field: string;
             *     // 1 for ASC and -1 for DEC
             *     order: number;
             * }
             *
             * @docs-default
             */
            get: function () {
                return this._multiSortMeta;
            },
            set: function (val) {
                this._multiSortMeta = val;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Table.prototype, "selection", {
            /**
             * Selected row in single mode or an array of values in multiple mode
             * @docs-default
             */
            get: function () {
                return this._selection;
            },
            set: function (val) {
                this._selection = val;
            },
            enumerable: false,
            configurable: true
        });
        /* --- LIFECYCLES START --- */
        Table.prototype.ngOnInit = function () {
            if (this.lazy && this.lazyLoadOnInit) {
                if (!this.virtualScroll) {
                    this.onLazyLoad.emit(this.createLazyLoadMetadata(exports.AdaptTableEventSource.LazyOnInit));
                }
                if (this.restoringFilter) {
                    this.restoringFilter = false;
                }
            }
            this.initialized = true;
        };
        Table.prototype.ngOnChanges = function (simpleChange) {
            if (simpleChange.value) {
                this._value = simpleChange.value.currentValue;
                if (!this.lazy) {
                    this.totalRecords = (this._value ? this._value.length : 0);
                    if (this.sortMode === 'single' && this.sortField) {
                        this.sortSingle();
                    }
                    else if (this.sortMode === 'multiple' && this.multiSortMeta) {
                        this.sortMultiple();
                        // sort already filters
                    }
                    else if (this.hasFilter()) {
                        this._filter();
                    }
                }
                this.tableService.onValueChange(simpleChange.value.currentValue);
            }
            if (simpleChange.columns) {
                this._columns = simpleChange.columns.currentValue;
                this.tableService.onColumnsChange(simpleChange.columns.currentValue);
            }
            if (simpleChange.sortField) {
                this._sortField = simpleChange.sortField.currentValue;
                // avoid triggering lazy load prior to lazy initialization at onInit
                if (!this.dontEmitLazyLoadOnInputChange && (!this.lazy || this.initialized)) {
                    if (this.sortMode === 'single') {
                        this.sortSingle();
                    }
                }
            }
            if (simpleChange.sortOrder) {
                this._sortOrder = simpleChange.sortOrder.currentValue;
                // avoid triggering lazy load prior to lazy initialization at onInit
                if (!this.dontEmitLazyLoadOnInputChange && (!this.lazy || this.initialized)) {
                    if (this.sortMode === 'single') {
                        this.sortSingle();
                    }
                }
            }
            if (simpleChange.multiSortMeta) {
                this._multiSortMeta = simpleChange.multiSortMeta.currentValue;
                if (!this.dontEmitLazyLoadOnInputChange && (this.sortMode === 'multiple')) {
                    this.sortMultiple();
                }
            }
            if (simpleChange.selection) {
                this._selection = simpleChange.selection.currentValue;
                if (!this.preventSelectionSetterPropagation) {
                    this.updateSelectionKeys();
                    this.tableService.onSelectionChange(this._selection);
                }
                this.preventSelectionSetterPropagation = false;
            }
        };
        Table.prototype.ngOnDestroy = function () {
            this.initialized = null;
        };
        /* --- LIFECYCLES END --- */
        /* ------------------------------------------------------------------ */
        Table.prototype.toggleRowWithCheckbox = function (event, rowData) {
            this.selection = this.selection || [];
            var selected = this.isSelected(rowData);
            var dataKeyValue = this.dataKey ? String(utils.ObjectUtils.resolveFieldData(rowData, this.dataKey)) : null;
            this.preventSelectionSetterPropagation = true;
            if (selected) {
                var selectionIndex_1 = this.findIndexInSelection(rowData);
                this._selection = this.selection.filter(function (val, i) { return i !== selectionIndex_1; });
                this.selectionChange.emit(this.selection);
                this.onRowUnselect.emit({
                    originalEvent: event.originalEvent,
                    index: event.rowIndex,
                    data: rowData,
                    type: 'checkbox'
                });
                if (dataKeyValue) {
                    delete this.selectionKeys[dataKeyValue];
                }
            }
            else {
                this._selection = this.selection ? __spreadArray(__spreadArray([], __read(this.selection)), [rowData]) : [rowData];
                this.selectionChange.emit(this.selection);
                this.onRowSelect.emit({
                    originalEvent: event.originalEvent,
                    index: event.rowIndex,
                    data: rowData,
                    type: 'checkbox'
                });
                if (dataKeyValue) {
                    this.selectionKeys[dataKeyValue] = 1;
                }
            }
            this.tableService.onSelectionChange(this._selection);
        };
        Table.prototype.toggleRow = function (rowData, event) {
            if (!this.dataKey) {
                throw new Error('dataKey must be defined to use row expansion');
            }
            var dataKeyValue = String(utils.ObjectUtils.resolveFieldData(rowData, this.dataKey));
            if (this.expandedRowKeys[dataKeyValue] != null) {
                delete this.expandedRowKeys[dataKeyValue];
                this.onRowCollapse.emit({
                    originalEvent: event,
                    data: rowData
                });
            }
            else {
                if (this.rowExpandMode === 'single') {
                    this.expandedRowKeys = {};
                }
                this.expandedRowKeys[dataKeyValue] = true;
                this.onRowExpand.emit({
                    originalEvent: event,
                    data: rowData
                });
            }
            if (event) {
                event.preventDefault();
            }
            /*if (this.isStateful()) {
              this.saveState();
            }*/
        };
        /* --- ROW CLICK TOGGLE END --- */
        /* ------------------------------------------------------------------ */
        /* --- SELECTION START --- */
        Table.prototype.isSingleSelectionMode = function () {
            return this.selectionMode === 'single';
        };
        Table.prototype.isMultipleSelectionMode = function () {
            return this.selectionMode === 'multiple';
        };
        Table.prototype.isSelected = function (rowData) {
            if (rowData && this.selection) {
                if (this.dataKey) {
                    return this.selectionKeys[utils.ObjectUtils.resolveFieldData(rowData, this.dataKey)] !== undefined;
                }
                else {
                    if (this.selection instanceof Array) {
                        return this.findIndexInSelection(rowData) > -1;
                    }
                    else {
                        return this.equals(rowData, this.selection);
                    }
                }
            }
            return false;
        };
        Table.prototype.findIndexInSelection = function (rowData) {
            var index = -1;
            if (this.selection && this.selection.length) {
                for (var i = 0; i < this.selection.length; i++) {
                    if (this.equals(rowData, this.selection[i])) {
                        index = i;
                        break;
                    }
                }
            }
            return index;
        };
        /* --- SELECTION START --- */
        /* ------------------------------------------------------------------ */
        /* --- SORTING START --- */
        Table.prototype.sort = function (event) {
            var originalEvent = event.originalEvent;
            if (this.sortMode === 'single') {
                this._sortOrder = (this.sortField === event.field) ? this.sortOrder * -1 : this.defaultSortOrder;
                this._sortField = event.field;
                this.sortSingle();
                if (this.resetPageOnSort) {
                    this._first = 0;
                    this.firstChange.emit(this._first);
                }
            }
            if (this.sortMode === 'multiple') {
                var metaKey = originalEvent.metaKey || originalEvent.ctrlKey;
                var sortMeta = this.getSortMeta(event.field);
                if (sortMeta) {
                    if (!metaKey) {
                        this._multiSortMeta = [{ field: event.field, order: sortMeta.order * -1 }];
                        if (this.resetPageOnSort) {
                            this._first = 0;
                            this.firstChange.emit(this._first);
                        }
                    }
                    else {
                        sortMeta.order = sortMeta.order * -1;
                    }
                }
                else {
                    if (!metaKey || !this.multiSortMeta) {
                        this._multiSortMeta = [];
                        if (this.resetPageOnSort) {
                            this._first = 0;
                            this.firstChange.emit(this._first);
                        }
                    }
                    this._multiSortMeta.push({ field: event.field, order: this.defaultSortOrder });
                }
                this.sortMultiple();
            }
            /*if (this.isStateful()) {
              this.saveState();
            }*/
            this.anchorRowIndex = null;
        };
        Table.prototype.sortSingle = function () {
            var _this = this;
            if (this.sortField && this.sortOrder) {
                if (this.lazy) {
                    this.onLazyLoad.emit(this.createLazyLoadMetadata(exports.AdaptTableEventSource.SingleSortChange));
                }
                else if (this.value) {
                    if (this.customSort) {
                        this.sortFunction.emit({
                            data: this.value,
                            mode: this.sortMode,
                            field: this.sortField,
                            order: this.sortOrder
                        });
                    }
                    else {
                        this.value.sort(function (data1, data2) {
                            var value1 = utils.ObjectUtils.resolveFieldData(data1, _this.sortField);
                            var value2 = utils.ObjectUtils.resolveFieldData(data2, _this.sortField);
                            var result = null;
                            if (value1 == null && value2 != null) {
                                result = -1;
                            }
                            else if (value1 != null && value2 == null) {
                                result = 1;
                            }
                            else if (value1 == null && value2 == null) {
                                result = 0;
                            }
                            else if (typeof value1 === 'string' && typeof value2 === 'string') {
                                result = value1.localeCompare(value2);
                            }
                            else {
                                result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;
                            }
                            return (_this.sortOrder * result);
                        });
                    }
                    if (this.hasFilter()) {
                        this._filter();
                    }
                }
                var sortMeta = {
                    field: this.sortField,
                    order: this.sortOrder
                };
                this.onSort.emit(sortMeta);
                this.tableService.onSort(sortMeta);
            }
        };
        Table.prototype.sortMultiple = function () {
            var _this = this;
            if (this.multiSortMeta) {
                if (this.lazy) {
                    this.onLazyLoad.emit(this.createLazyLoadMetadata(exports.AdaptTableEventSource.MultipleSortChange));
                }
                else if (this.value) {
                    if (this.customSort) {
                        this.sortFunction.emit({
                            data: this.value,
                            mode: this.sortMode,
                            multiSortMeta: this.multiSortMeta
                        });
                    }
                    else {
                        this.value.sort(function (data1, data2) {
                            return _this.multisortField(data1, data2, _this.multiSortMeta, 0);
                        });
                    }
                    if (this.hasFilter()) {
                        this._filter();
                    }
                }
                this.onSort.emit({
                    multisortmeta: this.multiSortMeta
                });
                this.tableService.onSort(this.multiSortMeta);
            }
        };
        Table.prototype.multisortField = function (data1, data2, multiSortMeta, index) {
            var value1 = utils.ObjectUtils.resolveFieldData(data1, multiSortMeta[index].field);
            var value2 = utils.ObjectUtils.resolveFieldData(data2, multiSortMeta[index].field);
            var result = null;
            if (value1 == null && value2 != null) {
                result = -1;
            }
            else if (value1 != null && value2 == null) {
                result = 1;
            }
            else if (value1 == null && value2 == null) {
                result = 0;
                // eslint-disable-next-line eqeqeq
            }
            else if (typeof value1 == 'string' || value1 instanceof String) {
                // eslint-disable-next-line eqeqeq
                if (value1.localeCompare && (value1 != value2)) {
                    return (multiSortMeta[index].order * value1.localeCompare(value2));
                }
            }
            else {
                result = (value1 < value2) ? -1 : 1;
            }
            // eslint-disable-next-line eqeqeq
            if (value1 == value2) {
                return (multiSortMeta.length - 1) > (index) ? (this.multisortField(data1, data2, multiSortMeta, index + 1)) : 0;
            }
            return (multiSortMeta[index].order * result);
        };
        Table.prototype.getSortMeta = function (field) {
            if (this.multiSortMeta && this.multiSortMeta.length) {
                // eslint-disable-next-line @typescript-eslint/prefer-for-of
                for (var i = 0; i < this.multiSortMeta.length; i++) {
                    if (this.multiSortMeta[i].field === field) {
                        return this.multiSortMeta[i];
                    }
                }
            }
            return null;
        };
        Table.prototype.isSorted = function (field) {
            if (this.sortMode === 'single') {
                return (this.sortField && this.sortField === field);
            }
            else if (this.sortMode === 'multiple') {
                var sorted = false;
                if (this.multiSortMeta) {
                    // eslint-disable-next-line @typescript-eslint/prefer-for-of
                    for (var i = 0; i < this.multiSortMeta.length; i++) {
                        // eslint-disable-next-line eqeqeq
                        if (this.multiSortMeta[i].field == field) {
                            sorted = true;
                            break;
                        }
                    }
                }
                return sorted;
            }
        };
        /* --- SORTING END --- */
        /* ------------------------------------------------------------------ */
        /* --- FILTERING START --- */
        // matchMode can't be FilterMatchMode enum because matchMode can be custom filtering mode string
        Table.prototype.filter = function (value, field, matchMode) {
            var _this = this;
            if (this.filterTimeout) {
                clearTimeout(this.filterTimeout);
            }
            if (!this.isFilterBlank(value)) {
                this.filters[field] = { value: value, matchMode: matchMode };
            }
            else if (this.filters[field]) {
                delete this.filters[field];
            }
            this.filterTimeout = window.setTimeout(function () {
                _this._filter();
                _this.filterTimeout = null;
            }, this.filterDelay);
            this.anchorRowIndex = null;
        };
        Table.prototype.filterGlobal = function (value, matchMode) {
            this.filter(value, 'global', matchMode);
        };
        Table.prototype.isFilterBlank = function (filter) {
            if (filter !== null && filter !== undefined) {
                if ((typeof filter === 'string' && filter.trim().length === 0) || (filter instanceof Array && filter.length === 0)) {
                    return true;
                }
                else {
                    return false;
                }
            }
            return true;
        };
        Table.prototype._filter = function () {
            // TODO: Check do we need restoringFilter property!!!
            if (!this.restoringFilter) {
                this.first = 0;
                this.firstChange.emit(this.first);
            }
            if (this.lazy) {
                this.onLazyLoad.emit(this.createLazyLoadMetadata(exports.AdaptTableEventSource.FilterChange));
            }
            else {
                if (!this.value) {
                    return;
                }
                if (!this.hasFilter()) {
                    this.filteredValue = null;
                    this.totalRecords = this.value ? this.value.length : 0;
                }
                else {
                    var globalFilterFieldsArray = void 0;
                    if (this.filters.global) {
                        if (!this.columns && !this.globalFilterFields) {
                            throw new Error('Global filtering requires dynamic columns or globalFilterFields to be defined.');
                        }
                        else {
                            globalFilterFieldsArray = this.globalFilterFields || this.columns;
                        }
                    }
                    this.filteredValue = [];
                    // eslint-disable-next-line @typescript-eslint/prefer-for-of
                    for (var i = 0; i < this.value.length; i++) {
                        var localMatch = true;
                        var globalMatch = false;
                        var localFiltered = false;
                        for (var prop in this.filters) {
                            if (Object.prototype.hasOwnProperty.call(this.filters, prop) && prop !== 'global') {
                                localFiltered = true;
                                var filterMeta = this.filters[prop];
                                var filterField = prop;
                                var filterValue = filterMeta.value;
                                var filterMatchMode = filterMeta.matchMode || 'startsWith';
                                var dataFieldValue = utils.ObjectUtils.resolveFieldData(this.value[i], filterField);
                                var filterConstraint = this.filterService.filters[filterMatchMode];
                                if (!filterConstraint(dataFieldValue, filterValue)) {
                                    localMatch = false;
                                }
                                if (!localMatch) {
                                    break;
                                }
                            }
                        }
                        if (this.filters['global'] && !globalMatch && globalFilterFieldsArray) {
                            // eslint-disable-next-line @typescript-eslint/prefer-for-of
                            for (var j = 0; j < globalFilterFieldsArray.length; j++) {
                                var globalFilterField = globalFilterFieldsArray[j].field || globalFilterFieldsArray[j];
                                globalMatch = this.filterService.filters[this.filters['global'].matchMode](utils.ObjectUtils.resolveFieldData(this.value[i], globalFilterField), this.filters['global'].value);
                                if (globalMatch) {
                                    break;
                                }
                            }
                        }
                        var matches = void 0;
                        if (this.filters['global']) {
                            matches = localFiltered ? (localFiltered && localMatch && globalMatch) : globalMatch;
                        }
                        else {
                            matches = localFiltered && localMatch;
                        }
                        if (matches) {
                            this.filteredValue.push(this.value[i]);
                        }
                    }
                    if (this.filteredValue.length === this.value.length) {
                        this.filteredValue = null;
                    }
                    this.filteredTotalRecords = this.filteredValue ? this.filteredValue.length : this.value ? this.value.length : 0;
                }
            }
            this.onFilter.emit({
                filters: this.filters,
                filteredValue: this.filteredValue || this.value
            });
            this.tableService.onValueChange(this.value);
            if (this.restoringFilter) {
                this.restoringFilter = false;
            }
            i1.SafeCdr.markForCheck(this.cd);
        };
        Table.prototype.hasFilter = function () {
            var empty = true;
            for (var prop in this.filters) {
                if (Object.prototype.hasOwnProperty.call(this.filters, prop)) {
                    empty = false;
                    break;
                }
            }
            return !empty;
        };
        /* --- FILTERING END --- */
        /* ------------------------------------------------------------------ */
        /* --- ROW EDITING START --- */
        Table.prototype.initRowEdit = function (rowData) {
            var dataKeyValue = String(utils.ObjectUtils.resolveFieldData(rowData, this.dataKey));
            this.editingRowKeys[dataKeyValue] = true;
        };
        Table.prototype.saveRowEdit = function (rowData, rowElement) {
            if (dom.DomHandler.find(rowElement, '.ng-invalid.ng-dirty').length === 0) {
                var dataKeyValue = String(utils.ObjectUtils.resolveFieldData(rowData, this.dataKey));
                delete this.editingRowKeys[dataKeyValue];
            }
        };
        Table.prototype.cancelRowEdit = function (rowData) {
            var dataKeyValue = String(utils.ObjectUtils.resolveFieldData(rowData, this.dataKey));
            delete this.editingRowKeys[dataKeyValue];
        };
        Table.prototype.isRowExpanded = function (rowData) {
            return this.expandedRowKeys[String(utils.ObjectUtils.resolveFieldData(rowData, this.dataKey))] === true;
        };
        Table.prototype.isRowEditing = function (rowData) {
            return this.editingRowKeys[String(utils.ObjectUtils.resolveFieldData(rowData, this.dataKey))] === true;
        };
        /* --- ROW EDITING END --- */
        /* ------------------------------------------------------------------ */
        /* --- COLUMN RESIZE START --- */
        Table.prototype.onColumnResizeBegin = function (event) {
            var containerLeft = dom.DomHandler.getOffset(this.containerViewChild.nativeElement).left;
            this.lastResizerHelperX = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft);
            this.onColumnResize(event);
            event.preventDefault();
        };
        Table.prototype.onColumnResize = function (event) {
            var containerLeft = dom.DomHandler.getOffset(this.containerViewChild.nativeElement).left;
            dom.DomHandler.addClass(this.containerViewChild.nativeElement, 'ui-unselectable-text');
            this.resizeHelperViewChild.nativeElement.style.height = this.containerViewChild.nativeElement.offsetHeight + 'px';
            this.resizeHelperViewChild.nativeElement.style.top = 0 + 'px';
            this.resizeHelperViewChild.nativeElement.style.left = (event.pageX - containerLeft + this.containerViewChild.nativeElement.scrollLeft) + 'px';
            this.resizeHelperViewChild.nativeElement.style.display = 'block';
        };
        /* --- COLUMN RESIZE END --- */
        /* ------------------------------------------------------------------ */
        /* --- COLUMN DRAG START --- */
        Table.prototype.onColumnDragStart = function (event, columnElement) {
            this.reorderIconWidth = dom.DomHandler.getHiddenElementOuterWidth(this.reorderIndicatorUpViewChild.nativeElement);
            this.reorderIconHeight = dom.DomHandler.getHiddenElementOuterHeight(this.reorderIndicatorDownViewChild.nativeElement);
            this.draggedColumn = columnElement;
            event.dataTransfer.setData('text', 'b'); // For firefox
        };
        Table.prototype.onColumnDragEnter = function (event, dropHeader) {
            if (this.reorderableColumns && this.draggedColumn && dropHeader && this.containerViewChild) {
                event.preventDefault();
                var containerOffset = dom.DomHandler.getOffset(this.containerViewChild.nativeElement);
                var dropHeaderOffset = dom.DomHandler.getOffset(dropHeader);
                // eslint-disable-next-line eqeqeq
                if (this.draggedColumn != dropHeader) {
                    var dragIndex = dom.DomHandler.indexWithinGroup(this.draggedColumn, 'preorderablecolumn');
                    var dropIndex = dom.DomHandler.indexWithinGroup(dropHeader, 'preorderablecolumn');
                    var targetLeft = dropHeaderOffset.left - containerOffset.left;
                    var columnCenter = dropHeaderOffset.left + dropHeader.offsetWidth / 2;
                    this.reorderIndicatorUpViewChild.nativeElement.style.top
                        = dropHeaderOffset.top - containerOffset.top - (this.reorderIconHeight - 1) + 'px';
                    this.reorderIndicatorDownViewChild.nativeElement.style.top
                        = dropHeaderOffset.top - containerOffset.top + dropHeader.offsetHeight + 'px';
                    if (event.pageX > columnCenter) {
                        this.reorderIndicatorUpViewChild.nativeElement.style.left
                            = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';
                        this.reorderIndicatorDownViewChild.nativeElement.style.left
                            = (targetLeft + dropHeader.offsetWidth - Math.ceil(this.reorderIconWidth / 2)) + 'px';
                        this.dropPosition = 1;
                    }
                    else {
                        this.reorderIndicatorUpViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';
                        this.reorderIndicatorDownViewChild.nativeElement.style.left = (targetLeft - Math.ceil(this.reorderIconWidth / 2)) + 'px';
                        this.dropPosition = -1;
                    }
                    if ((dropIndex - dragIndex === 1 && this.dropPosition === -1) || (dropIndex - dragIndex === -1 && this.dropPosition === 1)) {
                        this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';
                        this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';
                    }
                    else {
                        this.reorderIndicatorUpViewChild.nativeElement.style.display = 'block';
                        this.reorderIndicatorDownViewChild.nativeElement.style.display = 'block';
                    }
                }
                else {
                    event.dataTransfer.dropEffect = 'none';
                }
            }
        };
        Table.prototype.onColumnDragLeave = function (event) {
            if (this.reorderableColumns && this.draggedColumn) {
                event.preventDefault();
                this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';
                this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';
            }
        };
        Table.prototype.onColumnDrop = function (event, dropColumn) {
            event.preventDefault();
            if (this.draggedColumn) {
                var dragIndex = dom.DomHandler.indexWithinGroup(this.draggedColumn, 'preorderablecolumn');
                var dropIndex = dom.DomHandler.indexWithinGroup(dropColumn, 'preorderablecolumn');
                var allowDrop = (dragIndex !== dropIndex);
                if (allowDrop && ((dropIndex - dragIndex === 1 && this.dropPosition === -1)
                    || (dragIndex - dropIndex === 1 && this.dropPosition === 1))) {
                    allowDrop = false;
                }
                if (allowDrop && ((dropIndex < dragIndex && this.dropPosition === 1))) {
                    dropIndex = dropIndex + 1;
                }
                if (allowDrop && ((dropIndex > dragIndex && this.dropPosition === -1))) {
                    dropIndex = dropIndex - 1;
                }
                if (allowDrop) {
                    // Because we can hide columns and dragging is used html elements,
                    // we can have situation when column is hidden and indexes for columns object and columns html nodes are do not match.
                    // To solve this issue sort columns object by visible columns Map and all hidden columns got to the end of array.
                    var visibleColumns = this.columns.filter(function (c) { return !i1.getValueOrFunc(c.hidden); });
                    utils.ObjectUtils.reorderArray(visibleColumns, dragIndex, dropIndex);
                    var visibleColumnsSortMap_1 = new Map();
                    visibleColumns.forEach(function (col, index) {
                        visibleColumnsSortMap_1.set(col.field, index);
                    });
                    this.columns.sort(function (a, b) {
                        var aIndex = i1.isDefined(visibleColumnsSortMap_1.get(a.field))
                            ? visibleColumnsSortMap_1.get(a.field)
                            : visibleColumnsSortMap_1.size;
                        var bIndex = i1.isDefined(visibleColumnsSortMap_1.get(b.field))
                            ? visibleColumnsSortMap_1.get(b.field)
                            : visibleColumnsSortMap_1.size;
                        return aIndex - bIndex;
                    });
                    this.onColReorder.emit({
                        dragIndex: dragIndex,
                        dropIndex: dropIndex,
                        columns: this.columns
                    });
                }
                this.reorderIndicatorUpViewChild.nativeElement.style.display = 'none';
                this.reorderIndicatorDownViewChild.nativeElement.style.display = 'none';
                this.draggedColumn.draggable = false;
                this.draggedColumn = null;
                this.dropPosition = null;
            }
        };
        /* --- COLUMN DRAG END --- */
        /* ------------------------------------------------------------------ */
        /* --- OTHER START --- */
        Table.prototype.isEmpty = function () {
            var data = this.filteredValue || this.value;
            // eslint-disable-next-line eqeqeq
            return data == null || data.length == 0;
        };
        Table.prototype.getBlockableElement = function () {
            return this.el.nativeElement.children[0];
        };
        Table.prototype.updateSelectionKeys = function () {
            var e_1, _b;
            if (this.dataKey && this._selection) {
                this.selectionKeys = {};
                if (Array.isArray(this._selection)) {
                    try {
                        for (var _c = __values(this._selection), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var data = _d.value;
                            this.selectionKeys[String(utils.ObjectUtils.resolveFieldData(data, this.dataKey))] = 1;
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                else {
                    this.selectionKeys[String(utils.ObjectUtils.resolveFieldData(this._selection, this.dataKey))] = 1;
                }
            }
        };
        Table.prototype.onPageChange = function (event) {
            this.first = event.first;
            this.rows = event.rows;
            if (this.lazy) {
                this.onLazyLoad.emit(this.createLazyLoadMetadata(exports.AdaptTableEventSource.PageChange));
            }
            this.onPage.emit({
                first: this.first,
                rows: this.rows
            });
            this.firstChange.emit(this.first);
            this.rowsChange.emit(this.rows);
            this.tableService.onValueChange(this.value);
            this.anchorRowIndex = null;
        };
        Table.prototype.equals = function (data1, data2) {
            // TODO: Maybe there is a sense to use lodash isEqualWith instead of ObjectUtils.equals
            return this.compareSelectionBy === 'equals' ? (data1 === data2) : utils.ObjectUtils.equals(data1, data2, this.dataKey);
        };
        Table.prototype.createLazyLoadMetadata = function (eventSource) {
            return {
                eventSource: eventSource,
                first: this.first,
                rows: this.rows,
                sortField: this.sortField,
                sortOrder: this.sortOrder,
                filters: this.filters,
                globalFilter: this.filters && this.filters['global'] ? this.filters['global'].value : null,
                multiSortMeta: this.multiSortMeta
            };
        };
        Table.prototype.reset = function () {
            this._sortField = null;
            this._sortOrder = this.defaultSortOrder;
            this._multiSortMeta = null;
            this.tableService.onSort(null);
            this.filteredValue = null;
            this.filters = {};
            this.first = 0;
            this.firstChange.emit(this.first);
            if (this.lazy) {
                this.onLazyLoad.emit(this.createLazyLoadMetadata(exports.AdaptTableEventSource.Reset));
            }
            else {
                this.totalRecords = (this._value ? this._value.length : 0);
            }
        };
        Table.prototype.findParentScrollableView = function (column) {
            if (column) {
                var parent = column.parentElement;
                while (parent && !dom.DomHandler.hasClass(parent, 'ui-table-scrollable-view')) {
                    parent = parent.parentElement;
                }
                return parent;
            }
            else {
                return null;
            }
        };
        return Table;
    }());
    Table.ɵfac = function Table_Factory(t) { return new (t || Table)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef), i0__namespace.ɵɵdirectiveInject(i0__namespace.NgZone), i0__namespace.ɵɵdirectiveInject(TableService), i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef), i0__namespace.ɵɵdirectiveInject(i2__namespace.FilterService)); };
    Table.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: Table, selectors: [["p-table"]], viewQuery: function Table_Query(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵviewQuery(_c0$d, 5);
                i0__namespace.ɵɵviewQuery(_c1$9, 5);
                i0__namespace.ɵɵviewQuery(_c2$7, 5);
                i0__namespace.ɵɵviewQuery(_c3$4, 5);
                i0__namespace.ɵɵviewQuery(_c4$3, 5);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.containerViewChild = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.resizeHelperViewChild = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.reorderIndicatorUpViewChild = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.reorderIndicatorDownViewChild = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.tableViewChild = _t.first);
            }
        }, inputs: { value: "value", columns: "columns", first: "first", rows: "rows", totalRecords: "totalRecords", sortField: "sortField", sortOrder: "sortOrder", multiSortMeta: "multiSortMeta", selection: "selection", frozenColumns: "frozenColumns", frozenValue: "frozenValue", frozenWidth: "frozenWidth", style: "style", styleClass: "styleClass", tableStyle: "tableStyle", tableStyleClass: "tableStyleClass", paginator: "paginator", pageLinks: "pageLinks", rowsPerPageOptions: "rowsPerPageOptions", alwaysShowPaginator: "alwaysShowPaginator", paginatorPosition: "paginatorPosition", paginatorDropdownAppendTo: "paginatorDropdownAppendTo", paginatorDropdownScrollHeight: "paginatorDropdownScrollHeight", currentPageReportTemplate: "currentPageReportTemplate", showCurrentPageReport: "showCurrentPageReport", defaultSortOrder: "defaultSortOrder", sortMode: "sortMode", resetPageOnSort: "resetPageOnSort", selectionMode: "selectionMode", contextMenuSelectionMode: "contextMenuSelectionMode", dataKey: "dataKey", metaKeySelection: "metaKeySelection", lazy: "lazy", lazyLoadOnInit: "lazyLoadOnInit", compareSelectionBy: "compareSelectionBy", filters: "filters", globalFilterFields: "globalFilterFields", filterDelay: "filterDelay", filteredTotalRecords: "filteredTotalRecords", expandedRowKeys: "expandedRowKeys", editingRowKeys: "editingRowKeys", rowExpandMode: "rowExpandMode", scrollable: "scrollable", scrollHeight: "scrollHeight", virtualScroll: "virtualScroll", virtualScrollDelay: "virtualScrollDelay", virtualRowHeight: "virtualRowHeight", responsive: "responsive", resizableColumns: "resizableColumns", columnResizeMode: "columnResizeMode", reorderableColumns: "reorderableColumns", loadingIcon: "loadingIcon", showLoader: "showLoader", rowHover: "rowHover", customSort: "customSort", autoLayout: "autoLayout", exportFunction: "exportFunction", stateKey: "stateKey", stateStorage: "stateStorage", editMode: "editMode", dontEmitLazyLoadOnInputChange: "dontEmitLazyLoadOnInputChange", rowTrackBy: "rowTrackBy" }, outputs: { selectionChange: "selectionChange", onRowSelect: "onRowSelect", onRowUnselect: "onRowUnselect", onPage: "onPage", onSort: "onSort", onFilter: "onFilter", onLazyLoad: "onLazyLoad", onRowExpand: "onRowExpand", onRowCollapse: "onRowCollapse", onColResize: "onColResize", onColReorder: "onColReorder", onHeaderCheckboxToggle: "onHeaderCheckboxToggle", sortFunction: "sortFunction", firstChange: "firstChange", rowsChange: "rowsChange" }, features: [i0__namespace.ɵɵProvidersFeature([i2.FilterService]), i0__namespace.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function Table_Template(rf, ctx) { }, encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(Table, [{
                type: i0.Component,
                args: [{
                        // eslint-disable-next-line @angular-eslint/component-selector
                        selector: 'p-table',
                        template: '',
                        changeDetection: i0.ChangeDetectionStrategy.Default,
                        providers: [i2.FilterService]
                    }]
            }], function () { return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.NgZone }, { type: TableService }, { type: i0__namespace.ChangeDetectorRef }, { type: i2__namespace.FilterService }]; }, { value: [{
                    type: i0.Input
                }], columns: [{
                    type: i0.Input
                }], first: [{
                    type: i0.Input
                }], rows: [{
                    type: i0.Input
                }], totalRecords: [{
                    type: i0.Input
                }], sortField: [{
                    type: i0.Input
                }], sortOrder: [{
                    type: i0.Input
                }], multiSortMeta: [{
                    type: i0.Input
                }], selection: [{
                    type: i0.Input
                }], frozenColumns: [{
                    type: i0.Input
                }], frozenValue: [{
                    type: i0.Input
                }], frozenWidth: [{
                    type: i0.Input
                }], style: [{
                    type: i0.Input
                }], styleClass: [{
                    type: i0.Input
                }], tableStyle: [{
                    type: i0.Input
                }], tableStyleClass: [{
                    type: i0.Input
                }], paginator: [{
                    type: i0.Input
                }], pageLinks: [{
                    type: i0.Input
                }], rowsPerPageOptions: [{
                    type: i0.Input
                }], alwaysShowPaginator: [{
                    type: i0.Input
                }], paginatorPosition: [{
                    type: i0.Input
                }], paginatorDropdownAppendTo: [{
                    type: i0.Input
                }], paginatorDropdownScrollHeight: [{
                    type: i0.Input
                }], currentPageReportTemplate: [{
                    type: i0.Input
                }], showCurrentPageReport: [{
                    type: i0.Input
                }], defaultSortOrder: [{
                    type: i0.Input
                }], sortMode: [{
                    type: i0.Input
                }], resetPageOnSort: [{
                    type: i0.Input
                }], selectionMode: [{
                    type: i0.Input
                }], contextMenuSelectionMode: [{
                    type: i0.Input
                }], dataKey: [{
                    type: i0.Input
                }], metaKeySelection: [{
                    type: i0.Input
                }], lazy: [{
                    type: i0.Input
                }], lazyLoadOnInit: [{
                    type: i0.Input
                }], compareSelectionBy: [{
                    type: i0.Input
                }], filters: [{
                    type: i0.Input
                }], globalFilterFields: [{
                    type: i0.Input
                }], filterDelay: [{
                    type: i0.Input
                }], filteredTotalRecords: [{
                    type: i0.Input
                }], expandedRowKeys: [{
                    type: i0.Input
                }], editingRowKeys: [{
                    type: i0.Input
                }], rowExpandMode: [{
                    type: i0.Input
                }], scrollable: [{
                    type: i0.Input
                }], scrollHeight: [{
                    type: i0.Input
                }], virtualScroll: [{
                    type: i0.Input
                }], virtualScrollDelay: [{
                    type: i0.Input
                }], virtualRowHeight: [{
                    type: i0.Input
                }], responsive: [{
                    type: i0.Input
                }], resizableColumns: [{
                    type: i0.Input
                }], columnResizeMode: [{
                    type: i0.Input
                }], reorderableColumns: [{
                    type: i0.Input
                }], loadingIcon: [{
                    type: i0.Input
                }], showLoader: [{
                    type: i0.Input
                }], rowHover: [{
                    type: i0.Input
                }], customSort: [{
                    type: i0.Input
                }], autoLayout: [{
                    type: i0.Input
                }], exportFunction: [{
                    type: i0.Input
                }], stateKey: [{
                    type: i0.Input
                }], stateStorage: [{
                    type: i0.Input
                }], editMode: [{
                    type: i0.Input
                }], dontEmitLazyLoadOnInputChange: [{
                    type: i0.Input
                }], selectionChange: [{
                    type: i0.Output
                }], onRowSelect: [{
                    type: i0.Output
                }], onRowUnselect: [{
                    type: i0.Output
                }], onPage: [{
                    type: i0.Output
                }], onSort: [{
                    type: i0.Output
                }], onFilter: [{
                    type: i0.Output
                }], onLazyLoad: [{
                    type: i0.Output
                }], onRowExpand: [{
                    type: i0.Output
                }], onRowCollapse: [{
                    type: i0.Output
                }], onColResize: [{
                    type: i0.Output
                }], onColReorder: [{
                    type: i0.Output
                }], onHeaderCheckboxToggle: [{
                    type: i0.Output
                }], sortFunction: [{
                    type: i0.Output
                }], firstChange: [{
                    type: i0.Output
                }], rowsChange: [{
                    type: i0.Output
                }], containerViewChild: [{
                    type: i0.ViewChild,
                    args: ['container', { static: false }]
                }], resizeHelperViewChild: [{
                    type: i0.ViewChild,
                    args: ['resizeHelper', { static: false }]
                }], reorderIndicatorUpViewChild: [{
                    type: i0.ViewChild,
                    args: ['reorderIndicatorUp', { static: false }]
                }], reorderIndicatorDownViewChild: [{
                    type: i0.ViewChild,
                    args: ['reorderIndicatorDown', { static: false }]
                }], tableViewChild: [{
                    type: i0.ViewChild,
                    args: ['table', { static: false }]
                }], rowTrackBy: [{
                    type: i0.Input
                }] });
    })();

    var AdaptDataDirective = /** @class */ (function () {
        function AdaptDataDirective(element) {
            this.element = element;
        }
        return AdaptDataDirective;
    }());
    AdaptDataDirective.ɵfac = function AdaptDataDirective_Factory(t) { return new (t || AdaptDataDirective)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef)); };
    AdaptDataDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: AdaptDataDirective, selectors: [["", "adaptData", ""]], inputs: { data: ["adaptData", "data"] } });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptDataDirective, [{
                type: i0.Directive,
                args: [{
                        selector: '[adaptData]',
                    }]
            }], function () { return [{ type: i0__namespace.ElementRef }]; }, { data: [{
                    type: i0.Input,
                    args: ['adaptData']
                }] });
    })();

    function hasRowGroupedData(dataItem) {
        return !!(dataItem.groupValue !== undefined && dataItem.items);
    }

    // TODO: Refactor this if possible
    /* eslint-disable @typescript-eslint/no-explicit-any */
    var ObjectUtils = {
        // copied logic from primeng utils
        resolveFieldData: function (data, field) {
            if (data && field) {
                if (typeof field === 'function') {
                    return field(data);
                }
                else if (field.indexOf('.') === -1) {
                    return data[field];
                }
                else {
                    var fields = field.split('.');
                    var value = data;
                    for (var i = 0, len = fields.length; i < len; ++i) {
                        if (value == null) {
                            return null;
                        }
                        value = value[fields[i]];
                    }
                    return value;
                }
            }
            else {
                return null;
            }
        }
    };
    // TODO: use the adapt version after the package update
    var HtmlUtils = {
        hasShrunkText: function (element) {
            return element.offsetWidth < element.scrollWidth;
        },
    };

    var AdaptTableDeprecationMiddleware = /** @class */ (function () {
        function AdaptTableDeprecationMiddleware() {
        }
        AdaptTableDeprecationMiddleware.prototype.init = function (table) {
            this._table = table;
            this._updateTexts();
        };
        AdaptTableDeprecationMiddleware.prototype._updateTexts = function () {
            if (this._table.texts) {
                return;
            }
            if (this._table.tableTexts
                || this._table.paginationTexts
                || this._table.toolbarTexts
                || !lodashEs.isEmpty(this._table.filtersTexts)
                || this._table.headerCellMenuTexts) {
                this._table.texts = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, this._table.tableTexts), this._table.paginationTexts), this._table.toolbarTexts), this._table.filtersTexts), this._table.headerCellMenuTexts);
                i1.adaptWarn('[paginationTexts], [toolbarTexts], [tableTexts], [filtersTexts], [headerCellMenuTexts] are deprecated from v8.26.1. Use [texts] instead');
            }
        };
        return AdaptTableDeprecationMiddleware;
    }());
    AdaptTableDeprecationMiddleware.ɵfac = function AdaptTableDeprecationMiddleware_Factory(t) { return new (t || AdaptTableDeprecationMiddleware)(); };
    AdaptTableDeprecationMiddleware.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: AdaptTableDeprecationMiddleware, factory: AdaptTableDeprecationMiddleware.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptTableDeprecationMiddleware, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], null, null);
    })();

    var _c0$c = ["emptyStateTdEl"];
    var _c1$8 = ["toolbarComponent"];
    var _c2$6 = ["tooltipContainerEl"];
    var _c3$3 = ["infiniteScrollingLoaderContainerEl"];
    var _c4$2 = ["tableContainer"];
    var _c5$2 = ["tableInnerContainer"];
    var _c6$2 = ["tableHeader"];
    var _c7$2 = ["table"];
    var _c8$2 = ["tableBodyTemplateRef"];
    var _c9$2 = ["tableHeaderTemplateRef"];
    var _c10$2 = ["tableColgroupTemplateRef"];
    var _c11$2 = ["tableEmptyMessageTemplateRef"];
    var _c12$1 = ["rowExpansionTemplate"];
    var _c13 = ["dataRow"];
    var _c14 = ["dataCell"];
    var _c15 = ["dataHeaderCell"];
    var _c16 = ["actionColElement"];
    function AdaptTableComponent_div_7_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "div", 32);
        }
    }
    function AdaptTableComponent_div_9_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 33);
            i0__namespace.ɵɵtext(1, "\n        ");
            i0__namespace.ɵɵelement(2, "i");
            i0__namespace.ɵɵtext(3, "\n      ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r2 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵclassMap("ui-table-loading-icon pi-spin " + ctx_r2.loadingIcon);
        }
    }
    function AdaptTableComponent_adapt_table_toolbar_11_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "adapt-table-toolbar", 34, 35);
        }
        if (rf & 2) {
            var ctx_r3 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("config", ctx_r3.toolbarConfig)("texts", ctx_r3.texts);
        }
    }
    function AdaptTableComponent_div_19_ng_container_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    function AdaptTableComponent_div_19_ng_container_10_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    function AdaptTableComponent_div_19_tfoot_15_ng_container_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    var _c17 = function (a0) { return { $implicit: a0 }; };
    function AdaptTableComponent_div_19_tfoot_15_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "tfoot", 44);
            i0__namespace.ɵɵtext(1, "\n              ");
            i0__namespace.ɵɵtemplate(2, AdaptTableComponent_div_19_tfoot_15_ng_container_2_Template, 1, 0, "ng-container", 39);
            i0__namespace.ɵɵtext(3, "\n              ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r43 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r43.footerTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c17, ctx_r43.columns));
        }
    }
    function AdaptTableComponent_div_19_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 36);
            i0__namespace.ɵɵtext(1, "\n            ");
            i0__namespace.ɵɵelementStart(2, "table", 37, 38);
            i0__namespace.ɵɵtext(4, "\n              ");
            i0__namespace.ɵɵtemplate(5, AdaptTableComponent_div_19_ng_container_5_Template, 1, 0, "ng-container", 39);
            i0__namespace.ɵɵtext(6, "\n              ");
            i0__namespace.ɵɵelementStart(7, "thead", 40, 41);
            i0__namespace.ɵɵtext(9, "\n              ");
            i0__namespace.ɵɵtemplate(10, AdaptTableComponent_div_19_ng_container_10_Template, 1, 0, "ng-container", 39);
            i0__namespace.ɵɵtext(11, "\n              ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(12, "\n              ");
            i0__namespace.ɵɵelement(13, "tbody", 42);
            i0__namespace.ɵɵtext(14, "\n              ");
            i0__namespace.ɵɵtemplate(15, AdaptTableComponent_div_19_tfoot_15_Template, 4, 4, "tfoot", 43);
            i0__namespace.ɵɵtext(16, "\n            ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(17, "\n          ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r6 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngClass", ctx_r6.tableStyleClass)("ngStyle", ctx_r6.tableStyle);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r6.colGroupTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(9, _c17, ctx_r6.columns));
            i0__namespace.ɵɵadvance(5);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r6.headerTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(11, _c17, ctx_r6.columns));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("pTableBody", ctx_r6.columns)("pTableBodyTemplate", ctx_r6.bodyTemplate);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r6.footerTemplate);
        }
    }
    var _c18 = function (a0) { return { width: a0 }; };
    function AdaptTableComponent_div_21_div_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "div", 48);
        }
        if (rf & 2) {
            var ctx_r45 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("pScrollableView", ctx_r45.frozenColumns)("frozen", true)("ngStyle", i0__namespace.ɵɵpureFunction1(4, _c18, ctx_r45.frozenWidth))("scrollHeight", ctx_r45.scrollHeight);
        }
    }
    var _c19 = function (a0, a1) { return { left: a0, width: a1 }; };
    function AdaptTableComponent_div_21_Template(rf, ctx) {
        if (rf & 1) {
            var _r47_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 45);
            i0__namespace.ɵɵlistener("elementResize", function AdaptTableComponent_div_21_Template_div_elementResize_0_listener() { i0__namespace.ɵɵrestoreView(_r47_1); var ctx_r46 = i0__namespace.ɵɵnextContext(); return ctx_r46.handleScrollableWrapperResizing(); });
            i0__namespace.ɵɵtext(1, "\n            ");
            i0__namespace.ɵɵtemplate(2, AdaptTableComponent_div_21_div_2_Template, 1, 6, "div", 46);
            i0__namespace.ɵɵtext(3, "\n            ");
            i0__namespace.ɵɵelement(4, "div", 47);
            i0__namespace.ɵɵtext(5, "\n          ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r7 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r7.frozenColumns || ctx_r7.frozenBodyTemplate);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("pScrollableView", ctx_r7.columns)("frozen", false)("scrollHeight", ctx_r7.scrollHeight)("ngStyle", i0__namespace.ɵɵpureFunction2(5, _c19, ctx_r7.frozenWidth, "calc(100% - " + ctx_r7.frozenWidth + ")"));
        }
    }
    var _c20 = function (a0) { return { height: a0 }; };
    function AdaptTableComponent_div_23_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "div", 49);
        }
        if (rf & 2) {
            var ctx_r8 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("ngStyle", i0__namespace.ɵɵpureFunction1(2, _c20, ctx_r8.tableBodyHeight))("@dataRefreshAnimation", undefined);
        }
    }
    function AdaptTableComponent_adapt_paginator_27_Template(rf, ctx) {
        if (rf & 1) {
            var _r49_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "adapt-paginator", 50);
            i0__namespace.ɵɵlistener("onPageChange", function AdaptTableComponent_adapt_paginator_27_Template_adapt_paginator_onPageChange_0_listener($event) { i0__namespace.ɵɵrestoreView(_r49_1); var ctx_r48 = i0__namespace.ɵɵnextContext(); return ctx_r48.onPageChange($event); });
            i0__namespace.ɵɵtext(1, "\n      ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r9 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("rows", ctx_r9.rows)("first", ctx_r9.first)("totalRecords", ctx_r9.totalRecords)("pageLinkSize", ctx_r9.pageLinks)("alwaysShow", ctx_r9.alwaysShowPaginator)("rowsPerPageOptions", ctx_r9.rowsPerPageOptions)("dropdownAppendTo", ctx_r9.paginatorDropdownAppendTo)("currentPageReportTemplate", ctx_r9.currentPageReportTemplate)("showCurrentPageReport", ctx_r9.showCurrentPageReport)("texts", ctx_r9.texts)("paginatorAlign", ctx_r9.paginatorAlign)("ngClass", ctx_r9.paginatorClass);
        }
    }
    function AdaptTableComponent_div_29_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "div", 51, 52);
        }
    }
    function AdaptTableComponent_span_31_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "span", 53, 54);
        }
    }
    function AdaptTableComponent_span_33_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "span", 55, 56);
        }
    }
    function AdaptTableComponent_div_36_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "div", 57);
        }
        if (rf & 2) {
            var ctx_r13 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("ngBusy", ctx_r13.busyConfig)("adaptRadarDisableEventSending", true);
        }
    }
    function AdaptTableComponent_ng_template_45_col_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "col", 64);
        }
    }
    function AdaptTableComponent_ng_template_45_col_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "col", 65);
        }
    }
    function AdaptTableComponent_ng_template_45_col_7_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "col", 66);
        }
    }
    function AdaptTableComponent_ng_template_45_col_9_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "col", 67);
        }
    }
    function AdaptTableComponent_ng_template_45_ng_template_11_ng_template_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n          ");
        }
    }
    function AdaptTableComponent_ng_template_45_ng_template_11_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n          ");
            i0__namespace.ɵɵtemplate(1, AdaptTableComponent_ng_template_45_ng_template_11_ng_template_1_Template, 1, 0, "ng-template", 68);
            i0__namespace.ɵɵtext(2, "\n        ");
        }
        if (rf & 2) {
            var columns_r53 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r58 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r58.dataColumnsColsTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c17, columns_r53));
        }
    }
    function AdaptTableComponent_ng_template_45_ng_template_13_ng_container_1_col_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "col", 72, 73);
        }
        if (rf & 2) {
            var _r67 = i0__namespace.ɵɵreference(1);
            var renderingColumn_r64 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r65 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵproperty("ngStyle", ctx_r65.getColumnStyles(renderingColumn_r64.columnsConfigs[0], _r67));
        }
    }
    function AdaptTableComponent_ng_template_45_ng_template_13_ng_container_1_col_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "col", 74, 75);
        }
        if (rf & 2) {
            var renderingColumn_r64 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r66 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵproperty("ngStyle", ctx_r66.getColumnStyles(renderingColumn_r64.columnsConfigs[0]));
        }
    }
    function AdaptTableComponent_ng_template_45_ng_template_13_ng_container_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n            ");
            i0__namespace.ɵɵtemplate(2, AdaptTableComponent_ng_template_45_ng_template_13_ng_container_1_col_2_Template, 2, 1, "col", 70);
            i0__namespace.ɵɵtext(3, "\n            ");
            i0__namespace.ɵɵtemplate(4, AdaptTableComponent_ng_template_45_ng_template_13_ng_container_1_col_4_Template, 2, 1, "col", 71);
            i0__namespace.ɵɵtext(5, "\n          ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var renderingColumn_r64 = ctx.$implicit;
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", !renderingColumn_r64.columnsConfigs[0].actionsConfig);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", !!renderingColumn_r64.columnsConfigs[0].actionsConfig);
        }
    }
    function AdaptTableComponent_ng_template_45_ng_template_13_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n          ");
            i0__namespace.ɵɵtemplate(1, AdaptTableComponent_ng_template_45_ng_template_13_ng_container_1_Template, 6, 2, "ng-container", 69);
            i0__namespace.ɵɵtext(2, "\n        ");
        }
        if (rf & 2) {
            var columns_r53 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r60 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r60.getColumnsForRendering(columns_r53))("ngForTrackBy", ctx_r60.trackByForRenderingColumns);
        }
    }
    function AdaptTableComponent_ng_template_45_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n      ");
            i0__namespace.ɵɵelementStart(1, "colgroup");
            i0__namespace.ɵɵtext(2, "\n        ");
            i0__namespace.ɵɵtemplate(3, AdaptTableComponent_ng_template_45_col_3_Template, 1, 0, "col", 58);
            i0__namespace.ɵɵtext(4, "\n        ");
            i0__namespace.ɵɵtemplate(5, AdaptTableComponent_ng_template_45_col_5_Template, 1, 0, "col", 59);
            i0__namespace.ɵɵtext(6, "\n        ");
            i0__namespace.ɵɵtemplate(7, AdaptTableComponent_ng_template_45_col_7_Template, 1, 0, "col", 60);
            i0__namespace.ɵɵtext(8, "\n        ");
            i0__namespace.ɵɵtemplate(9, AdaptTableComponent_ng_template_45_col_9_Template, 1, 0, "col", 61);
            i0__namespace.ɵɵtext(10, "\n\n        ");
            i0__namespace.ɵɵtemplate(11, AdaptTableComponent_ng_template_45_ng_template_11_Template, 3, 4, "ng-template", 62);
            i0__namespace.ɵɵtext(12, "\n\n        ");
            i0__namespace.ɵɵtemplate(13, AdaptTableComponent_ng_template_45_ng_template_13_Template, 3, 2, "ng-template", null, 63, i0__namespace.ɵɵtemplateRefExtractor);
            i0__namespace.ɵɵtext(15, "\n      ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(16, "\n    ");
        }
        if (rf & 2) {
            var _r59 = i0__namespace.ɵɵreference(14);
            var ctx_r17 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", ctx_r17.enableReorderableRows);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r17.isSingleSelectionMode());
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r17.hasExpandingBtn);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r17.isMultipleSelectionMode());
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r17.dataColumnsColsTemplate)("ngIfElse", _r59);
        }
    }
    function AdaptTableComponent_ng_template_49_ng_template_1_ng_template_3_Template(rf, ctx) { }
    function AdaptTableComponent_ng_template_49_ng_template_1_ng_template_5_Template(rf, ctx) { }
    function AdaptTableComponent_ng_template_49_ng_template_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n        ");
            i0__namespace.ɵɵelementStart(1, "tr", 77);
            i0__namespace.ɵɵtext(2, "\n          ");
            i0__namespace.ɵɵtemplate(3, AdaptTableComponent_ng_template_49_ng_template_1_ng_template_3_Template, 0, 0, "ng-template", 79);
            i0__namespace.ɵɵtext(4, "\n          ");
            i0__namespace.ɵɵtemplate(5, AdaptTableComponent_ng_template_49_ng_template_1_ng_template_5_Template, 0, 0, "ng-template", 68);
            i0__namespace.ɵɵtext(6, "\n        ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(7, "\n      ");
        }
        if (rf & 2) {
            var columns_r72 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r73 = i0__namespace.ɵɵnextContext();
            var _r22 = i0__namespace.ɵɵreference(56);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵclassProp("at-header-row_bordered", ctx_r73.bordered);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r22);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r73.headerGroupsTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(5, _c17, ctx_r73.getColumnsForRendering(columns_r72)));
        }
    }
    function AdaptTableComponent_ng_template_49_ng_template_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n        ");
        }
    }
    function AdaptTableComponent_ng_template_49_ng_template_7_ng_template_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n          ");
        }
    }
    function AdaptTableComponent_ng_template_49_ng_template_7_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n          ");
            i0__namespace.ɵɵtemplate(1, AdaptTableComponent_ng_template_49_ng_template_7_ng_template_1_Template, 1, 0, "ng-template", 68);
            i0__namespace.ɵɵtext(2, "\n        ");
        }
        if (rf & 2) {
            var columns_r72 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r75 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r75.dataColumnsHeaderTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c17, columns_r72));
        }
    }
    function AdaptTableComponent_ng_template_49_ng_template_9_ng_container_1_th_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r90_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "th", 82, 83);
            i0__namespace.ɵɵlistener("columnResized", function AdaptTableComponent_ng_template_49_ng_template_9_ng_container_1_th_2_Template_th_columnResized_0_listener($event) { i0__namespace.ɵɵrestoreView(_r90_1); var ctx_r89 = i0__namespace.ɵɵnextContext(4); return ctx_r89.handleColumnResized($event); });
            i0__namespace.ɵɵtext(2, "\n              ");
            i0__namespace.ɵɵelement(3, "adapt-table-header-cell", 84);
            i0__namespace.ɵɵtext(4, "\n            ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r91 = i0__namespace.ɵɵnextContext();
            var renderingColumn_r84 = ctx_r91.$implicit;
            var index_r85 = ctx_r91.index;
            var ctx_r86 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵclassMapInterpolate1("at-header-cell ", ctx_r86.tableClasses.HeaderDataCell, "");
            i0__namespace.ɵɵproperty("pResizableColumnDisabled", !ctx_r86.resizableColumns || ctx_r86.isColumnFrozen(renderingColumn_r84.columnsConfigs[0]))("pReorderableColumnDisabled", !ctx_r86.reorderableColumns || ctx_r86.isColumnFrozen(renderingColumn_r84.columnsConfigs[0]))("adaptFrozen", ctx_r86.isColumnFrozen(renderingColumn_r84.columnsConfigs[0]))("adaptData", ctx_r86.getHeaderDataCellDirectiveParams(renderingColumn_r84, index_r85))("ngClass", ctx_r86.getHeaderClass(renderingColumn_r84.columnsConfigs[0]));
            i0__namespace.ɵɵattribute("data-testid", renderingColumn_r84.columnsConfigs[0].testId || renderingColumn_r84.columnsConfigs[0].columnAdaptID);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("renderingColumn", renderingColumn_r84)("index", index_r85)("texts", ctx_r86.texts);
        }
    }
    function AdaptTableComponent_ng_template_49_ng_template_9_ng_container_1_th_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r94_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "th", 85, 83);
            i0__namespace.ɵɵlistener("columnResized", function AdaptTableComponent_ng_template_49_ng_template_9_ng_container_1_th_4_Template_th_columnResized_0_listener($event) { i0__namespace.ɵɵrestoreView(_r94_1); var ctx_r93 = i0__namespace.ɵɵnextContext(4); return ctx_r93.handleColumnResized($event); });
            i0__namespace.ɵɵtext(2, "\n              ");
            i0__namespace.ɵɵelement(3, "adapt-table-header-cell", 84);
            i0__namespace.ɵɵtext(4, "\n            ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r95 = i0__namespace.ɵɵnextContext();
            var renderingColumn_r84 = ctx_r95.$implicit;
            var index_r85 = ctx_r95.index;
            var ctx_r87 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵclassMapInterpolate1("at-header-cell ", ctx_r87.tableClasses.HeaderDataCell, "");
            i0__namespace.ɵɵproperty("pResizableColumnDisabled", !ctx_r87.resizableColumns)("pReorderableColumnDisabled", !ctx_r87.reorderableColumns)("adaptData", ctx_r87.getHeaderDataCellDirectiveParams(renderingColumn_r84, index_r85))("ngClass", ctx_r87.getMergedHeaderClass(renderingColumn_r84.columnsConfigs));
            i0__namespace.ɵɵattribute("data-testid", renderingColumn_r84.columnsConfigs[0].testId || renderingColumn_r84.columnsConfigs[0].columnAdaptID);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("renderingColumn", renderingColumn_r84)("index", index_r85)("texts", ctx_r87.texts);
        }
    }
    function AdaptTableComponent_ng_template_49_ng_template_9_ng_container_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n            ");
            i0__namespace.ɵɵtemplate(2, AdaptTableComponent_ng_template_49_ng_template_9_ng_container_1_th_2_Template, 5, 12, "th", 80);
            i0__namespace.ɵɵtext(3, "\n\n\n            ");
            i0__namespace.ɵɵtemplate(4, AdaptTableComponent_ng_template_49_ng_template_9_ng_container_1_th_4_Template, 5, 11, "th", 81);
            i0__namespace.ɵɵtext(5, "\n          ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var renderingColumn_r84 = ctx.$implicit;
            var ctx_r83 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", renderingColumn_r84.type === ctx_r83.RenderingColumnType.Simple);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", renderingColumn_r84.type === ctx_r83.RenderingColumnType.Merged);
        }
    }
    function AdaptTableComponent_ng_template_49_ng_template_9_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n          ");
            i0__namespace.ɵɵtemplate(1, AdaptTableComponent_ng_template_49_ng_template_9_ng_container_1_Template, 6, 2, "ng-container", 69);
            i0__namespace.ɵɵtext(2, "\n        ");
        }
        if (rf & 2) {
            var columns_r72 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r77 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r77.getColumnsForRendering(columns_r72))("ngForTrackBy", ctx_r77.trackByForRenderingColumns);
        }
    }
    function AdaptTableComponent_ng_template_49_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n      ");
            i0__namespace.ɵɵtemplate(1, AdaptTableComponent_ng_template_49_ng_template_1_Template, 8, 7, "ng-template", 76);
            i0__namespace.ɵɵtext(2, "\n\n\n      ");
            i0__namespace.ɵɵelementStart(3, "tr", 77);
            i0__namespace.ɵɵtext(4, "\n        ");
            i0__namespace.ɵɵtemplate(5, AdaptTableComponent_ng_template_49_ng_template_5_Template, 1, 0, "ng-template", 68);
            i0__namespace.ɵɵtext(6, "\n\n        ");
            i0__namespace.ɵɵtemplate(7, AdaptTableComponent_ng_template_49_ng_template_7_Template, 3, 4, "ng-template", 62);
            i0__namespace.ɵɵtext(8, "\n\n        ");
            i0__namespace.ɵɵtemplate(9, AdaptTableComponent_ng_template_49_ng_template_9_Template, 3, 2, "ng-template", null, 78, i0__namespace.ɵɵtemplateRefExtractor);
            i0__namespace.ɵɵtext(11, "\n\n      ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(12, "\n\n    ");
        }
        if (rf & 2) {
            var _r76 = i0__namespace.ɵɵreference(10);
            var ctx_r19 = i0__namespace.ɵɵnextContext();
            var _r22 = i0__namespace.ɵɵreference(56);
            var _r20 = i0__namespace.ɵɵreference(53);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r19.headerGroupsTemplate);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵclassProp("at-header-row_bordered", ctx_r19.bordered);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r22)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(7, _c17, _r20));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r19.dataColumnsHeaderTemplate)("ngIfElse", _r76);
        }
    }
    function AdaptTableComponent_ng_template_52_adapt_header_selection_checkbox_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r100_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "adapt-header-selection-checkbox", 88);
            i0__namespace.ɵɵlistener("headerCheckboxToggle", function AdaptTableComponent_ng_template_52_adapt_header_selection_checkbox_2_Template_adapt_header_selection_checkbox_headerCheckboxToggle_0_listener($event) { i0__namespace.ɵɵrestoreView(_r100_1); var ctx_r99 = i0__namespace.ɵɵnextContext(2); return ctx_r99.handleHeaderCheckboxToggle($event); });
            i0__namespace.ɵɵtext(1, "\n      ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r97 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("texts", ctx_r97.texts);
        }
    }
    function AdaptTableComponent_ng_template_52_button_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r102_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 89);
            i0__namespace.ɵɵlistener("click", function AdaptTableComponent_ng_template_52_button_4_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r102_1); var ctx_r101 = i0__namespace.ɵɵnextContext(2); return ctx_r101.unselectAllSelected(); });
            i0__namespace.ɵɵtext(1, "\n      ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r98 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("placement", "top")("adaptRadarDisableEventSending", true)("adaptTooltip", ctx_r98.texts.unselectAllSelectedTitle);
            i0__namespace.ɵɵattribute("aria-label", ctx_r98.texts.unselectAllSelectedTitle);
        }
    }
    function AdaptTableComponent_ng_template_52_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n      ");
            i0__namespace.ɵɵtext(1, "\n      ");
            i0__namespace.ɵɵtemplate(2, AdaptTableComponent_ng_template_52_adapt_header_selection_checkbox_2_Template, 2, 1, "adapt-header-selection-checkbox", 86);
            i0__namespace.ɵɵtext(3, "\n\n      ");
            i0__namespace.ɵɵtemplate(4, AdaptTableComponent_ng_template_52_button_4_Template, 2, 4, "button", 87);
            i0__namespace.ɵɵtext(5, "\n    ");
        }
        if (rf & 2) {
            var ctx_r21 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", !ctx_r21.hasSelectionLimit);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r21.hasSelectionLimit && ctx_r21.getRowSelectionArray().length);
        }
    }
    function AdaptTableComponent_ng_template_55_th_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "th", 94);
        }
        if (rf & 2) {
            var ctx_r104 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("adaptFrozen", ctx_r104.hasAtLeastOneFrozenColumn());
        }
    }
    function AdaptTableComponent_ng_template_55_th_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "th", 95);
        }
        if (rf & 2) {
            var ctx_r105 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("adaptFrozen", ctx_r105.hasAtLeastOneFrozenColumn());
        }
    }
    function AdaptTableComponent_ng_template_55_th_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "th", 96);
        }
        if (rf & 2) {
            var ctx_r106 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("adaptFrozen", ctx_r106.hasAtLeastOneFrozenColumn());
        }
    }
    function AdaptTableComponent_ng_template_55_th_7_ng_container_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    var _c21 = function (a0) { return { "at-selection-cell--limited": a0 }; };
    function AdaptTableComponent_ng_template_55_th_7_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "th", 97);
            i0__namespace.ɵɵtext(1, "\n        ");
            i0__namespace.ɵɵtemplate(2, AdaptTableComponent_ng_template_55_th_7_ng_container_2_Template, 1, 0, "ng-container", 98);
            i0__namespace.ɵɵtext(3, "\n      ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var multipleSelectionTemplate_r103 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r107 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("adaptFrozen", ctx_r107.hasAtLeastOneFrozenColumn())("ngClass", i0__namespace.ɵɵpureFunction1(3, _c21, ctx_r107.hasSelectionLimit));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", multipleSelectionTemplate_r103);
        }
    }
    function AdaptTableComponent_ng_template_55_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n      ");
            i0__namespace.ɵɵtemplate(1, AdaptTableComponent_ng_template_55_th_1_Template, 1, 1, "th", 90);
            i0__namespace.ɵɵtext(2, "\n      ");
            i0__namespace.ɵɵtemplate(3, AdaptTableComponent_ng_template_55_th_3_Template, 1, 1, "th", 91);
            i0__namespace.ɵɵtext(4, "\n      ");
            i0__namespace.ɵɵtemplate(5, AdaptTableComponent_ng_template_55_th_5_Template, 1, 1, "th", 92);
            i0__namespace.ɵɵtext(6, "\n      ");
            i0__namespace.ɵɵtemplate(7, AdaptTableComponent_ng_template_55_th_7_Template, 4, 5, "th", 93);
            i0__namespace.ɵɵtext(8, "\n    ");
        }
        if (rf & 2) {
            var ctx_r23 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r23.enableReorderableRows);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r23.isSingleSelectionMode());
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r23.hasExpandingBtn);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r23.isMultipleSelectionMode());
        }
    }
    function AdaptTableComponent_ng_template_59_tr_2_td_3_span_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "span", 115);
        }
    }
    function AdaptTableComponent_ng_template_59_tr_2_td_3_Template(rf, ctx) {
        if (rf & 1) {
            var _r125_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "td", 113);
            i0__namespace.ɵɵlistener("mousedown", function AdaptTableComponent_ng_template_59_tr_2_td_3_Template_td_mousedown_0_listener() { i0__namespace.ɵɵrestoreView(_r125_1); i0__namespace.ɵɵnextContext(); var _r117 = i0__namespace.ɵɵreference(1); var renderRowData_r110 = i0__namespace.ɵɵnextContext().$implicit; var ctx_r124 = i0__namespace.ɵɵnextContext(); return ctx_r124.onReordarableRowMouseDown(_r117, renderRowData_r110.isGroup); });
            i0__namespace.ɵɵtext(1, "\n          ");
            i0__namespace.ɵɵtemplate(2, AdaptTableComponent_ng_template_59_tr_2_td_3_span_2_Template, 1, 0, "span", 114);
            i0__namespace.ɵɵtext(3, "\n          ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var renderRowData_r110 = i0__namespace.ɵɵnextContext(2).$implicit;
            var ctx_r118 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r118.hasNotRowNestingLevel(renderRowData_r110));
        }
    }
    function AdaptTableComponent_ng_template_59_tr_2_td_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "td", 116);
            i0__namespace.ɵɵtext(1, "\n          ");
            i0__namespace.ɵɵelementEnd();
        }
    }
    function AdaptTableComponent_ng_template_59_tr_2_td_22_Template(rf, ctx) {
        if (rf & 1) {
            var _r130_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "td", 117);
            i0__namespace.ɵɵtext(1, "\n            ");
            i0__namespace.ɵɵelementStart(2, "adapt-rx-checkbox", 118);
            i0__namespace.ɵɵlistener("ngModelChange", function AdaptTableComponent_ng_template_59_tr_2_td_22_Template_adapt_rx_checkbox_ngModelChange_2_listener($event) { i0__namespace.ɵɵrestoreView(_r130_1); var renderRowData_r110 = i0__namespace.ɵɵnextContext(2).$implicit; var ctx_r128 = i0__namespace.ɵɵnextContext(); return ctx_r128.onGroupSelectionChanged($event, renderRowData_r110.rowData); });
            i0__namespace.ɵɵtext(3, "\n            ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(4, "\n          ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var renderRowData_r110 = i0__namespace.ɵɵnextContext(2).$implicit;
            var ctx_r121 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("ngStyle", ctx_r121.getCellStyle(renderRowData_r110));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngModel", ctx_r121.isSelectedGroupCheckbox(renderRowData_r110.rowData))("adaptRadarDisableEventSending", true)("indeterminate", ctx_r121.isGroupSelectionIndeterminate(renderRowData_r110.rowData))("disabled", ctx_r121.isGroupCheckboxDisabled(renderRowData_r110.rowData))("ariaLabel", ctx_r121.rowAriaDataResolver ? ctx_r121.rowAriaDataResolver(renderRowData_r110.rowData).rowSelectionAriaLabel || ctx_r121.getRowGroupTitle(renderRowData_r110.rowData) : ctx_r121.getRowGroupTitle(renderRowData_r110.rowData));
        }
    }
    function AdaptTableComponent_ng_template_59_tr_2_ng_template_27_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n            ");
        }
    }
    var _c22 = function (a0) { return { "at-expansion-icon--expanded": a0 }; };
    function AdaptTableComponent_ng_template_59_tr_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r133_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "tr", 101, 102);
            i0__namespace.ɵɵlistener("cdkDragStarted", function AdaptTableComponent_ng_template_59_tr_2_Template_tr_cdkDragStarted_0_listener($event) { i0__namespace.ɵɵrestoreView(_r133_1); var ctx_r132 = i0__namespace.ɵɵnextContext(2); return ctx_r132.onRowDragStarted($event); })("cdkDragDropped", function AdaptTableComponent_ng_template_59_tr_2_Template_tr_cdkDragDropped_0_listener($event) { i0__namespace.ɵɵrestoreView(_r133_1); var _r117 = i0__namespace.ɵɵreference(1); var ctx_r134 = i0__namespace.ɵɵnextContext(2); return ctx_r134.onRowDragDropped($event, _r117); })("cdkDragEnded", function AdaptTableComponent_ng_template_59_tr_2_Template_tr_cdkDragEnded_0_listener($event) { i0__namespace.ɵɵrestoreView(_r133_1); var ctx_r135 = i0__namespace.ɵɵnextContext(2); return ctx_r135.onRowDragEnded($event); })("cdkDragReleased", function AdaptTableComponent_ng_template_59_tr_2_Template_tr_cdkDragReleased_0_listener($event) { i0__namespace.ɵɵrestoreView(_r133_1); var ctx_r136 = i0__namespace.ɵɵnextContext(2); return ctx_r136.onRowDragReleased($event); });
            i0__namespace.ɵɵtext(2, "\n          ");
            i0__namespace.ɵɵtemplate(3, AdaptTableComponent_ng_template_59_tr_2_td_3_Template, 4, 1, "td", 103);
            i0__namespace.ɵɵtext(4, "\n          ");
            i0__namespace.ɵɵtemplate(5, AdaptTableComponent_ng_template_59_tr_2_td_5_Template, 2, 0, "td", 104);
            i0__namespace.ɵɵtext(6, "\n          ");
            i0__namespace.ɵɵelementStart(7, "td", 105, 106);
            i0__namespace.ɵɵtext(9, "\n            ");
            i0__namespace.ɵɵelementStart(10, "button", 107);
            i0__namespace.ɵɵlistener("click", function AdaptTableComponent_ng_template_59_tr_2_Template_button_click_10_listener() { i0__namespace.ɵɵrestoreView(_r133_1); var renderRowData_r110 = i0__namespace.ɵɵnextContext().$implicit; var ctx_r137 = i0__namespace.ɵɵnextContext(); return ctx_r137.onGroupToggleClick(renderRowData_r110.rowData); });
            i0__namespace.ɵɵtext(11, "\n              ");
            i0__namespace.ɵɵnamespaceSVG();
            i0__namespace.ɵɵelementStart(12, "svg", 108);
            i0__namespace.ɵɵtext(13, "\n                ");
            i0__namespace.ɵɵelement(14, "path", 109);
            i0__namespace.ɵɵtext(15, "\n              ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(16, "\n              ");
            i0__namespace.ɵɵnamespaceHTML();
            i0__namespace.ɵɵelementStart(17, "span", 110);
            i0__namespace.ɵɵtext(18);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(19, "\n            ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(20, "\n          ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(21, "\n\n          ");
            i0__namespace.ɵɵtemplate(22, AdaptTableComponent_ng_template_59_tr_2_td_22_Template, 5, 6, "td", 111);
            i0__namespace.ɵɵtext(23, "\n\n          ");
            i0__namespace.ɵɵtext(24, "\n          ");
            i0__namespace.ɵɵelementStart(25, "td", 112);
            i0__namespace.ɵɵtext(26, "\n            ");
            i0__namespace.ɵɵtemplate(27, AdaptTableComponent_ng_template_59_tr_2_ng_template_27_Template, 1, 0, "ng-template", 68);
            i0__namespace.ɵɵtext(28, "\n          ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(29, "\n\n        ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r139 = i0__namespace.ɵɵnextContext();
            var renderRowData_r110 = ctx_r139.$implicit;
            var columns_r111 = ctx_r139.columns;
            var ctx_r114 = i0__namespace.ɵɵnextContext();
            var _r30 = i0__namespace.ɵɵreference(72);
            i0__namespace.ɵɵproperty("cdkDragData", renderRowData_r110)("ngClass", ctx_r114.getGroupRowClass(renderRowData_r110));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", ctx_r114.enableReorderableRows);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r114.isSingleSelectionMode());
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngStyle", ctx_r114.getCellStyle(renderRowData_r110));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵattribute("aria-expanded", ctx_r114.isExpandedGroup(renderRowData_r110.rowData));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction1(13, _c22, ctx_r114.isExpandedGroup(renderRowData_r110.rowData)));
            i0__namespace.ɵɵadvance(6);
            i0__namespace.ɵɵtextInterpolate1("\n                ", ctx_r114.isExpandedGroup(renderRowData_r110.rowData) ? ctx_r114.rowAriaDataResolver && ctx_r114.rowAriaDataResolver(renderRowData_r110.rowData).rowCollapseAriaLabel || ctx_r114.texts.collapseRowText : ctx_r114.rowAriaDataResolver && ctx_r114.rowAriaDataResolver(renderRowData_r110.rowData).rowExpandAriaLabel || ctx_r114.texts.expandRowText, "\n              ");
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵproperty("ngIf", ctx_r114.isMultipleSelectionMode() && !ctx_r114.hasSelectionLimit);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngStyle", ctx_r114.getCellStyle(renderRowData_r110));
            i0__namespace.ɵɵattribute("colspan", ctx_r114.getColumnsForRendering(columns_r111).length + (ctx_r114.hasSelectionLimit ? 1 : 0));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r114.groupValueDataCellTemplate || _r30)("ngTemplateOutletContext", ctx_r114.getGroupValueDataCellTemplateParams(renderRowData_r110));
        }
    }
    function AdaptTableComponent_ng_template_59_ng_template_5_td_4_span_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "span", 115);
        }
    }
    function AdaptTableComponent_ng_template_59_ng_template_5_td_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r151_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "td", 127);
            i0__namespace.ɵɵlistener("mousedown", function AdaptTableComponent_ng_template_59_ng_template_5_td_4_Template_td_mousedown_0_listener() { i0__namespace.ɵɵrestoreView(_r151_1); i0__namespace.ɵɵnextContext(); var _r140 = i0__namespace.ɵɵreference(2); var ctx_r150 = i0__namespace.ɵɵnextContext(2); return ctx_r150.onReordarableRowMouseDown(_r140, null); });
            i0__namespace.ɵɵtext(1, "\n            ");
            i0__namespace.ɵɵtemplate(2, AdaptTableComponent_ng_template_59_ng_template_5_td_4_span_2_Template, 1, 0, "span", 114);
            i0__namespace.ɵɵtext(3, "\n            ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var renderRowData_r110 = i0__namespace.ɵɵnextContext(2).$implicit;
            var ctx_r141 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("adaptFrozen", ctx_r141.hasAtLeastOneFrozenColumn());
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r141.hasNotRowNestingLevel(renderRowData_r110));
        }
    }
    function AdaptTableComponent_ng_template_59_ng_template_5_td_6_Template(rf, ctx) {
        if (rf & 1) {
            var _r155_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "td", 128);
            i0__namespace.ɵɵtext(1, "\n\n              ");
            i0__namespace.ɵɵtext(2, "\n              ");
            i0__namespace.ɵɵelementStart(3, "adapt-rx-radiobutton", 129);
            i0__namespace.ɵɵlistener("click", function AdaptTableComponent_ng_template_59_ng_template_5_td_6_Template_adapt_rx_radiobutton_click_3_listener() { i0__namespace.ɵɵrestoreView(_r155_1); var renderRowData_r110 = i0__namespace.ɵɵnextContext(2).$implicit; var ctx_r153 = i0__namespace.ɵɵnextContext(); return ctx_r153.onRadiobuttonModelChange(renderRowData_r110.rowData); });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(4, "\n            ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var renderRowData_r110 = i0__namespace.ɵɵnextContext(2).$implicit;
            var ctx_r142 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("adaptFrozen", ctx_r142.hasAtLeastOneFrozenColumn());
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("name", ctx_r142.rowSelectionRadiobuttonName)("adaptRadarDisableEventSending", true)("value", ctx_r142.getPrimaryKey(renderRowData_r110.rowData))("checked", ctx_r142.isSingleSelectionRowSelected(renderRowData_r110.rowData))("label", ctx_r142.rowAriaDataResolver && ctx_r142.rowAriaDataResolver(renderRowData_r110.rowData).rowSelectionAriaLabel)("ariaLabel", ctx_r142.rowAriaDataResolver && ctx_r142.rowAriaDataResolver(renderRowData_r110.rowData).rowSelectionAriaLabel)("disabled", ctx_r142.isRowSelectionDisabled(renderRowData_r110.rowData));
        }
    }
    function AdaptTableComponent_ng_template_59_ng_template_5_td_8_button_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "button", 132);
            i0__namespace.ɵɵtext(1, "\n                ");
            i0__namespace.ɵɵnamespaceSVG();
            i0__namespace.ɵɵelementStart(2, "svg", 108);
            i0__namespace.ɵɵtext(3, "\n                  ");
            i0__namespace.ɵɵelement(4, "path", 133);
            i0__namespace.ɵɵtext(5, "\n                ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(6, "\n                ");
            i0__namespace.ɵɵnamespaceHTML();
            i0__namespace.ɵɵelementStart(7, "span", 110);
            i0__namespace.ɵɵtext(8);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(9, "\n              ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var renderRowData_r110 = i0__namespace.ɵɵnextContext(3).$implicit;
            var ctx_r158 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("pRowToggler", renderRowData_r110.rowData);
            i0__namespace.ɵɵattribute("aria-expanded", renderRowData_r110.rowExpanded);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction1(4, _c22, renderRowData_r110.rowExpanded));
            i0__namespace.ɵɵadvance(6);
            i0__namespace.ɵɵtextInterpolate(renderRowData_r110.rowExpanded ? ctx_r158.rowAriaDataResolver && ctx_r158.rowAriaDataResolver(renderRowData_r110.rowData).rowCollapseAriaLabel || ctx_r158.texts.collapseRowText : ctx_r158.rowAriaDataResolver && ctx_r158.rowAriaDataResolver(renderRowData_r110.rowData).rowExpandAriaLabel || ctx_r158.texts.expandRowText);
        }
    }
    var _c23 = function (a0) { return { "at-expansion-cell_no-children": a0 }; };
    function AdaptTableComponent_ng_template_59_ng_template_5_td_8_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "td", 130, 106);
            i0__namespace.ɵɵtext(2, "\n\n              ");
            i0__namespace.ɵɵtemplate(3, AdaptTableComponent_ng_template_59_ng_template_5_td_8_button_3_Template, 10, 6, "button", 131);
            i0__namespace.ɵɵtext(4, "\n            ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var renderRowData_r110 = i0__namespace.ɵɵnextContext(2).$implicit;
            var ctx_r143 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("ngStyle", ctx_r143.getCellStyle(renderRowData_r110))("ngClass", i0__namespace.ɵɵpureFunction1(4, _c23, ctx_r143.nestingStructureData && !ctx_r143.isChildrenExist(renderRowData_r110.rowData)))("adaptFrozen", ctx_r143.hasAtLeastOneFrozenColumn());
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", ctx_r143.shouldShowExpandingButton(renderRowData_r110));
        }
    }
    function AdaptTableComponent_ng_template_59_ng_template_5_td_10_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "td", 134);
            i0__namespace.ɵɵtext(1, "\n              ");
            i0__namespace.ɵɵelementStart(2, "adapt-row-selection-checkbox", 135);
            i0__namespace.ɵɵtext(3, "\n              ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(4, "\n            ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var renderRowData_r110 = i0__namespace.ɵɵnextContext(2).$implicit;
            var ctx_r144 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("ngStyle", ctx_r144.getCellStyle(renderRowData_r110))("adaptFrozen", ctx_r144.hasAtLeastOneFrozenColumn());
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("renderRowData", renderRowData_r110)("value", renderRowData_r110.rowData)("rowAriaDataResolver", ctx_r144.rowAriaDataResolver)("disabled", ctx_r144.isRowSelectionCheckboxDisabled(renderRowData_r110.rowData));
        }
    }
    function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_13_ng_template_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n              ");
        }
    }
    var _c24 = function (a0, a1, a2) { return { columns: a0, renderRowData: a1, rowIndex: a2 }; };
    function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_13_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n              ");
            i0__namespace.ɵɵtemplate(1, AdaptTableComponent_ng_template_59_ng_template_5_ng_template_13_ng_template_1_Template, 1, 0, "ng-template", 68);
            i0__namespace.ɵɵtext(2, "\n            ");
        }
        if (rf & 2) {
            var ctx_r163 = i0__namespace.ɵɵnextContext(2);
            var columns_r111 = ctx_r163.columns;
            var renderRowData_r110 = ctx_r163.$implicit;
            var rowIndex_r112 = ctx_r163.rowIndex;
            var ctx_r145 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r145.dataColumnsDataCellsTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction3(2, _c24, columns_r111, renderRowData_r110, rowIndex_r112));
        }
    }
    function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_3_ng_template_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n                  ");
        }
    }
    function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_3_Template(rf, ctx) {
        if (rf & 1) {
            var _r173_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "td", 138, 139);
            i0__namespace.ɵɵlistener("dblclick", function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_3_Template_td_dblclick_0_listener() { i0__namespace.ɵɵrestoreView(_r173_1); var renderRowData_r110 = i0__namespace.ɵɵnextContext(4).$implicit; var ctx_r171 = i0__namespace.ɵɵnextContext(); return ctx_r171.onTableCellDoubleClick(renderRowData_r110.rowData); });
            i0__namespace.ɵɵtext(2, "\n\n                  ");
            i0__namespace.ɵɵtemplate(3, AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_3_ng_template_3_Template, 1, 0, "ng-template", 68);
            i0__namespace.ɵɵtext(4, "\n                ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var _r169 = i0__namespace.ɵɵreference(1);
            var ctx_r175 = i0__namespace.ɵɵnextContext();
            var index_r166 = ctx_r175.index;
            var renderingColumn_r165 = ctx_r175.$implicit;
            var renderRowData_r110 = i0__namespace.ɵɵnextContext(3).$implicit;
            var ctx_r167 = i0__namespace.ɵɵnextContext();
            var _r36 = i0__namespace.ɵɵreference(84);
            i0__namespace.ɵɵproperty("ngStyle", ctx_r167.getCellStyle(renderRowData_r110, index_r166, renderingColumn_r165.columnsConfigs[0]))("adaptFrozen", ctx_r167.isColumnFrozen(renderingColumn_r165.columnsConfigs[0]))("adaptData", ctx_r167.getDataCellDirectiveParams(renderingColumn_r165, renderRowData_r110))("ngClass", ctx_r167.getDataCellClass(renderingColumn_r165.columnsConfigs[0], renderRowData_r110, _r169))("tabindex", ctx_r167.getDataCellTabIndex(renderingColumn_r165.columnsConfigs[0], renderRowData_r110));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r36)("ngTemplateOutletContext", ctx_r167.getDataCellTemplateParams(renderingColumn_r165.columnsConfigs[0], renderRowData_r110));
        }
    }
    function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_6_div_3_ng_template_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n                    ");
        }
    }
    function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_6_div_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 142);
            i0__namespace.ɵɵtext(1, "\n\n                    ");
            i0__namespace.ɵɵtemplate(2, AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_6_div_3_ng_template_2_Template, 1, 0, "ng-template", 68);
            i0__namespace.ɵɵtext(3, "\n                  ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var columnConfig_r178 = ctx.$implicit;
            var renderRowData_r110 = i0__namespace.ɵɵnextContext(5).$implicit;
            var ctx_r177 = i0__namespace.ɵɵnextContext();
            var _r36 = i0__namespace.ɵɵreference(84);
            i0__namespace.ɵɵattribute("data-merged-column-field", columnConfig_r178.field);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r36)("ngTemplateOutletContext", ctx_r177.getDataCellTemplateParams(columnConfig_r178, renderRowData_r110));
        }
    }
    function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_6_Template(rf, ctx) {
        if (rf & 1) {
            var _r183_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "td", 140, 139);
            i0__namespace.ɵɵlistener("dblclick", function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_6_Template_td_dblclick_0_listener() { i0__namespace.ɵɵrestoreView(_r183_1); var renderRowData_r110 = i0__namespace.ɵɵnextContext(4).$implicit; var ctx_r181 = i0__namespace.ɵɵnextContext(); return ctx_r181.onTableCellDoubleClick(renderRowData_r110.rowData); });
            i0__namespace.ɵɵtext(2, "\n                  ");
            i0__namespace.ɵɵtemplate(3, AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_6_div_3_Template, 4, 3, "div", 141);
            i0__namespace.ɵɵtext(4, "\n                ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var _r176 = i0__namespace.ɵɵreference(1);
            var ctx_r185 = i0__namespace.ɵɵnextContext();
            var index_r166 = ctx_r185.index;
            var renderingColumn_r165 = ctx_r185.$implicit;
            var renderRowData_r110 = i0__namespace.ɵɵnextContext(3).$implicit;
            var ctx_r168 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("ngStyle", ctx_r168.getMergedCellStyle(renderRowData_r110, index_r166, renderingColumn_r165.columnsConfigs))("adaptData", ctx_r168.getDataCellDirectiveParams(renderingColumn_r165, renderRowData_r110))("ngClass", ctx_r168.getMergedDataCellClass(renderingColumn_r165.columnsConfigs, renderRowData_r110, _r176))("tabindex", ctx_r168.getMergedDataCellTabIndex(renderingColumn_r165.columnsConfigs, renderRowData_r110));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngForOf", renderingColumn_r165.columnsConfigs)("ngForTrackBy", ctx_r168.trackByForColumns);
        }
    }
    function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n\n                ");
            i0__namespace.ɵɵtext(2, "\n                ");
            i0__namespace.ɵɵtemplate(3, AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_3_Template, 5, 7, "td", 136);
            i0__namespace.ɵɵtext(4, "\n\n                ");
            i0__namespace.ɵɵtext(5, "\n                ");
            i0__namespace.ɵɵtemplate(6, AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_6_Template, 5, 6, "td", 137);
            i0__namespace.ɵɵtext(7, "\n              ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var renderingColumn_r165 = ctx.$implicit;
            var ctx_r164 = i0__namespace.ɵɵnextContext(4);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", renderingColumn_r165.type === ctx_r164.RenderingColumnType.Simple);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", renderingColumn_r165.type === ctx_r164.RenderingColumnType.Merged);
        }
    }
    function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n              ");
            i0__namespace.ɵɵtemplate(1, AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_Template, 8, 2, "ng-container", 69);
            i0__namespace.ɵɵtext(2, "\n            ");
        }
        if (rf & 2) {
            var columns_r111 = i0__namespace.ɵɵnextContext(2).columns;
            var ctx_r147 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r147.getColumnsForRendering(columns_r111))("ngForTrackBy", ctx_r147.trackByForRenderingColumns);
        }
    }
    function AdaptTableComponent_ng_template_59_ng_template_5_ng_container_20_ng_template_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n            ");
        }
    }
    var _c25 = function (a0, a1, a2) { return { $implicit: a0, rowIndex: a1, columns: a2 }; };
    function AdaptTableComponent_ng_template_59_ng_template_5_ng_container_20_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n            ");
            i0__namespace.ɵɵtemplate(2, AdaptTableComponent_ng_template_59_ng_template_5_ng_container_20_ng_template_2_Template, 1, 0, "ng-template", 68);
            i0__namespace.ɵɵtext(3, "\n          ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r188 = i0__namespace.ɵɵnextContext(2);
            var renderRowData_r110 = ctx_r188.$implicit;
            var rowIndex_r112 = ctx_r188.rowIndex;
            var columns_r111 = ctx_r188.columns;
            i0__namespace.ɵɵnextContext();
            var _r26 = i0__namespace.ɵɵreference(64);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r26)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction3(2, _c25, renderRowData_r110.rowData, rowIndex_r112, columns_r111));
        }
    }
    function AdaptTableComponent_ng_template_59_ng_template_5_Template(rf, ctx) {
        if (rf & 1) {
            var _r190_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵtext(0, "\n          ");
            i0__namespace.ɵɵelementStart(1, "tr", 119, 120);
            i0__namespace.ɵɵlistener("cdkDragStarted", function AdaptTableComponent_ng_template_59_ng_template_5_Template_tr_cdkDragStarted_1_listener($event) { i0__namespace.ɵɵrestoreView(_r190_1); var ctx_r189 = i0__namespace.ɵɵnextContext(2); return ctx_r189.onRowDragStarted($event); })("cdkDragDropped", function AdaptTableComponent_ng_template_59_ng_template_5_Template_tr_cdkDragDropped_1_listener($event) { i0__namespace.ɵɵrestoreView(_r190_1); var _r140 = i0__namespace.ɵɵreference(2); var ctx_r191 = i0__namespace.ɵɵnextContext(2); return ctx_r191.onRowDragDropped($event, _r140); })("cdkDragEnded", function AdaptTableComponent_ng_template_59_ng_template_5_Template_tr_cdkDragEnded_1_listener($event) { i0__namespace.ɵɵrestoreView(_r190_1); var ctx_r192 = i0__namespace.ɵɵnextContext(2); return ctx_r192.onRowDragEnded($event); })("cdkDragReleased", function AdaptTableComponent_ng_template_59_ng_template_5_Template_tr_cdkDragReleased_1_listener($event) { i0__namespace.ɵɵrestoreView(_r190_1); var ctx_r193 = i0__namespace.ɵɵnextContext(2); return ctx_r193.onRowDragReleased($event); });
            i0__namespace.ɵɵtext(3, "\n            ");
            i0__namespace.ɵɵtemplate(4, AdaptTableComponent_ng_template_59_ng_template_5_td_4_Template, 4, 2, "td", 121);
            i0__namespace.ɵɵtext(5, "\n            ");
            i0__namespace.ɵɵtemplate(6, AdaptTableComponent_ng_template_59_ng_template_5_td_6_Template, 5, 8, "td", 122);
            i0__namespace.ɵɵtext(7, "\n            ");
            i0__namespace.ɵɵtemplate(8, AdaptTableComponent_ng_template_59_ng_template_5_td_8_Template, 5, 6, "td", 123);
            i0__namespace.ɵɵtext(9, "\n            ");
            i0__namespace.ɵɵtemplate(10, AdaptTableComponent_ng_template_59_ng_template_5_td_10_Template, 5, 6, "td", 124);
            i0__namespace.ɵɵtext(11, "\n\n            ");
            i0__namespace.ɵɵtext(12, "\n            ");
            i0__namespace.ɵɵtemplate(13, AdaptTableComponent_ng_template_59_ng_template_5_ng_template_13_Template, 3, 6, "ng-template", 62);
            i0__namespace.ɵɵtext(14, "\n\n            ");
            i0__namespace.ɵɵtemplate(15, AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_Template, 3, 2, "ng-template", null, 125, i0__namespace.ɵɵtemplateRefExtractor);
            i0__namespace.ɵɵtext(17, "\n          ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(18, "\n\n          ");
            i0__namespace.ɵɵtext(19, "\n          ");
            i0__namespace.ɵɵtemplate(20, AdaptTableComponent_ng_template_59_ng_template_5_ng_container_20_Template, 4, 6, "ng-container", 126);
            i0__namespace.ɵɵtext(21, "\n\n        ");
        }
        if (rf & 2) {
            var _r146 = i0__namespace.ɵɵreference(16);
            var ctx_r194 = i0__namespace.ɵɵnextContext();
            var renderRowData_r110 = ctx_r194.$implicit;
            var primengExpanded_r113 = ctx_r194.expanded;
            var ctx_r116 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("pEditableRow", renderRowData_r110.rowData)("adaptData", ctx_r116.getDataRowDirectiveParams(renderRowData_r110))("ngClass", ctx_r116.getDataRowClass(renderRowData_r110))("cdkDragData", renderRowData_r110);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", ctx_r116.enableReorderableRows);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r116.isSingleSelectionMode());
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r116.hasExpandingBtn);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r116.isMultipleSelectionMode());
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", ctx_r116.dataColumnsDataCellsTemplate)("ngIfElse", _r146);
            i0__namespace.ɵɵadvance(7);
            i0__namespace.ɵɵproperty("ngIf", !primengExpanded_r113 && renderRowData_r110.rowExpanded && ctx_r116.expandedRowTemplate);
        }
    }
    function AdaptTableComponent_ng_template_59_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n\n        ");
            i0__namespace.ɵɵtext(1, "\n        ");
            i0__namespace.ɵɵtemplate(2, AdaptTableComponent_ng_template_59_tr_2_Template, 30, 15, "tr", 99);
            i0__namespace.ɵɵtext(3, "\n\n        ");
            i0__namespace.ɵɵtext(4, "\n        ");
            i0__namespace.ɵɵtemplate(5, AdaptTableComponent_ng_template_59_ng_template_5_Template, 22, 11, "ng-template", null, 100, i0__namespace.ɵɵtemplateRefExtractor);
            i0__namespace.ɵɵtext(7, "\n    ");
        }
        if (rf & 2) {
            var renderRowData_r110 = ctx.$implicit;
            var _r115 = i0__namespace.ɵɵreference(6);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", renderRowData_r110.isGroup)("ngIfElse", _r115);
        }
    }
    function AdaptTableComponent_ng_template_63_ng_template_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n          ");
        }
    }
    function AdaptTableComponent_ng_template_63_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n      ");
            i0__namespace.ɵɵelementStart(1, "tr", 143);
            i0__namespace.ɵɵtext(2, "\n        ");
            i0__namespace.ɵɵelementStart(3, "td", 144);
            i0__namespace.ɵɵtext(4, "\n          ");
            i0__namespace.ɵɵtemplate(5, AdaptTableComponent_ng_template_63_ng_template_5_Template, 1, 0, "ng-template", 68);
            i0__namespace.ɵɵtext(6, "\n        ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(7, "\n      ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(8, "\n    ");
        }
        if (rf & 2) {
            var dataItem_r195 = ctx.$implicit;
            var columns_r196 = ctx.columns;
            var rowIndex_r197 = ctx.rowIndex;
            var ctx_r27 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngClass", ctx_r27.expandedCellClass);
            i0__namespace.ɵɵattribute("colspan", ctx_r27.getCurrentTableColumnsCount(columns_r196));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r27.expandedRowTemplate)("ngTemplateOutletContext", ctx_r27.getExpandedRowTemplateParams(dataItem_r195, columns_r196, rowIndex_r197));
        }
    }
    function AdaptTableComponent_ng_template_67_tr_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "tr", 146);
            i0__namespace.ɵɵtext(1, "\n        ");
            i0__namespace.ɵɵelementStart(2, "td", 147, 148);
            i0__namespace.ɵɵtext(4, "\n          ");
            i0__namespace.ɵɵelement(5, "adapt-empty-state", 149);
            i0__namespace.ɵɵtext(6, "\n        ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(7, "\n      ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var columns_r199 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r200 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵattribute("colspan", ctx_r200.getCurrentTableColumnsCount(columns_r199));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("type", "grid")("adaptRadarDisableEventSending", true)("label", ctx_r200.getEmptyStateLabelText());
        }
    }
    function AdaptTableComponent_ng_template_67_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n      ");
            i0__namespace.ɵɵtemplate(1, AdaptTableComponent_ng_template_67_tr_1_Template, 8, 4, "tr", 145);
            i0__namespace.ɵɵtext(2, "\n    ");
        }
        if (rf & 2) {
            var ctx_r29 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r29.hasEmptyState && !ctx_r29.loading);
        }
    }
    function AdaptTableComponent_ng_template_71_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0);
        }
        if (rf & 2) {
            var renderRowData_r203 = ctx.$implicit;
            var ctx_r31 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵtextInterpolate1("\n      ", ctx_r31.getRowGroupTitle(renderRowData_r203.rowData), "\n    ");
        }
    }
    function AdaptTableComponent_ng_template_75_ng_container_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n        ");
            i0__namespace.ɵɵelementStart(2, "adapt-table-actions", 150);
            i0__namespace.ɵɵtext(3, "\n        ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(4, "\n      ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r211 = i0__namespace.ɵɵnextContext();
            var column_r204 = ctx_r211.column;
            var dataItem_r205 = ctx_r211.dataItem;
            var rowIndex_r206 = ctx_r211.rowIndex;
            var expanded_r207 = ctx_r211.expanded;
            var editing_r208 = ctx_r211.editing;
            var ctx_r209 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("column", column_r204)("dataItem", dataItem_r205)("rowIndex", rowIndex_r206)("expanded", expanded_r207)("editing", editing_r208)("texts", ctx_r209.texts);
        }
    }
    function AdaptTableComponent_ng_template_75_ng_container_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r212 = i0__namespace.ɵɵnextContext();
            var dataItem_r205 = ctx_r212.dataItem;
            var column_r204 = ctx_r212.column;
            var ctx_r210 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("\n        ", ctx_r210.getColumnData(dataItem_r205, column_r204), "\n      ");
        }
    }
    function AdaptTableComponent_ng_template_75_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n      ");
            i0__namespace.ɵɵtemplate(1, AdaptTableComponent_ng_template_75_ng_container_1_Template, 5, 6, "ng-container", 126);
            i0__namespace.ɵɵtext(2, "\n\n      ");
            i0__namespace.ɵɵtemplate(3, AdaptTableComponent_ng_template_75_ng_container_3_Template, 2, 1, "ng-container", 126);
            i0__namespace.ɵɵtext(4, "\n    ");
        }
        if (rf & 2) {
            var column_r204 = ctx.column;
            var ctx_r33 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r33.getActionConfig(column_r204));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", !ctx_r33.getActionConfig(column_r204));
        }
    }
    function AdaptTableComponent_ng_template_79_Template(rf, ctx) {
        if (rf & 1) {
            var _r219_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵtext(0, "\n      ");
            i0__namespace.ɵɵelementStart(1, "adapt-rx-textfield", 151, 152);
            i0__namespace.ɵɵlistener("ngModelChange", function AdaptTableComponent_ng_template_79_Template_adapt_rx_textfield_ngModelChange_1_listener($event) { var restoredCtx = i0__namespace.ɵɵrestoreView(_r219_1); var dataItem_r214 = restoredCtx.dataItem; var column_r213 = restoredCtx.column; var ctx_r218 = i0__namespace.ɵɵnextContext(); return (ctx_r218.getEditableClonedRow(dataItem_r214)[column_r213.field] = $event); })("keydown", function AdaptTableComponent_ng_template_79_Template_adapt_rx_textfield_keydown_1_listener($event) { var restoredCtx = i0__namespace.ɵɵrestoreView(_r219_1); var dataItem_r214 = restoredCtx.dataItem; var ctx_r220 = i0__namespace.ɵɵnextContext(); return ctx_r220.onTextfieldKeydown(dataItem_r214, $event); });
            i0__namespace.ɵɵtext(3, "\n      ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(4, "\n    ");
        }
        if (rf & 2) {
            var column_r213 = ctx.column;
            var dataItem_r214 = ctx.dataItem;
            var ctx_r35 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("size", "sm")("adaptRadarDisableEventSending", true)("ngModel", ctx_r35.getEditableClonedRow(dataItem_r214)[column_r213.field]);
        }
    }
    function AdaptTableComponent_ng_template_83_ng_container_1_ng_template_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r231_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵtext(0, "\n\n          ");
            i0__namespace.ɵɵtext(1, "\n          ");
            i0__namespace.ɵɵelementStart(2, "div", 154);
            i0__namespace.ɵɵtext(3, "\n            ");
            i0__namespace.ɵɵelementStart(4, "button", 155);
            i0__namespace.ɵɵlistener("click", function AdaptTableComponent_ng_template_83_ng_container_1_ng_template_2_Template_button_click_4_listener() { i0__namespace.ɵɵrestoreView(_r231_1); var renderRowData_r222 = i0__namespace.ɵɵnextContext(2).renderRowData; var ctx_r229 = i0__namespace.ɵɵnextContext(); return ctx_r229.cancelRowEditing(renderRowData_r222.rowData); });
            i0__namespace.ɵɵtext(5, "\n              ");
            i0__namespace.ɵɵelementStart(6, "span", 110);
            i0__namespace.ɵɵtext(7);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(8, "\n            ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(9, "\n            ");
            i0__namespace.ɵɵelementStart(10, "button", 156);
            i0__namespace.ɵɵlistener("click", function AdaptTableComponent_ng_template_83_ng_container_1_ng_template_2_Template_button_click_10_listener() { i0__namespace.ɵɵrestoreView(_r231_1); var renderRowData_r222 = i0__namespace.ɵɵnextContext(2).renderRowData; var ctx_r232 = i0__namespace.ɵɵnextContext(); return ctx_r232.saveRowEditing(renderRowData_r222.rowData); });
            i0__namespace.ɵɵtext(11, "\n              ");
            i0__namespace.ɵɵelementStart(12, "span", 110);
            i0__namespace.ɵɵtext(13);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(14, "\n            ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(15, "\n          ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(16, "\n\n        ");
        }
        if (rf & 2) {
            var ctx_r228 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate(ctx_r228.texts.cancelRowEditingButtonLabel);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate(ctx_r228.texts.saveRowEditingButtonLabel);
        }
    }
    function AdaptTableComponent_ng_template_83_ng_container_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n        ");
            i0__namespace.ɵɵtemplate(2, AdaptTableComponent_ng_template_83_ng_container_1_ng_template_2_Template, 17, 4, "ng-template", 62);
            i0__namespace.ɵɵtext(3, "\n      ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var column_r221 = i0__namespace.ɵɵnextContext().column;
            var _r226 = i0__namespace.ɵɵreference(10);
            var ctx_r223 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r223.getActionConfig(column_r221).enableRowEditingButtons)("ngIfElse", _r226);
        }
    }
    function AdaptTableComponent_ng_template_83_ng_container_4_ng_template_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n        ");
        }
    }
    function AdaptTableComponent_ng_template_83_ng_container_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n        ");
            i0__namespace.ɵɵtemplate(2, AdaptTableComponent_ng_template_83_ng_container_4_ng_template_2_Template, 1, 0, "ng-template", 68);
            i0__namespace.ɵɵtext(3, "\n      ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r236 = i0__namespace.ɵɵnextContext();
            var column_r221 = ctx_r236.column;
            var renderRowData_r222 = ctx_r236.renderRowData;
            var ctx_r224 = i0__namespace.ɵɵnextContext();
            var _r34 = i0__namespace.ɵɵreference(80);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", column_r221.editTemplate || _r34)("ngTemplateOutletContext", ctx_r224.getColumnTemplateParams(column_r221, renderRowData_r222));
        }
    }
    function AdaptTableComponent_ng_template_83_ng_container_6_ng_template_2_Template(rf, ctx) { }
    function AdaptTableComponent_ng_template_83_ng_container_6_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n        ");
            i0__namespace.ɵɵtemplate(2, AdaptTableComponent_ng_template_83_ng_container_6_ng_template_2_Template, 0, 0, "ng-template", 79);
            i0__namespace.ɵɵtext(3, "\n      ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext();
            var _r226 = i0__namespace.ɵɵreference(10);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r226);
        }
    }
    function AdaptTableComponent_ng_template_83_ng_template_9_ng_template_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n        ");
        }
    }
    function AdaptTableComponent_ng_template_83_ng_template_9_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n        ");
            i0__namespace.ɵɵtemplate(1, AdaptTableComponent_ng_template_83_ng_template_9_ng_template_1_Template, 1, 0, "ng-template", 68);
            i0__namespace.ɵɵtext(2, "\n      ");
        }
        if (rf & 2) {
            var ctx_r239 = i0__namespace.ɵɵnextContext();
            var column_r221 = ctx_r239.column;
            var renderRowData_r222 = ctx_r239.renderRowData;
            var ctx_r227 = i0__namespace.ɵɵnextContext();
            var _r32 = i0__namespace.ɵɵreference(76);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", column_r221.cellTemplate || _r32)("ngTemplateOutletContext", ctx_r227.getColumnTemplateParams(column_r221, renderRowData_r222));
        }
    }
    function AdaptTableComponent_ng_template_83_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n\n      ");
            i0__namespace.ɵɵtemplate(1, AdaptTableComponent_ng_template_83_ng_container_1_Template, 4, 2, "ng-container", 126);
            i0__namespace.ɵɵtext(2, "\n\n      ");
            i0__namespace.ɵɵtext(3, "\n      ");
            i0__namespace.ɵɵtemplate(4, AdaptTableComponent_ng_template_83_ng_container_4_Template, 4, 2, "ng-container", 126);
            i0__namespace.ɵɵtext(5, "\n\n      ");
            i0__namespace.ɵɵtemplate(6, AdaptTableComponent_ng_template_83_ng_container_6_Template, 4, 1, "ng-container", 126);
            i0__namespace.ɵɵtext(7, "\n\n      ");
            i0__namespace.ɵɵtext(8, "\n      ");
            i0__namespace.ɵɵtemplate(9, AdaptTableComponent_ng_template_83_ng_template_9_Template, 3, 2, "ng-template", null, 153, i0__namespace.ɵɵtemplateRefExtractor);
            i0__namespace.ɵɵtext(11, "\n    ");
        }
        if (rf & 2) {
            var column_r221 = ctx.column;
            var renderRowData_r222 = ctx.renderRowData;
            var ctx_r37 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r37.isEditableColumn(column_r221) && renderRowData_r222.editing && ctx_r37.getActionConfig(column_r221));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", ctx_r37.isEditableColumn(column_r221) && renderRowData_r222.editing && !ctx_r37.getActionConfig(column_r221));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", !renderRowData_r222.editing || renderRowData_r222.editing && !ctx_r37.isEditableColumn(column_r221));
        }
    }
    var _c26 = function (a0, a1, a2, a3) { return { "ui-table-flex-scrollable": a0, "at-has-paginator": a1, "at-has-toolbar": a2, "at-columns-reorderable": a3 }; };
    var _c27 = function (a0, a1) { return { "at-table-reordable": a0, "at-wrap-cell-text": a1 }; };
    var _c28 = function (a1, a2, a3, a4, a5) { return { "ui-table ui-widget": true, "ui-table-responsive": a1, "ui-table-resizable": a2, "ui-table-resizable-fit": a3, "ui-table-hoverable-rows": a4, "ui-table-auto-layout": a5 }; };
    var _c29 = function (a0) { return { "at-table-scroll-wrapper": a0 }; };
    var _c30 = function (a0) { return { "width": a0 }; };
    /** @deprecated from v8.26.1 Use AdaptTableClasses Enum instead */
    var AdaptGridClasses = /** @class */ (function () {
        function AdaptGridClasses() {
        }
        return AdaptGridClasses;
    }());
    AdaptGridClasses.MAIN = 'adapt-grid';
    AdaptGridClasses.ADAPT_TABLE = 'adapt-table';
    AdaptGridClasses.BORDERED = 'adapt-grid-bordered';
    AdaptGridClasses.PAGEABLE = 'adapt-table-pageable';
    AdaptGridClasses.SCROLLABLE = 'adapt-table-scrollable';
    AdaptGridClasses.STRIPED = 'adapt-table--striped';
    AdaptGridClasses.IS_EMPTY_STATE = 'adapt-table--empty-state';
    AdaptGridClasses.NOT_SCROLLABLE = 'adapt-table-not-scrollable';
    AdaptGridClasses.FULL_HEIGHT_STRETCH = 'adapt-table-full-height-stretch';
    AdaptGridClasses.HAS_NOT_VERTICAL_BODY_OVERFLOW = 'adapt-table--has-not-overflow';
    AdaptGridClasses.LOADING_FULL_TABLE = 'adapt-grid--loading';
    AdaptGridClasses.CELL = {
        ACTIONS_CELL: 'at-actions-cell',
        EDITING: 'at-cell--editing',
    };
    var AdaptTableComponent = /** @class */ (function (_super) {
        __extends(AdaptTableComponent, _super);
        function AdaptTableComponent(el, zone, tableService, cd, filterService, _dir, _renderer, _adaptDeviceDetectionService, _ts, _deprecationMiddleware, _overlayService, _injector) {
            var _this = _super.call(this, el, zone, tableService, cd, filterService) || this;
            _this._dir = _dir;
            _this._renderer = _renderer;
            _this._adaptDeviceDetectionService = _adaptDeviceDetectionService;
            _this._ts = _ts;
            _this._deprecationMiddleware = _deprecationMiddleware;
            _this._overlayService = _overlayService;
            _this._injector = _injector;
            _this.loadingToggle = new i0.EventEmitter();
            _this.currentEditingRows = {};
            _this.isMobile = false;
            _this.rowSelectionRadiobuttonName = null;
            _this.RenderingColumnType = exports.RenderingColumnType;
            _this.tableBodyHeight = '';
            _this.isRtl = false;
            /** Is used for multiple range selection with shiftKey. Is set on checkbox click and `space` click on a focused cell */
            _this.lastSelectedRowId = null;
            _this.columnIndex = 0;
            _this.tableClasses = exports.AdaptTableClasses;
            /**
             * Enables table sorting
             * @docs-default 'false'
             */
            _this.sortable = false;
            /**
             * Enables table filtering
             * @docs-default 'false'
             */
            _this.filterable = false;
            /**
             * Enables triggerable search on filters
             * @docs-default 'false'
             */
            _this.triggerableFilters = false;
            /**
             * Show explicit search button
             * @docs-default 'false'
             */
            _this.explicitSearchBtn = false;
            /**
             * Enables table rows reordering
             * @docs-default 'false'
             */
            _this.enableReorderableRows = false;
            /**
             * Hide tooltips in the entire table
             * @docs-default 'false'
             */
            _this.suppressTooltip = false;
            /**
             * The hash map that is used to control the expansion state of the groups
             * @docs-default {}
             */
            _this.expandedGroupsKeys = {};
            /**
             * Padding of the nested group in pixels. Useful when you want to control padding value for a table group.
             * With a big nesting level, there is still a possibility that table data will be overlapped.
             * In such a case, you can change the control table columns width.
             * @docs-default 31
             */
            _this.nestedGroupPadding = 31; // in pixels
            /**
             * Initial padding of nested group in pixels
             * @docs-default 13
             */
            _this.expandindCellInitialPadding = 13; // pixels. Or get dynamically
            /**
             * The delay to showing tooltip for table header and for the table cell
             * @docs-default 900
             */
            _this.tooltipInitialDelayMs = 900;
            /**
             * Used to set custom class on the AdaptTooltipComponent which is used to show tooltip
             * @docs-default ''
             */
            _this.tooltipClass = '';
            /**
             * Align pagination block to the left or right.
             * @docs-default 'left'
             */
            _this.paginatorAlign = 'left';
            /**
             * Used to toggle the visibility of the empty state visualization(AdaptEmptyStateComponent) for the empty
             * table(table is empty the [value] is null or have 0 length)
             * @docs-default true
             */
            _this.hasEmptyState = true;
            /**
             * Used to turn on "infinite scroll" mode.In combination with [lazy]="true" allow to load the
             * data when the user scrolls to the bottom of the table. This is alternative to the per page pagination.
             * @docs-default false
             */
            _this.enableInfiniteScrolling = false;
            /**
             * Config of full table loader that is used AdaptBusyDirective under the hood
             * @docs-default {busy: null, backdrop: true, sticky: true, message: '', loaderType: 'section'}
             */
            _this.busyConfig = _this._getBusyConfig();
            /**
             * Default 'FilterMatchMode' for all filters
             * @docs-default FilterMatchMode.contains
             */
            _this.defaultFiltersMatchMode = exports.FilterMatchMode.contains;
            /**
             * Wraps long text on a new line instead of truncating
             * @docs-default false
             */
            _this.wrapCellText = false;
            /**
             * Unique attribute test-id for QA
             * @since 11.14.0
             * @docs-default 'adapt-table'
             */
            _this.testID = 'adapt-table';
            /**
             * Based on chosen mode customer will see different variants of selection.<br/>There are 3 possible variants:<br /><b>Both</b> - allows to use both type of selection: "Select on page" and "Select all in table"<br /><b>Chunk</b> - allows to use only "Select on page" type<br /><b>All</b> - allows to use only "Select all in table" type
             * @since 11.10.0
             * @docs-default AdaptTableHeaderSelectionMode.Both
             */
            _this.headerSelectionMode = exports.AdaptTableHeaderSelectionMode.Both;
            /**
             * Number of disabled rows that are selected. Used to calculate header selection menu actions visibility and checkbox state in lazy mode
             * @since 11.10.0
             * @docs-default 0
             */
            _this.disabledSelectedRowsCount = 0;
            /**
             * Number of disabled rows that are not selected. Used to calculate header selection menu actions visibility and checkbox state in lazy mode
             * @since 11.10.0
             * @docs-default 0
             */
            _this.disabledNotSelectedRowsCount = 0;
            /**
             * Number of disabled rows that are selected in filtering mode. Used to calculate header selection menu actions visibility and checkbox state in lazy mode while filtering
             * @since 11.10.0
             * @docs-default 0
             */
            _this.disabledSelectedFilteredRowsCount = 0;
            /**
             Number of disabled rows that are not selected in filtering mode. Used to calculate header selection menu actions visibility and checkbox state in lazy mode while filtering
             * @since 11.10.0
             * @docs-default 0
             */
            _this.disabledNotSelectedFilteredRowsCount = 0;
            /**
             Number of selected rows in filtering mode. Used to calculate header selection menu actions visibility and checkbox state in lazy mode while filtering
             * @since 11.10.0
             * @docs-default 0
             */
            _this.selectedFilteredRowsCount = 0;
            /**
             Total amount of records inside group. Used to calculate header selection menu actions visibility and checkbox state in lazy mode
             * @since 11.10.0
             * @docs-default 0
             */
            _this.totalRecordsInGroup = 0;
            /**
             * Disabling possibility to select rows if set to true
             * @docs-default false
             */
            _this.disableRowSelection = false;
            /**
             * Flag that should be set to true if table data has nesting structure. Used to show/hide expansion icon
             * @docs-default false
             */
            _this.nestingStructureData = false;
            /**
             * In case when table should have nesting view 'nestingKey' property allow to configure name of property where children elements are located. Used to show/hide expansion icon
             * @docs-default 'children'
             */
            _this.nestingKey = 'children';
            /**
             * Enables row editing on 'Enter' keydown when cell is in focus
             * @docs-default false
             */
            _this.enableRowEditing = false;
            /**
             * @docs-default false
             */
            _this.autoScrollToTop = false;
            /**
             * @docs-default
             *
             * @deprecated from v8.26.1 Use 'texts' instead
             */
            _this.filtersTexts = {};
            /**
             * Used to set static width for table. By default, table is flexible and try to change width depends on viewport
             * @docs-default null
             */
            _this.tableWidthConfig = null;
            /**
             * Toggle table borders visibility
             * @docs-default false
             */
            _this.bordered = false;
            /**
             * Toggle "striped" rows mode. If true, every other row will have different background
             * @docs-default false
             */
            _this.striped = false;
            /**
             * Emits on refresh button click
             */
            _this.rowDataRefresh = new i0.EventEmitter();
            /**
             * Emits the event on saving of row editing
             */
            _this.savedRowEditing = new i0.EventEmitter();
            /**
             * Emits the event on cancel of row editing
             */
            _this.canceledRowEditing = new i0.EventEmitter();
            /**
             * Emits the event when user clicks on checkbox of group
             */
            _this.groupSelection = new i0.EventEmitter();
            /**
             * Emits the event on click on a checkbox in the header of the table when groups present
             */
            _this.allGroupedRowsSelection = new i0.EventEmitter();
            /**
             * Emits the event on group expansion
             */
            _this.groupExpansion = new i0.EventEmitter();
            /**
             * Emits when column visibility changed
             */
            _this.columnsVisibilityChange = new i0.EventEmitter();
            /**
             * Emits when the user starts dragging the item
             */
            _this.rowDragStart = new i0.EventEmitter();
            /**
             * Emits when the user has released a drag item, before any animations have started
             */
            _this.rowDragRelease = new i0.EventEmitter();
            /**
             * Emits when the user stops dragging an item in the container
             */
            _this.rowDragEnd = new i0.EventEmitter();
            /**
             * Emits when the user drops the item inside a container
             */
            _this.rowDragDrop = new i0.EventEmitter();
            /**
             * Emits when the user click on any export button. Usage: listen to this event to be notified when to handle table data export <adapt-table (export)="function($event)"></adapt-table>
             * @since 12.10.0
             */
            _this.export = new i0.EventEmitter();
            /**
             * Emits when popupAnimationDone event triggered on toolbar dropdown item
             * Can be useful when you want to handle custom logic after dropdown opened/closed(for example register items from custom template for a correct work of keyboard navigation)
             * @since 12.18.0
             */
            _this.toolbarPopupAnimationDone = new i0.EventEmitter();
            _this.mainClass = true;
            _this.adaptTableClass = true;
            _this._loading = false;
            _this._hasVerticalBodyOverflow = false;
            _this._dontEmitInfiniteScroll = false;
            _this._instanceId = ++AdaptTableComponent.LAST_TABLE_INSTANCE_ID;
            _this._isRefreshingRowData = false;
            _this._destroyed$ = new rxjs.ReplaySubject(1);
            _this._defaultTexts = {
                textFilterTexts: {},
                selectFilterTexts: {},
                mergedFiltersTexts: {}
            };
            _this._defaultMinColWidth = 45;
            _this.editMode = 'row';
            _this.paginatorPosition = 'none';
            _this.reorderableColumns = true;
            _this.rowTrackBy = _this.trackByForRowsData.bind(_this);
            _this.trackByForRenderingRows = _this.trackByForRenderingRows.bind(_this);
            _this.trackByForRenderingColumns = _this.trackByForRenderingColumns.bind(_this);
            _this.trackByForColumns = _this.trackByForColumns.bind(_this);
            _this.trackByForRowsData = _this.trackByForRowsData.bind(_this);
            _this.isRtl = _this._dir.value === 'rtl';
            _this.setDefaultTexts(_ts.getCurrentLanguage());
            _this._tooltipOverlayPlacements = i1.getOverlayConnectedPositions(_this._dir.value);
            return _this;
        }
        Object.defineProperty(AdaptTableComponent.prototype, "expandedRowTemplate", {
            get: function () {
                return this._expandedRowTemplate;
            },
            /**
             * Template that will be shown when row expanded. If not set, the expansion icon will be hidden
             * @docs-default
             */
            set: function (template) {
                this._expandedRowTemplate = template;
                this.expandedRowTemplateRef = i1.isDefined(template) ? this.rowExpansionTemplate : null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptTableComponent.prototype, "isRefreshingRowData", {
            /**
             * Show/hide row data refreshing state
             * @docs-default
             */
            get: function () {
                return this._isRefreshingRowData;
            },
            set: function (value) {
                var _this = this;
                if (value) {
                    this.zone.onStable
                        .pipe(operators.takeUntil(this._destroyed$), operators.take(1))
                        .subscribe(function () {
                        var tableHeaderHeight = _this.scrollable ?
                            _this.scrollableView.scrollHeaderViewChild.nativeElement.offsetHeight :
                            _this.tableHeader.nativeElement.offsetHeight + 2;
                        _this.tableBodyHeight = "calc(100% - " + tableHeaderHeight + "px)";
                        // never detectChanges in a subscription to `onStable` without reattaching to the NgZone
                        // (onStable always emits outside the NgZone)
                        _this.zone.run(function () { return i1.SafeCdr.detectChanges(_this.cd); });
                    });
                }
                this._isRefreshingRowData = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptTableComponent.prototype, "value", {
            get: function () {
                return this._value;
            },
            /**
             * Rows data
             * @docs-default []
             */
            set: function (value) {
                this._value = value;
                if (this.autoScrollToTop && value && this.lazy && value.length <= this.rows && !this.enableInfiniteScrolling) {
                    this.tryScrollToTopTableBody();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptTableComponent.prototype, "scrollableClass", {
            get: function () {
                return this.scrollable;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptTableComponent.prototype, "notScrollableClass", {
            get: function () {
                return !this.scrollableClass;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptTableComponent.prototype, "isEmptyState", {
            get: function () {
                return this.isEmpty();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptTableComponent.prototype, "hasSelection", {
            get: function () {
                return !!this.selectionMode;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptTableComponent.prototype, "hasExpandingBtn", {
            get: function () {
                return !!(this.expandedRowTemplate || this.hasAtLeastOneRowGroupedData());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptTableComponent.prototype, "canShowFullLoader", {
            get: function () {
                return this.showLoader && !this.loadingMore;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptTableComponent.prototype, "paginatorClass", {
            get: function () {
                return this.paginatorAlign === 'right' ? 'at-paginator--right' : '';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptTableComponent.prototype, "loading", {
            get: function () {
                return this._loading;
            },
            /**
             * Control loading state
             * @docs-default false
             */
            set: function (val) {
                this.setIsLoadingState(val);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptTableComponent.prototype, "selectionLimit", {
            get: function () {
                return this.toolbarConfig && this.toolbarConfig.selectionLimit;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptTableComponent.prototype, "hasSelectionLimit", {
            get: function () {
                return !this.isSingleSelectionMode() && Boolean(this.selectionLimit);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptTableComponent.prototype, "isSingleSortMode", {
            get: function () {
                return this.sortMode === exports.SortMode.Single;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptTableComponent.prototype, "isMultipleSortMode", {
            get: function () {
                return this.sortMode === exports.SortMode.Multiple;
            },
            enumerable: false,
            configurable: true
        });
        /* Lifecycles START */
        AdaptTableComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.virtualScroll && !this.scrollable) {
                i1.adaptError('ADAPT TABLE: Seems like you are trying to use "virtualScroll" for non scrollable table. Please set "scrollable" to "true" or remove "virtualScroll"');
            }
            _super.prototype.ngOnInit.call(this);
            this._deprecationMiddleware.init(this);
            this.primengTable = this;
            this.bodyTemplate = this.tableBodyTemplateRef;
            this.headerTemplate = this.tableHeaderTemplateRef;
            this.colGroupTemplate = this.tableColgroupTemplateRef;
            this.emptyMessageTemplate = this.tableEmptyMessageTemplateRef;
            this.isMobile = this._adaptDeviceDetectionService.isMobile();
            this.texts = Object.assign(Object.assign({}, this._defaultTexts), this.texts);
            this.rowSelectionRadiobuttonName = "rowSelectionGroup" + this._instanceId;
            this.columns.forEach(function (col) {
                /*
                 * Generate property columnAdaptID to assign [attr.data-testid] in QA purposes.
                 * Column index must be static number during reordering columns.
                 */
                col.columnAdaptID = 'adapt-table-' + _this._instanceId + '-th-' + _this.columnIndex++;
            });
            this._autoScrollTopOnValueSourceChangeForNotLazy();
            // If totalRecords is null we assume that all other inputs also can't be calculated
            if (lodashEs.isNull(this.totalRecords)) {
                this.disabledSelectedRowsCount = null;
                this.disabledNotSelectedRowsCount = null;
                this.disabledSelectedFilteredRowsCount = null;
                this.disabledNotSelectedFilteredRowsCount = null;
                this.selectedFilteredRowsCount = null;
                this.totalRecordsInGroup = null;
            }
        };
        AdaptTableComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this._setHostClassHasNotScroll();
            this.zone.runOutsideAngular(function () {
                _this.zone.onStable.asObservable().pipe(operators.takeUntil(_this._destroyed$)).subscribe(function () {
                    // !TODO: Potential performance bottleneck
                    _this.updateHasBodyScroll();
                });
            });
            this.updateFirstHeaderCellWidth();
            this._showInstantiatedTooltipDelayed = lodashEs.debounce(this._showInstantiatedTooltip, this.tooltipInitialDelayMs);
            this.zone.runOutsideAngular(function () {
                rxjs.fromEvent(_this.el.nativeElement, 'mousemove').pipe(operators.debounceTime(100), operators.takeUntil(_this._destroyed$)).subscribe(function (e) { return _this._onTableMouseMoveDebounced(e); });
                rxjs.fromEvent(_this.el.nativeElement, 'mouseleave')
                    .pipe(operators.takeUntil(_this._destroyed$))
                    .subscribe(function (e) { return _this._onTableMouseLeave(e); });
                rxjs.fromEvent(_this.el.nativeElement, 'mousemove').pipe(operators.takeUntil(_this._destroyed$))
                    .subscribe(function (e) { return _this._onTableMouseMove(e); });
                rxjs.fromEvent(_this.el.nativeElement, 'click').pipe(operators.takeUntil(_this._destroyed$))
                    .subscribe(function (e) { return _this._onTableClick(e); });
            });
            this._enableKeyboardNavigation();
            this.subscribeOnTableBodyScroll();
            this._recalculateActionColWidth();
            this.tableService.viewRelatedDataSource$
                .pipe(operators.takeUntil(this._destroyed$))
                .subscribe(function () {
                _this._recalculateActionColWidth();
            });
        };
        AdaptTableComponent.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
            if (this._docListener) {
                this._docListener();
            }
            this._hideTooltip();
            this._destroyed$.next(true);
            this._destroyed$.complete();
        };
        AdaptTableComponent.prototype.ngOnChanges = function (changes) {
            _super.prototype.ngOnChanges.call(this, changes);
            if (changes.rows && !changes.rows.firstChange && this.virtualScroll) {
                this.cd.detectChanges();
            }
            if (changes.texts && !changes.texts.firstChange) {
                this.texts = Object.assign(Object.assign({}, this._defaultTexts), this.texts);
            }
        };
        /* Lifecycles END */
        /* ------------------------------------------------------------------------------------------------ */
        /* Getters START */
        AdaptTableComponent.prototype.getTableService = function () {
            return this.tableService;
        };
        AdaptTableComponent.prototype.getScrollableBodyElement = function () {
            if (this.virtualScroll) {
                return this.scrollableView && this.scrollableView.virtualScrollBody
                    && this.scrollableView.virtualScrollBody.elementRef.nativeElement;
            }
            return this.scrollableView && this.scrollableView.scrollBodyViewChild.nativeElement;
        };
        AdaptTableComponent.prototype.getColumnData = function (dataItem, column) {
            return this.resolveFieldData(dataItem, column.field);
        };
        AdaptTableComponent.prototype.getCurrentTableColumnsCount = function (columns) {
            return this.getColumnsForRendering(columns).length + (+!!this.isMultipleSelectionMode()) + (+!!this.isSingleSelectionMode()) +
                (+!!this.hasExpandingBtn) + (+this.enableReorderableRows);
        };
        AdaptTableComponent.prototype.getVisibleColumns = function (columns) {
            var _this = this;
            return (columns || this.columns).filter(function (c) { return _this.isColumnVisible(c); });
        };
        AdaptTableComponent.prototype.getColumnsForRendering = function (columns) {
            var _this = this;
            var visibleColumns = this.getVisibleColumns(columns);
            if (!this.mergeColumns) {
                return visibleColumns.map(function (column) {
                    return {
                        columnsConfigs: [column],
                        type: exports.RenderingColumnType.Simple
                    };
                });
            }
            var columnsOrder = {};
            visibleColumns.forEach(function (col, i) {
                columnsOrder[col.field] = i;
            });
            var currentViewportWidth = window.innerWidth;
            var mergedColumnPairs = this.mergeColumns ? this.mergeColumns
                .filter(function (item) { return item.viewportWidth > currentViewportWidth
                && [_this._getColumnByField(visibleColumns, item.field1), _this._getColumnByField(visibleColumns, item.field2)]
                    .every(function (column) { return i1.isDefined(column); }); })
                .map(function (pair) {
                return {
                    columnsConfigs: [_this._getColumnByField(visibleColumns, pair.field1), _this._getColumnByField(visibleColumns, pair.field2)]
                        .sort(function (a, b) { return columnsOrder[a.field] - columnsOrder[b.field]; }),
                    type: exports.RenderingColumnType.Merged
                };
            }) : [];
            var singleColumns = visibleColumns.filter(function (column) {
                return !mergedColumnPairs.some(function (item) { return item.columnsConfigs[0].field === column.field
                    || item.columnsConfigs[1] && item.columnsConfigs[1].field === column.field; });
            }).map(function (item) {
                return {
                    columnsConfigs: [item],
                    type: exports.RenderingColumnType.Simple
                };
            });
            return __spreadArray(__spreadArray([], __read(singleColumns)), __read(mergedColumnPairs)).sort(function (a, b) { return columnsOrder[a.columnsConfigs[0].field] - columnsOrder[b.columnsConfigs[0].field]; });
        };
        AdaptTableComponent.prototype.getColumnWidth = function (column, minWidth, colEl) {
            if (!column.width && this.scrollable && this.isMobile) {
                return Math.floor(this.tableContainer.nativeElement.offsetWidth * .9) + "px";
            }
            var minWidthNumber = parseInt(minWidth, 10);
            if (column.width
                && (column.width.includes('px') && parseInt(column.width) > minWidthNumber
                    || (colEl === null || colEl === void 0 ? void 0 : colEl.offsetParent) && (colEl === null || colEl === void 0 ? void 0 : colEl.clientWidth) > minWidthNumber)) {
                return column.width;
            }
            // To avoid situations when column has 0 width and can't be visible for the user set "width" property equal "min-width".
            // We need to do that because min-width not always work correctly for table columns.
            // Additional details can be found here - https://github.bmc.com/bmc-ux/adapt-angular/issues/7833
            if ((colEl === null || colEl === void 0 ? void 0 : colEl.offsetParent) && (colEl === null || colEl === void 0 ? void 0 : colEl.clientWidth) <= minWidthNumber) {
                return minWidth;
            }
            return null;
        };
        AdaptTableComponent.prototype.getColumnStyles = function (column, colEl) {
            var minWidth = i1.isDefined(column.minWidth) ? i1.getValueOrFunc(column.minWidth) : this._defaultMinColWidth + "px";
            // If columns was resized take width info from the data attribute "resizedWidth" where saved correct width after resize
            var width = (this.resizableColumns ? colEl === null || colEl === void 0 ? void 0 : colEl.dataset['resizedWidth'] : null) || this.getColumnWidth(column, minWidth, colEl);
            return { width: width, minWidth: minWidth };
        };
        AdaptTableComponent.prototype.getRowGroupTitle = function (dataItem) {
            var _a;
            return (_a = dataItem.groupTitle) !== null && _a !== void 0 ? _a : dataItem.groupValue;
        };
        AdaptTableComponent.prototype.getPlainExpandedRenderingRows = function (rowsData, withNotExpanded) {
            var _this = this;
            if (withNotExpanded === void 0) { withNotExpanded = false; }
            if (lodashEs.isNil(rowsData)) {
                return [];
            }
            var rootGroupDataItemsCount = 0;
            var hasGroup = false;
            var getPlainExpandedRenderingRowsRec = function (dataItem, nestingLevel, primengRowIndex) {
                var e_1, _e;
                if (i1.isDefined(dataItem) && hasRowGroupedData(dataItem)) {
                    hasGroup = true;
                    if (withNotExpanded || _this.isExpandedGroup(dataItem)) {
                        var expItems = [{
                                nestingLevel: nestingLevel,
                                rowData: dataItem,
                                isGroup: true,
                                rowIndexForRootGroup: 0,
                                editing: false,
                                groupExpanded: true,
                                rowExpanded: false,
                            }];
                        try {
                            for (var _f = __values(dataItem.items), _g = _f.next(); !_g.done; _g = _f.next()) {
                                var item = _g.value;
                                expItems.push.apply(expItems, __spreadArray([], __read(getPlainExpandedRenderingRowsRec(item, nestingLevel + 1, primengRowIndex))));
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_g && !_g.done && (_e = _f.return)) _e.call(_f);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        return expItems;
                    }
                    return [{
                            nestingLevel: nestingLevel,
                            rowData: dataItem,
                            isGroup: true,
                            rowIndexForRootGroup: 0,
                            editing: false,
                            groupExpanded: false,
                            rowExpanded: false,
                        }];
                }
                else {
                    var rowIndexForRootGroup = hasGroup ? (rootGroupDataItemsCount++) : primengRowIndex;
                    return [{
                            nestingLevel: nestingLevel,
                            rowData: dataItem,
                            isGroup: false,
                            rowIndexForRootGroup: rowIndexForRootGroup,
                            editing: _this.isRowEditing(dataItem),
                            groupExpanded: false,
                            rowExpanded: _this.isRowExpanded(dataItem),
                        }];
                }
            };
            return lodashEs.flatten(rowsData.map(function (rowData, i) { return getPlainExpandedRenderingRowsRec(rowData, 0, i); }));
        };
        AdaptTableComponent.prototype.getCellStyle = function (renderRowData, dataColumnIndex, column) {
            var nl = renderRowData.nestingLevel;
            var baseStyles;
            if (nl > 0 && (!dataColumnIndex || dataColumnIndex === 0)) {
                if (!this.isRtl) {
                    baseStyles = {
                        paddingLeft: this.nestedGroupPadding * nl + this.expandindCellInitialPadding + "px",
                    };
                }
                else {
                    baseStyles = {
                        paddingRight: this.nestedGroupPadding * nl + this.expandindCellInitialPadding + "px",
                    };
                }
            }
            if (column && column.dataCellStyle) {
                var param = {
                    dataItem: renderRowData.rowData,
                    rowIndex: renderRowData.rowIndexForRootGroup,
                    column: column,
                    expanded: renderRowData.rowExpanded,
                    editing: renderRowData.editing,
                };
                var custom = i1.getValueOrFunc(column.dataCellStyle, param);
                if (custom) {
                    return baseStyles ? Object.assign({}, custom, baseStyles) : custom;
                }
            }
            return baseStyles;
        };
        AdaptTableComponent.prototype.getMergedCellStyle = function (renderRowData, dataColumnIndex, columns) {
            var _this = this;
            return columns.reduce(function (styles, column) {
                return Object.assign(styles, _this.getCellStyle(renderRowData, dataColumnIndex, column));
            }, {});
        };
        /** Returns reference for filteredValue || value || [] */
        AdaptTableComponent.prototype.getAllCurrentRows = function () {
            return this.filteredValue || this.value || [];
        };
        AdaptTableComponent.prototype.getEmptyStateLabelText = function () {
            return this.hasFilter()
                ? this.texts.emptyStateWithFilterLabelText
                : this.texts.emptyStateLabelText;
        };
        AdaptTableComponent.prototype.getDataCellClass = function (column, renderRowData, element) {
            var classes = this.getActionConfig(column) ? [exports.AdaptTableClasses.ActionsCell] : [];
            if (renderRowData.editing && this.isEditableColumn(column)) {
                classes.push(exports.AdaptTableClasses.EditingCell);
            }
            if (column.dataCellClass) {
                var param = {
                    dataItem: renderRowData.rowData,
                    rowIndex: renderRowData.rowIndexForRootGroup,
                    column: column,
                    expanded: renderRowData.rowExpanded,
                    editing: renderRowData.editing,
                };
                var customClass = i1.getValueOrFunc(column.dataCellClass, param);
                if (customClass) {
                    classes.push(customClass);
                }
            }
            if (element && this._hasCellFocus(element)) {
                classes.push('at-cell-focus');
            }
            return classes.join(' ');
        };
        AdaptTableComponent.prototype.getMergedDataCellClass = function (columns, renderRowData, element) {
            var _this = this;
            return columns.map(function (column) { return _this.getDataCellClass(column, renderRowData, element); }).join(' ');
        };
        AdaptTableComponent.prototype.getHeaderClass = function (column) {
            if (column.headerClass) {
                return i1.getValueOrFunc(column.headerClass);
            }
            return '';
        };
        AdaptTableComponent.prototype.getMergedHeaderClass = function (columns) {
            var _this = this;
            return columns.map(function (column) { return _this.getHeaderClass(column); }).join(' ');
        };
        AdaptTableComponent.prototype.getDataRowClass = function (renderingRowData) {
            var classes = renderingRowData.rowExpanded ? ['at-row--expanded'] : [];
            if (this.rowsCustomClass) {
                var customClass = i1.getValueOrFunc(this.rowsCustomClass, renderingRowData);
                if (customClass) {
                    classes.push(customClass);
                }
            }
            if (this.isRowSelected(renderingRowData.rowData)) {
                classes.push('ui-state-highlight'); // primeng class
            }
            if (!this.isRowSelectionDisabled(renderingRowData.rowData) && this.isSingleSelectionMode()) {
                classes.push('ui-selectable-row'); // primeng class
            }
            return classes.join(' ');
        };
        AdaptTableComponent.prototype.getGroupRowClass = function (renderingRowData) {
            var classes = renderingRowData.groupExpanded ? ['at-group-row--expanded'] : [];
            if (this.rowsCustomClass) {
                var customClass = i1.getValueOrFunc(this.rowsCustomClass, renderingRowData);
                if (customClass) {
                    classes.push(customClass);
                }
            }
            return classes.join(' ');
        };
        AdaptTableComponent.prototype.getColumnTemplateParams = function (column, renderRowData) {
            return {
                column: column,
                dataItem: renderRowData.rowData,
                rowIndex: renderRowData.rowIndexForRootGroup,
                expanded: renderRowData.rowExpanded,
                editing: renderRowData.editing,
            };
        };
        AdaptTableComponent.prototype.getGroupValueDataCellTemplateParams = function (renderingRowData) {
            return { $implicit: renderingRowData };
        };
        AdaptTableComponent.prototype.getCurrentPageDisplayingRows = function () {
            if (this.paginator && !this.lazy) {
                return this.getAllCurrentRows().slice(this.first, this.first + this.rows);
            }
            else {
                return this.getAllCurrentRows();
            }
        };
        AdaptTableComponent.prototype.getCurrentPageDisplayingRowsItems = function () {
            return this.getRowsItems(this.getCurrentPageDisplayingRows());
        };
        AdaptTableComponent.prototype.getRowsItems = function (rows) {
            var rowDataItems = [];
            this.goRecursivelyByItemsInGroups(rows, function (row) {
                rowDataItems.push(row);
            });
            return rowDataItems;
        };
        AdaptTableComponent.prototype.getCurrentPageRenderingDataRows = function (withNotExpanded) {
            if (withNotExpanded === void 0) { withNotExpanded = false; }
            return this.getPlainExpandedRenderingRows(this.getCurrentPageDisplayingRows(), withNotExpanded);
        };
        AdaptTableComponent.prototype.getDataCellTabIndex = function (column, renderRowData) {
            return this.getActionConfig(column) || this.isEditableColumn(column) && renderRowData.editing ? -1 : 0;
        };
        AdaptTableComponent.prototype.getMergedDataCellTabIndex = function (columns, renderRowData) {
            var _this = this;
            return columns.every(function (column) {
                return _this.getActionConfig(column) || _this.isEditableColumn(column) && renderRowData.editing;
            }) ? -1 : 0;
        };
        AdaptTableComponent.prototype.getDataRowDirectiveParams = function (renderingRowData) {
            return {
                dataItem: renderingRowData.rowData,
                rowIndex: renderingRowData.rowIndexForRootGroup,
                expanded: renderingRowData.rowExpanded,
                editing: renderingRowData.editing,
            };
        };
        AdaptTableComponent.prototype.getHeaderDataCellDirectiveParams = function (renderingColumn, index) {
            return {
                renderingColumn: renderingColumn,
                column: renderingColumn.columnsConfigs[0],
                index: index
            };
        };
        AdaptTableComponent.prototype.getDataCellDirectiveParams = function (renderingColumn, renderRowData) {
            return {
                column: renderingColumn.columnsConfigs[0],
                renderingColumn: renderingColumn,
                dataItem: renderRowData.rowData,
                rowIndex: renderRowData.rowIndexForRootGroup,
                expanded: renderRowData.rowExpanded,
                editing: renderRowData.editing,
            };
        };
        AdaptTableComponent.prototype.getExpandedRowTemplateParams = function (dataItem, columns, rowIndex) {
            return {
                dataItem: dataItem,
                rowIndex: rowIndex,
                columns: columns,
            };
        };
        AdaptTableComponent.prototype.getDataCellTemplateParams = function (column, renderRowData) {
            return {
                column: column,
                renderRowData: renderRowData
            };
        };
        AdaptTableComponent.prototype.getPrimaryKey = function (data) {
            return this.resolveFieldData(data, this.dataKey);
        };
        AdaptTableComponent.prototype.getActionConfig = function (column) {
            return column.actionsConfig;
        };
        AdaptTableComponent.prototype.getTableWidth = function (tableWidthConfig, isMobile) {
            if (tableWidthConfig) {
                return isMobile
                    ? tableWidthConfig.mobile === 'auto' ? 'auto' : "" + tableWidthConfig.mobile
                    : tableWidthConfig.desktop === 'auto' ? 'auto' : "" + tableWidthConfig.desktop;
            }
            return 'auto';
        };
        /* Getters END */
        /* ------------------------------------------------------------------------------------------------ */
        /* Checkers START */
        AdaptTableComponent.prototype.hasNotRowNestingLevel = function (renderRowData) {
            return !renderRowData.nestingLevel;
        };
        AdaptTableComponent.prototype.hasReachedTotalRecords = function () {
            var totalRecords = this.totalRecords;
            return (totalRecords != null || totalRecords !== 0) && totalRecords === this.value.length;
        };
        /**
         * In case if user send us `totalRecords` as `null` we assume that there is no possibility to calculate
         * such data on customer side(for example server restrictions)
         */
        AdaptTableComponent.prototype.isTotalRecordsInfoAvailable = function () {
            return lodashEs.isNumber(this.totalRecords);
        };
        AdaptTableComponent.prototype.hasAtLeastOneRowGroupedData = function () {
            var e_2, _e;
            var rowsData = this.getAllCurrentRows();
            try {
                for (var rowsData_1 = __values(rowsData), rowsData_1_1 = rowsData_1.next(); !rowsData_1_1.done; rowsData_1_1 = rowsData_1.next()) {
                    var row = rowsData_1_1.value;
                    if (i1.isDefined(row) && hasRowGroupedData(row)) {
                        return true;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (rowsData_1_1 && !rowsData_1_1.done && (_e = rowsData_1.return)) _e.call(rowsData_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return false;
        };
        AdaptTableComponent.prototype.shouldShowExpandingButton = function (renderRowData) {
            if (!i1.isDefined(this.expandedRowTemplate)) {
                return false;
            }
            var isExpandingDisabled = lodashEs.isFunction(this.disableRowExpandingResolver)
                ? this.disableRowExpandingResolver(renderRowData.rowData)
                : false;
            return !isExpandingDisabled;
        };
        AdaptTableComponent.prototype.isColumnVisible = function (column) {
            return !i1.getValueOrFunc(column.hidden);
        };
        AdaptTableComponent.prototype.isExpandedGroup = function (groupedRowData) {
            var fieldGroup = this.expandedGroupsKeys[groupedRowData.groupField];
            return fieldGroup ? fieldGroup[groupedRowData.groupValue] != null : false;
        };
        AdaptTableComponent.prototype.isGroupCheckboxDisabled = function (grd) {
            return !!this.isRowSelectionDisabled(grd) || this._hasAllChildItemsDisabledForSelection(grd);
        };
        AdaptTableComponent.prototype.isChildrenExist = function (rowData) {
            return !!(rowData[this.nestingKey] && rowData[this.nestingKey].length);
        };
        AdaptTableComponent.prototype.isFilterableColumn = function (column) {
            if (!this.filterable || column.actionsConfig) {
                return false;
            }
            var filterableCol = column.filterable;
            return i1.trueOrNull(filterableCol);
        };
        AdaptTableComponent.prototype.isColumnFrozen = function (column) {
            return i1.getValueOrFunc(column.frozen);
        };
        AdaptTableComponent.prototype.hasAtLeastOneFrozenColumn = function () {
            return this.columns.some(function (column) { return i1.getValueOrFunc(column.frozen); });
        };
        /* Checkers END */
        /* ------------------------------------------------------------------------------------------------ */
        /* Common START */
        AdaptTableComponent.prototype.setDefaultTexts = function (translation) {
            this._defaultTexts.emptyStateLabelText = translation['adapt.table.emptyState'];
            this._defaultTexts.emptyStateWithFilterLabelText = translation['adapt.table.emptyStateWithFilter'];
            this._defaultTexts.actionButtonDefaultLabel = translation['adapt.table.actionButtonDefaultLabel'];
            this._defaultTexts.unselectAllSelectedTitle = translation['adapt.table.unselectAllSelectedTitle'];
            this._defaultTexts.saveRowEditingButtonLabel = translation['adapt.common.save'];
            this._defaultTexts.cancelRowEditingButtonLabel = translation['adapt.common.cancel'];
            this._defaultTexts.fromToOfTextTemplate = translation['adapt.table.toolbar.fromToOfTextTemplate'];
            this._defaultTexts.fromToTextTemplate = translation['adapt.table.toolbar.fromToTextTemplate'];
            this._defaultTexts.totalCountTextTemplate = translation['adapt.table.toolbar.totalCountTextTemplate'];
            this._defaultTexts.totalCountTextTemplatePlural = translation['adapt.table.toolbar.totalCountTextTemplatePlural'];
            this._defaultTexts.noRecordsText = translation['adapt.table.toolbar.noRecordsText'];
            this._defaultTexts.outOfShownTextTemplate = translation['adapt.table.toolbar.outOfShownTextTemplate'];
            this._defaultTexts.recordsCountShownTextTemplate = translation['adapt.table.toolbar.recordsCountShownTextTemplate'];
            this._defaultTexts.recordsCountShownTextTemplatePlural = translation['adapt.table.toolbar.recordsCountShownTextTemplatePlural'];
            this._defaultTexts.searchPlaceholder = translation['adapt.common.search'];
            this._defaultTexts.searchLabel = translation['adapt.common.search'];
            this._defaultTexts.visibleColumnsMenuLabel = translation['adapt.table.toolbar.visibleColumnsMenuLabel'];
            this._defaultTexts.filterButtonLabel = translation['adapt.common.filter'];
            this._defaultTexts.selected = translation['adapt.table.toolbar.selected'];
            this._defaultTexts.showAllSelected = translation['adapt.table.toolbar.showAllSelected'];
            this._defaultTexts.headerSelectRowsArialLabel = translation['adapt.table.headerSelectRowsArialLabel'];
            this._defaultTexts.refresh = translation['adapt.table.toolbar.refresh'];
            this._defaultTexts.clearButtonText = translation['adapt.common.clear'];
            this._defaultTexts.textFilterTexts.placeholder = translation['adapt.common.filter'];
            this._defaultTexts.textFilterTexts.label = translation['adapt.common.filter'];
            this._defaultTexts.selectFilterTexts.defaultTitle = translation['adapt.common.filter'];
            this._defaultTexts.mergedFiltersTexts.buttonNoAppliedFilters = translation['adapt.common.filter'];
            this._defaultTexts.mergedFiltersTexts.buttonAppliedFilter = translation['adapt.table.filters.mergedFilters.appliedFilter'];
            this._defaultTexts.mergedFiltersTexts.buttonAppliedFilters = translation['adapt.table.filters.mergedFilters.appliedFilters'];
            this._defaultTexts.mergedFiltersTexts.appliedFiltersLabel = translation['adapt.table.filters.mergedFilters.appliedFiltersLabel'];
            this._defaultTexts.goBtnText = translation['adapt.table.pagination.go'];
            this._defaultTexts.pageNumberText = translation['adapt.table.pagination.pageNumber'];
            this._defaultTexts.orderLabelSort = translation['adapt.common.sort'];
            this._defaultTexts.orderLabelAddToSort = translation['adapt.table.headerCellMenu.orderLabelAddToSort'];
            this._defaultTexts.orderAscBtn = translation['adapt.table.headerCellMenu.orderAsc'];
            this._defaultTexts.orderDescBtn = translation['adapt.table.headerCellMenu.orderDesc'];
            this._defaultTexts.selectSortOrderLabel = translation['adapt.table.headerCellMenu.selectSortOrderLabel'];
            this._defaultTexts.selectSortOrderOption = translation['adapt.table.headerCellMenu.selectSortOrderOption'];
            this._defaultTexts.removeCurrentFromSortingBtn = translation['adapt.table.headerCellMenu.removeCurrentFromSorting'];
            this._defaultTexts.clearAllSortingBtn = translation['adapt.table.headerCellMenu.clearAllSorting'];
            this._defaultTexts.recordsPerPage = translation['adapt.table.paginator.recordsPerPage'];
            this._defaultTexts.expandRowText = translation['adapt.table.expandRow'];
            this._defaultTexts.collapseRowText = translation['adapt.table.collapseRow'];
            this._defaultTexts.prevPageBtnText = translation['adapt.common.previous'];
            this._defaultTexts.nextPageBtnText = translation['adapt.common.next'];
            this._defaultTexts.selectAllItemsOnPageHeaderLabel = translation['adapt.table.selectAllItemsOnPageHeaderLabel'];
            this._defaultTexts.selectAllFilteredItemsOnPageHeaderLabel = translation['adapt.table.selectAllFilteredItemsOnPageHeaderLabel'];
            this._defaultTexts.selectAllPossibleItemsOnPageHeaderLabel = translation['adapt.table.selectAllPossibleItemsOnPageHeaderLabel'];
            this._defaultTexts.selectAllPossibleFilteredItemsOnPageHeaderLabel = translation['adapt.table.selectAllPossibleFilteredItemsOnPageHeaderLabel'];
            this._defaultTexts.selectAllVisibleItemsHeaderLabel = translation['adapt.table.selectAllVisibleItemsHeaderLabel'];
            this._defaultTexts.selectAllFilteredVisibleItemsHeaderLabel = translation['adapt.table.selectAllFilteredVisibleItemsHeaderLabel'];
            this._defaultTexts.selectAllPossibleVisibleItemsHeaderLabel = translation['adapt.table.selectAllPossibleVisibleItemsHeaderLabel'];
            this._defaultTexts.selectAllPossibleFilteredVisibleItemsHeaderLabel = translation['adapt.table.selectAllPossibleFilteredVisibleItemsHeaderLabel'];
            this._defaultTexts.selectAllItemsInTableHeaderLabel = translation['adapt.table.selectAllItemsInTableHeaderLabel'];
            this._defaultTexts.selectAllItemsInTableHeaderLabelForUnknownTotalRecords = translation['adapt.table.selectAllItemsInTableHeaderLabelForUnknownTotalRecords'];
            this._defaultTexts.selectAllFilteredItemsInTableHeaderLabel = translation['adapt.table.selectAllFilteredItemsInTableHeaderLabel'];
            this._defaultTexts.selectAllPossibleItemsInTableHeaderLabel = translation['adapt.table.selectAllPossibleItemsInTableHeaderLabel'];
            this._defaultTexts.selectAllPossibleFilteredItemsInTableHeaderLabel = translation['adapt.table.selectAllPossibleFilteredItemsInTableHeaderLabel'];
            this._defaultTexts.deselectAllItemsInTableHeaderLabel = translation['adapt.table.deselectAllItemsInTableHeaderLabel'];
            this._defaultTexts.deselectAllFilteredItemsInTableHeaderLabel = translation['adapt.table.deselectAllFilteredItemsInTableHeaderLabel'];
            this._defaultTexts.deselectAllPossibleItemsInTableHeaderLabel = translation['adapt.table.deselectAllPossibleItemsInTableHeaderLabel'];
            this._defaultTexts.deselectAllPossibleFilteredItemsInTableHeaderLabel = translation['adapt.table.deselectAllPossibleFilteredItemsInTableHeaderLabel'];
            this._defaultTexts.export = translation['adapt.table.toolbar.export'];
            this._defaultTexts.exportEntireDocument = translation['adapt.table.toolbar.exportEntireDocument'];
            this._defaultTexts.exportSelected = translation['adapt.table.toolbar.exportSelected'];
        };
        AdaptTableComponent.prototype.onRadiobuttonModelChange = function (rowDataItem) {
            this.toggleRowSelection(rowDataItem);
        };
        AdaptTableComponent.prototype.updateHasBodyScroll = function () {
            if (!this.scrollable) {
                return;
            }
            var hasVerticalBodyOverflow = this.scrollableView.hasVerticalOverflow();
            if (this._hasVerticalBodyOverflow === hasVerticalBodyOverflow) {
                return;
            }
            this._hasVerticalBodyOverflow = hasVerticalBodyOverflow;
            if (hasVerticalBodyOverflow) {
                this.el.nativeElement.classList.remove(exports.AdaptTableClasses.HasNotVerticalBodyOverflow);
            }
            else {
                this._setHostClassHasNotScroll();
            }
            this.scrollableView.alignScrollBar();
        };
        AdaptTableComponent.prototype.handleColumnResized = function (event) {
            this.onColResize.emit(event);
            i1.SafeCdr.detectChanges(this.cd);
        };
        AdaptTableComponent.prototype.onGroupToggleClick = function (groupedRowData) {
            var _this = this;
            var fieldGroup = this.expandedGroupsKeys[groupedRowData.groupField];
            if (!fieldGroup) {
                fieldGroup = this.expandedGroupsKeys[groupedRowData.groupField] = {};
            }
            var oldIsExpanded = this.isExpandedGroup(groupedRowData);
            if (oldIsExpanded) {
                delete fieldGroup[groupedRowData.groupValue];
            }
            else {
                fieldGroup[groupedRowData.groupValue] = true;
            }
            this.groupExpansion.emit({
                expanded: !oldIsExpanded,
                groupedRowData: groupedRowData,
            });
            this.zone.onStable.asObservable().pipe(operators.takeUntil(this._destroyed$), operators.take(1)).subscribe(function () {
                _this.updateFirstHeaderCellWidth();
            });
        };
        AdaptTableComponent.prototype.updateFirstHeaderCellWidth = function () {
            var firstColDirective = this.dataHeaderCells.first;
            var firstCol = firstColDirective && firstColDirective.element;
            if (firstCol && Object.keys(this.expandedGroupsKeys).length > 0 && this.dataRows) {
                firstCol.nativeElement.style.width = null;
                var maxWidth_1 = 0;
                this.dataRows.forEach(function (data) {
                    var firstTd = data.element.nativeElement.querySelector('.at-data-cell');
                    if (firstTd && firstTd.scrollWidth > firstTd.clientWidth && firstTd.scrollWidth > maxWidth_1) {
                        maxWidth_1 = firstTd.scrollWidth;
                    }
                });
                if (maxWidth_1) {
                    if (this.updateFirstColumnWidth) {
                        this.updateFirstColumnWidth(maxWidth_1, firstCol.nativeElement);
                    }
                }
            }
        };
        AdaptTableComponent.prototype.goRecursivelyByItemsInAllGroups = function (cb) {
            var _this = this;
            var allRows = this.getAllCurrentRows();
            allRows.forEach(function (row) { return _this.goRecursivelyByItemsInGroup(row, cb); });
        };
        AdaptTableComponent.prototype.goRecursivelyByItemsInGroups = function (rows, cb) {
            var _this = this;
            rows.forEach(function (row) { return _this.goRecursivelyByItemsInGroup(row, cb); });
        };
        AdaptTableComponent.prototype.goRecursivelyByItemsInGroup = function (rowData, cb) {
            var _this = this;
            if (i1.isDefined(rowData) && hasRowGroupedData(rowData)) {
                rowData.items.forEach(function (item) {
                    _this.goRecursivelyByItemsInGroup(item, cb);
                });
            }
            else {
                cb(rowData);
            }
        };
        AdaptTableComponent.prototype.resolveFieldData = function (data, field) {
            return ObjectUtils.resolveFieldData(data, field);
        };
        AdaptTableComponent.prototype.createLazyLoadMetadata = function (eventSource) {
            return {
                eventSource: eventSource,
                first: this.first,
                rows: this.rows,
                sortField: this.sortField,
                sortOrder: this.sortOrder,
                filters: this.filters,
                globalFilter: this.filters && this.filters.global ? this.filters.global.value : null,
                multiSortMeta: this.multiSortMeta,
                loadMore: false,
                infiniteScrollingFirst: null
            };
        };
        AdaptTableComponent.prototype.subscribeOnTableBodyScroll = function () {
            var _this = this;
            var scrollToEndMargin = 2; // in pixels
            var scrollBody = this.getScrollableBodyElement();
            if (scrollBody) {
                this.zone.runOutsideAngular(function () {
                    rxjs.fromEvent(scrollBody, 'scroll').pipe(operators.takeUntil(_this._destroyed$)).subscribe(function () {
                        if (!_this.enableInfiniteScrolling || _this.loading || _this._dontEmitInfiniteScroll
                            || scrollBody.scrollHeight > scrollBody.scrollTop + scrollBody.offsetHeight + scrollToEndMargin) {
                            return;
                        }
                        if (_this.hasReachedTotalRecords()) {
                            return;
                        }
                        var lazyLoadEvent = Object.assign(Object.assign({}, _this.createLazyLoadMetadata(exports.AdaptTableEventSource.LoadMore)), { loadMore: true, infiniteScrollingFirst: _this.value.length });
                        _this.zone.run(function () {
                            _this._emitLazyLoadEvent(lazyLoadEvent);
                        });
                    });
                });
            }
        };
        AdaptTableComponent.prototype.detectChangesForTooltip = function () {
            var _this = this;
            this.zone.runOutsideAngular(function () {
                setTimeout(function () {
                    if (_this._tooltipOverlayWithPortal) {
                        i1.SafeCdr.detectChanges(_this._tooltipOverlayWithPortal.componentRef.changeDetectorRef);
                    }
                });
            });
        };
        AdaptTableComponent.prototype.setIsLoadingState = function (value) {
            this._loading = value;
            var busyConfigCopy = Object.assign({}, this.busyConfig);
            if (value) {
                if (this.busyConfig.busy) {
                    this.busyConfig.busy.unsubscribe();
                }
                busyConfigCopy.busy = new rxjs.Observable().pipe(operators.takeUntil(this._destroyed$)).subscribe();
                this.busyConfig = busyConfigCopy;
            }
            else {
                if (this.busyConfig.busy) {
                    this.busyConfig.busy.unsubscribe();
                    busyConfigCopy.busy = null;
                    this.busyConfig = busyConfigCopy;
                }
            }
            this.loadingToggle.emit(value);
        };
        AdaptTableComponent.prototype.tryScrollToTopTableBody = function () {
            var scrollableBodyElement = this.getScrollableBodyElement();
            if (scrollableBodyElement) {
                scrollableBodyElement.scrollTop = 0;
            }
        };
        AdaptTableComponent.prototype.onPageChange = function (event) {
            _super.prototype.onPageChange.call(this, event);
            if (this.scrollable) {
                this.resetScrollTop();
            }
            i1.SafeCdr.detectChanges(this.cd);
        };
        AdaptTableComponent.prototype.resetScrollTop = function () {
            if (this.virtualScroll) {
                this.scrollToVirtualIndex(0);
            }
            else {
                this.scrollTo({ top: 0 });
            }
        };
        AdaptTableComponent.prototype.scrollToVirtualIndex = function (index) {
            if (this.scrollableView) {
                this.scrollableView.scrollToVirtualIndex(index);
            }
        };
        AdaptTableComponent.prototype.handleScrollableWrapperResizing = function () {
            if (this.virtualScroll && this.scrollableView.virtualScrollBody) {
                // Because dimensions of scrollable wrapper can be changed in runtime
                // need to call checkViewportSize() method that update the viewport dimensions and re-render
                this.scrollableView.virtualScrollBody.checkViewportSize();
            }
        };
        AdaptTableComponent.prototype.scrollTo = function (options) {
            if (this.scrollableView) {
                this.scrollableView.scrollTo(options);
            }
        };
        AdaptTableComponent.prototype.setDefaultActionColWidth = function () {
            var _this = this;
            var _a, _b, _c, _d;
            var tableElement = this.scrollable
                ? (_b = (_a = this.scrollableView) === null || _a === void 0 ? void 0 : _a.scrollTableViewChild) === null || _b === void 0 ? void 0 : _b.nativeElement
                : (_c = this.nonScrollableTable) === null || _c === void 0 ? void 0 : _c.nativeElement;
            if (!tableElement || !((_d = this.actionColElements) === null || _d === void 0 ? void 0 : _d.length)) {
                return null;
            }
            var actionCols = this.actionColElements.toArray();
            var tableLayout = tableElement.style.tableLayout;
            // Set table layout to auto and actions column width to 1% to get the width of the action column based on its content
            var actionColsWidth = actionCols.map(function (actionCol) {
                _this._renderer.setStyle(tableElement, 'tableLayout', 'auto');
                _this._renderer.setStyle(actionCol.nativeElement, 'width', '1%');
                var width = actionCol.nativeElement.clientWidth;
                // Reset styles to previous values after action column width was calculated
                _this._renderer.setStyle(tableElement, 'tableLayout', tableLayout);
                _this._renderer.setStyle(actionCol.nativeElement, 'width', '');
                return width;
            });
            this.zone.run(function () {
                // Find maximum column width and set it to the action column
                actionCols.forEach(function (actionCol) {
                    _this._renderer.setStyle(actionCol.nativeElement, 'width', Math.max.apply(Math, __spreadArray([], __read(actionColsWidth))) + "px");
                });
            });
        };
        /* Common END */
        /* ------------------------------------------------------------------------------------------------ */
        /* TrackBy START */
        AdaptTableComponent.prototype.trackByForRenderingRows = function (index, renderRowData) {
            // by primary key or index
            if (renderRowData.isGroup) {
                var grd = renderRowData.rowData;
                return "groupValue_" + grd.groupField + ":" + grd.groupValue;
            }
            else {
                return this.getPrimaryKey(renderRowData.rowData) || index;
            }
        };
        AdaptTableComponent.prototype.trackByForRowsData = function (index, row) {
            return this.getPrimaryKey(row) || index;
        };
        AdaptTableComponent.prototype.trackByForRenderingColumns = function (index, renderingColumn) {
            // by primary key or index
            return renderingColumn.columnsConfigs.map(function (column) { return column.field; }).join('-') || index;
        };
        AdaptTableComponent.prototype.trackByForColumns = function (index, column) {
            return column.field || index;
        };
        /* TrackBy END */
        /* ------------------------------------------------------------------------------------------------ */
        /* Selection feature START */
        AdaptTableComponent.prototype.getGroupSelectionState = function (grd) {
            var _this = this;
            if (this.getRowSelectionArray().length === 0) {
                return exports.CheckboxState.Unselected;
            }
            var childrenCount = 0;
            var selectedChildrenCount = 0;
            this.goRecursivelyByItemsInGroup(grd, function (item) {
                childrenCount++;
                if (_this.isRowSelected(item)) {
                    selectedChildrenCount++;
                }
            });
            if (childrenCount === 0 || selectedChildrenCount === 0) {
                return exports.CheckboxState.Unselected;
            }
            return childrenCount === selectedChildrenCount ? exports.CheckboxState.Selected : exports.CheckboxState.Indeterminate;
        };
        AdaptTableComponent.prototype.getRowSelectionArray = function () {
            var selection = this.selection;
            return selection ? (Array.isArray(selection) ? selection : [selection]) : [];
        };
        AdaptTableComponent.prototype.getRowSelectionKeys = function () {
            return this.selectionKeys || {};
        };
        AdaptTableComponent.prototype.getSelectableRowsItems = function (rows) {
            var _this = this;
            var result = [];
            this.goRecursivelyByItemsInGroups(rows, function (row) {
                if (!_this.isRowSelectionDisabled(row)) {
                    result.push(row);
                }
            });
            return result;
        };
        AdaptTableComponent.prototype.isSingleSelectionRowSelected = function (data) {
            var selection = this.getRowSelectionArray();
            return selection.length
                ? this.getPrimaryKey(selection[0]) === this.resolveFieldData(data, this.dataKey)
                : false;
        };
        AdaptTableComponent.prototype.isRowSelected = function (rowDataItem) {
            // const rowId = this.getPrimaryKey(rowDataItem);
            // return rowId == null ? false : this.getRowSelectionKeys()[rowId];
            if (typeof rowDataItem === 'object' && rowDataItem) {
                return this.isSelected(rowDataItem);
            }
            // row Id
            return this.getRowSelectionKeys()[rowDataItem];
        };
        AdaptTableComponent.prototype.isRowSelectionCheckboxDisabled = function (data) {
            var _this = this;
            return this.isRowSelectionDisabled(data)
                || (this.selectionLimit === (this.getRowSelectionArray().length)
                    && !Object.keys(this.selectionKeys).find(function (key) { return key === data[_this.dataKey]; }));
        };
        AdaptTableComponent.prototype.isRowSelectionDisabled = function (rowData) {
            if (lodashEs.isFunction(this.disabledRowSelectionResolver)) {
                return this.disableRowSelection || this.disabledRowSelectionResolver(rowData);
            }
            else {
                return this.disableRowSelection;
            }
        };
        AdaptTableComponent.prototype.isSelectedGroupCheckbox = function (grd) {
            return grd && !this.isRowSelectionDisabled(grd)
                && (this.getGroupSelectionState(grd) === exports.CheckboxState.Selected || this.getGroupSelectionState(grd) === exports.CheckboxState.Indeterminate);
        };
        AdaptTableComponent.prototype.isGroupSelectionIndeterminate = function (grd) {
            return this.getGroupSelectionState(grd) === exports.CheckboxState.Indeterminate;
        };
        AdaptTableComponent.prototype.onGroupSelectionChanged = function (checked, grd) {
            this.onToogleGroupedRowsSelection(checked, [grd]);
            this.groupSelection.emit({
                groupedRowData: grd,
                selected: checked,
            });
        };
        AdaptTableComponent.prototype.addToRowSelection = function (dataItems) {
            var _this = this;
            if (Array.isArray(dataItems) && dataItems.length === 0) {
                return;
            }
            if (this.isMultipleSelectionMode()) {
                var newSelection = this.getRowSelectionArray().slice();
                var dataItemsToAdd_1 = [];
                dataItems.forEach(function (di) {
                    if (!_this.isRowSelected(di)) {
                        dataItemsToAdd_1.push(di);
                    }
                });
                newSelection.push.apply(newSelection, __spreadArray([], __read(dataItemsToAdd_1)));
                this._updateRowSelection(newSelection);
            }
            else {
                this._updateRowSelection(dataItems);
            }
        };
        AdaptTableComponent.prototype.toggleRowSelection = function (dataItem, event) {
            var _this = this;
            if (event === void 0) { event = null; }
            if (this.isRowSelectionDisabled(dataItem)) {
                return false;
            }
            var dataItemToToggleKey = this.getPrimaryKey(dataItem);
            var oldSelection = this.getRowSelectionArray().slice();
            var newSelection = [];
            var addedToSelection = false;
            if (this.isMultipleSelectionMode()) {
                var hasRemovedDataItem_1 = false;
                oldSelection.forEach(function (di) {
                    if (_this.getPrimaryKey(di) === dataItemToToggleKey) {
                        hasRemovedDataItem_1 = true;
                    }
                    else {
                        newSelection.push(di);
                    }
                });
                addedToSelection = !hasRemovedDataItem_1;
                if (addedToSelection) {
                    newSelection.push(dataItem);
                }
            }
            else {
                var shouldRemoveDataItem = oldSelection.some(function (di) { return _this.getPrimaryKey(di) === dataItemToToggleKey; });
                addedToSelection = !shouldRemoveDataItem;
                if (addedToSelection) {
                    newSelection = [dataItem];
                }
            }
            this._updateRowSelection(newSelection);
            if (addedToSelection) {
                this.onRowSelect.emit({ originalEvent: event, index: null, data: dataItem, type: 'row' });
            }
            else {
                this.onRowUnselect.emit({ originalEvent: event, index: null, data: dataItem, type: 'row' });
            }
            return addedToSelection;
        };
        AdaptTableComponent.prototype.removeFromRowSelection = function (dataItems) {
            var _this = this;
            if (dataItems.length === 0) {
                return;
            }
            var oldSelection = this.getRowSelectionArray();
            var newSelection = [];
            oldSelection.forEach(function (di) {
                var e_3, _e;
                var selectedDiKey = _this.getPrimaryKey(di);
                try {
                    for (var dataItems_1 = __values(dataItems), dataItems_1_1 = dataItems_1.next(); !dataItems_1_1.done; dataItems_1_1 = dataItems_1.next()) {
                        var item = dataItems_1_1.value;
                        var tempDiKey = _this.getPrimaryKey(item);
                        if (selectedDiKey === tempDiKey) {
                            return;
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (dataItems_1_1 && !dataItems_1_1.done && (_e = dataItems_1.return)) _e.call(dataItems_1);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                newSelection.push(di);
            });
            this._updateRowSelection(newSelection);
        };
        // TODO: what if selected row is disabled for selection
        AdaptTableComponent.prototype.unselectAllSelected = function () {
            this._updateRowSelection([]);
        };
        AdaptTableComponent.prototype.onToogleGroupedRowsSelection = function (checked, rows) {
            var dataItemsToChangeSelection = this.getSelectableRowsItems(rows);
            if (checked) {
                this.addToRowSelection(dataItemsToChangeSelection);
            }
            else {
                this.removeFromRowSelection(dataItemsToChangeSelection);
            }
        };
        AdaptTableComponent.prototype.handleHeaderCheckboxToggle = function (event) {
            this.onHeaderCheckboxToggle.emit({
                originalEvent: event.originalEvent,
                checked: event.checked,
                eventSource: event.eventSource,
                filters: event.filters,
                globalFilter: event.globalFilter
            });
            this.allGroupedRowsSelection.emit({
                rowsData: this.getRowSelectionArray(),
                selected: event.checked,
            });
        };
        /* Selection feature END */
        /* ------------------------------------------------------------------------------------------------ */
        /* Row reordering START */
        AdaptTableComponent.prototype.onReordarableRowMouseDown = function (elem, isGroup) {
            if (!isGroup) {
                this.setColumnsWidth(elem);
            }
        };
        AdaptTableComponent.prototype.setColumnsWidth = function (row) {
            var _this = this;
            var theadElements = Array.from(this.el.nativeElement.querySelectorAll('tr th'));
            var currWidth = theadElements.map(function (elem) { return elem.offsetWidth; });
            var draggableRow = Array.from(row.cells);
            draggableRow.forEach(function (item, ind) {
                _this._renderer.setStyle(item, 'maxWidth', currWidth[ind] + "px");
                _this._renderer.setStyle(item, 'width', currWidth[ind] + "px");
                if (_this.bordered && item.classList.contains('at-data-cell')) {
                    if (_this.isRtl) {
                        _this._renderer.setStyle(item, 'borderLeft', '1px solid #d9dada');
                    }
                    else {
                        _this._renderer.setStyle(item, 'borderRight', '1px solid #d9dada');
                    }
                }
            });
        };
        AdaptTableComponent.prototype.setColumnsWidthToAuto = function (row) {
            var _this = this;
            var draggableRow = Array.from(row.cells);
            draggableRow.forEach(function (item) {
                _this._renderer.setStyle(item, 'maxWidth', 'auto');
                _this._renderer.setStyle(item, 'width', 'auto');
                if (_this.bordered && item.classList.contains('at-data-cell')) {
                    if (_this.isRtl) {
                        _this._renderer.removeStyle(item, 'borderLeft');
                    }
                    else {
                        _this._renderer.removeStyle(item, 'borderRight');
                    }
                }
            });
        };
        AdaptTableComponent.prototype.onCdkDropListSortedRow = function (event) {
            var currentRowData = event.item.data.rowData;
            var allCurrentRows = this.getAllCurrentRows();
            var indexOfRowData = allCurrentRows.findIndex(function (row) { return row === currentRowData; });
            i3.moveItemInArray(allCurrentRows, indexOfRowData, indexOfRowData + event.currentIndex - event.previousIndex);
        };
        AdaptTableComponent.prototype.onRowDragStarted = function (event) {
            this.rowDragStart.emit({ cdkDragStartEvent: event });
        };
        AdaptTableComponent.prototype.onRowDragDropped = function (event, elem) {
            this.rowDragDrop.emit({ cdkDragDropEvent: event });
            this.setColumnsWidthToAuto(elem);
        };
        AdaptTableComponent.prototype.onRowDragEnded = function (event) {
            this.rowDragEnd.emit({ cdkDragEndEvent: event });
        };
        AdaptTableComponent.prototype.onRowDragReleased = function (event) {
            this.rowDragRelease.emit({ cdkDragReleaseEvent: event });
        };
        /* Row reordering END */
        /* ------------------------------------------------------------------------------------------------ */
        /* Row editing START */
        AdaptTableComponent.prototype.getEditableClonedRow = function (dataItem) {
            return this.currentEditingRows[this.getPrimaryKey(dataItem)].editingDataItem;
        };
        AdaptTableComponent.prototype.isEditableColumn = function (column) {
            return i1.trueOrNull(column.editable);
        };
        AdaptTableComponent.prototype.initRowEditing = function (dataItem) {
            this.currentEditingRows[this.getPrimaryKey(dataItem)] = {
                originalDataItem: Object.assign({}, dataItem),
                editingDataItem: Object.assign({}, dataItem),
                dataItemReference: dataItem,
            };
            this.initRowEdit(dataItem);
        };
        AdaptTableComponent.prototype.saveRowEditing = function (dataItem) {
            var _this = this;
            var id = this.getPrimaryKey(dataItem);
            var currentEditingRow = this.currentEditingRows[id];
            if (!currentEditingRow) {
                return;
            }
            var trData = this.dataRows.find(function (dataRow) { return dataRow.data.editing &&
                _this.getPrimaryKey(dataRow.data.dataItem) === id; });
            this.saveRowEdit(dataItem, trData.element.nativeElement);
            // saveRowEdit not always remove editing
            if (this.isRowEditing(dataItem)) {
                return;
            }
            delete this.currentEditingRows[id];
            lodashEs.merge(dataItem, currentEditingRow.editingDataItem);
            this.savedRowEditing.emit({ editingRow: currentEditingRow });
        };
        AdaptTableComponent.prototype.cancelRowEditing = function (dataItem) {
            var id = this.getPrimaryKey(dataItem);
            var currentEditingRow = this.currentEditingRows[id];
            if (!currentEditingRow) {
                return;
            }
            delete this.currentEditingRows[id];
            this.cancelRowEdit(dataItem);
            this.canceledRowEditing.emit({ editingRow: currentEditingRow });
        };
        AdaptTableComponent.prototype.onTableCellDoubleClick = function (rowData) {
            if (this.enableRowEditing) {
                this.initRowEditing(rowData);
            }
        };
        AdaptTableComponent.prototype.onTextfieldKeydown = function (dataItem, event) {
            var _this = this;
            var enableEditingButtons = this.getVisibleColumns()
                .some(function (column) { return _this.getActionConfig(column) && _this.getActionConfig(column).enableRowEditingButtons; });
            if (!enableEditingButtons) {
                if (i1.hasKeyboardKeyCode(event, 'Enter', keycodes.ENTER)) {
                    this.saveRowEditing(dataItem);
                }
                else if (i1.hasKeyboardKeyCode(event, 'Escape', keycodes.ESCAPE)) {
                    this.cancelRowEditing(dataItem);
                }
            }
        };
        /* Row editing END */
        /* ------------------------------------------------------------------------------------------------ */
        /* Sorting START */
        AdaptTableComponent.prototype.getSortedDataRows = function () {
            var allRowsItems = this.getCurrentPageDisplayingRowsItems();
            var mapOfRows = new Map(allRowsItems.map(function (row, index) { return [row, index]; }));
            return this.dataRows.toArray().sort(function (dataRow1, dataRow2) {
                var index1 = mapOfRows.get(dataRow1.data.dataItem);
                var index2 = mapOfRows.get(dataRow2.data.dataItem);
                return index1 - index2;
            });
        };
        AdaptTableComponent.prototype.getColumnSortOrder = function (field) {
            if (this.sortMode === 'single') {
                return this.sortOrder;
            }
            var sortData = this.getSortMeta(field);
            return sortData ? sortData.order : null;
        };
        AdaptTableComponent.prototype.isColumnSortOrderAsc = function (field) {
            return this.getColumnSortOrder(field) === exports.SortOrder.Asc;
        };
        AdaptTableComponent.prototype.isSortableColumn = function (column) {
            if (!this.sortable || column.actionsConfig) {
                return false;
            }
            var sortableCol = column.sortable;
            return i1.trueOrNull(sortableCol);
        };
        AdaptTableComponent.prototype.isSortableRenderingColumn = function (renderingColumn) {
            var _this = this;
            return renderingColumn.columnsConfigs.some(function (column) { return _this.isSortableColumn(column); });
        };
        AdaptTableComponent.prototype.updateMultiSortMeta = function (multiSortMeta) {
            this.multiSortMeta = multiSortMeta;
            this._multiSortMeta = multiSortMeta;
            if (multiSortMeta === null) {
                if (this.lazy) {
                    this._emitLazyLoadEvent(this.createLazyLoadMetadata(exports.AdaptTableEventSource.MultipleSortChange));
                }
                this._emitOnSortForMultiSorting();
            }
            else {
                this.sortMultiple();
            }
        };
        AdaptTableComponent.prototype.onTableRefresh = function () {
            if (this.lazy) {
                this._emitLazyLoadEvent(this.createLazyLoadMetadata(exports.AdaptTableEventSource.Refresh));
            }
        };
        AdaptTableComponent.prototype.setQuickFilter = function (value) {
            this.filterGlobal(value, this.toolbarConfig.quickFilterMatchMode || 'contains');
        };
        /* Sorting END */
        /* ------------------------------------------------------------------------------------------------ */
        AdaptTableComponent.prototype._emitLazyLoadEvent = function (lazyLoadEvent) {
            this.onLazyLoad.emit(lazyLoadEvent);
        };
        AdaptTableComponent.prototype._emitOnSortForMultiSorting = function () {
            this.onSort.emit({
                multisortmeta: this.multiSortMeta
            });
            this.getTableService().onSort(this.multiSortMeta);
        };
        AdaptTableComponent.prototype._getColumnByField = function (columns, field) {
            return columns.find(function (column) { return column.field === field; });
        };
        AdaptTableComponent.prototype._autoScrollTopOnValueSourceChangeForNotLazy = function () {
            var _this = this;
            this.getTableService().valueSource$.pipe(operators.takeUntil(this._destroyed$)).subscribe(function () {
                if (!_this.lazy && _this.autoScrollToTop) {
                    _this.tryScrollToTopTableBody();
                }
            });
        };
        AdaptTableComponent.prototype._setHostClassHasNotScroll = function () {
            var hostEl = this.el.nativeElement;
            if (!hostEl.classList.contains(exports.AdaptTableClasses.HasNotVerticalBodyOverflow)) {
                hostEl.classList.add(exports.AdaptTableClasses.HasNotVerticalBodyOverflow);
            }
        };
        AdaptTableComponent.prototype._updateRowSelection = function (selection) {
            var _this = this;
            if (this.isSingleSelectionMode()) {
                if (Array.isArray(selection)) {
                    selection = selection.length ? selection[0] : null;
                }
            }
            else {
                // filter disabled items
                // TODO: maybe disallow rows deselecting and add to 'selection' var already selected and disabled rows
                selection = selection.filter(function (row) {
                    var alreadyRowSelected = _this.isRowSelected(row);
                    return !_this.isRowSelectionCheckboxDisabled(row) || alreadyRowSelected;
                });
                // check selection limit
                if (this.hasSelectionLimit && selection.length > this.selectionLimit) {
                    selection = selection.slice(0, this.selectionLimit);
                }
            }
            this._selection = this._selection = selection;
            this.updateSelectionKeys();
            this.selectionChange.emit(selection);
            this.getTableService().onSelectionChange(this._selection);
        };
        AdaptTableComponent.prototype._onTableMouseMoveDebounced = function (e) {
            if (this.suppressTooltip) {
                return;
            }
            var target = e.target;
            // While columns merged, there are 2 block with data where need to use tooltip. Added new class "at-tooltip-el" for that task.
            // TODO: Better to use element reference instead query by class name
            var cellTarget = target.closest('.at-tooltip-el');
            var isSameCell = this._lastTooltipTargetCell === cellTarget;
            if (cellTarget) {
                // Tooltip for data cell
                this._lastTooltipTargetCell = cellTarget;
                var tooltipValue = this._getCellTooltipData(cellTarget);
                if (tooltipValue && !isSameCell) {
                    this._showTooltip(cellTarget, tooltipValue);
                    return;
                }
            }
            else {
                // Tooltip for header cell
                // TODO: Better to use element reference instead query by class name
                var headerDataCellContainerEl = target.closest("." + exports.AdaptTableClasses.HeaderContainer);
                // TODO: Better to use element reference instead query by class name
                var headerDataCellTarget = target.closest("." + exports.AdaptTableClasses.HeaderDataCell + " ");
                if (headerDataCellContainerEl && headerDataCellTarget) {
                    // TODO: Better to use element reference instead query by class name
                    var headerDataCellNameEl = headerDataCellContainerEl.querySelector("." + exports.AdaptTableClasses.HeaderTitle);
                    this._lastTooltipTargetCell = headerDataCellTarget;
                    var tooltipValue = this._getHeaderDataCellTooltipData(headerDataCellTarget, headerDataCellNameEl);
                    if (tooltipValue) {
                        this._showTooltip(headerDataCellTarget, tooltipValue);
                        return;
                    }
                }
            }
            this._lastTooltipTargetCell = null;
            this._hideTooltip();
        };
        AdaptTableComponent.prototype._getCellTooltipData = function (cellTarget) {
            var mergedColumnField = cellTarget.getAttribute('data-merged-column-field');
            var tableCell = cellTarget.closest('td');
            var cellData = this.dataCells.find(function (dc) { return dc.element.nativeElement === tableCell; });
            if (!cellData) {
                return null;
            }
            var column = mergedColumnField ?
                this._getColumnByField(cellData.data.renderingColumn.columnsConfigs, mergedColumnField) : cellData.data.column;
            var tooltipValue = i1.getValueOrFunc(column.cellTooltip, cellData.data);
            if (tooltipValue) {
                return tooltipValue;
            }
            if (tooltipValue === false) {
                return null;
            }
            if (!HtmlUtils.hasShrunkText(cellTarget) && !this.alwaysShowCellTooltip) {
                return null;
            }
            return cellTarget.innerText || this.getColumnData(cellData.data.dataItem, column) || null;
        };
        AdaptTableComponent.prototype._getHeaderDataCellTooltipData = function (headerDataCellEl, headerDataCellNameEl) {
            var dataHeaderCellData = this.dataHeaderCells.find(function (dc) { return dc.element.nativeElement === headerDataCellEl; });
            if (!dataHeaderCellData) {
                return null;
            }
            var column = dataHeaderCellData.data.column;
            var tooltipValue = i1.getValueOrFunc(column.headerTooltip);
            if (tooltipValue) {
                return tooltipValue;
            }
            if (tooltipValue === false) {
                return null;
            }
            if (!headerDataCellNameEl || !HtmlUtils.hasShrunkText(headerDataCellNameEl) && !this.alwaysShowHeaderTooltip) {
                return null;
            }
            return headerDataCellNameEl.innerText || column.header || null;
        };
        AdaptTableComponent.prototype._showTooltip = function (target, content) {
            var _this = this;
            this.zone.run(function () {
                if (_this.tooltipInitialDelayMs && !_this._showedTooltipAfterGridMouseLeave) {
                    _this._showInstantiatedTooltipDelayed(target, content);
                }
                else {
                    _this._showInstantiatedTooltip(target, content);
                }
            });
        };
        AdaptTableComponent.prototype._showInstantiatedTooltip = function (target, content) {
            var _a;
            // Don't show tooltip if moved mouse out of grid
            if (!this._lastTooltipTargetCell ||
                // if mouse leave viewport
                (this._lastGridMouseEvent.type === 'mouseleave' && !this._lastGridMouseEvent.relatedTarget) ||
                // if mouse leave current cell with tooltip or grid
                (this._lastGridMouseEvent.relatedTarget &&
                    !this._lastTooltipTargetCell.contains(this._lastGridMouseEvent.relatedTarget))) {
                this._lastTooltipTargetCell = null;
                return;
            }
            // Don't show tooltip if body doesn't contain target
            if (!document.body.contains(target)) {
                return;
            }
            (_a = this._tooltipOverlayWithPortal) === null || _a === void 0 ? void 0 : _a.destroy();
            this._tooltipOverlayWithPortal = this._overlayService.openOverlayWithPortal(new portal.ComponentPortal(i1.AdaptTooltipComponent, null, this._injector), {
                origin: target,
                positionStrategy: 'connected',
                scrollStrategy: 'close',
                connectedPositions: [
                    this._tooltipOverlayPlacements.top,
                    this._tooltipOverlayPlacements.bottom,
                    this._tooltipOverlayPlacements.left,
                    this._tooltipOverlayPlacements.right
                ]
            });
            this._showedTooltipAfterGridMouseLeave = true;
            this._tooltipOverlayWithPortal.componentRef.instance.placement = 'auto';
            this._tooltipOverlayWithPortal.componentRef.instance.content = content;
            this._tooltipOverlayWithPortal.componentRef.instance.visible = true;
            this._tooltipOverlayWithPortal.componentRef.instance.customCls = this.tooltipClass;
            this._tooltipOverlayWithPortal.overlayRef.updatePosition();
            this.detectChangesForTooltip();
        };
        AdaptTableComponent.prototype._hideTooltip = function () {
            var _a;
            (_a = this._tooltipOverlayWithPortal) === null || _a === void 0 ? void 0 : _a.destroy();
            this._tooltipOverlayWithPortal = null;
        };
        AdaptTableComponent.prototype._onTableMouseLeave = function (event) {
            this._lastGridMouseEvent = event;
            this._showedTooltipAfterGridMouseLeave = false;
            this._hideTooltip();
        };
        AdaptTableComponent.prototype._onTableMouseMove = function (e) {
            this._lastGridMouseEvent = e;
            var target = e.target;
            // Hide tooltip after moving mouse to another cell
            if (this._lastTooltipTargetCell && !this._lastTooltipTargetCell.contains(target)) {
                this._hideTooltip();
            }
        };
        AdaptTableComponent.prototype._getCurrentFocusedCellData = function () {
            var activeElement = document.activeElement;
            return this._getCellData(activeElement);
        };
        AdaptTableComponent.prototype._getCellData = function (targetElement) {
            if (!targetElement || !targetElement.matches('td')) {
                return null;
            }
            return this.dataCells.find(function (dataCell) { return dataCell.element.nativeElement === targetElement; });
        };
        AdaptTableComponent.prototype._enableKeyboardNavigation = function () {
            var _this = this;
            this.zone.runOutsideAngular(function () {
                rxjs.fromEvent(_this.el.nativeElement, 'keydown').pipe(operators.takeUntil(_this._destroyed$))
                    .subscribe(function (e) { return _this._onTableKeydown(e); });
            });
        };
        AdaptTableComponent.prototype._onTableKeydown = function (event) {
            if (i1.hasKeyboardKeyCode(event, 'ArrowDown', keycodes.DOWN_ARROW, 'Down')) {
                this._focusOnCellByNavigation(event, 1, 0);
                return;
            }
            if (i1.hasKeyboardKeyCode(event, 'ArrowUp', keycodes.UP_ARROW, 'Up')) {
                this._focusOnCellByNavigation(event, -1, 0);
                return;
            }
            if (i1.hasKeyboardKeyCode(event, 'ArrowLeft', keycodes.LEFT_ARROW, 'Left')) {
                this._focusOnCellByNavigation(event, 0, -1);
                return;
            }
            if (i1.hasKeyboardKeyCode(event, 'ArrowRight', keycodes.RIGHT_ARROW, 'Right')) {
                this._focusOnCellByNavigation(event, 0, 1);
                return;
            }
            if (i1.hasKeyboardKeyCode(event, ' ', keycodes.SPACE, 'Spacebar')) {
                this._toggleRowSelectionOfFocusedCell(event);
                return;
            }
            if (i1.hasKeyboardKeyCode(event, 'Enter', keycodes.ENTER)) {
                this._initRowEditingOfFocusedCell();
            }
        };
        AdaptTableComponent.prototype._onTableClick = function (event) {
            if (!this.enableRowEditing) {
                return;
            }
            var target = event.target;
            var clickedCell = target.closest('td.at-data-cell');
            var clickedCellData = this._getCellData(clickedCell);
            if (clickedCellData && this.isRowEditing(clickedCellData.data.dataItem)) {
                return;
            }
            this._saveAllEditingRows();
        };
        AdaptTableComponent.prototype._initRowEditingOfFocusedCell = function () {
            var currentFocusedCellData;
            if (!this.enableRowEditing || !(currentFocusedCellData = this._getCurrentFocusedCellData())) {
                return;
            }
            if (this.isRowEditing(currentFocusedCellData.data.dataItem)) {
                this.saveRowEditing(currentFocusedCellData.data.dataItem);
            }
            else {
                this._saveAllEditingRows();
                this.initRowEditing(currentFocusedCellData.data.dataItem);
            }
        };
        AdaptTableComponent.prototype._saveAllEditingRows = function () {
            for (var key in this.currentEditingRows) {
                if (Object.prototype.hasOwnProperty.call(this.currentEditingRows, key)) {
                    this.saveRowEditing(this.currentEditingRows[key].dataItemReference);
                }
            }
        };
        AdaptTableComponent.prototype._toggleRowSelectionOfFocusedCell = function (event) {
            var currentFocusedCellData = this._getCurrentFocusedCellData();
            if (currentFocusedCellData) {
                event.preventDefault();
            }
            else {
                return;
            }
            if (!this.hasSelection) {
                return;
            }
            var addedToSelection = this.toggleRowSelection(currentFocusedCellData.data.dataItem, event);
            if (addedToSelection) {
                this.lastSelectedRowId = this.getPrimaryKey(currentFocusedCellData.data.dataItem);
            }
        };
        AdaptTableComponent.prototype._focusOnCellByNavigation = function (event, rowNavigate, cellNavigate) {
            var currentFocusedCellData = this._getCurrentFocusedCellData();
            if (!currentFocusedCellData) {
                return;
            }
            var rowElemOfFocusedCell = currentFocusedCellData.element.nativeElement.closest('tr');
            if (!rowElemOfFocusedCell) {
                return;
            }
            var dataRows = this.getSortedDataRows();
            var dataRowIndex = dataRows.findIndex(function (dr) { return dr.element.nativeElement === rowElemOfFocusedCell; });
            var nextDataRowForFocus = dataRows[dataRowIndex + rowNavigate];
            if (dataRowIndex !== -1 && nextDataRowForFocus) {
                var indexOfFocusedCellInRow = Array.prototype.findIndex.call(rowElemOfFocusedCell.children, function (td) { return td === currentFocusedCellData.element.nativeElement; });
                var rowChildren = nextDataRowForFocus.element.nativeElement.children;
                indexOfFocusedCellInRow += cellNavigate;
                indexOfFocusedCellInRow = indexOfFocusedCellInRow < rowChildren.length ?
                    indexOfFocusedCellInRow : rowChildren.length - 1;
                if (indexOfFocusedCellInRow === -1) {
                    indexOfFocusedCellInRow = 0;
                }
                if (rowChildren.length > 0) {
                    rowChildren[indexOfFocusedCellInRow].focus();
                    event.preventDefault();
                }
            }
        };
        AdaptTableComponent.prototype._hasCellFocus = function (element) {
            return document.activeElement === element;
        };
        AdaptTableComponent.prototype._getBusyConfig = function () {
            return {
                busy: null,
                backdrop: true,
                sticky: true,
                message: '',
                loaderType: 'section',
            };
        };
        AdaptTableComponent.prototype._hasAllChildItemsDisabledForSelection = function (grd) {
            var enabledItems = this.getSelectableRowsItems([grd]);
            return !enabledItems.length;
        };
        // For the "action" columns set default with if it has not been passed.
        // The width calculated by the finding max width from all action columns
        AdaptTableComponent.prototype._recalculateActionColWidth = function () {
            var _this = this;
            var _a, _b;
            if (((_a = this.actionColElements) === null || _a === void 0 ? void 0 : _a.length) && lodashEs.isNil((_b = this.columns.find(function (col) { return col.actionsConfig; })) === null || _b === void 0 ? void 0 : _b.width)) {
                this.zone.onStable.asObservable()
                    .pipe(operators.debounceTime(100), operators.take(1), operators.takeUntil(this._destroyed$))
                    .subscribe(function () {
                    _this.zone.runOutsideAngular(function () {
                        _this.setDefaultActionColWidth();
                    });
                });
            }
        };
        return AdaptTableComponent;
    }(Table));
    AdaptTableComponent.LAST_TABLE_INSTANCE_ID = 0;
    AdaptTableComponent.ɵfac = function AdaptTableComponent_Factory(t) { return new (t || AdaptTableComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef), i0__namespace.ɵɵdirectiveInject(i0__namespace.NgZone), i0__namespace.ɵɵdirectiveInject(TableService), i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef), i0__namespace.ɵɵdirectiveInject(i2__namespace.FilterService), i0__namespace.ɵɵdirectiveInject(i3__namespace.Directionality), i0__namespace.ɵɵdirectiveInject(i0__namespace.Renderer2), i0__namespace.ɵɵdirectiveInject(i1__namespace.AdaptDeviceDetectionService), i0__namespace.ɵɵdirectiveInject(i1__namespace.AdaptTranslateService), i0__namespace.ɵɵdirectiveInject(AdaptTableDeprecationMiddleware), i0__namespace.ɵɵdirectiveInject(i1__namespace.AdaptOverlayService), i0__namespace.ɵɵdirectiveInject(i0__namespace.Injector)); };
    AdaptTableComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: AdaptTableComponent, selectors: [["adapt-table"]], viewQuery: function AdaptTableComponent_Query(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵviewQuery(_c0$c, 5);
                i0__namespace.ɵɵviewQuery(_c1$8, 5);
                i0__namespace.ɵɵviewQuery(_c2$6, 7, i0.ViewContainerRef);
                i0__namespace.ɵɵviewQuery(_c3$3, 7, i0.ViewContainerRef);
                i0__namespace.ɵɵviewQuery(_c4$2, 7);
                i0__namespace.ɵɵviewQuery(_c5$2, 7);
                i0__namespace.ɵɵviewQuery(_c6$2, 5);
                i0__namespace.ɵɵviewQuery(_c7$2, 5);
                i0__namespace.ɵɵviewQuery(_c8$2, 7);
                i0__namespace.ɵɵviewQuery(_c9$2, 7);
                i0__namespace.ɵɵviewQuery(_c10$2, 7);
                i0__namespace.ɵɵviewQuery(_c11$2, 7);
                i0__namespace.ɵɵviewQuery(_c12$1, 7);
                i0__namespace.ɵɵviewQuery(_c13, 5, AdaptDataDirective);
                i0__namespace.ɵɵviewQuery(_c14, 5, AdaptDataDirective);
                i0__namespace.ɵɵviewQuery(_c15, 5, AdaptDataDirective);
                i0__namespace.ɵɵviewQuery(_c16, 5, i0.ElementRef);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.emptyStateTdEl = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.toolbarComponent = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.tooltipViewContainerRef = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.infiniteScrollingLoaderContainerEl = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.tableContainer = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.tableInnerContainer = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.tableHeader = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.nonScrollableTable = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.tableBodyTemplateRef = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.tableHeaderTemplateRef = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.tableColgroupTemplateRef = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.tableEmptyMessageTemplateRef = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.rowExpansionTemplate = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.dataRows = _t);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.dataCells = _t);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.dataHeaderCells = _t);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.actionColElements = _t);
            }
        }, hostVars: 18, hostBindings: function AdaptTableComponent_HostBindings(rf, ctx) {
            if (rf & 2) {
                i0__namespace.ɵɵclassProp("adapt-grid-bordered", ctx.bordered)("adapt-table-pageable", ctx.paginator)("adapt-table--striped", ctx.striped)("adapt-grid", ctx.mainClass)("adapt-table", ctx.adaptTableClass)("adapt-table-scrollable", ctx.scrollableClass)("adapt-table-not-scrollable", ctx.notScrollableClass)("adapt-table--empty-state", ctx.isEmptyState)("adapt-grid--loading", ctx.loading);
            }
        }, inputs: { sortable: "sortable", filterable: "filterable", triggerableFilters: "triggerableFilters", explicitSearchBtn: "explicitSearchBtn", enableReorderableRows: "enableReorderableRows", suppressTooltip: "suppressTooltip", toolbarConfig: "toolbarConfig", dataColumnsColsTemplate: "dataColumnsColsTemplate", dataColumnsHeaderTemplate: "dataColumnsHeaderTemplate", dataColumnsDataCellsTemplate: "dataColumnsDataCellsTemplate", headerGroupsTemplate: "headerGroupsTemplate", alwaysShowHeaderTooltip: "alwaysShowHeaderTooltip", alwaysShowCellTooltip: "alwaysShowCellTooltip", expandedCellClass: "expandedCellClass", expandedGroupsKeys: "expandedGroupsKeys", nestedGroupPadding: "nestedGroupPadding", expandindCellInitialPadding: "expandindCellInitialPadding", groupValueDataCellTemplate: "groupValueDataCellTemplate", tooltipInitialDelayMs: "tooltipInitialDelayMs", tooltipClass: "tooltipClass", rowsCustomClass: "rowsCustomClass", paginatorAlign: "paginatorAlign", hasEmptyState: "hasEmptyState", enableInfiniteScrolling: "enableInfiniteScrolling", updateFirstColumnWidth: "updateFirstColumnWidth", busyConfig: "busyConfig", defaultFiltersMatchMode: "defaultFiltersMatchMode", wrapCellText: "wrapCellText", minBufferPx: "minBufferPx", maxBufferPx: "maxBufferPx", testID: "testID", headerSelectionMode: "headerSelectionMode", disabledSelectedRowsCount: "disabledSelectedRowsCount", disabledNotSelectedRowsCount: "disabledNotSelectedRowsCount", disabledSelectedFilteredRowsCount: "disabledSelectedFilteredRowsCount", disabledNotSelectedFilteredRowsCount: "disabledNotSelectedFilteredRowsCount", selectedFilteredRowsCount: "selectedFilteredRowsCount", totalRecordsInGroup: "totalRecordsInGroup", disableRowSelection: "disableRowSelection", nestingStructureData: "nestingStructureData", nestingKey: "nestingKey", enableRowEditing: "enableRowEditing", autoScrollToTop: "autoScrollToTop", paginationTexts: "paginationTexts", toolbarTexts: "toolbarTexts", tableTexts: "tableTexts", filtersTexts: "filtersTexts", headerCellMenuTexts: "headerCellMenuTexts", texts: "texts", loadingMore: "loadingMore", mergeColumns: "mergeColumns", disabledRowSelectionResolver: "disabledRowSelectionResolver", allowColumnReorderingResolver: "allowColumnReorderingResolver", disableRowExpandingResolver: "disableRowExpandingResolver", rowAriaDataResolver: "rowAriaDataResolver", tableWidthConfig: "tableWidthConfig", expandedRowTemplate: "expandedRowTemplate", isRefreshingRowData: "isRefreshingRowData", value: "value", bordered: "bordered", paginator: "paginator", striped: "striped", loading: "loading" }, outputs: { onLazyLoad: "onLazyLoad", rowDataRefresh: "rowDataRefresh", savedRowEditing: "savedRowEditing", canceledRowEditing: "canceledRowEditing", groupSelection: "groupSelection", allGroupedRowsSelection: "allGroupedRowsSelection", groupExpansion: "groupExpansion", columnsVisibilityChange: "columnsVisibilityChange", rowDragStart: "rowDragStart", rowDragRelease: "rowDragRelease", rowDragEnd: "rowDragEnd", rowDragDrop: "rowDragDrop", export: "export", toolbarPopupAnimationDone: "toolbarPopupAnimationDone" }, features: [i0__namespace.ɵɵProvidersFeature([TableService]), i0__namespace.ɵɵInheritDefinitionFeature, i0__namespace.ɵɵNgOnChangesFeature], decls: 88, vars: 39, consts: [[3, "ngClass"], ["cdkDropList", "", 1, "at-table-primeng-component", 3, "ngClass", "cdkDropListData", "cdkDropListDisabled", "cdkDropListSorted"], [3, "ngStyle", "ngClass"], ["container", ""], ["class", "ui-table-loading ui-widget-overlay", 4, "ngIf"], ["class", "ui-table-loading-content", 4, "ngIf"], [3, "config", "texts", 4, "ngIf"], [1, "ui-table-container", 3, "ngClass"], ["tableContainer", ""], [1, "h-100", 3, "ngStyle"], ["tableInnerContainer", ""], ["class", "ui-table-wrapper", 4, "ngIf"], ["class", "ui-table-scrollable-wrapper", 3, "adaptResize", "elementResize", 4, "ngIf"], ["class", "ui-table-container-loader", 3, "ngStyle", 4, "ngIf"], [3, "rows", "first", "totalRecords", "pageLinkSize", "alwaysShow", "rowsPerPageOptions", "dropdownAppendTo", "currentPageReportTemplate", "showCurrentPageReport", "texts", "paginatorAlign", "ngClass", "onPageChange", 4, "ngIf"], ["class", "ui-column-resizer-helper ui-state-highlight", "style", "display:none;", 4, "ngIf"], ["class", "pi pi-arrow-down ui-table-reorder-indicator-up", "style", "display:none;", 4, "ngIf"], ["class", "pi pi-arrow-up ui-table-reorder-indicator-down", "style", "display:none;", 4, "ngIf"], ["class", "full-loading-wrap", 3, "ngBusy", "adaptRadarDisableEventSending", 4, "ngIf"], ["tooltipContainerEl", ""], ["infiniteScrollingLoaderContainerEl", ""], ["tableColgroupTemplateRef", ""], ["tableHeaderTemplateRef", ""], ["headerMultipleSelectionTemplate", ""], ["headerControlsTemplate", ""], ["tableBodyTemplateRef", ""], ["rowExpansionTemplate", ""], ["tableEmptyMessageTemplateRef", ""], ["groupValueDataCellDefTemplate", ""], ["dataCellDefTemplate", ""], ["editDataCellDefTemplate", ""], ["dataCellTemplate", ""], [1, "ui-table-loading", "ui-widget-overlay"], [1, "ui-table-loading-content"], [3, "config", "texts"], ["toolbarComponent", ""], [1, "ui-table-wrapper"], ["role", "grid", 3, "ngClass", "ngStyle"], ["table", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "ui-table-thead"], ["tableHeader", ""], [1, "ui-table-tbody", 3, "pTableBody", "pTableBodyTemplate"], ["class", "ui-table-tfoot", 4, "ngIf"], [1, "ui-table-tfoot"], [1, "ui-table-scrollable-wrapper", 3, "adaptResize", "elementResize"], ["class", "ui-table-scrollable-view ui-table-frozen-view", 3, "pScrollableView", "frozen", "ngStyle", "scrollHeight", 4, "ngIf"], [1, "ui-table-scrollable-view", "w-100", 3, "pScrollableView", "frozen", "scrollHeight", "ngStyle"], [1, "ui-table-scrollable-view", "ui-table-frozen-view", 3, "pScrollableView", "frozen", "ngStyle", "scrollHeight"], [1, "ui-table-container-loader", 3, "ngStyle"], [3, "rows", "first", "totalRecords", "pageLinkSize", "alwaysShow", "rowsPerPageOptions", "dropdownAppendTo", "currentPageReportTemplate", "showCurrentPageReport", "texts", "paginatorAlign", "ngClass", "onPageChange"], [1, "ui-column-resizer-helper", "ui-state-highlight", 2, "display", "none"], ["resizeHelper", ""], [1, "pi", "pi-arrow-down", "ui-table-reorder-indicator-up", 2, "display", "none"], ["reorderIndicatorUp", ""], [1, "pi", "pi-arrow-up", "ui-table-reorder-indicator-down", 2, "display", "none"], ["reorderIndicatorDown", ""], [1, "full-loading-wrap", 3, "ngBusy", "adaptRadarDisableEventSending"], ["class", "at-reordarable-cell", 4, "ngIf"], ["class", "at-radiobutton-cell", 4, "ngIf"], ["class", "at-expansion-cell", 4, "ngIf"], ["class", "adapt-selection-cell", 4, "ngIf"], [3, "ngIf", "ngIfElse"], ["dataColumnsColsDefTemplate", ""], [1, "at-reordarable-cell"], [1, "at-radiobutton-cell"], [1, "at-expansion-cell"], [1, "adapt-selection-cell"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "at-col", 3, "ngStyle", 4, "ngIf"], ["class", "at-col at-action-col", 3, "ngStyle", 4, "ngIf"], [1, "at-col", 3, "ngStyle"], ["colEl", ""], [1, "at-col", "at-action-col", 3, "ngStyle"], ["actionColElement", ""], [3, "ngIf"], [1, "at-header-row"], ["dataColumnsHeaderDefTemplate", ""], [3, "ngTemplateOutlet"], ["pResizableColumn", "", "pReorderableColumn", "", 3, "pResizableColumnDisabled", "pReorderableColumnDisabled", "class", "adaptFrozen", "adaptData", "ngClass", "columnResized", 4, "ngIf"], ["pResizableColumn", "", "pReorderableColumn", "", 3, "pResizableColumnDisabled", "pReorderableColumnDisabled", "class", "adaptData", "ngClass", "columnResized", 4, "ngIf"], ["pResizableColumn", "", "pReorderableColumn", "", 3, "pResizableColumnDisabled", "pReorderableColumnDisabled", "adaptFrozen", "adaptData", "ngClass", "columnResized"], ["dataHeaderCell", ""], [3, "renderingColumn", "index", "texts"], ["pResizableColumn", "", "pReorderableColumn", "", 3, "pResizableColumnDisabled", "pReorderableColumnDisabled", "adaptData", "ngClass", "columnResized"], [3, "texts", "headerCheckboxToggle", 4, "ngIf"], ["type", "button", "class", "at-group-selection-unselect-all d-icon-cross_adapt btn", 3, "placement", "adaptRadarDisableEventSending", "adaptTooltip", "click", 4, "ngIf"], [3, "texts", "headerCheckboxToggle"], ["type", "button", 1, "at-group-selection-unselect-all", "d-icon-cross_adapt", "btn", 3, "placement", "adaptRadarDisableEventSending", "adaptTooltip", "click"], ["class", "at-header-cell at-reordarable-cell", 3, "adaptFrozen", 4, "ngIf"], ["class", "at-header-cell at-radiobutton-cell", 3, "adaptFrozen", 4, "ngIf"], ["class", "at-header-cell at-expansion-cell", 3, "adaptFrozen", 4, "ngIf"], ["class", "at-header-cell adapt-selection-cell", 3, "adaptFrozen", "ngClass", 4, "ngIf"], [1, "at-header-cell", "at-reordarable-cell", 3, "adaptFrozen"], [1, "at-header-cell", "at-radiobutton-cell", 3, "adaptFrozen"], [1, "at-header-cell", "at-expansion-cell", 3, "adaptFrozen"], [1, "at-header-cell", "adapt-selection-cell", 3, "adaptFrozen", "ngClass"], [4, "ngTemplateOutlet"], ["cdkDrag", "", "cdkDragLockAxis", "y", "class", "at-row at-group-row", 3, "cdkDragData", "ngClass", "cdkDragStarted", "cdkDragDropped", "cdkDragEnded", "cdkDragReleased", 4, "ngIf", "ngIfElse"], ["dataRowTemplate", ""], ["cdkDrag", "", "cdkDragLockAxis", "y", 1, "at-row", "at-group-row", 3, "cdkDragData", "ngClass", "cdkDragStarted", "cdkDragDropped", "cdkDragEnded", "cdkDragReleased"], ["groupRow", ""], ["cdkDragHandle", "", "class", "at-cell at-reordarable-cell p-start-3", 3, "mousedown", 4, "ngIf"], ["class", "at-cell at-radiobutton-cell", 4, "ngIf"], [1, "at-expansion-cell", "at-cell", 3, "ngStyle"], ["expansionCell", ""], ["type", "button", "role", "button", 1, "expansion-btn", 3, "click"], ["aria-hidden", "true", "xmlns", "http://www.w3.org/2000/svg", "width", "6", "height", "10", "viewBox", "0 0 7 11", "fill", "currentColor", 1, "at-expansion-icon", "d-icon-p", 3, "ngClass"], ["d", "M1.9,0L0.6,1.2l4.2,4.3L0.6,9.8L1.9,11l5.5-5.5L1.9,0z"], [1, "sr-only"], ["class", "adapt-selection-cell at-cell", 3, "ngStyle", 4, "ngIf"], [1, "at-cell", 3, "ngStyle"], ["cdkDragHandle", "", 1, "at-cell", "at-reordarable-cell", "p-start-3", 3, "mousedown"], ["class", "d-icon-dots adapt-list-drag", 4, "ngIf"], [1, "d-icon-dots", "adapt-list-drag"], [1, "at-cell", "at-radiobutton-cell"], [1, "adapt-selection-cell", "at-cell", 3, "ngStyle"], [1, "checkbox-inline", "at-group-selection-checkbox", 3, "ngModel", "adaptRadarDisableEventSending", "indeterminate", "disabled", "ariaLabel", "ngModelChange"], ["cdkDrag", "", "cdkDragLockAxis", "y", 1, "at-row", "at-data-row", 3, "pEditableRow", "adaptData", "ngClass", "cdkDragData", "cdkDragStarted", "cdkDragDropped", "cdkDragEnded", "cdkDragReleased"], ["dataRow", ""], ["cdkDragHandle", "", "class", "at-cell at-reordarable-cell p-start-3", 3, "adaptFrozen", "mousedown", 4, "ngIf"], ["class", "at-cell at-radiobutton-cell", 3, "adaptFrozen", 4, "ngIf"], ["class", "at-expansion-cell at-cell", 3, "ngStyle", "ngClass", "adaptFrozen", 4, "ngIf"], ["class", "adapt-selection-cell at-cell", 3, "ngStyle", "adaptFrozen", 4, "ngIf"], ["dataColumnsDataCellsDefTemplate", ""], [4, "ngIf"], ["cdkDragHandle", "", 1, "at-cell", "at-reordarable-cell", "p-start-3", 3, "adaptFrozen", "mousedown"], [1, "at-cell", "at-radiobutton-cell", 3, "adaptFrozen"], [1, "at-radiobutton", 3, "name", "adaptRadarDisableEventSending", "value", "checked", "label", "ariaLabel", "disabled", "click"], [1, "at-expansion-cell", "at-cell", 3, "ngStyle", "ngClass", "adaptFrozen"], ["type", "button", "class", "expansion-btn", 3, "pRowToggler", 4, "ngIf"], ["type", "button", 1, "expansion-btn", 3, "pRowToggler"], ["d", "M1.9,0L0.6,1.2l4.2,4.3L0.6,9.8L1.9,11l5.5-5.5L1.9,0z", 1, "ui-clickable"], [1, "adapt-selection-cell", "at-cell", 3, "ngStyle", "adaptFrozen"], [1, "at-selection-checkbox", 3, "renderRowData", "value", "rowAriaDataResolver", "disabled"], ["class", "at-data-cell at-cell at-data-cell--simple at-tooltip-el", 3, "ngStyle", "adaptFrozen", "adaptData", "ngClass", "tabindex", "dblclick", 4, "ngIf"], ["class", "at-cell at-data-cell ad-data-cell--merged", 3, "ngStyle", "adaptData", "ngClass", "tabindex", "dblclick", 4, "ngIf"], [1, "at-data-cell", "at-cell", "at-data-cell--simple", "at-tooltip-el", 3, "ngStyle", "adaptFrozen", "adaptData", "ngClass", "tabindex", "dblclick"], ["dataCell", ""], [1, "at-cell", "at-data-cell", "ad-data-cell--merged", 3, "ngStyle", "adaptData", "ngClass", "tabindex", "dblclick"], ["class", "at-tooltip-el at-merged-column-data-cell", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "at-tooltip-el", "at-merged-column-data-cell"], [1, "at-row", "at-expansion-row"], [1, "at-cell-expanded", 3, "ngClass"], ["class", "at-empty-state-row", 4, "ngIf"], [1, "at-empty-state-row"], [1, "at-empty-state-cell"], ["emptyStateTdEl", ""], [3, "type", "adaptRadarDisableEventSending", "label"], [3, "column", "dataItem", "rowIndex", "expanded", "editing", "texts"], [1, "at-edit-input-wrap", 3, "size", "adaptRadarDisableEventSending", "ngModel", "ngModelChange", "keydown"], ["textfield", ""], ["dataCellDisplayingTemplate", ""], ["role", "group", 1, "btn-group", "d-flex"], ["type", "button", "adapt-button", "", "btn-type", "secondary", "size", "xtra-small", 1, "btn-reject", 3, "adaptRadarDisableEventSending", "click"], ["type", "button", "adapt-button", "", "btn-type", "secondary", "size", "xtra-small", 1, "btn-approve", 3, "adaptRadarDisableEventSending", "click"]], template: function AdaptTableComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0);
                i0__namespace.ɵɵtext(1, "\n\n\n  ");
                i0__namespace.ɵɵelementStart(2, "div", 1);
                i0__namespace.ɵɵlistener("cdkDropListSorted", function AdaptTableComponent_Template_div_cdkDropListSorted_2_listener($event) { return ctx.onCdkDropListSortedRow($event); });
                i0__namespace.ɵɵtext(3, "\n    ");
                i0__namespace.ɵɵelementStart(4, "div", 2, 3);
                i0__namespace.ɵɵtext(6, "\n      ");
                i0__namespace.ɵɵtemplate(7, AdaptTableComponent_div_7_Template, 1, 0, "div", 4);
                i0__namespace.ɵɵtext(8, "\n      ");
                i0__namespace.ɵɵtemplate(9, AdaptTableComponent_div_9_Template, 4, 2, "div", 5);
                i0__namespace.ɵɵtext(10, "\n      ");
                i0__namespace.ɵɵtemplate(11, AdaptTableComponent_adapt_table_toolbar_11_Template, 2, 2, "adapt-table-toolbar", 6);
                i0__namespace.ɵɵtext(12, "\n\n      ");
                i0__namespace.ɵɵelementStart(13, "div", 7, 8);
                i0__namespace.ɵɵtext(15, "\n        ");
                i0__namespace.ɵɵelementStart(16, "div", 9, 10);
                i0__namespace.ɵɵtext(18, "\n          ");
                i0__namespace.ɵɵtemplate(19, AdaptTableComponent_div_19_Template, 18, 13, "div", 11);
                i0__namespace.ɵɵtext(20, "\n\n          ");
                i0__namespace.ɵɵtemplate(21, AdaptTableComponent_div_21_Template, 6, 8, "div", 12);
                i0__namespace.ɵɵtext(22, "\n\n          ");
                i0__namespace.ɵɵtemplate(23, AdaptTableComponent_div_23_Template, 1, 4, "div", 13);
                i0__namespace.ɵɵtext(24, "\n        ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(25, "\n      ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(26, "\n\n      ");
                i0__namespace.ɵɵtemplate(27, AdaptTableComponent_adapt_paginator_27_Template, 2, 12, "adapt-paginator", 14);
                i0__namespace.ɵɵtext(28, "\n\n      ");
                i0__namespace.ɵɵtemplate(29, AdaptTableComponent_div_29_Template, 2, 0, "div", 15);
                i0__namespace.ɵɵtext(30, "\n\n      ");
                i0__namespace.ɵɵtemplate(31, AdaptTableComponent_span_31_Template, 2, 0, "span", 16);
                i0__namespace.ɵɵtext(32, "\n      ");
                i0__namespace.ɵɵtemplate(33, AdaptTableComponent_span_33_Template, 2, 0, "span", 17);
                i0__namespace.ɵɵtext(34, "\n    ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(35, "\n\n    ");
                i0__namespace.ɵɵtemplate(36, AdaptTableComponent_div_36_Template, 1, 2, "div", 18);
                i0__namespace.ɵɵtext(37, "\n\n    ");
                i0__namespace.ɵɵelementContainer(38, null, 19);
                i0__namespace.ɵɵtext(40, "\n\n    ");
                i0__namespace.ɵɵelementContainer(41, null, 20);
                i0__namespace.ɵɵtext(43, "\n\n    ");
                i0__namespace.ɵɵtext(44, "\n    ");
                i0__namespace.ɵɵtemplate(45, AdaptTableComponent_ng_template_45_Template, 17, 6, "ng-template", null, 21, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(47, "\n\n    ");
                i0__namespace.ɵɵtext(48, "\n    ");
                i0__namespace.ɵɵtemplate(49, AdaptTableComponent_ng_template_49_Template, 13, 9, "ng-template", null, 22, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(51, "\n    ");
                i0__namespace.ɵɵtemplate(52, AdaptTableComponent_ng_template_52_Template, 6, 2, "ng-template", null, 23, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(54, "\n    ");
                i0__namespace.ɵɵtemplate(55, AdaptTableComponent_ng_template_55_Template, 9, 4, "ng-template", null, 24, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(57, "\n\n    ");
                i0__namespace.ɵɵtext(58, "\n    ");
                i0__namespace.ɵɵtemplate(59, AdaptTableComponent_ng_template_59_Template, 8, 2, "ng-template", null, 25, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(61, "\n\n    ");
                i0__namespace.ɵɵtext(62, "\n    ");
                i0__namespace.ɵɵtemplate(63, AdaptTableComponent_ng_template_63_Template, 9, 4, "ng-template", null, 26, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(65, "\n\n    ");
                i0__namespace.ɵɵtext(66, "\n    ");
                i0__namespace.ɵɵtemplate(67, AdaptTableComponent_ng_template_67_Template, 3, 1, "ng-template", null, 27, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(69, "\n\n    ");
                i0__namespace.ɵɵtext(70, "\n    ");
                i0__namespace.ɵɵtemplate(71, AdaptTableComponent_ng_template_71_Template, 1, 1, "ng-template", null, 28, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(73, "\n\n    ");
                i0__namespace.ɵɵtext(74, "\n    ");
                i0__namespace.ɵɵtemplate(75, AdaptTableComponent_ng_template_75_Template, 5, 2, "ng-template", null, 29, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(77, "\n\n    ");
                i0__namespace.ɵɵtext(78, "\n    ");
                i0__namespace.ɵɵtemplate(79, AdaptTableComponent_ng_template_79_Template, 5, 3, "ng-template", null, 30, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(81, "\n\n    ");
                i0__namespace.ɵɵtext(82, "\n    ");
                i0__namespace.ɵɵtemplate(83, AdaptTableComponent_ng_template_83_Template, 12, 3, "ng-template", null, 31, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(85, "\n\n  ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(86, "\n");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(87, "\n");
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction4(21, _c26, ctx.scrollable && ctx.scrollHeight === "flex", ctx.paginator, ctx.toolbarConfig, ctx.reorderableColumns));
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction2(26, _c27, ctx.enableReorderableRows, ctx.wrapCellText))("cdkDropListData", ctx.getAllCurrentRows())("cdkDropListDisabled", !ctx.enableReorderableRows);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵclassMap(ctx.styleClass);
                i0__namespace.ɵɵproperty("ngStyle", ctx.style)("ngClass", i0__namespace.ɵɵpureFunction5(29, _c28, ctx.responsive, ctx.resizableColumns, ctx.resizableColumns && ctx.columnResizeMode === "fit", ctx.rowHover || ctx.selectionMode, ctx.autoLayout));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", ctx.loading && ctx.showLoader);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.loading && ctx.showLoader);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.toolbarConfig);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction1(35, _c29, ctx.tableWidthConfig));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngStyle", i0__namespace.ɵɵpureFunction1(37, _c30, ctx.getTableWidth(ctx.tableWidthConfig, ctx.isMobile)));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", !ctx.scrollable);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.scrollable);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.isRefreshingRowData);
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵproperty("ngIf", ctx.paginator);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.resizableColumns);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.reorderableColumns);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.reorderableColumns);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", ctx.canShowFullLoader);
            }
        }, encapsulation: 2, data: { animation: [
                animations.trigger('dataRefreshAnimation', [
                    animations.transition('void => *', [
                        animations.style({ transform: 'scaleX(.8)', opacity: '0' }),
                        animations.animate(i1.ANIMATION_DURATION.fast + " " + i1.ANIMATION_TIMING_FUNCTION.base.transitionIn, animations.style({ transform: 'scaleX(1)', opacity: '1' }))
                    ]),
                    animations.transition('* => void', [
                        animations.style({ opacity: '1' }),
                        animations.animate(i1.ANIMATION_DURATION.fast + " " + i1.ANIMATION_TIMING_FUNCTION.base.transitionOut, animations.style({ opacity: '0' }))
                    ]),
                ])
            ] } });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptTableComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'adapt-table',
                        templateUrl: './adapt-table.component.html',
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.Default,
                        providers: [TableService],
                        animations: [
                            animations.trigger('dataRefreshAnimation', [
                                animations.transition('void => *', [
                                    animations.style({ transform: 'scaleX(.8)', opacity: '0' }),
                                    animations.animate(i1.ANIMATION_DURATION.fast + " " + i1.ANIMATION_TIMING_FUNCTION.base.transitionIn, animations.style({ transform: 'scaleX(1)', opacity: '1' }))
                                ]),
                                animations.transition('* => void', [
                                    animations.style({ opacity: '1' }),
                                    animations.animate(i1.ANIMATION_DURATION.fast + " " + i1.ANIMATION_TIMING_FUNCTION.base.transitionOut, animations.style({ opacity: '0' }))
                                ]),
                            ])
                        ]
                    }]
            }], function () { return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.NgZone }, { type: TableService }, { type: i0__namespace.ChangeDetectorRef }, { type: i2__namespace.FilterService }, { type: i3__namespace.Directionality }, { type: i0__namespace.Renderer2 }, { type: i1__namespace.AdaptDeviceDetectionService }, { type: i1__namespace.AdaptTranslateService }, { type: AdaptTableDeprecationMiddleware }, { type: i1__namespace.AdaptOverlayService }, { type: i0__namespace.Injector }]; }, { emptyStateTdEl: [{
                    type: i0.ViewChild,
                    args: ['emptyStateTdEl', { static: false }]
                }], toolbarComponent: [{
                    type: i0.ViewChild,
                    args: ['toolbarComponent', { static: false }]
                }], tooltipViewContainerRef: [{
                    type: i0.ViewChild,
                    args: ['tooltipContainerEl', { read: i0.ViewContainerRef, static: true }]
                }], infiniteScrollingLoaderContainerEl: [{
                    type: i0.ViewChild,
                    args: ['infiniteScrollingLoaderContainerEl', { read: i0.ViewContainerRef, static: true }]
                }], tableContainer: [{
                    type: i0.ViewChild,
                    args: ['tableContainer', { static: true }]
                }], tableInnerContainer: [{
                    type: i0.ViewChild,
                    args: ['tableInnerContainer', { static: true }]
                }], tableHeader: [{
                    type: i0.ViewChild,
                    args: ['tableHeader', { static: false }]
                }], nonScrollableTable: [{
                    type: i0.ViewChild,
                    args: ['table', { static: false }]
                }], tableBodyTemplateRef: [{
                    type: i0.ViewChild,
                    args: ['tableBodyTemplateRef', { static: true }]
                }], tableHeaderTemplateRef: [{
                    type: i0.ViewChild,
                    args: ['tableHeaderTemplateRef', { static: true }]
                }], tableColgroupTemplateRef: [{
                    type: i0.ViewChild,
                    args: ['tableColgroupTemplateRef', { static: true }]
                }], tableEmptyMessageTemplateRef: [{
                    type: i0.ViewChild,
                    args: ['tableEmptyMessageTemplateRef', { static: true }]
                }], rowExpansionTemplate: [{
                    type: i0.ViewChild,
                    args: ['rowExpansionTemplate', { static: true }]
                }], dataRows: [{
                    type: i0.ViewChildren,
                    args: ['dataRow', { read: AdaptDataDirective }]
                }], dataCells: [{
                    type: i0.ViewChildren,
                    args: ['dataCell', { read: AdaptDataDirective }]
                }], dataHeaderCells: [{
                    type: i0.ViewChildren,
                    args: ['dataHeaderCell', { read: AdaptDataDirective }]
                }], actionColElements: [{
                    type: i0.ViewChildren,
                    args: ['actionColElement', { read: i0.ElementRef }]
                }], sortable: [{
                    type: i0.Input
                }], filterable: [{
                    type: i0.Input
                }], triggerableFilters: [{
                    type: i0.Input
                }], explicitSearchBtn: [{
                    type: i0.Input
                }], enableReorderableRows: [{
                    type: i0.Input
                }], suppressTooltip: [{
                    type: i0.Input
                }], toolbarConfig: [{
                    type: i0.Input
                }], dataColumnsColsTemplate: [{
                    type: i0.Input
                }], dataColumnsHeaderTemplate: [{
                    type: i0.Input
                }], dataColumnsDataCellsTemplate: [{
                    type: i0.Input
                }], headerGroupsTemplate: [{
                    type: i0.Input
                }], alwaysShowHeaderTooltip: [{
                    type: i0.Input
                }], alwaysShowCellTooltip: [{
                    type: i0.Input
                }], expandedCellClass: [{
                    type: i0.Input
                }], expandedGroupsKeys: [{
                    type: i0.Input
                }], nestedGroupPadding: [{
                    type: i0.Input
                }], expandindCellInitialPadding: [{
                    type: i0.Input
                }], groupValueDataCellTemplate: [{
                    type: i0.Input
                }], tooltipInitialDelayMs: [{
                    type: i0.Input
                }], tooltipClass: [{
                    type: i0.Input
                }], rowsCustomClass: [{
                    type: i0.Input
                }], paginatorAlign: [{
                    type: i0.Input
                }], hasEmptyState: [{
                    type: i0.Input
                }], enableInfiniteScrolling: [{
                    type: i0.Input
                }], updateFirstColumnWidth: [{
                    type: i0.Input
                }], busyConfig: [{
                    type: i0.Input
                }], defaultFiltersMatchMode: [{
                    type: i0.Input
                }], wrapCellText: [{
                    type: i0.Input
                }], minBufferPx: [{
                    type: i0.Input
                }], maxBufferPx: [{
                    type: i0.Input
                }], testID: [{
                    type: i0.Input
                }], headerSelectionMode: [{
                    type: i0.Input
                }], disabledSelectedRowsCount: [{
                    type: i0.Input
                }], disabledNotSelectedRowsCount: [{
                    type: i0.Input
                }], disabledSelectedFilteredRowsCount: [{
                    type: i0.Input
                }], disabledNotSelectedFilteredRowsCount: [{
                    type: i0.Input
                }], selectedFilteredRowsCount: [{
                    type: i0.Input
                }], totalRecordsInGroup: [{
                    type: i0.Input
                }], disableRowSelection: [{
                    type: i0.Input
                }], nestingStructureData: [{
                    type: i0.Input
                }], nestingKey: [{
                    type: i0.Input
                }], enableRowEditing: [{
                    type: i0.Input
                }], autoScrollToTop: [{
                    type: i0.Input
                }], paginationTexts: [{
                    type: i0.Input
                }], toolbarTexts: [{
                    type: i0.Input
                }], tableTexts: [{
                    type: i0.Input
                }], filtersTexts: [{
                    type: i0.Input
                }], headerCellMenuTexts: [{
                    type: i0.Input
                }], texts: [{
                    type: i0.Input
                }], loadingMore: [{
                    type: i0.Input
                }], mergeColumns: [{
                    type: i0.Input
                }], disabledRowSelectionResolver: [{
                    type: i0.Input
                }], allowColumnReorderingResolver: [{
                    type: i0.Input
                }], disableRowExpandingResolver: [{
                    type: i0.Input
                }], rowAriaDataResolver: [{
                    type: i0.Input
                }], tableWidthConfig: [{
                    type: i0.Input
                }], expandedRowTemplate: [{
                    type: i0.Input
                }], isRefreshingRowData: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], bordered: [{
                    type: i0.HostBinding,
                    args: ["class." + exports.AdaptTableClasses.Bordered]
                }, {
                    type: i0.Input
                }], paginator: [{
                    type: i0.HostBinding,
                    args: ["class." + exports.AdaptTableClasses.Pageable]
                }, {
                    type: i0.Input
                }], striped: [{
                    type: i0.HostBinding,
                    args: ["class." + exports.AdaptTableClasses.Striped]
                }, {
                    type: i0.Input
                }], onLazyLoad: [{
                    type: i0.Output
                }], rowDataRefresh: [{
                    type: i0.Output
                }], savedRowEditing: [{
                    type: i0.Output
                }], canceledRowEditing: [{
                    type: i0.Output
                }], groupSelection: [{
                    type: i0.Output
                }], allGroupedRowsSelection: [{
                    type: i0.Output
                }], groupExpansion: [{
                    type: i0.Output
                }], columnsVisibilityChange: [{
                    type: i0.Output
                }], rowDragStart: [{
                    type: i0.Output
                }], rowDragRelease: [{
                    type: i0.Output
                }], rowDragEnd: [{
                    type: i0.Output
                }], rowDragDrop: [{
                    type: i0.Output
                }], export: [{
                    type: i0.Output
                }], toolbarPopupAnimationDone: [{
                    type: i0.Output
                }], mainClass: [{
                    type: i0.HostBinding,
                    args: ["class." + exports.AdaptTableClasses.Main]
                }], adaptTableClass: [{
                    type: i0.HostBinding,
                    args: ["class." + exports.AdaptTableClasses.AdaptTable]
                }], scrollableClass: [{
                    type: i0.HostBinding,
                    args: ["class." + exports.AdaptTableClasses.Scrollable]
                }], notScrollableClass: [{
                    type: i0.HostBinding,
                    args: ["class." + exports.AdaptTableClasses.NotScrollable]
                }], isEmptyState: [{
                    type: i0.HostBinding,
                    args: ["class." + exports.AdaptTableClasses.IsEmptyState]
                }], loading: [{
                    type: i0.Input
                }, {
                    type: i0.HostBinding,
                    args: ["class." + exports.AdaptTableClasses.LoadingFullTable]
                }] });
    })();

    var AdaptTableFiltersService = /** @class */ (function () {
        function AdaptTableFiltersService() {
        }
        AdaptTableFiltersService.prototype.filterName = function (column) {
            return column.filterName || AdaptTableFilters.DEFAULT_FILTER;
        };
        AdaptTableFiltersService.prototype.getFilterValue = function (columnField, table) {
            var filters = table.filters;
            if (!filters) {
                return null;
            }
            var filter = filters[columnField];
            return filter ? filter.value : null;
        };
        AdaptTableFiltersService.prototype.onSelectModelChange = function (model, column, table) {
            var arrayModel = i1.isArray(model) ? model : [model];
            this.setFilter(arrayModel, column, table, exports.FilterMatchMode.in);
        };
        AdaptTableFiltersService.prototype.setFilter = function (value, column, table, matchMode) {
            if (!matchMode) {
                var filterParams = this._getFilterParams(column);
                matchMode = (filterParams && filterParams.matchMode) || table.defaultFiltersMatchMode;
            }
            table.filter(value, column.field, matchMode);
        };
        AdaptTableFiltersService.prototype.getSelectTexts = function (column, texts) {
            var filterParams = this.getSelectFilterParams(column);
            if (filterParams && filterParams.selectTexts) {
                return Object.assign(Object.assign({}, texts.selectFilterTexts), filterParams.selectTexts);
            }
            else {
                return texts.selectFilterTexts;
            }
        };
        AdaptTableFiltersService.prototype.getSelectFilterParams = function (column) {
            return column.filterParams;
        };
        AdaptTableFiltersService.prototype.getSelectOptions = function (column) {
            var filterParams = this.getSelectFilterParams(column);
            if (filterParams && filterParams.values) {
                return filterParams.values.map(function (value) { return typeof value === 'string' ? ({ id: value, name: value }) : value; });
            }
            else {
                return [];
            }
        };
        AdaptTableFiltersService.prototype._getFilterParams = function (column) {
            return column.filterParams;
        };
        return AdaptTableFiltersService;
    }());
    AdaptTableFiltersService.ɵfac = function AdaptTableFiltersService_Factory(t) { return new (t || AdaptTableFiltersService)(); };
    AdaptTableFiltersService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: AdaptTableFiltersService, factory: AdaptTableFiltersService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptTableFiltersService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], null, null);
    })();

    var AdaptSelectMigrationComponent = /** @class */ (function () {
        function AdaptSelectMigrationComponent() {
            this.selectModelChange = new i0.EventEmitter();
            this.popupOpenChange = new i0.EventEmitter();
            this.filterValueChange = new i0.EventEmitter();
            this._showWarningMessage();
        }
        Object.defineProperty(AdaptSelectMigrationComponent.prototype, "options", {
            set: function (opts) {
                this.rxSelectComponent.options = opts || [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptSelectMigrationComponent.prototype, "multiple", {
            set: function (value) {
                this.rxSelectComponent.multiple = !lodashEs.isUndefined(value) && value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptSelectMigrationComponent.prototype, "optionFormatter", {
            set: function (fn) {
                this.rxSelectComponent.optionFormatter = !lodashEs.isUndefined(fn) && fn;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptSelectMigrationComponent.prototype, "settings", {
            set: function (value) {
                this._setNewSettings(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptSelectMigrationComponent.prototype, "texts", {
            set: function (value) {
                this.rxSelectComponent.texts = !lodashEs.isUndefined(value) && value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptSelectMigrationComponent.prototype, "inline", {
            set: function (value) {
                this.rxSelectComponent.inline = !lodashEs.isUndefined(value) && value;
            },
            enumerable: false,
            configurable: true
        });
        AdaptSelectMigrationComponent.prototype.ngOnInit = function () {
            if (lodashEs.isArray(this.value)) {
                this.selectModel = this.value.map(function (val) { return ({ id: val, name: val }); });
            }
            else {
                this.selectModel = lodashEs.isNil(this.value)
                    ? { id: this.value, name: this.value }
                    : [{ id: this.value, name: this.value }];
            }
        };
        AdaptSelectMigrationComponent.prototype.handleOnSelectModelChange = function (value) {
            var model = lodashEs.isArray(value)
                ? value.map(function (option) { return option.id; })
                : value.id;
            this.selectModelChange.emit(model);
        };
        AdaptSelectMigrationComponent.prototype._setNewSettings = function (value) {
            for (var valueKey in value) {
                if (!lodashEs.isUndefined(value[valueKey])) {
                    this.rxSelectComponent[valueKey] = value[valueKey];
                }
            }
        };
        AdaptSelectMigrationComponent.prototype._showWarningMessage = function () {
            i1.adaptWarn('[settings] property will be changed and will contain properties from rx-select API. Please, check https://github.bmc.com/pages/bmc-ux/adapt-angular/#/components/select and https://github.bmc.com/pages/bmc-ux/adapt-angular/#/components/rx-select to see APIs difference');
        };
        return AdaptSelectMigrationComponent;
    }());
    AdaptSelectMigrationComponent.ɵfac = function AdaptSelectMigrationComponent_Factory(t) { return new (t || AdaptSelectMigrationComponent)(); };
    AdaptSelectMigrationComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: AdaptSelectMigrationComponent, selectors: [["adapt-select-migration"]], viewQuery: function AdaptSelectMigrationComponent_Query(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵviewQuery(i1.AdaptRxSelectComponent, 7);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.rxSelectComponent = _t.first);
            }
        }, inputs: { value: "value", options: "options", multiple: "multiple", optionFormatter: "optionFormatter", settings: "settings", texts: "texts", inline: "inline" }, outputs: { selectModelChange: "selectModelChange", popupOpenChange: "popupOpenChange", filterValueChange: "filterValueChange" }, features: [i0__namespace.ɵɵProvidersFeature([i1.AdaptRxSelectConfigService])], decls: 5, vars: 3, consts: [[3, "adaptRadarDisableEventSending", "size", "ngModel", "ngModelChange", "onPopupOpenChange", "onFilterValueChange"], ["rxSelectComponent", ""]], template: function AdaptSelectMigrationComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtext(0, "\n    ");
                i0__namespace.ɵɵelementStart(1, "adapt-rx-select", 0, 1);
                i0__namespace.ɵɵlistener("ngModelChange", function AdaptSelectMigrationComponent_Template_adapt_rx_select_ngModelChange_1_listener($event) { return ctx.selectModel = $event; })("ngModelChange", function AdaptSelectMigrationComponent_Template_adapt_rx_select_ngModelChange_1_listener($event) { return ctx.handleOnSelectModelChange($event); })("onPopupOpenChange", function AdaptSelectMigrationComponent_Template_adapt_rx_select_onPopupOpenChange_1_listener($event) { return ctx.popupOpenChange.emit($event); })("onFilterValueChange", function AdaptSelectMigrationComponent_Template_adapt_rx_select_onFilterValueChange_1_listener($event) { return ctx.filterValueChange.emit($event); });
                i0__namespace.ɵɵtext(3, "\n    ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(4, "\n  ");
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true)("size", "sm")("ngModel", ctx.selectModel);
            }
        }, directives: [i1__namespace.AdaptRxSelectComponent, i5__namespace.NgControlStatus, i5__namespace.NgModel], encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptSelectMigrationComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'adapt-select-migration',
                        template: "\n    <adapt-rx-select #rxSelectComponent\n                     [adaptRadarDisableEventSending]=\"true\"\n                     [size]=\"'sm'\"\n                     [(ngModel)]=\"selectModel\"\n                     (ngModelChange)=\"handleOnSelectModelChange($event)\"\n                     (onPopupOpenChange)=\"popupOpenChange.emit($event)\"\n                     (onFilterValueChange)=\"filterValueChange.emit($event)\">\n    </adapt-rx-select>\n  ",
                        providers: [i1.AdaptRxSelectConfigService]
                    }]
            }], function () { return []; }, { value: [{
                    type: i0.Input
                }], options: [{
                    type: i0.Input
                }], multiple: [{
                    type: i0.Input
                }], optionFormatter: [{
                    type: i0.Input
                }], settings: [{
                    type: i0.Input
                }], texts: [{
                    type: i0.Input
                }], inline: [{
                    type: i0.Input
                }], selectModelChange: [{
                    type: i0.Output
                }], popupOpenChange: [{
                    type: i0.Output
                }], filterValueChange: [{
                    type: i0.Output
                }], rxSelectComponent: [{
                    type: i0.ViewChild,
                    args: [i1.AdaptRxSelectComponent, { static: true }]
                }] });
    })();

    function AdaptTableMergedFiltersComponent_adapt_tag_15_Template(rf, ctx) {
        if (rf & 1) {
            var _r5_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "adapt-tag", 8);
            i0__namespace.ɵɵlistener("remove", function AdaptTableMergedFiltersComponent_adapt_tag_15_Template_adapt_tag_remove_0_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r5_1); var filter_r3 = restoredCtx.$implicit; var ctx_r4 = i0__namespace.ɵɵnextContext(); return ctx_r4.onRemoveFilterFormApplied(filter_r3); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var filter_r3 = ctx.$implicit;
            i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true)("type", "active");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate2("\n          ", filter_r3.header, ": ", filter_r3.value, "\n        ");
        }
    }
    function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_container_2_ng_template_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n            ");
        }
    }
    var _c0$b = function (a0, a1) { return { column: a0, index: a1 }; };
    function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_container_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n            ");
            i0__namespace.ɵɵtemplate(2, AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_container_2_ng_template_2_Template, 1, 0, "ng-template", 15);
            i0__namespace.ɵɵtext(3, "\n          ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var column_r7 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r8 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", column_r7.filterTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction2(2, _c0$b, column_r7, ctx_r8.index));
        }
    }
    function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_adapt_rx_search_3_Template(rf, ctx) {
        if (rf & 1) {
            var _r17_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "adapt-rx-search", 19);
            i0__namespace.ɵɵlistener("ngModelChange", function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_adapt_rx_search_3_Template_adapt_rx_search_ngModelChange_0_listener($event) { i0__namespace.ɵɵrestoreView(_r17_1); var column_r7 = i0__namespace.ɵɵnextContext(2).$implicit; var ctx_r15 = i0__namespace.ɵɵnextContext(2); return ctx_r15.setFilter($event, column_r7); });
            i0__namespace.ɵɵtext(1, "\n              ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var column_r7 = i0__namespace.ɵɵnextContext(2).$implicit;
            var ctx_r13 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true)("ngModel", ctx_r13.getFilterValue(column_r7))("placeholder", ctx_r13.texts.textFilterTexts.placeholder)("label", ctx_r13.texts.textFilterTexts.label)("initialAlign", "left")("searchButton", ctx_r13.table.explicitSearchBtn)("size", "sm");
        }
    }
    function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_ng_container_5_ng_container_2_adapt_rx_radiobutton_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r26_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "adapt-rx-radiobutton", 22);
            i0__namespace.ɵɵlistener("ngModelChange", function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_ng_container_5_ng_container_2_adapt_rx_radiobutton_2_Template_adapt_rx_radiobutton_ngModelChange_0_listener($event) { i0__namespace.ɵɵrestoreView(_r26_1); var column_r7 = i0__namespace.ɵɵnextContext(4).$implicit; var ctx_r24 = i0__namespace.ɵɵnextContext(2); return ctx_r24.onSelectModelChange($event, column_r7); });
            i0__namespace.ɵɵtext(1, "\n                  ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var option_r23 = ctx.$implicit;
            var column_r7 = i0__namespace.ɵɵnextContext(4).$implicit;
            var ctx_r22 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true)("value", option_r23.id)("label", option_r23.name)("ngModel", ctx_r22.getFilterValueForSingleSelect(column_r7));
        }
    }
    function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_ng_container_5_ng_container_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n\n                  ");
            i0__namespace.ɵɵtemplate(2, AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_ng_container_5_ng_container_2_adapt_rx_radiobutton_2_Template, 2, 4, "adapt-rx-radiobutton", 21);
            i0__namespace.ɵɵtext(3, "\n                ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var column_r7 = i0__namespace.ɵɵnextContext(3).$implicit;
            var ctx_r19 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r19.getSelectOptions(column_r7))("ngForTrackBy", ctx_r19.trackByForSelectOptions);
        }
    }
    function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_ng_container_5_ng_template_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r31_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵtext(0, "\n                  ");
            i0__namespace.ɵɵelementStart(1, "adapt-select-migration", 23);
            i0__namespace.ɵɵlistener("selectModelChange", function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_ng_container_5_ng_template_4_Template_adapt_select_migration_selectModelChange_1_listener($event) { i0__namespace.ɵɵrestoreView(_r31_1); var column_r7 = i0__namespace.ɵɵnextContext(3).$implicit; var ctx_r29 = i0__namespace.ɵɵnextContext(2); return ctx_r29.onSelectModelChange($event, column_r7); });
            i0__namespace.ɵɵtext(2, "\n                  ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(3, "\n                ");
        }
        if (rf & 2) {
            var column_r7 = i0__namespace.ɵɵnextContext(3).$implicit;
            var ctx_r21 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("inline", true)("options", ctx_r21.getSelectOptions(column_r7))("optionFormatter", ctx_r21.selectOptionFormatter)("texts", ctx_r21.getSelectTexts(column_r7))("multiple", !ctx_r21.isSingleSelect(column_r7))("settings", ctx_r21.getSelectSettings(column_r7))("value", ctx_r21.getFilterValue(column_r7));
        }
    }
    function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_ng_container_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n                ");
            i0__namespace.ɵɵtemplate(2, AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_ng_container_5_ng_container_2_Template, 4, 2, "ng-container", 13);
            i0__namespace.ɵɵtext(3, "\n\n                ");
            i0__namespace.ɵɵtemplate(4, AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_ng_container_5_ng_template_4_Template, 4, 7, "ng-template", null, 20, i0__namespace.ɵɵtemplateRefExtractor);
            i0__namespace.ɵɵtext(6, "\n              ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var _r20 = i0__namespace.ɵɵreference(5);
            var column_r7 = i0__namespace.ɵɵnextContext(2).$implicit;
            var ctx_r14 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r14.isSingleSelect(column_r7))("ngIfElse", _r20);
        }
    }
    function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n            ");
            i0__namespace.ɵɵelementContainerStart(1, 16);
            i0__namespace.ɵɵtext(2, "\n              ");
            i0__namespace.ɵɵtemplate(3, AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_adapt_rx_search_3_Template, 2, 7, "adapt-rx-search", 17);
            i0__namespace.ɵɵtext(4, "\n\n              ");
            i0__namespace.ɵɵtemplate(5, AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_ng_container_5_Template, 7, 2, "ng-container", 18);
            i0__namespace.ɵɵtext(6, "\n            ");
            i0__namespace.ɵɵelementContainerEnd();
            i0__namespace.ɵɵtext(7, "\n          ");
        }
        if (rf & 2) {
            var column_r7 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r10 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngSwitch", ctx_r10.filterName(column_r7));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngSwitchCase", "textFilter");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngSwitchCase", "selectFilter");
        }
    }
    function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "adapt-accordion-tab", 12);
            i0__namespace.ɵɵtext(1, "\n\n          ");
            i0__namespace.ɵɵtemplate(2, AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_container_2_Template, 4, 5, "ng-container", 13);
            i0__namespace.ɵɵtext(3, "\n          ");
            i0__namespace.ɵɵtemplate(4, AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_Template, 8, 3, "ng-template", null, 14, i0__namespace.ɵɵtemplateRefExtractor);
            i0__namespace.ɵɵtext(6, "\n\n        ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var column_r7 = ctx.$implicit;
            var _r9 = i0__namespace.ɵɵreference(5);
            i0__namespace.ɵɵproperty("title", column_r7.header);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", column_r7.filterTemplate)("ngIfElse", _r9);
        }
    }
    function AdaptTableMergedFiltersComponent_div_19_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 9);
            i0__namespace.ɵɵtext(1, "\n      ");
            i0__namespace.ɵɵelementStart(2, "adapt-accordion", 10);
            i0__namespace.ɵɵtext(3, "\n        ");
            i0__namespace.ɵɵtemplate(4, AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_Template, 7, 3, "adapt-accordion-tab", 11);
            i0__namespace.ɵɵtext(5, "\n      ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(6, "\n    ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r2 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true)("bordered", false);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r2.columns)("ngForTrackBy", ctx_r2.table.trackByForColumns);
        }
    }
    var _c1$7 = function () { return ["bottom-left", "bottom-right"]; };
    var AdaptTableMergedFiltersComponent = /** @class */ (function () {
        function AdaptTableMergedFiltersComponent(table, _adaptTableFiltersService) {
            this.table = table;
            this._adaptTableFiltersService = _adaptTableFiltersService;
        }
        AdaptTableMergedFiltersComponent.prototype.getAppliedFiltersForCurrentColumns = function (columns) {
            var filters = this.table.filters;
            if (!filters) {
                return [];
            }
            return columns
                .filter(function (column) { return !!(filters[column.field] && i1.isDefined(filters[column.field].value)); })
                .map(function (column) {
                var filterValue = filters[column.field].value;
                return {
                    header: column.header,
                    value: i1.isArray(filterValue) ? filterValue.join(', ') : filterValue,
                    columnField: column.field
                };
            });
        };
        AdaptTableMergedFiltersComponent.prototype.onRemoveFilterFormApplied = function (filter) {
            delete this.table.filters[filter.columnField];
            this.table._filter();
        };
        AdaptTableMergedFiltersComponent.prototype.getDropdownButtonLabel = function (columns) {
            var filters = this.table.filters;
            if (!filters) {
                return this.texts.mergedFiltersTexts.buttonNoAppliedFilters;
            }
            var counter = 0;
            columns.forEach(function (column) {
                if (i1.isDefined(filters[column.field])) {
                    counter++;
                }
            });
            return counter > 0
                ? counter === 1
                    ? i1.formatString(this.texts.mergedFiltersTexts.buttonAppliedFilter, counter)
                    : i1.formatString(this.texts.mergedFiltersTexts.buttonAppliedFilters, counter)
                : this.texts.mergedFiltersTexts.buttonNoAppliedFilters;
        };
        AdaptTableMergedFiltersComponent.prototype.filterName = function (column) {
            return this._adaptTableFiltersService.filterName(column);
        };
        AdaptTableMergedFiltersComponent.prototype.isSingleSelect = function (column) {
            return this._adaptTableFiltersService.getSelectFilterParams(column).single;
        };
        AdaptTableMergedFiltersComponent.prototype.setFilter = function (value, column, matchMode) {
            this._adaptTableFiltersService.setFilter(value, column, this.table, matchMode);
        };
        AdaptTableMergedFiltersComponent.prototype.getFilterValue = function (column) {
            return this._adaptTableFiltersService.getFilterValue(column.field, this.table);
        };
        AdaptTableMergedFiltersComponent.prototype.getFilterValueForSingleSelect = function (column) {
            var filterValue = this.getFilterValue(column);
            return filterValue ? filterValue[0] : null;
        };
        AdaptTableMergedFiltersComponent.prototype.getSelectSettings = function (column) {
            var filterOptionsLength = this._getFilterOptionsLength(column);
            var showAdditionalSelectControls = filterOptionsLength > 20;
            return {
                enableFilter: showAdditionalSelectControls,
                selectAllButton: showAdditionalSelectControls,
                deselectAllButton: showAdditionalSelectControls
            };
        };
        AdaptTableMergedFiltersComponent.prototype.getSelectOptions = function (column) {
            return this._adaptTableFiltersService.getSelectOptions(column);
        };
        AdaptTableMergedFiltersComponent.prototype.getSelectTexts = function (column) {
            return this._adaptTableFiltersService.getSelectTexts(column, this.texts);
        };
        AdaptTableMergedFiltersComponent.prototype.onSelectModelChange = function (value, column) {
            this._adaptTableFiltersService.onSelectModelChange(value, column, this.table);
        };
        AdaptTableMergedFiltersComponent.prototype.trackByForSelectOptions = function (index, option) {
            return option.id || index;
        };
        AdaptTableMergedFiltersComponent.prototype.trackByForAppliedFilters = function (index, filter) {
            return filter.columnField || index;
        };
        AdaptTableMergedFiltersComponent.prototype.selectOptionFormatter = function (option) {
            return option.name;
        };
        AdaptTableMergedFiltersComponent.prototype._getFilterOptionsLength = function (column) {
            var filterParams = this._adaptTableFiltersService.getSelectFilterParams(column);
            return filterParams && filterParams.values && filterParams.values.length;
        };
        return AdaptTableMergedFiltersComponent;
    }());
    AdaptTableMergedFiltersComponent.ɵfac = function AdaptTableMergedFiltersComponent_Factory(t) { return new (t || AdaptTableMergedFiltersComponent)(i0__namespace.ɵɵdirectiveInject(AdaptTableComponent), i0__namespace.ɵɵdirectiveInject(AdaptTableFiltersService)); };
    AdaptTableMergedFiltersComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: AdaptTableMergedFiltersComponent, selectors: [["adapt-table-merged-filters"]], inputs: { columns: "columns", index: "index", texts: "texts" }, decls: 23, vars: 11, consts: [["adaptDropdown", "", 1, "adapt-table-filters", 3, "adaptRadarDisableEventSending", "appendToBody", "autoClose", "closeOnEscape", "placement"], ["filtersDropdown", "adaptDropdown"], ["role", "button", "type", "button", "adaptDropdownAnchor", "", 1, "dropdown-toggle", "btn", "btn-secondary", "table-merged-filters__button", 3, "click"], ["adaptDropdownMenu", "", 1, "dropdown-menu", "table-merged-filters__dropdown"], [1, "table-merged-filters__dropdown-label"], [1, "table-merged-filters__tags"], [3, "adaptRadarDisableEventSending", "type", "remove", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "table-merged-filters__dropdown-container", 4, "ngIf"], [3, "adaptRadarDisableEventSending", "type", "remove"], [1, "table-merged-filters__dropdown-container"], [3, "adaptRadarDisableEventSending", "bordered"], ["class", "advanced-filter__accordion-tab", 3, "title", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "advanced-filter__accordion-tab", 3, "title"], [4, "ngIf", "ngIfElse"], ["noFilterTamplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "ngSwitch"], [3, "adaptRadarDisableEventSending", "ngModel", "placeholder", "label", "initialAlign", "searchButton", "size", "ngModelChange", 4, "ngSwitchCase"], [4, "ngSwitchCase"], [3, "adaptRadarDisableEventSending", "ngModel", "placeholder", "label", "initialAlign", "searchButton", "size", "ngModelChange"], ["notSingle", ""], ["name", "singleSelectionTypeGroup", "class", "advanced-filter__radiobutton", 3, "adaptRadarDisableEventSending", "value", "label", "ngModel", "ngModelChange", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["name", "singleSelectionTypeGroup", 1, "advanced-filter__radiobutton", 3, "adaptRadarDisableEventSending", "value", "label", "ngModel", "ngModelChange"], [1, "advanced-filter__select-inline", 3, "inline", "options", "optionFormatter", "texts", "multiple", "settings", "value", "selectModelChange"]], template: function AdaptTableMergedFiltersComponent_Template(rf, ctx) {
            if (rf & 1) {
                var _r35_1 = i0__namespace.ɵɵgetCurrentView();
                i0__namespace.ɵɵelementStart(0, "div", 0, 1);
                i0__namespace.ɵɵtext(2, "\n\n  ");
                i0__namespace.ɵɵelementStart(3, "button", 2);
                i0__namespace.ɵɵlistener("click", function AdaptTableMergedFiltersComponent_Template_button_click_3_listener($event) { i0__namespace.ɵɵrestoreView(_r35_1); var _r0 = i0__namespace.ɵɵreference(1); return _r0.toggle($event); });
                i0__namespace.ɵɵtext(4);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(5, "\n\n  ");
                i0__namespace.ɵɵelementStart(6, "div", 3);
                i0__namespace.ɵɵtext(7, "\n\n    ");
                i0__namespace.ɵɵelementStart(8, "div", 4);
                i0__namespace.ɵɵtext(9, "\n      ");
                i0__namespace.ɵɵelementStart(10, "label");
                i0__namespace.ɵɵtext(11);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(12, "\n      ");
                i0__namespace.ɵɵelementStart(13, "div", 5);
                i0__namespace.ɵɵtext(14, "\n        ");
                i0__namespace.ɵɵtemplate(15, AdaptTableMergedFiltersComponent_adapt_tag_15_Template, 2, 4, "adapt-tag", 6);
                i0__namespace.ɵɵtext(16, "\n      ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(17, "\n    ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(18, "\n\n    ");
                i0__namespace.ɵɵtemplate(19, AdaptTableMergedFiltersComponent_div_19_Template, 7, 4, "div", 7);
                i0__namespace.ɵɵtext(20, "\n  ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(21, "\n");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(22, "\n");
            }
            if (rf & 2) {
                var _r0 = i0__namespace.ɵɵreference(1);
                i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true)("appendToBody", true)("autoClose", false)("closeOnEscape", true)("placement", i0__namespace.ɵɵpureFunction0(10, _c1$7));
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵtextInterpolate1("\n    ", ctx.getDropdownButtonLabel(ctx.columns), "\n  ");
                i0__namespace.ɵɵadvance(7);
                i0__namespace.ɵɵtextInterpolate(ctx.texts.mergedFiltersTexts.appliedFiltersLabel);
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵproperty("ngForOf", ctx.getAppliedFiltersForCurrentColumns(ctx.columns))("ngForTrackBy", ctx.trackByForAppliedFilters);
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵproperty("ngIf", _r0 && _r0.isOpen());
            }
        }, directives: [i1__namespace.AdaptDropdownDirective, i1__namespace.AdaptDropdownAnchorDirective, i1__namespace.AdaptDropdownMenuDirective, i2__namespace$1.NgForOf, i2__namespace$1.NgIf, i1__namespace.AdaptTagComponent, i1__namespace.AdaptAccordionComponent, i1__namespace.AdaptAccordionTabComponent, i2__namespace$1.NgTemplateOutlet, i2__namespace$1.NgSwitch, i2__namespace$1.NgSwitchCase, i1__namespace.AdaptRxSearchComponent, i5__namespace.NgControlStatus, i5__namespace.NgModel, i1__namespace.AdaptRxRadiobuttonComponent, AdaptSelectMigrationComponent], encapsulation: 2, changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptTableMergedFiltersComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'adapt-table-merged-filters',
                        templateUrl: './adapt-table-merged-filters.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush
                    }]
            }], function () { return [{ type: AdaptTableComponent }, { type: AdaptTableFiltersService }]; }, { columns: [{
                    type: i0.Input
                }], index: [{
                    type: i0.Input
                }], texts: [{
                    type: i0.Input
                }] });
    })();

    function AdaptTableFiltersComponent_ng_container_0_div_2_ng_container_2_ng_template_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n      ");
        }
    }
    var _c0$a = function (a0, a1) { return { column: a0, index: a1 }; };
    function AdaptTableFiltersComponent_ng_container_0_div_2_ng_container_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n      ");
            i0__namespace.ɵɵtemplate(2, AdaptTableFiltersComponent_ng_container_0_div_2_ng_container_2_ng_template_2_Template, 1, 0, "ng-template", 6);
            i0__namespace.ɵɵtext(3, "\n    ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var column_r3 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r4 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", column_r3.filterTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction2(2, _c0$a, column_r3, ctx_r4.index));
        }
    }
    function AdaptTableFiltersComponent_ng_container_0_div_2_ng_template_4_adapt_rx_search_3_Template(rf, ctx) {
        if (rf & 1) {
            var _r13_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "adapt-rx-search", 10);
            i0__namespace.ɵɵlistener("ngModelChange", function AdaptTableFiltersComponent_ng_container_0_div_2_ng_template_4_adapt_rx_search_3_Template_adapt_rx_search_ngModelChange_0_listener($event) { i0__namespace.ɵɵrestoreView(_r13_1); var column_r3 = i0__namespace.ɵɵnextContext(2).$implicit; var ctx_r11 = i0__namespace.ɵɵnextContext(2); return ctx_r11.setFilter($event, column_r3); });
            i0__namespace.ɵɵtext(1, "\n        ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var column_r3 = i0__namespace.ɵɵnextContext(2).$implicit;
            var ctx_r9 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true)("ngModel", ctx_r9.getFilterValue(column_r3.field))("placeholder", ctx_r9.texts.textFilterTexts.placeholder)("label", ctx_r9.texts.textFilterTexts.label)("initialAlign", "left")("searchButton", ctx_r9.table.explicitSearchBtn)("size", "sm");
        }
    }
    function AdaptTableFiltersComponent_ng_container_0_div_2_ng_template_4_adapt_select_migration_5_Template(rf, ctx) {
        if (rf & 1) {
            var _r17_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "adapt-select-migration", 11);
            i0__namespace.ɵɵlistener("selectModelChange", function AdaptTableFiltersComponent_ng_container_0_div_2_ng_template_4_adapt_select_migration_5_Template_adapt_select_migration_selectModelChange_0_listener($event) { i0__namespace.ɵɵrestoreView(_r17_1); var column_r3 = i0__namespace.ɵɵnextContext(2).$implicit; var ctx_r15 = i0__namespace.ɵɵnextContext(2); return ctx_r15.onSelectModelChange($event, column_r3); })("popupOpenChange", function AdaptTableFiltersComponent_ng_container_0_div_2_ng_template_4_adapt_select_migration_5_Template_adapt_select_migration_popupOpenChange_0_listener($event) { i0__namespace.ɵɵrestoreView(_r17_1); var column_r3 = i0__namespace.ɵɵnextContext(2).$implicit; var ctx_r18 = i0__namespace.ɵɵnextContext(2); return $event ? ctx_r18.fireCallback($event, column_r3, "dropdownOpened") : ctx_r18.fireCallback($event, column_r3, "dropdownClosed"); })("filterValueChange", function AdaptTableFiltersComponent_ng_container_0_div_2_ng_template_4_adapt_select_migration_5_Template_adapt_select_migration_filterValueChange_0_listener($event) { i0__namespace.ɵɵrestoreView(_r17_1); var column_r3 = i0__namespace.ɵɵnextContext(2).$implicit; var ctx_r20 = i0__namespace.ɵɵnextContext(2); return ctx_r20.fireCallback($event, column_r3, "filterValueChanged"); });
            i0__namespace.ɵɵtext(1, "\n        ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var column_r3 = i0__namespace.ɵɵnextContext(2).$implicit;
            var ctx_r10 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("settings", ctx_r10.getSelectSettings(column_r3))("texts", ctx_r10.getSelectTexts(column_r3))("options", ctx_r10.getSelectOptions(column_r3))("multiple", !ctx_r10.isSingleSelect(column_r3))("optionFormatter", ctx_r10.selectOptionFormatter)("value", ctx_r10.getFilterValue(column_r3.field));
        }
    }
    function AdaptTableFiltersComponent_ng_container_0_div_2_ng_template_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n      ");
            i0__namespace.ɵɵelementContainerStart(1, 7);
            i0__namespace.ɵɵtext(2, "\n        ");
            i0__namespace.ɵɵtemplate(3, AdaptTableFiltersComponent_ng_container_0_div_2_ng_template_4_adapt_rx_search_3_Template, 2, 7, "adapt-rx-search", 8);
            i0__namespace.ɵɵtext(4, "\n\n        ");
            i0__namespace.ɵɵtemplate(5, AdaptTableFiltersComponent_ng_container_0_div_2_ng_template_4_adapt_select_migration_5_Template, 2, 6, "adapt-select-migration", 9);
            i0__namespace.ɵɵtext(6, "\n      ");
            i0__namespace.ɵɵelementContainerEnd();
            i0__namespace.ɵɵtext(7, "\n    ");
        }
        if (rf & 2) {
            var column_r3 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r6 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngSwitch", ctx_r6.filterName(column_r3));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngSwitchCase", "textFilter");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngSwitchCase", "selectFilter");
        }
    }
    function AdaptTableFiltersComponent_ng_container_0_div_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 3);
            i0__namespace.ɵɵtext(1, "\n\n    ");
            i0__namespace.ɵɵtemplate(2, AdaptTableFiltersComponent_ng_container_0_div_2_ng_container_2_Template, 4, 5, "ng-container", 4);
            i0__namespace.ɵɵtext(3, "\n    ");
            i0__namespace.ɵɵtemplate(4, AdaptTableFiltersComponent_ng_container_0_div_2_ng_template_4_Template, 8, 3, "ng-template", null, 5, i0__namespace.ɵɵtemplateRefExtractor);
            i0__namespace.ɵɵtext(6, "\n\n  ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var column_r3 = ctx.$implicit;
            var _r5 = i0__namespace.ɵɵreference(5);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", column_r3.filterTemplate)("ngIfElse", _r5);
        }
    }
    function AdaptTableFiltersComponent_ng_container_0_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n  ");
            i0__namespace.ɵɵtemplate(2, AdaptTableFiltersComponent_ng_container_0_div_2_Template, 7, 2, "div", 2);
            i0__namespace.ɵɵtext(3, "\n");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r0.columns)("ngForTrackBy", ctx_r0.table.trackByForColumns);
        }
    }
    function AdaptTableFiltersComponent_adapt_table_merged_filters_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "adapt-table-merged-filters", 12);
            i0__namespace.ɵɵtext(1, "\n");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("columns", ctx_r1.columns)("index", ctx_r1.index)("texts", ctx_r1.texts);
        }
    }
    var AdaptTableFiltersComponent = /** @class */ (function () {
        function AdaptTableFiltersComponent(table, _adaptTableFiltersService) {
            this.table = table;
            this._adaptTableFiltersService = _adaptTableFiltersService;
            this.selectSettingsForMultiple = {
                multiple: true,
                appendToBody: true,
                placement: 'bottom-left',
            };
            this.selectSettingsForSingle = {
                multiple: false,
                enableFilter: true,
                appendToBody: true,
                placement: 'bottom-left',
            };
        }
        AdaptTableFiltersComponent.prototype.filterName = function (column) {
            return this._adaptTableFiltersService.filterName(column);
        };
        AdaptTableFiltersComponent.prototype.isSingleSelect = function (column) {
            return this._adaptTableFiltersService.getSelectFilterParams(column).single;
        };
        AdaptTableFiltersComponent.prototype.setFilter = function (value, column, matchMode) {
            this._adaptTableFiltersService.setFilter(value, column, this.table, matchMode);
        };
        AdaptTableFiltersComponent.prototype.getFilterValue = function (columnField) {
            return this._adaptTableFiltersService.getFilterValue(columnField, this.table);
        };
        AdaptTableFiltersComponent.prototype.getSelectOptions = function (column) {
            return this._adaptTableFiltersService.getSelectOptions(column);
        };
        AdaptTableFiltersComponent.prototype.getSelectSettings = function (column) {
            var filterParams = this._adaptTableFiltersService.getSelectFilterParams(column);
            if (filterParams.selectSettings) {
                return filterParams.selectSettings;
            }
            else {
                return this.isSingleSelect(column) ? this.selectSettingsForSingle : this.selectSettingsForMultiple;
            }
        };
        AdaptTableFiltersComponent.prototype.getSelectTexts = function (column) {
            return this._adaptTableFiltersService.getSelectTexts(column, this.texts);
        };
        AdaptTableFiltersComponent.prototype.onSelectModelChange = function (value, column) {
            this._adaptTableFiltersService.onSelectModelChange(value, column, this.table);
        };
        AdaptTableFiltersComponent.prototype.fireCallback = function (event, column, callbackName) {
            var callbacks = this._getFilterCallbacks(column);
            if (callbacks && callbacks[callbackName]) {
                callbacks[callbackName](event);
            }
        };
        AdaptTableFiltersComponent.prototype.selectOptionFormatter = function (option) {
            return option.name;
        };
        AdaptTableFiltersComponent.prototype._getFilterCallbacks = function (column) {
            var filterParams = this._adaptTableFiltersService.getSelectFilterParams(column);
            return filterParams.callbacks;
        };
        return AdaptTableFiltersComponent;
    }());
    AdaptTableFiltersComponent.ɵfac = function AdaptTableFiltersComponent_Factory(t) { return new (t || AdaptTableFiltersComponent)(i0__namespace.ɵɵdirectiveInject(AdaptTableComponent), i0__namespace.ɵɵdirectiveInject(AdaptTableFiltersService)); };
    AdaptTableFiltersComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: AdaptTableFiltersComponent, selectors: [["adapt-table-filters"]], inputs: { columns: "columns", index: "index", texts: "texts" }, decls: 4, vars: 2, consts: [[4, "ngIf"], [3, "columns", "index", "texts", 4, "ngIf"], ["class", "adapt-table-filters", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "adapt-table-filters"], [4, "ngIf", "ngIfElse"], ["noFilterTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "ngSwitch"], [3, "adaptRadarDisableEventSending", "ngModel", "placeholder", "label", "initialAlign", "searchButton", "size", "ngModelChange", 4, "ngSwitchCase"], [3, "settings", "texts", "options", "multiple", "optionFormatter", "value", "selectModelChange", "popupOpenChange", "filterValueChange", 4, "ngSwitchCase"], [3, "adaptRadarDisableEventSending", "ngModel", "placeholder", "label", "initialAlign", "searchButton", "size", "ngModelChange"], [3, "settings", "texts", "options", "multiple", "optionFormatter", "value", "selectModelChange", "popupOpenChange", "filterValueChange"], [3, "columns", "index", "texts"]], template: function AdaptTableFiltersComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, AdaptTableFiltersComponent_ng_container_0_Template, 4, 2, "ng-container", 0);
                i0__namespace.ɵɵtext(1, "\n\n");
                i0__namespace.ɵɵtemplate(2, AdaptTableFiltersComponent_adapt_table_merged_filters_2_Template, 2, 3, "adapt-table-merged-filters", 1);
                i0__namespace.ɵɵtext(3, "\n");
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngIf", ctx.columns.length < 2);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.columns.length >= 2);
            }
        }, directives: [i2__namespace$1.NgIf, i2__namespace$1.NgForOf, i2__namespace$1.NgTemplateOutlet, i2__namespace$1.NgSwitch, i2__namespace$1.NgSwitchCase, i1__namespace.AdaptRxSearchComponent, i5__namespace.NgControlStatus, i5__namespace.NgModel, AdaptSelectMigrationComponent, AdaptTableMergedFiltersComponent], encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptTableFiltersComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'adapt-table-filters',
                        templateUrl: './adapt-table-filters.html',
                    }]
            }], function () { return [{ type: AdaptTableComponent }, { type: AdaptTableFiltersService }]; }, { columns: [{
                    type: i0.Input
                }], index: [{
                    type: i0.Input
                }], texts: [{
                    type: i0.Input
                }] });
    })();

    var AdaptTableToolbarItemDirective = /** @class */ (function () {
        function AdaptTableToolbarItemDirective(_elRef, _renderer, _changeDetectorRef) {
            this._elRef = _elRef;
            this._renderer = _renderer;
            this._changeDetectorRef = _changeDetectorRef;
            this.recalculateWidth = this._initItem.bind(this);
            this.itemContext = {
                hidden: false,
                collapsed: false
            };
            this.itemAppearanceChange = new rxjs.Subject();
            this._fixOnToolbar = false;
            this._removeFromToolbar = false;
        }
        Object.defineProperty(AdaptTableToolbarItemDirective.prototype, "fixOnToolbar", {
            get: function () {
                return this._fixOnToolbar;
            },
            set: function (value) {
                if (Boolean(value) !== this._fixOnToolbar) {
                    this._fixOnToolbar = Boolean(value);
                    this.itemAppearanceChange.next();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptTableToolbarItemDirective.prototype, "collapse", {
            get: function () {
                return this.itemContext.collapsed;
            },
            set: function (value) {
                if (Boolean(value) !== this.itemContext.collapsed) {
                    this.itemContext.collapsed = Boolean(value);
                    i1.SafeCdr.detectChanges(this._changeDetectorRef);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptTableToolbarItemDirective.prototype, "hideToPopup", {
            get: function () {
                return this.itemContext.hidden;
            },
            set: function (value) {
                if (Boolean(value) !== this.itemContext.hidden) {
                    this.itemContext.hidden = Boolean(value);
                    this._checkAppearance();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptTableToolbarItemDirective.prototype, "removeFromToolbar", {
            get: function () {
                return this._removeFromToolbar;
            },
            set: function (value) {
                if (Boolean(value) !== this._removeFromToolbar) {
                    this._removeFromToolbar = Boolean(value);
                    this.itemAppearanceChange.next();
                }
            },
            enumerable: false,
            configurable: true
        });
        AdaptTableToolbarItemDirective.prototype._initItem = function () {
            this.hideToPopup = false;
            this.collapse = false;
            this._renderer.addClass(this._elRef.nativeElement, 'position-absolute');
            this.width = Math.ceil(this._elRef.nativeElement.offsetWidth);
            this.collapse = true;
            this.collapsedWidth = Math.ceil(this._elRef.nativeElement.offsetWidth);
            this._renderer.removeClass(this._elRef.nativeElement, 'position-absolute');
        };
        AdaptTableToolbarItemDirective.prototype._checkAppearance = function () {
            if (this.itemContext.hidden) {
                this._renderer.addClass(this._elRef.nativeElement, 'adapt-table-toolbar-item_hidden');
            }
            else {
                this._renderer.removeClass(this._elRef.nativeElement, 'adapt-table-toolbar-item_hidden');
            }
            i1.SafeCdr.detectChanges(this._changeDetectorRef);
        };
        return AdaptTableToolbarItemDirective;
    }());
    AdaptTableToolbarItemDirective.ɵfac = function AdaptTableToolbarItemDirective_Factory(t) { return new (t || AdaptTableToolbarItemDirective)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef), i0__namespace.ɵɵdirectiveInject(i0__namespace.Renderer2), i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef)); };
    AdaptTableToolbarItemDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: AdaptTableToolbarItemDirective, selectors: [["", "adaptToolbarItem", ""]], inputs: { adaptToolbarItem: "adaptToolbarItem", fixOnToolbar: "fixOnToolbar", collapse: "collapse", hideToPopup: "hideToPopup", removeFromToolbar: "removeFromToolbar" }, outputs: { itemAppearanceChange: "itemAppearanceChange" }, exportAs: ["adaptToolbarItem"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptTableToolbarItemDirective, [{
                type: i0.Directive,
                args: [{
                        selector: '[adaptToolbarItem]',
                        exportAs: 'adaptToolbarItem'
                    }]
            }], function () { return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.Renderer2 }, { type: i0__namespace.ChangeDetectorRef }]; }, { adaptToolbarItem: [{
                    type: i0.Input
                }], fixOnToolbar: [{
                    type: i0.Input
                }], collapse: [{
                    type: i0.Input
                }], hideToPopup: [{
                    type: i0.Input
                }], removeFromToolbar: [{
                    type: i0.Input
                }], itemAppearanceChange: [{
                    type: i0.Output
                }] });
    })();

    var SortByPipe = /** @class */ (function () {
        function SortByPipe() {
        }
        SortByPipe.prototype.transform = function (items, comparator, sortType, sortOrder) {
            if (sortOrder === void 0) { sortOrder = 'ASC'; }
            if (lodashEs.isNil(items)) {
                return items;
            }
            else {
                var itemsCopy = __spreadArray([], __read(items));
                if (lodashEs.isString(comparator)) {
                    switch (sortType) {
                        case 'string':
                            itemsCopy.sort(function (a, b) {
                                // undefined and null values goes to bottom\top
                                if (lodashEs.isNil(a[comparator])) {
                                    return sortOrder === 'DESC' ? -1 : 1;
                                }
                                else if (lodashEs.isNil(b[comparator])) {
                                    return sortOrder === 'DESC' ? 1 : -1;
                                }
                                return sortOrder === 'DESC'
                                    ? b[comparator].localeCompare(a[comparator])
                                    : a[comparator].localeCompare(b[comparator]);
                            });
                            break;
                        case 'number':
                            itemsCopy.sort(function (a, b) {
                                // undefined and null values goes to bottom\top
                                if (lodashEs.isNil(a[comparator])) {
                                    return sortOrder === 'DESC' ? -1 : 1;
                                }
                                else if (lodashEs.isNil(b[comparator])) {
                                    return sortOrder === 'DESC' ? 1 : -1;
                                }
                                return sortOrder === 'DESC'
                                    ? b[comparator] - a[comparator]
                                    : a[comparator] - b[comparator];
                            });
                            break;
                        case 'boolean':
                            itemsCopy.sort(function (a, b) {
                                // undefined and null values goes to bottom\top
                                if (lodashEs.isNil(a[comparator])) {
                                    return sortOrder === 'DESC' ? -1 : 1;
                                }
                                else if (lodashEs.isNil(b[comparator])) {
                                    return sortOrder === 'DESC' ? 1 : -1;
                                }
                                return sortOrder === 'DESC'
                                    ? lodashEs.toNumber(!!a[comparator]) - lodashEs.toNumber(!!b[comparator])
                                    : lodashEs.toNumber(!!b[comparator]) - lodashEs.toNumber(!!a[comparator]);
                            });
                            break;
                        default:
                            itemsCopy.sort(function (a, b) {
                                if (lodashEs.isNil(a[comparator])) {
                                    return sortOrder === 'DESC' ? -1 : 1;
                                }
                                else if (lodashEs.isNil(b[comparator])) {
                                    return sortOrder === 'DESC' ? 1 : -1;
                                }
                                else {
                                    if (lodashEs.toString(a[comparator]) < lodashEs.toString(b[comparator])) {
                                        return sortOrder === 'DESC' ? 1 : -1;
                                    }
                                    if (lodashEs.toString(a[comparator]) > lodashEs.toString(b[comparator])) {
                                        return sortOrder === 'DESC' ? -1 : 1;
                                    }
                                }
                                return 0;
                            });
                    }
                }
                else {
                    itemsCopy.sort(comparator);
                }
                return itemsCopy;
            }
        };
        return SortByPipe;
    }());
    SortByPipe.ɵfac = function SortByPipe_Factory(t) { return new (t || SortByPipe)(); };
    SortByPipe.ɵpipe = /*@__PURE__*/ i0__namespace.ɵɵdefinePipe({ name: "sortBy", type: SortByPipe, pure: true });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(SortByPipe, [{
                type: i0.Pipe,
                args: [{
                        name: 'sortBy'
                    }]
            }], null, null);
    })();

    var _c0$9 = ["filterInput"];
    var _c1$6 = ["adaptRxSearchComponent"];
    var _c2$5 = ["toolbarContainerEl"];
    var _c3$2 = ["toolbarSectionsSeparatorEl"];
    var _c4$1 = ["toolbarContentSeparatorEl"];
    var _c5$1 = ["toolbarControlsEl"];
    var _c6$1 = ["adaptListKeyManagerItem"];
    var _c7$1 = function (a0) { return { $implicit: a0 }; };
    function AdaptTableToolbarComponent_ng_container_8_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0, 37);
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext();
            var _r27 = i0__namespace.ɵɵreference(86);
            var _r1 = i0__namespace.ɵɵreference(6);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r27)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, _r1.itemContext));
        }
    }
    function AdaptTableToolbarComponent_ng_container_14_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0, 37);
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext();
            var _r29 = i0__namespace.ɵɵreference(89);
            var _r3 = i0__namespace.ɵɵreference(12);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r29)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, _r3.itemContext));
        }
    }
    function AdaptTableToolbarComponent_div_17_ng_container_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0, 37);
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext();
            var _r47 = i0__namespace.ɵɵreference(1);
            i0__namespace.ɵɵnextContext();
            var _r31 = i0__namespace.ɵɵreference(92);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r31)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, _r47.itemContext));
        }
    }
    function AdaptTableToolbarComponent_div_17_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 38, 39);
            i0__namespace.ɵɵtext(2, "\n      ");
            i0__namespace.ɵɵtemplate(3, AdaptTableToolbarComponent_div_17_ng_container_3_Template, 1, 4, "ng-container", 5);
            i0__namespace.ɵɵtext(4, "\n    ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var _r47 = i0__namespace.ɵɵreference(1);
            var ctx_r5 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("adaptToolbarItem", ctx_r5.TOOLBAR_ITEMS_BY_PRIORITY.SELECTION_LIMIT);
            i0__namespace.ɵɵattribute("data-testid", ctx_r5.testID + "_limit");
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", !(_r47.hideToPopup || _r47.removeFromToolbar));
        }
    }
    function AdaptTableToolbarComponent_ng_container_22_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0, 37);
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext();
            var _r33 = i0__namespace.ɵɵreference(95);
            var _r6 = i0__namespace.ɵɵreference(20);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r33)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, _r6.itemContext));
        }
    }
    function AdaptTableToolbarComponent_ng_container_28_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0, 37);
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext();
            var _r35 = i0__namespace.ɵɵreference(98);
            var _r8 = i0__namespace.ɵɵreference(26);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r35)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, _r8.itemContext));
        }
    }
    function AdaptTableToolbarComponent_ng_container_34_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0, 37);
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext();
            var _r37 = i0__namespace.ɵɵreference(101);
            var _r10 = i0__namespace.ɵɵreference(32);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r37)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, _r10.itemContext));
        }
    }
    function AdaptTableToolbarComponent_ng_container_43_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0, 37);
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext();
            var _r39 = i0__namespace.ɵɵreference(104);
            var _r13 = i0__namespace.ɵɵreference(41);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r39)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, _r13.itemContext));
        }
    }
    function AdaptTableToolbarComponent_ng_container_49_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0, 37);
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext();
            var _r25 = i0__namespace.ɵɵreference(83);
            var _r15 = i0__namespace.ɵɵreference(47);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r25)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, _r15.itemContext));
        }
    }
    function AdaptTableToolbarComponent_ng_container_55_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0, 37);
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext();
            var _r41 = i0__namespace.ɵɵreference(107);
            var _r17 = i0__namespace.ɵɵreference(53);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r41)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, _r17.itemContext));
        }
    }
    function AdaptTableToolbarComponent_ng_container_61_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0, 37);
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext();
            var _r43 = i0__namespace.ɵɵreference(110);
            var _r19 = i0__namespace.ɵɵreference(59);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r43)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, _r19.itemContext));
        }
    }
    function AdaptTableToolbarComponent_span_73_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "span", 40);
        }
    }
    function AdaptTableToolbarComponent_ng_template_76_div_1_div_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 45);
            i0__namespace.ɵɵtext(1, "\n            ");
            i0__namespace.ɵɵelementContainer(2, 37);
            i0__namespace.ɵɵtext(3, "\n          ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext(3);
            var _r29 = i0__namespace.ɵɵreference(89);
            var _r3 = i0__namespace.ɵɵreference(12);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r29)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, _r3.itemContext));
        }
    }
    function AdaptTableToolbarComponent_ng_template_76_div_1_ng_container_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n            ");
            i0__namespace.ɵɵelementContainer(2, 37);
            i0__namespace.ɵɵtext(3, "\n          ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext(3);
            var _r27 = i0__namespace.ɵɵreference(86);
            var _r1 = i0__namespace.ɵɵreference(6);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r27)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, _r1.itemContext));
        }
    }
    function AdaptTableToolbarComponent_ng_template_76_div_1_ng_container_6_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n            ");
            i0__namespace.ɵɵelementContainer(2, 37);
            i0__namespace.ɵɵtext(3, "\n          ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext(3);
            var _r33 = i0__namespace.ɵɵreference(95);
            var _r6 = i0__namespace.ɵɵreference(20);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r33)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, _r6.itemContext));
        }
    }
    function AdaptTableToolbarComponent_ng_template_76_div_1_ng_container_8_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n            ");
            i0__namespace.ɵɵelementContainer(2, 37);
            i0__namespace.ɵɵtext(3, "\n          ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext(3);
            var _r43 = i0__namespace.ɵɵreference(110);
            var _r19 = i0__namespace.ɵɵreference(59);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r43)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, _r19.itemContext));
        }
    }
    function AdaptTableToolbarComponent_ng_template_76_div_1_ng_container_10_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n            ");
            i0__namespace.ɵɵelementContainer(2, 37);
            i0__namespace.ɵɵtext(3, "\n          ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext(3);
            var _r39 = i0__namespace.ɵɵreference(104);
            var _r13 = i0__namespace.ɵɵreference(41);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r39)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, _r13.itemContext));
        }
    }
    function AdaptTableToolbarComponent_ng_template_76_div_1_ng_container_12_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n            ");
            i0__namespace.ɵɵelementContainer(2, 37);
            i0__namespace.ɵɵtext(3, "\n          ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext(3);
            var _r25 = i0__namespace.ɵɵreference(83);
            var _r15 = i0__namespace.ɵɵreference(47);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r25)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, _r15.itemContext));
        }
    }
    function AdaptTableToolbarComponent_ng_template_76_div_1_ng_container_14_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n            ");
            i0__namespace.ɵɵelementContainer(2, 37);
            i0__namespace.ɵɵtext(3, "\n          ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext(3);
            var _r37 = i0__namespace.ɵɵreference(101);
            var _r10 = i0__namespace.ɵɵreference(32);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r37)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, _r10.itemContext));
        }
    }
    function AdaptTableToolbarComponent_ng_template_76_div_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 42);
            i0__namespace.ɵɵtext(1, "\n          ");
            i0__namespace.ɵɵtemplate(2, AdaptTableToolbarComponent_ng_template_76_div_1_div_2_Template, 4, 4, "div", 43);
            i0__namespace.ɵɵtext(3, "\n\n          ");
            i0__namespace.ɵɵtemplate(4, AdaptTableToolbarComponent_ng_template_76_div_1_ng_container_4_Template, 4, 4, "ng-container", 44);
            i0__namespace.ɵɵtext(5, "\n\n          ");
            i0__namespace.ɵɵtemplate(6, AdaptTableToolbarComponent_ng_template_76_div_1_ng_container_6_Template, 4, 4, "ng-container", 44);
            i0__namespace.ɵɵtext(7, "\n\n          ");
            i0__namespace.ɵɵtemplate(8, AdaptTableToolbarComponent_ng_template_76_div_1_ng_container_8_Template, 4, 4, "ng-container", 44);
            i0__namespace.ɵɵtext(9, "\n\n          ");
            i0__namespace.ɵɵtemplate(10, AdaptTableToolbarComponent_ng_template_76_div_1_ng_container_10_Template, 4, 4, "ng-container", 44);
            i0__namespace.ɵɵtext(11, "\n\n          ");
            i0__namespace.ɵɵtemplate(12, AdaptTableToolbarComponent_ng_template_76_div_1_ng_container_12_Template, 4, 4, "ng-container", 44);
            i0__namespace.ɵɵtext(13, "\n\n          ");
            i0__namespace.ɵɵtemplate(14, AdaptTableToolbarComponent_ng_template_76_div_1_ng_container_14_Template, 4, 4, "ng-container", 44);
            i0__namespace.ɵɵtext(15, "\n        ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r49 = i0__namespace.ɵɵnextContext(2);
            var _r3 = i0__namespace.ɵɵreference(12);
            var _r1 = i0__namespace.ɵɵreference(6);
            var _r6 = i0__namespace.ɵɵreference(20);
            var _r19 = i0__namespace.ɵɵreference(59);
            var _r13 = i0__namespace.ɵɵreference(41);
            var _r15 = i0__namespace.ɵɵreference(47);
            var _r10 = i0__namespace.ɵɵreference(32);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r49.config.counter && _r3.hideToPopup);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r49.config.refreshButton && _r1.hideToPopup);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r49.config.filter && _r6.hideToPopup);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r49.config.visibleColumnsMenu && _r19.hideToPopup);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r49.config.rightCustomSection && _r13.hideToPopup);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", (ctx_r49.config.export == null ? null : ctx_r49.config.export.exportTypes == null ? null : ctx_r49.config.export.exportTypes.length) && _r15.hideToPopup);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r49.config.leftCustomSection && _r10.hideToPopup);
        }
    }
    function AdaptTableToolbarComponent_ng_template_76_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n        ");
            i0__namespace.ɵɵtemplate(1, AdaptTableToolbarComponent_ng_template_76_div_1_Template, 16, 7, "div", 41);
            i0__namespace.ɵɵtext(2, "\n      ");
        }
        if (rf & 2) {
            var ctx_r24 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r24.hasHiddenItems);
        }
    }
    function AdaptTableToolbarComponent_ng_template_82_span_8_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "span");
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r59 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(ctx_r59.texts.export);
        }
    }
    function AdaptTableToolbarComponent_ng_template_82_ng_template_11_ng_template_8_Template(rf, ctx) { }
    function AdaptTableToolbarComponent_ng_template_82_ng_template_11_ng_container_11_ng_template_9_Template(rf, ctx) { }
    var _c8$1 = function (a0) { return { exportSelected: a0 }; };
    function AdaptTableToolbarComponent_ng_template_82_ng_template_11_ng_container_11_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n          ");
            i0__namespace.ɵɵelement(2, "div", 54);
            i0__namespace.ɵɵtext(3, "\n          ");
            i0__namespace.ɵɵelementStart(4, "div", 52);
            i0__namespace.ɵɵtext(5, "\n            ");
            i0__namespace.ɵɵelementStart(6, "p", 53);
            i0__namespace.ɵɵtext(7);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(8, "\n            ");
            i0__namespace.ɵɵtemplate(9, AdaptTableToolbarComponent_ng_template_82_ng_template_11_ng_container_11_ng_template_9_Template, 0, 0, "ng-template", 37);
            i0__namespace.ɵɵtext(10, "\n          ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(11, "\n        ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext(2);
            var _r61 = i0__namespace.ɵɵreference(15);
            var ctx_r64 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(7);
            i0__namespace.ɵɵtextInterpolate(ctx_r64.texts.exportSelected);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r61)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(5, _c7$1, i0__namespace.ɵɵpureFunction1(3, _c8$1, ctx_r64.config.export.showExportForSelected)));
        }
    }
    var _c9$1 = function () { return { exportSelected: false }; };
    function AdaptTableToolbarComponent_ng_template_82_ng_template_11_Template(rf, ctx) {
        if (rf & 1) {
            var _r67_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵtext(0, "\n      ");
            i0__namespace.ɵɵelementStart(1, "div", 51);
            i0__namespace.ɵɵlistener("keydown", function AdaptTableToolbarComponent_ng_template_82_ng_template_11_Template_div_keydown_1_listener($event) { i0__namespace.ɵɵrestoreView(_r67_1); i0__namespace.ɵɵnextContext(); var _r58 = i0__namespace.ɵɵreference(2); var ctx_r66 = i0__namespace.ɵɵnextContext(); return ctx_r66.handleDropdownMenuKeydown($event, ctx_r66.TOOLBAR_ITEMS_BY_PRIORITY.EXPORT, _r58); });
            i0__namespace.ɵɵtext(2, "\n        ");
            i0__namespace.ɵɵelementStart(3, "div", 52);
            i0__namespace.ɵɵtext(4, "\n          ");
            i0__namespace.ɵɵelementStart(5, "p", 53);
            i0__namespace.ɵɵtext(6);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(7, "\n          ");
            i0__namespace.ɵɵtemplate(8, AdaptTableToolbarComponent_ng_template_82_ng_template_11_ng_template_8_Template, 0, 0, "ng-template", 37);
            i0__namespace.ɵɵtext(9, "\n        ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(10, "\n\n        ");
            i0__namespace.ɵɵtemplate(11, AdaptTableToolbarComponent_ng_template_82_ng_template_11_ng_container_11_Template, 12, 7, "ng-container", 44);
            i0__namespace.ɵɵtext(12, "\n      ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(13, "\n    ");
        }
        if (rf & 2) {
            var context_r57 = i0__namespace.ɵɵnextContext().$implicit;
            var _r61 = i0__namespace.ɵɵreference(15);
            var ctx_r60 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵattribute("aria-activedescendant", ctx_r60.isActiveDescendant(context_r57.id));
            i0__namespace.ɵɵadvance(5);
            i0__namespace.ɵɵtextInterpolate(ctx_r60.texts.exportEntireDocument);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r61)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(6, _c7$1, i0__namespace.ɵɵpureFunction0(5, _c9$1)));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", ctx_r60.showExportSelected);
        }
    }
    function AdaptTableToolbarComponent_ng_template_82_ng_template_14_ng_container_3_Template(rf, ctx) {
        if (rf & 1) {
            var _r74_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n        ");
            i0__namespace.ɵɵelementStart(2, "span");
            i0__namespace.ɵɵtext(3, "\n          ");
            i0__namespace.ɵɵelementStart(4, "button", 57, 58);
            i0__namespace.ɵɵlistener("keydown", function AdaptTableToolbarComponent_ng_template_82_ng_template_14_ng_container_3_Template_button_keydown_4_listener($event) { i0__namespace.ɵɵrestoreView(_r74_1); i0__namespace.ɵɵnextContext(2); var _r58 = i0__namespace.ɵɵreference(2); var ctx_r73 = i0__namespace.ɵɵnextContext(); return ctx_r73.closeMenuOnKeydown($event, _r58); })("click", function AdaptTableToolbarComponent_ng_template_82_ng_template_14_ng_container_3_Template_button_click_4_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r74_1); var exportItem_r71 = restoredCtx.$implicit; var context_r69 = i0__namespace.ɵɵnextContext().$implicit; var ctx_r75 = i0__namespace.ɵɵnextContext(2); return ctx_r75.exportAs({ type: ctx_r75.exportType[exportItem_r71.type], selectionOnly: context_r69.exportSelected }); });
            i0__namespace.ɵɵtext(6, "\n            ");
            i0__namespace.ɵɵelement(7, "span");
            i0__namespace.ɵɵtext(8, "\n            ");
            i0__namespace.ɵɵelementStart(9, "span");
            i0__namespace.ɵɵtext(10);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(11, "\n          ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(12, "\n        ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(13, "\n      ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var exportItem_r71 = ctx.$implicit;
            i0__namespace.ɵɵadvance(7);
            i0__namespace.ɵɵclassMapInterpolate1("toolbar-export-type-icon d-icon-file_arrow_", exportItem_r71.type.toLowerCase(), "");
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate(exportItem_r71.type);
        }
    }
    function AdaptTableToolbarComponent_ng_template_82_ng_template_14_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n    ");
            i0__namespace.ɵɵelementStart(1, "div", 55);
            i0__namespace.ɵɵtext(2, "\n      ");
            i0__namespace.ɵɵtemplate(3, AdaptTableToolbarComponent_ng_template_82_ng_template_14_ng_container_3_Template, 14, 4, "ng-container", 56);
            i0__namespace.ɵɵtext(4, "\n    ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(5, "\n  ");
        }
        if (rf & 2) {
            var ctx_r62 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r62.config.export.exportTypes);
        }
    }
    var _c10$1 = function () { return ["left-top", "auto"]; };
    var _c11$1 = function () { return ["bottom-left", "auto"]; };
    function AdaptTableToolbarComponent_ng_template_82_Template(rf, ctx) {
        if (rf & 1) {
            var _r78_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵtext(0, "\n\n  ");
            i0__namespace.ɵɵelementStart(1, "div", 46, 47);
            i0__namespace.ɵɵlistener("popupAnimationDone", function AdaptTableToolbarComponent_ng_template_82_Template_div_popupAnimationDone_1_listener() { i0__namespace.ɵɵrestoreView(_r78_1); var _r58 = i0__namespace.ɵɵreference(2); var ctx_r77 = i0__namespace.ɵɵnextContext(); return ctx_r77.popupAnimationDone(_r58, ctx_r77.TOOLBAR_ITEMS_BY_PRIORITY.EXPORT); });
            i0__namespace.ɵɵtext(3, "\n    ");
            i0__namespace.ɵɵelementStart(4, "button", 48);
            i0__namespace.ɵɵlistener("keydown", function AdaptTableToolbarComponent_ng_template_82_Template_button_keydown_4_listener($event) { i0__namespace.ɵɵrestoreView(_r78_1); var _r58 = i0__namespace.ɵɵreference(2); var ctx_r79 = i0__namespace.ɵɵnextContext(); return ctx_r79.anchorKeydownHandler($event, _r58); })("click", function AdaptTableToolbarComponent_ng_template_82_Template_button_click_4_listener($event) { i0__namespace.ɵɵrestoreView(_r78_1); var _r58 = i0__namespace.ɵɵreference(2); return _r58.toggle($event); });
            i0__namespace.ɵɵtext(5, "\n      ");
            i0__namespace.ɵɵelement(6, "span", 49);
            i0__namespace.ɵɵtext(7, "\n      ");
            i0__namespace.ɵɵtemplate(8, AdaptTableToolbarComponent_ng_template_82_span_8_Template, 2, 1, "span", 44);
            i0__namespace.ɵɵtext(9, "\n    ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(10, "\n\n    ");
            i0__namespace.ɵɵtemplate(11, AdaptTableToolbarComponent_ng_template_82_ng_template_11_Template, 14, 8, "ng-template", 25);
            i0__namespace.ɵɵtext(12, "\n  ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(13, "\n\n  ");
            i0__namespace.ɵɵtemplate(14, AdaptTableToolbarComponent_ng_template_82_ng_template_14_Template, 6, 1, "ng-template", null, 50, i0__namespace.ɵɵtemplateRefExtractor);
            i0__namespace.ɵɵtext(16, "\n");
        }
        if (rf & 2) {
            var context_r57 = ctx.$implicit;
            var ctx_r26 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true)("autoClose", "outside")("placement", context_r57.hidden ? i0__namespace.ɵɵpureFunction0(10, _c10$1) : i0__namespace.ɵɵpureFunction0(11, _c11$1))("appendToBody", true)("restoreFocusAfterClose", ctx_r26.shouldRestoreFocus)("focusNextElementAfterClose", ctx_r26.shouldFocusNext);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngClass", context_r57.hidden ? "list-group-item list-group-item-action caret-right" : "btn btn-link d-icon-right-triangle_down");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵclassProp("mr-1", !context_r57.collapsed || context_r57.hidden);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", context_r57.hidden || !context_r57.collapsed);
        }
    }
    function AdaptTableToolbarComponent_ng_template_85_Template(rf, ctx) {
        if (rf & 1) {
            var _r83_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵtext(0, "\n  ");
            i0__namespace.ɵɵelementStart(1, "div", 59);
            i0__namespace.ɵɵtext(2, "\n    ");
            i0__namespace.ɵɵelementStart(3, "button", 60);
            i0__namespace.ɵɵlistener("click", function AdaptTableToolbarComponent_ng_template_85_Template_button_click_3_listener($event) { i0__namespace.ɵɵrestoreView(_r83_1); var ctx_r82 = i0__namespace.ɵɵnextContext(); return ctx_r82.refreshButtonClick($event); });
            i0__namespace.ɵɵtext(4, "\n      ");
            i0__namespace.ɵɵnamespaceSVG();
            i0__namespace.ɵɵelementStart(5, "svg", 61);
            i0__namespace.ɵɵtext(6, "\n        ");
            i0__namespace.ɵɵelement(7, "path", 62);
            i0__namespace.ɵɵtext(8, "\n      ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(9, "\n      ");
            i0__namespace.ɵɵnamespaceHTML();
            i0__namespace.ɵɵelementStart(10, "span", 59);
            i0__namespace.ɵɵtext(11);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(12, "\n    ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(13, "\n  ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(14, "\n");
        }
        if (rf & 2) {
            var context_r81 = ctx.$implicit;
            var ctx_r28 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngClass", !context_r81.hidden ? "p-start-2" : "");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngClass", !context_r81.hidden ? "px-1" : "btn-block align-start list-group-item px-2");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵclassProp("animated", ctx_r28.table.isRefreshingRowData);
            i0__namespace.ɵɵadvance(5);
            i0__namespace.ɵɵproperty("ngClass", !context_r81.hidden ? "sr-only" : "ml-1");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(ctx_r28.texts.refresh);
        }
    }
    function AdaptTableToolbarComponent_ng_template_88_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n  ");
            i0__namespace.ɵɵelementContainer(1, 37);
            i0__namespace.ɵɵtext(2, "\n");
        }
        if (rf & 2) {
            var context_r84 = ctx.$implicit;
            var ctx_r30 = i0__namespace.ɵɵnextContext();
            var _r45 = i0__namespace.ɵɵreference(114);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r30.config.counterTemplate || _r45)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, context_r84));
        }
    }
    function AdaptTableToolbarComponent_ng_template_91_div_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div", 66);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r86 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("\n      ", ctx_r86.showSelectionLimitText(0), "\n    ");
        }
    }
    function AdaptTableToolbarComponent_ng_template_91_button_5_Template(rf, ctx) {
        if (rf & 1) {
            var _r90_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 67);
            i0__namespace.ɵɵlistener("click", function AdaptTableToolbarComponent_ng_template_91_button_5_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r90_1); var ctx_r89 = i0__namespace.ɵɵnextContext(2); return ctx_r89.showAllSelectedRows(); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r87 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("\n      ", ctx_r87.showSelectionLimitText(ctx_r87.table.getRowSelectionArray().length), "\n    ");
        }
    }
    function AdaptTableToolbarComponent_ng_template_91_button_7_Template(rf, ctx) {
        if (rf & 1) {
            var _r92_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 67);
            i0__namespace.ɵɵlistener("click", function AdaptTableToolbarComponent_ng_template_91_button_7_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r92_1); var ctx_r91 = i0__namespace.ɵɵnextContext(2); return ctx_r91.showAllRows(); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r88 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("\n      ", ctx_r88.texts.showAllSelected, "\n    ");
        }
    }
    function AdaptTableToolbarComponent_ng_template_91_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n  ");
            i0__namespace.ɵɵelementStart(1, "div", 63);
            i0__namespace.ɵɵtext(2, "\n    ");
            i0__namespace.ɵɵtemplate(3, AdaptTableToolbarComponent_ng_template_91_div_3_Template, 2, 1, "div", 64);
            i0__namespace.ɵɵtext(4, "\n    ");
            i0__namespace.ɵɵtemplate(5, AdaptTableToolbarComponent_ng_template_91_button_5_Template, 2, 1, "button", 65);
            i0__namespace.ɵɵtext(6, "\n    ");
            i0__namespace.ɵɵtemplate(7, AdaptTableToolbarComponent_ng_template_91_button_7_Template, 2, 1, "button", 65);
            i0__namespace.ɵɵtext(8, "\n  ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(9, "\n");
        }
        if (rf & 2) {
            var ctx_r32 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", !ctx_r32.table.getRowSelectionArray().length);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r32.table.getRowSelectionArray().length && !ctx_r32.onlySelectedRowsShown);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r32.onlySelectedRowsShown);
        }
    }
    function AdaptTableToolbarComponent_ng_template_94_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n  ");
            i0__namespace.ɵɵelementContainer(1, 37);
            i0__namespace.ɵɵtext(2, "\n");
        }
        if (rf & 2) {
            var context_r93 = ctx.$implicit;
            var ctx_r34 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r34.config.filterTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, context_r93));
        }
    }
    function AdaptTableToolbarComponent_ng_template_97_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n  ");
            i0__namespace.ɵɵelementContainer(1, 37);
            i0__namespace.ɵɵtext(2, "\n");
        }
        if (rf & 2) {
            var context_r94 = ctx.$implicit;
            var ctx_r36 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r36.config.filterResultsTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, context_r94));
        }
    }
    function AdaptTableToolbarComponent_ng_template_100_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n  ");
            i0__namespace.ɵɵelementContainer(1, 37);
            i0__namespace.ɵɵtext(2, "\n");
        }
        if (rf & 2) {
            var context_r95 = ctx.$implicit;
            var ctx_r38 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r38.config.leftCustomSectionTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, context_r95));
        }
    }
    function AdaptTableToolbarComponent_ng_template_103_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n  ");
            i0__namespace.ɵɵelementContainer(1, 37);
            i0__namespace.ɵɵtext(2, "\n");
        }
        if (rf & 2) {
            var context_r96 = ctx.$implicit;
            var ctx_r40 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r40.config.rightCustomSectionTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(2, _c7$1, context_r96));
        }
    }
    function AdaptTableToolbarComponent_ng_template_106_Template(rf, ctx) {
        if (rf & 1) {
            var _r100_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵtext(0, "\n  ");
            i0__namespace.ɵɵelementStart(1, "div", 68);
            i0__namespace.ɵɵtext(2, "\n\n    ");
            i0__namespace.ɵɵelementStart(3, "adapt-rx-search", 69, 70);
            i0__namespace.ɵɵlistener("ngModelChange", function AdaptTableToolbarComponent_ng_template_106_Template_adapt_rx_search_ngModelChange_3_listener($event) { i0__namespace.ɵɵrestoreView(_r100_1); var ctx_r99 = i0__namespace.ɵɵnextContext(); return ctx_r99.searchModel = $event; })("ngModelChange", function AdaptTableToolbarComponent_ng_template_106_Template_adapt_rx_search_ngModelChange_3_listener($event) { i0__namespace.ɵɵrestoreView(_r100_1); var ctx_r101 = i0__namespace.ɵɵnextContext(); return ctx_r101.table.setQuickFilter($event); });
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(5, "\n  ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(6, "\n");
        }
        if (rf & 2) {
            var ctx_r42 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵclassProp("adapt-table-search_bordered", ctx_r42.table.bordered);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true)("ngModel", ctx_r42.searchModel)("searchButton", ctx_r42.config.quickFilterTriggerable)("size", ctx_r42.table.bordered ? "default" : "sm")("placeholder", ctx_r42.texts.searchPlaceholder)("label", ctx_r42.texts.searchLabel);
        }
    }
    function AdaptTableToolbarComponent_ng_template_109_span_6_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "span", 72);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r104 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(ctx_r104.texts.visibleColumnsMenuLabel);
        }
    }
    function AdaptTableToolbarComponent_ng_template_109_ng_template_9_ng_template_5_div_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r112_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 76, 58);
            i0__namespace.ɵɵlistener("keydown", function AdaptTableToolbarComponent_ng_template_109_ng_template_9_ng_template_5_div_1_Template_div_keydown_0_listener($event) { i0__namespace.ɵɵrestoreView(_r112_1); i0__namespace.ɵɵnextContext(3); var _r103 = i0__namespace.ɵɵreference(2); var ctx_r111 = i0__namespace.ɵɵnextContext(); return ctx_r111.closeMenuOnKeydown($event, _r103); });
            i0__namespace.ɵɵtext(2, "\n            ");
            i0__namespace.ɵɵelementStart(3, "div");
            i0__namespace.ɵɵtext(4, "\n              ");
            i0__namespace.ɵɵelementStart(5, "adapt-rx-checkbox", 77);
            i0__namespace.ɵɵlistener("ngModelChange", function AdaptTableToolbarComponent_ng_template_109_ng_template_9_ng_template_5_div_1_Template_adapt_rx_checkbox_ngModelChange_5_listener($event) { var restoredCtx = i0__namespace.ɵɵrestoreView(_r112_1); var col_r109 = restoredCtx.$implicit; var ctx_r113 = i0__namespace.ɵɵnextContext(4); return ctx_r113.changeColumnVisibility($event, col_r109); });
            i0__namespace.ɵɵtext(6, "\n              ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(7, "\n            ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(8, "\n          ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var col_r109 = ctx.$implicit;
            var _r110 = i0__namespace.ɵɵreference(1);
            var ctx_r108 = i0__namespace.ɵɵnextContext(4);
            i0__namespace.ɵɵclassProp("ui-state-disabled", ctx_r108.isLastVisibleColumn(col_r109))("text-active", ctx_r108.isActiveDescendant(_r110) && !ctx_r108.isLastVisibleColumn(col_r109));
            i0__namespace.ɵɵproperty("label", col_r109.header);
            i0__namespace.ɵɵadvance(5);
            i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true)("label", col_r109.header)("disabled", ctx_r108.isLastVisibleColumn(col_r109))("ngModel", ctx_r108.table.isColumnVisible(col_r109));
        }
    }
    function AdaptTableToolbarComponent_ng_template_109_ng_template_9_ng_template_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n          ");
            i0__namespace.ɵɵtemplate(1, AdaptTableToolbarComponent_ng_template_109_ng_template_9_ng_template_5_div_1_Template, 9, 9, "div", 75);
            i0__namespace.ɵɵpipe(2, "sortBy");
            i0__namespace.ɵɵtext(3, "\n        ");
        }
        if (rf & 2) {
            var ctx_r107 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngForOf", i0__namespace.ɵɵpipeBind2(2, 2, ctx_r107.table.columns, ctx_r107.visibleColumnsFirst))("ngForTrackBy", ctx_r107.table.trackByForColumns);
        }
    }
    function AdaptTableToolbarComponent_ng_template_109_ng_template_9_Template(rf, ctx) {
        if (rf & 1) {
            var _r115_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵtext(0, "\n      ");
            i0__namespace.ɵɵelementStart(1, "div", 73);
            i0__namespace.ɵɵlistener("keydown", function AdaptTableToolbarComponent_ng_template_109_ng_template_9_Template_div_keydown_1_listener($event) { i0__namespace.ɵɵrestoreView(_r115_1); i0__namespace.ɵɵnextContext(); var _r103 = i0__namespace.ɵɵreference(2); var ctx_r114 = i0__namespace.ɵɵnextContext(); return ctx_r114.handleDropdownMenuKeydown($event, ctx_r114.TOOLBAR_ITEMS_BY_PRIORITY.VISIBLE_COLUMNS, _r103); });
            i0__namespace.ɵɵtext(2, "\n        ");
            i0__namespace.ɵɵelementContainer(3, 37);
            i0__namespace.ɵɵtext(4, "\n\n        ");
            i0__namespace.ɵɵtemplate(5, AdaptTableToolbarComponent_ng_template_109_ng_template_9_ng_template_5_Template, 4, 5, "ng-template", null, 74, i0__namespace.ɵɵtemplateRefExtractor);
            i0__namespace.ɵɵtext(7, "\n      ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(8, "\n    ");
        }
        if (rf & 2) {
            var _r106 = i0__namespace.ɵɵreference(6);
            var context_r102 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r105 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵattribute("aria-activedescendant", ctx_r105.isActiveDescendant(context_r102.id));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r105.config.visibleColumnsMenuTemplate || _r106)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(3, _c7$1, context_r102));
        }
    }
    var _c12 = function () { return ["bottom-right", "auto"]; };
    function AdaptTableToolbarComponent_ng_template_109_Template(rf, ctx) {
        if (rf & 1) {
            var _r118_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵtext(0, "\n  ");
            i0__namespace.ɵɵelementStart(1, "div", 46, 47);
            i0__namespace.ɵɵlistener("popupAnimationDone", function AdaptTableToolbarComponent_ng_template_109_Template_div_popupAnimationDone_1_listener() { i0__namespace.ɵɵrestoreView(_r118_1); var _r103 = i0__namespace.ɵɵreference(2); var ctx_r117 = i0__namespace.ɵɵnextContext(); return ctx_r117.popupAnimationDone(_r103, ctx_r117.TOOLBAR_ITEMS_BY_PRIORITY.VISIBLE_COLUMNS); });
            i0__namespace.ɵɵtext(3, "\n    ");
            i0__namespace.ɵɵelementStart(4, "button", 48);
            i0__namespace.ɵɵlistener("keydown", function AdaptTableToolbarComponent_ng_template_109_Template_button_keydown_4_listener($event) { i0__namespace.ɵɵrestoreView(_r118_1); var _r103 = i0__namespace.ɵɵreference(2); var ctx_r119 = i0__namespace.ɵɵnextContext(); return ctx_r119.anchorKeydownHandler($event, _r103); })("click", function AdaptTableToolbarComponent_ng_template_109_Template_button_click_4_listener($event) { i0__namespace.ɵɵrestoreView(_r118_1); var _r103 = i0__namespace.ɵɵreference(2); return _r103.toggle($event); });
            i0__namespace.ɵɵtext(5, "\n      ");
            i0__namespace.ɵɵtemplate(6, AdaptTableToolbarComponent_ng_template_109_span_6_Template, 2, 1, "span", 71);
            i0__namespace.ɵɵtext(7, "\n    ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(8, "\n\n    ");
            i0__namespace.ɵɵtemplate(9, AdaptTableToolbarComponent_ng_template_109_ng_template_9_Template, 9, 5, "ng-template", 25);
            i0__namespace.ɵɵtext(10, "\n  ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(11, "\n");
        }
        if (rf & 2) {
            var context_r102 = ctx.$implicit;
            var ctx_r44 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true)("autoClose", "outside")("placement", context_r102.hidden ? i0__namespace.ɵɵpureFunction0(8, _c10$1) : i0__namespace.ɵɵpureFunction0(9, _c12))("appendToBody", true)("restoreFocusAfterClose", ctx_r44.shouldRestoreFocus)("focusNextElementAfterClose", ctx_r44.shouldFocusNext);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngClass", ctx_r44.getClassForChangeVisibilityButton(context_r102.hidden));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", context_r102.hidden || !context_r102.collapsed);
        }
    }
    function AdaptTableToolbarComponent_ng_template_113_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n  ");
            i0__namespace.ɵɵelementStart(1, "div", 78);
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(3, "\n");
        }
        if (rf & 2) {
            var context_r121 = ctx.$implicit;
            var ctx_r46 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngClass", !context_r121.hidden ? "p-start-3 p-end-1" : "");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(ctx_r46.getToolbarText());
        }
    }
    var nextUniqueId = 0;
    var AdaptTableToolbarComponent = /** @class */ (function () {
        function AdaptTableToolbarComponent(table, focusMonitorService, resizeService, dir, _ngZone, _eventManager, _cdr) {
            this.table = table;
            this.focusMonitorService = focusMonitorService;
            this.resizeService = resizeService;
            this.dir = dir;
            this._ngZone = _ngZone;
            this._eventManager = _eventManager;
            this._cdr = _cdr;
            this.HIDDEN_ITEMS_BTN_WIDTH = 35;
            this.TOOLBAR_ITEMS_HIDE_TOLERANCE = 10;
            this.TOOLBAR_ITEMS_BY_PRIORITY = exports.ToolbarItemsByPriority;
            this.defaultTexts = {};
            this.hasHiddenItems = false;
            this.searchFullSize = false;
            this.filterFocus = false;
            this.openHiddenItemsMenu = false;
            this.onlySelectedRowsShown = false;
            this.isRTL = false;
            this.firstRecalculationComplete = false;
            this.testID = "adapt-toolbar-" + ++nextUniqueId;
            this.searchModel = '';
            this.exportType = exports.ExportType;
            this.config = {};
            this.toolbarItemsByHidePriority = [];
            this._destroyed$ = new rxjs.ReplaySubject(1);
            this._shouldRestoreFocus = true;
            this._shouldFocusNext = true;
        }
        AdaptTableToolbarComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.isRTL = this.dir.value === 'rtl';
            var tableService = this.table.getTableService();
            tableService.selectionSource$
                .pipe(operators.takeUntil(this._destroyed$))
                .subscribe(function (selection) {
                var _a;
                if (_this.onlySelectedRowsShown) {
                    if (_this.table.getRowSelectionArray().length) {
                        _this.updateSelectedRowsDisplaying(false);
                    }
                    else {
                        _this.showAllRows(false);
                    }
                }
                if ((_a = _this.config.export) === null || _a === void 0 ? void 0 : _a.showExportForSelected) {
                    _this.showExportSelected = !!(selection === null || selection === void 0 ? void 0 : selection.length);
                }
            });
            this.table.onFilter.asObservable()
                .pipe(operators.takeUntil(this._destroyed$))
                .subscribe(function () {
                if (_this.onlySelectedRowsShown) {
                    _this.showAllRows(true);
                }
            });
            if (this.config.testID) {
                this.testID = this.config.testID + (++nextUniqueId);
            }
        };
        AdaptTableToolbarComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.toolbarItemsByHidePriority = this.getToolbarItemsByHidePriority();
            rxjs.merge.apply(void 0, __spreadArray([], __read(this.toolbarItemsByHidePriority.map(function (item) { return item.itemAppearanceChange; })))).pipe(operators.takeUntil(this._destroyed$), 
            // switchMap to take the last emitted value
            operators.switchMap(function () { return _this._ngZone.onStable.pipe(operators.takeUntil(_this._destroyed$), operators.take(1)); }))
                .subscribe(function () {
                _this.updateToolbarItems();
            });
            var toolbarUIChange$ = new rxjs.Subject();
            this.resizeService
                .addResizeEventListener(this.toolbarContainerEl.nativeElement, toolbarUIChange$.next.bind(toolbarUIChange$));
            this.resizeService
                .addResizeEventListener(this.toolbarSectionsSeparatorEl.nativeElement, toolbarUIChange$.next.bind(toolbarUIChange$));
            toolbarUIChange$
                .pipe(operators.throttleTime(100, rxjs.asyncScheduler, { trailing: true }), operators.map(function (element) { return element.offsetWidth; }), operators.distinctUntilChanged(), operators.takeUntil(this._destroyed$))
                .subscribe(function () {
                _this.updateToolbarItems();
                if (!_this.firstRecalculationComplete) {
                    _this._ngZone.run(function () {
                        _this.firstRecalculationComplete = true;
                        i1.SafeCdr.markForCheck(_this._cdr);
                    });
                }
            });
        };
        AdaptTableToolbarComponent.prototype.ngOnDestroy = function () {
            this.resizeService.removeResizeEventListener(this.toolbarContainerEl.nativeElement);
            this.resizeService.removeResizeEventListener(this.toolbarSectionsSeparatorEl.nativeElement);
            this._destroyed$.next(true);
            this._destroyed$.complete();
        };
        AdaptTableToolbarComponent.prototype.updateToolbarItems = function () {
            var _this = this;
            // Because this code can be invoked outside NgZone, use ngZone.run to be sure that changeDetection fire.
            // https://github.com/angular/angular/blob/5452889aa61a9963f443302d93d8af6c4131aa10/packages/core/src/application_ref.ts#L403
            this._ngZone.run(function () {
                _this.recalculateToolbarItemsVisibility();
            });
        };
        /**
         * This method returns not the value of the search model but the value of the search input itself
         * The difference is in case when the model wasn't applied("quickFilterTriggerable"=true and button was not clicked)
         * and you need to take the value of the search and use it somewhere
         * https://github.bmc.com/bmc-ux/adapt-angular/issues/4504
         */
        AdaptTableToolbarComponent.prototype.getQuickFilterInputValue = function () {
            var _a, _b, _c;
            var value = null;
            if (this.filterInput) {
                value = this.filterInput.nativeElement.value;
            }
            else if (this.adaptRxSearchComponent) {
                value = (_c = (_b = (_a = this.adaptRxSearchComponent) === null || _a === void 0 ? void 0 : _a.inputRef) === null || _b === void 0 ? void 0 : _b.nativeElement) === null || _c === void 0 ? void 0 : _c.value;
            }
            return value;
        };
        AdaptTableToolbarComponent.prototype.setQuickFilterValue = function (value) {
            this.searchModel = value;
            this.table.setQuickFilter(value);
        };
        AdaptTableToolbarComponent.prototype.changeColumnVisibility = function (event, column) {
            column.hidden = !event;
            this.table.columnsVisibilityChange.emit([{ column: column, isHidden: !event }]);
        };
        AdaptTableToolbarComponent.prototype.isLastVisibleColumn = function (currentColumn) {
            var visibleColumns = this.table.getVisibleColumns();
            return visibleColumns.length === 1 && visibleColumns[0].field === currentColumn.field;
        };
        AdaptTableToolbarComponent.prototype.visibleColumnsFirst = function (a, b) {
            return i1.toNumber(a.hidden) - i1.toNumber(b.hidden);
        };
        AdaptTableToolbarComponent.prototype.getToolbarText = function () {
            var table = this.table;
            if (this.getCurrentRowsCount() === 0) {
                return this.texts.noRecordsText;
            }
            if (table.paginator) {
                if (table.totalRecords) {
                    return this.getFromToOfText();
                }
                else {
                    return this.getFromToText();
                }
            }
            else {
                if (table.enableInfiniteScrolling) {
                    if (table.totalRecords && this.getCurrentRowsCount() < table.totalRecords) {
                        return this.getOutOfRowsShownText();
                    }
                    else {
                        return this.getCurrentRowsCountText();
                    }
                }
                else {
                    if (table.totalRecords) {
                        return this.getTotalCountText();
                    }
                    else {
                        return this.getFromToText();
                    }
                }
            }
        };
        AdaptTableToolbarComponent.prototype.getFromToOfText = function () {
            return this.texts.fromToOfTextTemplate
                .replace('{fromRecords}', this.getFromRecordsCount().toString())
                .replace('{toRecords}', this.getToRecordsCountOrZero().toString())
                .replace('{totalRecords}', this.getTotalRecordsOrZero().toString());
        };
        AdaptTableToolbarComponent.prototype.getFromToText = function () {
            return this.texts.fromToTextTemplate
                .replace('{fromRecords}', this.getFromRecordsCount().toString())
                .replace('{toRecords}', this.getToRecordsCountOrZero().toString());
        };
        AdaptTableToolbarComponent.prototype.getOutOfRowsShownText = function () {
            return this.texts.outOfShownTextTemplate
                .replace('{currentRecordsCount}', this.getCurrentRowsCount().toString())
                .replace('{totalRecords}', this.getTotalRecordsOrZero().toString());
        };
        AdaptTableToolbarComponent.prototype.getTotalCountText = function () {
            var txt = this.getTotalRecords() === 1 ? this.texts.totalCountTextTemplate : this.texts.totalCountTextTemplatePlural;
            return txt.replace('{totalRecords}', this.getTotalRecordsOrZero().toString());
        };
        AdaptTableToolbarComponent.prototype.getCurrentRowsCountText = function () {
            var txt = this.getTotalRecords() === 1 ? this.texts.recordsCountShownTextTemplate : this.texts.recordsCountShownTextTemplatePlural;
            return txt.replace('{currentRecordsCount}', this.getCurrentRowsCount().toString());
        };
        AdaptTableToolbarComponent.prototype.checkFullSizeSearchMode = function (event) {
            if (this.toolbarContainerEl.nativeElement.offsetWidth <= 400) {
                this.searchFullSize = this.filterFocus || (event && event.target.classList.contains('adapt-table-search_close-btn'));
            }
            else {
                this.searchFullSize = false;
            }
        };
        AdaptTableToolbarComponent.prototype.getFromRecordsCount = function () {
            return this.table.first + 1;
        };
        AdaptTableToolbarComponent.prototype.getCurrentRowsCount = function () {
            var dt = this.table;
            return (dt.filteredValue ? dt.filteredValue : dt.value || []).length;
        };
        AdaptTableToolbarComponent.prototype.getToRecordsCount = function () {
            var dt = this.table;
            var to = Number(dt.rows) + dt.first;
            var total = dt.totalRecords == null ? dt.value.length : dt.totalRecords;
            return to > total ? total : to;
        };
        AdaptTableToolbarComponent.prototype.getToRecordsCountOrZero = function () {
            return this.getToRecordsCount() || 0;
        };
        AdaptTableToolbarComponent.prototype.showAllSelectedRows = function () {
            this.onlySelectedRowsShown = true;
            this.preservedFilteredValue = this.table.filteredValue;
            this.preservedTotalRecords = this.table.totalRecords;
            this.preservedFirst = this.table.first;
            this.updateSelectedRowsDisplaying(true);
        };
        AdaptTableToolbarComponent.prototype.updateSelectedRowsDisplaying = function (goToFirstPage) {
            var selectedRows = this.table.getRowSelectionArray();
            if (goToFirstPage) {
                this.table.first = 0;
            }
            if (this.table.paginator) {
                this.table.totalRecords = selectedRows.length;
                this.table.getTableService().onTotalRecordsChange(selectedRows.length);
            }
            this.table.filteredValue = selectedRows;
            this.table.getTableService().onValueChange(selectedRows);
        };
        AdaptTableToolbarComponent.prototype.showAllRows = function (dueToFiltersChange) {
            if (dueToFiltersChange === void 0) { dueToFiltersChange = false; }
            this.onlySelectedRowsShown = false;
            if (dueToFiltersChange) {
                if (this.table.lazy) {
                    this.table.filteredValue = null;
                    this.table.totalRecords = this.preservedTotalRecords;
                    this.table.getTableService().onTotalRecordsChange(this.preservedTotalRecords);
                }
            }
            else {
                this.table.filteredValue = this.preservedFilteredValue;
                this.table.totalRecords = this.preservedTotalRecords;
                this.table.getTableService().onTotalRecordsChange(this.preservedTotalRecords);
                this.table.first = this.preservedFirst;
                this.table.firstChange.emit(this.preservedFirst);
            }
            this.table.getTableService().onValueChange(this.table.value);
            this.preservedFilteredValue = null;
            this.preservedTotalRecords = null;
            this.preservedFirst = null;
        };
        AdaptTableToolbarComponent.prototype.showSelectionLimitText = function (from) {
            return this.isRTL
                ? this.texts.selected + " " + this.table.selectionLimit + " / " + from
                : from + " / " + this.table.selectionLimit + " " + this.texts.selected;
        };
        AdaptTableToolbarComponent.prototype.getClassForChangeVisibilityButton = function (isHidden) {
            var isAllColumnsVisible = this.table.columns.length === this.table.getVisibleColumns().length;
            return (isHidden ? 'list-group-item list-group-item-action caret-right' : 'btn btn-link d-icon-right-triangle_down')
                + (isAllColumnsVisible ? ' d-icon-eye' : ' d-icon-eye_closed');
        };
        AdaptTableToolbarComponent.prototype.refreshButtonClick = function (event) {
            this.table.rowDataRefresh.emit(event);
            this.table.onTableRefresh();
        };
        AdaptTableToolbarComponent.prototype.popupAnimationDone = function (dropdown, toolbarItemType) {
            this.table.toolbarPopupAnimationDone.emit({ dropdown: dropdown, focusMonitorService: this.focusMonitorService });
            if (dropdown.isOpen()) {
                this.initFocusMonitor(dropdown, toolbarItemType);
            }
        };
        AdaptTableToolbarComponent.prototype.anchorKeydownHandler = function (event, dropdown) {
            if (i1.getEventKeyCode(event) === keycodes.DOWN_ARROW && !dropdown.isOpen()) {
                event.preventDefault();
                dropdown.open(event);
            }
        };
        AdaptTableToolbarComponent.prototype.handleDropdownMenuKeydown = function (event, toolbarItemType, dropdown) {
            this.connectKeydownWithFocusMonitor(toolbarItemType, event);
            this.closeMenuOnKeydown(event, dropdown);
        };
        AdaptTableToolbarComponent.prototype.closeMenuOnKeydown = function (event, dropdown) {
            if (i1.getEventKeyCode(event) === keycodes.TAB) {
                event.preventDefault();
                dropdown.close();
            }
        };
        Object.defineProperty(AdaptTableToolbarComponent.prototype, "shouldRestoreFocus", {
            get: function () {
                return this._shouldRestoreFocus;
            },
            set: function (value) {
                this._shouldRestoreFocus = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptTableToolbarComponent.prototype, "shouldFocusNext", {
            get: function () {
                return this._shouldFocusNext;
            },
            set: function (value) {
                this._shouldFocusNext = value;
            },
            enumerable: false,
            configurable: true
        });
        AdaptTableToolbarComponent.prototype.selectOption = function (optionToSelect) {
            if (optionToSelect.disabled) {
                return;
            }
            this.focusMonitorService.focusOnElement(this.focusMonitorService.keyManager.activeItemIndex);
        };
        AdaptTableToolbarComponent.prototype.isActiveDescendant = function (keyManagerItem) {
            return keyManagerItem === this.activeDropdownItem;
        };
        AdaptTableToolbarComponent.prototype.exportAs = function (event) {
            this.table.export.emit(event);
        };
        AdaptTableToolbarComponent.prototype.changeVisibility = function () {
            var _this = this;
            var colIndexInTable = this.table.columns.findIndex(function (col) { return col.header === _this.activeDropdownItem.getLabel(); });
            var col = this.table.columns[colIndexInTable];
            if (!this.isLastVisibleColumn(col)) {
                col.hidden = !col.hidden;
            }
        };
        AdaptTableToolbarComponent.prototype.getToolbarItemsByHidePriority = function () {
            return this.toolbarContentItems
                .toArray()
                .sort(function (a, b) { return a.adaptToolbarItem - b.adaptToolbarItem; });
        };
        AdaptTableToolbarComponent.prototype.recalculateToolbarItemsVisibility = function (shouldUpdateItemsWidth) {
            var _this = this;
            if (shouldUpdateItemsWidth === void 0) { shouldUpdateItemsWidth = true; }
            this.checkFullSizeSearchMode();
            if (shouldUpdateItemsWidth) {
                this.toolbarItemsByHidePriority.forEach(function (item) {
                    if (!(_this.openHiddenItemsMenu && item.hideToPopup)) {
                        item.recalculateWidth();
                    }
                });
            }
            var itemsContainerWidth = this.toolbarContainerEl.nativeElement.offsetWidth - this.HIDDEN_ITEMS_BTN_WIDTH;
            var hasHiddenItems = false;
            var itemsWidth = this.TOOLBAR_ITEMS_HIDE_TOLERANCE;
            var fixedItems = this.toolbarItemsByHidePriority.filter(function (toolbarItem) { return toolbarItem.fixOnToolbar; });
            if (fixedItems.length) {
                fixedItems.forEach(function (fixedItem) {
                    itemsWidth += fixedItem.width;
                });
            }
            // Apply collapsed width
            this.toolbarItemsByHidePriority.forEach(function (item) {
                if (item.removeFromToolbar) {
                    item.hideToPopup = true;
                }
                else {
                    if (!item.fixOnToolbar) {
                        var nextItemsWidth = itemsWidth + item.collapsedWidth;
                        if (nextItemsWidth > itemsContainerWidth) {
                            hasHiddenItems = true;
                            item.hideToPopup = true;
                        }
                        else {
                            item.hideToPopup = false;
                        }
                        itemsWidth = nextItemsWidth;
                    }
                }
            });
            // Apply full width
            if (!hasHiddenItems) {
                this.toolbarItemsByHidePriority
                    .slice()
                    .reverse()
                    .forEach(function (item) {
                    if (!item.fixOnToolbar) {
                        if (!item.hideToPopup) {
                            var nextItemsWidth = itemsWidth + (item.width - item.collapsedWidth);
                            item.collapse = nextItemsWidth > itemsContainerWidth;
                            itemsWidth = nextItemsWidth;
                        }
                    }
                });
            }
            this.hasHiddenItems = hasHiddenItems;
            i1.SafeCdr.markForCheck(this._cdr);
        };
        AdaptTableToolbarComponent.prototype.getTotalRecords = function () {
            return this.table.totalRecords;
        };
        AdaptTableToolbarComponent.prototype.getTotalRecordsOrZero = function () {
            return this.getTotalRecords() || 0;
        };
        AdaptTableToolbarComponent.prototype.initFocusMonitor = function (dropdown, toolbarItemType) {
            // Do not initialize focusMonitorService in case user want to use custom template
            if (toolbarItemType === exports.ToolbarItemsByPriority.VISIBLE_COLUMNS && this.config.visibleColumnsMenuTemplate) {
                return;
            }
            this.focusMonitorService.init(this.toolbarDropdownItems);
            this.focusMonitorService.keyManager.withWrap(false);
            if (dropdown.eventInvokedFrom === 'keyboard') {
                this.focusMonitorService.focusOnFirstElement();
            }
            this.activeDropdownItem = this.focusMonitorService.keyManager.activeItem;
        };
        AdaptTableToolbarComponent.prototype.connectKeydownWithFocusMonitor = function (toolbarItemType, event) {
            // Do not initialize focusMonitorService in case user want to use custom template
            if (toolbarItemType === exports.ToolbarItemsByPriority.VISIBLE_COLUMNS && this.config.visibleColumnsMenuTemplate) {
                return;
            }
            if (i1.getEventKeyCode(event) === keycodes.SPACE || i1.getEventKeyCode(event) === keycodes.ENTER) {
                if (toolbarItemType === exports.ToolbarItemsByPriority.VISIBLE_COLUMNS) {
                    event.preventDefault();
                    this.changeVisibility();
                }
                this.selectOption(this.focusMonitorService.keyManager.activeItem);
                return;
            }
            this.focusMonitorService.onKeyDown(event);
            this.activeDropdownItem = this.focusMonitorService.keyManager.activeItem;
        };
        return AdaptTableToolbarComponent;
    }());
    AdaptTableToolbarComponent.ɵfac = function AdaptTableToolbarComponent_Factory(t) { return new (t || AdaptTableToolbarComponent)(i0__namespace.ɵɵdirectiveInject(AdaptTableComponent), i0__namespace.ɵɵdirectiveInject(i1__namespace.AdaptFocusMonitorService), i0__namespace.ɵɵdirectiveInject(i1__namespace.ResizeService), i0__namespace.ɵɵdirectiveInject(i3__namespace.Directionality), i0__namespace.ɵɵdirectiveInject(i0__namespace.NgZone), i0__namespace.ɵɵdirectiveInject(i4__namespace.EventManager), i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef)); };
    AdaptTableToolbarComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: AdaptTableToolbarComponent, selectors: [["adapt-table-toolbar"]], viewQuery: function AdaptTableToolbarComponent_Query(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵviewQuery(_c0$9, 5);
                i0__namespace.ɵɵviewQuery(_c1$6, 5);
                i0__namespace.ɵɵviewQuery(_c2$5, 5);
                i0__namespace.ɵɵviewQuery(_c3$2, 5);
                i0__namespace.ɵɵviewQuery(_c4$1, 5);
                i0__namespace.ɵɵviewQuery(_c5$1, 5);
                i0__namespace.ɵɵviewQuery(AdaptTableToolbarItemDirective, 5);
                i0__namespace.ɵɵviewQuery(_c6$1, 5);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.filterInput = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.adaptRxSearchComponent = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.toolbarContainerEl = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.toolbarSectionsSeparatorEl = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.toolbarContentSeparatorEl = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.toolbarControlsEl = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.toolbarContentItems = _t);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.toolbarDropdownItems = _t);
            }
        }, inputs: { config: "config", texts: "texts" }, features: [i0__namespace.ɵɵProvidersFeature([i1.AdaptFocusMonitorService])], decls: 116, vars: 65, consts: [[1, "adapt-table-toolbar"], ["toolbarContainerEl", ""], [1, "adapt-table-toolbar-items"], [1, "adapt-table-toolbar-item", 3, "adaptToolbarItem", "removeFromToolbar"], ["refreshSection", "adaptToolbarItem"], [3, "ngTemplateOutlet", "ngTemplateOutletContext", 4, "ngIf"], ["counterSection", "adaptToolbarItem"], ["class", "adapt-table-toolbar-item", 3, "adaptToolbarItem", 4, "ngIf"], ["filterSection", "adaptToolbarItem"], ["filterResultsSection", "adaptToolbarItem"], [1, "adapt-table-toolbar-item", 3, "adaptToolbarItem", "fixOnToolbar", "removeFromToolbar"], ["leftCustomSection", "adaptToolbarItem"], [1, "flex-grow-1", "flex-shrink-1"], ["toolbarSectionsSeparatorEl", ""], ["rightCustomSection", "adaptToolbarItem"], ["exportToSomeFormat", "adaptToolbarItem"], [1, "adapt-table-toolbar-item", "adapt-table-search-toolbar-container", "justify-content-end", 3, "adaptToolbarItem", "fixOnToolbar", "removeFromToolbar"], ["searchSection", "adaptToolbarItem"], ["visibleColumnsMenuSection", "adaptToolbarItem"], [1, "adapt-table-toolbar-hidden-items-dropdown", "dropdown", "show"], ["toolbarControlsEl", ""], ["adaptDropdown", "", 1, "h-100", 3, "adaptRadarDisableEventSending", "autoClose", "appendToBody", "restoreFocusAfterClose", "focusNextElementAfterClose"], ["hiddenItemsDD", "adaptDropdown"], ["type", "button", "adaptDropdownAnchor", "", 1, "btn", "btn-link", "adapt-table-toolbar-hidden-items-dropdown-btn", 3, "tabIndex", "keydown", "click"], ["class", "d-icon-ellipsis", 4, "ngIf"], ["adaptDropdownMenuTemplate", ""], ["exportToSomeFormatTemplate", ""], ["refreshTemplate", ""], ["counterTemplate", ""], ["selectionLimitTemplate", ""], ["filterTemplate", ""], ["filterResultsTemplate", ""], ["leftCustomSectionTemplate", ""], ["rightCustomSectionTemplate", ""], ["searchTemplate", ""], ["visibleColumnsTemplate", ""], ["counterDefaultTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "adapt-table-toolbar-item", 3, "adaptToolbarItem"], ["limitSection", "adaptToolbarItem"], [1, "d-icon-ellipsis"], ["class", "dropdown-menu list-group p-0", 4, "ngIf"], [1, "dropdown-menu", "list-group", "p-0"], ["class", "list-group-item p-2", 4, "ngIf"], [4, "ngIf"], [1, "list-group-item", "p-2"], ["adaptDropdown", "", 3, "adaptRadarDisableEventSending", "autoClose", "placement", "appendToBody", "restoreFocusAfterClose", "focusNextElementAfterClose", "popupAnimationDone"], ["ddVisibleCols", "adaptDropdown"], ["type", "button", "adaptDropdownAnchor", "", 3, "ngClass", "keydown", "click"], [1, "d-icon-file_arrow_up"], ["exportTypesTemplate", ""], ["tabindex", "0", 1, "dropdown-menu", 3, "keydown"], [1, "toolbar-export-section-wrapper"], [1, "toolbar-export-menu-header"], [1, "dropdown-divider"], [1, "toolbar-export-menu-items"], [4, "ngFor", "ngForOf"], ["type", "button", "adaptListKeyManagerItem", "", 1, "toolbar-export-menu-item", "dropdown-item", 3, "keydown", "click"], ["adaptListKeyManagerItem", "adaptListKeyManagerItem"], [3, "ngClass"], ["type", "button", 1, "btn", "btn-link", 3, "ngClass", "click"], ["xmlns", "http://www.w3.org/2000/svg", "viewBox", "0 0 20 20", "width", "20", "height", "20", "fill", "currentColor", 1, "infinite", "spin-360", "transition-out", "xtra-slow", "animated"], ["d", "M19.7,10l-3.3,3.9L13,10h2.5c0-3.1-2.5-5.6-5.6-5.6S4.4,6.9,4.4,10s2.5,5.6,5.6,5.6v1.7c-4,0-7.2-3.2-7.2-7.2\n\t                 S6,2.8,10,2.8S17.2,6,17.2,10H19.7z"], [1, "d-flex"], ["class", "adapt-table-toolbar__selection-counter", 4, "ngIf"], ["type", "button", "class", "btn btn-link", 3, "click", 4, "ngIf"], [1, "adapt-table-toolbar__selection-counter"], ["type", "button", 1, "btn", "btn-link", 3, "click"], [1, "adapt-table-search"], [3, "adaptRadarDisableEventSending", "ngModel", "searchButton", "size", "placeholder", "label", "ngModelChange"], ["adaptRxSearchComponent", ""], ["class", "px-1", 4, "ngIf"], [1, "px-1"], ["tabindex", "0", 1, "dropdown-menu", "visible-columns-dropdown", 3, "keydown"], ["visibleColumnsDefaultTemplate", ""], ["class", "dropdown-item  adapt-table-toolbar-dropdown-item", "adaptListKeyManagerItem", "", "tabindex", "0", 3, "label", "ui-state-disabled", "text-active", "keydown", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["adaptListKeyManagerItem", "", "tabindex", "0", 1, "dropdown-item", "adapt-table-toolbar-dropdown-item", 3, "label", "keydown"], [1, "adapt-table-toolbar__column-visibility-control", 3, "adaptRadarDisableEventSending", "label", "disabled", "ngModel", "ngModelChange"], ["role", "status", 3, "ngClass"]], template: function AdaptTableToolbarComponent_Template(rf, ctx) {
            if (rf & 1) {
                var _r122_1 = i0__namespace.ɵɵgetCurrentView();
                i0__namespace.ɵɵelementStart(0, "div", 0, 1);
                i0__namespace.ɵɵtext(2, "\n  ");
                i0__namespace.ɵɵelementStart(3, "div", 2);
                i0__namespace.ɵɵtext(4, "\n    ");
                i0__namespace.ɵɵelementStart(5, "div", 3, 4);
                i0__namespace.ɵɵtext(7, "\n      ");
                i0__namespace.ɵɵtemplate(8, AdaptTableToolbarComponent_ng_container_8_Template, 1, 4, "ng-container", 5);
                i0__namespace.ɵɵtext(9, "\n    ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(10, "\n\n    ");
                i0__namespace.ɵɵelementStart(11, "div", 3, 6);
                i0__namespace.ɵɵtext(13, "\n      ");
                i0__namespace.ɵɵtemplate(14, AdaptTableToolbarComponent_ng_container_14_Template, 1, 4, "ng-container", 5);
                i0__namespace.ɵɵtext(15, "\n    ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(16, "\n\n    ");
                i0__namespace.ɵɵtemplate(17, AdaptTableToolbarComponent_div_17_Template, 5, 3, "div", 7);
                i0__namespace.ɵɵtext(18, "\n\n    ");
                i0__namespace.ɵɵelementStart(19, "div", 3, 8);
                i0__namespace.ɵɵtext(21, "\n      ");
                i0__namespace.ɵɵtemplate(22, AdaptTableToolbarComponent_ng_container_22_Template, 1, 4, "ng-container", 5);
                i0__namespace.ɵɵtext(23, "\n    ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(24, "\n\n    ");
                i0__namespace.ɵɵelementStart(25, "div", 3, 9);
                i0__namespace.ɵɵtext(27, "\n      ");
                i0__namespace.ɵɵtemplate(28, AdaptTableToolbarComponent_ng_container_28_Template, 1, 4, "ng-container", 5);
                i0__namespace.ɵɵtext(29, "\n    ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(30, "\n\n    ");
                i0__namespace.ɵɵelementStart(31, "div", 10, 11);
                i0__namespace.ɵɵtext(33, "\n      ");
                i0__namespace.ɵɵtemplate(34, AdaptTableToolbarComponent_ng_container_34_Template, 1, 4, "ng-container", 5);
                i0__namespace.ɵɵtext(35, "\n    ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(36, "\n\n    ");
                i0__namespace.ɵɵelement(37, "div", 12, 13);
                i0__namespace.ɵɵtext(39, "\n\n    ");
                i0__namespace.ɵɵelementStart(40, "div", 10, 14);
                i0__namespace.ɵɵtext(42, "\n      ");
                i0__namespace.ɵɵtemplate(43, AdaptTableToolbarComponent_ng_container_43_Template, 1, 4, "ng-container", 5);
                i0__namespace.ɵɵtext(44, "\n    ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(45, "\n\n    ");
                i0__namespace.ɵɵelementStart(46, "div", 10, 15);
                i0__namespace.ɵɵtext(48, "\n      ");
                i0__namespace.ɵɵtemplate(49, AdaptTableToolbarComponent_ng_container_49_Template, 1, 4, "ng-container", 5);
                i0__namespace.ɵɵtext(50, "\n    ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(51, "\n\n    ");
                i0__namespace.ɵɵelementStart(52, "div", 16, 17);
                i0__namespace.ɵɵtext(54, "\n      ");
                i0__namespace.ɵɵtemplate(55, AdaptTableToolbarComponent_ng_container_55_Template, 1, 4, "ng-container", 5);
                i0__namespace.ɵɵtext(56, "\n    ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(57, "\n\n    ");
                i0__namespace.ɵɵelementStart(58, "div", 3, 18);
                i0__namespace.ɵɵtext(60, "\n      ");
                i0__namespace.ɵɵtemplate(61, AdaptTableToolbarComponent_ng_container_61_Template, 1, 4, "ng-container", 5);
                i0__namespace.ɵɵtext(62, "\n    ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(63, "\n\n  ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(64, "\n\n  ");
                i0__namespace.ɵɵelementStart(65, "div", 19, 20);
                i0__namespace.ɵɵtext(67, "\n    ");
                i0__namespace.ɵɵelementStart(68, "div", 21, 22);
                i0__namespace.ɵɵtext(70, "\n      ");
                i0__namespace.ɵɵelementStart(71, "button", 23);
                i0__namespace.ɵɵlistener("keydown", function AdaptTableToolbarComponent_Template_button_keydown_71_listener($event) { i0__namespace.ɵɵrestoreView(_r122_1); var _r22 = i0__namespace.ɵɵreference(69); return ctx.anchorKeydownHandler($event, _r22); })("click", function AdaptTableToolbarComponent_Template_button_click_71_listener($event) { i0__namespace.ɵɵrestoreView(_r122_1); var _r22 = i0__namespace.ɵɵreference(69); return _r22.toggle($event); });
                i0__namespace.ɵɵtext(72, "\n        ");
                i0__namespace.ɵɵtemplate(73, AdaptTableToolbarComponent_span_73_Template, 1, 0, "span", 24);
                i0__namespace.ɵɵtext(74, "\n      ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(75, "\n      ");
                i0__namespace.ɵɵtemplate(76, AdaptTableToolbarComponent_ng_template_76_Template, 3, 1, "ng-template", 25);
                i0__namespace.ɵɵtext(77, "\n    ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(78, "\n  ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(79, "\n");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(80, "\n\n");
                i0__namespace.ɵɵtext(81, "\n\n");
                i0__namespace.ɵɵtemplate(82, AdaptTableToolbarComponent_ng_template_82_Template, 17, 12, "ng-template", null, 26, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(84, "\n\n");
                i0__namespace.ɵɵtemplate(85, AdaptTableToolbarComponent_ng_template_85_Template, 15, 6, "ng-template", null, 27, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(87, "\n\n");
                i0__namespace.ɵɵtemplate(88, AdaptTableToolbarComponent_ng_template_88_Template, 3, 4, "ng-template", null, 28, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(90, "\n\n");
                i0__namespace.ɵɵtemplate(91, AdaptTableToolbarComponent_ng_template_91_Template, 10, 3, "ng-template", null, 29, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(93, "\n\n");
                i0__namespace.ɵɵtemplate(94, AdaptTableToolbarComponent_ng_template_94_Template, 3, 4, "ng-template", null, 30, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(96, "\n\n");
                i0__namespace.ɵɵtemplate(97, AdaptTableToolbarComponent_ng_template_97_Template, 3, 4, "ng-template", null, 31, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(99, "\n\n");
                i0__namespace.ɵɵtemplate(100, AdaptTableToolbarComponent_ng_template_100_Template, 3, 4, "ng-template", null, 32, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(102, "\n\n");
                i0__namespace.ɵɵtemplate(103, AdaptTableToolbarComponent_ng_template_103_Template, 3, 4, "ng-template", null, 33, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(105, "\n\n");
                i0__namespace.ɵɵtemplate(106, AdaptTableToolbarComponent_ng_template_106_Template, 7, 8, "ng-template", null, 34, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(108, "\n\n");
                i0__namespace.ɵɵtemplate(109, AdaptTableToolbarComponent_ng_template_109_Template, 12, 10, "ng-template", null, 35, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(111, "\n\n");
                i0__namespace.ɵɵtext(112, "\n\n");
                i0__namespace.ɵɵtemplate(113, AdaptTableToolbarComponent_ng_template_113_Template, 4, 2, "ng-template", null, 36, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(115, "\n");
            }
            if (rf & 2) {
                var _r1 = i0__namespace.ɵɵreference(6);
                var _r3 = i0__namespace.ɵɵreference(12);
                var _r6 = i0__namespace.ɵɵreference(20);
                var _r8 = i0__namespace.ɵɵreference(26);
                var _r10 = i0__namespace.ɵɵreference(32);
                var _r13 = i0__namespace.ɵɵreference(41);
                var _r15 = i0__namespace.ɵɵreference(47);
                var _r17 = i0__namespace.ɵɵreference(53);
                var _r19 = i0__namespace.ɵɵreference(59);
                i0__namespace.ɵɵclassProp("adapt-table-toolbar_bordered", ctx.table.bordered)("adapt-table-toolbar_loading", !ctx.firstRecalculationComplete);
                i0__namespace.ɵɵadvance(5);
                i0__namespace.ɵɵproperty("adaptToolbarItem", ctx.TOOLBAR_ITEMS_BY_PRIORITY.REFRESH)("removeFromToolbar", !ctx.config.refreshButton);
                i0__namespace.ɵɵattribute("data-testid", ctx.testID + "_refresh");
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", !(_r1.hideToPopup || _r1.removeFromToolbar));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("adaptToolbarItem", ctx.TOOLBAR_ITEMS_BY_PRIORITY.COUNTER)("removeFromToolbar", !ctx.config.counter);
                i0__namespace.ɵɵattribute("data-testid", ctx.testID + "_counter");
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", !(_r3.hideToPopup || _r3.removeFromToolbar));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", ctx.table.hasSelectionLimit && ctx.config.selectionLimit);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("adaptToolbarItem", ctx.TOOLBAR_ITEMS_BY_PRIORITY.FILTER)("removeFromToolbar", !ctx.config.filter);
                i0__namespace.ɵɵattribute("data-testid", ctx.testID + "_filter");
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", !(_r6.hideToPopup || _r6.removeFromToolbar));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("adaptToolbarItem", ctx.TOOLBAR_ITEMS_BY_PRIORITY.FILTER_RESULTS)("removeFromToolbar", !ctx.config.filterResults);
                i0__namespace.ɵɵattribute("data-testid", ctx.testID + "_filter_results");
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", !(_r8.hideToPopup || _r8.removeFromToolbar));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵclassProp("flex-fill", ctx.config.leftCustomSectionFixed);
                i0__namespace.ɵɵproperty("adaptToolbarItem", ctx.TOOLBAR_ITEMS_BY_PRIORITY.LEFT_CUSTOM)("fixOnToolbar", ctx.config.leftCustomSectionFixed)("removeFromToolbar", !ctx.config.leftCustomSection);
                i0__namespace.ɵɵattribute("data-testid", ctx.testID + "_left_custom");
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", !(_r10.hideToPopup || _r10.removeFromToolbar));
                i0__namespace.ɵɵadvance(6);
                i0__namespace.ɵɵproperty("adaptToolbarItem", ctx.TOOLBAR_ITEMS_BY_PRIORITY.RIGHT_CUSTOM)("fixOnToolbar", ctx.config.rightCustomSectionFixed)("removeFromToolbar", !ctx.config.rightCustomSection);
                i0__namespace.ɵɵattribute("data-testid", ctx.testID + "_right_custom");
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", !(_r13.hideToPopup || _r13.removeFromToolbar));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("adaptToolbarItem", ctx.TOOLBAR_ITEMS_BY_PRIORITY.EXPORT)("fixOnToolbar", ctx.config.export == null ? null : ctx.config.export.exportSectionFixed)("removeFromToolbar", !(ctx.config.export == null ? null : ctx.config.export.exportTypes == null ? null : ctx.config.export.exportTypes.length));
                i0__namespace.ɵɵattribute("data-testid", ctx.testID + "_export");
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", !(_r15.hideToPopup || _r15.removeFromToolbar));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵclassProp("flex-fill", ctx.searchFullSize);
                i0__namespace.ɵɵproperty("adaptToolbarItem", ctx.TOOLBAR_ITEMS_BY_PRIORITY.SEARCH)("fixOnToolbar", true)("removeFromToolbar", !ctx.config.quickFilter);
                i0__namespace.ɵɵattribute("data-testid", ctx.testID + "_search");
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", !(_r17.hideToPopup || _r17.removeFromToolbar));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("adaptToolbarItem", ctx.TOOLBAR_ITEMS_BY_PRIORITY.VISIBLE_COLUMNS)("removeFromToolbar", !ctx.config.visibleColumnsMenu);
                i0__namespace.ɵɵattribute("data-testid", ctx.testID + "_visible_columns");
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", !(_r19.hideToPopup || _r19.removeFromToolbar));
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵstyleProp("max-width", ctx.HIDDEN_ITEMS_BTN_WIDTH, "px");
                i0__namespace.ɵɵattribute("data-testid", ctx.testID + "_hidden_buttons");
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true)("autoClose", "outside")("appendToBody", true)("restoreFocusAfterClose", ctx.shouldRestoreFocus)("focusNextElementAfterClose", ctx.shouldFocusNext);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵclassProp("p-0", !ctx.hasHiddenItems)("border-0", !ctx.hasHiddenItems)("px-2", ctx.hasHiddenItems);
                i0__namespace.ɵɵproperty("tabIndex", !ctx.hasHiddenItems ? -1 : 0);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.hasHiddenItems);
            }
        }, directives: [AdaptTableToolbarItemDirective, i2__namespace$1.NgIf, i1__namespace.AdaptDropdownDirective, i1__namespace.AdaptDropdownAnchorDirective, i1__namespace.AdaptDropdownMenuTemplateDirective, i2__namespace$1.NgTemplateOutlet, i2__namespace$1.NgClass, i2__namespace$1.NgForOf, i1__namespace.AdaptListKeyManagerItemDirective, i1__namespace.AdaptRxSearchComponent, i5__namespace.NgControlStatus, i5__namespace.NgModel, i1__namespace.AdaptRxCheckboxComponent], pipes: [SortByPipe], styles: [".adapt-table-toolbar[_ngcontent-%COMP%] {\n      z-index: 2;\n      overflow: hidden;\n    }\n\n    .adapt-table-toolbar-items[_ngcontent-%COMP%] {\n      flex: 1 1 auto;\n      display: flex;\n      overflow: hidden;\n      margin: 0 -3px;\n    }\n\n    .adapt-table-toolbar-hidden-items-dropdown[_ngcontent-%COMP%] {\n      flex: 0 0 auto;\n      text-align: center\n    }\n\n    .adapt-table-toolbar-hidden-items-dropdown-btn[_ngcontent-%COMP%] {\n      font-size: 16px;\n      padding: 0;\n      height: 100%;\n      width: 100%;\n    }\n\n    .adapt-table-toolbar-item[_ngcontent-%COMP%] {\n      overflow: hidden;\n      flex: 0 0 auto;\n      padding: 0 3px;\n    }\n\n    .adapt-table-toolbar-item_hidden[_ngcontent-%COMP%] {\n      position: absolute;\n      visibility: hidden;\n      opacity: 0;\n      z-index: -1;\n    }"] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptTableToolbarComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'adapt-table-toolbar',
                        templateUrl: './adapt-table-toolbar.html',
                        providers: [i1.AdaptFocusMonitorService],
                        styles: ["\n    .adapt-table-toolbar {\n      z-index: 2;\n      overflow: hidden;\n    }\n\n    .adapt-table-toolbar-items {\n      flex: 1 1 auto;\n      display: flex;\n      overflow: hidden;\n      margin: 0 -3px;\n    }\n\n    .adapt-table-toolbar-hidden-items-dropdown {\n      flex: 0 0 auto;\n      text-align: center\n    }\n\n    .adapt-table-toolbar-hidden-items-dropdown-btn {\n      font-size: 16px;\n      padding: 0;\n      height: 100%;\n      width: 100%;\n    }\n\n    .adapt-table-toolbar-item {\n      overflow: hidden;\n      flex: 0 0 auto;\n      padding: 0 3px;\n    }\n\n    .adapt-table-toolbar-item_hidden {\n      position: absolute;\n      visibility: hidden;\n      opacity: 0;\n      z-index: -1;\n    }\n  "]
                    }]
            }], function () { return [{ type: AdaptTableComponent }, { type: i1__namespace.AdaptFocusMonitorService }, { type: i1__namespace.ResizeService }, { type: i3__namespace.Directionality }, { type: i0__namespace.NgZone }, { type: i4__namespace.EventManager }, { type: i0__namespace.ChangeDetectorRef }]; }, { config: [{
                    type: i0.Input
                }], texts: [{
                    type: i0.Input
                }], filterInput: [{
                    type: i0.ViewChild,
                    args: ['filterInput']
                }], adaptRxSearchComponent: [{
                    type: i0.ViewChild,
                    args: ['adaptRxSearchComponent']
                }], toolbarContainerEl: [{
                    type: i0.ViewChild,
                    args: ['toolbarContainerEl']
                }], toolbarSectionsSeparatorEl: [{
                    type: i0.ViewChild,
                    args: ['toolbarSectionsSeparatorEl']
                }], toolbarContentSeparatorEl: [{
                    type: i0.ViewChild,
                    args: ['toolbarContentSeparatorEl']
                }], toolbarControlsEl: [{
                    type: i0.ViewChild,
                    args: ['toolbarControlsEl']
                }], toolbarContentItems: [{
                    type: i0.ViewChildren,
                    args: [AdaptTableToolbarItemDirective]
                }], toolbarDropdownItems: [{
                    type: i0.ViewChildren,
                    args: ['adaptListKeyManagerItem']
                }] });
    })();

    var _c0$8 = ["actionsDropdown"];
    function AdaptTableActionsComponent_div_0_button_8_span_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "span", 9);
        }
        if (rf & 2) {
            var action_r3 = i0__namespace.ɵɵnextContext().$implicit;
            i0__namespace.ɵɵproperty("ngClass", "at-action-icon " + action_r3.icon);
        }
    }
    function AdaptTableActionsComponent_div_0_button_8_Template(rf, ctx) {
        if (rf & 1) {
            var _r9_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 6, 7);
            i0__namespace.ɵɵlistener("click", function AdaptTableActionsComponent_div_0_button_8_Template_button_click_0_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r9_1); var action_r3 = restoredCtx.$implicit; var ctx_r8 = i0__namespace.ɵɵnextContext(2); return ctx_r8.onActionClick(action_r3); });
            i0__namespace.ɵɵtext(2, "\n      ");
            i0__namespace.ɵɵtemplate(3, AdaptTableActionsComponent_div_0_button_8_span_3_Template, 1, 1, "span", 8);
            i0__namespace.ɵɵtext(4);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var action_r3 = ctx.$implicit;
            var index_r4 = ctx.index;
            var _r5 = i0__namespace.ɵɵreference(1);
            var ctx_r2 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵclassProp("text-active", ctx_r2.isActiveDescendant(_r5));
            i0__namespace.ɵɵproperty("id", ctx_r2.actionsParams.rowIndex + "_" + index_r4)("item", action_r3)("adaptListKeyManagerItemDisabled", ctx_r2.isDisabledAction(action_r3))("disabled", ctx_r2.isDisabledAction(action_r3));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", action_r3.icon);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("", ctx_r2.getTitle(action_r3), "\n    ");
        }
    }
    function AdaptTableActionsComponent_div_0_Template(rf, ctx) {
        if (rf & 1) {
            var _r11_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 1, 2);
            i0__namespace.ɵɵlistener("openChange", function AdaptTableActionsComponent_div_0_Template_div_openChange_0_listener($event) { i0__namespace.ɵɵrestoreView(_r11_1); var ctx_r10 = i0__namespace.ɵɵnextContext(); return ctx_r10.handleOpenChange($event); });
            i0__namespace.ɵɵtext(2, "\n  ");
            i0__namespace.ɵɵelementStart(3, "button", 3);
            i0__namespace.ɵɵlistener("click", function AdaptTableActionsComponent_div_0_Template_button_click_3_listener($event) { i0__namespace.ɵɵrestoreView(_r11_1); var _r1 = i0__namespace.ɵɵreference(1); return _r1.toggle($event); })("keydown", function AdaptTableActionsComponent_div_0_Template_button_keydown_3_listener($event) { i0__namespace.ɵɵrestoreView(_r11_1); var ctx_r13 = i0__namespace.ɵɵnextContext(); return ctx_r13.keydownHandler($event); });
            i0__namespace.ɵɵtext(4);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(5, "\n  ");
            i0__namespace.ɵɵelementStart(6, "div", 4);
            i0__namespace.ɵɵlistener("keyManagerStateChange", function AdaptTableActionsComponent_div_0_Template_div_keyManagerStateChange_6_listener($event) { i0__namespace.ɵɵrestoreView(_r11_1); var ctx_r14 = i0__namespace.ɵɵnextContext(); return ctx_r14.keyManagerStateChange($event); });
            i0__namespace.ɵɵtext(7, "\n    ");
            i0__namespace.ɵɵtemplate(8, AdaptTableActionsComponent_div_0_button_8_Template, 5, 8, "button", 5);
            i0__namespace.ɵɵtext(9, "\n  ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(10, "\n");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var _r1 = i0__namespace.ɵɵreference(1);
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true)("appendToBody", true)("placement", ctx_r0.dropdownPlacement);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("disabled", ctx_r0.isDisabled());
            i0__namespace.ɵɵattribute("aria-expanded", _r1.isOpen())("aria-activedescendant", ctx_r0.activeActionItemId);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("\n    ", ctx_r0.column.actionsConfig.buttonName || ctx_r0.texts.actionButtonDefaultLabel, "");
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r0.getVisibleActions());
        }
    }
    var AdaptTableActionsComponent = /** @class */ (function () {
        function AdaptTableActionsComponent(table) {
            this.table = table;
            this.dropdownPlacement = ['bottom-right', 'top-right', 'auto'];
            this._listKeyManagerDestroy = new rxjs.Subject();
        }
        Object.defineProperty(AdaptTableActionsComponent.prototype, "actionsParams", {
            get: function () {
                return {
                    column: this.column,
                    rowIndex: this.rowIndex,
                    dataItem: this.dataItem,
                    expanded: this.expanded,
                    editing: this.editing,
                };
            },
            enumerable: false,
            configurable: true
        });
        AdaptTableActionsComponent.prototype.ngOnDestroy = function () {
            this._listKeyManagerDestroy.next();
        };
        AdaptTableActionsComponent.prototype.onActionClick = function (action) {
            action === null || action === void 0 ? void 0 : action.action(this.actionsParams);
        };
        AdaptTableActionsComponent.prototype.isHidden = function () {
            return i1.getValueOrFunc(this.column.actionsConfig.hidden, this.actionsParams);
        };
        AdaptTableActionsComponent.prototype.isDisabled = function () {
            var _this = this;
            return i1.getValueOrFunc(this.column.actionsConfig.disabled, this.actionsParams) ||
                this.getVisibleActions().every(function (a) { return _this.isDisabledAction(a); });
        };
        AdaptTableActionsComponent.prototype.isDisabledAction = function (action) {
            return i1.getValueOrFunc(action.disabled, this.actionsParams);
        };
        AdaptTableActionsComponent.prototype.getTitle = function (action) {
            return i1.getValueOrFunc(action.title, this.actionsParams);
        };
        AdaptTableActionsComponent.prototype.getVisibleActions = function () {
            var params = this.actionsParams;
            return this.column.actionsConfig.actions.filter(function (a) { return !i1.getValueOrFunc(a.hidden, params); });
        };
        AdaptTableActionsComponent.prototype.keyManagerStateChange = function (listKeyManager) {
            var _this = this;
            this._listKeyManager = listKeyManager;
            if (this._listKeyManager) {
                this._listKeyManager.change
                    .pipe(operators.takeUntil(this._listKeyManagerDestroy))
                    .subscribe(function () {
                    _this.activeActionItemId = _this._listKeyManager.activeItem;
                });
                this._listKeyManager.tabOut
                    .pipe(operators.takeUntil(this._listKeyManagerDestroy))
                    .subscribe(function () {
                    _this.actionsDropdown.close();
                });
            }
            else {
                this._listKeyManagerDestroy.next();
                this.activeActionItemId = null;
            }
        };
        AdaptTableActionsComponent.prototype.keydownHandler = function (event) {
            var _a;
            if (!this.actionsDropdown.isOpen() && i1.getEventKeyCode(event) === keycodes.DOWN_ARROW) {
                event.preventDefault();
                this.actionsDropdown.open();
                return;
            }
            if (this._listKeyManager) {
                this._listKeyManager.onKeydown(event);
                if (i1.getEventKeyCode(event) === keycodes.ENTER && this.actionsDropdown.isOpen()) {
                    this.onActionClick((_a = this._listKeyManager.activeItem) === null || _a === void 0 ? void 0 : _a.item);
                }
            }
        };
        AdaptTableActionsComponent.prototype.handleOpenChange = function (isOpen) {
            if (isOpen) {
                this._listKeyManager.setFirstItemActive();
            }
        };
        AdaptTableActionsComponent.prototype.isActiveDescendant = function (keyManagerItem) {
            return keyManagerItem === this.activeActionItemId;
        };
        return AdaptTableActionsComponent;
    }());
    AdaptTableActionsComponent.ɵfac = function AdaptTableActionsComponent_Factory(t) { return new (t || AdaptTableActionsComponent)(i0__namespace.ɵɵdirectiveInject(AdaptTableComponent)); };
    AdaptTableActionsComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: AdaptTableActionsComponent, selectors: [["adapt-table-actions"]], viewQuery: function AdaptTableActionsComponent_Query(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵviewQuery(_c0$8, 5);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.actionsDropdown = _t.first);
            }
        }, inputs: { column: "column", rowIndex: "rowIndex", dataItem: "dataItem", expanded: "expanded", editing: "editing", texts: "texts" }, decls: 2, vars: 1, consts: [["class", "dropdown", "adaptDropdown", "", 3, "adaptRadarDisableEventSending", "appendToBody", "placement", "openChange", 4, "ngIf"], ["adaptDropdown", "", 1, "dropdown", 3, "adaptRadarDisableEventSending", "appendToBody", "placement", "openChange"], ["actionsDropdown", ""], ["id", "dropdownMenu", "type", "button", "adaptDropdownAnchor", "", 1, "btn", "btn-secondary", "btn-xs", "at-action-dropdown-toggle", "dropdown-toggle", 3, "disabled", "click", "keydown"], ["aria-labelledby", "dropdownMenu", "adaptDropdownMenu", "", "adaptListKeyManager", "", 1, "dropdown-menu", 3, "keyManagerStateChange"], ["class", "dropdown-item", "type", "button", "tabindex", "-1", "adaptListKeyManagerItem", "", 3, "id", "item", "adaptListKeyManagerItemDisabled", "text-active", "disabled", "click", 4, "ngFor", "ngForOf"], ["type", "button", "tabindex", "-1", "adaptListKeyManagerItem", "", 1, "dropdown-item", 3, "id", "item", "adaptListKeyManagerItemDisabled", "disabled", "click"], ["adaptListKeyManagerItem", "adaptListKeyManagerItem"], [3, "ngClass", 4, "ngIf"], [3, "ngClass"]], template: function AdaptTableActionsComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, AdaptTableActionsComponent_div_0_Template, 11, 8, "div", 0);
                i0__namespace.ɵɵtext(1, "\n");
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngIf", !ctx.isHidden());
            }
        }, directives: [i2__namespace$1.NgIf, i1__namespace.AdaptDropdownDirective, i1__namespace.AdaptDropdownAnchorDirective, i1__namespace.AdaptDropdownMenuDirective, i1__namespace.AdaptListKeyManagerDirective, i2__namespace$1.NgForOf, i1__namespace.AdaptListKeyManagerItemDirective, i2__namespace$1.NgClass], encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptTableActionsComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'adapt-table-actions',
                        templateUrl: './adapt-table-actions.html',
                    }]
            }], function () { return [{ type: AdaptTableComponent }]; }, { column: [{
                    type: i0.Input
                }], rowIndex: [{
                    type: i0.Input
                }], dataItem: [{
                    type: i0.Input
                }], expanded: [{
                    type: i0.Input
                }], editing: [{
                    type: i0.Input
                }], texts: [{
                    type: i0.Input
                }], actionsDropdown: [{
                    type: i0.ViewChild,
                    args: ['actionsDropdown', { static: false }]
                }] });
    })();

    var _c0$7 = ["headerRowsSelectionDropdownRef"];
    var _c1$5 = ["headerRowsSelectionDropdownAnchorRef"];
    var _c2$4 = ["headerRowsSelectionDropdownMenu"];
    function AdaptHeaderSelectionCheckboxComponent_ng_container_15_adapt_rx_checkbox_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r9_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "adapt-rx-checkbox", 10, 11);
            i0__namespace.ɵɵlistener("ngModelChange", function AdaptHeaderSelectionCheckboxComponent_ng_container_15_adapt_rx_checkbox_2_Template_adapt_rx_checkbox_ngModelChange_0_listener() { i0__namespace.ɵɵrestoreView(_r9_1); var ctx_r8 = i0__namespace.ɵɵnextContext(2); return ctx_r8.onSelectAllRowsOnPage(); });
            i0__namespace.ɵɵtext(2, "\n        ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var _r7 = i0__namespace.ɵɵreference(1);
            var ctx_r5 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵclassProp("text-active", _r7 === ctx_r5.activeItem);
            i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true)("item", ctx_r5.checkboxToggleSource.SelectOnPage)("label", ctx_r5.getSelectAllItemsOnPageHeaderLabel())("indeterminate", ctx_r5.isIndeterminateState())("ngModel", ctx_r5.isCheckedState());
        }
    }
    function AdaptHeaderSelectionCheckboxComponent_ng_container_15_adapt_rx_checkbox_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r12_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "adapt-rx-checkbox", 10, 11);
            i0__namespace.ɵɵlistener("ngModelChange", function AdaptHeaderSelectionCheckboxComponent_ng_container_15_adapt_rx_checkbox_4_Template_adapt_rx_checkbox_ngModelChange_0_listener() { i0__namespace.ɵɵrestoreView(_r12_1); var ctx_r11 = i0__namespace.ɵɵnextContext(2); return ctx_r11.onSelectAllRowsInTable(); });
            i0__namespace.ɵɵtext(2, "\n        ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var _r10 = i0__namespace.ɵɵreference(1);
            var ctx_r6 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵclassProp("text-active", _r10 === ctx_r6.activeItem);
            i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true)("item", ctx_r6.checkboxToggleSource.SelectAll)("label", ctx_r6.getSelectAllItemsInTableHeaderLabel())("indeterminate", ctx_r6.isIndeterminateState())("ngModel", ctx_r6.isCheckedState());
        }
    }
    function AdaptHeaderSelectionCheckboxComponent_ng_container_15_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n        ");
            i0__namespace.ɵɵtemplate(2, AdaptHeaderSelectionCheckboxComponent_ng_container_15_adapt_rx_checkbox_2_Template, 3, 7, "adapt-rx-checkbox", 9);
            i0__namespace.ɵɵtext(3, "\n        ");
            i0__namespace.ɵɵtemplate(4, AdaptHeaderSelectionCheckboxComponent_ng_container_15_adapt_rx_checkbox_4_Template, 3, 7, "adapt-rx-checkbox", 9);
            i0__namespace.ɵɵtext(5, "\n      ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r3 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r3.isChunkSelectionAvailable());
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r3.isAllSelectionAvailable());
        }
    }
    function AdaptHeaderSelectionCheckboxComponent_adapt_rx_checkbox_17_Template(rf, ctx) {
        if (rf & 1) {
            var _r15_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "adapt-rx-checkbox", 10, 11);
            i0__namespace.ɵɵlistener("ngModelChange", function AdaptHeaderSelectionCheckboxComponent_adapt_rx_checkbox_17_Template_adapt_rx_checkbox_ngModelChange_0_listener() { i0__namespace.ɵɵrestoreView(_r15_1); var ctx_r14 = i0__namespace.ɵɵnextContext(); return ctx_r14.onDeselectAllRowsInTable(); });
            i0__namespace.ɵɵtext(2, "\n      ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var _r13 = i0__namespace.ɵɵreference(1);
            var ctx_r4 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵclassProp("text-active", _r13 === ctx_r4.activeItem);
            i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true)("item", ctx_r4.checkboxToggleSource.DeselectAll)("label", ctx_r4.getDeselectAllItemsHeaderLabel())("indeterminate", ctx_r4.isIndeterminateState())("ngModel", ctx_r4.canDeselectRows());
        }
    }
    var AdaptHeaderSelectionCheckboxComponent = /** @class */ (function () {
        function AdaptHeaderSelectionCheckboxComponent(table, _focusMonitor, _ngZone, _cdr, _overlayService, _adaptDeviceDetectionService) {
            this.table = table;
            this._focusMonitor = _focusMonitor;
            this._ngZone = _ngZone;
            this._cdr = _cdr;
            this._overlayService = _overlayService;
            this._adaptDeviceDetectionService = _adaptDeviceDetectionService;
            this.headerCheckboxToggle = new i0.EventEmitter();
            this._listKeyManagerDestroy = new rxjs.Subject();
            this._destroyed$ = new rxjs.ReplaySubject(1);
        }
        Object.defineProperty(AdaptHeaderSelectionCheckboxComponent.prototype, "totalRecords", {
            get: function () {
                /**
                 * When there is no totalRecords info available(means that for some reasons customer doesn't know how many records are in the table)
                 * we assume that totalRecords are at least on one record more than loaded records length until customer can set correct totalRecords value.
                 *
                 * This allows correctly calculate visibility of items in selection menu
                 */
                if (!this.table.isTotalRecordsInfoAvailable() && this.table.value) {
                    return this.table.value.length + 1;
                }
                return this.table.totalRecords;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptHeaderSelectionCheckboxComponent.prototype, "isAllSelectionInfoAvailable", {
            /**
             * If totalRecords was set as null we assume that all other selection related inputs(eg. selectedFilteredRowsCount)
             * was also set as null so can't be used in calculations.
             * But when totalRecords are equal to value length it means that we can use totalRecords in calculations but not selection related inputs(eg. selectedFilteredRowsCount)
             */
            get: function () {
                return this.table.lazy
                    && this.table.isTotalRecordsInfoAvailable()
                    && lodashEs.isNumber(this.table.disabledSelectedRowsCount)
                    && lodashEs.isNumber(this.table.disabledNotSelectedRowsCount)
                    && lodashEs.isNumber(this.table.disabledSelectedFilteredRowsCount)
                    && lodashEs.isNumber(this.table.disabledNotSelectedFilteredRowsCount)
                    && lodashEs.isNumber(this.table.selectedFilteredRowsCount)
                    && lodashEs.isNumber(this.table.totalRecordsInGroup);
            },
            enumerable: false,
            configurable: true
        });
        AdaptHeaderSelectionCheckboxComponent.prototype.ngOnInit = function () {
            this.checkboxToggleSource = exports.AdaptTableHeaderCheckboxToggleSource;
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this._ngZone.runOutsideAngular(function () {
                rxjs.fromEvent(_this.headerRowsSelectionDropdownAnchorRef.nativeElement, 'mouseover')
                    .pipe(operators.debounceTime(50), operators.takeUntil(_this._destroyed$))
                    .subscribe(function (event) {
                    _this.showHeaderRowsSelectionDD(event);
                });
                rxjs.fromEvent(_this.headerRowsSelectionDropdownMenu.nativeElement, 'mouseleave')
                    .pipe(operators.takeUntil(_this._destroyed$))
                    .subscribe(function () {
                    _this.hideHeaderRowsSelectionDD();
                });
            });
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.ngOnDestroy = function () {
            this._listKeyManagerDestroy.next();
            this._destroyed$.next(true);
            this._destroyed$.complete();
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.keyManagerStateChange = function (listKeyManager) {
            var _this = this;
            this._listKeyManager = listKeyManager;
            if (this._listKeyManager) {
                this._listKeyManager.change
                    .pipe(operators.takeUntil(this._listKeyManagerDestroy))
                    .subscribe(function () {
                    _this._ngZone.onStable.asObservable()
                        .pipe(operators.distinctUntilChanged(), operators.takeUntil(_this._destroyed$))
                        .subscribe(function () {
                        _this.setActiveItem(_this._listKeyManager.activeItem);
                        i1.SafeCdr.markForCheck(_this._cdr);
                    });
                });
                this._listKeyManager.tabOut
                    .pipe(operators.takeUntil(this._listKeyManagerDestroy))
                    .subscribe(function () {
                    _this.hideHeaderRowsSelectionDD();
                });
            }
            else {
                this._listKeyManagerDestroy.next();
                this.setActiveItem(null);
            }
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.onPopupAnimationDone = function (event) {
            var _this = this;
            if ((event === null || event === void 0 ? void 0 : event.eventInvokedFrom) === 'keyboard') {
                if (this.headerRowsSelectionDropdownRef.isOpen()) {
                    this._ngZone.onStable.asObservable()
                        .pipe(operators.take(1), operators.takeUntil(this._destroyed$))
                        .subscribe(function () {
                        _this._listKeyManager.setFirstItemActive();
                        _this.setActiveItem(_this._listKeyManager.activeItem);
                        i1.SafeCdr.detectChanges(_this._cdr);
                    });
                }
                else {
                    this._listKeyManager.setActiveItem(null);
                    this.setActiveItem(null);
                }
            }
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.onHeaderRowsSelectionMenuOpen = function (event) {
            var _a;
            // Prevent default behaviour to not toggle header checkbox on mobile on tap(click) event
            if (this._adaptDeviceDetectionService.isMobile()) {
                event.preventDefault();
            }
            var keyCode = i1.getEventKeyCode(event);
            if (keyCode === keycodes.ENTER || keyCode === keycodes.SPACE) {
                this.headerRowsSelectionDropdownRef.open(event);
            }
            if (this._listKeyManager) {
                this._listKeyManager.onKeydown(event);
                if (keyCode === keycodes.ENTER || keyCode === keycodes.SPACE && this.headerRowsSelectionDropdownRef.isOpen()) {
                    switch ((_a = this._listKeyManager.activeItem) === null || _a === void 0 ? void 0 : _a.item) {
                        case exports.AdaptTableHeaderCheckboxToggleSource.DeselectAll: {
                            this.onDeselectAllRowsInTable(true);
                            break;
                        }
                        case exports.AdaptTableHeaderCheckboxToggleSource.SelectOnPage: {
                            this.onSelectAllRowsOnPage(true);
                            break;
                        }
                        case exports.AdaptTableHeaderCheckboxToggleSource.SelectAll: {
                            this.onSelectAllRowsInTable(true);
                            break;
                        }
                    }
                }
            }
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.onDeselectAllRowsInTable = function (selectFromKeyboard) {
            if (selectFromKeyboard === void 0) { selectFromKeyboard = false; }
            this._toggleRowSelection(false, this.table.getAllCurrentRows(), exports.AdaptTableHeaderCheckboxToggleSource.DeselectAll, selectFromKeyboard);
            if (this.table.isMobile) {
                this.hideHeaderRowsSelectionDD();
            }
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.onSelectAllRowsOnPage = function (selectFromKeyboard) {
            if (selectFromKeyboard === void 0) { selectFromKeyboard = false; }
            this._toggleRowSelection(true, this.table.getCurrentPageDisplayingRowsItems(), exports.AdaptTableHeaderCheckboxToggleSource.SelectOnPage, selectFromKeyboard);
            if (this.table.isMobile) {
                this.hideHeaderRowsSelectionDD();
            }
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.onSelectAllRowsInTable = function (selectFromKeyboard) {
            if (selectFromKeyboard === void 0) { selectFromKeyboard = false; }
            this._toggleRowSelection(true, this.table.getAllCurrentRows(), exports.AdaptTableHeaderCheckboxToggleSource.SelectAll, selectFromKeyboard);
            if (this.table.isMobile) {
                this.hideHeaderRowsSelectionDD();
            }
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.showHeaderRowsSelectionDD = function (event) {
            var _this = this;
            if (!this.hasAllItemsDisabledForSelection()) {
                this._ngZone.run(function () {
                    _this.headerRowsSelectionDropdownRef.open(event);
                    if (!_this._overlayService.enableCDKOverlayControl) {
                        i1.SafeCdr.markForCheck(_this._cdr);
                    }
                });
            }
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.hideHeaderRowsSelectionDD = function () {
            var _this = this;
            this._ngZone.run(function () {
                _this.headerRowsSelectionDropdownRef.close();
            });
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.getSelectAllItemsOnPageHeaderLabel = function () {
            var isTableHasDisabledRecords = this._checkOnDisabledRecords();
            var isTableInFilteringState = this.table.hasFilter();
            if (this.table.lazy && this.table.enableInfiniteScrolling) {
                if (isTableInFilteringState && isTableHasDisabledRecords) {
                    return this.texts.selectAllPossibleFilteredVisibleItemsHeaderLabel;
                }
                if (isTableInFilteringState && !isTableHasDisabledRecords) {
                    return this.texts.selectAllFilteredVisibleItemsHeaderLabel;
                }
                if (!isTableInFilteringState && isTableHasDisabledRecords) {
                    return this.texts.selectAllPossibleVisibleItemsHeaderLabel;
                }
                return this.texts.selectAllVisibleItemsHeaderLabel;
            }
            if (isTableInFilteringState && isTableHasDisabledRecords) {
                return this.texts.selectAllPossibleFilteredItemsOnPageHeaderLabel;
            }
            if (isTableInFilteringState && !isTableHasDisabledRecords) {
                return this.texts.selectAllFilteredItemsOnPageHeaderLabel;
            }
            if (!isTableInFilteringState && isTableHasDisabledRecords) {
                return this.texts.selectAllPossibleItemsOnPageHeaderLabel;
            }
            return this.texts.selectAllItemsOnPageHeaderLabel;
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.getSelectAllItemsInTableHeaderLabel = function () {
            var isTableHasDisabledRecords = this._checkOnDisabledRecords();
            var isTableInFilteringState = this.table.hasFilter();
            if (isTableInFilteringState && isTableHasDisabledRecords) {
                return this.texts.selectAllPossibleFilteredItemsInTableHeaderLabel;
            }
            if (!isTableInFilteringState && isTableHasDisabledRecords) {
                return this.texts.selectAllPossibleItemsInTableHeaderLabel;
            }
            if (isTableInFilteringState && !isTableHasDisabledRecords) {
                return this.texts.selectAllFilteredItemsInTableHeaderLabel;
            }
            return this.table.isTotalRecordsInfoAvailable()
                ? i1.formatString(this.texts.selectAllItemsInTableHeaderLabel, this.table.totalRecords)
                : this.texts.selectAllItemsInTableHeaderLabelForUnknownTotalRecords;
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.getDeselectAllItemsHeaderLabel = function () {
            var isTableHasDisabledRecords = this._checkOnDisabledRecords();
            var isTableInFilteringState = this.table.hasFilter();
            if (isTableInFilteringState && isTableHasDisabledRecords) {
                return this.texts.deselectAllPossibleFilteredItemsInTableHeaderLabel;
            }
            if (!isTableInFilteringState && isTableHasDisabledRecords) {
                return this.texts.deselectAllPossibleItemsInTableHeaderLabel;
            }
            if (isTableInFilteringState && !isTableHasDisabledRecords) {
                return this.texts.deselectAllFilteredItemsInTableHeaderLabel;
            }
            return this.texts.deselectAllItemsInTableHeaderLabel;
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.isIndeterminateState = function () {
            if (this.table.hasAtLeastOneRowGroupedData()) {
                return this._getGroupSelectionState(this.table.getRowSelectionArray()) === exports.CheckboxState.Indeterminate;
            }
            return this.isAtLeastOneRowSelected() && !this.isCheckedState();
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.isCheckedState = function () {
            if (this.table.hasAtLeastOneRowGroupedData()) {
                return this._getGroupSelectionState(this.table.getRowSelectionArray()) === exports.CheckboxState.Selected;
            }
            var selectedRowsLength = this.table.getRowSelectionArray().length;
            if (selectedRowsLength === 0) {
                return false;
            }
            return this.table.isTotalRecordsInfoAvailable()
                ? selectedRowsLength === this.table.allTotalRecords
                : this._filterSelectedRows(this.table.getAllCurrentRows()).length === this.table.getAllCurrentRows().length + 1;
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.isAtLeastOneRowSelected = function () {
            return this.table.getRowSelectionArray().length > 0;
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.canDeselectRows = function () {
            if (this.isAllSelectionInfoAvailable) {
                return this.table.hasFilter()
                    ? this.table.selectedFilteredRowsCount - this.table.disabledSelectedFilteredRowsCount > 0
                    : this.table.getRowSelectionArray().length - this.table.disabledSelectedRowsCount > 0;
            }
            if (this.table.hasFilter()) {
                var selectedFilteredRows = this._filterSelectedRows(this.table.getAllCurrentRows());
                return selectedFilteredRows.length - this._getDisabledSelectedRows(selectedFilteredRows).length > 0;
            }
            return this._getDisabledSelectedRows(this.table.getAllCurrentRows()).length !== this.table.getRowSelectionArray().length;
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.showSelectionItems = function () {
            var _a;
            var selectionArray = this.table.getRowSelectionArray();
            var disabledNotSelectedRowsCount = (_a = this.table.disabledNotSelectedRowsCount) !== null && _a !== void 0 ? _a : this._getDisabledNotSelectedRows(this.table.getAllCurrentRows()).length;
            if (this.table.hasAtLeastOneRowGroupedData()) {
                var allRows = this.table.getRowsItems(this.table.getAllCurrentRows());
                var totalRecordsInGroup = this.isAllSelectionInfoAvailable ? this.table.totalRecordsInGroup : allRows.length;
                if (this.table.hasFilter()) {
                    return this.isAllSelectionInfoAvailable
                        ? this.table.totalRecordsInGroup !== this.table.selectedFilteredRowsCount + this.table.disabledNotSelectedFilteredRowsCount
                        : this._filterSelectedRows(allRows).length + disabledNotSelectedRowsCount !== allRows.length;
                }
                return totalRecordsInGroup !== selectionArray.length + disabledNotSelectedRowsCount;
            }
            if (this.table.hasFilter()) {
                return this.isAllSelectionInfoAvailable
                    ? this.totalRecords !== this.table.selectedFilteredRowsCount + this.table.disabledNotSelectedFilteredRowsCount
                    : this._filterSelectedRows(this.table.getAllCurrentRows()).length + disabledNotSelectedRowsCount !== this.table.getAllCurrentRows().length;
            }
            // Because we can't differentiate is user select all rows on page or in table without totalRecords info
            // we hide both selection items if all loaded rows was selected
            return this.table.isTotalRecordsInfoAvailable()
                ? this.table.allTotalRecords !== selectionArray.length + disabledNotSelectedRowsCount
                : this._filterSelectedRows(this.table.getAllCurrentRows()).length + disabledNotSelectedRowsCount !== this.table.getAllCurrentRows().length;
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.isChunkSelectionAvailable = function () {
            var allSelectableRowsOnPageLength = this._getAllSelectableRowsOnPage().length;
            switch (this.table.headerSelectionMode) {
                case exports.AdaptTableHeaderSelectionMode.All: {
                    return false;
                }
                case exports.AdaptTableHeaderSelectionMode.Chunk: {
                    return this._getCurrentPageSelectedRows().length !== allSelectableRowsOnPageLength;
                }
                case exports.AdaptTableHeaderSelectionMode.Both: {
                    return this.table.rows < this.totalRecords
                        && this._getCurrentPageSelectedRows().length !== allSelectableRowsOnPageLength
                        && (this.table.enableInfiniteScrolling
                            ? this.table.getAllCurrentRows().filter(function (row) { return !lodashEs.isNil(row); }).length !== this.totalRecords
                            : allSelectableRowsOnPageLength !== this.totalRecords);
                }
            }
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.isAllSelectionAvailable = function () {
            return this.table.headerSelectionMode === exports.AdaptTableHeaderSelectionMode.All
                || this.table.headerSelectionMode === exports.AdaptTableHeaderSelectionMode.Both;
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.hasAllItemsDisabledForSelection = function () {
            return this.table.disableRowSelection
                || (this.isAllSelectionInfoAvailable
                    ? this.totalRecords - (this.table.hasFilter() ? this.table.disabledNotSelectedFilteredRowsCount + this.table.disabledSelectedFilteredRowsCount : this.table.disabledNotSelectedRowsCount + this.table.disabledSelectedRowsCount) === 0
                    : !this._getAllSelectableRowsInTable().length);
        };
        AdaptHeaderSelectionCheckboxComponent.prototype.setActiveItem = function (keyManagerItem) {
            this.activeItem = keyManagerItem;
        };
        AdaptHeaderSelectionCheckboxComponent.prototype._getAllSelectableRowsInTable = function () {
            return this.table.getSelectableRowsItems(this.table.getAllCurrentRows()).filter(function (row) { return !lodashEs.isNil(row); });
        };
        AdaptHeaderSelectionCheckboxComponent.prototype._getAllSelectableRowsOnPage = function () {
            return this.table.getSelectableRowsItems(this.table.getCurrentPageDisplayingRowsItems()).filter(function (row) { return !lodashEs.isNil(row); });
        };
        AdaptHeaderSelectionCheckboxComponent.prototype._getCurrentPageSelectedRows = function () {
            return this._filterSelectedRows(this._getAllSelectableRowsOnPage());
        };
        AdaptHeaderSelectionCheckboxComponent.prototype._getDisabledSelectedRows = function (rows) {
            var _this = this;
            var result = [];
            this.table.goRecursivelyByItemsInGroups(rows, function (row) {
                if (_this.table.isRowSelectionDisabled(row) && _this.table.isRowSelected(row)) {
                    result.push(row);
                }
            });
            return result;
        };
        AdaptHeaderSelectionCheckboxComponent.prototype._getDisabledNotSelectedRows = function (rows) {
            var _this = this;
            var result = [];
            this.table.goRecursivelyByItemsInGroups(rows, function (row) {
                // Remove items that disabled but already selected
                if (_this.table.isRowSelectionDisabled(row) && !_this.table.isRowSelected(row)) {
                    result.push(row);
                }
            });
            return result;
        };
        AdaptHeaderSelectionCheckboxComponent.prototype._checkOnDisabledRecords = function () {
            return this.isAllSelectionInfoAvailable
                ? this.table.disabledNotSelectedRowsCount > 0 || this.table.disabledSelectedRowsCount > 0
                : this.table.getAllCurrentRows().some(this.table.isRowSelectionDisabled.bind(this.table));
        };
        AdaptHeaderSelectionCheckboxComponent.prototype._toggleRowSelection = function (checked, rowsToToggle, eventSource, selectFromKeyboard) {
            var _this = this;
            this.table.onToogleGroupedRowsSelection(checked, rowsToToggle);
            this.table.handleHeaderCheckboxToggle({
                originalEvent: window.event,
                checked: checked,
                eventSource: eventSource,
                filters: this.table.filters,
                globalFilter: this.table.filters && this.table.filters.global ? this.table.filters.global.value : null,
            });
            if (selectFromKeyboard) {
                this._ngZone.onStable.asObservable()
                    .pipe(operators.take(1), operators.takeUntil(this._destroyed$))
                    .subscribe(function () {
                    _this._listKeyManager.setFirstItemActive();
                });
            }
        };
        AdaptHeaderSelectionCheckboxComponent.prototype._filterSelectedRows = function (rows) {
            var _this = this;
            // Check selected rows by "dataKey" because selected row can have custom properties.
            // https://github.bmc.com/bmc-ux/adapt-angular/issues/7497
            return rows.filter(function (row) { return _this.table.isRowSelected(row); });
        };
        AdaptHeaderSelectionCheckboxComponent.prototype._getGroupSelectionState = function (selection) {
            var _this = this;
            var dataItemsCount = 0;
            if (selection && !selection.length) {
                return exports.CheckboxState.Unselected;
            }
            if (this.table.lazy && this.table.paginator) {
                var selectedItemsCountInCurrentPage_1 = 0;
                this.table.goRecursivelyByItemsInAllGroups(function (row) {
                    dataItemsCount++;
                    if (_this.table.isRowSelected(row)) {
                        selectedItemsCountInCurrentPage_1++;
                    }
                });
                if (dataItemsCount === 0 || selectedItemsCountInCurrentPage_1 === 0) {
                    return exports.CheckboxState.Unselected;
                }
                return dataItemsCount === selectedItemsCountInCurrentPage_1 ? exports.CheckboxState.Selected : exports.CheckboxState.Indeterminate;
            }
            this.table.goRecursivelyByItemsInAllGroups(function () {
                dataItemsCount++;
            });
            if (dataItemsCount === 0) {
                return exports.CheckboxState.Unselected;
            }
            selection = selection || this.table.getRowSelectionArray();
            return selection.length === dataItemsCount ? exports.CheckboxState.Selected : exports.CheckboxState.Indeterminate;
        };
        return AdaptHeaderSelectionCheckboxComponent;
    }());
    AdaptHeaderSelectionCheckboxComponent.ɵfac = function AdaptHeaderSelectionCheckboxComponent_Factory(t) { return new (t || AdaptHeaderSelectionCheckboxComponent)(i0__namespace.ɵɵdirectiveInject(AdaptTableComponent), i0__namespace.ɵɵdirectiveInject(i2__namespace$2.FocusMonitor), i0__namespace.ɵɵdirectiveInject(i0__namespace.NgZone), i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef), i0__namespace.ɵɵdirectiveInject(i1__namespace.AdaptOverlayService), i0__namespace.ɵɵdirectiveInject(i1__namespace.AdaptDeviceDetectionService)); };
    AdaptHeaderSelectionCheckboxComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: AdaptHeaderSelectionCheckboxComponent, selectors: [["adapt-header-selection-checkbox"]], viewQuery: function AdaptHeaderSelectionCheckboxComponent_Query(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵviewQuery(_c0$7, 5);
                i0__namespace.ɵɵviewQuery(_c1$5, 5);
                i0__namespace.ɵɵviewQuery(_c2$4, 5);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.headerRowsSelectionDropdownRef = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.headerRowsSelectionDropdownAnchorRef = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.headerRowsSelectionDropdownMenu = _t.first);
            }
        }, inputs: { texts: "texts" }, outputs: { headerCheckboxToggle: "headerCheckboxToggle" }, decls: 22, vars: 11, consts: [["adaptDropdown", "", 1, "at-header-selection", 3, "adaptRadarDisableEventSending", "autoClose", "appendToBody", "customClass", "popupAnimationDone"], ["headerRowsSelectionDropdownRef", ""], ["adaptDropdownAnchor", "", "tabIndex", "-1"], ["headerRowsSelectionDropdownAnchorRef", ""], [1, "checkbox-inline", "at-group-selection-checkbox", 3, "ngModel", "adaptRadarDisableEventSending", "indeterminate", "disabled", "ariaLabel", "keydown", "click"], ["adaptListKeyManager", "", "adaptDropdownMenu", "", 1, "dropdown-menu", "at-header-selection__dropdown-menu", 3, "keyManagerStateChange"], ["headerRowsSelectionDropdownMenu", ""], [1, "at-header-selection__dropdown-list"], [4, "ngIf"], ["class", "at-header-selection__dropdown-checkbox", "tabIndex", "-1", "adaptListKeyManagerItem", "", 3, "adaptRadarDisableEventSending", "item", "text-active", "label", "indeterminate", "ngModel", "ngModelChange", 4, "ngIf"], ["tabIndex", "-1", "adaptListKeyManagerItem", "", 1, "at-header-selection__dropdown-checkbox", 3, "adaptRadarDisableEventSending", "item", "label", "indeterminate", "ngModel", "ngModelChange"], ["adaptListKeyManagerItem", "adaptListKeyManagerItem"]], template: function AdaptHeaderSelectionCheckboxComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0, 1);
                i0__namespace.ɵɵlistener("popupAnimationDone", function AdaptHeaderSelectionCheckboxComponent_Template_div_popupAnimationDone_0_listener($event) { return ctx.onPopupAnimationDone($event); });
                i0__namespace.ɵɵtext(2, "\n  ");
                i0__namespace.ɵɵelementStart(3, "div", 2, 3);
                i0__namespace.ɵɵtext(5, "\n    ");
                i0__namespace.ɵɵelementStart(6, "adapt-rx-checkbox", 4);
                i0__namespace.ɵɵlistener("keydown", function AdaptHeaderSelectionCheckboxComponent_Template_adapt_rx_checkbox_keydown_6_listener($event) { return ctx.onHeaderRowsSelectionMenuOpen($event); })("click", function AdaptHeaderSelectionCheckboxComponent_Template_adapt_rx_checkbox_click_6_listener($event) { return $event.preventDefault(); });
                i0__namespace.ɵɵtext(7, "\n    ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(8, "\n  ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(9, "\n  ");
                i0__namespace.ɵɵelementStart(10, "div", 5, 6);
                i0__namespace.ɵɵlistener("keyManagerStateChange", function AdaptHeaderSelectionCheckboxComponent_Template_div_keyManagerStateChange_10_listener($event) { return ctx.keyManagerStateChange($event); });
                i0__namespace.ɵɵtext(12, "\n    ");
                i0__namespace.ɵɵelementStart(13, "div", 7);
                i0__namespace.ɵɵtext(14, "\n      ");
                i0__namespace.ɵɵtemplate(15, AdaptHeaderSelectionCheckboxComponent_ng_container_15_Template, 6, 2, "ng-container", 8);
                i0__namespace.ɵɵtext(16, "\n      ");
                i0__namespace.ɵɵtemplate(17, AdaptHeaderSelectionCheckboxComponent_adapt_rx_checkbox_17_Template, 3, 7, "adapt-rx-checkbox", 9);
                i0__namespace.ɵɵtext(18, "\n    ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(19, "\n  ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(20, "\n");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(21, "\n");
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true)("autoClose", "outside")("appendToBody", true)("customClass", ctx.table.isMobile ? "at-header-selection__dropdown at-header-selection__dropdown_mobile" : "at-header-selection__dropdown");
                i0__namespace.ɵɵadvance(6);
                i0__namespace.ɵɵproperty("ngModel", ctx.isCheckedState())("adaptRadarDisableEventSending", true)("indeterminate", ctx.isIndeterminateState())("disabled", ctx.hasAllItemsDisabledForSelection())("ariaLabel", ctx.texts.headerSelectRowsArialLabel);
                i0__namespace.ɵɵadvance(9);
                i0__namespace.ɵɵproperty("ngIf", ctx.showSelectionItems());
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.canDeselectRows());
            }
        }, directives: [i1__namespace.AdaptDropdownDirective, i1__namespace.AdaptDropdownAnchorDirective, i1__namespace.AdaptRxCheckboxComponent, i5__namespace.NgControlStatus, i5__namespace.NgModel, i1__namespace.AdaptListKeyManagerDirective, i1__namespace.AdaptDropdownMenuDirective, i2__namespace$1.NgIf, i1__namespace.AdaptListKeyManagerItemDirective], encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptHeaderSelectionCheckboxComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'adapt-header-selection-checkbox',
                        templateUrl: './header-selection-checkbox.html',
                        encapsulation: i0.ViewEncapsulation.None,
                        changeDetection: i0.ChangeDetectionStrategy.Default
                    }]
            }], function () { return [{ type: AdaptTableComponent }, { type: i2__namespace$2.FocusMonitor }, { type: i0__namespace.NgZone }, { type: i0__namespace.ChangeDetectorRef }, { type: i1__namespace.AdaptOverlayService }, { type: i1__namespace.AdaptDeviceDetectionService }]; }, { texts: [{
                    type: i0.Input
                }], headerCheckboxToggle: [{
                    type: i0.Output
                }], headerRowsSelectionDropdownRef: [{
                    type: i0.ViewChild,
                    args: ['headerRowsSelectionDropdownRef']
                }], headerRowsSelectionDropdownAnchorRef: [{
                    type: i0.ViewChild,
                    args: ['headerRowsSelectionDropdownAnchorRef']
                }], headerRowsSelectionDropdownMenu: [{
                    type: i0.ViewChild,
                    args: ['headerRowsSelectionDropdownMenu']
                }] });
    })();

    // eslint-disable-next-line @angular-eslint/directive-class-suffix
    var EditableRow = /** @class */ (function () {
        function EditableRow(el) {
            this.el = el;
        }
        EditableRow.prototype.isEnabled = function () {
            return this.pEditableRowDisabled !== true;
        };
        return EditableRow;
    }());
    EditableRow.ɵfac = function EditableRow_Factory(t) { return new (t || EditableRow)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef)); };
    EditableRow.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: EditableRow, selectors: [["", "pEditableRow", ""]], inputs: { data: ["pEditableRow", "data"], pEditableRowDisabled: "pEditableRowDisabled" } });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(EditableRow, [{
                type: i0.Directive,
                args: [{
                        // eslint-disable-next-line @angular-eslint/directive-selector
                        selector: '[pEditableRow]'
                    }]
            }], function () { return [{ type: i0__namespace.ElementRef }]; }, { data: [{
                    type: i0.Input,
                    args: ['pEditableRow']
                }], pEditableRowDisabled: [{
                    type: i0.Input
                }] });
    })();

    // eslint-disable-next-line @angular-eslint/directive-class-suffix
    var ReorderableColumn = /** @class */ (function () {
        function ReorderableColumn(dt, el, zone) {
            this.dt = dt;
            this.el = el;
            this.zone = zone;
        }
        ReorderableColumn.prototype.ngAfterViewInit = function () {
            if (this.isEnabled()) {
                this.bindEvents();
            }
        };
        ReorderableColumn.prototype.bindEvents = function () {
            var _this = this;
            this.zone.runOutsideAngular(function () {
                _this.mouseDownListener = _this.onMouseDown.bind(_this);
                _this.el.nativeElement.addEventListener('mousedown', _this.mouseDownListener);
                _this.dragStartListener = _this.onDragStart.bind(_this);
                _this.el.nativeElement.addEventListener('dragstart', _this.dragStartListener);
                _this.dragOverListener = _this.onDragEnter.bind(_this);
                _this.el.nativeElement.addEventListener('dragover', _this.dragOverListener);
                _this.dragEnterListener = _this.onDragEnter.bind(_this);
                _this.el.nativeElement.addEventListener('dragenter', _this.dragEnterListener);
                _this.dragLeaveListener = _this.onDragLeave.bind(_this);
                _this.el.nativeElement.addEventListener('dragleave', _this.dragLeaveListener);
            });
        };
        ReorderableColumn.prototype.unbindEvents = function () {
            if (this.mouseDownListener) {
                document.removeEventListener('mousedown', this.mouseDownListener);
                this.mouseDownListener = null;
            }
            if (this.dragOverListener) {
                document.removeEventListener('dragover', this.dragOverListener);
                this.dragOverListener = null;
            }
            if (this.dragEnterListener) {
                document.removeEventListener('dragenter', this.dragEnterListener);
                this.dragEnterListener = null;
            }
            if (this.dragEnterListener) {
                document.removeEventListener('dragenter', this.dragEnterListener);
                this.dragEnterListener = null;
            }
            if (this.dragLeaveListener) {
                document.removeEventListener('dragleave', this.dragLeaveListener);
                this.dragLeaveListener = null;
            }
        };
        ReorderableColumn.prototype.onMouseDown = function (event) {
            if (event.target.nodeName === 'INPUT'
                || event.target.nodeName === 'TEXTAREA'
                || dom.DomHandler.hasClass(event.target, 'ui-column-resizer')) {
                this.el.nativeElement.draggable = false;
            }
            else {
                this.el.nativeElement.draggable = true;
            }
        };
        ReorderableColumn.prototype.onDragStart = function (event) {
            this.dt.onColumnDragStart(event, this.el.nativeElement);
        };
        ReorderableColumn.prototype.onDragOver = function (event) {
            event.preventDefault();
        };
        ReorderableColumn.prototype.onDragEnter = function (event) {
            this.onColumnDragEnter(event, this.el.nativeElement);
        };
        ReorderableColumn.prototype.onDragLeave = function (event) {
            this.dt.onColumnDragLeave(event);
        };
        ReorderableColumn.prototype.onDrop = function (event) {
            if (this.isEnabled()) {
                this.dt.onColumnDrop(event, this.el.nativeElement);
            }
        };
        ReorderableColumn.prototype.onColumnDragEnter = function (event, dropHeader) {
            var _this = this;
            if (!lodashEs.isFunction(this.dt.allowColumnReorderingResolver)) {
                this.dt.onColumnDragEnter(event, dropHeader);
            }
            else {
                var draggedHeaderColumn = this.dt.dataHeaderCells.find(function (headerCell) { return headerCell.element.nativeElement === _this.dt.draggedColumn; });
                var droppedHeaderColumn = this.dt.dataHeaderCells.find(function (headerCell) { return headerCell.element.nativeElement === dropHeader; });
                var allowColumnsReordering = draggedHeaderColumn && droppedHeaderColumn
                    && this.dt.allowColumnReorderingResolver(draggedHeaderColumn, droppedHeaderColumn);
                if (allowColumnsReordering) {
                    this.dt.onColumnDragEnter(event, dropHeader);
                }
                else {
                    event.dataTransfer.dropEffect = 'none';
                }
            }
        };
        ReorderableColumn.prototype.isEnabled = function () {
            return this.pReorderableColumnDisabled !== true;
        };
        ReorderableColumn.prototype.ngOnDestroy = function () {
            this.unbindEvents();
        };
        return ReorderableColumn;
    }());
    ReorderableColumn.ɵfac = function ReorderableColumn_Factory(t) { return new (t || ReorderableColumn)(i0__namespace.ɵɵdirectiveInject(AdaptTableComponent), i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef), i0__namespace.ɵɵdirectiveInject(i0__namespace.NgZone)); };
    ReorderableColumn.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: ReorderableColumn, selectors: [["", "pReorderableColumn", ""]], hostBindings: function ReorderableColumn_HostBindings(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵlistener("drop", function ReorderableColumn_drop_HostBindingHandler($event) { return ctx.onDrop($event); });
            }
        }, inputs: { pReorderableColumnDisabled: "pReorderableColumnDisabled" } });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(ReorderableColumn, [{
                type: i0.Directive,
                args: [{
                        // eslint-disable-next-line @angular-eslint/directive-selector
                        selector: '[pReorderableColumn]'
                    }]
            }], function () { return [{ type: AdaptTableComponent }, { type: i0__namespace.ElementRef }, { type: i0__namespace.NgZone }]; }, { pReorderableColumnDisabled: [{
                    type: i0.Input
                }], onDrop: [{
                    type: i0.HostListener,
                    args: ['drop', ['$event']]
                }] });
    })();

    function calculateScrollbarWidth(el, recalculateScrollBarWidth) {
        if (el) {
            var style = getComputedStyle(el);
            return (el.offsetWidth - el.clientWidth - parseFloat(style.borderLeftWidth) - parseFloat(style.borderRightWidth));
        }
        else {
            // need to get an access to the private property 'calculatedScrollbarWidth'
            var domHandler = dom.DomHandler;
            if ((domHandler['calculatedScrollbarWidth']) !== null && !recalculateScrollBarWidth) {
                return domHandler['calculatedScrollbarWidth'];
            }
            var scrollDiv = document.createElement('div');
            var scrollContent = document.createElement('div');
            scrollDiv.style.width = '100px';
            scrollDiv.style.height = '100px';
            scrollDiv.style.overflow = 'scroll';
            scrollDiv.style.position = 'absolute';
            scrollDiv.style.visibility = 'hidden';
            document.body.appendChild(scrollDiv);
            scrollDiv.appendChild(scrollContent);
            var scrollBarContainerPosition = scrollDiv.getBoundingClientRect();
            var scrollBarContentPosition = scrollContent.getBoundingClientRect();
            var scrollbarWidth = scrollBarContainerPosition.width - scrollBarContentPosition.width;
            domHandler['calculatedScrollbarWidth'] = scrollbarWidth;
            document.body.removeChild(scrollDiv);
            return scrollbarWidth;
        }
    }

    // eslint-disable-next-line @angular-eslint/directive-class-suffix
    var ResizableColumn = /** @class */ (function () {
        function ResizableColumn(dt, el, zone, _renderer) {
            this.dt = dt;
            this.el = el;
            this.zone = zone;
            this._renderer = _renderer;
            this.columnResized = new i0.EventEmitter();
            this._minColResizeWidth = 15; // in pixels
        }
        ResizableColumn.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (this.isEnabled()) {
                dom.DomHandler.addClass(this.el.nativeElement, 'ui-resizable-column');
                this.resizer = document.createElement('span');
                this.resizer.className = 'ui-column-resizer ui-clickable';
                this.el.nativeElement.appendChild(this.resizer);
                this.zone.runOutsideAngular(function () {
                    _this.resizerMouseDownListener = _this.onMouseDown.bind(_this);
                    _this.resizer.addEventListener('mousedown', _this.resizerMouseDownListener);
                });
            }
        };
        ResizableColumn.prototype.bindDocumentEvents = function () {
            var _this = this;
            this.zone.runOutsideAngular(function () {
                _this.documentMouseMoveListener = _this.onDocumentMouseMove.bind(_this);
                document.addEventListener('mousemove', _this.documentMouseMoveListener);
                _this.documentMouseUpListener = _this.onDocumentMouseUp.bind(_this);
                document.addEventListener('mouseup', _this.documentMouseUpListener);
            });
        };
        ResizableColumn.prototype.unbindDocumentEvents = function () {
            if (this.documentMouseMoveListener) {
                document.removeEventListener('mousemove', this.documentMouseMoveListener);
                this.documentMouseMoveListener = null;
            }
            if (this.documentMouseUpListener) {
                document.removeEventListener('mouseup', this.documentMouseUpListener);
                this.documentMouseUpListener = null;
            }
        };
        ResizableColumn.prototype.onMouseDown = function (event) {
            if (event.which === 1) {
                this.dt.onColumnResizeBegin(event);
                this.bindDocumentEvents();
            }
        };
        ResizableColumn.prototype.onDocumentMouseMove = function (event) {
            this.dt.onColumnResize(event);
        };
        ResizableColumn.prototype.onDocumentMouseUp = function (event) {
            this.onColumnResizeEnd(event, this.el.nativeElement);
            this.unbindDocumentEvents();
        };
        ResizableColumn.prototype.isEnabled = function () {
            return this.pResizableColumnDisabled !== true;
        };
        ResizableColumn.prototype.ngOnDestroy = function () {
            if (this.resizerMouseDownListener) {
                this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);
            }
            this.unbindDocumentEvents();
        };
        ResizableColumn.prototype.onColumnResizeEnd = function (event, column) {
            if (this.dt.columnResizeMode === exports.ResizeMode.Fit) {
                this._handleFitModeResize(event, column);
            }
            else if (this.dt.columnResizeMode === exports.ResizeMode.Expand) {
                this._handleExpandModeResize(event, column);
            }
            this.dt.resizeHelperViewChild.nativeElement.style.display = 'none';
            dom.DomHandler.removeClass(this.dt.containerViewChild.nativeElement, 'ui-unselectable-text');
        };
        ResizableColumn.prototype._checkIfOverlapLeftSibling = function (event, column) {
            var containerLeft = dom.DomHandler.getOffset(this.dt.containerViewChild.nativeElement).left;
            return this.dt.isRtl
                ? event.pageX - containerLeft < column.nextElementSibling.offsetLeft
                : event.pageX - containerLeft < column.offsetLeft;
        };
        ResizableColumn.prototype._checkIfOverlapRightSibling = function (event, column) {
            var containerLeft = dom.DomHandler.getOffset(this.dt.containerViewChild.nativeElement).left;
            return this.dt.isRtl
                ? event.pageX - containerLeft > column.offsetLeft + column.offsetWidth
                : event.pageX - containerLeft > column.offsetLeft
                    + column.offsetWidth + column.nextElementSibling.offsetWidth;
        };
        ResizableColumn.prototype._handleExpandModeResize = function (event, column) {
            var delta = this._getColumnResizeDelta(event, column);
            var columnWidth = column.offsetWidth;
            var newColumnWidth = columnWidth + delta;
            // Logic copied from PrimeNG. Changed the way how delta calculating
            if (this.dt.scrollable) {
                this._setScrollableItemsWidthOnExpandResize(column, newColumnWidth, delta);
            }
            else {
                this.dt.tableViewChild.nativeElement.style.width =
                    this.dt.tableViewChild.nativeElement.offsetWidth + delta + 'px';
                column.style.width = newColumnWidth + 'px';
                var containerWidth = this.dt.tableViewChild.nativeElement.style.width;
                this.dt.containerViewChild.nativeElement.style.width = containerWidth + 'px';
            }
            this._emitOnColResize(column, delta);
        };
        ResizableColumn.prototype._setScrollableItemsWidthOnExpandResize = function (column, newColumnWidth, delta) {
            var scrollableView = column ? this.dt.findParentScrollableView(column) : this.dt.containerViewChild.nativeElement;
            var scrollableBody = dom.DomHandler.findSingle(scrollableView, this.dt.virtualScroll ? "." + exports.AdaptTableClasses.TableVirtualScrollableBody : "." + exports.AdaptTableClasses.TableScrollableBody);
            var scrollableHeader = dom.DomHandler.findSingle(scrollableView, "." + exports.AdaptTableClasses.TableScrollableHeader);
            var scrollableFooter = dom.DomHandler.findSingle(scrollableView, "." + exports.AdaptTableClasses.TableScrollableFooter);
            var scrollableBodyTable = dom.DomHandler.findSingle(scrollableBody, "table." + exports.AdaptTableClasses.TableScrollableBodyTable);
            var scrollableHeaderTable = dom.DomHandler.findSingle(scrollableHeader, "table." + exports.AdaptTableClasses.TableScrollableHeaderTable);
            var scrollableFooterTable = dom.DomHandler.findSingle(scrollableFooter, "table." + exports.AdaptTableClasses.TableScrollableFooterTable);
            var scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;
            var scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;
            var isContainerInViewport = this.dt.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;
            var setWidth = function (container, table, width, isContainerInViewport) {
                if (container && table) {
                    container.style.width = isContainerInViewport ? width + calculateScrollbarWidth(scrollableBody) + 'px' : 'auto';
                    table.style.width = width + 'px';
                }
            };
            setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);
            setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);
            setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);
            if (column) {
                var resizeColumnIndex = dom.DomHandler.index(column);
                this._resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);
                this._resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);
                this._resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);
            }
        };
        ResizableColumn.prototype._resizeColGroup = function (table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {
            if (table) {
                var colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;
                if (colGroup) {
                    var col = colGroup.children[resizeColumnIndex];
                    var nextCol = col.nextElementSibling;
                    this._renderer.setStyle(col, 'width', newColumnWidth + 'px');
                    this._renderer.setAttribute(col, 'data-resized-width', newColumnWidth + 'px');
                    if (nextCol && nextColumnWidth) {
                        this._renderer.setStyle(nextCol, 'width', nextColumnWidth + 'px');
                        this._renderer.setAttribute(nextCol, 'data-resized-width', nextColumnWidth + 'px');
                    }
                }
                else {
                    throw new Error('Scrollable tables require a colgroup to support resizable columns');
                }
            }
        };
        ResizableColumn.prototype._getColumnSiblingsWidths = function (column, resizeDirection) {
            var columnSibling = resizeDirection === exports.ResizeDirection.Left
                ? column.previousElementSibling
                : column.nextElementSibling;
            var allPrevColumnSiblings = [columnSibling];
            function getSibling(columnRef) {
                return resizeDirection === exports.ResizeDirection.Left
                    ? columnRef.previousElementSibling
                    : columnRef.nextElementSibling;
            }
            while (columnSibling && getSibling(columnSibling)) {
                allPrevColumnSiblings.push(getSibling(columnSibling));
                columnSibling = getSibling(columnSibling);
            }
            var allResizablePrevColumnSiblings = allPrevColumnSiblings.filter(function (col) { return col && col.classList.contains('ui-resizable-column'); });
            return allResizablePrevColumnSiblings.map(function (item) { return item && item.offsetWidth; });
        };
        ResizableColumn.prototype._getColumnResizeDelta = function (event, column) {
            var containerLeft = dom.DomHandler.getOffset(this.dt.containerViewChild.nativeElement).left;
            return this.dt.isRtl
                ? containerLeft + column.offsetLeft - event.pageX
                : event.pageX - (containerLeft + column.offsetLeft + column.offsetWidth);
        };
        ResizableColumn.prototype._handleFitModeResize = function (event, column) {
            var isLeftSiblingOverlap = this._checkIfOverlapLeftSibling(event, column);
            var isRightSiblingOverlap = this._checkIfOverlapRightSibling(event, column);
            if (!isLeftSiblingOverlap && !isRightSiblingOverlap) {
                this._noSiblingOverlapResize(event, column);
            }
            else if (isLeftSiblingOverlap) {
                if (this.dt.isRtl) {
                    this._handleRightSiblingOverlapResize(event, column);
                }
                else {
                    this._handleLeftSiblingOverlapResize(event, column);
                }
            }
            else if (isRightSiblingOverlap) {
                if (this.dt.isRtl) {
                    this._handleLeftSiblingOverlapResize(event, column);
                }
                else {
                    this._handleRightSiblingOverlapResize(event, column);
                }
            }
        };
        // Logic copied from PrimeNG. Changed the way how delta calculating
        ResizableColumn.prototype._noSiblingOverlapResize = function (event, column) {
            var resizeColumnIndex = dom.DomHandler.index(column);
            var nextColumn = column.nextElementSibling;
            while (!nextColumn.offsetParent) {
                nextColumn = nextColumn.nextElementSibling;
            }
            if (nextColumn) {
                var delta = this._getColumnResizeDelta(event, column);
                var nextColumnWidth = nextColumn.offsetWidth - delta;
                var columnWidth = column.offsetWidth;
                var newColumnWidth = columnWidth + delta;
                if (this.dt.scrollable) {
                    var scrollableView = this.dt.findParentScrollableView(column);
                    var scrollableBodyTable = dom.DomHandler.findSingle(scrollableView, "table." + exports.AdaptTableClasses.TableScrollableBodyTable);
                    var scrollableHeaderTable = dom.DomHandler.findSingle(scrollableView, "table." + exports.AdaptTableClasses.TableScrollableHeaderTable);
                    var scrollableFooterTable = dom.DomHandler.findSingle(scrollableView, "table." + exports.AdaptTableClasses.TableScrollableFooterTable);
                    this._resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);
                    this._resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);
                    this._resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);
                }
                else {
                    this._resizeColGroup(this.dt.tableViewChild.nativeElement, resizeColumnIndex, newColumnWidth, nextColumnWidth);
                }
                this._emitOnColResize(column, delta);
            }
        };
        ResizableColumn.prototype._handleLeftSiblingOverlapResize = function (event, column) {
            var delta = Math.abs(this._getColumnResizeDelta(event, column));
            // Pass resizeColumnIndex + 1 to include current column in columns which be resized
            var resizeColumnIndex = dom.DomHandler.index(column) + 1;
            var columnSiblingsWidths = __spreadArray([column.offsetWidth], __read(this._getColumnSiblingsWidths(column, exports.ResizeDirection.Left)));
            var newColumnWidth = column.nextElementSibling.offsetWidth + delta;
            this._resizeTableSections(column, newColumnWidth, delta, resizeColumnIndex, columnSiblingsWidths, exports.ResizeDirection.Left);
            // Pass column.nextElementSibling because we resize not current column but it next sibling
            this._emitOnColResize(column.nextElementSibling, delta);
        };
        ResizableColumn.prototype._handleRightSiblingOverlapResize = function (event, column) {
            var delta = Math.abs(this._getColumnResizeDelta(event, column));
            var resizeColumnIndex = dom.DomHandler.index(column);
            var columnSiblingsWidths = this._getColumnSiblingsWidths(column, exports.ResizeDirection.Right);
            var newColumnWidth = column.offsetWidth + delta;
            this._resizeTableSections(column, newColumnWidth, delta, resizeColumnIndex, columnSiblingsWidths, exports.ResizeDirection.Right);
            this._emitOnColResize(column, delta);
        };
        ResizableColumn.prototype._resizeTableSections = function (column, newColumnWidth, delta, resizeColumnIndex, columnSiblingsWidths, resizeDirection) {
            if (this.dt.scrollable) {
                var scrollableView = this.dt.findParentScrollableView(column);
                var scrollableBodyTable = dom.DomHandler.findSingle(scrollableView, "table." + exports.AdaptTableClasses.TableScrollableBodyTable);
                var scrollableHeaderTable = dom.DomHandler.findSingle(scrollableView, "table." + exports.AdaptTableClasses.TableScrollableHeaderTable);
                var scrollableFooterTable = dom.DomHandler.findSingle(scrollableView, "table." + exports.AdaptTableClasses.TableScrollableFooterTable);
                this._resizeColGroupForSiblings(scrollableHeaderTable, newColumnWidth, delta, resizeColumnIndex, columnSiblingsWidths, resizeDirection);
                this._resizeColGroupForSiblings(scrollableBodyTable, newColumnWidth, delta, resizeColumnIndex, columnSiblingsWidths, resizeDirection);
                this._resizeColGroupForSiblings(scrollableFooterTable, newColumnWidth, delta, resizeColumnIndex, columnSiblingsWidths, resizeDirection);
            }
            else {
                this._resizeColGroupForSiblings(this.dt.tableViewChild.nativeElement, newColumnWidth, delta, resizeColumnIndex, columnSiblingsWidths, resizeDirection);
            }
        };
        ResizableColumn.prototype._resizeColGroupForSiblings = function (table, newColumnWidth, delta, resizeColumnIndex, columnSiblingsWidths, resizeDirection) {
            var _this = this;
            if (table) {
                var colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;
                if (colGroup) {
                    var col = colGroup.children[resizeColumnIndex];
                    var siblingCol_1 = resizeDirection === exports.ResizeDirection.Left
                        ? col.previousElementSibling
                        : col.nextElementSibling;
                    var colWidthsData = this._recalculateColumnSiblingsWidths(delta, columnSiblingsWidths);
                    var colWidths = colWidthsData.newWidths;
                    var newWidth = newColumnWidth - colWidthsData.leftOver;
                    var widthValue = (newWidth > this._minColResizeWidth ? newWidth : this._minColResizeWidth) + 'px';
                    this._renderer.setStyle(col, 'width', widthValue);
                    this._renderer.setAttribute(col, 'data-resized-width', widthValue);
                    if (colWidths && colWidths.length) {
                        colWidths.forEach(function (width) {
                            if (siblingCol_1) {
                                _this._renderer.setStyle(siblingCol_1, 'width', (width > _this._minColResizeWidth ? width : _this._minColResizeWidth) + 'px');
                                _this._renderer.setAttribute(siblingCol_1, 'data-resized-width', (width > _this._minColResizeWidth ? width : _this._minColResizeWidth) + 'px');
                                siblingCol_1 = resizeDirection === exports.ResizeDirection.Left
                                    ? siblingCol_1.previousElementSibling
                                    : siblingCol_1.nextElementSibling;
                            }
                        });
                    }
                }
                else {
                    i1.adaptError('Scrollable tables require a colgroup to support resizable columns');
                }
            }
        };
        ResizableColumn.prototype._recalculateColumnSiblingsWidths = function (delta, columnSiblingsWidths) {
            var _this = this;
            var leftOver = 0;
            var widthsSum = columnSiblingsWidths.reduce(function (prev, next) { return prev + next; }, 0);
            var newWidths = columnSiblingsWidths.map(function (width) {
                var widthInPercents = width * 100 / widthsSum;
                var partFromDelta = delta * widthInPercents / 100;
                var newWidth = width - partFromDelta;
                if (newWidth > _this._minColResizeWidth) {
                    return newWidth;
                }
                else {
                    leftOver += partFromDelta;
                    return width;
                }
            });
            return { leftOver: leftOver, newWidths: newWidths };
        };
        ResizableColumn.prototype._emitOnColResize = function (column, delta) {
            var _this = this;
            var widthMap = this.dt.dataHeaderCells.map(function (cell) {
                return {
                    fields: cell.data.renderingColumn.columnsConfigs.map(function (col) { return col.field; }),
                    width: lodashEs.round((cell.element.nativeElement.offsetWidth / _this.dt.tableInnerContainer.nativeElement.offsetWidth) * 100, 2)
                };
            });
            this.columnResized.emit({
                element: column,
                delta: delta,
                columnsConfigState: widthMap
            });
        };
        return ResizableColumn;
    }());
    ResizableColumn.ɵfac = function ResizableColumn_Factory(t) { return new (t || ResizableColumn)(i0__namespace.ɵɵdirectiveInject(AdaptTableComponent), i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef), i0__namespace.ɵɵdirectiveInject(i0__namespace.NgZone), i0__namespace.ɵɵdirectiveInject(i0__namespace.Renderer2)); };
    ResizableColumn.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: ResizableColumn, selectors: [["", "pResizableColumn", ""]], inputs: { pResizableColumnDisabled: "pResizableColumnDisabled" }, outputs: { columnResized: "columnResized" } });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(ResizableColumn, [{
                type: i0.Directive,
                args: [{
                        // eslint-disable-next-line @angular-eslint/directive-selector
                        selector: '[pResizableColumn]'
                    }]
            }], function () { return [{ type: AdaptTableComponent }, { type: i0__namespace.ElementRef }, { type: i0__namespace.NgZone }, { type: i0__namespace.Renderer2 }]; }, { pResizableColumnDisabled: [{
                    type: i0.Input
                }], columnResized: [{
                    type: i0.Output
                }] });
    })();

    // eslint-disable-next-line @angular-eslint/directive-class-suffix
    var RowToggler = /** @class */ (function () {
        function RowToggler(dt) {
            this.dt = dt;
        }
        RowToggler.prototype.onClick = function (event) {
            if (this.isEnabled()) {
                this.dt.toggleRow(this.data, event);
                event.preventDefault();
            }
        };
        RowToggler.prototype.isEnabled = function () {
            return this.pRowTogglerDisabled !== true;
        };
        return RowToggler;
    }());
    RowToggler.ɵfac = function RowToggler_Factory(t) { return new (t || RowToggler)(i0__namespace.ɵɵdirectiveInject(AdaptTableComponent)); };
    RowToggler.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: RowToggler, selectors: [["", "pRowToggler", ""]], hostBindings: function RowToggler_HostBindings(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵlistener("click", function RowToggler_click_HostBindingHandler($event) { return ctx.onClick($event); });
            }
        }, inputs: { data: ["pRowToggler", "data"], pRowTogglerDisabled: "pRowTogglerDisabled" } });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(RowToggler, [{
                type: i0.Directive,
                args: [{
                        // eslint-disable-next-line @angular-eslint/directive-selector
                        selector: '[pRowToggler]'
                    }]
            }], function () { return [{ type: AdaptTableComponent }]; }, { data: [{
                    type: i0.Input,
                    args: ['pRowToggler']
                }], pRowTogglerDisabled: [{
                    type: i0.Input
                }], onClick: [{
                    type: i0.HostListener,
                    args: ['click', ['$event']]
                }] });
    })();

    var _c0$6 = ["scrollHeader"];
    var _c1$4 = ["scrollHeaderBox"];
    var _c2$3 = ["scrollBody"];
    var _c3$1 = ["scrollTable"];
    var _c4 = ["scrollFooter"];
    var _c5 = ["scrollFooterBox"];
    var _c6 = ["scrollableAligner"];
    var _c7 = ["pScrollableView", ""];
    function ScrollableView_ng_container_9_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    function ScrollableView_ng_container_13_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    function ScrollableView_ng_template_18_ng_container_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    var _c8 = function (a0, a1, a2) { return { $implicit: a0, rowIndex: a1, columns: a2 }; };
    function ScrollableView_ng_template_18_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n            ");
            i0__namespace.ɵɵtemplate(1, ScrollableView_ng_template_18_ng_container_1_Template, 1, 0, "ng-container", 5);
            i0__namespace.ɵɵtext(2, "\n          ");
        }
        if (rf & 2) {
            var rowData_r12 = ctx.$implicit;
            var rowIndex_r13 = ctx.index;
            var ctx_r4 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r4.dt.frozenRowsTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction3(2, _c8, rowData_r12, rowIndex_r13, ctx_r4.columns));
        }
    }
    function ScrollableView_ng_container_24_ng_container_8_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    function ScrollableView_ng_container_24_div_13_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "div", 21, 22);
        }
    }
    function ScrollableView_ng_container_24_adapt_table_infinite_scrolling_loader_15_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "adapt-table-infinite-scrolling-loader", 23);
        }
        if (rf & 2) {
            var ctx_r19 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("infiniteScrollLoading", ctx_r19.dt.loadingMore);
        }
    }
    var _c9 = function (a0) { return { "height": a0 }; };
    var _c10 = function (a0) { return { $implicit: a0 }; };
    function ScrollableView_ng_container_24_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n      ");
            i0__namespace.ɵɵelementStart(2, "div", 15, 16);
            i0__namespace.ɵɵtext(4, "\n        ");
            i0__namespace.ɵɵelementStart(5, "table", 4, 17);
            i0__namespace.ɵɵtext(7, "\n          ");
            i0__namespace.ɵɵtemplate(8, ScrollableView_ng_container_24_ng_container_8_Template, 1, 0, "ng-container", 5);
            i0__namespace.ɵɵtext(9, "\n          ");
            i0__namespace.ɵɵelement(10, "tbody", 18);
            i0__namespace.ɵɵtext(11, "\n        ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(12, "\n        ");
            i0__namespace.ɵɵtemplate(13, ScrollableView_ng_container_24_div_13_Template, 2, 0, "div", 19);
            i0__namespace.ɵɵtext(14, "\n        ");
            i0__namespace.ɵɵtemplate(15, ScrollableView_ng_container_24_adapt_table_infinite_scrolling_loader_15_Template, 1, 1, "adapt-table-infinite-scrolling-loader", 20);
            i0__namespace.ɵɵtext(16, "\n      ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(17, "\n    ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r5 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵclassMap(ctx_r5.tableClasses.TableScrollableBody);
            i0__namespace.ɵɵproperty("ngStyle", i0__namespace.ɵɵpureFunction1(14, _c9, ctx_r5.dt.scrollHeight !== "flex" ? ctx_r5.scrollHeight : undefined));
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵclassMap(ctx_r5.tableClasses.TableScrollableBodyTable);
            i0__namespace.ɵɵproperty("ngClass", ctx_r5.dt.tableStyleClass)("ngStyle", ctx_r5.dt.tableStyle);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r5.frozen ? ctx_r5.dt.frozenColGroupTemplate || ctx_r5.dt.colGroupTemplate : ctx_r5.dt.colGroupTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(16, _c10, ctx_r5.columns));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("pTableBody", ctx_r5.columns)("pTableBodyTemplate", ctx_r5.frozen ? ctx_r5.dt.frozenBodyTemplate || ctx_r5.dt.bodyTemplate : ctx_r5.dt.bodyTemplate)("frozen", ctx_r5.frozen);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", ctx_r5.frozen);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r5.canShowInfiniteScrollingLoader());
        }
    }
    function ScrollableView_ng_template_26_ng_container_6_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    function ScrollableView_ng_template_26_div_11_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "div", 21, 22);
        }
    }
    function ScrollableView_ng_template_26_adapt_table_infinite_scrolling_loader_13_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelement(0, "adapt-table-infinite-scrolling-loader", 23);
        }
        if (rf & 2) {
            var ctx_r24 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("infiniteScrollLoading", ctx_r24.dt.loadingMore);
        }
    }
    var _c11 = function (a0) { return { "ui-table-virtual-scrollable-body_empty": a0 }; };
    function ScrollableView_ng_template_26_Template(rf, ctx) {
        if (rf & 1) {
            var _r27_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵtext(0, "\n      ");
            i0__namespace.ɵɵelementStart(1, "cdk-virtual-scroll-viewport", 24);
            i0__namespace.ɵɵlistener("scrolledIndexChange", function ScrollableView_ng_template_26_Template_cdk_virtual_scroll_viewport_scrolledIndexChange_1_listener($event) { i0__namespace.ɵɵrestoreView(_r27_1); var ctx_r26 = i0__namespace.ɵɵnextContext(); return ctx_r26.onScrollIndexChange($event); });
            i0__namespace.ɵɵtext(2, "\n        ");
            i0__namespace.ɵɵelementStart(3, "table", 4, 17);
            i0__namespace.ɵɵtext(5, "\n          ");
            i0__namespace.ɵɵtemplate(6, ScrollableView_ng_template_26_ng_container_6_Template, 1, 0, "ng-container", 5);
            i0__namespace.ɵɵtext(7, "\n          ");
            i0__namespace.ɵɵelement(8, "tbody", 18);
            i0__namespace.ɵɵtext(9, "\n        ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(10, "\n        ");
            i0__namespace.ɵɵtemplate(11, ScrollableView_ng_template_26_div_11_Template, 2, 0, "div", 19);
            i0__namespace.ɵɵtext(12, "\n        ");
            i0__namespace.ɵɵtemplate(13, ScrollableView_ng_template_26_adapt_table_infinite_scrolling_loader_13_Template, 1, 1, "adapt-table-infinite-scrolling-loader", 20);
            i0__namespace.ɵɵtext(14, "\n      ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(15, "\n    ");
        }
        if (rf & 2) {
            var ctx_r7 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵclassMap(ctx_r7.tableClasses.TableVirtualScrollableBody);
            i0__namespace.ɵɵstyleProp("height", ctx_r7.dt.scrollHeight !== "flex" ? ctx_r7.scrollHeight : undefined);
            i0__namespace.ɵɵproperty("itemSize", ctx_r7.dt.virtualRowHeight)("minBufferPx", ctx_r7.dt.minBufferPx)("maxBufferPx", ctx_r7.dt.maxBufferPx)("ngClass", i0__namespace.ɵɵpureFunction1(19, _c11, ctx_r7.dt.isEmpty()));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵclassMap(ctx_r7.tableClasses.TableScrollableBodyTable);
            i0__namespace.ɵɵproperty("ngClass", ctx_r7.dt.tableStyleClass)("ngStyle", ctx_r7.dt.tableStyle);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r7.frozen ? ctx_r7.dt.frozenColGroupTemplate || ctx_r7.dt.colGroupTemplate : ctx_r7.dt.colGroupTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(21, _c10, ctx_r7.columns));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("pTableBody", ctx_r7.columns)("pTableBodyTemplate", ctx_r7.frozen ? ctx_r7.dt.frozenBodyTemplate || ctx_r7.dt.bodyTemplate : ctx_r7.dt.bodyTemplate)("frozen", ctx_r7.frozen);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", ctx_r7.frozen);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r7.canShowInfiniteScrollingLoader());
        }
    }
    function ScrollableView_ng_container_37_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    function ScrollableView_ng_container_41_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    // eslint-disable-next-line @angular-eslint/component-class-suffix
    var ScrollableView = /** @class */ (function () {
        function ScrollableView(dt, el, zone, _eventManager) {
            var _this = this;
            this.dt = dt;
            this.el = el;
            this.zone = zone;
            this._eventManager = _eventManager;
            this.tableClasses = exports.AdaptTableClasses;
            this._visualViewportResizeListenerBind = this._visualViewportResizeListener.bind(this);
            this.subscription = this.dt.tableService.valueSource$.subscribe(function () {
                _this.zone.runOutsideAngular(function () {
                    setTimeout(function () {
                        _this.alignScrollBar();
                    }, 50);
                });
            });
            this.initialized = false;
        }
        Object.defineProperty(ScrollableView.prototype, "scrollHeight", {
            get: function () {
                return this._scrollHeight;
            },
            set: function (val) {
                this._scrollHeight = val;
            },
            enumerable: false,
            configurable: true
        });
        ScrollableView.prototype.ngAfterViewChecked = function () {
            if (!this.initialized && this.el.nativeElement.offsetParent) {
                this.alignScrollBar();
                this.initialized = true;
            }
        };
        ScrollableView.prototype.ngAfterViewInit = function () {
            this.dt.scrollableView = this;
            if (!this.frozen) {
                if (this.dt.frozenColumns || this.dt.frozenBodyTemplate) {
                    dom.DomHandler.addClass(this.el.nativeElement, 'ui-table-unfrozen-view');
                }
                var frozenView = this.el.nativeElement.previousElementSibling;
                if (frozenView) {
                    if (this.dt.virtualScroll) {
                        this.frozenSiblingBody = dom.DomHandler.findSingle(frozenView, "." + exports.AdaptTableClasses.TableVirtualScrollableBody);
                    }
                    else {
                        this.frozenSiblingBody = dom.DomHandler.findSingle(frozenView, "." + exports.AdaptTableClasses.TableScrollableBody);
                    }
                }
            }
            else {
                if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {
                    this.scrollableAlignerViewChild.nativeElement.style.height = dom.DomHandler.calculateScrollbarHeight() + 'px';
                }
            }
            this.bindEvents();
            this.alignScrollBar();
            this._subscribeOnVisualViewportResize();
        };
        ScrollableView.prototype.canShowInfiniteScrollingLoader = function () {
            var table = this.dt;
            var value = table.value;
            return table.enableInfiniteScrolling && table.showLoader && value != null && value.length !== 0 &&
                !table.hasReachedTotalRecords();
        };
        ScrollableView.prototype.bindEvents = function () {
            var _this = this;
            this.zone.runOutsideAngular(function () {
                if (_this.scrollHeaderViewChild && _this.scrollHeaderViewChild.nativeElement) {
                    _this.headerScrollListener = _this.onHeaderScroll.bind(_this);
                    _this.scrollHeaderViewChild.nativeElement.addEventListener('scroll', _this.headerScrollListener);
                }
                if (_this.scrollFooterViewChild && _this.scrollFooterViewChild.nativeElement) {
                    _this.footerScrollListener = _this.onFooterScroll.bind(_this);
                    _this.scrollFooterViewChild.nativeElement.addEventListener('scroll', _this.footerScrollListener);
                }
                if (!_this.frozen) {
                    _this.bodyScrollListener = _this.onBodyScroll.bind(_this);
                    if (_this.dt.virtualScroll) {
                        _this.virtualScrollBody.getElementRef().nativeElement.addEventListener('scroll', _this.bodyScrollListener);
                    }
                    else {
                        _this.scrollBodyViewChild.nativeElement.addEventListener('scroll', _this.bodyScrollListener);
                    }
                }
            });
        };
        ScrollableView.prototype.unbindEvents = function () {
            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {
                this.scrollHeaderViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);
            }
            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {
                this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);
            }
            if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {
                this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);
            }
            if (this.virtualScrollBody && this.virtualScrollBody.getElementRef()) {
                this.virtualScrollBody.getElementRef().nativeElement.removeEventListener('scroll', this.bodyScrollListener);
            }
        };
        ScrollableView.prototype.onHeaderScroll = function () {
            var scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;
            this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;
            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {
                this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;
            }
            this.preventBodyScrollPropagation = true;
        };
        ScrollableView.prototype.onFooterScroll = function () {
            var scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;
            this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;
            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {
                this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;
            }
            this.preventBodyScrollPropagation = true;
        };
        ScrollableView.prototype.onBodyScroll = function (event) {
            if (this.preventBodyScrollPropagation) {
                this.preventBodyScrollPropagation = false;
                return;
            }
            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {
                if (this.dt.isRtl) {
                    this.scrollHeaderBoxViewChild.nativeElement.style.marginRight = event.target.scrollLeft + 'px';
                }
                else {
                    this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -event.target.scrollLeft + 'px';
                }
            }
            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {
                this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -event.target.scrollLeft + 'px';
            }
            if (this.frozenSiblingBody) {
                this.frozenSiblingBody.scrollTop = event.target.scrollTop;
            }
        };
        // Override
        ScrollableView.prototype.hasVerticalOverflow = function () {
            var scrollTablePositionHeight = this.scrollTableViewChild.nativeElement.getBoundingClientRect().height;
            var scrollBodyPositionHeight = this.dt.virtualScroll
                ? this.virtualScrollBody.getViewportSize()
                : this.scrollBodyViewChild.nativeElement.getBoundingClientRect().height;
            return scrollTablePositionHeight > scrollBodyPositionHeight;
        };
        ScrollableView.prototype.alignScrollBar = function (recalculateScrollBarWidth) {
            if (!this.frozen) {
                var scrollBarWidth = this.hasVerticalOverflow() ? calculateScrollbarWidth(null, recalculateScrollBarWidth) : 0;
                if (this.dt.isRtl) {
                    this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = scrollBarWidth + 'px';
                }
                else {
                    this.scrollHeaderBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';
                }
                if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {
                    this.scrollFooterBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';
                }
            }
            this.initialized = false;
        };
        ScrollableView.prototype.ngOnDestroy = function () {
            this.unbindEvents();
            this.frozenSiblingBody = null;
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
            if (window.visualViewport) {
                window.visualViewport.removeEventListener('resize', this._visualViewportResizeListenerBind);
            }
            this.initialized = false;
        };
        ScrollableView.prototype.getPageCount = function () {
            var dataToRender = this.dt.filteredValue || this.dt.value;
            var dataLength = dataToRender ? dataToRender.length : 0;
            return Math.ceil(dataLength / this.dt.rows);
        };
        ScrollableView.prototype.onScrollIndexChange = function (index) {
            var _this = this;
            // In case we don't want to emit onLazyLoad event on init
            if (!this.dt.lazyLoadOnInit && index === 0) {
                return;
            }
            if (this.dt.lazy) {
                if (this.virtualScrollTimeout) {
                    clearTimeout(this.virtualScrollTimeout);
                }
                this.virtualScrollTimeout = window.setTimeout(function () {
                    var page = Math.floor(index / _this.dt.rows);
                    var virtualScrollOffset = page === 0 ? 0 : (page - 1) * _this.dt.rows;
                    var virtualScrollChunkSize = page === 0 ? _this.dt.rows * 2 : _this.dt.rows * 3;
                    if (page !== _this.virtualPage) {
                        _this.virtualPage = page;
                        _this.dt.onLazyLoad.emit({
                            eventSource: exports.AdaptTableEventSource.LoadMore,
                            first: virtualScrollOffset,
                            rows: virtualScrollChunkSize,
                            sortField: _this.dt.sortField,
                            sortOrder: _this.dt.sortOrder,
                            filters: _this.dt.filters,
                            globalFilter: _this.dt.filters && _this.dt.filters.global ? _this.dt.filters.global.value : null,
                            multiSortMeta: _this.dt.multiSortMeta,
                            loadMore: false,
                            infiniteScrollingFirst: null
                        });
                    }
                }, this.dt.virtualScrollDelay);
            }
        };
        ScrollableView.prototype.scrollToVirtualIndex = function (index) {
            if (this.virtualScrollBody) {
                this.virtualScrollBody.scrollToIndex(index);
            }
        };
        ScrollableView.prototype.scrollTo = function (options) {
            if (this.virtualScrollBody) {
                this.virtualScrollBody.scrollTo(options);
            }
            else {
                if (this.scrollBodyViewChild.nativeElement.scrollTo) {
                    this.scrollBodyViewChild.nativeElement.scrollTo(options);
                }
                else {
                    this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;
                    this.scrollBodyViewChild.nativeElement.scrollTop = options.top;
                }
            }
        };
        ScrollableView.prototype._subscribeOnVisualViewportResize = function () {
            // Firefox Responsive Design Mode have Viewport Zooming disabled by default
            if (window.visualViewport) {
                window.visualViewport.addEventListener('resize', this._visualViewportResizeListenerBind);
            }
        };
        ScrollableView.prototype._visualViewportResizeListener = function () {
            var _this = this;
            this.zone.runOutsideAngular(function () {
                _this.alignScrollBar(true);
            });
        };
        return ScrollableView;
    }());
    ScrollableView.ɵfac = function ScrollableView_Factory(t) { return new (t || ScrollableView)(i0__namespace.ɵɵdirectiveInject(AdaptTableComponent), i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef), i0__namespace.ɵɵdirectiveInject(i0__namespace.NgZone), i0__namespace.ɵɵdirectiveInject(i4__namespace.EventManager)); };
    ScrollableView.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: ScrollableView, selectors: [["", "pScrollableView", ""]], viewQuery: function ScrollableView_Query(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵviewQuery(_c0$6, 5);
                i0__namespace.ɵɵviewQuery(_c1$4, 5);
                i0__namespace.ɵɵviewQuery(_c2$3, 5);
                i0__namespace.ɵɵviewQuery(_c3$1, 5);
                i0__namespace.ɵɵviewQuery(_c4, 5);
                i0__namespace.ɵɵviewQuery(_c5, 5);
                i0__namespace.ɵɵviewQuery(_c6, 5);
                i0__namespace.ɵɵviewQuery(i2$3.CdkVirtualScrollViewport, 5);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.scrollHeaderViewChild = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.scrollHeaderBoxViewChild = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.scrollBodyViewChild = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.scrollTableViewChild = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.scrollFooterViewChild = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.scrollFooterBoxViewChild = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.scrollableAlignerViewChild = _t.first);
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.virtualScrollBody = _t.first);
            }
        }, inputs: { columns: ["pScrollableView", "columns"], frozen: "frozen", scrollHeight: "scrollHeight" }, attrs: _c7, decls: 47, vars: 32, consts: [[1, "ui-widget-header"], ["scrollHeader", ""], [1, "ui-table-scrollable-header-box"], ["scrollHeaderBox", ""], [3, "ngClass", "ngStyle"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "ui-table-thead"], [1, "ui-table-tbody"], ["ngFor", "", 3, "ngForOf", "ngForTrackBy"], [4, "ngIf", "ngIfElse"], ["virtualScrollTemplate", ""], ["scrollFooter", ""], [1, "ui-table-scrollable-footer-box"], ["scrollFooterBox", ""], [1, "ui-table-tfoot"], [3, "ngStyle"], ["scrollBody", ""], ["scrollTable", ""], [1, "ui-table-tbody", 3, "pTableBody", "pTableBodyTemplate", "frozen"], ["style", "background-color:transparent", 4, "ngIf"], [3, "infiniteScrollLoading", 4, "ngIf"], [2, "background-color", "transparent"], ["scrollableAligner", ""], [3, "infiniteScrollLoading"], [3, "itemSize", "minBufferPx", "maxBufferPx", "ngClass", "scrolledIndexChange"]], template: function ScrollableView_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtext(0, "\n    ");
                i0__namespace.ɵɵelementStart(1, "div", 0, 1);
                i0__namespace.ɵɵtext(3, "\n      ");
                i0__namespace.ɵɵelementStart(4, "div", 2, 3);
                i0__namespace.ɵɵtext(6, "\n        ");
                i0__namespace.ɵɵelementStart(7, "table", 4);
                i0__namespace.ɵɵtext(8, "\n          ");
                i0__namespace.ɵɵtemplate(9, ScrollableView_ng_container_9_Template, 1, 0, "ng-container", 5);
                i0__namespace.ɵɵtext(10, "\n          ");
                i0__namespace.ɵɵelementStart(11, "thead", 6);
                i0__namespace.ɵɵtext(12, "\n          ");
                i0__namespace.ɵɵtemplate(13, ScrollableView_ng_container_13_Template, 1, 0, "ng-container", 5);
                i0__namespace.ɵɵtext(14, "\n          ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(15, "\n          ");
                i0__namespace.ɵɵelementStart(16, "tbody", 7);
                i0__namespace.ɵɵtext(17, "\n          ");
                i0__namespace.ɵɵtemplate(18, ScrollableView_ng_template_18_Template, 3, 6, "ng-template", 8);
                i0__namespace.ɵɵtext(19, "\n          ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(20, "\n        ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(21, "\n      ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(22, "\n    ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(23, "\n    ");
                i0__namespace.ɵɵtemplate(24, ScrollableView_ng_container_24_Template, 18, 18, "ng-container", 9);
                i0__namespace.ɵɵtext(25, "\n    ");
                i0__namespace.ɵɵtemplate(26, ScrollableView_ng_template_26_Template, 16, 23, "ng-template", null, 10, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(28, "\n    ");
                i0__namespace.ɵɵelementStart(29, "div", 0, 11);
                i0__namespace.ɵɵtext(31, "\n      ");
                i0__namespace.ɵɵelementStart(32, "div", 12, 13);
                i0__namespace.ɵɵtext(34, "\n        ");
                i0__namespace.ɵɵelementStart(35, "table", 4);
                i0__namespace.ɵɵtext(36, "\n          ");
                i0__namespace.ɵɵtemplate(37, ScrollableView_ng_container_37_Template, 1, 0, "ng-container", 5);
                i0__namespace.ɵɵtext(38, "\n          ");
                i0__namespace.ɵɵelementStart(39, "tfoot", 14);
                i0__namespace.ɵɵtext(40, "\n          ");
                i0__namespace.ɵɵtemplate(41, ScrollableView_ng_container_41_Template, 1, 0, "ng-container", 5);
                i0__namespace.ɵɵtext(42, "\n          ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(43, "\n        ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(44, "\n      ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(45, "\n    ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(46, "\n  ");
            }
            if (rf & 2) {
                var _r6 = i0__namespace.ɵɵreference(27);
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵclassMap(ctx.tableClasses.TableScrollableHeader);
                i0__namespace.ɵɵadvance(6);
                i0__namespace.ɵɵclassMap(ctx.tableClasses.TableScrollableHeaderTable);
                i0__namespace.ɵɵproperty("ngClass", ctx.dt.tableStyleClass)("ngStyle", ctx.dt.tableStyle);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx.frozen ? ctx.dt.frozenColGroupTemplate || ctx.dt.colGroupTemplate : ctx.dt.colGroupTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(24, _c10, ctx.columns));
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx.frozen ? ctx.dt.frozenHeaderTemplate || ctx.dt.headerTemplate : ctx.dt.headerTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(26, _c10, ctx.columns));
                i0__namespace.ɵɵadvance(5);
                i0__namespace.ɵɵproperty("ngForOf", ctx.dt.frozenValue)("ngForTrackBy", ctx.dt.rowTrackBy);
                i0__namespace.ɵɵadvance(6);
                i0__namespace.ɵɵproperty("ngIf", !ctx.dt.virtualScroll)("ngIfElse", _r6);
                i0__namespace.ɵɵadvance(5);
                i0__namespace.ɵɵclassMap(ctx.tableClasses.TableScrollableFooter);
                i0__namespace.ɵɵadvance(6);
                i0__namespace.ɵɵclassMap(ctx.tableClasses.TableScrollableFooterTable);
                i0__namespace.ɵɵproperty("ngClass", ctx.dt.tableStyleClass)("ngStyle", ctx.dt.tableStyle);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx.frozen ? ctx.dt.frozenColGroupTemplate || ctx.dt.colGroupTemplate : ctx.dt.colGroupTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(28, _c10, ctx.columns));
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx.frozen ? ctx.dt.frozenFooterTemplate || ctx.dt.footerTemplate : ctx.dt.footerTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction1(30, _c10, ctx.columns));
            }
        }, encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(ScrollableView, [{
                type: i0.Component,
                args: [{
                        // eslint-disable-next-line @angular-eslint/component-selector
                        selector: '[pScrollableView]',
                        template: "\n    <div #scrollHeader\n         [class]=\"tableClasses.TableScrollableHeader\"\n         class=\"ui-widget-header\">\n      <div #scrollHeaderBox class=\"ui-table-scrollable-header-box\">\n        <table\n          [class]=\"tableClasses.TableScrollableHeaderTable\"\n          [ngClass]=\"dt.tableStyleClass\"\n          [ngStyle]=\"dt.tableStyle\">\n          <ng-container\n            *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n          <thead class=\"ui-table-thead\">\n          <ng-container\n            *ngTemplateOutlet=\"frozen ? dt.frozenHeaderTemplate||dt.headerTemplate : dt.headerTemplate; context {$implicit: columns}\"></ng-container>\n          </thead>\n          <tbody class=\"ui-table-tbody\">\n          <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"dt.frozenValue\" [ngForTrackBy]=\"dt.rowTrackBy\">\n            <ng-container\n              *ngTemplateOutlet=\"dt.frozenRowsTemplate; context: {$implicit: rowData, rowIndex: rowIndex, columns: columns}\"></ng-container>\n          </ng-template>\n          </tbody>\n        </table>\n      </div>\n    </div>\n    <ng-container *ngIf=\"!dt.virtualScroll; else virtualScrollTemplate\">\n      <div #scrollBody\n           [class]=\"tableClasses.TableScrollableBody\"\n           [ngStyle]=\"{'height': dt.scrollHeight !== 'flex' ? scrollHeight : undefined}\">\n        <table #scrollTable\n               [ngClass]=\"dt.tableStyleClass\"\n               [ngStyle]=\"dt.tableStyle\"\n               [class]=\"tableClasses.TableScrollableBodyTable\">\n          <ng-container\n            *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n          <tbody class=\"ui-table-tbody\"\n                 [pTableBody]=\"columns\"\n                 [pTableBodyTemplate]=\"frozen ? dt.frozenBodyTemplate||dt.bodyTemplate : dt.bodyTemplate\"\n                 [frozen]=\"frozen\"></tbody>\n        </table>\n        <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n        <adapt-table-infinite-scrolling-loader *ngIf=\"canShowInfiniteScrollingLoader()\"\n                                               [infiniteScrollLoading]=\"dt.loadingMore\"></adapt-table-infinite-scrolling-loader>\n      </div>\n    </ng-container>\n    <ng-template #virtualScrollTemplate>\n      <cdk-virtual-scroll-viewport [itemSize]=\"dt.virtualRowHeight\"\n                                   [style.height]=\"dt.scrollHeight !== 'flex' ? scrollHeight : undefined\"\n                                   [minBufferPx]=\"dt.minBufferPx\"\n                                   [maxBufferPx]=\"dt.maxBufferPx\"\n                                   (scrolledIndexChange)=\"onScrollIndexChange($event)\"\n                                   [ngClass]=\"{'ui-table-virtual-scrollable-body_empty': dt.isEmpty()}\"\n                                   [class]=\"tableClasses.TableVirtualScrollableBody\">\n        <table #scrollTable\n               [ngClass]=\"dt.tableStyleClass\"\n               [ngStyle]=\"dt.tableStyle\"\n               [class]=\"tableClasses.TableScrollableBodyTable\">\n          <ng-container\n            *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n          <tbody class=\"ui-table-tbody\"\n                 [pTableBody]=\"columns\"\n                 [pTableBodyTemplate]=\"frozen ? dt.frozenBodyTemplate||dt.bodyTemplate : dt.bodyTemplate\"\n                 [frozen]=\"frozen\"></tbody>\n        </table>\n        <div #scrollableAligner style=\"background-color:transparent\" *ngIf=\"frozen\"></div>\n        <adapt-table-infinite-scrolling-loader *ngIf=\"canShowInfiniteScrollingLoader()\"\n                                               [infiniteScrollLoading]=\"dt.loadingMore\"></adapt-table-infinite-scrolling-loader>\n      </cdk-virtual-scroll-viewport>\n    </ng-template>\n    <div #scrollFooter [class]=\"tableClasses.TableScrollableFooter\" class=\"ui-widget-header\">\n      <div #scrollFooterBox class=\"ui-table-scrollable-footer-box\">\n        <table\n          [class]=\"tableClasses.TableScrollableFooterTable\"\n          [ngClass]=\"dt.tableStyleClass\"\n          [ngStyle]=\"dt.tableStyle\">\n          <ng-container\n            *ngTemplateOutlet=\"frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}\"></ng-container>\n          <tfoot class=\"ui-table-tfoot\">\n          <ng-container\n            *ngTemplateOutlet=\"frozen ? dt.frozenFooterTemplate||dt.footerTemplate : dt.footerTemplate; context {$implicit: columns}\"></ng-container>\n          </tfoot>\n        </table>\n      </div>\n    </div>\n  ",
                        changeDetection: i0.ChangeDetectionStrategy.Default
                    }]
            }], function () { return [{ type: AdaptTableComponent }, { type: i0__namespace.ElementRef }, { type: i0__namespace.NgZone }, { type: i4__namespace.EventManager }]; }, { columns: [{
                    type: i0.Input,
                    args: ['pScrollableView']
                }], frozen: [{
                    type: i0.Input
                }], scrollHeaderViewChild: [{
                    type: i0.ViewChild,
                    args: ['scrollHeader', { static: false }]
                }], scrollHeaderBoxViewChild: [{
                    type: i0.ViewChild,
                    args: ['scrollHeaderBox', { static: false }]
                }], scrollBodyViewChild: [{
                    type: i0.ViewChild,
                    args: ['scrollBody', { static: false }]
                }], scrollTableViewChild: [{
                    type: i0.ViewChild,
                    args: ['scrollTable', { static: false }]
                }], scrollFooterViewChild: [{
                    type: i0.ViewChild,
                    args: ['scrollFooter', { static: false }]
                }], scrollFooterBoxViewChild: [{
                    type: i0.ViewChild,
                    args: ['scrollFooterBox', { static: false }]
                }], scrollableAlignerViewChild: [{
                    type: i0.ViewChild,
                    args: ['scrollableAligner', { static: false }]
                }], virtualScrollBody: [{
                    type: i0.ViewChild,
                    args: [i2$3.CdkVirtualScrollViewport, { static: false }]
                }], scrollHeight: [{
                    type: i0.Input
                }] });
    })();

    var _c0$5 = function (a0, a1, a2) { return { "pi-sort-up": a0, "pi-sort-down": a1, "pi-sort": a2 }; };
    // eslint-disable-next-line @angular-eslint/component-class-suffix
    var SortIcon = /** @class */ (function () {
        function SortIcon(dt) {
            var _this = this;
            this.dt = dt;
            this.subscription = this.dt.tableService.sortSource$.subscribe(function () {
                _this.updateSortState();
            });
        }
        SortIcon.prototype.ngOnInit = function () {
            this.updateSortState();
        };
        SortIcon.prototype.onClick = function (event) {
            event.preventDefault();
        };
        SortIcon.prototype.updateSortState = function () {
            if (this.dt.sortMode === 'single') {
                this.sortOrder = this.dt.isSorted(this.field) ? this.dt.sortOrder : 0;
            }
            else if (this.dt.sortMode === 'multiple') {
                var sortMeta = this.dt.getSortMeta(this.field);
                this.sortOrder = sortMeta ? sortMeta.order : 0;
            }
        };
        SortIcon.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        return SortIcon;
    }());
    SortIcon.ɵfac = function SortIcon_Factory(t) { return new (t || SortIcon)(i0__namespace.ɵɵdirectiveInject(Table)); };
    SortIcon.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: SortIcon, selectors: [["p-sortIcon"]], inputs: { field: "field" }, decls: 3, vars: 5, consts: [[1, "ui-sortable-column-icon", "pi", "pi-fw", 3, "ngClass"]], template: function SortIcon_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtext(0, "\n    ");
                i0__namespace.ɵɵelement(1, "i", 0);
                i0__namespace.ɵɵtext(2, "\n  ");
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction3(1, _c0$5, ctx.sortOrder === 1, ctx.sortOrder === -1, ctx.sortOrder === 0));
            }
        }, directives: [i2__namespace$1.NgClass], encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(SortIcon, [{
                type: i0.Component,
                args: [{
                        // eslint-disable-next-line @angular-eslint/component-selector
                        selector: 'p-sortIcon',
                        template: "\n    <i class=\"ui-sortable-column-icon pi pi-fw\"\n       [ngClass]=\"{'pi-sort-up': sortOrder === 1, 'pi-sort-down': sortOrder === -1, 'pi-sort': sortOrder === 0}\"></i>\n  "
                    }]
            }], function () { return [{ type: Table }]; }, { field: [{
                    type: i0.Input
                }] });
    })();

    // eslint-disable-next-line @angular-eslint/directive-class-suffix
    var SortableColumn = /** @class */ (function () {
        function SortableColumn(dt) {
            this.dt = dt;
        }
        SortableColumn.prototype.ngOnInit = function () {
            var _this = this;
            if (this.dt.isSorted(this.field)) {
                this.sortOrder = this.dt.isColumnSortOrderAsc(this.field) ? 'ascending' : 'descending';
            }
            else {
                this.sortOrder = 'none';
            }
            if (this.isEnabled()) {
                this.subscription = this.dt.tableService.sortSource$.subscribe(function (sortMeta) {
                    // Add timeout to update sorting state after 'sortField' and 'sortOrder' inputs changed
                    setTimeout(function () {
                        _this.updateSortState(sortMeta);
                    });
                });
            }
        };
        SortableColumn.prototype.updateSortState = function (sortMeta) {
            var _this = this;
            this.sorted = this.dt.isSorted(this.field);
            this.sortOrder = 'none';
            if (!sortMeta) {
                return;
            }
            if (this.dt.isMultipleSortMode) {
                sortMeta.forEach(function (item) {
                    if (_this.field === item.field) {
                        _this.sortOrder = _this.sorted ? (item.order === 1 ? 'ascending' : 'descending') : 'none';
                    }
                });
            }
            else if (this.dt.isSingleSortMode) {
                this.sortOrder = this.sorted ? (sortMeta.order === 1 ? 'ascending' : 'descending') : 'none';
            }
        };
        SortableColumn.prototype.onClick = function (event) {
            if (this.isEnabled()) {
                this.updateSortState();
                this.dt.sort({
                    originalEvent: event,
                    field: this.field
                });
                dom.DomHandler.clearSelection();
            }
        };
        SortableColumn.prototype.onEnterKey = function (event) {
            this.onClick(event);
        };
        SortableColumn.prototype.isEnabled = function () {
            return this.pSortableColumnDisabled !== true;
        };
        SortableColumn.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        return SortableColumn;
    }());
    SortableColumn.ɵfac = function SortableColumn_Factory(t) { return new (t || SortableColumn)(i0__namespace.ɵɵdirectiveInject(AdaptTableComponent)); };
    SortableColumn.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: SortableColumn, selectors: [["", "pSortableColumn", ""]], hostVars: 7, hostBindings: function SortableColumn_HostBindings(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵlistener("click", function SortableColumn_click_HostBindingHandler($event) { return ctx.onClick($event); })("keydown.enter", function SortableColumn_keydown_enter_HostBindingHandler($event) { return ctx.onEnterKey($event); });
            }
            if (rf & 2) {
                i0__namespace.ɵɵattribute("tabindex", ctx.isEnabled() ? "0" : null)("role", "columnheader")("aria-sort", ctx.sortOrder);
                i0__namespace.ɵɵclassProp("ui-sortable-column", ctx.isEnabled())("ui-state-highlight", ctx.sorted);
            }
        }, inputs: { field: ["pSortableColumn", "field"], pSortableColumnDisabled: "pSortableColumnDisabled" } });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(SortableColumn, [{
                type: i0.Directive,
                args: [{
                        // eslint-disable-next-line @angular-eslint/directive-selector
                        selector: '[pSortableColumn]',
                        // TODO: Refactor this if possible
                        // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                        host: {
                            '[class.ui-sortable-column]': 'isEnabled()',
                            '[class.ui-state-highlight]': 'sorted',
                            '[attr.tabindex]': 'isEnabled() ? "0" : null',
                            '[attr.role]': '"columnheader"',
                            '[attr.aria-sort]': 'sortOrder'
                        }
                    }]
            }], function () { return [{ type: AdaptTableComponent }]; }, { field: [{
                    type: i0.Input,
                    args: ['pSortableColumn']
                }], pSortableColumnDisabled: [{
                    type: i0.Input
                }], onClick: [{
                    type: i0.HostListener,
                    args: ['click', ['$event']]
                }], onEnterKey: [{
                    type: i0.HostListener,
                    args: ['keydown.enter', ['$event']]
                }] });
    })();

    var _c0$4 = ["pTableBody", ""];
    function TableBody_ng_container_1_ng_container_2_ng_template_2_ng_container_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    function TableBody_ng_container_1_ng_container_2_ng_template_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n          ");
            i0__namespace.ɵɵtemplate(1, TableBody_ng_container_1_ng_container_2_ng_template_2_ng_container_1_Template, 1, 0, "ng-container", 2);
            i0__namespace.ɵɵtext(2, "\n        ");
        }
        if (rf & 2) {
            var renderRowData_r7 = ctx.$implicit;
            var rowIndex_r8 = ctx.index;
            var ctx_r6 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r6.pTableBodyTemplate)("ngTemplateOutletContext", ctx_r6.getContext(renderRowData_r7, rowIndex_r8, true));
        }
    }
    function TableBody_ng_container_1_ng_container_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n        ");
            i0__namespace.ɵɵtemplate(2, TableBody_ng_container_1_ng_container_2_ng_template_2_Template, 3, 2, "ng-template", 1);
            i0__namespace.ɵɵtext(3, "\n      ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r4 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r4.dt.getPlainExpandedRenderingRows(ctx_r4.dt.getCurrentPageDisplayingRows()))("ngForTrackBy", ctx_r4.dt.trackByForRenderingRows);
        }
    }
    function TableBody_ng_container_1_ng_container_4_ng_template_2_ng_container_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    function TableBody_ng_container_1_ng_container_4_ng_template_2_ng_container_3_ng_container_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    function TableBody_ng_container_1_ng_container_4_ng_template_2_ng_container_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n            ");
            i0__namespace.ɵɵtemplate(2, TableBody_ng_container_1_ng_container_4_ng_template_2_ng_container_3_ng_container_2_Template, 1, 0, "ng-container", 2);
            i0__namespace.ɵɵtext(3, "\n          ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r16 = i0__namespace.ɵɵnextContext();
            var renderRowData_r11 = ctx_r16.$implicit;
            var rowIndex_r12 = ctx_r16.index;
            var ctx_r14 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r14.dt.expandedRowTemplateRef)("ngTemplateOutletContext", ctx_r14.getContext(renderRowData_r11, rowIndex_r12));
        }
    }
    function TableBody_ng_container_1_ng_container_4_ng_template_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n          ");
            i0__namespace.ɵɵtemplate(1, TableBody_ng_container_1_ng_container_4_ng_template_2_ng_container_1_Template, 1, 0, "ng-container", 2);
            i0__namespace.ɵɵtext(2, "\n          ");
            i0__namespace.ɵɵtemplate(3, TableBody_ng_container_1_ng_container_4_ng_template_2_ng_container_3_Template, 4, 2, "ng-container", 0);
            i0__namespace.ɵɵtext(4, "\n        ");
        }
        if (rf & 2) {
            var renderRowData_r11 = ctx.$implicit;
            var rowIndex_r12 = ctx.index;
            var ctx_r10 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r10.pTableBodyTemplate)("ngTemplateOutletContext", ctx_r10.getContext(renderRowData_r11, rowIndex_r12, true, true));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r10.dt.isRowExpanded(renderRowData_r11));
        }
    }
    function TableBody_ng_container_1_ng_container_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n        ");
            i0__namespace.ɵɵtemplate(2, TableBody_ng_container_1_ng_container_4_ng_template_2_Template, 5, 3, "ng-template", 1);
            i0__namespace.ɵɵtext(3, "\n      ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r5 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r5.dt.getPlainExpandedRenderingRows(ctx_r5.dt.getCurrentPageDisplayingRows()))("ngForTrackBy", ctx_r5.dt.trackByForRenderingRows);
        }
    }
    function TableBody_ng_container_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n      ");
            i0__namespace.ɵɵtemplate(2, TableBody_ng_container_1_ng_container_2_Template, 4, 2, "ng-container", 0);
            i0__namespace.ɵɵtext(3, "\n      ");
            i0__namespace.ɵɵtemplate(4, TableBody_ng_container_1_ng_container_4_Template, 4, 2, "ng-container", 0);
            i0__namespace.ɵɵtext(5, "\n    ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", !ctx_r0.dt.expandedRowTemplateRef);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r0.dt.expandedRowTemplateRef);
        }
    }
    function TableBody_ng_container_3_ng_container_2_ng_template_2_ng_container_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    function TableBody_ng_container_3_ng_container_2_ng_template_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n          ");
            i0__namespace.ɵɵtemplate(1, TableBody_ng_container_3_ng_container_2_ng_template_2_ng_container_1_Template, 1, 0, "ng-container", 2);
            i0__namespace.ɵɵtext(2, "\n        ");
        }
        if (rf & 2) {
            var renderRowData_r20 = ctx.$implicit;
            var rowIndex_r21 = ctx.index;
            var ctx_r19 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r19.pTableBodyTemplate)("ngTemplateOutletContext", ctx_r19.getContext(renderRowData_r20, rowIndex_r21, true));
        }
    }
    function TableBody_ng_container_3_ng_container_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n        ");
            i0__namespace.ɵɵtemplate(2, TableBody_ng_container_3_ng_container_2_ng_template_2_Template, 3, 2, "ng-template", 3);
            i0__namespace.ɵɵtext(3, "\n      ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r17 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("cdkVirtualForOf", ctx_r17.dt.getPlainExpandedRenderingRows(ctx_r17.dt.getCurrentPageDisplayingRows()))("cdkVirtualForTemplateCacheSize", 0)("cdkVirtualForTrackBy", ctx_r17.dt.trackByForRenderingRows);
        }
    }
    function TableBody_ng_container_3_ng_container_4_ng_template_2_ng_container_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    function TableBody_ng_container_3_ng_container_4_ng_template_2_ng_container_3_ng_container_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    function TableBody_ng_container_3_ng_container_4_ng_template_2_ng_container_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n            ");
            i0__namespace.ɵɵtemplate(2, TableBody_ng_container_3_ng_container_4_ng_template_2_ng_container_3_ng_container_2_Template, 1, 0, "ng-container", 2);
            i0__namespace.ɵɵtext(3, "\n          ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r29 = i0__namespace.ɵɵnextContext();
            var renderRowData_r24 = ctx_r29.$implicit;
            var rowIndex_r25 = ctx_r29.index;
            var ctx_r27 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r27.dt.expandedRowTemplateRef)("ngTemplateOutletContext", ctx_r27.getContext(renderRowData_r24, rowIndex_r25));
        }
    }
    function TableBody_ng_container_3_ng_container_4_ng_template_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n          ");
            i0__namespace.ɵɵtemplate(1, TableBody_ng_container_3_ng_container_4_ng_template_2_ng_container_1_Template, 1, 0, "ng-container", 2);
            i0__namespace.ɵɵtext(2, "\n          ");
            i0__namespace.ɵɵtemplate(3, TableBody_ng_container_3_ng_container_4_ng_template_2_ng_container_3_Template, 4, 2, "ng-container", 0);
            i0__namespace.ɵɵtext(4, "\n        ");
        }
        if (rf & 2) {
            var renderRowData_r24 = ctx.$implicit;
            var rowIndex_r25 = ctx.index;
            var ctx_r23 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r23.pTableBodyTemplate)("ngTemplateOutletContext", ctx_r23.getContext(renderRowData_r24, rowIndex_r25, true, true));
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r23.dt.isRowExpanded(renderRowData_r24));
        }
    }
    function TableBody_ng_container_3_ng_container_4_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n        ");
            i0__namespace.ɵɵtemplate(2, TableBody_ng_container_3_ng_container_4_ng_template_2_Template, 5, 3, "ng-template", 3);
            i0__namespace.ɵɵtext(3, "\n      ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r18 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("cdkVirtualForOf", ctx_r18.dt.getPlainExpandedRenderingRows(ctx_r18.dt.getCurrentPageDisplayingRows()))("cdkVirtualForTemplateCacheSize", 0)("cdkVirtualForTrackBy", ctx_r18.dt.trackByForRenderingRows);
        }
    }
    function TableBody_ng_container_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n      ");
            i0__namespace.ɵɵtemplate(2, TableBody_ng_container_3_ng_container_2_Template, 4, 3, "ng-container", 0);
            i0__namespace.ɵɵtext(3, "\n      ");
            i0__namespace.ɵɵtemplate(4, TableBody_ng_container_3_ng_container_4_Template, 4, 3, "ng-container", 0);
            i0__namespace.ɵɵtext(5, "\n    ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", !ctx_r1.dt.expandedRowTemplateRef);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r1.dt.expandedRowTemplateRef);
        }
    }
    function TableBody_ng_container_5_ng_container_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    var _c1$3 = function (a0, a1) { return { $implicit: a0, frozen: a1 }; };
    function TableBody_ng_container_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n      ");
            i0__namespace.ɵɵtemplate(2, TableBody_ng_container_5_ng_container_2_Template, 1, 0, "ng-container", 2);
            i0__namespace.ɵɵtext(3, "\n    ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r2 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r2.dt.loadingBodyTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction2(2, _c1$3, ctx_r2.pTableBody, ctx_r2.frozen));
        }
    }
    function TableBody_ng_container_7_ng_container_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainer(0);
        }
    }
    function TableBody_ng_container_7_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n      ");
            i0__namespace.ɵɵtemplate(2, TableBody_ng_container_7_ng_container_2_Template, 1, 0, "ng-container", 2);
            i0__namespace.ɵɵtext(3, "\n    ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var ctx_r3 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", ctx_r3.dt.emptyMessageTemplate)("ngTemplateOutletContext", i0__namespace.ɵɵpureFunction2(2, _c1$3, ctx_r3.pTableBody, ctx_r3.frozen));
        }
    }
    // eslint-disable-next-line @angular-eslint/component-class-suffix
    var TableBody = /** @class */ (function () {
        function TableBody(dt, cd) {
            var _this = this;
            this.dt = dt;
            this.cd = cd;
            this._destroyed$ = new rxjs.ReplaySubject(1);
            this.subscription = this.dt.tableService.valueSource$.subscribe(function () {
                if (_this.dt.virtualScroll) {
                    _this.cd.detectChanges();
                }
            });
        }
        TableBody.prototype.ngAfterViewInit = function () {
            var _this = this;
            // Because of the height changes after group expanded the ExpressionChangedAfterItHasBeenCheckedError error is appeared
            // To avoid that issue re-attach virtual scroll
            if (this.dt.virtualScroll) {
                this.dt.groupExpansion
                    .pipe(operators.takeUntil(this._destroyed$))
                    .subscribe(function () {
                    _this.dt.scrollableView.virtualScrollBody.detach();
                    setTimeout(function () {
                        _this.dt.scrollableView.virtualScrollBody.attach(_this.cdkVirtualForOf);
                    });
                });
            }
        };
        TableBody.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
            this._destroyed$.next(true);
            this._destroyed$.complete();
        };
        TableBody.prototype.getContext = function (renderRowData, rowIndex, isEditable, isExpandable) {
            if (isEditable === void 0) { isEditable = false; }
            if (isExpandable === void 0) { isExpandable = false; }
            var context = {
                $implicit: renderRowData,
                rowIndex: this.dt.paginator ? (this.dt.first + rowIndex) : rowIndex,
                columns: this.pTableBody
            };
            if (isEditable) {
                context.editing = (this.dt.editMode === 'row' && this.dt.isRowEditing(renderRowData));
            }
            if (isExpandable) {
                context.expanded = this.dt.isRowExpanded(renderRowData);
            }
            return context;
        };
        return TableBody;
    }());
    TableBody.ɵfac = function TableBody_Factory(t) { return new (t || TableBody)(i0__namespace.ɵɵdirectiveInject(AdaptTableComponent), i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef)); };
    TableBody.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: TableBody, selectors: [["", "pTableBody", ""]], viewQuery: function TableBody_Query(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵviewQuery(i2$3.CdkVirtualForOf, 5);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.cdkVirtualForOf = _t.first);
            }
        }, inputs: { pTableBody: "pTableBody", pTableBodyTemplate: "pTableBodyTemplate", frozen: "frozen" }, attrs: _c0$4, decls: 9, vars: 4, consts: [[4, "ngIf"], ["ngFor", "", 3, "ngForOf", "ngForTrackBy"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["cdkVirtualFor", "", 3, "cdkVirtualForOf", "cdkVirtualForTemplateCacheSize", "cdkVirtualForTrackBy"]], template: function TableBody_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtext(0, "\n    ");
                i0__namespace.ɵɵtemplate(1, TableBody_ng_container_1_Template, 6, 2, "ng-container", 0);
                i0__namespace.ɵɵtext(2, "\n\n    ");
                i0__namespace.ɵɵtemplate(3, TableBody_ng_container_3_Template, 6, 2, "ng-container", 0);
                i0__namespace.ɵɵtext(4, "\n    ");
                i0__namespace.ɵɵtemplate(5, TableBody_ng_container_5_Template, 4, 5, "ng-container", 0);
                i0__namespace.ɵɵtext(6, "\n    ");
                i0__namespace.ɵɵtemplate(7, TableBody_ng_container_7_Template, 4, 5, "ng-container", 0);
                i0__namespace.ɵɵtext(8, "\n  ");
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(1);
                i0__namespace.ɵɵproperty("ngIf", !ctx.dt.virtualScroll);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.dt.virtualScroll);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.dt.loading);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.dt.isEmpty() && !ctx.dt.loading);
            }
        }, directives: [i2__namespace$1.NgIf, i2__namespace$1.NgForOf, i2__namespace$1.NgTemplateOutlet, i2__namespace$3.CdkVirtualForOf], encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(TableBody, [{
                type: i0.Component,
                args: [{
                        selector: '[pTableBody]',
                        template: "\n    <ng-container *ngIf=\"!dt.virtualScroll\">\n      <ng-container *ngIf=\"!dt.expandedRowTemplateRef\">\n        <ng-template ngFor\n                     let-renderRowData\n                     let-rowIndex=\"index\"\n                     [ngForOf]=\"dt.getPlainExpandedRenderingRows(dt.getCurrentPageDisplayingRows())\"\n                     [ngForTrackBy]=\"dt.trackByForRenderingRows\">\n          <ng-container\n            *ngTemplateOutlet=\"pTableBodyTemplate; context: getContext(renderRowData, rowIndex, true)\"></ng-container>\n        </ng-template>\n      </ng-container>\n      <ng-container *ngIf=\"dt.expandedRowTemplateRef\">\n        <ng-template ngFor\n                     let-renderRowData\n                     let-rowIndex=\"index\"\n                     [ngForOf]=\"dt.getPlainExpandedRenderingRows(dt.getCurrentPageDisplayingRows())\"\n                     [ngForTrackBy]=\"dt.trackByForRenderingRows\">\n          <ng-container\n            *ngTemplateOutlet=\"pTableBodyTemplate; context: getContext(renderRowData, rowIndex, true, true)\"></ng-container>\n          <ng-container *ngIf=\"dt.isRowExpanded(renderRowData)\">\n            <ng-container\n              *ngTemplateOutlet=\"dt.expandedRowTemplateRef; context: getContext(renderRowData, rowIndex)\"></ng-container>\n          </ng-container>\n        </ng-template>\n      </ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"dt.virtualScroll\">\n      <ng-container *ngIf=\"!dt.expandedRowTemplateRef\">\n        <ng-template cdkVirtualFor\n                     let-renderRowData\n                     let-rowIndex=\"index\"\n                     [cdkVirtualForOf]=\"dt.getPlainExpandedRenderingRows(dt.getCurrentPageDisplayingRows())\"\n                     [cdkVirtualForTemplateCacheSize]=\"0\"\n                     [cdkVirtualForTrackBy]=\"dt.trackByForRenderingRows\">\n          <ng-container\n            *ngTemplateOutlet=\"pTableBodyTemplate; context: getContext(renderRowData, rowIndex, true)\"></ng-container>\n        </ng-template>\n      </ng-container>\n      <ng-container *ngIf=\"dt.expandedRowTemplateRef\">\n        <ng-template cdkVirtualFor\n                     let-renderRowData\n                     let-rowIndex=\"index\"\n                     [cdkVirtualForOf]=\"dt.getPlainExpandedRenderingRows(dt.getCurrentPageDisplayingRows())\"\n                     [cdkVirtualForTemplateCacheSize]=\"0\"\n                     [cdkVirtualForTrackBy]=\"dt.trackByForRenderingRows\">\n          <ng-container\n            *ngTemplateOutlet=\"pTableBodyTemplate; context: getContext(renderRowData, rowIndex, true, true)\"></ng-container>\n          <ng-container *ngIf=\"dt.isRowExpanded(renderRowData)\">\n            <ng-container\n              *ngTemplateOutlet=\"dt.expandedRowTemplateRef; context: getContext(renderRowData, rowIndex)\"></ng-container>\n          </ng-container>\n        </ng-template>\n      </ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"dt.loading\">\n      <ng-container\n        *ngTemplateOutlet=\"dt.loadingBodyTemplate; context: {$implicit: pTableBody, frozen: frozen}\"></ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"dt.isEmpty() && !dt.loading\">\n      <ng-container\n        *ngTemplateOutlet=\"dt.emptyMessageTemplate; context: {$implicit: pTableBody, frozen: frozen}\"></ng-container>\n    </ng-container>\n  "
                    }]
            }], function () { return [{ type: AdaptTableComponent }, { type: i0__namespace.ChangeDetectorRef }]; }, { pTableBody: [{
                    type: i0.Input
                }], pTableBodyTemplate: [{
                    type: i0.Input
                }], frozen: [{
                    type: i0.Input
                }], cdkVirtualForOf: [{
                    type: i0.ViewChild,
                    args: [i2$3.CdkVirtualForOf]
                }] });
    })();

    var AdaptTableInfiniteScrollingLoaderComponent = /** @class */ (function () {
        function AdaptTableInfiniteScrollingLoaderComponent() {
            this.busyConfig = this.getBusyConfig();
            this._destroyed$ = new rxjs.ReplaySubject(1);
        }
        Object.defineProperty(AdaptTableInfiniteScrollingLoaderComponent.prototype, "infiniteScrollLoading", {
            set: function (value) {
                var busyConfigCopy = Object.assign({}, this.busyConfig);
                if (value) {
                    if (this.busyConfig.busy) {
                        this.busyConfig.busy.unsubscribe();
                    }
                    busyConfigCopy.busy = new rxjs.Observable().pipe(operators.takeUntil(this._destroyed$)).subscribe();
                    this.busyConfig = busyConfigCopy;
                }
                else if (this.busyConfig.busy) {
                    this.busyConfig.busy.unsubscribe();
                    busyConfigCopy.busy = null;
                    this.busyConfig = busyConfigCopy;
                }
            },
            enumerable: false,
            configurable: true
        });
        AdaptTableInfiniteScrollingLoaderComponent.prototype.ngOnDestroy = function () {
            this._destroyed$.next(true);
            this._destroyed$.complete();
        };
        AdaptTableInfiniteScrollingLoaderComponent.prototype.getBusyConfig = function () {
            return {
                busy: null,
                backdrop: true,
                sticky: true,
                message: '',
                loaderType: 'section',
                inOutType: i1.LoaderInOutType.fade,
            };
        };
        return AdaptTableInfiniteScrollingLoaderComponent;
    }());
    AdaptTableInfiniteScrollingLoaderComponent.ɵfac = function AdaptTableInfiniteScrollingLoaderComponent_Factory(t) { return new (t || AdaptTableInfiniteScrollingLoaderComponent)(); };
    AdaptTableInfiniteScrollingLoaderComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: AdaptTableInfiniteScrollingLoaderComponent, selectors: [["adapt-table-infinite-scrolling-loader"]], inputs: { infiniteScrollLoading: "infiniteScrollLoading" }, decls: 5, vars: 1, consts: [[1, "at-infinite-scrolling-loader"], [3, "ngBusy"]], template: function AdaptTableInfiniteScrollingLoaderComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0);
                i0__namespace.ɵɵtext(1, "\n  ");
                i0__namespace.ɵɵelement(2, "div", 1);
                i0__namespace.ɵɵtext(3, "\n");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(4, "\n");
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngBusy", ctx.busyConfig);
            }
        }, directives: [i1__namespace.AdaptBusyDirective], encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptTableInfiniteScrollingLoaderComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'adapt-table-infinite-scrolling-loader',
                        templateUrl: './table-infinite-scrolling-loader.html',
                        encapsulation: i0.ViewEncapsulation.None,
                    }]
            }], null, { infiniteScrollLoading: [{
                    type: i0.Input
                }] });
    })();

    /*
    * This module was copied from https://github.com/primefaces/primeng/releases/tag/9.0.5
    * Reason: maintain all needed features and bug fixes on ADAPT side
    * */
    var TableModule = /** @class */ (function () {
        function TableModule() {
        }
        return TableModule;
    }());
    TableModule.ɵfac = function TableModule_Factory(t) { return new (t || TableModule)(); };
    TableModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: TableModule });
    TableModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i2$1.CommonModule,
                paginator.PaginatorModule,
                i2$3.ScrollingModule,
                i1.AdaptBusyModule
            ]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(TableModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i2$1.CommonModule,
                            paginator.PaginatorModule,
                            i2$3.ScrollingModule,
                            i1.AdaptBusyModule
                        ],
                        exports: [
                            Table,
                            SortableColumn,
                            RowToggler,
                            ResizableColumn,
                            ReorderableColumn,
                            SortIcon,
                            EditableRow,
                            ScrollableView,
                            TableBody,
                            AdaptTableInfiniteScrollingLoaderComponent
                        ],
                        declarations: [
                            Table,
                            SortableColumn,
                            RowToggler,
                            ResizableColumn,
                            ReorderableColumn,
                            TableBody,
                            ScrollableView,
                            SortIcon,
                            EditableRow,
                            AdaptTableInfiniteScrollingLoaderComponent,
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(TableModule, { declarations: [Table,
                SortableColumn,
                RowToggler,
                ResizableColumn,
                ReorderableColumn,
                TableBody,
                ScrollableView,
                SortIcon,
                EditableRow,
                AdaptTableInfiniteScrollingLoaderComponent], imports: [i2$1.CommonModule,
                paginator.PaginatorModule,
                i2$3.ScrollingModule,
                i1.AdaptBusyModule], exports: [Table,
                SortableColumn,
                RowToggler,
                ResizableColumn,
                ReorderableColumn,
                SortIcon,
                EditableRow,
                ScrollableView,
                TableBody,
                AdaptTableInfiniteScrollingLoaderComponent] });
    })();
    i0__namespace.ɵɵsetComponentScope(ScrollableView, [i2__namespace$1.NgClass, i2__namespace$1.NgStyle, i2__namespace$1.NgTemplateOutlet, i2__namespace$1.NgForOf, i2__namespace$1.NgIf, TableBody,
        AdaptTableInfiniteScrollingLoaderComponent, i2__namespace$3.CdkVirtualScrollViewport, i2__namespace$3.CdkFixedSizeVirtualScroll], []);

    var AdaptTableStorageService = /** @class */ (function () {
        function AdaptTableStorageService() {
        }
        AdaptTableStorageService.prototype.getData = function (stateKey, storageType) {
            if (storageType === exports.StorageType.Local) {
                try {
                    return JSON.parse(localStorage.getItem(stateKey));
                }
                catch (error) {
                    return null;
                }
            }
            if (storageType === exports.StorageType.Session) {
                try {
                    return JSON.parse(sessionStorage.getItem(stateKey));
                }
                catch (error) {
                    return null;
                }
            }
        };
        AdaptTableStorageService.prototype.updateData = function (stateKey, dataToUpdate, storageType) {
            var restoredState = Object.assign(Object.assign({}, this.getData(stateKey, storageType)), dataToUpdate);
            if (restoredState) {
                // Delete empty data from storage
                Object.keys(restoredState).forEach(function (key) { return lodashEs.isEmpty(restoredState[key]) && delete restoredState[key]; });
                if (storageType === exports.StorageType.Local) {
                    localStorage.setItem(stateKey, JSON.stringify(restoredState));
                }
                if (storageType === exports.StorageType.Session) {
                    sessionStorage.setItem(stateKey, JSON.stringify(restoredState));
                }
            }
        };
        // TODO: For future, think how to restore table state correctly
        AdaptTableStorageService.prototype.clearData = function (stateKey) {
            localStorage.removeItem(stateKey);
            sessionStorage.removeItem(stateKey);
        };
        return AdaptTableStorageService;
    }());
    AdaptTableStorageService.ɵfac = function AdaptTableStorageService_Factory(t) { return new (t || AdaptTableStorageService)(); };
    AdaptTableStorageService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: AdaptTableStorageService, factory: AdaptTableStorageService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptTableStorageService, [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], null, null);
    })();

    var AdaptTableStateDirective = /** @class */ (function () {
        function AdaptTableStateDirective(_element, _table, _adaptTableStorageService, _resizeService) {
            this._element = _element;
            this._table = _table;
            this._adaptTableStorageService = _adaptTableStorageService;
            this._resizeService = _resizeService;
            this.stateRestore = new i0.EventEmitter();
            this._destroyed$ = new rxjs.ReplaySubject(1);
        }
        AdaptTableStateDirective.prototype.ngOnInit = function () {
            this._subscribeOnTableEvents();
            this._restoreTableState();
        };
        AdaptTableStateDirective.prototype.ngOnDestroy = function () {
            this._destroyed$.next(true);
            this._destroyed$.complete();
        };
        AdaptTableStateDirective.prototype._subscribeOnSort = function () {
            var _this = this;
            this._table.onSort
                .pipe(operators.takeUntil(this._destroyed$))
                .subscribe(function (data) {
                if (_this._table.isSingleSortMode) {
                    _this._adaptTableStorageService.updateData(_this.stateKey, { singleSortMeta: data }, exports.StorageType.Local);
                }
                else {
                    _this._adaptTableStorageService.updateData(_this.stateKey, { multiSortMeta: data.multisortmeta }, exports.StorageType.Local);
                }
            });
        };
        AdaptTableStateDirective.prototype._subscribeOnColumnReorder = function () {
            var _this = this;
            this._table.onColReorder
                .pipe(operators.takeUntil(this._destroyed$))
                .subscribe(function (data) {
                var columnOrder = data.columns.map(function (column) { return column.field; });
                _this._adaptTableStorageService.updateData(_this.stateKey, { columnOrder: columnOrder }, exports.StorageType.Local);
            });
        };
        AdaptTableStateDirective.prototype._subscribeOnColumnsResize = function () {
            var _this = this;
            this._table.onColResize
                .pipe(operators.takeUntil(this._destroyed$))
                .subscribe(function () {
                var _a;
                var widthMap = _this._table.dataHeaderCells.map(function (cell) {
                    return {
                        fields: cell.data.renderingColumn.columnsConfigs.map(function (col) { return col.field; }),
                        width: cell.element.nativeElement.offsetWidth
                    };
                });
                var mergedColumns = _this._table.mergeColumns && _this._table.dataHeaderCells
                    .filter(function (cell) { return cell.data.renderingColumn.type === exports.RenderingColumnType.Merged; });
                // Need to save merged columns in separate property to correctly restore columns and merged columns
                _this._adaptTableStorageService.updateData(_this.stateKey, (_a = {}, _a[mergedColumns && mergedColumns.length ? 'columnMergedWidths' : 'columnWidths'] = widthMap, _a), exports.StorageType.Local);
            });
        };
        AdaptTableStateDirective.prototype._subscribeOnFilter = function () {
            var _this = this;
            this._table.onFilter
                .pipe(operators.takeUntil(this._destroyed$))
                .subscribe(function (data) {
                _this._adaptTableStorageService.updateData(_this.stateKey, { filters: data.filters }, exports.StorageType.Session);
            });
        };
        AdaptTableStateDirective.prototype._subscribeOnColumnVisibilityChange = function () {
            var _this = this;
            this._table.columnsVisibilityChange
                .pipe(operators.takeUntil(this._destroyed$))
                .subscribe(function () {
                var columnsVisibility = _this._table.columns.map(function (col) { return ({ fields: [col.field], hidden: !_this._table.isColumnVisible(col) }); });
                _this._adaptTableStorageService.updateData(_this.stateKey, { columnsVisibility: columnsVisibility }, exports.StorageType.Session);
            });
        };
        AdaptTableStateDirective.prototype._restoreSingleSorting = function (state) {
            var sortingColumn = this._table.columns.find(function (column) { return column.field === state.singleSortMeta.field; });
            // Apply only for columns that are sortable and not hidden
            if (this._table.isSortableColumn(sortingColumn) && this._table.isColumnVisible(sortingColumn)) {
                this._table.sortField = state.singleSortMeta.field;
                this._table.sortOrder = state.singleSortMeta.order;
            }
        };
        AdaptTableStateDirective.prototype._restoreMultipleSorting = function (state) {
            var _this = this;
            // Apply only for columns that are sortable and not hidden
            var multiSortMetaToRestore = state.multiSortMeta.filter(function (sortMeta) {
                return _this._table.columns.some(function (column) { return _this._table.isSortableColumn(column)
                    && _this._table.isColumnVisible(column)
                    && column.field === sortMeta.field; });
            });
            this._table.updateMultiSortMeta(multiSortMetaToRestore);
        };
        AdaptTableStateDirective.prototype._restoreColumnsOrder = function (state) {
            // TODO: Changing of reference doesn't trigger columns reordering
            this._table.columns.sort(function (a, b) {
                return state.columnOrder.indexOf(a.field) - state.columnOrder.indexOf(b.field);
            });
        };
        AdaptTableStateDirective.prototype._restoreColumnsWidth = function (state) {
            var columns = __spreadArray([], __read(this._table.columns));
            var columnsForRendering = this._table.getColumnsForRendering(this._table.columns);
            var isMergedColumnsPresent = columnsForRendering.some(function (column) { return column.type === exports.RenderingColumnType.Merged; });
            var columnWidthState = isMergedColumnsPresent && state.columnMergedWidths ? state.columnMergedWidths : state.columnWidths;
            columns.forEach(function (column) {
                var columnWithSavedWidth = columnWidthState && columnWidthState.find(function (columnWidth) { return columnWidth.fields[0] === column.field; });
                column.width = columnWithSavedWidth && columnWithSavedWidth.width.toString() + 'px';
            });
            this._table.columns = columns;
        };
        AdaptTableStateDirective.prototype._restoreFiltering = function (state) {
            var _this = this;
            var restoredFilters = {};
            var _loop_1 = function (columnName) {
                if (Object.prototype.hasOwnProperty.call(state.filters, columnName)) {
                    this_1._table.columns.forEach(function (column) {
                        if (_this._table.isFilterableColumn(column) && column.field === columnName) {
                            restoredFilters[columnName] = state.filters[columnName];
                        }
                    });
                }
            };
            var this_1 = this;
            for (var columnName in state.filters) {
                _loop_1(columnName);
            }
            // TODO: Check do we need restoringFilter property!!!
            this._table.restoringFilter = true;
            this._table.filters = restoredFilters;
            // Need to call _filter() method manually after changing "filters" property
            // because filtering inside primeng table called only on "value" property change
            this._table._filter();
        };
        AdaptTableStateDirective.prototype._restoreColumnsVisibility = function (state) {
            this._table.columns.forEach(function (column) {
                state.columnsVisibility.forEach(function (visibilityState) {
                    if (column.field === visibilityState.fields[0]) {
                        column.hidden = visibilityState.hidden;
                    }
                });
            });
        };
        AdaptTableStateDirective.prototype._subscribeOnTableEvents = function () {
            this._subscribeOnSort();
            this._subscribeOnColumnReorder();
            this._subscribeOnColumnsResize();
            this._subscribeOnFilter();
            this._subscribeOnColumnVisibilityChange();
        };
        AdaptTableStateDirective.prototype._restoreTableState = function () {
            var localState = this._adaptTableStorageService.getData(this.stateKey, exports.StorageType.Local);
            var sessionState = this._adaptTableStorageService.getData(this.stateKey, exports.StorageType.Session);
            if (localState) {
                if (this._table.sortMode === exports.SortMode.Single && localState.singleSortMeta) {
                    this._restoreSingleSorting(localState);
                }
                if (this._table.sortMode === exports.SortMode.Multiple && localState.multiSortMeta) {
                    this._restoreMultipleSorting(localState);
                }
                if (this._table.reorderableColumns && localState.columnOrder) {
                    this._restoreColumnsOrder(localState);
                }
                if (this._table.resizableColumns && (localState.columnWidths || localState.columnMergedWidths)) {
                    this._restoreColumnsWidth(localState);
                }
            }
            if (sessionState) {
                if (this._table.filterable && sessionState.filters) {
                    this._restoreFiltering(sessionState);
                }
                if (sessionState.columnsVisibility) {
                    this._restoreColumnsVisibility(sessionState);
                }
            }
            var tableState = Object.assign(Object.assign({}, localState), sessionState);
            this.stateRestore.emit(lodashEs.isEmpty(tableState) ? null : tableState);
        };
        return AdaptTableStateDirective;
    }());
    AdaptTableStateDirective.ɵfac = function AdaptTableStateDirective_Factory(t) { return new (t || AdaptTableStateDirective)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef), i0__namespace.ɵɵdirectiveInject(AdaptTableComponent), i0__namespace.ɵɵdirectiveInject(AdaptTableStorageService), i0__namespace.ɵɵdirectiveInject(i1__namespace.ResizeService)); };
    AdaptTableStateDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: AdaptTableStateDirective, selectors: [["adapt-table", "adaptTableState", ""]], inputs: { stateKey: ["adaptTableState", "stateKey"] }, outputs: { stateRestore: "stateRestore" } });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptTableStateDirective, [{
                type: i0.Directive,
                args: [{
                        selector: 'adapt-table[adaptTableState]'
                    }]
            }], function () { return [{ type: i0__namespace.ElementRef }, { type: AdaptTableComponent }, { type: AdaptTableStorageService }, { type: i1__namespace.ResizeService }]; }, { stateKey: [{
                    type: i0.Input,
                    args: ['adaptTableState']
                }], stateRestore: [{
                    type: i0.Output
                }] });
    })();

    var _c0$3 = function (a0, a1) { return { id: a0, name: a1 }; };
    var _c1$2 = function (a0) { return [a0]; };
    function AdaptTableHeaderCellMenuComponent_div_12_div_2_div_22_Template(rf, ctx) {
        if (rf & 1) {
            var _r10_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 16);
            i0__namespace.ɵɵtext(1, "\n            ");
            i0__namespace.ɵɵelementStart(2, "div", 17);
            i0__namespace.ɵɵtext(3, "\n              ");
            i0__namespace.ɵɵelementStart(4, "adapt-rx-select", 18);
            i0__namespace.ɵɵlistener("ngModelChange", function AdaptTableHeaderCellMenuComponent_div_12_div_2_div_22_Template_adapt_rx_select_ngModelChange_4_listener($event) { i0__namespace.ɵɵrestoreView(_r10_1); var column_r5 = i0__namespace.ɵɵnextContext().$implicit; var ctx_r8 = i0__namespace.ɵɵnextContext(2); return ctx_r8.changeColumnsSortingOrder($event, column_r5.field); });
            i0__namespace.ɵɵtext(5, "\n              ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(6, "\n            ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(7, "\n\n            ");
            i0__namespace.ɵɵelementStart(8, "div", 19);
            i0__namespace.ɵɵtext(9, "\n              ");
            i0__namespace.ɵɵelementStart(10, "button", 20);
            i0__namespace.ɵɵlistener("click", function AdaptTableHeaderCellMenuComponent_div_12_div_2_div_22_Template_button_click_10_listener() { i0__namespace.ɵɵrestoreView(_r10_1); var column_r5 = i0__namespace.ɵɵnextContext().$implicit; var ctx_r11 = i0__namespace.ɵɵnextContext(2); return ctx_r11.onRemoveCurrentFromSorting(column_r5.field); });
            i0__namespace.ɵɵtext(11);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(12, "\n            ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(13, "\n          ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var column_r5 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r7 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("@menuControlAnimation", undefined);
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵproperty("options", ctx_r7.getSortOrderOptions())("adaptRadarDisableEventSending", true)("optionFormatter", ctx_r7.optionFormatter)("appendToBody", true)("closeOnSelect", true)("ngModel", i0__namespace.ɵɵpureFunction1(12, _c1$2, i0__namespace.ɵɵpureFunction2(9, _c0$3, column_r5.field, ctx_r7.getSortOrderSelectModelName(column_r5.field))))("label", ctx_r7.headerCellMenuTexts.selectSortOrderLabel);
            i0__namespace.ɵɵadvance(7);
            i0__namespace.ɵɵtextInterpolate1("\n                ", ctx_r7.headerCellMenuTexts.removeCurrentFromSortingBtn, "\n              ");
        }
    }
    var _c2$2 = function (a0) { return { "adapt-table-sort-menu__block_first": a0 }; };
    var _c3 = function (a0) { return { "btn-group-padding adapt-table-sort-menu__btn_active": a0 }; };
    function AdaptTableHeaderCellMenuComponent_div_12_div_2_Template(rf, ctx) {
        if (rf & 1) {
            var _r15_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 9);
            i0__namespace.ɵɵtext(1, "\n        ");
            i0__namespace.ɵɵelementStart(2, "div", 10);
            i0__namespace.ɵɵtext(3, "\n          ");
            i0__namespace.ɵɵelementStart(4, "label", 11);
            i0__namespace.ɵɵtext(5, "\n            ");
            i0__namespace.ɵɵelementStart(6, "span");
            i0__namespace.ɵɵtext(7);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(8, "\n          ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(9, "\n\n          ");
            i0__namespace.ɵɵelementStart(10, "div", 12);
            i0__namespace.ɵɵtext(11, "\n            ");
            i0__namespace.ɵɵelementStart(12, "div", 13);
            i0__namespace.ɵɵtext(13, "\n\n              ");
            i0__namespace.ɵɵelementStart(14, "button", 14);
            i0__namespace.ɵɵlistener("click", function AdaptTableHeaderCellMenuComponent_div_12_div_2_Template_button_click_14_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r15_1); var column_r5 = restoredCtx.$implicit; var ctx_r14 = i0__namespace.ɵɵnextContext(2); return ctx_r14.onSortDirectionChange(ctx_r14.SortOrder.Asc, column_r5.field); });
            i0__namespace.ɵɵtext(15);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(16, "\n              ");
            i0__namespace.ɵɵelementStart(17, "button", 14);
            i0__namespace.ɵɵlistener("click", function AdaptTableHeaderCellMenuComponent_div_12_div_2_Template_button_click_17_listener() { var restoredCtx = i0__namespace.ɵɵrestoreView(_r15_1); var column_r5 = restoredCtx.$implicit; var ctx_r16 = i0__namespace.ɵɵnextContext(2); return ctx_r16.onSortDirectionChange(ctx_r16.SortOrder.Desc, column_r5.field); });
            i0__namespace.ɵɵtext(18);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(19, "\n\n            ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(20, "\n          ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(21, "\n\n          ");
            i0__namespace.ɵɵtemplate(22, AdaptTableHeaderCellMenuComponent_div_12_div_2_div_22_Template, 14, 14, "div", 15);
            i0__namespace.ɵɵtext(23, "\n        ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(24, "\n      ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var column_r5 = ctx.$implicit;
            var firstMenu_r6 = ctx.first;
            var ctx_r3 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction1(18, _c2$2, firstMenu_r6));
            i0__namespace.ɵɵadvance(7);
            i0__namespace.ɵɵtextInterpolate(ctx_r3.multiSortMeta ? ctx_r3.headerCellMenuTexts.orderLabelAddToSort : ctx_r3.headerCellMenuTexts.orderLabelSort);
            i0__namespace.ɵɵadvance(5);
            i0__namespace.ɵɵattribute("role", "radiogroup");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("btn-type", ctx_r3.isButtonActive(ctx_r3.SortOrder.Asc, column_r5.field) ? "primary" : "secondary")("adaptRadarDisableEventSending", true)("ngClass", i0__namespace.ɵɵpureFunction1(20, _c3, ctx_r3.isButtonActive(ctx_r3.SortOrder.Asc, column_r5.field)))("tabindex", ctx_r3.table.getColumnSortOrder(column_r5.field) === ctx_r3.SortOrder.Asc ? -1 : 0);
            i0__namespace.ɵɵattribute("role", "radio")("aria-checked", ctx_r3.isButtonActive(ctx_r3.SortOrder.Asc, column_r5.field));
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("\n                ", ctx_r3.headerCellMenuTexts.orderAscBtn, "\n              ");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("btn-type", ctx_r3.isButtonActive(ctx_r3.SortOrder.Desc, column_r5.field) ? "primary" : "secondary")("adaptRadarDisableEventSending", true)("ngClass", i0__namespace.ɵɵpureFunction1(22, _c3, ctx_r3.isButtonActive(ctx_r3.SortOrder.Desc, column_r5.field)))("tabindex", ctx_r3.table.getColumnSortOrder(column_r5.field) === ctx_r3.SortOrder.Desc ? -1 : 0);
            i0__namespace.ɵɵattribute("role", "radio")("aria-checked", ctx_r3.isButtonActive(ctx_r3.SortOrder.Desc, column_r5.field));
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("\n                ", ctx_r3.headerCellMenuTexts.orderDescBtn, "\n              ");
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵproperty("ngIf", ctx_r3.isCurrentColumnAppliedInSort(column_r5.field));
        }
    }
    function AdaptTableHeaderCellMenuComponent_div_12_div_4_Template(rf, ctx) {
        if (rf & 1) {
            var _r18_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 21);
            i0__namespace.ɵɵtext(1, "\n        ");
            i0__namespace.ɵɵelementStart(2, "div", 22);
            i0__namespace.ɵɵtext(3, "\n          ");
            i0__namespace.ɵɵelementStart(4, "button", 20);
            i0__namespace.ɵɵlistener("click", function AdaptTableHeaderCellMenuComponent_div_12_div_4_Template_button_click_4_listener() { i0__namespace.ɵɵrestoreView(_r18_1); var ctx_r17 = i0__namespace.ɵɵnextContext(2); return ctx_r17.onClearAllSorting(); });
            i0__namespace.ɵɵtext(5);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(6, "\n        ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(7, "\n      ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r4 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵproperty("@menuControlAnimation", undefined);
            i0__namespace.ɵɵadvance(5);
            i0__namespace.ɵɵtextInterpolate1("\n            ", ctx_r4.headerCellMenuTexts.clearAllSortingBtn, "\n          ");
        }
    }
    function AdaptTableHeaderCellMenuComponent_div_12_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "div");
            i0__namespace.ɵɵtext(1, "\n      ");
            i0__namespace.ɵɵtemplate(2, AdaptTableHeaderCellMenuComponent_div_12_div_2_Template, 25, 24, "div", 7);
            i0__namespace.ɵɵtext(3, "\n\n      ");
            i0__namespace.ɵɵtemplate(4, AdaptTableHeaderCellMenuComponent_div_12_div_4_Template, 8, 2, "div", 8);
            i0__namespace.ɵɵtext(5, "\n    ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r2 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r2.columns)("ngForTrackBy", ctx_r2.table.trackByForColumns);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r2.isSortApplied());
        }
    }
    var AdaptTableHeaderCellMenuComponent = /** @class */ (function () {
        function AdaptTableHeaderCellMenuComponent(_ngZone, ts, _dir) {
            this._ngZone = _ngZone;
            this.ts = ts;
            this._dir = _dir;
            this.SortOrder = exports.SortOrder;
            this.isRtl = false;
        }
        Object.defineProperty(AdaptTableHeaderCellMenuComponent.prototype, "multiSortMeta", {
            get: function () {
                return this.table.multiSortMeta;
            },
            enumerable: false,
            configurable: true
        });
        AdaptTableHeaderCellMenuComponent.prototype.ngOnInit = function () {
            this.isRtl = this._dir.value === 'rtl';
        };
        AdaptTableHeaderCellMenuComponent.prototype.isSortApplied = function () {
            return this._getMultiSortMetaLength() >= 1;
        };
        AdaptTableHeaderCellMenuComponent.prototype.isCurrentColumnAppliedInSort = function (sortingColumnField) {
            return this._getMultiSortMetaLength() > 1 && this._isColumnSorted(sortingColumnField);
        };
        AdaptTableHeaderCellMenuComponent.prototype.getSortButtonsClass = function (order, sortingColumnField) {
            return this.isButtonActive(order, sortingColumnField)
                ? 'btn-primary adapt-table-sort-menu__btn_active'
                : 'btn-secondary';
        };
        AdaptTableHeaderCellMenuComponent.prototype.getSortOrderOptions = function () {
            var _this = this;
            return this.multiSortMeta.map(function (sortMeta, index) {
                return {
                    id: sortMeta.field,
                    name: i1.formatString(_this.headerCellMenuTexts.selectSortOrderOption, index + 1, _this.multiSortMeta.length)
                };
            });
        };
        AdaptTableHeaderCellMenuComponent.prototype.isButtonActive = function (order, sortingColumnField) {
            return this.table.getColumnSortOrder(sortingColumnField) === order;
        };
        AdaptTableHeaderCellMenuComponent.prototype.optionFormatter = function (option) {
            return option.name;
        };
        AdaptTableHeaderCellMenuComponent.prototype.onSortDirectionChange = function (order, sortingColumnField) {
            if (this.isButtonActive(order, sortingColumnField)) {
                return;
            }
            if (this._getMultiSortMetaLength()) {
                if (this._isColumnSorted(sortingColumnField)) {
                    this.table.updateMultiSortMeta(this.multiSortMeta.map(function (item) {
                        return {
                            field: item.field,
                            order: item.field === sortingColumnField ? order : item.order
                        };
                    }));
                }
                else {
                    this.table.updateMultiSortMeta(__spreadArray(__spreadArray([], __read(this.multiSortMeta)), [
                        { field: sortingColumnField, order: order }
                    ]));
                }
            }
            else {
                this.table.updateMultiSortMeta([{ field: sortingColumnField, order: order }]);
            }
        };
        AdaptTableHeaderCellMenuComponent.prototype.changeColumnsSortingOrder = function (targetModel, sortingColumnField) {
            var sourceIndex = this.multiSortMeta.findIndex(function (sortMeta) { return sortMeta.field === sortingColumnField; });
            var targetIndex = this.multiSortMeta.findIndex(function (sortMeta) { return sortMeta.field === targetModel[0].id; });
            var multiSortMeta = __spreadArray([], __read(this.multiSortMeta));
            var sourceItem = multiSortMeta.splice(sourceIndex, 1);
            multiSortMeta.splice.apply(multiSortMeta, __spreadArray([targetIndex, 0], __read(sourceItem)));
            this.table.updateMultiSortMeta(multiSortMeta);
        };
        AdaptTableHeaderCellMenuComponent.prototype.getSortOrderSelectModelName = function (fieldId) {
            var _a;
            var options = this.getSortOrderOptions();
            return (_a = options.find(function (option) { return option.id === fieldId; })) === null || _a === void 0 ? void 0 : _a.name;
        };
        AdaptTableHeaderCellMenuComponent.prototype.onRemoveCurrentFromSorting = function (sortingColumnField) {
            this.table.updateMultiSortMeta(this.multiSortMeta.filter((function (sortMeta) { return sortMeta.field !== sortingColumnField; })));
        };
        // Method that implement multiple sorting in PrimeNG(sortMultiple) is overridden in projects/adapt-table/src/lib/primeng-overrides.ts
        // to allow clearing sort and reset table to default sorting state
        AdaptTableHeaderCellMenuComponent.prototype.onClearAllSorting = function () {
            this.table.updateMultiSortMeta(null);
        };
        AdaptTableHeaderCellMenuComponent.prototype._getMultiSortMetaLength = function () {
            var _a;
            return (_a = this.multiSortMeta) === null || _a === void 0 ? void 0 : _a.length;
        };
        AdaptTableHeaderCellMenuComponent.prototype._isColumnSorted = function (sortingColumnField) {
            return this.table.isSorted(sortingColumnField);
        };
        return AdaptTableHeaderCellMenuComponent;
    }());
    AdaptTableHeaderCellMenuComponent.ɵfac = function AdaptTableHeaderCellMenuComponent_Factory(t) { return new (t || AdaptTableHeaderCellMenuComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.NgZone), i0__namespace.ɵɵdirectiveInject(i1__namespace.AdaptTranslateService), i0__namespace.ɵɵdirectiveInject(i3__namespace.Directionality)); };
    AdaptTableHeaderCellMenuComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: AdaptTableHeaderCellMenuComponent, selectors: [["adapt-table-header-cell-menu"]], inputs: { headerCellMenuTexts: "headerCellMenuTexts", columns: "columns", table: "table" }, decls: 16, vars: 9, consts: [["adaptDropdown", "", 3, "adaptRadarDisableEventSending", "appendToBody", "positionTo", "restoreFocusAfterClose", "holdFocusInMenu", "autoClose"], ["headerCellMenuDropdown", "adaptDropdown"], ["adaptDropdownToggle", "", 1, "btn", "btn-link", "d-icon-ellipsis", "adapt-table-sort-menu__kebab", 3, "showCaret"], ["anchorToEl", ""], [1, "sr-only"], ["adaptDropdownMenu", "", 1, "adapt-table-sort-menu__wrapper", "dropdown-menu"], [4, "ngIf"], ["class", "adapt-table-sort-menu__block", 3, "ngClass", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "adapt-table-sort-menu__clear-all-btn-wrapper", 4, "ngIf"], [1, "adapt-table-sort-menu__block", 3, "ngClass"], [1, "adapt-table-sort-menu__controls"], ["for", "sortButtons", 1, "form-control-label", "mb-2"], ["id", "sortButtons", 1, "adapt-table-sort-menu__btn-wrapper"], [1, "btn-group"], ["type", "button", "adapt-button", "", 3, "btn-type", "adaptRadarDisableEventSending", "ngClass", "tabindex", "click"], ["class", "adapt-table-sort-menu__sort-wrapper", 4, "ngIf"], [1, "adapt-table-sort-menu__sort-wrapper"], [1, "adapt-table-sort-menu__sort-order-select"], [3, "options", "adaptRadarDisableEventSending", "optionFormatter", "appendToBody", "closeOnSelect", "ngModel", "label", "ngModelChange"], [1, "adapt-table-sort-menu__remove-current-btn"], ["type", "button", 1, "btn", "btn-secondary", "w-100", 3, "click"], [1, "adapt-table-sort-menu__clear-all-btn-wrapper"], [1, "adapt-table-sort-menu__clear-all-btn"]], template: function AdaptTableHeaderCellMenuComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0, 1);
                i0__namespace.ɵɵtext(2, "\n  ");
                i0__namespace.ɵɵelementStart(3, "button", 2, 3);
                i0__namespace.ɵɵtext(5, "\n    ");
                i0__namespace.ɵɵelementStart(6, "span", 4);
                i0__namespace.ɵɵtext(7);
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(8, "\n  ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(9, "\n\n  ");
                i0__namespace.ɵɵelementStart(10, "div", 5);
                i0__namespace.ɵɵtext(11, "\n    ");
                i0__namespace.ɵɵtemplate(12, AdaptTableHeaderCellMenuComponent_div_12_Template, 6, 3, "div", 6);
                i0__namespace.ɵɵtext(13, "\n  ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(14, "\n");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(15, "\n");
            }
            if (rf & 2) {
                var _r0 = i0__namespace.ɵɵreference(1);
                var _r1 = i0__namespace.ɵɵreference(4);
                i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true)("appendToBody", true)("positionTo", _r1)("restoreFocusAfterClose", true)("holdFocusInMenu", true)("autoClose", "outside");
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("showCaret", false);
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵtextInterpolate(ctx.multiSortMeta ? ctx.headerCellMenuTexts.orderLabelAddToSort : ctx.headerCellMenuTexts.orderLabelSort);
                i0__namespace.ɵɵadvance(5);
                i0__namespace.ɵɵproperty("ngIf", _r0.isOpen());
            }
        }, directives: [i1__namespace.AdaptDropdownDirective, i1__namespace.AdaptDropdownToggleDirective, i1__namespace.AdaptDropdownMenuDirective, i2__namespace$1.NgIf, i2__namespace$1.NgForOf, i2__namespace$1.NgClass, i1__namespace.AdaptButtonComponent, i1__namespace.AdaptRxSelectComponent, i5__namespace.NgControlStatus, i5__namespace.NgModel], encapsulation: 2, data: { animation: [
                animations.trigger('menuControlAnimation', [
                    animations.transition('void => *', [
                        animations.useAnimation(i1.ANIMATION_NAME.height, {
                            params: {
                                duration: i1.ANIMATION_DURATION.fast,
                                timingFunction: i1.ANIMATION_TIMING_FUNCTION.base.transitionIn
                            }
                        })
                    ]),
                    animations.transition('* => void', [
                        animations.useAnimation(i1.ANIMATION_NAME.height, {
                            params: {
                                duration: i1.ANIMATION_DURATION.fast,
                                from: '*',
                                to: '0',
                                timingFunction: i1.ANIMATION_TIMING_FUNCTION.base.transitionOut
                            }
                        })
                    ])
                ])
            ] }, changeDetection: 0 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptTableHeaderCellMenuComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'adapt-table-header-cell-menu',
                        templateUrl: './adapt-table-header-cell-menu.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        animations: [
                            animations.trigger('menuControlAnimation', [
                                animations.transition('void => *', [
                                    animations.useAnimation(i1.ANIMATION_NAME.height, {
                                        params: {
                                            duration: i1.ANIMATION_DURATION.fast,
                                            timingFunction: i1.ANIMATION_TIMING_FUNCTION.base.transitionIn
                                        }
                                    })
                                ]),
                                animations.transition('* => void', [
                                    animations.useAnimation(i1.ANIMATION_NAME.height, {
                                        params: {
                                            duration: i1.ANIMATION_DURATION.fast,
                                            from: '*',
                                            to: '0',
                                            timingFunction: i1.ANIMATION_TIMING_FUNCTION.base.transitionOut
                                        }
                                    })
                                ])
                            ])
                        ]
                    }]
            }], function () { return [{ type: i0__namespace.NgZone }, { type: i1__namespace.AdaptTranslateService }, { type: i3__namespace.Directionality }]; }, { headerCellMenuTexts: [{
                    type: i0.Input
                }], columns: [{
                    type: i0.Input
                }], table: [{
                    type: i0.Input
                }] });
    })();

    function AdaptTableHeaderCellComponent_ng_container_6_ng_template_3_ng_template_1_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n          ");
        }
    }
    function AdaptTableHeaderCellComponent_ng_container_6_ng_template_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n          ");
            i0__namespace.ɵɵtemplate(1, AdaptTableHeaderCellComponent_ng_container_6_ng_template_3_ng_template_1_Template, 1, 0, "ng-template", 7);
            i0__namespace.ɵɵtext(2, "\n        ");
        }
        if (rf & 2) {
            var columnConfig_r2 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r4 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", columnConfig_r2.headerTitleTemplate)("ngTemplateOutletContext", ctx_r4.getColumnHeaderTemplateParams(columnConfig_r2));
        }
    }
    function AdaptTableHeaderCellComponent_ng_container_6_ng_template_5_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n          ");
            i0__namespace.ɵɵelementStart(1, "span", 8);
            i0__namespace.ɵɵtext(2);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(3, "\n        ");
        }
        if (rf & 2) {
            var columnConfig_r2 = i0__namespace.ɵɵnextContext().$implicit;
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵtextInterpolate(columnConfig_r2.header);
        }
    }
    function AdaptTableHeaderCellComponent_ng_container_6_span_9_span_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "span", 11);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var columnConfig_r2 = i0__namespace.ɵɵnextContext(2).$implicit;
            var ctx_r11 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("", ctx_r11.getDisplayNumberOfSortingOrder(columnConfig_r2), "\n            ");
        }
    }
    var _c0$2 = function (a0, a1, a2) { return { "d-icon-sorting": a0, "d-icon-triangle_up_adapt": a1, "d-icon-triangle_down_adapt": a2 }; };
    function AdaptTableHeaderCellComponent_ng_container_6_span_9_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "span", 9);
            i0__namespace.ɵɵtext(1, "\n            ");
            i0__namespace.ɵɵtemplate(2, AdaptTableHeaderCellComponent_ng_container_6_span_9_span_2_Template, 2, 1, "span", 10);
            i0__namespace.ɵɵtext(3, "\n          ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var columnConfig_r2 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r7 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction3(4, _c0$2, !ctx_r7.isSortedColumn(columnConfig_r2), ctx_r7.isSortedColumn(columnConfig_r2) && ctx_r7.table.isColumnSortOrderAsc(columnConfig_r2.field), ctx_r7.isSortedColumn(columnConfig_r2) && !ctx_r7.table.isColumnSortOrderAsc(columnConfig_r2.field)))("pSortableColumnDisabled", !ctx_r7.table.isSortableColumn(columnConfig_r2))("pSortableColumn", columnConfig_r2.field);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r7.getDisplayNumberOfSortingOrder(columnConfig_r2));
        }
    }
    function AdaptTableHeaderCellComponent_ng_container_6_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementContainerStart(0);
            i0__namespace.ɵɵtext(1, "\n        ");
            i0__namespace.ɵɵtext(2, "\n        ");
            i0__namespace.ɵɵtemplate(3, AdaptTableHeaderCellComponent_ng_container_6_ng_template_3_Template, 3, 2, "ng-template", 3);
            i0__namespace.ɵɵtext(4, "\n        ");
            i0__namespace.ɵɵtemplate(5, AdaptTableHeaderCellComponent_ng_container_6_ng_template_5_Template, 4, 1, "ng-template", null, 4, i0__namespace.ɵɵtemplateRefExtractor);
            i0__namespace.ɵɵelementStart(7, "span", 5);
            i0__namespace.ɵɵtext(8, "\u00A0");
            i0__namespace.ɵɵtemplate(9, AdaptTableHeaderCellComponent_ng_container_6_span_9_Template, 4, 8, "span", 6);
            i0__namespace.ɵɵtext(10, "\n        ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(11, "\n      ");
            i0__namespace.ɵɵelementContainerEnd();
        }
        if (rf & 2) {
            var columnConfig_r2 = ctx.$implicit;
            var _r5 = i0__namespace.ɵɵreference(6);
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", columnConfig_r2.headerTitleTemplate)("ngIfElse", _r5);
            i0__namespace.ɵɵadvance(6);
            i0__namespace.ɵɵproperty("ngIf", ctx_r0.table.isSortableColumn(columnConfig_r2));
        }
    }
    function AdaptTableHeaderCellComponent_adapt_table_header_cell_menu_9_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "adapt-table-header-cell-menu", 12);
            i0__namespace.ɵɵtext(1, "\n    ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r1 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵproperty("table", ctx_r1.table)("headerCellMenuTexts", ctx_r1.texts)("columns", ctx_r1.renderingColumn.columnsConfigs);
        }
    }
    var AdaptTableHeaderCellComponent = /** @class */ (function () {
        function AdaptTableHeaderCellComponent(table) {
            this.table = table;
            this.tableClasses = exports.AdaptTableClasses;
        }
        AdaptTableHeaderCellComponent.prototype.getColumnHeaderTemplateParams = function (column) {
            return {
                column: column,
                index: this.index,
            };
        };
        AdaptTableHeaderCellComponent.prototype.getFilterableColumns = function (columns) {
            var _this = this;
            return columns.filter(function (column) { return _this.table.isFilterableColumn(column); });
        };
        AdaptTableHeaderCellComponent.prototype.getDisplayNumberOfSortingOrder = function (column) {
            var multiSortMeta = this.table.multiSortMeta || [];
            if (this.table.isMultipleSortMode && multiSortMeta.length >= 2) {
                var sortField_1 = column.field;
                var indexOfSort = multiSortMeta.findIndex(function (sortMeta) { return sortMeta.field === sortField_1; });
                return indexOfSort >= 0 ? indexOfSort + 1 : null;
            }
            return null;
        };
        AdaptTableHeaderCellComponent.prototype.isSortedColumn = function (column) {
            return this.table.isSorted(column.field);
        };
        AdaptTableHeaderCellComponent.prototype.getSortedColumnSvgViewBox = function (column) {
            return this.table.isColumnSortOrderAsc(column.field) ? '0 -6 18 24' : '0 6 18 24';
        };
        return AdaptTableHeaderCellComponent;
    }());
    AdaptTableHeaderCellComponent.ɵfac = function AdaptTableHeaderCellComponent_Factory(t) { return new (t || AdaptTableHeaderCellComponent)(i0__namespace.ɵɵdirectiveInject(AdaptTableComponent)); };
    AdaptTableHeaderCellComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: AdaptTableHeaderCellComponent, selectors: [["adapt-table-header-cell"]], inputs: { renderingColumn: "renderingColumn", index: "index", texts: "texts" }, decls: 16, vars: 14, consts: [[4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "table", "headerCellMenuTexts", "columns", 4, "ngIf"], [3, "columns", "index", "texts"], [3, "ngIf", "ngIfElse"], ["headerTitleDefaultTemplate", ""], [1, "c-header__sort-icon-wrapper"], ["class", "c-header__sort-icon", 3, "ngClass", "pSortableColumnDisabled", "pSortableColumn", 4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "c-header__separator"], [1, "c-header__sort-icon", 3, "ngClass", "pSortableColumnDisabled", "pSortableColumn"], ["class", "at__sorted-column-number", 4, "ngIf"], [1, "at__sorted-column-number"], [3, "table", "headerCellMenuTexts", "columns"]], template: function AdaptTableHeaderCellComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div");
                i0__namespace.ɵɵtext(1, "\n  ");
                i0__namespace.ɵɵelementStart(2, "div");
                i0__namespace.ɵɵtext(3, "\n    ");
                i0__namespace.ɵɵelementStart(4, "div");
                i0__namespace.ɵɵtext(5, "\n      ");
                i0__namespace.ɵɵtemplate(6, AdaptTableHeaderCellComponent_ng_container_6_Template, 12, 3, "ng-container", 0);
                i0__namespace.ɵɵtext(7, "\n    ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(8, "\n\n    ");
                i0__namespace.ɵɵtemplate(9, AdaptTableHeaderCellComponent_adapt_table_header_cell_menu_9_Template, 2, 3, "adapt-table-header-cell-menu", 1);
                i0__namespace.ɵɵtext(10, "\n\n  ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(11, "\n");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(12, "\n\n");
                i0__namespace.ɵɵelementStart(13, "adapt-table-filters", 2);
                i0__namespace.ɵɵtext(14, "\n");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(15, "\n");
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵclassMap(ctx.tableClasses.HeaderContainer);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵclassMapInterpolate1("", ctx.tableClasses.HeaderTitle, " text-url-break-out");
                i0__namespace.ɵɵclassProp("c-header__separator_no-wrap", !ctx.table.wrapCellText);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngForOf", ctx.renderingColumn.columnsConfigs)("ngForTrackBy", ctx.table.trackByForColumns);
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngIf", ctx.table.isMultipleSortMode && ctx.table.isSortableRenderingColumn(ctx.renderingColumn));
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵproperty("columns", ctx.getFilterableColumns(ctx.renderingColumn.columnsConfigs))("index", ctx.index)("texts", ctx.texts);
            }
        }, directives: [i2__namespace$1.NgForOf, i2__namespace$1.NgIf, AdaptTableFiltersComponent, i2__namespace$1.NgTemplateOutlet, i2__namespace$1.NgClass, SortableColumn, AdaptTableHeaderCellMenuComponent], encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptTableHeaderCellComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'adapt-table-header-cell',
                        templateUrl: './table-header-cell.html'
                    }]
            }], function () { return [{ type: AdaptTableComponent }]; }, { renderingColumn: [{
                    type: i0.Input
                }], index: [{
                    type: i0.Input
                }], texts: [{
                    type: i0.Input
                }] });
    })();

    var _c0$1 = ["paginatorContainer"];
    function AdaptPaginatorComponent_div_0_span_3_span_2_ng_template_2_Template(rf, ctx) { }
    function AdaptPaginatorComponent_div_0_span_3_span_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "span", 8);
            i0__namespace.ɵɵtext(1, "\n      ");
            i0__namespace.ɵɵtemplate(2, AdaptPaginatorComponent_div_0_span_3_span_2_ng_template_2_Template, 0, 0, "ng-template", 9);
            i0__namespace.ɵɵtext(3, "\n    ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext(3);
            var _r1 = i0__namespace.ɵɵreference(3);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r1);
        }
    }
    function AdaptPaginatorComponent_div_0_span_3_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "span", 6);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵtemplate(2, AdaptPaginatorComponent_div_0_span_3_span_2_Template, 4, 1, "span", 7);
            i0__namespace.ɵɵtext(3, "\n  ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r4 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("\n    ", ctx_r4.currentPageReport, "\n    ");
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", ctx_r4.rowsPerPageOptions);
        }
    }
    function AdaptPaginatorComponent_div_0_div_5_span_2_ng_template_2_Template(rf, ctx) { }
    function AdaptPaginatorComponent_div_0_div_5_span_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "span", 18);
            i0__namespace.ɵɵtext(1, "\n      ");
            i0__namespace.ɵɵtemplate(2, AdaptPaginatorComponent_div_0_div_5_span_2_ng_template_2_Template, 0, 0, "ng-template", 9);
            i0__namespace.ɵɵtext(3, "\n    ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext(3);
            var _r1 = i0__namespace.ɵɵreference(3);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r1);
        }
    }
    var _c1$1 = function (a0) { return { "ui-state-active": a0 }; };
    function AdaptPaginatorComponent_div_0_div_5_ng_template_12_button_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r18_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 21);
            i0__namespace.ɵɵlistener("click", function AdaptPaginatorComponent_div_0_div_5_ng_template_12_button_1_Template_button_click_0_listener() { i0__namespace.ɵɵrestoreView(_r18_1); var pageLink_r12 = i0__namespace.ɵɵnextContext().$implicit; var ctx_r16 = i0__namespace.ɵɵnextContext(3); return ctx_r16.changePage(pageLink_r12 - 1); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var pageLink_r12 = i0__namespace.ɵɵnextContext().$implicit;
            var ctx_r13 = i0__namespace.ɵɵnextContext(3);
            i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction1(2, _c1$1, pageLink_r12 === ctx_r13.getPage() + 1));
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("\n        ", pageLink_r12, "\n      ");
        }
    }
    function AdaptPaginatorComponent_div_0_div_5_ng_template_12_ng_template_3_ng_template_1_Template(rf, ctx) {
        if (rf & 1) {
            var _r25_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵtext(0, "\n          ");
            i0__namespace.ɵɵelementStart(1, "div", 25);
            i0__namespace.ɵɵtext(2, "\n            ");
            i0__namespace.ɵɵelement(3, "input", 26, 27);
            i0__namespace.ɵɵtext(5, "\n            ");
            i0__namespace.ɵɵelementStart(6, "span", 28);
            i0__namespace.ɵɵtext(7, "\n\t\t\t\t\t\t\t");
            i0__namespace.ɵɵelementStart(8, "button", 29);
            i0__namespace.ɵɵlistener("click", function AdaptPaginatorComponent_div_0_div_5_ng_template_12_ng_template_3_ng_template_1_Template_button_click_8_listener() { i0__namespace.ɵɵrestoreView(_r25_1); var _r23 = i0__namespace.ɵɵreference(4); i0__namespace.ɵɵnextContext(); var _r22 = i0__namespace.ɵɵreference(5); var ctx_r24 = i0__namespace.ɵɵnextContext(4); return ctx_r24.onGotoPageClick(_r23.value - 1, _r22); });
            i0__namespace.ɵɵtext(9);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(10, "\n\t\t\t\t\t\t");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(11, "\n          ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(12, "\n        ");
        }
        if (rf & 2) {
            var ctx_r21 = i0__namespace.ɵɵnextContext(5);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("placeholder", ctx_r21.texts.pageNumberText)("value", ctx_r21.getPage() + 1);
            i0__namespace.ɵɵattribute("min", 1)("max", ctx_r21.getPageCount());
            i0__namespace.ɵɵadvance(6);
            i0__namespace.ɵɵtextInterpolate1("\n                ", ctx_r21.texts.goBtnText, "\n              ");
        }
    }
    function AdaptPaginatorComponent_div_0_div_5_ng_template_12_ng_template_3_Template(rf, ctx) {
        if (rf & 1) {
            var _r27_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵtext(0, "\n        ");
            i0__namespace.ɵɵtemplate(1, AdaptPaginatorComponent_div_0_div_5_ng_template_12_ng_template_3_ng_template_1_Template, 13, 5, "ng-template", null, 22, i0__namespace.ɵɵtemplateRefExtractor);
            i0__namespace.ɵɵtext(3, "\n\n        ");
            i0__namespace.ɵɵelementStart(4, "button", 23, 24);
            i0__namespace.ɵɵlistener("shown", function AdaptPaginatorComponent_div_0_div_5_ng_template_12_ng_template_3_Template_button_shown_4_listener() { i0__namespace.ɵɵrestoreView(_r27_1); var ctx_r26 = i0__namespace.ɵɵnextContext(4); return ctx_r26.onGotoPopoverShown(); });
            i0__namespace.ɵɵtext(6, "...\n        ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(7, "\n\n      ");
        }
        if (rf & 2) {
            var _r20 = i0__namespace.ɵɵreference(2);
            i0__namespace.ɵɵadvance(4);
            i0__namespace.ɵɵproperty("adaptPopover", _r20)("adaptRadarDisableEventSending", true)("appendToBody", true)("autoClose", "outside");
        }
    }
    function AdaptPaginatorComponent_div_0_div_5_ng_template_12_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n      ");
            i0__namespace.ɵɵtemplate(1, AdaptPaginatorComponent_div_0_div_5_ng_template_12_button_1_Template, 2, 4, "button", 19);
            i0__namespace.ɵɵtext(2, "\n\n      ");
            i0__namespace.ɵɵtemplate(3, AdaptPaginatorComponent_div_0_div_5_ng_template_12_ng_template_3_Template, 8, 4, "ng-template", null, 20, i0__namespace.ɵɵtemplateRefExtractor);
            i0__namespace.ɵɵtext(5, "\n    ");
        }
        if (rf & 2) {
            var pageLink_r12 = ctx.$implicit;
            var _r14 = i0__namespace.ɵɵreference(4);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("ngIf", pageLink_r12 !== null)("ngIfElse", _r14);
        }
    }
    function AdaptPaginatorComponent_div_0_div_5_span_22_ng_template_2_Template(rf, ctx) { }
    function AdaptPaginatorComponent_div_0_div_5_span_22_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "span", 18);
            i0__namespace.ɵɵtext(1, "\n      ");
            i0__namespace.ɵɵtemplate(2, AdaptPaginatorComponent_div_0_div_5_span_22_ng_template_2_Template, 0, 0, "ng-template", 9);
            i0__namespace.ɵɵtext(3, "\n    ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            i0__namespace.ɵɵnextContext(3);
            var _r1 = i0__namespace.ɵɵreference(3);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngTemplateOutlet", _r1);
        }
    }
    var _c2$1 = function (a0) { return { "ui-state-disabled": a0 }; };
    function AdaptPaginatorComponent_div_0_div_5_Template(rf, ctx) {
        if (rf & 1) {
            var _r30_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 10);
            i0__namespace.ɵɵtext(1, "\n    ");
            i0__namespace.ɵɵtemplate(2, AdaptPaginatorComponent_div_0_div_5_span_2_Template, 4, 1, "span", 11);
            i0__namespace.ɵɵtext(3, "\n\n    ");
            i0__namespace.ɵɵelementStart(4, "button", 12);
            i0__namespace.ɵɵlistener("click", function AdaptPaginatorComponent_div_0_div_5_Template_button_click_4_listener() { i0__namespace.ɵɵrestoreView(_r30_1); var ctx_r29 = i0__namespace.ɵɵnextContext(2); return ctx_r29.changePage(ctx_r29.getPage() - 1); });
            i0__namespace.ɵɵtext(5, "\n      ");
            i0__namespace.ɵɵelement(6, "span", 13);
            i0__namespace.ɵɵtext(7, "\n      ");
            i0__namespace.ɵɵelementStart(8, "span", 14);
            i0__namespace.ɵɵtext(9);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(10, "\n    ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(11, "\n\n    ");
            i0__namespace.ɵɵtemplate(12, AdaptPaginatorComponent_div_0_div_5_ng_template_12_Template, 6, 2, "ng-template", 15);
            i0__namespace.ɵɵtext(13, "\n\n    ");
            i0__namespace.ɵɵelementStart(14, "button", 16);
            i0__namespace.ɵɵlistener("click", function AdaptPaginatorComponent_div_0_div_5_Template_button_click_14_listener() { i0__namespace.ɵɵrestoreView(_r30_1); var ctx_r31 = i0__namespace.ɵɵnextContext(2); return ctx_r31.changePage(ctx_r31.getPage() + 1); });
            i0__namespace.ɵɵtext(15, "\n      ");
            i0__namespace.ɵɵelement(16, "span", 17);
            i0__namespace.ɵɵtext(17, "\n      ");
            i0__namespace.ɵɵelementStart(18, "span", 14);
            i0__namespace.ɵɵtext(19);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(20, "\n    ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(21, "\n\n    ");
            i0__namespace.ɵɵtemplate(22, AdaptPaginatorComponent_div_0_div_5_span_22_Template, 4, 1, "span", 11);
            i0__namespace.ɵɵtext(23, "\n\n  ");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r5 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", ctx_r5.rowsPerPageOptions && ctx_r5.paginatorAlign === "right");
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction1(10, _c2$1, ctx_r5.isFirstPage()))("disabled", ctx_r5.isFirstPage());
            i0__namespace.ɵɵadvance(5);
            i0__namespace.ɵɵtextInterpolate(ctx_r5.texts.prevPageBtnText);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r5.pagesNumbers)("ngForTrackBy", ctx_r5.trackByForPages);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction1(12, _c2$1, ctx_r5.isLastPage()))("disabled", ctx_r5.isLastPage());
            i0__namespace.ɵɵadvance(5);
            i0__namespace.ɵɵtextInterpolate(ctx_r5.texts.nextPageBtnText);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", ctx_r5.rowsPerPageOptions && ctx_r5.paginatorAlign === "left");
        }
    }
    function AdaptPaginatorComponent_div_0_Template(rf, ctx) {
        if (rf & 1) {
            var _r33_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "div", 2, 3);
            i0__namespace.ɵɵlistener("elementResize", function AdaptPaginatorComponent_div_0_Template_div_elementResize_0_listener() { i0__namespace.ɵɵrestoreView(_r33_1); var ctx_r32 = i0__namespace.ɵɵnextContext(); return ctx_r32.recalculatePageNumbers(); });
            i0__namespace.ɵɵtext(2, "\n  ");
            i0__namespace.ɵɵtemplate(3, AdaptPaginatorComponent_div_0_span_3_Template, 4, 2, "span", 4);
            i0__namespace.ɵɵtext(4, "\n\n  ");
            i0__namespace.ɵɵtemplate(5, AdaptPaginatorComponent_div_0_div_5_Template, 24, 14, "div", 5);
            i0__namespace.ɵɵtext(6, "\n");
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var _r3 = i0__namespace.ɵɵreference(1);
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵclassMap(ctx_r0.styleClass);
            i0__namespace.ɵɵproperty("ngStyle", ctx_r0.style)("ngClass", "ui-paginator ui-widget ui-widget-header ui-unselectable-text ui-helper-clearfix");
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵproperty("ngIf", ctx_r0.showCurrentPageReport);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("ngIf", _r3);
        }
    }
    function AdaptPaginatorComponent_ng_template_2_button_14_Template(rf, ctx) {
        if (rf & 1) {
            var _r37_1 = i0__namespace.ɵɵgetCurrentView();
            i0__namespace.ɵɵelementStart(0, "button", 36);
            i0__namespace.ɵɵlistener("click", function AdaptPaginatorComponent_ng_template_2_button_14_Template_button_click_0_listener($event) { var restoredCtx = i0__namespace.ɵɵrestoreView(_r37_1); var rowPerPage_r35 = restoredCtx.$implicit; var ctx_r36 = i0__namespace.ɵɵnextContext(2); return ctx_r36.onRppChange({ event: $event, rows: rowPerPage_r35 }); });
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var rowPerPage_r35 = ctx.$implicit;
            var ctx_r34 = i0__namespace.ɵɵnextContext(2);
            i0__namespace.ɵɵclassProp("active", ctx_r34.rows === rowPerPage_r35);
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate1("\n        ", rowPerPage_r35, "\n      ");
        }
    }
    function AdaptPaginatorComponent_ng_template_2_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵtext(0, "\n  ");
            i0__namespace.ɵɵelementStart(1, "div", 30);
            i0__namespace.ɵɵtext(2, "\n    ");
            i0__namespace.ɵɵelementStart(3, "button", 31);
            i0__namespace.ɵɵtext(4, "\n      ");
            i0__namespace.ɵɵelementStart(5, "span", 32);
            i0__namespace.ɵɵtext(6);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(7, "\n      ");
            i0__namespace.ɵɵelementStart(8, "span", 33);
            i0__namespace.ɵɵtext(9);
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(10, "\n    ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(11, "\n    ");
            i0__namespace.ɵɵelementStart(12, "div", 34);
            i0__namespace.ɵɵtext(13, "\n      ");
            i0__namespace.ɵɵtemplate(14, AdaptPaginatorComponent_ng_template_2_button_14_Template, 2, 3, "button", 35);
            i0__namespace.ɵɵtext(15, "\n    ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(16, "\n  ");
            i0__namespace.ɵɵelementEnd();
            i0__namespace.ɵɵtext(17, "\n");
        }
        if (rf & 2) {
            var ctx_r2 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true)("restoreFocusAfterClose", true)("holdFocusInMenu", true)("appendToBody", true);
            i0__namespace.ɵɵadvance(2);
            i0__namespace.ɵɵproperty("adaptRadarDisableEventSending", true)("dropdownTogglerType", "link");
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate(ctx_r2.texts.recordsPerPage);
            i0__namespace.ɵɵadvance(3);
            i0__namespace.ɵɵtextInterpolate(ctx_r2.rows);
            i0__namespace.ɵɵadvance(5);
            i0__namespace.ɵɵproperty("ngForOf", ctx_r2.rowsPerPageOptions);
        }
    }
    var AdaptPaginatorComponent = /** @class */ (function (_super) {
        __extends(AdaptPaginatorComponent, _super);
        function AdaptPaginatorComponent(_cd, ts, resizeService, ngZone) {
            var _this = _super.call(this, _cd) || this;
            _this._cd = _cd;
            _this.ts = ts;
            _this.resizeService = resizeService;
            _this.ngZone = ngZone;
            _this.defaultTexts = {};
            _this._destroyed$ = new rxjs.ReplaySubject(1);
            return _this;
        }
        AdaptPaginatorComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            if (changes.rows || changes.totalRecords || changes.rowsPerPageOptions) {
                this.ngZone.onStable.pipe(operators.takeUntil(this._destroyed$), operators.take(1)).subscribe(function () {
                    // never detectChanges in a subscription to `onStable` without reattaching to the NgZone
                    // (onStable always emits outside the NgZone)
                    _this.ngZone.run(function () {
                        _this.recalculatePageNumbers();
                        _this.rowsPerPageModel = [{ label: "" + _this.rows, value: _this.rows }];
                        _this._cd.detectChanges();
                    });
                });
            }
            _super.prototype.ngOnChanges.call(this, changes);
        };
        AdaptPaginatorComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            this.onPageChange.pipe(operators.takeUntil(this._destroyed$)).subscribe(function () {
                _this.recalculatePageNumbers();
            });
        };
        AdaptPaginatorComponent.prototype.recalculatePageNumbers = function () {
            this.pagesNumbers = this.getPagesNumbers();
        };
        AdaptPaginatorComponent.prototype.ngOnDestroy = function () {
            this._destroyed$.next(true);
            this._destroyed$.complete();
        };
        AdaptPaginatorComponent.prototype.getPagesNumbers = function () {
            if (!this.paginatorContainer) {
                return [];
            }
            var smallWidthBreakPoint = 320;
            var middleWidthBreakPoint = 400;
            var largeWidthBreakPoint = 500;
            var paginatorContainerWidth = this.paginatorContainer.nativeElement.offsetWidth;
            var itemsInGroup = paginatorContainerWidth <= middleWidthBreakPoint
                ? 1 : paginatorContainerWidth > middleWidthBreakPoint && paginatorContainerWidth <= largeWidthBreakPoint
                ? 2 : 3;
            var allPagesCount = this.getPageCount();
            if (allPagesCount <= itemsInGroup) {
                // TODO: Refactor this if possible
                // eslint-disable-next-line prefer-spread
                return Array.apply(null, { length: allPagesCount || 1 }).map(function (a, i) { return i + 1; });
            }
            var currentPage = this.getPage() + 1;
            var firstPages = [];
            var pages = [];
            for (var i = 1; i <= itemsInGroup; i++) {
                firstPages.push(i);
            }
            pages.push.apply(pages, __spreadArray([], __read(firstPages)));
            if (currentPage >= itemsInGroup && currentPage <= (allPagesCount + 1 - itemsInGroup)) {
                var middlePages = [];
                if (paginatorContainerWidth >= smallWidthBreakPoint
                    && currentPage - 1 > itemsInGroup && currentPage - 1 < (allPagesCount + 1 - itemsInGroup)) {
                    middlePages.push(currentPage - 1);
                }
                if (currentPage > itemsInGroup && currentPage < (allPagesCount + 1 - itemsInGroup)) {
                    middlePages.push(currentPage);
                }
                if (paginatorContainerWidth >= smallWidthBreakPoint
                    && currentPage + 1 > itemsInGroup && currentPage + 1 < (allPagesCount + 1 - itemsInGroup)) {
                    middlePages.push(currentPage + 1);
                }
                if (middlePages.length && middlePages[0] - 1 !== pages[pages.length - 1]) {
                    pages.push(null);
                }
                pages.push.apply(pages, __spreadArray([], __read(middlePages)));
            }
            var lastPages = [];
            var maxNumb = pages[pages.length - 1];
            for (var i = allPagesCount - itemsInGroup + 1; i <= allPagesCount; i++) {
                if (maxNumb < i) {
                    lastPages.push(i);
                }
            }
            if (lastPages.length && lastPages[0] - 1 !== pages[pages.length - 1]) {
                pages.push(null);
            }
            pages.push.apply(pages, __spreadArray([], __read(lastPages)));
            return pages;
        };
        AdaptPaginatorComponent.prototype.onGotoPageClick = function (pageNumber, adaptPopover) {
            this.changePage(pageNumber);
            adaptPopover.close();
        };
        AdaptPaginatorComponent.prototype.trackByForPages = function (index, pageNumber) {
            // by primary key or index
            return pageNumber == null ? index : pageNumber;
        };
        AdaptPaginatorComponent.prototype.changePage = function (p) {
            _super.prototype.changePage.call(this, p);
            i1.SafeCdr.detectChanges(this._cd);
        };
        AdaptPaginatorComponent.prototype.onGotoPopoverShown = function () {
            i1.SafeCdr.detectChanges(this._cd);
        };
        AdaptPaginatorComponent.prototype.rowsPerPageOptionFormatter = function (opt) {
            return "" + opt.label;
        };
        AdaptPaginatorComponent.prototype.onRppChange = function (event) {
            this.rows = event.rows;
            _super.prototype.onRppChange.call(this, event);
        };
        return AdaptPaginatorComponent;
    }(paginator.Paginator));
    AdaptPaginatorComponent.ɵfac = function AdaptPaginatorComponent_Factory(t) { return new (t || AdaptPaginatorComponent)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ChangeDetectorRef), i0__namespace.ɵɵdirectiveInject(i1__namespace.AdaptTranslateService), i0__namespace.ɵɵdirectiveInject(i1__namespace.ResizeService), i0__namespace.ɵɵdirectiveInject(i0__namespace.NgZone)); };
    AdaptPaginatorComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: AdaptPaginatorComponent, selectors: [["adapt-paginator"]], viewQuery: function AdaptPaginatorComponent_Query(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵviewQuery(_c0$1, 5);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.paginatorContainer = _t.first);
            }
        }, inputs: { texts: "texts", paginatorAlign: "paginatorAlign" }, features: [i0__namespace.ɵɵInheritDefinitionFeature, i0__namespace.ɵɵNgOnChangesFeature], decls: 5, vars: 1, consts: [[3, "class", "ngStyle", "adaptResize", "ngClass", "elementResize", 4, "ngIf"], ["rowsPerPageOptionsTemplate", ""], [3, "ngStyle", "adaptResize", "ngClass", "elementResize"], ["paginatorContainer", ""], ["class", "ui-paginator-current d-flex justify-content-between", 4, "ngIf"], ["class", "d-table", 4, "ngIf"], [1, "ui-paginator-current", "d-flex", "justify-content-between"], ["class", "ui-paginator__row-per-page_small-screen", 4, "ngIf"], [1, "ui-paginator__row-per-page_small-screen"], [3, "ngTemplateOutlet"], [1, "d-table"], ["class", "ui-paginator__row-per-page", 4, "ngIf"], ["type", "button", 1, "ui-paginator-prev", "ui-paginator-element", "ui-state-default", "ui-corner-all", 3, "ngClass", "disabled", "click"], ["aria-hidden", "true", 1, "ui-paginator-icon", "pi", "pi-caret-left"], [1, "sr-only"], ["ngFor", "", 3, "ngForOf", "ngForTrackBy"], ["type", "button", 1, "ui-paginator-next", "ui-paginator-element", "ui-state-default", "ui-corner-all", 3, "ngClass", "disabled", "click"], ["aria-hidden", "true", 1, "ui-paginator-icon", "pi", "pi-caret-right"], [1, "ui-paginator__row-per-page"], ["class", "ui-paginator-page ui-paginator-element ui-state-default ui-corner-all", "type", "button", 3, "ngClass", "click", 4, "ngIf", "ngIfElse"], ["emptyBtn", ""], ["type", "button", 1, "ui-paginator-page", "ui-paginator-element", "ui-state-default", "ui-corner-all", 3, "ngClass", "click"], ["gotoPopover", ""], ["type", "button", 1, "ui-paginator-page", "ui-paginator-element", "ui-state-default", "ui-corner-all", 3, "adaptPopover", "adaptRadarDisableEventSending", "appendToBody", "autoClose", "shown"], ["adaptPopover", "adaptPopover"], [1, "input-group"], ["type", "number", "min", "1", 1, "form-control", "ui-paginator-goto-input", 3, "placeholder", "value"], ["pageNum", ""], [1, "input-group-btn"], ["type", "button", 1, "btn", "btn-secondary", 3, "click"], ["adaptDropdown", "", 1, "d-inline-block", "mx-1", 3, "adaptRadarDisableEventSending", "restoreFocusAfterClose", "holdFocusInMenu", "appendToBody"], ["type", "button", "adapt-button", "", "btn-type", "tertiary", "size", "small", "id", "rowsPerPageOptionsDropdownMenu", "adaptDropdownToggle", "", 3, "adaptRadarDisableEventSending", "dropdownTogglerType"], [1, "ui-paginator__row-per-page-label"], [1, "ui-paginator__row-per-page-label_small-screen"], ["aria-labelledby", "rowsPerPageOptionsDropdownMenu", "adaptDropdownMenu", "", 1, "dropdown-menu"], ["class", "dropdown-item", "type", "button", 3, "active", "click", 4, "ngFor", "ngForOf"], ["type", "button", 1, "dropdown-item", 3, "click"]], template: function AdaptPaginatorComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵtemplate(0, AdaptPaginatorComponent_div_0_Template, 7, 6, "div", 0);
                i0__namespace.ɵɵtext(1, "\n\n");
                i0__namespace.ɵɵtemplate(2, AdaptPaginatorComponent_ng_template_2_Template, 18, 9, "ng-template", null, 1, i0__namespace.ɵɵtemplateRefExtractor);
                i0__namespace.ɵɵtext(4, "\n");
            }
            if (rf & 2) {
                i0__namespace.ɵɵproperty("ngIf", ctx.alwaysShow ? true : ctx.pageLinks && ctx.pageLinks.length > 1);
            }
        }, directives: [i2__namespace$1.NgIf, i2__namespace$1.NgStyle, i1__namespace.AdaptResizeDirective, i2__namespace$1.NgClass, i2__namespace$1.NgTemplateOutlet, i2__namespace$1.NgForOf, i1__namespace.AdaptPopoverDirective, i1__namespace.AdaptDropdownDirective, i1__namespace.AdaptButtonComponent, i1__namespace.AdaptDropdownToggleDirective, i1__namespace.AdaptDropdownMenuDirective], encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptPaginatorComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'adapt-paginator',
                        templateUrl: './adapt-paginator.html',
                    }]
            }], function () { return [{ type: i0__namespace.ChangeDetectorRef }, { type: i1__namespace.AdaptTranslateService }, { type: i1__namespace.ResizeService }, { type: i0__namespace.NgZone }]; }, { texts: [{
                    type: i0.Input
                }], paginatorAlign: [{
                    type: i0.Input
                }], paginatorContainer: [{
                    type: i0.ViewChild,
                    args: ['paginatorContainer', { static: false }]
                }] });
    })();

    // copied from primeng p-tableCheckbox
    var _c0 = ["box"];
    function AdaptRowSelectionCheckboxComponent_span_8_Template(rf, ctx) {
        if (rf & 1) {
            i0__namespace.ɵɵelementStart(0, "span", 7);
            i0__namespace.ɵɵtext(1);
            i0__namespace.ɵɵelementEnd();
        }
        if (rf & 2) {
            var ctx_r0 = i0__namespace.ɵɵnextContext();
            i0__namespace.ɵɵadvance(1);
            i0__namespace.ɵɵtextInterpolate(ctx_r0.ariaLabel);
        }
    }
    var _c1 = function (a1, a2) { return { "ui-chkbox-box ui-widget ui-state-default": true, "ui-state-active": a1, "ui-state-disabled": a2 }; };
    var _c2 = function (a0) { return { "pi pi-check": a0 }; };
    var AdaptRowSelectionCheckboxComponent = /** @class */ (function () {
        function AdaptRowSelectionCheckboxComponent(table) {
            this.table = table;
        }
        AdaptRowSelectionCheckboxComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a;
            this.subscription = this.table.getTableService().selectionSource$.subscribe(function () {
                _this.checked = _this.table.isSelected(_this.value);
            });
            this.checked = this.table.isSelected(this.value);
            if (lodashEs.isFunction(this.rowAriaDataResolver)) {
                this.ariaLabel = (_a = this.rowAriaDataResolver(this.value)) === null || _a === void 0 ? void 0 : _a.rowSelectionAriaLabel;
            }
        };
        AdaptRowSelectionCheckboxComponent.prototype.onClick = function (event) {
            var _this = this;
            if (!this.disabled) {
                var appliedRangeRowsSelections = false;
                var currentRowId = this.table.getPrimaryKey(this.value);
                if (!this.checked) {
                    var lastSelectedRowId = this.table.lastSelectedRowId;
                    // range selection with shiftKey
                    if (event.shiftKey && lastSelectedRowId && this.table.isRowSelected(lastSelectedRowId)) {
                        var renderingDataRows = this.table.getCurrentPageRenderingDataRows(true);
                        var startRowsSelectionIndex = this.getIndexOfSelectedDataItem(renderingDataRows, currentRowId);
                        if (startRowsSelectionIndex >= 0) {
                            var endRowsSelectionIndex = this.getIndexOfSelectedDataItem(renderingDataRows.slice(startRowsSelectionIndex + 1), currentRowId);
                            if (endRowsSelectionIndex >= 0) {
                                endRowsSelectionIndex += startRowsSelectionIndex + 1;
                                var rowsToAddForSelection = renderingDataRows
                                    .slice(startRowsSelectionIndex, endRowsSelectionIndex + 1)
                                    .filter(function (renderingDataRow) {
                                    if (renderingDataRow.isGroup) {
                                        return false;
                                    }
                                    return !_this.table.isRowSelected(renderingDataRow.rowData);
                                }).map(function (renderingDataRow) { return renderingDataRow.rowData; });
                                appliedRangeRowsSelections = true;
                                this.table.addToRowSelection(rowsToAddForSelection);
                            }
                        }
                    }
                    this.table.lastSelectedRowId = currentRowId;
                }
                if (!appliedRangeRowsSelections) {
                    this.table.toggleRowWithCheckbox({
                        originalEvent: event,
                        rowIndex: this.index
                    }, this.value);
                }
            }
            dom.DomHandler.clearSelection();
        };
        AdaptRowSelectionCheckboxComponent.prototype.getIndexOfSelectedDataItem = function (dataRows, currentRowId) {
            var _this = this;
            return dataRows.findIndex(function (dataRow) {
                if (dataRow.isGroup) {
                    return false;
                }
                var dataRowId = _this.table.getPrimaryKey(dataRow.rowData);
                return dataRowId === _this.table.lastSelectedRowId || dataRowId === currentRowId;
            });
        };
        AdaptRowSelectionCheckboxComponent.prototype.onFocus = function () {
            dom.DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');
        };
        AdaptRowSelectionCheckboxComponent.prototype.onBlur = function () {
            dom.DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');
        };
        AdaptRowSelectionCheckboxComponent.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        return AdaptRowSelectionCheckboxComponent;
    }());
    AdaptRowSelectionCheckboxComponent.ɵfac = function AdaptRowSelectionCheckboxComponent_Factory(t) { return new (t || AdaptRowSelectionCheckboxComponent)(i0__namespace.ɵɵdirectiveInject(AdaptTableComponent)); };
    AdaptRowSelectionCheckboxComponent.ɵcmp = /*@__PURE__*/ i0__namespace.ɵɵdefineComponent({ type: AdaptRowSelectionCheckboxComponent, selectors: [["adapt-row-selection-checkbox"]], viewQuery: function AdaptRowSelectionCheckboxComponent_Query(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵviewQuery(_c0, 5);
            }
            if (rf & 2) {
                var _t = void 0;
                i0__namespace.ɵɵqueryRefresh(_t = i0__namespace.ɵɵloadQuery()) && (ctx.boxViewChild = _t.first);
            }
        }, inputs: { renderRowData: "renderRowData", disabled: "disabled", value: "value", index: "index", rowAriaDataResolver: "rowAriaDataResolver" }, decls: 19, vars: 12, consts: [[1, "ui-chkbox", "ui-widget", 3, "click"], [1, "ui-helper-hidden-accessible"], ["type", "checkbox", 3, "checked", "disabled", "focus", "blur"], ["class", "sr-only", 4, "ngIf"], [3, "ngClass"], ["box", ""], [1, "ui-chkbox-icon", "ui-clickable", 3, "ngClass"], [1, "sr-only"]], template: function AdaptRowSelectionCheckboxComponent_Template(rf, ctx) {
            if (rf & 1) {
                i0__namespace.ɵɵelementStart(0, "div", 0);
                i0__namespace.ɵɵlistener("click", function AdaptRowSelectionCheckboxComponent_Template_div_click_0_listener($event) { return ctx.onClick($event); });
                i0__namespace.ɵɵtext(1, "\n  ");
                i0__namespace.ɵɵelementStart(2, "div", 1);
                i0__namespace.ɵɵtext(3, "\n    ");
                i0__namespace.ɵɵelementStart(4, "label");
                i0__namespace.ɵɵtext(5, "\n      ");
                i0__namespace.ɵɵelementStart(6, "input", 2);
                i0__namespace.ɵɵlistener("focus", function AdaptRowSelectionCheckboxComponent_Template_input_focus_6_listener() { return ctx.onFocus(); })("blur", function AdaptRowSelectionCheckboxComponent_Template_input_blur_6_listener() { return ctx.onBlur(); });
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(7, "\n      ");
                i0__namespace.ɵɵtemplate(8, AdaptRowSelectionCheckboxComponent_span_8_Template, 2, 1, "span", 3);
                i0__namespace.ɵɵtext(9, "\n    ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(10, "\n  ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(11, "\n  ");
                i0__namespace.ɵɵelementStart(12, "div", 4, 5);
                i0__namespace.ɵɵtext(14, "\n    ");
                i0__namespace.ɵɵelement(15, "span", 6);
                i0__namespace.ɵɵtext(16, "\n  ");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(17, "\n");
                i0__namespace.ɵɵelementEnd();
                i0__namespace.ɵɵtext(18, "\n");
            }
            if (rf & 2) {
                i0__namespace.ɵɵadvance(6);
                i0__namespace.ɵɵproperty("checked", ctx.checked)("disabled", ctx.disabled);
                i0__namespace.ɵɵattribute("aria-checked", ctx.checked)("aria-label", ctx.ariaLabel);
                i0__namespace.ɵɵadvance(2);
                i0__namespace.ɵɵproperty("ngIf", ctx.ariaLabel);
                i0__namespace.ɵɵadvance(4);
                i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction2(7, _c1, ctx.checked, ctx.disabled));
                i0__namespace.ɵɵadvance(3);
                i0__namespace.ɵɵproperty("ngClass", i0__namespace.ɵɵpureFunction1(10, _c2, ctx.checked));
            }
        }, directives: [i2__namespace$1.NgIf, i2__namespace$1.NgClass], encapsulation: 2 });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptRowSelectionCheckboxComponent, [{
                type: i0.Component,
                args: [{
                        selector: 'adapt-row-selection-checkbox',
                        templateUrl: './row-selection-checkbox.html',
                    }]
            }], function () { return [{ type: AdaptTableComponent }]; }, { renderRowData: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], value: [{
                    type: i0.Input
                }], index: [{
                    type: i0.Input
                }], rowAriaDataResolver: [{
                    type: i0.Input
                }], boxViewChild: [{
                    type: i0.ViewChild,
                    args: ['box']
                }] });
    })();

    var AdaptFrozenColumnDirective = /** @class */ (function () {
        function AdaptFrozenColumnDirective(_element, _renderer, _dir) {
            this._element = _element;
            this._renderer = _renderer;
            this._dir = _dir;
            this._frozenClass = 'at-frozen-cell';
            this._isRtl = false;
            this._isRtl = this._dir.value === 'rtl';
        }
        AdaptFrozenColumnDirective.prototype.ngOnChanges = function (changes) {
            if (changes.adaptFrozen.currentValue !== changes.adaptFrozen.previousValue) {
                var paddingDirection = this._isRtl ? 'right' : 'left';
                if (changes.adaptFrozen.currentValue) {
                    this._renderer.addClass(this._element.nativeElement, this._frozenClass);
                    this._renderer.setStyle(this._element.nativeElement, paddingDirection, this.getFrozenColumnPadding(this._element.nativeElement));
                }
                else {
                    this._renderer.removeClass(this._element.nativeElement, this._frozenClass);
                    this._renderer.setStyle(this._element.nativeElement, paddingDirection, 'auto');
                }
            }
        };
        AdaptFrozenColumnDirective.prototype.getFrozenColumnPadding = function (cellEl) {
            var siblingColumn = cellEl === null || cellEl === void 0 ? void 0 : cellEl.previousElementSibling;
            var padding = 0;
            while (siblingColumn) {
                padding = padding + siblingColumn.getBoundingClientRect().width;
                siblingColumn = siblingColumn.previousElementSibling;
            }
            return padding + "px";
        };
        return AdaptFrozenColumnDirective;
    }());
    AdaptFrozenColumnDirective.ɵfac = function AdaptFrozenColumnDirective_Factory(t) { return new (t || AdaptFrozenColumnDirective)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef), i0__namespace.ɵɵdirectiveInject(i0__namespace.Renderer2), i0__namespace.ɵɵdirectiveInject(i3__namespace.Directionality)); };
    AdaptFrozenColumnDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: AdaptFrozenColumnDirective, selectors: [["", "adaptFrozen", ""]], inputs: { adaptFrozen: "adaptFrozen" }, features: [i0__namespace.ɵɵNgOnChangesFeature] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptFrozenColumnDirective, [{
                type: i0.Directive,
                args: [{
                        selector: '[adaptFrozen]',
                    }]
            }], function () { return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.Renderer2 }, { type: i3__namespace.Directionality }]; }, { adaptFrozen: [{
                    type: i0.Input
                }] });
    })();

    // TODO: double check forRoot
    var AdaptTableModule = /** @class */ (function () {
        function AdaptTableModule() {
        }
        AdaptTableModule.forRoot = function () {
            return {
                ngModule: AdaptTableModule
            };
        };
        return AdaptTableModule;
    }());
    AdaptTableModule.ɵfac = function AdaptTableModule_Factory(t) { return new (t || AdaptTableModule)(); };
    AdaptTableModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: AdaptTableModule });
    AdaptTableModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[
                i2$1.CommonModule,
                i3.DragDropModule,
                TableModule,
                i1.AdaptTooltipModule,
                i1.AdaptRxSearchModule,
                i1.AdaptRxSelectModule,
                i5.FormsModule,
                i1.AdaptDropdownModule.forRoot(),
                i1.AdaptRxTextfieldModule,
                i1.AdaptRxRadiobuttonModule,
                i1.AdaptPopoverModule.forRoot(),
                i1.AdaptEmptyStateModule,
                i1.AdaptBusyModule,
                i1.AdaptFocusHolderModule,
                i1.AdaptAccordionModule,
                i1.AdaptTagModule,
                i1.AdaptRxCheckboxModule,
                i1.AdaptResizeModule,
                i1.AdaptListKeyManagerModule,
                i1.AdaptButtonModule
            ], TableModule] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptTableModule, [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            AdaptTableComponent,
                            AdaptTableFiltersComponent,
                            AdaptTableMergedFiltersComponent,
                            AdaptTableToolbarComponent,
                            AdaptTableActionsComponent,
                            AdaptDataDirective,
                            AdaptFrozenColumnDirective,
                            AdaptTableStateDirective,
                            AdaptTableHeaderCellComponent,
                            AdaptPaginatorComponent,
                            AdaptTableToolbarItemDirective,
                            AdaptHeaderSelectionCheckboxComponent,
                            AdaptRowSelectionCheckboxComponent,
                            AdaptTableHeaderCellMenuComponent,
                            SortByPipe,
                            AdaptSelectMigrationComponent
                        ],
                        imports: [
                            i2$1.CommonModule,
                            i3.DragDropModule,
                            TableModule,
                            i1.AdaptTooltipModule,
                            i1.AdaptRxSearchModule,
                            i1.AdaptRxSelectModule,
                            i5.FormsModule,
                            i1.AdaptDropdownModule.forRoot(),
                            i1.AdaptRxTextfieldModule,
                            i1.AdaptRxRadiobuttonModule,
                            i1.AdaptPopoverModule.forRoot(),
                            i1.AdaptEmptyStateModule,
                            i1.AdaptBusyModule,
                            i1.AdaptFocusHolderModule,
                            i1.AdaptAccordionModule,
                            i1.AdaptTagModule,
                            i1.AdaptRxCheckboxModule,
                            i1.AdaptResizeModule,
                            i1.AdaptListKeyManagerModule,
                            i1.AdaptButtonModule
                        ],
                        exports: [
                            AdaptTableComponent,
                            AdaptTableStateDirective,
                            TableModule
                        ]
                    }]
            }], null, null);
    })();
    (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(AdaptTableModule, { declarations: [AdaptTableComponent,
                AdaptTableFiltersComponent,
                AdaptTableMergedFiltersComponent,
                AdaptTableToolbarComponent,
                AdaptTableActionsComponent,
                AdaptDataDirective,
                AdaptFrozenColumnDirective,
                AdaptTableStateDirective,
                AdaptTableHeaderCellComponent,
                AdaptPaginatorComponent,
                AdaptTableToolbarItemDirective,
                AdaptHeaderSelectionCheckboxComponent,
                AdaptRowSelectionCheckboxComponent,
                AdaptTableHeaderCellMenuComponent,
                SortByPipe,
                AdaptSelectMigrationComponent], imports: [i2$1.CommonModule,
                i3.DragDropModule,
                TableModule,
                i1.AdaptTooltipModule,
                i1.AdaptRxSearchModule,
                i1.AdaptRxSelectModule,
                i5.FormsModule, i1__namespace.AdaptDropdownModule, i1.AdaptRxTextfieldModule,
                i1.AdaptRxRadiobuttonModule, i1__namespace.AdaptPopoverModule, i1.AdaptEmptyStateModule,
                i1.AdaptBusyModule,
                i1.AdaptFocusHolderModule,
                i1.AdaptAccordionModule,
                i1.AdaptTagModule,
                i1.AdaptRxCheckboxModule,
                i1.AdaptResizeModule,
                i1.AdaptListKeyManagerModule,
                i1.AdaptButtonModule], exports: [AdaptTableComponent,
                AdaptTableStateDirective,
                TableModule] });
    })();
    i0__namespace.ɵɵsetComponentScope(AdaptTableComponent, [i2__namespace$1.NgClass, i3__namespace$1.CdkDropList, i2__namespace$1.NgStyle, i2__namespace$1.NgIf, AdaptTableToolbarComponent, i2__namespace$1.NgTemplateOutlet, TableBody, i1__namespace.AdaptResizeDirective, ScrollableView, AdaptPaginatorComponent, i1__namespace.AdaptBusyDirective, i2__namespace$1.NgForOf, ResizableColumn, ReorderableColumn, AdaptFrozenColumnDirective,
        AdaptDataDirective,
        AdaptTableHeaderCellComponent,
        AdaptHeaderSelectionCheckboxComponent, i1__namespace.AdaptTooltipDirective, i3__namespace$1.CdkDrag, i3__namespace$1.CdkDragHandle, i1__namespace.AdaptRxCheckboxComponent, i5__namespace.NgControlStatus, i5__namespace.NgModel, EditableRow, i1__namespace.AdaptRxRadiobuttonComponent, RowToggler, AdaptRowSelectionCheckboxComponent, i1__namespace.AdaptEmptyStateComponent, AdaptTableActionsComponent, i1__namespace.AdaptRxTextfieldComponent, i1__namespace.AdaptButtonComponent], []);

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @publicApi
     */
    var ADAPT_TABLE_VERSION = new i0.Version('12.24.1');

    /*
     * Public API Surface of adapt-table-lib
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ADAPT_TABLE_VERSION = ADAPT_TABLE_VERSION;
    exports.AdaptDataDirective = AdaptDataDirective;
    exports.AdaptGridClasses = AdaptGridClasses;
    exports.AdaptPaginatorComponent = AdaptPaginatorComponent;
    exports.AdaptTableActionsComponent = AdaptTableActionsComponent;
    exports.AdaptTableComponent = AdaptTableComponent;
    exports.AdaptTableFilters = AdaptTableFilters;
    exports.AdaptTableFiltersComponent = AdaptTableFiltersComponent;
    exports.AdaptTableFiltersService = AdaptTableFiltersService;
    exports.AdaptTableHeaderCellComponent = AdaptTableHeaderCellComponent;
    exports.AdaptTableInfiniteScrollingLoaderComponent = AdaptTableInfiniteScrollingLoaderComponent;
    exports.AdaptTableModule = AdaptTableModule;
    exports.AdaptTableStateDirective = AdaptTableStateDirective;
    exports.AdaptTableStorageService = AdaptTableStorageService;
    exports.AdaptTableToolbarComponent = AdaptTableToolbarComponent;
    exports.EditableRow = EditableRow;
    exports.HtmlUtils = HtmlUtils;
    exports.ObjectUtils = ObjectUtils;
    exports.ReorderableColumn = ReorderableColumn;
    exports.ResizableColumn = ResizableColumn;
    exports.RowToggler = RowToggler;
    exports.ScrollableView = ScrollableView;
    exports.SortIcon = SortIcon;
    exports.SortableColumn = SortableColumn;
    exports.Table = Table;
    exports.TableBody = TableBody;
    exports.TableModule = TableModule;
    exports.hasRowGroupedData = hasRowGroupedData;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=bmc-ux-adapt-table.umd.js.map
