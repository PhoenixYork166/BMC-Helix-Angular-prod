import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { AdaptRxSelectComponent, AdaptRxSelectConfigService, adaptWarn } from '@bmc-ux/adapt-angular';
import { isArray, isUndefined, isNil } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "@bmc-ux/adapt-angular";
import * as i2 from "@angular/forms";
export class AdaptSelectMigrationComponent {
    constructor() {
        this.selectModelChange = new EventEmitter();
        this.popupOpenChange = new EventEmitter();
        this.filterValueChange = new EventEmitter();
        this._showWarningMessage();
    }
    set options(opts) {
        this.rxSelectComponent.options = opts || [];
    }
    set multiple(value) {
        this.rxSelectComponent.multiple = !isUndefined(value) && value;
    }
    set optionFormatter(fn) {
        this.rxSelectComponent.optionFormatter = !isUndefined(fn) && fn;
    }
    set settings(value) {
        this._setNewSettings(value);
    }
    set texts(value) {
        this.rxSelectComponent.texts = !isUndefined(value) && value;
    }
    set inline(value) {
        this.rxSelectComponent.inline = !isUndefined(value) && value;
    }
    ngOnInit() {
        if (isArray(this.value)) {
            this.selectModel = this.value.map(val => ({ id: val, name: val }));
        }
        else {
            this.selectModel = isNil(this.value)
                ? { id: this.value, name: this.value }
                : [{ id: this.value, name: this.value }];
        }
    }
    handleOnSelectModelChange(value) {
        const model = isArray(value)
            ? value.map(option => option.id)
            : value.id;
        this.selectModelChange.emit(model);
    }
    _setNewSettings(value) {
        for (const valueKey in value) {
            if (!isUndefined(value[valueKey])) {
                this.rxSelectComponent[valueKey] = value[valueKey];
            }
        }
    }
    _showWarningMessage() {
        adaptWarn('[settings] property will be changed and will contain properties from rx-select API. Please, check https://github.bmc.com/pages/bmc-ux/adapt-angular/#/components/select and https://github.bmc.com/pages/bmc-ux/adapt-angular/#/components/rx-select to see APIs difference');
    }
}
AdaptSelectMigrationComponent.ɵfac = function AdaptSelectMigrationComponent_Factory(t) { return new (t || AdaptSelectMigrationComponent)(); };
AdaptSelectMigrationComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptSelectMigrationComponent, selectors: [["adapt-select-migration"]], viewQuery: function AdaptSelectMigrationComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(AdaptRxSelectComponent, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.rxSelectComponent = _t.first);
    } }, inputs: { value: "value", options: "options", multiple: "multiple", optionFormatter: "optionFormatter", settings: "settings", texts: "texts", inline: "inline" }, outputs: { selectModelChange: "selectModelChange", popupOpenChange: "popupOpenChange", filterValueChange: "filterValueChange" }, features: [i0.ɵɵProvidersFeature([AdaptRxSelectConfigService])], decls: 5, vars: 3, consts: [[3, "adaptRadarDisableEventSending", "size", "ngModel", "ngModelChange", "onPopupOpenChange", "onFilterValueChange"], ["rxSelectComponent", ""]], template: function AdaptSelectMigrationComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtext(0, "\n    ");
        i0.ɵɵelementStart(1, "adapt-rx-select", 0, 1);
        i0.ɵɵlistener("ngModelChange", function AdaptSelectMigrationComponent_Template_adapt_rx_select_ngModelChange_1_listener($event) { return ctx.selectModel = $event; })("ngModelChange", function AdaptSelectMigrationComponent_Template_adapt_rx_select_ngModelChange_1_listener($event) { return ctx.handleOnSelectModelChange($event); })("onPopupOpenChange", function AdaptSelectMigrationComponent_Template_adapt_rx_select_onPopupOpenChange_1_listener($event) { return ctx.popupOpenChange.emit($event); })("onFilterValueChange", function AdaptSelectMigrationComponent_Template_adapt_rx_select_onFilterValueChange_1_listener($event) { return ctx.filterValueChange.emit($event); });
        i0.ɵɵtext(3, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(4, "\n  ");
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("adaptRadarDisableEventSending", true)("size", "sm")("ngModel", ctx.selectModel);
    } }, directives: [i1.AdaptRxSelectComponent, i2.NgControlStatus, i2.NgModel], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptSelectMigrationComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-select-migration',
                template: `
    <adapt-rx-select #rxSelectComponent
                     [adaptRadarDisableEventSending]="true"
                     [size]="'sm'"
                     [(ngModel)]="selectModel"
                     (ngModelChange)="handleOnSelectModelChange($event)"
                     (onPopupOpenChange)="popupOpenChange.emit($event)"
                     (onFilterValueChange)="filterValueChange.emit($event)">
    </adapt-rx-select>
  `,
                providers: [AdaptRxSelectConfigService]
            }]
    }], function () { return []; }, { value: [{
            type: Input
        }], options: [{
            type: Input
        }], multiple: [{
            type: Input
        }], optionFormatter: [{
            type: Input
        }], settings: [{
            type: Input
        }], texts: [{
            type: Input
        }], inline: [{
            type: Input
        }], selectModelChange: [{
            type: Output
        }], popupOpenChange: [{
            type: Output
        }], filterValueChange: [{
            type: Output
        }], rxSelectComponent: [{
            type: ViewChild,
            args: [AdaptRxSelectComponent, { static: true }]
        }] }); })();
//# sourceMappingURL=select-migration.component.js.map