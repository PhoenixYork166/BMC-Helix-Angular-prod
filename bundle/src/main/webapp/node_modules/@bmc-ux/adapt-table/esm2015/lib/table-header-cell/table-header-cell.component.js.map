{"version":3,"file":"table-header-cell.component.js","sourceRoot":"","sources":["../../../../../../libs/adapt-table/src/lib/table-header-cell/table-header-cell.component.ts","../../../../../../libs/adapt-table/src/lib/table-header-cell/table-header-cell.html"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EAAE,KAAK,GACjB,MAAM,eAAe,CAAC;AACvB,OAAO,EAAC,mBAAmB,EAAC,MAAM,0BAA0B,CAAC;AAC7D,OAAO,EACL,iBAAiB,EAKlB,MAAM,uBAAuB,CAAC;;;;;;;;ICKrB,4BAAA;;;IAFA,4BAAA;IAAA,2HAEc;IAChB,0BAAA;;;;IAHe,eAAqD;IAArD,sEAAqD,kFAAA;;;IAKlE,4BAAA;IAAA,+BAAkC;IAAA,YAAyB;IAAA,iBAAO;IACpE,0BAAA;;;IADoC,eAAyB;IAAzB,4CAAyB;;;IAUzD,gCACuC;IAAA,YACvC;IAAA,iBAAO;;;;IADgC,eACvC;IADuC,oGACvC;;;;IATO,+BAM6C;IACpD,8BAAA;IAAA,uGAEO;IACT,4BAAA;IAAA,iBAAO;;;;IAVoC,sSAGmF,4EAAA,0CAAA;IAIrH,eAAkD;IAAlD,6EAAkD;;;IAxB/D,6BACmH;IACjH,0BAAA;IAMA,0BAAA;IAAA,6GAIc;IACd,0BAAA;IAAA,8IAEc;IACX,+BAA0C;IACxC,sBAAM;IAAA,+FAUF;IACT,2BAAA;IAAA,iBAAO;IACT,yBAAA;IAAA,0BAAe;;;;;IArBA,eAAyC;IAAzC,0DAAyC,iBAAA;IAapC,eAA0C;IAA1C,qEAA0C;;;IAWhE,wDAI6C;IAC7C,sBAAA;IAAA,iBAA+B;;;IAH7B,oCAAe,qCAAA,kDAAA;;ADtBrB,MAAM,OAAO,6BAA6B;IAOxC,YAAmB,KAA0B;QAA1B,UAAK,GAAL,KAAK,CAAqB;QAN7C,iBAAY,GAA6B,iBAAiB,CAAC;IAO3D,CAAC;IAED,6BAA6B,CAAC,MAAoB;QAChD,OAAO;YACL,MAAM,EAAE,MAAM;YACd,KAAK,EAAE,IAAI,CAAC,KAAK;SAClB,CAAC;IACJ,CAAC;IAED,oBAAoB,CAAC,OAAuB;QAC1C,OAAO,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC,CAAC;IACzE,CAAC;IAED,8BAA8B,CAAC,MAAoB;QACjD,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,EAAE,CAAC;QAErD,IAAI,IAAI,CAAC,KAAK,CAAC,kBAAkB,IAAI,aAAa,CAAC,MAAM,IAAI,CAAC,EAAE;YAC9D,MAAM,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC;YAC/B,MAAM,WAAW,GAAG,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC;YAEtF,OAAO,WAAW,IAAI,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;SAClD;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAED,cAAc,CAAC,MAAoB;QACjC,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC;IAED,yBAAyB,CAAC,MAAoB;QAC5C,OAAO,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,WAAW,CAAC;IACpF,CAAC;;0GAxCU,6BAA6B;gFAA7B,6BAA6B;QChB1C,2BAAK;QACH,oBAAA;QAAA,2BAA8C;QAC5C,sBAAA;QAAA,2BAC+D;QAC7D,wBAAA;QAAA,iGA6Be;QACjB,sBAAA;QAAA,iBAAM;QAEN,wBAAA;QAAA,gIAK+B;QAEjC,uBAAA;QAAA,iBAAM;QACR,mBAAA;QAAA,iBAAM;QAEN,qBAAA;QAAA,+CAEqC;QACrC,mBAAA;QAAA,iBAAsB;QACtB,mBAAA;;QAjDO,eAAwC;QAAxC,+CAAwC;QACtC,eAAuD;QAAvD,kFAAuD;QACvD,sEAAyD;QAEjC,eAAmC;QAAnC,4DAAmC,6CAAA;QAgC7D,eAAkF;QAAlF,+GAAkF;QASpE,eAAgE;QAAhE,sFAAgE,oBAAA,oBAAA;;uFD9BxE,6BAA6B;cAJzC,SAAS;eAAC;gBACT,QAAQ,EAAE,yBAAyB;gBACnC,WAAW,EAAE,0BAA0B;aACxC;sEAIU,eAAe;kBAAvB,KAAK;YACG,KAAK;kBAAb,KAAK;YACG,KAAK;kBAAb,KAAK","sourcesContent":["import {\n  Component, Input,\n} from '@angular/core';\nimport {AdaptTableComponent} from '../adapt-table.component';\nimport {\n  AdaptTableClasses,\n  ColumnConfig,\n  ColumnHeaderTemplateParams,\n  RenderingColumnConfig,\n  TableCustomTexts\n} from '../adapt-table.models';\n\n@Component({\n  selector: 'adapt-table-header-cell',\n  templateUrl: './table-header-cell.html'\n})\nexport class AdaptTableHeaderCellComponent {\n  tableClasses: typeof AdaptTableClasses = AdaptTableClasses;\n\n  @Input() renderingColumn: RenderingColumnConfig;\n  @Input() index: number;\n  @Input() texts: TableCustomTexts;\n\n  constructor(public table: AdaptTableComponent) {\n  }\n\n  getColumnHeaderTemplateParams(column: ColumnConfig): ColumnHeaderTemplateParams {\n    return {\n      column: column,\n      index: this.index,\n    };\n  }\n\n  getFilterableColumns(columns: ColumnConfig[]): ColumnConfig[] {\n    return columns.filter(column => this.table.isFilterableColumn(column));\n  }\n\n  getDisplayNumberOfSortingOrder(column: ColumnConfig): number | null {\n    const multiSortMeta = this.table.multiSortMeta || [];\n\n    if (this.table.isMultipleSortMode && multiSortMeta.length >= 2) {\n      const sortField = column.field;\n      const indexOfSort = multiSortMeta.findIndex(sortMeta => sortMeta.field === sortField);\n\n      return indexOfSort >= 0 ? indexOfSort + 1 : null;\n    }\n\n    return null;\n  }\n\n  isSortedColumn(column: ColumnConfig): boolean {\n    return this.table.isSorted(column.field);\n  }\n\n  getSortedColumnSvgViewBox(column: ColumnConfig): string {\n    return this.table.isColumnSortOrderAsc(column.field) ? '0 -6 18 24' : '0 6 18 24';\n  }\n\n}\n","<div>\n  <div class=\"{{tableClasses.HeaderContainer}}\">\n    <div class=\"{{tableClasses.HeaderTitle}} text-url-break-out\"\n         [class.c-header__separator_no-wrap]=\"!table.wrapCellText\">\n      <ng-container\n        *ngFor=\"let columnConfig of renderingColumn.columnsConfigs; let index = index; trackBy: table.trackByForColumns\">\n        <!--\n        !ATTENTION! Please don't change layout in block bellow. Don't delete comments or add any line breaks.\n        This specific layout was made to avoid hyphenation of sort icon to line after text.\n        Sort icon should always be on the same line as header text.\n        Additional info can be found here - https://github.bmc.com/bmc-ux/adapt-angular/issues/2986\n        -->\n        <ng-template [ngIf]=\"columnConfig.headerTitleTemplate\" [ngIfElse]=\"headerTitleDefaultTemplate\">\n          <ng-template [ngTemplateOutlet]=\"columnConfig.headerTitleTemplate\"\n                       [ngTemplateOutletContext]=\"getColumnHeaderTemplateParams(columnConfig)\">\n          </ng-template>\n        </ng-template>\n        <ng-template #headerTitleDefaultTemplate>\n          <span class=\"c-header__separator\">{{ columnConfig.header }}</span>\n        </ng-template><!--\n        --><span class=\"c-header__sort-icon-wrapper\"><!--\n          -->&nbsp;<span class=\"c-header__sort-icon\" [ngClass]=\"{\n                         'd-icon-sorting': !isSortedColumn(columnConfig),\n                         'd-icon-triangle_up_adapt': isSortedColumn(columnConfig) && table.isColumnSortOrderAsc(columnConfig.field),\n                         'd-icon-triangle_down_adapt': isSortedColumn(columnConfig) && !table.isColumnSortOrderAsc(columnConfig.field)}\"\n                         *ngIf=\"table.isSortableColumn(columnConfig)\"\n                         [pSortableColumnDisabled]=\"!table.isSortableColumn(columnConfig)\"\n                         [pSortableColumn]=\"columnConfig.field\">\n            <span *ngIf=\"getDisplayNumberOfSortingOrder(columnConfig)\"\n                  class=\"at__sorted-column-number\">{{ getDisplayNumberOfSortingOrder(columnConfig) }}\n            </span>\n          </span>\n        </span>\n      </ng-container>\n    </div>\n\n    <adapt-table-header-cell-menu\n      *ngIf=\"table.isMultipleSortMode && table.isSortableRenderingColumn(renderingColumn)\"\n      [table]=\"table\"\n      [headerCellMenuTexts]=\"texts\"\n      [columns]=\"renderingColumn.columnsConfigs\">\n    </adapt-table-header-cell-menu>\n\n  </div>\n</div>\n\n<adapt-table-filters [columns]=\"getFilterableColumns(renderingColumn.columnsConfigs)\"\n                     [index]=\"index\"\n                     [texts]=\"texts\">\n</adapt-table-filters>\n"]}