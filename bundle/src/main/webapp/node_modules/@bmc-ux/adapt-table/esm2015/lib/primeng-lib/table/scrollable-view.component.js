import { ChangeDetectionStrategy, Component, ElementRef, Input, NgZone, ViewChild } from '@angular/core';
import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { EventManager } from '@angular/platform-browser';
import { DomHandler } from 'primeng/dom';
import { AdaptTableComponent } from '../../adapt-table.component';
import { AdaptTableClasses, AdaptTableEventSource } from '../../adapt-table.models';
import { calculateScrollbarWidth } from './utils';
import * as i0 from "@angular/core";
import * as i1 from "../../adapt-table.component";
import * as i2 from "@angular/platform-browser";
const _c0 = ["scrollHeader"];
const _c1 = ["scrollHeaderBox"];
const _c2 = ["scrollBody"];
const _c3 = ["scrollTable"];
const _c4 = ["scrollFooter"];
const _c5 = ["scrollFooterBox"];
const _c6 = ["scrollableAligner"];
const _c7 = ["pScrollableView", ""];
function ScrollableView_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function ScrollableView_ng_container_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function ScrollableView_ng_template_18_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c8 = function (a0, a1, a2) { return { $implicit: a0, rowIndex: a1, columns: a2 }; };
function ScrollableView_ng_template_18_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n            ");
    i0.ɵɵtemplate(1, ScrollableView_ng_template_18_ng_container_1_Template, 1, 0, "ng-container", 5);
    i0.ɵɵtext(2, "\n          ");
} if (rf & 2) {
    const rowData_r12 = ctx.$implicit;
    const rowIndex_r13 = ctx.index;
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r4.dt.frozenRowsTemplate)("ngTemplateOutletContext", i0.ɵɵpureFunction3(2, _c8, rowData_r12, rowIndex_r13, ctx_r4.columns));
} }
function ScrollableView_ng_container_24_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function ScrollableView_ng_container_24_div_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 21, 22);
} }
function ScrollableView_ng_container_24_adapt_table_infinite_scrolling_loader_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-table-infinite-scrolling-loader", 23);
} if (rf & 2) {
    const ctx_r19 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("infiniteScrollLoading", ctx_r19.dt.loadingMore);
} }
const _c9 = function (a0) { return { "height": a0 }; };
const _c10 = function (a0) { return { $implicit: a0 }; };
function ScrollableView_ng_container_24_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "div", 15, 16);
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵelementStart(5, "table", 4, 17);
    i0.ɵɵtext(7, "\n          ");
    i0.ɵɵtemplate(8, ScrollableView_ng_container_24_ng_container_8_Template, 1, 0, "ng-container", 5);
    i0.ɵɵtext(9, "\n          ");
    i0.ɵɵelement(10, "tbody", 18);
    i0.ɵɵtext(11, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n        ");
    i0.ɵɵtemplate(13, ScrollableView_ng_container_24_div_13_Template, 2, 0, "div", 19);
    i0.ɵɵtext(14, "\n        ");
    i0.ɵɵtemplate(15, ScrollableView_ng_container_24_adapt_table_infinite_scrolling_loader_15_Template, 1, 1, "adapt-table-infinite-scrolling-loader", 20);
    i0.ɵɵtext(16, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(17, "\n    ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵclassMap(ctx_r5.tableClasses.TableScrollableBody);
    i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(14, _c9, ctx_r5.dt.scrollHeight !== "flex" ? ctx_r5.scrollHeight : undefined));
    i0.ɵɵadvance(3);
    i0.ɵɵclassMap(ctx_r5.tableClasses.TableScrollableBodyTable);
    i0.ɵɵproperty("ngClass", ctx_r5.dt.tableStyleClass)("ngStyle", ctx_r5.dt.tableStyle);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r5.frozen ? ctx_r5.dt.frozenColGroupTemplate || ctx_r5.dt.colGroupTemplate : ctx_r5.dt.colGroupTemplate)("ngTemplateOutletContext", i0.ɵɵpureFunction1(16, _c10, ctx_r5.columns));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("pTableBody", ctx_r5.columns)("pTableBodyTemplate", ctx_r5.frozen ? ctx_r5.dt.frozenBodyTemplate || ctx_r5.dt.bodyTemplate : ctx_r5.dt.bodyTemplate)("frozen", ctx_r5.frozen);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r5.frozen);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r5.canShowInfiniteScrollingLoader());
} }
function ScrollableView_ng_template_26_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function ScrollableView_ng_template_26_div_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 21, 22);
} }
function ScrollableView_ng_template_26_adapt_table_infinite_scrolling_loader_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-table-infinite-scrolling-loader", 23);
} if (rf & 2) {
    const ctx_r24 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("infiniteScrollLoading", ctx_r24.dt.loadingMore);
} }
const _c11 = function (a0) { return { "ui-table-virtual-scrollable-body_empty": a0 }; };
function ScrollableView_ng_template_26_Template(rf, ctx) { if (rf & 1) {
    const _r27 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵelementStart(1, "cdk-virtual-scroll-viewport", 24);
    i0.ɵɵlistener("scrolledIndexChange", function ScrollableView_ng_template_26_Template_cdk_virtual_scroll_viewport_scrolledIndexChange_1_listener($event) { i0.ɵɵrestoreView(_r27); const ctx_r26 = i0.ɵɵnextContext(); return ctx_r26.onScrollIndexChange($event); });
    i0.ɵɵtext(2, "\n        ");
    i0.ɵɵelementStart(3, "table", 4, 17);
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵtemplate(6, ScrollableView_ng_template_26_ng_container_6_Template, 1, 0, "ng-container", 5);
    i0.ɵɵtext(7, "\n          ");
    i0.ɵɵelement(8, "tbody", 18);
    i0.ɵɵtext(9, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n        ");
    i0.ɵɵtemplate(11, ScrollableView_ng_template_26_div_11_Template, 2, 0, "div", 19);
    i0.ɵɵtext(12, "\n        ");
    i0.ɵɵtemplate(13, ScrollableView_ng_template_26_adapt_table_infinite_scrolling_loader_13_Template, 1, 1, "adapt-table-infinite-scrolling-loader", 20);
    i0.ɵɵtext(14, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n    ");
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵclassMap(ctx_r7.tableClasses.TableVirtualScrollableBody);
    i0.ɵɵstyleProp("height", ctx_r7.dt.scrollHeight !== "flex" ? ctx_r7.scrollHeight : undefined);
    i0.ɵɵproperty("itemSize", ctx_r7.dt.virtualRowHeight)("minBufferPx", ctx_r7.dt.minBufferPx)("maxBufferPx", ctx_r7.dt.maxBufferPx)("ngClass", i0.ɵɵpureFunction1(19, _c11, ctx_r7.dt.isEmpty()));
    i0.ɵɵadvance(2);
    i0.ɵɵclassMap(ctx_r7.tableClasses.TableScrollableBodyTable);
    i0.ɵɵproperty("ngClass", ctx_r7.dt.tableStyleClass)("ngStyle", ctx_r7.dt.tableStyle);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r7.frozen ? ctx_r7.dt.frozenColGroupTemplate || ctx_r7.dt.colGroupTemplate : ctx_r7.dt.colGroupTemplate)("ngTemplateOutletContext", i0.ɵɵpureFunction1(21, _c10, ctx_r7.columns));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("pTableBody", ctx_r7.columns)("pTableBodyTemplate", ctx_r7.frozen ? ctx_r7.dt.frozenBodyTemplate || ctx_r7.dt.bodyTemplate : ctx_r7.dt.bodyTemplate)("frozen", ctx_r7.frozen);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r7.frozen);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r7.canShowInfiniteScrollingLoader());
} }
function ScrollableView_ng_container_37_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function ScrollableView_ng_container_41_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
// eslint-disable-next-line @angular-eslint/component-class-suffix
export class ScrollableView {
    constructor(dt, el, zone, _eventManager) {
        this.dt = dt;
        this.el = el;
        this.zone = zone;
        this._eventManager = _eventManager;
        this.tableClasses = AdaptTableClasses;
        this._visualViewportResizeListenerBind = this._visualViewportResizeListener.bind(this);
        this.subscription = this.dt.tableService.valueSource$.subscribe(() => {
            this.zone.runOutsideAngular(() => {
                setTimeout(() => {
                    this.alignScrollBar();
                }, 50);
            });
        });
        this.initialized = false;
    }
    get scrollHeight() {
        return this._scrollHeight;
    }
    set scrollHeight(val) {
        this._scrollHeight = val;
    }
    ngAfterViewChecked() {
        if (!this.initialized && this.el.nativeElement.offsetParent) {
            this.alignScrollBar();
            this.initialized = true;
        }
    }
    ngAfterViewInit() {
        this.dt.scrollableView = this;
        if (!this.frozen) {
            if (this.dt.frozenColumns || this.dt.frozenBodyTemplate) {
                DomHandler.addClass(this.el.nativeElement, 'ui-table-unfrozen-view');
            }
            const frozenView = this.el.nativeElement.previousElementSibling;
            if (frozenView) {
                if (this.dt.virtualScroll) {
                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, `.${AdaptTableClasses.TableVirtualScrollableBody}`);
                }
                else {
                    this.frozenSiblingBody = DomHandler.findSingle(frozenView, `.${AdaptTableClasses.TableScrollableBody}`);
                }
            }
        }
        else {
            if (this.scrollableAlignerViewChild && this.scrollableAlignerViewChild.nativeElement) {
                this.scrollableAlignerViewChild.nativeElement.style.height = DomHandler.calculateScrollbarHeight() + 'px';
            }
        }
        this.bindEvents();
        this.alignScrollBar();
        this._subscribeOnVisualViewportResize();
    }
    canShowInfiniteScrollingLoader() {
        const table = this.dt;
        const value = table.value;
        return table.enableInfiniteScrolling && table.showLoader && value != null && value.length !== 0 &&
            !table.hasReachedTotalRecords();
    }
    bindEvents() {
        this.zone.runOutsideAngular(() => {
            if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {
                this.headerScrollListener = this.onHeaderScroll.bind(this);
                this.scrollHeaderViewChild.nativeElement.addEventListener('scroll', this.headerScrollListener);
            }
            if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {
                this.footerScrollListener = this.onFooterScroll.bind(this);
                this.scrollFooterViewChild.nativeElement.addEventListener('scroll', this.footerScrollListener);
            }
            if (!this.frozen) {
                this.bodyScrollListener = this.onBodyScroll.bind(this);
                if (this.dt.virtualScroll) {
                    this.virtualScrollBody.getElementRef().nativeElement.addEventListener('scroll', this.bodyScrollListener);
                }
                else {
                    this.scrollBodyViewChild.nativeElement.addEventListener('scroll', this.bodyScrollListener);
                }
            }
        });
    }
    unbindEvents() {
        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {
            this.scrollHeaderViewChild.nativeElement.removeEventListener('scroll', this.headerScrollListener);
        }
        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {
            this.scrollFooterViewChild.nativeElement.removeEventListener('scroll', this.footerScrollListener);
        }
        if (this.scrollBodyViewChild && this.scrollBodyViewChild.nativeElement) {
            this.scrollBodyViewChild.nativeElement.removeEventListener('scroll', this.bodyScrollListener);
        }
        if (this.virtualScrollBody && this.virtualScrollBody.getElementRef()) {
            this.virtualScrollBody.getElementRef().nativeElement.removeEventListener('scroll', this.bodyScrollListener);
        }
    }
    onHeaderScroll() {
        const scrollLeft = this.scrollHeaderViewChild.nativeElement.scrollLeft;
        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;
        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {
            this.scrollFooterViewChild.nativeElement.scrollLeft = scrollLeft;
        }
        this.preventBodyScrollPropagation = true;
    }
    onFooterScroll() {
        const scrollLeft = this.scrollFooterViewChild.nativeElement.scrollLeft;
        this.scrollBodyViewChild.nativeElement.scrollLeft = scrollLeft;
        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {
            this.scrollHeaderViewChild.nativeElement.scrollLeft = scrollLeft;
        }
        this.preventBodyScrollPropagation = true;
    }
    onBodyScroll(event) {
        if (this.preventBodyScrollPropagation) {
            this.preventBodyScrollPropagation = false;
            return;
        }
        if (this.scrollHeaderViewChild && this.scrollHeaderViewChild.nativeElement) {
            if (this.dt.isRtl) {
                this.scrollHeaderBoxViewChild.nativeElement.style.marginRight = event.target.scrollLeft + 'px';
            }
            else {
                this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = -event.target.scrollLeft + 'px';
            }
        }
        if (this.scrollFooterViewChild && this.scrollFooterViewChild.nativeElement) {
            this.scrollFooterBoxViewChild.nativeElement.style.marginLeft = -event.target.scrollLeft + 'px';
        }
        if (this.frozenSiblingBody) {
            this.frozenSiblingBody.scrollTop = event.target.scrollTop;
        }
    }
    // Override
    hasVerticalOverflow() {
        const scrollTablePositionHeight = this.scrollTableViewChild.nativeElement.getBoundingClientRect().height;
        const scrollBodyPositionHeight = this.dt.virtualScroll
            ? this.virtualScrollBody.getViewportSize()
            : this.scrollBodyViewChild.nativeElement.getBoundingClientRect().height;
        return scrollTablePositionHeight > scrollBodyPositionHeight;
    }
    alignScrollBar(recalculateScrollBarWidth) {
        if (!this.frozen) {
            const scrollBarWidth = this.hasVerticalOverflow() ? calculateScrollbarWidth(null, recalculateScrollBarWidth) : 0;
            if (this.dt.isRtl) {
                this.scrollHeaderBoxViewChild.nativeElement.style.marginLeft = scrollBarWidth + 'px';
            }
            else {
                this.scrollHeaderBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';
            }
            if (this.scrollFooterBoxViewChild && this.scrollFooterBoxViewChild.nativeElement) {
                this.scrollFooterBoxViewChild.nativeElement.style.marginRight = scrollBarWidth + 'px';
            }
        }
        this.initialized = false;
    }
    ngOnDestroy() {
        this.unbindEvents();
        this.frozenSiblingBody = null;
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
        if (window.visualViewport) {
            window.visualViewport.removeEventListener('resize', this._visualViewportResizeListenerBind);
        }
        this.initialized = false;
    }
    getPageCount() {
        const dataToRender = this.dt.filteredValue || this.dt.value;
        const dataLength = dataToRender ? dataToRender.length : 0;
        return Math.ceil(dataLength / this.dt.rows);
    }
    onScrollIndexChange(index) {
        // In case we don't want to emit onLazyLoad event on init
        if (!this.dt.lazyLoadOnInit && index === 0) {
            return;
        }
        if (this.dt.lazy) {
            if (this.virtualScrollTimeout) {
                clearTimeout(this.virtualScrollTimeout);
            }
            this.virtualScrollTimeout = window.setTimeout(() => {
                const page = Math.floor(index / this.dt.rows);
                const virtualScrollOffset = page === 0 ? 0 : (page - 1) * this.dt.rows;
                const virtualScrollChunkSize = page === 0 ? this.dt.rows * 2 : this.dt.rows * 3;
                if (page !== this.virtualPage) {
                    this.virtualPage = page;
                    this.dt.onLazyLoad.emit({
                        eventSource: AdaptTableEventSource.LoadMore,
                        first: virtualScrollOffset,
                        rows: virtualScrollChunkSize,
                        sortField: this.dt.sortField,
                        sortOrder: this.dt.sortOrder,
                        filters: this.dt.filters,
                        globalFilter: this.dt.filters && this.dt.filters.global ? this.dt.filters.global.value : null,
                        multiSortMeta: this.dt.multiSortMeta,
                        loadMore: false,
                        infiniteScrollingFirst: null
                    });
                }
            }, this.dt.virtualScrollDelay);
        }
    }
    scrollToVirtualIndex(index) {
        if (this.virtualScrollBody) {
            this.virtualScrollBody.scrollToIndex(index);
        }
    }
    scrollTo(options) {
        if (this.virtualScrollBody) {
            this.virtualScrollBody.scrollTo(options);
        }
        else {
            if (this.scrollBodyViewChild.nativeElement.scrollTo) {
                this.scrollBodyViewChild.nativeElement.scrollTo(options);
            }
            else {
                this.scrollBodyViewChild.nativeElement.scrollLeft = options.left;
                this.scrollBodyViewChild.nativeElement.scrollTop = options.top;
            }
        }
    }
    _subscribeOnVisualViewportResize() {
        // Firefox Responsive Design Mode have Viewport Zooming disabled by default
        if (window.visualViewport) {
            window.visualViewport.addEventListener('resize', this._visualViewportResizeListenerBind);
        }
    }
    _visualViewportResizeListener() {
        this.zone.runOutsideAngular(() => {
            this.alignScrollBar(true);
        });
    }
}
ScrollableView.ɵfac = function ScrollableView_Factory(t) { return new (t || ScrollableView)(i0.ɵɵdirectiveInject(i1.AdaptTableComponent), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.EventManager)); };
ScrollableView.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ScrollableView, selectors: [["", "pScrollableView", ""]], viewQuery: function ScrollableView_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
        i0.ɵɵviewQuery(_c1, 5);
        i0.ɵɵviewQuery(_c2, 5);
        i0.ɵɵviewQuery(_c3, 5);
        i0.ɵɵviewQuery(_c4, 5);
        i0.ɵɵviewQuery(_c5, 5);
        i0.ɵɵviewQuery(_c6, 5);
        i0.ɵɵviewQuery(CdkVirtualScrollViewport, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollHeaderViewChild = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollHeaderBoxViewChild = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollBodyViewChild = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollTableViewChild = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollFooterViewChild = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollFooterBoxViewChild = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.scrollableAlignerViewChild = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.virtualScrollBody = _t.first);
    } }, inputs: { columns: ["pScrollableView", "columns"], frozen: "frozen", scrollHeight: "scrollHeight" }, attrs: _c7, decls: 47, vars: 32, consts: [[1, "ui-widget-header"], ["scrollHeader", ""], [1, "ui-table-scrollable-header-box"], ["scrollHeaderBox", ""], [3, "ngClass", "ngStyle"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "ui-table-thead"], [1, "ui-table-tbody"], ["ngFor", "", 3, "ngForOf", "ngForTrackBy"], [4, "ngIf", "ngIfElse"], ["virtualScrollTemplate", ""], ["scrollFooter", ""], [1, "ui-table-scrollable-footer-box"], ["scrollFooterBox", ""], [1, "ui-table-tfoot"], [3, "ngStyle"], ["scrollBody", ""], ["scrollTable", ""], [1, "ui-table-tbody", 3, "pTableBody", "pTableBodyTemplate", "frozen"], ["style", "background-color:transparent", 4, "ngIf"], [3, "infiniteScrollLoading", 4, "ngIf"], [2, "background-color", "transparent"], ["scrollableAligner", ""], [3, "infiniteScrollLoading"], [3, "itemSize", "minBufferPx", "maxBufferPx", "ngClass", "scrolledIndexChange"]], template: function ScrollableView_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtext(0, "\n    ");
        i0.ɵɵelementStart(1, "div", 0, 1);
        i0.ɵɵtext(3, "\n      ");
        i0.ɵɵelementStart(4, "div", 2, 3);
        i0.ɵɵtext(6, "\n        ");
        i0.ɵɵelementStart(7, "table", 4);
        i0.ɵɵtext(8, "\n          ");
        i0.ɵɵtemplate(9, ScrollableView_ng_container_9_Template, 1, 0, "ng-container", 5);
        i0.ɵɵtext(10, "\n          ");
        i0.ɵɵelementStart(11, "thead", 6);
        i0.ɵɵtext(12, "\n          ");
        i0.ɵɵtemplate(13, ScrollableView_ng_container_13_Template, 1, 0, "ng-container", 5);
        i0.ɵɵtext(14, "\n          ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(15, "\n          ");
        i0.ɵɵelementStart(16, "tbody", 7);
        i0.ɵɵtext(17, "\n          ");
        i0.ɵɵtemplate(18, ScrollableView_ng_template_18_Template, 3, 6, "ng-template", 8);
        i0.ɵɵtext(19, "\n          ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(20, "\n        ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(21, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(22, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(23, "\n    ");
        i0.ɵɵtemplate(24, ScrollableView_ng_container_24_Template, 18, 18, "ng-container", 9);
        i0.ɵɵtext(25, "\n    ");
        i0.ɵɵtemplate(26, ScrollableView_ng_template_26_Template, 16, 23, "ng-template", null, 10, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(28, "\n    ");
        i0.ɵɵelementStart(29, "div", 0, 11);
        i0.ɵɵtext(31, "\n      ");
        i0.ɵɵelementStart(32, "div", 12, 13);
        i0.ɵɵtext(34, "\n        ");
        i0.ɵɵelementStart(35, "table", 4);
        i0.ɵɵtext(36, "\n          ");
        i0.ɵɵtemplate(37, ScrollableView_ng_container_37_Template, 1, 0, "ng-container", 5);
        i0.ɵɵtext(38, "\n          ");
        i0.ɵɵelementStart(39, "tfoot", 14);
        i0.ɵɵtext(40, "\n          ");
        i0.ɵɵtemplate(41, ScrollableView_ng_container_41_Template, 1, 0, "ng-container", 5);
        i0.ɵɵtext(42, "\n          ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(43, "\n        ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(44, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(45, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(46, "\n  ");
    } if (rf & 2) {
        const _r6 = i0.ɵɵreference(27);
        i0.ɵɵadvance(1);
        i0.ɵɵclassMap(ctx.tableClasses.TableScrollableHeader);
        i0.ɵɵadvance(6);
        i0.ɵɵclassMap(ctx.tableClasses.TableScrollableHeaderTable);
        i0.ɵɵproperty("ngClass", ctx.dt.tableStyleClass)("ngStyle", ctx.dt.tableStyle);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngTemplateOutlet", ctx.frozen ? ctx.dt.frozenColGroupTemplate || ctx.dt.colGroupTemplate : ctx.dt.colGroupTemplate)("ngTemplateOutletContext", i0.ɵɵpureFunction1(24, _c10, ctx.columns));
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngTemplateOutlet", ctx.frozen ? ctx.dt.frozenHeaderTemplate || ctx.dt.headerTemplate : ctx.dt.headerTemplate)("ngTemplateOutletContext", i0.ɵɵpureFunction1(26, _c10, ctx.columns));
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngForOf", ctx.dt.frozenValue)("ngForTrackBy", ctx.dt.rowTrackBy);
        i0.ɵɵadvance(6);
        i0.ɵɵproperty("ngIf", !ctx.dt.virtualScroll)("ngIfElse", _r6);
        i0.ɵɵadvance(5);
        i0.ɵɵclassMap(ctx.tableClasses.TableScrollableFooter);
        i0.ɵɵadvance(6);
        i0.ɵɵclassMap(ctx.tableClasses.TableScrollableFooterTable);
        i0.ɵɵproperty("ngClass", ctx.dt.tableStyleClass)("ngStyle", ctx.dt.tableStyle);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngTemplateOutlet", ctx.frozen ? ctx.dt.frozenColGroupTemplate || ctx.dt.colGroupTemplate : ctx.dt.colGroupTemplate)("ngTemplateOutletContext", i0.ɵɵpureFunction1(28, _c10, ctx.columns));
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngTemplateOutlet", ctx.frozen ? ctx.dt.frozenFooterTemplate || ctx.dt.footerTemplate : ctx.dt.footerTemplate)("ngTemplateOutletContext", i0.ɵɵpureFunction1(30, _c10, ctx.columns));
    } }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ScrollableView, [{
        type: Component,
        args: [{
                // eslint-disable-next-line @angular-eslint/component-selector
                selector: '[pScrollableView]',
                template: `
    <div #scrollHeader
         [class]="tableClasses.TableScrollableHeader"
         class="ui-widget-header">
      <div #scrollHeaderBox class="ui-table-scrollable-header-box">
        <table
          [class]="tableClasses.TableScrollableHeaderTable"
          [ngClass]="dt.tableStyleClass"
          [ngStyle]="dt.tableStyle">
          <ng-container
            *ngTemplateOutlet="frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}"></ng-container>
          <thead class="ui-table-thead">
          <ng-container
            *ngTemplateOutlet="frozen ? dt.frozenHeaderTemplate||dt.headerTemplate : dt.headerTemplate; context {$implicit: columns}"></ng-container>
          </thead>
          <tbody class="ui-table-tbody">
          <ng-template ngFor let-rowData let-rowIndex="index" [ngForOf]="dt.frozenValue" [ngForTrackBy]="dt.rowTrackBy">
            <ng-container
              *ngTemplateOutlet="dt.frozenRowsTemplate; context: {$implicit: rowData, rowIndex: rowIndex, columns: columns}"></ng-container>
          </ng-template>
          </tbody>
        </table>
      </div>
    </div>
    <ng-container *ngIf="!dt.virtualScroll; else virtualScrollTemplate">
      <div #scrollBody
           [class]="tableClasses.TableScrollableBody"
           [ngStyle]="{'height': dt.scrollHeight !== 'flex' ? scrollHeight : undefined}">
        <table #scrollTable
               [ngClass]="dt.tableStyleClass"
               [ngStyle]="dt.tableStyle"
               [class]="tableClasses.TableScrollableBodyTable">
          <ng-container
            *ngTemplateOutlet="frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}"></ng-container>
          <tbody class="ui-table-tbody"
                 [pTableBody]="columns"
                 [pTableBodyTemplate]="frozen ? dt.frozenBodyTemplate||dt.bodyTemplate : dt.bodyTemplate"
                 [frozen]="frozen"></tbody>
        </table>
        <div #scrollableAligner style="background-color:transparent" *ngIf="frozen"></div>
        <adapt-table-infinite-scrolling-loader *ngIf="canShowInfiniteScrollingLoader()"
                                               [infiniteScrollLoading]="dt.loadingMore"></adapt-table-infinite-scrolling-loader>
      </div>
    </ng-container>
    <ng-template #virtualScrollTemplate>
      <cdk-virtual-scroll-viewport [itemSize]="dt.virtualRowHeight"
                                   [style.height]="dt.scrollHeight !== 'flex' ? scrollHeight : undefined"
                                   [minBufferPx]="dt.minBufferPx"
                                   [maxBufferPx]="dt.maxBufferPx"
                                   (scrolledIndexChange)="onScrollIndexChange($event)"
                                   [ngClass]="{'ui-table-virtual-scrollable-body_empty': dt.isEmpty()}"
                                   [class]="tableClasses.TableVirtualScrollableBody">
        <table #scrollTable
               [ngClass]="dt.tableStyleClass"
               [ngStyle]="dt.tableStyle"
               [class]="tableClasses.TableScrollableBodyTable">
          <ng-container
            *ngTemplateOutlet="frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}"></ng-container>
          <tbody class="ui-table-tbody"
                 [pTableBody]="columns"
                 [pTableBodyTemplate]="frozen ? dt.frozenBodyTemplate||dt.bodyTemplate : dt.bodyTemplate"
                 [frozen]="frozen"></tbody>
        </table>
        <div #scrollableAligner style="background-color:transparent" *ngIf="frozen"></div>
        <adapt-table-infinite-scrolling-loader *ngIf="canShowInfiniteScrollingLoader()"
                                               [infiniteScrollLoading]="dt.loadingMore"></adapt-table-infinite-scrolling-loader>
      </cdk-virtual-scroll-viewport>
    </ng-template>
    <div #scrollFooter [class]="tableClasses.TableScrollableFooter" class="ui-widget-header">
      <div #scrollFooterBox class="ui-table-scrollable-footer-box">
        <table
          [class]="tableClasses.TableScrollableFooterTable"
          [ngClass]="dt.tableStyleClass"
          [ngStyle]="dt.tableStyle">
          <ng-container
            *ngTemplateOutlet="frozen ? dt.frozenColGroupTemplate||dt.colGroupTemplate : dt.colGroupTemplate; context {$implicit: columns}"></ng-container>
          <tfoot class="ui-table-tfoot">
          <ng-container
            *ngTemplateOutlet="frozen ? dt.frozenFooterTemplate||dt.footerTemplate : dt.footerTemplate; context {$implicit: columns}"></ng-container>
          </tfoot>
        </table>
      </div>
    </div>
  `,
                changeDetection: ChangeDetectionStrategy.Default
            }]
    }], function () { return [{ type: i1.AdaptTableComponent }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i2.EventManager }]; }, { columns: [{
            type: Input,
            args: ['pScrollableView']
        }], frozen: [{
            type: Input
        }], scrollHeaderViewChild: [{
            type: ViewChild,
            args: ['scrollHeader', { static: false }]
        }], scrollHeaderBoxViewChild: [{
            type: ViewChild,
            args: ['scrollHeaderBox', { static: false }]
        }], scrollBodyViewChild: [{
            type: ViewChild,
            args: ['scrollBody', { static: false }]
        }], scrollTableViewChild: [{
            type: ViewChild,
            args: ['scrollTable', { static: false }]
        }], scrollFooterViewChild: [{
            type: ViewChild,
            args: ['scrollFooter', { static: false }]
        }], scrollFooterBoxViewChild: [{
            type: ViewChild,
            args: ['scrollFooterBox', { static: false }]
        }], scrollableAlignerViewChild: [{
            type: ViewChild,
            args: ['scrollableAligner', { static: false }]
        }], virtualScrollBody: [{
            type: ViewChild,
            args: [CdkVirtualScrollViewport, { static: false }]
        }], scrollHeight: [{
            type: Input
        }] }); })();
//# sourceMappingURL=scrollable-view.component.js.map