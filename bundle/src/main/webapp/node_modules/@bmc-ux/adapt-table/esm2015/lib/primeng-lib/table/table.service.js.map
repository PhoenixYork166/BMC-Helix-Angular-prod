{"version":3,"file":"table.service.js","sourceRoot":"","sources":["../../../../../../../libs/adapt-table/src/lib/primeng-lib/table/table.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AACzC,OAAO,EAAa,OAAO,EAAC,MAAM,MAAM,CAAC;;AAQzC,MAAM,OAAO,YAAY;IAHzB;QAKU,eAAU,GAAmC,IAAI,OAAO,EAAyB,CAAC;QAClF,oBAAe,GAAyC,IAAI,OAAO,EAA+B,CAAC;QACnG,gBAAW,GAAuB,IAAI,OAAO,EAAa,CAAC;QAC3D,uBAAkB,GAAoB,IAAI,OAAO,EAAU,CAAC;QAC5D,kBAAa,GAA4B,IAAI,OAAO,EAAE,CAAC;QACvD,0BAAqB,GAAkB,IAAI,OAAO,EAAE,CAAC;QAE7D,gBAAW,GAAsC,IAAI,CAAC,UAAU,CAAC,YAAY,EAAE,CAAC;QAChF,qBAAgB,GAA4C,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;QAChG,iBAAY,GAA0B,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;QACtE,wBAAmB,GAAuB,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;QACjF,mBAAc,GAA+B,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC;QAC/E,qHAAqH;QACrH,2BAAsB,GAAqB,IAAI,CAAC,qBAAqB,CAAC,YAAY,EAAE,CAAC;KA4BtF;IA1BC,MAAM,CAAC,QAA+B;QACpC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/B,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACjC,CAAC;IAED,iBAAiB,CAAC,SAAsC;QACtD,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACvC,CAAC;IAED,aAAa,CAAC,KAAgB;QAC5B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC7B,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACjC,CAAC;IAED,oBAAoB,CAAC,KAAa;QAChC,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;IAED,eAAe,CAAC,OAAuB;QACrC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACjC,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACjC,CAAC;IAED,uBAAuB;QACrB,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAAC;IACpC,CAAC;;wEA1CU,YAAY;kEAAZ,YAAY,WAAZ,YAAY,mBAFX,MAAM;uFAEP,YAAY;cAHxB,UAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {SortMeta} from 'primeng/api';\nimport {ColumnConfig, RowData, RowDataItem} from '../../adapt-table.models';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TableService {\n\n  private sortSource: Subject<SortMeta | SortMeta[]> = new Subject<SortMeta | SortMeta[]>();\n  private selectionSource: Subject<RowDataItem[] | RowDataItem> = new Subject<RowDataItem[] | RowDataItem>();\n  private valueSource: Subject<RowData[]> = new Subject<RowData[]>();\n  private totalRecordsSource: Subject<number> = new Subject<number>();\n  private columnsSource: Subject<ColumnConfig[]> = new Subject();\n  private viewRelatedDataSource: Subject<void> = new Subject();\n\n  sortSource$: Observable<SortMeta | SortMeta[]> = this.sortSource.asObservable();\n  selectionSource$: Observable<RowDataItem[] | RowDataItem> = this.selectionSource.asObservable();\n  valueSource$: Observable<RowData[]> = this.valueSource.asObservable();\n  totalRecordsSource$: Observable<number> = this.totalRecordsSource.asObservable();\n  columnsSource$: Observable<ColumnConfig[]> = this.columnsSource.asObservable();\n  // The idea under the viewRelatedDataSource is to be triggered each time when the table view related data has changed\n  viewRelatedDataSource$: Observable<void> = this.viewRelatedDataSource.asObservable();\n\n  onSort(sortMeta: SortMeta | SortMeta[]): void {\n    this.sortSource.next(sortMeta);\n    this.onViewRelatedDataChange();\n  }\n\n  onSelectionChange(selection: RowDataItem | RowDataItem[]): void {\n    this.selectionSource.next(selection);\n  }\n\n  onValueChange(value: RowData[]): void {\n    this.valueSource.next(value);\n    this.onViewRelatedDataChange();\n  }\n\n  onTotalRecordsChange(value: number): void {\n    this.totalRecordsSource.next(value);\n  }\n\n  onColumnsChange(columns: ColumnConfig[]): void {\n    this.columnsSource.next(columns);\n    this.onViewRelatedDataChange();\n  }\n\n  onViewRelatedDataChange(): void {\n    this.viewRelatedDataSource.next();\n  }\n}\n"]}