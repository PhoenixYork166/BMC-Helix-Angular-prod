import { animate, style, transition, trigger } from '@angular/animations';
import { Directionality } from '@angular/cdk/bidi';
import { moveItemInArray } from '@angular/cdk/drag-drop';
import { DOWN_ARROW, ENTER, ESCAPE, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW } from '@angular/cdk/keycodes';
import { ComponentPortal } from '@angular/cdk/portal';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, Injector, Input, NgZone, Output, QueryList, Renderer2, TemplateRef, ViewChild, ViewChildren, ViewContainerRef, ViewEncapsulation } from '@angular/core';
import { AdaptDeviceDetectionService, adaptError, AdaptOverlayService, AdaptTooltipComponent, AdaptTranslateService, ANIMATION_DURATION, ANIMATION_TIMING_FUNCTION, getOverlayConnectedPositions, getValueOrFunc, hasKeyboardKeyCode, isDefined, SafeCdr, trueOrNull } from '@bmc-ux/adapt-angular';
import { debounce, flatten, isFunction, isNil, isNull, isNumber, merge } from 'lodash-es';
import { FilterService } from 'primeng/api';
import { fromEvent, Observable, ReplaySubject } from 'rxjs';
import { debounceTime, take, takeUntil } from 'rxjs/operators';
import { AdaptTableClasses, AdaptTableEventSource, AdaptTableHeaderSelectionMode, CheckboxState, FilterMatchMode, RenderingColumnType, SortMode, SortOrder, } from './adapt-table.models';
import { Table } from './primeng-lib/table/table';
import { TableService } from './primeng-lib/table/table.service';
import { AdaptDataDirective } from './shared/adapt-data-directive';
import { AdaptTableDeprecationMiddleware } from './shared/deprecation-middleware.service';
import { hasRowGroupedData } from './table-utils';
import { HtmlUtils, ObjectUtils } from './utils';
import * as i0 from "@angular/core";
import * as i1 from "./primeng-lib/table/table.service";
import * as i2 from "primeng/api";
import * as i3 from "@angular/cdk/bidi";
import * as i4 from "@bmc-ux/adapt-angular";
import * as i5 from "./shared/deprecation-middleware.service";
const _c0 = ["emptyStateTdEl"];
const _c1 = ["toolbarComponent"];
const _c2 = ["tooltipContainerEl"];
const _c3 = ["infiniteScrollingLoaderContainerEl"];
const _c4 = ["tableContainer"];
const _c5 = ["tableInnerContainer"];
const _c6 = ["tableHeader"];
const _c7 = ["table"];
const _c8 = ["tableBodyTemplateRef"];
const _c9 = ["tableHeaderTemplateRef"];
const _c10 = ["tableColgroupTemplateRef"];
const _c11 = ["tableEmptyMessageTemplateRef"];
const _c12 = ["rowExpansionTemplate"];
const _c13 = ["dataRow"];
const _c14 = ["dataCell"];
const _c15 = ["dataHeaderCell"];
const _c16 = ["actionColElement"];
function AdaptTableComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 32);
} }
function AdaptTableComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 33);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelement(2, "i");
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵclassMap("ui-table-loading-icon pi-spin " + ctx_r2.loadingIcon);
} }
function AdaptTableComponent_adapt_table_toolbar_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-table-toolbar", 34, 35);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("config", ctx_r3.toolbarConfig)("texts", ctx_r3.texts);
} }
function AdaptTableComponent_div_19_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function AdaptTableComponent_div_19_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function AdaptTableComponent_div_19_tfoot_15_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c17 = function (a0) { return { $implicit: a0 }; };
function AdaptTableComponent_div_19_tfoot_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tfoot", 44);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵtemplate(2, AdaptTableComponent_div_19_tfoot_15_ng_container_2_Template, 1, 0, "ng-container", 39);
    i0.ɵɵtext(3, "\n              ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r43 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r43.footerTemplate)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c17, ctx_r43.columns));
} }
function AdaptTableComponent_div_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 36);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementStart(2, "table", 37, 38);
    i0.ɵɵtext(4, "\n              ");
    i0.ɵɵtemplate(5, AdaptTableComponent_div_19_ng_container_5_Template, 1, 0, "ng-container", 39);
    i0.ɵɵtext(6, "\n              ");
    i0.ɵɵelementStart(7, "thead", 40, 41);
    i0.ɵɵtext(9, "\n              ");
    i0.ɵɵtemplate(10, AdaptTableComponent_div_19_ng_container_10_Template, 1, 0, "ng-container", 39);
    i0.ɵɵtext(11, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n              ");
    i0.ɵɵelement(13, "tbody", 42);
    i0.ɵɵtext(14, "\n              ");
    i0.ɵɵtemplate(15, AdaptTableComponent_div_19_tfoot_15_Template, 4, 4, "tfoot", 43);
    i0.ɵɵtext(16, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(17, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", ctx_r6.tableStyleClass)("ngStyle", ctx_r6.tableStyle);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r6.colGroupTemplate)("ngTemplateOutletContext", i0.ɵɵpureFunction1(9, _c17, ctx_r6.columns));
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r6.headerTemplate)("ngTemplateOutletContext", i0.ɵɵpureFunction1(11, _c17, ctx_r6.columns));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("pTableBody", ctx_r6.columns)("pTableBodyTemplate", ctx_r6.bodyTemplate);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r6.footerTemplate);
} }
const _c18 = function (a0) { return { width: a0 }; };
function AdaptTableComponent_div_21_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 48);
} if (rf & 2) {
    const ctx_r45 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("pScrollableView", ctx_r45.frozenColumns)("frozen", true)("ngStyle", i0.ɵɵpureFunction1(4, _c18, ctx_r45.frozenWidth))("scrollHeight", ctx_r45.scrollHeight);
} }
const _c19 = function (a0, a1) { return { left: a0, width: a1 }; };
function AdaptTableComponent_div_21_Template(rf, ctx) { if (rf & 1) {
    const _r47 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 45);
    i0.ɵɵlistener("elementResize", function AdaptTableComponent_div_21_Template_div_elementResize_0_listener() { i0.ɵɵrestoreView(_r47); const ctx_r46 = i0.ɵɵnextContext(); return ctx_r46.handleScrollableWrapperResizing(); });
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵtemplate(2, AdaptTableComponent_div_21_div_2_Template, 1, 6, "div", 46);
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵelement(4, "div", 47);
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r7.frozenColumns || ctx_r7.frozenBodyTemplate);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("pScrollableView", ctx_r7.columns)("frozen", false)("scrollHeight", ctx_r7.scrollHeight)("ngStyle", i0.ɵɵpureFunction2(5, _c19, ctx_r7.frozenWidth, "calc(100% - " + ctx_r7.frozenWidth + ")"));
} }
const _c20 = function (a0) { return { height: a0 }; };
function AdaptTableComponent_div_23_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 49);
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(2, _c20, ctx_r8.tableBodyHeight))("@dataRefreshAnimation", undefined);
} }
function AdaptTableComponent_adapt_paginator_27_Template(rf, ctx) { if (rf & 1) {
    const _r49 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-paginator", 50);
    i0.ɵɵlistener("onPageChange", function AdaptTableComponent_adapt_paginator_27_Template_adapt_paginator_onPageChange_0_listener($event) { i0.ɵɵrestoreView(_r49); const ctx_r48 = i0.ɵɵnextContext(); return ctx_r48.onPageChange($event); });
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext();
    i0.ɵɵproperty("rows", ctx_r9.rows)("first", ctx_r9.first)("totalRecords", ctx_r9.totalRecords)("pageLinkSize", ctx_r9.pageLinks)("alwaysShow", ctx_r9.alwaysShowPaginator)("rowsPerPageOptions", ctx_r9.rowsPerPageOptions)("dropdownAppendTo", ctx_r9.paginatorDropdownAppendTo)("currentPageReportTemplate", ctx_r9.currentPageReportTemplate)("showCurrentPageReport", ctx_r9.showCurrentPageReport)("texts", ctx_r9.texts)("paginatorAlign", ctx_r9.paginatorAlign)("ngClass", ctx_r9.paginatorClass);
} }
function AdaptTableComponent_div_29_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 51, 52);
} }
function AdaptTableComponent_span_31_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 53, 54);
} }
function AdaptTableComponent_span_33_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 55, 56);
} }
function AdaptTableComponent_div_36_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 57);
} if (rf & 2) {
    const ctx_r13 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngBusy", ctx_r13.busyConfig)("adaptRadarDisableEventSending", true);
} }
function AdaptTableComponent_ng_template_45_col_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "col", 64);
} }
function AdaptTableComponent_ng_template_45_col_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "col", 65);
} }
function AdaptTableComponent_ng_template_45_col_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "col", 66);
} }
function AdaptTableComponent_ng_template_45_col_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "col", 67);
} }
function AdaptTableComponent_ng_template_45_ng_template_11_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n          ");
} }
function AdaptTableComponent_ng_template_45_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n          ");
    i0.ɵɵtemplate(1, AdaptTableComponent_ng_template_45_ng_template_11_ng_template_1_Template, 1, 0, "ng-template", 68);
    i0.ɵɵtext(2, "\n        ");
} if (rf & 2) {
    const columns_r53 = i0.ɵɵnextContext().$implicit;
    const ctx_r58 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r58.dataColumnsColsTemplate)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c17, columns_r53));
} }
function AdaptTableComponent_ng_template_45_ng_template_13_ng_container_1_col_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "col", 72, 73);
} if (rf & 2) {
    const _r67 = i0.ɵɵreference(1);
    const renderingColumn_r64 = i0.ɵɵnextContext().$implicit;
    const ctx_r65 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("ngStyle", ctx_r65.getColumnStyles(renderingColumn_r64.columnsConfigs[0], _r67));
} }
function AdaptTableComponent_ng_template_45_ng_template_13_ng_container_1_col_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "col", 74, 75);
} if (rf & 2) {
    const renderingColumn_r64 = i0.ɵɵnextContext().$implicit;
    const ctx_r66 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("ngStyle", ctx_r66.getColumnStyles(renderingColumn_r64.columnsConfigs[0]));
} }
function AdaptTableComponent_ng_template_45_ng_template_13_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵtemplate(2, AdaptTableComponent_ng_template_45_ng_template_13_ng_container_1_col_2_Template, 2, 1, "col", 70);
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵtemplate(4, AdaptTableComponent_ng_template_45_ng_template_13_ng_container_1_col_4_Template, 2, 1, "col", 71);
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const renderingColumn_r64 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !renderingColumn_r64.columnsConfigs[0].actionsConfig);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !!renderingColumn_r64.columnsConfigs[0].actionsConfig);
} }
function AdaptTableComponent_ng_template_45_ng_template_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n          ");
    i0.ɵɵtemplate(1, AdaptTableComponent_ng_template_45_ng_template_13_ng_container_1_Template, 6, 2, "ng-container", 69);
    i0.ɵɵtext(2, "\n        ");
} if (rf & 2) {
    const columns_r53 = i0.ɵɵnextContext().$implicit;
    const ctx_r60 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r60.getColumnsForRendering(columns_r53))("ngForTrackBy", ctx_r60.trackByForRenderingColumns);
} }
function AdaptTableComponent_ng_template_45_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵelementStart(1, "colgroup");
    i0.ɵɵtext(2, "\n        ");
    i0.ɵɵtemplate(3, AdaptTableComponent_ng_template_45_col_3_Template, 1, 0, "col", 58);
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵtemplate(5, AdaptTableComponent_ng_template_45_col_5_Template, 1, 0, "col", 59);
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵtemplate(7, AdaptTableComponent_ng_template_45_col_7_Template, 1, 0, "col", 60);
    i0.ɵɵtext(8, "\n        ");
    i0.ɵɵtemplate(9, AdaptTableComponent_ng_template_45_col_9_Template, 1, 0, "col", 61);
    i0.ɵɵtext(10, "\n\n        ");
    i0.ɵɵtemplate(11, AdaptTableComponent_ng_template_45_ng_template_11_Template, 3, 4, "ng-template", 62);
    i0.ɵɵtext(12, "\n\n        ");
    i0.ɵɵtemplate(13, AdaptTableComponent_ng_template_45_ng_template_13_Template, 3, 2, "ng-template", null, 63, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(15, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(16, "\n    ");
} if (rf & 2) {
    const _r59 = i0.ɵɵreference(14);
    const ctx_r17 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r17.enableReorderableRows);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r17.isSingleSelectionMode());
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r17.hasExpandingBtn);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r17.isMultipleSelectionMode());
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r17.dataColumnsColsTemplate)("ngIfElse", _r59);
} }
function AdaptTableComponent_ng_template_49_ng_template_1_ng_template_3_Template(rf, ctx) { }
function AdaptTableComponent_ng_template_49_ng_template_1_ng_template_5_Template(rf, ctx) { }
function AdaptTableComponent_ng_template_49_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n        ");
    i0.ɵɵelementStart(1, "tr", 77);
    i0.ɵɵtext(2, "\n          ");
    i0.ɵɵtemplate(3, AdaptTableComponent_ng_template_49_ng_template_1_ng_template_3_Template, 0, 0, "ng-template", 79);
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵtemplate(5, AdaptTableComponent_ng_template_49_ng_template_1_ng_template_5_Template, 0, 0, "ng-template", 68);
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n      ");
} if (rf & 2) {
    const columns_r72 = i0.ɵɵnextContext().$implicit;
    const ctx_r73 = i0.ɵɵnextContext();
    const _r22 = i0.ɵɵreference(56);
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("at-header-row_bordered", ctx_r73.bordered);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", _r22);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r73.headerGroupsTemplate)("ngTemplateOutletContext", i0.ɵɵpureFunction1(5, _c17, ctx_r73.getColumnsForRendering(columns_r72)));
} }
function AdaptTableComponent_ng_template_49_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n        ");
} }
function AdaptTableComponent_ng_template_49_ng_template_7_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n          ");
} }
function AdaptTableComponent_ng_template_49_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n          ");
    i0.ɵɵtemplate(1, AdaptTableComponent_ng_template_49_ng_template_7_ng_template_1_Template, 1, 0, "ng-template", 68);
    i0.ɵɵtext(2, "\n        ");
} if (rf & 2) {
    const columns_r72 = i0.ɵɵnextContext().$implicit;
    const ctx_r75 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r75.dataColumnsHeaderTemplate)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c17, columns_r72));
} }
function AdaptTableComponent_ng_template_49_ng_template_9_ng_container_1_th_2_Template(rf, ctx) { if (rf & 1) {
    const _r90 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "th", 82, 83);
    i0.ɵɵlistener("columnResized", function AdaptTableComponent_ng_template_49_ng_template_9_ng_container_1_th_2_Template_th_columnResized_0_listener($event) { i0.ɵɵrestoreView(_r90); const ctx_r89 = i0.ɵɵnextContext(4); return ctx_r89.handleColumnResized($event); });
    i0.ɵɵtext(2, "\n              ");
    i0.ɵɵelement(3, "adapt-table-header-cell", 84);
    i0.ɵɵtext(4, "\n            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r91 = i0.ɵɵnextContext();
    const renderingColumn_r84 = ctx_r91.$implicit;
    const index_r85 = ctx_r91.index;
    const ctx_r86 = i0.ɵɵnextContext(3);
    i0.ɵɵclassMapInterpolate1("at-header-cell ", ctx_r86.tableClasses.HeaderDataCell, "");
    i0.ɵɵproperty("pResizableColumnDisabled", !ctx_r86.resizableColumns || ctx_r86.isColumnFrozen(renderingColumn_r84.columnsConfigs[0]))("pReorderableColumnDisabled", !ctx_r86.reorderableColumns || ctx_r86.isColumnFrozen(renderingColumn_r84.columnsConfigs[0]))("adaptFrozen", ctx_r86.isColumnFrozen(renderingColumn_r84.columnsConfigs[0]))("adaptData", ctx_r86.getHeaderDataCellDirectiveParams(renderingColumn_r84, index_r85))("ngClass", ctx_r86.getHeaderClass(renderingColumn_r84.columnsConfigs[0]));
    i0.ɵɵattribute("data-testid", renderingColumn_r84.columnsConfigs[0].testId || renderingColumn_r84.columnsConfigs[0].columnAdaptID);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("renderingColumn", renderingColumn_r84)("index", index_r85)("texts", ctx_r86.texts);
} }
function AdaptTableComponent_ng_template_49_ng_template_9_ng_container_1_th_4_Template(rf, ctx) { if (rf & 1) {
    const _r94 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "th", 85, 83);
    i0.ɵɵlistener("columnResized", function AdaptTableComponent_ng_template_49_ng_template_9_ng_container_1_th_4_Template_th_columnResized_0_listener($event) { i0.ɵɵrestoreView(_r94); const ctx_r93 = i0.ɵɵnextContext(4); return ctx_r93.handleColumnResized($event); });
    i0.ɵɵtext(2, "\n              ");
    i0.ɵɵelement(3, "adapt-table-header-cell", 84);
    i0.ɵɵtext(4, "\n            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r95 = i0.ɵɵnextContext();
    const renderingColumn_r84 = ctx_r95.$implicit;
    const index_r85 = ctx_r95.index;
    const ctx_r87 = i0.ɵɵnextContext(3);
    i0.ɵɵclassMapInterpolate1("at-header-cell ", ctx_r87.tableClasses.HeaderDataCell, "");
    i0.ɵɵproperty("pResizableColumnDisabled", !ctx_r87.resizableColumns)("pReorderableColumnDisabled", !ctx_r87.reorderableColumns)("adaptData", ctx_r87.getHeaderDataCellDirectiveParams(renderingColumn_r84, index_r85))("ngClass", ctx_r87.getMergedHeaderClass(renderingColumn_r84.columnsConfigs));
    i0.ɵɵattribute("data-testid", renderingColumn_r84.columnsConfigs[0].testId || renderingColumn_r84.columnsConfigs[0].columnAdaptID);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("renderingColumn", renderingColumn_r84)("index", index_r85)("texts", ctx_r87.texts);
} }
function AdaptTableComponent_ng_template_49_ng_template_9_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵtemplate(2, AdaptTableComponent_ng_template_49_ng_template_9_ng_container_1_th_2_Template, 5, 12, "th", 80);
    i0.ɵɵtext(3, "\n\n\n            ");
    i0.ɵɵtemplate(4, AdaptTableComponent_ng_template_49_ng_template_9_ng_container_1_th_4_Template, 5, 11, "th", 81);
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const renderingColumn_r84 = ctx.$implicit;
    const ctx_r83 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", renderingColumn_r84.type === ctx_r83.RenderingColumnType.Simple);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", renderingColumn_r84.type === ctx_r83.RenderingColumnType.Merged);
} }
function AdaptTableComponent_ng_template_49_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n          ");
    i0.ɵɵtemplate(1, AdaptTableComponent_ng_template_49_ng_template_9_ng_container_1_Template, 6, 2, "ng-container", 69);
    i0.ɵɵtext(2, "\n        ");
} if (rf & 2) {
    const columns_r72 = i0.ɵɵnextContext().$implicit;
    const ctx_r77 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r77.getColumnsForRendering(columns_r72))("ngForTrackBy", ctx_r77.trackByForRenderingColumns);
} }
function AdaptTableComponent_ng_template_49_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵtemplate(1, AdaptTableComponent_ng_template_49_ng_template_1_Template, 8, 7, "ng-template", 76);
    i0.ɵɵtext(2, "\n\n\n      ");
    i0.ɵɵelementStart(3, "tr", 77);
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵtemplate(5, AdaptTableComponent_ng_template_49_ng_template_5_Template, 1, 0, "ng-template", 68);
    i0.ɵɵtext(6, "\n\n        ");
    i0.ɵɵtemplate(7, AdaptTableComponent_ng_template_49_ng_template_7_Template, 3, 4, "ng-template", 62);
    i0.ɵɵtext(8, "\n\n        ");
    i0.ɵɵtemplate(9, AdaptTableComponent_ng_template_49_ng_template_9_Template, 3, 2, "ng-template", null, 78, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(11, "\n\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n\n    ");
} if (rf & 2) {
    const _r76 = i0.ɵɵreference(10);
    const ctx_r19 = i0.ɵɵnextContext();
    const _r22 = i0.ɵɵreference(56);
    const _r20 = i0.ɵɵreference(53);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r19.headerGroupsTemplate);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("at-header-row_bordered", ctx_r19.bordered);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", _r22)("ngTemplateOutletContext", i0.ɵɵpureFunction1(7, _c17, _r20));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r19.dataColumnsHeaderTemplate)("ngIfElse", _r76);
} }
function AdaptTableComponent_ng_template_52_adapt_header_selection_checkbox_2_Template(rf, ctx) { if (rf & 1) {
    const _r100 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-header-selection-checkbox", 88);
    i0.ɵɵlistener("headerCheckboxToggle", function AdaptTableComponent_ng_template_52_adapt_header_selection_checkbox_2_Template_adapt_header_selection_checkbox_headerCheckboxToggle_0_listener($event) { i0.ɵɵrestoreView(_r100); const ctx_r99 = i0.ɵɵnextContext(2); return ctx_r99.handleHeaderCheckboxToggle($event); });
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r97 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("texts", ctx_r97.texts);
} }
function AdaptTableComponent_ng_template_52_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r102 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 89);
    i0.ɵɵlistener("click", function AdaptTableComponent_ng_template_52_button_4_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r102); const ctx_r101 = i0.ɵɵnextContext(2); return ctx_r101.unselectAllSelected(); });
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r98 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("placement", "top")("adaptRadarDisableEventSending", true)("adaptTooltip", ctx_r98.texts.unselectAllSelectedTitle);
    i0.ɵɵattribute("aria-label", ctx_r98.texts.unselectAllSelectedTitle);
} }
function AdaptTableComponent_ng_template_52_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptTableComponent_ng_template_52_adapt_header_selection_checkbox_2_Template, 2, 1, "adapt-header-selection-checkbox", 86);
    i0.ɵɵtext(3, "\n\n      ");
    i0.ɵɵtemplate(4, AdaptTableComponent_ng_template_52_button_4_Template, 2, 4, "button", 87);
    i0.ɵɵtext(5, "\n    ");
} if (rf & 2) {
    const ctx_r21 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r21.hasSelectionLimit);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r21.hasSelectionLimit && ctx_r21.getRowSelectionArray().length);
} }
function AdaptTableComponent_ng_template_55_th_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "th", 94);
} if (rf & 2) {
    const ctx_r104 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("adaptFrozen", ctx_r104.hasAtLeastOneFrozenColumn());
} }
function AdaptTableComponent_ng_template_55_th_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "th", 95);
} if (rf & 2) {
    const ctx_r105 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("adaptFrozen", ctx_r105.hasAtLeastOneFrozenColumn());
} }
function AdaptTableComponent_ng_template_55_th_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "th", 96);
} if (rf & 2) {
    const ctx_r106 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("adaptFrozen", ctx_r106.hasAtLeastOneFrozenColumn());
} }
function AdaptTableComponent_ng_template_55_th_7_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c21 = function (a0) { return { "at-selection-cell--limited": a0 }; };
function AdaptTableComponent_ng_template_55_th_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "th", 97);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptTableComponent_ng_template_55_th_7_ng_container_2_Template, 1, 0, "ng-container", 98);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const multipleSelectionTemplate_r103 = i0.ɵɵnextContext().$implicit;
    const ctx_r107 = i0.ɵɵnextContext();
    i0.ɵɵproperty("adaptFrozen", ctx_r107.hasAtLeastOneFrozenColumn())("ngClass", i0.ɵɵpureFunction1(3, _c21, ctx_r107.hasSelectionLimit));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", multipleSelectionTemplate_r103);
} }
function AdaptTableComponent_ng_template_55_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵtemplate(1, AdaptTableComponent_ng_template_55_th_1_Template, 1, 1, "th", 90);
    i0.ɵɵtext(2, "\n      ");
    i0.ɵɵtemplate(3, AdaptTableComponent_ng_template_55_th_3_Template, 1, 1, "th", 91);
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵtemplate(5, AdaptTableComponent_ng_template_55_th_5_Template, 1, 1, "th", 92);
    i0.ɵɵtext(6, "\n      ");
    i0.ɵɵtemplate(7, AdaptTableComponent_ng_template_55_th_7_Template, 4, 5, "th", 93);
    i0.ɵɵtext(8, "\n    ");
} if (rf & 2) {
    const ctx_r23 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r23.enableReorderableRows);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r23.isSingleSelectionMode());
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r23.hasExpandingBtn);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r23.isMultipleSelectionMode());
} }
function AdaptTableComponent_ng_template_59_tr_2_td_3_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 115);
} }
function AdaptTableComponent_ng_template_59_tr_2_td_3_Template(rf, ctx) { if (rf & 1) {
    const _r125 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 113);
    i0.ɵɵlistener("mousedown", function AdaptTableComponent_ng_template_59_tr_2_td_3_Template_td_mousedown_0_listener() { i0.ɵɵrestoreView(_r125); i0.ɵɵnextContext(); const _r117 = i0.ɵɵreference(1); const renderRowData_r110 = i0.ɵɵnextContext().$implicit; const ctx_r124 = i0.ɵɵnextContext(); return ctx_r124.onReordarableRowMouseDown(_r117, renderRowData_r110.isGroup); });
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵtemplate(2, AdaptTableComponent_ng_template_59_tr_2_td_3_span_2_Template, 1, 0, "span", 114);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const renderRowData_r110 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r118 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r118.hasNotRowNestingLevel(renderRowData_r110));
} }
function AdaptTableComponent_ng_template_59_tr_2_td_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 116);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementEnd();
} }
function AdaptTableComponent_ng_template_59_tr_2_td_22_Template(rf, ctx) { if (rf & 1) {
    const _r130 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 117);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementStart(2, "adapt-rx-checkbox", 118);
    i0.ɵɵlistener("ngModelChange", function AdaptTableComponent_ng_template_59_tr_2_td_22_Template_adapt_rx_checkbox_ngModelChange_2_listener($event) { i0.ɵɵrestoreView(_r130); const renderRowData_r110 = i0.ɵɵnextContext(2).$implicit; const ctx_r128 = i0.ɵɵnextContext(); return ctx_r128.onGroupSelectionChanged($event, renderRowData_r110.rowData); });
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const renderRowData_r110 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r121 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngStyle", ctx_r121.getCellStyle(renderRowData_r110));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngModel", ctx_r121.isSelectedGroupCheckbox(renderRowData_r110.rowData))("adaptRadarDisableEventSending", true)("indeterminate", ctx_r121.isGroupSelectionIndeterminate(renderRowData_r110.rowData))("disabled", ctx_r121.isGroupCheckboxDisabled(renderRowData_r110.rowData))("ariaLabel", ctx_r121.rowAriaDataResolver ? ctx_r121.rowAriaDataResolver(renderRowData_r110.rowData).rowSelectionAriaLabel || ctx_r121.getRowGroupTitle(renderRowData_r110.rowData) : ctx_r121.getRowGroupTitle(renderRowData_r110.rowData));
} }
function AdaptTableComponent_ng_template_59_tr_2_ng_template_27_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n            ");
} }
const _c22 = function (a0) { return { "at-expansion-icon--expanded": a0 }; };
function AdaptTableComponent_ng_template_59_tr_2_Template(rf, ctx) { if (rf & 1) {
    const _r133 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tr", 101, 102);
    i0.ɵɵlistener("cdkDragStarted", function AdaptTableComponent_ng_template_59_tr_2_Template_tr_cdkDragStarted_0_listener($event) { i0.ɵɵrestoreView(_r133); const ctx_r132 = i0.ɵɵnextContext(2); return ctx_r132.onRowDragStarted($event); })("cdkDragDropped", function AdaptTableComponent_ng_template_59_tr_2_Template_tr_cdkDragDropped_0_listener($event) { i0.ɵɵrestoreView(_r133); const _r117 = i0.ɵɵreference(1); const ctx_r134 = i0.ɵɵnextContext(2); return ctx_r134.onRowDragDropped($event, _r117); })("cdkDragEnded", function AdaptTableComponent_ng_template_59_tr_2_Template_tr_cdkDragEnded_0_listener($event) { i0.ɵɵrestoreView(_r133); const ctx_r135 = i0.ɵɵnextContext(2); return ctx_r135.onRowDragEnded($event); })("cdkDragReleased", function AdaptTableComponent_ng_template_59_tr_2_Template_tr_cdkDragReleased_0_listener($event) { i0.ɵɵrestoreView(_r133); const ctx_r136 = i0.ɵɵnextContext(2); return ctx_r136.onRowDragReleased($event); });
    i0.ɵɵtext(2, "\n          ");
    i0.ɵɵtemplate(3, AdaptTableComponent_ng_template_59_tr_2_td_3_Template, 4, 1, "td", 103);
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵtemplate(5, AdaptTableComponent_ng_template_59_tr_2_td_5_Template, 2, 0, "td", 104);
    i0.ɵɵtext(6, "\n          ");
    i0.ɵɵelementStart(7, "td", 105, 106);
    i0.ɵɵtext(9, "\n            ");
    i0.ɵɵelementStart(10, "button", 107);
    i0.ɵɵlistener("click", function AdaptTableComponent_ng_template_59_tr_2_Template_button_click_10_listener() { i0.ɵɵrestoreView(_r133); const renderRowData_r110 = i0.ɵɵnextContext().$implicit; const ctx_r137 = i0.ɵɵnextContext(); return ctx_r137.onGroupToggleClick(renderRowData_r110.rowData); });
    i0.ɵɵtext(11, "\n              ");
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(12, "svg", 108);
    i0.ɵɵtext(13, "\n                ");
    i0.ɵɵelement(14, "path", 109);
    i0.ɵɵtext(15, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(16, "\n              ");
    i0.ɵɵnamespaceHTML();
    i0.ɵɵelementStart(17, "span", 110);
    i0.ɵɵtext(18);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(19, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(20, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(21, "\n\n          ");
    i0.ɵɵtemplate(22, AdaptTableComponent_ng_template_59_tr_2_td_22_Template, 5, 6, "td", 111);
    i0.ɵɵtext(23, "\n\n          ");
    i0.ɵɵtext(24, "\n          ");
    i0.ɵɵelementStart(25, "td", 112);
    i0.ɵɵtext(26, "\n            ");
    i0.ɵɵtemplate(27, AdaptTableComponent_ng_template_59_tr_2_ng_template_27_Template, 1, 0, "ng-template", 68);
    i0.ɵɵtext(28, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(29, "\n\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r139 = i0.ɵɵnextContext();
    const renderRowData_r110 = ctx_r139.$implicit;
    const columns_r111 = ctx_r139.columns;
    const ctx_r114 = i0.ɵɵnextContext();
    const _r30 = i0.ɵɵreference(72);
    i0.ɵɵproperty("cdkDragData", renderRowData_r110)("ngClass", ctx_r114.getGroupRowClass(renderRowData_r110));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r114.enableReorderableRows);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r114.isSingleSelectionMode());
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngStyle", ctx_r114.getCellStyle(renderRowData_r110));
    i0.ɵɵadvance(3);
    i0.ɵɵattribute("aria-expanded", ctx_r114.isExpandedGroup(renderRowData_r110.rowData));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(13, _c22, ctx_r114.isExpandedGroup(renderRowData_r110.rowData)));
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate1("\n                ", ctx_r114.isExpandedGroup(renderRowData_r110.rowData) ? ctx_r114.rowAriaDataResolver && ctx_r114.rowAriaDataResolver(renderRowData_r110.rowData).rowCollapseAriaLabel || ctx_r114.texts.collapseRowText : ctx_r114.rowAriaDataResolver && ctx_r114.rowAriaDataResolver(renderRowData_r110.rowData).rowExpandAriaLabel || ctx_r114.texts.expandRowText, "\n              ");
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r114.isMultipleSelectionMode() && !ctx_r114.hasSelectionLimit);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngStyle", ctx_r114.getCellStyle(renderRowData_r110));
    i0.ɵɵattribute("colspan", ctx_r114.getColumnsForRendering(columns_r111).length + (ctx_r114.hasSelectionLimit ? 1 : 0));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r114.groupValueDataCellTemplate || _r30)("ngTemplateOutletContext", ctx_r114.getGroupValueDataCellTemplateParams(renderRowData_r110));
} }
function AdaptTableComponent_ng_template_59_ng_template_5_td_4_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 115);
} }
function AdaptTableComponent_ng_template_59_ng_template_5_td_4_Template(rf, ctx) { if (rf & 1) {
    const _r151 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 127);
    i0.ɵɵlistener("mousedown", function AdaptTableComponent_ng_template_59_ng_template_5_td_4_Template_td_mousedown_0_listener() { i0.ɵɵrestoreView(_r151); i0.ɵɵnextContext(); const _r140 = i0.ɵɵreference(2); const ctx_r150 = i0.ɵɵnextContext(2); return ctx_r150.onReordarableRowMouseDown(_r140, null); });
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵtemplate(2, AdaptTableComponent_ng_template_59_ng_template_5_td_4_span_2_Template, 1, 0, "span", 114);
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const renderRowData_r110 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r141 = i0.ɵɵnextContext();
    i0.ɵɵproperty("adaptFrozen", ctx_r141.hasAtLeastOneFrozenColumn());
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r141.hasNotRowNestingLevel(renderRowData_r110));
} }
function AdaptTableComponent_ng_template_59_ng_template_5_td_6_Template(rf, ctx) { if (rf & 1) {
    const _r155 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 128);
    i0.ɵɵtext(1, "\n\n              ");
    i0.ɵɵtext(2, "\n              ");
    i0.ɵɵelementStart(3, "adapt-rx-radiobutton", 129);
    i0.ɵɵlistener("click", function AdaptTableComponent_ng_template_59_ng_template_5_td_6_Template_adapt_rx_radiobutton_click_3_listener() { i0.ɵɵrestoreView(_r155); const renderRowData_r110 = i0.ɵɵnextContext(2).$implicit; const ctx_r153 = i0.ɵɵnextContext(); return ctx_r153.onRadiobuttonModelChange(renderRowData_r110.rowData); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const renderRowData_r110 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r142 = i0.ɵɵnextContext();
    i0.ɵɵproperty("adaptFrozen", ctx_r142.hasAtLeastOneFrozenColumn());
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("name", ctx_r142.rowSelectionRadiobuttonName)("adaptRadarDisableEventSending", true)("value", ctx_r142.getPrimaryKey(renderRowData_r110.rowData))("checked", ctx_r142.isSingleSelectionRowSelected(renderRowData_r110.rowData))("label", ctx_r142.rowAriaDataResolver && ctx_r142.rowAriaDataResolver(renderRowData_r110.rowData).rowSelectionAriaLabel)("ariaLabel", ctx_r142.rowAriaDataResolver && ctx_r142.rowAriaDataResolver(renderRowData_r110.rowData).rowSelectionAriaLabel)("disabled", ctx_r142.isRowSelectionDisabled(renderRowData_r110.rowData));
} }
function AdaptTableComponent_ng_template_59_ng_template_5_td_8_button_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "button", 132);
    i0.ɵɵtext(1, "\n                ");
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(2, "svg", 108);
    i0.ɵɵtext(3, "\n                  ");
    i0.ɵɵelement(4, "path", 133);
    i0.ɵɵtext(5, "\n                ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n                ");
    i0.ɵɵnamespaceHTML();
    i0.ɵɵelementStart(7, "span", 110);
    i0.ɵɵtext(8);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n              ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const renderRowData_r110 = i0.ɵɵnextContext(3).$implicit;
    const ctx_r158 = i0.ɵɵnextContext();
    i0.ɵɵproperty("pRowToggler", renderRowData_r110.rowData);
    i0.ɵɵattribute("aria-expanded", renderRowData_r110.rowExpanded);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(4, _c22, renderRowData_r110.rowExpanded));
    i0.ɵɵadvance(6);
    i0.ɵɵtextInterpolate(renderRowData_r110.rowExpanded ? ctx_r158.rowAriaDataResolver && ctx_r158.rowAriaDataResolver(renderRowData_r110.rowData).rowCollapseAriaLabel || ctx_r158.texts.collapseRowText : ctx_r158.rowAriaDataResolver && ctx_r158.rowAriaDataResolver(renderRowData_r110.rowData).rowExpandAriaLabel || ctx_r158.texts.expandRowText);
} }
const _c23 = function (a0) { return { "at-expansion-cell_no-children": a0 }; };
function AdaptTableComponent_ng_template_59_ng_template_5_td_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 130, 106);
    i0.ɵɵtext(2, "\n\n              ");
    i0.ɵɵtemplate(3, AdaptTableComponent_ng_template_59_ng_template_5_td_8_button_3_Template, 10, 6, "button", 131);
    i0.ɵɵtext(4, "\n            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const renderRowData_r110 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r143 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngStyle", ctx_r143.getCellStyle(renderRowData_r110))("ngClass", i0.ɵɵpureFunction1(4, _c23, ctx_r143.nestingStructureData && !ctx_r143.isChildrenExist(renderRowData_r110.rowData)))("adaptFrozen", ctx_r143.hasAtLeastOneFrozenColumn());
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r143.shouldShowExpandingButton(renderRowData_r110));
} }
function AdaptTableComponent_ng_template_59_ng_template_5_td_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "td", 134);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵelementStart(2, "adapt-row-selection-checkbox", 135);
    i0.ɵɵtext(3, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const renderRowData_r110 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r144 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngStyle", ctx_r144.getCellStyle(renderRowData_r110))("adaptFrozen", ctx_r144.hasAtLeastOneFrozenColumn());
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("renderRowData", renderRowData_r110)("value", renderRowData_r110.rowData)("rowAriaDataResolver", ctx_r144.rowAriaDataResolver)("disabled", ctx_r144.isRowSelectionCheckboxDisabled(renderRowData_r110.rowData));
} }
function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_13_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n              ");
} }
const _c24 = function (a0, a1, a2) { return { columns: a0, renderRowData: a1, rowIndex: a2 }; };
function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n              ");
    i0.ɵɵtemplate(1, AdaptTableComponent_ng_template_59_ng_template_5_ng_template_13_ng_template_1_Template, 1, 0, "ng-template", 68);
    i0.ɵɵtext(2, "\n            ");
} if (rf & 2) {
    const ctx_r163 = i0.ɵɵnextContext(2);
    const columns_r111 = ctx_r163.columns;
    const renderRowData_r110 = ctx_r163.$implicit;
    const rowIndex_r112 = ctx_r163.rowIndex;
    const ctx_r145 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r145.dataColumnsDataCellsTemplate)("ngTemplateOutletContext", i0.ɵɵpureFunction3(2, _c24, columns_r111, renderRowData_r110, rowIndex_r112));
} }
function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_3_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n                  ");
} }
function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_3_Template(rf, ctx) { if (rf & 1) {
    const _r173 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 138, 139);
    i0.ɵɵlistener("dblclick", function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_3_Template_td_dblclick_0_listener() { i0.ɵɵrestoreView(_r173); const renderRowData_r110 = i0.ɵɵnextContext(4).$implicit; const ctx_r171 = i0.ɵɵnextContext(); return ctx_r171.onTableCellDoubleClick(renderRowData_r110.rowData); });
    i0.ɵɵtext(2, "\n\n                  ");
    i0.ɵɵtemplate(3, AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_3_ng_template_3_Template, 1, 0, "ng-template", 68);
    i0.ɵɵtext(4, "\n                ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r169 = i0.ɵɵreference(1);
    const ctx_r175 = i0.ɵɵnextContext();
    const index_r166 = ctx_r175.index;
    const renderingColumn_r165 = ctx_r175.$implicit;
    const renderRowData_r110 = i0.ɵɵnextContext(3).$implicit;
    const ctx_r167 = i0.ɵɵnextContext();
    const _r36 = i0.ɵɵreference(84);
    i0.ɵɵproperty("ngStyle", ctx_r167.getCellStyle(renderRowData_r110, index_r166, renderingColumn_r165.columnsConfigs[0]))("adaptFrozen", ctx_r167.isColumnFrozen(renderingColumn_r165.columnsConfigs[0]))("adaptData", ctx_r167.getDataCellDirectiveParams(renderingColumn_r165, renderRowData_r110))("ngClass", ctx_r167.getDataCellClass(renderingColumn_r165.columnsConfigs[0], renderRowData_r110, _r169))("tabindex", ctx_r167.getDataCellTabIndex(renderingColumn_r165.columnsConfigs[0], renderRowData_r110));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", _r36)("ngTemplateOutletContext", ctx_r167.getDataCellTemplateParams(renderingColumn_r165.columnsConfigs[0], renderRowData_r110));
} }
function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_6_div_3_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n                    ");
} }
function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_6_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 142);
    i0.ɵɵtext(1, "\n\n                    ");
    i0.ɵɵtemplate(2, AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_6_div_3_ng_template_2_Template, 1, 0, "ng-template", 68);
    i0.ɵɵtext(3, "\n                  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const columnConfig_r178 = ctx.$implicit;
    const renderRowData_r110 = i0.ɵɵnextContext(5).$implicit;
    const ctx_r177 = i0.ɵɵnextContext();
    const _r36 = i0.ɵɵreference(84);
    i0.ɵɵattribute("data-merged-column-field", columnConfig_r178.field);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", _r36)("ngTemplateOutletContext", ctx_r177.getDataCellTemplateParams(columnConfig_r178, renderRowData_r110));
} }
function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_6_Template(rf, ctx) { if (rf & 1) {
    const _r183 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "td", 140, 139);
    i0.ɵɵlistener("dblclick", function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_6_Template_td_dblclick_0_listener() { i0.ɵɵrestoreView(_r183); const renderRowData_r110 = i0.ɵɵnextContext(4).$implicit; const ctx_r181 = i0.ɵɵnextContext(); return ctx_r181.onTableCellDoubleClick(renderRowData_r110.rowData); });
    i0.ɵɵtext(2, "\n                  ");
    i0.ɵɵtemplate(3, AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_6_div_3_Template, 4, 3, "div", 141);
    i0.ɵɵtext(4, "\n                ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r176 = i0.ɵɵreference(1);
    const ctx_r185 = i0.ɵɵnextContext();
    const index_r166 = ctx_r185.index;
    const renderingColumn_r165 = ctx_r185.$implicit;
    const renderRowData_r110 = i0.ɵɵnextContext(3).$implicit;
    const ctx_r168 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngStyle", ctx_r168.getMergedCellStyle(renderRowData_r110, index_r166, renderingColumn_r165.columnsConfigs))("adaptData", ctx_r168.getDataCellDirectiveParams(renderingColumn_r165, renderRowData_r110))("ngClass", ctx_r168.getMergedDataCellClass(renderingColumn_r165.columnsConfigs, renderRowData_r110, _r176))("tabindex", ctx_r168.getMergedDataCellTabIndex(renderingColumn_r165.columnsConfigs, renderRowData_r110));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngForOf", renderingColumn_r165.columnsConfigs)("ngForTrackBy", ctx_r168.trackByForColumns);
} }
function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n\n                ");
    i0.ɵɵtext(2, "\n                ");
    i0.ɵɵtemplate(3, AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_3_Template, 5, 7, "td", 136);
    i0.ɵɵtext(4, "\n\n                ");
    i0.ɵɵtext(5, "\n                ");
    i0.ɵɵtemplate(6, AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_td_6_Template, 5, 6, "td", 137);
    i0.ɵɵtext(7, "\n              ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const renderingColumn_r165 = ctx.$implicit;
    const ctx_r164 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", renderingColumn_r165.type === ctx_r164.RenderingColumnType.Simple);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", renderingColumn_r165.type === ctx_r164.RenderingColumnType.Merged);
} }
function AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n              ");
    i0.ɵɵtemplate(1, AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_ng_container_1_Template, 8, 2, "ng-container", 69);
    i0.ɵɵtext(2, "\n            ");
} if (rf & 2) {
    const columns_r111 = i0.ɵɵnextContext(2).columns;
    const ctx_r147 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", ctx_r147.getColumnsForRendering(columns_r111))("ngForTrackBy", ctx_r147.trackByForRenderingColumns);
} }
function AdaptTableComponent_ng_template_59_ng_template_5_ng_container_20_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n            ");
} }
const _c25 = function (a0, a1, a2) { return { $implicit: a0, rowIndex: a1, columns: a2 }; };
function AdaptTableComponent_ng_template_59_ng_template_5_ng_container_20_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵtemplate(2, AdaptTableComponent_ng_template_59_ng_template_5_ng_container_20_ng_template_2_Template, 1, 0, "ng-template", 68);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r188 = i0.ɵɵnextContext(2);
    const renderRowData_r110 = ctx_r188.$implicit;
    const rowIndex_r112 = ctx_r188.rowIndex;
    const columns_r111 = ctx_r188.columns;
    i0.ɵɵnextContext();
    const _r26 = i0.ɵɵreference(64);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", _r26)("ngTemplateOutletContext", i0.ɵɵpureFunction3(2, _c25, renderRowData_r110.rowData, rowIndex_r112, columns_r111));
} }
function AdaptTableComponent_ng_template_59_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    const _r190 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n          ");
    i0.ɵɵelementStart(1, "tr", 119, 120);
    i0.ɵɵlistener("cdkDragStarted", function AdaptTableComponent_ng_template_59_ng_template_5_Template_tr_cdkDragStarted_1_listener($event) { i0.ɵɵrestoreView(_r190); const ctx_r189 = i0.ɵɵnextContext(2); return ctx_r189.onRowDragStarted($event); })("cdkDragDropped", function AdaptTableComponent_ng_template_59_ng_template_5_Template_tr_cdkDragDropped_1_listener($event) { i0.ɵɵrestoreView(_r190); const _r140 = i0.ɵɵreference(2); const ctx_r191 = i0.ɵɵnextContext(2); return ctx_r191.onRowDragDropped($event, _r140); })("cdkDragEnded", function AdaptTableComponent_ng_template_59_ng_template_5_Template_tr_cdkDragEnded_1_listener($event) { i0.ɵɵrestoreView(_r190); const ctx_r192 = i0.ɵɵnextContext(2); return ctx_r192.onRowDragEnded($event); })("cdkDragReleased", function AdaptTableComponent_ng_template_59_ng_template_5_Template_tr_cdkDragReleased_1_listener($event) { i0.ɵɵrestoreView(_r190); const ctx_r193 = i0.ɵɵnextContext(2); return ctx_r193.onRowDragReleased($event); });
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵtemplate(4, AdaptTableComponent_ng_template_59_ng_template_5_td_4_Template, 4, 2, "td", 121);
    i0.ɵɵtext(5, "\n            ");
    i0.ɵɵtemplate(6, AdaptTableComponent_ng_template_59_ng_template_5_td_6_Template, 5, 8, "td", 122);
    i0.ɵɵtext(7, "\n            ");
    i0.ɵɵtemplate(8, AdaptTableComponent_ng_template_59_ng_template_5_td_8_Template, 5, 6, "td", 123);
    i0.ɵɵtext(9, "\n            ");
    i0.ɵɵtemplate(10, AdaptTableComponent_ng_template_59_ng_template_5_td_10_Template, 5, 6, "td", 124);
    i0.ɵɵtext(11, "\n\n            ");
    i0.ɵɵtext(12, "\n            ");
    i0.ɵɵtemplate(13, AdaptTableComponent_ng_template_59_ng_template_5_ng_template_13_Template, 3, 6, "ng-template", 62);
    i0.ɵɵtext(14, "\n\n            ");
    i0.ɵɵtemplate(15, AdaptTableComponent_ng_template_59_ng_template_5_ng_template_15_Template, 3, 2, "ng-template", null, 125, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(17, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, "\n\n          ");
    i0.ɵɵtext(19, "\n          ");
    i0.ɵɵtemplate(20, AdaptTableComponent_ng_template_59_ng_template_5_ng_container_20_Template, 4, 6, "ng-container", 126);
    i0.ɵɵtext(21, "\n\n        ");
} if (rf & 2) {
    const _r146 = i0.ɵɵreference(16);
    const ctx_r194 = i0.ɵɵnextContext();
    const renderRowData_r110 = ctx_r194.$implicit;
    const primengExpanded_r113 = ctx_r194.expanded;
    const ctx_r116 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("pEditableRow", renderRowData_r110.rowData)("adaptData", ctx_r116.getDataRowDirectiveParams(renderRowData_r110))("ngClass", ctx_r116.getDataRowClass(renderRowData_r110))("cdkDragData", renderRowData_r110);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r116.enableReorderableRows);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r116.isSingleSelectionMode());
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r116.hasExpandingBtn);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r116.isMultipleSelectionMode());
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r116.dataColumnsDataCellsTemplate)("ngIfElse", _r146);
    i0.ɵɵadvance(7);
    i0.ɵɵproperty("ngIf", !primengExpanded_r113 && renderRowData_r110.rowExpanded && ctx_r116.expandedRowTemplate);
} }
function AdaptTableComponent_ng_template_59_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n\n        ");
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptTableComponent_ng_template_59_tr_2_Template, 30, 15, "tr", 99);
    i0.ɵɵtext(3, "\n\n        ");
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵtemplate(5, AdaptTableComponent_ng_template_59_ng_template_5_Template, 22, 11, "ng-template", null, 100, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(7, "\n    ");
} if (rf & 2) {
    const renderRowData_r110 = ctx.$implicit;
    const _r115 = i0.ɵɵreference(6);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", renderRowData_r110.isGroup)("ngIfElse", _r115);
} }
function AdaptTableComponent_ng_template_63_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n          ");
} }
function AdaptTableComponent_ng_template_63_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵelementStart(1, "tr", 143);
    i0.ɵɵtext(2, "\n        ");
    i0.ɵɵelementStart(3, "td", 144);
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵtemplate(5, AdaptTableComponent_ng_template_63_ng_template_5_Template, 1, 0, "ng-template", 68);
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n    ");
} if (rf & 2) {
    const dataItem_r195 = ctx.$implicit;
    const columns_r196 = ctx.columns;
    const rowIndex_r197 = ctx.rowIndex;
    const ctx_r27 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngClass", ctx_r27.expandedCellClass);
    i0.ɵɵattribute("colspan", ctx_r27.getCurrentTableColumnsCount(columns_r196));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r27.expandedRowTemplate)("ngTemplateOutletContext", ctx_r27.getExpandedRowTemplateParams(dataItem_r195, columns_r196, rowIndex_r197));
} }
function AdaptTableComponent_ng_template_67_tr_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr", 146);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "td", 147, 148);
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵelement(5, "adapt-empty-state", 149);
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const columns_r199 = i0.ɵɵnextContext().$implicit;
    const ctx_r200 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵattribute("colspan", ctx_r200.getCurrentTableColumnsCount(columns_r199));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("type", "grid")("adaptRadarDisableEventSending", true)("label", ctx_r200.getEmptyStateLabelText());
} }
function AdaptTableComponent_ng_template_67_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵtemplate(1, AdaptTableComponent_ng_template_67_tr_1_Template, 8, 4, "tr", 145);
    i0.ɵɵtext(2, "\n    ");
} if (rf & 2) {
    const ctx_r29 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r29.hasEmptyState && !ctx_r29.loading);
} }
function AdaptTableComponent_ng_template_71_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0);
} if (rf & 2) {
    const renderRowData_r203 = ctx.$implicit;
    const ctx_r31 = i0.ɵɵnextContext();
    i0.ɵɵtextInterpolate1("\n      ", ctx_r31.getRowGroupTitle(renderRowData_r203.rowData), "\n    ");
} }
function AdaptTableComponent_ng_template_75_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "adapt-table-actions", 150);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r211 = i0.ɵɵnextContext();
    const column_r204 = ctx_r211.column;
    const dataItem_r205 = ctx_r211.dataItem;
    const rowIndex_r206 = ctx_r211.rowIndex;
    const expanded_r207 = ctx_r211.expanded;
    const editing_r208 = ctx_r211.editing;
    const ctx_r209 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("column", column_r204)("dataItem", dataItem_r205)("rowIndex", rowIndex_r206)("expanded", expanded_r207)("editing", editing_r208)("texts", ctx_r209.texts);
} }
function AdaptTableComponent_ng_template_75_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r212 = i0.ɵɵnextContext();
    const dataItem_r205 = ctx_r212.dataItem;
    const column_r204 = ctx_r212.column;
    const ctx_r210 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n        ", ctx_r210.getColumnData(dataItem_r205, column_r204), "\n      ");
} }
function AdaptTableComponent_ng_template_75_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵtemplate(1, AdaptTableComponent_ng_template_75_ng_container_1_Template, 5, 6, "ng-container", 126);
    i0.ɵɵtext(2, "\n\n      ");
    i0.ɵɵtemplate(3, AdaptTableComponent_ng_template_75_ng_container_3_Template, 2, 1, "ng-container", 126);
    i0.ɵɵtext(4, "\n    ");
} if (rf & 2) {
    const column_r204 = ctx.column;
    const ctx_r33 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r33.getActionConfig(column_r204));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r33.getActionConfig(column_r204));
} }
function AdaptTableComponent_ng_template_79_Template(rf, ctx) { if (rf & 1) {
    const _r219 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵelementStart(1, "adapt-rx-textfield", 151, 152);
    i0.ɵɵlistener("ngModelChange", function AdaptTableComponent_ng_template_79_Template_adapt_rx_textfield_ngModelChange_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r219); const dataItem_r214 = restoredCtx.dataItem; const column_r213 = restoredCtx.column; const ctx_r218 = i0.ɵɵnextContext(); return (ctx_r218.getEditableClonedRow(dataItem_r214)[column_r213.field] = $event); })("keydown", function AdaptTableComponent_ng_template_79_Template_adapt_rx_textfield_keydown_1_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r219); const dataItem_r214 = restoredCtx.dataItem; const ctx_r220 = i0.ɵɵnextContext(); return ctx_r220.onTextfieldKeydown(dataItem_r214, $event); });
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n    ");
} if (rf & 2) {
    const column_r213 = ctx.column;
    const dataItem_r214 = ctx.dataItem;
    const ctx_r35 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("size", "sm")("adaptRadarDisableEventSending", true)("ngModel", ctx_r35.getEditableClonedRow(dataItem_r214)[column_r213.field]);
} }
function AdaptTableComponent_ng_template_83_ng_container_1_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    const _r231 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n\n          ");
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "div", 154);
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵelementStart(4, "button", 155);
    i0.ɵɵlistener("click", function AdaptTableComponent_ng_template_83_ng_container_1_ng_template_2_Template_button_click_4_listener() { i0.ɵɵrestoreView(_r231); const renderRowData_r222 = i0.ɵɵnextContext(2).renderRowData; const ctx_r229 = i0.ɵɵnextContext(); return ctx_r229.cancelRowEditing(renderRowData_r222.rowData); });
    i0.ɵɵtext(5, "\n              ");
    i0.ɵɵelementStart(6, "span", 110);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n            ");
    i0.ɵɵelementStart(10, "button", 156);
    i0.ɵɵlistener("click", function AdaptTableComponent_ng_template_83_ng_container_1_ng_template_2_Template_button_click_10_listener() { i0.ɵɵrestoreView(_r231); const renderRowData_r222 = i0.ɵɵnextContext(2).renderRowData; const ctx_r232 = i0.ɵɵnextContext(); return ctx_r232.saveRowEditing(renderRowData_r222.rowData); });
    i0.ɵɵtext(11, "\n              ");
    i0.ɵɵelementStart(12, "span", 110);
    i0.ɵɵtext(13);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(16, "\n\n        ");
} if (rf & 2) {
    const ctx_r228 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r228.texts.cancelRowEditingButtonLabel);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r228.texts.saveRowEditingButtonLabel);
} }
function AdaptTableComponent_ng_template_83_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptTableComponent_ng_template_83_ng_container_1_ng_template_2_Template, 17, 4, "ng-template", 62);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const column_r221 = i0.ɵɵnextContext().column;
    const _r226 = i0.ɵɵreference(10);
    const ctx_r223 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r223.getActionConfig(column_r221).enableRowEditingButtons)("ngIfElse", _r226);
} }
function AdaptTableComponent_ng_template_83_ng_container_4_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n        ");
} }
function AdaptTableComponent_ng_template_83_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptTableComponent_ng_template_83_ng_container_4_ng_template_2_Template, 1, 0, "ng-template", 68);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r236 = i0.ɵɵnextContext();
    const column_r221 = ctx_r236.column;
    const renderRowData_r222 = ctx_r236.renderRowData;
    const ctx_r224 = i0.ɵɵnextContext();
    const _r34 = i0.ɵɵreference(80);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", column_r221.editTemplate || _r34)("ngTemplateOutletContext", ctx_r224.getColumnTemplateParams(column_r221, renderRowData_r222));
} }
function AdaptTableComponent_ng_template_83_ng_container_6_ng_template_2_Template(rf, ctx) { }
function AdaptTableComponent_ng_template_83_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptTableComponent_ng_template_83_ng_container_6_ng_template_2_Template, 0, 0, "ng-template", 79);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r226 = i0.ɵɵreference(10);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", _r226);
} }
function AdaptTableComponent_ng_template_83_ng_template_9_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n        ");
} }
function AdaptTableComponent_ng_template_83_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n        ");
    i0.ɵɵtemplate(1, AdaptTableComponent_ng_template_83_ng_template_9_ng_template_1_Template, 1, 0, "ng-template", 68);
    i0.ɵɵtext(2, "\n      ");
} if (rf & 2) {
    const ctx_r239 = i0.ɵɵnextContext();
    const column_r221 = ctx_r239.column;
    const renderRowData_r222 = ctx_r239.renderRowData;
    const ctx_r227 = i0.ɵɵnextContext();
    const _r32 = i0.ɵɵreference(76);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", column_r221.cellTemplate || _r32)("ngTemplateOutletContext", ctx_r227.getColumnTemplateParams(column_r221, renderRowData_r222));
} }
function AdaptTableComponent_ng_template_83_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n\n      ");
    i0.ɵɵtemplate(1, AdaptTableComponent_ng_template_83_ng_container_1_Template, 4, 2, "ng-container", 126);
    i0.ɵɵtext(2, "\n\n      ");
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵtemplate(4, AdaptTableComponent_ng_template_83_ng_container_4_Template, 4, 2, "ng-container", 126);
    i0.ɵɵtext(5, "\n\n      ");
    i0.ɵɵtemplate(6, AdaptTableComponent_ng_template_83_ng_container_6_Template, 4, 1, "ng-container", 126);
    i0.ɵɵtext(7, "\n\n      ");
    i0.ɵɵtext(8, "\n      ");
    i0.ɵɵtemplate(9, AdaptTableComponent_ng_template_83_ng_template_9_Template, 3, 2, "ng-template", null, 153, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(11, "\n    ");
} if (rf & 2) {
    const column_r221 = ctx.column;
    const renderRowData_r222 = ctx.renderRowData;
    const ctx_r37 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r37.isEditableColumn(column_r221) && renderRowData_r222.editing && ctx_r37.getActionConfig(column_r221));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r37.isEditableColumn(column_r221) && renderRowData_r222.editing && !ctx_r37.getActionConfig(column_r221));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !renderRowData_r222.editing || renderRowData_r222.editing && !ctx_r37.isEditableColumn(column_r221));
} }
const _c26 = function (a0, a1, a2, a3) { return { "ui-table-flex-scrollable": a0, "at-has-paginator": a1, "at-has-toolbar": a2, "at-columns-reorderable": a3 }; };
const _c27 = function (a0, a1) { return { "at-table-reordable": a0, "at-wrap-cell-text": a1 }; };
const _c28 = function (a1, a2, a3, a4, a5) { return { "ui-table ui-widget": true, "ui-table-responsive": a1, "ui-table-resizable": a2, "ui-table-resizable-fit": a3, "ui-table-hoverable-rows": a4, "ui-table-auto-layout": a5 }; };
const _c29 = function (a0) { return { "at-table-scroll-wrapper": a0 }; };
const _c30 = function (a0) { return { "width": a0 }; };
/** @deprecated from v8.26.1 Use AdaptTableClasses Enum instead */
export class AdaptGridClasses {
}
AdaptGridClasses.MAIN = 'adapt-grid';
AdaptGridClasses.ADAPT_TABLE = 'adapt-table';
AdaptGridClasses.BORDERED = 'adapt-grid-bordered';
AdaptGridClasses.PAGEABLE = 'adapt-table-pageable';
AdaptGridClasses.SCROLLABLE = 'adapt-table-scrollable';
AdaptGridClasses.STRIPED = 'adapt-table--striped';
AdaptGridClasses.IS_EMPTY_STATE = 'adapt-table--empty-state';
AdaptGridClasses.NOT_SCROLLABLE = 'adapt-table-not-scrollable';
AdaptGridClasses.FULL_HEIGHT_STRETCH = 'adapt-table-full-height-stretch';
AdaptGridClasses.HAS_NOT_VERTICAL_BODY_OVERFLOW = 'adapt-table--has-not-overflow';
AdaptGridClasses.LOADING_FULL_TABLE = 'adapt-grid--loading';
AdaptGridClasses.CELL = {
    ACTIONS_CELL: 'at-actions-cell',
    EDITING: 'at-cell--editing',
};
export class AdaptTableComponent extends Table {
    constructor(el, zone, tableService, cd, filterService, _dir, _renderer, _adaptDeviceDetectionService, _ts, _deprecationMiddleware, _overlayService, _injector) {
        super(el, zone, tableService, cd, filterService);
        this._dir = _dir;
        this._renderer = _renderer;
        this._adaptDeviceDetectionService = _adaptDeviceDetectionService;
        this._ts = _ts;
        this._deprecationMiddleware = _deprecationMiddleware;
        this._overlayService = _overlayService;
        this._injector = _injector;
        this.loadingToggle = new EventEmitter();
        this.currentEditingRows = {};
        this.isMobile = false;
        this.rowSelectionRadiobuttonName = null;
        this.RenderingColumnType = RenderingColumnType;
        this.tableBodyHeight = '';
        this.isRtl = false;
        /** Is used for multiple range selection with shiftKey. Is set on checkbox click and `space` click on a focused cell */
        this.lastSelectedRowId = null;
        this.columnIndex = 0;
        this.tableClasses = AdaptTableClasses;
        /**
         * Enables table sorting
         * @docs-default 'false'
         */
        this.sortable = false;
        /**
         * Enables table filtering
         * @docs-default 'false'
         */
        this.filterable = false;
        /**
         * Enables triggerable search on filters
         * @docs-default 'false'
         */
        this.triggerableFilters = false;
        /**
         * Show explicit search button
         * @docs-default 'false'
         */
        this.explicitSearchBtn = false;
        /**
         * Enables table rows reordering
         * @docs-default 'false'
         */
        this.enableReorderableRows = false;
        /**
         * Hide tooltips in the entire table
         * @docs-default 'false'
         */
        this.suppressTooltip = false;
        /**
         * The hash map that is used to control the expansion state of the groups
         * @docs-default {}
         */
        this.expandedGroupsKeys = {};
        /**
         * Padding of the nested group in pixels. Useful when you want to control padding value for a table group.
         * With a big nesting level, there is still a possibility that table data will be overlapped.
         * In such a case, you can change the control table columns width.
         * @docs-default 31
         */
        this.nestedGroupPadding = 31; // in pixels
        /**
         * Initial padding of nested group in pixels
         * @docs-default 13
         */
        this.expandindCellInitialPadding = 13; // pixels. Or get dynamically
        /**
         * The delay to showing tooltip for table header and for the table cell
         * @docs-default 900
         */
        this.tooltipInitialDelayMs = 900;
        /**
         * Used to set custom class on the AdaptTooltipComponent which is used to show tooltip
         * @docs-default ''
         */
        this.tooltipClass = '';
        /**
         * Align pagination block to the left or right.
         * @docs-default 'left'
         */
        this.paginatorAlign = 'left';
        /**
         * Used to toggle the visibility of the empty state visualization(AdaptEmptyStateComponent) for the empty
         * table(table is empty the [value] is null or have 0 length)
         * @docs-default true
         */
        this.hasEmptyState = true;
        /**
         * Used to turn on "infinite scroll" mode.In combination with [lazy]="true" allow to load the
         * data when the user scrolls to the bottom of the table. This is alternative to the per page pagination.
         * @docs-default false
         */
        this.enableInfiniteScrolling = false;
        /**
         * Config of full table loader that is used AdaptBusyDirective under the hood
         * @docs-default {busy: null, backdrop: true, sticky: true, message: '', loaderType: 'section'}
         */
        this.busyConfig = this._getBusyConfig();
        /**
         * Default 'FilterMatchMode' for all filters
         * @docs-default FilterMatchMode.contains
         */
        this.defaultFiltersMatchMode = FilterMatchMode.contains;
        /**
         * Wraps long text on a new line instead of truncating
         * @docs-default false
         */
        this.wrapCellText = false;
        /**
         * Unique attribute test-id for QA
         * @since 11.14.0
         * @docs-default 'adapt-table'
         */
        this.testID = 'adapt-table';
        /**
         * Based on chosen mode customer will see different variants of selection.<br/>There are 3 possible variants:<br /><b>Both</b> - allows to use both type of selection: "Select on page" and "Select all in table"<br /><b>Chunk</b> - allows to use only "Select on page" type<br /><b>All</b> - allows to use only "Select all in table" type
         * @since 11.10.0
         * @docs-default AdaptTableHeaderSelectionMode.Both
         */
        this.headerSelectionMode = AdaptTableHeaderSelectionMode.Both;
        /**
         * Number of disabled rows that are selected. Used to calculate header selection menu actions visibility and checkbox state in lazy mode
         * @since 11.10.0
         * @docs-default 0
         */
        this.disabledSelectedRowsCount = 0;
        /**
         * Number of disabled rows that are not selected. Used to calculate header selection menu actions visibility and checkbox state in lazy mode
         * @since 11.10.0
         * @docs-default 0
         */
        this.disabledNotSelectedRowsCount = 0;
        /**
         * Number of disabled rows that are selected in filtering mode. Used to calculate header selection menu actions visibility and checkbox state in lazy mode while filtering
         * @since 11.10.0
         * @docs-default 0
         */
        this.disabledSelectedFilteredRowsCount = 0;
        /**
         Number of disabled rows that are not selected in filtering mode. Used to calculate header selection menu actions visibility and checkbox state in lazy mode while filtering
         * @since 11.10.0
         * @docs-default 0
         */
        this.disabledNotSelectedFilteredRowsCount = 0;
        /**
         Number of selected rows in filtering mode. Used to calculate header selection menu actions visibility and checkbox state in lazy mode while filtering
         * @since 11.10.0
         * @docs-default 0
         */
        this.selectedFilteredRowsCount = 0;
        /**
         Total amount of records inside group. Used to calculate header selection menu actions visibility and checkbox state in lazy mode
         * @since 11.10.0
         * @docs-default 0
         */
        this.totalRecordsInGroup = 0;
        /**
         * Disabling possibility to select rows if set to true
         * @docs-default false
         */
        this.disableRowSelection = false;
        /**
         * Flag that should be set to true if table data has nesting structure. Used to show/hide expansion icon
         * @docs-default false
         */
        this.nestingStructureData = false;
        /**
         * In case when table should have nesting view 'nestingKey' property allow to configure name of property where children elements are located. Used to show/hide expansion icon
         * @docs-default 'children'
         */
        this.nestingKey = 'children';
        /**
         * Enables row editing on 'Enter' keydown when cell is in focus
         * @docs-default false
         */
        this.enableRowEditing = false;
        /**
         * @docs-default false
         */
        this.autoScrollToTop = false;
        /**
         * @docs-default
         *
         * @deprecated from v8.26.1 Use 'texts' instead
         */
        this.filtersTexts = {};
        /**
         * Used to set static width for table. By default, table is flexible and try to change width depends on viewport
         * @docs-default null
         */
        this.tableWidthConfig = null;
        /**
         * Toggle table borders visibility
         * @docs-default false
         */
        this.bordered = false;
        /**
         * Toggle "striped" rows mode. If true, every other row will have different background
         * @docs-default false
         */
        this.striped = false;
        /**
         * Emits on refresh button click
         */
        this.rowDataRefresh = new EventEmitter();
        /**
         * Emits the event on saving of row editing
         */
        this.savedRowEditing = new EventEmitter();
        /**
         * Emits the event on cancel of row editing
         */
        this.canceledRowEditing = new EventEmitter();
        /**
         * Emits the event when user clicks on checkbox of group
         */
        this.groupSelection = new EventEmitter();
        /**
         * Emits the event on click on a checkbox in the header of the table when groups present
         */
        this.allGroupedRowsSelection = new EventEmitter();
        /**
         * Emits the event on group expansion
         */
        this.groupExpansion = new EventEmitter();
        /**
         * Emits when column visibility changed
         */
        this.columnsVisibilityChange = new EventEmitter();
        /**
         * Emits when the user starts dragging the item
         */
        this.rowDragStart = new EventEmitter();
        /**
         * Emits when the user has released a drag item, before any animations have started
         */
        this.rowDragRelease = new EventEmitter();
        /**
         * Emits when the user stops dragging an item in the container
         */
        this.rowDragEnd = new EventEmitter();
        /**
         * Emits when the user drops the item inside a container
         */
        this.rowDragDrop = new EventEmitter();
        /**
         * Emits when the user click on any export button. Usage: listen to this event to be notified when to handle table data export <adapt-table (export)="function($event)"></adapt-table>
         * @since 12.10.0
         */
        this.export = new EventEmitter();
        /**
         * Emits when popupAnimationDone event triggered on toolbar dropdown item
         * Can be useful when you want to handle custom logic after dropdown opened/closed(for example register items from custom template for a correct work of keyboard navigation)
         * @since 12.18.0
         */
        this.toolbarPopupAnimationDone = new EventEmitter();
        this.mainClass = true;
        this.adaptTableClass = true;
        this._loading = false;
        this._hasVerticalBodyOverflow = false;
        this._dontEmitInfiniteScroll = false;
        this._instanceId = ++AdaptTableComponent.LAST_TABLE_INSTANCE_ID;
        this._isRefreshingRowData = false;
        this._destroyed$ = new ReplaySubject(1);
        this._defaultTexts = {
            textFilterTexts: {},
            selectFilterTexts: {},
            mergedFiltersTexts: {}
        };
        this._defaultMinColWidth = 45;
        this.editMode = 'row';
        this.paginatorPosition = 'none';
        this.reorderableColumns = true;
        this.rowTrackBy = this.trackByForRowsData.bind(this);
        this.trackByForRenderingRows = this.trackByForRenderingRows.bind(this);
        this.trackByForRenderingColumns = this.trackByForRenderingColumns.bind(this);
        this.trackByForColumns = this.trackByForColumns.bind(this);
        this.trackByForRowsData = this.trackByForRowsData.bind(this);
        this.isRtl = this._dir.value === 'rtl';
        this.setDefaultTexts(_ts.getCurrentLanguage());
        this._tooltipOverlayPlacements = getOverlayConnectedPositions(this._dir.value);
    }
    /**
     * Template that will be shown when row expanded. If not set, the expansion icon will be hidden
     * @docs-default
     */
    set expandedRowTemplate(template) {
        this._expandedRowTemplate = template;
        this.expandedRowTemplateRef = isDefined(template) ? this.rowExpansionTemplate : null;
    }
    get expandedRowTemplate() {
        return this._expandedRowTemplate;
    }
    /**
     * Show/hide row data refreshing state
     * @docs-default
     */
    get isRefreshingRowData() {
        return this._isRefreshingRowData;
    }
    set isRefreshingRowData(value) {
        if (value) {
            this.zone.onStable
                .pipe(takeUntil(this._destroyed$), take(1))
                .subscribe(() => {
                const tableHeaderHeight = this.scrollable ?
                    this.scrollableView.scrollHeaderViewChild.nativeElement.offsetHeight :
                    this.tableHeader.nativeElement.offsetHeight + 2;
                this.tableBodyHeight = `calc(100% - ${tableHeaderHeight}px)`;
                // never detectChanges in a subscription to `onStable` without reattaching to the NgZone
                // (onStable always emits outside the NgZone)
                this.zone.run(() => SafeCdr.detectChanges(this.cd));
            });
        }
        this._isRefreshingRowData = value;
    }
    /**
     * Rows data
     * @docs-default []
     */
    set value(value) {
        this._value = value;
        if (this.autoScrollToTop && value && this.lazy && value.length <= this.rows && !this.enableInfiniteScrolling) {
            this.tryScrollToTopTableBody();
        }
    }
    get value() {
        return this._value;
    }
    get scrollableClass() {
        return this.scrollable;
    }
    get notScrollableClass() {
        return !this.scrollableClass;
    }
    get isEmptyState() {
        return this.isEmpty();
    }
    get hasSelection() {
        return !!this.selectionMode;
    }
    get hasExpandingBtn() {
        return !!(this.expandedRowTemplate || this.hasAtLeastOneRowGroupedData());
    }
    get canShowFullLoader() {
        return this.showLoader && !this.loadingMore;
    }
    get paginatorClass() {
        return this.paginatorAlign === 'right' ? 'at-paginator--right' : '';
    }
    get loading() {
        return this._loading;
    }
    /**
     * Control loading state
     * @docs-default false
     */
    set loading(val) {
        this.setIsLoadingState(val);
    }
    get selectionLimit() {
        return this.toolbarConfig && this.toolbarConfig.selectionLimit;
    }
    get hasSelectionLimit() {
        return !this.isSingleSelectionMode() && Boolean(this.selectionLimit);
    }
    get isSingleSortMode() {
        return this.sortMode === SortMode.Single;
    }
    get isMultipleSortMode() {
        return this.sortMode === SortMode.Multiple;
    }
    /* Lifecycles START */
    ngOnInit() {
        if (this.virtualScroll && !this.scrollable) {
            adaptError('ADAPT TABLE: Seems like you are trying to use "virtualScroll" for non scrollable table. Please set "scrollable" to "true" or remove "virtualScroll"');
        }
        super.ngOnInit();
        this._deprecationMiddleware.init(this);
        this.primengTable = this;
        this.bodyTemplate = this.tableBodyTemplateRef;
        this.headerTemplate = this.tableHeaderTemplateRef;
        this.colGroupTemplate = this.tableColgroupTemplateRef;
        this.emptyMessageTemplate = this.tableEmptyMessageTemplateRef;
        this.isMobile = this._adaptDeviceDetectionService.isMobile();
        this.texts = Object.assign(Object.assign({}, this._defaultTexts), this.texts);
        this.rowSelectionRadiobuttonName = `rowSelectionGroup${this._instanceId}`;
        this.columns.forEach((col) => {
            /*
             * Generate property columnAdaptID to assign [attr.data-testid] in QA purposes.
             * Column index must be static number during reordering columns.
             */
            col.columnAdaptID = 'adapt-table-' + this._instanceId + '-th-' + this.columnIndex++;
        });
        this._autoScrollTopOnValueSourceChangeForNotLazy();
        // If totalRecords is null we assume that all other inputs also can't be calculated
        if (isNull(this.totalRecords)) {
            this.disabledSelectedRowsCount = null;
            this.disabledNotSelectedRowsCount = null;
            this.disabledSelectedFilteredRowsCount = null;
            this.disabledNotSelectedFilteredRowsCount = null;
            this.selectedFilteredRowsCount = null;
            this.totalRecordsInGroup = null;
        }
    }
    ngAfterViewInit() {
        this._setHostClassHasNotScroll();
        this.zone.runOutsideAngular(() => {
            this.zone.onStable.asObservable().pipe(takeUntil(this._destroyed$)).subscribe(() => {
                // !TODO: Potential performance bottleneck
                this.updateHasBodyScroll();
            });
        });
        this.updateFirstHeaderCellWidth();
        this._showInstantiatedTooltipDelayed = debounce(this._showInstantiatedTooltip, this.tooltipInitialDelayMs);
        this.zone.runOutsideAngular(() => {
            fromEvent(this.el.nativeElement, 'mousemove').pipe(debounceTime(100), takeUntil(this._destroyed$)).subscribe((e) => this._onTableMouseMoveDebounced(e));
            fromEvent(this.el.nativeElement, 'mouseleave')
                .pipe(takeUntil(this._destroyed$))
                .subscribe((e) => this._onTableMouseLeave(e));
            fromEvent(this.el.nativeElement, 'mousemove').pipe(takeUntil(this._destroyed$))
                .subscribe((e) => this._onTableMouseMove(e));
            fromEvent(this.el.nativeElement, 'click').pipe(takeUntil(this._destroyed$))
                .subscribe((e) => this._onTableClick(e));
        });
        this._enableKeyboardNavigation();
        this.subscribeOnTableBodyScroll();
        this._recalculateActionColWidth();
        this.tableService.viewRelatedDataSource$
            .pipe(takeUntil(this._destroyed$))
            .subscribe(() => {
            this._recalculateActionColWidth();
        });
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        if (this._docListener) {
            this._docListener();
        }
        this._hideTooltip();
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        if (changes.rows && !changes.rows.firstChange && this.virtualScroll) {
            this.cd.detectChanges();
        }
        if (changes.texts && !changes.texts.firstChange) {
            this.texts = Object.assign(Object.assign({}, this._defaultTexts), this.texts);
        }
    }
    /* Lifecycles END */
    /* ------------------------------------------------------------------------------------------------ */
    /* Getters START */
    getTableService() {
        return this.tableService;
    }
    getScrollableBodyElement() {
        if (this.virtualScroll) {
            return this.scrollableView && this.scrollableView.virtualScrollBody
                && this.scrollableView.virtualScrollBody.elementRef.nativeElement;
        }
        return this.scrollableView && this.scrollableView.scrollBodyViewChild.nativeElement;
    }
    getColumnData(dataItem, column) {
        return this.resolveFieldData(dataItem, column.field);
    }
    getCurrentTableColumnsCount(columns) {
        return this.getColumnsForRendering(columns).length + (+!!this.isMultipleSelectionMode()) + (+!!this.isSingleSelectionMode()) +
            (+!!this.hasExpandingBtn) + (+this.enableReorderableRows);
    }
    getVisibleColumns(columns) {
        return (columns || this.columns).filter(c => this.isColumnVisible(c));
    }
    getColumnsForRendering(columns) {
        const visibleColumns = this.getVisibleColumns(columns);
        if (!this.mergeColumns) {
            return visibleColumns.map(column => {
                return {
                    columnsConfigs: [column],
                    type: RenderingColumnType.Simple
                };
            });
        }
        const columnsOrder = {};
        visibleColumns.forEach((col, i) => {
            columnsOrder[col.field] = i;
        });
        const currentViewportWidth = window.innerWidth;
        const mergedColumnPairs = this.mergeColumns ? this.mergeColumns
            .filter(item => item.viewportWidth > currentViewportWidth
            && [this._getColumnByField(visibleColumns, item.field1), this._getColumnByField(visibleColumns, item.field2)]
                .every(column => isDefined(column)))
            .map(pair => {
            return {
                columnsConfigs: [this._getColumnByField(visibleColumns, pair.field1), this._getColumnByField(visibleColumns, pair.field2)]
                    .sort((a, b) => columnsOrder[a.field] - columnsOrder[b.field]),
                type: RenderingColumnType.Merged
            };
        }) : [];
        const singleColumns = visibleColumns.filter(column => {
            return !mergedColumnPairs.some(item => item.columnsConfigs[0].field === column.field
                || item.columnsConfigs[1] && item.columnsConfigs[1].field === column.field);
        }).map(item => {
            return {
                columnsConfigs: [item],
                type: RenderingColumnType.Simple
            };
        });
        return [...singleColumns, ...mergedColumnPairs]
            .sort((a, b) => columnsOrder[a.columnsConfigs[0].field] - columnsOrder[b.columnsConfigs[0].field]);
    }
    getColumnWidth(column, minWidth, colEl) {
        if (!column.width && this.scrollable && this.isMobile) {
            return `${Math.floor(this.tableContainer.nativeElement.offsetWidth * .9)}px`;
        }
        const minWidthNumber = parseInt(minWidth, 10);
        if (column.width
            && (column.width.includes('px') && parseInt(column.width) > minWidthNumber
                || (colEl === null || colEl === void 0 ? void 0 : colEl.offsetParent) && (colEl === null || colEl === void 0 ? void 0 : colEl.clientWidth) > minWidthNumber)) {
            return column.width;
        }
        // To avoid situations when column has 0 width and can't be visible for the user set "width" property equal "min-width".
        // We need to do that because min-width not always work correctly for table columns.
        // Additional details can be found here - https://github.bmc.com/bmc-ux/adapt-angular/issues/7833
        if ((colEl === null || colEl === void 0 ? void 0 : colEl.offsetParent) && (colEl === null || colEl === void 0 ? void 0 : colEl.clientWidth) <= minWidthNumber) {
            return minWidth;
        }
        return null;
    }
    getColumnStyles(column, colEl) {
        const minWidth = isDefined(column.minWidth) ? getValueOrFunc(column.minWidth) : `${this._defaultMinColWidth}px`;
        // If columns was resized take width info from the data attribute "resizedWidth" where saved correct width after resize
        const width = (this.resizableColumns ? colEl === null || colEl === void 0 ? void 0 : colEl.dataset['resizedWidth'] : null) || this.getColumnWidth(column, minWidth, colEl);
        return { width, minWidth };
    }
    getRowGroupTitle(dataItem) {
        var _a;
        return (_a = dataItem.groupTitle) !== null && _a !== void 0 ? _a : dataItem.groupValue;
    }
    getPlainExpandedRenderingRows(rowsData, withNotExpanded = false) {
        if (isNil(rowsData)) {
            return [];
        }
        let rootGroupDataItemsCount = 0;
        let hasGroup = false;
        const getPlainExpandedRenderingRowsRec = (dataItem, nestingLevel, primengRowIndex) => {
            if (isDefined(dataItem) && hasRowGroupedData(dataItem)) {
                hasGroup = true;
                if (withNotExpanded || this.isExpandedGroup(dataItem)) {
                    const expItems = [{
                            nestingLevel,
                            rowData: dataItem,
                            isGroup: true,
                            rowIndexForRootGroup: 0,
                            editing: false,
                            groupExpanded: true,
                            rowExpanded: false,
                        }];
                    for (const item of dataItem.items) {
                        expItems.push(...getPlainExpandedRenderingRowsRec(item, nestingLevel + 1, primengRowIndex));
                    }
                    return expItems;
                }
                return [{
                        nestingLevel,
                        rowData: dataItem,
                        isGroup: true,
                        rowIndexForRootGroup: 0,
                        editing: false,
                        groupExpanded: false,
                        rowExpanded: false,
                    }];
            }
            else {
                const rowIndexForRootGroup = hasGroup ? (rootGroupDataItemsCount++) : primengRowIndex;
                return [{
                        nestingLevel,
                        rowData: dataItem,
                        isGroup: false,
                        rowIndexForRootGroup,
                        editing: this.isRowEditing(dataItem),
                        groupExpanded: false,
                        rowExpanded: this.isRowExpanded(dataItem),
                    }];
            }
        };
        return flatten(rowsData.map((rowData, i) => getPlainExpandedRenderingRowsRec(rowData, 0, i)));
    }
    getCellStyle(renderRowData, dataColumnIndex, column) {
        const nl = renderRowData.nestingLevel;
        let baseStyles;
        if (nl > 0 && (!dataColumnIndex || dataColumnIndex === 0)) {
            if (!this.isRtl) {
                baseStyles = {
                    paddingLeft: `${this.nestedGroupPadding * nl + this.expandindCellInitialPadding}px`,
                };
            }
            else {
                baseStyles = {
                    paddingRight: `${this.nestedGroupPadding * nl + this.expandindCellInitialPadding}px`,
                };
            }
        }
        if (column && column.dataCellStyle) {
            const param = {
                dataItem: renderRowData.rowData,
                rowIndex: renderRowData.rowIndexForRootGroup,
                column,
                expanded: renderRowData.rowExpanded,
                editing: renderRowData.editing,
            };
            const custom = getValueOrFunc(column.dataCellStyle, param);
            if (custom) {
                return baseStyles ? Object.assign({}, custom, baseStyles) : custom;
            }
        }
        return baseStyles;
    }
    getMergedCellStyle(renderRowData, dataColumnIndex, columns) {
        return columns.reduce((styles, column) => {
            return Object.assign(styles, this.getCellStyle(renderRowData, dataColumnIndex, column));
        }, {});
    }
    /** Returns reference for filteredValue || value || [] */
    getAllCurrentRows() {
        return this.filteredValue || this.value || [];
    }
    getEmptyStateLabelText() {
        return this.hasFilter()
            ? this.texts.emptyStateWithFilterLabelText
            : this.texts.emptyStateLabelText;
    }
    getDataCellClass(column, renderRowData, element) {
        const classes = this.getActionConfig(column) ? [AdaptTableClasses.ActionsCell] : [];
        if (renderRowData.editing && this.isEditableColumn(column)) {
            classes.push(AdaptTableClasses.EditingCell);
        }
        if (column.dataCellClass) {
            const param = {
                dataItem: renderRowData.rowData,
                rowIndex: renderRowData.rowIndexForRootGroup,
                column,
                expanded: renderRowData.rowExpanded,
                editing: renderRowData.editing,
            };
            const customClass = getValueOrFunc(column.dataCellClass, param);
            if (customClass) {
                classes.push(customClass);
            }
        }
        if (element && this._hasCellFocus(element)) {
            classes.push('at-cell-focus');
        }
        return classes.join(' ');
    }
    getMergedDataCellClass(columns, renderRowData, element) {
        return columns.map(column => this.getDataCellClass(column, renderRowData, element)).join(' ');
    }
    getHeaderClass(column) {
        if (column.headerClass) {
            return getValueOrFunc(column.headerClass);
        }
        return '';
    }
    getMergedHeaderClass(columns) {
        return columns.map(column => this.getHeaderClass(column)).join(' ');
    }
    getDataRowClass(renderingRowData) {
        const classes = renderingRowData.rowExpanded ? ['at-row--expanded'] : [];
        if (this.rowsCustomClass) {
            const customClass = getValueOrFunc(this.rowsCustomClass, renderingRowData);
            if (customClass) {
                classes.push(customClass);
            }
        }
        if (this.isRowSelected(renderingRowData.rowData)) {
            classes.push('ui-state-highlight'); // primeng class
        }
        if (!this.isRowSelectionDisabled(renderingRowData.rowData) && this.isSingleSelectionMode()) {
            classes.push('ui-selectable-row'); // primeng class
        }
        return classes.join(' ');
    }
    getGroupRowClass(renderingRowData) {
        const classes = renderingRowData.groupExpanded ? ['at-group-row--expanded'] : [];
        if (this.rowsCustomClass) {
            const customClass = getValueOrFunc(this.rowsCustomClass, renderingRowData);
            if (customClass) {
                classes.push(customClass);
            }
        }
        return classes.join(' ');
    }
    getColumnTemplateParams(column, renderRowData) {
        return {
            column,
            dataItem: renderRowData.rowData,
            rowIndex: renderRowData.rowIndexForRootGroup,
            expanded: renderRowData.rowExpanded,
            editing: renderRowData.editing,
        };
    }
    getGroupValueDataCellTemplateParams(renderingRowData) {
        return { $implicit: renderingRowData };
    }
    getCurrentPageDisplayingRows() {
        if (this.paginator && !this.lazy) {
            return this.getAllCurrentRows().slice(this.first, this.first + this.rows);
        }
        else {
            return this.getAllCurrentRows();
        }
    }
    getCurrentPageDisplayingRowsItems() {
        return this.getRowsItems(this.getCurrentPageDisplayingRows());
    }
    getRowsItems(rows) {
        const rowDataItems = [];
        this.goRecursivelyByItemsInGroups(rows, (row) => {
            rowDataItems.push(row);
        });
        return rowDataItems;
    }
    getCurrentPageRenderingDataRows(withNotExpanded = false) {
        return this.getPlainExpandedRenderingRows(this.getCurrentPageDisplayingRows(), withNotExpanded);
    }
    getDataCellTabIndex(column, renderRowData) {
        return this.getActionConfig(column) || this.isEditableColumn(column) && renderRowData.editing ? -1 : 0;
    }
    getMergedDataCellTabIndex(columns, renderRowData) {
        return columns.every(column => {
            return this.getActionConfig(column) || this.isEditableColumn(column) && renderRowData.editing;
        }) ? -1 : 0;
    }
    getDataRowDirectiveParams(renderingRowData) {
        return {
            dataItem: renderingRowData.rowData,
            rowIndex: renderingRowData.rowIndexForRootGroup,
            expanded: renderingRowData.rowExpanded,
            editing: renderingRowData.editing,
        };
    }
    getHeaderDataCellDirectiveParams(renderingColumn, index) {
        return {
            renderingColumn,
            column: renderingColumn.columnsConfigs[0],
            index
        };
    }
    getDataCellDirectiveParams(renderingColumn, renderRowData) {
        return {
            column: renderingColumn.columnsConfigs[0],
            renderingColumn,
            dataItem: renderRowData.rowData,
            rowIndex: renderRowData.rowIndexForRootGroup,
            expanded: renderRowData.rowExpanded,
            editing: renderRowData.editing,
        };
    }
    getExpandedRowTemplateParams(dataItem, columns, rowIndex) {
        return {
            dataItem,
            rowIndex,
            columns,
        };
    }
    getDataCellTemplateParams(column, renderRowData) {
        return {
            column,
            renderRowData
        };
    }
    getPrimaryKey(data) {
        return this.resolveFieldData(data, this.dataKey);
    }
    getActionConfig(column) {
        return column.actionsConfig;
    }
    getTableWidth(tableWidthConfig, isMobile) {
        if (tableWidthConfig) {
            return isMobile
                ? tableWidthConfig.mobile === 'auto' ? 'auto' : `${tableWidthConfig.mobile}`
                : tableWidthConfig.desktop === 'auto' ? 'auto' : `${tableWidthConfig.desktop}`;
        }
        return 'auto';
    }
    /* Getters END */
    /* ------------------------------------------------------------------------------------------------ */
    /* Checkers START */
    hasNotRowNestingLevel(renderRowData) {
        return !renderRowData.nestingLevel;
    }
    hasReachedTotalRecords() {
        const totalRecords = this.totalRecords;
        return (totalRecords != null || totalRecords !== 0) && totalRecords === this.value.length;
    }
    /**
     * In case if user send us `totalRecords` as `null` we assume that there is no possibility to calculate
     * such data on customer side(for example server restrictions)
     */
    isTotalRecordsInfoAvailable() {
        return isNumber(this.totalRecords);
    }
    hasAtLeastOneRowGroupedData() {
        const rowsData = this.getAllCurrentRows();
        for (const row of rowsData) {
            if (isDefined(row) && hasRowGroupedData(row)) {
                return true;
            }
        }
        return false;
    }
    shouldShowExpandingButton(renderRowData) {
        if (!isDefined(this.expandedRowTemplate)) {
            return false;
        }
        const isExpandingDisabled = isFunction(this.disableRowExpandingResolver)
            ? this.disableRowExpandingResolver(renderRowData.rowData)
            : false;
        return !isExpandingDisabled;
    }
    isColumnVisible(column) {
        return !getValueOrFunc(column.hidden);
    }
    isExpandedGroup(groupedRowData) {
        const fieldGroup = this.expandedGroupsKeys[groupedRowData.groupField];
        return fieldGroup ? fieldGroup[groupedRowData.groupValue] != null : false;
    }
    isGroupCheckboxDisabled(grd) {
        return !!this.isRowSelectionDisabled(grd) || this._hasAllChildItemsDisabledForSelection(grd);
    }
    isChildrenExist(rowData) {
        return !!(rowData[this.nestingKey] && rowData[this.nestingKey].length);
    }
    isFilterableColumn(column) {
        if (!this.filterable || column.actionsConfig) {
            return false;
        }
        const filterableCol = column.filterable;
        return trueOrNull(filterableCol);
    }
    isColumnFrozen(column) {
        return getValueOrFunc(column.frozen);
    }
    hasAtLeastOneFrozenColumn() {
        return this.columns.some(column => getValueOrFunc(column.frozen));
    }
    /* Checkers END */
    /* ------------------------------------------------------------------------------------------------ */
    /* Common START */
    setDefaultTexts(translation) {
        this._defaultTexts.emptyStateLabelText = translation['adapt.table.emptyState'];
        this._defaultTexts.emptyStateWithFilterLabelText = translation['adapt.table.emptyStateWithFilter'];
        this._defaultTexts.actionButtonDefaultLabel = translation['adapt.table.actionButtonDefaultLabel'];
        this._defaultTexts.unselectAllSelectedTitle = translation['adapt.table.unselectAllSelectedTitle'];
        this._defaultTexts.saveRowEditingButtonLabel = translation['adapt.common.save'];
        this._defaultTexts.cancelRowEditingButtonLabel = translation['adapt.common.cancel'];
        this._defaultTexts.fromToOfTextTemplate = translation['adapt.table.toolbar.fromToOfTextTemplate'];
        this._defaultTexts.fromToTextTemplate = translation['adapt.table.toolbar.fromToTextTemplate'];
        this._defaultTexts.totalCountTextTemplate = translation['adapt.table.toolbar.totalCountTextTemplate'];
        this._defaultTexts.totalCountTextTemplatePlural = translation['adapt.table.toolbar.totalCountTextTemplatePlural'];
        this._defaultTexts.noRecordsText = translation['adapt.table.toolbar.noRecordsText'];
        this._defaultTexts.outOfShownTextTemplate = translation['adapt.table.toolbar.outOfShownTextTemplate'];
        this._defaultTexts.recordsCountShownTextTemplate = translation['adapt.table.toolbar.recordsCountShownTextTemplate'];
        this._defaultTexts.recordsCountShownTextTemplatePlural = translation['adapt.table.toolbar.recordsCountShownTextTemplatePlural'];
        this._defaultTexts.searchPlaceholder = translation['adapt.common.search'];
        this._defaultTexts.searchLabel = translation['adapt.common.search'];
        this._defaultTexts.visibleColumnsMenuLabel = translation['adapt.table.toolbar.visibleColumnsMenuLabel'];
        this._defaultTexts.filterButtonLabel = translation['adapt.common.filter'];
        this._defaultTexts.selected = translation['adapt.table.toolbar.selected'];
        this._defaultTexts.showAllSelected = translation['adapt.table.toolbar.showAllSelected'];
        this._defaultTexts.headerSelectRowsArialLabel = translation['adapt.table.headerSelectRowsArialLabel'];
        this._defaultTexts.refresh = translation['adapt.table.toolbar.refresh'];
        this._defaultTexts.clearButtonText = translation['adapt.common.clear'];
        this._defaultTexts.textFilterTexts.placeholder = translation['adapt.common.filter'];
        this._defaultTexts.textFilterTexts.label = translation['adapt.common.filter'];
        this._defaultTexts.selectFilterTexts.defaultTitle = translation['adapt.common.filter'];
        this._defaultTexts.mergedFiltersTexts.buttonNoAppliedFilters = translation['adapt.common.filter'];
        this._defaultTexts.mergedFiltersTexts.buttonAppliedFilter = translation['adapt.table.filters.mergedFilters.appliedFilter'];
        this._defaultTexts.mergedFiltersTexts.buttonAppliedFilters = translation['adapt.table.filters.mergedFilters.appliedFilters'];
        this._defaultTexts.mergedFiltersTexts.appliedFiltersLabel = translation['adapt.table.filters.mergedFilters.appliedFiltersLabel'];
        this._defaultTexts.goBtnText = translation['adapt.table.pagination.go'];
        this._defaultTexts.pageNumberText = translation['adapt.table.pagination.pageNumber'];
        this._defaultTexts.orderLabelSort = translation['adapt.common.sort'];
        this._defaultTexts.orderLabelAddToSort = translation['adapt.table.headerCellMenu.orderLabelAddToSort'];
        this._defaultTexts.orderAscBtn = translation['adapt.table.headerCellMenu.orderAsc'];
        this._defaultTexts.orderDescBtn = translation['adapt.table.headerCellMenu.orderDesc'];
        this._defaultTexts.selectSortOrderLabel = translation['adapt.table.headerCellMenu.selectSortOrderLabel'];
        this._defaultTexts.selectSortOrderOption = translation['adapt.table.headerCellMenu.selectSortOrderOption'];
        this._defaultTexts.removeCurrentFromSortingBtn = translation['adapt.table.headerCellMenu.removeCurrentFromSorting'];
        this._defaultTexts.clearAllSortingBtn = translation['adapt.table.headerCellMenu.clearAllSorting'];
        this._defaultTexts.recordsPerPage = translation['adapt.table.paginator.recordsPerPage'];
        this._defaultTexts.expandRowText = translation['adapt.table.expandRow'];
        this._defaultTexts.collapseRowText = translation['adapt.table.collapseRow'];
        this._defaultTexts.prevPageBtnText = translation['adapt.common.previous'];
        this._defaultTexts.nextPageBtnText = translation['adapt.common.next'];
        this._defaultTexts.selectAllItemsOnPageHeaderLabel = translation['adapt.table.selectAllItemsOnPageHeaderLabel'];
        this._defaultTexts.selectAllFilteredItemsOnPageHeaderLabel = translation['adapt.table.selectAllFilteredItemsOnPageHeaderLabel'];
        this._defaultTexts.selectAllPossibleItemsOnPageHeaderLabel = translation['adapt.table.selectAllPossibleItemsOnPageHeaderLabel'];
        this._defaultTexts.selectAllPossibleFilteredItemsOnPageHeaderLabel = translation['adapt.table.selectAllPossibleFilteredItemsOnPageHeaderLabel'];
        this._defaultTexts.selectAllVisibleItemsHeaderLabel = translation['adapt.table.selectAllVisibleItemsHeaderLabel'];
        this._defaultTexts.selectAllFilteredVisibleItemsHeaderLabel = translation['adapt.table.selectAllFilteredVisibleItemsHeaderLabel'];
        this._defaultTexts.selectAllPossibleVisibleItemsHeaderLabel = translation['adapt.table.selectAllPossibleVisibleItemsHeaderLabel'];
        this._defaultTexts.selectAllPossibleFilteredVisibleItemsHeaderLabel = translation['adapt.table.selectAllPossibleFilteredVisibleItemsHeaderLabel'];
        this._defaultTexts.selectAllItemsInTableHeaderLabel = translation['adapt.table.selectAllItemsInTableHeaderLabel'];
        this._defaultTexts.selectAllItemsInTableHeaderLabelForUnknownTotalRecords = translation['adapt.table.selectAllItemsInTableHeaderLabelForUnknownTotalRecords'];
        this._defaultTexts.selectAllFilteredItemsInTableHeaderLabel = translation['adapt.table.selectAllFilteredItemsInTableHeaderLabel'];
        this._defaultTexts.selectAllPossibleItemsInTableHeaderLabel = translation['adapt.table.selectAllPossibleItemsInTableHeaderLabel'];
        this._defaultTexts.selectAllPossibleFilteredItemsInTableHeaderLabel = translation['adapt.table.selectAllPossibleFilteredItemsInTableHeaderLabel'];
        this._defaultTexts.deselectAllItemsInTableHeaderLabel = translation['adapt.table.deselectAllItemsInTableHeaderLabel'];
        this._defaultTexts.deselectAllFilteredItemsInTableHeaderLabel = translation['adapt.table.deselectAllFilteredItemsInTableHeaderLabel'];
        this._defaultTexts.deselectAllPossibleItemsInTableHeaderLabel = translation['adapt.table.deselectAllPossibleItemsInTableHeaderLabel'];
        this._defaultTexts.deselectAllPossibleFilteredItemsInTableHeaderLabel = translation['adapt.table.deselectAllPossibleFilteredItemsInTableHeaderLabel'];
        this._defaultTexts.export = translation['adapt.table.toolbar.export'];
        this._defaultTexts.exportEntireDocument = translation['adapt.table.toolbar.exportEntireDocument'];
        this._defaultTexts.exportSelected = translation['adapt.table.toolbar.exportSelected'];
    }
    onRadiobuttonModelChange(rowDataItem) {
        this.toggleRowSelection(rowDataItem);
    }
    updateHasBodyScroll() {
        if (!this.scrollable) {
            return;
        }
        const hasVerticalBodyOverflow = this.scrollableView.hasVerticalOverflow();
        if (this._hasVerticalBodyOverflow === hasVerticalBodyOverflow) {
            return;
        }
        this._hasVerticalBodyOverflow = hasVerticalBodyOverflow;
        if (hasVerticalBodyOverflow) {
            this.el.nativeElement.classList.remove(AdaptTableClasses.HasNotVerticalBodyOverflow);
        }
        else {
            this._setHostClassHasNotScroll();
        }
        this.scrollableView.alignScrollBar();
    }
    handleColumnResized(event) {
        this.onColResize.emit(event);
        SafeCdr.detectChanges(this.cd);
    }
    onGroupToggleClick(groupedRowData) {
        let fieldGroup = this.expandedGroupsKeys[groupedRowData.groupField];
        if (!fieldGroup) {
            fieldGroup = this.expandedGroupsKeys[groupedRowData.groupField] = {};
        }
        const oldIsExpanded = this.isExpandedGroup(groupedRowData);
        if (oldIsExpanded) {
            delete fieldGroup[groupedRowData.groupValue];
        }
        else {
            fieldGroup[groupedRowData.groupValue] = true;
        }
        this.groupExpansion.emit({
            expanded: !oldIsExpanded,
            groupedRowData,
        });
        this.zone.onStable.asObservable().pipe(takeUntil(this._destroyed$), take(1)).subscribe(() => {
            this.updateFirstHeaderCellWidth();
        });
    }
    updateFirstHeaderCellWidth() {
        const firstColDirective = this.dataHeaderCells.first;
        const firstCol = firstColDirective && firstColDirective.element;
        if (firstCol && Object.keys(this.expandedGroupsKeys).length > 0 && this.dataRows) {
            firstCol.nativeElement.style.width = null;
            let maxWidth = 0;
            this.dataRows.forEach(data => {
                const firstTd = data.element.nativeElement.querySelector('.at-data-cell');
                if (firstTd && firstTd.scrollWidth > firstTd.clientWidth && firstTd.scrollWidth > maxWidth) {
                    maxWidth = firstTd.scrollWidth;
                }
            });
            if (maxWidth) {
                if (this.updateFirstColumnWidth) {
                    this.updateFirstColumnWidth(maxWidth, firstCol.nativeElement);
                }
            }
        }
    }
    goRecursivelyByItemsInAllGroups(cb) {
        const allRows = this.getAllCurrentRows();
        allRows.forEach(row => this.goRecursivelyByItemsInGroup(row, cb));
    }
    goRecursivelyByItemsInGroups(rows, cb) {
        rows.forEach(row => this.goRecursivelyByItemsInGroup(row, cb));
    }
    goRecursivelyByItemsInGroup(rowData, cb) {
        if (isDefined(rowData) && hasRowGroupedData(rowData)) {
            rowData.items.forEach(item => {
                this.goRecursivelyByItemsInGroup(item, cb);
            });
        }
        else {
            cb(rowData);
        }
    }
    resolveFieldData(data, field) {
        return ObjectUtils.resolveFieldData(data, field);
    }
    createLazyLoadMetadata(eventSource) {
        return {
            eventSource,
            first: this.first,
            rows: this.rows,
            sortField: this.sortField,
            sortOrder: this.sortOrder,
            filters: this.filters,
            globalFilter: this.filters && this.filters.global ? this.filters.global.value : null,
            multiSortMeta: this.multiSortMeta,
            loadMore: false,
            infiniteScrollingFirst: null
        };
    }
    subscribeOnTableBodyScroll() {
        const scrollToEndMargin = 2; // in pixels
        const scrollBody = this.getScrollableBodyElement();
        if (scrollBody) {
            this.zone.runOutsideAngular(() => {
                fromEvent(scrollBody, 'scroll').pipe(takeUntil(this._destroyed$)).subscribe(() => {
                    if (!this.enableInfiniteScrolling || this.loading || this._dontEmitInfiniteScroll
                        || scrollBody.scrollHeight > scrollBody.scrollTop + scrollBody.offsetHeight + scrollToEndMargin) {
                        return;
                    }
                    if (this.hasReachedTotalRecords()) {
                        return;
                    }
                    const lazyLoadEvent = Object.assign(Object.assign({}, this.createLazyLoadMetadata(AdaptTableEventSource.LoadMore)), { loadMore: true, infiniteScrollingFirst: this.value.length });
                    this.zone.run(() => {
                        this._emitLazyLoadEvent(lazyLoadEvent);
                    });
                });
            });
        }
    }
    detectChangesForTooltip() {
        this.zone.runOutsideAngular(() => {
            setTimeout(() => {
                if (this._tooltipOverlayWithPortal) {
                    SafeCdr.detectChanges(this._tooltipOverlayWithPortal.componentRef.changeDetectorRef);
                }
            });
        });
    }
    setIsLoadingState(value) {
        this._loading = value;
        const busyConfigCopy = Object.assign({}, this.busyConfig);
        if (value) {
            if (this.busyConfig.busy) {
                this.busyConfig.busy.unsubscribe();
            }
            busyConfigCopy.busy = new Observable().pipe(takeUntil(this._destroyed$)).subscribe();
            this.busyConfig = busyConfigCopy;
        }
        else {
            if (this.busyConfig.busy) {
                this.busyConfig.busy.unsubscribe();
                busyConfigCopy.busy = null;
                this.busyConfig = busyConfigCopy;
            }
        }
        this.loadingToggle.emit(value);
    }
    tryScrollToTopTableBody() {
        const scrollableBodyElement = this.getScrollableBodyElement();
        if (scrollableBodyElement) {
            scrollableBodyElement.scrollTop = 0;
        }
    }
    onPageChange(event) {
        super.onPageChange(event);
        if (this.scrollable) {
            this.resetScrollTop();
        }
        SafeCdr.detectChanges(this.cd);
    }
    resetScrollTop() {
        if (this.virtualScroll) {
            this.scrollToVirtualIndex(0);
        }
        else {
            this.scrollTo({ top: 0 });
        }
    }
    scrollToVirtualIndex(index) {
        if (this.scrollableView) {
            this.scrollableView.scrollToVirtualIndex(index);
        }
    }
    handleScrollableWrapperResizing() {
        if (this.virtualScroll && this.scrollableView.virtualScrollBody) {
            // Because dimensions of scrollable wrapper can be changed in runtime
            // need to call checkViewportSize() method that update the viewport dimensions and re-render
            this.scrollableView.virtualScrollBody.checkViewportSize();
        }
    }
    scrollTo(options) {
        if (this.scrollableView) {
            this.scrollableView.scrollTo(options);
        }
    }
    setDefaultActionColWidth() {
        var _a, _b, _c, _d;
        const tableElement = this.scrollable
            ? (_b = (_a = this.scrollableView) === null || _a === void 0 ? void 0 : _a.scrollTableViewChild) === null || _b === void 0 ? void 0 : _b.nativeElement
            : (_c = this.nonScrollableTable) === null || _c === void 0 ? void 0 : _c.nativeElement;
        if (!tableElement || !((_d = this.actionColElements) === null || _d === void 0 ? void 0 : _d.length)) {
            return null;
        }
        const actionCols = this.actionColElements.toArray();
        const tableLayout = tableElement.style.tableLayout;
        // Set table layout to auto and actions column width to 1% to get the width of the action column based on its content
        const actionColsWidth = actionCols.map(actionCol => {
            this._renderer.setStyle(tableElement, 'tableLayout', 'auto');
            this._renderer.setStyle(actionCol.nativeElement, 'width', '1%');
            const width = actionCol.nativeElement.clientWidth;
            // Reset styles to previous values after action column width was calculated
            this._renderer.setStyle(tableElement, 'tableLayout', tableLayout);
            this._renderer.setStyle(actionCol.nativeElement, 'width', '');
            return width;
        });
        this.zone.run(() => {
            // Find maximum column width and set it to the action column
            actionCols.forEach(actionCol => {
                this._renderer.setStyle(actionCol.nativeElement, 'width', `${Math.max(...actionColsWidth)}px`);
            });
        });
    }
    /* Common END */
    /* ------------------------------------------------------------------------------------------------ */
    /* TrackBy START */
    trackByForRenderingRows(index, renderRowData) {
        // by primary key or index
        if (renderRowData.isGroup) {
            const grd = renderRowData.rowData;
            return `groupValue_${grd.groupField}:${grd.groupValue}`;
        }
        else {
            return this.getPrimaryKey(renderRowData.rowData) || index;
        }
    }
    trackByForRowsData(index, row) {
        return this.getPrimaryKey(row) || index;
    }
    trackByForRenderingColumns(index, renderingColumn) {
        // by primary key or index
        return renderingColumn.columnsConfigs.map(column => column.field).join('-') || index;
    }
    trackByForColumns(index, column) {
        return column.field || index;
    }
    /* TrackBy END */
    /* ------------------------------------------------------------------------------------------------ */
    /* Selection feature START */
    getGroupSelectionState(grd) {
        if (this.getRowSelectionArray().length === 0) {
            return CheckboxState.Unselected;
        }
        let childrenCount = 0;
        let selectedChildrenCount = 0;
        this.goRecursivelyByItemsInGroup(grd, (item) => {
            childrenCount++;
            if (this.isRowSelected(item)) {
                selectedChildrenCount++;
            }
        });
        if (childrenCount === 0 || selectedChildrenCount === 0) {
            return CheckboxState.Unselected;
        }
        return childrenCount === selectedChildrenCount ? CheckboxState.Selected : CheckboxState.Indeterminate;
    }
    getRowSelectionArray() {
        const selection = this.selection;
        return selection ? (Array.isArray(selection) ? selection : [selection]) : [];
    }
    getRowSelectionKeys() {
        return this.selectionKeys || {};
    }
    getSelectableRowsItems(rows) {
        const result = [];
        this.goRecursivelyByItemsInGroups(rows, (row) => {
            if (!this.isRowSelectionDisabled(row)) {
                result.push(row);
            }
        });
        return result;
    }
    isSingleSelectionRowSelected(data) {
        const selection = this.getRowSelectionArray();
        return selection.length
            ? this.getPrimaryKey(selection[0]) === this.resolveFieldData(data, this.dataKey)
            : false;
    }
    isRowSelected(rowDataItem) {
        // const rowId = this.getPrimaryKey(rowDataItem);
        // return rowId == null ? false : this.getRowSelectionKeys()[rowId];
        if (typeof rowDataItem === 'object' && rowDataItem) {
            return this.isSelected(rowDataItem);
        }
        // row Id
        return this.getRowSelectionKeys()[rowDataItem];
    }
    isRowSelectionCheckboxDisabled(data) {
        return this.isRowSelectionDisabled(data)
            || (this.selectionLimit === (this.getRowSelectionArray().length)
                && !Object.keys(this.selectionKeys).find(key => key === data[this.dataKey]));
    }
    isRowSelectionDisabled(rowData) {
        if (isFunction(this.disabledRowSelectionResolver)) {
            return this.disableRowSelection || this.disabledRowSelectionResolver(rowData);
        }
        else {
            return this.disableRowSelection;
        }
    }
    isSelectedGroupCheckbox(grd) {
        return grd && !this.isRowSelectionDisabled(grd)
            && (this.getGroupSelectionState(grd) === CheckboxState.Selected || this.getGroupSelectionState(grd) === CheckboxState.Indeterminate);
    }
    isGroupSelectionIndeterminate(grd) {
        return this.getGroupSelectionState(grd) === CheckboxState.Indeterminate;
    }
    onGroupSelectionChanged(checked, grd) {
        this.onToogleGroupedRowsSelection(checked, [grd]);
        this.groupSelection.emit({
            groupedRowData: grd,
            selected: checked,
        });
    }
    addToRowSelection(dataItems) {
        if (Array.isArray(dataItems) && dataItems.length === 0) {
            return;
        }
        if (this.isMultipleSelectionMode()) {
            const newSelection = this.getRowSelectionArray().slice();
            const dataItemsToAdd = [];
            dataItems.forEach(di => {
                if (!this.isRowSelected(di)) {
                    dataItemsToAdd.push(di);
                }
            });
            newSelection.push(...dataItemsToAdd);
            this._updateRowSelection(newSelection);
        }
        else {
            this._updateRowSelection(dataItems);
        }
    }
    toggleRowSelection(dataItem, event = null) {
        if (this.isRowSelectionDisabled(dataItem)) {
            return false;
        }
        const dataItemToToggleKey = this.getPrimaryKey(dataItem);
        const oldSelection = this.getRowSelectionArray().slice();
        let newSelection = [];
        let addedToSelection = false;
        if (this.isMultipleSelectionMode()) {
            let hasRemovedDataItem = false;
            oldSelection.forEach(di => {
                if (this.getPrimaryKey(di) === dataItemToToggleKey) {
                    hasRemovedDataItem = true;
                }
                else {
                    newSelection.push(di);
                }
            });
            addedToSelection = !hasRemovedDataItem;
            if (addedToSelection) {
                newSelection.push(dataItem);
            }
        }
        else {
            const shouldRemoveDataItem = oldSelection.some(di => this.getPrimaryKey(di) === dataItemToToggleKey);
            addedToSelection = !shouldRemoveDataItem;
            if (addedToSelection) {
                newSelection = [dataItem];
            }
        }
        this._updateRowSelection(newSelection);
        if (addedToSelection) {
            this.onRowSelect.emit({ originalEvent: event, index: null, data: dataItem, type: 'row' });
        }
        else {
            this.onRowUnselect.emit({ originalEvent: event, index: null, data: dataItem, type: 'row' });
        }
        return addedToSelection;
    }
    removeFromRowSelection(dataItems) {
        if (dataItems.length === 0) {
            return;
        }
        const oldSelection = this.getRowSelectionArray();
        const newSelection = [];
        oldSelection.forEach(di => {
            const selectedDiKey = this.getPrimaryKey(di);
            for (const item of dataItems) {
                const tempDiKey = this.getPrimaryKey(item);
                if (selectedDiKey === tempDiKey) {
                    return;
                }
            }
            newSelection.push(di);
        });
        this._updateRowSelection(newSelection);
    }
    // TODO: what if selected row is disabled for selection
    unselectAllSelected() {
        this._updateRowSelection([]);
    }
    onToogleGroupedRowsSelection(checked, rows) {
        const dataItemsToChangeSelection = this.getSelectableRowsItems(rows);
        if (checked) {
            this.addToRowSelection(dataItemsToChangeSelection);
        }
        else {
            this.removeFromRowSelection(dataItemsToChangeSelection);
        }
    }
    handleHeaderCheckboxToggle(event) {
        this.onHeaderCheckboxToggle.emit({
            originalEvent: event.originalEvent,
            checked: event.checked,
            eventSource: event.eventSource,
            filters: event.filters,
            globalFilter: event.globalFilter
        });
        this.allGroupedRowsSelection.emit({
            rowsData: this.getRowSelectionArray(),
            selected: event.checked,
        });
    }
    /* Selection feature END */
    /* ------------------------------------------------------------------------------------------------ */
    /* Row reordering START */
    onReordarableRowMouseDown(elem, isGroup) {
        if (!isGroup) {
            this.setColumnsWidth(elem);
        }
    }
    setColumnsWidth(row) {
        const theadElements = Array.from(this.el.nativeElement.querySelectorAll('tr th'));
        const currWidth = theadElements.map((elem) => elem.offsetWidth);
        const draggableRow = Array.from(row.cells);
        draggableRow.forEach((item, ind) => {
            this._renderer.setStyle(item, 'maxWidth', `${currWidth[ind]}px`);
            this._renderer.setStyle(item, 'width', `${currWidth[ind]}px`);
            if (this.bordered && item.classList.contains('at-data-cell')) {
                if (this.isRtl) {
                    this._renderer.setStyle(item, 'borderLeft', '1px solid #d9dada');
                }
                else {
                    this._renderer.setStyle(item, 'borderRight', '1px solid #d9dada');
                }
            }
        });
    }
    setColumnsWidthToAuto(row) {
        const draggableRow = Array.from(row.cells);
        draggableRow.forEach((item) => {
            this._renderer.setStyle(item, 'maxWidth', 'auto');
            this._renderer.setStyle(item, 'width', 'auto');
            if (this.bordered && item.classList.contains('at-data-cell')) {
                if (this.isRtl) {
                    this._renderer.removeStyle(item, 'borderLeft');
                }
                else {
                    this._renderer.removeStyle(item, 'borderRight');
                }
            }
        });
    }
    onCdkDropListSortedRow(event) {
        const currentRowData = event.item.data.rowData;
        const allCurrentRows = this.getAllCurrentRows();
        const indexOfRowData = allCurrentRows.findIndex(row => row === currentRowData);
        moveItemInArray(allCurrentRows, indexOfRowData, indexOfRowData + event.currentIndex - event.previousIndex);
    }
    onRowDragStarted(event) {
        this.rowDragStart.emit({ cdkDragStartEvent: event });
    }
    onRowDragDropped(event, elem) {
        this.rowDragDrop.emit({ cdkDragDropEvent: event });
        this.setColumnsWidthToAuto(elem);
    }
    onRowDragEnded(event) {
        this.rowDragEnd.emit({ cdkDragEndEvent: event });
    }
    onRowDragReleased(event) {
        this.rowDragRelease.emit({ cdkDragReleaseEvent: event });
    }
    /* Row reordering END */
    /* ------------------------------------------------------------------------------------------------ */
    /* Row editing START */
    getEditableClonedRow(dataItem) {
        return this.currentEditingRows[this.getPrimaryKey(dataItem)].editingDataItem;
    }
    isEditableColumn(column) {
        return trueOrNull(column.editable);
    }
    initRowEditing(dataItem) {
        this.currentEditingRows[this.getPrimaryKey(dataItem)] = {
            originalDataItem: Object.assign({}, dataItem),
            editingDataItem: Object.assign({}, dataItem),
            dataItemReference: dataItem,
        };
        this.initRowEdit(dataItem);
    }
    saveRowEditing(dataItem) {
        const id = this.getPrimaryKey(dataItem);
        const currentEditingRow = this.currentEditingRows[id];
        if (!currentEditingRow) {
            return;
        }
        const trData = this.dataRows.find(dataRow => dataRow.data.editing &&
            this.getPrimaryKey(dataRow.data.dataItem) === id);
        this.saveRowEdit(dataItem, trData.element.nativeElement);
        // saveRowEdit not always remove editing
        if (this.isRowEditing(dataItem)) {
            return;
        }
        delete this.currentEditingRows[id];
        merge(dataItem, currentEditingRow.editingDataItem);
        this.savedRowEditing.emit({ editingRow: currentEditingRow });
    }
    cancelRowEditing(dataItem) {
        const id = this.getPrimaryKey(dataItem);
        const currentEditingRow = this.currentEditingRows[id];
        if (!currentEditingRow) {
            return;
        }
        delete this.currentEditingRows[id];
        this.cancelRowEdit(dataItem);
        this.canceledRowEditing.emit({ editingRow: currentEditingRow });
    }
    onTableCellDoubleClick(rowData) {
        if (this.enableRowEditing) {
            this.initRowEditing(rowData);
        }
    }
    onTextfieldKeydown(dataItem, event) {
        const enableEditingButtons = this.getVisibleColumns()
            .some(column => this.getActionConfig(column) && this.getActionConfig(column).enableRowEditingButtons);
        if (!enableEditingButtons) {
            if (hasKeyboardKeyCode(event, 'Enter', ENTER)) {
                this.saveRowEditing(dataItem);
            }
            else if (hasKeyboardKeyCode(event, 'Escape', ESCAPE)) {
                this.cancelRowEditing(dataItem);
            }
        }
    }
    /* Row editing END */
    /* ------------------------------------------------------------------------------------------------ */
    /* Sorting START */
    getSortedDataRows() {
        const allRowsItems = this.getCurrentPageDisplayingRowsItems();
        const mapOfRows = new Map(allRowsItems.map((row, index) => [row, index]));
        return this.dataRows.toArray().sort((dataRow1, dataRow2) => {
            const index1 = mapOfRows.get(dataRow1.data.dataItem);
            const index2 = mapOfRows.get(dataRow2.data.dataItem);
            return index1 - index2;
        });
    }
    getColumnSortOrder(field) {
        if (this.sortMode === 'single') {
            return this.sortOrder;
        }
        const sortData = this.getSortMeta(field);
        return sortData ? sortData.order : null;
    }
    isColumnSortOrderAsc(field) {
        return this.getColumnSortOrder(field) === SortOrder.Asc;
    }
    isSortableColumn(column) {
        if (!this.sortable || column.actionsConfig) {
            return false;
        }
        const sortableCol = column.sortable;
        return trueOrNull(sortableCol);
    }
    isSortableRenderingColumn(renderingColumn) {
        return renderingColumn.columnsConfigs.some(column => this.isSortableColumn(column));
    }
    updateMultiSortMeta(multiSortMeta) {
        this.multiSortMeta = multiSortMeta;
        this._multiSortMeta = multiSortMeta;
        if (multiSortMeta === null) {
            if (this.lazy) {
                this._emitLazyLoadEvent(this.createLazyLoadMetadata(AdaptTableEventSource.MultipleSortChange));
            }
            this._emitOnSortForMultiSorting();
        }
        else {
            this.sortMultiple();
        }
    }
    onTableRefresh() {
        if (this.lazy) {
            this._emitLazyLoadEvent(this.createLazyLoadMetadata(AdaptTableEventSource.Refresh));
        }
    }
    setQuickFilter(value) {
        this.filterGlobal(value, this.toolbarConfig.quickFilterMatchMode || 'contains');
    }
    /* Sorting END */
    /* ------------------------------------------------------------------------------------------------ */
    _emitLazyLoadEvent(lazyLoadEvent) {
        this.onLazyLoad.emit(lazyLoadEvent);
    }
    _emitOnSortForMultiSorting() {
        this.onSort.emit({
            multisortmeta: this.multiSortMeta
        });
        this.getTableService().onSort(this.multiSortMeta);
    }
    _getColumnByField(columns, field) {
        return columns.find(column => column.field === field);
    }
    _autoScrollTopOnValueSourceChangeForNotLazy() {
        this.getTableService().valueSource$.pipe(takeUntil(this._destroyed$)).subscribe(() => {
            if (!this.lazy && this.autoScrollToTop) {
                this.tryScrollToTopTableBody();
            }
        });
    }
    _setHostClassHasNotScroll() {
        const hostEl = this.el.nativeElement;
        if (!hostEl.classList.contains(AdaptTableClasses.HasNotVerticalBodyOverflow)) {
            hostEl.classList.add(AdaptTableClasses.HasNotVerticalBodyOverflow);
        }
    }
    _updateRowSelection(selection) {
        if (this.isSingleSelectionMode()) {
            if (Array.isArray(selection)) {
                selection = selection.length ? selection[0] : null;
            }
        }
        else {
            // filter disabled items
            // TODO: maybe disallow rows deselecting and add to 'selection' var already selected and disabled rows
            selection = selection.filter(row => {
                const alreadyRowSelected = this.isRowSelected(row);
                return !this.isRowSelectionCheckboxDisabled(row) || alreadyRowSelected;
            });
            // check selection limit
            if (this.hasSelectionLimit && selection.length > this.selectionLimit) {
                selection = selection.slice(0, this.selectionLimit);
            }
        }
        this._selection = this._selection = selection;
        this.updateSelectionKeys();
        this.selectionChange.emit(selection);
        this.getTableService().onSelectionChange(this._selection);
    }
    _onTableMouseMoveDebounced(e) {
        if (this.suppressTooltip) {
            return;
        }
        const target = e.target;
        // While columns merged, there are 2 block with data where need to use tooltip. Added new class "at-tooltip-el" for that task.
        // TODO: Better to use element reference instead query by class name
        const cellTarget = target.closest('.at-tooltip-el');
        const isSameCell = this._lastTooltipTargetCell === cellTarget;
        if (cellTarget) {
            // Tooltip for data cell
            this._lastTooltipTargetCell = cellTarget;
            const tooltipValue = this._getCellTooltipData(cellTarget);
            if (tooltipValue && !isSameCell) {
                this._showTooltip(cellTarget, tooltipValue);
                return;
            }
        }
        else {
            // Tooltip for header cell
            // TODO: Better to use element reference instead query by class name
            const headerDataCellContainerEl = target.closest(`.${AdaptTableClasses.HeaderContainer}`);
            // TODO: Better to use element reference instead query by class name
            const headerDataCellTarget = target.closest(`.${AdaptTableClasses.HeaderDataCell} `);
            if (headerDataCellContainerEl && headerDataCellTarget) {
                // TODO: Better to use element reference instead query by class name
                const headerDataCellNameEl = headerDataCellContainerEl.querySelector(`.${AdaptTableClasses.HeaderTitle}`);
                this._lastTooltipTargetCell = headerDataCellTarget;
                const tooltipValue = this._getHeaderDataCellTooltipData(headerDataCellTarget, headerDataCellNameEl);
                if (tooltipValue) {
                    this._showTooltip(headerDataCellTarget, tooltipValue);
                    return;
                }
            }
        }
        this._lastTooltipTargetCell = null;
        this._hideTooltip();
    }
    _getCellTooltipData(cellTarget) {
        const mergedColumnField = cellTarget.getAttribute('data-merged-column-field');
        const tableCell = cellTarget.closest('td');
        const cellData = this.dataCells.find(dc => dc.element.nativeElement === tableCell);
        if (!cellData) {
            return null;
        }
        const column = mergedColumnField ?
            this._getColumnByField(cellData.data.renderingColumn.columnsConfigs, mergedColumnField) : cellData.data.column;
        const tooltipValue = getValueOrFunc(column.cellTooltip, cellData.data);
        if (tooltipValue) {
            return tooltipValue;
        }
        if (tooltipValue === false) {
            return null;
        }
        if (!HtmlUtils.hasShrunkText(cellTarget) && !this.alwaysShowCellTooltip) {
            return null;
        }
        return cellTarget.innerText || this.getColumnData(cellData.data.dataItem, column) || null;
    }
    _getHeaderDataCellTooltipData(headerDataCellEl, headerDataCellNameEl) {
        const dataHeaderCellData = this.dataHeaderCells.find(dc => dc.element.nativeElement === headerDataCellEl);
        if (!dataHeaderCellData) {
            return null;
        }
        const column = dataHeaderCellData.data.column;
        const tooltipValue = getValueOrFunc(column.headerTooltip);
        if (tooltipValue) {
            return tooltipValue;
        }
        if (tooltipValue === false) {
            return null;
        }
        if (!headerDataCellNameEl || !HtmlUtils.hasShrunkText(headerDataCellNameEl) && !this.alwaysShowHeaderTooltip) {
            return null;
        }
        return headerDataCellNameEl.innerText || column.header || null;
    }
    _showTooltip(target, content) {
        this.zone.run(() => {
            if (this.tooltipInitialDelayMs && !this._showedTooltipAfterGridMouseLeave) {
                this._showInstantiatedTooltipDelayed(target, content);
            }
            else {
                this._showInstantiatedTooltip(target, content);
            }
        });
    }
    _showInstantiatedTooltip(target, content) {
        var _a;
        // Don't show tooltip if moved mouse out of grid
        if (!this._lastTooltipTargetCell ||
            // if mouse leave viewport
            (this._lastGridMouseEvent.type === 'mouseleave' && !this._lastGridMouseEvent.relatedTarget) ||
            // if mouse leave current cell with tooltip or grid
            (this._lastGridMouseEvent.relatedTarget &&
                !this._lastTooltipTargetCell.contains(this._lastGridMouseEvent.relatedTarget))) {
            this._lastTooltipTargetCell = null;
            return;
        }
        // Don't show tooltip if body doesn't contain target
        if (!document.body.contains(target)) {
            return;
        }
        (_a = this._tooltipOverlayWithPortal) === null || _a === void 0 ? void 0 : _a.destroy();
        this._tooltipOverlayWithPortal = this._overlayService.openOverlayWithPortal(new ComponentPortal(AdaptTooltipComponent, null, this._injector), {
            origin: target,
            positionStrategy: 'connected',
            scrollStrategy: 'close',
            connectedPositions: [
                this._tooltipOverlayPlacements.top,
                this._tooltipOverlayPlacements.bottom,
                this._tooltipOverlayPlacements.left,
                this._tooltipOverlayPlacements.right
            ]
        });
        this._showedTooltipAfterGridMouseLeave = true;
        this._tooltipOverlayWithPortal.componentRef.instance.placement = 'auto';
        this._tooltipOverlayWithPortal.componentRef.instance.content = content;
        this._tooltipOverlayWithPortal.componentRef.instance.visible = true;
        this._tooltipOverlayWithPortal.componentRef.instance.customCls = this.tooltipClass;
        this._tooltipOverlayWithPortal.overlayRef.updatePosition();
        this.detectChangesForTooltip();
    }
    _hideTooltip() {
        var _a;
        (_a = this._tooltipOverlayWithPortal) === null || _a === void 0 ? void 0 : _a.destroy();
        this._tooltipOverlayWithPortal = null;
    }
    _onTableMouseLeave(event) {
        this._lastGridMouseEvent = event;
        this._showedTooltipAfterGridMouseLeave = false;
        this._hideTooltip();
    }
    _onTableMouseMove(e) {
        this._lastGridMouseEvent = e;
        const target = e.target;
        // Hide tooltip after moving mouse to another cell
        if (this._lastTooltipTargetCell && !this._lastTooltipTargetCell.contains(target)) {
            this._hideTooltip();
        }
    }
    _getCurrentFocusedCellData() {
        const activeElement = document.activeElement;
        return this._getCellData(activeElement);
    }
    _getCellData(targetElement) {
        if (!targetElement || !targetElement.matches('td')) {
            return null;
        }
        return this.dataCells.find(dataCell => dataCell.element.nativeElement === targetElement);
    }
    _enableKeyboardNavigation() {
        this.zone.runOutsideAngular(() => {
            fromEvent(this.el.nativeElement, 'keydown').pipe(takeUntil(this._destroyed$))
                .subscribe((e) => this._onTableKeydown(e));
        });
    }
    _onTableKeydown(event) {
        if (hasKeyboardKeyCode(event, 'ArrowDown', DOWN_ARROW, 'Down')) {
            this._focusOnCellByNavigation(event, 1, 0);
            return;
        }
        if (hasKeyboardKeyCode(event, 'ArrowUp', UP_ARROW, 'Up')) {
            this._focusOnCellByNavigation(event, -1, 0);
            return;
        }
        if (hasKeyboardKeyCode(event, 'ArrowLeft', LEFT_ARROW, 'Left')) {
            this._focusOnCellByNavigation(event, 0, -1);
            return;
        }
        if (hasKeyboardKeyCode(event, 'ArrowRight', RIGHT_ARROW, 'Right')) {
            this._focusOnCellByNavigation(event, 0, 1);
            return;
        }
        if (hasKeyboardKeyCode(event, ' ', SPACE, 'Spacebar')) {
            this._toggleRowSelectionOfFocusedCell(event);
            return;
        }
        if (hasKeyboardKeyCode(event, 'Enter', ENTER)) {
            this._initRowEditingOfFocusedCell();
        }
    }
    _onTableClick(event) {
        if (!this.enableRowEditing) {
            return;
        }
        const target = event.target;
        const clickedCell = target.closest('td.at-data-cell');
        const clickedCellData = this._getCellData(clickedCell);
        if (clickedCellData && this.isRowEditing(clickedCellData.data.dataItem)) {
            return;
        }
        this._saveAllEditingRows();
    }
    _initRowEditingOfFocusedCell() {
        let currentFocusedCellData;
        if (!this.enableRowEditing || !(currentFocusedCellData = this._getCurrentFocusedCellData())) {
            return;
        }
        if (this.isRowEditing(currentFocusedCellData.data.dataItem)) {
            this.saveRowEditing(currentFocusedCellData.data.dataItem);
        }
        else {
            this._saveAllEditingRows();
            this.initRowEditing(currentFocusedCellData.data.dataItem);
        }
    }
    _saveAllEditingRows() {
        for (const key in this.currentEditingRows) {
            if (Object.prototype.hasOwnProperty.call(this.currentEditingRows, key)) {
                this.saveRowEditing(this.currentEditingRows[key].dataItemReference);
            }
        }
    }
    _toggleRowSelectionOfFocusedCell(event) {
        const currentFocusedCellData = this._getCurrentFocusedCellData();
        if (currentFocusedCellData) {
            event.preventDefault();
        }
        else {
            return;
        }
        if (!this.hasSelection) {
            return;
        }
        const addedToSelection = this.toggleRowSelection(currentFocusedCellData.data.dataItem, event);
        if (addedToSelection) {
            this.lastSelectedRowId = this.getPrimaryKey(currentFocusedCellData.data.dataItem);
        }
    }
    _focusOnCellByNavigation(event, rowNavigate, cellNavigate) {
        const currentFocusedCellData = this._getCurrentFocusedCellData();
        if (!currentFocusedCellData) {
            return;
        }
        const rowElemOfFocusedCell = currentFocusedCellData.element.nativeElement.closest('tr');
        if (!rowElemOfFocusedCell) {
            return;
        }
        const dataRows = this.getSortedDataRows();
        const dataRowIndex = dataRows.findIndex(dr => dr.element.nativeElement === rowElemOfFocusedCell);
        const nextDataRowForFocus = dataRows[dataRowIndex + rowNavigate];
        if (dataRowIndex !== -1 && nextDataRowForFocus) {
            let indexOfFocusedCellInRow = Array.prototype.findIndex.call(rowElemOfFocusedCell.children, (td) => td === currentFocusedCellData.element.nativeElement);
            const rowChildren = nextDataRowForFocus.element.nativeElement.children;
            indexOfFocusedCellInRow += cellNavigate;
            indexOfFocusedCellInRow = indexOfFocusedCellInRow < rowChildren.length ?
                indexOfFocusedCellInRow : rowChildren.length - 1;
            if (indexOfFocusedCellInRow === -1) {
                indexOfFocusedCellInRow = 0;
            }
            if (rowChildren.length > 0) {
                rowChildren[indexOfFocusedCellInRow].focus();
                event.preventDefault();
            }
        }
    }
    _hasCellFocus(element) {
        return document.activeElement === element;
    }
    _getBusyConfig() {
        return {
            busy: null,
            backdrop: true,
            sticky: true,
            message: '',
            loaderType: 'section',
        };
    }
    _hasAllChildItemsDisabledForSelection(grd) {
        const enabledItems = this.getSelectableRowsItems([grd]);
        return !enabledItems.length;
    }
    // For the "action" columns set default with if it has not been passed.
    // The width calculated by the finding max width from all action columns
    _recalculateActionColWidth() {
        var _a, _b;
        if (((_a = this.actionColElements) === null || _a === void 0 ? void 0 : _a.length) && isNil((_b = this.columns.find(col => col.actionsConfig)) === null || _b === void 0 ? void 0 : _b.width)) {
            this.zone.onStable.asObservable()
                .pipe(debounceTime(100), take(1), takeUntil(this._destroyed$))
                .subscribe(() => {
                this.zone.runOutsideAngular(() => {
                    this.setDefaultActionColWidth();
                });
            });
        }
    }
}
AdaptTableComponent.LAST_TABLE_INSTANCE_ID = 0;
AdaptTableComponent.ɵfac = function AdaptTableComponent_Factory(t) { return new (t || AdaptTableComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.TableService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.FilterService), i0.ɵɵdirectiveInject(i3.Directionality), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i4.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i4.AdaptTranslateService), i0.ɵɵdirectiveInject(i5.AdaptTableDeprecationMiddleware), i0.ɵɵdirectiveInject(i4.AdaptOverlayService), i0.ɵɵdirectiveInject(i0.Injector)); };
AdaptTableComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptTableComponent, selectors: [["adapt-table"]], viewQuery: function AdaptTableComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
        i0.ɵɵviewQuery(_c1, 5);
        i0.ɵɵviewQuery(_c2, 7, ViewContainerRef);
        i0.ɵɵviewQuery(_c3, 7, ViewContainerRef);
        i0.ɵɵviewQuery(_c4, 7);
        i0.ɵɵviewQuery(_c5, 7);
        i0.ɵɵviewQuery(_c6, 5);
        i0.ɵɵviewQuery(_c7, 5);
        i0.ɵɵviewQuery(_c8, 7);
        i0.ɵɵviewQuery(_c9, 7);
        i0.ɵɵviewQuery(_c10, 7);
        i0.ɵɵviewQuery(_c11, 7);
        i0.ɵɵviewQuery(_c12, 7);
        i0.ɵɵviewQuery(_c13, 5, AdaptDataDirective);
        i0.ɵɵviewQuery(_c14, 5, AdaptDataDirective);
        i0.ɵɵviewQuery(_c15, 5, AdaptDataDirective);
        i0.ɵɵviewQuery(_c16, 5, ElementRef);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.emptyStateTdEl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.toolbarComponent = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tooltipViewContainerRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.infiniteScrollingLoaderContainerEl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableContainer = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableInnerContainer = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableHeader = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.nonScrollableTable = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableBodyTemplateRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableHeaderTemplateRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableColgroupTemplateRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tableEmptyMessageTemplateRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.rowExpansionTemplate = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dataRows = _t);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dataCells = _t);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dataHeaderCells = _t);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.actionColElements = _t);
    } }, hostVars: 18, hostBindings: function AdaptTableComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("adapt-grid-bordered", ctx.bordered)("adapt-table-pageable", ctx.paginator)("adapt-table--striped", ctx.striped)("adapt-grid", ctx.mainClass)("adapt-table", ctx.adaptTableClass)("adapt-table-scrollable", ctx.scrollableClass)("adapt-table-not-scrollable", ctx.notScrollableClass)("adapt-table--empty-state", ctx.isEmptyState)("adapt-grid--loading", ctx.loading);
    } }, inputs: { sortable: "sortable", filterable: "filterable", triggerableFilters: "triggerableFilters", explicitSearchBtn: "explicitSearchBtn", enableReorderableRows: "enableReorderableRows", suppressTooltip: "suppressTooltip", toolbarConfig: "toolbarConfig", dataColumnsColsTemplate: "dataColumnsColsTemplate", dataColumnsHeaderTemplate: "dataColumnsHeaderTemplate", dataColumnsDataCellsTemplate: "dataColumnsDataCellsTemplate", headerGroupsTemplate: "headerGroupsTemplate", alwaysShowHeaderTooltip: "alwaysShowHeaderTooltip", alwaysShowCellTooltip: "alwaysShowCellTooltip", expandedCellClass: "expandedCellClass", expandedGroupsKeys: "expandedGroupsKeys", nestedGroupPadding: "nestedGroupPadding", expandindCellInitialPadding: "expandindCellInitialPadding", groupValueDataCellTemplate: "groupValueDataCellTemplate", tooltipInitialDelayMs: "tooltipInitialDelayMs", tooltipClass: "tooltipClass", rowsCustomClass: "rowsCustomClass", paginatorAlign: "paginatorAlign", hasEmptyState: "hasEmptyState", enableInfiniteScrolling: "enableInfiniteScrolling", updateFirstColumnWidth: "updateFirstColumnWidth", busyConfig: "busyConfig", defaultFiltersMatchMode: "defaultFiltersMatchMode", wrapCellText: "wrapCellText", minBufferPx: "minBufferPx", maxBufferPx: "maxBufferPx", testID: "testID", headerSelectionMode: "headerSelectionMode", disabledSelectedRowsCount: "disabledSelectedRowsCount", disabledNotSelectedRowsCount: "disabledNotSelectedRowsCount", disabledSelectedFilteredRowsCount: "disabledSelectedFilteredRowsCount", disabledNotSelectedFilteredRowsCount: "disabledNotSelectedFilteredRowsCount", selectedFilteredRowsCount: "selectedFilteredRowsCount", totalRecordsInGroup: "totalRecordsInGroup", disableRowSelection: "disableRowSelection", nestingStructureData: "nestingStructureData", nestingKey: "nestingKey", enableRowEditing: "enableRowEditing", autoScrollToTop: "autoScrollToTop", paginationTexts: "paginationTexts", toolbarTexts: "toolbarTexts", tableTexts: "tableTexts", filtersTexts: "filtersTexts", headerCellMenuTexts: "headerCellMenuTexts", texts: "texts", loadingMore: "loadingMore", mergeColumns: "mergeColumns", disabledRowSelectionResolver: "disabledRowSelectionResolver", allowColumnReorderingResolver: "allowColumnReorderingResolver", disableRowExpandingResolver: "disableRowExpandingResolver", rowAriaDataResolver: "rowAriaDataResolver", tableWidthConfig: "tableWidthConfig", expandedRowTemplate: "expandedRowTemplate", isRefreshingRowData: "isRefreshingRowData", value: "value", bordered: "bordered", paginator: "paginator", striped: "striped", loading: "loading" }, outputs: { onLazyLoad: "onLazyLoad", rowDataRefresh: "rowDataRefresh", savedRowEditing: "savedRowEditing", canceledRowEditing: "canceledRowEditing", groupSelection: "groupSelection", allGroupedRowsSelection: "allGroupedRowsSelection", groupExpansion: "groupExpansion", columnsVisibilityChange: "columnsVisibilityChange", rowDragStart: "rowDragStart", rowDragRelease: "rowDragRelease", rowDragEnd: "rowDragEnd", rowDragDrop: "rowDragDrop", export: "export", toolbarPopupAnimationDone: "toolbarPopupAnimationDone" }, features: [i0.ɵɵProvidersFeature([TableService]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 88, vars: 39, consts: [[3, "ngClass"], ["cdkDropList", "", 1, "at-table-primeng-component", 3, "ngClass", "cdkDropListData", "cdkDropListDisabled", "cdkDropListSorted"], [3, "ngStyle", "ngClass"], ["container", ""], ["class", "ui-table-loading ui-widget-overlay", 4, "ngIf"], ["class", "ui-table-loading-content", 4, "ngIf"], [3, "config", "texts", 4, "ngIf"], [1, "ui-table-container", 3, "ngClass"], ["tableContainer", ""], [1, "h-100", 3, "ngStyle"], ["tableInnerContainer", ""], ["class", "ui-table-wrapper", 4, "ngIf"], ["class", "ui-table-scrollable-wrapper", 3, "adaptResize", "elementResize", 4, "ngIf"], ["class", "ui-table-container-loader", 3, "ngStyle", 4, "ngIf"], [3, "rows", "first", "totalRecords", "pageLinkSize", "alwaysShow", "rowsPerPageOptions", "dropdownAppendTo", "currentPageReportTemplate", "showCurrentPageReport", "texts", "paginatorAlign", "ngClass", "onPageChange", 4, "ngIf"], ["class", "ui-column-resizer-helper ui-state-highlight", "style", "display:none;", 4, "ngIf"], ["class", "pi pi-arrow-down ui-table-reorder-indicator-up", "style", "display:none;", 4, "ngIf"], ["class", "pi pi-arrow-up ui-table-reorder-indicator-down", "style", "display:none;", 4, "ngIf"], ["class", "full-loading-wrap", 3, "ngBusy", "adaptRadarDisableEventSending", 4, "ngIf"], ["tooltipContainerEl", ""], ["infiniteScrollingLoaderContainerEl", ""], ["tableColgroupTemplateRef", ""], ["tableHeaderTemplateRef", ""], ["headerMultipleSelectionTemplate", ""], ["headerControlsTemplate", ""], ["tableBodyTemplateRef", ""], ["rowExpansionTemplate", ""], ["tableEmptyMessageTemplateRef", ""], ["groupValueDataCellDefTemplate", ""], ["dataCellDefTemplate", ""], ["editDataCellDefTemplate", ""], ["dataCellTemplate", ""], [1, "ui-table-loading", "ui-widget-overlay"], [1, "ui-table-loading-content"], [3, "config", "texts"], ["toolbarComponent", ""], [1, "ui-table-wrapper"], ["role", "grid", 3, "ngClass", "ngStyle"], ["table", ""], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "ui-table-thead"], ["tableHeader", ""], [1, "ui-table-tbody", 3, "pTableBody", "pTableBodyTemplate"], ["class", "ui-table-tfoot", 4, "ngIf"], [1, "ui-table-tfoot"], [1, "ui-table-scrollable-wrapper", 3, "adaptResize", "elementResize"], ["class", "ui-table-scrollable-view ui-table-frozen-view", 3, "pScrollableView", "frozen", "ngStyle", "scrollHeight", 4, "ngIf"], [1, "ui-table-scrollable-view", "w-100", 3, "pScrollableView", "frozen", "scrollHeight", "ngStyle"], [1, "ui-table-scrollable-view", "ui-table-frozen-view", 3, "pScrollableView", "frozen", "ngStyle", "scrollHeight"], [1, "ui-table-container-loader", 3, "ngStyle"], [3, "rows", "first", "totalRecords", "pageLinkSize", "alwaysShow", "rowsPerPageOptions", "dropdownAppendTo", "currentPageReportTemplate", "showCurrentPageReport", "texts", "paginatorAlign", "ngClass", "onPageChange"], [1, "ui-column-resizer-helper", "ui-state-highlight", 2, "display", "none"], ["resizeHelper", ""], [1, "pi", "pi-arrow-down", "ui-table-reorder-indicator-up", 2, "display", "none"], ["reorderIndicatorUp", ""], [1, "pi", "pi-arrow-up", "ui-table-reorder-indicator-down", 2, "display", "none"], ["reorderIndicatorDown", ""], [1, "full-loading-wrap", 3, "ngBusy", "adaptRadarDisableEventSending"], ["class", "at-reordarable-cell", 4, "ngIf"], ["class", "at-radiobutton-cell", 4, "ngIf"], ["class", "at-expansion-cell", 4, "ngIf"], ["class", "adapt-selection-cell", 4, "ngIf"], [3, "ngIf", "ngIfElse"], ["dataColumnsColsDefTemplate", ""], [1, "at-reordarable-cell"], [1, "at-radiobutton-cell"], [1, "at-expansion-cell"], [1, "adapt-selection-cell"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "at-col", 3, "ngStyle", 4, "ngIf"], ["class", "at-col at-action-col", 3, "ngStyle", 4, "ngIf"], [1, "at-col", 3, "ngStyle"], ["colEl", ""], [1, "at-col", "at-action-col", 3, "ngStyle"], ["actionColElement", ""], [3, "ngIf"], [1, "at-header-row"], ["dataColumnsHeaderDefTemplate", ""], [3, "ngTemplateOutlet"], ["pResizableColumn", "", "pReorderableColumn", "", 3, "pResizableColumnDisabled", "pReorderableColumnDisabled", "class", "adaptFrozen", "adaptData", "ngClass", "columnResized", 4, "ngIf"], ["pResizableColumn", "", "pReorderableColumn", "", 3, "pResizableColumnDisabled", "pReorderableColumnDisabled", "class", "adaptData", "ngClass", "columnResized", 4, "ngIf"], ["pResizableColumn", "", "pReorderableColumn", "", 3, "pResizableColumnDisabled", "pReorderableColumnDisabled", "adaptFrozen", "adaptData", "ngClass", "columnResized"], ["dataHeaderCell", ""], [3, "renderingColumn", "index", "texts"], ["pResizableColumn", "", "pReorderableColumn", "", 3, "pResizableColumnDisabled", "pReorderableColumnDisabled", "adaptData", "ngClass", "columnResized"], [3, "texts", "headerCheckboxToggle", 4, "ngIf"], ["type", "button", "class", "at-group-selection-unselect-all d-icon-cross_adapt btn", 3, "placement", "adaptRadarDisableEventSending", "adaptTooltip", "click", 4, "ngIf"], [3, "texts", "headerCheckboxToggle"], ["type", "button", 1, "at-group-selection-unselect-all", "d-icon-cross_adapt", "btn", 3, "placement", "adaptRadarDisableEventSending", "adaptTooltip", "click"], ["class", "at-header-cell at-reordarable-cell", 3, "adaptFrozen", 4, "ngIf"], ["class", "at-header-cell at-radiobutton-cell", 3, "adaptFrozen", 4, "ngIf"], ["class", "at-header-cell at-expansion-cell", 3, "adaptFrozen", 4, "ngIf"], ["class", "at-header-cell adapt-selection-cell", 3, "adaptFrozen", "ngClass", 4, "ngIf"], [1, "at-header-cell", "at-reordarable-cell", 3, "adaptFrozen"], [1, "at-header-cell", "at-radiobutton-cell", 3, "adaptFrozen"], [1, "at-header-cell", "at-expansion-cell", 3, "adaptFrozen"], [1, "at-header-cell", "adapt-selection-cell", 3, "adaptFrozen", "ngClass"], [4, "ngTemplateOutlet"], ["cdkDrag", "", "cdkDragLockAxis", "y", "class", "at-row at-group-row", 3, "cdkDragData", "ngClass", "cdkDragStarted", "cdkDragDropped", "cdkDragEnded", "cdkDragReleased", 4, "ngIf", "ngIfElse"], ["dataRowTemplate", ""], ["cdkDrag", "", "cdkDragLockAxis", "y", 1, "at-row", "at-group-row", 3, "cdkDragData", "ngClass", "cdkDragStarted", "cdkDragDropped", "cdkDragEnded", "cdkDragReleased"], ["groupRow", ""], ["cdkDragHandle", "", "class", "at-cell at-reordarable-cell p-start-3", 3, "mousedown", 4, "ngIf"], ["class", "at-cell at-radiobutton-cell", 4, "ngIf"], [1, "at-expansion-cell", "at-cell", 3, "ngStyle"], ["expansionCell", ""], ["type", "button", "role", "button", 1, "expansion-btn", 3, "click"], ["aria-hidden", "true", "xmlns", "http://www.w3.org/2000/svg", "width", "6", "height", "10", "viewBox", "0 0 7 11", "fill", "currentColor", 1, "at-expansion-icon", "d-icon-p", 3, "ngClass"], ["d", "M1.9,0L0.6,1.2l4.2,4.3L0.6,9.8L1.9,11l5.5-5.5L1.9,0z"], [1, "sr-only"], ["class", "adapt-selection-cell at-cell", 3, "ngStyle", 4, "ngIf"], [1, "at-cell", 3, "ngStyle"], ["cdkDragHandle", "", 1, "at-cell", "at-reordarable-cell", "p-start-3", 3, "mousedown"], ["class", "d-icon-dots adapt-list-drag", 4, "ngIf"], [1, "d-icon-dots", "adapt-list-drag"], [1, "at-cell", "at-radiobutton-cell"], [1, "adapt-selection-cell", "at-cell", 3, "ngStyle"], [1, "checkbox-inline", "at-group-selection-checkbox", 3, "ngModel", "adaptRadarDisableEventSending", "indeterminate", "disabled", "ariaLabel", "ngModelChange"], ["cdkDrag", "", "cdkDragLockAxis", "y", 1, "at-row", "at-data-row", 3, "pEditableRow", "adaptData", "ngClass", "cdkDragData", "cdkDragStarted", "cdkDragDropped", "cdkDragEnded", "cdkDragReleased"], ["dataRow", ""], ["cdkDragHandle", "", "class", "at-cell at-reordarable-cell p-start-3", 3, "adaptFrozen", "mousedown", 4, "ngIf"], ["class", "at-cell at-radiobutton-cell", 3, "adaptFrozen", 4, "ngIf"], ["class", "at-expansion-cell at-cell", 3, "ngStyle", "ngClass", "adaptFrozen", 4, "ngIf"], ["class", "adapt-selection-cell at-cell", 3, "ngStyle", "adaptFrozen", 4, "ngIf"], ["dataColumnsDataCellsDefTemplate", ""], [4, "ngIf"], ["cdkDragHandle", "", 1, "at-cell", "at-reordarable-cell", "p-start-3", 3, "adaptFrozen", "mousedown"], [1, "at-cell", "at-radiobutton-cell", 3, "adaptFrozen"], [1, "at-radiobutton", 3, "name", "adaptRadarDisableEventSending", "value", "checked", "label", "ariaLabel", "disabled", "click"], [1, "at-expansion-cell", "at-cell", 3, "ngStyle", "ngClass", "adaptFrozen"], ["type", "button", "class", "expansion-btn", 3, "pRowToggler", 4, "ngIf"], ["type", "button", 1, "expansion-btn", 3, "pRowToggler"], ["d", "M1.9,0L0.6,1.2l4.2,4.3L0.6,9.8L1.9,11l5.5-5.5L1.9,0z", 1, "ui-clickable"], [1, "adapt-selection-cell", "at-cell", 3, "ngStyle", "adaptFrozen"], [1, "at-selection-checkbox", 3, "renderRowData", "value", "rowAriaDataResolver", "disabled"], ["class", "at-data-cell at-cell at-data-cell--simple at-tooltip-el", 3, "ngStyle", "adaptFrozen", "adaptData", "ngClass", "tabindex", "dblclick", 4, "ngIf"], ["class", "at-cell at-data-cell ad-data-cell--merged", 3, "ngStyle", "adaptData", "ngClass", "tabindex", "dblclick", 4, "ngIf"], [1, "at-data-cell", "at-cell", "at-data-cell--simple", "at-tooltip-el", 3, "ngStyle", "adaptFrozen", "adaptData", "ngClass", "tabindex", "dblclick"], ["dataCell", ""], [1, "at-cell", "at-data-cell", "ad-data-cell--merged", 3, "ngStyle", "adaptData", "ngClass", "tabindex", "dblclick"], ["class", "at-tooltip-el at-merged-column-data-cell", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "at-tooltip-el", "at-merged-column-data-cell"], [1, "at-row", "at-expansion-row"], [1, "at-cell-expanded", 3, "ngClass"], ["class", "at-empty-state-row", 4, "ngIf"], [1, "at-empty-state-row"], [1, "at-empty-state-cell"], ["emptyStateTdEl", ""], [3, "type", "adaptRadarDisableEventSending", "label"], [3, "column", "dataItem", "rowIndex", "expanded", "editing", "texts"], [1, "at-edit-input-wrap", 3, "size", "adaptRadarDisableEventSending", "ngModel", "ngModelChange", "keydown"], ["textfield", ""], ["dataCellDisplayingTemplate", ""], ["role", "group", 1, "btn-group", "d-flex"], ["type", "button", "adapt-button", "", "btn-type", "secondary", "size", "xtra-small", 1, "btn-reject", 3, "adaptRadarDisableEventSending", "click"], ["type", "button", "adapt-button", "", "btn-type", "secondary", "size", "xtra-small", 1, "btn-approve", 3, "adaptRadarDisableEventSending", "click"]], template: function AdaptTableComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵtext(1, "\n\n\n  ");
        i0.ɵɵelementStart(2, "div", 1);
        i0.ɵɵlistener("cdkDropListSorted", function AdaptTableComponent_Template_div_cdkDropListSorted_2_listener($event) { return ctx.onCdkDropListSortedRow($event); });
        i0.ɵɵtext(3, "\n    ");
        i0.ɵɵelementStart(4, "div", 2, 3);
        i0.ɵɵtext(6, "\n      ");
        i0.ɵɵtemplate(7, AdaptTableComponent_div_7_Template, 1, 0, "div", 4);
        i0.ɵɵtext(8, "\n      ");
        i0.ɵɵtemplate(9, AdaptTableComponent_div_9_Template, 4, 2, "div", 5);
        i0.ɵɵtext(10, "\n      ");
        i0.ɵɵtemplate(11, AdaptTableComponent_adapt_table_toolbar_11_Template, 2, 2, "adapt-table-toolbar", 6);
        i0.ɵɵtext(12, "\n\n      ");
        i0.ɵɵelementStart(13, "div", 7, 8);
        i0.ɵɵtext(15, "\n        ");
        i0.ɵɵelementStart(16, "div", 9, 10);
        i0.ɵɵtext(18, "\n          ");
        i0.ɵɵtemplate(19, AdaptTableComponent_div_19_Template, 18, 13, "div", 11);
        i0.ɵɵtext(20, "\n\n          ");
        i0.ɵɵtemplate(21, AdaptTableComponent_div_21_Template, 6, 8, "div", 12);
        i0.ɵɵtext(22, "\n\n          ");
        i0.ɵɵtemplate(23, AdaptTableComponent_div_23_Template, 1, 4, "div", 13);
        i0.ɵɵtext(24, "\n        ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(25, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(26, "\n\n      ");
        i0.ɵɵtemplate(27, AdaptTableComponent_adapt_paginator_27_Template, 2, 12, "adapt-paginator", 14);
        i0.ɵɵtext(28, "\n\n      ");
        i0.ɵɵtemplate(29, AdaptTableComponent_div_29_Template, 2, 0, "div", 15);
        i0.ɵɵtext(30, "\n\n      ");
        i0.ɵɵtemplate(31, AdaptTableComponent_span_31_Template, 2, 0, "span", 16);
        i0.ɵɵtext(32, "\n      ");
        i0.ɵɵtemplate(33, AdaptTableComponent_span_33_Template, 2, 0, "span", 17);
        i0.ɵɵtext(34, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(35, "\n\n    ");
        i0.ɵɵtemplate(36, AdaptTableComponent_div_36_Template, 1, 2, "div", 18);
        i0.ɵɵtext(37, "\n\n    ");
        i0.ɵɵelementContainer(38, null, 19);
        i0.ɵɵtext(40, "\n\n    ");
        i0.ɵɵelementContainer(41, null, 20);
        i0.ɵɵtext(43, "\n\n    ");
        i0.ɵɵtext(44, "\n    ");
        i0.ɵɵtemplate(45, AdaptTableComponent_ng_template_45_Template, 17, 6, "ng-template", null, 21, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(47, "\n\n    ");
        i0.ɵɵtext(48, "\n    ");
        i0.ɵɵtemplate(49, AdaptTableComponent_ng_template_49_Template, 13, 9, "ng-template", null, 22, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(51, "\n    ");
        i0.ɵɵtemplate(52, AdaptTableComponent_ng_template_52_Template, 6, 2, "ng-template", null, 23, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(54, "\n    ");
        i0.ɵɵtemplate(55, AdaptTableComponent_ng_template_55_Template, 9, 4, "ng-template", null, 24, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(57, "\n\n    ");
        i0.ɵɵtext(58, "\n    ");
        i0.ɵɵtemplate(59, AdaptTableComponent_ng_template_59_Template, 8, 2, "ng-template", null, 25, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(61, "\n\n    ");
        i0.ɵɵtext(62, "\n    ");
        i0.ɵɵtemplate(63, AdaptTableComponent_ng_template_63_Template, 9, 4, "ng-template", null, 26, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(65, "\n\n    ");
        i0.ɵɵtext(66, "\n    ");
        i0.ɵɵtemplate(67, AdaptTableComponent_ng_template_67_Template, 3, 1, "ng-template", null, 27, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(69, "\n\n    ");
        i0.ɵɵtext(70, "\n    ");
        i0.ɵɵtemplate(71, AdaptTableComponent_ng_template_71_Template, 1, 1, "ng-template", null, 28, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(73, "\n\n    ");
        i0.ɵɵtext(74, "\n    ");
        i0.ɵɵtemplate(75, AdaptTableComponent_ng_template_75_Template, 5, 2, "ng-template", null, 29, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(77, "\n\n    ");
        i0.ɵɵtext(78, "\n    ");
        i0.ɵɵtemplate(79, AdaptTableComponent_ng_template_79_Template, 5, 3, "ng-template", null, 30, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(81, "\n\n    ");
        i0.ɵɵtext(82, "\n    ");
        i0.ɵɵtemplate(83, AdaptTableComponent_ng_template_83_Template, 12, 3, "ng-template", null, 31, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(85, "\n\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(86, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(87, "\n");
    } if (rf & 2) {
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction4(21, _c26, ctx.scrollable && ctx.scrollHeight === "flex", ctx.paginator, ctx.toolbarConfig, ctx.reorderableColumns));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(26, _c27, ctx.enableReorderableRows, ctx.wrapCellText))("cdkDropListData", ctx.getAllCurrentRows())("cdkDropListDisabled", !ctx.enableReorderableRows);
        i0.ɵɵadvance(2);
        i0.ɵɵclassMap(ctx.styleClass);
        i0.ɵɵproperty("ngStyle", ctx.style)("ngClass", i0.ɵɵpureFunction5(29, _c28, ctx.responsive, ctx.resizableColumns, ctx.resizableColumns && ctx.columnResizeMode === "fit", ctx.rowHover || ctx.selectionMode, ctx.autoLayout));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.loading && ctx.showLoader);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.loading && ctx.showLoader);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.toolbarConfig);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(35, _c29, ctx.tableWidthConfig));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(37, _c30, ctx.getTableWidth(ctx.tableWidthConfig, ctx.isMobile)));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", !ctx.scrollable);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.scrollable);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.isRefreshingRowData);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", ctx.paginator);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.resizableColumns);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.reorderableColumns);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.reorderableColumns);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.canShowFullLoader);
    } }, encapsulation: 2, data: { animation: [
            trigger('dataRefreshAnimation', [
                transition('void => *', [
                    style({ transform: 'scaleX(.8)', opacity: '0' }),
                    animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ transform: 'scaleX(1)', opacity: '1' }))
                ]),
                transition('* => void', [
                    style({ opacity: '1' }),
                    animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionOut}`, style({ opacity: '0' }))
                ]),
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptTableComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-table',
                templateUrl: './adapt-table.component.html',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.Default,
                providers: [TableService],
                animations: [
                    trigger('dataRefreshAnimation', [
                        transition('void => *', [
                            style({ transform: 'scaleX(.8)', opacity: '0' }),
                            animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ transform: 'scaleX(1)', opacity: '1' }))
                        ]),
                        transition('* => void', [
                            style({ opacity: '1' }),
                            animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionOut}`, style({ opacity: '0' }))
                        ]),
                    ])
                ]
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i1.TableService }, { type: i0.ChangeDetectorRef }, { type: i2.FilterService }, { type: i3.Directionality }, { type: i0.Renderer2 }, { type: i4.AdaptDeviceDetectionService }, { type: i4.AdaptTranslateService }, { type: i5.AdaptTableDeprecationMiddleware }, { type: i4.AdaptOverlayService }, { type: i0.Injector }]; }, { emptyStateTdEl: [{
            type: ViewChild,
            args: ['emptyStateTdEl', { static: false }]
        }], toolbarComponent: [{
            type: ViewChild,
            args: ['toolbarComponent', { static: false }]
        }], tooltipViewContainerRef: [{
            type: ViewChild,
            args: ['tooltipContainerEl', { read: ViewContainerRef, static: true }]
        }], infiniteScrollingLoaderContainerEl: [{
            type: ViewChild,
            args: ['infiniteScrollingLoaderContainerEl', { read: ViewContainerRef, static: true }]
        }], tableContainer: [{
            type: ViewChild,
            args: ['tableContainer', { static: true }]
        }], tableInnerContainer: [{
            type: ViewChild,
            args: ['tableInnerContainer', { static: true }]
        }], tableHeader: [{
            type: ViewChild,
            args: ['tableHeader', { static: false }]
        }], nonScrollableTable: [{
            type: ViewChild,
            args: ['table', { static: false }]
        }], tableBodyTemplateRef: [{
            type: ViewChild,
            args: ['tableBodyTemplateRef', { static: true }]
        }], tableHeaderTemplateRef: [{
            type: ViewChild,
            args: ['tableHeaderTemplateRef', { static: true }]
        }], tableColgroupTemplateRef: [{
            type: ViewChild,
            args: ['tableColgroupTemplateRef', { static: true }]
        }], tableEmptyMessageTemplateRef: [{
            type: ViewChild,
            args: ['tableEmptyMessageTemplateRef', { static: true }]
        }], rowExpansionTemplate: [{
            type: ViewChild,
            args: ['rowExpansionTemplate', { static: true }]
        }], dataRows: [{
            type: ViewChildren,
            args: ['dataRow', { read: AdaptDataDirective }]
        }], dataCells: [{
            type: ViewChildren,
            args: ['dataCell', { read: AdaptDataDirective }]
        }], dataHeaderCells: [{
            type: ViewChildren,
            args: ['dataHeaderCell', { read: AdaptDataDirective }]
        }], actionColElements: [{
            type: ViewChildren,
            args: ['actionColElement', { read: ElementRef }]
        }], sortable: [{
            type: Input
        }], filterable: [{
            type: Input
        }], triggerableFilters: [{
            type: Input
        }], explicitSearchBtn: [{
            type: Input
        }], enableReorderableRows: [{
            type: Input
        }], suppressTooltip: [{
            type: Input
        }], toolbarConfig: [{
            type: Input
        }], dataColumnsColsTemplate: [{
            type: Input
        }], dataColumnsHeaderTemplate: [{
            type: Input
        }], dataColumnsDataCellsTemplate: [{
            type: Input
        }], headerGroupsTemplate: [{
            type: Input
        }], alwaysShowHeaderTooltip: [{
            type: Input
        }], alwaysShowCellTooltip: [{
            type: Input
        }], expandedCellClass: [{
            type: Input
        }], expandedGroupsKeys: [{
            type: Input
        }], nestedGroupPadding: [{
            type: Input
        }], expandindCellInitialPadding: [{
            type: Input
        }], groupValueDataCellTemplate: [{
            type: Input
        }], tooltipInitialDelayMs: [{
            type: Input
        }], tooltipClass: [{
            type: Input
        }], rowsCustomClass: [{
            type: Input
        }], paginatorAlign: [{
            type: Input
        }], hasEmptyState: [{
            type: Input
        }], enableInfiniteScrolling: [{
            type: Input
        }], updateFirstColumnWidth: [{
            type: Input
        }], busyConfig: [{
            type: Input
        }], defaultFiltersMatchMode: [{
            type: Input
        }], wrapCellText: [{
            type: Input
        }], minBufferPx: [{
            type: Input
        }], maxBufferPx: [{
            type: Input
        }], testID: [{
            type: Input
        }], headerSelectionMode: [{
            type: Input
        }], disabledSelectedRowsCount: [{
            type: Input
        }], disabledNotSelectedRowsCount: [{
            type: Input
        }], disabledSelectedFilteredRowsCount: [{
            type: Input
        }], disabledNotSelectedFilteredRowsCount: [{
            type: Input
        }], selectedFilteredRowsCount: [{
            type: Input
        }], totalRecordsInGroup: [{
            type: Input
        }], disableRowSelection: [{
            type: Input
        }], nestingStructureData: [{
            type: Input
        }], nestingKey: [{
            type: Input
        }], enableRowEditing: [{
            type: Input
        }], autoScrollToTop: [{
            type: Input
        }], paginationTexts: [{
            type: Input
        }], toolbarTexts: [{
            type: Input
        }], tableTexts: [{
            type: Input
        }], filtersTexts: [{
            type: Input
        }], headerCellMenuTexts: [{
            type: Input
        }], texts: [{
            type: Input
        }], loadingMore: [{
            type: Input
        }], mergeColumns: [{
            type: Input
        }], disabledRowSelectionResolver: [{
            type: Input
        }], allowColumnReorderingResolver: [{
            type: Input
        }], disableRowExpandingResolver: [{
            type: Input
        }], rowAriaDataResolver: [{
            type: Input
        }], tableWidthConfig: [{
            type: Input
        }], expandedRowTemplate: [{
            type: Input
        }], isRefreshingRowData: [{
            type: Input
        }], value: [{
            type: Input
        }], bordered: [{
            type: HostBinding,
            args: [`class.${AdaptTableClasses.Bordered}`]
        }, {
            type: Input
        }], paginator: [{
            type: HostBinding,
            args: [`class.${AdaptTableClasses.Pageable}`]
        }, {
            type: Input
        }], striped: [{
            type: HostBinding,
            args: [`class.${AdaptTableClasses.Striped}`]
        }, {
            type: Input
        }], onLazyLoad: [{
            type: Output
        }], rowDataRefresh: [{
            type: Output
        }], savedRowEditing: [{
            type: Output
        }], canceledRowEditing: [{
            type: Output
        }], groupSelection: [{
            type: Output
        }], allGroupedRowsSelection: [{
            type: Output
        }], groupExpansion: [{
            type: Output
        }], columnsVisibilityChange: [{
            type: Output
        }], rowDragStart: [{
            type: Output
        }], rowDragRelease: [{
            type: Output
        }], rowDragEnd: [{
            type: Output
        }], rowDragDrop: [{
            type: Output
        }], export: [{
            type: Output
        }], toolbarPopupAnimationDone: [{
            type: Output
        }], mainClass: [{
            type: HostBinding,
            args: [`class.${AdaptTableClasses.Main}`]
        }], adaptTableClass: [{
            type: HostBinding,
            args: [`class.${AdaptTableClasses.AdaptTable}`]
        }], scrollableClass: [{
            type: HostBinding,
            args: [`class.${AdaptTableClasses.Scrollable}`]
        }], notScrollableClass: [{
            type: HostBinding,
            args: [`class.${AdaptTableClasses.NotScrollable}`]
        }], isEmptyState: [{
            type: HostBinding,
            args: [`class.${AdaptTableClasses.IsEmptyState}`]
        }], loading: [{
            type: Input
        }, {
            type: HostBinding,
            args: [`class.${AdaptTableClasses.LoadingFullTable}`]
        }] }); })();
//# sourceMappingURL=adapt-table.component.js.map