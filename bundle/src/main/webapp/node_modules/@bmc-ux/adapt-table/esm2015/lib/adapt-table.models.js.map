{"version":3,"file":"adapt-table.models.js","sourceRoot":"","sources":["../../../../../libs/adapt-table/src/lib/adapt-table.models.ts"],"names":[],"mappings":"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","sourcesContent":["import {TemplateRef} from '@angular/core';\nimport {AdaptDataDirective} from './shared/adapt-data-directive';\nimport {FilterMetadata, SortMeta} from 'primeng/api';\nimport {\n  KeyValueObject,\n  ValueOrFunc2,\n  ValueOrFunc1,\n  StylesObject,\n  TooltipValue,\n  RxSelectOption,\n  SelectTexts,\n  RxSelectSettings,\n  AdaptDropdownDirective,\n  AdaptFocusMonitorService\n} from '@bmc-ux/adapt-angular';\nimport {CdkDragDrop, CdkDragEnd, CdkDragRelease, CdkDragStart} from '@angular/cdk/drag-drop';\n\n// TODO: Use Enum instead\nexport abstract class AdaptTableFilters {\n  static readonly SELECT_FILTER: PredefinedFilterType = 'selectFilter';\n  static readonly TEXT_FILTER: PredefinedFilterType = 'textFilter';\n\n  static readonly DEFAULT_FILTER: PredefinedFilterType = AdaptTableFilters.TEXT_FILTER;\n}\n\n/* Types */\n\n/**\n * Allowed filter types.\n * \"selectFilter\" - will render a select dropdown\n * \"textFilter\" - will render a text input\n */\nexport type PredefinedFilterType = 'selectFilter' | 'textFilter';\n\n/**\n * Describes data associated with a [dataKey]\n */\nexport type PrimaryKey = string | number;\n\n/**\n * Table [value] representation for non group case\n */\nexport type RowDataItem = KeyValueObject;\n\n/**\n * Table [value] representation for group and non group cases\n */\nexport type RowData<TModel = RowDataItem> = TModel | GroupedRowData<TModel>;\n\n/**\n * Represents the data from \"adaptData\" directive\n */\nexport type AdaptTableCellData = AdaptDataDirective<DataCellDirectiveParams, HTMLTableDataCellElement>;\n\n/**\n * Allowed variants to align table pagination\n */\nexport type AdaptPaginatorAlign = 'left' | 'right';\n\n\nexport type RowActionParams<T = RowDataItem> = DataCellTemplateParams<T>;\nexport type DataCellTooltipParams<T = RowDataItem> = DataCellTemplateParams<T>;\nexport type DataCellCustomClass<T = RowDataItem> = DataCellTemplateParams<T>;\nexport type DataCellCustomStyle<T = RowDataItem> = DataCellTemplateParams<T>;\n\n/* Enums */\n\n/**\n * The visibility priority of toolbar parts.\n * It is used to control which toolbar part will be hidden to the dropdown first in case there is no space for all of them.\n * The lowest number will be hidden last.\n */\nexport enum ToolbarItemsByPriority {\n  /**\n   * Global table search input\n   */\n  SEARCH = 0,\n\n  /**\n   * Selection limit that is based on \"selectionLimit\" property from the \"ToolbarConfig\"\n   */\n  SELECTION_LIMIT = 1,\n\n  /**\n   * Counter text(ex. \"Records from 1 to 10 of 23\")\n   */\n  COUNTER = 2,\n\n  /**\n   * Refresh button\n   */\n  REFRESH = 3,\n\n  /**\n   * Columns visibility control\n   */\n  VISIBLE_COLUMNS = 4,\n\n  /**\n   * Section for the custom filter(eg. for Advanced filter controlled by customer)\n   */\n  FILTER = 5,\n\n  /**\n   * Section for the custom filtering results\n   */\n  FILTER_RESULTS = 6,\n\n  /**\n   * Custom section from the left side\n   */\n  LEFT_CUSTOM = 7,\n\n  /**\n   * Custom section from the right side\n   */\n  RIGHT_CUSTOM = 8,\n\n  /**\n   * Export control\n   */\n  EXPORT = 9,\n}\n\n/**\n * Possible variants for the checkbox selection state\n */\nexport enum CheckboxState {\n  /**\n   * Row is not selected\n   */\n  Unselected = 0,\n\n  /**\n   * Row is selected\n   */\n  Selected = 1,\n\n  /**\n   * Some rows are selected. This is used to show the selection state of the group or table itself\n   */\n  Indeterminate = 2,\n}\n\n/**\n * Represents the event source type for the [lazy] table\n * Can be useful to differentiate between the event source inside (onLazyLoad) to provide different behavior\n */\nexport enum AdaptTableEventSource {\n  /**\n   * Triggered when the lazy load is triggered on initialization. Depending on the \"lazyLoadOnInit\" property\n   */\n  LazyOnInit = 'lazyOnInit',\n\n  /**\n   * Triggered when single sorting is happening\n   */\n  SingleSortChange = 'singleSortChange',\n\n  /**\n   * Triggered when multi sorting is happening\n   */\n  MultipleSortChange = 'multipleSortChange',\n\n  /**\n   * Triggered when filtering is happening\n   */\n  FilterChange = 'filterChange',\n\n  /**\n   * @deprecated Not used anymore\n   */\n  VirtualScroll = 'virtualScroll',\n\n  /**\n   * Triggered when the page is changed\n   */\n  PageChange = 'pageChange',\n\n  /**\n   * Triggered when table \"resetting\"\n   */\n  Reset = 'reset',\n\n  /**\n   * Triggered when the table data can be loaded(ex. when user scrolls to the bottom of the table)\n   */\n  LoadMore = 'loadMore',\n\n  /**\n   * Triggered when the table is refreshing(ex. user click on the toolbar refresh button)\n   */\n  Refresh = 'refresh'\n}\n\nexport enum FilterMatchMode {\n  /**\n   * Check that the data is starts with the filter value\n   */\n  startsWith = 'startsWith',\n\n  /**\n   * Check that the data contains filter value\n   */\n  contains = 'contains',\n\n  /**\n   * Check that the data is ends with the filter value\n   */\n  endsWith = 'endsWith',\n\n  /**\n   * Check that the data is equal to the filter value\n   * For the \"date\" type data comparing by the \"getTime\" method\n   * For all other types comparing by the \"toString\" method\n   */\n  equals = 'equals',\n\n  /**\n   * Check that the data is not equal to the filter value\n   * Opposite to \"equals\"\n   */\n  notEquals = 'notEquals',\n\n  /**\n   * Check that the data array contains the filter value by applying \"equals\" comparison from https://github.com/primefaces/primeng/blob/master/src/app/components/utils/objectutils.ts\n   */\n  in = 'in',\n\n  /**\n   * Check that the data is lower than the filter value\n   */\n  lt = 'lt',\n\n  /**\n   * Check that the data is lower than or equal to the filter value\n   */\n  lte = 'lte',\n\n  /**\n   * Check that the data is greater than the filter value\n   */\n  gt = 'gt',\n\n  /**\n   * Check that the data is greater than or equal to the filter value\n   */\n  gte = 'gte',\n}\n\n/**\n * Represents allowed sorting directions\n */\nexport enum SortOrder {\n  /**\n   * Sort in ascending order\n   */\n  Asc = 1,\n\n  /**\n   * Sort in descending order\n   */\n  Desc = -1,\n}\n\n/**\n * Represents allowed storage types\n */\nexport enum StorageType {\n  /**\n   * Local storage\n   */\n  Local = 'local',\n\n  /**\n   * Session storage\n   */\n  Session = 'session'\n}\n\n/**\n * Represents allowed sorting modes\n */\nexport enum SortMode {\n  /**\n   * Sort by single column\n   */\n  Single = 'single',\n\n  /**\n   * Sort by multiple columns\n   */\n  Multiple = 'multiple'\n}\n\n/**\n * Represents allowed column resize modes\n */\nexport enum ResizeMode {\n  /**\n   * Change only width of 2 sibling columns by increasing one column and decreasing the other one\n   */\n  Fit = 'fit',\n\n  /**\n   * Change width of one column only and also increase the width of the table itself\n   */\n  Expand = 'expand'\n}\n\n/**\n * Represents allowed column resize directions\n */\nexport enum ResizeDirection {\n  /**\n   * Resize column to the left\n   */\n  Left = 'left',\n\n  /**\n   * Resize column to the right\n   */\n  Right = 'right'\n}\n\n/**\n * List of html classes used in the table.\n *\n * Please be aware that class names can be changed so can't be used as constants while interacting with the table template\n */\nexport enum AdaptTableClasses {\n  /**\n   * Always applied to the table host element(<adapt-table>)\n   */\n  Main = 'adapt-grid',\n\n  /**\n   * Always applied to the table host element(<adapt-table>)\n   */\n  AdaptTable = 'adapt-table',\n\n  /**\n   * Applied to the table host element(<adapt-table>) when the table has border, [bordered] is set to true\n   */\n  Bordered = 'adapt-grid-bordered',\n\n  /**\n   * Applied to the table host element(<adapt-table>) when the table pagination is enabled, [paginator] is set to true\n   */\n  Pageable = 'adapt-table-pageable',\n\n  /**\n   * Applied to the table host element(<adapt-table>) when the table has scrollable body, [scrollable] is set to true\n   */\n  Scrollable = 'adapt-table-scrollable',\n\n  /**\n   * Applied to the table host element(<adapt-table>) when the table has striped rows, [striped] is set to true\n   */\n  Striped = 'adapt-table--striped',\n\n  /**\n   * Applied to the table host element(<adapt-table>) when the table is empty, [value] is null or an empty array\n   */\n  IsEmptyState = 'adapt-table--empty-state',\n\n  /**\n   * Applied to the table host element(<adapt-table>) when the table has no scrollable body, [scrollable] is set to false\n   */\n  NotScrollable = 'adapt-table-not-scrollable',\n\n  /**\n   * ???\n   */\n  HasNotVerticalBodyOverflow = 'adapt-table--has-not-overflow',\n\n  /**\n   * Applied to the table host element(<adapt-table>) when the table loading state is true, [loading] is set to true\n   */\n  LoadingFullTable = 'adapt-grid--loading',\n\n  /**\n   * Applied to the table cell element for the column with actions\n   */\n  ActionsCell = 'at-actions-cell',\n\n  /**\n   * Applied to the table cell element if column is editable\n   */\n  EditingCell = 'at-cell--editing',\n\n  /**\n   * Always applied to the table element inside the table header element\n   */\n  HeaderContainer = 'c-header-container',\n\n  /**\n   * Always applied to the table element inside the table header element\n   */\n  HeaderTitle = 'c-header__title',\n\n  /**\n   * Always applied to the table header element\n   */\n  HeaderDataCell = 'at-header-data-cell',\n\n  /**\n   * Always applied for scrollable body table parent container (in non-virtual scroll mode)\n   */\n  TableScrollableBody = 'ui-table-scrollable-body',\n\n  /**\n   * Always applied for \"cdk-virtual-scroll-viewport\" (in virtual scroll mode)\n   */\n  TableVirtualScrollableBody = 'ui-table-virtual-scrollable-body',\n\n  /**\n   * Always applied for scrollable header table parent container (in both modes, virtual scroll and non-virtual scroll)\n   */\n  TableScrollableHeader = 'ui-table-scrollable-header',\n\n  /**\n   * Always applied for scrollable footer table parent container (in both modes, virtual scroll and non-virtual scroll)\n   */\n  TableScrollableFooter = 'ui-table-scrollable-footer',\n\n  /**\n   * Always applied for scrollable body table element (in both modes, virtual scroll and non-virtual scroll)\n   */\n  TableScrollableBodyTable = 'ui-table-scrollable-body-table',\n\n  /**\n   * Always applied for scrollable header table element (in both modes, virtual scroll and non-virtual scroll)\n   */\n  TableScrollableHeaderTable = 'ui-table-scrollable-header-table',\n\n  /**\n   * Always applied for scrollable footer table element (in both modes, virtual scroll and non-virtual scroll)\n   */\n  TableScrollableFooterTable = 'ui-table-scrollable-footer-table'\n}\n\n/**\n * Represent if the column merged with other column or not\n */\nexport enum RenderingColumnType {\n  /**\n   * The column is not merged with other column\n   */\n  Simple = 1,\n\n  /**\n   * The column is merged with other column\n   */\n  Merged = 2\n}\n\nexport enum AdaptTableHeaderCheckboxToggleSource {\n  /**\n   * The source of the event is \"Select all\" item\n   */\n  SelectAll = 'selectAll',\n\n  /**\n   * The source of the event is \"Deselect all\" item\n   */\n  DeselectAll = 'deselectAll',\n\n  /**\n   * The source of the event is \"Select on page\" item\n   */\n  SelectOnPage = 'selectOnPage',\n\n  /**\n   * @deprecated since 12.18.0\n   * Not used anymore\n   */\n  SelectVisible = 'selectVisible',\n}\n\n/**\n * @deprecated since 12.18.0\n * Not used anymore\n */\nexport enum AdaptTableSelectionMachineState {\n  unselected = 'unselected',\n  selected = 'selected',\n  indeterminate = 'indeterminate'\n}\n\n\n/**\n * Allowed values for the [headerSelectionMode] input\n */\nexport enum AdaptTableHeaderSelectionMode {\n  /**\n   * Allows to use both type of selection: \"Select on page\" and \"Select all in table\"\n   */\n  Both = 'both',\n\n  /**\n   * Allows to use only \"Select on page\" type of selection\n   */\n  Chunk = 'chunk',\n\n  /**\n   * Allows to use only \"Select all in table\" type of selection\n   */\n  All = 'all',\n}\n\n/**\n * Allowed export formats\n */\nexport enum ExportType {\n  /**\n   * Export to CSV format\n   */\n  CSV = 'CSV',\n\n  /**\n   * Export to PDF format\n   */\n  PDF = 'PDF',\n}\n\n/* Interfaces */\n\n/**\n * Represents state of toolbar item\n */\nexport interface ToolbarItemContext {\n  /**\n   * Toolbar item visibility\n   */\n  hidden: boolean;\n\n  /**\n   * Toolbar item collapsed state\n   */\n  collapsed: boolean;\n}\n\n/**\n * Event type for the (export) Output\n */\nexport interface ExportEvent {\n  /**\n   * Export type format\n   */\n  type: ExportType;\n\n  /**\n   * Shows that only selected rows should be exported if set to true\n   */\n  selectionOnly?: boolean;\n}\n\nexport interface ExportTypeConfig {\n  /**\n   * Export type format\n   */\n  type: ExportType;\n}\n\nexport interface ExportConfig {\n  /**\n   * List of allowed export formats\n   */\n  exportTypes: ExportTypeConfig[];\n\n  /**\n   * Shows \"Export only selected\" menu if set to true\n   */\n  showExportForSelected?: boolean;\n\n  /**\n   * ???\n   */\n  exportSectionFixed?: boolean;\n}\n\n/**\n * Toolbar configuration for [toolbarConfig] input\n */\nexport interface ToolbarConfig {\n  /**\n   * Show/Hide toolbar refresh button\n   */\n  refreshButton?: boolean;\n\n  /**\n   * Show/Hide toolbar counter text(ex. \"Records from 1 to 10 of 23\")\n   */\n  counter?: boolean;\n\n  /**\n   * Custom template for toolbar counter text\n   */\n  counterTemplate?: TemplateRef<ImplicitTemplateParams<ToolbarItemContext>>;\n\n  /**\n   * Show/Hide toolbar search input\n   */\n  quickFilter?: boolean;\n\n  /**\n   * Use explicit search button\n   */\n  quickFilterTriggerable?: boolean;\n\n  /**\n   * @deprecated since 12.18.0\n   * Not used anymore\n   */\n  explicitSearchBtn?: boolean;\n\n  /**\n   * Show/Hide toolbar export control\n   */\n  export?: ExportConfig;\n\n  // TODO: Use FilterMatchMode instead of string\n  /**\n   * Match mode for the toolbar search\n   */\n  quickFilterMatchMode?: string;\n\n  /**\n   * Show/Hide custom filter section(eg. for Advanced filter controlled by customer)\n   */\n  filter?: boolean;\n\n  /**\n   * Custom template for toolbar filter section\n   */\n  filterTemplate?: TemplateRef<ImplicitTemplateParams<ToolbarItemContext>>;\n\n  /**\n   * Show/Hide toolbar filter results section\n   */\n  filterResults?: boolean;\n\n  // TODO: Add example for this one\n  /**\n   * Custom template for toolbar filter results section\n   */\n  filterResultsTemplate?: TemplateRef<ImplicitTemplateParams<ToolbarItemContext>>;\n\n  /**\n   * Show/Hide toolbar section on the left side\n   */\n  leftCustomSection?: boolean;\n\n  /**\n   * ???\n   */\n  leftCustomSectionFixed?: boolean;\n\n  /**\n   * Custom template for toolbar section on the left side\n   */\n  leftCustomSectionTemplate?: TemplateRef<ImplicitTemplateParams<ToolbarItemContext>>;\n\n  /**\n   * Show/Hide toolbar section on the right side\n   */\n  rightCustomSection?: boolean;\n\n  /**\n   * ???\n   */\n  rightCustomSectionFixed?: boolean;\n\n  /**\n   * Custom template for toolbar section on the right side\n   */\n  rightCustomSectionTemplate?: TemplateRef<ImplicitTemplateParams<ToolbarItemContext>>;\n\n  /**\n   * Show/Hide toolbar visibility control\n   */\n  visibleColumnsMenu?: boolean;\n\n  /**\n   * Custom template for toolbar visibility control\n   */\n  visibleColumnsMenuTemplate?: TemplateRef<ImplicitTemplateParams<ToolbarItemContext>>;\n\n  /**\n   * Show/Hide toolbar column selection limit, will be hidden if set to 0 or null\n   */\n  selectionLimit?: number;\n\n  /**\n   * Test ID attribute that is used on several toolbar html elements. Useful for automated tests\n   */\n  testID?: string;\n}\n\n/**\n * Toolbar public API\n */\nexport interface ToolbarApi {\n  /**\n   * Method can be useful in case customer needs to recalculate toolbar items visibility manualy\n   */\n  updateToolbarItems: () => void;\n\n  /**\n   * Method returns not the value of the global search model but the value of the global search input itself\n   * The difference is in case when the model wasn't applied(\"quickFilterTriggerable\"=true and button was not clicked)\n   * and you need to take the value of the search and use it somewhere\n   */\n  getQuickFilterInputValue: () => string;\n\n  /**\n   * Method can be useful when you need manually update the value of the global search\n   * @since 12.20.0\n   */\n  setQuickFilterValue: (value: string) => void;\n}\n\nexport interface ToolbarPopupAnimationDoneEvent {\n\n  /**\n   * Dropdown instance on which the animation is done.\n   * @since 12.18.0\n   */\n  dropdown: AdaptDropdownDirective;\n\n  /**\n   * FocusMonitorService instance. This can be used to handle keyboard navigation for custom template\n   * @since 12.18.0\n   */\n  focusMonitorService: AdaptFocusMonitorService;\n}\n\nexport interface GroupedRowData<TModel = RowDataItem> {\n  // TODO: Refactor this if possible\n  /**\n   * ???\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  groupValue: any;\n\n  /**\n   * Analog of \"ColumnConfig.field\" property for the grouped data\n   */\n  groupField: string;\n\n  /**\n   * Grouped data\n   */\n  items: RowData<TModel>[];\n\n  /**\n   * Title for the group row, if not passed \"groupValue\" is used instead.\n   * Can be useful when group titles should be uniq\n   *\n   * @since 11.15.0\n   * */\n  groupTitle?: string;\n}\n\n/**\n * Represents expansion state of the groups\n * @docs-default {}\n */\nexport interface ExpandedGroupKeys {\n  /**\n   * The key of the group is \"GroupedRowData.groupField\"\n   */\n  [field: string]: KeyValueObject;\n}\n\nexport interface RenderingGroupedRowData<TModel = RowDataItem> {\n  /**\n   * Table [value] representation for group and non group cases\n   */\n  rowData: RowData<TModel>;\n\n  /**\n   * The nesting level of the group or the row\n   */\n  nestingLevel: number;\n\n  /**\n   * Represent if row is a group or not\n   */\n  isGroup: boolean;\n\n  /**\n   * ???\n   */\n  rowIndexForRootGroup: number;\n\n  /**\n   * Show if row is in \"editing\" state at the moment\n   */\n  editing: boolean;\n\n  /**\n   * Show if group is expanded or not\n   */\n  groupExpanded: boolean;\n\n  /**\n   * Show if row is expanded or not\n   */\n  rowExpanded: boolean;\n\n  /**\n   * ???\n   */\n  hidden?: boolean;\n}\n\n// Copied from primeng\nexport interface LazyLoadEvent {\n  /**\n   * Represents the event source type for the [lazy] table\n   * Can be useful to differentiate between the event source inside (onLazyLoad) to provide different behavior\n   */\n  eventSource: AdaptTableEventSource;\n\n  /**\n   * First row offset\n   */\n  first?: number;\n\n  /**\n   * Number of rows per page\n   */\n  rows?: number;\n\n  /**\n   * Field name to sort in single sort mode\n   */\n  sortField?: string;\n\n  /**\n   * Sort order as number, 1 for asc and -1 for dec in single sort mode\n   */\n  sortOrder?: number;\n\n  /**\n   * An array of SortMeta objects used in multiple columns sorting.\n   * Each SortMeta has field and order properties\n   */\n  multiSortMeta?: SortMeta[];\n\n  /**\n   * Filters object having field as key and filter value, filter matchMode as value\n   */\n  filters?: {\n    [s: string]: FilterMetadata;\n  };\n\n  /**\n   *  Value of the global filter if available\n   */\n  // TODO: Refactor this if possible\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  globalFilter?: any;\n}\n\nexport interface AdaptLazyLoadEvent extends LazyLoadEvent {\n  /**\n   * If true means that table still has some data that can be loaded\n   */\n  loadMore: boolean;\n\n  /**\n   * Represents the number of already loaded rows\n   */\n  infiniteScrollingFirst: number;\n}\n\nexport interface RowActionConfig {\n  /**\n   * Action title\n   */\n  title: ValueOrFunc2<string, RowActionParams>;\n\n  /**\n   * Action enabled/disabled state\n   */\n  disabled?: ValueOrFunc2<boolean, RowActionParams>;\n\n  /**\n   * Action visibility state\n   */\n  hidden?: ValueOrFunc2<boolean, RowActionParams>;\n\n  /**\n   * The call back function that will be called when the action is clicked\n   */\n  action: ((params: RowActionParams) => void);\n\n  /**\n   * Action icon(html class from the dpl icons)\n   */\n  icon?: string;\n}\n\nexport interface ColumnActionsConfig {\n  /**\n   * Action button title\n   */\n  buttonName?: string;\n\n  /**\n   * Action button enabled/disabled state\n   */\n  disabled?: ValueOrFunc2<boolean, RowActionParams>;\n\n  /**\n   * Action button visibility state\n   */\n  hidden?: ValueOrFunc2<boolean, RowActionParams>;\n\n  /**\n   * List of actions\n   */\n  actions: RowActionConfig[];\n\n  /**\n   * Special buttons that will be shown on \"edit\" action\n   */\n  enableRowEditingButtons?: boolean;\n}\n\nexport interface BaseFilterParams {\n  /**\n   * Represents different match modes for the filtering.\n   * Each mode has own implementation.\n   * Detailed implementation can be found here - https://github.com/primefaces/primeng/blob/master/src/app/components/api/filterservice.ts\n   */\n  matchMode?: FilterMatchMode;\n\n  /**\n   * Custom filter params\n   */\n  [key: string]: unknown;\n}\n\nexport interface SelectFilterCallbacks {\n  /**\n   * Callback will be fired on filter select when its selected items length is reached the limit\n   */\n  selectionLimitReached?: Function;\n\n  /**\n   * Callback will be fired on filter select when its dropdown closed\n   */\n  dropdownClosed?: Function;\n\n  /**\n   * Callback will be fired on filter select when its dropdown closed\n   */\n  dropdownOpened?: Function;\n\n  /**\n   * Callback will be fired on filter select when its model value changed\n   */\n  modelArrayChanged?: Function;\n\n  /**\n   * Callback will be fired on filter select when its filter value changed\n   */\n  filterValueChanged?: Function;\n}\n\n/**\n * This interface will be changed soon\n * @deprecated Will be deprecated from v12.0, use NewSelectFilterParams instead\n */\nexport interface SelectFilterParams extends BaseFilterParams {\n  /**\n   * @deprecated Will be deprecated from v12.0, use NewSelectFilterParams instead\n   */\n  single?: boolean;\n\n  /**\n   * @deprecated Will be deprecated from v12.0, use NewSelectFilterParams instead\n   */\n  values: (string | RxSelectOption)[];\n\n  /**\n   * @deprecated Will be deprecated from v12.0, use NewSelectFilterParams instead\n   */\n  selectSettings?: RxSelectSettings;\n\n  /**\n   * @deprecated Will be deprecated from v12.0, use NewSelectFilterParams instead\n   */\n  selectTexts?: SelectTexts;\n\n  /**\n   * @deprecated Will be deprecated from v12.0, use NewSelectFilterParams instead\n   */\n  callbacks?: SelectFilterCallbacks;\n}\n\nexport interface NewSelectFilterParams extends BaseFilterParams {\n  /**\n   * Configuration of the AdaptRxSelectComponent(inputs that will be applied to the select component)\n   */\n  selectSettings?: RxSelectSettings;\n\n  /**\n   * Toggle single/multiple selection\n   */\n  single?: boolean;\n\n  /**\n   * List of select options\n   */\n  values: (string | RxSelectOption)[];\n\n  /**\n   * Select translations\n   */\n  selectTexts?: SelectTexts;\n\n  /**\n   * Callbacks that will be fired in different cases\n   */\n  callbacks?: SelectFilterCallbacks;\n}\n\n/**\n * Used to configure table columns\n */\nexport interface ColumnConfig {\n  /**\n   * Column identifier\n   */\n  field: string;\n\n  /**\n   * Column title\n   */\n  header?: string;\n\n  /**\n   * Column width\n   */\n  width?: string;\n\n  /**\n   * Column minimal width value in pixels. 45px by default if not passed\n   *\n   * @since 12.23.0\n   */\n  minWidth?: ValueOrFunc1<`${number}px`>;\n\n  /**\n   * Used to control the visibility of the column\n   */\n  hidden?: ValueOrFunc1<boolean>;\n\n  /**\n   * Custom body cell template\n   */\n  cellTemplate?: TemplateRef<DataCellTemplateParams>;\n\n  /**\n   * Custom template for cell editing\n   */\n  editTemplate?: TemplateRef<DataCellTemplateParams>;\n\n  /**\n   * Custom template for header filtering\n   */\n  filterTemplate?: TemplateRef<FilterTemplateParams>;\n\n  /**\n   * Custom template for header title\n   */\n  headerTitleTemplate?: TemplateRef<ColumnHeaderTemplateParams>;\n\n  /**\n   * Tooltip value for the body cell\n   */\n  cellTooltip?: ValueOrFunc2<TooltipValue | false, DataCellTooltipParams>;\n\n  /**\n   * Tooltip value for the header cell\n   */\n  headerTooltip?: ValueOrFunc1<TooltipValue | false>;\n\n  /**\n   * Custom class for the body cell\n   */\n  dataCellClass?: ValueOrFunc2<string, DataCellCustomClass>;\n\n  /**\n   * Custom styles for the header cell\n   */\n  dataCellStyle?: ValueOrFunc2<StylesObject, DataCellCustomStyle>;\n\n  /**\n   * Custom class for the header cell\n   */\n  headerClass?: ValueOrFunc1<string>;\n\n  /**\n   * Configure ability to sort per column\n   */\n  sortable?: boolean;\n\n  /**\n   * Make column editable or not\n   */\n  editable?: boolean;\n\n  /**\n   * Show/hide column header filter\n   */\n  filterable?: boolean;\n\n  /**\n   * Configure header filter type\n   */\n  filterName?: PredefinedFilterType;\n\n  // TODO: remove SelectFilterParams from here\n  /**\n   * Configure header filter params\n   */\n  filterParams?: BaseFilterParams | SelectFilterParams | NewSelectFilterParams;\n\n  /**\n   * Configure actions column\n   */\n  actionsConfig?: ColumnActionsConfig;\n\n  /**\n   * The \"test-id\" attribute that will be applied on the column header. Useful for automated testing\n   */\n  testId?: string;\n\n  // TODO: Check if this work or not.\n  // TODO: Based on this code(col.columnAdaptID = 'adapt-table-' + this._instanceId + '-th-' + this.columnIndex++;) it is not applied anywhere\n  // TODO: Also, we already have \"testId\"\n  /**\n   * ???\n   */\n  columnAdaptID?: number | string;\n\n  /**\n   * Mark column as \"exportable\" so it can be filtered while exporting\n   */\n  exportable?: boolean;\n\n  /**\n   * Used to mark column as \"frozen\" so it becomes sticky from the left(right in RTL mode) side\n   *\n   * All built-in columns(selection, dragging, etc.) are also become sticky if there are at least one sticky column\n   * Sticky columns can't be reordered and resized. The width of the column is set by ColumnConfig.width property\n   *\n   * @since 12.21.0\n   */\n  frozen?: ValueOrFunc1<boolean>;\n}\n\nexport interface FilterTemplateParams {\n  /**\n   * Current column configuration\n   */\n  column: ColumnConfig;\n\n  /**\n   * Current column index\n   */\n  index: number;\n}\n\n/**\n * Extends \"FilterTemplateParams\"\n */\n// TODO: Move to type\n// eslint-disable-next-line\nexport interface ColumnHeaderTemplateParams extends FilterTemplateParams {\n}\n\nexport interface ImplicitTemplateParams<T> {\n  /**\n   * You can define local variable on ng-template through let-name\n   *\n   * When angular creates template by calling createEmbeddedView it can also pass context that will be used inside ng-template\n   *\n   * Using the key $implicit in the context object will set it's value as default.\n   */\n  $implicit: T;\n}\n\n/**\n * @deprecated since 8.10.0 use DataCellTemplateParams that are applied for ColumnConfig.cellTemplate instead\n */\nexport interface DataColumnsDataCellsTemplateParams {\n  columns: ColumnConfig[];\n  renderRowData: RenderingGroupedRowData;\n  rowIndex: number;\n}\n\n/**\n * Extends \"ImplicitTemplateParams<RenderingGroupedRowData>\"\n */\n// TODO: Move to type\n// eslint-disable-next-line\nexport interface GroupValueDataCellTemplateParams extends ImplicitTemplateParams<RenderingGroupedRowData> {\n}\n\nexport interface DataRowDirectiveParams<T = RowDataItem> {\n  /**\n   * Row item\n   */\n  dataItem: T;\n\n  /**\n   * Row index\n   */\n  rowIndex: number;\n\n  /**\n   * Row expanded state\n   */\n  expanded: boolean;\n\n  /**\n   * Row editing state\n   */\n  editing: boolean;\n}\n\nexport interface HeaderDataCellDirectiveParams {\n  /**\n   * Current column configuration for not merged column\n   */\n  column: ColumnConfig;\n\n  /**\n   * Current columns configuration for merged columns\n   */\n  renderingColumn: RenderingColumnConfig;\n\n  /**\n   * Current column index\n   */\n  index: number;\n}\n\nexport interface DataCellDirectiveParams<T = RowDataItem> extends DataRowDirectiveParams<T> {\n  /**\n   * Current column configuration for not merged column\n   */\n  column: ColumnConfig;\n\n  /**\n   * Current columns configuration for merged columns\n   */\n  renderingColumn: RenderingColumnConfig;\n}\n\nexport interface GroupSelectionEvent<TModel = RowDataItem> {\n  /**\n   * Group items where selection state was changed\n   */\n  groupedRowData: GroupedRowData<TModel>;\n\n  /**\n   * Group selection state\n   */\n  selected: boolean;\n}\n\nexport interface AllGroupedRowsSelectionEvent<TModel = RowDataItem> {\n  /**\n   * List of rows in grouped table where selection state was changed\n   */\n  rowsData: RowData<TModel>;\n\n  /**\n   * Selection state\n   */\n  selected: boolean;\n}\n\nexport interface GroupExpansionEvent<TModel = RowDataItem> {\n  /**\n   * Group items where expansion state was changed\n   */\n  groupedRowData: GroupedRowData<TModel>;\n\n  /**\n   * Group expansion state\n   */\n  expanded: boolean;\n}\n\n// TODO: Delete this interface\n/**\n * @deprecated since 8.24.0\n * Not used anymore\n */\nexport interface AdaptRowReorderEvent<TModel = RowDataItem> {\n  /**\n   * Event emitted when the user drops a draggable item inside a drop container\n   * @deprecated since 8.24.0\n   * Not used anymore\n   */\n  cdkDragDropEvent: CdkDragDrop<RowData<TModel>[]>;\n}\n\nexport interface AdaptRowDragStartedEvent {\n  /**\n   * Event emitted when the user starts dragging a draggable\n   * More information: https://material.angular.io/cdk/drag-drop/api#CdkDragStart\n   */\n  cdkDragStartEvent: CdkDragStart;\n}\n\nexport interface AdaptRowDragReleaseEvent {\n  /**\n   * Event emitted when the user releases an item, before any animations have started\n   * More information: https://material.angular.io/cdk/drag-drop/api#CdkDragRelease\n   */\n  cdkDragReleaseEvent: CdkDragRelease;\n}\n\nexport interface AdaptRowDragEndEvent {\n  /**\n   * Event emitted when the user stops dragging a draggable\n   * More information: https://material.angular.io/cdk/drag-drop/api#CdkDragEnd\n   */\n  cdkDragEndEvent: CdkDragEnd;\n}\n\nexport interface AdaptDragDropEvent<TModel = RowDataItem> {\n  /**\n   * Event emitted when the user drops a draggable item inside a drop container\n   * More information: https://material.angular.io/cdk/drag-drop/api#CdkDragDrop\n   */\n  cdkDragDropEvent: CdkDragDrop<RowData<TModel>[]>;\n}\n\nexport interface ExpandedRowTemplateParams<T = RowDataItem> {\n  /**\n   * Current row item\n   */\n  dataItem: T;\n\n  /**\n   * Current row index\n   */\n  rowIndex: number;\n\n  /**\n   * Columns configuration\n   */\n  columns: ColumnConfig[];\n}\n\nexport interface TableBodyTemplateParams<T = RenderingGroupedRowData> extends ImplicitTemplateParams<T> {\n  /**\n   * Current row index\n   */\n  rowIndex: number;\n\n  /**\n   * Columns configuration\n   */\n  columns: ColumnConfig[];\n\n  /**\n   * Current row editing state\n   */\n  editing?: boolean;\n\n  /**\n   * Current row expanded state\n   */\n  expanded?: boolean;\n}\n\nexport interface DataCellTemplateParams<T = RowDataItem> {\n  /**\n   * Current row item\n   */\n  dataItem: T;\n\n  /**\n   * Current row index\n   */\n  rowIndex: number;\n\n  /**\n   * Columns configuration\n   */\n  column: ColumnConfig;\n  /**\n   * Current row expanded state\n   */\n  expanded: boolean;\n\n  /**\n   * Current row editing state\n   */\n  editing: boolean;\n}\n\n// TODO: Seems like one of editingDataItem, originalDataItem is redundant\nexport interface CurrentEditingRow<T = RowDataItem> {\n  /**\n   * Shallow copy, {...dataItem}\n   */\n  editingDataItem: T;\n\n  /**\n   * Shallow copy, {...dataItem}\n   */\n  originalDataItem: T;\n\n  /**\n   * Reference to the row\n   */\n  dataItemReference: T;\n}\n\nexport interface SaveRowEvent {\n  /**\n   * Represents the edited row state\n   */\n  editingRow: CurrentEditingRow;\n}\n\n/**\n * Extends \"TableTexts\", \"PaginationTexts\", \"ToolbarTexts\", \"FiltersTexts\", \"HeaderCellMenuTexts\"\n *\n * All properties will be moved directly to the \"TableCustomTexts\" interface after\n * \"TableTexts\", \"PaginationTexts\", \"ToolbarTexts\", \"FiltersTexts\", \"HeaderCellMenuTexts\" will be removed\n */\nexport interface TableCustomTexts extends TableTexts, PaginationTexts, ToolbarTexts, FiltersTexts, HeaderCellMenuTexts {\n}\n\n/**\n * @deprecated from v8.26.1 Use 'TableCustomTexts' instead\n */\nexport interface PaginationTexts {\n  /**\n   * Text for the button in the paginator tooltip where user can change the page number\n   */\n  goBtnText?: string;\n\n  /**\n   * Text for the input placeholder in the paginator tooltip where user can type the page number\n   */\n  pageNumberText?: string;\n\n  /**\n   * Text for the control label where user changes amount of rows visible per page\n   */\n  recordsPerPage?: string;\n\n  /**\n   * Text for the \"Previous\" button in the paginator, used for accessibility\n   */\n  prevPageBtnText?: string;\n\n  /**\n   * Text for the \"Next\" button in the paginator, used for accessibility\n   */\n  nextPageBtnText?: string;\n}\n\n/**\n * @deprecated from v8.26.1 Use 'TableCustomTexts' instead\n */\nexport interface TableTexts {\n\n  /**\n   * The text for the [label] input of the empty state component(AdaptEmptyStateComponent)\n   */\n  emptyStateLabelText?: string;\n\n  /**\n   * The text for the [label] input of the empty state component(AdaptEmptyStateComponent) if table is in filtering state\n   */\n  emptyStateWithFilterLabelText?: string;\n\n  /**\n   * The default text for the action button in the table row\n   */\n  actionButtonDefaultLabel?: string;\n\n  /**\n   * Text that describe the unselecting button in \"selectionLimit\" functionality\n   */\n  unselectAllSelectedTitle?: string;\n\n  /**\n   * Text for the \"save editing row\" button\n   */\n  saveRowEditingButtonLabel?: string;\n\n  /**\n   * Text for the \"cancel editing row\" button\n   */\n  cancelRowEditingButtonLabel?: string;\n\n  /**\n   * Text that is passed to [ariaLabel] input of the header selection checkbox(AdaptRxCheckboxComponent)\n   */\n  headerSelectRowsArialLabel?: string;\n\n  /**\n   * Text for the row \"expand\" button when its state is collapsed\n   */\n  expandRowText?: string;\n\n  /**\n   * Text for the row \"expand\" button when its state is expanded\n   */\n  collapseRowText?: string;\n\n  /**\n   * Text for the item in header selection menu that is used to select all rows on page\n   */\n  selectAllItemsOnPageHeaderLabel?: string;\n\n  /**\n   * Text for the item in header selection menu that is used to select all rows on page in filtering state\n   */\n  selectAllFilteredItemsOnPageHeaderLabel?: string;\n\n  /**\n   * Text for the item in header selection menu that is used to select only allowed for selection rows on page\n   */\n  selectAllPossibleItemsOnPageHeaderLabel?: string;\n\n  /**\n   * Text for the item in header selection menu that is used to select only allowed for selection rows on page in filtering state\n   */\n  selectAllPossibleFilteredItemsOnPageHeaderLabel?: string;\n\n  /**\n   * Text for the item in header selection menu that is used to select all visible(loaded) rows in table\n   */\n  selectAllVisibleItemsHeaderLabel?: string;\n\n  /**\n   * Text for the item in header selection menu that is used to select all visible(loaded) rows in table in filtering state\n   */\n  selectAllFilteredVisibleItemsHeaderLabel?: string;\n\n  /**\n   * Text for the item in header selection menu that is used to select all visible(loaded) and allowed for selection rows in table\n   */\n  selectAllPossibleVisibleItemsHeaderLabel?: string;\n\n  /**\n   * Text for the item in header selection menu that is used to select all visible(loaded) and allowed for selection rows in table in filtering state\n   */\n  selectAllPossibleFilteredVisibleItemsHeaderLabel?: string;\n\n  /**\n   * Text for the item in header selection menu that is used to select all rows in table\n   */\n  selectAllItemsInTableHeaderLabel?: string;\n\n  /**\n   * Text for the item in header selection menu that is used to select all rows in table if total records information is unknown\n   */\n  selectAllItemsInTableHeaderLabelForUnknownTotalRecords?: string;\n\n  /**\n   * Text for the item in header selection menu that is used to select all rows in table in filtering state\n   */\n  selectAllFilteredItemsInTableHeaderLabel?: string;\n\n  /**\n   * Text for the item in header selection menu that is used to select all allowed for selection rows in table\n   */\n  selectAllPossibleItemsInTableHeaderLabel?: string;\n\n  /**\n   * Text for the item in header selection menu that is used to select all allowed for selection rows in table in filtering state\n   */\n  selectAllPossibleFilteredItemsInTableHeaderLabel?: string;\n\n  /**\n   * Text for the item in header selection menu that is used to deselect all rows in table\n   */\n  deselectAllItemsInTableHeaderLabel?: string;\n\n  /**\n   * Text for the item in header selection menu that is used to deselect all rows in table in filtering state\n   */\n  deselectAllFilteredItemsInTableHeaderLabel?: string;\n\n  /**\n   * Text for the item in header selection menu that is used to deselect all allowed for deselection rows in table\n   */\n  deselectAllPossibleItemsInTableHeaderLabel?: string;\n\n  /**\n   * Text for the item in header selection menu that is used to deselect all allowed for deselection rows in table in filtering state\n   */\n  deselectAllPossibleFilteredItemsInTableHeaderLabel?: string;\n}\n\n/**\n * @deprecated from v8.26.1 Use 'TableCustomTexts' instead\n */\nexport interface ToolbarTexts {\n  /**\n   * Represents the text in the table toolbar that describes current rows for pagination state(eg. Records from {fromRecords} to {toRecords} of {totalRecords})\n   */\n  fromToOfTextTemplate?: string;\n\n  /**\n   * Represents the text in the table toolbar that describes current rows for pagination state if total records information is unknown(eg. Records from {fromRecords} to {toRecords})\n   */\n  fromToTextTemplate?: string;\n\n  /**\n   * Represents the text in the table toolbar that describes current rows for non-pagination and non-infinite scroll state for non-plural value(eg. {totalRecords} row total)\n   */\n  totalCountTextTemplate?: string;\n\n  /**\n   * Represents the text in the table toolbar that describes current rows for non-pagination and non-infinite scroll state for plural value(eg. {totalRecords} rows total)\n   */\n  totalCountTextTemplatePlural?: string;\n\n  /**\n   * Represents the text in the table toolbar that describes current rows if there are no records to show\n   */\n  noRecordsText?: string;\n\n  /**\n   * Represents the text in the table toolbar that describes current rows for infinite scroll state(eg. {currentRecordsCount} out of {totalRecords} rows shown)\n   */\n  outOfShownTextTemplate?: string;\n\n  /**\n   * Represents the text in the table toolbar that describes current rows for infinite scroll state when all items are loaded for plural value(eg. {currentRecordsCount} row shown)\n   */\n  recordsCountShownTextTemplate?: string;\n\n  /**\n   * Represents the text in the table toolbar that describes current rows for infinite scroll state when all items are loaded for non-plural value(eg. {currentRecordsCount} rows shown)\n   */\n  recordsCountShownTextTemplatePlural?: string;\n\n  /**\n   * Used in toolbar search as a placeholder for the search input ([placeholder] input for AdaptRxSearchComponent)\n   */\n  searchPlaceholder?: string;\n\n  /**\n   * Used in toolbar search as a label ([label] input for AdaptRxSearchComponent)\n   */\n  searchLabel?: string;\n\n  /**\n   * Represents the label for the button that used for visibility dropdown in toolbar\n   */\n  visibleColumnsMenuLabel?: string;\n\n  /**\n   * @deprecated from 12.18.0\n   * Not used anymore\n   */\n  filterButtonLabel?: string;\n\n  /**\n   * Need example\n   */\n  selected?: string;\n\n  /**\n   * Need example\n   */\n  showAllSelected?: string;\n\n  /**\n   * Text for the refresh button in toolbar\n   */\n  refresh?: string;\n\n  /**\n   * @deprecated from 12.18.0\n   * Not used anymore\n   */\n  clearButtonText?: string;\n\n  /**\n   * Represents text in export menu for selection case\n   */\n  exportSelected?: string;\n\n  /**\n   * Represents text in export menu for all rows\n   */\n  exportEntireDocument?: string;\n\n  /**\n   * Text for the export button in toolbar\n   */\n  export?: string;\n}\n\nexport interface TextFilterTexts {\n  /**\n   * Used as a placeholder text for column filter input\n   */\n  placeholder?: string;\n\n  /**\n   * Used as a label for column filter input\n   */\n  label?: string;\n}\n\nexport interface MergedFiltersTexts {\n  /**\n   * Used as a label for merged columns dropdown control if there are no applied filters\n   */\n  buttonNoAppliedFilters?: string;\n\n  /**\n   * Used as a label for merged columns dropdown control in non-plural case(if only one filter applied)\n   */\n  buttonAppliedFilter?: string;\n\n  /**\n   * Used as a label for merged columns dropdown control in plural case(if more than one filter applied)\n   */\n  buttonAppliedFilters?: string;\n\n  /**\n   * Used as a label for a merged columns filter dropdown\n   */\n  appliedFiltersLabel?: string;\n}\n\n/**\n * @deprecated from v8.26.1 Use 'TableCustomTexts' instead\n */\nexport interface FiltersTexts {\n  /**\n   * Texts that should describe column text-type filter\n   */\n  textFilterTexts?: TextFilterTexts;\n\n  /**\n   * Texts that should describe column select-type filter\n   */\n  selectFilterTexts?: SelectTexts;\n\n  /**\n   * Texts that should describe merged column filters\n   */\n  mergedFiltersTexts?: MergedFiltersTexts;\n}\n\n/**\n * @deprecated from v8.26.1 Use 'TableCustomTexts' instead\n */\nexport interface HeaderCellMenuTexts {\n  /**\n   * Text for sorting control in single sort mode\n   */\n  orderLabelSort?: string;\n\n  /**\n   * Text for sorting control in multi sort mode\n   */\n  orderLabelAddToSort?: string;\n\n  /**\n   * Text for ASC sorting control\n   */\n  orderAscBtn?: string;\n\n  /**\n   * Text for DESC sorting control\n   */\n  orderDescBtn?: string;\n\n  /**\n   * Text for control label to change sorting order in multi sort mode\n   */\n  selectSortOrderLabel?: string;\n\n  /**\n   * Text for control options to change sorting order in multi sort mode\n   */\n  selectSortOrderOption?: string;\n\n  /**\n   * Text for control to remove column from sorting\n   */\n  removeCurrentFromSortingBtn?: string;\n\n  /**\n   * Text for control to remove all columns from sorting\n   */\n  clearAllSortingBtn?: string;\n}\n\nexport interface TableWidthConfig {\n  /**\n   * Width that will be applied for desktop devices\n   */\n  desktop: string;\n\n  /**\n   * Width that will be applied for mobile devices\n   */\n  mobile: string;\n}\n\nexport interface MergeColumnConfig {\n  /**\n   * First field of the merge column(field is related to the ColumnConfig.field)\n   */\n  field1: string;\n\n  /**\n   * Second field of the merge column(field is related to the ColumnConfig.field)\n   */\n  field2: string;\n\n  /**\n   * The viewport width.\n   * The merge will be triggered when window viewport width is less than this value\n   */\n  viewportWidth: number;\n}\n\nexport interface RenderingColumnConfig {\n  /**\n   * Column configs for columns rendering\n   */\n  columnsConfigs: ColumnConfig[];\n\n  /**\n   * Type of rendering. Basically shows if columns are merged or not\n   */\n  type: RenderingColumnType;\n}\n\nexport interface CellTemplateParams {\n  /**\n   * Current column configuration\n   */\n  column: ColumnConfig;\n\n  /**\n   * ???\n   */\n  renderRowData: RenderingGroupedRowData;\n}\n\n/**\n * The state of the column to control table state persistence\n */\nexport interface ColumnConfigState {\n  /**\n   * List of fields from ColumnConfig.field.\n   * Could be multiple because of the merge columns feature\n   */\n  fields: string[];\n\n  /**\n   * The width of the current column\n   */\n  width?: number;\n\n  /**\n   * The visibility of the current column\n   */\n  hidden?: boolean;\n}\n\nexport interface AdaptTableLocalStorageState {\n  /**\n   * The single sorting state of the table\n   */\n  singleSortMeta?: SortMeta;\n\n  /**\n   * The multi sorting state of the table\n   */\n  multiSortMeta?: SortMeta[];\n\n  /**\n   * Columns widths state\n   */\n  columnWidths?: ColumnConfigState[];\n\n  /**\n   * Columns width state for merged columns\n   */\n  columnMergedWidths?: ColumnConfigState[];\n\n  /**\n   * The array of column field strings(ColumnConfig.field) that shows current state of columns order\n   */\n  columnOrder?: string[];\n}\n\nexport interface AdaptTableSessionStorageState {\n  /**\n   * The map of FilterMetadata objects from [filters] input\n   */\n  filters?: KeyValueObject<FilterMetadata>;\n\n  /**\n   * Current state of column visibility\n   */\n  columnsVisibility?: ColumnConfigState[];\n}\n\n/**\n * Extends \"AdaptTableLocalStorageState\" and \"AdaptTableSessionStorageState\"\n */\nexport interface AdaptTableState extends AdaptTableLocalStorageState, AdaptTableSessionStorageState {\n}\n\nexport interface AdaptColumnsVisibilityChange {\n  /**\n   * Current column configuration\n   */\n  column: ColumnConfig;\n\n  /**\n   * The visibility state of the current column\n   */\n  isHidden: boolean;\n}\n\nexport interface ColumnResized {\n  /**\n   * Table cell element that was resized\n   */\n  element: HTMLTableDataCellElement;\n\n  /**\n   * The number of pixels that the column was resized by(can be negative if column was shrank)\n   */\n  delta: number;\n\n  /**\n   * The state of the column to control table state persistence\n   */\n  columnsConfigState: ColumnConfigState[];\n}\n\nexport interface AdaptTableToggleSelectionEvent {\n  /**\n   * Browser native event\n   */\n  originalEvent: Event;\n\n  /**\n   * Current row index\n   */\n  index: number;\n\n  /**\n   * Current row data\n   */\n  data: RowDataItem;\n\n  /**\n   * Show from where selection action was triggered(example: clicking on checkbox or entering space key on table cell)\n   */\n  type: 'checkbox' | 'row';\n}\n\nexport interface AdaptPageChangeEvent {\n  /**\n   * Index of the first row to be displayed\n   */\n  first: number;\n\n  /**\n   * Number of rows to display per page\n   */\n  rows: number;\n}\n\nexport interface AdaptPaginatorRowsPerPageChangeEvent {\n  /**\n   * Browser native event\n   */\n  event: MouseEvent;\n\n  /**\n   * The current value of the rows per page\n   */\n  rows: number;\n}\n\nexport interface AdaptTableHeaderCheckboxToggleEvent {\n  /**\n   * Browser native event\n   */\n  originalEvent: Event;\n\n  /**\n   * Selection state(checked or unchecked)\n   */\n  checked: boolean;\n\n  /**\n   * Selection source(example: SelectAll, DeselectAll, SelectOnPage)\n   */\n  eventSource: AdaptTableHeaderCheckboxToggleSource;\n\n  /**\n   * The map of FilterMetadata objects from [filters] input\n   */\n  filters?: {\n    [s: string]: FilterMetadata;\n  };\n\n  /**\n   * The global filter value from [filters] input\n   */\n  // TODO: Refactor this if possible\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  globalFilter?: any;\n}\n\n/**\n * @since 12.14.0\n */\nexport interface AdaptTableRowAriaData {\n  /**\n   * Text that describes the row selection control\n   */\n  rowSelectionAriaLabel?: string;\n\n  /**\n   * Text that describes the row expand control when it is expanded\n   */\n  rowCollapseAriaLabel?: string;\n\n  /**\n   * Text that describes the row expand control when it is collapsed\n   */\n  rowExpandAriaLabel?: string;\n}\n\nexport interface AdaptTableFilterEvent {\n  /**\n   * The map of FilterMetadata objects from [filters] input\n   */\n  filters: KeyValueObject<FilterMetadata>;\n\n  /**\n   * Table rows value after filtering\n   */\n  filteredValue: RowDataItem[];\n}\n\nexport interface AdaptTableRowExpandCollapseEvent {\n  /**\n   * Browser native event\n   */\n  originalEvent: Event;\n\n  /**\n   * Current row data\n   */\n  data: RowDataItem;\n}\n\nexport interface AdaptTableMultiSortMeta {\n  /**\n   * An array of SortMeta objects used in multiple columns sorting.\n   * Each SortMeta has field and order properties\n   */\n  multisortmeta: SortMeta[];\n}\n\nexport interface AdaptTableColReorderEvent {\n  /**\n   * The index of the column when drag started\n   */\n  dragIndex: number;\n\n  /**\n   * The index of the column when it was dropped(drag ended)\n   */\n  dropIndex: number;\n\n  /**\n   * Columns configuration\n   */\n  columns: ColumnConfig[];\n}\n\nexport interface AdaptTableSortFunctionEvent {\n  /**\n   * Table rows\n   */\n  data: RowDataItem[];\n\n  /**\n   * Represent in which mode sorting works on single column or on multiple columns, valid values are \"single\" and \"multiple\"\n   */\n  mode: string;\n}\n\nexport interface AdaptTableSingleSortFunctionEvent extends AdaptTableSortFunctionEvent {\n  /**\n   * Column identifier related to ColumnConfig.field\n   */\n  field: string;\n\n  /**\n   * Sort order as number, 1 for asc and -1 for dec in single sort mode\n   */\n  order: number;\n}\n\nexport interface AdaptTableMultiSortFunctionEvent extends AdaptTableSortFunctionEvent {\n  /**\n   * An array of SortMeta objects used in multiple columns sorting.\n   * Each SortMeta has field and order properties\n   */\n  multiSortMeta: SortMeta[];\n}\n\nexport interface AdaptTableToggleRowEvent {\n  /**\n   * Browser native event\n   */\n  originalEvent: MouseEvent;\n\n  /**\n   * Index of the current row\n   */\n  rowIndex: number;\n}\n\nexport interface AdaptTableSortEvent {\n  /**\n   * Browser native event\n   */\n  originalEvent: MouseEvent;\n\n  /**\n   * Column identifier related to ColumnConfig.field\n   */\n  field: string;\n}\n"]}