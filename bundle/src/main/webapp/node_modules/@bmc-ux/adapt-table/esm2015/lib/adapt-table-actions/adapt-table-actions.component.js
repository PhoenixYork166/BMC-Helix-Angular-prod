import { DOWN_ARROW, ENTER } from '@angular/cdk/keycodes';
import { Component, Input, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { AdaptTableComponent } from '../adapt-table.component';
import { getValueOrFunc, getEventKeyCode, AdaptDropdownDirective } from '@bmc-ux/adapt-angular';
import * as i0 from "@angular/core";
import * as i1 from "../adapt-table.component";
import * as i2 from "@angular/common";
import * as i3 from "@bmc-ux/adapt-angular";
const _c0 = ["actionsDropdown"];
function AdaptTableActionsComponent_div_0_button_8_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 9);
} if (rf & 2) {
    const action_r3 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("ngClass", "at-action-icon " + action_r3.icon);
} }
function AdaptTableActionsComponent_div_0_button_8_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 6, 7);
    i0.ɵɵlistener("click", function AdaptTableActionsComponent_div_0_button_8_Template_button_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r9); const action_r3 = restoredCtx.$implicit; const ctx_r8 = i0.ɵɵnextContext(2); return ctx_r8.onActionClick(action_r3); });
    i0.ɵɵtext(2, "\n      ");
    i0.ɵɵtemplate(3, AdaptTableActionsComponent_div_0_button_8_span_3_Template, 1, 1, "span", 8);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const action_r3 = ctx.$implicit;
    const index_r4 = ctx.index;
    const _r5 = i0.ɵɵreference(1);
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("text-active", ctx_r2.isActiveDescendant(_r5));
    i0.ɵɵproperty("id", ctx_r2.actionsParams.rowIndex + "_" + index_r4)("item", action_r3)("adaptListKeyManagerItemDisabled", ctx_r2.isDisabledAction(action_r3))("disabled", ctx_r2.isDisabledAction(action_r3));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", action_r3.icon);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", ctx_r2.getTitle(action_r3), "\n    ");
} }
function AdaptTableActionsComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 1, 2);
    i0.ɵɵlistener("openChange", function AdaptTableActionsComponent_div_0_Template_div_openChange_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); return ctx_r10.handleOpenChange($event); });
    i0.ɵɵtext(2, "\n  ");
    i0.ɵɵelementStart(3, "button", 3);
    i0.ɵɵlistener("click", function AdaptTableActionsComponent_div_0_Template_button_click_3_listener($event) { i0.ɵɵrestoreView(_r11); const _r1 = i0.ɵɵreference(1); return _r1.toggle($event); })("keydown", function AdaptTableActionsComponent_div_0_Template_button_keydown_3_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r13 = i0.ɵɵnextContext(); return ctx_r13.keydownHandler($event); });
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n  ");
    i0.ɵɵelementStart(6, "div", 4);
    i0.ɵɵlistener("keyManagerStateChange", function AdaptTableActionsComponent_div_0_Template_div_keyManagerStateChange_6_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r14 = i0.ɵɵnextContext(); return ctx_r14.keyManagerStateChange($event); });
    i0.ɵɵtext(7, "\n    ");
    i0.ɵɵtemplate(8, AdaptTableActionsComponent_div_0_button_8_Template, 5, 8, "button", 5);
    i0.ɵɵtext(9, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r1 = i0.ɵɵreference(1);
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("appendToBody", true)("placement", ctx_r0.dropdownPlacement);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("disabled", ctx_r0.isDisabled());
    i0.ɵɵattribute("aria-expanded", _r1.isOpen())("aria-activedescendant", ctx_r0.activeActionItemId);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n    ", ctx_r0.column.actionsConfig.buttonName || ctx_r0.texts.actionButtonDefaultLabel, "");
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngForOf", ctx_r0.getVisibleActions());
} }
export class AdaptTableActionsComponent {
    constructor(table) {
        this.table = table;
        this.dropdownPlacement = ['bottom-right', 'top-right', 'auto'];
        this._listKeyManagerDestroy = new Subject();
    }
    get actionsParams() {
        return {
            column: this.column,
            rowIndex: this.rowIndex,
            dataItem: this.dataItem,
            expanded: this.expanded,
            editing: this.editing,
        };
    }
    ngOnDestroy() {
        this._listKeyManagerDestroy.next();
    }
    onActionClick(action) {
        action === null || action === void 0 ? void 0 : action.action(this.actionsParams);
    }
    isHidden() {
        return getValueOrFunc(this.column.actionsConfig.hidden, this.actionsParams);
    }
    isDisabled() {
        return getValueOrFunc(this.column.actionsConfig.disabled, this.actionsParams) ||
            this.getVisibleActions().every(a => this.isDisabledAction(a));
    }
    isDisabledAction(action) {
        return getValueOrFunc(action.disabled, this.actionsParams);
    }
    getTitle(action) {
        return getValueOrFunc(action.title, this.actionsParams);
    }
    getVisibleActions() {
        const params = this.actionsParams;
        return this.column.actionsConfig.actions.filter(a => !getValueOrFunc(a.hidden, params));
    }
    keyManagerStateChange(listKeyManager) {
        this._listKeyManager = listKeyManager;
        if (this._listKeyManager) {
            this._listKeyManager.change
                .pipe(takeUntil(this._listKeyManagerDestroy))
                .subscribe(() => {
                this.activeActionItemId = this._listKeyManager.activeItem;
            });
            this._listKeyManager.tabOut
                .pipe(takeUntil(this._listKeyManagerDestroy))
                .subscribe(() => {
                this.actionsDropdown.close();
            });
        }
        else {
            this._listKeyManagerDestroy.next();
            this.activeActionItemId = null;
        }
    }
    keydownHandler(event) {
        var _a;
        if (!this.actionsDropdown.isOpen() && getEventKeyCode(event) === DOWN_ARROW) {
            event.preventDefault();
            this.actionsDropdown.open();
            return;
        }
        if (this._listKeyManager) {
            this._listKeyManager.onKeydown(event);
            if (getEventKeyCode(event) === ENTER && this.actionsDropdown.isOpen()) {
                this.onActionClick((_a = this._listKeyManager.activeItem) === null || _a === void 0 ? void 0 : _a.item);
            }
        }
    }
    handleOpenChange(isOpen) {
        if (isOpen) {
            this._listKeyManager.setFirstItemActive();
        }
    }
    isActiveDescendant(keyManagerItem) {
        return keyManagerItem === this.activeActionItemId;
    }
}
AdaptTableActionsComponent.ɵfac = function AdaptTableActionsComponent_Factory(t) { return new (t || AdaptTableActionsComponent)(i0.ɵɵdirectiveInject(i1.AdaptTableComponent)); };
AdaptTableActionsComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptTableActionsComponent, selectors: [["adapt-table-actions"]], viewQuery: function AdaptTableActionsComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.actionsDropdown = _t.first);
    } }, inputs: { column: "column", rowIndex: "rowIndex", dataItem: "dataItem", expanded: "expanded", editing: "editing", texts: "texts" }, decls: 2, vars: 1, consts: [["class", "dropdown", "adaptDropdown", "", 3, "adaptRadarDisableEventSending", "appendToBody", "placement", "openChange", 4, "ngIf"], ["adaptDropdown", "", 1, "dropdown", 3, "adaptRadarDisableEventSending", "appendToBody", "placement", "openChange"], ["actionsDropdown", ""], ["id", "dropdownMenu", "type", "button", "adaptDropdownAnchor", "", 1, "btn", "btn-secondary", "btn-xs", "at-action-dropdown-toggle", "dropdown-toggle", 3, "disabled", "click", "keydown"], ["aria-labelledby", "dropdownMenu", "adaptDropdownMenu", "", "adaptListKeyManager", "", 1, "dropdown-menu", 3, "keyManagerStateChange"], ["class", "dropdown-item", "type", "button", "tabindex", "-1", "adaptListKeyManagerItem", "", 3, "id", "item", "adaptListKeyManagerItemDisabled", "text-active", "disabled", "click", 4, "ngFor", "ngForOf"], ["type", "button", "tabindex", "-1", "adaptListKeyManagerItem", "", 1, "dropdown-item", 3, "id", "item", "adaptListKeyManagerItemDisabled", "disabled", "click"], ["adaptListKeyManagerItem", "adaptListKeyManagerItem"], [3, "ngClass", 4, "ngIf"], [3, "ngClass"]], template: function AdaptTableActionsComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, AdaptTableActionsComponent_div_0_Template, 11, 8, "div", 0);
        i0.ɵɵtext(1, "\n");
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", !ctx.isHidden());
    } }, directives: [i2.NgIf, i3.AdaptDropdownDirective, i3.AdaptDropdownAnchorDirective, i3.AdaptDropdownMenuDirective, i3.AdaptListKeyManagerDirective, i2.NgForOf, i3.AdaptListKeyManagerItemDirective, i2.NgClass], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptTableActionsComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-table-actions',
                templateUrl: './adapt-table-actions.html',
            }]
    }], function () { return [{ type: i1.AdaptTableComponent }]; }, { column: [{
            type: Input
        }], rowIndex: [{
            type: Input
        }], dataItem: [{
            type: Input
        }], expanded: [{
            type: Input
        }], editing: [{
            type: Input
        }], texts: [{
            type: Input
        }], actionsDropdown: [{
            type: ViewChild,
            args: ['actionsDropdown', { static: false }]
        }] }); })();
//# sourceMappingURL=adapt-table-actions.component.js.map