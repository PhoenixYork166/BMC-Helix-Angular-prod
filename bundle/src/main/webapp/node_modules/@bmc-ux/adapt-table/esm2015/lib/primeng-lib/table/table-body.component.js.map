{"version":3,"file":"table-body.component.js","sourceRoot":"","sources":["../../../../../../../libs/adapt-table/src/lib/primeng-lib/table/table-body.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  TemplateRef,\n  ViewChild\n} from '@angular/core';\nimport {ReplaySubject, Subscription} from 'rxjs';\nimport {AdaptTableComponent} from '../../adapt-table.component';\nimport {\n  ColumnConfig,\n  RenderingGroupedRowData,\n  TableBodyTemplateParams\n} from '../../adapt-table.models';\nimport {CdkVirtualForOf, CdkVirtualScrollRepeater} from '@angular/cdk/scrolling';\nimport {takeUntil} from 'rxjs/operators';\n\n@Component({\n  selector: '[pTableBody]',\n  template: `\n    <ng-container *ngIf=\"!dt.virtualScroll\">\n      <ng-container *ngIf=\"!dt.expandedRowTemplateRef\">\n        <ng-template ngFor\n                     let-renderRowData\n                     let-rowIndex=\"index\"\n                     [ngForOf]=\"dt.getPlainExpandedRenderingRows(dt.getCurrentPageDisplayingRows())\"\n                     [ngForTrackBy]=\"dt.trackByForRenderingRows\">\n          <ng-container\n            *ngTemplateOutlet=\"pTableBodyTemplate; context: getContext(renderRowData, rowIndex, true)\"></ng-container>\n        </ng-template>\n      </ng-container>\n      <ng-container *ngIf=\"dt.expandedRowTemplateRef\">\n        <ng-template ngFor\n                     let-renderRowData\n                     let-rowIndex=\"index\"\n                     [ngForOf]=\"dt.getPlainExpandedRenderingRows(dt.getCurrentPageDisplayingRows())\"\n                     [ngForTrackBy]=\"dt.trackByForRenderingRows\">\n          <ng-container\n            *ngTemplateOutlet=\"pTableBodyTemplate; context: getContext(renderRowData, rowIndex, true, true)\"></ng-container>\n          <ng-container *ngIf=\"dt.isRowExpanded(renderRowData)\">\n            <ng-container\n              *ngTemplateOutlet=\"dt.expandedRowTemplateRef; context: getContext(renderRowData, rowIndex)\"></ng-container>\n          </ng-container>\n        </ng-template>\n      </ng-container>\n    </ng-container>\n\n    <ng-container *ngIf=\"dt.virtualScroll\">\n      <ng-container *ngIf=\"!dt.expandedRowTemplateRef\">\n        <ng-template cdkVirtualFor\n                     let-renderRowData\n                     let-rowIndex=\"index\"\n                     [cdkVirtualForOf]=\"dt.getPlainExpandedRenderingRows(dt.getCurrentPageDisplayingRows())\"\n                     [cdkVirtualForTemplateCacheSize]=\"0\"\n                     [cdkVirtualForTrackBy]=\"dt.trackByForRenderingRows\">\n          <ng-container\n            *ngTemplateOutlet=\"pTableBodyTemplate; context: getContext(renderRowData, rowIndex, true)\"></ng-container>\n        </ng-template>\n      </ng-container>\n      <ng-container *ngIf=\"dt.expandedRowTemplateRef\">\n        <ng-template cdkVirtualFor\n                     let-renderRowData\n                     let-rowIndex=\"index\"\n                     [cdkVirtualForOf]=\"dt.getPlainExpandedRenderingRows(dt.getCurrentPageDisplayingRows())\"\n                     [cdkVirtualForTemplateCacheSize]=\"0\"\n                     [cdkVirtualForTrackBy]=\"dt.trackByForRenderingRows\">\n          <ng-container\n            *ngTemplateOutlet=\"pTableBodyTemplate; context: getContext(renderRowData, rowIndex, true, true)\"></ng-container>\n          <ng-container *ngIf=\"dt.isRowExpanded(renderRowData)\">\n            <ng-container\n              *ngTemplateOutlet=\"dt.expandedRowTemplateRef; context: getContext(renderRowData, rowIndex)\"></ng-container>\n          </ng-container>\n        </ng-template>\n      </ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"dt.loading\">\n      <ng-container\n        *ngTemplateOutlet=\"dt.loadingBodyTemplate; context: {$implicit: pTableBody, frozen: frozen}\"></ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"dt.isEmpty() && !dt.loading\">\n      <ng-container\n        *ngTemplateOutlet=\"dt.emptyMessageTemplate; context: {$implicit: pTableBody, frozen: frozen}\"></ng-container>\n    </ng-container>\n  `\n})\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nexport class TableBody implements OnDestroy, AfterViewInit {\n\n  @Input() pTableBody: ColumnConfig[];\n  @Input() pTableBodyTemplate: TemplateRef<TableBodyTemplateParams | void>;\n  @Input() frozen: boolean;\n\n  @ViewChild(CdkVirtualForOf) cdkVirtualForOf: CdkVirtualScrollRepeater<RenderingGroupedRowData[]>;\n\n  subscription: Subscription;\n\n  private _destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n\n  constructor(public dt: AdaptTableComponent,\n              public cd: ChangeDetectorRef) {\n    this.subscription = this.dt.tableService.valueSource$.subscribe(() => {\n      if (this.dt.virtualScroll) {\n        this.cd.detectChanges();\n      }\n    });\n  }\n\n  ngAfterViewInit(): void {\n    // Because of the height changes after group expanded the ExpressionChangedAfterItHasBeenCheckedError error is appeared\n    // To avoid that issue re-attach virtual scroll\n    if (this.dt.virtualScroll) {\n      this.dt.groupExpansion\n        .pipe(takeUntil(this._destroyed$))\n        .subscribe(() => {\n          this.dt.scrollableView.virtualScrollBody.detach();\n          setTimeout(() => {\n            this.dt.scrollableView.virtualScrollBody.attach(this.cdkVirtualForOf);\n          });\n        });\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n\n    this._destroyed$.next(true);\n    this._destroyed$.complete();\n  }\n\n  getContext(renderRowData: RenderingGroupedRowData, rowIndex: number, isEditable: boolean = false, isExpandable: boolean = false): TableBodyTemplateParams {\n    const context: TableBodyTemplateParams = {\n      $implicit: renderRowData,\n      rowIndex: this.dt.paginator ? (this.dt.first + rowIndex) : rowIndex,\n      columns: this.pTableBody\n    };\n\n    if (isEditable) {\n      context.editing = (this.dt.editMode === 'row' && this.dt.isRowEditing(renderRowData));\n    }\n\n    if (isExpandable) {\n      context.expanded = this.dt.isRowExpanded(renderRowData);\n    }\n\n    return context;\n  }\n}\n"]}