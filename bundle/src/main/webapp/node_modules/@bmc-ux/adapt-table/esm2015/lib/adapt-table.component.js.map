{"version":3,"file":"adapt-table.component.js","sourceRoot":"","sources":["../../../../../libs/adapt-table/src/lib/adapt-table.component.ts","../../../../../libs/adapt-table/src/lib/adapt-table.component.html"],"names":[],"mappings":"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","sourcesContent":["import {animate, style, transition, trigger} from '@angular/animations';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkDragDrop,\n  CdkDragEnd,\n  CdkDragRelease,\n  CdkDragSortEvent,\n  CdkDragStart,\n  moveItemInArray\n} from '@angular/cdk/drag-drop';\nimport {DOWN_ARROW, ENTER, ESCAPE, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Injector,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  Renderer2,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewChildren,\n  ViewContainerRef,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  AdaptDeviceDetectionService,\n  adaptError,\n  AdaptOverlayConnectedPositions,\n  AdaptOverlayService,\n  AdaptOverlayWithPortal,\n  AdaptTooltipComponent,\n  AdaptTranslateService,\n  ANIMATION_DURATION,\n  ANIMATION_TIMING_FUNCTION,\n  BusyConfig,\n  getOverlayConnectedPositions,\n  getValueOrFunc,\n  hasKeyboardKeyCode,\n  isDefined,\n  KeyValueObject,\n  SafeCdr,\n  StylesObject,\n  TooltipValue,\n  trueOrNull,\n  ValueOrFunc2\n} from '@bmc-ux/adapt-angular';\nimport {debounce, flatten, isFunction, isNil, isNull, isNumber, merge} from 'lodash-es';\nimport {FilterService, SortMeta} from 'primeng/api';\nimport {fromEvent, Observable, ReplaySubject, Subscription} from 'rxjs';\nimport {debounceTime, take, takeUntil} from 'rxjs/operators';\nimport {\n  AdaptColumnsVisibilityChange,\n  AdaptDragDropEvent,\n  AdaptLazyLoadEvent,\n  AdaptPageChangeEvent,\n  AdaptPaginatorAlign,\n  AdaptTableRowAriaData,\n  AdaptRowDragEndEvent,\n  AdaptRowDragReleaseEvent,\n  AdaptRowDragStartedEvent,\n  AdaptTableCellData,\n  AdaptTableClasses,\n  AdaptTableEventSource,\n  AdaptTableHeaderCheckboxToggleEvent,\n  AdaptTableHeaderSelectionMode,\n  AllGroupedRowsSelectionEvent,\n  CellTemplateParams,\n  CheckboxState,\n  ColumnActionsConfig,\n  ColumnConfig,\n  ColumnResized,\n  CurrentEditingRow,\n  DataCellCustomClass,\n  DataCellCustomStyle,\n  DataCellDirectiveParams,\n  DataCellTemplateParams,\n  DataColumnsDataCellsTemplateParams,\n  DataRowDirectiveParams,\n  ExpandedGroupKeys,\n  ExpandedRowTemplateParams,\n  ExportEvent,\n  FilterMatchMode,\n  FiltersTexts,\n  GroupedRowData,\n  GroupExpansionEvent,\n  GroupSelectionEvent,\n  GroupValueDataCellTemplateParams,\n  HeaderCellMenuTexts,\n  HeaderDataCellDirectiveParams,\n  ImplicitTemplateParams,\n  MergeColumnConfig,\n  PaginationTexts,\n  PrimaryKey,\n  RenderingColumnConfig,\n  RenderingColumnType,\n  RenderingGroupedRowData,\n  RowData,\n  RowDataItem,\n  SaveRowEvent,\n  SortMode,\n  SortOrder,\n  TableBodyTemplateParams,\n  TableCustomTexts,\n  TableTexts,\n  TableWidthConfig,\n  ToolbarApi,\n  ToolbarConfig,\n  ToolbarTexts,\n  ToolbarPopupAnimationDoneEvent,\n} from './adapt-table.models';\nimport {ScrollableView} from './primeng-lib/table/scrollable-view.component';\nimport {Table} from './primeng-lib/table/table';\nimport {TableService} from './primeng-lib/table/table.service';\nimport {AdaptDataDirective} from './shared/adapt-data-directive';\nimport {AdaptTableDeprecationMiddleware} from './shared/deprecation-middleware.service';\nimport {hasRowGroupedData} from './table-utils';\nimport {HtmlUtils, ObjectUtils} from './utils';\n\n\n/** @deprecated from v8.26.1 Use AdaptTableClasses Enum instead */\nexport abstract class AdaptGridClasses {\n  static readonly MAIN: string = 'adapt-grid';\n  static readonly ADAPT_TABLE: string = 'adapt-table';\n  static readonly BORDERED: string = 'adapt-grid-bordered';\n  static readonly PAGEABLE: string = 'adapt-table-pageable';\n  static readonly SCROLLABLE: string = 'adapt-table-scrollable';\n  static readonly STRIPED: string = 'adapt-table--striped';\n  static readonly IS_EMPTY_STATE: string = 'adapt-table--empty-state';\n  static readonly NOT_SCROLLABLE: string = 'adapt-table-not-scrollable';\n  static readonly FULL_HEIGHT_STRETCH: string = 'adapt-table-full-height-stretch';\n  static readonly HAS_NOT_VERTICAL_BODY_OVERFLOW: string = 'adapt-table--has-not-overflow';\n  static readonly LOADING_FULL_TABLE: string = 'adapt-grid--loading';\n  static readonly CELL: { ACTIONS_CELL: string; EDITING: string } = {\n    ACTIONS_CELL: 'at-actions-cell',\n    EDITING: 'at-cell--editing',\n  };\n}\n\n@Component({\n  selector: 'adapt-table',\n  templateUrl: './adapt-table.component.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.Default,\n  providers: [TableService],\n  animations: [\n    trigger('dataRefreshAnimation', [\n      transition('void => *', [\n        style({transform: 'scaleX(.8)', opacity: '0'}),\n        animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`,\n          style({transform: 'scaleX(1)', opacity: '1'}))\n      ]),\n      transition('* => void', [\n        style({opacity: '1'}),\n        animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionOut}`,\n          style({opacity: '0'}))\n      ]),\n    ])\n  ]\n})\nexport class AdaptTableComponent extends Table implements OnInit, OnChanges, OnDestroy, AfterViewInit {\n  static LAST_TABLE_INSTANCE_ID: number = 0;\n\n  el: ElementRef<HTMLElement>;\n  loadingToggle: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  currentEditingRows: { [id in PrimaryKey]: CurrentEditingRow } = {};\n\n  isMobile: boolean = false;\n\n  rowSelectionRadiobuttonName: string = null;\n\n  RenderingColumnType: typeof RenderingColumnType = RenderingColumnType;\n\n  scrollableView: ScrollableView;\n\n  tableBodyHeight: string = '';\n\n  isRtl: boolean = false;\n\n  toolbarSearchModel: string;\n\n  /** Is used for multiple range selection with shiftKey. Is set on checkbox click and `space` click on a focused cell */\n  lastSelectedRowId: PrimaryKey = null;\n\n  /** @deprecated from 8.25.0 All PrimeNG properties and methods are now available directly from AdaptTableComponent instance */\n  primengTable: AdaptTableComponent;\n\n  columnIndex: number = 0;\n\n  tableClasses: typeof AdaptTableClasses = AdaptTableClasses;\n\n  @ViewChild('emptyStateTdEl', {static: false}) emptyStateTdEl: ElementRef<HTMLTableDataCellElement>;\n  @ViewChild('toolbarComponent', {static: false}) toolbarComponent: ToolbarApi;\n  @ViewChild('tooltipContainerEl', {read: ViewContainerRef, static: true}) tooltipViewContainerRef: ViewContainerRef;\n  @ViewChild('infiniteScrollingLoaderContainerEl', {read: ViewContainerRef, static: true})\n  infiniteScrollingLoaderContainerEl: ViewContainerRef;\n\n  @ViewChild('tableContainer', {static: true}) tableContainer: ElementRef<HTMLElement>;\n  @ViewChild('tableInnerContainer', {static: true}) tableInnerContainer: ElementRef<HTMLElement>;\n  @ViewChild('tableHeader', {static: false}) tableHeader: ElementRef<HTMLElement>;\n  @ViewChild('table', {static: false}) nonScrollableTable: ElementRef<HTMLTableElement>;\n\n  @ViewChild('tableBodyTemplateRef', {static: true}) tableBodyTemplateRef: TemplateRef<TableBodyTemplateParams>;\n  @ViewChild('tableHeaderTemplateRef', {static: true}) tableHeaderTemplateRef: TemplateRef<{ columns: ColumnConfig[] }>;\n  @ViewChild('tableColgroupTemplateRef', {static: true}) tableColgroupTemplateRef: TemplateRef<{ columns: ColumnConfig[] }>;\n  @ViewChild('tableEmptyMessageTemplateRef', {static: true}) tableEmptyMessageTemplateRef: TemplateRef<{ columns: ColumnConfig[] }>;\n  @ViewChild('rowExpansionTemplate', {static: true}) rowExpansionTemplate: TemplateRef<ExpandedRowTemplateParams>;\n\n  @ViewChildren('dataRow', {read: AdaptDataDirective})\n  dataRows: QueryList<AdaptDataDirective<DataRowDirectiveParams, HTMLTableRowElement>>;\n\n  @ViewChildren('dataCell', {read: AdaptDataDirective})\n  dataCells: QueryList<AdaptDataDirective<DataCellDirectiveParams, HTMLTableDataCellElement>>;\n\n  @ViewChildren('dataHeaderCell', {read: AdaptDataDirective})\n  dataHeaderCells: QueryList<AdaptDataDirective<HeaderDataCellDirectiveParams, HTMLTableHeaderCellElement>>;\n\n  @ViewChildren('actionColElement', {read: ElementRef}) actionColElements: QueryList<ElementRef<HTMLTableColElement>>;\n\n  /**\n   * Enables table sorting\n   * @docs-default 'false'\n   */\n  @Input() sortable: boolean = false;\n\n  /**\n   * Enables table filtering\n   * @docs-default 'false'\n   */\n  @Input() filterable: boolean = false;\n\n  /**\n   * Enables triggerable search on filters\n   * @docs-default 'false'\n   */\n  @Input() triggerableFilters: boolean = false;\n\n  /**\n   * Show explicit search button\n   * @docs-default 'false'\n   */\n  @Input() explicitSearchBtn: boolean = false;\n\n  /**\n   * Enables table rows reordering\n   * @docs-default 'false'\n   */\n  @Input() enableReorderableRows: boolean = false;\n\n  /**\n   * Hide tooltips in the entire table\n   * @docs-default 'false'\n   */\n  @Input() suppressTooltip: boolean = false;\n\n  /**\n   * Config of toolbar. If not set then toolbar is not shown\n   * @docs-default\n   */\n  @Input() toolbarConfig: ToolbarConfig;\n\n  /**\n   * Template reference that can be used to change default 'col' tags on custom html\n   *\n   * @docs-default\n   *\n   * @deprecated since 8.10.0 Columns template shouldn't be used anymore\n   */\n  @Input() dataColumnsColsTemplate: TemplateRef<ImplicitTemplateParams<ColumnConfig[]>>;\n\n  /**\n   * Template reference that can be used to change default 'th' tags on custom html\n   *\n   * @docs-default null\n   *\n   * @deprecated since 8.10.0 use ColumnConfig.headerTitleTemplate instead\n   */\n  @Input() dataColumnsHeaderTemplate: TemplateRef<ImplicitTemplateParams<ColumnConfig[]>>;\n\n  /**\n   * Template reference that can be used to change default table row on custom html\n   *\n   * @docs-default\n   *\n   * @deprecated since 8.10.0 use ColumnConfig.cellTemplate instead\n   */\n  @Input() dataColumnsDataCellsTemplate: TemplateRef<DataColumnsDataCellsTemplateParams>;\n\n  /**\n   * Used to create custom header group. See example of usage on \"Add dynamic data\" table\n   * @docs-default\n   */\n  @Input() headerGroupsTemplate: TemplateRef<{ $implicit: RenderingColumnConfig[] }>;\n\n  /**\n   * ???\n   * @docs-default\n   */\n  @Input() alwaysShowHeaderTooltip: boolean;\n\n  /**\n   * ???\n   * @docs-default\n   */\n  @Input() alwaysShowCellTooltip: boolean;\n\n  /**\n   * Used to set a custom cell class for the expansion cell\n   * @docs-default\n   */\n  @Input() expandedCellClass: string | string[];\n\n  /**\n   * The hash map that is used to control the expansion state of the groups\n   * @docs-default {}\n   */\n  @Input() expandedGroupsKeys: ExpandedGroupKeys = {};\n\n  /**\n   * Padding of the nested group in pixels. Useful when you want to control padding value for a table group.\n   * With a big nesting level, there is still a possibility that table data will be overlapped.\n   * In such a case, you can change the control table columns width.\n   * @docs-default 31\n   */\n  @Input() nestedGroupPadding: number = 31; // in pixels\n\n  /**\n   * Initial padding of nested group in pixels\n   * @docs-default 13\n   */\n  @Input() expandindCellInitialPadding: number = 13; // pixels. Or get dynamically\n\n  /**\n   * The custom template for the table group row\n   * @docs-default\n   */\n  @Input() groupValueDataCellTemplate: TemplateRef<GroupValueDataCellTemplateParams>;\n\n  /**\n   * The delay to showing tooltip for table header and for the table cell\n   * @docs-default 900\n   */\n  @Input() tooltipInitialDelayMs: number = 900;\n\n  /**\n   * Used to set custom class on the AdaptTooltipComponent which is used to show tooltip\n   * @docs-default ''\n   */\n  @Input() tooltipClass: string = '';\n\n  /**\n   * Used to set custom class for table rows\n   * @docs-default\n   */\n  @Input() rowsCustomClass: ValueOrFunc2<string, RenderingGroupedRowData>;\n\n  /**\n   * Align pagination block to the left or right.\n   * @docs-default 'left'\n   */\n  @Input() paginatorAlign: AdaptPaginatorAlign = 'left';\n\n  /**\n   * Used to toggle the visibility of the empty state visualization(AdaptEmptyStateComponent) for the empty\n   * table(table is empty the [value] is null or have 0 length)\n   * @docs-default true\n   */\n  @Input() hasEmptyState: boolean = true;\n\n  /**\n   * Used to turn on \"infinite scroll\" mode.In combination with [lazy]=\"true\" allow to load the\n   * data when the user scrolls to the bottom of the table. This is alternative to the per page pagination.\n   * @docs-default false\n   */\n  @Input() enableInfiniteScrolling: boolean = false;\n\n  /**\n   * When a group expands the first data column extends if there is not enough place\n   * @docs-default\n   */\n  @Input() updateFirstColumnWidth: (maxWidth: number, th: HTMLTableHeaderCellElement) => void;\n\n  /**\n   * Config of full table loader that is used AdaptBusyDirective under the hood\n   * @docs-default {busy: null, backdrop: true, sticky: true, message: '', loaderType: 'section'}\n   */\n  @Input() busyConfig: BusyConfig = this._getBusyConfig();\n\n  /**\n   * Default 'FilterMatchMode' for all filters\n   * @docs-default FilterMatchMode.contains\n   */\n  @Input() defaultFiltersMatchMode: FilterMatchMode = FilterMatchMode.contains;\n\n  /**\n   * Wraps long text on a new line instead of truncating\n   * @docs-default false\n   */\n  @Input() wrapCellText: boolean = false;\n\n  /**\n   * Minimum amount of content buffer (in pixels) that the viewport must render\n   * Additional information https://material.angular.io/cdk/scrolling/api\n   * @docs-default\n   */\n  @Input() minBufferPx: number;\n\n  /**\n   * Configures how much buffer space to render back up to when it detects that more buffer is required\n   * Additional information https://material.angular.io/cdk/scrolling/api\n   * @docs-default\n   */\n  @Input() maxBufferPx: number;\n\n  /**\n   * Unique attribute test-id for QA\n   * @since 11.14.0\n   * @docs-default 'adapt-table'\n   */\n  @Input() testID: string = 'adapt-table';\n\n  /**\n   * Based on chosen mode customer will see different variants of selection.<br/>There are 3 possible variants:<br /><b>Both</b> - allows to use both type of selection: \"Select on page\" and \"Select all in table\"<br /><b>Chunk</b> - allows to use only \"Select on page\" type<br /><b>All</b> - allows to use only \"Select all in table\" type\n   * @since 11.10.0\n   * @docs-default AdaptTableHeaderSelectionMode.Both\n   */\n  @Input() headerSelectionMode: AdaptTableHeaderSelectionMode = AdaptTableHeaderSelectionMode.Both;\n\n  /**\n   * Number of disabled rows that are selected. Used to calculate header selection menu actions visibility and checkbox state in lazy mode\n   * @since 11.10.0\n   * @docs-default 0\n   */\n  @Input() disabledSelectedRowsCount: number = 0;\n\n  /**\n   * Number of disabled rows that are not selected. Used to calculate header selection menu actions visibility and checkbox state in lazy mode\n   * @since 11.10.0\n   * @docs-default 0\n   */\n  @Input() disabledNotSelectedRowsCount: number = 0;\n\n  /**\n   * Number of disabled rows that are selected in filtering mode. Used to calculate header selection menu actions visibility and checkbox state in lazy mode while filtering\n   * @since 11.10.0\n   * @docs-default 0\n   */\n  @Input() disabledSelectedFilteredRowsCount: number = 0;\n\n  /**\n   Number of disabled rows that are not selected in filtering mode. Used to calculate header selection menu actions visibility and checkbox state in lazy mode while filtering\n   * @since 11.10.0\n   * @docs-default 0\n   */\n  @Input() disabledNotSelectedFilteredRowsCount: number = 0;\n\n  /**\n   Number of selected rows in filtering mode. Used to calculate header selection menu actions visibility and checkbox state in lazy mode while filtering\n   * @since 11.10.0\n   * @docs-default 0\n   */\n  @Input() selectedFilteredRowsCount: number = 0;\n\n  /**\n   Total amount of records inside group. Used to calculate header selection menu actions visibility and checkbox state in lazy mode\n   * @since 11.10.0\n   * @docs-default 0\n   */\n  @Input() totalRecordsInGroup: number = 0;\n\n  /**\n   * Disabling possibility to select rows if set to true\n   * @docs-default false\n   */\n  @Input() disableRowSelection: boolean = false;\n\n  /**\n   * Flag that should be set to true if table data has nesting structure. Used to show/hide expansion icon\n   * @docs-default false\n   */\n  @Input() nestingStructureData: boolean = false;\n\n  /**\n   * In case when table should have nesting view 'nestingKey' property allow to configure name of property where children elements are located. Used to show/hide expansion icon\n   * @docs-default 'children'\n   */\n  @Input() nestingKey: string = 'children';\n\n  /**\n   * Enables row editing on 'Enter' keydown when cell is in focus\n   * @docs-default false\n   */\n  @Input() enableRowEditing: boolean = false;\n\n  /**\n   * @docs-default false\n   */\n  @Input() autoScrollToTop: boolean = false;\n\n  // Texts\n  /**\n   * @docs-default\n   *\n   * @deprecated from v8.26.1 Use 'texts' instead\n   */\n  @Input() paginationTexts: PaginationTexts;\n\n  /**\n   * @docs-default\n   *\n   * @deprecated from v8.26.1 Use 'texts' instead\n   */\n  @Input() toolbarTexts: ToolbarTexts;\n\n  /**\n   * @docs-default\n   *\n   * @deprecated from v8.26.1 Use 'texts' instead\n   */\n  @Input() tableTexts: TableTexts;\n\n  /**\n   * @docs-default\n   *\n   * @deprecated from v8.26.1 Use 'texts' instead\n   */\n  @Input() filtersTexts: FiltersTexts = {};\n\n  /**\n   * @docs-default\n   *\n   * @deprecated from v8.26.1 Use 'texts' instead\n   */\n  @Input() headerCellMenuTexts: HeaderCellMenuTexts;\n\n  /**\n   * Custom texts for all parts of the table\n   * @docs-default\n   */\n  @Input() texts: TableCustomTexts;\n\n  /**\n   * For showing a loader at the bottom of the table when is loading more row data\n   * @docs-default\n   */\n  @Input() loadingMore: boolean;\n\n  /**\n   * Allows to merge columns while table resizing\n   * @docs-default\n   */\n  @Input() mergeColumns: MergeColumnConfig[];\n\n  /**\n   * The resolver that will be applied for each row to check selection ability. Useful to apply custom logic for row selection ability\n   * @docs-default\n   */\n  @Input() disabledRowSelectionResolver: (rowData: RowData) => boolean;\n\n  /**\n   * Used to pass function that allow or disallow columns reordering based on result. See example of usage on \"Add dynamic data\" table\n   * @docs-default\n   */\n  @Input() allowColumnReorderingResolver: (\n    draggedHeaderColumnData: AdaptDataDirective<HeaderDataCellDirectiveParams, HTMLTableHeaderCellElement>,\n    droppedHeaderColumnData: AdaptDataDirective<HeaderDataCellDirectiveParams, HTMLTableHeaderCellElement>\n  ) => boolean;\n\n  /**\n   * The resolver that will be applied for each row to check ability to expand row. Useful to apply custom logic for row expansion\n   * @docs-default\n   */\n  @Input() disableRowExpandingResolver: (rowData: RowData) => boolean;\n\n  /**\n   * Input can be useful to pass aria data for different parts of the table rows(used to add aria data for checkboxes, radiobuttons, expansion buttons and groups)\n   * @docs-default\n   * @since 12.14.0\n   */\n  @Input() rowAriaDataResolver: (rowData: RowDataItem | GroupedRowData) => AdaptTableRowAriaData;\n\n  /**\n   * Used to set static width for table. By default, table is flexible and try to change width depends on viewport\n   * @docs-default null\n   */\n  @Input() tableWidthConfig: TableWidthConfig = null;\n\n  /**\n   * Template that will be shown when row expanded. If not set, the expansion icon will be hidden\n   * @docs-default\n   */\n  @Input() set expandedRowTemplate(template: TemplateRef<ExpandedRowTemplateParams>) {\n    this._expandedRowTemplate = template;\n    this.expandedRowTemplateRef = isDefined(template) ? this.rowExpansionTemplate : null;\n  }\n\n  get expandedRowTemplate(): TemplateRef<ExpandedRowTemplateParams> {\n    return this._expandedRowTemplate;\n  }\n\n  /**\n   * Show/hide row data refreshing state\n   * @docs-default\n   */\n  @Input() get isRefreshingRowData(): boolean {\n    return this._isRefreshingRowData;\n  }\n\n  set isRefreshingRowData(value: boolean) {\n    if (value) {\n      this.zone.onStable\n        .pipe(takeUntil(this._destroyed$), take(1))\n        .subscribe(() => {\n          const tableHeaderHeight = this.scrollable ?\n            this.scrollableView.scrollHeaderViewChild.nativeElement.offsetHeight :\n            this.tableHeader.nativeElement.offsetHeight + 2;\n\n          this.tableBodyHeight = `calc(100% - ${tableHeaderHeight}px)`;\n          // never detectChanges in a subscription to `onStable` without reattaching to the NgZone\n          // (onStable always emits outside the NgZone)\n          this.zone.run(() => SafeCdr.detectChanges(this.cd));\n        });\n    }\n\n    this._isRefreshingRowData = value;\n  }\n\n  /**\n   * Rows data\n   * @docs-default []\n   */\n  @Input()\n  set value(value: RowData[]) {\n    this._value = value;\n\n    if (this.autoScrollToTop && value && this.lazy && value.length <= this.rows && !this.enableInfiniteScrolling) {\n      this.tryScrollToTopTableBody();\n    }\n  }\n\n  get value(): RowData[] {\n    return this._value;\n  }\n\n  /**\n   * Toggle table borders visibility\n   * @docs-default false\n   */\n  @HostBinding(`class.${AdaptTableClasses.Bordered}`)\n  @Input() bordered: boolean = false;\n\n  /**\n   * Show paginator when set to true\n   * @docs-default\n   */\n  @HostBinding(`class.${AdaptTableClasses.Pageable}`)\n  @Input() paginator: boolean;\n\n  /**\n   * Toggle \"striped\" rows mode. If true, every other row will have different background\n   * @docs-default false\n   */\n  @HostBinding(`class.${AdaptTableClasses.Striped}`)\n  @Input() striped: boolean = false;\n\n\n  // TODO: Refactor this if possible\n  /**\n   * Emits the lazy load event\n   */\n    // eslint-disable-next-line @angular-eslint/no-output-on-prefix\n  @Output() readonly onLazyLoad: EventEmitter<AdaptLazyLoadEvent>;\n\n  /**\n   * Emits on refresh button click\n   */\n  @Output() readonly rowDataRefresh: EventEmitter<MouseEvent> = new EventEmitter<MouseEvent>();\n\n  /**\n   * Emits the event on saving of row editing\n   */\n  @Output() readonly savedRowEditing: EventEmitter<SaveRowEvent> = new EventEmitter<SaveRowEvent>();\n\n  /**\n   * Emits the event on cancel of row editing\n   */\n  @Output() readonly canceledRowEditing: EventEmitter<SaveRowEvent> = new EventEmitter<SaveRowEvent>();\n\n  /**\n   * Emits the event when user clicks on checkbox of group\n   */\n  @Output() readonly groupSelection: EventEmitter<GroupSelectionEvent> = new EventEmitter<GroupSelectionEvent>();\n\n  /**\n   * Emits the event on click on a checkbox in the header of the table when groups present\n   */\n  @Output() readonly allGroupedRowsSelection: EventEmitter<AllGroupedRowsSelectionEvent> = new EventEmitter<AllGroupedRowsSelectionEvent>();\n\n  /**\n   * Emits the event on group expansion\n   */\n  @Output() readonly groupExpansion: EventEmitter<GroupExpansionEvent> = new EventEmitter<GroupExpansionEvent>();\n\n  /**\n   * Emits when column visibility changed\n   */\n  @Output() readonly columnsVisibilityChange: EventEmitter<AdaptColumnsVisibilityChange[]> = new EventEmitter<AdaptColumnsVisibilityChange[]>();\n\n  /**\n   * Emits when the user starts dragging the item\n   */\n  @Output() readonly rowDragStart: EventEmitter<AdaptRowDragStartedEvent> = new EventEmitter<AdaptRowDragStartedEvent>();\n\n  /**\n   * Emits when the user has released a drag item, before any animations have started\n   */\n  @Output() readonly rowDragRelease: EventEmitter<AdaptRowDragReleaseEvent> = new EventEmitter<AdaptRowDragReleaseEvent>();\n\n  /**\n   * Emits when the user stops dragging an item in the container\n   */\n  @Output() readonly rowDragEnd: EventEmitter<AdaptRowDragEndEvent> = new EventEmitter<AdaptRowDragEndEvent>();\n\n  /**\n   * Emits when the user drops the item inside a container\n   */\n  @Output() readonly rowDragDrop: EventEmitter<AdaptDragDropEvent> = new EventEmitter<AdaptDragDropEvent>();\n\n  /**\n   * Emits when the user click on any export button. Usage: listen to this event to be notified when to handle table data export <adapt-table (export)=\"function($event)\"></adapt-table>\n   * @since 12.10.0\n   */\n  @Output() readonly export: EventEmitter<ExportEvent> = new EventEmitter<ExportEvent>();\n\n  /**\n   * Emits when popupAnimationDone event triggered on toolbar dropdown item\n   * Can be useful when you want to handle custom logic after dropdown opened/closed(for example register items from custom template for a correct work of keyboard navigation)\n   * @since 12.18.0\n   */\n  @Output() readonly toolbarPopupAnimationDone: EventEmitter<ToolbarPopupAnimationDoneEvent> = new EventEmitter<ToolbarPopupAnimationDoneEvent>();\n\n  @HostBinding(`class.${AdaptTableClasses.Main}`) mainClass: boolean = true;\n  @HostBinding(`class.${AdaptTableClasses.AdaptTable}`) adaptTableClass: boolean = true;\n\n  @HostBinding(`class.${AdaptTableClasses.Scrollable}`) get scrollableClass(): boolean {\n    return this.scrollable;\n  }\n\n  @HostBinding(`class.${AdaptTableClasses.NotScrollable}`) get notScrollableClass(): boolean {\n    return !this.scrollableClass;\n  }\n\n  @HostBinding(`class.${AdaptTableClasses.IsEmptyState}`) get isEmptyState(): boolean {\n    return this.isEmpty();\n  }\n\n  get hasSelection(): boolean {\n    return !!this.selectionMode;\n  }\n\n  get hasExpandingBtn(): boolean {\n    return !!(this.expandedRowTemplate || this.hasAtLeastOneRowGroupedData());\n  }\n\n  get canShowFullLoader(): boolean {\n    return this.showLoader && !this.loadingMore;\n  }\n\n  get paginatorClass(): string {\n    return this.paginatorAlign === 'right' ? 'at-paginator--right' : '';\n  }\n\n  private _loading: boolean = false;\n\n  get loading(): boolean {\n    return this._loading;\n  }\n\n  /**\n   * Control loading state\n   * @docs-default false\n   */\n  @Input()\n  @HostBinding(`class.${AdaptTableClasses.LoadingFullTable}`)\n  set loading(val: boolean) {\n    this.setIsLoadingState(val);\n  }\n\n  get selectionLimit(): number {\n    return this.toolbarConfig && this.toolbarConfig.selectionLimit;\n  }\n\n  get hasSelectionLimit(): boolean {\n    return !this.isSingleSelectionMode() && Boolean(this.selectionLimit);\n  }\n\n  get isSingleSortMode(): boolean {\n    return this.sortMode === SortMode.Single;\n  }\n\n  get isMultipleSortMode(): boolean {\n    return this.sortMode === SortMode.Multiple;\n  }\n\n  private _hasVerticalBodyOverflow: boolean = false;\n  private _docListener: () => void;\n  private _showedTooltipAfterGridMouseLeave: boolean;\n  private _showInstantiatedTooltipDelayed: (target: HTMLElement, tooltipNewValue: TooltipValue) => void;\n  private _lastTooltipTargetCell: HTMLElement;\n  private _lastGridMouseEvent: MouseEvent;\n  private _dontEmitInfiniteScroll: boolean = false;\n  private _instanceId: number = ++AdaptTableComponent.LAST_TABLE_INSTANCE_ID;\n  private _isRefreshingRowData: boolean = false;\n  private _expandedRowTemplate: TemplateRef<ExpandedRowTemplateParams>;\n  private _destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n\n  private _tooltipOverlayWithPortal: AdaptOverlayWithPortal<AdaptTooltipComponent>;\n  private _tooltipOverlayPlacements: AdaptOverlayConnectedPositions;\n\n  private _defaultTexts: TableCustomTexts = {\n    textFilterTexts: {},\n    selectFilterTexts: {},\n    mergedFiltersTexts: {}\n  };\n\n  private readonly _defaultMinColWidth: number = 45;\n\n  constructor(\n    el: ElementRef<HTMLElement>,\n    zone: NgZone,\n    tableService: TableService,\n    cd: ChangeDetectorRef,\n    filterService: FilterService,\n    private _dir: Directionality,\n    private _renderer: Renderer2,\n    private _adaptDeviceDetectionService: AdaptDeviceDetectionService,\n    private _ts: AdaptTranslateService,\n    private _deprecationMiddleware: AdaptTableDeprecationMiddleware,\n    private _overlayService: AdaptOverlayService,\n    private _injector: Injector,\n  ) {\n    super(el, zone, tableService, cd, filterService);\n\n    this.editMode = 'row';\n    this.paginatorPosition = 'none';\n    this.reorderableColumns = true;\n    this.rowTrackBy = this.trackByForRowsData.bind(this);\n    this.trackByForRenderingRows = this.trackByForRenderingRows.bind(this);\n    this.trackByForRenderingColumns = this.trackByForRenderingColumns.bind(this);\n    this.trackByForColumns = this.trackByForColumns.bind(this);\n    this.trackByForRowsData = this.trackByForRowsData.bind(this);\n    this.isRtl = this._dir.value === 'rtl';\n    this.setDefaultTexts(_ts.getCurrentLanguage());\n\n    this._tooltipOverlayPlacements = getOverlayConnectedPositions(this._dir.value);\n  }\n\n\n  /* Lifecycles START */\n\n  ngOnInit(): void {\n    if (this.virtualScroll && !this.scrollable) {\n      adaptError('ADAPT TABLE: Seems like you are trying to use \"virtualScroll\" for non scrollable table. Please set \"scrollable\" to \"true\" or remove \"virtualScroll\"');\n    }\n\n    super.ngOnInit();\n    this._deprecationMiddleware.init(this);\n\n    this.primengTable = this;\n    this.bodyTemplate = this.tableBodyTemplateRef;\n    this.headerTemplate = this.tableHeaderTemplateRef;\n    this.colGroupTemplate = this.tableColgroupTemplateRef;\n    this.emptyMessageTemplate = this.tableEmptyMessageTemplateRef;\n\n    this.isMobile = this._adaptDeviceDetectionService.isMobile();\n    this.texts = {...this._defaultTexts, ...this.texts};\n\n    this.rowSelectionRadiobuttonName = `rowSelectionGroup${this._instanceId}`;\n\n    this.columns.forEach((col) => {\n      /*\n       * Generate property columnAdaptID to assign [attr.data-testid] in QA purposes.\n       * Column index must be static number during reordering columns.\n       */\n      col.columnAdaptID = 'adapt-table-' + this._instanceId + '-th-' + this.columnIndex++;\n    });\n\n    this._autoScrollTopOnValueSourceChangeForNotLazy();\n\n    // If totalRecords is null we assume that all other inputs also can't be calculated\n    if (isNull(this.totalRecords)) {\n      this.disabledSelectedRowsCount = null;\n      this.disabledNotSelectedRowsCount = null;\n      this.disabledSelectedFilteredRowsCount = null;\n      this.disabledNotSelectedFilteredRowsCount = null;\n      this.selectedFilteredRowsCount = null;\n      this.totalRecordsInGroup = null;\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this._setHostClassHasNotScroll();\n\n    this.zone.runOutsideAngular(() => {\n      this.zone.onStable.asObservable().pipe(takeUntil(this._destroyed$)).subscribe(() => {\n        // !TODO: Potential performance bottleneck\n        this.updateHasBodyScroll();\n      });\n    });\n\n\n    this.updateFirstHeaderCellWidth();\n\n    this._showInstantiatedTooltipDelayed = debounce(this._showInstantiatedTooltip, this.tooltipInitialDelayMs);\n\n    this.zone.runOutsideAngular(() => {\n      fromEvent(this.el.nativeElement, 'mousemove').pipe(\n        debounceTime(100), takeUntil(this._destroyed$)\n      ).subscribe((e: MouseEvent) => this._onTableMouseMoveDebounced(e));\n\n      fromEvent(this.el.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed$))\n        .subscribe((e: MouseEvent) => this._onTableMouseLeave(e));\n\n      fromEvent(this.el.nativeElement, 'mousemove').pipe(takeUntil(this._destroyed$))\n        .subscribe((e: MouseEvent) => this._onTableMouseMove(e));\n\n      fromEvent(this.el.nativeElement, 'click').pipe(takeUntil(this._destroyed$))\n        .subscribe((e: Event) => this._onTableClick(e));\n    });\n\n    this._enableKeyboardNavigation();\n    this.subscribeOnTableBodyScroll();\n\n    this._recalculateActionColWidth();\n\n    this.tableService.viewRelatedDataSource$\n      .pipe(takeUntil(this._destroyed$))\n      .subscribe(() => {\n        this._recalculateActionColWidth();\n      });\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n\n    if (this._docListener) {\n      this._docListener();\n    }\n\n    this._hideTooltip();\n\n    this._destroyed$.next(true);\n    this._destroyed$.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    super.ngOnChanges(changes);\n\n    if (changes.rows && !changes.rows.firstChange && this.virtualScroll) {\n      this.cd.detectChanges();\n    }\n\n    if (changes.texts && !changes.texts.firstChange) {\n      this.texts = {...this._defaultTexts, ...this.texts};\n    }\n  }\n\n  /* Lifecycles END */\n\n  /* ------------------------------------------------------------------------------------------------ */\n\n  /* Getters START */\n\n  getTableService(): TableService {\n    return this.tableService;\n  }\n\n  getScrollableBodyElement(): HTMLElement {\n    if (this.virtualScroll) {\n      return this.scrollableView && this.scrollableView.virtualScrollBody\n        && this.scrollableView.virtualScrollBody.elementRef.nativeElement;\n    }\n\n    return this.scrollableView && this.scrollableView.scrollBodyViewChild.nativeElement;\n  }\n\n  getColumnData(dataItem: RowDataItem, column: ColumnConfig): PrimaryKey {\n    return this.resolveFieldData(dataItem, column.field);\n  }\n\n  getCurrentTableColumnsCount(columns: ColumnConfig[]): number {\n    return this.getColumnsForRendering(columns).length + (+!!this.isMultipleSelectionMode()) + (+!!this.isSingleSelectionMode()) +\n      (+!!this.hasExpandingBtn) + (+this.enableReorderableRows);\n  }\n\n  getVisibleColumns(columns?: ColumnConfig[]): ColumnConfig[] {\n    return (columns || this.columns).filter(c => this.isColumnVisible(c));\n  }\n\n  getColumnsForRendering(columns?: ColumnConfig[]): RenderingColumnConfig[] {\n    const visibleColumns = this.getVisibleColumns(columns);\n\n    if (!this.mergeColumns) {\n      return visibleColumns.map(column => {\n        return {\n          columnsConfigs: [column],\n          type: RenderingColumnType.Simple\n        };\n      });\n    }\n\n    const columnsOrder = {};\n\n    visibleColumns.forEach((col, i) => {\n      columnsOrder[col.field] = i;\n    });\n\n    const currentViewportWidth = window.innerWidth;\n\n    const mergedColumnPairs = this.mergeColumns ? this.mergeColumns\n      .filter(item => item.viewportWidth > currentViewportWidth\n        && [this._getColumnByField(visibleColumns, item.field1), this._getColumnByField(visibleColumns, item.field2)]\n          .every(column => isDefined(column)))\n      .map(pair => {\n        return {\n          columnsConfigs: [this._getColumnByField(visibleColumns, pair.field1), this._getColumnByField(visibleColumns, pair.field2)]\n            .sort((a, b) => columnsOrder[a.field] - columnsOrder[b.field]),\n          type: RenderingColumnType.Merged\n        };\n      }) : [];\n\n    const singleColumns = visibleColumns.filter(column => {\n      return !mergedColumnPairs.some(item => item.columnsConfigs[0].field === column.field\n        || item.columnsConfigs[1] && item.columnsConfigs[1].field === column.field);\n    }).map(item => {\n      return {\n        columnsConfigs: [item],\n        type: RenderingColumnType.Simple\n      };\n    });\n\n    return [...singleColumns, ...mergedColumnPairs]\n      .sort((a, b) => columnsOrder[a.columnsConfigs[0].field] - columnsOrder[b.columnsConfigs[0].field]);\n  }\n\n  getColumnWidth(column: ColumnConfig, minWidth: string, colEl?: HTMLTableColElement): string | null {\n    if (!column.width && this.scrollable && this.isMobile) {\n      return `${Math.floor(this.tableContainer.nativeElement.offsetWidth * .9)}px`;\n    }\n\n    const minWidthNumber = parseInt(minWidth, 10);\n\n    if (column.width\n      && (column.width.includes('px') && parseInt(column.width) > minWidthNumber\n        || colEl?.offsetParent && colEl?.clientWidth > minWidthNumber)) {\n      return column.width;\n    }\n\n    // To avoid situations when column has 0 width and can't be visible for the user set \"width\" property equal \"min-width\".\n    // We need to do that because min-width not always work correctly for table columns.\n    // Additional details can be found here - https://github.bmc.com/bmc-ux/adapt-angular/issues/7833\n    if (colEl?.offsetParent && colEl?.clientWidth <= minWidthNumber) {\n      return minWidth;\n    }\n\n    return null;\n  }\n\n  getColumnStyles(column: ColumnConfig, colEl?: HTMLTableColElement): { width: string; minWidth: string } {\n    const minWidth = isDefined(column.minWidth) ? getValueOrFunc(column.minWidth) : `${this._defaultMinColWidth}px`;\n    // If columns was resized take width info from the data attribute \"resizedWidth\" where saved correct width after resize\n    const width = (this.resizableColumns ? colEl?.dataset['resizedWidth'] : null) || this.getColumnWidth(column, minWidth, colEl);\n\n    return {width, minWidth};\n  }\n\n  getRowGroupTitle(dataItem: GroupedRowData): string | unknown {\n    return dataItem.groupTitle ?? dataItem.groupValue;\n  }\n\n  getPlainExpandedRenderingRows(rowsData: RowData[], withNotExpanded: boolean = false): RenderingGroupedRowData[] {\n    if (isNil(rowsData)) {\n      return [];\n    }\n\n    let rootGroupDataItemsCount = 0;\n    let hasGroup = false;\n\n    const getPlainExpandedRenderingRowsRec = (dataItem: RowData, nestingLevel: number, primengRowIndex: number): RenderingGroupedRowData[] => {\n      if (isDefined(dataItem) && hasRowGroupedData(dataItem)) {\n        hasGroup = true;\n\n        if (withNotExpanded || this.isExpandedGroup(dataItem)) {\n          const expItems: RenderingGroupedRowData[] = [{\n            nestingLevel,\n            rowData: dataItem,\n            isGroup: true,\n            rowIndexForRootGroup: 0,\n            editing: false,\n            groupExpanded: true,\n            rowExpanded: false,\n          }];\n\n          for (const item of dataItem.items) {\n            expItems.push(...getPlainExpandedRenderingRowsRec(item, nestingLevel + 1, primengRowIndex));\n          }\n\n          return expItems;\n        }\n\n        return [{\n          nestingLevel,\n          rowData: dataItem,\n          isGroup: true,\n          rowIndexForRootGroup: 0,\n          editing: false,\n          groupExpanded: false,\n          rowExpanded: false,\n        }];\n      } else {\n        const rowIndexForRootGroup = hasGroup ? (rootGroupDataItemsCount++) : primengRowIndex;\n\n        return [{\n          nestingLevel,\n          rowData: dataItem,\n          isGroup: false,\n          rowIndexForRootGroup,\n          editing: this.isRowEditing(dataItem),\n          groupExpanded: false,\n          rowExpanded: this.isRowExpanded(dataItem),\n        }];\n      }\n    };\n\n    return flatten(rowsData.map((rowData, i) => getPlainExpandedRenderingRowsRec(rowData, 0, i)));\n  }\n\n  getCellStyle(renderRowData: RenderingGroupedRowData, dataColumnIndex?: number, column?: ColumnConfig): StylesObject {\n    const nl = renderRowData.nestingLevel;\n    let baseStyles: StylesObject;\n\n    if (nl > 0 && (!dataColumnIndex || dataColumnIndex === 0)) {\n      if (!this.isRtl) {\n        baseStyles = {\n          paddingLeft: `${this.nestedGroupPadding * nl + this.expandindCellInitialPadding}px`,\n        };\n      } else {\n        baseStyles = {\n          paddingRight: `${this.nestedGroupPadding * nl + this.expandindCellInitialPadding}px`,\n        };\n      }\n    }\n\n    if (column && column.dataCellStyle) {\n      const param: DataCellCustomStyle = {\n        dataItem: renderRowData.rowData,\n        rowIndex: renderRowData.rowIndexForRootGroup,\n        column,\n        expanded: renderRowData.rowExpanded,\n        editing: renderRowData.editing,\n      };\n\n      const custom = getValueOrFunc(column.dataCellStyle, param);\n\n      if (custom) {\n        return baseStyles ? Object.assign({}, custom, baseStyles) : custom;\n      }\n    }\n\n    return baseStyles;\n  }\n\n  getMergedCellStyle(renderRowData: RenderingGroupedRowData, dataColumnIndex?: number, columns?: ColumnConfig[]): StylesObject {\n    return columns.reduce((styles, column) => {\n      return Object.assign(styles, this.getCellStyle(renderRowData, dataColumnIndex, column));\n    }, {} as StylesObject);\n  }\n\n  /** Returns reference for filteredValue || value || [] */\n  getAllCurrentRows(): RowData[] {\n    return this.filteredValue || this.value || [];\n  }\n\n  getEmptyStateLabelText(): string {\n    return this.hasFilter()\n      ? this.texts.emptyStateWithFilterLabelText\n      : this.texts.emptyStateLabelText;\n  }\n\n  getDataCellClass(column: ColumnConfig, renderRowData: RenderingGroupedRowData, element: HTMLTableDataCellElement): string {\n    const classes: string[] = this.getActionConfig(column) ? [AdaptTableClasses.ActionsCell] : [];\n\n    if (renderRowData.editing && this.isEditableColumn(column)) {\n      classes.push(AdaptTableClasses.EditingCell);\n    }\n\n    if (column.dataCellClass) {\n      const param: DataCellCustomClass = {\n        dataItem: renderRowData.rowData,\n        rowIndex: renderRowData.rowIndexForRootGroup,\n        column,\n        expanded: renderRowData.rowExpanded,\n        editing: renderRowData.editing,\n      };\n\n      const customClass = getValueOrFunc(column.dataCellClass, param);\n\n      if (customClass) {\n        classes.push(customClass);\n      }\n    }\n\n    if (element && this._hasCellFocus(element)) {\n      classes.push('at-cell-focus');\n    }\n\n    return classes.join(' ');\n  }\n\n  getMergedDataCellClass(columns: ColumnConfig[], renderRowData: RenderingGroupedRowData, element: HTMLTableDataCellElement): string {\n    return columns.map(column => this.getDataCellClass(column, renderRowData, element)).join(' ');\n  }\n\n  getHeaderClass(column: ColumnConfig): string {\n    if (column.headerClass) {\n      return getValueOrFunc(column.headerClass);\n    }\n\n    return '';\n  }\n\n  getMergedHeaderClass(columns: ColumnConfig[]): string {\n    return columns.map(column => this.getHeaderClass(column)).join(' ');\n  }\n\n  getDataRowClass(renderingRowData: RenderingGroupedRowData): string {\n    const classes = renderingRowData.rowExpanded ? ['at-row--expanded'] : [];\n\n    if (this.rowsCustomClass) {\n      const customClass = getValueOrFunc(this.rowsCustomClass, renderingRowData);\n\n      if (customClass) {\n        classes.push(customClass);\n      }\n    }\n\n    if (this.isRowSelected(renderingRowData.rowData)) {\n      classes.push('ui-state-highlight'); // primeng class\n    }\n\n    if (!this.isRowSelectionDisabled(renderingRowData.rowData) && this.isSingleSelectionMode()) {\n      classes.push('ui-selectable-row'); // primeng class\n    }\n\n\n    return classes.join(' ');\n  }\n\n  getGroupRowClass(renderingRowData: RenderingGroupedRowData): string {\n    const classes = renderingRowData.groupExpanded ? ['at-group-row--expanded'] : [];\n\n    if (this.rowsCustomClass) {\n      const customClass = getValueOrFunc(this.rowsCustomClass, renderingRowData);\n\n      if (customClass) {\n        classes.push(customClass);\n      }\n    }\n\n    return classes.join(' ');\n  }\n\n  getColumnTemplateParams(column: ColumnConfig, renderRowData: RenderingGroupedRowData): DataCellTemplateParams {\n    return {\n      column,\n      dataItem: renderRowData.rowData,\n      rowIndex: renderRowData.rowIndexForRootGroup,\n      expanded: renderRowData.rowExpanded,\n      editing: renderRowData.editing,\n    };\n  }\n\n  getGroupValueDataCellTemplateParams(renderingRowData: RenderingGroupedRowData): GroupValueDataCellTemplateParams {\n    return {$implicit: renderingRowData};\n  }\n\n  getCurrentPageDisplayingRows(): RowData[] {\n    if (this.paginator && !this.lazy) {\n      return this.getAllCurrentRows().slice(this.first, this.first + this.rows);\n    } else {\n      return this.getAllCurrentRows();\n    }\n  }\n\n  getCurrentPageDisplayingRowsItems(): RowDataItem[] {\n    return this.getRowsItems(this.getCurrentPageDisplayingRows());\n  }\n\n  getRowsItems(rows: RowData[]): RowDataItem[] {\n    const rowDataItems: RowDataItem[] = [];\n\n    this.goRecursivelyByItemsInGroups(rows, (row) => {\n      rowDataItems.push(row);\n    });\n\n    return rowDataItems;\n  }\n\n  getCurrentPageRenderingDataRows(withNotExpanded: boolean = false): RenderingGroupedRowData[] {\n    return this.getPlainExpandedRenderingRows(this.getCurrentPageDisplayingRows(), withNotExpanded);\n  }\n\n  getDataCellTabIndex(column: ColumnConfig, renderRowData: RenderingGroupedRowData): number {\n    return this.getActionConfig(column) || this.isEditableColumn(column) && renderRowData.editing ? -1 : 0;\n  }\n\n  getMergedDataCellTabIndex(columns: ColumnConfig[], renderRowData: RenderingGroupedRowData): number {\n    return columns.every(column => {\n      return this.getActionConfig(column) || this.isEditableColumn(column) && renderRowData.editing;\n    }) ? -1 : 0;\n  }\n\n  getDataRowDirectiveParams(renderingRowData: RenderingGroupedRowData): DataRowDirectiveParams {\n    return {\n      dataItem: renderingRowData.rowData,\n      rowIndex: renderingRowData.rowIndexForRootGroup,\n      expanded: renderingRowData.rowExpanded,\n      editing: renderingRowData.editing,\n    };\n  }\n\n  getHeaderDataCellDirectiveParams(renderingColumn: RenderingColumnConfig, index: number): HeaderDataCellDirectiveParams {\n    return {\n      renderingColumn,\n      column: renderingColumn.columnsConfigs[0],\n      index\n    };\n  }\n\n  getDataCellDirectiveParams(renderingColumn: RenderingColumnConfig, renderRowData: RenderingGroupedRowData): DataCellDirectiveParams {\n    return {\n      column: renderingColumn.columnsConfigs[0],\n      renderingColumn,\n      dataItem: renderRowData.rowData,\n      rowIndex: renderRowData.rowIndexForRootGroup,\n      expanded: renderRowData.rowExpanded,\n      editing: renderRowData.editing,\n    };\n  }\n\n  getExpandedRowTemplateParams(dataItem: RowDataItem, columns: ColumnConfig[], rowIndex: number): ExpandedRowTemplateParams {\n    return {\n      dataItem,\n      rowIndex,\n      columns,\n    };\n  }\n\n  getDataCellTemplateParams(column: ColumnConfig, renderRowData: RenderingGroupedRowData): CellTemplateParams {\n    return {\n      column,\n      renderRowData\n    };\n  }\n\n  getPrimaryKey(data: RowDataItem): PrimaryKey {\n    return this.resolveFieldData(data, this.dataKey);\n  }\n\n  getActionConfig(column: ColumnConfig): ColumnActionsConfig {\n    return column.actionsConfig;\n  }\n\n  getTableWidth(tableWidthConfig: TableWidthConfig, isMobile: boolean): string {\n    if (tableWidthConfig) {\n      return isMobile\n        ? tableWidthConfig.mobile === 'auto' ? 'auto' : `${tableWidthConfig.mobile}`\n        : tableWidthConfig.desktop === 'auto' ? 'auto' : `${tableWidthConfig.desktop}`;\n    }\n\n    return 'auto';\n  }\n\n  /* Getters END */\n\n  /* ------------------------------------------------------------------------------------------------ */\n\n  /* Checkers START */\n\n  hasNotRowNestingLevel(renderRowData: RenderingGroupedRowData): boolean {\n    return !renderRowData.nestingLevel;\n  }\n\n  hasReachedTotalRecords(): boolean {\n    const totalRecords = this.totalRecords;\n\n    return (totalRecords != null || totalRecords !== 0) && totalRecords === this.value.length;\n  }\n\n  /**\n   * In case if user send us `totalRecords` as `null` we assume that there is no possibility to calculate\n   * such data on customer side(for example server restrictions)\n   */\n  isTotalRecordsInfoAvailable(): boolean {\n    return isNumber(this.totalRecords);\n  }\n\n  hasAtLeastOneRowGroupedData(): boolean {\n    const rowsData = this.getAllCurrentRows();\n\n    for (const row of rowsData) {\n      if (isDefined(row) && hasRowGroupedData(row)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  shouldShowExpandingButton(renderRowData: RenderingGroupedRowData): boolean {\n    if (!isDefined(this.expandedRowTemplate)) {\n      return false;\n    }\n\n    const isExpandingDisabled = isFunction(this.disableRowExpandingResolver)\n      ? this.disableRowExpandingResolver(renderRowData.rowData)\n      : false;\n\n    return !isExpandingDisabled;\n  }\n\n  isColumnVisible(column: ColumnConfig): boolean {\n    return !getValueOrFunc(column.hidden);\n  }\n\n  isExpandedGroup(groupedRowData: GroupedRowData): boolean {\n    const fieldGroup = this.expandedGroupsKeys[groupedRowData.groupField];\n\n    return fieldGroup ? fieldGroup[groupedRowData.groupValue] != null : false;\n  }\n\n  isGroupCheckboxDisabled(grd: GroupedRowData): boolean {\n    return !!this.isRowSelectionDisabled(grd) || this._hasAllChildItemsDisabledForSelection(grd);\n  }\n\n  isChildrenExist(rowData: RowDataItem): boolean {\n    return !!(rowData[this.nestingKey] && rowData[this.nestingKey].length);\n  }\n\n  isFilterableColumn(column: ColumnConfig): boolean {\n    if (!this.filterable || column.actionsConfig) {\n      return false;\n    }\n\n    const filterableCol = column.filterable;\n\n    return trueOrNull(filterableCol);\n  }\n\n  isColumnFrozen(column: ColumnConfig): boolean {\n    return getValueOrFunc(column.frozen);\n  }\n\n  hasAtLeastOneFrozenColumn(): boolean {\n    return this.columns.some(column => getValueOrFunc(column.frozen));\n  }\n\n  /* Checkers END */\n\n  /* ------------------------------------------------------------------------------------------------ */\n\n  /* Common START */\n\n  setDefaultTexts(translation: KeyValueObject): void {\n    this._defaultTexts.emptyStateLabelText = translation['adapt.table.emptyState'];\n    this._defaultTexts.emptyStateWithFilterLabelText = translation['adapt.table.emptyStateWithFilter'];\n    this._defaultTexts.actionButtonDefaultLabel = translation['adapt.table.actionButtonDefaultLabel'];\n    this._defaultTexts.unselectAllSelectedTitle = translation['adapt.table.unselectAllSelectedTitle'];\n    this._defaultTexts.saveRowEditingButtonLabel = translation['adapt.common.save'];\n    this._defaultTexts.cancelRowEditingButtonLabel = translation['adapt.common.cancel'];\n    this._defaultTexts.fromToOfTextTemplate = translation['adapt.table.toolbar.fromToOfTextTemplate'];\n    this._defaultTexts.fromToTextTemplate = translation['adapt.table.toolbar.fromToTextTemplate'];\n    this._defaultTexts.totalCountTextTemplate = translation['adapt.table.toolbar.totalCountTextTemplate'];\n    this._defaultTexts.totalCountTextTemplatePlural = translation['adapt.table.toolbar.totalCountTextTemplatePlural'];\n    this._defaultTexts.noRecordsText = translation['adapt.table.toolbar.noRecordsText'];\n    this._defaultTexts.outOfShownTextTemplate = translation['adapt.table.toolbar.outOfShownTextTemplate'];\n    this._defaultTexts.recordsCountShownTextTemplate = translation['adapt.table.toolbar.recordsCountShownTextTemplate'];\n    this._defaultTexts.recordsCountShownTextTemplatePlural = translation['adapt.table.toolbar.recordsCountShownTextTemplatePlural'];\n    this._defaultTexts.searchPlaceholder = translation['adapt.common.search'];\n    this._defaultTexts.searchLabel = translation['adapt.common.search'];\n    this._defaultTexts.visibleColumnsMenuLabel = translation['adapt.table.toolbar.visibleColumnsMenuLabel'];\n    this._defaultTexts.filterButtonLabel = translation['adapt.common.filter'];\n    this._defaultTexts.selected = translation['adapt.table.toolbar.selected'];\n    this._defaultTexts.showAllSelected = translation['adapt.table.toolbar.showAllSelected'];\n    this._defaultTexts.headerSelectRowsArialLabel = translation['adapt.table.headerSelectRowsArialLabel'];\n    this._defaultTexts.refresh = translation['adapt.table.toolbar.refresh'];\n    this._defaultTexts.clearButtonText = translation['adapt.common.clear'];\n    this._defaultTexts.textFilterTexts.placeholder = translation['adapt.common.filter'];\n    this._defaultTexts.textFilterTexts.label = translation['adapt.common.filter'];\n    this._defaultTexts.selectFilterTexts.defaultTitle = translation['adapt.common.filter'];\n    this._defaultTexts.mergedFiltersTexts.buttonNoAppliedFilters = translation['adapt.common.filter'];\n    this._defaultTexts.mergedFiltersTexts.buttonAppliedFilter = translation['adapt.table.filters.mergedFilters.appliedFilter'];\n    this._defaultTexts.mergedFiltersTexts.buttonAppliedFilters = translation['adapt.table.filters.mergedFilters.appliedFilters'];\n    this._defaultTexts.mergedFiltersTexts.appliedFiltersLabel = translation['adapt.table.filters.mergedFilters.appliedFiltersLabel'];\n    this._defaultTexts.goBtnText = translation['adapt.table.pagination.go'];\n    this._defaultTexts.pageNumberText = translation['adapt.table.pagination.pageNumber'];\n    this._defaultTexts.orderLabelSort = translation['adapt.common.sort'];\n    this._defaultTexts.orderLabelAddToSort = translation['adapt.table.headerCellMenu.orderLabelAddToSort'];\n    this._defaultTexts.orderAscBtn = translation['adapt.table.headerCellMenu.orderAsc'];\n    this._defaultTexts.orderDescBtn = translation['adapt.table.headerCellMenu.orderDesc'];\n    this._defaultTexts.selectSortOrderLabel = translation['adapt.table.headerCellMenu.selectSortOrderLabel'];\n    this._defaultTexts.selectSortOrderOption = translation['adapt.table.headerCellMenu.selectSortOrderOption'];\n    this._defaultTexts.removeCurrentFromSortingBtn = translation['adapt.table.headerCellMenu.removeCurrentFromSorting'];\n    this._defaultTexts.clearAllSortingBtn = translation['adapt.table.headerCellMenu.clearAllSorting'];\n    this._defaultTexts.recordsPerPage = translation['adapt.table.paginator.recordsPerPage'];\n    this._defaultTexts.expandRowText = translation['adapt.table.expandRow'];\n    this._defaultTexts.collapseRowText = translation['adapt.table.collapseRow'];\n    this._defaultTexts.prevPageBtnText = translation['adapt.common.previous'];\n    this._defaultTexts.nextPageBtnText = translation['adapt.common.next'];\n\n    this._defaultTexts.selectAllItemsOnPageHeaderLabel = translation['adapt.table.selectAllItemsOnPageHeaderLabel'];\n    this._defaultTexts.selectAllFilteredItemsOnPageHeaderLabel = translation['adapt.table.selectAllFilteredItemsOnPageHeaderLabel'];\n    this._defaultTexts.selectAllPossibleItemsOnPageHeaderLabel = translation['adapt.table.selectAllPossibleItemsOnPageHeaderLabel'];\n    this._defaultTexts.selectAllPossibleFilteredItemsOnPageHeaderLabel = translation['adapt.table.selectAllPossibleFilteredItemsOnPageHeaderLabel'];\n\n    this._defaultTexts.selectAllVisibleItemsHeaderLabel = translation['adapt.table.selectAllVisibleItemsHeaderLabel'];\n    this._defaultTexts.selectAllFilteredVisibleItemsHeaderLabel = translation['adapt.table.selectAllFilteredVisibleItemsHeaderLabel'];\n    this._defaultTexts.selectAllPossibleVisibleItemsHeaderLabel = translation['adapt.table.selectAllPossibleVisibleItemsHeaderLabel'];\n    this._defaultTexts.selectAllPossibleFilteredVisibleItemsHeaderLabel = translation['adapt.table.selectAllPossibleFilteredVisibleItemsHeaderLabel'];\n\n    this._defaultTexts.selectAllItemsInTableHeaderLabel = translation['adapt.table.selectAllItemsInTableHeaderLabel'];\n    this._defaultTexts.selectAllItemsInTableHeaderLabelForUnknownTotalRecords = translation['adapt.table.selectAllItemsInTableHeaderLabelForUnknownTotalRecords'];\n    this._defaultTexts.selectAllFilteredItemsInTableHeaderLabel = translation['adapt.table.selectAllFilteredItemsInTableHeaderLabel'];\n    this._defaultTexts.selectAllPossibleItemsInTableHeaderLabel = translation['adapt.table.selectAllPossibleItemsInTableHeaderLabel'];\n    this._defaultTexts.selectAllPossibleFilteredItemsInTableHeaderLabel = translation['adapt.table.selectAllPossibleFilteredItemsInTableHeaderLabel'];\n\n    this._defaultTexts.deselectAllItemsInTableHeaderLabel = translation['adapt.table.deselectAllItemsInTableHeaderLabel'];\n    this._defaultTexts.deselectAllFilteredItemsInTableHeaderLabel = translation['adapt.table.deselectAllFilteredItemsInTableHeaderLabel'];\n    this._defaultTexts.deselectAllPossibleItemsInTableHeaderLabel = translation['adapt.table.deselectAllPossibleItemsInTableHeaderLabel'];\n    this._defaultTexts.deselectAllPossibleFilteredItemsInTableHeaderLabel = translation['adapt.table.deselectAllPossibleFilteredItemsInTableHeaderLabel'];\n\n    this._defaultTexts.export = translation['adapt.table.toolbar.export'];\n    this._defaultTexts.exportEntireDocument = translation['adapt.table.toolbar.exportEntireDocument'];\n    this._defaultTexts.exportSelected = translation['adapt.table.toolbar.exportSelected'];\n  }\n\n  onRadiobuttonModelChange(rowDataItem: RowDataItem): void {\n    this.toggleRowSelection(rowDataItem);\n  }\n\n  updateHasBodyScroll(): void {\n    if (!this.scrollable) {\n      return;\n    }\n\n    const hasVerticalBodyOverflow = this.scrollableView.hasVerticalOverflow();\n\n    if (this._hasVerticalBodyOverflow === hasVerticalBodyOverflow) {\n      return;\n    }\n\n    this._hasVerticalBodyOverflow = hasVerticalBodyOverflow;\n\n    if (hasVerticalBodyOverflow) {\n      this.el.nativeElement.classList.remove(AdaptTableClasses.HasNotVerticalBodyOverflow);\n    } else {\n      this._setHostClassHasNotScroll();\n    }\n\n    this.scrollableView.alignScrollBar();\n  }\n\n  handleColumnResized(event: ColumnResized): void {\n    this.onColResize.emit(event);\n\n    SafeCdr.detectChanges(this.cd);\n  }\n\n  onGroupToggleClick(groupedRowData: GroupedRowData): void {\n    let fieldGroup = this.expandedGroupsKeys[groupedRowData.groupField];\n\n    if (!fieldGroup) {\n      fieldGroup = this.expandedGroupsKeys[groupedRowData.groupField] = {};\n    }\n\n    const oldIsExpanded = this.isExpandedGroup(groupedRowData);\n\n    if (oldIsExpanded) {\n      delete fieldGroup[groupedRowData.groupValue];\n    } else {\n      fieldGroup[groupedRowData.groupValue] = true;\n    }\n    this.groupExpansion.emit({\n      expanded: !oldIsExpanded,\n      groupedRowData,\n    });\n\n    this.zone.onStable.asObservable().pipe(takeUntil(this._destroyed$), take(1)).subscribe(() => {\n      this.updateFirstHeaderCellWidth();\n    });\n  }\n\n  updateFirstHeaderCellWidth(): void {\n    const firstColDirective = this.dataHeaderCells.first;\n    const firstCol = firstColDirective && firstColDirective.element;\n\n    if (firstCol && Object.keys(this.expandedGroupsKeys).length > 0 && this.dataRows) {\n      firstCol.nativeElement.style.width = null;\n      let maxWidth = 0;\n\n      this.dataRows.forEach(data => {\n        const firstTd = data.element.nativeElement.querySelector('.at-data-cell');\n\n        if (firstTd && firstTd.scrollWidth > firstTd.clientWidth && firstTd.scrollWidth > maxWidth) {\n          maxWidth = firstTd.scrollWidth;\n        }\n      });\n\n      if (maxWidth) {\n        if (this.updateFirstColumnWidth) {\n          this.updateFirstColumnWidth(maxWidth, firstCol.nativeElement);\n        }\n      }\n    }\n  }\n\n  goRecursivelyByItemsInAllGroups(cb: (dataItem: RowDataItem) => void): void {\n    const allRows = this.getAllCurrentRows();\n\n    allRows.forEach(row => this.goRecursivelyByItemsInGroup(row, cb));\n  }\n\n  goRecursivelyByItemsInGroups(rows: RowData[], cb: (dataItem: RowDataItem) => void): void {\n    rows.forEach(row => this.goRecursivelyByItemsInGroup(row, cb));\n  }\n\n  goRecursivelyByItemsInGroup(rowData: RowData, cb: (dataItem: RowDataItem) => void): void {\n    if (isDefined(rowData) && hasRowGroupedData(rowData)) {\n      rowData.items.forEach(item => {\n        this.goRecursivelyByItemsInGroup(item, cb);\n      });\n    } else {\n      cb(rowData);\n    }\n  }\n\n  resolveFieldData(data: RowDataItem, field: string): PrimaryKey {\n    return ObjectUtils.resolveFieldData(data, field);\n  }\n\n  createLazyLoadMetadata(eventSource: AdaptTableEventSource): AdaptLazyLoadEvent {\n    return {\n      eventSource,\n      first: this.first,\n      rows: this.rows,\n      sortField: this.sortField,\n      sortOrder: this.sortOrder,\n      filters: this.filters,\n      globalFilter: this.filters && this.filters.global ? this.filters.global.value : null,\n      multiSortMeta: this.multiSortMeta,\n      loadMore: false,\n      infiniteScrollingFirst: null\n    };\n  }\n\n  subscribeOnTableBodyScroll(): void {\n    const scrollToEndMargin = 2; // in pixels\n    const scrollBody = this.getScrollableBodyElement();\n\n    if (scrollBody) {\n\n      this.zone.runOutsideAngular(() => {\n        fromEvent(scrollBody, 'scroll').pipe(takeUntil(this._destroyed$)).subscribe(() => {\n\n          if (!this.enableInfiniteScrolling || this.loading || this._dontEmitInfiniteScroll\n            || scrollBody.scrollHeight > scrollBody.scrollTop + scrollBody.offsetHeight + scrollToEndMargin) {\n            return;\n          }\n\n          if (this.hasReachedTotalRecords()) {\n            return;\n          }\n\n          const lazyLoadEvent: AdaptLazyLoadEvent = {\n            ...this.createLazyLoadMetadata(AdaptTableEventSource.LoadMore),\n            loadMore: true,\n            infiniteScrollingFirst: this.value.length,\n          };\n\n          this.zone.run(() => {\n            this._emitLazyLoadEvent(lazyLoadEvent);\n          });\n        });\n      });\n    }\n  }\n\n  detectChangesForTooltip(): void {\n    this.zone.runOutsideAngular(() => {\n      setTimeout(() => {\n        if (this._tooltipOverlayWithPortal) {\n          SafeCdr.detectChanges(this._tooltipOverlayWithPortal.componentRef.changeDetectorRef);\n        }\n      });\n    });\n  }\n\n  setIsLoadingState(value: boolean): void {\n    this._loading = value;\n    const busyConfigCopy = {...this.busyConfig};\n\n    if (value) {\n      if (this.busyConfig.busy) {\n        (this.busyConfig.busy as Subscription).unsubscribe();\n      }\n      busyConfigCopy.busy = new Observable().pipe(takeUntil(this._destroyed$)).subscribe();\n      this.busyConfig = busyConfigCopy;\n    } else {\n      if (this.busyConfig.busy) {\n        (this.busyConfig.busy as Subscription).unsubscribe();\n        busyConfigCopy.busy = null;\n        this.busyConfig = busyConfigCopy;\n      }\n    }\n    this.loadingToggle.emit(value);\n  }\n\n  tryScrollToTopTableBody(): void {\n    const scrollableBodyElement = this.getScrollableBodyElement();\n\n    if (scrollableBodyElement) {\n      scrollableBodyElement.scrollTop = 0;\n    }\n  }\n\n  onPageChange(event: AdaptPageChangeEvent): void {\n    super.onPageChange(event);\n\n    if (this.scrollable) {\n      this.resetScrollTop();\n    }\n\n    SafeCdr.detectChanges(this.cd);\n  }\n\n  resetScrollTop(): void {\n    if (this.virtualScroll) {\n      this.scrollToVirtualIndex(0);\n    } else {\n      this.scrollTo({top: 0});\n    }\n  }\n\n  scrollToVirtualIndex(index: number): void {\n    if (this.scrollableView) {\n      this.scrollableView.scrollToVirtualIndex(index);\n    }\n  }\n\n  handleScrollableWrapperResizing(): void {\n    if (this.virtualScroll && this.scrollableView.virtualScrollBody) {\n      // Because dimensions of scrollable wrapper can be changed in runtime\n      // need to call checkViewportSize() method that update the viewport dimensions and re-render\n      this.scrollableView.virtualScrollBody.checkViewportSize();\n    }\n  }\n\n  scrollTo(options: ScrollToOptions): void {\n    if (this.scrollableView) {\n      this.scrollableView.scrollTo(options);\n    }\n  }\n\n  setDefaultActionColWidth(): void {\n    const tableElement: HTMLTableElement = this.scrollable\n      ? this.scrollableView?.scrollTableViewChild?.nativeElement\n      : this.nonScrollableTable?.nativeElement;\n\n    if (!tableElement || !this.actionColElements?.length) {\n      return null;\n    }\n\n    const actionCols = this.actionColElements.toArray();\n    const tableLayout = tableElement.style.tableLayout;\n\n    // Set table layout to auto and actions column width to 1% to get the width of the action column based on its content\n    const actionColsWidth = actionCols.map(actionCol => {\n      this._renderer.setStyle(tableElement, 'tableLayout', 'auto');\n      this._renderer.setStyle(actionCol.nativeElement, 'width', '1%');\n\n      const width = actionCol.nativeElement.clientWidth;\n\n      // Reset styles to previous values after action column width was calculated\n      this._renderer.setStyle(tableElement, 'tableLayout', tableLayout);\n      this._renderer.setStyle(actionCol.nativeElement, 'width', '');\n\n      return width;\n    });\n\n    this.zone.run(() => {\n      // Find maximum column width and set it to the action column\n      actionCols.forEach(actionCol => {\n        this._renderer.setStyle(actionCol.nativeElement, 'width', `${Math.max(...actionColsWidth)}px`);\n      });\n    });\n  }\n\n  /* Common END */\n\n  /* ------------------------------------------------------------------------------------------------ */\n\n  /* TrackBy START */\n\n  trackByForRenderingRows(index: number, renderRowData: RenderingGroupedRowData): string | number {\n    // by primary key or index\n    if (renderRowData.isGroup) {\n      const grd = renderRowData.rowData as GroupedRowData;\n\n      return `groupValue_${grd.groupField}:${grd.groupValue}`;\n    } else {\n      return this.getPrimaryKey(renderRowData.rowData) || index;\n    }\n  }\n\n  trackByForRowsData(index: number, row: RowData): PrimaryKey {\n    return this.getPrimaryKey(row) || index;\n  }\n\n  trackByForRenderingColumns(index: number, renderingColumn: RenderingColumnConfig): string | number {\n    // by primary key or index\n    return renderingColumn.columnsConfigs.map(column => column.field).join('-') || index;\n  }\n\n  trackByForColumns(index: number, column: ColumnConfig): string | number {\n    return column.field || index;\n  }\n\n  /* TrackBy END */\n\n  /* ------------------------------------------------------------------------------------------------ */\n\n  /* Selection feature START */\n\n  getGroupSelectionState(grd: GroupedRowData): CheckboxState {\n    if (this.getRowSelectionArray().length === 0) {\n      return CheckboxState.Unselected;\n    }\n\n    let childrenCount = 0;\n    let selectedChildrenCount = 0;\n\n    this.goRecursivelyByItemsInGroup(grd, (item) => {\n      childrenCount++;\n\n      if (this.isRowSelected(item)) {\n        selectedChildrenCount++;\n      }\n    });\n\n    if (childrenCount === 0 || selectedChildrenCount === 0) {\n      return CheckboxState.Unselected;\n    }\n\n    return childrenCount === selectedChildrenCount ? CheckboxState.Selected : CheckboxState.Indeterminate;\n  }\n\n  getRowSelectionArray(): RowDataItem[] {\n    const selection: RowDataItem | RowDataItem[] = this.selection;\n\n    return selection ? (Array.isArray(selection) ? selection : [selection]) : [];\n  }\n\n  getRowSelectionKeys(): KeyValueObject<boolean> {\n    return this.selectionKeys || {};\n  }\n\n  getSelectableRowsItems(rows: RowData[]): RowDataItem[] {\n    const result: RowDataItem[] = [];\n\n    this.goRecursivelyByItemsInGroups(rows, (row) => {\n      if (!this.isRowSelectionDisabled(row)) {\n        result.push(row);\n      }\n    });\n\n    return result;\n  }\n\n  isSingleSelectionRowSelected(data: RowDataItem): boolean {\n    const selection = this.getRowSelectionArray();\n\n    return selection.length\n      ? this.getPrimaryKey(selection[0]) === this.resolveFieldData(data, this.dataKey)\n      : false;\n  }\n\n  isRowSelected(rowDataItem: RowDataItem | PrimaryKey): boolean {\n    // const rowId = this.getPrimaryKey(rowDataItem);\n    // return rowId == null ? false : this.getRowSelectionKeys()[rowId];\n    if (typeof rowDataItem === 'object' && rowDataItem) {\n      return this.isSelected(rowDataItem);\n    }\n\n    // row Id\n    return this.getRowSelectionKeys()[rowDataItem as PrimaryKey];\n  }\n\n  isRowSelectionCheckboxDisabled(data: RowDataItem): boolean {\n    return this.isRowSelectionDisabled(data)\n      || (this.selectionLimit === (this.getRowSelectionArray().length)\n        && !Object.keys(this.selectionKeys).find(key => key === data[this.dataKey]));\n  }\n\n  isRowSelectionDisabled(rowData: RowData): boolean {\n    if (isFunction(this.disabledRowSelectionResolver)) {\n      return this.disableRowSelection || this.disabledRowSelectionResolver(rowData);\n    } else {\n      return this.disableRowSelection;\n    }\n  }\n\n  isSelectedGroupCheckbox(grd: GroupedRowData): boolean {\n    return grd && !this.isRowSelectionDisabled(grd)\n      && (this.getGroupSelectionState(grd) === CheckboxState.Selected || this.getGroupSelectionState(grd) === CheckboxState.Indeterminate);\n  }\n\n  isGroupSelectionIndeterminate(grd: GroupedRowData): boolean {\n    return this.getGroupSelectionState(grd) === CheckboxState.Indeterminate;\n  }\n\n  onGroupSelectionChanged(checked: boolean, grd: GroupedRowData): void {\n    this.onToogleGroupedRowsSelection(checked, [grd]);\n\n    this.groupSelection.emit({\n      groupedRowData: grd,\n      selected: checked,\n    });\n  }\n\n  addToRowSelection(dataItems: RowDataItem[]): void {\n    if (Array.isArray(dataItems) && dataItems.length === 0) {\n      return;\n    }\n\n    if (this.isMultipleSelectionMode()) {\n      const newSelection = this.getRowSelectionArray().slice();\n      const dataItemsToAdd: RowDataItem[] = [];\n\n      (dataItems as RowDataItem[]).forEach(di => {\n        if (!this.isRowSelected(di)) {\n          dataItemsToAdd.push(di);\n        }\n      });\n\n      newSelection.push(...dataItemsToAdd);\n      this._updateRowSelection(newSelection);\n    } else {\n      this._updateRowSelection(dataItems);\n    }\n  }\n\n  toggleRowSelection(dataItem: RowDataItem, event: Event = null): boolean {\n    if (this.isRowSelectionDisabled(dataItem)) {\n      return false;\n    }\n\n    const dataItemToToggleKey = this.getPrimaryKey(dataItem);\n    const oldSelection = this.getRowSelectionArray().slice();\n    let newSelection: RowDataItem[] = [];\n    let addedToSelection = false;\n\n    if (this.isMultipleSelectionMode()) {\n      let hasRemovedDataItem = false;\n\n      oldSelection.forEach(di => {\n        if (this.getPrimaryKey(di) === dataItemToToggleKey) {\n          hasRemovedDataItem = true;\n        } else {\n          newSelection.push(di);\n        }\n      });\n\n      addedToSelection = !hasRemovedDataItem;\n\n      if (addedToSelection) {\n        newSelection.push(dataItem);\n      }\n    } else {\n      const shouldRemoveDataItem = oldSelection.some(di => this.getPrimaryKey(di) === dataItemToToggleKey);\n\n      addedToSelection = !shouldRemoveDataItem;\n\n      if (addedToSelection) {\n        newSelection = [dataItem];\n      }\n    }\n\n    this._updateRowSelection(newSelection);\n\n    if (addedToSelection) {\n      this.onRowSelect.emit({originalEvent: event, index: null, data: dataItem, type: 'row'});\n    } else {\n      this.onRowUnselect.emit({originalEvent: event, index: null, data: dataItem, type: 'row'});\n    }\n\n    return addedToSelection;\n  }\n\n  removeFromRowSelection(dataItems: RowDataItem[]): void {\n    if (dataItems.length === 0) {\n      return;\n    }\n\n    const oldSelection = this.getRowSelectionArray();\n    const newSelection: RowDataItem[] = [];\n\n    oldSelection.forEach(di => {\n      const selectedDiKey = this.getPrimaryKey(di);\n\n      for (const item of dataItems) {\n        const tempDiKey = this.getPrimaryKey(item);\n\n        if (selectedDiKey === tempDiKey) {\n          return;\n        }\n      }\n\n      newSelection.push(di);\n    });\n\n    this._updateRowSelection(newSelection);\n  }\n\n  // TODO: what if selected row is disabled for selection\n  unselectAllSelected(): void {\n    this._updateRowSelection([]);\n  }\n\n  onToogleGroupedRowsSelection(checked: boolean, rows: RowData[]): void {\n    const dataItemsToChangeSelection = this.getSelectableRowsItems(rows);\n\n    if (checked) {\n      this.addToRowSelection(dataItemsToChangeSelection);\n    } else {\n      this.removeFromRowSelection(dataItemsToChangeSelection);\n    }\n  }\n\n  handleHeaderCheckboxToggle(event: AdaptTableHeaderCheckboxToggleEvent): void {\n    this.onHeaderCheckboxToggle.emit({\n      originalEvent: event.originalEvent,\n      checked: event.checked,\n      eventSource: event.eventSource,\n      filters: event.filters,\n      globalFilter: event.globalFilter\n    });\n\n    this.allGroupedRowsSelection.emit({\n      rowsData: this.getRowSelectionArray(),\n      selected: event.checked,\n    });\n  }\n\n  /* Selection feature END */\n\n  /* ------------------------------------------------------------------------------------------------ */\n\n  /* Row reordering START */\n\n  onReordarableRowMouseDown(elem: HTMLTableRowElement, isGroup: boolean): void {\n    if (!isGroup) {\n      this.setColumnsWidth(elem);\n    }\n  }\n\n  setColumnsWidth(row: HTMLTableRowElement): void {\n    const theadElements = Array.from(this.el.nativeElement.querySelectorAll('tr th'));\n    const currWidth = theadElements.map((elem: HTMLElement) => elem.offsetWidth);\n    const draggableRow = Array.from(row.cells);\n\n    draggableRow.forEach((item: HTMLElement, ind) => {\n      this._renderer.setStyle(item, 'maxWidth', `${currWidth[ind]}px`);\n      this._renderer.setStyle(item, 'width', `${currWidth[ind]}px`);\n\n      if (this.bordered && item.classList.contains('at-data-cell')) {\n        if (this.isRtl) {\n          this._renderer.setStyle(item, 'borderLeft', '1px solid #d9dada');\n        } else {\n          this._renderer.setStyle(item, 'borderRight', '1px solid #d9dada');\n        }\n      }\n    });\n\n  }\n\n  setColumnsWidthToAuto(row: HTMLTableRowElement): void {\n    const draggableRow = Array.from(row.cells);\n\n    draggableRow.forEach((item: HTMLElement) => {\n      this._renderer.setStyle(item, 'maxWidth', 'auto');\n      this._renderer.setStyle(item, 'width', 'auto');\n\n      if (this.bordered && item.classList.contains('at-data-cell')) {\n        if (this.isRtl) {\n          this._renderer.removeStyle(item, 'borderLeft');\n        } else {\n          this._renderer.removeStyle(item, 'borderRight');\n        }\n      }\n    });\n\n  }\n\n  onCdkDropListSortedRow(event: CdkDragSortEvent<RowData[], RenderingGroupedRowData>): void {\n    const currentRowData = event.item.data.rowData;\n    const allCurrentRows = this.getAllCurrentRows();\n    const indexOfRowData = allCurrentRows.findIndex(row => row === currentRowData);\n\n    moveItemInArray(allCurrentRows, indexOfRowData, indexOfRowData + event.currentIndex - event.previousIndex);\n  }\n\n  onRowDragStarted(event: CdkDragStart): void {\n    this.rowDragStart.emit({cdkDragStartEvent: event});\n  }\n\n  onRowDragDropped(event: CdkDragDrop<RowData[]>, elem: HTMLTableRowElement): void {\n    this.rowDragDrop.emit({cdkDragDropEvent: event});\n    this.setColumnsWidthToAuto(elem);\n  }\n\n  onRowDragEnded(event: CdkDragEnd): void {\n    this.rowDragEnd.emit({cdkDragEndEvent: event});\n  }\n\n  onRowDragReleased(event: CdkDragRelease): void {\n    this.rowDragRelease.emit({cdkDragReleaseEvent: event});\n  }\n\n  /* Row reordering END */\n\n  /* ------------------------------------------------------------------------------------------------ */\n\n  /* Row editing START */\n\n  getEditableClonedRow(dataItem: RowDataItem): RowDataItem {\n    return this.currentEditingRows[this.getPrimaryKey(dataItem)].editingDataItem;\n  }\n\n  isEditableColumn(column: ColumnConfig): boolean {\n    return trueOrNull(column.editable);\n  }\n\n  initRowEditing(dataItem: RowDataItem): void {\n    this.currentEditingRows[this.getPrimaryKey(dataItem)] = {\n      originalDataItem: {...dataItem},\n      editingDataItem: {...dataItem},\n      dataItemReference: dataItem,\n    };\n    this.initRowEdit(dataItem);\n  }\n\n  saveRowEditing(dataItem: RowDataItem): void {\n    const id = this.getPrimaryKey(dataItem);\n    const currentEditingRow = this.currentEditingRows[id];\n\n    if (!currentEditingRow) {\n      return;\n    }\n\n    const trData = this.dataRows.find(dataRow => dataRow.data.editing &&\n      this.getPrimaryKey(dataRow.data.dataItem) === id);\n\n    this.saveRowEdit(dataItem, trData.element.nativeElement);\n\n    // saveRowEdit not always remove editing\n    if (this.isRowEditing(dataItem)) {\n      return;\n    }\n\n    delete this.currentEditingRows[id];\n\n    merge(dataItem, currentEditingRow.editingDataItem);\n    this.savedRowEditing.emit({editingRow: currentEditingRow});\n  }\n\n  cancelRowEditing(dataItem: RowDataItem): void {\n    const id = this.getPrimaryKey(dataItem);\n    const currentEditingRow = this.currentEditingRows[id];\n\n    if (!currentEditingRow) {\n      return;\n    }\n    delete this.currentEditingRows[id];\n\n    this.cancelRowEdit(dataItem);\n    this.canceledRowEditing.emit({editingRow: currentEditingRow});\n  }\n\n  onTableCellDoubleClick(rowData: RowDataItem): void {\n    if (this.enableRowEditing) {\n      this.initRowEditing(rowData);\n    }\n  }\n\n  onTextfieldKeydown(dataItem: RowDataItem, event: KeyboardEvent): void {\n    const enableEditingButtons = this.getVisibleColumns()\n      .some(column => this.getActionConfig(column) && this.getActionConfig(column).enableRowEditingButtons);\n\n    if (!enableEditingButtons) {\n      if (hasKeyboardKeyCode(event, 'Enter', ENTER)) {\n        this.saveRowEditing(dataItem);\n      } else if (hasKeyboardKeyCode(event, 'Escape', ESCAPE)) {\n        this.cancelRowEditing(dataItem);\n      }\n    }\n  }\n\n  /* Row editing END */\n\n  /* ------------------------------------------------------------------------------------------------ */\n\n  /* Sorting START */\n\n  getSortedDataRows(): AdaptDataDirective<DataRowDirectiveParams, HTMLTableRowElement>[] {\n    const allRowsItems = this.getCurrentPageDisplayingRowsItems();\n\n    const mapOfRows = new Map<RowDataItem, number>(allRowsItems.map((row, index) => [row, index]));\n\n    return this.dataRows.toArray().sort((dataRow1, dataRow2) => {\n      const index1 = mapOfRows.get(dataRow1.data.dataItem);\n      const index2 = mapOfRows.get(dataRow2.data.dataItem);\n\n      return index1 - index2;\n    });\n  }\n\n  getColumnSortOrder(field: string): SortOrder {\n    if (this.sortMode === 'single') {\n      return this.sortOrder;\n    }\n    const sortData = this.getSortMeta(field);\n\n    return sortData ? sortData.order : null;\n  }\n\n  isColumnSortOrderAsc(field: string): boolean {\n    return this.getColumnSortOrder(field) === SortOrder.Asc;\n  }\n\n  isSortableColumn(column: ColumnConfig): boolean {\n    if (!this.sortable || column.actionsConfig) {\n      return false;\n    }\n\n    const sortableCol = column.sortable;\n\n    return trueOrNull(sortableCol);\n  }\n\n  isSortableRenderingColumn(renderingColumn: RenderingColumnConfig): boolean {\n    return renderingColumn.columnsConfigs.some(column => this.isSortableColumn(column));\n  }\n\n  updateMultiSortMeta(multiSortMeta: SortMeta[]): void {\n    this.multiSortMeta = multiSortMeta;\n    this._multiSortMeta = multiSortMeta;\n\n    if (multiSortMeta === null) {\n      if (this.lazy) {\n        this._emitLazyLoadEvent(this.createLazyLoadMetadata(AdaptTableEventSource.MultipleSortChange));\n      }\n\n      this._emitOnSortForMultiSorting();\n    } else {\n      this.sortMultiple();\n    }\n  }\n\n  onTableRefresh(): void {\n    if (this.lazy) {\n      this._emitLazyLoadEvent(this.createLazyLoadMetadata(AdaptTableEventSource.Refresh));\n    }\n  }\n\n  setQuickFilter(value: string): void {\n    this.filterGlobal(value, this.toolbarConfig.quickFilterMatchMode || 'contains');\n  }\n\n  /* Sorting END */\n\n  /* ------------------------------------------------------------------------------------------------ */\n\n  private _emitLazyLoadEvent(lazyLoadEvent: AdaptLazyLoadEvent): void {\n    this.onLazyLoad.emit(lazyLoadEvent);\n  }\n\n  private _emitOnSortForMultiSorting(): void {\n    this.onSort.emit({\n      multisortmeta: this.multiSortMeta\n    });\n    this.getTableService().onSort(this.multiSortMeta);\n  }\n\n  private _getColumnByField(columns: ColumnConfig[], field: string): ColumnConfig {\n    return columns.find(column => column.field === field);\n  }\n\n  private _autoScrollTopOnValueSourceChangeForNotLazy(): void {\n    this.getTableService().valueSource$.pipe(takeUntil(this._destroyed$)).subscribe(() => {\n      if (!this.lazy && this.autoScrollToTop) {\n        this.tryScrollToTopTableBody();\n      }\n    });\n  }\n\n  private _setHostClassHasNotScroll(): void {\n    const hostEl = this.el.nativeElement;\n\n    if (!hostEl.classList.contains(AdaptTableClasses.HasNotVerticalBodyOverflow)) {\n      hostEl.classList.add(AdaptTableClasses.HasNotVerticalBodyOverflow);\n    }\n  }\n\n  private _updateRowSelection(selection: RowDataItem[] | RowDataItem): void {\n    if (this.isSingleSelectionMode()) {\n      if (Array.isArray(selection)) {\n        selection = selection.length ? selection[0] : null;\n      }\n    } else {\n      // filter disabled items\n      // TODO: maybe disallow rows deselecting and add to 'selection' var already selected and disabled rows\n      selection = (selection as RowDataItem[]).filter(row => {\n        const alreadyRowSelected = this.isRowSelected(row);\n\n        return !this.isRowSelectionCheckboxDisabled(row) || alreadyRowSelected;\n      });\n\n      // check selection limit\n      if (this.hasSelectionLimit && (selection as RowDataItem[]).length > this.selectionLimit) {\n        selection = selection.slice(0, this.selectionLimit);\n      }\n    }\n\n    this._selection = this._selection = selection;\n    this.updateSelectionKeys();\n    this.selectionChange.emit(selection);\n    this.getTableService().onSelectionChange(this._selection);\n  }\n\n  private _onTableMouseMoveDebounced(e: MouseEvent): void {\n    if (this.suppressTooltip) {\n      return;\n    }\n\n    const target = e.target as HTMLElement;\n\n    // While columns merged, there are 2 block with data where need to use tooltip. Added new class \"at-tooltip-el\" for that task.\n    // TODO: Better to use element reference instead query by class name\n    const cellTarget = target.closest('.at-tooltip-el') as HTMLTableDataCellElement | HTMLDivElement;\n\n    const isSameCell = this._lastTooltipTargetCell === cellTarget;\n\n    if (cellTarget) {\n      // Tooltip for data cell\n      this._lastTooltipTargetCell = cellTarget;\n      const tooltipValue = this._getCellTooltipData(cellTarget);\n\n      if (tooltipValue && !isSameCell) {\n\n        this._showTooltip(cellTarget, tooltipValue);\n\n        return;\n      }\n    } else {\n      // Tooltip for header cell\n      // TODO: Better to use element reference instead query by class name\n      const headerDataCellContainerEl = target.closest(`.${AdaptTableClasses.HeaderContainer}`) as HTMLDivElement;\n      // TODO: Better to use element reference instead query by class name\n      const headerDataCellTarget = target.closest(`.${AdaptTableClasses.HeaderDataCell} `) as HTMLTableDataCellElement;\n\n      if (headerDataCellContainerEl && headerDataCellTarget) {\n        // TODO: Better to use element reference instead query by class name\n        const headerDataCellNameEl = headerDataCellContainerEl.querySelector(`.${AdaptTableClasses.HeaderTitle}`) as HTMLDivElement;\n\n        this._lastTooltipTargetCell = headerDataCellTarget;\n\n        const tooltipValue = this._getHeaderDataCellTooltipData(headerDataCellTarget, headerDataCellNameEl);\n\n        if (tooltipValue) {\n          this._showTooltip(headerDataCellTarget, tooltipValue);\n\n          return;\n        }\n      }\n    }\n\n    this._lastTooltipTargetCell = null;\n    this._hideTooltip();\n  }\n\n  private _getCellTooltipData(cellTarget: HTMLTableDataCellElement | HTMLDivElement): TooltipValue {\n    const mergedColumnField = cellTarget.getAttribute('data-merged-column-field');\n    const tableCell = cellTarget.closest('td');\n\n    const cellData = this.dataCells.find(dc => dc.element.nativeElement === tableCell);\n\n    if (!cellData) {\n      return null;\n    }\n\n    const column = mergedColumnField ?\n      this._getColumnByField(cellData.data.renderingColumn.columnsConfigs, mergedColumnField) : cellData.data.column;\n\n    const tooltipValue = getValueOrFunc(column.cellTooltip, cellData.data);\n\n    if (tooltipValue) {\n      return tooltipValue;\n    }\n\n    if (tooltipValue === false) {\n      return null;\n    }\n\n    if (!HtmlUtils.hasShrunkText(cellTarget) && !this.alwaysShowCellTooltip) {\n      return null;\n    }\n\n    return cellTarget.innerText || this.getColumnData(cellData.data.dataItem, column) as string || null;\n  }\n\n  private _getHeaderDataCellTooltipData(headerDataCellEl: HTMLTableHeaderCellElement, headerDataCellNameEl: HTMLDivElement): TooltipValue {\n    const dataHeaderCellData = this.dataHeaderCells.find(dc => dc.element.nativeElement === headerDataCellEl);\n\n    if (!dataHeaderCellData) {\n      return null;\n    }\n\n    const column = dataHeaderCellData.data.column;\n\n    const tooltipValue = getValueOrFunc(column.headerTooltip);\n\n    if (tooltipValue) {\n      return tooltipValue;\n    }\n\n    if (tooltipValue === false) {\n      return null;\n    }\n\n    if (!headerDataCellNameEl || !HtmlUtils.hasShrunkText(headerDataCellNameEl) && !this.alwaysShowHeaderTooltip) {\n      return null;\n    }\n\n    return headerDataCellNameEl.innerText || column.header || null;\n  }\n\n  private _showTooltip(target: HTMLElement, content: string | TemplateRef<unknown>): void {\n    this.zone.run(() => {\n      if (this.tooltipInitialDelayMs && !this._showedTooltipAfterGridMouseLeave) {\n        this._showInstantiatedTooltipDelayed(target, content);\n      } else {\n        this._showInstantiatedTooltip(target, content);\n      }\n    });\n  }\n\n  private _showInstantiatedTooltip(target: HTMLElement, content: TooltipValue): void {\n    // Don't show tooltip if moved mouse out of grid\n    if (!this._lastTooltipTargetCell ||\n      // if mouse leave viewport\n      (this._lastGridMouseEvent.type === 'mouseleave' && !this._lastGridMouseEvent.relatedTarget) ||\n\n      // if mouse leave current cell with tooltip or grid\n      (this._lastGridMouseEvent.relatedTarget &&\n        !this._lastTooltipTargetCell.contains(this._lastGridMouseEvent.relatedTarget as Node))) {\n      this._lastTooltipTargetCell = null;\n\n      return;\n    }\n\n    // Don't show tooltip if body doesn't contain target\n    if (!document.body.contains(target)) {\n      return;\n    }\n\n    this._tooltipOverlayWithPortal?.destroy();\n    this._tooltipOverlayWithPortal = this._overlayService.openOverlayWithPortal(\n      new ComponentPortal(AdaptTooltipComponent, null, this._injector),\n      {\n        origin: target,\n        positionStrategy: 'connected',\n        scrollStrategy: 'close',\n        connectedPositions: [\n          this._tooltipOverlayPlacements.top,\n          this._tooltipOverlayPlacements.bottom,\n          this._tooltipOverlayPlacements.left,\n          this._tooltipOverlayPlacements.right\n        ]\n      }\n    );\n    this._showedTooltipAfterGridMouseLeave = true;\n    this._tooltipOverlayWithPortal.componentRef.instance.placement = 'auto';\n    this._tooltipOverlayWithPortal.componentRef.instance.content = content;\n    this._tooltipOverlayWithPortal.componentRef.instance.visible = true;\n    this._tooltipOverlayWithPortal.componentRef.instance.customCls = this.tooltipClass;\n    this._tooltipOverlayWithPortal.overlayRef.updatePosition();\n\n    this.detectChangesForTooltip();\n  }\n\n  private _hideTooltip(): void {\n    this._tooltipOverlayWithPortal?.destroy();\n    this._tooltipOverlayWithPortal = null;\n  }\n\n  private _onTableMouseLeave(event: MouseEvent): void {\n    this._lastGridMouseEvent = event;\n    this._showedTooltipAfterGridMouseLeave = false;\n    this._hideTooltip();\n  }\n\n  private _onTableMouseMove(e: MouseEvent): void {\n    this._lastGridMouseEvent = e;\n\n    const target = e.target as HTMLElement;\n\n    // Hide tooltip after moving mouse to another cell\n    if (this._lastTooltipTargetCell && !this._lastTooltipTargetCell.contains(target)) {\n      this._hideTooltip();\n    }\n  }\n\n  private _getCurrentFocusedCellData(): AdaptTableCellData {\n    const activeElement = document.activeElement as HTMLTableCellElement;\n\n    return this._getCellData(activeElement);\n  }\n\n  private _getCellData(targetElement: HTMLTableCellElement): AdaptTableCellData {\n    if (!targetElement || !targetElement.matches('td')) {\n      return null;\n    }\n\n    return this.dataCells.find(dataCell => dataCell.element.nativeElement === targetElement);\n  }\n\n  private _enableKeyboardNavigation(): void {\n    this.zone.runOutsideAngular(() => {\n      fromEvent(this.el.nativeElement, 'keydown').pipe(takeUntil(this._destroyed$))\n        .subscribe((e: KeyboardEvent) => this._onTableKeydown(e));\n    });\n  }\n\n  private _onTableKeydown(event: KeyboardEvent): void {\n    if (hasKeyboardKeyCode(event, 'ArrowDown', DOWN_ARROW, 'Down')) {\n      this._focusOnCellByNavigation(event, 1, 0);\n\n      return;\n    }\n\n    if (hasKeyboardKeyCode(event, 'ArrowUp', UP_ARROW, 'Up')) {\n      this._focusOnCellByNavigation(event, -1, 0);\n\n      return;\n    }\n\n    if (hasKeyboardKeyCode(event, 'ArrowLeft', LEFT_ARROW, 'Left')) {\n      this._focusOnCellByNavigation(event, 0, -1);\n\n      return;\n    }\n\n    if (hasKeyboardKeyCode(event, 'ArrowRight', RIGHT_ARROW, 'Right')) {\n      this._focusOnCellByNavigation(event, 0, 1);\n\n      return;\n    }\n\n    if (hasKeyboardKeyCode(event, ' ', SPACE, 'Spacebar')) {\n      this._toggleRowSelectionOfFocusedCell(event);\n\n      return;\n    }\n\n    if (hasKeyboardKeyCode(event, 'Enter', ENTER)) {\n      this._initRowEditingOfFocusedCell();\n    }\n  }\n\n  private _onTableClick(event: Event): void {\n    if (!this.enableRowEditing) {\n      return;\n    }\n\n    const target = event.target as HTMLElement;\n    const clickedCell = target.closest('td.at-data-cell') as HTMLTableCellElement;\n    const clickedCellData = this._getCellData(clickedCell);\n\n    if (clickedCellData && this.isRowEditing(clickedCellData.data.dataItem)) {\n      return;\n    }\n\n    this._saveAllEditingRows();\n  }\n\n  private _initRowEditingOfFocusedCell(): void {\n    let currentFocusedCellData: AdaptTableCellData;\n\n    if (!this.enableRowEditing || !(currentFocusedCellData = this._getCurrentFocusedCellData())) {\n      return;\n    }\n\n    if (this.isRowEditing(currentFocusedCellData.data.dataItem)) {\n      this.saveRowEditing(currentFocusedCellData.data.dataItem);\n    } else {\n      this._saveAllEditingRows();\n      this.initRowEditing(currentFocusedCellData.data.dataItem);\n    }\n  }\n\n  private _saveAllEditingRows(): void {\n    for (const key in this.currentEditingRows) {\n      if (Object.prototype.hasOwnProperty.call(this.currentEditingRows, key)) {\n        this.saveRowEditing(this.currentEditingRows[key].dataItemReference);\n      }\n    }\n  }\n\n  private _toggleRowSelectionOfFocusedCell(event: KeyboardEvent): void {\n    const currentFocusedCellData = this._getCurrentFocusedCellData();\n\n    if (currentFocusedCellData) {\n      event.preventDefault();\n    } else {\n      return;\n    }\n\n    if (!this.hasSelection) {\n      return;\n    }\n\n    const addedToSelection = this.toggleRowSelection(currentFocusedCellData.data.dataItem, event);\n\n    if (addedToSelection) {\n      this.lastSelectedRowId = this.getPrimaryKey(currentFocusedCellData.data.dataItem);\n    }\n  }\n\n  private _focusOnCellByNavigation(event: KeyboardEvent, rowNavigate: number, cellNavigate: number): void {\n    const currentFocusedCellData = this._getCurrentFocusedCellData();\n\n    if (!currentFocusedCellData) {\n      return;\n    }\n    const rowElemOfFocusedCell = currentFocusedCellData.element.nativeElement.closest('tr') as HTMLTableRowElement;\n\n    if (!rowElemOfFocusedCell) {\n      return;\n    }\n\n    const dataRows = this.getSortedDataRows();\n    const dataRowIndex = dataRows.findIndex(dr => dr.element.nativeElement === rowElemOfFocusedCell);\n    const nextDataRowForFocus = dataRows[dataRowIndex + rowNavigate];\n\n    if (dataRowIndex !== -1 && nextDataRowForFocus) {\n\n      let indexOfFocusedCellInRow = Array.prototype.findIndex.call(rowElemOfFocusedCell.children, (td: Element) =>\n        td === currentFocusedCellData.element.nativeElement\n      );\n\n      const rowChildren = nextDataRowForFocus.element.nativeElement.children;\n\n      indexOfFocusedCellInRow += cellNavigate;\n\n      indexOfFocusedCellInRow = indexOfFocusedCellInRow < rowChildren.length ?\n        indexOfFocusedCellInRow : rowChildren.length - 1;\n\n      if (indexOfFocusedCellInRow === -1) {\n        indexOfFocusedCellInRow = 0;\n      }\n\n      if (rowChildren.length > 0) {\n        (rowChildren[indexOfFocusedCellInRow] as HTMLTableCellElement).focus();\n        event.preventDefault();\n      }\n    }\n  }\n\n  private _hasCellFocus(element: HTMLTableDataCellElement): boolean {\n    return document.activeElement === element;\n  }\n\n  private _getBusyConfig(): BusyConfig {\n    return {\n      busy: null,\n      backdrop: true,\n      sticky: true,\n      message: '',\n      loaderType: 'section',\n    };\n  }\n\n  private _hasAllChildItemsDisabledForSelection(grd: GroupedRowData): boolean {\n    const enabledItems = this.getSelectableRowsItems([grd]);\n\n    return !enabledItems.length;\n  }\n\n  // For the \"action\" columns set default with if it has not been passed.\n  // The width calculated by the finding max width from all action columns\n  private _recalculateActionColWidth(): void {\n    if (this.actionColElements?.length && isNil(this.columns.find(col => col.actionsConfig)?.width)) {\n      this.zone.onStable.asObservable()\n        .pipe(debounceTime(100), take(1), takeUntil(this._destroyed$))\n        .subscribe(() => {\n          this.zone.runOutsideAngular(() => {\n            this.setDefaultActionColWidth();\n          });\n        });\n    }\n  }\n}\n","<div\n  [ngClass]=\"{\n  'ui-table-flex-scrollable': (scrollable && scrollHeight === 'flex'),\n  'at-has-paginator': paginator,\n  'at-has-toolbar': toolbarConfig,\n  'at-columns-reorderable': reorderableColumns\n  }\">\n\n\n  <div class=\"at-table-primeng-component\"\n       [ngClass]=\"{\n       'at-table-reordable': enableReorderableRows,\n       'at-wrap-cell-text': wrapCellText }\"\n       cdkDropList\n       [cdkDropListData]=\"getAllCurrentRows()\"\n       [cdkDropListDisabled]=\"!enableReorderableRows\"\n       (cdkDropListSorted)=\"onCdkDropListSortedRow($event)\">\n    <div #container\n         [ngStyle]=\"style\"\n         [class]=\"styleClass\"\n         [ngClass]=\"{'ui-table ui-widget': true,\n                     'ui-table-responsive': responsive,\n                     'ui-table-resizable': resizableColumns,\n                     'ui-table-resizable-fit': (resizableColumns && columnResizeMode === 'fit'),\n                     'ui-table-hoverable-rows': (rowHover||selectionMode),\n                     'ui-table-auto-layout': autoLayout}\">\n      <div class=\"ui-table-loading ui-widget-overlay\" *ngIf=\"loading && showLoader\"></div>\n      <div class=\"ui-table-loading-content\" *ngIf=\"loading && showLoader\">\n        <i [class]=\"'ui-table-loading-icon pi-spin ' + loadingIcon\"></i>\n      </div>\n      <adapt-table-toolbar #toolbarComponent\n                           *ngIf=\"toolbarConfig\"\n                           [config]=\"toolbarConfig\"\n                           [texts]=\"texts\"></adapt-table-toolbar>\n\n      <div class=\"ui-table-container\" [ngClass]=\"{'at-table-scroll-wrapper': tableWidthConfig}\" #tableContainer>\n        <div class=\"h-100\" [ngStyle]=\"{ 'width': getTableWidth(tableWidthConfig, isMobile) }\" #tableInnerContainer>\n          <div class=\"ui-table-wrapper\" *ngIf=\"!scrollable\">\n            <table role=\"grid\"\n                   #table\n                   [ngClass]=\"tableStyleClass\"\n                   [ngStyle]=\"tableStyle\">\n              <ng-container *ngTemplateOutlet=\"colGroupTemplate; context {$implicit: columns}\"></ng-container>\n              <thead #tableHeader class=\"ui-table-thead\">\n              <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\n              </thead>\n              <tbody class=\"ui-table-tbody\"\n                     [pTableBody]=\"columns\"\n                     [pTableBodyTemplate]=\"bodyTemplate\"></tbody>\n              <tfoot *ngIf=\"footerTemplate\" class=\"ui-table-tfoot\">\n              <ng-container *ngTemplateOutlet=\"footerTemplate; context {$implicit: columns}\"></ng-container>\n              </tfoot>\n            </table>\n          </div>\n\n          <div class=\"ui-table-scrollable-wrapper\"\n               *ngIf=\"scrollable\"\n               [adaptResize]\n               (elementResize)=\"handleScrollableWrapperResizing()\">\n            <div class=\"ui-table-scrollable-view ui-table-frozen-view\"\n                 *ngIf=\"frozenColumns||frozenBodyTemplate\"\n                 [pScrollableView]=\"frozenColumns\"\n                 [frozen]=\"true\"\n                 [ngStyle]=\"{width: frozenWidth}\"\n                 [scrollHeight]=\"scrollHeight\"></div>\n            <div class=\"ui-table-scrollable-view w-100\"\n                 [pScrollableView]=\"columns\"\n                 [frozen]=\"false\"\n                 [scrollHeight]=\"scrollHeight\"\n                 [ngStyle]=\"{left: frozenWidth, width: 'calc(100% - '+frozenWidth+')'}\"></div>\n          </div>\n\n          <div class=\"ui-table-container-loader\"\n               *ngIf=\"isRefreshingRowData\"\n               [ngStyle]=\"{height: tableBodyHeight}\"\n               [@dataRefreshAnimation]></div>\n        </div>\n      </div>\n\n      <adapt-paginator *ngIf=\"paginator\"\n                       [rows]=\"rows\"\n                       [first]=\"first\"\n                       [totalRecords]=\"totalRecords\"\n                       [pageLinkSize]=\"pageLinks\"\n                       [alwaysShow]=\"alwaysShowPaginator\"\n                       (onPageChange)=\"onPageChange($event)\"\n                       [rowsPerPageOptions]=\"rowsPerPageOptions\"\n                       [dropdownAppendTo]=\"paginatorDropdownAppendTo\"\n                       [currentPageReportTemplate]=\"currentPageReportTemplate\"\n                       [showCurrentPageReport]=\"showCurrentPageReport\"\n                       [texts]=\"texts\"\n                       [paginatorAlign]=\"paginatorAlign\"\n                       [ngClass]=\"paginatorClass\">\n      </adapt-paginator>\n\n      <div #resizeHelper class=\"ui-column-resizer-helper ui-state-highlight\" style=\"display:none;\"\n           *ngIf=\"resizableColumns\"></div>\n\n      <span #reorderIndicatorUp class=\"pi pi-arrow-down ui-table-reorder-indicator-up\" style=\"display:none;\"\n            *ngIf=\"reorderableColumns\"></span>\n      <span #reorderIndicatorDown class=\"pi pi-arrow-up ui-table-reorder-indicator-down\" style=\"display:none;\"\n            *ngIf=\"reorderableColumns\"></span>\n    </div>\n\n    <div *ngIf=\"canShowFullLoader\"\n         [ngBusy]=\"busyConfig\"\n         [adaptRadarDisableEventSending]=\"true\"\n         class=\"full-loading-wrap\"></div>\n\n    <ng-container #tooltipContainerEl></ng-container>\n\n    <ng-container #infiniteScrollingLoaderContainerEl></ng-container>\n\n    <!-- Col group -->\n    <ng-template #tableColgroupTemplateRef\n                 let-columns>\n      <colgroup>\n        <col *ngIf=\"enableReorderableRows\" class=\"at-reordarable-cell\">\n        <col *ngIf=\"isSingleSelectionMode()\" class=\"at-radiobutton-cell\">\n        <col *ngIf=\"hasExpandingBtn\" class=\"at-expansion-cell\">\n        <col *ngIf=\"isMultipleSelectionMode()\" class=\"adapt-selection-cell\">\n\n        <ng-template [ngIf]=\"dataColumnsColsTemplate\" [ngIfElse]=\"dataColumnsColsDefTemplate\">\n          <ng-template [ngTemplateOutlet]=\"dataColumnsColsTemplate\" [ngTemplateOutletContext]=\"{ $implicit: columns }\">\n          </ng-template>\n        </ng-template>\n\n        <ng-template #dataColumnsColsDefTemplate>\n          <ng-container\n            *ngFor=\"let renderingColumn of getColumnsForRendering(columns); trackBy: trackByForRenderingColumns\">\n            <col *ngIf=\"!renderingColumn.columnsConfigs[0].actionsConfig\"\n                 #colEl\n                 [ngStyle]=\"getColumnStyles(renderingColumn.columnsConfigs[0], colEl)\"\n                 class=\"at-col\">\n            <col #actionColElement\n                 [ngStyle]=\"getColumnStyles(renderingColumn.columnsConfigs[0])\"\n                 *ngIf=\"!!renderingColumn.columnsConfigs[0].actionsConfig\"\n                 class=\"at-col at-action-col\">\n          </ng-container>\n        </ng-template>\n      </colgroup>\n    </ng-template>\n\n    <!-- Header -->\n    <ng-template #tableHeaderTemplateRef\n                 let-columns>\n      <ng-template [ngIf]=\"headerGroupsTemplate\">\n        <tr class=\"at-header-row\" [class.at-header-row_bordered]=\"bordered\">\n          <ng-template [ngTemplateOutlet]=\"headerControlsTemplate\"></ng-template>\n          <ng-template [ngTemplateOutlet]=\"headerGroupsTemplate\"\n                       [ngTemplateOutletContext]=\"{ $implicit: getColumnsForRendering(columns) }\"></ng-template>\n        </tr>\n      </ng-template>\n\n\n      <tr class=\"at-header-row\" [class.at-header-row_bordered]=\"bordered\">\n        <ng-template [ngTemplateOutlet]=\"headerControlsTemplate\"\n                     [ngTemplateOutletContext]=\"{ $implicit: headerMultipleSelectionTemplate }\">\n        </ng-template>\n\n        <ng-template [ngIf]=\"dataColumnsHeaderTemplate\" [ngIfElse]=\"dataColumnsHeaderDefTemplate\">\n          <ng-template [ngTemplateOutlet]=\"dataColumnsHeaderTemplate\"\n                       [ngTemplateOutletContext]=\"{ $implicit: columns }\">\n          </ng-template>\n        </ng-template>\n\n        <ng-template #dataColumnsHeaderDefTemplate>\n          <ng-container\n            *ngFor=\"let renderingColumn of getColumnsForRendering(columns); let index = index; trackBy: trackByForRenderingColumns\">\n            <th *ngIf=\"renderingColumn.type === RenderingColumnType.Simple\"\n                #dataHeaderCell\n                pResizableColumn\n                [pResizableColumnDisabled]=\"!resizableColumns || isColumnFrozen(renderingColumn.columnsConfigs[0])\"\n                (columnResized)=\"handleColumnResized($event)\"\n                pReorderableColumn\n                [pReorderableColumnDisabled]=\"!reorderableColumns || isColumnFrozen(renderingColumn.columnsConfigs[0])\"\n                class=\"at-header-cell {{tableClasses.HeaderDataCell}}\"\n                [attr.data-testid]=\"renderingColumn.columnsConfigs[0].testId || renderingColumn.columnsConfigs[0].columnAdaptID\"\n                [adaptFrozen]=\"isColumnFrozen(renderingColumn.columnsConfigs[0])\"\n                [adaptData]=\"getHeaderDataCellDirectiveParams(renderingColumn, index)\"\n                [ngClass]=\"getHeaderClass(renderingColumn.columnsConfigs[0])\">\n              <adapt-table-header-cell [renderingColumn]=\"renderingColumn\"\n                                       [index]=\"index\"\n                                       [texts]=\"texts\"></adapt-table-header-cell>\n            </th>\n\n\n            <th *ngIf=\"renderingColumn.type === RenderingColumnType.Merged\"\n                #dataHeaderCell\n                pResizableColumn\n                [pResizableColumnDisabled]=\"!resizableColumns\"\n                (columnResized)=\"handleColumnResized($event)\"\n                pReorderableColumn\n                [pReorderableColumnDisabled]=\"!reorderableColumns\"\n                class=\"at-header-cell {{tableClasses.HeaderDataCell}}\"\n                [attr.data-testid]=\"renderingColumn.columnsConfigs[0].testId || renderingColumn.columnsConfigs[0].columnAdaptID\"\n                [adaptData]=\"getHeaderDataCellDirectiveParams(renderingColumn, index)\"\n                [ngClass]=\"getMergedHeaderClass(renderingColumn.columnsConfigs)\">\n              <adapt-table-header-cell [renderingColumn]=\"renderingColumn\"\n                                       [index]=\"index\"\n                                       [texts]=\"texts\"></adapt-table-header-cell>\n            </th>\n          </ng-container>\n        </ng-template>\n\n      </tr>\n\n    </ng-template>\n    <ng-template #headerMultipleSelectionTemplate>\n      <!--[selectionService]=\"selectionService\"-->\n      <adapt-header-selection-checkbox\n        *ngIf=\"!hasSelectionLimit\"\n        [texts]=\"texts\"\n        (headerCheckboxToggle)=\"handleHeaderCheckboxToggle($event)\">\n      </adapt-header-selection-checkbox>\n\n      <button\n        *ngIf=\"hasSelectionLimit && getRowSelectionArray().length\"\n        type=\"button\"\n        class=\"at-group-selection-unselect-all d-icon-cross_adapt btn\"\n        (click)=\"unselectAllSelected()\"\n        [attr.aria-label]=\"texts.unselectAllSelectedTitle\"\n        [placement]=\"'top'\"\n        [adaptRadarDisableEventSending]=\"true\"\n        [adaptTooltip]=\"texts.unselectAllSelectedTitle\">\n      </button>\n    </ng-template>\n    <ng-template #headerControlsTemplate let-multipleSelectionTemplate>\n      <th *ngIf=\"enableReorderableRows\"\n          [adaptFrozen]=\"hasAtLeastOneFrozenColumn()\"\n          class=\"at-header-cell at-reordarable-cell\"></th>\n      <th *ngIf=\"isSingleSelectionMode()\"\n          [adaptFrozen]=\"hasAtLeastOneFrozenColumn()\"\n          class=\"at-header-cell at-radiobutton-cell\"></th>\n      <th *ngIf=\"hasExpandingBtn\"\n          [adaptFrozen]=\"hasAtLeastOneFrozenColumn()\"\n          class=\"at-header-cell at-expansion-cell\"></th>\n      <th *ngIf=\"isMultipleSelectionMode()\"\n          [adaptFrozen]=\"hasAtLeastOneFrozenColumn()\"\n          class=\"at-header-cell adapt-selection-cell\"\n          [ngClass]=\"{'at-selection-cell--limited': hasSelectionLimit}\">\n        <ng-container *ngTemplateOutlet=\"multipleSelectionTemplate\"></ng-container>\n      </th>\n    </ng-template>\n\n    <!-- Body -->\n    <ng-template #tableBodyTemplateRef\n                 let-renderRowData\n                 let-columns=\"columns\"\n                 let-rowIndex=\"rowIndex\"\n                 let-primengExpanded=\"expanded\">\n\n        <!-- Group value displaying Row -->\n        <tr #groupRow\n            cdkDrag\n            cdkDragLockAxis=\"y\"\n            [cdkDragData]=\"renderRowData\"\n            (cdkDragStarted)=\"onRowDragStarted($event)\"\n            (cdkDragDropped)=\"onRowDragDropped($event, groupRow)\"\n            (cdkDragEnded)=\"onRowDragEnded($event)\"\n            (cdkDragReleased)=\"onRowDragReleased($event)\"\n            *ngIf=\"renderRowData.isGroup; else dataRowTemplate\"\n            class=\"at-row at-group-row\"\n            [ngClass]=\"getGroupRowClass(renderRowData)\">\n          <td cdkDragHandle\n              *ngIf=\"enableReorderableRows\"\n              class=\"at-cell at-reordarable-cell p-start-3\"\n              (mousedown)=\"onReordarableRowMouseDown(groupRow, renderRowData.isGroup)\">\n          <span *ngIf=\"hasNotRowNestingLevel(renderRowData)\"\n                class=\"d-icon-dots adapt-list-drag\"></span>\n          </td>\n          <td *ngIf=\"isSingleSelectionMode()\"\n              class=\"at-cell at-radiobutton-cell\">\n          </td>\n          <td #expansionCell\n              [ngStyle]=\"getCellStyle(renderRowData)\"\n              class=\"at-expansion-cell at-cell\">\n            <button class=\"expansion-btn\"\n                    type=\"button\"\n                    role=\"button\"\n                    [attr.aria-expanded]=\"isExpandedGroup(renderRowData.rowData)\"\n                    (click)=\"onGroupToggleClick(renderRowData.rowData)\">\n              <svg class=\"at-expansion-icon d-icon-p\"\n                   aria-hidden=\"true\"\n                   xmlns=\"http://www.w3.org/2000/svg\"\n                   width=\"6\"\n                   height=\"10\"\n                   viewBox=\"0 0 7 11\"\n                   fill=\"currentColor\"\n                   [ngClass]=\"{ 'at-expansion-icon--expanded': isExpandedGroup(renderRowData.rowData) }\">\n                <path d=\"M1.9,0L0.6,1.2l4.2,4.3L0.6,9.8L1.9,11l5.5-5.5L1.9,0z\"/>\n              </svg>\n              <span class=\"sr-only\">\n                {{isExpandedGroup(renderRowData.rowData) ? rowAriaDataResolver && rowAriaDataResolver(renderRowData.rowData).rowCollapseAriaLabel || texts.collapseRowText : rowAriaDataResolver && rowAriaDataResolver(renderRowData.rowData).rowExpandAriaLabel || texts.expandRowText}}\n              </span>\n            </button>\n          </td>\n\n          <td [ngStyle]=\"getCellStyle(renderRowData)\"\n              *ngIf=\"isMultipleSelectionMode() && !hasSelectionLimit\"\n              class=\"adapt-selection-cell at-cell\">\n            <adapt-rx-checkbox [ngModel]=\"isSelectedGroupCheckbox(renderRowData.rowData)\"\n                               (ngModelChange)=\"onGroupSelectionChanged($event, renderRowData.rowData)\"\n                               [adaptRadarDisableEventSending]=\"true\"\n                               [indeterminate]=\"isGroupSelectionIndeterminate(renderRowData.rowData)\"\n                               [disabled]=\"isGroupCheckboxDisabled(renderRowData.rowData)\"\n                               [ariaLabel]=\"rowAriaDataResolver ? rowAriaDataResolver(renderRowData.rowData).rowSelectionAriaLabel || getRowGroupTitle(renderRowData.rowData) : getRowGroupTitle(renderRowData.rowData)\"\n                               class=\"checkbox-inline at-group-selection-checkbox\">\n            </adapt-rx-checkbox>\n          </td>\n\n          <!-- Group value displaying -->\n          <td [ngStyle]=\"getCellStyle(renderRowData)\"\n              class=\"at-cell\"\n              [attr.colspan]=\"getColumnsForRendering(columns).length + (hasSelectionLimit ? 1 : 0)\">\n            <ng-template [ngTemplateOutlet]=\"groupValueDataCellTemplate || groupValueDataCellDefTemplate\"\n                         [ngTemplateOutletContext]=\"getGroupValueDataCellTemplateParams(renderRowData)\">\n            </ng-template>\n          </td>\n\n        </tr>\n\n        <!-- Data Row -->\n        <ng-template #dataRowTemplate>\n          <tr #dataRow\n              class=\"at-row at-data-row\"\n              [pEditableRow]=\"renderRowData.rowData\"\n              [adaptData]=\"getDataRowDirectiveParams(renderRowData)\"\n              [ngClass]=\"getDataRowClass(renderRowData)\"\n              (cdkDragStarted)=\"onRowDragStarted($event)\"\n              (cdkDragDropped)=\"onRowDragDropped($event, dataRow)\"\n              (cdkDragEnded)=\"onRowDragEnded($event)\"\n              (cdkDragReleased)=\"onRowDragReleased($event)\"\n              cdkDrag\n              cdkDragLockAxis=\"y\"\n              [cdkDragData]=\"renderRowData\">\n            <td cdkDragHandle\n                [adaptFrozen]=\"hasAtLeastOneFrozenColumn()\"\n                *ngIf=\"enableReorderableRows\"\n                class=\"at-cell at-reordarable-cell p-start-3\"\n                (mousedown)=\"onReordarableRowMouseDown(dataRow, null)\">\n            <span *ngIf=\"hasNotRowNestingLevel(renderRowData)\"\n                  class=\"d-icon-dots adapt-list-drag\"></span>\n            </td>\n            <td *ngIf=\"isSingleSelectionMode()\"\n                [adaptFrozen]=\"hasAtLeastOneFrozenColumn()\"\n                class=\"at-cell at-radiobutton-cell\">\n\n              <!-- handle radiobutton model changes on (click) event to allow uncheck selected value.\n              this can't be made with (checkedChange) because it wouldn't trigger if radiobutton already checked -->\n              <adapt-rx-radiobutton [name]=\"rowSelectionRadiobuttonName\"\n                                    [adaptRadarDisableEventSending]=\"true\"\n                                    [value]=\"getPrimaryKey(renderRowData.rowData)\"\n                                    [checked]=\"isSingleSelectionRowSelected(renderRowData.rowData)\"\n                                    (click)=\"onRadiobuttonModelChange(renderRowData.rowData)\"\n                                    [label]=\"rowAriaDataResolver && rowAriaDataResolver(renderRowData.rowData).rowSelectionAriaLabel\"\n                                    [ariaLabel]=\"rowAriaDataResolver && rowAriaDataResolver(renderRowData.rowData).rowSelectionAriaLabel\"\n                                    class=\"at-radiobutton\"\n                                    [disabled]=\"isRowSelectionDisabled(renderRowData.rowData)\"></adapt-rx-radiobutton>\n            </td>\n            <td #expansionCell\n                [ngStyle]=\"getCellStyle(renderRowData)\"\n                [ngClass]=\"{'at-expansion-cell_no-children': nestingStructureData && !isChildrenExist(renderRowData.rowData)}\"\n                [adaptFrozen]=\"hasAtLeastOneFrozenColumn()\"\n                *ngIf=\"hasExpandingBtn\"\n                class=\"at-expansion-cell at-cell\">\n\n              <button *ngIf=\"shouldShowExpandingButton(renderRowData)\"\n                      type=\"button\"\n                      class=\"expansion-btn\"\n                      [attr.aria-expanded]=\"renderRowData.rowExpanded\"\n                      [pRowToggler]=\"renderRowData.rowData\">\n                <svg class=\"at-expansion-icon d-icon-p\"\n                     aria-hidden=\"true\"\n                     xmlns=\"http://www.w3.org/2000/svg\"\n                     width=\"6\"\n                     height=\"10\"\n                     viewBox=\"0 0 7 11\"\n                     fill=\"currentColor\"\n                     [ngClass]=\"{ 'at-expansion-icon--expanded': renderRowData.rowExpanded }\">\n                  <path class=\"ui-clickable\" d=\"M1.9,0L0.6,1.2l4.2,4.3L0.6,9.8L1.9,11l5.5-5.5L1.9,0z\"/>\n                </svg>\n                <span\n                  class=\"sr-only\">{{renderRowData.rowExpanded ? rowAriaDataResolver && rowAriaDataResolver(renderRowData.rowData).rowCollapseAriaLabel || texts.collapseRowText : rowAriaDataResolver && rowAriaDataResolver(renderRowData.rowData).rowExpandAriaLabel || texts.expandRowText}}</span>\n              </button>\n            </td>\n            <td [ngStyle]=\"getCellStyle(renderRowData)\"\n                *ngIf=\"isMultipleSelectionMode()\"\n                [adaptFrozen]=\"hasAtLeastOneFrozenColumn()\"\n                class=\"adapt-selection-cell at-cell\">\n              <adapt-row-selection-checkbox class=\"at-selection-checkbox\"\n                                            [renderRowData]=\"renderRowData\"\n                                            [value]=\"renderRowData.rowData\"\n                                            [rowAriaDataResolver]=\"rowAriaDataResolver\"\n                                            [disabled]=\"isRowSelectionCheckboxDisabled(renderRowData.rowData)\">\n              </adapt-row-selection-checkbox>\n            </td>\n\n            <!-- Data cells -->\n            <ng-template [ngIf]=\"dataColumnsDataCellsTemplate\"\n                         [ngIfElse]=\"dataColumnsDataCellsDefTemplate\">\n              <ng-template [ngTemplateOutlet]=\"dataColumnsDataCellsTemplate\"\n                           [ngTemplateOutletContext]=\"{ columns: columns, renderRowData: renderRowData, rowIndex: rowIndex }\">\n              </ng-template>\n            </ng-template>\n\n            <ng-template #dataColumnsDataCellsDefTemplate>\n              <ng-container\n                *ngFor=\"let renderingColumn of getColumnsForRendering(columns); let index = index; trackBy: trackByForRenderingColumns\">\n\n                <!-- Data cell Simple -->\n                <td *ngIf=\"renderingColumn.type === RenderingColumnType.Simple\"\n                    #dataCell\n                    class=\"at-data-cell at-cell at-data-cell--simple at-tooltip-el\"\n                    [ngStyle]=\"getCellStyle(renderRowData, index, renderingColumn.columnsConfigs[0])\"\n                    [adaptFrozen]=\"isColumnFrozen(renderingColumn.columnsConfigs[0])\"\n                    [adaptData]=\"getDataCellDirectiveParams(renderingColumn, renderRowData)\"\n                    [ngClass]=\"getDataCellClass(renderingColumn.columnsConfigs[0], renderRowData, dataCell)\"\n                    [tabindex]=\"getDataCellTabIndex(renderingColumn.columnsConfigs[0], renderRowData)\"\n                    (dblclick)=\"onTableCellDoubleClick(renderRowData.rowData)\">\n\n                  <ng-template [ngTemplateOutlet]=\"dataCellTemplate\"\n                               [ngTemplateOutletContext]=\"getDataCellTemplateParams(renderingColumn.columnsConfigs[0], renderRowData)\">\n                  </ng-template>\n                </td>\n\n                <!-- Data cell Merged -->\n                <td *ngIf=\"renderingColumn.type === RenderingColumnType.Merged\"\n                    class=\"at-cell at-data-cell ad-data-cell--merged\"\n                    #dataCell\n                    [ngStyle]=\"getMergedCellStyle(renderRowData, index, renderingColumn.columnsConfigs)\"\n                    [adaptData]=\"getDataCellDirectiveParams(renderingColumn, renderRowData)\"\n                    [ngClass]=\"getMergedDataCellClass(renderingColumn.columnsConfigs, renderRowData, dataCell)\"\n                    [tabindex]=\"getMergedDataCellTabIndex(renderingColumn.columnsConfigs, renderRowData)\"\n                    (dblclick)=\"onTableCellDoubleClick(renderRowData.rowData)\">\n                  <div class=\"at-tooltip-el at-merged-column-data-cell\"\n                       *ngFor=\"let columnConfig of renderingColumn.columnsConfigs; trackBy: trackByForColumns\"\n                       [attr.data-merged-column-field]=\"columnConfig.field\">\n\n                    <ng-template [ngTemplateOutlet]=\"dataCellTemplate\"\n                                 [ngTemplateOutletContext]=\"getDataCellTemplateParams(columnConfig, renderRowData)\">\n                    </ng-template>\n                  </div>\n                </td>\n              </ng-container>\n            </ng-template>\n          </tr>\n\n          <!-- Render row expansion for grouped rows -->\n          <ng-container *ngIf=\"!primengExpanded && renderRowData.rowExpanded && expandedRowTemplate\">\n            <ng-template [ngTemplateOutlet]=\"rowExpansionTemplate\"\n                         [ngTemplateOutletContext]=\"{$implicit: renderRowData.rowData, rowIndex: rowIndex, columns: columns}\">\n            </ng-template>\n          </ng-container>\n\n        </ng-template>\n    </ng-template>\n\n    <!-- Expanded row -->\n    <ng-template #rowExpansionTemplate\n                 let-dataItem\n                 let-columns=\"columns\"\n                 let-rowIndex=\"rowIndex\">\n      <tr class=\"at-row at-expansion-row\">\n        <td [attr.colspan]=\"getCurrentTableColumnsCount(columns)\"\n            class=\"at-cell-expanded\"\n            [ngClass]=\"expandedCellClass\">\n          <ng-template [ngTemplateOutlet]=\"expandedRowTemplate\"\n                       [ngTemplateOutletContext]=\"getExpandedRowTemplateParams(dataItem, columns, rowIndex)\">\n          </ng-template>\n        </td>\n      </tr>\n    </ng-template>\n\n    <!-- Empty message -->\n    <ng-template #tableEmptyMessageTemplateRef\n                 let-columns>\n      <tr *ngIf=\"hasEmptyState && !loading\"\n          class=\"at-empty-state-row\">\n        <td #emptyStateTdEl [attr.colspan]=\"getCurrentTableColumnsCount(columns)\"\n            class=\"at-empty-state-cell\">\n          <adapt-empty-state [type]=\"'grid'\"\n                             [adaptRadarDisableEventSending]=\"true\"\n                             [label]=\"getEmptyStateLabelText()\"></adapt-empty-state>\n        </td>\n      </tr>\n    </ng-template>\n\n    <!-- Grouped value cell template -->\n    <ng-template #groupValueDataCellDefTemplate let-renderRowData>\n      {{ getRowGroupTitle(renderRowData.rowData) }}\n    </ng-template>\n\n    <!-- Cell template -->\n    <ng-template #dataCellDefTemplate\n                 let-column=\"column\"\n                 let-dataItem=\"dataItem\"\n                 let-rowIndex=\"rowIndex\"\n                 let-expanded=\"expanded\"\n                 let-editing=\"editing\">\n      <ng-container *ngIf=\"getActionConfig(column)\">\n        <adapt-table-actions [column]=\"column\"\n                             [dataItem]=\"dataItem\"\n                             [rowIndex]=\"rowIndex\"\n                             [expanded]=\"expanded\"\n                             [editing]=\"editing\"\n                             [texts]=\"texts\">\n        </adapt-table-actions>\n      </ng-container>\n\n      <ng-container *ngIf=\"!getActionConfig(column)\">\n        {{ getColumnData(dataItem, column) }}\n      </ng-container>\n    </ng-template>\n\n    <!-- Edit mode -->\n    <ng-template #editDataCellDefTemplate\n                 let-column=\"column\"\n                 let-dataItem=\"dataItem\"\n                 let-rowIndex=\"rowIndex\"\n                 let-expanded=\"expanded\">\n      <adapt-rx-textfield #textfield\n                          class=\"at-edit-input-wrap\"\n                          [size]=\"'sm'\"\n                          [adaptRadarDisableEventSending]=\"true\"\n                          [(ngModel)]=\"getEditableClonedRow(dataItem)[column.field]\"\n                          (keydown)=\"onTextfieldKeydown(dataItem, $event)\">\n      </adapt-rx-textfield>\n    </ng-template>\n\n    <!-- Data cell template -->\n    <ng-template #dataCellTemplate\n                 let-column=\"column\"\n                 let-renderRowData=\"renderRowData\">\n\n      <ng-container *ngIf=\"isEditableColumn(column) && renderRowData.editing && getActionConfig(column)\">\n        <ng-template [ngIf]=\"getActionConfig(column).enableRowEditingButtons\"\n                     [ngIfElse]=\"dataCellDisplayingTemplate\">\n\n          <!-- Action buttons cell of Editing row -->\n          <div class=\"btn-group d-flex\" role=\"group\">\n            <button type=\"button\"\n                    adapt-button\n                    [adaptRadarDisableEventSending]=\"true\"\n                    btn-type=\"secondary\"\n                    size=\"xtra-small\"\n                    class=\"btn-reject\"\n                    (click)=\"cancelRowEditing(renderRowData.rowData)\">\n              <span class=\"sr-only\">{{ texts.cancelRowEditingButtonLabel }}</span>\n            </button>\n            <button type=\"button\"\n                    adapt-button\n                    [adaptRadarDisableEventSending]=\"true\"\n                    btn-type=\"secondary\"\n                    size=\"xtra-small\"\n                    class=\"btn-approve\"\n                    (click)=\"saveRowEditing(renderRowData.rowData)\">\n              <span class=\"sr-only\">{{ texts.saveRowEditingButtonLabel }}</span>\n            </button>\n          </div>\n\n        </ng-template>\n      </ng-container>\n\n      <!-- Data cell editing -->\n      <ng-container *ngIf=\"isEditableColumn(column) && renderRowData.editing && !getActionConfig(column)\">\n        <ng-template [ngTemplateOutlet]=\"column.editTemplate || editDataCellDefTemplate\"\n                     [ngTemplateOutletContext]=\"getColumnTemplateParams(column, renderRowData)\">\n        </ng-template>\n      </ng-container>\n\n      <ng-container *ngIf=\"!renderRowData.editing || (renderRowData.editing && !isEditableColumn(column))\">\n        <ng-template [ngTemplateOutlet]=\"dataCellDisplayingTemplate\"></ng-template>\n      </ng-container>\n\n      <!-- Data cell diplaying -->\n      <ng-template #dataCellDisplayingTemplate>\n        <ng-template [ngTemplateOutlet]=\"column.cellTemplate || dataCellDefTemplate\"\n                     [ngTemplateOutletContext]=\"getColumnTemplateParams(column, renderRowData)\">\n        </ng-template>\n      </ng-template>\n    </ng-template>\n\n  </div>\n</div>\n"]}