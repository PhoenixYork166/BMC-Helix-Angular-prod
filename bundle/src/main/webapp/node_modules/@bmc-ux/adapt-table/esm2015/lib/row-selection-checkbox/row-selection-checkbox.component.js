// copied from primeng p-tableCheckbox
import { Component, Input, ViewChild, ElementRef, } from '@angular/core';
import { AdaptTableComponent } from '../adapt-table.component';
import { DomHandler } from 'primeng/dom';
import { isFunction } from 'lodash-es';
import * as i0 from "@angular/core";
import * as i1 from "../adapt-table.component";
import * as i2 from "@angular/common";
const _c0 = ["box"];
function AdaptRowSelectionCheckboxComponent_span_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 7);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r0.ariaLabel);
} }
const _c1 = function (a1, a2) { return { "ui-chkbox-box ui-widget ui-state-default": true, "ui-state-active": a1, "ui-state-disabled": a2 }; };
const _c2 = function (a0) { return { "pi pi-check": a0 }; };
export class AdaptRowSelectionCheckboxComponent {
    constructor(table) {
        this.table = table;
    }
    ngOnInit() {
        var _a;
        this.subscription = this.table.getTableService().selectionSource$.subscribe(() => {
            this.checked = this.table.isSelected(this.value);
        });
        this.checked = this.table.isSelected(this.value);
        if (isFunction(this.rowAriaDataResolver)) {
            this.ariaLabel = (_a = this.rowAriaDataResolver(this.value)) === null || _a === void 0 ? void 0 : _a.rowSelectionAriaLabel;
        }
    }
    onClick(event) {
        if (!this.disabled) {
            let appliedRangeRowsSelections = false;
            const currentRowId = this.table.getPrimaryKey(this.value);
            if (!this.checked) {
                const lastSelectedRowId = this.table.lastSelectedRowId;
                // range selection with shiftKey
                if (event.shiftKey && lastSelectedRowId && this.table.isRowSelected(lastSelectedRowId)) {
                    const renderingDataRows = this.table.getCurrentPageRenderingDataRows(true);
                    const startRowsSelectionIndex = this.getIndexOfSelectedDataItem(renderingDataRows, currentRowId);
                    if (startRowsSelectionIndex >= 0) {
                        let endRowsSelectionIndex = this.getIndexOfSelectedDataItem(renderingDataRows.slice(startRowsSelectionIndex + 1), currentRowId);
                        if (endRowsSelectionIndex >= 0) {
                            endRowsSelectionIndex += startRowsSelectionIndex + 1;
                            const rowsToAddForSelection = renderingDataRows
                                .slice(startRowsSelectionIndex, endRowsSelectionIndex + 1)
                                .filter(renderingDataRow => {
                                if (renderingDataRow.isGroup) {
                                    return false;
                                }
                                return !this.table.isRowSelected(renderingDataRow.rowData);
                            }).map(renderingDataRow => renderingDataRow.rowData);
                            appliedRangeRowsSelections = true;
                            this.table.addToRowSelection(rowsToAddForSelection);
                        }
                    }
                }
                this.table.lastSelectedRowId = currentRowId;
            }
            if (!appliedRangeRowsSelections) {
                this.table.toggleRowWithCheckbox({
                    originalEvent: event,
                    rowIndex: this.index
                }, this.value);
            }
        }
        DomHandler.clearSelection();
    }
    getIndexOfSelectedDataItem(dataRows, currentRowId) {
        return dataRows.findIndex(dataRow => {
            if (dataRow.isGroup) {
                return false;
            }
            const dataRowId = this.table.getPrimaryKey(dataRow.rowData);
            return dataRowId === this.table.lastSelectedRowId || dataRowId === currentRowId;
        });
    }
    onFocus() {
        DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');
    }
    onBlur() {
        DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
AdaptRowSelectionCheckboxComponent.ɵfac = function AdaptRowSelectionCheckboxComponent_Factory(t) { return new (t || AdaptRowSelectionCheckboxComponent)(i0.ɵɵdirectiveInject(i1.AdaptTableComponent)); };
AdaptRowSelectionCheckboxComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptRowSelectionCheckboxComponent, selectors: [["adapt-row-selection-checkbox"]], viewQuery: function AdaptRowSelectionCheckboxComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.boxViewChild = _t.first);
    } }, inputs: { renderRowData: "renderRowData", disabled: "disabled", value: "value", index: "index", rowAriaDataResolver: "rowAriaDataResolver" }, decls: 19, vars: 12, consts: [[1, "ui-chkbox", "ui-widget", 3, "click"], [1, "ui-helper-hidden-accessible"], ["type", "checkbox", 3, "checked", "disabled", "focus", "blur"], ["class", "sr-only", 4, "ngIf"], [3, "ngClass"], ["box", ""], [1, "ui-chkbox-icon", "ui-clickable", 3, "ngClass"], [1, "sr-only"]], template: function AdaptRowSelectionCheckboxComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵlistener("click", function AdaptRowSelectionCheckboxComponent_Template_div_click_0_listener($event) { return ctx.onClick($event); });
        i0.ɵɵtext(1, "\n  ");
        i0.ɵɵelementStart(2, "div", 1);
        i0.ɵɵtext(3, "\n    ");
        i0.ɵɵelementStart(4, "label");
        i0.ɵɵtext(5, "\n      ");
        i0.ɵɵelementStart(6, "input", 2);
        i0.ɵɵlistener("focus", function AdaptRowSelectionCheckboxComponent_Template_input_focus_6_listener() { return ctx.onFocus(); })("blur", function AdaptRowSelectionCheckboxComponent_Template_input_blur_6_listener() { return ctx.onBlur(); });
        i0.ɵɵelementEnd();
        i0.ɵɵtext(7, "\n      ");
        i0.ɵɵtemplate(8, AdaptRowSelectionCheckboxComponent_span_8_Template, 2, 1, "span", 3);
        i0.ɵɵtext(9, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(10, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(11, "\n  ");
        i0.ɵɵelementStart(12, "div", 4, 5);
        i0.ɵɵtext(14, "\n    ");
        i0.ɵɵelement(15, "span", 6);
        i0.ɵɵtext(16, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(17, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(18, "\n");
    } if (rf & 2) {
        i0.ɵɵadvance(6);
        i0.ɵɵproperty("checked", ctx.checked)("disabled", ctx.disabled);
        i0.ɵɵattribute("aria-checked", ctx.checked)("aria-label", ctx.ariaLabel);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.ariaLabel);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(7, _c1, ctx.checked, ctx.disabled));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(10, _c2, ctx.checked));
    } }, directives: [i2.NgIf, i2.NgClass], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRowSelectionCheckboxComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-row-selection-checkbox',
                templateUrl: './row-selection-checkbox.html',
            }]
    }], function () { return [{ type: i1.AdaptTableComponent }]; }, { renderRowData: [{
            type: Input
        }], disabled: [{
            type: Input
        }], value: [{
            type: Input
        }], index: [{
            type: Input
        }], rowAriaDataResolver: [{
            type: Input
        }], boxViewChild: [{
            type: ViewChild,
            args: ['box']
        }] }); })();
//# sourceMappingURL=row-selection-checkbox.component.js.map