import { Directive, HostListener, Input } from '@angular/core';
import { AdaptTableComponent } from '../../adapt-table.component';
import { DomHandler } from 'primeng/dom';
import * as i0 from "@angular/core";
import * as i1 from "../../adapt-table.component";
// eslint-disable-next-line @angular-eslint/directive-class-suffix
export class SortableColumn {
    constructor(dt) {
        this.dt = dt;
    }
    ngOnInit() {
        if (this.dt.isSorted(this.field)) {
            this.sortOrder = this.dt.isColumnSortOrderAsc(this.field) ? 'ascending' : 'descending';
        }
        else {
            this.sortOrder = 'none';
        }
        if (this.isEnabled()) {
            this.subscription = this.dt.tableService.sortSource$.subscribe((sortMeta) => {
                // Add timeout to update sorting state after 'sortField' and 'sortOrder' inputs changed
                setTimeout(() => {
                    this.updateSortState(sortMeta);
                });
            });
        }
    }
    updateSortState(sortMeta) {
        this.sorted = this.dt.isSorted(this.field);
        this.sortOrder = 'none';
        if (!sortMeta) {
            return;
        }
        if (this.dt.isMultipleSortMode) {
            sortMeta.forEach(item => {
                if (this.field === item.field) {
                    this.sortOrder = this.sorted ? (item.order === 1 ? 'ascending' : 'descending') : 'none';
                }
            });
        }
        else if (this.dt.isSingleSortMode) {
            this.sortOrder = this.sorted ? (sortMeta.order === 1 ? 'ascending' : 'descending') : 'none';
        }
    }
    onClick(event) {
        if (this.isEnabled()) {
            this.updateSortState();
            this.dt.sort({
                originalEvent: event,
                field: this.field
            });
            DomHandler.clearSelection();
        }
    }
    onEnterKey(event) {
        this.onClick(event);
    }
    isEnabled() {
        return this.pSortableColumnDisabled !== true;
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
SortableColumn.ɵfac = function SortableColumn_Factory(t) { return new (t || SortableColumn)(i0.ɵɵdirectiveInject(i1.AdaptTableComponent)); };
SortableColumn.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: SortableColumn, selectors: [["", "pSortableColumn", ""]], hostVars: 7, hostBindings: function SortableColumn_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("click", function SortableColumn_click_HostBindingHandler($event) { return ctx.onClick($event); })("keydown.enter", function SortableColumn_keydown_enter_HostBindingHandler($event) { return ctx.onEnterKey($event); });
    } if (rf & 2) {
        i0.ɵɵattribute("tabindex", ctx.isEnabled() ? "0" : null)("role", "columnheader")("aria-sort", ctx.sortOrder);
        i0.ɵɵclassProp("ui-sortable-column", ctx.isEnabled())("ui-state-highlight", ctx.sorted);
    } }, inputs: { field: ["pSortableColumn", "field"], pSortableColumnDisabled: "pSortableColumnDisabled" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(SortableColumn, [{
        type: Directive,
        args: [{
                // eslint-disable-next-line @angular-eslint/directive-selector
                selector: '[pSortableColumn]',
                // TODO: Refactor this if possible
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[class.ui-sortable-column]': 'isEnabled()',
                    '[class.ui-state-highlight]': 'sorted',
                    '[attr.tabindex]': 'isEnabled() ? "0" : null',
                    '[attr.role]': '"columnheader"',
                    '[attr.aria-sort]': 'sortOrder'
                }
            }]
    }], function () { return [{ type: i1.AdaptTableComponent }]; }, { field: [{
            type: Input,
            args: ['pSortableColumn']
        }], pSortableColumnDisabled: [{
            type: Input
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }], onEnterKey: [{
            type: HostListener,
            args: ['keydown.enter', ['$event']]
        }] }); })();
//# sourceMappingURL=sortable-column.directive.js.map