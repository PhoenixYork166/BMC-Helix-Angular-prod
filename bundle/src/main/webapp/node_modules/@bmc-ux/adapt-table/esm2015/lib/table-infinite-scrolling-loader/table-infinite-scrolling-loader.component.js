import { Component, Input, ViewEncapsulation, } from '@angular/core';
import { Observable, ReplaySubject } from 'rxjs';
import { LoaderInOutType } from '@bmc-ux/adapt-angular';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@bmc-ux/adapt-angular";
export class AdaptTableInfiniteScrollingLoaderComponent {
    constructor() {
        this.busyConfig = this.getBusyConfig();
        this._destroyed$ = new ReplaySubject(1);
    }
    set infiniteScrollLoading(value) {
        const busyConfigCopy = Object.assign({}, this.busyConfig);
        if (value) {
            if (this.busyConfig.busy) {
                this.busyConfig.busy.unsubscribe();
            }
            busyConfigCopy.busy = new Observable().pipe(takeUntil(this._destroyed$)).subscribe();
            this.busyConfig = busyConfigCopy;
        }
        else if (this.busyConfig.busy) {
            this.busyConfig.busy.unsubscribe();
            busyConfigCopy.busy = null;
            this.busyConfig = busyConfigCopy;
        }
    }
    ngOnDestroy() {
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
    getBusyConfig() {
        return {
            busy: null,
            backdrop: true,
            sticky: true,
            message: '',
            loaderType: 'section',
            inOutType: LoaderInOutType.fade,
        };
    }
}
AdaptTableInfiniteScrollingLoaderComponent.ɵfac = function AdaptTableInfiniteScrollingLoaderComponent_Factory(t) { return new (t || AdaptTableInfiniteScrollingLoaderComponent)(); };
AdaptTableInfiniteScrollingLoaderComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptTableInfiniteScrollingLoaderComponent, selectors: [["adapt-table-infinite-scrolling-loader"]], inputs: { infiniteScrollLoading: "infiniteScrollLoading" }, decls: 5, vars: 1, consts: [[1, "at-infinite-scrolling-loader"], [3, "ngBusy"]], template: function AdaptTableInfiniteScrollingLoaderComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵtext(1, "\n  ");
        i0.ɵɵelement(2, "div", 1);
        i0.ɵɵtext(3, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(4, "\n");
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngBusy", ctx.busyConfig);
    } }, directives: [i1.AdaptBusyDirective], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptTableInfiniteScrollingLoaderComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-table-infinite-scrolling-loader',
                templateUrl: './table-infinite-scrolling-loader.html',
                encapsulation: ViewEncapsulation.None,
            }]
    }], null, { infiniteScrollLoading: [{
            type: Input
        }] }); })();
//# sourceMappingURL=table-infinite-scrolling-loader.component.js.map