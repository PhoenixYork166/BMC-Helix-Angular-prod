import { Injectable } from '@angular/core';
import { isArray } from '@bmc-ux/adapt-angular';
import { AdaptTableFilters, FilterMatchMode } from '../adapt-table.models';
import * as i0 from "@angular/core";
export class AdaptTableFiltersService {
    filterName(column) {
        return column.filterName || AdaptTableFilters.DEFAULT_FILTER;
    }
    getFilterValue(columnField, table) {
        const filters = table.filters;
        if (!filters) {
            return null;
        }
        const filter = filters[columnField];
        return filter ? filter.value : null;
    }
    onSelectModelChange(model, column, table) {
        const arrayModel = isArray(model) ? model : [model];
        this.setFilter(arrayModel, column, table, FilterMatchMode.in);
    }
    setFilter(value, column, table, matchMode) {
        if (!matchMode) {
            const filterParams = this._getFilterParams(column);
            matchMode = (filterParams && filterParams.matchMode) || table.defaultFiltersMatchMode;
        }
        table.filter(value, column.field, matchMode);
    }
    getSelectTexts(column, texts) {
        const filterParams = this.getSelectFilterParams(column);
        if (filterParams && filterParams.selectTexts) {
            return Object.assign(Object.assign({}, texts.selectFilterTexts), filterParams.selectTexts);
        }
        else {
            return texts.selectFilterTexts;
        }
    }
    getSelectFilterParams(column) {
        return column.filterParams;
    }
    getSelectOptions(column) {
        const filterParams = this.getSelectFilterParams(column);
        if (filterParams && filterParams.values) {
            return filterParams.values.map((value) => typeof value === 'string' ? ({ id: value, name: value }) : value);
        }
        else {
            return [];
        }
    }
    _getFilterParams(column) {
        return column.filterParams;
    }
}
AdaptTableFiltersService.ɵfac = function AdaptTableFiltersService_Factory(t) { return new (t || AdaptTableFiltersService)(); };
AdaptTableFiltersService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptTableFiltersService, factory: AdaptTableFiltersService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptTableFiltersService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();
//# sourceMappingURL=adapt-table-filters.service.js.map