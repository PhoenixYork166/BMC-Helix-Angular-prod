import { Component, Input } from '@angular/core';
import { AdaptTableComponent } from '../adapt-table.component';
import { AdaptTableFiltersService } from './adapt-table-filters.service';
import * as i0 from "@angular/core";
import * as i1 from "../adapt-table.component";
import * as i2 from "./adapt-table-filters.service";
import * as i3 from "@angular/common";
import * as i4 from "@bmc-ux/adapt-angular";
import * as i5 from "@angular/forms";
import * as i6 from "./select-migration.component";
import * as i7 from "./adapt-table-merged-filters/adapt-table-merged-filters.component";
function AdaptTableFiltersComponent_ng_container_0_div_2_ng_container_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n      ");
} }
const _c0 = function (a0, a1) { return { column: a0, index: a1 }; };
function AdaptTableFiltersComponent_ng_container_0_div_2_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptTableFiltersComponent_ng_container_0_div_2_ng_container_2_ng_template_2_Template, 1, 0, "ng-template", 6);
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const column_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", column_r3.filterTemplate)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c0, column_r3, ctx_r4.index));
} }
function AdaptTableFiltersComponent_ng_container_0_div_2_ng_template_4_adapt_rx_search_3_Template(rf, ctx) { if (rf & 1) {
    const _r13 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-rx-search", 10);
    i0.ɵɵlistener("ngModelChange", function AdaptTableFiltersComponent_ng_container_0_div_2_ng_template_4_adapt_rx_search_3_Template_adapt_rx_search_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r13); const column_r3 = i0.ɵɵnextContext(2).$implicit; const ctx_r11 = i0.ɵɵnextContext(2); return ctx_r11.setFilter($event, column_r3); });
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r3 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r9 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("ngModel", ctx_r9.getFilterValue(column_r3.field))("placeholder", ctx_r9.texts.textFilterTexts.placeholder)("label", ctx_r9.texts.textFilterTexts.label)("initialAlign", "left")("searchButton", ctx_r9.table.explicitSearchBtn)("size", "sm");
} }
function AdaptTableFiltersComponent_ng_container_0_div_2_ng_template_4_adapt_select_migration_5_Template(rf, ctx) { if (rf & 1) {
    const _r17 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-select-migration", 11);
    i0.ɵɵlistener("selectModelChange", function AdaptTableFiltersComponent_ng_container_0_div_2_ng_template_4_adapt_select_migration_5_Template_adapt_select_migration_selectModelChange_0_listener($event) { i0.ɵɵrestoreView(_r17); const column_r3 = i0.ɵɵnextContext(2).$implicit; const ctx_r15 = i0.ɵɵnextContext(2); return ctx_r15.onSelectModelChange($event, column_r3); })("popupOpenChange", function AdaptTableFiltersComponent_ng_container_0_div_2_ng_template_4_adapt_select_migration_5_Template_adapt_select_migration_popupOpenChange_0_listener($event) { i0.ɵɵrestoreView(_r17); const column_r3 = i0.ɵɵnextContext(2).$implicit; const ctx_r18 = i0.ɵɵnextContext(2); return $event ? ctx_r18.fireCallback($event, column_r3, "dropdownOpened") : ctx_r18.fireCallback($event, column_r3, "dropdownClosed"); })("filterValueChange", function AdaptTableFiltersComponent_ng_container_0_div_2_ng_template_4_adapt_select_migration_5_Template_adapt_select_migration_filterValueChange_0_listener($event) { i0.ɵɵrestoreView(_r17); const column_r3 = i0.ɵɵnextContext(2).$implicit; const ctx_r20 = i0.ɵɵnextContext(2); return ctx_r20.fireCallback($event, column_r3, "filterValueChanged"); });
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r3 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r10 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("settings", ctx_r10.getSelectSettings(column_r3))("texts", ctx_r10.getSelectTexts(column_r3))("options", ctx_r10.getSelectOptions(column_r3))("multiple", !ctx_r10.isSingleSelect(column_r3))("optionFormatter", ctx_r10.selectOptionFormatter)("value", ctx_r10.getFilterValue(column_r3.field));
} }
function AdaptTableFiltersComponent_ng_container_0_div_2_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵelementContainerStart(1, 7);
    i0.ɵɵtext(2, "\n        ");
    i0.ɵɵtemplate(3, AdaptTableFiltersComponent_ng_container_0_div_2_ng_template_4_adapt_rx_search_3_Template, 2, 7, "adapt-rx-search", 8);
    i0.ɵɵtext(4, "\n\n        ");
    i0.ɵɵtemplate(5, AdaptTableFiltersComponent_ng_container_0_div_2_ng_template_4_adapt_select_migration_5_Template, 2, 6, "adapt-select-migration", 9);
    i0.ɵɵtext(6, "\n      ");
    i0.ɵɵelementContainerEnd();
    i0.ɵɵtext(7, "\n    ");
} if (rf & 2) {
    const column_r3 = i0.ɵɵnextContext().$implicit;
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitch", ctx_r6.filterName(column_r3));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngSwitchCase", "textFilter");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngSwitchCase", "selectFilter");
} }
function AdaptTableFiltersComponent_ng_container_0_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 3);
    i0.ɵɵtext(1, "\n\n    ");
    i0.ɵɵtemplate(2, AdaptTableFiltersComponent_ng_container_0_div_2_ng_container_2_Template, 4, 5, "ng-container", 4);
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵtemplate(4, AdaptTableFiltersComponent_ng_container_0_div_2_ng_template_4_Template, 8, 3, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(6, "\n\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r3 = ctx.$implicit;
    const _r5 = i0.ɵɵreference(5);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", column_r3.filterTemplate)("ngIfElse", _r5);
} }
function AdaptTableFiltersComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n  ");
    i0.ɵɵtemplate(2, AdaptTableFiltersComponent_ng_container_0_div_2_Template, 7, 2, "div", 2);
    i0.ɵɵtext(3, "\n");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r0.columns)("ngForTrackBy", ctx_r0.table.trackByForColumns);
} }
function AdaptTableFiltersComponent_adapt_table_merged_filters_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "adapt-table-merged-filters", 12);
    i0.ɵɵtext(1, "\n");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("columns", ctx_r1.columns)("index", ctx_r1.index)("texts", ctx_r1.texts);
} }
export class AdaptTableFiltersComponent {
    constructor(table, _adaptTableFiltersService) {
        this.table = table;
        this._adaptTableFiltersService = _adaptTableFiltersService;
        this.selectSettingsForMultiple = {
            multiple: true,
            appendToBody: true,
            placement: 'bottom-left',
        };
        this.selectSettingsForSingle = {
            multiple: false,
            enableFilter: true,
            appendToBody: true,
            placement: 'bottom-left',
        };
    }
    filterName(column) {
        return this._adaptTableFiltersService.filterName(column);
    }
    isSingleSelect(column) {
        return this._adaptTableFiltersService.getSelectFilterParams(column).single;
    }
    setFilter(value, column, matchMode) {
        this._adaptTableFiltersService.setFilter(value, column, this.table, matchMode);
    }
    getFilterValue(columnField) {
        return this._adaptTableFiltersService.getFilterValue(columnField, this.table);
    }
    getSelectOptions(column) {
        return this._adaptTableFiltersService.getSelectOptions(column);
    }
    getSelectSettings(column) {
        const filterParams = this._adaptTableFiltersService.getSelectFilterParams(column);
        if (filterParams.selectSettings) {
            return filterParams.selectSettings;
        }
        else {
            return this.isSingleSelect(column) ? this.selectSettingsForSingle : this.selectSettingsForMultiple;
        }
    }
    getSelectTexts(column) {
        return this._adaptTableFiltersService.getSelectTexts(column, this.texts);
    }
    onSelectModelChange(value, column) {
        this._adaptTableFiltersService.onSelectModelChange(value, column, this.table);
    }
    fireCallback(event, column, callbackName) {
        const callbacks = this._getFilterCallbacks(column);
        if (callbacks && callbacks[callbackName]) {
            callbacks[callbackName](event);
        }
    }
    selectOptionFormatter(option) {
        return option.name;
    }
    _getFilterCallbacks(column) {
        const filterParams = this._adaptTableFiltersService.getSelectFilterParams(column);
        return filterParams.callbacks;
    }
}
AdaptTableFiltersComponent.ɵfac = function AdaptTableFiltersComponent_Factory(t) { return new (t || AdaptTableFiltersComponent)(i0.ɵɵdirectiveInject(i1.AdaptTableComponent), i0.ɵɵdirectiveInject(i2.AdaptTableFiltersService)); };
AdaptTableFiltersComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptTableFiltersComponent, selectors: [["adapt-table-filters"]], inputs: { columns: "columns", index: "index", texts: "texts" }, decls: 4, vars: 2, consts: [[4, "ngIf"], [3, "columns", "index", "texts", 4, "ngIf"], ["class", "adapt-table-filters", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "adapt-table-filters"], [4, "ngIf", "ngIfElse"], ["noFilterTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "ngSwitch"], [3, "adaptRadarDisableEventSending", "ngModel", "placeholder", "label", "initialAlign", "searchButton", "size", "ngModelChange", 4, "ngSwitchCase"], [3, "settings", "texts", "options", "multiple", "optionFormatter", "value", "selectModelChange", "popupOpenChange", "filterValueChange", 4, "ngSwitchCase"], [3, "adaptRadarDisableEventSending", "ngModel", "placeholder", "label", "initialAlign", "searchButton", "size", "ngModelChange"], [3, "settings", "texts", "options", "multiple", "optionFormatter", "value", "selectModelChange", "popupOpenChange", "filterValueChange"], [3, "columns", "index", "texts"]], template: function AdaptTableFiltersComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, AdaptTableFiltersComponent_ng_container_0_Template, 4, 2, "ng-container", 0);
        i0.ɵɵtext(1, "\n\n");
        i0.ɵɵtemplate(2, AdaptTableFiltersComponent_adapt_table_merged_filters_2_Template, 2, 3, "adapt-table-merged-filters", 1);
        i0.ɵɵtext(3, "\n");
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.columns.length < 2);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.columns.length >= 2);
    } }, directives: [i3.NgIf, i3.NgForOf, i3.NgTemplateOutlet, i3.NgSwitch, i3.NgSwitchCase, i4.AdaptRxSearchComponent, i5.NgControlStatus, i5.NgModel, i6.AdaptSelectMigrationComponent, i7.AdaptTableMergedFiltersComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptTableFiltersComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-table-filters',
                templateUrl: './adapt-table-filters.html',
            }]
    }], function () { return [{ type: i1.AdaptTableComponent }, { type: i2.AdaptTableFiltersService }]; }, { columns: [{
            type: Input
        }], index: [{
            type: Input
        }], texts: [{
            type: Input
        }] }); })();
//# sourceMappingURL=adapt-table-filters.component.js.map