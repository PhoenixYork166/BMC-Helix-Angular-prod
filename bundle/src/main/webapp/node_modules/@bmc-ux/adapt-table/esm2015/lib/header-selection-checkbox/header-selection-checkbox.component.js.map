{"version":3,"file":"header-selection-checkbox.component.js","sourceRoot":"","sources":["../../../../../../libs/adapt-table/src/lib/header-selection-checkbox/header-selection-checkbox.component.ts","../../../../../../libs/adapt-table/src/lib/header-selection-checkbox/header-selection-checkbox.html"],"names":[],"mappings":"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","sourcesContent":["import {FocusMonitor, ListKeyManager} from '@angular/cdk/a11y';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  AdaptDeviceDetectionService,\n  AdaptDropdownAnimationEvent,\n  AdaptDropdownDirective,\n  AdaptListKeyManagerItemDirective,\n  AdaptOverlayService,\n  formatString,\n  getEventKeyCode,\n  SafeCdr,\n} from '@bmc-ux/adapt-angular';\nimport {isNil, isNumber} from 'lodash-es';\nimport {fromEvent, ReplaySubject, Subject} from 'rxjs';\nimport {debounceTime, distinctUntilChanged, take, takeUntil} from 'rxjs/operators';\nimport {AdaptTableComponent} from '../adapt-table.component';\nimport {\n  AdaptTableHeaderCheckboxToggleEvent,\n  AdaptTableHeaderCheckboxToggleSource,\n  AdaptTableHeaderSelectionMode,\n  CheckboxState,\n  RowData,\n  RowDataItem,\n  TableCustomTexts,\n} from '../adapt-table.models';\n\n\n@Component({\n  selector: 'adapt-header-selection-checkbox',\n  templateUrl: './header-selection-checkbox.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.Default\n})\nexport class AdaptHeaderSelectionCheckboxComponent implements OnInit, AfterViewInit, OnDestroy {\n  activeItem: AdaptListKeyManagerItemDirective;\n  checkboxToggleSource: typeof AdaptTableHeaderCheckboxToggleSource;\n\n  get totalRecords(): number {\n    /**\n     * When there is no totalRecords info available(means that for some reasons customer doesn't know how many records are in the table)\n     * we assume that totalRecords are at least on one record more than loaded records length until customer can set correct totalRecords value.\n     *\n     * This allows correctly calculate visibility of items in selection menu\n     */\n    if (!this.table.isTotalRecordsInfoAvailable() && this.table.value) {\n      return this.table.value.length + 1;\n    }\n\n    return this.table.totalRecords;\n  }\n\n  /**\n   * If totalRecords was set as null we assume that all other selection related inputs(eg. selectedFilteredRowsCount)\n   * was also set as null so can't be used in calculations.\n   * But when totalRecords are equal to value length it means that we can use totalRecords in calculations but not selection related inputs(eg. selectedFilteredRowsCount)\n   */\n  get isAllSelectionInfoAvailable(): boolean {\n    return this.table.lazy\n      && this.table.isTotalRecordsInfoAvailable()\n      && isNumber(this.table.disabledSelectedRowsCount)\n      && isNumber(this.table.disabledNotSelectedRowsCount)\n      && isNumber(this.table.disabledSelectedFilteredRowsCount)\n      && isNumber(this.table.disabledNotSelectedFilteredRowsCount)\n      && isNumber(this.table.selectedFilteredRowsCount)\n      && isNumber(this.table.totalRecordsInGroup);\n  }\n\n  @Input() texts: TableCustomTexts;\n\n  @Output() readonly headerCheckboxToggle: EventEmitter<AdaptTableHeaderCheckboxToggleEvent> = new EventEmitter<AdaptTableHeaderCheckboxToggleEvent>();\n\n  @ViewChild('headerRowsSelectionDropdownRef') headerRowsSelectionDropdownRef: AdaptDropdownDirective;\n  @ViewChild('headerRowsSelectionDropdownAnchorRef') headerRowsSelectionDropdownAnchorRef: ElementRef<HTMLDivElement>;\n  @ViewChild('headerRowsSelectionDropdownMenu') headerRowsSelectionDropdownMenu: ElementRef<HTMLDivElement>;\n\n  private _listKeyManager: ListKeyManager<AdaptListKeyManagerItemDirective>;\n  private _listKeyManagerDestroy: Subject<void> = new Subject<void>();\n  private _destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n\n  constructor(\n    public table: AdaptTableComponent,\n    private _focusMonitor: FocusMonitor,\n    private _ngZone: NgZone,\n    private _cdr: ChangeDetectorRef,\n    private _overlayService: AdaptOverlayService,\n    private _adaptDeviceDetectionService: AdaptDeviceDetectionService\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.checkboxToggleSource = AdaptTableHeaderCheckboxToggleSource;\n  }\n\n  ngAfterViewInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      fromEvent(this.headerRowsSelectionDropdownAnchorRef.nativeElement, 'mouseover')\n        .pipe(debounceTime(50), takeUntil(this._destroyed$))\n        .subscribe((event: MouseEvent) => {\n          this.showHeaderRowsSelectionDD(event);\n        });\n\n      fromEvent(this.headerRowsSelectionDropdownMenu.nativeElement, 'mouseleave')\n        .pipe(takeUntil(this._destroyed$))\n        .subscribe(() => {\n          this.hideHeaderRowsSelectionDD();\n        });\n    });\n  }\n\n  ngOnDestroy(): void {\n    this._listKeyManagerDestroy.next();\n    this._destroyed$.next(true);\n    this._destroyed$.complete();\n  }\n\n  keyManagerStateChange(listKeyManager?: ListKeyManager<AdaptListKeyManagerItemDirective>): void {\n    this._listKeyManager = listKeyManager;\n\n    if (this._listKeyManager) {\n      this._listKeyManager.change\n        .pipe(takeUntil(this._listKeyManagerDestroy))\n        .subscribe(() => {\n          this._ngZone.onStable.asObservable()\n            .pipe(distinctUntilChanged(), takeUntil(this._destroyed$))\n            .subscribe(() => {\n              this.setActiveItem(this._listKeyManager.activeItem);\n              SafeCdr.markForCheck(this._cdr);\n            });\n        });\n\n      this._listKeyManager.tabOut\n        .pipe(takeUntil(this._listKeyManagerDestroy))\n        .subscribe(() => {\n          this.hideHeaderRowsSelectionDD();\n        });\n    } else {\n      this._listKeyManagerDestroy.next();\n      this.setActiveItem(null);\n    }\n  }\n\n  onPopupAnimationDone(event: AdaptDropdownAnimationEvent): void {\n    if (event?.eventInvokedFrom === 'keyboard') {\n      if (this.headerRowsSelectionDropdownRef.isOpen()) {\n        this._ngZone.onStable.asObservable()\n          .pipe(take(1), takeUntil(this._destroyed$))\n          .subscribe(() => {\n            this._listKeyManager.setFirstItemActive();\n            this.setActiveItem(this._listKeyManager.activeItem);\n            SafeCdr.detectChanges(this._cdr);\n          });\n      } else {\n        this._listKeyManager.setActiveItem(null);\n        this.setActiveItem(null);\n      }\n    }\n  }\n\n  onHeaderRowsSelectionMenuOpen(event: KeyboardEvent | MouseEvent): void {\n    // Prevent default behaviour to not toggle header checkbox on mobile on tap(click) event\n    if (this._adaptDeviceDetectionService.isMobile()) {\n      event.preventDefault();\n    }\n\n    const keyCode = getEventKeyCode(event as KeyboardEvent);\n\n    if (keyCode === ENTER || keyCode === SPACE) {\n      this.headerRowsSelectionDropdownRef.open(event);\n    }\n\n    if (this._listKeyManager) {\n      this._listKeyManager.onKeydown(event as KeyboardEvent);\n\n      if (keyCode === ENTER || keyCode === SPACE && this.headerRowsSelectionDropdownRef.isOpen()) {\n        switch (this._listKeyManager.activeItem?.item) {\n          case AdaptTableHeaderCheckboxToggleSource.DeselectAll: {\n            this.onDeselectAllRowsInTable(true);\n            break;\n          }\n          case AdaptTableHeaderCheckboxToggleSource.SelectOnPage: {\n            this.onSelectAllRowsOnPage(true);\n            break;\n          }\n          case AdaptTableHeaderCheckboxToggleSource.SelectAll: {\n            this.onSelectAllRowsInTable(true);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  onDeselectAllRowsInTable(selectFromKeyboard: boolean = false): void {\n    this._toggleRowSelection(false, this.table.getAllCurrentRows(), AdaptTableHeaderCheckboxToggleSource.DeselectAll, selectFromKeyboard);\n\n    if (this.table.isMobile) {\n      this.hideHeaderRowsSelectionDD();\n    }\n  }\n\n  onSelectAllRowsOnPage(selectFromKeyboard: boolean = false): void {\n    this._toggleRowSelection(true, this.table.getCurrentPageDisplayingRowsItems(), AdaptTableHeaderCheckboxToggleSource.SelectOnPage, selectFromKeyboard);\n\n    if (this.table.isMobile) {\n      this.hideHeaderRowsSelectionDD();\n    }\n  }\n\n  onSelectAllRowsInTable(selectFromKeyboard: boolean = false): void {\n    this._toggleRowSelection(true, this.table.getAllCurrentRows(), AdaptTableHeaderCheckboxToggleSource.SelectAll, selectFromKeyboard);\n\n    if (this.table.isMobile) {\n      this.hideHeaderRowsSelectionDD();\n    }\n  }\n\n  showHeaderRowsSelectionDD(event: MouseEvent): void {\n    if (!this.hasAllItemsDisabledForSelection()) {\n      this._ngZone.run(() => {\n        this.headerRowsSelectionDropdownRef.open(event);\n\n        if (!this._overlayService.enableCDKOverlayControl) {\n          SafeCdr.markForCheck(this._cdr);\n        }\n      });\n    }\n  }\n\n  hideHeaderRowsSelectionDD(): void {\n    this._ngZone.run(() => {\n      this.headerRowsSelectionDropdownRef.close();\n    });\n  }\n\n  getSelectAllItemsOnPageHeaderLabel(): string {\n    const isTableHasDisabledRecords = this._checkOnDisabledRecords();\n    const isTableInFilteringState = this.table.hasFilter();\n\n    if (this.table.lazy && this.table.enableInfiniteScrolling) {\n      if (isTableInFilteringState && isTableHasDisabledRecords) {\n        return this.texts.selectAllPossibleFilteredVisibleItemsHeaderLabel;\n      }\n\n      if (isTableInFilteringState && !isTableHasDisabledRecords) {\n        return this.texts.selectAllFilteredVisibleItemsHeaderLabel;\n      }\n\n      if (!isTableInFilteringState && isTableHasDisabledRecords) {\n        return this.texts.selectAllPossibleVisibleItemsHeaderLabel;\n      }\n\n      return this.texts.selectAllVisibleItemsHeaderLabel;\n    }\n\n    if (isTableInFilteringState && isTableHasDisabledRecords) {\n      return this.texts.selectAllPossibleFilteredItemsOnPageHeaderLabel;\n    }\n\n    if (isTableInFilteringState && !isTableHasDisabledRecords) {\n      return this.texts.selectAllFilteredItemsOnPageHeaderLabel;\n    }\n\n    if (!isTableInFilteringState && isTableHasDisabledRecords) {\n      return this.texts.selectAllPossibleItemsOnPageHeaderLabel;\n    }\n\n    return this.texts.selectAllItemsOnPageHeaderLabel;\n  }\n\n  getSelectAllItemsInTableHeaderLabel(): string {\n    const isTableHasDisabledRecords = this._checkOnDisabledRecords();\n    const isTableInFilteringState = this.table.hasFilter();\n\n    if (isTableInFilteringState && isTableHasDisabledRecords) {\n      return this.texts.selectAllPossibleFilteredItemsInTableHeaderLabel;\n    }\n\n    if (!isTableInFilteringState && isTableHasDisabledRecords) {\n      return this.texts.selectAllPossibleItemsInTableHeaderLabel;\n    }\n\n    if (isTableInFilteringState && !isTableHasDisabledRecords) {\n      return this.texts.selectAllFilteredItemsInTableHeaderLabel;\n    }\n\n    return this.table.isTotalRecordsInfoAvailable()\n      ? formatString(this.texts.selectAllItemsInTableHeaderLabel, this.table.totalRecords)\n      : this.texts.selectAllItemsInTableHeaderLabelForUnknownTotalRecords;\n  }\n\n  getDeselectAllItemsHeaderLabel(): string {\n    const isTableHasDisabledRecords = this._checkOnDisabledRecords();\n    const isTableInFilteringState = this.table.hasFilter();\n\n    if (isTableInFilteringState && isTableHasDisabledRecords) {\n      return this.texts.deselectAllPossibleFilteredItemsInTableHeaderLabel;\n    }\n\n    if (!isTableInFilteringState && isTableHasDisabledRecords) {\n      return this.texts.deselectAllPossibleItemsInTableHeaderLabel;\n    }\n\n    if (isTableInFilteringState && !isTableHasDisabledRecords) {\n      return this.texts.deselectAllFilteredItemsInTableHeaderLabel;\n    }\n\n    return this.texts.deselectAllItemsInTableHeaderLabel;\n  }\n\n  isIndeterminateState(): boolean {\n    if (this.table.hasAtLeastOneRowGroupedData()) {\n      return this._getGroupSelectionState(this.table.getRowSelectionArray()) === CheckboxState.Indeterminate;\n    }\n\n    return this.isAtLeastOneRowSelected() && !this.isCheckedState();\n  }\n\n  isCheckedState(): boolean {\n    if (this.table.hasAtLeastOneRowGroupedData()) {\n      return this._getGroupSelectionState(this.table.getRowSelectionArray()) === CheckboxState.Selected;\n    }\n\n    const selectedRowsLength = this.table.getRowSelectionArray().length;\n\n    if (selectedRowsLength === 0) {\n      return false;\n    }\n\n    return this.table.isTotalRecordsInfoAvailable()\n      ? selectedRowsLength === this.table.allTotalRecords\n      : this._filterSelectedRows(this.table.getAllCurrentRows()).length === this.table.getAllCurrentRows().length + 1;\n  }\n\n  isAtLeastOneRowSelected(): boolean {\n    return this.table.getRowSelectionArray().length > 0;\n  }\n\n  canDeselectRows(): boolean {\n    if (this.isAllSelectionInfoAvailable) {\n      return this.table.hasFilter()\n        ? this.table.selectedFilteredRowsCount - this.table.disabledSelectedFilteredRowsCount > 0\n        : this.table.getRowSelectionArray().length - this.table.disabledSelectedRowsCount > 0;\n    }\n\n    if (this.table.hasFilter()) {\n      const selectedFilteredRows = this._filterSelectedRows(this.table.getAllCurrentRows());\n\n      return selectedFilteredRows.length - this._getDisabledSelectedRows(selectedFilteredRows).length > 0;\n    }\n\n    return this._getDisabledSelectedRows(this.table.getAllCurrentRows()).length !== this.table.getRowSelectionArray().length;\n  }\n\n  showSelectionItems(): boolean {\n    const selectionArray: RowDataItem[] = this.table.getRowSelectionArray();\n    const disabledNotSelectedRowsCount: number = this.table.disabledNotSelectedRowsCount ?? this._getDisabledNotSelectedRows(this.table.getAllCurrentRows()).length;\n\n    if (this.table.hasAtLeastOneRowGroupedData()) {\n      const allRows: RowDataItem[] = this.table.getRowsItems(this.table.getAllCurrentRows());\n      const totalRecordsInGroup: number = this.isAllSelectionInfoAvailable ? this.table.totalRecordsInGroup : allRows.length;\n\n      if (this.table.hasFilter()) {\n        return this.isAllSelectionInfoAvailable\n          ? this.table.totalRecordsInGroup !== this.table.selectedFilteredRowsCount + this.table.disabledNotSelectedFilteredRowsCount\n          : this._filterSelectedRows(allRows).length + disabledNotSelectedRowsCount !== allRows.length;\n      }\n\n      return totalRecordsInGroup !== selectionArray.length + disabledNotSelectedRowsCount;\n    }\n\n    if (this.table.hasFilter()) {\n      return this.isAllSelectionInfoAvailable\n        ? this.totalRecords !== this.table.selectedFilteredRowsCount + this.table.disabledNotSelectedFilteredRowsCount\n        : this._filterSelectedRows(this.table.getAllCurrentRows()).length + disabledNotSelectedRowsCount !== this.table.getAllCurrentRows().length;\n    }\n\n    // Because we can't differentiate is user select all rows on page or in table without totalRecords info\n    // we hide both selection items if all loaded rows was selected\n    return this.table.isTotalRecordsInfoAvailable()\n      ? this.table.allTotalRecords !== selectionArray.length + disabledNotSelectedRowsCount\n      : this._filterSelectedRows(this.table.getAllCurrentRows()).length + disabledNotSelectedRowsCount !== this.table.getAllCurrentRows().length;\n  }\n\n  isChunkSelectionAvailable(): boolean {\n    const allSelectableRowsOnPageLength = this._getAllSelectableRowsOnPage().length;\n\n    switch (this.table.headerSelectionMode) {\n      case AdaptTableHeaderSelectionMode.All: {\n        return false;\n      }\n      case AdaptTableHeaderSelectionMode.Chunk: {\n        return this._getCurrentPageSelectedRows().length !== allSelectableRowsOnPageLength;\n      }\n      case AdaptTableHeaderSelectionMode.Both: {\n        return this.table.rows < this.totalRecords\n          && this._getCurrentPageSelectedRows().length !== allSelectableRowsOnPageLength\n          && (this.table.enableInfiniteScrolling\n            ? this.table.getAllCurrentRows().filter(row => !isNil(row)).length !== this.totalRecords\n            : allSelectableRowsOnPageLength !== this.totalRecords);\n      }\n    }\n  }\n\n  isAllSelectionAvailable(): boolean {\n    return this.table.headerSelectionMode === AdaptTableHeaderSelectionMode.All\n      || this.table.headerSelectionMode === AdaptTableHeaderSelectionMode.Both;\n  }\n\n  hasAllItemsDisabledForSelection(): boolean {\n    return this.table.disableRowSelection\n      || (this.isAllSelectionInfoAvailable\n        ? this.totalRecords - (this.table.hasFilter() ? this.table.disabledNotSelectedFilteredRowsCount + this.table.disabledSelectedFilteredRowsCount : this.table.disabledNotSelectedRowsCount + this.table.disabledSelectedRowsCount) === 0\n        : !this._getAllSelectableRowsInTable().length);\n  }\n\n  setActiveItem(keyManagerItem: AdaptListKeyManagerItemDirective): void {\n    this.activeItem = keyManagerItem;\n  }\n\n  private _getAllSelectableRowsInTable(): RowDataItem[] {\n    return this.table.getSelectableRowsItems(this.table.getAllCurrentRows()).filter(row => !isNil(row));\n  }\n\n  private _getAllSelectableRowsOnPage(): RowDataItem[] {\n    return this.table.getSelectableRowsItems(this.table.getCurrentPageDisplayingRowsItems()).filter(row => !isNil(row));\n  }\n\n  private _getCurrentPageSelectedRows(): RowData[] {\n    return this._filterSelectedRows(this._getAllSelectableRowsOnPage());\n  }\n\n  private _getDisabledSelectedRows(rows: RowData[]): RowDataItem[] {\n    const result: RowDataItem[] = [];\n\n    this.table.goRecursivelyByItemsInGroups(rows, (row) => {\n      if (this.table.isRowSelectionDisabled(row) && this.table.isRowSelected(row)) {\n        result.push(row);\n      }\n    });\n\n    return result;\n  }\n\n  private _getDisabledNotSelectedRows(rows: RowData[]): RowDataItem[] {\n    const result: RowDataItem[] = [];\n\n    this.table.goRecursivelyByItemsInGroups(rows, (row) => {\n      // Remove items that disabled but already selected\n      if (this.table.isRowSelectionDisabled(row) && !this.table.isRowSelected(row)) {\n        result.push(row);\n      }\n    });\n\n    return result;\n  }\n\n  private _checkOnDisabledRecords(): boolean {\n    return this.isAllSelectionInfoAvailable\n      ? this.table.disabledNotSelectedRowsCount > 0 || this.table.disabledSelectedRowsCount > 0\n      : this.table.getAllCurrentRows().some(this.table.isRowSelectionDisabled.bind(this.table));\n  }\n\n  private _toggleRowSelection(checked: boolean, rowsToToggle: RowDataItem[], eventSource: AdaptTableHeaderCheckboxToggleSource, selectFromKeyboard: boolean): void {\n    this.table.onToogleGroupedRowsSelection(checked, rowsToToggle);\n    this.table.handleHeaderCheckboxToggle({\n      originalEvent: window.event,\n      checked,\n      eventSource,\n      filters: this.table.filters,\n      globalFilter: this.table.filters && this.table.filters.global ? this.table.filters.global.value : null,\n    });\n\n    if (selectFromKeyboard) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1), takeUntil(this._destroyed$))\n        .subscribe(() => {\n          this._listKeyManager.setFirstItemActive();\n        });\n    }\n  }\n\n  private _filterSelectedRows(rows: RowDataItem[]): RowDataItem[] {\n    // Check selected rows by \"dataKey\" because selected row can have custom properties.\n    // https://github.bmc.com/bmc-ux/adapt-angular/issues/7497\n    return rows.filter(row => this.table.isRowSelected(row));\n  }\n\n  private _getGroupSelectionState(selection?: RowDataItem[]): CheckboxState {\n    let dataItemsCount = 0;\n\n    if (selection && !selection.length) {\n      return CheckboxState.Unselected;\n    }\n\n    if (this.table.lazy && this.table.paginator) {\n      let selectedItemsCountInCurrentPage = 0;\n\n      this.table.goRecursivelyByItemsInAllGroups(row => {\n        dataItemsCount++;\n\n        if (this.table.isRowSelected(row)) {\n          selectedItemsCountInCurrentPage++;\n        }\n      });\n\n      if (dataItemsCount === 0 || selectedItemsCountInCurrentPage === 0) {\n        return CheckboxState.Unselected;\n      }\n\n      return dataItemsCount === selectedItemsCountInCurrentPage ? CheckboxState.Selected : CheckboxState.Indeterminate;\n    }\n\n    this.table.goRecursivelyByItemsInAllGroups(() => {\n      dataItemsCount++;\n    });\n\n    if (dataItemsCount === 0) {\n      return CheckboxState.Unselected;\n    }\n\n    selection = selection || this.table.getRowSelectionArray();\n\n    return selection.length === dataItemsCount ? CheckboxState.Selected : CheckboxState.Indeterminate;\n  }\n}\n","<div adaptDropdown\n     [adaptRadarDisableEventSending]=\"true\"\n     class=\"at-header-selection\"\n     [autoClose]=\"'outside'\"\n     [appendToBody]=\"true\"\n     [customClass]=\"table.isMobile ? 'at-header-selection__dropdown at-header-selection__dropdown_mobile' : 'at-header-selection__dropdown'\"\n     (popupAnimationDone)=\"onPopupAnimationDone($event)\"\n     #headerRowsSelectionDropdownRef>\n  <div adaptDropdownAnchor\n       #headerRowsSelectionDropdownAnchorRef\n       tabIndex=\"-1\">\n    <adapt-rx-checkbox [ngModel]=\"isCheckedState()\"\n                       [adaptRadarDisableEventSending]=\"true\"\n                       [indeterminate]=\"isIndeterminateState()\"\n                       (keydown)=\"onHeaderRowsSelectionMenuOpen($event)\"\n                       (click)=\"$event.preventDefault()\"\n                       [disabled]=\"hasAllItemsDisabledForSelection()\"\n                       [ariaLabel]=\"texts.headerSelectRowsArialLabel\"\n                       class=\"checkbox-inline at-group-selection-checkbox\">\n    </adapt-rx-checkbox>\n  </div>\n  <div class=\"dropdown-menu at-header-selection__dropdown-menu\"\n       #headerRowsSelectionDropdownMenu\n       adaptListKeyManager\n       adaptDropdownMenu\n       (keyManagerStateChange)=\"keyManagerStateChange($event)\">\n    <div class=\"at-header-selection__dropdown-list\">\n      <ng-container *ngIf=\"showSelectionItems()\">\n        <adapt-rx-checkbox *ngIf=\"isChunkSelectionAvailable()\"\n                           [adaptRadarDisableEventSending]=\"true\"\n                           class=\"at-header-selection__dropdown-checkbox\"\n                           tabIndex=\"-1\"\n                           adaptListKeyManagerItem\n                           #adaptListKeyManagerItem=\"adaptListKeyManagerItem\"\n                           [item]=\"checkboxToggleSource.SelectOnPage\"\n                           [class.text-active]=\"adaptListKeyManagerItem === activeItem\"\n                           [label]=\"getSelectAllItemsOnPageHeaderLabel()\"\n                           [indeterminate]=\"isIndeterminateState()\"\n                           [ngModel]=\"isCheckedState()\"\n                           (ngModelChange)=\"onSelectAllRowsOnPage()\">\n        </adapt-rx-checkbox>\n        <adapt-rx-checkbox *ngIf=\"isAllSelectionAvailable()\"\n                           [adaptRadarDisableEventSending]=\"true\"\n                           class=\"at-header-selection__dropdown-checkbox\"\n                           tabIndex=\"-1\"\n                           adaptListKeyManagerItem\n                           #adaptListKeyManagerItem=\"adaptListKeyManagerItem\"\n                           [item]=\"checkboxToggleSource.SelectAll\"\n                           [class.text-active]=\"adaptListKeyManagerItem === activeItem\"\n                           [label]=\"getSelectAllItemsInTableHeaderLabel()\"\n                           [indeterminate]=\"isIndeterminateState()\"\n                           [ngModel]=\"isCheckedState()\"\n                           (ngModelChange)=\"onSelectAllRowsInTable()\">\n        </adapt-rx-checkbox>\n      </ng-container>\n      <adapt-rx-checkbox *ngIf=\"canDeselectRows()\"\n                         [adaptRadarDisableEventSending]=\"true\"\n                         class=\"at-header-selection__dropdown-checkbox\"\n                         tabIndex=\"-1\"\n                         adaptListKeyManagerItem\n                         #adaptListKeyManagerItem=\"adaptListKeyManagerItem\"\n                         [item]=\"checkboxToggleSource.DeselectAll\"\n                         [class.text-active]=\"adaptListKeyManagerItem === activeItem\"\n                         [label]=\"getDeselectAllItemsHeaderLabel()\"\n                         [indeterminate]=\"isIndeterminateState()\"\n                         [ngModel]=\"canDeselectRows()\"\n                         (ngModelChange)=\"onDeselectAllRowsInTable()\">\n      </adapt-rx-checkbox>\n    </div>\n  </div>\n</div>\n"]}