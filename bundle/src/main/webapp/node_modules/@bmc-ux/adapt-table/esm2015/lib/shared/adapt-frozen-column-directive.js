import { ElementRef, Directive, Input, Renderer2, } from '@angular/core';
import { Directionality } from '@angular/cdk/bidi';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/bidi";
export class AdaptFrozenColumnDirective {
    constructor(_element, _renderer, _dir) {
        this._element = _element;
        this._renderer = _renderer;
        this._dir = _dir;
        this._frozenClass = 'at-frozen-cell';
        this._isRtl = false;
        this._isRtl = this._dir.value === 'rtl';
    }
    ngOnChanges(changes) {
        if (changes.adaptFrozen.currentValue !== changes.adaptFrozen.previousValue) {
            const paddingDirection = this._isRtl ? 'right' : 'left';
            if (changes.adaptFrozen.currentValue) {
                this._renderer.addClass(this._element.nativeElement, this._frozenClass);
                this._renderer.setStyle(this._element.nativeElement, paddingDirection, this.getFrozenColumnPadding(this._element.nativeElement));
            }
            else {
                this._renderer.removeClass(this._element.nativeElement, this._frozenClass);
                this._renderer.setStyle(this._element.nativeElement, paddingDirection, 'auto');
            }
        }
    }
    getFrozenColumnPadding(cellEl) {
        let siblingColumn = cellEl === null || cellEl === void 0 ? void 0 : cellEl.previousElementSibling;
        let padding = 0;
        while (siblingColumn) {
            padding = padding + siblingColumn.getBoundingClientRect().width;
            siblingColumn = siblingColumn.previousElementSibling;
        }
        return `${padding}px`;
    }
}
AdaptFrozenColumnDirective.ɵfac = function AdaptFrozenColumnDirective_Factory(t) { return new (t || AdaptFrozenColumnDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.Directionality)); };
AdaptFrozenColumnDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: AdaptFrozenColumnDirective, selectors: [["", "adaptFrozen", ""]], inputs: { adaptFrozen: "adaptFrozen" }, features: [i0.ɵɵNgOnChangesFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptFrozenColumnDirective, [{
        type: Directive,
        args: [{
                selector: '[adaptFrozen]',
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.Directionality }]; }, { adaptFrozen: [{
            type: Input
        }] }); })();
//# sourceMappingURL=adapt-frozen-column-directive.js.map