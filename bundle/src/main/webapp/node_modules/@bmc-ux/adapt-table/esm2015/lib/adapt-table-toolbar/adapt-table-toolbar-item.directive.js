import { ChangeDetectorRef, Directive, ElementRef, Input, Output, Renderer2 } from '@angular/core';
import { Subject } from 'rxjs';
import { SafeCdr } from '@bmc-ux/adapt-angular';
import * as i0 from "@angular/core";
export class AdaptTableToolbarItemDirective {
    constructor(_elRef, _renderer, _changeDetectorRef) {
        this._elRef = _elRef;
        this._renderer = _renderer;
        this._changeDetectorRef = _changeDetectorRef;
        this.recalculateWidth = this._initItem.bind(this);
        this.itemContext = {
            hidden: false,
            collapsed: false
        };
        this.itemAppearanceChange = new Subject();
        this._fixOnToolbar = false;
        this._removeFromToolbar = false;
    }
    set fixOnToolbar(value) {
        if (Boolean(value) !== this._fixOnToolbar) {
            this._fixOnToolbar = Boolean(value);
            this.itemAppearanceChange.next();
        }
    }
    get fixOnToolbar() {
        return this._fixOnToolbar;
    }
    set collapse(value) {
        if (Boolean(value) !== this.itemContext.collapsed) {
            this.itemContext.collapsed = Boolean(value);
            SafeCdr.detectChanges(this._changeDetectorRef);
        }
    }
    get collapse() {
        return this.itemContext.collapsed;
    }
    set hideToPopup(value) {
        if (Boolean(value) !== this.itemContext.hidden) {
            this.itemContext.hidden = Boolean(value);
            this._checkAppearance();
        }
    }
    get hideToPopup() {
        return this.itemContext.hidden;
    }
    set removeFromToolbar(value) {
        if (Boolean(value) !== this._removeFromToolbar) {
            this._removeFromToolbar = Boolean(value);
            this.itemAppearanceChange.next();
        }
    }
    get removeFromToolbar() {
        return this._removeFromToolbar;
    }
    _initItem() {
        this.hideToPopup = false;
        this.collapse = false;
        this._renderer.addClass(this._elRef.nativeElement, 'position-absolute');
        this.width = Math.ceil(this._elRef.nativeElement.offsetWidth);
        this.collapse = true;
        this.collapsedWidth = Math.ceil(this._elRef.nativeElement.offsetWidth);
        this._renderer.removeClass(this._elRef.nativeElement, 'position-absolute');
    }
    _checkAppearance() {
        if (this.itemContext.hidden) {
            this._renderer.addClass(this._elRef.nativeElement, 'adapt-table-toolbar-item_hidden');
        }
        else {
            this._renderer.removeClass(this._elRef.nativeElement, 'adapt-table-toolbar-item_hidden');
        }
        SafeCdr.detectChanges(this._changeDetectorRef);
    }
}
AdaptTableToolbarItemDirective.ɵfac = function AdaptTableToolbarItemDirective_Factory(t) { return new (t || AdaptTableToolbarItemDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
AdaptTableToolbarItemDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: AdaptTableToolbarItemDirective, selectors: [["", "adaptToolbarItem", ""]], inputs: { adaptToolbarItem: "adaptToolbarItem", fixOnToolbar: "fixOnToolbar", collapse: "collapse", hideToPopup: "hideToPopup", removeFromToolbar: "removeFromToolbar" }, outputs: { itemAppearanceChange: "itemAppearanceChange" }, exportAs: ["adaptToolbarItem"] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptTableToolbarItemDirective, [{
        type: Directive,
        args: [{
                selector: '[adaptToolbarItem]',
                exportAs: 'adaptToolbarItem'
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, { adaptToolbarItem: [{
            type: Input
        }], fixOnToolbar: [{
            type: Input
        }], collapse: [{
            type: Input
        }], hideToPopup: [{
            type: Input
        }], removeFromToolbar: [{
            type: Input
        }], itemAppearanceChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=adapt-table-toolbar-item.directive.js.map