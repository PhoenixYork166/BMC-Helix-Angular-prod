{"version":3,"file":"adapt-table-filters.service.js","sourceRoot":"","sources":["../../../../../../libs/adapt-table/src/lib/adapt-table-filters/adapt-table-filters.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AACzC,OAAO,EAAC,OAAO,EAA8B,MAAM,uBAAuB,CAAC;AAE3E,OAAO,EACL,iBAAiB,EAGjB,eAAe,EAIhB,MAAM,uBAAuB,CAAC;;AAM/B,MAAM,OAAO,wBAAwB;IACnC,UAAU,CAAC,MAAoB;QAC7B,OAAO,MAAM,CAAC,UAAU,IAAI,iBAAiB,CAAC,cAAc,CAAC;IAC/D,CAAC;IAED,cAAc,CAAC,WAAmB,EAAE,KAA0B;QAC5D,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAE9B,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,IAAI,CAAC;SACb;QACD,MAAM,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;QAEpC,OAAO,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC;IACtC,CAAC;IAED,mBAAmB,CAAC,KAAwB,EAAE,MAAoB,EAAE,KAA0B;QAC5F,MAAM,UAAU,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAiB,CAAC,CAAC,CAAC,CAAC,KAAe,CAAC,CAAC;QAE1E,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,MAAM,EAAE,KAAK,EAAE,eAAe,CAAC,EAAE,CAAC,CAAC;IAChE,CAAC;IAED,SAAS,CAAC,KAAc,EAAE,MAAoB,EAAE,KAA0B,EAAE,SAAkB;QAC5F,IAAI,CAAC,SAAS,EAAE;YACd,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;YAEnD,SAAS,GAAG,CAAC,YAAY,IAAI,YAAY,CAAC,SAAS,CAAC,IAAI,KAAK,CAAC,uBAAuB,CAAC;SACvF;QAED,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IAC/C,CAAC;IAED,cAAc,CAAC,MAAoB,EAAE,KAAuB;QAC1D,MAAM,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;QAExD,IAAI,YAAY,IAAI,YAAY,CAAC,WAAW,EAAE;YAC5C,uCAAW,KAAK,CAAC,iBAAiB,GAAK,YAAY,CAAC,WAAW,EAAE;SAClE;aAAM;YACL,OAAO,KAAK,CAAC,iBAAiB,CAAC;SAChC;IACH,CAAC;IAED,qBAAqB,CAAC,MAAoB;QACxC,OAAO,MAAM,CAAC,YAAkC,CAAC;IACnD,CAAC;IAED,gBAAgB,CAAC,MAAoB;QACnC,MAAM,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;QAExD,IAAI,YAAY,IAAI,YAAY,CAAC,MAAM,EAAE;YACvC,OAAO,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAkB,EAAE,CACvD,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAC,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAC/D,CAAC;SACH;aAAM;YACL,OAAO,EAAE,CAAC;SACX;IACH,CAAC;IAEO,gBAAgB,CAAC,MAAoB;QAC3C,OAAO,MAAM,CAAC,YAAY,CAAC;IAC7B,CAAC;;gGA5DU,wBAAwB;8EAAxB,wBAAwB,WAAxB,wBAAwB,mBAFvB,MAAM;uFAEP,wBAAwB;cAHpC,UAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB","sourcesContent":["import {Injectable} from '@angular/core';\nimport {isArray, RxSelectOption, SelectTexts} from '@bmc-ux/adapt-angular';\nimport {AdaptTableComponent} from '../adapt-table.component';\nimport {\n  AdaptTableFilters,\n  BaseFilterParams,\n  ColumnConfig,\n  FilterMatchMode,\n  PredefinedFilterType,\n  SelectFilterParams,\n  TableCustomTexts\n} from '../adapt-table.models';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdaptTableFiltersService {\n  filterName(column: ColumnConfig): PredefinedFilterType {\n    return column.filterName || AdaptTableFilters.DEFAULT_FILTER;\n  }\n\n  getFilterValue(columnField: string, table: AdaptTableComponent): unknown | null {\n    const filters = table.filters;\n\n    if (!filters) {\n      return null;\n    }\n    const filter = filters[columnField];\n\n    return filter ? filter.value : null;\n  }\n\n  onSelectModelChange(model: string | string[], column: ColumnConfig, table: AdaptTableComponent): void {\n    const arrayModel = isArray(model) ? model as string[] : [model as string];\n\n    this.setFilter(arrayModel, column, table, FilterMatchMode.in);\n  }\n\n  setFilter(value: unknown, column: ColumnConfig, table: AdaptTableComponent, matchMode?: string): void {\n    if (!matchMode) {\n      const filterParams = this._getFilterParams(column);\n\n      matchMode = (filterParams && filterParams.matchMode) || table.defaultFiltersMatchMode;\n    }\n\n    table.filter(value, column.field, matchMode);\n  }\n\n  getSelectTexts(column: ColumnConfig, texts: TableCustomTexts): SelectTexts {\n    const filterParams = this.getSelectFilterParams(column);\n\n    if (filterParams && filterParams.selectTexts) {\n      return {...texts.selectFilterTexts, ...filterParams.selectTexts};\n    } else {\n      return texts.selectFilterTexts;\n    }\n  }\n\n  getSelectFilterParams(column: ColumnConfig): SelectFilterParams {\n    return column.filterParams as SelectFilterParams;\n  }\n\n  getSelectOptions(column: ColumnConfig): RxSelectOption[] {\n    const filterParams = this.getSelectFilterParams(column);\n\n    if (filterParams && filterParams.values) {\n      return filterParams.values.map((value): RxSelectOption =>\n        typeof value === 'string' ? ({id: value, name: value}) : value\n      );\n    } else {\n      return [];\n    }\n  }\n\n  private _getFilterParams(column: ColumnConfig): BaseFilterParams {\n    return column.filterParams;\n  }\n}\n"]}