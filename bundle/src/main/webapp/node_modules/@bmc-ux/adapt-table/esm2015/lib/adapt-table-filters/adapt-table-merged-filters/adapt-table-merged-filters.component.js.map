{"version":3,"file":"adapt-table-merged-filters.component.js","sourceRoot":"","sources":["../../../../../../../libs/adapt-table/src/lib/adapt-table-filters/adapt-table-merged-filters/adapt-table-merged-filters.component.ts","../../../../../../../libs/adapt-table/src/lib/adapt-table-filters/adapt-table-merged-filters/adapt-table-merged-filters.html"],"names":[],"mappings":"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","sourcesContent":["import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\nimport {\n  formatString,\n  isArray,\n  isDefined,\n  RxSelectOption,\n  SelectTexts,\n  RxSelectSettings\n} from '@bmc-ux/adapt-angular';\nimport {AdaptTableComponent} from '../../adapt-table.component';\nimport {ColumnConfig, FilterMatchMode, PredefinedFilterType, TableCustomTexts} from '../../adapt-table.models';\nimport {AdaptTableFiltersService} from '../adapt-table-filters.service';\n\ninterface AppliedMergedColumnFilter {\n  columnField: string;\n  value: string;\n  header: string;\n}\n\n\n@Component({\n  selector: 'adapt-table-merged-filters',\n  templateUrl: './adapt-table-merged-filters.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AdaptTableMergedFiltersComponent {\n\n  @Input() columns: ColumnConfig[];\n  @Input() index: number;\n  @Input() texts: TableCustomTexts;\n\n  constructor(\n    public table: AdaptTableComponent,\n    private _adaptTableFiltersService: AdaptTableFiltersService\n  ) {\n  }\n\n  getAppliedFiltersForCurrentColumns(columns: ColumnConfig[]): AppliedMergedColumnFilter[] {\n    const filters = this.table.filters;\n\n    if (!filters) {\n      return [];\n    }\n\n    return columns\n      .filter(column => !!(filters[column.field] && isDefined(filters[column.field].value)))\n      .map(column => {\n        const filterValue = filters[column.field].value;\n\n        return {\n          header: column.header,\n          value: isArray(filterValue) ? filterValue.join(', ') : filterValue,\n          columnField: column.field\n        };\n      });\n  }\n\n  onRemoveFilterFormApplied(filter: AppliedMergedColumnFilter): void {\n    delete this.table.filters[filter.columnField];\n    this.table._filter();\n  }\n\n  getDropdownButtonLabel(columns: ColumnConfig[]): string {\n    const filters = this.table.filters;\n\n    if (!filters) {\n      return this.texts.mergedFiltersTexts.buttonNoAppliedFilters;\n    }\n    let counter = 0;\n\n    columns.forEach(column => {\n      if (isDefined(filters[column.field])) {\n        counter++;\n      }\n    });\n\n    return counter > 0\n      ? counter === 1\n        ? formatString(this.texts.mergedFiltersTexts.buttonAppliedFilter, counter)\n        : formatString(this.texts.mergedFiltersTexts.buttonAppliedFilters, counter)\n      : this.texts.mergedFiltersTexts.buttonNoAppliedFilters;\n  }\n\n  filterName(column: ColumnConfig): PredefinedFilterType {\n    return this._adaptTableFiltersService.filterName(column);\n  }\n\n  isSingleSelect(column: ColumnConfig): boolean {\n    return this._adaptTableFiltersService.getSelectFilterParams(column).single;\n  }\n\n  setFilter(value: unknown, column: ColumnConfig, matchMode?: FilterMatchMode): void {\n    this._adaptTableFiltersService.setFilter(value, column, this.table, matchMode);\n  }\n\n  getFilterValue(column: ColumnConfig): unknown | null {\n    return this._adaptTableFiltersService.getFilterValue(column.field, this.table);\n  }\n\n  getFilterValueForSingleSelect(column: ColumnConfig): unknown | null {\n    const filterValue = this.getFilterValue(column);\n\n    return filterValue ? filterValue[0] : null;\n  }\n\n  getSelectSettings(column: ColumnConfig): RxSelectSettings {\n    const filterOptionsLength = this._getFilterOptionsLength(column);\n    const showAdditionalSelectControls = filterOptionsLength > 20;\n\n    return {\n      enableFilter: showAdditionalSelectControls,\n      selectAllButton: showAdditionalSelectControls,\n      deselectAllButton: showAdditionalSelectControls\n    };\n  }\n\n  getSelectOptions(column: ColumnConfig): RxSelectOption[] {\n    return this._adaptTableFiltersService.getSelectOptions(column);\n  }\n\n  getSelectTexts(column: ColumnConfig): SelectTexts {\n    return this._adaptTableFiltersService.getSelectTexts(column, this.texts);\n  }\n\n  onSelectModelChange(value: string | string[], column: ColumnConfig): void {\n    this._adaptTableFiltersService.onSelectModelChange(value, column, this.table);\n  }\n\n  trackByForSelectOptions(index: number, option: RxSelectOption): string | number {\n    return option.id || index;\n  }\n\n  trackByForAppliedFilters(index: number, filter: AppliedMergedColumnFilter): string | number {\n    return filter.columnField || index;\n  }\n\n  selectOptionFormatter(option: RxSelectOption): string {\n    return option.name;\n  }\n\n  private _getFilterOptionsLength(column: ColumnConfig): number {\n    const filterParams = this._adaptTableFiltersService.getSelectFilterParams(column);\n\n    return filterParams && filterParams.values && filterParams.values.length;\n  }\n}\n","<div #filtersDropdown=\"adaptDropdown\"\n     class=\"adapt-table-filters\"\n     adaptDropdown\n     [adaptRadarDisableEventSending]=\"true\"\n     [appendToBody]=\"true\"\n     [autoClose]=\"false\"\n     [closeOnEscape]=\"true\"\n     [placement]=\"['bottom-left', 'bottom-right']\">\n\n  <button class=\"dropdown-toggle btn btn-secondary table-merged-filters__button\"\n          role=\"button\"\n          type=\"button\"\n          adaptDropdownAnchor\n          (click)=\"filtersDropdown.toggle($event)\">\n    {{getDropdownButtonLabel(columns)}}\n  </button>\n\n  <div adaptDropdownMenu class=\"dropdown-menu table-merged-filters__dropdown\">\n\n    <div class=\"table-merged-filters__dropdown-label\">\n      <label>{{texts.mergedFiltersTexts.appliedFiltersLabel}}</label>\n      <div class=\"table-merged-filters__tags\">\n        <adapt-tag *ngFor=\"let filter of getAppliedFiltersForCurrentColumns(columns); trackBy: trackByForAppliedFilters\"\n                   [adaptRadarDisableEventSending]=\"true\"\n                   [type]=\"'active'\"\n                   (remove)=\"onRemoveFilterFormApplied(filter)\">\n          {{filter.header}}: {{filter.value}}\n        </adapt-tag>\n      </div>\n    </div>\n\n    <div *ngIf=\"filtersDropdown && filtersDropdown.isOpen()\" class=\"table-merged-filters__dropdown-container\">\n      <adapt-accordion [adaptRadarDisableEventSending]=\"true\" [bordered]=\"false\">\n        <adapt-accordion-tab class=\"advanced-filter__accordion-tab\"\n                             *ngFor=\"let column of columns; trackBy: table.trackByForColumns\"\n                             [title]=\"column.header\">\n\n          <ng-container *ngIf=\"column.filterTemplate; else noFilterTamplate\">\n            <ng-template [ngTemplateOutlet]=\"column.filterTemplate\"\n                         [ngTemplateOutletContext]=\"{column: column, index: index}\">\n            </ng-template>\n          </ng-container>\n          <ng-template #noFilterTamplate>\n            <ng-container [ngSwitch]=\"filterName(column)\">\n              <adapt-rx-search\n                *ngSwitchCase=\"'textFilter'\"\n                [adaptRadarDisableEventSending]=\"true\"\n                (ngModelChange)=\"setFilter($event, column)\"\n                [ngModel]=\"getFilterValue(column)\"\n                [placeholder]=\"texts.textFilterTexts.placeholder\"\n                [label]=\"texts.textFilterTexts.label\"\n                [initialAlign]=\"'left'\"\n                [searchButton]=\"table.explicitSearchBtn\"\n                [size]=\"'sm'\">\n              </adapt-rx-search>\n\n              <ng-container *ngSwitchCase=\"'selectFilter'\">\n                <ng-container *ngIf=\"isSingleSelect(column); else notSingle\">\n\n                  <adapt-rx-radiobutton\n                    *ngFor=\"let option of getSelectOptions(column); trackBy: trackByForSelectOptions\"\n                    name=\"singleSelectionTypeGroup\"\n                    class=\"advanced-filter__radiobutton\"\n                    [adaptRadarDisableEventSending]=\"true\"\n                    [value]=\"option.id\"\n                    [label]=\"option.name\"\n                    [ngModel]=\"getFilterValueForSingleSelect(column)\"\n                    (ngModelChange)=\"onSelectModelChange($event, column)\">\n                  </adapt-rx-radiobutton>\n                </ng-container>\n\n                <ng-template #notSingle>\n                  <adapt-select-migration class=\"advanced-filter__select-inline\"\n                                          [inline]=\"true\"\n                                          [options]=\"getSelectOptions(column)\"\n                                          [optionFormatter]=\"selectOptionFormatter\"\n                                          [texts]=\"getSelectTexts(column)\"\n                                          [multiple]=\"!isSingleSelect(column)\"\n                                          [settings]=\"getSelectSettings(column)\"\n                                          [value]=\"getFilterValue(column)\"\n                                          (selectModelChange)=\"onSelectModelChange($event, column)\">\n                  </adapt-select-migration>\n                </ng-template>\n              </ng-container>\n            </ng-container>\n          </ng-template>\n\n        </adapt-accordion-tab>\n      </adapt-accordion>\n    </div>\n  </div>\n</div>\n"]}