import { transition, trigger, useAnimation } from '@angular/animations';
import { Directionality } from '@angular/cdk/bidi';
import { ChangeDetectionStrategy, Component, Input, NgZone } from '@angular/core';
import { AdaptTranslateService, ANIMATION_DURATION, ANIMATION_NAME, ANIMATION_TIMING_FUNCTION, formatString } from '@bmc-ux/adapt-angular';
import { AdaptTableComponent } from '../../adapt-table.component';
import { SortOrder } from '../../adapt-table.models';
import * as i0 from "@angular/core";
import * as i1 from "@bmc-ux/adapt-angular";
import * as i2 from "@angular/cdk/bidi";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
const _c0 = function (a0, a1) { return { id: a0, name: a1 }; };
const _c1 = function (a0) { return [a0]; };
function AdaptTableHeaderCellMenuComponent_div_12_div_2_div_22_Template(rf, ctx) { if (rf & 1) {
    const _r10 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 16);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementStart(2, "div", 17);
    i0.ɵɵtext(3, "\n              ");
    i0.ɵɵelementStart(4, "adapt-rx-select", 18);
    i0.ɵɵlistener("ngModelChange", function AdaptTableHeaderCellMenuComponent_div_12_div_2_div_22_Template_adapt_rx_select_ngModelChange_4_listener($event) { i0.ɵɵrestoreView(_r10); const column_r5 = i0.ɵɵnextContext().$implicit; const ctx_r8 = i0.ɵɵnextContext(2); return ctx_r8.changeColumnsSortingOrder($event, column_r5.field); });
    i0.ɵɵtext(5, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n\n            ");
    i0.ɵɵelementStart(8, "div", 19);
    i0.ɵɵtext(9, "\n              ");
    i0.ɵɵelementStart(10, "button", 20);
    i0.ɵɵlistener("click", function AdaptTableHeaderCellMenuComponent_div_12_div_2_div_22_Template_button_click_10_listener() { i0.ɵɵrestoreView(_r10); const column_r5 = i0.ɵɵnextContext().$implicit; const ctx_r11 = i0.ɵɵnextContext(2); return ctx_r11.onRemoveCurrentFromSorting(column_r5.field); });
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(13, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r5 = i0.ɵɵnextContext().$implicit;
    const ctx_r7 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("@menuControlAnimation", undefined);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("options", ctx_r7.getSortOrderOptions())("adaptRadarDisableEventSending", true)("optionFormatter", ctx_r7.optionFormatter)("appendToBody", true)("closeOnSelect", true)("ngModel", i0.ɵɵpureFunction1(12, _c1, i0.ɵɵpureFunction2(9, _c0, column_r5.field, ctx_r7.getSortOrderSelectModelName(column_r5.field))))("label", ctx_r7.headerCellMenuTexts.selectSortOrderLabel);
    i0.ɵɵadvance(7);
    i0.ɵɵtextInterpolate1("\n                ", ctx_r7.headerCellMenuTexts.removeCurrentFromSortingBtn, "\n              ");
} }
const _c2 = function (a0) { return { "adapt-table-sort-menu__block_first": a0 }; };
const _c3 = function (a0) { return { "btn-group-padding adapt-table-sort-menu__btn_active": a0 }; };
function AdaptTableHeaderCellMenuComponent_div_12_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r15 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 9);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "div", 10);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementStart(4, "label", 11);
    i0.ɵɵtext(5, "\n            ");
    i0.ɵɵelementStart(6, "span");
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n\n          ");
    i0.ɵɵelementStart(10, "div", 12);
    i0.ɵɵtext(11, "\n            ");
    i0.ɵɵelementStart(12, "div", 13);
    i0.ɵɵtext(13, "\n\n              ");
    i0.ɵɵelementStart(14, "button", 14);
    i0.ɵɵlistener("click", function AdaptTableHeaderCellMenuComponent_div_12_div_2_Template_button_click_14_listener() { const restoredCtx = i0.ɵɵrestoreView(_r15); const column_r5 = restoredCtx.$implicit; const ctx_r14 = i0.ɵɵnextContext(2); return ctx_r14.onSortDirectionChange(ctx_r14.SortOrder.Asc, column_r5.field); });
    i0.ɵɵtext(15);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(16, "\n              ");
    i0.ɵɵelementStart(17, "button", 14);
    i0.ɵɵlistener("click", function AdaptTableHeaderCellMenuComponent_div_12_div_2_Template_button_click_17_listener() { const restoredCtx = i0.ɵɵrestoreView(_r15); const column_r5 = restoredCtx.$implicit; const ctx_r16 = i0.ɵɵnextContext(2); return ctx_r16.onSortDirectionChange(ctx_r16.SortOrder.Desc, column_r5.field); });
    i0.ɵɵtext(18);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(19, "\n\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(20, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(21, "\n\n          ");
    i0.ɵɵtemplate(22, AdaptTableHeaderCellMenuComponent_div_12_div_2_div_22_Template, 14, 14, "div", 15);
    i0.ɵɵtext(23, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(24, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r5 = ctx.$implicit;
    const firstMenu_r6 = ctx.first;
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(18, _c2, firstMenu_r6));
    i0.ɵɵadvance(7);
    i0.ɵɵtextInterpolate(ctx_r3.multiSortMeta ? ctx_r3.headerCellMenuTexts.orderLabelAddToSort : ctx_r3.headerCellMenuTexts.orderLabelSort);
    i0.ɵɵadvance(5);
    i0.ɵɵattribute("role", "radiogroup");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("btn-type", ctx_r3.isButtonActive(ctx_r3.SortOrder.Asc, column_r5.field) ? "primary" : "secondary")("adaptRadarDisableEventSending", true)("ngClass", i0.ɵɵpureFunction1(20, _c3, ctx_r3.isButtonActive(ctx_r3.SortOrder.Asc, column_r5.field)))("tabindex", ctx_r3.table.getColumnSortOrder(column_r5.field) === ctx_r3.SortOrder.Asc ? -1 : 0);
    i0.ɵɵattribute("role", "radio")("aria-checked", ctx_r3.isButtonActive(ctx_r3.SortOrder.Asc, column_r5.field));
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                ", ctx_r3.headerCellMenuTexts.orderAscBtn, "\n              ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("btn-type", ctx_r3.isButtonActive(ctx_r3.SortOrder.Desc, column_r5.field) ? "primary" : "secondary")("adaptRadarDisableEventSending", true)("ngClass", i0.ɵɵpureFunction1(22, _c3, ctx_r3.isButtonActive(ctx_r3.SortOrder.Desc, column_r5.field)))("tabindex", ctx_r3.table.getColumnSortOrder(column_r5.field) === ctx_r3.SortOrder.Desc ? -1 : 0);
    i0.ɵɵattribute("role", "radio")("aria-checked", ctx_r3.isButtonActive(ctx_r3.SortOrder.Desc, column_r5.field));
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                ", ctx_r3.headerCellMenuTexts.orderDescBtn, "\n              ");
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r3.isCurrentColumnAppliedInSort(column_r5.field));
} }
function AdaptTableHeaderCellMenuComponent_div_12_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r18 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 21);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "div", 22);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementStart(4, "button", 20);
    i0.ɵɵlistener("click", function AdaptTableHeaderCellMenuComponent_div_12_div_4_Template_button_click_4_listener() { i0.ɵɵrestoreView(_r18); const ctx_r17 = i0.ɵɵnextContext(2); return ctx_r17.onClearAllSorting(); });
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("@menuControlAnimation", undefined);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate1("\n            ", ctx_r4.headerCellMenuTexts.clearAllSortingBtn, "\n          ");
} }
function AdaptTableHeaderCellMenuComponent_div_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptTableHeaderCellMenuComponent_div_12_div_2_Template, 25, 24, "div", 7);
    i0.ɵɵtext(3, "\n\n      ");
    i0.ɵɵtemplate(4, AdaptTableHeaderCellMenuComponent_div_12_div_4_Template, 8, 2, "div", 8);
    i0.ɵɵtext(5, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r2.columns)("ngForTrackBy", ctx_r2.table.trackByForColumns);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r2.isSortApplied());
} }
export class AdaptTableHeaderCellMenuComponent {
    constructor(_ngZone, ts, _dir) {
        this._ngZone = _ngZone;
        this.ts = ts;
        this._dir = _dir;
        this.SortOrder = SortOrder;
        this.isRtl = false;
    }
    get multiSortMeta() {
        return this.table.multiSortMeta;
    }
    ngOnInit() {
        this.isRtl = this._dir.value === 'rtl';
    }
    isSortApplied() {
        return this._getMultiSortMetaLength() >= 1;
    }
    isCurrentColumnAppliedInSort(sortingColumnField) {
        return this._getMultiSortMetaLength() > 1 && this._isColumnSorted(sortingColumnField);
    }
    getSortButtonsClass(order, sortingColumnField) {
        return this.isButtonActive(order, sortingColumnField)
            ? 'btn-primary adapt-table-sort-menu__btn_active'
            : 'btn-secondary';
    }
    getSortOrderOptions() {
        return this.multiSortMeta.map((sortMeta, index) => {
            return {
                id: sortMeta.field,
                name: formatString(this.headerCellMenuTexts.selectSortOrderOption, index + 1, this.multiSortMeta.length)
            };
        });
    }
    isButtonActive(order, sortingColumnField) {
        return this.table.getColumnSortOrder(sortingColumnField) === order;
    }
    optionFormatter(option) {
        return option.name;
    }
    onSortDirectionChange(order, sortingColumnField) {
        if (this.isButtonActive(order, sortingColumnField)) {
            return;
        }
        if (this._getMultiSortMetaLength()) {
            if (this._isColumnSorted(sortingColumnField)) {
                this.table.updateMultiSortMeta(this.multiSortMeta.map(item => {
                    return {
                        field: item.field,
                        order: item.field === sortingColumnField ? order : item.order
                    };
                }));
            }
            else {
                this.table.updateMultiSortMeta([
                    ...this.multiSortMeta,
                    { field: sortingColumnField, order }
                ]);
            }
        }
        else {
            this.table.updateMultiSortMeta([{ field: sortingColumnField, order }]);
        }
    }
    changeColumnsSortingOrder(targetModel, sortingColumnField) {
        const sourceIndex = this.multiSortMeta.findIndex(sortMeta => sortMeta.field === sortingColumnField);
        const targetIndex = this.multiSortMeta.findIndex(sortMeta => sortMeta.field === targetModel[0].id);
        const multiSortMeta = [...this.multiSortMeta];
        const sourceItem = multiSortMeta.splice(sourceIndex, 1);
        multiSortMeta.splice(targetIndex, 0, ...sourceItem);
        this.table.updateMultiSortMeta(multiSortMeta);
    }
    getSortOrderSelectModelName(fieldId) {
        var _a;
        const options = this.getSortOrderOptions();
        return (_a = options.find(option => option.id === fieldId)) === null || _a === void 0 ? void 0 : _a.name;
    }
    onRemoveCurrentFromSorting(sortingColumnField) {
        this.table.updateMultiSortMeta(this.multiSortMeta.filter((sortMeta => sortMeta.field !== sortingColumnField)));
    }
    // Method that implement multiple sorting in PrimeNG(sortMultiple) is overridden in projects/adapt-table/src/lib/primeng-overrides.ts
    // to allow clearing sort and reset table to default sorting state
    onClearAllSorting() {
        this.table.updateMultiSortMeta(null);
    }
    _getMultiSortMetaLength() {
        var _a;
        return (_a = this.multiSortMeta) === null || _a === void 0 ? void 0 : _a.length;
    }
    _isColumnSorted(sortingColumnField) {
        return this.table.isSorted(sortingColumnField);
    }
}
AdaptTableHeaderCellMenuComponent.ɵfac = function AdaptTableHeaderCellMenuComponent_Factory(t) { return new (t || AdaptTableHeaderCellMenuComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.AdaptTranslateService), i0.ɵɵdirectiveInject(i2.Directionality)); };
AdaptTableHeaderCellMenuComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptTableHeaderCellMenuComponent, selectors: [["adapt-table-header-cell-menu"]], inputs: { headerCellMenuTexts: "headerCellMenuTexts", columns: "columns", table: "table" }, decls: 16, vars: 9, consts: [["adaptDropdown", "", 3, "adaptRadarDisableEventSending", "appendToBody", "positionTo", "restoreFocusAfterClose", "holdFocusInMenu", "autoClose"], ["headerCellMenuDropdown", "adaptDropdown"], ["adaptDropdownToggle", "", 1, "btn", "btn-link", "d-icon-ellipsis", "adapt-table-sort-menu__kebab", 3, "showCaret"], ["anchorToEl", ""], [1, "sr-only"], ["adaptDropdownMenu", "", 1, "adapt-table-sort-menu__wrapper", "dropdown-menu"], [4, "ngIf"], ["class", "adapt-table-sort-menu__block", 3, "ngClass", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "adapt-table-sort-menu__clear-all-btn-wrapper", 4, "ngIf"], [1, "adapt-table-sort-menu__block", 3, "ngClass"], [1, "adapt-table-sort-menu__controls"], ["for", "sortButtons", 1, "form-control-label", "mb-2"], ["id", "sortButtons", 1, "adapt-table-sort-menu__btn-wrapper"], [1, "btn-group"], ["type", "button", "adapt-button", "", 3, "btn-type", "adaptRadarDisableEventSending", "ngClass", "tabindex", "click"], ["class", "adapt-table-sort-menu__sort-wrapper", 4, "ngIf"], [1, "adapt-table-sort-menu__sort-wrapper"], [1, "adapt-table-sort-menu__sort-order-select"], [3, "options", "adaptRadarDisableEventSending", "optionFormatter", "appendToBody", "closeOnSelect", "ngModel", "label", "ngModelChange"], [1, "adapt-table-sort-menu__remove-current-btn"], ["type", "button", 1, "btn", "btn-secondary", "w-100", 3, "click"], [1, "adapt-table-sort-menu__clear-all-btn-wrapper"], [1, "adapt-table-sort-menu__clear-all-btn"]], template: function AdaptTableHeaderCellMenuComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0, 1);
        i0.ɵɵtext(2, "\n  ");
        i0.ɵɵelementStart(3, "button", 2, 3);
        i0.ɵɵtext(5, "\n    ");
        i0.ɵɵelementStart(6, "span", 4);
        i0.ɵɵtext(7);
        i0.ɵɵelementEnd();
        i0.ɵɵtext(8, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(9, "\n\n  ");
        i0.ɵɵelementStart(10, "div", 5);
        i0.ɵɵtext(11, "\n    ");
        i0.ɵɵtemplate(12, AdaptTableHeaderCellMenuComponent_div_12_Template, 6, 3, "div", 6);
        i0.ɵɵtext(13, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(14, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(15, "\n");
    } if (rf & 2) {
        const _r0 = i0.ɵɵreference(1);
        const _r1 = i0.ɵɵreference(4);
        i0.ɵɵproperty("adaptRadarDisableEventSending", true)("appendToBody", true)("positionTo", _r1)("restoreFocusAfterClose", true)("holdFocusInMenu", true)("autoClose", "outside");
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("showCaret", false);
        i0.ɵɵadvance(4);
        i0.ɵɵtextInterpolate(ctx.multiSortMeta ? ctx.headerCellMenuTexts.orderLabelAddToSort : ctx.headerCellMenuTexts.orderLabelSort);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngIf", _r0.isOpen());
    } }, directives: [i1.AdaptDropdownDirective, i1.AdaptDropdownToggleDirective, i1.AdaptDropdownMenuDirective, i3.NgIf, i3.NgForOf, i3.NgClass, i1.AdaptButtonComponent, i1.AdaptRxSelectComponent, i4.NgControlStatus, i4.NgModel], encapsulation: 2, data: { animation: [
            trigger('menuControlAnimation', [
                transition('void => *', [
                    useAnimation(ANIMATION_NAME.height, {
                        params: {
                            duration: ANIMATION_DURATION.fast,
                            timingFunction: ANIMATION_TIMING_FUNCTION.base.transitionIn
                        }
                    })
                ]),
                transition('* => void', [
                    useAnimation(ANIMATION_NAME.height, {
                        params: {
                            duration: ANIMATION_DURATION.fast,
                            from: '*',
                            to: '0',
                            timingFunction: ANIMATION_TIMING_FUNCTION.base.transitionOut
                        }
                    })
                ])
            ])
        ] }, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptTableHeaderCellMenuComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-table-header-cell-menu',
                templateUrl: './adapt-table-header-cell-menu.html',
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [
                    trigger('menuControlAnimation', [
                        transition('void => *', [
                            useAnimation(ANIMATION_NAME.height, {
                                params: {
                                    duration: ANIMATION_DURATION.fast,
                                    timingFunction: ANIMATION_TIMING_FUNCTION.base.transitionIn
                                }
                            })
                        ]),
                        transition('* => void', [
                            useAnimation(ANIMATION_NAME.height, {
                                params: {
                                    duration: ANIMATION_DURATION.fast,
                                    from: '*',
                                    to: '0',
                                    timingFunction: ANIMATION_TIMING_FUNCTION.base.transitionOut
                                }
                            })
                        ])
                    ])
                ]
            }]
    }], function () { return [{ type: i0.NgZone }, { type: i1.AdaptTranslateService }, { type: i2.Directionality }]; }, { headerCellMenuTexts: [{
            type: Input
        }], columns: [{
            type: Input
        }], table: [{
            type: Input
        }] }); })();
//# sourceMappingURL=adapt-table-header-cell-menu.component.js.map