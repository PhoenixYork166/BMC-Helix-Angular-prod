import { Pipe } from '@angular/core';
import { isNil, isString, toNumber, toString } from 'lodash-es';
import * as i0 from "@angular/core";
export class SortByPipe {
    transform(items, comparator, sortType, sortOrder = 'ASC') {
        if (isNil(items)) {
            return items;
        }
        else {
            const itemsCopy = [...items];
            if (isString(comparator)) {
                switch (sortType) {
                    case 'string':
                        itemsCopy.sort((a, b) => {
                            // undefined and null values goes to bottom\top
                            if (isNil(a[comparator])) {
                                return sortOrder === 'DESC' ? -1 : 1;
                            }
                            else if (isNil(b[comparator])) {
                                return sortOrder === 'DESC' ? 1 : -1;
                            }
                            return sortOrder === 'DESC'
                                ? b[comparator].localeCompare(a[comparator])
                                : a[comparator].localeCompare(b[comparator]);
                        });
                        break;
                    case 'number':
                        itemsCopy.sort((a, b) => {
                            // undefined and null values goes to bottom\top
                            if (isNil(a[comparator])) {
                                return sortOrder === 'DESC' ? -1 : 1;
                            }
                            else if (isNil(b[comparator])) {
                                return sortOrder === 'DESC' ? 1 : -1;
                            }
                            return sortOrder === 'DESC'
                                ? b[comparator] - a[comparator]
                                : a[comparator] - b[comparator];
                        });
                        break;
                    case 'boolean':
                        itemsCopy.sort((a, b) => {
                            // undefined and null values goes to bottom\top
                            if (isNil(a[comparator])) {
                                return sortOrder === 'DESC' ? -1 : 1;
                            }
                            else if (isNil(b[comparator])) {
                                return sortOrder === 'DESC' ? 1 : -1;
                            }
                            return sortOrder === 'DESC'
                                ? toNumber(!!a[comparator]) - toNumber(!!b[comparator])
                                : toNumber(!!b[comparator]) - toNumber(!!a[comparator]);
                        });
                        break;
                    default:
                        itemsCopy.sort((a, b) => {
                            if (isNil(a[comparator])) {
                                return sortOrder === 'DESC' ? -1 : 1;
                            }
                            else if (isNil(b[comparator])) {
                                return sortOrder === 'DESC' ? 1 : -1;
                            }
                            else {
                                if (toString(a[comparator]) < toString(b[comparator])) {
                                    return sortOrder === 'DESC' ? 1 : -1;
                                }
                                if (toString(a[comparator]) > toString(b[comparator])) {
                                    return sortOrder === 'DESC' ? -1 : 1;
                                }
                            }
                            return 0;
                        });
                }
            }
            else {
                itemsCopy.sort(comparator);
            }
            return itemsCopy;
        }
    }
}
SortByPipe.ɵfac = function SortByPipe_Factory(t) { return new (t || SortByPipe)(); };
SortByPipe.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "sortBy", type: SortByPipe, pure: true });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(SortByPipe, [{
        type: Pipe,
        args: [{
                name: 'sortBy'
            }]
    }], null, null); })();
//# sourceMappingURL=sortby.pipe.js.map