{"version":3,"file":"sortable-column.directive.js","sourceRoot":"","sources":["../../../../../../../libs/adapt-table/src/lib/primeng-lib/table/sortable-column.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, HostListener, Input, OnDestroy, OnInit} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {AdaptTableComponent} from '../../adapt-table.component';\nimport {DomHandler} from 'primeng/dom';\nimport {SortMeta} from 'primeng/api';\n\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: '[pSortableColumn]',\n\n  // TODO: Refactor this if possible\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n  host: {\n    '[class.ui-sortable-column]': 'isEnabled()',\n    '[class.ui-state-highlight]': 'sorted',\n    '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n    '[attr.role]': '\"columnheader\"',\n    '[attr.aria-sort]': 'sortOrder'\n  }\n})\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nexport class SortableColumn implements OnInit, OnDestroy {\n\n  @Input('pSortableColumn') field: string;\n  @Input() pSortableColumnDisabled: boolean;\n\n  sorted: boolean;\n  sortOrder: string;\n  subscription: Subscription;\n\n\n  constructor(public dt: AdaptTableComponent) {\n  }\n\n  ngOnInit(): void {\n    if (this.dt.isSorted(this.field)) {\n      this.sortOrder = this.dt.isColumnSortOrderAsc(this.field) ? 'ascending' : 'descending';\n    } else {\n      this.sortOrder = 'none';\n    }\n\n    if (this.isEnabled()) {\n      this.subscription = this.dt.tableService.sortSource$.subscribe((sortMeta: SortMeta | SortMeta[]) => {\n\n        // Add timeout to update sorting state after 'sortField' and 'sortOrder' inputs changed\n        setTimeout(() => {\n          this.updateSortState(sortMeta);\n        });\n      });\n    }\n  }\n\n  updateSortState(sortMeta?: SortMeta | SortMeta[]): void {\n    this.sorted = this.dt.isSorted(this.field);\n    this.sortOrder = 'none';\n\n    if (!sortMeta) {\n      return;\n    }\n\n    if (this.dt.isMultipleSortMode) {\n      (sortMeta as SortMeta[]).forEach(item => {\n        if (this.field === item.field) {\n          this.sortOrder = this.sorted ? (item.order === 1 ? 'ascending' : 'descending') : 'none';\n        }\n      });\n    } else if (this.dt.isSingleSortMode) {\n      this.sortOrder = this.sorted ? ((sortMeta as SortMeta).order === 1 ? 'ascending' : 'descending') : 'none';\n    }\n  }\n\n  @HostListener('click', ['$event'])\n  onClick(event: MouseEvent): void {\n    if (this.isEnabled()) {\n      this.updateSortState();\n      this.dt.sort({\n        originalEvent: event,\n        field: this.field\n      });\n\n      DomHandler.clearSelection();\n    }\n  }\n\n  @HostListener('keydown.enter', ['$event'])\n  onEnterKey(event: MouseEvent): void {\n    this.onClick(event);\n  }\n\n  isEnabled(): boolean {\n    return this.pSortableColumnDisabled !== true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n}\n"]}