// TODO: Use Enum instead
export class AdaptTableFilters {
}
AdaptTableFilters.SELECT_FILTER = 'selectFilter';
AdaptTableFilters.TEXT_FILTER = 'textFilter';
AdaptTableFilters.DEFAULT_FILTER = AdaptTableFilters.TEXT_FILTER;
/* Enums */
/**
 * The visibility priority of toolbar parts.
 * It is used to control which toolbar part will be hidden to the dropdown first in case there is no space for all of them.
 * The lowest number will be hidden last.
 */
export var ToolbarItemsByPriority;
(function (ToolbarItemsByPriority) {
    /**
     * Global table search input
     */
    ToolbarItemsByPriority[ToolbarItemsByPriority["SEARCH"] = 0] = "SEARCH";
    /**
     * Selection limit that is based on "selectionLimit" property from the "ToolbarConfig"
     */
    ToolbarItemsByPriority[ToolbarItemsByPriority["SELECTION_LIMIT"] = 1] = "SELECTION_LIMIT";
    /**
     * Counter text(ex. "Records from 1 to 10 of 23")
     */
    ToolbarItemsByPriority[ToolbarItemsByPriority["COUNTER"] = 2] = "COUNTER";
    /**
     * Refresh button
     */
    ToolbarItemsByPriority[ToolbarItemsByPriority["REFRESH"] = 3] = "REFRESH";
    /**
     * Columns visibility control
     */
    ToolbarItemsByPriority[ToolbarItemsByPriority["VISIBLE_COLUMNS"] = 4] = "VISIBLE_COLUMNS";
    /**
     * Section for the custom filter(eg. for Advanced filter controlled by customer)
     */
    ToolbarItemsByPriority[ToolbarItemsByPriority["FILTER"] = 5] = "FILTER";
    /**
     * Section for the custom filtering results
     */
    ToolbarItemsByPriority[ToolbarItemsByPriority["FILTER_RESULTS"] = 6] = "FILTER_RESULTS";
    /**
     * Custom section from the left side
     */
    ToolbarItemsByPriority[ToolbarItemsByPriority["LEFT_CUSTOM"] = 7] = "LEFT_CUSTOM";
    /**
     * Custom section from the right side
     */
    ToolbarItemsByPriority[ToolbarItemsByPriority["RIGHT_CUSTOM"] = 8] = "RIGHT_CUSTOM";
    /**
     * Export control
     */
    ToolbarItemsByPriority[ToolbarItemsByPriority["EXPORT"] = 9] = "EXPORT";
})(ToolbarItemsByPriority || (ToolbarItemsByPriority = {}));
/**
 * Possible variants for the checkbox selection state
 */
export var CheckboxState;
(function (CheckboxState) {
    /**
     * Row is not selected
     */
    CheckboxState[CheckboxState["Unselected"] = 0] = "Unselected";
    /**
     * Row is selected
     */
    CheckboxState[CheckboxState["Selected"] = 1] = "Selected";
    /**
     * Some rows are selected. This is used to show the selection state of the group or table itself
     */
    CheckboxState[CheckboxState["Indeterminate"] = 2] = "Indeterminate";
})(CheckboxState || (CheckboxState = {}));
/**
 * Represents the event source type for the [lazy] table
 * Can be useful to differentiate between the event source inside (onLazyLoad) to provide different behavior
 */
export var AdaptTableEventSource;
(function (AdaptTableEventSource) {
    /**
     * Triggered when the lazy load is triggered on initialization. Depending on the "lazyLoadOnInit" property
     */
    AdaptTableEventSource["LazyOnInit"] = "lazyOnInit";
    /**
     * Triggered when single sorting is happening
     */
    AdaptTableEventSource["SingleSortChange"] = "singleSortChange";
    /**
     * Triggered when multi sorting is happening
     */
    AdaptTableEventSource["MultipleSortChange"] = "multipleSortChange";
    /**
     * Triggered when filtering is happening
     */
    AdaptTableEventSource["FilterChange"] = "filterChange";
    /**
     * @deprecated Not used anymore
     */
    AdaptTableEventSource["VirtualScroll"] = "virtualScroll";
    /**
     * Triggered when the page is changed
     */
    AdaptTableEventSource["PageChange"] = "pageChange";
    /**
     * Triggered when table "resetting"
     */
    AdaptTableEventSource["Reset"] = "reset";
    /**
     * Triggered when the table data can be loaded(ex. when user scrolls to the bottom of the table)
     */
    AdaptTableEventSource["LoadMore"] = "loadMore";
    /**
     * Triggered when the table is refreshing(ex. user click on the toolbar refresh button)
     */
    AdaptTableEventSource["Refresh"] = "refresh";
})(AdaptTableEventSource || (AdaptTableEventSource = {}));
export var FilterMatchMode;
(function (FilterMatchMode) {
    /**
     * Check that the data is starts with the filter value
     */
    FilterMatchMode["startsWith"] = "startsWith";
    /**
     * Check that the data contains filter value
     */
    FilterMatchMode["contains"] = "contains";
    /**
     * Check that the data is ends with the filter value
     */
    FilterMatchMode["endsWith"] = "endsWith";
    /**
     * Check that the data is equal to the filter value
     * For the "date" type data comparing by the "getTime" method
     * For all other types comparing by the "toString" method
     */
    FilterMatchMode["equals"] = "equals";
    /**
     * Check that the data is not equal to the filter value
     * Opposite to "equals"
     */
    FilterMatchMode["notEquals"] = "notEquals";
    /**
     * Check that the data array contains the filter value by applying "equals" comparison from https://github.com/primefaces/primeng/blob/master/src/app/components/utils/objectutils.ts
     */
    FilterMatchMode["in"] = "in";
    /**
     * Check that the data is lower than the filter value
     */
    FilterMatchMode["lt"] = "lt";
    /**
     * Check that the data is lower than or equal to the filter value
     */
    FilterMatchMode["lte"] = "lte";
    /**
     * Check that the data is greater than the filter value
     */
    FilterMatchMode["gt"] = "gt";
    /**
     * Check that the data is greater than or equal to the filter value
     */
    FilterMatchMode["gte"] = "gte";
})(FilterMatchMode || (FilterMatchMode = {}));
/**
 * Represents allowed sorting directions
 */
export var SortOrder;
(function (SortOrder) {
    /**
     * Sort in ascending order
     */
    SortOrder[SortOrder["Asc"] = 1] = "Asc";
    /**
     * Sort in descending order
     */
    SortOrder[SortOrder["Desc"] = -1] = "Desc";
})(SortOrder || (SortOrder = {}));
/**
 * Represents allowed storage types
 */
export var StorageType;
(function (StorageType) {
    /**
     * Local storage
     */
    StorageType["Local"] = "local";
    /**
     * Session storage
     */
    StorageType["Session"] = "session";
})(StorageType || (StorageType = {}));
/**
 * Represents allowed sorting modes
 */
export var SortMode;
(function (SortMode) {
    /**
     * Sort by single column
     */
    SortMode["Single"] = "single";
    /**
     * Sort by multiple columns
     */
    SortMode["Multiple"] = "multiple";
})(SortMode || (SortMode = {}));
/**
 * Represents allowed column resize modes
 */
export var ResizeMode;
(function (ResizeMode) {
    /**
     * Change only width of 2 sibling columns by increasing one column and decreasing the other one
     */
    ResizeMode["Fit"] = "fit";
    /**
     * Change width of one column only and also increase the width of the table itself
     */
    ResizeMode["Expand"] = "expand";
})(ResizeMode || (ResizeMode = {}));
/**
 * Represents allowed column resize directions
 */
export var ResizeDirection;
(function (ResizeDirection) {
    /**
     * Resize column to the left
     */
    ResizeDirection["Left"] = "left";
    /**
     * Resize column to the right
     */
    ResizeDirection["Right"] = "right";
})(ResizeDirection || (ResizeDirection = {}));
/**
 * List of html classes used in the table.
 *
 * Please be aware that class names can be changed so can't be used as constants while interacting with the table template
 */
export var AdaptTableClasses;
(function (AdaptTableClasses) {
    /**
     * Always applied to the table host element(<adapt-table>)
     */
    AdaptTableClasses["Main"] = "adapt-grid";
    /**
     * Always applied to the table host element(<adapt-table>)
     */
    AdaptTableClasses["AdaptTable"] = "adapt-table";
    /**
     * Applied to the table host element(<adapt-table>) when the table has border, [bordered] is set to true
     */
    AdaptTableClasses["Bordered"] = "adapt-grid-bordered";
    /**
     * Applied to the table host element(<adapt-table>) when the table pagination is enabled, [paginator] is set to true
     */
    AdaptTableClasses["Pageable"] = "adapt-table-pageable";
    /**
     * Applied to the table host element(<adapt-table>) when the table has scrollable body, [scrollable] is set to true
     */
    AdaptTableClasses["Scrollable"] = "adapt-table-scrollable";
    /**
     * Applied to the table host element(<adapt-table>) when the table has striped rows, [striped] is set to true
     */
    AdaptTableClasses["Striped"] = "adapt-table--striped";
    /**
     * Applied to the table host element(<adapt-table>) when the table is empty, [value] is null or an empty array
     */
    AdaptTableClasses["IsEmptyState"] = "adapt-table--empty-state";
    /**
     * Applied to the table host element(<adapt-table>) when the table has no scrollable body, [scrollable] is set to false
     */
    AdaptTableClasses["NotScrollable"] = "adapt-table-not-scrollable";
    /**
     * ???
     */
    AdaptTableClasses["HasNotVerticalBodyOverflow"] = "adapt-table--has-not-overflow";
    /**
     * Applied to the table host element(<adapt-table>) when the table loading state is true, [loading] is set to true
     */
    AdaptTableClasses["LoadingFullTable"] = "adapt-grid--loading";
    /**
     * Applied to the table cell element for the column with actions
     */
    AdaptTableClasses["ActionsCell"] = "at-actions-cell";
    /**
     * Applied to the table cell element if column is editable
     */
    AdaptTableClasses["EditingCell"] = "at-cell--editing";
    /**
     * Always applied to the table element inside the table header element
     */
    AdaptTableClasses["HeaderContainer"] = "c-header-container";
    /**
     * Always applied to the table element inside the table header element
     */
    AdaptTableClasses["HeaderTitle"] = "c-header__title";
    /**
     * Always applied to the table header element
     */
    AdaptTableClasses["HeaderDataCell"] = "at-header-data-cell";
    /**
     * Always applied for scrollable body table parent container (in non-virtual scroll mode)
     */
    AdaptTableClasses["TableScrollableBody"] = "ui-table-scrollable-body";
    /**
     * Always applied for "cdk-virtual-scroll-viewport" (in virtual scroll mode)
     */
    AdaptTableClasses["TableVirtualScrollableBody"] = "ui-table-virtual-scrollable-body";
    /**
     * Always applied for scrollable header table parent container (in both modes, virtual scroll and non-virtual scroll)
     */
    AdaptTableClasses["TableScrollableHeader"] = "ui-table-scrollable-header";
    /**
     * Always applied for scrollable footer table parent container (in both modes, virtual scroll and non-virtual scroll)
     */
    AdaptTableClasses["TableScrollableFooter"] = "ui-table-scrollable-footer";
    /**
     * Always applied for scrollable body table element (in both modes, virtual scroll and non-virtual scroll)
     */
    AdaptTableClasses["TableScrollableBodyTable"] = "ui-table-scrollable-body-table";
    /**
     * Always applied for scrollable header table element (in both modes, virtual scroll and non-virtual scroll)
     */
    AdaptTableClasses["TableScrollableHeaderTable"] = "ui-table-scrollable-header-table";
    /**
     * Always applied for scrollable footer table element (in both modes, virtual scroll and non-virtual scroll)
     */
    AdaptTableClasses["TableScrollableFooterTable"] = "ui-table-scrollable-footer-table";
})(AdaptTableClasses || (AdaptTableClasses = {}));
/**
 * Represent if the column merged with other column or not
 */
export var RenderingColumnType;
(function (RenderingColumnType) {
    /**
     * The column is not merged with other column
     */
    RenderingColumnType[RenderingColumnType["Simple"] = 1] = "Simple";
    /**
     * The column is merged with other column
     */
    RenderingColumnType[RenderingColumnType["Merged"] = 2] = "Merged";
})(RenderingColumnType || (RenderingColumnType = {}));
export var AdaptTableHeaderCheckboxToggleSource;
(function (AdaptTableHeaderCheckboxToggleSource) {
    /**
     * The source of the event is "Select all" item
     */
    AdaptTableHeaderCheckboxToggleSource["SelectAll"] = "selectAll";
    /**
     * The source of the event is "Deselect all" item
     */
    AdaptTableHeaderCheckboxToggleSource["DeselectAll"] = "deselectAll";
    /**
     * The source of the event is "Select on page" item
     */
    AdaptTableHeaderCheckboxToggleSource["SelectOnPage"] = "selectOnPage";
    /**
     * @deprecated since 12.18.0
     * Not used anymore
     */
    AdaptTableHeaderCheckboxToggleSource["SelectVisible"] = "selectVisible";
})(AdaptTableHeaderCheckboxToggleSource || (AdaptTableHeaderCheckboxToggleSource = {}));
/**
 * @deprecated since 12.18.0
 * Not used anymore
 */
export var AdaptTableSelectionMachineState;
(function (AdaptTableSelectionMachineState) {
    AdaptTableSelectionMachineState["unselected"] = "unselected";
    AdaptTableSelectionMachineState["selected"] = "selected";
    AdaptTableSelectionMachineState["indeterminate"] = "indeterminate";
})(AdaptTableSelectionMachineState || (AdaptTableSelectionMachineState = {}));
/**
 * Allowed values for the [headerSelectionMode] input
 */
export var AdaptTableHeaderSelectionMode;
(function (AdaptTableHeaderSelectionMode) {
    /**
     * Allows to use both type of selection: "Select on page" and "Select all in table"
     */
    AdaptTableHeaderSelectionMode["Both"] = "both";
    /**
     * Allows to use only "Select on page" type of selection
     */
    AdaptTableHeaderSelectionMode["Chunk"] = "chunk";
    /**
     * Allows to use only "Select all in table" type of selection
     */
    AdaptTableHeaderSelectionMode["All"] = "all";
})(AdaptTableHeaderSelectionMode || (AdaptTableHeaderSelectionMode = {}));
/**
 * Allowed export formats
 */
export var ExportType;
(function (ExportType) {
    /**
     * Export to CSV format
     */
    ExportType["CSV"] = "CSV";
    /**
     * Export to PDF format
     */
    ExportType["PDF"] = "PDF";
})(ExportType || (ExportType = {}));
//# sourceMappingURL=adapt-table.models.js.map