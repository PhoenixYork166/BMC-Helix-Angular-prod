{"version":3,"file":"resizable-column.directive.js","sourceRoot":"","sources":["../../../../../../../libs/adapt-table/src/lib/primeng-lib/table/resizable-column.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  Renderer2\n} from '@angular/core';\nimport {round} from 'lodash-es';\nimport {AdaptTableComponent} from '../../adapt-table.component';\nimport {DomHandler} from 'primeng/dom';\nimport {\n  AdaptTableClasses,\n  ColumnConfigState,\n  ColumnResized,\n  ResizeDirection,\n  ResizeMode\n} from '../../adapt-table.models';\nimport {adaptError} from '@bmc-ux/adapt-angular';\nimport {calculateScrollbarWidth} from './utils';\n\n\n@Directive({\n  // eslint-disable-next-line @angular-eslint/directive-selector\n  selector: '[pResizableColumn]'\n})\n// eslint-disable-next-line @angular-eslint/directive-class-suffix\nexport class ResizableColumn implements AfterViewInit, OnDestroy {\n\n  @Input() pResizableColumnDisabled: boolean;\n\n  @Output() readonly columnResized: EventEmitter<ColumnResized> = new EventEmitter<ColumnResized>();\n\n  resizer: HTMLSpanElement;\n  resizerMouseDownListener: EventListenerOrEventListenerObject;\n  documentMouseMoveListener: EventListenerOrEventListenerObject;\n  documentMouseUpListener: EventListenerOrEventListenerObject;\n\n  private readonly _minColResizeWidth: number = 15; // in pixels\n\n  constructor(\n    public dt: AdaptTableComponent,\n    public el: ElementRef,\n    public zone: NgZone,\n    private _renderer: Renderer2\n  ) {\n  }\n\n  ngAfterViewInit(): void {\n    if (this.isEnabled()) {\n      DomHandler.addClass(this.el.nativeElement, 'ui-resizable-column');\n      this.resizer = document.createElement('span');\n      this.resizer.className = 'ui-column-resizer ui-clickable';\n      this.el.nativeElement.appendChild(this.resizer);\n\n      this.zone.runOutsideAngular(() => {\n        this.resizerMouseDownListener = this.onMouseDown.bind(this);\n        this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);\n      });\n    }\n  }\n\n  bindDocumentEvents(): void {\n    this.zone.runOutsideAngular(() => {\n      this.documentMouseMoveListener = this.onDocumentMouseMove.bind(this);\n      document.addEventListener('mousemove', this.documentMouseMoveListener);\n\n      this.documentMouseUpListener = this.onDocumentMouseUp.bind(this);\n      document.addEventListener('mouseup', this.documentMouseUpListener);\n    });\n  }\n\n  unbindDocumentEvents(): void {\n    if (this.documentMouseMoveListener) {\n      document.removeEventListener('mousemove', this.documentMouseMoveListener);\n      this.documentMouseMoveListener = null;\n    }\n\n    if (this.documentMouseUpListener) {\n      document.removeEventListener('mouseup', this.documentMouseUpListener);\n      this.documentMouseUpListener = null;\n    }\n  }\n\n  onMouseDown(event: DragEvent): void {\n    if (event.which === 1) {\n      this.dt.onColumnResizeBegin(event);\n      this.bindDocumentEvents();\n    }\n  }\n\n  onDocumentMouseMove(event: DragEvent): void {\n    this.dt.onColumnResize(event);\n  }\n\n  onDocumentMouseUp(event: DragEvent): void {\n    this.onColumnResizeEnd(event, this.el.nativeElement);\n    this.unbindDocumentEvents();\n  }\n\n  isEnabled(): boolean {\n    return this.pResizableColumnDisabled !== true;\n  }\n\n  ngOnDestroy(): void {\n    if (this.resizerMouseDownListener) {\n      this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);\n    }\n\n    this.unbindDocumentEvents();\n  }\n\n  onColumnResizeEnd(event: DragEvent, column: HTMLTableDataCellElement): void {\n    if (this.dt.columnResizeMode === ResizeMode.Fit) {\n      this._handleFitModeResize(event, column);\n    } else if (this.dt.columnResizeMode === ResizeMode.Expand) {\n      this._handleExpandModeResize(event, column);\n    }\n\n    this.dt.resizeHelperViewChild.nativeElement.style.display = 'none';\n    DomHandler.removeClass(this.dt.containerViewChild.nativeElement, 'ui-unselectable-text');\n  }\n\n  private _checkIfOverlapLeftSibling(event: DragEvent, column: HTMLTableDataCellElement): boolean {\n    const containerLeft = DomHandler.getOffset(this.dt.containerViewChild.nativeElement).left;\n\n    return this.dt.isRtl\n      ? event.pageX - containerLeft < (column.nextElementSibling as HTMLTableDataCellElement).offsetLeft\n      : event.pageX - containerLeft < column.offsetLeft;\n  }\n\n  private _checkIfOverlapRightSibling(event: DragEvent, column: HTMLTableDataCellElement): boolean {\n    const containerLeft = DomHandler.getOffset(this.dt.containerViewChild.nativeElement).left;\n\n    return this.dt.isRtl\n      ? event.pageX - containerLeft > column.offsetLeft + column.offsetWidth\n      : event.pageX - containerLeft > column.offsetLeft\n      + column.offsetWidth + (column.nextElementSibling as HTMLTableDataCellElement).offsetWidth;\n  }\n\n  private _handleExpandModeResize(event: DragEvent, column: HTMLTableDataCellElement): void {\n    const delta = this._getColumnResizeDelta(event, column);\n    const columnWidth = column.offsetWidth;\n    const newColumnWidth = columnWidth + delta;\n\n    // Logic copied from PrimeNG. Changed the way how delta calculating\n    if (this.dt.scrollable) {\n      this._setScrollableItemsWidthOnExpandResize(column, newColumnWidth, delta);\n    } else {\n      this.dt.tableViewChild.nativeElement.style.width =\n        this.dt.tableViewChild.nativeElement.offsetWidth + delta + 'px';\n      column.style.width = newColumnWidth + 'px';\n      const containerWidth = this.dt.tableViewChild.nativeElement.style.width;\n\n      this.dt.containerViewChild.nativeElement.style.width = containerWidth + 'px';\n    }\n\n    this._emitOnColResize(column, delta);\n  }\n\n  private _setScrollableItemsWidthOnExpandResize(column: HTMLTableCellElement, newColumnWidth: number, delta: number): void {\n    const scrollableView = column ? this.dt.findParentScrollableView(column) : this.dt.containerViewChild.nativeElement;\n    const scrollableBody: HTMLElement = DomHandler.findSingle(scrollableView, this.dt.virtualScroll ? `.${AdaptTableClasses.TableVirtualScrollableBody}` : `.${AdaptTableClasses.TableScrollableBody}`);\n    const scrollableHeader: HTMLElement = DomHandler.findSingle(scrollableView, `.${AdaptTableClasses.TableScrollableHeader}`);\n    const scrollableFooter: HTMLElement = DomHandler.findSingle(scrollableView, `.${AdaptTableClasses.TableScrollableFooter}`);\n    const scrollableBodyTable: HTMLTableElement = DomHandler.findSingle(scrollableBody, `table.${AdaptTableClasses.TableScrollableBodyTable}`);\n    const scrollableHeaderTable: HTMLTableElement = DomHandler.findSingle(scrollableHeader, `table.${AdaptTableClasses.TableScrollableHeaderTable}`);\n    const scrollableFooterTable: HTMLTableElement = DomHandler.findSingle(scrollableFooter, `table.${AdaptTableClasses.TableScrollableFooterTable}`);\n\n    const scrollableBodyTableWidth = column ? scrollableBodyTable.offsetWidth + delta : newColumnWidth;\n    const scrollableHeaderTableWidth = column ? scrollableHeaderTable.offsetWidth + delta : newColumnWidth;\n    const isContainerInViewport = this.dt.containerViewChild.nativeElement.offsetWidth >= scrollableBodyTableWidth;\n\n    const setWidth = (container: HTMLElement, table: HTMLTableElement, width: number, isContainerInViewport: boolean): void => {\n      if (container && table) {\n        container.style.width = isContainerInViewport ? width + calculateScrollbarWidth(scrollableBody) + 'px' : 'auto';\n        table.style.width = width + 'px';\n      }\n    };\n\n    setWidth(scrollableBody, scrollableBodyTable, scrollableBodyTableWidth, isContainerInViewport);\n    setWidth(scrollableHeader, scrollableHeaderTable, scrollableHeaderTableWidth, isContainerInViewport);\n    setWidth(scrollableFooter, scrollableFooterTable, scrollableHeaderTableWidth, isContainerInViewport);\n\n    if (column) {\n      const resizeColumnIndex = DomHandler.index(column);\n\n      this._resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, null);\n      this._resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, null);\n      this._resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, null);\n    }\n  }\n\n  private _resizeColGroup(table: HTMLTableElement, resizeColumnIndex: number, newColumnWidth: number, nextColumnWidth: number): void {\n    if (table) {\n      const colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] as HTMLTableColElement : null;\n\n      if (colGroup) {\n        const col = colGroup.children[resizeColumnIndex] as HTMLTableColElement;\n        const nextCol = col.nextElementSibling as HTMLTableColElement;\n\n        this._renderer.setStyle(col, 'width', newColumnWidth + 'px');\n        this._renderer.setAttribute(col, 'data-resized-width', newColumnWidth + 'px');\n\n        if (nextCol && nextColumnWidth) {\n          this._renderer.setStyle(nextCol, 'width', nextColumnWidth + 'px');\n          this._renderer.setAttribute(nextCol, 'data-resized-width', nextColumnWidth + 'px');\n        }\n      } else {\n        throw new Error('Scrollable tables require a colgroup to support resizable columns');\n      }\n    }\n  }\n\n  private _getColumnSiblingsWidths(column: HTMLTableCellElement, resizeDirection: ResizeDirection): number[] {\n    let columnSibling = resizeDirection === ResizeDirection.Left\n      ? column.previousElementSibling as HTMLTableDataCellElement\n      : column.nextElementSibling as HTMLTableDataCellElement;\n    const allPrevColumnSiblings = [columnSibling];\n\n    function getSibling(columnRef: HTMLTableDataCellElement): HTMLTableDataCellElement {\n      return resizeDirection === ResizeDirection.Left\n        ? columnRef.previousElementSibling as HTMLTableDataCellElement\n        : columnRef.nextElementSibling as HTMLTableDataCellElement;\n    }\n\n    while (columnSibling && getSibling(columnSibling)) {\n      allPrevColumnSiblings.push(getSibling(columnSibling));\n      columnSibling = getSibling(columnSibling);\n    }\n\n    const allResizablePrevColumnSiblings = allPrevColumnSiblings.filter(col => col && col.classList.contains('ui-resizable-column'));\n\n    return allResizablePrevColumnSiblings.map((item: HTMLElement) => item && item.offsetWidth);\n  }\n\n  private _getColumnResizeDelta(event: DragEvent, column: HTMLTableDataCellElement): number {\n    const containerLeft = DomHandler.getOffset(this.dt.containerViewChild.nativeElement).left;\n\n    return this.dt.isRtl\n      ? containerLeft + column.offsetLeft - event.pageX\n      : event.pageX - (containerLeft + column.offsetLeft + column.offsetWidth);\n  }\n\n  private _handleFitModeResize(event: DragEvent, column: HTMLTableDataCellElement): void {\n    const isLeftSiblingOverlap = this._checkIfOverlapLeftSibling(event, column);\n    const isRightSiblingOverlap = this._checkIfOverlapRightSibling(event, column);\n\n    if (!isLeftSiblingOverlap && !isRightSiblingOverlap) {\n      this._noSiblingOverlapResize(event, column);\n    } else if (isLeftSiblingOverlap) {\n      if (this.dt.isRtl) {\n        this._handleRightSiblingOverlapResize(event, column);\n      } else {\n        this._handleLeftSiblingOverlapResize(event, column);\n      }\n    } else if (isRightSiblingOverlap) {\n      if (this.dt.isRtl) {\n        this._handleLeftSiblingOverlapResize(event, column);\n      } else {\n        this._handleRightSiblingOverlapResize(event, column);\n      }\n    }\n  }\n\n  // Logic copied from PrimeNG. Changed the way how delta calculating\n  private _noSiblingOverlapResize(event: DragEvent, column: HTMLTableDataCellElement): void {\n    const resizeColumnIndex = DomHandler.index(column);\n    let nextColumn = column.nextElementSibling as HTMLTableDataCellElement;\n\n    while (!nextColumn.offsetParent) {\n      nextColumn = nextColumn.nextElementSibling as HTMLTableDataCellElement;\n    }\n\n    if (nextColumn) {\n      const delta = this._getColumnResizeDelta(event, column);\n      const nextColumnWidth = nextColumn.offsetWidth - delta;\n      const columnWidth = column.offsetWidth;\n\n      const newColumnWidth = columnWidth + delta;\n\n      if (this.dt.scrollable) {\n        const scrollableView = this.dt.findParentScrollableView(column);\n        const scrollableBodyTable = DomHandler.findSingle(scrollableView, `table.${AdaptTableClasses.TableScrollableBodyTable}`);\n        const scrollableHeaderTable = DomHandler.findSingle(scrollableView, `table.${AdaptTableClasses.TableScrollableHeaderTable}`);\n        const scrollableFooterTable = DomHandler.findSingle(scrollableView, `table.${AdaptTableClasses.TableScrollableFooterTable}`);\n\n        this._resizeColGroup(scrollableHeaderTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n        this._resizeColGroup(scrollableBodyTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n        this._resizeColGroup(scrollableFooterTable, resizeColumnIndex, newColumnWidth, nextColumnWidth);\n      } else {\n        this._resizeColGroup(this.dt.tableViewChild.nativeElement,\n          resizeColumnIndex, newColumnWidth, nextColumnWidth);\n      }\n\n      this._emitOnColResize(column, delta);\n    }\n  }\n\n  private _handleLeftSiblingOverlapResize(event: DragEvent, column: HTMLTableDataCellElement): void {\n    const delta = Math.abs(this._getColumnResizeDelta(event, column));\n    // Pass resizeColumnIndex + 1 to include current column in columns which be resized\n    const resizeColumnIndex = DomHandler.index(column) + 1;\n    const columnSiblingsWidths = [column.offsetWidth, ...this._getColumnSiblingsWidths(column, ResizeDirection.Left)];\n    const newColumnWidth = (column.nextElementSibling as HTMLTableDataCellElement).offsetWidth + delta;\n\n    this._resizeTableSections(column, newColumnWidth, delta, resizeColumnIndex, columnSiblingsWidths, ResizeDirection.Left);\n\n    // Pass column.nextElementSibling because we resize not current column but it next sibling\n    this._emitOnColResize(column.nextElementSibling as HTMLTableDataCellElement, delta);\n  }\n\n  private _handleRightSiblingOverlapResize(event: DragEvent, column: HTMLTableDataCellElement): void {\n    const delta = Math.abs(this._getColumnResizeDelta(event, column));\n    const resizeColumnIndex = DomHandler.index(column);\n    const columnSiblingsWidths = this._getColumnSiblingsWidths(column, ResizeDirection.Right);\n    const newColumnWidth = column.offsetWidth + delta;\n\n    this._resizeTableSections(column, newColumnWidth, delta, resizeColumnIndex, columnSiblingsWidths, ResizeDirection.Right);\n\n    this._emitOnColResize(column, delta);\n  }\n\n  private _resizeTableSections(\n    column: HTMLTableDataCellElement,\n    newColumnWidth: number,\n    delta: number,\n    resizeColumnIndex: number,\n    columnSiblingsWidths: number[],\n    resizeDirection: ResizeDirection\n  ): void {\n    if (this.dt.scrollable) {\n      const scrollableView = this.dt.findParentScrollableView(column);\n      const scrollableBodyTable = DomHandler.findSingle(scrollableView, `table.${AdaptTableClasses.TableScrollableBodyTable}`);\n      const scrollableHeaderTable = DomHandler.findSingle(scrollableView, `table.${AdaptTableClasses.TableScrollableHeaderTable}`);\n      const scrollableFooterTable = DomHandler.findSingle(scrollableView, `table.${AdaptTableClasses.TableScrollableFooterTable}`);\n\n      this._resizeColGroupForSiblings(scrollableHeaderTable,\n        newColumnWidth, delta, resizeColumnIndex, columnSiblingsWidths, resizeDirection);\n      this._resizeColGroupForSiblings(scrollableBodyTable,\n        newColumnWidth, delta, resizeColumnIndex, columnSiblingsWidths, resizeDirection);\n      this._resizeColGroupForSiblings(scrollableFooterTable,\n        newColumnWidth, delta, resizeColumnIndex, columnSiblingsWidths, resizeDirection);\n    } else {\n      this._resizeColGroupForSiblings(this.dt.tableViewChild.nativeElement,\n        newColumnWidth, delta, resizeColumnIndex, columnSiblingsWidths, resizeDirection);\n    }\n  }\n\n  private _resizeColGroupForSiblings(\n    table: HTMLTableElement,\n    newColumnWidth: number,\n    delta: number,\n    resizeColumnIndex: number,\n    columnSiblingsWidths: number[],\n    resizeDirection: ResizeDirection\n  ): void {\n    if (table) {\n      const colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;\n\n      if (colGroup) {\n        const col = colGroup.children[resizeColumnIndex];\n\n        let siblingCol = resizeDirection === ResizeDirection.Left\n          ? col.previousElementSibling\n          : col.nextElementSibling;\n\n        const colWidthsData = this._recalculateColumnSiblingsWidths(delta, columnSiblingsWidths);\n        const colWidths = colWidthsData.newWidths;\n        const newWidth = newColumnWidth - colWidthsData.leftOver;\n        const widthValue = (newWidth > this._minColResizeWidth ? newWidth : this._minColResizeWidth) + 'px';\n\n        this._renderer.setStyle(col, 'width', widthValue);\n        this._renderer.setAttribute(col, 'data-resized-width', widthValue);\n\n        if (colWidths && colWidths.length) {\n          colWidths.forEach((width) => {\n            if (siblingCol) {\n              this._renderer.setStyle(siblingCol, 'width',\n                (width > this._minColResizeWidth ? width : this._minColResizeWidth) + 'px');\n\n              this._renderer.setAttribute(siblingCol, 'data-resized-width',\n                (width > this._minColResizeWidth ? width : this._minColResizeWidth) + 'px');\n\n              siblingCol = resizeDirection === ResizeDirection.Left\n                ? siblingCol.previousElementSibling\n                : siblingCol.nextElementSibling;\n            }\n          });\n        }\n      } else {\n        adaptError('Scrollable tables require a colgroup to support resizable columns');\n      }\n    }\n  }\n\n  private _recalculateColumnSiblingsWidths(delta: number, columnSiblingsWidths: number[]): { leftOver: number; newWidths: number[] } {\n    let leftOver = 0;\n    const widthsSum = columnSiblingsWidths.reduce((prev, next) => prev + next, 0);\n\n    const newWidths = columnSiblingsWidths.map(width => {\n      const widthInPercents = width * 100 / widthsSum;\n      const partFromDelta = delta * widthInPercents / 100;\n\n      const newWidth = width - partFromDelta;\n\n      if (newWidth > this._minColResizeWidth) {\n        return newWidth;\n      } else {\n        leftOver += partFromDelta;\n\n        return width;\n      }\n    });\n\n    return {leftOver, newWidths};\n  }\n\n  private _emitOnColResize(column: HTMLTableDataCellElement, delta: number): void {\n    const widthMap: ColumnConfigState[] = this.dt.dataHeaderCells.map(cell => {\n      return {\n        fields: cell.data.renderingColumn.columnsConfigs.map(col => col.field),\n        width: round((cell.element.nativeElement.offsetWidth / this.dt.tableInnerContainer.nativeElement.offsetWidth) * 100, 2)\n      };\n    });\n\n    this.columnResized.emit({\n      element: column,\n      delta: delta,\n      columnsConfigState: widthMap\n    });\n  }\n}\n"]}