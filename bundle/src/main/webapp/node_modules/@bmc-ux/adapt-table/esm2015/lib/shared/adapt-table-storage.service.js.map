{"version":3,"file":"adapt-table-storage.service.js","sourceRoot":"","sources":["../../../../../../libs/adapt-table/src/lib/shared/adapt-table-storage.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AACzC,OAAO,EAAkB,WAAW,EAAC,MAAM,uBAAuB,CAAC;AACnE,OAAO,EAAC,OAAO,EAAC,MAAM,WAAW,CAAC;;AAKlC,MAAM,OAAO,wBAAwB;IACnC,OAAO,CAAC,QAAgB,EAAE,WAAwB;QAChD,IAAI,WAAW,KAAK,WAAW,CAAC,KAAK,EAAE;YACrC,IAAI;gBACF,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;aACnD;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,IAAI,CAAC;aACb;SACF;QAED,IAAI,WAAW,KAAK,WAAW,CAAC,OAAO,EAAE;YACvC,IAAI;gBACF,OAAO,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;aACrD;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,IAAI,CAAC;aACb;SACF;IACH,CAAC;IAED,UAAU,CAAC,QAAgB,EAAE,YAA6B,EAAE,WAAwB;QAClF,MAAM,aAAa,mCAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAK,YAAY,CAAC,CAAC;QAEhF,IAAI,aAAa,EAAE;YACjB,iCAAiC;YACjC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,IAAI,OAAO,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;YAEpG,IAAI,WAAW,KAAK,WAAW,CAAC,KAAK,EAAE;gBACrC,YAAY,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;aAC/D;YAED,IAAI,WAAW,KAAK,WAAW,CAAC,OAAO,EAAE;gBACvC,cAAc,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC;aACjE;SACF;IACH,CAAC;IAED,+DAA+D;IAC/D,SAAS,CAAC,QAAgB;QACxB,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;QAClC,cAAc,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IACtC,CAAC;;gGAxCU,wBAAwB;8EAAxB,wBAAwB,WAAxB,wBAAwB,mBAFvB,MAAM;uFAEP,wBAAwB;cAHpC,UAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB","sourcesContent":["import {Injectable} from '@angular/core';\nimport {AdaptTableState, StorageType} from '../adapt-table.models';\nimport {isEmpty} from 'lodash-es';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdaptTableStorageService {\n  getData(stateKey: string, storageType: StorageType): AdaptTableState {\n    if (storageType === StorageType.Local) {\n      try {\n        return JSON.parse(localStorage.getItem(stateKey));\n      } catch (error) {\n        return null;\n      }\n    }\n\n    if (storageType === StorageType.Session) {\n      try {\n        return JSON.parse(sessionStorage.getItem(stateKey));\n      } catch (error) {\n        return null;\n      }\n    }\n  }\n\n  updateData(stateKey: string, dataToUpdate: AdaptTableState, storageType: StorageType): void {\n    const restoredState = {...this.getData(stateKey, storageType), ...dataToUpdate};\n\n    if (restoredState) {\n      // Delete empty data from storage\n      Object.keys(restoredState).forEach(key => isEmpty(restoredState[key]) && delete restoredState[key]);\n\n      if (storageType === StorageType.Local) {\n        localStorage.setItem(stateKey, JSON.stringify(restoredState));\n      }\n\n      if (storageType === StorageType.Session) {\n        sessionStorage.setItem(stateKey, JSON.stringify(restoredState));\n      }\n    }\n  }\n\n  // TODO: For future, think how to restore table state correctly\n  clearData(stateKey: string): void {\n    localStorage.removeItem(stateKey);\n    sessionStorage.removeItem(stateKey);\n  }\n}\n"]}