{"version":3,"file":"row-selection-checkbox.component.js","sourceRoot":"","sources":["../../../../../../libs/adapt-table/src/lib/row-selection-checkbox/row-selection-checkbox.component.ts","../../../../../../libs/adapt-table/src/lib/row-selection-checkbox/row-selection-checkbox.html"],"names":[],"mappings":"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","sourcesContent":["// copied from primeng p-tableCheckbox\n\nimport {\n  Component, Input, ViewChild, ElementRef, OnDestroy, OnInit,\n} from '@angular/core';\nimport {AdaptTableComponent} from '../adapt-table.component';\nimport {Subscription} from 'rxjs';\nimport {RenderingGroupedRowData, PrimaryKey, RowData, AdaptTableRowAriaData, RowDataItem} from '../adapt-table.models';\nimport {DomHandler} from 'primeng/dom';\nimport {isFunction} from 'lodash-es';\n\n\n@Component({\n  selector: 'adapt-row-selection-checkbox',\n  templateUrl: './row-selection-checkbox.html',\n})\nexport class AdaptRowSelectionCheckboxComponent implements OnInit, OnDestroy {\n\n  @Input() renderRowData: RenderingGroupedRowData;\n\n\n  @Input() disabled: boolean;\n\n  @Input() value: RowDataItem;\n\n  @Input() index: number;\n\n  @Input() rowAriaDataResolver: (rowData: RowData) => AdaptTableRowAriaData;\n\n  @ViewChild('box') boxViewChild: ElementRef; // static: false\n\n  checked: boolean;\n  ariaLabel: string;\n\n  subscription: Subscription;\n\n  constructor(public table: AdaptTableComponent) {\n  }\n\n  ngOnInit(): void {\n    this.subscription = this.table.getTableService().selectionSource$.subscribe(() => {\n      this.checked = this.table.isSelected(this.value);\n    });\n\n    this.checked = this.table.isSelected(this.value);\n\n    if (isFunction(this.rowAriaDataResolver)) {\n      this.ariaLabel = this.rowAriaDataResolver(this.value)?.rowSelectionAriaLabel;\n    }\n  }\n\n  onClick(event: MouseEvent): void {\n    if (!this.disabled) {\n      let appliedRangeRowsSelections = false;\n      const currentRowId = this.table.getPrimaryKey(this.value);\n\n      if (!this.checked) {\n        const lastSelectedRowId = this.table.lastSelectedRowId;\n\n        // range selection with shiftKey\n        if (event.shiftKey && lastSelectedRowId && this.table.isRowSelected(lastSelectedRowId)) {\n          const renderingDataRows = this.table.getCurrentPageRenderingDataRows(true);\n          const startRowsSelectionIndex = this.getIndexOfSelectedDataItem(renderingDataRows, currentRowId);\n\n          if (startRowsSelectionIndex >= 0) {\n            let endRowsSelectionIndex = this.getIndexOfSelectedDataItem(\n              renderingDataRows.slice(startRowsSelectionIndex + 1), currentRowId);\n\n            if (endRowsSelectionIndex >= 0) {\n              endRowsSelectionIndex += startRowsSelectionIndex + 1;\n\n              const rowsToAddForSelection = renderingDataRows\n                .slice(startRowsSelectionIndex, endRowsSelectionIndex + 1)\n                .filter(renderingDataRow => {\n                  if (renderingDataRow.isGroup) {\n                    return false;\n                  }\n\n                  return !this.table.isRowSelected(renderingDataRow.rowData);\n                }).map(renderingDataRow => renderingDataRow.rowData);\n\n              appliedRangeRowsSelections = true;\n              this.table.addToRowSelection(rowsToAddForSelection);\n            }\n          }\n        }\n\n        this.table.lastSelectedRowId = currentRowId;\n      }\n\n      if (!appliedRangeRowsSelections) {\n        this.table.toggleRowWithCheckbox({\n          originalEvent: event,\n          rowIndex: this.index\n        }, this.value);\n      }\n    }\n\n    DomHandler.clearSelection();\n  }\n\n  getIndexOfSelectedDataItem(dataRows: RenderingGroupedRowData[], currentRowId: PrimaryKey): number {\n    return dataRows.findIndex(dataRow => {\n      if (dataRow.isGroup) {\n        return false;\n      }\n\n      const dataRowId = this.table.getPrimaryKey(dataRow.rowData);\n\n      return dataRowId === this.table.lastSelectedRowId || dataRowId === currentRowId;\n    });\n  }\n\n  onFocus(): void {\n    DomHandler.addClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n  }\n\n  onBlur(): void {\n    DomHandler.removeClass(this.boxViewChild.nativeElement, 'ui-state-focus');\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n}\n","<div class=\"ui-chkbox ui-widget\" (click)=\"onClick($event)\">\n  <div class=\"ui-helper-hidden-accessible\">\n    <label>\n      <input type=\"checkbox\"\n             [checked]=\"checked\"\n             (focus)=\"onFocus()\"\n             (blur)=\"onBlur()\"\n             [attr.aria-checked]=\"checked\"\n             [attr.aria-label]=\"ariaLabel\"\n             [disabled]=\"disabled\">\n      <span class=\"sr-only\" *ngIf=\"ariaLabel\">{{ariaLabel}}</span>\n    </label>\n  </div>\n  <div #box [ngClass]=\"{'ui-chkbox-box ui-widget ui-state-default':true,\n\t\t\t'ui-state-active':checked, 'ui-state-disabled':disabled}\">\n    <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check':checked}\"></span>\n  </div>\n</div>\n"]}