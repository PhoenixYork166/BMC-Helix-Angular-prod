import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { formatString, isArray, isDefined } from '@bmc-ux/adapt-angular';
import { AdaptTableComponent } from '../../adapt-table.component';
import { AdaptTableFiltersService } from '../adapt-table-filters.service';
import * as i0 from "@angular/core";
import * as i1 from "../../adapt-table.component";
import * as i2 from "../adapt-table-filters.service";
import * as i3 from "@bmc-ux/adapt-angular";
import * as i4 from "@angular/common";
import * as i5 from "@angular/forms";
import * as i6 from "../select-migration.component";
function AdaptTableMergedFiltersComponent_adapt_tag_15_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-tag", 8);
    i0.ɵɵlistener("remove", function AdaptTableMergedFiltersComponent_adapt_tag_15_Template_adapt_tag_remove_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const filter_r3 = restoredCtx.$implicit; const ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.onRemoveFilterFormApplied(filter_r3); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const filter_r3 = ctx.$implicit;
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("type", "active");
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate2("\n          ", filter_r3.header, ": ", filter_r3.value, "\n        ");
} }
function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_container_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n            ");
} }
const _c0 = function (a0, a1) { return { column: a0, index: a1 }; };
function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵtemplate(2, AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_container_2_ng_template_2_Template, 1, 0, "ng-template", 15);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const column_r7 = i0.ɵɵnextContext().$implicit;
    const ctx_r8 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", column_r7.filterTemplate)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c0, column_r7, ctx_r8.index));
} }
function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_adapt_rx_search_3_Template(rf, ctx) { if (rf & 1) {
    const _r17 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-rx-search", 19);
    i0.ɵɵlistener("ngModelChange", function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_adapt_rx_search_3_Template_adapt_rx_search_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r17); const column_r7 = i0.ɵɵnextContext(2).$implicit; const ctx_r15 = i0.ɵɵnextContext(2); return ctx_r15.setFilter($event, column_r7); });
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r7 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r13 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("ngModel", ctx_r13.getFilterValue(column_r7))("placeholder", ctx_r13.texts.textFilterTexts.placeholder)("label", ctx_r13.texts.textFilterTexts.label)("initialAlign", "left")("searchButton", ctx_r13.table.explicitSearchBtn)("size", "sm");
} }
function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_ng_container_5_ng_container_2_adapt_rx_radiobutton_2_Template(rf, ctx) { if (rf & 1) {
    const _r26 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-rx-radiobutton", 22);
    i0.ɵɵlistener("ngModelChange", function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_ng_container_5_ng_container_2_adapt_rx_radiobutton_2_Template_adapt_rx_radiobutton_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r26); const column_r7 = i0.ɵɵnextContext(4).$implicit; const ctx_r24 = i0.ɵɵnextContext(2); return ctx_r24.onSelectModelChange($event, column_r7); });
    i0.ɵɵtext(1, "\n                  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r23 = ctx.$implicit;
    const column_r7 = i0.ɵɵnextContext(4).$implicit;
    const ctx_r22 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("value", option_r23.id)("label", option_r23.name)("ngModel", ctx_r22.getFilterValueForSingleSelect(column_r7));
} }
function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_ng_container_5_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n\n                  ");
    i0.ɵɵtemplate(2, AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_ng_container_5_ng_container_2_adapt_rx_radiobutton_2_Template, 2, 4, "adapt-rx-radiobutton", 21);
    i0.ɵɵtext(3, "\n                ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const column_r7 = i0.ɵɵnextContext(3).$implicit;
    const ctx_r19 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r19.getSelectOptions(column_r7))("ngForTrackBy", ctx_r19.trackByForSelectOptions);
} }
function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_ng_container_5_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    const _r31 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n                  ");
    i0.ɵɵelementStart(1, "adapt-select-migration", 23);
    i0.ɵɵlistener("selectModelChange", function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_ng_container_5_ng_template_4_Template_adapt_select_migration_selectModelChange_1_listener($event) { i0.ɵɵrestoreView(_r31); const column_r7 = i0.ɵɵnextContext(3).$implicit; const ctx_r29 = i0.ɵɵnextContext(2); return ctx_r29.onSelectModelChange($event, column_r7); });
    i0.ɵɵtext(2, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n                ");
} if (rf & 2) {
    const column_r7 = i0.ɵɵnextContext(3).$implicit;
    const ctx_r21 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("inline", true)("options", ctx_r21.getSelectOptions(column_r7))("optionFormatter", ctx_r21.selectOptionFormatter)("texts", ctx_r21.getSelectTexts(column_r7))("multiple", !ctx_r21.isSingleSelect(column_r7))("settings", ctx_r21.getSelectSettings(column_r7))("value", ctx_r21.getFilterValue(column_r7));
} }
function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n                ");
    i0.ɵɵtemplate(2, AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_ng_container_5_ng_container_2_Template, 4, 2, "ng-container", 13);
    i0.ɵɵtext(3, "\n\n                ");
    i0.ɵɵtemplate(4, AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_ng_container_5_ng_template_4_Template, 4, 7, "ng-template", null, 20, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(6, "\n              ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r20 = i0.ɵɵreference(5);
    const column_r7 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r14 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r14.isSingleSelect(column_r7))("ngIfElse", _r20);
} }
function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n            ");
    i0.ɵɵelementContainerStart(1, 16);
    i0.ɵɵtext(2, "\n              ");
    i0.ɵɵtemplate(3, AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_adapt_rx_search_3_Template, 2, 7, "adapt-rx-search", 17);
    i0.ɵɵtext(4, "\n\n              ");
    i0.ɵɵtemplate(5, AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_ng_container_5_Template, 7, 2, "ng-container", 18);
    i0.ɵɵtext(6, "\n            ");
    i0.ɵɵelementContainerEnd();
    i0.ɵɵtext(7, "\n          ");
} if (rf & 2) {
    const column_r7 = i0.ɵɵnextContext().$implicit;
    const ctx_r10 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngSwitch", ctx_r10.filterName(column_r7));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngSwitchCase", "textFilter");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngSwitchCase", "selectFilter");
} }
function AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "adapt-accordion-tab", 12);
    i0.ɵɵtext(1, "\n\n          ");
    i0.ɵɵtemplate(2, AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_container_2_Template, 4, 5, "ng-container", 13);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵtemplate(4, AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_ng_template_4_Template, 8, 3, "ng-template", null, 14, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(6, "\n\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const column_r7 = ctx.$implicit;
    const _r9 = i0.ɵɵreference(5);
    i0.ɵɵproperty("title", column_r7.header);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", column_r7.filterTemplate)("ngIfElse", _r9);
} }
function AdaptTableMergedFiltersComponent_div_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 9);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "adapt-accordion", 10);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵtemplate(4, AdaptTableMergedFiltersComponent_div_19_adapt_accordion_tab_4_Template, 7, 3, "adapt-accordion-tab", 11);
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("bordered", false);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r2.columns)("ngForTrackBy", ctx_r2.table.trackByForColumns);
} }
const _c1 = function () { return ["bottom-left", "bottom-right"]; };
export class AdaptTableMergedFiltersComponent {
    constructor(table, _adaptTableFiltersService) {
        this.table = table;
        this._adaptTableFiltersService = _adaptTableFiltersService;
    }
    getAppliedFiltersForCurrentColumns(columns) {
        const filters = this.table.filters;
        if (!filters) {
            return [];
        }
        return columns
            .filter(column => !!(filters[column.field] && isDefined(filters[column.field].value)))
            .map(column => {
            const filterValue = filters[column.field].value;
            return {
                header: column.header,
                value: isArray(filterValue) ? filterValue.join(', ') : filterValue,
                columnField: column.field
            };
        });
    }
    onRemoveFilterFormApplied(filter) {
        delete this.table.filters[filter.columnField];
        this.table._filter();
    }
    getDropdownButtonLabel(columns) {
        const filters = this.table.filters;
        if (!filters) {
            return this.texts.mergedFiltersTexts.buttonNoAppliedFilters;
        }
        let counter = 0;
        columns.forEach(column => {
            if (isDefined(filters[column.field])) {
                counter++;
            }
        });
        return counter > 0
            ? counter === 1
                ? formatString(this.texts.mergedFiltersTexts.buttonAppliedFilter, counter)
                : formatString(this.texts.mergedFiltersTexts.buttonAppliedFilters, counter)
            : this.texts.mergedFiltersTexts.buttonNoAppliedFilters;
    }
    filterName(column) {
        return this._adaptTableFiltersService.filterName(column);
    }
    isSingleSelect(column) {
        return this._adaptTableFiltersService.getSelectFilterParams(column).single;
    }
    setFilter(value, column, matchMode) {
        this._adaptTableFiltersService.setFilter(value, column, this.table, matchMode);
    }
    getFilterValue(column) {
        return this._adaptTableFiltersService.getFilterValue(column.field, this.table);
    }
    getFilterValueForSingleSelect(column) {
        const filterValue = this.getFilterValue(column);
        return filterValue ? filterValue[0] : null;
    }
    getSelectSettings(column) {
        const filterOptionsLength = this._getFilterOptionsLength(column);
        const showAdditionalSelectControls = filterOptionsLength > 20;
        return {
            enableFilter: showAdditionalSelectControls,
            selectAllButton: showAdditionalSelectControls,
            deselectAllButton: showAdditionalSelectControls
        };
    }
    getSelectOptions(column) {
        return this._adaptTableFiltersService.getSelectOptions(column);
    }
    getSelectTexts(column) {
        return this._adaptTableFiltersService.getSelectTexts(column, this.texts);
    }
    onSelectModelChange(value, column) {
        this._adaptTableFiltersService.onSelectModelChange(value, column, this.table);
    }
    trackByForSelectOptions(index, option) {
        return option.id || index;
    }
    trackByForAppliedFilters(index, filter) {
        return filter.columnField || index;
    }
    selectOptionFormatter(option) {
        return option.name;
    }
    _getFilterOptionsLength(column) {
        const filterParams = this._adaptTableFiltersService.getSelectFilterParams(column);
        return filterParams && filterParams.values && filterParams.values.length;
    }
}
AdaptTableMergedFiltersComponent.ɵfac = function AdaptTableMergedFiltersComponent_Factory(t) { return new (t || AdaptTableMergedFiltersComponent)(i0.ɵɵdirectiveInject(i1.AdaptTableComponent), i0.ɵɵdirectiveInject(i2.AdaptTableFiltersService)); };
AdaptTableMergedFiltersComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptTableMergedFiltersComponent, selectors: [["adapt-table-merged-filters"]], inputs: { columns: "columns", index: "index", texts: "texts" }, decls: 23, vars: 11, consts: [["adaptDropdown", "", 1, "adapt-table-filters", 3, "adaptRadarDisableEventSending", "appendToBody", "autoClose", "closeOnEscape", "placement"], ["filtersDropdown", "adaptDropdown"], ["role", "button", "type", "button", "adaptDropdownAnchor", "", 1, "dropdown-toggle", "btn", "btn-secondary", "table-merged-filters__button", 3, "click"], ["adaptDropdownMenu", "", 1, "dropdown-menu", "table-merged-filters__dropdown"], [1, "table-merged-filters__dropdown-label"], [1, "table-merged-filters__tags"], [3, "adaptRadarDisableEventSending", "type", "remove", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "table-merged-filters__dropdown-container", 4, "ngIf"], [3, "adaptRadarDisableEventSending", "type", "remove"], [1, "table-merged-filters__dropdown-container"], [3, "adaptRadarDisableEventSending", "bordered"], ["class", "advanced-filter__accordion-tab", 3, "title", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "advanced-filter__accordion-tab", 3, "title"], [4, "ngIf", "ngIfElse"], ["noFilterTamplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "ngSwitch"], [3, "adaptRadarDisableEventSending", "ngModel", "placeholder", "label", "initialAlign", "searchButton", "size", "ngModelChange", 4, "ngSwitchCase"], [4, "ngSwitchCase"], [3, "adaptRadarDisableEventSending", "ngModel", "placeholder", "label", "initialAlign", "searchButton", "size", "ngModelChange"], ["notSingle", ""], ["name", "singleSelectionTypeGroup", "class", "advanced-filter__radiobutton", 3, "adaptRadarDisableEventSending", "value", "label", "ngModel", "ngModelChange", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["name", "singleSelectionTypeGroup", 1, "advanced-filter__radiobutton", 3, "adaptRadarDisableEventSending", "value", "label", "ngModel", "ngModelChange"], [1, "advanced-filter__select-inline", 3, "inline", "options", "optionFormatter", "texts", "multiple", "settings", "value", "selectModelChange"]], template: function AdaptTableMergedFiltersComponent_Template(rf, ctx) { if (rf & 1) {
        const _r35 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 0, 1);
        i0.ɵɵtext(2, "\n\n  ");
        i0.ɵɵelementStart(3, "button", 2);
        i0.ɵɵlistener("click", function AdaptTableMergedFiltersComponent_Template_button_click_3_listener($event) { i0.ɵɵrestoreView(_r35); const _r0 = i0.ɵɵreference(1); return _r0.toggle($event); });
        i0.ɵɵtext(4);
        i0.ɵɵelementEnd();
        i0.ɵɵtext(5, "\n\n  ");
        i0.ɵɵelementStart(6, "div", 3);
        i0.ɵɵtext(7, "\n\n    ");
        i0.ɵɵelementStart(8, "div", 4);
        i0.ɵɵtext(9, "\n      ");
        i0.ɵɵelementStart(10, "label");
        i0.ɵɵtext(11);
        i0.ɵɵelementEnd();
        i0.ɵɵtext(12, "\n      ");
        i0.ɵɵelementStart(13, "div", 5);
        i0.ɵɵtext(14, "\n        ");
        i0.ɵɵtemplate(15, AdaptTableMergedFiltersComponent_adapt_tag_15_Template, 2, 4, "adapt-tag", 6);
        i0.ɵɵtext(16, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(17, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(18, "\n\n    ");
        i0.ɵɵtemplate(19, AdaptTableMergedFiltersComponent_div_19_Template, 7, 4, "div", 7);
        i0.ɵɵtext(20, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(21, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(22, "\n");
    } if (rf & 2) {
        const _r0 = i0.ɵɵreference(1);
        i0.ɵɵproperty("adaptRadarDisableEventSending", true)("appendToBody", true)("autoClose", false)("closeOnEscape", true)("placement", i0.ɵɵpureFunction0(10, _c1));
        i0.ɵɵadvance(4);
        i0.ɵɵtextInterpolate1("\n    ", ctx.getDropdownButtonLabel(ctx.columns), "\n  ");
        i0.ɵɵadvance(7);
        i0.ɵɵtextInterpolate(ctx.texts.mergedFiltersTexts.appliedFiltersLabel);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngForOf", ctx.getAppliedFiltersForCurrentColumns(ctx.columns))("ngForTrackBy", ctx.trackByForAppliedFilters);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", _r0 && _r0.isOpen());
    } }, directives: [i3.AdaptDropdownDirective, i3.AdaptDropdownAnchorDirective, i3.AdaptDropdownMenuDirective, i4.NgForOf, i4.NgIf, i3.AdaptTagComponent, i3.AdaptAccordionComponent, i3.AdaptAccordionTabComponent, i4.NgTemplateOutlet, i4.NgSwitch, i4.NgSwitchCase, i3.AdaptRxSearchComponent, i5.NgControlStatus, i5.NgModel, i3.AdaptRxRadiobuttonComponent, i6.AdaptSelectMigrationComponent], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptTableMergedFiltersComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-table-merged-filters',
                templateUrl: './adapt-table-merged-filters.html',
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: i1.AdaptTableComponent }, { type: i2.AdaptTableFiltersService }]; }, { columns: [{
            type: Input
        }], index: [{
            type: Input
        }], texts: [{
            type: Input
        }] }); })();
//# sourceMappingURL=adapt-table-merged-filters.component.js.map