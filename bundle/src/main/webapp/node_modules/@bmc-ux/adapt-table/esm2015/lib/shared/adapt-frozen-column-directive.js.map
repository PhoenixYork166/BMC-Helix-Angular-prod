{"version":3,"file":"adapt-frozen-column-directive.js","sourceRoot":"","sources":["../../../../../../libs/adapt-table/src/lib/shared/adapt-frozen-column-directive.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,UAAU,EACV,SAAS,EACT,KAAK,EAGL,SAAS,GACV,MAAM,eAAe,CAAC;AACvB,OAAO,EAAC,cAAc,EAAC,MAAM,mBAAmB,CAAC;;;AAMjD,MAAM,OAAO,0BAA0B;IAOrC,YAAoB,QAA0C,EAC1C,SAAoB,EACpB,IAAoB;QAFpB,aAAQ,GAAR,QAAQ,CAAkC;QAC1C,cAAS,GAAT,SAAS,CAAW;QACpB,SAAI,GAAJ,IAAI,CAAgB;QALhC,iBAAY,GAAW,gBAAgB,CAAC;QACxC,WAAM,GAAY,KAAK,CAAC;QAK9B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC;IAC1C,CAAC;IAED,WAAW,CAAC,OAAsB;QAChC,IAAI,OAAO,CAAC,WAAW,CAAC,YAAY,KAAK,OAAO,CAAC,WAAW,CAAC,aAAa,EAAE;YAC1E,MAAM,gBAAgB,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC;YAExD,IAAI,OAAO,CAAC,WAAW,CAAC,YAAY,EAAE;gBACpC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;gBACxE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,gBAAgB,EAAE,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;aAClI;iBAAM;gBACL,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC3E,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,gBAAgB,EAAE,MAAM,CAAC,CAAC;aAChF;SACF;IACH,CAAC;IAED,sBAAsB,CAAC,MAA4B;QACjD,IAAI,aAAa,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,sBAAsB,CAAC;QACnD,IAAI,OAAO,GAAG,CAAC,CAAC;QAEhB,OAAO,aAAa,EAAE;YACpB,OAAO,GAAG,OAAO,GAAG,aAAa,CAAC,qBAAqB,EAAE,CAAC,KAAK,CAAC;YAEhE,aAAa,GAAG,aAAa,CAAC,sBAAsB,CAAC;SACtD;QAED,OAAO,GAAG,OAAO,IAAI,CAAC;IACxB,CAAC;;oGAtCU,0BAA0B;6EAA1B,0BAA0B;uFAA1B,0BAA0B;cAHtC,SAAS;eAAC;gBACT,QAAQ,EAAE,eAAe;aAC1B;kHAGU,WAAW;kBAAnB,KAAK","sourcesContent":["import {\n  ElementRef,\n  Directive,\n  Input,\n  OnChanges,\n  SimpleChanges,\n  Renderer2,\n} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\n\n\n@Directive({\n  selector: '[adaptFrozen]',\n})\nexport class AdaptFrozenColumnDirective implements OnChanges {\n\n  @Input() adaptFrozen: boolean;\n\n  private _frozenClass: string = 'at-frozen-cell';\n  private _isRtl: boolean = false;\n\n  constructor(private _element: ElementRef<HTMLTableCellElement>,\n              private _renderer: Renderer2,\n              private _dir: Directionality,) {\n    this._isRtl = this._dir.value === 'rtl';\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.adaptFrozen.currentValue !== changes.adaptFrozen.previousValue) {\n      const paddingDirection = this._isRtl ? 'right' : 'left';\n\n      if (changes.adaptFrozen.currentValue) {\n        this._renderer.addClass(this._element.nativeElement, this._frozenClass);\n        this._renderer.setStyle(this._element.nativeElement, paddingDirection, this.getFrozenColumnPadding(this._element.nativeElement));\n      } else {\n        this._renderer.removeClass(this._element.nativeElement, this._frozenClass);\n        this._renderer.setStyle(this._element.nativeElement, paddingDirection, 'auto');\n      }\n    }\n  }\n\n  getFrozenColumnPadding(cellEl: HTMLTableCellElement): string {\n    let siblingColumn = cellEl?.previousElementSibling;\n    let padding = 0;\n\n    while (siblingColumn) {\n      padding = padding + siblingColumn.getBoundingClientRect().width;\n\n      siblingColumn = siblingColumn.previousElementSibling;\n    }\n\n    return `${padding}px`;\n  }\n}\n"]}