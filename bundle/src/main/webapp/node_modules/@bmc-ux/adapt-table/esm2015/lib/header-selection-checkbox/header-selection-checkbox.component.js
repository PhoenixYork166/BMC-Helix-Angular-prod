import { FocusMonitor } from '@angular/cdk/a11y';
import { ENTER, SPACE } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, NgZone, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { AdaptDeviceDetectionService, AdaptDropdownDirective, AdaptOverlayService, formatString, getEventKeyCode, SafeCdr, } from '@bmc-ux/adapt-angular';
import { isNil, isNumber } from 'lodash-es';
import { fromEvent, ReplaySubject, Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, take, takeUntil } from 'rxjs/operators';
import { AdaptTableComponent } from '../adapt-table.component';
import { AdaptTableHeaderCheckboxToggleSource, AdaptTableHeaderSelectionMode, CheckboxState, } from '../adapt-table.models';
import * as i0 from "@angular/core";
import * as i1 from "../adapt-table.component";
import * as i2 from "@angular/cdk/a11y";
import * as i3 from "@bmc-ux/adapt-angular";
import * as i4 from "@angular/forms";
import * as i5 from "@angular/common";
const _c0 = ["headerRowsSelectionDropdownRef"];
const _c1 = ["headerRowsSelectionDropdownAnchorRef"];
const _c2 = ["headerRowsSelectionDropdownMenu"];
function AdaptHeaderSelectionCheckboxComponent_ng_container_15_adapt_rx_checkbox_2_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-rx-checkbox", 10, 11);
    i0.ɵɵlistener("ngModelChange", function AdaptHeaderSelectionCheckboxComponent_ng_container_15_adapt_rx_checkbox_2_Template_adapt_rx_checkbox_ngModelChange_0_listener() { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(2); return ctx_r8.onSelectAllRowsOnPage(); });
    i0.ɵɵtext(2, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r7 = i0.ɵɵreference(1);
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("text-active", _r7 === ctx_r5.activeItem);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("item", ctx_r5.checkboxToggleSource.SelectOnPage)("label", ctx_r5.getSelectAllItemsOnPageHeaderLabel())("indeterminate", ctx_r5.isIndeterminateState())("ngModel", ctx_r5.isCheckedState());
} }
function AdaptHeaderSelectionCheckboxComponent_ng_container_15_adapt_rx_checkbox_4_Template(rf, ctx) { if (rf & 1) {
    const _r12 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-rx-checkbox", 10, 11);
    i0.ɵɵlistener("ngModelChange", function AdaptHeaderSelectionCheckboxComponent_ng_container_15_adapt_rx_checkbox_4_Template_adapt_rx_checkbox_ngModelChange_0_listener() { i0.ɵɵrestoreView(_r12); const ctx_r11 = i0.ɵɵnextContext(2); return ctx_r11.onSelectAllRowsInTable(); });
    i0.ɵɵtext(2, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r10 = i0.ɵɵreference(1);
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("text-active", _r10 === ctx_r6.activeItem);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("item", ctx_r6.checkboxToggleSource.SelectAll)("label", ctx_r6.getSelectAllItemsInTableHeaderLabel())("indeterminate", ctx_r6.isIndeterminateState())("ngModel", ctx_r6.isCheckedState());
} }
function AdaptHeaderSelectionCheckboxComponent_ng_container_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptHeaderSelectionCheckboxComponent_ng_container_15_adapt_rx_checkbox_2_Template, 3, 7, "adapt-rx-checkbox", 9);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵtemplate(4, AdaptHeaderSelectionCheckboxComponent_ng_container_15_adapt_rx_checkbox_4_Template, 3, 7, "adapt-rx-checkbox", 9);
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r3.isChunkSelectionAvailable());
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r3.isAllSelectionAvailable());
} }
function AdaptHeaderSelectionCheckboxComponent_adapt_rx_checkbox_17_Template(rf, ctx) { if (rf & 1) {
    const _r15 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-rx-checkbox", 10, 11);
    i0.ɵɵlistener("ngModelChange", function AdaptHeaderSelectionCheckboxComponent_adapt_rx_checkbox_17_Template_adapt_rx_checkbox_ngModelChange_0_listener() { i0.ɵɵrestoreView(_r15); const ctx_r14 = i0.ɵɵnextContext(); return ctx_r14.onDeselectAllRowsInTable(); });
    i0.ɵɵtext(2, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r13 = i0.ɵɵreference(1);
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("text-active", _r13 === ctx_r4.activeItem);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("item", ctx_r4.checkboxToggleSource.DeselectAll)("label", ctx_r4.getDeselectAllItemsHeaderLabel())("indeterminate", ctx_r4.isIndeterminateState())("ngModel", ctx_r4.canDeselectRows());
} }
export class AdaptHeaderSelectionCheckboxComponent {
    constructor(table, _focusMonitor, _ngZone, _cdr, _overlayService, _adaptDeviceDetectionService) {
        this.table = table;
        this._focusMonitor = _focusMonitor;
        this._ngZone = _ngZone;
        this._cdr = _cdr;
        this._overlayService = _overlayService;
        this._adaptDeviceDetectionService = _adaptDeviceDetectionService;
        this.headerCheckboxToggle = new EventEmitter();
        this._listKeyManagerDestroy = new Subject();
        this._destroyed$ = new ReplaySubject(1);
    }
    get totalRecords() {
        /**
         * When there is no totalRecords info available(means that for some reasons customer doesn't know how many records are in the table)
         * we assume that totalRecords are at least on one record more than loaded records length until customer can set correct totalRecords value.
         *
         * This allows correctly calculate visibility of items in selection menu
         */
        if (!this.table.isTotalRecordsInfoAvailable() && this.table.value) {
            return this.table.value.length + 1;
        }
        return this.table.totalRecords;
    }
    /**
     * If totalRecords was set as null we assume that all other selection related inputs(eg. selectedFilteredRowsCount)
     * was also set as null so can't be used in calculations.
     * But when totalRecords are equal to value length it means that we can use totalRecords in calculations but not selection related inputs(eg. selectedFilteredRowsCount)
     */
    get isAllSelectionInfoAvailable() {
        return this.table.lazy
            && this.table.isTotalRecordsInfoAvailable()
            && isNumber(this.table.disabledSelectedRowsCount)
            && isNumber(this.table.disabledNotSelectedRowsCount)
            && isNumber(this.table.disabledSelectedFilteredRowsCount)
            && isNumber(this.table.disabledNotSelectedFilteredRowsCount)
            && isNumber(this.table.selectedFilteredRowsCount)
            && isNumber(this.table.totalRecordsInGroup);
    }
    ngOnInit() {
        this.checkboxToggleSource = AdaptTableHeaderCheckboxToggleSource;
    }
    ngAfterViewInit() {
        this._ngZone.runOutsideAngular(() => {
            fromEvent(this.headerRowsSelectionDropdownAnchorRef.nativeElement, 'mouseover')
                .pipe(debounceTime(50), takeUntil(this._destroyed$))
                .subscribe((event) => {
                this.showHeaderRowsSelectionDD(event);
            });
            fromEvent(this.headerRowsSelectionDropdownMenu.nativeElement, 'mouseleave')
                .pipe(takeUntil(this._destroyed$))
                .subscribe(() => {
                this.hideHeaderRowsSelectionDD();
            });
        });
    }
    ngOnDestroy() {
        this._listKeyManagerDestroy.next();
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
    keyManagerStateChange(listKeyManager) {
        this._listKeyManager = listKeyManager;
        if (this._listKeyManager) {
            this._listKeyManager.change
                .pipe(takeUntil(this._listKeyManagerDestroy))
                .subscribe(() => {
                this._ngZone.onStable.asObservable()
                    .pipe(distinctUntilChanged(), takeUntil(this._destroyed$))
                    .subscribe(() => {
                    this.setActiveItem(this._listKeyManager.activeItem);
                    SafeCdr.markForCheck(this._cdr);
                });
            });
            this._listKeyManager.tabOut
                .pipe(takeUntil(this._listKeyManagerDestroy))
                .subscribe(() => {
                this.hideHeaderRowsSelectionDD();
            });
        }
        else {
            this._listKeyManagerDestroy.next();
            this.setActiveItem(null);
        }
    }
    onPopupAnimationDone(event) {
        if ((event === null || event === void 0 ? void 0 : event.eventInvokedFrom) === 'keyboard') {
            if (this.headerRowsSelectionDropdownRef.isOpen()) {
                this._ngZone.onStable.asObservable()
                    .pipe(take(1), takeUntil(this._destroyed$))
                    .subscribe(() => {
                    this._listKeyManager.setFirstItemActive();
                    this.setActiveItem(this._listKeyManager.activeItem);
                    SafeCdr.detectChanges(this._cdr);
                });
            }
            else {
                this._listKeyManager.setActiveItem(null);
                this.setActiveItem(null);
            }
        }
    }
    onHeaderRowsSelectionMenuOpen(event) {
        var _a;
        // Prevent default behaviour to not toggle header checkbox on mobile on tap(click) event
        if (this._adaptDeviceDetectionService.isMobile()) {
            event.preventDefault();
        }
        const keyCode = getEventKeyCode(event);
        if (keyCode === ENTER || keyCode === SPACE) {
            this.headerRowsSelectionDropdownRef.open(event);
        }
        if (this._listKeyManager) {
            this._listKeyManager.onKeydown(event);
            if (keyCode === ENTER || keyCode === SPACE && this.headerRowsSelectionDropdownRef.isOpen()) {
                switch ((_a = this._listKeyManager.activeItem) === null || _a === void 0 ? void 0 : _a.item) {
                    case AdaptTableHeaderCheckboxToggleSource.DeselectAll: {
                        this.onDeselectAllRowsInTable(true);
                        break;
                    }
                    case AdaptTableHeaderCheckboxToggleSource.SelectOnPage: {
                        this.onSelectAllRowsOnPage(true);
                        break;
                    }
                    case AdaptTableHeaderCheckboxToggleSource.SelectAll: {
                        this.onSelectAllRowsInTable(true);
                        break;
                    }
                }
            }
        }
    }
    onDeselectAllRowsInTable(selectFromKeyboard = false) {
        this._toggleRowSelection(false, this.table.getAllCurrentRows(), AdaptTableHeaderCheckboxToggleSource.DeselectAll, selectFromKeyboard);
        if (this.table.isMobile) {
            this.hideHeaderRowsSelectionDD();
        }
    }
    onSelectAllRowsOnPage(selectFromKeyboard = false) {
        this._toggleRowSelection(true, this.table.getCurrentPageDisplayingRowsItems(), AdaptTableHeaderCheckboxToggleSource.SelectOnPage, selectFromKeyboard);
        if (this.table.isMobile) {
            this.hideHeaderRowsSelectionDD();
        }
    }
    onSelectAllRowsInTable(selectFromKeyboard = false) {
        this._toggleRowSelection(true, this.table.getAllCurrentRows(), AdaptTableHeaderCheckboxToggleSource.SelectAll, selectFromKeyboard);
        if (this.table.isMobile) {
            this.hideHeaderRowsSelectionDD();
        }
    }
    showHeaderRowsSelectionDD(event) {
        if (!this.hasAllItemsDisabledForSelection()) {
            this._ngZone.run(() => {
                this.headerRowsSelectionDropdownRef.open(event);
                if (!this._overlayService.enableCDKOverlayControl) {
                    SafeCdr.markForCheck(this._cdr);
                }
            });
        }
    }
    hideHeaderRowsSelectionDD() {
        this._ngZone.run(() => {
            this.headerRowsSelectionDropdownRef.close();
        });
    }
    getSelectAllItemsOnPageHeaderLabel() {
        const isTableHasDisabledRecords = this._checkOnDisabledRecords();
        const isTableInFilteringState = this.table.hasFilter();
        if (this.table.lazy && this.table.enableInfiniteScrolling) {
            if (isTableInFilteringState && isTableHasDisabledRecords) {
                return this.texts.selectAllPossibleFilteredVisibleItemsHeaderLabel;
            }
            if (isTableInFilteringState && !isTableHasDisabledRecords) {
                return this.texts.selectAllFilteredVisibleItemsHeaderLabel;
            }
            if (!isTableInFilteringState && isTableHasDisabledRecords) {
                return this.texts.selectAllPossibleVisibleItemsHeaderLabel;
            }
            return this.texts.selectAllVisibleItemsHeaderLabel;
        }
        if (isTableInFilteringState && isTableHasDisabledRecords) {
            return this.texts.selectAllPossibleFilteredItemsOnPageHeaderLabel;
        }
        if (isTableInFilteringState && !isTableHasDisabledRecords) {
            return this.texts.selectAllFilteredItemsOnPageHeaderLabel;
        }
        if (!isTableInFilteringState && isTableHasDisabledRecords) {
            return this.texts.selectAllPossibleItemsOnPageHeaderLabel;
        }
        return this.texts.selectAllItemsOnPageHeaderLabel;
    }
    getSelectAllItemsInTableHeaderLabel() {
        const isTableHasDisabledRecords = this._checkOnDisabledRecords();
        const isTableInFilteringState = this.table.hasFilter();
        if (isTableInFilteringState && isTableHasDisabledRecords) {
            return this.texts.selectAllPossibleFilteredItemsInTableHeaderLabel;
        }
        if (!isTableInFilteringState && isTableHasDisabledRecords) {
            return this.texts.selectAllPossibleItemsInTableHeaderLabel;
        }
        if (isTableInFilteringState && !isTableHasDisabledRecords) {
            return this.texts.selectAllFilteredItemsInTableHeaderLabel;
        }
        return this.table.isTotalRecordsInfoAvailable()
            ? formatString(this.texts.selectAllItemsInTableHeaderLabel, this.table.totalRecords)
            : this.texts.selectAllItemsInTableHeaderLabelForUnknownTotalRecords;
    }
    getDeselectAllItemsHeaderLabel() {
        const isTableHasDisabledRecords = this._checkOnDisabledRecords();
        const isTableInFilteringState = this.table.hasFilter();
        if (isTableInFilteringState && isTableHasDisabledRecords) {
            return this.texts.deselectAllPossibleFilteredItemsInTableHeaderLabel;
        }
        if (!isTableInFilteringState && isTableHasDisabledRecords) {
            return this.texts.deselectAllPossibleItemsInTableHeaderLabel;
        }
        if (isTableInFilteringState && !isTableHasDisabledRecords) {
            return this.texts.deselectAllFilteredItemsInTableHeaderLabel;
        }
        return this.texts.deselectAllItemsInTableHeaderLabel;
    }
    isIndeterminateState() {
        if (this.table.hasAtLeastOneRowGroupedData()) {
            return this._getGroupSelectionState(this.table.getRowSelectionArray()) === CheckboxState.Indeterminate;
        }
        return this.isAtLeastOneRowSelected() && !this.isCheckedState();
    }
    isCheckedState() {
        if (this.table.hasAtLeastOneRowGroupedData()) {
            return this._getGroupSelectionState(this.table.getRowSelectionArray()) === CheckboxState.Selected;
        }
        const selectedRowsLength = this.table.getRowSelectionArray().length;
        if (selectedRowsLength === 0) {
            return false;
        }
        return this.table.isTotalRecordsInfoAvailable()
            ? selectedRowsLength === this.table.allTotalRecords
            : this._filterSelectedRows(this.table.getAllCurrentRows()).length === this.table.getAllCurrentRows().length + 1;
    }
    isAtLeastOneRowSelected() {
        return this.table.getRowSelectionArray().length > 0;
    }
    canDeselectRows() {
        if (this.isAllSelectionInfoAvailable) {
            return this.table.hasFilter()
                ? this.table.selectedFilteredRowsCount - this.table.disabledSelectedFilteredRowsCount > 0
                : this.table.getRowSelectionArray().length - this.table.disabledSelectedRowsCount > 0;
        }
        if (this.table.hasFilter()) {
            const selectedFilteredRows = this._filterSelectedRows(this.table.getAllCurrentRows());
            return selectedFilteredRows.length - this._getDisabledSelectedRows(selectedFilteredRows).length > 0;
        }
        return this._getDisabledSelectedRows(this.table.getAllCurrentRows()).length !== this.table.getRowSelectionArray().length;
    }
    showSelectionItems() {
        var _a;
        const selectionArray = this.table.getRowSelectionArray();
        const disabledNotSelectedRowsCount = (_a = this.table.disabledNotSelectedRowsCount) !== null && _a !== void 0 ? _a : this._getDisabledNotSelectedRows(this.table.getAllCurrentRows()).length;
        if (this.table.hasAtLeastOneRowGroupedData()) {
            const allRows = this.table.getRowsItems(this.table.getAllCurrentRows());
            const totalRecordsInGroup = this.isAllSelectionInfoAvailable ? this.table.totalRecordsInGroup : allRows.length;
            if (this.table.hasFilter()) {
                return this.isAllSelectionInfoAvailable
                    ? this.table.totalRecordsInGroup !== this.table.selectedFilteredRowsCount + this.table.disabledNotSelectedFilteredRowsCount
                    : this._filterSelectedRows(allRows).length + disabledNotSelectedRowsCount !== allRows.length;
            }
            return totalRecordsInGroup !== selectionArray.length + disabledNotSelectedRowsCount;
        }
        if (this.table.hasFilter()) {
            return this.isAllSelectionInfoAvailable
                ? this.totalRecords !== this.table.selectedFilteredRowsCount + this.table.disabledNotSelectedFilteredRowsCount
                : this._filterSelectedRows(this.table.getAllCurrentRows()).length + disabledNotSelectedRowsCount !== this.table.getAllCurrentRows().length;
        }
        // Because we can't differentiate is user select all rows on page or in table without totalRecords info
        // we hide both selection items if all loaded rows was selected
        return this.table.isTotalRecordsInfoAvailable()
            ? this.table.allTotalRecords !== selectionArray.length + disabledNotSelectedRowsCount
            : this._filterSelectedRows(this.table.getAllCurrentRows()).length + disabledNotSelectedRowsCount !== this.table.getAllCurrentRows().length;
    }
    isChunkSelectionAvailable() {
        const allSelectableRowsOnPageLength = this._getAllSelectableRowsOnPage().length;
        switch (this.table.headerSelectionMode) {
            case AdaptTableHeaderSelectionMode.All: {
                return false;
            }
            case AdaptTableHeaderSelectionMode.Chunk: {
                return this._getCurrentPageSelectedRows().length !== allSelectableRowsOnPageLength;
            }
            case AdaptTableHeaderSelectionMode.Both: {
                return this.table.rows < this.totalRecords
                    && this._getCurrentPageSelectedRows().length !== allSelectableRowsOnPageLength
                    && (this.table.enableInfiniteScrolling
                        ? this.table.getAllCurrentRows().filter(row => !isNil(row)).length !== this.totalRecords
                        : allSelectableRowsOnPageLength !== this.totalRecords);
            }
        }
    }
    isAllSelectionAvailable() {
        return this.table.headerSelectionMode === AdaptTableHeaderSelectionMode.All
            || this.table.headerSelectionMode === AdaptTableHeaderSelectionMode.Both;
    }
    hasAllItemsDisabledForSelection() {
        return this.table.disableRowSelection
            || (this.isAllSelectionInfoAvailable
                ? this.totalRecords - (this.table.hasFilter() ? this.table.disabledNotSelectedFilteredRowsCount + this.table.disabledSelectedFilteredRowsCount : this.table.disabledNotSelectedRowsCount + this.table.disabledSelectedRowsCount) === 0
                : !this._getAllSelectableRowsInTable().length);
    }
    setActiveItem(keyManagerItem) {
        this.activeItem = keyManagerItem;
    }
    _getAllSelectableRowsInTable() {
        return this.table.getSelectableRowsItems(this.table.getAllCurrentRows()).filter(row => !isNil(row));
    }
    _getAllSelectableRowsOnPage() {
        return this.table.getSelectableRowsItems(this.table.getCurrentPageDisplayingRowsItems()).filter(row => !isNil(row));
    }
    _getCurrentPageSelectedRows() {
        return this._filterSelectedRows(this._getAllSelectableRowsOnPage());
    }
    _getDisabledSelectedRows(rows) {
        const result = [];
        this.table.goRecursivelyByItemsInGroups(rows, (row) => {
            if (this.table.isRowSelectionDisabled(row) && this.table.isRowSelected(row)) {
                result.push(row);
            }
        });
        return result;
    }
    _getDisabledNotSelectedRows(rows) {
        const result = [];
        this.table.goRecursivelyByItemsInGroups(rows, (row) => {
            // Remove items that disabled but already selected
            if (this.table.isRowSelectionDisabled(row) && !this.table.isRowSelected(row)) {
                result.push(row);
            }
        });
        return result;
    }
    _checkOnDisabledRecords() {
        return this.isAllSelectionInfoAvailable
            ? this.table.disabledNotSelectedRowsCount > 0 || this.table.disabledSelectedRowsCount > 0
            : this.table.getAllCurrentRows().some(this.table.isRowSelectionDisabled.bind(this.table));
    }
    _toggleRowSelection(checked, rowsToToggle, eventSource, selectFromKeyboard) {
        this.table.onToogleGroupedRowsSelection(checked, rowsToToggle);
        this.table.handleHeaderCheckboxToggle({
            originalEvent: window.event,
            checked,
            eventSource,
            filters: this.table.filters,
            globalFilter: this.table.filters && this.table.filters.global ? this.table.filters.global.value : null,
        });
        if (selectFromKeyboard) {
            this._ngZone.onStable.asObservable()
                .pipe(take(1), takeUntil(this._destroyed$))
                .subscribe(() => {
                this._listKeyManager.setFirstItemActive();
            });
        }
    }
    _filterSelectedRows(rows) {
        // Check selected rows by "dataKey" because selected row can have custom properties.
        // https://github.bmc.com/bmc-ux/adapt-angular/issues/7497
        return rows.filter(row => this.table.isRowSelected(row));
    }
    _getGroupSelectionState(selection) {
        let dataItemsCount = 0;
        if (selection && !selection.length) {
            return CheckboxState.Unselected;
        }
        if (this.table.lazy && this.table.paginator) {
            let selectedItemsCountInCurrentPage = 0;
            this.table.goRecursivelyByItemsInAllGroups(row => {
                dataItemsCount++;
                if (this.table.isRowSelected(row)) {
                    selectedItemsCountInCurrentPage++;
                }
            });
            if (dataItemsCount === 0 || selectedItemsCountInCurrentPage === 0) {
                return CheckboxState.Unselected;
            }
            return dataItemsCount === selectedItemsCountInCurrentPage ? CheckboxState.Selected : CheckboxState.Indeterminate;
        }
        this.table.goRecursivelyByItemsInAllGroups(() => {
            dataItemsCount++;
        });
        if (dataItemsCount === 0) {
            return CheckboxState.Unselected;
        }
        selection = selection || this.table.getRowSelectionArray();
        return selection.length === dataItemsCount ? CheckboxState.Selected : CheckboxState.Indeterminate;
    }
}
AdaptHeaderSelectionCheckboxComponent.ɵfac = function AdaptHeaderSelectionCheckboxComponent_Factory(t) { return new (t || AdaptHeaderSelectionCheckboxComponent)(i0.ɵɵdirectiveInject(i1.AdaptTableComponent), i0.ɵɵdirectiveInject(i2.FocusMonitor), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.AdaptOverlayService), i0.ɵɵdirectiveInject(i3.AdaptDeviceDetectionService)); };
AdaptHeaderSelectionCheckboxComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptHeaderSelectionCheckboxComponent, selectors: [["adapt-header-selection-checkbox"]], viewQuery: function AdaptHeaderSelectionCheckboxComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
        i0.ɵɵviewQuery(_c1, 5);
        i0.ɵɵviewQuery(_c2, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerRowsSelectionDropdownRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerRowsSelectionDropdownAnchorRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.headerRowsSelectionDropdownMenu = _t.first);
    } }, inputs: { texts: "texts" }, outputs: { headerCheckboxToggle: "headerCheckboxToggle" }, decls: 22, vars: 11, consts: [["adaptDropdown", "", 1, "at-header-selection", 3, "adaptRadarDisableEventSending", "autoClose", "appendToBody", "customClass", "popupAnimationDone"], ["headerRowsSelectionDropdownRef", ""], ["adaptDropdownAnchor", "", "tabIndex", "-1"], ["headerRowsSelectionDropdownAnchorRef", ""], [1, "checkbox-inline", "at-group-selection-checkbox", 3, "ngModel", "adaptRadarDisableEventSending", "indeterminate", "disabled", "ariaLabel", "keydown", "click"], ["adaptListKeyManager", "", "adaptDropdownMenu", "", 1, "dropdown-menu", "at-header-selection__dropdown-menu", 3, "keyManagerStateChange"], ["headerRowsSelectionDropdownMenu", ""], [1, "at-header-selection__dropdown-list"], [4, "ngIf"], ["class", "at-header-selection__dropdown-checkbox", "tabIndex", "-1", "adaptListKeyManagerItem", "", 3, "adaptRadarDisableEventSending", "item", "text-active", "label", "indeterminate", "ngModel", "ngModelChange", 4, "ngIf"], ["tabIndex", "-1", "adaptListKeyManagerItem", "", 1, "at-header-selection__dropdown-checkbox", 3, "adaptRadarDisableEventSending", "item", "label", "indeterminate", "ngModel", "ngModelChange"], ["adaptListKeyManagerItem", "adaptListKeyManagerItem"]], template: function AdaptHeaderSelectionCheckboxComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0, 1);
        i0.ɵɵlistener("popupAnimationDone", function AdaptHeaderSelectionCheckboxComponent_Template_div_popupAnimationDone_0_listener($event) { return ctx.onPopupAnimationDone($event); });
        i0.ɵɵtext(2, "\n  ");
        i0.ɵɵelementStart(3, "div", 2, 3);
        i0.ɵɵtext(5, "\n    ");
        i0.ɵɵelementStart(6, "adapt-rx-checkbox", 4);
        i0.ɵɵlistener("keydown", function AdaptHeaderSelectionCheckboxComponent_Template_adapt_rx_checkbox_keydown_6_listener($event) { return ctx.onHeaderRowsSelectionMenuOpen($event); })("click", function AdaptHeaderSelectionCheckboxComponent_Template_adapt_rx_checkbox_click_6_listener($event) { return $event.preventDefault(); });
        i0.ɵɵtext(7, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(8, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(9, "\n  ");
        i0.ɵɵelementStart(10, "div", 5, 6);
        i0.ɵɵlistener("keyManagerStateChange", function AdaptHeaderSelectionCheckboxComponent_Template_div_keyManagerStateChange_10_listener($event) { return ctx.keyManagerStateChange($event); });
        i0.ɵɵtext(12, "\n    ");
        i0.ɵɵelementStart(13, "div", 7);
        i0.ɵɵtext(14, "\n      ");
        i0.ɵɵtemplate(15, AdaptHeaderSelectionCheckboxComponent_ng_container_15_Template, 6, 2, "ng-container", 8);
        i0.ɵɵtext(16, "\n      ");
        i0.ɵɵtemplate(17, AdaptHeaderSelectionCheckboxComponent_adapt_rx_checkbox_17_Template, 3, 7, "adapt-rx-checkbox", 9);
        i0.ɵɵtext(18, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(19, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(20, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(21, "\n");
    } if (rf & 2) {
        i0.ɵɵproperty("adaptRadarDisableEventSending", true)("autoClose", "outside")("appendToBody", true)("customClass", ctx.table.isMobile ? "at-header-selection__dropdown at-header-selection__dropdown_mobile" : "at-header-selection__dropdown");
        i0.ɵɵadvance(6);
        i0.ɵɵproperty("ngModel", ctx.isCheckedState())("adaptRadarDisableEventSending", true)("indeterminate", ctx.isIndeterminateState())("disabled", ctx.hasAllItemsDisabledForSelection())("ariaLabel", ctx.texts.headerSelectRowsArialLabel);
        i0.ɵɵadvance(9);
        i0.ɵɵproperty("ngIf", ctx.showSelectionItems());
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.canDeselectRows());
    } }, directives: [i3.AdaptDropdownDirective, i3.AdaptDropdownAnchorDirective, i3.AdaptRxCheckboxComponent, i4.NgControlStatus, i4.NgModel, i3.AdaptListKeyManagerDirective, i3.AdaptDropdownMenuDirective, i5.NgIf, i3.AdaptListKeyManagerItemDirective], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptHeaderSelectionCheckboxComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-header-selection-checkbox',
                templateUrl: './header-selection-checkbox.html',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.Default
            }]
    }], function () { return [{ type: i1.AdaptTableComponent }, { type: i2.FocusMonitor }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i3.AdaptOverlayService }, { type: i3.AdaptDeviceDetectionService }]; }, { texts: [{
            type: Input
        }], headerCheckboxToggle: [{
            type: Output
        }], headerRowsSelectionDropdownRef: [{
            type: ViewChild,
            args: ['headerRowsSelectionDropdownRef']
        }], headerRowsSelectionDropdownAnchorRef: [{
            type: ViewChild,
            args: ['headerRowsSelectionDropdownAnchorRef']
        }], headerRowsSelectionDropdownMenu: [{
            type: ViewChild,
            args: ['headerRowsSelectionDropdownMenu']
        }] }); })();
//# sourceMappingURL=header-selection-checkbox.component.js.map