{"version":3,"file":"adapt-table-state.directive.js","sourceRoot":"","sources":["../../../../../../libs/adapt-table/src/lib/shared/adapt-table-state.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output} from '@angular/core';\nimport {ResizeService} from '@bmc-ux/adapt-angular';\nimport {isEmpty} from 'lodash-es';\nimport {AdaptTableComponent} from '../adapt-table.component';\nimport {\n  AdaptTableLocalStorageState,\n  AdaptTableMultiSortMeta,\n  AdaptTableSessionStorageState,\n  AdaptTableState,\n  ColumnConfigState,\n  RenderingColumnType,\n  SortMode,\n  StorageType\n} from '../adapt-table.models';\nimport {AdaptTableStorageService} from './adapt-table-storage.service';\nimport {ReplaySubject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {SortMeta} from 'primeng/api';\n\n\n@Directive({\n  selector: 'adapt-table[adaptTableState]'\n})\nexport class AdaptTableStateDirective implements OnInit, OnDestroy {\n\n  // TODO: Refactor this if possible\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input('adaptTableState') stateKey: string;\n  @Output() readonly stateRestore: EventEmitter<AdaptTableState> = new EventEmitter<AdaptTableState>();\n\n  private _destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n  constructor(\n    private _element: ElementRef,\n    private _table: AdaptTableComponent,\n    private _adaptTableStorageService: AdaptTableStorageService,\n    private _resizeService: ResizeService\n  ) {\n  }\n\n  ngOnInit(): void {\n    this._subscribeOnTableEvents();\n    this._restoreTableState();\n  }\n\n  ngOnDestroy(): void {\n    this._destroyed$.next(true);\n    this._destroyed$.complete();\n  }\n\n  private _subscribeOnSort(): void {\n    this._table.onSort\n      .pipe(takeUntil(this._destroyed$))\n      .subscribe(data => {\n        if (this._table.isSingleSortMode) {\n          this._adaptTableStorageService.updateData(this.stateKey, {singleSortMeta: data as SortMeta}, StorageType.Local);\n        } else {\n          this._adaptTableStorageService.updateData(this.stateKey, {multiSortMeta: (data as AdaptTableMultiSortMeta).multisortmeta}, StorageType.Local);\n        }\n      });\n  }\n\n  private _subscribeOnColumnReorder(): void {\n    this._table.onColReorder\n      .pipe(takeUntil(this._destroyed$))\n      .subscribe(data => {\n        const columnOrder = data.columns.map(column => column.field);\n\n        this._adaptTableStorageService.updateData(this.stateKey, {columnOrder: columnOrder}, StorageType.Local);\n      });\n  }\n\n  private _subscribeOnColumnsResize(): void {\n    this._table.onColResize\n      .pipe(takeUntil(this._destroyed$))\n      .subscribe(() => {\n        const widthMap: ColumnConfigState[] = this._table.dataHeaderCells.map(cell => {\n          return {\n            fields: cell.data.renderingColumn.columnsConfigs.map(col => col.field),\n            width: cell.element.nativeElement.offsetWidth\n          };\n        });\n\n        const mergedColumns = this._table.mergeColumns && this._table.dataHeaderCells\n          .filter(cell => cell.data.renderingColumn.type === RenderingColumnType.Merged);\n\n        // Need to save merged columns in separate property to correctly restore columns and merged columns\n        this._adaptTableStorageService.updateData(\n          this.stateKey,\n          {[mergedColumns && mergedColumns.length ? 'columnMergedWidths' : 'columnWidths']: widthMap},\n          StorageType.Local);\n      });\n  }\n\n  private _subscribeOnFilter(): void {\n    this._table.onFilter\n      .pipe(takeUntil(this._destroyed$))\n      .subscribe(data => {\n        this._adaptTableStorageService.updateData(this.stateKey, {filters: data.filters}, StorageType.Session);\n      });\n  }\n\n  private _subscribeOnColumnVisibilityChange(): void {\n    this._table.columnsVisibilityChange\n      .pipe(takeUntil(this._destroyed$))\n      .subscribe(() => {\n        const columnsVisibility = this._table.columns.map(col => ({fields: [col.field], hidden: !this._table.isColumnVisible(col)}));\n\n        this._adaptTableStorageService.updateData(this.stateKey, {columnsVisibility}, StorageType.Session);\n      });\n  }\n\n  private _restoreSingleSorting(state: AdaptTableLocalStorageState): void {\n    const sortingColumn = this._table.columns.find(column => column.field === state.singleSortMeta.field);\n\n    // Apply only for columns that are sortable and not hidden\n    if (this._table.isSortableColumn(sortingColumn) && this._table.isColumnVisible(sortingColumn)) {\n      this._table.sortField = state.singleSortMeta.field;\n      this._table.sortOrder = state.singleSortMeta.order;\n    }\n  }\n\n  private _restoreMultipleSorting(state: AdaptTableLocalStorageState): void {\n    // Apply only for columns that are sortable and not hidden\n    const multiSortMetaToRestore = state.multiSortMeta.filter(sortMeta => {\n      return this._table.columns.some(column => this._table.isSortableColumn(column)\n        && this._table.isColumnVisible(column)\n        && column.field === sortMeta.field);\n    });\n\n    this._table.updateMultiSortMeta(multiSortMetaToRestore);\n  }\n\n  private _restoreColumnsOrder(state: AdaptTableLocalStorageState): void {\n    // TODO: Changing of reference doesn't trigger columns reordering\n    this._table.columns.sort((a, b) => {\n      return state.columnOrder.indexOf(a.field) - state.columnOrder.indexOf(b.field);\n    });\n  }\n\n  private _restoreColumnsWidth(state: AdaptTableLocalStorageState): void {\n    const columns = [...this._table.columns];\n    const columnsForRendering = this._table.getColumnsForRendering(this._table.columns);\n    const isMergedColumnsPresent = columnsForRendering.some(column => column.type === RenderingColumnType.Merged);\n    const columnWidthState = isMergedColumnsPresent && state.columnMergedWidths ? state.columnMergedWidths : state.columnWidths;\n\n    columns.forEach(column => {\n      const columnWithSavedWidth = columnWidthState && columnWidthState.find(columnWidth => columnWidth.fields[0] === column.field);\n\n      column.width = columnWithSavedWidth && columnWithSavedWidth.width.toString() + 'px';\n    });\n\n    this._table.columns = columns;\n  }\n\n  private _restoreFiltering(state: AdaptTableSessionStorageState): void {\n    const restoredFilters = {};\n\n    for (const columnName in state.filters) {\n      if (Object.prototype.hasOwnProperty.call(state.filters, columnName)) {\n        this._table.columns.forEach(column => {\n          if (this._table.isFilterableColumn(column) && column.field === columnName) {\n            restoredFilters[columnName] = state.filters[columnName];\n          }\n        });\n      }\n    }\n\n    // TODO: Check do we need restoringFilter property!!!\n    this._table.restoringFilter = true;\n    this._table.filters = restoredFilters;\n\n    // Need to call _filter() method manually after changing \"filters\" property\n    // because filtering inside primeng table called only on \"value\" property change\n    this._table._filter();\n  }\n\n  private _restoreColumnsVisibility(state: AdaptTableSessionStorageState): void {\n    this._table.columns.forEach(column => {\n      state.columnsVisibility.forEach(visibilityState => {\n        if (column.field === visibilityState.fields[0]) {\n          column.hidden = visibilityState.hidden;\n        }\n      });\n    });\n  }\n\n  private _subscribeOnTableEvents(): void {\n    this._subscribeOnSort();\n    this._subscribeOnColumnReorder();\n    this._subscribeOnColumnsResize();\n    this._subscribeOnFilter();\n    this._subscribeOnColumnVisibilityChange();\n  }\n\n  private _restoreTableState(): void {\n    const localState = this._adaptTableStorageService.getData(this.stateKey, StorageType.Local);\n    const sessionState = this._adaptTableStorageService.getData(this.stateKey, StorageType.Session);\n\n    if (localState) {\n\n      if (this._table.sortMode === SortMode.Single && localState.singleSortMeta) {\n        this._restoreSingleSorting(localState);\n      }\n\n      if (this._table.sortMode === SortMode.Multiple && localState.multiSortMeta) {\n        this._restoreMultipleSorting(localState);\n      }\n\n      if (this._table.reorderableColumns && localState.columnOrder) {\n        this._restoreColumnsOrder(localState);\n      }\n\n      if (this._table.resizableColumns && (localState.columnWidths || localState.columnMergedWidths)) {\n        this._restoreColumnsWidth(localState);\n      }\n\n    }\n\n    if (sessionState) {\n\n      if (this._table.filterable && sessionState.filters) {\n        this._restoreFiltering(sessionState);\n      }\n\n      if (sessionState.columnsVisibility) {\n        this._restoreColumnsVisibility(sessionState);\n      }\n\n    }\n\n    const tableState = {...localState, ...sessionState};\n\n    this.stateRestore.emit(isEmpty(tableState) ? null : tableState);\n  }\n}\n"]}