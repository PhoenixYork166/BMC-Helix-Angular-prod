import { ElementRef, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { AdaptRadarAngularService, AdaptRadarAngularGenericDirective } from '../common/radar/adapt-radar';
import { MenuInnerService } from './menu.service';
import { AdaptDeviceDetectionService } from '../common/device-detection.service';
import { MenuRadarMetadata, MenuTextsModel } from './models/menu-config';
import { CascadeItem, MenuItem, MenuItemFilteringConfig } from './models/menu-item';
import { MenuGlobalService } from './menu-global.service';
import { AdaptTranslateService } from '../common/i18n/index';
import { KeyValueObject } from '../common/common.models';
import * as i0 from "@angular/core";
export declare class AdaptMenuComponent extends AdaptRadarAngularGenericDirective implements OnInit, OnDestroy {
    private _menuInnerService;
    private _menuGlobalService;
    private deviceDetection;
    private _renderer;
    private ts;
    protected _adaptRadarService: AdaptRadarAngularService;
    /**
     * Menu item to build nested cascade
     * @docs-default
     */
    cascadeItem: MenuItem;
    /**
     * @docs-default
     */
    filteringConfig: MenuItemFilteringConfig;
    /**
     * When specified, previously opened submenu will be automatically closed after new submenu opened
     * @docs-default true
     */
    closePrevious: boolean;
    /**
     * @docs-default
     */
    analyticsMetadata: MenuRadarMetadata;
    /**
     * Set color theme for root menu item. Supported values: 'dark', 'grey', 'white'
     * @docs-default dark
     */
    set headerTheme(v: string);
    get headerTheme(): string;
    /**
     * Set color theme for submenu items. Supported values: 'dark', 'grey', 'white'
     * @docs-default dark
     */
    set bodyTheme(v: string);
    get bodyTheme(): string;
    /**
     * Text constant setup for mobile view
     * @docs-default {cancelBtn: 'Cancel', backBtn: 'Back'}
     */
    mobileViewTexts: MenuTextsModel;
    /**
     * When specified, the submenu items will be attached to the body
     * @docs-default false
     */
    appendToBody: boolean;
    /**
     * @docs-default false
     */
    connectMenus: boolean;
    /**
     * Control possibility to set menu item as active. Can be useful when you don't need to connect menu with your routing
     * @since 10.15.0
     * @docs-default true
     */
    makeItemActive: boolean;
    defaultHostClass: boolean;
    get mobileHostClass(): boolean;
    id: string;
    private _headerTheme;
    private _bodyTheme;
    private _defaultTexts;
    private _defaultMobileTexts;
    get isMobile(): boolean;
    get cascade(): CascadeItem;
    constructor(_menuInnerService: MenuInnerService, _menuGlobalService: MenuGlobalService, deviceDetection: AdaptDeviceDetectionService, _renderer: Renderer2, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    ngOnDestroy(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    selectMenuItem(): void;
    getCascadeLength(): number;
    handleMenuRootItemClick(item: MenuItem): void;
    handleMenuLinkClick(item: MenuItem): void;
    handleMenuRouteClick(item: MenuItem): void;
    handleMenuActionClick(event: Event, item: MenuItem): void;
    generateMenuItemTestID(item: MenuItem): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptMenuComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptMenuComponent, "adapt-menu", never, { "cascadeItem": "cascadeItem"; "filteringConfig": "filteringConfig"; "closePrevious": "closePrevious"; "analyticsMetadata": "analyticsMetadata"; "headerTheme": "headerTheme"; "bodyTheme": "bodyTheme"; "mobileViewTexts": "mobileViewTexts"; "appendToBody": "appendToBody"; "connectMenus": "connectMenus"; "makeItemActive": "makeItemActive"; }, {}, never, never>;
}
