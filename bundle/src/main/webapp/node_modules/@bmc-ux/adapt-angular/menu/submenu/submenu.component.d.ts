import { AfterViewInit, ApplicationRef, ComponentFactoryResolver, ComponentRef, ChangeDetectorRef, ElementRef, Injector, NgZone, OnDestroy, OnInit, QueryList, Renderer2, ViewContainerRef } from '@angular/core';
import { Directionality } from '@angular/cdk/bidi';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import { AdaptFocusMonitorDirective } from '../../common/focus-monitor.directive';
import { AdaptFocusMonitorService } from '../../common/focus-monitor.service';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { AdaptTreeStructureFilteringService } from '../../common/tree-structure-filter';
import { LayerService } from '../../common/layer-service';
import { CascadeItem, MenuItem, MenuItemFilteringConfig } from '../models/menu-item';
import { MenuGlobalService } from '../menu-global.service';
import { MenuInnerService } from '../menu.service';
import { FocusOrigin } from '@angular/cdk/a11y';
import * as i0 from "@angular/core";
export declare class AdaptSubmenuComponent implements OnInit, AfterViewInit {
    private _menuInnerService;
    private _menuGlobalService;
    private _elemRef;
    private _renderer;
    private _ngZone;
    private deviceDetection;
    private _focusHandle;
    private _dir;
    private _cd;
    private _adaptTreeStructureFilteringService;
    private _adaptRadarService;
    nodes: MenuItem[];
    firstInit: boolean;
    anchor: AdaptMenuAnchorDirective;
    level: number;
    theme: string;
    isMobile: boolean;
    isRtl: boolean;
    subMenuHeader: string;
    filteringConfig?: MenuItemFilteringConfig;
    filteredNodes: MenuItem[];
    filterQuery: string;
    resultsFound: boolean;
    onFilteringDebounce: Function;
    eventType: FocusOrigin;
    makeItemActive: boolean;
    analyticsMetadata: {
        parentComponentName: AdaptRadarAngularCustomEventName;
    };
    id: string;
    defaultHostClass: boolean;
    get darkThemeClass(): boolean;
    get whiteThemeClass(): boolean;
    get greyThemeClass(): boolean;
    get customThemeClass(): boolean;
    get isAnimationDisabled(): boolean;
    menuAnimation: boolean;
    focusMonitoring: QueryList<AdaptFocusMonitorDirective>;
    filterResults: ElementRef;
    private _shiftTop;
    private _placementRootMenu;
    private _placementSubmenu;
    constructor(_menuInnerService: MenuInnerService, _menuGlobalService: MenuGlobalService, _elemRef: ElementRef, _renderer: Renderer2, _ngZone: NgZone, deviceDetection: AdaptDeviceDetectionService, _focusHandle: AdaptFocusMonitorService, _dir: Directionality, _cd: ChangeDetectorRef, _adaptTreeStructureFilteringService: AdaptTreeStructureFilteringService, _adaptRadarService: AdaptRadarAngularService);
    ngOnInit(): void;
    trackByFn(index: number, item: any): any;
    ngAfterViewInit(): void;
    handleKeyDown(event: KeyboardEvent): void;
    handleSubMenuLinkClick(item: MenuItem): void;
    onActionClick($event: MouseEvent, item: MenuItem): void;
    selectMenuItem(item: MenuItem): void;
    getClass(): string;
    onFiltering(): void;
    onClearFilter(): void;
    isEventFrom(event: any): boolean;
    closeMenu(): void;
    private _applyPosition;
    private _getSiblingsCount;
    private _getHiddenSiblingsCount;
    generateSubmenuItemTestID(item: MenuItem): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptSubmenuComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptSubmenuComponent, "adapt-submenu", never, {}, {}, never, never>;
}
export declare class AdaptMenuAnchorDirective {
    private menu;
    _elemRef: ElementRef;
    defaultHostClass: boolean;
    constructor(menu: any, _elemRef: ElementRef);
    mouseEnter(e: Event): void;
    click(e: MouseEvent): void;
    handleKeyDown(event: KeyboardEvent): void;
    toggleOpen(e: Event): void;
    isEventFrom(event: any): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptMenuAnchorDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptMenuAnchorDirective, "[adaptMenuAnchor]", never, {}, {}, never>;
}
export declare class AdaptMenuDirective implements OnInit, OnDestroy {
    private _componentFactoryResolver;
    private _deviceDetector;
    private _el;
    private _injector;
    private _renderer;
    private _layerService;
    private _menuInnerService;
    private _menuGlobalService;
    private _dir;
    private _applicationRef;
    node: MenuItem;
    theme: string;
    subMenuHeader: string;
    filteringConfig: MenuItemFilteringConfig;
    closePrevious: boolean;
    makeItemActive: boolean;
    analyticsMetadata: {
        parentComponentName: AdaptRadarAngularCustomEventName;
    };
    defaultHostClass: boolean;
    firstInit: boolean;
    cascadeId: string;
    level: number;
    isMobile: boolean;
    isRtl: boolean;
    menuWindowRef: ComponentRef<AdaptSubmenuComponent>;
    eventType: FocusOrigin;
    contentPlacement: ViewContainerRef;
    private _anchor;
    get cascade(): CascadeItem;
    private _popupWindowService;
    constructor(_componentFactoryResolver: ComponentFactoryResolver, _deviceDetector: AdaptDeviceDetectionService, _el: ElementRef, _injector: Injector, _renderer: Renderer2, _layerService: LayerService, _menuInnerService: MenuInnerService, _menuGlobalService: MenuGlobalService, _dir: Directionality, _applicationRef: ApplicationRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    getCascadeLength(): number;
    extendCascade(): void;
    private _toggleRootCascadeItem;
    private _toggleNestedCascadeItem;
    private _createCascadeItem;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptMenuDirective, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptMenuDirective, "adapt-menu-renderer, [adaptMenu]", ["adaptMenu"], { "node": "node"; "theme": "theme"; "subMenuHeader": "subMenuHeader"; "filteringConfig": "filteringConfig"; "closePrevious": "closePrevious"; "makeItemActive": "makeItemActive"; "analyticsMetadata": "analyticsMetadata"; }, {}, ["_anchor"], ["[adaptMenuAnchor]"]>;
}
