import { AfterContentInit, AfterViewInit, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges, TemplateRef } from '@angular/core';
import { Directionality } from '@angular/cdk/bidi';
import { Subscription } from 'rxjs';
import { Tree } from 'primeng/tree';
import { PrimeNGConfig, TreeDragDropService, TreeNode } from 'primeng/api';
import { AdaptCustomAction } from '../custom-actions/index';
import { AdaptRadarAngularService } from '../common/radar/adapt-radar';
import { AdaptTranslateService } from '../common/i18n/index';
import { KeyValueObject } from '../common/common.models';
import { AdaptDragDropEventType, AdaptTreeNode, TreeTexts, TreeTrim, TreeWrap } from './tree.model';
import { AdaptTreeNodeTemplateDirective } from './tree-node-template.directive';
import * as i0 from "@angular/core";
export declare class AdaptTreeComponent extends Tree implements OnInit, OnChanges, AfterContentInit, AfterViewInit, OnDestroy {
    config: PrimeNGConfig;
    private ts;
    private _adaptRadarService;
    _uniqueId: string;
    treeWrapEnum: typeof TreeWrap;
    treeTrimEnum: typeof TreeTrim;
    /**
     * An array of tree nodes
     * @docs-default
     */
    value: TreeNode[] | AdaptTreeNode[];
    /**
     * Turn on filtering functionality
     * @docs-default false
     */
    filter: boolean;
    /**
     * Configurable text for tree
     * @docs-default {filterPlaceholder: 'Filter', filterBtnClearText: 'Clear', filterNotFound: 'No matches found'}
     */
    texts: TreeTexts;
    /**
     * @docs-default
     */
    filterBtnClearText: string;
    /**
     * @docs-default
     */
    filterPlaceholder: string;
    /**
     * String for test id data attribute. For test purposes
     * @docs-default adapt-tree-${++nextUniqueId}
     */
    testID: string;
    /**
     * Toggle lazy load mode. If set to true it enables loader anchor at the bottom of items list.
     * Under the hood IntersectionObserver is used. So please use polyfill if you are supporting old browsers(eg. IE).
     * <a href="https://github.com/w3c/IntersectionObserver/tree/main/polyfill" target="_blank">Link to polyfill</a>
     * @since v10.7.0
     * @docs-default false
     */
    lazy: boolean;
    /**
     * Flag that toggle lazy loader visibility
     * @since v10.7.0
     * @docs-default false
     */
    lazyLoading: boolean;
    /**
     * Label text trim variant. Possible values: Default: text not trimming; Trim: text trimming by container width with ellipsis
     * @docs-default TreeTrim.Default
     * @since v10.15.0
     */
    trim: TreeTrim;
    /**
     * Label text wrap variant. Possible values: Default: no wrap text; Wrap: text wrap by words; WrapAll: force text wrap even text has no spaces
     * @docs-default TreeWrap.Default
     * @since v10.15.0
     */
    wrap: TreeWrap;
    /**
     * Enables 'select all' button. For the correct work the "node.key" property for each node is required
     * @docs-default false
     * @since v12.13.0
     */
    selectAllButton: boolean;
    /**
     * Enables 'deselect all' button. For the correct work the "node.key" property for each node is required
     * @docs-default false
     * @since v12.13.0
     */
    deselectAllButton: boolean;
    /**
     * Height of the scrollable viewport. Can be css value like 200px, 20rem of 'flex'.
     * 'Flex' value can be useful in cases when viewport should adjust itself according to the parent's height instead of a fixed viewport height.
     * In case of "lazy" true "treeScrollHeight" input has default value "flex"
     * @docs-default
     */
    set treeScrollHeight(value: string | 'flex');
    get treeScrollHeight(): string | 'flex';
    adaptRadarDisableEventSending: boolean;
    /**
     * Scope of the draggable nodes to match a draggableScope.
     * @docs-default
     * @since v12.14.0
     */
    draggableScope: string;
    /**
     * Scope of the draggable nodes to match a droppableScope.
     * @docs-default
     * @since v12.14.0
     */
    droppableScope: string;
    /**
     * Whether the nodes are draggable.
     * @docs-default
     * @since v12.14.0
     */
    draggableNodes: boolean;
    /**
     * Whether the nodes are droppable.
     * @docs-default
     * @since v12.14.0
     */
    droppableNodes: boolean;
    /**
     * When enabled, drop can be accepted or rejected based on condition defined at onNodeDrop.
     * @docs-default
     * @since v12.14.0
     */
    validateDrop: boolean;
    /**
     * Callback to invoke when a node is dropped.
     * @docs-default
     * @since v12.14.0
     */
    readonly onNodeDrop: EventEmitter<AdaptDragDropEventType>;
    nodeTouched: boolean;
    dragNodeTree: Tree;
    dragNodeIndex: number;
    dragNodeScope: string | string[];
    dragHover: boolean;
    dragStartSubscription: Subscription;
    dragStopSubscription: Subscription;
    level: number;
    /**
     * An event triggers when lazy load anchor become visible after scrolling list to the bottom
     * @since v10.7.0
     */
    readonly lazyLoad: EventEmitter<void>;
    treeSearch: ElementRef<Element>;
    treeContainer: ElementRef<HTMLElement>;
    treeNodeComponents: QueryList<any>;
    isRtl: boolean;
    dragNode: TreeNode | AdaptTreeNode;
    dragNodeSubNodes: TreeNode[] | AdaptTreeNode[];
    filteredNodes: TreeNode[] | AdaptTreeNode[];
    filterQuery: string;
    focusNode: Element;
    filterDebounce: Function;
    adaptTemplates: QueryList<AdaptTreeNodeTemplateDirective>;
    private _flattenNodes;
    private _flattenFilteredNodes;
    private _defaultTexts;
    private _filteredTo;
    private _filteredToText;
    private _checkAllFilterText;
    private _checkAllText;
    private _uncheckAllFilterText;
    private _uncheckAllText;
    private _templates;
    private _scrollHeight;
    private _elementIntersectObserver;
    constructor(el: ElementRef, dragDropService: TreeDragDropService, dir: Directionality, config: PrimeNGConfig, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    updateIcons(droppedInto?: AdaptTreeNode): void;
    ngOnDestroy(): void;
    get treeFilterStatus(): string;
    get customActions(): AdaptCustomAction[];
    get customActionsVisible(): boolean;
    isCheckAllVisible(): boolean;
    isUnCheckAllVisible(): boolean;
    selectAllOptions(): void;
    deselectAllOptions(): void;
    filterWrapper(newFilterValue: string): void;
    setDefaultTexts(translation: KeyValueObject): void;
    onNodeClick(event: Event, node: TreeNode | AdaptTreeNode): void;
    onNodeRightClick(event: MouseEvent, node: TreeNode | AdaptTreeNode): void;
    findIndexInSelection(node: TreeNode | AdaptTreeNode): number;
    propagateUp(node: TreeNode | AdaptTreeNode, select: boolean): void;
    propagateDown(node: TreeNode | AdaptTreeNode, select: boolean): void;
    isSelected(node: TreeNode | AdaptTreeNode): boolean;
    getTemplateForNode(node: TreeNode | AdaptTreeNode): TemplateRef<any>;
    allowDrop(dragNode: AdaptTreeNode, dropNode: AdaptTreeNode, dragNodeScope: string | string[]): boolean;
    onClear(): void;
    onLazyLoad(): void;
    trackByNode(index: number, item: AdaptTreeNode): string;
    expandAll(): void;
    collapseAll(): void;
    onDragOver(event: DragEvent): void;
    onDrop(event: DragEvent): void;
    processTreeDrop(dragNode: TreeNode, dragNodeIndex: number): void;
    onDragEnter(): void;
    onDragLeave(event: DragEvent): void;
    isValidDragScope(dragScope: string | string[]): boolean;
    private _expandRecursive;
    private _checkIndeterminateStateRecursive;
    private _getFlattenTree;
    private _flattenRecursive;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptTreeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptTreeComponent, "adapt-tree", never, { "value": "value"; "filter": "filter"; "texts": "texts"; "filterBtnClearText": "filterBtnClearText"; "filterPlaceholder": "filterPlaceholder"; "testID": "testID"; "lazy": "lazy"; "lazyLoading": "lazyLoading"; "trim": "trim"; "wrap": "wrap"; "selectAllButton": "selectAllButton"; "deselectAllButton": "deselectAllButton"; "treeScrollHeight": "treeScrollHeight"; "adaptRadarDisableEventSending": "adaptRadarDisableEventSending"; "draggableScope": "draggableScope"; "droppableScope": "droppableScope"; "draggableNodes": "draggableNodes"; "droppableNodes": "droppableNodes"; "validateDrop": "validateDrop"; }, { "onNodeDrop": "onNodeDrop"; "lazyLoad": "lazyLoad"; }, ["adaptTemplates"], never>;
}
