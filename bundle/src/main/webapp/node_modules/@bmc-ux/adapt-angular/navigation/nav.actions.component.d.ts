import { ElementRef, AfterViewInit, EventEmitter, OnInit, AfterContentInit, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';
import { AdaptRadarAngularService } from '../common/radar/adapt-radar';
import { AdaptNavigationSubMenuItem, AdaptSwitcherModel, NavigationAction, NavigationActionType, NavigationSubMenuItem } from './navigation.config';
import { AdaptTranslateService } from '../common/i18n/index';
import { AdaptDropdownDirective } from '../dropdown/index';
import { KeyValueObject } from '../common/common.models';
import { RxSearchTextsModel } from '../rx/rx-search/index';
import { AdaptDeviceDetectionService } from '../common/device-detection.service';
import * as i0 from "@angular/core";
export declare class AdaptNavActionsComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy {
    private el;
    private ts;
    private _adaptRadarService;
    private _deviceDetector;
    actions: NavigationAction[];
    kebabMode: boolean;
    kebabView: any;
    texts: AdaptSwitcherModel;
    kebabDropdown: AdaptDropdownDirective;
    switcherDropdown: AdaptDropdownDirective;
    isDesktop: boolean;
    clientWidth: number;
    filterValue: string;
    filteredItems: AdaptNavigationSubMenuItem[];
    defaultTexts: {
        switcher: {
            filter?: RxSearchTextsModel;
            notFoundText?: string;
        };
    };
    onFilteringDebounce: Function;
    private _destroyed$;
    constructor(el: ElementRef, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService, _deviceDetector: AdaptDeviceDetectionService);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * gets clientWidth, used by navigation
     */
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    getClientWidth(): number;
    /**
     * Check content type
     */
    isTemplate(content: any): boolean;
    onFiltering(value: string, index: number): void;
    closeAllDropdowns(): void;
    handlePopupOpenChange(isOpened: boolean, act: NavigationAction): void;
    generateActionItemTestID(item: NavigationAction): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptNavActionsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptNavActionsComponent, "adapt-nav-actions", never, { "actions": "actions"; "kebabMode": "kebabMode"; "kebabView": "kebabView"; "texts": "texts"; "getClientWidth": "getClientWidth"; "closeAllDropdowns": "closeAllDropdowns"; }, {}, never, never>;
}
export declare class AdaptNavActionsItemComponent {
    item: NavigationAction;
    getTarget(item: NavigationAction): string;
    generateActionItemTestID(item: NavigationAction): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptNavActionsItemComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptNavActionsItemComponent, "adapt-nav-action-item", never, { "item": "item"; }, {}, never, never>;
}
export declare class AdaptNavActionsSubitemComponent implements AfterContentInit {
    private _adaptRadarService;
    item: NavigationSubMenuItem;
    customClass: string;
    actionType: NavigationActionType;
    readonly emitCloseDropdowns: EventEmitter<string>;
    cssClass: string;
    constructor(_adaptRadarService: AdaptRadarAngularService);
    generateActionSubItemTestID(item: NavigationSubMenuItem): string;
    ngAfterContentInit(): void;
    getTarget(item: any): string;
    handleLinkClick(): void;
    handleRouteClick(): void;
    handleActionClick(event: Event): void;
    closeDropdowns(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptNavActionsSubitemComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptNavActionsSubitemComponent, "adapt-nav-action-subitem", never, { "item": "item"; "customClass": "customClass"; "actionType": "actionType"; }, { "emitCloseDropdowns": "emitCloseDropdowns"; }, never, never>;
}
