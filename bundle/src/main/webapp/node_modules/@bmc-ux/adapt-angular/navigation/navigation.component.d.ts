import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, QueryList, Renderer2, SimpleChanges, TemplateRef } from '@angular/core';
import { AdaptRadarAngularService, AdaptRadarAngularGenericDirective } from '../common/radar/adapt-radar';
import { AdaptDockedPanelService, DockedPanel } from '../docked-panel/index';
import { AdaptDropdownDirective } from '../dropdown/index';
import { AdaptProfileComponent } from '../profile/profile.component';
import { AdaptTranslateService } from '../common/i18n/index';
import { AlertAnimatedConfig, AlertCloseEvent } from '../alert-animated/index';
import { MenuGlobalService } from '../menu/menu-global.service';
import { MenuRadarMetadata, MenuItem } from '../menu/index';
import { ProfileModel } from '../profile/index';
import { AdaptDeviceDetectionService } from '../common/device-detection.service';
import { KeyValueObject } from '../common/common.models';
import { ResizeService } from '../common/resize/resize.service';
import { NavigationAction, NavigationMetadataTextsModel } from './navigation.config';
import { AdaptNavActionsComponent } from './nav.actions.component';
import { AdaptNavigationService } from './navigation.service';
import * as i0 from "@angular/core";
export declare class AdaptNavigationComponent extends AdaptRadarAngularGenericDirective implements OnInit, AfterContentInit, AfterViewInit, OnChanges, OnDestroy {
    private el;
    private _resizeService;
    private deviceDetection;
    private _navService;
    private renderer;
    private zone;
    private _menuGlobalService;
    private _changeDetectorRef;
    protected _adaptRadarService: AdaptRadarAngularService;
    alerts: AlertAnimatedConfig[];
    loadingRun: boolean;
    loadingMessage: string;
    floating: boolean;
    bizarreZone: boolean;
    customProfilePresent: boolean;
    iphoneCSSclass: string;
    textColor: string;
    margin: string;
    filtering: any;
    /**
     * DockedPanel service
     */
    hamburgerService: AdaptDockedPanelService;
    /**
     * DockedPanel config
     */
    hamburgerMenuConfig: DockedPanel;
    /**
     * DockedPanel open indicator
     */
    hamburgerMenuOpen: boolean;
    /**
     * copy of menu model, to convert into the tree
     */
    menuModel: any;
    /**
     * current active id of the Menu
     */
    currentActiveId: string;
    /**
     * hamburger mode - is collapsed mode
     */
    hamburgerMode: boolean;
    kebabMode: boolean;
    defaultTexts: NavigationMetadataTextsModel;
    /**
     * references to ngDropdownMenu
     */
    allDropdownsDirectives: QueryList<AdaptDropdownDirective>;
    /**
     * reference to menu element
     */
    menuEl: ElementRef;
    /**
     * reference to logo container element
     */
    logoEl: ElementRef;
    hamburgerBtn: ElementRef;
    hamburgerLogo: ElementRef;
    alertsSection: ElementRef;
    /**
     * reference to actions element
     */
    actionsEl: AdaptNavActionsComponent;
    /**
     * reference to profile element
     */
    profileEl: AdaptProfileComponent;
    /**
     * reference to hamburgerContent element
     */
    hamburgerContent: ElementRef;
    /**
     * reference to hamburger menu template
     */
    hamburgerMenuTemplate: TemplateRef<null>;
    /**
     * reference to loader
     */
    loaderSection: ElementRef<HTMLDivElement>;
    /**
     * reference to alerts
     */
    floatSection: ElementRef<HTMLDivElement>;
    /**
     * reference to floatWrapper
     */
    floatWrapper: ElementRef<HTMLDivElement>;
    navElShadow: ElementRef<HTMLElement>;
    navElContentShadow: ElementRef<HTMLElement>;
    profileElShadow: ElementRef<HTMLElement>;
    actionsElShadow: ElementRef<HTMLElement>;
    menuElShadow: ElementRef<HTMLElement>;
    hamburgerBtnElShadow: ElementRef<HTMLElement>;
    logoElShadow: ElementRef<HTMLElement>;
    /**
     * Input which defines menu items
     */
    set menu(value: MenuItem[]);
    get menu(): MenuItem[];
    /**
     * Input which defines metadata
     */
    metadata: NavigationMetadataTextsModel;
    config: any;
    kebabView: any;
    /**
     * minimal gap between menu element and actions/profile
     */
    gapWidth: number;
    container: boolean;
    actions: NavigationAction[];
    profile: ProfileModel;
    customProfile: TemplateRef<any>;
    appSwitcherEnabled: boolean;
    appSwitcherMetaData: NavigationAction;
    set theme(v: string);
    get theme(): string;
    set themeClass(v: string);
    get themeClass(): string;
    readonly alertClosed: EventEmitter<AlertCloseEvent>;
    private _menu;
    private _themeClass;
    private _theme;
    private _destroyed$;
    private _removeDocumentScrollListener;
    private _menuTestIdIndex;
    constructor(dps: AdaptDockedPanelService, el: ElementRef, _resizeService: ResizeService, deviceDetection: AdaptDeviceDetectionService, _navService: AdaptNavigationService, renderer: Renderer2, zone: NgZone, _menuGlobalService: MenuGlobalService, _changeDetectorRef: ChangeDetectorRef, _adaptRadarService: AdaptRadarAngularService, ts: AdaptTranslateService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    alertsHeightChanged(height: number): void;
    setMargin(): void;
    /**
     * Recursive. Makes a Tree from the Menu object
     * parent - parent Node
     */
    addParent(subArray: MenuItem[], parent: MenuItem): void;
    /**
     * Recursive. Search Menu tree for the Node with given Id
     */
    searchTree(element: any, matchingId: any): null | any;
    /**
     * add resize listener to global nav
     */
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     * in this hook we are saving width of menu element to determine later if it fits in header or not
     */
    ngAfterViewInit(): void;
    /**
     * remove resize listener
     */
    ngOnDestroy(): void;
    /**
     * check hamburger mode
     */
    checkForHamburger(): void;
    showSubmenu(id: string): void;
    setFocusToAnchor(el: HTMLDivElement): void;
    /**
     * Close all submenus and opens current
     */
    toggleSubmenu(event: any): void;
    /**
     * Traverses all opened submenus and closes them
     */
    closeAllSubmenu(): void;
    /**
     * clears the filter
     */
    clearFilter(searchInputElement: HTMLElement): void;
    handleMenuLinkSelection(item: MenuItem): void;
    handleMenuRouteSelection(item: MenuItem, isAction?: boolean, closeHamburger?: boolean): void;
    handleMenuActionSelection(event: any, item: MenuItem, invokeSelectMenuItem?: boolean, isAction?: boolean, closeHamburger?: boolean): void;
    /**
     * Set active state to the Menu item and all parent Node in the Tree
     */
    selectMenuItem(id: any, isAction?: boolean): void;
    /**
     * open menu
     */
    openHamburger(): void;
    /**
     * closes menu
     */
    closeHamburger(): void;
    getTarget(item: any): string;
    getAnalyticsMetadata(): MenuRadarMetadata;
    trackByFnMenu(index: number, item: MenuItem): string;
    trackByFnActions(index: number, item: NavigationAction): NavigationAction;
    private _extendProps;
    /**
     * Checks whether provided url() data type is valid and image can be loaded.
     * Otherwise, replace with the default bmc logo
     */
    private _verifyLogo;
    /**
     * Checks alerts position according to the content scroll
     */
    private _checkFloating;
    private _loaderSubscriptionHandler;
    private _alertSubscriptionHandler;
    private _getSiblingsCount;
    private _getHiddenSiblingsCount;
    generateMenuItemTestID(item: MenuItem): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptNavigationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptNavigationComponent, "adapt-navigation", never, { "menu": "menu"; "metadata": "metadata"; "config": "config"; "kebabView": "kebabView"; "gapWidth": "gapWidth"; "container": "container"; "actions": "actions"; "profile": "profile"; "customProfile": "customProfile"; "appSwitcherEnabled": "appSwitcherEnabled"; "appSwitcherMetaData": "appSwitcherMetaData"; "theme": "theme"; "checkForHamburger": "checkForHamburger"; "selectMenuItem": "selectMenuItem"; "closeHamburger": "closeHamburger"; }, { "alertClosed": "alertClosed"; }, never, never>;
}
