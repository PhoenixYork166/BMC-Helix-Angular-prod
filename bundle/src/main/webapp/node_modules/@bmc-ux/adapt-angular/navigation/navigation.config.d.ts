import { TemplateRef } from '@angular/core';
import { AdaptDropdownMobileView } from '../dropdown/dropdown.model';
import { TooltipInputValue } from '../tooltip/tooltip.directive';
import { RxSearchTextsModel } from '../rx/rx-search/index';
import * as i0 from "@angular/core";
export interface NavigationMetadataTextsModel {
    /**
     * Text for 'skip to content' href anchor
     */
    skipHref?: string;
    /**
     * Text for 'skip to content' button
     */
    skipText?: string;
    /**
     * Text for hamburger menu button. Screen reader only
     */
    menuText?: string;
    /**
     * Text for back button in mobile mode
     */
    backBtn?: string;
    /**
     * Hides the logo in mobile view
     */
    hideMobileLogo?: boolean;
    /**
     * Link to company's website, will open new tab
     */
    link?: string;
    /**
     * Angular router link, might be used to put Home page
     */
    route?: string;
    /**
     * Action that will be called with $event on click
     */
    action?: any;
    /**
     * Product name
     */
    productName?: string;
    /**
     * aria-label for logo image. Empty by default
     * @since v10.8.0
     */
    ariaLabelForLogo?: string;
    /**
     * Name of the company (for alt tag)
     */
    companyName?: string;
    companyLogoUrl?: string;
    companyLogoUrlInverted?: string;
    /**
     * CSS class for logo. Default is BMC logo. Also available - 'logo-helix'
     */
    logoClass?: string;
    switcher?: AdaptSwitcherModel;
}
export interface NavigationSubMenuItem {
    name?: string;
    className?: string;
    listClassName?: string;
    route?: string;
    link?: string;
    icon?: string;
    id?: number;
    count?: number;
    hide?: boolean;
    active?: boolean;
    disabled?: boolean;
    separated?: boolean;
    action?: (e: Event | {
        isOpened: boolean;
    }) => void;
    testID?: string;
}
export declare type NavigationActionType = 'submenu' | 'switcher';
export interface NavigationAction {
    name?: string;
    title?: string;
    link?: string;
    route?: string;
    action?: (e: Event | {
        isOpened: boolean;
    }) => void;
    icon?: string;
    count?: number;
    className?: string;
    dropdownConfig?: AdaptDropdownMobileView;
    subMenu?: NavigationSubMenuItem[];
    hide?: boolean;
    target?: string;
    header?: string;
    popover?: TemplateRef<any> | string;
    tooltip?: TooltipInputValue;
    switcher?: {
        allItems: {
            header?: string;
            items: AdaptNavigationSubMenuItem[];
        };
        recentItems: {
            header?: string;
            items: AdaptNavigationSubMenuItem[];
        };
    };
    testID?: string;
    id?: number;
}
export declare class AdaptSwitcherModel {
    /**
     * Texts for search in application switcher
     */
    filter?: RxSearchTextsModel;
    /**
     * Application switcher, not found text for filter
     */
    notFoundText?: string;
}
export declare class AdaptNavigationMenuItem {
    name: string;
    link: string;
    target?: string;
    header?: string;
    filtering: {
        title: string;
        enabled: boolean;
    };
    subMenu: AdaptNavigationSubMenu;
}
export declare class AdaptNavigationSubMenu {
    subMenu: AdaptNavigationSubMenuItem[];
}
export declare class AdaptNavigationSubMenuItem {
    name: string;
    link?: string;
    target?: string;
    className?: string;
    disabled?: boolean;
    active?: boolean;
    separated?: boolean;
    items?: AdaptNavigationSubMenuItem[];
    action?: (e: Event | {
        isOpened: boolean;
    }) => void;
}
export declare class AdaptProfileConfig {
    userName: string;
    desc?: string;
    image: string;
    view?: string;
    link: string;
    target?: string;
    header: string;
    typeLong: boolean;
    menu: AdaptNavigationSubMenuItem[];
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptProfileConfig, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AdaptProfileConfig>;
}
export declare class AdaptActionsConfig {
    items: AdaptActionItem[];
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptActionsConfig, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AdaptActionsConfig>;
}
export declare class AdaptActionItem {
    name: string;
    link: string;
    target?: string;
    count: number;
    className?: string;
    tooltip: string;
    subMenu: AdaptNavigationSubMenu;
}
