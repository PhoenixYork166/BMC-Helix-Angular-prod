import { ComponentFactoryResolver, ElementRef, EventEmitter, OnInit, ViewContainerRef } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { DismissReasons } from '../common/common.enums';
import { AdaptTranslateService } from '../common/i18n/index';
import { AlertAnimatedConfig, AlertCloseEvent } from '../alert-animated/index';
import { AdaptModalConfig } from './modal.config';
import { ActiveModalRef, ModalConfig, ModalDialog } from './modal.model';
import { AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
/**
 * The abstract class for represent basics modal functional
 */
export declare abstract class ModalDirective extends AdaptRadarAngularGenericDirective implements OnInit {
    private _elRef;
    private _componentFactoryResolver;
    private _activeModalRef;
    private _rootActiveModalRef;
    ts: AdaptTranslateService;
    modalClassInstance: boolean;
    alerts: AlertAnimatedConfig[];
    contentInstanceRef: unknown;
    id: string;
    config: ModalConfig | ModalDialog;
    configService: AdaptModalConfig;
    readonly onClose: EventEmitter<any>;
    readonly onDismiss: EventEmitter<any>;
    readonly onCloseAnimationEnd: EventEmitter<void>;
    readonly alertClosed: EventEmitter<AlertCloseEvent>;
    reason: typeof DismissReasons;
    protected context: ActiveModalRef;
    closeText: string;
    private _beforeDismiss;
    protected constructor(_elRef: ElementRef, _componentFactoryResolver: ComponentFactoryResolver, _activeModalRef: ActiveModalRef, _rootActiveModalRef: ActiveModalRef, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService);
    escClickHandler: ($event: KeyboardEvent) => boolean;
    ngOnInit(): void;
    updateConfig(config: ModalConfig): void;
    openAlert(alert: AlertAnimatedConfig): void;
    get title(): string;
    get showHeader(): boolean;
    /**
     * Close modal with the result
     */
    close(result: any): void;
    /**
     * Dismiss modal with the reason
     */
    dismiss(reason: any): void;
    /**
     * Emit onCloseAnimationEnd event on modal animation end
     */
    modalCloseAnimationEnd(event: AnimationEvent): void;
    /**
     * Method which returns ViewContainerRef of the content placement container in concrete component template
     */
    protected abstract getContentPlacementRef(): ViewContainerRef;
    static ɵfac: i0.ɵɵFactoryDeclaration<ModalDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ModalDirective, never, never, { "id": "id"; "config": "config"; "configService": "configService"; }, { "onClose": "onClose"; "onDismiss": "onDismiss"; "onCloseAnimationEnd": "onCloseAnimationEnd"; "alertClosed": "alertClosed"; }, never>;
}
