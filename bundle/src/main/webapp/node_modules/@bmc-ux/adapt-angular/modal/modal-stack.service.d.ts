import { ApplicationRef, ComponentFactoryResolver, ComponentRef, Injector, OnDestroy } from '@angular/core';
import { ScrollManageService } from '../common/scroll-manage.service';
import { LayerService } from '../common/layer-service';
import { AdaptOverlayService } from '../common/overlay/index';
import { AdaptModalComponent } from './modal.component';
import { AdaptDialogComponent } from './dialog.component';
import { AdaptModalConfig } from './modal.config';
import { ModalConfig, ModalDeferred, ModalDialog } from './modal.model';
import { OverModalConfig } from './over-modal';
import * as i0 from "@angular/core";
/**
 * The service for using modal/dialogs
 *
 * open(config) – Opens modal window. Returns Promise that is resolved when a modal is closed and rejected when a modal is dismissed.
 *
 */
export declare class AdaptModalStackService implements OnDestroy {
    private _componentFactoryResolver;
    private _appRef;
    private _scrollService;
    private _mConfigService;
    private _layerService;
    private _overlayService;
    /**
     * The wrapper to include modals/dialogs
     */
    private _wrapper;
    /**
     * An object for manage wrapper's scroll.
     */
    private _scrollManager;
    /**
     * Array with opened modals
     */
    private _openedModals;
    private _activeModal;
    private _popstateSubscription;
    get openedModals(): Map<string, ComponentRef<AdaptDialogComponent | AdaptModalComponent>>;
    get activeModal(): ComponentRef<AdaptDialogComponent | AdaptModalComponent>;
    constructor(_componentFactoryResolver: ComponentFactoryResolver, _appRef: ApplicationRef, _scrollService: ScrollManageService, _mConfigService: AdaptModalConfig, _layerService: LayerService, _overlayService: AdaptOverlayService);
    ngOnDestroy(): void;
    /**
     * Open modal/dialog
     * @returns ModalDeferred - The Promise object with additional methods: resolve() and reject().
     * Resolved when a modal is closed and rejected when a modal is dismissed.
     */
    open(config: ModalConfig | ModalDialog, configInjector: Injector): ModalDeferred;
    updateConfig(config: ModalConfig, modalComponent: ComponentRef<AdaptDialogComponent | AdaptModalComponent>): void;
    updateOverModalConfig(config: OverModalConfig, modalComponent: ComponentRef<AdaptDialogComponent | AdaptModalComponent>, isOverModal: boolean): void;
    closeAllModals(): void;
    /**
     * Close modal/dialog
     */
    private _close;
    private _updateConfig;
    private _openOverlay;
    private _closeOverlay;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptModalStackService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AdaptModalStackService>;
}
