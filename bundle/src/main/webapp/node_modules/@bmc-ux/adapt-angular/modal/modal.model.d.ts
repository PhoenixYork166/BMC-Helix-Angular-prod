import { OverModal } from './over-modal';
import { EventEmitter } from '@angular/core';
import { ColorVariantType } from '../common/common.models';
import { AlertAnimatedConfig, AlertCloseEvent } from '../alert-animated/index';
import { PopupDeferred } from '../common/popup-deferred';
import * as i0 from "@angular/core";
export declare type ModalSize = '' | 'sm' | 'lg';
export interface ModalConfig {
    /**
     * Content can be provided as a string, TemplateRef or a component type.
     * In case component type is passed as content, you can inject ActiveModalRef to access the context.
     */
    content?: any;
    /**
     * Additional passed data to the modal/dialog
     */
    data?: any;
    /**
     * Callback on modal/dialog dismiss. If returns false, dismiss action will be refused.
     */
    beforeDismiss?: (reason: any) => boolean;
    /**
     * Switch Modal to Dialog
     */
    isDialog?: boolean;
    /**
     * Dialog type (not allowed for modals)
     */
    type?: ColorVariantType | 'default';
    /**
     * Modal/dialog size
     */
    size?: ModalSize;
    /**
     * Modal/dialog title
     */
    title?: string;
    /**
     * Allow footer content left align
     */
    footerAlignLeft?: boolean;
    /**
     * Flag to hide/show backdrop ('true' by default for dialogs)
     */
    hideBackdrop?: boolean;
    /**
     * Flag to enable/disable close on ESC button ('true' by default for dialogs)
     */
    blockKeyboard?: boolean;
    customClass?: string;
    /**
     * Show header constantly even if the title hasn't been passed
     */
    showEmptyHeader?: boolean;
    /**
     * Used to create data-testid attribute that can be used for testing purpose
     */
    testID?: string;
    /**
     * Close all dropdowns/popovers while modal opened
     */
    closeAllOpenedItems?: boolean;
}
/**
 * Modal config interface
 */
export interface ModalDialog extends ModalConfig {
    content: any;
}
/**
 * Wrapper for Promise
 * @description Need to support resolve() and reject() methods on Promise instance.
 */
export declare class ModalDeferred extends PopupDeferred {
}
/**
 * A reference to an active (currently opened) modal/dialog.
 * Instances of this class can be injected into components passed as modal content.
 */
export declare class ActiveModalRef {
    /**
     * EventEmitter fires events on alert closed
     * @since v10.17.0
     */
    alertClosed: EventEmitter<AlertCloseEvent>;
    /**
     * Can be used to close a modal, passing an optional result
     */
    close(result?: any): void;
    /**
     * Can be used to dismiss a modal, passing an optional reason
     */
    dismiss(reason?: any): void;
    /**
     * Can be used to open an overModal (only for modal component)
     */
    openOverModal(config?: OverModal): void;
    /**
     * Can be used to close an overModal (only for modal component)
     */
    closeOverModal(): void;
    /**
     * Can be used to get passed data
     */
    getData(): any;
    /**
     * Open alert for current modal instance
     * @since v10.17.0
     */
    openAlert(alert: AlertAnimatedConfig): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ActiveModalRef, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ActiveModalRef>;
}
