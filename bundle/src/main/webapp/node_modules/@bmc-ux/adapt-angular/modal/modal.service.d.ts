import { ComponentRef, Injector, OnDestroy } from '@angular/core';
import { ScrollManageService } from '../common/scroll-manage.service';
import { AdaptModalComponent } from './modal.component';
import { AdaptDialogComponent } from './dialog.component';
import { ModalConfig, ModalDeferred, ModalDialog } from './modal.model';
import { OverModalConfig } from './over-modal';
import { AdaptModalStackService } from './modal-stack.service';
import * as i0 from "@angular/core";
/**
 * The service for using modal/dialogs
 *
 * open(config) – Opens modal window. Returns Promise that is resolved when a modal is closed and rejected when a modal is dismissed.
 *
 */
export declare class AdaptModalService implements OnDestroy {
    private _injector;
    private _scrollService;
    private _modalStack;
    /**
     * The wrapper to include modals/dialogs
     */
    private _wrapper;
    /**
     * An object for manage wrapper's scroll.
     */
    private _scrollManager;
    /**
     * Array with opened modals
     */
    private _popstateSubscription;
    get openedModals(): Map<string, ComponentRef<AdaptDialogComponent | AdaptModalComponent>>;
    get activeModal(): ComponentRef<AdaptDialogComponent | AdaptModalComponent>;
    constructor(_injector: Injector, _scrollService: ScrollManageService, _modalStack: AdaptModalStackService);
    ngOnDestroy(): void;
    /**
     * Open modal/dialog
     * @returns ModalDeferred - The Promise object with additional methods: resolve() and reject().
     * Resolved when a modal is closed and rejected when a modal is dismissed.
     */
    open(config: ModalConfig | ModalDialog): ModalDeferred;
    updateConfig(config: ModalConfig, modalComponent: ComponentRef<AdaptDialogComponent | AdaptModalComponent>): void;
    updateOverModalConfig(config: OverModalConfig, modalComponent: ComponentRef<AdaptDialogComponent | AdaptModalComponent>): void;
    /**
     * Close modal/dialog
     */
    closeAllModals(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptModalService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AdaptModalService>;
}
