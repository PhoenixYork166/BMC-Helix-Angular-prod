import { AfterViewInit, ChangeDetectorRef, ElementRef, NgZone, OnDestroy, OnInit, QueryList, Renderer2, TemplateRef } from '@angular/core';
import { AdaptMultiCardComponent, AdaptMultiCardSlideComponent } from '../../multi-card/index';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import { ResizeService } from '../../common/resize/resize.service';
import { Directionality } from '@angular/cdk/bidi';
import { AdaptTranslateService } from '../../common/i18n/index';
import { TooltipPlacement } from '../../common/positioning';
import { AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { GenericEvent, KeyValueObject } from '../../common/common.models';
import * as i0 from "@angular/core";
export declare class AdaptWorkflowBarSlideComponent extends AdaptMultiCardSlideComponent implements AfterViewInit {
    _el: ElementRef<HTMLElement>;
    private _cdr;
    private _renderer;
    readonly _workflowCssClasses: KeyValueObject<string>;
    dots: Element;
    parent: HTMLElement;
    isMultiCarouselItem: boolean;
    isAnimated: boolean;
    isFocus: boolean;
    currentTabindex: number;
    constructor(_el: ElementRef<HTMLElement>, _cdr: ChangeDetectorRef, _renderer: Renderer2);
    onMouseOver(e: GenericEvent<HTMLElement>): void;
    onMouseLeave(): void;
    queryDots(target: HTMLElement): void;
    toggleHoverState(): void;
    toggleSlideVisibility(value: boolean): void;
    ngAfterViewInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptWorkflowBarSlideComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptWorkflowBarSlideComponent, "adapt-workflow-carousel-slide", never, {}, {}, never, ["*"]>;
}
export declare class AdaptWorkflowCarouselComponent extends AdaptMultiCardComponent implements AfterViewInit, OnDestroy, OnInit {
    device: AdaptDeviceDetectionService;
    resize: ResizeService;
    _element: ElementRef;
    _ngZone: NgZone;
    _changeDetectorRef: ChangeDetectorRef;
    dir: Directionality;
    ts: AdaptTranslateService;
    private _renderer;
    value: number;
    leftCounting: number;
    rightCounting: number;
    tooltipContentSub: string;
    isDestroyed: boolean;
    /**
     * The tooltip content
     */
    tooltipContent: string | TemplateRef<any>;
    /**
     * The tooltip placement
     */
    tooltipPlacement: TooltipPlacement;
    tooltipAdditionalText: string;
    slide: QueryList<AdaptWorkflowBarSlideComponent>;
    carousel: ElementRef;
    list: ElementRef;
    isWorkflowCarousel: boolean;
    private readonly requiredCssClasses;
    constructor(device: AdaptDeviceDetectionService, resize: ResizeService, _element: ElementRef, _ngZone: NgZone, _changeDetectorRef: ChangeDetectorRef, dir: Directionality, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService, _renderer: Renderer2);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    showHiddenSteps(index: number, move: 'left' | 'right'): void;
    movePrev(): void;
    moveNext(): void;
    ngOnDestroy(): void;
    protected _calcCurrentItem(position: number, width: number, count: number): void;
    protected _shiftValidRight(): void;
    protected _setLastCardPosition(): void;
    protected _calcDimensions(move?: string): void;
    private _updateWorkflowWidth;
    private _onResizeWorkflowElements;
    private _updateWorkflowState;
    private _updateTooltipData;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptWorkflowCarouselComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptWorkflowCarouselComponent, "adapt-workflow-carousel", never, { "tooltipContent": "tooltipContent"; "tooltipPlacement": "tooltipPlacement"; "tooltipAdditionalText": "tooltipAdditionalText"; }, {}, ["slide"], ["adapt-workflow-carousel-slide", "adapt-workflow-bar"]>;
}
