import { ChangeDetectorRef, ElementRef, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef } from '@angular/core';
import { AdaptWorkflowSize, AdaptWorkflowStepInput, AdaptWorkflowStepType } from '../workflow.model';
import { Directionality } from '@angular/cdk/bidi';
import { PlacementArray } from '../../common/positioning';
import * as i0 from "@angular/core";
export declare class AdaptWorkflowStepComponent implements AdaptWorkflowStepInput, OnInit, OnChanges, OnDestroy {
    dir: Directionality;
    private _el;
    private _ngZone;
    private _renderer;
    private _changeDetector;
    dots: Element;
    parent: HTMLElement;
    isVertical: boolean;
    /**
     * Sets the CSS class for the component.
     * @docs-default ''
     */
    mainCls: string;
    /**
     * Sets the size of the component
     * @docs-default medium
     */
    size: AdaptWorkflowSize;
    /**
     * Sets the type of the component
     * @docs-default undefined
     */
    type: AdaptWorkflowStepType;
    /**
     * Sets the active state for the component
     * @docs-default false
     */
    active: boolean;
    /**
     * @docs-default false
     */
    completed: boolean;
    /**
     * Sets the title icon of the component. Depends on DPl-Iconfont
     * @docs-default ''
     */
    icon: string;
    /**
     * Sets the sub title icon of the component. Depends on DPl-Iconfont
     * @docs-default angle_down
     */
    subTitleIcon: string;
    /**
     * Content to be displayed as popover
     * @docs-default undefined
     */
    popoverContent: TemplateRef<any>;
    /**
     * Placement of a popover. Accepts: "top", "bottom", "left", "right"
     * @docs-default bottom
     */
    popoverPlacement: PlacementArray;
    /**
     * @docs-default
     */
    popoverContainer: string;
    /**
     * Allows to use accordion behave instead of popovers
     * @docs-default false
     */
    collapsed: boolean;
    /**
     * Allows to use animation effect for the accordion icon
     * @docs-default false
     */
    rotateCollapsedIcon: boolean;
    content: ElementRef;
    titleEl: ElementRef;
    subTitleEl: ElementRef;
    private readonly _workflowCssClasses;
    /**
     * Sets the title of the component
     * @docs-default undefined
     */
    get title(): string;
    set title(v: string);
    /**
     * Sets the description/sub title of the component
     * @docs-default undefined
     */
    get subTitle(): string;
    set subTitle(v: string);
    get hostClasses(): string;
    private _title;
    private _subTitle;
    private _destroyed$;
    constructor(dir: Directionality, _el: ElementRef, _ngZone: NgZone, _renderer: Renderer2, _changeDetector: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    onMouseOver(e: Event): void;
    onMouseLeave(): void;
    toggleHoverState(): void;
    queryDots(target: HTMLElement): void;
    isRtl(): boolean;
    alignStepByCenter(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private _setStyle;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptWorkflowStepComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptWorkflowStepComponent, "adapt-workflow-step", never, { "mainCls": "mainCls"; "size": "size"; "type": "type"; "active": "active"; "completed": "completed"; "icon": "title-icon"; "subTitleIcon": "sub-title-icon"; "popoverContent": "popoverContent"; "popoverPlacement": "popoverPlacement"; "popoverContainer": "popoverContainer"; "collapsed": "collapsed"; "rotateCollapsedIcon": "rotateCollapsedIcon"; "title": "title"; "subTitle": "sub-title"; }, {}, never, ["*"]>;
}
