import { AfterViewInit, DoCheck, ElementRef, EventEmitter, Injector, IterableDiffers, NgZone, OnDestroy, Renderer2 } from '@angular/core';
import { Platform } from '@angular/cdk/platform';
import { NgControl } from '@angular/forms';
import { Directionality } from '@angular/cdk/bidi';
import { AdaptOverlayService } from '../common/overlay/index';
import { AdaptMention2Group, AdaptMention2Item } from './adapt-mention2.types';
import { AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
export declare class AdaptMention2Directive extends AdaptRadarAngularGenericDirective implements AfterViewInit, DoCheck, OnDestroy {
    private _ngControl;
    private _elementRef;
    private _ngZone;
    private _renderer;
    private _platform;
    private _differs;
    private _overlayService;
    private _injector;
    private _dir;
    static DefaultSearchKey: string;
    /**
     * An array of data to represent mention tag list
     * @docs-default
     */
    adaptMention2: AdaptMention2Group[];
    /**
     * Mention directive model
     * @docs-default
     */
    set mentionModel(value: string);
    /**
     * When set to truthy, shows busy loader while data are loading
     * @since v10.15.0
     * @docs-default false
     */
    set showMentionLoader(state: boolean);
    get showMentionLoader(): boolean;
    /**
     * Class list for mention tag (only for [contenteditable])
     * @docs-default text-active
     */
    mentionClassList: string;
    /**
     * Mention filter.
     * Changed in 10.15.1. Added 'searchKey' param
     * @docs-default
     */
    mentionFilter: (value: AdaptMention2Item, query: string, searchKey?: string) => boolean;
    /**
     * Mention list popup max width
     * @docs-default 200px
     */
    mentionListMaxWidth: string;
    /**
     * Mention list popup max height
     * @docs-default 200px
     */
    mentionListMaxHeight: string;
    /**
     * Fires when mention model change
     */
    readonly mentionModelChange: EventEmitter<string>;
    /**
     * Fires when search value is entered
     * @since v10.15.0
     */
    readonly mentionSearchValueEntered: EventEmitter<string>;
    /**
     * Fires when item from the options list is selected
     * @since v10.15.0
     */
    readonly mentionItemSelected: EventEmitter<AdaptMention2Item>;
    /**
     * Fires when mention trigger char is pressed
     * @since v10.15.0
     */
    readonly mentionTriggerCharPressed: EventEmitter<string>;
    private _adaptMentionModel;
    private _cachedViewMentionItems;
    private _showMentionLoader;
    private _entryElement;
    private _entryElementContentEditable;
    private _entryElementFocus;
    private _spyWrapperElement;
    private _spyElementBeforeCaret;
    private _spyElementAfterCaret;
    private _spyCaret;
    private _viewInitComplete;
    private _activeGroup;
    private _activePosition;
    private _activeQuery;
    private _mentionListOverlayWithPortal;
    private _mentionListSelectItem$;
    private _destroyed$;
    private _mentionDiffer;
    constructor(_ngControl: NgControl, _elementRef: ElementRef<HTMLElement>, _ngZone: NgZone, _renderer: Renderer2, _platform: Platform, _differs: IterableDiffers, _overlayService: AdaptOverlayService, _injector: Injector, _dir: Directionality, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    /**
     * Configure entryElement
     */
    private _configureEntryElement;
    /**
     * Configure spy element for cursor position detection
     */
    private _configureEntryElementSpy;
    /**
     * Configure entryElement event listeners
     */
    private _configureEntryElementListeners;
    /**
     * Write value to entryElement or ngControl
     */
    private _writeValueToEntryElement;
    /**
     * Emit entryElement value change, update caret position
     */
    private _inputSourceValueChange;
    /**
     * Returns UI string without metadata
     */
    private _getUIString;
    /**
     * Returns layout representation of UI string
     */
    private _getUILayout;
    /**
     * Store all new mention model items
     */
    private _cacheMentionsFromString;
    /**
     * Expand string with metadata from cached mention items
     */
    private _applyMetadataToString;
    /**
     * Returns entryElement string value
     */
    private _getEntryElementValue;
    /**
     * Check caret position
     * Open mention list popup if mentionGroup found
     */
    private _checkCaretPosition;
    /**
     * Append mention from mention list to UI and model
     */
    private _appendMention;
    /**
     * Open mention list
     */
    private _openList;
    /**
     * Close mention list
     */
    private _closeList;
    /**
     * Default mention item filter
     */
    private _defaultFilter;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptMention2Directive, [{ optional: true; self: true; }, null, null, null, null, null, null, null, null, null, null]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptMention2Directive, "[adaptMention2]", never, { "adaptMention2": "adaptMention2"; "mentionModel": "mentionModel"; "showMentionLoader": "showMentionLoader"; "mentionClassList": "mentionClassList"; "mentionFilter": "mentionFilter"; "mentionListMaxWidth": "mentionListMaxWidth"; "mentionListMaxHeight": "mentionListMaxHeight"; }, { "mentionModelChange": "mentionModelChange"; "mentionSearchValueEntered": "mentionSearchValueEntered"; "mentionItemSelected": "mentionItemSelected"; "mentionTriggerCharPressed": "mentionTriggerCharPressed"; }, never>;
}
