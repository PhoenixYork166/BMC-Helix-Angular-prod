import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, Renderer2, TemplateRef } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { FocusOrigin } from '@angular/cdk/a11y';
import { Observable } from 'rxjs/internal/Observable';
import { AdaptDropdownMobileView } from './dropdown.model';
import { AdaptDropdownMenuDirective } from './dropdown.component';
import * as i0 from "@angular/core";
export declare class AdaptDropdownWindow2Component implements AfterViewInit {
    private _elementRef;
    private _renderer;
    _changeDetectorRef: ChangeDetectorRef;
    animationMode: 'desktop' | 'mobile' | 'picker' | false;
    autoFocusFirst: boolean;
    content: AdaptDropdownMenuDirective;
    customClass: string;
    eventInvokedFrom: FocusOrigin;
    focusNextElementAfterClose: boolean;
    holdFocusInMenu: boolean;
    holdFocusOnOpen: boolean;
    isMobile: boolean;
    isTablet: boolean;
    mobileView: AdaptDropdownMobileView;
    restoreFocusAfterClose: boolean;
    templateRef: TemplateRef<void>;
    readonly popupAnimationDone: EventEmitter<AnimationEvent>;
    get fadeAnimation(): 'desktop' | 'mobile' | 'picker' | false;
    get popupAnimation(): 'desktop' | 'mobile' | 'picker' | false;
    onPopupAnimationDone: (event: AnimationEvent) => void;
    container: ElementRef<HTMLDivElement>;
    private _popupCloseAnimationDone$;
    constructor(_elementRef: ElementRef<HTMLElement>, _renderer: Renderer2, _changeDetectorRef: ChangeDetectorRef);
    ngAfterViewInit(): void;
    /**
     * Check if click event from this window
     */
    isEventFrom(event: Event): boolean;
    /**
     * Close window
     */
    close(): Observable<void>;
    focusFirstItemInPopup(): void;
    /**
     * Close animation handler
     */
    private _onPopupAnimationDone;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptDropdownWindow2Component, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptDropdownWindow2Component, "adapt-dropdown-window2", never, {}, { "popupAnimationDone": "popupAnimationDone"; }, never, never>;
}
