import { ChangeDetectorRef, ElementRef, EventEmitter, OnInit, Renderer2 } from '@angular/core';
import { NgControl } from '@angular/forms';
import type { WeekDay } from '@angular/common';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { AdaptInteractionSourceService } from '../../common/interaction-source';
import { AdaptRxFeedbackComponent, AdaptRxFormControlDirective } from '../form-control/index';
import { PlacementArray } from '../../common/positioning';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import { AdaptTranslateService } from '../../common/i18n/index';
import { AdaptDropdownCloseReason, AdaptDropdownDirective, AdaptDropdownMobileView } from '../../dropdown/index';
import { RxDateStruct, RxDatetimePickerMode, RxDatetimeStruct, RxDatetimeTexts } from './adapt-rx-datetime.types';
import { AdaptRxDatetimeConfigService } from './adapt-rx-datetime-config.service';
import { AdaptRxDatetimeAdapter } from './adapt-rx-datetime-adapter.service';
import { AdaptRxDatetimeI18nService } from './adapt-rx-datetime-i18n.service';
import { AdaptRxDatetimeParserFormatter } from './adapt-rx-datetime-parser-formatter.service';
import { AdaptRxDatetimePickerComponent } from './datetime-picker/adapt-rx-datetime-picker.component';
import * as i0 from "@angular/core";
export declare class AdaptRxDatetimeComponent extends AdaptRxFormControlDirective implements OnInit {
    private _datetimeI18nService;
    private _datetimeAdapter;
    private _datetimeParserFormatter;
    private _renderer;
    ts: AdaptTranslateService;
    localeID: string;
    private _interactionSourceOriginService;
    protected controlName: string;
    analyticsComponentName: typeof AdaptRadarAngularCustomEventName;
    /**
     * Placeholder attribute
     * @docs-default
     */
    placeholder: string;
    /**
     * Inline mode
     * @docs-default false
     */
    inline: boolean;
    /**
     * The preferred placement of the typeahead
     * @docs-default auto
     */
    placement: PlacementArray;
    /**
     * Attach popup to the body
     * @docs-default false
     */
    appendToBody: boolean;
    /**
     * Light theme for inline mode
     * @docs-default false
     */
    inlineLight: boolean;
    /**
     * Small size for inline mode
     * @docs-default false
     */
    inlineCompact: boolean;
    /**
     * Day filter
     * @docs-default
     */
    dayFilter: (date: RxDateStruct) => boolean;
    /**
     * Trigger for disable picker's wizard
     * @docs-default false
     */
    disableWizard: boolean;
    /**
     * Picker's mode
     * @docs-default RxDatetimePickerMode.Date
     */
    mode: RxDatetimePickerMode;
    /**
     * Enables seconds for time
     * @docs-default false
     */
    hasSeconds: boolean;
    /**
     * Enables/disables 12-hours time format.
     * By default time format calculates automatically
     * @docs-default
     */
    set use12HoursTime(value: boolean);
    get use12HoursTime(): boolean;
    /**
     * Calendar first day of week.
     * By default calculates automatically
     * @docs-default
     */
    set firstDayOfWeek(value: WeekDay);
    get firstDayOfWeek(): WeekDay;
    /**
     * Initial datetime uses when there is model
     * @docs-default
     */
    initialDatetime: RxDatetimeStruct;
    /**
     * Callback that returns default datetime struct to fill the empty struct properties emitted by the picker
     * @docs-default
     * @since v12.11.0
     */
    defaultDatetime: (mode?: RxDatetimePickerMode, hasSeconds?: boolean) => RxDatetimeStruct;
    /**
     * Use disable styles for readonly state
     * @docs-default false
     * @since v10.5.0
     */
    disabledStyleForReadonlyState: boolean;
    /**
     * Custom class for the dropdown menu
     * @docs-default
     * @since 10.13.0
     */
    popupClass: string;
    /**
     * Datetime texts
     * @docs-default
     */
    get texts(): RxDatetimeTexts;
    set texts(value: RxDatetimeTexts);
    /**
     * Input format
     * @docs-default
     * @since v12.12.0
     */
    inputFormat: string;
    /**
     * An event fired when the popup is opened or closed
     */
    readonly onPopupOpenChange: EventEmitter<boolean>;
    /**
     * An event fired when model change
     */
    readonly onDatetimeChange: EventEmitter<RxDatetimeStruct>;
    /**
     * Reference to input control
     */
    inputControlRef: ElementRef<HTMLInputElement>;
    /**
     * Reference to popup open button
     */
    openPopupRef: ElementRef<HTMLInputElement>;
    /**
     * Reference to AdaptRxFeedbackComponent
     */
    adaptRxFeedbackRef: AdaptRxFeedbackComponent;
    /**
     * Reference to AdaptDropdownDirective
     */
    popup: AdaptDropdownDirective;
    /**
     * Reference to AdaptRxDatetimePickerComponent
     */
    datetimePickerComponent: AdaptRxDatetimePickerComponent;
    /**
     * Reference to picker menu container
     */
    datetimePickerContainer: ElementRef<HTMLElement>;
    PICKER_MODE: typeof RxDatetimePickerMode;
    inputValue: string;
    isMobile: boolean;
    isLastWizardStep: boolean;
    pickerActiveDatetime: RxDatetimeStruct;
    defaultInitialDatetime: RxDatetimeStruct;
    mobileViewConfig: AdaptDropdownMobileView;
    get controlValue(): RxDatetimeStruct;
    set controlValue(value: RxDatetimeStruct);
    private _controlValue;
    private _backupControlValue;
    private _use12HoursTime;
    private _firstDayOfWeek;
    private _defaultTexts;
    private _texts;
    private _popupFocusableElements;
    private _openWithKeyboard;
    private _targetOpen;
    constructor(ngControl: NgControl, _datetimeConfigService: AdaptRxDatetimeConfigService, _deviceDetectionService: AdaptDeviceDetectionService, _datetimeI18nService: AdaptRxDatetimeI18nService, _datetimeAdapter: AdaptRxDatetimeAdapter<any>, _datetimeParserFormatter: AdaptRxDatetimeParserFormatter, _changeDetectorRef: ChangeDetectorRef, _renderer: Renderer2, ts: AdaptTranslateService, localeID: string, _adaptRadarService: AdaptRadarAngularService, _interactionSourceOriginService: AdaptInteractionSourceService, _elem: ElementRef<HTMLElement>);
    /**
     * Check if the control has UI error state
     */
    get hasDangerState(): boolean;
    ngOnInit(): void;
    datetimeOpenHandler(event: MouseEvent | KeyboardEvent): void;
    onInput(value: string): void;
    blurHandler(event: FocusEvent): void;
    focusHandler(event: FocusEvent): void;
    /**
     * Popup toggle handler
     */
    popupOpenChangeHandler(isOpen: boolean, closeReason?: AdaptDropdownCloseReason): void;
    datetimePickerContainerKeydown(event: KeyboardEvent): void;
    pickerCloseAndCancel(): void;
    pickerClearAll(): void;
    goToNextStep(): void;
    onPickerValueChange(newValue: RxDatetimeStruct): void;
    onPickerStateChange(): void;
    writeValue(value: any): void;
    protected _focusNativeElement(): void;
    private _isModelFull;
    private _updateInputValue;
    private _checkWizardLastStep;
    private _propagateChange;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxDatetimeComponent, [{ optional: true; self: true; }, null, null, null, null, null, null, null, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRxDatetimeComponent, "adapt-rx-datetime", never, { "placeholder": "placeholder"; "inline": "inline"; "placement": "placement"; "appendToBody": "appendToBody"; "inlineLight": "inlineLight"; "inlineCompact": "inlineCompact"; "dayFilter": "dayFilter"; "disableWizard": "disableWizard"; "mode": "mode"; "hasSeconds": "hasSeconds"; "use12HoursTime": "use12HoursTime"; "firstDayOfWeek": "firstDayOfWeek"; "initialDatetime": "initialDatetime"; "defaultDatetime": "defaultDatetime"; "disabledStyleForReadonlyState": "disabledStyleForReadonlyState"; "popupClass": "popupClass"; "texts": "texts"; "inputFormat": "inputFormat"; }, { "onPopupOpenChange": "onPopupOpenChange"; "onDatetimeChange": "onDatetimeChange"; }, never, never>;
}
