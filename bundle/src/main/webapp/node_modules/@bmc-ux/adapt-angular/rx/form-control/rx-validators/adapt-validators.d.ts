import { AbstractControl, ValidationErrors, Validator } from '@angular/forms';
import { BigNumber } from 'bignumber.js';
import { RxDatetimeStructParseError } from '../../rx-datetime/adapt-rx-datetime.types';
import { AdaptRxValidatorFn } from './adapt-validators.model';
import * as i0 from "@angular/core";
export declare class AdaptValidators {
    static min(min: number | BigNumber, errorMessageFn?: (_: {
        min: number | BigNumber;
        actual: number | BigNumber;
    }) => string): AdaptRxValidatorFn;
    static max(max: number | BigNumber, errorMessageFn?: (_: {
        max: number | BigNumber;
        actual: number | BigNumber;
    }) => string): AdaptRxValidatorFn;
    static required(errorMessageFn?: () => string): AdaptRxValidatorFn;
    static requiredTrue(errorMessageFn?: () => string): AdaptRxValidatorFn;
    static email(errorMessageFn?: () => string): AdaptRxValidatorFn;
    static minLength(minLength: number, errorMessageFn?: (_: {
        requiredLength: number;
        actualLength: number;
    }) => string): AdaptRxValidatorFn;
    static maxLength(maxLength: number, errorMessageFn?: (_: {
        requiredLength: number;
        actualLength: number;
    }) => string): AdaptRxValidatorFn;
    static pattern(pattern: string | RegExp, errorMessageFn?: (_: {
        requiredPattern: string;
        actualValue: string;
    }) => string): AdaptRxValidatorFn;
    static range(min: number | BigNumber, max: number | BigNumber, errorMessageFn?: (_: {
        min: number | BigNumber;
        max: number | BigNumber;
        actual: number | BigNumber;
    }) => string): AdaptRxValidatorFn;
    static rxDatetimeFormat(errorMessageFn?: (_: RxDatetimeStructParseError) => string): AdaptRxValidatorFn;
    static rxDatetimeRangeFormat(errorMessageFn?: (_: {
        start: RxDatetimeStructParseError | null;
        end: RxDatetimeStructParseError | null;
    }) => string): AdaptRxValidatorFn;
    static rxDatetimeRangeOrder(errorMessageFn?: () => string): AdaptRxValidatorFn;
    static integerNumber(errorMessageFn?: () => string): AdaptRxValidatorFn;
    static scientificNumber(errorMessageFn?: () => string): AdaptRxValidatorFn;
    static floatNumber(errorMessageFn?: () => string): AdaptRxValidatorFn;
}
export declare class AdaptMinValidatorDirective implements Validator {
    adaptMin: number | BigNumber;
    adaptMinMessageFn?: (_: {
        min: number | BigNumber;
        actual: number | BigNumber;
    }) => string;
    validate(control: AbstractControl): ValidationErrors | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptMinValidatorDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptMinValidatorDirective, "[adaptMin][ngModel],[adaptMin][formControl]", never, { "adaptMin": "adaptMin"; "adaptMinMessageFn": "adaptMinMessageFn"; }, {}, never>;
}
export declare class AdaptMaxValidatorDirective implements Validator {
    adaptMax: number | BigNumber;
    adaptMaxMessageFn?: (_: {
        max: number | BigNumber;
        actual: number | BigNumber;
    }) => string;
    validate(control: AbstractControl): ValidationErrors | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptMaxValidatorDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptMaxValidatorDirective, "[adaptMax][ngModel],[adaptMax][formControl]", never, { "adaptMax": "adaptMax"; "adaptMaxMessageFn": "adaptMaxMessageFn"; }, {}, never>;
}
export declare class AdaptRequiredValidatorDirective {
    adaptRequiredMessageFn?: () => string;
    validate(control: AbstractControl): ValidationErrors | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRequiredValidatorDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptRequiredValidatorDirective, "[adaptRequired][ngModel],[adaptRequired][formControl]", never, { "adaptRequiredMessageFn": "adaptRequiredMessageFn"; }, {}, never>;
}
export declare class AdaptRequiredTrueValidatorDirective implements Validator {
    adaptRequiredTrueMessageFn: () => string;
    validate(control: AbstractControl): ValidationErrors | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRequiredTrueValidatorDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptRequiredTrueValidatorDirective, "[adaptRequiredTrue][ngModel],[adaptRequiredTrue][formControl]", never, { "adaptRequiredTrueMessageFn": "adaptRequiredTrueMessageFn"; }, {}, never>;
}
export declare class AdaptEmailValidatorDirective implements Validator {
    adaptEmailMessageFn: () => string;
    validate(control: AbstractControl): ValidationErrors | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptEmailValidatorDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptEmailValidatorDirective, "[adaptEmail][ngModel],[adaptEmail][formControl]", never, { "adaptEmailMessageFn": "adaptEmailMessageFn"; }, {}, never>;
}
export declare class AdaptMinLengthValidatorDirective implements Validator {
    adaptMinLength: number;
    adaptMinLengthMessageFn: (_: {
        requiredLength: number;
        actualLength: number;
    }) => string;
    validate(control: AbstractControl): ValidationErrors | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptMinLengthValidatorDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptMinLengthValidatorDirective, "[adaptMinLength][ngModel],[adaptMinLength][formControl]", never, { "adaptMinLength": "adaptMinLength"; "adaptMinLengthMessageFn": "adaptMinLengthMessageFn"; }, {}, never>;
}
export declare class AdaptMaxLengthValidatorDirective implements Validator {
    adaptMaxLength: number;
    adaptMaxLengthMessageFn: (_: {
        requiredLength: number;
        actualLength: number;
    }) => string;
    validate(control: AbstractControl): ValidationErrors | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptMaxLengthValidatorDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptMaxLengthValidatorDirective, "[adaptMaxLength][ngModel],[adaptMaxLength][formControl]", never, { "adaptMaxLength": "adaptMaxLength"; "adaptMaxLengthMessageFn": "adaptMaxLengthMessageFn"; }, {}, never>;
}
export declare class AdaptPatternValidatorDirective implements Validator {
    adaptPattern: string | RegExp;
    adaptPatternMessageFn: (_: {
        requiredPattern: string;
        actualValue: string;
    }) => string;
    validate(control: AbstractControl): ValidationErrors | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptPatternValidatorDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptPatternValidatorDirective, "[adaptPattern][ngModel],[adaptPattern][formControl]", never, { "adaptPattern": "adaptPattern"; "adaptPatternMessageFn": "adaptPatternMessageFn"; }, {}, never>;
}
export declare class AdaptRangeValidatorDirective implements Validator {
    adaptRange: (number | BigNumber)[];
    adaptRangeMessageFn: (_: {
        min: number | BigNumber;
        max: number | BigNumber;
        actual: number | BigNumber;
    }) => string;
    validate(control: AbstractControl): ValidationErrors | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRangeValidatorDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptRangeValidatorDirective, "[adaptRange][ngModel],[adaptRange][formControl]", never, { "adaptRange": "adaptRange"; "adaptRangeMessageFn": "adaptRangeMessageFn"; }, {}, never>;
}
export declare class AdaptRxDatetimeFormatValidatorDirective implements Validator {
    adaptRxDatetimeFormatMessageFn: (_: RxDatetimeStructParseError) => string;
    validate(control: AbstractControl): ValidationErrors | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxDatetimeFormatValidatorDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptRxDatetimeFormatValidatorDirective, "[adaptRxDatetimeFormat][ngModel],[adaptRxDatetimeFormat][formControl]", never, { "adaptRxDatetimeFormatMessageFn": "adaptRxDatetimeFormatMessageFn"; }, {}, never>;
}
export declare class AdaptRxDatetimeRangeFormatValidatorDirective implements Validator {
    adaptRxDatetimeRangeFormatMessageFn: (_: {
        start: RxDatetimeStructParseError | null;
        end: RxDatetimeStructParseError | null;
    }) => string;
    validate(control: AbstractControl): ValidationErrors | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxDatetimeRangeFormatValidatorDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptRxDatetimeRangeFormatValidatorDirective, "[adaptRxDatetimeRangeFormat][ngModel],[adaptRxDatetimeRangeFormat][formControl]", never, { "adaptRxDatetimeRangeFormatMessageFn": "adaptRxDatetimeRangeFormatMessageFn"; }, {}, never>;
}
export declare class AdaptRxDatetimeRangeOrderValidatorDirective implements Validator {
    adaptRxDatetimeRangeOrderMessageFn: () => string;
    validate(control: AbstractControl): ValidationErrors | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxDatetimeRangeOrderValidatorDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptRxDatetimeRangeOrderValidatorDirective, "[adaptRxDatetimeRangeOrder][ngModel],[adaptRxDatetimeRangeOrder][formControl]", never, { "adaptRxDatetimeRangeOrderMessageFn": "adaptRxDatetimeRangeOrderMessageFn"; }, {}, never>;
}
export declare class AdaptIntegerNumberValidatorDirective implements Validator {
    adaptIntegerNumberMessageFn: () => string;
    validate(control: AbstractControl): ValidationErrors | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptIntegerNumberValidatorDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptIntegerNumberValidatorDirective, "[adaptIntegerNumber][ngModel], [adaptIntegerNumber][formControl]", never, { "adaptIntegerNumberMessageFn": "adaptIntegerNumberMessageFn"; }, {}, never>;
}
export declare class AdaptScientificNumberValidatorDirective implements Validator {
    adaptScientificNumberMessageFn: () => string;
    validate(control: AbstractControl): ValidationErrors | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptScientificNumberValidatorDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptScientificNumberValidatorDirective, "[adaptScientificNumber][ngModel], [adaptScientificNumber][formControl]", never, { "adaptScientificNumberMessageFn": "adaptScientificNumberMessageFn"; }, {}, never>;
}
export declare class AdaptFloatNumberValidatorDirective implements Validator {
    adaptFloatNumberMessageFn: () => string;
    validate(control: AbstractControl): ValidationErrors | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptFloatNumberValidatorDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptFloatNumberValidatorDirective, "[adaptFloatNumber][ngModel], [adaptFloatNumber][formControl]", never, { "adaptFloatNumberMessageFn": "adaptFloatNumberMessageFn"; }, {}, never>;
}
