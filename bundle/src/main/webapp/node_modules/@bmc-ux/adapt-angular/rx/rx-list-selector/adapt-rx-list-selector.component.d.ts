import { CdkDragDrop } from '@angular/cdk/drag-drop';
import { ChangeDetectorRef, ElementRef, NgZone, OnInit, TemplateRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { KeyValueObject } from '../../common/common.models';
import { AdaptTranslateService } from '../../common/i18n/index';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { AdaptRxFeedbackComponent, AdaptRxFormControlDirective } from '../form-control/index';
import { RxSelectionChangeEvent, RxSelectOption, RxSelectOptionsGroup } from '../rx-select/index';
import { ListSelectorTexts, RxListSelectorTextsModel } from './adapt-rx-list-selector.models';
import * as i0 from "@angular/core";
export declare class AdaptRxListSelectorComponent extends AdaptRxFormControlDirective implements OnInit {
    ngControl: NgControl;
    ts: AdaptTranslateService;
    private _ngZone;
    protected controlName: string;
    analyticsComponentName: typeof AdaptRadarAngularCustomEventName;
    selectedListItems: RxSelectOption[];
    hideControls: boolean;
    searchFocus: boolean;
    externalId: string;
    defaultHostClass: boolean;
    adaptRxFeedbackRef: AdaptRxFeedbackComponent;
    /**
     * Options list. See <a href="#/components/building-blocks/rx-select/api" target="_blank">rx-select API</a> for more details.
     * @docs-default
     */
    options: (RxSelectOption | RxSelectOptionsGroup)[];
    /**
     * Formatter that transforms the option into a string. See <a href="#/components/building-blocks/rx-select/api" target="_blank">rx-select API</a> for more details.
     * @docs-default option => option['name']
     */
    optionFormatter: (option: RxSelectOption) => string;
    /**
     * Template for displaying option value. See <a href="#/components/building-blocks/rx-select/api" target="_blank">rx-select API</a> for more details.
     * @docs-default
     */
    optionContentTemplate: TemplateRef<{
        $implicit: RxSelectOption;
    }>;
    /**
     * Function resolves disabled option. See <a href="#/components/building-blocks/rx-select/api" target="_blank">rx-select API</a> for more details.
     * @docs-default option => option['disabled']
     */
    disabledOptionResolver: (option: RxSelectOption) => boolean;
    /**
     * Formatter that transforms the option list into a title string. See details of method implementation below.
     * @docs-default option => option['title']
     */
    titleFormatter: (options: RxSelectOption[]) => string;
    /**
     * Configurable text for component. See details of RxListSelectorTextsModel interface below.
     * @docs-default
     */
    set texts(value: RxListSelectorTextsModel);
    get listSelectorTexts(): ListSelectorTexts;
    get selectTexts(): ListSelectorTexts;
    /**
     * Formatter that transforms the selected option into a string to be visible in the list.
     * @docs-default option => option['name']
     */
    listItemFormatter: (option: RxSelectOption) => string;
    /**
     * Template for displaying selected option in the list.
     * @docs-default
     */
    listItemContentTemplate: TemplateRef<{
        $implicit: RxSelectOption;
    }>;
    /**
     * Function to process onSelectionChange emitted value from RxSelect. See <a href="#/components/building-blocks/rx-select/api" target="_blank">rx-select API</a> for more details.
     * @docs-default
     */
    resolveSelectionChange: (rxSelectChangeEvent: RxSelectionChangeEvent) => void;
    /**
     * Specify the max-height of the inner list. If there is no room, scroll will appear.
     * @docs-default
     */
    maxHeight: string;
    /**
     * Enable dragging for the list.
     * @docs-default true
     */
    enableDnD: boolean;
    private _defaultTexts;
    private _texts;
    private _selectedListItemsOnInit;
    constructor(ngControl: NgControl, _changeDetectorRef: ChangeDetectorRef, ts: AdaptTranslateService, _ngZone: NgZone, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    /**
     * Check if the control has UI error state
     */
    get hasDangerState(): boolean;
    ngOnInit(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    writeValue(value: RxSelectOption[]): void;
    deselectItem(item: RxSelectOption): void;
    updateListBuilder(): void;
    dropdownClosed(value: boolean): void;
    drop(event: CdkDragDrop<string[]>): void;
    onUp(e: KeyboardEvent, prevIndex: number): void;
    onDown(e: KeyboardEvent, prevIndex: number): void;
    move(): void;
    /**
     * Implementation from the base class
     */
    protected _focusNativeElement(): void;
    private _defaultDisabledOptionResolver;
    private _defaultTitleFormatterResolver;
    private _updateControlModel;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxListSelectorComponent, [{ optional: true; self: true; }, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRxListSelectorComponent, "adapt-rx-list-selector", never, { "options": "options"; "optionFormatter": "optionFormatter"; "optionContentTemplate": "optionContentTemplate"; "disabledOptionResolver": "disabledOptionResolver"; "titleFormatter": "titleFormatter"; "texts": "texts"; "listItemFormatter": "listItemFormatter"; "listItemContentTemplate": "listItemContentTemplate"; "resolveSelectionChange": "resolveSelectionChange"; "maxHeight": "maxHeight"; "enableDnD": "enableDnD"; }, {}, never, [".empty-text"]>;
}
