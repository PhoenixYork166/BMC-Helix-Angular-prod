import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, QueryList, TemplateRef } from '@angular/core';
import { NgControl, ValidationErrors } from '@angular/forms';
import { ReplaySubject } from 'rxjs';
import { AdaptTranslateService } from '../../common/i18n/index';
import { KeyValueObject } from '../../common/common.models';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { AdaptRxFeedbackComponent, AdaptRxFormControlDirective } from '../form-control/index';
import { AdaptRxListItemComponent } from '../rx-list-item/index';
import { ListBuilderTextsModel, RxListBuilderItem, RxListBuilderSelectionMode } from './adapt-rx-list-builder.models';
import { AdaptCustomAction } from '../../custom-actions/index';
import * as i0 from "@angular/core";
export declare class AdaptRxListBuilderComponent extends AdaptRxFormControlDirective implements OnInit, AfterViewInit, OnDestroy {
    ts: AdaptTranslateService;
    private _ngZone;
    protected controlName: string;
    analyticsComponentName: typeof AdaptRadarAngularCustomEventName;
    isDragging: boolean;
    focused: boolean;
    canAdd: boolean;
    filteredListItems: RxListBuilderItem[];
    addValidationError: string;
    addingItemDuplicateOrEmpty: boolean;
    editValidationError: string;
    editingItemDuplicateOrEmpty: boolean;
    editingSizeExceeded: boolean;
    dragStartSubject: ReplaySubject<{
        event: DragEvent;
        item: AdaptRxListItemComponent;
    }>;
    dragEnterSubject: ReplaySubject<{
        event: DragEvent;
        item: AdaptRxListItemComponent;
    }>;
    dragOverSubject: ReplaySubject<{
        event: DragEvent;
        item: AdaptRxListItemComponent;
        draggableOverElement: HTMLElement;
    }>;
    dragLeaveSubject: ReplaySubject<{
        event: DragEvent;
        draggableLeaveElement: HTMLElement;
    }>;
    dropSubject: ReplaySubject<DragEvent>;
    dragEndSubject: ReplaySubject<void>;
    /**
     * When present, hides the input for list filtering/item searching.
     * @docs-default false
     */
    hideSearchField: boolean;
    /**
     * When present, hides list item edit button.
     * @docs-default false
     */
    hideEdit: boolean;
    /**
     * When present, hides list item delete button.
     * @docs-default false
     */
    hideDelete: boolean;
    /**
     * When present, hides list title.
     * @docs-default false
     */
    hideListAreaLabel: boolean;
    /**
     * When present, applies custom sorting for list items and disable possibility to drag items.
     * @docs-default
     */
    customSort: (prev: RxListBuilderItem, curr: RxListBuilderItem) => number;
    /**
     * Configurable text for rx-list-builder: See below ListBuilderTextsModel.
     * @docs-default
     */
    texts: ListBuilderTextsModel;
    /**
     * Sets the height of the list block.
     * @docs-default
     */
    menuHeight: number;
    /**
     * When present, sets the maximum label length that can be saved when an item's label is edited.
     * @docs-default
     */
    listItemMaxLength: number;
    /**
     * Function that is used to generate id value to the new item added to the list.
     * @docs-default
     */
    generateListItemId: () => string | number;
    /**
     * Function that is used to determine whether the item can be added to the list.
     * Returns 'null' if no error and 'string' if it is.
     * @docs-default
     * @since 9.2.0
     */
    itemValidation: (value: string, array: RxListBuilderItem[], isEdit: boolean) => string;
    /**
     * When present, it specifies that the element should be disabled.
     * @docs-default false
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Allow creating nested structures when dragging one element over other element.
     * @docs-default false
     * @since 10.9.0
     */
    treeStructure: boolean;
    /**
     * Formatter that transforms item into a string to become editable
     * once custom content has been provided or to be displayed as an item.
     * @docs-default option => option[this.listItemSetterProp]
     * @since 11.5.0
     */
    listItemFormatter: (option: RxListBuilderItem) => string;
    /**
     * Property name to be updated
     * @docs-default name
     * @since 11.5.0
     */
    listItemSetterProp: string;
    /**
     * Custom template for displaying item in the list.
     * @docs-default
     * @since 11.5.0
     */
    listItemContentTemplate: TemplateRef<{
        $implicit: RxListBuilderItem;
    }>;
    /**
     * Specifies the selection mode, valid values are "single" and "multiple".
     * If not provided means that selection feature is turned off
     * Selection mode can be used only with flat list builder structure.
     * Used "selected" property from the list builder item("RxListBuilderItemDefault") to represent selection state
     * In case "single" mode and no "selected" item provider, the first item from the list will be automatically selected
     *
     * @since 12.27.0, 14.5.0
     * @docs-default
     */
    selectionMode: RxListBuilderSelectionMode;
    /**
     * Fires when list item has added
     */
    readonly listItemAdd: EventEmitter<RxListBuilderItem>;
    /**
     * Fires when list item enters edit mode
     */
    readonly listItemEdit: EventEmitter<RxListBuilderItem>;
    /**
     * Fires when list item has been updated. Returns <code>[oldValue, newValue]</code>
     */
    readonly listItemUpdate: EventEmitter<[RxListBuilderItem, RxListBuilderItem]>;
    /**
     * Fires when list item has removed
     */
    readonly listItemRemove: EventEmitter<RxListBuilderItem>;
    itemsList: ElementRef<HTMLDivElement>;
    inputEl: ElementRef<HTMLInputElement>;
    rxListItemComponents: QueryList<AdaptRxListItemComponent>;
    /**
     * Reference on AdaptRxFeedbackComponent
     */
    adaptRxFeedbackRef: AdaptRxFeedbackComponent;
    /**
     * Check if the control has UI error state
     */
    get hasDangerState(): boolean;
    private _dragItem;
    private _dragOverItem;
    private _dragItemExpandOverWaitTimeMs;
    private _dropArea;
    private _modelValue;
    private _defaultTexts;
    private _overItemTimeout;
    private _dragMoveCursor;
    private _preview;
    private _dragElement;
    private _dragOverElement;
    private _dragOverClasses;
    private _draggableClasses;
    private _placeholder;
    get selectionActions(): AdaptCustomAction[];
    constructor(ngControl: NgControl, _changeDetectorRef: ChangeDetectorRef, ts: AdaptTranslateService, _ngZone: NgZone, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    get errors(): ValidationErrors | null;
    setDefaultTexts(translation: KeyValueObject): void;
    writeValue(value: RxListBuilderItem[]): void;
    focusHandler(event: FocusEvent): void;
    blurHandler(event: FocusEvent): void;
    get dragDisabled(): boolean;
    onDragStart(event: DragEvent, item: AdaptRxListItemComponent): void;
    onDragEnter(event: DragEvent, item: AdaptRxListItemComponent): void;
    onDragOver(event: DragEvent, item: AdaptRxListItemComponent, draggableOverElement: HTMLElement): void;
    onDragLeave(event: DragEvent, draggableLeaveElement: HTMLElement): void;
    onDrop(event: DragEvent): void;
    onDragEnd(): void;
    checkForAddError(searchQuery: string): void;
    checkForEditError(oldValue: string, newValue: string): void;
    onListItemAdd(): void;
    onListItemEdit(listItem: RxListBuilderItem): void;
    onListItemDelete(listItem: RxListBuilderItem): void;
    onListItemUpdate(itemValue: [RxListBuilderItem, RxListBuilderItem]): void;
    onListItemChange(value: [string, string]): void;
    onExitListItemEdit(): void;
    onKeyUp(shiftItemId: string | number): void;
    onKeyDown(shiftItemId: string | number): void;
    onSelectionStateChange(changedItem: RxListBuilderItem): void;
    getSelectionMode(): RxListBuilderSelectionMode;
    trackByItem(index: number, item: RxListBuilderItem): string | number;
    /**
     * Implementation from the base class
     */
    protected _focusNativeElement(): void;
    private _defaultItemFormatter;
    private _updateListOptions;
    private _updateControlModel;
    private _cleanInput;
    private _filterTree;
    private _sortSelectOptions;
    private _getParentItem;
    private _replaceItemInList;
    private _getDropArea;
    private _getDragOverClasses;
    private _focusShiftedItem;
    private _createPreviewElement;
    private _createPlaceholderElement;
    private _destroyElements;
    private _autoSelectItem;
    private _selectAll;
    private _clearAll;
    private _canBeSelected;
    private _canBeCleared;
    private _selectItemIfDeleted;
    private _isNestedStructure;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxListBuilderComponent, [{ optional: true; self: true; }, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRxListBuilderComponent, "adapt-rx-list-builder", never, { "hideSearchField": "hideSearchField"; "hideEdit": "hideEdit"; "hideDelete": "hideDelete"; "hideListAreaLabel": "hideListAreaLabel"; "customSort": "customSort"; "texts": "texts"; "menuHeight": "menuHeight"; "listItemMaxLength": "listItemMaxLength"; "generateListItemId": "generateListItemId"; "itemValidation": "itemValidation"; "disabled": "disabled"; "treeStructure": "treeStructure"; "listItemFormatter": "listItemFormatter"; "listItemSetterProp": "listItemSetterProp"; "listItemContentTemplate": "listItemContentTemplate"; "selectionMode": "selectionMode"; }, { "listItemAdd": "listItemAdd"; "listItemEdit": "listItemEdit"; "listItemUpdate": "listItemUpdate"; "listItemRemove": "listItemRemove"; }, never, [".empty-text"]>;
}
