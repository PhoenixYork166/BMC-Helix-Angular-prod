import { ChangeDetectorRef, ElementRef, EventEmitter, OnInit } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import { AdaptTranslateService } from '../../common/i18n/index';
import { AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { AdaptInteractionSourceService } from '../../common/interaction-source';
import { AdaptRxFormControlDirective, FormControlSize } from '../form-control/index';
import { AdaptRxSearchConfigService } from './adapt-rx-search-config.service';
import { KeyValueObject } from '../../common/common.models';
import * as i0 from "@angular/core";
export interface RxSearchTextsModel {
    placeholder?: string;
    btnClearText?: string;
    btnSearchText?: string;
    labelText?: string;
}
export declare type RxSearchMode = 'search' | 'filter';
export declare class AdaptRxSearchComponent extends AdaptRxFormControlDirective implements OnInit {
    ts: AdaptTranslateService;
    private _deviceDetectionService;
    private _interactionSourceOriginService;
    protected controlName: string;
    searchButtonSRText: string;
    placeholderDefaultText: string;
    canClear: boolean;
    isMobile: boolean;
    /**
     * Specifies search mode - search of filter. This will apply different visual styling to the component.
     * @docs-default search
     * @since 12.25.0
     */
    mode: RxSearchMode;
    /**
     * Specifies autocomplete property of native element
     * @docs-default
     * @since 10.11.0
     */
    autocomplete: boolean | string;
    /**
     * A placeholder string for the input filed. If didn't pass, default value will be shown
     * @docs-default Search
     */
    placeholder: string;
    /**
     * Control size
     * @docs-default default
     */
    size: FormControlSize;
    /**
     * Use explicit search button
     * @docs-default false
     */
    searchButton: boolean;
    /**
     * Use search button with text instead of icon
     * @docs-default
     */
    searchButtonText: string;
    /**
     * Clear button text (sr-only)
     * @docs-default Clear
     */
    clearButtonText: string;
    /**
     * Debounce time before search model change
     * @docs-default 0
     */
    debounceTime: number;
    /**
     * String typed id of DOM element of listbox/combobox that is cotrolled by searchbox
     * @docs-default
     * @since v10.7.0
     */
    ariaControlsPopupId: string;
    /**
     * String typed id of DOM element of current activedescendant that is cotrolled by searchbox
     * @docs-default
     * @since v10.7.0
     */
    ariaActiveDescendant: string;
    /**
     * @docs-default centre
     */
    initialAlign: 'left' | 'centre';
    /**
     * Fired when a user interacts with search.
     */
    readonly editModeChange: EventEmitter<boolean>;
    /**
     * Input ref
     */
    inputRef: ElementRef<HTMLInputElement>;
    /**
     * Clear button ref
     */
    clearButtonRef: ElementRef<HTMLButtonElement>;
    /**
     *  Search button ref
     */
    searchButtonRef: ElementRef<HTMLButtonElement>;
    private _value;
    private _previousNativeValue;
    private _hasFocus;
    private _isEditState;
    private _componentStateChange$;
    constructor(ngControl: NgControl, adaptRxSearchConfigService: AdaptRxSearchConfigService, _changeDetectorRef: ChangeDetectorRef, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService, _deviceDetectionService: AdaptDeviceDetectionService, _interactionSourceOriginService: AdaptInteractionSourceService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    get value(): string;
    set value(value: string);
    /**
     * Extend parent method
     */
    focusHandler(event: FocusEvent): void;
    /**
     * Extend parent method
     */
    blurHandler(event: FocusEvent): void;
    /**
     * Check if nativeElement has focus
     */
    get hasFocus(): boolean;
    /**
     * Check if inputBlock should be expanded
     */
    get isExpanded(): boolean;
    /**
     * Returns autocomplete attribute value for native element
     */
    get getAutocompleteValue(): string;
    /**
     * Set search model value
     */
    setSearchValue(): void;
    /**
     * Clear search value
     */
    clearSearchValue(): void;
    /**
     * Extend parent method
     */
    writeValue(value: string): void;
    onButtonBlur(): void;
    onButtonFocus(): void;
    /**
     * Implementation from the base class
     * Focus the native element if [autofocus] == true
     */
    protected _focusNativeElement(): void;
    /**
     * Check if the native input has value
     */
    private _checkCanClear;
    /**
     * Check if the native element value was changed and propagate change
     */
    private _checkNativeValue;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxSearchComponent, [{ optional: true; self: true; }, null, null, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRxSearchComponent, "adapt-rx-search", never, { "mode": "mode"; "autocomplete": "autocomplete"; "placeholder": "placeholder"; "size": "size"; "searchButton": "searchButton"; "searchButtonText": "searchButtonText"; "clearButtonText": "clearButtonText"; "debounceTime": "debounceTime"; "ariaControlsPopupId": "ariaControlsPopupId"; "ariaActiveDescendant": "ariaActiveDescendant"; "initialAlign": "initialAlign"; }, { "editModeChange": "editModeChange"; }, never, never>;
}
