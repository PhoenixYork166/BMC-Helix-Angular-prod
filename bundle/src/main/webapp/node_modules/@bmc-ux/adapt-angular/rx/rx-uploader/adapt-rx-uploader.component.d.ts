import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, Injector, KeyValueDiffers, NgZone, OnDestroy, OnInit, QueryList, Renderer2, TemplateRef } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { Directionality } from '@angular/cdk/bidi';
import { AnimationBuilder } from '@angular/animations';
import { NgControl } from '@angular/forms';
import { AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { AdaptRxFeedbackComponent, AdaptRxFormControlDirective } from '../form-control/index';
import { AdaptRxUploaderConfigService } from './adapt-rx-uploader-config.service';
import { KeyValueObject } from '../../common/common.models';
import { Icon, IconManager } from '../../common/uploader/services/icons-manager';
import { FileManager } from '../../common/uploader/services/file-manager';
import { UploaderMode, UploaderSelectionMode } from '../../common/uploader/enums/uploader.enum';
import { FileErrors, FileObj, FileSystemEntry, UploaderFeedbackMessage, UploaderTexts } from '../../common/uploader/models/uploader.models';
import { AdaptUploaderItemComponent } from '../../uploader-item/index';
import { AdaptTranslateService } from '../../common/i18n/index';
import * as i0 from "@angular/core";
export declare class AdaptRxUploaderComponent extends AdaptRxFormControlDirective implements OnInit, AfterViewInit, OnDestroy {
    ngControl: NgControl;
    private _fileManager;
    private _iconService;
    private _renderer;
    private _elRef;
    private _dir;
    private _animationBuilder;
    private _injector;
    private _keyValueDiffers;
    private _ngZone;
    private document;
    ts: AdaptTranslateService;
    protected controlName: string;
    tmplSvgIcons: KeyValueObject<string>;
    uploaderFeedbackMessages: UploaderFeedbackMessage[];
    isRtl: boolean;
    readFolder: boolean;
    isUploadLimitExceed: boolean;
    isFoldersAllowed: boolean;
    uploaderTextsDefault: UploaderTexts;
    folderUploadingForbiddenMsg: string;
    /**
     * Sets uploader mode (please use UploaderMode enum to set the mode): <br/><span><b>UploaderMode.Auto</b> - upload files at once they have been added to uploader</span><br/><span><b>UploaderMode.Manual</b> - upload files manually (use startUploading method of Uploader Component)</span>.
     * @docs-default UploaderMode.Manual
     */
    uploadMode: UploaderMode;
    /**
     * Sets uploader selection mode (please use UploaderSelectionMode enum to set the mode): <br/><span><b>UploaderSelectionMode.File</b> - allows to select and upload only files</span><br/><span><b>UploaderSelectionMode.Directory</b> - allows to select and upload only folders</span><br/><span><b>UploaderSelectionMode.Both</b> - allows to select and upload both files and folders.</span>.
     * @docs-default UploaderSelectionMode.File
     */
    selectionMode: UploaderSelectionMode;
    /**
     * Enables "Attach" button to open file dialog window.
     * @docs-default true
     */
    enableFileDialog: boolean;
    /**
     * Defines what kind of file types allowed for upload. By default - all file types available.
     * @docs-default []
     */
    allowedTypes: string[];
    /**
     * Defines what kind of file types forbidden for upload. By default - all file types available.
     * @docs-default []
     */
    forbiddenTypes: string[];
    /**
     * Forbids parallel uploading. In this case files would be uploaded one by one.
     * @docs-default false
     */
    suppressParallel: boolean;
    /**
     * Limits the count of files which could be added to uploader.
     * @docs-default 1
     */
    filesCount: number;
    /**
     * Allows or forbids duplicates of files to be added to uploader (by file name).
     * @docs-default false
     */
    allowDuplicates: boolean;
    /**
     * Allows or forbids appearing alert about browser support of folders upload.
     * @docs-default true
     */
    showUploadFolderAlert: boolean;
    /**
     * Limits the count of added and/or uploaded files to show in the show more state.
     * @docs-default 3
     */
    visibleFiles: number;
    /**
     * Sets the ability to use component several time.
     * @docs-default false
     */
    reusable: boolean;
    /**
     * Sets the ability to remove uploaded files from server.
     * @docs-default true
     */
    allowDeletion: boolean;
    /**
     * Overrides server error responses.
     * @docs-default true
     */
    customErrors: boolean;
    /**
     * Shows indeterminate loading indicator on file uploading.
     * @docs-default false
     */
    indeterminateFileLoader: boolean;
    /**
     * Sets up the url address for files uploading. If you don't use URL parameter then you should set up service for uploading.
     * @docs-default
     */
    url: string;
    /**
     * Sets up the url address for files deleting. If you don't use URL parameter then you should set up service for removing.
     * @docs-default
     */
    deleteUrl: string;
    /**
     * Sets the target drop area to start animate uploader container.
     * @docs-default
     */
    droppableArea: HTMLElement;
    /**
     * When set to true, allows usage of custom method for file download instead of standard "download" attribute.
     * Please pay attention, if "downloadURL" property is provided for the uploaded file, component will be used with default "download" attribute.
     * @docs-default false
     * @since v10.6.0
     */
    enableCustomDownload: boolean;
    /**
     * Reference to callback function that will be invoked to download uploaded file.
     * @docs-default
     * @since v10.6.0
     */
    customDownload: (file: FileObj) => void;
    /**
     * When specified, allows popover item of the warning messages to be attached to the body.
     * @docs-default false
     * @since v10.12.0
     */
    popoverAppendToBody: boolean;
    /**
     * When specified, provides an information about file type restrictions.
     * @docs-default true
     * @since v10.14.0
     */
    showTypesRestriction: boolean;
    /**
     * When specified, provides an information about min file size restrictions.
     * @docs-default true
     * @since v10.14.0
     */
    showMinSizeRestriction: boolean;
    /**
     * When specified, provides an information about max file size restrictions.
     * @docs-default true
     * @since v10.14.0
     */
    showMaxSizeRestriction: boolean;
    /**
     * When specified, provides an information about max files count restrictions.
     * @docs-default true
     * @since v10.14.0
     */
    showFilesCountRestriction: boolean;
    /**
     * Configurable object for component's text.
     * @docs-default {}
     */
    set texts(value: UploaderTexts);
    get texts(): UploaderTexts;
    /**
     * Sets up icons for an appropriate file types. <br />
     * Component includes pre-defined icons for file extensions: <br />.docx, .doc, .xls, .xlsx, .ppt, .pptx, .zip, .7z, .dmg, .rar, .jpg, .jpeg, .png, .bmp, .gif, .avi, .pdf.
     * @docs-default {}
     */
    set icons(value: KeyValueObject<Icon>);
    get icons(): KeyValueObject<Icon>;
    /**
     * Configurable object for errors on file upload.
     * @docs-default {}
     */
    set fileErrors(value: FileErrors);
    get fileErrors(): FileErrors;
    /**
     * Enables drag area for receiving files.
     * @docs-default true
     */
    set enableDnD(value: boolean);
    get enableDnD(): boolean;
    /**
     * Limits the size of files which could be uploaded. The same parsing behavior as for chunkSize.
     * @docs-default 20 MB
     */
    set maxFileSize(value: string);
    get maxFileSize(): string;
    /**
     * Prevents files that are smaller in size to be uploaded. If value is not set, empty files are allowed. The same parsing behavior as for chunkSize.
     * @docs-default
     * @since v10.9.0
     */
    set minFileSize(value: string);
    get minFileSize(): string;
    /**
     The size of the chunk on which file would be divided during uploading. <br />By default it is 1MB chunk. <br />
     You could use string value of the size, for instance, '100 KB' or '100KB'. Also, you could use value without suffix: '1000', in this case it would be equal '1000 B'. <br /> <br />
     In case if 'null' passed it means that file should be loaded as one chunk. <br /> Also the response may have different interface based on 'observe' option passed to 'http.post()' method. <br/>
     More information can be found here:<br/> <a href="https://angular.io/api/common/http/HttpClient#options" target="_blank">https://angular.io/api/common/http/HttpClient#options</a></li><br/> <a href="https://angular.io/api/common/http/HttpResponse" target="_blank">https://angular.io/api/common/http/HttpResponse</a></li>
     * @docs-default 1 MB
     * @since v10.9.0
     */
    set chunkSize(value: string);
    get chunkSize(): string;
    /**
     * Fires before the file dialog has been opened.
     */
    readonly beforeFileDialogOpen: EventEmitter<null>;
    /**
     * Fires after the file dialog has been opened.
     */
    readonly afterFileDialogOpen: EventEmitter<null>;
    /**
     * Array '<File>'. Fires before files have to be added to the uploader storage.
     */
    readonly beforeFilesAdded: EventEmitter<(File | FileSystemEntry)[]>;
    /**
     * Array '<File>'. Fires after files have been added to the uploader storage.
     */
    readonly afterFilesAdded: EventEmitter<FileObj[]>;
    /**
     * Fires when file data has been dropped to the drop area.
     */
    readonly dropped: EventEmitter<null>;
    /**
     * Fires when file data is dragging over the drop area.
     */
    readonly dragOver: EventEmitter<null>;
    /**
     * Fires when file starts uploading. Provides the file (FileObj) which started uploading.
     */
    readonly startFileUploading: EventEmitter<FileObj>;
    /**
     * Fires when file is uploading. Provides the file (FileObj) which is uploading.
     * @since v12.17.0
     */
    readonly processFileUploading: EventEmitter<FileObj>;
    /**
     * Fires when the file is totally uploaded to the server. Provides the file which ended uploading.
     */
    readonly endFileUploading: EventEmitter<FileObj>;
    /**
     * Fires when error appears during uploading. Provides the file (FileObj) which failed uploading and an error (HttpErrorResponse) while executing the request.
     */
    readonly errorFileUploading: EventEmitter<{
        file: FileObj;
        error: HttpErrorResponse;
    }>;
    /**
     * Fires when file has been uploaded.
     */
    readonly finishedFileUploading: EventEmitter<FileObj[]>;
    /**
     * Fires when file has been removed from the uploading queue.
     */
    readonly removedFileFromQueue: EventEmitter<FileObj>;
    /**
     * Fires when file has been deleted from the server.
     */
    readonly deletedFile: EventEmitter<FileObj>;
    /**
     * Fires when file(s) uploading process has been canceled.
     */
    readonly cancelUploading: EventEmitter<FileObj[]>;
    fileInput: ElementRef;
    droppableAreaBlock: ElementRef;
    dropEnter: ElementRef;
    dnd: ElementRef;
    drop: ElementRef;
    filesList: QueryList<AdaptUploaderItemComponent>;
    emptyTmpl: TemplateRef<any>;
    emptyReadonly: TemplateRef<any>;
    fileAttachmentControls: TemplateRef<any>;
    dndAnimationTmpl: TemplateRef<any>;
    /**
     * Reference on AdaptRxFeedbackComponent
     */
    adaptRxFeedbackRef: AdaptRxFeedbackComponent;
    private _uniqueId;
    /**
     * String for test id data attribute. For test purposes
     * @docs-default adapt-rx-uploader-${++nextUniqueId}
     * @since v10.6.0
     */
    testID: string;
    private _isComponentInFocus;
    private _chunkSize;
    private _maxFileSize;
    private _minFileSize;
    private _droppable;
    private _alreadyUsed;
    private _isDragOverMask;
    private _uploaded;
    private _currentFolder;
    private _enableDnD;
    private _texts;
    private _icons;
    private _fileErrors;
    private _animationPlayers;
    private _onDragEnter;
    private _onDragOver;
    private _onDragLeave;
    private _onDragDrop;
    get isEmptyFileAllowed(): boolean;
    /**
     * Files added to the fileManager service to be further uploaded
     * or files that have been already uploaded
     */
    get files(): FileObj[];
    /**
     * Whether amount of the uploaded files has been reached
     */
    get maxFileCountUploaded(): boolean;
    /**
     * Whether amount of the added to the component files has been reached
     */
    get maxFileCountSelected(): boolean;
    /**
     * Allows/Forbids to select multiple files for uploading
     */
    get isMultipleAllowed(): boolean;
    get selectFilesButtonTooltip(): string;
    /**
     * Whether further file(s) attachment is allowed
     */
    get isDisabledSelectBtn(): boolean;
    /**
     * Whether file(s) added to the component is currently uploading to the server
     */
    get isUploadingProcess(): boolean;
    /**
     * Represents files count added to the component - only for multiple upload
     */
    get filesAddedCount(): string;
    /**
     * Represents files count that have been already uploaded to the server,
     * available for multiple upload only
     */
    get filesUploadedCount(): string;
    /**
     * Represents folder name in which files search is currently running
     */
    get directorySearch(): string;
    /**
     * String to be shown once amount of dragged files exceeded the allowed files count
     */
    get uploadLimitExceed(): string;
    /**
     * Manages ability to select files via file dialog window
     */
    get isDisableFileDialog(): boolean;
    get isManualMode(): boolean;
    /**
     * Allows/Forbids files uploading depending on config properties
     */
    get allowFileUploading(): boolean;
    /**
     * Allows/Forbids directories uploading depending on config properties
     */
    get allowDirUploading(): boolean;
    /**
     * Whether file(s) uploading is allowed
     */
    get allowedUploading(): boolean;
    /**
     * Check if the control has UI error state
     */
    get hasDangerState(): boolean;
    get hasWarningState(): boolean;
    get fileMode(): UploaderSelectionMode.File;
    get dirMode(): UploaderSelectionMode.Directory;
    get mixMode(): UploaderSelectionMode.Both;
    constructor(ngControl: NgControl, _fileManager: FileManager, _iconService: IconManager, uploaderConfig: AdaptRxUploaderConfigService, _changeDetectorRef: ChangeDetectorRef, _renderer: Renderer2, _elRef: ElementRef, _dir: Directionality, _animationBuilder: AnimationBuilder, _injector: Injector, _keyValueDiffers: KeyValueDiffers, _ngZone: NgZone, document: any, // https://github.com/angular/angular/issues/20351
    ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    trackByFn(index: number, item: FileObj | UploaderFeedbackMessage): FileObj | UploaderFeedbackMessage;
    /**
     * Rewrite parent method
     */
    writeValue(value: FileObj[] | null): void;
    /**
     *  Cancels all files currently uploading
     */
    cancelAllUploads(): void;
    /**
     * Opens file dialog window for files selection, fires appropriate events
     */
    openFileDialog(isDir: boolean): void;
    onChangeFileInput(e: Event): void;
    removedFromQueue(file: FileObj): void;
    fileDeleted(file: FileObj): void;
    startUploading(): void;
    getTemplate(): TemplateRef<any>;
    /**
     * Implementation from the base class
     */
    protected _focusNativeElement(): void;
    private _initTextsObject;
    private _initFileErrorsObject;
    private _preventDefault;
    private _dataHasFiles;
    private _addAreaDragEvents;
    private _addDocumentDragEvents;
    private _removeAreaDragEvents;
    private _removeDocumentDragEvents;
    private _ondragEnter;
    private _ondragOver;
    private _ondragLeave;
    private _ondragDrop;
    private _resolveDroppedItems;
    private _getDirectory;
    private _getFile;
    private _addFilesEmission;
    private _addFiles;
    private _createAnimationPlayers;
    private _animateDndChange;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxUploaderComponent, [{ optional: true; self: true; }, { optional: true; self: true; }, { optional: true; self: true; }, null, null, null, null, null, null, null, null, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRxUploaderComponent, "adapt-rx-uploader", never, { "uploadMode": "uploadMode"; "selectionMode": "selectionMode"; "enableFileDialog": "enableFileDialog"; "allowedTypes": "allowedTypes"; "forbiddenTypes": "forbiddenTypes"; "suppressParallel": "suppressParallel"; "filesCount": "filesCount"; "allowDuplicates": "allowDuplicates"; "showUploadFolderAlert": "showUploadFolderAlert"; "visibleFiles": "visibleFiles"; "reusable": "reusable"; "allowDeletion": "allowDeletion"; "customErrors": "customErrors"; "indeterminateFileLoader": "indeterminateFileLoader"; "url": "url"; "deleteUrl": "deleteUrl"; "droppableArea": "droppableArea"; "enableCustomDownload": "enableCustomDownload"; "customDownload": "customDownload"; "popoverAppendToBody": "popoverAppendToBody"; "showTypesRestriction": "showTypesRestriction"; "showMinSizeRestriction": "showMinSizeRestriction"; "showMaxSizeRestriction": "showMaxSizeRestriction"; "showFilesCountRestriction": "showFilesCountRestriction"; "texts": "texts"; "icons": "icons"; "fileErrors": "fileErrors"; "enableDnD": "enableDnD"; "maxFileSize": "maxFileSize"; "minFileSize": "minFileSize"; "chunkSize": "chunkSize"; "testID": "testID"; }, { "beforeFileDialogOpen": "beforeFileDialogOpen"; "afterFileDialogOpen": "afterFileDialogOpen"; "beforeFilesAdded": "beforeFilesAdded"; "afterFilesAdded": "afterFilesAdded"; "dropped": "dropped"; "dragOver": "dragOver"; "startFileUploading": "startFileUploading"; "processFileUploading": "processFileUploading"; "endFileUploading": "endFileUploading"; "errorFileUploading": "errorFileUploading"; "finishedFileUploading": "finishedFileUploading"; "removedFileFromQueue": "removedFileFromQueue"; "deletedFile": "deletedFile"; "cancelUploading": "cancelUploading"; }, never, ["*"]>;
}
