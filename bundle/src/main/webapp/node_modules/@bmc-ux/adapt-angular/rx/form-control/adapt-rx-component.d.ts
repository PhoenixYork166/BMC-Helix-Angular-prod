import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { ReplaySubject, Subject } from 'rxjs';
import { AdaptTranslateService } from '../../common/i18n/index';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import * as i0 from "@angular/core";
export declare abstract class AdaptRxComponentDirective extends AdaptRadarAngularGenericDirective implements OnInit, OnChanges, OnDestroy, OnDestroy {
    ts: AdaptTranslateService;
    /**
     * The control name. It must be implemented by each concrete class.
     */
    protected abstract controlName: string;
    protected _uniqId: string;
    protected _id: string;
    protected _required: boolean;
    protected _disabled: boolean;
    protected _readonly: boolean;
    protected _autofocus: boolean;
    protected _ariaErrorMessage: string;
    protected _errorMessageId: string;
    /**
     * Stream that emits whenever the state of the control changes. Needs to run change detection.
     */
    readonly stateChanges$: Subject<void>;
    /**
     * Destroy subject
     */
    readonly destroy$: ReplaySubject<boolean>;
    /**
     * Native control name
     */
    name: string;
    /**
     * Control label text
     */
    label: string;
    /**
     * Control subLabel text
     */
    subLabel: string;
    /**
     * Required label text
     */
    requiredLabel: string;
    /**
     * Control [aria-label] attribute text
     */
    ariaLabel: string;
    /**
     * Control [aria-labeledby] attribute text
     */
    ariaLabelledby: string;
    /**
     * Control [aria-describedby] attribute text
     */
    ariaDescribedBy: string;
    /**
     * Control [tabindex] value
     */
    tabIndex: number;
    /**
     * String for test id data attribute. For test purposes
     */
    testID: string;
    /**
     * Control [id]. Returns autogenerated if the value wasn't set
     */
    get id(): string;
    set id(value: string);
    /**
     * Control [disabled] attribute. No needed if the control uses as reactive one
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * Control [readonly] attribute
     */
    get readonly(): boolean;
    set readonly(value: boolean);
    get nonInteractive(): boolean;
    /**
     * Control [autofocus] attribute
     */
    get autofocus(): boolean;
    set autofocus(value: boolean);
    /**
     * Control [aria-errormessage] attribute value
     * Important thing here is that 'aria-errormessage' attribute is work in tandem with 'aria-invalid'
     * Additional info can be found here - https://www.w3.org/TR/wai-aria/#aria-errormessage
     *
     * @since 11.3.0
     */
    get ariaErrorMessage(): string;
    set ariaErrorMessage(value: string);
    /**
     * Focus emitter
     */
    readonly onFocus: EventEmitter<FocusEvent>;
    /**
     * Blur emitter
     */
    readonly onBlur: EventEmitter<FocusEvent>;
    protected constructor(ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>, _entityName: AdaptRadarAngularCustomEventName);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * Callback on input focusHandler
     */
    focusHandler(event: FocusEvent): void;
    /**
     * Callback on input blurHandler
     */
    blurHandler(event: FocusEvent): void;
    /**
     * Method that will be invoked when the [autofocus] property is true
     * Must contain a logic for focusing native control element
     */
    protected abstract _focusNativeElement(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxComponentDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptRxComponentDirective, never, never, { "name": "name"; "label": "label"; "subLabel": "subLabel"; "requiredLabel": "requiredLabel"; "ariaLabel": "ariaLabel"; "ariaLabelledby": "ariaLabelledby"; "ariaDescribedBy": "ariaDescribedBy"; "tabIndex": "tabIndex"; "testID": "testID"; "id": "id"; "disabled": "disabled"; "readonly": "readonly"; "autofocus": "autofocus"; "ariaErrorMessage": "ariaErrorMessage"; }, { "onFocus": "onFocus"; "onBlur": "onBlur"; }, never>;
}
