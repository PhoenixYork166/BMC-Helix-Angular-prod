import type { WeekDay } from '@angular/common';
import { DateTimeKey } from '../../common/common.enums';
export interface RxDateStruct {
    [DateTimeKey.Year]: number;
    [DateTimeKey.Month]: number;
    [DateTimeKey.Date]: number;
}
export interface RxTimeStruct {
    [DateTimeKey.Hours]: number;
    [DateTimeKey.Minutes]: number;
    [DateTimeKey.Seconds]: number;
}
export interface RxDatetimeStructParseError {
    query?: string;
    mode?: RxDatetimePickerMode;
    locale?: string;
    hasSeconds?: boolean;
    use12HoursTime?: boolean;
}
export interface RxDatetimeStruct extends RxDateStruct, RxTimeStruct {
    [DateTimeKey.Milliseconds]?: number;
    [DateTimeKey.TimeZone]?: string;
    [DateTimeKey.Offset]?: number;
    parseError?: RxDatetimeStructParseError;
}
export interface RxDatetimeTexts {
    clock: {
        hhBtn: string;
        mmBtn: string;
        ssBtn: string;
        amBtn: string;
        pmBtn: string;
        hoursLabel: string;
        minutesLabel: string;
        secondsLabel: string;
        meridiemLabel: string;
    };
    emptyDate: string;
    emptyTime: string;
    emptyYear: string;
    emptyMonth: string;
    cancelBtn: string;
    clearBtn: string;
    nextBtn: string;
    applyBtn: string;
    calendarBtn: string;
    clockBtn: string;
    startRangeLabel: string;
    endRangeLabel: string;
    emptyStartRange: string;
    emptyEndRange: string;
}
export declare class RxCalendarDay {
    readonly index: number;
    value: RxDateStruct;
    isSelected: boolean;
    isToday: boolean;
    isOtherMonth: boolean;
    isDisabled: boolean;
    isRangeFrom: boolean;
    isRangeTo: boolean;
    isInRange: boolean;
    isReadonly: boolean;
    constructor(index: number);
}
export declare class RxCalendar {
    year: number;
    month: number;
    dayNames: string[];
    dayNamesShort: string[];
    monthNames: string[];
    monthNamesShort: string[];
    weeks: RxCalendarDay[][];
    days: RxCalendarDay[];
    currentMonthDaysCount: number;
}
export interface RxCalendarConfig {
    firstDayOfWeek?: WeekDay;
    year?: number;
    month?: number;
    activeDate?: RxDateStruct;
    dayFilter?: (date: RxDateStruct) => boolean;
    rangeFrom?: RxDateStruct;
    rangeTo?: RxDateStruct;
    disabled?: boolean;
    readonly?: boolean;
    hideControls?: boolean;
    expandedControlsStyle?: boolean;
    texts?: RxDatetimeTexts;
}
export declare class RxYear {
    value: number;
    isToday: boolean;
    isDisabled: boolean;
    isRangeFrom: boolean;
    isRangeTo: boolean;
    isInRange: boolean;
}
export declare class RxYearConfig {
    year?: number;
    activeYear?: number;
    filter?: (date: RxDateStruct) => boolean;
    disabled?: boolean;
    texts?: RxDatetimeTexts;
    rangeFrom?: number;
    rangeTo?: number;
}
export declare class RxMonth {
    value: RxDateStruct;
    name: string;
    isActive: boolean;
    isToday: boolean;
    isDisabled: boolean;
    isInRange: boolean;
    isRangeFrom: boolean;
    isRangeTo: boolean;
}
export declare class RxMonthConfig {
    activeValue?: RxDateStruct;
    filter?: (date: RxDateStruct) => boolean;
    disabled?: boolean;
    texts?: RxDatetimeTexts;
    rangeFrom?: RxDateStruct;
    rangeTo?: RxDateStruct;
}
export declare enum RxClockMode {
    Hours = 0,
    Minutes = 1,
    Seconds = 2
}
export declare enum RxClockFace {
    Hours24 = 0,
    Hours12 = 1,
    Minutes = 2,
    Seconds = 3
}
export interface RxClockConfig {
    activeMode?: RxClockMode;
    activeTime?: RxTimeStruct;
    initialTime?: RxTimeStruct;
    use12HoursTime?: boolean;
    hasSeconds?: boolean;
    disabled?: boolean;
    texts?: RxDatetimeTexts;
}
export interface RxClockFaceTick {
    value: number;
    uiValue: string;
    isDisabled: boolean;
}
export declare type RxClockFaceTicks = RxClockFaceTick[][];
export interface RxClockTouchPoint {
    angle: number;
    distanceFromCenter: number;
}
export declare enum RxDatetimePickerMode {
    DateTime = 0,
    Date = 1,
    Time = 2,
    YearMonth = 3,
    Year = 4,
    Month = 5
}
export declare enum RxDatetimePickerState {
    Date = 0,
    TimeHours = 1,
    TimeMinutes = 2,
    TimeSeconds = 3,
    Year = 4,
    Month = 5
}
export interface RxDatetimePickerConfig {
    mode?: RxDatetimePickerMode;
    hasSeconds?: boolean;
    use12HoursTime?: boolean;
    firstDayOfWeek?: WeekDay;
    initialDatetime?: RxDatetimeStruct;
    activeDatetime?: RxDatetimeStruct;
    dayFilter?: (date: RxDateStruct) => boolean;
    rangeFrom?: RxDateStruct;
    rangeTo?: RxDateStruct;
    disabled?: boolean;
    readonly?: boolean;
    texts?: RxDatetimeTexts;
}
