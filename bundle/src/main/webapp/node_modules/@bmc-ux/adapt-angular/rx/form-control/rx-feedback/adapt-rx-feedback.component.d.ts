import { ChangeDetectorRef, EventEmitter, OnDestroy } from '@angular/core';
import { ValidationErrors } from '@angular/forms';
import { FeedbackError, FeedbackMessage } from '../adapt-rx-form-control.types';
import { AdaptRxFeedbackService } from './adapt-rx-feedback.service';
import * as i0 from "@angular/core";
export declare class AdaptRxFeedbackComponent implements OnDestroy {
    private _changeDetectorRef;
    private _feedbackService;
    validationErrors: FeedbackError[];
    /**
     * The ID of element which error state should be described
     */
    ariaErrorMessage: string;
    /**
     * Errors object
     */
    set errors(value: ValidationErrors | null);
    /**
     * Indicator if control touched
     * Some of errors by default must be visible only if the control touched
     */
    set controlTouched(value: boolean);
    /**
     * Success message
     */
    successMessage: string;
    /**
     * Warning message
     */
    warningMessage: string;
    /**
     * Show feedback messages with alert style
     */
    alertFeedbackStyle: boolean;
    /**
     * Enable alert truncation.
     * Available only for [alertFeedbackStyle]
     */
    alertFeedbackTruncation: boolean;
    /**
     * The event firing when the component shows error state
     */
    readonly messageAppeared: EventEmitter<FeedbackMessage>;
    private _rawErrors;
    private _isTouched;
    private _checkForErrors$;
    private _destroyed$;
    constructor(_changeDetectorRef: ChangeDetectorRef, _feedbackService: AdaptRxFeedbackService);
    ngOnDestroy(): void;
    /**
     * Check if the error state is being
     */
    get hasUIErrorState(): boolean;
    /**
     * Check if it must be success message be shown
     */
    get hasSuccessStateMessage(): boolean;
    /**
     * Check if there are errors
     */
    protected _checkForErrors(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxFeedbackComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRxFeedbackComponent, "adapt-rx-feedback", never, { "ariaErrorMessage": "ariaErrorMessage"; "errors": "errors"; "controlTouched": "controlTouched"; "successMessage": "successMessage"; "warningMessage": "warningMessage"; "alertFeedbackStyle": "alertFeedbackStyle"; "alertFeedbackTruncation": "alertFeedbackTruncation"; }, { "messageAppeared": "messageAppeared"; }, never, never>;
}
