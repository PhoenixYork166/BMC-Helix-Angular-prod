import { ElementRef, EventEmitter, Renderer2 } from '@angular/core';
import { AdaptDeviceDetectionService } from '../../../common/device-detection.service';
import { AdaptRadarAngularService, AdaptRadarAngularGenericDirective } from '../../../common/radar/adapt-radar';
import { AdaptRxRatingConfigService } from '../adapt-rx-rating-config.service';
import { RxRatingBinaryAction, RxRatingBinaryChangeEvent, RxRatingBinaryTexts, RxRatingBinaryType } from '../adapt-rx-rating.types';
import * as i0 from "@angular/core";
export declare class AdaptRxRatingBinaryComponent extends AdaptRadarAngularGenericDirective {
    private _renderer;
    protected _adaptRadarService: AdaptRadarAngularService;
    private _deviceDetectionService;
    UI_TYPE: typeof RxRatingBinaryType;
    UI_ACTION: typeof RxRatingBinaryAction;
    toggle: boolean;
    showMessage: string;
    showBtnValue: string;
    uiTexts: RxRatingBinaryTexts;
    isMobile: boolean;
    showUndo: boolean;
    /**
     * The mode of component
     * @docs-default RxRatingBinaryType.Text
     */
    type: RxRatingBinaryType;
    /**
     * Value for RxRatingBinaryType.Count mode
     * @docs-default 0
     */
    value: number;
    /**
     * UI Texts
     * @docs-default AdaptRxRatingConfigService.texts.binary
     */
    set texts(newTexts: RxRatingBinaryTexts);
    /**
     * @docs-default
     */
    testID: string;
    /**
     * @docs-default
     */
    analyticsMetadata: {
        label: string;
    };
    /**
     * An event fired when a user selects a new rating.
     */
    readonly onRateChange: EventEmitter<RxRatingBinaryChangeEvent>;
    ratingContainerRef: ElementRef<HTMLElement>;
    private _savedValue;
    constructor(_renderer: Renderer2, rxRatingConfigService: AdaptRxRatingConfigService, _adaptRadarService: AdaptRadarAngularService, _deviceDetectionService: AdaptDeviceDetectionService, _elem: ElementRef<HTMLElement>);
    processAction(action: RxRatingBinaryAction, event: MouseEvent): void;
    ratingBlockAnimationStateChange(ratingBlockAnimationState: boolean): void;
    private _setHostStyles;
    private _toggleState;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxRatingBinaryComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRxRatingBinaryComponent, "adapt-rx-rating-binary", never, { "type": "type"; "value": "value"; "texts": "texts"; "testID": "testID"; "analyticsMetadata": "analyticsMetadata"; }, { "onRateChange": "onRateChange"; }, never, ["*"]>;
}
