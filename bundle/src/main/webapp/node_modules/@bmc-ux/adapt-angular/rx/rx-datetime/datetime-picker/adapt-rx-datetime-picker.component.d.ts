import { AfterViewInit, ChangeDetectorRef, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import type { WeekDay } from '@angular/common';
import { AdaptDeviceDetectionService } from '../../../common/device-detection.service';
import { AdaptRxDatetimeConfigService } from '../adapt-rx-datetime-config.service';
import { AdaptRxDatetimeI18nService } from '../adapt-rx-datetime-i18n.service';
import { RxCalendarConfig, RxClockConfig, RxClockMode, RxDateStruct, RxDatetimePickerConfig, RxDatetimePickerMode, RxDatetimePickerState, RxDatetimeStruct, RxDatetimeTexts, RxMonthConfig, RxYearConfig } from '../adapt-rx-datetime.types';
import * as i0 from "@angular/core";
export declare class AdaptRxDatetimePickerComponent implements OnChanges, AfterViewInit {
    private _i18n;
    private _changeDetectorRef;
    localeID: string;
    today: RxDatetimeStruct;
    CLOCK_MODE: typeof RxClockMode;
    yearConfig: RxYearConfig;
    monthConfig: RxMonthConfig;
    calendarConfig: RxCalendarConfig;
    clockConfig: RxClockConfig;
    config: RxDatetimePickerConfig;
    mode: RxDatetimePickerMode;
    expandedControlsStyle: boolean;
    hasSeconds: boolean;
    use12HoursTime: boolean;
    firstDayOfWeek: WeekDay;
    initialDatetime: RxDatetimeStruct;
    activeDatetime: RxDatetimeStruct;
    dayFilter: (date: RxDateStruct) => boolean;
    rangeFrom: RxDatetimeStruct;
    rangeTo: RxDatetimeStruct;
    disabled: boolean;
    readonly: boolean;
    texts: RxDatetimeTexts;
    testID: string;
    readonly pickerValueChange: EventEmitter<RxDatetimeStruct>;
    readonly pickerStateChange: EventEmitter<RxDatetimePickerState>;
    hideDatePickerSummary: boolean;
    timeMode: boolean;
    monthMode: boolean;
    publicApi: {
        nextStep: () => void;
        isLastStep: () => boolean;
    };
    private _pickerState;
    private _isLastPickerState;
    readonly _isMobile: boolean;
    constructor(_datetimeConfigService: AdaptRxDatetimeConfigService, _i18n: AdaptRxDatetimeI18nService, _changeDetectorRef: ChangeDetectorRef, deviceDetectionService: AdaptDeviceDetectionService, localeID: string);
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    get hasCalendar(): boolean;
    get dateSummary(): string;
    onDateChange(value: RxDateStruct): void;
    get hasClockPicker(): boolean;
    get timeSummary(): {
        h: string;
        m: string;
        s: string;
        a: string;
    };
    get timePickerActive(): boolean;
    changeClockMode(mode: RxClockMode, event?: FocusEvent): void;
    toggleTimeMode(newState?: boolean, event?: FocusEvent): void;
    timeUnitInput(event: Event, mode: RxClockMode): void;
    timeUnitKeydown(event: KeyboardEvent, mode: RxClockMode): void;
    changeMeridiem(): void;
    onClockValueChange(value: number, mode: RxClockMode): void;
    get hasYearPicker(): boolean;
    get yearSummary(): string;
    onYearChange(value: number): void;
    get hasMonthPicker(): boolean;
    get monthSummary(): string;
    get monthPickerActive(): boolean;
    toggleMonthMode(newState?: boolean): void;
    changeMonthViaKeyboard(event: KeyboardEvent): void;
    onMonthChange(value: RxDateStruct): void;
    private _nextStep;
    private _isLastStep;
    private _emitValueChange;
    private _emitPickerStateChange;
    private _checkMobileInputFocus;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxDatetimePickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRxDatetimePickerComponent, "adapt-rx-datetime-picker", never, { "mode": "mode"; "expandedControlsStyle": "expandedControlsStyle"; "hasSeconds": "hasSeconds"; "use12HoursTime": "use12HoursTime"; "firstDayOfWeek": "firstDayOfWeek"; "initialDatetime": "initialDatetime"; "activeDatetime": "activeDatetime"; "dayFilter": "dayFilter"; "rangeFrom": "rangeFrom"; "rangeTo": "rangeTo"; "disabled": "disabled"; "readonly": "readonly"; "texts": "texts"; "testID": "testID"; }, { "pickerValueChange": "pickerValueChange"; "pickerStateChange": "pickerStateChange"; }, never, ["*"]>;
}
