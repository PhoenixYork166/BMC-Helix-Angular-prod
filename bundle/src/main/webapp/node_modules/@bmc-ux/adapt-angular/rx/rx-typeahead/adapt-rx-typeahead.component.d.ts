import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { OperatorFunction } from 'rxjs';
import { PlacementArray } from '../../common/positioning';
import { AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { AdaptDropdownDirective } from '../../dropdown/index';
import { AdaptRxFeedbackComponent, AdaptRxFormControlDirective, FormControlSize } from '../form-control/index';
import { RxTypeaheadOption, RxTypeaheadResultTemplateContext, RxTypeaheadSelectItemEvent } from './adapt-rx-typeahead.types';
import { AdaptRxTypeaheadConfigService } from './adapt-rx-typeahead-config.service';
import { AdaptTranslateService } from '../../common/i18n/index';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import { KeyValueObject } from '../../common/common.models';
import * as i0 from "@angular/core";
export declare class AdaptRxTypeaheadComponent extends AdaptRxFormControlDirective implements OnInit, OnDestroy, OnChanges {
    private _renderer;
    private _ngZone;
    ts: AdaptTranslateService;
    private _deviceDetector;
    protected controlName: string;
    term: string;
    results: RxTypeaheadOption[];
    activeResultIndex: number;
    activeDescendant: string;
    isMobileOrTablet: boolean;
    emptyResultMessage: string;
    readonly RESULT_ACTIVE_CLASS: string;
    /**
     * The value for the "autocomplete" attribute for the "<input>" element
     * @docs-default off
     */
    autocomplete: string;
    /**
     * A placeholder string for the input filed
     * @docs-default
     */
    placeholder: string;
    /**
     * Allows using a custom entered text as a model value.
     * In case if there is no matched options with entered value
     * @docs-default false
     */
    editable: boolean;
    /**
     * Hold focus on the first result item while typing
     * @docs-default true
     */
    focusFirst: boolean;
    /**
     *  After menu close, restore focus the element which was in focus before menu open
     *  @docs-default false
     */
    restoreFocusAfterClose: boolean;
    /**
     * The function that converts an item from the result list to a "string" to display in the "<input>" field
     * @docs-default item
     */
    inputFormatter: (item: RxTypeaheadOption) => string;
    /**
     * The function that converts a stream of text values from the "<input>" element to the stream of the array of result items.
     * Use it instead of (text: Observable<string>) => Observable<any[]> as it provides better type-checking
     * @docs-default
     */
    typeahead: OperatorFunction<string, RxTypeaheadOption[]>;
    /**
     * The function that converts an item from the result list to a "string" to display in the popup
     * @docs-default item
     */
    resultFormatter: (item: RxTypeaheadOption) => string;
    /**
     * The template to override the way resulting items are displayed in the popup
     * @docs-default
     */
    resultTemplate: TemplateRef<RxTypeaheadResultTemplateContext>;
    /**
     * Show the hint in the "<input>" when an item in the result list matches
     * @docs-default false
     */
    showHint: boolean;
    /**
     * The preferred placement of the typeahead
     * @docs-default bottom-left
     */
    placement: PlacementArray;
    /**
     * Attach popup to the body
     * @docs-default false
     */
    appendToBody: boolean;
    /**
     * Control size
     * @docs-default default
     */
    size: FormControlSize;
    /**
     * Max height in pixels for the popup before scroll visible. On mobile max height calculates automatically
     * @docs-default 200
     */
    popupMaxHeight: number;
    /**
     * Use disable styles for readonly state
     * @docs-default false
     */
    disabledStyleForReadonlyState: boolean;
    /**
     * Use to toggle virtual scroll feature to render results. Can be suitable for big amount of results
     * @docs-default false
     */
    virtualScroll: boolean;
    /**
     * Set <b>[itemSize]</b> input for virtual scroll feature. More info can be found here - <a href="https://material.angular.io/cdk/scrolling/api" target="_blank">https://material.angular.io/cdk/scrolling/api</a>
     * @docs-default 32
     */
    virtualScrollItemSize: number;
    /**
     * Minimum amount of content buffer (in pixels) that the viewport must render.
     * @docs-default 400
     */
    minBufferPx: number;
    /**
     * Configures how much buffer space to render back up to when it detects that more buffer is required.
     * @docs-default 1200
     */
    maxBufferPx: number;
    /**
     * Use to set results dropdown height. On mobile height calculates automatically
     * @docs-default 13.75rem
     */
    virtualScrollDropdownHeight: string;
    /**
     * Custom class for the dropdown menu
     * @docs-default
     * @since v10.11.0
     */
    popupClass: string;
    /**
     * Popup width. By default, it calculates automatically:
     * it takes the width of the input element if it's more than 200px, otherwise has 200px width.
     * @docs-default
     * @since v10.15.0
     */
    popupWidth: string;
    /**
     * Offset from the top edge of the viewport during auto-scroll when focusing on input on mobile devices.
     * To disable autoscroll need to pass 'null'.
     * @docs-default 0
     * @since v11.2.0
     */
    mobileFocusAutoscrollTopOffset: number;
    /**
     * Allow showing the empty result message if no items to display
     * @docs-default false
     * @since v11.8.0
     */
    showEmptyResultMessage: boolean;
    /**
     * The message that will be shown under the result list if at least one result item exists
     * @docs-default
     * @since v11.8.0
     */
    resultStatusMessage: string;
    /**
     * Control clear button visibility
     * @docs-default true
     *
     * @since v12.15.0
     */
    showClearButton: boolean;
    /**
     * Clear button text (sr-only)
     * @docs-default Clear
     *
     * @since v12.15.0
     */
    clearButtonText: string;
    /**
     * An event emitted right before an item is selected from the result list.
     */
    readonly onSelectItem: EventEmitter<RxTypeaheadSelectItemEvent>;
    /**
     * Native input reference
     */
    inputRef: ElementRef<HTMLInputElement>;
    typeaheadContainer: ElementRef<HTMLDivElement>;
    /**
     * Popup reference
     */
    popup: AdaptDropdownDirective;
    /**
     * Reference on AdaptRxFeedbackComponent
     */
    adaptRxFeedbackRef: AdaptRxFeedbackComponent;
    private _subscription;
    private _closed$;
    private _inputValueBackup;
    private _valueChanges;
    private _resubscribeTypeahead;
    private _removeVisualViewportResizeListener;
    private _lastKeyCode;
    private _inputWidth;
    private _inputInFocus;
    /**
     * Indicates if input was changed after selection from listbox.
     */
    private _inputValueChanged;
    constructor(ngControl: NgControl, _renderer: Renderer2, _ngZone: NgZone, adaptRxTypeaheadConfigService: AdaptRxTypeaheadConfigService, _changeDetectorRef: ChangeDetectorRef, ts: AdaptTranslateService, _deviceDetector: AdaptDeviceDetectionService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    get popupId(): string;
    /**
     * Check if the control has UI error state
     */
    get hasDangerState(): boolean;
    /**
     * Check if component should have success appearance if no errors
     */
    get hasSuccessState(): boolean;
    /**
     * Get active result value
     */
    get activeResult(): RxTypeaheadOption;
    /**
     * Own instance implementation of writeValue from ControlValueAccessor
     */
    writeValue(value: RxTypeaheadOption): void;
    /**
     * Dismisses typeahead popup window
     */
    dismissPopup(): void;
    /**
     * Handle native input (blur) event
     */
    blurHandler(event: FocusEvent): void;
    focusHandler(event: FocusEvent): void;
    getDropdownStyles(): KeyValueObject;
    /**
     * Handle native input (keydown) event
     */
    inputKeydownHandler(event: KeyboardEvent): void;
    /**
     * Select result
     */
    selectResult(item: string): void;
    trackByForResults(index: number, item: RxTypeaheadOption): RxTypeaheadOption;
    clearSearchValue(): void;
    /**
     * Implementation from the base class
     */
    protected _focusNativeElement(): void;
    /**
     * Check if active result present
     */
    private _hasActiveResult;
    /**
     * Activate the next result from results list
     */
    private _activateNextResult;
    /**
     * Activate the prev result from results list
     */
    private _activatePrevResult;
    /**
     * Reset active result
     */
    private _resetActiveResult;
    /**
     * Active result changed
     */
    private _activeResultChanged;
    /**
     * Scroll to active result item
     */
    private _scrollToActiveResultItem;
    /**
     * Open result's popup
     */
    private _openPopup;
    /**
     * Close result's popup
     */
    private _closePopup;
    /**
     * Select result and propagate change
     */
    private _selectResult;
    /**
     * Show hint in the input
     * @param onlyFromStart - indicate that hint should display only if input value is a start of proposal values.
     * For example, if onlyFromStart = true, then on "app" input "apple" hint would be shown, "pineapple" would not.
     */
    private _showHint;
    /**
     * Returns formatted item if [inputFormatter] defined or toString(item)
     */
    private _getFormattedItemForInput;
    /**
     * Write value to native input
     */
    private _writeInputValue;
    /**
     * Subscribe to native control (input) event
     */
    private _subscribeToUserInput;
    /**
     * Unsubscribe from native control (input) event
     */
    private _unsubscribeFromUserInput;
    private _unsubscribeFromVisualViewportResize;
    private _setValueFromProposal;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxTypeaheadComponent, [{ optional: true; self: true; }, null, null, null, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRxTypeaheadComponent, "adapt-rx-typeahead", never, { "autocomplete": "autocomplete"; "placeholder": "placeholder"; "editable": "editable"; "focusFirst": "focusFirst"; "restoreFocusAfterClose": "restoreFocusAfterClose"; "inputFormatter": "inputFormatter"; "typeahead": "typeahead"; "resultFormatter": "resultFormatter"; "resultTemplate": "resultTemplate"; "showHint": "showHint"; "placement": "placement"; "appendToBody": "appendToBody"; "size": "size"; "popupMaxHeight": "popupMaxHeight"; "disabledStyleForReadonlyState": "disabledStyleForReadonlyState"; "virtualScroll": "virtualScroll"; "virtualScrollItemSize": "virtualScrollItemSize"; "minBufferPx": "minBufferPx"; "maxBufferPx": "maxBufferPx"; "virtualScrollDropdownHeight": "virtualScrollDropdownHeight"; "popupClass": "popupClass"; "popupWidth": "popupWidth"; "mobileFocusAutoscrollTopOffset": "mobileFocusAutoscrollTopOffset"; "showEmptyResultMessage": "showEmptyResultMessage"; "resultStatusMessage": "resultStatusMessage"; "showClearButton": "showClearButton"; "clearButtonText": "clearButtonText"; }, { "onSelectItem": "onSelectItem"; }, never, never>;
}
