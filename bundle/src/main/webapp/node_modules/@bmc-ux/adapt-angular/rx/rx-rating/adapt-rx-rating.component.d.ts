import { ChangeDetectorRef, ElementRef, EventEmitter, OnInit, QueryList } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import { AdaptTranslateService } from '../../common/i18n/index';
import { AdaptRxFeedbackComponent, AdaptRxFormControlDirective } from '../form-control/index';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { AdaptRxRatingConfigService } from './adapt-rx-rating-config.service';
import { RxRating, RxRatingSize, RxRatingTexts } from './adapt-rx-rating.types';
import * as i0 from "@angular/core";
export declare class AdaptRxRatingComponent extends AdaptRxFormControlDirective implements OnInit {
    ts: AdaptTranslateService;
    private _deviceDetectionService;
    static DefaultMaxValue: number;
    analyticsComponentName: typeof AdaptRadarAngularCustomEventName;
    protected controlName: string;
    UI_SIZE: typeof RxRatingSize;
    ratingList: RxRating[];
    currentRating: number;
    uiTexts: RxRatingTexts;
    isMobile: boolean;
    /**
     * Specifies the size of the rating. Supported values: "xtra-small", "small", "medium", ""large"
     * @docs-default RxRatingSize.xs
     */
    size: RxRatingSize;
    /**
     * Maximal rating that can be given using this widget.
     * @docs-default 5
     */
    get maxValue(): number;
    set maxValue(v: number);
    /**
     * UI Texts
     * @docs-default AdaptRxRatingConfigService.texts.rating
     */
    set texts(newTexts: RxRatingTexts);
    rateButtonRefList: QueryList<ElementRef<HTMLButtonElement>>;
    /**
     * Reference on AdaptRxFeedbackComponent
     */
    adaptRxFeedbackRef: AdaptRxFeedbackComponent;
    /**
     * An event fired when a user selects a new rating.
     */
    readonly onRateChange: EventEmitter<number>;
    /**
     * An event fired when a user is hovering over a given rating.
     */
    readonly onHoverChange: EventEmitter<number>;
    /**
     * An event fired when the cursor left rating area.
     */
    readonly onLeaveChange: EventEmitter<number>;
    private _maxValue;
    private _rate;
    constructor(ngControl: NgControl, rxRatingConfigService: AdaptRxRatingConfigService, _changeDetectorRef: ChangeDetectorRef, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService, _deviceDetectionService: AdaptDeviceDetectionService, _elem: ElementRef<HTMLElement>);
    /**
     * Check if the control has UI error state
     */
    get hasDangerState(): boolean;
    ngOnInit(): void;
    get rate(): number;
    set rate(v: number);
    onRatingItemClick(value: number, event: MouseEvent | KeyboardEvent): void;
    onRatingItemMouseEnter(value: number): void;
    reset(): void;
    blurHandler(event: FocusEvent): void;
    writeValue(value: any): void;
    protected _focusNativeElement(): void;
    private _updateValue;
    private _getValueInRange;
    private _updateState;
    private _createArrayList;
    private _getFillValue;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxRatingComponent, [{ optional: true; self: true; }, null, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRxRatingComponent, "adapt-rx-rating", never, { "size": "size"; "maxValue": "maxValue"; "texts": "texts"; }, { "onRateChange": "onRateChange"; "onHoverChange": "onHoverChange"; "onLeaveChange": "onLeaveChange"; }, never, never>;
}
