import { TemplateRef } from '@angular/core';
import { PlacementArray } from '../../common/positioning';
import { AdaptRxControlLabelTooltip } from '../form-control/index';
export declare type RxSelectOption = {
    [key: string]: any;
} | any;
export declare type RxSelectedOptionsMap = Map<string, RxSelectOption>;
export interface RxSelectOptionsGroup {
    name?: string;
    children: RxSelectOption[];
}
export interface RxSelectionChangeEvent {
    /**
     * The item from the options list about to be selected.
     */
    options: RxSelectOption[];
    /**
     * Calling this function will prevent item selection from happening.
     */
    preventDefault: () => void;
}
export interface RxSelectIndexedOption {
    index: number;
    option: RxSelectOption;
}
export interface RxSelectIndexedOptionsGroup {
    name?: string;
    index: number;
    groupIndex: number;
    children: RxSelectIndexedOption[];
}
/**
 * Will be removed after completely moving to rx-select
 */
export interface SelectTexts {
    checkAll?: string;
    checkAllFilter?: string;
    uncheckAll?: string;
    uncheckAllFilter?: string;
    filteredTo?: string;
    checkedAll?: string;
    checked?: string;
    checkedPlural?: string;
    searchPlaceholder?: string;
    defaultTitle?: string;
    headerText?: string;
    headerTextSingle?: string;
    notFound?: string;
    requiredText?: string;
    cancelBtnText?: string;
    doneBtnText?: string;
    titleMobileText?: string;
    numberOptionsText?: string;
    loadingText?: string;
    emptyOptionText?: string;
    loadMore?: string;
    emptyStateTitle?: string;
    emptyStateDescription?: string;
    pressTabToGoToLoadMoreButton?: string;
}
/**
 * Will be removed after completely moving to rx-select
 */
export declare enum SelectModelFormat {
    number = "number",
    object = "object"
}
export interface RxSelectSettings {
    enableFilter?: boolean;
    closeOnSelect?: boolean;
    deselectAllButton?: boolean;
    selectAllButton?: boolean;
    popupMaxHeight?: string | number;
    appendToBody?: boolean;
    emptyOption?: boolean;
    pageSize?: number;
    focusFirst?: boolean;
    singleSelectStyle?: 'line' | 'marker';
    ariaInvalid?: boolean;
    loadMoreButton?: boolean;
    loadMoreInProgress?: boolean;
    loadingState?: boolean;
    warningMessage?: string;
    name?: string;
    label?: string;
    subLabel?: string;
    requiredLabel?: string;
    ariaLabel?: string;
    ariaLabelledby?: string;
    ariaDescribedBy?: string;
    tabIndex?: number;
    id?: string;
    disabled?: boolean;
    readonly?: boolean;
    autofocus?: boolean;
    ariaErrorMessage?: string;
    optionContentTemplate?: TemplateRef<{
        $implicit: RxSelectOption;
    }>;
    tooltip?: AdaptRxControlLabelTooltip;
    placement?: PlacementArray;
    inline?: boolean;
    multiple?: boolean;
    texts?: SelectTexts;
    loadMoreCallback?: () => void;
    optionFormatter?: (option: RxSelectOption[]) => string;
    disabledOptionResolver?: (option: RxSelectOption) => boolean;
    titleFormatter?: (option: RxSelectOption[]) => string;
}
