import { RxDatetimePickerMode, RxDatetimeStruct } from './adapt-rx-datetime.types';
import * as i0 from "@angular/core";
export declare function ADAPT_RX_DATETIME_PARSER_FORMATTER_FACTORY(locale: string): AdaptRxDatetimeDefaultParserFormatter;
/**
 * An abstract service for parsing and formatting dates
 * Converts between the internal `RxDatetimeStruct` model presentation and a `string` that is displayed in the input element.
 *
 * When user types something in the input this service attempts to parse it into a `RxDatetimeStruct` object.
 * And vice versa, when users selects date/time in the picker, it must be displayed as a `string` in the input.
 *
 * Default implementation uses the Date.parse, but you can provide another implementation via DI
 * to use an alternative string format or a custom parsing logic.
 *
 */
export declare abstract class AdaptRxDatetimeParserFormatter {
    /**
     * Parses the given `string` to an `RxDatetimeStruct`.
     *
     * Implementations should try their best to provide a result, even
     * partial. They must return `null` if the activeTime can't be parsed.
     */
    abstract parse(value: string, mode: RxDatetimePickerMode, hasSeconds?: boolean, use12hoursTime?: boolean, locale?: string, inputFormat?: string): RxDatetimeStruct | null;
    /**
     * Formats the given `RxDatetimeStruct` to a `string`.
     *
     * Implementations should return an empty string if the given activeTime is `null`,
     * and try their best to provide a partial result if the given activeTime is incomplete or invalid.
     */
    abstract format(date: RxDatetimeStruct | null, mode: RxDatetimePickerMode, hasSeconds?: boolean, use12hoursTime?: boolean, locale?: string, inputFormat?: string): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxDatetimeParserFormatter, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AdaptRxDatetimeParserFormatter>;
}
export declare class AdaptRxDatetimeDefaultParserFormatter extends AdaptRxDatetimeParserFormatter {
    private _locale;
    private _timePeriodRegex;
    private _hour12Regex;
    private _hour24Regex;
    private _storedLocale;
    private _storedDateTimeFormats;
    private _storedYearFormats;
    private _storedMonthFormats;
    private _storedYearMonthFormats;
    constructor(_locale: string);
    parse(value: string, mode: RxDatetimePickerMode, hasSeconds?: boolean, use12hoursTime?: boolean, locale?: string, inputFormat?: string): RxDatetimeStruct | null;
    format(dateParts: RxDatetimeStruct | null, mode: RxDatetimePickerMode, hasSeconds?: boolean, use12hoursTime?: boolean, locale?: string, inputFormat?: string): string;
    private _getCustomTimeFormat;
    private _getCustomDateTimeFormat;
    private _getCustomDateTimeFormats;
    private _use12hoursFormat;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxDatetimeDefaultParserFormatter, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AdaptRxDatetimeDefaultParserFormatter>;
}
