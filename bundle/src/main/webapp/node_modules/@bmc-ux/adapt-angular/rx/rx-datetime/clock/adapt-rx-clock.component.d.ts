import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import { AdaptRxDatetimeConfigService } from '../adapt-rx-datetime-config.service';
import { RxClockConfig, RxClockFaceTicks, RxClockMode, RxDatetimeTexts, RxTimeStruct } from '../adapt-rx-datetime.types';
import * as i0 from "@angular/core";
export declare class AdaptRxClockComponent implements OnInit, OnChanges, OnDestroy {
    private _renderer;
    private _changeDetectorRef;
    static Hours24Ticks: RxClockFaceTicks;
    static Hours12Ticks: RxClockFaceTicks;
    static MinutesTicks: RxClockFaceTicks;
    static SecondsTicks: RxClockFaceTicks;
    config: RxClockConfig;
    activeMode: RxClockMode;
    activeTime: RxTimeStruct;
    initialTime: RxTimeStruct;
    use12HoursTime: boolean;
    hasSeconds: boolean;
    disabled: boolean;
    texts: RxDatetimeTexts;
    testID: string;
    isPM: boolean;
    rxClockMode: typeof RxClockMode;
    clockFaceTicks: {
        hours: RxClockFaceTicks;
        minutes: RxClockFaceTicks;
        seconds: RxClockFaceTicks;
    };
    uiValue: RxTimeStruct;
    /**
     * An event firing on clock mode change
     */
    readonly onModeChange: EventEmitter<RxClockMode>;
    /**
     * An event firing on time change
     * It happens on each drag end
     */
    readonly onTimeChange: EventEmitter<RxTimeStruct>;
    /**
     * An event firing on hoursLabel change
     * It happens on while dragging
     */
    readonly onHoursChange: EventEmitter<number>;
    /**
     * An event firing on minutesLabel change
     * It happens on while dragging
     */
    readonly onMinutesChange: EventEmitter<number>;
    /**
     * An event firing on secondsLabel change
     * It happens on while dragging
     */
    readonly onSecondsChange: EventEmitter<number>;
    /**
     * DrugAndDrop anchor ref
     */
    dndContainerRef: ElementRef<HTMLElement>;
    private _innerFaceTouchAreaSize;
    private _faceSize;
    private _destroyed$;
    constructor(_datetimeConfigService: AdaptRxDatetimeConfigService, _renderer: Renderer2, _changeDetectorRef: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * Change time use12HoursTime
     */
    changeMeridiem(): void;
    /**
     * Change clock mode
     */
    gotoNextFace(nextFace?: RxClockMode): void;
    /**
     * Check activeTime according to use12HoursTime
     */
    private _checkMeridiem;
    /**
     * Drag and drop initialization
     */
    private _initDragNDrop;
    /**
     * Drag and drop handler
     */
    private _touchPointChange;
    /**
     * Returns clock face activeTime according to touch point location
     */
    private _getClockFaceTick;
    private _updateUIValue;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxClockComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRxClockComponent, "adapt-rx-clock", never, { "activeMode": "activeMode"; "activeTime": "activeTime"; "initialTime": "initialTime"; "use12HoursTime": "use12HoursTime"; "hasSeconds": "hasSeconds"; "disabled": "disabled"; "texts": "texts"; "testID": "testID"; }, { "onModeChange": "onModeChange"; "onTimeChange": "onTimeChange"; "onHoursChange": "onHoursChange"; "onMinutesChange": "onMinutesChange"; "onSecondsChange": "onSecondsChange"; }, never, never>;
}
