import { AfterViewInit, ChangeDetectorRef, ElementRef, NgZone, OnInit, Renderer2 } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AnimationEvent } from '@angular/animations';
import { BigNumber } from 'bignumber.js';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { KeyValueObject } from '../../common/common.models';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import { AdaptTranslateService } from '../../common/i18n/index';
import { AdaptRxFeedbackComponent, AdaptRxFormControlDirective, FormControlSize } from '../form-control/index';
import { AdaptTooltipDirective } from '../../tooltip/index';
import { AdaptRxCounterConfigService } from './adapt-rx-counter-config.service';
import { CounterTextsModel } from './adapt-rx-counter.models';
import * as i0 from "@angular/core";
export declare class AdaptRxCounterComponent extends AdaptRxFormControlDirective implements OnInit, AfterViewInit {
    ngControl: NgControl;
    private _deviceDetection;
    private _renderer;
    private _elRef;
    private _ngZone;
    ts: AdaptTranslateService;
    protected controlName: string;
    analyticsComponentName: typeof AdaptRadarAngularCustomEventName;
    counterTextsDefault: CounterTextsModel;
    animateArrowUp: boolean;
    animateArrowDown: boolean;
    increaseAnimationDone: boolean;
    decreaseAnimationDone: boolean;
    focused: boolean;
    isMobile: boolean;
    isSpinnerMobile: boolean;
    /**
     * Sets the prefix label to the field.
     * @docs-default
     */
    prefix: string;
    /**
     * Sets the suffix label to the field.
     * @docs-default
     */
    suffix: string;
    /**
     * The max value to be set to the counter via spinners increase button.
     * @docs-default
     */
    max: number | BigNumber;
    /**
     * The min value to be set to the counter via spinners increase button.
     * @docs-default
     */
    min: number | BigNumber;
    step: number;
    /**
     * Control size. Available options are: 'default', 'sm', 'lg'.
     * @docs-default default
     */
    size: FormControlSize;
    /**
     * The placeholder string to be shown.
     * @docs-default
     */
    placeholder: string;
    /**
     * Use disable styles for readonly state.
     * @docs-default false
     */
    disabledStyleForReadonlyState: boolean;
    inputEl: ElementRef<HTMLInputElement>;
    mobileActionsContainer: ElementRef<HTMLInputElement>;
    /**
     * Reference on AdaptRxFeedbackComponent
     */
    adaptRxFeedbackRef: AdaptRxFeedbackComponent;
    /**
     * Check if the control has UI error state
     */
    get hasDangerState(): boolean;
    get value(): string;
    get precision(): number;
    get inputSize(): number;
    private _value;
    private _removeDocumentClickListener;
    private spinnerUp$;
    private spinnerDown$;
    private mobileSpinnerUp$;
    private mobileSpinnerDown$;
    get spinnerUp(): ElementRef<HTMLButtonElement>;
    set spinnerUp(elementRef: ElementRef<HTMLButtonElement>);
    get spinnerDown(): ElementRef<HTMLButtonElement>;
    set spinnerDown(elementRef: ElementRef<HTMLButtonElement>);
    get mobileSpinnerUp(): ElementRef<HTMLButtonElement>;
    set mobileSpinnerUp(elementRef: ElementRef<HTMLButtonElement>);
    get mobileSpinnerDown(): ElementRef<HTMLButtonElement>;
    set mobileSpinnerDown(elementRef: ElementRef<HTMLButtonElement>);
    static toFixed(value: number, precision?: number): number;
    static parseValue(value: number | string | BigNumber): number | BigNumber;
    constructor(ngControl: NgControl, counterConfig: AdaptRxCounterConfigService, _changeDetectorRef: ChangeDetectorRef, _deviceDetection: AdaptDeviceDetectionService, _renderer: Renderer2, _elRef: ElementRef, _ngZone: NgZone, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    writeValue(value: number | BigNumber): void;
    toggleTooltip(tooltip: AdaptTooltipDirective, el: HTMLSpanElement): void;
    onAnimationIncreaseStart(event: AnimationEvent): void;
    onAnimationIncreaseDone(event: AnimationEvent): void;
    onAnimationDecreaseStart(event: AnimationEvent): void;
    onAnimationDecreaseDone(event: AnimationEvent): void;
    checkFormMobileSpinners(): void;
    increaseCounter(animationNeeded?: boolean): void;
    decreaseCounter(animationNeeded?: boolean): void;
    increase(): void;
    decrease(): void;
    inputClickHandler(event: Event): void;
    protected _focusNativeElement(): void;
    private _openMobileSpinners;
    private _closeMobileSpinners;
    private _setValue;
    private _getCurrentValuePrecision;
    private _calculateNewValue;
    private _applyBoundaries;
    private _sendEvent;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxCounterComponent, [{ optional: true; self: true; }, null, null, null, null, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRxCounterComponent, "adapt-rx-counter", never, { "prefix": "prefix"; "suffix": "suffix"; "max": "max"; "min": "min"; "step": "step"; "size": "size"; "placeholder": "placeholder"; "disabledStyleForReadonlyState": "disabledStyleForReadonlyState"; }, {}, never, never>;
}
