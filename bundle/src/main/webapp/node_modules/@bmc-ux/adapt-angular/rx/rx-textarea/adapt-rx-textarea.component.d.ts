import { ChangeDetectorRef, ElementRef, NgZone, OnInit, Renderer2 } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { AdaptRxFeedbackComponent, AdaptRxFormControlDirective, FormControlSize } from '../form-control/index';
import { AdaptRxTextareaConfigService } from './adapt-rx-textarea-config.service';
import { AdaptTranslateService } from '../../common/i18n/index';
import * as i0 from "@angular/core";
export declare class AdaptRxTextareaComponent extends AdaptRxFormControlDirective implements OnInit {
    private _renderer;
    private _ngZone;
    ts: AdaptTranslateService;
    protected controlName: string;
    analyticsComponentName: typeof AdaptRadarAngularCustomEventName;
    _rows: number;
    _maxRows: number;
    /**
     * Native textarea rows count
     * @docs-default
     */
    set rows(value: number);
    /**
     * Native textarea maximum rows count
     * @docs-default
     */
    set maxRows(value: number);
    /**
     * Specifies autocomplete property of native element
     * @docs-default
     * @since 10.11.0
     */
    autocomplete: boolean | string;
    /**
     * A placeholder string for the input filed
     * @docs-default
     */
    placeholder: string;
    /**
     * Control size
     * @docs-default default
     */
    size: FormControlSize;
    /**
     * Show success appearance when no errors
     * @docs-default false
     */
    showValidState: boolean;
    /**
     * Show success icon when no errors
     * @docs-default false
     */
    showValidStateIcon: boolean;
    /**
     * Show error icon when errors
     * @docs-default false
     */
    showInvalidStateIcon: boolean;
    /**
     * Message which will be shown if [showValidState]=true and no errors
     * @docs-default false
     */
    validStateMessage: string;
    /**
     * Use disable styles for readonly state
     * @docs-default false
     */
    disabledStyleForReadonlyState: boolean;
    /**
     * Textarea ref
     */
    textareaRef: ElementRef<HTMLTextAreaElement>;
    /**
     * Reference on AdaptRxFeedbackComponent
     */
    adaptRxFeedbackRef: AdaptRxFeedbackComponent;
    private _value;
    private _previousNativeValue;
    private _initComplete;
    private _isAutoRowsCalculation;
    constructor(ngControl: NgControl, _renderer: Renderer2, _ngZone: NgZone, adaptRxTextareaConfigService: AdaptRxTextareaConfigService, _changeDetectorRef: ChangeDetectorRef, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    get value(): string;
    set value(value: string);
    /**
     * Returns autocomplete attribute value for native element
     */
    get getAutocompleteValue(): string;
    /**
     * Check if the control has UI error state
     */
    get hasDangerState(): boolean;
    /**
     * Check if component should have success appearance if no errors
     */
    get hasSuccessState(): boolean;
    /**
     * Check if the invalid state icon should be displayed when has danger state
     */
    get hasDangerStateIcon(): boolean;
    /**
     * Check if the valid state icon should be displayed when has success state
     */
    get hasSuccessStateIcon(): boolean;
    /**
     * Textarea element (input) event handler
     */
    inputValueChange(): void;
    /**
     * Extend super.writeValue for auto expand detection
     */
    writeValue(value: string): void;
    /**
     * Extend parent method
     */
    blurHandler(event: FocusEvent): void;
    /**
     * Extend parent method
     */
    focusHandler(event: FocusEvent): void;
    /**
     * Implementation from the base class
     * Focus the native element if [autofocus] == true
     */
    protected _focusNativeElement(): void;
    /**
     * Detect if auto expand mode enabled
     */
    private _checkForAutoHeight;
    /**
     * Auto calculate textarea height according to content
     */
    private _calculateHeight;
    /**
     * Check if the native element value was changed and propagate change
     */
    private _checkNativeValue;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxTextareaComponent, [{ optional: true; self: true; }, null, null, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRxTextareaComponent, "adapt-rx-textarea", never, { "rows": "rows"; "maxRows": "maxRows"; "autocomplete": "autocomplete"; "placeholder": "placeholder"; "size": "size"; "showValidState": "showValidState"; "showValidStateIcon": "showValidStateIcon"; "showInvalidStateIcon": "showInvalidStateIcon"; "validStateMessage": "validStateMessage"; "disabledStyleForReadonlyState": "disabledStyleForReadonlyState"; }, {}, never, never>;
}
