import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy, TemplateRef } from '@angular/core';
import { RxListBuilderItem, RxListBuilderSelectionMode } from '../rx-list-builder/index';
import { RxSelectOption } from '../rx-select/index';
import { AdaptCustomAction, AdaptCustomActionsAlignEnum } from '../../custom-actions/index';
import { RxListItemTexts } from './adapt-rx-list-item.types';
import * as i0 from "@angular/core";
export declare class AdaptRxListItemComponent implements AfterViewInit, OnDestroy {
    _element: ElementRef;
    private _ngZone;
    editMode: boolean;
    inputControlValue: string;
    customActionsAlignedTo: AdaptCustomActionsAlignEnum;
    /**
     * List item
     * @docs-default
     */
    item: RxListBuilderItem | RxSelectOption;
    /**
     * Highlight search query on item name
     * @docs-default
     */
    searchQuery: string;
    texts: RxListItemTexts;
    /**
     * Whether edited item could be saved, based on provided itemValidation function
     * @docs-default
     */
    allowSaving: boolean;
    /**
     * When present, sets the maximum label length that can be saved when edited.
     * @docs-default
     */
    maxLength: number;
    editError: string;
    hideControls: boolean;
    disabled: boolean;
    readonly: boolean;
    hideEdit: boolean;
    hideDelete: boolean;
    itemFormatter: (item: RxListBuilderItem | RxSelectOption) => string;
    itemContentTemplate: TemplateRef<{
        $implicit: RxListBuilderItem | RxSelectOption;
    }>;
    itemSetterProp: string;
    isExpanded: boolean;
    testID: string;
    dragDisabled: boolean;
    /**
     * Specifies the selection mode, valid values are "single" and "multiple"
     * @since 12.27.0, 14.5.0
     * @docs-default
     */
    selectionMode: RxListBuilderSelectionMode;
    /**
     * Fires on switching to the component edit mode
     */
    readonly onItemEdit: EventEmitter<RxListBuilderItem>;
    readonly onItemDelete: EventEmitter<RxListBuilderItem>;
    readonly onItemUpdate: EventEmitter<[RxListBuilderItem, RxListBuilderItem]>;
    readonly onListItemValueChange: EventEmitter<[string, string]>;
    readonly onKeyUp: EventEmitter<KeyboardEvent>;
    readonly onKeyDown: EventEmitter<KeyboardEvent>;
    readonly onExitEditMode: EventEmitter<null>;
    /**
     * Emit when the item selection state changed
     * @since 12.27.0, 14.5.0
     */
    readonly selectionStateChange: EventEmitter<RxListBuilderItem>;
    readonly dragStart: EventEmitter<{
        event: DragEvent;
        item: AdaptRxListItemComponent;
    }>;
    readonly dragEnter: EventEmitter<{
        event: DragEvent;
        item: AdaptRxListItemComponent;
    }>;
    readonly dragOver: EventEmitter<{
        event: DragEvent;
        item: AdaptRxListItemComponent;
    }>;
    readonly dragLeave: EventEmitter<{
        event: DragEvent;
        item: AdaptRxListItemComponent;
    }>;
    readonly drop: EventEmitter<DragEvent>;
    readonly dragEnd: EventEmitter<void>;
    id: string;
    listItemContainer: ElementRef<HTMLElement>;
    listItemDnDSymbol: ElementRef<HTMLElement>;
    private _destroyed$;
    private _dragStartEventHandler;
    private _dragOverEventHandler;
    private _dragEnterEventHandler;
    private _dragLeaveEventHandler;
    private _dropEventHandler;
    private _dragEndEventHandler;
    constructor(_element: ElementRef, _ngZone: NgZone);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    get hasError(): boolean;
    get currentEditActions(): AdaptCustomAction[];
    onDragStart(event: DragEvent): void;
    onDragEnter(event: DragEvent): void;
    onDragOver(event: DragEvent): void;
    onDragLeave(event: DragEvent): void;
    onDrop(event: DragEvent): void;
    onDragEnd(): void;
    exitEditMode(): void;
    enterEditMode(): void;
    deleteItem(): void;
    updateItem(): void;
    listItemValueChange(): void;
    onInputKeyDown(event: KeyboardEvent): void;
    onUp(e: KeyboardEvent): void;
    onDown(e: KeyboardEvent): void;
    onSpace(e: KeyboardEvent, item: RxListBuilderItem): void;
    handleCheckedChange(item: RxListBuilderItem): void;
    private _onKeyboardEvent;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxListItemComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRxListItemComponent, "adapt-rx-list-item", never, { "item": "item"; "searchQuery": "searchQuery"; "texts": "texts"; "allowSaving": "allowSaving"; "maxLength": "maxLength"; "editError": "editError"; "hideControls": "hideControls"; "disabled": "disabled"; "readonly": "readonly"; "hideEdit": "hideEdit"; "hideDelete": "hideDelete"; "itemFormatter": "itemFormatter"; "itemContentTemplate": "itemContentTemplate"; "itemSetterProp": "itemSetterProp"; "isExpanded": "isExpanded"; "testID": "testID"; "dragDisabled": "dragDisabled"; "selectionMode": "selectionMode"; "id": "id"; }, { "onItemEdit": "onItemEdit"; "onItemDelete": "onItemDelete"; "onItemUpdate": "onItemUpdate"; "onListItemValueChange": "onListItemValueChange"; "onKeyUp": "onKeyUp"; "onKeyDown": "onKeyDown"; "onExitEditMode": "onExitEditMode"; "selectionStateChange": "selectionStateChange"; "dragStart": "dragStart"; "dragEnter": "dragEnter"; "dragOver": "dragOver"; "dragLeave": "dragLeave"; "drop": "drop"; "dragEnd": "dragEnd"; }, never, never>;
}
