import { AfterViewInit, ChangeDetectorRef, ElementRef, NgZone, OnDestroy, OnInit } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { AdaptDropdownDirective, AdaptDropdownMobileView } from '../../dropdown/index';
import { AdaptRxFeedbackComponent, AdaptRxFormControlDirective, FormControlSize } from '../form-control/index';
import { PlacementArray } from '../../common/positioning';
import { AdaptTranslateService } from '../../common/i18n/index';
import { ResizeService } from '../../common/resize/resize.service';
import { AdaptRxSelectEditableConfigService } from './adapt-rx-select-editable-config.service';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import * as i0 from "@angular/core";
export declare class AdaptRxSelectEditableComponent extends AdaptRxFormControlDirective implements OnInit, AfterViewInit, OnDestroy {
    private _ngZone;
    private _resizeService;
    ts: AdaptTranslateService;
    protected controlName: string;
    ACTIVE_OPTION_CLASS: string;
    FOCUS_OPTION_CLASS: string;
    model: string;
    customOptionModel: string;
    editMode: boolean;
    labelId: string;
    popupId: string;
    activeDescendant: string;
    menuWidth: string;
    defaultTexts: {
        placeholder?: string;
        customOptionTitle?: string;
    };
    /**
     * Options for the select-editable list
     * @docs-default []
     */
    options: string[];
    /**
     * Placeholder for select button
     * @docs-default Select
     */
    placeholder: string;
    /**
     * The title for the custom option
     * @docs-default Custom value...
     */
    customOptionTitle: string;
    /**
     * Place the custom option on the top of the options list
     * @docs-default false
     */
    customOptionOnTop: boolean;
    /**
     * Control size
     * @docs-default
     */
    size: FormControlSize;
    /**
     * MaxHeight for the popup-menu
     * @docs-default 200px
     */
    menuMaxHeight: string;
    /**
     * The preferred placement of the popup
     * @docs-default bottom-left
     */
    placement: PlacementArray;
    /**
     * Attach popup to the body
     * @docs-default false
     */
    appendToBody: boolean;
    /**
     * Mobile view settings
     * @docs-default {}
     */
    mobileView: AdaptDropdownMobileView;
    /**
     * Use disable styles for readonly state
     * @docs-default false
     */
    disabledStyleForReadonlyState: boolean;
    /**
     * Custom class for the dropdown menu
     * @docs-default
     * @since 10.13.0
     */
    popupClass: string;
    /**
     * The function to check if the entered custom value already exists in the options array.
     * If returns true, the option from list will be applied to model
     * @docs-default (customValue: string, optionsValue: string) => customValue === optionsValue
     * @since v11.6.0
     */
    customValueMatcher: (customValue: string, optionsValue: string) => boolean;
    /**
     * Reference on AdaptDropdownDirective
     */
    popupRef: AdaptDropdownDirective;
    /**
     * Select button element ref
     */
    selectButtonRef: ElementRef<HTMLButtonElement>;
    /**
     * Custom input element ref
     */
    customInputRef: ElementRef<HTMLInputElement>;
    /**
     * Reference on AdaptRxFeedbackComponent
     */
    adaptRxFeedbackRef: AdaptRxFeedbackComponent;
    /**
     * Reference to popup menu element
     */
    popupMenuEl: ElementRef<HTMLElement>;
    /**
     * Reference to popup menu anchor element
     */
    dropdownAnchorWrapperEl: ElementRef<HTMLElement>;
    private _activeDescendantIndex;
    private _resize$;
    private _isDesktop;
    constructor(ngControl: NgControl, _ngZone: NgZone, _resizeService: ResizeService, deviceDetector: AdaptDeviceDetectionService, changeDetectorRef: ChangeDetectorRef, selectEditableConfigService: AdaptRxSelectEditableConfigService, ts: AdaptTranslateService, adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * Check if the control has UI error state
     */
    get hasDangerState(): boolean;
    getOptionClassList(item: string, index: number): string;
    getCustomOptionClassList(): string;
    enterEditMode(): void;
    exitEditMode(preventChange?: boolean): void;
    popupOpenChangeHandler(isOpen: boolean): void;
    optionClickHandler(item: string): void;
    optionMouseoverHandler(index: number): void;
    selectButtonKeydownHandler(event: KeyboardEvent): void;
    getOptionId(index: number): string;
    writeValue(value: string): void;
    /**
     * Implementation from the super class
     */
    protected _focusNativeElement(): void;
    /**
     * Change active option:
     * - next if changeIndexStep > 0
     * - prev if changeIndexStep < 0
     */
    private _changeActiveOption;
    /**
     * Scroll options list to focused option
     */
    private _scrollToFocusOption;
    private _checkPopupOnResize;
    private _defaultCustomValueMatcher;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxSelectEditableComponent, [{ optional: true; self: true; }, null, null, null, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRxSelectEditableComponent, "adapt-rx-select-editable", never, { "options": "options"; "placeholder": "placeholder"; "customOptionTitle": "customOptionTitle"; "customOptionOnTop": "customOptionOnTop"; "size": "size"; "menuMaxHeight": "menuMaxHeight"; "placement": "placement"; "appendToBody": "appendToBody"; "mobileView": "mobileView"; "disabledStyleForReadonlyState": "disabledStyleForReadonlyState"; "popupClass": "popupClass"; "customValueMatcher": "customValueMatcher"; }, {}, never, never>;
}
