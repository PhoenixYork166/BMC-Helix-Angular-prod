import { ElementRef, EventEmitter } from '@angular/core';
import { AdaptDeviceDetectionService } from '../../../common/device-detection.service';
import { Placement } from '../../../common/positioning';
import { AdaptRadarAngularService, AdaptRadarAngularGenericDirective } from '../../../common/radar/adapt-radar';
import { AdaptRxRatingConfigService } from '../adapt-rx-rating-config.service';
import { RxRatingVotingType } from '../adapt-rx-rating.types';
import * as i0 from "@angular/core";
export declare class AdaptRxRatingVotingComponent extends AdaptRadarAngularGenericDirective {
    protected _adaptRadarService: AdaptRadarAngularService;
    private _deviceDetectionService;
    readonly UI_TYPE: typeof RxRatingVotingType;
    isActive: boolean;
    wasClick: boolean;
    isMobile: boolean;
    /**
     * Voting mode
     * @docs-default RxRatingVotingType.Star
     */
    type: RxRatingVotingType;
    /**
     * Thanks text
     * @docs-default Thanks!
     */
    thanksText: string;
    /**
     * Thanks text abbreviation
     * @docs-default You said
     */
    thanksAbbrMessage: string;
    /**
     * Tooltip for not RxRatingVotingType.Thanks mode
     * @docs-default
     */
    tooltip: string;
    /**
     * Tooltip placement
     * @docs-default top
     */
    tooltipPlacement: Placement;
    /**
     * @docs-default
     */
    testID: string;
    /**
     * An event fired when a user selects a new rating.
     */
    readonly onRateChange: EventEmitter<boolean>;
    constructor(rxRatingConfigService: AdaptRxRatingConfigService, _adaptRadarService: AdaptRadarAngularService, _deviceDetectionService: AdaptDeviceDetectionService, _elem: ElementRef<HTMLElement>);
    handleClick(event: MouseEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxRatingVotingComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRxRatingVotingComponent, "adapt-rx-rating-voting", never, { "type": "type"; "thanksText": "thanksText"; "thanksAbbrMessage": "thanksAbbrMessage"; "tooltip": "tooltip"; "tooltipPlacement": "tooltipPlacement"; "testID": "testID"; }, { "onRateChange": "onRateChange"; }, never, never>;
}
