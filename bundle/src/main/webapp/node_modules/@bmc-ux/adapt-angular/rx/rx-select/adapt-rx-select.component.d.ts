import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, Renderer2, TemplateRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { AdaptCustomAction } from '../../custom-actions/index';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import { AdaptDropdownDirective, AdaptDropdownMobileView } from '../../dropdown/index';
import { AdaptTranslateService } from '../../common/i18n/index';
import { StylesObject } from '../../common/common.models';
import { PlacementArray } from '../../common/positioning';
import { ResizeService } from '../../common/resize/resize.service';
import { AdaptOverlayService } from '../../common/overlay/index';
import { AdaptRxFeedbackComponent, AdaptRxFormControlDirective, FormControlSize } from '../form-control/index';
import { AdaptRxSearchComponent } from '../rx-search/index';
import { AdaptRxSelectConfigService } from './adapt-rx-select-config.service';
import { RxSelectedOptionsMap, RxSelectIndexedOption, RxSelectIndexedOptionsGroup, RxSelectionChangeEvent, RxSelectOption, RxSelectOptionsGroup, SelectTexts } from './adapt-rx-select.types';
import { AdaptIsOptionSelectedPipe } from './adapt-rx-select.pipes';
import * as i0 from "@angular/core";
export declare class AdaptRxSelectComponent extends AdaptRxFormControlDirective implements OnInit, AfterViewInit, OnDestroy {
    private _deviceDetectionService;
    private _ngZone;
    private _renderer;
    private _resizeService;
    private _overlayService;
    ts: AdaptTranslateService;
    isOptionSelectedPipe: AdaptIsOptionSelectedPipe;
    defaultHostClass: boolean;
    protected controlName: string;
    readonly SELECTED_OPTION_CLASS: string;
    readonly ACTIVE_OPTION_CLASS: string;
    readonly DEFAULT_POPUP_MAX_HEIGHT: number;
    analyticsComponentName: typeof AdaptRadarAngularCustomEventName;
    title: string;
    titleTooltip: string;
    selectedOptionsMap: RxSelectedOptionsMap;
    flattenOptions: RxSelectOption[];
    filteredIndexedOptions: (RxSelectIndexedOption | RxSelectIndexedOptionsGroup)[];
    flattenFilteredIndexedOptions: RxSelectIndexedOption[];
    flattenFilteredGroupIndexedOptions: (RxSelectIndexedOption | RxSelectIndexedOptionsGroup)[];
    activeOption: RxSelectIndexedOption;
    activeDescendant: string;
    filterValue: string;
    popupId: string;
    labelId: string;
    isMobile: boolean;
    isTablet: boolean;
    popupWidth: string;
    mobileViewConfig: AdaptDropdownMobileView;
    verticalLayout: boolean;
    get selectedOptions(): RxSelectOption[];
    set selectedOptions(options: RxSelectOption[]);
    get ariaInvalidState(): boolean;
    /**
     * Options list
     * @docs-default
     */
    set options(options: (RxSelectOption | RxSelectOptionsGroup)[]);
    get options(): (RxSelectOption | RxSelectOptionsGroup)[];
    /**
     * Show empty option in options list
     * @docs-default false
     */
    emptyOption: boolean;
    /**
     * Formatter that transforms the option into a string
     * @docs-default option
     */
    optionFormatter: (option: RxSelectOption) => string;
    /**
     * Template for displaying option value
     * @docs-default
     */
    optionContentTemplate: TemplateRef<{
        $implicit: RxSelectOption;
    }>;
    /**
     * Function resolves disabled option
     * @docs-default option => !!option['disabled']
     */
    disabledOptionResolver: (option: RxSelectOption) => boolean;
    /**
     * Formatter that transforms the option list into a title string
     * @docs-default
     */
    titleFormatter: (option: RxSelectOption[]) => string;
    /**
     * If 'true', the first item in the options list will be active
     * @docs-default true
     */
    focusFirst: boolean;
    /**
     * Standard UI texts
     * @docs-default texts.selectTexts
     */
    get texts(): SelectTexts;
    set texts(value: SelectTexts);
    /**
     * Enables multiple selection mode
     * @docs-default false
     */
    multiple: boolean;
    /**
     * Style of checked single select checked option
     * @docs-default line
     */
    singleSelectStyle: 'line' | 'marker';
    /**
     * Enables options filtering
     * @docs-default false
     */
    enableFilter: boolean;
    /**
     * Enables select inline mode
     * @docs-default false
     */
    inline: boolean;
    /**
     * Enables 'select all' button
     * @docs-default false
     */
    selectAllButton: boolean;
    /**
     * Enables 'deselect all' button
     * @docs-default false
     */
    deselectAllButton: boolean;
    /**
     * Show 'LoadMore' button
     * @docs-default false
     */
    set loadMoreButton(value: boolean);
    get loadMoreButton(): boolean;
    /**
     * Callback for 'loadMore' button
     * @docs-default
     */
    loadMoreCallback: () => void;
    /**
     * Show loading data indicator
     * @docs-default false
     */
    set loadMoreInProgress(value: boolean);
    get loadMoreInProgress(): boolean;
    /**
     * Show loading instead of options
     * @docs-default false
     */
    set loadingState(value: boolean);
    get loadingState(): boolean;
    /**
     * A placeholder string for the input filed
     * @docs-default
     */
    placeholder: string;
    /**
     * Control size
     * @docs-default default
     */
    size: FormControlSize;
    /**
     * Close popup on option select
     * @docs-default false
     */
    closeOnSelect: boolean;
    /**
     * The preferred placement of the typeahead
     * @docs-default auto
     * @since v10.13.0
     */
    placement: PlacementArray;
    /**
     * Attach popup to the body
     * @docs-default false
     */
    appendToBody: boolean;
    /**
     * Max height for the popup before scroll visible
     * @docs-default 250
     */
    popupMaxHeight: string | number;
    /**
     * Custom class for the dropdown menu
     * @docs-default
     * @since 10.13.0
     */
    popupClass: string;
    /**
     * Options list page size
     * @docs-default
     * @since v10.17.0
     */
    pageSize: number;
    /**
     * Control aria-invalid state from outside.
     * Can be useful in case when rxSelect is used inside other component and its state should be controlled by parent component (eg. rxListSelector).
     * Please pay attention that 'null' and 'undefined' is used to delegate control for invalid state to rxSelect inner mechanism
     * @docs-default
     * @since v11.3.0
     */
    ariaInvalid: boolean;
    /**
     * Enable virtual scroll for options list. Can be useful when there are too many options to fit in the dropdown
     * Additional info: https://material.angular.io/cdk/scrolling/api
     *
     * @docs-default false
     * @since v12.18.0
     */
    virtualScroll: boolean;
    /**
     * Used to configure the size of the items in the list (in pixels)
     * Additional info: https://material.angular.io/cdk/scrolling/api
     *
     * @docs-default 36
     * @since v12.18.0
     */
    virtualScrollItemSize: number;
    /**
     * The size of the cache used to store templates that are not being used for re-use later.
     * Setting the cache size to 0 will disable caching
     * Additional info: https://material.angular.io/cdk/scrolling/api
     *
     * @docs-default 20
     * @since v12.18.0
     */
    virtualScrollTemplateCacheSize: number;
    /**
     * The minimum amount of buffer rendered beyond the viewport (in pixels).
     * If the amount of buffer dips below this number, more items will be rendered
     * Additional info: https://material.angular.io/cdk/scrolling/api
     *
     * @docs-default 200
     * @since v12.18.0
     */
    minBufferPx: number;
    /**
     * The number of pixels worth of buffer to render for when rendering new items
     * Additional info: https://material.angular.io/cdk/scrolling/api
     *
     * @docs-default 500
     * @since v12.18.0
     */
    maxBufferPx: number;
    /**
     * An event emitted right before an item is selected from the options list
     */
    readonly onSelectionChange: EventEmitter<RxSelectionChangeEvent>;
    /**
     *  An event fired when the popup is opened or closed
     */
    readonly onPopupOpenChange: EventEmitter<boolean>;
    /**
     *  An event fired when the filter value changed
     *  @since version 9.1.0
     */
    readonly onFilterValueChange: EventEmitter<string>;
    /**
     * Reference to select block
     */
    selectOptionsContainerRef: ElementRef<HTMLElement>;
    /**
     * Search component reference
     */
    searchComponent: AdaptRxSearchComponent;
    /**
     * Reference to select options list container
     */
    selectOptionsListRef: ElementRef<HTMLElement>;
    /**
     * Reference to empty state element
     */
    emptyStateElementRef: ElementRef<HTMLElement>;
    /**
     * Reference to select button
     */
    selectButtonRef: ElementRef<HTMLButtonElement>;
    /**
     * Reference to title container
     */
    titleRef: ElementRef<HTMLElement>;
    /**
     * Reference to AdaptRxFeedbackComponent
     */
    adaptRxFeedbackRef: AdaptRxFeedbackComponent;
    /**
     * Reference to AdaptDropdownDirective
     */
    popup: AdaptDropdownDirective;
    /**
     * Reference to controls container (wrapper 310px)
     */
    selectControlsContainer: ElementRef;
    /**
     * Reference to custom actions
     */
    selectCustomActionsContainer: ElementRef;
    /**
     * Reference to counter
     */
    selectCounterContainer: ElementRef;
    /**
     * Reference to loadMode button
     */
    loadMoreButtonRef: ElementRef<HTMLButtonElement>;
    /**
     * Reference to none option button
     */
    noneButtonRef: ElementRef<HTMLButtonElement>;
    /**
     * Reference to loading state block
     */
    loadingStateBlockRef: ElementRef<HTMLElement>;
    private _options;
    private _loadingState;
    private _loadMoreButton;
    private _loadMoreInProgress;
    private _defaultTexts;
    private _texts;
    private _pageNumber;
    private _resize$;
    private _isDesktop;
    private _quickSearch$;
    private _quickSearchTerm;
    private _selectedOptionsOnInit;
    private _selectedOptions;
    static TestSearchOption(option: RxSelectOption, term: string, formatter: (option: RxSelectOption) => string): boolean;
    constructor(ngControl: NgControl, adaptRxSelectConfigService: AdaptRxSelectConfigService, _changeDetectorRef: ChangeDetectorRef, _deviceDetectionService: AdaptDeviceDetectionService, _ngZone: NgZone, _renderer: Renderer2, _resizeService: ResizeService, _overlayService: AdaptOverlayService, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>, isOptionSelectedPipe: AdaptIsOptionSelectedPipe);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    trackByIndexedOption(index: number, indexedOption: RxSelectIndexedOption | RxSelectIndexedOptionsGroup): number | string;
    get isEmptyState(): boolean;
    /**
     * Check if the control has UI error state
     */
    get hasDangerState(): boolean;
    get customActions(): AdaptCustomAction[];
    get showControls(): boolean;
    get popupStyle(): StylesObject;
    get displayedOptionsCount(): number;
    get showLoadMoreButton(): boolean;
    /**
     * Configure 'selectAllOptions' button
     */
    isCheckAllVisible(): boolean;
    /**
     * Configure 'deselectAllOptions' button
     */
    isUnCheckAllVisible(): boolean;
    /**
     * Check if at least one of filtered items selected to show 'Clear filtered' button
     */
    isSomeFilteredOptionsSelected(): boolean;
    /**
     * Check if all of filtered items selected to show 'Select filtered' button
     */
    isEveryFilteredOptionsSelected(): boolean;
    /**
     * Check if passed option active
     */
    isOptionActive(option: RxSelectIndexedOption): boolean;
    /**
     * Select button (click) handler
     */
    selectButtonClickHandler(e: MouseEvent | KeyboardEvent): void;
    /**
     * Select button (keydown) handler
     */
    selectButtonKeydownHandler(event: KeyboardEvent): void;
    /**
     * Select block keydown handler
     * Keyboard navigation between options
     */
    selectOptionsListKeydownHandler(event: KeyboardEvent): void;
    /**
     * Mark the option as active
     */
    markOptionAsActive(option: RxSelectIndexedOption): void;
    /**
     * Returns option ID for accessibility
     */
    getOptionId(indexedOption: RxSelectIndexedOption): string;
    /**
     * Filter value change handler
     */
    filterValueChangeHandler(value: string): void;
    /**
     * Popup toggle handler
     */
    popupOpenChangeHandler(isOpen: boolean): void;
    /**
     * Handle select options focus
     */
    selectBlockFocusHandler(): void;
    /**
     * Handle select options blur
     */
    selectBlockBlurHandler(): void;
    blurHandler(event: FocusEvent): void;
    /**
     * Deselect all selected options
     */
    selectEmptyOption(): void;
    /**
     * Select passed option
     */
    selectOption(optionToSelect: RxSelectIndexedOption, closePopup?: boolean): void;
    /**
     * Select all filtered options
     */
    selectAllOptions(): void;
    /**
     * Deselect all filtered options
     */
    deselectAllOptions(moveFocusToPopup?: boolean): void;
    /**
     * Set model and update title
     */
    setModel(options: RxSelectOption[]): void;
    /**
     * Invoke passed loadMoreCallback
     */
    loadMoreItems(): void;
    /**
     * Check if the select button tooltip should be shown
     */
    checkIfTooltipNeeded(): void;
    popupMenuKeydown(event: KeyboardEvent, popupMenuElement: HTMLElement): void;
    isGroupView(indexedOptions: (RxSelectIndexedOption | RxSelectIndexedOptionsGroup)[]): boolean;
    /**
     * ControlValueAccessor item implementation
     */
    writeValue(value: RxSelectOption[]): void;
    showNoneOption(): boolean;
    getListBoxHeight(): string;
    /**
     * Implementation from the base class
     * Focus the native element if [autofocus] == true
     */
    protected _focusNativeElement(): void;
    private _recreateSelectedOptionsMap;
    private _stringifyObject;
    /**
     * Update title value
     */
    private _updateTitle;
    /**
     * Default title formatter
     */
    private _defaultTitleFormatter;
    private _defaultDisabledOptionResolver;
    /**
     * Update flatten filtered options
     */
    private _updateFilteredOptions;
    /**
     * Activate the next option from filtered options list
     */
    private _activateNextOption;
    /**
     * Activate the prev result from filtered options list
     */
    private _activatePrevOption;
    /**
     * Handle active result changed
     */
    private _checkActiveDescendant;
    /**
     * Scroll to active result item
     */
    private _scrollToActiveResultItem;
    /**
     * Focus the element in the popup according to config
     */
    private _moveFocusToPopup;
    private _getDefaultTexts;
    private _checkPopupOnResize;
    private _blurLoadMoreButton;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxSelectComponent, [{ optional: true; self: true; }, null, null, null, null, null, null, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRxSelectComponent, "adapt-rx-select", never, { "options": "options"; "emptyOption": "emptyOption"; "optionFormatter": "optionFormatter"; "optionContentTemplate": "optionContentTemplate"; "disabledOptionResolver": "disabledOptionResolver"; "titleFormatter": "titleFormatter"; "focusFirst": "focusFirst"; "texts": "texts"; "multiple": "multiple"; "singleSelectStyle": "singleSelectStyle"; "enableFilter": "enableFilter"; "inline": "inline"; "selectAllButton": "selectAllButton"; "deselectAllButton": "deselectAllButton"; "loadMoreButton": "loadMoreButton"; "loadMoreCallback": "loadMoreCallback"; "loadMoreInProgress": "loadMoreInProgress"; "loadingState": "loadingState"; "placeholder": "placeholder"; "size": "size"; "closeOnSelect": "closeOnSelect"; "placement": "placement"; "appendToBody": "appendToBody"; "popupMaxHeight": "popupMaxHeight"; "popupClass": "popupClass"; "pageSize": "pageSize"; "ariaInvalid": "ariaInvalid"; "virtualScroll": "virtualScroll"; "virtualScrollItemSize": "virtualScrollItemSize"; "virtualScrollTemplateCacheSize": "virtualScrollTemplateCacheSize"; "minBufferPx": "minBufferPx"; "maxBufferPx": "maxBufferPx"; }, { "onSelectionChange": "onSelectionChange"; "onPopupOpenChange": "onPopupOpenChange"; "onFilterValueChange": "onFilterValueChange"; }, never, never>;
}
