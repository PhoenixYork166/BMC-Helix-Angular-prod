import { ControlValueAccessor, NgControl } from '@angular/forms';
import { AfterViewInit, ChangeDetectorRef, ElementRef } from '@angular/core';
import { AdaptTranslateService } from '../../common/i18n/index';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { FeedbackMessage } from './adapt-rx-form-control.types';
import { AdaptRxControlLabelTooltip } from './rx-control-label/index';
import { AdaptRxComponentDirective } from './adapt-rx-component';
import * as i0 from "@angular/core";
export declare abstract class AdaptRxFormControlDirective extends AdaptRxComponentDirective implements ControlValueAccessor, AfterViewInit {
    ngControl: NgControl;
    ts: AdaptTranslateService;
    /**
     * Label icon with a tooltip or popover
     */
    tooltip: AdaptRxControlLabelTooltip;
    /**
     * Warning message
     */
    warningMessage: string;
    /**
     * Shows if the form control has a required/requiredTrue validator
     */
    get required(): boolean;
    protected readonly _changeDetectorRef: ChangeDetectorRef;
    protected readonly _adaptRadarService: AdaptRadarAngularService;
    private _hasRequiredValidator;
    protected constructor(ngControl: NgControl, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>, _entityName: AdaptRadarAngularCustomEventName, _changeDetectorRef?: ChangeDetectorRef);
    ngAfterViewInit(): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    handleMessageAppeared(message: FeedbackMessage, componentName: AdaptRadarAngularCustomEventName): void;
    abstract writeValue(obj: any): void;
    protected _onTouched(): void;
    protected _onChange(_: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxFormControlDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptRxFormControlDirective, never, never, { "tooltip": "tooltip"; "warningMessage": "warningMessage"; }, {}, never>;
}
