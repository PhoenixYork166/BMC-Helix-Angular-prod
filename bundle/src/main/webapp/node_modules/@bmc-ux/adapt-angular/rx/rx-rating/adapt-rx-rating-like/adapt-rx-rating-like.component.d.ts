import { ElementRef, EventEmitter } from '@angular/core';
import { AdaptDeviceDetectionService } from '../../../common/device-detection.service';
import { Placement } from '../../../common/positioning';
import { AdaptRadarAngularService, AdaptRadarAngularGenericDirective } from '../../../common/radar/adapt-radar';
import { AdaptRxRatingConfigService } from '../adapt-rx-rating-config.service';
import { RxRatingLikeItem, RxRatingLikeScale, RxRatingLikeTexts, RxRatingSize } from '../adapt-rx-rating.types';
import * as i0 from "@angular/core";
export declare class AdaptRxRatingLikeComponent extends AdaptRadarAngularGenericDirective {
    protected _adaptRadarService: AdaptRadarAngularService;
    private _deviceDetectionService;
    static Scales: Map<RxRatingLikeScale, RxRatingLikeItem[]>;
    UI_SIZE: typeof RxRatingSize;
    ratingItemsClassNameMap: Map<RxRatingLikeItem, string>;
    ratingValues: RxRatingLikeItem[];
    ratingTooltips: string[];
    selectedRate: RxRatingLikeItem;
    isMobile: boolean;
    /**
     * Active rate
     * @docs-default null
     */
    set rate(v: RxRatingLikeItem);
    /**
     * Scale point of rating
     * @docs-default RxRatingLikeScale.ScalePoint5
     */
    set scale(nextScale: RxRatingLikeScale);
    /**
     * UI Texts
     * @docs-default AdaptRxRatingConfigService.texts.like
     */
    set texts(newTexts: RxRatingLikeTexts);
    /**
     * Component size
     * @docs-default RxRatingSize.sm
     */
    size: RxRatingSize;
    /**
     * Tooltip placement
     * @docs-default top
     */
    tooltipPlacement: Placement;
    /**
     * Disabled state
     * @docs-default false
     */
    disabled: boolean;
    /**
     * Disabled rate items list
     * @docs-default
     */
    disabledList: RxRatingLikeItem[];
    /**
     * @docs-default
     */
    testID: string;
    /**
     * @docs-default null
     */
    analyticsMetadata: {
        label: string;
    };
    /**
     * An event fired when a user selects a new rating.
     */
    readonly onRateChange: EventEmitter<RxRatingLikeItem>;
    readonly _uiTexts: RxRatingLikeTexts;
    private _scale;
    constructor(rxRatingConfigService: AdaptRxRatingConfigService, _adaptRadarService: AdaptRadarAngularService, _deviceDetectionService: AdaptDeviceDetectionService, _elem: ElementRef<HTMLElement>);
    handleClick(event: MouseEvent, ratingItem: RxRatingLikeItem): void;
    private _stopDisabled;
    private _getRatingTooltips;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxRatingLikeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRxRatingLikeComponent, "adapt-rx-rating-like", never, { "rate": "rate"; "scale": "scale"; "texts": "texts"; "size": "size"; "tooltipPlacement": "tooltipPlacement"; "disabled": "disabled"; "disabledList": "disabledList"; "testID": "testID"; "analyticsMetadata": "analyticsMetadata"; }, { "onRateChange": "onRateChange"; }, never, never>;
}
