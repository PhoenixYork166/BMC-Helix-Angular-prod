import { ChangeDetectorRef, ElementRef, OnInit } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { AdaptRxFeedbackComponent, AdaptRxFormControlDirective } from '../form-control/index';
import { AdaptTranslateService } from '../../common/i18n/index';
import * as i0 from "@angular/core";
export declare class AdaptRxSwitchComponent extends AdaptRxFormControlDirective implements OnInit {
    ts: AdaptTranslateService;
    protected controlName: string;
    analyticsComponentName: typeof AdaptRadarAngularCustomEventName;
    /**
     * Native input [value]
     * @docs-default
     */
    value: string;
    /**
     * Control size
     * @docs-default ''
     */
    size: string;
    /**
     * Enables 'before' label placement
     * @docs-default false
     */
    isLabelBefore: boolean;
    /**
     * Toggle [checked] attribute.
     * @docs-default
     */
    get checked(): boolean;
    set checked(value: boolean);
    /**
     * Input reference
     */
    inputRef: ElementRef<HTMLInputElement>;
    /**
     * Reference on AdaptRxFeedbackComponent
     */
    adaptRxFeedbackRef: AdaptRxFeedbackComponent;
    private _checked;
    private _checkedStateOnInit;
    constructor(ngControl: NgControl, _changeDetectorRef: ChangeDetectorRef, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    /**
     * Check if the control has UI error state
     */
    get hasDangerState(): boolean;
    ngOnInit(): void;
    inputClickHandler(event: Event): void;
    inputChangeHandler(): void;
    blurHandler(event: FocusEvent): void;
    writeValue(value: any): void;
    protected _focusNativeElement(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxSwitchComponent, [{ optional: true; self: true; }, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRxSwitchComponent, "adapt-rx-switch", never, { "value": "value"; "size": "size"; "isLabelBefore": "isLabelBefore"; "checked": "checked"; }, {}, never, never>;
}
