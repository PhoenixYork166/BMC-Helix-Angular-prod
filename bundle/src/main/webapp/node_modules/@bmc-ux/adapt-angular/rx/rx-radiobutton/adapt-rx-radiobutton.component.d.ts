import { ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { AdaptRadarAngularService, AdaptRadarAngularGenericDirective } from '../../common/radar/adapt-radar';
import { AdaptRxRadiobuttonGroupComponent } from './adapt-rx-radiobutton-group.component';
import * as i0 from "@angular/core";
export declare class AdaptRxRadiobuttonComponent extends AdaptRadarAngularGenericDirective implements OnInit, OnChanges, OnDestroy {
    private _ngZone;
    protected _adaptRadarService: AdaptRadarAngularService;
    /**
     * Name attribute for the input
     * @docs-default
     */
    name: string;
    /**
     * Component label.
     * @docs-default
     */
    label: string;
    /**
     * Custom id for the input
     * @docs-default
     */
    get id(): string;
    set id(value: string);
    /**
     * Input [value] attribute
     * @docs-default
     */
    get value(): any;
    set value(value: any);
    /**
     * Input [checked] attribute
     * @docs-default
     */
    get checked(): boolean;
    set checked(value: boolean);
    /**
     * When present, it specifies that the element should be disabled
     * @docs-default false
     */
    get disabled(): boolean;
    set disabled(value: boolean);
    /**
     * aria-label attribute for the input
     * @docs-default
     */
    ariaLabel: string;
    /**
     * aria-labeledby attribute for the input
     * @docs-default
     */
    ariaLabeledBy: string;
    /**
     * aria-describedby attribute for the input
     * @docs-default
     */
    ariaDescribedBy: string;
    /**
     * String for test id data attribute. For test purposes
     * @docs-default
     */
    testID: string;
    /**
     * Control [tabindex] value
     * @since 12.27.0, 14.5.0
     * @docs-default
     */
    tabIndex: number;
    readonly onFocus: EventEmitter<FocusEvent>;
    readonly onBlur: EventEmitter<FocusEvent>;
    /**
     * Checked state change emitter
     */
    readonly checkedChange: EventEmitter<boolean>;
    /**
     * Input ref
     */
    inputRef: ElementRef<HTMLInputElement>;
    private _controlName;
    private _id;
    private _uniqId;
    private _value;
    private _checked;
    private _disabled;
    private _radioButtonGroup;
    private _destroyed$;
    constructor(radiobuttonGroup: AdaptRxRadiobuttonGroupComponent, _ngZone: NgZone, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * AriaChecked attribute getter
     */
    get getAriaChecked(): 'true' | 'false';
    get readonly(): boolean;
    /**
     * Input (change) event handler
     */
    inputChangeHandler(event: Event): void;
    /**
     * Input (click) event handler
     */
    inputClickHandler(event: Event): void;
    /**
     * Input (focus) event handler
     */
    inputFocusHandler(event: FocusEvent): void;
    /**
     * Input (blur) event handler
     */
    inputBlurHandler(event: FocusEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRxRadiobuttonComponent, [{ optional: true; }, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRxRadiobuttonComponent, "adapt-rx-radiobutton", never, { "name": "name"; "label": "label"; "id": "id"; "value": "value"; "checked": "checked"; "disabled": "disabled"; "ariaLabel": "ariaLabel"; "ariaLabeledBy": "ariaLabeledBy"; "ariaDescribedBy": "ariaDescribedBy"; "testID": "testID"; "tabIndex": "tabIndex"; }, { "onFocus": "onFocus"; "onBlur": "onBlur"; "checkedChange": "checkedChange"; }, never, never>;
}
