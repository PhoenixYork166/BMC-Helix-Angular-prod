import { ApplicationRef, ComponentFactoryResolver, Injector, NgZone } from '@angular/core';
import { Directionality } from '@angular/cdk/bidi';
import { Observable } from 'rxjs';
import { ScrollManageService } from '../common/scroll-manage.service';
import { LayerService } from '../common/layer-service';
import { AdaptOverlayService } from '../common/overlay/index';
import { AlertAnimatedConfig } from '../alert-animated/adapt-alert.model';
import { AdaptDockedPanelConfig } from './docked-panel.config';
import { DockedDeferred, DockedPanel, DockedPanelInstance } from './docked-panel.model';
import * as i0 from "@angular/core";
export declare class AdaptDockedPanelStackService {
    private _componentFactoryResolver;
    private _injector;
    private _appRef;
    private _dpConfig;
    private _scrollService;
    private _ngZone;
    private _dir;
    private _layerService;
    private _overlayService;
    direction: string;
    hideBackdrop: boolean;
    private _openedPanels;
    private _parentDP?;
    private _activeDP?;
    private _wrapper;
    private _container;
    private _dockedPanelContainerOverlayWithPortal;
    private _scrollManager;
    private _alertsSubject;
    constructor(_componentFactoryResolver: ComponentFactoryResolver, _injector: Injector, _appRef: ApplicationRef, _dpConfig: AdaptDockedPanelConfig, _scrollService: ScrollManageService, _ngZone: NgZone, _dir: Directionality, _layerService: LayerService, _overlayService: AdaptOverlayService);
    get openedPanels(): DockedPanelInstance[];
    get parentDP(): DockedPanelInstance;
    get activeDP(): DockedPanelInstance;
    get alertsState(): Observable<AlertAnimatedConfig>;
    open(dpConfig: DockedPanel, configInjector: Injector): DockedDeferred;
    updateConfig(config: DockedPanel, dockedPanelInstance: DockedPanelInstance): void;
    close(id: string): void;
    closeAllDockedPanels(): void;
    openAlert(alert: AlertAnimatedConfig): void;
    /**
     * Search DockedPanel by ID
     */
    private _findPanel;
    /**
     * Build DockedPanel Container
     */
    private _buildContainer;
    /**
     * Destroy DockedPanel Container
     */
    private _destroyContainer;
    private _buildOverlayContainer;
    private _destroyOverlayContainer;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptDockedPanelStackService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AdaptDockedPanelStackService>;
}
