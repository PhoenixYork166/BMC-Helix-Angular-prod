import { AfterViewInit, ElementRef, NgZone, OnDestroy, OnInit } from '@angular/core';
import { FocusMonitor, ListKeyManager } from '@angular/cdk/a11y';
import { AdaptTranslateService } from '../common/i18n/index';
import { AdaptListKeyManagerDirective, AdaptListKeyManagerItemDirective } from '../common/list-key-manager';
import { KeyValueObject } from '../common/common.models';
import { AdaptDeviceDetectionService } from '../common/device-detection.service';
import { AdaptRadarAngularService, AdaptRadarAngularGenericDirective } from '../common/radar/adapt-radar';
import { AdaptDockedPanelService } from '../docked-panel/index';
import { AdaptDropdownDirective } from '../dropdown/index';
import { ProfileModel } from './profile.model';
import * as i0 from "@angular/core";
export declare class AdaptProfileComponent extends AdaptRadarAngularGenericDirective implements AfterViewInit, OnDestroy, OnInit {
    private _el;
    private _focusMonitor;
    private _ngZone;
    protected _adaptRadarService: AdaptRadarAngularService;
    private _deviceDetector;
    clientWidth: number;
    prefixId: string;
    defaultTexts: {
        description?: string;
        header?: string;
        view?: string;
        signOut?: string;
    };
    isDesktop: boolean;
    hamburgerService: AdaptDockedPanelService;
    /**
     * Profile configuration object to build a component
     * @docs-default
     */
    profile: ProfileModel;
    /**
     * Specifies if the component is used in Hamburger type of navigation or independently. Has different layout.
     * @docs-default
     */
    type: string;
    popup: AdaptDropdownDirective;
    adaptListKeyManagerDirective: AdaptListKeyManagerDirective;
    private _openFromKeyboard;
    private _listKeyManager;
    private _listKeyManagerDestroy;
    private _destroyed$;
    constructor(dps: AdaptDockedPanelService, ts: AdaptTranslateService, _el: ElementRef, _focusMonitor: FocusMonitor, _ngZone: NgZone, _adaptRadarService: AdaptRadarAngularService, _deviceDetector: AdaptDeviceDetectionService, _elem: ElementRef<HTMLElement>);
    /**
     * Returns clientWidth from the nativeElement, is used by navigation
     * @docs-default
     */
    getClientWidth(): number;
    /**
     * Closes related DockedPanel
     * @docs-default
     */
    closeHamburger(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    dropdownMenuToggleKeydown(event: KeyboardEvent): void;
    dropdownMenuKeydown(event: KeyboardEvent): void;
    getTarget(item: {
        target?: string;
    }): string;
    keyManagerStateChange(listKeyManager?: ListKeyManager<AdaptListKeyManagerItemDirective>): void;
    handleProfileDropdownOpen(): void;
    handleProfileDropdownClose(): void;
    private _getPrefixId;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptProfileComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptProfileComponent, "adapt-profile", never, { "profile": "profile"; "type": "type"; "getClientWidth": "getClientWidth"; "closeHamburger": "closeHamburger"; }, {}, never, ["[profile-btn-content]", "[profile-menu-content]", "[profile-btn-content-mobile]", "[profile-menu-content-mobile]"]>;
}
