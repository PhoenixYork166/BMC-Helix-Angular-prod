import { ElementRef, NgZone, OnDestroy, OnInit, Renderer2, TemplateRef } from '@angular/core';
import { TooltipPlacement } from '../common/positioning';
import { AdaptOverlayService } from '../common/overlay/index';
import { TooltipService } from './tooltip.service';
import { AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
export declare class AdaptTooltipComponent extends AdaptRadarAngularGenericDirective implements OnInit, OnDestroy {
    private tooltipService;
    private renderer;
    private ngZone;
    private element;
    private _overlayService;
    customCls: string;
    content: string | TemplateRef<any>;
    context: any;
    useWidthFitting: boolean;
    adjustedWidthMargin: number;
    id: string;
    get w(): string;
    get translate(): string;
    get hostCls(): string;
    get currentPlacement(): TooltipPlacement;
    get placement(): TooltipPlacement;
    set placement(c: TooltipPlacement);
    set width(w: number | string);
    get visible(): boolean;
    set visible(v: boolean);
    private _currentPlacement;
    private _maxWidthForFitting;
    private _translatePoint;
    private _visible;
    private _width;
    private _placement;
    private _destroyed$;
    constructor(tooltipService: TooltipService, renderer: Renderer2, ngZone: NgZone, element: ElementRef<HTMLElement>, _overlayService: AdaptOverlayService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    setPosition(target: HTMLElement): void;
    setMinWidth(minWidth: string): void;
    updatePosition(x: number, y: number): void;
    isTemplate(): boolean;
    ngOnDestroy(): void;
    private setPositionStyles;
    private adjustMaxWidthForViewportFitting;
    private _setFixedPosition;
    private _setAutoPosition;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptTooltipComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptTooltipComponent, "ng-component", never, { "customCls": "customCls"; "content": "content"; "context": "context"; "useWidthFitting": "useWidthFitting"; "adjustedWidthMargin": "adjustedWidthMargin"; "id": "id"; "placement": "placement"; "width": "width"; }, {}, never, never>;
}
