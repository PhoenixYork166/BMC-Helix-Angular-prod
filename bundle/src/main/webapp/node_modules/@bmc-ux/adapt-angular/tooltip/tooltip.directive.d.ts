import { ApplicationRef, ComponentFactoryResolver, ElementRef, EventEmitter, Injector, NgZone, OnDestroy, OnInit, Renderer2, TemplateRef } from '@angular/core';
import { EventManager } from '@angular/platform-browser';
import { Directionality } from '@angular/cdk/bidi';
import { AdaptDeviceDetectionService } from '../common/device-detection.service';
import { Func1 } from '../common/common.models';
import { AdaptOverlayService } from '../common/overlay/index';
import * as i0 from "@angular/core";
export declare type TooltipValue = string | TemplateRef<any>;
export declare type TooltipInputValue = TooltipValue | Func1<TooltipValue, ElementRef<HTMLElement>>;
export declare class AdaptTooltipDirective implements OnInit, OnDestroy {
    private elementRef;
    private injector;
    private componentFactoryResolver;
    private appRef;
    private ngZone;
    private _renderer;
    private _detectService;
    private _eventManager;
    private _overlayService;
    private _dir;
    static activeTooltip: AdaptTooltipDirective;
    /**
     * Popup delay in milliseconds until it opens
     * @docs-default 200
     */
    delay: number;
    /**
     * Placement of a tooltip. Accepts: "top", "bottom", "left", "right" or "auto".
     * To create floating tooltip simply do not provide placement value at all.
     * @docs-default top
     */
    placement: 'top' | 'right' | 'bottom' | 'left' | 'auto';
    /**
     * Sets up the maximum width the tooltip could be expanded to. Numbers values are in pixels
     * @docs-default fit-content
     */
    width: number;
    /**
     * Sets up the min width the tooltip. Numbers values are in pixels
     * @docs-default
     */
    minWidth: number;
    useWidthFitting: boolean;
    adaptRadarDisableEventSending: boolean;
    /**
     * Emits an event when the tooltip is shown
     */
    readonly shown: EventEmitter<void>;
    /**
     * Emits an event when the tooltip is hidden
     */
    readonly hidden: EventEmitter<void>;
    /**
     * Content to be displayed as tooltip. If falsy, the tooltip won't open.
     * If you pass the value via the Func1<TooltipValue, ElementRef<HTMLElement>>
     * the calculation will be precessed directly before the tooltip showing or updating
     */
    set adaptTooltip(content: TooltipInputValue);
    get manual(): boolean;
    set manual(v: boolean);
    private _updateTooltipPositionThrottled;
    private _processedWidth;
    private _manual;
    private _tooltipContent;
    private _delayTimer;
    private _x;
    private _y;
    private _id;
    private _isMobile;
    private _removeHostMouseMoveListener;
    private _tooltipOverlayWithPortal;
    private _overlayConnectedPositions;
    private _tooltipOverlayPlacements;
    private _mousePoint;
    private _destroyed$;
    private _ariaDescribedBy;
    constructor(elementRef: ElementRef<HTMLElement>, injector: Injector, componentFactoryResolver: ComponentFactoryResolver, appRef: ApplicationRef, ngZone: NgZone, _renderer: Renderer2, _detectService: AdaptDeviceDetectionService, _eventManager: EventManager, _overlayService: AdaptOverlayService, _dir: Directionality);
    mouseEnter(e: MouseEvent): void;
    mouseLeave(e: MouseEvent): void;
    focus(e: FocusEvent): void;
    blur(e: FocusEvent): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    open(): void;
    close(): void;
    isOpen(): boolean;
    toggle(): void;
    private _openOverlay;
    private _closeOverlay;
    private updateTooltipPosition;
    private isExist;
    private updateTooltipData;
    private calculateWidth;
    private createComponent;
    private updateCoordinates;
    private _setOverlayAriaAttributes;
    private _removeAriaAttributes;
    private _setAriaAttributes;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptTooltipDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptTooltipDirective, "[adaptTooltip]", ["tooltip"], { "delay": "popupDelay"; "placement": "placement"; "width": "width"; "minWidth": "minWidth"; "useWidthFitting": "useWidthFitting"; "adaptRadarDisableEventSending": "adaptRadarDisableEventSending"; "adaptTooltip": "adaptTooltip"; "manual": "manual"; }, { "shown": "shown"; "hidden": "hidden"; }, never>;
}
