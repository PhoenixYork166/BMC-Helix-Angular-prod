import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit } from '@angular/core';
import { DomSanitizer, SafeStyle, SafeUrl } from '@angular/platform-browser';
import { Point } from '@angular/cdk/drag-drop';
import { BehaviorSubject } from 'rxjs';
import { CropApi, CropToolErrorEvent, CropToolState, Dimensions } from './crop.model';
import { AdaptTranslateService } from '../common/i18n/index';
import { KeyValueObject } from '../common/common.models';
import { AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
export interface AdaptCropTexts {
    placeholder?: string;
    empty?: string;
    type?: string;
    size?: string;
    px?: string;
}
export declare class AdaptCropComponent extends AdaptRadarAngularGenericDirective implements OnInit, OnDestroy {
    private _elRef;
    private _domSanitizer;
    private _ngZone;
    private _changeDetectorRef;
    private _ts;
    imgURL: SafeUrl;
    cropArea: Dimensions;
    cropImg: {
        source: HTMLImageElement;
        naturalDim: Dimensions;
        dim: Dimensions;
        pos: Point;
        scale: number;
        fitScale: number;
        tolerance: Dimensions;
    };
    defaultTexts: AdaptCropTexts;
    texts: AdaptCropTexts;
    /**
     * Image for cropping. Can be URL string, base64 string or BehaviorSubject<File>.
     * Available formats: jpeg, jpg, png, gif, tiff, svg
     * @docs-default
     */
    image: string | BehaviorSubject<File>;
    /**
     * Initial cropping image position.
     * Calculates from left top corner of the cropArea
     * @docs-default
     */
    initPosition: Point;
    /**
     * The color of area out of crop
     * @docs-default rgba(255, 255, 255, .5)
     */
    offcutColor: string;
    /**
     * The text displaying while waiting for file
     * @docs-default Waiting for an image...
     */
    placeholder: string;
    /**
     * Label with crop area dimensions
     * @docs-default false
     */
    cropAreaLabel: boolean;
    /**
     * Additional Crop Tool functional
     * @docs-default
     */
    cropApi: CropApi;
    /**
     * An event fires on image position/scale change.
     * Returns new position
     */
    readonly positionChange: EventEmitter<{
        x: number;
        y: number;
        scale: number;
    }>;
    /**
     * An event fires on image cropped.
     * Returns new image as base64 string
     */
    readonly cropToBase64: EventEmitter<string>;
    /**
     * An event fires on image cropped.
     * Returns new image as Blob
     */
    readonly cropToFile: EventEmitter<Blob | null>;
    /**
     * An event fires on error relative to image source, size, load or crop
     */
    readonly error: EventEmitter<CropToolErrorEvent>;
    private _dragSubscription;
    private _states;
    currentState$: BehaviorSubject<CropToolState>;
    /**
     * Crop area width
     * @param v: number
     * @docs-default 100
     */
    set cropWidth(v: number);
    /**
     * Crop area height
     * @param v: number
     * @docs-default 100
     */
    set cropHeight(v: number);
    /**
     * Cropping image scale
     * @param v: number
     * @docs-default 100
     */
    set scale(v: number);
    get showPlaceholder(): boolean;
    get showLoader(): boolean;
    get getOffcutColor(): SafeStyle;
    constructor(_elRef: ElementRef, _domSanitizer: DomSanitizer, _ngZone: NgZone, _changeDetectorRef: ChangeDetectorRef, _ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    ngOnDestroy(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    onImageLoad(event: any): void;
    private _loadImage;
    private _loadImageFile;
    private _initImgScale;
    private _updateImgDim;
    private _setInitialImgPos;
    private _checkImgPos;
    private _initImgDrag;
    private _cropImg;
    private _fitToCropArea;
    private _centerCropImage;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptCropComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptCropComponent, "adapt-crop", never, { "image": "image"; "initPosition": "initPosition"; "offcutColor": "offcutColor"; "placeholder": "placeholder"; "cropAreaLabel": "cropAreaLabel"; "cropApi": "cropApi"; "cropWidth": "cropWidth"; "cropHeight": "cropHeight"; "scale": "scale"; }, { "positionChange": "positionChange"; "cropToBase64": "cropToBase64"; "cropToFile": "cropToFile"; "error": "error"; }, never, never>;
}
