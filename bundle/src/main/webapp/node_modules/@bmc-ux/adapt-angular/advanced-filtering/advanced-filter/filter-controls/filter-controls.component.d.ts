import { AfterContentInit, EventEmitter, TemplateRef } from '@angular/core';
import { ValidationError } from '../../../common/form.component';
import { AdaptMetatagComponent, TagType } from '../../../metatag/index';
import { RxDatetimePickerMode, RxSelectOption, SelectTexts } from '../../../rx/index';
import { AdvancedFilterBooleanDataType, AdvancedFilterBooleanTypeParams, AdvancedFilterDataTypesInputsTemplates, AdvancedFilterDateDataType, AdvancedFilterDatetimeDataType, AdvancedFilterDisabledResolver, AdvancedFilterMultipleDataOption, AdvancedFilterOption, AdvancedFilterStringDataType, AdvancedFilterTexts, AdvancedFilterTimeDataType, booleanDataTypeBlankValue, FilterOptionTemplateParams, NumberOrBigNumber } from './../advanced-filter.models';
import * as i0 from "@angular/core";
export declare type FilterValue = any;
export declare class AdaptFilterControlsComponent implements AfterContentInit {
    inputsForBooleanTypeTemplate: TemplateRef<FilterOptionTemplateParams>;
    inputsForTimeTypeTemplate: TemplateRef<FilterOptionTemplateParams>;
    inputsForDateTypeTemplate: TemplateRef<FilterOptionTemplateParams>;
    inputsForDatetimeTypeTemplate: TemplateRef<FilterOptionTemplateParams>;
    inputsForStringTypeTemplate: TemplateRef<FilterOptionTemplateParams>;
    inputsForSelectionTypeTemplate: TemplateRef<FilterOptionTemplateParams>;
    inputsForNumberTypeTemplate: TemplateRef<FilterOptionTemplateParams>;
    filterOption: AdvancedFilterOption;
    validationErrors: ValidationError[];
    hasAllInvalidTags: boolean;
    testID: string;
    disabledTabResolver: AdvancedFilterDisabledResolver;
    disabledInputResolver: AdvancedFilterDisabledResolver;
    showSelectedFiltersCount: boolean;
    selectedFiltersIndicationStyle: 'text' | 'mark';
    set filterValue(value: FilterValue);
    get filterValue(): FilterValue;
    set texts(value: AdvancedFilterTexts);
    get texts(): AdvancedFilterTexts;
    readonly filterValueChange: EventEmitter<FilterValue>;
    selectionTypeModel: any[];
    datetimeMode: typeof RxDatetimePickerMode;
    dataTypesInputsTemplates: AdvancedFilterDataTypesInputsTemplates;
    disabledSelectInputResolverBind: (option: RxSelectOption) => boolean;
    get hasValidationErrors(): boolean;
    private _texts;
    private _filterValue;
    ngAfterContentInit(): void;
    getFilterOptionInputsTemplate(): TemplateRef<FilterOptionTemplateParams>;
    getFilterOptionInputsTemplateParams(): FilterOptionTemplateParams;
    getSelectedFiltersCount(): string;
    onFilterOptionModelChange(value: FilterValue): void;
    updateFilterValue(value: FilterValue, emitEvent: boolean): void;
    trackByForErrorMessageFn(index: number, error: ValidationError): string | number;
    initDataTypesConfigsTemplates(): void;
    selectOptionFormatter(option: RxSelectOption): string;
    isTabDisabled(): boolean;
    isInputDisabled(filterMultipleDataOption?: AdvancedFilterMultipleDataOption): boolean;
    disabledSelectInputResolver(option: RxSelectOption): boolean;
    /** Methods for specific types: Start */
    getSelectionTypeOptions(): RxSelectOption[];
    canShowSimpleInlineSelect(): boolean;
    getSelectionTypeTexts(): SelectTexts;
    getBooleanTypeOptionParams(): AdvancedFilterBooleanTypeParams;
    getNumberDataTypeModel(indexOfCounter: number): number;
    getNumberDataTypeMinAllowedValue(): NumberOrBigNumber;
    getNumberDataTypeMaxAllowedValue(): NumberOrBigNumber;
    onBooleanTypeFilterOptionModelChange(model: AdvancedFilterBooleanDataType): void;
    getBooleanTypeBlankValue(): typeof booleanDataTypeBlankValue;
    getStringDataTypeModel(ngModelValue: AdvancedFilterStringDataType): TagType[];
    onStringTypeFilterOptionModelChange(model: TagType[], tagField: AdaptMetatagComponent): void;
    onTimeTypeFilterOptionModelChange(model: AdvancedFilterTimeDataType): void;
    onDateTypeFilterOptionModelChange(model: AdvancedFilterDateDataType): void;
    onDateTimeTypeFilterOptionModelChange(model: AdvancedFilterDatetimeDataType): void;
    onDateTimeComponentModelChangeBase(model: AdvancedFilterDatetimeDataType): void;
    onSelectionTypeFilterOptionModelChange(value: RxSelectOption[]): void;
    /** Methods for specific types: End */
    private _getTodayDatetimeStruct;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptFilterControlsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptFilterControlsComponent, "adapt-filter-controls", never, { "filterOption": "filterOption"; "validationErrors": "validationErrors"; "hasAllInvalidTags": "hasAllInvalidTags"; "testID": "testID"; "disabledTabResolver": "disabledTabResolver"; "disabledInputResolver": "disabledInputResolver"; "showSelectedFiltersCount": "showSelectedFiltersCount"; "selectedFiltersIndicationStyle": "selectedFiltersIndicationStyle"; "filterValue": "filterValue"; "texts": "texts"; }, { "filterValueChange": "filterValueChange"; }, never, never>;
}
