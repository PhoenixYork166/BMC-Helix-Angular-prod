import { ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { PlacementArray } from '../common/positioning';
import { AdaptDropdownDirective } from '../dropdown/index';
import { AdaptTranslateService } from '../common/i18n/index';
import { KeyValueObject } from '../common/common.models';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
export declare const defaultDropdownPlacement: PlacementArray;
export declare abstract class BaseFilterDirective<TTexts extends KeyValueObject> extends AdaptRadarAngularGenericDirective implements OnDestroy {
    _uniqueId: string;
    filtersDropdown: AdaptDropdownDirective;
    appendDropdownToBody: boolean;
    anchorDropdownTo: HTMLElement;
    testID: string;
    set dropdownPlacement(value: PlacementArray);
    get dropdownPlacement(): PlacementArray;
    set texts(value: TTexts);
    get texts(): TTexts;
    readonly dropdownOpenStateChange: EventEmitter<boolean>;
    protected _dropdownPlacement: PlacementArray;
    protected defaultTexts: TTexts;
    protected _texts: TTexts;
    protected _destroyed$: ReplaySubject<boolean>;
    constructor(ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>, _entityName: AdaptRadarAngularCustomEventName);
    ngOnDestroy(): void;
    abstract setDefaultTexts(translation: KeyValueObject): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BaseFilterDirective<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BaseFilterDirective<any>, never, never, { "appendDropdownToBody": "appendDropdownToBody"; "anchorDropdownTo": "anchorDropdownTo"; "testID": "testID"; "dropdownPlacement": "dropdownPlacement"; "texts": "texts"; }, { "dropdownOpenStateChange": "dropdownOpenStateChange"; }, never>;
}
