import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, QueryList, TemplateRef } from '@angular/core';
import { AbstractControl, NgControl, ValidationErrors, Validator } from '@angular/forms';
import { AnimationEvent } from '@angular/animations';
import { EventManager } from '@angular/platform-browser';
import { Observable } from 'rxjs';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import { AdaptTranslateService } from '../../common/i18n/index';
import { KeyValueObject, StylesObject } from '../../common/common.models';
import { ResizeService } from '../../common/resize/resize.service';
import { AdaptOverlayService } from '../../common/overlay/index';
import { ActiveTabChangeEvent } from '../../tabs/index';
import { AdaptCustomAction, AdaptCustomActionsAlignEnum } from '../../custom-actions/index';
import { AdaptDropdownMobileView } from '../../dropdown/index';
import { AdaptMetatagComponent, InitTagEditingEvent, RemoveTagEvent, TagModel, TagType } from '../../metatag/index';
import { AdaptRxTextfieldComponent } from '../../rx/rx-textfield/index';
import { BusyConfig } from '../../busy-loader/index';
import { BaseFilterDirective } from '../base-filter';
import { FilterTagsRemoveEvent, FilterTagsVisibilityChangedEvent } from '../filter-tags/adapt-filter-tags.model';
import { AdvancedFilterDataTypesConfigsService } from './advanced-filter-configs.service';
import { AdaptFilterControlsComponent } from './filter-controls/filter-controls.component';
import { ActiveSavedFilterSelectionCause, AdvancedFilterControlsData, AdvancedFilterDataTypesConfigs, AdvancedFilterDisabledResolver, AdvancedFilterExpressionTip, AdvancedFilterOption, AdvancedFilterOptionConfig, AdvancedFilterRemoveTagEvent, AdvancedFilterSelectionChangeEvent, AdvancedFilterTag, AdvancedFilterTagModel, AdvancedFilterTagsChangedEvent, AdvancedFilterTexts, BeforeActiveSavedFilterChangeEvent, CreateAdvancedFilterEvent, EditFilterAnimationParams, EditingSavedFilterData, EditSavedFilterClickEvent, MarkDefaultSavedFilterClickEvent, SavedAdvancedFilter, SaveNewFilterClickEvent, SelectedAdvancedFilter, UpdateFiltersExpressionModelOptions, UpdateSavedFilterEvent } from './advanced-filter.models';
import { AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import * as i0 from "@angular/core";
export interface EditFilterListItemAnimationParams {
    savedFilter: SavedAdvancedFilter;
    scope: AdaptAdvancedFilterComponent;
    savedFilterListItemTranslateXPixels: number;
    savedFilterListItemTranslateYPixels: number;
}
export declare function getEditSavedFilterListItemTransition(params: EditFilterListItemAnimationParams): boolean;
export declare function getEditSavedFilterListItemTransitionFromVoidStateFn(fromState: string, toState: string, element: HTMLElement, params: EditFilterListItemAnimationParams): boolean;
export declare function getEditSavedFilterListItemTransitionFromAnyStateFn(fromState: string, toState: string, element: HTMLElement, params: EditFilterListItemAnimationParams): boolean;
export declare class AdaptAdvancedFilterNameValidator implements Validator {
    adaptAdvancedFilterNameErrorText: string;
    validate(control: AbstractControl): ValidationErrors | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptAdvancedFilterNameValidator, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptAdvancedFilterNameValidator, "[adaptAdvancedFilterName][ngModel],[adaptAdvancedFilterName][formControl]", never, { "adaptAdvancedFilterNameErrorText": "adaptAdvancedFilterNameErrorText"; }, {}, never>;
}
export declare class AdaptAdvancedFilterComponent extends BaseFilterDirective<AdvancedFilterTexts> implements OnInit, AfterViewInit, OnDestroy {
    private _ngZone;
    private _eventManager;
    private _dataTypesConfigsService;
    private _changeDetector;
    private _deviceDetection;
    private _translateService;
    private _resizeService;
    overlayService: AdaptOverlayService;
    adaptDropdownMenu: ElementRef<HTMLDivElement>;
    adaptDropdownButton: ElementRef<HTMLButtonElement>;
    editingFilterOptionsScrollableEl: ElementRef<HTMLDivElement>;
    editingFilterFooterEl: ElementRef<HTMLDivElement>;
    filterExpressionTagField: AdaptMetatagComponent;
    filterExpressionFormControl: NgControl;
    editingFilterExpressionTagField: AdaptMetatagComponent;
    applyFiltersByUserActionFooterEl: ElementRef<HTMLDivElement>;
    filtersDropdownWrapper: ElementRef<HTMLDivElement>;
    filterTags: ElementRef<Element>;
    editingFilterExpressionFormControl: NgControl;
    newFilterNameEditor: AdaptRxTextfieldComponent;
    filterOptionsControls: QueryList<AdaptFilterControlsComponent>;
    filterOptions: AdvancedFilterOption[];
    savedFilters: SavedAdvancedFilter[];
    enableDefaultSavedFilter: boolean;
    defaultSavedFilterId: string;
    busyConfig: BusyConfig;
    get activeSavedFilter(): SavedAdvancedFilter;
    set activeSavedFilter(activeSavedFilterArgs: SavedAdvancedFilter);
    disableExpressionEditing: boolean;
    showAnchorButtonLabel: boolean;
    getCustomExpressionTagFieldModel: (tags: AdvancedFilterTag[]) => AdvancedFilterTag[];
    enableSavedFilters: boolean;
    set applyFiltersByUserAction(appliedFilterByUserAction: boolean);
    get applyFiltersByUserAction(): boolean;
    canCloseDropdownResolver: (event: MouseEvent) => boolean;
    /**
     * Toggle tabs visibility
     *
     * @since v11.11.0
     */
    showTabToolbar: boolean;
    /**
     * @since v10.6.0
     */
    disabledTabResolver: AdvancedFilterDisabledResolver;
    /**
     * @since v10.6.0
     */
    disabledInputResolver: AdvancedFilterDisabledResolver;
    /**
     * @since v10.6.0
     */
    showSelectedFiltersCount: boolean;
    /**
     * Selected filter indication style
     *
     * @since v12.13.0
     * @docs-default 'text'
     */
    selectedFiltersIndicationStyle: 'text' | 'mark';
    /**
     * @since v10.12.0
     */
    filterOptionsCustomAreaTemplate: TemplateRef<void>;
    /**
     * @since v10.14.0
     */
    showTags: boolean;
    /**
     * This input controls if filter button (anchor) should be disabled
     * @since v10.8.0
     */
    anchorDisabled: boolean;
    /**
     * This input controls using full container width for editing tags
     * @since v11.11.0
     */
    fullWidthEdit: boolean;
    /**
     * Workaround: is used for animation. Reassign this input if you have localization
     */
    translateFilterEditingTitleXPixels: number;
    set selectedFilters(selectedFilters: SelectedAdvancedFilter[]);
    get selectedFilters(): SelectedAdvancedFilter[];
    set isLoading(val: boolean);
    get isLoading(): boolean;
    readonly selectedFiltersChange: EventEmitter<SelectedAdvancedFilter[]>;
    readonly filterSelectionChange: EventEmitter<AdvancedFilterSelectionChangeEvent>;
    readonly deleteSavedFilter: EventEmitter<SavedAdvancedFilter>;
    readonly createNewFilter: EventEmitter<CreateAdvancedFilterEvent>;
    readonly updateSavedFilter: EventEmitter<UpdateSavedFilterEvent>;
    readonly beforeActiveSavedFilterChange: EventEmitter<BeforeActiveSavedFilterChangeEvent>;
    readonly activeSavedFilterChange: EventEmitter<SavedAdvancedFilter>;
    readonly removeTag: EventEmitter<AdvancedFilterRemoveTagEvent>;
    readonly filtersCleared: EventEmitter<MouseEvent>;
    readonly saveNewFilterClick: EventEmitter<SaveNewFilterClickEvent>;
    readonly filtersSelectionCanceled: EventEmitter<void>;
    readonly editSavedFilterClick: EventEmitter<EditSavedFilterClickEvent>;
    readonly markDefaultSavedFilterClick: EventEmitter<MarkDefaultSavedFilterClickEvent>;
    readonly editingSavedFilterCanceled: EventEmitter<void>;
    /**
     * It is emitted when the component changes the model for the filterExpressionTagField.
     * Is needed for advanced component usage.
     */
    readonly filterExpressionTagsChanged: EventEmitter<AdvancedFilterTagsChangedEvent>;
    get currentFiltersExpressionsTags(): AdvancedFilterTag[];
    get canShowCreatingNewFilterPreset(): boolean;
    get canShowSaveNewFilterButton(): boolean;
    get currentFilterActions(): AdaptCustomAction[];
    get creatingNewFilterActions(): AdaptCustomAction[];
    get dropdownMobileView(): AdaptDropdownMobileView;
    get dropdownCustomClass(): string;
    get dropdownAnchorLabel(): string;
    selectedFiltersTags: AdvancedFilterTag[];
    advancedFilterDataTypesConfigs: AdvancedFilterDataTypesConfigs;
    filtersExpressionsTags: AdvancedFilterTag[];
    currentEditingSavedFilter: EditingSavedFilterData;
    isCreatingNewFilterPreset: boolean;
    creatingNewFilterPresetName: string;
    tabsetActiveIndex: number;
    editFilterContainerAnimationOptions: {
        params: EditFilterAnimationParams;
        value: ':enter' | ':leave';
    };
    menuElStyle: StylesObject;
    editingFilterScrollableElStyle: StylesObject;
    customActionsAlignedTo: AdaptCustomActionsAlignEnum;
    isNewFilterNameEditorFocus: boolean;
    isMobile: boolean;
    isTablet: boolean;
    isFilterOutsideTagsHidden: boolean;
    dropdownAnchorWithCounterLabel: string;
    dropdownMenuContentVisible: boolean;
    isEntirelyScrollable: boolean;
    private _isLoading;
    private _removeTapEventListener;
    private _preservedSelectedFilters;
    private _preservedActiveSavedFilter;
    private _isInitialized;
    private _selectedFilters;
    private _activeSavedFilter;
    private _applyFiltersByUserAction;
    private _notAppliedSelectedFilters;
    private readonly _entirelyScrollHeight;
    constructor(_ngZone: NgZone, _eventManager: EventManager, _dataTypesConfigsService: AdvancedFilterDataTypesConfigsService, _changeDetector: ChangeDetectorRef, _deviceDetection: AdaptDeviceDetectionService, _translateService: AdaptTranslateService, _resizeService: ResizeService, overlayService: AdaptOverlayService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    onActiveTabChange(event: ActiveTabChangeEvent): void;
    clear(event: MouseEvent): void;
    getExpressionTagFieldPlaceholder(): string;
    getExpressionTagFieldModel(forceSetNewValue?: boolean): AdvancedFilterTag[];
    onSaveNewFilterClick(event: MouseEvent): void;
    getFilterOptionConfig(filterOption: AdvancedFilterOption): AdvancedFilterOptionConfig;
    getVisibleFilterOptionsData(): AdvancedFilterControlsData[];
    getVisibleFilterOptions(): AdvancedFilterOption[];
    onFilterOptionModelChange<TValue = any>(value: TValue, filterOption: AdvancedFilterOption<TValue>): void;
    updateFiltersExpressionModel(filterExpressionTags: AdvancedFilterTag[], options: UpdateFiltersExpressionModelOptions, filterOptionId?: string, oldFilterValue?: any, newFilterValue?: any): void;
    getFilterOptionModel<TValue = any>(filterOption: AdvancedFilterOption): TValue;
    getFilterOptionTag(filterOption: AdvancedFilterOption): AdvancedFilterTag;
    onRemoveCurrentFiltersExpressionFieldTag(event: RemoveTagEvent): void;
    onActiveFiltersTagFieldModelChange(newTags: TagType<AdvancedFilterTagModel | AdvancedFilterExpressionTip>[]): void;
    onTagFieldModelChange(newTags: TagType<AdvancedFilterTagModel | AdvancedFilterExpressionTip>[]): void;
    onInitExpressionFieldTagEditing(event: InitTagEditingEvent): void;
    /**
     * Checks whether the 'data' or 'filterOption' properties are empty.
     * Custom tags are used in specific cases when needs to pass additional tags
     * in the expression area
     */
    isCustomTag(tag: AdvancedFilterTag): boolean;
    getTagFilterOptionId(tag: AdvancedFilterTag): string;
    createTagFromExpressionTip(tagTip: TagModel<AdvancedFilterExpressionTip>): AdvancedFilterTag;
    setFiltersMetatagInputValue(inputValue: string): void;
    expressionSearch(text$: Observable<string>): Observable<TagModel<AdvancedFilterExpressionTip>[]>;
    getAllExpressionFieldTips(searchTerm?: string): TagModel<AdvancedFilterExpressionTip>[];
    onSelectActiveSavedFilter(savedFilter: SavedAdvancedFilter): void;
    setActiveSavedFilter(savedFilter: SavedAdvancedFilter, selectionCause: ActiveSavedFilterSelectionCause): void;
    convertSelectedFiltersToTags(filters: SelectedAdvancedFilter[]): AdvancedFilterTag[];
    getSavedFiltersByCurrentUser(): SavedAdvancedFilter[];
    getSavedFiltersByOtherUsers(): SavedAdvancedFilter[];
    markDefaultSavedFilter(savedFilter: SavedAdvancedFilter, mouseEvent: MouseEvent): void;
    onEditSavedFilterClick(savedFilter: SavedAdvancedFilter, savedFilterListItem: HTMLLIElement, mouseEvent: MouseEvent): void;
    getSavedFilterListItemAnimationState(savedFilter: SavedAdvancedFilter, savedFilterListItem: HTMLLIElement): {
        value: '*';
        params: EditFilterListItemAnimationParams;
    };
    onEditSavedFilterListItemAnimationDone(event: AnimationEvent, savedFilter: SavedAdvancedFilter): void;
    hasDuplicateNameInCreating(): boolean;
    hasDuplicateNameInEditing(): boolean;
    getSavedFiltersByCurrentUserExceptEditing(): SavedAdvancedFilter[];
    hasDuplicateNameInSavedFilter(savedFiltersByCurrentUser: SavedAdvancedFilter[], filterPresetName: string): boolean;
    generateUniqueSavedFilterName(filterPresetName: string, savedFiltersByCurrentUser: SavedAdvancedFilter[]): string;
    onCreateNewFilterPreset(): void;
    getCreatingNewFilterPresetNameTrimmed(): string;
    getEditingFilterPresetNameTrimmed(): string;
    onNewFilterNameEditorKeyDown(event: KeyboardEvent): void;
    onNewFilterNameEditorFocus(): void;
    onNewFilterNameEditorBlur(): void;
    getFiltersExpressionFieldLabel(): string;
    cancelFiltersSelection(): void;
    removeAllSelectedFilters(event: MouseEvent): void;
    applySelectedFilters(): void;
    isClearSelectedFiltersButtonDisabled(): boolean;
    isApplySelectedFiltersButtonDisabled(): boolean;
    getFilterExpressionFieldClass(mainClass: string, filterExpressionTagField: AdaptMetatagComponent): string;
    getSelectedFiltersFromCurrentTags(): SelectedAdvancedFilter[];
    getSelectedFiltersFromTags(tags: AdvancedFilterTag[]): SelectedAdvancedFilter[];
    getCustomTagsFromCurrentTags(): AdvancedFilterTag[];
    convertTagToSelectedFilter(tag: AdvancedFilterTag): SelectedAdvancedFilter;
    hasValidCurrentFilterTags(): boolean;
    hasAllInvalidCurrentFilterTags(): boolean;
    tagFieldWarningCheckResolver(tag: AdvancedFilterTag): boolean;
    onCancelCreatingNewFilterPreset(): void;
    exitCreatingNewFilterPreset(): void;
    onDeleteSavedFilterClick(savedFilter: SavedAdvancedFilter): void;
    cancelSavedFilterEditing(): void;
    saveSavedFilterEditing(): void;
    calculateEditingFilterOptionsScrollableElStyle(): void;
    getScrollableElStyle(scrollableEl: HTMLElement, bottomDiff?: number): StylesObject;
    setIsLoadingState(value: boolean): void;
    trackByForSavedFilterFn(index: number, savedFilter: SavedAdvancedFilter): string | number;
    trackByForFilterOptionDataFn(index: number, optionData: AdvancedFilterControlsData): string | number;
    onAnchorPositionChange(): void;
    onPopupAnimationDone(event: AnimationEvent): void;
    handleDropdownOpenChange(opened: boolean): void;
    isFilterActive(savedFilter: SavedAdvancedFilter): boolean;
    onRemoveFromOutsideTag(event: FilterTagsRemoveEvent): void;
    onVisibilityChanged(event: FilterTagsVisibilityChangedEvent): void;
    private _onRemoveTag;
    private _dropdownCancelCB;
    private _dropdownDoneCB;
    private addNewTagOrUpdateExisting;
    private updateExpressionFieldControl;
    private _updateStyles;
    private _getFilterContainerStyle;
    private _getScrollableElMaxHeight;
    private getBusyConfig;
    private _closeFromClick;
    private createTag;
    private _updateSelectedFilters;
    private _checkIfFilterTagsLabelVisible;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptAdvancedFilterComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptAdvancedFilterComponent, "adapt-advanced-filter", never, { "filterOptions": "filterOptions"; "savedFilters": "savedFilters"; "enableDefaultSavedFilter": "enableDefaultSavedFilter"; "defaultSavedFilterId": "defaultSavedFilterId"; "busyConfig": "busyConfig"; "activeSavedFilter": "activeSavedFilter"; "disableExpressionEditing": "disableExpressionEditing"; "showAnchorButtonLabel": "showAnchorButtonLabel"; "getCustomExpressionTagFieldModel": "getCustomExpressionTagFieldModel"; "enableSavedFilters": "enableSavedFilters"; "applyFiltersByUserAction": "applyFiltersByUserAction"; "canCloseDropdownResolver": "canCloseDropdownResolver"; "showTabToolbar": "showTabToolbar"; "disabledTabResolver": "disabledTabResolver"; "disabledInputResolver": "disabledInputResolver"; "showSelectedFiltersCount": "showSelectedFiltersCount"; "selectedFiltersIndicationStyle": "selectedFiltersIndicationStyle"; "filterOptionsCustomAreaTemplate": "filterOptionsCustomAreaTemplate"; "showTags": "showTags"; "anchorDisabled": "anchorDisabled"; "fullWidthEdit": "fullWidthEdit"; "translateFilterEditingTitleXPixels": "translateFilterEditingTitleXPixels"; "selectedFilters": "selectedFilters"; "isLoading": "isLoading"; }, { "selectedFiltersChange": "selectedFiltersChange"; "filterSelectionChange": "filterSelectionChange"; "deleteSavedFilter": "deleteSavedFilter"; "createNewFilter": "createNewFilter"; "updateSavedFilter": "updateSavedFilter"; "beforeActiveSavedFilterChange": "beforeActiveSavedFilterChange"; "activeSavedFilterChange": "activeSavedFilterChange"; "removeTag": "removeTag"; "filtersCleared": "filtersCleared"; "saveNewFilterClick": "saveNewFilterClick"; "filtersSelectionCanceled": "filtersSelectionCanceled"; "editSavedFilterClick": "editSavedFilterClick"; "markDefaultSavedFilterClick": "markDefaultSavedFilterClick"; "editingSavedFilterCanceled": "editingSavedFilterCanceled"; "filterExpressionTagsChanged": "filterExpressionTagsChanged"; }, never, never>;
}
