import { TemplateRef } from '@angular/core';
import BigNumber from 'bignumber.js';
import { ValidationError } from '../../common/form.component';
import { ValueOrFunc1, KeyValueObject, DefaultPreventable } from '../../common/common.models';
import { TagModel, TagType, AdaptMetatagComponent, RemoveTagEvent } from '../../metatag/index';
import { RxSelectOption, SelectTexts, RxDatetimeStruct, RxDatetimeTexts } from '../../rx/index';
import { SimpleFilterOption } from '../simple-filter/index';
export declare enum AdvancedFilterOptionDataType {
    boolean = "boolean",
    time = "time",
    date = "date",
    datetime = "datetime",
    string = "string",
    selection = "selection",
    number = "number",
    custom = "custom"
}
export declare type NumberOrBigNumber = number | BigNumber;
export declare const booleanDataTypeBlankValue = "blank";
export declare type AdvancedFilterBooleanDataType = boolean | 'blank';
export declare type AdvancedFilterTimeDataType = [RxDatetimeStruct, RxDatetimeStruct];
export declare type AdvancedFilterDateDataType = [RxDatetimeStruct, RxDatetimeStruct];
export declare type AdvancedFilterDatetimeDataType = [RxDatetimeStruct, RxDatetimeStruct];
export declare type AdvancedFilterStringDataType = string[];
export declare type AdvancedFilterSelectionDataType = (number | string)[];
export declare type AdvancedFilterNumberDataType = [NumberOrBigNumber, NumberOrBigNumber];
export declare type AdvancedFilterMultipleDataOption = AdvancedFilterBooleanDataType | AdvancedFilterSelectionDataType;
export interface FilterOptionTemplateParams<TValue = any> {
    filterOption: AdvancedFilterOption;
    value: TValue;
    /** has type AdaptFilterControlsComponent */
    filterControlsComponent: KeyValueObject;
}
export interface ParsedTagFieldExpressionResult<TValue = any> {
    value: TValue;
}
export interface SelectedAdvancedFilter<TValue = any> {
    filterOptionId: string;
    value: TValue;
}
export interface SavedAdvancedFilter<TValue = any> {
    id: string;
    name: string;
    filters: SelectedAdvancedFilter<TValue>[];
    isCreatedByOtherUsers?: boolean;
}
export declare enum ActiveSavedFilterSelectionCause {
    SelectedByUser = 1,
    OnFilterChange = 2,
    OnFiltersClear = 3,
    OnSelectedFiltersSetter = 4
}
export interface BeforeActiveSavedFilterChangeEvent {
    previousActiveSavedFilter: SavedAdvancedFilter;
    savedFilterToSelect: SavedAdvancedFilter;
    preventFiltersUpdating: () => void;
    preventActiveFilterUpdating: () => void;
    selectionCause: ActiveSavedFilterSelectionCause;
}
export interface AdvancedFilterSelectionChangeEvent<TValue = any> {
    filterOptionId: string;
    oldValue: TValue;
    newValue: TValue;
}
export interface CreateAdvancedFilterEvent<TValue = any> {
    filters: SelectedAdvancedFilter<TValue>[];
    name: string;
    originalName: string;
}
export interface AdvancedFilterTagModel<TValue = any> {
    filterOption: AdvancedFilterOption<TValue>;
    value: TValue;
    validationErrors?: ValidationError[];
}
export declare type AdvancedFilterTag = TagModel<AdvancedFilterTagModel>;
export interface UpdateFiltersExpressionModelOptions {
    updateAndEmitSelectedFiltersChange: boolean;
    deselectActiveSavedFilter: ActiveSavedFilterSelectionCause;
    clearMetatagInputValue: boolean;
    updateEditingFilterTags: boolean;
    applyFiltersByUserAction: boolean;
}
export interface EditingSavedFilterData<TValue = any> {
    originalSavedFilter: SavedAdvancedFilter<TValue>;
    filterName: string;
    filtersExpressionsTags: AdvancedFilterTag[];
}
export interface UpdateSavedFilterEvent<TValue = any> {
    oldSavedFilter: SavedAdvancedFilter<TValue>;
    newSavedFilter: SavedAdvancedFilter<TValue>;
    originalNewFilterName: string;
    customFilterExpressionsTags?: AdvancedFilterTag[];
}
export interface AdvancedFilterTagsChangedEvent {
    filterExpressionTags: AdvancedFilterTag[];
}
export interface SaveNewFilterClickEvent extends DefaultPreventable {
    domEvent: MouseEvent;
}
export interface EditSavedFilterClickEvent extends DefaultPreventable {
    domEvent: MouseEvent;
    savedFilter: SavedAdvancedFilter;
    savedFilterListItem: HTMLLIElement;
    initSavedFilterEditing: (getCustomExpressionTagFieldEditModel?: (tags: AdvancedFilterTag[]) => AdvancedFilterTag[]) => void;
}
export interface MarkDefaultSavedFilterClickEvent extends DefaultPreventable {
    domEvent: MouseEvent;
    defaultSavedFilterId: string;
}
export declare type AdvancedFilterRemoveTagFromOutsideEvent = Omit<RemoveTagEvent, 'preventDefault'>;
export interface AdvancedFilterRemoveTagEvent {
    tagFieldEvent: RemoveTagEvent | AdvancedFilterRemoveTagFromOutsideEvent;
    tag: AdvancedFilterTag;
    index: number;
}
export interface EditFilterAnimationParams {
    titleTranslateXPixels: number;
    titleTranslateYPixels: number;
    lastEditingSavedFilter: EditingSavedFilterData;
}
export interface AdvancedFilterOptionConfig<TValue = any> {
    getTagText?: (value: TValue, filterOption: AdvancedFilterOption<TValue>, formattedValueForTag?: string) => string;
    formatValueForTag?: (value: TValue, filterOption: AdvancedFilterOption<TValue>) => string;
    needRemoveTagValue?: (value: TValue, filterOption: AdvancedFilterOption<TValue>) => boolean;
    validateValue?: (value: TValue, filterOption: AdvancedFilterOption<TValue>) => ValidationError[];
    getExpressionFieldTips?: (filterOption: AdvancedFilterOption<TValue>, searchTerm: string) => TagModel<AdvancedFilterExpressionTip<TValue>>[];
    updateFilterValue?: (newValue: TValue, oldValue: TValue, filterOption: AdvancedFilterOption<TValue>) => TValue;
    parseTagFieldExpression?: (filterOption: AdvancedFilterOption<TValue>, searchTerm: string) => ParsedTagFieldExpressionResult<TValue> | null;
}
export interface AdvancedFilterSelectionTypeData {
    selectOptions?: RxSelectOption[];
    selectTexts?: SelectTexts;
}
export interface AdvancedFilterBooleanTypeParams {
    hasBlankValue?: boolean;
}
export interface AdvancedFilterNumberTypeParams {
    minValue?: NumberOrBigNumber;
    maxValue?: NumberOrBigNumber;
}
export interface AdvancedFilterStringTypeParams<TTagData = any> {
    adjustModelForTagField?: (value: AdvancedFilterStringDataType, filterOption: AdvancedFilterOption<AdvancedFilterStringDataType>) => TagType<TTagData>[];
    adjustTagFieldModelForFilter?: (value: TagType<TTagData>[], filterOption: AdvancedFilterOption<AdvancedFilterStringDataType>, tagField: AdaptMetatagComponent) => AdvancedFilterStringDataType;
}
export interface AdvancedFilterControlsData {
    option: AdvancedFilterOption;
    tag: AdvancedFilterTag | null;
}
export interface AdvancedFilterOption<TValue = any, TData = any> extends SimpleFilterOption<TData> {
    dataType: AdvancedFilterOptionDataType;
    customConfig?: AdvancedFilterOptionConfig<TValue>;
    inputsTemplate?: TemplateRef<FilterOptionTemplateParams<TValue>>;
    isHidden?: ValueOrFunc1<boolean>;
}
export interface NumberTypeValidationErrorsTexts {
    fromValueMustBeNumber?: string;
    toValueMustBeNumber?: string;
    invalidBetweenMinAndMax?: string;
    invalidMinValue?: string;
    invalidMaxValue?: string;
}
export interface AdvancedFilterValidationErrorsTexts {
    invalidRangeName?: string;
    invalidRangeText?: string;
    numberTypeTexts?: NumberTypeValidationErrorsTexts;
}
export interface AdvancedFilterDataTypesConfigsTexts {
    fromLabel?: string;
    toLabel?: string;
    trueLabel?: string;
    falseLabel?: string;
    blankLabel?: string;
    validationErrors?: AdvancedFilterValidationErrorsTexts;
}
export interface AdvancedFilterTexts {
    initialDropdownAnchorLabel?: string;
    initialDropdownAnchorWithCounterLabel?: string;
    clearButtonLabel?: string;
    saveButtonLabel?: string;
    createdByMeLabel?: string;
    createdByOthersLabel?: string;
    editLabel?: string;
    backLabel?: string;
    cancelLabel?: string;
    removeAllLabel?: string;
    applyFiltersLabel?: string;
    expressionFilterPlaceholder?: string;
    disabledFilterExpressionFieldPlaceholder?: string;
    filtersLabel?: string;
    /** @since 12.13.0 */
    filtersLabelAlone?: string;
    noFiltersSaved?: string;
    savedFiltersLabel?: string;
    filterNameInputPlaceholder?: string;
    requiredLabel?: string;
    filterNameLabel?: string;
    stringTypeTagFieldPlaceholder?: string;
    counterFromLabel?: string;
    counterToLabel?: string;
    removeLabel?: string;
    configsTexts?: AdvancedFilterDataTypesConfigsTexts;
    inlineSelectTexts?: SelectTexts;
    /** @since 10.7.0 */
    datetimeTexts?: RxDatetimeTexts;
    filterNameErrorMessage?: string;
    filtersExpressionFieldLabel?: string;
    selectedFiltersExpressionFieldLabel?: string;
    filtersExpressionMainErrorText?: string;
    filtersExpressionWarningText?: string;
    duplicateSavedFilterNameError?: string;
    selectedFiltersCountLabel?: string;
    hiddenItemsCounterLabel?: string;
    markDefaultSavedFilterLabel?: string;
    defaultSavedFilterLabel?: string;
}
export interface AdvancedFilterExpressionTip<TValue = any> extends AdvancedFilterTagModel<TValue> {
    isIncompletedExpression?: boolean;
}
export declare type AdvancedFilterDisabledResolver = (filterOption: AdvancedFilterOption, filterMultipleDataOption?: AdvancedFilterMultipleDataOption) => boolean;
export declare type AdvancedFilterDataTypesConfigs = {
    [dataType in AdvancedFilterOptionDataType]: AdvancedFilterOptionConfig;
};
export declare type AdvancedFilterDataTypesInputsTemplates = {
    [dataType in AdvancedFilterOptionDataType]: TemplateRef<FilterOptionTemplateParams>;
};
