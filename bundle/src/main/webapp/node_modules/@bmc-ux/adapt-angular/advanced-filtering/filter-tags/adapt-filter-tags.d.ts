import { ChangeDetectorRef, EventEmitter } from '@angular/core';
import { AdaptSubnavItemComponent } from '../../subnav/subnav-item.component';
import { AdvancedFilterTag, AdvancedFilterTexts } from '../advanced-filter/advanced-filter.models';
import { FacetedFilterTexts, SelectedFacetedFilterTag } from '../faceted-filter/faceted-filter.models';
import { FilterTagsRemoveEvent, FilterTagsVisibilityChangedEvent } from './adapt-filter-tags.model';
import * as i0 from "@angular/core";
export declare class AdaptFilterTagsComponent {
    private _cdr;
    hiddenTagsLabel: string;
    tags: AdvancedFilterTag[] | SelectedFacetedFilterTag[];
    texts: AdvancedFilterTexts | FacetedFilterTexts;
    readonly remove: EventEmitter<FilterTagsRemoveEvent>;
    readonly visibilityChanged: EventEmitter<FilterTagsVisibilityChangedEvent>;
    class: boolean;
    constructor(_cdr: ChangeDetectorRef);
    trackByForOutsideTag(index: number, tag: AdvancedFilterTag | SelectedFacetedFilterTag): string | number;
    onRemove(domEvent: MouseEvent | KeyboardEvent, tag: AdvancedFilterTag | SelectedFacetedFilterTag, index: number): void;
    handleVisibilityChanged(items: AdaptSubnavItemComponent[]): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptFilterTagsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptFilterTagsComponent, "adapt-filter-tags", never, { "tags": "tags"; "texts": "texts"; }, { "remove": "remove"; "visibilityChanged": "visibilityChanged"; }, never, never>;
}
