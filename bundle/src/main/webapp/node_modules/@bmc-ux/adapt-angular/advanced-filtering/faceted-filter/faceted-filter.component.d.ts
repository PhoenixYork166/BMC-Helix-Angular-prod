import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit } from '@angular/core';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import { AdaptTranslateService } from '../../common/i18n/index';
import { KeyValueObject } from '../../common/common.models';
import { ResizeService } from '../../common/resize/resize.service';
import { AdaptDropdownDirective, AdaptDropdownMobileView } from '../../dropdown/index';
import { AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { TreeTexts, TreeTrim, TreeWrap } from '../../tree/tree.model';
import { BaseFilterDirective } from '../base-filter';
import { FacetedFilterOption, FacetedFilterTexts, FacetedFilterTreeNode, SelectedFacetedFilterTag } from './faceted-filter.models';
import { FilterTagsRemoveEvent, FilterTagsVisibilityChangedEvent } from '../filter-tags/adapt-filter-tags.model';
import * as i0 from "@angular/core";
export declare class AdaptFacetedFilterComponent extends BaseFilterDirective<FacetedFilterTexts> implements OnInit, AfterViewInit, OnDestroy {
    private _translateService;
    private _deviceDetection;
    private _ngZone;
    private _changeDetector;
    private _resizeService;
    set filterOptions(value: FacetedFilterOption[]);
    get filterOptions(): FacetedFilterOption[];
    set selectedFilters(value: FacetedFilterOption[]);
    get selectedFilters(): FacetedFilterOption[];
    get dropdownMobileView(): AdaptDropdownMobileView;
    get dropdownAnchorLabel(): string;
    showTags: boolean;
    enableSearch: boolean;
    searchTexts: TreeTexts;
    /**
     * Enables 'select all' button. For the correct work the "node.key" property for each node is required
     * @docs-default true
     * @since v12.13.0
     */
    selectAllButton: boolean;
    /**
     * Enables 'deselect all' button. For the correct work the "node.key" property for each node is required
     * @docs-default true
     * @since v12.13.0
     */
    deselectAllButton: boolean;
    /**
     * This input controls if filter button (anchor) should be disabled
     */
    anchorDisabled: boolean;
    readonly selectedTreeNodesChange: EventEmitter<FacetedFilterTreeNode[]>;
    readonly selectedFiltersChange: EventEmitter<FacetedFilterOption[]>;
    adaptDropdownButton: ElementRef<HTMLButtonElement>;
    filtersDropdownWrapper: ElementRef<HTMLDivElement>;
    menuElementRef: ElementRef<HTMLDivElement>;
    filterTags: ElementRef<Element>;
    isTablet: boolean;
    treeTrimSettings: TreeTrim;
    treeWrapSettings: TreeWrap;
    treeNodes: FacetedFilterTreeNode[];
    selectedTreeNodes: FacetedFilterTreeNode[];
    selectedTreeTags: SelectedFacetedFilterTag[];
    searchQuery: string;
    isFilterOutsideTagsHidden: boolean;
    dropdownAnchorWithCounterLabel: string;
    handleSearchDebounce: Function;
    private _filterOptions;
    private _selectedFilters;
    constructor(_translateService: AdaptTranslateService, _deviceDetection: AdaptDeviceDetectionService, _ngZone: NgZone, _changeDetector: ChangeDetectorRef, _resizeService: ResizeService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    onSelectTreeNodes(selectedTreeNodes: FacetedFilterTreeNode[]): void;
    setSelectedTreeNodes(selectedTreeNodes: FacetedFilterTreeNode[], updateSelectedFilters: boolean): void;
    getNodeAdditionalLabel(node: FacetedFilterTreeNode): string;
    getTagsData(): SelectedFacetedFilterTag[];
    onRemoveTag(event: FilterTagsRemoveEvent): void;
    onVisibilityChanged(event: FilterTagsVisibilityChangedEvent): void;
    onDropdownMenuKeydown(event: KeyboardEvent, container: HTMLElement, popup: AdaptDropdownDirective): void;
    onDropdownMenuOpenChange(isOpen: boolean): void;
    private _handleSearch;
    private getSelectedTreeNodesFromSelectedFilters;
    private getSelectedFiltersFromSelectedTreeNodes;
    private getTreeValuesFromFilterOptions;
    private _checkIfFilterTagsLabelVisible;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptFacetedFilterComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptFacetedFilterComponent, "adapt-faceted-filter", never, { "filterOptions": "filterOptions"; "selectedFilters": "selectedFilters"; "showTags": "showTags"; "enableSearch": "enableSearch"; "searchTexts": "searchTexts"; "selectAllButton": "selectAllButton"; "deselectAllButton": "deselectAllButton"; "anchorDisabled": "anchorDisabled"; }, { "selectedTreeNodesChange": "selectedTreeNodesChange"; "selectedFiltersChange": "selectedFiltersChange"; }, never, never>;
}
