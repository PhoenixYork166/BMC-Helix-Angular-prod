import { ElementRef, EventEmitter, Injector, OnInit } from '@angular/core';
import { ControlValueAccessor, Validators } from '@angular/forms';
import { FormComponent } from '../common/form.component';
import { AdaptDeviceDetectionService } from '../common/device-detection.service';
import { AdaptDropdownDirective } from '../dropdown/dropdown.component';
import { ClockLabel } from './clock.component';
import { PlacementArray } from '../common/positioning';
import { AdaptRxControlLabelTooltip } from '../rx/form-control/index';
import { AdaptTranslateService } from '../common/i18n/index';
import { Datetime2TextsModel, KeyValueObject } from '../common/common.models';
import { AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
export declare type TimeModel = [number, number];
export declare class AdaptTimeComponent extends FormComponent implements ControlValueAccessor, OnInit, Validators {
    private _injector;
    private _deviceDetector;
    static TIME_CONTROL_ID: number;
    _errWrongFormat: boolean;
    _self: AdaptTimeComponent;
    minutesLabels: {
        uiValue: string | number;
        value: number;
    }[];
    hoursInnerLabels: {
        uiValue: string;
        value: number;
    }[];
    hoursInitialValue: number;
    minutesInitialValue: number;
    isPM: boolean;
    inputValue: string;
    minutesViewActive: boolean;
    _isMobile: boolean;
    timeTexts: Datetime2TextsModel;
    defaultErrors: {
        formatName?: string;
        format?: string;
    };
    /**
     * Label icon with a tooltip or popover
     */
    tooltipConfig: AdaptRxControlLabelTooltip;
    id: string;
    label: string;
    name: string;
    inputClass: string;
    disabledStyleForReadonlyState: boolean;
    placeholder: string;
    inline: boolean;
    /**
     * Mobile view settings
     */
    mobileView: {
        doneBtnTitle?: string;
        cancelBtnTitle?: string;
    };
    hasMeridiem: boolean;
    initialValue: TimeModel;
    /**
     * Picker placement
     */
    placement: PlacementArray;
    /**
     * Append to body trigger
     */
    appendToBody: boolean;
    readonly change: EventEmitter<TimeModel>;
    readonly blur: EventEmitter<void>;
    readonly focus: EventEmitter<void>;
    timeDD: AdaptDropdownDirective;
    mobileDoneBtnHandler: Function;
    mobileCancelBtnHandler: Function;
    get value(): TimeModel;
    set value(v: TimeModel | null);
    private _t12;
    private _t24;
    private onTouchedCallback;
    private onChangeCallback;
    private _model?;
    private _previousModel?;
    constructor(_injector: Injector, _deviceDetector: AdaptDeviceDetectionService, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    onFocus(): void;
    onBlur(): void;
    onInput(v: any): void;
    onOpenChange(e: boolean): void;
    minutesFilter: (label: ClockLabel) => boolean;
    activateHoursClock(): void;
    activateMinutesClock(): void;
    switchToAM(): void;
    switchToPM(): void;
    hoursChange(newHoursValue?: number): void;
    minutesChange(newMinutesValue: number): void;
    addHour(e: KeyboardEvent): void;
    subHour(e: KeyboardEvent): void;
    addMinute(e: KeyboardEvent): void;
    subMinute(e: KeyboardEvent): void;
    writeValue(v: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    validate(): null | {
        dateError: {
            name: string;
            text: string;
        };
    };
    private _updateInput;
    private _checkForErrors;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptTimeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptTimeComponent, "adapt-time", never, { "id": "id"; "label": "label"; "name": "name"; "inputClass": "inputClass"; "disabledStyleForReadonlyState": "disabledStyleForReadonlyState"; "placeholder": "placeholder"; "inline": "inline"; "mobileView": "mobileView"; "hasMeridiem": "hasMeridiem"; "initialValue": "initialValue"; "placement": "placement"; "appendToBody": "appendToBody"; }, { "change": "change"; "blur": "blur"; "focus": "focus"; }, never, never>;
}
