import { ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { Point } from '@angular/cdk/drag-drop';
import * as i0 from "@angular/core";
export interface ClockLabel {
    value: number;
    uiValue: string;
}
export interface ClockFaceLabel extends ClockLabel {
    angle: number;
    minAngle: number;
    maxAngle: number;
    visible: boolean;
}
export declare class ClockComponent implements OnInit, OnDestroy {
    clockFaceLabelsUI: ClockFaceLabel[];
    clockFaceInnerLabelsUI: ClockFaceLabel[];
    activeFaceLabel: ClockFaceLabel;
    innerFaceActive: boolean;
    labels: ClockLabel[];
    innerLabels: ClockLabel[];
    labelsFilter: (ClockLabel: ClockLabel) => boolean;
    innerLabelsFilter: (ClockLabel: ClockLabel) => boolean;
    disabled: any;
    readonly change: EventEmitter<number>;
    readonly changeEnd: EventEmitter<number>;
    clockEl: ElementRef<HTMLDivElement>;
    set initialValue(v: number);
    private _currentAngle;
    private _ready;
    private _drag$;
    private _dragEnd$;
    private _clockFaceDistance;
    private _initialValue;
    static GetXY(event: any): Point;
    static GetAngle(x1: number, y1: number, x2: number, y2: number): number;
    static GetDistance(x1: number, y1: number, x2: number, y2: number): number;
    ngOnInit(): void;
    ngOnDestroy(): void;
    isClockLabelActive(label: ClockFaceLabel): boolean;
    private _initClockFace;
    private _initDrag;
    private _onDrag;
    private _onDragEnd;
    private _checkActiveByAngle;
    private _checkActiveByValue;
    static ɵfac: i0.ɵɵFactoryDeclaration<ClockComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ClockComponent, "adapt-clock", never, { "labels": "labels"; "innerLabels": "innerLabels"; "labelsFilter": "labelsFilter"; "innerLabelsFilter": "innerLabelsFilter"; "disabled": "disabled"; "initialValue": "initialValue"; }, { "change": "change"; "changeEnd": "changeEnd"; }, never, never>;
}
