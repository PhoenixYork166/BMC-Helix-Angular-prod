import { ApplicationRef, ChangeDetectorRef, ComponentFactoryResolver, ElementRef, EventEmitter, Injector, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges, TemplateRef, ViewContainerRef } from '@angular/core';
import { Directionality } from '@angular/cdk/bidi';
import { AdaptDeviceDetectionService } from '../common/device-detection.service';
import { AdaptTranslateService } from '../common/i18n/index';
import { LayerService } from '../common/layer-service';
import { Placement, PlacementArray } from '../common/positioning';
import { AdaptOverlayConnectedPositionName, AdaptOverlayService } from '../common/overlay/index';
import { AdaptPopoverConfig } from './popover.config';
import { AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
export declare class AdaptPopoverWindow2Component implements OnInit {
    private _element;
    private _renderer;
    private _deviceDetectionService;
    private _changeDetectorRef;
    overlayService: AdaptOverlayService;
    ts: AdaptTranslateService;
    closeText: string;
    closing: boolean;
    content: string | TemplateRef<any>;
    /** Set the primary placement for popover, if there will be not enought space it will automatically move popover for the best place to show */
    placement: Placement;
    title: undefined | string | TemplateRef<any>;
    id: string;
    closeCB?: () => void;
    popoverClass: string;
    context: any;
    readonly closeAnimationDone: EventEmitter<null>;
    maxWidth: string;
    minWidth: string;
    get hostClasses(): string;
    get isMobile(): boolean;
    get popoverAnimation(): boolean;
    popoverAnimationDone: Function;
    constructor(_element: ElementRef, _renderer: Renderer2, _deviceDetectionService: AdaptDeviceDetectionService, _changeDetectorRef: ChangeDetectorRef, overlayService: AdaptOverlayService, ts: AdaptTranslateService);
    ngOnInit(): void;
    focusOnOpen(): number;
    isEventFrom(event: Event): boolean;
    isTemplate(val: any): boolean;
    markForCheck(): void;
    private _onPopoverAnimationDone;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptPopoverWindow2Component, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptPopoverWindow2Component, "adapt-popover-window2", never, { "content": "content"; "placement": "placement"; "title": "title"; "id": "id"; "closeCB": "closeCB"; "popoverClass": "popoverClass"; "context": "context"; "maxWidth": "maxWidth"; "minWidth": "minWidth"; }, { "closeAnimationDone": "closeAnimationDone"; }, never, ["*"]>;
}
export declare class AdaptPopoverWindowComponent implements OnInit {
    private _element;
    private _renderer;
    private _deviceDetectionService;
    private _changeDetectorRef;
    ts: AdaptTranslateService;
    closeText: string;
    set placement(value: Placement);
    get placement(): Placement;
    title: undefined | string | TemplateRef<any>;
    id: string;
    closeCB?: () => void;
    popoverClass: string;
    context: any;
    readonly closeAnimationDone: EventEmitter<null>;
    maxWidth: string;
    minWidth: string;
    get hostClasses(): string;
    get popoverAnimation(): string;
    popoverAnimationDone: Function;
    get isMobile(): boolean;
    set animationState(value: string);
    get animationState(): string;
    private _animationState;
    private _placement;
    constructor(_element: ElementRef, _renderer: Renderer2, _deviceDetectionService: AdaptDeviceDetectionService, _changeDetectorRef: ChangeDetectorRef, ts: AdaptTranslateService);
    ngOnInit(): void;
    isTitleTemplate(): boolean;
    applyPlacement(_placement: Placement): void;
    focusOnOpen(): number;
    isEventFrom(event: Event): boolean;
    private _onPopoverAnimationDone;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptPopoverWindowComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptPopoverWindowComponent, "adapt-popover-window", never, { "placement": "placement"; "title": "title"; "id": "id"; "closeCB": "closeCB"; "popoverClass": "popoverClass"; "context": "context"; "maxWidth": "maxWidth"; "minWidth": "minWidth"; }, { "closeAnimationDone": "closeAnimationDone"; }, never, ["*"]>;
}
/**
 * A lightweight, extensible directive for fancy popover creation.
 */
export declare class AdaptPopoverDirective extends AdaptRadarAngularGenericDirective implements OnInit, OnDestroy, OnChanges {
    private _elementRef;
    private _renderer;
    injector: Injector;
    private detection;
    componentFactoryResolver: ComponentFactoryResolver;
    viewContainerRef: ViewContainerRef;
    config: AdaptPopoverConfig;
    private _ngZone;
    private _layerService;
    private _overlayService;
    private _applicationRef;
    private _directionality;
    private _document;
    private _platformId?;
    /**
     * Content to be displayed as popover
     * @docs-default
     */
    adaptPopover: string | TemplateRef<any>;
    /**
     * Title of a popover
     * @docs-default
     */
    popoverTitle: string;
    /**
     * Placement of a popover accepts:
     *    "top", "top-left", "top-right", "bottom", "bottom-left", "bottom-right",
     *    "left", "left-top", "left-bottom", "right", "right-top", "right-bottom"
     * and array of above values.
     * @docs-default top
     */
    placement: PlacementArray;
    /**
     * Fallback placement of a popover if 'placement' is auto and there are not available spaces.
     * Available values:
     *    "top", "top-left", "top-right", "bottom", "bottom-left", "bottom-right",
     *    "left", "left-top", "left-bottom", "right", "right-top", "right-bottom"
     */
    fallbackPlacement: Placement;
    /**
     * Specifies events that should trigger. Supports a space separated list of event names.
     * You can easily override open and close triggers by specifying event names (separated by ":") in the triggers property
     * @docs-default click
     */
    triggers: string;
    /**
     * A selector specifying the element the popover should be appended to.
     * Currently only supports "body".
     * @docs-default
     */
    container: string;
    /**
     * When specified, the popover will be attached to the body
     * @since v9.2.0
     * @docs-default true
     */
    appendToBody: boolean;
    /**
     * Close button in the popover header
     * @docs-default false
     */
    closeBtn: boolean;
    /**
     * Delay before popover is open
     * @docs-default 0
     */
    popupDelay: number;
    /**
     * A flag indicating if a given popover is disabled and should not be displayed
     * @docs-default
     */
    disablePopover: boolean;
    /**
     * An optional class applied to ngb-popover-window
     * @docs-default
     */
    popoverClass: string;
    /**
     * Indicates whether the popover should be closed on Escape key and inside/outside clicks
     * @docs-default true
     */
    autoClose: boolean | 'inside' | 'outside';
    /**
     * Auto close popover when popover origin is out of viewport
     * @since v12.17.0
     * @docs-default false
     */
    closeOnOutOfView: boolean;
    /**
     * Emits an event when the popover is shown
     */
    readonly shown: EventEmitter<void>;
    /**
     * Emits an event when the popover is hidden
     */
    readonly hidden: EventEmitter<void>;
    get maxWidth(): string;
    set maxWidth(w: string);
    /**
     * @since v12.21.0
     */
    set minWidth(width: string);
    get minWidth(): string;
    get isMobile(): boolean;
    private _popoverWindowId;
    private _popupService;
    private _windowRef;
    private _popoverOverlayWithPortal;
    private _overlayConnectedPositions;
    private _popoverOverlayPositions;
    private _unregisterListenersFn;
    private _openTimeout;
    private _focusTimeout;
    private _popoverSubscription;
    private _maxWidth;
    private _minWidth;
    private _destroyed$;
    private _lastFocusEl;
    constructor(_elementRef: ElementRef, _renderer: Renderer2, injector: Injector, detection: AdaptDeviceDetectionService, componentFactoryResolver: ComponentFactoryResolver, viewContainerRef: ViewContainerRef, config: AdaptPopoverConfig, _ngZone: NgZone, _layerService: LayerService, _overlayService: AdaptOverlayService, _applicationRef: ApplicationRef, _directionality: Directionality, _document: any, // https://github.com/angular/angular/issues/20351
    _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>, _platformId?: Object);
    open(forcedElement?: ElementRef, forcedPlacement?: AdaptOverlayConnectedPositionName): void;
    /**
     * Closes an element’s popover. This is considered a “manual” triggering of the popover.
     */
    close(force?: boolean): void;
    /**
     * Toggles an element’s popover. This is considered a “manual” triggering of the popover.
     */
    toggle(): void;
    /**
     * Returns whether or not the popover is currently being shown
     */
    isOpen(): boolean;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private _openOverlay;
    private _closeOverlay;
    private _isDisabled;
    private setProperPopoverPosition;
    private _shouldCloseFromClick;
    private _isEventFromPopover;
    private _setTargetStyle;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptPopoverDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptPopoverDirective, "[adaptPopover]", ["adaptPopover"], { "adaptPopover": "adaptPopover"; "popoverTitle": "popoverTitle"; "placement": "placement"; "fallbackPlacement": "fallbackPlacement"; "triggers": "triggers"; "container": "container"; "appendToBody": "appendToBody"; "closeBtn": "closeBtn"; "popupDelay": "popupDelay"; "disablePopover": "disablePopover"; "popoverClass": "popoverClass"; "autoClose": "autoClose"; "closeOnOutOfView": "closeOnOutOfView"; "maxWidth": "maxWidth"; "minWidth": "minWidth"; }, { "shown": "shown"; "hidden": "hidden"; }, never>;
}
