import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, Input, NgZone, ViewEncapsulation } from '@angular/core';
import { from, ReplaySubject } from 'rxjs';
import { bufferTime, map, take, takeUntil } from 'rxjs/operators';
import { Directionality } from '@angular/cdk/bidi';
import { SafeCdr } from '../../common/safe-cdr';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/bidi";
import * as i2 from "@angular/common";
import * as i3 from "../workflow-dot/workflow-dot";
function AdaptWorkflowBarComponent_ng_container_2_div_2_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 7);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r2 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵclassMap("a-workflow-bar__progress bg-" + item_r2.type);
    i0.ɵɵstyleProp("width", item_r2.value * 100 / (ctx_r6.max - ctx_r6.min), "%");
    i0.ɵɵclassProp("is-rtl", ctx_r6.dir.value === "rtl");
    i0.ɵɵattribute("aria-valuenow", item_r2.value)("aria-valuemin", ctx_r6.min)("aria-valuemax", ctx_r6.max);
} }
function AdaptWorkflowBarComponent_ng_container_2_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5);
    i0.ɵɵtext(1, "\n\n      ");
    i0.ɵɵtemplate(2, AdaptWorkflowBarComponent_ng_container_2_div_2_div_2_Template, 2, 9, "div", 6);
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r3 = i0.ɵɵnextContext().index;
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("is-first", i_r3 === 0)("is-prev", ctx_r4.progress.length - 2 === i_r3)("a-workflow-bar__step-small", ctx_r4.size === "small")("a-workflow-bar__step-large", ctx_r4.size === "large")("a-workflow-bar__step-medium", ctx_r4.size === "medium");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r4.progress.length > 0);
} }
function AdaptWorkflowBarComponent_ng_container_2_div_4_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 7);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r2 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r9 = i0.ɵɵnextContext();
    i0.ɵɵclassMap("a-workflow-bar__progress bg-" + item_r2.type);
    i0.ɵɵstyleProp("height", item_r2.value * 100 / (ctx_r9.max - ctx_r9.min), "%");
    i0.ɵɵattribute("aria-valuenow", item_r2.value)("aria-valuemin", ctx_r9.min)("aria-valuemax", ctx_r9.max);
} }
function AdaptWorkflowBarComponent_ng_container_2_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptWorkflowBarComponent_ng_container_2_div_4_div_2_Template, 2, 7, "div", 8);
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r3 = i0.ɵɵnextContext().index;
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵstyleProp("height", ctx_r5.verticalList[i_r3], "px");
    i0.ɵɵclassProp("is-prev", ctx_r5.progress.length - 2 === i_r3);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r5.progress.length > 0);
} }
function AdaptWorkflowBarComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n\n    ");
    i0.ɵɵtemplate(2, AdaptWorkflowBarComponent_ng_container_2_div_2_Template, 4, 11, "div", 3);
    i0.ɵɵtext(3, "\n\n    ");
    i0.ɵɵtemplate(4, AdaptWorkflowBarComponent_ng_container_2_div_4_Template, 4, 5, "div", 4);
    i0.ɵɵtext(5, "\n\n  ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", item_r2.value > 0 && ctx_r0.direction === "horizontal");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", item_r2.value > 0 && ctx_r0.direction === "vertical" && ctx_r0.verticalList);
} }
function AdaptWorkflowBarComponent_ng_container_7_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 11);
    i0.ɵɵtext(1, "\n\n      ");
    i0.ɵɵelementStart(2, "adapt-workflow-dot", 12);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r17 = i0.ɵɵnextContext();
    const i_r13 = ctx_r17.index;
    const last_r14 = ctx_r17.last;
    const item_r12 = ctx_r17.$implicit;
    const ctx_r15 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("is-first", i_r13 === 0)("is-prev", ctx_r15.progress.length - 2 === i_r13)("is-last", last_r14)("is-rtl", ctx_r15.dir.value === "rtl")("a-workflow-bar__step-small", ctx_r15.size === "small")("a-workflow-bar__step-large", ctx_r15.size === "large")("a-workflow-bar__step-medium", ctx_r15.size === "medium");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("completed", item_r12.completed)("active-dot", item_r12.value > 0)("mainCls", (i_r13 === ctx_r15.activeIndex && item_r12.value > 0 ? "large-dot is-" : "is-") + item_r12.type);
} }
function AdaptWorkflowBarComponent_ng_container_7_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 11);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "adapt-workflow-dot", 12);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r18 = i0.ɵɵnextContext();
    const i_r13 = ctx_r18.index;
    const last_r14 = ctx_r18.last;
    const item_r12 = ctx_r18.$implicit;
    const ctx_r16 = i0.ɵɵnextContext();
    i0.ɵɵstyleProp("height", ctx_r16.verticalList[i_r13], "px");
    i0.ɵɵclassProp("is-complete-last", last_r14);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("completed", item_r12.completed)("active-dot", item_r12.value > 0)("mainCls", (i_r13 === ctx_r16.activeIndex && item_r12.value > 0 ? "large-dot is-" : "is-") + item_r12.type);
} }
function AdaptWorkflowBarComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵtemplate(2, AdaptWorkflowBarComponent_ng_container_7_div_2_Template, 5, 17, "div", 9);
    i0.ɵɵtext(3, "\n\n    ");
    i0.ɵɵtemplate(4, AdaptWorkflowBarComponent_ng_container_7_div_4_Template, 5, 7, "div", 10);
    i0.ɵɵtext(5, "\n  ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r1.direction === "horizontal");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r1.direction === "vertical" && ctx_r1.verticalList);
} }
export class AdaptWorkflowBarComponent {
    constructor(dir, _ngZone, _el, _changeDetectorRef) {
        this.dir = dir;
        this._ngZone = _ngZone;
        this._el = _el;
        this._changeDetectorRef = _changeDetectorRef;
        this.verticalList = [];
        /**
         * Sets the size of the component
         * @docs-default medium
         */
        this.size = 'medium';
        /**
         * Min value of the workflow bar
         * @docs-default 0
         */
        this.min = 0;
        /**
         * Max value of the workflow bar
         * @docs-default 100
         */
        this.max = 100;
        /**
         * The number of decimal digits
         * @docs-default 0
         */
        this.floor = 0;
        // TODO: Refactor this if possible
        // TODO: Use 'AdaptProgressModel[]' as a type
        /* eslint-disable @typescript-eslint/no-explicit-any */
        /**
         * The array of objects that represents the progress of the workflow
         * @docs-default []
         */
        this.progress = Array();
        /**
         * Sets the direction for workflow bar
         * @docs-default horizontal
         */
        this.direction = 'horizontal';
        /**
         * Hook to detect changes
         * @docs-default false
         */
        this.wasChanged = false;
        this._destroyed$ = new ReplaySubject(1);
        this._ngZone.onStable
            .pipe(take(1), takeUntil(this._destroyed$))
            .subscribe(() => this.calcVerticalDistance());
    }
    get classes() {
        return [this.mainCls, 'adapt-workflow-bar'].join(' ');
    }
    calcVerticalDistance() {
        if (this.direction === 'vertical') {
            const { nextElementSibling } = this._el.nativeElement;
            const arrayList = [].slice.call(nextElementSibling.querySelectorAll('.a-workflow__step'));
            from(arrayList)
                .pipe(map((v) => v.offsetHeight), bufferTime(10), takeUntil(this._destroyed$))
                .subscribe((step) => {
                const { length } = step;
                if (length > 2) {
                    step[length - 2] += step[length - 1];
                    delete step[length - 1];
                }
                this.verticalList = step;
                SafeCdr.detectChanges(this._changeDetectorRef);
            });
        }
    }
    ngOnChanges(changes) {
        if (changes.wasChanged) {
            setTimeout(() => {
                this.calcVerticalDistance();
            }, 250); // due to the animation on a collapse component
        }
    }
    ngOnDestroy() {
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
}
AdaptWorkflowBarComponent.ɵfac = function AdaptWorkflowBarComponent_Factory(t) { return new (t || AdaptWorkflowBarComponent)(i0.ɵɵdirectiveInject(i1.Directionality), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
AdaptWorkflowBarComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptWorkflowBarComponent, selectors: [["adapt-workflow-bar"]], hostVars: 2, hostBindings: function AdaptWorkflowBarComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassMap(ctx.classes);
    } }, inputs: { mainCls: "mainCls", size: "size", min: "min", max: "max", floor: "floor", progress: "progress", activeIndex: "activeIndex", direction: "direction", wasChanged: "wasChanged" }, features: [i0.ɵɵNgOnChangesFeature], decls: 10, vars: 2, consts: [[1, "a-workflow-bar"], [4, "ngFor", "ngForOf"], [1, "a-workflow-bar__flex"], ["class", "a-workflow-bar__step", 3, "is-first", "is-prev", "a-workflow-bar__step-small", "a-workflow-bar__step-large", "a-workflow-bar__step-medium", 4, "ngIf"], ["class", "a-workflow-bar__step", 3, "is-prev", "height", 4, "ngIf"], [1, "a-workflow-bar__step"], ["role", "progress", 3, "class", "width", "is-rtl", 4, "ngIf"], ["role", "progress"], ["role", "progress", 3, "class", "height", 4, "ngIf"], ["class", "a-workflow-bar__step-wrapper", 3, "is-first", "is-prev", "is-last", "is-rtl", "a-workflow-bar__step-small", "a-workflow-bar__step-large", "a-workflow-bar__step-medium", 4, "ngIf"], ["class", "a-workflow-bar__step-wrapper", 3, "is-complete-last", "height", 4, "ngIf"], [1, "a-workflow-bar__step-wrapper"], [3, "completed", "active-dot", "mainCls"]], template: function AdaptWorkflowBarComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵtext(1, "\n\n\n  ");
        i0.ɵɵtemplate(2, AdaptWorkflowBarComponent_ng_container_2_Template, 6, 2, "ng-container", 1);
        i0.ɵɵtext(3, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(4, "\n\n");
        i0.ɵɵelementStart(5, "div", 2);
        i0.ɵɵtext(6, "\n  ");
        i0.ɵɵtemplate(7, AdaptWorkflowBarComponent_ng_container_7_Template, 6, 2, "ng-container", 1);
        i0.ɵɵtext(8, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(9, "\n\n\n\n\n\n\n\n\n");
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx.progress);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngForOf", ctx.progress);
    } }, directives: [i2.NgForOf, i2.NgIf, i3.AdaptWorkflowDotComponent], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptWorkflowBarComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-workflow-bar',
                templateUrl: './workflow-bar.html',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: i1.Directionality }, { type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, { mainCls: [{
            type: Input
        }], size: [{
            type: Input
        }], min: [{
            type: Input
        }], max: [{
            type: Input
        }], floor: [{
            type: Input
        }], progress: [{
            type: Input
        }], activeIndex: [{
            type: Input
        }], direction: [{
            type: Input
        }], wasChanged: [{
            type: Input
        }], classes: [{
            type: HostBinding,
            args: ['class']
        }] }); })();
//# sourceMappingURL=workflow-bar.js.map