import { Directive, ElementRef, Inject, NgZone, Optional, Self } from '@angular/core';
import { DefaultValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';
import * as i0 from "@angular/core";
export class AdaptDragonInputHandlerDirective {
    constructor(element, ngZone, valueAccessors) {
        this.element = element;
        this.ngZone = ngZone;
        this.valueAccessor = null;
        this.valueAccessor = this.selectValueAccessor(valueAccessors);
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            if (!this.valueAccessor) {
                return;
            }
            this.element.nativeElement.addEventListener('keyup', (event) => {
                if (!event || event.key && event.code) {
                    return;
                }
                this.ngZone.runTask(() => {
                    if (typeof this.valueAccessor.onChange === 'function') {
                        this.valueAccessor.onChange(this.element.nativeElement.value);
                    }
                });
            });
        });
    }
    selectValueAccessor(valueAccessors) {
        if (!valueAccessors) {
            return;
        }
        let defaultAccessor = null;
        // find the first custom value accessor if it exists; otherwise use the default accessor
        const customAccessor = valueAccessors.find((v) => {
            if (v.constructor === DefaultValueAccessor) {
                defaultAccessor = v;
                return false;
            }
            else {
                return true;
            }
        });
        return customAccessor || defaultAccessor;
    }
}
AdaptDragonInputHandlerDirective.ɵfac = function AdaptDragonInputHandlerDirective_Factory(t) { return new (t || AdaptDragonInputHandlerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10)); };
AdaptDragonInputHandlerDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: AdaptDragonInputHandlerDirective, selectors: [["input", 3, "type", "checkbox"], ["textarea"]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptDragonInputHandlerDirective, [{
        type: Directive,
        args: [{
                /* eslint-disable-next-line @angular-eslint/directive-selector */
                selector: 'input:not([type=checkbox]),textarea',
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Self
            }, {
                type: Inject,
                args: [NG_VALUE_ACCESSOR]
            }] }]; }, null); })();
//# sourceMappingURL=dragon-input-handler.directive.js.map