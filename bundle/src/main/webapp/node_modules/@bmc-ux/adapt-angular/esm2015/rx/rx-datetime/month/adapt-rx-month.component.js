import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, LOCALE_ID, Output } from '@angular/core';
import { isFunction, isNil, isNumber, isUndefined } from 'lodash-es';
import { checkIsAfter } from '../common/common.utils';
import { AdaptRxDatetimeConfigService } from '../adapt-rx-datetime-config.service';
import { AdaptRxDatetimeI18nService } from '../adapt-rx-datetime-i18n.service';
import { RxMonth } from '../adapt-rx-datetime.types';
import * as i0 from "@angular/core";
import * as i1 from "../adapt-rx-datetime-config.service";
import * as i2 from "../adapt-rx-datetime-i18n.service";
import * as i3 from "@angular/common";
function AdaptRxMonthComponent_tr_11_ng_container_2_td_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "td", 8);
} if (rf & 2) {
    const month_r3 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵclassProp("range", month_r3.isInRange && !month_r3.isRangeFrom);
} }
function AdaptRxMonthComponent_tr_11_ng_container_2_td_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "td", 8);
} if (rf & 2) {
    const month_r3 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵclassProp("range", month_r3.isInRange && !month_r3.isRangeTo);
} }
function AdaptRxMonthComponent_tr_11_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r12 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptRxMonthComponent_tr_11_ng_container_2_td_2_Template, 1, 2, "td", 5);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementStart(4, "td", 6);
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵelementStart(6, "button", 7);
    i0.ɵɵlistener("click", function AdaptRxMonthComponent_tr_11_ng_container_2_Template_button_click_6_listener() { const restoredCtx = i0.ɵɵrestoreView(_r12); const month_r3 = restoredCtx.$implicit; const ctx_r11 = i0.ɵɵnextContext(2); return ctx_r11.onMonthClick(month_r3); });
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n        ");
    i0.ɵɵtemplate(10, AdaptRxMonthComponent_tr_11_ng_container_2_td_10_Template, 1, 2, "td", 5);
    i0.ɵɵtext(11, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const month_r3 = ctx.$implicit;
    const first_r5 = ctx.first;
    const last_r6 = ctx.last;
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", first_r5);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("range", month_r3.isInRange && !(month_r3.isRangeFrom && month_r3.isRangeTo))("range-from", month_r3.isRangeFrom && !month_r3.isRangeTo)("range-to", month_r3.isRangeTo && !month_r3.isRangeFrom);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("active", month_r3.isActive)("today", month_r3.isToday)("disabled", month_r3.isDisabled || ctx_r2.config.disabled)("range-edge", month_r3.isRangeFrom || month_r3.isRangeTo);
    i0.ɵɵproperty("disabled", month_r3.isDisabled || ctx_r2.config.disabled);
    i0.ɵɵattribute("data-testid", ctx_r2.testID + "_month_" + month_r3.value);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(month_r3.name);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", last_r6);
} }
function AdaptRxMonthComponent_tr_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr");
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptRxMonthComponent_tr_11_ng_container_2_Template, 12, 19, "ng-container", 4);
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const monthsRow_r1 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", monthsRow_r1);
} }
export class AdaptRxMonthComponent {
    constructor(_datetimeConfigService, _i18n, _localeID) {
        this._i18n = _i18n;
        this._localeID = _localeID;
        this.today = new Date();
        this.config = {
            activeValue: undefined,
            disabled: undefined,
            filter: undefined,
            texts: undefined,
            rangeFrom: undefined,
            rangeTo: undefined,
        };
        this.months = Array(4)
            .fill(0)
            .map(() => Array(3)
            .fill(0)
            .map(() => new RxMonth()));
        this.activeValueChange = new EventEmitter();
        this.config.texts = _datetimeConfigService.texts;
        this._updateMonths();
    }
    ngOnChanges(changes) {
        if (changes.activeValue && !isUndefined(changes.activeValue.currentValue)) {
            this.config.activeValue = changes.activeValue.currentValue;
        }
        if (changes.disabled && !isNil(changes.disabled.currentValue)) {
            this.config.disabled = changes.disabled.currentValue;
        }
        if (changes.filter && !isNil(changes.filter.currentValue)) {
            this.config.filter = changes.filter.currentValue;
        }
        if (changes.rangeFrom) {
            this.config.rangeFrom = changes.rangeFrom.currentValue;
        }
        if (changes.rangeTo) {
            this.config.rangeTo = changes.rangeTo.currentValue;
        }
        if (changes.texts && !isNil(changes.texts.currentValue)) {
            Object.assign(this.config.texts, (changes.texts.currentValue));
        }
        this._updateMonths();
    }
    onMonthClick(month) {
        this.config.activeValue = month.value;
        this.activeValueChange.emit(month.value);
    }
    _updateMonths() {
        let monthCounter = 0;
        const monthsNames = this._i18n.getMonthNames(true, this._localeID);
        this.months.forEach((monthsRow, monthsRowIndex) => {
            monthsRow.forEach((month, monthIndex) => {
                var _a, _b, _c, _d;
                const calendarMonth = this.months[monthsRowIndex][monthIndex];
                const rangeFromExist = isNumber((_a = this.config.rangeFrom) === null || _a === void 0 ? void 0 : _a.month);
                const rangeToExist = isNumber((_b = this.config.rangeTo) === null || _b === void 0 ? void 0 : _b.month);
                calendarMonth.value = {
                    year: ((_c = this.activeValue) === null || _c === void 0 ? void 0 : _c.year) || null,
                    month: monthCounter++,
                    date: 1
                };
                calendarMonth.name = monthsNames[calendarMonth.value.month];
                calendarMonth.isActive = ((_d = this.activeValue) === null || _d === void 0 ? void 0 : _d.month) === calendarMonth.value.month;
                calendarMonth.isDisabled =
                    this.config.disabled || (isFunction(this.config.filter) ? !this.config.filter(calendarMonth.value) : false);
                calendarMonth.isToday =
                    calendarMonth.value.month === this.today.getMonth() &&
                        (isNumber(calendarMonth.value.year) ? (calendarMonth.value.year === this.today.getFullYear()) : true);
                calendarMonth.isRangeFrom = rangeFromExist &&
                    (this.config.rangeFrom.year === calendarMonth.value.year) &&
                    (this.config.rangeFrom.month === calendarMonth.value.month);
                calendarMonth.isRangeTo = rangeToExist &&
                    (this.config.rangeTo.year === calendarMonth.value.year) &&
                    (this.config.rangeTo.month === calendarMonth.value.month);
                calendarMonth.isInRange = rangeFromExist && rangeToExist &&
                    checkIsAfter(calendarMonth.value, this.config.rangeFrom, true) &&
                    checkIsAfter(this.config.rangeTo, calendarMonth.value, true);
            });
        });
    }
}
AdaptRxMonthComponent.ɵfac = function AdaptRxMonthComponent_Factory(t) { return new (t || AdaptRxMonthComponent)(i0.ɵɵdirectiveInject(i1.AdaptRxDatetimeConfigService), i0.ɵɵdirectiveInject(i2.AdaptRxDatetimeI18nService), i0.ɵɵdirectiveInject(LOCALE_ID)); };
AdaptRxMonthComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptRxMonthComponent, selectors: [["adapt-rx-month"]], inputs: { activeValue: "activeValue", disabled: "disabled", filter: "filter", texts: "texts", testID: "testID", rangeFrom: "rangeFrom", rangeTo: "rangeTo" }, outputs: { activeValueChange: "activeValueChange" }, features: [i0.ɵɵNgOnChangesFeature], decls: 21, vars: 1, consts: [[1, "a3t-calendar"], [1, "a3t-calendar--table", "a3t-calendar--month_table"], ["aria-hidden", "true"], ["colspan", "3", 1, "a3t-calendar--table-space-cell"], [4, "ngFor", "ngForOf"], ["class", "a3t-calendar--table-edge-cell", "aria-hidden", "true", 3, "range", 4, "ngIf"], ["role", "gridcell", 1, "a3t-calendar--table-day", "a3t-calendar--table-month"], ["type", "button", 3, "disabled", "click"], ["aria-hidden", "true", 1, "a3t-calendar--table-edge-cell"]], template: function AdaptRxMonthComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵtext(1, "\n  ");
        i0.ɵɵelementStart(2, "table", 1);
        i0.ɵɵtext(3, "\n    ");
        i0.ɵɵelementStart(4, "tbody");
        i0.ɵɵtext(5, "\n    ");
        i0.ɵɵelementStart(6, "tr", 2);
        i0.ɵɵtext(7, "\n      ");
        i0.ɵɵelement(8, "td", 3);
        i0.ɵɵtext(9, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(10, "\n    ");
        i0.ɵɵtemplate(11, AdaptRxMonthComponent_tr_11_Template, 4, 1, "tr", 4);
        i0.ɵɵtext(12, "\n    ");
        i0.ɵɵelementStart(13, "tr", 2);
        i0.ɵɵtext(14, "\n      ");
        i0.ɵɵelement(15, "td", 3);
        i0.ɵɵtext(16, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(17, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(18, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(19, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(20, "\n");
    } if (rf & 2) {
        i0.ɵɵadvance(11);
        i0.ɵɵproperty("ngForOf", ctx.months);
    } }, directives: [i3.NgForOf, i3.NgIf], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxMonthComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-rx-month',
                templateUrl: './adapt-rx-month.component.html',
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: i1.AdaptRxDatetimeConfigService }, { type: i2.AdaptRxDatetimeI18nService }, { type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, { activeValue: [{
            type: Input
        }], disabled: [{
            type: Input
        }], filter: [{
            type: Input
        }], texts: [{
            type: Input
        }], testID: [{
            type: Input
        }], rangeFrom: [{
            type: Input
        }], rangeTo: [{
            type: Input
        }], activeValueChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=adapt-rx-month.component.js.map