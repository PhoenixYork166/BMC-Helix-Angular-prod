import { ChangeDetectorRef, Component, ContentChildren, ElementRef, HostBinding, HostListener, Input, NgZone, QueryList, Renderer2, ViewChild, ViewEncapsulation } from '@angular/core';
import { AdaptMultiCardComponent, AdaptMultiCardSlideComponent } from '../../multi-card/index';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import { ResizeService } from '../../common/resize/resize.service';
import { animate, style, transition, trigger } from '@angular/animations';
import { ANIMATION_DURATION, ANIMATION_TIMING_FUNCTION } from '../../common/animation';
import { take, takeUntil } from 'rxjs/operators';
import { Directionality } from '@angular/cdk/bidi';
import { AdaptTranslateService } from '../../common/i18n/index';
import { TooltipPlacement } from '../../common/positioning';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { SafeCdr } from '../../common/safe-cdr';
import * as i0 from "@angular/core";
import * as i1 from "../../common/device-detection.service";
import * as i2 from "../../common/resize/resize.service";
import * as i3 from "@angular/cdk/bidi";
import * as i4 from "../../common/i18n/index";
import * as i5 from "../../common/radar/adapt-radar";
import * as i6 from "@angular/common";
import * as i7 from "../workflow-dot/workflow-dot";
import * as i8 from "../../tooltip/tooltip.directive";
const _c0 = ["*"];
const _c1 = ["carousel"];
const _c2 = ["list"];
function AdaptWorkflowCarouselComponent_div_20_adapt_workflow_dot_2_Template(rf, ctx) { if (rf & 1) {
    const _r10 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-workflow-dot", 11);
    i0.ɵɵlistener("mouseover", function AdaptWorkflowCarouselComponent_div_20_adapt_workflow_dot_2_Template_adapt_workflow_dot_mouseover_0_listener() { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(2); return ctx_r9.showHiddenSteps(ctx_r9.leftCounting, "left"); })("click", function AdaptWorkflowCarouselComponent_div_20_adapt_workflow_dot_2_Template_adapt_workflow_dot_click_0_listener() { i0.ɵɵrestoreView(_r10); const ctx_r11 = i0.ɵɵnextContext(2); return ctx_r11.movePrev(); });
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext(2);
    const _r5 = i0.ɵɵreference(27);
    i0.ɵɵproperty("label", ctx_r7.leftCounting)("mainCls", "a-multi-carousel__counts-prev")("adaptRadarDisableEventSending", true)("adaptTooltip", ctx_r7.isDestroyed ? "" : _r5)("placement", ctx_r7.tooltipPlacement)("@controlPrev", undefined);
} }
function AdaptWorkflowCarouselComponent_div_20_adapt_workflow_dot_4_Template(rf, ctx) { if (rf & 1) {
    const _r13 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-workflow-dot", 11);
    i0.ɵɵlistener("mouseover", function AdaptWorkflowCarouselComponent_div_20_adapt_workflow_dot_4_Template_adapt_workflow_dot_mouseover_0_listener() { i0.ɵɵrestoreView(_r13); const ctx_r12 = i0.ɵɵnextContext(2); return ctx_r12.showHiddenSteps(ctx_r12.rightCounting, "right"); })("click", function AdaptWorkflowCarouselComponent_div_20_adapt_workflow_dot_4_Template_adapt_workflow_dot_click_0_listener() { i0.ɵɵrestoreView(_r13); const ctx_r14 = i0.ɵɵnextContext(2); return ctx_r14.moveNext(); });
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext(2);
    const _r5 = i0.ɵɵreference(27);
    i0.ɵɵproperty("label", ctx_r8.rightCounting)("mainCls", "a-multi-carousel__counts-next")("adaptRadarDisableEventSending", true)("adaptTooltip", ctx_r8.isDestroyed ? "" : _r5)("placement", ctx_r8.tooltipPlacement)("@controlNext", undefined);
} }
function AdaptWorkflowCarouselComponent_div_20_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 9);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptWorkflowCarouselComponent_div_20_adapt_workflow_dot_2_Template, 2, 6, "adapt-workflow-dot", 10);
    i0.ɵɵtext(3, "\n\n      ");
    i0.ɵɵtemplate(4, AdaptWorkflowCarouselComponent_div_20_adapt_workflow_dot_4_Template, 2, 6, "adapt-workflow-dot", 10);
    i0.ɵɵtext(5, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r3.leftCounting > 0);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r3.rightCounting > 0);
} }
function AdaptWorkflowCarouselComponent_div_22_adapt_workflow_dot_2_Template(rf, ctx) { if (rf & 1) {
    const _r18 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-workflow-dot", 11);
    i0.ɵɵlistener("mouseover", function AdaptWorkflowCarouselComponent_div_22_adapt_workflow_dot_2_Template_adapt_workflow_dot_mouseover_0_listener() { i0.ɵɵrestoreView(_r18); const ctx_r17 = i0.ɵɵnextContext(2); return ctx_r17.showHiddenSteps(ctx_r17.rightCounting, "right"); })("click", function AdaptWorkflowCarouselComponent_div_22_adapt_workflow_dot_2_Template_adapt_workflow_dot_click_0_listener() { i0.ɵɵrestoreView(_r18); const ctx_r19 = i0.ɵɵnextContext(2); return ctx_r19.movePrev(); });
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = i0.ɵɵnextContext(2);
    const _r5 = i0.ɵɵreference(27);
    i0.ɵɵproperty("label", ctx_r15.rightCounting)("mainCls", "a-multi-carousel__counts-prev")("adaptRadarDisableEventSending", true)("adaptTooltip", ctx_r15.isDestroyed ? "" : _r5)("placement", ctx_r15.tooltipPlacement)("@controlPrev", undefined);
} }
function AdaptWorkflowCarouselComponent_div_22_adapt_workflow_dot_4_Template(rf, ctx) { if (rf & 1) {
    const _r21 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-workflow-dot", 11);
    i0.ɵɵlistener("mouseover", function AdaptWorkflowCarouselComponent_div_22_adapt_workflow_dot_4_Template_adapt_workflow_dot_mouseover_0_listener() { i0.ɵɵrestoreView(_r21); const ctx_r20 = i0.ɵɵnextContext(2); return ctx_r20.showHiddenSteps(ctx_r20.leftCounting, "left"); })("click", function AdaptWorkflowCarouselComponent_div_22_adapt_workflow_dot_4_Template_adapt_workflow_dot_click_0_listener() { i0.ɵɵrestoreView(_r21); const ctx_r22 = i0.ɵɵnextContext(2); return ctx_r22.moveNext(); });
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = i0.ɵɵnextContext(2);
    const _r5 = i0.ɵɵreference(27);
    i0.ɵɵproperty("label", ctx_r16.leftCounting)("mainCls", "a-multi-carousel__counts-next")("adaptRadarDisableEventSending", true)("adaptTooltip", ctx_r16.isDestroyed ? "" : _r5)("placement", ctx_r16.tooltipPlacement)("@controlNext", undefined);
} }
function AdaptWorkflowCarouselComponent_div_22_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 9);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptWorkflowCarouselComponent_div_22_adapt_workflow_dot_2_Template, 2, 6, "adapt-workflow-dot", 10);
    i0.ɵɵtext(3, "\n\n      ");
    i0.ɵɵtemplate(4, AdaptWorkflowCarouselComponent_div_22_adapt_workflow_dot_4_Template, 2, 6, "adapt-workflow-dot", 10);
    i0.ɵɵtext(5, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r4.rightCounting > 0);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r4.leftCounting > 0);
} }
function AdaptWorkflowCarouselComponent_ng_template_26_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "div");
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n  ");
    i0.ɵɵelementStart(4, "div");
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n");
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r6.tooltipContent);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r6.tooltipContentSub);
} }
const _c3 = [[["adapt-workflow-carousel-slide"]], [["adapt-workflow-bar"]]];
const _c4 = function (a0) { return { "user-select": a0 }; };
const _c5 = function (a0) { return { "width": a0 }; };
const _c6 = ["adapt-workflow-carousel-slide", "adapt-workflow-bar"];
export class AdaptWorkflowBarSlideComponent extends AdaptMultiCardSlideComponent {
    constructor(_el, _cdr, _renderer) {
        super(_el);
        this._el = _el;
        this._cdr = _cdr;
        this._renderer = _renderer;
        this._workflowCssClasses = {
            slideItem: 'a-multi-carousel__item',
            wrapper: 'a-workflow-bar__flex',
            dots: 'a-workflow__dot',
            isHover: 'is-hover'
        };
        this.isMultiCarouselItem = true;
        this.isAnimated = true;
        this.isFocus = this.tabindex === 0;
        this.currentTabindex = this.tabindex;
    }
    onMouseOver(e) {
        const { target } = e;
        this.queryDots(target);
        this.toggleHoverState();
    }
    onMouseLeave() {
        this.toggleHoverState();
    }
    queryDots(target) {
        const index = Array
            .from(this.parent.querySelectorAll(`.${this._workflowCssClasses.slideItem}`))
            .indexOf(target);
        if (index > -1) {
            const wrapper = this.parent.querySelector(`.${this._workflowCssClasses.wrapper}`);
            this.dots = wrapper.querySelectorAll(`.${this._workflowCssClasses.dots}`)[index];
        }
    }
    toggleHoverState() {
        if (this.dots) {
            this.dots.classList.toggle(this._workflowCssClasses.isHover);
        }
    }
    // Because we can have situation when component is used inside other component with onPush strategy,
    // we need to manually update class. For some reasons Angular doesn't update class on host element in declarative way
    toggleSlideVisibility(value) {
        if (value) {
            this._renderer.addClass(this._el.nativeElement, 'is-hidden');
        }
        else {
            this._renderer.removeClass(this._el.nativeElement, 'is-hidden');
        }
    }
    ngAfterViewInit() {
        if (this._el) {
            this.parent = this._el.nativeElement.parentElement;
        }
    }
}
AdaptWorkflowBarSlideComponent.ɵfac = function AdaptWorkflowBarSlideComponent_Factory(t) { return new (t || AdaptWorkflowBarSlideComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2)); };
AdaptWorkflowBarSlideComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptWorkflowBarSlideComponent, selectors: [["adapt-workflow-carousel-slide"]], hostVars: 7, hostBindings: function AdaptWorkflowBarSlideComponent_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("mouseenter", function AdaptWorkflowBarSlideComponent_mouseenter_HostBindingHandler($event) { return ctx.onMouseOver($event); })("mouseleave", function AdaptWorkflowBarSlideComponent_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); });
    } if (rf & 2) {
        i0.ɵɵhostProperty("[tabIndex]", ctx.currentTabindex);
        i0.ɵɵclassProp("a-multi-carousel__item", ctx.isMultiCarouselItem)("is-animated", ctx.isAnimated)("is-focus", ctx.isFocus);
    } }, features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function AdaptWorkflowBarSlideComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵprojection(0);
    } }, styles: ["\n    .a-multi-carousel__item.is-focus:focus {\n      outline: none;\n      border: none;\n      box-shadow: 0 0 0 0.2rem rgba(0, 167, 157, .65);\n    }\n\n    /* IE10-11 fix; remove after dropping IE11 https://github.bmc.com/bmc-ux/adapt-angular/issues/1427 */\n    .a-multi-carousel__item {\n      display: inline-block;\n    }\n\n    .a-multi-carousel__item.is-animated {\n      transition: opacity .15s cubic-bezier(.4, 0, .2, 1), visibility .15s cubic-bezier(.4, 0, .2, 1)\n    }\n\n    .a-multi-carousel__item.is-hidden {\n      opacity: 0;\n      visibility: hidden;\n    }\n  "], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptWorkflowBarSlideComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-workflow-carousel-slide',
                template: '<ng-content></ng-content>',
                encapsulation: ViewEncapsulation.None,
                styles: [`
    .a-multi-carousel__item.is-focus:focus {
      outline: none;
      border: none;
      box-shadow: 0 0 0 0.2rem rgba(0, 167, 157, .65);
    }

    /* IE10-11 fix; remove after dropping IE11 https://github.bmc.com/bmc-ux/adapt-angular/issues/1427 */
    .a-multi-carousel__item {
      display: inline-block;
    }

    .a-multi-carousel__item.is-animated {
      transition: opacity .15s cubic-bezier(.4, 0, .2, 1), visibility .15s cubic-bezier(.4, 0, .2, 1)
    }

    .a-multi-carousel__item.is-hidden {
      opacity: 0;
      visibility: hidden;
    }
  `]
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }]; }, { isMultiCarouselItem: [{
            type: HostBinding,
            args: ['class.a-multi-carousel__item']
        }], isAnimated: [{
            type: HostBinding,
            args: ['class.is-animated']
        }], isFocus: [{
            type: HostBinding,
            args: ['class.is-focus']
        }], currentTabindex: [{
            type: HostBinding,
            args: ['[tabIndex]']
        }], onMouseOver: [{
            type: HostListener,
            args: ['mouseenter', ['$event']]
        }], onMouseLeave: [{
            type: HostListener,
            args: ['mouseleave']
        }] }); })();
export class AdaptWorkflowCarouselComponent extends AdaptMultiCardComponent {
    constructor(device, resize, _element, _ngZone, _changeDetectorRef, dir, ts, _adaptRadarService, _renderer) {
        super(device, resize, _element, _ngZone, _changeDetectorRef, dir, ts, _adaptRadarService, AdaptRadarAngularCustomEventName.AdaptWorkflowCarousel);
        this.device = device;
        this.resize = resize;
        this._element = _element;
        this._ngZone = _ngZone;
        this._changeDetectorRef = _changeDetectorRef;
        this.dir = dir;
        this.ts = ts;
        this._renderer = _renderer;
        this.value = 0;
        this.leftCounting = 0;
        this.rightCounting = 0;
        this.tooltipContentSub = '';
        this.isDestroyed = false;
        /**
         * The tooltip content
         */
        // TODO: Refactor this if possible
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        this.tooltipContent = '';
        /**
         * The tooltip placement
         */
        this.tooltipPlacement = 'top';
        this.isWorkflowCarousel = true;
        this.requiredCssClasses = {
            TITLE: 'a-workflow__step-title',
            SUB_TITLE: 'a-workflow__step-sub',
            wrapper: 'a-workflow-bar__flex',
            dots: 'a-workflow__dot'
        };
        this.tooltipAdditionalText = ts.getCurrentLanguage()['adapt.workflow.more'];
    }
    ngOnInit() {
        super.ngOnInit();
        this._ngZone.onStable
            .pipe(take(1), takeUntil(this._destroyed$))
            .subscribe(() => this._updateWorkflowWidth());
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.resize.addResizeEventListener(this.carousel.nativeElement, this._onResizeWorkflowElements.bind(this));
        this._updateWorkflowState(null);
    }
    showHiddenSteps(index, move) {
        this.isDestroyed = false;
        this.tooltipContentSub = '';
        const { nativeElement } = this._element;
        const $ = nativeElement.querySelectorAll.bind(nativeElement);
        const title = $(`.${this.requiredCssClasses.TITLE}`);
        const sub = $(`.${this.requiredCssClasses.SUB_TITLE}`);
        if (index === 1) {
            move === 'left' ?
                this._updateTooltipData(title[0], sub[0]) :
                title.length === sub.length ?
                    this._updateTooltipData(title[title.length - 1], sub[sub.length - 1]) :
                    this._updateTooltipData(title[title.length - 1]);
        }
        else {
            this._updateTooltipData(`${index} ${this.tooltipAdditionalText}`);
        }
    }
    movePrev() {
        super.movePrev();
        this.isDestroyed = true;
        this._updateWorkflowState(this.isRtl() ? 'right' : 'left');
    }
    moveNext() {
        super.moveNext();
        this.isDestroyed = true;
        this._updateWorkflowState(this.isRtl() ? 'left' : 'right');
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.resize.removeResizeEventListener(this.carousel.nativeElement);
    }
    _calcCurrentItem(position, width, count) {
        const value = Math.abs(Math.ceil(Math.ceil(-position / width) / count)) + 1;
        !isNaN(value) ? this.currentItem = value : this.currentItem = 1;
    }
    _shiftValidRight() {
        return (this.currentItem >= this.totalItems) ? this._setLastCardPosition() : this._slideToRight();
    }
    _setLastCardPosition() {
        if (this.carousel && this.list && this.totalItems > 1) {
            this._position = -(this._cardOffsetLeft - this.carousel.nativeElement.clientWidth + this._cardWidth);
            this._setCardPosition(this._position);
        }
    }
    _calcDimensions(move = 'left') {
        if (this.list) {
            const activeCard = Math.abs(Math.ceil(this._position / this._cardWidth));
            const { children } = this.list.nativeElement;
            move === 'left' ?
                this._position = Math.min(this._position + children[activeCard].clientWidth, 0) :
                this._position = this._position - children[activeCard].clientWidth;
            if (move !== 'left' && this._position < this.carousel.nativeElement.clientWidth - this.value) {
                return this._setCardPosition(this.carousel.nativeElement.clientWidth - this.value);
            }
            this._setCardPosition(this._position);
        }
    }
    _updateWorkflowWidth() {
        if (this.list && this.slide && this.carousel) {
            this.value = 0;
            const { children } = this.list.nativeElement;
            this.slide.forEach((_, i) => this.value += children[i].clientWidth);
        }
    }
    _onResizeWorkflowElements() {
        this._updateWorkflowState(null, 0);
        this._updateWorkflowWidth();
    }
    _updateWorkflowState(move, timing = 301) {
        if (this._element) {
            const timer = setTimeout(() => {
                let v = [];
                const wrapper = this._element.nativeElement.querySelector(`.${this.requiredCssClasses.wrapper}`);
                const dots = wrapper.querySelectorAll(`.${this.requiredCssClasses.dots}`);
                const isHidden = (elem) => elem.classList.contains('is-hidden');
                this.slide.forEach((item, i, { length }) => {
                    const { offsetLeft } = item._el.nativeElement;
                    const { offsetWidth } = this.carousel.nativeElement;
                    const delta = 2; // need for including rounded sub pixels
                    const w = this._cardWidth;
                    const leftExp = offsetLeft >= 0 || (offsetLeft - delta) >= 0 || (offsetLeft + delta) >= 0;
                    const rightExp = (offsetLeft + w) <= offsetWidth ||
                        (offsetLeft + w - delta) <= offsetWidth || (offsetLeft + w + delta) <= offsetWidth;
                    const exp = leftExp && rightExp;
                    item.toggleSlideVisibility(!exp);
                    if (exp) {
                        v = [...v, i];
                        this.leftCounting = Math.min(...v);
                        this.rightCounting = length - 1 - i;
                        if (isHidden(dots[i])) {
                            this._renderer.removeClass(dots[i], 'is-hidden');
                        }
                    }
                    else {
                        if (!isHidden(dots[i])) {
                            this._renderer.addClass(dots[i], 'is-hidden');
                        }
                    }
                    if (length - 1 === i) {
                        if (move) {
                            // To update the content of the tooltip after click on the dot
                            this.showHiddenSteps(move === 'left' ? this.leftCounting : this.rightCounting, move);
                        }
                        SafeCdr.markForCheck(this._changeDetectorRef);
                    }
                });
                clearTimeout(timer);
            }, timing);
        }
    }
    _updateTooltipData(title, subTitle) {
        this.tooltipContent = typeof title === 'string' ? title : title.textContent;
        if (subTitle) {
            this.tooltipContentSub = subTitle.textContent;
        }
    }
}
AdaptWorkflowCarouselComponent.ɵfac = function AdaptWorkflowCarouselComponent_Factory(t) { return new (t || AdaptWorkflowCarouselComponent)(i0.ɵɵdirectiveInject(i1.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i2.ResizeService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.Directionality), i0.ɵɵdirectiveInject(i4.AdaptTranslateService), i0.ɵɵdirectiveInject(i5.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.Renderer2)); };
AdaptWorkflowCarouselComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptWorkflowCarouselComponent, selectors: [["adapt-workflow-carousel"]], contentQueries: function AdaptWorkflowCarouselComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, AdaptWorkflowBarSlideComponent, 4);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.slide = _t);
    } }, viewQuery: function AdaptWorkflowCarouselComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c1, 7);
        i0.ɵɵviewQuery(_c2, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.carousel = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.list = _t.first);
    } }, hostVars: 2, hostBindings: function AdaptWorkflowCarouselComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("a-workflow-carousel", ctx.isWorkflowCarousel);
    } }, inputs: { tooltipContent: "tooltipContent", tooltipPlacement: "tooltipPlacement", tooltipAdditionalText: "tooltipAdditionalText" }, features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c6, decls: 29, vars: 11, consts: [["carousel", ""], [1, "a-multi-card__cover", 3, "ngStyle", "swipeLeft", "swipeRight"], ["viewport", ""], [1, "a-multi-carousel__viewport", "a-multi-carousel__viewport-workflow"], [1, "a-multi-card__wrapper"], [1, "a-multi-carousel__list", 3, "ngStyle"], ["list", ""], ["class", "a-multi-carousel__counts", 4, "ngIf"], ["tooltipTemplate", ""], [1, "a-multi-carousel__counts"], [3, "label", "mainCls", "adaptRadarDisableEventSending", "adaptTooltip", "placement", "mouseover", "click", 4, "ngIf"], [3, "label", "mainCls", "adaptRadarDisableEventSending", "adaptTooltip", "placement", "mouseover", "click"]], template: function AdaptWorkflowCarouselComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef(_c3);
        i0.ɵɵelementStart(0, "div", null, 0);
        i0.ɵɵtext(2, "\n  ");
        i0.ɵɵelementStart(3, "div", 1, 2);
        i0.ɵɵlistener("swipeLeft", function AdaptWorkflowCarouselComponent_Template_div_swipeLeft_3_listener() { return ctx.swipeNext(); })("swipeRight", function AdaptWorkflowCarouselComponent_Template_div_swipeRight_3_listener() { return ctx.swipePrev(); });
        i0.ɵɵtext(5, "\n    ");
        i0.ɵɵelementStart(6, "div", 3);
        i0.ɵɵtext(7, "\n      ");
        i0.ɵɵelementStart(8, "div", 4);
        i0.ɵɵtext(9, "\n        ");
        i0.ɵɵelementStart(10, "div", 5, 6);
        i0.ɵɵtext(12, "\n          ");
        i0.ɵɵprojection(13);
        i0.ɵɵtext(14, "\n          ");
        i0.ɵɵprojection(15, 1);
        i0.ɵɵtext(16, "\n        ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(17, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(18, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(19, "\n\n    ");
        i0.ɵɵtemplate(20, AdaptWorkflowCarouselComponent_div_20_Template, 6, 2, "div", 7);
        i0.ɵɵtext(21, "\n\n\n    ");
        i0.ɵɵtemplate(22, AdaptWorkflowCarouselComponent_div_22_Template, 6, 2, "div", 7);
        i0.ɵɵtext(23, "\n\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(24, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(25, "\n\n");
        i0.ɵɵtemplate(26, AdaptWorkflowCarouselComponent_ng_template_26_Template, 7, 2, "ng-template", null, 8, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(28, "\n\n\n\n");
    } if (rf & 2) {
        i0.ɵɵclassMapInterpolate1("a-multi-carousel ", ctx.customClass, "");
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(7, _c4, !ctx.isMobile ? "all" : "none"));
        i0.ɵɵadvance(7);
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(9, _c5, ctx.value + "px"));
        i0.ɵɵadvance(10);
        i0.ɵɵproperty("ngIf", !ctx.isRtl());
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.isRtl());
    } }, directives: [i6.NgStyle, i6.NgIf, i7.AdaptWorkflowDotComponent, i8.AdaptTooltipDirective], styles: [".a-workflow-carousel {display: block}"], encapsulation: 2, data: { animation: [
            trigger('controlNext', [
                transition('void => *', [
                    style({ right: '-12px', opacity: 0, visibility: 'hidden' }),
                    animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ right: '12px', opacity: 1, visibility: 'visible' }))
                ]),
                transition('* => void', [
                    style({ opacity: 1, visibility: 'visible', right: '12px' }),
                    animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ opacity: 0, visibility: 'hidden', right: '-12px' }))
                ])
            ]),
            trigger('controlPrev', [
                transition('void => *', [
                    style({ left: '-12px', opacity: 0, visibility: 'hidden' }),
                    animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ left: '12px', opacity: 1, visibility: 'visible' }))
                ]),
                transition('* => void', [
                    style({ left: '12px', opacity: 1, visibility: 'visible' }),
                    animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ left: '-12px', opacity: 0, visibility: 'hidden' }))
                ])
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptWorkflowCarouselComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-workflow-carousel',
                templateUrl: './workflow-carousel.html',
                encapsulation: ViewEncapsulation.None,
                styles: ['.a-workflow-carousel {display: block}'],
                animations: [
                    trigger('controlNext', [
                        transition('void => *', [
                            style({ right: '-12px', opacity: 0, visibility: 'hidden' }),
                            animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ right: '12px', opacity: 1, visibility: 'visible' }))
                        ]),
                        transition('* => void', [
                            style({ opacity: 1, visibility: 'visible', right: '12px' }),
                            animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ opacity: 0, visibility: 'hidden', right: '-12px' }))
                        ])
                    ]),
                    trigger('controlPrev', [
                        transition('void => *', [
                            style({ left: '-12px', opacity: 0, visibility: 'hidden' }),
                            animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ left: '12px', opacity: 1, visibility: 'visible' }))
                        ]),
                        transition('* => void', [
                            style({ left: '12px', opacity: 1, visibility: 'visible' }),
                            animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ left: '-12px', opacity: 0, visibility: 'hidden' }))
                        ])
                    ])
                ]
            }]
    }], function () { return [{ type: i1.AdaptDeviceDetectionService }, { type: i2.ResizeService }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i3.Directionality }, { type: i4.AdaptTranslateService }, { type: i5.AdaptRadarAngularService }, { type: i0.Renderer2 }]; }, { tooltipContent: [{
            type: Input
        }], tooltipPlacement: [{
            type: Input
        }], tooltipAdditionalText: [{
            type: Input
        }], slide: [{
            type: ContentChildren,
            args: [AdaptWorkflowBarSlideComponent]
        }], carousel: [{
            type: ViewChild,
            args: ['carousel', { static: true }]
        }], list: [{
            type: ViewChild,
            args: ['list', { static: true }]
        }], isWorkflowCarousel: [{
            type: HostBinding,
            args: ['class.a-workflow-carousel']
        }] }); })();
//# sourceMappingURL=workflow-carousel.js.map