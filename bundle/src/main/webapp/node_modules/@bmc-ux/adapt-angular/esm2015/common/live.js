import { Inject, Injectable, InjectionToken } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import * as i0 from "@angular/core";
// usefulness (and default value) of delay documented in Material's CDK
// https://github.com/angular/material2/blob/6405da9b8e8532a7e5c854c920ee1815c275d734/src/cdk/a11y/live-announcer/live-announcer.ts#L50
// export type ARIA_LIVE_DELAY_TYPE = number | null;
export const ARIA_LIVE_DELAY = new InjectionToken('live announcer delay');
export const DEFAULT_ARIA_LIVE_DELAY = 100;
// TODO: Refactor this if possible
/* eslint-disable-next-line @typescript-eslint/no-explicit-any */
function createLiveElement(document) {
    const element = document.createElement('div');
    element.setAttribute('aria-live', 'polite');
    element.setAttribute('aria-atomic', 'true');
    element.classList.add('sr-only');
    document.body.appendChild(element);
    return element;
}
export class Live {
    constructor(
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    document, // https://github.com/angular/angular/issues/20351
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    _delay) {
        this.document = document;
        this._delay = _delay;
        this._element = createLiveElement(document);
    }
    ngOnDestroy() {
        this._element.parentElement.removeChild(this._element);
    }
    say(message) {
        const element = this._element;
        const delay = this._delay;
        element.textContent = '';
        const setText = () => element.textContent = message;
        if (delay === null) {
            setText();
        }
        else {
            setTimeout(setText, delay);
        }
    }
}
Live.ɵfac = function Live_Factory(t) { return new (t || Live)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(ARIA_LIVE_DELAY)); };
Live.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: Live, factory: Live.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(Live, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [ARIA_LIVE_DELAY]
            }] }]; }, null); })();
//# sourceMappingURL=live.js.map