import { ChangeDetectorRef, Component, ContentChildren, ElementRef, Input, NgZone, Optional, QueryList, ViewChild, ViewChildren, ViewEncapsulation } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { AdaptDeviceDetectionService } from '../common/device-detection.service';
import { ResizeService } from '../common/resize/resize.service';
import { elWidthWithMargin, formatString, isUndefined, toNumber } from '../common/utilities';
import { LEFT_ARROW, RIGHT_ARROW, TAB } from '@angular/cdk/keycodes';
import { ANIMATION_DURATION, ANIMATION_TIMING_FUNCTION } from '../common/animation';
import { AdaptTabsControlsDirective, TabsControlsTypeDirection } from '../tabs-controls/index';
import { fromEvent, ReplaySubject, timer } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import { Directionality } from '@angular/cdk/bidi';
import { AdaptTranslateService } from '../common/i18n/index';
import { getEventKeyCode } from '../common/key-codes';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "../common/device-detection.service";
import * as i2 from "../common/resize/resize.service";
import * as i3 from "@angular/cdk/bidi";
import * as i4 from "../common/i18n/index";
import * as i5 from "../common/radar/adapt-radar";
import * as i6 from "@angular/common";
import * as i7 from "../tabs-controls/tabs-controls.directive";
const _c0 = ["*"];
const _c1 = ["prev"];
const _c2 = ["next"];
const _c3 = ["carousel"];
const _c4 = ["list"];
const _c5 = ["viewport"];
const _c6 = ["links"];
function AdaptMultiCardComponent_ng_container_3_div_2_h5_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "h5", 14);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r7.title);
} }
function AdaptMultiCardComponent_ng_container_3_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 11);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptMultiCardComponent_ng_container_3_div_2_h5_2_Template, 2, 1, "h5", 12);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementStart(4, "div", 13);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r6.title !== "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r6.getCounter());
} }
function AdaptMultiCardComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵtemplate(2, AdaptMultiCardComponent_ng_container_3_div_2_Template, 7, 2, "div", 10);
    i0.ɵɵtext(3, "\n  ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r1.cardHeader);
} }
function AdaptMultiCardComponent_ul_5_li_2_Template(rf, ctx) { if (rf & 1) {
    const _r13 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 18);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "a", 19, 20);
    i0.ɵɵlistener("click", function AdaptMultiCardComponent_ul_5_li_2_Template_a_click_2_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r13); const index_r10 = restoredCtx.index; const item_r9 = restoredCtx.$implicit; const ctx_r12 = i0.ɵɵnextContext(2); ctx_r12.applyTabControl(index_r10); ctx_r12.goByOrder(item_r9); return $event.preventDefault(); });
    i0.ɵɵtext(4);
    i0.ɵɵelementStart(5, "span");
    i0.ɵɵtext(6);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r9 = ctx.$implicit;
    const index_r10 = ctx.index;
    const ctx_r8 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("active", ctx_r8.activeIndex === index_r10);
    i0.ɵɵattribute("aria-posinset", index_r10 + 1)("aria-setsize", ctx_r8.orderUniqueArray.length)("aria-selected", ctx_r8.activeIndex === index_r10);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1("\n        ", item_r9, "\n        ");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1("(", ctx_r8.orderCount[item_r9], ")");
} }
function AdaptMultiCardComponent_ul_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "ul", 15);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵtemplate(2, AdaptMultiCardComponent_ul_5_li_2_Template, 9, 7, "li", 16);
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelement(4, "li", 17);
    i0.ɵɵtext(5, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r2.orderUniqueArray);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("direction", ctx_r2.direction)("adaptRadarDisableEventSending", true);
} }
const _c7 = function (a0) { return { "a-multi-carousel__nav-btn--disabled": a0 }; };
function AdaptMultiCardComponent_div_22_Template(rf, ctx) { if (rf & 1) {
    const _r17 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 21);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "button", 22, 23);
    i0.ɵɵlistener("mouseleave", function AdaptMultiCardComponent_div_22_Template_button_mouseleave_2_listener() { i0.ɵɵrestoreView(_r17); const ctx_r16 = i0.ɵɵnextContext(); return ctx_r16.onNavBtnMouseleave(); })("click", function AdaptMultiCardComponent_div_22_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r17); const ctx_r18 = i0.ɵɵnextContext(); return ctx_r18.movePrev(); });
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵelementStart(5, "span", 24);
    i0.ɵɵtext(6);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n      ");
    i0.ɵɵelementStart(9, "button", 25, 26);
    i0.ɵɵlistener("mouseleave", function AdaptMultiCardComponent_div_22_Template_button_mouseleave_9_listener() { i0.ɵɵrestoreView(_r17); const ctx_r19 = i0.ɵɵnextContext(); return ctx_r19.onNavBtnMouseleave(); })("click", function AdaptMultiCardComponent_div_22_Template_button_click_9_listener() { i0.ɵɵrestoreView(_r17); const ctx_r20 = i0.ɵɵnextContext(); return ctx_r20.moveNext(); });
    i0.ɵɵtext(11, "\n        ");
    i0.ɵɵelementStart(12, "span", 24);
    i0.ɵɵtext(13);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r14 = i0.ɵɵreference(3);
    const _r15 = i0.ɵɵreference(10);
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("@controlPrevAnim", ctx_r5.isPrevBtnVisible(_r14))("ngClass", i0.ɵɵpureFunction1(6, _c7, ctx_r5.isPrevBtnDisabled()));
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r5.btnPrevText);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("@controlNextAnim", ctx_r5.isNextBtnVisible(_r15))("ngClass", i0.ɵɵpureFunction1(8, _c7, ctx_r5.isNextBtnDisabled()));
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r5.btnNextText);
} }
const _c8 = [[["adapt-multi-card-slide"]]];
const _c9 = function (a0, a1) { return { "is-border-line": a0, "is-border-line-left": a1 }; };
const _c10 = function (a0) { return { "user-select": a0 }; };
const _c11 = ["adapt-multi-card-slide"];
export class AdaptMultiCardLineComponent {
}
AdaptMultiCardLineComponent.ɵfac = function AdaptMultiCardLineComponent_Factory(t) { return new (t || AdaptMultiCardLineComponent)(); };
AdaptMultiCardLineComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptMultiCardLineComponent, selectors: [["adapt-multi-card-line"]], hostVars: 2, hostBindings: function AdaptMultiCardLineComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("a-multi-carousel__item-border", true);
    } }, decls: 0, vars: 0, template: function AdaptMultiCardLineComponent_Template(rf, ctx) { }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptMultiCardLineComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-multi-card-line',
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[class.a-multi-carousel__item-border]': 'true'
                },
                template: '',
                encapsulation: ViewEncapsulation.None
            }]
    }], null, null); })();
export class AdaptMultiCardSlideComponent {
    constructor(_el) {
        this._el = _el;
        /**
         * Sets the value to the tabindex attr
         * @docs-default 0
         */
        this.tabindex = 0;
    }
    get element() {
        return this._el.nativeElement;
    }
    /**
     * If present, it expects a parameter by which the slides will be filtered
     * @docs-default
     */
    get order() {
        return this._order;
    }
    set order(v) {
        this._order = v;
    }
}
AdaptMultiCardSlideComponent.ɵfac = function AdaptMultiCardSlideComponent_Factory(t) { return new (t || AdaptMultiCardSlideComponent)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptMultiCardSlideComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptMultiCardSlideComponent, selectors: [["adapt-multi-card-slide"]], hostVars: 5, hostBindings: function AdaptMultiCardSlideComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵhostProperty("tabIndex", ctx.tabindex);
        i0.ɵɵclassProp("a-multi-carousel__item", true)("is-focus", ctx.tabindex === 0);
    } }, inputs: { tabindex: "tabindex", order: "order" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function AdaptMultiCardSlideComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵprojection(0);
    } }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptMultiCardSlideComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-multi-card-slide',
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[class.a-multi-carousel__item]': 'true',
                    '[tabIndex]': 'tabindex',
                    '[class.is-focus]': 'tabindex === 0'
                },
                template: '<ng-content></ng-content>',
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, { tabindex: [{
            type: Input
        }], order: [{
            type: Input
        }] }); })();
export class AdaptMultiCardComponent extends AdaptRadarAngularGenericDirective {
    constructor(device, resize, _element, _ngZone, _changeDetectorRef, dir, ts, _adaptRadarService, _entityName) {
        super(_adaptRadarService, _element, _entityName ? _entityName : AdaptRadarAngularCustomEventName.AdaptMultiCard);
        this.device = device;
        this.resize = resize;
        this._element = _element;
        this._ngZone = _ngZone;
        this._changeDetectorRef = _changeDetectorRef;
        this.dir = dir;
        this.ts = ts;
        this.direction = TabsControlsTypeDirection.Horizontal;
        this.activeIndex = 0;
        this.totalItems = 1;
        this.currentItem = 1;
        // TODO: Refactor this if possible
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        this.orderArray = [];
        // TODO: Refactor this if possible
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        this.orderUniqueArray = [];
        this.orderCount = {};
        this.isContentChecked = false;
        this.len = 0;
        this._position = 0;
        /**
         * When present, it indicates that the tabs navigation should be displayed
         * @docs-default false
         */
        this.statusBar = false;
        /* eslint-disable @angular-eslint/no-input-rename */
        /**
         * When present, it indicates that the header should be displayed
         * @docs-default true
         */
        this.cardHeader = true;
        /**
         * Sets the value of the header title
         * @docs-default
         */
        this.title = '';
        /**
         * Allows content to start showing from the start if autoplay enabled
         * @since v10.8.0
         * @docs-default false
         */
        this.loop = false;
        this._viewInitComplete = false;
        this._skin = 'carousel_foreground';
        this._destroyed$ = new ReplaySubject(1);
        const translation = ts.getCurrentLanguage();
        this.btnPrevText = translation['adapt.common.previous'];
        this.btnNextText = translation['adapt.common.next'];
        this.counterText = translation['adapt.carousel.counter'];
    }
    /**
     * Sets the interval for autoplay in ms
     * @since v10.8.0
     * @docs-default 0
     */
    set autoPlayInterval(value) {
        if (this.autoPlaySubscription$) {
            this.autoPlaySubscription$.unsubscribe();
            this.autoPlaySubscription$ = null;
        }
        if (value) {
            this.autoPlaySubscription$ =
                timer(value, value)
                    .pipe(takeUntil(this._destroyed$))
                    .subscribe(() => {
                    if (this._viewInitComplete) {
                        this.moveNext();
                    }
                });
        }
    }
    /**
     * Sets the style of the component
     * @docs-default carousel_foreground
     */
    get skin() {
        return this._skin;
    }
    set skin(value) {
        this._skin = value;
    }
    /**
     * setter/getter for counter [slide cards]
     */
    get count() {
        return this._count;
    }
    set count(value) {
        this._count = toNumber(value);
    }
    get isMobile() {
        return this.device.deviceMobile() || this.device.deviceTablet();
    }
    ngOnInit() {
        fromEvent(this._element.nativeElement, 'keyup')
            .pipe(takeUntil(this._destroyed$)).subscribe((e) => this._zipKeysEvent(e));
        this._ngZone.onStable
            .pipe(take(1), takeUntil(this._destroyed$))
            .subscribe(() => {
            if (this.carousel && this.slide) {
                // TODO: Do we need .pipe(takeUntil(this._destroyed$)) here?
                this.slide.changes.subscribe((slides) => {
                    if (this.len !== slides.length) {
                        this._makeCountForCardOffset(slides);
                        this.len = slides.length;
                    }
                });
                this.resize.addResizeEventListener(this.carousel.nativeElement, this.getCurrentCount.bind(this));
            }
        });
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this.slide && this.statusBar) {
            this.orderArray = this.slide.map((item) => {
                !Object.prototype.hasOwnProperty.call(this.orderCount, item.order) ?
                    this.orderCount[item.order] = 1 : this.orderCount[item.order]++;
                return item.order;
            });
            this.orderUniqueArray = Array.from(new Set(this.orderArray));
            this.applyTabControl(this.activeIndex);
        }
        this._changeDetectorRef.detectChanges();
        this._viewInitComplete = true;
    }
    ngAfterContentChecked() {
        if (this.carousel && this.slide && !this.isContentChecked) {
            this.len = this.slide.length;
            this._makeCountForCardOffset(this.slide);
            this.isContentChecked = true;
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.resize.removeResizeEventListener(this.carousel.nativeElement);
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
    getCounter() {
        return formatString(this.counterText, this.currentItem, this.totalItems);
    }
    getCurrentCount() {
        let sum = 0;
        if (this.viewport && this.slide && this.slide.length > 0 && this.list) {
            this.slide.toArray().map((_, i) => {
                sum += elWidthWithMargin(this.list.nativeElement.children[i]);
            });
            this._cardWidth = Math.ceil(sum / this.slide.length);
            this._calcCountSliding(this._cardWidth);
            this._calcTotalItems();
            this._calcCurrentItem(this._position, this._cardWidth, this.count);
            this._checkItemsOnResize();
        }
    }
    isRtl() {
        return this.dir.value === 'rtl';
    }
    swipePrev() {
        if (this.isMobile) {
            this.movePrev();
        }
    }
    swipeNext() {
        if (this.isMobile) {
            this.moveNext();
        }
    }
    _applyCurrentActiveSlide() {
        this._calcCurrentItem(this._position, this._cardWidth, this.count);
        if (this.statusBar) {
            this.getActiveSlide();
        }
    }
    movePrev() {
        if (this.slide) {
            this.isRtl() ? this._shiftValidRight() : this._slideToLeft();
            this._applyCurrentActiveSlide();
        }
        this._changeDetectorRef.detectChanges();
    }
    moveNext() {
        if (!this.isNextBtnDisabled()) {
            if (this.slide) {
                this.isRtl() ? this._slideToLeft() : this._shiftValidRight();
                this._applyCurrentActiveSlide();
            }
        }
        else if (this.loop) {
            this._position = 0;
            this._setCardPosition(0);
            this._applyCurrentActiveSlide();
        }
        this._changeDetectorRef.detectChanges();
    }
    applyTabControl(index) {
        this.activeIndex = index;
        if (this._links && this._tabsControls) {
            this._tabsControls.alignToElement(this._links.toArray()[index].nativeElement);
        }
    }
    isPrevBtnVisible(btn) {
        return btn.matches(':hover') || !this.isPrevBtnDisabled();
    }
    isNextBtnVisible(btn) {
        return btn.matches(':hover') || !this.isNextBtnDisabled();
    }
    isPrevBtnDisabled() {
        return !((this.currentItem > 1 && !this.isRtl()) ||
            (this.currentItem !== this.totalItems && this.totalItems !== 1 && this.isRtl()));
    }
    isNextBtnDisabled() {
        return !((this.currentItem !== this.totalItems && this.totalItems !== 1 && !this.isRtl())
            || (this.isRtl() && this.currentItem > 1));
    }
    onNavBtnMouseleave() {
        // dummy method, just for running change detection
    }
    getActiveSlide() {
        const activeCard = this._getActiveCard();
        const activeStatus = this.orderArray[activeCard];
        const index = this.orderUniqueArray.indexOf(activeStatus);
        if (index > -1) {
            this.applyTabControl(index);
        }
    }
    goByOrder(currentSlide) {
        const i = this.orderArray.indexOf(currentSlide);
        const { clientWidth } = this.carousel.nativeElement;
        const { children } = this.list.nativeElement;
        let sum = 0;
        if (i > -1) {
            '_,'
                .repeat(i)
                .split(',')
                .map((_, id) => i !== id ? sum += elWidthWithMargin(children[id]) : 0);
            this._position = sum * -1;
            if ((clientWidth - this._position) >= this._cardOffsetLeft) {
                this._setLastCardPosition();
            }
            else {
                this._setCardPosition(this._position);
            }
            this._calcCurrentItem(this._position, this._cardWidth, this.count);
        }
    }
    _shiftValidRight() {
        ((this.currentItem + 1) >= this.totalItems) ? this._setLastCardPosition() : this._slideToRight();
    }
    _slideToRight() {
        this._calcDimensions('r');
    }
    _slideToLeft() {
        this._calcDimensions();
    }
    _getActiveCard() {
        let activeCard = Math.abs(Math.ceil(this._position / this._cardWidth));
        activeCard = isNaN(activeCard) ? 0 : activeCard;
        return activeCard;
    }
    _calcDimensions(move = 'left') {
        if (this.list) {
            const activeCard = this._getActiveCard();
            const { children } = this.list.nativeElement;
            const createdArr = '_,'.repeat(this.count).split(',');
            let summary = 0;
            createdArr.map((_, i) => {
                if (i !== 0 && i !== this.count) {
                    if (!isUndefined(children[activeCard + i])) {
                        summary += elWidthWithMargin(children[activeCard + i]);
                    }
                }
            });
            move === 'left' ?
                this._position = Math.min(this._position + elWidthWithMargin(children[activeCard]) + summary, 0) :
                this._position = this._position - elWidthWithMargin(children[activeCard]) - summary;
            this._setCardPosition(this._position);
        }
    }
    _setLastCardPosition() {
        if (this.carousel && this.list && this.totalItems > 1) {
            this._position = -(this._cardOffsetLeft - this.carousel.nativeElement.clientWidth + this._cardWidth);
            this._setCardPosition(this._position);
        }
    }
    _checkItemsOnResize() {
        if (this.currentItem >= this.totalItems) {
            this.currentItem = this.totalItems;
            this._setLastCardPosition();
        }
    }
    _setCardPosition(offset) {
        if (this.list) {
            const { nativeElement } = this.list;
            this.isRtl() ?
                nativeElement.style.marginRight = `${offset}px` :
                nativeElement.style.marginLeft = `${offset}px`;
        }
    }
    _calcCurrentItem(position, width, count) {
        const value = Math.abs(Math.ceil(Math.ceil(-position / width) / count)) + 1;
        if (isNaN(value)) {
            this.currentItem = 1;
        }
        else {
            this.currentItem = value > this.slide.length ? this.slide.length : value;
        }
    }
    _calcCountSliding(cardWidth) {
        if (this.viewport) {
            const countResult = Math.floor(this.viewport.nativeElement.clientWidth / cardWidth);
            (!isNaN(countResult) && countResult !== 0) ? this.count = countResult : this.count = 1;
        }
    }
    _calcTotalItems() {
        this.totalItems = Math.ceil(this.slide.length / this.count);
    }
    _makeCountForCardOffset(slides) {
        let sum = 0;
        if (slides && slides.length > 0) {
            slides.forEach((item) => sum += elWidthWithMargin(item.element));
            this._cardOffsetLeft = sum - elWidthWithMargin(this.slide.last.element);
            this.getCurrentCount();
        }
    }
    _zipKeysEvent(e) {
        this._moveByTab(e);
        this._moveByArrows(e);
    }
    _focusFirstCard(currentValue, value, shiftKey, setValue) {
        if (shiftKey && currentValue > value) {
            this.currentItem = 1;
            this._position = 0;
            setValue(this.currentItem);
            this._setCardPosition(this._position);
            this.slide.toArray()[0].element.focus();
            return;
        }
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    _moveByTab(e) {
        const { target, shiftKey } = e;
        const keyCode = getEventKeyCode(e);
        /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
        const setValue = (v) => v = this.currentItem;
        const value = this.currentItem || 1;
        let index = 1;
        this.slide
            .toArray()
            .forEach((item, i) => {
            const cardSlide = target.closest('adapt-multi-card-slide');
            // multi-card don't work correct while navigation start from the last slide element using keyboard navigation
            // temporary fix for the issue https://github.bmc.com/bmc-ux/adapt-angular/issues/1344
            if (shiftKey && keyCode === TAB && target !== item.element && cardSlide === item.element) {
                index = i + 1;
                const currentLayer = Math.ceil(index / this.count);
                this._focusFirstCard(currentLayer, value, shiftKey, setValue);
            }
            if (keyCode === TAB && target === item.element) {
                index = i + 1;
                this.currentItem = Math.ceil(index / this.count);
                // multi-card don't work correct while navigation start from the last slide element using keyboard navigation
                // temporary fix for the issue https://github.bmc.com/bmc-ux/adapt-angular/issues/1344
                this._focusFirstCard(this.currentItem, value, shiftKey, setValue);
                if (this.currentItem > value) {
                    setValue(value);
                    this._slideToRight();
                    this._checkItemsOnResize();
                }
                if (value > this.currentItem) {
                    setValue(value);
                    this._slideToLeft();
                }
            }
        });
    }
    _moveByArrows(e) {
        switch (getEventKeyCode(e)) {
            case LEFT_ARROW: {
                if (this.prev) {
                    this.prev.nativeElement.focus();
                    this.movePrev();
                    if (this.currentItem === 1) {
                        setTimeout(() => {
                            this.next.nativeElement.focus();
                        }, 250); // because of animation on a control button
                    }
                }
                break;
            }
            case RIGHT_ARROW: {
                if (this.next) {
                    this.next.nativeElement.focus();
                    this.moveNext();
                    if (this.currentItem >= this.totalItems) {
                        setTimeout(() => {
                            this.prev.nativeElement.focus();
                        }, 250); // because of animation on a control button
                    }
                }
                break;
            }
        }
    }
}
AdaptMultiCardComponent.ɵfac = function AdaptMultiCardComponent_Factory(t) { return new (t || AdaptMultiCardComponent)(i0.ɵɵdirectiveInject(i1.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i2.ResizeService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.Directionality), i0.ɵɵdirectiveInject(i4.AdaptTranslateService), i0.ɵɵdirectiveInject(i5.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i5.AdaptRadarAngularCustomEventName, 8)); };
AdaptMultiCardComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptMultiCardComponent, selectors: [["adapt-multi-card"]], contentQueries: function AdaptMultiCardComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, AdaptMultiCardSlideComponent, 4);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.slide = _t);
    } }, viewQuery: function AdaptMultiCardComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c1, 5);
        i0.ɵɵviewQuery(_c2, 5);
        i0.ɵɵviewQuery(_c3, 7);
        i0.ɵɵviewQuery(_c4, 7);
        i0.ɵɵviewQuery(_c5, 7);
        i0.ɵɵviewQuery(AdaptTabsControlsDirective, 5);
        i0.ɵɵviewQuery(_c6, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.prev = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.next = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.carousel = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.list = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.viewport = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._tabsControls = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._links = _t);
    } }, hostVars: 26, hostBindings: function AdaptMultiCardComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("adapt-multi-card", true)("a-multi-card_foreground", ctx.skin === "carousel_foreground")("a-multi-card_skin1", ctx.skin === "skin1")("a-multi-card_background", ctx.skin === "carousel_background")("a-multi-card_skin3", ctx.skin === "skin3")("a-multi-card_skin4", ctx.skin === "skin4")("a-multi-card_skin5", ctx.skin === "skin5")("a-multi-card_skin6", ctx.skin === "skin6")("a-multi-card_skin7", ctx.skin === "skin7")("a-multi-card_skin8", ctx.skin === "skin8")("a-multi-card_foreground-inverse", ctx.skin === "carousel_foreground_inverse")("a-multi-card_background-inverse", ctx.skin === "carousel_background_inverse")("a-multi-card_skin11", ctx.skin === "skin11");
    } }, inputs: { statusBar: "statusBar", customClass: "customClass", cardHeader: ["card-header", "cardHeader"], title: ["card-title", "title"], btnPrevText: "btnPrevText", btnNextText: "btnNextText", autoPlayInterval: "autoPlayInterval", loop: "loop", skin: "skin", count: "count" }, features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c11, decls: 26, vars: 13, consts: [["carousel", ""], [4, "ngIf"], ["class", "nav nav-pills a-multi-carousel__pills", "role", "tablist", 4, "ngIf"], ["data-adapt", "hammer-pan-y", 1, "a-multi-card__cover", 3, "ngClass", "ngStyle", "swipeleft", "swiperight"], ["viewport", ""], [1, "a-multi-carousel__viewport"], [1, "a-multi-card__wrapper"], [1, "a-multi-carousel__list"], ["list", ""], ["class", "a-multi-carousel__controls", 4, "ngIf"], ["class", "a-multi-card__header", 4, "ngIf"], [1, "a-multi-card__header"], ["class", "a-multi-card__title", 4, "ngIf"], [1, "a-multi-card__count"], [1, "a-multi-card__title"], ["role", "tablist", 1, "nav", "nav-pills", "a-multi-carousel__pills"], ["class", "nav-item", 4, "ngFor", "ngForOf"], ["adapt-tabs-controls", "", 3, "direction", "adaptRadarDisableEventSending"], [1, "nav-item"], ["href", "#", "role", "tab", 1, "nav-link", 3, "click"], ["links", ""], [1, "a-multi-carousel__controls"], ["type", "button", "role", "button", "tabindex", "0", 1, "a-multi-carousel__prev", "btn", "d-icon-angle_left", "shadow-1", 3, "ngClass", "mouseleave", "click"], ["prev", ""], [1, "sr-only"], ["type", "button", "role", "button", "tabindex", "0", 1, "a-multi-carousel__next", "btn", "d-icon-angle_right", "shadow-1", 3, "ngClass", "mouseleave", "click"], ["next", ""]], template: function AdaptMultiCardComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef(_c8);
        i0.ɵɵelementStart(0, "div", null, 0);
        i0.ɵɵtext(2, "\n\n  ");
        i0.ɵɵtemplate(3, AdaptMultiCardComponent_ng_container_3_Template, 4, 1, "ng-container", 1);
        i0.ɵɵtext(4, "\n\n  ");
        i0.ɵɵtemplate(5, AdaptMultiCardComponent_ul_5_Template, 6, 3, "ul", 2);
        i0.ɵɵtext(6, "\n\n  ");
        i0.ɵɵelementStart(7, "div", 3, 4);
        i0.ɵɵlistener("swipeleft", function AdaptMultiCardComponent_Template_div_swipeleft_7_listener() { return ctx.swipeNext(); })("swiperight", function AdaptMultiCardComponent_Template_div_swiperight_7_listener() { return ctx.swipePrev(); });
        i0.ɵɵtext(9, "\n    ");
        i0.ɵɵelementStart(10, "div", 5);
        i0.ɵɵtext(11, "\n      ");
        i0.ɵɵelementStart(12, "div", 6);
        i0.ɵɵtext(13, "\n        ");
        i0.ɵɵelementStart(14, "div", 7, 8);
        i0.ɵɵtext(16, "\n          ");
        i0.ɵɵprojection(17);
        i0.ɵɵtext(18, "\n        ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(19, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(20, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(21, "\n    ");
        i0.ɵɵtemplate(22, AdaptMultiCardComponent_div_22_Template, 16, 10, "div", 9);
        i0.ɵɵtext(23, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(24, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(25, "\n\n\n");
    } if (rf & 2) {
        i0.ɵɵclassMapInterpolate1("a-multi-carousel ", ctx.customClass, "");
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", !ctx.statusBar);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.orderUniqueArray.length > 0 && ctx.statusBar);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(8, _c9, ctx.currentItem !== ctx.totalItems && ctx.totalItems !== 1 && !ctx.isRtl() || ctx.isRtl() && ctx.currentItem > 1, ctx.currentItem > 1 && !ctx.isRtl() || ctx.currentItem !== ctx.totalItems && ctx.totalItems !== 1 && ctx.isRtl()))("ngStyle", i0.ɵɵpureFunction1(11, _c10, !ctx.isMobile ? "all" : "none"));
        i0.ɵɵadvance(15);
        i0.ɵɵproperty("ngIf", !ctx.isMobile);
    } }, directives: [i6.NgIf, i6.NgClass, i6.NgStyle, i6.NgForOf, i7.AdaptTabsControlsDirective], styles: [".a-multi-carousel__pills {\n    margin: 0 0 20px;\n  }\n\n  .a-multi-card__cover {\n    position: relative;\n    overflow: hidden;\n  }\n\n  .a-multi-carousel__list {\n    transition: margin .3s ease-out !important;\n  }\n  "], encapsulation: 2, data: { animation: [
            trigger('controlNextAnim', [
                state('0', style({ right: '-100%', opacity: 0, visibility: 'hidden' })),
                transition('0 => 1', [
                    style({ right: '-100%', opacity: 0, visibility: 'hidden' }),
                    animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ right: '-16px', opacity: 1, visibility: 'visible' }))
                ]),
                transition('1 => 0', [
                    style({ opacity: 1, visibility: 'visible', right: '-16px' }),
                    animate(`${ANIMATION_DURATION.xtraSlow} ${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ opacity: 0, visibility: 'hidden', right: '-100%' }))
                ])
            ]),
            trigger('controlPrevAnim', [
                state('0', style({ left: '-100%', opacity: 0, visibility: 'hidden' })),
                transition('0 => 1', [
                    style({ left: '-100%', opacity: 0, visibility: 'hidden' }),
                    animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ left: '-16px', opacity: 1, visibility: 'visible' }))
                ]),
                transition('1 => 0', [
                    style({ left: '-16px', opacity: 1, visibility: 'visible' }),
                    animate(`${ANIMATION_DURATION.xtraSlow} ${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ left: '-100%', opacity: 0, visibility: 'hidden' }))
                ])
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptMultiCardComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-multi-card',
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[class.adapt-multi-card]': 'true',
                    '[class.a-multi-card_foreground]': 'skin === "carousel_foreground"',
                    '[class.a-multi-card_skin1]': 'skin === "skin1"',
                    '[class.a-multi-card_background]': 'skin === "carousel_background"',
                    '[class.a-multi-card_skin3]': 'skin === "skin3"',
                    '[class.a-multi-card_skin4]': 'skin === "skin4"',
                    '[class.a-multi-card_skin5]': 'skin === "skin5"',
                    '[class.a-multi-card_skin6]': 'skin === "skin6"',
                    '[class.a-multi-card_skin7]': 'skin === "skin7"',
                    '[class.a-multi-card_skin8]': 'skin === "skin8"',
                    '[class.a-multi-card_foreground-inverse]': 'skin === "carousel_foreground_inverse"',
                    '[class.a-multi-card_background-inverse]': 'skin === "carousel_background_inverse"',
                    '[class.a-multi-card_skin11]': 'skin === "skin11"'
                },
                templateUrl: './multi-card.component.html',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    trigger('controlNextAnim', [
                        state('0', style({ right: '-100%', opacity: 0, visibility: 'hidden' })),
                        transition('0 => 1', [
                            style({ right: '-100%', opacity: 0, visibility: 'hidden' }),
                            animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ right: '-16px', opacity: 1, visibility: 'visible' }))
                        ]),
                        transition('1 => 0', [
                            style({ opacity: 1, visibility: 'visible', right: '-16px' }),
                            animate(`${ANIMATION_DURATION.xtraSlow} ${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ opacity: 0, visibility: 'hidden', right: '-100%' }))
                        ])
                    ]),
                    trigger('controlPrevAnim', [
                        state('0', style({ left: '-100%', opacity: 0, visibility: 'hidden' })),
                        transition('0 => 1', [
                            style({ left: '-100%', opacity: 0, visibility: 'hidden' }),
                            animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ left: '-16px', opacity: 1, visibility: 'visible' }))
                        ]),
                        transition('1 => 0', [
                            style({ left: '-16px', opacity: 1, visibility: 'visible' }),
                            animate(`${ANIMATION_DURATION.xtraSlow} ${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ left: '-100%', opacity: 0, visibility: 'hidden' }))
                        ])
                    ])
                ],
                styles: [`.a-multi-carousel__pills {
    margin: 0 0 20px;
  }

  .a-multi-card__cover {
    position: relative;
    overflow: hidden;
  }

  .a-multi-carousel__list {
    transition: margin .3s ease-out !important;
  }
  `]
            }]
    }], function () { return [{ type: i1.AdaptDeviceDetectionService }, { type: i2.ResizeService }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i3.Directionality }, { type: i4.AdaptTranslateService }, { type: i5.AdaptRadarAngularService }, { type: i5.AdaptRadarAngularCustomEventName, decorators: [{
                type: Optional
            }] }]; }, { statusBar: [{
            type: Input
        }], customClass: [{
            type: Input
        }], cardHeader: [{
            type: Input,
            args: ['card-header']
        }], title: [{
            type: Input,
            args: ['card-title']
        }], btnPrevText: [{
            type: Input
        }], btnNextText: [{
            type: Input
        }], autoPlayInterval: [{
            type: Input
        }], loop: [{
            type: Input
        }], prev: [{
            type: ViewChild,
            args: ['prev']
        }], next: [{
            type: ViewChild,
            args: ['next']
        }], carousel: [{
            type: ViewChild,
            args: ['carousel', { static: true }]
        }], list: [{
            type: ViewChild,
            args: ['list', { static: true }]
        }], viewport: [{
            type: ViewChild,
            args: ['viewport', { static: true }]
        }], slide: [{
            type: ContentChildren,
            args: [AdaptMultiCardSlideComponent]
        }], _tabsControls: [{
            type: ViewChild,
            args: [AdaptTabsControlsDirective]
        }], _links: [{
            type: ViewChildren,
            args: ['links']
        }], skin: [{
            type: Input
        }], count: [{
            type: Input
        }] }); })();
//# sourceMappingURL=multi-card.component.js.map