import { Component, ElementRef, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';
import { cloneDeep } from 'lodash-es';
import { AdaptDeviceDetectionService } from '../../../common/device-detection.service';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularCustomEventType, AdaptRadarAngularService, AdaptRadarAngularGenericDirective } from '../../../common/radar/adapt-radar';
import { getInteractionSource } from '../../../common/interaction-source';
import { AdaptRxRatingConfigService } from '../adapt-rx-rating-config.service';
import { RxRatingLikeItem, RxRatingLikeScale, RxRatingSize } from '../adapt-rx-rating.types';
import * as i0 from "@angular/core";
import * as i1 from "../adapt-rx-rating-config.service";
import * as i2 from "../../../common/radar/adapt-radar";
import * as i3 from "../../../common/device-detection.service";
import * as i4 from "@angular/common";
import * as i5 from "../../../tooltip/tooltip.directive";
function AdaptRxRatingLikeComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "button", 2);
    i0.ɵɵlistener("click", function AdaptRxRatingLikeComponent_ng_container_2_Template_button_click_2_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r4); const ratingItem_r1 = restoredCtx.$implicit; const ctx_r3 = i0.ɵɵnextContext(); return ctx_r3.handleClick($event, ratingItem_r1); });
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n  ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ratingItem_r1 = ctx.$implicit;
    const index_r2 = ctx.index;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("is-disabled", ctx_r0.disabledList && ctx_r0.disabledList.indexOf(ratingItem_r1) !== -1)("is-selected", ctx_r0.selectedRate === ratingItem_r1)("is-inactive", ctx_r0.selectedRate !== ratingItem_r1 && ctx_r0.selectedRate !== null || ctx_r0.disabledList && ctx_r0.disabledList.indexOf(ratingItem_r1) !== -1);
    i0.ɵɵproperty("ngClass", ctx_r0.ratingItemsClassNameMap.get(ratingItem_r1))("adaptTooltip", !ctx_r0.disabled ? ctx_r0.ratingTooltips[index_r2] : "")("adaptRadarDisableEventSending", true)("placement", ctx_r0.tooltipPlacement)("disabled", ctx_r0.disabled || ctx_r0.disabledList && ctx_r0.disabledList.indexOf(ratingItem_r1) !== -1);
    i0.ɵɵattribute("aria-label", ctx_r0.ratingTooltips[index_r2])("data-testid", ctx_r0.testID + "_item-" + index_r2);
} }
export class AdaptRxRatingLikeComponent extends AdaptRadarAngularGenericDirective {
    constructor(rxRatingConfigService, _adaptRadarService, _deviceDetectionService, _elem) {
        super(_adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptRxRatingLike);
        this._adaptRadarService = _adaptRadarService;
        this._deviceDetectionService = _deviceDetectionService;
        this.UI_SIZE = RxRatingSize;
        this.ratingItemsClassNameMap = new Map([
            [RxRatingLikeItem.Terrible, 'is-terrible'],
            [RxRatingLikeItem.Disliked, 'is-disliked'],
            [RxRatingLikeItem.Ok, 'is-ok'],
            [RxRatingLikeItem.Good, 'is-good'],
            [RxRatingLikeItem.Excellent, 'is-excellent']
        ]);
        this.selectedRate = null;
        this.isMobile = false;
        /**
         * Component size
         * @docs-default RxRatingSize.sm
         */
        this.size = RxRatingSize.sm;
        /**
         * Tooltip placement
         * @docs-default top
         */
        this.tooltipPlacement = 'top';
        /**
         * Disabled state
         * @docs-default false
         */
        this.disabled = false;
        /**
         * @docs-default null
         */
        this.analyticsMetadata = null;
        /* eslint-disable @angular-eslint/no-output-on-prefix */
        /**
         * An event fired when a user selects a new rating.
         */
        this.onRateChange = new EventEmitter();
        this._scale = RxRatingLikeScale.ScalePoint5;
        this.ratingValues = AdaptRxRatingLikeComponent.Scales.get(RxRatingLikeScale.ScalePoint5);
        this._uiTexts = cloneDeep(rxRatingConfigService.texts.like);
        this.ratingTooltips = this._getRatingTooltips(this._scale);
        this.isMobile = this._deviceDetectionService.isMobile();
    }
    /**
     * Active rate
     * @docs-default null
     */
    set rate(v) {
        this.selectedRate = v;
    }
    /**
     * Scale point of rating
     * @docs-default RxRatingLikeScale.ScalePoint5
     */
    set scale(nextScale) {
        switch (nextScale) {
            case RxRatingLikeScale.ScalePoint3: {
                this._scale = RxRatingLikeScale.ScalePoint3;
                break;
            }
            default: {
                this._scale = RxRatingLikeScale.ScalePoint5;
                break;
            }
        }
        this.ratingValues = AdaptRxRatingLikeComponent.Scales.get(this._scale);
        this.ratingTooltips = this._getRatingTooltips(this._scale);
    }
    /**
     * UI Texts
     * @docs-default AdaptRxRatingConfigService.texts.like
     */
    set texts(newTexts) {
        Object.assign(this._uiTexts, newTexts);
        this.ratingTooltips = this._getRatingTooltips(this._scale);
    }
    handleClick(event, ratingItem) {
        var _a;
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxRatingLike, {
            GroupName: this.adaptRadarGroupName,
            EventType: AdaptRadarAngularCustomEventType.Click,
            Label: (_a = this.analyticsMetadata) === null || _a === void 0 ? void 0 : _a.label,
            FieldSize: this.size,
            RatingEntered: !!this.rate,
            RatingValue: this.rate,
            Disabled: this.disabled,
            SubmitMethod: getInteractionSource(event, this.isMobile)
        });
        if (!this.disabled) {
            this._stopDisabled(event, ratingItem);
            this.selectedRate = ratingItem;
            this.onRateChange.emit(ratingItem);
        }
    }
    _stopDisabled(event, ratingItem) {
        if (this.disabledList && this.disabledList.indexOf(ratingItem) === -1) {
            event.preventDefault();
            event.stopPropagation();
        }
    }
    _getRatingTooltips(scale) {
        switch (scale) {
            case RxRatingLikeScale.ScalePoint3: {
                return [
                    this._uiTexts.tooltipDisliked,
                    this._uiTexts.tooltipOk,
                    this._uiTexts.tooltipGood
                ];
            }
            default: {
                return [
                    this._uiTexts.tooltipTerrible,
                    this._uiTexts.tooltipDisliked,
                    this._uiTexts.tooltipOk,
                    this._uiTexts.tooltipGood,
                    this._uiTexts.tooltipExcellent
                ];
            }
        }
    }
}
AdaptRxRatingLikeComponent.Scales = new Map([
    [
        RxRatingLikeScale.ScalePoint5,
        [
            RxRatingLikeItem.Terrible,
            RxRatingLikeItem.Disliked,
            RxRatingLikeItem.Ok,
            RxRatingLikeItem.Good,
            RxRatingLikeItem.Excellent
        ]
    ],
    [
        RxRatingLikeScale.ScalePoint3,
        [
            RxRatingLikeItem.Disliked,
            RxRatingLikeItem.Ok,
            RxRatingLikeItem.Good,
        ]
    ]
]);
AdaptRxRatingLikeComponent.ɵfac = function AdaptRxRatingLikeComponent_Factory(t) { return new (t || AdaptRxRatingLikeComponent)(i0.ɵɵdirectiveInject(i1.AdaptRxRatingConfigService), i0.ɵɵdirectiveInject(i2.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i3.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptRxRatingLikeComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptRxRatingLikeComponent, selectors: [["adapt-rx-rating-like"]], inputs: { rate: "rate", scale: "scale", texts: "texts", size: "size", tooltipPlacement: "tooltipPlacement", disabled: "disabled", disabledList: "disabledList", testID: "testID", analyticsMetadata: "analyticsMetadata" }, outputs: { onRateChange: "onRateChange" }, features: [i0.ɵɵInheritDefinitionFeature], decls: 5, vars: 7, consts: [[1, "a-rating", "a-rating_like"], [4, "ngFor", "ngForOf"], ["type", "button", 1, "a-rating__item", 3, "ngClass", "adaptTooltip", "adaptRadarDisableEventSending", "placement", "disabled", "click"]], template: function AdaptRxRatingLikeComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵtext(1, "\n  ");
        i0.ɵɵtemplate(2, AdaptRxRatingLikeComponent_ng_container_2_Template, 5, 13, "ng-container", 1);
        i0.ɵɵtext(3, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(4, "\n\n");
    } if (rf & 2) {
        i0.ɵɵclassProp("a-rating_small", ctx.size === ctx.UI_SIZE.sm)("a-rating_medium", ctx.size === ctx.UI_SIZE.md)("a-rating_large", ctx.size === ctx.UI_SIZE.lg);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx.ratingValues);
    } }, directives: [i4.NgForOf, i4.NgClass, i5.AdaptTooltipDirective], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxRatingLikeComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-rx-rating-like',
                templateUrl: './adapt-rx-rating-like.component.html',
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: i1.AdaptRxRatingConfigService }, { type: i2.AdaptRadarAngularService }, { type: i3.AdaptDeviceDetectionService }, { type: i0.ElementRef }]; }, { rate: [{
            type: Input
        }], scale: [{
            type: Input
        }], texts: [{
            type: Input
        }], size: [{
            type: Input
        }], tooltipPlacement: [{
            type: Input
        }], disabled: [{
            type: Input
        }], disabledList: [{
            type: Input
        }], testID: [{
            type: Input
        }], analyticsMetadata: [{
            type: Input
        }], onRateChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=adapt-rx-rating-like.component.js.map