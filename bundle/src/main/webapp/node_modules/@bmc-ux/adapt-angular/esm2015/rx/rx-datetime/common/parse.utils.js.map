{"version":3,"file":"parse.utils.js","sourceRoot":"","sources":["../../../../../../../libs/adapt-angular/src/rx/rx-datetime/common/parse.utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  FormatWidth,\n  FormStyle,\n  getLocaleDateFormat,\n  getLocaleDateTimeFormat,\n  getLocaleDayNames,\n  getLocaleDayPeriods,\n  getLocaleDirection,\n  getLocaleEraNames,\n  getLocaleId,\n  getLocaleMonthNames,\n  getLocaleNumberSymbol,\n  getLocaleTimeFormat,\n  NumberSymbol,\n  TranslationWidth\n} from '@angular/common';\nimport {capitalize, isNaN, isNil, isNumber, toString, trim} from 'lodash-es';\n\nimport {RxDatetimeStruct} from '../adapt-rx-datetime.types';\nimport {KeyValueObject} from '../../../common/common.models';\nimport {adaptWarn} from '../../../common/logger';\nimport {isValidTimeZone} from './time-zone.utils';\nimport {getTimeZoneOffset} from './offset.utils';\nimport {isInvalidDateStruct, isValidDate} from './validate.utils';\n\nconst makeOptional: (pattern: string) => string = (pattern: string) => `(?:${pattern})?`;\nconst ISO_YEAR_PATTERN = '(?<year>\\\\d{4})';\nconst ISO_MONTH_PATTERN = '-(?<month>\\\\d{2})';\nconst ISO_DAY_PATTERN = '-(?<date>\\\\d{2})';\nconst ISO_HOUR_PATTERN = 'T(?<hours>\\\\d{2})';\nconst ISO_MINUTE_PATTERN = ':(?<minutes>\\\\d{2})';\nconst ISO_SECOND_PATTERN = ':(?<seconds>\\\\d{2})';\nconst ISO_MS_PATTERN = '\\\\.(?<milliseconds>\\\\d{3})\\\\d*';\nconst ISO_TZ_PATTERN = '(?<offsetsign>[+-])(?<offsethours>\\\\d{2}):?(?<offsetminutes>\\\\d{2})';\n// ISO dates should include at least the year and month\nconst ISO_DATE_PATTERN = ISO_YEAR_PATTERN + ISO_MONTH_PATTERN + makeOptional(ISO_DAY_PATTERN);\n// When included, the time part of ISO dates should include at least the hours and minutes\nconst ISO_TIME_PATTERN = ISO_HOUR_PATTERN + ISO_MINUTE_PATTERN + makeOptional(ISO_SECOND_PATTERN + makeOptional(ISO_MS_PATTERN));\n\n// Regular expressions for matching date strings in ISO format, with or without timezone\nconst ISO_UTC_REG_EXP = new RegExp(`^${ISO_DATE_PATTERN}${makeOptional(ISO_TIME_PATTERN)}Z?$`);\nconst ISO_OFFSET_REG_EXP = new RegExp(`^${ISO_DATE_PATTERN}${ISO_TIME_PATTERN}${ISO_TZ_PATTERN}$`);\n\n// Regular expression for splitting date formats used by Angular, taken from Angular source\nconst DATE_FORMAT_LITERAL = '(?:[^GyYMLwWdEabBhHmsSzZO\\']+)';\nconst DATE_FORMAT_QUOTED_LITERAL = '(?:\\'(?:[^\\']|\\'\\')*\\')';\nconst DATE_FORMAT_TOKEN =\n  '(?:G{1,5}|y{1,4}|Y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4})';\nconst DATE_FORMATS_SPLIT = new RegExp(`(${DATE_FORMAT_LITERAL}|${DATE_FORMAT_QUOTED_LITERAL}|${DATE_FORMAT_TOKEN})([\\\\s\\\\S]*)`);\n\nconst FORMAT_MATCHERS = new Map<string, Map<string, RegExp>>();\nconst NO_LOCALE_DATA_CACHE = new Set<string>();\n\nfunction fillStructDefaults(parts: RxDatetimeStruct): RxDatetimeStruct {\n  return ['year', 'month', 'hours', 'minutes', 'seconds', 'milliseconds'].reduce((memo, property) => {\n    memo[property] = memo[property] || 0;\n\n    return memo;\n  }, {\n    ...parts,\n    date: isNil(parts.date) ? 1 : parts.date\n  });\n}\n\nfunction getCurrentCentury(): string {\n  return new Date().getFullYear().toString().slice(0, 2);\n}\n\nfunction hasYearMatch(matchGroups: KeyValueObject<string>): boolean {\n  return !isNil(matchGroups.year) || !isNil(matchGroups.abbreviatedyear);\n}\n\nfunction hasMonthMatch(matchGroups: KeyValueObject<string>): boolean {\n  return !isNil(matchGroups.month) ||\n    !isNil(matchGroups.abbreviatedmonth) || !isNil(matchGroups.narrowmonth) || !isNil(matchGroups.widemonth) ||\n    !isNil(matchGroups.abbreviatedsmonth) || !isNil(matchGroups.narrowsmonth) || !isNil(matchGroups.widesmonth);\n}\n\nfunction applyEra(matchGroups: KeyValueObject<string>, year: string, locale: string): string {\n  let isBCE = false;\n\n  year = toString(year);\n\n  if (matchGroups.abbreviatedera) {\n    isBCE = matchGroups.abbreviatedera === getLocaleEraNames(locale, TranslationWidth.Abbreviated)[0];\n\n  } else if (matchGroups.wideera) {\n    isBCE = matchGroups.wideera === getLocaleEraNames(locale, TranslationWidth.Wide)[0];\n\n  } else if (matchGroups.narrowera) {\n    isBCE = matchGroups.narrowera === getLocaleEraNames(locale, TranslationWidth.Narrow)[0];\n  }\n\n  // https://github.bmc.com/bmc-ux/adapt-angular/issues/6680\n  // https://docs.microsoft.com/en-us/office/troubleshoot/excel/two-digit-year-numbers#the-2029-rule\n  if (!isBCE && (year.length <= 2)) {\n    let tempYear = parseInt(year, 10);\n\n    if (tempYear >= 0 && tempYear <= 29) {\n      tempYear += 2000;\n    } else if (tempYear >= 30 && tempYear <= 99) {\n      tempYear += 1900;\n    }\n\n    year = tempYear.toString();\n  }\n\n  return isBCE ? `-${year.padStart(6, '0')}` : year.padStart(4, '0');\n}\n\nfunction formatYearMonthDate(date: Date): string {\n  const year = date.getFullYear();\n  const formattedYear = year >= 0 ? year.toString().padStart(4, '0') : `-${Math.abs(year).toString().padStart(6, '0')}`;\n\n  return `${formattedYear}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\n}\n\nfunction extractDay(matchGroups: KeyValueObject<string>, locale: string): number {\n  if (matchGroups.abbreviatedday) {\n    return getLocaleDayNames(locale, FormStyle.Format, TranslationWidth.Abbreviated).indexOf(matchGroups.abbreviatedday) + 1;\n\n  } else if (matchGroups.wideday) {\n    return getLocaleDayNames(locale, FormStyle.Format, TranslationWidth.Wide).indexOf(matchGroups.wideday) + 1;\n\n  } else if (matchGroups.narrowday) {\n    return getLocaleDayNames(locale, FormStyle.Format, TranslationWidth.Narrow).indexOf(matchGroups.narrowday) + 1;\n\n  } else if (matchGroups.shortday) {\n    return getLocaleDayNames(locale, FormStyle.Format, TranslationWidth.Short).indexOf(matchGroups.shortday) + 1;\n  }\n\n  return 0;\n}\n\nfunction extractDateFromWeekNumberingYear(matchGroups: KeyValueObject<string>, locale: string): string {\n  // try to extract the date from week-numbering year, week and day of week,\n  // but only if the \"normal\" year is not part of the match group\n  if (hasYearMatch(matchGroups) || !matchGroups.wnyear && !matchGroups.abbreviatedwnyear) {\n    return null;\n  }\n\n  const wnyear = applyEra(matchGroups, matchGroups.wnyear || `${getCurrentCentury()}${matchGroups.abbreviatedwnyear}`, locale);\n\n  // January 4th is always in the first week of the year in ISO week-numbering system\n  const date = new Date(`${wnyear}-01-04T00:00`);\n\n  // subtract appropriate number of days to put the date on the first day of the first week\n  date.setTime(date.getTime() - date.getDay() * 24 * 60 * 60 * 1000);\n\n  // add weeks to put the date at the start of the matched week\n  const week: number = matchGroups.week && parseInt(matchGroups.week);\n\n  week && week <= 53 && date.setTime(date.getTime() + (week - 1) * 7 * 24 * 60 * 60 * 1000);\n\n  // add days to put the date on the matched day of the week\n  const day: number = extractDay(matchGroups, locale) || 1;\n\n  date.setTime(date.getTime() + (day - 1) * 24 * 60 * 60 * 1000);\n\n  return formatYearMonthDate(date);\n}\n\nfunction extractDateFromWeekNumberInMonth(matchGroups: KeyValueObject<string>, locale: string): string {\n  // try to extract the date from matched year, month, week in month and day of week,\n  // but only if the numeric date of month is not part of the match group\n  const week = parseInt(matchGroups.weekinmonth);\n\n  if (!isNil(matchGroups.date) || !week || week < 1 || week > 5 || !hasMonthMatch(matchGroups) || !hasYearMatch(matchGroups)) {\n    return null;\n  }\n  const month = extractMonth(matchGroups, locale);\n  const day = extractDay(matchGroups, locale);\n  const date = new Date(`${extractYear(matchGroups, locale)}-${month}-01T00:00:00`);\n\n  // when the day is not specified and the week number is 1 the match is the first day of the month;\n  // otherwise we need to do some calculations to adjust the date to the desired day\n  if (day || week > 1) {\n    // subtract appropriate number of days to put the date on the Sunday of the first week\n    date.setTime(date.getTime() - date.getDay() * 24 * 60 * 60 * 1000);\n    // add weeks to put the date at the start of the matched week\n    date.setTime(date.getTime() + (week - 1) * 7 * 24 * 60 * 60 * 1000);\n    // add appropriate number of days to put the date on the desired day of the week\n    date.setTime(date.getTime() + (day - 1) * 24 * 60 * 60 * 1000);\n  }\n\n  return formatYearMonthDate(date);\n}\n\nfunction extractDateFromYearMonthDate(matchGroups: KeyValueObject<string>, locale: string): string {\n  return `${extractYear(matchGroups, locale)}-${extractMonth(matchGroups, locale)}-${extractDate(matchGroups)}`;\n}\n\nfunction extractYear(matchGroups: KeyValueObject<string>, locale: string): string {\n  let year;\n\n  if (matchGroups.year) {\n    year = matchGroups.year;\n\n  } else if (matchGroups.abbreviatedyear) {\n    // 'yy' format is special in that it returns the same string for different centuries (ie. 1901 => '01'; 2001 => '01');\n    // It is therefore not possible to uniquely distinguish the intended century from the parsed string, so the best\n    // we can do is to \"guess\" that the current century is intended.\n    year = `${getCurrentCentury()}${matchGroups.abbreviatedyear}`;\n  }\n\n  return isNil(year) ? '1970' : applyEra(matchGroups, year, locale);\n}\n\nfunction extractMonth(matchGroups: KeyValueObject<string>, locale: string): string {\n  let month: string;\n\n  if (!isNil(matchGroups.month)) {\n    month = matchGroups.month;\n  } else if (!isNil(matchGroups.abbreviatedmonth)) {\n    month = (getLocaleMonthNames(locale, FormStyle.Format, TranslationWidth.Abbreviated).indexOf(matchGroups.abbreviatedmonth) + 1).toString();\n  } else if (!isNil(matchGroups.narrowmonth)) {\n    month = (getLocaleMonthNames(locale, FormStyle.Format, TranslationWidth.Narrow).indexOf(matchGroups.narrowmonth) + 1).toString();\n  } else if (!isNil(matchGroups.widemonth)) {\n    month = (getLocaleMonthNames(locale, FormStyle.Format, TranslationWidth.Wide).indexOf(matchGroups.widemonth) + 1).toString();\n  } else if (!isNil(matchGroups.abbreviatedsmonth)) {\n    month = (getLocaleMonthNames(locale, FormStyle.Standalone, TranslationWidth.Abbreviated).indexOf(matchGroups.abbreviatedsmonth) + 1).toString();\n  } else if (!isNil(matchGroups.narrowsmonth)) {\n    month = (getLocaleMonthNames(locale, FormStyle.Standalone, TranslationWidth.Narrow).indexOf(matchGroups.narrowsmonth) + 1).toString();\n  } else if (!isNil(matchGroups.widesmonth)) {\n    month = (getLocaleMonthNames(locale, FormStyle.Standalone, TranslationWidth.Wide).indexOf(matchGroups.widesmonth) + 1).toString();\n  } else {\n    month = '01';\n  }\n\n  return month.padStart(2, '0');\n}\n\nfunction extractDate(matchGroups: KeyValueObject<string>): string {\n  return (matchGroups.date || '01').padStart(2, '0');\n}\n\nfunction extractHours(matchGroups: KeyValueObject<string>, locale: string): string {\n  if (matchGroups.hour) {\n    return matchGroups.hour.padStart(2, '0');\n  }\n\n  if (!matchGroups.hour12) {\n    return '00';\n  }\n\n  let hour = parseInt(matchGroups.hour12);\n\n  if (hour > 12) {\n    // invalid value; set hour to a value that will result in invalid date\n    return '25';\n  }\n\n  let isPM = false;\n\n  if (matchGroups.abbreviateddayperiod) {\n    isPM = matchGroups.abbreviateddayperiod === getLocaleDayPeriods(locale, FormStyle.Format, TranslationWidth.Abbreviated)[1];\n  } else if (matchGroups.widedayperiod) {\n    isPM = matchGroups.widedayperiod === getLocaleDayPeriods(locale, FormStyle.Format, TranslationWidth.Wide)[1];\n  } else if (matchGroups.narrowdayperiod) {\n    isPM = matchGroups.narrowdayperiod === getLocaleDayPeriods(locale, FormStyle.Format, TranslationWidth.Narrow)[1];\n  }\n\n  hour = hour % 12;\n\n  if (isPM) {\n    hour += 12;\n  }\n\n  return hour.toString().padStart(2, '0');\n}\n\nfunction extractMinutes(matchGroups: KeyValueObject<string>): string {\n  return (matchGroups.minute || '0').padStart(2, '0');\n}\n\nfunction extractSeconds(matchGroups: KeyValueObject<string>): string {\n  return (matchGroups.second || '0').padStart(2, '0');\n}\n\nfunction extractMilliseconds(matchGroups: KeyValueObject<string>): string {\n  return matchGroups.millisecond || '000';\n}\n\nfunction extractZone(matchGroups: KeyValueObject<string>, locale: string): string {\n  const sign = matchGroups.offsetsign;\n\n  if (!sign) {\n    return '';\n  }\n\n  const hours = toString(matchGroups.offsethours).padStart(2, '0');\n  const minutes = toString(matchGroups.offsetminutes).padStart(2, '0');\n\n  return `${sign === getLocaleNumberSymbol(locale, NumberSymbol.MinusSign) ? '-' : '+'}${hours}${minutes}`;\n}\n\nfunction attemptMatch(value: string, matcher: RegExp, locale: string): Date {\n  const match = value.match(matcher);\n\n  if (!match) {\n    return null;\n  }\n\n  const date = extractDateFromWeekNumberingYear(match.groups, locale) ||\n    extractDateFromWeekNumberInMonth(match.groups, locale) ||\n    extractDateFromYearMonthDate(match.groups, locale);\n\n  const time = `${extractHours(match.groups, locale)}:${extractMinutes(match.groups)}:${extractSeconds(match.groups)}.${extractMilliseconds(match.groups)}`;\n  const zone = extractZone(match.groups, locale);\n\n  return new Date(`${date}T${time}${zone}`);\n}\n\nfunction getDirectionSafeString(value: string, locale: string): string {\n  // rtl language strings must be converted into unicode when used as part of regular expression patterns\n  return getLocaleDirection(locale) === 'rtl' ? value.split('').map(a => `\\\\u${a.charCodeAt(0).toString(16).padStart(4, '0')}`).join('') : value;\n}\n\nfunction joinLocalizedNames(names: readonly string[], locale: string): string {\n  return names.map(name => getDirectionSafeString(name, locale).replace(/\\./g, '\\\\.')).join('|');\n}\n\nfunction getNumericPattern(length: number, partName: string): string {\n  return length === 2 ? `(?<${partName}>\\\\d{2})` : `(?<${partName}>\\\\d{1,2})`;\n}\n\nfunction getLocalizedNamesPattern(length: number, partName: string, locale: string, localizedNamesGetter: (width: TranslationWidth) => readonly string[]): string {\n  switch (length) {\n    case 6:\n      return `(?<short${partName}>${joinLocalizedNames(localizedNamesGetter(TranslationWidth.Short), locale)})`;\n    case 5:\n      return `(?<narrow${partName}>${joinLocalizedNames(localizedNamesGetter(TranslationWidth.Narrow), locale)})`;\n    case 4:\n      return `(?<wide${partName}>${joinLocalizedNames(localizedNamesGetter(TranslationWidth.Wide), locale)})`;\n    default:\n      return `(?<abbreviated${partName}>${joinLocalizedNames(localizedNamesGetter(TranslationWidth.Abbreviated), locale)})`;\n  }\n}\n\nfunction getYearPattern(length: number, partName: string): string {\n  switch (length) {\n    case 4:\n      return `(?<${partName}>\\\\d{4})`;\n    case 3:\n      return `(?<${partName}>\\\\d{3,4})`;\n    case 2:\n      return `(?<abbreviated${partName}>\\\\d{2})`;\n    default:\n      return `(?<${partName}>\\\\d{1,4})`;\n  }\n}\n\nfunction getMonthPattern(length: number, style: FormStyle, locale: string): string {\n  return length < 3 ? getNumericPattern(length, 'month') :\n    getLocalizedNamesPattern(length, style === FormStyle.Standalone ? 'smonth' : 'month', locale, (width: TranslationWidth) => getLocaleMonthNames(locale, style, width));\n}\n\nfunction getGMTOffsetPattern(length: number, locale: string): string {\n  return length === 4 ?\n    `GMT(?<offsetsign>${getDirectionSafeString(getLocaleNumberSymbol(locale, NumberSymbol.MinusSign), locale)}|\\\\+)(?<offsethours>\\\\d{2}):(?<offsetminutes>\\\\d{2})` :\n    `GMT(?<offsetsign>${getDirectionSafeString(getLocaleNumberSymbol(locale, NumberSymbol.MinusSign), locale)}|\\\\+)(?<offsethours>\\\\d{1,2})`;\n}\n\nfunction getISOOffsetPattern(length: number, locale: string): string {\n  switch (length) {\n    case 5:\n      return `(?<offsetsign>${getDirectionSafeString(getLocaleNumberSymbol(locale, NumberSymbol.MinusSign), locale)}|\\\\+)(?<offsethours>\\\\d{2}):(?<offsetminutes>\\\\d{2})`;\n    case 4:\n      return getGMTOffsetPattern(length, locale);\n    default:\n      return `(?<offsetsign>${getDirectionSafeString(getLocaleNumberSymbol(locale, NumberSymbol.MinusSign), locale)}|\\\\+)(?<offsethours>\\\\d{2})(?<offsetminutes>\\\\d{2})`;\n  }\n}\n\nfunction getPatternFromPart(namedPart: string, locale: string): string {\n  // TODO: do we need to support the \"extra data\" parts 'b', 'B'?\n  switch (namedPart.slice(0, 1)) {\n    case 'G':\n      // Era name (AD/BC)\n      return getLocalizedNamesPattern(namedPart.length, 'era', locale, (width: TranslationWidth) => getLocaleEraNames(locale, width));\n    case 'y':\n      // 1-4 digit representations of year\n      return getYearPattern(namedPart.length, 'year');\n    case 'Y':\n      // 1-4 digit representations of week-numbering year\n      return getYearPattern(namedPart.length, 'wnyear');\n    case 'M':\n      // Month of the year in 1-2 digit numeric format or appropriate string format\n      return getMonthPattern(namedPart.length, FormStyle.Format, locale);\n    case 'L':\n      // Month of the year in 1-2 digit numeric format or appropriate string format\n      return getMonthPattern(namedPart.length, FormStyle.Standalone, locale);\n    case 'w':\n      // 1-2 digit representation of week of the year\n      return '(?<week>\\\\d{1,2})';\n    case 'W':\n      // 1-2 digit representation of week of the month\n      return '(?<weekinmonth>\\\\d{1,2})';\n    case 'd':\n      // 1-2 digit representation of the day of the month\n      return getNumericPattern(namedPart.length, 'date');\n    case 'E':\n      // Day of the week in appropriate string format\n      return getLocalizedNamesPattern(namedPart.length, 'day', locale, (width: TranslationWidth) => getLocaleDayNames(locale, FormStyle.Format, width));\n    case 'a':\n      // Generic period of the day (am-pm) in appropriate string format\n      return getLocalizedNamesPattern(namedPart.length, 'dayperiod', locale, (width: TranslationWidth) => getLocaleDayPeriods(locale, FormStyle.Format, width));\n    case 'h':\n      // 1-2 digit representation of the hour of the day in 12-hour clock\n      return getNumericPattern(namedPart.length, 'hour12');\n    case 'H':\n      // 1-2 digit representation of the hour of the day in 24-hour clock\n      return getNumericPattern(namedPart.length, 'hour');\n    case 'm':\n      // 1-2 digit representation of the minute of the hour\n      return getNumericPattern(namedPart.length, 'minute');\n    case 's':\n      // 1-2 digit representation of the second of the minute\n      return getNumericPattern(namedPart.length, 'second');\n    case 'S':\n      // Fractional second\n      return `(?<millisecond>\\\\d{${namedPart.length}})`;\n    case 'O':\n    case 'z':\n      // Timezone GMT short (GMT+4) or long (GMT+0430) format\n      return getGMTOffsetPattern(namedPart.length, locale);\n    case 'Z':\n      // Timezone GMT long format if length === 4; Timezone ISO8601 short (-0430) or extended (-04:30) format otherwise\n      return getISOOffsetPattern(namedPart.length, locale);\n    default:\n      // Extra formatting characters\n      return namedPart === '\\'\\'' ? '\\'' : namedPart.replace(/(^'|'$)/g, '').replace(/''/g, '\\'').replace(/(\\.|\\/|\\[|\\])/g, '\\\\$1');\n  }\n}\n\nfunction buildMatcherFromFormat(format: string, locale: string): RegExp {\n  let parts: string[] = [];\n  let match;\n\n  while (format) {\n    match = DATE_FORMATS_SPLIT.exec(format);\n\n    if (match) {\n      parts = parts.concat(match.slice(1));\n\n      const part = parts.pop();\n\n      if (!part) {\n        break;\n      }\n\n      format = part;\n\n    } else {\n      parts.push(format);\n\n      break;\n    }\n  }\n\n  return new RegExp(`^${parts.map(part => getPatternFromPart(part, locale)).join('')}$`);\n}\n\nfunction getFormatMatcher(locale: string, format: string): { matcher: RegExp; locale: string } {\n  if (!FORMAT_MATCHERS.has(locale)) {\n    try {\n      getLocaleId(locale);\n    } catch (e) {\n      if (!NO_LOCALE_DATA_CACHE.has(locale)) {\n        adaptWarn('DatetimeParserFormatter:', e.message, 'Falling back to \"en\".');\n        NO_LOCALE_DATA_CACHE.add(locale);\n      }\n      locale = 'en';\n    }\n    !FORMAT_MATCHERS.has(locale) && FORMAT_MATCHERS.set(locale, new Map<string, RegExp>());\n  }\n\n  const matchers = FORMAT_MATCHERS.get(locale);\n\n  if (matchers.has(format)) {\n    return {matcher: matchers.get(format), locale};\n  }\n\n  let formatValue: string;\n  let width: FormatWidth;\n\n  switch (format) {\n    case 'shortDate':\n    case 'mediumDate':\n    case 'longDate':\n    case 'fullDate':\n      width = FormatWidth[capitalize(format.replace('Date', ''))];\n      formatValue = getLocaleDateFormat(locale, width);\n      break;\n    case 'shortTime':\n    case 'mediumTime':\n    case 'longTime':\n    case 'fullTime':\n      width = FormatWidth[capitalize(format.replace('Time', ''))];\n      formatValue = getLocaleTimeFormat(locale, width);\n      break;\n    case 'short':\n    case 'medium':\n    case 'long':\n    case 'full':\n      width = FormatWidth[capitalize(format)];\n      formatValue = getLocaleDateTimeFormat(locale, width).replace('{0}', getLocaleTimeFormat(locale, width)).replace('{1}', getLocaleDateFormat(locale, width));\n      break;\n    default:\n      formatValue = format;\n  }\n\n  const matcher = buildMatcherFromFormat(formatValue, locale);\n\n  matchers.set(format, matcher);\n\n  return {matcher, locale};\n}\n\nfunction parseISODate(value: string): Date {\n  return value.match(ISO_UTC_REG_EXP) || value.match(ISO_OFFSET_REG_EXP) ? new Date(value) : null;\n}\n\nfunction parseFormattedDate(value: string, formats: string[], locale: string): Date {\n  let parsedDate: Date = null;\n\n  for (const format of formats) {\n    const formatMatcher = getFormatMatcher(locale, format);\n\n    parsedDate = attemptMatch(value, formatMatcher.matcher, formatMatcher.locale);\n\n    if (parsedDate) {\n      break;\n    }\n  }\n\n  return parsedDate;\n}\n\n/**\n * parseDateFromString() function\n *\n * Parses a string representation of a date into a Date object by matching\n * specified date formats in a specified locale\n */\nexport function parseDateFromString(value: string, formats: string[], locale: string): Date {\n  value = trim(value);\n\n  if (!value) {\n    return null;\n  }\n\n  // match custom formatted values first becase the custom format can be pretty similar to ISO like \"yyyy-dd-MM\" and \"yyyy-MM-dd\"\n  const parsedDate = parseFormattedDate(value, formats, locale) || parseISODate(value);\n\n  return isValidDate(parsedDate) ? parsedDate : new Date(NaN);\n}\n\n/**\n * dateFromUnixTime() function\n *\n * Converts an input unix timestamp into a Date object\n */\nexport function dateFromUnixTime(value: number): Date {\n  return isNumber(value) && !isNaN(value) ? new Date(value * 1000) : null;\n}\n\n/**\n * getDateFromParts() function\n *\n * Converts an extended datetime struct object into a Date object, respecting the time zone specified in the struct.\n *\n * Note: if a timezone observes Daylight Savings, datetime structs whose parts fall during the \"lost\" hour\n * during spring ahead to daylight savings technically have no matching Date object; in that case the\n * the resulting Date will be adjusted forward 1 hour (for example, there is no 2am on March 14, 2021 in Vancouver,\n * so a struct specifying these parts will translate into a Date object at 3am on that day.\n * Conversely, datetime structs whose parts fall during the \"repeated\" hour during fall back from daylight\n * savings are technically ambiguous because they match 2 separate Date objects; in that case, the resulting\n * Date is the earlier of the 2 matches (for example, there are two separate moments in time corresponding\n * to 1am on November 7, 2021 in Vancouver, so a struct specifying these parts translates to 1am before the time\n * falls back to standard time). In particular, there is no struct that converts to the second of the repeated hours\n * during the fall back to standard time.\n * This behaviour matches that of the Date constructor when applied to the same date parts in the client timezone.\n */\nexport function getDateFromParts(parts: RxDatetimeStruct): Date {\n  if (!parts) {\n    return null;\n  } else if (isInvalidDateStruct(parts)) {\n    // invalid date struct corresponds to Invalid date object\n    return new Date(NaN);\n  }\n  // eslint-disable-next-line prefer-const\n  let {year, month, date, hours, minutes, seconds, milliseconds, timeZone, offset} = fillStructDefaults(parts);\n\n  if (!timeZone || !isValidTimeZone(timeZone)) {\n    // no fancy Intl footwork is necessary when the client time zone is used\n    const res = isNil(offset) ? new Date(year, month, date, hours, minutes, seconds, milliseconds) :\n      new Date(Date.UTC(year, month, date, hours, minutes, seconds, milliseconds) + Math.round(offset) * 60 * 1000);\n\n    // Force set year to be sure 2-digit year won't be formatted to 19xx\n    res.setFullYear(year);\n\n    return res;\n  }\n\n  // start by constructing a UTC date for the given parts\n  const dateObj = new Date(Date.UTC(year, month, date, hours, minutes, seconds, milliseconds));\n\n  // Force set year to be sure 2-digit year won't be formatted to 19xx\n  dateObj.setUTCFullYear(year);\n\n  // now determine the offset of that date in the desired time zone\n  offset = getTimeZoneOffset(dateObj, timeZone);\n  // adjust the date by the calculated offset so that it represents the parts in the desired time zone instead of UTC\n  offset && dateObj.setTime(dateObj.getTime() + offset * 60 * 1000);\n\n  // we may need further adjustment if the date is near a daylight savings change\n  const adjustedOffset = getTimeZoneOffset(dateObj, timeZone);\n  const offsetBefore = getTimeZoneOffset(new Date(dateObj.getTime() - 60 * 60 * 1000), timeZone);\n\n  if (adjustedOffset > offset) {\n    // Adjusting the date has moved it out of Daylight Savings period, so the adjusted date will have a struct whose\n    // hour is 1 less than the original parts, and we need to re-adjust forward an hour.\n    // Note that in the case that the shift was forward out of DS, there is a 1 hour range of structs that is ambiguous\n    // in determining a Date object, as the time zone repeats an hour during the change\n    // (e.g. in Vancouver tz, the times between 1AM and 2AM on 2021-11-07 are repeated twice). In this case\n    // we follow the behaviour of the Date constructor to decide that such an ambiguous struct represents the\n    // first of the two matching Dates, ie. the one in the new offset.\n    dateObj.setTime(dateObj.getTime() + 60 * 60 * 1000);\n\n  } else if (offsetBefore < offset) {\n    // Adjusting the date has moved it so that the time one hour prior is in Daylight Savings period. The adjusted date\n    // will have a struct whose hour is 1 greater than the original parts, so we need to re-adjust backward an hour.\n    // As in the previous case, if the shift was backward into DS, there is a 1 hour range of ambiguous structs, and we\n    // decide that such an ambiguous struct represents the first of the two matching Dates.\n    dateObj.setTime(dateObj.getTime() - 60 * 60 * 1000);\n  }\n\n  return dateObj;\n}\n"]}