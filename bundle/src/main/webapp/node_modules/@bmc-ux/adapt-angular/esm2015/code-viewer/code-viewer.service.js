import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { skip } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class CodeViewerService {
    constructor() {
        this._hasLines = new BehaviorSubject(true);
        this._darkTheme = new BehaviorSubject(true);
    }
    get hasLines() {
        return this._hasLines.asObservable().pipe(skip(1));
    }
    get hasLinesValue() {
        return this._hasLines.getValue();
    }
    setHasLines(val) {
        this._hasLines.next(val);
    }
    get darkTheme() {
        return this._darkTheme.asObservable().pipe(skip(1));
    }
    get darkThemeValue() {
        return this._darkTheme.getValue();
    }
    setDarkTheme(val) {
        this._darkTheme.next(val);
    }
}
CodeViewerService.ɵfac = function CodeViewerService_Factory(t) { return new (t || CodeViewerService)(); };
CodeViewerService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: CodeViewerService, factory: CodeViewerService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(CodeViewerService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();
//# sourceMappingURL=code-viewer.service.js.map