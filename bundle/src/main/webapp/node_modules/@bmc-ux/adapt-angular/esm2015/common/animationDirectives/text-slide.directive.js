import { Directive, ElementRef, Input, Renderer2 } from '@angular/core';
import { animate, AnimationBuilder, style } from '@angular/animations';
import * as i0 from "@angular/core";
import * as i1 from "@angular/animations";
export class AdaptTextSlideDirective {
    constructor(_elRef, _renderer, _animationBuilder) {
        this._elRef = _elRef;
        this._renderer = _renderer;
        this._animationBuilder = _animationBuilder;
        this._slideForward = true;
        this._animationsSet = {
            prevOut: [
                style({
                    transform: 'translate(0px, 0px)',
                    opacity: 1
                }),
                animate('100ms', style({
                    transform: 'translate(10px, 0px)',
                    opacity: 0
                }))
            ],
            prevIn: [
                style({
                    transform: 'translate(-10px, 0px)',
                    opacity: 0
                }),
                animate('100ms', style({
                    transform: 'translate(0px, 0px)',
                    opacity: 1
                }))
            ],
            nextOut: [
                style({
                    transform: 'translate(0px, 0px)',
                    opacity: 1
                }),
                animate('100ms', style({
                    transform: 'translate(-10px, 0px)',
                    opacity: 0
                }))
            ],
            nextIn: [
                style({
                    transform: 'translate(10px, 0px)',
                    opacity: 0
                }),
                animate('100ms', style({
                    transform: 'translate(0px, 0px)',
                    opacity: 1
                }))
            ]
        };
        this._animationPlayers = {
            nextOut: null,
            nextIn: null,
            prevOut: null,
            prevIn: null
        };
        this._animationReady = false;
        this._currentAnimation = {
            in: null,
            out: null
        };
    }
    ngAfterViewInit() {
        this._animationPlayers.prevOut = this._animationBuilder.build(this._animationsSet.prevOut)
            .create(this._elRef.nativeElement);
        this._animationPlayers.prevIn = this._animationBuilder.build(this._animationsSet.prevIn)
            .create(this._elRef.nativeElement);
        this._animationPlayers.nextOut = this._animationBuilder.build(this._animationsSet.nextOut)
            .create(this._elRef.nativeElement);
        this._animationPlayers.nextIn = this._animationBuilder.build(this._animationsSet.nextIn)
            .create(this._elRef.nativeElement);
        this._currentAnimation.in = this._animationPlayers.nextIn;
        this._currentAnimation.out = this._animationPlayers.nextOut;
        this._animationReady = true;
    }
    ngOnChanges(changes) {
        if (Object.prototype.hasOwnProperty.call(changes, 'slideForward')) {
            if (this._slideForward !== changes.slideForward.currentValue) {
                this._slideForward = changes.slideForward.currentValue;
                this._currentAnimation.in = this._slideForward ? this._animationPlayers.nextIn : this._animationPlayers.prevIn;
                this._currentAnimation.out = this._slideForward ? this._animationPlayers.nextOut : this._animationPlayers.prevOut;
            }
        }
        if (Object.prototype.hasOwnProperty.call(changes, 'adaptTextSlide')) {
            if (changes.adaptTextSlide.isFirstChange()) {
                this._innerTextRef = this._renderer.createText(changes.adaptTextSlide.currentValue);
                this._renderer.appendChild(this._elRef.nativeElement, this._innerTextRef);
                return;
            }
            if (!this._animationReady) {
                this._renderer.setProperty(this._innerTextRef, 'data', changes.adaptTextSlide.currentValue);
                return;
            }
            this._animationPlayers.prevOut.reset();
            this._animationPlayers.prevIn.reset();
            this._animationPlayers.nextOut.reset();
            this._animationPlayers.nextIn.reset();
            this._currentAnimation.out.onDone(() => {
                this._renderer.setProperty(this._innerTextRef, 'data', changes.adaptTextSlide.currentValue);
                this._currentAnimation.in.play();
            });
            this._currentAnimation.out.play();
        }
    }
}
AdaptTextSlideDirective.ɵfac = function AdaptTextSlideDirective_Factory(t) { return new (t || AdaptTextSlideDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.AnimationBuilder)); };
AdaptTextSlideDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: AdaptTextSlideDirective, selectors: [["", "adaptTextSlide", ""]], inputs: { adaptTextSlide: "adaptTextSlide", slideForward: "slideForward" }, features: [i0.ɵɵNgOnChangesFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptTextSlideDirective, [{
        type: Directive,
        args: [{
                selector: '[adaptTextSlide]'
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.AnimationBuilder }]; }, { adaptTextSlide: [{
            type: Input
        }], slideForward: [{
            type: Input
        }] }); })();
//# sourceMappingURL=text-slide.directive.js.map