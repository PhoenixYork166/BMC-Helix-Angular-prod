import { ChangeDetectorRef, Component, ElementRef, Input, Optional, Self, ViewChild } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularCustomEventType, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { AdaptRxFeedbackComponent, AdaptRxFormControlDirective } from '../form-control/index';
import { AdaptTranslateService } from '../../common/i18n/index';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../../common/i18n/index";
import * as i3 from "../../common/radar/adapt-radar";
import * as i4 from "@angular/common";
import * as i5 from "../form-control/rx-feedback/adapt-rx-feedback.component";
import * as i6 from "../form-control/rx-control-label/adapt-rx-label-tooltip.component";
const _c0 = ["inputRef"];
const _c1 = ["adaptRxFeedbackRef"];
function AdaptRxSwitchComponent_ng_container_7_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "span", 12);
    i0.ɵɵelementStart(2, "span", 13);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r3.requiredLabel);
} }
function AdaptRxSwitchComponent_ng_container_7_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 14);
    i0.ɵɵlistener("click", function AdaptRxSwitchComponent_ng_container_7_span_4_Template_span_click_0_listener($event) { return $event.preventDefault(); });
    i0.ɵɵelement(1, "span", 12);
    i0.ɵɵelement(2, "adapt-rx-control-label-tooltip", 15);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("tooltip", ctx_r4.tooltip)("testID", ctx_r4.testID);
} }
function AdaptRxSwitchComponent_ng_container_7_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 16);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r5.subLabel);
} }
function AdaptRxSwitchComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "span");
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(3, AdaptRxSwitchComponent_ng_container_7_ng_container_3_Template, 4, 1, "ng-container", 7);
    i0.ɵɵtemplate(4, AdaptRxSwitchComponent_ng_container_7_span_4_Template, 3, 2, "span", 10);
    i0.ɵɵtemplate(5, AdaptRxSwitchComponent_ng_container_7_div_5_Template, 2, 1, "div", 11);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r1.label);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.required && ctx_r1.requiredLabel);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.tooltip == null ? null : ctx_r1.tooltip.content);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.subLabel);
} }
export class AdaptRxSwitchComponent extends AdaptRxFormControlDirective {
    constructor(ngControl, _changeDetectorRef, ts, _adaptRadarService, _elem) {
        super(ngControl, ts, _adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptRxSwitch, _changeDetectorRef);
        this.ts = ts;
        this.controlName = 'switch';
        this.analyticsComponentName = AdaptRadarAngularCustomEventName;
        /**
         * Control size
         * @docs-default ''
         */
        this.size = '';
        /**
         * Enables 'before' label placement
         * @docs-default false
         */
        this.isLabelBefore = false;
    }
    /**
     * Toggle [checked] attribute.
     * @docs-default
     */
    get checked() {
        return this._checked;
    }
    set checked(value) {
        this._checked = Boolean(value);
        this._checked = value;
        this._onChange(this._checked);
        this.stateChanges$.next();
    }
    /**
     * Check if the control has UI error state
     */
    get hasDangerState() {
        return this.adaptRxFeedbackRef.hasUIErrorState;
    }
    ngOnInit() {
        super.ngOnInit();
        this._checkedStateOnInit = this.checked;
    }
    inputClickHandler(event) {
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxSwitch, {
            GroupName: this.adaptRadarGroupName,
            EventType: AdaptRadarAngularCustomEventType.Click,
            Label: this.label,
            Required: this.required,
            Disabled: this.disabled,
            ReadOnly: this.readonly,
            DefaultState: this._checkedStateOnInit ? 'on' : 'off',
            // The value is inverse because we get previous "checked" state here
            SwitchedState: this.checked ? 'off' : 'on'
        });
        this._onTouched();
        if (this.readonly) {
            event.preventDefault();
        }
    }
    inputChangeHandler() {
        this.checked = !this.checked;
    }
    blurHandler(event) {
        super.blurHandler(event);
        this._onTouched();
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    writeValue(value) {
        if (value !== undefined) {
            this._checked = Boolean(value);
        }
    }
    _focusNativeElement() {
        this.inputRef.nativeElement.focus();
    }
}
AdaptRxSwitchComponent.ɵfac = function AdaptRxSwitchComponent_Factory(t) { return new (t || AdaptRxSwitchComponent)(i0.ɵɵdirectiveInject(i1.NgControl, 10), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.AdaptTranslateService), i0.ɵɵdirectiveInject(i3.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptRxSwitchComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptRxSwitchComponent, selectors: [["adapt-rx-switch"]], viewQuery: function AdaptRxSwitchComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.adaptRxFeedbackRef = _t.first);
    } }, inputs: { value: "value", size: "size", isLabelBefore: "isLabelBefore", checked: "checked" }, features: [i0.ɵɵInheritDefinitionFeature], decls: 10, vars: 32, consts: [[1, "switcher"], [1, "switch", 3, "ngClass"], [1, "d-flex", "flex-row", "align-items-start"], ["type", "checkbox", "role", "checkbox", 3, "id", "required", "disabled", "readOnly", "checked", "autofocus", "click", "change", "focus", "blur"], ["inputRef", ""], [1, "switch__slider", "flex-shrink-0", "flex-grow-0"], [1, "switch__item", "flex-shrink-1", "flex-grow-1", 3, "ngClass"], [4, "ngIf"], [3, "ariaErrorMessage", "errors", "warningMessage", "controlTouched", "messageAppeared"], ["adaptRxFeedbackRef", ""], [3, "click", 4, "ngIf"], ["class", "text-secondary", 4, "ngIf"], [1, "letter-space"], [1, "form-control-required"], [3, "click"], [3, "tooltip", "testID"], [1, "text-secondary"]], template: function AdaptRxSwitchComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵelementStart(1, "div", 1);
        i0.ɵɵelementStart(2, "label", 2);
        i0.ɵɵelementStart(3, "input", 3, 4);
        i0.ɵɵlistener("click", function AdaptRxSwitchComponent_Template_input_click_3_listener($event) { return ctx.inputClickHandler($event); })("change", function AdaptRxSwitchComponent_Template_input_change_3_listener() { return ctx.inputChangeHandler(); })("focus", function AdaptRxSwitchComponent_Template_input_focus_3_listener($event) { return ctx.focusHandler($event); })("blur", function AdaptRxSwitchComponent_Template_input_blur_3_listener($event) { return ctx.blurHandler($event); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(5, "span", 5);
        i0.ɵɵelementStart(6, "div", 6);
        i0.ɵɵtemplate(7, AdaptRxSwitchComponent_ng_container_7_Template, 6, 4, "ng-container", 7);
        i0.ɵɵelementEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(8, "adapt-rx-feedback", 8, 9);
        i0.ɵɵlistener("messageAppeared", function AdaptRxSwitchComponent_Template_adapt_rx_feedback_messageAppeared_8_listener($event) { return ctx.handleMessageAppeared($event, ctx.analyticsComponentName.AdaptRxSwitch); });
        i0.ɵɵelementEnd();
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r2 = i0.ɵɵreference(9);
        i0.ɵɵclassProp("switcher__before", ctx.isLabelBefore)("has-danger", _r2.hasUIErrorState)("has-warning", ctx.warningMessage);
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("readonly", ctx.readonly);
        i0.ɵɵproperty("ngClass", ctx.size ? "switch-" + ctx.size : null);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("id", ctx.id)("required", ctx.required)("disabled", ctx.disabled)("readOnly", ctx.readonly)("checked", ctx.checked)("autofocus", ctx.autofocus);
        i0.ɵɵattribute("name", ctx.name)("tabindex", ctx.tabIndex)("data-testid", ctx.testID + "_input")("value", ctx.value)("aria-label", ctx.ariaLabel)("aria-labelledby", ctx.ariaLabelledby)("aria-describedby", ctx.ariaDescribedBy)("aria-checked", ctx.checked)("aria-required", ctx.required)("aria-invalid", ctx.hasDangerState)("aria-errormessage", ctx.ariaErrorMessage);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngClass", ctx.isLabelBefore ? "label-before" : "label-after");
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.label);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ariaErrorMessage", ctx.ariaErrorMessage)("errors", ctx.ngControl.errors)("warningMessage", ctx.warningMessage)("controlTouched", ctx.ngControl.touched);
    } }, directives: [i4.NgClass, i4.NgIf, i5.AdaptRxFeedbackComponent, i6.AdaptRxLabelTooltipComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxSwitchComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-rx-switch',
                templateUrl: './adapt-rx-switch.component.html',
                preserveWhitespaces: false
            }]
    }], function () { return [{ type: i1.NgControl, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }, { type: i0.ChangeDetectorRef }, { type: i2.AdaptTranslateService }, { type: i3.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { value: [{
            type: Input
        }], size: [{
            type: Input
        }], isLabelBefore: [{
            type: Input
        }], checked: [{
            type: Input
        }], inputRef: [{
            type: ViewChild,
            args: ['inputRef', { static: true }]
        }], adaptRxFeedbackRef: [{
            type: ViewChild,
            args: ['adaptRxFeedbackRef', { static: true }]
        }] }); })();
//# sourceMappingURL=adapt-rx-switch.component.js.map