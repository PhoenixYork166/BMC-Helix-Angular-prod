import { Component, ElementRef, Input, Renderer2, ViewChild } from '@angular/core';
import { Directionality } from '@angular/cdk/bidi';
import { BehaviorSubject } from 'rxjs';
import { AdaptDropdownDirective } from '../dropdown/index';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/bidi";
import * as i2 from "../dropdown/dropdown.component";
import * as i3 from "@angular/common";
const _c0 = ["adaptDropdownDirective"];
const _c1 = function (a0) { return { $implicit: a0 }; };
function AdaptSubnavDropdownComponent_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementContainer(2, 6);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r4 = ctx.$implicit;
    i0.ɵɵnextContext();
    const _r2 = i0.ɵɵreference(16);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", item_r4.isHidden ? item_r4.adaptSubnavItem : _r2)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c1, item_r4.isHidden));
} }
function AdaptSubnavDropdownComponent_ng_template_15_Template(rf, ctx) { }
const _c2 = function () { return ["bottom-right", "top-right", "auto"]; };
const _c3 = ["*"];
export class AdaptSubnavDropdownComponent {
    constructor(_elementRef, _renderer, _directionality) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._directionality = _directionality;
        /**
         * Default css class list for host element
         * @docs-default d-block
         */
        this.defaultCssClass = 'd-block';
        /**
         * Indicates that dropdown should be closed when selecting one of dropdown items (click) or pressing ESC.
         * @since v11.5.0
         * @docs-default true
         */
        this.autoClose = true;
        this.showDropdown$ = new BehaviorSubject(false);
    }
    get width() {
        return this.adaptDropdownElementRef ? this.adaptDropdownElementRef.nativeElement.offsetWidth : 0;
    }
    ngOnInit() {
        this._renderer.addClass(this._elementRef.nativeElement, 'position-relative');
        this.defaultCssClass.split(' ').forEach(cssClass => {
            this._renderer.addClass(this.adaptDropdownElementRef.nativeElement, cssClass);
        });
        this.showDropdown$
            .subscribe(show => {
            if (show) {
                this._renderer.removeClass(this.adaptDropdownElementRef.nativeElement, 'invisible');
                this._renderer.removeClass(this.adaptDropdownElementRef.nativeElement, 'position-absolute');
                this._renderer.removeStyle(this.adaptDropdownElementRef.nativeElement, 'left');
                this._renderer.removeStyle(this.adaptDropdownElementRef.nativeElement, 'right');
            }
            else {
                this._renderer.addClass(this.adaptDropdownElementRef.nativeElement, 'invisible');
                this._renderer.addClass(this.adaptDropdownElementRef.nativeElement, 'position-absolute');
                this._renderer
                    .setStyle(this.adaptDropdownElementRef.nativeElement, this._directionality.value === 'rtl' ? 'left' : 'right', 0);
                this.adaptDropdownDirective.close();
            }
        });
    }
}
AdaptSubnavDropdownComponent.ɵfac = function AdaptSubnavDropdownComponent_Factory(t) { return new (t || AdaptSubnavDropdownComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.Directionality)); };
AdaptSubnavDropdownComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptSubnavDropdownComponent, selectors: [["adapt-subnav-dropdown"], ["", "adaptSubnavDropdown", ""]], viewQuery: function AdaptSubnavDropdownComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7, AdaptDropdownDirective);
        i0.ɵɵviewQuery(_c0, 7, ElementRef);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.adaptDropdownDirective = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.adaptDropdownElementRef = _t.first);
    } }, inputs: { adaptSubnavDropdown: "adaptSubnavDropdown", defaultCssClass: "defaultCssClass", autoClose: "autoClose" }, ngContentSelectors: _c3, decls: 18, vars: 8, consts: [["adaptDropdown", "", 3, "adaptRadarDisableEventSending", "placement", "appendToBody", "holdFocusInMenu", "restoreFocusAfterClose", "autoClose"], ["adaptDropdownDirective", ""], ["adaptDropdownAnchor", "", 3, "click"], ["adaptDropdownMenu", "", 1, "dropdown-menu"], [4, "ngFor", "ngForOf"], ["emptyTmpl", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function AdaptSubnavDropdownComponent_Template(rf, ctx) { if (rf & 1) {
        const _r5 = i0.ɵɵgetCurrentView();
        i0.ɵɵprojectionDef();
        i0.ɵɵtext(0, "\n    ");
        i0.ɵɵelementStart(1, "div", 0, 1);
        i0.ɵɵtext(3, "\n      ");
        i0.ɵɵelementStart(4, "div", 2);
        i0.ɵɵlistener("click", function AdaptSubnavDropdownComponent_Template_div_click_4_listener($event) { i0.ɵɵrestoreView(_r5); const _r0 = i0.ɵɵreference(2); return _r0.toggle($event); });
        i0.ɵɵtext(5, "\n        ");
        i0.ɵɵprojection(6);
        i0.ɵɵtext(7, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(8, "\n      ");
        i0.ɵɵelementStart(9, "div", 3);
        i0.ɵɵtext(10, "\n        ");
        i0.ɵɵtemplate(11, AdaptSubnavDropdownComponent_ng_container_11_Template, 4, 4, "ng-container", 4);
        i0.ɵɵtext(12, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(13, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(14, "\n\n    ");
        i0.ɵɵtemplate(15, AdaptSubnavDropdownComponent_ng_template_15_Template, 0, 0, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(17, "\n  ");
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("adaptRadarDisableEventSending", true)("placement", i0.ɵɵpureFunction0(7, _c2))("appendToBody", true)("holdFocusInMenu", true)("restoreFocusAfterClose", true)("autoClose", ctx.autoClose);
        i0.ɵɵadvance(10);
        i0.ɵɵproperty("ngForOf", ctx.subnavItemsList);
    } }, directives: [i2.AdaptDropdownDirective, i2.AdaptDropdownAnchorDirective, i2.AdaptDropdownMenuDirective, i3.NgForOf, i3.NgTemplateOutlet], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptSubnavDropdownComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-subnav-dropdown, [adaptSubnavDropdown]',
                template: `
    <div adaptDropdown
         [adaptRadarDisableEventSending]="true"
         #adaptDropdownDirective
         [placement]="['bottom-right', 'top-right', 'auto']"
         [appendToBody]="true"
         [holdFocusInMenu]="true"
         [restoreFocusAfterClose]="true"
         [autoClose]="autoClose">
      <div adaptDropdownAnchor (click)="adaptDropdownDirective.toggle($event)">
        <ng-content></ng-content>
      </div>
      <div adaptDropdownMenu class="dropdown-menu">
        <ng-container *ngFor="let item of subnavItemsList">
          <ng-container [ngTemplateOutlet]="item.isHidden ? item.adaptSubnavItem : emptyTmpl"
                        [ngTemplateOutletContext]="{$implicit: item.isHidden}"></ng-container>
        </ng-container>
      </div>
    </div>

    <ng-template #emptyTmpl></ng-template>
  `
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.Directionality }]; }, { adaptSubnavDropdown: [{
            type: Input
        }], defaultCssClass: [{
            type: Input
        }], autoClose: [{
            type: Input
        }], adaptDropdownDirective: [{
            type: ViewChild,
            args: ['adaptDropdownDirective', { static: true, read: AdaptDropdownDirective }]
        }], adaptDropdownElementRef: [{
            type: ViewChild,
            args: ['adaptDropdownDirective', { static: true, read: ElementRef }]
        }] }); })();
//# sourceMappingURL=subnav-dropdown.component.js.map