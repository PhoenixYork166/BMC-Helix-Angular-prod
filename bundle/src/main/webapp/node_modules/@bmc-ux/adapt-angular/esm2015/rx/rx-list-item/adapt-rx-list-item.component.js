import { Component, ElementRef, EventEmitter, HostBinding, Input, NgZone, Output, TemplateRef, ViewChild } from '@angular/core';
import { ENTER, ESCAPE } from '@angular/cdk/keycodes';
import { animate, state, style, transition, trigger, useAnimation } from '@angular/animations';
import { take, takeUntil } from 'rxjs/operators';
import { ReplaySubject } from 'rxjs';
import { clone } from 'lodash-es';
import { getEventKeyCode } from '../../common/key-codes';
import { ANIMATION_DURATION, ANIMATION_NAME, ANIMATION_TIMING_FUNCTION } from '../../common/animation';
import { AdaptCustomActionsAlignEnum } from '../../custom-actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../../highlight/highlight";
import * as i3 from "../rx-textfield/adapt-rx-textfield.component";
import * as i4 from "@angular/forms";
import * as i5 from "../../custom-actions/adapt-custom-actions.component";
import * as i6 from "../../icon/icon.component";
import * as i7 from "../../tooltip/tooltip.directive";
const _c0 = ["listItemContainer"];
const _c1 = ["listItemDnDSymbol"];
function AdaptRxListItemComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelement(1, "adapt-highlight", 14);
    i0.ɵɵtext(2, "\n");
} if (rf & 2) {
    const item_r11 = ctx.$implicit;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("result", ctx_r1.itemFormatter(item_r11))("term", ctx_r1.searchQuery);
} }
function AdaptRxListItemComponent_div_6_div_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 21);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("@editErrorAnimation", undefined);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r12.editError);
} }
function AdaptRxListItemComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r14 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 15);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "div", 16);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementStart(4, "adapt-rx-textfield", 17);
    i0.ɵɵlistener("ngModelChange", function AdaptRxListItemComponent_div_6_Template_adapt_rx_textfield_ngModelChange_4_listener($event) { i0.ɵɵrestoreView(_r14); const ctx_r13 = i0.ɵɵnextContext(); return ctx_r13.inputControlValue = $event; })("ngModelChange", function AdaptRxListItemComponent_div_6_Template_adapt_rx_textfield_ngModelChange_4_listener() { i0.ɵɵrestoreView(_r14); const ctx_r15 = i0.ɵɵnextContext(); return ctx_r15.listItemValueChange(); })("onBlur", function AdaptRxListItemComponent_div_6_Template_adapt_rx_textfield_onBlur_4_listener() { i0.ɵɵrestoreView(_r14); const ctx_r16 = i0.ɵɵnextContext(); return ctx_r16.exitEditMode(); })("keydown", function AdaptRxListItemComponent_div_6_Template_adapt_rx_textfield_keydown_4_listener($event) { i0.ɵɵrestoreView(_r14); const ctx_r17 = i0.ɵɵnextContext(); return ctx_r17.onInputKeyDown($event); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵelementStart(6, "div", 18);
    i0.ɵɵlistener("mousedown", function AdaptRxListItemComponent_div_6_Template_div_mousedown_6_listener($event) { return $event.preventDefault(); });
    i0.ɵɵtext(7, "\n        ");
    i0.ɵɵelement(8, "adapt-custom-actions", 19);
    i0.ɵɵtext(9, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n    ");
    i0.ɵɵtemplate(12, AdaptRxListItemComponent_div_6_div_12_Template, 2, 2, "div", 20);
    i0.ɵɵtext(13, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("@editModeAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("focused", ctx_r3.editMode)("border-danger", ctx_r3.hasError);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngModel", ctx_r3.inputControlValue)("adaptRadarDisableEventSending", true)("autofocus", true)("maxlength", ctx_r3.maxLength);
    i0.ɵɵattribute("data-testid", ctx_r3.testID + "_input");
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("alignedTo", ctx_r3.customActionsAlignedTo)("adaptRadarDisableEventSending", true)("testID", ctx_r3.testID)("actions", ctx_r3.currentEditActions);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r3.hasError);
} }
function AdaptRxListItemComponent_adapt_icon_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 22);
} if (rf & 2) {
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", "dots");
} }
function AdaptRxListItemComponent_button_16_Template(rf, ctx) { if (rf & 1) {
    const _r20 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 23);
    i0.ɵɵlistener("click", function AdaptRxListItemComponent_button_16_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r20); const ctx_r19 = i0.ɵɵnextContext(); return ctx_r19.isExpanded = !ctx_r19.isExpanded; });
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelement(2, "adapt-icon", 24);
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵattribute("data-testid", ctx_r6.testID + "_expanded");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("name", "angle_right")("adaptRadarDisableEventSending", true)("@expandedAnimation", ctx_r6.isExpanded);
} }
function AdaptRxListItemComponent_div_20_Template(rf, ctx) { if (rf & 1) {
    const _r22 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 25);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "input", 26);
    i0.ɵɵlistener("ngModelChange", function AdaptRxListItemComponent_div_20_Template_input_ngModelChange_2_listener($event) { i0.ɵɵrestoreView(_r22); const ctx_r21 = i0.ɵɵnextContext(); return ctx_r21.item.selected = $event; })("ngModelChange", function AdaptRxListItemComponent_div_20_Template_input_ngModelChange_2_listener() { i0.ɵɵrestoreView(_r22); const ctx_r23 = i0.ɵɵnextContext(); return ctx_r23.handleCheckedChange(ctx_r23.item); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelement(4, "div", 27);
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("readonly", ctx_r7.readonly);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngModel", ctx_r7.item.selected)("disabled", ctx_r7.disabled);
} }
function AdaptRxListItemComponent_div_22_Template(rf, ctx) { if (rf & 1) {
    const _r25 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 28);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "input", 29);
    i0.ɵɵlistener("click", function AdaptRxListItemComponent_div_22_Template_input_click_2_listener() { i0.ɵɵrestoreView(_r25); const ctx_r24 = i0.ɵɵnextContext(); return ctx_r24.handleCheckedChange(ctx_r24.item); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelement(4, "div", 30);
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("checked", ctx_r8.item.selected)("disabled", ctx_r8.disabled || ctx_r8.readonly);
} }
function AdaptRxListItemComponent_ng_template_24_Template(rf, ctx) { }
function AdaptRxListItemComponent_div_27_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r29 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 34);
    i0.ɵɵlistener("click", function AdaptRxListItemComponent_div_27_button_2_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r29); const ctx_r28 = i0.ɵɵnextContext(2); return ctx_r28.enterEditMode(); });
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "span", 35);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r26 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("placement", "top")("adaptRadarDisableEventSending", true)("adaptTooltip", ctx_r26.texts.editTooltip);
    i0.ɵɵattribute("data-testid", ctx_r26.testID + "_edit")("aria-labelledby", ctx_r26.id + "_editText " + ctx_r26.id + "_name");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("id", ctx_r26.id + "_editText");
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r26.texts.edit);
} }
function AdaptRxListItemComponent_div_27_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r31 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 36);
    i0.ɵɵlistener("click", function AdaptRxListItemComponent_div_27_button_4_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r31); const ctx_r30 = i0.ɵɵnextContext(2); return ctx_r30.deleteItem(); });
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "span", 35);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r27 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("placement", "top")("adaptRadarDisableEventSending", true)("adaptTooltip", ctx_r27.texts.deleteTooltip);
    i0.ɵɵattribute("data-testid", ctx_r27.testID + "_delete")("aria-labelledby", ctx_r27.id + "_deleteText " + ctx_r27.id + "_name");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("id", ctx_r27.id + "_deleteText");
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r27.texts.delete);
} }
function AdaptRxListItemComponent_div_27_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 31);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptRxListItemComponent_div_27_button_2_Template, 5, 7, "button", 32);
    i0.ɵɵtext(3, "\n\n      ");
    i0.ɵɵtemplate(4, AdaptRxListItemComponent_div_27_button_4_Template, 5, 7, "button", 33);
    i0.ɵɵtext(5, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r10.hideEdit && !ctx_r10.item.hideEdit);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r10.hideDelete && !ctx_r10.item.hideDelete);
} }
const _c2 = function (a0) { return { $implicit: a0 }; };
let nextUniqueId = 0;
export class AdaptRxListItemComponent {
    constructor(_element, _ngZone) {
        this._element = _element;
        this._ngZone = _ngZone;
        this.editMode = false;
        this.customActionsAlignedTo = AdaptCustomActionsAlignEnum.Right;
        this.hideControls = false;
        this.hideEdit = false;
        this.hideDelete = false;
        this.isExpanded = true;
        /* eslint-disable @angular-eslint/no-output-on-prefix */
        /**
         * Fires on switching to the component edit mode
         */
        this.onItemEdit = new EventEmitter();
        /* eslint-enable @angular-eslint/no-output-on-prefix */
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onItemDelete = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onItemUpdate = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onListItemValueChange = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onKeyUp = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onKeyDown = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onExitEditMode = new EventEmitter();
        /**
         * Emit when the item selection state changed
         * @since 12.27.0, 14.5.0
         */
        this.selectionStateChange = new EventEmitter();
        // drag-and-drop
        this.dragStart = new EventEmitter();
        this.dragEnter = new EventEmitter();
        this.dragOver = new EventEmitter();
        this.dragLeave = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.drop = new EventEmitter();
        this.dragEnd = new EventEmitter();
        this.id = `rx-list-item-${++nextUniqueId}`;
        this._destroyed$ = new ReplaySubject(1);
        this._dragStartEventHandler = this.onDragStart.bind(this);
        this._dragOverEventHandler = this.onDragOver.bind(this);
        this._dragEnterEventHandler = this.onDragEnter.bind(this);
        this._dragLeaveEventHandler = this.onDragLeave.bind(this);
        this._dropEventHandler = this.onDrop.bind(this);
        this._dragEndEventHandler = this.onDragEnd.bind(this);
    }
    ngAfterViewInit() {
        const el = this._element.nativeElement;
        this._ngZone.runOutsideAngular(() => {
            el.addEventListener('dragstart', this._dragStartEventHandler);
            el.addEventListener('dragenter', this._dragEnterEventHandler);
            el.addEventListener('dragover', this._dragOverEventHandler);
            el.addEventListener('dragleave', this._dragLeaveEventHandler);
            el.addEventListener('drop', this._dropEventHandler);
            el.addEventListener('dragend', this._dragEndEventHandler);
        });
    }
    ngOnDestroy() {
        this._destroyed$.next(true);
        this._destroyed$.complete();
        const el = this._element.nativeElement;
        el.removeEventListener('dragstart', this._dragOverEventHandler);
        el.removeEventListener('dragover', this._dragOverEventHandler);
        el.removeEventListener('dragenter', this._dragEnterEventHandler);
        el.removeEventListener('dragleave', this._dragLeaveEventHandler);
        el.removeEventListener('drop', this._dropEventHandler);
        el.removeEventListener('dragend', this._dragEndEventHandler);
    }
    get hasError() {
        return (this.itemFormatter(this.item) !== this.inputControlValue) && !this.allowSaving && Boolean(this.editError);
    }
    get currentEditActions() {
        return [
            {
                name: this.texts.cancel,
                visible: true,
                onClick: this.exitEditMode.bind(this)
            },
            {
                name: this.texts.save,
                visible: this.allowSaving,
                onClick: this.updateItem.bind(this)
            }
        ];
    }
    onDragStart(event) {
        this.dragStart.emit({ event, item: this });
    }
    onDragEnter(event) {
        this.dragEnter.emit({ event, item: this });
    }
    onDragOver(event) {
        this.dragOver.emit({ event, item: this });
    }
    onDragLeave(event) {
        this.dragLeave.emit({ event, item: this });
    }
    onDrop(event) {
        this.drop.emit(event);
    }
    onDragEnd() {
        this.dragEnd.emit();
    }
    exitEditMode() {
        this.editMode = false;
        this.onExitEditMode.emit();
    }
    enterEditMode() {
        this.editMode = true;
        this.inputControlValue = this.itemFormatter(this.item);
        this.onItemEdit.emit(this.item);
    }
    deleteItem() {
        this.onItemDelete.emit(this.item);
    }
    updateItem() {
        const oldValue = clone(this.item);
        if (this.itemSetterProp) {
            this.item[this.itemSetterProp] = this.inputControlValue;
        }
        else {
            this.item = this.inputControlValue;
        }
        this.onItemUpdate.emit([oldValue, this.item]);
        this.exitEditMode();
    }
    listItemValueChange() {
        this.onListItemValueChange.emit([this.itemFormatter(this.item), this.inputControlValue]);
    }
    onInputKeyDown(event) {
        const keyCode = getEventKeyCode(event);
        if (keyCode === ESCAPE || keyCode === ENTER) {
            event.preventDefault();
            switch (keyCode) {
                case ESCAPE: {
                    this.exitEditMode();
                    break;
                }
                case ENTER: {
                    if (this.allowSaving) {
                        this.updateItem();
                    }
                    break;
                }
            }
        }
    }
    onUp(e) {
        if (this.disabled || this.readonly) {
            return;
        }
        this._onKeyboardEvent(e);
        this.onKeyUp.emit(e);
    }
    onDown(e) {
        if (this.disabled || this.readonly) {
            return;
        }
        this._onKeyboardEvent(e);
        this.onKeyDown.emit(e);
    }
    onSpace(e, item) {
        if (this.disabled || this.readonly || !this.selectionMode) {
            return;
        }
        this._onKeyboardEvent(e);
        this.handleCheckedChange(item);
    }
    handleCheckedChange(item) {
        if (this.disabled || this.readonly || item.disabled) {
            return;
        }
        this.selectionStateChange.emit(this.item);
    }
    _onKeyboardEvent(e) {
        e.preventDefault();
        this._ngZone.onStable
            .pipe(takeUntil(this._destroyed$), take(1))
            .subscribe(() => {
            e.target.focus();
        });
    }
}
AdaptRxListItemComponent.ɵfac = function AdaptRxListItemComponent_Factory(t) { return new (t || AdaptRxListItemComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone)); };
AdaptRxListItemComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptRxListItemComponent, selectors: [["adapt-rx-list-item"]], viewQuery: function AdaptRxListItemComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listItemContainer = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listItemDnDSymbol = _t.first);
    } }, hostVars: 1, hostBindings: function AdaptRxListItemComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("id", ctx.id);
    } }, inputs: { item: "item", searchQuery: "searchQuery", texts: "texts", allowSaving: "allowSaving", maxLength: "maxLength", editError: "editError", hideControls: "hideControls", disabled: "disabled", readonly: "readonly", hideEdit: "hideEdit", hideDelete: "hideDelete", itemFormatter: "itemFormatter", itemContentTemplate: "itemContentTemplate", itemSetterProp: "itemSetterProp", isExpanded: "isExpanded", testID: "testID", dragDisabled: "dragDisabled", selectionMode: "selectionMode", id: "id" }, outputs: { onItemEdit: "onItemEdit", onItemDelete: "onItemDelete", onItemUpdate: "onItemUpdate", onListItemValueChange: "onListItemValueChange", onKeyUp: "onKeyUp", onKeyDown: "onKeyDown", onExitEditMode: "onExitEditMode", selectionStateChange: "selectionStateChange", dragStart: "dragStart", dragEnter: "dragEnter", dragOver: "dragOver", dragLeave: "dragLeave", drop: "drop", dragEnd: "dragEnd" }, decls: 31, vars: 21, consts: [["defaultItemContentTemplateRef", ""], [1, "adapt-rx-list-item"], ["listItemContainer", ""], ["class", "adapt-rx-list-item-edit-block", 4, "ngIf"], [1, "adapt-rx-list-item-view-block"], ["tabindex", "0", 1, "btn", "btn-link", "m-0", "py-0", "px-1", "border-0", "keyboard-focusable", 3, "keydown.arrowUp", "keydown.arrowDown"], ["listItemDnDSymbol", ""], ["class", "adapt-rx-list-drag", 3, "adaptRadarDisableEventSending", "name", 4, "ngIf"], ["type", "button", "class", "btn btn-link p-0 m-0 text-default", 3, "click", 4, "ngIf"], ["tabindex", "0", 1, "adapt-rx-list-item__name", "keyboard-focusable", 3, "id", "keydown.arrowUp", "keydown.arrowDown", "keydown.space"], ["class", "checkbox m-0", 3, "readonly", 4, "ngIf"], ["class", "radio m-0", 4, "ngIf"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["class", "adapt-rx-list-item__controls", 4, "ngIf"], [3, "result", "term"], [1, "adapt-rx-list-item-edit-block"], [1, "edit-wrp"], [3, "ngModel", "adaptRadarDisableEventSending", "autofocus", "maxlength", "ngModelChange", "onBlur", "keydown"], [1, "adapt-rx-list-item__controls", 3, "mousedown"], [3, "alignedTo", "adaptRadarDisableEventSending", "testID", "actions"], ["class", "edit-err", 4, "ngIf"], [1, "edit-err"], [1, "adapt-rx-list-drag", 3, "adaptRadarDisableEventSending", "name"], ["type", "button", 1, "btn", "btn-link", "p-0", "m-0", "text-default", 3, "click"], [1, "d-block", 3, "name", "adaptRadarDisableEventSending"], [1, "checkbox", "m-0"], ["type", "checkbox", "role", "checkbox", "tabindex", "-1", 1, "checkbox__input", 3, "ngModel", "disabled", "ngModelChange"], [1, "checkbox__item"], [1, "radio", "m-0"], ["type", "radio", "role", "radio", "tabindex", "-1", 3, "checked", "disabled", "click"], [1, "radio__item"], [1, "adapt-rx-list-item__controls"], ["type", "button", "class", "d-icon-pencil_adapt btn btn-link rx-list-update p-0 m-0 m-end-2", 3, "placement", "adaptRadarDisableEventSending", "adaptTooltip", "click", 4, "ngIf"], ["type", "button", "class", "d-icon-trash_adapt btn btn-link rx-list-remove p-0 m-0", 3, "placement", "adaptRadarDisableEventSending", "adaptTooltip", "click", 4, "ngIf"], ["type", "button", 1, "d-icon-pencil_adapt", "btn", "btn-link", "rx-list-update", "p-0", "m-0", "m-end-2", 3, "placement", "adaptRadarDisableEventSending", "adaptTooltip", "click"], [1, "sr-only", 3, "id"], ["type", "button", 1, "d-icon-trash_adapt", "btn", "btn-link", "rx-list-remove", "p-0", "m-0", 3, "placement", "adaptRadarDisableEventSending", "adaptTooltip", "click"]], template: function AdaptRxListItemComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, AdaptRxListItemComponent_ng_template_0_Template, 3, 2, "ng-template", null, 0, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(2, "\n\n");
        i0.ɵɵelementStart(3, "div", 1, 2);
        i0.ɵɵtext(5, "\n\n  ");
        i0.ɵɵtemplate(6, AdaptRxListItemComponent_div_6_Template, 14, 15, "div", 3);
        i0.ɵɵtext(7, "\n\n  ");
        i0.ɵɵelementStart(8, "div", 4);
        i0.ɵɵtext(9, "\n    ");
        i0.ɵɵelementStart(10, "span", 5, 6);
        i0.ɵɵlistener("keydown.arrowUp", function AdaptRxListItemComponent_Template_span_keydown_arrowUp_10_listener($event) { return ctx.onUp($event); })("keydown.arrowDown", function AdaptRxListItemComponent_Template_span_keydown_arrowDown_10_listener($event) { return ctx.onDown($event); });
        i0.ɵɵtext(12, "\n      ");
        i0.ɵɵtemplate(13, AdaptRxListItemComponent_adapt_icon_13_Template, 1, 2, "adapt-icon", 7);
        i0.ɵɵtext(14, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(15, "\n\n    ");
        i0.ɵɵtemplate(16, AdaptRxListItemComponent_button_16_Template, 4, 4, "button", 8);
        i0.ɵɵtext(17, "\n\n    ");
        i0.ɵɵelementStart(18, "span", 9);
        i0.ɵɵlistener("keydown.arrowUp", function AdaptRxListItemComponent_Template_span_keydown_arrowUp_18_listener($event) { return ctx.onUp($event); })("keydown.arrowDown", function AdaptRxListItemComponent_Template_span_keydown_arrowDown_18_listener($event) { return ctx.onDown($event); })("keydown.space", function AdaptRxListItemComponent_Template_span_keydown_space_18_listener($event) { return ctx.onSpace($event, ctx.item); });
        i0.ɵɵtext(19, "\n      ");
        i0.ɵɵtemplate(20, AdaptRxListItemComponent_div_20_Template, 6, 4, "div", 10);
        i0.ɵɵtext(21, "\n\n      ");
        i0.ɵɵtemplate(22, AdaptRxListItemComponent_div_22_Template, 6, 2, "div", 11);
        i0.ɵɵtext(23, "\n\n      ");
        i0.ɵɵtemplate(24, AdaptRxListItemComponent_ng_template_24_Template, 0, 0, "ng-template", 12);
        i0.ɵɵtext(25, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(26, "\n\n    ");
        i0.ɵɵtemplate(27, AdaptRxListItemComponent_div_27_Template, 6, 2, "div", 13);
        i0.ɵɵtext(28, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(29, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(30, "\n");
    } if (rf & 2) {
        const _r0 = i0.ɵɵreference(1);
        i0.ɵɵadvance(3);
        i0.ɵɵclassProp("disabled", ctx.disabled)("readonly", ctx.readonly)("hover-disabled", ctx.hideControls || ctx.editMode);
        i0.ɵɵattribute("draggable", !(ctx.dragDisabled || ctx.disabled || ctx.editMode));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.editMode);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("@hideAnimation", !ctx.editMode);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("data-testid", ctx.testID + "_drag");
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", !ctx.readonly && !ctx.searchQuery);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.item.children && ctx.item.children.length);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("id", ctx.id + "_name");
        i0.ɵɵattribute("data-testid", ctx.testID + "_name");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.selectionMode === "multiple");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.selectionMode === "single");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngTemplateOutlet", ctx.itemContentTemplate || _r0)("ngTemplateOutletContext", i0.ɵɵpureFunction1(19, _c2, ctx.item));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", !ctx.disabled && !ctx.readonly);
    } }, directives: [i1.NgIf, i1.NgTemplateOutlet, i2.AdaptHighlightDirective, i3.AdaptRxTextfieldComponent, i4.NgControlStatus, i4.NgModel, i4.MaxLengthValidator, i5.AdaptCustomActionsComponent, i6.AdaptIconComponent, i4.CheckboxControlValueAccessor, i7.AdaptTooltipDirective], encapsulation: 2, data: { animation: [
            trigger('editErrorAnimation', [
                transition('void => *', [
                    useAnimation(ANIMATION_NAME.height)
                ]),
                transition('* => void', [
                    useAnimation(ANIMATION_NAME.height, {
                        params: {
                            from: '*',
                            to: '0'
                        }
                    })
                ])
            ]),
            trigger('expandedAnimation', [
                state('0', style({ transform: 'rotate(0deg)' })),
                state('1', style({ transform: 'rotate(90deg)' })),
                transition('0 => 1', [
                    useAnimation(ANIMATION_NAME.rotate, {
                        params: {
                            from: '0',
                            to: '90'
                        }
                    })
                ]),
                transition('1 => 0', [
                    useAnimation(ANIMATION_NAME.rotate, {
                        params: {
                            from: '90',
                            to: '0'
                        }
                    })
                ])
            ]),
            trigger('editModeAnimation', [
                state('void', style({ opacity: 0 })),
                transition('void<=>*', animate(ANIMATION_DURATION.xtraFast))
            ]),
            trigger('hideAnimation', [
                state('1', style({
                    opacity: 1,
                    zIndex: '*',
                })),
                state('0', style({
                    opacity: 0,
                    zIndex: -1,
                })),
                transition('0 => 1', [
                    style({ opacity: 0, zIndex: -1 }),
                    animate(`${ANIMATION_DURATION.xtraFast} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ opacity: 1, zIndex: '*' }))
                ]),
                transition('1 => 0', [
                    style({ opacity: 1, zIndex: 0 }),
                    animate(`${ANIMATION_DURATION.xtraFast} ${ANIMATION_TIMING_FUNCTION.base.transitionOut}`, style({ opacity: 0, zIndex: -1 }))
                ])
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxListItemComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-rx-list-item',
                templateUrl: './adapt-rx-list-item.component.html',
                animations: [
                    trigger('editErrorAnimation', [
                        transition('void => *', [
                            useAnimation(ANIMATION_NAME.height)
                        ]),
                        transition('* => void', [
                            useAnimation(ANIMATION_NAME.height, {
                                params: {
                                    from: '*',
                                    to: '0'
                                }
                            })
                        ])
                    ]),
                    trigger('expandedAnimation', [
                        state('0', style({ transform: 'rotate(0deg)' })),
                        state('1', style({ transform: 'rotate(90deg)' })),
                        transition('0 => 1', [
                            useAnimation(ANIMATION_NAME.rotate, {
                                params: {
                                    from: '0',
                                    to: '90'
                                }
                            })
                        ]),
                        transition('1 => 0', [
                            useAnimation(ANIMATION_NAME.rotate, {
                                params: {
                                    from: '90',
                                    to: '0'
                                }
                            })
                        ])
                    ]),
                    trigger('editModeAnimation', [
                        state('void', style({ opacity: 0 })),
                        transition('void<=>*', animate(ANIMATION_DURATION.xtraFast))
                    ]),
                    trigger('hideAnimation', [
                        state('1', style({
                            opacity: 1,
                            zIndex: '*',
                        })),
                        state('0', style({
                            opacity: 0,
                            zIndex: -1,
                        })),
                        transition('0 => 1', [
                            style({ opacity: 0, zIndex: -1 }),
                            animate(`${ANIMATION_DURATION.xtraFast} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ opacity: 1, zIndex: '*' }))
                        ]),
                        transition('1 => 0', [
                            style({ opacity: 1, zIndex: 0 }),
                            animate(`${ANIMATION_DURATION.xtraFast} ${ANIMATION_TIMING_FUNCTION.base.transitionOut}`, style({ opacity: 0, zIndex: -1 }))
                        ])
                    ])
                ]
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, { item: [{
            type: Input
        }], searchQuery: [{
            type: Input
        }], texts: [{
            type: Input
        }], allowSaving: [{
            type: Input
        }], maxLength: [{
            type: Input
        }], editError: [{
            type: Input
        }], hideControls: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], hideEdit: [{
            type: Input
        }], hideDelete: [{
            type: Input
        }], itemFormatter: [{
            type: Input
        }], itemContentTemplate: [{
            type: Input
        }], itemSetterProp: [{
            type: Input
        }], isExpanded: [{
            type: Input
        }], testID: [{
            type: Input
        }], dragDisabled: [{
            type: Input
        }], selectionMode: [{
            type: Input
        }], onItemEdit: [{
            type: Output
        }], onItemDelete: [{
            type: Output
        }], onItemUpdate: [{
            type: Output
        }], onListItemValueChange: [{
            type: Output
        }], onKeyUp: [{
            type: Output
        }], onKeyDown: [{
            type: Output
        }], onExitEditMode: [{
            type: Output
        }], selectionStateChange: [{
            type: Output
        }], dragStart: [{
            type: Output
        }], dragEnter: [{
            type: Output
        }], dragOver: [{
            type: Output
        }], dragLeave: [{
            type: Output
        }], drop: [{
            type: Output
        }], dragEnd: [{
            type: Output
        }], id: [{
            type: HostBinding,
            args: ['attr.id']
        }, {
            type: Input
        }], listItemContainer: [{
            type: ViewChild,
            args: ['listItemContainer', { static: true }]
        }], listItemDnDSymbol: [{
            type: ViewChild,
            args: ['listItemDnDSymbol', { static: false }]
        }] }); })();
//# sourceMappingURL=adapt-rx-list-item.component.js.map