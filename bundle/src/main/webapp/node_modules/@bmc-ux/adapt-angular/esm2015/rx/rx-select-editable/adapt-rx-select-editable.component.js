import { ChangeDetectorRef, Component, ElementRef, Input, NgZone, Optional, Self, ViewChild } from '@angular/core';
import { NgControl } from '@angular/forms';
import { DOWN_ARROW, ENTER, ESCAPE, UP_ARROW } from '@angular/cdk/keycodes';
import { asyncScheduler, Subject } from 'rxjs';
import { take, takeUntil, throttleTime } from 'rxjs/operators';
import { isNil } from 'lodash-es';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { AdaptDropdownDirective } from '../../dropdown/index';
import { AdaptRxFeedbackComponent, AdaptRxFormControlDirective } from '../form-control/index';
import { getEventKeyCode } from '../../common/key-codes';
import { scrollToActive } from '../../common/scroll-to-active';
import { AdaptTranslateService } from '../../common/i18n/index';
import { ResizeService } from '../../common/resize/resize.service';
import { SafeCdr } from '../../common/safe-cdr';
import { AdaptRxSelectEditableConfigService } from './adapt-rx-select-editable-config.service';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../../common/resize/resize.service";
import * as i3 from "../../common/device-detection.service";
import * as i4 from "./adapt-rx-select-editable-config.service";
import * as i5 from "../../common/i18n/index";
import * as i6 from "../../common/radar/adapt-radar";
import * as i7 from "../form-control/rx-control-label/adapt-rx-control-label.component";
import * as i8 from "../../dropdown/dropdown.component";
import * as i9 from "@angular/common";
import * as i10 from "../form-control/rx-feedback/adapt-rx-feedback.component";
const _c0 = ["popupRef"];
const _c1 = ["selectButtonRef"];
const _c2 = ["customInputRef"];
const _c3 = ["adaptRxFeedbackRef"];
const _c4 = ["popupMenuEl"];
const _c5 = ["dropdownAnchorWrapperEl"];
function AdaptRxSelectEditableComponent_button_10_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 15, 16);
    i0.ɵɵlistener("click", function AdaptRxSelectEditableComponent_button_10_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); const _r0 = i0.ɵɵreference(5); return !(ctx_r10.readonly || ctx_r10.disabled) ? _r0.toggle($event) : null; })("focus", function AdaptRxSelectEditableComponent_button_10_Template_button_focus_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r12 = i0.ɵɵnextContext(); return ctx_r12.focusHandler($event); })("blur", function AdaptRxSelectEditableComponent_button_10_Template_button_blur_0_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r13 = i0.ɵɵnextContext(); return ctx_r13.blurHandler($event); });
    i0.ɵɵtext(2, "\n        ");
    i0.ɵɵelementStart(3, "div", 17);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    const _r0 = i0.ɵɵreference(5);
    i0.ɵɵclassProp("btn-sm", ctx_r2.size === "sm")("btn-lg", ctx_r2.size === "lg");
    i0.ɵɵproperty("ngClass", ctx_r2.readonly ? ctx_r2.disabledStyleForReadonlyState ? "dropdown-toggle disabled" : "border-0 bg-transparent" : "dropdown-toggle")("id", ctx_r2.id)("name", ctx_r2.name)("disabled", ctx_r2.disabled)("autofocus", ctx_r2.autofocus);
    i0.ɵɵattribute("tabindex", ctx_r2.tabIndex)("aria-disabled", ctx_r2.disabled || ctx_r2.readonly)("aria-describedby", ctx_r2.label ? ctx_r2.labelId : undefined)("data-testid", ctx_r2.testID + "_button")("aria-label", ctx_r2.ariaLabel)("aria-required", ctx_r2.required)("aria-labelledby", ctx_r2.ariaLabelledby)("aria-activedescendant", ctx_r2.activeDescendant)("aria-controls", _r0.isOpen() ? ctx_r2.popupId : null)("aria-expanded", _r0.isOpen())("aria-invalid", ctx_r2.hasDangerState)("aria-errormessage", ctx_r2.ariaErrorMessage);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r2.model || ctx_r2.placeholder || ctx_r2.defaultTexts.placeholder);
} }
function AdaptRxSelectEditableComponent_input_12_Template(rf, ctx) { if (rf & 1) {
    const _r16 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "input", 18, 19);
    i0.ɵɵlistener("ngModelChange", function AdaptRxSelectEditableComponent_input_12_Template_input_ngModelChange_0_listener($event) { i0.ɵɵrestoreView(_r16); const ctx_r15 = i0.ɵɵnextContext(); return ctx_r15.customOptionModel = $event; })("blur", function AdaptRxSelectEditableComponent_input_12_Template_input_blur_0_listener() { i0.ɵɵrestoreView(_r16); const ctx_r17 = i0.ɵɵnextContext(); return ctx_r17.exitEditMode(); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("form-control-sm", ctx_r3.size === "sm")("form-control-lg", ctx_r3.size === "lg");
    i0.ɵɵproperty("ngModel", ctx_r3.customOptionModel);
    i0.ɵɵattribute("data-testid", ctx_r3.testID + "_input");
} }
function AdaptRxSelectEditableComponent_ng_container_22_Template(rf, ctx) { if (rf & 1) {
    const _r21 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "button", 20);
    i0.ɵɵlistener("click", function AdaptRxSelectEditableComponent_ng_container_22_Template_button_click_2_listener() { const restoredCtx = i0.ɵɵrestoreView(_r21); const item_r18 = restoredCtx.$implicit; const ctx_r20 = i0.ɵɵnextContext(); return ctx_r20.optionClickHandler(item_r18); })("mouseover", function AdaptRxSelectEditableComponent_ng_container_22_Template_button_mouseover_2_listener() { const restoredCtx = i0.ɵɵrestoreView(_r21); const index_r19 = restoredCtx.index; const ctx_r22 = i0.ɵɵnextContext(); return ctx_r22.optionMouseoverHandler(index_r19 + 1); });
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r18 = ctx.$implicit;
    const index_r19 = ctx.index;
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("id", ctx_r5.getOptionId(index_r19 + 1))("ngClass", ctx_r5.getOptionClassList(item_r18, index_r19));
    i0.ɵɵattribute("aria-selected", item_r18 === ctx_r5.model)("data-testid", ctx_r5.testID + "_item-" + index_r19);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(item_r18);
} }
function AdaptRxSelectEditableComponent_ng_template_33_Template(rf, ctx) { if (rf & 1) {
    const _r24 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "button", 20);
    i0.ɵɵlistener("click", function AdaptRxSelectEditableComponent_ng_template_33_Template_button_click_1_listener() { i0.ɵɵrestoreView(_r24); const ctx_r23 = i0.ɵɵnextContext(); return ctx_r23.enterEditMode(); })("mouseover", function AdaptRxSelectEditableComponent_ng_template_33_Template_button_mouseover_1_listener() { i0.ɵɵrestoreView(_r24); const ctx_r25 = i0.ɵɵnextContext(); return ctx_r25.optionMouseoverHandler(0); });
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n");
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("id", ctx_r8.getOptionId(0))("ngClass", ctx_r8.getCustomOptionClassList());
    i0.ɵɵattribute("data-testid", ctx_r8.testID + "_more")("aria-selected", ctx_r8.model ? ctx_r8.model === ctx_r8.customOptionModel : undefined);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n    ", ctx_r8.customOptionModel || ctx_r8.customOptionTitle || ctx_r8.defaultTexts.customOptionTitle, "\n  ");
} }
export class AdaptRxSelectEditableComponent extends AdaptRxFormControlDirective {
    constructor(ngControl, _ngZone, _resizeService, deviceDetector, changeDetectorRef, selectEditableConfigService, ts, adaptRadarService, _elem) {
        super(ngControl, ts, adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptRxSelectEditable, changeDetectorRef);
        this._ngZone = _ngZone;
        this._resizeService = _resizeService;
        this.ts = ts;
        this.controlName = 'select-editable';
        this.ACTIVE_OPTION_CLASS = 'active';
        this.FOCUS_OPTION_CLASS = 'text-active';
        this.editMode = false;
        this.defaultTexts = {};
        /**
         * Options for the select-editable list
         * @docs-default []
         */
        this.options = [];
        /**
         * The function to check if the entered custom value already exists in the options array.
         * If returns true, the option from list will be applied to model
         * @docs-default (customValue: string, optionsValue: string) => customValue === optionsValue
         * @since v11.6.0
         */
        this.customValueMatcher = this._defaultCustomValueMatcher;
        this._resize$ = new Subject();
        this.size = selectEditableConfigService.size;
        this.customOptionOnTop = selectEditableConfigService.customOptionOnTop;
        this.menuMaxHeight = selectEditableConfigService.menuMaxHeight;
        this.mobileView = selectEditableConfigService.mobileView;
        this.placement = selectEditableConfigService.placement;
        this.appendToBody = selectEditableConfigService.appendToBody;
        this.disabledStyleForReadonlyState = selectEditableConfigService.disabledStyleForReadonlyState;
        const translation = ts.getCurrentLanguage();
        this.defaultTexts = {
            placeholder: translation['adapt.select.defaultTitle'],
            customOptionTitle: translation['adapt.dropdownEditable.more']
        };
        this._isDesktop = !(deviceDetector.isMobile() || deviceDetector.deviceTablet());
    }
    ngOnInit() {
        super.ngOnInit();
        this.popupId = this.id + '_popup';
        this.labelId = this.id + '_label';
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this._isDesktop) {
            this._resize$
                .pipe(takeUntil(this.destroy$), throttleTime(100, asyncScheduler, { trailing: true }))
                .subscribe(() => {
                this._checkPopupOnResize();
                SafeCdr.detectChanges(this._changeDetectorRef);
            });
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this._resizeService.removeResizeEventListener(this.dropdownAnchorWrapperEl.nativeElement);
    }
    /**
     * Check if the control has UI error state
     */
    get hasDangerState() {
        return this.adaptRxFeedbackRef.hasUIErrorState;
    }
    getOptionClassList(item, index) {
        return (item === this.model ? this.ACTIVE_OPTION_CLASS : '') +
            (this.activeDescendant === this.getOptionId(index + 1) ? ' ' + this.FOCUS_OPTION_CLASS : '');
    }
    getCustomOptionClassList() {
        return (this.customOptionModel && this.customOptionModel === this.model ? this.ACTIVE_OPTION_CLASS : '') +
            (this.activeDescendant === this.getOptionId(0) ? ' ' + this.FOCUS_OPTION_CLASS : (!this.customOptionModel ? ' text-secondary' : ''));
    }
    enterEditMode() {
        this.popupRef.close();
        this.editMode = true;
        this._ngZone.onStable
            .pipe(takeUntil(this.destroy$), take(1))
            .subscribe(() => {
            if (this.customInputRef) {
                this.customInputRef.nativeElement.focus();
            }
        });
    }
    exitEditMode(preventChange = false) {
        this._onTouched();
        if (!preventChange && this.customOptionModel) {
            const existingOption = this.options.find(el => this.customValueMatcher(this.customOptionModel, el));
            if (existingOption) {
                this.model = existingOption;
                this.customOptionModel = '';
            }
            else {
                this.model = this.customOptionModel;
            }
            this._onChange(this.model);
        }
        else {
            this.customOptionModel = '';
        }
        this.editMode = false;
        this._ngZone.onStable
            .pipe(takeUntil(this.destroy$), take(1))
            .subscribe(() => {
            if (this.selectButtonRef) {
                this.selectButtonRef.nativeElement.focus();
            }
        });
    }
    popupOpenChangeHandler(isOpen) {
        if (isOpen) {
            if (this._isDesktop) {
                this._resizeService.addResizeEventListener(this.dropdownAnchorWrapperEl.nativeElement, this._resize$.next.bind(this._resize$));
                this._checkPopupOnResize();
            }
            if (!isNil(this.model)) {
                const isModelValueFromOptionsList = this.options.find((option) => option === this.model);
                if (isNil(isModelValueFromOptionsList)) {
                    this.customOptionModel = this.model;
                }
            }
            this._ngZone.onStable
                .pipe(takeUntil(this.destroy$), take(1))
                .subscribe(() => {
                this._changeActiveOption();
                this.popupMenuEl.nativeElement.focus();
            });
        }
        else {
            if (this._isDesktop) {
                this._resizeService.removeResizeEventListener(this.dropdownAnchorWrapperEl.nativeElement);
            }
            this._activeDescendantIndex = null;
            this.activeDescendant = null;
            this._ngZone.onStable
                .pipe(takeUntil(this.destroy$), take(1))
                .subscribe(() => {
                if (!this.editMode) {
                    this._onTouched();
                }
            });
        }
    }
    optionClickHandler(item) {
        this.model = item;
        this.customOptionModel = null;
        this._onChange(this.model);
        this.popupRef.close();
    }
    optionMouseoverHandler(index) {
        this._activeDescendantIndex = index;
        this.activeDescendant = this.getOptionId(this._activeDescendantIndex);
    }
    selectButtonKeydownHandler(event) {
        switch (getEventKeyCode(event)) {
            case DOWN_ARROW: {
                if (this.popupRef.isOpen()) {
                    event.preventDefault();
                    this._changeActiveOption(1);
                }
                break;
            }
            case UP_ARROW: {
                if (this.popupRef.isOpen()) {
                    event.preventDefault();
                    this._changeActiveOption(-1);
                }
                break;
            }
            case ENTER: {
                if (this.editMode) {
                    event.preventDefault();
                    this.exitEditMode();
                }
                else {
                    if (this._activeDescendantIndex === 0) {
                        this.enterEditMode();
                    }
                    else if (this._activeDescendantIndex > 0) {
                        this.model = this.options[this._activeDescendantIndex - 1];
                        this.customOptionModel = null;
                        this._onChange(this.model);
                        this.popupRef.close();
                    }
                }
                break;
            }
            case ESCAPE: {
                if (this.editMode) {
                    event.preventDefault();
                    this.exitEditMode(true);
                }
                break;
            }
        }
    }
    getOptionId(index) {
        return this.id + '_option-' + index;
    }
    writeValue(value) {
        this.model = value;
    }
    /**
     * Implementation from the super class
     */
    _focusNativeElement() {
        if (this.selectButtonRef) {
            this.selectButtonRef.nativeElement.focus();
        }
    }
    /**
     * Change active option:
     * - next if changeIndexStep > 0
     * - prev if changeIndexStep < 0
     */
    _changeActiveOption(changeIndexStep) {
        if (!changeIndexStep) {
            const index = this.options.indexOf(this.model);
            if (index > -1) {
                this._activeDescendantIndex = index + 1;
            }
            else if (this.model === this.customOptionModel) {
                this._activeDescendantIndex = 0;
            }
        }
        else {
            if (isNil(this._activeDescendantIndex)) {
                if (changeIndexStep > 0) {
                    this._activeDescendantIndex = this.customOptionOnTop ? 0 : 1;
                }
                else {
                    this._activeDescendantIndex = this.customOptionOnTop ? this.options.length : 0;
                }
            }
            else {
                this._activeDescendantIndex += changeIndexStep;
                if (this._activeDescendantIndex < 0) {
                    this._activeDescendantIndex = this.options.length;
                }
                else if (this._activeDescendantIndex > this.options.length) {
                    this._activeDescendantIndex = 0;
                }
            }
        }
        this.activeDescendant = this.getOptionId(this._activeDescendantIndex);
        this._scrollToFocusOption();
    }
    /**
     * Scroll options list to focused option
     */
    _scrollToFocusOption() {
        this._ngZone.onStable.pipe(takeUntil(this.destroy$), take(1)).subscribe(() => {
            const activeItem = document.querySelector(`#${this.popupId} .${this.FOCUS_OPTION_CLASS}`);
            scrollToActive(activeItem);
        });
    }
    _checkPopupOnResize() {
        this.menuWidth = `${this.dropdownAnchorWrapperEl.nativeElement.offsetWidth}px`;
    }
    _defaultCustomValueMatcher(customValue, optionsValue) {
        return customValue === optionsValue;
    }
}
AdaptRxSelectEditableComponent.ɵfac = function AdaptRxSelectEditableComponent_Factory(t) { return new (t || AdaptRxSelectEditableComponent)(i0.ɵɵdirectiveInject(i1.NgControl, 10), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.ResizeService), i0.ɵɵdirectiveInject(i3.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i4.AdaptRxSelectEditableConfigService), i0.ɵɵdirectiveInject(i5.AdaptTranslateService), i0.ɵɵdirectiveInject(i6.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptRxSelectEditableComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptRxSelectEditableComponent, selectors: [["adapt-rx-select-editable"]], viewQuery: function AdaptRxSelectEditableComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 5);
        i0.ɵɵviewQuery(_c2, 5);
        i0.ɵɵviewQuery(_c3, 7);
        i0.ɵɵviewQuery(_c4, 7);
        i0.ɵɵviewQuery(_c5, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popupRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectButtonRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customInputRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.adaptRxFeedbackRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popupMenuEl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdownAnchorWrapperEl = _t.first);
    } }, inputs: { options: "options", placeholder: "placeholder", customOptionTitle: "customOptionTitle", customOptionOnTop: "customOptionOnTop", size: "size", menuMaxHeight: "menuMaxHeight", placement: "placement", appendToBody: "appendToBody", mobileView: "mobileView", disabledStyleForReadonlyState: "disabledStyleForReadonlyState", popupClass: "popupClass", customValueMatcher: "customValueMatcher" }, features: [i0.ɵɵInheritDefinitionFeature], decls: 36, vars: 34, consts: [[3, "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"], ["adaptDropdown", "", 3, "adaptRadarDisableEventSending", "mobileView", "holdFocusInMenu", "restoreFocusAfterClose", "autoFocusFirst", "placement", "appendToBody", "onOpen", "onClose"], ["popupRef", "adaptDropdown"], ["adaptDropdownAnchor", "", 3, "keydown"], ["dropdownAnchorWrapperEl", ""], ["type", "button", "role", "button", "class", "btn btn-secondary btn-block align-start", 3, "btn-sm", "btn-lg", "ngClass", "id", "name", "disabled", "autofocus", "click", "focus", "blur", 4, "ngIf"], ["type", "text", "class", "form-control", 3, "form-control-sm", "form-control-lg", "ngModel", "ngModelChange", "blur", 4, "ngIf"], ["adaptDropdownMenu", "", 1, "dropdown-menu"], ["role", "listbox", "tabindex", "0", 1, "rx-select__options", 3, "id", "ngClass", "keydown"], ["popupMenuEl", ""], [3, "ngTemplateOutlet"], [4, "ngFor", "ngForOf"], [3, "ariaErrorMessage", "errors", "warningMessage", "controlTouched"], ["adaptRxFeedbackRef", ""], ["customListItemTemplate", ""], ["type", "button", "role", "button", 1, "btn", "btn-secondary", "btn-block", "align-start", 3, "ngClass", "id", "name", "disabled", "autofocus", "click", "focus", "blur"], ["selectButtonRef", ""], [1, "rx-select__search-button-title"], ["type", "text", 1, "form-control", 3, "ngModel", "ngModelChange", "blur"], ["customInputRef", ""], ["type", "button", "role", "option", "tabindex", "-1", 1, "dropdown-item", "rx-select-editable__item", "text-url-break-out", 3, "id", "ngClass", "click", "mouseover"]], template: function AdaptRxSelectEditableComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div");
        i0.ɵɵtext(1, "\n  ");
        i0.ɵɵelement(2, "adapt-rx-control-label", 0);
        i0.ɵɵtext(3, "\n\n  ");
        i0.ɵɵelementStart(4, "div", 1, 2);
        i0.ɵɵlistener("onOpen", function AdaptRxSelectEditableComponent_Template_div_onOpen_4_listener() { return ctx.popupOpenChangeHandler(true); })("onClose", function AdaptRxSelectEditableComponent_Template_div_onClose_4_listener() { return ctx.popupOpenChangeHandler(false); });
        i0.ɵɵtext(6, "\n    ");
        i0.ɵɵelementStart(7, "div", 3, 4);
        i0.ɵɵlistener("keydown", function AdaptRxSelectEditableComponent_Template_div_keydown_7_listener($event) { return ctx.selectButtonKeydownHandler($event); });
        i0.ɵɵtext(9, "\n      ");
        i0.ɵɵtemplate(10, AdaptRxSelectEditableComponent_button_10_Template, 6, 22, "button", 5);
        i0.ɵɵtext(11, "\n      ");
        i0.ɵɵtemplate(12, AdaptRxSelectEditableComponent_input_12_Template, 2, 6, "input", 6);
        i0.ɵɵtext(13, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(14, "\n    ");
        i0.ɵɵelementStart(15, "div", 7);
        i0.ɵɵtext(16, "\n      ");
        i0.ɵɵelementStart(17, "div", 8, 9);
        i0.ɵɵlistener("keydown", function AdaptRxSelectEditableComponent_Template_div_keydown_17_listener($event) { return ctx.selectButtonKeydownHandler($event); });
        i0.ɵɵtext(19, "\n        ");
        i0.ɵɵelementContainer(20, 10);
        i0.ɵɵtext(21, "\n\n        ");
        i0.ɵɵtemplate(22, AdaptRxSelectEditableComponent_ng_container_22_Template, 5, 5, "ng-container", 11);
        i0.ɵɵtext(23, "\n\n        ");
        i0.ɵɵelementContainer(24, 10);
        i0.ɵɵtext(25, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(26, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(27, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(28, "\n\n  ");
        i0.ɵɵelement(29, "adapt-rx-feedback", 12, 13);
        i0.ɵɵtext(31, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(32, "\n\n");
        i0.ɵɵtemplate(33, AdaptRxSelectEditableComponent_ng_template_33_Template, 4, 5, "ng-template", null, 14, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(35, "\n");
    } if (rf & 2) {
        const _r6 = i0.ɵɵreference(30);
        const _r7 = i0.ɵɵreference(34);
        i0.ɵɵclassProp("has-danger", _r6.hasUIErrorState)("has-warning", ctx.warningMessage);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("id", ctx.labelId)("label", ctx.label)("subLabel", ctx.subLabel)("requiredLabel", ctx.requiredLabel)("showRequiredLabel", ctx.required)("tooltip", ctx.tooltip)("testID", ctx.testID);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("adaptRadarDisableEventSending", true)("mobileView", ctx.mobileView)("holdFocusInMenu", false)("restoreFocusAfterClose", true)("autoFocusFirst", false)("placement", ctx.placement)("appendToBody", ctx.appendToBody);
        i0.ɵɵadvance(6);
        i0.ɵɵproperty("ngIf", !ctx.editMode);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.editMode);
        i0.ɵɵadvance(5);
        i0.ɵɵstyleProp("max-height", ctx.menuMaxHeight)("width", ctx.menuWidth);
        i0.ɵɵproperty("id", ctx.popupId)("ngClass", ctx.popupClass);
        i0.ɵɵattribute("aria-activedescendant", ctx.activeDescendant);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngTemplateOutlet", ctx.customOptionOnTop ? _r7 : null);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx.options);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngTemplateOutlet", !ctx.customOptionOnTop ? _r7 : null);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ariaErrorMessage", ctx.ariaErrorMessage)("errors", ctx.ngControl.errors)("warningMessage", ctx.warningMessage)("controlTouched", ctx.ngControl.touched);
    } }, directives: [i7.AdaptRxControlLabelComponent, i8.AdaptDropdownDirective, i8.AdaptDropdownAnchorDirective, i9.NgIf, i8.AdaptDropdownMenuDirective, i9.NgClass, i9.NgTemplateOutlet, i9.NgForOf, i10.AdaptRxFeedbackComponent, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgModel], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxSelectEditableComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-rx-select-editable',
                templateUrl: './adapt-rx-select-editable.component.html'
            }]
    }], function () { return [{ type: i1.NgControl, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }, { type: i0.NgZone }, { type: i2.ResizeService }, { type: i3.AdaptDeviceDetectionService }, { type: i0.ChangeDetectorRef }, { type: i4.AdaptRxSelectEditableConfigService }, { type: i5.AdaptTranslateService }, { type: i6.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { options: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], customOptionTitle: [{
            type: Input
        }], customOptionOnTop: [{
            type: Input
        }], size: [{
            type: Input
        }], menuMaxHeight: [{
            type: Input
        }], placement: [{
            type: Input
        }], appendToBody: [{
            type: Input
        }], mobileView: [{
            type: Input
        }], disabledStyleForReadonlyState: [{
            type: Input
        }], popupClass: [{
            type: Input
        }], customValueMatcher: [{
            type: Input
        }], popupRef: [{
            type: ViewChild,
            args: ['popupRef', { static: true }]
        }], selectButtonRef: [{
            type: ViewChild,
            args: ['selectButtonRef', { static: false }]
        }], customInputRef: [{
            type: ViewChild,
            args: ['customInputRef', { static: false }]
        }], adaptRxFeedbackRef: [{
            type: ViewChild,
            args: ['adaptRxFeedbackRef', { static: true }]
        }], popupMenuEl: [{
            type: ViewChild,
            args: ['popupMenuEl', { static: true }]
        }], dropdownAnchorWrapperEl: [{
            type: ViewChild,
            args: ['dropdownAnchorWrapperEl', { static: true }]
        }] }); })();
//# sourceMappingURL=adapt-rx-select-editable.component.js.map