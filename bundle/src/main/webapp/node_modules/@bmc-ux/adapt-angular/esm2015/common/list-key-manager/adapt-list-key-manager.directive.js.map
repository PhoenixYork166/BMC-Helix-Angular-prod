{"version":3,"file":"adapt-list-key-manager.directive.js","sourceRoot":"","sources":["../../../../../../libs/adapt-angular/src/common/list-key-manager/adapt-list-key-manager.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAgB,eAAe,EAAE,SAAS,EAAE,YAAY,EAAa,MAAM,EAAE,SAAS,EAAC,MAAM,eAAe,CAAC;AACpH,OAAO,EAAC,cAAc,EAAC,MAAM,mBAAmB,CAAC;AAEjD,OAAO,EAAC,gCAAgC,EAAC,MAAM,yCAAyC,CAAC;;AAMzF,MAAM,OAAO,4BAA4B;IAJzC;QAKqB,0BAAqB,GACtC,IAAI,YAAY,EAAoD,CAAC;KAqBxE;IAXC,eAAe;QACb,IAAI,CAAC,WAAW,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC;aAC9C,QAAQ,CAAC,KAAK,CAAC;aACf,cAAc,EAAE,CAAC;QAEpB,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACpD,CAAC;IAED,WAAW;QACT,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;;wGAtBU,4BAA4B;+EAA5B,4BAA4B;oCAQtB,gCAAgC;;;;;uFARtC,4BAA4B;cAJxC,SAAS;eAAC;gBACT,QAAQ,EAAE,uBAAuB;gBACjC,QAAQ,EAAE,qBAAqB;aAChC;gBAEoB,qBAAqB;kBAAvC,MAAM;YAOiE,KAAK;kBAA5E,eAAe;mBAAC,gCAAgC,EAAE,EAAC,WAAW,EAAE,IAAI,EAAC","sourcesContent":["import {AfterViewInit, ContentChildren, Directive, EventEmitter, OnDestroy, Output, QueryList} from '@angular/core';\nimport {ListKeyManager} from '@angular/cdk/a11y';\n\nimport {AdaptListKeyManagerItemDirective} from './adapt-list-key-manager-item.directive';\n\n@Directive({\n  selector: '[adaptListKeyManager]',\n  exportAs: 'adaptListKeyManager'\n})\nexport class AdaptListKeyManagerDirective implements AfterViewInit, OnDestroy {\n  @Output() readonly keyManagerStateChange: EventEmitter<ListKeyManager<AdaptListKeyManagerItemDirective>> =\n    new EventEmitter<ListKeyManager<AdaptListKeyManagerItemDirective>>();\n\n  /*\n  Access to items inside the element\n  Angular issue: https://github.com/angular/angular/issues/34768\n   */\n  @ContentChildren(AdaptListKeyManagerItemDirective, {descendants: true}) items: QueryList<AdaptListKeyManagerItemDirective>;\n\n  private _keyManager: ListKeyManager<AdaptListKeyManagerItemDirective>;\n\n  ngAfterViewInit(): void {\n    this._keyManager = new ListKeyManager(this.items)\n      .withWrap(false)\n      .withHomeAndEnd();\n\n    this.keyManagerStateChange.emit(this._keyManager);\n  }\n\n  ngOnDestroy(): void {\n    this.keyManagerStateChange.emit(null);\n  }\n}\n"]}