import { FileSize } from './consts/uploader.consts';
export function retrieveFileSize(value) {
    let sizeNum = parseFloat(value);
    const suffix = value.split(sizeNum.toString()).map((item) => item.trim()).reverse()[0];
    const sizes = Object.keys(FileSize);
    if (sizes.indexOf(suffix) !== -1) {
        sizeNum = sizeNum * FileSize[suffix];
    }
    return sizeNum;
}
export function formatFileSize(v) {
    const value = parseInt(v, 10);
    if (value / FileSize.KB > 1) {
        if (value / FileSize.MB > 1) {
            if (value / FileSize.GB > 1) {
                return (value / FileSize.GB).toFixed(2) + ' GB';
            }
            else {
                return (value / FileSize.MB).toFixed(2) + ' MB';
            }
        }
        else {
            return (value / FileSize.KB).toFixed(2) + ' KB';
        }
    }
    else {
        return value + ' B';
    }
}
export function getImageFileFromDataURI(dataUri, filename = 'image') {
    const [mime, data] = (dataUri || '').trim().split(',');
    const match = mime.match(/^data:(?<type>image\/(?<extension>\w+));/);
    if (!match || !data) {
        return null;
    }
    const { type, extension } = match.groups;
    const byteString = atob(data);
    let index = byteString.length;
    const u8arr = new Uint8Array(index);
    while (index--) {
        u8arr[index] = byteString.charCodeAt(index);
    }
    return new File([u8arr], `${filename}.${extension}`, { type });
}
//# sourceMappingURL=uploader.js.map