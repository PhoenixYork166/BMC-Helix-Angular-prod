{"version":3,"file":"send.file.service.js","sourceRoot":"","sources":["../../../../../../../libs/adapt-angular/src/common/uploader/services/send.file.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AACzC,OAAO,EAAC,UAAU,EAAE,WAAW,EAAC,MAAM,sBAAsB,CAAC;;;AAkB7D,MAAM,OAAO,eAAe;IAG1B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAFpC,QAAG,GAAW,eAAe,CAAC;IAG9B,CAAC;IAED,kCAAkC;IAClC,iEAAiE;IACjE,QAAQ,CAAC,WAAwB,EAAE,mBAA4B,IAAI,EAAE,GAAY;QAC/E,MAAM,OAAO,GAAG,IAAI,WAAW,CAAC;YAC9B,cAAc,EAAE,qBAAqB;YACrC,QAAQ,EAAE,KAAK;SAChB,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,IAAI,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC;QAE3D,OAAO,gBAAgB;YACrB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE;gBAC1C,OAAO;gBACP,cAAc,EAAE,IAAI;gBACpB,OAAO,EAAE,QAAQ;gBACjB,YAAY,EAAE,MAAM;aACrB,CAAC;YACF,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;IACnD,CAAC;IAED,kCAAkC;IAClC,iEAAiE;IACjE,UAAU,CAAC,IAAS,EAAE,GAAY;QAChC,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;IAED,kCAAkC;IAClC,+BAA+B;IAC/B,gBAAgB,CAAC,QAAa,EAAE,IAAa;IAC7C,CAAC;IAED,kCAAkC;IAClC,iEAAiE;IACjE,uBAAuB,CAAC,MAAW;QACjC,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QAEhC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAEtE,OAAO,QAAQ,CAAC;IAClB,CAAC;;8EA7CU,eAAe;qEAAf,eAAe,WAAf,eAAe;uFAAf,eAAe;cAD3B,UAAU","sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {FileObj, RequestBody} from '../models/uploader.models';\n\nexport interface SendFileUtils {\n  url: string;\n\n  // TODO: Refactor this if possible\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  sendFile?(requestBody: RequestBody, uploadAsOneChunk: boolean, url?: string): Observable<any>;\n\n  deleteFile?(file: any, url?: string): Observable<any>;\n\n  responseCallback?(response?: any, file?: FileObj): void;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n}\n\n@Injectable()\nexport class SendFileService implements SendFileUtils {\n  url: string = '/default-path';\n\n  constructor(private http: HttpClient) {\n  }\n\n  // TODO: Refactor this if possible\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  sendFile(requestBody: RequestBody, uploadAsOneChunk: boolean = true, url?: string): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'multipart/form-data',\n      'Accept': '*/*'\n    });\n\n    const formData = this.convertObjectToFormData(requestBody);\n\n    return uploadAsOneChunk\n      ? this.http.post(url || this.url, formData, {\n        headers,\n        reportProgress: true,\n        observe: 'events',\n        responseType: 'json'\n      })\n      : this.http.post(url || this.url, requestBody);\n  }\n\n  // TODO: Refactor this if possible\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  deleteFile(file: any, url?: string): Observable<any> {\n    return this.http.delete(url || this.url, file);\n  }\n\n  // TODO: Refactor this if possible\n  /* eslint-disable-next-line  */\n  responseCallback(response: any, file: FileObj): void {\n  }\n\n  // TODO: Refactor this if possible\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  convertObjectToFormData(object: any): FormData {\n    const formData = new FormData();\n\n    Object.keys(object).forEach(key => formData.append(key, object[key]));\n\n    return formData;\n  }\n}\n"]}