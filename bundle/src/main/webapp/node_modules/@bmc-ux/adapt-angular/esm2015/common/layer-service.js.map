{"version":3,"file":"layer-service.js","sourceRoot":"","sources":["../../../../../libs/adapt-angular/src/common/layer-service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAY,MAAM,eAAe,CAAC;AACpD,OAAO,EAAC,YAAY,EAAC,MAAM,2BAA2B,CAAC;AACvD,OAAO,EAAC,MAAM,EAAC,MAAM,uBAAuB,CAAC;AAC7C,OAAO,EAAC,eAAe,EAAC,MAAM,aAAa,CAAC;;;AAU5C,MAAM,OAAO,YAAY;IAIvB,YAAY,YAA0B;QAH9B,gBAAW,GAAsB,EAAE,CAAC;QAI1C,IAAI,CAAC,kBAAkB;YACrB,YAAY,CAAC,sBAAsB,CAAC,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACpF,sCAAsC;IACxC,CAAC;IAED,WAAW;QACT,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IAED,kCAAkC;IAClC,iEAAiE;IACjE,YAAY,CAAC,iBAAsB,EAAE,OAAuC;QAC1E,IAAI,CAAC,eAAe,CAAC,iBAAiB,CAAC,CAAC;QACxC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,EAAC,OAAO,EAAE,iBAAiB,EAAC,CAAC,CAAC;IACtD,CAAC;IAED,kCAAkC;IAClC,iEAAiE;IACjE,eAAe,CAAC,iBAAsB;QACpC,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,iBAAiB,KAAK,iBAAiB,CAAC,CAAC;QAE7F,IAAI,GAAG,IAAI,CAAC,EAAE;YACZ,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;SACjC;IACH,CAAC;IAED,eAAe;QACb,IAAI,KAAK,CAAC;QAEV,IAAI;YACF,0BAA0B;YAC1B,KAAK,GAAG,IAAI,aAAa,CAAC,OAAO,EAAE;gBACjC,GAAG,EAAE,QAAQ;aACd,CAAC,CAAC;SACJ;QAAC,OAAO,CAAC,EAAE;YACV,KAAK;YACL,6DAA6D;YAC7D,MAAM,YAAY,GAAG,QAAQ,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;SAC5D;QAED,IAAI,KAAK,EAAE;YACT,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBAC9B,wDAAwD;gBACxD,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,EAAE;oBAC9C,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;iBACrB;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IAEO,OAAO,CAAC,KAAoB;QAClC,IAAI,eAAe,CAAC,KAAK,CAAC,KAAK,MAAM,EAAE;YACrC,OAAO;SACR;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAE/D,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;SACzB;IAGH,CAAC;;wEAnEU,YAAY;kEAAZ,YAAY,WAAZ,YAAY,mBADA,MAAM;uFAClB,YAAY;cADxB,UAAU;eAAC,EAAC,UAAU,EAAE,MAAM,EAAC","sourcesContent":["import {Injectable, OnDestroy} from '@angular/core';\nimport {EventManager} from '@angular/platform-browser';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {getEventKeyCode} from './key-codes';\n\nexport interface OpenedItemModel {\n  onClose: (event: KeyboardEvent) => void;\n  // TODO: Refactor this if possible\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  componentInstance: any;\n}\n\n@Injectable({providedIn: 'root'})\nexport class LayerService implements OnDestroy {\n  private openedItems: OpenedItemModel[] = [];\n  private _keyupListenerFunc: Function;\n\n  constructor(eventManager: EventManager) {\n    this._keyupListenerFunc =\n      eventManager.addGlobalEventListener('document', 'keyup', this.onKeyup.bind(this));\n    // can also add on outside click logic\n  }\n\n  ngOnDestroy(): void {\n    this._keyupListenerFunc();\n  }\n\n  // TODO: Refactor this if possible\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  addComponent(componentInstance: any, onClose: (event: KeyboardEvent) => void): void {\n    this.removeComponent(componentInstance);\n    this.openedItems.push({onClose, componentInstance});\n  }\n\n  // TODO: Refactor this if possible\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  removeComponent(componentInstance: any): void {\n    const ind = this.openedItems.findIndex(item => item.componentInstance === componentInstance);\n\n    if (ind >= 0) {\n      this.openedItems.splice(ind, 1);\n    }\n  }\n\n  closeOpenedItem(): void {\n    let event;\n\n    try {\n      // Chrome, Safari, Firefox\n      event = new KeyboardEvent('keyup', {\n        key: 'Escape'\n      });\n    } catch (e) {\n      // IE\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const createdEvent = document.createEvent('KeyboardEvent');\n    }\n\n    if (event) {\n      this.openedItems.forEach(item => {\n        // close all opened items except modals and dockedPanels\n        if (!item.componentInstance.modalClassInstance) {\n          item.onClose(event);\n        }\n      });\n    }\n  }\n\n  private onKeyup(event: KeyboardEvent): void {\n    if (getEventKeyCode(event) !== ESCAPE) {\n      return;\n    }\n\n    const lastItem = this.openedItems[this.openedItems.length - 1];\n\n    if (lastItem) {\n      lastItem.onClose(event);\n    }\n\n\n  }\n\n}\n"]}