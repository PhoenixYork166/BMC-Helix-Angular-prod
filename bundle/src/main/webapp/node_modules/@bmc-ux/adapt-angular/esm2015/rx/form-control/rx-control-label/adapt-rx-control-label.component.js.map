{"version":3,"file":"adapt-rx-control-label.component.js","sourceRoot":"","sources":["../../../../../../../libs/adapt-angular/src/rx/form-control/rx-control-label/adapt-rx-control-label.component.ts","../../../../../../../libs/adapt-angular/src/rx/form-control/rx-control-label/adapt-rx-control-label.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,KAAK,EAAC,MAAM,eAAe,CAAC;AAG/C,OAAO,EAAC,qBAAqB,EAAC,MAAM,4BAA4B,CAAC;;;;;;;ICA/D,kGAAmH;;;IAFrH,8BAAuD;IAErD,mFAAmH;IACrH,iBAAM;;;;;IAHY,uCAAsB;IAExB,eAA4B;IAA5B,kDAA4B,iBAAA,iBAAA;;;IAY1C,+BAAiE;IAAA,YAAY;IAAA,iBAAM;;;IAAlB,eAAY;IAAZ,sCAAY;;;IAN7E,gCAE8C;IAC5C,2BAAuE;IACzE,iBAAQ;IACR,2BAA+D;IAC/D,2FAAmF;;;;;IAL5E,iCAAgB,yCAAA;IAEP,eAAyC;IAAzC,sCAAyC;IAE3C,eAAiC;IAAjC,sCAAiC;IACzC,eAAc;IAAd,sCAAc;;;IAUpB,+BAAiE;IAAA,YAAY;IAAA,iBAAM;;;IAAlB,eAAY;IAAZ,sCAAY;;;IAL7E,+BAC6C;IAC3C,2BAAuE;IACzE,iBAAO;IACP,2BAA+D;IAC/D,2FAAmF;;;;;IAJ7E,uDAAsC;IAC5B,eAAyC;IAAzC,sCAAyC;IAE3C,eAAiC;IAAjC,sCAAiC;IACzC,eAAc;IAAd,sCAAc;;;IAMpB,6BAAyD;IACvD,2BAAkC;IAClC,gCAAoC;IAAA,YAAiB;IAAA,iBAAO;IAC9D,0BAAe;;;IADuB,eAAiB;IAAjB,2CAAiB;;;IAGvD,gCAAuC;IAAA,YAAY;IAAA,iBAAO;;;IAAnB,eAAY;IAAZ,sCAAY;;;IAPnD,4BAAM;IAAA,YAAS;IAAA,iBAAO;IAEtB,8GAGe;IAEf,8FAA0D;;;IAPpD,eAAS;IAAT,kCAAS;IAEA,eAAwC;IAAxC,uEAAwC;IAKhD,eAAc;IAAd,sCAAc;;;IAIrB,6BAAuC;IACrC,2BAAkC;IAClC,qDACmF;IACrF,0BAAe;;;IAFmB,eAAmB;IAAnB,yCAAmB,0BAAA;;;IAFrD,8GAIe;;;IAJA,6EAAsB;;AD9BvC,MAAM,OAAO,4BAA4B;IAsCvC,YAAoB,EAAyB;QAAzB,OAAE,GAAF,EAAE,CAAuB;QAP7C;;WAEG;QACM,YAAO,GAA+B,IAAI,CAAC;QAKlD,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC,kBAAkB,EAAE,CAAC,uBAAuB,CAAC,CAAC;IACxE,CAAC;IAED;;OAEG;IACH,IAAI,oBAAoB;QACtB,OAAO,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC;;wGA/CU,4BAA4B;+EAA5B,4BAA4B;QCTzC,6EAGM;QAGN,8HASc;QAEd,8HAQc;QAEd,8HASc;QAEd,8HAMc;;QA5C4B,gCAAW;;uFDSxC,4BAA4B;cALxC,SAAS;eAAC;gBACT,QAAQ,EAAE,wBAAwB;gBAClC,WAAW,EAAE,yCAAyC;gBACtD,mBAAmB,EAAE,KAAK;aAC3B;wEAKU,GAAG;kBAAX,KAAK;YAKG,EAAE;kBAAV,KAAK;YAKG,KAAK;kBAAb,KAAK;YAKG,QAAQ;kBAAhB,KAAK;YAKG,aAAa;kBAArB,KAAK;YAKG,iBAAiB;kBAAzB,KAAK;YAKG,OAAO;kBAAf,KAAK;YAEG,MAAM;kBAAd,KAAK","sourcesContent":["import {Component, Input} from '@angular/core';\n\nimport {AdaptRxControlLabelTooltip} from './adapt-rx-control-label-tooltip.model';\nimport {AdaptTranslateService} from '../../../common/i18n/index';\n\n@Component({\n  selector: 'adapt-rx-control-label',\n  templateUrl: './adapt-rx-control-label.component.html',\n  preserveWhitespaces: false\n})\nexport class AdaptRxControlLabelComponent {\n  /**\n   * The ID of labeled element\n   */\n  @Input() for: string;\n\n  /**\n   * The ID\n   */\n  @Input() id: string;\n\n  /**\n   * Label text\n   */\n  @Input() label: string;\n\n  /**\n   * SubLabel text\n   */\n  @Input() subLabel: string;\n\n  /**\n   * Required label text\n   */\n  @Input() requiredLabel: string;\n\n  /**\n   * Show/hide required label\n   */\n  @Input() showRequiredLabel: boolean;\n\n  /**\n   * Tooltip settings\n   */\n  @Input() tooltip: AdaptRxControlLabelTooltip = null;\n\n  @Input() testID: string;\n\n  constructor(private ts: AdaptTranslateService) {\n    this.requiredLabel = ts.getCurrentLanguage()['adapt.common.required'];\n  }\n\n  /**\n   * Check if there is a target element for which label is\n   */\n  get hasAssociatedControl(): boolean {\n    return Boolean(this.for);\n  }\n}\n","<!-- class=\"pb-1\": .form-control-label with .d-inline can't have paddings, so made it for whole container -->\n<div class=\"pb-1\" [attr.id]=\"id || null\" *ngIf=\"label\">\n  <!-- If there is associated control ([for] attribute is present), use <label> tag -->\n  <ng-template *ngIf=\"hasAssociatedControl; then associatedLabelTemplate; else plainTextLabelTemplate\"></ng-template>\n</div>\n\n\n<ng-template #associatedLabelTemplate>\n  <!-- class=\"d-inline\" is needed here to show label and icon in one line -->\n  <label class=\"form-control-label d-inline\"\n         [attr.for]=\"for\"\n         [attr.data-testid]=\"testID + '_label'\">\n    <ng-container [ngTemplateOutlet]=\"labelContentTemplate\"></ng-container>\n  </label>\n  <ng-container [ngTemplateOutlet]=\"labelTooltip\"></ng-container>\n  <div *ngIf=\"subLabel\" class=\"text-secondary font-weight-default\">{{subLabel}}</div>\n</ng-template>\n\n<ng-template #plainTextLabelTemplate>\n  <!-- class=\"d-inline\" is needed here to show label and icon in one line -->\n  <span class=\"form-control-label d-inline\"\n        [attr.data-testid]=\"testID + '_label'\">\n    <ng-container [ngTemplateOutlet]=\"labelContentTemplate\"></ng-container>\n  </span>\n  <ng-container [ngTemplateOutlet]=\"labelTooltip\"></ng-container>\n  <div *ngIf=\"subLabel\" class=\"text-secondary font-weight-default\">{{subLabel}}</div>\n</ng-template>\n\n<ng-template #labelContentTemplate>\n  <span>{{label}}</span>\n\n  <ng-container *ngIf=\"showRequiredLabel && requiredLabel\">\n    <span class=\"letter-space\"></span>\n    <span class=\"form-control-required\">{{requiredLabel}}</span>\n  </ng-container>\n\n  <span *ngIf=\"subLabel\" class=\"sr-only\">{{subLabel}}</span>\n</ng-template>\n\n<ng-template #labelTooltip>\n  <ng-container *ngIf=\"tooltip?.content\">\n    <span class=\"letter-space\"></span>\n    <adapt-rx-control-label-tooltip [tooltip]=\"tooltip\"\n                                    [testID]=\"testID\"></adapt-rx-control-label-tooltip>\n  </ng-container>\n</ng-template>\n\n"]}