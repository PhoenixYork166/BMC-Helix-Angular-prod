import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Optional, Output, Self, ViewChild, ViewEncapsulation } from '@angular/core';
import { NgControl } from '@angular/forms';
import { fromEvent, Subject, asyncScheduler } from 'rxjs';
import { debounceTime, takeUntil, tap, throttleTime } from 'rxjs/operators';
import { isString } from 'lodash-es';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import { AdaptTranslateService } from '../../common/i18n/index';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService, AdaptRadarAngularCustomEventType } from '../../common/radar/adapt-radar';
import { AdaptInteractionSourceService } from '../../common/interaction-source';
import { AdaptRxFormControlDirective } from '../form-control/index';
import { AdaptRxSearchConfigService } from './adapt-rx-search-config.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "./adapt-rx-search-config.service";
import * as i3 from "../../common/i18n/index";
import * as i4 from "../../common/radar/adapt-radar";
import * as i5 from "../../common/device-detection.service";
import * as i6 from "../../common/interaction-source";
import * as i7 from "@angular/common";
const _c0 = ["inputRef"];
const _c1 = ["clearButtonRef"];
const _c2 = ["searchButtonRef"];
const _c3 = function (a0, a1) { return { "d-icon-search": a0, "d-icon-filter_adapt": a1 }; };
function AdaptRxSearchComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 11);
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(1, _c3, ctx_r0.mode === "search", ctx_r0.mode === "filter"));
} }
function AdaptRxSearchComponent_button_20_Template(rf, ctx) { if (rf & 1) {
    const _r6 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 12, 13);
    i0.ɵɵlistener("click", function AdaptRxSearchComponent_button_20_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); return ctx_r5.clearSearchValue(); })("blur", function AdaptRxSearchComponent_button_20_Template_button_blur_0_listener() { i0.ɵɵrestoreView(_r6); const ctx_r7 = i0.ɵɵnextContext(); return ctx_r7.onButtonBlur(); })("focus", function AdaptRxSearchComponent_button_20_Template_button_focus_0_listener() { i0.ɵɵrestoreView(_r6); const ctx_r8 = i0.ɵɵnextContext(); return ctx_r8.onButtonFocus(); });
    i0.ɵɵtext(2, "\n        ");
    i0.ɵɵelementStart(3, "span", 14);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("btn-sm", ctx_r2.size === "sm")("btn-lg", ctx_r2.size === "lg");
    i0.ɵɵproperty("disabled", ctx_r2.disabled || ctx_r2.readonly);
    i0.ɵɵattribute("data-testid", ctx_r2.testID + "_clear");
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r2.clearButtonText);
} }
function AdaptRxSearchComponent_div_24_button_2_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 22);
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(1, _c3, ctx_r11.mode === "search", ctx_r11.mode === "filter"));
} }
function AdaptRxSearchComponent_div_24_button_2_span_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 14);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r12.searchButtonSRText);
} }
function AdaptRxSearchComponent_div_24_button_2_span_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r13.searchButtonText);
} }
function AdaptRxSearchComponent_div_24_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r15 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 17, 18);
    i0.ɵɵlistener("click", function AdaptRxSearchComponent_div_24_button_2_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r15); const ctx_r14 = i0.ɵɵnextContext(2); return ctx_r14.setSearchValue(); })("blur", function AdaptRxSearchComponent_div_24_button_2_Template_button_blur_0_listener() { i0.ɵɵrestoreView(_r15); const ctx_r16 = i0.ɵɵnextContext(2); return ctx_r16.onButtonBlur(); })("focus", function AdaptRxSearchComponent_div_24_button_2_Template_button_focus_0_listener() { i0.ɵɵrestoreView(_r15); const ctx_r17 = i0.ɵɵnextContext(2); return ctx_r17.onButtonFocus(); });
    i0.ɵɵtext(2, "\n      ");
    i0.ɵɵtemplate(3, AdaptRxSearchComponent_div_24_button_2_span_3_Template, 1, 4, "span", 19);
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵtemplate(5, AdaptRxSearchComponent_div_24_button_2_span_5_Template, 2, 1, "span", 20);
    i0.ɵɵtext(6, "\n      ");
    i0.ɵɵtemplate(7, AdaptRxSearchComponent_div_24_button_2_span_7_Template, 2, 1, "span", 21);
    i0.ɵɵtext(8, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext(2);
    i0.ɵɵattribute("data-testid", ctx_r9.testID + "_button");
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", !ctx_r9.searchButtonText);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r9.searchButtonText);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r9.searchButtonText);
} }
function AdaptRxSearchComponent_div_24_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 15);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵtemplate(2, AdaptRxSearchComponent_div_24_button_2_Template, 9, 4, "button", 16);
    i0.ɵɵtext(3, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !(ctx_r3.disabled || ctx_r3.readonly));
} }
const _c4 = function (a0) { return { "adapt-rx-search__input-wrapper_extended": a0 }; };
export class AdaptRxSearchComponent extends AdaptRxFormControlDirective {
    constructor(ngControl, adaptRxSearchConfigService, _changeDetectorRef, ts, _adaptRadarService, _deviceDetectionService, _interactionSourceOriginService, _elem) {
        super(ngControl, ts, _adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptRxSearch, _changeDetectorRef);
        this.ts = ts;
        this._deviceDetectionService = _deviceDetectionService;
        this._interactionSourceOriginService = _interactionSourceOriginService;
        this.controlName = 'search';
        this.canClear = false; // The flag notifying that search native input has a value
        this.isMobile = false;
        /**
         * Specifies search mode - search of filter. This will apply different visual styling to the component.
         * @docs-default search
         * @since 12.25.0
         */
        this.mode = 'search';
        /**
         * Control size
         * @docs-default default
         */
        this.size = 'default';
        /**
         * Use explicit search button
         * @docs-default false
         */
        this.searchButton = false;
        /**
         * Debounce time before search model change
         * @docs-default 0
         */
        this.debounceTime = 0;
        /**
         * @docs-default centre
         */
        this.initialAlign = 'centre';
        /**
         * Fired when a user interacts with search.
         */
        this.editModeChange = new EventEmitter();
        this._hasFocus = false;
        this._isEditState = false;
        this._componentStateChange$ = new Subject();
        this.size = adaptRxSearchConfigService.size;
        this.searchButton = adaptRxSearchConfigService.searchButton;
        this.debounceTime = adaptRxSearchConfigService.debounceTime;
        this.setDefaultTexts(ts.getCurrentLanguage());
    }
    ngOnInit() {
        super.ngOnInit();
        this.isMobile = this._deviceDetectionService.isMobile();
        fromEvent(this.inputRef.nativeElement, 'input').pipe(takeUntil(this.destroy$), tap(this._checkCanClear.bind(this)), debounceTime(this.debounceTime)).subscribe(() => {
            if (!this.searchButton) {
                this._checkNativeValue();
            }
        });
        this._componentStateChange$
            .pipe(takeUntil(this.destroy$), throttleTime(0, asyncScheduler, { trailing: true }))
            .subscribe(() => {
            var _a, _b;
            const isInputActive = document.activeElement === this.inputRef.nativeElement;
            const isClearButtonActive = document.activeElement === ((_a = this.clearButtonRef) === null || _a === void 0 ? void 0 : _a.nativeElement);
            const isSearchButtonActive = document.activeElement === ((_b = this.searchButtonRef) === null || _b === void 0 ? void 0 : _b.nativeElement);
            this._isEditState = !this.readonly && (isInputActive || isClearButtonActive || isSearchButtonActive);
            this.editModeChange.emit(this._isEditState);
        });
    }
    setDefaultTexts(translation) {
        this.placeholder = translation['adapt.common.search'];
        this.placeholderDefaultText = translation['adapt.common.search'];
        this.clearButtonText = translation['adapt.common.clear'];
        this.searchButtonSRText = translation['adapt.common.search'];
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (value !== this._value) {
            this._value = value;
            this._onChange(this._value);
            this.stateChanges$.next();
        }
    }
    /**
     * Extend parent method
     */
    focusHandler(event) {
        super.focusHandler(event);
        this._hasFocus = true;
        this._componentStateChange$.next();
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxSearch, {
            GroupName: this.adaptRadarGroupName,
            EventType: AdaptRadarAngularCustomEventType.Focus,
            SearchMethod: null,
            FieldSize: this.size,
            TextEntered: !!this.value,
            SearchButton: this.searchButton,
            InputMethod: this._interactionSourceOriginService.getLastInteractionSourceOrigin()
        });
    }
    /**
     * Extend parent method
     */
    blurHandler(event) {
        super.blurHandler(event);
        this._hasFocus = false;
        this._onTouched();
        this._componentStateChange$.next();
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxSearch, {
            GroupName: this.adaptRadarGroupName,
            EventType: AdaptRadarAngularCustomEventType.Blur,
            SearchMethod: null,
            FieldSize: this.size,
            TextEntered: !!this.value,
            SearchButton: this.searchButton,
            InputMethod: this._interactionSourceOriginService.getLastInteractionSourceOrigin()
        });
    }
    /**
     * Check if nativeElement has focus
     */
    get hasFocus() {
        return this._hasFocus;
    }
    /**
     * Check if inputBlock should be expanded
     */
    get isExpanded() {
        return Boolean((!this.nonInteractive && this._hasFocus) || this.canClear || this.searchButton);
    }
    /**
     * Returns autocomplete attribute value for native element
     */
    get getAutocompleteValue() {
        return isString(this.autocomplete) ? this.autocomplete : (this.autocomplete ? 'on' : 'off');
    }
    /**
     * Set search model value
     */
    setSearchValue() {
        if (this.nonInteractive) {
            return;
        }
        this._checkNativeValue();
    }
    /**
     * Clear search value
     */
    clearSearchValue() {
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxSearch, {
            GroupName: this.adaptRadarGroupName,
            EventType: AdaptRadarAngularCustomEventType.Clear,
            Label: this.label,
            Required: this.required,
            TextEntered: !!this.value,
        });
        this.inputRef.nativeElement.value = '';
        this._checkCanClear();
        this._checkNativeValue();
    }
    /**
     * Extend parent method
     */
    writeValue(value) {
        if (value !== undefined) {
            this._value = value;
        }
        this.inputRef.nativeElement.value = this.value;
        this._checkCanClear();
        this._checkNativeValue();
    }
    onButtonBlur() {
        this._componentStateChange$.next();
    }
    onButtonFocus() {
        this._componentStateChange$.next();
    }
    /**
     * Implementation from the base class
     * Focus the native element if [autofocus] == true
     */
    _focusNativeElement() {
        this.inputRef.nativeElement.focus();
    }
    /**
     * Check if the native input has value
     */
    _checkCanClear() {
        this.canClear = Boolean(this.inputRef.nativeElement.value);
    }
    /**
     * Check if the native element value was changed and propagate change
     */
    _checkNativeValue() {
        const newValue = this.inputRef.nativeElement.value;
        if (this._previousNativeValue !== newValue) {
            this._previousNativeValue = newValue;
            this.value = newValue;
        }
    }
}
AdaptRxSearchComponent.ɵfac = function AdaptRxSearchComponent_Factory(t) { return new (t || AdaptRxSearchComponent)(i0.ɵɵdirectiveInject(i1.NgControl, 10), i0.ɵɵdirectiveInject(i2.AdaptRxSearchConfigService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.AdaptTranslateService), i0.ɵɵdirectiveInject(i4.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i5.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i6.AdaptInteractionSourceService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptRxSearchComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptRxSearchComponent, selectors: [["adapt-rx-search"]], viewQuery: function AdaptRxSearchComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 5);
        i0.ɵɵviewQuery(_c2, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clearButtonRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchButtonRef = _t.first);
    } }, inputs: { mode: "mode", autocomplete: "autocomplete", placeholder: "placeholder", size: "size", searchButton: "searchButton", searchButtonText: "searchButtonText", clearButtonText: "clearButtonText", debounceTime: "debounceTime", ariaControlsPopupId: "ariaControlsPopupId", ariaActiveDescendant: "ariaActiveDescendant", initialAlign: "initialAlign" }, outputs: { editModeChange: "editModeChange" }, features: [i0.ɵɵInheritDefinitionFeature], decls: 27, vars: 44, consts: [[1, "input-group", "adapt-rx-search", 3, "click"], [1, "adapt-rx-search__form-control-block"], [1, "adapt-rx-search__expandable-block"], ["class", "adapt-rx-search__icon", 3, "ngClass", 4, "ngIf"], [1, "adapt-rx-search__input-wrapper", 3, "ngClass"], [1, "sr-only", 3, "for"], [1, "form-control", "adapt-rx-search__fake-input"], ["type", "text", "role", "searchbox", 1, "form-control", "adapt-rx-search__input", 3, "id", "autofocus", "autocomplete", "disabled", "readOnly", "keyup.enter", "focus", "blur"], ["inputRef", ""], ["class", "btn btn-link d-icon-cross_adapt scale-up-in animated fast adapt-rx-search__clear-button", "type", "button", 3, "btn-sm", "btn-lg", "disabled", "click", "blur", "focus", 4, "ngIf"], ["class", "input-group-append adapt-rx-search__search-button-block", 4, "ngIf"], [1, "adapt-rx-search__icon", 3, "ngClass"], ["type", "button", 1, "btn", "btn-link", "d-icon-cross_adapt", "scale-up-in", "animated", "fast", "adapt-rx-search__clear-button", 3, "disabled", "click", "blur", "focus"], ["clearButtonRef", ""], [1, "sr-only"], [1, "input-group-append", "adapt-rx-search__search-button-block"], ["type", "button", "class", "btn btn-secondary", 3, "click", "blur", "focus", 4, "ngIf"], ["type", "button", 1, "btn", "btn-secondary", 3, "click", "blur", "focus"], ["searchButtonRef", ""], [3, "ngClass", 4, "ngIf"], ["class", "sr-only", 4, "ngIf"], [4, "ngIf"], [3, "ngClass"]], template: function AdaptRxSearchComponent_Template(rf, ctx) { if (rf & 1) {
        const _r18 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵlistener("click", function AdaptRxSearchComponent_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r18); const _r1 = i0.ɵɵreference(17); return _r1.focus(); });
        i0.ɵɵtext(1, "\n  ");
        i0.ɵɵelementStart(2, "div", 1);
        i0.ɵɵtext(3, "\n    ");
        i0.ɵɵelementStart(4, "div", 2);
        i0.ɵɵtext(5, "\n      ");
        i0.ɵɵtemplate(6, AdaptRxSearchComponent_div_6_Template, 1, 4, "div", 3);
        i0.ɵɵtext(7, "\n      ");
        i0.ɵɵelementStart(8, "div", 4);
        i0.ɵɵtext(9, "\n        ");
        i0.ɵɵelementStart(10, "label", 5);
        i0.ɵɵtext(11);
        i0.ɵɵelementEnd();
        i0.ɵɵtext(12, "\n        ");
        i0.ɵɵelementStart(13, "span", 6);
        i0.ɵɵtext(14);
        i0.ɵɵelementEnd();
        i0.ɵɵtext(15, "\n        ");
        i0.ɵɵelementStart(16, "input", 7, 8);
        i0.ɵɵlistener("keyup.enter", function AdaptRxSearchComponent_Template_input_keyup_enter_16_listener() { return ctx.setSearchValue(); })("focus", function AdaptRxSearchComponent_Template_input_focus_16_listener($event) { return ctx.focusHandler($event); })("blur", function AdaptRxSearchComponent_Template_input_blur_16_listener($event) { return ctx.blurHandler($event); });
        i0.ɵɵelementEnd();
        i0.ɵɵtext(18, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(19, "\n      ");
        i0.ɵɵtemplate(20, AdaptRxSearchComponent_button_20_Template, 6, 7, "button", 9);
        i0.ɵɵtext(21, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(22, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(23, "\n\n  ");
        i0.ɵɵtemplate(24, AdaptRxSearchComponent_div_24_Template, 4, 1, "div", 10);
        i0.ɵɵtext(25, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(26, "\n");
    } if (rf & 2) {
        i0.ɵɵclassProp("adapt-rx-search_disabled", ctx.disabled)("input-group-sm", ctx.size === "sm")("input-group-lg", ctx.size === "lg");
        i0.ɵɵadvance(2);
        i0.ɵɵclassProp("adapt-rx-search__form-control-block_active", ctx.hasFocus);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", !ctx.searchButton);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(42, _c4, ctx.isExpanded || ctx.initialAlign === "left"));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", ctx.id);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx.label || ctx.placeholder || ctx.placeholderDefaultText);
        i0.ɵɵadvance(2);
        i0.ɵɵclassProp("form-control-sm", ctx.size === "sm")("form-control-lg", ctx.size === "lg")("px-0", !ctx.searchButton);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx.placeholder || ctx.placeholderDefaultText);
        i0.ɵɵadvance(2);
        i0.ɵɵclassProp("form-control-sm", ctx.size === "sm")("form-control-lg", ctx.size === "lg")("px-0", !ctx.searchButton);
        i0.ɵɵproperty("id", ctx.id)("autofocus", ctx.autofocus)("autocomplete", ctx.getAutocompleteValue)("disabled", ctx.disabled)("readOnly", ctx.readonly);
        i0.ɵɵattribute("aria-controls", ctx.ariaControlsPopupId)("aria-activedescendant", ctx.ariaActiveDescendant)("aria-readonly", ctx.readonly)("name", ctx.name)("placeholder", ctx.placeholder || ctx.placeholderDefaultText)("tabindex", ctx.tabIndex)("data-testid", ctx.testID + "_input")("aria-label", ctx.ariaLabel)("aria-labelledby", ctx.ariaLabelledby)("aria-describedby", ctx.ariaDescribedBy);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", !(ctx.disabled || ctx.readonly) && ctx.canClear);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", ctx.searchButton);
    } }, directives: [i7.NgIf, i7.NgClass], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxSearchComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-rx-search',
                templateUrl: './adapt-rx-search.component.html',
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: i1.NgControl, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }, { type: i2.AdaptRxSearchConfigService }, { type: i0.ChangeDetectorRef }, { type: i3.AdaptTranslateService }, { type: i4.AdaptRadarAngularService }, { type: i5.AdaptDeviceDetectionService }, { type: i6.AdaptInteractionSourceService }, { type: i0.ElementRef }]; }, { mode: [{
            type: Input
        }], autocomplete: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], size: [{
            type: Input
        }], searchButton: [{
            type: Input
        }], searchButtonText: [{
            type: Input
        }], clearButtonText: [{
            type: Input
        }], debounceTime: [{
            type: Input
        }], ariaControlsPopupId: [{
            type: Input
        }], ariaActiveDescendant: [{
            type: Input
        }], initialAlign: [{
            type: Input
        }], editModeChange: [{
            type: Output
        }], inputRef: [{
            type: ViewChild,
            args: ['inputRef', { static: true }]
        }], clearButtonRef: [{
            type: ViewChild,
            args: ['clearButtonRef', { static: false }]
        }], searchButtonRef: [{
            type: ViewChild,
            args: ['searchButtonRef', { static: false }]
        }] }); })();
//# sourceMappingURL=adapt-rx-search.component.js.map