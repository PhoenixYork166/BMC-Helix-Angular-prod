import { ChangeDetectorRef, Component, ElementRef, Input, Renderer2, ViewChild, ViewEncapsulation } from '@angular/core';
import { CodeViewerService } from './code-viewer.service';
import { escapeHtml } from '../common/utilities';
import 'prismjs/prism.js';
import 'prismjs/components/prism-json.js';
import 'prismjs/components/prism-typescript.js';
import 'prismjs/plugins/line-numbers/prism-line-numbers.js';
import { AdaptTranslateService } from '../common/i18n/index';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "./code-viewer.service";
import * as i2 from "../common/i18n/index";
import * as i3 from "../common/radar/adapt-radar";
import * as i4 from "@angular/common";
import * as i5 from "../rx/rx-switch/adapt-rx-switch.component";
import * as i6 from "@angular/forms";
const _c0 = ["codeEl"];
const _c1 = ["preEl"];
function AdaptCodeViewerComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 6);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "adapt-rx-switch", 7);
    i0.ɵɵlistener("ngModelChange", function AdaptCodeViewerComponent_div_2_Template_adapt_rx_switch_ngModelChange_2_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return ctx_r3.hasLinesChange($event); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementStart(4, "div", 8);
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵelementStart(6, "adapt-rx-switch", 7);
    i0.ɵɵlistener("ngModelChange", function AdaptCodeViewerComponent_div_2_Template_adapt_rx_switch_ngModelChange_6_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r5 = i0.ɵɵnextContext(); return ctx_r5.darkThemeChange($event); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("label", ctx_r0.texts.showLineNumbers)("adaptRadarDisableEventSending", true)("ngModel", ctx_r0.hasLines);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("label", ctx_r0.texts.darkTheme)("adaptRadarDisableEventSending", true)("ngModel", ctx_r0.darkTheme);
} }
// declare global {
//   const Prism: typeof prism;
// }
export class AdaptCodeViewerComponent extends AdaptRadarAngularGenericDirective {
    constructor(_codeViewerService, _renderer, _ts, _changeDetectorRef, _adaptRadarService, _elem) {
        super(_adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptCodeViewer);
        this._codeViewerService = _codeViewerService;
        this._renderer = _renderer;
        this._ts = _ts;
        this._changeDetectorRef = _changeDetectorRef;
        /**
         * Toolbar text
         * @docs-default {darkTheme: 'Dark theme', showLineNumbers: 'Show line numbers'}
         */
        this.texts = {};
        /**
         * Toggle toolbar visibility
         * @docs-default true
         */
        this.hasToolbar = true;
        this.defaultTexts = {};
        this._subscriptions = [];
        this._hasInited = false;
        this.hasLines = _codeViewerService.hasLinesValue;
        this._subscriptions.push(_codeViewerService.hasLines.subscribe(val => {
            this.hasLines = val;
            this.prepareHtmlAndHighlightCode();
            this._changeDetectorRef.detectChanges();
        }), _codeViewerService.darkTheme.subscribe(val => {
            this.darkTheme = val;
            this.highlightCode();
            this._changeDetectorRef.detectChanges();
        }));
        this.setDefaultTexts(_ts.getCurrentLanguage());
    }
    get preClass() {
        return `${this.hasLines ? 'line-numbers ' : ''}language-${this.lang}`;
    }
    get cvClass() {
        const classes = [];
        classes.push(this.darkTheme ? 'cv__theme--dark' : 'cv__theme--light');
        classes.push(this.hasToolbar ? 'cv--with-toolbar' : 'cv--without-toolbar');
        return classes;
    }
    ngOnInit() {
        this.darkTheme = this.theme ? this.theme === 'dark' : this._codeViewerService.darkThemeValue;
        this.texts = Object.assign(Object.assign({}, this.defaultTexts), this.texts);
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this._hasInited = true;
        this.prepareHtmlAndHighlightCode();
    }
    ngOnChanges(changes) {
        if (changes.code || changes.lang) {
            this.prepareHtmlAndHighlightCode();
        }
        if (changes.theme && changes.theme.previousValue !== changes.theme.currentValue) {
            this.darkTheme = this.theme === 'dark';
        }
    }
    ngOnDestroy() {
        this._subscriptions.forEach(s => s.unsubscribe());
        this._subscriptions.length = 0;
    }
    setDefaultTexts(translation) {
        this.defaultTexts.darkTheme = translation['adapt.codeViewer.darkTheme'];
        this.defaultTexts.showLineNumbers = translation['adapt.codeViewer.showLineNumbers'];
    }
    hasLinesChange(value) {
        this._codeViewerService.setHasLines(value);
    }
    darkThemeChange(value) {
        this._codeViewerService.setDarkTheme(value);
    }
    prepareHtmlAndHighlightCode() {
        if (this._hasInited) {
            this._renderer.setAttribute(this.preEl.nativeElement, 'class', this.preClass);
            this._renderer.setProperty(this.codeEl.nativeElement, 'innerHTML', escapeHtml(this.code || '\n'));
            this.highlightCode();
        }
    }
    highlightCode() {
        if (this.code) {
            Prism.highlightElement(this.codeEl.nativeElement);
        }
    }
}
AdaptCodeViewerComponent.ɵfac = function AdaptCodeViewerComponent_Factory(t) { return new (t || AdaptCodeViewerComponent)(i0.ɵɵdirectiveInject(i1.CodeViewerService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.AdaptTranslateService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptCodeViewerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptCodeViewerComponent, selectors: [["adapt-code-viewer"]], viewQuery: function AdaptCodeViewerComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.codeEl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.preEl = _t.first);
    } }, inputs: { code: "code", theme: "theme", lang: "lang", texts: "texts", hasToolbar: "hasToolbar" }, features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 13, vars: 3, consts: [[1, "code-viewer", 3, "ngClass"], ["class", "code-viewer__toolbar", 4, "ngIf"], [1, "code-viewer__highlighted-code-wrap"], [3, "ngClass"], ["preEl", ""], ["codeEl", ""], [1, "code-viewer__toolbar"], [3, "label", "adaptRadarDisableEventSending", "ngModel", "ngModelChange"], [1, "cv__dark-switcher"]], template: function AdaptCodeViewerComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵtext(1, "\n  ");
        i0.ɵɵtemplate(2, AdaptCodeViewerComponent_div_2_Template, 9, 6, "div", 1);
        i0.ɵɵtext(3, "\n  ");
        i0.ɵɵelementStart(4, "div", 2);
        i0.ɵɵtext(5, "\n    ");
        i0.ɵɵelementStart(6, "pre", 3, 4);
        i0.ɵɵelement(8, "code", null, 5);
        i0.ɵɵelementEnd();
        i0.ɵɵtext(10, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(11, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(12, "\n");
    } if (rf & 2) {
        i0.ɵɵproperty("ngClass", ctx.cvClass);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.hasToolbar);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngClass", ctx.preClass);
    } }, directives: [i4.NgClass, i4.NgIf, i5.AdaptRxSwitchComponent, i6.NgControlStatus, i6.NgModel], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptCodeViewerComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-code-viewer',
                templateUrl: './code-viewer.html',
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: i1.CodeViewerService }, { type: i0.Renderer2 }, { type: i2.AdaptTranslateService }, { type: i0.ChangeDetectorRef }, { type: i3.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { codeEl: [{
            type: ViewChild,
            args: ['codeEl', { static: true }]
        }], preEl: [{
            type: ViewChild,
            args: ['preEl', { static: true }]
        }], code: [{
            type: Input
        }], theme: [{
            type: Input
        }], lang: [{
            type: Input
        }], texts: [{
            type: Input
        }], hasToolbar: [{
            type: Input
        }] }); })();
//# sourceMappingURL=code-viewer.component.js.map