{"version":3,"file":"color-picker.component.js","sourceRoot":"","sources":["../../../../../libs/adapt-angular/src/color-picker/color-picker.component.ts","../../../../../libs/adapt-angular/src/color-picker/color-picker.html"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BACKSPACE, DELETE, ENTER} from '@angular/cdk/keycodes';\nimport {takeUntil, throttleTime} from 'rxjs/operators';\nimport {asyncScheduler, noop, ReplaySubject, Subject} from 'rxjs';\nimport {isNil} from 'lodash-es';\n\nimport {\n  AdaptRGBColor,\n  Color,\n  ColorUtils,\n  getColorType,\n  getRGBColorFromString,\n  getStringFromRGBColor,\n  SourceTypes\n} from '../common/color.utils';\nimport {AdaptDeviceDetectionService} from '../common/device-detection.service';\nimport {PlacementArray} from '../common/positioning';\nimport {AdaptTranslateService} from '../common/i18n/index';\nimport {\n  AdaptRadarAngularCustomEventName,\n  AdaptRadarAngularGenericDirective,\n  AdaptRadarAngularService\n} from '../common/radar/adapt-radar';\nimport {ColorType} from '../common/common.enums';\nimport {adaptWarn} from '../common/logger';\nimport {getEventKeyCode} from '../common/key-codes';\nimport {ResizeService} from '../common/resize/resize.service';\nimport {ButtonConfig} from '../button-group/index';\nimport {ActiveTabChangeEvent} from '../tabs/index';\nimport {AdaptDropdownDirective} from '../dropdown/index';\n\nenum ColorPickerActiveTab {\n  Empty = 0,\n  Palette = 1\n}\n\nconst CP_SWATCH_COLOR_COUNT: number = 7;\nconst CP_TILE_BG_COLOR: string = '#F0F0F1';\nconst CP_FALLBACK_COLOR: string = '#FF0000';\nconst CP_COLOR_MARGIN: number = 38;\nconst CP_COLOR_STRIP_WIDTH: number = 6;\nconst CP_RESPONSIVE_SM_VIEW_BREAKPOINT: number = 230;\nconst CP_PICK_AREA_DIMENSION: number = 211;\nconst CP_INPUT_PLACEHOLDERS: { HEX: string; RGB: string } = {HEX: 'FFFFFF', RGB: '255,255,255'};\n\n@Component({\n  selector: 'adapt-color-picker, adapt-colorpicker',\n  templateUrl: './color-picker.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AdaptColorPickerComponent),\n      multi: true\n    }\n  ],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AdaptColorPickerComponent extends AdaptRadarAngularGenericDirective implements OnInit, AfterViewInit, ControlValueAccessor, OnDestroy {\n  isMobile: boolean;\n  isTablet: boolean;\n  types: ColorType[] = [ColorType.HEX, ColorType.RGB];\n  placeholder: string = '';\n  pattern: RegExp = /\\s/;\n  userInput: string = '';\n  ariaLabel: string;\n  selectLabel: string = '';\n  pickerDimension: number = CP_PICK_AREA_DIMENSION; // Color gradient is always square\n  colorStripWidth: number = CP_COLOR_STRIP_WIDTH;\n  activeTab: ColorPickerActiveTab = ColorPickerActiveTab.Palette;\n\n  themeColorsButtonGroupConfig: ButtonConfig[] = [];\n  themeColorsButtonGroupModel: boolean[];\n\n  recentlyColorsButtonGroupConfig: ButtonConfig[] = [];\n  recentlyColorsButtonGroupModel: boolean[];\n\n  isValid: boolean = true;\n  isInputElementFocus: boolean = false;\n  isToggleTypeButtonFocus: boolean = false;\n  isEditState: boolean = false;\n  isEmptyState: boolean = true;\n  isPopupClosingState: boolean = false;\n  isResponsiveSmView: boolean = false;\n\n  mobileDoneBtnHandler: () => void = (function () {\n    this.closePopup();\n  }).bind(this);\n  mobileCancelBtnHandler: () => void = (function () {\n    this._restorePreviouslyModel();\n    this.closePopup();\n  }).bind(this);\n\n  selectedRGBColor: AdaptRGBColor;\n\n  themeColorsTitle: string;\n  recentlyUsedTitle: string;\n  emptyPlaceholder: string;\n\n  noColorSelected: string;\n  noColorAriaLabel: string;\n  solidColorAriaLabel: string;\n  colorSmViewLabel: string;\n\n  colorTypes: typeof ColorType = ColorType;\n  sourceTypes: typeof SourceTypes = SourceTypes;\n\n  previewBGColor: string;\n  previewBorderColor: string;\n\n  set value(value: string) {\n    this.writeValue(value);\n  }\n\n  get value(): string {\n    return this._value;\n  }\n\n  /**\n   * Show/hide section with theme colors\n   * Usage: set false to hide\n   *\n   * @docs-default true\n   *\n   * @since 11.13.0\n   */\n  @Input() showThemeColors: boolean = true;\n\n  /**\n   * Show/hide section with recently used colors\n   * Usage: set false to hide\n   *\n   * @docs-default true\n   *\n   * @since 11.13.0\n   */\n  @Input() showRecentlyUsedColors: boolean = true;\n\n  /**\n   * Color type (Available 2 abilities: HEX and RGB)\n   *\n   * @docs-default ColorType.HEX\n   */\n  @Input() set colorType(type: ColorType) {\n    this._setColorType(type);\n\n    if (this.selectedRGBColor) {\n      this.userInput = this._getUserInputValue();\n    }\n\n    this._changeDetectorRef.detectChanges();\n  }\n\n  get colorType(): ColorType {\n    return this._colorType;\n  }\n\n  /**\n   * Control label\n   * @docs-default\n   */\n  @Input() label: string = '';\n\n  /**\n   * Mobile view settings\n   * @docs-default\n   */\n  @Input() mobileView: {\n    doneBtnTitle?: string;\n    cancelBtnTitle?: string;\n  } = {};\n\n  /**\n   * Picker placement\n   * @docs-default ['bottom-left', 'top-left', 'bottom-right', 'top-right', 'bottom-left']\n   */\n  @Input() placement: PlacementArray = ['bottom-left', 'top-left', 'bottom-right', 'top-right', 'bottom-left'];\n\n  /**\n   * Append to body trigger\n   * @docs-default false\n   */\n  @Input() appendToBody: boolean = false;\n\n  /**\n   * Triggers disabled state\n   * @docs-default false\n   */\n  @Input() disabled: boolean = false;\n\n  /**\n   * Triggers readonly state\n   *\n   * @docs-default false\n   */\n  @Input() readonly: boolean = false;\n\n  /**\n   * Empty color selection\n   * Usage: set false to turn of ability to set empty/null color - hide empty option\n   * @docs-default true\n   *\n   * @since 11.15.0\n   */\n  @Input() showEmptyOption: boolean = true;\n\n  /**\n   * Use disabled style for the control if [readonly]=true\n   *\n   * @docs-default false\n   *\n   * @since v11.6.0\n   */\n  @Input() disabledStyleForReadonlyState: boolean = false;\n\n  /**\n   * Set recently used colors. Color value must have HEX-color format like #A1B2C3\n   *\n   * @docs-default\n   *\n   * @since v11.6.0\n   */\n  @Input()\n  set recentlyUsedColors(colors: Color[]) {\n    this._recentlyUsedColors = new Array(CP_SWATCH_COLOR_COUNT)\n      .fill(null)\n      .map((colorCell, index) => {\n        if (colors[index]) {\n          const colorRGB = getRGBColorFromString(colors[index].value);\n\n          if (colorRGB) {\n            return {\n              value: colorRGB.formatHex(),\n              source: SourceTypes.Recent,\n              selected: false\n            };\n          } else {\n            adaptWarn(`[recentlyUsedColors]: Please, check the format of provided color ${colors[index]}`);\n\n            return null;\n          }\n\n        } else {\n          return null;\n        }\n      })\n      /**\n       * If some input items have invalid value, color will be null,\n       * Move not null to the start.\n       */\n      .sort((colorA, colorB) => {\n        if (colorA !== null && colorB !== null) {\n          return 0;\n        }\n\n        return colorA === null ? 1 : -1;\n      });\n\n    this._updateRecentlyColorsButtonGroupConfig();\n    this._updateSwatchColorsModel();\n  }\n\n  get recentlyUsedColors(): (Color | null)[] {\n    return this._recentlyUsedColors;\n  }\n\n  /* eslint-disable @angular-eslint/no-output-on-prefix */\n  /**\n   * Fires when model change\n   *\n   * @deprecated since 12.13.0\n   * Use onSelectColor instead\n   */\n  @Output() readonly onChange: EventEmitter<string> = new EventEmitter();\n\n  /**\n   * Emits selected color\n   * Usage: listen to this event to get selected color\n   * <component (onSelectColor)='function($event)'></component>\n   *\n   * @since v11.12.0\n   */\n  @Output() readonly onSelectColor: EventEmitter<Color> = new EventEmitter();\n  /* eslint-enable @angular-eslint/no-output-on-prefix */\n\n  /* eslint-disable @angular-eslint/no-output-native */\n  /**\n   * Fires when picker open\n   */\n  @Output() readonly open: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * Fires when picker close\n   */\n  @Output() readonly close: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * Fires when input receives focus\n   */\n  @Output() readonly focus: EventEmitter<void> = new EventEmitter();\n\n  /**\n   * Fires when input loose focus\n   */\n  @Output() readonly blur: EventEmitter<void> = new EventEmitter();\n  /* eslint-enable @angular-eslint/no-output-native */\n\n  /**\n   * Fires on update recently used colors\n   *\n   * @since v11.6.0\n   */\n  @Output() readonly recentlyUsedColorsChanged: EventEmitter<Color[]> = new EventEmitter();\n\n  @ViewChild('adaptDropdown', {static: true, read: AdaptDropdownDirective}) popup: AdaptDropdownDirective;\n\n  @ViewChild('adaptDropdown', {static: true, read: ElementRef}) wrapperElement: ElementRef<HTMLDivElement>;\n\n  readonly _destroy$: ReplaySubject<boolean> = new ReplaySubject(1);\n  readonly _isDesktop: boolean;\n\n  private _value: string = '';\n  private _componentState: string;\n  private _componentStateChange$: Subject<void> = new Subject<void>();\n  private _recentlyUsedColors: Color[] = new Array(CP_SWATCH_COLOR_COUNT).fill(null);\n  private _colorType: ColorType = ColorType.HEX;\n\n  private _previouslySelectedRGBColor: AdaptRGBColor;\n  private _previouslySelectedColorType: ColorType = ColorType.HEX;\n\n  private _onTouchedCallback: () => void = noop;\n  private _onChangeCallback: (_: string) => void = noop;\n\n  constructor(private _elementRef: ElementRef,\n              private _resizeService: ResizeService,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _ngZone: NgZone,\n              _ts: AdaptTranslateService,\n              _deviceDetector: AdaptDeviceDetectionService,\n              _adaptRadarService: AdaptRadarAngularService) {\n    super(_adaptRadarService, _elementRef, AdaptRadarAngularCustomEventName.AdaptColorPicker);\n\n    this.isMobile = _deviceDetector.isMobile();\n    this.isTablet = _deviceDetector.deviceTablet();\n    this._isDesktop = !(this.isTablet || this.isMobile);\n\n    const lang = _ts.getCurrentLanguage();\n\n    this.ariaLabel = lang['adapt.colorPicker.areaLabel'];\n    this.selectLabel = lang['adapt.common.select'];\n    this.themeColorsTitle = lang['adapt.colorPicker.themeColorsTitle'];\n    this.recentlyUsedTitle = lang['adapt.colorPicker.recentlyUsedTitle'];\n    this.emptyPlaceholder = lang['adapt.common.none'];\n    this.noColorSelected = lang['adapt.colorPicker.noColorSelected'];\n    this.noColorAriaLabel = lang['adapt.colorPicker.noColorAriaLabel'];\n    this.solidColorAriaLabel = lang['adapt.colorPicker.solidColorAriaLabel'];\n    this.colorSmViewLabel = lang['adapt.colorPicker.colorSmViewLabel'];\n\n    this._componentStateChange$\n      .pipe(\n        takeUntil(this._destroy$),\n        throttleTime(0, asyncScheduler, {trailing: true})\n      )\n      .subscribe(() => {\n        const nextEditState = !this.readonly && (this.isInputElementFocus || this.isToggleTypeButtonFocus ||\n          (this.popup && (this.popup.isOpen() || (!this.popup.isOpen() && this.isPopupClosingState))));\n\n        // Check edit mode change\n        if (nextEditState !== this.isEditState) {\n          if (nextEditState) {\n            // Store previously used color on enter edit mode\n            this._previouslySelectedRGBColor = this.selectedRGBColor;\n            this._previouslySelectedColorType = this.colorType;\n          } else {\n            // Check model color for recently used on exit edit mode\n            this._checkModelColorForRecentlyUsed();\n\n            // Update user input on exit edit mode\n            this.userInput = this._getUserInputValue();\n            this.isValid = true;\n\n            // Set touched state on exit edit mode\n            if (!(this.disabled || this.readonly)) {\n              this._onTouchedCallback();\n            }\n          }\n        }\n\n        this.isEditState = nextEditState;\n\n        this.isEmptyState = !this.selectedRGBColor && this._isInputEmptyPlaceholderValue();\n\n        if (this.isEmptyState) {\n          this.userInput = this._getUserInputValue();\n        }\n\n        const newComponentState = [this.isValid, this.isEmptyState, this.isEditState, this.isPopupClosingState].join();\n\n        if (newComponentState !== this._componentState) {\n          this._componentState = newComponentState;\n          this._changeDetectorRef.detectChanges();\n        }\n      });\n\n    this.userInput = this._getUserInputValue();\n    this.placeholder = CP_INPUT_PLACEHOLDERS[this._colorType];\n  }\n\n  ngOnInit(): void {\n    this._updateThemeColorsButtonGroupConfig();\n    this._updateRecentlyColorsButtonGroupConfig();\n\n    // In case we have a Tablet we need to set appropriate sizes for canvas\n    if (this.isTablet) {\n      this._checkTabletSizes();\n    }\n  }\n\n  ngAfterViewInit(): void {\n    const resize$ = new Subject();\n\n    if (this._isDesktop) {\n      resize$\n        .pipe(\n          takeUntil(this._destroy$),\n          throttleTime(100, asyncScheduler, {trailing: true})\n        )\n        .subscribe(() => {\n          this._checkPickerAnchorWidth();\n        });\n\n      this._resizeService.addResizeEventListener(this.wrapperElement.nativeElement, resize$.next.bind(resize$));\n    }\n\n    this._checkPickerAnchorWidth();\n    this._changeDetectorRef.detectChanges();\n  }\n\n  ngOnDestroy(): void {\n    if (this.wrapperElement?.nativeElement) {\n      this._resizeService.removeResizeEventListener(this.wrapperElement.nativeElement);\n    }\n  }\n\n  openPopup(event?: MouseEvent | KeyboardEvent): void {\n    if (this.disabled || this.readonly) {\n      return;\n    }\n\n    if (this.popup.isOpen()) {\n      return;\n    }\n\n    this.popup.open(event);\n  }\n\n  closePopup(): void {\n    this.popup.close();\n  }\n\n  onColorSwatchChange(source: SourceTypes, model: boolean[]): void {\n    let activeColorButton;\n    const activeIndex = model.indexOf(true);\n\n    switch (source) {\n      case SourceTypes.Theme: {\n        activeColorButton = this.themeColorsButtonGroupConfig[activeIndex];\n        break;\n      }\n      case SourceTypes.Recent: {\n        activeColorButton = this.recentlyColorsButtonGroupConfig[activeIndex];\n        break;\n      }\n    }\n\n    if (activeColorButton) {\n      this._setModel(getRGBColorFromString(activeColorButton.value), source, true);\n    }\n  }\n\n  onInputElementInput(event: Event): void {\n    this.userInput = (event.target as HTMLInputElement).value;\n\n    const typedValue = this.userInput\n      .toLowerCase()\n      .replace(/\\s/, '')\n      .trim();\n\n    if (typedValue) {\n      // Try parse as it is first (in case of paste color string)\n      const parsedColorWithoutWrap = getRGBColorFromString(typedValue);\n\n      const parsedColor =\n        parsedColorWithoutWrap ||\n        getRGBColorFromString(`#${typedValue}`) || // Try parse with HEX wrap\n        getRGBColorFromString(`rgb(${typedValue})`); // Try parse with RGB wrap\n\n      if (parsedColor) {\n        this._setColorType(parsedColor.colorType);\n        this._setModel(parsedColor, SourceTypes.Input, false);\n\n        this.isValid = true;\n        this.activeTab = ColorPickerActiveTab.Palette;\n\n      } else {\n        if (this._isInputEmptyPlaceholderValue()) {\n          if (this.showEmptyOption) {\n            this._setModel(null, SourceTypes.Input, false);\n            this.isValid = true;\n            this.activeTab = ColorPickerActiveTab.Empty;\n          }\n\n        } else {\n          this.activeTab = ColorPickerActiveTab.Palette;\n          this.isValid = false;\n        }\n      }\n\n    } else {\n      this.activeTab = ColorPickerActiveTab.Palette;\n      this.isValid = false;\n    }\n\n    this._componentStateChange$.next();\n  }\n\n  onInputElementKeydown(event: KeyboardEvent): void {\n    switch (getEventKeyCode(event)) {\n      case ENTER: {\n        this.openPopup(event);\n        break;\n      }\n      case BACKSPACE:\n      case DELETE: {\n        if (this._isInputEmptyPlaceholderValue()) {\n          this.userInput = '';\n          this.activeTab = ColorPickerActiveTab.Palette;\n          this._componentStateChange$.next();\n        }\n      }\n    }\n  }\n\n  onInputElementFocus(): void {\n    this.isInputElementFocus = true;\n\n    this.focus.emit();\n    this._componentStateChange$.next();\n  }\n\n  onInputElementBlur(): void {\n    this.isInputElementFocus = false;\n\n    this.blur.emit();\n    this._componentStateChange$.next();\n  }\n\n  onInputWrapperClick(event: MouseEvent, inputEl: HTMLInputElement): void {\n    inputEl.focus();\n    this.openPopup(event);\n  }\n\n  onColorChange(color: AdaptRGBColor): void {\n    this._setModel(color, SourceTypes.Picker, true);\n    this._componentStateChange$.next();\n  }\n\n  onPopupOpen(): void {\n    this.open.emit();\n\n    // Check if the selected color is a recently used and put it in the first position of swatches if so\n    if (this.selectedRGBColor) {\n      const colorModel = this.selectedRGBColor.formatHex();\n      const recentColorIndex = this.recentlyColorsButtonGroupConfig.findIndex(color => color.value === colorModel);\n\n      if (recentColorIndex > 0) {\n        const activeRecentlyUsedColor = this.recentlyColorsButtonGroupConfig.splice(recentColorIndex, 1)[0];\n\n        this.recentlyColorsButtonGroupConfig.unshift(activeRecentlyUsedColor);\n\n        const newRecentlyColorsButtonGroupModel = new Array(this.recentlyColorsButtonGroupConfig.length).fill(false);\n\n        newRecentlyColorsButtonGroupModel[0] = true;\n\n        this.recentlyColorsButtonGroupModel = newRecentlyColorsButtonGroupModel;\n      }\n\n      this.activeTab = ColorPickerActiveTab.Palette;\n\n    } else {\n      this.activeTab = ColorPickerActiveTab.Empty;\n    }\n\n    this._changeDetectorRef.detectChanges();\n    this._componentStateChange$.next();\n  }\n\n  onPopupClose(): void {\n    this.close.emit();\n    this.isPopupClosingState = true;\n    this._componentStateChange$.next();\n  }\n\n  onPopupAnimationDone(): void {\n    if (!this.popup.isOpen()) {\n      this.isPopupClosingState = false;\n    }\n\n    this._componentStateChange$.next();\n  }\n\n  onColorTypeButtonClick(): void {\n    this.colorType = this._colorType === ColorType.HEX ? ColorType.RGB : ColorType.HEX;\n\n    if (!(this.disabled || this.readonly) && this.selectedRGBColor) {\n      this._setModel(this.selectedRGBColor, SourceTypes.Input, false);\n    }\n  }\n\n  onColorTypeButtonFocus(): void {\n    this.isToggleTypeButtonFocus = true;\n    this._componentStateChange$.next();\n  }\n\n  onColorTypeButtonBlur(): void {\n    this.isToggleTypeButtonFocus = false;\n    this._componentStateChange$.next();\n  }\n\n  onActiveTabChange(event: ActiveTabChangeEvent): void {\n    this.activeTab = event.index;\n\n    switch (this.activeTab) {\n      case ColorPickerActiveTab.Empty: {\n        this._setModel(null, SourceTypes.Empty, true);\n        break;\n      }\n      case ColorPickerActiveTab.Palette: {\n        this._restorePreviouslyModel();\n        break;\n      }\n    }\n\n    this._componentStateChange$.next();\n  }\n\n  writeValue(value: string): void {\n    this._value = value || '';\n\n    if (isNil(value)) {\n      this.selectedRGBColor = null;\n      this.userInput = this.emptyPlaceholder;\n      this.isEmptyState = true;\n      this.isValid = true;\n      this.activeTab = ColorPickerActiveTab.Empty;\n\n    } else {\n      this.isEmptyState = false;\n\n      const color = getRGBColorFromString(value);\n\n      if (color) {\n        this.selectedRGBColor = color;\n        this._colorType = getColorType(value);\n        this.placeholder = CP_INPUT_PLACEHOLDERS[this._colorType];\n\n        this._previouslySelectedRGBColor = this.selectedRGBColor;\n        this._previouslySelectedColorType = this._colorType;\n\n        this.userInput = this._getUserInputValue();\n\n        this._updatePreviewColor();\n\n        this.isValid = true;\n        this.activeTab = ColorPickerActiveTab.Palette;\n\n      } else {\n        // If color string parse error\n        this.selectedRGBColor = null;\n        this.userInput = value;\n\n        this.isValid = false;\n        this.activeTab = ColorPickerActiveTab.Empty;\n      }\n    }\n\n    if (this._value && this.isValid && !this._isRecentlyUsedColor(this._value)) {\n      this.recentlyColorsButtonGroupModel = new Array(this.recentlyColorsButtonGroupConfig.length).fill(false);\n    }\n\n    // Need additionally detect changes if value set programmatically\n    this._changeDetectorRef.detectChanges();\n  }\n\n  registerOnChange(fn: (_: string) => void): void {\n    this._onChangeCallback = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this._onTouchedCallback = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  private _getUserInputValue(): string {\n    return this.selectedRGBColor ? getStringFromRGBColor(this.selectedRGBColor, this._colorType)\n      .replace('rgb', '')\n      .replace('#', '')\n      .replace('(', '')\n      .replace(')', '') : this.emptyPlaceholder;\n  }\n\n  private _setColorType(colorType: ColorType): void {\n    this._colorType = colorType;\n    this.placeholder = CP_INPUT_PLACEHOLDERS[this._colorType];\n  }\n\n  private _checkModelColorForRecentlyUsed(): void {\n    const modelColorHEX = this.selectedRGBColor?.formatHex();\n\n    if (modelColorHEX && !this._isRecentlyUsedColor(modelColorHEX) && !this._isThemeColor(modelColorHEX)) {\n      this._recentlyUsedColors.splice(-1, 1);\n\n      this._recentlyUsedColors.unshift({\n        value: modelColorHEX,\n        source: SourceTypes.Recent,\n        selected: true\n      });\n\n      this._updateRecentlyColorsButtonGroupConfig();\n      this.recentlyUsedColorsChanged.emit(this.recentlyUsedColors);\n    }\n\n    this._updateSwatchColorsModel();\n  }\n\n  private _updatePreviewColor(): void {\n    this.previewBGColor = this.selectedRGBColor?.formatHex() || CP_TILE_BG_COLOR;\n    this.previewBorderColor = ColorUtils.getBorderColor(this.previewBGColor);\n  }\n\n  private _updateThemeColorsButtonGroupConfig(): void {\n    const componentRootStyles = getComputedStyle(this._elementRef.nativeElement);\n\n    // Root variables are HEX. Ensure to delete whitespaces from value sting.\n    const primaryColor = componentRootStyles.getPropertyValue('--color-primary').trim().toLowerCase();\n    const secondaryColor = componentRootStyles.getPropertyValue('--color-secondary').trim().toLowerCase();\n    const activeColor = componentRootStyles.getPropertyValue('--color-active').trim().toLowerCase();\n    const dangerColor = componentRootStyles.getPropertyValue('--color-danger').trim().toLowerCase();\n    const warningColor = componentRootStyles.getPropertyValue('--color-warning').trim().toLowerCase();\n    const successColor = componentRootStyles.getPropertyValue('--color-success').trim().toLowerCase();\n    const infoColor = componentRootStyles.getPropertyValue('--color-info').trim().toLowerCase();\n\n    // Button group config needs background with hash\n    this.themeColorsButtonGroupConfig = [\n      {\n        name: 'primary',\n        value: primaryColor,\n        background: primaryColor,\n        customClass: 'adapt-cp-theme'\n      },\n      {\n        name: 'secondary',\n        value: secondaryColor,\n        background: secondaryColor,\n        customClass: 'adapt-cp-theme'\n      },\n      {\n        name: 'active',\n        value: activeColor,\n        background: activeColor,\n        customClass: 'adapt-cp-theme'\n      },\n      {\n        name: 'danger',\n        value: dangerColor,\n        background: dangerColor,\n        customClass: 'adapt-cp-theme'\n      },\n      {\n        name: 'warning',\n        value: warningColor,\n        background: warningColor,\n        customClass: 'adapt-cp-theme'\n      },\n      {\n        name: 'success',\n        value: successColor,\n        background: successColor,\n        customClass: 'adapt-cp-theme'\n      },\n      {\n        name: 'info',\n        value: infoColor,\n        background: infoColor,\n        customClass: 'adapt-cp-theme'\n      },\n    ];\n  }\n\n  private _updateRecentlyColorsButtonGroupConfig(): void {\n    const buttonConfig: ButtonConfig[] = [];\n\n    this._recentlyUsedColors.forEach(color => {\n      if (color) {\n        buttonConfig.push({\n          name: color.name || null,\n          value: color.value,\n          background: color.value,\n          customClass: 'adapt-cp-recent'\n        });\n      } else {\n        buttonConfig.push({\n          customClass: 'adapt-cp-group__section__swatch-null empty-swatch adapt-cp-recent',\n          context: {\n            name: 'empty'\n          },\n          disabled: true\n        });\n      }\n    });\n\n    this.recentlyColorsButtonGroupConfig = buttonConfig;\n  }\n\n  // Check both: recently used and theme color models in one method to be sure we have only one checked item for 2 swatches\n  private _updateSwatchColorsModel(): void {\n    const colorModel = this.selectedRGBColor?.formatHex();\n    const newThemeColorsButtonGroupModel = new Array(this.themeColorsButtonGroupConfig.length).fill(false);\n    const newRecentlyColorsButtonGroupModel = new Array(this.recentlyColorsButtonGroupConfig.length).fill(false);\n\n    if (colorModel) {\n      const themeColorIndex = this.themeColorsButtonGroupConfig.findIndex(color => color.value === colorModel);\n\n      if (themeColorIndex !== -1) {\n        newThemeColorsButtonGroupModel[themeColorIndex] = true;\n      } else {\n        const recentColorIndex = this.recentlyColorsButtonGroupConfig.findIndex(color => color.value === colorModel);\n\n        if (recentColorIndex !== -1) {\n          newRecentlyColorsButtonGroupModel[recentColorIndex] = true;\n        }\n      }\n    }\n\n    this.themeColorsButtonGroupModel = newThemeColorsButtonGroupModel;\n    this.recentlyColorsButtonGroupModel = newRecentlyColorsButtonGroupModel;\n  }\n\n  private _isThemeColor(color: string): boolean {\n    return color ? this.themeColorsButtonGroupConfig.some(themeColor => themeColor?.value === color) : false;\n  }\n\n  private _isRecentlyUsedColor(color: string): boolean {\n    return color ? this.recentlyColorsButtonGroupConfig.some(recentlyColor => recentlyColor?.value === color) : false;\n  }\n\n  private _getColorName(color: string): string {\n    for (let i = 0; i < this.themeColorsButtonGroupConfig.length; i++) {\n      if (this.themeColorsButtonGroupConfig[i]?.value === color) {\n        return this.themeColorsButtonGroupConfig[i].name;\n      }\n    }\n\n    return null;\n  }\n\n  private _setModel(color: AdaptRGBColor, source: SourceTypes, updateInput: boolean = false): void {\n    this.selectedRGBColor = color;\n\n    const selectedColor = {\n      name: null,\n      value: null,\n      source: source\n    };\n\n    if (this.selectedRGBColor) {\n      selectedColor.name = this._getColorName(this.selectedRGBColor.formatHex());\n      selectedColor.value = getStringFromRGBColor(this.selectedRGBColor, this._colorType);\n\n      this._previouslySelectedRGBColor = this.selectedRGBColor;\n      this._previouslySelectedColorType = this._colorType;\n    }\n\n    this._onChangeCallback(selectedColor.value);\n    this.onChange.emit(selectedColor.value);\n    this.onSelectColor.emit(selectedColor);\n\n    this._value = selectedColor.value || '';\n\n    this._updateSwatchColorsModel();\n    this._updatePreviewColor();\n\n    if (updateInput) {\n      this.userInput = this._getUserInputValue();\n    }\n\n    this._changeDetectorRef.detectChanges();\n  }\n\n  private _restorePreviouslyModel(): void {\n    this._setColorType(this._previouslySelectedColorType);\n\n    if (this._previouslySelectedRGBColor) {\n      this.selectedRGBColor = this._previouslySelectedRGBColor;\n    } else {\n      const fallbackColor = (this.themeColorsButtonGroupConfig[0]?.value as string) || CP_FALLBACK_COLOR;\n\n      this.selectedRGBColor = getRGBColorFromString(fallbackColor);\n    }\n\n    const selectedColor = {\n      name: this._getColorName(this.selectedRGBColor.formatHex()),\n      value: getStringFromRGBColor(this.selectedRGBColor, this._colorType),\n      source: SourceTypes.Picker\n    };\n\n    this.userInput = this._getUserInputValue();\n    this.activeTab = this.selectedRGBColor ? ColorPickerActiveTab.Palette : ColorPickerActiveTab.Empty;\n\n    this._onChangeCallback(selectedColor.value);\n    this.onChange.emit(selectedColor.value);\n    this.onSelectColor.emit(selectedColor);\n\n    this._value = selectedColor.value || '';\n\n    this._updatePreviewColor();\n    this._updateSwatchColorsModel();\n  }\n\n  // ToDo: move to css\n  private _checkTabletSizes(): void {\n    const tabletWidth = document.documentElement.clientWidth;\n    let value;\n\n    switch (true) {\n      case (tabletWidth > 1600):    // 35vw\n        value = tabletWidth * .35;\n        break;\n      case (tabletWidth > 1200):    // 40vw\n        value = tabletWidth * .35;\n        break;\n      case (tabletWidth > 992):     // 45vw\n        value = tabletWidth * .4;\n        break;\n      case (tabletWidth > 768):     // 50vw\n        value = tabletWidth * .45;\n        break;\n      default:                      // 50vw\n        value = tabletWidth * .5;\n        break;\n    }\n\n    this.pickerDimension = value - this.colorStripWidth - CP_COLOR_MARGIN * 2;\n  }\n\n  private _checkPickerAnchorWidth(): void {\n    const nextResponsiveSmViewValue = this.wrapperElement.nativeElement.offsetWidth < CP_RESPONSIVE_SM_VIEW_BREAKPOINT;\n\n    if (this.isResponsiveSmView !== nextResponsiveSmViewValue) {\n      // The current method works out of zone, so need to return it back manually\n      this._ngZone.run(() => {\n        this.isResponsiveSmView = nextResponsiveSmViewValue;\n\n        // The additional change detection needed for correct work with OnPush strategy\n        this._changeDetectorRef.detectChanges();\n      });\n    }\n  }\n\n  private _isInputEmptyPlaceholderValue(): boolean {\n    return this.userInput.toLowerCase() === this.emptyPlaceholder.toLowerCase();\n  }\n}\n","<div adaptDropdown\n     #adaptDropdown\n     [adaptRadarDisableEventSending]=\"true\"\n     [animationPlacement]=\"'center'\"\n     [placement]=\"placement\"\n     [appendToBody]=\"appendToBody\"\n     [autoClose]=\"'outside'\"\n     [customClass]=\"'a-color-picker'\"\n     [mobileView]=\"{\n        title: label,\n        fullHeight: false,\n        isPicker: true,\n        cancelCB: mobileCancelBtnHandler,\n        doneCB: mobileDoneBtnHandler,\n        doneBtnTitle: mobileView.doneBtnTitle,\n        cancelBtnTitle: mobileView.cancelBtnTitle\n      }\"\n     (onOpen)=\"onPopupOpen()\"\n     (onClose)=\"onPopupClose()\"\n     (popupAnimationDone)=\"onPopupAnimationDone()\">\n  <div adaptDropdownAnchor\n       class=\"adapt-cp\"\n       [class.is-focused]=\"isInputElementFocus\"\n       [class.adapt-cp__no-border]=\"isResponsiveSmView\"\n       [class.adapt-cp_disabled]=\"disabled\"\n       [class.adapt-cp_readonly]=\"readonly && !disabledStyleForReadonlyState\"\n       [class.form-control-disabled-look]=\"readonly && disabledStyleForReadonlyState\"\n       [class.adapt-cp__focused]=\"adaptDropdown.isOpen() || isInputElementFocus\">\n    <ng-container *ngIf=\"!isResponsiveSmView\">\n      <div class=\"adapt-cp__color-wrapper\"\n           [class.adapt-cp__color-wrapper_readonly]=\"readonly\"\n           [class.adapt-cp__color-wrapper_disabled]=\"disabled\"\n           (click)=\"openPopup($event)\">\n        <div *ngIf=\"isEmptyState || !selectedRGBColor\"\n             class=\"adapt-cp-color adapt-cp-empty\">\n        </div>\n        <div *ngIf=\"!(isEmptyState || !selectedRGBColor)\"\n             class=\"adapt-cp-color\"\n             [style.background-color]=\"previewBGColor\"\n             [style.border-color]=\"previewBorderColor\"></div>\n      </div>\n      <div class=\"adapt-cp__input-wrapper\"\n           [class.adapt-cp__input-wrapper_centered]=\"isEmptyState && (!readonly || readonly && disabledStyleForReadonlyState)\"\n           [class.adapt-cp__input-wrapper_readonly]=\"readonly\"\n           [class.adapt-cp__input-wrapper_disabled]=\"disabled\"\n           (click)=\"onInputWrapperClick($event, colorInput)\">\n        <div class=\"adapt-cp-input-fake ltr\"\n             [ngClass]=\"{'hex-mask': colorType === colorTypes.HEX, 'rgb-mask': colorType === colorTypes.RGB}\">\n          <div>\n            <input #colorInput\n                   type=\"text\"\n                   class=\"adapt-cp-input\"\n                   aria-readonly=\"true\"\n                   [attr.aria-label]=\"label || ariaLabel\"\n                   [ngModel]=\"userInput\"\n                   [attr.value]=\"userInput\"\n                   [ngClass]=\"{'transformed': !isEmptyState}\"\n                   (input)=\"onInputElementInput($event)\"\n                   (keydown)=\"onInputElementKeydown($event)\"\n                   (focus)=\"onInputElementFocus()\"\n                   (blur)=\"onInputElementBlur()\"\n                   [placeholder]=\"placeholder\"\n                   [pattern]=\"pattern\"\n                   [disabled]=\"disabled\"\n                   [readOnly]=\"readonly\">\n            <span class=\"adapt-cp-fake-label\" [attr.data-placeholder]=\"placeholder\">{{userInput}}</span>\n          </div>\n        </div>\n      </div>\n      <div class=\"adapt-cp__type-wrapper\"\n           *ngIf=\"!isEmptyState && (!readonly || readonly && disabledStyleForReadonlyState)\"\n           [class.adapt-cp__type-wrapper_disabled]=\"disabled\">\n        <button type=\"button\"\n                role=\"button\"\n                class=\"adapt-cp-inner-type\"\n                (click)=\"onColorTypeButtonClick()\"\n                (focus)=\"onColorTypeButtonFocus()\"\n                (blur)=\"onColorTypeButtonBlur()\"\n                [attr.aria-pressed]=\"colorType === types[0]\">\n          <div *ngFor=\"let type of types\"\n               class=\"adapt-cp-color-type\"\n               [class.active]=\"type === colorType\"\n               [attr.aria-hidden]=\"type !== colorType\">{{type}}\n          </div>\n        </button>\n      </div>\n    </ng-container>\n    <ng-container *ngIf=\"isResponsiveSmView\">\n      <div class=\"adapt-cp__sm-view-wrapper\">\n        <button type=\"button\"\n                role=\"button\"\n                class=\"btn btn-secondary btn-sm adapt-cp sm-view\"\n                [class.disabled]=\"disabled\"\n                [class.readonly]=\"readonly\"\n                [class.is-focused]=\"isInputElementFocus\"\n                [class.adapt-cp_disabled]=\"disabled\"\n                [class.adapt-cp_readonly]=\"readonly && !disabledStyleForReadonlyState\"\n                [class.form-control-disabled-look]=\"readonly && disabledStyleForReadonlyState\"\n                [class.adapt-cp__focused]=\"isEditState && !disabled\"\n                (click)=\"openPopup($event)\">\n          <span class=\"adapt-cp__color-text\">{{colorSmViewLabel}}</span>\n          <div class=\"adapt-cp__input-btn\"\n               *ngIf=\"!(isEmptyState || !selectedRGBColor)\"\n               [style.background-color]=\"!isEmptyState ? previewBGColor : ''\"\n               [style.border-color]=\"!isEmptyState ? previewBorderColor : ''\">\n          </div>\n          <div class=\"adapt-cp__color-wrapper\"\n               *ngIf=\"isEmptyState || !selectedRGBColor\"\n               [class.adapt-cp__color-wrapper_disabled]=\"disabled\"\n               [class.adapt-cp__color-wrapper_readonly]=\"readonly\">\n            <div class=\"adapt-cp-color__empty-svg\"></div>\n          </div>\n        </button>\n      </div>\n    </ng-container>\n  </div>\n  <ng-template adaptDropdownMenuTemplate>\n    <div class=\"dropdown-menu adapt-cp__dropdown-cover\">\n      <div [class.adapt-cp-mobile]=\"isMobile || isTablet\">\n        <div class=\"adapt-cp-current-value\"\n             [class.mx-5]=\"isTablet\"\n             *ngIf=\"isMobile\">\n          <div>\n              <span\n                *ngIf=\"!isEmptyState\">{{ colorType === colorTypes.HEX ? '#' : colorTypes.RGB }}</span>\n            {{ userInput }}\n          </div>\n          <div [style.background-color]=\"previewBGColor\"></div>\n        </div>\n\n        <div class=\"adapt-cp mx-5 my-4\" *ngIf=\"isTablet\">\n          <div class=\"adapt-cp__color-wrapper\">\n            <div class=\"adapt-cp-color\"\n                 [style.background-color]=\"previewBGColor\"\n                 [style.border-color]=\"previewBorderColor\"></div>\n          </div>\n          <div class=\"adapt-cp__input-wrapper\">\n            <div class=\"adapt-cp-input-fake ltr\"\n                 [ngClass]=\"{'hex-mask': colorType === colorTypes.HEX, 'rgb-mask': colorType === colorTypes.RGB}\">\n              <div>\n                <input type=\"text\"\n                       class=\"adapt-cp-input\"\n                       aria-readonly=\"true\"\n                       [attr.aria-label]=\"label || ariaLabel\"\n                       [ngModel]=\"userInput\"\n                       [attr.value]=\"userInput\"\n                       (input)=\"onInputElementInput($event)\"\n                       (keydown)=\"onInputElementKeydown($event)\"\n                       [placeholder]=\"placeholder\"\n                       [pattern]=\"pattern\"\n                       [disabled]=\"disabled\"\n                       [readOnly]=\"readonly\">\n                <span class=\"adapt-cp-fake-label\" [attr.data-placeholder]=\"placeholder\">{{userInput}}</span>\n              </div>\n            </div>\n          </div>\n          <div class=\"adapt-cp__type-wrapper\">\n            <button class=\"adapt-cp-inner-type\"\n                    type=\"button\"\n                    (click)=\"onColorTypeButtonClick()\">\n              <div *ngFor=\"let type of types\"\n                   class=\"adapt-cp-color-type\"\n                   [class.active]=\"type === colorType\">{{type}}\n              </div>\n            </button>\n          </div>\n        </div>\n\n        <adapt-tabset *ngIf=\"showEmptyOption; else solidColorTab\"\n                      [adaptRadarDisableEventSending]=\"true\"\n                      (tab-active-changed)=\"onActiveTabChange($event)\"\n                      [type]=\"'pills'\"\n                      [tab-active]=\"activeTab\"\n                      [carouselMode]=\"false\">\n          <adapt-tab-panel #emptyColorTabsPanel\n                           [isActive]=\"activeTab === 0\"\n                           [icon]=\"'d-icon-no_color'\"\n                           [aria-label]=\"noColorAriaLabel\">\n            <ng-container *ngIf=\"emptyColorTabsPanel.isActive\"\n                          [ngTemplateOutlet]=\"emptyColorTab\"></ng-container>\n          </adapt-tab-panel>\n\n          <adapt-tab-panel #colorPaletteTabsPanel\n                           [isActive]=\"activeTab === 1\"\n                           [icon]=\"'d-icon-solid_color'\"\n                           [aria-label]=\"solidColorAriaLabel\">\n            <ng-container *ngIf=\"colorPaletteTabsPanel.isActive\"\n                          [ngTemplateOutlet]=\"solidColorTab\"></ng-container>\n          </adapt-tab-panel>\n        </adapt-tabset>\n\n        <ng-template #emptyColorTab>\n          <adapt-empty-state class=\"adapt-cp__empty-placeholder\"\n                             [adaptRadarDisableEventSending]=\"true\"\n                             [type]=\"'objects'\"\n                             [label]=\"noColorSelected\"></adapt-empty-state>\n          <!-- Do not remove! Render solidTab here to make both tabs to occupy the same vertical space -->\n          <ng-container\n            *ngTemplateOutlet=\"solidColorTab; context: {isContainerInvisible: true}\"></ng-container>\n        </ng-template>\n\n        <ng-template #solidColorTab let-invisible=\"isContainerInvisible\">\n          <div [ngClass]=\"[invisible ? 'adapt-cp-main__tab_invisible': 'adapt-cp-main__tab']\">\n\n            <div class=\"adapt-cp adapt-cp__dropdown-input\"\n                 *ngIf=\"isResponsiveSmView\"\n                 [class.is-focused]=\"isInputElementFocus\"\n                 [class.adapt-cp_disabled]=\"disabled\"\n                 [class.adapt-cp_readonly]=\"readonly && !disabledStyleForReadonlyState\"\n                 [class.form-control-disabled-look]=\"readonly && disabledStyleForReadonlyState\"\n                 [class.adapt-cp__focused]=\"adaptDropdown.isOpen() || isInputElementFocus\">\n              <div class=\"adapt-cp__color-wrapper\"\n                   [class.adapt-cp__color-wrapper_readonly]=\"readonly\"\n                   [class.adapt-cp__color-wrapper_disabled]=\"disabled\"\n                   (click)=\"openPopup($event)\">\n                <div *ngIf=\"isEmptyState\"\n                     class=\"adapt-cp-color adapt-cp-empty\">\n                </div>\n                <div *ngIf=\"!isEmptyState\"\n                     class=\"adapt-cp-color\"\n                     [style.background-color]=\"previewBGColor\"\n                     [style.border-color]=\"previewBorderColor\"></div>\n              </div>\n              <div class=\"adapt-cp__input-wrapper\"\n                   [class.adapt-cp__input-wrapper_centered]=\"isEmptyState && (!readonly || readonly && disabledStyleForReadonlyState)\"\n                   [class.adapt-cp__input-wrapper_readonly]=\"readonly\"\n                   [class.adapt-cp__input-wrapper_disabled]=\"disabled\"\n                   (click)=\"colorInputResponsiveSmView.focus()\">\n                <div class=\"adapt-cp-input-fake ltr\"\n                     [ngClass]=\"{'hex-mask': colorType === colorTypes.HEX, 'rgb-mask': colorType === colorTypes.RGB}\">\n                  <div>\n                    <input #colorInputResponsiveSmView\n                           type=\"text\"\n                           class=\"adapt-cp-input\"\n                           aria-readonly=\"true\"\n                           [attr.aria-label]=\"label || ariaLabel\"\n                           [ngModel]=\"userInput\"\n                           [attr.value]=\"userInput\"\n                           [ngClass]=\"{'transformed': !isEmptyState}\"\n                           (input)=\"onInputElementInput($event)\"\n                           (keydown)=\"onInputElementKeydown($event)\"\n                           (focus)=\"onInputElementFocus()\"\n                           (blur)=\"onInputElementBlur()\"\n                           [placeholder]=\"placeholder\"\n                           [pattern]=\"pattern\"\n                           [disabled]=\"disabled\"\n                           [readOnly]=\"readonly\">\n                    <span class=\"adapt-cp-fake-label\" [attr.data-placeholder]=\"placeholder\">{{userInput}}</span>\n                  </div>\n                </div>\n              </div>\n              <div class=\"adapt-cp__type-wrapper\"\n                   *ngIf=\"!readonly && !isEmptyState\"\n                   [class.adapt-cp__type-wrapper_disabled]=\"disabled\">\n                <button type=\"button\"\n                        role=\"button\"\n                        class=\"adapt-cp-inner-type\"\n                        (click)=\"onColorTypeButtonClick()\"\n                        [attr.aria-pressed]=\"colorType === types[0]\">\n                  <div *ngFor=\"let type of types\"\n                       class=\"adapt-cp-color-type\"\n                       [class.active]=\"type === colorType\"\n                       [attr.aria-hidden]=\"type !== colorType\">{{type}}\n                  </div>\n                </button>\n              </div>\n            </div>\n\n            <div class=\"adapt-cp__dropdown-color-cover\">\n              <adapt-color [class.mx-5]=\"isTablet\"\n                           [width]=\"pickerDimension\"\n                           [height]=\"pickerDimension\"\n                           [colorStripWidth]=\"colorStripWidth\"\n                           [color]=\"selectedRGBColor\"\n                           (colorChange)=\"onColorChange($event)\"></adapt-color>\n\n              <div *ngIf=\"showRecentlyUsedColors || showThemeColors\" class=\"dropdown-divider\"></div>\n            </div>\n\n            <div class=\"adapt-cp-group\">\n              <div *ngIf=\"showThemeColors\" class=\"adapt-cp-group__section\">\n                <span class=\"adapt-cp-group__section__title\">{{themeColorsTitle}}</span>\n                <div class=\"adapt-cp-group__section__cover\">\n                  <adapt-button-group [(ngModel)]=\"themeColorsButtonGroupModel\"\n                                      [adaptRadarDisableEventSending]=\"true\"\n                                      [config]=\"themeColorsButtonGroupConfig\"\n                                      [groupType]=\"'color-picker'\"\n                                      [multiselectable]=\"false\"\n                                      [uncheckable]=\"false\"\n                                      [useCheckboxStyle]=\"true\"\n                                      [testID]=\"'cp-theme'\"\n                                      (ngModelChange)=\"onColorSwatchChange(sourceTypes.Theme, $event)\"></adapt-button-group>\n                </div>\n              </div>\n\n              <div *ngIf=\"showRecentlyUsedColors\" class=\"adapt-cp-group__section\">\n                <span class=\"adapt-cp-group__section__title\">{{recentlyUsedTitle}}</span>\n\n                <div class=\"adapt-cp-group__section__cover\">\n                  <adapt-button-group [(ngModel)]=\"recentlyColorsButtonGroupModel\"\n                                      [adaptRadarDisableEventSending]=\"true\"\n                                      [config]=\"recentlyColorsButtonGroupConfig\"\n                                      [groupType]=\"'color-picker'\"\n                                      [multiselectable]=\"false\"\n                                      [uncheckable]=\"false\"\n                                      [useCheckboxStyle]=\"true\"\n                                      [testID]=\"'cp-recent'\"\n                                      (ngModelChange)=\"onColorSwatchChange(sourceTypes.Recent, $event)\">\n                    <ng-template let-item=\"item\">\n                        <span *ngIf=\"item?.name==='empty'\"\n                              class=\"preview-svg d-icon-pannel_color\"></span>\n                    </ng-template>\n                  </adapt-button-group>\n                </div>\n              </div>\n            </div>\n          </div>\n        </ng-template>\n\n        <div *ngIf=\"isMobile || isTablet\" class=\"dropdown-divider my-5\"></div>\n\n        <div *ngIf=\"isMobile || isTablet\" class=\"mx-5 mb-5\">\n          <button (click)=\"closePopup()\"\n                  class=\"btn btn-secondary w-100\"\n                  type=\"button\">{{selectLabel}}</button>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n</div>\n"]}