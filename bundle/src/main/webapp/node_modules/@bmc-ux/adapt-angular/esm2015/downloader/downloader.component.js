import { Component, ElementRef, EventEmitter, Input, KeyValueDiffers, Output } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { IconManager } from '../common/uploader/services/icons-manager';
import { AdaptDeviceDetectionService } from '../common/device-detection.service';
import { AdaptTranslateService } from '../common/i18n/index';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "../common/uploader/services/icons-manager";
import * as i3 from "../common/device-detection.service";
import * as i4 from "../common/i18n/index";
import * as i5 from "../common/radar/adapt-radar";
import * as i6 from "../tooltip/tooltip.directive";
import * as i7 from "../truncate-file-name/truncate-file-name.directive";
export class AdaptDownloaderComponent extends AdaptRadarAngularGenericDirective {
    constructor(_differs, _sanitizer, _iconService, _deviceDetection, ts, _adaptRadarService, _elem) {
        super(_adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptDownloader);
        this._differs = _differs;
        this._sanitizer = _sanitizer;
        this._iconService = _iconService;
        this._deviceDetection = _deviceDetection;
        this.ts = ts;
        /**
         * Fires when download button is clicked
         */
        this.downloadLinkPressed = new EventEmitter();
        this.isMobile = false;
        this._defaultConfig = {
            fileName: '',
            downloadURL: '#'
        };
        this._defaultConfig.fileName = ts.getCurrentLanguage()['adapt.downloader.file'];
    }
    ngOnInit() {
        this.isMobile = this._deviceDetection.isMobile();
        this.config = Object.assign(Object.assign({}, this._defaultConfig), this.config);
        this._configDiffers = this._differs.find({}).create();
        this._iconDiffers = this._differs.find({}).create();
    }
    ngDoCheck() {
        const iconChanges = this._iconDiffers.diff(this.icons);
        const configChanges = this._configDiffers.diff(this.config);
        if (iconChanges) {
            this._iconService.init(this.icons);
        }
        if (iconChanges || configChanges) {
            const type = this.config.fileName ? this.config.fileName.split('.').reverse()[0] : '';
            this.icon = this._sanitizer.bypassSecurityTrustHtml(this._iconService.getIcon(type.toLowerCase()));
        }
    }
}
AdaptDownloaderComponent.ɵfac = function AdaptDownloaderComponent_Factory(t) { return new (t || AdaptDownloaderComponent)(i0.ɵɵdirectiveInject(i0.KeyValueDiffers), i0.ɵɵdirectiveInject(i1.DomSanitizer), i0.ɵɵdirectiveInject(i2.IconManager), i0.ɵɵdirectiveInject(i3.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i4.AdaptTranslateService), i0.ɵɵdirectiveInject(i5.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptDownloaderComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptDownloaderComponent, selectors: [["adapt-downloader"]], inputs: { config: "config", icons: "icons", width: "width" }, outputs: { downloadLinkPressed: "downloadLinkPressed" }, features: [i0.ɵɵInheritDefinitionFeature], decls: 10, vars: 8, consts: [["target", "_blank", "placement", "auto", 1, "btn", "adapt-downloader-link", 3, "download", "href", "adaptRadarDisableEventSending", "adaptTooltip", "click"], [1, "adapt-downloader-file-image", 3, "innerHTML"], ["adaptTruncateFileName", "", 1, "adapt-downloader-file-name", 3, "content"], [1, "d-icon-download", "adapt-downloader-download-icon"]], template: function AdaptDownloaderComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "a", 0);
        i0.ɵɵlistener("click", function AdaptDownloaderComponent_Template_a_click_0_listener($event) { return ctx.downloadLinkPressed.emit($event); });
        i0.ɵɵtext(1, "\n  ");
        i0.ɵɵelement(2, "span", 1);
        i0.ɵɵtext(3, "\n  ");
        i0.ɵɵelementStart(4, "span", 2);
        i0.ɵɵtext(5, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(6, "\n  ");
        i0.ɵɵelement(7, "span", 3);
        i0.ɵɵtext(8, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(9, "\n");
    } if (rf & 2) {
        i0.ɵɵstyleProp("width", ctx.width);
        i0.ɵɵproperty("download", ctx.config.fileName)("href", ctx.config.downloadURL, i0.ɵɵsanitizeUrl)("adaptRadarDisableEventSending", true)("adaptTooltip", !ctx.isMobile ? ctx.config.fileName : "");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("innerHTML", ctx.icon, i0.ɵɵsanitizeHtml);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("content", ctx.config.fileName);
    } }, directives: [i6.AdaptTooltipDirective, i7.AdaptTruncateFileNameDirective], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptDownloaderComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-downloader',
                templateUrl: './downloader.component.html'
            }]
    }], function () { return [{ type: i0.KeyValueDiffers }, { type: i1.DomSanitizer }, { type: i2.IconManager }, { type: i3.AdaptDeviceDetectionService }, { type: i4.AdaptTranslateService }, { type: i5.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { config: [{
            type: Input
        }], icons: [{
            type: Input
        }], width: [{
            type: Input
        }], downloadLinkPressed: [{
            type: Output
        }] }); })();
//# sourceMappingURL=downloader.component.js.map