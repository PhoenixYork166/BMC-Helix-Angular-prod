import { Component, EventEmitter, Input, Output, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';
import { isArray, isEmpty, isEqual, isFunction, isNil } from 'lodash-es';
import { formatString, isEmptyOrWhitespace } from '../../../common/utilities';
import { getTagText } from '../../../metatag/index';
import { getDateParts } from '../../../rx/rx-datetime/common/partition.utils';
import { getStructWithDefaults, RxDatetimePickerMode } from '../../../rx/index';
import { AdvancedFilterOptionDataType, booleanDataTypeBlankValue } from './../advanced-filter.models';
import * as i0 from "@angular/core";
import * as i1 from "../../../accordion/accordion.component";
import * as i2 from "@angular/common";
import * as i3 from "../../../rx/rx-radiobutton/adapt-rx-radiobutton-group.component";
import * as i4 from "@angular/forms";
import * as i5 from "../../../rx/rx-radiobutton/adapt-rx-radiobutton.component";
import * as i6 from "../../../rx/rx-datetime/adapt-rx-datetime-range.component";
import * as i7 from "../../../metatag/metatag.component";
import * as i8 from "../../../rx/rx-select/adapt-rx-select.component";
import * as i9 from "../../../rx/rx-counter/adapt-rx-counter.component";
const _c0 = ["inputsForBooleanTypeTemplate"];
const _c1 = ["inputsForTimeTypeTemplate"];
const _c2 = ["inputsForDateTypeTemplate"];
const _c3 = ["inputsForDatetimeTypeTemplate"];
const _c4 = ["inputsForStringTypeTemplate"];
const _c5 = ["inputsForSelectionTypeTemplate"];
const _c6 = ["inputsForNumberTypeTemplate"];
function AdaptFilterControlsComponent_div_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 18);
} }
function AdaptFilterControlsComponent_div_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 19);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r2.getSelectedFiltersCount());
} }
function AdaptFilterControlsComponent_span_17_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 20);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", ctx_r3.hasAllInvalidTags ? "d-icon-exclamation_triangle" : "d-icon-exclamation_circle");
} }
function AdaptFilterControlsComponent_22_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n  ");
} }
function AdaptFilterControlsComponent_22_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, AdaptFilterControlsComponent_22_ng_template_0_Template, 1, 0, "ng-template", 21);
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r4.getFilterOptionInputsTemplate())("ngTemplateOutletContext", ctx_r4.getFilterOptionInputsTemplateParams());
} }
function AdaptFilterControlsComponent_p_24_b_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "b");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const error_r21 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", error_r21.name, " ");
} }
function AdaptFilterControlsComponent_p_24_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 22);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵtemplate(2, AdaptFilterControlsComponent_p_24_b_2_Template, 2, 1, "b", 9);
    i0.ɵɵelementStart(3, "span");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const error_r21 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", error_r21.name);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(error_r21.text);
} }
function AdaptFilterControlsComponent_ng_template_28_adapt_rx_radiobutton_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "adapt-rx-radiobutton", 24);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r24 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("value", ctx_r24.getBooleanTypeBlankValue())("label", ctx_r24.texts.configsTexts.blankLabel)("testID", ctx_r24.testID + "_radio_blank")("disabled", ctx_r24.isInputDisabled(ctx_r24.getBooleanTypeBlankValue()));
} }
function AdaptFilterControlsComponent_ng_template_28_Template(rf, ctx) { if (rf & 1) {
    const _r26 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "adapt-rx-radiobutton-group", 23);
    i0.ɵɵlistener("ngModelChange", function AdaptFilterControlsComponent_ng_template_28_Template_adapt_rx_radiobutton_group_ngModelChange_1_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r25 = i0.ɵɵnextContext(); return ctx_r25.onBooleanTypeFilterOptionModelChange($event); });
    i0.ɵɵtext(2, "\n    ");
    i0.ɵɵelementStart(3, "adapt-rx-radiobutton", 24);
    i0.ɵɵtext(4, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n    ");
    i0.ɵɵelementStart(6, "adapt-rx-radiobutton", 24);
    i0.ɵɵtext(7, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n    ");
    i0.ɵɵtemplate(9, AdaptFilterControlsComponent_ng_template_28_adapt_rx_radiobutton_9_Template, 2, 4, "adapt-rx-radiobutton", 25);
    i0.ɵɵtext(10, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n");
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngModel", ctx_r7.filterValue);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("value", false)("label", ctx_r7.texts.configsTexts.falseLabel)("testID", ctx_r7.testID + "_radio_false")("disabled", ctx_r7.isInputDisabled(false));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("value", true)("label", ctx_r7.texts.configsTexts.trueLabel)("testID", ctx_r7.testID + "_radio_true")("disabled", ctx_r7.isInputDisabled(true));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r7.getBooleanTypeOptionParams().hasBlankValue);
} }
function AdaptFilterControlsComponent_ng_template_31_Template(rf, ctx) { if (rf & 1) {
    const _r28 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "adapt-rx-datetime-range", 26);
    i0.ɵɵlistener("ngModelChange", function AdaptFilterControlsComponent_ng_template_31_Template_adapt_rx_datetime_range_ngModelChange_1_listener($event) { i0.ɵɵrestoreView(_r28); const ctx_r27 = i0.ɵɵnextContext(); return ctx_r27.onTimeTypeFilterOptionModelChange($event); });
    i0.ɵɵtext(2, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n");
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngModel", ctx_r9.filterValue)("testID", ctx_r9.testID)("mode", ctx_r9.datetimeMode.Time)("hasSeconds", true)("inline", true)("inlineLight", true)("texts", ctx_r9.texts.datetimeTexts)("disabled", ctx_r9.isInputDisabled());
} }
function AdaptFilterControlsComponent_ng_template_34_Template(rf, ctx) { if (rf & 1) {
    const _r30 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "adapt-rx-datetime-range", 27);
    i0.ɵɵlistener("ngModelChange", function AdaptFilterControlsComponent_ng_template_34_Template_adapt_rx_datetime_range_ngModelChange_1_listener($event) { i0.ɵɵrestoreView(_r30); const ctx_r29 = i0.ɵɵnextContext(); return ctx_r29.onDateTypeFilterOptionModelChange($event); });
    i0.ɵɵtext(2, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n");
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngModel", ctx_r11.filterValue)("testID", ctx_r11.testID)("mode", ctx_r11.datetimeMode.Date)("inline", true)("inlineLight", true)("texts", ctx_r11.texts.datetimeTexts)("disabled", ctx_r11.isInputDisabled());
} }
function AdaptFilterControlsComponent_ng_template_37_Template(rf, ctx) { if (rf & 1) {
    const _r32 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "adapt-rx-datetime-range", 27);
    i0.ɵɵlistener("ngModelChange", function AdaptFilterControlsComponent_ng_template_37_Template_adapt_rx_datetime_range_ngModelChange_1_listener($event) { i0.ɵɵrestoreView(_r32); const ctx_r31 = i0.ɵɵnextContext(); return ctx_r31.onDateTimeTypeFilterOptionModelChange($event); });
    i0.ɵɵtext(2, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n");
} if (rf & 2) {
    const ctx_r13 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngModel", ctx_r13.filterValue)("testID", ctx_r13.testID)("mode", ctx_r13.datetimeMode.DateTime)("inline", true)("inlineLight", true)("texts", ctx_r13.texts.datetimeTexts)("disabled", ctx_r13.isInputDisabled());
} }
const _c7 = function () { return []; };
function AdaptFilterControlsComponent_ng_template_40_Template(rf, ctx) { if (rf & 1) {
    const _r36 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "adapt-tag-field", 28, 29);
    i0.ɵɵlistener("ngModelChange", function AdaptFilterControlsComponent_ng_template_40_Template_adapt_tag_field_ngModelChange_1_listener($event) { i0.ɵɵrestoreView(_r36); const _r33 = i0.ɵɵreference(2); const ctx_r35 = i0.ɵɵnextContext(); return ctx_r35.onStringTypeFilterOptionModelChange($event, _r33); });
    i0.ɵɵtext(4, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n");
} if (rf & 2) {
    const _r34 = i0.ɵɵreference(3);
    const ctx_r15 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngModel", ctx_r15.getStringDataTypeModel(_r34.model) || i0.ɵɵpureFunction0(8, _c7))("testID", ctx_r15.testID)("ariaLabel", ctx_r15.filterOption.label)("delimiterSymbol", null)("placeholder", ctx_r15.texts.stringTypeTagFieldPlaceholder)("replaceModelOnWrite", true)("disabled", ctx_r15.isInputDisabled())("hideLabel", true);
} }
function AdaptFilterControlsComponent_ng_template_43_Template(rf, ctx) { if (rf & 1) {
    const _r38 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "adapt-rx-select", 30);
    i0.ɵɵlistener("ngModelChange", function AdaptFilterControlsComponent_ng_template_43_Template_adapt_rx_select_ngModelChange_1_listener($event) { i0.ɵɵrestoreView(_r38); const ctx_r37 = i0.ɵɵnextContext(); return ctx_r37.onSelectionTypeFilterOptionModelChange($event); });
    i0.ɵɵtext(2, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n");
} if (rf & 2) {
    const ctx_r17 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("advanced-filter__rx-select_simple", ctx_r17.canShowSimpleInlineSelect());
    i0.ɵɵproperty("inline", true)("multiple", true)("selectAllButton", true)("deselectAllButton", true)("enableFilter", !ctx_r17.canShowSimpleInlineSelect())("optionFormatter", ctx_r17.selectOptionFormatter)("options", ctx_r17.getSelectionTypeOptions())("texts", ctx_r17.getSelectionTypeTexts())("popupMaxHeight", null)("ngModel", ctx_r17.selectionTypeModel)("disabledOptionResolver", ctx_r17.disabledSelectInputResolverBind)("disabled", ctx_r17.isInputDisabled());
} }
function AdaptFilterControlsComponent_ng_template_46_Template(rf, ctx) { if (rf & 1) {
    const _r42 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "div", 31);
    i0.ɵɵtext(2, "\n    ");
    i0.ɵɵelementStart(3, "div", 32);
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelementStart(5, "adapt-rx-counter", 33, 34);
    i0.ɵɵlistener("ngModelChange", function AdaptFilterControlsComponent_ng_template_46_Template_adapt_rx_counter_ngModelChange_5_listener($event) { i0.ɵɵrestoreView(_r42); const _r40 = i0.ɵɵreference(13); const ctx_r41 = i0.ɵɵnextContext(); return ctx_r41.onFilterOptionModelChange([$event, _r40 ? ctx_r41.getNumberDataTypeModel(1) : null]); });
    i0.ɵɵtext(7, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n    ");
    i0.ɵɵelementStart(10, "div", 35);
    i0.ɵɵtext(11, "\n      ");
    i0.ɵɵelementStart(12, "adapt-rx-counter", 36, 37);
    i0.ɵɵlistener("ngModelChange", function AdaptFilterControlsComponent_ng_template_46_Template_adapt_rx_counter_ngModelChange_12_listener($event) { i0.ɵɵrestoreView(_r42); const _r39 = i0.ɵɵreference(6); const ctx_r43 = i0.ɵɵnextContext(); return ctx_r43.onFilterOptionModelChange([_r39 ? ctx_r43.getNumberDataTypeModel(0) : null, $event]); });
    i0.ɵɵtext(14, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(16, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(17, "\n");
} if (rf & 2) {
    const ctx_r19 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("has-danger", ctx_r19.hasValidationErrors);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("label", ctx_r19.texts.counterFromLabel)("ngModel", ctx_r19.getNumberDataTypeModel(0))("min", ctx_r19.getNumberDataTypeMinAllowedValue())("max", ctx_r19.getNumberDataTypeMaxAllowedValue())("disabled", ctx_r19.isInputDisabled())("testID", ctx_r19.testID + "_from");
    i0.ɵɵadvance(7);
    i0.ɵɵproperty("label", ctx_r19.texts.counterToLabel)("ngModel", ctx_r19.getNumberDataTypeModel(1))("min", ctx_r19.getNumberDataTypeMinAllowedValue())("max", ctx_r19.getNumberDataTypeMaxAllowedValue())("disabled", ctx_r19.isInputDisabled())("testID", ctx_r19.testID + "_to");
} }
const _c8 = function (a0, a1) { return { "has-danger": a0, "has-warning": a1 }; };
export class AdaptFilterControlsComponent {
    constructor() {
        this.showSelectedFiltersCount = true;
        this.selectedFiltersIndicationStyle = 'text';
        this.filterValueChange = new EventEmitter();
        this.datetimeMode = RxDatetimePickerMode;
        this.dataTypesInputsTemplates = null;
        this.disabledSelectInputResolverBind = this.disabledSelectInputResolver.bind(this);
    }
    set filterValue(value) {
        if (this.filterValue !== value) {
            this.updateFilterValue(value, false);
        }
        if (this.filterOption.dataType === AdvancedFilterOptionDataType.selection) {
            const options = this.getSelectionTypeOptions();
            this.selectionTypeModel =
                options.length && isArray(value) ? value.map(id => options.find(option => option.id === id)) : null;
        }
    }
    get filterValue() {
        return this._filterValue;
    }
    set texts(value) {
        this._texts = value;
    }
    get texts() {
        return this._texts;
    }
    get hasValidationErrors() {
        return !isEmpty(this.validationErrors);
    }
    ngAfterContentInit() {
        this.initDataTypesConfigsTemplates();
    }
    getFilterOptionInputsTemplate() {
        return this.filterOption.inputsTemplate || this.dataTypesInputsTemplates[this.filterOption.dataType];
    }
    getFilterOptionInputsTemplateParams() {
        return this.filterOption.inputsTemplate ? {
            filterOption: this.filterOption,
            value: this.filterValue,
            filterControlsComponent: this
        } : null;
    }
    getSelectedFiltersCount() {
        if (isNil(this.filterValue)) {
            return;
        }
        if (isArray(this.filterValue)) {
            const definedValues = this.filterValue.filter(value => !isNil(value));
            const selectedFiltersCount = definedValues.length;
            return selectedFiltersCount > 0 ? formatString(this.texts.selectedFiltersCountLabel, selectedFiltersCount) : '';
        }
        else {
            return formatString(this.texts.selectedFiltersCountLabel, 1);
        }
    }
    onFilterOptionModelChange(value) {
        this.updateFilterValue(value, true);
    }
    updateFilterValue(value, emitEvent) {
        this._filterValue = value;
        if (emitEvent) {
            this.filterValueChange.emit(value);
        }
    }
    trackByForErrorMessageFn(index, error) {
        return error.name || index;
    }
    initDataTypesConfigsTemplates() {
        this.dataTypesInputsTemplates = {
            boolean: this.inputsForBooleanTypeTemplate,
            time: this.inputsForTimeTypeTemplate,
            date: this.inputsForDateTypeTemplate,
            datetime: this.inputsForDatetimeTypeTemplate,
            string: this.inputsForStringTypeTemplate,
            selection: this.inputsForSelectionTypeTemplate,
            number: this.inputsForNumberTypeTemplate,
            custom: null
        };
    }
    selectOptionFormatter(option) {
        return option.name;
    }
    isTabDisabled() {
        return isFunction(this.disabledTabResolver)
            && this.disabledTabResolver(this.filterOption);
    }
    isInputDisabled(filterMultipleDataOption) {
        return isFunction(this.disabledInputResolver)
            && this.disabledInputResolver(this.filterOption, filterMultipleDataOption);
    }
    disabledSelectInputResolver(option) {
        return isFunction(this.disabledInputResolver)
            && this.disabledInputResolver(this.filterOption, [option.id]);
    }
    /** Methods for specific types: Start */
    getSelectionTypeOptions() {
        const data = this.filterOption.data;
        return (data && data.selectOptions) || [];
    }
    canShowSimpleInlineSelect() {
        return this.getSelectionTypeOptions().length <= 20;
    }
    getSelectionTypeTexts() {
        const data = this.filterOption.data;
        return data ? Object.assign(Object.assign({}, this.texts.inlineSelectTexts), data.selectTexts) :
            this.texts.inlineSelectTexts;
    }
    getBooleanTypeOptionParams() {
        return this.filterOption.data || {};
    }
    getNumberDataTypeModel(indexOfCounter) {
        const model = this.filterValue;
        return model ? model[indexOfCounter] : null;
    }
    getNumberDataTypeMinAllowedValue() {
        return (this.filterOption.data || {}).minValue;
    }
    getNumberDataTypeMaxAllowedValue() {
        return (this.filterOption.data || {}).maxValue;
    }
    onBooleanTypeFilterOptionModelChange(model) {
        const oldModelValue = this.filterValue;
        this.onFilterOptionModelChange(model === oldModelValue ? null : model);
    }
    getBooleanTypeBlankValue() {
        return booleanDataTypeBlankValue;
    }
    getStringDataTypeModel(ngModelValue) {
        const value = this.filterValue;
        const params = this.filterOption.data;
        if (value && params && typeof params.adjustModelForTagField === 'function') {
            const newValue = params.adjustModelForTagField(value, this.filterOption);
            // Workaround: Don't return new instance to avoid ngModel reassigning
            if (isEqual(ngModelValue, newValue)) {
                return ngModelValue;
            }
            return newValue;
        }
        return value;
    }
    onStringTypeFilterOptionModelChange(model, tagField) {
        const oldFilterValue = this.filterValue;
        const params = (this.filterOption.data || {});
        if (typeof params.adjustTagFieldModelForFilter === 'function') {
            model = params.adjustTagFieldModelForFilter(model, this.filterOption, tagField);
        }
        const newModel = model.filter(tag => !isEmptyOrWhitespace(getTagText(tag)));
        if (newModel.length < model.length && isEqual(newModel, oldFilterValue || [])) {
            tagField.writeValue(newModel);
        }
        else {
            this.onFilterOptionModelChange(newModel);
        }
    }
    onTimeTypeFilterOptionModelChange(model) {
        this.onDateTimeComponentModelChangeBase(model);
    }
    onDateTypeFilterOptionModelChange(model) {
        if (model[0] && !model[0].parseError) {
            model[0] = Object.assign(Object.assign({}, model[0]), { hours: 0, minutes: 0, seconds: 0, milliseconds: 0 });
        }
        if (model[1] && !model[1].parseError) {
            model[1] = Object.assign(Object.assign({}, model[1]), { hours: 0, minutes: 0, seconds: 0, milliseconds: 0 });
        }
        this.onDateTimeComponentModelChangeBase(model);
    }
    onDateTimeTypeFilterOptionModelChange(model) {
        this.onDateTimeComponentModelChangeBase(model);
    }
    onDateTimeComponentModelChangeBase(model) {
        if (model) {
            const todayStruct = this._getTodayDatetimeStruct();
            model = [
                getStructWithDefaults(model[0], todayStruct),
                getStructWithDefaults(model[1], todayStruct)
            ];
        }
        this.onFilterOptionModelChange(model);
    }
    onSelectionTypeFilterOptionModelChange(value) {
        this.onFilterOptionModelChange(value.map(val => val.id));
    }
    /** Methods for specific types: End */
    _getTodayDatetimeStruct() {
        const today = new Date();
        today.setHours(0, 0, 0);
        const { year, month, date, hours, minutes, seconds } = getDateParts(today); // get datetime parts without milliseconds for backward compatibility
        return { year, month, date, hours, minutes, seconds };
    }
}
AdaptFilterControlsComponent.ɵfac = function AdaptFilterControlsComponent_Factory(t) { return new (t || AdaptFilterControlsComponent)(); };
AdaptFilterControlsComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptFilterControlsComponent, selectors: [["adapt-filter-controls"]], viewQuery: function AdaptFilterControlsComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 7);
        i0.ɵɵviewQuery(_c2, 7);
        i0.ɵɵviewQuery(_c3, 7);
        i0.ɵɵviewQuery(_c4, 7);
        i0.ɵɵviewQuery(_c5, 7);
        i0.ɵɵviewQuery(_c6, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputsForBooleanTypeTemplate = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputsForTimeTypeTemplate = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputsForDateTypeTemplate = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputsForDatetimeTypeTemplate = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputsForStringTypeTemplate = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputsForSelectionTypeTemplate = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputsForNumberTypeTemplate = _t.first);
    } }, inputs: { filterOption: "filterOption", validationErrors: "validationErrors", hasAllInvalidTags: "hasAllInvalidTags", testID: "testID", disabledTabResolver: "disabledTabResolver", disabledInputResolver: "disabledInputResolver", showSelectedFiltersCount: "showSelectedFiltersCount", selectedFiltersIndicationStyle: "selectedFiltersIndicationStyle", filterValue: "filterValue", texts: "texts" }, outputs: { filterValueChange: "filterValueChange" }, decls: 49, vars: 13, consts: [[1, "advanced-filter__accordion-tab", 3, "disabled", "renderContentWhenClosed"], ["accordionTab", ""], [1, "card-title-text", "w-100", 3, "ngClass"], [1, "form-control-feedback"], [1, "advanced-filter__label"], [1, "ellipsis"], ["class", "advanced-filter__selected-simple", 4, "ngIf"], ["class", "advanced-filter__selected m-start-2", 4, "ngIf"], ["class", "float-right", 3, "ngClass", 4, "ngIf"], [4, "ngIf"], ["class", "form-control-feedback m-0 pt-1 pb-2 text-danger", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["inputsForBooleanTypeTemplate", ""], ["inputsForTimeTypeTemplate", ""], ["inputsForDateTypeTemplate", ""], ["inputsForDatetimeTypeTemplate", ""], ["inputsForStringTypeTemplate", ""], ["inputsForSelectionTypeTemplate", ""], ["inputsForNumberTypeTemplate", ""], [1, "advanced-filter__selected-simple"], [1, "advanced-filter__selected", "m-start-2"], [1, "float-right", 3, "ngClass"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "form-control-feedback", "m-0", "pt-1", "pb-2", "text-danger"], [1, "advanced-filter__radiobutton-group", 3, "ngModel", "ngModelChange"], ["name", "booleanTypeGroup", 1, "advanced-filter__radiobutton", 3, "value", "label", "testID", "disabled"], ["name", "booleanTypeGroup", "class", "advanced-filter__radiobutton", 3, "value", "label", "testID", "disabled", 4, "ngIf"], [1, "advanced-filter__datetime", 3, "ngModel", "testID", "mode", "hasSeconds", "inline", "inlineLight", "texts", "disabled", "ngModelChange"], [1, "advanced-filter__datetime", 3, "ngModel", "testID", "mode", "inline", "inlineLight", "texts", "disabled", "ngModelChange"], ["mainCls", "advanced-filter__string-tag-field", "popupClass", "advanced-filter__typeahead-window", 3, "ngModel", "testID", "ariaLabel", "delimiterSymbol", "placeholder", "replaceModelOnWrite", "disabled", "hideLabel", "ngModelChange"], ["stringDataTypeTagField", "", "ngModel", "ngModel"], [1, "advanced-filter__rx-select", 3, "inline", "multiple", "selectAllButton", "deselectAllButton", "enableFilter", "optionFormatter", "options", "texts", "popupMaxHeight", "ngModel", "disabledOptionResolver", "disabled", "ngModelChange"], [1, "d-flex"], [1, "advanced-filter__counter-from-wrap"], [1, "advanced-filter__counter-from", 3, "label", "ngModel", "min", "max", "disabled", "testID", "ngModelChange"], ["counterFrom", ""], [1, "advanced-filter__counter-to-wrap"], [1, "advanced-filter__counter-to", 3, "label", "ngModel", "min", "max", "disabled", "testID", "ngModelChange"], ["counterTo", ""]], template: function AdaptFilterControlsComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "adapt-accordion-tab", 0, 1);
        i0.ɵɵtext(2, "\n  ");
        i0.ɵɵelementStart(3, "div", 2);
        i0.ɵɵtext(4, "\n    ");
        i0.ɵɵelementStart(5, "div", 3);
        i0.ɵɵtext(6, "\n      ");
        i0.ɵɵelementStart(7, "div", 4);
        i0.ɵɵtext(8, "\n        ");
        i0.ɵɵelementStart(9, "div", 5);
        i0.ɵɵtext(10);
        i0.ɵɵelementEnd();
        i0.ɵɵtext(11, "\n        ");
        i0.ɵɵtemplate(12, AdaptFilterControlsComponent_div_12_Template, 1, 0, "div", 6);
        i0.ɵɵtext(13, "\n        ");
        i0.ɵɵtemplate(14, AdaptFilterControlsComponent_div_14_Template, 2, 1, "div", 7);
        i0.ɵɵtext(15, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(16, "\n      ");
        i0.ɵɵtemplate(17, AdaptFilterControlsComponent_span_17_Template, 1, 1, "span", 8);
        i0.ɵɵtext(18, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(19, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(20, "\n\n  ");
        i0.ɵɵtext(21, "\n  ");
        i0.ɵɵtemplate(22, AdaptFilterControlsComponent_22_Template, 1, 2, undefined, 9);
        i0.ɵɵtext(23, "\n\n  ");
        i0.ɵɵtemplate(24, AdaptFilterControlsComponent_p_24_Template, 6, 2, "p", 10);
        i0.ɵɵtext(25, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(26, "\n\n");
        i0.ɵɵtext(27, "\n");
        i0.ɵɵtemplate(28, AdaptFilterControlsComponent_ng_template_28_Template, 12, 10, "ng-template", null, 11, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(30, "\n\n");
        i0.ɵɵtemplate(31, AdaptFilterControlsComponent_ng_template_31_Template, 4, 8, "ng-template", null, 12, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(33, "\n\n");
        i0.ɵɵtemplate(34, AdaptFilterControlsComponent_ng_template_34_Template, 4, 7, "ng-template", null, 13, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(36, "\n\n");
        i0.ɵɵtemplate(37, AdaptFilterControlsComponent_ng_template_37_Template, 4, 7, "ng-template", null, 14, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(39, "\n\n");
        i0.ɵɵtemplate(40, AdaptFilterControlsComponent_ng_template_40_Template, 6, 9, "ng-template", null, 15, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(42, "\n\n");
        i0.ɵɵtemplate(43, AdaptFilterControlsComponent_ng_template_43_Template, 4, 14, "ng-template", null, 16, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(45, "\n\n");
        i0.ɵɵtemplate(46, AdaptFilterControlsComponent_ng_template_46_Template, 18, 14, "ng-template", null, 17, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(48, "\n");
    } if (rf & 2) {
        const _r0 = i0.ɵɵreference(1);
        i0.ɵɵproperty("disabled", ctx.isTabDisabled())("renderContentWhenClosed", false);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(10, _c8, ctx.hasValidationErrors && !_r0.isOpen && ctx.hasAllInvalidTags, ctx.hasValidationErrors && !_r0.isOpen && !ctx.hasAllInvalidTags));
        i0.ɵɵadvance(7);
        i0.ɵɵtextInterpolate(ctx.filterOption.label);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.showSelectedFiltersCount && ctx.selectedFiltersIndicationStyle === "mark" && ctx.getSelectedFiltersCount());
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.showSelectedFiltersCount && ctx.selectedFiltersIndicationStyle === "text");
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.hasValidationErrors && !_r0.isOpen);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngIf", _r0.isOpenOrCloseAnimationProcessing);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx.validationErrors)("ngForTrackBy", ctx.trackByForErrorMessageFn);
    } }, directives: [i1.AdaptAccordionTabComponent, i2.NgClass, i2.NgIf, i2.NgForOf, i2.NgTemplateOutlet, i3.AdaptRxRadiobuttonGroupComponent, i4.NgControlStatus, i4.NgModel, i5.AdaptRxRadiobuttonComponent, i6.AdaptRxDatetimeRangeComponent, i7.AdaptMetatagComponent, i8.AdaptRxSelectComponent, i9.AdaptRxCounterComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptFilterControlsComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-filter-controls',
                templateUrl: './filter-controls.component.html',
                encapsulation: ViewEncapsulation.None
            }]
    }], null, { inputsForBooleanTypeTemplate: [{
            type: ViewChild,
            args: ['inputsForBooleanTypeTemplate', { static: true }]
        }], inputsForTimeTypeTemplate: [{
            type: ViewChild,
            args: ['inputsForTimeTypeTemplate', { static: true }]
        }], inputsForDateTypeTemplate: [{
            type: ViewChild,
            args: ['inputsForDateTypeTemplate', { static: true }]
        }], inputsForDatetimeTypeTemplate: [{
            type: ViewChild,
            args: ['inputsForDatetimeTypeTemplate', { static: true }]
        }], inputsForStringTypeTemplate: [{
            type: ViewChild,
            args: ['inputsForStringTypeTemplate', { static: true }]
        }], inputsForSelectionTypeTemplate: [{
            type: ViewChild,
            args: ['inputsForSelectionTypeTemplate', { static: true }]
        }], inputsForNumberTypeTemplate: [{
            type: ViewChild,
            args: ['inputsForNumberTypeTemplate', { static: true }]
        }], filterOption: [{
            type: Input
        }], validationErrors: [{
            type: Input
        }], hasAllInvalidTags: [{
            type: Input
        }], testID: [{
            type: Input
        }], disabledTabResolver: [{
            type: Input
        }], disabledInputResolver: [{
            type: Input
        }], showSelectedFiltersCount: [{
            type: Input
        }], selectedFiltersIndicationStyle: [{
            type: Input
        }], filterValue: [{
            type: Input
        }], texts: [{
            type: Input
        }], filterValueChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=filter-controls.component.js.map