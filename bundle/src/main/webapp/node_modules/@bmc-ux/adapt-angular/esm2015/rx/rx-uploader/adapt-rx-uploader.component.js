import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Injector, Input, KeyValueDiffers, NgZone, Optional, Output, QueryList, Renderer2, Self, TemplateRef, ViewChild, ViewChildren } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Directionality } from '@angular/cdk/bidi';
import { AnimationBuilder } from '@angular/animations';
import { NgControl } from '@angular/forms';
import { fromEvent, merge } from 'rxjs';
import { filter, take, takeUntil, tap } from 'rxjs/operators';
import { isEqual, isNil } from 'lodash-es';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { AdaptRxFeedbackComponent, AdaptRxFormControlDirective } from '../form-control/index';
import { AdaptRxUploaderConfigService } from './adapt-rx-uploader-config.service';
import { formatString, isUndefined, toArray } from '../../common/utilities';
import { retrieveFileSize } from '../../common/uploader/uploader';
import { IconManager } from '../../common/uploader/services/icons-manager';
import { FileManager } from '../../common/uploader/services/file-manager';
import { ANIMATION_DND, ANIMATION_DROP, ANIMATION_INIT_STATE } from '../../common/uploader/animations/animations';
import { UploaderMode, UploaderSelectionMode } from '../../common/uploader/enums/uploader.enum';
import { FILE_IS_UPLOADED_PERCENTAGE } from '../../common/uploader/consts/uploader.consts';
import { MessageStatus } from '../../common/common.enums';
import { AdaptUploaderItemComponent } from '../../uploader-item/index';
import { AdaptTranslateService } from '../../common/i18n/index';
import { adaptWarn } from '../../common/logger';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../../common/uploader/services/file-manager";
import * as i3 from "../../common/uploader/services/icons-manager";
import * as i4 from "./adapt-rx-uploader-config.service";
import * as i5 from "@angular/cdk/bidi";
import * as i6 from "@angular/animations";
import * as i7 from "../../common/i18n/index";
import * as i8 from "../../common/radar/adapt-radar";
import * as i9 from "../form-control/rx-control-label/adapt-rx-control-label.component";
import * as i10 from "@angular/common";
import * as i11 from "../form-control/rx-feedback/adapt-rx-feedback.component";
import * as i12 from "../../uploader-item/uploader-item.component";
import * as i13 from "../../alert/alert.component";
import * as i14 from "../../popover/popover.directive";
import * as i15 from "../../collapse/collapse.directive";
import * as i16 from "../../button/button.component";
import * as i17 from "../../empty-state/empty-state.component";
import * as i18 from "../../tooltip/tooltip.directive";
import * as i19 from "../../common/uploader/pipes/file-type.pipe";
import * as i20 from "../../common/uploader/pipes/file-size.pipe";
const _c0 = ["fileInput"];
const _c1 = ["droppableAreaBlock"];
const _c2 = ["dropEnter"];
const _c3 = ["dnd"];
const _c4 = ["drop"];
const _c5 = ["emptyTmpl"];
const _c6 = ["emptyReadonly"];
const _c7 = ["fileAttachmentControls"];
const _c8 = ["dndAnimationTmpl"];
const _c9 = ["adaptRxFeedbackRef"];
function AdaptRxUploaderComponent_ng_container_19_ng_container_2_adapt_uploader_item_2_Template(rf, ctx) { if (rf & 1) {
    const _r23 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-uploader-item", 23);
    i0.ɵɵlistener("afterFileRemove", function AdaptRxUploaderComponent_ng_container_19_ng_container_2_adapt_uploader_item_2_Template_adapt_uploader_item_afterFileRemove_0_listener($event) { i0.ɵɵrestoreView(_r23); const ctx_r22 = i0.ɵɵnextContext(3); return ctx_r22.removedFromQueue($event); })("fileDeleted", function AdaptRxUploaderComponent_ng_container_19_ng_container_2_adapt_uploader_item_2_Template_adapt_uploader_item_fileDeleted_0_listener($event) { i0.ɵɵrestoreView(_r23); const ctx_r24 = i0.ɵɵnextContext(3); return ctx_r24.fileDeleted($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r21 = ctx.$implicit;
    const ctx_r20 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("disabled", ctx_r20.disabled)("readonly", ctx_r20.readonly)("reusable", ctx_r20.reusable)("indeterminateFileLoader", ctx_r20.indeterminateFileLoader)("url", ctx_r20.url)("deleteUrl", ctx_r20.deleteUrl)("chunkSize", ctx_r20.chunkSize)("customErrors", ctx_r20.customErrors)("enableCustomDownload", ctx_r20.enableCustomDownload)("customDownload", ctx_r20.customDownload)("file", file_r21)("testID", ctx_r20.testID + "_uploader-item")("texts", ctx_r20.texts)("componentAnimation", false);
} }
function AdaptRxUploaderComponent_ng_container_19_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵtemplate(2, AdaptRxUploaderComponent_ng_container_19_ng_container_2_adapt_uploader_item_2_Template, 1, 14, "adapt-uploader-item", 22);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r18 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r18.files)("ngForTrackBy", ctx_r18.trackByFn);
} }
function AdaptRxUploaderComponent_ng_container_19_ng_template_4_Template(rf, ctx) { }
function AdaptRxUploaderComponent_ng_container_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵtemplate(2, AdaptRxUploaderComponent_ng_container_19_ng_container_2_Template, 4, 2, "ng-container", 9);
    i0.ɵɵtext(3, "\n\n          ");
    i0.ɵɵtemplate(4, AdaptRxUploaderComponent_ng_container_19_ng_template_4_Template, 0, 0, "ng-template", 21);
    i0.ɵɵtext(5, "\n        ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r3.files.length);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r3.getTemplate());
} }
function AdaptRxUploaderComponent_ng_container_21_ng_template_2_Template(rf, ctx) { }
function AdaptRxUploaderComponent_ng_container_21_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵtemplate(2, AdaptRxUploaderComponent_ng_container_21_ng_template_2_Template, 0, 0, "ng-template", 21);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r4.getTemplate());
} }
function AdaptRxUploaderComponent_adapt_alert_27_ng_template_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵelementStart(2, "div", 27);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n            ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r30 = i0.ɵɵreference(4);
    const ctx_r29 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptPopover", _r30)("adaptRadarDisableEventSending", true)("appendToBody", ctx_r29.popoverAppendToBody)("placement", "auto")("maxWidth", 600);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                ", ctx_r29.texts.remainingFilesListLabel, "\n              ");
} }
function AdaptRxUploaderComponent_adapt_alert_27_ng_template_2_ng_template_3_ng_template_1_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, ", ");
    i0.ɵɵelementEnd();
} }
function AdaptRxUploaderComponent_adapt_alert_27_ng_template_2_ng_template_3_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n                ");
    i0.ɵɵelementStart(1, "span", 29);
    i0.ɵɵtext(2);
    i0.ɵɵtemplate(3, AdaptRxUploaderComponent_adapt_alert_27_ng_template_2_ng_template_3_ng_template_1_span_3_Template, 2, 0, "span", 9);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n              ");
} if (rf & 2) {
    const file_r33 = ctx.$implicit;
    const last_r35 = ctx.last;
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(file_r33.name);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !last_r35);
} }
function AdaptRxUploaderComponent_adapt_alert_27_ng_template_2_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n              ");
    i0.ɵɵtemplate(1, AdaptRxUploaderComponent_adapt_alert_27_ng_template_2_ng_template_3_ng_template_1_Template, 5, 2, "ng-template", 28);
    i0.ɵɵtext(2, "\n            ");
} if (rf & 2) {
    const msg_r26 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", msg_r26.files);
} }
function AdaptRxUploaderComponent_adapt_alert_27_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0);
    i0.ɵɵtemplate(1, AdaptRxUploaderComponent_adapt_alert_27_ng_template_2_ng_container_1_Template, 5, 6, "ng-container", 9);
    i0.ɵɵtext(2, "\n\n            ");
    i0.ɵɵtemplate(3, AdaptRxUploaderComponent_adapt_alert_27_ng_template_2_ng_template_3_Template, 3, 1, "ng-template", null, 26, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(5, "\n          ");
} if (rf & 2) {
    const msg_r26 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵtextInterpolate1("\n            ", msg_r26.text, "\n            ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", msg_r26.files && msg_r26.files.length);
} }
const _c10 = function (a0, a1, a3) { return { title: a0, content: a1, type: "inline", variant: a3, icon: false }; };
function AdaptRxUploaderComponent_adapt_alert_27_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "adapt-alert", 24);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵtemplate(2, AdaptRxUploaderComponent_adapt_alert_27_ng_template_2_Template, 6, 2, "ng-template", null, 25, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const msg_r26 = ctx.$implicit;
    const _r27 = i0.ɵɵreference(3);
    i0.ɵɵproperty("config", i0.ɵɵpureFunction3(1, _c10, msg_r26.title ? msg_r26.title : "", _r27, msg_r26.variant));
} }
function AdaptRxUploaderComponent_div_35_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 32);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "p", 33);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵelement(5, "span", 34);
    i0.ɵɵtext(6, "\n          ");
    i0.ɵɵelementStart(7, "p", 33);
    i0.ɵɵtext(8);
    i0.ɵɵpipe(9, "fileTypes");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r39 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r39.texts.allowedTypes);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(9, 2, ctx_r39.allowedTypes, ctx_r39.texts.fileTypesDivider));
} }
function AdaptRxUploaderComponent_div_35_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 32);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "p", 33);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵelement(5, "span", 34);
    i0.ɵɵtext(6, "\n          ");
    i0.ɵɵelementStart(7, "p", 35);
    i0.ɵɵtext(8);
    i0.ɵɵpipe(9, "fileSize");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r40 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r40.texts.minFileSize);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(9, 2, ctx_r40.minFileSize));
} }
function AdaptRxUploaderComponent_div_35_div_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 32);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "p", 33);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵelement(5, "span", 34);
    i0.ɵɵtext(6, "\n          ");
    i0.ɵɵelementStart(7, "p", 35);
    i0.ɵɵtext(8);
    i0.ɵɵpipe(9, "fileSize");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r41 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r41.texts.maxFileSize);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(9, 2, ctx_r41.maxFileSize));
} }
function AdaptRxUploaderComponent_div_35_div_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 32);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "p", 33);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵelement(5, "span", 34);
    i0.ɵɵtext(6, "\n          ");
    i0.ɵɵelementStart(7, "p", 33);
    i0.ɵɵtext(8);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r42 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r42.texts.filesCount);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r42.filesCount);
} }
function AdaptRxUploaderComponent_div_35_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 30);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptRxUploaderComponent_div_35_div_2_Template, 11, 5, "div", 31);
    i0.ɵɵtext(3, "\n\n        ");
    i0.ɵɵtemplate(4, AdaptRxUploaderComponent_div_35_div_4_Template, 11, 4, "div", 31);
    i0.ɵɵtext(5, "\n\n        ");
    i0.ɵɵtemplate(6, AdaptRxUploaderComponent_div_35_div_6_Template, 11, 4, "div", 31);
    i0.ɵɵtext(7, "\n\n        ");
    i0.ɵɵtemplate(8, AdaptRxUploaderComponent_div_35_div_8_Template, 10, 2, "div", 31);
    i0.ɵɵtext(9, "\n\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r7.showTypesRestriction && (ctx_r7.allowedTypes == null ? null : ctx_r7.allowedTypes.length));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r7.showMinSizeRestriction && !ctx_r7.isEmptyFileAllowed);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r7.showMaxSizeRestriction);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r7.showFilesCountRestriction && ctx_r7.isMultipleAllowed);
} }
function AdaptRxUploaderComponent_div_39_p_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 47);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r43 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n              ", ctx_r43.filesAddedCount, "\n            ");
} }
function AdaptRxUploaderComponent_div_39_p_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 47);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r44 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("text-info", ctx_r44.maxFileCountUploaded);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n              ", ctx_r44.filesUploadedCount, "\n            ");
} }
function AdaptRxUploaderComponent_div_39_button_10_Template(rf, ctx) { if (rf & 1) {
    const _r51 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 48);
    i0.ɵɵlistener("click", function AdaptRxUploaderComponent_div_39_button_10_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r51); const ctx_r50 = i0.ɵɵnextContext(2); return ctx_r50.cancelAllUploads(); });
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵelement(2, "span", 49);
    i0.ɵɵtext(3, "\n              ");
    i0.ɵɵelementStart(4, "span");
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r45 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
    i0.ɵɵattribute("data-testid", ctx_r45.testID + "_cancel-uploading");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r45.texts.btnCancelAllUploads);
} }
function AdaptRxUploaderComponent_div_39_adapt_uploader_item_13_Template(rf, ctx) { if (rf & 1) {
    const _r54 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-uploader-item", 50);
    i0.ɵɵlistener("afterFileRemove", function AdaptRxUploaderComponent_div_39_adapt_uploader_item_13_Template_adapt_uploader_item_afterFileRemove_0_listener($event) { i0.ɵɵrestoreView(_r54); const ctx_r53 = i0.ɵɵnextContext(2); return ctx_r53.removedFromQueue($event); })("fileDeleted", function AdaptRxUploaderComponent_div_39_adapt_uploader_item_13_Template_adapt_uploader_item_fileDeleted_0_listener($event) { i0.ɵɵrestoreView(_r54); const ctx_r55 = i0.ɵɵnextContext(2); return ctx_r55.fileDeleted($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r52 = ctx.$implicit;
    const ctx_r46 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("disabled", ctx_r46.disabled)("readonly", ctx_r46.readonly)("collapseBlock", false)("reusable", ctx_r46.reusable)("indeterminateFileLoader", ctx_r46.indeterminateFileLoader)("url", ctx_r46.url)("deleteUrl", ctx_r46.deleteUrl)("chunkSize", ctx_r46.chunkSize)("customErrors", ctx_r46.customErrors)("enableCustomDownload", ctx_r46.enableCustomDownload)("customDownload", ctx_r46.customDownload)("file", file_r52)("testID", ctx_r46.testID + "_uploader-item")("texts", ctx_r46.texts);
} }
function AdaptRxUploaderComponent_div_39_adapt_uploader_item_19_Template(rf, ctx) { if (rf & 1) {
    const _r58 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-uploader-item", 51);
    i0.ɵɵlistener("afterFileRemove", function AdaptRxUploaderComponent_div_39_adapt_uploader_item_19_Template_adapt_uploader_item_afterFileRemove_0_listener($event) { i0.ɵɵrestoreView(_r58); const ctx_r57 = i0.ɵɵnextContext(2); return ctx_r57.removedFromQueue($event); })("fileDeleted", function AdaptRxUploaderComponent_div_39_adapt_uploader_item_19_Template_adapt_uploader_item_fileDeleted_0_listener($event) { i0.ɵɵrestoreView(_r58); const ctx_r59 = i0.ɵɵnextContext(2); return ctx_r59.fileDeleted($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r56 = ctx.$implicit;
    const ctx_r48 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("disabled", ctx_r48.disabled)("readonly", ctx_r48.readonly)("reusable", ctx_r48.reusable)("indeterminateFileLoader", ctx_r48.indeterminateFileLoader)("url", ctx_r48.url)("deleteUrl", ctx_r48.deleteUrl)("chunkSize", ctx_r48.chunkSize)("customErrors", ctx_r48.customErrors)("enableCustomDownload", ctx_r48.enableCustomDownload)("customDownload", ctx_r48.customDownload)("file", file_r56)("testID", ctx_r48.testID + "_uploader-item")("texts", ctx_r48.texts);
} }
function AdaptRxUploaderComponent_div_39_div_23_Template(rf, ctx) { if (rf & 1) {
    const _r61 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 52);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementStart(2, "button", 53);
    i0.ɵɵlistener("click", function AdaptRxUploaderComponent_div_39_div_23_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r61); i0.ɵɵnextContext(); const _r47 = i0.ɵɵreference(17); return _r47.toggle(); });
    i0.ɵɵtext(3, "\n              ");
    i0.ɵɵelementStart(4, "span");
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r47 = i0.ɵɵreference(17);
    const ctx_r49 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵattribute("aria-expanded", !_r47.isCollapsed);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(_r47.isCollapsed ? ctx_r49.texts.showMore : ctx_r49.texts.showLess);
} }
function AdaptRxUploaderComponent_div_39_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 36);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "div", 37);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementStart(4, "div", 38);
    i0.ɵɵtext(5, "\n            ");
    i0.ɵɵtemplate(6, AdaptRxUploaderComponent_div_39_p_6_Template, 2, 1, "p", 39);
    i0.ɵɵtext(7, "\n            ");
    i0.ɵɵtemplate(8, AdaptRxUploaderComponent_div_39_p_8_Template, 2, 3, "p", 40);
    i0.ɵɵtext(9, "\n            ");
    i0.ɵɵtemplate(10, AdaptRxUploaderComponent_div_39_button_10_Template, 7, 3, "button", 41);
    i0.ɵɵtext(11, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n\n          ");
    i0.ɵɵtemplate(13, AdaptRxUploaderComponent_div_39_adapt_uploader_item_13_Template, 1, 14, "adapt-uploader-item", 42);
    i0.ɵɵpipe(14, "slice");
    i0.ɵɵtext(15, "\n\n          ");
    i0.ɵɵelementStart(16, "div", 43, 44);
    i0.ɵɵtext(18, "\n            ");
    i0.ɵɵtemplate(19, AdaptRxUploaderComponent_div_39_adapt_uploader_item_19_Template, 1, 13, "adapt-uploader-item", 45);
    i0.ɵɵpipe(20, "slice");
    i0.ɵɵtext(21, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(22, "\n\n          ");
    i0.ɵɵtemplate(23, AdaptRxUploaderComponent_div_39_div_23_Template, 8, 2, "div", 46);
    i0.ɵɵtext(24, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(25, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("ngIf", ctx_r8.isManualMode);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r8.isManualMode);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r8.isUploadingProcess);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind3(14, 8, ctx_r8.files, 0, ctx_r8.visibleFiles))("ngForTrackBy", ctx_r8.trackByFn);
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind2(20, 12, ctx_r8.files, ctx_r8.visibleFiles))("ngForTrackBy", ctx_r8.trackByFn);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r8.files.length > ctx_r8.visibleFiles);
} }
const _c11 = function (a1) { return { title: "Folders uploading", content: a1, type: "inline", variant: "warning" }; };
function AdaptRxUploaderComponent_adapt_alert_44_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "adapt-alert", 54);
    i0.ɵɵtext(1, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext();
    i0.ɵɵproperty("config", i0.ɵɵpureFunction1(1, _c11, ctx_r9.folderUploadingForbiddenMsg));
} }
function AdaptRxUploaderComponent_ng_template_47_Template(rf, ctx) { }
function AdaptRxUploaderComponent_ng_template_50_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "adapt-empty-state", 55);
    i0.ɵɵtext(2, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n");
} if (rf & 2) {
    const ctx_r13 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("type", "objects")("label", ctx_r13.texts.notFound);
} }
function AdaptRxUploaderComponent_ng_template_53_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r65 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 58);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "button", 59);
    i0.ɵɵlistener("click", function AdaptRxUploaderComponent_ng_template_53_div_1_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r65); const ctx_r64 = i0.ɵɵnextContext(2); return ctx_r64.openFileDialog(false); });
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelement(4, "span", 60);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r62 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("adaptTooltip", ctx_r62.selectFilesButtonTooltip)("placement", "auto");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("disabled", ctx_r62.isDisabledSelectBtn);
    i0.ɵɵattribute("data-testid", ctx_r62.testID + "_file-attach")("aria-labelledby", ctx_r62.ariaLabelledby)("aria-describedby", ctx_r62.ariaDescribedBy)("aria-invalid", ctx_r62.hasDangerState)("aria-errormessage", ctx_r62.ariaErrorMessage);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("\n      ", ctx_r62.isMultipleAllowed ? ctx_r62.texts.fileBtn : ctx_r62.texts.fileBtnSingle, "\n    ");
} }
function AdaptRxUploaderComponent_ng_template_53_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r67 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 61);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "button", 59);
    i0.ɵɵlistener("click", function AdaptRxUploaderComponent_ng_template_53_div_3_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r67); const ctx_r66 = i0.ɵɵnextContext(2); return ctx_r66.openFileDialog(true); });
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelement(4, "span", 62);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r63 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("adaptTooltip", ctx_r63.selectFilesButtonTooltip)("adaptRadarDisableEventSending", true)("placement", "auto");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("disabled", ctx_r63.isDisabledSelectBtn);
    i0.ɵɵattribute("data-testid", ctx_r63.testID + "_folder-attach");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("\n      ", ctx_r63.texts.folderBtn, "\n    ");
} }
function AdaptRxUploaderComponent_ng_template_53_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵtemplate(1, AdaptRxUploaderComponent_ng_template_53_div_1_Template, 7, 11, "div", 56);
    i0.ɵɵtext(2, "\n\n  ");
    i0.ɵɵtemplate(3, AdaptRxUploaderComponent_ng_template_53_div_3_Template, 7, 7, "div", 57);
    i0.ɵɵtext(4, "\n");
} if (rf & 2) {
    const ctx_r15 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r15.allowFileUploading);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r15.allowDirUploading);
} }
function AdaptRxUploaderComponent_ng_template_56_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "span", 70);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r69 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("\n          ", ctx_r69.isMultipleAllowed ? ctx_r69.texts.fileMode : ctx_r69.texts.fileModeSingle, "\n        ");
} }
function AdaptRxUploaderComponent_ng_template_56_ng_container_10_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 70);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r75 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n            ", ctx_r75.isMultipleAllowed ? ctx_r75.texts.fileMode : ctx_r75.texts.fileModeSingle, "\n          ");
} }
function AdaptRxUploaderComponent_ng_template_56_ng_container_10_span_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 70);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r76 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n            ", ctx_r76.texts.dirMode, "\n          ");
} }
function AdaptRxUploaderComponent_ng_template_56_ng_container_10_span_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 70);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r77 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n            ", ctx_r77.texts.mixMode, "\n          ");
} }
function AdaptRxUploaderComponent_ng_template_56_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementContainerStart(2, 71);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵtemplate(4, AdaptRxUploaderComponent_ng_template_56_ng_container_10_span_4_Template, 2, 1, "span", 72);
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵtemplate(6, AdaptRxUploaderComponent_ng_template_56_ng_container_10_span_6_Template, 2, 1, "span", 72);
    i0.ɵɵtext(7, "\n          ");
    i0.ɵɵtemplate(8, AdaptRxUploaderComponent_ng_template_56_ng_container_10_span_8_Template, 2, 1, "span", 72);
    i0.ɵɵtext(9, "\n        ");
    i0.ɵɵelementContainerEnd();
    i0.ɵɵtext(10, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r70 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngSwitch", ctx_r70.selectionMode);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngSwitchCase", ctx_r70.fileMode);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngSwitchCase", ctx_r70.dirMode);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngSwitchCase", ctx_r70.mixMode);
} }
function AdaptRxUploaderComponent_ng_template_56_ng_container_18_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "div", 73);
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵelement(4, "div", 74);
    i0.ɵɵtext(5, "\n            ");
    i0.ɵɵelement(6, "div", 75);
    i0.ɵɵtext(7, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n          ");
    i0.ɵɵelementStart(9, "p", 70);
    i0.ɵɵtext(10);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n        ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r72 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("innerHTML", ctx_r72.tmplSvgIcons.tmplCloud, i0.ɵɵsanitizeHtml);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("innerHTML", ctx_r72.tmplSvgIcons.tmplArrow, i0.ɵɵsanitizeHtml);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1("\n            ", ctx_r72.isMultipleAllowed ? ctx_r72.texts.dragAndDrop : ctx_r72.texts.dragAndDropSingle, "\n          ");
} }
function AdaptRxUploaderComponent_ng_template_56_ng_container_20_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "div", 73);
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵelement(4, "div", 76);
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n          ");
    i0.ɵɵelementStart(7, "p", 77);
    i0.ɵɵtext(8);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n        ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r73 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("innerHTML", ctx_r73.tmplSvgIcons.tmplCloudForbidden, i0.ɵɵsanitizeHtml);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1("\n            ", ctx_r73.uploadLimitExceed, "\n          ");
} }
function AdaptRxUploaderComponent_ng_template_56_div_23_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 78);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "div", 79);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelement(4, "div", 80);
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵelement(6, "div", 81);
    i0.ɵɵtext(7, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n        ");
    i0.ɵɵelementStart(9, "p", 70);
    i0.ɵɵtext(10);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r74 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("innerHTML", ctx_r74.tmplSvgIcons.tmplDirectory, i0.ɵɵsanitizeHtml);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("innerHTML", ctx_r74.tmplSvgIcons.tmplSearch, i0.ɵɵsanitizeHtml);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate1("\n          ", ctx_r74.directorySearch, "\n        ");
} }
const _c12 = function (a0, a1, a2, a3) { return { leftStart: a0, rightStart: a1, leftEnd: a2, rightEnd: a3 }; };
const _c13 = function (a0) { return { params: a0 }; };
function AdaptRxUploaderComponent_ng_template_56_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "div", 63);
    i0.ɵɵtext(2, "\n    ");
    i0.ɵɵelementStart(3, "div", 64, 65);
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵelementContainer(6, 21);
    i0.ɵɵtext(7, "\n\n      ");
    i0.ɵɵtemplate(8, AdaptRxUploaderComponent_ng_template_56_ng_container_8_Template, 5, 1, "ng-container", 9);
    i0.ɵɵtext(9, "\n\n      ");
    i0.ɵɵtemplate(10, AdaptRxUploaderComponent_ng_template_56_ng_container_10_Template, 11, 4, "ng-container", 9);
    i0.ɵɵtext(11, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n\n    ");
    i0.ɵɵelementStart(13, "div", 66, 67);
    i0.ɵɵtext(15, "\n      ");
    i0.ɵɵelementStart(16, "div", 68);
    i0.ɵɵtext(17, "\n        ");
    i0.ɵɵtemplate(18, AdaptRxUploaderComponent_ng_template_56_ng_container_18_Template, 12, 3, "ng-container", 9);
    i0.ɵɵtext(19, "\n\n        ");
    i0.ɵɵtemplate(20, AdaptRxUploaderComponent_ng_template_56_ng_container_20_Template, 10, 2, "ng-container", 9);
    i0.ɵɵtext(21, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(22, "\n\n      ");
    i0.ɵɵtemplate(23, AdaptRxUploaderComponent_ng_template_56_div_23_Template, 12, 3, "div", 69);
    i0.ɵɵtext(24, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(25, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(26, "\n");
} if (rf & 2) {
    const ctx_r17 = i0.ɵɵnextContext();
    const _r14 = i0.ɵɵreference(54);
    const _r10 = i0.ɵɵreference(48);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("@uploaderInitStateAnim", i0.ɵɵpureFunction1(14, _c13, i0.ɵɵpureFunction4(9, _c12, ctx_r17.isRtl ? "auto" : "15%", ctx_r17.isRtl ? "15%" : "auto", ctx_r17.isRtl ? "auto" : "0px", ctx_r17.isRtl ? "0px" : "auto")));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", !ctx_r17.isDisableFileDialog ? _r14 : _r10);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r17.isMultipleAllowed);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r17.isMultipleAllowed);
    i0.ɵɵadvance(6);
    i0.ɵɵclassProp("hidden", ctx_r17.readFolder);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r17.isUploadLimitExceed);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r17.isUploadLimitExceed);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r17.readFolder);
} }
const _c14 = ["*"];
let nextUniqueId = 0;
// eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle
export class AdaptRxUploaderComponent extends AdaptRxFormControlDirective {
    constructor(ngControl, _fileManager, _iconService, uploaderConfig, _changeDetectorRef, _renderer, _elRef, _dir, _animationBuilder, _injector, _keyValueDiffers, _ngZone, 
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    document, // https://github.com/angular/angular/issues/20351
    ts, _adaptRadarService, _elem) {
        super(ngControl, ts, _adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptRxUploader, _changeDetectorRef);
        this.ngControl = ngControl;
        this._fileManager = _fileManager;
        this._iconService = _iconService;
        this._renderer = _renderer;
        this._elRef = _elRef;
        this._dir = _dir;
        this._animationBuilder = _animationBuilder;
        this._injector = _injector;
        this._keyValueDiffers = _keyValueDiffers;
        this._ngZone = _ngZone;
        this.document = document;
        this.ts = ts;
        this.controlName = 'uploader';
        this.tmplSvgIcons = {}; // object with svg icons used in the component template
        this.uploaderFeedbackMessages = []; // to track feedback from the FileManager service
        this.isRtl = false; // to detect animation direction
        this.readFolder = false; // to switch svg icons
        this.isUploadLimitExceed = false; // whether amount of dragged files exceeded the allowed files count
        this.isFoldersAllowed = true; // whether folders are allowed to be picked and dropped
        this.uploaderTextsDefault = {
            fileStatus: {}
        }; // default texts configuration
        this.folderUploadingForbiddenMsg = 'Your browser does not support folders uploading.';
        // custom uploader item download
        /**
         * When set to true, allows usage of custom method for file download instead of standard "download" attribute.
         * Please pay attention, if "downloadURL" property is provided for the uploaded file, component will be used with default "download" attribute.
         * @docs-default false
         * @since v10.6.0
         */
        this.enableCustomDownload = false;
        /**
         * When specified, allows popover item of the warning messages to be attached to the body.
         * @docs-default false
         * @since v10.12.0
         */
        this.popoverAppendToBody = false;
        /**
         * When specified, provides an information about file type restrictions.
         * @docs-default true
         * @since v10.14.0
         */
        this.showTypesRestriction = true;
        /**
         * When specified, provides an information about min file size restrictions.
         * @docs-default true
         * @since v10.14.0
         */
        this.showMinSizeRestriction = true;
        /**
         * When specified, provides an information about max file size restrictions.
         * @docs-default true
         * @since v10.14.0
         */
        this.showMaxSizeRestriction = true;
        /**
         * When specified, provides an information about max files count restrictions.
         * @docs-default true
         * @since v10.14.0
         */
        this.showFilesCountRestriction = true;
        /* uploader outputs */
        /**
         * Fires before the file dialog has been opened.
         */
        this.beforeFileDialogOpen = new EventEmitter();
        /**
         * Fires after the file dialog has been opened.
         */
        this.afterFileDialogOpen = new EventEmitter();
        /**
         * Array '<File>'. Fires before files have to be added to the uploader storage.
         */
        this.beforeFilesAdded = new EventEmitter();
        /**
         * Array '<File>'. Fires after files have been added to the uploader storage.
         */
        this.afterFilesAdded = new EventEmitter();
        /**
         * Fires when file data has been dropped to the drop area.
         */
        this.dropped = new EventEmitter();
        /**
         * Fires when file data is dragging over the drop area.
         */
        this.dragOver = new EventEmitter();
        /**
         * Fires when file starts uploading. Provides the file (FileObj) which started uploading.
         */
        this.startFileUploading = new EventEmitter();
        /**
         * Fires when file is uploading. Provides the file (FileObj) which is uploading.
         * @since v12.17.0
         */
        this.processFileUploading = new EventEmitter();
        /**
         * Fires when the file is totally uploaded to the server. Provides the file which ended uploading.
         */
        this.endFileUploading = new EventEmitter();
        /**
         * Fires when error appears during uploading. Provides the file (FileObj) which failed uploading and an error (HttpErrorResponse) while executing the request.
         */
        this.errorFileUploading = new EventEmitter();
        /**
         * Fires when file has been uploaded.
         */
        this.finishedFileUploading = new EventEmitter();
        /**
         * Fires when file has been removed from the uploading queue.
         */
        this.removedFileFromQueue = new EventEmitter();
        /**
         * Fires when file has been deleted from the server.
         */
        this.deletedFile = new EventEmitter();
        /**
         * Fires when file(s) uploading process has been canceled.
         */
        this.cancelUploading = new EventEmitter();
        this._uniqueId = `adapt-rx-uploader-${++nextUniqueId}`;
        // eslint-disable-next-line @typescript-eslint/member-ordering
        /**
         * String for test id data attribute. For test purposes
         * @docs-default adapt-rx-uploader-${++nextUniqueId}
         * @since v10.6.0
         */
        this.testID = this._uniqueId;
        this._isComponentInFocus = false;
        this._droppable = 0;
        this._alreadyUsed = false;
        this._isDragOverMask = false;
        this._uploaded = [];
        this._texts = {};
        this._icons = {};
        this._fileErrors = {};
        this._animationPlayers = {
            visibleDnd: null,
            hiddenDnd: null,
            visibleDrop: null,
            hiddenDrop: null
        };
        this._preventDefault = (e) => {
            e.preventDefault();
            e.stopPropagation();
        };
        this.uploadMode = uploaderConfig.uploadMode;
        this.selectionMode = uploaderConfig.selectionMode;
        this.enableDnD = uploaderConfig.enableDnD;
        this.enableFileDialog = uploaderConfig.enableFileDialog;
        this.allowedTypes = uploaderConfig.allowedTypes;
        this.forbiddenTypes = uploaderConfig.forbiddenTypes;
        this.suppressParallel = uploaderConfig.suppressParallel;
        this.filesCount = uploaderConfig.filesCount;
        this.allowDuplicates = uploaderConfig.allowDuplicates;
        this.showUploadFolderAlert = uploaderConfig.showUploadFolderAlert;
        this.visibleFiles = uploaderConfig.visibleFiles;
        this.reusable = uploaderConfig.reusable;
        this.allowDeletion = uploaderConfig.allowDeletion;
        this.customErrors = uploaderConfig.customErrors;
        this.indeterminateFileLoader = uploaderConfig.indeterminateFileLoader;
        this.url = uploaderConfig.url;
        this.deleteUrl = uploaderConfig.deleteUrl;
        this.chunkSize = uploaderConfig.chunkSize;
        this.maxFileSize = uploaderConfig.maxFileSize;
        this.minFileSize = uploaderConfig.minFileSize;
        this.setDefaultTexts(ts.getCurrentLanguage());
    }
    /**
     * Configurable object for component's text.
     * @docs-default {}
     */
    set texts(value) {
        if (!isEqual(this._texts, value)) {
            this._texts = value;
            this._initTextsObject();
        }
    }
    get texts() {
        return this._texts;
    }
    /**
     * Sets up icons for an appropriate file types. <br />
     * Component includes pre-defined icons for file extensions: <br />.docx, .doc, .xls, .xlsx, .ppt, .pptx, .zip, .7z, .dmg, .rar, .jpg, .jpeg, .png, .bmp, .gif, .avi, .pdf.
     * @docs-default {}
     */
    set icons(value) {
        if (this._iconService && !isEqual(this._icons, value)) {
            this._icons = value;
            this._iconService.init(this._icons);
        }
    }
    get icons() {
        return this._icons;
    }
    /**
     * Configurable object for errors on file upload.
     * @docs-default {}
     */
    set fileErrors(value) {
        if (this._fileManager && !isEqual(this._fileErrors, value)) {
            this._fileErrors = value;
            this._initFileErrorsObject();
        }
    }
    get fileErrors() {
        return this._fileErrors;
    }
    /**
     * Enables drag area for receiving files.
     * @docs-default true
     */
    set enableDnD(value) {
        this._enableDnD = value;
        if (this.droppableArea) {
            this._enableDnD ? this._addAreaDragEvents() : this._removeAreaDragEvents();
        }
    }
    get enableDnD() {
        return this._enableDnD;
    }
    /**
     * Limits the size of files which could be uploaded. The same parsing behavior as for chunkSize.
     * @docs-default 20 MB
     */
    set maxFileSize(value) {
        this._maxFileSize = isNil(value) ? value : retrieveFileSize(value);
    }
    get maxFileSize() {
        return isNil(this._maxFileSize) ? this._maxFileSize : this._maxFileSize.toString();
    }
    /**
     * Prevents files that are smaller in size to be uploaded. If value is not set, empty files are allowed. The same parsing behavior as for chunkSize.
     * @docs-default
     * @since v10.9.0
     */
    set minFileSize(value) {
        this._minFileSize = isNil(value) ? value : retrieveFileSize(value);
    }
    get minFileSize() {
        return isNil(this._minFileSize) ? this._minFileSize : this._minFileSize.toString();
    }
    /**
     The size of the chunk on which file would be divided during uploading. <br />By default it is 1MB chunk. <br />
     You could use string value of the size, for instance, '100 KB' or '100KB'. Also, you could use value without suffix: '1000', in this case it would be equal '1000 B'. <br /> <br />
     In case if 'null' passed it means that file should be loaded as one chunk. <br /> Also the response may have different interface based on 'observe' option passed to 'http.post()' method. <br/>
     More information can be found here:<br/> <a href="https://angular.io/api/common/http/HttpClient#options" target="_blank">https://angular.io/api/common/http/HttpClient#options</a></li><br/> <a href="https://angular.io/api/common/http/HttpResponse" target="_blank">https://angular.io/api/common/http/HttpResponse</a></li>
     * @docs-default 1 MB
     * @since v10.9.0
     */
    set chunkSize(value) {
        this._chunkSize = isNil(value) ? value : retrieveFileSize(value);
    }
    get chunkSize() {
        return isNil(this._chunkSize) ? this._chunkSize : this._chunkSize.toString();
    }
    get isEmptyFileAllowed() {
        return this._minFileSize === 0;
    }
    /**
     * Files added to the fileManager service to be further uploaded
     * or files that have been already uploaded
     */
    get files() {
        return this._fileManager.getFiles();
    }
    /**
     * Whether amount of the uploaded files has been reached
     */
    get maxFileCountUploaded() {
        return this._uploaded.length >= this.filesCount;
    }
    /**
     * Whether amount of the added to the component files has been reached
     */
    get maxFileCountSelected() {
        return this.filesCount <= this.files.length;
    }
    /**
     * Allows/Forbids to select multiple files for uploading
     */
    get isMultipleAllowed() {
        return this.filesCount > 1;
    }
    get selectFilesButtonTooltip() {
        return this.isMultipleAllowed && this.maxFileCountSelected
            ? formatString(this.texts.btnMaxFilesTooltip, this.filesCount)
            : '';
    }
    /**
     * Whether further file(s) attachment is allowed
     */
    get isDisabledSelectBtn() {
        return this.disabled || this.isDisableFileDialog || !this.allowedUploading || this.maxFileCountUploaded
            || this.maxFileCountSelected;
    }
    /**
     * Whether file(s) added to the component is currently uploading to the server
     */
    get isUploadingProcess() {
        return this.files.some(file => file.inUploading);
    }
    /**
     * Represents files count added to the component - only for multiple upload
     */
    get filesAddedCount() {
        return formatString(this.texts.filesAddedCount, this.files.length);
    }
    /**
     * Represents files count that have been already uploaded to the server,
     * available for multiple upload only
     */
    get filesUploadedCount() {
        return formatString(this.texts.filesUploadedCount, this._uploaded.length, this.files.length);
    }
    /**
     * Represents folder name in which files search is currently running
     */
    get directorySearch() {
        return formatString(this.texts.directorySearch, this._currentFolder);
    }
    /**
     * String to be shown once amount of dragged files exceeded the allowed files count
     */
    get uploadLimitExceed() {
        return this.isMultipleAllowed ?
            formatString(this.texts.uploadFilesLimit, this.filesCount - this.files.length) : this.texts.uploadFilesLimitSingle;
    }
    /**
     * Manages ability to select files via file dialog window
     */
    get isDisableFileDialog() {
        return !this.enableFileDialog;
    }
    get isManualMode() {
        return this.uploadMode === UploaderMode.Manual;
    }
    /**
     * Allows/Forbids files uploading depending on config properties
     */
    get allowFileUploading() {
        return this.selectionMode === UploaderSelectionMode.File
            || this.selectionMode === UploaderSelectionMode.Both;
    }
    /**
     * Allows/Forbids directories uploading depending on config properties
     */
    get allowDirUploading() {
        return this.isMultipleAllowed && (this.selectionMode === UploaderSelectionMode.Directory
            || this.selectionMode === UploaderSelectionMode.Both);
    }
    /**
     * Whether file(s) uploading is allowed
     */
    get allowedUploading() {
        return this.reusable || !this._alreadyUsed;
    }
    /**
     * Check if the control has UI error state
     */
    get hasDangerState() {
        return this.adaptRxFeedbackRef.hasUIErrorState;
    }
    get hasWarningState() {
        return Boolean(this.uploaderFeedbackMessages.length) || Boolean(this.warningMessage);
    }
    get fileMode() {
        return UploaderSelectionMode.File;
    }
    get dirMode() {
        return UploaderSelectionMode.Directory;
    }
    get mixMode() {
        return UploaderSelectionMode.Both;
    }
    // eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle
    ngOnInit() {
        super.ngOnInit();
        this.isRtl = this._dir.value === 'rtl';
        this._initTextsObject();
        this._initFileErrorsObject();
        this._iconService.init(this.icons);
        this.tmplSvgIcons = this._iconService.getTmplComponentIcons();
        this._addDocumentDragEvents();
        // feedback from FileManager service
        this._fileManager.messagesSubject
            .pipe(takeUntil(this.destroy$))
            .subscribe((msg) => {
            this.uploaderFeedbackMessages.push(msg);
        });
        this._fileManager.uploadingStartSubject
            .pipe(takeUntil(this.destroy$))
            .subscribe(({ file }) => {
            // revert changes from
            // https://github.bmc.com/bmc-ux/adapt-angular/commit/2751c882186d3a62e33ffb3d44efff436ba1198f
            // since we included the total file size in the RequestBody for each file's chunk send.
            // With the new logic, every file added to the component will be assigned with the unique id
            this._changeDetectorRef.detectChanges();
            this.startFileUploading.emit(file);
        });
        this._fileManager.uploadedSubject
            .pipe(takeUntil(this.destroy$))
            .subscribe((file) => {
            this._uploaded.push(file.fileId);
            this._changeDetectorRef.detectChanges();
            this.endFileUploading.emit(file);
        });
        this._fileManager.canceledSubject
            .pipe(takeUntil(this.destroy$))
            .subscribe((files) => {
            this.cancelUploading.emit(files);
        });
        this._fileManager.errorUploadingSubject
            .pipe(takeUntil(this.destroy$))
            .subscribe((data) => {
            this._changeDetectorRef.detectChanges();
            this.errorFileUploading.emit(data);
        });
        this._fileManager.uploadingProcessSubject
            .pipe(takeUntil(this.destroy$))
            .subscribe((file) => {
            this._changeDetectorRef.detectChanges();
            this.processFileUploading.emit(file);
        });
        this._fileManager.uploadingFinishedSubject
            .pipe(takeUntil(this.destroy$))
            .subscribe((files) => {
            this._changeDetectorRef.detectChanges();
            this.finishedFileUploading.emit(files);
        });
    }
    // eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle
    ngOnDestroy() {
        super.ngOnDestroy();
        if (this.enableDnD) {
            this._removeAreaDragEvents();
        }
        this._removeDocumentDragEvents();
        this.cancelAllUploads();
    }
    // eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (!this.droppableArea) {
            this.droppableArea = this.droppableAreaBlock.nativeElement;
        }
        this._ngZone.onStable
            .pipe(takeUntil(this.destroy$), take(1))
            .subscribe(() => {
            if (isUndefined(this.fileInput.nativeElement.webkitdirectory)) {
                adaptWarn(this.folderUploadingForbiddenMsg);
                this.isFoldersAllowed = false;
                this.selectionMode = UploaderSelectionMode.File;
            }
        });
        fromEvent(this.fileInput.nativeElement, 'change')
            .pipe(takeUntil(this.destroy$))
            .subscribe((e) => {
            this.onChangeFileInput(e);
        });
        fromEvent(this._elRef.nativeElement, 'focusin')
            .pipe(tap((e) => e.stopPropagation()), filter(() => !this._isComponentInFocus), takeUntil(this.destroy$))
            .subscribe(() => {
            this._isComponentInFocus = true;
            this.onFocus.emit();
        });
        merge(fromEvent(document, 'click'), fromEvent(document, 'focusin'), fromEvent(window, 'blur') // in case component is the last element on the page
        ).pipe(filter(() => this._isComponentInFocus && !this._elRef.nativeElement.contains(document.activeElement)), takeUntil(this.destroy$)).subscribe(() => {
            this.onBlur.emit();
            this._isComponentInFocus = false;
            this._onTouched();
        });
        this.enableDnD = this._enableDnD; //run setter
    }
    setDefaultTexts(translation) {
        this.uploaderTextsDefault.fileBtn = translation['adapt.uploader.attachFiles'];
        this.uploaderTextsDefault.folderBtn = translation['adapt.uploader.attachFolder'];
        this.uploaderTextsDefault.allowedTypes = translation['adapt.uploader.allowedTypes'];
        this.uploaderTextsDefault.fileTypesDivider = translation['adapt.uploader.fileTypesDivider'];
        this.uploaderTextsDefault.maxFileSize = translation['adapt.uploader.maxFileSize'];
        this.uploaderTextsDefault.minFileSize = translation['adapt.uploader.minFileSize'];
        this.uploaderTextsDefault.filesCount = translation['adapt.uploader.filesCount'];
        this.uploaderTextsDefault.fileMode = translation['adapt.uploader.fileMode'];
        this.uploaderTextsDefault.dirMode = translation['adapt.uploader.dirMode'];
        this.uploaderTextsDefault.mixMode = translation['adapt.uploader.mixMode'];
        this.uploaderTextsDefault.dragAndDrop = translation['adapt.uploader.dragAndDrop'];
        this.uploaderTextsDefault.uploadFilesLimit = translation['adapt.uploader.uploadFilesLimit'];
        this.uploaderTextsDefault.required = translation['adapt.uploader.required'];
        this.uploaderTextsDefault.showMore = translation['adapt.uploader.showMore'];
        this.uploaderTextsDefault.showLess = translation['adapt.uploader.showLess'];
        this.uploaderTextsDefault.btnMaxFilesTooltip = translation['adapt.uploader.maxFilesTooltip'];
        this.uploaderTextsDefault.btnCancelUploading = translation['adapt.uploader.cancelUploading'];
        this.uploaderTextsDefault.btnRemoveFile = translation['adapt.uploader.removeFile'];
        this.uploaderTextsDefault.btnDeleteFile = translation['adapt.uploader.deleteFile'];
        this.uploaderTextsDefault.btnRemoveCanceled = translation['adapt.uploader.removeCanceled'];
        this.uploaderTextsDefault.btnDownloadFile = translation['adapt.uploader.downloadFile'];
        this.uploaderTextsDefault.fileStatus.canceled = translation['adapt.uploader.fileStatus.canceled'];
        this.uploaderTextsDefault.fileStatus.uploaded = translation['adapt.uploader.fileStatus.uploaded'];
        this.uploaderTextsDefault.fileStatus.uploading = translation['adapt.uploader.fileStatus.uploading'];
        this.uploaderTextsDefault.filesAddedCount = translation['adapt.uploader.filesAddedCount'];
        this.uploaderTextsDefault.filesUploadedCount = translation['adapt.uploader.filesUploadedCount'];
        this.uploaderTextsDefault.directorySearch = translation['adapt.uploader.directorySearch'];
        this.uploaderTextsDefault.remainingFilesListLabel = translation['adapt.uploader.remainingFilesListLabel'];
        this.uploaderTextsDefault.btnCancelAllUploads = translation['adapt.uploader.cancelAllUploads'];
        this.uploaderTextsDefault.notFound = translation['adapt.uploader.notFound'];
        this.uploaderTextsDefault.comma = translation['adapt.common.comma'];
        this.uploaderTextsDefault.fileBtnSingle = translation['adapt.uploaderSingle.attachFiles'];
        this.uploaderTextsDefault.uploadFilesLimitSingle = translation['adapt.uploaderSingle.uploadFilesLimit'];
        this.uploaderTextsDefault.fileModeSingle = translation['adapt.uploaderSingle.fileMode'];
        this.uploaderTextsDefault.dragAndDropSingle = translation['adapt.uploaderSingle.dragAndDrop'];
    }
    trackByFn(index, item) {
        return item;
    }
    /**
     * Rewrite parent method
     */
    writeValue(value) {
        // reset uploaded array
        this._uploaded.length = 0;
        if (Array.isArray(value) && value.length) {
            if (!this.allowedUploading) {
                return;
            }
            this._fileManager.updateFilesStorage(value);
            // store already uploaded files
            value.forEach(file => {
                if (file.uploaded === FILE_IS_UPLOADED_PERCENTAGE && !file.canceled && !file.error) {
                    this._uploaded.push(file.fileId);
                }
            });
            // need to check whether uploaded files count
            // equal to the allowed files amount to mark component as already used
            // once setting value via form control
            this._alreadyUsed = this._uploaded.length === this.filesCount;
            this.uploaderFeedbackMessages = [];
            this._changeDetectorRef.detectChanges();
            return;
        }
        this._fileManager.resetFilesStorage();
        this._changeDetectorRef.detectChanges();
    }
    /**
     *  Cancels all files currently uploading
     */
    cancelAllUploads() {
        if (this.files.every(file => !file.inUploading)) {
            return;
        }
        const uploadInputs = {
            chunkSize: this._chunkSize,
            uploadUrl: this.url,
            customErrors: this.customErrors
        };
        this._fileManager.abortUploading(uploadInputs);
        this._changeDetectorRef.detectChanges();
    }
    /**
     * Opens file dialog window for files selection, fires appropriate events
     */
    openFileDialog(isDir) {
        if (!isUndefined(this.fileInput.nativeElement.webkitdirectory)) {
            this.fileInput.nativeElement.webkitdirectory = !!isDir;
        }
        this.beforeFileDialogOpen.emit(null);
        this.fileInput.nativeElement.click();
        this.afterFileDialogOpen.emit(null);
    }
    onChangeFileInput(e) {
        const files = toArray(e.target.files);
        if (files.length) {
            this._addFiles(files);
        }
        this._onTouched();
    }
    removedFromQueue(file) {
        const index = this._uploaded.findIndex((id) => id === file.fileId);
        if (index >= 0) {
            this._uploaded.splice(index, 1);
        }
        if (!file.canceled) {
            this.removedFileFromQueue.emit(file);
        }
        this.uploaderFeedbackMessages.length = 0;
        this._onChange(this.files);
        this._onTouched();
        this._changeDetectorRef.detectChanges();
    }
    fileDeleted(file) {
        const index = this._uploaded.findIndex((id) => id === file.fileId);
        if (index >= 0) {
            this._uploaded.splice(index, 1);
        }
        this.deletedFile.emit(file);
        this.uploaderFeedbackMessages.length = 0;
        this._onChange(this.files);
        this._onTouched();
        this._changeDetectorRef.detectChanges();
    }
    startUploading() {
        if (this.nonInteractive) {
            return;
        }
        if (this.ngControl.errors) {
            this._onTouched();
            return;
        }
        if (this.allowedUploading) {
            const uploadInputs = {
                chunkSize: this._chunkSize,
                uploadUrl: this.url,
                customErrors: this.customErrors
            };
            this.uploaderFeedbackMessages.length = 0;
            this._fileManager.startUploading(uploadInputs);
            if (!this.reusable) {
                this._alreadyUsed = true;
            }
        }
        this._changeDetectorRef.detectChanges();
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    getTemplate() {
        if (!this.readonly) {
            if (!this.isMultipleAllowed && !this.files.length || this.isMultipleAllowed) {
                return this.enableDnD ? this.dndAnimationTmpl : this.fileAttachmentControls;
            }
        }
        if (this.isMultipleAllowed) {
            return this.files.length ? this.emptyTmpl : this.emptyReadonly;
        }
        if (!this.files.length) {
            return this.emptyReadonly;
        }
    }
    /**
     * Implementation from the base class
     */
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    _focusNativeElement() {
    }
    _initTextsObject() {
        this.texts = Object.assign(Object.assign({}, this.uploaderTextsDefault), this.texts);
    }
    _initFileErrorsObject() {
        this._fileManager.fileErrors = Object.assign(Object.assign({}, this._fileManager.fileErrors), this.fileErrors);
    }
    _dataHasFiles(e) {
        const types = Array.prototype.slice.call(e.dataTransfer.types);
        return types.indexOf('Files') !== -1;
    }
    _addAreaDragEvents() {
        this._onDragEnter = this._ondragEnter.bind(this);
        this.droppableArea.addEventListener('dragenter', this._onDragEnter);
        this._onDragOver = this._ondragOver.bind(this);
        this.droppableArea.addEventListener('dragover', this._onDragOver);
        this._onDragLeave = this._ondragLeave.bind(this);
        this.droppableArea.addEventListener('dragleave', this._onDragLeave);
        this._onDragDrop = this._ondragDrop.bind(this);
        this.droppableArea.addEventListener('drop', this._onDragDrop);
    }
    _addDocumentDragEvents() {
        document.addEventListener('dragover', this._preventDefault);
        document.addEventListener('drop', this._preventDefault);
    }
    _removeAreaDragEvents() {
        this.droppableArea.removeEventListener('dragenter', this._onDragEnter);
        this.droppableArea.removeEventListener('dragover', this._onDragOver);
        this.droppableArea.removeEventListener('dragleave', this._onDragLeave);
        this.droppableArea.removeEventListener('drop', this._onDragDrop);
    }
    _removeDocumentDragEvents() {
        document.removeEventListener('dragover', this._preventDefault);
        document.removeEventListener('drop', this._preventDefault);
    }
    _ondragEnter(e) {
        this._preventDefault(e);
        if (this.nonInteractive || this._droppable || !this._dataHasFiles(e) || this.maxFileCountSelected) {
            return;
        }
        // event.dataTransfer.items is not available in Internet Explorer and Safari
        // Mime types or number of dragged files can therefore not be determined in drag events, only on drop
        // so we explicitly set the value to 0
        const dndFilesCount = e.dataTransfer.items ? e.dataTransfer.items.length : 0;
        this.isUploadLimitExceed = dndFilesCount > (this.filesCount - this.files.length);
        this._isDragOverMask = true;
        this._renderer.addClass(this.droppableArea, 'adapt-rx-drop-area');
        this._droppable++;
        this._createAnimationPlayers();
        this._animateDndChange();
    }
    _ondragOver(e) {
        this._preventDefault(e);
        if (this.nonInteractive || this.isUploadLimitExceed || this.maxFileCountSelected) {
            e.dataTransfer.dropEffect = 'none';
        }
        this.dragOver.emit(null);
    }
    _ondragLeave(e) {
        this._preventDefault(e);
        if (e.target !== this.droppableArea) {
            return;
        }
        this._droppable--;
        if (!this._droppable) {
            this._isDragOverMask = false;
            this._animateDndChange();
            this._renderer.removeClass(this.droppableArea, 'adapt-rx-drop-area');
            this._onTouched();
        }
    }
    _ondragDrop(e) {
        this._preventDefault(e);
        this.uploaderFeedbackMessages.length = 0;
        if (isUndefined(this.fileInput.nativeElement.webkitdirectory)) {
            const files = toArray(e.dataTransfer.files);
            this._addFilesEmission(files);
            return;
        }
        const items = toArray(e.dataTransfer.items);
        this._resolveDroppedItems(items)
            .then((values) => {
            this._addFilesEmission(values);
        })
            .catch((err) => {
            this.uploaderFeedbackMessages.push({
                title: err.name,
                text: err.message,
                variant: MessageStatus.Warning
            });
            this._addFilesEmission([]);
        });
    }
    _resolveDroppedItems(items) {
        return new Promise((resolve, reject) => {
            const promises = [];
            let files = [];
            items.forEach((item) => {
                const itemEntry = item.webkitGetAsEntry();
                if (itemEntry.isDirectory) {
                    // Allowed to upload directories and browser know about directories
                    if (this.allowDirUploading) {
                        this.readFolder = true;
                        promises.push(this._getDirectory(itemEntry));
                        return;
                    }
                    // check if folderSuppress error is already added to the uploaderFeedbackMessages array
                    const messageIndex = this.uploaderFeedbackMessages
                        .map(message => message.text)
                        .indexOf(this._fileManager.fileErrors.folderSuppress);
                    if (messageIndex === -1) {
                        this.uploaderFeedbackMessages.push({
                            text: this._fileManager.fileErrors.folderSuppress,
                            variant: MessageStatus.Warning
                        });
                    }
                }
                if (itemEntry.isFile) {
                    if (this.selectionMode === UploaderSelectionMode.Directory) {
                        // check if fileSuppress error is already added to the uploaderFeedbackMessages array
                        const messageIndex = this.uploaderFeedbackMessages
                            .map(message => message.text)
                            .indexOf(this._fileManager.fileErrors.fileSuppress);
                        if (messageIndex === -1) {
                            this.uploaderFeedbackMessages.push({
                                text: this._fileManager.fileErrors.fileSuppress,
                                variant: MessageStatus.Warning
                            });
                        }
                        return;
                    }
                    promises.push(this._getFile(itemEntry));
                }
            });
            Promise.all(promises)
                .then((values) => {
                files = values.reduce((acc, item) => {
                    return acc.concat(item);
                }, files);
                this.readFolder = false;
                resolve(files);
            })
                .catch((err) => {
                this.uploaderFeedbackMessages.push({
                    title: err.name,
                    text: err.message,
                    variant: MessageStatus.Warning
                });
                this.readFolder = false;
                reject(err);
            });
        });
    }
    _getDirectory(item) {
        this._currentFolder = item.name;
        return new Promise((resolve, reject) => {
            const promises = [];
            const reader = item.createReader();
            reader.readEntries((entries) => {
                entries.forEach((entry) => {
                    let promise;
                    if (entry.isDirectory) {
                        promise = this._getDirectory(entry);
                    }
                    else if (entry.isFile) {
                        promise = this._getFile(entry, item.fullPath.slice(1));
                    }
                    if (promise) {
                        promises.push(promise);
                    }
                });
                Promise.all(promises)
                    .then((values) => {
                    let dirFiles = [];
                    dirFiles = values.reduce((acc, value) => {
                        return acc.concat(value);
                    }, dirFiles);
                    resolve(dirFiles);
                })
                    .catch((err) => {
                    reject(err);
                });
            });
        });
    }
    _getFile(item, dirName = '') {
        return new Promise((resolve, reject) => {
            item.file((f) => {
                f.fullPath = dirName ? `${dirName}/${f.name}` : f.name;
                resolve(f);
            }, (err) => {
                reject(err);
            });
        });
    }
    _addFilesEmission(files) {
        this.dropped.emit(null);
        if (files.length) {
            this._addFiles(files);
        }
        this._droppable = 0;
        this._isDragOverMask = false;
        this._animateDndChange();
        this._renderer.removeClass(this.droppableArea, 'adapt-rx-drop-area');
        this._onChange(this.files);
        this._onTouched();
        this._changeDetectorRef.detectChanges();
    }
    _addFiles(files) {
        this.uploaderFeedbackMessages.length = 0;
        if (!this.allowedUploading) {
            return;
        }
        if (this.uploadMode === UploaderMode.Auto && !this.reusable) {
            this._alreadyUsed = true;
        }
        this.beforeFilesAdded.emit(files);
        this._fileManager.addFiles(files, this.allowDeletion, this.uploadMode, this.suppressParallel, this.allowDuplicates, this._maxFileSize, this._chunkSize, this.allowedTypes, this.forbiddenTypes, this.filesCount, this.customErrors, this.url, this._minFileSize);
        this.afterFilesAdded.emit(this.files);
        this._onChange(this.files);
        this.fileInput.nativeElement.value = '';
        this._changeDetectorRef.detectChanges();
    }
    _createAnimationPlayers() {
        const players = Object.keys(this._animationPlayers);
        players.forEach((player) => {
            if (this._animationPlayers[player]) {
                this._animationPlayers[player].destroy();
            }
        });
        this._animationPlayers.hiddenDnd = this._animationBuilder.build(ANIMATION_DND.hidden[this._dir.value])
            .create(this.dnd.nativeElement);
        this._animationPlayers.visibleDnd = this._animationBuilder.build(ANIMATION_DND.visible[this._dir.value])
            .create(this.dnd.nativeElement);
        this._animationPlayers.hiddenDrop = this._animationBuilder.build(ANIMATION_DROP.hidden[this._dir.value])
            .create(this.drop.nativeElement);
        this._animationPlayers.visibleDrop = this._animationBuilder.build(ANIMATION_DROP.visible[this._dir.value])
            .create(this.drop.nativeElement);
    }
    _animateDndChange() {
        this._animationPlayers.hiddenDnd.reset();
        this._animationPlayers.visibleDnd.reset();
        this._animationPlayers.hiddenDrop.reset();
        this._animationPlayers.visibleDrop.reset();
        const currentPlayerDnd = this._isDragOverMask ? this._animationPlayers.hiddenDnd : this._animationPlayers.visibleDnd;
        const currentPlayerDrop = this._isDragOverMask ? this._animationPlayers.visibleDrop : this._animationPlayers.hiddenDrop;
        currentPlayerDnd.play();
        currentPlayerDrop.play();
        currentPlayerDrop.onDone(() => {
            if (!this._droppable) {
                this.isUploadLimitExceed = false;
            }
        });
    }
}
AdaptRxUploaderComponent.ɵfac = function AdaptRxUploaderComponent_Factory(t) { return new (t || AdaptRxUploaderComponent)(i0.ɵɵdirectiveInject(i1.NgControl, 10), i0.ɵɵdirectiveInject(i2.FileManager, 10), i0.ɵɵdirectiveInject(i3.IconManager, 10), i0.ɵɵdirectiveInject(i4.AdaptRxUploaderConfigService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i5.Directionality), i0.ɵɵdirectiveInject(i6.AnimationBuilder), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i0.KeyValueDiffers), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i7.AdaptTranslateService), i0.ɵɵdirectiveInject(i8.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptRxUploaderComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptRxUploaderComponent, selectors: [["adapt-rx-uploader"]], viewQuery: function AdaptRxUploaderComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
        i0.ɵɵviewQuery(_c1, 5);
        i0.ɵɵviewQuery(_c2, 5);
        i0.ɵɵviewQuery(_c3, 5);
        i0.ɵɵviewQuery(_c4, 5);
        i0.ɵɵviewQuery(_c5, 7);
        i0.ɵɵviewQuery(_c6, 7);
        i0.ɵɵviewQuery(_c7, 7);
        i0.ɵɵviewQuery(_c8, 7);
        i0.ɵɵviewQuery(_c9, 7);
        i0.ɵɵviewQuery(AdaptUploaderItemComponent, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.droppableAreaBlock = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropEnter = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dnd = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.drop = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.emptyTmpl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.emptyReadonly = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileAttachmentControls = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dndAnimationTmpl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.adaptRxFeedbackRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filesList = _t);
    } }, inputs: { uploadMode: "uploadMode", selectionMode: "selectionMode", enableFileDialog: "enableFileDialog", allowedTypes: "allowedTypes", forbiddenTypes: "forbiddenTypes", suppressParallel: "suppressParallel", filesCount: "filesCount", allowDuplicates: "allowDuplicates", showUploadFolderAlert: "showUploadFolderAlert", visibleFiles: "visibleFiles", reusable: "reusable", allowDeletion: "allowDeletion", customErrors: "customErrors", indeterminateFileLoader: "indeterminateFileLoader", url: "url", deleteUrl: "deleteUrl", droppableArea: "droppableArea", enableCustomDownload: "enableCustomDownload", customDownload: "customDownload", popoverAppendToBody: "popoverAppendToBody", showTypesRestriction: "showTypesRestriction", showMinSizeRestriction: "showMinSizeRestriction", showMaxSizeRestriction: "showMaxSizeRestriction", showFilesCountRestriction: "showFilesCountRestriction", texts: "texts", icons: "icons", fileErrors: "fileErrors", enableDnD: "enableDnD", maxFileSize: "maxFileSize", minFileSize: "minFileSize", chunkSize: "chunkSize", testID: "testID" }, outputs: { beforeFileDialogOpen: "beforeFileDialogOpen", afterFileDialogOpen: "afterFileDialogOpen", beforeFilesAdded: "beforeFilesAdded", afterFilesAdded: "afterFilesAdded", dropped: "dropped", dragOver: "dragOver", startFileUploading: "startFileUploading", processFileUploading: "processFileUploading", endFileUploading: "endFileUploading", errorFileUploading: "errorFileUploading", finishedFileUploading: "finishedFileUploading", removedFileFromQueue: "removedFileFromQueue", deletedFile: "deletedFile", cancelUploading: "cancelUploading" }, features: [i0.ɵɵProvidersFeature([FileManager, IconManager]), i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c14, decls: 59, vars: 31, consts: [["type", "file", "hidden", "", 3, "multiple"], ["fileInput", ""], [1, "adapt-rx-uploader"], [1, "adapt-rx-uploader__wrp"], ["droppableAreaBlock", ""], [1, "adapt-rx-uploader__content"], ["dropEnter", ""], [3, "for", "label", "requiredLabel", "showRequiredLabel", "tooltip", "testID"], [1, "adapt-rx-uploader__controls"], [4, "ngIf"], [1, "adapt-rx-uploader__feedback-info", "mt-1"], ["class", "adapt-rx-uploader__feedback-message", 3, "config", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "ariaErrorMessage", "errors", "warningMessage", "controlTouched"], ["adaptRxFeedbackRef", ""], ["class", "adapt-rx-uploader__restrict mt-1", 4, "ngIf"], ["class", "adapt-rx-uploader__files-list mt-3", 4, "ngIf"], [3, "config", 4, "ngIf"], ["emptyTmpl", ""], ["emptyReadonly", ""], ["fileAttachmentControls", ""], ["dndAnimationTmpl", ""], [3, "ngTemplateOutlet"], [3, "disabled", "readonly", "reusable", "indeterminateFileLoader", "url", "deleteUrl", "chunkSize", "customErrors", "enableCustomDownload", "customDownload", "file", "testID", "texts", "componentAnimation", "afterFileRemove", "fileDeleted", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "disabled", "readonly", "reusable", "indeterminateFileLoader", "url", "deleteUrl", "chunkSize", "customErrors", "enableCustomDownload", "customDownload", "file", "testID", "texts", "componentAnimation", "afterFileRemove", "fileDeleted"], [1, "adapt-rx-uploader__feedback-message", 3, "config"], ["errorMessageTemplate", ""], ["remainingFileListTemplate", ""], [1, "feedback__remaining-files-list", 3, "adaptPopover", "adaptRadarDisableEventSending", "appendToBody", "placement", "maxWidth"], ["ngFor", "", 3, "ngForOf"], [1, "file-name"], [1, "adapt-rx-uploader__restrict", "mt-1"], ["class", "restrict-item", 4, "ngIf"], [1, "restrict-item"], [1, "d-inline-block", "mb-0"], [1, "letter-space"], [1, "d-inline-block", "mb-0", "ltr"], [1, "adapt-rx-uploader__files-list", "mt-3"], [1, "adapt-rx-uploader__files-list__wrp"], [1, "files-list__title", "mb-1"], ["role", "status", "class", "font-weight-bold m-start-3 mb-0", 4, "ngIf"], ["role", "status", "class", "font-weight-bold m-start-3 mb-0", 3, "text-info", 4, "ngIf"], ["adapt-button", "", "btn-type", "tertiary", "class", "adapt-rx-uploader__cancel-uploading", 3, "adaptRadarDisableEventSending", "click", 4, "ngIf"], [3, "disabled", "readonly", "collapseBlock", "reusable", "indeterminateFileLoader", "url", "deleteUrl", "chunkSize", "customErrors", "enableCustomDownload", "customDownload", "file", "testID", "texts", "afterFileRemove", "fileDeleted", 4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "collapse"], ["fileList", "collapse"], [3, "disabled", "readonly", "reusable", "indeterminateFileLoader", "url", "deleteUrl", "chunkSize", "customErrors", "enableCustomDownload", "customDownload", "file", "testID", "texts", "afterFileRemove", "fileDeleted", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "d-flex justify-content-end mt-1", 4, "ngIf"], ["role", "status", 1, "font-weight-bold", "m-start-3", "mb-0"], ["adapt-button", "", "btn-type", "tertiary", 1, "adapt-rx-uploader__cancel-uploading", 3, "adaptRadarDisableEventSending", "click"], [1, "d-icon-cross_adapt", "pr-1"], [3, "disabled", "readonly", "collapseBlock", "reusable", "indeterminateFileLoader", "url", "deleteUrl", "chunkSize", "customErrors", "enableCustomDownload", "customDownload", "file", "testID", "texts", "afterFileRemove", "fileDeleted"], [3, "disabled", "readonly", "reusable", "indeterminateFileLoader", "url", "deleteUrl", "chunkSize", "customErrors", "enableCustomDownload", "customDownload", "file", "testID", "texts", "afterFileRemove", "fileDeleted"], [1, "d-flex", "justify-content-end", "mt-1"], [1, "btn", "btn-link", "btn-uploader-collapse-btn", 3, "click"], [3, "config"], [3, "type", "label"], ["class", "d-inline-block adapt-rx-uploader-file-attach-btn__wrp", 3, "adaptRadarDisableEventSending", "adaptTooltip", "placement", 4, "ngIf"], ["class", "d-inline-block adapt-rx-uploader-folder-attach-btn__wrp", 3, "adaptTooltip", "adaptRadarDisableEventSending", "placement", 4, "ngIf"], [1, "d-inline-block", "adapt-rx-uploader-file-attach-btn__wrp", 3, "adaptRadarDisableEventSending", "adaptTooltip", "placement"], ["type", "button", "adapt-button", "", "btn-type", "secondary", 1, "adapt-rx-uploader-attach-btn", 3, "adaptRadarDisableEventSending", "disabled", "click"], [1, "btn-icon", "d-icon-file_o"], [1, "d-inline-block", "adapt-rx-uploader-folder-attach-btn__wrp", 3, "adaptTooltip", "adaptRadarDisableEventSending", "placement"], [1, "btn-icon", "d-icon-folder_o"], [1, "animation__block-wrp"], [1, "animation__dnd"], ["dnd", ""], [1, "animation__drop"], ["drop", ""], [1, "adapt-rx-uploader__drop-animation"], ["class", "adapt-rx-uploader__search-animation", 4, "ngIf"], [1, "adapt-rx-uploader__dnd-text", "m-0", "m-start-2"], [3, "ngSwitch"], ["class", "adapt-rx-uploader__dnd-text m-0 m-start-2", 4, "ngSwitchCase"], [1, "drop-icon"], [1, "icon", "svg-cloud-icon", 3, "innerHTML"], [1, "icon", "svg-arrow-icon", 3, "innerHTML"], [1, "icon", "svg-cloud-icon__forbidden", 3, "innerHTML"], [1, "adapt-rx-uploader__dnd-text", "adapt-rx-uploader__dnd-text-forbidden", "m-0", "m-start-2"], [1, "adapt-rx-uploader__search-animation"], [1, "drop-icon", "drop-icon__search"], [1, "icon", "svg-directory-read", 3, "innerHTML"], [1, "icon", "svg-search", 3, "innerHTML"]], template: function AdaptRxUploaderComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelement(0, "input", 0, 1);
        i0.ɵɵtext(2, "\n\n");
        i0.ɵɵelementStart(3, "div", 2);
        i0.ɵɵtext(4, "\n  ");
        i0.ɵɵelementStart(5, "div", 3, 4);
        i0.ɵɵtext(7, "\n    ");
        i0.ɵɵelementStart(8, "div", 5, 6);
        i0.ɵɵtext(10, "\n      ");
        i0.ɵɵtext(11, "\n      ");
        i0.ɵɵelement(12, "adapt-rx-control-label", 7);
        i0.ɵɵtext(13, "\n      ");
        i0.ɵɵtext(14, "\n\n      ");
        i0.ɵɵprojection(15);
        i0.ɵɵtext(16, "\n\n      ");
        i0.ɵɵelementStart(17, "div", 8);
        i0.ɵɵtext(18, "\n        ");
        i0.ɵɵtemplate(19, AdaptRxUploaderComponent_ng_container_19_Template, 6, 2, "ng-container", 9);
        i0.ɵɵtext(20, "\n\n        ");
        i0.ɵɵtemplate(21, AdaptRxUploaderComponent_ng_container_21_Template, 4, 1, "ng-container", 9);
        i0.ɵɵtext(22, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(23, "\n\n      ");
        i0.ɵɵtext(24, "\n      ");
        i0.ɵɵelementStart(25, "div", 10);
        i0.ɵɵtext(26, "\n        ");
        i0.ɵɵtemplate(27, AdaptRxUploaderComponent_adapt_alert_27_Template, 5, 5, "adapt-alert", 11);
        i0.ɵɵtext(28, "\n\n        ");
        i0.ɵɵelement(29, "adapt-rx-feedback", 12, 13);
        i0.ɵɵtext(31, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(32, "\n      ");
        i0.ɵɵtext(33, "\n\n      ");
        i0.ɵɵtext(34, "\n      ");
        i0.ɵɵtemplate(35, AdaptRxUploaderComponent_div_35_Template, 10, 4, "div", 14);
        i0.ɵɵtext(36, "\n      ");
        i0.ɵɵtext(37, "\n\n      ");
        i0.ɵɵtext(38, "\n      ");
        i0.ɵɵtemplate(39, AdaptRxUploaderComponent_div_39_Template, 26, 15, "div", 15);
        i0.ɵɵtext(40, "\n      ");
        i0.ɵɵtext(41, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(42, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(43, "\n\n  ");
        i0.ɵɵtemplate(44, AdaptRxUploaderComponent_adapt_alert_44_Template, 2, 3, "adapt-alert", 16);
        i0.ɵɵtext(45, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(46, "\n\n");
        i0.ɵɵtemplate(47, AdaptRxUploaderComponent_ng_template_47_Template, 0, 0, "ng-template", null, 17, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(49, "\n\n");
        i0.ɵɵtemplate(50, AdaptRxUploaderComponent_ng_template_50_Template, 4, 2, "ng-template", null, 18, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(52, "\n\n");
        i0.ɵɵtemplate(53, AdaptRxUploaderComponent_ng_template_53_Template, 5, 2, "ng-template", null, 19, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(55, "\n\n");
        i0.ɵɵtemplate(56, AdaptRxUploaderComponent_ng_template_56_Template, 27, 16, "ng-template", null, 20, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(58, "\n");
    } if (rf & 2) {
        i0.ɵɵproperty("multiple", ctx.isMultipleAllowed);
        i0.ɵɵattribute("aria-label", "File Control");
        i0.ɵɵadvance(3);
        i0.ɵɵclassProp("has-danger", ctx.hasDangerState)("has-warning", ctx.hasWarningState)("disabled", ctx.disabled)("readonly", ctx.readonly)("is-no-dnd", !ctx.enableDnD);
        i0.ɵɵadvance(9);
        i0.ɵɵproperty("for", ctx.id)("label", ctx.label)("requiredLabel", ctx.requiredLabel)("showRequiredLabel", ctx.required)("tooltip", ctx.tooltip)("testID", ctx.testID);
        i0.ɵɵadvance(5);
        i0.ɵɵclassProp("borderless", ctx.enableDnD && !ctx.isMultipleAllowed && ctx.files.length);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx.isMultipleAllowed);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.isMultipleAllowed);
        i0.ɵɵadvance(6);
        i0.ɵɵproperty("ngForOf", ctx.uploaderFeedbackMessages)("ngForTrackBy", ctx.trackByFn);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ariaErrorMessage", ctx.ariaErrorMessage)("errors", ctx.ngControl.errors)("warningMessage", ctx.warningMessage)("controlTouched", ctx.ngControl.touched);
        i0.ɵɵadvance(6);
        i0.ɵɵproperty("ngIf", !ctx.readonly);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", ctx.isMultipleAllowed && ctx.files.length);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngIf", !ctx.isFoldersAllowed && ctx.showUploadFolderAlert);
    } }, directives: [i9.AdaptRxControlLabelComponent, i10.NgIf, i10.NgForOf, i11.AdaptRxFeedbackComponent, i10.NgTemplateOutlet, i12.AdaptUploaderItemComponent, i13.AdaptAlertComponent, i14.AdaptPopoverDirective, i15.AdaptCollapseDirective, i16.AdaptButtonComponent, i17.AdaptEmptyStateComponent, i18.AdaptTooltipDirective, i10.NgSwitch, i10.NgSwitchCase], pipes: [i19.FileTypesPipe, i20.FileSizePipe, i10.SlicePipe], encapsulation: 2, data: { animation: [ANIMATION_INIT_STATE] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxUploaderComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-rx-uploader',
                templateUrl: './adapt-rx-uploader.component.html',
                providers: [FileManager, IconManager],
                animations: [ANIMATION_INIT_STATE]
            }]
    }], function () { return [{ type: i1.NgControl, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }, { type: i2.FileManager, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }, { type: i3.IconManager, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }, { type: i4.AdaptRxUploaderConfigService }, { type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i5.Directionality }, { type: i6.AnimationBuilder }, { type: i0.Injector }, { type: i0.KeyValueDiffers }, { type: i0.NgZone }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: i7.AdaptTranslateService }, { type: i8.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { uploadMode: [{
            type: Input
        }], selectionMode: [{
            type: Input
        }], enableFileDialog: [{
            type: Input
        }], allowedTypes: [{
            type: Input
        }], forbiddenTypes: [{
            type: Input
        }], suppressParallel: [{
            type: Input
        }], filesCount: [{
            type: Input
        }], allowDuplicates: [{
            type: Input
        }], showUploadFolderAlert: [{
            type: Input
        }], visibleFiles: [{
            type: Input
        }], reusable: [{
            type: Input
        }], allowDeletion: [{
            type: Input
        }], customErrors: [{
            type: Input
        }], indeterminateFileLoader: [{
            type: Input
        }], url: [{
            type: Input
        }], deleteUrl: [{
            type: Input
        }], droppableArea: [{
            type: Input
        }], enableCustomDownload: [{
            type: Input
        }], customDownload: [{
            type: Input
        }], popoverAppendToBody: [{
            type: Input
        }], showTypesRestriction: [{
            type: Input
        }], showMinSizeRestriction: [{
            type: Input
        }], showMaxSizeRestriction: [{
            type: Input
        }], showFilesCountRestriction: [{
            type: Input
        }], texts: [{
            type: Input
        }], icons: [{
            type: Input
        }], fileErrors: [{
            type: Input
        }], enableDnD: [{
            type: Input
        }], maxFileSize: [{
            type: Input
        }], minFileSize: [{
            type: Input
        }], chunkSize: [{
            type: Input
        }], beforeFileDialogOpen: [{
            type: Output
        }], afterFileDialogOpen: [{
            type: Output
        }], beforeFilesAdded: [{
            type: Output
        }], afterFilesAdded: [{
            type: Output
        }], dropped: [{
            type: Output
        }], dragOver: [{
            type: Output
        }], startFileUploading: [{
            type: Output
        }], processFileUploading: [{
            type: Output
        }], endFileUploading: [{
            type: Output
        }], errorFileUploading: [{
            type: Output
        }], finishedFileUploading: [{
            type: Output
        }], removedFileFromQueue: [{
            type: Output
        }], deletedFile: [{
            type: Output
        }], cancelUploading: [{
            type: Output
        }], fileInput: [{
            type: ViewChild,
            args: ['fileInput', { static: false }]
        }], droppableAreaBlock: [{
            type: ViewChild,
            args: ['droppableAreaBlock', { static: false }]
        }], dropEnter: [{
            type: ViewChild,
            args: ['dropEnter', { static: false }]
        }], dnd: [{
            type: ViewChild,
            args: ['dnd', { static: false }]
        }], drop: [{
            type: ViewChild,
            args: ['drop', { static: false }]
        }], filesList: [{
            type: ViewChildren,
            args: [AdaptUploaderItemComponent]
        }], emptyTmpl: [{
            type: ViewChild,
            args: ['emptyTmpl', { static: true }]
        }], emptyReadonly: [{
            type: ViewChild,
            args: ['emptyReadonly', { static: true }]
        }], fileAttachmentControls: [{
            type: ViewChild,
            args: ['fileAttachmentControls', { static: true }]
        }], dndAnimationTmpl: [{
            type: ViewChild,
            args: ['dndAnimationTmpl', { static: true }]
        }], adaptRxFeedbackRef: [{
            type: ViewChild,
            args: ['adaptRxFeedbackRef', { static: true }]
        }], testID: [{
            type: Input
        }] }); })();
//# sourceMappingURL=adapt-rx-uploader.component.js.map