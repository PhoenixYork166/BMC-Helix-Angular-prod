{"version":3,"file":"resize.service.js","sourceRoot":"","sources":["../../../../../../libs/adapt-angular/src/common/resize/resize.service.ts"],"names":[],"mappings":"AAAA,0DAA0D;AAC1D,oIAAoI;AACpI,OAAO,EAAC,UAAU,EAAE,MAAM,EAAC,MAAM,eAAe,CAAC;AACjD,OAAO,EAAC,SAAS,EAAC,MAAM,WAAW,CAAC;;AAKpC,iJAAiJ;AACjJ,kJAAkJ;AAClJ,0JAA0J;AAC1J,8DAA8D;AAC9D,MAAM,0BAA0B,GAAG,OAAO,CAAC,yBAAyB,CAAC,CAAC;AA4DtE;;GAEG;AAIH,MAAM,OAAO,aAAa;IASxB,YAAoB,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;QACjC,IAAI,CAAC,sBAAsB,GAAG,0BAA0B,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;IAC7F,CAAC;IAED;;;OAGG;IACH,sBAAsB,CAAC,OAAoB,EAAE,QAAqC;QAChF,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,EAAE;YAClC,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,yBAAyB,CAAC,OAAoB;QAC5C,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,sBAAsB,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;SAChD;aAAM;YACL,SAAS,CAAC,kEAAkE,CAAC,CAAC;SAC/E;IACH,CAAC;;AA/BM,gCAAkB,GAAgB;IACvC,QAAQ,EAAE,QAAQ;IAClB,SAAS,EAAE,IAAI;IACf,KAAK,EAAE,KAAK;CACb,CAAC;0EALS,aAAa;mEAAb,aAAa,WAAb,aAAa,mBAFZ,MAAM;uFAEP,aAAa;cAHzB,UAAU;eAAC;gBACV,UAAU,EAAE,MAAM;aACnB","sourcesContent":["// Based on https://github.com/wnr/element-resize-detector\n// From http://stackoverflow.com/questions/40776351/what-is-the-best-way-to-listen-for-component-resize-events-within-an-angular2-co\nimport {Injectable, NgZone} from '@angular/core';\nimport {adaptWarn} from '../logger';\n\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\ndeclare function require(str: any): any;\n\n// TODO: Investigate possibility to improve typings - https://stackoverflow.com/questions/56238356/understanding-esmoduleinterop-in-tsconfig-file\n// import * as elementResizeDetectorMaker from 'element-resize-detector'; // Lead to error https://github.bmc.com/bmc-ux/adapt-angular/issues/6326\n// import {default as elementResizeDetectorMaker} from 'element-resize-detector'; // Local tests fail: element_resize_detector_1.default is not a function\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst elementResizeDetectorMaker = require('element-resize-detector');\n\n// Type definitions for element-resize-detector 1.1.x\ninterface IdHandlerProps {\n  get(element: HTMLElement, readonly: boolean): string;\n\n  set(element: HTMLElement): string;\n}\n\ninterface ReporterProps {\n  log(idOrText: string, textOrId: string, element?: HTMLElement): void;\n\n  warn(text: string, element?: HTMLElement): void;\n\n  error(text: string): void;\n}\n\ninterface ErdmOptions {\n  strategy?: 'scroll' | 'object' | undefined;\n  /**\n   * A custom reporter that handles reporting logs, warnings and errors.\n   * If not provided, a default id handler will be used.\n   * If set to false, then nothing will be reported.\n   */\n  reporter?: ReporterProps | undefined;\n\n  /**\n   * Determines if listeners should be called when they are getting added.\n   * If true, the listener is guaranteed to be called when it has been added.\n   * If false, the listener will not be guaranteed to be called when\n   * it has been added (does not prevent it from being called).\n   *\n   * @default true\n   */\n  callOnAdd?: boolean | undefined;\n\n  /**\n   * A custom id handler that is responsible for generating,\n   * setting and retrieving id's for elements.\n   * If not provided, a default id handler will be used.\n   */\n  idHandler?: IdHandlerProps | undefined;\n\n  /**\n   * If set to true, the the system will report debug messages as default\n   * for the listenTo method.\n   */\n  debug?: boolean | undefined;\n}\n\ninterface Erd {\n  listenTo(element: HTMLElement, callback: (elem: HTMLElement) => void): void;\n\n  removeListener(element: HTMLElement, callback: (elem: HTMLElement) => void): void;\n\n  removeAllListeners(element: HTMLElement): void;\n\n  uninstall(element: HTMLElement): void;\n}\n\n/**\n * Service to track HTMLElement dimensions change\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ResizeService {\n  static defaultErdmOptions: ErdmOptions = {\n    strategy: 'scroll',\n    callOnAdd: true,\n    debug: false\n  };\n\n  private _elementResizeDetector: Erd;\n\n  constructor(private _ngZone: NgZone) {\n    this._elementResizeDetector = elementResizeDetectorMaker(ResizeService.defaultErdmOptions);\n  }\n\n  /**\n   * Listens to the element for resize events and calls the listener function with the element as argument on resize events.\n   * Pay attention that the callback is invoking outside the ngZone\n   */\n  addResizeEventListener(element: HTMLElement, callback: (elem: HTMLElement) => void): void {\n    this._ngZone.runOutsideAngular(() => {\n      this._elementResizeDetector.listenTo(element, callback);\n    });\n  }\n\n  /**\n   * Completely removes the detector and all listeners.\n   */\n  removeResizeEventListener(element: HTMLElement): void {\n    if (element) {\n      this._elementResizeDetector.uninstall(element);\n    } else {\n      adaptWarn('ADAPT warning! The element to remove resize listener is missing.');\n    }\n  }\n}\n"]}