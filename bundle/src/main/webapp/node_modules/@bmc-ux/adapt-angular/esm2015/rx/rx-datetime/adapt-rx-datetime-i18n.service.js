import { Inject, Injectable, LOCALE_ID } from '@angular/core';
import { formatDate, FormatWidth, FormStyle, getLocaleDayNames, getLocaleFirstDayOfWeek, getLocaleMonthNames, getLocaleTimeFormat, TranslationWidth } from '@angular/common';
import * as i0 from "@angular/core";
export function ADAPT_RX_DATETIME_18N_FACTORY(locale) {
    return new AdaptRxDatetimeI18nDefaultService(locale);
}
/**
 * A service supplying i18n data to the RxDatetime component.
 *
 * The default implementation of this service uses the Angular locale and registered locale data for
 * weekdays and month names (as explained in the Angular i18n guide).
 */
export class AdaptRxDatetimeI18nService {
}
AdaptRxDatetimeI18nService.ɵfac = function AdaptRxDatetimeI18nService_Factory(t) { return new (t || AdaptRxDatetimeI18nService)(); };
AdaptRxDatetimeI18nService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptRxDatetimeI18nService, factory: function AdaptRxDatetimeI18nService_Factory(t) { let r = null; if (t) {
        r = new t();
    }
    else {
        r = ADAPT_RX_DATETIME_18N_FACTORY(i0.ɵɵinject(LOCALE_ID));
    } return r; }, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxDatetimeI18nService, [{
        type: Injectable,
        args: [{ providedIn: 'root', useFactory: ADAPT_RX_DATETIME_18N_FACTORY, deps: [LOCALE_ID] }]
    }], null, null); })();
export class AdaptRxDatetimeI18nDefaultService extends AdaptRxDatetimeI18nService {
    constructor(_locale) {
        super();
        this._locale = _locale;
    }
    getWeekdayNames(short, locale) {
        return getLocaleDayNames(locale || this._locale, FormStyle.Standalone, short ? TranslationWidth.Short : TranslationWidth.Wide);
    }
    getMonthNames(short, locale) {
        return getLocaleMonthNames(locale || this._locale, FormStyle.Standalone, short ? TranslationWidth.Abbreviated : TranslationWidth.Wide);
    }
    getDateLabel(date, locale) {
        return formatDate(new Date(date.year, date.month, date.date, 0, 0, 0, 0), 'longDate', locale || this._locale);
    }
    getTimeFormat(locale) {
        return /a/.test(getLocaleTimeFormat(locale || this._locale, FormatWidth.Short)) ? 12 : 24;
    }
    getFirstDayOfWeek(locale) {
        return getLocaleFirstDayOfWeek(locale || this._locale);
    }
}
AdaptRxDatetimeI18nDefaultService.ɵfac = function AdaptRxDatetimeI18nDefaultService_Factory(t) { return new (t || AdaptRxDatetimeI18nDefaultService)(i0.ɵɵinject(LOCALE_ID)); };
AdaptRxDatetimeI18nDefaultService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptRxDatetimeI18nDefaultService, factory: AdaptRxDatetimeI18nDefaultService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxDatetimeI18nDefaultService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();
//# sourceMappingURL=adapt-rx-datetime-i18n.service.js.map