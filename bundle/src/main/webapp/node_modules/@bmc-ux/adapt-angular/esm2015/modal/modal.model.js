import { EventEmitter, Injectable } from '@angular/core';
import { PopupDeferred } from '../common/popup-deferred';
import * as i0 from "@angular/core";
// TODO: Refactor this if possible
/* eslint-disable @typescript-eslint/no-explicit-any */
/**
 * Wrapper for Promise
 * @description Need to support resolve() and reject() methods on Promise instance.
 */
export class ModalDeferred extends PopupDeferred {
}
/**
 * A reference to an active (currently opened) modal/dialog.
 * Instances of this class can be injected into components passed as modal content.
 */
export class ActiveModalRef {
    constructor() {
        /**
         * EventEmitter fires events on alert closed
         * @since v10.17.0
         */
        this.alertClosed = new EventEmitter();
    }
    // TODO: Refactor this if possible
    /* eslint-disable @typescript-eslint/no-explicit-any */
    /* eslint-disable @typescript-eslint/no-unused-vars */
    /* eslint-disable @typescript-eslint/no-empty-function */
    /**
     * Can be used to close a modal, passing an optional result
     */
    close(result) {
    }
    /**
     * Can be used to dismiss a modal, passing an optional reason
     */
    dismiss(reason) {
    }
    /* eslint-enable @typescript-eslint/no-explicit-any */
    /**
     * Can be used to open an overModal (only for modal component)
     */
    openOverModal(config) {
    }
    /**
     * Can be used to close an overModal (only for modal component)
     */
    closeOverModal() {
    }
    // TODO: Refactor this if possible
    /* eslint-disable @typescript-eslint/no-explicit-any */
    /**
     * Can be used to get passed data
     */
    getData() {
    }
    /* eslint-enable @typescript-eslint/no-explicit-any */
    /**
     * Open alert for current modal instance
     * @since v10.17.0
     */
    openAlert(alert) {
    }
}
ActiveModalRef.ɵfac = function ActiveModalRef_Factory(t) { return new (t || ActiveModalRef)(); };
ActiveModalRef.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ActiveModalRef, factory: ActiveModalRef.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ActiveModalRef, [{
        type: Injectable
    }], null, null); })();
//# sourceMappingURL=modal.model.js.map