{"version":3,"file":"file-manager.js","sourceRoot":"","sources":["../../../../../../../libs/adapt-angular/src/common/uploader/services/file-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import {Inject, Injectable, Optional} from '@angular/core';\nimport {HttpErrorResponse, HttpEventType} from '@angular/common/http';\nimport {Observable, Subject, Subscriber} from 'rxjs';\nimport {isNil} from 'lodash-es';\nimport {bufferCount, mergeMap, retry, takeWhile, tap} from 'rxjs/operators';\nimport {v4 as uuid} from 'uuid';\nimport {\n  ChunkData,\n  CommonUploadInputs,\n  FileErrors,\n  FileErrorsMessages,\n  FileObj,\n  FileSystemEntry,\n  RequestBody,\n  UploaderFeedbackMessage\n} from '../models/uploader.models';\nimport {\n  FILE_IS_UPLOADED_PERCENTAGE,\n  INITIAL_CHUNK_NUMBER,\n  MAX_UPLOADING_QUEUE_LENGTH,\n  RETRY_REQUEST_TIMES\n} from '../consts/uploader.consts';\nimport {formatFileSize} from '../uploader';\nimport {SendFileService, SendFileUtils} from './send.file.service';\nimport {MessageStatus} from '../../common.enums';\nimport {UploaderMode} from '../enums/uploader.enum';\nimport {isUndefined} from '../../utilities';\nimport {AdaptTranslateService} from '../../i18n/index';\nimport {KeyValueObject} from '../../../common/common.models';\n\n@Injectable()\nexport class FileManager {\n  messagesSubject: Subject<UploaderFeedbackMessage> = new Subject();\n  uploadedSubject: Subject<FileObj> = new Subject();\n  canceledSubject: Subject<FileObj[]> = new Subject();\n  uploadingStartSubject: Subject<{ file: FileObj; chunkSize: number; uploadUrl: string; customErrors: boolean }> = new Subject();\n  errorUploadingSubject: Subject<{ file: FileObj; error: ProgressEvent | HttpErrorResponse }> = new Subject();\n  uploadingProcessSubject: Subject<FileObj> = new Subject();\n  uploadingFinishedSubject: Subject<FileObj[]> = new Subject();\n\n  fileErrors: FileErrors = {};\n\n  private _maxUploadingQueue: number = MAX_UPLOADING_QUEUE_LENGTH;\n  private _uploadingQueue: string[] = [];\n  private _retryTimes: number = RETRY_REQUEST_TIMES;\n  private _duplicate: (File | FileSystemEntry)[] = [];\n  private _storage: FileObj[] = [];\n  private _messages: FileErrorsMessages = {};\n\n  /**\n   * Returns errors messages\n   */\n  get messages(): FileErrorsMessages {\n    return this._messages;\n  }\n\n  /**\n   * Checks if file fit the size limit\n   */\n  static isMaxSizeAcceptable(file: File | FileSystemEntry, maxSize: number): boolean {\n    return file.size <= maxSize;\n  }\n\n  static isMinSizeAcceptable(file: File | FileSystemEntry, minSize: number): boolean {\n    return file.size >= minSize;\n  }\n\n  /**\n   * Checks if file type is acceptable\n   */\n  static isFileTypeAcceptable(file: File | FileSystemEntry, allowedTypes: string[], forbiddenTypes: string[]): boolean {\n    const type = file.name.split('.').reverse()[0].toLowerCase();\n\n    if (allowedTypes?.length) {\n      return allowedTypes.indexOf(type) !== -1;\n    } else {\n      return !forbiddenTypes?.length || forbiddenTypes.indexOf(type) === -1;\n    }\n  }\n\n  constructor(@Inject('UploaderService') @Optional() private uploadService: SendFileUtils,\n              private defaultUploadService: SendFileService,\n              private ts: AdaptTranslateService) {\n    this.uploadService = uploadService || defaultUploadService;\n    this.setDefaultTexts(ts.getCurrentLanguage());\n\n    Object.keys(this.fileErrors).forEach((key) => this._messages[key] = {errorMessage: '', files: []});\n\n    this.uploadingStartSubject.subscribe(({file, ...uploadInputs}) => {\n      this._uploadingQueue.push(file.fileId);\n      file.inUploading = true;\n      this.uploading(file, uploadInputs);\n    });\n  }\n\n  setDefaultTexts(translation: KeyValueObject): void {\n    this.fileErrors.maxSize = translation['adapt.uploader.error.maxSize'];\n    this.fileErrors.minSize = translation['adapt.uploader.error.minSize'];\n    this.fileErrors.typeGeneral = translation['adapt.uploader.error.type.general'];\n    this.fileErrors.typeList = translation['adapt.uploader.error.type.includeTypes'];\n    this.fileErrors.count = translation['adapt.uploader.error.count'];\n    this.fileErrors.duplicates = translation['adapt.uploader.error.duplicates'];\n    this.fileErrors.folderSuppress = translation['adapt.uploader.error.folderSuppress'];\n    this.fileErrors.fileSuppress = translation['adapt.uploader.error.fileSuppress'];\n    this.fileErrors.genericErrorMessage = translation['adapt.uploader.error.genericErrorMessage'];\n    this.fileErrors.removeErrorMessage = translation['adapt.uploader.error.removeErrorMessage'];\n  }\n\n  /**\n   * Returns the copy of files saved in uploader\n   */\n  getFiles(): FileObj[] {\n    return this._storage.slice();\n  }\n\n  /**\n   * Adds files to uploader storage\n   */\n  addFiles(files: (File | FileSystemEntry)[],\n           allowDeletion: boolean,\n           uploadMode: UploaderMode,\n           suppressParallel: boolean,\n           allowDuplicates: boolean,\n           maxFileSize: number,\n           chunkSize: number,\n           allowedTypes: string[],\n           forbiddenTypes: string[],\n           filesCount: number,\n           customErrors: boolean,\n           uploadUrl: string, minFileSize: number = 0): void {\n    // Suppress parallel uploading, it means only 1 file allowed to be in queue\n    if (suppressParallel) {\n      this._maxUploadingQueue = 1;\n    }\n\n    this.clearMessages();\n\n    if (!allowDuplicates) {\n      files = this.excludeDuplicates(files);\n    }\n\n    files = this.checkFilesType(files, allowedTypes, forbiddenTypes);\n    files = this.checkFilesMaxSize(files, maxFileSize);\n    files = this.checkFilesMinSize(files, minFileSize);\n    this.checkFilesCount(files, filesCount);\n\n    const filesToSave: FileObj[] = files.map((data): FileObj => {\n      return {\n        data,\n        fileId: uuid(),\n        inUploading: false,\n        uploaded: 0,\n        canceled: false,\n        error: false,\n        errorText: '',\n        allowDeletion: allowDeletion,\n        totalFileSize: data.size,\n        inDeleting: false,\n      };\n    });\n\n    this.updateFilesStorage(filesToSave, true);\n    this.proceedMessages();\n\n    switch (uploadMode) {\n      case UploaderMode.Auto: {\n        this.checkForUploading({chunkSize, uploadUrl, customErrors});\n        break;\n      }\n      case UploaderMode.Manual: {\n        break;\n      }\n    }\n  }\n\n  startUploading(uploadInputs: CommonUploadInputs): void {\n    const len = this.getFiles().length;\n    const uploadingStream = this.uploadedSubject;\n    const buffer = uploadingStream.pipe(bufferCount(len));\n\n    this.checkForUploading(uploadInputs);\n    buffer.subscribe((files: FileObj[]) => {\n      this.uploadingFinishedSubject.next(files);\n      this.uploadingFinishedSubject.complete();\n    });\n  }\n\n  abortUploading(uploadInputs: CommonUploadInputs, file?: FileObj): void {\n    if (file) {\n      file.canceled = true;\n      this.canceledSubject.next([file]);\n      this.removeFromUploadingQueue(file, uploadInputs);\n\n      return;\n    }\n\n    const canceledFiles = [];\n\n    this._uploadingQueue.length = 0;\n    this._storage.forEach((storageItem: FileObj) => {\n      if (storageItem.inUploading && !storageItem.canceled && !storageItem.error) {\n        storageItem.canceled = true;\n        canceledFiles.push(storageItem);\n        storageItem.inUploading = false;\n      }\n    });\n\n    if (canceledFiles.length) {\n      this.canceledSubject.next(canceledFiles);\n    }\n  }\n\n  /**\n   * Removes file with appropriate id from the uploader storage\n   */\n  removeFile(id: string): void {\n    const index = this._storage.findIndex((file) => file.fileId === id);\n\n    if (index >= 0) {\n      this._storage.splice(index, 1);\n    }\n  }\n\n  deleteFileFromServer(file: FileObj,\n                       deleteUrl: string,\n                       uploadInputs: CommonUploadInputs): Promise<FileObj> {\n    return new Promise((resolve, reject) => {\n      // TODO: Refactor this if possible\n      /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n      const request: Observable<any> = deleteUrl\n        ? this.defaultUploadService.deleteFile(file, deleteUrl)\n        : this.uploadService.deleteFile(file);\n\n      request.pipe().subscribe(() => {\n        this.removeFromFileList(file, uploadInputs);\n\n        file.deleted = true;\n        file.inDeleting = false;\n        resolve(file);\n      }, () => {\n        file.error = true;\n        file.errorText = this.fileErrors.removeErrorMessage;\n        file.inDeleting = false;\n        reject();\n      });\n      file.inDeleting = true;\n    });\n  }\n\n  getChunkStart(chunkNumber: number, chunkSize: number): number {\n    return chunkNumber * chunkSize;\n  }\n\n  getFileRequestId(chunkStart: number, chunkSize: number): number {\n    return chunkStart / chunkSize + 1;\n  }\n\n  updateFilesStorage(files: FileObj[] | FileObj, concat: boolean = false): void {\n    if (concat) {\n      this._storage = this._storage.concat(files);\n\n      return;\n    }\n\n    this._storage = Object.assign([], files);\n  }\n\n  // needed for the RTE attachment option\n  decreaseFilesStorage(file: FileObj): void {\n    const index = this._storage.findIndex((uploadedItem) => uploadedItem.fileId === file.fileId);\n\n    if (index >= 0) {\n      this._storage.splice(index, 1);\n    }\n  }\n\n  resetFilesStorage(): void {\n    this._storage.length = 0;\n  }\n\n  /**\n   * Checks if files fit the max size limit\n   */\n  private checkFilesMaxSize(files: (File | FileSystemEntry)[], maxFileSize: number): (File | FileSystemEntry)[] {\n    files = files.filter(file => {\n      if (!FileManager.isMaxSizeAcceptable(file, maxFileSize)) {\n        this._messages.maxSize.files.push(file);\n\n        return false;\n      }\n\n      return true;\n    });\n\n    this._messages.maxSize.errorMessage = this._messages.maxSize.files.length\n      ? this._format(this.fileErrors.maxSize, formatFileSize(maxFileSize.toString()))\n      : '';\n\n    return files;\n  }\n\n  /**\n   * Checks if files fit the min size limit\n   */\n  private checkFilesMinSize(files: (File | FileSystemEntry)[], minFileSize: number): (File | FileSystemEntry)[] {\n    files = files.filter(file => {\n      if (!FileManager.isMinSizeAcceptable(file, minFileSize)) {\n        this._messages.minSize.files.push(file);\n\n        return false;\n      }\n\n      return true;\n    });\n\n    this._messages.minSize.errorMessage = this._messages.minSize.files.length\n      ? this._format(this.fileErrors.minSize, formatFileSize(minFileSize.toString()))\n      : '';\n\n    return files;\n  }\n\n  /**\n   * Excludes duplicates from uploading list\n   */\n  private excludeDuplicates(files: (File | FileSystemEntry)[]): (File | FileSystemEntry)[] {\n    files = files.filter(file => {\n      if (this.hasDuplicate(file)) {\n        this._duplicate.push(file);\n\n        return false;\n      }\n\n      return true;\n    });\n\n    if (this._duplicate.length > 0) {\n      const message = this._format(this.fileErrors.duplicates, this._duplicate.length + '', this._storage.length + '');\n\n      this._messages.duplicates.errorMessage = message;\n      this._duplicate = [];\n    }\n\n    return files;\n  }\n\n  /**\n   * Checks if files count is not exceeded. Removes excess files.\n   */\n  private checkFilesCount(files: (File | FileSystemEntry)[], filesCount: number): void {\n    const diff = filesCount - this._storage.length;\n    const removedFiles = files.splice(diff);\n    let message;\n\n    if (removedFiles.length > 0) {\n      message = this._format(this.fileErrors.count, filesCount + '', removedFiles.length + '');\n      this._messages.count = {\n        errorMessage: message,\n        files: [...removedFiles]\n      };\n    }\n  }\n\n  /**\n   * Checks if file types is acceptable\n   */\n  private checkFilesType(files: (File | FileSystemEntry)[], allowedTypes: string[], forbiddenTypes: string[]): (File | FileSystemEntry)[] {\n    const types: string[] = [];\n\n    files = files.filter(file => {\n      if (!FileManager.isFileTypeAcceptable(file, allowedTypes, forbiddenTypes)) {\n        const type = file.name.split('.').reverse()[0];\n\n        if (types.indexOf(type) === -1) {\n          types.push(type);\n        }\n\n        return false;\n      }\n\n      return true;\n    });\n\n    if (types.length) {\n      if (allowedTypes?.length) {\n        this._messages.typeList.errorMessage = this._format(this.fileErrors.typeList, types.join(), allowedTypes.join());\n      } else {\n        this._messages.typeGeneral.errorMessage = this._format(this.fileErrors.typeGeneral, types.join());\n      }\n    }\n\n    return files;\n  }\n\n  /**\n   * Checks if file already existed in uploading list\n   */\n  private hasDuplicate(file: File | FileSystemEntry): boolean {\n    return this._storage.some((storedFile) => {\n      return storedFile.data.name === file.name;\n    });\n  }\n\n  /**\n   * Clears the warning messages array\n   */\n  private clearMessages(): void {\n    Object.keys(this._messages).forEach(t => this._messages[t] = {\n      errorMessage: '',\n      files: []\n    });\n  }\n\n  /**\n   * Creates the general message for added portion of files\n   */\n  private proceedMessages(): void {\n    Object.keys(this._messages).forEach(type => {\n      const errorMessage = this._messages[type].errorMessage;\n\n      if (errorMessage) {\n        this.messagesSubject.next({\n          text: errorMessage,\n          files: this._messages[type].files,\n          variant: MessageStatus.Warning\n        });\n      }\n    });\n  }\n\n  /**\n   * Checks if files are ready for uploading. Added files to uploading queue.\n   */\n  private checkForUploading(uploadInputs: CommonUploadInputs): void {\n    let filesCount = this._uploadingQueue.length - this._maxUploadingQueue;\n    let file = this.getNextFile();\n\n    while (filesCount < 0 && file) {\n      if (file) {\n        this.uploadingStartSubject.next({file, ...uploadInputs});\n      }\n\n      filesCount = this._uploadingQueue.length - this._maxUploadingQueue;\n      file = this.getNextFile();\n    }\n  }\n\n  /**\n   * Returns next file which is ready for uploading\n   */\n  private getNextFile(): FileObj {\n    const filesForUpload = this._storage.filter((file: FileObj) => {\n      return !file.inUploading && !file.error && !file.canceled && file.uploaded === 0;\n    });\n\n    return filesForUpload ? filesForUpload[0] : null;\n  }\n\n  /**\n   * Starts file uploading\n   */\n  private uploading(file: FileObj,\n                    uploadInputs: CommonUploadInputs,\n                    chunkNumber: number = INITIAL_CHUNK_NUMBER): void {\n    let chunkSize = isNil(uploadInputs.chunkSize) ? null : uploadInputs.chunkSize;\n    const {uploadUrl: url, customErrors} = uploadInputs;\n    const chunkCount = Math.ceil(file.data.size / chunkSize);\n\n    // Make assumption that if chunkSize passed as null/undefined there is no need to send file divided on chunks\n    // but send file as one chunk instead\n    const uploadAsOneChunk = isNil(chunkSize);\n\n    chunkSize = uploadAsOneChunk ? file.data.size : chunkSize;\n\n    if (chunkNumber < chunkCount || !file.data.size) { // empty file\n      const chunk: ChunkData = {\n        start: this.getChunkStart(chunkNumber, chunkSize),\n        end: (chunkNumber + 1) * chunkSize,\n        isEmpty: !file.data.size\n      };\n\n      this.readChunk(file, chunk).pipe(// read the contents of files\n        mergeMap((binary) => { // reading operation for the chunk is successfully completed\n          const requestBody: RequestBody = {\n            id: this.getFileRequestId(chunk.start, chunkSize),\n            chunksTotal: file.data.size ? Math.ceil(file.data.size / chunkSize) : 1, // only one chunk will be for empty file\n            data: uploadAsOneChunk ? file.data : new Uint8Array(binary.target.result),\n            name: file.data.name,\n            totalFileSize: file.totalFileSize,\n          };\n\n          if (requestBody.id === requestBody.chunksTotal) {\n            requestBody.checkSum = file.data.size;\n          }\n          // TODO fix types\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          requestBody.fullPath = file.data.webkitRelativePath || file.data.fullPath;\n\n          // TODO: Refactor this if possible\n          /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n          const request: Observable<any> = url ?\n            this.defaultUploadService.sendFile(requestBody, uploadAsOneChunk, url) :\n            this.uploadService.sendFile(requestBody, uploadAsOneChunk);\n\n\n          return request // send the chunk\n            .pipe(\n              takeWhile(() => !file.canceled), // send chunks until file uploading cancellation\n              retry(this._retryTimes - 1)) // retry unsuccessful uploading\n            .pipe(\n              tap({\n                next: (response) => { // successful uploading completion, add response and call responseCallback with the received response\n                  file.response = response;\n                  file.ok = uploadAsOneChunk ? response.ok : true;\n                  url ? this.defaultUploadService.responseCallback(response, file) : this.uploadService.responseCallback(response, file);\n                },\n                error: (error: HttpErrorResponse) => { // unsuccessful uploading completion, call responseCallback with the received error\n                  file.ok = false;\n                  url ? this.defaultUploadService.responseCallback(error, file) : this.uploadService.responseCallback(error, file);\n                }\n              }));\n        }),\n      ).subscribe(\n        () => {\n          if (uploadAsOneChunk) {\n            if (file.response) {\n              if (file.response.type === HttpEventType.UploadProgress) {\n                file.uploaded = Math.round(file.response.loaded / file.response.total * 100);\n                this.uploadingProcessSubject.next(file);\n              } else if (file.response.type === HttpEventType.Response) {\n                file.uploaded = FILE_IS_UPLOADED_PERCENTAGE;\n                this.removeFromUploadingQueue(file, uploadInputs);\n                this.uploadedSubject.next(file);\n              }\n            }\n          } else {\n            file.uploaded = Math.ceil((chunkNumber + 1) * FILE_IS_UPLOADED_PERCENTAGE / chunkCount);\n            this.uploadingProcessSubject.next(file);\n\n            if (isFinite(file.uploaded)) {\n              this.uploading(file, uploadInputs, chunkNumber + 1);\n            } else {\n              file.uploaded = FILE_IS_UPLOADED_PERCENTAGE;\n              this.removeFromUploadingQueue(file, uploadInputs);\n              this.uploadedSubject.next(file);\n            }\n          }\n        },\n        (error: ProgressEvent | HttpErrorResponse) => {\n          file.error = true;\n\n          if (error instanceof ProgressEvent) {\n            // TODO: Refactor this if possible\n            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n            file.errorText = `${(error.target as any).error.message}`;\n          }\n\n          if (error instanceof HttpErrorResponse) {\n            file.errorText = customErrors\n              ? `${error.message}`\n              : this.fileErrors.genericErrorMessage;\n          }\n\n          this.removeFromUploadingQueue(file, uploadInputs);\n          this.errorUploadingSubject.next({file, error});\n        });\n    } else { // all chunks have been sent\n      this.removeFromUploadingQueue(file, uploadInputs);\n      this.uploadedSubject.next(file);\n    }\n  }\n\n  /**\n   * Reads and sends file's chunk\n   */\n  // TODO: Refactor this if possible\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  private readChunk(file: FileObj, chunk?: ChunkData): Observable<any> {\n    const reader = new FileReader();\n\n    reader.readAsArrayBuffer(chunk.isEmpty ? file.data : file.data.slice(chunk.start, chunk.end));\n\n    // TODO: Refactor this if possible\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    return new Observable((observer: Subscriber<any>) => {\n      reader.onload = ((ev: ProgressEvent) => {\n        observer.next(ev);\n        observer.complete();\n      });\n\n      reader.onerror = (error: ProgressEvent): void => {\n        observer.error(error);\n      };\n    });\n  }\n\n  /**\n   * Removes file from uploading queue\n   */\n  private removeFromUploadingQueue(file: FileObj, uploadInputs: CommonUploadInputs): void {\n    const index = this._uploadingQueue.findIndex((id) => id === file.fileId);\n\n    if (index >= 0) {\n      file.inUploading = false;\n      this._uploadingQueue.splice(index, 1);\n    }\n\n    this.checkForUploading(uploadInputs);\n  }\n\n  private removeFromFileList(file: FileObj, uploadInputs: CommonUploadInputs): void {\n    const index = this._storage.findIndex((storageFile) => storageFile.fileId === file.fileId);\n\n    if (index >= 0) {\n      file.inUploading = false;\n      this._storage.splice(index, 1);\n    }\n\n    this.checkForUploading(uploadInputs);\n  }\n\n  private _format(...rest: string[]): string {\n    const args = rest.slice(1);\n\n    return rest[0].replace(/{(\\d+)}/g, (match, index) => !isUndefined(args[index]) ? args[index] : match);\n  }\n}\n"]}