{"version":3,"file":"adapt-validators.js","sourceRoot":"","sources":["../../../../../../../libs/adapt-angular/src/rx/form-control/rx-validators/adapt-validators.ts"],"names":[],"mappings":"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","sourcesContent":["import {Directive, forwardRef, Input} from '@angular/core';\nimport {AbstractControl, NG_VALIDATORS, ValidationErrors, Validator, Validators} from '@angular/forms';\n\nimport {BigNumber} from 'bignumber.js';\nimport {isFunction, isNil} from 'lodash-es';\n\nimport {RxDatetimeStructParseError} from '../../rx-datetime/adapt-rx-datetime.types';\nimport {checkIsAfter} from '../../rx-datetime/common/common.utils';\nimport {KeyValueObject} from '../../../common/common.models';\n\nimport {AdaptRxErrors, AdaptRxValidatorFn} from './adapt-validators.model';\n\nexport class AdaptValidators {\n  static min(min: number | BigNumber, errorMessageFn?: (_: { min: number | BigNumber; actual: number | BigNumber }) => string): AdaptRxValidatorFn {\n    const res = (control: AbstractControl): AdaptRxErrors | null => {\n      if (isNil(control.value) || control.value === '' || isNil(min)) {\n        return null;\n      }\n\n      let error: AdaptRxErrors = null;\n\n      if (!BigNumber.isBigNumber(control.value)) {\n        error = Validators.min(<number>min)(control);\n\n      } else if (!(control.value as BigNumber).isNaN() && (control.value as BigNumber).lt(min)) {\n        error = {\n          min: {\n            min: min,\n            actual: control.value\n          }\n        };\n      }\n\n      if (error && isFunction(errorMessageFn)) {\n        error.min.message = errorMessageFn({min: min, actual: control.value});\n      }\n\n      return error;\n    };\n\n    return res;\n  }\n\n  static max(max: number | BigNumber, errorMessageFn?: (_: { max: number | BigNumber; actual: number | BigNumber }) => string): AdaptRxValidatorFn {\n    const res = (control: AbstractControl): AdaptRxErrors | null => {\n      if (isNil(control.value) || control.value === '' || isNil(max)) {\n        return null;\n      }\n\n      let error: AdaptRxErrors = null;\n\n      if (!BigNumber.isBigNumber(control.value)) {\n        error = Validators.max(<number>max)(control);\n      } else if (!(control.value as BigNumber).isNaN() && (control.value as BigNumber).gt(max)) {\n        error = {\n          max: {\n            max: max,\n            actual: control.value\n          }\n        };\n      }\n\n      if (error && isFunction(errorMessageFn)) {\n        error.max.message = errorMessageFn({max: max, actual: control.value});\n      }\n\n      return error;\n    };\n\n    return res;\n  }\n\n  static required(errorMessageFn?: () => string): AdaptRxValidatorFn {\n    const res = (control: AbstractControl): AdaptRxErrors | null => {\n      const error = Validators.required(control);\n\n      if (error && isFunction(errorMessageFn)) {\n        error.required = {message: errorMessageFn()};\n      }\n\n      return error;\n    };\n\n    return res;\n  }\n\n  static requiredTrue(errorMessageFn?: () => string): AdaptRxValidatorFn {\n    const res = (control: AbstractControl): AdaptRxErrors | null => {\n      const error: KeyValueObject = Validators.requiredTrue(control) ? {requiredtrue: true} : null;\n\n      if (error && isFunction(errorMessageFn)) {\n        error.requiredtrue = {message: errorMessageFn()};\n      }\n\n      return error;\n    };\n\n    return res;\n  }\n\n  static email(errorMessageFn?: () => string): AdaptRxValidatorFn {\n    const res = (control: AbstractControl): AdaptRxErrors | null => {\n      const error = Validators.email(control);\n\n      if (error && isFunction(errorMessageFn)) {\n        error.email = {message: errorMessageFn()};\n      }\n\n      return error;\n    };\n\n    return res;\n  }\n\n  static minLength(minLength: number, errorMessageFn?: (_: { requiredLength: number; actualLength: number }) => string): AdaptRxValidatorFn {\n    const res = (control: AbstractControl): AdaptRxErrors | null => {\n      const error = Validators.minLength(minLength)(control);\n\n      if (error && isFunction(errorMessageFn)) {\n        error.minlength.message = errorMessageFn(error.minlength);\n      }\n\n      return error;\n    };\n\n    return res;\n  }\n\n  static maxLength(maxLength: number, errorMessageFn?: (_: { requiredLength: number; actualLength: number }) => string): AdaptRxValidatorFn {\n    const res = (control: AbstractControl): AdaptRxErrors | null => {\n      const error = Validators.maxLength(maxLength)(control);\n\n      if (error && isFunction(errorMessageFn)) {\n        error.maxlength.message = errorMessageFn(error.maxlength);\n      }\n\n      return error;\n    };\n\n    return res;\n  }\n\n  static pattern(pattern: string | RegExp, errorMessageFn?: (_: { requiredPattern: string; actualValue: string }) => string): AdaptRxValidatorFn {\n    const res = (control: AbstractControl): AdaptRxErrors | null => {\n      const error = Validators.pattern(pattern)(control);\n\n      if (error && isFunction(errorMessageFn)) {\n        error.pattern.message = errorMessageFn(error.pattern);\n      }\n\n      return error;\n    };\n\n    return res;\n  }\n\n  static range(min: number | BigNumber, max: number | BigNumber, errorMessageFn?: (_: { min: number | BigNumber; max: number | BigNumber; actual: number | BigNumber }) => string): AdaptRxValidatorFn {\n    const res = (control: AbstractControl): AdaptRxErrors | null => {\n      // don't validate on empty values\n      if (isNil(control.value) || control.value === '' || isNil(min) || isNil(max)) {\n        return null;\n      }\n\n      let error = null;\n\n      if (AdaptValidators.min(min)(control) || AdaptValidators.max(max)(control)) {\n        error = {\n          range: {\n            min,\n            max,\n            actual: control.value\n          }\n        };\n      }\n\n      if (error && isFunction(errorMessageFn)) {\n        error.range.message = errorMessageFn(error.range);\n      }\n\n      return error;\n    };\n\n    return res;\n  }\n\n  static rxDatetimeFormat(errorMessageFn?: (_: RxDatetimeStructParseError) => string): AdaptRxValidatorFn {\n    const res = (control: AbstractControl): AdaptRxErrors | null => {\n      let error = null;\n\n      if (control.value?.parseError) {\n        error = {\n          rxDatetimeFormat: control.value.parseError\n        };\n      }\n\n      if (error && isFunction(errorMessageFn)) {\n        error.rxDatetimeFormat.message = errorMessageFn(error.rxDatetimeFormat);\n      }\n\n      return error;\n    };\n\n    return res;\n  }\n\n  static rxDatetimeRangeFormat(errorMessageFn?: (_: { start: RxDatetimeStructParseError | null; end: RxDatetimeStructParseError | null }) => string): AdaptRxValidatorFn {\n    const res = (control: AbstractControl): AdaptRxErrors | null => {\n      let error = null;\n\n      if (control.value) {\n        const start = AdaptValidators.rxDatetimeFormat()({value: control.value[0]} as AbstractControl);\n        const end = AdaptValidators.rxDatetimeFormat()({value: control.value[1]} as AbstractControl);\n\n        if (start || end) {\n          error = {\n            rxDatetimeRangeFormat: {\n              start: start?.rxDatetimeFormat || null,\n              end: end?.rxDatetimeFormat || null\n            }\n          };\n        }\n      }\n\n      if (error && isFunction(errorMessageFn)) {\n        error.rxDatetimeRangeFormat.message = errorMessageFn(error.rxDatetimeRangeFormat);\n      }\n\n      return error;\n    };\n\n    return res;\n  }\n\n  static rxDatetimeRangeOrder(errorMessageFn?: () => string): AdaptRxValidatorFn {\n    const res = (control: AbstractControl): AdaptRxErrors | null => {\n      let error = null;\n\n      if (control.value &&\n        control.value[0] && !control.value[0].parseError &&\n        control.value[1] && !control.value[1].parseError) {\n\n        if (checkIsAfter(control.value[0], control.value[1])) {\n          error = {\n            rxDatetimeRangeOrder: {\n              start: control.value[0],\n              end: control.value[1]\n            }\n          };\n        }\n      }\n\n      if (error && isFunction(errorMessageFn)) {\n        error.rxDatetimeRangeOrder.message = errorMessageFn();\n      }\n\n      return error;\n    };\n\n    return res;\n  }\n\n  static integerNumber(errorMessageFn?: () => string): AdaptRxValidatorFn {\n    const res = (control: AbstractControl): ValidationErrors | null => {\n      if (isNil(control.value) || control.value === '') {\n        return null;\n      }\n\n      // Allow any positive or negative integer (e.g. 0, 1, -1, +5, -5).\n      const regExp = /^(-?|\\+?)?(\\d+)$/g;\n\n      let error = null;\n\n      if (isNaN(control.value) || !regExp.test(control.value)) {\n        error = {integerNumber: true};\n\n        if (isFunction(errorMessageFn)) {\n          error.integerNumber = {message: errorMessageFn()};\n        }\n      }\n\n      return error;\n    };\n\n    return res;\n  }\n\n  static scientificNumber(errorMessageFn?: () => string): AdaptRxValidatorFn {\n    const res = (control: AbstractControl): ValidationErrors | null => {\n      if (isNil(control.value) || control.value === '') {\n        return null;\n      }\n\n      // Allow any positive or negative number in scientific notation (e.g. 1e2, -1E2 .08e-2, -1.1e-5, +5.5-E3, -5.0e+1).\n      const regExp = /^[-+]?\\d*\\.?\\d+([eE][-+]?\\d+)?(?!:[-.]?)$/;\n\n      let error = null;\n\n      if (isNaN(control.value) || !regExp.test(control.value)) {\n        error = {scientificNumber: true};\n\n        if (isFunction(errorMessageFn)) {\n          error.scientificNumber = {message: errorMessageFn()};\n        }\n      }\n\n      return error;\n    };\n\n    return res;\n  }\n\n  static floatNumber(errorMessageFn?: () => string): AdaptRxValidatorFn {\n    const res = (control: AbstractControl): ValidationErrors | null => {\n      if (isNil(control.value) || control.value === '') {\n        return null;\n      }\n\n      // Allow any positive or negative number with floating point (e.g. 0.5, .08, -1.1, +5.5, -5.0, 5).\n      const regExp = /^[-+]?(\\d*)?[.]?\\d+$/;\n\n      let error = null;\n\n      if (isNaN(control.value) || !regExp.test(control.value)) {\n        error = {floatNumber: true};\n\n        if (isFunction(errorMessageFn)) {\n          error.floatNumber = {message: errorMessageFn()};\n        }\n      }\n\n      return error;\n    };\n\n    return res;\n  }\n}\n\n@Directive({\n  selector: '[adaptMin][ngModel],[adaptMin][formControl]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => AdaptMinValidatorDirective), multi: true}\n  ]\n})\nexport class AdaptMinValidatorDirective implements Validator {\n  @Input() adaptMin: number | BigNumber;\n  @Input() adaptMinMessageFn?: (_: { min: number | BigNumber; actual: number | BigNumber }) => string;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return AdaptValidators.min(this.adaptMin, this.adaptMinMessageFn)(control);\n  }\n}\n\n@Directive({\n  selector: '[adaptMax][ngModel],[adaptMax][formControl]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => AdaptMaxValidatorDirective), multi: true}\n  ]\n})\nexport class AdaptMaxValidatorDirective implements Validator {\n  @Input() adaptMax: number | BigNumber;\n  @Input() adaptMaxMessageFn?: (_: { max: number | BigNumber; actual: number | BigNumber }) => string;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return AdaptValidators.max(this.adaptMax, this.adaptMaxMessageFn)(control);\n  }\n}\n\n@Directive({\n  selector: '[adaptRequired][ngModel],[adaptRequired][formControl]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => AdaptRequiredValidatorDirective), multi: true}\n  ]\n})\nexport class AdaptRequiredValidatorDirective {\n  @Input() adaptRequiredMessageFn?: () => string;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return AdaptValidators.required(this.adaptRequiredMessageFn)(control);\n  }\n}\n\n@Directive({\n  selector: '[adaptRequiredTrue][ngModel],[adaptRequiredTrue][formControl]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => AdaptRequiredTrueValidatorDirective), multi: true}\n  ]\n})\nexport class AdaptRequiredTrueValidatorDirective implements Validator {\n  @Input() adaptRequiredTrueMessageFn: () => string;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return AdaptValidators.requiredTrue(this.adaptRequiredTrueMessageFn)(control);\n  }\n}\n\n@Directive({\n  selector: '[adaptEmail][ngModel],[adaptEmail][formControl]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => AdaptEmailValidatorDirective), multi: true}\n  ]\n})\nexport class AdaptEmailValidatorDirective implements Validator {\n  @Input() adaptEmailMessageFn: () => string;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return AdaptValidators.email(this.adaptEmailMessageFn)(control);\n  }\n}\n\n@Directive({\n  selector: '[adaptMinLength][ngModel],[adaptMinLength][formControl]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => AdaptMinLengthValidatorDirective), multi: true}\n  ]\n})\nexport class AdaptMinLengthValidatorDirective implements Validator {\n  @Input() adaptMinLength: number;\n  @Input() adaptMinLengthMessageFn: (_: { requiredLength: number; actualLength: number }) => string;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return AdaptValidators.minLength(this.adaptMinLength, this.adaptMinLengthMessageFn)(control);\n  }\n}\n\n@Directive({\n  selector: '[adaptMaxLength][ngModel],[adaptMaxLength][formControl]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => AdaptMaxLengthValidatorDirective), multi: true}\n  ]\n})\nexport class AdaptMaxLengthValidatorDirective implements Validator {\n  @Input() adaptMaxLength: number;\n  @Input() adaptMaxLengthMessageFn: (_: { requiredLength: number; actualLength: number }) => string;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return AdaptValidators.maxLength(this.adaptMaxLength, this.adaptMaxLengthMessageFn)(control);\n  }\n}\n\n@Directive({\n  selector: '[adaptPattern][ngModel],[adaptPattern][formControl]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => AdaptPatternValidatorDirective), multi: true}\n  ]\n})\nexport class AdaptPatternValidatorDirective implements Validator {\n  @Input() adaptPattern: string | RegExp;\n  @Input() adaptPatternMessageFn: (_: { requiredPattern: string; actualValue: string }) => string;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return AdaptValidators.pattern(this.adaptPattern, this.adaptPatternMessageFn)(control);\n  }\n}\n\n@Directive({\n  selector: '[adaptRange][ngModel],[adaptRange][formControl]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => AdaptRangeValidatorDirective), multi: true}\n  ]\n})\nexport class AdaptRangeValidatorDirective implements Validator {\n  @Input() adaptRange: (number | BigNumber)[];\n  @Input() adaptRangeMessageFn: (_: { min: number | BigNumber; max: number | BigNumber; actual: number | BigNumber }) => string;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return AdaptValidators.range(this.adaptRange[0], this.adaptRange[1], this.adaptRangeMessageFn)(control);\n  }\n}\n\n@Directive({\n  selector: '[adaptRxDatetimeFormat][ngModel],[adaptRxDatetimeFormat][formControl]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => AdaptRxDatetimeFormatValidatorDirective), multi: true}\n  ]\n})\nexport class AdaptRxDatetimeFormatValidatorDirective implements Validator {\n  @Input() adaptRxDatetimeFormatMessageFn: (_: RxDatetimeStructParseError) => string;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return AdaptValidators.rxDatetimeFormat(this.adaptRxDatetimeFormatMessageFn)(control);\n  }\n}\n\n@Directive({\n  selector: '[adaptRxDatetimeRangeFormat][ngModel],[adaptRxDatetimeRangeFormat][formControl]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => AdaptRxDatetimeRangeFormatValidatorDirective), multi: true}\n  ]\n})\nexport class AdaptRxDatetimeRangeFormatValidatorDirective implements Validator {\n  @Input() adaptRxDatetimeRangeFormatMessageFn: (_: { start: RxDatetimeStructParseError | null; end: RxDatetimeStructParseError | null }) => string;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return AdaptValidators.rxDatetimeRangeFormat(this.adaptRxDatetimeRangeFormatMessageFn)(control);\n  }\n}\n\n@Directive({\n  selector: '[adaptRxDatetimeRangeOrder][ngModel],[adaptRxDatetimeRangeOrder][formControl]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => AdaptRxDatetimeRangeOrderValidatorDirective), multi: true}\n  ]\n})\nexport class AdaptRxDatetimeRangeOrderValidatorDirective implements Validator {\n  @Input() adaptRxDatetimeRangeOrderMessageFn: () => string;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return AdaptValidators.rxDatetimeRangeOrder(this.adaptRxDatetimeRangeOrderMessageFn)(control);\n  }\n}\n\n@Directive({\n  selector: '[adaptIntegerNumber][ngModel], [adaptIntegerNumber][formControl]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => AdaptIntegerNumberValidatorDirective), multi: true}\n  ]\n})\nexport class AdaptIntegerNumberValidatorDirective implements Validator {\n  @Input() adaptIntegerNumberMessageFn: () => string;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return AdaptValidators.integerNumber(this.adaptIntegerNumberMessageFn)(control);\n  }\n}\n\n@Directive({\n  selector: '[adaptScientificNumber][ngModel], [adaptScientificNumber][formControl]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => AdaptScientificNumberValidatorDirective), multi: true}\n  ]\n})\nexport class AdaptScientificNumberValidatorDirective implements Validator {\n  @Input() adaptScientificNumberMessageFn: () => string;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return AdaptValidators.scientificNumber(this.adaptScientificNumberMessageFn)(control);\n  }\n}\n\n@Directive({\n  selector: '[adaptFloatNumber][ngModel], [adaptFloatNumber][formControl]',\n  providers: [\n    {provide: NG_VALIDATORS, useExisting: forwardRef(() => AdaptFloatNumberValidatorDirective), multi: true}\n  ]\n})\nexport class AdaptFloatNumberValidatorDirective implements Validator {\n  @Input() adaptFloatNumberMessageFn: () => string;\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    return AdaptValidators.floatNumber(this.adaptFloatNumberMessageFn)(control);\n  }\n}\n"]}