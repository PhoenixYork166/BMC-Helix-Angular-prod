{"version":3,"file":"menu-global.service.js","sourceRoot":"","sources":["../../../../../libs/adapt-angular/src/menu/menu-global.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {ComponentRef, Injectable} from '@angular/core';\nimport {AdaptSubmenuComponent} from './submenu/submenu.component';\nimport {MenuItem} from './models/menu-item';\nimport {uniq} from 'lodash-es';\n\n@Injectable()\nexport class MenuGlobalService {\n  private _menuInstances: ComponentRef<AdaptSubmenuComponent>[] = [];\n  private _nodes: MenuItem[] = [];\n  private _connectedNodes: MenuItem[] = [];\n\n  connectNodes(node: MenuItem): void {\n    this._connectedNodes.push(node);\n    this._connectedNodes = uniq(this._connectedNodes);\n  }\n\n  destroyConnectNodes(): void {\n    this._connectedNodes.length = 0;\n  }\n\n  storeMenu(menu: ComponentRef<AdaptSubmenuComponent>, node: MenuItem): void {\n    this._menuInstances.push(menu);\n    this._nodes.push(node);\n  }\n\n  closeMenu(): void {\n    if (this._menuInstances.length > 0) {\n      this._menuInstances.forEach(item => {\n        if (item && item.hostView) {\n          item.hostView.destroy();\n        }\n      });\n    }\n\n    if (this._nodes.length > 0) {\n      this._closeNodes(this._nodes);\n    }\n    this._menuInstances = [];\n    this._nodes = [];\n  }\n\n  selectMenuItem(node: MenuItem): void {\n    if (!node.action) {\n      this.removeActiveState(this._connectedNodes);\n    }\n\n    if (node.action && node.excludeActiveOnAction) {\n      return;\n    }\n\n    node.selected = true;\n    let nodeParent = node.parent;\n\n    while (nodeParent) {\n      nodeParent.active = true;\n      nodeParent = nodeParent.parent;\n    }\n  }\n\n  removeActiveState(nodes: MenuItem[] = this._connectedNodes): void {\n    if (nodes && nodes.length) {\n      nodes.forEach(node => {\n        node.selected = false;\n        node.active = false;\n\n        if (node.items && node.items.length) {\n          this.removeActiveState(node.items);\n        }\n      });\n    }\n  }\n\n  private _closeNodes(nodes: MenuItem[]): void {\n    nodes.forEach(item => {\n      if (item) {\n        item.expanded = false;\n\n        if (item.items) {\n          this._closeNodes(item.items);\n        }\n      }\n    });\n  }\n}\n"]}