import { ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { transition, trigger, useAnimation } from '@angular/animations';
import { ANIMATION_NAME } from '../common/animation';
import { combineLatest, Subject } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
import { AdaptCustomActionsAlignEnum } from '../custom-actions/adapt-custom-actions.model';
import { AdaptTranslateService } from '../common/i18n/index';
import { formatString } from '../common/utilities';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import { SafeCdr } from '../common/safe-cdr';
import * as i0 from "@angular/core";
import * as i1 from "../common/i18n/index";
import * as i2 from "../common/radar/adapt-radar";
import * as i3 from "@angular/common";
import * as i4 from "../rx/rx-textfield/adapt-rx-textfield.component";
import * as i5 from "@angular/forms";
import * as i6 from "../custom-actions/adapt-custom-actions.component";
const _c0 = ["viewBlock"];
const _c1 = ["viewBlockRow"];
function AdaptInlineEditorComponent_label_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "label", 4);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r0.label);
} }
function AdaptInlineEditorComponent_div_4_ng_container_9_div_2_strong_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "strong");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const error_r6 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", error_r6.name, " ");
} }
function AdaptInlineEditorComponent_div_4_ng_container_9_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 12);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵtemplate(2, AdaptInlineEditorComponent_div_4_ng_container_9_div_2_strong_2_Template, 2, 1, "strong", 13);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const error_r6 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("@validationFeedbackAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", error_r6.name);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n          ", error_r6.message, "\n        ");
} }
function AdaptInlineEditorComponent_div_4_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptInlineEditorComponent_div_4_ng_container_9_div_2_Template, 4, 3, "div", 11);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const error_r6 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", error_r6);
} }
function AdaptInlineEditorComponent_div_4_ng_container_12_div_2_strong_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "strong");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const error_r11 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", error_r11.name, " ");
} }
function AdaptInlineEditorComponent_div_4_ng_container_12_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 12);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵtemplate(2, AdaptInlineEditorComponent_div_4_ng_container_12_div_2_strong_2_Template, 2, 1, "strong", 13);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const error_r11 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("@validationFeedbackAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", error_r11.name);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n          ", error_r11.message, "\n        ");
} }
function AdaptInlineEditorComponent_div_4_ng_container_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptInlineEditorComponent_div_4_ng_container_12_div_2_Template, 4, 3, "div", 11);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const error_r11 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", error_r11);
} }
function AdaptInlineEditorComponent_div_4_div_16_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 18);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate2("\n        ", ctx_r16.value ? ctx_r16.value.length : 0, " / ", ctx_r16.maxLength, "\n      ");
} }
function AdaptInlineEditorComponent_div_4_div_16_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 14);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptInlineEditorComponent_div_4_div_16_div_2_Template, 2, 2, "div", 15);
    i0.ɵɵtext(3, "\n\n      ");
    i0.ɵɵelementStart(4, "div", 16);
    i0.ɵɵtext(5, "\n        ");
    i0.ɵɵelementStart(6, "adapt-custom-actions", 17);
    i0.ɵɵtext(7, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r5.maxLength);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("alignedTo", ctx_r5.customActionsAlignedTo)("actions", ctx_r5.customActions)("adaptRadarDisableEventSending", true);
} }
function AdaptInlineEditorComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r18 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 5);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "div", 6);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementStart(4, "adapt-rx-textfield", 7);
    i0.ɵɵlistener("ngModelChange", function AdaptInlineEditorComponent_div_4_Template_adapt_rx_textfield_ngModelChange_4_listener($event) { i0.ɵɵrestoreView(_r18); const ctx_r17 = i0.ɵɵnextContext(); return ctx_r17.value = $event; })("onFocus", function AdaptInlineEditorComponent_div_4_Template_adapt_rx_textfield_onFocus_4_listener($event) { i0.ɵɵrestoreView(_r18); const ctx_r19 = i0.ɵɵnextContext(); return ctx_r19.inputControlFocus($event); })("onBlur", function AdaptInlineEditorComponent_div_4_Template_adapt_rx_textfield_onBlur_4_listener() { i0.ɵɵrestoreView(_r18); const ctx_r20 = i0.ɵɵnextContext(); return ctx_r20.inputControlBlur(); })("ngModelChange", function AdaptInlineEditorComponent_div_4_Template_adapt_rx_textfield_ngModelChange_4_listener($event) { i0.ɵɵrestoreView(_r18); const ctx_r21 = i0.ɵɵnextContext(); return ctx_r21.textFieldInput$.next($event); })("keyup.esc", function AdaptInlineEditorComponent_div_4_Template_adapt_rx_textfield_keyup_esc_4_listener() { i0.ɵɵrestoreView(_r18); const ctx_r22 = i0.ɵɵnextContext(); return ctx_r22.cancelEdit(); })("keydown.meta.enter", function AdaptInlineEditorComponent_div_4_Template_adapt_rx_textfield_keydown_meta_enter_4_listener() { i0.ɵɵrestoreView(_r18); const ctx_r23 = i0.ɵɵnextContext(); return ctx_r23.saveEdit(); })("keydown.control.enter", function AdaptInlineEditorComponent_div_4_Template_adapt_rx_textfield_keydown_control_enter_4_listener() { i0.ɵɵrestoreView(_r18); const ctx_r24 = i0.ɵɵnextContext(); return ctx_r24.saveEdit(); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n\n    ");
    i0.ɵɵelementStart(7, "div", 8);
    i0.ɵɵtext(8, "\n      ");
    i0.ɵɵtemplate(9, AdaptInlineEditorComponent_div_4_ng_container_9_Template, 4, 1, "ng-container", 9);
    i0.ɵɵpipe(10, "async");
    i0.ɵɵtext(11, "\n\n      ");
    i0.ɵɵtemplate(12, AdaptInlineEditorComponent_div_4_ng_container_12_Template, 4, 1, "ng-container", 9);
    i0.ɵɵpipe(13, "async");
    i0.ɵɵtext(14, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n\n    ");
    i0.ɵɵtemplate(16, AdaptInlineEditorComponent_div_4_div_16_Template, 10, 4, "div", 10);
    i0.ɵɵtext(17, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("@editorModeChangeAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("has-danger", ctx_r1.hasErrors);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("ngModel", ctx_r1.value)("placeholder", ctx_r1.placeholder)("autofocus", true);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(10, 10, ctx_r1.defaultErrors$));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind1(13, 12, ctx_r1.customErrors$));
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", !ctx_r1.hideEditControls);
} }
function AdaptInlineEditorComponent_div_6_button_10_Template(rf, ctx) { if (rf & 1) {
    const _r29 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 24);
    i0.ɵɵlistener("click", function AdaptInlineEditorComponent_div_6_button_10_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r29); const ctx_r28 = i0.ɵɵnextContext(2); return ctx_r28.enterEditMode(); });
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelement(2, "span", 25);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r27 = i0.ɵɵnextContext(2);
    i0.ɵɵclassMapInterpolate1("a-editor-btn a-editor-btn_start-edit btn btn-link ", ctx_r27.buttonClass, "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("\n      ", ctx_r27.value && ctx_r27.value.length ? ctx_r27.controlLabels.edit : ctx_r27.controlLabels.add, "\n    ");
} }
function AdaptInlineEditorComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r31 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 19);
    i0.ɵɵlistener("click", function AdaptInlineEditorComponent_div_6_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r31); const ctx_r30 = i0.ɵɵnextContext(); return ctx_r30.viewTextClick(); })("focus", function AdaptInlineEditorComponent_div_6_Template_div_focus_0_listener() { i0.ɵɵrestoreView(_r31); const ctx_r32 = i0.ɵɵnextContext(); return ctx_r32.viewTextClick(); });
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "span", 20, 21);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n    ");
    i0.ɵɵelementStart(6, "span", null, 22);
    i0.ɵɵtext(8, "\u00A0");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n    ");
    i0.ɵɵtemplate(10, AdaptInlineEditorComponent_div_6_button_10_Template, 4, 4, "button", 23);
    i0.ɵɵtext(11, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("edit-on-click", ctx_r2.editOnClick);
    i0.ɵɵproperty("@editorModeChangeAnimation", undefined);
    i0.ɵɵattribute("tabindex", ctx_r2.editOnClick ? 0 : -1);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r2.value);
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("ngIf", !ctx_r2.hideViewControls);
} }
export class AdaptInlineEditorComponent extends AdaptRadarAngularGenericDirective {
    constructor(ts, _changeDetectorRef, _adaptRadarService, _elem) {
        super(_adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptInlineEditor);
        this.ts = ts;
        this._changeDetectorRef = _changeDetectorRef;
        // Template fields
        this.hasErrors = false;
        this.oldControlModel = '';
        this.editMode = false;
        this.defaultTexts = {};
        this.rowsCount = 0;
        this.textFieldInput$ = new Subject();
        this.customActionsAlignedTo = AdaptCustomActionsAlignEnum.Right;
        /**
         * Set of error callbacks. Each of them will be invoke on text input
         * @docs-default
         */
        this.customErrors = [];
        /**
         * An event fired when on save
         */
        // TODO: Refactor this if possible
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any, @angular-eslint/no-output-on-prefix */
        this.onSave = new EventEmitter();
        /**
         * An event fired when on cancel
         */
        // TODO: Refactor this if possible
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any, @angular-eslint/no-output-on-prefix */
        this.onCancel = new EventEmitter();
        this._controlLabels = {};
        // ### ControlValueAccessor implementation
        // TODO: Refactor this if possible
        /* eslint-disable-next-line */
        this.propagateChange = (_) => {
        };
        this.setDefaultTexts(ts.getCurrentLanguage());
    }
    /**
     * Custom UI Controls labels
     * @docs-default
     */
    set controlLabels(value) {
        this._controlLabels = Object.assign(Object.assign({}, this.defaultTexts), value);
    }
    get controlLabels() {
        return this._controlLabels;
    }
    /**
     * minLength error message
     * @docs-default
     */
    set minLengthErrorText(obj) {
        if (obj) {
            this._minLengthErrorText = {
                name: obj.name || '',
                message: obj.message ? formatString(obj.message, this.minLength) : ''
            };
        }
    }
    get minLengthErrorText() {
        return this._minLengthErrorText;
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    get value() {
        return this._model;
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    set value(v) {
        this._model = v;
        this.propagateChange(this._model);
    }
    get customActions() {
        return [
            {
                name: this.controlLabels.cancel,
                visible: true,
                onClick: this.cancelEdit.bind(this)
            },
            {
                name: this.controlLabels.save,
                visible: !this.hasErrors,
                onClick: this.saveEdit.bind(this)
            }
        ];
    }
    ngOnInit() {
        this.controlLabels = Object.assign(Object.assign({}, this.defaultTexts), this.controlLabels);
        if (!this.minLengthErrorText) {
            this.minLengthErrorText = {
                name: '',
                message: formatString(this.defaultTexts.minError, this.minLength)
            };
        }
        if (!this.maxLengthErrorText) {
            this.maxLengthErrorText = { name: '', message: this.defaultTexts.maxError };
        }
        this._initErrors();
    }
    setDefaultTexts(translation) {
        this.defaultTexts.edit = translation['adapt.common.edit'];
        this.defaultTexts.add = translation['adapt.common.add'];
        this.defaultTexts.save = translation['adapt.common.save'];
        this.defaultTexts.cancel = translation['adapt.common.cancel'];
        this.defaultTexts.minError = translation['adapt.inlineEditor.error.min'];
        this.defaultTexts.maxError = translation['adapt.inlineEditor.error.max'];
    }
    ngOnDestroy() {
        this._errorsSubscription.unsubscribe();
    }
    enterEditMode() {
        if (this.rows) {
            this.rowsCount = this.rows > 1 ? this.rows : 0;
        }
        else {
            this._autoCalculateRows();
        }
        this.editMode = true;
        this.oldControlModel = this.value;
    }
    /**
     * Save value and exit edit mode
     */
    saveEdit() {
        this.editMode = false;
        this.onSave.emit(this.value);
    }
    /**
     * Exit edit mode without saving
     */
    cancelEdit() {
        this.editMode = false;
        // setting old value
        this.value = this.oldControlModel;
        this.onCancel.emit(this.value);
    }
    viewTextClick() {
        if (this.editOnClick) {
            this.enterEditMode();
        }
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    inputControlFocus(event) {
        if (this.selectTextOnEdit) {
            event.target.select();
        }
    }
    inputControlBlur() {
        if (this.saveOnBlur) {
            this.saveEdit();
        }
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    writeValue(v) {
        if (v) {
            this._model = v;
        }
        SafeCdr.detectChanges(this._changeDetectorRef);
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line  */
    registerOnTouched(fn) {
    }
    _autoCalculateRows() {
        const viewBlockHeight = this.viewBlock.nativeElement.getBoundingClientRect().height;
        const viewBlockRowHeight = this.viewBlockRow.nativeElement.getBoundingClientRect().height;
        this.rowsCount = Math.round(viewBlockHeight / viewBlockRowHeight) || 1;
    }
    _initErrors() {
        this.defaultErrors$ = combineLatest([
            this.textFieldInput$
                .pipe(map(inputText => this.minLength && ((inputText ? inputText.length : 0) < this.minLength)), distinctUntilChanged(), map(isError => isError ? this.minLengthErrorText : null)),
            this.textFieldInput$
                .pipe(map(inputText => this.maxLength && ((inputText ? inputText.length : 0) > this.maxLength)), distinctUntilChanged(), map(isError => isError ? this.maxLengthErrorText : null))
        ]);
        this.customErrors$ = combineLatest(this.customErrors
            .map(mapCallback => this.textFieldInput$.pipe(map(mapCallback), distinctUntilChanged((a, b) => {
            return JSON.stringify(a) === JSON.stringify(b);
        }))));
        this._errorsSubscription = combineLatest(this.customErrors.length ? [this.defaultErrors$, this.customErrors$] :
            this.defaultErrors$).subscribe(errorsList => {
            this.hasErrors = errorsList.some(errors => (errors || []).some(err2 => !!err2));
        });
    }
}
AdaptInlineEditorComponent.ɵfac = function AdaptInlineEditorComponent_Factory(t) { return new (t || AdaptInlineEditorComponent)(i0.ɵɵdirectiveInject(i1.AdaptTranslateService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptInlineEditorComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptInlineEditorComponent, selectors: [["adapt-inline-editor"]], viewQuery: function AdaptInlineEditorComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
        i0.ɵɵviewQuery(_c1, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.viewBlock = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.viewBlockRow = _t.first);
    } }, inputs: { rows: "rows", minLength: "minLength", maxLength: "maxLength", label: "label", placeholder: "placeholder", controlLabels: "controlLabels", selectTextOnEdit: "selectTextOnEdit", editOnClick: "editOnClick", saveOnBlur: "saveOnBlur", showEditControlOnHover: "showEditControlOnHover", hideViewControls: "hideViewControls", hideEditControls: "hideEditControls", buttonClass: "buttonClass", minLengthErrorText: "minLengthErrorText", maxLengthErrorText: "maxLengthErrorText", customErrors: "customErrors" }, outputs: { onSave: "onSave", onCancel: "onCancel" }, features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => AdaptInlineEditorComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature], decls: 9, vars: 5, consts: [["class", "form-control-label", 4, "ngIf"], [1, "a-editor"], ["class", "a-editor__edit-mode-block", 4, "ngIf"], ["class", "a-editor__view-mode-block", 3, "edit-on-click", "click", "focus", 4, "ngIf"], [1, "form-control-label"], [1, "a-editor__edit-mode-block"], [1, "form-group"], [1, "a-editor-edit-input", 3, "adaptRadarDisableEventSending", "ngModel", "placeholder", "autofocus", "ngModelChange", "onFocus", "onBlur", "keyup.esc", "keydown.meta.enter", "keydown.control.enter"], [1, "a-editor-feedback", "has-danger"], [4, "ngFor", "ngForOf"], ["class", "a-editor-edit-controls", 4, "ngIf"], ["class", "form-control-feedback", 4, "ngIf"], [1, "form-control-feedback"], [4, "ngIf"], [1, "a-editor-edit-controls"], ["class", "a-editor-edit-controls__left text-secondary", "aria-hidden", "true", 4, "ngIf"], [1, "a-editor-edit-controls__right"], [3, "alignedTo", "actions", "adaptRadarDisableEventSending"], ["aria-hidden", "true", 1, "a-editor-edit-controls__left", "text-secondary"], [1, "a-editor__view-mode-block", 3, "click", "focus"], [1, "a-editor-text"], ["viewBlock", ""], ["viewBlockRow", ""], ["type", "button", 3, "class", "click", 4, "ngIf"], ["type", "button", 3, "click"], [1, "d-icon-pencil_adapt"]], template: function AdaptInlineEditorComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, AdaptInlineEditorComponent_label_0_Template, 2, 1, "label", 0);
        i0.ɵɵtext(1, "\n");
        i0.ɵɵelementStart(2, "div", 1);
        i0.ɵɵtext(3, "\n  ");
        i0.ɵɵtemplate(4, AdaptInlineEditorComponent_div_4_Template, 18, 14, "div", 2);
        i0.ɵɵtext(5, "\n  ");
        i0.ɵɵtemplate(6, AdaptInlineEditorComponent_div_6_Template, 12, 6, "div", 3);
        i0.ɵɵtext(7, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(8, "\n");
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.label);
        i0.ɵɵadvance(2);
        i0.ɵɵclassProp("a-editor_controls-on-hover", ctx.showEditControlOnHover);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.editMode);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx.editMode);
    } }, directives: [i3.NgIf, i4.AdaptRxTextfieldComponent, i5.NgControlStatus, i5.NgModel, i3.NgForOf, i6.AdaptCustomActionsComponent], pipes: [i3.AsyncPipe], encapsulation: 2, data: { animation: [
            trigger('editorModeChangeAnimation', [
                transition('void => *', [
                    useAnimation(ANIMATION_NAME.opacity)
                ])
            ]),
            trigger('validationFeedbackAnimation', [
                transition(':enter', [
                    useAnimation(ANIMATION_NAME.fadeIn)
                ]),
                transition(':leave', [
                    useAnimation(ANIMATION_NAME.fadeOut)
                ])
            ]),
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptInlineEditorComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-inline-editor',
                templateUrl: './inline-editor.html',
                animations: [
                    trigger('editorModeChangeAnimation', [
                        transition('void => *', [
                            useAnimation(ANIMATION_NAME.opacity)
                        ])
                    ]),
                    trigger('validationFeedbackAnimation', [
                        transition(':enter', [
                            useAnimation(ANIMATION_NAME.fadeIn)
                        ]),
                        transition(':leave', [
                            useAnimation(ANIMATION_NAME.fadeOut)
                        ])
                    ]),
                ],
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => AdaptInlineEditorComponent),
                        multi: true
                    }
                ]
            }]
    }], function () { return [{ type: i1.AdaptTranslateService }, { type: i0.ChangeDetectorRef }, { type: i2.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { rows: [{
            type: Input
        }], minLength: [{
            type: Input
        }], maxLength: [{
            type: Input
        }], label: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], controlLabels: [{
            type: Input
        }], selectTextOnEdit: [{
            type: Input
        }], editOnClick: [{
            type: Input
        }], saveOnBlur: [{
            type: Input
        }], showEditControlOnHover: [{
            type: Input
        }], hideViewControls: [{
            type: Input
        }], hideEditControls: [{
            type: Input
        }], buttonClass: [{
            type: Input
        }], minLengthErrorText: [{
            type: Input
        }], maxLengthErrorText: [{
            type: Input
        }], customErrors: [{
            type: Input
        }], onSave: [{
            type: Output
        }], onCancel: [{
            type: Output
        }], viewBlock: [{
            type: ViewChild,
            args: ['viewBlock']
        }], viewBlockRow: [{
            type: ViewChild,
            args: ['viewBlockRow']
        }] }); })();
//# sourceMappingURL=inline-editor.component.js.map