/**
 * Object that store the helper enumerations
 */
const KEYBOARD_CODES = {
    /**
     * This object is the reverse of `keyCode`,
     * and is used to translate the key code to named keys
     * when no valid characters can be obtained by `String.fromCharCode`.
     * Note: this sparse array is initialized later in the source code.
     */
    fromCharCodeKeyCode: [],
    /**
     * Wrapper variable that hold named keyboard keys with their respective key name (as set in KeyboardEvent.key).
     * Those names are listed here :
     * @link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values
     */
    keyName: {
        // Special values
        Unidentified: 'Unidentified',
        // Modifier keys
        Alt: 'Alt',
        AltGr: 'AltGraph',
        CapsLock: 'CapsLock',
        Ctrl: 'Control',
        Fn: 'Fn',
        FnLock: 'FnLock',
        Hyper: 'Hyper',
        Meta: 'Meta',
        OSLeft: 'OS',
        OSRight: 'OS',
        Command: 'OS',
        NumLock: 'NumLock',
        ScrollLock: 'ScrollLock',
        Shift: 'Shift',
        Super: 'Super',
        Symbol: 'Symbol',
        SymbolLock: 'SymbolLock',
        // Whitespace keys
        Enter: 'Enter',
        Tab: 'Tab',
        Space: ' ',
        // Navigation keys
        LeftArrow: 'ArrowLeft',
        UpArrow: 'ArrowUp',
        RightArrow: 'ArrowRight',
        DownArrow: 'ArrowDown',
        End: 'End',
        Home: 'Home',
        PageUp: 'PageUp',
        PageDown: 'PageDown',
        // Editing keys
        Backspace: 'Backspace',
        Clear: 'Clear',
        Copy: 'Copy',
        CrSel: 'CrSel',
        Cut: 'Cut',
        Delete: 'Delete',
        EraseEof: 'EraseEof',
        ExSel: 'ExSel',
        Insert: 'Insert',
        Paste: 'Paste',
        Redo: 'Redo',
        Undo: 'Undo',
        // UI keys
        Accept: 'Accept',
        Again: 'Again',
        Attn: 'Attn',
        Cancel: 'Cancel',
        ContextMenu: 'ContextMenu',
        Esc: 'Escape',
        Execute: 'Execute',
        Find: 'Find',
        Finish: 'Finish',
        Help: 'Help',
        Pause: 'Pause',
        Play: 'Play',
        Props: 'Props',
        Select: 'Select',
        ZoomIn: 'ZoomIn',
        ZoomOut: 'ZoomOut',
        // Device keys
        BrightnessDown: 'BrightnessDown',
        BrightnessUp: 'BrightnessUp',
        Eject: 'Eject',
        LogOff: 'LogOff',
        Power: 'Power',
        PowerOff: 'PowerOff',
        PrintScreen: 'PrintScreen',
        Hibernate: 'Hibernate',
        Standby: 'Standby',
        WakeUp: 'WakeUp',
        // IME and composition keys
        Compose: 'Compose',
        Dead: 'Dead',
        // Function keys
        F1: 'F1',
        F2: 'F2',
        F3: 'F3',
        F4: 'F4',
        F5: 'F5',
        F6: 'F6',
        F7: 'F7',
        F8: 'F8',
        F9: 'F9',
        F10: 'F10',
        F11: 'F11',
        F12: 'F12',
        // Document keys
        Print: 'Print',
        // 'Normal' keys
        num0: '0',
        num1: '1',
        num2: '2',
        num3: '3',
        num4: '4',
        num5: '5',
        num6: '6',
        num7: '7',
        num8: '8',
        num9: '9',
        a: 'a',
        b: 'b',
        c: 'c',
        d: 'd',
        e: 'e',
        f: 'f',
        g: 'g',
        h: 'h',
        i: 'i',
        j: 'j',
        k: 'k',
        l: 'l',
        m: 'm',
        n: 'n',
        o: 'o',
        p: 'p',
        q: 'q',
        r: 'r',
        s: 's',
        t: 't',
        u: 'u',
        v: 'v',
        w: 'w',
        x: 'x',
        y: 'y',
        z: 'z',
        Semicolon: ';',
        Equal: '=',
        Comma: ',',
        Hyphen: '-',
        Minus: '-',
        Plus: '+',
        Dot: '.',
        Slash: '/',
        Backquote: '`',
        LeftBracket: '[',
        RightBracket: ']',
        Backslash: '\\',
        Quote: '\'',
        // Numeric keypad keys
        numpad0: '0',
        numpad1: '1',
        numpad2: '2',
        numpad3: '3',
        numpad4: '4',
        numpad5: '5',
        numpad6: '6',
        numpad7: '7',
        numpad8: '8',
        numpad9: '9',
        NumpadDot: '.',
        NumpadDotAlt: ',',
        // sent by this key to the decimal character of the current language
        NumpadMultiply: '*',
        NumpadPlus: '+',
        NumpadMinus: '-',
        NumpadSlash: '/',
        NumpadDotObsoleteBrowsers: 'Decimal',
        NumpadMultiplyObsoleteBrowsers: 'Multiply',
        NumpadPlusObsoleteBrowsers: 'Add',
        NumpadMinusObsoleteBrowsers: 'Subtract',
        NumpadSlashObsoleteBrowsers: 'Divide',
        // Special arrays for quicker tests
        _allFnKeys: ['F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'],
        _someNonPrintableKeys: ['Tab', 'Enter', 'Shift', 'ShiftLeft', 'ShiftRight', 'Control', 'ControlLeft', 'ControlRight', 'Alt', 'AltLeft', 'AltRight', 'Pause', 'CapsLock', 'Escape'],
        _directionKeys: ['PageUp', 'PageDown', 'End', 'Home', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'ArrowUp']
    }
};
// Here we populate the sparse array that uses the `event.keyCode` as index, and returns the corresponding key name (Ã  la event.key)
KEYBOARD_CODES.fromCharCodeKeyCode[0] = 'LaunchCalculator';
KEYBOARD_CODES.fromCharCodeKeyCode[8] = 'Backspace';
KEYBOARD_CODES.fromCharCodeKeyCode[9] = 'Tab';
KEYBOARD_CODES.fromCharCodeKeyCode[13] = 'Enter';
KEYBOARD_CODES.fromCharCodeKeyCode[16] = 'Shift';
KEYBOARD_CODES.fromCharCodeKeyCode[17] = 'Ctrl';
KEYBOARD_CODES.fromCharCodeKeyCode[18] = 'Alt';
KEYBOARD_CODES.fromCharCodeKeyCode[19] = 'Pause';
KEYBOARD_CODES.fromCharCodeKeyCode[20] = 'CapsLock';
KEYBOARD_CODES.fromCharCodeKeyCode[27] = 'Escape';
KEYBOARD_CODES.fromCharCodeKeyCode[32] = ' ';
KEYBOARD_CODES.fromCharCodeKeyCode[33] = 'PageUp';
KEYBOARD_CODES.fromCharCodeKeyCode[34] = 'PageDown';
KEYBOARD_CODES.fromCharCodeKeyCode[35] = 'End';
KEYBOARD_CODES.fromCharCodeKeyCode[36] = 'Home';
KEYBOARD_CODES.fromCharCodeKeyCode[37] = 'ArrowLeft';
KEYBOARD_CODES.fromCharCodeKeyCode[38] = 'ArrowUp';
KEYBOARD_CODES.fromCharCodeKeyCode[39] = 'ArrowRight';
KEYBOARD_CODES.fromCharCodeKeyCode[40] = 'ArrowDown';
KEYBOARD_CODES.fromCharCodeKeyCode[45] = 'Insert';
KEYBOARD_CODES.fromCharCodeKeyCode[46] = 'Delete';
KEYBOARD_CODES.fromCharCodeKeyCode[48] = '0';
KEYBOARD_CODES.fromCharCodeKeyCode[49] = '1';
KEYBOARD_CODES.fromCharCodeKeyCode[50] = '2';
KEYBOARD_CODES.fromCharCodeKeyCode[51] = '3';
KEYBOARD_CODES.fromCharCodeKeyCode[52] = '4';
KEYBOARD_CODES.fromCharCodeKeyCode[53] = '5';
KEYBOARD_CODES.fromCharCodeKeyCode[54] = '6';
KEYBOARD_CODES.fromCharCodeKeyCode[55] = '7';
KEYBOARD_CODES.fromCharCodeKeyCode[56] = '8';
KEYBOARD_CODES.fromCharCodeKeyCode[57] = '9';
KEYBOARD_CODES.fromCharCodeKeyCode[65] = 'a';
KEYBOARD_CODES.fromCharCodeKeyCode[66] = 'b';
KEYBOARD_CODES.fromCharCodeKeyCode[67] = 'c';
KEYBOARD_CODES.fromCharCodeKeyCode[68] = 'd';
KEYBOARD_CODES.fromCharCodeKeyCode[69] = 'e';
KEYBOARD_CODES.fromCharCodeKeyCode[70] = 'f';
KEYBOARD_CODES.fromCharCodeKeyCode[71] = 'g';
KEYBOARD_CODES.fromCharCodeKeyCode[72] = 'h';
KEYBOARD_CODES.fromCharCodeKeyCode[73] = 'i';
KEYBOARD_CODES.fromCharCodeKeyCode[74] = 'j';
KEYBOARD_CODES.fromCharCodeKeyCode[75] = 'k';
KEYBOARD_CODES.fromCharCodeKeyCode[76] = 'l';
KEYBOARD_CODES.fromCharCodeKeyCode[77] = 'm';
KEYBOARD_CODES.fromCharCodeKeyCode[78] = 'n';
KEYBOARD_CODES.fromCharCodeKeyCode[79] = 'o';
KEYBOARD_CODES.fromCharCodeKeyCode[80] = 'p';
KEYBOARD_CODES.fromCharCodeKeyCode[81] = 'q';
KEYBOARD_CODES.fromCharCodeKeyCode[82] = 'r';
KEYBOARD_CODES.fromCharCodeKeyCode[83] = 's';
KEYBOARD_CODES.fromCharCodeKeyCode[84] = 't';
KEYBOARD_CODES.fromCharCodeKeyCode[85] = 'u';
KEYBOARD_CODES.fromCharCodeKeyCode[86] = 'v';
KEYBOARD_CODES.fromCharCodeKeyCode[87] = 'w';
KEYBOARD_CODES.fromCharCodeKeyCode[88] = 'x';
KEYBOARD_CODES.fromCharCodeKeyCode[89] = 'y';
KEYBOARD_CODES.fromCharCodeKeyCode[90] = 'z';
KEYBOARD_CODES.fromCharCodeKeyCode[91] = 'OS'; // Note: Firefox and Chrome reports 'OS' instead of 'OSLeft'
KEYBOARD_CODES.fromCharCodeKeyCode[92] = 'OSRight';
KEYBOARD_CODES.fromCharCodeKeyCode[93] = 'ContextMenu';
KEYBOARD_CODES.fromCharCodeKeyCode[96] = '0';
KEYBOARD_CODES.fromCharCodeKeyCode[97] = '1';
KEYBOARD_CODES.fromCharCodeKeyCode[98] = '2';
KEYBOARD_CODES.fromCharCodeKeyCode[99] = '3';
KEYBOARD_CODES.fromCharCodeKeyCode[100] = '4';
KEYBOARD_CODES.fromCharCodeKeyCode[101] = '5';
KEYBOARD_CODES.fromCharCodeKeyCode[102] = '6';
KEYBOARD_CODES.fromCharCodeKeyCode[103] = '7';
KEYBOARD_CODES.fromCharCodeKeyCode[104] = '8';
KEYBOARD_CODES.fromCharCodeKeyCode[105] = '9';
KEYBOARD_CODES.fromCharCodeKeyCode[106] = '*';
KEYBOARD_CODES.fromCharCodeKeyCode[107] = '+';
KEYBOARD_CODES.fromCharCodeKeyCode[109] = '-';
KEYBOARD_CODES.fromCharCodeKeyCode[110] = '.';
KEYBOARD_CODES.fromCharCodeKeyCode[111] = '/';
KEYBOARD_CODES.fromCharCodeKeyCode[112] = 'F1';
KEYBOARD_CODES.fromCharCodeKeyCode[113] = 'F2';
KEYBOARD_CODES.fromCharCodeKeyCode[114] = 'F3';
KEYBOARD_CODES.fromCharCodeKeyCode[115] = 'F4';
KEYBOARD_CODES.fromCharCodeKeyCode[116] = 'F5';
KEYBOARD_CODES.fromCharCodeKeyCode[117] = 'F6';
KEYBOARD_CODES.fromCharCodeKeyCode[118] = 'F7';
KEYBOARD_CODES.fromCharCodeKeyCode[119] = 'F8';
KEYBOARD_CODES.fromCharCodeKeyCode[120] = 'F9';
KEYBOARD_CODES.fromCharCodeKeyCode[121] = 'F10';
KEYBOARD_CODES.fromCharCodeKeyCode[122] = 'F11';
KEYBOARD_CODES.fromCharCodeKeyCode[123] = 'F12';
KEYBOARD_CODES.fromCharCodeKeyCode[144] = 'NumLock';
KEYBOARD_CODES.fromCharCodeKeyCode[145] = 'ScrollLock';
KEYBOARD_CODES.fromCharCodeKeyCode[182] = 'MyComputer';
KEYBOARD_CODES.fromCharCodeKeyCode[183] = 'MyCalculator';
KEYBOARD_CODES.fromCharCodeKeyCode[186] = ';';
KEYBOARD_CODES.fromCharCodeKeyCode[187] = '=';
KEYBOARD_CODES.fromCharCodeKeyCode[188] = ',';
KEYBOARD_CODES.fromCharCodeKeyCode[189] = '-';
KEYBOARD_CODES.fromCharCodeKeyCode[190] = '.';
KEYBOARD_CODES.fromCharCodeKeyCode[191] = '/';
KEYBOARD_CODES.fromCharCodeKeyCode[192] = '`';
KEYBOARD_CODES.fromCharCodeKeyCode[219] = '[';
KEYBOARD_CODES.fromCharCodeKeyCode[220] = '\\';
KEYBOARD_CODES.fromCharCodeKeyCode[221] = ']';
KEYBOARD_CODES.fromCharCodeKeyCode[222] = '\'';
KEYBOARD_CODES.fromCharCodeKeyCode[224] = 'Meta';
KEYBOARD_CODES.fromCharCodeKeyCode[225] = 'AltGraph';
/**
 * Returns KeyboardEvent 'keyCode' according using event.key (if existing)
 */
export function getEventKeyCode(event) {
    let eventKeyCode;
    if (event.key !== undefined && event.key !== '') {
        const eventKey = event.key === 'Esc' ? 'Escape' : event.key; // IE11 event.key is 'Esc' instead of 'Escape'
        // Browser  KeyboardEvent.key prop for 'Space' equals ' '.
        // Add check when KeyboardEvent.key prop was set programmatically with 'Space'.
        if (eventKey === 'Space' || eventKey === KEYBOARD_CODES.keyName.Space) {
            eventKeyCode = KEYBOARD_CODES.fromCharCodeKeyCode.indexOf(KEYBOARD_CODES.keyName.Space);
        }
        else {
            eventKeyCode = KEYBOARD_CODES.fromCharCodeKeyCode.indexOf(eventKey);
        }
    }
    else {
        eventKeyCode = event.which || event.keyCode;
    }
    return eventKeyCode;
}
/**
 * Returns KeyboardEvent 'key'
 */
export function getEventKey(event) {
    let eventKey;
    if (event.key !== undefined && event.key !== '') {
        eventKey = event.key;
    }
    else {
        eventKey = KEYBOARD_CODES.fromCharCodeKeyCode[event.keyCode];
    }
    return eventKey;
}
//# sourceMappingURL=key-codes.js.map