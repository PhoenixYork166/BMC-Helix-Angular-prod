import { Component, ElementRef, forwardRef, Inject, Input, Renderer2, ViewChild, ViewEncapsulation } from '@angular/core';
import { DOWN_ARROW, ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE, TAB, UP_ARROW } from '@angular/cdk/keycodes';
import { animate, style, transition, trigger } from '@angular/animations';
import { isEqual } from 'lodash-es';
import { UITreeNode } from 'primeng/tree';
import { ANIMATION_DURATION, ANIMATION_TIMING_FUNCTION } from '../common/animation';
import { getEventKeyCode } from '../common/key-codes';
import { AdaptTreeComponent } from './tree.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../highlight/highlight";
import * as i3 from "./tree.component";
const _c0 = ["treeNodeFocusEl"];
const _c1 = function (a0) { return { "ui-treenode-droppoint-active ui-state-highlight": a0 }; };
function AdaptTreeNodeComponent_ng_template_0_li_1_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 4);
    i0.ɵɵlistener("drop", function AdaptTreeNodeComponent_ng_template_0_li_1_Template_li_drop_0_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(2); return ctx_r4.onDropPoint($event, -1); })("dragover", function AdaptTreeNodeComponent_ng_template_0_li_1_Template_li_dragover_0_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r6 = i0.ɵɵnextContext(2); return ctx_r6.onDropPointDragOver($event); })("dragenter", function AdaptTreeNodeComponent_ng_template_0_li_1_Template_li_dragenter_0_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r7 = i0.ɵɵnextContext(2); return ctx_r7.onDropPointDragEnter($event, -1); })("dragleave", function AdaptTreeNodeComponent_ng_template_0_li_1_Template_li_dragleave_0_listener() { i0.ɵɵrestoreView(_r5); const ctx_r8 = i0.ɵɵnextContext(2); return ctx_r8.onDropPointDragLeave(); });
    i0.ɵɵtext(1, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c1, ctx_r1.draghoverPrev));
} }
const _c2 = function (a0) { return { "is-flip": a0 }; };
function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
    const _r19 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "span", 16);
    i0.ɵɵlistener("click", function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_span_2_Template_span_click_0_listener($event) { i0.ɵɵrestoreView(_r19); const ctx_r18 = i0.ɵɵnextContext(4); return ctx_r18.toggle($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext(4);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(2, _c2, ctx_r12.node.expanded));
    i0.ɵɵattribute("data-testid", ctx_r12.testID + "_toggle");
} }
function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 17);
} if (rf & 2) {
    i0.ɵɵproperty("@treeLineAnimated", undefined);
} }
const _c3 = function (a0) { return { "a-tree__node-icon": a0 }; };
function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_span_9_Template(rf, ctx) { if (rf & 1) {
    const _r21 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "span", 18);
    i0.ɵɵlistener("click", function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_span_9_Template_span_click_0_listener($event) { i0.ɵɵrestoreView(_r21); const ctx_r20 = i0.ɵɵnextContext(4); return ctx_r20.onNodeClick($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = i0.ɵɵnextContext(4);
    i0.ɵɵclassMap(ctx_r15.getIcon());
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c3, ctx_r15.node.icon || ctx_r15.node.expandedIcon || ctx_r15.node.collapsedIcon));
} }
function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_span_13_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r22 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r22.node.label);
} }
function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_span_13_adapt_highlight_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "adapt-highlight", 20);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r23 = i0.ɵɵnextContext(5);
    i0.ɵɵproperty("result", ctx_r23.node.label)("term", ctx_r23.query);
} }
function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_span_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵtemplate(2, AdaptTreeNodeComponent_ng_template_0_li_3_div_2_span_13_ng_container_2_Template, 2, 1, "ng-container", 15);
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵtemplate(4, AdaptTreeNodeComponent_ng_template_0_li_3_div_2_span_13_adapt_highlight_4_Template, 2, 2, "adapt-highlight", 19);
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r16.filter);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r16.filter);
} }
function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_span_15_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c4 = function (a0) { return { $implicit: a0 }; };
function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_span_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵtemplate(2, AdaptTreeNodeComponent_ng_template_0_li_3_div_2_span_15_ng_container_2_Template, 1, 0, "ng-container", 21);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r17 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r17.tree.getTemplateForNode(ctx_r17.node))("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c4, ctx_r17.node));
} }
const _c5 = function (a0, a1, a2, a3) { return { "is-selectable": a0, "ui-treenode-dragover": a1, "ui-treenode-dragover-disable": a2, "ui-treenode-dragStart": a3 }; };
const _c6 = function (a0, a1) { return { "is-active": a0, "is-flip": a1 }; };
function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r26 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵlistener("contextmenu", function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_Template_div_contextmenu_0_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r25 = i0.ɵɵnextContext(3); return ctx_r25.onNodeRightClick($event); })("touchend", function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_Template_div_touchend_0_listener() { i0.ɵɵrestoreView(_r26); const ctx_r27 = i0.ɵɵnextContext(3); return ctx_r27.onNodeTouchEnd(); })("drop", function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_Template_div_drop_0_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r28 = i0.ɵɵnextContext(3); return ctx_r28.onDropNode($event); })("dragover", function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_Template_div_dragover_0_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r29 = i0.ɵɵnextContext(3); return ctx_r29.onDropNodeDragOver($event); })("dragenter", function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_Template_div_dragenter_0_listener() { i0.ɵɵrestoreView(_r26); const ctx_r30 = i0.ɵɵnextContext(3); return ctx_r30.onDropNodeDragEnter(); })("dragleave", function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_Template_div_dragleave_0_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r31 = i0.ɵɵnextContext(3); return ctx_r31.onDropNodeDragLeave($event); })("dragstart", function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_Template_div_dragstart_0_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r32 = i0.ɵɵnextContext(3); return ctx_r32.onDragStart($event); })("dragend", function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_Template_div_dragend_0_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r33 = i0.ɵɵnextContext(3); return ctx_r33.onDragStop($event); });
    i0.ɵɵtext(1, "\n\n      ");
    i0.ɵɵtemplate(2, AdaptTreeNodeComponent_ng_template_0_li_3_div_2_span_2_Template, 1, 4, "span", 9);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵtemplate(4, AdaptTreeNodeComponent_ng_template_0_li_3_div_2_span_4_Template, 1, 1, "span", 10);
    i0.ɵɵtext(5, "\n\n      ");
    i0.ɵɵelementStart(6, "div", 11, 12);
    i0.ɵɵlistener("keydown", function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_Template_div_keydown_6_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r34 = i0.ɵɵnextContext(3); return ctx_r34.onTreeNodeKeydown($event); })("focus", function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_Template_div_focus_6_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r35 = i0.ɵɵnextContext(3); return ctx_r35.onTreeNodeFocus($event); })("focusout", function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_Template_div_focusout_6_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r36 = i0.ɵɵnextContext(3); return ctx_r36.onTreeNodeFocusout($event); });
    i0.ɵɵtext(8, "\n        ");
    i0.ɵɵtemplate(9, AdaptTreeNodeComponent_ng_template_0_li_3_div_2_span_9_Template, 1, 5, "span", 13);
    i0.ɵɵtext(10, "\n\n        ");
    i0.ɵɵelementStart(11, "span", 14);
    i0.ɵɵlistener("click", function AdaptTreeNodeComponent_ng_template_0_li_3_div_2_Template_span_click_11_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r37 = i0.ɵɵnextContext(3); return ctx_r37.onNodeClick($event); });
    i0.ɵɵtext(12, "\n          ");
    i0.ɵɵtemplate(13, AdaptTreeNodeComponent_ng_template_0_li_3_div_2_span_13_Template, 6, 2, "span", 15);
    i0.ɵɵtext(14, "\n          ");
    i0.ɵɵtemplate(15, AdaptTreeNodeComponent_ng_template_0_li_3_div_2_span_15_Template, 4, 4, "span", 15);
    i0.ɵɵtext(16, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(17, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction4(16, _c5, ctx_r9.tree.selectionMode && ctx_r9.node.selectable !== false, ctx_r9.draghoverNode, ctx_r9.dragOverDisabledNode, ctx_r9.dragStartedNode))("draggable", ctx_r9.tree.draggableNodes);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r9.node.children == null ? null : ctx_r9.node.children.length);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r9.isSelected());
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("tabIndex", ctx_r9.level === 0 && ctx_r9.firstChild && !ctx_r9.tree.focusNode ? 0 : -1)("ngClass", ctx_r9.treeNodeFocusElClass);
    i0.ɵɵattribute("aria-label", ctx_r9.node.label)("aria-expanded", ctx_r9.node.children && ctx_r9.node.expanded && !ctx_r9.isLeaf())("aria-level", ctx_r9.level)("aria-setsize", ctx_r9.node.parent ? ctx_r9.node.parent.children.length : null)("aria-posinset", ctx_r9.index + 1)("aria-checked", ctx_r9.tree.selectionMode ? ctx_r9.node.partialSelected ? "mixed" : ctx_r9.isSelected() : undefined);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r9.node.icon || ctx_r9.node.expandedIcon || ctx_r9.node.collapsedIcon);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(21, _c6, ctx_r9.isSelected(), ctx_r9.node.expanded && !ctx_r9.isLeaf()));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r9.tree.getTemplateForNode(ctx_r9.node));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r9.tree.getTemplateForNode(ctx_r9.node));
} }
function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_span_7_Template(rf, ctx) { if (rf & 1) {
    const _r45 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "span", 16);
    i0.ɵɵlistener("click", function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_span_7_Template_span_click_0_listener($event) { i0.ɵɵrestoreView(_r45); const ctx_r44 = i0.ɵɵnextContext(4); return ctx_r44.toggle($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r38 = i0.ɵɵnextContext(4);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(2, _c2, ctx_r38.node.expanded));
    i0.ɵɵattribute("data-testid", ctx_r38.testID + "_toggle");
} }
function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_div_12_Template(rf, ctx) { if (rf & 1) {
    const _r47 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 25);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "label", 26);
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵelementStart(4, "input", 27);
    i0.ɵɵlistener("click", function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_div_12_Template_input_click_4_listener($event) { i0.ɵɵrestoreView(_r47); const ctx_r46 = i0.ɵɵnextContext(4); return ctx_r46.onNodeClick($event); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n            ");
    i0.ɵɵelementStart(6, "div", 28);
    i0.ɵɵtext(7, "\n              ");
    i0.ɵɵelement(8, "span", 29);
    i0.ɵɵtext(9, "\n              ");
    i0.ɵɵelementStart(10, "span", 30);
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(13, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r40 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("checked", ctx_r40.isSelected())("indeterminate", ctx_r40.node.partialSelected)("disabled", ctx_r40.node["disallowMultipleNodeSelection"]);
    i0.ɵɵattribute("data-testid", ctx_r40.testID + "_checkbox");
    i0.ɵɵadvance(7);
    i0.ɵɵtextInterpolate(ctx_r40.node.label);
} }
function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_span_14_Template(rf, ctx) { if (rf & 1) {
    const _r49 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "span", 18);
    i0.ɵɵlistener("click", function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_span_14_Template_span_click_0_listener($event) { i0.ɵɵrestoreView(_r49); const ctx_r48 = i0.ɵɵnextContext(4); return ctx_r48.onNodeClick($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r41 = i0.ɵɵnextContext(4);
    i0.ɵɵclassMap(ctx_r41.getIcon());
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c3, ctx_r41.node.icon || ctx_r41.node.expandedIcon || ctx_r41.node.collapsedIcon));
} }
function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_span_18_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r50 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r50.node.label);
} }
function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_span_18_adapt_highlight_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "adapt-highlight", 20);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r51 = i0.ɵɵnextContext(5);
    i0.ɵɵproperty("result", ctx_r51.node.label)("term", ctx_r51.query);
} }
function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_span_18_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵtemplate(2, AdaptTreeNodeComponent_ng_template_0_li_3_div_4_span_18_ng_container_2_Template, 2, 1, "ng-container", 15);
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵtemplate(4, AdaptTreeNodeComponent_ng_template_0_li_3_div_4_span_18_adapt_highlight_4_Template, 2, 2, "adapt-highlight", 19);
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r42 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r42.filter);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r42.filter);
} }
function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_span_20_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_span_20_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵtemplate(2, AdaptTreeNodeComponent_ng_template_0_li_3_div_4_span_20_ng_container_2_Template, 1, 0, "ng-container", 21);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r43 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r43.tree.getTemplateForNode(ctx_r43.node))("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c4, ctx_r43.node));
} }
const _c7 = function (a0, a1, a2, a3) { return { "ui-treenode-selectable": a0, "ui-treenode-dragover": a1, "ui-treenode-dragover-disable": a2, "ui-treenode-dragStart": a3 }; };
function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r54 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵlistener("contextmenu", function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_Template_div_contextmenu_0_listener($event) { i0.ɵɵrestoreView(_r54); const ctx_r53 = i0.ɵɵnextContext(3); return ctx_r53.onNodeRightClick($event); })("touchend", function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_Template_div_touchend_0_listener() { i0.ɵɵrestoreView(_r54); const ctx_r55 = i0.ɵɵnextContext(3); return ctx_r55.onNodeTouchEnd(); })("drop", function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_Template_div_drop_0_listener($event) { i0.ɵɵrestoreView(_r54); const ctx_r56 = i0.ɵɵnextContext(3); return ctx_r56.onDropNode($event); })("dragover", function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_Template_div_dragover_0_listener($event) { i0.ɵɵrestoreView(_r54); const ctx_r57 = i0.ɵɵnextContext(3); return ctx_r57.onDropNodeDragOver($event); })("dragenter", function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_Template_div_dragenter_0_listener() { i0.ɵɵrestoreView(_r54); const ctx_r58 = i0.ɵɵnextContext(3); return ctx_r58.onDropNodeDragEnter(); })("dragleave", function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_Template_div_dragleave_0_listener($event) { i0.ɵɵrestoreView(_r54); const ctx_r59 = i0.ɵɵnextContext(3); return ctx_r59.onDropNodeDragLeave($event); })("dragstart", function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_Template_div_dragstart_0_listener($event) { i0.ɵɵrestoreView(_r54); const ctx_r60 = i0.ɵɵnextContext(3); return ctx_r60.onDragStart($event); })("dragend", function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_Template_div_dragend_0_listener($event) { i0.ɵɵrestoreView(_r54); const ctx_r61 = i0.ɵɵnextContext(3); return ctx_r61.onDragStop($event); });
    i0.ɵɵtext(1, "\n\n      ");
    i0.ɵɵtext(2, "\n      ");
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵtext(6, "\n\n\n      ");
    i0.ɵɵtemplate(7, AdaptTreeNodeComponent_ng_template_0_li_3_div_4_span_7_Template, 1, 4, "span", 9);
    i0.ɵɵtext(8, "\n\n      ");
    i0.ɵɵelementStart(9, "div", 22, 12);
    i0.ɵɵlistener("keydown", function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_Template_div_keydown_9_listener($event) { i0.ɵɵrestoreView(_r54); const ctx_r62 = i0.ɵɵnextContext(3); return ctx_r62.onTreeNodeKeydown($event); })("focus", function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_Template_div_focus_9_listener($event) { i0.ɵɵrestoreView(_r54); const ctx_r63 = i0.ɵɵnextContext(3); return ctx_r63.onTreeNodeFocus($event); })("focusout", function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_Template_div_focusout_9_listener($event) { i0.ɵɵrestoreView(_r54); const ctx_r64 = i0.ɵɵnextContext(3); return ctx_r64.onTreeNodeFocusout($event); });
    i0.ɵɵtext(11, "\n        ");
    i0.ɵɵtemplate(12, AdaptTreeNodeComponent_ng_template_0_li_3_div_4_div_12_Template, 15, 5, "div", 23);
    i0.ɵɵtext(13, "\n\n        ");
    i0.ɵɵtemplate(14, AdaptTreeNodeComponent_ng_template_0_li_3_div_4_span_14_Template, 1, 5, "span", 13);
    i0.ɵɵtext(15, "\n\n        ");
    i0.ɵɵelementStart(16, "span", 24);
    i0.ɵɵlistener("click", function AdaptTreeNodeComponent_ng_template_0_li_3_div_4_Template_span_click_16_listener($event) { i0.ɵɵrestoreView(_r54); const ctx_r65 = i0.ɵɵnextContext(3); return ctx_r65.onNodeClick($event); });
    i0.ɵɵtext(17, "\n          ");
    i0.ɵɵtemplate(18, AdaptTreeNodeComponent_ng_template_0_li_3_div_4_span_18_Template, 6, 2, "span", 15);
    i0.ɵɵtext(19, "\n          ");
    i0.ɵɵtemplate(20, AdaptTreeNodeComponent_ng_template_0_li_3_div_4_span_20_Template, 4, 4, "span", 15);
    i0.ɵɵtext(21, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(22, "\n\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(23, "\n\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction4(15, _c7, ctx_r10.tree.selectionMode && ctx_r10.node.selectable !== false, ctx_r10.draghoverNode, ctx_r10.dragOverDisabledNode, ctx_r10.dragStartedNode))("draggable", ctx_r10.tree.draggableNodes);
    i0.ɵɵadvance(7);
    i0.ɵɵproperty("ngIf", !ctx_r10.query);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("tabIndex", ctx_r10.level === 0 && ctx_r10.firstChild && !ctx_r10.tree.focusNode ? 0 : -1)("ngClass", ctx_r10.treeNodeFocusElClass);
    i0.ɵɵattribute("aria-label", ctx_r10.node.label)("aria-expanded", ctx_r10.node.children && ctx_r10.node.expanded && !ctx_r10.isLeaf())("aria-level", ctx_r10.level)("aria-setsize", ctx_r10.node.parent ? ctx_r10.node.parent.children.length : null)("aria-posinset", ctx_r10.index + 1)("aria-checked", ctx_r10.tree.selectionMode ? ctx_r10.node.partialSelected ? "mixed" : ctx_r10.isSelected() : undefined);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", !(ctx_r10.query && (ctx_r10.node.children == null ? null : ctx_r10.node.children.length)));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r10.node.icon || ctx_r10.node.expandedIcon || ctx_r10.node.collapsedIcon);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", !ctx_r10.tree.getTemplateForNode(ctx_r10.node));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r10.tree.getTemplateForNode(ctx_r10.node));
} }
function AdaptTreeNodeComponent_ng_template_0_li_3_div_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 31);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "div", 32);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelement(4, "div", 33);
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n    ");
    i0.ɵɵelementEnd();
} }
const _c8 = function (a0) { return { "a-tree__node_leaf": a0 }; };
function AdaptTreeNodeComponent_ng_template_0_li_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "li", 5);
    i0.ɵɵtext(1, "\n\n    ");
    i0.ɵɵtemplate(2, AdaptTreeNodeComponent_ng_template_0_li_3_div_2_Template, 19, 24, "div", 6);
    i0.ɵɵtext(3, "\n\n    ");
    i0.ɵɵtemplate(4, AdaptTreeNodeComponent_ng_template_0_li_3_div_4_Template, 24, 20, "div", 6);
    i0.ɵɵtext(5, "\n\n    ");
    i0.ɵɵtemplate(6, AdaptTreeNodeComponent_ng_template_0_li_3_div_6_Template, 7, 0, "div", 7);
    i0.ɵɵtext(7, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵclassMapInterpolate1("a-tree__node ", ctx_r2.node.styleClass, "");
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(7, _c8, ctx_r2.isLeaf()));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r2.tree.selectionMode !== "checkbox");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r2.tree.selectionMode === "checkbox");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r2.node.children && ctx_r2.node.expanded && !ctx_r2.isLeaf());
} }
function AdaptTreeNodeComponent_ng_template_0_li_5_Template(rf, ctx) { if (rf & 1) {
    const _r67 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 34);
    i0.ɵɵlistener("drop", function AdaptTreeNodeComponent_ng_template_0_li_5_Template_li_drop_0_listener($event) { i0.ɵɵrestoreView(_r67); const ctx_r66 = i0.ɵɵnextContext(2); return ctx_r66.onDropPoint($event, 1); })("dragover", function AdaptTreeNodeComponent_ng_template_0_li_5_Template_li_dragover_0_listener($event) { i0.ɵɵrestoreView(_r67); const ctx_r68 = i0.ɵɵnextContext(2); return ctx_r68.onDropPointDragOver($event); })("dragenter", function AdaptTreeNodeComponent_ng_template_0_li_5_Template_li_dragenter_0_listener($event) { i0.ɵɵrestoreView(_r67); const ctx_r69 = i0.ɵɵnextContext(2); return ctx_r69.onDropPointDragEnter($event, 1); })("dragleave", function AdaptTreeNodeComponent_ng_template_0_li_5_Template_li_dragleave_0_listener() { i0.ɵɵrestoreView(_r67); const ctx_r70 = i0.ɵɵnextContext(2); return ctx_r70.onDropPointDragLeave(); });
    i0.ɵɵtext(1, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c1, ctx_r3.draghoverNext));
} }
function AdaptTreeNodeComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵtemplate(1, AdaptTreeNodeComponent_ng_template_0_li_1_Template, 2, 3, "li", 1);
    i0.ɵɵtext(2, "\n\n  ");
    i0.ɵɵtemplate(3, AdaptTreeNodeComponent_ng_template_0_li_3_Template, 8, 9, "li", 2);
    i0.ɵɵtext(4, "\n\n  ");
    i0.ɵɵtemplate(5, AdaptTreeNodeComponent_ng_template_0_li_5_Template, 2, 3, "li", 3);
    i0.ɵɵtext(6, "\n");
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.tree.droppableNodes && !ctx_r0.dragOverPrevDisabled);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r0.tree.horizontal);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.tree.droppableNodes && ctx_r0.lastChild && !ctx_r0.dragOverNextDisabled);
} }
export class AdaptTreeNodeComponent extends UITreeNode {
    constructor(tree, _renderer) {
        super(tree);
        this.tree = tree;
        this._renderer = _renderer;
        this.treeNodeFocusElClass = 'a-tree__focused';
        this.dragOverDisabledNode = false;
    }
    onTreeNodeKeydown(event) {
        const eventKeyCode = getEventKeyCode(event);
        // If event came not from the current node, we have textfield in the custom template
        // in this case need to stop process keys except TAB
        if (event.target !== this.treeNodeFocusEl.nativeElement) {
            if (eventKeyCode === TAB) {
                if (event.shiftKey) {
                    // Return back focus to the node on TAB + shiftKey
                    event.preventDefault();
                    event.stopPropagation();
                    this.tree.focusNode = this.treeNodeFocusEl.nativeElement;
                    this.treeNodeFocusEl.nativeElement.focus();
                }
                else {
                    const nextToFocus = this._getNextTreeNodeFocusElement();
                    // Go to next node on TAB
                    if (nextToFocus) {
                        event.preventDefault();
                        event.stopPropagation();
                        nextToFocus.focus();
                    }
                    // If no nextToFocus node, the focus will go via standard browser flow
                }
            }
            return;
        }
        const openGroupKey = this.tree.isRtl ? LEFT_ARROW : RIGHT_ARROW;
        const closeGroupKey = this.tree.isRtl ? RIGHT_ARROW : LEFT_ARROW;
        switch (eventKeyCode) {
            case openGroupKey: {
                if (!this.node.expanded) {
                    event.preventDefault();
                    this.expand(event);
                }
                break;
            }
            case closeGroupKey: {
                if (this.node.expanded) {
                    event.preventDefault();
                    this.collapse(event);
                }
                else {
                    if (this.parentNode) {
                        event.preventDefault();
                        this.tree.treeNodeComponents
                            .find(nodeComponent => isEqual(nodeComponent.node, this.parentNode))
                            .setFocus();
                    }
                }
                break;
            }
            case DOWN_ARROW: {
                const nextToFocus = this._getNextTreeNodeFocusElement();
                if (nextToFocus) {
                    event.preventDefault();
                    nextToFocus.focus();
                }
                break;
            }
            case UP_ARROW: {
                const nextToFocus = this._getNextTreeNodeFocusElement(true);
                if (nextToFocus) {
                    event.preventDefault();
                    nextToFocus.focus();
                }
                break;
            }
            case ENTER: {
                event.preventDefault();
                this.toggle(event);
                break;
            }
            case SPACE: {
                event.preventDefault();
                if (this.tree.isSingleSelectionMode() || this.tree.isCheckboxSelectionMode() || this.tree.isMultipleSelectionMode()) {
                    this.onNodeClick(event);
                }
                else {
                    this.toggle(event);
                }
                break;
            }
            case TAB: {
                setTimeout(() => {
                    // Need to erase `focusNode` after the document.activeElement changed
                    this.tree.focusNode = null;
                });
                break;
            }
        }
    }
    onTreeNodeFocus(event) {
        this.tree.focusNode = event.target;
    }
    onTreeNodeFocusout(event) {
        const nextTreeNodeFocusElement = this._getTreeNodeFocusElements().find(el => el === event.relatedTarget);
        if (!nextTreeNodeFocusElement) {
            this.tree.focusNode = null;
        }
    }
    onNodeClick(event) {
        var _a;
        if (this.tree.selectionMode && this.query && ((_a = this.node.children) === null || _a === void 0 ? void 0 : _a.length)) {
            return;
        }
        if (this.node.selectable === false) {
            event.preventDefault();
        }
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore TODO fix types
        if (this.tree.selectionMode === 'checkbox' && this.node.disallowMultipleNodeSelection) {
            this.toggle(event);
            return;
        }
        if (this.tree.isSingleSelectionMode() && this.isSelected()) {
            return;
        }
        this.tree.onNodeClick(event, this.node);
    }
    setFocus() {
        this.treeNodeFocusEl.nativeElement.focus();
    }
    onDropPoint(event, position) {
        if (this.level === 0) {
            if (this.tree.dragNode && this.tree.dragNode.parent) {
                this.tree.dragNode.parent = undefined;
            }
        }
        else {
            if (this.tree.dragNode && this.node && this.node.parent) {
                this.tree.dragNode.parent = this.node.parent;
            }
        }
        super.onDropPoint(event, position);
    }
    onDropPointDragOver(event) {
        super.onDropPointDragOver(event);
    }
    onDropPointDragEnter(event, position) {
        var _a, _b, _c, _d, _e, _f;
        if (this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope)) {
            if (position < 0) {
                if (((_a = this.parentNode) === null || _a === void 0 ? void 0 : _a.droppable) === false && ((_b = this.parentNode) === null || _b === void 0 ? void 0 : _b.droppable) !== undefined) {
                    this.dragOverPrevDisabled = true;
                }
                else {
                    this.draghoverPrev = true;
                }
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore TODO fix types
                if (this.level > 1 && ((_c = this.tree.dragNode) === null || _c === void 0 ? void 0 : _c.isGroup)) {
                    this.dragOverPrevDisabled = true;
                }
                else {
                    this.draghoverPrev = true;
                }
            }
            else {
                if (((_d = this.parentNode) === null || _d === void 0 ? void 0 : _d.droppable) === false && ((_e = this.parentNode) === null || _e === void 0 ? void 0 : _e.droppable) !== undefined) {
                    this.dragOverNextDisabled = true;
                }
                else {
                    this.draghoverNext = true;
                }
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore TODO fix types
                if (this.level > 1 && ((_f = this.tree.dragNode) === null || _f === void 0 ? void 0 : _f.isGroup)) {
                    this.dragOverNextDisabled = true;
                }
                else {
                    this.draghoverNext = true;
                }
            }
        }
    }
    onDropPointDragLeave() {
        this.draghoverPrev = false;
        this.draghoverNext = false;
        this.dragOverPrevDisabled = false;
        this.dragOverNextDisabled = false;
    }
    onDragStart(event) {
        super.onDragStart(event);
        this.dragStartedNode = true;
    }
    onDragStop(event) {
        super.onDragStop(event);
        this.dragStartedNode = false;
    }
    onDropNodeDragOver(event) {
        super.onDropNodeDragOver(event);
    }
    onDropNode(event) {
        super.onDropNode(event);
        this.tree.updateIcons(this.node);
        this.dragOverDisabledNode = false;
        const draggedItem = this.tree.el.nativeElement.getElementsByClassName('ui-treenode-dragStart')[0];
        this._renderer.setStyle(draggedItem, 'cursor', 'pointer');
    }
    createDropNodeEventMetadata() {
        return super.createDropNodeEventMetadata();
    }
    processNodeDrop(event) {
        super.processNodeDrop(event);
    }
    onDropNodeDragEnter() {
        var _a, _b, _c;
        const allowDrop = this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope);
        //check if drag and drop is allowed for parent node ie (level 2)
        if (this.tree.droppableNodes &&
            allowDrop &&
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore TODO fix types
            (this.node.isGroup && this.tree.dragNode.isGroup && this.level > 0) ||
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore TODO fix types
            (this.node.isGroup && this.tree.dragNode.isGroup &&
                ((_b = (_a = this.node) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.label) === this.tree.dragNode.label)) {
            this.node.droppable = false;
            this.dragOverDisabledNode = true;
            const draggedItem = this.tree.el.nativeElement.getElementsByClassName('ui-treenode-dragStart')[0];
            this._renderer.setStyle(draggedItem, 'cursor', 'no-drop');
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore TODO fix types
        }
        else if (this.node.isGroup && (((_c = this.node.parent) === null || _c === void 0 ? void 0 : _c.parent) === undefined)) {
            this.node.droppable = true;
            this.dragOverDisabledNode = false;
            this.draghoverNode = true;
            const draggedItem = this.tree.el.nativeElement.getElementsByClassName('ui-treenode-dragStart')[0];
            this._renderer.setStyle(draggedItem, 'cursor', 'grabbing');
        }
        //check if drag and drop is allowed for all the nodes
        if (this.tree.droppableNodes &&
            this.node.droppable !== false &&
            allowDrop) {
            this.draghoverNode = true;
            const draggedItem = this.tree.el.nativeElement.getElementsByClassName('ui-treenode-dragStart')[0];
            this._renderer.setStyle(draggedItem, 'cursor', 'grabbing');
        }
        else if (this.tree.droppableNodes &&
            this.node.droppable !== undefined &&
            this.node.droppable === false &&
            allowDrop) {
            this.dragOverDisabledNode = true;
            const draggedItem = this.tree.el.nativeElement.getElementsByClassName('ui-treenode-dragStart')[0];
            this._renderer.setStyle(draggedItem, 'cursor', 'no-drop');
        }
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore TODO fix types
        // if (this.node.isGroup && this.tree.dragNode.isGroup && this.tree.dragNode?.children) {
        //   this.tree.dragNode?.children.forEach((node) => {
        //     // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        //     // @ts-ignore TODO fix types
        //     if (node.isGroup) {
        //       this.node.droppable = false;
        //       this.draghoverNode = false;
        //       this.dragOverDisabledNode = true;
        //       const draggedItem = this.tree.el.nativeElement.getElementsByClassName('ui-treenode-dragStart')[0];
        //       this._renderer.setStyle(draggedItem, 'cursor', 'no-drop');
        //     }
        //   });
        //}
    }
    // eslint-disable-next-line @typescript-eslint/typedef
    onDropNodeDragLeave(event) {
        var _a, _b;
        if (this.tree.droppableNodes) {
            const rect = event.currentTarget.getBoundingClientRect();
            if (event.x > rect.left + rect.width || event.x < rect.left || event.y >= Math.floor(rect.top + rect.height) || event.y < rect.top) {
                this.draghoverNode = false;
            }
            if (!this.node.droppable &&
                this.tree.allowDrop(this.tree.dragNode, this.node, this.tree.dragNodeScope) &&
                (event.x > rect.left + rect.width || event.x < rect.left || event.y >= Math.floor(rect.top + rect.height) || event.y < rect.top)) {
                this.dragOverDisabledNode = false;
                const draggedItem = this.tree.el.nativeElement.getElementsByClassName('ui-treenode-dragStart')[0];
                this._renderer.setStyle(draggedItem, 'cursor', 'pointer');
            }
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore TODO fix types
            if (this.node.isGroup && this.tree.dragNode.isGroup &&
                ((_b = (_a = this.node) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.label) === this.tree.dragNode.label) {
                this.dragOverDisabledNode = false;
                const draggedOverItem = this.tree.el.nativeElement.getElementsByClassName('ui-treenode-dragStart')[0];
                this._renderer.setStyle(draggedOverItem, 'cursor', 'pointer');
            }
        }
    }
    _getTreeNodeFocusElements() {
        var _a;
        return Array.prototype.slice.call((_a = this.tree.el.nativeElement) === null || _a === void 0 ? void 0 : _a.querySelectorAll(`adapt-tree-node .${this.treeNodeFocusElClass}`));
    }
    _getNextTreeNodeFocusElement(nodeAbove = false) {
        const treeNodeComponentsArray = this._getTreeNodeFocusElements();
        return treeNodeComponentsArray[treeNodeComponentsArray.indexOf(this.treeNodeFocusEl.nativeElement) + (nodeAbove ? -1 : 1)];
    }
}
AdaptTreeNodeComponent.ɵfac = function AdaptTreeNodeComponent_Factory(t) { return new (t || AdaptTreeNodeComponent)(i0.ɵɵdirectiveInject(forwardRef(() => AdaptTreeComponent)), i0.ɵɵdirectiveInject(i0.Renderer2)); };
AdaptTreeNodeComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptTreeNodeComponent, selectors: [["adapt-tree-node"]], viewQuery: function AdaptTreeNodeComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeNodeFocusEl = _t.first);
    } }, inputs: { node: "node", parentNode: "parentNode", filter: "filter", query: "query", firstChild: "firstChild", lastChild: "lastChild", index: "index", testID: "testID" }, features: [i0.ɵɵInheritDefinitionFeature], decls: 2, vars: 1, consts: [[3, "ngIf"], ["role", "none", "class", "ui-treenode-droppoint", 3, "ngClass", "drop", "dragover", "dragenter", "dragleave", 4, "ngIf"], ["role", "none", 3, "class", "ngClass", 4, "ngIf"], ["role", "none", "tabindex", "-1", "class", "ui-treenode-droppoint", 3, "ngClass", "drop", "dragover", "dragenter", "dragleave", 4, "ngIf"], ["role", "none", 1, "ui-treenode-droppoint", 3, "ngClass", "drop", "dragover", "dragenter", "dragleave"], ["role", "none", 3, "ngClass"], ["class", "a-tree__content", 3, "ngClass", "draggable", "contextmenu", "touchend", "drop", "dragover", "dragenter", "dragleave", "dragstart", "dragend", 4, "ngIf"], ["class", "pt-1 pb-2 p-start-4", 4, "ngIf"], [1, "a-tree__content", 3, "ngClass", "draggable", "contextmenu", "touchend", "drop", "dragover", "dragenter", "dragleave", "dragstart", "dragend"], ["class", "a-tree__toggle", "role", "img", "aria-hidden", "true", 3, "ngClass", "click", 4, "ngIf"], ["class", "a-tree__line", 4, "ngIf"], ["role", "treeitem", 1, "d-flex", "flex-row", "flex-nowrap", 3, "tabIndex", "ngClass", "keydown", "focus", "focusout"], ["treeNodeFocusEl", ""], [3, "ngClass", "class", "click", 4, "ngIf"], [1, "a-tree__label", 3, "ngClass", "click"], [4, "ngIf"], ["role", "img", "aria-hidden", "true", 1, "a-tree__toggle", 3, "ngClass", "click"], [1, "a-tree__line"], [3, "ngClass", "click"], [3, "result", "term", 4, "ngIf"], [3, "result", "term"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["role", "treeitem", 3, "tabIndex", "ngClass", "keydown", "focus", "focusout"], ["class", "checkbox", 4, "ngIf"], [1, "a-tree__label", 3, "click"], [1, "checkbox"], [1, "checkbox__label"], ["type", "checkbox", "tabindex", "-1", 1, "checkbox__input", 3, "checked", "indeterminate", "disabled", "click"], [1, "checkbox__item"], [1, "icon-indeterminate"], [1, "sr-only"], [1, "pt-1", "pb-2", "p-start-4"], [1, "loader-container", "pt-0", "pb-0", "m-start-4"], [1, "loader-section"], ["role", "none", "tabindex", "-1", 1, "ui-treenode-droppoint", 3, "ngClass", "drop", "dragover", "dragenter", "dragleave"]], template: function AdaptTreeNodeComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, AdaptTreeNodeComponent_ng_template_0_Template, 7, 3, "ng-template", 0);
        i0.ɵɵtext(1, "\n");
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.node);
    } }, directives: [i1.NgIf, i1.NgClass, i2.AdaptHighlightDirective, i1.NgTemplateOutlet], encapsulation: 2, data: { animation: [
            trigger('treeLineAnimated', [
                transition('void => *', [
                    style({ marginRight: 0 }),
                    animate(ANIMATION_DURATION.fast + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionIn, style({ marginRight: '*' }))
                ]),
                transition('* => void', [
                    style({ marginRight: '*', width: '2px' }),
                    animate(ANIMATION_DURATION.fast + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({
                        marginRight: 0,
                        width: 0
                    }))
                ])
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptTreeNodeComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-tree-node',
                templateUrl: './tree-node.component.html',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    trigger('treeLineAnimated', [
                        transition('void => *', [
                            style({ marginRight: 0 }),
                            animate(ANIMATION_DURATION.fast + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionIn, style({ marginRight: '*' }))
                        ]),
                        transition('* => void', [
                            style({ marginRight: '*', width: '2px' }),
                            animate(ANIMATION_DURATION.fast + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({
                                marginRight: 0,
                                width: 0
                            }))
                        ])
                    ])
                ]
            }]
    }], function () { return [{ type: i3.AdaptTreeComponent, decorators: [{
                type: Inject,
                args: [forwardRef(() => AdaptTreeComponent)]
            }] }, { type: i0.Renderer2 }]; }, { node: [{
            type: Input
        }], parentNode: [{
            type: Input
        }], filter: [{
            type: Input
        }], query: [{
            type: Input
        }], firstChild: [{
            type: Input
        }], lastChild: [{
            type: Input
        }], index: [{
            type: Input
        }], testID: [{
            type: Input
        }], treeNodeFocusEl: [{
            type: ViewChild,
            args: ['treeNodeFocusEl']
        }] }); })();
//# sourceMappingURL=tree-node.component.js.map