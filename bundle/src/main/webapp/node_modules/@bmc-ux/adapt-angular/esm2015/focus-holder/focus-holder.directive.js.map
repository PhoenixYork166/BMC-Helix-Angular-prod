{"version":3,"file":"focus-holder.directive.js","sourceRoot":"","sources":["../../../../../libs/adapt-angular/src/focus-holder/focus-holder.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {AfterViewInit, Component, ElementRef, HostListener, Input, OnDestroy, OnInit} from '@angular/core';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {TAB} from '@angular/cdk/keycodes';\nimport {asapScheduler, ReplaySubject, timer} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\nimport {getEventKeyCode} from '../common/key-codes';\nimport {getFocusableElements} from '../common/focus';\nimport {AdaptInteractionSourceService} from '../common/interaction-source';\n\n\n@Component({\n  selector: 'adapt-focus-holder, [adaptFocusHolder]',\n  template: `\n    <ng-content></ng-content>\n  `,\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n  host: {\n    '[attr.tabindex]': '-1'\n  }\n})\n// eslint-disable-next-line @angular-eslint/component-class-suffix\nexport class AdaptFocusHolderDirective implements OnInit, AfterViewInit, OnDestroy {\n  /**\n   *  Hold `Tab` key focus in the directive's host element area\n   */\n  @Input() adaptFocusHolder: boolean = false;\n\n  /**\n   *  Auto holding focus on init\n   */\n  @Input() holdFocusOnInit: boolean = true;\n\n  /**\n   *  The event type for the focusing holder init\n   */\n  @Input() eventType: FocusOrigin = 'keyboard';\n\n  /**\n   * Focus first focusable element in the directive area on init\n   */\n  @Input() focusFirstOnInit: boolean = false;\n\n  /**\n   *  The delay before first element in the host element will be focussed\n   */\n  @Input() focusFirstDelay: number = 0;\n\n  /**\n   *  Restore last focused element after directive's host element destroy\n   */\n  @Input() restoreLastFocusedElement: boolean = true;\n\n  /**\n   *  Focus the element next to last focussed element after directive's host element destroy\n   */\n  @Input() focusNextElement: boolean = false;\n\n  /**\n   * Prevent scrolling to the focus element. Part of FocusOptions.\n   * @docs-default false\n   * @since v12.34.0\n   */\n  @Input() preventScroll: boolean = false;\n\n  private _lastFocusEl: HTMLElement;\n  private _lastElementIndex: number;\n  private _focusedElementsList: HTMLElement[];\n  private _destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n\n  constructor(private _elRef: ElementRef,\n              private _interactionSourceService: AdaptInteractionSourceService) {\n  }\n\n  @HostListener('keydown', ['$event']) _onKeydown(event: KeyboardEvent): void {\n    if (!this.adaptFocusHolder || getEventKeyCode(event) !== TAB) {\n      return;\n    }\n\n    const focusableElements = getFocusableElements(this._elRef.nativeElement);\n\n    if (focusableElements.length) {\n      const firstEl = focusableElements[0];\n      const lastEl = focusableElements[focusableElements.length - 1];\n      const target = event.target;\n\n      if (event.shiftKey) {\n        if (target === firstEl) {\n          event.preventDefault();\n          lastEl.focus({preventScroll: this.preventScroll});\n        }\n\n        if (target === this._elRef.nativeElement) {\n          event.preventDefault();\n          lastEl.focus({preventScroll: this.preventScroll});\n        }\n      } else {\n        if (target === lastEl) {\n          event.preventDefault();\n          firstEl.focus({preventScroll: this.preventScroll});\n        }\n\n        if (target === this._elRef.nativeElement) {\n          event.preventDefault();\n          firstEl.focus({preventScroll: this.preventScroll});\n        }\n      }\n    } else {\n      event.preventDefault();\n    }\n  }\n\n  ngOnInit(): void {\n    this._lastFocusEl = document.activeElement as HTMLElement;\n\n    this._focusedElementsList = getFocusableElements(document);\n\n    if (this._lastFocusEl) {\n      this._lastElementIndex = this._focusedElementsList.indexOf(this._lastFocusEl);\n    }\n  }\n\n  ngAfterViewInit(): void {\n    if (this.adaptFocusHolder && this.holdFocusOnInit) {\n      // Stealing focus synchronously in an ngAfterViewInit will trigger ExpressionChangedAfterItHasBeenChecked error\n      // if the loss of focus on the currently active element has repercussions on template-bound properties\n      // (eg. if the focus is currently on an input element bound to a form control that is not yet touched)\n      timer(0, asapScheduler)\n        .pipe(takeUntil(this._destroyed$))\n        .subscribe(() => {\n          (this._elRef.nativeElement as HTMLFormElement).focus({preventScroll: true});\n        });\n    }\n\n    if (this.focusFirstOnInit && this.eventType === 'keyboard') {\n      timer(this.focusFirstDelay)\n        .pipe(takeUntil(this._destroyed$))\n        .subscribe(() => {\n          getFocusableElements(this._elRef.nativeElement)[0]?.focus({preventScroll: this.preventScroll});\n        });\n\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._destroyed$.next();\n    this._destroyed$.complete();\n\n    // Check if focus hadn't been changed before the directive destroy\n    if (this._elRef.nativeElement.contains(document.activeElement)) {\n\n      if (this.restoreLastFocusedElement && !this.focusNextElement && this._lastFocusEl) {\n        this._lastFocusEl.focus({preventScroll: this.preventScroll});\n\n      } else if (this.focusNextElement) {\n        const isLastEventFromKeyboard = this._interactionSourceService.getLastInteractionSourceOrigin() === 'keyboard';\n        const lastEventFromKeyboard = this._interactionSourceService.getLastInteractionSourceEvent();\n\n        const tabKeyEvent =\n          isLastEventFromKeyboard && lastEventFromKeyboard && getEventKeyCode(lastEventFromKeyboard as KeyboardEvent) === TAB ?\n            lastEventFromKeyboard as KeyboardEvent : null;\n\n        // Last event type is needed for IE11 while using keyboard navigation (#2164)\n        // Also it is needed to be sure that the last event type is KeyboardEvent\n        if (this.focusNextElement && isLastEventFromKeyboard) {\n          let elementToFocus: HTMLElement = this._lastFocusEl;\n\n          if (tabKeyEvent) {\n            if (tabKeyEvent.shiftKey) {\n              elementToFocus = this._focusedElementsList[this._lastElementIndex - 1] || this._lastFocusEl;\n            } else {\n              elementToFocus = this._focusedElementsList[this._lastElementIndex + 1];\n            }\n          }\n\n          if (elementToFocus) {\n            elementToFocus.focus({preventScroll: this.preventScroll});\n          }\n        }\n      }\n    }\n\n    this._lastFocusEl = null;\n    this._focusedElementsList = null;\n  }\n}\n"]}