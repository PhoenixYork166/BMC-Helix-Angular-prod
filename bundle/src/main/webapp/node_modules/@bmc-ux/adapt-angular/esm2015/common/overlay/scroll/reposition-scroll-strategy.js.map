{"version":3,"file":"reposition-scroll-strategy.js","sourceRoot":"","sources":["../../../../../../../libs/adapt-angular/src/common/overlay/scroll/reposition-scroll-strategy.ts"],"names":[],"mappings":"AAIA,OAAO,EAAC,SAAS,EAAe,MAAM,MAAM,CAAC;AAC7C,OAAO,EAAC,SAAS,EAAC,MAAM,gBAAgB,CAAC;AAEzC,MAAM,OAAO,6BAA6B;IAKxC,YACU,cAA6B,EAC7B,OAAe,EACf,OAAwC;QAFxC,mBAAc,GAAd,cAAc,CAAe;QAC7B,YAAO,GAAP,OAAO,CAAQ;QACf,YAAO,GAAP,OAAO,CAAiC;QAP1C,wBAAmB,GAAwB,IAAI,CAAC;IAQxD,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,UAA4B;QACjC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,MAAM;;QACJ,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;YAC7B,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;YAEhE,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,GAAG,EAAE;gBAClC,IAAI,CAAC,mBAAmB;oBACtB,SAAS,CAAC,MAAM,EAAE,QAAQ,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC;yBACzC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;yBACzB,SAAS,CAAC,CAAC,KAAK,EAAE,EAAE;wBACnB,oDAAoD;wBACpD,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAc,CAAC,EAAE;4BACnE,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;yBACnC;oBACH,CAAC,CAAC,CAAC;YACT,CAAC,CAAC,CAAC;YAEH,IAAI,MAAA,IAAI,CAAC,OAAO,0CAAE,SAAS,EAAE;gBAC3B,IAAI,CAAC,kCAAkC,GAAG,IAAI,oBAAoB,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,EAAE;oBACvF,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE;wBACzB,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE;4BACpB,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;4BAC1B,QAAQ,CAAC,UAAU,EAAE,CAAC;wBACxB,CAAC,CAAC,CAAC;qBACJ;gBACH,CAAC,EAAE,EAAC,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,EAAC,CAAC,CAAC;gBAE/B,IAAI,CAAC,kCAAkC,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,EAAE,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;aACxG;SACF;IACH,CAAC;IAED;;OAEG;IACH,OAAO;QACL,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC5B,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,CAAC;YACvC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;SACjC;QAED,IAAI,IAAI,CAAC,kCAAkC,EAAE;YAC3C,IAAI,CAAC,kCAAkC,CAAC,UAAU,EAAE,CAAC;YACrD,IAAI,CAAC,kCAAkC,GAAG,IAAI,CAAC;SAChD;IACH,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,IAAI,CAAC,OAAO,EAAE,CAAC;QACf,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC1B,CAAC;CACF","sourcesContent":["import {NgZone} from '@angular/core';\nimport {OverlayReference} from '@angular/cdk/overlay/overlay-reference';\nimport {RepositionScrollStrategyConfig, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {auditTime} from 'rxjs/operators';\n\nexport class AdaptRepositionScrollStrategy implements ScrollStrategy {\n  private _scrollSubscription: Subscription | null = null;\n  private _overlayRef: OverlayReference;\n  private _overlayRefOriginIntersectObserver: IntersectionObserver;\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _ngZone: NgZone,\n    private _config?: RepositionScrollStrategyConfig) {\n  }\n\n  /**\n   * Attaches this scroll strategy to an overlay\n   */\n  attach(overlayRef: OverlayReference): void {\n    this._overlayRef = overlayRef;\n  }\n\n  /**\n   * Enables repositioning of the attached overlay on scroll\n   */\n  enable(): void {\n    if (!this._scrollSubscription) {\n      const throttle = this._config ? this._config.scrollThrottle : 0;\n\n      this._ngZone.runOutsideAngular(() => {\n        this._scrollSubscription =\n          fromEvent(window, 'scroll', {capture: true})\n            .pipe(auditTime(throttle))\n            .subscribe((event) => {\n              // Update position only in case outer scroll happens\n              if (!this._overlayRef.overlayElement.contains(event.target as Node)) {\n                this._overlayRef.updatePosition();\n              }\n            });\n      });\n\n      if (this._config?.autoClose) {\n        this._overlayRefOriginIntersectObserver = new IntersectionObserver(([entry], observer) => {\n          if (!entry.isIntersecting) {\n            this._ngZone.run(() => {\n              this._overlayRef.detach();\n              observer.disconnect();\n            });\n          }\n        }, {root: null, threshold: 0});\n\n        this._overlayRefOriginIntersectObserver.observe(this._overlayRef.getConfig().positionStrategy._origin);\n      }\n    }\n  }\n\n  /**\n   * Disables repositioning of the attached overlay on scroll\n   */\n  disable(): void {\n    if (this._scrollSubscription) {\n      this._scrollSubscription.unsubscribe();\n      this._scrollSubscription = null;\n    }\n\n    if (this._overlayRefOriginIntersectObserver) {\n      this._overlayRefOriginIntersectObserver.disconnect();\n      this._overlayRefOriginIntersectObserver = null;\n    }\n  }\n\n  /**\n   * Detaches the scroll listener\n   */\n  detach(): void {\n    this.disable();\n    this._overlayRef = null;\n  }\n}\n"]}