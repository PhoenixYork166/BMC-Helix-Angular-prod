{"version":3,"file":"modal.service.js","sourceRoot":"","sources":["../../../../../libs/adapt-angular/src/modal/modal.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,UAAU,EACV,QAAQ,GAET,MAAM,eAAe,CAAC;AACvB,OAAO,EAAC,SAAS,EAAe,MAAM,MAAM,CAAC;AAE7C,OAAO,EAAmB,mBAAmB,EAAC,MAAM,iCAAiC,CAAC;AAMtF,OAAO,EAAC,sBAAsB,EAAC,MAAM,uBAAuB,CAAC;;;;AAE7D;;;;;GAKG;AAEH,MAAM,OAAO,iBAAiB;IAwB5B,YAAoB,SAAmB,EACnB,cAAmC,EACnC,WAAmC;QAFnC,cAAS,GAAT,SAAS,CAAU;QACnB,mBAAc,GAAd,cAAc,CAAqB;QACnC,gBAAW,GAAX,WAAW,CAAwB;QAzBvD;;WAEG;QACK,aAAQ,GAAgB,QAAQ,CAAC,IAAI,CAAC;QAuB5C,qBAAqB;QACrB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE1E,mCAAmC;QACnC,IAAI,CAAC,qBAAqB,GAAG,SAAS,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACvG,CAAC;IAhBD,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC;IACvC,CAAC;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC;IACtC,CAAC;IAYD,WAAW;QACT,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,CAAC;QACzC,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;IACpC,CAAC;IAED;;;;OAIG;IACH,IAAI,CAAC,MAAiC;QACpC,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,EAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACtD,CAAC;IAED,YAAY,CAAC,MAAmB,EAAE,cAAwE;QACxG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;IACxD,CAAC;IAED,qBAAqB,CAAC,MAAuB,EAAE,cAAwE;QACrH,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,MAAM,EAAE,cAAc,EAAE,IAAI,CAAC,CAAC;IACvE,CAAC;IAED,kCAAkC;IAClC;;OAEG;IACH,cAAc;QACZ,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;IACpC,CAAC;;kFA9DU,iBAAiB;uEAAjB,iBAAiB,WAAjB,iBAAiB;uFAAjB,iBAAiB;cAD7B,UAAU","sourcesContent":["import {\n  ComponentRef,\n  Injectable,\n  Injector,\n  OnDestroy,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\n\nimport {ScrollManagerApi, ScrollManageService} from '../common/scroll-manage.service';\n\nimport {AdaptModalComponent} from './modal.component';\nimport {AdaptDialogComponent} from './dialog.component';\nimport {ModalConfig, ModalDeferred, ModalDialog} from './modal.model';\nimport {OverModalConfig} from './over-modal';\nimport {AdaptModalStackService} from './modal-stack.service';\n\n/**\n * The service for using modal/dialogs\n *\n * open(config) â€“ Opens modal window. Returns Promise that is resolved when a modal is closed and rejected when a modal is dismissed.\n *\n */\n@Injectable()\nexport class AdaptModalService implements OnDestroy {\n  /**\n   * The wrapper to include modals/dialogs\n   */\n  private _wrapper: HTMLElement = document.body;\n\n  /**\n   * An object for manage wrapper's scroll.\n   */\n  private _scrollManager: ScrollManagerApi;\n\n  /**\n   * Array with opened modals\n   */\n  private _popstateSubscription: Subscription;\n\n  get openedModals(): Map<string, ComponentRef<AdaptDialogComponent | AdaptModalComponent>> {\n    return this._modalStack.openedModals;\n  }\n\n  get activeModal(): ComponentRef<AdaptDialogComponent | AdaptModalComponent> {\n    return this._modalStack.activeModal;\n  }\n\n  constructor(private _injector: Injector,\n              private _scrollService: ScrollManageService,\n              private _modalStack: AdaptModalStackService) {\n    // Get scroll manager\n    this._scrollManager = this._scrollService.getScrollManager(this._wrapper);\n\n    // Close all modals on route change\n    this._popstateSubscription = fromEvent(window, 'popstate').subscribe(this.closeAllModals.bind(this));\n  }\n\n  ngOnDestroy(): void {\n    this._popstateSubscription.unsubscribe();\n    this._popstateSubscription = null;\n  }\n\n  /**\n   * Open modal/dialog\n   * @returns ModalDeferred - The Promise object with additional methods: resolve() and reject().\n   * Resolved when a modal is closed and rejected when a modal is dismissed.\n   */\n  open(config: ModalConfig | ModalDialog): ModalDeferred {\n    return this._modalStack.open(config,this._injector);\n  }\n\n  updateConfig(config: ModalConfig, modalComponent: ComponentRef<AdaptDialogComponent | AdaptModalComponent>): void {\n    this._modalStack.updateConfig(config, modalComponent);\n  }\n\n  updateOverModalConfig(config: OverModalConfig, modalComponent: ComponentRef<AdaptDialogComponent | AdaptModalComponent>): void {\n    this._modalStack.updateOverModalConfig(config, modalComponent, true);\n  }\n\n  // TODO: Refactor this if possible\n  /**\n   * Close modal/dialog\n   */\n  closeAllModals(): void {\n    this._modalStack.closeAllModals();\n  }\n}\n"]}