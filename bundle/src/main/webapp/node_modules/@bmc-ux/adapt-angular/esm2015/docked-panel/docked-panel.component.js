import { Component, ComponentFactoryResolver, ElementRef, EventEmitter, Input, Output, Renderer2, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { query, transition, trigger, useAnimation } from '@angular/animations';
import { ReplaySubject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { ANIMATION_NAME } from '../common/animation';
import { DismissReasons } from '../common/common.enums';
import { AdaptTranslateService } from '../common/i18n/index';
import { LayerService } from '../common/layer-service';
import { AdaptOverlayService } from '../common/overlay/index';
import { AdaptDockedPanelService } from './docked-panel.service';
import { AdaptDockedPanelConfig } from './docked-panel.config';
import { DockedPanelInstance } from './docked-panel.model';
import { DockedPanelContext } from './docked-panel.context';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "./docked-panel.config";
import * as i2 from "./docked-panel.context";
import * as i3 from "./docked-panel.service";
import * as i4 from "../common/layer-service";
import * as i5 from "../common/overlay/index";
import * as i6 from "../common/i18n/index";
import * as i7 from "../common/radar/adapt-radar";
import * as i8 from "../focus-holder/focus-holder.directive";
import * as i9 from "@angular/common";
import * as i10 from "../alert-animated/alert-animated.component";
import * as i11 from "../modal/over-modal";
const _c0 = ["contentPlacement"];
function AdaptDockedPanelComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r6 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 7);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "button", 8);
    i0.ɵɵlistener("click", function AdaptDockedPanelComponent_div_5_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r6); const ctx_r5 = i0.ɵɵnextContext(); return ctx_r5.dismiss(ctx_r5.dismissReason.CLOSE_BTN); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementStart(4, "span", 9);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵattribute("aria-label", ctx_r0.closeText);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r0.panel.config.title);
} }
function AdaptDockedPanelComponent_ng_template_12_Template(rf, ctx) { }
function AdaptDockedPanelComponent_adapt_over_modal_16_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-over-modal", 10);
    i0.ɵɵlistener("onClose", function AdaptDockedPanelComponent_adapt_over_modal_16_Template_adapt_over_modal_onClose_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return ctx_r7.closeOverModal(); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵproperty("config", ctx_r4.panel.config.overModal)("className", "over-modal-dp");
} }
export class AdaptDockedPanelComponent extends AdaptRadarAngularGenericDirective {
    constructor(_dockedPanelConfig, _componentFactoryResolver, _dockedPanelContext, _renderer2, _dockedPanelService, _layerService, _overlayService, ts, _adaptRadarService, _elem) {
        super(_adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptDockedPanel);
        this._dockedPanelConfig = _dockedPanelConfig;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._dockedPanelContext = _dockedPanelContext;
        this._renderer2 = _renderer2;
        this._dockedPanelService = _dockedPanelService;
        this._layerService = _layerService;
        this._overlayService = _overlayService;
        this.ts = ts;
        this.modalClassInstance = true; // Needed for LayerService
        this.dismissReason = DismissReasons;
        this.context = {
            close: this.close.bind(this),
            dismiss: this.dismiss.bind(this),
            openOverModal: this.openOverModal.bind(this),
            getData: this._getData.bind(this)
        };
        // TODO: Refactor this if possible
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        this.overModal = {
            title: null,
            type: null,
            contentString: null,
            contentTemplate: null
        };
        this.alerts = [];
        this.alertClosed = new EventEmitter();
        this.floatFooter = false;
        this._destroyed$ = new ReplaySubject(1);
        this.defaultConfig = _dockedPanelConfig;
        Object.assign(this._dockedPanelContext, this.context);
        this.closeText = ts.getCurrentLanguage()['adapt.common.close'];
    }
    set content(newContent) {
        if (newContent) {
            this._loadContent(newContent);
        }
    }
    ngOnInit() {
        if (this.panel.config.overModal) {
            this.overModal.title = this.panel.config.overModal.title;
            this.overModal.type = this.panel.config.overModal.type;
            if (this.panel.config.overModal.content instanceof TemplateRef) {
                this.overModal.contentTemplate = this.panel.config.overModal.content;
            }
            else {
                this.overModal.contentString = this.panel.config.overModal.content;
            }
        }
        this._dockedPanelService.alertsState
            .pipe(takeUntil(this._destroyed$))
            .subscribe(this._alertSubscriptionHandler.bind(this));
        if (this.panel.config && this.panel.config.beforeDismiss) {
            this._beforeDismiss = this.panel.config.beforeDismiss;
        }
        if (!this._overlayService.enableCDKOverlayControl) {
            this._layerService.addComponent(this, () => {
                this.panel.overModalOpen ? this.closeOverModal() : this.dismiss(DismissReasons.ESC);
            });
        }
    }
    ngOnDestroy() {
        if (!this._overlayService.enableCDKOverlayControl) {
            this._layerService.removeComponent(this);
        }
    }
    dismiss(reason) {
        if (this._beforeDismiss && !this._beforeDismiss(reason)) {
            return;
        }
        this.panel.promise.reject(reason);
    }
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    close(result) {
        this.panel.promise.resolve(result);
    }
    openOverModal() {
        this.panel.overModalOpen = true;
    }
    closeOverModal() {
        this.panel.overModalOpen = false;
    }
    _loadContent(content) {
        this.contentPlacement.clear();
        if (content instanceof TemplateRef) {
            // TODO: Refactor this if possible
            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
            this.contentPlacement.createEmbeddedView(content, this.context);
        }
        else if (typeof content === 'string') {
            const modalBodyContainer = this.contentPlacement.element.nativeElement.parentNode;
            const newNode = document.createElement('div');
            newNode.classList.add('dp-body');
            newNode.innerText = content;
            modalBodyContainer.appendChild(newNode);
        }
        else {
            const factory = this._componentFactoryResolver.resolveComponentFactory(content);
            const innerContent = this.contentPlacement.createComponent(factory);
            this._renderer2.addClass(innerContent.location.nativeElement, 'dp-content-inner-wrapper');
            this.panel.contentInstanceRef = innerContent.instance;
        }
    }
    _getData() {
        return this.panel.config ? this.panel.config.data : undefined;
    }
    _alertSubscriptionHandler(newAlert) {
        this.alerts.unshift(newAlert);
    }
}
AdaptDockedPanelComponent.ɵfac = function AdaptDockedPanelComponent_Factory(t) { return new (t || AdaptDockedPanelComponent)(i0.ɵɵdirectiveInject(i1.AdaptDockedPanelConfig), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i2.DockedPanelContext), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i3.AdaptDockedPanelService), i0.ɵɵdirectiveInject(i4.LayerService), i0.ɵɵdirectiveInject(i5.AdaptOverlayService), i0.ɵɵdirectiveInject(i6.AdaptTranslateService), i0.ɵɵdirectiveInject(i7.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptDockedPanelComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptDockedPanelComponent, selectors: [["adapt-docked-panel"]], viewQuery: function AdaptDockedPanelComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7, ViewContainerRef);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentPlacement = _t.first);
    } }, hostVars: 2, hostBindings: function AdaptDockedPanelComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("dp-wrapper", true);
    } }, inputs: { panel: "panel", floatFooter: "floatFooter", content: "content" }, outputs: { alertClosed: "alertClosed" }, features: [i0.ɵɵProvidersFeature([DockedPanelContext]), i0.ɵɵInheritDefinitionFeature], decls: 20, vars: 17, consts: [[3, "adaptFocusHolder", "preventScroll"], ["role", "document", 3, "disabled"], ["class", "dp-header", 4, "ngIf"], [3, "adaptRadarDisableEventSending", "config", "isVisible", "alertClosed"], ["alertsSection", ""], ["contentPlacement", ""], [3, "config", "className", "onClose", 4, "ngIf"], [1, "dp-header"], ["type", "button", 1, "close", "dp-close", 3, "click"], [1, "dp-title"], [3, "config", "className", "onClose"]], template: function AdaptDockedPanelComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtext(0, "\n    ");
        i0.ɵɵelementStart(1, "adapt-focus-holder", 0);
        i0.ɵɵtext(2, "\n      ");
        i0.ɵɵelementStart(3, "fieldset", 1);
        i0.ɵɵtext(4, "\n        ");
        i0.ɵɵtemplate(5, AdaptDockedPanelComponent_div_5_Template, 7, 2, "div", 2);
        i0.ɵɵtext(6, "\n        ");
        i0.ɵɵelementStart(7, "adapt-alert-animated", 3, 4);
        i0.ɵɵlistener("alertClosed", function AdaptDockedPanelComponent_Template_adapt_alert_animated_alertClosed_7_listener($event) { return ctx.alertClosed.emit($event); });
        i0.ɵɵelementEnd();
        i0.ɵɵtext(9, "\n        ");
        i0.ɵɵelementStart(10, "div");
        i0.ɵɵtext(11, "\n          ");
        i0.ɵɵtemplate(12, AdaptDockedPanelComponent_ng_template_12_Template, 0, 0, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(14, "\n        ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(15, "\n\n        ");
        i0.ɵɵtemplate(16, AdaptDockedPanelComponent_adapt_over_modal_16_Template, 1, 2, "adapt-over-modal", 6);
        i0.ɵɵtext(17, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(18, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(19, "\n  ");
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("adaptFocusHolder", true)("preventScroll", true);
        i0.ɵɵadvance(2);
        i0.ɵɵclassMap("dp dp-size-" + (ctx.panel.config.size || ctx.defaultConfig.size));
        i0.ɵɵclassProp("inactive", ctx.panel.inactive);
        i0.ɵɵproperty("disabled", ctx.panel.inactive);
        i0.ɵɵattribute("data-testid", ctx.panel.config.testID);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.panel.config.title);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("adaptRadarDisableEventSending", true)("config", ctx.alerts)("isVisible", ctx.alerts.length > 0);
        i0.ɵɵadvance(3);
        i0.ɵɵclassMap("dp-content " + "dp-footer-align_" + (ctx.panel.config.footerAlign || ctx.defaultConfig.footerAlign));
        i0.ɵɵclassProp("float-footer", ctx.panel.config.floatFooter || ctx.defaultConfig.floatFooter);
        i0.ɵɵadvance(6);
        i0.ɵɵproperty("ngIf", ctx.panel.overModalOpen);
    } }, directives: [i8.AdaptFocusHolderDirective, i9.NgIf, i10.AdaptAlertAnimatedComponent, i11.AdaptOverModalComponent], encapsulation: 2, data: { animation: [
            trigger('overModalAnimation', [
                transition('void => *', [
                    query('.modal-content', [
                        useAnimation(ANIMATION_NAME.popIn)
                    ])
                ]),
                transition('* => void', [
                    query('.modal-content', [
                        useAnimation(ANIMATION_NAME.popOut)
                    ])
                ])
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptDockedPanelComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-docked-panel',
                template: `
    <adapt-focus-holder [adaptFocusHolder]="true" [preventScroll]="true">
      <fieldset [class]="'dp dp-size-' + (panel.config.size || defaultConfig.size)"
                [attr.data-testid]="panel.config.testID"
                role="document"
                [disabled]="panel.inactive"
                [class.inactive]="panel.inactive">
        <div class="dp-header" *ngIf="panel.config.title">
          <button class="close dp-close"
                  [attr.aria-label]="closeText"
                  (click)="dismiss(dismissReason.CLOSE_BTN)" type="button"></button>
          <span class="dp-title">{{panel.config.title}}</span>
        </div>
        <adapt-alert-animated #alertsSection
                              [adaptRadarDisableEventSending]="true"
                              [config]="alerts"
                              [isVisible]="alerts.length > 0"
                              (alertClosed)="alertClosed.emit($event)"></adapt-alert-animated>
        <div [class]="'dp-content ' + 'dp-footer-align_' + (panel.config.footerAlign || defaultConfig.footerAlign)"
             [class.float-footer]="panel.config.floatFooter || defaultConfig.floatFooter">
          <ng-template #contentPlacement></ng-template>
        </div>

        <adapt-over-modal [config]="panel.config.overModal"
                          [className]="'over-modal-dp'"
                          (onClose)="closeOverModal()"
                          *ngIf="panel.overModalOpen"></adapt-over-modal>
      </fieldset>
    </adapt-focus-holder>
  `,
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[class.dp-wrapper]': 'true'
                },
                animations: [
                    trigger('overModalAnimation', [
                        transition('void => *', [
                            query('.modal-content', [
                                useAnimation(ANIMATION_NAME.popIn)
                            ])
                        ]),
                        transition('* => void', [
                            query('.modal-content', [
                                useAnimation(ANIMATION_NAME.popOut)
                            ])
                        ])
                    ])
                ],
                providers: [DockedPanelContext]
            }]
    }], function () { return [{ type: i1.AdaptDockedPanelConfig }, { type: i0.ComponentFactoryResolver }, { type: i2.DockedPanelContext }, { type: i0.Renderer2 }, { type: i3.AdaptDockedPanelService }, { type: i4.LayerService }, { type: i5.AdaptOverlayService }, { type: i6.AdaptTranslateService }, { type: i7.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { alertClosed: [{
            type: Output
        }], panel: [{
            type: Input
        }], floatFooter: [{
            type: Input
        }], contentPlacement: [{
            type: ViewChild,
            args: ['contentPlacement', { read: ViewContainerRef, static: true }]
        }], content: [{
            type: Input
        }] }); })();
//# sourceMappingURL=docked-panel.component.js.map