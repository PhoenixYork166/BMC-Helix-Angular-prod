{"version":3,"file":"i18n.models.js","sourceRoot":"","sources":["../../../../../../libs/adapt-angular/src/common/i18n/i18n.models.ts"],"names":[],"mappings":"AAEA;;GAEG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG;IAC1B,OAAO,EAAE,wBAAwB;IACjC,QAAQ,EAAE,yBAAyB;IACnC,YAAY,EAAE,6BAA6B;IAC3C,GAAG,EAAE,oBAAoB;IACzB,GAAG,EAAE,oBAAoB;IACzB,SAAS,EAAE,0BAA0B;IACrC,SAAS,EAAE,0BAA0B;IACrC,KAAK,EAAE,sBAAsB;IAC7B,OAAO,EAAE,wBAAwB;IACjC,KAAK,EAAE,sBAAsB;IAC7B,MAAM,EAAE,OAAO;IACf,MAAM,EAAE,OAAO;IACf,SAAS,EAAE,UAAU;IACrB,iBAAiB,EAAE,kBAAkB;IACrC,eAAe,EAAE,gBAAgB;IACjC,kBAAkB,EAAE,mBAAmB;IACvC,cAAc,EAAE,eAAe;CACvB,CAAC;AAIX;;;;GAIG;AAEH,MAAM,CAAC,MAAM,kBAAkB,GAAG;IAChC,gBAAgB,EAAE,uCAAuC;IACzD,YAAY,EAAE,mCAAmC;IACjD,gBAAgB,EAAE,uCAAuC;IACzD,YAAY,EAAE,mCAAmC;IACjD,gBAAgB,EAAE,uCAAuC;IACzD,YAAY,EAAE,mCAAmC;IACjD,OAAO,EAAE,KAAK;IACd,OAAO,EAAE,KAAK;CACN,CAAC;AAKX,MAAM,CAAC,MAAM,uBAAuB,GAAG;IACrC,iBAAiB,EAAE,sCAAsC;IACzD,gBAAgB,EAAE,4CAA4C;IAC9D,cAAc,EAAE,0CAA0C;CAC3D,CAAC","sourcesContent":["import {ValueOf} from '../common.models';\n\n/*\n Default error keys for RX component\n */\nexport const AdaptRxError = {\n  Default: 'adapt.rx.error.default',\n  Required: 'adapt.rx.error.required',\n  RequiredTrue: 'adapt.rx.error.requiredTrue',\n  Min: 'adapt.rx.error.min',\n  Max: 'adapt.rx.error.max',\n  MinLength: 'adapt.rx.error.minLength',\n  MaxLength: 'adapt.rx.error.maxLength',\n  Email: 'adapt.rx.error.email',\n  Pattern: 'adapt.rx.error.pattern',\n  Range: 'adapt.rx.error.range',\n  MinKey: '{min}',\n  MaxKey: '{max}',\n  ActualKey: '{actual}',\n  RequiredLengthKey: '{requiredLength}',\n  ActualLengthKey: '{actualLength}',\n  RequiredPatternKey: '{requiredPattern}',\n  ActualValueKey: '{actualValue}',\n} as const;\n\nexport type AdaptRxErrorType = ValueOf<typeof AdaptRxError>;\n\n/*\n Currently we have 2 types of error messages:\n  1. 'Simple error message`\n  2. 'Error type: there is a specific error'\n */\n\nexport const AdaptDatetimeError = {\n  InvalidValueName: 'adapt.datetime.error.invalidValueName',\n  InvalidValue: 'adapt.datetime.error.invalidValue',\n  DisabledDateName: 'adapt.datetime.error.disabledDateName',\n  DisabledDate: 'adapt.datetime.error.disabledDate',\n  DisabledTimeName: 'adapt.datetime.error.disabledTimeName',\n  DisabledTime: 'adapt.datetime.error.disabledTime',\n  Arg0Key: '{0}',\n  Arg1Key: '{1}'\n} as const;\n\nexport type AdaptDatetimeErrorType = ValueOf<typeof AdaptDatetimeError>;\n\n\nexport const AdaptDatetimeRangeError = {\n  InvalidRangeOrder: 'adapt.datetimeRange.error.rangeOrder',\n  InvalidStartName: 'adapt.datetimeRange.error.invalidStartName',\n  InvalidEndName: 'adapt.datetimeRange.error.invalidEndName'\n};\n\nexport type AdaptDatetimeRangeErrorType = ValueOf<typeof AdaptDatetimeRangeError>;\n"]}