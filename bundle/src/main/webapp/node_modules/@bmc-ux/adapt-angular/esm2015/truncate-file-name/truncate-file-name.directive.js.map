{"version":3,"file":"truncate-file-name.directive.js","sourceRoot":"","sources":["../../../../../libs/adapt-angular/src/truncate-file-name/truncate-file-name.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {AfterViewInit, Directive, ElementRef, Input, NgZone, OnDestroy, Renderer2} from '@angular/core';\nimport {ReplaySubject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\n\n@Directive({\n  selector: '[adaptTruncateFileName]'\n})\n\nexport class AdaptTruncateFileNameDirective implements AfterViewInit, OnDestroy {\n  @Input()\n  get content(): string {\n    return this._content;\n  }\n\n  set content(value: string) {\n    this._content = value;\n    this._originalText = this.content;\n\n    this._ngZone.onStable\n      .pipe(takeUntil(this._destroyed$), take(1))\n      .subscribe(() => {\n        this.applyEllipsis();\n      });\n  }\n\n  private _originalText: string;\n  private _content: string;\n  private _destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n\n  constructor(private _renderer: Renderer2,\n              private _elemRef: ElementRef,\n              private _ngZone: NgZone) {\n  }\n\n  ngAfterViewInit(): void {\n    if (!this.content) {\n      this._originalText = this._elemRef.nativeElement.innerText;\n      this.applyEllipsis();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._destroyed$.next(true);\n    this._destroyed$.complete();\n  }\n\n  applyEllipsis(): void {\n    const separator = this._originalText.lastIndexOf('.');\n    let fileName = '';\n    let extension = '';\n\n    this._renderer.setStyle(this._elemRef.nativeElement, 'display', 'inline-flex');\n    this._renderer.setStyle(this._elemRef.nativeElement, 'max-width', '100%');\n\n    this._elemRef.nativeElement.innerText = '';\n\n    if (separator >= 0) {\n      fileName = this._originalText.substr(0, separator);\n      extension = this._originalText.substr(separator);\n    } else {\n      fileName = this._originalText;\n    }\n\n    this.createNode(fileName, true);\n    this.createNode(extension);\n  }\n\n  createNode(nodeText: string, truncated: boolean = false): void {\n    if (!nodeText) {\n      return;\n    }\n\n    const block = this._renderer.createElement('span');\n\n    if (truncated) {\n      this._renderer.addClass(block, 'ellipsis');\n    }\n    const text = this._renderer.createText(nodeText);\n\n    this._renderer.appendChild(block, text);\n    this._renderer.appendChild(this._elemRef.nativeElement, block);\n  }\n}\n"]}