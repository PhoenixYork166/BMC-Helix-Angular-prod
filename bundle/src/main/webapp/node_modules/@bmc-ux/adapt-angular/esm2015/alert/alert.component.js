import { Component, ElementRef, EventEmitter, HostBinding, Input, Output, TemplateRef, ViewChild } from '@angular/core';
import { transition, trigger, useAnimation } from '@angular/animations';
import { AdaptAlertConfig } from './alert.config';
import { ANIMATION_NAME, ANIMATION_TIMING_FUNCTION } from '../common/animation';
import { isUndefined } from '../common/utilities';
import { AdaptTranslateService } from '../common/i18n/index';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "./alert.config";
import * as i2 from "../common/i18n/index";
import * as i3 from "../common/radar/adapt-radar";
import * as i4 from "@angular/common";
const _c0 = ["dismissBtn"];
function AdaptAlertComponent_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 8);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassMap((ctx_r0._config.type === "inline" ? "alert-icon-inline " : "alert-icon ") + ctx_r0._iconSet[ctx_r0._config.variant]);
    i0.ɵɵattribute("aria-label", ctx_r0._config.variant);
} }
function AdaptAlertComponent_span_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 9);
} }
function AdaptAlertComponent_strong_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "strong");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n          ", ctx_r2._config.title, "\n        ");
} }
function AdaptAlertComponent_13_ng_template_0_Template(rf, ctx) { }
function AdaptAlertComponent_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, AdaptAlertComponent_13_ng_template_0_Template, 0, 0, "ng-template");
} }
function AdaptAlertComponent_ng_template_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n          ");
    i0.ɵɵelementContainer(1, 10);
    i0.ɵɵtext(2, "\n        ");
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r5._config.content)("ngTemplateOutletContext", ctx_r5._context);
} }
function AdaptAlertComponent_ng_template_18_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵtextInterpolate(ctx_r7._config.content);
} }
function AdaptAlertComponent_button_22_Template(rf, ctx) { if (rf & 1) {
    const _r12 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 11, 12);
    i0.ɵɵlistener("click", function AdaptAlertComponent_button_22_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r12); const ctx_r11 = i0.ɵɵnextContext(); return ctx_r11.close(); });
    i0.ɵɵtext(2, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    i0.ɵɵattribute("aria-label", ctx_r8.closeText);
} }
const _c1 = ["*"];
let nextUniqueId = 0;
export class AdaptAlertComponent extends AdaptRadarAngularGenericDirective {
    constructor(_defaultConfig, ts, _adaptRadarService, _elem) {
        super(_adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptAlert);
        this._defaultConfig = _defaultConfig;
        this.ts = ts;
        /**
         * Context for custom template
         */
        this._context = { close: this.close.bind(this) };
        /**
         * Alert current state
         */
        this._config = {
            title: '',
            type: 'section',
            variant: 'primary',
            icon: true,
            dismissible: true,
            content: ''
        };
        /**
         * Standard alert icons
         */
        this._iconSet = {
            'primary': 'd-none',
            'success': 'd-icon-check_circle',
            'info': 'd-icon-info_circle',
            'warning': 'd-icon-exclamation_circle',
            'danger': 'd-icon-exclamation_triangle'
        };
        /* lint suggestion: Use @HostBindings and @HostListeners instead of the host property (https://angular.io/styleguide#style-06-03) */
        this.display = 'block';
        this.overflow = 'hidden';
        this.alertAnimaton = 'true';
        /* eslint-disable @angular-eslint/no-output-on-prefix */
        /**
         * On alert close event
         */
        this.onClose = new EventEmitter();
        this.uniqueId = `adapt-alert-${++nextUniqueId}`;
        this.uniqueTitleId = `${this.uniqueId}-title`;
        this.uniqueContentId = `${this.uniqueId}-content`;
        this.closeText = ts.getCurrentLanguage()['adapt.common.close'];
    }
    /**
     * Object for alert configuration (see an example bellow).
     * @docs-default
     */
    set config(v) {
        this._config = v;
        this._checkConfig();
    }
    get showDismissBtn() {
        return (this._config.type !== 'inline') && this._config.dismissible;
    }
    ngOnInit() {
        this._checkConfig();
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this.showDismissBtn && this.dismissBtn) {
            this.dismissBtn.nativeElement.focus();
        }
    }
    /**
     * On close button click handler
     */
    close() {
        this.onClose.emit();
    }
    /**
     * Check content type
     */
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    isTemplate(content) {
        return content instanceof TemplateRef;
    }
    /**
     * Checking for the config changes
     */
    _checkConfig() {
        if (isUndefined(this._config.type)) {
            this._config.type = this._defaultConfig.type;
        }
        if (isUndefined(this._config.variant)) {
            this._config.variant = this._defaultConfig.variant;
        }
        if (isUndefined(this._config.icon)) {
            this._config.icon = this._defaultConfig.icon;
        }
        if (isUndefined(this._config.dismissible)) {
            this._config.dismissible = this._defaultConfig.dismissible;
        }
    }
}
AdaptAlertComponent.ɵfac = function AdaptAlertComponent_Factory(t) { return new (t || AdaptAlertComponent)(i0.ɵɵdirectiveInject(i1.AdaptAlertConfig), i0.ɵɵdirectiveInject(i2.AdaptTranslateService), i0.ɵɵdirectiveInject(i3.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptAlertComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptAlertComponent, selectors: [["adapt-alert"]], viewQuery: function AdaptAlertComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dismissBtn = _t.first);
    } }, hostVars: 5, hostBindings: function AdaptAlertComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵsyntheticHostProperty("@alertAnimation", ctx.alertAnimaton);
        i0.ɵɵstyleProp("display", ctx.display)("overflow", ctx.overflow);
    } }, inputs: { config: "config" }, outputs: { onClose: "onClose" }, features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 25, vars: 12, consts: [["role", "img", 3, "class", 4, "ngIf"], ["class", "alert-icon-lockup-space", 4, "ngIf"], [1, "alert-content", "text-url-break-out"], [4, "ngIf"], [4, "ngIf", "ngIfThen", "ngIfElse"], ["tmplContent", ""], ["stringContent", ""], ["role", "button", "type", "button", "class", "adapt-alert-close d-icon-cross", 3, "click", 4, "ngIf"], ["role", "img"], [1, "alert-icon-lockup-space"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["role", "button", "type", "button", 1, "adapt-alert-close", "d-icon-cross", 3, "click"], ["dismissBtn", ""]], template: function AdaptAlertComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtext(0, "\n    ");
        i0.ɵɵelementStart(1, "p");
        i0.ɵɵtext(2, "\n\n      ");
        i0.ɵɵtemplate(3, AdaptAlertComponent_span_3_Template, 2, 3, "span", 0);
        i0.ɵɵtext(4, "\n\n      ");
        i0.ɵɵtemplate(5, AdaptAlertComponent_span_5_Template, 1, 0, "span", 1);
        i0.ɵɵtext(6, "\n\n      ");
        i0.ɵɵelementStart(7, "span", 2);
        i0.ɵɵtext(8, "\n        ");
        i0.ɵɵtemplate(9, AdaptAlertComponent_strong_9_Template, 2, 1, "strong", 3);
        i0.ɵɵtext(10, "\n        ");
        i0.ɵɵprojection(11);
        i0.ɵɵtext(12, "\n\n        ");
        i0.ɵɵtemplate(13, AdaptAlertComponent_13_Template, 1, 0, undefined, 4);
        i0.ɵɵtext(14, "\n\n        ");
        i0.ɵɵtemplate(15, AdaptAlertComponent_ng_template_15_Template, 3, 2, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(17, "\n        ");
        i0.ɵɵtemplate(18, AdaptAlertComponent_ng_template_18_Template, 1, 1, "ng-template", null, 6, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(20, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(21, "\n\n      ");
        i0.ɵɵtemplate(22, AdaptAlertComponent_button_22_Template, 3, 1, "button", 7);
        i0.ɵɵtext(23, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(24, "\n  ");
    } if (rf & 2) {
        const _r4 = i0.ɵɵreference(16);
        const _r6 = i0.ɵɵreference(19);
        i0.ɵɵadvance(1);
        i0.ɵɵclassMap(ctx._config.type === "inline" ? "text-" + ctx._config.variant : "alert alert-" + ctx._config.variant + (ctx._config.type === "page" ? " page-alert m-0" : ""));
        i0.ɵɵattribute("role", ctx.showDismissBtn ? "alertdialog" : "alert")("aria-labelledby", ctx._config.title && ctx.uniqueTitleId || ctx.uniqueContentId);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx._config.icon);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx._config.type === "inline");
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("id", ctx._config.title && ctx.uniqueTitleId || ctx.uniqueContentId);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx._config.title);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", ctx.isTemplate(ctx._config.content))("ngIfThen", _r4)("ngIfElse", _r6);
        i0.ɵɵadvance(9);
        i0.ɵɵproperty("ngIf", ctx.showDismissBtn);
    } }, directives: [i4.NgIf, i4.NgTemplateOutlet], styles: [".alert-icon-lockup-space[_ngcontent-%COMP%] { padding-right: .5965em }"], data: { animation: [
            trigger('alertAnimation', [
                transition('void => *', [
                    useAnimation(ANIMATION_NAME.height, {
                        params: {
                            timingFunction: ANIMATION_TIMING_FUNCTION.base.transitionIn,
                        }
                    })
                ]),
                transition('* => void', [
                    useAnimation(ANIMATION_NAME.height, {
                        params: {
                            from: '*',
                            to: '0',
                            timingFunction: ANIMATION_TIMING_FUNCTION.base.transitionOut,
                        }
                    })
                ])
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptAlertComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-alert',
                template: `
    <p [class]="_config.type === 'inline' ? 'text-' + _config.variant :
        'alert alert-' + _config.variant + (_config.type === 'page' ? ' page-alert m-0' : '')"
       [attr.role]="showDismissBtn ? 'alertdialog' : 'alert'"
       [attr.aria-labelledby]="_config.title && uniqueTitleId || uniqueContentId">

      <span *ngIf="_config.icon"
            role="img"
            [attr.aria-label]="_config.variant"
            [class]="(_config.type === 'inline' ? 'alert-icon-inline ' : 'alert-icon ') + _iconSet[_config.variant]">
      </span>

      <span class="alert-icon-lockup-space"
            *ngIf="_config.type === 'inline'"></span>

      <span class="alert-content text-url-break-out" [attr.id]="_config.title && uniqueTitleId || uniqueContentId">
        <strong *ngIf="_config.title">
          {{_config.title}}
        </strong>
        <ng-content></ng-content>

        <ng-template *ngIf="isTemplate(_config.content); then tmplContent; else stringContent"></ng-template>

        <ng-template #tmplContent>
          <ng-container [ngTemplateOutlet]="_config.content"
                        [ngTemplateOutletContext]="_context"></ng-container>
        </ng-template>
        <ng-template #stringContent>{{_config.content}}</ng-template>
      </span>

      <button *ngIf="showDismissBtn"
              role="button"
              type="button"
              class="adapt-alert-close d-icon-cross"
              [attr.aria-label]="closeText"
              #dismissBtn
              (click)="close()">
      </button>
    </p>
  `,
                animations: [
                    trigger('alertAnimation', [
                        transition('void => *', [
                            useAnimation(ANIMATION_NAME.height, {
                                params: {
                                    timingFunction: ANIMATION_TIMING_FUNCTION.base.transitionIn,
                                }
                            })
                        ]),
                        transition('* => void', [
                            useAnimation(ANIMATION_NAME.height, {
                                params: {
                                    from: '*',
                                    to: '0',
                                    timingFunction: ANIMATION_TIMING_FUNCTION.base.transitionOut,
                                }
                            })
                        ])
                    ])
                ],
                preserveWhitespaces: true,
                styles: ['.alert-icon-lockup-space { padding-right: .5965em }']
            }]
    }], function () { return [{ type: i1.AdaptAlertConfig }, { type: i2.AdaptTranslateService }, { type: i3.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { display: [{
            type: HostBinding,
            args: ['style.display']
        }], overflow: [{
            type: HostBinding,
            args: ['style.overflow']
        }], alertAnimaton: [{
            type: HostBinding,
            args: ['@alertAnimation']
        }], config: [{
            type: Input
        }], onClose: [{
            type: Output
        }], dismissBtn: [{
            type: ViewChild,
            args: ['dismissBtn', { static: true }]
        }] }); })();
//# sourceMappingURL=alert.component.js.map