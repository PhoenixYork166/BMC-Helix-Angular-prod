// https://github.com/mansour-ahmed/ng-animate-scroll
// LICENSE - https://github.com/mansour-ahmed/ng-animate-scroll/blob/master/LICENSE
import { Injectable } from '@angular/core';
import { adaptError } from '../logger';
import * as i0 from "@angular/core";
export const INCREMENT_VALUE = 20;
export class AdaptAnimateScrollService {
    getListenerTarget(container) {
        if (!container) {
            return window;
        }
        return this.isDocumentBody(container) ? window : container;
    }
    isDocumentBody(element) {
        return element.tagName.toUpperCase() === 'BODY';
    }
    /**
     * @desc scrollToItem Fn scrolls to an items by utilising the animated scroll fn (scrollTo)
     *       and calculating the height of the header to accurately find the item's position.
     * @param elementID: element's ID that will be scrolled to.
     * @param duration: duration in milliseconds, default is 400.
     * @param offset: offset for scroll.
     * @param container: the container html native element, window will be used if not set
     */
    scrollToElement(elementID, duration = 400, offset = 0, container) {
        const targetElem = document.getElementById(elementID);
        if (!targetElem) {
            adaptError(`Could not find element with the following ID: ${elementID}`);
            return;
        }
        const listenerTarget = this.getListenerTarget(container);
        const to = listenerTarget === window
            ? window.pageYOffset + targetElem.getBoundingClientRect().top
            : targetElem.getBoundingClientRect().top;
        this.scrollTo(listenerTarget, to, duration, offset, container);
    }
    /**
     * @desc scrollTo Fn allows scrolling with animation.
     * @param listenerTarget: the container (html native element or window) on which scroll events will be listened.
     * @param to: is the location to scroll to.
     * @param duration: is the length of the animation.
     * @param offset: offset for scroll.
     * @param container: the container element
     */
    scrollTo(listenerTarget, to, duration, offset, container) {
        // Whether or not the listener is the Window
        const isWindow = listenerTarget === window;
        const windowScrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0;
        // TODO check if can be refactored
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const that = this;
        let startPosition;
        const animateScroll = () => {
            const val = that.easingLogic(time, startPosition, distance, duration);
            if (container && !isWindow) {
                container.scrollTop = val;
            }
            else {
                // to allow scroll function on different browsers both chrome and firefox
                top.window.scroll(0, val);
            }
            if (time < duration) {
                time += INCREMENT_VALUE;
                setTimeout(animateScroll, INCREMENT_VALUE);
            }
        };
        if (!container) {
            startPosition = windowScrollTop;
        }
        else {
            startPosition = isWindow ? windowScrollTop : container.scrollTop;
        }
        // Correction for Starting Position of nested HTML Elements
        if (container && !isWindow) {
            to = to - container.getBoundingClientRect().top + startPosition;
        }
        const distance = to - startPosition + offset;
        let time = 0;
        animateScroll();
    }
    // t: current time, b: begInnIng value, c: change In value, d: duration
    easingLogic(t, b, c, d) {
        // easeInOutQuad
        if ((t /= d / 2) < 1) {
            return c / 2 * t * t + b;
        }
        return -c / 2 * ((--t) * (t - 2) - 1) + b;
    }
}
AdaptAnimateScrollService.ɵfac = function AdaptAnimateScrollService_Factory(t) { return new (t || AdaptAnimateScrollService)(); };
AdaptAnimateScrollService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptAnimateScrollService, factory: AdaptAnimateScrollService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptAnimateScrollService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], null, null); })();
//# sourceMappingURL=scroll.service.js.map