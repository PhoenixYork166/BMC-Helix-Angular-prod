{"version":3,"file":"busy-inline-standalone.directive.js","sourceRoot":"","sources":["../../../../../libs/adapt-angular/src/busy-loader/busy-inline-standalone.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,KAAK,EAAE,SAAS,EAAE,UAAU,EAA2B,MAAM,eAAe,CAAC;;AAKrF,MAAM,OAAO,8BAA8B;IAWzC,YAAoB,WAAuB;QAAvB,gBAAW,GAAX,WAAW,CAAY;QAVlC,sBAAiB,GAAY,KAAK,CAAC;QAIpC,SAAI,GAAuC;YACjD,MAAM,EAAE,uBAAuB;YAC/B,MAAM,EAAE,8BAA8B;SACvC,CAAC;QACM,mBAAc,GAAY,KAAK,CAAC;QAGtC,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5D,CAAC;IAED,eAAe;QACb,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,WAAW,CAAC;QAC5D,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAC3B,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAED,WAAW;QACT,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;IACH,CAAC;IAED,YAAY;QACV,IAAI,IAAI,CAAC,iBAAiB,EAAE;YAC1B,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC/D,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,WAAW,CAAC;YAE5D,IAAI,IAAI,CAAC,UAAU,EAAE;gBACnB,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC;aAC9D;SACF;aAAM;YACL,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAElE,IAAI,IAAI,CAAC,UAAU,EAAE;gBACnB,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC;aAC7D;SACF;IACH,CAAC;;4GA1CU,8BAA8B;iFAA9B,8BAA8B;uFAA9B,8BAA8B;cAH1C,SAAS;eAAC;gBACT,QAAQ,EAAE,qBAAqB;aAChC;6DAEU,iBAAiB;kBAAzB,KAAK;YACG,UAAU;kBAAlB,KAAK","sourcesContent":["import {Input, Directive, ElementRef, OnChanges, AfterViewInit} from '@angular/core';\n\n@Directive({\n  selector: '[adaptInlineLoader]'\n})\nexport class AdaptInlineStandaloneDirective implements AfterViewInit, OnChanges {\n  @Input() adaptInlineLoader: boolean = false;\n  @Input() activeText: string;\n\n  private _initText: string;\n  private _cls: { normal: string; active: string } = {\n    normal: 'adapt-build-in-loader',\n    active: 'adapt-build-in-loader-active'\n  };\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef) {\n    _elementRef.nativeElement.classList.add(this._cls.normal);\n  }\n\n  ngAfterViewInit(): void {\n    this._initText = this._elementRef.nativeElement.textContent;\n    this._isInitialized = true;\n    this.toggleLoader();\n  }\n\n  ngOnChanges(): void {\n    if (this._isInitialized) {\n      this.toggleLoader();\n    }\n  }\n\n  toggleLoader(): void {\n    if (this.adaptInlineLoader) {\n      this._elementRef.nativeElement.classList.add(this._cls.active);\n      this._initText = this._elementRef.nativeElement.textContent;\n\n      if (this.activeText) {\n        this._elementRef.nativeElement.textContent = this.activeText;\n      }\n    } else {\n      this._elementRef.nativeElement.classList.remove(this._cls.active);\n\n      if (this.activeText) {\n        this._elementRef.nativeElement.textContent = this._initText;\n      }\n    }\n  }\n}\n"]}