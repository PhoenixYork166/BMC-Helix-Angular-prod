{"version":3,"file":"modal-stack.service.js","sourceRoot":"","sources":["../../../../../libs/adapt-angular/src/modal/modal-stack.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ApplicationRef,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Injectable,\n  Injector,\n  OnDestroy,\n  Type\n} from '@angular/core';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {takeUntil} from 'rxjs/operators';\nimport {fromEvent, noop, Subscription} from 'rxjs';\nimport {merge, isNil} from 'lodash-es';\n\nimport {ScrollManagerApi, ScrollManageService} from '../common/scroll-manage.service';\nimport {LayerService} from '../common/layer-service';\nimport {AdaptOverlayService, AdaptOverlayWithPortal} from '../common/overlay/index';\nimport {getEventKeyCode} from '../common/key-codes';\n\nimport {AdaptModalComponent} from './modal.component';\nimport {AdaptDialogComponent} from './dialog.component';\nimport {AdaptModalConfig} from './modal.config';\nimport {ModalConfig, ModalDeferred, ModalDialog} from './modal.model';\nimport {OverModalConfig} from './over-modal';\nimport {DismissReasons} from '../common/common.enums';\n\nlet OPEN_MODAL_ID = 1;\n\n/**\n * The service for using modal/dialogs\n *\n * open(config) â€“ Opens modal window. Returns Promise that is resolved when a modal is closed and rejected when a modal is dismissed.\n *\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdaptModalStackService implements OnDestroy {\n  /**\n   * The wrapper to include modals/dialogs\n   */\n  private _wrapper: HTMLElement = document.body;\n\n  /**\n   * An object for manage wrapper's scroll.\n   */\n  private _scrollManager: ScrollManagerApi;\n\n  /**\n   * Array with opened modals\n   */\n  private _openedModals: Map<string, ComponentRef<AdaptDialogComponent | AdaptModalComponent>> = new Map();\n  private _activeModal: ComponentRef<AdaptDialogComponent | AdaptModalComponent>;\n  private _popstateSubscription: Subscription;\n\n  get openedModals(): Map<string, ComponentRef<AdaptDialogComponent | AdaptModalComponent>> {\n    return this._openedModals;\n  }\n\n  get activeModal(): ComponentRef<AdaptDialogComponent | AdaptModalComponent> {\n    return this._activeModal;\n  }\n\n  constructor(private _componentFactoryResolver: ComponentFactoryResolver,\n              private _appRef: ApplicationRef,\n              private _scrollService: ScrollManageService,\n              private _mConfigService: AdaptModalConfig,\n              private _layerService: LayerService,\n              private _overlayService: AdaptOverlayService) {\n    // Get scroll manager\n    this._scrollManager = this._scrollService.getScrollManager(this._wrapper);\n\n    // Close all modals on route change\n    this._popstateSubscription = fromEvent(window, 'popstate').subscribe(this.closeAllModals.bind(this));\n  }\n\n  ngOnDestroy(): void {\n    this._popstateSubscription.unsubscribe();\n    this._popstateSubscription = null;\n  }\n\n  /**\n   * Open modal/dialog\n   * @returns ModalDeferred - The Promise object with additional methods: resolve() and reject().\n   * Resolved when a modal is closed and rejected when a modal is dismissed.\n   */\n  open(config: ModalConfig | ModalDialog, configInjector: Injector): ModalDeferred {\n    // close all dropdowns/popover while modal is opened\n    if (config.closeAllOpenedItems !== false) {\n      this._layerService.closeOpenedItem();\n    }\n\n    // Throw error if content missing\n    if (!config || !config.content) {\n      throw(new Error('Missing modal content'));\n    }\n\n    const componentToBuild: Type<AdaptDialogComponent | AdaptModalComponent> =\n      config.isDialog || this._mConfigService.isDialog ? AdaptDialogComponent : AdaptModalComponent;\n\n    if (this._overlayService.enableCDKOverlayControl) {\n      return this._openOverlay(componentToBuild, config, configInjector);\n    }\n\n    const modalDeferred = new ModalDeferred(\n      () => {\n        this._close(modalRef);\n      }, () => {\n        this._close(modalRef);\n      }\n    );\n\n    modalDeferred.then(noop, noop);\n\n    const modalRef: ComponentRef<AdaptDialogComponent | AdaptModalComponent> =\n      this._componentFactoryResolver.resolveComponentFactory(componentToBuild).create(configInjector);\n\n    this._layerService.addComponent(modalRef.instance, (event) => {\n      modalRef.instance.escClickHandler(event);\n    });\n\n    const id = 'adapt-modal-' + OPEN_MODAL_ID++;\n\n    modalRef.instance.id = id;\n    modalRef.instance.config = config;\n    modalRef.instance.configService = this._mConfigService;\n\n    modalRef.instance.onClose.subscribe((result) => {\n      modalDeferred.resolve(result);\n    });\n\n    modalRef.instance.onDismiss.subscribe((reason) => {\n      modalDeferred.reject(reason);\n    });\n\n    modalRef.instance.onCloseAnimationEnd.subscribe(() => {\n      this._scrollManager.show(modalRef);\n    });\n\n    this._openedModals.set(id, modalRef);\n    this._activeModal = modalRef;\n\n    this._scrollManager.hide(modalRef);\n\n    this._appRef.attachView(modalRef.hostView);\n    this._wrapper.appendChild(modalRef.location.nativeElement);\n\n    return modalDeferred;\n  }\n\n  updateConfig(config: ModalConfig, modalComponent: ComponentRef<AdaptDialogComponent | AdaptModalComponent>): void {\n    this._updateConfig(config, modalComponent);\n  }\n\n  updateOverModalConfig(config: OverModalConfig, modalComponent: ComponentRef<AdaptDialogComponent | AdaptModalComponent>, isOverModal: boolean): void {\n    this._updateConfig(config, modalComponent, isOverModal);\n  }\n\n  // TODO: Refactor this if possible\n  closeAllModals(): void {\n    this._openedModals.forEach((modalRef) => {\n      if (modalRef.instance.config.beforeDismiss && !modalRef.instance.config.beforeDismiss(DismissReasons.CLOSE_ALL)) {\n        return;\n      }\n\n      modalRef.instance.close(modalRef.instance.id);\n      this._close(modalRef);\n    });\n  }\n\n  /**\n   * Close modal/dialog\n   */\n  private _close(modalRef: ComponentRef<AdaptDialogComponent | AdaptModalComponent>): void {\n    this._openedModals.delete(modalRef.instance.id);\n\n    // In case there are more than one opened modal need to take last added to Map item and set is as active modal\n    this._activeModal = this._openedModals.size ? Array.from(this._openedModals.values()).pop() : null;\n\n    this._layerService.removeComponent(modalRef.instance);\n    modalRef.destroy();\n  }\n\n  private _updateConfig(config: ModalConfig, modalComponent: ComponentRef<AdaptDialogComponent | AdaptModalComponent>,\n                        isOverModal: boolean = false): void {\n    if (isNil(modalComponent?.instance)) {\n      throw new Error('Please make sure that passed \"modalComponent\" argument is defined');\n    }\n\n    const modal = this._openedModals.get(modalComponent.instance.id);\n\n    if (!modal) {\n      return;\n    }\n\n    if (isOverModal) {\n      const modalComponentInstance = (modalComponent.instance as AdaptModalComponent);\n\n      modalComponentInstance.overModalConfig = merge(modalComponentInstance.overModalConfig, config);\n    } else {\n      modalComponent.instance.updateConfig(config);\n    }\n  }\n\n  private _openOverlay(componentToBuild: Type<AdaptDialogComponent | AdaptModalComponent>,\n                       config: ModalConfig | ModalDialog, injector: Injector): ModalDeferred {\n    const modalDeferred = new ModalDeferred(\n      () => {\n        if (modalOverlayWithPortal?.overlayRef) {\n          this._closeOverlay(modalOverlayWithPortal);\n        }\n      }, () => {\n        if (modalOverlayWithPortal?.overlayRef) {\n          this._closeOverlay(modalOverlayWithPortal);\n        }\n      }\n    );\n\n    modalDeferred.then(noop, noop);\n    const modalOverlayWithPortal: AdaptOverlayWithPortal<AdaptDialogComponent | AdaptModalComponent> =\n      this._overlayService.openOverlayWithPortal(\n        new ComponentPortal(componentToBuild, null, injector),\n        {scrollStrategy: 'block'}\n      );\n\n    modalOverlayWithPortal.overlayRef.keydownEvents()\n      .pipe(takeUntil(modalOverlayWithPortal.destroy$))\n      .subscribe((event) => {\n        if (getEventKeyCode(event) === ESCAPE) {\n          modalOverlayWithPortal.componentRef.instance.escClickHandler(event);\n        }\n      });\n\n    modalOverlayWithPortal.componentRef.instance.id = 'adapt-modal-' + OPEN_MODAL_ID++;\n    modalOverlayWithPortal.componentRef.instance.config = config;\n    modalOverlayWithPortal.componentRef.instance.configService = this._mConfigService;\n    modalOverlayWithPortal.componentRef.instance.onClose.subscribe((result) => {\n      modalDeferred.resolve(result);\n    });\n    modalOverlayWithPortal.componentRef.instance.onDismiss.subscribe((reason) => {\n      modalDeferred.reject(reason);\n      this._closeOverlay(modalOverlayWithPortal);\n    });\n\n    this._openedModals.set(modalOverlayWithPortal.componentRef.instance.id, modalOverlayWithPortal.componentRef);\n    this._activeModal = modalOverlayWithPortal.componentRef;\n\n    return modalDeferred;\n  }\n\n  private _closeOverlay(overlayWithPortal: AdaptOverlayWithPortal<AdaptDialogComponent | AdaptModalComponent>,\n                        force?: boolean): void {\n    this._openedModals.delete(overlayWithPortal.componentRef.instance.id);\n\n    if (force) {\n      overlayWithPortal.destroy();\n\n    } else {\n      if (overlayWithPortal?.componentRef) {\n        overlayWithPortal.componentRef.instance.onCloseAnimationEnd\n          .pipe(takeUntil(overlayWithPortal.destroy$))\n          .subscribe(() => {\n            overlayWithPortal.destroy();\n          });\n\n        overlayWithPortal.componentRef.destroy();\n      }\n    }\n  }\n}\n"]}