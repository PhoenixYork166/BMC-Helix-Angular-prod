import { Injectable } from '@angular/core';
import * as Hammer from 'hammerjs';
import { HammerGestureConfig } from '@angular/platform-browser';
import * as i0 from "@angular/core";
// import {HammerInstance} from '@angular/platform-browser/src/dom/events/hammer_gestures';
export class AdaptHammerConfig extends HammerGestureConfig {
    constructor() {
        super(...arguments);
        this.overrides = {
            'swipe': { velocity: 0.4, threshold: 20, direction: Hammer.DIRECTION_ALL },
        };
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    buildHammer(element) {
        let options = {
            touchAction: 'compute',
        };
        // https://github.bmc.com/bmc-ux/adapt-angular/issues/2072
        // we need to set pan-y for carousel components only
        if (element.dataset && element.dataset.adapt === 'hammer-pan-y') {
            options = {
                touchAction: 'pan-y',
            };
        }
        const mc = new Hammer(element, options);
        mc.get('pinch').set({ enable: true });
        mc.get('rotate').set({ enable: true });
        for (const eventName of Object.keys(this.overrides)) {
            mc.get(eventName).set(this.overrides[eventName]);
        }
        return mc;
    }
}
AdaptHammerConfig.ɵfac = /*@__PURE__*/ function () { let ɵAdaptHammerConfig_BaseFactory; return function AdaptHammerConfig_Factory(t) { return (ɵAdaptHammerConfig_BaseFactory || (ɵAdaptHammerConfig_BaseFactory = i0.ɵɵgetInheritedFactory(AdaptHammerConfig)))(t || AdaptHammerConfig); }; }();
AdaptHammerConfig.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptHammerConfig, factory: AdaptHammerConfig.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptHammerConfig, [{
        type: Injectable
    }], null, null); })();
//# sourceMappingURL=hammer-gestures.config.js.map