import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class AdaptFocusTrackerService {
    // TODO: Refactor this if possible
    /* eslint-disable @typescript-eslint/no-explicit-any */
    /**
     * Remove from HTMLElement CSS class 'is-mouse-focused' on focus out event
     */
    static removeFocus(e) {
        e.target.classList.remove(AdaptFocusTrackerService._focused);
    }
    preFocus(e) {
        this._usingMouse = (e.type === AdaptFocusTrackerService._events.mousedown);
    }
    /**
     * Add to HTMLElement CSS class 'is-mouse-focused' on focus in event
     */
    addFocus(e) {
        if (this._usingMouse) {
            e.target.classList.add(AdaptFocusTrackerService._focused);
        }
    }
    /* eslint-enable @typescript-eslint/no-explicit-any */
    /**
     * Listen events to document body
     */
    enableFocusTracker() {
        document.body.addEventListener(AdaptFocusTrackerService._events.keydown, this.preFocus.bind(this));
        document.body.addEventListener(AdaptFocusTrackerService._events.mousedown, this.preFocus.bind(this));
        document.body.addEventListener(AdaptFocusTrackerService._events.focusin, this.addFocus.bind(this));
        document.body.addEventListener(AdaptFocusTrackerService._events.focusout, AdaptFocusTrackerService.removeFocus.bind(this));
    }
    disableFocusTracker() {
        document.body.removeEventListener(AdaptFocusTrackerService._events.keydown, this.preFocus.bind(this));
        document.body.removeEventListener(AdaptFocusTrackerService._events.mousedown, this.preFocus.bind(this));
        document.body.removeEventListener(AdaptFocusTrackerService._events.focusin, this.addFocus.bind(this));
        document.body.removeEventListener(AdaptFocusTrackerService._events.focusout, AdaptFocusTrackerService.removeFocus.bind(this));
    }
}
AdaptFocusTrackerService._focused = 'is-mouse-focused';
AdaptFocusTrackerService._events = {
    keydown: 'keydown',
    mousedown: 'mousedown',
    focusin: 'focusin',
    focusout: 'focusout'
};
AdaptFocusTrackerService.ɵfac = function AdaptFocusTrackerService_Factory(t) { return new (t || AdaptFocusTrackerService)(); };
AdaptFocusTrackerService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptFocusTrackerService, factory: AdaptFocusTrackerService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptFocusTrackerService, [{
        type: Injectable
    }], null, null); })();
//# sourceMappingURL=focus-tracker.service.js.map