import { formatToParts } from './partition.utils';
import { isInvalidDate } from './validate.utils';
/**
 * getTimeZoneOffset() function
 *
 * Determines the offset from UTC of the input date in an input time zone. The concept is lifted from
 * https://stackoverflow.com/questions/29265389/how-do-i-calculate-the-difference-of-2-time-zones-in-javascript
 */
export function getTimeZoneOffset(date, timeZone) {
    if (!date) {
        return null;
    }
    else if (isInvalidDate(date)) {
        return NaN;
    }
    else if (!timeZone) {
        return date.getTimezoneOffset();
    }
    const dateParts = formatToParts(date, timeZone);
    const year = dateParts.get('year');
    const month = dateParts.get('month');
    const day = dateParts.get('day');
    const hour = dateParts.get('hour');
    const minute = dateParts.get('minute');
    const second = dateParts.get('second');
    const ms = dateParts.get('millisecond');
    const iso = `${year}-${month}-${day}T${hour}:${minute}:${second}.${ms}`;
    // construct a new Date with the exact same date parts but in UTC time
    const utcDate = new Date(`${iso}Z`);
    // Now compare the difference (in minutes) between the input date and the UTC date with the same date parts
    // Positive values are west of GMT (opposite of ISO 8601) in order to match the output of `Date.getTimeZoneOffset`
    // use '0 - ...' instead of '-value' to prevent return '-0' value (https://stackoverflow.com/a/59343755)
    return 0 - (utcDate.valueOf() - date.valueOf()) / 60 / 1000;
}
//# sourceMappingURL=offset.utils.js.map