import { getValidTimeZone } from './time-zone.utils';
import { isInvalidDate } from './validate.utils';
/**
 * formatToParts() function
 *
 * Creates a string Map of all the parts of the input date and (optional) time zone
 */
export function formatToParts(date, timeZone) {
    if (!date) {
        return null;
    }
    else if (isInvalidDate(date)) {
        return new Map();
    }
    // Use the Intl API to get local ISO 8601 string parts for a given time zone.
    timeZone = getValidTimeZone(timeZone);
    const options = {
        timeZone,
        calendar: 'iso8601',
        numberingSystem: 'latn',
        hourCycle: 'h23',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    };
    const dateTimeFormat = new Intl.DateTimeFormat(undefined, options);
    const formattedParts = dateTimeFormat.formatToParts(date).reduce((memo, x) => {
        x.type !== 'literal' && memo.push([x.type, x.value]);
        return memo;
    }, [
        ['millisecond', date.getMilliseconds().toString().padStart(3, '0')],
        ['timeZone', timeZone]
    ]);
    return new Map(formattedParts);
}
/**
 * getDateParts() function
 *
 * Converts an input date object into the extended Struct object used by Adapt
 */
export function getDateParts(date, timeZone) {
    if (!date) {
        return null;
    }
    if (!timeZone && timeZone !== 0) {
        // no need for the more complex Intl calculations if timeZone is not specified
        return {
            year: date.getFullYear(),
            month: date.getMonth(),
            date: date.getDate(),
            hours: date.getHours(),
            minutes: date.getMinutes(),
            seconds: date.getSeconds(),
            milliseconds: date.getMilliseconds()
        };
    }
    if (typeof timeZone === 'number') {
        timeZone = Math.round(timeZone);
        const offsetAdjustedDate = new Date(date.valueOf() - timeZone * 60 * 1000);
        return {
            year: offsetAdjustedDate.getUTCFullYear(),
            month: offsetAdjustedDate.getUTCMonth(),
            date: offsetAdjustedDate.getUTCDate(),
            hours: offsetAdjustedDate.getUTCHours(),
            minutes: offsetAdjustedDate.getUTCMinutes(),
            seconds: offsetAdjustedDate.getUTCSeconds(),
            milliseconds: offsetAdjustedDate.getUTCMilliseconds(),
            offset: timeZone
        };
    }
    const dateParts = formatToParts(date, timeZone);
    return dateParts && {
        year: +dateParts.get('year'),
        month: +dateParts.get('month') - 1,
        date: +dateParts.get('day'),
        hours: +dateParts.get('hour'),
        minutes: +dateParts.get('minute'),
        seconds: +dateParts.get('second'),
        milliseconds: +dateParts.get('millisecond'),
        timeZone: dateParts.get('timeZone')
    };
}
//# sourceMappingURL=partition.utils.js.map