import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Inject, Input, LOCALE_ID, Optional, Output, Renderer2, Self, ViewChild } from '@angular/core';
import { NgControl } from '@angular/forms';
import { ENTER, SPACE, TAB } from '@angular/cdk/keycodes';
import { take, takeUntil } from 'rxjs/operators';
import { isFunction, isNil, pick } from 'lodash-es';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularCustomEventType, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { AdaptInteractionSourceService, getInteractionSource } from '../../common/interaction-source';
import { AdaptRxFeedbackComponent, AdaptRxFormControlDirective } from '../form-control/index';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import { AdaptTranslateService } from '../../common/i18n/index';
import { AdaptDropdownCloseReason, AdaptDropdownDirective } from '../../dropdown/index';
import { SafeCdr } from '../../common/safe-cdr';
import { getEventKeyCode } from '../../common/key-codes';
import { getFocusableElements } from '../../common/focus';
import { getDateParts } from './common/partition.utils';
import { checkIfPropsDefined, getDatetimeModelPropsByMode, getStructWithDefaults } from './common/common.utils';
import { RxDatetimePickerMode } from './adapt-rx-datetime.types';
import { AdaptRxDatetimeConfigService } from './adapt-rx-datetime-config.service';
import { AdaptRxDatetimeAdapter } from './adapt-rx-datetime-adapter.service';
import { AdaptRxDatetimeI18nService } from './adapt-rx-datetime-i18n.service';
import { AdaptRxDatetimeParserFormatter } from './adapt-rx-datetime-parser-formatter.service';
import { AdaptRxDatetimePickerComponent } from './datetime-picker/adapt-rx-datetime-picker.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "./adapt-rx-datetime-config.service";
import * as i3 from "../../common/device-detection.service";
import * as i4 from "./adapt-rx-datetime-i18n.service";
import * as i5 from "./adapt-rx-datetime-adapter.service";
import * as i6 from "./adapt-rx-datetime-parser-formatter.service";
import * as i7 from "../../common/i18n/index";
import * as i8 from "../../common/radar/adapt-radar";
import * as i9 from "../../common/interaction-source";
import * as i10 from "../form-control/rx-control-label/adapt-rx-control-label.component";
import * as i11 from "@angular/common";
import * as i12 from "../form-control/rx-feedback/adapt-rx-feedback.component";
import * as i13 from "./datetime-picker/adapt-rx-datetime-picker.component";
import * as i14 from "../../dropdown/dropdown.component";
const _c0 = ["inputControlRef"];
const _c1 = ["openPopupRef"];
const _c2 = ["adaptRxFeedbackRef"];
const _c3 = ["adaptDropdownDirective"];
const _c4 = ["adaptRxDatetimePickerComponent"];
const _c5 = ["datetimePickerContainer"];
function AdaptRxDatetimeComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-rx-datetime-picker", 7, 8);
    i0.ɵɵlistener("pickerValueChange", function AdaptRxDatetimeComponent_ng_template_5_Template_adapt_rx_datetime_picker_pickerValueChange_0_listener($event) { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(); return ctx_r8.onPickerValueChange($event); })("pickerStateChange", function AdaptRxDatetimeComponent_ng_template_5_Template_adapt_rx_datetime_picker_pickerStateChange_0_listener() { i0.ɵɵrestoreView(_r9); const ctx_r10 = i0.ɵɵnextContext(); return ctx_r10.onPickerStateChange(); });
    i0.ɵɵelement(2, "adapt-rx-feedback", 9);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("mode", ctx_r2.mode)("expandedControlsStyle", ctx_r2.mode === ctx_r2.PICKER_MODE.Date)("dayFilter", ctx_r2.dayFilter)("hasSeconds", ctx_r2.hasSeconds)("use12HoursTime", ctx_r2.use12HoursTime)("firstDayOfWeek", ctx_r2.firstDayOfWeek)("initialDatetime", ctx_r2.initialDatetime || ctx_r2.defaultInitialDatetime)("activeDatetime", ctx_r2.pickerActiveDatetime)("disabled", ctx_r2.disabled)("readonly", ctx_r2.readonly)("texts", ctx_r2.texts)("testID", ctx_r2.testID);
    i0.ɵɵattribute("data-testid", ctx_r2.testID + "_picker");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("errors", ctx_r2.ngControl.errors)("ariaErrorMessage", ctx_r2.ariaErrorMessage)("warningMessage", ctx_r2.warningMessage)("controlTouched", ctx_r2.ngControl.touched)("alertFeedbackStyle", true)("alertFeedbackTruncation", !ctx_r2.isMobile);
} }
function AdaptRxDatetimeComponent_ng_template_7_ng_template_1_Template(rf, ctx) { }
function AdaptRxDatetimeComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 10);
    i0.ɵɵtemplate(1, AdaptRxDatetimeComponent_ng_template_7_ng_template_1_Template, 0, 0, "ng-template", 11);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    const _r1 = i0.ɵɵreference(6);
    i0.ɵɵclassProp("a3t-datetime-inline", ctx_r4.inline)("a3t-datetime-inline-light", ctx_r4.inlineLight)("a3t-datetime-inline-small", ctx_r4.inlineCompact);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r1);
} }
function AdaptRxDatetimeComponent_ng_template_9_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r19 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 19, 20);
    i0.ɵɵlistener("click", function AdaptRxDatetimeComponent_ng_template_9_button_5_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r19); const ctx_r18 = i0.ɵɵnextContext(2); return ctx_r18.datetimeOpenHandler($event); })("keydown", function AdaptRxDatetimeComponent_ng_template_9_button_5_Template_button_keydown_0_listener($event) { i0.ɵɵrestoreView(_r19); const ctx_r20 = i0.ɵɵnextContext(2); return ctx_r20.datetimeOpenHandler($event); });
    i0.ɵɵelement(2, "i", 21);
    i0.ɵɵelementStart(3, "span", 22);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const hasErrors_r12 = i0.ɵɵnextContext().$implicit;
    const ctx_r15 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("disabled-look", ctx_r15.readonly && ctx_r15.disabledStyleForReadonlyState)("a3t-datetime--calendar-control_invalid", hasErrors_r12);
    i0.ɵɵproperty("disabled", ctx_r15.disabled);
    i0.ɵɵattribute("data-testid", ctx_r15.testID + "_calendar-control")("aria-invalid", ctx_r15.hasDangerState)("aria-errormessage", ctx_r15.ariaErrorMessage)("aria-readonly", ctx_r15.readonly)("aria-disabled", ctx_r15.disabled);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("d-icon-calendar", ctx_r15.mode === ctx_r15.PICKER_MODE.Date || ctx_r15.mode === ctx_r15.PICKER_MODE.Year || ctx_r15.mode === ctx_r15.PICKER_MODE.YearMonth || ctx_r15.mode === ctx_r15.PICKER_MODE.Month)("d-icon-calendar_clock_o", ctx_r15.mode === ctx_r15.PICKER_MODE.DateTime)("d-icon-clock_o", ctx_r15.mode === ctx_r15.PICKER_MODE.Time);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r15.mode === ctx_r15.PICKER_MODE.Time ? ctx_r15.texts.clockBtn : ctx_r15.texts.calendarBtn);
} }
function AdaptRxDatetimeComponent_ng_template_9_ng_template_6_ng_template_2_Template(rf, ctx) { }
function AdaptRxDatetimeComponent_ng_template_9_ng_template_6_span_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r27 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r27.texts.applyBtn);
} }
function AdaptRxDatetimeComponent_ng_template_9_ng_template_6_span_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r28 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r28.texts.nextBtn);
} }
const _c6 = function (a0, a1) { return [a0, a1]; };
function AdaptRxDatetimeComponent_ng_template_9_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    const _r30 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 23, 24);
    i0.ɵɵlistener("keydown", function AdaptRxDatetimeComponent_ng_template_9_ng_template_6_Template_div_keydown_0_listener($event) { i0.ɵɵrestoreView(_r30); const ctx_r29 = i0.ɵɵnextContext(2); return ctx_r29.datetimePickerContainerKeydown($event); });
    i0.ɵɵtemplate(2, AdaptRxDatetimeComponent_ng_template_9_ng_template_6_ng_template_2_Template, 0, 0, "ng-template", 11);
    i0.ɵɵelementStart(3, "div", 25);
    i0.ɵɵelementStart(4, "div");
    i0.ɵɵelementStart(5, "button", 26, 27);
    i0.ɵɵlistener("click", function AdaptRxDatetimeComponent_ng_template_9_ng_template_6_Template_button_click_5_listener() { i0.ɵɵrestoreView(_r30); const ctx_r31 = i0.ɵɵnextContext(2); return ctx_r31.pickerCloseAndCancel(); })("keydown.arrowRight", function AdaptRxDatetimeComponent_ng_template_9_ng_template_6_Template_button_keydown_arrowRight_5_listener($event) { i0.ɵɵrestoreView(_r30); const _r25 = i0.ɵɵreference(10); $event.preventDefault(); return _r25.focus(); });
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(8, "div", 28);
    i0.ɵɵelementStart(9, "button", 29, 30);
    i0.ɵɵlistener("click", function AdaptRxDatetimeComponent_ng_template_9_ng_template_6_Template_button_click_9_listener() { i0.ɵɵrestoreView(_r30); const ctx_r33 = i0.ɵɵnextContext(2); return ctx_r33.pickerClearAll(); })("keydown.arrowLeft", function AdaptRxDatetimeComponent_ng_template_9_ng_template_6_Template_button_keydown_arrowLeft_9_listener($event) { i0.ɵɵrestoreView(_r30); const _r24 = i0.ɵɵreference(6); $event.preventDefault(); return _r24.focus(); })("keydown.arrowRight", function AdaptRxDatetimeComponent_ng_template_9_ng_template_6_Template_button_keydown_arrowRight_9_listener($event) { i0.ɵɵrestoreView(_r30); const _r26 = i0.ɵɵreference(13); $event.preventDefault(); return _r26.focus(); });
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(12, "button", 31, 32);
    i0.ɵɵlistener("click", function AdaptRxDatetimeComponent_ng_template_9_ng_template_6_Template_button_click_12_listener() { i0.ɵɵrestoreView(_r30); const ctx_r36 = i0.ɵɵnextContext(2); return ctx_r36.goToNextStep(); })("keydown.arrowLeft", function AdaptRxDatetimeComponent_ng_template_9_ng_template_6_Template_button_keydown_arrowLeft_12_listener($event) { i0.ɵɵrestoreView(_r30); const _r25 = i0.ɵɵreference(10); $event.preventDefault(); return _r25.focus(); });
    i0.ɵɵtemplate(14, AdaptRxDatetimeComponent_ng_template_9_ng_template_6_span_14_Template, 2, 1, "span", 33);
    i0.ɵɵtemplate(15, AdaptRxDatetimeComponent_ng_template_9_ng_template_6_span_15_Template, 2, 1, "span", 33);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = i0.ɵɵnextContext(2);
    const _r1 = i0.ɵɵreference(6);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(9, _c6, ctx_r16.isMobile ? "a3t-datetime--calendar-width" : "a3t-datetime--calendar-min-width", ctx_r16.popupClass || ""));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", _r1);
    i0.ɵɵadvance(3);
    i0.ɵɵattribute("data-testid", ctx_r16.testID + "_cancel");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", ctx_r16.texts.cancelBtn, " ");
    i0.ɵɵadvance(2);
    i0.ɵɵattribute("data-testid", ctx_r16.testID + "_clear");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", ctx_r16.texts.clearBtn, " ");
    i0.ɵɵadvance(1);
    i0.ɵɵattribute("data-testid", ctx_r16.testID + "_apply");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r16.isLastWizardStep);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r16.isLastWizardStep);
} }
function AdaptRxDatetimeComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    const _r39 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 12, 13);
    i0.ɵɵlistener("onOpen", function AdaptRxDatetimeComponent_ng_template_9_Template_div_onOpen_0_listener() { i0.ɵɵrestoreView(_r39); const ctx_r38 = i0.ɵɵnextContext(); return ctx_r38.popupOpenChangeHandler(true); })("onClose", function AdaptRxDatetimeComponent_ng_template_9_Template_div_onClose_0_listener($event) { i0.ɵɵrestoreView(_r39); const ctx_r40 = i0.ɵɵnextContext(); return ctx_r40.popupOpenChangeHandler(false, $event); });
    i0.ɵɵelementStart(2, "div", 14);
    i0.ɵɵelementStart(3, "input", 15, 16);
    i0.ɵɵlistener("click", function AdaptRxDatetimeComponent_ng_template_9_Template_input_click_3_listener($event) { i0.ɵɵrestoreView(_r39); const ctx_r41 = i0.ɵɵnextContext(); return ctx_r41.datetimeOpenHandler($event); })("input", function AdaptRxDatetimeComponent_ng_template_9_Template_input_input_3_listener() { i0.ɵɵrestoreView(_r39); const _r14 = i0.ɵɵreference(4); const ctx_r42 = i0.ɵɵnextContext(); return ctx_r42.onInput(_r14.value); })("focus", function AdaptRxDatetimeComponent_ng_template_9_Template_input_focus_3_listener($event) { i0.ɵɵrestoreView(_r39); const ctx_r43 = i0.ɵɵnextContext(); return ctx_r43.focusHandler($event); })("blur", function AdaptRxDatetimeComponent_ng_template_9_Template_input_blur_3_listener($event) { i0.ɵɵrestoreView(_r39); const ctx_r44 = i0.ɵɵnextContext(); return ctx_r44.blurHandler($event); });
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(5, AdaptRxDatetimeComponent_ng_template_9_button_5_Template, 5, 17, "button", 17);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(6, AdaptRxDatetimeComponent_ng_template_9_ng_template_6_Template, 16, 12, "ng-template", 18);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const hasErrors_r12 = ctx.$implicit;
    const _r13 = i0.ɵɵreference(1);
    const ctx_r6 = i0.ɵɵnextContext();
    const _r0 = i0.ɵɵreference(4);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("placement", ctx_r6.placement)("holdFocusInMenu", false)("autoFocusFirst", false)("restoreFocusAfterClose", true)("appendToBody", ctx_r6.appendToBody)("autoClose", "outside")("mobileView", ctx_r6.mobileViewConfig);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("a3t-datetime--controls-wrapper-active", _r13.isOpen());
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("a3t-datetime--input-control_invalid", hasErrors_r12)("a3t-datetime--input-control_mobile", ctx_r6.isMobile && !ctx_r6.readonly)("a3t-datetime--input-control_readonly", ctx_r6.readonly && !ctx_r6.disabledStyleForReadonlyState)("form-control-danger", _r0.hasUIErrorState)("form-control-disabled-look", ctx_r6.readonly && ctx_r6.disabledStyleForReadonlyState);
    i0.ɵɵproperty("id", ctx_r6.id)("value", ctx_r6.inputValue)("required", ctx_r6.required)("disabled", ctx_r6.disabled)("readOnly", ctx_r6.readonly || ctx_r6.isMobile && !ctx_r6.disabled)("autofocus", ctx_r6.autofocus);
    i0.ɵɵattribute("autocomplete", "off")("tabindex", ctx_r6.tabIndex)("data-testid", ctx_r6.testID)("placeholder", ctx_r6.placeholder)("name", ctx_r6.name)("aria-label", ctx_r6.ariaLabel)("aria-labelledby", ctx_r6.ariaLabelledby)("aria-describedby", ctx_r6.ariaDescribedBy)("aria-required", ctx_r6.required)("aria-invalid", ctx_r6.hasDangerState)("aria-errormessage", ctx_r6.ariaErrorMessage)("aria-readonly", ctx_r6.readonly)("aria-disabled", ctx_r6.disabled);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !(ctx_r6.readonly && !ctx_r6.disabledStyleForReadonlyState));
} }
const _c7 = function (a0) { return { $implicit: a0 }; };
export class AdaptRxDatetimeComponent extends AdaptRxFormControlDirective {
    constructor(ngControl, _datetimeConfigService, _deviceDetectionService, _datetimeI18nService, 
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    _datetimeAdapter, _datetimeParserFormatter, _changeDetectorRef, _renderer, ts, localeID, _adaptRadarService, _interactionSourceOriginService, _elem) {
        super(ngControl, ts, _adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptRxDatetime, _changeDetectorRef);
        this._datetimeI18nService = _datetimeI18nService;
        this._datetimeAdapter = _datetimeAdapter;
        this._datetimeParserFormatter = _datetimeParserFormatter;
        this._renderer = _renderer;
        this.ts = ts;
        this.localeID = localeID;
        this._interactionSourceOriginService = _interactionSourceOriginService;
        this.controlName = 'datetime';
        this.analyticsComponentName = AdaptRadarAngularCustomEventName;
        /**
         * Inline mode
         * @docs-default false
         */
        this.inline = false;
        /**
         * The preferred placement of the typeahead
         * @docs-default auto
         */
        this.placement = 'auto';
        /**
         * Attach popup to the body
         * @docs-default false
         */
        this.appendToBody = false;
        /**
         * Light theme for inline mode
         * @docs-default false
         */
        this.inlineLight = true;
        /**
         * Small size for inline mode
         * @docs-default false
         */
        this.inlineCompact = false;
        /**
         * Trigger for disable picker's wizard
         * @docs-default false
         */
        this.disableWizard = false;
        /**
         * Picker's mode
         * @docs-default RxDatetimePickerMode.Date
         */
        this.mode = RxDatetimePickerMode.Date;
        /**
         * Enables seconds for time
         * @docs-default false
         */
        this.hasSeconds = false;
        /**
         * Use disable styles for readonly state
         * @docs-default false
         * @since v10.5.0
         */
        this.disabledStyleForReadonlyState = false;
        /* eslint-disable @angular-eslint/no-output-on-prefix */
        /**
         * An event fired when the popup is opened or closed
         */
        this.onPopupOpenChange = new EventEmitter();
        /**
         * An event fired when model change
         */
        this.onDatetimeChange = new EventEmitter();
        this.PICKER_MODE = RxDatetimePickerMode;
        this.inputValue = '';
        this.isMobile = false;
        this.isLastWizardStep = false;
        this.mobileViewConfig = {
            isPicker: true
        };
        this._openWithKeyboard = false;
        this.isMobile = _deviceDetectionService.isMobile();
        this._texts = this._defaultTexts = _datetimeConfigService.texts;
    }
    /**
     * Enables/disables 12-hours time format.
     * By default time format calculates automatically
     * @docs-default
     */
    set use12HoursTime(value) {
        this._use12HoursTime = value;
    }
    get use12HoursTime() {
        return !isNil(this._use12HoursTime) ? this._use12HoursTime : this._datetimeI18nService.getTimeFormat(this.localeID) === 12;
    }
    /**
     * Calendar first day of week.
     * By default calculates automatically
     * @docs-default
     */
    set firstDayOfWeek(value) {
        this._firstDayOfWeek = value;
    }
    get firstDayOfWeek() {
        return !isNil(this._firstDayOfWeek) ? this._firstDayOfWeek : this._datetimeI18nService.getFirstDayOfWeek(this.localeID);
    }
    /**
     * Datetime texts
     * @docs-default
     */
    get texts() {
        return this._texts;
    }
    set texts(value) {
        this._texts = Object.assign(Object.assign({}, this._defaultTexts), value);
    }
    get controlValue() {
        return this._datetimeAdapter.fromModel(this._controlValue);
    }
    set controlValue(value) {
        const nextValue = isFunction(this.defaultDatetime) ?
            getStructWithDefaults(value, this.defaultDatetime(this.mode, this.hasSeconds)) : value;
        this._controlValue = this._datetimeAdapter.toModel(nextValue);
        this.pickerActiveDatetime = this.controlValue;
    }
    /**
     * Check if the control has UI error state
     */
    get hasDangerState() {
        return this.adaptRxFeedbackRef.hasUIErrorState;
    }
    ngOnInit() {
        super.ngOnInit();
        this._updateInputValue();
    }
    datetimeOpenHandler(event) {
        if (!this.nonInteractive && !this.popup.isOpen()) {
            const interactionSource = getInteractionSource(event);
            const keyCode = event ? getEventKeyCode(event) : null;
            this._targetOpen = event ? event.target : null;
            if (this.isMobile && this._targetOpen === this.inputControlRef.nativeElement) {
                this._onTouched();
            }
            if (interactionSource === 'keyboard' && keyCode !== ENTER && keyCode !== SPACE) {
                return;
            }
            this._openWithKeyboard = interactionSource === 'keyboard';
            this.popup.open(event);
        }
    }
    onInput(value) {
        this.inputValue = value;
        const parsedDatetime = this._datetimeParserFormatter.parse(value, this.mode, this.hasSeconds, this.use12HoursTime, this.localeID, this.inputFormat);
        if (!parsedDatetime) {
            this.controlValue = null;
        }
        else if (parsedDatetime.parseError) {
            this.controlValue = parsedDatetime;
        }
        else {
            const propsToPick = getDatetimeModelPropsByMode(this.mode, this.hasSeconds);
            this.controlValue = Object.assign({
                year: null,
                month: null,
                date: null,
                hours: null,
                minutes: null,
                seconds: null
            }, pick(parsedDatetime, propsToPick));
        }
        if (this.popup.isOpen()) {
            this._checkWizardLastStep();
        }
        this._propagateChange();
    }
    blurHandler(event) {
        super.blurHandler(event);
        if (!this.popup.isOpen()) {
            this._updateInputValue();
            this._onTouched();
        }
    }
    focusHandler(event) {
        super.focusHandler(event);
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxDatetime, {
            GroupName: this.adaptRadarGroupName,
            EventType: AdaptRadarAngularCustomEventType.Focus,
            Label: this.label,
            Required: this.required,
            ReadOnly: this.readonly,
            Disabled: this.disabled,
            Type: this.mode,
            Range: false,
            Inline: this.inline,
            InputMethod: this._interactionSourceOriginService.getLastInteractionSourceOrigin()
            /*DynamicEntry: boolean;*/
        });
    }
    /**
     * Popup toggle handler
     */
    popupOpenChangeHandler(isOpen, closeReason) {
        this.onPopupOpenChange.emit(isOpen);
        if (isOpen) {
            this.defaultInitialDatetime = getDateParts(new Date());
            this.popup.popupAnimationDone
                .pipe(takeUntil(this.destroy$), take(1))
                .subscribe(() => {
                this._popupFocusableElements = getFocusableElements(this.datetimePickerContainer.nativeElement);
                if (this._openWithKeyboard) {
                    this._popupFocusableElements[0].focus();
                }
            });
            this._backupControlValue = this._controlValue;
        }
        else {
            if (document.activeElement !== this.inputControlRef.nativeElement) {
                this._updateInputValue();
            }
            this._onTouched();
            if (closeReason === AdaptDropdownCloseReason.Esc && this._targetOpen) {
                this._targetOpen.focus();
            }
        }
    }
    datetimePickerContainerKeydown(event) {
        if (getEventKeyCode(event) === TAB) {
            if (event.shiftKey) {
                if (event.target === this._popupFocusableElements[0]) {
                    event.preventDefault();
                    this.popup.close();
                }
            }
            else {
                if (event.target === this._popupFocusableElements[this._popupFocusableElements.length - 1]) {
                    event.preventDefault();
                    this.popup.close();
                }
            }
        }
    }
    pickerCloseAndCancel() {
        this._controlValue = this._backupControlValue;
        this.pickerActiveDatetime = this.controlValue;
        this._propagateChange();
        this._updateInputValue();
        this.popup.close();
        this.inputControlRef.nativeElement.focus();
    }
    pickerClearAll() {
        this.controlValue = null;
        this.pickerActiveDatetime = null;
        this._propagateChange();
        this._updateInputValue();
        this._checkWizardLastStep();
    }
    goToNextStep() {
        if (this.isLastWizardStep) {
            this.popup.close();
            this.inputControlRef.nativeElement.focus();
        }
        else {
            this.datetimePickerComponent.publicApi.nextStep();
            this._checkWizardLastStep();
        }
    }
    onPickerValueChange(newValue) {
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxDatetime, {
            GroupName: this.adaptRadarGroupName,
            EventType: AdaptRadarAngularCustomEventType.ValueChanged,
            Label: this.label,
            Required: this.required,
            ReadOnly: this.readonly,
            Disabled: this.disabled,
            Type: this.mode,
            Range: false,
            Inline: this.inline,
            /*InputMethod: getInteractionSourceOrigin(event, this.isMobile)*/
            /*DynamicEntry: boolean;*/
        });
        this.controlValue = newValue;
        this.onDatetimeChange.emit(this.controlValue);
        this._propagateChange();
        this._updateInputValue();
        this._checkWizardLastStep();
        if (this.inline) {
            this._onTouched();
        }
    }
    onPickerStateChange() {
        if (!this.inline) {
            this._checkWizardLastStep();
        }
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    writeValue(value) {
        var _a;
        this.controlValue = this._datetimeAdapter.fromModel(value);
        this._updateInputValue();
        if ((_a = this.popup) === null || _a === void 0 ? void 0 : _a.isOpen()) {
            this._checkWizardLastStep();
        }
        SafeCdr.detectChanges(this._changeDetectorRef);
    }
    _focusNativeElement() {
        if (!this.inline) {
            this.inputControlRef.nativeElement.focus();
        }
    }
    _isModelFull() {
        return checkIfPropsDefined(this.controlValue, getDatetimeModelPropsByMode(this.mode, this.hasSeconds));
    }
    _updateInputValue() {
        if (this._isModelFull()) {
            this.inputValue =
                this._datetimeParserFormatter.format(this.controlValue, this.mode, this.hasSeconds, this.use12HoursTime, this.localeID, this.inputFormat);
        }
        if (!this.controlValue) {
            this.inputValue = '';
        }
    }
    _checkWizardLastStep() {
        var _a;
        // In PROD mode this.datetimePickerComponent is undefined
        // Add extra change detection to prevent fix it
        // https://github.bmc.com/bmc-ux/adapt-angular/issues/6721
        SafeCdr.detectChanges(this._changeDetectorRef);
        const modeWithoutWizard = this.mode === RxDatetimePickerMode.Date ||
            this.mode === RxDatetimePickerMode.Year ||
            this.mode === RxDatetimePickerMode.Month;
        this.isLastWizardStep = this.disableWizard || modeWithoutWizard || (this._isModelFull() && ((_a = this.datetimePickerComponent) === null || _a === void 0 ? void 0 : _a.publicApi.isLastStep()));
    }
    _propagateChange() {
        this._onChange(this._controlValue);
    }
}
AdaptRxDatetimeComponent.ɵfac = function AdaptRxDatetimeComponent_Factory(t) { return new (t || AdaptRxDatetimeComponent)(i0.ɵɵdirectiveInject(i1.NgControl, 10), i0.ɵɵdirectiveInject(i2.AdaptRxDatetimeConfigService), i0.ɵɵdirectiveInject(i3.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i4.AdaptRxDatetimeI18nService), i0.ɵɵdirectiveInject(i5.AdaptRxDatetimeAdapter), i0.ɵɵdirectiveInject(i6.AdaptRxDatetimeParserFormatter), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i7.AdaptTranslateService), i0.ɵɵdirectiveInject(LOCALE_ID), i0.ɵɵdirectiveInject(i8.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i9.AdaptInteractionSourceService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptRxDatetimeComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptRxDatetimeComponent, selectors: [["adapt-rx-datetime"]], viewQuery: function AdaptRxDatetimeComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
        i0.ɵɵviewQuery(_c1, 5);
        i0.ɵɵviewQuery(_c2, 7);
        i0.ɵɵviewQuery(_c3, 5);
        i0.ɵɵviewQuery(_c4, 5);
        i0.ɵɵviewQuery(_c5, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputControlRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.openPopupRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.adaptRxFeedbackRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popup = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.datetimePickerComponent = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.datetimePickerContainer = _t.first);
    } }, inputs: { placeholder: "placeholder", inline: "inline", placement: "placement", appendToBody: "appendToBody", inlineLight: "inlineLight", inlineCompact: "inlineCompact", dayFilter: "dayFilter", disableWizard: "disableWizard", mode: "mode", hasSeconds: "hasSeconds", use12HoursTime: "use12HoursTime", firstDayOfWeek: "firstDayOfWeek", initialDatetime: "initialDatetime", defaultDatetime: "defaultDatetime", disabledStyleForReadonlyState: "disabledStyleForReadonlyState", popupClass: "popupClass", texts: "texts", inputFormat: "inputFormat" }, outputs: { onPopupOpenChange: "onPopupOpenChange", onDatetimeChange: "onDatetimeChange" }, features: [i0.ɵɵInheritDefinitionFeature], decls: 11, vars: 19, consts: [[3, "for", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "ariaErrorMessage", "errors", "warningMessage", "controlTouched", "messageAppeared"], ["adaptRxFeedbackRef", ""], ["dateTimePickerTemplate", ""], ["dateTimeInlineTemplate", ""], ["dateTimeDropdownTemplate", ""], [3, "mode", "expandedControlsStyle", "dayFilter", "hasSeconds", "use12HoursTime", "firstDayOfWeek", "initialDatetime", "activeDatetime", "disabled", "readonly", "texts", "testID", "pickerValueChange", "pickerStateChange"], ["adaptRxDatetimePickerComponent", ""], [3, "errors", "ariaErrorMessage", "warningMessage", "controlTouched", "alertFeedbackStyle", "alertFeedbackTruncation"], [1, "a3t-datetime--calendar-min-width"], [3, "ngTemplateOutlet"], ["adaptDropdown", "", 3, "adaptRadarDisableEventSending", "placement", "holdFocusInMenu", "autoFocusFirst", "restoreFocusAfterClose", "appendToBody", "autoClose", "mobileView", "onOpen", "onClose"], ["adaptDropdownDirective", "adaptDropdown"], ["adaptDropdownAnchor", "", 1, "input-group", "a3t-datetime--controls-wrapper"], ["type", "text", 1, "form-control", "rx-form-control", "a3t-datetime--input-control", 3, "id", "value", "required", "disabled", "readOnly", "autofocus", "click", "input", "focus", "blur"], ["inputControlRef", ""], ["class", "a3t-datetime--calendar-control input-group-append", "type", "button", "role", "button", 3, "disabled", "disabled-look", "a3t-datetime--calendar-control_invalid", "click", "keydown", 4, "ngIf"], ["adaptDropdownMenuTemplate", ""], ["type", "button", "role", "button", 1, "a3t-datetime--calendar-control", "input-group-append", 3, "disabled", "click", "keydown"], ["openPopupRef", ""], [1, "a3t-datetime--calendar-control__icon"], [1, "sr-only"], [1, "dropdown-menu", "p-0", 3, "ngClass", "keydown"], ["datetimePickerContainer", ""], [1, "a3t-datetime--footer"], ["type", "button", 1, "btn", "btn-sm", "btn-link", 3, "click", "keydown.arrowRight"], ["closeAndCancelButton", ""], [1, "d-flex", "justify-content-center"], ["type", "button", 1, "btn", "btn-sm", "btn-secondary", "m-end-1", 3, "click", "keydown.arrowLeft", "keydown.arrowRight"], ["clearButton", ""], ["type", "button", 1, "btn", "btn-sm", "btn-primary", 3, "click", "keydown.arrowLeft"], ["wizardNextButton", ""], [4, "ngIf"]], template: function AdaptRxDatetimeComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div");
        i0.ɵɵelement(1, "adapt-rx-control-label", 0);
        i0.ɵɵelementContainer(2, 1);
        i0.ɵɵelementStart(3, "adapt-rx-feedback", 2, 3);
        i0.ɵɵlistener("messageAppeared", function AdaptRxDatetimeComponent_Template_adapt_rx_feedback_messageAppeared_3_listener($event) { return ctx.handleMessageAppeared($event, ctx.analyticsComponentName.AdaptRxDatetime); });
        i0.ɵɵelementEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵtemplate(5, AdaptRxDatetimeComponent_ng_template_5_Template, 3, 19, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(7, AdaptRxDatetimeComponent_ng_template_7_Template, 2, 7, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(9, AdaptRxDatetimeComponent_ng_template_9_Template, 7, 40, "ng-template", null, 6, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        const _r0 = i0.ɵɵreference(4);
        const _r3 = i0.ɵɵreference(8);
        const _r5 = i0.ɵɵreference(10);
        i0.ɵɵclassProp("has-danger", _r0.hasUIErrorState)("has-warning", ctx.warningMessage);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("for", ctx.id)("label", ctx.label)("subLabel", ctx.subLabel)("requiredLabel", ctx.requiredLabel)("showRequiredLabel", ctx.required)("tooltip", ctx.tooltip)("testID", ctx.testID);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngTemplateOutlet", ctx.inline ? _r3 : _r5)("ngTemplateOutletContext", i0.ɵɵpureFunction1(17, _c7, _r0.hasUIErrorState));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ariaErrorMessage", ctx.ariaErrorMessage)("errors", ctx.ngControl.errors)("warningMessage", ctx.warningMessage)("controlTouched", ctx.ngControl.touched);
    } }, directives: [i10.AdaptRxControlLabelComponent, i11.NgTemplateOutlet, i12.AdaptRxFeedbackComponent, i13.AdaptRxDatetimePickerComponent, i14.AdaptDropdownDirective, i14.AdaptDropdownAnchorDirective, i11.NgIf, i14.AdaptDropdownMenuTemplateDirective, i11.NgClass], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxDatetimeComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-rx-datetime',
                templateUrl: './adapt-rx-datetime.component.html',
                preserveWhitespaces: false
            }]
    }], function () { return [{ type: i1.NgControl, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }, { type: i2.AdaptRxDatetimeConfigService }, { type: i3.AdaptDeviceDetectionService }, { type: i4.AdaptRxDatetimeI18nService }, { type: i5.AdaptRxDatetimeAdapter }, { type: i6.AdaptRxDatetimeParserFormatter }, { type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }, { type: i7.AdaptTranslateService }, { type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }, { type: i8.AdaptRadarAngularService }, { type: i9.AdaptInteractionSourceService }, { type: i0.ElementRef }]; }, { placeholder: [{
            type: Input
        }], inline: [{
            type: Input
        }], placement: [{
            type: Input
        }], appendToBody: [{
            type: Input
        }], inlineLight: [{
            type: Input
        }], inlineCompact: [{
            type: Input
        }], dayFilter: [{
            type: Input
        }], disableWizard: [{
            type: Input
        }], mode: [{
            type: Input
        }], hasSeconds: [{
            type: Input
        }], use12HoursTime: [{
            type: Input
        }], firstDayOfWeek: [{
            type: Input
        }], initialDatetime: [{
            type: Input
        }], defaultDatetime: [{
            type: Input
        }], disabledStyleForReadonlyState: [{
            type: Input
        }], popupClass: [{
            type: Input
        }], texts: [{
            type: Input
        }], inputFormat: [{
            type: Input
        }], onPopupOpenChange: [{
            type: Output
        }], onDatetimeChange: [{
            type: Output
        }], inputControlRef: [{
            type: ViewChild,
            args: ['inputControlRef', { static: false }]
        }], openPopupRef: [{
            type: ViewChild,
            args: ['openPopupRef', { static: false }]
        }], adaptRxFeedbackRef: [{
            type: ViewChild,
            args: ['adaptRxFeedbackRef', { static: true }]
        }], popup: [{
            type: ViewChild,
            args: ['adaptDropdownDirective', { static: false }]
        }], datetimePickerComponent: [{
            type: ViewChild,
            args: ['adaptRxDatetimePickerComponent', { static: false }]
        }], datetimePickerContainer: [{
            type: ViewChild,
            args: ['datetimePickerContainer', { static: false }]
        }] }); })();
//# sourceMappingURL=adapt-rx-datetime.component.js.map