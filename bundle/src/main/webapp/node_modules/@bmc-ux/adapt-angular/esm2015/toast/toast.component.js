import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, NgZone, Optional, Output, Renderer2, ViewChild, ViewEncapsulation } from '@angular/core';
import { NavigationStart, Router } from '@angular/router';
import { animateChild, query, transition, trigger } from '@angular/animations';
import { Toast } from 'primeng/toast';
import { ReplaySubject } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import { isArray } from 'lodash-es';
import { AdaptTranslateService } from '../common/i18n/index';
import { AdaptMessageService } from './toast-message.service';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "./toast-message.service";
import * as i2 from "../common/i18n/index";
import * as i3 from "@angular/router";
import * as i4 from "../common/radar/adapt-radar";
import * as i5 from "@angular/common";
import * as i6 from "./toast-item.component";
const _c0 = ["container"];
function AdaptToastComponent_adapt_toast_item_3_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-toast-item", 2);
    i0.ɵɵlistener("@toastAnimation.start", function AdaptToastComponent_adapt_toast_item_3_Template_adapt_toast_item_animation_toastAnimation_start_0_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r4 = i0.ɵɵnextContext(); return ctx_r4.onAnimationStart($event); })("onClose", function AdaptToastComponent_adapt_toast_item_3_Template_adapt_toast_item_onClose_0_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r6 = i0.ɵɵnextContext(); return ctx_r6.onMessageClose($event); })("linkClick", function AdaptToastComponent_adapt_toast_item_3_Template_adapt_toast_item_linkClick_0_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r7 = i0.ɵɵnextContext(); return ctx_r7.onLinkClick($event); })("onAnimationEnd", function AdaptToastComponent_adapt_toast_item_3_Template_adapt_toast_item_onAnimationEnd_0_listener($event) { i0.ɵɵrestoreView(_r5); const ctx_r8 = i0.ɵɵnextContext(); return ctx_r8.animationEnd($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const msg_r2 = ctx.$implicit;
    const i_r3 = ctx.index;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("message", msg_r2)("index", i_r3)("zIndex", ctx_r1.zIndex)("placement", ctx_r1.placement)("link", ctx_r1.link)("ariaLabel", ctx_r1.ariaLabel)("@toastAnimation", undefined);
    i0.ɵɵattribute("data-testid", ctx_r1.testID + "_msg_" + i_r3);
} }
let nextUniqueId = 0;
export class AdaptToastComponent extends Toast {
    constructor(adaptMessageService, _renderer, _el, _ngZone, _cd, ts, _router, _adaptRadarService) {
        super(adaptMessageService, _cd);
        this.adaptMessageService = adaptMessageService;
        this._renderer = _renderer;
        this._el = _el;
        this._ngZone = _ngZone;
        this._cd = _cd;
        this.ts = ts;
        this._router = _router;
        this._adaptRadarService = _adaptRadarService;
        this.isMobile = false;
        /**
         * z-index value for Toast component
         */
        this.zIndex = 100;
        /**
         * An unique id for toast
         */
        this._uniqueId = `adapt-toast-${++nextUniqueId}`;
        /**
         * When specified, the toast will be attached to the body.
         * @docs-default false
         */
        this.appendToBody = false;
        this.ariaLabelledby = null;
        this.tabindex = -1;
        // to align with other components:
        this.testID = this._uniqueId;
        /**
         * A unique id for the toast. If none is supplied, it will be auto-generated.
         * @docs-default adapt-toast-${++nextUniqueId}
         */
        this.id = this._uniqueId;
        this.adaptRadarDisableEventSending = false;
        /**
         * Output which handle link click
         * Changed type from `EventEmitter<AdaptMessage>`
         * @since v10.14.0
         */
        this.linkClick = new EventEmitter();
        /* eslint-disable @angular-eslint/no-output-on-prefix */
        /**
         * Event when component animation has ended after component closing
         * Changed type from `EventEmitter<AdaptMessage>`
         * @since v10.14.0
         */
        this.onAnimationEnd = new EventEmitter();
        /* eslint-enable @angular-eslint/no-output-on-prefix */
        /**
         * by default the placement is 'top-right'
         */
        this._placement = 'top-right';
        this._destroyed$ = new ReplaySubject(1);
        this.ariaLabel = ts.getCurrentLanguage()['adapt.toast.close'];
        this.ellipsis = ts.getCurrentLanguage()['adapt.common.ellipsis'];
    }
    get inputId() {
        return `${this.id || this._uniqueId}-unique`;
    }
    /**
     * Define the placement of toast component
     * @returns string
     * @docs-default 'top-right'
     */
    get placement() {
        return this._placement;
    }
    set placement(value) {
        this._placement = value;
    }
    ngOnInit() {
        this.messageSubscription = this.adaptMessageService.messageObserver.subscribe(messages => {
            if (messages) {
                const _messages = (isArray(messages) ? messages : [messages]);
                _messages.forEach(message => {
                    if (this.link && !message.link) {
                        message.link = this.link;
                    }
                    if (this.canAdd(message)) {
                        this.add([message]);
                    }
                });
            }
        });
        this.clearSubscription = this.adaptMessageService.clearObserver.subscribe(key => {
            if (key) {
                if (this.key === key) {
                    this.messages = null;
                }
            }
            else {
                this.messages = null;
            }
        });
        this._ngZone.onStable
            .pipe(takeUntil(this._destroyed$), take(1))
            .subscribe(() => this._attachToBody());
        if (this._router && this.appendToBody) {
            this._router.events
                .pipe(takeUntil(this._destroyed$))
                .subscribe((e) => {
                if (e instanceof NavigationStart) {
                    this._detachFromBody();
                }
            });
        }
    }
    ngAfterViewInit() {
        this._elementIntersectObserver = this._adaptRadarService.subscribeOnElementIntersect(this.adaptRadarDisableEventSending, this._el, AdaptRadarAngularCustomEventName.AdaptToast);
    }
    ngOnDestroy() {
        if (this._elementIntersectObserver) {
            this._elementIntersectObserver.disconnect();
            this._elementIntersectObserver = null;
        }
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
    onLinkClick(message) {
        this.linkClick.next(message);
    }
    animationEnd(message) {
        this.onAnimationEnd.emit(message);
    }
    _attachToBody() {
        if (this.appendToBody && this._el) {
            this._renderer.appendChild(document.body, this._el.nativeElement);
        }
    }
    _detachFromBody() {
        if (this._el) {
            this._renderer.removeChild(document.body, this._el.nativeElement);
        }
    }
}
AdaptToastComponent.ɵfac = function AdaptToastComponent_Factory(t) { return new (t || AdaptToastComponent)(i0.ɵɵdirectiveInject(i1.AdaptMessageService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.AdaptTranslateService), i0.ɵɵdirectiveInject(i3.Router, 8), i0.ɵɵdirectiveInject(i4.AdaptRadarAngularService)); };
AdaptToastComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptToastComponent, selectors: [["adapt-toast"]], viewQuery: function AdaptToastComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerViewChild = _t.first);
    } }, hostVars: 12, hostBindings: function AdaptToastComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵhostProperty("id", ctx.inputId);
        i0.ɵɵattribute("tabindex", ctx.tabindex)("role", "alert")("aria-labelledby", ctx.ariaLabelledby);
        i0.ɵɵclassProp("a-toast-wrapper", true)("is-top-right", ctx.placement === "top-right")("is-top-left", ctx.placement === "top-left")("is-top-center", ctx.placement === "top-center");
    } }, inputs: { link: "link", appendToBody: "appendToBody", ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], tabindex: "tabindex", testID: "testID", id: "id", placement: "placement", adaptRadarDisableEventSending: "adaptRadarDisableEventSending" }, outputs: { linkClick: "linkClick", onAnimationEnd: "onAnimationEnd" }, features: [i0.ɵɵInheritDefinitionFeature], decls: 6, vars: 1, consts: [["container", ""], [3, "message", "index", "zIndex", "placement", "link", "ariaLabel", "onClose", "linkClick", "onAnimationEnd", 4, "ngFor", "ngForOf"], [3, "message", "index", "zIndex", "placement", "link", "ariaLabel", "onClose", "linkClick", "onAnimationEnd"]], template: function AdaptToastComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", null, 0);
        i0.ɵɵtext(2, "\n  ");
        i0.ɵɵtemplate(3, AdaptToastComponent_adapt_toast_item_3_Template, 1, 8, "adapt-toast-item", 1);
        i0.ɵɵtext(4, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(5, "\n");
    } if (rf & 2) {
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", ctx.messages);
    } }, directives: [i5.NgForOf, i6.AdaptToastItemComponent], styles: ["\n    .a-toast {\n      transition: none !important;\n    }\n\n    .a-toast__summary {\n      font-size: .9375rem;\n      margin-bottom: 10px;\n      font-weight: 600;\n    }\n  "], encapsulation: 2, data: { animation: [
            trigger('toastAnimation', [
                transition(':enter, :leave', [
                    query('@*', animateChild())
                ])
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptToastComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-toast',
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[class.a-toast-wrapper]': 'true',
                    '[class.is-top-right]': 'placement === "top-right"',
                    '[class.is-top-left]': 'placement === "top-left"',
                    '[class.is-top-center]': 'placement === "top-center"',
                    '[attr.tabindex]': 'tabindex',
                    '[attr.role]': '"alert"',
                    '[attr.aria-labelledby]': 'ariaLabelledby',
                    '[id]': 'inputId'
                },
                styles: [`
    .a-toast {
      transition: none !important;
    }

    .a-toast__summary {
      font-size: .9375rem;
      margin-bottom: 10px;
      font-weight: 600;
    }
  `],
                templateUrl: './toast.component.html',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    trigger('toastAnimation', [
                        transition(':enter, :leave', [
                            query('@*', animateChild())
                        ])
                    ])
                ]
            }]
    }], function () { return [{ type: i1.AdaptMessageService }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i2.AdaptTranslateService }, { type: i3.Router, decorators: [{
                type: Optional
            }] }, { type: i4.AdaptRadarAngularService }]; }, { containerViewChild: [{
            type: ViewChild,
            args: ['container', { static: false }]
        }], link: [{
            type: Input
        }], appendToBody: [{
            type: Input
        }], ariaLabel: [{
            type: Input,
            args: ['aria-label']
        }], ariaLabelledby: [{
            type: Input,
            args: ['aria-labelledby']
        }], tabindex: [{
            type: Input
        }], testID: [{
            type: Input
        }], id: [{
            type: Input
        }], placement: [{
            type: Input
        }], adaptRadarDisableEventSending: [{
            type: Input
        }], linkClick: [{
            type: Output
        }], onAnimationEnd: [{
            type: Output
        }] }); })();
//# sourceMappingURL=toast.component.js.map