import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, NgZone, Output, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';
import { animate, style, transition, trigger, useAnimation } from '@angular/animations';
import { take, takeUntil, throttleTime } from 'rxjs/operators';
import { asyncScheduler, noop, ReplaySubject, Subject } from 'rxjs';
import { ANIMATION_DURATION, ANIMATION_NAME, ANIMATION_TIMING_FUNCTION } from '../common/animation';
import { formatString, toBoolean, toNumber } from '../common/utilities';
import { ResizeService } from '../common/resize/resize.service';
import { AdaptTranslateService } from '../common/i18n/index';
import { AdaptModalService } from '../modal/modal.service';
import { SafeCdr } from '../common/safe-cdr';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "../modal/modal.service";
import * as i2 from "../common/resize/resize.service";
import * as i3 from "../common/i18n/index";
import * as i4 from "../common/radar/adapt-radar";
import * as i5 from "@angular/common";
import * as i6 from "../common/truncated.pipe";
const _c0 = ["container"];
const _c1 = ["alert"];
const _c2 = ["wrapper"];
function AdaptAlertAnimatedComponent_div_0_span_17_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 16);
} }
function AdaptAlertAnimatedComponent_div_0_span_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 17);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r7.alertCountText);
} }
function AdaptAlertAnimatedComponent_div_0_span_21_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 16);
} }
const _c3 = function (a0) { return { "text-warning": a0 }; };
function AdaptAlertAnimatedComponent_div_0_a_27_Template(rf, ctx) { if (rf & 1) {
    const _r19 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 18);
    i0.ɵɵlistener("click", function AdaptAlertAnimatedComponent_div_0_a_27_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r19); const ctx_r18 = i0.ɵɵnextContext(2); return ctx_r18.showMore(ctx_r18.config[ctx_r18.selectedIndex]); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(2, _c3, ctx_r9.config[ctx_r9.selectedIndex].type === "warning"));
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n          ", ctx_r9.config[ctx_r9.selectedIndex].additional, "\n        ");
} }
function AdaptAlertAnimatedComponent_div_0_29_ng_template_0_Template(rf, ctx) { }
function AdaptAlertAnimatedComponent_div_0_29_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, AdaptAlertAnimatedComponent_div_0_29_ng_template_0_Template, 0, 0, "ng-template");
} }
function AdaptAlertAnimatedComponent_div_0_ng_template_31_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n          ");
    i0.ɵɵelementContainer(1, 19);
    i0.ɵɵtext(2, "\n        ");
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r12.config[ctx_r12.selectedIndex].content);
} }
function AdaptAlertAnimatedComponent_div_0_ng_template_34_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0);
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext(2);
    i0.ɵɵtextInterpolate(ctx_r14.config[ctx_r14.selectedIndex].content);
} }
function AdaptAlertAnimatedComponent_div_0_ng_container_40_Template(rf, ctx) { if (rf & 1) {
    const _r22 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "button", 20);
    i0.ɵɵlistener("click", function AdaptAlertAnimatedComponent_div_0_ng_container_40_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r22); const ctx_r21 = i0.ɵɵnextContext(2); return ctx_r21.closeAlert(ctx_r21.selectedIndex); });
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n    ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r15 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("is-animated-left", ctx_r15.isDirectionLeft);
    i0.ɵɵattribute("aria-label", ctx_r15.texts.closeButton);
} }
function AdaptAlertAnimatedComponent_div_0_div_43_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0, 19);
} if (rf & 2) {
    i0.ɵɵnextContext(3);
    const _r1 = i0.ɵɵreference(3);
    i0.ɵɵproperty("ngTemplateOutlet", _r1);
} }
function AdaptAlertAnimatedComponent_div_0_div_43_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 21);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptAlertAnimatedComponent_div_0_div_43_ng_container_2_Template, 1, 1, "ng-container", 22);
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = i0.ɵɵnextContext(2);
    i0.ɵɵstyleProp("display", ctx_r16.config.length > 1 ? "flex" : "none");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r16.config.length > 1);
} }
function AdaptAlertAnimatedComponent_div_0_div_47_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 24);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementContainer(2, 19);
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext(3);
    const _r1 = i0.ɵɵreference(3);
    i0.ɵɵproperty("@alertAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", _r1);
} }
function AdaptAlertAnimatedComponent_div_0_div_47_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵtemplate(2, AdaptAlertAnimatedComponent_div_0_div_47_div_2_Template, 4, 2, "div", 23);
    i0.ɵɵtext(3, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r17 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r17.config.length > 1);
} }
const _c4 = function (a0, a1, a2, a3) { return { "is-warning alert-warning": a0, "is-info alert-info": a1, "is-success alert-success": a2, "is-danger alert-danger": a3 }; };
const _c5 = function (a0, a1, a2, a3, a4, a5, a6) { return { "alert-warning": a0, "alert-info": a1, "alert-success": a2, "alert-danger": a3, "is-controls": a4, "is-animated-left": a5, "container": a6 }; };
function AdaptAlertAnimatedComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 2, 3);
    i0.ɵɵtext(2, "\n\n  ");
    i0.ɵɵelementStart(3, "div", 4, 5);
    i0.ɵɵtext(5, "\n\n    ");
    i0.ɵɵtext(6, "\n    ");
    i0.ɵɵelementStart(7, "div", 6, 7);
    i0.ɵɵtext(9, "\n      ");
    i0.ɵɵelement(10, "div");
    i0.ɵɵtext(11, "\n      ");
    i0.ɵɵelementStart(12, "div");
    i0.ɵɵtext(13, "\n        ");
    i0.ɵɵelementStart(14, "strong");
    i0.ɵɵtext(15);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(16, "\n        ");
    i0.ɵɵtemplate(17, AdaptAlertAnimatedComponent_div_0_span_17_Template, 1, 0, "span", 8);
    i0.ɵɵtext(18, "\n        ");
    i0.ɵɵtemplate(19, AdaptAlertAnimatedComponent_div_0_span_19_Template, 2, 1, "span", 9);
    i0.ɵɵtext(20, "\n        ");
    i0.ɵɵtemplate(21, AdaptAlertAnimatedComponent_div_0_span_21_Template, 1, 0, "span", 8);
    i0.ɵɵtext(22, "\n        ");
    i0.ɵɵelementStart(23, "span");
    i0.ɵɵtext(24);
    i0.ɵɵpipe(25, "truncate");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(26, "\n        ");
    i0.ɵɵtemplate(27, AdaptAlertAnimatedComponent_div_0_a_27_Template, 2, 4, "a", 10);
    i0.ɵɵtext(28, "\n        ");
    i0.ɵɵtemplate(29, AdaptAlertAnimatedComponent_div_0_29_Template, 1, 0, undefined, 11);
    i0.ɵɵtext(30, "\n\n        ");
    i0.ɵɵtemplate(31, AdaptAlertAnimatedComponent_div_0_ng_template_31_Template, 3, 1, "ng-template", null, 12, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(33, "\n        ");
    i0.ɵɵtemplate(34, AdaptAlertAnimatedComponent_div_0_ng_template_34_Template, 1, 1, "ng-template", null, 13, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(36, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(37, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(38, "\n\n    ");
    i0.ɵɵtext(39, "\n    ");
    i0.ɵɵtemplate(40, AdaptAlertAnimatedComponent_div_0_ng_container_40_Template, 5, 3, "ng-container", 14);
    i0.ɵɵtext(41, "\n\n    ");
    i0.ɵɵtext(42, "\n    ");
    i0.ɵɵtemplate(43, AdaptAlertAnimatedComponent_div_0_div_43_Template, 4, 3, "div", 15);
    i0.ɵɵtext(44, "\n\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(45, "\n\n  ");
    i0.ɵɵtext(46, "\n  ");
    i0.ɵɵtemplate(47, AdaptAlertAnimatedComponent_div_0_div_47_Template, 4, 1, "div", 14);
    i0.ɵɵtext(48, "\n\n");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r11 = i0.ɵɵreference(32);
    const _r13 = i0.ɵɵreference(35);
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("@alertAnimation", undefined)("ngClass", i0.ɵɵpureFunction4(24, _c4, ctx_r0.config[ctx_r0.selectedIndex].type === "warning", ctx_r0.config[ctx_r0.selectedIndex].type === "info", ctx_r0.config[ctx_r0.selectedIndex].type === "success", ctx_r0.config[ctx_r0.selectedIndex].type === "danger"));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction7(29, _c5, ctx_r0.config[ctx_r0.selectedIndex].type === "warning", ctx_r0.config[ctx_r0.selectedIndex].type === "info", ctx_r0.config[ctx_r0.selectedIndex].type === "success", ctx_r0.config[ctx_r0.selectedIndex].type === "danger", ctx_r0.config.length > 1, ctx_r0.isDirectionLeft, ctx_r0.isContainer));
    i0.ɵɵadvance(7);
    i0.ɵɵclassMapInterpolate1("alert-stacked__icon ", ctx_r0.config[ctx_r0.selectedIndex].icon, "");
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("alert-animated-content", ctx_r0.config.length > 1);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r0.config[ctx_r0.selectedIndex].title);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.config[ctx_r0.selectedIndex].title);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.config.length > 1);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.config.length > 1);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind3(25, 20, ctx_r0.config[ctx_r0.selectedIndex].msg, ctx_r0.limit, "..."));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r0.config[ctx_r0.selectedIndex].msg.length > ctx_r0.limit);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.isTemplate(ctx_r0.config[ctx_r0.selectedIndex].content))("ngIfThen", _r11)("ngIfElse", _r13);
    i0.ɵɵadvance(11);
    i0.ɵɵproperty("ngIf", !ctx_r0.config[ctx_r0.selectedIndex].permanent);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", !ctx_r0.mobileButtons);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r0.mobileButtons);
} }
function AdaptAlertAnimatedComponent_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    const _r26 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "button", 25);
    i0.ɵɵlistener("click", function AdaptAlertAnimatedComponent_ng_template_2_Template_button_click_1_listener() { i0.ɵɵrestoreView(_r26); const ctx_r25 = i0.ɵɵnextContext(); ctx_r25.keyPrev(); return ctx_r25.getHeight(); });
    i0.ɵɵtext(2, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n  ");
    i0.ɵɵelementStart(4, "button", 26);
    i0.ɵɵlistener("click", function AdaptAlertAnimatedComponent_ng_template_2_Template_button_click_4_listener() { i0.ɵɵrestoreView(_r26); const ctx_r27 = i0.ɵɵnextContext(); ctx_r27.keyNext(); return ctx_r27.getHeight(); });
    i0.ɵɵtext(5, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n");
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵattribute("aria-label", ctx_r2.texts.previousButton);
    i0.ɵɵadvance(3);
    i0.ɵɵattribute("aria-label", ctx_r2.texts.nextButton);
} }
// eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle
export class AdaptAlertAnimatedComponent extends AdaptRadarAngularGenericDirective {
    constructor(_elementRef, _modalService, _resizeService, _ngZone, _changeDetectorRef, ts, _adaptRadarService, _elem) {
        super(_adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptAlertAnimated);
        this._elementRef = _elementRef;
        this._modalService = _modalService;
        this._resizeService = _resizeService;
        this._ngZone = _ngZone;
        this._changeDetectorRef = _changeDetectorRef;
        /* needs for counting in DoCheck life cycle */
        this.index = 0;
        /* Check if mobile buttons needed */
        this.mobileButtons = false;
        /* Check the direction of alert animated */
        this.isDirectionLeft = false;
        this.defaultTexts = {};
        /**
         * The limit for letters in content
         */
        this.limit = 100;
        this.alertClosed = new EventEmitter();
        this.heightChanged = new EventEmitter();
        this._selectedIndex = 0;
        this._isContainer = false;
        this._config = [];
        this._isVisible = false;
        this._destroyed$ = new ReplaySubject(1);
        this.setDefaultTexts(ts.getCurrentLanguage());
        this.texts = {};
    }
    /**
     * An active index which shows particular alert
     */
    get selectedIndex() {
        return this._selectedIndex;
    }
    set selectedIndex(value) {
        if (value < 0 || value === undefined) {
            value = 0;
        }
        this._selectedIndex = toNumber(value);
    }
    get isContainer() {
        return this._isContainer;
    }
    set isContainer(value) {
        this._isContainer = toBoolean(value);
    }
    get config() {
        return this._config;
    }
    set config(value) {
        this._config = value;
    }
    get isVisible() {
        return this._isVisible;
    }
    set isVisible(value) {
        this._isVisible = toBoolean(value);
    }
    get alertCountText() {
        return formatString(this._texts.nOfMText, this.selectedIndex + 1, this.config.length);
    }
    get texts() {
        return this._texts;
    }
    set texts(value) {
        this._texts = Object.assign(Object.assign({}, this.defaultTexts), value);
    }
    setDefaultTexts(translation) {
        this.defaultTexts.closeButton = translation['adapt.common.close'];
        this.defaultTexts.nextButton = translation['adapt.common.next'];
        this.defaultTexts.previousButton = translation['adapt.common.previous'];
        this.defaultTexts.nOfMText = translation['adapt.alertAnimated.nOfMText'];
    }
    /**
     * Check content type
     */
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    isTemplate(content) {
        return content instanceof TemplateRef;
    }
    /**
     * Close alert by index
     */
    closeAlert(index) {
        this.config.length > 1 ? this.getHeight() : this.isVisible = false;
        const closedAlertConfig = this.config.splice(index, 1);
        this.alertClosed.emit({ index: index, configLength: this.config.length, closedAlertConfig: closedAlertConfig[0] });
        this.keyPrev();
    }
    /**
     * Switch alert to the previous element
     */
    keyPrev() {
        this.isDirectionLeft = true;
        this.selectedIndex <= 0 ? this.selectedIndex = this.config.length - 1 : this.selectedIndex -= 1;
    }
    /**
     * Switch alert to the next element
     */
    keyNext() {
        this.isDirectionLeft = false;
        this.selectedIndex >= this.config.length - 1 ? this.selectedIndex = 0 : this.selectedIndex += 1;
    }
    /**
     * Show more information in dialog window. Required the Modal Component
     */
    showMore(alert) {
        this._modalService.open({
            isDialog: true,
            title: alert.title || 'More detail',
            content: alert.msg
        }).then(noop, noop);
    }
    getHeight() {
        const wPadding = 24;
        this._ngZone.onStable.pipe(takeUntil(this._destroyed$), take(1)).subscribe(() => {
            var _a;
            if (((_a = this._elementRef) === null || _a === void 0 ? void 0 : _a.nativeElement) && this.alert && this.wrapper && this.container) {
                const { offsetHeight } = this.container.nativeElement;
                const wOffset = this.wrapper.nativeElement.offsetHeight;
                const h = wOffset + wPadding;
                this.alert.nativeElement.style.height = `${h}px`;
                h > offsetHeight ? this.heightChanged.emit(h) : this.heightChanged.emit(offsetHeight);
            }
            else {
                this.heightChanged.emit(0);
            }
        });
    }
    // eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle
    ngAfterViewInit() {
        super.ngAfterViewInit();
        const resize$ = new Subject();
        resize$
            .pipe(takeUntil(this._destroyed$), throttleTime(100, asyncScheduler, { trailing: true }))
            .subscribe(() => {
            this._doCheckOnResize();
            SafeCdr.detectChanges(this._changeDetectorRef);
        });
        this._resizeService.addResizeEventListener(this._elementRef.nativeElement, resize$.next.bind(resize$));
    }
    // eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle
    ngOnChanges(changes) {
        if (changes) {
            this._doCheckOnResize();
        }
    }
    // eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle
    ngDoCheck() {
        if (this.config.length > this.index && this.isVisible) {
            this.index = this.config.length;
            this.getHeight();
        }
    }
    // eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle
    ngOnDestroy() {
        this._resizeService.removeResizeEventListener(this._elementRef.nativeElement);
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
    _onResize() {
        return this.mobileButtons = (window.innerWidth < 577);
    }
    _doCheckOnResize() {
        this._onResize();
        this.getHeight();
    }
}
AdaptAlertAnimatedComponent.ɵfac = function AdaptAlertAnimatedComponent_Factory(t) { return new (t || AdaptAlertAnimatedComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.AdaptModalService), i0.ɵɵdirectiveInject(i2.ResizeService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.AdaptTranslateService), i0.ɵɵdirectiveInject(i4.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptAlertAnimatedComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptAlertAnimatedComponent, selectors: [["adapt-alert-animated"]], viewQuery: function AdaptAlertAnimatedComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
        i0.ɵɵviewQuery(_c1, 5);
        i0.ɵɵviewQuery(_c2, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.container = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.alert = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.wrapper = _t.first);
    } }, hostVars: 2, hostBindings: function AdaptAlertAnimatedComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("adapt-alert-animated", true);
    } }, inputs: { selectedIndex: "selectedIndex", isContainer: "isContainer", config: "config", isVisible: "isVisible", texts: "texts" }, outputs: { alertClosed: "alertClosed", heightChanged: "heightChanged" }, features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 5, vars: 1, consts: [["class", "alert-container", 3, "ngClass", 4, "ngIf"], ["nextPreviousButtons", ""], [1, "alert-container", 3, "ngClass"], ["container", ""], [1, "alert", "alert-stacked", 2, "margin", "auto", 3, "ngClass"], ["alert", ""], [1, "alert-wrapper"], ["wrapper", ""], ["class", "letter-space", 4, "ngIf"], ["class", "alert-count", 4, "ngIf"], ["class", "alert-link", 3, "ngClass", "click", 4, "ngIf"], [4, "ngIf", "ngIfThen", "ngIfElse"], ["tmplContent", ""], ["stringContent", ""], [4, "ngIf"], ["class", "alert-controls", 3, "display", 4, "ngIf"], [1, "letter-space"], [1, "alert-count"], [1, "alert-link", 3, "ngClass", "click"], [3, "ngTemplateOutlet"], ["type", "button", 1, "alert-close", "d-icon-cross_adapt", 3, "click"], [1, "alert-controls"], [3, "ngTemplateOutlet", 4, "ngIf"], ["class", "alert-controls is-mobile", 4, "ngIf"], [1, "alert-controls", "is-mobile"], ["type", "button", 1, "alert-btn", "d-icon-triangle_left_adapt", 3, "click"], ["type", "button", 1, "alert-btn", "d-icon-triangle_right_adapt", 3, "click"]], template: function AdaptAlertAnimatedComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, AdaptAlertAnimatedComponent_div_0_Template, 49, 37, "div", 0);
        i0.ɵɵtext(1, "\n\n");
        i0.ɵɵtemplate(2, AdaptAlertAnimatedComponent_ng_template_2_Template, 7, 2, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(4, "\n");
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.config.length !== 0 && ctx.isVisible);
    } }, directives: [i5.NgIf, i5.NgClass, i5.NgTemplateOutlet], pipes: [i6.AdaptTruncatePipe], encapsulation: 2, data: { animation: [
            trigger('alertAnimation', [
                transition('void => *', [
                    useAnimation(ANIMATION_NAME.height, {
                        params: {
                            duration: ANIMATION_DURATION.medium,
                            timingFunction: ANIMATION_TIMING_FUNCTION.base.transitionIn
                        }
                    })
                ]),
                transition('* => void', [
                    useAnimation(ANIMATION_NAME.height, {
                        params: {
                            duration: ANIMATION_DURATION.fast,
                            from: '*',
                            to: '0',
                            timingFunction: ANIMATION_TIMING_FUNCTION.base.transitionOut
                        }
                    })
                ])
            ]),
            trigger('alertWrapperAnimation', [
                transition('void => *', [
                    useAnimation(ANIMATION_NAME.height, {
                        params: {
                            from: '*',
                            to: '*',
                            duration: ANIMATION_DURATION.slow,
                            timingFunction: ANIMATION_TIMING_FUNCTION.base.transitionIn
                        }
                    })
                ])
            ]),
            trigger('alertControlsAnimation', [
                transition('void => *', [
                    style({ transform: 'translate3d(0, -100%, 0)', opacity: .6 }),
                    animate(`.3s ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ transform: 'translate3d(0, 0, 0)', opacity: 1 }))
                ]),
                transition('* => void', [
                    useAnimation(ANIMATION_NAME.height, {
                        params: {
                            duration: ANIMATION_DURATION.medium,
                            from: '*',
                            to: '0',
                            timingFunction: ANIMATION_TIMING_FUNCTION.base.transitionOut
                        }
                    })
                ])
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptAlertAnimatedComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-alert-animated',
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[class.adapt-alert-animated]': 'true'
                },
                templateUrl: './alert-animated.component.html',
                animations: [
                    trigger('alertAnimation', [
                        transition('void => *', [
                            useAnimation(ANIMATION_NAME.height, {
                                params: {
                                    duration: ANIMATION_DURATION.medium,
                                    timingFunction: ANIMATION_TIMING_FUNCTION.base.transitionIn
                                }
                            })
                        ]),
                        transition('* => void', [
                            useAnimation(ANIMATION_NAME.height, {
                                params: {
                                    duration: ANIMATION_DURATION.fast,
                                    from: '*',
                                    to: '0',
                                    timingFunction: ANIMATION_TIMING_FUNCTION.base.transitionOut
                                }
                            })
                        ])
                    ]),
                    trigger('alertWrapperAnimation', [
                        transition('void => *', [
                            useAnimation(ANIMATION_NAME.height, {
                                params: {
                                    from: '*',
                                    to: '*',
                                    duration: ANIMATION_DURATION.slow,
                                    timingFunction: ANIMATION_TIMING_FUNCTION.base.transitionIn
                                }
                            })
                        ])
                    ]),
                    trigger('alertControlsAnimation', [
                        transition('void => *', [
                            style({ transform: 'translate3d(0, -100%, 0)', opacity: .6 }),
                            animate(`.3s ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ transform: 'translate3d(0, 0, 0)', opacity: 1 }))
                        ]),
                        transition('* => void', [
                            useAnimation(ANIMATION_NAME.height, {
                                params: {
                                    duration: ANIMATION_DURATION.medium,
                                    from: '*',
                                    to: '0',
                                    timingFunction: ANIMATION_TIMING_FUNCTION.base.transitionOut
                                }
                            })
                        ])
                    ])
                ],
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i1.AdaptModalService }, { type: i2.ResizeService }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i3.AdaptTranslateService }, { type: i4.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { container: [{
            type: ViewChild,
            args: ['container', { static: false }]
        }], alert: [{
            type: ViewChild,
            args: ['alert', { static: false }]
        }], wrapper: [{
            type: ViewChild,
            args: ['wrapper', { static: false }]
        }], alertClosed: [{
            type: Output
        }], heightChanged: [{
            type: Output
        }], selectedIndex: [{
            type: Input
        }], isContainer: [{
            type: Input
        }], config: [{
            type: Input
        }], isVisible: [{
            type: Input
        }], texts: [{
            type: Input
        }] }); })();
//# sourceMappingURL=alert-animated.component.js.map