{"version":3,"file":"adapt-rx-textfield.component.js","sourceRoot":"","sources":["../../../../../../libs/adapt-angular/src/rx/rx-textfield/adapt-rx-textfield.component.ts","../../../../../../libs/adapt-angular/src/rx/rx-textfield/adapt-rx-textfield.component.html"],"names":[],"mappings":"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","sourcesContent":["import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnInit,\n  Optional,\n  Self,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {NgControl} from '@angular/forms';\nimport {isString} from 'lodash-es';\nimport {\n  AdaptRadarAngularCustomEventName,\n  AdaptRadarAngularCustomEventType,\n  AdaptRadarAngularService\n} from '../../common/radar/adapt-radar';\n\nimport {AdaptRxFeedbackComponent, AdaptRxFormControlDirective, FormControlSize} from '../form-control/index';\nimport {AdaptRxTextfieldConfigService} from './adapt-rx-textfield-config.service';\nimport {AdaptTranslateService} from '../../common/i18n/index';\nimport {ColorVariantType} from '../../common/common.models';\n\n\n@Component({\n  selector: 'adapt-rx-textfield',\n  templateUrl: './adapt-rx-textfield.component.html',\n  encapsulation: ViewEncapsulation.None\n})\nexport class AdaptRxTextfieldComponent extends AdaptRxFormControlDirective implements OnInit {\n  protected controlName: string = 'textfield';\n\n  analyticsComponentName: typeof AdaptRadarAngularCustomEventName = AdaptRadarAngularCustomEventName;\n\n  /**\n   * Nested text before the input\n   * @docs-default\n   */\n  @Input() prepend: string;\n\n  /**\n   * Nested text after the input\n   * @docs-default\n   */\n  @Input() append: string;\n\n  /**\n   * Trigger to use input type='password' instead 'text'\n   * @docs-default false\n   */\n  @Input() isPassword: boolean;\n\n  /**\n   * Specifies autocomplete property of native element\n   * @docs-default\n   * @since 10.11.0\n   */\n  @Input() autocomplete: boolean | string;\n\n  /**\n   * A placeholder string for the input filed\n   * @docs-default\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Control size\n   * @docs-default default\n   */\n  @Input() size: FormControlSize = 'default';\n\n  /**\n   * Custom tag to be added to the component\n   * @docs-default\n   * @since v10.1.0\n   */\n  @Input() fieldTagText: string;\n\n  /**\n   * Custom tag type : 'primary', 'info', 'success', 'warning', 'danger', 'active', 'secondary'\n   * @docs-default primary\n   * @since v10.1.0\n   */\n  @Input() fieldTagType: ColorVariantType | 'active' | 'secondary' = 'primary';\n\n  /**\n   * Show success appearance when no errors\n   * @docs-default false\n   */\n  @Input() showValidState: boolean = false;\n\n  /**\n   * Show success icon when no errors\n   * @docs-default false\n   */\n  @Input() showValidStateIcon: boolean = false;\n\n  /**\n   * Show error icon when errors\n   * @docs-default false\n   */\n  @Input() showInvalidStateIcon: boolean = false;\n\n  /**\n   * Message which will be shown if [showValidState]=true and no errors\n   * @docs-default false\n   */\n  @Input() validStateMessage: string;\n\n  /**\n   * Use disable styles for readonly state\n   * @docs-default false\n   */\n  @Input() disabledStyleForReadonlyState: boolean = false;\n\n  /**\n   * Input ref\n   */\n  @ViewChild('inputRef', {static: true}) inputRef: ElementRef<HTMLInputElement>;\n\n  /**\n   * Reference on AdaptRxFeedbackComponent\n   */\n  @ViewChild('adaptRxFeedbackRef', {static: true}) adaptRxFeedbackRef: AdaptRxFeedbackComponent;\n\n  private _value: string;\n  private _previousNativeValue: string;\n\n  constructor(@Optional() @Self() ngControl: NgControl,\n              adaptRxTextfieldService: AdaptRxTextfieldConfigService,\n              _changeDetectorRef: ChangeDetectorRef,\n              _adaptRadarService: AdaptRadarAngularService,\n              public ts: AdaptTranslateService,\n              _elem: ElementRef<HTMLElement>) {\n    super(ngControl, ts, _adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptRxTextfield, _changeDetectorRef);\n\n    // Set default params from the config service\n    this.size = adaptRxTextfieldService.size;\n    this.showValidState = adaptRxTextfieldService.showValidState;\n    this.showValidStateIcon = adaptRxTextfieldService.showValidStateIcon;\n    this.showInvalidStateIcon = adaptRxTextfieldService.showInvalidStateIcon;\n    this.disabledStyleForReadonlyState = adaptRxTextfieldService.disabledStyleForReadonlyState;\n  }\n\n  get value(): string {\n    return this._value;\n  }\n\n  set value(value: string) {\n    if (value !== this._value) {\n      this._value = value;\n      this._onChange(this._value);\n      this.stateChanges$.next();\n    }\n  }\n\n  /**\n   * Returns input type value according to [isPassword] value\n   */\n  get getInputTypeValue(): string {\n    return this.isPassword ? 'password' : 'text';\n  }\n\n  /**\n   * Returns autocomplete attribute value for native element\n   */\n  get getAutocompleteValue(): string {\n    return isString(this.autocomplete) ? this.autocomplete : (this.autocomplete ? 'on' : 'off');\n  }\n\n  /**\n   * Check if the control has UI error state\n   */\n  get hasDangerState(): boolean {\n    return this.adaptRxFeedbackRef.hasUIErrorState;\n  }\n\n  /**\n   * Check if component should have success appearance if no errors\n   */\n  get hasSuccessState(): boolean {\n    return this.showValidState && this.ngControl.touched && !this.ngControl.errors;\n  }\n\n  /**\n   * Check if the invalid state icon should be displayed when has danger state\n   */\n  get hasDangerStateIcon(): boolean {\n    return this.hasDangerState && this.showInvalidStateIcon;\n  }\n\n  /**\n   * Check if the valid state icon should be displayed when has success state\n   */\n  get hasSuccessStateIcon(): boolean {\n    return this.hasSuccessState && this.showValidStateIcon;\n  }\n\n  /**\n   * Input element (input) event handler\n   */\n  inputValueChange(): void {\n    this._checkNativeValue();\n  }\n\n  /**\n   * Implementation of base abstract member\n   */\n  writeValue(value: string): void {\n    if (value !== undefined) {\n      this._value = value;\n      this._previousNativeValue = undefined;\n    }\n  }\n\n  /**\n   * Extend parent method\n   */\n  blurHandler(event: FocusEvent): void {\n    super.blurHandler(event);\n\n    this._onTouched();\n\n\n    this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxTextfield, {\n      GroupName: this.adaptRadarGroupName,\n      EventType: AdaptRadarAngularCustomEventType.Blur,\n      Label: this.label,\n      Subtext: !!this.subLabel,\n      TextEntered: !!this.value,\n      CharCount: this.value?.length,\n      Badge: !!this.fieldTagText,\n      BadgeText: this.fieldTagText || null,\n      Hinted: !!this.tooltip,\n      Required: this.required,\n      Disabled: this.disabled,\n      ReadOnly: this.readonly,\n      FieldSize: this.size,\n      // DynamicEntry: false\n    });\n  }\n\n  /**\n   * Extend parent method\n   */\n  focusHandler(event: FocusEvent): void {\n    super.focusHandler(event);\n\n    this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxTextfield, {\n      GroupName: this.adaptRadarGroupName,\n      EventType: AdaptRadarAngularCustomEventType.Focus,\n      Label: this.label,\n      Subtext: !!this.subLabel,\n      TextEntered: !!this.value,\n      CharCount: this.value?.length,\n      Badge: !!this.fieldTagText,\n      BadgeText: this.fieldTagText || null,\n      Hinted: !!this.tooltip,\n      Required: this.required,\n      Disabled: this.disabled,\n      ReadOnly: this.readonly,\n      FieldSize: this.size,\n      // DynamicEntry: false\n    });\n  }\n\n  /**\n   * Implementation from the base class\n   * Focus the native element if [autofocus] == true\n   */\n  protected _focusNativeElement(): void {\n    this.inputRef.nativeElement.focus();\n  }\n\n  /**\n   * Check if the native element value was changed and propagate change\n   */\n  private _checkNativeValue(): void {\n    const newValue = this.inputRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.value = newValue;\n    }\n  }\n}\n","<div [class.has-danger]=\"hasDangerState\"\n     [class.has-warning]=\"warningMessage\"\n     [class.has-success]=\"hasSuccessState\"\n     [class.has-tag]=\"!!fieldTagText\">\n  <adapt-rx-control-label [for]=\"id\"\n                          [label]=\"label\"\n                          [subLabel]=\"subLabel\"\n                          [requiredLabel]=\"requiredLabel\"\n                          [showRequiredLabel]=\"required\"\n                          [tooltip]=\"tooltip\"\n                          [testID]=\"testID\"></adapt-rx-control-label>\n\n  <div class=\"input-group\"\n       [class.input-group-sm]=\"size === 'sm'\"\n       [class.input-group-lg]=\"size === 'lg'\"\n       [class.has-disabled-icon]=\"readonly && this.disabledStyleForReadonlyState\"\n       [class.has-danger-icon]=\"hasDangerStateIcon\"\n       [class.has-success-icon]=\"hasSuccessStateIcon\"\n       [class.disabled-look]=\"disabled\">\n    <div class=\"input-group-prepend\" *ngIf=\"prepend\">\n      <span class=\"input-group-text\">{{prepend}}</span>\n    </div>\n    <ng-content select=\"[input-start-content]\"></ng-content>\n    <input #inputRef\n           [attr.type]=\"getInputTypeValue\"\n           class=\"form-control rx-form-control\"\n           [class.form-control-disabled-look]=\"readonly && this.disabledStyleForReadonlyState\"\n           [class.form-control-danger]=\"hasDangerStateIcon\"\n           [class.form-control-success]=\"hasSuccessStateIcon\"\n           [id]=\"id\"\n           [value]=\"value\"\n           [required]=\"required\"\n           [disabled]=\"disabled\"\n           [readOnly]=\"readonly\"\n           [autofocus]=\"autofocus\"\n           [autocomplete]=\"getAutocompleteValue\"\n           [attr.name]=\"name\"\n           [attr.placeholder]=\"placeholder\"\n           [attr.tabindex]=\"tabIndex\"\n           [attr.aria-label]=\"ariaLabel\"\n           [attr.aria-labelledby]=\"ariaLabelledby\"\n           [attr.aria-describedby]=\"ariaDescribedBy\"\n           [attr.aria-required]=\"required\"\n           [attr.aria-readonly]=\"readonly\"\n           [attr.aria-disabled]=\"disabled\"\n           [attr.aria-invalid]=\"hasDangerState\"\n           [attr.aria-errormessage]=\"ariaErrorMessage\"\n           [attr.data-testid]=\"testID\"\n           (input)=\"inputValueChange()\"\n           (focus)=\"focusHandler($event)\"\n           (blur)=\"blurHandler($event)\">\n    <ng-content select=\"[input-end-content]\"></ng-content>\n    <div class=\"input-group-custom-tag\" *ngIf=\"!!fieldTagText\">\n      <adapt-badge [adaptRadarDisableEventSending]=\"true\"\n                   [variant]=\"fieldTagType\">{{fieldTagText}}</adapt-badge>\n    </div>\n    <div class=\"input-group-append\" *ngIf=\"append\">\n      <span class=\"input-group-text\">{{append}}</span>\n    </div>\n  </div>\n\n  <adapt-rx-feedback #adaptRxFeedbackRef\n                     [ariaErrorMessage]=\"ariaErrorMessage\"\n                     [errors]=\"ngControl.errors\"\n                     [successMessage]=\"validStateMessage\"\n                     [warningMessage]=\"warningMessage\"\n                     [controlTouched]=\"ngControl.touched\"\n                     (messageAppeared)=\"handleMessageAppeared($event, analyticsComponentName.AdaptRxTextfield)\"></adapt-rx-feedback>\n</div>\n"]}