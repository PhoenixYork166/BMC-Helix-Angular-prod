import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, HostListener, Output, Renderer2, ViewChild, ViewEncapsulation } from '@angular/core';
import { animate, query, style, transition, trigger, useAnimation } from '@angular/animations';
import { Subject } from 'rxjs';
import { ANIMATION_DURATION, ANIMATION_NAME, ANIMATION_TIMING_FUNCTION } from '../common/animation';
import { SafeCdr } from '../common/safe-cdr';
import { getFocusableElements } from '../common/focus';
import { isEventFrom } from '../common/utilities';
import * as i0 from "@angular/core";
import * as i1 from "../focus-holder/focus-holder.directive";
import * as i2 from "@angular/common";
import * as i3 from "../close/close.component";
const _c0 = ["container"];
function AdaptDropdownWindow2Component_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0, 5);
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r3 = i0.ɵɵreference(11);
    i0.ɵɵproperty("ngTemplateOutlet", _r3);
} }
function AdaptDropdownWindow2Component_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0, 5);
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r5 = i0.ɵɵreference(14);
    i0.ɵɵproperty("ngTemplateOutlet", _r5);
} }
function AdaptDropdownWindow2Component_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0, 5);
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r7 = i0.ɵɵreference(17);
    i0.ɵɵproperty("ngTemplateOutlet", _r7);
} }
function AdaptDropdownWindow2Component_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵelementStart(1, "div", 6, 7);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementContainer(4, 5);
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n    ");
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("adapt-dd-menu-desktop_picker", ctx_r4.mobileView.isPicker);
    i0.ɵɵproperty("ngClass", ctx_r4.customClass);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r4.templateRef);
} }
function AdaptDropdownWindow2Component_ng_template_13_Template(rf, ctx) { if (rf & 1) {
    const _r13 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵelementStart(1, "div", 8);
    i0.ɵɵtext(2, "\n        ");
    i0.ɵɵelementStart(3, "div", 9);
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵelementStart(5, "div", 10);
    i0.ɵɵlistener("click", function AdaptDropdownWindow2Component_ng_template_13_Template_div_click_5_listener($event) { return $event.stopPropagation(); });
    i0.ɵɵtext(6, "\n            ");
    i0.ɵɵelementStart(7, "button", 11);
    i0.ɵɵlistener("click", function AdaptDropdownWindow2Component_ng_template_13_Template_button_click_7_listener() { i0.ɵɵrestoreView(_r13); const ctx_r12 = i0.ɵɵnextContext(); return ctx_r12.mobileView.cancelCB && ctx_r12.mobileView.cancelCB(); });
    i0.ɵɵtext(8);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n            ");
    i0.ɵɵelementStart(10, "h2", 12);
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n            ");
    i0.ɵɵelementStart(13, "button", 13);
    i0.ɵɵlistener("click", function AdaptDropdownWindow2Component_ng_template_13_Template_button_click_13_listener() { i0.ɵɵrestoreView(_r13); const ctx_r14 = i0.ɵɵnextContext(); return ctx_r14.mobileView.doneCB && ctx_r14.mobileView.doneCB(); });
    i0.ɵɵtext(14);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(16, "\n\n          ");
    i0.ɵɵelementStart(17, "div", 14, 7);
    i0.ɵɵtext(19, "\n            ");
    i0.ɵɵelementContainer(20, 5);
    i0.ɵɵtext(21, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(22, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(23, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(24, "\n    ");
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("adapt-dd-menu-mobile_full-height", ctx_r6.mobileView.fullHeight);
    i0.ɵɵadvance(7);
    i0.ɵɵtextInterpolate1("\n              ", ctx_r6.mobileView.cancelBtnTitle, "\n            ");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("\n              ", ctx_r6.mobileView.title, "\n            ");
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("invisible", !ctx_r6.mobileView.doneCB);
    i0.ɵɵproperty("disabled", !ctx_r6.mobileView.doneCB);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n              ", ctx_r6.mobileView.doneBtnTitle, "\n            ");
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngClass", ctx_r6.customClass);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r6.templateRef);
} }
function AdaptDropdownWindow2Component_ng_template_16_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r18 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 18);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementStart(2, "h5");
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n            ");
    i0.ɵɵelementStart(5, "adapt-close", 19);
    i0.ɵɵlistener("close", function AdaptDropdownWindow2Component_ng_template_16_div_6_Template_adapt_close_close_5_listener() { i0.ɵɵrestoreView(_r18); const ctx_r17 = i0.ɵɵnextContext(2); return ctx_r17.mobileView.cancelCB && ctx_r17.mobileView.cancelCB(); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵclassMap("modal-title text-default");
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r16.mobileView.title);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
} }
function AdaptDropdownWindow2Component_ng_template_16_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵelementStart(1, "div", 15, 7);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementStart(4, "div", 16);
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵtemplate(6, AdaptDropdownWindow2Component_ng_template_16_div_6_Template, 7, 4, "div", 17);
    i0.ɵɵtext(7, "\n          ");
    i0.ɵɵelementContainer(8, 5);
    i0.ɵɵtext(9, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n    ");
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("is-tablet", ctx_r8.isTablet)("adapt-dd-menu-mobile-picker_full-height", ctx_r8.mobileView.fullHeight)("full-height", ctx_r8.mobileView.fullHeight);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngClass", ctx_r8.customClass);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r8.isTablet);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r8.templateRef);
} }
export class AdaptDropdownWindow2Component {
    constructor(_elementRef, _renderer, _changeDetectorRef) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._changeDetectorRef = _changeDetectorRef;
        this.autoFocusFirst = true;
        this.focusNextElementAfterClose = false;
        this.holdFocusInMenu = false;
        this.holdFocusOnOpen = false;
        this.restoreFocusAfterClose = false;
        this.popupAnimationDone = new EventEmitter();
        this.onPopupAnimationDone = this._onPopupAnimationDone;
        this._popupCloseAnimationDone$ = new Subject();
    }
    get fadeAnimation() {
        return this.animationMode;
    }
    get popupAnimation() {
        return this.animationMode;
    }
    ngAfterViewInit() {
        if (this.content) {
            //TODO: see possibilities to refactor the below code,
            Array.from(this.container.nativeElement.children).forEach((child) => {
                this._renderer.removeChild(this.container.nativeElement, child);
            });
            this._renderer.appendChild(this.container.nativeElement, this.content._elementRef.nativeElement);
        }
    }
    /**
     * Check if click event from this window
     */
    isEventFrom(event) {
        return isEventFrom(event, this._elementRef.nativeElement);
    }
    /**
     * Close window
     */
    close() {
        this.animationMode = false;
        // when used inside a component with OnPush strategy, must explicitly mark for check to ensure animationMode change is detected
        SafeCdr.markForCheck(this._changeDetectorRef);
        return this._popupCloseAnimationDone$;
    }
    focusFirstItemInPopup() {
        var _a;
        (_a = getFocusableElements(this._elementRef.nativeElement)[0]) === null || _a === void 0 ? void 0 : _a.focus();
    }
    /**
     * Close animation handler
     */
    _onPopupAnimationDone(event) {
        this.popupAnimationDone.emit(event);
        if (Boolean(event.toState) === false) {
            this._popupCloseAnimationDone$.next();
            this._popupCloseAnimationDone$.complete();
        }
    }
}
AdaptDropdownWindow2Component.ɵfac = function AdaptDropdownWindow2Component_Factory(t) { return new (t || AdaptDropdownWindow2Component)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
AdaptDropdownWindow2Component.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptDropdownWindow2Component, selectors: [["adapt-dropdown-window2"]], viewQuery: function AdaptDropdownWindow2Component_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.container = _t.first);
    } }, hostVars: 2, hostBindings: function AdaptDropdownWindow2Component_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵsyntheticHostListener("@popupAnimation.done", function AdaptDropdownWindow2Component_animation_popupAnimation_done_HostBindingHandler($event) { return ctx.onPopupAnimationDone($event); });
    } if (rf & 2) {
        i0.ɵɵsyntheticHostProperty("@fadeAnimation", ctx.fadeAnimation)("@popupAnimation", ctx.popupAnimation);
    } }, outputs: { popupAnimationDone: "popupAnimationDone" }, decls: 19, vars: 10, consts: [[1, "adapt-dd-menu", 3, "adaptFocusHolder", "holdFocusOnInit", "focusFirstOnInit", "focusFirstDelay", "eventType", "restoreLastFocusedElement", "focusNextElement"], [3, "ngTemplateOutlet", 4, "ngIf"], ["desktopTemplate", ""], ["mobileTemplate", ""], ["mobilePickerTemplate", ""], [3, "ngTemplateOutlet"], [1, "adapt-dd-menu-desktop", "border-gradient", "shadow-2", "a-dropdown-window--menu", 3, "ngClass"], ["container", ""], [1, "adapt-dd-menu-mobile"], [1, "adapt-dd-menu-mobile--content"], [1, "adapt-dd-menu-mobile--content-header", 3, "click"], ["type", "button", 1, "btn", "btn-link", "btn-sm", 3, "click"], [1, "adapt-dd-menu-mobile--content-header-title"], [1, "btn", "btn-link", "btn-sm", 3, "disabled", "click"], [1, "adapt-dd-menu-mobile--content-body", "a-dropdown-window--menu", 3, "ngClass"], [1, "adapt-dd-menu-mobile-picker", "shadow-3"], [1, "a-dropdown-window--menu", 3, "ngClass"], ["class", "modal-header", 4, "ngIf"], [1, "modal-header"], [3, "adaptRadarDisableEventSending", "close"]], template: function AdaptDropdownWindow2Component_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtext(0, "\n    ");
        i0.ɵɵelementStart(1, "div", 0);
        i0.ɵɵtext(2, "\n\n      ");
        i0.ɵɵtemplate(3, AdaptDropdownWindow2Component_ng_container_3_Template, 1, 1, "ng-container", 1);
        i0.ɵɵtext(4, "\n      ");
        i0.ɵɵtemplate(5, AdaptDropdownWindow2Component_ng_container_5_Template, 1, 1, "ng-container", 1);
        i0.ɵɵtext(6, "\n      ");
        i0.ɵɵtemplate(7, AdaptDropdownWindow2Component_ng_container_7_Template, 1, 1, "ng-container", 1);
        i0.ɵɵtext(8, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(9, "\n\n    ");
        i0.ɵɵtemplate(10, AdaptDropdownWindow2Component_ng_template_10_Template, 7, 4, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(12, "\n\n    ");
        i0.ɵɵtemplate(13, AdaptDropdownWindow2Component_ng_template_13_Template, 25, 10, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(15, "\n\n    ");
        i0.ɵɵtemplate(16, AdaptDropdownWindow2Component_ng_template_16_Template, 12, 9, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(18, "\n  ");
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("adaptFocusHolder", ctx.holdFocusInMenu)("holdFocusOnInit", ctx.holdFocusOnOpen)("focusFirstOnInit", ctx.autoFocusFirst)("focusFirstDelay", 250)("eventType", ctx.eventInvokedFrom)("restoreLastFocusedElement", ctx.restoreFocusAfterClose)("focusNextElement", ctx.focusNextElementAfterClose);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !(ctx.isMobile || ctx.isTablet));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.isMobile && !ctx.mobileView.isPicker);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.isMobile && ctx.mobileView.isPicker || ctx.isTablet);
    } }, directives: [i1.AdaptFocusHolderDirective, i2.NgIf, i2.NgTemplateOutlet, i2.NgClass, i3.AdaptCloseComponent], styles: ["\n    .adapt-dd-menu {\n      height: 100%;\n    }\n\n    .adapt-dd-menu .dropdown-menu {\n      position: static;\n      display: flex;\n      flex-direction: column;\n      flex: 1 1 auto;\n      box-shadow: none;\n      margin: 0;\n      float: none;\n      height: 100%;\n    }\n\n    .adapt-dd-menu .a-dropdown-window--menu {\n      position: static;\n    }\n\n    /* DESKTOP */\n    .adapt-dd-menu-desktop {\n      height: 100%;\n      overflow: auto;\n      border-radius: var(--border-radius);\n      background: var(--white, #fff);\n    }\n\n    .adapt-dd-menu-desktop_picker {\n      max-height: unset;\n    }\n\n    /* MOBILE */\n    .adapt-dd-menu-mobile {\n      min-height: 50%;\n      max-height: 100%;\n      display: flex;\n      flex-direction: column-reverse;\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n    }\n\n    .adapt-dd-menu-mobile_full-height {\n      height: 100%;\n    }\n\n    .adapt-dd-menu-mobile--content {\n      flex: 1 1 auto;\n      display: flex;\n      flex-direction: column;\n      overflow-x: auto;\n      overflow-y: auto;\n    }\n\n    .adapt-dd-menu-mobile--content-header {\n      flex: 0 1 auto;\n      display: flex;\n      justify-content: space-between;\n      padding: 14px 0;\n      border-bottom: 1px solid #d6d7d8;\n      background: #fff;\n    }\n\n    .adapt-dd-menu-mobile--content-header-title {\n      font-size: 1rem;\n      margin: 0;\n      padding: 5px 0;\n    }\n\n    .adapt-dd-menu-mobile--content-body {\n      flex: 1 1 auto;\n      overflow: auto;\n      height: auto;\n      background: #fff;\n    }\n\n    /* MOBILE-PICKER */\n    .adapt-dd-menu-mobile-picker {\n      display: flex;\n      flex-direction: column;\n      max-height: 97vh;\n      overflow: auto;\n      border-radius: 2px;\n    }\n\n    .adapt-dd-menu-mobile-picker_full-height {\n      height: 100vh;\n      max-height: 100%;\n    }\n\n    .adapt-dd-menu-mobile-picker .modal-header {\n      position: relative;\n    }\n  "], encapsulation: 2, data: { animation: [
            trigger('popupAnimation', [
                transition('void => desktop', [
                    query('.adapt-dd-menu', [
                        useAnimation(ANIMATION_NAME.popIn)
                    ], { optional: true })
                ]),
                transition('desktop => 0', [
                    query('.adapt-dd-menu', [
                        useAnimation(ANIMATION_NAME.popOut)
                    ], { optional: true })
                ]),
                transition('void => mobile', [
                    query('.adapt-dd-menu-mobile', [
                        style({ transform: 'translate(0px, 100%)', opacity: '0' }),
                        animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ transform: 'translate(0px, 0px)', opacity: '1' }))
                    ], { optional: true })
                ]),
                transition('mobile => 0', [
                    query('.adapt-dd-menu-mobile', [
                        style({ transform: 'translate(0px, 0px)', opacity: '1' }),
                        animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionOut}`, style({ transform: 'translate(0px, 100%)', opacity: '0' }))
                    ], { optional: true })
                ]),
                transition('void => picker', [
                    query('.adapt-dd-menu', [
                        useAnimation(ANIMATION_NAME.popIn)
                    ], { optional: true })
                ]),
                transition('picker => 0', [
                    query('.adapt-dd-menu', [
                        useAnimation(ANIMATION_NAME.popOut)
                    ], { optional: true })
                ])
            ]),
            trigger('fadeAnimation', [
                transition('void => *', [
                    useAnimation(ANIMATION_NAME.opacity)
                ]),
                transition('* => 0', [
                    useAnimation(ANIMATION_NAME.opacity, {
                        params: {
                            from: '*',
                            to: '0'
                        }
                    })
                ])
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptDropdownWindow2Component, [{
        type: Component,
        args: [{
                selector: 'adapt-dropdown-window2',
                template: `
    <div class="adapt-dd-menu"
         [adaptFocusHolder]="holdFocusInMenu"
         [holdFocusOnInit]="holdFocusOnOpen"
         [focusFirstOnInit]="autoFocusFirst"
         [focusFirstDelay]="250"
         [eventType]="eventInvokedFrom"
         [restoreLastFocusedElement]="restoreFocusAfterClose"
         [focusNextElement]="focusNextElementAfterClose">

      <ng-container *ngIf="!(isMobile || isTablet)"
                    [ngTemplateOutlet]="desktopTemplate"></ng-container>
      <ng-container *ngIf="isMobile && !mobileView.isPicker"
                    [ngTemplateOutlet]="mobileTemplate"></ng-container>
      <ng-container *ngIf="(isMobile && mobileView.isPicker) || isTablet"
                    [ngTemplateOutlet]="mobilePickerTemplate"></ng-container>
    </div>

    <ng-template #desktopTemplate>
      <div #container class="adapt-dd-menu-desktop border-gradient shadow-2 a-dropdown-window--menu"
           [class.adapt-dd-menu-desktop_picker]="mobileView.isPicker"
           [ngClass]="customClass">
        <ng-container [ngTemplateOutlet]="templateRef"></ng-container>
      </div>
    </ng-template>

    <ng-template #mobileTemplate>
      <div class="adapt-dd-menu-mobile" [class.adapt-dd-menu-mobile_full-height]="mobileView.fullHeight">
        <div class="adapt-dd-menu-mobile--content">
          <div class="adapt-dd-menu-mobile--content-header" (click)="$event.stopPropagation()">
            <button type="button" class="btn btn-link btn-sm"
                    (click)="mobileView.cancelCB && mobileView.cancelCB()">
              {{mobileView.cancelBtnTitle}}
            </button>
            <h2 class="adapt-dd-menu-mobile--content-header-title">
              {{mobileView.title}}
            </h2>
            <button class="btn btn-link btn-sm"
                    (click)="mobileView.doneCB && mobileView.doneCB()"
                    [disabled]="!mobileView.doneCB"
                    [class.invisible]="!mobileView.doneCB">
              {{mobileView.doneBtnTitle}}
            </button>
          </div>

          <div #container
               class="adapt-dd-menu-mobile--content-body a-dropdown-window--menu"
               [ngClass]="customClass">
            <ng-container [ngTemplateOutlet]="templateRef"></ng-container>
          </div>
        </div>
      </div>
    </ng-template>

    <ng-template #mobilePickerTemplate>
      <div #container
           class="adapt-dd-menu-mobile-picker shadow-3"
           [class.is-tablet]="isTablet"
           [class.adapt-dd-menu-mobile-picker_full-height]="mobileView.fullHeight"
           [class.full-height]="mobileView.fullHeight">
        <div class="a-dropdown-window--menu" [ngClass]="customClass">
          <div class="modal-header" *ngIf="isTablet">
            <h5 [class]="'modal-title text-default'">{{mobileView.title}}</h5>
            <adapt-close [adaptRadarDisableEventSending]="true" (close)="mobileView.cancelCB && mobileView.cancelCB()"></adapt-close>
          </div>
          <ng-container [ngTemplateOutlet]="templateRef"></ng-container>
        </div>
      </div>
    </ng-template>
  `,
                animations: [
                    trigger('popupAnimation', [
                        transition('void => desktop', [
                            query('.adapt-dd-menu', [
                                useAnimation(ANIMATION_NAME.popIn)
                            ], { optional: true })
                        ]),
                        transition('desktop => 0', [
                            query('.adapt-dd-menu', [
                                useAnimation(ANIMATION_NAME.popOut)
                            ], { optional: true })
                        ]),
                        transition('void => mobile', [
                            query('.adapt-dd-menu-mobile', [
                                style({ transform: 'translate(0px, 100%)', opacity: '0' }),
                                animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ transform: 'translate(0px, 0px)', opacity: '1' }))
                            ], { optional: true })
                        ]),
                        transition('mobile => 0', [
                            query('.adapt-dd-menu-mobile', [
                                style({ transform: 'translate(0px, 0px)', opacity: '1' }),
                                animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionOut}`, style({ transform: 'translate(0px, 100%)', opacity: '0' }))
                            ], { optional: true })
                        ]),
                        transition('void => picker', [
                            query('.adapt-dd-menu', [
                                useAnimation(ANIMATION_NAME.popIn)
                            ], { optional: true })
                        ]),
                        transition('picker => 0', [
                            query('.adapt-dd-menu', [
                                useAnimation(ANIMATION_NAME.popOut)
                            ], { optional: true })
                        ])
                    ]),
                    trigger('fadeAnimation', [
                        transition('void => *', [
                            useAnimation(ANIMATION_NAME.opacity)
                        ]),
                        transition('* => 0', [
                            useAnimation(ANIMATION_NAME.opacity, {
                                params: {
                                    from: '*',
                                    to: '0'
                                }
                            })
                        ])
                    ])
                ],
                styles: [`
    .adapt-dd-menu {
      height: 100%;
    }

    .adapt-dd-menu .dropdown-menu {
      position: static;
      display: flex;
      flex-direction: column;
      flex: 1 1 auto;
      box-shadow: none;
      margin: 0;
      float: none;
      height: 100%;
    }

    .adapt-dd-menu .a-dropdown-window--menu {
      position: static;
    }

    /* DESKTOP */
    .adapt-dd-menu-desktop {
      height: 100%;
      overflow: auto;
      border-radius: var(--border-radius);
      background: var(--white, #fff);
    }

    .adapt-dd-menu-desktop_picker {
      max-height: unset;
    }

    /* MOBILE */
    .adapt-dd-menu-mobile {
      min-height: 50%;
      max-height: 100%;
      display: flex;
      flex-direction: column-reverse;
      position: absolute;
      left: 0;
      right: 0;
      bottom: 0;
    }

    .adapt-dd-menu-mobile_full-height {
      height: 100%;
    }

    .adapt-dd-menu-mobile--content {
      flex: 1 1 auto;
      display: flex;
      flex-direction: column;
      overflow-x: auto;
      overflow-y: auto;
    }

    .adapt-dd-menu-mobile--content-header {
      flex: 0 1 auto;
      display: flex;
      justify-content: space-between;
      padding: 14px 0;
      border-bottom: 1px solid #d6d7d8;
      background: #fff;
    }

    .adapt-dd-menu-mobile--content-header-title {
      font-size: 1rem;
      margin: 0;
      padding: 5px 0;
    }

    .adapt-dd-menu-mobile--content-body {
      flex: 1 1 auto;
      overflow: auto;
      height: auto;
      background: #fff;
    }

    /* MOBILE-PICKER */
    .adapt-dd-menu-mobile-picker {
      display: flex;
      flex-direction: column;
      max-height: 97vh;
      overflow: auto;
      border-radius: 2px;
    }

    .adapt-dd-menu-mobile-picker_full-height {
      height: 100vh;
      max-height: 100%;
    }

    .adapt-dd-menu-mobile-picker .modal-header {
      position: relative;
    }
  `],
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, { popupAnimationDone: [{
            type: Output
        }], fadeAnimation: [{
            type: HostBinding,
            args: ['@fadeAnimation']
        }], popupAnimation: [{
            type: HostBinding,
            args: ['@popupAnimation']
        }], onPopupAnimationDone: [{
            type: HostListener,
            args: ['@popupAnimation.done', ['$event']]
        }], container: [{
            type: ViewChild,
            args: ['container', { static: false }]
        }] }); })();
//# sourceMappingURL=dropdown-window2.component.js.map