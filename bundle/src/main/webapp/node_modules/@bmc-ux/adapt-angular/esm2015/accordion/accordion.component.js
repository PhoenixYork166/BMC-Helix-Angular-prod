import { Component, ElementRef, EventEmitter, Input, NgZone, Output, ViewEncapsulation } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { ANIMATION_DURATION, ANIMATION_TIMING_FUNCTION } from '../common/animation';
import { AdaptDeviceDetectionService } from '../common/device-detection.service';
import { toBoolean } from '../common/utilities';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularCustomEventType, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import { take, takeUntil } from 'rxjs/operators';
import { ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../common/device-detection.service";
import * as i2 from "../common/radar/adapt-radar";
import * as i3 from "@angular/common";
function AdaptAccordionComponent_ng_content_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0, 0, ["*ngIf", "!_config.tabs.length"]);
} }
function AdaptAccordionComponent_div_5_adapt_accordion_tab_2_Template(rf, ctx) { if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-accordion-tab", 3);
    i0.ɵɵlistener("open", function AdaptAccordionComponent_div_5_adapt_accordion_tab_2_Template_adapt_accordion_tab_open_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const tab_r3 = restoredCtx.$implicit; const ctx_r4 = i0.ɵɵnextContext(2); return ctx_r4.openTab.emit(tab_r3); })("close", function AdaptAccordionComponent_div_5_adapt_accordion_tab_2_Template_adapt_accordion_tab_close_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r5); const tab_r3 = restoredCtx.$implicit; const ctx_r6 = i0.ɵɵnextContext(2); return ctx_r6.closeTab.emit(tab_r3); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const tab_r3 = ctx.$implicit;
    i0.ɵɵproperty("title", tab_r3.title)("isOpen", tab_r3.isOpen)("disabled", tab_r3.disabled)("icon", tab_r3.icon);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n          ", tab_r3.content, "\n        ");
} }
function AdaptAccordionComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptAccordionComponent_div_5_adapt_accordion_tab_2_Template, 2, 5, "adapt-accordion-tab", 2);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r1.config.tabs);
} }
const _c0 = ["*"];
function AdaptAccordionTabComponent_span_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span");
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassMap("mr-1 " + ctx_r0.icon);
} }
function AdaptAccordionTabComponent_ng_content_28_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0, 1, ["*ngIf", "renderContentWhenClosed || isOpenOrCloseAnimationProcessing"]);
} }
const _c1 = [[["", 8, "card-title-text"]], "*"];
const _c2 = function (a0, a1) { return { "column": a0, "ellipsis": a1 }; };
const _c3 = function (a0) { return { "ellipsis": a0 }; };
const _c4 = function (a0, a1) { return { "overflow": a0, "display": a1 }; };
const _c5 = function (a0) { return { "card-container-hidden": a0 }; };
const _c6 = [".card-title-text", "*"];
export class AdaptAccordionComponent extends AdaptRadarAngularGenericDirective {
    constructor(_devDetection, _adaptRadarService, _elem) {
        super(_adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptAccordion);
        this._devDetection = _devDetection;
        this.isMobile = false;
        this._tabs = [];
        this._config = { tabs: [] };
        /**
         * Configuration object
         * @docs-default
         */
        this.config = {};
        /**
         * Allows opening multiple tabs
         * @docs-default false
         */
        this.multiselect = false;
        /**
         * Enable/disable borders
         * @docs-default true
         */
        this.bordered = true;
        /**
         * An event fires on tab open. Returns tab config obj.
         * Works only for tabs initialized via config obj
         */
        this.openTab = new EventEmitter();
        /**
         * An event fires on tab close. Returns tab config obj.
         * Works only for tabs initialized via config obj
         */
        this.closeTab = new EventEmitter();
        this.isMobile = _devDetection.isMobile();
    }
    ngOnInit() {
        if (this.config) {
            Object.assign(this._config, this.config);
            this.multiselect = this.multiselect || this.config.multiselect || false;
        }
    }
    /**
     * Add tab to list
     */
    addTab(group) {
        this._tabs.push(group);
    }
    removeTab(group) {
        const tabIndex = this._tabs.indexOf(group);
        if (tabIndex >= 0) {
            this._tabs.splice(tabIndex, 1);
        }
    }
    /**
     * Close other tabs
     */
    closeOthers(openGroup) {
        if (this.multiselect) {
            return;
        }
        this._tabs.forEach((group) => {
            if (group !== openGroup) {
                group.isOpen = false;
            }
        });
    }
}
AdaptAccordionComponent.ɵfac = function AdaptAccordionComponent_Factory(t) { return new (t || AdaptAccordionComponent)(i0.ɵɵdirectiveInject(i1.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i2.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptAccordionComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptAccordionComponent, selectors: [["adapt-accordion"]], inputs: { config: "config", multiselect: "multiselect", bordered: "bordered" }, outputs: { openTab: "openTab", closeTab: "closeTab" }, features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 7, vars: 4, consts: [[1, "adapt-accordion"], [4, "ngIf"], [3, "title", "isOpen", "disabled", "icon", "open", "close", 4, "ngFor", "ngForOf"], [3, "title", "isOpen", "disabled", "icon", "open", "close"]], template: function AdaptAccordionComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtext(0, "\n    ");
        i0.ɵɵelementStart(1, "div", 0);
        i0.ɵɵtext(2, "\n      ");
        i0.ɵɵtemplate(3, AdaptAccordionComponent_ng_content_3_Template, 1, 0, "ng-content", 1);
        i0.ɵɵtext(4, "\n      ");
        i0.ɵɵtemplate(5, AdaptAccordionComponent_div_5_Template, 4, 1, "div", 1);
        i0.ɵɵtext(6, "\n    ");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("borderless", !ctx.bordered);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx._config.tabs.length);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx._config.tabs.length);
    } }, directives: function () { return [i3.NgIf, i3.NgForOf, AdaptAccordionTabComponent]; }, styles: ["\n    .text-direction {\n      flex: 1 1;\n    }\n  "], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptAccordionComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-accordion',
                encapsulation: ViewEncapsulation.None,
                template: `
    <div class="adapt-accordion" [class.borderless]="!bordered">
      <ng-content *ngIf="!_config.tabs.length"></ng-content>
      <div *ngIf="_config.tabs.length">
        <adapt-accordion-tab *ngFor="let tab of config.tabs"
                             [title]="tab.title"
                             [isOpen]="tab.isOpen"
                             [disabled]="tab.disabled"
                             [icon]="tab.icon"
                             (open)="openTab.emit(tab)"
                             (close)="closeTab.emit(tab)">
          {{tab.content}}
        </adapt-accordion-tab>
      </div>
    </div>`,
                styles: [`
    .text-direction {
      flex: 1 1;
    }
  `]
            }]
    }], function () { return [{ type: i1.AdaptDeviceDetectionService }, { type: i2.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { config: [{
            type: Input
        }], multiselect: [{
            type: Input
        }], bordered: [{
            type: Input
        }], openTab: [{
            type: Output
        }], closeTab: [{
            type: Output
        }] }); })();
export class AdaptAccordionTabComponent {
    constructor(accordion, deviceDetector, adaptRadarService, _ngZone) {
        this.accordion = accordion;
        this.deviceDetector = deviceDetector;
        this.adaptRadarService = adaptRadarService;
        this._ngZone = _ngZone;
        this.animationState = 'close';
        /** Workaround: to prevent weird expansion in popovers */
        this.isCloseAnimationProcessing = false;
        this.id = `adapt_accordion_tab_id_${AdaptAccordionTabComponent.ID++}`;
        /**
         * @docs-default true
         */
        this.renderContentWhenClosed = true;
        /**
         * Adds class to tab element, allows passing utility classes
         * @docs-default
         */
        this.customClass = '';
        /* eslint-disable @angular-eslint/no-output-native */
        /**
         * An event fires on tab open
         */
        this.open = new EventEmitter();
        /**
         * An event fires on tab close
         */
        this.close = new EventEmitter();
        this._isOpen = false;
        this._multiline = false;
        this._disabled = false;
        this._destroyed$ = new ReplaySubject(1);
        this.accordion.addTab(this);
    }
    get isMobile() {
        return this.deviceDetector.isMobile();
    }
    /**
     * Allows displaying accordion card title in multiple lines
     * @docs-default false
     */
    set multiline(value) {
        this._multiline = toBoolean(value);
    }
    get multiline() {
        return this._multiline;
    }
    /**
     * Tab's disable state
     * @docs-default false
     */
    set disabled(value) {
        this._disabled = value;
        if (value) {
            this.isOpen = false;
        }
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * Tab's open state
     * @docs-default false
     */
    set isOpen(value) {
        const oldIsOpen = this._isOpen;
        this._isOpen = this._disabled ? false : value;
        if (this._isOpen) {
            this.accordion.closeOthers(this);
            this.animationState = 'open';
            this.open.emit();
        }
        else {
            this.animationState = 'close';
            if (oldIsOpen) {
                this.isCloseAnimationProcessing = true;
            }
            this.close.emit();
        }
    }
    get isOpen() {
        return this._isOpen;
    }
    /* eslint-enable @angular-eslint/no-output-native */
    get isOpenOrCloseAnimationProcessing() {
        return this.isOpen || this.isCloseAnimationProcessing;
    }
    animationStartHandler(event) {
        if (event.toState === 'close') {
            this.isCloseAnimationProcessing = true;
        }
    }
    animationEndHandler(event) {
        if (event.toState === 'close') {
            this.isCloseAnimationProcessing = false;
        }
    }
    toggleOpen(event) {
        event.preventDefault();
        this._ngZone.onStable
            .pipe(take(1), takeUntil(this._destroyed$))
            .subscribe(() => {
            var _a;
            this.adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptAccordion, {
                EventType: AdaptRadarAngularCustomEventType.Click,
                AccordionType: this.accordion.multiselect ? 'multi' : 'single',
                HeaderLabel: this.title,
                HeaderIcon: !!this.icon,
                Disabled: !!this.disabled,
                SectionOpen: !this.isOpen,
                OpenSections: (_a = this.accordion._tabs) === null || _a === void 0 ? void 0 : _a.filter(tab => tab.isOpen).length
            });
        });
        if (this.disabled) {
            return;
        }
        this.isOpen = !this.isOpen;
    }
    ngOnDestroy() {
        this.accordion.removeTab(this);
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
}
AdaptAccordionTabComponent.ID = 0;
AdaptAccordionTabComponent.ɵfac = function AdaptAccordionTabComponent_Factory(t) { return new (t || AdaptAccordionTabComponent)(i0.ɵɵdirectiveInject(AdaptAccordionComponent), i0.ɵɵdirectiveInject(i1.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i2.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.NgZone)); };
AdaptAccordionTabComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptAccordionTabComponent, selectors: [["adapt-accordion-tab"]], inputs: { title: "title", renderContentWhenClosed: "renderContentWhenClosed", customClass: "customClass", multiline: "multiline", icon: "icon", disabled: "disabled", isOpen: "isOpen" }, outputs: { open: "open", close: "close" }, ngContentSelectors: _c6, decls: 33, vars: 33, consts: [[1, "card-header"], ["type", "button", "role", "button", "tabindex", "0", 1, "card-title", "border-0", 3, "disabled", "id", "click"], [3, "class", 4, "ngIf"], [1, "text-direction", "text-url-break-out", 3, "ngClass"], [3, "ngClass"], [1, "tab-caret", 2, "min-width", "10px"], ["role", "region", 3, "ngStyle", "id"], ["tabContentWrapper", ""], [1, "card-block"], [4, "ngIf"]], template: function AdaptAccordionTabComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef(_c1);
        i0.ɵɵtext(0, "\n    ");
        i0.ɵɵelementStart(1, "div");
        i0.ɵɵtext(2, "\n      ");
        i0.ɵɵelementStart(3, "div", 0);
        i0.ɵɵtext(4, "\n        ");
        i0.ɵɵelementStart(5, "button", 1);
        i0.ɵɵlistener("click", function AdaptAccordionTabComponent_Template_button_click_5_listener($event) { return ctx.toggleOpen($event); });
        i0.ɵɵtext(6, "\n          ");
        i0.ɵɵtemplate(7, AdaptAccordionTabComponent_span_7_Template, 1, 2, "span", 2);
        i0.ɵɵtext(8, "\n\n          ");
        i0.ɵɵelementStart(9, "div", 3);
        i0.ɵɵtext(10, "\n            ");
        i0.ɵɵelementStart(11, "span", 4);
        i0.ɵɵtext(12);
        i0.ɵɵelementEnd();
        i0.ɵɵtext(13, "\n            ");
        i0.ɵɵprojection(14);
        i0.ɵɵtext(15, "\n          ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(16, "\n\n          ");
        i0.ɵɵelement(17, "span", 5);
        i0.ɵɵtext(18, "\n        ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(19, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(20, "\n      ");
        i0.ɵɵelementStart(21, "div", 6, 7);
        i0.ɵɵlistener("@tabAnimation.start", function AdaptAccordionTabComponent_Template_div_animation_tabAnimation_start_21_listener($event) { return ctx.animationStartHandler($event); })("@tabAnimation.done", function AdaptAccordionTabComponent_Template_div_animation_tabAnimation_done_21_listener($event) { return ctx.animationEndHandler($event); });
        i0.ɵɵtext(23, "\n        ");
        i0.ɵɵelementStart(24, "div", 8);
        i0.ɵɵtext(25, "\n          ");
        i0.ɵɵelementStart(26, "div", 4);
        i0.ɵɵtext(27, "\n            ");
        i0.ɵɵtemplate(28, AdaptAccordionTabComponent_ng_content_28_Template, 1, 0, "ng-content", 9);
        i0.ɵɵtext(29, "\n          ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(30, "\n        ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(31, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(32, "\n    ");
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵclassMapInterpolate1("card ", ctx.customClass, "");
        i0.ɵɵclassProp("tab-disabled", ctx.disabled);
        i0.ɵɵattribute("aria-selected", ctx.isOpen);
        i0.ɵɵadvance(4);
        i0.ɵɵclassProp("collapsed", !ctx.isOpen);
        i0.ɵɵproperty("disabled", ctx.disabled)("id", ctx.id);
        i0.ɵɵattribute("aria-expanded", ctx.isOpen)("data-testid", ctx.id)("aria-controls", ctx.id + "_controls");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.icon);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(23, _c2, ctx.isMobile || ctx.multiline, !ctx.multiline));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(26, _c3, !ctx.multiline));
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx.title);
        i0.ɵɵadvance(9);
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction2(28, _c4, !ctx.isCloseAnimationProcessing ? "visible" : "hidden", ctx.isOpenOrCloseAnimationProcessing ? "block" : "none"))("@tabAnimation", ctx.animationState)("id", ctx.id + "_controls");
        i0.ɵɵattribute("aria-labelledby", ctx.id);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(31, _c5, !ctx.isOpen));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.renderContentWhenClosed || ctx.isOpenOrCloseAnimationProcessing);
    } }, directives: [i3.NgIf, i3.NgClass, i3.NgStyle], styles: [".card-container-hidden {visibility: hidden}"], encapsulation: 2, data: { animation: [
            trigger('tabAnimation', [
                state('close', style({ height: '0px', visibility: 'hidden', opacity: 0 })),
                state('open', style({ height: 'auto', visibility: 'visible', opacity: 1 })),
                transition('close => open', [
                    style({ height: '0px', visibility: 'hidden', opacity: 0, overflow: 'hidden' }),
                    animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ height: '*', visibility: 'visible', opacity: 1, overflow: 'hidden' }))
                ]),
                transition('open => close', [
                    style({ height: '*', visibility: 'visible', opacity: 1, overflow: 'hidden' }),
                    animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ height: '0px', visibility: 'hidden', opacity: 0, overflow: 'hidden' }))
                ]),
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptAccordionTabComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-accordion-tab',
                template: `
    <div class="card {{customClass}}" [class.tab-disabled]="disabled" [attr.aria-selected]="isOpen">
      <div class="card-header">
        <button class="card-title border-0"
                [class.collapsed]="!isOpen"
                (click)="toggleOpen($event)"
                [attr.aria-expanded]="isOpen"
                [disabled]="disabled"
                [id]="id"
                [attr.data-testid]="id"
                [attr.aria-controls]="id + '_controls'"
                type="button" role="button" tabindex="0">
          <span *ngIf="icon" [class]="'mr-1 ' + icon"></span>

          <div class="text-direction text-url-break-out"
               [ngClass]="{ 'column': isMobile || multiline, 'ellipsis': !multiline }">
            <span [ngClass]="{ 'ellipsis': !multiline }">{{title}}</span>
            <ng-content select=".card-title-text"></ng-content>
          </div>

          <span class="tab-caret" style="min-width:10px;"></span>
        </button>
      </div>
      <div #tabContentWrapper
           [ngStyle]="{'overflow': !isCloseAnimationProcessing ? 'visible' : 'hidden', 'display': isOpenOrCloseAnimationProcessing ? 'block' : 'none' }"
           [@tabAnimation]="animationState"
           (@tabAnimation.start)="animationStartHandler($event)"
           (@tabAnimation.done)="animationEndHandler($event)"
           role="region"
           [id]="id + '_controls'"
           [attr.aria-labelledby]="id">
        <div class="card-block">
          <div [ngClass]="{ 'card-container-hidden': !isOpen }">
            <ng-content *ngIf="renderContentWhenClosed || isOpenOrCloseAnimationProcessing"></ng-content>
          </div>
        </div>
      </div>
    </div>`,
                animations: [
                    trigger('tabAnimation', [
                        state('close', style({ height: '0px', visibility: 'hidden', opacity: 0 })),
                        state('open', style({ height: 'auto', visibility: 'visible', opacity: 1 })),
                        transition('close => open', [
                            style({ height: '0px', visibility: 'hidden', opacity: 0, overflow: 'hidden' }),
                            animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ height: '*', visibility: 'visible', opacity: 1, overflow: 'hidden' }))
                        ]),
                        transition('open => close', [
                            style({ height: '*', visibility: 'visible', opacity: 1, overflow: 'hidden' }),
                            animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ height: '0px', visibility: 'hidden', opacity: 0, overflow: 'hidden' }))
                        ]),
                    ])
                ],
                styles: ['.card-container-hidden {visibility: hidden}'],
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: AdaptAccordionComponent }, { type: i1.AdaptDeviceDetectionService }, { type: i2.AdaptRadarAngularService }, { type: i0.NgZone }]; }, { title: [{
            type: Input
        }], renderContentWhenClosed: [{
            type: Input
        }], customClass: [{
            type: Input
        }], multiline: [{
            type: Input
        }], icon: [{
            type: Input
        }], disabled: [{
            type: Input
        }], isOpen: [{
            type: Input
        }], open: [{
            type: Output
        }], close: [{
            type: Output
        }] }); })();
//# sourceMappingURL=accordion.component.js.map