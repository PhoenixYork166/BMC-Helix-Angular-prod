/**
 * @file Service: PromiseTracker
 * @author yumao<yuzhang.lille@gmail.com>
 */
// Inspired by angular-promise-tracker
// Add Observable Subscription
import { Injectable } from '@angular/core';
import { Subscription, Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class PromiseTrackerService {
    constructor() {
        this.promiseList = [];
        this.delayJustFinished = false;
        this.activeState$ = new Subject();
    }
    reset(options) {
        this.minDuration = options.minDuration;
        this.promiseList = [];
        options.promiseList.forEach(promise => {
            // Todo check if dot notation can be removed and types are refactored
            // eslint-disable-next-line
            if (!promise || promise['busyFulfilled']) {
                return;
            }
            this.addPromise(promise);
        });
        if (this.promiseList.length === 0) {
            this.activeState$.next(this.isActive());
            return;
        }
        this.delayJustFinished = false;
        if (options.delay) {
            this.delayPromise = window.setTimeout(() => {
                this.delayPromise = null;
                this.delayJustFinished = true;
                this.activeState$.next(this.isActive());
            }, options.delay);
        }
        if (options.minDuration) {
            this.durationPromise = window.setTimeout(() => {
                this.durationPromise = null;
                this.activeState$.next(this.isActive());
            }, options.minDuration + (options.delay || 0));
        }
    }
    isActive() {
        if (this.delayPromise) {
            return false;
        }
        if (!this.delayJustFinished) {
            if (this.durationPromise) {
                return true;
            }
            return this.promiseList.length > 0;
        }
        this.delayJustFinished = false;
        if (this.promiseList.length === 0) {
            this.durationPromise = null;
        }
        return this.promiseList.length > 0;
    }
    addPromise(promise) {
        if (this.promiseList.indexOf(promise) !== -1) {
            return;
        }
        this.promiseList.push(promise);
        if (promise instanceof Promise) {
            promise.then.call(promise, () => this.finishPromise(promise), () => this.finishPromise(promise));
        }
        else if (promise instanceof Subscription) {
            promise.add(() => this.finishPromise(promise));
        }
        this.activeState$.next(this.isActive());
    }
    finishPromise(promise) {
        // TODO fix types
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        promise.busyFulfilled = true;
        const index = this.promiseList.indexOf(promise);
        if (index === -1) {
            return;
        }
        this.promiseList.splice(index, 1);
        this.activeState$.next(this.isActive());
    }
}
PromiseTrackerService.ɵfac = function PromiseTrackerService_Factory(t) { return new (t || PromiseTrackerService)(); };
PromiseTrackerService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: PromiseTrackerService, factory: PromiseTrackerService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PromiseTrackerService, [{
        type: Injectable
    }], null, null); })();
//# sourceMappingURL=promise-tracker.service.js.map