import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { fromEvent, merge } from 'rxjs';
import { flatMap, startWith, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
const _c0 = ["clockEl"];
function ClockComponent_div_6_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const label_r3 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(label_r3.uiValue);
} }
function ClockComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5);
    i0.ɵɵtext(1, "\n                  ");
    i0.ɵɵelementStart(2, "div", 6);
    i0.ɵɵtext(3, "\n                      ");
    i0.ɵɵtemplate(4, ClockComponent_div_6_span_4_Template, 2, 1, "span", 7);
    i0.ɵɵtext(5, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n              ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const label_r3 = ctx.$implicit;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵstyleProp("transform", "rotate(" + label_r3.angle + "deg)");
    i0.ɵɵclassProp("active", ctx_r1.isClockLabelActive(label_r3));
    i0.ɵɵadvance(2);
    i0.ɵɵstyleProp("transform", "rotate(" + (-label_r3.angle).toString() + "deg)");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", label_r3.visible);
} }
function ClockComponent_div_9_div_2_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const label_r7 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(label_r7.uiValue);
} }
function ClockComponent_div_9_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5);
    i0.ɵɵtext(1, "\n                  ");
    i0.ɵɵelementStart(2, "div", 6);
    i0.ɵɵtext(3, "\n                      ");
    i0.ɵɵtemplate(4, ClockComponent_div_9_div_2_span_4_Template, 2, 1, "span", 7);
    i0.ɵɵtext(5, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n              ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const label_r7 = ctx.$implicit;
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵstyleProp("transform", "rotate(" + label_r7.angle + "deg)");
    i0.ɵɵclassProp("active", ctx_r6.isClockLabelActive(label_r7));
    i0.ɵɵadvance(2);
    i0.ɵɵstyleProp("transform", "rotate(" + (-label_r7.angle).toString() + "deg)");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", label_r7.visible);
} }
function ClockComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵtemplate(2, ClockComponent_div_9_div_2_Template, 7, 7, "div", 3);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("inactive", !ctx_r2.innerFaceActive);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r2.clockFaceInnerLabelsUI);
} }
export class ClockComponent {
    constructor() {
        this.innerFaceActive = false;
        // Inputs
        this.labels = Array(12)
            .fill(0)
            .map((x, i) => {
            return {
                value: i + 1,
                uiValue: (i + 1).toString()
            };
        });
        /* eslint-disable-next-line @angular-eslint/no-output-native */
        this.change = new EventEmitter();
        this.changeEnd = new EventEmitter();
        this._currentAngle = 0;
        this._ready = false;
        // Distance from center to edge of inner/outer clock's faces
        this._clockFaceDistance = {
            inner: 90,
            outer: 125
        };
    }
    set initialValue(v) {
        this._initialValue = v;
        if (v !== undefined && this._ready) {
            this._checkActiveByValue(v);
        }
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    static GetXY(event) {
        if (event.changedTouches) {
            return { x: event.changedTouches[0].clientX, y: event.changedTouches[0].clientY };
        }
        return { x: event.clientX, y: event.clientY };
    }
    static GetAngle(x1, y1, x2, y2) {
        const distX = x2 - x1;
        const distY = y2 - y1;
        // +450 for starting from 0
        return (Math.atan2(distY, distX) * (180 / Math.PI) + 450) % 360; // return angle in degrees
    }
    static GetDistance(x1, y1, x2, y2) {
        const distX = x2 - x1;
        const distY = y2 - y1;
        return Math.sqrt(distX * distX + distY * distY);
    }
    ngOnInit() {
        this._initClockFace();
        if (!this.disabled) {
            this._initDrag();
        }
        this._ready = true;
    }
    ngOnDestroy() {
        if (this._drag$) {
            this._drag$.unsubscribe();
        }
        if (this._dragEnd$) {
            this._dragEnd$.unsubscribe();
        }
    }
    isClockLabelActive(label) {
        return this.activeFaceLabel && (label.value === this.activeFaceLabel.value);
    }
    _initClockFace() {
        this.clockFaceLabelsUI = this.labels.map((x, i) => {
            const angle = 360 / this.labels.length * (i + 1);
            const variation = 360 / this.labels.length / 2;
            return {
                value: x.value,
                uiValue: x.uiValue,
                angle: angle,
                minAngle: angle - variation,
                maxAngle: (angle + variation) % 360 - .0001,
                visible: this.labelsFilter ? this.labelsFilter(x) : true
            };
        });
        if (this.innerLabels) {
            this.clockFaceInnerLabelsUI = this.innerLabels.map((x, i) => {
                const angle = 360 / this.innerLabels.length * (i + 1);
                const variation = 360 / this.innerLabels.length / 2;
                return {
                    value: x.value,
                    uiValue: x.uiValue,
                    angle: angle,
                    minAngle: angle - variation,
                    maxAngle: (angle + variation) % 360 - .0001,
                    visible: this.innerLabelsFilter ? this.innerLabelsFilter(x) : true
                };
            });
        }
        if (this._initialValue || this._initialValue === 0) {
            this._checkActiveByValue(this._initialValue);
        }
    }
    _initDrag() {
        const _mouseDown$ = fromEvent(this.clockEl.nativeElement, 'mousedown');
        const _mouseMove$ = fromEvent(this.clockEl.nativeElement, 'mousemove');
        const _mouseUp$ = fromEvent(this.clockEl.nativeElement, 'mouseup');
        const _mouseLeave$ = fromEvent(this.clockEl.nativeElement, 'mouseleave');
        const _touchStart$ = fromEvent(this.clockEl.nativeElement, 'touchstart');
        const _touchMove$ = fromEvent(this.clockEl.nativeElement, 'touchmove');
        const _touchEnd$ = fromEvent(this.clockEl.nativeElement, 'touchend');
        const _touchLeave$ = fromEvent(this.clockEl.nativeElement, 'touchleave');
        const start$ = merge(_mouseDown$, _touchStart$);
        const move$ = merge(_mouseMove$, _touchMove$);
        const end$ = merge(_mouseUp$, _touchEnd$);
        const forceEnd$ = merge(_mouseLeave$, _touchLeave$);
        const drag$ = start$.pipe(flatMap(event => move$.pipe(startWith(event), takeUntil(end$), takeUntil(forceEnd$))));
        this._drag$ = drag$.subscribe(this._onDrag.bind(this));
        this._dragEnd$ = end$.subscribe(this._onDragEnd.bind(this));
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    _onDrag(event) {
        const cursorCoords = ClockComponent.GetXY(event);
        const elRect = this.clockEl.nativeElement.getBoundingClientRect();
        const centerX = elRect.left + elRect.width / 2;
        const centerY = elRect.top + elRect.height / 2;
        this._currentAngle = ClockComponent.GetAngle(centerX, centerY, cursorCoords.x, cursorCoords.y);
        const currentDistance = ClockComponent.GetDistance(centerX, centerY, cursorCoords.x, cursorCoords.y);
        this.innerFaceActive = this.clockFaceInnerLabelsUI && currentDistance < this._clockFaceDistance.inner;
        this._checkActiveByAngle();
        if (event.cancelable) {
            event.preventDefault(); // to prevent touch events for 'document'
        }
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    _onDragEnd() {
        this.changeEnd.emit(this.activeFaceLabel.value);
    }
    _checkActiveByAngle() {
        const temp = (this.innerFaceActive ? this.clockFaceInnerLabelsUI : this.clockFaceLabelsUI)
            .filter(x => {
            const cond1 = this._currentAngle >= x.minAngle && this._currentAngle < x.maxAngle;
            const cond2 = x.minAngle > x.maxAngle;
            return cond1 || cond2;
        });
        if (!temp.length) {
            return;
        }
        if (!this.activeFaceLabel || !(this.activeFaceLabel.value === temp[0].value)) {
            this.activeFaceLabel = temp[0];
            this.change.emit(this.activeFaceLabel.value);
        }
    }
    _checkActiveByValue(v) {
        if (this.activeFaceLabel && (this.activeFaceLabel.value === v)) {
            return;
        }
        let newVal;
        let tempA = this.clockFaceLabelsUI.filter(clockFaceVal => {
            return clockFaceVal.value === v;
        });
        if (tempA.length) {
            this.innerFaceActive = false;
            newVal = tempA[0];
        }
        else if (this.clockFaceInnerLabelsUI) {
            tempA = this.clockFaceInnerLabelsUI.filter(clockFaceVal => {
                return clockFaceVal.value === v;
            });
            if (tempA.length) {
                this.innerFaceActive = true;
                newVal = tempA[0];
            }
        }
        if (newVal) {
            this.activeFaceLabel = newVal;
        }
    }
}
ClockComponent.ɵfac = function ClockComponent_Factory(t) { return new (t || ClockComponent)(); };
ClockComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: ClockComponent, selectors: [["adapt-clock"]], viewQuery: function ClockComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clockEl = _t.first);
    } }, inputs: { labels: "labels", innerLabels: "innerLabels", labelsFilter: "labelsFilter", innerLabelsFilter: "innerLabelsFilter", disabled: "disabled", initialValue: "initialValue" }, outputs: { change: "change", changeEnd: "changeEnd" }, decls: 12, vars: 6, consts: [[1, "a-clock-face-wrapper"], ["clockEl", ""], [1, "a-clock-face"], ["class", "a-clock-face-tick", 3, "transform", "active", 4, "ngFor", "ngForOf"], ["class", "a-clock-face a-clock-face-inner", 3, "inactive", 4, "ngIf"], [1, "a-clock-face-tick"], [1, "a-clock-face-label"], [4, "ngIf"], [1, "a-clock-face", "a-clock-face-inner"]], template: function ClockComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtext(0, "\n      ");
        i0.ɵɵelementStart(1, "div", 0, 1);
        i0.ɵɵtext(3, "\n\n          ");
        i0.ɵɵelementStart(4, "div", 2);
        i0.ɵɵtext(5, "\n              ");
        i0.ɵɵtemplate(6, ClockComponent_div_6_Template, 7, 7, "div", 3);
        i0.ɵɵtext(7, "\n          ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(8, "\n\n          ");
        i0.ɵɵtemplate(9, ClockComponent_div_9_Template, 4, 3, "div", 4);
        i0.ɵɵtext(10, "\n\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(11, "\n  ");
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("a-clock--disabled", ctx.disabled);
        i0.ɵɵadvance(3);
        i0.ɵɵclassProp("inactive", ctx.innerFaceActive);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx.clockFaceLabelsUI);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.clockFaceInnerLabelsUI);
    } }, directives: [i1.NgForOf, i1.NgIf], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ClockComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-clock',
                template: `
      <div #clockEl class="a-clock-face-wrapper" [class.a-clock--disabled]="disabled">

          <div class="a-clock-face" [class.inactive]="innerFaceActive">
              <div class="a-clock-face-tick"
                   *ngFor="let label of clockFaceLabelsUI"
                   [style.transform]="'rotate(' + label.angle + 'deg)'"
                   [class.active]="isClockLabelActive(label)">
                  <div class="a-clock-face-label"
                       [style.transform]="'rotate(' + (-label.angle).toString() + 'deg)'">
                      <span *ngIf="label.visible">{{label.uiValue}}</span>
                  </div>
              </div>
          </div>

          <div class="a-clock-face a-clock-face-inner" [class.inactive]="!innerFaceActive" *ngIf="clockFaceInnerLabelsUI">
              <div class="a-clock-face-tick"
                   *ngFor="let label of clockFaceInnerLabelsUI"
                   [style.transform]="'rotate(' + label.angle + 'deg)'"
                   [class.active]="isClockLabelActive(label)">
                  <div class="a-clock-face-label"
                       [style.transform]="'rotate(' + (-label.angle).toString() + 'deg)'">
                      <span *ngIf="label.visible">{{label.uiValue}}</span>
                  </div>
              </div>
          </div>

      </div>
  `
            }]
    }], null, { labels: [{
            type: Input
        }], innerLabels: [{
            type: Input
        }], labelsFilter: [{
            type: Input
        }], innerLabelsFilter: [{
            type: Input
        }], disabled: [{
            type: Input
        }], change: [{
            type: Output
        }], changeEnd: [{
            type: Output
        }], clockEl: [{
            type: ViewChild,
            args: ['clockEl', { static: true }]
        }], initialValue: [{
            type: Input
        }] }); })();
//# sourceMappingURL=clock.component.js.map