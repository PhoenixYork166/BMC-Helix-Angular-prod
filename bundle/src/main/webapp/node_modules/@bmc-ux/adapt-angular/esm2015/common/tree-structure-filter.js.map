{"version":3,"file":"tree-structure-filter.js","sourceRoot":"","sources":["../../../../../libs/adapt-angular/src/common/tree-structure-filter.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\nimport {KeyValueObject} from './common.models';\nimport {isString} from './utilities';\n\ninterface TreeItem {\n  items?: TreeItem[] | KeyValueObject;\n}\n\ntype FilterQuery = string | number | boolean | null;\n\n\n@Injectable()\nexport class AdaptTreeStructureFilteringService {\n\n  // TODO: Cover with unit tests!\n  filter<T extends TreeItem>(items: T[], filterQuery: FilterQuery, filterByProp: string): T[] {\n    return this.onFilter(items, filterQuery, filterByProp);\n  }\n\n  // Filtering logic took from PrimeNG and simplified\n  private onFilter<T extends TreeItem>(items: T[], filterQuery: FilterQuery, filterByProp: string): T[] {\n    if (filterQuery === '') {\n      return null;\n    } else {\n      const filteredNodes = [];\n\n      for (let _i = 0, _a = items; _i < _a.length; _i++) {\n        const node = _a[_i];\n        const copyNode = {...node};\n\n        if (((this.findFilteredNodes(copyNode, filterQuery, filterByProp)\n          || this.isFilterMatched(copyNode, filterQuery, filterByProp)))) {\n          filteredNodes.push(copyNode);\n        }\n      }\n\n      return filteredNodes;\n    }\n  }\n\n  private findFilteredNodes<T extends TreeItem>(node: T, filterQuery: FilterQuery, filterByProp: string): boolean {\n    if (node) {\n      let matched = false;\n\n      if (node.items) {\n        const childNodes = node.items;\n\n        node.items = [];\n\n        for (let _i = 0, childNodes1 = childNodes; _i < childNodes1.length; _i++) {\n          const childNode = childNodes1[_i];\n          const copyChildNode = {...childNode};\n\n          if (this.isFilterMatched(copyChildNode, filterQuery, filterByProp)) {\n            matched = true;\n            node.items.push(copyChildNode);\n          }\n        }\n      }\n\n      if (matched) {\n        return true;\n      }\n    }\n  }\n\n  private isFilterMatched<T extends TreeItem>(node: T, filterQuery: FilterQuery, filterByProp: string): boolean {\n    let matched = false;\n\n    if (isString(filterQuery)) {\n      const filterQueryLowerCase = (filterQuery as string).toLowerCase();\n      const fieldValue = this.removeAccents(String(node[filterByProp])).toLowerCase();\n\n      if (fieldValue.indexOf(filterQueryLowerCase) > -1) {\n        matched = true;\n      }\n    } else {\n      if (node[filterByProp] === filterQuery) {\n        matched = true;\n      }\n    }\n\n    if (!matched || Boolean(node.items && node.items.length)) {\n      matched = this.findFilteredNodes(node, filterQuery, filterByProp) || matched;\n    }\n\n    return matched;\n  }\n\n  private removeAccents(str: string): string {\n    if (str) {\n      str = str\n        .replace(/[\\xC0-\\xC5]/g, 'A')\n        .replace(/[\\xC6]/g, 'AE')\n        .replace(/[\\xC7]/g, 'C')\n        .replace(/[\\xC8-\\xCB]/g, 'E')\n        .replace(/[\\xCC-\\xCF]/g, 'I')\n        .replace(/[\\xD0]/g, 'D')\n        .replace(/[\\xD1]/g, 'N')\n        .replace(/[\\xD2-\\xD6\\xD8]/g, 'O')\n        .replace(/[\\xD9-\\xDC]/g, 'U')\n        .replace(/[\\xDD]/g, 'Y')\n        .replace(/[\\xDE]/g, 'P')\n        .replace(/[\\xE0-\\xE5]/g, 'a')\n        .replace(/[\\xE6]/g, 'ae')\n        .replace(/[\\xE7]/g, 'c')\n        .replace(/[\\xE8-\\xEB]/g, 'e')\n        .replace(/[\\xEC-\\xEF]/g, 'i')\n        .replace(/[\\xF1]/g, 'n')\n        .replace(/[\\xF2-\\xF6\\xF8]/g, 'o')\n        .replace(/[\\xF9-\\xFC]/g, 'u')\n        .replace(/[\\xFE]/g, 'p')\n        .replace(/[\\xFD\\xFF]/g, 'y');\n    }\n\n    return str;\n  }\n}\n"]}