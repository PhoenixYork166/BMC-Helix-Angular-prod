import { Component, ElementRef, Input, ViewEncapsulation } from '@angular/core';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { ANIMATION_DURATION, ANIMATION_TIMING_FUNCTION } from '../common/animation';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "../common/radar/adapt-radar";
const _c0 = ["*"];
// eslint-disable-next-line @angular-eslint/component-class-suffix
export class AdaptCollapseDirective extends AdaptRadarAngularGenericDirective {
    constructor(_adaptRadarService, _elem) {
        super(_adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptCollapse);
        // Is Collapsed flag
        this.isCollapsed = true;
    }
    /**
     * Accessor for collapse attribute.
     * Show or hide collapsible block according to value
     * @docs-default
     */
    set collapse(value) {
        if (value) {
            this.hide();
        }
        else {
            this.show();
        }
    }
    /**
     * Hide collapsible block
     */
    hide() {
        this.isCollapsed = true;
    }
    /**
     * Show collapsible block
     */
    show() {
        this.isCollapsed = false;
    }
    /**
     * Toggle collapsible block
     */
    toggle() {
        if (this.isCollapsed) {
            this.show();
        }
        else {
            this.hide();
        }
    }
}
AdaptCollapseDirective.ɵfac = function AdaptCollapseDirective_Factory(t) { return new (t || AdaptCollapseDirective)(i0.ɵɵdirectiveInject(i1.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptCollapseDirective.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptCollapseDirective, selectors: [["adapt-collapse"], ["", "collapse", ""]], inputs: { collapse: "collapse" }, exportAs: ["collapse"], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 6, vars: 1, consts: [[1, "collapse-block"]], template: function AdaptCollapseDirective_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtext(0, "\n    ");
        i0.ɵɵelementStart(1, "div", 0);
        i0.ɵɵtext(2, "\n      ");
        i0.ɵɵprojection(3);
        i0.ɵɵtext(4, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(5, "\n  ");
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("@collapseAnimation", ctx.isCollapsed);
    } }, styles: ["\n    .collapse-block {\n      overflow: hidden;\n    }\n\n    .collapse-block:before,\n    .collapse-block:after {\n      content: '';\n      display: table;\n    }\n  "], encapsulation: 2, data: { animation: [
            trigger('collapseAnimation', [
                state('void', style({
                    height: '0',
                    overflow: 'hidden',
                    visibility: 'hidden'
                })),
                state('1', style({
                    height: '0',
                    overflow: 'hidden',
                    visibility: 'hidden'
                })),
                state('0', style({
                    height: '*',
                    overflow: 'visible',
                    visibility: 'visible'
                })),
                transition('1 => 0', [
                    style({ height: '0', overflow: 'hidden', visibility: 'visible' }),
                    animate(ANIMATION_DURATION.fast + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ height: '*', overflow: 'hidden', visibility: 'visible' }))
                ]),
                transition('0 => 1', [
                    style({ height: '*', overflow: 'hidden', visibility: 'visible' }),
                    animate(ANIMATION_DURATION.fast + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ height: '0', overflow: 'hidden', visibility: 'visible' }))
                ])
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptCollapseDirective, [{
        type: Component,
        args: [{
                selector: 'adapt-collapse, [collapse]',
                exportAs: 'collapse',
                template: `
    <div class="collapse-block"
         [@collapseAnimation]="isCollapsed">
      <ng-content></ng-content>
    </div>
  `,
                animations: [
                    trigger('collapseAnimation', [
                        state('void', style({
                            height: '0',
                            overflow: 'hidden',
                            visibility: 'hidden'
                        })),
                        state('1', style({
                            height: '0',
                            overflow: 'hidden',
                            visibility: 'hidden'
                        })),
                        state('0', style({
                            height: '*',
                            overflow: 'visible',
                            visibility: 'visible'
                        })),
                        transition('1 => 0', [
                            style({ height: '0', overflow: 'hidden', visibility: 'visible' }),
                            animate(ANIMATION_DURATION.fast + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ height: '*', overflow: 'hidden', visibility: 'visible' }))
                        ]),
                        transition('0 => 1', [
                            style({ height: '*', overflow: 'hidden', visibility: 'visible' }),
                            animate(ANIMATION_DURATION.fast + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ height: '0', overflow: 'hidden', visibility: 'visible' }))
                        ])
                    ])
                ],
                styles: [`
    .collapse-block {
      overflow: hidden;
    }

    .collapse-block:before,
    .collapse-block:after {
      content: '';
      display: table;
    }
  `],
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: i1.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { collapse: [{
            type: Input
        }] }); })();
//# sourceMappingURL=collapse.directive.js.map