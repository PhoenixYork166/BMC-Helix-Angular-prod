{"version":3,"file":"adapt-rx-datetime.types.js","sourceRoot":"","sources":["../../../../../../libs/adapt-angular/src/rx/rx-datetime/adapt-rx-datetime.types.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,WAAW,EAAC,MAAM,2BAA2B,CAAC;AA0DtD,WAAW;AAEX,MAAM,OAAO,aAAa;IAWxB,YAAqB,KAAa;QAAb,UAAK,GAAL,KAAK,CAAQ;IAClC,CAAC;CACF;AAED,MAAM,OAAO,UAAU;CAUtB;AAiBD,OAAO;AAEP,MAAM,OAAO,MAAM;CAOlB;AAED,MAAM,OAAO,YAAY;CAQxB;AAED,QAAQ;AAER,MAAM,OAAO,OAAO;CASnB;AAED,MAAM,OAAO,aAAa;CAOzB;AAED,QAAQ;AAER,MAAM,CAAN,IAAY,WAIX;AAJD,WAAY,WAAW;IACrB,+CAAS,CAAA;IACT,mDAAW,CAAA;IACX,mDAAW,CAAA;AACb,CAAC,EAJW,WAAW,KAAX,WAAW,QAItB;AAED,MAAM,CAAN,IAAY,WAKX;AALD,WAAY,WAAW;IACrB,mDAAW,CAAA;IACX,mDAAW,CAAA;IACX,mDAAW,CAAA;IACX,mDAAW,CAAA;AACb,CAAC,EALW,WAAW,KAAX,WAAW,QAKtB;AAyBD,iBAAiB;AAEjB,MAAM,CAAN,IAAY,oBAOX;AAPD,WAAY,oBAAoB;IAC9B,uEAAY,CAAA;IACZ,+DAAQ,CAAA;IACR,+DAAQ,CAAA;IACR,yEAAa,CAAA;IACb,+DAAQ,CAAA;IACR,iEAAS,CAAA;AACX,CAAC,EAPW,oBAAoB,KAApB,oBAAoB,QAO/B;AAED,MAAM,CAAN,IAAY,qBAOX;AAPD,WAAY,qBAAqB;IAC/B,iEAAQ,CAAA;IACR,2EAAa,CAAA;IACb,+EAAe,CAAA;IACf,+EAAe,CAAA;IACf,iEAAQ,CAAA;IACR,mEAAS,CAAA;AACX,CAAC,EAPW,qBAAqB,KAArB,qBAAqB,QAOhC","sourcesContent":["import type {WeekDay} from '@angular/common';\nimport {DateTimeKey} from '../../common/common.enums';\n\nexport interface RxDateStruct {\n  [DateTimeKey.Year]: number;\n  [DateTimeKey.Month]: number;\n  [DateTimeKey.Date]: number;\n}\n\nexport interface RxTimeStruct {\n  [DateTimeKey.Hours]: number;\n  [DateTimeKey.Minutes]: number;\n  [DateTimeKey.Seconds]: number;\n}\n\nexport interface RxDatetimeStructParseError {\n  query?: string;                // The input string that can't be parsed\n  mode?: RxDatetimePickerMode;   // RxPicker mode\n  locale?: string;               // The current locale\n  hasSeconds?: boolean;          // If the input string should have seconds\n  use12HoursTime?: boolean;      // If the input string should use 12-hours time format\n}\n\nexport interface RxDatetimeStruct extends RxDateStruct, RxTimeStruct {\n  [DateTimeKey.Milliseconds]?: number;\n  [DateTimeKey.TimeZone]?: string;\n  [DateTimeKey.Offset]?: number;\n\n  parseError?: RxDatetimeStructParseError;\n}\n\nexport interface RxDatetimeTexts {\n  clock: {\n    hhBtn: string;\n    mmBtn: string;\n    ssBtn: string;\n    amBtn: string;\n    pmBtn: string;\n    hoursLabel: string;\n    minutesLabel: string;\n    secondsLabel: string;\n    meridiemLabel: string;\n  };\n  emptyDate: string;\n  emptyTime: string;\n  emptyYear: string;\n  emptyMonth: string;\n  cancelBtn: string;\n  clearBtn: string;\n  nextBtn: string;\n  applyBtn: string;\n  calendarBtn: string;\n  clockBtn: string;\n  startRangeLabel: string;\n  endRangeLabel: string;\n  emptyStartRange: string;\n  emptyEndRange: string;\n}\n\n// Calendar\n\nexport class RxCalendarDay {\n  value: RxDateStruct;\n  isSelected: boolean;\n  isToday: boolean;\n  isOtherMonth: boolean;\n  isDisabled: boolean;\n  isRangeFrom: boolean;\n  isRangeTo: boolean;\n  isInRange: boolean;\n  isReadonly: boolean;\n\n  constructor(readonly index: number) {\n  }\n}\n\nexport class RxCalendar {\n  year: number;\n  month: number;\n  dayNames: string[];\n  dayNamesShort: string[];\n  monthNames: string[];\n  monthNamesShort: string[];\n  weeks: RxCalendarDay[][];\n  days: RxCalendarDay[];\n  currentMonthDaysCount: number;\n}\n\nexport interface RxCalendarConfig {\n  firstDayOfWeek?: WeekDay;\n  year?: number;\n  month?: number;\n  activeDate?: RxDateStruct;\n  dayFilter?: (date: RxDateStruct) => boolean;\n  rangeFrom?: RxDateStruct;\n  rangeTo?: RxDateStruct;\n  disabled?: boolean;\n  readonly?: boolean;\n  hideControls?: boolean;\n  expandedControlsStyle?: boolean;\n  texts?: RxDatetimeTexts;\n}\n\n// Year\n\nexport class RxYear {\n  value: number;\n  isToday: boolean;\n  isDisabled: boolean;\n  isRangeFrom: boolean;\n  isRangeTo: boolean;\n  isInRange: boolean;\n}\n\nexport class RxYearConfig {\n  year?: number;\n  activeYear?: number;\n  filter?: (date: RxDateStruct) => boolean;\n  disabled?: boolean;\n  texts?: RxDatetimeTexts;\n  rangeFrom?: number;\n  rangeTo?: number;\n}\n\n// Month\n\nexport class RxMonth {\n  value: RxDateStruct;\n  name: string;\n  isActive: boolean;\n  isToday: boolean;\n  isDisabled: boolean;\n  isInRange: boolean;\n  isRangeFrom: boolean;\n  isRangeTo: boolean;\n}\n\nexport class RxMonthConfig {\n  activeValue?: RxDateStruct;\n  filter?: (date: RxDateStruct) => boolean;\n  disabled?: boolean;\n  texts?: RxDatetimeTexts;\n  rangeFrom?: RxDateStruct;\n  rangeTo?: RxDateStruct;\n}\n\n// Clock\n\nexport enum RxClockMode {\n  Hours = 0,\n  Minutes = 1,\n  Seconds = 2\n}\n\nexport enum RxClockFace {\n  Hours24 = 0,\n  Hours12 = 1,\n  Minutes = 2,\n  Seconds = 3\n}\n\nexport interface RxClockConfig {\n  activeMode?: RxClockMode;\n  activeTime?: RxTimeStruct;\n  initialTime?: RxTimeStruct;\n  use12HoursTime?: boolean;\n  hasSeconds?: boolean;\n  disabled?: boolean;\n  texts?: RxDatetimeTexts;\n}\n\nexport interface RxClockFaceTick {\n  value: number;\n  uiValue: string;\n  isDisabled: boolean;\n}\n\nexport type RxClockFaceTicks = RxClockFaceTick[][];\n\nexport interface RxClockTouchPoint {\n  angle: number;\n  distanceFromCenter: number;\n}\n\n// DateTimePicker\n\nexport enum RxDatetimePickerMode {\n  DateTime = 0,\n  Date = 1,\n  Time = 2,\n  YearMonth = 3,\n  Year = 4,\n  Month = 5\n}\n\nexport enum RxDatetimePickerState {\n  Date = 0,\n  TimeHours = 1,\n  TimeMinutes = 2,\n  TimeSeconds = 3,\n  Year = 4,\n  Month = 5\n}\n\nexport interface RxDatetimePickerConfig {\n  mode?: RxDatetimePickerMode;\n  hasSeconds?: boolean;\n  use12HoursTime?: boolean;\n  firstDayOfWeek?: WeekDay;\n  initialDatetime?: RxDatetimeStruct;\n  activeDatetime?: RxDatetimeStruct;\n  dayFilter?: (date: RxDateStruct) => boolean;\n  rangeFrom?: RxDateStruct;\n  rangeTo?: RxDateStruct;\n  disabled?: boolean;\n  readonly?: boolean;\n  texts?: RxDatetimeTexts;\n}\n"]}