import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
export class AdaptNavHamburgerPipe {
    transform(items, str) {
        /**
         * Filter the array if the name property matches the pattern
         */
        // https://github.com/mishoo/UglifyJS2/issues/2856
        const simpleTestString = function (arr, chars) {
            return arr.filter(function (c) {
                return c.label.toLowerCase().indexOf(chars.toLowerCase()) !== -1;
            });
        };
        if (!items || !str) {
            return items;
        }
        return items.filter(function (item) {
            /*
             if children doesn't match - hide the parent category
             if there is no child items - check if parent match
             */
            return (item.subMenu && simpleTestString(item.subMenu, str).length > 0) ||
                (item.label.toLowerCase().indexOf(str.toLowerCase()) !== -1);
        });
    }
}
AdaptNavHamburgerPipe.ɵfac = function AdaptNavHamburgerPipe_Factory(t) { return new (t || AdaptNavHamburgerPipe)(); };
AdaptNavHamburgerPipe.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "navFilter", type: AdaptNavHamburgerPipe, pure: false });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptNavHamburgerPipe, [{
        type: Pipe,
        args: [{
                name: 'navFilter',
                pure: false
            }]
    }], null, null); })();
export class AdaptNavTextSearchPipe {
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    transform(items, str) {
        // TODO: double check this with UX about
        // in case we have match in parent category
        // if (items[0].parent.name.toLowerCase().indexOf(str.toLowerCase() !== 1)) {
        //   return items;
        // } else {
        // TODO: Refactor this if possible
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        return items.filter(function (c) {
            return (c.name || c.label).toLowerCase().indexOf(str.toLowerCase()) !== -1;
        });
        // }
    }
}
AdaptNavTextSearchPipe.ɵfac = function AdaptNavTextSearchPipe_Factory(t) { return new (t || AdaptNavTextSearchPipe)(); };
AdaptNavTextSearchPipe.ɵpipe = /*@__PURE__*/ i0.ɵɵdefinePipe({ name: "navFilterSubItems", type: AdaptNavTextSearchPipe, pure: false });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptNavTextSearchPipe, [{
        type: Pipe,
        args: [{
                name: 'navFilterSubItems',
                pure: false
            }]
    }], null, null); })();
//# sourceMappingURL=navigation.pipe.js.map