{"version":3,"file":"popup.js","sourceRoot":"","sources":["../../../../../libs/adapt-angular/src/common/popup.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Injector,\n  TemplateRef,\n  ViewRef,\n  ViewContainerRef,\n  Renderer2,\n  ComponentRef,\n  ComponentFactoryResolver,\n  ApplicationRef\n} from '@angular/core';\n\nexport class ContentRef {\n  // TODO: Refactor this if possible\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  constructor(public nodes: any[], public viewRef?: ViewRef, public componentRef?: ComponentRef<any>) {\n  }\n}\n\nexport class PopupService<T> {\n  private _windowRef: ComponentRef<T>;\n  private _contentRef: ContentRef;\n\n  constructor(\n    // TODO: Refactor this if possible\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    private _type: any,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    private _renderer: Renderer2,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _applicationRef: ApplicationRef) {}\n\n  // TODO: Refactor this if possible\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  open(content?: string | TemplateRef<any>, context?: any): ComponentRef<T> {\n    if (!this._windowRef) {\n      this._contentRef = this._getContentRef(content, context);\n      this._windowRef = this._viewContainerRef.createComponent(\n        this._componentFactoryResolver.resolveComponentFactory<T>(this._type),\n        this._viewContainerRef.length,\n        this._injector,\n        this._contentRef.nodes);\n    }\n\n    return this._windowRef;\n  }\n\n  close(): void {\n    if (this._windowRef) {\n      if (this._viewContainerRef.indexOf(this._windowRef.hostView) >= 0) {\n        this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowRef.hostView));\n      }\n\n      this._applicationRef.detachView(this._windowRef.hostView);\n      this._windowRef.destroy();\n      this._windowRef = null;\n\n      if (this._contentRef?.viewRef) {\n        this._applicationRef.detachView(this._contentRef.viewRef);\n        this._contentRef.viewRef.destroy();\n        this._contentRef = null;\n      }\n    }\n  }\n\n  // TODO: Refactor this if possible\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  private _getContentRef(content: string | TemplateRef<any>, context?: any): ContentRef {\n    if (!content) {\n      return new ContentRef([]);\n    } else if (content instanceof TemplateRef) {\n      const viewRef = content.createEmbeddedView(context);\n\n      this._applicationRef.attachView(viewRef);\n\n      return new ContentRef([viewRef.rootNodes], viewRef);\n    } else {\n      return new ContentRef([[this._renderer.createText(`${content}`)]]);\n    }\n  }\n}\n"]}