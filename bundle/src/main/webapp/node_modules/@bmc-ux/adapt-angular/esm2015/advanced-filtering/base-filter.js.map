{"version":3,"file":"base-filter.js","sourceRoot":"","sources":["../../../../../libs/adapt-angular/src/advanced-filtering/base-filter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,UAAU,EAAE,YAAY,EAAE,KAAK,EAAa,MAAM,EAAE,SAAS,EAAC,MAAM,eAAe,CAAC;AACvG,OAAO,EAAC,aAAa,EAAC,MAAM,MAAM,CAAC;AAEnC,OAAO,EAAC,sBAAsB,EAAC,MAAM,mBAAmB,CAAC;AACzD,OAAO,EAAC,qBAAqB,EAAC,MAAM,sBAAsB,CAAC;AAE3D,OAAO,EACL,gCAAgC,EAChC,iCAAiC,EACjC,wBAAwB,EACzB,MAAM,6BAA6B,CAAC;;;;;AAErC,IAAI,YAAY,GAAG,CAAC,CAAC;AAErB,MAAM,CAAC,MAAM,wBAAwB,GAAmB,CAAC,aAAa,EAAE,cAAc,EAAE,UAAU,EAAE,WAAW,CAAC,CAAC;AAGjH,MAAM,OAAgB,mBAAmD,SAAQ,iCAAiC;IAsChH,YAAY,EAAyB,EACzB,kBAA4C,EAC5C,KAA8B,EAC9B,WAA6C;QACvD,KAAK,CAAC,kBAAkB,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;QAzChD,cAAS,GAAW,YAAY,EAAE,YAAY,EAAE,CAAC;QAIxC,yBAAoB,GAAY,IAAI,CAAC;QAGrC,WAAM,GAAW,IAAI,CAAC,SAAS,CAAC;QAqBtB,4BAAuB,GAA0B,IAAI,YAAY,EAAW,CAAC;QAEtF,uBAAkB,GAAmB,wBAAwB,CAAC;QACxE,kCAAkC;QAClC,iEAAiE;QACvD,iBAAY,GAAW,EAAS,CAAC;QAEjC,gBAAW,GAA2B,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC;QAQnE,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,kBAAkB,EAAE,CAAC,CAAC;QAC9C,kCAAkC;QAClC,iEAAiE;QACjE,IAAI,CAAC,KAAK,GAAG,EAAS,CAAC;IACzB,CAAC;IAtCD,IACI,iBAAiB,CAAC,KAAqB;QACzC,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC,KAAK,CAAC;IACzF,CAAC;IAED,IAAI,iBAAiB;QACnB,OAAO,IAAI,CAAC,kBAAkB,CAAC;IACjC,CAAC;IAGD,IACI,KAAK,CAAC,KAAa;QACrB,IAAI,CAAC,MAAM,mCAAO,IAAI,CAAC,YAAY,GAAK,KAAK,CAAC,CAAC;IACjD,CAAC;IAED,IAAI,KAAK;QACP,OAAO,IAAI,CAAC,MAAM,CAAC;IACrB,CAAC;IAuBD,WAAW;QACT,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5B,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;IAC9B,CAAC;;sFArDmB,mBAAmB;sEAAnB,mBAAmB;;;;;;uFAAnB,mBAAmB;cADxC,SAAS;uLAIuC,eAAe;kBAA7D,SAAS;mBAAC,iBAAiB,EAAE,EAAC,MAAM,EAAE,KAAK,EAAC;YAEpC,oBAAoB;kBAA5B,KAAK;YACG,gBAAgB;kBAAxB,KAAK;YAEG,MAAM;kBAAd,KAAK;YAGF,iBAAiB;kBADpB,KAAK;YAWF,KAAK;kBADR,KAAK;YASa,uBAAuB;kBAAzC,MAAM","sourcesContent":["import {Directive, ElementRef, EventEmitter, Input, OnDestroy, Output, ViewChild} from '@angular/core';\nimport {ReplaySubject} from 'rxjs';\nimport {PlacementArray} from '../common/positioning';\nimport {AdaptDropdownDirective} from '../dropdown/index';\nimport {AdaptTranslateService} from '../common/i18n/index';\nimport {KeyValueObject} from '../common/common.models';\nimport {\n  AdaptRadarAngularCustomEventName,\n  AdaptRadarAngularGenericDirective,\n  AdaptRadarAngularService\n} from '../common/radar/adapt-radar';\n\nlet nextUniqueId = 0;\n\nexport const defaultDropdownPlacement: PlacementArray = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];\n\n@Directive()\nexport abstract class BaseFilterDirective<TTexts extends KeyValueObject> extends AdaptRadarAngularGenericDirective implements OnDestroy {\n  _uniqueId: string = `adapt-af-${++nextUniqueId}`;\n\n  @ViewChild('filtersDropdown', {static: false}) filtersDropdown: AdaptDropdownDirective;\n\n  @Input() appendDropdownToBody: boolean = true;\n  @Input() anchorDropdownTo: HTMLElement;\n\n  @Input() testID: string = this._uniqueId;\n\n  @Input()\n  set dropdownPlacement(value: PlacementArray) {\n    this._dropdownPlacement = (!value || !value.length) ? defaultDropdownPlacement : value;\n  }\n\n  get dropdownPlacement(): PlacementArray {\n    return this._dropdownPlacement;\n  }\n\n\n  @Input()\n  set texts(value: TTexts) {\n    this._texts = {...this.defaultTexts, ...value};\n  }\n\n  get texts(): TTexts {\n    return this._texts;\n  }\n\n  @Output() readonly dropdownOpenStateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  protected _dropdownPlacement: PlacementArray = defaultDropdownPlacement;\n  // TODO: Refactor this if possible\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  protected defaultTexts: TTexts = {} as any;\n  protected _texts: TTexts;\n  protected _destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n\n  constructor(ts: AdaptTranslateService,\n              _adaptRadarService: AdaptRadarAngularService,\n              _elem: ElementRef<HTMLElement>,\n              _entityName: AdaptRadarAngularCustomEventName) {\n    super(_adaptRadarService, _elem, _entityName);\n\n    this.setDefaultTexts(ts.getCurrentLanguage());\n    // TODO: Refactor this if possible\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    this.texts = {} as any;\n  }\n\n  ngOnDestroy(): void {\n    this._destroyed$.next(true);\n    this._destroyed$.complete();\n  }\n\n  abstract setDefaultTexts(translation: KeyValueObject): void;\n}\n"]}