{"version":3,"file":"adapt-rx-component.js","sourceRoot":"","sources":["../../../../../../libs/adapt-angular/src/rx/form-control/adapt-rx-component.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,UAAU,EACV,YAAY,EACZ,KAAK,EAIL,MAAM,EAEP,MAAM,eAAe,CAAC;AACvB,OAAO,EAAC,aAAa,EAAE,OAAO,EAAC,MAAM,MAAM,CAAC;AAC5C,OAAO,EAAC,qBAAqB,EAAC,MAAM,uBAAuB,CAAC;AAE5D,OAAO,EAAC,qBAAqB,EAAC,MAAM,yBAAyB,CAAC;AAC9D,OAAO,EACL,gCAAgC,EAChC,iCAAiC,EACjC,wBAAwB,EACzB,MAAM,gCAAgC,CAAC;;;;AAExC,IAAI,YAAY,GAAG,CAAC,CAAC;AAGrB,MAAM,OAAgB,yBAA0B,SAAQ,iCAAiC;IAoJvF,uDAAuD;IAEvD,YAA6B,EAAyB,EAChC,kBAA4C,EAC5C,KAA8B,EAC9B,WAA6C;QACjE,KAAK,CAAC,kBAAkB,EAAE,KAAK,EAAE,WAAW,CAAC,CAAC;QAJnB,OAAE,GAAF,EAAE,CAAuB;QA9I5C,cAAS,GAAY,KAAK,CAAC;QAC3B,cAAS,GAAY,KAAK,CAAC;QAC3B,cAAS,GAAY,KAAK,CAAC;QAC3B,eAAU,GAAY,KAAK,CAAC;QAItC;;WAEG;QACM,kBAAa,GAAkB,IAAI,OAAO,EAAQ,CAAC;QAE5D;;WAEG;QACM,aAAQ,GAA2B,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC;QAsBjE;;WAEG;QACM,cAAS,GAAW,IAAI,CAAC;QAElC;;WAEG;QACM,mBAAc,GAAW,IAAI,CAAC;QAEvC;;WAEG;QACM,oBAAe,GAAW,IAAI,CAAC;QA+ExC,wDAAwD;QACxD;;WAEG;QACgB,YAAO,GAA6B,IAAI,YAAY,EAAc,CAAC;QAEtF;;WAEG;QACgB,WAAM,GAA6B,IAAI,YAAY,EAAc,CAAC;IASrF,CAAC;IArFD;;OAEG;IACH,IACI,EAAE;QACJ,OAAO,IAAI,CAAC,GAAG,CAAC;IAClB,CAAC;IAED,IAAI,EAAE,CAAC,KAAa;QAClB,IAAI,CAAC,GAAG,GAAG,KAAK,IAAI,IAAI,CAAC,OAAO,CAAC;IACnC,CAAC;IAED;;OAEG;IACH,IACI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,IAAI,QAAQ,CAAC,KAAc;QACzB,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC;IAED;;OAEG;IACH,IACI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAED,IAAI,QAAQ,CAAC,KAAc;QACzB,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC;IAED,IAAI,cAAc;QAChB,OAAO,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC;IACxC,CAAC;IAED;;OAEG;IACH,IACI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,IAAI,SAAS,CAAC,KAAc;QAC1B,IAAI,CAAC,UAAU,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;IACjD,CAAC;IAED;;;;;;OAMG;IACH,IAAI,gBAAgB;QAClB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED,IAAa,gBAAgB,CAAC,KAAa;QACzC,IAAI,CAAC,iBAAiB,GAAG,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,IAAI,CAAC,eAAe,CAAC;IACzD,CAAC;IAsBD,QAAQ;QACN,gCAAgC;QAChC,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,WAAW,IAAI,YAAY,EAAE,CAAC;QACxD,IAAI,CAAC,eAAe,GAAG,MAAM,IAAI,CAAC,WAAW,qBAAqB,YAAY,EAAE,CAAC;QAEjF,YAAY,EAAE,CAAC;QAEf,0DAA0D;QAC1D,iCAAiC;QACjC,oBAAoB;QACpB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;QAClB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC;QAE9C,mBAAmB;QACnB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,EAAE,CAAC,kBAAkB,EAAE,CAAC,uBAAuB,CAAC,CAAC;QAEjG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,EAAE,CAAC;SACvB;IACH,CAAC;IAED,WAAW,CAAC,OAAsB;QAChC,IAAI,OAAO,CAAC,SAAS,IAAI,qBAAqB,CAAC,OAAO,CAAC,SAAS,CAAC,YAAY,CAAC,KAAK,IAAI,EAAE;YACvF,UAAU,CAAC,GAAG,EAAE;gBACd,IAAI,CAAC,mBAAmB,EAAE,CAAC;YAC7B,CAAC,EAAE,CAAC,CAAC,CAAC;SACP;QAED,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;IAC5B,CAAC;IAED,WAAW;QACT,KAAK,CAAC,WAAW,EAAE,CAAC;QAEpB,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC;QAC9B,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,YAAY,CAAC,KAAiB;QAC5B,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,WAAW,CAAC,KAAiB;QAC3B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;;kGAhNmB,yBAAyB;4EAAzB,yBAAyB;uFAAzB,yBAAyB;cAD9C,SAAS;uLA6BC,IAAI;kBAAZ,KAAK;YAKG,KAAK;kBAAb,KAAK;YAKG,QAAQ;kBAAhB,KAAK;YAKG,aAAa;kBAArB,KAAK;YAKG,SAAS;kBAAjB,KAAK;YAKG,cAAc;kBAAtB,KAAK;YAKG,eAAe;kBAAvB,KAAK;YAKG,QAAQ;kBAAhB,KAAK;YAKG,MAAM;kBAAd,KAAK;YAMF,EAAE;kBADL,KAAK;YAaF,QAAQ;kBADX,KAAK;YAaF,QAAQ;kBADX,KAAK;YAiBF,SAAS;kBADZ,KAAK;YAoBO,gBAAgB;kBAA5B,KAAK;YAQa,OAAO;kBAAzB,MAAM;YAKY,MAAM;kBAAxB,MAAM","sourcesContent":["import {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport {ReplaySubject, Subject} from 'rxjs';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\nimport {AdaptTranslateService} from '../../common/i18n/index';\nimport {\n  AdaptRadarAngularCustomEventName,\n  AdaptRadarAngularGenericDirective,\n  AdaptRadarAngularService\n} from '../../common/radar/adapt-radar';\n\nlet nextUniqueId = 1;\n\n@Directive()\nexport abstract class AdaptRxComponentDirective extends AdaptRadarAngularGenericDirective implements OnInit, OnChanges, OnDestroy, OnDestroy {\n  /**\n   * The control name. It must be implemented by each concrete class.\n   */\n  protected abstract controlName: string;\n\n  protected _uniqId: string;\n  protected _id: string;\n  protected _required: boolean = false;\n  protected _disabled: boolean = false;\n  protected _readonly: boolean = false;\n  protected _autofocus: boolean = false;\n  protected _ariaErrorMessage: string;\n  protected _errorMessageId: string;\n\n  /**\n   * Stream that emits whenever the state of the control changes. Needs to run change detection.\n   */\n  readonly stateChanges$: Subject<void> = new Subject<void>();\n\n  /**\n   * Destroy subject\n   */\n  readonly destroy$: ReplaySubject<boolean> = new ReplaySubject(1);\n\n  /**\n   * Native control name\n   */\n  @Input() name: string;\n\n  /**\n   * Control label text\n   */\n  @Input() label: string;\n\n  /**\n   * Control subLabel text\n   */\n  @Input() subLabel: string;\n\n  /**\n   * Required label text\n   */\n  @Input() requiredLabel: string;\n\n  /**\n   * Control [aria-label] attribute text\n   */\n  @Input() ariaLabel: string = null;\n\n  /**\n   * Control [aria-labeledby] attribute text\n   */\n  @Input() ariaLabelledby: string = null;\n\n  /**\n   * Control [aria-describedby] attribute text\n   */\n  @Input() ariaDescribedBy: string = null;\n\n  /**\n   * Control [tabindex] value\n   */\n  @Input() tabIndex: number;\n\n  /**\n   * String for test id data attribute. For test purposes\n   */\n  @Input() testID: string;\n\n  /**\n   * Control [id]. Returns autogenerated if the value wasn't set\n   */\n  @Input()\n  get id(): string {\n    return this._id;\n  }\n\n  set id(value: string) {\n    this._id = value || this._uniqId;\n  }\n\n  /**\n   * Control [disabled] attribute. No needed if the control uses as reactive one\n   */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Control [readonly] attribute\n   */\n  @Input()\n  get readonly(): boolean {\n    return this._readonly;\n  }\n\n  set readonly(value: boolean) {\n    this._readonly = coerceBooleanProperty(value);\n  }\n\n  get nonInteractive(): boolean {\n    return this.disabled || this.readonly;\n  }\n\n  /**\n   * Control [autofocus] attribute\n   */\n  @Input()\n  get autofocus(): boolean {\n    return this._autofocus;\n  }\n\n  set autofocus(value: boolean) {\n    this._autofocus = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Control [aria-errormessage] attribute value\n   * Important thing here is that 'aria-errormessage' attribute is work in tandem with 'aria-invalid'\n   * Additional info can be found here - https://www.w3.org/TR/wai-aria/#aria-errormessage\n   *\n   * @since 11.3.0\n   */\n  get ariaErrorMessage(): string {\n    return this._ariaErrorMessage;\n  }\n\n  @Input() set ariaErrorMessage(value: string) {\n    this._ariaErrorMessage = value ?? this._errorMessageId;\n  }\n\n  /* eslint-disable @angular-eslint/no-output-on-prefix */\n  /**\n   * Focus emitter\n   */\n  @Output() readonly onFocus: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();\n\n  /**\n   * Blur emitter\n   */\n  @Output() readonly onBlur: EventEmitter<FocusEvent> = new EventEmitter<FocusEvent>();\n\n  /* eslint-enable @angular-eslint/no-output-on-prefix */\n\n  protected constructor(public ts: AdaptTranslateService,\n                        _adaptRadarService: AdaptRadarAngularService,\n                        _elem: ElementRef<HTMLElement>,\n                        _entityName: AdaptRadarAngularCustomEventName) {\n    super(_adaptRadarService, _elem, _entityName);\n  }\n\n  ngOnInit(): void {\n    // Create the uniq ID of control\n    this._uniqId = `rx-${this.controlName}-${nextUniqueId}`;\n    this._errorMessageId = `rx-${this.controlName}-error-message-id-${nextUniqueId}`;\n\n    nextUniqueId++;\n\n    // Force setter to be called in case id was not specified.\n    // TODO: refactor self-assignment\n    /* eslint-disable */\n    this.id = this.id;\n    this.ariaErrorMessage = this.ariaErrorMessage;\n\n    /* eslint-enable */\n    this.requiredLabel = this.requiredLabel || this.ts.getCurrentLanguage()['adapt.common.required'];\n\n    if (!this.testID) {\n      this.testID = this.id;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.autofocus && coerceBooleanProperty(changes.autofocus.currentValue) === true) {\n      setTimeout(() => {\n        this._focusNativeElement();\n      }, 0);\n    }\n\n    this.stateChanges$.next();\n  }\n\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n\n    this.stateChanges$.complete();\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  /**\n   * Callback on input focusHandler\n   */\n  focusHandler(event: FocusEvent): void {\n    this.onFocus.emit(event);\n  }\n\n  /**\n   * Callback on input blurHandler\n   */\n  blurHandler(event: FocusEvent): void {\n    this.onBlur.emit(event);\n  }\n\n  /**\n   * Method that will be invoked when the [autofocus] property is true\n   * Must contain a logic for focusing native control element\n   */\n  protected abstract _focusNativeElement(): void;\n}\n"]}