import { Component, ElementRef, Input, ViewChild, ChangeDetectorRef } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { ResizeService } from '../common/resize/resize.service';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import EMPTY_STATE_SVG_TYPES from './empty-state-svgs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "../common/resize/resize.service";
import * as i3 from "../common/radar/adapt-radar";
import * as i4 from "@angular/common";
const _c0 = ["emptyStateContainer"];
function AdaptEmptyStateComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 4);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("innerHTML", ctx_r1.emptyStateSvg, i0.ɵɵsanitizeHtml);
} }
const _c1 = function (a0) { return { "inverted": a0 }; };
const _c2 = ["*"];
export class AdaptEmptyStateComponent extends AdaptRadarAngularGenericDirective {
    constructor(_domSanitizer, _resizeService, _changeDetectorRef, _adaptRadarService, _elem) {
        super(_adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptEmptyState);
        this._domSanitizer = _domSanitizer;
        this._resizeService = _resizeService;
        this._changeDetectorRef = _changeDetectorRef;
        /**
         * Empty state label
         * @docs-default
         */
        this.label = '';
        /**
         * Toggle inverted mode
         * @docs-default false
         */
        this.inverted = false;
        this._defaultType = EMPTY_STATE_SVG_TYPES['config'];
    }
    /**
     * Empty state icon to be used.
     * Note: string type added for backport compatibility
     * @docs-default
     */
    set type(emptyStateType) {
        this.selectedEmptyStates = EMPTY_STATE_SVG_TYPES[emptyStateType] ? EMPTY_STATE_SVG_TYPES[emptyStateType] : this._defaultType;
        this.emptyStateSvg = this._getEmptyStateHtml(this.selectedEmptyStates);
    }
    ngAfterContentInit() {
        this._resizeService.addResizeEventListener(this.emptyStateContainer.nativeElement, this._checkSize.bind(this));
    }
    ngOnDestroy() {
        this._resizeService.removeResizeEventListener(this.emptyStateContainer.nativeElement);
    }
    _checkSize() {
        this._currentSize = this.emptyStateContainer.nativeElement.offsetWidth;
        if (this.selectedEmptyStates) {
            this.emptyStateSvg = this._getEmptyStateHtml(this.selectedEmptyStates);
            this._changeDetectorRef.detectChanges();
        }
    }
    _getEmptyStateHtml(emptyStateSize) {
        const emptyState = this._getEmptyStateSvg(emptyStateSize);
        return this._domSanitizer.bypassSecurityTrustHtml(emptyState);
    }
    _getEmptyStateSvg(emptyStateSize) {
        let imgSize = 0;
        const s = this._currentSize;
        imgSize = s >= 256 ? 256 : 128;
        imgSize = s >= 512 ? 512 : imgSize;
        if (emptyStateSize[imgSize] === '') {
            return emptyStateSize[128];
        }
        return emptyStateSize[imgSize];
    }
}
AdaptEmptyStateComponent.ɵfac = function AdaptEmptyStateComponent_Factory(t) { return new (t || AdaptEmptyStateComponent)(i0.ɵɵdirectiveInject(i1.DomSanitizer), i0.ɵɵdirectiveInject(i2.ResizeService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptEmptyStateComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptEmptyStateComponent, selectors: [["adapt-empty-state"]], viewQuery: function AdaptEmptyStateComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.emptyStateContainer = _t.first);
    } }, inputs: { label: "label", type: "type", inverted: "inverted" }, features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 11, vars: 5, consts: [[1, "empty-state__container"], ["emptyStateContainer", ""], ["class", "empty-state", 3, "innerHTML", 4, "ngIf"], [1, "empty-state__label", 3, "ngClass"], [1, "empty-state", 3, "innerHTML"]], template: function AdaptEmptyStateComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "div", 0, 1);
        i0.ɵɵtext(2, "\n  ");
        i0.ɵɵtemplate(3, AdaptEmptyStateComponent_div_3_Template, 1, 1, "div", 2);
        i0.ɵɵtext(4, "\n  ");
        i0.ɵɵelementStart(5, "p", 3);
        i0.ɵɵtext(6);
        i0.ɵɵelementEnd();
        i0.ɵɵtext(7, "\n\n  ");
        i0.ɵɵprojection(8);
        i0.ɵɵtext(9, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(10, "\n");
    } if (rf & 2) {
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.emptyStateSvg);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c1, ctx.inverted));
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx.label);
    } }, directives: [i4.NgIf, i4.NgClass], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptEmptyStateComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-empty-state',
                templateUrl: './empty-state.component.html'
            }]
    }], function () { return [{ type: i1.DomSanitizer }, { type: i2.ResizeService }, { type: i0.ChangeDetectorRef }, { type: i3.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { label: [{
            type: Input
        }], type: [{
            type: Input
        }], inverted: [{
            type: Input
        }], emptyStateContainer: [{
            type: ViewChild,
            args: ['emptyStateContainer', { static: true }]
        }] }); })();
//# sourceMappingURL=empty-state.component.js.map