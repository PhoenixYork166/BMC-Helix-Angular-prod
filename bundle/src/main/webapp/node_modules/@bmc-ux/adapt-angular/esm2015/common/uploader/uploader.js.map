{"version":3,"file":"uploader.js","sourceRoot":"","sources":["../../../../../../libs/adapt-angular/src/common/uploader/uploader.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,QAAQ,EAAC,MAAM,0BAA0B,CAAC;AAElD,MAAM,UAAU,gBAAgB,CAAC,KAAa;IAC5C,IAAI,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;IAChC,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC;IACvF,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAEpC,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;QAChC,OAAO,GAAG,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;KACtC;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,CAAS;IACtC,MAAM,KAAK,GAAG,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAE9B,IAAI,KAAK,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,EAAE;QAC3B,IAAI,KAAK,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,EAAE;YAC3B,IAAI,KAAK,GAAG,QAAQ,CAAC,EAAE,GAAG,CAAC,EAAE;gBAC3B,OAAO,CAAC,KAAK,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;aACjD;iBAAM;gBACL,OAAO,CAAC,KAAK,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;aACjD;SACF;aAAM;YACL,OAAO,CAAC,KAAK,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;SACjD;KACF;SAAM;QACL,OAAO,KAAK,GAAG,IAAI,CAAC;KACrB;AACH,CAAC;AAED,MAAM,UAAU,uBAAuB,CAAC,OAAe,EAAE,WAAmB,OAAO;IACjF,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACvD,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,0CAA0C,CAAC,CAAC;IAErE,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,EAAE;QACnB,OAAO,IAAI,CAAC;KACb;IAED,MAAM,EAAC,IAAI,EAAE,SAAS,EAAC,GAAG,KAAK,CAAC,MAAM,CAAC;IACvC,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9B,IAAI,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC;IAC9B,MAAM,KAAK,GAAG,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC;IAEpC,OAAO,KAAK,EAAE,EAAE;QACd,KAAK,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;KAC7C;IAED,OAAO,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,GAAG,QAAQ,IAAI,SAAS,EAAE,EAAE,EAAC,IAAI,EAAC,CAAC,CAAC;AAC/D,CAAC","sourcesContent":["import {FileSize} from './consts/uploader.consts';\n\nexport function retrieveFileSize(value: string): number {\n  let sizeNum = parseFloat(value);\n  const suffix = value.split(sizeNum.toString()).map((item) => item.trim()).reverse()[0];\n  const sizes = Object.keys(FileSize);\n\n  if (sizes.indexOf(suffix) !== -1) {\n    sizeNum = sizeNum * FileSize[suffix];\n  }\n\n  return sizeNum;\n}\n\nexport function formatFileSize(v: string): string {\n  const value = parseInt(v, 10);\n\n  if (value / FileSize.KB > 1) {\n    if (value / FileSize.MB > 1) {\n      if (value / FileSize.GB > 1) {\n        return (value / FileSize.GB).toFixed(2) + ' GB';\n      } else {\n        return (value / FileSize.MB).toFixed(2) + ' MB';\n      }\n    } else {\n      return (value / FileSize.KB).toFixed(2) + ' KB';\n    }\n  } else {\n    return value + ' B';\n  }\n}\n\nexport function getImageFileFromDataURI(dataUri: string, filename: string = 'image'): File {\n  const [mime, data] = (dataUri || '').trim().split(',');\n  const match = mime.match(/^data:(?<type>image\\/(?<extension>\\w+));/);\n\n  if (!match || !data) {\n    return null;\n  }\n\n  const {type, extension} = match.groups;\n  const byteString = atob(data);\n  let index = byteString.length;\n  const u8arr = new Uint8Array(index);\n\n  while (index--) {\n    u8arr[index] = byteString.charCodeAt(index);\n  }\n\n  return new File([u8arr], `${filename}.${extension}`, {type});\n}\n"]}