import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, Input, Renderer2, ViewEncapsulation } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { fromEvent } from 'rxjs';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "../common/radar/adapt-radar";
import * as i2 from "@angular/common";
function AdaptButtonComponent_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 1);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵprojection(2, 1);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementEnd();
} }
const _c0 = ["*", [["", 8, "icon"]]];
const _c1 = ["*", ".icon"];
/**
 * An Array list of button types
 */
const BUTTON_TYPES = [
    'primary',
    'secondary',
    'tertiary',
    'toolbar',
    'success',
    'info',
    'warning',
    'critical',
    'special'
];
/**
 * An array list of button sizes
 */
const BUTTON_SIZES = [
    'xtra-small',
    'small',
    'large',
    'default',
    'block',
    'xtra-large'
];
/**
 * An Error for 'btn-type' user input
 */
export class AdaptBtnTypeError extends Error {
    constructor(type) {
        super(`Button type "${type}" isn't supported (allowed: primary, secondary, tertiary, success, info, warning, critical, special).`);
    }
}
/**
 * An Error for 'size' user input
 */
export class AdaptSizeError extends Error {
    constructor(type) {
        super(`Button size "${type}" isn't supported (allowed: xtra-large, xtra-small, small, default, large, block).`);
    }
}
export class AdaptButtonComponent extends AdaptRadarAngularGenericDirective {
    constructor(elem, _renderer, _adaptRadarService, _elem) {
        super(_adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptButton);
        this.elem = elem;
        this._renderer = _renderer;
        /**
         * Native element tabindex
         * @since v10.14.0
         * @docs-default 0
         */
        this.tabIndex = 0;
        this._disabled = false;
    }
    /**
     * Specifies type of the button.
     * Supported values: "primary", "secondary", "tertiary", "toolbar", "success", "info", "warning", "critical", "special"
     * @docs-default
     */
    get type() {
        return this._type;
    }
    set type(v) {
        this._type = v;
    }
    /**
     * Specifies size of the button.
     * Supported values: "xtra-small", "small", "large", "default", "xtra-large", "block"
     * @docs-default
     */
    get size() {
        return this._size;
    }
    set size(v) {
        this._size = v;
    }
    /**
     * When present, it specifies that the element should be disabled
     * @docs-default false
     */
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set typeAttr(value) {
        if (value) {
            this._typeAttr = value;
            if (this.elem) {
                this._renderer.setAttribute(this.elem.nativeElement, 'type', this._typeAttr);
            }
        }
    }
    ngOnInit() {
        if (!this._typeAttr) {
            this.typeAttr = 'button';
        }
        //   Angular optimizes event handlers, if you have two or more handlers for the same event
        //   it will add only one listener and dispatch result to all components.
        //   It means that stopImmediatePropagation now depends on angular dispatching order.
        //
        //   Angular issue: https://github.com/angular/angular/issues/9587
        //
        //   Workaround: listen click event via rxjs fromEvent (https://github.com/angular/angular/issues/9587#issuecomment-812869074)
        this._clickSubscription =
            fromEvent(this.elem.nativeElement, 'click', { capture: true })
                .subscribe((event) => {
                if (this.disabled) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                }
            });
    }
    ngAfterViewInit() {
        var _a;
        const roleAttribute = (_a = this.elem.nativeElement.attributes.getNamedItem('role')) === null || _a === void 0 ? void 0 : _a.value;
        if (!roleAttribute) {
            this._renderer.setAttribute(this.elem.nativeElement, 'role', 'button');
        }
    }
    ngOnDestroy() {
        if (this._clickSubscription) {
            this._clickSubscription.unsubscribe();
            this._clickSubscription = null;
        }
    }
    /**
     * Throw the error if the user make the mistake with 'btn-type' or 'size' user inputs
     */
    ngOnChanges() {
        if (this.type && BUTTON_TYPES.indexOf(this.type) === -1) {
            throw new AdaptBtnTypeError(this.type);
        }
        if (this.size && BUTTON_SIZES.indexOf(this.size) === -1) {
            throw new AdaptSizeError(this.size);
        }
    }
}
AdaptButtonComponent.ɵfac = function AdaptButtonComponent_Factory(t) { return new (t || AdaptButtonComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptButtonComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptButtonComponent, selectors: [["adapt-button"], ["button", "adapt-button", ""], ["a", "adapt-button", ""]], hostVars: 36, hostBindings: function AdaptButtonComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("disabled", ctx.disabled ? "disabled" : null)("tabindex", ctx.tabIndex);
        i0.ɵɵclassProp("btn", true)("keyboard-focusable", true)("btn-primary", ctx.type == "primary" || ctx.type == "special")("btn-secondary", ctx.type == "secondary")("btn-link", ctx.type == "tertiary" || ctx.type == "toolbar")("btn-toolbar", ctx.type == "toolbar")("btn-success", ctx.type == "success")("btn-info", ctx.type == "info")("btn-warning", ctx.type == "warning")("btn-danger", ctx.type == "critical" || ctx.type == "danger")("btn-xs", ctx.size == "xtra-small")("btn-sm", ctx.size == "small")("btn-lg", ctx.size == "large")("btn-xl", ctx.size == "xtra-large")("btn-block", ctx.size == "block")("icon-change", ctx.type == "special")("disabled", ctx.disabled);
    } }, inputs: { type: ["btn-type", "type"], size: "size", disabled: "disabled", typeAttr: ["type", "typeAttr"], tabIndex: "tabIndex" }, exportAs: ["adaptBtn"], features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c1, decls: 5, vars: 1, consts: [["class", "icon-change-block", 4, "ngIf"], [1, "icon-change-block"]], template: function AdaptButtonComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef(_c0);
        i0.ɵɵtext(0, "\n    ");
        i0.ɵɵtemplate(1, AdaptButtonComponent_span_1_Template, 4, 0, "span", 0);
        i0.ɵɵtext(2, "\n    ");
        i0.ɵɵprojection(3);
        i0.ɵɵtext(4, "\n  ");
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.type === "special");
    } }, directives: [i2.NgIf], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptButtonComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-button, button[adapt-button], a[adapt-button]',
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[attr.disabled]': ' disabled ? "disabled": null ',
                    '[class.btn]': 'true',
                    '[class.keyboard-focusable]': 'true',
                    '[class.btn-primary]': 'type == "primary" || type == "special"',
                    '[class.btn-secondary]': 'type == "secondary"',
                    '[class.btn-link]': 'type == "tertiary" || type == "toolbar"',
                    '[class.btn-toolbar]': 'type == "toolbar"',
                    '[class.btn-success]': 'type == "success"',
                    '[class.btn-info]': 'type == "info"',
                    '[class.btn-warning]': 'type == "warning"',
                    '[class.btn-danger]': 'type == "critical" || type == "danger"',
                    '[class.btn-xs]': 'size == "xtra-small"',
                    '[class.btn-sm]': 'size == "small"',
                    '[class.btn-lg]': 'size == "large"',
                    '[class.btn-xl]': 'size == "xtra-large"',
                    '[class.btn-block]': 'size == "block"',
                    '[class.icon-change]': 'type=="special"',
                    '[class.disabled]': 'disabled'
                },
                exportAs: 'adaptBtn',
                template: `
    <span class="icon-change-block" *ngIf="type === 'special'">
          <ng-content select=".icon"></ng-content>
      </span>
    <ng-content></ng-content>
  `,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { type: [{
            type: Input,
            args: ['btn-type']
        }], size: [{
            type: Input,
            args: ['size']
        }], disabled: [{
            type: Input
        }], typeAttr: [{
            type: Input,
            args: ['type']
        }], tabIndex: [{
            type: HostBinding,
            args: ['attr.tabindex']
        }, {
            type: Input
        }] }); })();
//# sourceMappingURL=button.component.js.map