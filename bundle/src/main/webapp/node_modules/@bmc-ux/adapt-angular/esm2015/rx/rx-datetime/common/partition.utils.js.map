{"version":3,"file":"partition.utils.js","sourceRoot":"","sources":["../../../../../../../libs/adapt-angular/src/rx/rx-datetime/common/partition.utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {RxDatetimeStruct} from '../adapt-rx-datetime.types';\nimport {getValidTimeZone} from './time-zone.utils';\nimport {isInvalidDate} from './validate.utils';\n\n/**\n * formatToParts() function\n *\n * Creates a string Map of all the parts of the input date and (optional) time zone\n */\nexport function formatToParts(date: Date, timeZone?: string): Map<string, string> {\n  if (!date) {\n    return null;\n  } else if (isInvalidDate(date)) {\n    return new Map();\n  }\n\n  // Use the Intl API to get local ISO 8601 string parts for a given time zone.\n  timeZone = getValidTimeZone(timeZone);\n\n  const options = {\n    timeZone,\n    calendar: 'iso8601',\n    numberingSystem: 'latn',\n    hourCycle: 'h23',\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n  } as const;\n\n  const dateTimeFormat = new Intl.DateTimeFormat(undefined, options);\n\n  const formattedParts: [string, string][] =\n    dateTimeFormat.formatToParts(date).reduce((memo, x) => {\n      x.type !== 'literal' && memo.push([x.type, x.value]);\n\n      return memo;\n    }, [\n      ['millisecond', date.getMilliseconds().toString().padStart(3, '0')],\n      ['timeZone', timeZone]\n    ]);\n\n  return new Map(formattedParts);\n}\n\n/**\n * getDateParts() function\n *\n * Converts an input date object into the extended Struct object used by Adapt\n */\nexport function getDateParts(date: Date, timeZone?: string | number): RxDatetimeStruct {\n  if (!date) {\n    return null;\n  }\n\n  if (!timeZone && timeZone !== 0) {\n    // no need for the more complex Intl calculations if timeZone is not specified\n    return {\n      year: date.getFullYear(),\n      month: date.getMonth(),\n      date: date.getDate(),\n      hours: date.getHours(),\n      minutes: date.getMinutes(),\n      seconds: date.getSeconds(),\n      milliseconds: date.getMilliseconds()\n    };\n  }\n\n  if (typeof timeZone === 'number') {\n    timeZone = Math.round(timeZone);\n\n    const offsetAdjustedDate = new Date(date.valueOf() - timeZone * 60 * 1000);\n\n    return {\n      year: offsetAdjustedDate.getUTCFullYear(),\n      month: offsetAdjustedDate.getUTCMonth(),\n      date: offsetAdjustedDate.getUTCDate(),\n      hours: offsetAdjustedDate.getUTCHours(),\n      minutes: offsetAdjustedDate.getUTCMinutes(),\n      seconds: offsetAdjustedDate.getUTCSeconds(),\n      milliseconds: offsetAdjustedDate.getUTCMilliseconds(),\n      offset: timeZone\n    };\n  }\n\n  const dateParts = formatToParts(date, timeZone);\n\n  return dateParts && {\n    year: +dateParts.get('year'),\n    month: +dateParts.get('month') - 1,\n    date: +dateParts.get('day'),\n    hours: +dateParts.get('hour'),\n    minutes: +dateParts.get('minute'),\n    seconds: +dateParts.get('second'),\n    milliseconds: +dateParts.get('millisecond'),\n    timeZone: dateParts.get('timeZone')\n  };\n}\n"]}