{"version":3,"file":"hammer-gestures.config.js","sourceRoot":"","sources":["../../../../../libs/adapt-angular/src/common/hammer-gestures.config.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AACzC,OAAO,KAAK,MAAM,MAAM,UAAU,CAAC;AACnC,OAAO,EAAC,mBAAmB,EAAC,MAAM,2BAA2B,CAAC;;AAC9D,2FAA2F;AAG3F,MAAM,OAAO,iBAAkB,SAAQ,mBAAmB;IAD1D;;QAEE,cAAS,GAA2B;YAClC,OAAO,EAAE,EAAC,QAAQ,EAAE,GAAG,EAAE,SAAS,EAAE,EAAE,EAAE,SAAS,EAAE,MAAM,CAAC,aAAa,EAAC;SACzE,CAAC;KA4BH;IA1BC,8DAA8D;IAC9D,WAAW,CAAC,OAAoB;QAE9B,IAAI,OAAO,GAAG;YACZ,WAAW,EAAE,SAAS;SACvB,CAAC;QAEF,0DAA0D;QAC1D,oDAAoD;QACpD,IAAI,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK,KAAK,cAAc,EAAE;YAC/D,OAAO,GAAG;gBACR,WAAW,EAAE,OAAO;aACrB,CAAC;SACH;QAED,MAAM,EAAE,GAAG,IAAI,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAExC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC;QACpC,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,EAAC,MAAM,EAAE,IAAI,EAAC,CAAC,CAAC;QAErC,KAAK,MAAM,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YACnD,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;SAClD;QAED,OAAO,EAAE,CAAC;IACZ,CAAC;;6OA9BU,iBAAiB,SAAjB,iBAAiB;uEAAjB,iBAAiB,WAAjB,iBAAiB;uFAAjB,iBAAiB;cAD7B,UAAU","sourcesContent":["import {Injectable} from '@angular/core';\nimport * as Hammer from 'hammerjs';\nimport {HammerGestureConfig} from '@angular/platform-browser';\n// import {HammerInstance} from '@angular/platform-browser/src/dom/events/hammer_gestures';\n\n@Injectable()\nexport class AdaptHammerConfig extends HammerGestureConfig {\n  overrides: Record<string, Object> = {\n    'swipe': {velocity: 0.4, threshold: 20, direction: Hammer.DIRECTION_ALL},\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  buildHammer(element: HTMLElement): any {\n\n    let options = {\n      touchAction: 'compute',\n    };\n\n    // https://github.bmc.com/bmc-ux/adapt-angular/issues/2072\n    // we need to set pan-y for carousel components only\n    if (element.dataset && element.dataset.adapt === 'hammer-pan-y') {\n      options = {\n        touchAction: 'pan-y',\n      };\n    }\n\n    const mc = new Hammer(element, options);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (const eventName of Object.keys(this.overrides)) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\n}\n"]}