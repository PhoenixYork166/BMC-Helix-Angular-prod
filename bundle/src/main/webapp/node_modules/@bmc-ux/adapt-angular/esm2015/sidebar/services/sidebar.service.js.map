{"version":3,"file":"sidebar.service.js","sourceRoot":"","sources":["../../../../../../libs/adapt-angular/src/sidebar/services/sidebar.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAY,MAAM,eAAe,CAAC;AAIpD,OAAO,EAAC,OAAO,EAAC,MAAM,MAAM,CAAC;;AAG7B,MAAM,OAAO,mBAAmB;IADhC;QA4BE,eAAU,GAAoB,IAAI,OAAO,EAAE,CAAC;QAEpC,YAAO,GAAgC,EAAE,CAAC;KAmCnD;IA/DC,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,IAAI,UAAU,CAAC,KAAa;QAC1B,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,EAAE;YAClC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC;SAC/C;QAED,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;IACpC,CAAC;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,IAAI,WAAW,CAAC,KAAa;QAC3B,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS,EAAE;YACnC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC;SAChD;QAED,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;IACpC,CAAC;IAQD,UAAU,CAAC,MAA4C;QACrD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,CAAC;IACnD,CAAC;IAED,iBAAiB,CAAC,OAA+C;QAC/D,MAAM,MAAM,GAAgC,EAAE,CAAC;QAE/C,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACvB,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBAC5B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IACzC,CAAC;IAED,WAAW,CAAC,EAAU;QACpB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACvB,CAAC;IAED,YAAY,CAAC,EAAU;QACrB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;IACxB,CAAC;IAEO,UAAU,CAAC,MAAmC;QACpD,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE;YAC9B,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC;YAEd,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;;sFA/DU,mBAAmB;yEAAnB,mBAAmB,WAAnB,mBAAmB;uFAAnB,mBAAmB;cAD/B,UAAU","sourcesContent":["import {Injectable, QueryList} from '@angular/core';\n\nimport {AdaptSidebarColumnComponent} from '../sidebar-column/sidebar-column.component';\nimport {AdaptSidebarItemComponent} from '../sidebar-item/sidebar-item.component';\nimport {Subject} from 'rxjs';\n\n@Injectable()\nexport class AdaptSidebarService {\n  get selectedId(): number {\n    return this._selectedId;\n  }\n\n  set selectedId(selId: number) {\n    if (this._selectedId !== undefined) {\n      this._panels[this._selectedId].opened = false;\n    }\n\n    this._selectedId = selId;\n    this._panels[selId].opened = true;\n  }\n\n  get selectedId2(): number {\n    return this._selectedId2;\n  }\n\n  set selectedId2(selId: number) {\n    if (this._selectedId2 !== undefined) {\n      this._panels[this._selectedId2].opened = false;\n    }\n\n    this._selectedId2 = selId;\n    this._panels[selId].opened = true;\n  }\n\n  closePanel: Subject<number> = new Subject();\n\n  private _panels: AdaptSidebarItemComponent[] = [];\n  private _selectedId: number;\n  private _selectedId2: number;\n\n  initPanels(panels: QueryList<AdaptSidebarItemComponent>): void {\n    this._panels = this._getPanels(panels.toArray());\n  }\n\n  initColumnsPanels(columns: QueryList<AdaptSidebarColumnComponent>): void {\n    const panels: AdaptSidebarItemComponent[] = [];\n\n    columns.forEach(column => {\n      column.panels.forEach(panel => {\n        panels.push(panel);\n      });\n    });\n\n    this._panels = this._getPanels(panels);\n  }\n\n  selectPanel(id: number): void {\n    this.selectedId = id;\n  }\n\n  selectPanel2(id: number): void {\n    this.selectedId2 = id;\n  }\n\n  private _getPanels(panels: AdaptSidebarItemComponent[]): AdaptSidebarItemComponent[] {\n    return panels.map((panel, id) => {\n      panel.id = id;\n\n      return panel;\n    });\n  }\n}\n"]}