import { Directive, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { AdaptDropdownDirective } from '../dropdown/index';
import { AdaptTranslateService } from '../common/i18n/index';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "../common/i18n/index";
import * as i2 from "../common/radar/adapt-radar";
const _c0 = ["filtersDropdown"];
let nextUniqueId = 0;
export const defaultDropdownPlacement = ['bottom-left', 'bottom-right', 'top-left', 'top-right'];
export class BaseFilterDirective extends AdaptRadarAngularGenericDirective {
    constructor(ts, _adaptRadarService, _elem, _entityName) {
        super(_adaptRadarService, _elem, _entityName);
        this._uniqueId = `adapt-af-${++nextUniqueId}`;
        this.appendDropdownToBody = true;
        this.testID = this._uniqueId;
        this.dropdownOpenStateChange = new EventEmitter();
        this._dropdownPlacement = defaultDropdownPlacement;
        // TODO: Refactor this if possible
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        this.defaultTexts = {};
        this._destroyed$ = new ReplaySubject(1);
        this.setDefaultTexts(ts.getCurrentLanguage());
        // TODO: Refactor this if possible
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        this.texts = {};
    }
    set dropdownPlacement(value) {
        this._dropdownPlacement = (!value || !value.length) ? defaultDropdownPlacement : value;
    }
    get dropdownPlacement() {
        return this._dropdownPlacement;
    }
    set texts(value) {
        this._texts = Object.assign(Object.assign({}, this.defaultTexts), value);
    }
    get texts() {
        return this._texts;
    }
    ngOnDestroy() {
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
}
BaseFilterDirective.ɵfac = function BaseFilterDirective_Factory(t) { return new (t || BaseFilterDirective)(i0.ɵɵdirectiveInject(i1.AdaptTranslateService), i0.ɵɵdirectiveInject(i2.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.AdaptRadarAngularCustomEventName)); };
BaseFilterDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: BaseFilterDirective, viewQuery: function BaseFilterDirective_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filtersDropdown = _t.first);
    } }, inputs: { appendDropdownToBody: "appendDropdownToBody", anchorDropdownTo: "anchorDropdownTo", testID: "testID", dropdownPlacement: "dropdownPlacement", texts: "texts" }, outputs: { dropdownOpenStateChange: "dropdownOpenStateChange" }, features: [i0.ɵɵInheritDefinitionFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(BaseFilterDirective, [{
        type: Directive
    }], function () { return [{ type: i1.AdaptTranslateService }, { type: i2.AdaptRadarAngularService }, { type: i0.ElementRef }, { type: i2.AdaptRadarAngularCustomEventName }]; }, { filtersDropdown: [{
            type: ViewChild,
            args: ['filtersDropdown', { static: false }]
        }], appendDropdownToBody: [{
            type: Input
        }], anchorDropdownTo: [{
            type: Input
        }], testID: [{
            type: Input
        }], dropdownPlacement: [{
            type: Input
        }], texts: [{
            type: Input
        }], dropdownOpenStateChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=base-filter.js.map