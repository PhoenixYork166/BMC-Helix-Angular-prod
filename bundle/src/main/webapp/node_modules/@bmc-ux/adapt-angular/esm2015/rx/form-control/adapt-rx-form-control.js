import { NgControl } from '@angular/forms';
import { Input, Directive, ChangeDetectorRef, ElementRef } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { AdaptTranslateService } from '../../common/i18n/index';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularCustomEventType, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { hasRequiredValidator } from '../../common/utilities';
import { AdaptRxComponentDirective } from './adapt-rx-component';
import { asapScheduler, timer } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../../common/i18n/index";
import * as i3 from "../../common/radar/adapt-radar";
export class AdaptRxFormControlDirective extends AdaptRxComponentDirective {
    constructor(ngControl, ts, _adaptRadarService, _elem, _entityName, _changeDetectorRef) {
        super(ts, _adaptRadarService, _elem, _entityName);
        /**
         * Label icon with a tooltip or popover
         */
        this.tooltip = null;
        this._hasRequiredValidator = false;
        this.ngControl = ngControl;
        this._changeDetectorRef = _changeDetectorRef;
        this._adaptRadarService = _adaptRadarService;
        // Use the current instance as the input value accessor
        this.ngControl.valueAccessor = this;
        // Save translate service
        this.ts = ts;
    }
    /**
     * Shows if the form control has a required/requiredTrue validator
     */
    get required() {
        return this._hasRequiredValidator;
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this.ngControl) {
            this.ngControl.statusChanges
                .pipe(takeUntil(this.destroy$)) // don't add distinctUntilChanged() because the control can send the same status on validators set, so need to run the check https://github.bmc.com/bmc-ux/adapt-angular/issues/7902
                .subscribe(() => {
                this._hasRequiredValidator = hasRequiredValidator(this.ngControl);
            });
        }
        timer(0, asapScheduler).pipe(takeUntil(this.destroy$)).subscribe(() => {
            // Left here for backward compatibility with child classes
            // The tag-field component requires change detection after the view init
            // Set initial required state with change detection for cases when validator set after ngControl.statusChanges
            this._hasRequiredValidator = hasRequiredValidator(this.ngControl);
            this._changeDetectorRef && this._changeDetectorRef.markForCheck();
        });
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    handleMessageAppeared(message, componentName) {
        var _a;
        const validatorsNames = (_a = message.errors) === null || _a === void 0 ? void 0 : _a.map(error => error.name);
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxFeedback, {
            GroupName: this.adaptRadarGroupName,
            EventType: AdaptRadarAngularCustomEventType.ErrorFired,
            ParentComponent: componentName,
            Label: this.label,
            Required: this.required,
            ErrorsTriggered: validatorsNames
        });
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line */
    _onTouched() {
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line */
    _onChange(_) {
    }
}
AdaptRxFormControlDirective.ɵfac = function AdaptRxFormControlDirective_Factory(t) { return new (t || AdaptRxFormControlDirective)(i0.ɵɵdirectiveInject(i1.NgControl), i0.ɵɵdirectiveInject(i2.AdaptTranslateService), i0.ɵɵdirectiveInject(i3.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i3.AdaptRadarAngularCustomEventName), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
AdaptRxFormControlDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: AdaptRxFormControlDirective, inputs: { tooltip: "tooltip", warningMessage: "warningMessage" }, features: [i0.ɵɵInheritDefinitionFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxFormControlDirective, [{
        type: Directive
    }], function () { return [{ type: i1.NgControl }, { type: i2.AdaptTranslateService }, { type: i3.AdaptRadarAngularService }, { type: i0.ElementRef }, { type: i3.AdaptRadarAngularCustomEventName }, { type: i0.ChangeDetectorRef }]; }, { tooltip: [{
            type: Input
        }], warningMessage: [{
            type: Input
        }] }); })();
//# sourceMappingURL=adapt-rx-form-control.js.map