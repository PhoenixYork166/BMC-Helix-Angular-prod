import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject, Input, LOCALE_ID, Output } from '@angular/core';
import { DOWN_ARROW, UP_ARROW } from '@angular/cdk/keycodes';
import { state, style, transition, trigger, useAnimation } from '@angular/animations';
import { clone, get, isNil, isNull, isUndefined, pick } from 'lodash-es';
import { ANIMATION_NAME } from '../../../common/animation';
import { getEventKeyCode } from '../../../common/key-codes';
import { SafeCdr } from '../../../common/safe-cdr';
import { DateTimeKey } from '../../../common/common.enums';
import { AdaptDeviceDetectionService } from '../../../common/device-detection.service';
import { AdaptRxDatetimeConfigService } from '../adapt-rx-datetime-config.service';
import { AdaptRxDatetimeI18nService } from '../adapt-rx-datetime-i18n.service';
import { RxClockMode, RxDatetimePickerMode, RxDatetimePickerState } from '../adapt-rx-datetime.types';
import * as i0 from "@angular/core";
import * as i1 from "../adapt-rx-datetime-config.service";
import * as i2 from "../adapt-rx-datetime-i18n.service";
import * as i3 from "../../../common/device-detection.service";
import * as i4 from "@angular/common";
import * as i5 from "../../../icon/icon.component";
import * as i6 from "../calendar/adapt-rx-calendar.component";
import * as i7 from "../clock/adapt-rx-clock.component";
import * as i8 from "../year/adapt-rx-year.component";
import * as i9 from "../month/adapt-rx-month.component";
function AdaptRxDatetimePickerComponent_div_7_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelement(2, "adapt-icon", 9);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementStart(4, "button", 10);
    i0.ɵɵlistener("click", function AdaptRxDatetimePickerComponent_div_7_div_2_Template_button_click_4_listener() { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(2); return ctx_r6.toggleTimeMode(false); });
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("@heightAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", "calendar");
    i0.ɵɵadvance(2);
    i0.ɵɵattribute("data-testid", ctx_r4.testID + "_dateSummary")("aria-label", ctx_r4.dateSummary);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r4.dateSummary);
} }
function AdaptRxDatetimePickerComponent_div_7_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 11);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "adapt-rx-calendar", 12);
    i0.ɵɵlistener("onDateChange", function AdaptRxDatetimePickerComponent_div_7_div_4_Template_adapt_rx_calendar_onDateChange_2_listener($event) { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(2); return ctx_r8.onDateChange($event); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("@heightAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("firstDayOfWeek", ctx_r5.calendarConfig.firstDayOfWeek)("year", ctx_r5.calendarConfig.year)("month", ctx_r5.calendarConfig.month)("activeDate", ctx_r5.calendarConfig.activeDate)("dayFilter", ctx_r5.calendarConfig.dayFilter)("rangeFrom", ctx_r5.calendarConfig.rangeFrom)("rangeTo", ctx_r5.calendarConfig.rangeTo)("disabled", ctx_r5.calendarConfig.disabled)("readonly", ctx_r5.calendarConfig.readonly)("hideControls", ctx_r5.calendarConfig.hideControls)("expandedControlsStyle", ctx_r5.calendarConfig.expandedControlsStyle)("texts", ctx_r5.calendarConfig.texts)("testID", ctx_r5.testID);
    i0.ɵɵattribute("data-testid", ctx_r5.testID + "_calendar");
} }
function AdaptRxDatetimePickerComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵtemplate(2, AdaptRxDatetimePickerComponent_div_7_div_2_Template, 7, 6, "div", 6);
    i0.ɵɵtext(3, "\n\n    ");
    i0.ɵɵtemplate(4, AdaptRxDatetimePickerComponent_div_7_div_4_Template, 4, 15, "div", 7);
    i0.ɵɵtext(5, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.timePickerActive && !ctx_r0.hideDatePickerSummary);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r0.timePickerActive);
} }
function AdaptRxDatetimePickerComponent_div_9_ng_container_12_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    const _r16 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n              :\n              ");
    i0.ɵɵelementStart(2, "input", 21);
    i0.ɵɵlistener("focus", function AdaptRxDatetimePickerComponent_div_9_ng_container_12_ng_container_4_Template_input_focus_2_listener($event) { i0.ɵɵrestoreView(_r16); const ctx_r15 = i0.ɵɵnextContext(3); return ctx_r15.changeClockMode(ctx_r15.CLOCK_MODE.Seconds, $event); })("input", function AdaptRxDatetimePickerComponent_div_9_ng_container_12_ng_container_4_Template_input_input_2_listener($event) { i0.ɵɵrestoreView(_r16); const ctx_r17 = i0.ɵɵnextContext(3); return ctx_r17.timeUnitInput($event, ctx_r17.CLOCK_MODE.Seconds); })("keydown", function AdaptRxDatetimePickerComponent_div_9_ng_container_12_ng_container_4_Template_input_keydown_2_listener($event) { i0.ɵɵrestoreView(_r16); const ctx_r18 = i0.ɵɵnextContext(3); return ctx_r18.timeUnitKeydown($event, ctx_r18.CLOCK_MODE.Seconds); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r13 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("value", ctx_r13.timeSummary.s)("disabled", ctx_r13.config.disabled);
    i0.ɵɵattribute("aria-valuenow", ctx_r13.timeSummary.s)("aria-label", ctx_r13.config.texts.clock.secondsLabel)("data-testid", ctx_r13.testID + "_secondsTimeSummary");
} }
function AdaptRxDatetimePickerComponent_div_9_ng_container_12_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    const _r20 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵelementStart(2, "input", 22);
    i0.ɵɵlistener("click", function AdaptRxDatetimePickerComponent_div_9_ng_container_12_ng_container_6_Template_input_click_2_listener() { i0.ɵɵrestoreView(_r20); const ctx_r19 = i0.ɵɵnextContext(3); return ctx_r19.changeMeridiem(); })("focus", function AdaptRxDatetimePickerComponent_div_9_ng_container_12_ng_container_6_Template_input_focus_2_listener($event) { i0.ɵɵrestoreView(_r20); const ctx_r21 = i0.ɵɵnextContext(3); return ctx_r21.toggleTimeMode(true, $event); })("keydown.arrowUp", function AdaptRxDatetimePickerComponent_div_9_ng_container_12_ng_container_6_Template_input_keydown_arrowUp_2_listener($event) { i0.ɵɵrestoreView(_r20); const ctx_r22 = i0.ɵɵnextContext(3); $event.preventDefault(); return ctx_r22.changeMeridiem(); })("keydown.arrowDown", function AdaptRxDatetimePickerComponent_div_9_ng_container_12_ng_container_6_Template_input_keydown_arrowDown_2_listener($event) { i0.ɵɵrestoreView(_r20); const ctx_r23 = i0.ɵɵnextContext(3); $event.preventDefault(); return ctx_r23.changeMeridiem(); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("value", ctx_r14.timeSummary.a)("disabled", ctx_r14.config.disabled);
    i0.ɵɵattribute("aria-valuenow", ctx_r14.timeSummary.a)("aria-label", ctx_r14.config.texts.clock.meridiemLabel)("data-testid", ctx_r14.testID + "_meridiemTimeSummary");
} }
function AdaptRxDatetimePickerComponent_div_9_ng_container_12_Template(rf, ctx) { if (rf & 1) {
    const _r25 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n            :\n            ");
    i0.ɵɵelementStart(2, "input", 21);
    i0.ɵɵlistener("focus", function AdaptRxDatetimePickerComponent_div_9_ng_container_12_Template_input_focus_2_listener($event) { i0.ɵɵrestoreView(_r25); const ctx_r24 = i0.ɵɵnextContext(2); return ctx_r24.changeClockMode(ctx_r24.CLOCK_MODE.Minutes, $event); })("input", function AdaptRxDatetimePickerComponent_div_9_ng_container_12_Template_input_input_2_listener($event) { i0.ɵɵrestoreView(_r25); const ctx_r26 = i0.ɵɵnextContext(2); return ctx_r26.timeUnitInput($event, ctx_r26.CLOCK_MODE.Minutes); })("keydown", function AdaptRxDatetimePickerComponent_div_9_ng_container_12_Template_input_keydown_2_listener($event) { i0.ɵɵrestoreView(_r25); const ctx_r27 = i0.ɵɵnextContext(2); return ctx_r27.timeUnitKeydown($event, ctx_r27.CLOCK_MODE.Minutes); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n\n            ");
    i0.ɵɵtemplate(4, AdaptRxDatetimePickerComponent_div_9_ng_container_12_ng_container_4_Template, 4, 5, "ng-container", 18);
    i0.ɵɵtext(5, "\n\n            ");
    i0.ɵɵtemplate(6, AdaptRxDatetimePickerComponent_div_9_ng_container_12_ng_container_6_Template, 4, 5, "ng-container", 18);
    i0.ɵɵtext(7, "\n          ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("value", ctx_r10.timeSummary.m)("disabled", ctx_r10.config.disabled);
    i0.ɵɵattribute("aria-valuenow", ctx_r10.timeSummary.m)("aria-label", ctx_r10.config.texts.clock.minutesLabel)("data-testid", ctx_r10.testID + "_minutesTimeSummary");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r10.config.hasSeconds);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r10.config.use12HoursTime);
} }
function AdaptRxDatetimePickerComponent_div_9_button_16_Template(rf, ctx) { if (rf & 1) {
    const _r29 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 23);
    i0.ɵɵlistener("click", function AdaptRxDatetimePickerComponent_div_9_button_16_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r29); const ctx_r28 = i0.ɵɵnextContext(2); return ctx_r28.toggleTimeMode(); });
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelement(2, "adapt-icon", 24);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(2);
    i0.ɵɵattribute("data-testid", ctx_r11.testID + "_timeMode");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("name", "angle_down")("adaptRadarDisableEventSending", true)("@rotateAnimation", ctx_r11.timePickerActive);
} }
function AdaptRxDatetimePickerComponent_div_9_div_19_Template(rf, ctx) { if (rf & 1) {
    const _r31 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 25);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "adapt-rx-clock", 26);
    i0.ɵɵlistener("onModeChange", function AdaptRxDatetimePickerComponent_div_9_div_19_Template_adapt_rx_clock_onModeChange_2_listener($event) { i0.ɵɵrestoreView(_r31); const ctx_r30 = i0.ɵɵnextContext(2); return ctx_r30.changeClockMode($event); })("onHoursChange", function AdaptRxDatetimePickerComponent_div_9_div_19_Template_adapt_rx_clock_onHoursChange_2_listener($event) { i0.ɵɵrestoreView(_r31); const ctx_r32 = i0.ɵɵnextContext(2); return ctx_r32.onClockValueChange($event, ctx_r32.CLOCK_MODE.Hours); })("onMinutesChange", function AdaptRxDatetimePickerComponent_div_9_div_19_Template_adapt_rx_clock_onMinutesChange_2_listener($event) { i0.ɵɵrestoreView(_r31); const ctx_r33 = i0.ɵɵnextContext(2); return ctx_r33.onClockValueChange($event, ctx_r33.CLOCK_MODE.Minutes); })("onSecondsChange", function AdaptRxDatetimePickerComponent_div_9_div_19_Template_adapt_rx_clock_onSecondsChange_2_listener($event) { i0.ɵɵrestoreView(_r31); const ctx_r34 = i0.ɵɵnextContext(2); return ctx_r34.onClockValueChange($event, ctx_r34.CLOCK_MODE.Seconds); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("@heightAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("activeMode", ctx_r12.clockConfig.activeMode)("activeTime", ctx_r12.clockConfig.activeTime)("initialTime", ctx_r12.clockConfig.initialTime)("use12HoursTime", ctx_r12.clockConfig.use12HoursTime)("hasSeconds", ctx_r12.clockConfig.hasSeconds)("disabled", ctx_r12.clockConfig.disabled)("texts", ctx_r12.clockConfig.texts)("testID", ctx_r12.testID);
    i0.ɵɵattribute("data-testid", ctx_r12.testID + "_clock");
} }
function AdaptRxDatetimePickerComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    const _r36 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 13);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "div", 14);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementStart(4, "div", 15);
    i0.ɵɵtext(5, "\n        ");
    i0.ɵɵelement(6, "adapt-icon", 9);
    i0.ɵɵtext(7, "\n\n        ");
    i0.ɵɵelementStart(8, "div", 16);
    i0.ɵɵtext(9, "\n          ");
    i0.ɵɵelementStart(10, "input", 17);
    i0.ɵɵlistener("focus", function AdaptRxDatetimePickerComponent_div_9_Template_input_focus_10_listener($event) { i0.ɵɵrestoreView(_r36); const ctx_r35 = i0.ɵɵnextContext(); return ctx_r35.changeClockMode(ctx_r35.CLOCK_MODE.Hours, $event); })("input", function AdaptRxDatetimePickerComponent_div_9_Template_input_input_10_listener($event) { i0.ɵɵrestoreView(_r36); const ctx_r37 = i0.ɵɵnextContext(); return ctx_r37.timeUnitInput($event, ctx_r37.CLOCK_MODE.Hours); })("keydown", function AdaptRxDatetimePickerComponent_div_9_Template_input_keydown_10_listener($event) { i0.ɵɵrestoreView(_r36); const ctx_r38 = i0.ɵɵnextContext(); return ctx_r38.timeUnitKeydown($event, ctx_r38.CLOCK_MODE.Hours); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n          ");
    i0.ɵɵtemplate(12, AdaptRxDatetimePickerComponent_div_9_ng_container_12_Template, 8, 7, "ng-container", 18);
    i0.ɵɵtext(13, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n\n      ");
    i0.ɵɵtemplate(16, AdaptRxDatetimePickerComponent_div_9_button_16_Template, 4, 4, "button", 19);
    i0.ɵɵtext(17, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, "\n\n    ");
    i0.ɵɵtemplate(19, AdaptRxDatetimePickerComponent_div_9_div_19_Template, 4, 10, "div", 20);
    i0.ɵɵtext(20, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("a3t-datetime--time-picker-summary_active", ctx_r1.timePickerActive);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", "clock_o");
    i0.ɵɵadvance(4);
    i0.ɵɵclassProp("a3t-datetime--time-picker-summary-input-field", ctx_r1.timeSummary);
    i0.ɵɵproperty("value", ctx_r1.timeSummary ? ctx_r1.timeSummary.h : ctx_r1.config.texts.emptyTime)("disabled", ctx_r1.config.disabled);
    i0.ɵɵattribute("aria-valuenow", ctx_r1.timeSummary ? ctx_r1.timeSummary.h : ctx_r1.config.texts.emptyTime)("aria-label", ctx_r1.config.texts.clock.hoursLabel)("data-testid", ctx_r1.testID + "_hoursTimeSummary");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r1.timeSummary);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r1.hasCalendar);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r1.timePickerActive);
} }
function AdaptRxDatetimePickerComponent_div_11_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r42 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 28);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "button", 29);
    i0.ɵɵlistener("focus", function AdaptRxDatetimePickerComponent_div_11_div_2_Template_button_focus_2_listener() { i0.ɵɵrestoreView(_r42); const ctx_r41 = i0.ɵɵnextContext(2); return ctx_r41.toggleMonthMode(false); });
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r39 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("@heightAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵattribute("data-testid", ctx_r39.testID + "_yearSummary")("aria-label", ctx_r39.yearSummary);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r39.yearSummary);
} }
function AdaptRxDatetimePickerComponent_div_11_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r44 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 11);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "adapt-rx-year", 30);
    i0.ɵɵlistener("onYearChange", function AdaptRxDatetimePickerComponent_div_11_div_4_Template_adapt_rx_year_onYearChange_2_listener($event) { i0.ɵɵrestoreView(_r44); const ctx_r43 = i0.ɵɵnextContext(2); return ctx_r43.onYearChange($event); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r40 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("@heightAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("year", ctx_r40.yearConfig.year)("activeYear", ctx_r40.yearConfig.activeYear)("filter", ctx_r40.yearConfig.filter)("disabled", ctx_r40.yearConfig.disabled)("rangeFrom", ctx_r40.yearConfig.rangeFrom)("rangeTo", ctx_r40.yearConfig.rangeTo)("texts", ctx_r40.yearConfig.texts)("testID", ctx_r40.testID);
    i0.ɵɵattribute("data-testid", ctx_r40.testID + "_year");
} }
function AdaptRxDatetimePickerComponent_div_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵtemplate(2, AdaptRxDatetimePickerComponent_div_11_div_2_Template, 5, 4, "div", 27);
    i0.ɵɵtext(3, "\n\n    ");
    i0.ɵɵtemplate(4, AdaptRxDatetimePickerComponent_div_11_div_4_Template, 4, 10, "div", 7);
    i0.ɵɵtext(5, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r2.monthPickerActive && !ctx_r2.hideDatePickerSummary);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r2.monthPickerActive);
} }
function AdaptRxDatetimePickerComponent_div_13_button_13_Template(rf, ctx) { if (rf & 1) {
    const _r48 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 23);
    i0.ɵɵlistener("click", function AdaptRxDatetimePickerComponent_div_13_button_13_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r48); const ctx_r47 = i0.ɵɵnextContext(2); return ctx_r47.toggleMonthMode(); });
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelement(2, "adapt-icon", 24);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r45 = i0.ɵɵnextContext(2);
    i0.ɵɵattribute("data-testid", ctx_r45.testID + "_monthMode");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("name", "angle_down")("adaptRadarDisableEventSending", true)("@rotateAnimation", ctx_r45.monthPickerActive);
} }
function AdaptRxDatetimePickerComponent_div_13_div_16_Template(rf, ctx) { if (rf & 1) {
    const _r50 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 34);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "adapt-rx-month", 35);
    i0.ɵɵlistener("activeValueChange", function AdaptRxDatetimePickerComponent_div_13_div_16_Template_adapt_rx_month_activeValueChange_2_listener($event) { i0.ɵɵrestoreView(_r50); const ctx_r49 = i0.ɵɵnextContext(2); return ctx_r49.onMonthChange($event); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r46 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("@heightAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("activeValue", ctx_r46.monthConfig.activeValue)("filter", ctx_r46.monthConfig.filter)("disabled", ctx_r46.monthConfig.disabled)("rangeFrom", ctx_r46.monthConfig.rangeFrom)("rangeTo", ctx_r46.monthConfig.rangeTo)("texts", ctx_r46.monthConfig.texts)("testID", ctx_r46.testID);
    i0.ɵɵattribute("data-testid", ctx_r46.testID + "_month");
} }
function AdaptRxDatetimePickerComponent_div_13_Template(rf, ctx) { if (rf & 1) {
    const _r52 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 31);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "div", 14);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementStart(4, "div", 15);
    i0.ɵɵtext(5, "\n        ");
    i0.ɵɵelementStart(6, "div", 16);
    i0.ɵɵtext(7, "\n              ");
    i0.ɵɵelementStart(8, "span", 32);
    i0.ɵɵlistener("keydown", function AdaptRxDatetimePickerComponent_div_13_Template_span_keydown_8_listener($event) { i0.ɵɵrestoreView(_r52); const ctx_r51 = i0.ɵɵnextContext(); return ctx_r51.changeMonthViaKeyboard($event); })("focus", function AdaptRxDatetimePickerComponent_div_13_Template_span_focus_8_listener() { i0.ɵɵrestoreView(_r52); const ctx_r53 = i0.ɵɵnextContext(); return ctx_r53.toggleMonthMode(true); });
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n\n      ");
    i0.ɵɵtemplate(13, AdaptRxDatetimePickerComponent_div_13_button_13_Template, 4, 4, "button", 19);
    i0.ɵɵtext(14, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n    ");
    i0.ɵɵtemplate(16, AdaptRxDatetimePickerComponent_div_13_div_16_Template, 4, 9, "div", 33);
    i0.ɵɵtext(17, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("a3t-datetime--time-picker-summary_active", ctx_r3.monthPickerActive);
    i0.ɵɵadvance(6);
    i0.ɵɵattribute("tabindex", ctx_r3.config.disabled ? undefined : 0)("aria-valuetext", ctx_r3.monthSummary);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                ", ctx_r3.monthSummary, "\n              ");
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r3.hasYearPicker);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r3.monthPickerActive);
} }
const _c0 = ["*"];
export class AdaptRxDatetimePickerComponent {
    constructor(_datetimeConfigService, _i18n, _changeDetectorRef, deviceDetectionService, localeID) {
        this._i18n = _i18n;
        this._changeDetectorRef = _changeDetectorRef;
        this.localeID = localeID;
        this.today = (() => {
            const _today = new Date();
            return {
                year: _today.getFullYear(),
                month: _today.getMonth(),
                date: _today.getDate(),
                hours: 0,
                minutes: 0,
                seconds: 0
            };
        })();
        // Enums for UI
        this.CLOCK_MODE = RxClockMode;
        this.yearConfig = {};
        this.monthConfig = {};
        this.calendarConfig = {};
        this.clockConfig = {
            activeMode: RxClockMode.Hours
        };
        this.config = {
            mode: undefined,
            hasSeconds: false,
            use12HoursTime: false,
            initialDatetime: this.today,
            dayFilter: undefined,
            rangeFrom: undefined,
            rangeTo: undefined,
            activeDatetime: {
                year: null,
                month: null,
                date: null,
                hours: null,
                minutes: null,
                seconds: null
            },
            disabled: false,
            readonly: false,
            texts: undefined
        };
        this.pickerValueChange = new EventEmitter();
        this.pickerStateChange = new EventEmitter();
        this.hideDatePickerSummary = false;
        this.timeMode = false;
        this.monthMode = false;
        this.publicApi = {
            nextStep: this._nextStep.bind(this),
            isLastStep: this._isLastStep.bind(this)
        };
        this._isLastPickerState = false;
        this.config.texts = _datetimeConfigService.texts;
        this._isMobile = deviceDetectionService.isMobile();
    }
    ngAfterViewInit() {
        this._emitPickerStateChange();
    }
    ngOnChanges(changes) {
        var _a, _b;
        const tempYearConfig = {};
        const tempMonthConfig = {};
        const tempCalendarConfig = {};
        const tempClockConfig = {};
        if (changes.mode && !isNil(changes.mode.currentValue)) {
            this.config.mode = changes.mode.currentValue;
        }
        if (changes.expandedControlsStyle && !isNil(changes.expandedControlsStyle.currentValue)) {
            tempCalendarConfig.expandedControlsStyle = changes.expandedControlsStyle.currentValue;
        }
        if (changes.initialDatetime && !isNil(changes.initialDatetime.currentValue)) {
            this.config.initialDatetime = changes.initialDatetime.currentValue;
            tempYearConfig.year = this.config.initialDatetime.year;
            tempClockConfig.initialTime = {
                hours: this.config.initialDatetime.hours,
                minutes: this.config.initialDatetime.minutes,
                seconds: this.config.initialDatetime.seconds,
            };
            tempCalendarConfig.year = this.config.initialDatetime.year;
            tempCalendarConfig.month = this.config.initialDatetime.month;
        }
        if (changes.activeDatetime && !isUndefined(changes.activeDatetime.currentValue)) {
            const nextActiveDatetime = changes.activeDatetime.currentValue;
            this.config.activeDatetime = {
                year: get(nextActiveDatetime, 'year', null),
                month: get(nextActiveDatetime, 'month', null),
                date: get(nextActiveDatetime, 'date', null),
                hours: get(nextActiveDatetime, 'hours', null),
                minutes: get(nextActiveDatetime, 'minutes', null),
                seconds: get(nextActiveDatetime, 'seconds', null)
            };
            tempYearConfig.activeYear = this.config.activeDatetime.year;
            tempMonthConfig.activeValue = this.config.activeDatetime;
            tempCalendarConfig.activeDate = pick(this.config.activeDatetime, [DateTimeKey.Year, DateTimeKey.Month, DateTimeKey.Date]);
            tempClockConfig.activeTime = pick(this.config.activeDatetime, [DateTimeKey.Hours, DateTimeKey.Minutes, DateTimeKey.Seconds]);
        }
        if (changes.rangeFrom && !isUndefined(changes.rangeFrom.currentValue)) {
            tempCalendarConfig.rangeFrom = changes.rangeFrom.currentValue;
            tempMonthConfig.rangeFrom = changes.rangeFrom.currentValue;
            tempYearConfig.rangeFrom = (_a = changes.rangeFrom.currentValue) === null || _a === void 0 ? void 0 : _a.year;
        }
        if (changes.rangeTo && !isUndefined(changes.rangeTo.currentValue)) {
            tempCalendarConfig.rangeTo = changes.rangeTo.currentValue;
            tempMonthConfig.rangeTo = changes.rangeTo.currentValue;
            tempYearConfig.rangeTo = (_b = changes.rangeTo.currentValue) === null || _b === void 0 ? void 0 : _b.year;
        }
        if (changes.dayFilter && !isUndefined(changes.dayFilter.currentValue)) {
            tempCalendarConfig.dayFilter = changes.dayFilter.currentValue;
            tempMonthConfig.filter = changes.dayFilter.currentValue;
            tempYearConfig.filter = changes.dayFilter.currentValue;
        }
        if (changes.use12HoursTime && !isNil(changes.use12HoursTime.currentValue)) {
            this.config.use12HoursTime = changes.use12HoursTime.currentValue;
            tempClockConfig.use12HoursTime = this.config.use12HoursTime;
        }
        if (changes.firstDayOfWeek && !isNil(changes.firstDayOfWeek.currentValue)) {
            this.config.firstDayOfWeek = changes.firstDayOfWeek.currentValue;
            tempCalendarConfig.firstDayOfWeek = this.config.firstDayOfWeek;
        }
        if (changes.hasSeconds && !isNil(changes.hasSeconds.currentValue)) {
            this.config.hasSeconds = changes.hasSeconds.currentValue;
            tempClockConfig.hasSeconds = this.config.hasSeconds;
        }
        if (changes.readonly) {
            this.config.readonly = changes.readonly.currentValue;
            tempCalendarConfig.readonly = this.config.readonly;
        }
        if (changes.disabled && !isNil(changes.disabled.currentValue)) {
            this.config.disabled = changes.disabled.currentValue;
            tempYearConfig.disabled =
                tempMonthConfig.disabled =
                    tempCalendarConfig.disabled =
                        tempClockConfig.disabled = this.config.disabled;
        }
        if (changes.texts && !isNil(changes.texts.currentValue)) {
            this.config.texts = changes.texts.currentValue;
            tempYearConfig.texts =
                tempMonthConfig.texts =
                    tempCalendarConfig.texts =
                        tempClockConfig.texts = this.config.texts;
        }
        // Update children configs
        Object.assign(this.yearConfig, tempYearConfig);
        Object.assign(this.monthConfig, tempMonthConfig);
        Object.assign(this.calendarConfig, tempCalendarConfig);
        Object.assign(this.clockConfig, tempClockConfig);
    }
    // DATE
    get hasCalendar() {
        return this.config.mode === RxDatetimePickerMode.Date || this.config.mode === RxDatetimePickerMode.DateTime;
    }
    get dateSummary() {
        const hasDate = !isNil(this.config.activeDatetime.year) &&
            !isNil(this.config.activeDatetime.month) &&
            !isNil(this.config.activeDatetime.date);
        return hasDate ? this._i18n.getDateLabel(this.config.activeDatetime, this.localeID) :
            this.config.texts.emptyDate;
    }
    onDateChange(value) {
        Object.assign(this.config.activeDatetime, value);
        this.calendarConfig.activeDate = value;
        this._emitValueChange();
    }
    // TIME
    get hasClockPicker() {
        return this.config.mode === RxDatetimePickerMode.Time || this.config.mode === RxDatetimePickerMode.DateTime;
    }
    get timeSummary() {
        let _timeSummary = null;
        const hasTimeValue = !isNil(this.config.activeDatetime.hours) ||
            !isNil(this.config.activeDatetime.minutes) ||
            !isNil(this.config.activeDatetime.seconds);
        if (this.config.activeDatetime && hasTimeValue) {
            const a = !isNil(this.config.activeDatetime.hours) ?
                this.config.activeDatetime.hours >= 12 ? this.config.texts.clock.pmBtn : this.config.texts.clock.amBtn : null;
            const uiHoursValue = !isNil(this.config.activeDatetime.hours) ?
                this.config.use12HoursTime ? (this.config.activeDatetime.hours % 12) || 12 : this.config.activeDatetime.hours : null;
            _timeSummary = {
                h: !isNull(uiHoursValue) ? ('0' + uiHoursValue).substr(-2) : '--',
                m: !isNil(this.config.activeDatetime.minutes) ? ('0' + this.config.activeDatetime.minutes).substr(-2) : '--',
                s: !isNil(this.config.activeDatetime.seconds) ? ('0' + this.config.activeDatetime.seconds).substr(-2) : '--',
                a: !isNull(uiHoursValue) ? a : '--'
            };
        }
        return _timeSummary;
    }
    get timePickerActive() {
        return this.timeMode || (this.config.mode === RxDatetimePickerMode.Time);
    }
    changeClockMode(mode, event) {
        if (event) {
            this._checkMobileInputFocus(event);
        }
        this.clockConfig.activeMode = mode;
        this.toggleTimeMode(true);
    }
    toggleTimeMode(newState, event) {
        if (event) {
            this._checkMobileInputFocus(event);
        }
        this.timeMode = isNil(newState) ? !this.timeMode : newState;
        // Reset time mode to default state
        if (!this.timeMode) {
            this.clockConfig.activeMode = RxClockMode.Hours;
            this._pickerState = RxDatetimePickerState.TimeHours;
        }
        this._emitPickerStateChange();
    }
    timeUnitInput(event, mode) {
        const value = event.target.value;
        const parsedValue = parseInt(value, 10);
        const parsedValueIsNumber = Number.isInteger(parsedValue);
        switch (mode) {
            case RxClockMode.Hours: {
                this.config.activeDatetime.hours = parsedValueIsNumber ? (parsedValue + 24) % 24 : 0;
                break;
            }
            case RxClockMode.Minutes: {
                this.config.activeDatetime.minutes = parsedValueIsNumber ? (parsedValue + 60) % 60 : 0;
                break;
            }
            case RxClockMode.Seconds: {
                this.config.activeDatetime.seconds = parsedValueIsNumber ? (parsedValue + 60) % 60 : 0;
                break;
            }
        }
        this.clockConfig.activeTime = pick(this.config.activeDatetime, [DateTimeKey.Hours, DateTimeKey.Minutes, DateTimeKey.Seconds]);
        this._emitValueChange();
    }
    timeUnitKeydown(event, mode) {
        const keyCode = getEventKeyCode(event);
        const changeValue = keyCode === UP_ARROW ? 1 : keyCode === DOWN_ARROW ? -1 : null;
        if (changeValue) {
            event.preventDefault();
            switch (mode) {
                case RxClockMode.Hours: {
                    this.config.activeDatetime.hours = !isNil(this.config.activeDatetime.hours) ?
                        (this.config.activeDatetime.hours + 24 + changeValue) % 24 : this.config.initialDatetime.hours;
                    break;
                }
                case RxClockMode.Minutes: {
                    this.config.activeDatetime.minutes = !isNil(this.config.activeDatetime.minutes) ?
                        (this.config.activeDatetime.minutes + 60 + changeValue) % 60 : this.config.initialDatetime.minutes;
                    break;
                }
                case RxClockMode.Seconds: {
                    this.config.activeDatetime.seconds = !isNil(this.config.activeDatetime.seconds) ?
                        (this.config.activeDatetime.seconds + 60 + changeValue) % 60 : this.config.initialDatetime.seconds;
                    break;
                }
                default: {
                    if (!isNil(this.config.activeDatetime.hours)) {
                        this.config.activeDatetime.hours = (this.config.activeDatetime.hours + 12) % 24;
                    }
                }
            }
            this.clockConfig.activeTime = pick(this.config.activeDatetime, [DateTimeKey.Hours, DateTimeKey.Minutes, DateTimeKey.Seconds]);
            this._emitValueChange();
        }
    }
    changeMeridiem() {
        if (!isNil(this.config.activeDatetime.hours)) {
            this.config.activeDatetime.hours = (this.config.activeDatetime.hours + 12) % 24;
        }
        this.clockConfig.activeTime = pick(this.config.activeDatetime, [DateTimeKey.Hours, DateTimeKey.Minutes, DateTimeKey.Seconds]);
        this._emitValueChange();
    }
    onClockValueChange(value, mode) {
        switch (mode) {
            case RxClockMode.Hours: {
                this.config.activeDatetime.hours = value;
                break;
            }
            case RxClockMode.Minutes: {
                this.config.activeDatetime.minutes = value;
                break;
            }
            case RxClockMode.Seconds: {
                this.config.activeDatetime.seconds = value;
                break;
            }
        }
        this.clockConfig.activeTime = pick(this.config.activeDatetime, [DateTimeKey.Hours, DateTimeKey.Minutes, DateTimeKey.Seconds]);
        this._emitValueChange();
    }
    // YEAR
    get hasYearPicker() {
        return this.config.mode === RxDatetimePickerMode.Year || this.config.mode === RxDatetimePickerMode.YearMonth;
    }
    get yearSummary() {
        return !isNil(this.config.activeDatetime.year) ?
            this.config.activeDatetime.year.toString(10) : this.config.texts.emptyYear;
    }
    onYearChange(value) {
        this.config.activeDatetime.year = value;
        this.yearConfig.activeYear = value;
        this._emitValueChange();
    }
    // MONTH
    get hasMonthPicker() {
        return this.config.mode === RxDatetimePickerMode.Month || this.config.mode === RxDatetimePickerMode.YearMonth;
    }
    get monthSummary() {
        return !isNil(this.config.activeDatetime.month) ?
            this._i18n.getMonthNames(false, this.localeID)[this.config.activeDatetime.month] : this.config.texts.emptyMonth;
    }
    get monthPickerActive() {
        return this.monthMode || (this.config.mode === RxDatetimePickerMode.Month);
    }
    toggleMonthMode(newState) {
        this.monthMode = isNil(newState) ? !this.monthMode : newState;
        this._emitPickerStateChange();
    }
    changeMonthViaKeyboard(event) {
        const keyCode = getEventKeyCode(event);
        const changeValue = keyCode === UP_ARROW ? 1 : keyCode === DOWN_ARROW ? -1 : null;
        if (changeValue) {
            event.preventDefault();
            this.config.activeDatetime.month = !isNil(this.config.activeDatetime.month) ?
                (this.config.activeDatetime.month + 12 + changeValue) % 12 : this.config.initialDatetime.month;
            this.monthConfig.activeValue = this.config.activeDatetime;
            this._emitValueChange();
        }
    }
    onMonthChange(value) {
        this.config.activeDatetime.month = value.month;
        this.monthConfig.activeValue = Object.assign({}, value);
        this._emitValueChange();
    }
    _nextStep() {
        switch (this.config.mode) {
            // eslint-disable-next-line no-fallthrough
            case RxDatetimePickerMode.DateTime: {
                if (!this.timeMode) {
                    this.timeMode = true;
                    this._isLastPickerState = false;
                    this._pickerState = RxDatetimePickerState.TimeHours;
                    break;
                }
            }
            // eslint-disable-next-line no-fallthrough
            case RxDatetimePickerMode.Time: {
                switch (this.clockConfig.activeMode) {
                    case RxClockMode.Hours: {
                        this.clockConfig.activeMode = RxClockMode.Minutes;
                        this._pickerState = RxDatetimePickerState.TimeMinutes;
                        this._isLastPickerState = !this.config.hasSeconds;
                        break;
                    }
                    case RxClockMode.Minutes: {
                        if (this.config.hasSeconds) {
                            this.clockConfig.activeMode = RxClockMode.Seconds;
                            this._pickerState = RxDatetimePickerState.TimeSeconds;
                            this._isLastPickerState = true;
                            break;
                        }
                    }
                    // eslint-disable-next-line no-fallthrough
                    case RxClockMode.Seconds: {
                        if (this.config.mode === RxDatetimePickerMode.DateTime) {
                            this.timeMode = false;
                            this._pickerState = RxDatetimePickerState.Date;
                        }
                        else {
                            this._pickerState = RxDatetimePickerState.TimeHours;
                        }
                        this.clockConfig.activeMode = RxClockMode.Hours;
                        this._isLastPickerState = false;
                        break;
                    }
                }
                break;
            }
            case RxDatetimePickerMode.YearMonth: {
                this.monthMode = !this.monthMode;
                this._pickerState = this.monthMode ? RxDatetimePickerState.Month : RxDatetimePickerState.Year;
                this._isLastPickerState = this.monthMode;
                break;
            }
            default: {
                this._isLastPickerState = true;
                break;
            }
        }
        SafeCdr.detectChanges(this._changeDetectorRef);
    }
    _isLastStep() {
        return this._isLastPickerState;
    }
    _emitValueChange() {
        this.pickerValueChange.emit(clone(this.config.activeDatetime));
    }
    _emitPickerStateChange() {
        let pickerState;
        switch (this.config.mode) {
            case RxDatetimePickerMode.Date: {
                pickerState = RxDatetimePickerState.Date;
                this._isLastPickerState = true;
                break;
            }
            case RxDatetimePickerMode.Year: {
                pickerState = RxDatetimePickerState.Year;
                this._isLastPickerState = true;
                break;
            }
            case RxDatetimePickerMode.Month: {
                pickerState = RxDatetimePickerState.Month;
                this._isLastPickerState = true;
                break;
            }
            case RxDatetimePickerMode.YearMonth: {
                pickerState = this.monthMode ? RxDatetimePickerState.Month : RxDatetimePickerState.Year;
                this._isLastPickerState = this.monthMode;
                break;
            }
            case RxDatetimePickerMode.DateTime: {
                if (!this.timeMode) {
                    pickerState = RxDatetimePickerState.Date;
                    this._isLastPickerState = false;
                    break;
                }
            }
            // eslint-disable-next-line no-fallthrough
            case RxDatetimePickerMode.Time: {
                switch (this.clockConfig.activeMode) {
                    case RxClockMode.Hours: {
                        pickerState = RxDatetimePickerState.TimeHours;
                        this._isLastPickerState = false;
                        break;
                    }
                    case RxClockMode.Minutes: {
                        pickerState = RxDatetimePickerState.TimeMinutes;
                        this._isLastPickerState = !this.hasSeconds;
                        break;
                    }
                    case RxClockMode.Seconds: {
                        pickerState = RxDatetimePickerState.TimeSeconds;
                        this._isLastPickerState = true;
                        break;
                    }
                }
                break;
            }
        }
        if (this._pickerState !== pickerState) {
            this._pickerState = pickerState;
            this.pickerStateChange.emit(this._pickerState);
        }
    }
    _checkMobileInputFocus(event) {
        if (this._isMobile) {
            event.preventDefault();
            event.target.blur();
        }
    }
}
AdaptRxDatetimePickerComponent.ɵfac = function AdaptRxDatetimePickerComponent_Factory(t) { return new (t || AdaptRxDatetimePickerComponent)(i0.ɵɵdirectiveInject(i1.AdaptRxDatetimeConfigService), i0.ɵɵdirectiveInject(i2.AdaptRxDatetimeI18nService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(LOCALE_ID)); };
AdaptRxDatetimePickerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptRxDatetimePickerComponent, selectors: [["adapt-rx-datetime-picker"]], inputs: { mode: "mode", expandedControlsStyle: "expandedControlsStyle", hasSeconds: "hasSeconds", use12HoursTime: "use12HoursTime", firstDayOfWeek: "firstDayOfWeek", initialDatetime: "initialDatetime", activeDatetime: "activeDatetime", dayFilter: "dayFilter", rangeFrom: "rangeFrom", rangeTo: "rangeTo", disabled: "disabled", readonly: "readonly", texts: "texts", testID: "testID" }, outputs: { pickerValueChange: "pickerValueChange", pickerStateChange: "pickerStateChange" }, features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 16, vars: 6, consts: [[1, "a3t-datetime"], [1, "px-3"], ["class", "a3t-datetime--date-picker", 4, "ngIf"], ["class", "a3t-datetime--time-picker", 4, "ngIf"], ["class", "a3t-datetime--time-picker a3t-datetime--year-picker", 4, "ngIf"], [1, "a3t-datetime--date-picker"], ["class", "a3t-datetime--date-picker-summary", 4, "ngIf"], ["class", "a3t-datetime--date-picker-wrapper", 4, "ngIf"], [1, "a3t-datetime--date-picker-summary"], [1, "mx-2", 3, "adaptRadarDisableEventSending", "name"], ["type", "button", 3, "click"], [1, "a3t-datetime--date-picker-wrapper"], [3, "firstDayOfWeek", "year", "month", "activeDate", "dayFilter", "rangeFrom", "rangeTo", "disabled", "readonly", "hideControls", "expandedControlsStyle", "texts", "testID", "onDateChange"], [1, "a3t-datetime--time-picker"], [1, "a3t-datetime--time-picker-summary"], [1, "a3t-datetime--time-picker-summary-info"], [1, "a3t-datetime--time-picker-summary-input-wrapper"], ["type", "text", "role", "spinbutton", 1, "a3t-datetime--time-picker-summary-input", 3, "value", "disabled", "focus", "input", "keydown"], [4, "ngIf"], ["type", "button", "class", "a3t-datetime--time-picker-summary-toggle", "aria-hidden", "true", "tabindex", "-1", 3, "click", 4, "ngIf"], ["class", "a3t-datetime--time-picker-wrapper", 4, "ngIf"], ["type", "text", "role", "spinbutton", 1, "a3t-datetime--time-picker-summary-input", "a3t-datetime--time-picker-summary-input-field", 3, "value", "disabled", "focus", "input", "keydown"], ["type", "button", "role", "spinbutton", 1, "a3t-datetime--time-picker-summary-input", "mx-1", 3, "value", "disabled", "click", "focus", "keydown.arrowUp", "keydown.arrowDown"], ["type", "button", "aria-hidden", "true", "tabindex", "-1", 1, "a3t-datetime--time-picker-summary-toggle", 3, "click"], [1, "d-inline-block", "mr-1", 3, "name", "adaptRadarDisableEventSending"], [1, "a3t-datetime--time-picker-wrapper"], [1, "flex-shrink-1", "flex-grow-1", 3, "activeMode", "activeTime", "initialTime", "use12HoursTime", "hasSeconds", "disabled", "texts", "testID", "onModeChange", "onHoursChange", "onMinutesChange", "onSecondsChange"], ["class", "a3t-datetime--date-picker-summary a3t-datetime--year-picker-summary", 4, "ngIf"], [1, "a3t-datetime--date-picker-summary", "a3t-datetime--year-picker-summary"], ["type", "button", 3, "focus"], [3, "year", "activeYear", "filter", "disabled", "rangeFrom", "rangeTo", "texts", "testID", "onYearChange"], [1, "a3t-datetime--time-picker", "a3t-datetime--year-picker"], ["role", "spinbutton", 1, "a3t-datetime--time-picker-summary-input", 3, "keydown", "focus"], ["class", "a3t-datetime--month-picker-wrapper", 4, "ngIf"], [1, "a3t-datetime--month-picker-wrapper"], [3, "activeValue", "filter", "disabled", "rangeFrom", "rangeTo", "texts", "testID", "activeValueChange"]], template: function AdaptRxDatetimePickerComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵtext(1, "\n  ");
        i0.ɵɵelementStart(2, "div", 1);
        i0.ɵɵtext(3, "\n    ");
        i0.ɵɵprojection(4);
        i0.ɵɵtext(5, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(6, "\n\n  ");
        i0.ɵɵtemplate(7, AdaptRxDatetimePickerComponent_div_7_Template, 6, 2, "div", 2);
        i0.ɵɵtext(8, "\n\n  ");
        i0.ɵɵtemplate(9, AdaptRxDatetimePickerComponent_div_9_Template, 21, 14, "div", 3);
        i0.ɵɵtext(10, "\n\n  ");
        i0.ɵɵtemplate(11, AdaptRxDatetimePickerComponent_div_11_Template, 6, 2, "div", 2);
        i0.ɵɵtext(12, "\n\n  ");
        i0.ɵɵtemplate(13, AdaptRxDatetimePickerComponent_div_13_Template, 18, 7, "div", 4);
        i0.ɵɵtext(14, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(15, "\n");
    } if (rf & 2) {
        i0.ɵɵclassProp("a3t-datetime_compact", ctx.hideDatePickerSummary);
        i0.ɵɵadvance(7);
        i0.ɵɵproperty("ngIf", ctx.hasCalendar);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.hasClockPicker);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.hasYearPicker);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.hasMonthPicker);
    } }, directives: [i4.NgIf, i5.AdaptIconComponent, i6.AdaptRxCalendarComponent, i7.AdaptRxClockComponent, i8.AdaptRxYearComponent, i9.AdaptRxMonthComponent], encapsulation: 2, data: { animation: [
            trigger('heightAnimation', [
                transition('void => *', [
                    useAnimation(ANIMATION_NAME.height, {
                        params: {
                            from: '0',
                            to: '*'
                        }
                    })
                ]),
                transition('* => void', [
                    useAnimation(ANIMATION_NAME.height, {
                        params: {
                            from: '*',
                            to: '0'
                        }
                    })
                ])
            ]),
            trigger('rotateAnimation', [
                state('0', style({ transform: 'rotate(180deg)' })),
                state('1', style({ transform: 'rotate(0deg)' })),
                transition('0 => 1', [
                    useAnimation(ANIMATION_NAME.rotate, {
                        params: {
                            from: '180',
                            to: '0'
                        }
                    })
                ]),
                transition('1 => 0', [
                    useAnimation(ANIMATION_NAME.rotate, {
                        params: {
                            from: '0',
                            to: '180'
                        }
                    })
                ])
            ])
        ] }, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxDatetimePickerComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-rx-datetime-picker',
                templateUrl: './adapt-rx-datetime-picker.component.html',
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [
                    trigger('heightAnimation', [
                        transition('void => *', [
                            useAnimation(ANIMATION_NAME.height, {
                                params: {
                                    from: '0',
                                    to: '*'
                                }
                            })
                        ]),
                        transition('* => void', [
                            useAnimation(ANIMATION_NAME.height, {
                                params: {
                                    from: '*',
                                    to: '0'
                                }
                            })
                        ])
                    ]),
                    trigger('rotateAnimation', [
                        state('0', style({ transform: 'rotate(180deg)' })),
                        state('1', style({ transform: 'rotate(0deg)' })),
                        transition('0 => 1', [
                            useAnimation(ANIMATION_NAME.rotate, {
                                params: {
                                    from: '180',
                                    to: '0'
                                }
                            })
                        ]),
                        transition('1 => 0', [
                            useAnimation(ANIMATION_NAME.rotate, {
                                params: {
                                    from: '0',
                                    to: '180'
                                }
                            })
                        ])
                    ])
                ]
            }]
    }], function () { return [{ type: i1.AdaptRxDatetimeConfigService }, { type: i2.AdaptRxDatetimeI18nService }, { type: i0.ChangeDetectorRef }, { type: i3.AdaptDeviceDetectionService }, { type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, { mode: [{
            type: Input
        }], expandedControlsStyle: [{
            type: Input
        }], hasSeconds: [{
            type: Input
        }], use12HoursTime: [{
            type: Input
        }], firstDayOfWeek: [{
            type: Input
        }], initialDatetime: [{
            type: Input
        }], activeDatetime: [{
            type: Input
        }], dayFilter: [{
            type: Input
        }], rangeFrom: [{
            type: Input
        }], rangeTo: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], texts: [{
            type: Input
        }], testID: [{
            type: Input
        }], pickerValueChange: [{
            type: Output
        }], pickerStateChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=adapt-rx-datetime-picker.component.js.map