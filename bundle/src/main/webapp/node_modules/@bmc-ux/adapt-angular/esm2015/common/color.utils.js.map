{"version":3,"file":"color.utils.js","sourceRoot":"","sources":["../../../../../libs/adapt-angular/src/common/color.utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {isNil} from 'lodash-es';\nimport {SafeStyle} from '@angular/platform-browser';\nimport {color, hsl, RGBColor} from 'd3-color';\n\nimport {ColorType} from './common.enums';\n\nexport interface RGBChannels {\n  r: number;\n  g: number;\n  b: number;\n}\n\nexport interface HSVChannels {\n  h: number;\n  s: number;\n  v: number;\n}\n\nexport interface AdaptContrastResults {\n  ratio: string;\n  AA: AdaptContrastScoreState; //This is standard naming convention followed for contrast ratio https://usecontrast.com/guide\n  AALarge: AdaptContrastScoreState; // This is standard naming convention followed for contrast ratio https://usecontrast.com/guide\n  AAA: AdaptContrastScoreState; //This is standard naming convention followed for contrast ratio https://usecontrast.com/guide\n  AAALarge: AdaptContrastScoreState; //This is standard naming convention followed for contrast ratio https://usecontrast.com/guide\n}\n\n/**\n * @deprecated since 11.14.0\n * Use ColorType from '../common/common.enums';\n */\nexport const ColorTypes = { // ToDo: clean up\n  HEX: 'HEX',\n  RGB: 'RGB'\n};\n\nexport interface Color {\n  value: string;\n  name?: string;\n  source?: SourceTypes; // From where color was selected @since 11.8.0\n  borderColor?: SafeStyle; // Border color used to show correct styles after reorder @since 11.13.0\n  backgroundColor?: SafeStyle; // To show correct styles after reorder @since 11.13.0\n  lightness?: number; // Lightness of background for contrast purposes @since 11.13.0\n  selected?: boolean; // To show checkmark on selected color @since 11.13.0\n}\n\ntype AdaptContrastScoreState = 'pass' | 'fail';\n\nexport enum SourceTypes {\n  Theme = 0,\n  Recent = 1,\n  Input = 2,\n  Picker = 3,\n  Empty = 4 // @since 11.12.0\n}\n\nexport const ColorPatterns = {\n  HEX: /^#?([a-fA-F\\d]{2})([a-fA-F\\d]{2})([a-fA-F\\d]{2})$/,\n  RGB: /^(rgb\\()?(1?[0-9]{1,2}|2[0-4][0-9]|25[0-5]),(1?[0-9]{1,2}|2[0-4][0-9]|25[0-5]),(1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])(\\))?$/\n};\n\nexport const ColorPalette = {\n  WHITE: {r: 255, g: 255, b: 255},\n  BLACK: {r: 0, g: 0, b: 0},\n  RED: {r: 255, g: 0, b: 0},\n  YELLOW: {r: 255, g: 255, b: 0},\n  GREEN: {r: 0, g: 255, b: 0},\n  CYAN: {r: 0, g: 255, b: 255},\n  BLUE: {r: 0, g: 0, b: 255},\n  MAGENTA: {r: 255, g: 0, b: 255}\n};\n\nexport const lightnessEdge: number = 50;\nexport const isDarkMode = getComputedStyle(document.documentElement).getPropertyValue('--dark-mode').trim() === 'true';\n\nexport class ColorUtils {\n  static parseColor(color: string, pattern: RegExp, type: ColorType): RGBChannels | null {\n    const regExp = new RegExp(pattern);\n    const match = regExp.exec(color);\n    let radix: number;\n    // TODO: Refactor this if possible\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    let result: any[] | null;\n\n    if (match) {\n      if (type === ColorType.HEX) {\n        result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(color);\n        result = result ? result.slice(1) : result;\n        radix = 16;\n      } else if (type === ColorType.RGB) {\n        result = color.match(/\\d+/gi);\n        radix = 10;\n      }\n\n      return {\n        r: parseInt(result[0], radix),\n        g: parseInt(result[1], radix),\n        b: parseInt(result[2], radix)\n      };\n    }\n\n    return null;\n  }\n\n  static getColorChannelsStr(c: RGBChannels, type: string): string {\n    let color: string;\n\n    if (isNil(c)) {\n      return null;\n    }\n\n    switch (type) {\n      case ColorType.HEX: {\n        color = `${this.decToHex(c.r)}${this.decToHex(c.g)}${this.decToHex(c.b)}`;\n        break;\n      }\n\n      case ColorType.RGB: {\n        color = `${c.r},${c.g},${c.b}`;\n        break;\n      }\n    }\n\n    return color;\n  }\n\n  static getColorStr(c: RGBChannels, type: ColorType): string {\n    let color: string;\n\n    if (isNil(c)) {\n      return null;\n    }\n\n    switch (type) {\n      case ColorType.HEX: {\n        color = `#${this.decToHex(c.r)}${this.decToHex(c.g)}${this.decToHex(c.b)}`;\n        break;\n      }\n\n      case ColorType.RGB: {\n        color = `RGB(${c.r},${c.g},${c.b})`;\n        break;\n      }\n    }\n\n    return color.toLowerCase();\n  }\n\n  static rgbToHSV(color: RGBChannels): HSVChannels {\n    const r = color.r / 255;\n    const g = color.g / 255;\n    const b = color.b / 255;\n\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    const d = max - min;\n\n    let h;\n    const s = max === 0 ? 0 : (d / max);\n    const v = max;\n\n    if (max === min) {\n      h = 0; // achromatic\n    } else {\n      switch (max) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n        case g:\n          h = (b - r) / d + 2;\n          break;\n        case b:\n          h = (r - g) / d + 4;\n          break;\n      }\n\n      h /= 6;\n    }\n\n    return {h, s, v};\n  }\n\n  static hsvToRGB(color: HSVChannels): RGBChannels {\n    let r;\n    let g;\n    let b;\n    const i = Math.floor(color.h * 6);\n    const f = color.h * 6 - i;\n    const p = color.v * (1 - color.s);\n    const q = color.v * (1 - f * color.s);\n    const t = color.v * (1 - (1 - f) * color.s);\n\n    switch (i % 6) {\n      case 0:\n        r = color.v;\n        g = t;\n        b = p;\n        break;\n      case 1:\n        r = q;\n        g = color.v;\n        b = p;\n        break;\n      case 2:\n        r = p;\n        g = color.v;\n        b = t;\n        break;\n      case 3:\n        r = p;\n        g = q;\n        b = color.v;\n        break;\n      case 4:\n        r = t;\n        g = p;\n        b = color.v;\n        break;\n      case 5:\n        r = color.v;\n        g = p;\n        b = q;\n        break;\n    }\n\n    return {\n      r: Math.round(r * 255),\n      g: Math.round(g * 255),\n      b: Math.round(b * 255)\n    };\n  }\n\n  static decToHex(n: number): string {\n    return ('0' + n.toString(16)).slice(-2);\n  }\n\n  // to make a color darker, we should multiply each component (r, g, b values) by desire coefficient -\n  // the smaller the factor, the darker the shade (it's like adding black to the value).\n  static getDarken(color: string, percent: number = 0.14): string {\n    const colorRGB: RGBChannels = ColorUtils.parseColor(color, ColorPatterns.HEX, ColorType.HEX);\n\n    Object.keys(colorRGB).forEach((colorComponentName) => {\n      colorRGB[colorComponentName] = Math.floor((1 - percent) * colorRGB[colorComponentName]);\n    });\n\n    return ColorUtils.getColorStr(colorRGB, ColorType.HEX);\n  }\n\n  static getBorderColor(color: string, percent: number = 0.33): string {\n    if (!color || !ColorPatterns.HEX.test(color)) {\n      return null;\n    }\n\n    const hslColor = hsl(color);\n\n    if (isDarkMode) {\n      if (hslColor.l * 100 < 67) {\n        return hslColor.copy({l: hslColor.l + 0.25}).toString();\n      }\n\n      return hslColor.copy({l: hslColor.l + 0.1}).toString();\n    }\n\n    return hslColor.darker(percent).toString();\n  }\n\n  // Materials used: https://css-tricks.com/using-javascript-to-adjust-saturation-and-brightness-of-rgb-colors/\n  static getBackgroundLightness(backgroundColor: string): number {\n    let color: RGBChannels;\n    let lightness: number = 0;\n\n    if (ColorPatterns.HEX.test(backgroundColor)) {\n      color = ColorUtils.parseColor(backgroundColor, ColorPatterns.HEX, ColorType.HEX);\n    }\n\n    if (ColorPatterns.RGB.test(backgroundColor)) {\n      color = ColorUtils.parseColor(backgroundColor, ColorPatterns.RGB, ColorType.RGB);\n    }\n\n    if (color) {\n      const rgbIntArray = [color.r, color.g, color.b];\n\n      const highest = Math.max(...rgbIntArray);\n      const lowest = Math.min(...rgbIntArray);\n\n      lightness = (highest + lowest) / 2 / 255;\n    }\n\n    if (!isNil(lightness)) {\n      return lightness * 100;\n    }\n\n    return lightness;\n  }\n\n  static checkContrast(foreground: string, background: string): AdaptContrastResults {\n    const contractRatio: AdaptContrastResults = {\n      ratio: '0',\n      AA: 'fail',\n      AALarge: 'fail',\n      AAA: 'fail',\n      AAALarge: 'fail'\n    };\n\n    let bg = background;\n\n    if (background.includes('rgb')) {\n      bg = this.rgbToHex(background.slice(4, -1));\n    }\n\n    const luminanceForeground = this.getLuminance(foreground);\n    const luminanceBackground = this.getLuminance(bg);\n    //the contrast between the 2 colors is calculated by using the contrast ratio formula and to find the origin of these numbers, please follow https://www.w3.org/WAI/GL/wiki/Contrast_ratio\n    const ratio = (Math.max(luminanceForeground, luminanceBackground) + 0.05) / (Math.min(luminanceForeground, luminanceBackground) + 0.05);\n\n    contractRatio.ratio = (Math.round(ratio * 100) / 100).toString();\n\n    // contrast ratio is measured based on the below 3 number 4.5, 3 and 7 and it is derived from https://usecontrast.com/guide\n    if (ratio >= 4.5) {\n      contractRatio.AA = 'pass';\n      contractRatio.AAALarge = 'pass';\n    } else {\n      contractRatio.AA = 'fail';\n      contractRatio.AAALarge = 'fail';\n    }\n\n    if (ratio >= 3) {\n      contractRatio.AALarge = 'pass';\n    } else {\n      contractRatio.AALarge = 'fail';\n    }\n\n    if (ratio >= 7) {\n      contractRatio.AAA = 'pass';\n    } else {\n      contractRatio.AAA = 'fail';\n    }\n\n    return contractRatio;\n  }\n\n  static getHexNum(colorSubstring: string): number {\n    let colorHexaNum: number;\n\n    try {\n      colorHexaNum = parseInt(colorSubstring, 16);\n    } catch (err) {\n      colorHexaNum = 0;\n    }\n\n    return colorHexaNum;\n  }\n\n  // sRGB is the standard naming convention from https://wunnle.com/dynamic-text-color-based-on-background and https://webaim.org/resources/contrastchecker/?fcolor=DB8A92&bcolor=ffffff\n  //Please follow the link to learn more about the sRGB naming https://en.wikipedia.org/wiki/SRGB\n  // the numbers here are the part of the formula to calculate luminance. Please find the attached reference here https://en.wikipedia.org/wiki/Relative_luminance and https://en.wikipedia.org/wiki/SRGB\n  static getsRGB(color: string): number {\n    return this.getHexNum(color) / 255 <= 0.03928 // formula is taken from https://en.wikipedia.org/wiki/SRGB\n      ? this.getHexNum(color) / 255 / 12.92 // formula is taken from https://en.wikipedia.org/wiki/SRGB\n      : Math.pow((this.getHexNum(color) / 255 + 0.055) / 1.055, 2.4); // formula is taken from https://en.wikipedia.org/wiki/SRGB\n  }\n\n  // the numbers here are the part of the formula to calculate luminance. Please find the attached reference here https://en.wikipedia.org/wiki/Relative_luminance\n  static getLuminance(color: string): number {\n    if (color) {\n      return (0.2126 * this.getsRGB(color.substr(1, 2)) + 0.7152 * this.getsRGB(color.substr(3, 2)) + 0.0722 * this.getsRGB(color.substr(-2)));\n    }\n  }\n\n  static componentToHex(c: number): string {\n    const hex = c.toString(16);\n\n    return hex.length == 1 ? '0' + hex : hex;\n  }\n\n  static rgbToHex(rgb: string): string {\n    const r = Number(rgb.split(',')[0]);\n    const g = Number(rgb.split(',')[1]);\n    const b = Number(rgb.split(',')[2]);\n\n    return '#' + this.componentToHex(r) + this.componentToHex(g) + this.componentToHex(b);\n  }\n\n}\n\nexport interface AdaptRGBColor extends RGBColor {\n  parsedString?: string;\n  colorType?: ColorType;\n}\n\nexport function getColorType(value: string): ColorType {\n  value = value?.toLowerCase();\n\n  if (value) {\n    if (/^#([a-fA-F0-9]){3}$|#([a-fA-F0-9]){6}$/.test(value)) {\n      return ColorType.HEX;\n    }\n\n    if (/^(rgb\\()(1?[0-9]{1,2}|2[0-4][0-9]|25[0-5]),\\s?(1?[0-9]{1,2}|2[0-4][0-9]|25[0-5]),\\s?(1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])(\\))$/.test(value)) {\n      return ColorType.RGB;\n    }\n  }\n\n  return null;\n}\n\nexport function getRGBColorFromString(value: string): AdaptRGBColor {\n  let rgbColor: AdaptRGBColor = null;\n\n  switch (getColorType(value)) {\n    case ColorType.RGB: {\n      rgbColor = Object.assign(color(value).rgb(), {parsedString: value, colorType: ColorType.RGB});\n      break;\n    }\n    case ColorType.HEX: {\n      rgbColor = Object.assign(color(value).rgb(), {parsedString: value, colorType: ColorType.HEX});\n      break;\n    }\n  }\n\n  return rgbColor;\n}\n\nexport function getStringFromRGBColor(color: AdaptRGBColor, type: ColorType): string {\n  switch (type) {\n    case ColorType.HEX: {\n      return color.formatHex();\n    }\n    case ColorType.RGB: {\n      return color.formatRgb().replace(/\\s/gm, ''); // .formatRgb() returns string with whitespaces\n    }\n  }\n}\n\n"]}