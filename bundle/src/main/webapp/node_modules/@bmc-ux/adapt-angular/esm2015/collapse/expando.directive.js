import { ChangeDetectorRef, Component, ElementRef, Input, Renderer2, ViewChild } from '@angular/core';
import { takeUntil, throttleTime } from 'rxjs/operators';
import { asyncScheduler, ReplaySubject, Subject } from 'rxjs';
import { ResizeService } from '../common/resize/resize.service';
import { SafeCdr } from '../common/safe-cdr';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "../common/resize/resize.service";
import * as i2 from "../common/radar/adapt-radar";
import * as i3 from "@angular/common";
const _c0 = ["block"];
const _c1 = ["area"];
const _c2 = function (a0) { return { "fade-horizontal": a0 }; };
const _c3 = ["*"];
// eslint-disable-next-line @angular-eslint/component-class-suffix
export class AdaptExpandoDirective extends AdaptRadarAngularGenericDirective {
    constructor(_resizeService, _renderer, _changeDetectorRef, _adaptRadarService, _elem) {
        super(_adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptExpando);
        this._resizeService = _resizeService;
        this._renderer = _renderer;
        this._changeDetectorRef = _changeDetectorRef;
        // Is Collapsed flag
        this.isCollapsed = true;
        this.isFade = true;
        this._destroyed$ = new ReplaySubject(1);
    }
    /**
     * Accessor for collapse attribute.
     * Show or hide collapsible block according to value
     * @docs-default
     */
    set expand(value) {
        if (value) {
            this.hide();
        }
        else {
            this.show();
        }
    }
    ngAfterContentInit() {
        const resize$ = new Subject();
        resize$
            .pipe(takeUntil(this._destroyed$), throttleTime(100, asyncScheduler, { trailing: true }))
            .subscribe(() => {
            this.checkForMore();
            SafeCdr.detectChanges(this._changeDetectorRef);
        });
        this._resizeService.addResizeEventListener(this.area.nativeElement, resize$.next.bind(resize$));
    }
    ngOnDestroy() {
        this._resizeService.removeResizeEventListener(this.area.nativeElement);
        this._destroyed$.next();
        this._destroyed$.complete();
    }
    ngOnInit() {
        if (this.h) {
            this._renderer.setStyle(this.block.nativeElement, 'maxHeight', this.h);
        }
    }
    checkForMore() {
        this.isFade = this.area.nativeElement.offsetHeight > parseInt(this.h, 10);
    }
    /**
     * Hide collapsible block
     */
    hide() {
        this.isCollapsed = true;
        this.checkForMore();
        this._renderer.setStyle(this.block.nativeElement, 'maxHeight', this.h);
    }
    /**
     * Show collapsible block
     */
    show() {
        this.isCollapsed = false;
        this.checkForMore();
        this._renderer.setStyle(this.block.nativeElement, 'maxHeight', this.area.nativeElement.offsetHeight + 'px');
    }
    /**
     * Toggle collapsible block
     */
    toggle() {
        if (this.isCollapsed) {
            this.show();
        }
        else {
            this.hide();
        }
    }
}
AdaptExpandoDirective.ɵfac = function AdaptExpandoDirective_Factory(t) { return new (t || AdaptExpandoDirective)(i0.ɵɵdirectiveInject(i1.ResizeService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptExpandoDirective.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptExpandoDirective, selectors: [["adapt-expando"], ["", "expand", ""]], viewQuery: function AdaptExpandoDirective_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.block = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.area = _t.first);
    } }, inputs: { h: "h", expand: "expand" }, exportAs: ["expand"], features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c3, decls: 11, vars: 3, consts: [[1, "collapse-block", 3, "ngClass"], ["block", ""], ["area", ""]], template: function AdaptExpandoDirective_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtext(0, "\n    ");
        i0.ɵɵelementStart(1, "div", 0, 1);
        i0.ɵɵtext(3, "\n      ");
        i0.ɵɵelementStart(4, "div", null, 2);
        i0.ɵɵtext(6, "\n        ");
        i0.ɵɵprojection(7);
        i0.ɵɵtext(8, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(9, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(10, "\n  ");
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(1, _c2, ctx.isCollapsed && ctx.isFade));
    } }, directives: [i3.NgClass], styles: [".collapse-block[_ngcontent-%COMP%] {\n      overflow: hidden;\n      transition: all 0.2s ease-out;\n    }\n\n    .collapse-block[_ngcontent-%COMP%]:before, .collapse-block[_ngcontent-%COMP%]:after {\n      content: '';\n      display: table;\n    }\n\n    .fade-horizontal[_ngcontent-%COMP%] {\n      position: relative;\n    }\n\n    .fade-horizontal[_ngcontent-%COMP%]:after {\n      content: '';\n      display: block;\n      position: absolute;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      height: 1.5rem;\n      background: linear-gradient(to bottom, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 1) 100%)\n    }"] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptExpandoDirective, [{
        type: Component,
        args: [{
                selector: 'adapt-expando, [expand]',
                exportAs: 'expand',
                template: `
    <div class="collapse-block" #block [ngClass]="{'fade-horizontal': isCollapsed && isFade}">
      <div #area>
        <ng-content></ng-content>
      </div>
    </div>
  `,
                styles: [`
    .collapse-block {
      overflow: hidden;
      transition: all 0.2s ease-out;
    }

    .collapse-block:before,
    .collapse-block:after {
      content: '';
      display: table;
    }

    .fade-horizontal {
      position: relative;
    }

    .fade-horizontal:after {
      content: '';
      display: block;
      position: absolute;
      left: 0;
      right: 0;
      bottom: 0;
      height: 1.5rem;
      background: linear-gradient(to bottom, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 1) 100%)
    }

  `]
            }]
    }], function () { return [{ type: i1.ResizeService }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i2.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { block: [{
            type: ViewChild,
            args: ['block', { static: true }]
        }], area: [{
            type: ViewChild,
            args: ['area', { static: true }]
        }], h: [{
            type: Input
        }], expand: [{
            type: Input
        }] }); })();
//# sourceMappingURL=expando.directive.js.map