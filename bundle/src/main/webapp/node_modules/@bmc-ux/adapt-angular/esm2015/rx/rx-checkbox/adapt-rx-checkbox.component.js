import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Optional, Output, Self, ViewChild } from '@angular/core';
import { NgControl } from '@angular/forms';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularCustomEventType, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { AdaptRxFeedbackComponent, AdaptRxFormControlDirective } from '../form-control/index';
import { AdaptTranslateService } from '../../common/i18n/index';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../../common/i18n/index";
import * as i3 from "../../common/radar/adapt-radar";
import * as i4 from "@angular/common";
import * as i5 from "../form-control/rx-feedback/adapt-rx-feedback.component";
import * as i6 from "../form-control/rx-control-label/adapt-rx-label-tooltip.component";
const _c0 = ["inputRef"];
const _c1 = ["adaptRxFeedbackRef"];
function AdaptRxCheckboxComponent_ng_container_7_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "span", 12);
    i0.ɵɵelementStart(2, "span", 13);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r4.requiredLabel);
} }
function AdaptRxCheckboxComponent_ng_container_7_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 14);
    i0.ɵɵlistener("click", function AdaptRxCheckboxComponent_ng_container_7_span_4_Template_span_click_0_listener($event) { return $event.preventDefault(); });
    i0.ɵɵelement(1, "span", 12);
    i0.ɵɵelement(2, "adapt-rx-control-label-tooltip", 15);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("tooltip", ctx_r5.tooltip)("testID", ctx_r5.testID);
} }
function AdaptRxCheckboxComponent_ng_container_7_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 16);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r6.subLabel);
} }
function AdaptRxCheckboxComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "span");
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(3, AdaptRxCheckboxComponent_ng_container_7_ng_container_3_Template, 4, 1, "ng-container", 6);
    i0.ɵɵtemplate(4, AdaptRxCheckboxComponent_ng_container_7_span_4_Template, 3, 2, "span", 10);
    i0.ɵɵtemplate(5, AdaptRxCheckboxComponent_ng_container_7_div_5_Template, 2, 1, "div", 11);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r1.label);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.required && ctx_r1.requiredLabel);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.tooltip == null ? null : ctx_r1.tooltip.content);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r1.subLabel);
} }
function AdaptRxCheckboxComponent_span_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 17);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r2.ariaLabel);
} }
const _c2 = function (a0) { return { "checkbox__item_no-label": a0 }; };
export class AdaptRxCheckboxComponent extends AdaptRxFormControlDirective {
    constructor(ngControl, ts, _changeDetectorRef, _adaptRadarService, _elem) {
        super(ngControl, ts, _adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptRxCheckbox, _changeDetectorRef);
        this.controlName = 'checkbox';
        this.analyticsComponentName = AdaptRadarAngularCustomEventName;
        /**
         * Indeterminate state change emitter
         */
        this.indeterminateChange = new EventEmitter();
        this._indeterminate = false;
    }
    /**
     * Toggle [checked] attribute.
     * @docs-default
     */
    get checked() {
        return this._checked;
    }
    set checked(value) {
        const nextChecked = Boolean(value);
        if (this._checked !== nextChecked) {
            this._checked = nextChecked;
            this._onChange(this._checked);
            this.indeterminate = false;
            this.stateChanges$.next();
        }
    }
    /**
     * Toggle [indeterminate] attribute.
     * @docs-default
     */
    get indeterminate() {
        return this._indeterminate;
    }
    set indeterminate(indeterminate) {
        const indeterminateBoolean = Boolean(indeterminate);
        const changed = indeterminateBoolean !== this._indeterminate;
        this._indeterminate = indeterminateBoolean;
        if (changed) {
            this.indeterminateChange.emit(this._indeterminate);
        }
    }
    get getAriaChecked() {
        return this.indeterminate ? 'mixed' : (this.checked ? 'true' : 'false');
    }
    /**
     * Check if the control has UI error state
     */
    get hasDangerState() {
        return this.adaptRxFeedbackRef.hasUIErrorState;
    }
    ngOnInit() {
        super.ngOnInit();
        this._checkedStateOnInit = this.checked;
    }
    inputClickHandler(event) {
        this._onTouched();
        if (this.readonly) {
            event.preventDefault();
        }
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxCheckbox, {
            GroupName: this.adaptRadarGroupName,
            EventType: AdaptRadarAngularCustomEventType.Click,
            Label: this.label,
            Required: this.required,
            Disabled: this.disabled,
            ReadOnly: this.readonly,
            DefaultState: this._checkedStateOnInit ? 'on' : 'off',
            // The value is inverse because we get previous "checked" state here
            CurrentState: this.checked ? 'off' : 'on'
        }, this.adaptRadarDisableEventSending);
    }
    inputChangeHandler() {
        this.checked = !this.checked;
    }
    blurHandler(event) {
        super.blurHandler(event);
        this._onTouched();
    }
    writeValue(value) {
        this._checked = coerceBooleanProperty(value);
    }
    _focusNativeElement() {
        this.inputRef.nativeElement.focus();
    }
}
AdaptRxCheckboxComponent.ɵfac = function AdaptRxCheckboxComponent_Factory(t) { return new (t || AdaptRxCheckboxComponent)(i0.ɵɵdirectiveInject(i1.NgControl, 10), i0.ɵɵdirectiveInject(i2.AdaptTranslateService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptRxCheckboxComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptRxCheckboxComponent, selectors: [["adapt-rx-checkbox"]], viewQuery: function AdaptRxCheckboxComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.adaptRxFeedbackRef = _t.first);
    } }, inputs: { value: "value", checked: "checked", indeterminate: "indeterminate" }, outputs: { indeterminateChange: "indeterminateChange" }, features: [i0.ɵɵInheritDefinitionFeature], decls: 11, vars: 35, consts: [[1, "checkbox"], [1, "checkbox__label"], ["type", "checkbox", "role", "checkbox", 1, "checkbox__input", 3, "id", "required", "disabled", "readOnly", "checked", "indeterminate", "autofocus", "click", "change", "focus", "blur"], ["inputRef", ""], [1, "checkbox__item", 3, "ngClass"], [1, "icon-indeterminate"], [4, "ngIf"], ["class", "sr-only", 4, "ngIf"], [3, "ariaErrorMessage", "errors", "warningMessage", "controlTouched", "messageAppeared"], ["adaptRxFeedbackRef", ""], [3, "click", 4, "ngIf"], ["class", "text-secondary", 4, "ngIf"], [1, "letter-space"], [1, "form-control-required"], [3, "click"], [3, "tooltip", "testID"], [1, "text-secondary"], [1, "sr-only"]], template: function AdaptRxCheckboxComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵelementStart(1, "div", 1);
        i0.ɵɵelementStart(2, "label");
        i0.ɵɵelementStart(3, "input", 2, 3);
        i0.ɵɵlistener("click", function AdaptRxCheckboxComponent_Template_input_click_3_listener($event) { return ctx.inputClickHandler($event); })("change", function AdaptRxCheckboxComponent_Template_input_change_3_listener() { return ctx.inputChangeHandler(); })("focus", function AdaptRxCheckboxComponent_Template_input_focus_3_listener($event) { return ctx.focusHandler($event); })("blur", function AdaptRxCheckboxComponent_Template_input_blur_3_listener($event) { return ctx.blurHandler($event); });
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(5, "div", 4);
        i0.ɵɵelement(6, "span", 5);
        i0.ɵɵtemplate(7, AdaptRxCheckboxComponent_ng_container_7_Template, 6, 4, "ng-container", 6);
        i0.ɵɵtemplate(8, AdaptRxCheckboxComponent_span_8_Template, 2, 1, "span", 7);
        i0.ɵɵelementEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(9, "adapt-rx-feedback", 8, 9);
        i0.ɵɵlistener("messageAppeared", function AdaptRxCheckboxComponent_Template_adapt_rx_feedback_messageAppeared_9_listener($event) { return ctx.handleMessageAppeared($event, ctx.analyticsComponentName.AdaptRxCheckbox); });
        i0.ɵɵelementEnd();
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        const _r3 = i0.ɵɵreference(10);
        i0.ɵɵclassProp("readonly", ctx.readonly)("has-danger", _r3.hasUIErrorState)("has-warning", ctx.warningMessage);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("id", ctx.id)("required", ctx.required)("disabled", ctx.disabled)("readOnly", ctx.readonly)("checked", ctx.checked)("indeterminate", ctx.indeterminate)("autofocus", ctx.autofocus);
        i0.ɵɵattribute("name", ctx.name)("tabindex", ctx.tabIndex)("value", ctx.value)("aria-disabled", ctx.disabled)("aria-readonly", ctx.readonly)("aria-label", ctx.ariaLabel)("aria-labelledby", ctx.ariaLabelledby)("aria-describedby", ctx.ariaDescribedBy)("aria-checked", ctx.getAriaChecked)("aria-required", ctx.required)("aria-invalid", ctx.hasDangerState)("aria-errormessage", ctx.ariaErrorMessage)("data-testid", ctx.testID);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(33, _c2, !ctx.label));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.label);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx.label && ctx.ariaLabel);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ariaErrorMessage", ctx.ariaErrorMessage)("errors", ctx.ngControl.errors)("warningMessage", ctx.warningMessage)("controlTouched", ctx.ngControl.touched);
    } }, directives: [i4.NgClass, i4.NgIf, i5.AdaptRxFeedbackComponent, i6.AdaptRxLabelTooltipComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxCheckboxComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-rx-checkbox',
                templateUrl: './adapt-rx-checkbox.component.html',
                preserveWhitespaces: false
            }]
    }], function () { return [{ type: i1.NgControl, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }, { type: i2.AdaptTranslateService }, { type: i0.ChangeDetectorRef }, { type: i3.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { value: [{
            type: Input
        }], checked: [{
            type: Input
        }], indeterminate: [{
            type: Input
        }], inputRef: [{
            type: ViewChild,
            args: ['inputRef', { static: true }]
        }], adaptRxFeedbackRef: [{
            type: ViewChild,
            args: ['adaptRxFeedbackRef', { static: true }]
        }], indeterminateChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=adapt-rx-checkbox.component.js.map