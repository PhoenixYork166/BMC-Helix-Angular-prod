{"version":3,"file":"docked-panel.service.js","sourceRoot":"","sources":["../../../../../libs/adapt-angular/src/docked-panel/docked-panel.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAE,QAAQ,EAAC,MAAM,eAAe,CAAC;AACnD,OAAO,EAAa,OAAO,EAAC,MAAM,MAAM,CAAC;AAEzC,OAAO,EAAmB,mBAAmB,EAAC,MAAM,iCAAiC,CAAC;AAGtF,OAAO,EAA8B,oBAAoB,EAAsB,MAAM,sBAAsB,CAAC;AAC5G,OAAO,EAAC,4BAA4B,EAAC,MAAM,8BAA8B,CAAC;;;;AAG1E,MAAM,OAAO,uBAAuB;IASlC,YAAoB,SAAmB,EACnB,cAAmC,EACnC,6BAA2D;QAF3D,cAAS,GAAT,SAAS,CAAU;QACnB,mBAAc,GAAd,cAAc,CAAqB;QACnC,kCAA6B,GAA7B,6BAA6B,CAA8B;QAV/E,gBAAgB;QAChB,cAAS,GAAW,oBAAoB,CAAC,IAAI,CAAC,CAAC,yCAAyC;QACxF,iBAAY,GAAY,KAAK,CAAC;QAC9B,iBAAiB;QACT,aAAQ,GAAgB,QAAQ,CAAC,IAAI,CAAC;QAEtC,mBAAc,GAAiC,IAAI,OAAO,EAAuB,CAAC;QAKxF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5E,CAAC;IAED,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,6BAA6B,CAAC,YAAY,CAAC;IACzD,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,6BAA6B,CAAC,QAAQ,CAAC;IACrD,CAAC;IAED,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,6BAA6B,CAAC,QAAQ,CAAC;IACrD,CAAC;IAED,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;IAC5C,CAAC;IAED,IAAI,CAAC,QAAqB;QACxB,OAAO,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;IAC3E,CAAC;IAED,YAAY,CAAC,MAAmB,EAAE,mBAAwC;QACxE,IAAI,CAAC,6BAA6B,CAAC,YAAY,CAAC,MAAM,EAAC,mBAAmB,CAAC,CAAC;IAC9E,CAAC;IAED,KAAK,CAAC,EAAU;QACd,IAAI,CAAC,6BAA6B,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;IAC/C,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,6BAA6B,CAAC,oBAAoB,EAAE,CAAC;IAC5D,CAAC;IAED,SAAS,CAAC,KAA0B;QAClC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClC,CAAC;;8FAjDU,uBAAuB;6EAAvB,uBAAuB,WAAvB,uBAAuB;uFAAvB,uBAAuB;cADnC,UAAU","sourcesContent":["import {Injectable, Injector} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\nimport {ScrollManagerApi, ScrollManageService} from '../common/scroll-manage.service';\nimport {AlertAnimatedConfig} from '../alert-animated/adapt-alert.model';\n\nimport {DockedDeferred, DockedPanel, DockedPanelDirection, DockedPanelInstance} from './docked-panel.model';\nimport {AdaptDockedPanelStackService} from './docked-panel-stack.service';\n\n@Injectable()\nexport class AdaptDockedPanelService {\n  // Public fields\n  direction: string = DockedPanelDirection.LEFT; // TODO: need to check default value here\n  hideBackdrop: boolean = false;\n  // Private fields\n  private _wrapper: HTMLElement = document.body;\n  private _scrollManager: ScrollManagerApi;\n  private _alertsSubject: Subject<AlertAnimatedConfig> = new Subject<AlertAnimatedConfig>();\n\n  constructor(private _injector: Injector,\n              private _scrollService: ScrollManageService,\n              private _adaptDockedPanelStackService: AdaptDockedPanelStackService) {\n    this._scrollManager = this._scrollService.getScrollManager(this._wrapper);\n  }\n\n  get openedPanels(): DockedPanelInstance[] {\n    return this._adaptDockedPanelStackService.openedPanels;\n  }\n\n  get parentDP(): DockedPanelInstance {\n    return this._adaptDockedPanelStackService.parentDP;\n  }\n\n  get activeDP(): DockedPanelInstance {\n    return this._adaptDockedPanelStackService.activeDP;\n  }\n\n  get alertsState(): Observable<AlertAnimatedConfig> {\n    return this._alertsSubject.asObservable();\n  }\n\n  open(dpConfig: DockedPanel): DockedDeferred {\n    return this._adaptDockedPanelStackService.open(dpConfig, this._injector);\n  }\n\n  updateConfig(config: DockedPanel, dockedPanelInstance: DockedPanelInstance): void {\n    this._adaptDockedPanelStackService.updateConfig(config,dockedPanelInstance);\n  }\n\n  close(id: string): void {\n    this._adaptDockedPanelStackService.close(id);\n  }\n\n  closeAllDockedPanels(): void {\n    this._adaptDockedPanelStackService.closeAllDockedPanels();\n  }\n\n  openAlert(alert: AlertAnimatedConfig): void {\n    this._alertsSubject.next(alert);\n  }\n}\n"]}