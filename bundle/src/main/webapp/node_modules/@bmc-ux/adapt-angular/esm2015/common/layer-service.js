import { Injectable } from '@angular/core';
import { EventManager } from '@angular/platform-browser';
import { ESCAPE } from '@angular/cdk/keycodes';
import { getEventKeyCode } from './key-codes';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
export class LayerService {
    constructor(eventManager) {
        this.openedItems = [];
        this._keyupListenerFunc =
            eventManager.addGlobalEventListener('document', 'keyup', this.onKeyup.bind(this));
        // can also add on outside click logic
    }
    ngOnDestroy() {
        this._keyupListenerFunc();
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    addComponent(componentInstance, onClose) {
        this.removeComponent(componentInstance);
        this.openedItems.push({ onClose, componentInstance });
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    removeComponent(componentInstance) {
        const ind = this.openedItems.findIndex(item => item.componentInstance === componentInstance);
        if (ind >= 0) {
            this.openedItems.splice(ind, 1);
        }
    }
    closeOpenedItem() {
        let event;
        try {
            // Chrome, Safari, Firefox
            event = new KeyboardEvent('keyup', {
                key: 'Escape'
            });
        }
        catch (e) {
            // IE
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const createdEvent = document.createEvent('KeyboardEvent');
        }
        if (event) {
            this.openedItems.forEach(item => {
                // close all opened items except modals and dockedPanels
                if (!item.componentInstance.modalClassInstance) {
                    item.onClose(event);
                }
            });
        }
    }
    onKeyup(event) {
        if (getEventKeyCode(event) !== ESCAPE) {
            return;
        }
        const lastItem = this.openedItems[this.openedItems.length - 1];
        if (lastItem) {
            lastItem.onClose(event);
        }
    }
}
LayerService.ɵfac = function LayerService_Factory(t) { return new (t || LayerService)(i0.ɵɵinject(i1.EventManager)); };
LayerService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: LayerService, factory: LayerService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(LayerService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: i1.EventManager }]; }, null); })();
//# sourceMappingURL=layer-service.js.map