import { Component, Input, TemplateRef } from '@angular/core';
import { isString, isArray, isNil } from 'lodash-es';
import { AdaptTranslateService } from '../../../common/i18n/index';
import * as i0 from "@angular/core";
import * as i1 from "../../../common/i18n/index";
import * as i2 from "@angular/common";
import * as i3 from "../../../icon/icon.component";
import * as i4 from "../../../tooltip/tooltip.directive";
import * as i5 from "../../../popover/popover.directive";
function AdaptRxLabelTooltipComponent_ng_container_0_adapt_icon_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 3);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", ctx_r1.tooltipConfig.iconName)("adaptTooltip", ctx_r1.tooltipConfig.content)("placement", ctx_r1.tooltipConfig.placement)("description", ctx_r1.tooltipConfig.label);
    i0.ɵɵattribute("data-testid", ctx_r1.testID + "_tooltip");
} }
function AdaptRxLabelTooltipComponent_ng_container_0_adapt_icon_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 4);
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", ctx_r2.tooltipConfig.iconName)("adaptPopover", ctx_r2.tooltipConfig.content)("placement", ctx_r2.tooltipConfig.placement)("triggers", ctx_r2.tooltipConfig.popoverTriggers)("appendToBody", ctx_r2.tooltipConfig.appendToBody)("maxWidth", ctx_r2.tooltipConfig.maxWidth)("description", ctx_r2.tooltipConfig.label);
    i0.ɵɵattribute("data-testid", ctx_r2.testID + "_tooltip");
} }
function AdaptRxLabelTooltipComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n  ");
    i0.ɵɵtemplate(2, AdaptRxLabelTooltipComponent_ng_container_0_adapt_icon_2_Template, 1, 6, "adapt-icon", 1);
    i0.ɵɵtext(3, "\n\n  ");
    i0.ɵɵtemplate(4, AdaptRxLabelTooltipComponent_ng_container_0_adapt_icon_4_Template, 1, 9, "adapt-icon", 2);
    i0.ɵɵtext(5, "\n");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r0.tooltipConfig.popoverMode);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.tooltipConfig.popoverMode);
} }
export class AdaptRxLabelTooltipComponent {
    constructor(ts) {
        this.ts = ts;
        /**
         * Tooltip settings
         */
        this.tooltip = null;
        this._defaultPopupConfig = {
            iconName: 'info_circle',
            content: null,
            placement: 'auto',
            popoverMode: false,
            popoverTriggers: 'click',
            appendToBody: true,
            maxWidth: 250,
            label: ts.getCurrentLanguage()['adapt.common.information']
        };
    }
    /**
     * Returns calculated tooltip config according to passed [tooltip]
     */
    get tooltipConfig() {
        let _tooltipConfig = null;
        // Enable tooltip/popover only if the content present
        if (this.tooltip && this.tooltip.content) {
            // Automatically enable popoverMode if content is TemplateRef
            const calculatedPopoverMode = this.tooltip.popoverMode ||
                (this.tooltip.content instanceof TemplateRef) ||
                this._defaultPopupConfig.popoverMode;
            let calculatedPlacement = this.tooltip.placement;
            if (calculatedPopoverMode) {
                if (!calculatedPlacement || (isArray(calculatedPlacement) && calculatedPlacement.includes('auto'))) {
                    calculatedPlacement = this._defaultPopupConfig.placement;
                }
            }
            else {
                calculatedPlacement = isString(this.tooltip.placement) ? this.tooltip.placement : 'auto';
            }
            _tooltipConfig = {
                iconName: this.tooltip.iconName || this._defaultPopupConfig.iconName,
                content: this.tooltip.content,
                placement: calculatedPlacement,
                popoverMode: calculatedPopoverMode,
                popoverTriggers: this.tooltip.popoverTriggers || this._defaultPopupConfig.popoverTriggers,
                appendToBody: isNil(this.tooltip.appendToBody) ? this._defaultPopupConfig.appendToBody : this.tooltip.appendToBody,
                maxWidth: this.tooltip.maxWidth || this._defaultPopupConfig.maxWidth,
                label: this.tooltip.label || this._defaultPopupConfig.label
            };
        }
        return _tooltipConfig;
    }
}
AdaptRxLabelTooltipComponent.ɵfac = function AdaptRxLabelTooltipComponent_Factory(t) { return new (t || AdaptRxLabelTooltipComponent)(i0.ɵɵdirectiveInject(i1.AdaptTranslateService)); };
AdaptRxLabelTooltipComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptRxLabelTooltipComponent, selectors: [["adapt-rx-control-label-tooltip"]], inputs: { tooltip: "tooltip", testID: "testID" }, decls: 2, vars: 1, consts: [[4, "ngIf"], [3, "adaptRadarDisableEventSending", "name", "adaptTooltip", "placement", "description", 4, "ngIf"], [3, "adaptRadarDisableEventSending", "name", "adaptPopover", "placement", "triggers", "appendToBody", "maxWidth", "description", 4, "ngIf"], [3, "adaptRadarDisableEventSending", "name", "adaptTooltip", "placement", "description"], [3, "adaptRadarDisableEventSending", "name", "adaptPopover", "placement", "triggers", "appendToBody", "maxWidth", "description"]], template: function AdaptRxLabelTooltipComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, AdaptRxLabelTooltipComponent_ng_container_0_Template, 6, 2, "ng-container", 0);
        i0.ɵɵtext(1, "\n");
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.tooltipConfig);
    } }, directives: [i2.NgIf, i3.AdaptIconComponent, i4.AdaptTooltipDirective, i5.AdaptPopoverDirective], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxLabelTooltipComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-rx-control-label-tooltip',
                templateUrl: './adapt-rx-label-tooltip.component.html'
            }]
    }], function () { return [{ type: i1.AdaptTranslateService }]; }, { tooltip: [{
            type: Input
        }], testID: [{
            type: Input
        }] }); })();
//# sourceMappingURL=adapt-rx-label-tooltip.component.js.map