import { Injectable } from '@angular/core';
import { uniq } from 'lodash-es';
import * as i0 from "@angular/core";
export class MenuGlobalService {
    constructor() {
        this._menuInstances = [];
        this._nodes = [];
        this._connectedNodes = [];
    }
    connectNodes(node) {
        this._connectedNodes.push(node);
        this._connectedNodes = uniq(this._connectedNodes);
    }
    destroyConnectNodes() {
        this._connectedNodes.length = 0;
    }
    storeMenu(menu, node) {
        this._menuInstances.push(menu);
        this._nodes.push(node);
    }
    closeMenu() {
        if (this._menuInstances.length > 0) {
            this._menuInstances.forEach(item => {
                if (item && item.hostView) {
                    item.hostView.destroy();
                }
            });
        }
        if (this._nodes.length > 0) {
            this._closeNodes(this._nodes);
        }
        this._menuInstances = [];
        this._nodes = [];
    }
    selectMenuItem(node) {
        if (!node.action) {
            this.removeActiveState(this._connectedNodes);
        }
        if (node.action && node.excludeActiveOnAction) {
            return;
        }
        node.selected = true;
        let nodeParent = node.parent;
        while (nodeParent) {
            nodeParent.active = true;
            nodeParent = nodeParent.parent;
        }
    }
    removeActiveState(nodes = this._connectedNodes) {
        if (nodes && nodes.length) {
            nodes.forEach(node => {
                node.selected = false;
                node.active = false;
                if (node.items && node.items.length) {
                    this.removeActiveState(node.items);
                }
            });
        }
    }
    _closeNodes(nodes) {
        nodes.forEach(item => {
            if (item) {
                item.expanded = false;
                if (item.items) {
                    this._closeNodes(item.items);
                }
            }
        });
    }
}
MenuGlobalService.ɵfac = function MenuGlobalService_Factory(t) { return new (t || MenuGlobalService)(); };
MenuGlobalService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: MenuGlobalService, factory: MenuGlobalService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(MenuGlobalService, [{
        type: Injectable
    }], null, null); })();
//# sourceMappingURL=menu-global.service.js.map