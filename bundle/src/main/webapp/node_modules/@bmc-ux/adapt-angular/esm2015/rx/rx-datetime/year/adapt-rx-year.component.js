import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { Directionality } from '@angular/cdk/bidi';
import { trigger } from '@angular/animations';
import { DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';
import { isFunction, isNil, isNumber, isUndefined } from 'lodash-es';
import { SLIDE_ANIMATION } from '../common/common.utils';
import { getEventKeyCode } from '../../../common/key-codes';
import { AdaptRxDatetimeConfigService } from '../adapt-rx-datetime-config.service';
import { RxYear } from '../adapt-rx-datetime.types';
import * as i0 from "@angular/core";
import * as i1 from "../adapt-rx-datetime-config.service";
import * as i2 from "@angular/cdk/bidi";
import * as i3 from "../../../icon/icon.component";
import * as i4 from "@angular/common";
function AdaptRxYearComponent_tr_35_ng_container_2_td_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "td", 15);
} if (rf & 2) {
    const year_r4 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵclassProp("range", year_r4.isInRange && !year_r4.isRangeFrom);
} }
function AdaptRxYearComponent_tr_35_ng_container_2_td_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "td", 15);
} if (rf & 2) {
    const year_r4 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵclassProp("range", year_r4.isInRange && !year_r4.isRangeTo);
} }
function AdaptRxYearComponent_tr_35_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r13 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵtemplate(2, AdaptRxYearComponent_tr_35_ng_container_2_td_2_Template, 1, 2, "td", 12);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementStart(4, "td", 13);
    i0.ɵɵtext(5, "\n            ");
    i0.ɵɵelementStart(6, "button", 14);
    i0.ɵɵlistener("click", function AdaptRxYearComponent_tr_35_ng_container_2_Template_button_click_6_listener() { const restoredCtx = i0.ɵɵrestoreView(_r13); const year_r4 = restoredCtx.$implicit; const ctx_r12 = i0.ɵɵnextContext(2); return ctx_r12.onYearClick(year_r4); });
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n          ");
    i0.ɵɵtemplate(10, AdaptRxYearComponent_tr_35_ng_container_2_td_10_Template, 1, 2, "td", 12);
    i0.ɵɵtext(11, "\n        ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const year_r4 = ctx.$implicit;
    const first_r6 = ctx.first;
    const last_r7 = ctx.last;
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", first_r6);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("range", year_r4.isInRange && !(year_r4.isRangeFrom && year_r4.isRangeTo))("range-from", year_r4.isRangeFrom && !year_r4.isRangeTo)("range-to", year_r4.isRangeTo && !year_r4.isRangeFrom);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("active", year_r4.value === ctx_r3.config.activeYear)("today", year_r4.isToday)("disabled", year_r4.isDisabled)("range-edge", year_r4.isRangeFrom || year_r4.isRangeTo);
    i0.ɵɵproperty("disabled", year_r4.isDisabled);
    i0.ɵɵattribute("data-testid", ctx_r3.testID + "_year_" + year_r4.value);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(year_r4.value);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", last_r7);
} }
function AdaptRxYearComponent_tr_35_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr");
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptRxYearComponent_tr_35_ng_container_2_Template, 12, 19, "ng-container", 11);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const yearsRow_r1 = ctx.$implicit;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", yearsRow_r1)("ngForTrackBy", ctx_r0.trackByFn);
} }
export class AdaptRxYearComponent {
    constructor(datetimeConfigService, _dir) {
        this._dir = _dir;
        this.today = new Date();
        this.config = {
            year: this.today.getFullYear(),
            activeYear: undefined,
            filter: undefined,
            disabled: undefined,
            texts: undefined,
            rangeFrom: undefined,
            rangeTo: undefined
        };
        this.years = Array(AdaptRxYearComponent.DisplayYearsRows)
            .fill(0)
            .map(() => Array(AdaptRxYearComponent.DisplayYearsInRow)
            .fill(0)
            .map(() => new RxYear()));
        this.isRtl = false;
        this.animationCounter = 0;
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onYearChange = new EventEmitter();
        this.config.texts = datetimeConfigService.texts;
        this._updateYears();
    }
    ngOnInit() {
        this.isRtl = this._dir.value === 'rtl';
    }
    ngOnChanges(changes) {
        if (changes.year && !isNil(changes.year.currentValue)) {
            this.config.year = changes.year.currentValue;
        }
        if (changes.activeYear && !isUndefined(changes.activeYear.currentValue)) {
            this.config.activeYear = changes.activeYear.currentValue;
            if (this.config.activeYear) {
                this.config.year = this.config.activeYear;
            }
        }
        if (changes.disabled && !isNil(changes.disabled.currentValue)) {
            this.config.disabled = changes.disabled.currentValue;
        }
        if (changes.rangeFrom) {
            this.config.rangeFrom = changes.rangeFrom.currentValue;
        }
        if (changes.rangeTo) {
            this.config.rangeTo = changes.rangeTo.currentValue;
        }
        if (changes.filter && !isNil(changes.filter.currentValue)) {
            this.config.filter = changes.filter.currentValue;
        }
        if (changes.texts && !isNil(changes.texts.currentValue)) {
            Object.assign(this.config.texts, changes.texts.currentValue);
        }
        this._updateYears();
    }
    get displayYears() {
        const from = this.config.year - (this.config.year % AdaptRxYearComponent.DisplayYearsCount) + 1;
        const to = from + (AdaptRxYearComponent.DisplayYearsCount - 1);
        return `${from} - ${to}`;
    }
    changeYearsList(event) {
        const keyCode = getEventKeyCode(event);
        const changeValue = keyCode === UP_ARROW || keyCode === RIGHT_ARROW ? 1 :
            keyCode === DOWN_ARROW || keyCode === LEFT_ARROW ? -1 : null;
        if (changeValue) {
            event.preventDefault();
            if (changeValue > 0) {
                this.nextYearsGroup();
            }
            else {
                this.prevYearsGroup();
            }
        }
    }
    nextYearsGroup() {
        if (this.config.year < 1) {
            this.config.year = 1;
        }
        this.config.year += AdaptRxYearComponent.DisplayYearsCount;
        this._updateYears();
        this.animationCounter++;
    }
    prevYearsGroup() {
        if (this.config.year < (AdaptRxYearComponent.DisplayYearsCount + 1)) {
            return;
        }
        this.config.year -= AdaptRxYearComponent.DisplayYearsCount;
        this._updateYears();
        this.animationCounter--;
    }
    onYearClick(year) {
        this.config.activeYear = year.value;
        this.onYearChange.emit(this.config.activeYear);
    }
    trackByFn(index, item) {
        return item.value;
    }
    _updateYears() {
        let yearCounter = this.config.year - (this.config.year % AdaptRxYearComponent.DisplayYearsCount) + 1;
        this.years.forEach((yearsRow, yearsRowIndex) => {
            yearsRow.forEach((year, yearIndex) => {
                const yearValue = yearCounter++;
                const rangeFromExist = isNumber(this.config.rangeFrom);
                const rangeToExist = isNumber(this.config.rangeTo);
                this.years[yearsRowIndex][yearIndex] = {
                    value: yearValue,
                    isDisabled: this.config.disabled || (isFunction(this.config.filter) ? !this.config.filter({
                        year: yearValue,
                        month: null,
                        date: null
                    }) : false),
                    isToday: yearValue === this.today.getFullYear(),
                    isRangeFrom: rangeFromExist && (this.config.rangeFrom === yearValue),
                    isRangeTo: rangeToExist && (this.config.rangeTo === yearValue),
                    isInRange: rangeFromExist && rangeToExist && (this.config.rangeFrom <= yearValue) && (this.config.rangeTo >= yearValue)
                };
            });
        });
    }
}
AdaptRxYearComponent.DisplayYearsRows = 4;
AdaptRxYearComponent.DisplayYearsInRow = 3;
AdaptRxYearComponent.DisplayYearsCount = AdaptRxYearComponent.DisplayYearsRows * AdaptRxYearComponent.DisplayYearsInRow;
AdaptRxYearComponent.ɵfac = function AdaptRxYearComponent_Factory(t) { return new (t || AdaptRxYearComponent)(i0.ɵɵdirectiveInject(i1.AdaptRxDatetimeConfigService), i0.ɵɵdirectiveInject(i2.Directionality)); };
AdaptRxYearComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptRxYearComponent, selectors: [["adapt-rx-year"]], inputs: { year: "year", activeYear: "activeYear", filter: "filter", disabled: "disabled", rangeFrom: "rangeFrom", rangeTo: "rangeTo", texts: "texts", testID: "testID" }, outputs: { onYearChange: "onYearChange" }, features: [i0.ɵɵNgOnChangesFeature], decls: 46, vars: 19, consts: [[1, "a3t-calendar"], [1, "a3t-calendar--controls", "a3t-calendar--controls_expanded"], [1, "a3t-calendar--controls-line", "a3t-calendar--year-picker"], ["type", "button", "aria-hidden", "true", "tabindex", "-1", 1, "a3t-calendar--controls-btn", 3, "disabled", "click"], [3, "adaptRadarDisableEventSending", "name"], ["role", "spinbutton", 1, "a3t-calendar--controls-info", 3, "keydown"], [1, "a3t-calendar--table", "a3t-calendar--year_table"], ["aria-hidden", "true"], ["colspan", "5", 1, "a3t-calendar--table-space-cell"], [4, "ngFor", "ngForOf"], ["colspan", "3", 1, "a3t-calendar--table-space-cell"], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "a3t-calendar--table-edge-cell", "aria-hidden", "true", 3, "range", 4, "ngIf"], ["role", "gridcell", 1, "a3t-calendar--table-day", "a3t-calendar--table-year"], ["type", "button", 3, "disabled", "click"], ["aria-hidden", "true", 1, "a3t-calendar--table-edge-cell"]], template: function AdaptRxYearComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵtext(1, "\n  ");
        i0.ɵɵelementStart(2, "div", 1);
        i0.ɵɵtext(3, "\n    ");
        i0.ɵɵelementStart(4, "div", 2);
        i0.ɵɵtext(5, "\n      ");
        i0.ɵɵelementStart(6, "button", 3);
        i0.ɵɵlistener("click", function AdaptRxYearComponent_Template_button_click_6_listener() { return ctx.prevYearsGroup(); });
        i0.ɵɵtext(7, "\n        ");
        i0.ɵɵelement(8, "adapt-icon", 4);
        i0.ɵɵtext(9, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(10, "\n      ");
        i0.ɵɵelementStart(11, "div", 5);
        i0.ɵɵlistener("keydown", function AdaptRxYearComponent_Template_div_keydown_11_listener($event) { return ctx.changeYearsList($event); });
        i0.ɵɵtext(12, "\n        ");
        i0.ɵɵelementStart(13, "div");
        i0.ɵɵtext(14);
        i0.ɵɵelementEnd();
        i0.ɵɵtext(15, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(16, "\n      ");
        i0.ɵɵelementStart(17, "button", 3);
        i0.ɵɵlistener("click", function AdaptRxYearComponent_Template_button_click_17_listener() { return ctx.nextYearsGroup(); });
        i0.ɵɵtext(18, "\n        ");
        i0.ɵɵelement(19, "adapt-icon", 4);
        i0.ɵɵtext(20, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(21, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(22, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(23, "\n\n  ");
        i0.ɵɵelementStart(24, "div");
        i0.ɵɵtext(25, "\n    ");
        i0.ɵɵelementStart(26, "table", 6);
        i0.ɵɵtext(27, "\n      ");
        i0.ɵɵelementStart(28, "tbody");
        i0.ɵɵtext(29, "\n      ");
        i0.ɵɵelementStart(30, "tr", 7);
        i0.ɵɵtext(31, "\n        ");
        i0.ɵɵelement(32, "td", 8);
        i0.ɵɵtext(33, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(34, "\n      ");
        i0.ɵɵtemplate(35, AdaptRxYearComponent_tr_35_Template, 4, 2, "tr", 9);
        i0.ɵɵtext(36, "\n      ");
        i0.ɵɵelementStart(37, "tr", 7);
        i0.ɵɵtext(38, "\n        ");
        i0.ɵɵelement(39, "td", 10);
        i0.ɵɵtext(40, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(41, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(42, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(43, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(44, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(45, "\n");
    } if (rf & 2) {
        i0.ɵɵadvance(6);
        i0.ɵɵclassProp("disabled", ctx.config.disabled);
        i0.ɵɵproperty("disabled", ctx.config.disabled);
        i0.ɵɵattribute("data-testid", ctx.testID + "_prevYear");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", ctx.isRtl ? "angle_right" : "angle_left");
        i0.ɵɵadvance(3);
        i0.ɵɵattribute("tabindex", ctx.config.disabled ? undefined : 0)("aria-valuetext", ctx.displayYears)("data-testid", ctx.testID + "_year");
        i0.ɵɵadvance(3);
        i0.ɵɵtextInterpolate(ctx.displayYears);
        i0.ɵɵadvance(3);
        i0.ɵɵclassProp("disabled", ctx.config.disabled);
        i0.ɵɵproperty("disabled", ctx.config.disabled);
        i0.ɵɵattribute("data-testid", ctx.testID + "_nextYear");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", ctx.isRtl ? "angle_left" : "angle_right");
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("@slideAnimation", ctx.animationCounter);
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", ctx.config.texts.emptyYear);
        i0.ɵɵadvance(9);
        i0.ɵɵproperty("ngForOf", ctx.years);
    } }, directives: [i3.AdaptIconComponent, i4.NgForOf, i4.NgIf], encapsulation: 2, data: { animation: [
            trigger('slideAnimation', SLIDE_ANIMATION)
        ] }, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxYearComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-rx-year',
                templateUrl: './adapt-rx-year.component.html',
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [
                    trigger('slideAnimation', SLIDE_ANIMATION)
                ]
            }]
    }], function () { return [{ type: i1.AdaptRxDatetimeConfigService }, { type: i2.Directionality }]; }, { year: [{
            type: Input
        }], activeYear: [{
            type: Input
        }], filter: [{
            type: Input
        }], disabled: [{
            type: Input
        }], rangeFrom: [{
            type: Input
        }], rangeTo: [{
            type: Input
        }], texts: [{
            type: Input
        }], testID: [{
            type: Input
        }], onYearChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=adapt-rx-year.component.js.map