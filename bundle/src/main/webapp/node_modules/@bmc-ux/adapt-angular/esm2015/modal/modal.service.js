import { Injectable, Injector, } from '@angular/core';
import { fromEvent } from 'rxjs';
import { ScrollManageService } from '../common/scroll-manage.service';
import { AdaptModalStackService } from './modal-stack.service';
import * as i0 from "@angular/core";
import * as i1 from "../common/scroll-manage.service";
import * as i2 from "./modal-stack.service";
/**
 * The service for using modal/dialogs
 *
 * open(config) – Opens modal window. Returns Promise that is resolved when a modal is closed and rejected when a modal is dismissed.
 *
 */
export class AdaptModalService {
    constructor(_injector, _scrollService, _modalStack) {
        this._injector = _injector;
        this._scrollService = _scrollService;
        this._modalStack = _modalStack;
        /**
         * The wrapper to include modals/dialogs
         */
        this._wrapper = document.body;
        // Get scroll manager
        this._scrollManager = this._scrollService.getScrollManager(this._wrapper);
        // Close all modals on route change
        this._popstateSubscription = fromEvent(window, 'popstate').subscribe(this.closeAllModals.bind(this));
    }
    get openedModals() {
        return this._modalStack.openedModals;
    }
    get activeModal() {
        return this._modalStack.activeModal;
    }
    ngOnDestroy() {
        this._popstateSubscription.unsubscribe();
        this._popstateSubscription = null;
    }
    /**
     * Open modal/dialog
     * @returns ModalDeferred - The Promise object with additional methods: resolve() and reject().
     * Resolved when a modal is closed and rejected when a modal is dismissed.
     */
    open(config) {
        return this._modalStack.open(config, this._injector);
    }
    updateConfig(config, modalComponent) {
        this._modalStack.updateConfig(config, modalComponent);
    }
    updateOverModalConfig(config, modalComponent) {
        this._modalStack.updateOverModalConfig(config, modalComponent, true);
    }
    // TODO: Refactor this if possible
    /**
     * Close modal/dialog
     */
    closeAllModals() {
        this._modalStack.closeAllModals();
    }
}
AdaptModalService.ɵfac = function AdaptModalService_Factory(t) { return new (t || AdaptModalService)(i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i1.ScrollManageService), i0.ɵɵinject(i2.AdaptModalStackService)); };
AdaptModalService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptModalService, factory: AdaptModalService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptModalService, [{
        type: Injectable
    }], function () { return [{ type: i0.Injector }, { type: i1.ScrollManageService }, { type: i2.AdaptModalStackService }]; }, null); })();
//# sourceMappingURL=modal.service.js.map