import { Component, ElementRef, EventEmitter, Injector, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { transition, trigger, useAnimation } from '@angular/animations';
import { createFormControlValidator, createFormControlValueAccessor, FormComponent } from '../common/form.component';
import { AdaptDeviceDetectionService } from '../common/device-detection.service';
import { ANIMATION_NAME } from '../common/animation';
import { AdaptDropdownDirective } from '../dropdown/dropdown.component';
import { AdaptTranslateService } from '../common/i18n/index';
import { formatString } from '../common/utilities';
import { noop } from 'rxjs';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "../common/device-detection.service";
import * as i2 from "../common/i18n/index";
import * as i3 from "../common/radar/adapt-radar";
import * as i4 from "@angular/common";
import * as i5 from "../dropdown/dropdown.component";
import * as i6 from "../rx/form-control/rx-control-label/adapt-rx-control-label.component";
import * as i7 from "../dragon-input-handler/dragon-input-handler.directive";
import * as i8 from "./clock.component";
const _c0 = ["timeDD"];
function AdaptTimeComponent_div_1_ng_container_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c1 = function (a0, a3, a4, a5, a6) { return { title: a0, fullHeight: true, isPicker: true, cancelCB: a3, doneCB: a4, doneBtnTitle: a5, cancelBtnTitle: a6 }; };
function AdaptTimeComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 4, 5);
    i0.ɵɵlistener("onOpen", function AdaptTimeComponent_div_1_Template_div_onOpen_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(); return ctx_r7.onOpenChange(true); })("onClose", function AdaptTimeComponent_div_1_Template_div_onClose_0_listener() { i0.ɵɵrestoreView(_r8); const ctx_r9 = i0.ɵɵnextContext(); return ctx_r9.onOpenChange(false); });
    i0.ɵɵtext(2, "\n      ");
    i0.ɵɵelementStart(3, "div", 6);
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵelement(5, "adapt-rx-control-label", 7);
    i0.ɵɵtext(6, "\n\n        ");
    i0.ɵɵelementStart(7, "input", 8);
    i0.ɵɵlistener("focus", function AdaptTimeComponent_div_1_Template_input_focus_7_listener() { i0.ɵɵrestoreView(_r8); const ctx_r10 = i0.ɵɵnextContext(); return ctx_r10.onFocus(); })("blur", function AdaptTimeComponent_div_1_Template_input_blur_7_listener() { i0.ɵɵrestoreView(_r8); const ctx_r11 = i0.ɵɵnextContext(); return ctx_r11.onBlur(); })("input", function AdaptTimeComponent_div_1_Template_input_input_7_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r12 = i0.ɵɵnextContext(); return ctx_r12.onInput($event.target.value); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n\n      ");
    i0.ɵɵelementStart(10, "div", 9);
    i0.ɵɵtext(11, "\n        ");
    i0.ɵɵtemplate(12, AdaptTimeComponent_div_1_ng_container_12_Template, 1, 0, "ng-container", 10);
    i0.ɵɵtext(13, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r5 = i0.ɵɵreference(1);
    const ctx_r0 = i0.ɵɵnextContext();
    const _r2 = i0.ɵɵreference(6);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("animationPlacement", "center")("placement", ctx_r0.placement)("appendToBody", ctx_r0.appendToBody)("autoClose", "outside")("mobileView", i0.ɵɵpureFunction5(31, _c1, ctx_r0.label, ctx_r0.mobileCancelBtnHandler, ctx_r0.mobileDoneBtnHandler, ctx_r0.mobileView.doneBtnTitle, ctx_r0.mobileView.cancelBtnTitle));
    i0.ɵɵadvance(3);
    i0.ɵɵclassProp("has-danger", ctx_r0._self.errors.length > 0);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("for", ctx_r0.id)("label", ctx_r0.label)("requiredLabel", ctx_r0.requiredLabel)("showRequiredLabel", ctx_r0.required)("tooltip", ctx_r0.tooltipConfig);
    i0.ɵɵadvance(2);
    i0.ɵɵclassMap("dt-input-control form-control i-time " + (ctx_r0.inputClass || ""));
    i0.ɵɵclassProp("form-control-disabled-look", ctx_r0.readonly && ctx_r0.disabledStyleForReadonlyState)("i-time", true)("dt-picker-open", _r5.isOpen() && !ctx_r0.disabled && !ctx_r0.readonly)("dt-invalid", ctx_r0._self.errors.length > 0);
    i0.ɵɵproperty("disabled", ctx_r0.disabled)("readonly", ctx_r0.readonly)("value", ctx_r0.inputValue);
    i0.ɵɵattribute("id", ctx_r0.id)("placeholder", ctx_r0.placeholder)("autocomplete", "off");
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", !ctx_r0.inline)("ngIfThen", _r2);
} }
function AdaptTimeComponent_div_3_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function AdaptTimeComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelement(2, "adapt-rx-control-label", 11);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementStart(4, "div", 12);
    i0.ɵɵtext(5, "\n        ");
    i0.ɵɵtemplate(6, AdaptTimeComponent_div_3_ng_container_6_Template, 1, 0, "ng-container", 10);
    i0.ɵɵtext(7, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    const _r2 = i0.ɵɵreference(6);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("for", ctx_r1.id)("label", ctx_r1.label)("requiredLabel", ctx_r1.requiredLabel)("showRequiredLabel", ctx_r1.required);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r1.inline)("ngIfThen", _r2);
} }
function AdaptTimeComponent_ng_template_5_div_18_Template(rf, ctx) { if (rf & 1) {
    const _r18 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 15);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementStart(2, "button", 21);
    i0.ɵɵlistener("click", function AdaptTimeComponent_ng_template_5_div_18_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r18); const ctx_r17 = i0.ɵɵnextContext(2); return ctx_r17.switchToAM(); });
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n            ");
    i0.ɵɵelementStart(5, "div", 17);
    i0.ɵɵtext(6);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n            ");
    i0.ɵɵelementStart(8, "button", 21);
    i0.ɵɵlistener("click", function AdaptTimeComponent_ng_template_5_div_18_Template_button_click_8_listener() { i0.ɵɵrestoreView(_r18); const ctx_r19 = i0.ɵɵnextContext(2); return ctx_r19.switchToPM(); });
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("active", !(ctx_r14.disabled || ctx_r14.readonly) && !ctx_r14.isPM);
    i0.ɵɵproperty("disabled", ctx_r14.disabled || ctx_r14.readonly);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", ctx_r14.timeTexts.amBtn, "\n            ");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r14.timeTexts.periodSeparator);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("active", !(ctx_r14.disabled || ctx_r14.readonly) && ctx_r14.isPM);
    i0.ɵɵproperty("disabled", ctx_r14.disabled || ctx_r14.readonly);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", ctx_r14.timeTexts.pmBtn, "\n            ");
} }
function AdaptTimeComponent_ng_template_5_div_23_Template(rf, ctx) { if (rf & 1) {
    const _r21 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementStart(2, "adapt-clock", 22);
    i0.ɵɵlistener("change", function AdaptTimeComponent_ng_template_5_div_23_Template_adapt_clock_change_2_listener($event) { i0.ɵɵrestoreView(_r21); const ctx_r20 = i0.ɵɵnextContext(2); return ctx_r20.hoursChange($event); })("changeEnd", function AdaptTimeComponent_ng_template_5_div_23_Template_adapt_clock_changeEnd_2_listener($event) { i0.ɵɵrestoreView(_r21); const ctx_r22 = i0.ɵɵnextContext(2); ctx_r22.hoursChange($event); return ctx_r22.activateMinutesClock(); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("initialValue", ctx_r15.hoursInitialValue)("disabled", ctx_r15.disabled || ctx_r15.readonly)("innerLabels", ctx_r15.hasMeridiem ? null : ctx_r15.hoursInnerLabels);
} }
function AdaptTimeComponent_ng_template_5_div_25_Template(rf, ctx) { if (rf & 1) {
    const _r24 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementStart(2, "adapt-clock", 23);
    i0.ɵɵlistener("change", function AdaptTimeComponent_ng_template_5_div_25_Template_adapt_clock_change_2_listener($event) { i0.ɵɵrestoreView(_r24); const ctx_r23 = i0.ɵɵnextContext(2); return ctx_r23.minutesChange($event); })("changeEnd", function AdaptTimeComponent_ng_template_5_div_25_Template_adapt_clock_changeEnd_2_listener($event) { i0.ɵɵrestoreView(_r24); const ctx_r25 = i0.ɵɵnextContext(2); ctx_r25.minutesChange($event); return ctx_r25.activateHoursClock(); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r16 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("initialValue", ctx_r16.minutesInitialValue)("disabled", ctx_r16.disabled || ctx_r16.readonly)("labelsFilter", ctx_r16.minutesFilter)("labels", ctx_r16.minutesLabels);
} }
function AdaptTimeComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    const _r27 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵelementStart(1, "div", 13);
    i0.ɵɵtext(2, "\n        ");
    i0.ɵɵelementStart(3, "div", 14);
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵelementStart(5, "div", 15);
    i0.ɵɵtext(6, "\n            ");
    i0.ɵɵelementStart(7, "button", 16);
    i0.ɵɵlistener("click", function AdaptTimeComponent_ng_template_5_Template_button_click_7_listener() { i0.ɵɵrestoreView(_r27); const ctx_r26 = i0.ɵɵnextContext(); return ctx_r26.activateHoursClock(); })("focus", function AdaptTimeComponent_ng_template_5_Template_button_focus_7_listener() { i0.ɵɵrestoreView(_r27); const ctx_r28 = i0.ɵɵnextContext(); return ctx_r28.activateHoursClock(); })("keydown.arrowup", function AdaptTimeComponent_ng_template_5_Template_button_keydown_arrowup_7_listener($event) { i0.ɵɵrestoreView(_r27); const ctx_r29 = i0.ɵɵnextContext(); return ctx_r29.addHour($event); })("keydown.arrowdown", function AdaptTimeComponent_ng_template_5_Template_button_keydown_arrowdown_7_listener($event) { i0.ɵɵrestoreView(_r27); const ctx_r30 = i0.ɵɵnextContext(); return ctx_r30.subHour($event); });
    i0.ɵɵtext(8);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n            ");
    i0.ɵɵelementStart(10, "div", 17);
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n            ");
    i0.ɵɵelementStart(13, "button", 18);
    i0.ɵɵlistener("click", function AdaptTimeComponent_ng_template_5_Template_button_click_13_listener() { i0.ɵɵrestoreView(_r27); const ctx_r31 = i0.ɵɵnextContext(); return ctx_r31.activateMinutesClock(); })("focus", function AdaptTimeComponent_ng_template_5_Template_button_focus_13_listener() { i0.ɵɵrestoreView(_r27); const ctx_r32 = i0.ɵɵnextContext(); return ctx_r32.activateMinutesClock(); })("keydown.arrowup", function AdaptTimeComponent_ng_template_5_Template_button_keydown_arrowup_13_listener($event) { i0.ɵɵrestoreView(_r27); const ctx_r33 = i0.ɵɵnextContext(); return ctx_r33.addMinute($event); })("keydown.arrowdown", function AdaptTimeComponent_ng_template_5_Template_button_keydown_arrowdown_13_listener($event) { i0.ɵɵrestoreView(_r27); const ctx_r34 = i0.ɵɵnextContext(); return ctx_r34.subMinute($event); });
    i0.ɵɵtext(14);
    i0.ɵɵpipe(15, "number");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(16, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(17, "\n\n          ");
    i0.ɵɵtemplate(18, AdaptTimeComponent_ng_template_5_div_18_Template, 11, 9, "div", 19);
    i0.ɵɵtext(19, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(20, "\n        ");
    i0.ɵɵelementStart(21, "div", 20);
    i0.ɵɵtext(22, "\n          ");
    i0.ɵɵtemplate(23, AdaptTimeComponent_ng_template_5_div_23_Template, 4, 3, "div", 1);
    i0.ɵɵtext(24, "\n          ");
    i0.ɵɵtemplate(25, AdaptTimeComponent_ng_template_5_div_25_Template, 4, 4, "div", 1);
    i0.ɵɵtext(26, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(27, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(28, "\n    ");
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(7);
    i0.ɵɵclassProp("active", !(ctx_r3.disabled || ctx_r3.readonly) && !ctx_r3.minutesViewActive);
    i0.ɵɵproperty("disabled", ctx_r3.disabled || ctx_r3.readonly);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", ctx_r3.hoursInitialValue, "\n            ");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r3.timeTexts.timeSeparator);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("active", !(ctx_r3.disabled || ctx_r3.readonly) && ctx_r3.minutesViewActive);
    i0.ɵɵproperty("disabled", ctx_r3.disabled || ctx_r3.readonly);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", i0.ɵɵpipeBind2(15, 12, ctx_r3.minutesInitialValue, "2.0"), "\n            ");
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r3.hasMeridiem);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", !ctx_r3.minutesViewActive);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r3.minutesViewActive);
} }
function AdaptTimeComponent_div_10_p_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 26);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "strong");
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const error_r36 = ctx.$implicit;
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("", error_r36.name, " ");
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", error_r36.text, "\n        ");
} }
function AdaptTimeComponent_div_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 24);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptTimeComponent_div_10_p_2_Template, 5, 2, "p", 25);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵproperty("@validationFeedbackAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r4._self.errors);
} }
export class AdaptTimeComponent extends FormComponent {
    constructor(_injector, _deviceDetector, ts, _adaptRadarService, _elem) {
        super(_injector, ts, _adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptTime);
        this._injector = _injector;
        this._deviceDetector = _deviceDetector;
        // Errors
        this._errWrongFormat = false;
        // Self link
        this._self = this;
        // Clocks settings
        this.minutesLabels = Array(60)
            .fill(0)
            .map((x, i) => {
            return {
                value: (i + 1) === 60 ? 0 : i + 1,
                uiValue: (i + 1) === 60 ? '00' : (i + 1) === 5 ? '05' : i + 1
            };
        });
        this.hoursInnerLabels = Array(12)
            .fill(0)
            .map((x, i) => {
            return {
                value: (i + 13) === 24 ? 0 : i + 13,
                uiValue: ((i + 13) === 24 ? '00' : i + 13).toString()
            };
        });
        this.isPM = false;
        this.inputValue = '';
        this.minutesViewActive = false;
        // IsMobile detection
        this._isMobile = false;
        this.timeTexts = {};
        this.defaultErrors = {};
        /**
         * Label icon with a tooltip or popover
         */
        this.tooltipConfig = null;
        this.disabledStyleForReadonlyState = false;
        /**
         * Mobile view settings
         */
        this.mobileView = {};
        this.hasMeridiem = false;
        /**
         * Picker placement
         */
        this.placement = ['bottom-left', 'top-left', 'bottom-right', 'top-right', 'bottom-left'];
        /**
         * Append to body trigger
         */
        this.appendToBody = false;
        /* eslint-disable-next-line @angular-eslint/no-output-native */
        this.change = new EventEmitter();
        /* eslint-disable-next-line @angular-eslint/no-output-native */
        this.blur = new EventEmitter();
        /* eslint-disable-next-line @angular-eslint/no-output-native */
        this.focus = new EventEmitter();
        this.mobileDoneBtnHandler = function () {
            this.timeDD.close();
        }.bind(this);
        this.mobileCancelBtnHandler = function () {
            this.value = this._previousModel;
            if (this._previousModel) {
                this.isPM = this._previousModel[0] >= 12;
                this.hoursInitialValue = this.hasMeridiem ? (this._previousModel[0] % 12 + (this.isPM ? 12 : 0)) || 12 : this._previousModel[0];
                this.minutesInitialValue = this._previousModel[1];
                this._updateInput();
            }
            else {
                this.inputValue = '';
            }
            this.timeDD.close();
        }.bind(this);
        // Regexps
        this._t12 = /^(1[0-2]|0?[1-9]):([0-5][0-9])\s([AaPp][Mm])$/;
        this._t24 = /^(2[0-3]|[01]?[0-9]):([0-5][0-9])$/;
        // Privates fields for ControlValueAccessor
        this.onTouchedCallback = noop;
        // TODO: Refactor this if possible
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        this.onChangeCallback = noop;
        // ngModel value
        this._model = null;
        // Previous NgModel value
        this._previousModel = null;
        this.minutesFilter = (label) => {
            return label.value % 5 === 0;
        };
        this._isMobile = this._deviceDetector.isMobile();
        this.setDefaultTexts(ts.getCurrentLanguage());
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // ### ControlValueAccessor implementation
    get value() {
        return this._model;
    }
    set value(v) {
        this._checkForErrors();
        if (this._model && v && ((this._model[0] !== v[0]) || (this._model[1] !== v[1]))) {
            this.change.emit(this._model);
        }
        if (this._model && !v) {
            this.change.emit(v);
        }
        this._model = v;
        this.onChangeCallback(this._model);
    }
    ngOnInit() {
        super.ngOnInit();
        this.initControl();
        // Control ID
        if (!this.id) {
            this.id = `time-control-${AdaptTimeComponent.TIME_CONTROL_ID++}`;
        }
        // Control Name
        if (!this.name) {
            this.name = this.id;
        }
        // Default Clocks values
        if (!this.initialValue) {
            this.initialValue = [new Date().getHours(), new Date().getMinutes()];
        }
        // Clocks Initial values
        if (this.value) {
            this.hoursInitialValue = this.value[0];
            this.minutesInitialValue = this.value[1];
        }
        else {
            this.hoursInitialValue = this.initialValue[0];
            this.minutesInitialValue = this.initialValue[1];
        }
        if (this.hasMeridiem) {
            this.isPM = this.hoursInitialValue >= 12;
            this.hoursInitialValue = (this.hoursInitialValue % 12 + (this.isPM ? 12 : 0)) || 12;
        }
        for (const prop in this._customErrorTexts) {
            if (prop) {
                this.overrideBuildInValidatorMessage(prop, () => this._customErrorTexts[prop]);
            }
        }
        if (this.tooltipIconCls && !this.popoverIcon) {
            this.tooltipConfig = {
                iconName: this.tooltipIconCls,
                content: this.tooltipText,
                placement: 'top',
                popoverMode: false
            };
        }
        else if (this.popoverIcon) {
            this.tooltipConfig = {
                iconName: this.popoverIcon,
                content: this.popoverContent,
                placement: this.popoverPlacement,
                popoverMode: true,
                popoverTriggers: this.popoverTriggers
            };
        }
    }
    setDefaultTexts(translation) {
        this.requiredLabel = translation['adapt.common.required'];
        this.timeTexts.timeSeparator = translation['adapt.datetime.timeSeparator'];
        this.timeTexts.periodSeparator = translation['adapt.datetime.periodSeparator'];
        this.timeTexts.amBtn = translation['adapt.datetime.am'];
        this.timeTexts.pmBtn = translation['adapt.datetime.pm'];
        this.defaultErrors.format = translation['adapt.time.error.format'];
        this.defaultErrors.formatName = translation['adapt.time.error.formatName'];
    }
    onFocus() {
        if (!(this.disabled || this.readonly)) {
            this.timeDD.open();
        }
        this.focus.emit();
    }
    onBlur() {
        if (!(this.disabled || this.readonly)) {
            this.onTouchedCallback();
        }
        this.blur.emit();
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    onInput(v) {
        this.inputValue = v;
        const time = this.hasMeridiem ? v.match(this._t12) : v.match(this._t24);
        if (time) {
            this.hoursChange(parseInt(time[1], 10));
            this.minutesChange(parseInt(time[2], 10));
            if (time[3]) {
                time[3].toUpperCase() === 'PM' ? this.switchToPM() : this.switchToAM();
            }
        }
        else {
            this.value = null;
        }
    }
    onOpenChange(e) {
        if (e) {
            this.minutesViewActive = false;
            this._previousModel = this.value;
        }
    }
    activateHoursClock() {
        this.minutesViewActive = false;
    }
    activateMinutesClock() {
        this.minutesViewActive = true;
    }
    switchToAM() {
        this.isPM = false;
        this.hoursChange();
    }
    switchToPM() {
        this.isPM = true;
        this.hoursChange();
    }
    hoursChange(newHoursValue) {
        if (newHoursValue === undefined) {
            newHoursValue = this.hoursInitialValue;
        }
        const hoursModelValue = this.hasMeridiem ? newHoursValue % 12 + (this.isPM ? 12 : 0) : newHoursValue;
        this.value = [hoursModelValue, this.minutesInitialValue];
        this.hoursInitialValue = newHoursValue;
        this._updateInput();
    }
    minutesChange(newMinutesValue) {
        const hoursValue = this.hasMeridiem ? this.hoursInitialValue % 12 + (this.isPM ? 12 : 0) : this.hoursInitialValue;
        this.value = [hoursValue, newMinutesValue];
        this.minutesInitialValue = newMinutesValue;
        this._updateInput();
    }
    addHour(e) {
        if (this._isMobile) {
            return;
        }
        e.preventDefault();
        let newHourVal = (+this.hoursInitialValue + 1);
        if (this.hasMeridiem) {
            newHourVal = (newHourVal % 12) || 12;
        }
        else {
            newHourVal %= 24;
        }
        this.hoursChange(newHourVal);
    }
    subHour(e) {
        if (this._isMobile) {
            return;
        }
        e.preventDefault();
        let newHourVal = +this.hoursInitialValue;
        if (this.hasMeridiem) {
            newHourVal = newHourVal === 1 ? 12 : newHourVal - 1;
        }
        else {
            newHourVal = newHourVal === 0 ? 23 : newHourVal - 1;
        }
        this.hoursChange(newHourVal);
    }
    addMinute(e) {
        if (this._isMobile) {
            return;
        }
        e.preventDefault();
        this.minutesChange((+this.minutesInitialValue + 1) % 60);
    }
    subMinute(e) {
        if (this._isMobile) {
            return;
        }
        e.preventDefault();
        this.minutesChange(+this.minutesInitialValue === 0 ? 59 : +this.minutesInitialValue - 1);
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    writeValue(v) {
        if (v) {
            this.isPM = v[0] >= 12;
            this.hoursInitialValue = this.hasMeridiem ? (v[0] % 12 + (this.isPM ? 12 : 0)) || 12 : v[0];
            this.minutesInitialValue = v[1];
            this._updateInput();
            this._model = v;
        }
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    // ### Validate implementation
    validate() {
        const formatError = {
            dateError: this._customErrorTexts.timeFormatError || {
                name: this.defaultErrors.formatName,
                text: formatString(this.defaultErrors.format, `"${this.hasMeridiem ? 'HH:mm meridiem' : 'HH:mm'}"`)
            }
        };
        if (this._errWrongFormat) {
            return formatError;
        }
        else {
            return null;
        }
    }
    _updateInput() {
        const timeStr = this.hoursInitialValue + ':' + ('0' + this.minutesInitialValue).slice(-2);
        const meridiem = this.isPM ? 'PM' : 'AM';
        this.inputValue = timeStr + (this.hasMeridiem ? (' ' + meridiem) : '');
    }
    _checkForErrors() {
        this._errWrongFormat = this.inputValue && !(this.hasMeridiem ? this.inputValue.match(this._t12) : this.inputValue.match(this._t24));
    }
}
// Static fields
AdaptTimeComponent.TIME_CONTROL_ID = 1;
AdaptTimeComponent.ɵfac = function AdaptTimeComponent_Factory(t) { return new (t || AdaptTimeComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i2.AdaptTranslateService), i0.ɵɵdirectiveInject(i3.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptTimeComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptTimeComponent, selectors: [["adapt-time"]], viewQuery: function AdaptTimeComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.timeDD = _t.first);
    } }, hostVars: 1, hostBindings: function AdaptTimeComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("name", ctx.name);
    } }, inputs: { id: "id", label: "label", name: "name", inputClass: "inputClass", disabledStyleForReadonlyState: "disabledStyleForReadonlyState", placeholder: "placeholder", inline: "inline", mobileView: "mobileView", hasMeridiem: "hasMeridiem", initialValue: "initialValue", placement: "placement", appendToBody: "appendToBody" }, outputs: { change: "change", blur: "blur", focus: "focus" }, features: [i0.ɵɵProvidersFeature([
            createFormControlValueAccessor(AdaptTimeComponent),
            createFormControlValidator(AdaptTimeComponent),
        ]), i0.ɵɵInheritDefinitionFeature], decls: 13, vars: 5, consts: [["adaptDropdown", "", 3, "adaptRadarDisableEventSending", "animationPlacement", "placement", "appendToBody", "autoClose", "mobileView", "onOpen", "onClose", 4, "ngIf"], [4, "ngIf"], ["timePicker", ""], ["class", "has-danger", 4, "ngIf"], ["adaptDropdown", "", 3, "adaptRadarDisableEventSending", "animationPlacement", "placement", "appendToBody", "autoClose", "mobileView", "onOpen", "onClose"], ["timeDD", "adaptDropdown"], ["adaptDropdownAnchor", ""], [3, "for", "label", "requiredLabel", "showRequiredLabel", "tooltip"], [3, "disabled", "readonly", "value", "focus", "blur", "input"], ["adaptDropdownMenu", "", 1, "dropdown-menu", "a-tp__dropdown"], [4, "ngIf", "ngIfThen"], [3, "for", "label", "requiredLabel", "showRequiredLabel"], [1, "a-tp__inline"], [1, "a-tp__wrapper"], [1, "a-tp__controls"], [1, "a-tp__controls-section"], [1, "a-tp__controls-section-item", "a-tp__control", "a-tp__control--hours", 3, "disabled", "click", "focus", "keydown.arrowup", "keydown.arrowdown"], [1, "a-tp__controls-section-item"], [1, "a-tp__controls-section-item", "a-tp__control", 3, "disabled", "click", "focus", "keydown.arrowup", "keydown.arrowdown"], ["class", "a-tp__controls-section", 4, "ngIf"], [1, "a-tp__clock"], ["type", "button", 1, "a-tp__controls-section-item", "a-tp__control", 3, "disabled", "click"], [3, "initialValue", "disabled", "innerLabels", "change", "changeEnd"], [3, "initialValue", "disabled", "labelsFilter", "labels", "change", "changeEnd"], [1, "has-danger"], ["class", "form-control-feedback m-0 pt-1 pb-0", 4, "ngFor", "ngForOf"], [1, "form-control-feedback", "m-0", "pt-1", "pb-0"]], template: function AdaptTimeComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtext(0, "\n    ");
        i0.ɵɵtemplate(1, AdaptTimeComponent_div_1_Template, 15, 37, "div", 0);
        i0.ɵɵtext(2, "\n\n    ");
        i0.ɵɵtemplate(3, AdaptTimeComponent_div_3_Template, 9, 6, "div", 1);
        i0.ɵɵtext(4, "\n\n    ");
        i0.ɵɵtemplate(5, AdaptTimeComponent_ng_template_5_Template, 29, 15, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(7, "\n\n    ");
        i0.ɵɵelementStart(8, "div");
        i0.ɵɵtext(9, "\n      ");
        i0.ɵɵtemplate(10, AdaptTimeComponent_div_10_Template, 4, 2, "div", 3);
        i0.ɵɵtext(11, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(12, "\n  ");
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx.inline);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.inline);
        i0.ɵɵadvance(5);
        i0.ɵɵclassProp("has-danger", ctx._self.errors.length > 0);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx._self.errors.length > 0);
    } }, directives: [i4.NgIf, i5.AdaptDropdownDirective, i5.AdaptDropdownAnchorDirective, i6.AdaptRxControlLabelComponent, i7.AdaptDragonInputHandlerDirective, i5.AdaptDropdownMenuDirective, i8.ClockComponent, i4.NgForOf], pipes: [i4.DecimalPipe], styles: ["\n      .a-tp__dropdown {\n        padding: 0;\n        user-select: none;\n      }\n\n      .a-tp__wrapper {\n\n      }\n\n      .a-tp__clock {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        justify-content: center;\n        min-width: 300px;\n        min-height: 300px;\n        max-width: 100%;\n        max-height: 100%;\n      }\n\n      .a-tp__controls {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        justify-content: center;\n        height: 58px;\n        background: #272b2f;\n      }\n\n      .a-tp__controls-section {\n        display: flex;\n        flex-direction: row;\n        flex: 0 0 auto;\n        margin: 0 2px;\n        font-size: 21px;\n        font-weight: 600;\n        direction: ltr;\n      }\n\n      .a-tp__controls-section-item {\n        flex: 0 0 auto;\n        margin: 0 2px;\n        color: #999;\n      }\n\n      .a-tp__control {\n        cursor: pointer;\n        padding: 0;\n        border: 0;\n        background: 0;\n        outline: 0;\n        transition: color .2s;\n      }\n\n      .a-tp__control--hours {\n        width: 24px;\n        text-align: right;\n      }\n\n      .a-tp__control.active {\n        color: #fff;\n      }\n\n      .a-tp__inline {\n        width: 300px;\n      }\n\n      .a-tp__inline .a-tp__clock {\n        border: 1px solid #D9D9D9;\n        border-top: 0;\n      }\n    "], encapsulation: 2, data: { animation: [
            trigger('clockAnimation', [
                transition('void => *', [
                    useAnimation(ANIMATION_NAME.popIn)
                ]),
                transition('* => void', [
                    useAnimation(ANIMATION_NAME.popOut)
                ])
            ]),
            trigger('validationFeedbackAnimation', [
                transition(':enter', [
                    useAnimation(ANIMATION_NAME.fadeIn)
                ]),
                transition(':leave', [
                    useAnimation(ANIMATION_NAME.fadeOut)
                ])
            ]),
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptTimeComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-time',
                template: `
    <div *ngIf="!inline"
         adaptDropdown
         [adaptRadarDisableEventSending]="true"
         #timeDD="adaptDropdown"
         [animationPlacement]="'center'"
         [placement]="placement"
         [appendToBody]="appendToBody"
         [autoClose]="'outside'"
         [mobileView]="{
           title: label,
           fullHeight: true,
           isPicker: true,
           cancelCB: mobileCancelBtnHandler,
           doneCB: mobileDoneBtnHandler,
           doneBtnTitle: mobileView.doneBtnTitle,
           cancelBtnTitle: mobileView.cancelBtnTitle}"
         (onOpen)="onOpenChange(true)"
         (onClose)="onOpenChange(false)">
      <div adaptDropdownAnchor [class.has-danger]="_self.errors.length > 0">
        <adapt-rx-control-label [for]="id"
                                [label]="label"
                                [requiredLabel]="requiredLabel"
                                [showRequiredLabel]="required"
                                [tooltip]="tooltipConfig"></adapt-rx-control-label>

        <input [attr.id]="id"
               [class]="'dt-input-control form-control i-time ' + (inputClass || '')"
               [disabled]="disabled"
               [readonly]="readonly"
               [class.form-control-disabled-look]="readonly && this.disabledStyleForReadonlyState"
               (focus)="onFocus()"
               (blur)="onBlur()"
               (input)="onInput($event.target.value)"
               [value]="inputValue"
               [attr.placeholder]="placeholder"
               [attr.autocomplete]="'off'"
               [class.i-time]="true"
               [class.dt-picker-open]="timeDD.isOpen() && !disabled && !readonly"
               [class.dt-invalid]="_self.errors.length > 0"/>
      </div>

      <div adaptDropdownMenu class="dropdown-menu a-tp__dropdown">
        <ng-container *ngIf="!inline; then timePicker"></ng-container>
      </div>
    </div>

    <div *ngIf="inline">
      <adapt-rx-control-label [for]="id"
                              [label]="label"
                              [requiredLabel]="requiredLabel"
                              [showRequiredLabel]="required"></adapt-rx-control-label>
      <div class="a-tp__inline">
        <ng-container *ngIf="inline; then timePicker"></ng-container>
      </div>
    </div>

    <ng-template #timePicker>
      <div class="a-tp__wrapper">
        <div class="a-tp__controls">
          <div class="a-tp__controls-section">
            <button class="a-tp__controls-section-item a-tp__control a-tp__control--hours"
                    [class.active]="!(disabled || readonly) && !minutesViewActive"
                    (click)="activateHoursClock()"
                    (focus)="activateHoursClock()"
                    (keydown.arrowup)="addHour($event)"
                    (keydown.arrowdown)="subHour($event)"
                    [disabled]="disabled || readonly">{{hoursInitialValue}}
            </button>
            <div class="a-tp__controls-section-item">{{timeTexts.timeSeparator}}</div>
            <button class="a-tp__controls-section-item a-tp__control"
                    [class.active]="!(disabled || readonly) && minutesViewActive"
                    (click)="activateMinutesClock()"
                    (focus)="activateMinutesClock()"
                    (keydown.arrowup)="addMinute($event)"
                    (keydown.arrowdown)="subMinute($event)"
                    [disabled]="disabled || readonly">{{minutesInitialValue | number:'2.0'}}
            </button>
          </div>

          <div class="a-tp__controls-section" *ngIf="hasMeridiem">
            <button class="a-tp__controls-section-item a-tp__control"
                    [class.active]="!(disabled || readonly) && !isPM"
                    (click)="switchToAM()"
                    type="button"
                    [disabled]="disabled || readonly">{{timeTexts.amBtn}}
            </button>
            <div class="a-tp__controls-section-item">{{timeTexts.periodSeparator}}</div>
            <button class="a-tp__controls-section-item a-tp__control"
                    [class.active]="!(disabled || readonly) && isPM"
                    (click)="switchToPM()"
                    type="button"
                    [disabled]="disabled || readonly">{{timeTexts.pmBtn}}
            </button>
          </div>
        </div>
        <div class="a-tp__clock">
          <div *ngIf="!minutesViewActive">
            <adapt-clock [initialValue]="hoursInitialValue"
                         [disabled]="disabled || readonly"
                         [innerLabels]="(hasMeridiem ?  null : hoursInnerLabels)"
                         (change)="hoursChange($event)"
                         (changeEnd)="hoursChange($event); activateMinutesClock()"></adapt-clock>
          </div>
          <div *ngIf="minutesViewActive">
            <adapt-clock [initialValue]="minutesInitialValue"
                         [disabled]="disabled || readonly"
                         [labelsFilter]="minutesFilter"
                         [labels]="minutesLabels"
                         (change)="minutesChange($event)"
                         (changeEnd)="minutesChange($event); activateHoursClock()"></adapt-clock>
          </div>
        </div>
      </div>
    </ng-template>

    <div [class.has-danger]="_self.errors.length > 0">
      <div class="has-danger" *ngIf="_self.errors.length > 0" [@validationFeedbackAnimation]>
        <p class="form-control-feedback m-0 pt-1 pb-0" *ngFor="let error of _self.errors">
          <strong>{{error.name}} </strong>{{error.text}}
        </p>
      </div>
    </div>
  `,
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[attr.name]': 'name',
                },
                animations: [
                    trigger('clockAnimation', [
                        transition('void => *', [
                            useAnimation(ANIMATION_NAME.popIn)
                        ]),
                        transition('* => void', [
                            useAnimation(ANIMATION_NAME.popOut)
                        ])
                    ]),
                    trigger('validationFeedbackAnimation', [
                        transition(':enter', [
                            useAnimation(ANIMATION_NAME.fadeIn)
                        ]),
                        transition(':leave', [
                            useAnimation(ANIMATION_NAME.fadeOut)
                        ])
                    ]),
                ],
                providers: [
                    createFormControlValueAccessor(AdaptTimeComponent),
                    createFormControlValidator(AdaptTimeComponent),
                ],
                styles: [
                    `
      .a-tp__dropdown {
        padding: 0;
        user-select: none;
      }

      .a-tp__wrapper {

      }

      .a-tp__clock {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        min-width: 300px;
        min-height: 300px;
        max-width: 100%;
        max-height: 100%;
      }

      .a-tp__controls {
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
        height: 58px;
        background: #272b2f;
      }

      .a-tp__controls-section {
        display: flex;
        flex-direction: row;
        flex: 0 0 auto;
        margin: 0 2px;
        font-size: 21px;
        font-weight: 600;
        direction: ltr;
      }

      .a-tp__controls-section-item {
        flex: 0 0 auto;
        margin: 0 2px;
        color: #999;
      }

      .a-tp__control {
        cursor: pointer;
        padding: 0;
        border: 0;
        background: 0;
        outline: 0;
        transition: color .2s;
      }

      .a-tp__control--hours {
        width: 24px;
        text-align: right;
      }

      .a-tp__control.active {
        color: #fff;
      }

      .a-tp__inline {
        width: 300px;
      }

      .a-tp__inline .a-tp__clock {
        border: 1px solid #D9D9D9;
        border-top: 0;
      }
    `
                ],
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: i0.Injector }, { type: i1.AdaptDeviceDetectionService }, { type: i2.AdaptTranslateService }, { type: i3.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { id: [{
            type: Input
        }], label: [{
            type: Input
        }], name: [{
            type: Input
        }], inputClass: [{
            type: Input
        }], disabledStyleForReadonlyState: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], inline: [{
            type: Input
        }], mobileView: [{
            type: Input
        }], hasMeridiem: [{
            type: Input
        }], initialValue: [{
            type: Input
        }], placement: [{
            type: Input
        }], appendToBody: [{
            type: Input
        }], change: [{
            type: Output
        }], blur: [{
            type: Output
        }], focus: [{
            type: Output
        }], timeDD: [{
            type: ViewChild,
            args: ['timeDD']
        }] }); })();
//# sourceMappingURL=time.component.js.map