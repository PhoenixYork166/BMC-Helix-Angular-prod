{"version":3,"file":"validate.utils.js","sourceRoot":"","sources":["../../../../../../../libs/adapt-angular/src/rx/rx-datetime/common/validate.utils.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAC,MAAM,WAAW,CAAC;AAEzD,SAAS,aAAa,CAAC,KAAc;IACnC,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAC1C,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,aAAa,CAAC,IAAU;IACtC,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;AACxD,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,WAAW,CAAC,IAAU;IACpC,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;AACvD,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,gBAAgB,CAAC,IAAU;IACzC,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC;AAC1C,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,mBAAmB,CAAC,IAAsB;IACxD,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC;AAC7E,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,YAAY,CAAC,IAAU;IACrC,OAAO,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;AACzC,CAAC","sourcesContent":["import {RxDatetimeStruct} from '../adapt-rx-datetime.types';\nimport {isDate, isNaN, isNil, isNumber} from 'lodash-es';\n\nfunction isValidNumber(value: unknown): boolean {\n  return isNumber(value) && !isNaN(value);\n}\n\n/**\n * isInvalidDate() function\n *\n * Determines if the input date is an \"Invalid Date\" object\n */\nexport function isInvalidDate(date: Date): boolean {\n  return isDate(date) && !isValidNumber(date.valueOf());\n}\n\n/**\n * isValidDate() function\n *\n * Determines if the input value is a Date but not an \"Invalid Date\"\n */\nexport function isValidDate(date: Date): boolean {\n  return isDate(date) && isValidNumber(date.valueOf());\n}\n\n/**\n * isNilOrValidDate() function\n *\n * Determines if the input value is undefined, null or a valid Date\n */\nexport function isNilOrValidDate(date: Date): boolean {\n  return isNil(date) || isValidDate(date);\n}\n\n/**\n * isInvalidDateStruct() function\n *\n * Determines if the input date struct corresponds to an \"Invalid Date\" object\n */\nexport function isInvalidDateStruct(date: RxDatetimeStruct): boolean {\n  return Boolean(date) && Object.values(date).some(value => value !== value);\n}\n\n/**\n * getValidDate() function\n *\n * Helper method that converts Invalid Date objects to null\n */\nexport function getValidDate(date: Date): Date {\n  return isValidDate(date) ? date : null;\n}\n"]}