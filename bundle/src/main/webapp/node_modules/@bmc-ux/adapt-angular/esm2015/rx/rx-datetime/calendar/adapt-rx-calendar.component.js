import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Inject, Input, LOCALE_ID, Output, QueryList, ViewChildren } from '@angular/core';
import { trigger } from '@angular/animations';
import { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE, TAB, UP_ARROW } from '@angular/cdk/keycodes';
import { cloneDeep, isEqual, isFunction, isNil, isUndefined } from 'lodash-es';
import { getEventKeyCode } from '../../../common/key-codes';
import { AdaptRxDatetimeConfigService } from '../adapt-rx-datetime-config.service';
import { AdaptRxDatetimeI18nService } from '../adapt-rx-datetime-i18n.service';
import { CALENDAR_ROWS, checkIfPropsDefined, DAYS_A_WEEK, getDateStamp, MONTHS_A_YEAR, SLIDE_HORIZONTAL_ANIMATION } from '../common/common.utils';
import { RxCalendarDay } from '../adapt-rx-datetime.types';
import { Directionality } from '@angular/cdk/bidi';
import * as i0 from "@angular/core";
import * as i1 from "../adapt-rx-datetime-config.service";
import * as i2 from "../adapt-rx-datetime-i18n.service";
import * as i3 from "@angular/cdk/bidi";
import * as i4 from "@angular/common";
import * as i5 from "../../../icon/icon.component";
const _c0 = ["dayButtonElement"];
function AdaptRxCalendarComponent_div_2_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵelementStart(1, "div", 11);
    i0.ɵɵtext(2, "\n        ");
    i0.ɵɵelementStart(3, "button", 12);
    i0.ɵɵlistener("click", function AdaptRxCalendarComponent_div_2_ng_template_6_Template_button_click_3_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r7 = i0.ɵɵnextContext(2); $event.stopPropagation(); return ctx_r7.prevYear(); });
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵelement(5, "adapt-icon", 13);
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n        ");
    i0.ɵɵelementStart(8, "div", 14);
    i0.ɵɵlistener("keydown", function AdaptRxCalendarComponent_div_2_ng_template_6_Template_div_keydown_8_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r9 = i0.ɵɵnextContext(2); return ctx_r9.changeUIYear($event); });
    i0.ɵɵtext(9, "\n          ");
    i0.ɵɵelementStart(10, "div");
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(13, "\n        ");
    i0.ɵɵelementStart(14, "button", 12);
    i0.ɵɵlistener("click", function AdaptRxCalendarComponent_div_2_ng_template_6_Template_button_click_14_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r10 = i0.ɵɵnextContext(2); $event.stopPropagation(); return ctx_r10.nextYear(); });
    i0.ɵɵtext(15, "\n          ");
    i0.ɵɵelement(16, "adapt-icon", 13);
    i0.ɵɵtext(17, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(19, "\n    ");
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵclassProp("disabled", ctx_r4.config.disabled);
    i0.ɵɵproperty("disabled", ctx_r4.config.disabled);
    i0.ɵɵattribute("data-testid", ctx_r4.testID + "_prevYear");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", ctx_r4.isRtl ? "angle_right" : "angle_left");
    i0.ɵɵadvance(3);
    i0.ɵɵattribute("aria-label", ctx_r4.config.texts.emptyYear)("tabindex", ctx_r4.config.disabled ? undefined : 0)("aria-valuenow", ctx_r4.calendar.year)("data-testid", ctx_r4.testID + "_year");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("@slideAnimation", ctx_r4.yearAnimationCounter);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r4.calendar.year);
    i0.ɵɵadvance(3);
    i0.ɵɵclassProp("disabled", ctx_r4.config.disabled);
    i0.ɵɵproperty("disabled", ctx_r4.config.disabled);
    i0.ɵɵattribute("data-testid", ctx_r4.testID + "_nextYear");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", ctx_r4.isRtl ? "angle_left" : "angle_right");
} }
function AdaptRxCalendarComponent_div_2_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    const _r12 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵelementStart(1, "div", 11);
    i0.ɵɵtext(2, "\n        ");
    i0.ɵɵelementStart(3, "button", 12);
    i0.ɵɵlistener("click", function AdaptRxCalendarComponent_div_2_ng_template_9_Template_button_click_3_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r11 = i0.ɵɵnextContext(2); $event.stopPropagation(); return ctx_r11.prevMonth(); });
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵelement(5, "adapt-icon", 13);
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n        ");
    i0.ɵɵelementStart(8, "div", 14);
    i0.ɵɵlistener("keydown", function AdaptRxCalendarComponent_div_2_ng_template_9_Template_div_keydown_8_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r13 = i0.ɵɵnextContext(2); return ctx_r13.changeUIMonth($event); });
    i0.ɵɵtext(9, "\n          ");
    i0.ɵɵelementStart(10, "div");
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(13, "\n        ");
    i0.ɵɵelementStart(14, "button", 12);
    i0.ɵɵlistener("click", function AdaptRxCalendarComponent_div_2_ng_template_9_Template_button_click_14_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r14 = i0.ɵɵnextContext(2); $event.stopPropagation(); return ctx_r14.nextMonth(); });
    i0.ɵɵtext(15, "\n          ");
    i0.ɵɵelement(16, "adapt-icon", 13);
    i0.ɵɵtext(17, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(19, "\n    ");
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵclassProp("disabled", ctx_r6.config.disabled);
    i0.ɵɵproperty("disabled", ctx_r6.config.disabled);
    i0.ɵɵattribute("data-testid", ctx_r6.testID + "_prevMonth");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", ctx_r6.isRtl ? "angle_right" : "angle_left");
    i0.ɵɵadvance(3);
    i0.ɵɵattribute("aria-label", ctx_r6.config.texts.emptyMonth)("tabindex", ctx_r6.config.disabled ? undefined : 0)("aria-valuetext", ctx_r6.calendar.month)("data-testid", ctx_r6.testID + "_month");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("@slideAnimation", ctx_r6.monthAnimationCounter);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n            ", ctx_r6.config.expandedControlsStyle ? ctx_r6.calendar.monthNames[ctx_r6.calendar.month] : ctx_r6.calendar.monthNamesShort[ctx_r6.calendar.month], "\n          ");
    i0.ɵɵadvance(3);
    i0.ɵɵclassProp("disabled", ctx_r6.config.disabled);
    i0.ɵɵproperty("disabled", ctx_r6.config.disabled);
    i0.ɵɵattribute("data-testid", ctx_r6.testID + "_nextMonth");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", ctx_r6.isRtl ? "angle_left" : "angle_right");
} }
function AdaptRxCalendarComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 7);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementContainer(2, 8);
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementContainer(4, 8);
    i0.ɵɵtext(5, "\n\n    ");
    i0.ɵɵtemplate(6, AdaptRxCalendarComponent_div_2_ng_template_6_Template, 20, 18, "ng-template", null, 9, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(8, "\n    ");
    i0.ɵɵtemplate(9, AdaptRxCalendarComponent_div_2_ng_template_9_Template, 20, 18, "ng-template", null, 10, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(11, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r3 = i0.ɵɵreference(7);
    const _r5 = i0.ɵɵreference(10);
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("a3t-calendar--controls_expanded", ctx_r0.config.expandedControlsStyle);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", !ctx_r0.config.expandedControlsStyle ? _r5 : _r3);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r0.config.expandedControlsStyle ? _r5 : _r3);
} }
function AdaptRxCalendarComponent_ng_container_10_th_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "th", 17);
} }
function AdaptRxCalendarComponent_ng_container_10_th_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "th", 17);
} }
function AdaptRxCalendarComponent_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptRxCalendarComponent_ng_container_10_th_2_Template, 1, 0, "th", 15);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementStart(4, "th", 16);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵtemplate(7, AdaptRxCalendarComponent_ng_container_10_th_7_Template, 1, 0, "th", 15);
    i0.ɵɵtext(8, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const dayOfWeek_r15 = ctx.$implicit;
    const index_r16 = ctx.index;
    const first_r17 = ctx.first;
    const last_r18 = ctx.last;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", first_r17);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("abbr", ctx_r1.calendar.dayNames[index_r16]);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n          ", dayOfWeek_r15, "\n        ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", last_r18);
} }
function AdaptRxCalendarComponent_tr_21_ng_container_2_td_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "td", 17);
} if (rf & 2) {
    const calendarDay_r23 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵclassProp("range", calendarDay_r23.isInRange && !calendarDay_r23.isRangeFrom)("other-month", calendarDay_r23.isOtherMonth);
} }
function AdaptRxCalendarComponent_tr_21_ng_container_2_td_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "td", 17);
} if (rf & 2) {
    const calendarDay_r23 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵclassProp("range", calendarDay_r23.isInRange && !calendarDay_r23.isRangeTo)("other-month", calendarDay_r23.isOtherMonth);
} }
function AdaptRxCalendarComponent_tr_21_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r32 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptRxCalendarComponent_tr_21_ng_container_2_td_2_Template, 1, 4, "td", 18);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementStart(4, "td", 19);
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵelementStart(6, "button", 20, 21);
    i0.ɵɵlistener("click", function AdaptRxCalendarComponent_tr_21_ng_container_2_Template_button_click_6_listener() { const restoredCtx = i0.ɵɵrestoreView(_r32); const calendarDay_r23 = restoredCtx.$implicit; const ctx_r31 = i0.ɵɵnextContext(2); return ctx_r31.selectDate(calendarDay_r23); });
    i0.ɵɵtext(8, "\n            ");
    i0.ɵɵelementStart(9, "div");
    i0.ɵɵtext(10);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(13, "\n        ");
    i0.ɵɵtemplate(14, AdaptRxCalendarComponent_tr_21_ng_container_2_td_14_Template, 1, 4, "td", 18);
    i0.ɵɵtext(15, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const calendarDay_r23 = ctx.$implicit;
    const first_r24 = ctx.first;
    const last_r25 = ctx.last;
    const ctx_r22 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", first_r24);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("range", !calendarDay_r23.isOtherMonth && calendarDay_r23.isInRange && !(calendarDay_r23.isRangeFrom && calendarDay_r23.isRangeTo))("range-from", !calendarDay_r23.isOtherMonth && calendarDay_r23.isRangeFrom && !calendarDay_r23.isRangeTo)("range-to", !calendarDay_r23.isOtherMonth && calendarDay_r23.isRangeTo && !calendarDay_r23.isRangeFrom);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("active", calendarDay_r23.isSelected)("readonly", calendarDay_r23.isReadonly)("today", calendarDay_r23.isToday)("other-month", calendarDay_r23.isOtherMonth)("range-edge", calendarDay_r23.isRangeFrom || calendarDay_r23.isRangeTo)("disabled", calendarDay_r23.isDisabled || calendarDay_r23.isOtherMonth);
    i0.ɵɵattribute("aria-disabled", calendarDay_r23.isDisabled || calendarDay_r23.isOtherMonth)("aria-readonly", calendarDay_r23.isReadonly || calendarDay_r23.isDisabled || calendarDay_r23.isOtherMonth)("aria-selected", calendarDay_r23.isSelected)("data-testid", ctx_r22.testID + "_day_" + calendarDay_r23.value.date);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("@slideAnimation", ctx_r22.monthAnimationCounter);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(calendarDay_r23.value.date);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", last_r25);
} }
function AdaptRxCalendarComponent_tr_21_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr");
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptRxCalendarComponent_tr_21_ng_container_2_Template, 16, 26, "ng-container", 3);
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const calendarWeek_r21 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", calendarWeek_r21);
} }
export class AdaptRxCalendarComponent {
    constructor(_datetimeConfigService, _i18n, _changeDetectorRef, _dir, localeID) {
        this._i18n = _i18n;
        this._changeDetectorRef = _changeDetectorRef;
        this._dir = _dir;
        this.localeID = localeID;
        // Today CalendarValue
        this.today = (() => {
            const _today = new Date();
            return {
                year: _today.getFullYear(),
                month: _today.getMonth(),
                date: _today.getDate()
            };
        })();
        this.config = {
            firstDayOfWeek: undefined,
            year: this.today.year,
            month: this.today.month,
            activeDate: undefined,
            dayFilter: undefined,
            rangeFrom: undefined,
            rangeTo: undefined,
            disabled: false,
            readonly: false,
            hideControls: false,
            expandedControlsStyle: true,
            texts: undefined
        };
        /* eslint-disable-next-line @angular-eslint/no-output-on-prefix */
        this.onDateChange = new EventEmitter();
        this.yearAnimationCounter = 0;
        this.monthAnimationCounter = 0;
        this.isRtl = false;
        this.config.texts = _datetimeConfigService.texts;
        this.config.firstDayOfWeek = this._i18n.getFirstDayOfWeek(this.localeID);
        this.isRtl = this._dir.value === 'rtl';
        this._createCalendar(this.config.year, this.config.month);
    }
    ngAfterViewInit() {
        this._makeCalendarDayFocusable();
    }
    ngOnChanges(changes) {
        let calendarRebuildNeeded = false;
        let calendarUpdateNeeded = false;
        if (changes.firstDayOfWeek && !isNil(changes.firstDayOfWeek.currentValue)) {
            this.config.firstDayOfWeek = changes.firstDayOfWeek.currentValue % DAYS_A_WEEK;
            calendarRebuildNeeded = true;
        }
        if (changes.year && !isNil(changes.year.currentValue)) {
            this.config.year = changes.year.currentValue;
            calendarRebuildNeeded = true;
        }
        if (changes.month && !isNil(changes.month.currentValue)) {
            this.config.month = changes.month.currentValue % MONTHS_A_YEAR;
            calendarRebuildNeeded = true;
        }
        if (changes.activeDate && !isUndefined(changes.activeDate.currentValue)) {
            this.config.activeDate = changes.activeDate.currentValue;
            if (checkIfPropsDefined(this.config.activeDate, ['year', 'month', 'date'])) {
                if (this.config.year === this.config.activeDate.year && this.config.month === this.config.activeDate.month) {
                    calendarUpdateNeeded = true;
                }
                else {
                    this.config.year = this.config.activeDate.year;
                    this.config.month = this.config.activeDate.month % MONTHS_A_YEAR;
                    calendarRebuildNeeded = true;
                }
            }
            else {
                calendarRebuildNeeded = true;
            }
        }
        if (changes.dayFilter && !isUndefined(changes.dayFilter.currentValue)) {
            this.config.dayFilter = changes.dayFilter.currentValue;
            calendarUpdateNeeded = true;
        }
        if (changes.rangeFrom && !isUndefined(changes.rangeFrom.currentValue)) {
            this.config.rangeFrom = changes.rangeFrom.currentValue;
            calendarUpdateNeeded = true;
        }
        if (changes.rangeTo && !isUndefined(changes.rangeTo.currentValue)) {
            this.config.rangeTo = changes.rangeTo.currentValue;
            calendarUpdateNeeded = true;
        }
        if (changes.disabled && !isNil(changes.disabled.currentValue)) {
            this.config.disabled = changes.disabled.currentValue;
            calendarUpdateNeeded = true;
        }
        if (changes.readonly && !isNil(changes.readonly.currentValue)) {
            this.config.readonly = changes.readonly.currentValue;
            calendarUpdateNeeded = true;
        }
        if (changes.texts && !isNil(changes.texts.currentValue)) {
            Object.assign(this.config.texts, (changes.texts.currentValue));
            calendarUpdateNeeded = true;
        }
        if (changes.expandedControlsStyle && !isNil(changes.expandedControlsStyle.currentValue)) {
            this.config.expandedControlsStyle = changes.expandedControlsStyle.currentValue;
        }
        if (changes.hideControls && !isNil(changes.hideControls.currentValue)) {
            this.config.hideControls = changes.hideControls.currentValue;
        }
        if (calendarRebuildNeeded) {
            this._createCalendar(this.config.year, this.config.month);
        }
        else if (calendarUpdateNeeded) {
            this._updateCalendar();
        }
        this._makeCalendarDayFocusable();
    }
    changeUIYear(event) {
        const keyCode = getEventKeyCode(event);
        const changeValue = keyCode === UP_ARROW || keyCode === RIGHT_ARROW ? 1 :
            keyCode === DOWN_ARROW || keyCode === LEFT_ARROW ? -1 : null;
        if (changeValue) {
            event.preventDefault();
            if (changeValue > 0) {
                this.nextYear();
            }
            else {
                this.prevYear();
            }
        }
    }
    prevYear() {
        if (this.config.year <= 1) {
            return;
        }
        this.config.year--;
        this._createCalendar(this.config.year, this.config.month);
        this.yearAnimationCounter--;
        this.monthAnimationCounter--;
    }
    nextYear() {
        if (this.config.year < 1) {
            this.config.year = 0;
        }
        this.config.year++;
        this._createCalendar(this.config.year, this.config.month);
        this.yearAnimationCounter++;
        this.monthAnimationCounter++;
    }
    changeUIMonth(event) {
        const keyCode = getEventKeyCode(event);
        const changeValue = keyCode === UP_ARROW || keyCode === RIGHT_ARROW ? 1 :
            keyCode === DOWN_ARROW || keyCode === LEFT_ARROW ? -1 : null;
        if (changeValue) {
            event.preventDefault();
            if (changeValue > 0) {
                this.nextMonth();
            }
            else {
                this.prevMonth();
            }
        }
    }
    prevMonth() {
        this.config.month = (this.config.month + 11) % MONTHS_A_YEAR;
        if (this.config.month === 11) {
            this.config.year--;
            this.yearAnimationCounter--;
        }
        this._createCalendar(this.config.year, this.config.month);
        this.monthAnimationCounter--;
    }
    nextMonth() {
        this.config.month = (this.config.month + 1) % MONTHS_A_YEAR;
        if (this.config.month === 0) {
            this.config.year++;
            this.yearAnimationCounter++;
        }
        this._createCalendar(this.config.year, this.config.month);
        this.monthAnimationCounter++;
    }
    calendarDaysKeydownHandler(event) {
        let daysShift;
        switch (getEventKeyCode(event)) {
            case DOWN_ARROW: {
                daysShift = DAYS_A_WEEK;
                break;
            }
            case UP_ARROW: {
                daysShift = -DAYS_A_WEEK;
                break;
            }
            case RIGHT_ARROW: {
                daysShift = 1;
                break;
            }
            case LEFT_ARROW: {
                daysShift = -1;
                break;
            }
            case PAGE_DOWN: {
                event.preventDefault();
                if (event.shiftKey) {
                    // Changes the grid of dates to the next year.
                    this.nextYear();
                }
                else {
                    // Changes the grid of dates to the next month.
                    this.nextMonth();
                }
                let newFocusedCalendarDay = this.calendar.days[this.focusedCalendarDay.index];
                // If that day does not exist in current month, then moves focus to the same day of the previous or next week.
                if (newFocusedCalendarDay.isOtherMonth) {
                    if (newFocusedCalendarDay.index < (this.calendar.days.length / 2)) {
                        newFocusedCalendarDay = this.calendar.days[this.focusedCalendarDay.index + DAYS_A_WEEK].isOtherMonth ?
                            this.calendar.days[this.focusedCalendarDay.index + DAYS_A_WEEK * 2] :
                            this.calendar.days[this.focusedCalendarDay.index + DAYS_A_WEEK];
                    }
                    else {
                        newFocusedCalendarDay = this.calendar.days[this.focusedCalendarDay.index - DAYS_A_WEEK].isOtherMonth ?
                            this.calendar.days[this.focusedCalendarDay.index - DAYS_A_WEEK * 2] :
                            this.calendar.days[this.focusedCalendarDay.index - DAYS_A_WEEK];
                    }
                }
                this.focusedCalendarDay = cloneDeep(newFocusedCalendarDay);
                this._makeCalendarDayFocusable(this.focusedCalendarDay.index, true);
                break;
            }
            case PAGE_UP: {
                event.preventDefault();
                if (event.shiftKey) {
                    // Changes the grid of dates to the previous year.
                    this.prevYear();
                }
                else {
                    // Changes the grid of dates to the previous month.
                    this.prevMonth();
                }
                let newFocusedCalendarDay = this.calendar.days[this.focusedCalendarDay.index];
                // If that day does not exist in current month, then moves focus to the same day of the previous or next week.
                if (newFocusedCalendarDay.isOtherMonth) {
                    if (newFocusedCalendarDay.index < (this.calendar.days.length / 2)) {
                        newFocusedCalendarDay = this.calendar.days[this.focusedCalendarDay.index + DAYS_A_WEEK].isOtherMonth ?
                            this.calendar.days[this.focusedCalendarDay.index + DAYS_A_WEEK * 2] :
                            this.calendar.days[this.focusedCalendarDay.index + DAYS_A_WEEK];
                    }
                    else {
                        newFocusedCalendarDay = this.calendar.days[this.focusedCalendarDay.index - DAYS_A_WEEK].isOtherMonth ?
                            this.calendar.days[this.focusedCalendarDay.index - DAYS_A_WEEK * 2] :
                            this.calendar.days[this.focusedCalendarDay.index - DAYS_A_WEEK];
                    }
                }
                this.focusedCalendarDay = cloneDeep(newFocusedCalendarDay);
                this._makeCalendarDayFocusable(this.focusedCalendarDay.index, true);
                break;
            }
            case HOME: {
                // Moves focus to the first day (e.g Sunday) of the current week.
                event.preventDefault();
                let newFocusedCalendarDay = this.calendar.weeks
                    .find(week => week.find(dayOfWeek => dayOfWeek.index === this.focusedCalendarDay.index))[0];
                if (newFocusedCalendarDay.index === this.focusedCalendarDay.index) {
                    return;
                }
                if (newFocusedCalendarDay.isOtherMonth) {
                    const prevMonthDateToFocus = newFocusedCalendarDay.value.date;
                    this.prevMonth();
                    newFocusedCalendarDay = this.calendar.days
                        .find(day => !day.isOtherMonth && day.value.date === prevMonthDateToFocus);
                }
                this.focusedCalendarDay = cloneDeep(newFocusedCalendarDay);
                this._makeCalendarDayFocusable(this.focusedCalendarDay.index, true);
                break;
            }
            case END: {
                // Moves focus to the last day (e.g. Saturday) of the current week.
                event.preventDefault();
                let newFocusedCalendarDay = this.calendar.weeks
                    .find(week => week.find(dayOfWeek => dayOfWeek.index === this.focusedCalendarDay.index))[DAYS_A_WEEK - 1];
                if (newFocusedCalendarDay.index === this.focusedCalendarDay.index) {
                    return;
                }
                if (newFocusedCalendarDay.isOtherMonth) {
                    const nextMonthDateToFocus = newFocusedCalendarDay.value.date;
                    this.nextMonth();
                    newFocusedCalendarDay =
                        this.calendar.days.find(day => !day.isOtherMonth && day.value.date === nextMonthDateToFocus);
                }
                this.focusedCalendarDay = cloneDeep(newFocusedCalendarDay);
                this._makeCalendarDayFocusable(this.focusedCalendarDay.index, true);
                break;
            }
            case SPACE:
            case ENTER: {
                event.preventDefault();
                if (this.focusedCalendarDay) {
                    this.selectDate(this.focusedCalendarDay);
                }
                break;
            }
            case TAB: {
                this._makeCalendarDayFocusable();
                break;
            }
        }
        if (daysShift) {
            event.preventDefault();
            const nextFocusIndex = this.focusedCalendarDay.index + daysShift;
            let nextFocusCalendarDay = this.calendar.days.find(day => !day.isOtherMonth && day.index === nextFocusIndex);
            if (!nextFocusCalendarDay) {
                if (daysShift > 0) {
                    const nextMonthDayToFocus = this.focusedCalendarDay.value.date + daysShift - this.calendar.currentMonthDaysCount;
                    this.nextMonth();
                    nextFocusCalendarDay = this.calendar.days.find(day => !day.isOtherMonth && day.value.date === nextMonthDayToFocus);
                }
                else {
                    // const tempDate = nextFocusIndex - this.calendar.days[0].index + 1;
                    this.prevMonth();
                    const prevMonthDateToFocus = this.focusedCalendarDay.value.date + daysShift + this.calendar.currentMonthDaysCount;
                    nextFocusCalendarDay = this.calendar.days.find(day => !day.isOtherMonth && day.value.date === prevMonthDateToFocus);
                }
            }
            this.focusedCalendarDay = cloneDeep(nextFocusCalendarDay);
            this._makeCalendarDayFocusable(this.focusedCalendarDay.index, true);
        }
    }
    selectDate(calendarDay) {
        if (calendarDay.isOtherMonth || calendarDay.isDisabled || calendarDay.isReadonly) {
            return;
        }
        if (!this.config.readonly) {
            this.config.activeDate = calendarDay.value;
            this.onDateChange.emit(calendarDay.value);
            this.focusedCalendarDay = cloneDeep(calendarDay);
            this._updateCalendar();
        }
    }
    _createCalendar(year, month) {
        if (!this.calendar) {
            const dayNames = this._i18n.getWeekdayNames(false, this.localeID);
            const dayNamesShort = this._i18n.getWeekdayNames(true, this.localeID);
            this.calendar = {
                year: year,
                month: month,
                dayNames: Array(DAYS_A_WEEK)
                    .fill(0)
                    .map((day, index) => {
                    return dayNames[(index + this.config.firstDayOfWeek) % DAYS_A_WEEK];
                }),
                dayNamesShort: Array(DAYS_A_WEEK)
                    .fill(0)
                    .map((day, index) => {
                    return dayNamesShort[(index + this.config.firstDayOfWeek) % DAYS_A_WEEK];
                }),
                monthNames: this._i18n.getMonthNames(false, this.localeID),
                monthNamesShort: this._i18n.getMonthNames(true, this.localeID),
                weeks: Array(CALENDAR_ROWS)
                    .fill(0)
                    .map((value, weekIndex) => Array(DAYS_A_WEEK)
                    .fill(0)
                    .map((value, dayIndex) => new RxCalendarDay(weekIndex * DAYS_A_WEEK + dayIndex))),
                days: [],
                currentMonthDaysCount: 0
            };
        }
        else {
            this.calendar.year = year;
            this.calendar.month = month;
        }
        // Need to use temp date for cover cases with year value < 100
        const tempJsDate = new Date(2000, 0, 1, 0, 0, 0, 0); // 2000-01-01
        // Prev month
        tempJsDate.setFullYear(year);
        tempJsDate.setMonth(month);
        tempJsDate.setDate(0); // set the last day of prev month
        const prevMonth = tempJsDate.getMonth(); // number of prev month
        const prevMonthYear = tempJsDate.getFullYear(); // number of prev month
        const prevMonthDaysCount = tempJsDate.getDate(); // number of days in selected month
        // Current month
        tempJsDate.setDate(1); // set date firstly to be sure year/month will be set right
        tempJsDate.setFullYear(year); // reset year for case when prev month in the prev year
        tempJsDate.setMonth(month); // set current month
        const currentMonthFirstDayOfWeek = tempJsDate.getDay(); // first calendarDay of the month
        tempJsDate.setMonth(month + 1); // set to next month
        tempJsDate.setDate(0); // set the last day of current month
        const currentMonthDaysCount = tempJsDate.getDate(); // number of days in selected month
        // Next month
        tempJsDate.setDate(1); // set date firstly to be sure year/month will be set right
        tempJsDate.setFullYear(year); // reset year for case when next month in the next year
        tempJsDate.setMonth(month + 1);
        const nextMonth = tempJsDate.getMonth(); // number of prev month
        const nextMonthYear = tempJsDate.getFullYear(); // number of prev month
        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        let currentMonthDayCounter = 1;
        let nextMonthDayCounter = 1;
        const calendarMonthFirstDayOfWeek = (currentMonthFirstDayOfWeek - this.config.firstDayOfWeek + DAYS_A_WEEK) % DAYS_A_WEEK;
        this.calendar.weeks.forEach((week, weekIndex) => {
            week.forEach((dayOfWeek, dayOfWeekIndex) => {
                const calendarDayValue = {
                    year: null,
                    month: null,
                    date: null
                };
                const calendarDay = this.calendar.weeks[weekIndex][dayOfWeekIndex];
                if ((weekIndex === 0) && (dayOfWeekIndex < calendarMonthFirstDayOfWeek)) {
                    // prev month
                    calendarDayValue.year = prevMonthYear;
                    calendarDayValue.month = prevMonth;
                    calendarDayValue.date = prevMonthDaysCount + dayOfWeekIndex - (calendarMonthFirstDayOfWeek - 1);
                }
                else if (currentMonthDayCounter > currentMonthDaysCount) {
                    // next month
                    calendarDayValue.year = nextMonthYear;
                    calendarDayValue.month = nextMonth;
                    calendarDayValue.date = nextMonthDayCounter++;
                }
                else {
                    // current month
                    calendarDayValue.year = year;
                    calendarDayValue.month = month;
                    calendarDayValue.date = currentMonthDayCounter++;
                }
                calendarDay.value = calendarDayValue;
                calendarDay.isOtherMonth = calendarDay.value.month !== month;
                calendarDay.isToday = isEqual(calendarDay.value, this.today);
            });
        });
        this.calendar.days = this.calendar.weeks.reduce((sum, current) => {
            return sum.concat(current);
        }, []);
        this.calendar.currentMonthDaysCount = currentMonthDaysCount;
        this._updateCalendar();
    }
    _updateCalendar() {
        const rangeFromTS = this.config.rangeFrom ? getDateStamp(this.config.rangeFrom) : null;
        const rangeToTS = this.config.rangeTo ? getDateStamp(this.config.rangeTo) : null;
        this.calendar.weeks.forEach((week, weekIndex) => {
            week.forEach((dayOfWeek, dayOfWeekIndex) => {
                const calendarDay = this.calendar.weeks[weekIndex][dayOfWeekIndex];
                const currentDayTS = calendarDay.value ? getDateStamp(calendarDay.value) : null;
                calendarDay.isSelected = isEqual(calendarDay.value, this.config.activeDate);
                calendarDay.isReadonly = this.config.readonly;
                calendarDay.isDisabled =
                    this.config.disabled || (isFunction(this.config.dayFilter) ? !this.config.dayFilter(calendarDay.value) : false);
                calendarDay.isRangeFrom = !isNil(rangeFromTS) && (rangeFromTS === currentDayTS);
                calendarDay.isRangeTo = !isNil(rangeToTS) && (rangeToTS === currentDayTS);
                calendarDay.isInRange = !isNil(rangeFromTS) && !isNil(rangeToTS) &&
                    (currentDayTS >= rangeFromTS && currentDayTS <= rangeToTS);
            });
        });
    }
    _makeCalendarDayFocusable(calendarDayIndex, setFocusToElement) {
        var _a;
        if (isNil(calendarDayIndex)) {
            const nextFocusCalendarDay = this.calendar.days.find(day => day.isSelected) ||
                this.calendar.days.find(day => !day.isOtherMonth && day.value.date === 1);
            this.focusedCalendarDay = cloneDeep(nextFocusCalendarDay);
            if (this.focusedCalendarDay) {
                calendarDayIndex = this.focusedCalendarDay.index;
            }
        }
        (_a = this.dayButtonElements) === null || _a === void 0 ? void 0 : _a.forEach((item, index) => {
            if (index === calendarDayIndex) {
                item.nativeElement.setAttribute('tabindex', '0');
                if (setFocusToElement) {
                    item.nativeElement.focus();
                }
            }
            else {
                item.nativeElement.setAttribute('tabindex', '-1');
            }
        });
    }
}
AdaptRxCalendarComponent.ɵfac = function AdaptRxCalendarComponent_Factory(t) { return new (t || AdaptRxCalendarComponent)(i0.ɵɵdirectiveInject(i1.AdaptRxDatetimeConfigService), i0.ɵɵdirectiveInject(i2.AdaptRxDatetimeI18nService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.Directionality), i0.ɵɵdirectiveInject(LOCALE_ID)); };
AdaptRxCalendarComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptRxCalendarComponent, selectors: [["adapt-rx-calendar"]], viewQuery: function AdaptRxCalendarComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dayButtonElements = _t);
    } }, inputs: { firstDayOfWeek: "firstDayOfWeek", year: "year", month: "month", activeDate: "activeDate", dayFilter: "dayFilter", rangeFrom: "rangeFrom", rangeTo: "rangeTo", disabled: "disabled", readonly: "readonly", hideControls: "hideControls", expandedControlsStyle: "expandedControlsStyle", texts: "texts", testID: "testID" }, outputs: { onDateChange: "onDateChange" }, features: [i0.ɵɵNgOnChangesFeature], decls: 31, vars: 3, consts: [[1, "a3t-calendar"], ["class", "a3t-calendar--controls", 3, "a3t-calendar--controls_expanded", 4, "ngIf"], ["role", "grid", 1, "a3t-calendar--table"], [4, "ngFor", "ngForOf"], [1, "a3t-calendar--table-body", 3, "keydown"], ["aria-hidden", "true"], ["colspan", "9", 1, "a3t-calendar--table-space-cell"], [1, "a3t-calendar--controls"], [3, "ngTemplateOutlet"], ["pickYear", ""], ["pickMonth", ""], [1, "a3t-calendar--controls-line"], ["type", "button", "aria-hidden", "true", "tabindex", "-1", 1, "a3t-calendar--controls-btn", 3, "disabled", "click"], [3, "adaptRadarDisableEventSending", "name"], ["role", "spinbutton", 1, "a3t-calendar--controls-info", 3, "keydown"], ["class", "a3t-calendar--table-edge-cell", "aria-hidden", "true", 4, "ngIf"], ["scope", "col", 1, "a3t-calendar--table-week-name", 3, "abbr"], ["aria-hidden", "true", 1, "a3t-calendar--table-edge-cell"], ["class", "a3t-calendar--table-edge-cell", "aria-hidden", "true", 3, "range", "other-month", 4, "ngIf"], [1, "a3t-calendar--table-day"], ["type", "button", "tabindex", "-1", 3, "click"], ["dayButtonElement", ""]], template: function AdaptRxCalendarComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵtext(1, "\n  ");
        i0.ɵɵtemplate(2, AdaptRxCalendarComponent_div_2_Template, 12, 4, "div", 1);
        i0.ɵɵtext(3, "\n\n  ");
        i0.ɵɵelementStart(4, "table", 2);
        i0.ɵɵtext(5, "\n    ");
        i0.ɵɵelementStart(6, "thead");
        i0.ɵɵtext(7, "\n    ");
        i0.ɵɵelementStart(8, "tr");
        i0.ɵɵtext(9, "\n      ");
        i0.ɵɵtemplate(10, AdaptRxCalendarComponent_ng_container_10_Template, 9, 4, "ng-container", 3);
        i0.ɵɵtext(11, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(12, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(13, "\n    ");
        i0.ɵɵelementStart(14, "tbody", 4);
        i0.ɵɵlistener("keydown", function AdaptRxCalendarComponent_Template_tbody_keydown_14_listener($event) { return ctx.calendarDaysKeydownHandler($event); });
        i0.ɵɵtext(15, "\n    ");
        i0.ɵɵelementStart(16, "tr", 5);
        i0.ɵɵtext(17, "\n      ");
        i0.ɵɵelement(18, "td", 6);
        i0.ɵɵtext(19, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(20, "\n    ");
        i0.ɵɵtemplate(21, AdaptRxCalendarComponent_tr_21_Template, 4, 1, "tr", 3);
        i0.ɵɵtext(22, "\n    ");
        i0.ɵɵelementStart(23, "tr", 5);
        i0.ɵɵtext(24, "\n      ");
        i0.ɵɵelement(25, "td", 6);
        i0.ɵɵtext(26, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(27, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(28, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(29, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(30, "\n");
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx.config.hideControls);
        i0.ɵɵadvance(8);
        i0.ɵɵproperty("ngForOf", ctx.calendar.dayNamesShort);
        i0.ɵɵadvance(11);
        i0.ɵɵproperty("ngForOf", ctx.calendar.weeks);
    } }, directives: [i4.NgIf, i4.NgForOf, i4.NgTemplateOutlet, i5.AdaptIconComponent], encapsulation: 2, data: { animation: [
            trigger('slideAnimation', SLIDE_HORIZONTAL_ANIMATION)
        ] }, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxCalendarComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-rx-calendar',
                templateUrl: './adapt-rx-calendar.component.html',
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [
                    trigger('slideAnimation', SLIDE_HORIZONTAL_ANIMATION)
                ]
            }]
    }], function () { return [{ type: i1.AdaptRxDatetimeConfigService }, { type: i2.AdaptRxDatetimeI18nService }, { type: i0.ChangeDetectorRef }, { type: i3.Directionality }, { type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, { firstDayOfWeek: [{
            type: Input
        }], year: [{
            type: Input
        }], month: [{
            type: Input
        }], activeDate: [{
            type: Input
        }], dayFilter: [{
            type: Input
        }], rangeFrom: [{
            type: Input
        }], rangeTo: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], hideControls: [{
            type: Input
        }], expandedControlsStyle: [{
            type: Input
        }], texts: [{
            type: Input
        }], testID: [{
            type: Input
        }], onDateChange: [{
            type: Output
        }], dayButtonElements: [{
            type: ViewChildren,
            args: ['dayButtonElement']
        }] }); })();
//# sourceMappingURL=adapt-rx-calendar.component.js.map