{"version":3,"file":"adapt-rx-label-tooltip.component.js","sourceRoot":"","sources":["../../../../../../../libs/adapt-angular/src/rx/form-control/rx-control-label/adapt-rx-label-tooltip.component.ts","../../../../../../../libs/adapt-angular/src/rx/form-control/rx-control-label/adapt-rx-label-tooltip.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,WAAW,EAAC,MAAM,eAAe,CAAC;AAC5D,OAAO,EAAC,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAC,MAAM,WAAW,CAAC;AAEnD,OAAO,EAAC,qBAAqB,EAAC,MAAM,4BAA4B,CAAC;;;;;;;;ICF/D,gCAM6D;;;IALjD,oDAAsC,uCAAA,8CAAA,6CAAA,2CAAA;IAItC,yDAAwC;;;IAGpD,gCAS6D;;;IARjD,oDAAsC,uCAAA,8CAAA,6CAAA,kDAAA,mDAAA,2CAAA,2CAAA;IAOtC,yDAAwC;;;IAjBtD,6BAAoC;IAClC,oBAAA;IAAA,0GAM6D;IAE7D,sBAAA;IAAA,0GAS6D;IAC/D,kBAAA;IAAA,0BAAe;;;IAlBA,eAAgC;IAAhC,wDAAgC;IAQhC,eAA+B;IAA/B,uDAA+B;;ADE9C,MAAM,OAAO,4BAA4B;IAYvC,YAAoB,EAAyB;QAAzB,OAAE,GAAF,EAAE,CAAuB;QAX7C;;WAEG;QACM,YAAO,GAA+B,IAAI,CAAC;QASlD,IAAI,CAAC,mBAAmB,GAAG;YACzB,QAAQ,EAAE,aAAa;YACvB,OAAO,EAAE,IAAI;YACb,SAAS,EAAE,MAAM;YACjB,WAAW,EAAE,KAAK;YAClB,eAAe,EAAE,OAAO;YACxB,YAAY,EAAE,IAAI;YAClB,QAAQ,EAAE,GAAG;YACb,KAAK,EAAE,EAAE,CAAC,kBAAkB,EAAE,CAAC,0BAA0B,CAAC;SAC3D,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,IAAI,aAAa;QACf,IAAI,cAAc,GAA+B,IAAI,CAAC;QAEtD,qDAAqD;QACrD,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YACxC,6DAA6D;YAC7D,MAAM,qBAAqB,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW;gBACpD,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,YAAY,WAAW,CAAC;gBAC7C,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC;YAEvC,IAAI,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;YAEjD,IAAI,qBAAqB,EAAE;gBACzB,IAAI,CAAC,mBAAmB,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,IAAI,mBAAmB,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE;oBAClG,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC;iBAC1D;aACF;iBAAM;gBACL,mBAAmB,GAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC;aAC1F;YAED,cAAc,GAAG;gBACf,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,mBAAmB,CAAC,QAAQ;gBACpE,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO;gBAC7B,SAAS,EAAE,mBAAmB;gBAC9B,WAAW,EAAE,qBAAqB;gBAClC,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe,IAAI,IAAI,CAAC,mBAAmB,CAAC,eAAe;gBACzF,YAAY,EAAE,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY;gBAClH,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,mBAAmB,CAAC,QAAQ;gBACpE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,mBAAmB,CAAC,KAAK;aAC5D,CAAC;SACH;QAED,OAAO,cAAc,CAAC;IACxB,CAAC;;wGA7DU,4BAA4B;+EAA5B,4BAA4B;QCXzC,+FAmBe;QACf,kBAAA;;QApBe,wCAAmB;;uFDWrB,4BAA4B;cAJxC,SAAS;eAAC;gBACT,QAAQ,EAAE,gCAAgC;gBAC1C,WAAW,EAAE,yCAAyC;aACvD;wEAKU,OAAO;kBAAf,KAAK;YACG,MAAM;kBAAd,KAAK","sourcesContent":["import {Component, Input, TemplateRef} from '@angular/core';\nimport {isString, isArray, isNil} from 'lodash-es';\n\nimport {AdaptTranslateService} from '../../../common/i18n/index';\n\nimport {AdaptRxControlLabelTooltip} from './adapt-rx-control-label-tooltip.model';\n\n@Component({\n  selector: 'adapt-rx-control-label-tooltip',\n  templateUrl: './adapt-rx-label-tooltip.component.html'\n})\nexport class AdaptRxLabelTooltipComponent {\n  /**\n   * Tooltip settings\n   */\n  @Input() tooltip: AdaptRxControlLabelTooltip = null;\n  @Input() testID: string;\n  /**\n   * Default tooltip setting\n   * Will be used if the [tooltip] passed but missed some props\n   */\n  protected _defaultPopupConfig: AdaptRxControlLabelTooltip;\n\n  constructor(private ts: AdaptTranslateService) {\n    this._defaultPopupConfig = {\n      iconName: 'info_circle',\n      content: null,\n      placement: 'auto',\n      popoverMode: false,\n      popoverTriggers: 'click',\n      appendToBody: true, // keeping default value as true as earlier\n      maxWidth: 250, // Default value 250 is taken from popover.directive.ts\n      label: ts.getCurrentLanguage()['adapt.common.information']\n    };\n  }\n\n  /**\n   * Returns calculated tooltip config according to passed [tooltip]\n   */\n  get tooltipConfig(): AdaptRxControlLabelTooltip {\n    let _tooltipConfig: AdaptRxControlLabelTooltip = null;\n\n    // Enable tooltip/popover only if the content present\n    if (this.tooltip && this.tooltip.content) {\n      // Automatically enable popoverMode if content is TemplateRef\n      const calculatedPopoverMode = this.tooltip.popoverMode ||\n        (this.tooltip.content instanceof TemplateRef) ||\n        this._defaultPopupConfig.popoverMode;\n\n      let calculatedPlacement = this.tooltip.placement;\n\n      if (calculatedPopoverMode) {\n        if (!calculatedPlacement || (isArray(calculatedPlacement) && calculatedPlacement.includes('auto'))) {\n          calculatedPlacement = this._defaultPopupConfig.placement;\n        }\n      } else {\n        calculatedPlacement = isString(this.tooltip.placement) ? this.tooltip.placement : 'auto';\n      }\n\n      _tooltipConfig = {\n        iconName: this.tooltip.iconName || this._defaultPopupConfig.iconName,\n        content: this.tooltip.content,\n        placement: calculatedPlacement,\n        popoverMode: calculatedPopoverMode,\n        popoverTriggers: this.tooltip.popoverTriggers || this._defaultPopupConfig.popoverTriggers,\n        appendToBody: isNil(this.tooltip.appendToBody) ? this._defaultPopupConfig.appendToBody : this.tooltip.appendToBody,\n        maxWidth: this.tooltip.maxWidth || this._defaultPopupConfig.maxWidth,\n        label: this.tooltip.label || this._defaultPopupConfig.label\n      };\n    }\n\n    return _tooltipConfig;\n  }\n}\n","<ng-container *ngIf=\"tooltipConfig\">\n  <adapt-icon *ngIf=\"!tooltipConfig.popoverMode\"\n              [adaptRadarDisableEventSending]=\"true\"\n              [name]=\"tooltipConfig.iconName\"\n              [adaptTooltip]=\"tooltipConfig.content\"\n              [placement]=\"tooltipConfig.placement\"\n              [attr.data-testid]=\"testID + '_tooltip'\"\n              [description]=\"tooltipConfig.label\"></adapt-icon>\n\n  <adapt-icon *ngIf=\"tooltipConfig.popoverMode\"\n              [adaptRadarDisableEventSending]=\"true\"\n              [name]=\"tooltipConfig.iconName\"\n              [adaptPopover]=\"tooltipConfig.content\"\n              [placement]=\"tooltipConfig.placement\"\n              [triggers]=\"tooltipConfig.popoverTriggers\"\n              [appendToBody]=\"tooltipConfig.appendToBody\"\n              [maxWidth]=\"tooltipConfig.maxWidth\"\n              [attr.data-testid]=\"testID + '_tooltip'\"\n              [description]=\"tooltipConfig.label\"></adapt-icon>\n</ng-container>\n"]}