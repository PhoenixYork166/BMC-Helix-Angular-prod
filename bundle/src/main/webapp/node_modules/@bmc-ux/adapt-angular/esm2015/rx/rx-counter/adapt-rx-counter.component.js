import { ChangeDetectorRef, Component, ElementRef, Input, NgZone, Optional, Renderer2, Self, ViewChild } from '@angular/core';
import { NgControl } from '@angular/forms';
import { DOWN_ARROW, UP_ARROW } from '@angular/cdk/keycodes';
import { animate, keyframes, style, transition, trigger } from '@angular/animations';
import { BehaviorSubject, EMPTY, fromEvent, merge } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, switchMap, takeUntil } from 'rxjs/operators';
import { BigNumber } from 'bignumber.js';
import { isNil } from 'lodash-es';
import { ANIMATION_DURATION, ANIMATION_TIMING_FUNCTION } from '../../common/animation';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularCustomEventType, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { isSafeNumber } from '../../common/utilities';
import { getEventKeyCode } from '../../common/key-codes';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import { AdaptTranslateService } from '../../common/i18n/index';
import { CounterOperations } from '../../common/common.enums';
import { AdaptRxFeedbackComponent, AdaptRxFormControlDirective } from '../form-control/index';
import { AdaptRxCounterConfigService } from './adapt-rx-counter-config.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "./adapt-rx-counter-config.service";
import * as i3 from "../../common/device-detection.service";
import * as i4 from "../../common/i18n/index";
import * as i5 from "../../common/radar/adapt-radar";
import * as i6 from "../form-control/rx-control-label/adapt-rx-control-label.component";
import * as i7 from "@angular/common";
import * as i8 from "../../dragon-input-handler/dragon-input-handler.directive";
import * as i9 from "../form-control/rx-feedback/adapt-rx-feedback.component";
import * as i10 from "../../tooltip/tooltip.directive";
const _c0 = ["input"];
const _c1 = ["mobileActionsContainer"];
const _c2 = ["adaptRxFeedbackRef"];
const _c3 = ["spinnerUp"];
const _c4 = ["spinnerDown"];
const _c5 = ["mobileSpinnerUp"];
const _c6 = ["mobileSpinnerDown"];
function AdaptRxCounterComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 12, 13);
    i0.ɵɵlistener("mouseenter", function AdaptRxCounterComponent_div_9_Template_div_mouseenter_0_listener() { i0.ɵɵrestoreView(_r8); const _r5 = i0.ɵɵreference(1); const _r6 = i0.ɵɵreference(4); const ctx_r7 = i0.ɵɵnextContext(); return ctx_r7.toggleTooltip(_r5, _r6); })("mouseout", function AdaptRxCounterComponent_div_9_Template_div_mouseout_0_listener() { i0.ɵɵrestoreView(_r8); const _r5 = i0.ɵɵreference(1); const _r6 = i0.ɵɵreference(4); const ctx_r9 = i0.ɵɵnextContext(); return ctx_r9.toggleTooltip(_r5, _r6); });
    i0.ɵɵtext(2, "\n      ");
    i0.ɵɵelementStart(3, "span", 14, 15);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵpropertyInterpolate("adaptTooltip", ctx_r0.prefix);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r0.prefix);
} }
function AdaptRxCounterComponent_div_20_div_17_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r18 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 28, 29);
    i0.ɵɵlistener("click", function AdaptRxCounterComponent_div_20_div_17_button_5_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r18); const ctx_r17 = i0.ɵɵnextContext(3); return ctx_r17.increase(); })("@highlightMobileIncrease.start", function AdaptRxCounterComponent_div_20_div_17_button_5_Template_button_animation_highlightMobileIncrease_start_0_listener($event) { i0.ɵɵrestoreView(_r18); const ctx_r19 = i0.ɵɵnextContext(3); return ctx_r19.onAnimationIncreaseStart($event); })("@highlightMobileIncrease.done", function AdaptRxCounterComponent_div_20_div_17_button_5_Template_button_animation_highlightMobileIncrease_done_0_listener($event) { i0.ɵɵrestoreView(_r18); const ctx_r20 = i0.ɵɵnextContext(3); return ctx_r20.onAnimationIncreaseDone($event); });
    i0.ɵɵtext(2, "\n              ");
    i0.ɵɵelementStart(3, "span", 19);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext(3);
    i0.ɵɵstyleProp("pointer-events", ctx_r14.increaseAnimationDone ? "all" : "none");
    i0.ɵɵproperty("@highlightMobileIncrease", undefined);
    i0.ɵɵattribute("data-testid", ctx_r14.testID + "_plus");
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r14.counterTextsDefault.increase);
} }
function AdaptRxCounterComponent_div_20_div_17_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r23 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 30, 31);
    i0.ɵɵlistener("click", function AdaptRxCounterComponent_div_20_div_17_button_7_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r23); const ctx_r22 = i0.ɵɵnextContext(3); return ctx_r22.decrease(); })("@highlightMobileDecrease.start", function AdaptRxCounterComponent_div_20_div_17_button_7_Template_button_animation_highlightMobileDecrease_start_0_listener($event) { i0.ɵɵrestoreView(_r23); const ctx_r24 = i0.ɵɵnextContext(3); return ctx_r24.onAnimationDecreaseStart($event); })("@highlightMobileDecrease.done", function AdaptRxCounterComponent_div_20_div_17_button_7_Template_button_animation_highlightMobileDecrease_done_0_listener($event) { i0.ɵɵrestoreView(_r23); const ctx_r25 = i0.ɵɵnextContext(3); return ctx_r25.onAnimationDecreaseDone($event); });
    i0.ɵɵtext(2, "\n              ");
    i0.ɵɵelementStart(3, "span", 19);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = i0.ɵɵnextContext(3);
    i0.ɵɵstyleProp("pointer-events", ctx_r15.decreaseAnimationDone ? "all" : "none");
    i0.ɵɵproperty("@highlightMobileDecrease", undefined);
    i0.ɵɵattribute("data-testid", ctx_r15.testID + "_minus");
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r15.counterTextsDefault.decrease);
} }
function AdaptRxCounterComponent_div_20_div_17_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 23, 24);
    i0.ɵɵtext(2, "\n          ");
    i0.ɵɵelementStart(3, "div", 25);
    i0.ɵɵtext(4, "\n            ");
    i0.ɵɵtemplate(5, AdaptRxCounterComponent_div_20_div_17_button_5_Template, 6, 5, "button", 26);
    i0.ɵɵtext(6, "\n            ");
    i0.ɵɵtemplate(7, AdaptRxCounterComponent_div_20_div_17_button_7_Template, 6, 5, "button", 27);
    i0.ɵɵtext(8, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", ctx_r12.isSpinnerMobile);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r12.isSpinnerMobile);
} }
function AdaptRxCounterComponent_div_20_Template(rf, ctx) { if (rf & 1) {
    const _r27 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 16);
    i0.ɵɵlistener("click", function AdaptRxCounterComponent_div_20_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r27); const ctx_r26 = i0.ɵɵnextContext(); return ctx_r26.checkFormMobileSpinners(); });
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "button", 17, 18);
    i0.ɵɵlistener("click", function AdaptRxCounterComponent_div_20_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r27); const ctx_r28 = i0.ɵɵnextContext(); return ctx_r28.increaseCounter(); });
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵelementStart(5, "span", 19);
    i0.ɵɵtext(6);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n        ");
    i0.ɵɵelementStart(9, "button", 20, 21);
    i0.ɵɵlistener("click", function AdaptRxCounterComponent_div_20_Template_button_click_9_listener() { i0.ɵɵrestoreView(_r27); const ctx_r29 = i0.ɵɵnextContext(); return ctx_r29.decreaseCounter(); });
    i0.ɵɵtext(11, "\n          ");
    i0.ɵɵelementStart(12, "span", 19);
    i0.ɵɵtext(13);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n\n        ");
    i0.ɵɵtext(16, "\n        ");
    i0.ɵɵtemplate(17, AdaptRxCounterComponent_div_20_div_17_Template, 10, 2, "div", 22);
    i0.ɵɵtext(18, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("adapt-rx-counter-spinners--mobile-visible", ctx_r2.isMobile)("focused", ctx_r2.isMobile && ctx_r2.isSpinnerMobile);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("@highlightArrow", ctx_r2.animateArrowUp)("disabled", ctx_r2.disabled);
    i0.ɵɵattribute("data-testid", ctx_r2.testID + "_plus");
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r2.counterTextsDefault.increase);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("@highlightArrow", ctx_r2.animateArrowDown)("disabled", ctx_r2.disabled);
    i0.ɵɵattribute("data-testid", ctx_r2.testID + "_minus");
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r2.counterTextsDefault.decrease);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r2.isMobile);
} }
function AdaptRxCounterComponent_div_24_Template(rf, ctx) { if (rf & 1) {
    const _r33 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 32, 33);
    i0.ɵɵlistener("mouseenter", function AdaptRxCounterComponent_div_24_Template_div_mouseenter_0_listener() { i0.ɵɵrestoreView(_r33); const _r30 = i0.ɵɵreference(1); const _r31 = i0.ɵɵreference(4); const ctx_r32 = i0.ɵɵnextContext(); return ctx_r32.toggleTooltip(_r30, _r31); })("mouseout", function AdaptRxCounterComponent_div_24_Template_div_mouseout_0_listener() { i0.ɵɵrestoreView(_r33); const _r30 = i0.ɵɵreference(1); const _r31 = i0.ɵɵreference(4); const ctx_r34 = i0.ɵɵnextContext(); return ctx_r34.toggleTooltip(_r30, _r31); });
    i0.ɵɵtext(2, "\n      ");
    i0.ɵɵelementStart(3, "span", 14, 34);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵpropertyInterpolate("adaptTooltip", ctx_r3.suffix);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r3.suffix);
} }
export class AdaptRxCounterComponent extends AdaptRxFormControlDirective {
    constructor(ngControl, counterConfig, _changeDetectorRef, _deviceDetection, _renderer, _elRef, _ngZone, ts, _adaptRadarService, _elem) {
        super(ngControl, ts, _adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptRxCounter, _changeDetectorRef);
        this.ngControl = ngControl;
        this._deviceDetection = _deviceDetection;
        this._renderer = _renderer;
        this._elRef = _elRef;
        this._ngZone = _ngZone;
        this.ts = ts;
        this.controlName = 'counter';
        this.analyticsComponentName = AdaptRadarAngularCustomEventName;
        this.counterTextsDefault = {
            decrease: '',
            increase: ''
        };
        this.animateArrowUp = false;
        this.animateArrowDown = false;
        this.increaseAnimationDone = false;
        this.decreaseAnimationDone = false;
        /**
         * Use disable styles for readonly state.
         * @docs-default false
         */
        this.disabledStyleForReadonlyState = false;
        this.spinnerUp$ = new BehaviorSubject(null);
        this.spinnerDown$ = new BehaviorSubject(null);
        this.mobileSpinnerUp$ = new BehaviorSubject(null);
        this.mobileSpinnerDown$ = new BehaviorSubject(null);
        this.step = counterConfig.step;
        this.size = counterConfig.size;
    }
    /**
     * Check if the control has UI error state
     */
    get hasDangerState() {
        return this.adaptRxFeedbackRef.hasUIErrorState;
    }
    get value() {
        return this._value || this._value === 0 ? this._value.toString() : '';
    }
    get precision() {
        if (this.step % 1 === 0) {
            return null;
        }
        return this.step.toString().split(/[.]/)[1].length;
    }
    get inputSize() {
        return (this._value && this._value.toString().length) || 1;
    }
    get spinnerUp() {
        return this.spinnerUp$.value;
    }
    set spinnerUp(elementRef) {
        this.spinnerUp$.next(elementRef);
    }
    get spinnerDown() {
        return this.spinnerDown$.value;
    }
    set spinnerDown(elementRef) {
        this.spinnerDown$.next(elementRef);
    }
    get mobileSpinnerUp() {
        return this.mobileSpinnerUp$.value;
    }
    set mobileSpinnerUp(elementRef) {
        this.mobileSpinnerUp$.next(elementRef);
    }
    get mobileSpinnerDown() {
        return this.mobileSpinnerDown$.value;
    }
    set mobileSpinnerDown(elementRef) {
        this.mobileSpinnerDown$.next(elementRef);
    }
    static toFixed(value, precision = 0) {
        const power = Math.pow(10, precision);
        return Math.round(value * power) / power;
    }
    static parseValue(value) {
        const alignedValue = value.toString().trim();
        /**
         * Condition to identify dot at the end of string or more than two dots.
         * Need to be applied because parseFloat will remove dot in the end for value like this: '5.'
         */
        if (alignedValue.indexOf('.') === alignedValue.length - 1 || !alignedValue.match(/^[^.]*\.?[^.-]*$/) || isNaN(+alignedValue)) {
            return NaN;
        }
        return isSafeNumber(alignedValue) ? parseFloat(alignedValue) : new BigNumber(alignedValue);
    }
    ngOnInit() {
        super.ngOnInit();
        this.isMobile = this._deviceDetection.isMobile();
        this.setDefaultTexts(this.ts.getCurrentLanguage());
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        fromEvent(this.inputEl.nativeElement, 'input')
            .pipe(takeUntil(this.destroy$))
            .subscribe((event) => {
            this._setValue(event.target.value);
        });
        fromEvent(this.inputEl.nativeElement, 'keypress')
            .pipe(takeUntil(this.destroy$))
            .subscribe((event) => {
            if (this.nonInteractive) {
                return;
            }
            // allowing entering symbols that are generalized for the
            // Scientific, Float, or Integer numbers
            // This is how native <input> element of type number works.
            // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number.
            // The only difference - we are not limit the number of the allowed symbols to be entered.
            const regExp = /^[-+.\de]?$/i;
            if (!regExp.test(event.key)) {
                event.preventDefault();
            }
        });
        fromEvent(this.inputEl.nativeElement, 'keydown')
            .pipe(takeUntil(this.destroy$))
            .subscribe((event) => {
            if (this.nonInteractive) {
                return;
            }
            const keyCode = getEventKeyCode(event);
            if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {
                event.preventDefault();
                keyCode === UP_ARROW ? this.increaseCounter(true) : this.decreaseCounter(true);
            }
        });
        const focusIn$ = merge(fromEvent(this.inputEl.nativeElement, 'focus').pipe(), this.spinnerUp$.pipe(switchMap(spinnerUp => spinnerUp ? fromEvent(spinnerUp.nativeElement, 'focus') : EMPTY)), this.spinnerDown$.pipe(switchMap(spinnerDown => spinnerDown ? fromEvent(spinnerDown.nativeElement, 'focus') : EMPTY)), this.mobileSpinnerUp$.pipe(switchMap(spinnerUp => spinnerUp ? fromEvent(spinnerUp.nativeElement, 'focus') : EMPTY)), this.mobileSpinnerDown$.pipe(switchMap(spinnerDown => spinnerDown ? fromEvent(spinnerDown.nativeElement, 'focus') : EMPTY)));
        const focusOut$ = merge(fromEvent(this.inputEl.nativeElement, 'blur').pipe(), this.spinnerUp$.pipe(switchMap(spinnerUp => spinnerUp ? fromEvent(spinnerUp.nativeElement, 'blur') : EMPTY)), this.spinnerDown$.pipe(switchMap(spinnerDown => spinnerDown ? fromEvent(spinnerDown.nativeElement, 'blur') : EMPTY)), this.mobileSpinnerUp$.pipe(switchMap(spinnerUp => spinnerUp ? fromEvent(spinnerUp.nativeElement, 'blur') : EMPTY)), this.mobileSpinnerDown$.pipe(switchMap(spinnerDown => spinnerDown ? fromEvent(spinnerDown.nativeElement, 'blur') : EMPTY))).pipe(filter(() => {
            return document.activeElement !== this.inputEl.nativeElement &&
                (!this.spinnerUp || document.activeElement !== this.spinnerUp.nativeElement) &&
                (!this.spinnerDown || document.activeElement !== this.spinnerDown.nativeElement) &&
                (!this.mobileSpinnerUp || document.activeElement !== this.mobileSpinnerUp.nativeElement) &&
                (!this.mobileSpinnerDown || document.activeElement !== this.mobileSpinnerDown.nativeElement);
        }));
        const focusChanged = merge(focusIn$, focusOut$).pipe(debounceTime(0), // btw leaving the old element and entering the new element the active element is indeed the document/body itself
        distinctUntilChanged((previousEvent, currentEvent) => {
            return previousEvent.type === currentEvent.type;
        }));
        this._ngZone.runOutsideAngular(() => {
            focusChanged.pipe(takeUntil(this.destroy$)).subscribe((e) => {
                // we only return to the ngZone (triggering change detection) at this point because we know the focus has changed
                this._ngZone.run(() => {
                    if (e.type === 'focus') {
                        this.focused = true;
                        this._sendEvent(AdaptRadarAngularCustomEventType.Focus);
                        super.focusHandler(e);
                    }
                    else {
                        this.focused = false;
                        this._sendEvent(AdaptRadarAngularCustomEventType.Blur);
                        super.blurHandler(e);
                        this._onTouched();
                    }
                    this._changeDetectorRef.detectChanges();
                });
            });
        });
    }
    setDefaultTexts(translation) {
        this.counterTextsDefault.decrease = translation['adapt.counter.decrease'];
        this.counterTextsDefault.increase = translation['adapt.counter.increase'];
    }
    writeValue(value) {
        this._value = isNil(value) ? null : value;
        this.inputEl.nativeElement.value = this.value;
    }
    toggleTooltip(tooltip, el) {
        tooltip.delay = 0;
        if (!tooltip.isOpen() && el.offsetWidth >= el.scrollWidth) {
            return;
        }
        tooltip.isOpen() ? tooltip.close() : tooltip.open();
    }
    onAnimationIncreaseStart(event) {
        if (event.phaseName === 'start') {
            this.increaseAnimationDone = false;
        }
    }
    onAnimationIncreaseDone(event) {
        if (event.phaseName === 'done') {
            this.increaseAnimationDone = true;
        }
    }
    onAnimationDecreaseStart(event) {
        if (event.phaseName === 'start') {
            this.decreaseAnimationDone = false;
        }
    }
    onAnimationDecreaseDone(event) {
        if (event.phaseName === 'done') {
            this.decreaseAnimationDone = true;
        }
    }
    checkFormMobileSpinners() {
        if (this.isMobile && !this.disabled) {
            this._openMobileSpinners();
        }
    }
    increaseCounter(animationNeeded) {
        if (this.isMobile) {
            return;
        }
        this.increase();
        if (animationNeeded) {
            const animationTimeout = setTimeout(() => {
                this.animateArrowUp = false;
                clearTimeout(animationTimeout);
            }, parseFloat(ANIMATION_DURATION.fast) * 1000);
            this.animateArrowUp = true;
        }
    }
    decreaseCounter(animationNeeded) {
        if (this.isMobile) {
            return;
        }
        this.decrease();
        if (animationNeeded) {
            const animationTimeout = setTimeout(() => {
                this.animateArrowDown = false;
                clearTimeout(animationTimeout);
            }, parseFloat(ANIMATION_DURATION.fast) * 1000);
            this.animateArrowDown = true;
        }
    }
    increase() {
        this._sendEvent(AdaptRadarAngularCustomEventType.Click, 'increase');
        this._value = this._applyBoundaries(this._calculateNewValue(CounterOperations.INCREASE));
        this.inputEl.nativeElement.value = this.value;
        this._onChange(this._value);
    }
    decrease() {
        this._sendEvent(AdaptRadarAngularCustomEventType.Click, 'decrease');
        this._value = this._applyBoundaries(this._calculateNewValue(CounterOperations.DECREASE));
        this.inputEl.nativeElement.value = this.value;
        this._onChange(this._value);
    }
    inputClickHandler(event) {
        if (this.readonly) {
            event.preventDefault();
        }
    }
    _focusNativeElement() {
        this.inputEl.nativeElement.focus();
    }
    _openMobileSpinners() {
        if (!this.isSpinnerMobile) {
            this.isSpinnerMobile = true;
            // Set timeout to skip 'open' click
            setTimeout(() => {
                this._removeDocumentClickListener = this._renderer.listen('document', 'click', (event) => {
                    if (!this.mobileActionsContainer.nativeElement.contains(event.target)) {
                        this._closeMobileSpinners();
                    }
                });
            }, 0);
        }
    }
    _closeMobileSpinners() {
        if (this.isSpinnerMobile) {
            this.isSpinnerMobile = false;
            this._removeDocumentClickListener();
        }
    }
    _setValue(value) {
        this._value = isNil(value) || value.toString().trim().length === 0
            ? null
            : AdaptRxCounterComponent.parseValue(value);
        this._onChange(this._value);
        this._changeDetectorRef.detectChanges();
    }
    _getCurrentValuePrecision() {
        if (BigNumber.isBigNumber(this._value)) {
            return !this.precision && this._value.isInteger()
                ? this._value.dp()
                : this.precision;
        }
        return !this.precision && this._value % 1 !== 0
            ? this._value.toString().split(/[.]/)[1].length
            : this.precision;
    }
    _calculateNewValue(operation) {
        // if counter value is null, undefined or NaN:
        //  - in case of INCREASE operation we should return min value passed to the component;
        //  - in case of DECREASE operation we should return max value passed to the component.
        // This is how native <input> element of type number works.
        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number
        if (isNil(this._value) || (BigNumber.isBigNumber(this._value) ? this._value.isNaN() : isNaN(this._value))) {
            if (this.min && operation === CounterOperations.INCREASE) {
                return this.min;
            }
            else if (this.max && operation === CounterOperations.DECREASE) {
                return this.max;
            }
            else {
                return 0;
            }
        }
        const valuePrecision = this._getCurrentValuePrecision();
        switch (operation) {
            case CounterOperations.INCREASE:
                return BigNumber.isBigNumber(this._value)
                    ? new BigNumber(this._value.plus(this.step).decimalPlaces(valuePrecision))
                    : AdaptRxCounterComponent.toFixed(this._value + this.step, valuePrecision);
            case CounterOperations.DECREASE:
                return BigNumber.isBigNumber(this._value)
                    ? new BigNumber(this._value.minus(this.step).decimalPlaces(valuePrecision))
                    : AdaptRxCounterComponent.toFixed(this._value - this.step, valuePrecision);
        }
    }
    _applyBoundaries(value) {
        if (BigNumber.isBigNumber(value) ? value.lt(this.min) : value < this.min) {
            return this.min;
        }
        if (BigNumber.isBigNumber(value) ? value.gt(this.max) : value > this.max) {
            return this.max;
        }
        return value;
    }
    _sendEvent(eventType, target) {
        var _a;
        const eventData = {
            GroupName: this.adaptRadarGroupName,
            EventType: eventType,
            Label: this.label,
            Subtext: !!this.subLabel,
            Target: target !== null && target !== void 0 ? target : null,
            // TODO: Need to be changed to track data from used directives or by checking validators applied to control
            NumberType: null,
            Required: this.required,
            TextEntered: !!this.value,
            CharCount: (_a = this.value) === null || _a === void 0 ? void 0 : _a.length,
            Hinted: !!this.tooltip,
            Disabled: this.disabled,
            ReadOnly: this.readonly,
            FieldSize: this.size,
            // DynamicEntry: false
        };
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxCounter, eventData);
    }
}
AdaptRxCounterComponent.ɵfac = function AdaptRxCounterComponent_Factory(t) { return new (t || AdaptRxCounterComponent)(i0.ɵɵdirectiveInject(i1.NgControl, 10), i0.ɵɵdirectiveInject(i2.AdaptRxCounterConfigService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i4.AdaptTranslateService), i0.ɵɵdirectiveInject(i5.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptRxCounterComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptRxCounterComponent, selectors: [["adapt-rx-counter"]], viewQuery: function AdaptRxCounterComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 5);
        i0.ɵɵviewQuery(_c2, 7);
        i0.ɵɵviewQuery(_c3, 5);
        i0.ɵɵviewQuery(_c4, 5);
        i0.ɵɵviewQuery(_c5, 5);
        i0.ɵɵviewQuery(_c6, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mobileActionsContainer = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.adaptRxFeedbackRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.spinnerUp = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.spinnerDown = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mobileSpinnerUp = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mobileSpinnerDown = _t.first);
    } }, inputs: { prefix: "prefix", suffix: "suffix", max: "max", min: "min", step: "step", size: "size", placeholder: "placeholder", disabledStyleForReadonlyState: "disabledStyleForReadonlyState" }, features: [i0.ɵɵInheritDefinitionFeature], decls: 33, vars: 48, consts: [[1, "adapt-rx-counter"], [3, "for", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"], [1, "adapt-rx-counter__content"], ["class", "adapt-rx-counter-adding adapt-rx-counter-prefix", "manual", "", "placement", "auto", 3, "adaptRadarDisableEventSending", "adaptTooltip", "mouseenter", "mouseout", 4, "ngIf"], [1, "adapt-rx-counter-container"], [1, "adapt-rx-counter-input-wrapper"], ["autocomplete", "off", "type", "text", "role", "spinbutton", 1, "adapt-rx-counter-input", "form-control", "rx-form-control", "ltr", 3, "id", "autofocus", "readOnly", "disabled", "click"], ["input", ""], ["class", "adapt-rx-counter-spinners", 3, "adapt-rx-counter-spinners--mobile-visible", "focused", "click", 4, "ngIf"], ["class", "adapt-rx-counter-adding adapt-rx-counter-suffix", "manual", "", "placement", "auto", 3, "adaptRadarDisableEventSending", "adaptTooltip", "mouseenter", "mouseout", 4, "ngIf"], [3, "ariaErrorMessage", "errors", "warningMessage", "controlTouched", "messageAppeared"], ["adaptRxFeedbackRef", ""], ["manual", "", "placement", "auto", 1, "adapt-rx-counter-adding", "adapt-rx-counter-prefix", 3, "adaptRadarDisableEventSending", "adaptTooltip", "mouseenter", "mouseout"], ["prefixTooltip", "tooltip"], [1, "adapt-rx-counter-adding-text"], ["prefixEl", ""], [1, "adapt-rx-counter-spinners", 3, "click"], ["type", "button", "role", "button", 1, "adapt-rx-counter-spinner", "adapt-rx-counter-spinner__increase", 3, "disabled", "click"], ["spinnerUp", ""], [1, "sr-only"], ["type", "button", "role", "button", 1, "adapt-rx-counter-spinner", "adapt-rx-counter-spinner__decrease", 3, "disabled", "click"], ["spinnerDown", ""], ["class", "adapt-rx-counter-spinners--mobile", 4, "ngIf"], [1, "adapt-rx-counter-spinners--mobile"], ["mobileActionsContainer", ""], [1, "btn-float-block"], ["type", "button", "role", "button", "class", "btn btn-primary btn-circle d-icon-triangle_up adapt-rx-counter-spinner__increase", 3, "pointerEvents", "click", 4, "ngIf"], ["type", "button", "role", "button", "class", "btn btn-primary btn-circle d-icon-triangle_down adapt-rx-counter-spinner__decrease", 3, "pointerEvents", "click", 4, "ngIf"], ["type", "button", "role", "button", 1, "btn", "btn-primary", "btn-circle", "d-icon-triangle_up", "adapt-rx-counter-spinner__increase", 3, "click"], ["mobileSpinnerUp", ""], ["type", "button", "role", "button", 1, "btn", "btn-primary", "btn-circle", "d-icon-triangle_down", "adapt-rx-counter-spinner__decrease", 3, "click"], ["mobileSpinnerDown", ""], ["manual", "", "placement", "auto", 1, "adapt-rx-counter-adding", "adapt-rx-counter-suffix", 3, "adaptRadarDisableEventSending", "adaptTooltip", "mouseenter", "mouseout"], ["suffixTooltip", "tooltip"], ["suffixEl", ""]], template: function AdaptRxCounterComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵtext(1, "\n  ");
        i0.ɵɵtext(2, "\n  ");
        i0.ɵɵelement(3, "adapt-rx-control-label", 1);
        i0.ɵɵtext(4, "\n  ");
        i0.ɵɵtext(5, "\n\n  ");
        i0.ɵɵelementStart(6, "div", 2);
        i0.ɵɵtext(7, "\n\n    ");
        i0.ɵɵtext(8, "\n    ");
        i0.ɵɵtemplate(9, AdaptRxCounterComponent_div_9_Template, 7, 3, "div", 3);
        i0.ɵɵtext(10, "\n    ");
        i0.ɵɵtext(11, "\n\n    ");
        i0.ɵɵelementStart(12, "div", 4);
        i0.ɵɵtext(13, "\n      ");
        i0.ɵɵelementStart(14, "div", 5);
        i0.ɵɵtext(15, "\n\n        ");
        i0.ɵɵelementStart(16, "input", 6, 7);
        i0.ɵɵlistener("click", function AdaptRxCounterComponent_Template_input_click_16_listener($event) { return ctx.inputClickHandler($event); });
        i0.ɵɵelementEnd();
        i0.ɵɵtext(18, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(19, "\n\n      ");
        i0.ɵɵtemplate(20, AdaptRxCounterComponent_div_20_Template, 19, 13, "div", 8);
        i0.ɵɵtext(21, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(22, "\n\n    ");
        i0.ɵɵtext(23, "\n    ");
        i0.ɵɵtemplate(24, AdaptRxCounterComponent_div_24_Template, 7, 3, "div", 9);
        i0.ɵɵtext(25, "\n    ");
        i0.ɵɵtext(26, "\n\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(27, "\n\n  ");
        i0.ɵɵtext(28, "\n  ");
        i0.ɵɵelementStart(29, "adapt-rx-feedback", 10, 11);
        i0.ɵɵlistener("messageAppeared", function AdaptRxCounterComponent_Template_adapt_rx_feedback_messageAppeared_29_listener($event) { return ctx.handleMessageAppeared($event, ctx.analyticsComponentName.AdaptRxCounter); });
        i0.ɵɵelementEnd();
        i0.ɵɵtext(31, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(32, "\n");
    } if (rf & 2) {
        const _r1 = i0.ɵɵreference(17);
        i0.ɵɵclassProp("has-danger", ctx.hasDangerState)("has-warning", ctx.warningMessage)("disabled", ctx.disabled)("readonly", ctx.readonly);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("for", ctx.id)("label", ctx.label)("subLabel", ctx.subLabel)("requiredLabel", ctx.requiredLabel)("showRequiredLabel", ctx.required)("tooltip", ctx.tooltip)("testID", ctx.testID);
        i0.ɵɵadvance(6);
        i0.ɵɵproperty("ngIf", ctx.prefix);
        i0.ɵɵadvance(7);
        i0.ɵɵclassProp("form-control-disabled-look", ctx.readonly && ctx.disabledStyleForReadonlyState)("form-control-sm", ctx.size === "sm")("form-control-lg", ctx.size === "lg")("form-control-danger", ctx.hasDangerState);
        i0.ɵɵproperty("id", ctx.id)("autofocus", ctx.autofocus)("readOnly", ctx.readonly)("disabled", ctx.disabled);
        i0.ɵɵattribute("aria-valuenow", _r1.value)("aria-valuemin", ctx.min)("aria-valuemax", ctx.max)("data-testid", ctx.testID)("name", ctx.name)("placeholder", ctx.placeholder)("tabindex", ctx.tabIndex)("aria-label", ctx.ariaLabel)("aria-labelledby", ctx.ariaLabelledby)("aria-describedby", ctx.ariaDescribedBy)("aria-readonly", ctx.readonly)("aria-invalid", ctx.hasDangerState)("aria-errormessage", ctx.ariaErrorMessage)("size", ctx.inputSize);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", !ctx.readonly);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", ctx.suffix);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ariaErrorMessage", ctx.ariaErrorMessage)("errors", ctx.ngControl.errors)("warningMessage", ctx.warningMessage)("controlTouched", ctx.ngControl.touched);
    } }, directives: [i6.AdaptRxControlLabelComponent, i7.NgIf, i8.AdaptDragonInputHandlerDirective, i9.AdaptRxFeedbackComponent, i10.AdaptTooltipDirective], encapsulation: 2, data: { animation: [
            trigger('highlightMobileIncrease', [
                transition(':enter', [
                    style({ bottom: 0, opacity: 0 }),
                    animate(ANIMATION_DURATION.fast + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ bottom: 'calc(100% + 10px)', opacity: 1 }))
                ]),
                transition(':leave', [
                    style({ bottom: 'calc(100% + 10px)', opacity: 1 }),
                    animate('.12s', style({ bottom: 0, opacity: 0 }))
                ])
            ]),
            trigger('highlightMobileDecrease', [
                transition(':enter', [
                    style({ top: 0, opacity: 0 }),
                    animate(ANIMATION_DURATION.fast + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ top: 'calc(100% + 10px)', opacity: 1 }))
                ]),
                transition(':leave', [
                    style({ top: 'calc(100% + 10px)', opacity: 1 }),
                    animate('.12s', style({ top: 0, opacity: 0 }))
                ])
            ]),
            trigger('errorToggleAnimation', [
                transition(':enter', [
                    style({
                        opacity: 0
                    }),
                    animate(250)
                ]),
                transition(':leave', [
                    style({
                        opacity: 1
                    })
                ])
            ]),
            trigger('highlightArrow', [
                transition('0 => 1', animate(ANIMATION_DURATION.medium, keyframes([
                    style({ color: '*', offset: 0 }),
                    style({ color: '#00867E', offset: 1 })
                ])))
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxCounterComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-rx-counter',
                templateUrl: './adapt-rx-counter.component.html',
                animations: [
                    trigger('highlightMobileIncrease', [
                        transition(':enter', [
                            style({ bottom: 0, opacity: 0 }),
                            animate(ANIMATION_DURATION.fast + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ bottom: 'calc(100% + 10px)', opacity: 1 }))
                        ]),
                        transition(':leave', [
                            style({ bottom: 'calc(100% + 10px)', opacity: 1 }),
                            animate('.12s', style({ bottom: 0, opacity: 0 }))
                        ])
                    ]),
                    trigger('highlightMobileDecrease', [
                        transition(':enter', [
                            style({ top: 0, opacity: 0 }),
                            animate(ANIMATION_DURATION.fast + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ top: 'calc(100% + 10px)', opacity: 1 }))
                        ]),
                        transition(':leave', [
                            style({ top: 'calc(100% + 10px)', opacity: 1 }),
                            animate('.12s', style({ top: 0, opacity: 0 }))
                        ])
                    ]),
                    trigger('errorToggleAnimation', [
                        transition(':enter', [
                            style({
                                opacity: 0
                            }),
                            animate(250)
                        ]),
                        transition(':leave', [
                            style({
                                opacity: 1
                            })
                        ])
                    ]),
                    trigger('highlightArrow', [
                        transition('0 => 1', animate(ANIMATION_DURATION.medium, keyframes([
                            style({ color: '*', offset: 0 }),
                            style({ color: '#00867E', offset: 1 })
                        ])))
                    ])
                ]
            }]
    }], function () { return [{ type: i1.NgControl, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }, { type: i2.AdaptRxCounterConfigService }, { type: i0.ChangeDetectorRef }, { type: i3.AdaptDeviceDetectionService }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i4.AdaptTranslateService }, { type: i5.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { prefix: [{
            type: Input
        }], suffix: [{
            type: Input
        }], max: [{
            type: Input
        }], min: [{
            type: Input
        }], step: [{
            type: Input
        }], size: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], disabledStyleForReadonlyState: [{
            type: Input
        }], inputEl: [{
            type: ViewChild,
            args: ['input', { static: true }]
        }], mobileActionsContainer: [{
            type: ViewChild,
            args: ['mobileActionsContainer', { static: false }]
        }], adaptRxFeedbackRef: [{
            type: ViewChild,
            args: ['adaptRxFeedbackRef', { static: true }]
        }], spinnerUp: [{
            type: ViewChild,
            args: ['spinnerUp', { static: false }]
        }], spinnerDown: [{
            type: ViewChild,
            args: ['spinnerDown', { static: false }]
        }], mobileSpinnerUp: [{
            type: ViewChild,
            args: ['mobileSpinnerUp', { static: false }]
        }], mobileSpinnerDown: [{
            type: ViewChild,
            args: ['mobileSpinnerDown', { static: false }]
        }] }); })();
//# sourceMappingURL=adapt-rx-counter.component.js.map