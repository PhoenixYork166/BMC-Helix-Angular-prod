{"version":3,"file":"focus.js","sourceRoot":"","sources":["../../../../../libs/adapt-angular/src/common/focus.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,kBAAkB,GAAG;IAChC,8BAA8B;IAC9B,6BAA6B;IAC7B,4BAA4B;IAC5B,+BAA+B;IAC/B,6BAA6B;IAC7B,iCAAiC;IACjC,6CAA6C;CAC9C,CAAC;AAEF;;;;;;;;;;;;GAYG;AACH,MAAM,UAAU,oBAAoB,CAAC,OAAmB,EAAE,eAAwB,IAAI;IACpF,MAAM,iBAAiB,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAkB,CAAC;IAE9G,OAAO,YAAY,CAAC,CAAC,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;QACpD,iEAAiE;QACjE,2EAA2E;QAC3E,OAAO,CAAE,IAAuC,CAAC,QAAQ,CAAC;IAC5D,CAAC,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC;AACzB,CAAC","sourcesContent":["export const FOCUSABLE_ELEMENTS = [\n  'a[href]:not([tabindex=\"-1\"])',\n  'button:not([tabindex=\"-1\"])',\n  'input:not([tabindex=\"-1\"])',\n  'textarea:not([tabindex=\"-1\"])',\n  'select:not([tabindex=\"-1\"])',\n  '[tabindex]:not([tabindex=\"-1\"])',\n  '[contentEditable=true]:not([tabindex=\"-1\"])'\n];\n\n/**\n * The function returns all the focusable elements in the passed container\n * By default it is skip disabled elements\n *\n * Keep in mind that the disabled attribute can be used on the following elements:\n * - <button>\n * - <fieldset>\n * - <input>\n * - <optgroup>\n * - <option>\n * - <select>\n * - <textarea>\n */\nexport function getFocusableElements(element: ParentNode, skipDisabled: boolean = true): HTMLElement[] {\n  const focusableElements = Array.from(element.querySelectorAll(FOCUSABLE_ELEMENTS.join(','))) as HTMLElement[];\n\n  return skipDisabled ? focusableElements.filter(elem => {\n    // <a> and <div> can't use [disabled] according to HTML standard.\n    // So check if element has disabled property directly, not via hasAttribute\n    return !(elem as unknown as {disabled: boolean}).disabled;\n  }) : focusableElements;\n}\n"]}