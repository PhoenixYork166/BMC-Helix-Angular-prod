import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { LOCALES } from './locales';
import * as i0 from "@angular/core";
export const DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');
export class AdaptTranslateService {
    // TODO check if unused var can be removed
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    constructor(defaultLanguage) {
        this.fallbackLanguage = 'en-us';
        this.languages = [];
        // load English language as fallback language directly from export
        this.fallbackLanguageDictionary = LOCALES[this.fallbackLanguage].dict;
        this.setLanguage(this.fallbackLanguage, this.fallbackLanguageDictionary);
        // set this as
        this.useLanguage(this.fallbackLanguage);
        // TODO: add default language
        // need to identify what is the sufficient condition here:
        // what if we have only locale and dont have json or it has been corrupted
        this.loadLanguages();
    }
    loadLanguages() {
        for (const key in LOCALES) {
            if (Object.prototype.hasOwnProperty.call(LOCALES, key)) {
                let obj = {};
                obj = Object.assign(Object.assign({}, this.fallbackLanguageDictionary), LOCALES[key].dict);
                this.setLanguage(key, obj);
            }
        }
    }
    // add locale to configuration
    // if it's already present updates the object
    setLanguage(locale, json) {
        locale = locale.toLowerCase();
        // if we already have this locale loaded let's update the object
        if (this.languages[locale]) {
            this.languages[locale] = Object.assign(Object.assign({}, this.languages[locale]), json);
        }
        else {
            this.languages[locale] = json;
        }
    }
    // return current locale
    getCurrentLocale() {
        return this.selectedLocale;
    }
    // return current locale
    getCurrentLanguage() {
        return this.languages[this.selectedLocale];
    }
    // select current locale
    // if json object is passed also updates languages
    useLanguage(locale, json) {
        locale = locale.toLowerCase();
        if (json) {
            this.setLanguage(locale, json);
        }
        if (this.languages[locale]) {
            this.selectedLocale = locale;
        }
    }
}
AdaptTranslateService.ɵfac = function AdaptTranslateService_Factory(t) { return new (t || AdaptTranslateService)(i0.ɵɵinject(DEFAULT_LANGUAGE, 8)); };
AdaptTranslateService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptTranslateService, factory: AdaptTranslateService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptTranslateService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DEFAULT_LANGUAGE]
            }] }]; }, null); })();
//# sourceMappingURL=translate-service.js.map