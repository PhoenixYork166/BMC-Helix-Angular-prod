import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, NgZone, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { TAB } from '@angular/cdk/keycodes';
import { asyncScheduler, Subject } from 'rxjs';
import { take, takeUntil, throttleTime } from 'rxjs/operators';
import { groupBy } from 'lodash-es';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import { AdaptTranslateService } from '../../common/i18n/index';
import { ResizeService } from '../../common/resize/resize.service';
import { SafeCdr } from '../../common/safe-cdr';
import { debounce, formatString } from '../../common/utilities';
import { getEventKeyCode } from '../../common/key-codes';
import { getFocusableElements } from '../../common/focus';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { TreeTrim, TreeWrap } from '../../tree/tree.model';
import { BaseFilterDirective } from '../base-filter';
import * as i0 from "@angular/core";
import * as i1 from "../../common/i18n/index";
import * as i2 from "../../common/device-detection.service";
import * as i3 from "../../common/resize/resize.service";
import * as i4 from "../../common/radar/adapt-radar";
import * as i5 from "../../dropdown/dropdown.component";
import * as i6 from "@angular/common";
import * as i7 from "../../tree/tree.component";
import * as i8 from "../../tree/tree-node-template.directive";
import * as i9 from "../../highlight/highlight";
import * as i10 from "../filter-tags/adapt-filter-tags";
const _c0 = ["adaptDropdownButton"];
const _c1 = ["filtersDropdownWrapper"];
const _c2 = ["menuElementRef"];
const _c3 = ["filterTags"];
function AdaptFacetedFilterComponent_ng_template_10_ng_template_8_adapt_highlight_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-highlight", 16);
} if (rf & 2) {
    const node_r7 = i0.ɵɵnextContext().$implicit;
    const ctx_r8 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("result", node_r7.label)("term", ctx_r8.searchQuery);
} }
function AdaptFacetedFilterComponent_ng_template_10_ng_template_8_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const node_r7 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(node_r7.label);
} }
function AdaptFacetedFilterComponent_ng_template_10_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n              ");
    i0.ɵɵtemplate(1, AdaptFacetedFilterComponent_ng_template_10_ng_template_8_adapt_highlight_1_Template, 1, 2, "adapt-highlight", 13);
    i0.ɵɵtext(2, "\n              ");
    i0.ɵɵtemplate(3, AdaptFacetedFilterComponent_ng_template_10_ng_template_8_ng_container_3_Template, 2, 1, "ng-container", 14);
    i0.ɵɵtext(4, "\n              ");
    i0.ɵɵelementStart(5, "span", 15);
    i0.ɵɵtext(6);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n            ");
} if (rf & 2) {
    const node_r7 = ctx.$implicit;
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r6.enableSearch);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r6.enableSearch);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("\n                ", ctx_r6.getNodeAdditionalLabel(node_r7), "\n              ");
} }
function AdaptFacetedFilterComponent_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    const _r13 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵelementStart(1, "div", 8, 9);
    i0.ɵɵlistener("keydown", function AdaptFacetedFilterComponent_ng_template_10_Template_div_keydown_1_listener($event) { i0.ɵɵrestoreView(_r13); const _r5 = i0.ɵɵreference(2); const ctx_r12 = i0.ɵɵnextContext(); const _r1 = i0.ɵɵreference(4); return ctx_r12.onDropdownMenuKeydown($event, _r5, _r1); });
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementStart(4, "div", 10);
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵelementStart(6, "adapt-tree", 11);
    i0.ɵɵlistener("selectionChange", function AdaptFacetedFilterComponent_ng_template_10_Template_adapt_tree_selectionChange_6_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r14 = i0.ɵɵnextContext(); return ctx_r14.onSelectTreeNodes($event); })("onFilter", function AdaptFacetedFilterComponent_ng_template_10_Template_adapt_tree_onFilter_6_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r15 = i0.ɵɵnextContext(); return ctx_r15.handleSearchDebounce($event); });
    i0.ɵɵtext(7, "\n            ");
    i0.ɵɵtemplate(8, AdaptFacetedFilterComponent_ng_template_10_ng_template_8_Template, 8, 3, "ng-template", 12);
    i0.ɵɵtext(9, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n    ");
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("dropdown-menu__rx-search-container", ctx_r3.enableSearch);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("value", ctx_r3.treeNodes)("filter", ctx_r3.enableSearch)("filterMode", "strict")("texts", ctx_r3.searchTexts)("trim", ctx_r3.treeTrimSettings)("wrap", ctx_r3.treeWrapSettings)("selection", ctx_r3.selectedTreeNodes)("testID", ctx_r3.testID)("selectAllButton", ctx_r3.selectAllButton)("deselectAllButton", ctx_r3.deselectAllButton);
    i0.ɵɵattribute("data-testid", ctx_r3.testID);
} }
function AdaptFacetedFilterComponent_adapt_filter_tags_13_Template(rf, ctx) { if (rf & 1) {
    const _r18 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-filter-tags", 17, 18);
    i0.ɵɵlistener("remove", function AdaptFacetedFilterComponent_adapt_filter_tags_13_Template_adapt_filter_tags_remove_0_listener($event) { i0.ɵɵrestoreView(_r18); const ctx_r17 = i0.ɵɵnextContext(); return ctx_r17.onRemoveTag($event); })("visibilityChanged", function AdaptFacetedFilterComponent_adapt_filter_tags_13_Template_adapt_filter_tags_visibilityChanged_0_listener($event) { i0.ɵɵrestoreView(_r18); const ctx_r19 = i0.ɵɵnextContext(); return ctx_r19.onVisibilityChanged($event); });
    i0.ɵɵtext(2, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("advanced-filter__outside-tags_hidden", ctx_r4.isFilterOutsideTagsHidden);
    i0.ɵɵproperty("tags", ctx_r4.selectedTreeTags)("texts", ctx_r4.texts);
} }
export class AdaptFacetedFilterComponent extends BaseFilterDirective {
    constructor(_translateService, _deviceDetection, _ngZone, _changeDetector, _resizeService, _adaptRadarService, _elem) {
        super(_translateService, _adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptFacetedFilter);
        this._translateService = _translateService;
        this._deviceDetection = _deviceDetection;
        this._ngZone = _ngZone;
        this._changeDetector = _changeDetector;
        this._resizeService = _resizeService;
        this.showTags = false;
        this.enableSearch = false;
        this.searchTexts = {};
        /**
         * Enables 'select all' button. For the correct work the "node.key" property for each node is required
         * @docs-default true
         * @since v12.13.0
         */
        this.selectAllButton = true;
        /**
         * Enables 'deselect all' button. For the correct work the "node.key" property for each node is required
         * @docs-default true
         * @since v12.13.0
         */
        this.deselectAllButton = true;
        /**
         * This input controls if filter button (anchor) should be disabled
         */
        this.anchorDisabled = false;
        this.selectedTreeNodesChange = new EventEmitter();
        this.selectedFiltersChange = new EventEmitter();
        this.treeTrimSettings = TreeTrim.Trim;
        this.treeWrapSettings = TreeWrap.Wrap;
        this.treeNodes = [];
        this.selectedTreeNodes = [];
        this.selectedTreeTags = [];
        this.searchQuery = '';
        this.isFilterOutsideTagsHidden = false;
        this.dropdownAnchorWithCounterLabel = '';
        this.handleSearchDebounce = debounce(this._handleSearch.bind(this), 200);
        this._filterOptions = [];
        this._selectedFilters = [];
        this.searchTexts = {
            filterPlaceholder: this._translateService.getCurrentLanguage()['adapt.select.searchPlaceholder']
        };
    }
    set filterOptions(value) {
        this._filterOptions = value;
        this.treeNodes = this.getTreeValuesFromFilterOptions();
    }
    get filterOptions() {
        return this._filterOptions;
    }
    set selectedFilters(value) {
        this._selectedFilters = value;
        this.setSelectedTreeNodes(this.getSelectedTreeNodesFromSelectedFilters(), false);
    }
    get selectedFilters() {
        return this._selectedFilters;
    }
    get dropdownMobileView() {
        return {
            title: this.texts.initialDropdownAnchorLabel,
            isPicker: this.isTablet,
            fullHeight: this.isTablet && this.enableSearch
        };
    }
    get dropdownAnchorLabel() {
        return this.showTags && this.isFilterOutsideTagsHidden && this.dropdownAnchorWithCounterLabel
            ? this.dropdownAnchorWithCounterLabel
            : this.texts.initialDropdownAnchorLabel;
    }
    ngOnInit() {
        if (this.selectedFilters && this.selectedFilters.length) {
            this.setSelectedTreeNodes(this.getSelectedTreeNodesFromSelectedFilters(), false);
        }
        this.isTablet = this._deviceDetection.deviceTablet();
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        const resize$ = new Subject();
        resize$
            .pipe(takeUntil(this._destroyed$), throttleTime(100, asyncScheduler, { trailing: true }))
            .subscribe(() => {
            this._checkIfFilterTagsLabelVisible();
        });
        this._resizeService.addResizeEventListener(this.filtersDropdownWrapper.nativeElement, resize$.next.bind(resize$));
    }
    ngOnDestroy() {
        var _a;
        super.ngOnDestroy();
        if ((_a = this.filtersDropdownWrapper) === null || _a === void 0 ? void 0 : _a.nativeElement) {
            this._resizeService.removeResizeEventListener(this.filtersDropdownWrapper.nativeElement);
        }
    }
    setDefaultTexts(translation) {
        this.defaultTexts.initialDropdownAnchorLabel = translation['adapt.facetedFilter.initialDropdownAnchorLabel'];
        this.defaultTexts.initialDropdownAnchorWithCounterLabel = translation['adapt.facetedFilter.initialDropdownAnchorWithCounterLabel'];
        this.defaultTexts.popoverTitleLabel = translation['adapt.facetedFilter.popoverTitleLabel'];
        this.defaultTexts.clearButtonLabel = translation['adapt.common.clear'];
        this.defaultTexts.selectedCountLabel = translation['adapt.facetedFilter.selectedCountLabel'];
        this.defaultTexts.hiddenItemsCounterLabel = translation['adapt.advancedFilter.outsideTags.hiddenItemsCounterLabel'];
    }
    onSelectTreeNodes(selectedTreeNodes) {
        this.setSelectedTreeNodes(selectedTreeNodes, true);
    }
    setSelectedTreeNodes(selectedTreeNodes, updateSelectedFilters) {
        this.selectedTreeNodes = selectedTreeNodes || [];
        this.selectedTreeTags = this.getTagsData() || [];
        this.selectedTreeNodesChange.emit(this.selectedTreeNodes);
        if (updateSelectedFilters) {
            this.selectedFilters = this.getSelectedFiltersFromSelectedTreeNodes();
            this.selectedFiltersChange.emit(this.selectedFilters);
        }
    }
    getNodeAdditionalLabel(node) {
        if (node.parent || !node.children || !this.selectedTreeNodes.length) {
            return '';
        }
        const selectedChildCount = node.children.reduce((acc, currValue) => {
            return this.selectedTreeNodes.find(selectedNode => selectedNode.key === currValue.key) ? acc + 1 : acc;
        }, 0);
        return selectedChildCount > 0 ? this.texts.selectedCountLabel
            .replace('{selectedChildCount}', selectedChildCount.toString()) : '';
    }
    getTagsData() {
        if (!this.selectedTreeNodes.length) {
            return [];
        }
        const groupedFiltersMap = groupBy(this.selectedTreeNodes.filter((node => node.parent)), (childNode) => {
            return childNode.parent.data.id;
        });
        const result = Object.values(groupedFiltersMap).map((groupedNodes) => {
            return {
                text: `${groupedNodes[0].parent.data.label}: ${groupedNodes.map(node => node.label).join(', ')}`,
                parent: groupedNodes[0].parent,
                nodes: groupedNodes
            };
        });
        return result;
    }
    onRemoveTag(event) {
        const tag = event.tag;
        const parentNode = tag.parent;
        this.setSelectedTreeNodes(this.selectedTreeNodes.filter(node => {
            return tag.nodes.indexOf(node) === -1 && parentNode !== node;
        }), true);
        // fix due to primeng tree bug
        parentNode.partialSelected = false;
    }
    onVisibilityChanged(event) {
        this.dropdownAnchorWithCounterLabel = event.hiddenItemsCount === 0 ? '' : formatString(this.texts.initialDropdownAnchorWithCounterLabel, event.hiddenItemsCount);
        this._checkIfFilterTagsLabelVisible();
        SafeCdr.detectChanges(this._changeDetector);
    }
    onDropdownMenuKeydown(event, container, popup) {
        if (getEventKeyCode(event) === TAB) {
            const focusableElements = getFocusableElements(container);
            if (event.shiftKey) {
                if ((document.activeElement === focusableElements[0]) || !(focusableElements === null || focusableElements === void 0 ? void 0 : focusableElements.length)) {
                    event.preventDefault();
                    popup.close();
                }
            }
            else {
                if ((document.activeElement === focusableElements[focusableElements.length - 1]) ||
                    ((document.activeElement === event.target) && document.activeElement.getAttribute('tabindex') === '-1')) {
                    event.preventDefault();
                    popup.close();
                }
            }
        }
    }
    onDropdownMenuOpenChange(isOpen) {
        this.dropdownOpenStateChange.emit(isOpen);
        if (isOpen) {
            // Refresh tree state on popup open
            this.searchQuery = '';
            this.treeNodes = this.getTreeValuesFromFilterOptions();
            // Move focus into the popup after opened and drawn
            this._ngZone.onStable
                .pipe(take(1), takeUntil(this._destroyed$))
                .subscribe(() => {
                var _a;
                if (this.menuElementRef) {
                    (_a = getFocusableElements(this.menuElementRef.nativeElement)[0]) === null || _a === void 0 ? void 0 : _a.focus();
                }
            });
        }
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    _handleSearch(event) {
        this.searchQuery = event.filter;
    }
    getSelectedTreeNodesFromSelectedFilters() {
        return this.selectedFilters.reduce((selectedTreeNodes, selectedFilter) => {
            const rootTreeNode = this.treeNodes.find(treeNode => treeNode.data.id === selectedFilter.id);
            if (rootTreeNode) {
                const childNodesForSelection = rootTreeNode.children.filter(childTreeNode => selectedFilter.values.findIndex(filterValue => filterValue.id === childTreeNode.data.id) !== -1);
                if (childNodesForSelection.length > 0) {
                    // fix due to primeng tree bug
                    rootTreeNode.partialSelected = true;
                }
                if (rootTreeNode.children.length === selectedFilter.values.length &&
                    childNodesForSelection.length === selectedFilter.values.length &&
                    selectedFilter.values.length > 0) {
                    // fix due to primeng tree bug
                    rootTreeNode.partialSelected = false;
                    selectedTreeNodes.push(rootTreeNode);
                }
                selectedTreeNodes.push(...childNodesForSelection);
            }
            return selectedTreeNodes;
        }, []);
    }
    getSelectedFiltersFromSelectedTreeNodes() {
        return this.getTagsData().map((tag) => {
            return Object.assign(Object.assign({}, tag.parent.data), { values: tag.nodes.map(childNode => childNode.data) });
        });
    }
    getTreeValuesFromFilterOptions() {
        return this.filterOptions.map((filterOption) => {
            const node = {
                label: filterOption.label,
                data: filterOption,
                // because for correct work of the search unique "key" property is required use "id" instead
                key: filterOption.id
            };
            node.children = filterOption.values.map((filterOptionValue) => {
                return {
                    label: filterOptionValue.label,
                    data: filterOptionValue,
                    // because for correct work of the search unique "key" property is required use "id" instead
                    key: filterOptionValue.id,
                    parent: node
                };
            });
            return node;
        });
    }
    _checkIfFilterTagsLabelVisible() {
        var _a, _b, _c;
        if (this.showTags && ((_a = this.filtersDropdownWrapper) === null || _a === void 0 ? void 0 : _a.nativeElement) && ((_b = this.adaptDropdownButton) === null || _b === void 0 ? void 0 : _b.nativeElement) && ((_c = this.filterTags) === null || _c === void 0 ? void 0 : _c.nativeElement)) {
            this.isFilterOutsideTagsHidden = this.filtersDropdownWrapper.nativeElement.clientWidth < this.adaptDropdownButton.nativeElement.clientWidth + this.filterTags.nativeElement.clientWidth;
        }
        else {
            this.isFilterOutsideTagsHidden = false;
        }
    }
}
AdaptFacetedFilterComponent.ɵfac = function AdaptFacetedFilterComponent_Factory(t) { return new (t || AdaptFacetedFilterComponent)(i0.ɵɵdirectiveInject(i1.AdaptTranslateService), i0.ɵɵdirectiveInject(i2.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.ResizeService), i0.ɵɵdirectiveInject(i4.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptFacetedFilterComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptFacetedFilterComponent, selectors: [["adapt-faceted-filter"]], viewQuery: function AdaptFacetedFilterComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 5);
        i0.ɵɵviewQuery(_c2, 5);
        i0.ɵɵviewQuery(_c3, 5, ElementRef);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.adaptDropdownButton = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filtersDropdownWrapper = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menuElementRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filterTags = _t.first);
    } }, inputs: { filterOptions: "filterOptions", selectedFilters: "selectedFilters", showTags: "showTags", enableSearch: "enableSearch", searchTexts: "searchTexts", selectAllButton: "selectAllButton", deselectAllButton: "deselectAllButton", anchorDisabled: "anchorDisabled" }, outputs: { selectedTreeNodesChange: "selectedTreeNodesChange", selectedFiltersChange: "selectedFiltersChange" }, features: [i0.ɵɵInheritDefinitionFeature], decls: 16, vars: 11, consts: [[1, "d-flex", "overflow-hidden"], ["filtersDropdownWrapper", ""], ["adaptDropdown", "", 1, "faceted-filter__dropdown-wrap", 3, "adaptRadarDisableEventSending", "restoreFocusAfterClose", "focusNextElementAfterClose", "appendToBody", "autoClose", "placement", "mobileView", "onOpen", "onClose"], ["filtersDropdown", "adaptDropdown"], ["type", "button", "adaptDropdownAnchor", "", 1, "btn", "btn-link", "px-0", "d-icon-left-filter", "d-icon-right-triangle_down", 3, "disabled", "click"], ["adaptDropdownButton", ""], ["adaptDropdownMenuTemplate", ""], [3, "advanced-filter__outside-tags_hidden", "tags", "texts", "remove", "visibilityChanged", 4, "ngIf"], [1, "dropdown-menu", "p-0", 3, "keydown"], ["menuElementRef", ""], [1, "faceted-filter__popover-container"], ["selectionMode", "checkbox", 3, "value", "filter", "filterMode", "texts", "trim", "wrap", "selection", "testID", "selectAllButton", "deselectAllButton", "selectionChange", "onFilter"], ["adaptTreeNodeTemplate", ""], [3, "result", "term", 4, "ngIf"], [4, "ngIf"], [1, "faceted-filter__selected-label"], [3, "result", "term"], [3, "tags", "texts", "remove", "visibilityChanged"], ["filterTags", ""]], template: function AdaptFacetedFilterComponent_Template(rf, ctx) { if (rf & 1) {
        const _r20 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 0, 1);
        i0.ɵɵtext(2, "\n  ");
        i0.ɵɵelementStart(3, "div", 2, 3);
        i0.ɵɵlistener("onOpen", function AdaptFacetedFilterComponent_Template_div_onOpen_3_listener() { return ctx.onDropdownMenuOpenChange(true); })("onClose", function AdaptFacetedFilterComponent_Template_div_onClose_3_listener() { return ctx.onDropdownMenuOpenChange(false); });
        i0.ɵɵtext(5, "\n    ");
        i0.ɵɵelementStart(6, "button", 4, 5);
        i0.ɵɵlistener("click", function AdaptFacetedFilterComponent_Template_button_click_6_listener($event) { i0.ɵɵrestoreView(_r20); const _r1 = i0.ɵɵreference(4); return _r1.toggle($event); });
        i0.ɵɵtext(8);
        i0.ɵɵelementEnd();
        i0.ɵɵtext(9, "\n    ");
        i0.ɵɵtemplate(10, AdaptFacetedFilterComponent_ng_template_10_Template, 13, 13, "ng-template", 6);
        i0.ɵɵtext(11, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(12, "\n\n  ");
        i0.ɵɵtemplate(13, AdaptFacetedFilterComponent_adapt_filter_tags_13_Template, 3, 4, "adapt-filter-tags", 7);
        i0.ɵɵtext(14, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(15, "\n");
    } if (rf & 2) {
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("adaptRadarDisableEventSending", true)("restoreFocusAfterClose", true)("focusNextElementAfterClose", true)("appendToBody", ctx.appendDropdownToBody)("autoClose", "outside")("placement", ctx.dropdownPlacement)("mobileView", ctx.dropdownMobileView);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("disabled", ctx.anchorDisabled);
        i0.ɵɵattribute("data-testid", ctx.testID + "_menu");
        i0.ɵɵadvance(2);
        i0.ɵɵtextInterpolate1("\n      ", ctx.dropdownAnchorLabel, "\n    ");
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngIf", ctx.showTags);
    } }, directives: [i5.AdaptDropdownDirective, i5.AdaptDropdownAnchorDirective, i5.AdaptDropdownMenuTemplateDirective, i6.NgIf, i7.AdaptTreeComponent, i8.AdaptTreeNodeTemplateDirective, i9.AdaptHighlightDirective, i10.AdaptFilterTagsComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptFacetedFilterComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-faceted-filter',
                templateUrl: './faceted-filter.component.html',
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: i1.AdaptTranslateService }, { type: i2.AdaptDeviceDetectionService }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i3.ResizeService }, { type: i4.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { filterOptions: [{
            type: Input
        }], selectedFilters: [{
            type: Input
        }], showTags: [{
            type: Input
        }], enableSearch: [{
            type: Input
        }], searchTexts: [{
            type: Input
        }], selectAllButton: [{
            type: Input
        }], deselectAllButton: [{
            type: Input
        }], anchorDisabled: [{
            type: Input
        }], selectedTreeNodesChange: [{
            type: Output
        }], selectedFiltersChange: [{
            type: Output
        }], adaptDropdownButton: [{
            type: ViewChild,
            args: ['adaptDropdownButton', { static: true }]
        }], filtersDropdownWrapper: [{
            type: ViewChild,
            args: ['filtersDropdownWrapper', { static: false }]
        }], menuElementRef: [{
            type: ViewChild,
            args: ['menuElementRef', { static: false }]
        }], filterTags: [{
            type: ViewChild,
            args: ['filterTags', { static: false, read: ElementRef }]
        }] }); })();
//# sourceMappingURL=faceted-filter.component.js.map