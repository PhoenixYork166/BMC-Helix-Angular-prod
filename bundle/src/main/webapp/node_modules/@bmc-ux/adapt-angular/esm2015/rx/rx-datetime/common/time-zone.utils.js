import { adaptWarn } from '../../../common/logger';
/**
 * isValidTimezone() function
 *
 * Determines whether an input string represents a valid timezone
 *
 * @param {string} timeZone to validate
 *
 * @returns {boolean} true if the input is a valid timezone, false otherwise
 */
export function isValidTimeZone(timeZone) {
    try {
        new Intl.DateTimeFormat(undefined, { timeZone });
        return true;
    }
    catch (_a) {
        return false;
    }
}
/**
 * guessTimeZone() function
 *
 * Uses Intl to guess the client timezone
 *
 * @returns {string} the timezone of the client machine
 */
export function guessTimeZone() {
    return Intl.DateTimeFormat().resolvedOptions().timeZone;
}
/**
 * getValidTimeZone() function
 *
 * Returns a valid time zone given an input time zone string. The input string is returned if it is valid; otherwise
 * the client time zone is returned.
 *
 * @param {string} timeZone to validate
 *
 * @returns {string} a valid time zone string
 */
export function getValidTimeZone(timeZone) {
    if (!timeZone) {
        return guessTimeZone();
    }
    else if (!isValidTimeZone(timeZone)) {
        adaptWarn(`${timeZone} is not a recognized IANA time zone names; falling back to client time zone`);
        return guessTimeZone();
    }
    return timeZone;
}
//# sourceMappingURL=time-zone.utils.js.map