{"version":3,"file":"adapt-rx-datetime-i18n.service.js","sourceRoot":"","sources":["../../../../../../libs/adapt-angular/src/rx/rx-datetime/adapt-rx-datetime-i18n.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAE,UAAU,EAAE,SAAS,EAAC,MAAM,eAAe,CAAC;AAC5D,OAAO,EACL,UAAU,EACV,WAAW,EACX,SAAS,EACT,iBAAiB,EACjB,uBAAuB,EACvB,mBAAmB,EACnB,mBAAmB,EACnB,gBAAgB,EAEjB,MAAM,iBAAiB,CAAC;;AAIzB,MAAM,UAAU,6BAA6B,CAAC,MAAc;IAC1D,OAAO,IAAI,iCAAiC,CAAC,MAAM,CAAC,CAAC;AACvD,CAAC;AAED;;;;;GAKG;AAEH,MAAM,OAAgB,0BAA0B;;oGAA1B,0BAA0B;gFAA1B,0BAA0B;;;;YADH,6BAA6B,aAAS,SAAS;+BAAnE,MAAM;uFACT,0BAA0B;cAD/C,UAAU;eAAC,EAAC,UAAU,EAAE,MAAM,EAAE,UAAU,EAAE,6BAA6B,EAAE,IAAI,EAAE,CAAC,SAAS,CAAC,EAAC;;AA+B9F,MAAM,OAAO,iCAAkC,SAAQ,0BAA0B;IAC/E,YAAuC,OAAe;QACpD,KAAK,EAAE,CAAC;QAD6B,YAAO,GAAP,OAAO,CAAQ;IAEtD,CAAC;IAED,eAAe,CAAC,KAAc,EAAE,MAAe;QAC7C,OAAO,iBAAiB,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAa,CAAC;IAC7I,CAAC;IAED,aAAa,CAAC,KAAc,EAAE,MAAe;QAC3C,OAAO,mBAAmB,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC,CAAC,gBAAgB,CAAC,IAAI,CAAa,CAAC;IACrJ,CAAC;IAED,YAAY,CAAC,IAAsB,EAAE,MAAe;QAClD,OAAO,UAAU,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,UAAU,EAAE,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;IAChH,CAAC;IAED,aAAa,CAAC,MAAe;QAC3B,OAAO,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IAC5F,CAAC;IAED,iBAAiB,CAAC,MAAe;QAC/B,OAAO,uBAAuB,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;IACzD,CAAC;;kHAvBU,iCAAiC,cACxB,SAAS;uFADlB,iCAAiC,WAAjC,iCAAiC;uFAAjC,iCAAiC;cAD7C,UAAU;;sBAEI,MAAM;uBAAC,SAAS","sourcesContent":["import {Inject, Injectable, LOCALE_ID} from '@angular/core';\nimport {\n  formatDate,\n  FormatWidth,\n  FormStyle,\n  getLocaleDayNames,\n  getLocaleFirstDayOfWeek,\n  getLocaleMonthNames,\n  getLocaleTimeFormat,\n  TranslationWidth,\n  WeekDay\n} from '@angular/common';\n\nimport {RxDatetimeStruct} from './adapt-rx-datetime.types';\n\nexport function ADAPT_RX_DATETIME_18N_FACTORY(locale: string): AdaptRxDatetimeI18nDefaultService {\n  return new AdaptRxDatetimeI18nDefaultService(locale);\n}\n\n/**\n * A service supplying i18n data to the RxDatetime component.\n *\n * The default implementation of this service uses the Angular locale and registered locale data for\n * weekdays and month names (as explained in the Angular i18n guide).\n */\n@Injectable({providedIn: 'root', useFactory: ADAPT_RX_DATETIME_18N_FACTORY, deps: [LOCALE_ID]})\nexport abstract class AdaptRxDatetimeI18nService {\n  /**\n   * Returns the long or short weekday name to display in the heading of the month view.\n   * 0=Sun ... 6=Sat.\n   */\n  abstract getWeekdayNames(short?: boolean, locale?: string): string[];\n\n  /**\n   * Returns the long or short month name to display in the activeTime picker navigation.\n   * 0=Jan ... 11=Dec.\n   */\n  abstract getMonthNames(short?: boolean, locale?: string): string[];\n\n  /**\n   * Returns formatted datetime string.\n   */\n  abstract getDateLabel(date: RxDatetimeStruct, locale?: string): string;\n\n  /**\n   * Returns time format.\n   */\n  abstract getTimeFormat(locale?: string): 12 | 24;\n\n  /**\n   * Returns first day of week.\n   */\n  abstract getFirstDayOfWeek(locale?: string): WeekDay;\n}\n\n@Injectable()\nexport class AdaptRxDatetimeI18nDefaultService extends AdaptRxDatetimeI18nService {\n  constructor(@Inject(LOCALE_ID) private _locale: string) {\n    super();\n  }\n\n  getWeekdayNames(short: boolean, locale?: string): string[] {\n    return getLocaleDayNames(locale || this._locale, FormStyle.Standalone, short ? TranslationWidth.Short : TranslationWidth.Wide) as string[];\n  }\n\n  getMonthNames(short: boolean, locale?: string): string[] {\n    return getLocaleMonthNames(locale || this._locale, FormStyle.Standalone, short ? TranslationWidth.Abbreviated : TranslationWidth.Wide) as string[];\n  }\n\n  getDateLabel(date: RxDatetimeStruct, locale?: string): string {\n    return formatDate(new Date(date.year, date.month, date.date, 0, 0, 0, 0), 'longDate', locale || this._locale);\n  }\n\n  getTimeFormat(locale?: string): 12 | 24 {\n    return /a/.test(getLocaleTimeFormat(locale || this._locale, FormatWidth.Short)) ? 12 : 24;\n  }\n\n  getFirstDayOfWeek(locale?: string): WeekDay {\n    return getLocaleFirstDayOfWeek(locale || this._locale);\n  }\n}\n"]}