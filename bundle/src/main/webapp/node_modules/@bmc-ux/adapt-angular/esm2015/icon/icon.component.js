import { ChangeDetectionStrategy, Component, ElementRef, Input, Renderer2, ViewEncapsulation } from '@angular/core';
import { isUndefined } from 'lodash-es';
import { AdaptIconConfig } from './icon.config';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "./icon.config";
import * as i2 from "../common/radar/adapt-radar";
const _c0 = ["*"];
let icon_counter = 0;
export class AdaptIconComponent extends AdaptRadarAngularGenericDirective {
    constructor(_elementRef, _renderer, _iconConfig, _adaptRadarService, _elem) {
        super(_adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptIcon);
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._iconConfig = _iconConfig;
    }
    /**
     * Icon name
     * @docs-default
     */
    set name(svgIconName) {
        if (isUndefined(this._testID)) {
            this._testID = `icon-${svgIconName}-${icon_counter++}`;
        }
        if (this._svgIcon) {
            this._renderer.removeChild(this._elementRef.nativeElement, this._svgIcon);
        }
        this._svgIcon = this._createSVGElementFromString(this._iconConfig.getIcon(svgIconName));
        if (this._svgIcon) {
            if (this._classList) {
                this._svgIcon.classList.add(this._classList);
            }
            if (this._testID) {
                this._renderer.setAttribute(this._svgIcon, 'data-testid', this._testID);
            }
            this._renderer.appendChild(this._elementRef.nativeElement, this._svgIcon);
        }
    }
    /**
     * The list of CSS classes that will be appended to SVG native element
     * @docs-default
     */
    set classList(value) {
        if (this._svgIcon) {
            this._svgIcon.classList.remove(this._classList);
            this._svgIcon.classList.add(value);
        }
        this._classList = value;
    }
    /**
     * Icon description. Needed for a11y.
     * @docs-default
     */
    set description(value) {
        if (value) {
            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-hidden', 'false');
            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-label', value);
        }
        else {
            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-hidden', 'true');
            this._renderer.removeAttribute(this._elementRef.nativeElement, 'aria-label');
        }
        this._description = value;
    }
    /**
     * The 'data-testid' attribute that will be appended to SVG native element
     * @docs-default
     */
    set testID(value) {
        if (this._svgIcon) {
            this._renderer.setAttribute(this._svgIcon, 'data-testid', value);
        }
        this._testID = value;
    }
    ngOnInit() {
        if (!this._elementRef.nativeElement.getAttribute('role')) {
            this._renderer.setAttribute(this._elementRef.nativeElement, 'role', 'img');
        }
        if (!this._description) {
            this._renderer.setAttribute(this._elementRef.nativeElement, 'aria-hidden', 'true');
        }
    }
    _createSVGElementFromString(svgString) {
        const div = this._renderer.createElement('div');
        div.innerHTML = svgString;
        return div.querySelector('svg') || null;
    }
}
AdaptIconComponent.ɵfac = function AdaptIconComponent_Factory(t) { return new (t || AdaptIconComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.AdaptIconConfig), i0.ɵɵdirectiveInject(i2.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptIconComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptIconComponent, selectors: [["adapt-icon"]], inputs: { name: "name", classList: "classList", description: "description", testID: "testID" }, features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function AdaptIconComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵprojection(0);
    } }, styles: ["\n    adapt-icon > svg {\n      position: relative;\n      bottom: .079em;\n      height: 1em;\n      width: 1em;\n      vertical-align: middle;\n      fill: currentcolor;\n      transition: all .2s;\n    }\n  "], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptIconComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-icon',
                template: '<ng-content></ng-content>',
                styles: [`
    adapt-icon > svg {
      position: relative;
      bottom: .079em;
      height: 1em;
      width: 1em;
      vertical-align: middle;
      fill: currentcolor;
      transition: all .2s;
    }
  `],
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.AdaptIconConfig }, { type: i2.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { name: [{
            type: Input
        }], classList: [{
            type: Input
        }], description: [{
            type: Input
        }], testID: [{
            type: Input
        }] }); })();
//# sourceMappingURL=icon.component.js.map