import { Injectable, NgZone } from '@angular/core';
// do not remove Observable. Compiler gets mad: Return type of getter 'alertsState'
// from exported class has or is using name 'Observable'
import { Subject, BehaviorSubject, ReplaySubject } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class AdaptNavigationService {
    constructor(_ngZone) {
        this._ngZone = _ngZone;
        this._alertsSubject = new Subject();
        this._loaderSubject = new BehaviorSubject({ show: false, message: '' });
        this._isLoading = false;
        this._destroyed$ = new ReplaySubject(1);
    }
    get alertsState() {
        return this._alertsSubject.asObservable();
    }
    get loaderState() {
        return this._loaderSubject.asObservable();
    }
    ngOnDestroy() {
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
    // - - - - - - - - - - - - Public API - - - - - - - - - - - - - -
    openAlert(alert) {
        this._alertsSubject.next(alert);
    }
    setLoaderContent(elem) {
        this._loadingContent = elem;
    }
    setLoaderMessage(str) {
        if (this._isLoading) {
            clearTimeout(this._loaderMessageTimeout);
            this._loaderSubject.next({ show: true, message: str });
        }
    }
    showLoader(message, delay, loadingContent) {
        if (this._isLoading) {
            return;
        }
        if (loadingContent) {
            this.setLoaderContent(loadingContent);
        }
        this._isLoading = true;
        this._loaderSubject.next({ show: true });
        this._blockLoadingContent();
        this._loaderMessageTimeout = window.setTimeout((function () {
            this._loaderSubject.next({ show: true, message: message || 'Still loading...' });
        }).bind(this), (delay || delay === 0) ? delay : 3000);
    }
    hideLoader() {
        if (!this._isLoading) {
            return;
        }
        clearTimeout(this._loaderMessageTimeout);
        this._loaderMessageTimeout = null;
        this._isLoading = false;
        this._loaderSubject.next({ show: false, message: null });
        this._unblockLoadingContent();
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    _blockLoadingContent() {
        if (!this._loadingContent) {
            return;
        }
        this._ngZone.onStable
            .pipe(takeUntil(this._destroyed$), take(1))
            .subscribe(() => {
            const content = typeof this._loadingContent === 'string' ? document.querySelector(this._loadingContent) : this._loadingContent;
            if (content) {
                content.classList.add('a-loader-content');
                content.classList.add('a-loader-content__blocked');
            }
        });
    }
    _unblockLoadingContent() {
        if (!this._loadingContent) {
            return;
        }
        const content = typeof this._loadingContent === 'string' ? document.querySelector(this._loadingContent) : this._loadingContent;
        if (content) {
            content.classList.remove('a-loader-content__blocked');
        }
    }
}
AdaptNavigationService.ɵfac = function AdaptNavigationService_Factory(t) { return new (t || AdaptNavigationService)(i0.ɵɵinject(i0.NgZone)); };
AdaptNavigationService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptNavigationService, factory: AdaptNavigationService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptNavigationService, [{
        type: Injectable
    }], function () { return [{ type: i0.NgZone }]; }, null); })();
//# sourceMappingURL=navigation.service.js.map