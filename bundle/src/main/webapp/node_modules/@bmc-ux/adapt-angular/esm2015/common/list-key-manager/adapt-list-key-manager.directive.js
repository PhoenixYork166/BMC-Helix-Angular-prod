import { ContentChildren, Directive, EventEmitter, Output, QueryList } from '@angular/core';
import { ListKeyManager } from '@angular/cdk/a11y';
import { AdaptListKeyManagerItemDirective } from './adapt-list-key-manager-item.directive';
import * as i0 from "@angular/core";
export class AdaptListKeyManagerDirective {
    constructor() {
        this.keyManagerStateChange = new EventEmitter();
    }
    ngAfterViewInit() {
        this._keyManager = new ListKeyManager(this.items)
            .withWrap(false)
            .withHomeAndEnd();
        this.keyManagerStateChange.emit(this._keyManager);
    }
    ngOnDestroy() {
        this.keyManagerStateChange.emit(null);
    }
}
AdaptListKeyManagerDirective.ɵfac = function AdaptListKeyManagerDirective_Factory(t) { return new (t || AdaptListKeyManagerDirective)(); };
AdaptListKeyManagerDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: AdaptListKeyManagerDirective, selectors: [["", "adaptListKeyManager", ""]], contentQueries: function AdaptListKeyManagerDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, AdaptListKeyManagerItemDirective, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.items = _t);
    } }, outputs: { keyManagerStateChange: "keyManagerStateChange" }, exportAs: ["adaptListKeyManager"] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptListKeyManagerDirective, [{
        type: Directive,
        args: [{
                selector: '[adaptListKeyManager]',
                exportAs: 'adaptListKeyManager'
            }]
    }], null, { keyManagerStateChange: [{
            type: Output
        }], items: [{
            type: ContentChildren,
            args: [AdaptListKeyManagerItemDirective, { descendants: true }]
        }] }); })();
//# sourceMappingURL=adapt-list-key-manager.directive.js.map