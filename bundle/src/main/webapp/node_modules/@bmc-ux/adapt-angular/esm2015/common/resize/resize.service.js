// Based on https://github.com/wnr/element-resize-detector
// From http://stackoverflow.com/questions/40776351/what-is-the-best-way-to-listen-for-component-resize-events-within-an-angular2-co
import { Injectable, NgZone } from '@angular/core';
import { adaptWarn } from '../logger';
import * as i0 from "@angular/core";
// TODO: Investigate possibility to improve typings - https://stackoverflow.com/questions/56238356/understanding-esmoduleinterop-in-tsconfig-file
// import * as elementResizeDetectorMaker from 'element-resize-detector'; // Lead to error https://github.bmc.com/bmc-ux/adapt-angular/issues/6326
// import {default as elementResizeDetectorMaker} from 'element-resize-detector'; // Local tests fail: element_resize_detector_1.default is not a function
// eslint-disable-next-line @typescript-eslint/no-var-requires
const elementResizeDetectorMaker = require('element-resize-detector');
/**
 * Service to track HTMLElement dimensions change
 */
export class ResizeService {
    constructor(_ngZone) {
        this._ngZone = _ngZone;
        this._elementResizeDetector = elementResizeDetectorMaker(ResizeService.defaultErdmOptions);
    }
    /**
     * Listens to the element for resize events and calls the listener function with the element as argument on resize events.
     * Pay attention that the callback is invoking outside the ngZone
     */
    addResizeEventListener(element, callback) {
        this._ngZone.runOutsideAngular(() => {
            this._elementResizeDetector.listenTo(element, callback);
        });
    }
    /**
     * Completely removes the detector and all listeners.
     */
    removeResizeEventListener(element) {
        if (element) {
            this._elementResizeDetector.uninstall(element);
        }
        else {
            adaptWarn('ADAPT warning! The element to remove resize listener is missing.');
        }
    }
}
ResizeService.defaultErdmOptions = {
    strategy: 'scroll',
    callOnAdd: true,
    debug: false
};
ResizeService.ɵfac = function ResizeService_Factory(t) { return new (t || ResizeService)(i0.ɵɵinject(i0.NgZone)); };
ResizeService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ResizeService, factory: ResizeService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ResizeService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i0.NgZone }]; }, null); })();
//# sourceMappingURL=resize.service.js.map