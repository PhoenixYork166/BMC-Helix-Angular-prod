import { Inject, Injectable, NgZone } from '@angular/core';
import { Directionality } from '@angular/cdk/bidi';
import { Platform } from '@angular/cdk/platform';
import { Overlay, OverlayContainer, ViewportRuler } from '@angular/cdk/overlay';
import { DOCUMENT } from '@angular/common';
import { AdaptOverlayWithPortal } from './overlay-with-portal';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/bidi";
import * as i2 from "@angular/cdk/overlay";
import * as i3 from "@angular/cdk/platform";
export class AdaptOverlayService {
    constructor(_document, _directionality, _ngZone, _overlay, _overlayContainer, _platform, _viewportRuler) {
        this._document = _document;
        this._directionality = _directionality;
        this._ngZone = _ngZone;
        this._overlay = _overlay;
        this._overlayContainer = _overlayContainer;
        this._platform = _platform;
        this._viewportRuler = _viewportRuler;
        this.enableCDKOverlayControl = true;
    }
    /**
     * Opens cdk overlay with passed portal
     */
    openOverlayWithPortal(portal, adaptOverlayConfig, overlayConfig) {
        return new AdaptOverlayWithPortal(portal, adaptOverlayConfig, overlayConfig, this._directionality.value, this._document, this._ngZone, this._overlay, this._overlayContainer, this._platform, this._viewportRuler);
    }
}
AdaptOverlayService.ɵfac = function AdaptOverlayService_Factory(t) { return new (t || AdaptOverlayService)(i0.ɵɵinject(DOCUMENT), i0.ɵɵinject(i1.Directionality), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.Overlay), i0.ɵɵinject(i2.OverlayContainer), i0.ɵɵinject(i3.Platform), i0.ɵɵinject(i2.ViewportRuler)); };
AdaptOverlayService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptOverlayService, factory: AdaptOverlayService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptOverlayService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: Document, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: i1.Directionality }, { type: i0.NgZone }, { type: i2.Overlay }, { type: i2.OverlayContainer }, { type: i3.Platform }, { type: i2.ViewportRuler }]; }, null); })();
//# sourceMappingURL=overlay.service.js.map