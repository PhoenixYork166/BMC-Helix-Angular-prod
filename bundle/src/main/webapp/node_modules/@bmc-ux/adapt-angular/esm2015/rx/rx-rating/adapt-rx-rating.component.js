import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Optional, Output, QueryList, Self, ViewChild, ViewChildren, ViewEncapsulation } from '@angular/core';
import { NgControl } from '@angular/forms';
import { take, takeUntil } from 'rxjs/operators';
import { cloneDeep, isNil, toNumber } from 'lodash-es';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import { AdaptTranslateService } from '../../common/i18n/index';
import { getInteractionSource } from '../../common/interaction-source';
import { AdaptRxFeedbackComponent, AdaptRxFormControlDirective } from '../form-control/index';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularCustomEventType, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { AdaptRxRatingConfigService } from './adapt-rx-rating-config.service';
import { RxRatingSize } from './adapt-rx-rating.types';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "./adapt-rx-rating-config.service";
import * as i3 from "../../common/i18n/index";
import * as i4 from "../../common/radar/adapt-radar";
import * as i5 from "../../common/device-detection.service";
import * as i6 from "../form-control/rx-control-label/adapt-rx-control-label.component";
import * as i7 from "@angular/common";
import * as i8 from "../form-control/rx-feedback/adapt-rx-feedback.component";
import * as i9 from "../../tooltip/tooltip.directive";
const _c0 = ["adaptRxFeedbackRef"];
const _c1 = ["rateButtonRef"];
function AdaptRxRatingComponent_ng_container_6_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 6, 7);
    i0.ɵɵlistener("mouseenter", function AdaptRxRatingComponent_ng_container_6_button_2_Template_button_mouseenter_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r8); const index_r5 = restoredCtx.index; const ctx_r7 = i0.ɵɵnextContext(2); return ctx_r7.onRatingItemMouseEnter(index_r5 + 1); })("click", function AdaptRxRatingComponent_ng_container_6_button_2_Template_button_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r8); const index_r5 = restoredCtx.index; const ctx_r9 = i0.ɵɵnextContext(2); return ctx_r9.onRatingItemClick(index_r5 + 1, $event); })("focus", function AdaptRxRatingComponent_ng_container_6_button_2_Template_button_focus_0_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r10 = i0.ɵɵnextContext(2); return ctx_r10.focusHandler($event); })("blur", function AdaptRxRatingComponent_ng_container_6_button_2_Template_button_blur_0_listener($event) { i0.ɵɵrestoreView(_r8); const ctx_r11 = i0.ɵɵnextContext(2); return ctx_r11.blurHandler($event); });
    i0.ɵɵtext(2, "\n        ");
    i0.ɵɵelementStart(3, "span", 8);
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵelement(5, "span", 9);
    i0.ɵɵtext(6, "\n          ");
    i0.ɵɵelement(7, "span", 10);
    i0.ɵɵtext(8, "\n          ");
    i0.ɵɵelement(9, "span", 11);
    i0.ɵɵtext(10, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n        ");
    i0.ɵɵelementStart(12, "span", 12);
    i0.ɵɵtext(13);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const rating_r4 = ctx.$implicit;
    const index_r5 = ctx.index;
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("is-active", rating_r4.fill === 100)("is-half-active", rating_r4.fill > 0 && rating_r4.fill < 100)("is-readonly", ctx_r3.disabled);
    i0.ɵɵproperty("adaptTooltip", ctx_r3.uiTexts.tooltip[index_r5])("adaptRadarDisableEventSending", true)("placement", "top")("id", ctx_r3.id + "-button-" + index_r5)("disabled", ctx_r3.disabled);
    i0.ɵɵattribute("name", ctx_r3.name)("data-testid", ctx_r3.testID + "_item-" + index_r5)("tabindex", ctx_r3.tabIndex);
    i0.ɵɵadvance(5);
    i0.ɵɵclassProp("icon-visible", rating_r4.fill === 0);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("icon-visible", rating_r4.fill === 100);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("icon-visible", rating_r4.fill > 0 && rating_r4.fill < 100);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r3.uiTexts.tooltip && ctx_r3.uiTexts.tooltip[index_r5] ? ctx_r3.uiTexts.tooltip[index_r5] : rating_r4.index);
} }
function AdaptRxRatingComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptRxRatingComponent_ng_container_6_button_2_Template, 15, 21, "button", 5);
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r0.ratingList);
} }
function AdaptRxRatingComponent_ng_container_8_span_2_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 9);
} }
function AdaptRxRatingComponent_ng_container_8_span_2_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 10);
} }
function AdaptRxRatingComponent_ng_container_8_span_2_span_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 11);
} }
function AdaptRxRatingComponent_ng_container_8_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 14);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptRxRatingComponent_ng_container_8_span_2_span_2_Template, 1, 0, "span", 15);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵtemplate(4, AdaptRxRatingComponent_ng_container_8_span_2_span_4_Template, 1, 0, "span", 16);
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵtemplate(6, AdaptRxRatingComponent_ng_container_8_span_2_span_6_Template, 1, 0, "span", 17);
    i0.ɵɵtext(7, "\n      ");
    i0.ɵɵelementStart(8, "span", 12);
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const rating_r13 = ctx.$implicit;
    const index_r14 = ctx.index;
    const ctx_r12 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("is-active", rating_r13.fill === 100)("is-half-active", rating_r13.fill > 0 && rating_r13.fill < 100);
    i0.ɵɵproperty("adaptTooltip", ctx_r12.uiTexts.tooltip[index_r14])("adaptRadarDisableEventSending", true)("placement", "top");
    i0.ɵɵattribute("data-testid", ctx_r12.testID + "_item-" + index_r14);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", rating_r13.fill === 0);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", rating_r13.fill === 100);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", rating_r13.fill > 0 && rating_r13.fill < 100);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r12.uiTexts.tooltip && ctx_r12.uiTexts.tooltip[index_r14] ? ctx_r12.uiTexts.tooltip[index_r14] : rating_r13.index);
} }
function AdaptRxRatingComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵtemplate(2, AdaptRxRatingComponent_ng_container_8_span_2_Template, 11, 12, "span", 13);
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r1.ratingList);
} }
export class AdaptRxRatingComponent extends AdaptRxFormControlDirective {
    constructor(ngControl, rxRatingConfigService, _changeDetectorRef, ts, _adaptRadarService, _deviceDetectionService, _elem) {
        super(ngControl, ts, _adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptRxRating, _changeDetectorRef);
        this.ts = ts;
        this._deviceDetectionService = _deviceDetectionService;
        this.analyticsComponentName = AdaptRadarAngularCustomEventName;
        this.controlName = 'rating';
        this.UI_SIZE = RxRatingSize;
        this.ratingList = [];
        this.isMobile = false;
        /**
         * Specifies the size of the rating. Supported values: "xtra-small", "small", "medium", ""large"
         * @docs-default RxRatingSize.xs
         */
        this.size = RxRatingSize.xs;
        /* eslint-disable @angular-eslint/no-output-on-prefix */
        /**
         * An event fired when a user selects a new rating.
         */
        this.onRateChange = new EventEmitter();
        /**
         * An event fired when a user is hovering over a given rating.
         */
        this.onHoverChange = new EventEmitter();
        /**
         * An event fired when the cursor left rating area.
         */
        this.onLeaveChange = new EventEmitter();
        /* eslint-enable @angular-eslint/no-output-on-prefix */
        this._maxValue = AdaptRxRatingComponent.DefaultMaxValue;
        this._rate = null;
        this.uiTexts = cloneDeep(rxRatingConfigService.texts.rating);
    }
    /**
     * Maximal rating that can be given using this widget.
     * @docs-default 5
     */
    get maxValue() {
        return this._maxValue;
    }
    set maxValue(v) {
        this._maxValue = isNil(v) ? AdaptRxRatingComponent.DefaultMaxValue : toNumber(v);
        this._createArrayList();
    }
    /**
     * UI Texts
     * @docs-default AdaptRxRatingConfigService.texts.rating
     */
    set texts(newTexts) {
        Object.assign(this.uiTexts, newTexts);
    }
    /**
     * Check if the control has UI error state
     */
    get hasDangerState() {
        return this.adaptRxFeedbackRef.hasUIErrorState;
    }
    ngOnInit() {
        this.isMobile = this._deviceDetectionService.isMobile();
        super.ngOnInit();
        this._createArrayList();
        this._updateState(this.rate);
        // Subscribe on first model change to get model value
        this.ngControl.valueChanges.pipe(takeUntil(this.destroy$), take(1)).subscribe(value => {
            this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxRating, {
                GroupName: this.adaptRadarGroupName,
                EventType: AdaptRadarAngularCustomEventType.Init,
                Label: this.label,
                FieldSize: this.size,
                RatingEntered: !!value,
                RatingMax: this.maxValue,
                RatingValue: value,
                Required: this.required,
                Disabled: this.disabled,
                ReadOnly: this.readonly,
            });
        });
    }
    get rate() {
        return this._rate;
    }
    set rate(v) {
        this._rate = isNil(v) ? null : toNumber(v);
    }
    onRatingItemClick(value, event) {
        this._updateValue(value);
        this.onRateChange.emit(this.rate);
        this._onChange(this.rate);
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxRating, {
            GroupName: this.adaptRadarGroupName,
            EventType: AdaptRadarAngularCustomEventType.Click,
            Label: this.label,
            FieldSize: this.size,
            RatingEntered: !!value,
            RatingMax: this.maxValue,
            RatingValue: value,
            Required: this.required,
            Disabled: this.disabled,
            ReadOnly: this.readonly,
            SubmitMethod: getInteractionSource(event, this.isMobile)
        });
    }
    onRatingItemMouseEnter(value) {
        this.onHoverChange.emit(value);
        if (!(this.readonly || this.disabled)) {
            this._updateState(value);
        }
    }
    reset() {
        this.onLeaveChange.emit(this.currentRating);
        this._updateState(this.rate);
        this._onTouched();
    }
    blurHandler(event) {
        super.blurHandler(event);
        this._onTouched();
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    writeValue(value) {
        this._updateValue(value);
    }
    _focusNativeElement() {
        if (this.rateButtonRefList) {
            this.rateButtonRefList.first.nativeElement.focus();
        }
        return null;
    }
    _updateValue(value) {
        this.rate = !isNil(value) ? this._getValueInRange(value, this.maxValue, 1) : null;
        this._updateState(this.rate);
    }
    _getValueInRange(value, max, min = 0) {
        return Math.max(Math.min(value, max), min);
    }
    _updateState(ratingValue) {
        this.currentRating = ratingValue;
        this.ratingList.map((_, i) => _.fill = this._getFillValue(i));
    }
    _createArrayList() {
        this.ratingList = Array.from({ length: this.maxValue }, (_, v) => ({ fill: 0, index: v }));
    }
    _getFillValue(index) {
        const diff = this.currentRating - index;
        if (diff >= 1) {
            return 100;
        }
        if (diff < 1 && diff > 0) {
            return Number.parseInt((diff * 100).toFixed(2), 10);
        }
        return 0;
    }
}
AdaptRxRatingComponent.DefaultMaxValue = 5;
AdaptRxRatingComponent.ɵfac = function AdaptRxRatingComponent_Factory(t) { return new (t || AdaptRxRatingComponent)(i0.ɵɵdirectiveInject(i1.NgControl, 10), i0.ɵɵdirectiveInject(i2.AdaptRxRatingConfigService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.AdaptTranslateService), i0.ɵɵdirectiveInject(i4.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i5.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptRxRatingComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptRxRatingComponent, selectors: [["adapt-rx-rating"]], viewQuery: function AdaptRxRatingComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.adaptRxFeedbackRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.rateButtonRefList = _t);
    } }, inputs: { size: "size", maxValue: "maxValue", texts: "texts" }, outputs: { onRateChange: "onRateChange", onHoverChange: "onHoverChange", onLeaveChange: "onLeaveChange" }, features: [i0.ɵɵInheritDefinitionFeature], decls: 15, vars: 33, consts: [[3, "for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"], [1, "a-rating", 3, "mouseleave"], [4, "ngIf"], [3, "ariaErrorMessage", "errors", "warningMessage", "controlTouched", "messageAppeared"], ["adaptRxFeedbackRef", ""], ["type", "button", "class", "a-rating__item", 3, "is-active", "is-half-active", "is-readonly", "adaptTooltip", "adaptRadarDisableEventSending", "placement", "id", "disabled", "mouseenter", "click", "focus", "blur", 4, "ngFor", "ngForOf"], ["type", "button", 1, "a-rating__item", 3, "adaptTooltip", "adaptRadarDisableEventSending", "placement", "id", "disabled", "mouseenter", "click", "focus", "blur"], ["rateButtonRef", ""], [1, "a-rating__icon"], [1, "d-icon-star_o", "icon"], [1, "d-icon-star", "icon"], [1, "d-icon-star_half", "icon"], [1, "sr-only"], ["class", "a-rating__item is-readonly", 3, "is-active", "is-half-active", "adaptTooltip", "adaptRadarDisableEventSending", "placement", 4, "ngFor", "ngForOf"], [1, "a-rating__item", "is-readonly", 3, "adaptTooltip", "adaptRadarDisableEventSending", "placement"], ["class", "d-icon-star_o icon", 4, "ngIf"], ["class", "d-icon-star icon", 4, "ngIf"], ["class", "d-icon-star_half icon", 4, "ngIf"]], template: function AdaptRxRatingComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div");
        i0.ɵɵtext(1, "\n  ");
        i0.ɵɵelement(2, "adapt-rx-control-label", 0);
        i0.ɵɵtext(3, "\n\n  ");
        i0.ɵɵelementStart(4, "div", 1);
        i0.ɵɵlistener("mouseleave", function AdaptRxRatingComponent_Template_div_mouseleave_4_listener() { return ctx.reset(); });
        i0.ɵɵtext(5, "\n    ");
        i0.ɵɵtemplate(6, AdaptRxRatingComponent_ng_container_6_Template, 4, 1, "ng-container", 2);
        i0.ɵɵtext(7, "\n\n    ");
        i0.ɵɵtemplate(8, AdaptRxRatingComponent_ng_container_8_Template, 4, 1, "ng-container", 2);
        i0.ɵɵtext(9, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(10, "\n\n  ");
        i0.ɵɵelementStart(11, "adapt-rx-feedback", 3, 4);
        i0.ɵɵlistener("messageAppeared", function AdaptRxRatingComponent_Template_adapt_rx_feedback_messageAppeared_11_listener($event) { return ctx.handleMessageAppeared($event, ctx.analyticsComponentName.AdaptRxRating); });
        i0.ɵɵelementEnd();
        i0.ɵɵtext(13, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(14, "\n");
    } if (rf & 2) {
        const _r2 = i0.ɵɵreference(12);
        i0.ɵɵclassProp("has-danger", _r2.hasUIErrorState)("has-warning", ctx.warningMessage);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("for", ctx.readonly ? undefined : ctx.id)("id", ctx.id + "label")("label", ctx.label)("subLabel", ctx.subLabel)("requiredLabel", ctx.requiredLabel)("showRequiredLabel", ctx.required)("tooltip", ctx.tooltip)("testID", ctx.testID);
        i0.ɵɵadvance(2);
        i0.ɵɵclassProp("a-rating_small", ctx.size === ctx.UI_SIZE.sm)("a-rating_medium", ctx.size === ctx.UI_SIZE.md)("a-rating_large", ctx.size === ctx.UI_SIZE.lg)("a-rating_readonly", ctx.readonly);
        i0.ɵɵattribute("aria-label", ctx.ariaLabel)("aria-labelledby", ctx.ariaLabelledby || (ctx.label ? ctx.id + "label" : undefined))("aria-required", ctx.required)("aria-readonly", ctx.readonly)("aria-disabled", ctx.disabled)("aria-invalid", ctx.hasDangerState)("aria-errormessage", ctx.ariaErrorMessage);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx.readonly);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.readonly);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ariaErrorMessage", ctx.ariaErrorMessage)("errors", ctx.ngControl.errors)("warningMessage", ctx.warningMessage)("controlTouched", ctx.ngControl.touched);
    } }, directives: [i6.AdaptRxControlLabelComponent, i7.NgIf, i8.AdaptRxFeedbackComponent, i7.NgForOf, i9.AdaptTooltipDirective], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxRatingComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-rx-rating',
                templateUrl: './adapt-rx-rating.component.html',
                encapsulation: ViewEncapsulation.None,
            }]
    }], function () { return [{ type: i1.NgControl, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }, { type: i2.AdaptRxRatingConfigService }, { type: i0.ChangeDetectorRef }, { type: i3.AdaptTranslateService }, { type: i4.AdaptRadarAngularService }, { type: i5.AdaptDeviceDetectionService }, { type: i0.ElementRef }]; }, { size: [{
            type: Input
        }], maxValue: [{
            type: Input
        }], texts: [{
            type: Input
        }], rateButtonRefList: [{
            type: ViewChildren,
            args: ['rateButtonRef']
        }], adaptRxFeedbackRef: [{
            type: ViewChild,
            args: ['adaptRxFeedbackRef', { static: true }]
        }], onRateChange: [{
            type: Output
        }], onHoverChange: [{
            type: Output
        }], onLeaveChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=adapt-rx-rating.component.js.map