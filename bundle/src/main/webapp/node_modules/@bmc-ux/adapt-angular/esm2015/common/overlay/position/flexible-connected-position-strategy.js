import { FlexibleConnectedPositionStrategy, } from '@angular/cdk/overlay';
export class AdaptFlexibleConnectedPositionStrategy extends FlexibleConnectedPositionStrategy {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    static PatchedCanFitWithFlexibleDimensions(fit, point, viewport) {
        // Related to issues:
        // https://github.bmc.com/bmc-ux/adapt-angular/issues/7176
        // https://github.bmc.com/bmc-ux/adapt-angular/issues/7446
        //
        // _canFitWithFlexibleDimensions is being invoked to check if there's enough space for the minimum dimensions.
        // If so, the checking position is been adding to the flexiblePositions list.
        // After that, if flexiblePositions have some items, there is a check for the best position and apply it.
        // But for the case when the origin is out of the viewport, the check for the best position returns 'null',
        // and the attempt to update the overlay position throws the error.
        //
        // If avoid the _canFitWithFlexibleDimensions check and force return 'false',
        // the flexiblePositions stays empty, so the logic goes to fallbackPositions and applies the latest one.
        return false;
    }
    constructor(connectedTo, _viewportRuler, _document, _platform, _overlayContainer) {
        super(connectedTo, _viewportRuler, _document, _platform, _overlayContainer);
        const _this = this;
        _this._canFitWithFlexibleDimensions = AdaptFlexibleConnectedPositionStrategy.PatchedCanFitWithFlexibleDimensions;
    }
}
//# sourceMappingURL=flexible-connected-position-strategy.js.map