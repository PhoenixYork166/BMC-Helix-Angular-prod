import { Directionality } from '@angular/cdk/bidi';
import { ChangeDetectionStrategy, Component, ElementRef, Input, QueryList, ViewChild, ViewChildren } from '@angular/core';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/bidi";
import * as i2 from "../common/radar/adapt-radar";
import * as i3 from "@angular/common";
import * as i4 from "../tooltip/tooltip.directive";
const _c0 = ["progressBarRef"];
const _c1 = ["sumLabelRef"];
const _c2 = ["indicatorRef"];
function AdaptProgressComponent_span_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r2.config.title);
} }
function AdaptProgressComponent_span_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", ctx_r3.sum, "%");
} }
const _c3 = function (a0) { return { "width": a0 }; };
const _c4 = function (a0) { return { "progress-indicator_inverted": a0 }; };
function AdaptProgressComponent_div_11_div_2_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 14);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const indicator_r7 = i0.ɵɵnextContext().$implicit;
    const ctx_r9 = i0.ɵɵnextContext(2);
    const _r0 = i0.ɵɵreference(1);
    i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(3, _c3, ctx_r9.getIndicatorWidth(indicator_r7, _r0.offsetWidth) + "px"))("ngClass", i0.ɵɵpureFunction1(5, _c4, ctx_r9.isIndicatorTitleInverted(indicator_r7, _r0.offsetWidth)));
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(indicator_r7.title);
} }
const _c5 = function (a0, a1) { return { "margin-left": a0, "margin-right": a1 }; };
function AdaptProgressComponent_div_11_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 10);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "div", 11, 12);
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵtemplate(5, AdaptProgressComponent_div_11_div_2_div_5_Template, 2, 7, "div", 13);
    i0.ɵɵtext(6, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const indicator_r7 = ctx.$implicit;
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction2(3, _c5, !ctx_r6.isRtl && ctx_r6.getOffsetValue(indicator_r7.value_now) + "%", ctx_r6.isRtl && ctx_r6.getOffsetValue(indicator_r7.value_now) + "%"));
    i0.ɵɵattribute("aria-valuenow", indicator_r7.value_now);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", indicator_r7.title);
} }
function AdaptProgressComponent_div_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵtemplate(2, AdaptProgressComponent_div_11_div_2_Template, 8, 6, "div", 9);
    i0.ɵɵtext(3, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r4.config.indicators)("ngForTrackBy", ctx_r4.trackByFunc);
} }
const _c6 = function (a0, a1, a2) { return { "progress-bar-animated": a0, "rounded-0": a1, "rounded-left-0": a2 }; };
function AdaptProgressComponent_ng_container_15_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r19 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 17);
    i0.ɵɵlistener("click", function AdaptProgressComponent_ng_container_15_button_2_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r19); const segment_r11 = i0.ɵɵnextContext().$implicit; return segment_r11.action($event, segment_r11); });
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "span", 18);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r20 = i0.ɵɵnextContext();
    const segment_r11 = ctx_r20.$implicit;
    const first_r13 = ctx_r20.first;
    const last_r14 = ctx_r20.last;
    const ctx_r15 = i0.ɵɵnextContext();
    i0.ɵɵclassMap("rounded-right-0 progress-bar bg-" + segment_r11.variant);
    i0.ɵɵpropertyInterpolate("adaptTooltip", segment_r11.title);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(10, _c6, segment_r11.animated, !first_r13 && !last_r14, last_r14 && !first_r13))("ngStyle", i0.ɵɵpureFunction1(14, _c3, ctx_r15.getOffsetValue(segment_r11.value_now) + "%"))("adaptRadarDisableEventSending", true);
    i0.ɵɵattribute("aria-valuenow", segment_r11.value_now)("aria-valuemin", ctx_r15.config.value_min)("aria-valuemax", ctx_r15.config.value_max);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(segment_r11.title);
} }
const _c7 = function (a0) { return { "progress-bar-animated": a0 }; };
function AdaptProgressComponent_ng_container_15_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 19);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "span", 18);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const segment_r11 = i0.ɵɵnextContext().$implicit;
    const ctx_r16 = i0.ɵɵnextContext();
    i0.ɵɵclassMap("progress-bar bg-" + segment_r11.variant);
    i0.ɵɵpropertyInterpolate("adaptTooltip", segment_r11.title);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(10, _c7, segment_r11.animated))("ngStyle", i0.ɵɵpureFunction1(12, _c3, ctx_r16.getOffsetValue(segment_r11.value_now) + "%"))("adaptRadarDisableEventSending", true);
    i0.ɵɵattribute("aria-valuenow", segment_r11.value_now)("aria-valuemin", ctx_r16.config.value_min)("aria-valuemax", ctx_r16.config.value_max);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(segment_r11.title);
} }
function AdaptProgressComponent_ng_container_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptProgressComponent_ng_container_15_button_2_Template, 5, 16, "button", 15);
    i0.ɵɵtext(3, "\n\n      ");
    i0.ɵɵtemplate(4, AdaptProgressComponent_ng_container_15_div_4_Template, 5, 14, "div", 16);
    i0.ɵɵtext(5, "\n    ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const segment_r11 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", segment_r11.action);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !segment_r11.action);
} }
export class AdaptProgressComponent extends AdaptRadarAngularGenericDirective {
    constructor(_dir, _adaptRadarService, _elem) {
        super(_adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptProgress);
        this._dir = _dir;
        /**
         * Shows the sum of all segments
         */
        this.sum = 0;
        this.isRtl = false;
        this.defaultIndicatorMinWidth = 160;
    }
    ngOnInit() {
        this.isRtl = this._dir.value === 'rtl';
    }
    ngOnChanges(changes) {
        if (changes.config) {
            this.config.floor = this.config.floor || 0;
            this.config.value_min = this.config.value_min || 0;
            this.config.value_max = this.config.value_max || 100;
            const j = this.config.floor || 0;
            const sum = this._calcTotalValue() * 100 / (this.config.value_max - this.config.value_min);
            this.sum = Math.round(sum * Math.pow(10, j)) / Math.pow(10, j);
            if (this.config.indicators) {
                // Use timeout to take correct DOM "right", "left" params for summary and indicators
                setTimeout(() => {
                    this._fadeOutOverlappedIndicators();
                });
            }
        }
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this._fadeOutOverlappedIndicators();
    }
    getOffsetValue(value) {
        return value * 100 / (this.config.value_max - this.config.value_min);
    }
    // To prevent title squashing calculate width based on indicator min-width parameter
    getIndicatorWidth(indicator, offsetWidth) {
        const indicatorMinWidth = indicator.min_width || this.defaultIndicatorMinWidth;
        const widthToEndOfProgressBar = offsetWidth * (100 - this.getOffsetValue(indicator.value_now)) / 100;
        if (indicatorMinWidth <= widthToEndOfProgressBar) {
            return widthToEndOfProgressBar;
        }
        else {
            return indicatorMinWidth;
        }
    }
    // In case if there is not enough space to show title invert title text direction
    isIndicatorTitleInverted(indicator, offsetWidth) {
        const indicatorMinWidth = indicator.min_width || this.defaultIndicatorMinWidth;
        return indicatorMinWidth === this.getIndicatorWidth(indicator, offsetWidth);
    }
    trackByFunc(index) {
        return index;
    }
    _fadeOutOverlappedIndicators() {
        if (this.sumLabel && this.indicators) {
            const summaryPosition = this.sumLabel.nativeElement.getBoundingClientRect();
            this.indicators.forEach(indicator => {
                const indicatorPosition = indicator.nativeElement.getBoundingClientRect();
                // Check if indicator and summary are overlapped and change opacity of indicator for better readability
                if (indicatorPosition.left >= summaryPosition.left && indicatorPosition.right <= summaryPosition.right) {
                    indicator.nativeElement.classList.add('progress-indicator_fadeout');
                }
                else {
                    indicator.nativeElement.classList.remove('progress-indicator_fadeout');
                }
            });
        }
    }
    _calcTotalValue() {
        return this.config.data.reduce((acc, current) => {
            if (current.variant === 'not-completed') {
                return acc;
            }
            return acc + current.value_now;
        }, 0);
    }
}
AdaptProgressComponent.ɵfac = function AdaptProgressComponent_Factory(t) { return new (t || AdaptProgressComponent)(i0.ɵɵdirectiveInject(i1.Directionality), i0.ɵɵdirectiveInject(i2.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptProgressComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptProgressComponent, selectors: [["adapt-progress"]], viewQuery: function AdaptProgressComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 5);
        i0.ɵɵviewQuery(_c2, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.progressBar = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sumLabel = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.indicators = _t);
    } }, inputs: { config: "config" }, features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 19, vars: 9, consts: [[1, "progress-wrapper"], ["progressBarRef", ""], [1, "progress-label", 3, "ngStyle"], ["sumLabelRef", ""], [4, "ngIf"], ["class", "progress-indicators-container", 4, "ngIf"], [1, "progress"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "progress-indicators-container"], ["class", "progress-indicator", 3, "ngStyle", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "progress-indicator", 3, "ngStyle"], [1, "progress-indicator__icon"], ["indicatorRef", ""], ["class", "progress-indicator__title", 3, "ngStyle", "ngClass", 4, "ngIf"], [1, "progress-indicator__title", 3, "ngStyle", "ngClass"], ["role", "progressbar", "type", "button", "placement", "top", 3, "class", "ngClass", "ngStyle", "adaptRadarDisableEventSending", "adaptTooltip", "click", 4, "ngIf"], ["role", "progressbar", "placement", "top", 3, "class", "ngClass", "ngStyle", "adaptRadarDisableEventSending", "adaptTooltip", 4, "ngIf"], ["role", "progressbar", "type", "button", "placement", "top", 3, "ngClass", "ngStyle", "adaptRadarDisableEventSending", "adaptTooltip", "click"], [1, "sr-only"], ["role", "progressbar", "placement", "top", 3, "ngClass", "ngStyle", "adaptRadarDisableEventSending", "adaptTooltip"]], template: function AdaptProgressComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0, 1);
        i0.ɵɵtext(2, "\n  ");
        i0.ɵɵelementStart(3, "label", 2, 3);
        i0.ɵɵtext(5, "\n    ");
        i0.ɵɵtemplate(6, AdaptProgressComponent_span_6_Template, 2, 1, "span", 4);
        i0.ɵɵtext(7, "\n    ");
        i0.ɵɵtemplate(8, AdaptProgressComponent_span_8_Template, 2, 1, "span", 4);
        i0.ɵɵtext(9, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(10, "\n  ");
        i0.ɵɵtemplate(11, AdaptProgressComponent_div_11_Template, 4, 2, "div", 5);
        i0.ɵɵtext(12, "\n  ");
        i0.ɵɵelementStart(13, "div", 6);
        i0.ɵɵtext(14, "\n    ");
        i0.ɵɵtemplate(15, AdaptProgressComponent_ng_container_15_Template, 6, 2, "ng-container", 7);
        i0.ɵɵtext(16, "\n\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(17, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(18, "\n");
    } if (rf & 2) {
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction2(6, _c5, !ctx.isRtl && ctx.sum + "%", ctx.isRtl && ctx.sum + "%"));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.config.title);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx.config.title);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.config.indicators && ctx.config.indicators.length);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngForOf", ctx.config.data)("ngForTrackBy", ctx.trackByFunc);
    } }, directives: [i3.NgStyle, i3.NgIf, i3.NgForOf, i3.NgClass, i4.AdaptTooltipDirective], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptProgressComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-progress',
                templateUrl: './progress.component.html',
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: i1.Directionality }, { type: i2.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { config: [{
            type: Input
        }], progressBar: [{
            type: ViewChild,
            args: ['progressBarRef', { static: true }]
        }], sumLabel: [{
            type: ViewChild,
            args: ['sumLabelRef', { static: false }]
        }], indicators: [{
            type: ViewChildren,
            args: ['indicatorRef']
        }] }); })();
//# sourceMappingURL=progress.component.js.map