{"version":3,"file":"adapt-rx-datetime-parser-formatter.service.js","sourceRoot":"","sources":["../../../../../../libs/adapt-angular/src/rx/rx-datetime/adapt-rx-datetime-parser-formatter.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Inject, Injectable, LOCALE_ID} from '@angular/core';\nimport {\n  formatDate,\n  FormatWidth,\n  getLocaleDateFormat,\n  getLocaleDateTimeFormat,\n  getLocaleTimeFormat\n} from '@angular/common';\nimport {isNil} from 'lodash-es';\n\nimport {getDateFromParts, parseDateFromString} from './common/parse.utils';\nimport {getDateParts} from './common/partition.utils';\nimport {isValidDate} from './common/validate.utils';\n\nimport {RxDatetimePickerMode, RxDatetimeStruct} from './adapt-rx-datetime.types';\n\nexport function ADAPT_RX_DATETIME_PARSER_FORMATTER_FACTORY(locale: string): AdaptRxDatetimeDefaultParserFormatter {\n  return new AdaptRxDatetimeDefaultParserFormatter(locale);\n}\n\n/**\n * An abstract service for parsing and formatting dates\n * Converts between the internal `RxDatetimeStruct` model presentation and a `string` that is displayed in the input element.\n *\n * When user types something in the input this service attempts to parse it into a `RxDatetimeStruct` object.\n * And vice versa, when users selects date/time in the picker, it must be displayed as a `string` in the input.\n *\n * Default implementation uses the Date.parse, but you can provide another implementation via DI\n * to use an alternative string format or a custom parsing logic.\n *\n */\n@Injectable({providedIn: 'root', useFactory: ADAPT_RX_DATETIME_PARSER_FORMATTER_FACTORY, deps: [LOCALE_ID]})\nexport abstract class AdaptRxDatetimeParserFormatter {\n  /**\n   * Parses the given `string` to an `RxDatetimeStruct`.\n   *\n   * Implementations should try their best to provide a result, even\n   * partial. They must return `null` if the activeTime can't be parsed.\n   */\n  abstract parse(value: string,\n                 mode: RxDatetimePickerMode,\n                 hasSeconds?: boolean,\n                 use12hoursTime?: boolean,\n                 locale?: string,\n                 inputFormat?: string): RxDatetimeStruct | null;\n\n  /**\n   * Formats the given `RxDatetimeStruct` to a `string`.\n   *\n   * Implementations should return an empty string if the given activeTime is `null`,\n   * and try their best to provide a partial result if the given activeTime is incomplete or invalid.\n   */\n  abstract format(date: RxDatetimeStruct | null,\n                  mode: RxDatetimePickerMode,\n                  hasSeconds?: boolean,\n                  use12hoursTime?: boolean,\n                  locale?: string,\n                  inputFormat?: string): string;\n}\n\n@Injectable()\nexport class AdaptRxDatetimeDefaultParserFormatter extends AdaptRxDatetimeParserFormatter {\n  private _timePeriodRegex: RegExp = /a{1,5}/;\n  private _hour12Regex: RegExp = /h{1,2}/;\n  private _hour24Regex: RegExp = /H{1,2}/;\n\n  private _storedLocale: string;\n  private _storedDateTimeFormats: string[];\n  private _storedYearFormats: string[] = [\n    'y'\n  ];\n  private _storedMonthFormats: string[] = [\n    'M',\n    'MM',\n    'MMM',\n    'MMMM',\n    'MMMMM'\n  ];\n  private _storedYearMonthFormats: string[] = [\n    'y, MMM',\n    'y MMM',\n    'y, MMMM',\n    'y MMMM',\n    'y, MMMMM',\n    'y MMMMM',\n    'MMM, y',\n    'MMM y',\n    'MMMM, y',\n    'MMMM y',\n    'MMMMM, y',\n    'MMMMM y'\n  ];\n\n  constructor(@Inject(LOCALE_ID) private _locale: string) {\n    super();\n  }\n\n  parse(value: string,\n        mode: RxDatetimePickerMode,\n        hasSeconds?: boolean,\n        use12hoursTime?: boolean,\n        locale?: string,\n        inputFormat?: string): RxDatetimeStruct | null {\n    if (!value) {\n      return null;\n    }\n\n    locale = locale || this._locale;\n\n    // User can skip the use12hoursTime parameter so need to check it and set automatically if needed\n    if (isNil(use12hoursTime)) {\n      use12hoursTime = this._use12hoursFormat(locale);\n    }\n\n    let formats: string[];\n\n    // Note: depending on locale, the ordering of formats is very important due to the handling of abbreviated year 'yy'.\n    // For example, German locale uses 'dd.MM.yy' for shortDate and 'dd.MM.y' for mediumDate. Both of these match date strings\n    // with 2-character years, but in short format the year is interpreted as in the current century (abbreviated year), while\n    // in medium format the year is interpreted as absolute. For example, '03.10.21' parses as October 3, 2021 in shortDate format\n    // and as October 3, 0021 in mediumDate format. Since the matching algorithm just looks for the first match, we must ensure\n    // that ordering of formats considers short first, lest all intended short date strings get parsed as dates in the first century!\n    const namedDateTimeFormats = ['short', 'medium', 'long'];\n    const namedDateFormats = ['shortDate', 'mediumDate', 'longDate'];\n    const namedTimeFormats = ['shortTime', 'mediumTime', 'longTime'];\n    const customDateTimeFormats = this._getCustomDateTimeFormats(locale, hasSeconds, use12hoursTime);\n\n    // err on the side of a parser that is more forgiving in the formats that it accepts\n    switch (mode) {\n      case RxDatetimePickerMode.Date:\n        // prefer date-only formats, but also accept all custom dateTime formats\n        formats = [\n          ...namedDateFormats,\n          ...namedDateTimeFormats,\n          ...customDateTimeFormats,\n        ];\n        break;\n      case RxDatetimePickerMode.Time:\n        // prefer time-only formats, but also accept all custom dateTime formats\n        formats = [\n          ...namedTimeFormats,\n          ...namedDateTimeFormats,\n          ...customDateTimeFormats,\n        ];\n        break;\n      case RxDatetimePickerMode.DateTime:\n        // prefer date-time formats, but also accept all custom dateTime formats\n        formats = [\n          ...namedDateTimeFormats,\n          ...customDateTimeFormats,\n          ...namedDateFormats\n        ];\n        break;\n      case RxDatetimePickerMode.Year:\n        // prefer year-month format, but also accept all custom dateTime formats\n        formats = [\n          ...this._storedYearFormats,\n          ...namedDateFormats,\n          ...customDateTimeFormats\n        ];\n        break;\n      case RxDatetimePickerMode.Month:\n        // prefer year-month format, but also accept all custom dateTime formats\n        formats = [\n          ...this._storedMonthFormats,\n          ...namedDateFormats,\n          ...customDateTimeFormats\n        ];\n        break;\n      case RxDatetimePickerMode.YearMonth:\n        // prefer year-month format, but also accept all custom dateTime formats\n        formats = [\n          ...this._storedYearMonthFormats,\n          ...namedDateFormats,\n          ...customDateTimeFormats\n        ];\n        break;\n      default:\n        formats = [];\n    }\n\n    if (inputFormat) {\n      formats.unshift(inputFormat);\n    }\n\n    const parsedDate: Date = parseDateFromString(value, formats, locale);\n\n    if (isValidDate(parsedDate)) {\n      const parts = getDateParts(parsedDate);\n\n      return parts;\n\n    } else {\n      return {\n        year: null,\n        month: null,\n        date: null,\n        hours: null,\n        minutes: null,\n        seconds: null,\n        parseError: {\n          query: value,\n          mode: mode,\n          locale: locale,\n          hasSeconds: hasSeconds,\n          use12HoursTime: use12hoursTime\n        }\n      };\n    }\n  }\n\n  format(dateParts: RxDatetimeStruct | null,\n         mode: RxDatetimePickerMode,\n         hasSeconds?: boolean,\n         use12hoursTime?: boolean,\n         locale?: string,\n         inputFormat?: string): string {\n    if (!dateParts || dateParts.parseError) {\n      return null;\n    }\n\n    const date = getDateFromParts(dateParts);\n\n    if (!isValidDate(date)) {\n      return null;\n    }\n\n    locale = locale || this._locale;\n\n    if (inputFormat) {\n      return formatDate(date, inputFormat, locale);\n    }\n\n    // User can skip the use12hoursTime parameter so need to check it and set automatically if needed\n    if (isNil(use12hoursTime)) {\n      use12hoursTime = this._use12hoursFormat(locale);\n    }\n\n    let format: string;\n    let timeUsed: boolean = false;\n\n    switch (mode) {\n      case RxDatetimePickerMode.Date:\n        format = 'mediumDate';\n        break;\n      case RxDatetimePickerMode.Time:\n        format = this._getCustomTimeFormat(locale, hasSeconds, use12hoursTime);\n        timeUsed = true;\n        break;\n      case RxDatetimePickerMode.DateTime:\n        format = this._getCustomDateTimeFormat(locale, hasSeconds, use12hoursTime, FormatWidth.Medium);\n        timeUsed = true;\n        break;\n      case RxDatetimePickerMode.Year:\n        format = 'y';\n        break;\n      case RxDatetimePickerMode.Month:\n        format = 'MMMM';\n        break;\n      case RxDatetimePickerMode.YearMonth:\n        format = 'MMM, y';\n        break;\n      default:\n        format = 'medium';\n    }\n\n    if (timeUsed && !isNil(use12hoursTime)) {\n      if (use12hoursTime) {\n        format = format\n          .replace('HH', 'hh')\n          .replace('H', 'h')\n          .replace(' a', '') + ' a';\n      } else {\n        format = format\n          .replace('hh', 'HH')\n          .replace('h', 'H')\n          .replace('a', '');\n      }\n    }\n\n    return formatDate(date, format, locale);\n  }\n\n  private _getCustomTimeFormat(locale: string,\n                               hasSeconds: boolean,\n                               use12hoursTime: boolean): string {\n    let timeFormat = getLocaleTimeFormat(locale, hasSeconds ? FormatWidth.Medium : FormatWidth.Short);\n\n    if (use12hoursTime) {\n      if (!this._timePeriodRegex.test(timeFormat)) {\n        timeFormat += ' a';\n      }\n\n      timeFormat = timeFormat.replace(this._hour24Regex, 'h');\n\n    } else {\n      timeFormat = timeFormat\n        .replace(this._timePeriodRegex, '')\n        .replace(this._hour12Regex, 'H')\n        .trim();\n    }\n\n    return timeFormat;\n  }\n\n  private _getCustomDateTimeFormat(locale: string,\n                                   hasSeconds: boolean,\n                                   use12hoursTime: boolean,\n                                   dateWidth: FormatWidth): string {\n    // Seconds are usually not relevant in the datepicker, but \"mediumTime\" format typically includes seconds, and\n    // \"longTime\" typically includes both seconds and timezone offset, which are unlikely to be\n    // part of user-entered date time strings. For parsing purposes, it makes sense to allow custom formats that\n    // combine the \"shortTime\" format with any of the named date formats. In particular, the \"preferred\" format\n    // combines \"shortTime\" with \"mediumDate\"\n    return getLocaleDateTimeFormat(locale, FormatWidth.Medium)\n      .replace('{1}', getLocaleDateFormat(locale, dateWidth))\n      .replace('{0}', this._getCustomTimeFormat(locale, hasSeconds, use12hoursTime));\n  }\n\n  private _getCustomDateTimeFormats(locale: string,\n                                    hasSeconds: boolean,\n                                    use12hoursTime: boolean): string[] {\n    if (locale.toString() !== this._storedLocale) {\n      this._storedLocale = locale.toString();\n\n      // Some locales include additional characters between the date and time portions of the named\n      // datetime formats (eg. \"medium\" format has a comma in German, and an \"à\" in French);\n      // since we want to be as forgiving as possible about how the date and time formats are\n      // combined when parsing user input, we should allow some simple combinations that may not\n      // correspond to the named formats\n      const dateShort = getLocaleDateFormat(locale, FormatWidth.Short);\n      const dateMedium = getLocaleDateFormat(locale, FormatWidth.Medium);\n      const dateLong = getLocaleDateFormat(locale, FormatWidth.Long);\n\n      const timeShort12 = this._getCustomTimeFormat(locale, false, true);\n      const timeShort12s = this._getCustomTimeFormat(locale, true, true);\n      const timeShort24 = this._getCustomTimeFormat(locale, false, false);\n      const timeShort24s = this._getCustomTimeFormat(locale, true, false);\n\n      this._storedDateTimeFormats = [\n        this._getCustomDateTimeFormat(locale, hasSeconds, use12hoursTime, FormatWidth.Short),\n        this._getCustomDateTimeFormat(locale, hasSeconds, !use12hoursTime, FormatWidth.Short),\n        this._getCustomDateTimeFormat(locale, !hasSeconds, use12hoursTime, FormatWidth.Short),\n        this._getCustomDateTimeFormat(locale, !hasSeconds, !use12hoursTime, FormatWidth.Short),\n\n        this._getCustomDateTimeFormat(locale, hasSeconds, use12hoursTime, FormatWidth.Medium),\n        this._getCustomDateTimeFormat(locale, hasSeconds, !use12hoursTime, FormatWidth.Medium),\n        this._getCustomDateTimeFormat(locale, !hasSeconds, use12hoursTime, FormatWidth.Medium),\n        this._getCustomDateTimeFormat(locale, !hasSeconds, !use12hoursTime, FormatWidth.Medium),\n\n        this._getCustomDateTimeFormat(locale, hasSeconds, use12hoursTime, FormatWidth.Long),\n        this._getCustomDateTimeFormat(locale, hasSeconds, !use12hoursTime, FormatWidth.Long),\n        this._getCustomDateTimeFormat(locale, !hasSeconds, use12hoursTime, FormatWidth.Long),\n        this._getCustomDateTimeFormat(locale, !hasSeconds, !use12hoursTime, FormatWidth.Long),\n\n        `${dateShort} ${timeShort12}`,\n        `${dateShort} ${timeShort12s}`,\n        `${dateShort} ${timeShort24}`,\n        `${dateShort} ${timeShort24s}`,\n\n        `${dateMedium} ${timeShort12}`,\n        `${dateMedium} ${timeShort12s}`,\n        `${dateMedium} ${timeShort24}`,\n        `${dateMedium} ${timeShort24s}`,\n\n        `${dateLong} ${timeShort12}`,\n        `${dateLong} ${timeShort12s}`,\n        `${dateLong} ${timeShort24}`,\n        `${dateLong} ${timeShort24s}`,\n\n        `${timeShort12}`,\n        `${timeShort12s}`,\n        `${timeShort24}`,\n        `${timeShort24s}`,\n\n        'M/d/y', // allow datetime like '3/4/5'\n        'h', // allow time like '6' (12-hours format)\n        'H' // allow time like '6' (24-hours format)\n      ];\n    }\n\n    return this._storedDateTimeFormats;\n  }\n\n  private _use12hoursFormat(locale: string): boolean {\n    return /a/.test(getLocaleTimeFormat(locale, FormatWidth.Short));\n  }\n}\n"]}