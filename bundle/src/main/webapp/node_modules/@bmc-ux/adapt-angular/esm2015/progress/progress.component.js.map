{"version":3,"file":"progress.component.js","sourceRoot":"","sources":["../../../../../libs/adapt-angular/src/progress/progress.component.ts","../../../../../libs/adapt-angular/src/progress/progress.component.html"],"names":[],"mappings":"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","sourcesContent":["import {Directionality} from '@angular/cdk/bidi';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  QueryList,\n  SimpleChanges,\n  ViewChild,\n  ViewChildren\n} from '@angular/core';\nimport {AdaptProgressConfig, AdaptProgressIndicator} from './progress.config';\nimport {\n  AdaptRadarAngularCustomEventName,\n  AdaptRadarAngularGenericDirective,\n  AdaptRadarAngularService\n} from '../common/radar/adapt-radar';\n\n@Component({\n  selector: 'adapt-progress',\n  templateUrl: './progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\n\nexport class AdaptProgressComponent extends AdaptRadarAngularGenericDirective implements OnInit, AfterViewInit, OnChanges {\n\n  /**\n   * Configuration for progress bar (see an example below).\n   * @docs-default\n   */\n  @Input() config: AdaptProgressConfig;\n\n  @ViewChild('progressBarRef', {static: true}) progressBar: ElementRef<HTMLDivElement>;\n  @ViewChild('sumLabelRef', {static: false}) sumLabel: ElementRef<HTMLLabelElement>;\n\n  @ViewChildren('indicatorRef') indicators: QueryList<ElementRef<HTMLDivElement>>;\n\n  /**\n   * Shows the sum of all segments\n   */\n  sum: number = 0;\n  isRtl: boolean = false;\n  defaultIndicatorMinWidth: number = 160;\n\n  constructor(private _dir: Directionality,\n              _adaptRadarService: AdaptRadarAngularService,\n              _elem: ElementRef<HTMLElement>) {\n    super(_adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptProgress);\n  }\n\n  ngOnInit(): void {\n    this.isRtl = this._dir.value === 'rtl';\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.config) {\n      this.config.floor = this.config.floor || 0;\n      this.config.value_min = this.config.value_min || 0;\n      this.config.value_max = this.config.value_max || 100;\n\n      const j = this.config.floor || 0;\n      const sum: number = this._calcTotalValue() * 100 / (this.config.value_max - this.config.value_min);\n\n      this.sum = Math.round(sum * Math.pow(10, j)) / Math.pow(10, j);\n\n      if (this.config.indicators) {\n        // Use timeout to take correct DOM \"right\", \"left\" params for summary and indicators\n        setTimeout(() => {\n          this._fadeOutOverlappedIndicators();\n        });\n      }\n    }\n  }\n\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n\n    this._fadeOutOverlappedIndicators();\n  }\n\n  getOffsetValue(value: number): number {\n    return value * 100 / (this.config.value_max - this.config.value_min);\n  }\n\n  // To prevent title squashing calculate width based on indicator min-width parameter\n  getIndicatorWidth(indicator: AdaptProgressIndicator, offsetWidth: number): number {\n    const indicatorMinWidth = indicator.min_width || this.defaultIndicatorMinWidth;\n    const widthToEndOfProgressBar = offsetWidth * (100 - this.getOffsetValue(indicator.value_now)) / 100;\n\n    if (indicatorMinWidth <= widthToEndOfProgressBar) {\n      return widthToEndOfProgressBar;\n    } else {\n      return indicatorMinWidth;\n    }\n  }\n\n  // In case if there is not enough space to show title invert title text direction\n  isIndicatorTitleInverted(indicator: AdaptProgressIndicator, offsetWidth: number): boolean {\n    const indicatorMinWidth = indicator.min_width || this.defaultIndicatorMinWidth;\n\n    return indicatorMinWidth === this.getIndicatorWidth(indicator, offsetWidth);\n  }\n\n  trackByFunc(index: number): number {\n    return index;\n  }\n\n  private _fadeOutOverlappedIndicators(): void {\n    if (this.sumLabel && this.indicators) {\n      const summaryPosition = this.sumLabel.nativeElement.getBoundingClientRect();\n\n      this.indicators.forEach(indicator => {\n        const indicatorPosition = indicator.nativeElement.getBoundingClientRect();\n\n        // Check if indicator and summary are overlapped and change opacity of indicator for better readability\n        if (indicatorPosition.left >= summaryPosition.left && indicatorPosition.right <= summaryPosition.right) {\n          indicator.nativeElement.classList.add('progress-indicator_fadeout');\n        } else {\n          indicator.nativeElement.classList.remove('progress-indicator_fadeout');\n        }\n      });\n    }\n  }\n\n  private _calcTotalValue(): number {\n    return this.config.data.reduce((acc, current) => {\n      if (current.variant === 'not-completed') {\n        return acc;\n      }\n\n      return acc + current.value_now;\n    }, 0);\n  }\n}\n","<div #progressBarRef class=\"progress-wrapper\">\n  <label #sumLabelRef\n         [ngStyle]=\"{\n          'margin-left': !isRtl && sum + '%',\n          'margin-right': isRtl && sum + '%'\n         }\"\n         class=\"progress-label\">\n    <span *ngIf=\"config.title\">{{config.title}}</span>\n    <span *ngIf=\"!config.title\">{{sum}}%</span>\n  </label>\n  <div *ngIf=\"config.indicators && config.indicators.length\"\n       class=\"progress-indicators-container\">\n    <div *ngFor=\"let indicator of config.indicators; trackBy: trackByFunc\"\n         [ngStyle]=\"{\n          'margin-left': !isRtl && getOffsetValue(indicator.value_now) + '%',\n          'margin-right': isRtl && getOffsetValue(indicator.value_now) + '%'\n         }\"\n         attr.aria-valuenow=\"{{indicator.value_now}}\"\n         class=\"progress-indicator\">\n      <div #indicatorRef class=\"progress-indicator__icon\">\n        <div *ngIf=\"indicator.title\"\n             [ngStyle]=\"{'width': getIndicatorWidth(indicator, progressBarRef.offsetWidth) + 'px'}\"\n             [ngClass]=\"{'progress-indicator_inverted': isIndicatorTitleInverted(indicator, progressBarRef.offsetWidth)}\"\n             class=\"progress-indicator__title\">{{indicator.title}}</div>\n      </div>\n    </div>\n  </div>\n  <div class=\"progress\">\n    <ng-container *ngFor=\"\n      let segment of config.data;\n      let j = index;\n      let first = first;\n      let last = last;\n      trackBy: trackByFunc\n    \">\n      <button [class]=\"'rounded-right-0 progress-bar bg-' + segment.variant\"\n              [ngClass]=\"{\n                'progress-bar-animated': segment.animated,\n                'rounded-0': !first && !last,\n                'rounded-left-0': last && !first\n              }\"\n              *ngIf=\"segment.action\"\n              [ngStyle]=\"{'width': getOffsetValue(segment.value_now) + '%'}\"\n              (click)=\"segment.action($event, segment)\"\n              role=\"progressbar\"\n              attr.aria-valuenow=\"{{segment.value_now}}\"\n              attr.aria-valuemin=\"{{config.value_min}}\"\n              attr.aria-valuemax=\"{{config.value_max}}\"\n              type=\"button\"\n              placement=\"top\"\n              [adaptRadarDisableEventSending]=\"true\"\n              adaptTooltip=\"{{segment.title}}\">\n        <span class=\"sr-only\">{{segment.title}}</span>\n      </button>\n\n      <div [class]=\"'progress-bar bg-' + segment.variant\"\n           [ngClass]=\"{'progress-bar-animated': segment.animated}\"\n           *ngIf=\"!segment.action\"\n           [ngStyle]=\"{'width': getOffsetValue(segment.value_now) + '%'}\"\n           role=\"progressbar\"\n           attr.aria-valuenow=\"{{segment.value_now}}\"\n           attr.aria-valuemin=\"{{config.value_min}}\"\n           attr.aria-valuemax=\"{{config.value_max}}\"\n           placement=\"top\"\n           [adaptRadarDisableEventSending]=\"true\"\n           adaptTooltip=\"{{segment.title}}\">\n        <span class=\"sr-only\">{{segment.title}}</span>\n      </div>\n    </ng-container>\n\n  </div>\n</div>\n"]}