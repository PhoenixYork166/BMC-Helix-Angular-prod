{"version":3,"file":"translate-service.js","sourceRoot":"","sources":["../../../../../../libs/adapt-angular/src/common/i18n/translate-service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,QAAQ,EAAC,MAAM,eAAe,CAAC;AAG3E,OAAO,EAAC,OAAO,EAAC,MAAM,WAAW,CAAC;;AAElC,MAAM,CAAC,MAAM,gBAAgB,GAAG,IAAI,cAAc,CAAS,kBAAkB,CAAC,CAAC;AAG/E,MAAM,OAAO,qBAAqB;IAQhC,0CAA0C;IAC1C,6DAA6D;IAC7D,YAAkD,eAAuB;QARzE,qBAAgB,GAAW,OAAO,CAAC;QAGnC,cAAS,GAAa,EAAE,CAAC;QAOvB,kEAAkE;QAClE,IAAI,CAAC,0BAA0B,GAAG,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC;QACtE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,0BAA0B,CAAC,CAAC;QAEzE,cAAc;QACd,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAExC,6BAA6B;QAC7B,0DAA0D;QAC1D,0EAA0E;QAE1E,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,aAAa;QACX,KAAK,MAAM,GAAG,IAAI,OAAO,EAAE;YACzB,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE;gBACtD,IAAI,GAAG,GAAG,EAAE,CAAC;gBAEb,GAAG,mCAAO,IAAI,CAAC,0BAA0B,GAAK,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;gBAEjE,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;aAC5B;SACF;IACH,CAAC;IAED,8BAA8B;IAC9B,6CAA6C;IAC7C,WAAW,CAAC,MAAc,EAAE,IAAY;QACtC,MAAM,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;QAE9B,gEAAgE;QAChE,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;YAC1B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,mCAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAK,IAAI,CAAC,CAAC;SAC/D;aAAM;YACL,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;SAC/B;IAEH,CAAC;IAED,wBAAwB;IACxB,gBAAgB;QACd,OAAO,IAAI,CAAC,cAAc,CAAC;IAC7B,CAAC;IAED,wBAAwB;IACxB,kBAAkB;QAChB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC7C,CAAC;IAED,wBAAwB;IACxB,kDAAkD;IAClD,WAAW,CAAC,MAAc,EAAE,IAAa;QACvC,MAAM,GAAG,MAAM,CAAC,WAAW,EAAE,CAAC;QAE9B,IAAI,IAAI,EAAE;YACR,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;SAChC;QAED,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;YAC1B,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC;SAC9B;IACH,CAAC;;0FA1EU,qBAAqB,cAUA,gBAAgB;2EAVrC,qBAAqB,WAArB,qBAAqB,mBADT,MAAM;uFAClB,qBAAqB;cADjC,UAAU;eAAC,EAAC,UAAU,EAAE,MAAM,EAAC;;sBAWjB,QAAQ;;sBAAI,MAAM;uBAAC,gBAAgB","sourcesContent":["import {Inject, Injectable, InjectionToken, Optional} from '@angular/core';\nimport {KeyValueObject} from '../common.models';\n\nimport {LOCALES} from './locales';\n\nexport const DEFAULT_LANGUAGE = new InjectionToken<string>('DEFAULT_LANGUAGE');\n\n@Injectable({providedIn: 'root'})\nexport class AdaptTranslateService {\n\n  fallbackLanguage: string = 'en-us';\n  fallbackLanguageDictionary: object;\n\n  languages: object[] = [];\n\n  selectedLocale: string;\n  // TODO check if unused var can be removed\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  constructor(@Optional() @Inject(DEFAULT_LANGUAGE) defaultLanguage: string) {\n\n    // load English language as fallback language directly from export\n    this.fallbackLanguageDictionary = LOCALES[this.fallbackLanguage].dict;\n    this.setLanguage(this.fallbackLanguage, this.fallbackLanguageDictionary);\n\n    // set this as\n    this.useLanguage(this.fallbackLanguage);\n\n    // TODO: add default language\n    // need to identify what is the sufficient condition here:\n    // what if we have only locale and dont have json or it has been corrupted\n\n    this.loadLanguages();\n  }\n\n  loadLanguages(): void {\n    for (const key in LOCALES) {\n      if (Object.prototype.hasOwnProperty.call(LOCALES, key)) {\n        let obj = {};\n\n        obj = {...this.fallbackLanguageDictionary, ...LOCALES[key].dict};\n\n        this.setLanguage(key, obj);\n      }\n    }\n  }\n\n  // add locale to configuration\n  // if it's already present updates the object\n  setLanguage(locale: string, json: object): void {\n    locale = locale.toLowerCase();\n\n    // if we already have this locale loaded let's update the object\n    if (this.languages[locale]) {\n      this.languages[locale] = {...this.languages[locale], ...json};\n    } else {\n      this.languages[locale] = json;\n    }\n\n  }\n\n  // return current locale\n  getCurrentLocale(): string {\n    return this.selectedLocale;\n  }\n\n  // return current locale\n  getCurrentLanguage(): KeyValueObject {\n    return this.languages[this.selectedLocale];\n  }\n\n  // select current locale\n  // if json object is passed also updates languages\n  useLanguage(locale: string, json?: object): void {\n    locale = locale.toLowerCase();\n\n    if (json) {\n      this.setLanguage(locale, json);\n    }\n\n    if (this.languages[locale]) {\n      this.selectedLocale = locale;\n    }\n  }\n\n}\n\n"]}