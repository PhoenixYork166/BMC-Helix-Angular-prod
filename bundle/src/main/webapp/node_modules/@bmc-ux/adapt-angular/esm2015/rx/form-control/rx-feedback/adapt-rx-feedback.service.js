import { Inject, Injectable, LOCALE_ID } from '@angular/core';
import { AdaptRxDatetimeParserFormatter } from '../../rx-datetime/adapt-rx-datetime-parser-formatter.service';
import { AdaptRxDatetimeI18nService } from '../../rx-datetime/adapt-rx-datetime-i18n.service';
import { AdaptDatetimeError, AdaptDatetimeRangeError, AdaptRxError, AdaptTranslateService } from '../../../common/i18n/index';
import * as i0 from "@angular/core";
import * as i1 from "../../../common/i18n/index";
import * as i2 from "../../rx-datetime/adapt-rx-datetime-parser-formatter.service";
import * as i3 from "../../rx-datetime/adapt-rx-datetime-i18n.service";
export class AdaptRxFeedbackService {
    constructor(_ts, _datetimeParserFormatter, _datetimeI18nService, _localeID) {
        this._ts = _ts;
        this._datetimeParserFormatter = _datetimeParserFormatter;
        this._datetimeI18nService = _datetimeI18nService;
        this._localeID = _localeID;
        this._initErrorMessages();
    }
    get defaultValidationErrors() {
        if (this._currentLocale !== this._ts.getCurrentLocale()) {
            this._initErrorMessages();
        }
        return this._defaultValidationErrors;
    }
    _initErrorMessages() {
        this._currentLocale = this._ts.getCurrentLocale();
        const translation = this._ts.getCurrentLanguage();
        this._defaultValidationErrors = {
            default: {
                getMessage: () => translation[AdaptRxError.Default]
            },
            required: {
                getMessage: () => translation[AdaptRxError.Required],
                showOnTouched: true,
                priority: 10
            },
            requiredtrue: {
                getMessage: () => translation[AdaptRxError.RequiredTrue],
                showOnTouched: true,
                priority: 11
            },
            min: {
                getMessage: ({ min, actual }) => {
                    return translation[AdaptRxError.Min]
                        .replace(AdaptRxError.MinKey, min)
                        .replace(AdaptRxError.ActualKey, actual);
                },
                priority: 12
            },
            max: {
                getMessage: ({ max, actual }) => {
                    return translation[AdaptRxError.Max]
                        .replace(AdaptRxError.MaxKey, max)
                        .replace(AdaptRxError.ActualKey, actual);
                },
                priority: 13
            },
            minlength: {
                getMessage: ({ requiredLength, actualLength }) => {
                    return translation[AdaptRxError.MinLength]
                        .replace(AdaptRxError.RequiredLengthKey, requiredLength)
                        .replace(AdaptRxError.ActualLengthKey, actualLength);
                },
                priority: 14
            },
            maxlength: {
                getMessage: ({ requiredLength, actualLength }) => {
                    return translation[AdaptRxError.MaxLength]
                        .replace(AdaptRxError.RequiredLengthKey, requiredLength)
                        .replace(AdaptRxError.ActualLengthKey, actualLength);
                },
                priority: 15
            },
            email: {
                getMessage: () => translation[AdaptRxError.Email],
                priority: 16
            },
            pattern: {
                getMessage: ({ requiredPattern, actualValue }) => {
                    return translation[AdaptRxError.Pattern]
                        .replace(AdaptRxError.RequiredPatternKey, requiredPattern)
                        .replace(AdaptRxError.ActualValueKey, actualValue);
                },
                priority: 17
            },
            range: {
                getMessage: ({ min, max, actual }) => {
                    return translation[AdaptRxError.Range]
                        .replace(AdaptRxError.MinKey, min)
                        .replace(AdaptRxError.MaxKey, max)
                        .replace(AdaptRxError.ActualKey, actual);
                },
                priority: 18
            },
            rxDatetimeFormat: {
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                getMessage: ({ query, mode, locale, hasSeconds, use12HoursTime }) => {
                    const _today = new Date();
                    const today = {
                        year: _today.getFullYear(),
                        month: _today.getMonth(),
                        date: _today.getDate(),
                        hours: _today.getHours(),
                        minutes: _today.getMinutes(),
                        seconds: _today.getSeconds()
                    };
                    return translation[AdaptDatetimeError.InvalidValue]
                        .replace(AdaptDatetimeError.Arg0Key, this._datetimeParserFormatter.format(today, mode, hasSeconds, use12HoursTime, locale));
                },
                priority: 19
            },
            rxDatetimeRangeFormat: {
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                getMessage: ({ start, end }) => {
                    return start ?
                        translation[AdaptDatetimeRangeError.InvalidStartName] : translation[AdaptDatetimeRangeError.InvalidEndName];
                },
                priority: 21
            },
            rxDatetimeRangeOrder: {
                getMessage: () => {
                    return translation[AdaptDatetimeRangeError.InvalidRangeOrder];
                },
                priority: 20
            },
            integerNumber: {
                getMessage: () => {
                    return translation['adapt.rx.error.integerNumber'];
                },
                priority: 30
            },
            scientificNumber: {
                getMessage: () => {
                    return translation['adapt.rx.error.scientificNumber'];
                },
                priority: 31
            },
            floatNumber: {
                getMessage: () => {
                    return translation['adapt.rx.error.floatNumber'];
                },
                priority: 32
            },
            NaN: {
                getMessage: () => {
                    return translation['adapt.rx.error.default'];
                },
                priority: 33
            }
        };
    }
}
AdaptRxFeedbackService.ɵfac = function AdaptRxFeedbackService_Factory(t) { return new (t || AdaptRxFeedbackService)(i0.ɵɵinject(i1.AdaptTranslateService), i0.ɵɵinject(i2.AdaptRxDatetimeParserFormatter), i0.ɵɵinject(i3.AdaptRxDatetimeI18nService), i0.ɵɵinject(LOCALE_ID)); };
AdaptRxFeedbackService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptRxFeedbackService, factory: AdaptRxFeedbackService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxFeedbackService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: i1.AdaptTranslateService }, { type: i2.AdaptRxDatetimeParserFormatter }, { type: i3.AdaptRxDatetimeI18nService }, { type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();
//# sourceMappingURL=adapt-rx-feedback.service.js.map