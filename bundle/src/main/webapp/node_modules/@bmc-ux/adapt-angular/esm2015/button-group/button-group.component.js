import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, IterableDiffers, NgZone, Optional, Output, QueryList, Renderer2, Self, TemplateRef, ViewChild, ViewChildren, ContentChild } from '@angular/core';
import { NgControl } from '@angular/forms';
import { animate, style, transition, trigger } from '@angular/animations';
import { Directionality } from '@angular/cdk/bidi';
import { asyncScheduler, Subject } from 'rxjs';
import { take, takeUntil, throttleTime } from 'rxjs/operators';
import { cloneDeep } from 'lodash-es';
import { ANIMATION_TIMING_FUNCTION } from '../common/animation';
import { ResizeService } from '../common/resize/resize.service';
import { AdaptTranslateService } from '../common/i18n/translate-service';
import { ColorPatterns, ColorUtils } from '../common/color.utils';
import { SafeCdr } from '../common/safe-cdr';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import { AdaptRxFormControlDirective } from '../rx/form-control/index';
import { AdaptButtonComponent } from '../button/index';
import { ColorType } from '../common/common.enums';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../common/i18n/translate-service";
import * as i3 from "@angular/cdk/bidi";
import * as i4 from "../common/resize/resize.service";
import * as i5 from "../common/radar/adapt-radar";
import * as i6 from "@angular/common";
import * as i7 from "../button/button.component";
const _c0 = ["buttonTypeGroup"];
const _c1 = ["swatchTypeGroup"];
function AdaptButtonGroupComponent_ng_template_0_button_3_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 10);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelement(2, "span", 11);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("@showCheckIcon", !ctx_r11.isRtl);
} }
function AdaptButtonGroupComponent_ng_template_0_button_3_div_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 10);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelement(2, "span", 11);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("@showCheckIconRtl", ctx_r12.isRtl);
} }
function AdaptButtonGroupComponent_ng_template_0_button_3_Template(rf, ctx) { if (rf & 1) {
    const _r14 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 7);
    i0.ɵɵlistener("click", function AdaptButtonGroupComponent_ng_template_0_button_3_Template_button_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r14); const btnItem_r9 = restoredCtx.$implicit; const ctx_r13 = i0.ɵɵnextContext(2); return ctx_r13.optionSelection(btnItem_r9.index); });
    i0.ɵɵtext(1, "\n\n      ");
    i0.ɵɵelementStart(2, "div", 8);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵtemplate(4, AdaptButtonGroupComponent_ng_template_0_button_3_div_4_Template, 4, 1, "div", 9);
    i0.ɵɵtext(5, "\n\n        ");
    i0.ɵɵtemplate(6, AdaptButtonGroupComponent_ng_template_0_button_3_div_6_Template, 4, 1, "div", 9);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const btnItem_r9 = ctx.$implicit;
    const index_r10 = ctx.index;
    const ctx_r8 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("btn-group-padding", btnItem_r9.isActive);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("btn-type", btnItem_r9.isActive ? "primary" : "secondary")("size", ctx_r8.size)("disabled", ctx_r8.disabled || btnItem_r9.disabled);
    i0.ɵɵattribute("data-testid", ctx_r8.testID + "-" + index_r10)("role", ctx_r8.multiselectable ? "checkbox" : "radio")("aria-checked", btnItem_r9.isActive)("aria-label", btnItem_r9.ariaLabel);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("content-padding", ctx_r8.multiselectable)("content-padding__icon", btnItem_r9.isActive && ctx_r8.multiselectable);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", btnItem_r9.isActive && ctx_r8.multiselectable && !ctx_r8.isRtl);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", btnItem_r9.isActive && ctx_r8.multiselectable && ctx_r8.isRtl);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n\n        ", btnItem_r9.name, "\n      ");
} }
function AdaptButtonGroupComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "div", 5);
    i0.ɵɵtext(2, "\n    ");
    i0.ɵɵtemplate(3, AdaptButtonGroupComponent_ng_template_0_button_3_Template, 9, 17, "button", 6);
    i0.ɵɵtext(4, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n");
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("btn-group-vertical", ctx_r1.isVertical || ctx_r1.isVerticalByResize);
    i0.ɵɵattribute("role", ctx_r1.multiselectable ? "group" : "radiogroup")("aria-labelledby", ctx_r1.ariaLabelledby)("aria-describedby", ctx_r1.ariaDescribedBy);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r1.innerConfig)("ngForTrackBy", ctx_r1.trackByFn);
} }
const _c2 = function (a0, a1) { return { $implicit: a0, index: a1 }; };
function AdaptButtonGroupComponent_ng_template_3_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementContainer(2, 13);
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const btnItem_r16 = ctx.$implicit;
    const index_r17 = ctx.index;
    const ctx_r15 = i0.ɵɵnextContext(2);
    const _r4 = i0.ɵɵreference(7);
    const _r6 = i0.ɵɵreference(10);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r15.groupType === "color-picker" ? _r4 : _r6)("ngTemplateOutletContext", i0.ɵɵpureFunction2(2, _c2, btnItem_r16, index_r17));
} }
function AdaptButtonGroupComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "div");
    i0.ɵɵtext(2, "\n    ");
    i0.ɵɵtemplate(3, AdaptButtonGroupComponent_ng_template_3_ng_container_3_Template, 4, 5, "ng-container", 12);
    i0.ɵɵtext(4, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n");
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("d-flex", ctx_r3.groupType === "color-picker");
    i0.ɵɵattribute("role", ctx_r3.multiselectable ? "group" : "radiogroup")("aria-labelledby", ctx_r3.ariaLabelledby)("aria-describedby", ctx_r3.ariaDescribedBy);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r3.innerConfig)("ngForTrackBy", ctx_r3.trackByFn);
} }
function AdaptButtonGroupComponent_ng_template_6_span_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 18);
} if (rf & 2) {
    const button_r18 = i0.ɵɵnextContext().$implicit;
    const ctx_r20 = i0.ɵɵnextContext();
    i0.ɵɵstyleProp("background-color", ctx_r20.getBackgroundColor(button_r18.background));
} }
function AdaptButtonGroupComponent_ng_template_6_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c3 = function (a0) { return { "color": a0 }; };
const _c4 = function (a0) { return { item: a0 }; };
function AdaptButtonGroupComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    const _r24 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "button", 14);
    i0.ɵɵlistener("click", function AdaptButtonGroupComponent_ng_template_6_Template_button_click_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r24); const button_r18 = restoredCtx.$implicit; const ctx_r23 = i0.ɵɵnextContext(); return ctx_r23.optionSelection(button_r18.index); });
    i0.ɵɵtext(2, "\n    ");
    i0.ɵɵelement(3, "span", 15);
    i0.ɵɵtext(4, "\n    ");
    i0.ɵɵtemplate(5, AdaptButtonGroupComponent_ng_template_6_span_5_Template, 1, 2, "span", 16);
    i0.ɵɵtext(6, "\n    ");
    i0.ɵɵtemplate(7, AdaptButtonGroupComponent_ng_template_6_ng_container_7_Template, 1, 0, "ng-container", 17);
    i0.ɵɵtext(8, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n");
} if (rf & 2) {
    const button_r18 = ctx.$implicit;
    const index_r19 = ctx.index;
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵclassMapInterpolate1("adapt-swatch-item color-selection p-0 ", button_r18.customClass, "");
    i0.ɵɵstyleProp("border-color", ctx_r5.getBorderColor(button_r18.background))("background-color", ctx_r5.getBackgroundColor(button_r18.background));
    i0.ɵɵclassProp("multiselectable", ctx_r5.useCheckboxStyle)("is-selected", button_r18.isActive);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("btn-type", "secondary")("disabled", ctx_r5.disabled || button_r18.disabled);
    i0.ɵɵattribute("data-testid", ctx_r5.testID + "-" + index_r19)("role", ctx_r5.multiselectable ? "checkbox" : "radio")("aria-checked", button_r18.isActive)("aria-label", button_r18.ariaLabel);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(22, _c3, button_r18.darkcolor ? ctx_r5.checkmarkColor.dark : ctx_r5.checkmarkColor.light));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r5.useCheckboxStyle);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", button_r18.templateRef || ctx_r5.layoutTemplate || null)("ngTemplateOutletContext", i0.ɵɵpureFunction1(24, _c4, button_r18.context || null));
} }
function AdaptButtonGroupComponent_ng_template_9_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function AdaptButtonGroupComponent_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    const _r29 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "button", 14);
    i0.ɵɵlistener("click", function AdaptButtonGroupComponent_ng_template_9_Template_button_click_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r29); const button_r25 = restoredCtx.$implicit; const ctx_r28 = i0.ɵɵnextContext(); return ctx_r28.optionSelection(button_r25.index); });
    i0.ɵɵtext(2, "\n    ");
    i0.ɵɵtemplate(3, AdaptButtonGroupComponent_ng_template_9_ng_container_3_Template, 1, 0, "ng-container", 17);
    i0.ɵɵtext(4, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n");
} if (rf & 2) {
    const button_r25 = ctx.$implicit;
    const index_r26 = ctx.index;
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵclassMapInterpolate1("adapt-swatch-item tile-selection p-0 ", button_r25.customClass, "");
    i0.ɵɵstyleProp("box-shadow", ctx_r7.getBoxShadowColor(button_r25.background))("background-color", ctx_r7.getBackgroundColor(button_r25.background));
    i0.ɵɵclassProp("multiselectable", ctx_r7.useCheckboxStyle)("is-selected", button_r25.isActive);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("btn-type", "secondary")("disabled", ctx_r7.disabled || button_r25.disabled);
    i0.ɵɵattribute("data-testid", ctx_r7.testID + "-" + index_r26)("role", ctx_r7.multiselectable ? "checkbox" : "radio")("aria-checked", button_r25.isActive)("aria-label", button_r25.ariaLabel);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", button_r25.templateRef || ctx_r7.layoutTemplate || null)("ngTemplateOutletContext", i0.ɵɵpureFunction1(20, _c4, button_r25.context || null));
} }
export class AdaptButtonGroupComponent extends AdaptRxFormControlDirective {
    constructor(ngControl, ts, _changeDetectorRef, _renderer, _dir, _ngZone, _differs, _elementRef, _resizeService, _adaptRadarService, _elem) {
        super(ngControl, ts, _adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptButtonGroup, _changeDetectorRef);
        this._renderer = _renderer;
        this._dir = _dir;
        this._ngZone = _ngZone;
        this._differs = _differs;
        this._elementRef = _elementRef;
        this._resizeService = _resizeService;
        this.controlName = 'button-group';
        this.isRtl = false;
        this.isVerticalByResize = false;
        this.innerConfig = [];
        this.lightnessEdge = 50;
        this.checkmarkColor = {
            dark: 'var(--gray-900)',
            light: 'var(--white)'
        };
        /**
         * Makes a set of buttons appear vertically stacked.
         * Only valid for the button group of type 'button'
         * @since v10.11.0
         * @docs-default false
         */
        this.isVertical = false;
        /**
         * Set multiselectable (checkbox) behaviour.
         * @docs-default false
         */
        this.multiselectable = false;
        /**
         * Whether button could we unchecked.
         * @docs-default false
         */
        this.uncheckable = false;
        /**
         * Emits an event when button-group state changed
         */
        this.modelArrayChanged = new EventEmitter();
        this._groupType = 'button';
        this._activeState = 'btn-primary';
        this._buttonsVerticalInitialWidth = [];
        // TODO check if can be fixed
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        this.onChange = () => { };
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        this.onTouched = () => { };
    }
    /**
     * Configuration for button-group elements. See interface below.
     * @docs-default []
     */
    set config(value) {
        let index = 0;
        const obj = cloneDeep(value);
        obj.forEach((configItem) => {
            configItem.index = index++;
            if (configItem.background) {
                configItem.darkcolor = this.isColorLight(configItem.background);
            }
        });
        if (this._model) {
            obj.forEach((configItem, index) => {
                configItem.isActive = this._model[index];
            });
        }
        this.innerConfig = obj;
    }
    /**
     * Specifies buttons size. Supported values: 'xtra-large', 'xtra-small', 'small', 'large', 'block'.
     * Only valid for the button group of type 'button'
     * @docs-default
     */
    get size() {
        return this._size;
    }
    set size(v) {
        this._size = v;
    }
    /**
     * Specifies type of the button group. Supported values: 'button', 'tile', 'color-picker'.
     * @since v10.18.0
     * @docs-default 'button'
     */
    get groupType() {
        return this._groupType;
    }
    set groupType(v) {
        this._groupType = v;
    }
    get groupTemplate() {
        return this.groupType === 'button' ? this.buttonTypeGroup : this.swatchTypeGroup;
    }
    ngOnInit() {
        super.ngOnInit();
        this.isRtl = this._dir.value === 'rtl';
        this._elementWrapperBlock = this._elementRef.nativeElement.parentElement || document.body;
        if (!this.useCheckboxStyle) {
            this.useCheckboxStyle = this.multiselectable;
        }
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        const resize$ = new Subject();
        resize$
            .pipe(takeUntil(this.destroy$), throttleTime(100, asyncScheduler, { trailing: true }))
            .subscribe(() => {
            this._checkButtonsOnResize();
            SafeCdr.detectChanges(this._changeDetectorRef);
        });
        this._resizeService.addResizeEventListener(this._elementWrapperBlock, resize$.next.bind(resize$));
        this.setStyle();
    }
    ngDoCheck() {
        if (this._modelDiffer && this._model) {
            const modelChanged = this._modelDiffer.diff(this._model);
            if (modelChanged) {
                this.modelArrayChanged.emit(this.innerConfig);
            }
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this._resizeService.removeResizeEventListener(this._elementWrapperBlock);
    }
    getBorderColor(color) {
        return ColorUtils.getBorderColor(color);
    }
    getBoxShadowColor(color) {
        if (!color || !ColorPatterns.HEX.test(color)) {
            return null;
        }
        color = ColorUtils.getDarken(color);
        return `1px 0 0 0 ${color},
            0 1px 0 0 ${color},
            1px 1px 0 0 ${color},
            1px 0 0 0 ${color} inset,
            0 1px 0 0 ${color} inset`;
    }
    getBackgroundColor(color) {
        if (!color || !ColorPatterns.HEX.test(color)) {
            return null;
        }
        return ColorUtils.getColorStr(ColorUtils.parseColor(color, ColorPatterns.HEX, ColorType.HEX), ColorType.HEX);
    }
    setStyle() {
        if (!this.buttons.length || this.groupType !== 'button') {
            return;
        }
        this._ngZone.onStable
            .pipe(takeUntil(this.destroy$), take(1))
            .subscribe(() => {
            this.buttons.forEach(btnElem => {
                if (btnElem.type !== 'primary') {
                    btnElem.elem.nativeElement.style.removeProperty('border-radius');
                    return;
                }
                const btnHTMLElem = btnElem.elem.nativeElement;
                const isNextActiveSibling = btnHTMLElem.nextElementSibling
                    && btnHTMLElem.nextElementSibling.classList.contains(this._activeState);
                const isPrevActiveSibling = btnHTMLElem.previousElementSibling
                    && btnHTMLElem.previousElementSibling.classList.contains(this._activeState);
                if (this.isVertical || this.isVerticalByResize) {
                    this._applyVerticalBordersValue(btnHTMLElem, 'top', isPrevActiveSibling ? 0 : 'var(--border-radius)');
                    this._applyVerticalBordersValue(btnHTMLElem, 'bottom', isNextActiveSibling ? 0 : 'var(--border-radius)');
                    return;
                }
                this._applyHorizontalBordersValue(btnHTMLElem, this.isRtl ? 'right' : 'left', isPrevActiveSibling ? 0 : 'var(--border-radius)');
                this._applyHorizontalBordersValue(btnHTMLElem, this.isRtl ? 'left' : 'right', isNextActiveSibling ? 0 : 'var(--border-radius)');
            });
        });
    }
    optionSelection(index) {
        this._updateModel(index);
        this._model = this.innerConfig.map(item => item.isActive);
        this._onChange(this._model);
        this.setStyle();
    }
    writeValue(model) {
        if (!Array.isArray(model)) {
            return;
        }
        const btnSelected = model.filter(item => item);
        // check for radio mode
        if (btnSelected && btnSelected.length > 1 && !this.multiselectable) {
            this.disabled = true;
            throw (new Error('ADAPT-ANGULAR Error! Radio mode! Only one item can be active at a time!'));
        }
        this._model = Object.assign([], this._model, model);
        this.innerConfig.forEach((configItem, index) => {
            configItem.isActive = this._model[index];
        });
        this._modelDiffer = this._differs.find(this._model).create();
    }
    trackByFn(index, element) {
        return element.index;
    }
    // TODO check if can be removed
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    _focusNativeElement() {
    }
    _updateModel(activeIndex) {
        if (this.multiselectable) {
            this.innerConfig[activeIndex].isActive = this.uncheckable ? !this.innerConfig[activeIndex].isActive : true;
            return;
        }
        this.innerConfig.forEach((configItem, index) => {
            return index === activeIndex ?
                configItem.isActive = this.uncheckable ? !configItem.isActive : true
                : configItem.isActive = false;
        });
    }
    /**
     * set border-radius value
     */
    _applyHorizontalBordersValue(btn, borderSide, value) {
        this._renderer.setStyle(btn, `border-top-${borderSide}-radius`, `${value}`);
        this._renderer.setStyle(btn, `border-bottom-${borderSide}-radius`, `${value}`);
    }
    _applyVerticalBordersValue(btn, borderSide, value) {
        this._renderer.setStyle(btn, `border-${borderSide}-left-radius`, `${value}`);
        this._renderer.setStyle(btn, `border-${borderSide}-right-radius`, `${value}`);
    }
    _calculateButtons() {
        if (!this._buttonsVerticalInitialWidth.length) {
            this.buttons.forEach((item) => {
                this._buttonsVerticalInitialWidth.push(item.elem.nativeElement.offsetWidth);
            });
        }
        const sum = this._buttonsVerticalInitialWidth.reduce((acc, current) => acc + current, 0);
        this.isVerticalByResize = Math.floor(sum) > Math.ceil(this._elementWrapperBlock.offsetWidth);
        this.setStyle();
    }
    _checkButtonsOnResize() {
        if (!this.buttons || this.isVertical) {
            return;
        }
        this.buttons.forEach(btnElem => {
            this._renderer.removeStyle(btnElem.elem.nativeElement, 'width');
        });
        this._calculateButtons();
    }
    isColorLight(color) {
        return ColorUtils.getBackgroundLightness(color) > this.lightnessEdge ? true : false;
    }
}
AdaptButtonGroupComponent.ɵfac = function AdaptButtonGroupComponent_Factory(t) { return new (t || AdaptButtonGroupComponent)(i0.ɵɵdirectiveInject(i1.NgControl, 10), i0.ɵɵdirectiveInject(i2.AdaptTranslateService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i3.Directionality), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i4.ResizeService), i0.ɵɵdirectiveInject(i5.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptButtonGroupComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptButtonGroupComponent, selectors: [["adapt-button-group"]], contentQueries: function AdaptButtonGroupComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TemplateRef, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.layoutTemplate = _t.first);
    } }, viewQuery: function AdaptButtonGroupComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 7);
        i0.ɵɵviewQuery(AdaptButtonComponent, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.buttonTypeGroup = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.swatchTypeGroup = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.buttons = _t);
    } }, inputs: { config: "config", size: "size", groupType: "groupType", isVertical: "isVertical", multiselectable: "multiselectable", uncheckable: "uncheckable", useCheckboxStyle: "useCheckboxStyle" }, outputs: { modelArrayChanged: "modelArrayChanged" }, exportAs: ["adaptBtnGroup"], features: [i0.ɵɵInheritDefinitionFeature], decls: 14, vars: 1, consts: [["buttonTypeGroup", ""], ["swatchTypeGroup", ""], ["colorPicker", ""], ["tilePicker", ""], [3, "ngTemplateOutlet"], [1, "btn-group"], ["adapt-button", "", "tabIndex", "0", 3, "adaptRadarDisableEventSending", "btn-type", "btn-group-padding", "size", "disabled", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["adapt-button", "", "tabIndex", "0", 3, "adaptRadarDisableEventSending", "btn-type", "size", "disabled", "click"], [1, "btn-group-content"], ["class", "btn-group-icon", 4, "ngIf"], [1, "btn-group-icon"], [1, "d-icon-check_adapt"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["adapt-button", "", "tabIndex", "0", 3, "adaptRadarDisableEventSending", "btn-type", "disabled", "click"], [1, "d-icon-check_adapt", "adapt-inner-check", 3, "ngStyle"], ["class", "check-indicator", 3, "background-color", 4, "ngIf"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "check-indicator"]], template: function AdaptButtonGroupComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, AdaptButtonGroupComponent_ng_template_0_Template, 6, 7, "ng-template", null, 0, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(2, "\n\n");
        i0.ɵɵtemplate(3, AdaptButtonGroupComponent_ng_template_3_Template, 6, 7, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(5, "\n\n");
        i0.ɵɵtemplate(6, AdaptButtonGroupComponent_ng_template_6_Template, 10, 26, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(8, "\n\n");
        i0.ɵɵtemplate(9, AdaptButtonGroupComponent_ng_template_9_Template, 6, 22, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(11, "\n\n");
        i0.ɵɵelementContainer(12, 4);
        i0.ɵɵtext(13, "\n\n");
    } if (rf & 2) {
        i0.ɵɵadvance(12);
        i0.ɵɵproperty("ngTemplateOutlet", ctx.groupTemplate);
    } }, directives: [i6.NgTemplateOutlet, i6.NgForOf, i7.AdaptButtonComponent, i6.NgIf, i6.NgStyle], encapsulation: 2, data: { animation: [
            trigger('showCheckIcon', [
                transition(':enter', [
                    style({ left: '5px', opacity: 0 }),
                    animate('.15s' + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ left: 0, opacity: 1 }))
                ]),
                transition(':leave', [
                    style({ opacity: 1 }),
                    animate('.15s', style({ left: '5px', opacity: 0 }))
                ])
            ]),
            trigger('showCheckIconRtl', [
                transition(':enter', [
                    style({ right: '5px', opacity: 0 }),
                    animate('.15s' + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ right: 0, opacity: 1 }))
                ]),
                transition(':leave', [
                    style({ opacity: 1 }),
                    animate('.15s', style({ right: '5px', opacity: 0 }))
                ])
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptButtonGroupComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-button-group',
                exportAs: 'adaptBtnGroup',
                templateUrl: './button-group.component.html',
                animations: [
                    trigger('showCheckIcon', [
                        transition(':enter', [
                            style({ left: '5px', opacity: 0 }),
                            animate('.15s' + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ left: 0, opacity: 1 }))
                        ]),
                        transition(':leave', [
                            style({ opacity: 1 }),
                            animate('.15s', style({ left: '5px', opacity: 0 }))
                        ])
                    ]),
                    trigger('showCheckIconRtl', [
                        transition(':enter', [
                            style({ right: '5px', opacity: 0 }),
                            animate('.15s' + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ right: 0, opacity: 1 }))
                        ]),
                        transition(':leave', [
                            style({ opacity: 1 }),
                            animate('.15s', style({ right: '5px', opacity: 0 }))
                        ])
                    ])
                ]
            }]
    }], function () { return [{ type: i1.NgControl, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }, { type: i2.AdaptTranslateService }, { type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }, { type: i3.Directionality }, { type: i0.NgZone }, { type: i0.IterableDiffers }, { type: i0.ElementRef }, { type: i4.ResizeService }, { type: i5.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { config: [{
            type: Input
        }], size: [{
            type: Input
        }], groupType: [{
            type: Input
        }], isVertical: [{
            type: Input
        }], multiselectable: [{
            type: Input
        }], uncheckable: [{
            type: Input
        }], useCheckboxStyle: [{
            type: Input
        }], modelArrayChanged: [{
            type: Output
        }], buttons: [{
            type: ViewChildren,
            args: [AdaptButtonComponent]
        }], buttonTypeGroup: [{
            type: ViewChild,
            args: ['buttonTypeGroup', { static: true }]
        }], swatchTypeGroup: [{
            type: ViewChild,
            args: ['swatchTypeGroup', { static: true }]
        }], layoutTemplate: [{
            type: ContentChild,
            args: [TemplateRef, { static: false }]
        }] }); })();
//# sourceMappingURL=button-group.component.js.map