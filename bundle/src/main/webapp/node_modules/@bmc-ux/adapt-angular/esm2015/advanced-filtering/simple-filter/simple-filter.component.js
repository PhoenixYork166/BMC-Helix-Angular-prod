import { Component, ElementRef, EventEmitter, Input, NgZone, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { DOWN_ARROW, ENTER } from '@angular/cdk/keycodes';
import { take, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { isEqual } from 'lodash-es';
import { BaseFilterDirective } from '../base-filter';
import { AdaptTranslateService } from '../../common/i18n/index';
import { getEventKeyCode } from '../../common/key-codes';
import { AdaptDropdownDirective } from '../../dropdown/index';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "../../common/i18n/index";
import * as i2 from "../../common/device-detection.service";
import * as i3 from "../../common/radar/adapt-radar";
import * as i4 from "../../dropdown/dropdown.component";
import * as i5 from "../../common/list-key-manager/adapt-list-key-manager.directive";
import * as i6 from "../../common/list-key-manager/adapt-list-key-manager-item.directive";
import * as i7 from "@angular/common";
const _c0 = ["filtersDropdown"];
function AdaptSimpleFilterComponent_ng_template_6_button_11_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 6, 9);
    i0.ɵɵlistener("click", function AdaptSimpleFilterComponent_ng_template_6_button_11_Template_button_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r9); const filterOption_r5 = restoredCtx.$implicit; const ctx_r8 = i0.ɵɵnextContext(2); return ctx_r8.selectFilter(filterOption_r5); })("mouseover", function AdaptSimpleFilterComponent_ng_template_6_button_11_Template_button_mouseover_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r9); const i_r6 = restoredCtx.index; const ctx_r10 = i0.ɵɵnextContext(2); return ctx_r10.onItemMouseover(i_r6 + 1); });
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const filterOption_r5 = ctx.$implicit;
    const i_r6 = ctx.index;
    const _r7 = i0.ɵɵreference(1);
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("text-active", ctx_r4.isActiveDescendant(_r7))("active", ctx_r4.isActiveFilterOption(filterOption_r5));
    i0.ɵɵproperty("item", filterOption_r5)("id", ctx_r4._uniqueId + "_" + filterOption_r5.id);
    i0.ɵɵattribute("data-testid", ctx_r4.testID + "_item_" + i_r6);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1("\n        ", filterOption_r5.label, "\n      ");
} }
function AdaptSimpleFilterComponent_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    const _r12 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n    ");
    i0.ɵɵelementStart(1, "div", 4, 5);
    i0.ɵɵlistener("keyManagerStateChange", function AdaptSimpleFilterComponent_ng_template_6_Template_div_keyManagerStateChange_1_listener($event) { i0.ɵɵrestoreView(_r12); const ctx_r11 = i0.ɵɵnextContext(); return ctx_r11.keyManagerStateChange($event); });
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementStart(4, "button", 6, 7);
    i0.ɵɵlistener("click", function AdaptSimpleFilterComponent_ng_template_6_Template_button_click_4_listener() { i0.ɵɵrestoreView(_r12); const ctx_r13 = i0.ɵɵnextContext(); return ctx_r13.selectFilter(null); })("mouseover", function AdaptSimpleFilterComponent_ng_template_6_Template_button_mouseover_4_listener() { i0.ɵɵrestoreView(_r12); const ctx_r14 = i0.ɵɵnextContext(); return ctx_r14.onItemMouseover(0); });
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵelementStart(7, "i");
    i0.ɵɵtext(8);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n      ");
    i0.ɵɵtemplate(11, AdaptSimpleFilterComponent_ng_template_6_button_11_Template, 3, 8, "button", 8);
    i0.ɵɵtext(12, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(13, "\n  ");
} if (rf & 2) {
    const _r3 = i0.ɵɵreference(5);
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("id", ctx_r1.popupId);
    i0.ɵɵadvance(3);
    i0.ɵɵclassProp("text-active", ctx_r1.isActiveDescendant(_r3));
    i0.ɵɵproperty("item", null)("id", ctx_r1._uniqueId + "_none-option");
    i0.ɵɵattribute("data-testid", ctx_r1.testID + "_item_none");
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r1.texts.noneOptionLabel);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngForOf", ctx_r1.filterOptions);
} }
export class AdaptSimpleFilterComponent extends BaseFilterDirective {
    constructor(_translateService, _deviceDetection, _ngZone, _adaptRadarService, _elem) {
        super(_translateService, _adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptSimpleFilter);
        this._translateService = _translateService;
        this._deviceDetection = _deviceDetection;
        this._ngZone = _ngZone;
        this.activeFilterOption = null;
        this.filterOptions = [];
        /**
         * This input controls if filter button (anchor) should be disabled
         */
        this.anchorDisabled = false;
        this.activeFilterOptionChange = new EventEmitter();
        this._listKeyManagerDestroy = new Subject();
    }
    get mobileViewConfig() {
        return {
            title: this.texts.initialDropdownAnchorLabel,
            isPicker: this.isTablet
        };
    }
    ngOnInit() {
        this.isTablet = this._deviceDetection.deviceTablet();
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this._listKeyManagerDestroy.next();
    }
    get popupId() {
        return this._uniqueId + '_popup';
    }
    setDefaultTexts(translation) {
        this.defaultTexts.noneOptionLabel = translation['adapt.common.none'];
        this.defaultTexts.initialDropdownAnchorLabel = translation['adapt.simpleFilter.initialDropdownAnchorLabel'];
    }
    selectFilter(filterOption) {
        this.activeFilterOption = filterOption;
        this.activeFilterOptionChange.emit(filterOption);
    }
    isActiveFilterOption(filterOption) {
        return this.activeFilterOption && filterOption.id === this.activeFilterOption.id;
    }
    isActiveDescendant(keyManagerItem) {
        return keyManagerItem.getNativeElement().id === this.activeDescendant;
    }
    getDropdownAnchorLabel() {
        return this.activeFilterOption ? this.activeFilterOption.label : this.texts.initialDropdownAnchorLabel;
    }
    keydownHandler(event) {
        if (!this.popup.isOpen() && getEventKeyCode(event) === DOWN_ARROW) {
            event.preventDefault();
            this.popup.open();
            return;
        }
        if (this._listKeyManager) {
            this._listKeyManager.onKeydown(event);
            if (getEventKeyCode(event) === ENTER) {
                this.selectFilter(this._listKeyManager.activeItem.item);
            }
        }
    }
    keyManagerStateChange(listKeyManager) {
        this._listKeyManager = listKeyManager;
        if (this._listKeyManager) {
            this._ngZone.onStable
                .pipe(takeUntil(this._destroyed$), take(1))
                .subscribe(() => {
                const indexToActivate = this.activeFilterOption ?
                    this.filterOptions.findIndex(i => isEqual(i, this.activeFilterOption)) + 1 : 0;
                this._listKeyManager.setActiveItem(indexToActivate);
            });
            this._listKeyManager.change
                .pipe(takeUntil(this._listKeyManagerDestroy))
                .subscribe(() => {
                var _a;
                this.activeDescendant = (_a = this._listKeyManager.activeItem) === null || _a === void 0 ? void 0 : _a.getNativeElement().id;
            });
            this._listKeyManager.tabOut
                .pipe(takeUntil(this._listKeyManagerDestroy))
                .subscribe(() => {
                this.popup.close();
            });
        }
        else {
            this._listKeyManagerDestroy.next();
            this.activeDescendant = null;
        }
    }
    onItemMouseover(index) {
        var _a;
        (_a = this._listKeyManager) === null || _a === void 0 ? void 0 : _a.setActiveItem(index);
    }
}
AdaptSimpleFilterComponent.ɵfac = function AdaptSimpleFilterComponent_Factory(t) { return new (t || AdaptSimpleFilterComponent)(i0.ɵɵdirectiveInject(i1.AdaptTranslateService), i0.ɵɵdirectiveInject(i2.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i3.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptSimpleFilterComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptSimpleFilterComponent, selectors: [["adapt-simple-filter"]], viewQuery: function AdaptSimpleFilterComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popup = _t.first);
    } }, inputs: { activeFilterOption: "activeFilterOption", filterOptions: "filterOptions", anchorDisabled: "anchorDisabled" }, outputs: { activeFilterOptionChange: "activeFilterOptionChange" }, features: [i0.ɵɵInheritDefinitionFeature], decls: 9, vars: 12, consts: [["adaptDropdown", "", 3, "adaptRadarDisableEventSending", "appendToBody", "holdFocusInMenu", "restoreFocusAfterClose", "mobileView", "placement", "onOpen", "onClose"], ["filtersDropdown", "adaptDropdown"], ["type", "button", "adaptDropdownAnchor", "", 1, "btn", "btn-link", "px-0", "d-icon-left-filter", "d-icon-right-triangle_down", 3, "disabled", "click", "keydown"], ["adaptDropdownMenuTemplate", ""], ["adaptListKeyManager", "", 1, "dropdown-menu", "simple-filter__dropdown-container", 3, "id", "keyManagerStateChange"], ["adaptListKeyManager", "adaptListKeyManager"], ["type", "button", "tabindex", "-1", "adaptListKeyManagerItem", "", 1, "dropdown-item", 3, "item", "id", "click", "mouseover"], ["adaptListKeyManagerNullItem", "adaptListKeyManagerItem"], ["type", "button", "class", "dropdown-item", "tabindex", "-1", "adaptListKeyManagerItem", "", 3, "item", "id", "text-active", "active", "click", "mouseover", 4, "ngFor", "ngForOf"], ["adaptListKeyManagerItem", "adaptListKeyManagerItem"]], template: function AdaptSimpleFilterComponent_Template(rf, ctx) { if (rf & 1) {
        const _r15 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 0, 1);
        i0.ɵɵlistener("onOpen", function AdaptSimpleFilterComponent_Template_div_onOpen_0_listener() { return ctx.dropdownOpenStateChange.emit(true); })("onClose", function AdaptSimpleFilterComponent_Template_div_onClose_0_listener() { return ctx.dropdownOpenStateChange.emit(false); });
        i0.ɵɵtext(2, "\n  ");
        i0.ɵɵelementStart(3, "button", 2);
        i0.ɵɵlistener("click", function AdaptSimpleFilterComponent_Template_button_click_3_listener($event) { i0.ɵɵrestoreView(_r15); const _r0 = i0.ɵɵreference(1); return _r0.toggle($event); })("keydown", function AdaptSimpleFilterComponent_Template_button_keydown_3_listener($event) { return ctx.keydownHandler($event); });
        i0.ɵɵtext(4);
        i0.ɵɵelementEnd();
        i0.ɵɵtext(5, "\n  ");
        i0.ɵɵtemplate(6, AdaptSimpleFilterComponent_ng_template_6_Template, 14, 8, "ng-template", 3);
        i0.ɵɵtext(7, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(8, "\n");
    } if (rf & 2) {
        const _r0 = i0.ɵɵreference(1);
        i0.ɵɵproperty("adaptRadarDisableEventSending", true)("appendToBody", ctx.appendDropdownToBody)("holdFocusInMenu", ctx.appendDropdownToBody)("restoreFocusAfterClose", true)("mobileView", ctx.mobileViewConfig)("placement", ctx.dropdownPlacement);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("disabled", ctx.anchorDisabled);
        i0.ɵɵattribute("data-testid", ctx.testID + "_menu")("aria-controls", _r0.isOpen() ? ctx.popupId : undefined)("aria-expanded", _r0.isOpen())("aria-activedescendant", ctx.activeDescendant);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1("\n    ", ctx.getDropdownAnchorLabel(), "\n  ");
    } }, directives: [i4.AdaptDropdownDirective, i4.AdaptDropdownAnchorDirective, i4.AdaptDropdownMenuTemplateDirective, i5.AdaptListKeyManagerDirective, i6.AdaptListKeyManagerItemDirective, i7.NgForOf], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptSimpleFilterComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-simple-filter',
                templateUrl: './simple-filter.component.html',
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: i1.AdaptTranslateService }, { type: i2.AdaptDeviceDetectionService }, { type: i0.NgZone }, { type: i3.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { activeFilterOption: [{
            type: Input
        }], filterOptions: [{
            type: Input
        }], anchorDisabled: [{
            type: Input
        }], activeFilterOptionChange: [{
            type: Output
        }], popup: [{
            type: ViewChild,
            args: ['filtersDropdown', { static: true }]
        }] }); })();
//# sourceMappingURL=simple-filter.component.js.map