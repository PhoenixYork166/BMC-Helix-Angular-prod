import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { regExpEscape, toString } from '../common/utilities';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
function AdaptHighlightDirective_ng_template_1_span_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const part_r1 = i0.ɵɵnextContext().$implicit;
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵclassMap(ctx_r3.highlightClass);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(part_r1);
} }
function AdaptHighlightDirective_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, AdaptHighlightDirective_ng_template_1_span_0_Template, 2, 4, "span", 1);
    i0.ɵɵtext(1);
} if (rf & 2) {
    const part_r1 = ctx.$implicit;
    const isOdd_r2 = ctx.odd;
    i0.ɵɵproperty("ngIf", isOdd_r2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(isOdd_r2 ? "" : part_r1);
} }
// eslint-disable-next-line @angular-eslint/component-class-suffix
export class AdaptHighlightDirective {
    constructor() {
        this.highlightClass = 'mark px-0';
        this.wordMatch = new EventEmitter();
    }
    ngOnChanges() {
        const resultStr = toString(this.result);
        const resultLC = resultStr.toLowerCase();
        const termLC = toString(this.term).toLowerCase();
        let currentIdx = 0;
        if (termLC.length > 0) {
            this._detectWordMatch(resultLC, termLC); // highlighting a complete word
            this.parts = resultLC.split(new RegExp(`(${regExpEscape(termLC)})`)).map((part) => {
                const originalPart = resultStr.substr(currentIdx, part.length);
                currentIdx += part.length;
                return originalPart;
            });
        }
        else {
            this.parts = [resultStr];
        }
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    _detectWordMatch(str, query) {
        str = str.trim().replace(/[ ]{2,}/gi, '').split(' ');
        this.wordMatch.emit(str.some(item => item === query));
    }
}
AdaptHighlightDirective.ɵfac = function AdaptHighlightDirective_Factory(t) { return new (t || AdaptHighlightDirective)(); };
AdaptHighlightDirective.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptHighlightDirective, selectors: [["adapt-highlight"], ["ngb-highlight"]], inputs: { highlightClass: "highlightClass", result: "result", term: "term" }, outputs: { wordMatch: "wordMatch" }, features: [i0.ɵɵNgOnChangesFeature], decls: 3, vars: 1, consts: [["ngFor", "", 3, "ngForOf"], [3, "class", 4, "ngIf"]], template: function AdaptHighlightDirective_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtext(0, "\n      ");
        i0.ɵɵtemplate(1, AdaptHighlightDirective_ng_template_1_Template, 2, 2, "ng-template", 0);
        i0.ɵɵtext(2, "\n  ");
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx.parts);
    } }, directives: [i1.NgForOf, i1.NgIf], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptHighlightDirective, [{
        type: Component,
        args: [{
                selector: 'adapt-highlight, ngb-highlight',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
      <ng-template ngFor [ngForOf]="parts" let-part
                   let-isOdd="odd"><span *ngIf="isOdd" class="{{highlightClass}}">{{part}}</span>{{isOdd ? '' : part}}</ng-template>
  `
            }]
    }], null, { highlightClass: [{
            type: Input
        }], result: [{
            type: Input
        }], term: [{
            type: Input
        }], wordMatch: [{
            type: Output
        }] }); })();
//# sourceMappingURL=highlight.js.map