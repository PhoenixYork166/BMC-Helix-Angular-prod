{"version":3,"file":"lazy-load-anchor.directive.js","sourceRoot":"","sources":["../../../../../../libs/adapt-angular/src/common/lazy-load/lazy-load-anchor.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,UAAU,EAAE,KAAK,EAAU,MAAM,EAAE,YAAY,EAAY,MAAM,eAAe,CAAC;;AAWpG,MAAM,OAAO,4BAA4B;IAmBvC,YAAoB,KAAiB;QAAjB,UAAK,GAAL,KAAK,CAAY;QAjBrC,yGAAyG;QAChG,0BAAqB,GAAmB,IAAI,CAAC;QAC7C,uBAAkB,GAAsB,CAAC,CAAC;QAC1C,gCAA2B,GAAW,iBAAiB,CAAC;QAE9C,aAAQ,GAAuB,IAAI,YAAY,EAAQ,CAAC;IAa3E,CAAC;IAXD,IAAI,eAAe;QACjB,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,qBAAqB;YAChC,UAAU,EAAE,IAAI,CAAC,kBAAkB;YACnC,UAAU,EAAE,IAAI,CAAC,2BAA2B;SAC7C,CAAC;IACJ,CAAC;IAOD,QAAQ;QACN,IAAI,CAAC,SAAS,GAAG,IAAI,oBAAoB,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,EAAE;YACpD,IAAI,KAAK,CAAC,cAAc,EAAE;gBACxB,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;aACtB;QACH,CAAC,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAEzB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;IACnD,CAAC;IAED,WAAW;QACT,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;IAC9B,CAAC;;wGAlCU,4BAA4B;+EAA5B,4BAA4B;uFAA5B,4BAA4B;cAHxC,SAAS;eAAC;gBACT,QAAQ,EAAE,uBAAuB;aAClC;6DAIU,qBAAqB;kBAA7B,KAAK;YACG,kBAAkB;kBAA1B,KAAK;YACG,2BAA2B;kBAAnC,KAAK;YAEa,QAAQ;kBAA1B,MAAM","sourcesContent":["import {Directive, ElementRef, Input, OnInit, Output, EventEmitter, OnDestroy} from '@angular/core';\n\nexport interface IntersectionObserverOptions {\n  root?: Element | null;\n  thresholds?: number | number[];\n  rootMargin?: string;\n}\n\n@Directive({\n  selector: '[adaptLazyLoadAnchor]'\n})\nexport class AdaptLazyLoadAnchorDirective implements OnInit, OnDestroy {\n\n  // Default values set based on https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\n  @Input() lazyLoadRootContainer: Element | null = null;\n  @Input() lazyLoadThresholds: number | number[] = 0;\n  @Input() lazyLoadRootContainerMargin: string = '0px 0px 0px 0px';\n\n  @Output() readonly lazyLoad: EventEmitter<void> = new EventEmitter<void>();\n\n  get lazyLoadOptions(): IntersectionObserverOptions {\n    return {\n      root: this.lazyLoadRootContainer,\n      thresholds: this.lazyLoadThresholds,\n      rootMargin: this.lazyLoadRootContainerMargin\n    };\n  }\n\n  private _observer: IntersectionObserver;\n\n  constructor(private _elem: ElementRef) {\n  }\n\n  ngOnInit(): void {\n    this._observer = new IntersectionObserver(([entry]) => {\n      if (entry.isIntersecting) {\n        this.lazyLoad.emit();\n      }\n    }, this.lazyLoadOptions);\n\n    this._observer.observe(this._elem.nativeElement);\n  }\n\n  ngOnDestroy(): void {\n    this._observer.disconnect();\n  }\n}\n"]}