import { query, transition, trigger, useAnimation } from '@angular/animations';
import { moveItemInArray } from '@angular/cdk/drag-drop';
import { ChangeDetectorRef, Component, ElementRef, HostBinding, Input, NgZone, Optional, Self, TemplateRef, ViewChild } from '@angular/core';
import { NgControl } from '@angular/forms';
import { merge, toString, without } from 'lodash-es';
import { noop } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import { ANIMATION_NAME } from '../../common/animation';
import { AdaptTranslateService } from '../../common/i18n/index';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularCustomEventType, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { AdaptRxFeedbackComponent, AdaptRxFormControlDirective } from '../form-control/index';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../../common/i18n/index";
import * as i3 from "../../common/radar/adapt-radar";
const _c0 = ["adaptRxFeedbackRef"];
function AdaptRxListSelectorComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0);
} if (rf & 2) {
    const listItem_r6 = ctx.$implicit;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵtextInterpolate1("\n  ", ctx_r1.listItemFormatter(listItem_r6), "\n");
} }
function AdaptRxListSelectorComponent_ng_container_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "adapt-empty-state", 10);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementStart(4, "div", 11);
    i0.ɵɵtext(5, "\n        ");
    i0.ɵɵprojection(6);
    i0.ɵɵtext(7, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n  ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("type", "objects")("adaptRadarDisableEventSending", true)("label", ctx_r2.listSelectorTexts.notFound);
    i0.ɵɵattribute("data-testid", ctx_r2.testID + "_empty");
} }
function AdaptRxListSelectorComponent_ng_container_17_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 15);
} }
function AdaptRxListSelectorComponent_ng_container_17_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "div", 12);
    i0.ɵɵlistener("cdkDragMoved", function AdaptRxListSelectorComponent_ng_container_17_Template_div_cdkDragMoved_2_listener() { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); return ctx_r10.move(); });
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵtemplate(4, AdaptRxListSelectorComponent_ng_container_17_div_4_Template, 1, 0, "div", 13);
    i0.ɵɵtext(5, "\n        ");
    i0.ɵɵelementStart(6, "adapt-rx-list-item", 14);
    i0.ɵɵlistener("onItemDelete", function AdaptRxListSelectorComponent_ng_container_17_Template_adapt_rx_list_item_onItemDelete_6_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r12 = i0.ɵɵnextContext(); return ctx_r12.deselectItem($event); })("onKeyUp", function AdaptRxListSelectorComponent_ng_container_17_Template_adapt_rx_list_item_onKeyUp_6_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r11); const i_r8 = restoredCtx.index; const ctx_r13 = i0.ɵɵnextContext(); return ctx_r13.onUp($event, i_r8); })("onKeyDown", function AdaptRxListSelectorComponent_ng_container_17_Template_adapt_rx_list_item_onKeyDown_6_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r11); const i_r8 = restoredCtx.index; const ctx_r14 = i0.ɵɵnextContext(); return ctx_r14.onDown($event, i_r8); });
    i0.ɵɵtext(7, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n    ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r7 = ctx.$implicit;
    const i_r8 = ctx.index;
    const ctx_r4 = i0.ɵɵnextContext();
    const _r0 = i0.ɵɵreference(1);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("cdkDragDisabled", ctx_r4.disabled);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("item", item_r7)("itemFormatter", ctx_r4.listItemFormatter)("itemContentTemplate", ctx_r4.listItemContentTemplate || _r0)("id", ctx_r4.id + "_item_" + i_r8)("testID", ctx_r4.testID + "_item-" + i_r8)("disabled", ctx_r4.disabledOptionResolver(item_r7) || ctx_r4.disabled)("readonly", ctx_r4.readonly)("texts", ctx_r4.listSelectorTexts)("hideControls", ctx_r4.hideControls)("hideEdit", true);
} }
const _c1 = [[["", 8, "empty-text"]]];
const _c2 = [".empty-text"];
export class AdaptRxListSelectorComponent extends AdaptRxFormControlDirective {
    constructor(ngControl, _changeDetectorRef, ts, _ngZone, _adaptRadarService, _elem) {
        super(ngControl, ts, _adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptRxListSelector, _changeDetectorRef);
        this.ngControl = ngControl;
        this.ts = ts;
        this._ngZone = _ngZone;
        this.controlName = 'list-selector';
        this.analyticsComponentName = AdaptRadarAngularCustomEventName;
        this.selectedListItems = [];
        this.hideControls = false;
        this.searchFocus = false;
        this.externalId = this.id;
        this.defaultHostClass = true;
        /**
         * Options list. See <a href="#/components/building-blocks/rx-select/api" target="_blank">rx-select API</a> for more details.
         * @docs-default
         */
        this.options = [];
        /**
         * Formatter that transforms the option into a string. See <a href="#/components/building-blocks/rx-select/api" target="_blank">rx-select API</a> for more details.
         * @docs-default option => option['name']
         */
        this.optionFormatter = toString;
        /**
         * Function resolves disabled option. See <a href="#/components/building-blocks/rx-select/api" target="_blank">rx-select API</a> for more details.
         * @docs-default option => option['disabled']
         */
        this.disabledOptionResolver = this._defaultDisabledOptionResolver.bind(this);
        /**
         * Formatter that transforms the option list into a title string. See details of method implementation below.
         * @docs-default option => option['title']
         */
        this.titleFormatter = this._defaultTitleFormatterResolver.bind(this);
        /**
         * Formatter that transforms the selected option into a string to be visible in the list.
         * @docs-default option => option['name']
         */
        this.listItemFormatter = toString;
        /**
         * Function to process onSelectionChange emitted value from RxSelect. See <a href="#/components/building-blocks/rx-select/api" target="_blank">rx-select API</a> for more details.
         * @docs-default
         */
        this.resolveSelectionChange = noop;
        /**
         * Enable dragging for the list.
         * @docs-default true
         */
        this.enableDnD = true;
        this._defaultTexts = { listSelectorTexts: {}, selectTexts: {} };
        this._texts = { listSelectorTexts: {}, selectTexts: {} };
        this._selectedListItemsOnInit = [];
        this.setDefaultTexts(ts.getCurrentLanguage());
    }
    /**
     * Configurable text for component. See details of RxListSelectorTextsModel interface below.
     * @docs-default
     */
    set texts(value) {
        this._texts = merge(this._defaultTexts, value);
    }
    get listSelectorTexts() {
        return Object.assign({}, this._texts.listSelectorTexts);
    }
    get selectTexts() {
        return Object.assign({}, this._texts.selectTexts);
    }
    /**
     * Check if the control has UI error state
     */
    get hasDangerState() {
        return !this.readonly && this.adaptRxFeedbackRef.hasUIErrorState;
    }
    ngOnInit() {
        super.ngOnInit();
        this._selectedListItemsOnInit = [...this.selectedListItems];
        // Subscribe on first model change to get model value
        this.ngControl.valueChanges.pipe(takeUntil(this.destroy$), take(1)).subscribe(value => {
            if (value === null || value === void 0 ? void 0 : value.length) {
                this._selectedListItemsOnInit = [...value];
            }
        });
    }
    setDefaultTexts(translation) {
        this._defaultTexts.listSelectorTexts.requiredText = translation['adapt.common.required'];
        this._defaultTexts.listSelectorTexts.notFound = translation['adapt.listSelector.notFound'];
        this._defaultTexts.listSelectorTexts.delete = translation['adapt.listSelector.remove'];
        this.texts = this._defaultTexts;
    }
    writeValue(value) {
        this.selectedListItems = Array.isArray(value) ? value : [];
    }
    deselectItem(item) {
        this.selectedListItems = without(this.selectedListItems, item);
        this._updateControlModel();
    }
    updateListBuilder() {
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxListSelector, {
            GroupName: this.adaptRadarGroupName,
            EventType: AdaptRadarAngularCustomEventType.ValueChanged,
            Label: this.label,
            Required: this.required,
            ReadOnly: this.readonly,
            Disabled: this.disabled,
            DefaultNumberOfSelectedItems: this._selectedListItemsOnInit.length,
            TotalSelected: this.selectedListItems.length,
            TotalOptions: this.options.length
        });
        this._onChange(this.selectedListItems);
    }
    dropdownClosed(value) {
        this._onTouched();
        if (value) {
            this.searchFocus = true;
            return;
        }
        this._onChange(this.selectedListItems);
    }
    drop(event) {
        moveItemInArray(this.selectedListItems, event.previousIndex, event.currentIndex);
        this.hideControls = false;
        this._updateControlModel();
    }
    onUp(e, prevIndex) {
        if (this.nonInteractive) {
            return;
        }
        e.preventDefault(); // we do not want to scroll the page
        moveItemInArray(this.selectedListItems, prevIndex, (prevIndex === 0) ? 0 : --prevIndex);
        this._ngZone.onStable
            .pipe(takeUntil(this.destroy$), take(1))
            .subscribe(() => {
            e.target.focus();
        });
        this._updateControlModel();
    }
    onDown(e, prevIndex) {
        if (this.nonInteractive) {
            return;
        }
        e.preventDefault();
        let currentIndex = this.selectedListItems.length;
        if (prevIndex !== this.selectedListItems.length) {
            currentIndex = prevIndex++;
        }
        moveItemInArray(this.selectedListItems, prevIndex, currentIndex);
        this._updateControlModel();
    }
    move() {
        this.hideControls = true;
    }
    /**
     * Implementation from the base class
     */
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    _focusNativeElement() {
    }
    _defaultDisabledOptionResolver(option) {
        return option.disabled;
    }
    _defaultTitleFormatterResolver() {
        if (!this.selectedListItems.length) {
            return this.ts.getCurrentLanguage()['adapt.select.defaultTitle'];
        }
        if (this.selectedListItems.length === 1) {
            return this.selectedListItems.map((option) => this.optionFormatter(option)).join(', ');
        }
        return `${this.selectedListItems.length} ${this.ts.getCurrentLanguage()['adapt.select.checkedPlural']}`;
    }
    _updateControlModel() {
        this._onTouched();
        this._onChange(this.selectedListItems);
    }
}
AdaptRxListSelectorComponent.ɵfac = function AdaptRxListSelectorComponent_Factory(t) { return new (t || AdaptRxListSelectorComponent)(i0.ɵɵdirectiveInject(i1.NgControl, 10), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.AdaptTranslateService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i3.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptRxListSelectorComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptRxListSelectorComponent, selectors: [["adapt-rx-list-selector"]], viewQuery: function AdaptRxListSelectorComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.adaptRxFeedbackRef = _t.first);
    } }, hostVars: 3, hostBindings: function AdaptRxListSelectorComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("id", ctx.externalId);
        i0.ɵɵclassProp("rx-list-selector", ctx.defaultHostClass);
    } }, inputs: { options: "options", optionFormatter: "optionFormatter", optionContentTemplate: "optionContentTemplate", disabledOptionResolver: "disabledOptionResolver", titleFormatter: "titleFormatter", texts: "texts", listItemFormatter: "listItemFormatter", listItemContentTemplate: "listItemContentTemplate", resolveSelectionChange: "resolveSelectionChange", maxHeight: "maxHeight", enableDnD: "enableDnD" }, features: [i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 25, vars: 42, consts: [["listItemContentDefaultRef", ""], [3, "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"], [1, "adapt-list"], [3, "ngModel", "adaptRadarDisableEventSending", "autofocus", "options", "optionFormatter", "optionContentTemplate", "disabledOptionResolver", "titleFormatter", "ariaInvalid", "ariaErrorMessage", "texts", "disabled", "readonly", "multiple", "selectAllButton", "deselectAllButton", "enableFilter", "testID", "ngModelChange", "onSelectionChange", "onPopupOpenChange"], [4, "ngIf"], ["cdkDropList", "", 1, "adapt-list-container", 3, "cdkDropListDisabled", "cdkDropListDropped"], ["list", ""], [4, "ngFor", "ngForOf"], [3, "ariaErrorMessage", "errors", "warningMessage", "controlTouched", "messageAppeared"], ["adaptRxFeedbackRef", ""], [3, "type", "adaptRadarDisableEventSending", "label"], [1, "empty-info"], ["cdkDrag", "", 1, "adapt-list-builder__list-wrp", 3, "cdkDragDisabled", "cdkDragMoved"], ["class", "adapt-list__item-placeholder", 4, "cdkDragPlaceholder"], [3, "item", "itemFormatter", "itemContentTemplate", "id", "testID", "disabled", "readonly", "texts", "hideControls", "hideEdit", "onItemDelete", "onKeyUp", "onKeyDown"], [1, "adapt-list__item-placeholder"]], template: function AdaptRxListSelectorComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef(_c1);
        i0.ɵɵtemplate(0, AdaptRxListSelectorComponent_ng_template_0_Template, 1, 1, "ng-template", null, 0, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(2, "\n\n");
        i0.ɵɵtext(3, "\n");
        i0.ɵɵelement(4, "adapt-rx-control-label", 1);
        i0.ɵɵtext(5, "\n");
        i0.ɵɵtext(6, "\n\n");
        i0.ɵɵelementStart(7, "div", 2);
        i0.ɵɵtext(8, "\n\n  ");
        i0.ɵɵelementStart(9, "adapt-rx-select", 3);
        i0.ɵɵlistener("ngModelChange", function AdaptRxListSelectorComponent_Template_adapt_rx_select_ngModelChange_9_listener($event) { return ctx.selectedListItems = $event; })("onSelectionChange", function AdaptRxListSelectorComponent_Template_adapt_rx_select_onSelectionChange_9_listener($event) { return ctx.resolveSelectionChange($event); })("ngModelChange", function AdaptRxListSelectorComponent_Template_adapt_rx_select_ngModelChange_9_listener() { return ctx.updateListBuilder(); })("onPopupOpenChange", function AdaptRxListSelectorComponent_Template_adapt_rx_select_onPopupOpenChange_9_listener($event) { return ctx.dropdownClosed($event); });
        i0.ɵɵtext(10, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(11, "\n\n  ");
        i0.ɵɵtemplate(12, AdaptRxListSelectorComponent_ng_container_12_Template, 10, 4, "ng-container", 4);
        i0.ɵɵtext(13, "\n\n  ");
        i0.ɵɵelementStart(14, "div", 5, 6);
        i0.ɵɵlistener("cdkDropListDropped", function AdaptRxListSelectorComponent_Template_div_cdkDropListDropped_14_listener($event) { return ctx.drop($event); });
        i0.ɵɵtext(16, "\n    ");
        i0.ɵɵtemplate(17, AdaptRxListSelectorComponent_ng_container_17_Template, 10, 11, "ng-container", 7);
        i0.ɵɵtext(18, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(19, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(20, "\n\n");
        i0.ɵɵtext(21, "\n");
        i0.ɵɵelementStart(22, "adapt-rx-feedback", 8, 9);
        i0.ɵɵlistener("messageAppeared", function AdaptRxListSelectorComponent_Template_adapt_rx_feedback_messageAppeared_22_listener($event) { return ctx.handleMessageAppeared($event, ctx.analyticsComponentName.AdaptRxListSelector); });
        i0.ɵɵelementEnd();
        i0.ɵɵtext(24, "\n");
    } if (rf & 2) {
        i0.ɵɵadvance(4);
        i0.ɵɵclassProp("has-danger", ctx.hasDangerState)("has-warning", ctx.warningMessage);
        i0.ɵɵproperty("label", ctx.label)("subLabel", ctx.subLabel)("requiredLabel", ctx.listSelectorTexts.requiredText)("showRequiredLabel", ctx.required)("tooltip", ctx.tooltip)("testID", ctx.testID);
        i0.ɵɵadvance(3);
        i0.ɵɵclassProp("has-danger", ctx.hasDangerState)("has-warning", ctx.warningMessage);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngModel", ctx.selectedListItems)("adaptRadarDisableEventSending", true)("autofocus", ctx.searchFocus)("options", ctx.options)("optionFormatter", ctx.optionFormatter)("optionContentTemplate", ctx.optionContentTemplate)("disabledOptionResolver", ctx.disabledOptionResolver)("titleFormatter", ctx.titleFormatter)("ariaInvalid", ctx.hasDangerState)("ariaErrorMessage", ctx.ariaErrorMessage)("texts", ctx.selectTexts)("disabled", ctx.disabled)("readonly", ctx.readonly)("multiple", true)("selectAllButton", true)("deselectAllButton", true)("enableFilter", true)("testID", ctx.testID + "_select");
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", !ctx.selectedListItems.length);
        i0.ɵɵadvance(2);
        i0.ɵɵstyleProp("max-height", ctx.maxHeight);
        i0.ɵɵproperty("cdkDropListDisabled", ctx.disabled || ctx.readonly || !ctx.enableDnD)("@listAnimation", ctx.selectedListItems.length);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", ctx.selectedListItems);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ariaErrorMessage", ctx.ariaErrorMessage)("errors", ctx.ngControl.errors)("warningMessage", ctx.warningMessage)("controlTouched", ctx.ngControl.touched);
    } }, encapsulation: 2, data: { animation: [
            trigger('listAnimation', [
                transition(':enter, * => 0', []),
                transition(':decrement', [
                    query('.adapt-list-builder__list-wrp:leave', [
                        useAnimation(ANIMATION_NAME.itemOut)
                    ], { optional: true })
                ]),
                transition(':increment', [
                    query('.adapt-list-builder__list-wrp:enter', [
                        useAnimation(ANIMATION_NAME.itemIn)
                    ], { optional: true })
                ]),
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxListSelectorComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-rx-list-selector',
                templateUrl: './adapt-rx-list-selector.component.html',
                animations: [
                    trigger('listAnimation', [
                        transition(':enter, * => 0', []),
                        transition(':decrement', [
                            query('.adapt-list-builder__list-wrp:leave', [
                                useAnimation(ANIMATION_NAME.itemOut)
                            ], { optional: true })
                        ]),
                        transition(':increment', [
                            query('.adapt-list-builder__list-wrp:enter', [
                                useAnimation(ANIMATION_NAME.itemIn)
                            ], { optional: true })
                        ]),
                    ])
                ],
            }]
    }], function () { return [{ type: i1.NgControl, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }, { type: i0.ChangeDetectorRef }, { type: i2.AdaptTranslateService }, { type: i0.NgZone }, { type: i3.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { externalId: [{
            type: HostBinding,
            args: ['attr.id']
        }], defaultHostClass: [{
            type: HostBinding,
            args: ['class.rx-list-selector']
        }], adaptRxFeedbackRef: [{
            type: ViewChild,
            args: ['adaptRxFeedbackRef', { static: true }]
        }], options: [{
            type: Input
        }], optionFormatter: [{
            type: Input
        }], optionContentTemplate: [{
            type: Input
        }], disabledOptionResolver: [{
            type: Input
        }], titleFormatter: [{
            type: Input
        }], texts: [{
            type: Input
        }], listItemFormatter: [{
            type: Input
        }], listItemContentTemplate: [{
            type: Input
        }], resolveSelectionChange: [{
            type: Input
        }], maxHeight: [{
            type: Input
        }], enableDnD: [{
            type: Input
        }] }); })();
//# sourceMappingURL=adapt-rx-list-selector.component.js.map