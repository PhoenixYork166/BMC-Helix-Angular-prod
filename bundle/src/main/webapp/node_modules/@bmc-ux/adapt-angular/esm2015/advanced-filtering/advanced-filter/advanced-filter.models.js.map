{"version":3,"file":"advanced-filter.models.js","sourceRoot":"","sources":["../../../../../../libs/adapt-angular/src/advanced-filtering/advanced-filter/advanced-filter.models.ts"],"names":[],"mappings":"AAUA,+BAA+B;AAC/B,MAAM,CAAN,IAAY,4BASX;AATD,WAAY,4BAA4B;IACtC,mDAAmB,CAAA;IACnB,6CAAa,CAAA;IACb,6CAAa,CAAA;IACb,qDAAqB,CAAA;IACrB,iDAAiB,CAAA;IACjB,uDAAuB,CAAA;IACvB,iDAAiB,CAAA;IACjB,iDAAiB,CAAA;AACnB,CAAC,EATW,4BAA4B,KAA5B,4BAA4B,QASvC;AAID,MAAM,CAAC,MAAM,yBAAyB,GAAG,OAAO,CAAC;AA4CjD,MAAM,CAAN,IAAY,+BAKX;AALD,WAAY,+BAA+B;IACzC,yGAAkB,CAAA;IAClB,yGAAkB,CAAA;IAClB,yGAAkB,CAAA;IAClB,2HAA2B,CAAA;AAC7B,CAAC,EALW,+BAA+B,KAA/B,+BAA+B,QAK1C","sourcesContent":["import {TemplateRef} from '@angular/core';\nimport BigNumber from 'bignumber.js';\n\nimport {ValidationError} from '../../common/form.component';\nimport {ValueOrFunc1, KeyValueObject, DefaultPreventable} from '../../common/common.models';\nimport {TagModel, TagType, AdaptMetatagComponent, RemoveTagEvent} from '../../metatag/index';\nimport {RxSelectOption, SelectTexts, RxDatetimeStruct, RxDatetimeTexts} from '../../rx/index';\n\nimport {SimpleFilterOption} from '../simple-filter/index';\n\n// TODO: maybe capitalize names\nexport enum AdvancedFilterOptionDataType {\n  boolean = 'boolean',\n  time = 'time',\n  date = 'date',\n  datetime = 'datetime',\n  string = 'string',\n  selection = 'selection',\n  number = 'number',\n  custom = 'custom',\n}\n\nexport type NumberOrBigNumber = number | BigNumber;\n\nexport const booleanDataTypeBlankValue = 'blank';\n\nexport type AdvancedFilterBooleanDataType = boolean | 'blank';\nexport type AdvancedFilterTimeDataType = [RxDatetimeStruct, RxDatetimeStruct];\nexport type AdvancedFilterDateDataType = [RxDatetimeStruct, RxDatetimeStruct];\nexport type AdvancedFilterDatetimeDataType = [RxDatetimeStruct, RxDatetimeStruct];\nexport type AdvancedFilterStringDataType = string[];\nexport type AdvancedFilterSelectionDataType = (number | string)[];\nexport type AdvancedFilterNumberDataType = [NumberOrBigNumber, NumberOrBigNumber];\n\nexport type AdvancedFilterMultipleDataOption = AdvancedFilterBooleanDataType | AdvancedFilterSelectionDataType;\n\n// TODO: Refactor this if possible\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nexport interface FilterOptionTemplateParams<TValue = any> {\n  filterOption: AdvancedFilterOption;\n  value: TValue;\n\n  /** has type AdaptFilterControlsComponent */\n  filterControlsComponent: KeyValueObject;\n}\n\n// TODO: Refactor this if possible\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nexport interface ParsedTagFieldExpressionResult<TValue = any> {\n  value: TValue;\n}\n\n// TODO: Refactor this if possible\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nexport interface SelectedAdvancedFilter<TValue = any> {\n  filterOptionId: string;\n  value: TValue;\n}\n\n// TODO: Refactor this if possible\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nexport interface SavedAdvancedFilter<TValue = any> {\n  id: string;\n  name: string;\n  filters: SelectedAdvancedFilter<TValue>[];\n  isCreatedByOtherUsers?: boolean;\n}\n\nexport enum ActiveSavedFilterSelectionCause {\n  SelectedByUser = 1,\n  OnFilterChange = 2,\n  OnFiltersClear = 3,\n  OnSelectedFiltersSetter = 4,\n}\n\nexport interface BeforeActiveSavedFilterChangeEvent {\n  previousActiveSavedFilter: SavedAdvancedFilter;\n  savedFilterToSelect: SavedAdvancedFilter;\n  preventFiltersUpdating: () => void;\n  preventActiveFilterUpdating: () => void;\n  selectionCause: ActiveSavedFilterSelectionCause;\n}\n\n// TODO: Refactor this if possible\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nexport interface AdvancedFilterSelectionChangeEvent<TValue = any> {\n  filterOptionId: string;\n  oldValue: TValue;\n  newValue: TValue;\n}\n\n\n// TODO: Refactor this if possible\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nexport interface CreateAdvancedFilterEvent<TValue = any> {\n  filters: SelectedAdvancedFilter<TValue>[];\n  name: string;\n  originalName: string;\n}\n\n// TODO: maybe replace with the SelectedAdvancedFilter interface\n// TODO: Refactor this if possible\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nexport interface AdvancedFilterTagModel<TValue = any> {\n  filterOption: AdvancedFilterOption<TValue>;\n  value: TValue;\n  validationErrors?: ValidationError[];\n}\n\nexport type AdvancedFilterTag = TagModel<AdvancedFilterTagModel>;\n\nexport interface UpdateFiltersExpressionModelOptions {\n  updateAndEmitSelectedFiltersChange: boolean;\n  deselectActiveSavedFilter: ActiveSavedFilterSelectionCause;\n  clearMetatagInputValue: boolean;\n  updateEditingFilterTags: boolean;\n  applyFiltersByUserAction: boolean;\n}\n\n// TODO: Refactor this if possible\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nexport interface EditingSavedFilterData<TValue = any> {\n  originalSavedFilter: SavedAdvancedFilter<TValue>;\n  filterName: string;\n  filtersExpressionsTags: AdvancedFilterTag[];\n}\n\n// TODO: Refactor this if possible\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nexport interface UpdateSavedFilterEvent<TValue = any> {\n  oldSavedFilter: SavedAdvancedFilter<TValue>;\n  newSavedFilter: SavedAdvancedFilter<TValue>;\n  originalNewFilterName: string;\n  customFilterExpressionsTags?: AdvancedFilterTag[];\n}\n\nexport interface AdvancedFilterTagsChangedEvent {\n  filterExpressionTags: AdvancedFilterTag[];\n}\n\nexport interface SaveNewFilterClickEvent extends DefaultPreventable {\n  domEvent: MouseEvent;\n}\n\nexport interface EditSavedFilterClickEvent extends DefaultPreventable {\n  domEvent: MouseEvent;\n  savedFilter: SavedAdvancedFilter;\n  savedFilterListItem: HTMLLIElement;\n  initSavedFilterEditing: (getCustomExpressionTagFieldEditModel?: (tags: AdvancedFilterTag[]) => AdvancedFilterTag[]) => void;\n}\n\nexport interface MarkDefaultSavedFilterClickEvent extends DefaultPreventable {\n  domEvent: MouseEvent;\n  defaultSavedFilterId: string;\n}\n\n// Because 'RemoveTagEvent' interface has 'preventDefault' property\n// that is redundant for event from 'outside' tags just create own interface\nexport type AdvancedFilterRemoveTagFromOutsideEvent = Omit<RemoveTagEvent, 'preventDefault'>;\n\nexport interface AdvancedFilterRemoveTagEvent {\n  tagFieldEvent: RemoveTagEvent | AdvancedFilterRemoveTagFromOutsideEvent;\n  tag: AdvancedFilterTag;\n  index: number;\n}\n\nexport interface EditFilterAnimationParams {\n  titleTranslateXPixels: number;\n  titleTranslateYPixels: number;\n\n  // workaround: params for transition of saved filter list item\n  lastEditingSavedFilter: EditingSavedFilterData;\n}\n\n// TODO: Refactor this if possible\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nexport interface AdvancedFilterOptionConfig<TValue = any> {\n  getTagText?: (value: TValue, filterOption: AdvancedFilterOption<TValue>, formattedValueForTag?: string) => string;\n  formatValueForTag?: (value: TValue, filterOption: AdvancedFilterOption<TValue>) => string;\n  needRemoveTagValue?: (value: TValue, filterOption: AdvancedFilterOption<TValue>) => boolean;\n  validateValue?: (value: TValue, filterOption: AdvancedFilterOption<TValue>) => ValidationError[];\n  getExpressionFieldTips?: (filterOption: AdvancedFilterOption<TValue>, searchTerm: string) =>\n    TagModel<AdvancedFilterExpressionTip<TValue>>[];\n  updateFilterValue?: (newValue: TValue, oldValue: TValue, filterOption: AdvancedFilterOption<TValue>) => TValue;\n  parseTagFieldExpression?: (filterOption: AdvancedFilterOption<TValue>, searchTerm: string) =>\n    ParsedTagFieldExpressionResult<TValue> | null;\n}\n\nexport interface AdvancedFilterSelectionTypeData {\n  selectOptions?: RxSelectOption[];\n  selectTexts?: SelectTexts;\n}\n\nexport interface AdvancedFilterBooleanTypeParams {\n  hasBlankValue?: boolean;\n}\n\nexport interface AdvancedFilterNumberTypeParams {\n  minValue?: NumberOrBigNumber;\n  maxValue?: NumberOrBigNumber;\n}\n\n// TODO: Refactor this if possible\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nexport interface AdvancedFilterStringTypeParams<TTagData = any> {\n  adjustModelForTagField?: (value: AdvancedFilterStringDataType,\n                            filterOption: AdvancedFilterOption<AdvancedFilterStringDataType>) => TagType<TTagData>[];\n  adjustTagFieldModelForFilter?: (value: TagType<TTagData>[],\n                                  filterOption: AdvancedFilterOption<AdvancedFilterStringDataType>,\n                                  tagField: AdaptMetatagComponent) => AdvancedFilterStringDataType;\n}\n\nexport interface AdvancedFilterControlsData {\n  option: AdvancedFilterOption;\n  tag: AdvancedFilterTag | null;\n}\n\n// TODO: Refactor this if possible\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nexport interface AdvancedFilterOption<TValue = any, TData = any> extends SimpleFilterOption<TData> {\n  dataType: AdvancedFilterOptionDataType;\n  customConfig?: AdvancedFilterOptionConfig<TValue>;\n  inputsTemplate?: TemplateRef<FilterOptionTemplateParams<TValue>>;\n  isHidden?: ValueOrFunc1<boolean>;\n}\n\nexport interface NumberTypeValidationErrorsTexts {\n  fromValueMustBeNumber?: string;\n  toValueMustBeNumber?: string;\n  invalidBetweenMinAndMax?: string;\n  invalidMinValue?: string;\n  invalidMaxValue?: string;\n}\n\nexport interface AdvancedFilterValidationErrorsTexts {\n  invalidRangeName?: string;\n  invalidRangeText?: string;\n  numberTypeTexts?: NumberTypeValidationErrorsTexts;\n}\n\nexport interface AdvancedFilterDataTypesConfigsTexts {\n  fromLabel?: string;\n  toLabel?: string;\n  trueLabel?: string;\n  falseLabel?: string;\n  blankLabel?: string;\n  validationErrors?: AdvancedFilterValidationErrorsTexts;\n}\n\nexport interface AdvancedFilterTexts {\n  initialDropdownAnchorLabel?: string;\n  initialDropdownAnchorWithCounterLabel?: string;\n  clearButtonLabel?: string;\n  saveButtonLabel?: string;\n  createdByMeLabel?: string;\n  createdByOthersLabel?: string;\n  editLabel?: string;\n  backLabel?: string;\n  cancelLabel?: string;\n  removeAllLabel?: string;\n  applyFiltersLabel?: string;\n  expressionFilterPlaceholder?: string;\n  disabledFilterExpressionFieldPlaceholder?: string;\n  filtersLabel?: string;\n  /** @since 12.13.0 */\n  filtersLabelAlone?: string;\n  noFiltersSaved?: string;\n  savedFiltersLabel?: string;\n  filterNameInputPlaceholder?: string;\n  requiredLabel?: string;\n  filterNameLabel?: string;\n  stringTypeTagFieldPlaceholder?: string;\n  counterFromLabel?: string;\n  counterToLabel?: string;\n  removeLabel?: string;\n  configsTexts?: AdvancedFilterDataTypesConfigsTexts;\n  inlineSelectTexts?: SelectTexts;\n  /** @since 10.7.0 */\n  datetimeTexts?: RxDatetimeTexts;\n  filterNameErrorMessage?: string;\n  filtersExpressionFieldLabel?: string;\n  selectedFiltersExpressionFieldLabel?: string;\n  filtersExpressionMainErrorText?: string;\n  filtersExpressionWarningText?: string;\n  duplicateSavedFilterNameError?: string;\n  selectedFiltersCountLabel?: string;\n  hiddenItemsCounterLabel?: string;\n  markDefaultSavedFilterLabel?: string;\n  defaultSavedFilterLabel?: string;\n}\n\n// TODO: Refactor this if possible\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nexport interface AdvancedFilterExpressionTip<TValue = any> extends AdvancedFilterTagModel<TValue> {\n  isIncompletedExpression?: boolean;\n}\n\nexport type AdvancedFilterDisabledResolver = (filterOption: AdvancedFilterOption, filterMultipleDataOption?: AdvancedFilterMultipleDataOption) => boolean;\n\nexport type AdvancedFilterDataTypesConfigs = { [dataType in AdvancedFilterOptionDataType]: AdvancedFilterOptionConfig };\n\nexport type AdvancedFilterDataTypesInputsTemplates = { [dataType in AdvancedFilterOptionDataType]: TemplateRef<FilterOptionTemplateParams> };\n"]}