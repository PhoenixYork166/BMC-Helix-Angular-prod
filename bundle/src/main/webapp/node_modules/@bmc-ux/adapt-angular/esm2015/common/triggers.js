// Based on ng-bootstrap (https://github.com/ng-bootstrap/ng-bootstrap)
// Licensed under the MIT License
// https://github.com/ng-bootstrap/ng-bootstrap/blob/master/src/util/triggers.ts
import { getEventKeyCode } from './key-codes';
import { ESCAPE, ENTER } from '@angular/cdk/keycodes';
export class Trigger {
    constructor(open, close) {
        this.open = open;
        this.close = close;
        if (!close) {
            this.close = open;
        }
    }
    isManual() {
        return this.open === 'manual' || this.close === 'manual';
    }
}
const DEFAULT_ALIASES = {
    hover: ['mouseenter', 'mouseleave']
};
export function parseTriggers(triggers, aliases = DEFAULT_ALIASES) {
    const trimmedTriggers = (triggers || '').trim();
    if (trimmedTriggers.length === 0) {
        return [];
    }
    const parsedTriggers = trimmedTriggers.split(/\s+/).map(trigger => trigger.split(':')).map((triggerPair) => {
        const alias = aliases[triggerPair[0]] || triggerPair;
        return new Trigger(alias[0], alias[1]);
    });
    const manualTriggers = parsedTriggers.filter(triggerPair => triggerPair.isManual());
    if (manualTriggers.length > 1) {
        throw new Error('Triggers parse error: only one manual trigger is allowed');
    }
    if (manualTriggers.length === 1 && parsedTriggers.length > 1) {
        throw new Error('Triggers parse error: manual trigger can\'t be mixed with other triggers');
    }
    return parsedTriggers;
}
const noopFn = () => {
    return;
};
export function listenToTriggers(renderer, nativeElement, triggers, 
// TODO: Refactor this if possible
/* eslint-disable @typescript-eslint/no-explicit-any */
openFn, closeFn, toggleFn
/* eslint-enable @typescript-eslint/no-explicit-any */
) {
    const parsedTriggers = parseTriggers(triggers);
    const listeners = [];
    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {
        return noopFn;
    }
    parsedTriggers.forEach((trigger) => {
        if (trigger.open) {
            listeners.push(renderer.listen(nativeElement, 'keydown', (event) => {
                if (getEventKeyCode(event) === ENTER) {
                    openFn();
                }
            }));
        }
        if (trigger.close) {
            listeners.push(renderer.listen(nativeElement, 'keydown', (event) => {
                if (getEventKeyCode(event) === ESCAPE) {
                    closeFn();
                }
            }));
        }
        if (trigger.open === trigger.close) {
            listeners.push(renderer.listen(nativeElement, trigger.open, toggleFn));
        }
        else {
            listeners.push(renderer.listen(nativeElement, trigger.open, openFn), renderer.listen(nativeElement, trigger.close, closeFn));
        }
    });
    return () => {
        listeners.forEach(unsubscribeFn => unsubscribeFn());
    };
}
//# sourceMappingURL=triggers.js.map