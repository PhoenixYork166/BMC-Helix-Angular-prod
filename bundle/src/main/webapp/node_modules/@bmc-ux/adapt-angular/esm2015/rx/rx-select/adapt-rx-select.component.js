import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, Input, NgZone, Optional, Output, Renderer2, Self, TemplateRef, ViewChild } from '@angular/core';
import { NgControl } from '@angular/forms';
import { animate, style, transition, trigger, useAnimation } from '@angular/animations';
import { DOWN_ARROW, ENTER, SPACE, TAB, UP_ARROW } from '@angular/cdk/keycodes';
import { asyncScheduler, Subject } from 'rxjs';
import { debounceTime, take, takeUntil, tap, throttleTime } from 'rxjs/operators';
import { cloneDeep, differenceWith, flatMapDeep, indexOf, isBoolean, isEqual, isNil, isObject, union } from 'lodash-es';
import { ANIMATION_NAME } from '../../common/animation';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularCustomEventType, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import { AdaptDropdownDirective } from '../../dropdown/index';
import { AdaptTranslateService } from '../../common/i18n/index';
import { ResizeService } from '../../common/resize/resize.service';
import { SafeCdr } from '../../common/safe-cdr';
import { getEventKeyCode } from '../../common/key-codes';
import { getFocusableElements } from '../../common/focus';
import { isFunction, toString } from '../../common/utilities';
import { AdaptOverlayService } from '../../common/overlay/index';
import { AdaptRxFeedbackComponent, AdaptRxFormControlDirective } from '../form-control/index';
import { AdaptRxSearchComponent } from '../rx-search/index';
import { AdaptRxSelectConfigService } from './adapt-rx-select-config.service';
import { AdaptIsOptionSelectedPipe } from './adapt-rx-select.pipes';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "./adapt-rx-select-config.service";
import * as i3 from "../../common/device-detection.service";
import * as i4 from "../../common/resize/resize.service";
import * as i5 from "../../common/overlay/index";
import * as i6 from "../../common/i18n/index";
import * as i7 from "../../common/radar/adapt-radar";
import * as i8 from "./adapt-rx-select.pipes";
const _c0 = ["selectOptionsContainerRef"];
const _c1 = ["searchComponent"];
const _c2 = ["selectOptionsListRef"];
const _c3 = ["emptyStateElementRef"];
const _c4 = ["selectButtonRef"];
const _c5 = ["titleRef"];
const _c6 = ["adaptRxFeedbackRef"];
const _c7 = ["adaptDropdownDirective"];
const _c8 = ["selectControlsContainer"];
const _c9 = ["selectCustomActionsContainer"];
const _c10 = ["selectCounterContainer"];
const _c11 = ["loadMoreButtonRef"];
const _c12 = ["noneButtonRef"];
const _c13 = ["loadingStateBlockRef"];
function AdaptRxSelectComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function AdaptRxSelectComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "div", 11);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n");
} if (rf & 2) {
    const option_r16 = ctx.$implicit;
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r3.optionFormatter(option_r16));
} }
function AdaptRxSelectComponent_ng_template_10_div_4_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 19);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelement(2, "input", 20);
    i0.ɵɵpipe(3, "isOptionSelected");
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵelement(5, "div", 21);
    i0.ɵɵtext(6, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const indexedOptionItem_r17 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r20 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("checked", i0.ɵɵpipeBind2(3, 3, ctx_r20.selectedOptionsMap, indexedOptionItem_r17))("disabled", ctx_r20.disabledOptionResolver(indexedOptionItem_r17.option));
    i0.ɵɵattribute("data-testid", ctx_r20.testID + "_item-" + indexedOptionItem_r17.index + "_checkbox");
} }
function AdaptRxSelectComponent_ng_template_10_div_4_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 22);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelement(2, "input", 23);
    i0.ɵɵpipe(3, "isOptionSelected");
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵelement(5, "div", 24);
    i0.ɵɵtext(6, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const indexedOptionItem_r17 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r21 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("checked", i0.ɵɵpipeBind2(3, 3, ctx_r21.selectedOptionsMap, indexedOptionItem_r17))("disabled", ctx_r21.disabledOptionResolver(indexedOptionItem_r17.option));
    i0.ɵɵattribute("data-testid", ctx_r21.testID + "_item-" + indexedOptionItem_r17.index + "_radio");
} }
function AdaptRxSelectComponent_ng_template_10_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 16);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptRxSelectComponent_ng_template_10_div_4_div_2_Template, 7, 6, "div", 17);
    i0.ɵɵtext(3, "\n\n      ");
    i0.ɵɵtemplate(4, AdaptRxSelectComponent_ng_template_10_div_4_div_4_Template, 7, 6, "div", 18);
    i0.ɵɵtext(5, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r18 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r18.multiple);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r18.multiple);
} }
function AdaptRxSelectComponent_ng_template_10_ng_template_8_Template(rf, ctx) { }
const _c14 = function (a0, a1) { return [a0, a1]; };
const _c15 = function (a0) { return { $implicit: a0 }; };
function AdaptRxSelectComponent_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    const _r25 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "button", 12);
    i0.ɵɵlistener("click", function AdaptRxSelectComponent_ng_template_10_Template_button_click_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r25); const indexedOptionItem_r17 = restoredCtx.$implicit; const ctx_r24 = i0.ɵɵnextContext(); return ctx_r24.selectOption(indexedOptionItem_r17); })("mouseenter", function AdaptRxSelectComponent_ng_template_10_Template_button_mouseenter_1_listener() { const restoredCtx = i0.ɵɵrestoreView(_r25); const indexedOptionItem_r17 = restoredCtx.$implicit; const ctx_r26 = i0.ɵɵnextContext(); return ctx_r26.markOptionAsActive(indexedOptionItem_r17); });
    i0.ɵɵpipe(2, "isOptionSelected");
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵtemplate(4, AdaptRxSelectComponent_ng_template_10_div_4_Template, 6, 2, "div", 13);
    i0.ɵɵtext(5, "\n\n    ");
    i0.ɵɵelementStart(6, "div", 14);
    i0.ɵɵtext(7, "\n      ");
    i0.ɵɵtemplate(8, AdaptRxSelectComponent_ng_template_10_ng_template_8_Template, 0, 0, "ng-template", 15);
    i0.ɵɵtext(9, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n");
} if (rf & 2) {
    const indexedOptionItem_r17 = ctx.$implicit;
    const ctx_r5 = i0.ɵɵnextContext();
    const _r2 = i0.ɵɵreference(8);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("id", ctx_r5.getOptionId(indexedOptionItem_r17))("ngClass", i0.ɵɵpureFunction2(11, _c14, !ctx_r5.multiple && ctx_r5.singleSelectStyle === "line" && ctx_r5.isOptionSelectedPipe.transform(ctx_r5.selectedOptionsMap, indexedOptionItem_r17) ? ctx_r5.SELECTED_OPTION_CLASS : "", ctx_r5.isOptionActive(indexedOptionItem_r17) ? ctx_r5.ACTIVE_OPTION_CLASS : ""))("disabled", ctx_r5.disabled || ctx_r5.readonly || ctx_r5.disabledOptionResolver(indexedOptionItem_r17.option));
    i0.ɵɵattribute("aria-selected", i0.ɵɵpipeBind2(2, 8, ctx_r5.selectedOptionsMap, indexedOptionItem_r17))("data-testid", ctx_r5.testID + "_item-" + indexedOptionItem_r17.index);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r5.multiple || ctx_r5.singleSelectStyle === "marker");
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r5.optionContentTemplate || _r2)("ngTemplateOutletContext", i0.ɵɵpureFunction1(14, _c15, indexedOptionItem_r17.option));
} }
function AdaptRxSelectComponent_ng_template_13_div_1_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r38 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 34);
    i0.ɵɵlistener("click", function AdaptRxSelectComponent_ng_template_13_div_1_div_6_Template_div_click_0_listener($event) { return $event.stopPropagation(); });
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "adapt-rx-search", 35, 36);
    i0.ɵɵlistener("ngModelChange", function AdaptRxSelectComponent_ng_template_13_div_1_div_6_Template_adapt_rx_search_ngModelChange_2_listener($event) { i0.ɵɵrestoreView(_r38); const ctx_r37 = i0.ɵɵnextContext(3); return ctx_r37.filterValue = $event; })("ngModelChange", function AdaptRxSelectComponent_ng_template_13_div_1_div_6_Template_adapt_rx_search_ngModelChange_2_listener($event) { i0.ɵɵrestoreView(_r38); const ctx_r39 = i0.ɵɵnextContext(3); return ctx_r39.filterValueChangeHandler($event); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r31 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("ngModel", ctx_r31.filterValue)("ariaControlsPopupId", ctx_r31.popupId)("ariaActiveDescendant", ctx_r31.activeDescendant)("placeholder", ctx_r31.texts.searchPlaceholder)("autofocus", !ctx_r31.inline)("testID", ctx_r31.testID + "_search")("disabled", ctx_r31.disabled || ctx_r31.readonly);
    i0.ɵɵattribute("data-testid", ctx_r31.testID + "_search");
} }
function AdaptRxSelectComponent_ng_template_13_div_1_div_8_div_2_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r42 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r42.texts.headerText);
} }
function AdaptRxSelectComponent_ng_template_13_div_1_div_8_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 40);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵtemplate(2, AdaptRxSelectComponent_ng_template_13_div_1_div_8_div_2_span_2_Template, 2, 1, "span", 33);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementStart(4, "span");
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r40 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r40.texts.headerText !== "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate4("\n            (", ctx_r40.flattenFilteredIndexedOptions.length, " ", ctx_r40.texts.numberOptionsText, "\n            , ", ctx_r40.selectedOptions.length, " ", ctx_r40.texts.checked, ")\n          ");
} }
function AdaptRxSelectComponent_ng_template_13_div_1_div_8_div_6_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 44);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r44 = i0.ɵɵnextContext(5);
    i0.ɵɵproperty("@filterStatusAnimation", undefined);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate2("\n                ", ctx_r44.texts.filteredTo, " ", ctx_r44.flattenFilteredIndexedOptions.length, "\n              ");
} }
function AdaptRxSelectComponent_ng_template_13_div_1_div_8_div_6_div_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", null, 45);
    i0.ɵɵtext(2, "\n              ");
    i0.ɵɵelementStart(3, "adapt-custom-actions", 46);
    i0.ɵɵtext(4, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r45 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("actions", ctx_r45.customActions)("adaptRadarDisableEventSending", true);
} }
function AdaptRxSelectComponent_ng_template_13_div_1_div_8_div_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 41);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementStart(2, "div", null, 42);
    i0.ɵɵtext(4, "\n              ");
    i0.ɵɵtemplate(5, AdaptRxSelectComponent_ng_template_13_div_1_div_8_div_6_div_5_Template, 2, 3, "div", 43);
    i0.ɵɵtext(6, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n\n            ");
    i0.ɵɵtemplate(8, AdaptRxSelectComponent_ng_template_13_div_1_div_8_div_6_div_8_Template, 6, 2, "div", 33);
    i0.ɵɵtext(9, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r41 = i0.ɵɵnextContext(4);
    i0.ɵɵproperty("ngClass", ctx_r41.verticalLayout ? "flex-column" : "flex-row align-items-center");
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", ctx_r41.filterValue);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", !(ctx_r41.disabled || ctx_r41.readonly) && ctx_r41.multiple);
} }
const _c16 = function (a0) { return { "rx-select__controls_vertical-layout": a0 }; };
function AdaptRxSelectComponent_ng_template_13_div_1_div_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 37);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptRxSelectComponent_ng_template_13_div_1_div_8_div_2_Template, 7, 5, "div", 38);
    i0.ɵɵtext(3, "\n\n        ");
    i0.ɵɵelementStart(4, "div");
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵtemplate(6, AdaptRxSelectComponent_ng_template_13_div_1_div_8_div_6_Template, 10, 3, "div", 39);
    i0.ɵɵtext(7, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r32 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(3, _c16, ctx_r32.verticalLayout));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r32.inline || ctx_r32.isMobile);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", !(ctx_r32.disabled || ctx_r32.readonly));
} }
function AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_5_ng_template_2_Template(rf, ctx) { }
function AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_5_ng_template_4_ng_container_1_ng_template_2_Template(rf, ctx) { }
function AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_5_ng_template_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵtemplate(2, AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_5_ng_template_4_ng_container_1_ng_template_2_Template, 0, 0, "ng-template", 15);
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const option_r53 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵnextContext(5);
    const _r4 = i0.ɵɵreference(11);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", _r4)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c15, option_r53));
} }
function AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_5_ng_template_4_ng_container_3_ng_template_7_ng_container_1_ng_template_2_Template(rf, ctx) { }
function AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_5_ng_template_4_ng_container_3_ng_template_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n                    ");
    i0.ɵɵtemplate(2, AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_5_ng_template_4_ng_container_3_ng_template_7_ng_container_1_ng_template_2_Template, 0, 0, "ng-template", 15);
    i0.ɵɵtext(3, "\n                  ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const childOption_r59 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵnextContext(7);
    const _r4 = i0.ɵɵreference(11);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", _r4)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c15, childOption_r59));
} }
function AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_5_ng_template_4_ng_container_3_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n                  ");
    i0.ɵɵtemplate(1, AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_5_ng_template_4_ng_container_3_ng_template_7_ng_container_1_Template, 4, 4, "ng-container", 33);
    i0.ɵɵtext(2, "\n                ");
} if (rf & 2) {
    const childOption_r59 = ctx.$implicit;
    const ctx_r58 = i0.ɵɵnextContext(7);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", childOption_r59.index < ctx_r58.displayedOptionsCount);
} }
function AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_5_ng_template_4_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵelementStart(2, "div", 52);
    i0.ɵɵtext(3, "\n                ");
    i0.ɵɵelementStart(4, "div", 53);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n\n                ");
    i0.ɵɵtemplate(7, AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_5_ng_template_4_ng_container_3_ng_template_7_Template, 3, 1, "ng-template", 51);
    i0.ɵɵtext(8, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n            ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const option_r53 = i0.ɵɵnextContext().$implicit;
    const ctx_r55 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(2);
    i0.ɵɵattribute("aria-labelledby", ctx_r55.id + "-group" + option_r53.index);
    i0.ɵɵadvance(2);
    i0.ɵɵattribute("id", ctx_r55.id + "-group" + option_r53.index);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(option_r53.name);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", option_r53.children)("ngForTrackBy", ctx_r55.trackByIndexedOption);
} }
function AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_5_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n            ");
    i0.ɵɵtemplate(1, AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_5_ng_template_4_ng_container_1_Template, 4, 4, "ng-container", 33);
    i0.ɵɵtext(2, "\n\n            ");
    i0.ɵɵtemplate(3, AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_5_ng_template_4_ng_container_3_Template, 10, 5, "ng-container", 33);
    i0.ɵɵtext(4, "\n          ");
} if (rf & 2) {
    const option_r53 = ctx.$implicit;
    const ctx_r52 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !option_r53.children && option_r53.index < ctx_r52.displayedOptionsCount);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", option_r53.children && option_r53.index < ctx_r52.displayedOptionsCount);
} }
function AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵtemplate(2, AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_5_ng_template_2_Template, 0, 0, "ng-template", 50);
    i0.ɵɵtext(3, "\n\n          ");
    i0.ɵɵtemplate(4, AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_5_ng_template_4_Template, 5, 2, "ng-template", 51);
    i0.ɵɵtext(5, "\n        ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r48 = i0.ɵɵnextContext(4);
    const _r12 = i0.ɵɵreference(23);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", _r12);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r48.filteredIndexedOptions)("ngForTrackBy", ctx_r48.trackByIndexedOption);
} }
function AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_7_ng_template_4_Template(rf, ctx) { }
function AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_7_ng_container_6_ng_template_2_ng_container_1_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 53);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r67 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r69 = i0.ɵɵnextContext(6);
    i0.ɵɵattribute("id", ctx_r69.id + "-group" + option_r67.index);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(option_r67.name);
} }
function AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_7_ng_container_6_ng_template_2_ng_container_1_ng_container_6_ng_template_2_Template(rf, ctx) { }
function AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_7_ng_container_6_ng_template_2_ng_container_1_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n                      ");
    i0.ɵɵtemplate(2, AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_7_ng_container_6_ng_template_2_ng_container_1_ng_container_6_ng_template_2_Template, 0, 0, "ng-template", 15);
    i0.ɵɵtext(3, "\n                    ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const option_r67 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵnextContext(6);
    const _r4 = i0.ɵɵreference(11);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", _r4)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c15, option_r67));
} }
function AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_7_ng_container_6_ng_template_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n                  ");
    i0.ɵɵelementStart(2, "div", 52);
    i0.ɵɵtext(3, "\n                    ");
    i0.ɵɵtemplate(4, AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_7_ng_container_6_ng_template_2_ng_container_1_div_4_Template, 2, 2, "div", 56);
    i0.ɵɵtext(5, "\n                    ");
    i0.ɵɵtemplate(6, AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_7_ng_container_6_ng_template_2_ng_container_1_ng_container_6_Template, 4, 4, "ng-container", 33);
    i0.ɵɵtext(7, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n                ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const option_r67 = i0.ɵɵnextContext().$implicit;
    const ctx_r68 = i0.ɵɵnextContext(6);
    i0.ɵɵadvance(2);
    i0.ɵɵattribute("aria-labelledby", ctx_r68.id + "-group" + option_r67.index);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", option_r67.children);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !option_r67.children);
} }
function AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_7_ng_container_6_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n                ");
    i0.ɵɵtemplate(1, AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_7_ng_container_6_ng_template_2_ng_container_1_Template, 9, 3, "ng-container", 33);
    i0.ɵɵtext(2, "\n              ");
} if (rf & 2) {
    const option_r67 = ctx.$implicit;
    const ctx_r66 = i0.ɵɵnextContext(6);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", option_r67.index < ctx_r66.displayedOptionsCount);
} }
function AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_7_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵtemplate(2, AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_7_ng_container_6_ng_template_2_Template, 3, 1, "ng-template", 55);
    i0.ɵɵpipe(3, "slice");
    i0.ɵɵtext(4, "\n            ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r65 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("cdkVirtualForOf", i0.ɵɵpipeBind3(3, 3, ctx_r65.flattenFilteredGroupIndexedOptions || ctx_r65.filteredIndexedOptions, 0, ctx_r65.displayedOptionsCount))("cdkVirtualForTemplateCacheSize", ctx_r65.virtualScrollTemplateCacheSize)("cdkVirtualForTrackBy", ctx_r65.trackByIndexedOption);
} }
function AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "cdk-virtual-scroll-viewport", 54);
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵtemplate(4, AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_7_ng_template_4_Template, 0, 0, "ng-template", 50);
    i0.ɵɵtext(5, "\n\n            ");
    i0.ɵɵtemplate(6, AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_7_ng_container_6_Template, 5, 7, "ng-container", 33);
    i0.ɵɵtext(7, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n        ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r49 = i0.ɵɵnextContext(4);
    const _r12 = i0.ɵɵreference(23);
    i0.ɵɵadvance(2);
    i0.ɵɵstyleProp("height", ctx_r49.getListBoxHeight());
    i0.ɵɵproperty("itemSize", ctx_r49.virtualScrollItemSize)("minBufferPx", ctx_r49.minBufferPx)("maxBufferPx", ctx_r49.maxBufferPx);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", _r12);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r49.filteredIndexedOptions == null ? null : ctx_r49.filteredIndexedOptions.length);
} }
function AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_template_9_Template(rf, ctx) { }
function AdaptRxSelectComponent_ng_template_13_div_1_div_11_Template(rf, ctx) { if (rf & 1) {
    const _r76 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 47, 48);
    i0.ɵɵlistener("focus", function AdaptRxSelectComponent_ng_template_13_div_1_div_11_Template_div_focus_0_listener() { i0.ɵɵrestoreView(_r76); const ctx_r75 = i0.ɵɵnextContext(3); return ctx_r75.selectBlockFocusHandler(); })("blur", function AdaptRxSelectComponent_ng_template_13_div_1_div_11_Template_div_blur_0_listener() { i0.ɵɵrestoreView(_r76); const ctx_r77 = i0.ɵɵnextContext(3); return ctx_r77.selectBlockBlurHandler(); })("keydown", function AdaptRxSelectComponent_ng_template_13_div_1_div_11_Template_div_keydown_0_listener($event) { i0.ɵɵrestoreView(_r76); const ctx_r78 = i0.ɵɵnextContext(3); return ctx_r78.selectOptionsListKeydownHandler($event); });
    i0.ɵɵtext(2, "\n      ");
    i0.ɵɵelementStart(3, "div", 49);
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵtemplate(5, AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_5_Template, 6, 3, "ng-container", 33);
    i0.ɵɵtext(6, "\n\n        ");
    i0.ɵɵtemplate(7, AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_container_7_Template, 9, 7, "ng-container", 33);
    i0.ɵɵtext(8, "\n\n        ");
    i0.ɵɵtemplate(9, AdaptRxSelectComponent_ng_template_13_div_1_div_11_ng_template_9_Template, 0, 0, "ng-template", 50);
    i0.ɵɵtext(10, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r33 = i0.ɵɵnextContext(3);
    const _r14 = i0.ɵɵreference(26);
    i0.ɵɵstyleProp("max-height", ctx_r33.popupMaxHeight);
    i0.ɵɵproperty("id", ctx_r33.popupId);
    i0.ɵɵattribute("tabindex", ctx_r33.disabled ? undefined : 0)("aria-label", ctx_r33.showLoadMoreButton ? ctx_r33.texts.pressTabToGoToLoadMoreButton : undefined)("aria-describedby", ctx_r33.inline ? ctx_r33.ariaDescribedBy : undefined)("aria-labelledby", ctx_r33.inline ? ctx_r33.ariaLabelledby : undefined)("aria-multiselectable", ctx_r33.multiple)("aria-activedescendant", ctx_r33.activeDescendant);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", !ctx_r33.virtualScroll);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r33.virtualScroll);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", _r14);
} }
function AdaptRxSelectComponent_ng_template_13_div_1_ng_container_14_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "div", 59, 60);
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵelement(5, "adapt-empty-state", 61);
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r79 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("label", ctx_r79.texts.notFound);
    i0.ɵɵattribute("data-testid", ctx_r79.testID + "_empty");
} }
function AdaptRxSelectComponent_ng_template_13_div_1_ng_container_14_ng_template_4_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 59, 60);
    i0.ɵɵtext(2, "\n          ");
    i0.ɵɵelementStart(3, "adapt-empty-state", 63);
    i0.ɵɵtext(4, "\n            ");
    i0.ɵɵelementStart(5, "div", 64);
    i0.ɵɵtext(6, "\n              ");
    i0.ɵɵelementStart(7, "p", 65);
    i0.ɵɵtext(8);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r83 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("label", ctx_r83.texts.emptyStateTitle);
    i0.ɵɵattribute("data-testid", ctx_r83.testID + "_empty");
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r83.texts.emptyStateDescription);
} }
function AdaptRxSelectComponent_ng_template_13_div_1_ng_container_14_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n        ");
    i0.ɵɵtemplate(1, AdaptRxSelectComponent_ng_template_13_div_1_ng_container_14_ng_template_4_div_1_Template, 12, 4, "div", 62);
    i0.ɵɵtext(2, "\n      ");
} if (rf & 2) {
    const ctx_r81 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r81.isEmptyState);
} }
function AdaptRxSelectComponent_ng_template_13_div_1_ng_container_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptRxSelectComponent_ng_template_13_div_1_ng_container_14_ng_container_2_Template, 8, 3, "ng-container", 57);
    i0.ɵɵtext(3, "\n\n      ");
    i0.ɵɵtemplate(4, AdaptRxSelectComponent_ng_template_13_div_1_ng_container_14_ng_template_4_Template, 3, 1, "ng-template", null, 58, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(6, "\n    ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const _r80 = i0.ɵɵreference(5);
    const ctx_r34 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r34.filterValue && !ctx_r34.flattenFilteredIndexedOptions.length)("ngIfElse", _r80);
} }
function AdaptRxSelectComponent_ng_template_13_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 27, 28);
    i0.ɵɵtext(2, "\n\n    ");
    i0.ɵɵelementStart(3, "div", null, 29);
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵtemplate(6, AdaptRxSelectComponent_ng_template_13_div_1_div_6_Template, 5, 9, "div", 30);
    i0.ɵɵtext(7, "\n      ");
    i0.ɵɵtemplate(8, AdaptRxSelectComponent_ng_template_13_div_1_div_8_Template, 9, 5, "div", 31);
    i0.ɵɵtext(9, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n\n    ");
    i0.ɵɵtemplate(11, AdaptRxSelectComponent_ng_template_13_div_1_div_11_Template, 12, 12, "div", 32);
    i0.ɵɵtext(12, "\n\n    ");
    i0.ɵɵtext(13, "\n    ");
    i0.ɵɵtemplate(14, AdaptRxSelectComponent_ng_template_13_div_1_ng_container_14_Template, 7, 2, "ng-container", 33);
    i0.ɵɵtext(15, "\n    ");
    i0.ɵɵtext(16, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r27 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("ngStyle", ctx_r27.popupStyle);
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("ngIf", ctx_r27.enableFilter && (ctx_r27.filterValue || !!(ctx_r27.options == null ? null : ctx_r27.options.length)));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r27.showControls);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r27.displayedOptionsCount > 0 || ctx_r27.showNoneOption());
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", !ctx_r27.loadMoreButton && !ctx_r27.loadMoreInProgress);
} }
function AdaptRxSelectComponent_ng_template_13_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 66, 67);
    i0.ɵɵtext(2, "\n    ");
    i0.ɵɵelementStart(3, "div", 68);
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelement(5, "div", 69);
    i0.ɵɵtext(6, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n    ");
    i0.ɵɵelementStart(8, "span");
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r28 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(9);
    i0.ɵɵtextInterpolate(ctx_r28.texts.loadingText);
} }
function AdaptRxSelectComponent_ng_template_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵtemplate(1, AdaptRxSelectComponent_ng_template_13_div_1_Template, 17, 5, "div", 25);
    i0.ɵɵtext(2, "\n\n  ");
    i0.ɵɵtemplate(3, AdaptRxSelectComponent_ng_template_13_div_3_Template, 11, 1, "div", 26);
    i0.ɵɵtext(4, "\n");
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r7.loadingState);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r7.loadingState);
} }
function AdaptRxSelectComponent_ng_template_16_ng_template_3_Template(rf, ctx) { }
function AdaptRxSelectComponent_ng_template_16_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "div", 70);
    i0.ɵɵtext(2, "\n    ");
    i0.ɵɵtemplate(3, AdaptRxSelectComponent_ng_template_16_ng_template_3_Template, 0, 0, "ng-template", 50);
    i0.ɵɵtext(4, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n");
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r6 = i0.ɵɵreference(14);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", _r6);
} }
function AdaptRxSelectComponent_ng_template_19_div_1_ng_template_11_ng_template_4_Template(rf, ctx) { }
function AdaptRxSelectComponent_ng_template_19_div_1_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    const _r95 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵelementStart(1, "div", 79, 80);
    i0.ɵɵlistener("keydown", function AdaptRxSelectComponent_ng_template_19_div_1_ng_template_11_Template_div_keydown_1_listener($event) { i0.ɵɵrestoreView(_r95); const _r92 = i0.ɵɵreference(2); const ctx_r94 = i0.ɵɵnextContext(3); return ctx_r94.popupMenuKeydown($event, _r92); });
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵtemplate(4, AdaptRxSelectComponent_ng_template_19_div_1_ng_template_11_ng_template_4_Template, 0, 0, "ng-template", 50);
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n    ");
} if (rf & 2) {
    const ctx_r91 = i0.ɵɵnextContext(3);
    const _r6 = i0.ɵɵreference(14);
    i0.ɵɵadvance(1);
    i0.ɵɵstyleProp("width", ctx_r91.popupWidth);
    i0.ɵɵclassProp("pt-0", !ctx_r91.inline)("dropdown-menu__rx-search-container", ctx_r91.enableFilter);
    i0.ɵɵproperty("ngClass", ctx_r91.popupClass);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", _r6);
} }
function AdaptRxSelectComponent_ng_template_19_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r97 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 72, 73);
    i0.ɵɵlistener("onOpen", function AdaptRxSelectComponent_ng_template_19_div_1_Template_div_onOpen_0_listener() { i0.ɵɵrestoreView(_r97); const ctx_r96 = i0.ɵɵnextContext(2); return ctx_r96.popupOpenChangeHandler(true); })("onClose", function AdaptRxSelectComponent_ng_template_19_div_1_Template_div_onClose_0_listener() { i0.ɵɵrestoreView(_r97); const ctx_r98 = i0.ɵɵnextContext(2); return ctx_r98.popupOpenChangeHandler(false); });
    i0.ɵɵtext(2, "\n    ");
    i0.ɵɵelementStart(3, "button", 74, 75);
    i0.ɵɵlistener("click", function AdaptRxSelectComponent_ng_template_19_div_1_Template_button_click_3_listener($event) { i0.ɵɵrestoreView(_r97); const ctx_r99 = i0.ɵɵnextContext(2); return ctx_r99.selectButtonClickHandler($event); })("focus", function AdaptRxSelectComponent_ng_template_19_div_1_Template_button_focus_3_listener($event) { i0.ɵɵrestoreView(_r97); const ctx_r100 = i0.ɵɵnextContext(2); return ctx_r100.focusHandler($event); })("blur", function AdaptRxSelectComponent_ng_template_19_div_1_Template_button_blur_3_listener($event) { i0.ɵɵrestoreView(_r97); const ctx_r101 = i0.ɵɵnextContext(2); return ctx_r101.blurHandler($event); })("mouseenter", function AdaptRxSelectComponent_ng_template_19_div_1_Template_button_mouseenter_3_listener() { i0.ɵɵrestoreView(_r97); const ctx_r102 = i0.ɵɵnextContext(2); return ctx_r102.checkIfTooltipNeeded(); })("keydown", function AdaptRxSelectComponent_ng_template_19_div_1_Template_button_keydown_3_listener($event) { i0.ɵɵrestoreView(_r97); const ctx_r103 = i0.ɵɵnextContext(2); return ctx_r103.selectButtonKeydownHandler($event); });
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵelementStart(6, "div", 76, 77);
    i0.ɵɵtext(8);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n    ");
    i0.ɵɵtemplate(11, AdaptRxSelectComponent_ng_template_19_div_1_ng_template_11_Template, 7, 8, "ng-template", 78);
    i0.ɵɵtext(12, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r88 = i0.ɵɵreference(1);
    const ctx_r87 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("holdFocusInMenu", true)("restoreFocusAfterClose", true)("focusNextElementAfterClose", true)("autoFocusFirst", false)("placement", ctx_r87.placement)("appendToBody", ctx_r87.appendToBody)("autoClose", "outside")("mobileView", ctx_r87.mobileViewConfig);
    i0.ɵɵadvance(3);
    i0.ɵɵclassProp("btn-sm", ctx_r87.size === "sm")("btn-lg", ctx_r87.size === "lg")("disabled", ctx_r87.readonly)("dropdown-toggle-up", ctx_r87.placement === "top")("border-danger", ctx_r87.hasDangerState)("border-warning", ctx_r87.warningMessage);
    i0.ɵɵproperty("adaptTooltip", ctx_r87.titleTooltip)("adaptRadarDisableEventSending", true)("placement", "auto")("id", ctx_r87.id)("disabled", ctx_r87.disabled)("autofocus", ctx_r87.autofocus);
    i0.ɵɵattribute("name", ctx_r87.name)("placeholder", ctx_r87.placeholder)("tabindex", ctx_r87.tabIndex)("data-testid", ctx_r87.testID + "_button")("aria-disabled", ctx_r87.disabled || ctx_r87.readonly)("aria-describedby", ctx_r87.ariaDescribedBy)("aria-label", ctx_r87.ariaLabel)("aria-labelledby", ctx_r87.ariaLabelledby)("aria-required", ctx_r87.required)("aria-invalid", ctx_r87.ariaInvalidState)("aria-errormessage", ctx_r87.ariaErrorMessage)("aria-activedescendant", ctx_r87.activeDescendant)("aria-controls", _r88.isOpen() ? ctx_r87.popupId : null)("aria-expanded", _r88.isOpen());
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r87.title);
} }
function AdaptRxSelectComponent_ng_template_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵtemplate(1, AdaptRxSelectComponent_ng_template_19_div_1_Template, 13, 42, "div", 71);
    i0.ɵɵtext(2, "\n");
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r11.inline);
} }
function AdaptRxSelectComponent_ng_template_22_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    const _r107 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "button", 81, 82);
    i0.ɵɵlistener("click", function AdaptRxSelectComponent_ng_template_22_ng_container_1_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r107); const ctx_r106 = i0.ɵɵnextContext(2); return ctx_r106.selectEmptyOption(); })("mouseenter", function AdaptRxSelectComponent_ng_template_22_ng_container_1_Template_button_mouseenter_2_listener() { i0.ɵɵrestoreView(_r107); const ctx_r108 = i0.ɵɵnextContext(2); return ctx_r108.markOptionAsActive(null); });
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelementStart(5, "i");
    i0.ɵɵtext(6);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n  ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r104 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("id", ctx_r104.getOptionId(null))("ngClass", (!ctx_r104.selectedOptions.length ? ctx_r104.SELECTED_OPTION_CLASS : "") + (ctx_r104.isOptionActive(null) ? " " + ctx_r104.ACTIVE_OPTION_CLASS : ""));
    i0.ɵɵattribute("data-testid", ctx_r104.testID + "-null_item");
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r104.texts.emptyOptionText);
} }
function AdaptRxSelectComponent_ng_template_22_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵtemplate(1, AdaptRxSelectComponent_ng_template_22_ng_container_1_Template, 9, 4, "ng-container", 33);
    i0.ɵɵtext(2, "\n");
} if (rf & 2) {
    const ctx_r13 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r13.showNoneOption());
} }
function AdaptRxSelectComponent_ng_template_25_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r112 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "button", 83, 84);
    i0.ɵɵlistener("click", function AdaptRxSelectComponent_ng_template_25_div_1_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r112); const ctx_r111 = i0.ɵɵnextContext(2); return ctx_r111.loadMoreItems(); });
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r109 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("@heightAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("disabled", ctx_r109.loadMoreInProgress);
    i0.ɵɵproperty("adaptInlineLoader", ctx_r109.loadMoreInProgress)("activeText", ctx_r109.texts.loadingText);
    i0.ɵɵattribute("data-testid", ctx_r109.testID + "-loadMore");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1("\n      ", ctx_r109.texts.loadMore, "\n    ");
} }
function AdaptRxSelectComponent_ng_template_25_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵtemplate(1, AdaptRxSelectComponent_ng_template_25_div_1_Template, 6, 7, "div", 33);
    i0.ɵɵtext(2, "\n");
} if (rf & 2) {
    const ctx_r15 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r15.showLoadMoreButton);
} }
export class AdaptRxSelectComponent extends AdaptRxFormControlDirective {
    constructor(ngControl, adaptRxSelectConfigService, _changeDetectorRef, _deviceDetectionService, _ngZone, _renderer, _resizeService, _overlayService, ts, _adaptRadarService, _elem, isOptionSelectedPipe) {
        super(ngControl, ts, _adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptRxSelect, _changeDetectorRef);
        this._deviceDetectionService = _deviceDetectionService;
        this._ngZone = _ngZone;
        this._renderer = _renderer;
        this._resizeService = _resizeService;
        this._overlayService = _overlayService;
        this.ts = ts;
        this.isOptionSelectedPipe = isOptionSelectedPipe;
        this.defaultHostClass = true;
        this.controlName = 'select';
        this.SELECTED_OPTION_CLASS = 'active';
        this.ACTIVE_OPTION_CLASS = 'rx-select__option-active';
        this.DEFAULT_POPUP_MAX_HEIGHT = 250;
        this.analyticsComponentName = AdaptRadarAngularCustomEventName;
        this.selectedOptionsMap = new Map();
        // Flatten options array
        this.flattenOptions = [];
        // Filtered options (with indexes) with same structure as options
        this.filteredIndexedOptions = [];
        // Flatten filteredIndexedOptions array
        this.flattenFilteredIndexedOptions = [];
        // For virtual scroll case where the data needs to be flattened because CDK Scrolling doesn't support nesting for loops
        this.flattenFilteredGroupIndexedOptions = null;
        this.popupWidth = 'auto';
        this.verticalLayout = false;
        /**
         * Show empty option in options list
         * @docs-default false
         */
        this.emptyOption = false;
        /**
         * Formatter that transforms the option into a string
         * @docs-default option
         */
        this.optionFormatter = toString;
        /**
         * Function resolves disabled option
         * @docs-default option => !!option['disabled']
         */
        this.disabledOptionResolver = this._defaultDisabledOptionResolver;
        /**
         * Formatter that transforms the option list into a title string
         * @docs-default
         */
        this.titleFormatter = this._defaultTitleFormatter.bind(this);
        /**
         * If 'true', the first item in the options list will be active
         * @docs-default true
         */
        this.focusFirst = true;
        /**
         * Enables multiple selection mode
         * @docs-default false
         */
        this.multiple = false;
        /**
         * Style of checked single select checked option
         * @docs-default line
         */
        this.singleSelectStyle = 'line';
        /**
         * Enables options filtering
         * @docs-default false
         */
        this.enableFilter = false;
        /**
         * Enables select inline mode
         * @docs-default false
         */
        this.inline = false;
        /**
         * Enables 'select all' button
         * @docs-default false
         */
        this.selectAllButton = false;
        /**
         * Enables 'deselect all' button
         * @docs-default false
         */
        this.deselectAllButton = false;
        /**
         * Control size
         * @docs-default default
         */
        this.size = 'default';
        /**
         * Close popup on option select
         * @docs-default false
         */
        this.closeOnSelect = false;
        /**
         * The preferred placement of the typeahead
         * @docs-default auto
         * @since v10.13.0
         */
        this.placement = 'auto';
        /**
         * Attach popup to the body
         * @docs-default false
         */
        this.appendToBody = false;
        /**
         * Max height for the popup before scroll visible
         * @docs-default 250
         */
        this.popupMaxHeight = this.DEFAULT_POPUP_MAX_HEIGHT;
        /**
         * Enable virtual scroll for options list. Can be useful when there are too many options to fit in the dropdown
         * Additional info: https://material.angular.io/cdk/scrolling/api
         *
         * @docs-default false
         * @since v12.18.0
         */
        this.virtualScroll = false;
        /**
         * Used to configure the size of the items in the list (in pixels)
         * Additional info: https://material.angular.io/cdk/scrolling/api
         *
         * @docs-default 36
         * @since v12.18.0
         */
        this.virtualScrollItemSize = 36;
        /**
         * The size of the cache used to store templates that are not being used for re-use later.
         * Setting the cache size to 0 will disable caching
         * Additional info: https://material.angular.io/cdk/scrolling/api
         *
         * @docs-default 20
         * @since v12.18.0
         */
        this.virtualScrollTemplateCacheSize = 20;
        /**
         * The minimum amount of buffer rendered beyond the viewport (in pixels).
         * If the amount of buffer dips below this number, more items will be rendered
         * Additional info: https://material.angular.io/cdk/scrolling/api
         *
         * @docs-default 200
         * @since v12.18.0
         */
        this.minBufferPx = 200;
        /**
         * The number of pixels worth of buffer to render for when rendering new items
         * Additional info: https://material.angular.io/cdk/scrolling/api
         *
         * @docs-default 500
         * @since v12.18.0
         */
        this.maxBufferPx = 500;
        /* eslint-disable @angular-eslint/no-output-on-prefix */
        /**
         * An event emitted right before an item is selected from the options list
         */
        this.onSelectionChange = new EventEmitter();
        /**
         *  An event fired when the popup is opened or closed
         */
        this.onPopupOpenChange = new EventEmitter();
        /**
         *  An event fired when the filter value changed
         *  @since version 9.1.0
         */
        this.onFilterValueChange = new EventEmitter();
        this._options = [];
        this._loadingState = false;
        this._loadMoreButton = false;
        this._loadMoreInProgress = false;
        this._pageNumber = 1;
        this._resize$ = new Subject();
        this._quickSearch$ = new Subject();
        this._quickSearchTerm = '';
        this._selectedOptionsOnInit = [];
        this._selectedOptions = [];
        this.isTablet = this._deviceDetectionService.deviceTablet();
        this.isMobile = this.isTablet || this._deviceDetectionService.isMobile();
        this._isDesktop = !(this.isTablet || this.isMobile);
        this.size = adaptRxSelectConfigService.size;
        this.emptyOption = adaptRxSelectConfigService.emptyOption;
        this.placement = adaptRxSelectConfigService.placement;
        this.appendToBody = adaptRxSelectConfigService.appendToBody;
        this.popupMaxHeight = adaptRxSelectConfigService.popupMaxHeight;
        this.enableFilter = adaptRxSelectConfigService.enableFilter;
        this.inline = adaptRxSelectConfigService.inline;
        this.singleSelectStyle = adaptRxSelectConfigService.singleSelectStyle;
        this.selectAllButton = adaptRxSelectConfigService.selectAllButton;
        this.deselectAllButton = adaptRxSelectConfigService.deselectAllButton;
        this.closeOnSelect = adaptRxSelectConfigService.closeOnSelect;
        this.focusFirst = adaptRxSelectConfigService.focusFirst;
        this._texts = this._defaultTexts = this._getDefaultTexts(ts.getCurrentLanguage());
    }
    get selectedOptions() {
        return this._selectedOptions;
    }
    set selectedOptions(options) {
        this._selectedOptions = options;
        this._recreateSelectedOptionsMap(options);
    }
    get ariaInvalidState() {
        var _a;
        return (_a = this.ariaInvalid) !== null && _a !== void 0 ? _a : this.hasDangerState;
    }
    /**
     * Options list
     * @docs-default
     */
    set options(options) {
        this._options = options;
        // Collect options from all nested optionGroups
        this.flattenOptions = flatMapDeep(this.options, (option) => Array.isArray(option.children) ? option.children : option);
        // Update flatten filtered options count when options are filtered
        this._updateFilteredOptions();
    }
    get options() {
        return this._options;
    }
    /**
     * Standard UI texts
     * @docs-default texts.selectTexts
     */
    get texts() {
        return this._texts;
    }
    set texts(value) {
        this._texts = Object.assign(Object.assign({}, this._defaultTexts), value);
    }
    /**
     * Show 'LoadMore' button
     * @docs-default false
     */
    set loadMoreButton(value) {
        this._loadMoreButton = value;
        if (!value) {
            this._blurLoadMoreButton();
        }
    }
    get loadMoreButton() {
        return this._loadMoreButton;
    }
    /**
     * Show loading data indicator
     * @docs-default false
     */
    set loadMoreInProgress(value) {
        this._loadMoreInProgress = value;
        if (!value) {
            this._blurLoadMoreButton();
        }
    }
    get loadMoreInProgress() {
        return this._loadMoreInProgress;
    }
    /**
     * Show loading instead of options
     * @docs-default false
     */
    set loadingState(value) {
        var _a, _b;
        if (!isBoolean(value)) {
            return;
        }
        this._loadingState = value;
        const lastFocusInPopup = document.activeElement &&
            ((document.activeElement === ((_a = this.loadingStateBlockRef) === null || _a === void 0 ? void 0 : _a.nativeElement)) ||
                ((_b = this.selectOptionsContainerRef) === null || _b === void 0 ? void 0 : _b.nativeElement.contains(document.activeElement)));
        this._ngZone.onStable
            .pipe(take(1), takeUntil(this.destroy$))
            .subscribe(() => {
            var _a, _b;
            // Need to trigger position recalculation only after loading block disappeared
            if (this._loadingState === false) {
                // Run dropdown position recalculation after data loaded.
                // Can be useful when dropdown shown on top and loaded options has height less than loading block
                // Requires for the implementation without OverlayService
                (_b = (_a = this.popup) === null || _a === void 0 ? void 0 : _a.menuWindowRef) === null || _b === void 0 ? void 0 : _b.instance.recalculatePosition();
            }
            if (lastFocusInPopup) {
                this._moveFocusToPopup();
            }
        });
        SafeCdr.detectChanges(this._changeDetectorRef);
    }
    get loadingState() {
        return this._loadingState;
    }
    static TestSearchOption(option, term, formatter) {
        return formatter(option).toLowerCase().indexOf((term || '').toLowerCase()) > -1;
    }
    ngOnInit() {
        super.ngOnInit();
        this.popupId = this.id + '_popup';
        this.labelId = this.id + '_label';
        this._updateTitle();
        this._updateFilteredOptions();
        this.mobileViewConfig = {
            title: this.isTablet ? (this.label || this.texts.defaultTitle) : this.texts.defaultTitle,
            cancelCB: null,
            doneBtnTitle: this.texts.doneBtnText,
            fullHeight: this.enableFilter || this.virtualScroll,
            isPicker: this.isTablet,
            doneCB: () => {
                this.popup.close();
            }
        };
        this._quickSearch$
            .pipe(takeUntil(this.destroy$), tap((event) => {
            this._quickSearchTerm += event.key;
            const matchIndexedOption = this.flattenFilteredIndexedOptions.find(indexedOption => this.optionFormatter(indexedOption.option).toLowerCase().startsWith((this._quickSearchTerm).toLowerCase()));
            if (matchIndexedOption) {
                if (this.multiple) {
                    this.deselectAllOptions(false);
                }
                this.markOptionAsActive(matchIndexedOption);
                this._scrollToActiveResultItem();
                this.selectOption(this.activeOption, false);
            }
        }), debounceTime(500))
            .subscribe(() => {
            this._quickSearchTerm = '';
        });
        // Collect information about selection state on init to send telemetry
        this._selectedOptionsOnInit = [...this.selectedOptions];
        // Subscribe on first model change to get model value
        this.ngControl.valueChanges
            .pipe(take(1), takeUntil(this.destroy$))
            .subscribe(value => {
            if (value === null || value === void 0 ? void 0 : value.length) {
                this._selectedOptionsOnInit = [...value];
            }
        });
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this._isDesktop) {
            this._resize$
                .pipe(throttleTime(100, asyncScheduler, { trailing: true }), takeUntil(this.destroy$))
                .subscribe(() => {
                this._checkPopupOnResize();
            });
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        if (this._isDesktop && !this.inline) {
            this._resizeService.removeResizeEventListener(this.selectButtonRef.nativeElement);
        }
    }
    trackByIndexedOption(index, indexedOption) {
        return indexedOption.index;
    }
    get isEmptyState() {
        var _a, _b;
        return !((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) && (this.emptyOption ? !((_b = this.selectedOptions) === null || _b === void 0 ? void 0 : _b.length) : true);
    }
    /**
     * Check if the control has UI error state
     */
    get hasDangerState() {
        return this.adaptRxFeedbackRef.hasUIErrorState;
    }
    // Custom actions config
    get customActions() {
        return [
            {
                name: this.filterValue ? this.texts.checkAllFilter : this.texts.checkAll,
                visible: this.isCheckAllVisible(),
                onClick: this.selectAllOptions.bind(this)
            },
            {
                name: this.filterValue ? this.texts.uncheckAllFilter : this.texts.uncheckAll,
                visible: this.isUnCheckAllVisible(),
                onClick: this.deselectAllOptions.bind(this)
            }
        ];
    }
    // Show controls section
    get showControls() {
        return this.flattenFilteredIndexedOptions.length &&
            (this.inline || this.isMobile || ((this.selectAllButton || this.deselectAllButton)));
    }
    get popupStyle() {
        const _popupMaxHeight = isNil(this.popupMaxHeight) ? 'auto' :
            typeof this.popupMaxHeight === 'string' ? this.popupMaxHeight : `${this.popupMaxHeight}px`;
        return {
            maxHeight: this.inline || this.isTablet || (this.isMobile && this.mobileViewConfig.fullHeight) ? 'auto' : (this.isMobile ? '60vh' : _popupMaxHeight),
            height: this.inline ? _popupMaxHeight : '100%'
        };
    }
    get displayedOptionsCount() {
        const optionsCount = this.flattenFilteredIndexedOptions.length;
        if (this.pageSize && !this.loadMoreCallback) {
            const newPageSize = this.pageSize * this._pageNumber;
            return optionsCount < newPageSize ? optionsCount : newPageSize;
        }
        else {
            return optionsCount;
        }
    }
    get showLoadMoreButton() {
        return (this.loadMoreButton && isFunction(this.loadMoreCallback)) ||
            this.loadMoreInProgress ||
            (this.pageSize && this.flattenFilteredIndexedOptions.length > this.displayedOptionsCount);
    }
    /**
     * Configure 'selectAllOptions' button
     */
    isCheckAllVisible() {
        if (this.selectAllButton) {
            return this.flattenFilteredIndexedOptions.length > 0 && !this.isEveryFilteredOptionsSelected();
        }
        return false;
    }
    /**
     * Configure 'deselectAllOptions' button
     */
    isUnCheckAllVisible() {
        if (this.deselectAllButton) {
            return this.flattenFilteredIndexedOptions.length > 0 && this.isSomeFilteredOptionsSelected();
        }
        return false;
    }
    /**
     * Check if at least one of filtered items selected to show 'Clear filtered' button
     */
    isSomeFilteredOptionsSelected() {
        return this.flattenFilteredIndexedOptions.some(option => this.isOptionSelectedPipe.transform(this.selectedOptionsMap, option) && !this.disabledOptionResolver(option.option));
    }
    /**
     * Check if all of filtered items selected to show 'Select filtered' button
     */
    isEveryFilteredOptionsSelected() {
        return this.flattenFilteredIndexedOptions.every((option) => {
            return this.disabledOptionResolver(option.option) || this.isOptionSelectedPipe.transform(this.selectedOptionsMap, option);
        });
    }
    /**
     * Check if passed option active
     */
    isOptionActive(option) {
        return isEqual(option, this.activeOption);
    }
    /**
     * Select button (click) handler
     */
    selectButtonClickHandler(e) {
        // Prevent popup opening if disabled or readonly
        if (this.nonInteractive) {
            return;
        }
        this.popup.toggle(e);
        // Set popup width as same as select button's one
        if (this._isDesktop) {
            this._checkPopupOnResize();
        }
    }
    /**
     * Select button (keydown) handler
     */
    selectButtonKeydownHandler(event) {
        if (!this.nonInteractive && !this.inline && !this.popup.isOpen()) {
            if (getEventKeyCode(event) === DOWN_ARROW) {
                event.preventDefault();
                this.popup.open();
            }
        }
        this._quickSearch$.next(event);
    }
    /**
     * Select block keydown handler
     * Keyboard navigation between options
     */
    selectOptionsListKeydownHandler(event) {
        if (document.activeElement === this.selectOptionsListRef.nativeElement) {
            switch (getEventKeyCode(event)) {
                case DOWN_ARROW: {
                    event.preventDefault();
                    const isLast = this._activateNextOption();
                    if (isLast && this.loadMoreButtonRef) {
                        // If last item is active and can be load more data, shift focus to loadMoreButton
                        this.loadMoreButtonRef.nativeElement.focus();
                    }
                    break;
                }
                case UP_ARROW: {
                    event.preventDefault();
                    this._activatePrevOption();
                    break;
                }
                case SPACE:
                case ENTER: {
                    if (this.activeOption !== undefined) {
                        event.preventDefault();
                        event.stopPropagation();
                        if (this.activeOption === null) {
                            this.selectEmptyOption();
                        }
                        else {
                            this.selectOption(this.activeOption);
                        }
                    }
                    break;
                }
                default: {
                    this._quickSearch$.next(event);
                }
            }
        }
    }
    /**
     * Mark the option as active
     */
    markOptionAsActive(option) {
        // Only for keyboard and mouseenter interaction, so check active only for desktop
        if (this._isDesktop) {
            this.activeOption = option;
            this._checkActiveDescendant();
        }
    }
    /**
     * Returns option ID for accessibility
     */
    getOptionId(indexedOption) {
        return `${this.popupId}-${!isNil(indexedOption) ? indexedOption.index : 'none'}`;
    }
    /**
     * Filter value change handler
     */
    filterValueChangeHandler(value) {
        this.onFilterValueChange.emit(value);
        this._updateFilteredOptions();
        // Force delete active option to prevent selection of non-visible active option
        this.activeOption = undefined;
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxSelect, {
            GroupName: this.adaptRadarGroupName,
            EventType: AdaptRadarAngularCustomEventType.Search,
            Label: this.label,
            DefaultNumberOfSelectedItems: this._selectedOptionsOnInit.length,
            NumberOfSelectedItems: this.selectedOptions.length,
        });
    }
    /**
     * Popup toggle handler
     */
    popupOpenChangeHandler(isOpen) {
        this.onPopupOpenChange.emit(isOpen);
        if (isOpen) {
            if (this._isDesktop) {
                this._resizeService.addResizeEventListener(this.selectButtonRef.nativeElement, this._resize$.next.bind(this._resize$));
            }
            this._updateFilteredOptions();
            this._ngZone.onStable
                .pipe(takeUntil(this.destroy$), take(1))
                .subscribe(() => {
                this._moveFocusToPopup();
            });
        }
        else {
            if (this._isDesktop) {
                this._resizeService.removeResizeEventListener(this.selectButtonRef.nativeElement);
            }
            this._onTouched();
            this.activeOption = undefined;
            this.activeDescendant = undefined;
            this._ngZone.onStable
                .pipe(takeUntil(this.destroy$), take(1))
                .subscribe(() => {
                // Remove filter value after popup close
                this.filterValue = '';
            });
        }
    }
    /**
     * Handle select options focus
     */
    selectBlockFocusHandler() {
        if ((this.focusFirst || this.selectedOptions.length) && !this.activeOption) {
            this._activateNextOption();
        }
        if (!this.filteredIndexedOptions.length && this.loadMoreButtonRef) {
            this.loadMoreButtonRef.nativeElement.focus();
        }
    }
    /**
     * Handle select options blur
     */
    selectBlockBlurHandler() {
        if (this.inline) {
            this._onTouched();
        }
    }
    blurHandler(event) {
        super.blurHandler(event);
        if (!this.popup.isOpen()) {
            this._onTouched();
        }
    }
    /**
     * Deselect all selected options
     */
    selectEmptyOption() {
        this.setModel([]);
        if (!this.multiple && this.closeOnSelect && this.popup) {
            this.popup.close();
        }
    }
    /**
     * Select passed option
     */
    selectOption(optionToSelect, closePopup = true) {
        if (this.nonInteractive) {
            return;
        }
        // Check if optionToSelect already selected: get selected option index in selectedOptions
        const isAlreadySelected = this.isOptionSelectedPipe.transform(this.selectedOptionsMap, optionToSelect);
        if (this.multiple) {
            // Select an option or deselect in case it was already selected
            const newSelectedOptions = isAlreadySelected ?
                differenceWith(this.selectedOptions, [optionToSelect.option], isEqual) : union(this.selectedOptions, [optionToSelect.option]);
            this.setModel(newSelectedOptions);
        }
        else {
            // Select an option if it's not selected yet
            if (!isAlreadySelected) {
                this.setModel([optionToSelect.option]);
            }
            if (closePopup && this.closeOnSelect && this.popup) {
                this.popup.close();
            }
        }
        SafeCdr.detectChanges(this._changeDetectorRef);
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxSelect, {
            GroupName: this.adaptRadarGroupName,
            EventType: AdaptRadarAngularCustomEventType.Click,
            Label: this.label,
            Required: this.required,
            Disabled: this.disabled,
            ReadOnly: this.readonly,
            SelectType: this.multiple ? 'multi' : 'single',
            DefaultNumberOfSelectedItems: this._selectedOptionsOnInit.length,
            NumberOfSelectedItems: this.selectedOptions.length,
            // DynamicEntry: boolean,
            FieldSize: this.size
        });
    }
    /**
     * Select all filtered options
     */
    selectAllOptions() {
        // Collect FILTERED ENABLED options
        const filteredEnabledOptions = this.flattenFilteredIndexedOptions
            .filter(optionToSelect => !this.disabledOptionResolver(optionToSelect.option))
            .map(indexedOption => indexedOption.option);
        // Union selected options with filtered ones
        this.setModel(union(this.selectedOptions, filteredEnabledOptions));
        this._moveFocusToPopup();
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxSelect, {
            GroupName: this.adaptRadarGroupName,
            EventType: AdaptRadarAngularCustomEventType.Click,
            Label: this.label,
            Target: 'selectAll',
            DefaultNumberOfSelectedItems: this._selectedOptionsOnInit.length,
            NumberOfSelectedItems: this.selectedOptions.length,
        });
    }
    /**
     * Deselect all filtered options
     */
    deselectAllOptions(moveFocusToPopup = true) {
        if (this.selectedOptions) {
            const filteredSelectedOptions = new Map();
            this.flattenFilteredIndexedOptions.forEach(filteredIndexedOption => {
                if (!this.disabledOptionResolver(filteredIndexedOption.option) && this.selectedOptionsMap.has(this._stringifyObject(filteredIndexedOption.option))) {
                    filteredSelectedOptions.set(this._stringifyObject(filteredIndexedOption.option), filteredIndexedOption.option);
                }
            });
            this.setModel(this.selectedOptions.filter(selectedOption => !filteredSelectedOptions.has(this._stringifyObject(selectedOption))));
        }
        if (moveFocusToPopup) {
            this._moveFocusToPopup();
        }
    }
    /**
     * Set model and update title
     */
    setModel(options) {
        let defaultPrevented = false;
        this.onSelectionChange.emit({
            options: options,
            preventDefault: () => {
                defaultPrevented = true;
            }
        });
        if (!defaultPrevented) {
            this.selectedOptions = options;
            this._onChange(this.selectedOptions);
            this._updateTitle();
        }
        // Mark as touched if inline mode
        if (this.inline) {
            this._onTouched();
        }
    }
    /**
     * Invoke passed loadMoreCallback
     */
    loadMoreItems() {
        if (this.loadMoreInProgress) {
            return;
        }
        if (this.loadMoreCallback) {
            this.loadMoreCallback();
        }
        else {
            this._pageNumber++;
            this._blurLoadMoreButton();
        }
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxSelect, {
            GroupName: this.adaptRadarGroupName,
            EventType: AdaptRadarAngularCustomEventType.Click,
            Label: this.label,
            Target: 'loadMore',
            DefaultNumberOfSelectedItems: this._selectedOptionsOnInit.length,
            NumberOfSelectedItems: this.selectedOptions.length,
        });
    }
    /**
     * Check if the select button tooltip should be shown
     */
    checkIfTooltipNeeded() {
        const hasOverflow = this.titleRef && (this.titleRef.nativeElement.offsetWidth < this.titleRef.nativeElement.scrollWidth);
        this.titleTooltip = hasOverflow ? this.titleFormatter(this.selectedOptions) : null;
    }
    popupMenuKeydown(event, popupMenuElement) {
        if (getEventKeyCode(event) === TAB) {
            const menuFocusableElements = getFocusableElements(popupMenuElement);
            if (event.shiftKey) {
                if (document.activeElement === menuFocusableElements[0]) {
                    this.popup.close();
                }
            }
            else {
                if (document.activeElement === menuFocusableElements[menuFocusableElements.length - 1]) {
                    this.popup.close();
                }
            }
        }
    }
    isGroupView(indexedOptions) {
        return indexedOptions.some(indexedOption => { var _a; return ((_a = indexedOption.children) === null || _a === void 0 ? void 0 : _a.length) > 0; });
    }
    /**
     * ControlValueAccessor item implementation
     */
    writeValue(value) {
        if (Array.isArray(value)) {
            this.selectedOptions = value;
            this._updateTitle();
        }
        else {
            this.selectedOptions = [];
        }
        SafeCdr.detectChanges(this._changeDetectorRef);
    }
    showNoneOption() {
        var _a, _b;
        return !!(((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) || ((_b = this.selectedOptions) === null || _b === void 0 ? void 0 : _b.length)) && this.emptyOption && !this.filterValue;
    }
    // Need to calculate list box height because <cdk-virtual-scroll-viewport> has absolute position
    // and there is no way to calculate height with CSS
    getListBoxHeight() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        if (this.isMobile) {
            return '100%';
        }
        const controlsContainerHeight = (_c = (_b = (_a = this.selectControlsContainer) === null || _a === void 0 ? void 0 : _a.nativeElement) === null || _b === void 0 ? void 0 : _b.offsetHeight) !== null && _c !== void 0 ? _c : 0;
        const loadMoreButtonHeight = (_f = (_e = (_d = this.loadMoreButtonRef) === null || _d === void 0 ? void 0 : _d.nativeElement) === null || _e === void 0 ? void 0 : _e.offsetHeight) !== null && _f !== void 0 ? _f : 0;
        const noneButtonHeight = (_j = (_h = (_g = this.noneButtonRef) === null || _g === void 0 ? void 0 : _g.nativeElement) === null || _h === void 0 ? void 0 : _h.offsetHeight) !== null && _j !== void 0 ? _j : 0;
        const popupMaxHeight = isNil(this.popupMaxHeight)
            ? this.DEFAULT_POPUP_MAX_HEIGHT
            : typeof this.popupMaxHeight === 'string' ? parseFloat(this.popupMaxHeight) : this.popupMaxHeight;
        const height = this.displayedOptionsCount * this.virtualScrollItemSize + loadMoreButtonHeight + noneButtonHeight;
        return `${(height + controlsContainerHeight >= popupMaxHeight ? popupMaxHeight - controlsContainerHeight : height)}px`;
    }
    /**
     * Implementation from the base class
     * Focus the native element if [autofocus] == true
     */
    _focusNativeElement() {
        var _a;
        if (this.inline) {
            this._moveFocusToPopup();
        }
        else {
            (_a = this.selectButtonRef) === null || _a === void 0 ? void 0 : _a.nativeElement.focus();
        }
    }
    _recreateSelectedOptionsMap(options) {
        // Need to recreate Map to create new reference and trigger angular pure pipe
        this.selectedOptionsMap = new Map();
        options.forEach(option => {
            /**
             * Because we need to support setting model which can be a new object that has no reference to objects from "options"
             * we need to create uniq key by creating a string from option.
             * This string will be used to compare is "option" exist in selectedOptionsMap
             */
            this.selectedOptionsMap.set(this._stringifyObject(option), option);
        });
    }
    _stringifyObject(option) {
        return isObject(option) ? JSON.stringify(option).trim() : option;
    }
    /**
     * Update title value
     */
    _updateTitle() {
        this.title = this.titleFormatter(this.selectedOptions);
    }
    /**
     * Default title formatter
     */
    _defaultTitleFormatter() {
        return this.selectedOptions.length
            ? this.selectedOptions
                .filter(option => !isNil(this.optionFormatter(option)))
                .map((option) => this.optionFormatter(option))
                .sort()
                .join(', ')
            : this.texts.defaultTitle;
    }
    _defaultDisabledOptionResolver(option) {
        return !!option.disabled;
    }
    /**
     * Update flatten filtered options
     */
    _updateFilteredOptions() {
        const result = [];
        let index = 0;
        let groupIndex = 0;
        this.options.forEach(option => {
            if (Array.isArray(option.children)) {
                // If there is an options group, take children options and concat to result with structure saving
                const group = {
                    name: option.name,
                    index: index,
                    groupIndex: groupIndex++,
                    children: []
                };
                option.children.forEach(childOption => {
                    if (AdaptRxSelectComponent.TestSearchOption(childOption, this.filterValue, this.optionFormatter)) {
                        // group.children.push(childOption);
                        group.children.push({
                            index: index++,
                            option: childOption
                        });
                    }
                });
                if (group.children.length) {
                    // Push all the group to save group layout in the select popup
                    result.push(group);
                }
            }
            else {
                // If there is an option, add it to result
                if (AdaptRxSelectComponent.TestSearchOption(option, this.filterValue, this.optionFormatter)) {
                    // result.push(option);
                    result.push({
                        index: index++,
                        option: option
                    });
                }
            }
        });
        this.filteredIndexedOptions = result;
        this.flattenFilteredIndexedOptions = flatMapDeep(this.filteredIndexedOptions, (indexedOption) => {
            return Array.isArray(indexedOption.children)
                ? indexedOption.children
                : [indexedOption];
        });
        if (this.virtualScroll && this.isGroupView(this.filteredIndexedOptions)) {
            // For the virtual scroll we need to create flatt array from grouped options because CDK Scroll doesn't support nested for loop
            // https://github.com/angular/components/issues/24008
            this.flattenFilteredGroupIndexedOptions = flatMapDeep(this.filteredIndexedOptions, (indexedOption) => {
                return Array.isArray(indexedOption.children)
                    ? [indexedOption, ...indexedOption.children]
                    : [indexedOption];
            }).map((indexedOption, index) => {
                // Rewrite indexes so the flatt array with groups will have a correct one
                return Object.assign(Object.assign({}, indexedOption), { index });
            });
        }
        else {
            this.flattenFilteredGroupIndexedOptions = null;
        }
    }
    /**
     * Activate the next option from filtered options list
     */
    _activateNextOption() {
        const lastActiveOption = cloneDeep(this.activeOption);
        // Collect FILTERED ENABLED options (only displayed on current page)
        const filteredEnabledOptions = this.flattenFilteredIndexedOptions
            .slice(0, this.displayedOptionsCount)
            .filter(optionToSelect => !this.disabledOptionResolver(optionToSelect.option));
        const defaultFirstOption = this.emptyOption ? null : filteredEnabledOptions[0];
        if (filteredEnabledOptions.length) {
            if (this.activeOption) {
                const activeOptionIndex = indexOf(filteredEnabledOptions, this.activeOption);
                const nextActiveOption = filteredEnabledOptions[activeOptionIndex + 1];
                if (nextActiveOption) {
                    this.activeOption = nextActiveOption;
                }
            }
            else if (this.activeOption === null) {
                this.activeOption = filteredEnabledOptions[0];
            }
            else {
                if (this.selectedOptions.length) {
                    this.activeOption = filteredEnabledOptions.find(filteredOption => this.isOptionSelectedPipe.transform(this.selectedOptionsMap, filteredOption));
                }
                this.activeOption = this.activeOption || defaultFirstOption;
            }
        }
        else {
            this.activeOption = undefined;
        }
        this._checkActiveDescendant();
        this._scrollToActiveResultItem();
        return isEqual(this.activeOption, lastActiveOption);
    }
    /**
     * Activate the prev result from filtered options list
     */
    _activatePrevOption() {
        const lastActiveOption = cloneDeep(this.activeOption);
        // Collect FILTERED ENABLED options
        const filteredEnabledOptions = this.flattenFilteredIndexedOptions.filter(optionToSelect => !this.disabledOptionResolver(optionToSelect.option));
        const defaultFirstOption = this.emptyOption ? null : filteredEnabledOptions[0];
        if (filteredEnabledOptions.length) {
            if (this.activeOption) {
                const activeOptionIndex = indexOf(filteredEnabledOptions, this.activeOption);
                const nextActiveOption = filteredEnabledOptions[activeOptionIndex - 1];
                this.activeOption = nextActiveOption || defaultFirstOption;
            }
            else {
                this.activeOption = defaultFirstOption;
            }
        }
        else {
            this.activeOption = undefined;
        }
        this._checkActiveDescendant();
        this._scrollToActiveResultItem();
        return isEqual(this.activeOption, lastActiveOption);
    }
    /**
     * Handle active result changed
     */
    _checkActiveDescendant() {
        // Update activeDescendant according to active option
        this.activeDescendant = this.getOptionId(this.activeOption);
    }
    /**
     * Scroll to active result item
     */
    _scrollToActiveResultItem() {
        this._ngZone.onStable.pipe(take(1), takeUntil(this.destroy$)).subscribe(() => {
            const activeItem = document.querySelector(`#${this.popupId} .${this.ACTIVE_OPTION_CLASS}`);
            if (activeItem) {
                activeItem.scrollIntoView({ block: 'nearest', inline: 'nearest' });
            }
        });
    }
    /**
     * Focus the element in the popup according to config
     */
    _moveFocusToPopup() {
        var _a, _b, _c, _d;
        // In PROD mode this.loadingStateBlockRef is undefined
        // Add extra change detection to prevent fix it
        // https://github.bmc.com/bmc-ux/adapt-angular/issues/6726
        SafeCdr.detectChanges(this._changeDetectorRef);
        const fallbackFocusElement = (this.loadingState ? (_a = this.loadingStateBlockRef) === null || _a === void 0 ? void 0 : _a.nativeElement :
            (this.enableFilter ? (_b = this.searchComponent) === null || _b === void 0 ? void 0 : _b.inputRef.nativeElement : (_c = this.selectOptionsListRef) === null || _c === void 0 ? void 0 : _c.nativeElement))
            || ((_d = this.emptyStateElementRef) === null || _d === void 0 ? void 0 : _d.nativeElement);
        fallbackFocusElement === null || fallbackFocusElement === void 0 ? void 0 : fallbackFocusElement.focus();
    }
    _getDefaultTexts(translation) {
        return {
            checkAll: translation['adapt.select.checkAll'],
            checkAllFilter: translation['adapt.select.checkAllFilter'],
            uncheckAll: translation['adapt.select.uncheckAll'],
            uncheckAllFilter: translation['adapt.select.uncheckAllFilter'],
            filteredTo: translation['adapt.select.filteredTo'],
            checked: translation['adapt.select.checked'],
            checkedPlural: translation['adapt.select.checkedPlural'],
            checkedAll: translation['adapt.select.checkedAll'],
            searchPlaceholder: translation['adapt.select.searchPlaceholder'],
            defaultTitle: translation['adapt.select.defaultTitle'],
            headerText: translation['adapt.select.headerText'],
            headerTextSingle: translation['adapt.select.headerTextSingle'],
            notFound: translation['adapt.select.notFound'],
            requiredText: translation['adapt.common.required'],
            cancelBtnText: translation['adapt.common.cancel'],
            doneBtnText: translation['adapt.common.done'],
            titleMobileText: translation['adapt.select.titleMobileText'],
            loadingText: translation['adapt.select.loadingText'],
            emptyOptionText: translation['adapt.select.emptyOptionText'],
            loadMore: translation['adapt.select.loadMore'],
            numberOptionsText: translation['adapt.select.numberOptionsText'],
            emptyStateTitle: translation['adapt.select.emptyStateTitle'],
            emptyStateDescription: translation['adapt.select.emptyStateDescription'],
            pressTabToGoToLoadMoreButton: translation['adapt.select.pressTabToGoToLoadMoreButton']
        };
    }
    _checkPopupOnResize() {
        this.popupWidth = `${this.selectButtonRef.nativeElement.offsetWidth}px`;
        SafeCdr.detectChanges(this._changeDetectorRef);
    }
    _blurLoadMoreButton() {
        var _a, _b;
        if (document.activeElement === ((_a = this.loadMoreButtonRef) === null || _a === void 0 ? void 0 : _a.nativeElement)) {
            (_b = this.selectOptionsListRef) === null || _b === void 0 ? void 0 : _b.nativeElement.focus();
        }
    }
}
AdaptRxSelectComponent.ɵfac = function AdaptRxSelectComponent_Factory(t) { return new (t || AdaptRxSelectComponent)(i0.ɵɵdirectiveInject(i1.NgControl, 10), i0.ɵɵdirectiveInject(i2.AdaptRxSelectConfigService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i4.ResizeService), i0.ɵɵdirectiveInject(i5.AdaptOverlayService), i0.ɵɵdirectiveInject(i6.AdaptTranslateService), i0.ɵɵdirectiveInject(i7.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i8.AdaptIsOptionSelectedPipe)); };
AdaptRxSelectComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptRxSelectComponent, selectors: [["adapt-rx-select"]], viewQuery: function AdaptRxSelectComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
        i0.ɵɵviewQuery(_c1, 5);
        i0.ɵɵviewQuery(_c2, 5);
        i0.ɵɵviewQuery(_c3, 5);
        i0.ɵɵviewQuery(_c4, 5);
        i0.ɵɵviewQuery(_c5, 5);
        i0.ɵɵviewQuery(_c6, 7);
        i0.ɵɵviewQuery(_c7, 5);
        i0.ɵɵviewQuery(_c8, 5);
        i0.ɵɵviewQuery(_c9, 5);
        i0.ɵɵviewQuery(_c10, 5);
        i0.ɵɵviewQuery(_c11, 5);
        i0.ɵɵviewQuery(_c12, 5);
        i0.ɵɵviewQuery(_c13, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectOptionsContainerRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.searchComponent = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectOptionsListRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.emptyStateElementRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectButtonRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.titleRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.adaptRxFeedbackRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popup = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectControlsContainer = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectCustomActionsContainer = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.selectCounterContainer = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.loadMoreButtonRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.noneButtonRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.loadingStateBlockRef = _t.first);
    } }, hostVars: 2, hostBindings: function AdaptRxSelectComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("rx-select-dropdown", ctx.defaultHostClass);
    } }, inputs: { options: "options", emptyOption: "emptyOption", optionFormatter: "optionFormatter", optionContentTemplate: "optionContentTemplate", disabledOptionResolver: "disabledOptionResolver", titleFormatter: "titleFormatter", focusFirst: "focusFirst", texts: "texts", multiple: "multiple", singleSelectStyle: "singleSelectStyle", enableFilter: "enableFilter", inline: "inline", selectAllButton: "selectAllButton", deselectAllButton: "deselectAllButton", loadMoreButton: "loadMoreButton", loadMoreCallback: "loadMoreCallback", loadMoreInProgress: "loadMoreInProgress", loadingState: "loadingState", placeholder: "placeholder", size: "size", closeOnSelect: "closeOnSelect", placement: "placement", appendToBody: "appendToBody", popupMaxHeight: "popupMaxHeight", popupClass: "popupClass", pageSize: "pageSize", ariaInvalid: "ariaInvalid", virtualScroll: "virtualScroll", virtualScrollItemSize: "virtualScrollItemSize", virtualScrollTemplateCacheSize: "virtualScrollTemplateCacheSize", minBufferPx: "minBufferPx", maxBufferPx: "maxBufferPx" }, outputs: { onSelectionChange: "onSelectionChange", onPopupOpenChange: "onPopupOpenChange", onFilterValueChange: "onFilterValueChange" }, features: [i0.ɵɵInheritDefinitionFeature], decls: 28, vars: 19, consts: [[3, "for", "id", "label", "subLabel", "requiredLabel", "showRequiredLabel", "tooltip", "testID"], [4, "ngIf", "ngIfThen", "ngIfElse"], [3, "ariaErrorMessage", "errors", "warningMessage", "controlTouched", "messageAppeared"], ["adaptRxFeedbackRef", ""], ["defaultOptionContentTemplateRef", ""], ["optionTemplateRef", ""], ["optionsListTemplateRef", ""], ["selectInlineTemplateRef", ""], ["selectDropdownTemplateRef", ""], ["selectNoneButtonTemplateRef", ""], ["selectLoadMoreTemplateRef", ""], [2, "white-space", "normal", "word-break", "break-word"], ["type", "button", "role", "option", "tabindex", "-1", 1, "rx-select__option", "dropdown-item", 3, "id", "ngClass", "disabled", "click", "mouseenter"], ["class", "rx-select__option-marker", 4, "ngIf"], [1, "rx-select__option-content"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "rx-select__option-marker"], ["class", "checkbox m-0", 4, "ngIf"], ["class", "radio m-0", 4, "ngIf"], [1, "checkbox", "m-0"], ["type", "checkbox", "role", "checkbox", "tabindex", "-1", 1, "checkbox__input", 3, "checked", "disabled"], [1, "checkbox__item"], [1, "radio", "m-0"], ["type", "radio", "role", "radio", "tabindex", "-1", 3, "checked", "disabled"], [1, "radio__item"], ["class", "d-flex flex-column", 3, "ngStyle", 4, "ngIf"], ["role", "status", "tabindex", "0", "class", "select-loader-container keyboard-focusable", 4, "ngIf"], [1, "d-flex", "flex-column", 3, "ngStyle"], ["selectOptionsContainerRef", ""], ["selectControlsContainer", ""], ["class", "rx-select__search-wrapper", 3, "click", 4, "ngIf"], ["class", "rx-select__controls", 3, "ngClass", 4, "ngIf"], ["class", "rx-select__options", "role", "listbox", 3, "id", "maxHeight", "focus", "blur", "keydown", 4, "ngIf"], [4, "ngIf"], [1, "rx-select__search-wrapper", 3, "click"], [3, "adaptRadarDisableEventSending", "ngModel", "ariaControlsPopupId", "ariaActiveDescendant", "placeholder", "autofocus", "testID", "disabled", "ngModelChange"], ["searchComponent", ""], [1, "rx-select__controls", 3, "ngClass"], ["class", "font-weight-bold m-end-3", 4, "ngIf"], ["class", "d-flex flex-wrap", 3, "ngClass", 4, "ngIf"], [1, "font-weight-bold", "m-end-3"], [1, "d-flex", "flex-wrap", 3, "ngClass"], ["selectCounterContainer", ""], ["class", "rx-select__filter-status text-tertiary p-end-3", 4, "ngIf"], [1, "rx-select__filter-status", "text-tertiary", "p-end-3"], ["selectCustomActionsContainer", ""], [1, "flex-wrap", 3, "actions", "adaptRadarDisableEventSending"], ["role", "listbox", 1, "rx-select__options", 3, "id", "focus", "blur", "keydown"], ["selectOptionsListRef", ""], [1, "rx-select__options-scroll-block"], [3, "ngTemplateOutlet"], ["ngFor", "", 3, "ngForOf", "ngForTrackBy"], ["role", "group"], [1, "dropdown-header"], [3, "itemSize", "minBufferPx", "maxBufferPx"], ["cdkVirtualFor", "", 3, "cdkVirtualForOf", "cdkVirtualForTemplateCacheSize", "cdkVirtualForTrackBy"], ["class", "dropdown-header", 4, "ngIf"], [4, "ngIf", "ngIfElse"], ["emptyStateTemplate", ""], ["role", "presentation", "tabindex", "0", 1, "rx-select__empty-state-wrapper", "keyboard-focusable"], ["emptyStateElementRef", ""], ["type", "search", 3, "adaptRadarDisableEventSending", "label"], ["class", "rx-select__empty-state-wrapper keyboard-focusable", "role", "presentation", "tabindex", "0", 4, "ngIf"], ["type", "objects", 1, "d-block", "mt-2", 3, "adaptRadarDisableEventSending", "label"], [1, "empty-info"], [1, "text-tertiary"], ["role", "status", "tabindex", "0", 1, "select-loader-container", "keyboard-focusable"], ["loadingStateBlockRef", ""], [1, "loader-container"], [1, "loader-section"], [1, "rx-select__options-wrapper"], ["adaptDropdown", "", 3, "adaptRadarDisableEventSending", "holdFocusInMenu", "restoreFocusAfterClose", "focusNextElementAfterClose", "autoFocusFirst", "placement", "appendToBody", "autoClose", "mobileView", "onOpen", "onClose", 4, "ngIf"], ["adaptDropdown", "", 3, "adaptRadarDisableEventSending", "holdFocusInMenu", "restoreFocusAfterClose", "focusNextElementAfterClose", "autoFocusFirst", "placement", "appendToBody", "autoClose", "mobileView", "onOpen", "onClose"], ["adaptDropdownDirective", "adaptDropdown"], ["adaptDropdownAnchor", "", "type", "button", "role", "button", 1, "dropdown-toggle", "btn", "btn-secondary", "btn-block", "align-start", 3, "adaptTooltip", "adaptRadarDisableEventSending", "placement", "id", "disabled", "autofocus", "click", "focus", "blur", "mouseenter", "keydown"], ["selectButtonRef", ""], [1, "rx-select__search-button-title"], ["titleRef", ""], ["adaptDropdownMenuTemplate", ""], [1, "dropdown-menu", "h-100", 3, "ngClass", "keydown"], ["popupMenu", ""], ["type", "button", "role", "option", "tabindex", "-1", 1, "rx-select__option", "dropdown-item", 3, "id", "ngClass", "click", "mouseenter"], ["noneButtonRef", ""], ["type", "button", "role", "button", 1, "btn", "btn-link", 3, "adaptInlineLoader", "activeText", "click"], ["loadMoreButtonRef", ""]], template: function AdaptRxSelectComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "adapt-rx-control-label", 0);
        i0.ɵɵtext(1, "\n\n");
        i0.ɵɵtemplate(2, AdaptRxSelectComponent_ng_container_2_Template, 1, 0, "ng-container", 1);
        i0.ɵɵtext(3, "\n\n");
        i0.ɵɵelementStart(4, "adapt-rx-feedback", 2, 3);
        i0.ɵɵlistener("messageAppeared", function AdaptRxSelectComponent_Template_adapt_rx_feedback_messageAppeared_4_listener($event) { return ctx.handleMessageAppeared($event, ctx.analyticsComponentName.AdaptRxSelect); });
        i0.ɵɵelementEnd();
        i0.ɵɵtext(6, "\n\n");
        i0.ɵɵtemplate(7, AdaptRxSelectComponent_ng_template_7_Template, 4, 1, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(9, "\n\n");
        i0.ɵɵtemplate(10, AdaptRxSelectComponent_ng_template_10_Template, 12, 16, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(12, "\n\n");
        i0.ɵɵtemplate(13, AdaptRxSelectComponent_ng_template_13_Template, 5, 2, "ng-template", null, 6, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(15, "\n\n");
        i0.ɵɵtemplate(16, AdaptRxSelectComponent_ng_template_16_Template, 6, 1, "ng-template", null, 7, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(18, "\n\n");
        i0.ɵɵtemplate(19, AdaptRxSelectComponent_ng_template_19_Template, 3, 1, "ng-template", null, 8, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(21, "\n\n");
        i0.ɵɵtemplate(22, AdaptRxSelectComponent_ng_template_22_Template, 3, 1, "ng-template", null, 9, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(24, "\n\n");
        i0.ɵɵtemplate(25, AdaptRxSelectComponent_ng_template_25_Template, 3, 1, "ng-template", null, 10, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(27, "\n");
    } if (rf & 2) {
        const _r8 = i0.ɵɵreference(17);
        const _r10 = i0.ɵɵreference(20);
        i0.ɵɵclassProp("has-danger", ctx.hasDangerState)("has-warning", ctx.warningMessage);
        i0.ɵɵproperty("for", ctx.inline ? ctx.popupId : ctx.id)("id", ctx.labelId)("label", ctx.label)("subLabel", ctx.subLabel)("requiredLabel", ctx.requiredLabel)("showRequiredLabel", ctx.required)("tooltip", ctx.tooltip)("testID", ctx.testID);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.inline)("ngIfThen", _r8)("ngIfElse", _r10);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ariaErrorMessage", ctx.ariaErrorMessage)("errors", ctx.ngControl.errors)("warningMessage", ctx.warningMessage)("controlTouched", ctx.ngControl.touched);
    } }, encapsulation: 2, data: { animation: [
            trigger('filterStatusAnimation', [
                transition(':enter', [
                    style({ width: 0, opacity: 0 }),
                    animate('0.2s ease-in', style({ width: '*', opacity: 1 }))
                ]),
                transition(':leave', [
                    style({ width: '*', opacity: 1 }),
                    animate('0.2s ease-out', style({ width: 0, opacity: 0 }))
                ])
            ]),
            trigger('heightAnimation', [
                transition('void => *', [
                    useAnimation(ANIMATION_NAME.height, {
                        params: {
                            from: '0',
                            to: '*'
                        }
                    })
                ]),
                transition('* => void', [
                    useAnimation(ANIMATION_NAME.height, {
                        params: {
                            from: '*',
                            to: '0'
                        }
                    })
                ])
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxSelectComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-rx-select',
                templateUrl: './adapt-rx-select.component.html',
                animations: [
                    trigger('filterStatusAnimation', [
                        transition(':enter', [
                            style({ width: 0, opacity: 0 }),
                            animate('0.2s ease-in', style({ width: '*', opacity: 1 }))
                        ]),
                        transition(':leave', [
                            style({ width: '*', opacity: 1 }),
                            animate('0.2s ease-out', style({ width: 0, opacity: 0 }))
                        ])
                    ]),
                    trigger('heightAnimation', [
                        transition('void => *', [
                            useAnimation(ANIMATION_NAME.height, {
                                params: {
                                    from: '0',
                                    to: '*'
                                }
                            })
                        ]),
                        transition('* => void', [
                            useAnimation(ANIMATION_NAME.height, {
                                params: {
                                    from: '*',
                                    to: '0'
                                }
                            })
                        ])
                    ])
                ]
            }]
    }], function () { return [{ type: i1.NgControl, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }, { type: i2.AdaptRxSelectConfigService }, { type: i0.ChangeDetectorRef }, { type: i3.AdaptDeviceDetectionService }, { type: i0.NgZone }, { type: i0.Renderer2 }, { type: i4.ResizeService }, { type: i5.AdaptOverlayService }, { type: i6.AdaptTranslateService }, { type: i7.AdaptRadarAngularService }, { type: i0.ElementRef }, { type: i8.AdaptIsOptionSelectedPipe }]; }, { defaultHostClass: [{
            type: HostBinding,
            args: ['class.rx-select-dropdown']
        }], options: [{
            type: Input
        }], emptyOption: [{
            type: Input
        }], optionFormatter: [{
            type: Input
        }], optionContentTemplate: [{
            type: Input
        }], disabledOptionResolver: [{
            type: Input
        }], titleFormatter: [{
            type: Input
        }], focusFirst: [{
            type: Input
        }], texts: [{
            type: Input
        }], multiple: [{
            type: Input
        }], singleSelectStyle: [{
            type: Input
        }], enableFilter: [{
            type: Input
        }], inline: [{
            type: Input
        }], selectAllButton: [{
            type: Input
        }], deselectAllButton: [{
            type: Input
        }], loadMoreButton: [{
            type: Input
        }], loadMoreCallback: [{
            type: Input
        }], loadMoreInProgress: [{
            type: Input
        }], loadingState: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], size: [{
            type: Input
        }], closeOnSelect: [{
            type: Input
        }], placement: [{
            type: Input
        }], appendToBody: [{
            type: Input
        }], popupMaxHeight: [{
            type: Input
        }], popupClass: [{
            type: Input
        }], pageSize: [{
            type: Input
        }], ariaInvalid: [{
            type: Input
        }], virtualScroll: [{
            type: Input
        }], virtualScrollItemSize: [{
            type: Input
        }], virtualScrollTemplateCacheSize: [{
            type: Input
        }], minBufferPx: [{
            type: Input
        }], maxBufferPx: [{
            type: Input
        }], onSelectionChange: [{
            type: Output
        }], onPopupOpenChange: [{
            type: Output
        }], onFilterValueChange: [{
            type: Output
        }], selectOptionsContainerRef: [{
            type: ViewChild,
            args: ['selectOptionsContainerRef', { static: false }]
        }], searchComponent: [{
            type: ViewChild,
            args: ['searchComponent', { static: false }]
        }], selectOptionsListRef: [{
            type: ViewChild,
            args: ['selectOptionsListRef', { static: false }]
        }], emptyStateElementRef: [{
            type: ViewChild,
            args: ['emptyStateElementRef', { static: false }]
        }], selectButtonRef: [{
            type: ViewChild,
            args: ['selectButtonRef', { static: false }]
        }], titleRef: [{
            type: ViewChild,
            args: ['titleRef', { static: false }]
        }], adaptRxFeedbackRef: [{
            type: ViewChild,
            args: ['adaptRxFeedbackRef', { static: true }]
        }], popup: [{
            type: ViewChild,
            args: ['adaptDropdownDirective', { static: false }]
        }], selectControlsContainer: [{
            type: ViewChild,
            args: ['selectControlsContainer', { static: false }]
        }], selectCustomActionsContainer: [{
            type: ViewChild,
            args: ['selectCustomActionsContainer', { static: false }]
        }], selectCounterContainer: [{
            type: ViewChild,
            args: ['selectCounterContainer', { static: false }]
        }], loadMoreButtonRef: [{
            type: ViewChild,
            args: ['loadMoreButtonRef', { static: false }]
        }], noneButtonRef: [{
            type: ViewChild,
            args: ['noneButtonRef', { static: false }]
        }], loadingStateBlockRef: [{
            type: ViewChild,
            args: ['loadingStateBlockRef', { static: false }]
        }] }); })();
//# sourceMappingURL=adapt-rx-select.component.js.map