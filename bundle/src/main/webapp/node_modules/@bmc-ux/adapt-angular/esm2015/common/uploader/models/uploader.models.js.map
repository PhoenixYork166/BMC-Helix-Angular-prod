{"version":3,"file":"uploader.models.js","sourceRoot":"","sources":["../../../../../../../libs/adapt-angular/src/common/uploader/models/uploader.models.ts"],"names":[],"mappings":"","sourcesContent":["import {Provider} from '@angular/core';\nimport {MessageStatus} from '../../common.enums';\nimport {UploaderMode} from '../enums/uploader.enum';\n\nexport interface ChunkData {\n  start: number;\n  end: number;\n  isEmpty?: boolean;\n}\n\nexport interface FileObj {\n  data: File | FileSystemEntry;\n  fileId?: string;\n  inUploading: boolean;\n  inDeleting: boolean;\n  uploaded: number;\n  error: boolean;\n  errorText: string;\n  // TODO: Refactor this if possible\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  timer?: any;\n  allowDeletion?: boolean;\n  deleted?: boolean;\n  // TODO: Refactor this if possible\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  response?: any;\n  totalFileSize?: number;\n  cancelUploading?: boolean;\n  canceled?: boolean;\n  downloadURL?: string;\n  ok?: boolean;\n}\n\nexport interface StartFileUploadingEvent extends FileObj {\n  id: number;\n}\n\ninterface FileErrorsGeneral<T> {\n  maxSize?: T;\n  minSize?: T;\n  typeGeneral?: T;\n  typeList?: T;\n  count?: T;\n  duplicates?: T;\n  folderSuppress?: T;\n  fileSuppress?: T;\n  genericErrorMessage?: T;\n  removeErrorMessage?: T;\n}\n\nexport type FileErrorsMessages = FileErrorsGeneral<{ errorMessage: string; files: (File | FileSystemEntry)[] }>;\n\nexport type FileErrors = FileErrorsGeneral<string>;\n\nexport interface RequestBody {\n  id: number;\n  chunksTotal: number;\n  data: File | FileSystemEntry | Uint8Array;\n  name: string;\n  checkSum?: number;\n  fullPath?: string;\n  totalFileSize?: number;\n}\n\nexport interface CommonUploadInputs {\n  chunkSize: number;\n  uploadUrl: string;\n  customErrors: boolean;\n}\n\nexport interface UploaderConfig extends CommonUploadInputs {\n  allowDeletion: boolean;\n  uploadMode: UploaderMode;\n  suppressParallel: boolean;\n  allowDuplicates: boolean;\n  maxFileSize: number;\n  allowedTypes: string[];\n  forbiddenTypes?: string[];\n  filesCount: number;\n  deleteUrl: string;\n}\n\nexport interface UploaderTexts {\n  fileBtn?: string;\n  folderBtn?: string;\n  allowedTypes?: string;\n  fileTypesDivider?: string;\n  maxFileSize?: string;\n  minFileSize?: string;\n  filesCount?: string;\n  fileMode?: string;\n  dirMode?: string;\n  mixMode?: string;\n  dragAndDrop?: string;\n  uploadFilesLimit?: string;\n  showMore?: string;\n  showLess?: string;\n  required?: string;\n  btnMaxFilesTooltip?: string;\n  btnCancelUploading?: string;\n  btnRemoveFile?: string;\n  btnDeleteFile?: string;\n  btnRemoveCanceled?: string;\n  btnDownloadFile?: string;\n  fileStatus?: {\n    uploading?: string;\n    uploaded?: string;\n    canceled?: string;\n  };\n  filesAddedCount?: string;\n  filesUploadedCount?: string;\n  directorySearch?: string;\n  remainingFilesListLabel?: string;\n  btnCancelAllUploads?: string;\n  notFound?: string;\n  comma?: string;\n  fileBtnSingle?: string;\n  uploadFilesLimitSingle?: string;\n  fileModeSingle?: string;\n  dragAndDropSingle?: string;\n}\n\nexport interface UploaderFeedbackMessage {\n  text: string;\n  variant: MessageStatus;\n  files?: (File | FileSystemEntry)[];\n  title?: string;\n}\n\nexport interface AdaptUploaderModuleConfig {\n  uploader?: Provider;\n}\n\n// type definitions for Files And Directories API\n// TODO: remove once API will be included in TS\nexport interface FileSystemEntry extends File {\n  isDirectory?: boolean;\n  isFile?: boolean;\n  fullPath: string;\n}\n\nexport interface FileSystemDirectoryReader {\n  readEntries(\n    successCallback: (result: FileSystemEntry[]) => void,\n    errorCallback?: (error: DOMException) => void,\n  ): void;\n}\n\ninterface FileSystemFlags {\n  create?: boolean;\n  exclusive?: boolean;\n}\n\nexport interface FileSystemDirectoryEntry extends FileSystemEntry {\n  isDirectory: true;\n  isFile: false;\n\n  createReader(): FileSystemDirectoryReader;\n\n  getFile(\n    path?: string,\n    options?: FileSystemFlags,\n    successCallback?: (result: FileSystemFileEntry) => void,\n    errorCallback?: (error: DOMException) => void,\n  ): void;\n\n  getDirectory(\n    path?: string,\n    options?: FileSystemFlags,\n    successCallback?: (result: FileSystemDirectoryEntry) => void,\n    errorCallback?: (error: DOMException) => void,\n  ): void;\n}\n\nexport interface FileSystemFileEntry extends FileSystemEntry {\n  isDirectory: false;\n  isFile: true;\n\n  file(successCallback: (file: FileSystemEntry) => void,\n       errorCallback?: (error: DOMException) => void): void;\n}\n"]}