{"version":3,"file":"focus-monitor.service.js","sourceRoot":"","sources":["../../../../../libs/adapt-angular/src/common/focus-monitor.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable, QueryList, ElementRef, NgZone, OnDestroy} from '@angular/core';\n\n/**\n * Angular Material CDK\n */\nimport {FocusMonitor, ListKeyManager, ListKeyManagerOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {AdaptFocusMonitorDirective} from './focus-monitor.directive';\nimport {Subscription, fromEvent, ReplaySubject} from 'rxjs';\nimport {distinctUntilChanged, take, delay, takeUntil} from 'rxjs/operators';\nimport {getEventKeyCode} from './key-codes';\nimport {TAB} from '@angular/cdk/keycodes';\nimport {AdaptListKeyManagerItemDirective} from './list-key-manager';\n\n\nexport type SelectableHTMLElement = HTMLSelectElement | HTMLButtonElement;\nexport type SelectOptionEl =\n  AdaptFocusMonitorDirective\n  | AdaptListKeyManagerItemDirective\n  | ElementRef<SelectableHTMLElement>;\n\n@Injectable()\nexport class AdaptFocusMonitorService implements OnDestroy {\n\n  // SelectOptionEl in real cases\n  keyManager: ListKeyManager<ListKeyManagerOption>;\n\n  private _setActiveItemSubscription: Subscription;\n  private _destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n\n  constructor(private focusMonitor: FocusMonitor, private _ngZone: NgZone) {\n    // this.onSomeElementFocus = this.onSomeElementFocus.bind(this);\n  }\n\n  init(elements: QueryList<SelectOptionEl>): void {\n    // TODO: Refactor this if possible\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    const keyManager = this.keyManager = new ListKeyManager(elements as QueryList<any>);\n\n    keyManager.withHorizontalOrientation('ltr'); // Arrow navigation options\n    keyManager.withWrap(); // Arrow navigation options\n    keyManager.skipPredicate(this.skipPredicate.bind(this));\n\n    if (this._setActiveItemSubscription) {\n      this._setActiveItemSubscription.unsubscribe();\n    }\n\n    // While AdaptFocusHolderDirective [focusFirstOnInit]=\"true\" need to set active element into keyManager\n    this._setActiveItemSubscription = this._ngZone.onStable.asObservable()\n      .pipe(takeUntil(this._destroyed$), take(1), delay(0)).subscribe(() => this._setActiveItem());\n\n    // TODO: update activeItemIndex if changed from mouse click\n    // TODO: track keyDown if select is attached to body\n    // window.addEventListener('focus', this.onSomeElementFocus, true); // performance check should\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    this.keyManager.onKeydown(event);\n\n    if (getEventKeyCode(event) === TAB) {\n      this.onTabKeyDown();\n    } else {\n      this.onNotTabKeyDown();\n    }\n  }\n\n  registerKeyDown(element: HTMLElement): Subscription {\n    return fromEvent(element, 'keydown')\n      .pipe(distinctUntilChanged(), takeUntil(this._destroyed$))\n      .subscribe((event: KeyboardEvent) => this.onKeyDown(event));\n  }\n\n  // private onSomeElementFocus(event: Event) {\n  //   const target = event.target;\n  //   const listItems = (this.keyManager as any)._getItemsArray() as SelectOptionEl[];\n  // const indexOfActiveEl = listItems.findIndex(item => this.getNativeEl(item) === target /* check by parents chain */);\n  // if (indexOfActiveEl >= 0) {\n  // set active el in keyManager\n  // }\n\n  // }\n\n  focusOnFirstElement(): void {\n    this.keyManager.setFirstItemActive();\n    this.trySetFocusOnActiveEl('program');\n  }\n\n  focusOnElement(index: number): void {\n    // need to do according to logic in a11y (disabled e.t...)\n    // instead of this\n    // this.keyManager.setActiveItem(index);\n    // need this\n    this.keyManager.updateActiveItem(index - 1);\n    this.keyManager.setNextItemActive();\n\n    this.trySetFocusOnActiveEl('program');\n  }\n\n  ngOnDestroy(): void {\n    if (this._setActiveItemSubscription) {\n      this._setActiveItemSubscription.unsubscribe();\n    }\n    this._destroyed$.next(true);\n    this._destroyed$.complete();\n    // window.removeEventListener('focus', this.onSomeElementFocus, true);\n  }\n\n  private skipPredicate(item: ListKeyManagerOption): boolean {\n    // workaround: due to ElementRef should do this\n    return this.getNativeEl(item)?.disabled || item?.disabled;\n  }\n\n  private getNativeEl(item: SelectOptionEl | ListKeyManagerOption): HTMLOptionElement {\n    return (item as AdaptFocusMonitorDirective).nativeElement;\n  }\n\n  private onTabKeyDown(): void {\n    this._ngZone.runOutsideAngular(() => {\n      setTimeout(() => {\n        // Update active item index by active item\n        this._setActiveItem();\n      });\n    });\n  }\n\n  private getRealActiveElIndex(): number {\n    // TODO: Refactor this if possible\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    const listItems = (this.keyManager as any)._getItemsArray() as SelectOptionEl[];\n    const focusedEl = document.activeElement;\n    const indexOfActiveEl = listItems.findIndex(item => this.getNativeEl(item) === focusedEl);\n\n    return indexOfActiveEl;\n  }\n\n  private onNotTabKeyDown(): void {\n    if (this.keyManager.activeItem) {\n      this.trySetFocusOnActiveEl('keyboard');\n    }\n  }\n\n  private trySetFocusOnActiveEl(origin: FocusOrigin): void {\n    const activeItem = this.keyManager.activeItem;\n    let nativeEl: HTMLElement;\n\n    if (activeItem) {\n      if (activeItem instanceof AdaptListKeyManagerItemDirective) {\n        nativeEl = (<AdaptListKeyManagerItemDirective>activeItem).getNativeElement();\n      } else {\n        nativeEl = this.getNativeEl(activeItem);\n      }\n\n      this.focusMonitor.focusVia(nativeEl, origin);\n    }\n  }\n\n  private _setActiveItem(): void {\n    const focusedElIndex = this.getRealActiveElIndex();\n\n    if (focusedElIndex > -1) {\n      this.keyManager.setActiveItem(focusedElIndex);\n    }\n  }\n}\n"]}