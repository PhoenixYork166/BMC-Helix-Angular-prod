import { Component, Input } from '@angular/core';
import { AdaptTranslateService } from '../../../common/i18n/index';
import * as i0 from "@angular/core";
import * as i1 from "../../../common/i18n/index";
import * as i2 from "@angular/common";
import * as i3 from "./adapt-rx-label-tooltip.component";
function AdaptRxControlLabelComponent_div_0_1_ng_template_0_Template(rf, ctx) { }
function AdaptRxControlLabelComponent_div_0_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, AdaptRxControlLabelComponent_div_0_1_ng_template_0_Template, 0, 0, "ng-template");
} }
function AdaptRxControlLabelComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 5);
    i0.ɵɵtemplate(1, AdaptRxControlLabelComponent_div_0_1_Template, 1, 0, undefined, 6);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    const _r1 = i0.ɵɵreference(2);
    const _r3 = i0.ɵɵreference(4);
    i0.ɵɵattribute("id", ctx_r0.id || null);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.hasAssociatedControl)("ngIfThen", _r1)("ngIfElse", _r3);
} }
function AdaptRxControlLabelComponent_ng_template_1_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 10);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r11.subLabel);
} }
function AdaptRxControlLabelComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "label", 7);
    i0.ɵɵelementContainer(1, 8);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainer(2, 8);
    i0.ɵɵtemplate(3, AdaptRxControlLabelComponent_ng_template_1_div_3_Template, 2, 1, "div", 9);
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    const _r5 = i0.ɵɵreference(6);
    const _r7 = i0.ɵɵreference(8);
    i0.ɵɵattribute("for", ctx_r2.for)("data-testid", ctx_r2.testID + "_label");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r5);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r7);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r2.subLabel);
} }
function AdaptRxControlLabelComponent_ng_template_3_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 10);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r12.subLabel);
} }
function AdaptRxControlLabelComponent_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 7);
    i0.ɵɵelementContainer(1, 8);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainer(2, 8);
    i0.ɵɵtemplate(3, AdaptRxControlLabelComponent_ng_template_3_div_3_Template, 2, 1, "div", 9);
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    const _r5 = i0.ɵɵreference(6);
    const _r7 = i0.ɵɵreference(8);
    i0.ɵɵattribute("data-testid", ctx_r4.testID + "_label");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r5);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngTemplateOutlet", _r7);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r4.subLabel);
} }
function AdaptRxControlLabelComponent_ng_template_5_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "span", 13);
    i0.ɵɵelementStart(2, "span", 14);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r13 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r13.requiredLabel);
} }
function AdaptRxControlLabelComponent_ng_template_5_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 15);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r14.subLabel);
} }
function AdaptRxControlLabelComponent_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(2, AdaptRxControlLabelComponent_ng_template_5_ng_container_2_Template, 4, 1, "ng-container", 11);
    i0.ɵɵtemplate(3, AdaptRxControlLabelComponent_ng_template_5_span_3_Template, 2, 1, "span", 12);
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r6.label);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r6.showRequiredLabel && ctx_r6.requiredLabel);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r6.subLabel);
} }
function AdaptRxControlLabelComponent_ng_template_7_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "span", 13);
    i0.ɵɵelement(2, "adapt-rx-control-label-tooltip", 16);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r15 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("tooltip", ctx_r15.tooltip)("testID", ctx_r15.testID);
} }
function AdaptRxControlLabelComponent_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtemplate(0, AdaptRxControlLabelComponent_ng_template_7_ng_container_0_Template, 3, 2, "ng-container", 11);
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngIf", ctx_r8.tooltip == null ? null : ctx_r8.tooltip.content);
} }
export class AdaptRxControlLabelComponent {
    constructor(ts) {
        this.ts = ts;
        /**
         * Tooltip settings
         */
        this.tooltip = null;
        this.requiredLabel = ts.getCurrentLanguage()['adapt.common.required'];
    }
    /**
     * Check if there is a target element for which label is
     */
    get hasAssociatedControl() {
        return Boolean(this.for);
    }
}
AdaptRxControlLabelComponent.ɵfac = function AdaptRxControlLabelComponent_Factory(t) { return new (t || AdaptRxControlLabelComponent)(i0.ɵɵdirectiveInject(i1.AdaptTranslateService)); };
AdaptRxControlLabelComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptRxControlLabelComponent, selectors: [["adapt-rx-control-label"]], inputs: { for: "for", id: "id", label: "label", subLabel: "subLabel", requiredLabel: "requiredLabel", showRequiredLabel: "showRequiredLabel", tooltip: "tooltip", testID: "testID" }, decls: 9, vars: 1, consts: [["class", "pb-1", 4, "ngIf"], ["associatedLabelTemplate", ""], ["plainTextLabelTemplate", ""], ["labelContentTemplate", ""], ["labelTooltip", ""], [1, "pb-1"], [4, "ngIf", "ngIfThen", "ngIfElse"], [1, "form-control-label", "d-inline"], [3, "ngTemplateOutlet"], ["class", "text-secondary font-weight-default", 4, "ngIf"], [1, "text-secondary", "font-weight-default"], [4, "ngIf"], ["class", "sr-only", 4, "ngIf"], [1, "letter-space"], [1, "form-control-required"], [1, "sr-only"], [3, "tooltip", "testID"]], template: function AdaptRxControlLabelComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, AdaptRxControlLabelComponent_div_0_Template, 2, 4, "div", 0);
        i0.ɵɵtemplate(1, AdaptRxControlLabelComponent_ng_template_1_Template, 4, 5, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(3, AdaptRxControlLabelComponent_ng_template_3_Template, 4, 4, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(5, AdaptRxControlLabelComponent_ng_template_5_Template, 4, 3, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtemplate(7, AdaptRxControlLabelComponent_ng_template_7_Template, 1, 1, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.label);
    } }, directives: [i2.NgIf, i2.NgTemplateOutlet, i3.AdaptRxLabelTooltipComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRxControlLabelComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-rx-control-label',
                templateUrl: './adapt-rx-control-label.component.html',
                preserveWhitespaces: false
            }]
    }], function () { return [{ type: i1.AdaptTranslateService }]; }, { for: [{
            type: Input
        }], id: [{
            type: Input
        }], label: [{
            type: Input
        }], subLabel: [{
            type: Input
        }], requiredLabel: [{
            type: Input
        }], showRequiredLabel: [{
            type: Input
        }], tooltip: [{
            type: Input
        }], testID: [{
            type: Input
        }] }); })();
//# sourceMappingURL=adapt-rx-control-label.component.js.map