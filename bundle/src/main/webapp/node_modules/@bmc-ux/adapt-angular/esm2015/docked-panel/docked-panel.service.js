import { Injectable, Injector } from '@angular/core';
import { Subject } from 'rxjs';
import { ScrollManageService } from '../common/scroll-manage.service';
import { DockedPanelDirection } from './docked-panel.model';
import { AdaptDockedPanelStackService } from './docked-panel-stack.service';
import * as i0 from "@angular/core";
import * as i1 from "../common/scroll-manage.service";
import * as i2 from "./docked-panel-stack.service";
export class AdaptDockedPanelService {
    constructor(_injector, _scrollService, _adaptDockedPanelStackService) {
        this._injector = _injector;
        this._scrollService = _scrollService;
        this._adaptDockedPanelStackService = _adaptDockedPanelStackService;
        // Public fields
        this.direction = DockedPanelDirection.LEFT; // TODO: need to check default value here
        this.hideBackdrop = false;
        // Private fields
        this._wrapper = document.body;
        this._alertsSubject = new Subject();
        this._scrollManager = this._scrollService.getScrollManager(this._wrapper);
    }
    get openedPanels() {
        return this._adaptDockedPanelStackService.openedPanels;
    }
    get parentDP() {
        return this._adaptDockedPanelStackService.parentDP;
    }
    get activeDP() {
        return this._adaptDockedPanelStackService.activeDP;
    }
    get alertsState() {
        return this._alertsSubject.asObservable();
    }
    open(dpConfig) {
        return this._adaptDockedPanelStackService.open(dpConfig, this._injector);
    }
    updateConfig(config, dockedPanelInstance) {
        this._adaptDockedPanelStackService.updateConfig(config, dockedPanelInstance);
    }
    close(id) {
        this._adaptDockedPanelStackService.close(id);
    }
    closeAllDockedPanels() {
        this._adaptDockedPanelStackService.closeAllDockedPanels();
    }
    openAlert(alert) {
        this._alertsSubject.next(alert);
    }
}
AdaptDockedPanelService.ɵfac = function AdaptDockedPanelService_Factory(t) { return new (t || AdaptDockedPanelService)(i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i1.ScrollManageService), i0.ɵɵinject(i2.AdaptDockedPanelStackService)); };
AdaptDockedPanelService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptDockedPanelService, factory: AdaptDockedPanelService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptDockedPanelService, [{
        type: Injectable
    }], function () { return [{ type: i0.Injector }, { type: i1.ScrollManageService }, { type: i2.AdaptDockedPanelStackService }]; }, null); })();
//# sourceMappingURL=docked-panel.service.js.map