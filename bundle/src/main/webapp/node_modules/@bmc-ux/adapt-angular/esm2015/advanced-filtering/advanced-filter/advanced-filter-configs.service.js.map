{"version":3,"file":"advanced-filter-configs.service.js","sourceRoot":"","sources":["../../../../../../libs/adapt-angular/src/advanced-filtering/advanced-filter/advanced-filter-configs.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AACzC,OAAO,EAAC,YAAY,EAAE,OAAO,EAAE,IAAI,EAAC,MAAM,WAAW,CAAC;AACtD,OAAO,SAAS,MAAM,cAAc,CAAC;AAErC,OAAO,EAAC,UAAU,EAAW,MAAM,qBAAqB,CAAC;AACzD,OAAO,EACL,8BAA8B,EAC9B,YAAY,EACZ,oBAAoB,EAErB,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAC,mBAAmB,EAAC,MAAM,wBAAwB,CAAC;AAG3D,OAAO,EAWL,4BAA4B,EAM5B,yBAAyB,EAC1B,MAAM,0BAA0B,CAAC;AAClC,OAAO,EACL,sBAAsB,EACtB,2BAA2B,EAC3B,cAAc,EACd,iBAAiB,EAClB,MAAM,6BAA6B,CAAC;;;AAGrC,MAAM,OAAO,qCAAqC;IAgChD,YAAoB,0BAA0D;QAA1D,+BAA0B,GAA1B,0BAA0B,CAAgC;IAC9E,CAAC;IA/BD,MAAM,CAAC,oBAAoB,CAAC,KAAgB;QAC1C,OAAO,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5G,CAAC;IAED,MAAM,CAAC,sBAAsB,CAAC,MAA4B,EAAE,UAAkB,EAAE,gBAAyB;QACvG,MAAM,sBAAsB,GAC1B,IAAI,YAAY,CAAC,gBAAgB,IAAI,MAAM,CAAC,KAAK,CAAC,GAAG,sBAAsB,CAAC,oBAAoB,GAAG,CAAC;QAEtG,MAAM,iBAAiB,GAAG,IAAI,MAAM,CAAC,sBAAsB,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAEnF,OAAO,iBAAiB,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACtF,CAAC;IAED,MAAM,CAAC,uBAAuB,CAC5B,KAAa,EACb,YAA0C,EAC1C,kBAAsD,EACtD,uBAAgC,EAChC,OAAgB;QAEhB,OAAO;YACL,IAAI,EAAE;gBACJ,KAAK;gBACL,YAAY;gBACZ,uBAAuB;aACxB;YACD,IAAI,EAAE,OAAO,IAAI,kBAAkB,CAAC,UAAU,CAAC,KAAK,EAAE,YAAY,CAAC;SACpE,CAAC;IACJ,CAAC;IAKD,UAAU,CAAC,KAA0C;QACnD,MAAM,eAAe,GAAG,IAAI,CAAC,0BAA0B,CAAC;QAExD,MAAM,OAAO,GAAG;YACd,+BAA+B;YAC/B,kCAAkC;YAClC,iEAAiE;YACjE,CAAC,4BAA4B,CAAC,MAAM,CAAC,EAAmC;gBACtE,sBAAsB,EAAE,GAA4C,EAAE,CAAC,EAAE;gBACzE,kBAAkB,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,qCAAqC,CAAC,oBAAoB,CAAC,KAAK,CAAC;gBAChG,iBAAiB,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;gBAC3C,kCAAkC;gBAClC,iEAAiE;gBACjE,UAAU,CAAC,KAAU,EAAE,YAAkC;oBACvD,OAAO,2BAA2B,CAAC,YAAY,EAC5C,IAAmC,CAAC,iBAAiB,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC,CAAC;gBACjF,CAAC;gBACD,iBAAiB,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ;gBACzC,uBAAuB,EAAE,GAAG,EAAE,CAAC,IAAI;gBACnC,aAAa,EAAE,GAAG,EAAE,CAAC,EAAE;aACxB;YAED,CAAC,4BAA4B,CAAC,OAAO,CAAC,EAA6D;gBACjG,sBAAsB,CAAC,MAA4B;oBACjD,MAAM,MAAM,GAAG,IAAiE,CAAC;oBAEjF,OAAO;wBACL,qCAAqC,CAAC,uBAAuB,CAAgC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC;wBAC1H,qCAAqC,CAAC,uBAAuB,CAAgC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC;wBACzH,qCAAqC,CAAC,uBAAuB,CAAgC,yBAAyB,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC;qBAC/I,CAAC;gBACJ,CAAC;gBACD,iBAAiB,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,yBAAyB,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU;gBACnI,kBAAkB,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,IAAI,IAAI;gBAC5C,uBAAuB,EAAE,CAAC,MAA4B,EAAE,UAAkB,EAAE,EAAE;oBAC5E,IAAI,SAAS,GAAG,qCAAqC,CAAC,sBAAsB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;oBACjG,IAAI,WAA0C,CAAC;oBAE/C,SAAS,GAAG,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;oBAE9D,QAAQ,SAAS,EAAE;wBACjB,KAAK,KAAK,CAAC,SAAS,CAAC,WAAW,EAAE;4BAChC,WAAW,GAAG,IAAI,CAAC;4BACnB,MAAM;wBACR,KAAK,KAAK,CAAC,UAAU,CAAC,WAAW,EAAE;4BACjC,WAAW,GAAG,KAAK,CAAC;4BACpB,MAAM;wBACR,KAAK,KAAK,CAAC,UAAU,CAAC,WAAW,EAAE;4BACjC,WAAW,GAAG,yBAAyB,CAAC;4BACxC,MAAM;wBACR;4BACE,OAAO,IAAI,CAAC;qBACf;oBAED,OAAO,EAAC,KAAK,EAAE,WAAW,EAAC,CAAC;gBAC9B,CAAC;aACF;YAED,CAAC,4BAA4B,CAAC,MAAM,CAAC,EAA4D;gBAC/F,sBAAsB,CAAC,MAA4B;oBACjD,OAAO,CAAC,qCAAqC,CAAC,uBAAuB,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,2BAA2B,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;gBAC1I,CAAC;gBACD,iBAAiB,EAAE,CAAC,KAAK,EAAE,YAAY,EAAE,EAAE;oBACzC,MAAM,MAAM,GAAG,CAAC,YAAY,CAAC,IAAI,IAAI,EAAE,CAAmC,CAAC;oBAE3E,IAAI,OAAO,MAAM,CAAC,sBAAsB,KAAK,UAAU,EAAE;wBACvD,MAAM,QAAQ,GAAG,MAAM,CAAC,sBAAsB,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;wBAEpE,IAAI,QAAQ,EAAE;4BACZ,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;yBAC9C;qBACF;oBAED,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC1B,CAAC;gBACD,kBAAkB,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,qCAAqC,CAAC,oBAAoB,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;gBAChJ,iBAAiB,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC1E,uBAAuB,EAAE,CAAC,MAA4B,EAAE,UAAkB,EAAE,EAAE;oBAC5E,MAAM,SAAS,GAAG,qCAAqC,CAAC,sBAAsB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;oBAEnG,IAAI,CAAC,SAAS,EAAE;wBACd,OAAO,IAAI,CAAC;qBACb;oBAED,MAAM,MAAM,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;oBAEpG,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,EAAC,KAAK,EAAE,MAAM,EAAC,CAAC,CAAC,CAAC,IAAI,CAAC;gBAChD,CAAC;aACF;YAED,CAAC,4BAA4B,CAAC,IAAI,CAAC,EAA0D;gBAC3F,sBAAsB,CAAC,MAA4B;oBACjD,OAAO;wBACL,qCAAqC,CAAC,uBAAuB,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,2BAA2B,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;wBACxI,qCAAqC,CAAC,uBAAuB,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,SAAS,GAAG,CAAC;wBACtI,qCAAqC,CAAC,uBAAuB,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,GAAG,CAAC;qBACrI,CAAC;gBACJ,CAAC;gBACD,iBAAiB,EAAE,CAAC,KAAK,EAAE,EAAE;oBAC3B,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,EAAE,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACzH,CAAC;gBACD,iBAAiB,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE;oBACxC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClE,CAAC;gBACD,uBAAuB,EAAE,CAAC,YAAkC,EAAE,UAAkB,EAAE,EAAE;oBAClF,IAAI,SAAS,GAAG,qCAAqC,CAAC,sBAAsB,CAAC,YAAY,EAAE,UAAU,EAAE,GAAG,YAAY,CAAC,KAAK,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;oBAEnJ,IAAI,SAAS,IAAI,IAAI,EAAE;wBACrB,MAAM,QAAQ,GAAG,eAAe,CAAC,KAAK,CAAC,SAAS,EAAE,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;wBAEnF,OAAO,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,KAAK,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAC,CAAC;qBAC/D;oBAED,SAAS,GAAG,qCAAqC,CAAC,sBAAsB,CAAC,YAAY,EAAE,UAAU,EAAE,GAAG,YAAY,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;oBAE7I,IAAI,SAAS,IAAI,IAAI,EAAE;wBACrB,MAAM,MAAM,GAAG,eAAe,CAAC,KAAK,CAAC,SAAS,EAAE,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;wBAEjF,OAAO,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,KAAK,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC,EAAC,CAAC;qBAC3D;oBAED,SAAS,GAAG,qCAAqC,CAAC,sBAAsB,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;oBAEnG,IAAI,SAAS,IAAI,IAAI,EAAE;wBACrB,MAAM,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBAC3C,MAAM,QAAQ,GAAG,eAAe,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;wBAC1F,MAAM,MAAM,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,oBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,UAAU,EAAE,EAAC,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC,EAAC,EAAC,CAAC;wBAErJ,OAAO,CAAC,QAAQ,CAAC,UAAU,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;4BAClD,IAAI,CAAC,CAAC,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,EAAC,CAAC;qBAChG;oBAED,OAAO,IAAI,CAAC;gBACd,CAAC;gBACD,aAAa,EAAE,CAAC,KAAK,EAAE,EAAE;oBACvB,MAAM,SAAS,GAAG,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpC,MAAM,OAAO,GAAG,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;oBAElC,IAAI,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,YAAY,CAAC,SAAS,EAAE,OAAO,CAAC,EAAE;wBAChH,OAAO,CAAC,EAAC,IAAI,EAAE,KAAK,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,EAAE,KAAK,CAAC,gBAAgB,CAAC,gBAAgB,EAAC,CAAC,CAAC;qBACzG;oBAED,OAAO,EAAE,CAAC;gBACZ,CAAC;aACF;YAED,CAAC,4BAA4B,CAAC,IAAI,CAAC,EAA0D;gBAC3F,sBAAsB,CAAC,MAA4B;oBACjD,OAAO;wBACL,qCAAqC,CAAC,uBAAuB,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,2BAA2B,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;wBACxI,qCAAqC,CAAC,uBAAuB,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,SAAS,GAAG,CAAC;wBACtI,qCAAqC,CAAC,uBAAuB,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,GAAG,CAAC;qBACrI,CAAC;gBACJ,CAAC;gBACD,iBAAiB,CAAC,KAA2C;oBAC3D,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,EAAE,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACnH,CAAC;gBACD,iBAAiB,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE;oBACxC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClE,CAAC;gBACD,uBAAuB,EAAE,CAAC,YAAkC,EAAE,UAAkB,EAAE,EAAE;oBAClF,IAAI,SAAS,GAAG,qCAAqC,CAAC,sBAAsB,CAAC,YAAY,EAAE,UAAU,EAAE,GAAG,YAAY,CAAC,KAAK,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;oBAEnJ,IAAI,SAAS,IAAI,IAAI,EAAE;wBACrB,MAAM,QAAQ,GAAG,eAAe,CAAC,KAAK,CAAC,SAAS,EAAE,oBAAoB,CAAC,IAAI,CAAC,CAAC;wBAE7E,OAAO,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,KAAK,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAC,CAAC;qBAC/D;oBAED,SAAS,GAAG,qCAAqC,CAAC,sBAAsB,CAAC,YAAY,EAAE,UAAU,EAAE,GAAG,YAAY,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;oBAE7I,IAAI,SAAS,IAAI,IAAI,EAAE;wBACrB,MAAM,MAAM,GAAG,eAAe,CAAC,KAAK,CAAC,SAAS,EAAE,oBAAoB,CAAC,IAAI,CAAC,CAAC;wBAE3E,OAAO,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,KAAK,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC,EAAC,CAAC;qBAC3D;oBAED,SAAS,GAAG,qCAAqC,CAAC,sBAAsB,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;oBAEnG,IAAI,SAAS,IAAI,IAAI,EAAE;wBACrB,MAAM,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBAC3C,MAAM,QAAQ,GAAG,eAAe,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,oBAAoB,CAAC,IAAI,CAAC,CAAC;wBACpF,MAAM,MAAM,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,oBAAoB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAC,UAAU,EAAE,EAAC,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC,EAAC,EAAC,CAAC;wBAE/I,OAAO,CAAC,QAAQ,CAAC,UAAU,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;4BACjD,IAAI,CAAC,CAAC,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,EAAC,CAAC;qBAChG;oBAED,OAAO,IAAI,CAAC;gBACd,CAAC;gBACD,aAAa,EAAE,CAAC,KAAK,EAAE,EAAE;oBACvB,MAAM,SAAS,GAAG,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpC,MAAM,OAAO,GAAG,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;oBAElC,IAAI,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,YAAY,CAAC,SAAS,EAAE,OAAO,CAAC,EAAE;wBAChH,OAAO,CAAC,EAAC,IAAI,EAAE,KAAK,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,EAAE,KAAK,CAAC,gBAAgB,CAAC,gBAAgB,EAAC,CAAC,CAAC;qBACzG;oBAED,OAAO,EAAE,CAAC;gBACZ,CAAC;aACF;YAED,CAAC,4BAA4B,CAAC,QAAQ,CAAC,EAA8D;gBACnG,sBAAsB,CAAC,MAA4B;oBACjD,OAAO;wBACL,qCAAqC,CAAC,uBAAuB,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,2BAA2B,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;wBACxI,qCAAqC,CAAC,uBAAuB,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,SAAS,GAAG,CAAC;wBACtI,qCAAqC,CAAC,uBAAuB,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,GAAG,CAAC;qBACrI,CAAC;gBACJ,CAAC;gBACD,iBAAiB,CAAC,KAA2C;oBAC3D,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,eAAe,CAAC,MAAM,CAAC,IAAI,EAAE,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACvH,CAAC;gBACD,iBAAiB,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE;oBACxC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClE,CAAC;gBACD,uBAAuB,EAAE,CAAC,YAAkC,EAAE,UAAkB,EAAE,EAAE;oBAClF,IAAI,SAAS,GAAG,qCAAqC,CAAC,sBAAsB,CAAC,YAAY,EAAE,UAAU,EAAE,GAAG,YAAY,CAAC,KAAK,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;oBAEnJ,IAAI,SAAS,IAAI,IAAI,EAAE;wBACrB,MAAM,QAAQ,GAAG,eAAe,CAAC,KAAK,CAAC,SAAS,EAAE,oBAAoB,CAAC,QAAQ,CAAC,CAAC;wBAEjF,OAAO,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,KAAK,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,EAAC,CAAC;qBAC/D;oBAED,SAAS,GAAG,qCAAqC,CAAC,sBAAsB,CAAC,YAAY,EAAE,UAAU,EAAE,GAAG,YAAY,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;oBAE7I,IAAI,SAAS,IAAI,IAAI,EAAE;wBACrB,MAAM,MAAM,GAAG,eAAe,CAAC,KAAK,CAAC,SAAS,EAAE,oBAAoB,CAAC,QAAQ,CAAC,CAAC;wBAE/E,OAAO,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,KAAK,EAAE,CAAC,IAAI,EAAE,MAAM,CAAC,EAAC,CAAC;qBAC3D;oBAED,SAAS,GAAG,qCAAqC,CAAC,sBAAsB,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;oBAEnG,IAAI,SAAS,IAAI,IAAI,EAAE;wBACrB,MAAM,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBAC3C,MAAM,QAAQ,GAAG,eAAe,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,oBAAoB,CAAC,QAAQ,CAAC,CAAC;wBACxF,MAAM,MAAM,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,oBAAoB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAC,UAAU,EAAE,EAAC,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC,EAAC,EAAC,CAAC;wBAEnJ,OAAO,CAAC,QAAQ,CAAC,UAAU,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;4BACjD,IAAI,CAAC,CAAC,CAAC,EAAC,KAAK,EAAE,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,EAAC,CAAC;qBAChG;oBAED,OAAO,IAAI,CAAC;gBACd,CAAC;gBACD,aAAa,EAAE,CAAC,KAAK,EAAE,EAAE;oBACvB,MAAM,SAAS,GAAG,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpC,MAAM,OAAO,GAAG,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;oBAElC,IAAI,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,YAAY,CAAC,SAAS,EAAE,OAAO,CAAC,EAAE;wBAChH,OAAO,CAAC,EAAC,IAAI,EAAE,KAAK,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,EAAE,KAAK,CAAC,gBAAgB,CAAC,gBAAgB,EAAC,CAAC,CAAC;qBACzG;oBAED,OAAO,EAAE,CAAC;gBACZ,CAAC;aACF;YAED,CAAC,4BAA4B,CAAC,SAAS,CAAC,EAA+D;gBACrG,sBAAsB,CAAC,YAAkC;oBACvD,MAAM,IAAI,GAAI,YAAY,CAAC,IAAwC,CAAC;oBACpE,MAAM,aAAa,GAAG,IAAI,IAAI,IAAI,CAAC,aAAa,IAAI,EAAE,CAAC;oBAEvD,OAAO,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,EAAE;wBACtC,OAAO,qCAAqC,CAAC,uBAAuB,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC,EAAE,YAAY,EAAE,IAAI,EACxG,KAAK,EAAE,2BAA2B,CAAC,YAAY,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;oBACzE,CAAC,CAAC,CAAC;gBACL,CAAC;gBACD,iBAAiB,EAAE,CAAC,KAAK,EAAE,MAA4B,EAAU,EAAE;oBACjE,MAAM,IAAI,GAAI,MAAM,CAAC,IAAwC,CAAC;oBAC9D,MAAM,aAAa,GAAG,IAAI,IAAI,IAAI,CAAC,aAAa,IAAI,EAAE,CAAC;oBAEvD,OAAO,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,YAAY,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACrG,CAAC;gBACD,iBAAiB,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAC1E,uBAAuB,EAAE,CAAC,YAAkC,EAAE,UAAkB,EAAE,EAAE;oBAClF,MAAM,SAAS,GAAG,qCAAqC,CAAC,sBAAsB,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;oBAEzG,IAAI,CAAC,SAAS,EAAE;wBACd,OAAO,IAAI,CAAC;qBACb;oBAED,MAAM,IAAI,GAAI,YAAY,CAAC,IAAwC,CAAC;oBACpE,MAAM,aAAa,GAAG,IAAI,IAAI,IAAI,CAAC,aAAa,IAAI,EAAE,CAAC;oBACvD,IAAI,KAAK,GAAa,EAAE,CAAC;oBAEzB,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;wBACzC,WAAW,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;wBAC/C,MAAM,YAAY,GAAG,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,WAAW,CAAC,CAAC;wBAE7F,IAAI,YAAY,EAAE;4BAChB,KAAK,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;yBAC7B;oBACH,CAAC,CAAC,CAAC;oBAEH,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;oBAEpB,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC,CAAC,IAAI,CAAC;gBACvC,CAAC;aACF;YAED,CAAC,4BAA4B,CAAC,MAAM,CAAC,EAA4D;gBAC/F,sBAAsB,CAAC,MAA4B;oBACjD,OAAO;wBACL,qCAAqC,CAAC,uBAAuB,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,2BAA2B,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;wBACxI,qCAAqC,CAAC,uBAAuB,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,SAAS,GAAG,CAAC;wBACtI,qCAAqC,CAAC,uBAAuB,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,GAAG,CAAC;qBACrI,CAAC;gBACJ,CAAC;gBACD,iBAAiB,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;gBAClG,iBAAiB,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE;oBACxC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5G,CAAC;gBACD,uBAAuB,EAAE,CAAC,YAAkC,EAAE,UAAkB,EAAE,EAAE;oBAClF,IAAI,SAAS,GAAG,qCAAqC,CAAC,sBAAsB,CAAC,YAAY,EAAE,UAAU,EAAE,GAAG,YAAY,CAAC,KAAK,IAAI,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;oBAEnJ,IAAI,SAAS,IAAI,IAAI,EAAE;wBACrB,MAAM,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC;wBAExC,OAAO,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,EAAC,KAAK,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,EAAC,CAAC,CAAC,CAAC,IAAI,CAAC;qBACtE;oBAED,SAAS,GAAG,qCAAqC,CAAC,sBAAsB,CAAC,YAAY,EAAE,UAAU,EAAE,GAAG,YAAY,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;oBAE7I,IAAI,SAAS,IAAI,IAAI,EAAE;wBACrB,MAAM,OAAO,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC;wBAEtC,OAAO,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAC,KAAK,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,EAAC,CAAC,CAAC,CAAC,IAAI,CAAC;qBAClE;oBAED,SAAS,GAAG,qCAAqC,CAAC,sBAAsB,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;oBAEnG,IAAI,SAAS,IAAI,IAAI,EAAE;wBACrB,MAAM,MAAM,GAAG,iBAAiB,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;wBAEnD,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAC,KAAK,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAC,CAAC;qBACpG;oBAED,OAAO,IAAI,CAAC;gBACd,CAAC;gBACD,aAAa,EAAE,CAAC,KAAK,EAAE,YAAY,EAAE,EAAE;oBACrC,MAAM,SAAS,GAAG,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;oBACpC,MAAM,OAAO,GAAG,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC;oBAElC,MAAM,MAAM,GAAsB,EAAE,CAAC;oBACrC,MAAM,iBAAiB,GAAG,cAAc,CAAC,SAAS,CAAC,CAAC;oBACpD,MAAM,eAAe,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC;oBAChD,MAAM,eAAe,GAAG,KAAK,CAAC,gBAAgB,CAAC,eAAe,CAAC;oBAC/D,MAAM,YAAY,GAAG,CAAC,YAAY,CAAC,IAAI,IAAI,EAAE,CAAmC,CAAC;oBACjF,MAAM,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;oBACvC,MAAM,QAAQ,GAAG,YAAY,CAAC,QAAQ,CAAC;oBAEvC,IAAI,CAAC,iBAAiB,IAAI,SAAS,IAAI,IAAI,EAAE;wBAC3C,MAAM,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,KAAK,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,EAAE,eAAe,CAAC,qBAAqB,EAAC,CAAC,CAAC;qBAC3G;oBAED,IAAI,CAAC,eAAe,IAAI,OAAO,IAAI,IAAI,EAAE;wBACvC,MAAM,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,KAAK,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,EAAE,eAAe,CAAC,mBAAmB,EAAC,CAAC,CAAC;qBACzG;oBAED,IAAI,iBAAiB,IAAI,eAAe,IAAI,SAAS,GAAG,OAAO,EAAE;wBAC/D,MAAM,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,KAAK,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,EAAE,KAAK,CAAC,gBAAgB,CAAC,gBAAgB,EAAC,CAAC,CAAC;qBAC7G;oBAED,IAAI,CAAC,QAAQ,IAAI,IAAI,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC;wBAC1F,eAAe,IAAI,CAAC,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;wBACpE,CAAC,QAAQ,IAAI,IAAI,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC;4BAC3F,eAAe,IAAI,CAAC,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE;wBAEzE,IAAI,QAAQ,IAAI,IAAI,IAAI,QAAQ,IAAI,IAAI,EAAE;4BACxC,IAAI,QAAQ,IAAI,IAAI,EAAE;gCACpB,MAAM,CAAC,IAAI,CAAC;oCACV,IAAI,EAAE,KAAK,CAAC,gBAAgB,CAAC,gBAAgB;oCAC7C,IAAI,EAAE,eAAe,CAAC,eAAe,CAAC,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;iCAC9E,CAAC,CAAC;6BACJ;iCAAM;gCACL,MAAM,CAAC,IAAI,CAAC;oCACV,IAAI,EAAE,KAAK,CAAC,gBAAgB,CAAC,gBAAgB;oCAC7C,IAAI,EAAE,eAAe,CAAC,eAAe,CAAC,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;iCAC9E,CAAC,CAAC;6BACJ;yBACF;6BAAM;4BACL,MAAM,CAAC,IAAI,CAAC;gCACV,IAAI,EAAE,KAAK,CAAC,gBAAgB,CAAC,gBAAgB;gCAC7C,IAAI,EAAE,eAAe,CAAC,uBAAuB,CAAC,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;qCAClF,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;6BAC3C,CAAC,CAAC;yBACJ;qBACF;oBAED,OAAO,MAAM,CAAC;gBAChB,CAAC;aACF;SACF,CAAC;QAEF,8BAA8B;QAC9B,MAAM,8BAA8B,GAAG,OAAO,CAAC,4BAA4B,CAAC,MAAM,CAAC,CAAC;QAEpF,KAAK,MAAM,GAAG,IAAI,OAAO,EAAE;YACzB,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,IAAI,GAAG,KAAK,4BAA4B,CAAC,MAAM,EAAE;gBACrG,OAAO,CAAC,GAAG,CAAC,mCAAO,8BAA8B,GAAK,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;aACrE;SACF;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;;0HAxbU,qCAAqC;2FAArC,qCAAqC,WAArC,qCAAqC;uFAArC,qCAAqC;cADjD,UAAU","sourcesContent":["import {Injectable} from '@angular/core';\nimport {escapeRegExp, isEmpty, uniq} from 'lodash-es';\nimport BigNumber from 'bignumber.js';\n\nimport {getTagText, TagModel} from '../../metatag/index';\nimport {\n  AdaptRxDatetimeParserFormatter,\n  checkIsAfter,\n  RxDatetimePickerMode,\n  RxDatetimeStruct\n} from '../../rx/rx-datetime/index';\nimport {isEmptyOrWhitespace} from '../../common/utilities';\nimport {ValidationError} from '../../common/form.component';\n\nimport {\n  AdvancedFilterBooleanDataType,\n  AdvancedFilterDataTypesConfigs,\n  AdvancedFilterDataTypesConfigsTexts,\n  AdvancedFilterDateDataType,\n  AdvancedFilterDatetimeDataType,\n  AdvancedFilterExpressionTip,\n  AdvancedFilterNumberDataType,\n  AdvancedFilterNumberTypeParams,\n  AdvancedFilterOption,\n  AdvancedFilterOptionConfig,\n  AdvancedFilterOptionDataType,\n  AdvancedFilterSelectionDataType,\n  AdvancedFilterSelectionTypeData,\n  AdvancedFilterStringDataType,\n  AdvancedFilterStringTypeParams,\n  AdvancedFilterTimeDataType,\n  booleanDataTypeBlankValue\n} from './advanced-filter.models';\nimport {\n  ADVANCED_FILTER_CONSTS,\n  formatAdvancedFilterTagText,\n  isFiniteNumber,\n  parseNumericRange\n} from '../advanced-filtering-utils';\n\n@Injectable()\nexport class AdvancedFilterDataTypesConfigsService {\n\n  static isEmptyOnEmptyValues(value: unknown[]): boolean {\n    return value == null || (Array.isArray(value) && (value.length === 0 || value.every(val => val == null)));\n  }\n\n  static getExpressionRawValues(option: AdvancedFilterOption, searchTerm: string, filterNamePrefix?: string): string | null {\n    const escapedStringForRegExp =\n      `^${escapeRegExp(filterNamePrefix || option.label)}${ADVANCED_FILTER_CONSTS.TAG_OPTION_DELIMITER}?`;\n\n    const searchTermResults = new RegExp(escapedStringForRegExp, 'i').exec(searchTerm);\n\n    return searchTermResults ? searchTerm.substring(searchTermResults[0].length) : null;\n  }\n\n  static createAdvancedFilterTag<TValue>(\n    value: TValue,\n    filterOption: AdvancedFilterOption<TValue>,\n    filterOptionConfig: AdvancedFilterOptionConfig<TValue>,\n    isIncompletedExpression: boolean,\n    tagText?: string\n  ): TagModel<AdvancedFilterExpressionTip<TValue>> {\n    return {\n      data: {\n        value,\n        filterOption,\n        isIncompletedExpression,\n      },\n      text: tagText || filterOptionConfig.getTagText(value, filterOption),\n    };\n  }\n\n  constructor(private _rxDatetimeParserFormatter: AdaptRxDatetimeParserFormatter) {\n  }\n\n  getConfigs(texts: AdvancedFilterDataTypesConfigsTexts): AdvancedFilterDataTypesConfigs {\n    const parserFormatter = this._rxDatetimeParserFormatter;\n\n    const configs = {\n      // also default implementations\n      // TODO: Refactor this if possible\n      /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n      [AdvancedFilterOptionDataType.custom]: <AdvancedFilterOptionConfig<any>>{\n        getExpressionFieldTips: (): TagModel<AdvancedFilterExpressionTip>[] => [],\n        needRemoveTagValue: (value) => AdvancedFilterDataTypesConfigsService.isEmptyOnEmptyValues(value),\n        formatValueForTag: (value) => String(value),\n        // TODO: Refactor this if possible\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        getTagText(value: any, filterOption: AdvancedFilterOption): string {\n          return formatAdvancedFilterTagText(filterOption,\n            (this as AdvancedFilterOptionConfig).formatValueForTag(value, filterOption));\n        },\n        updateFilterValue: (newValue) => newValue,\n        parseTagFieldExpression: () => null,\n        validateValue: () => [],\n      },\n\n      [AdvancedFilterOptionDataType.boolean]: <AdvancedFilterOptionConfig<AdvancedFilterBooleanDataType>>{\n        getExpressionFieldTips(option: AdvancedFilterOption): TagModel<AdvancedFilterExpressionTip>[] {\n          const config = this as AdvancedFilterOptionConfig<AdvancedFilterBooleanDataType>;\n\n          return [\n            AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag<AdvancedFilterBooleanDataType>(false, option, config, false),\n            AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag<AdvancedFilterBooleanDataType>(true, option, config, false),\n            AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag<AdvancedFilterBooleanDataType>(booleanDataTypeBlankValue, option, config, false),\n          ];\n        },\n        formatValueForTag: (value) => value ? (value === booleanDataTypeBlankValue ? texts.blankLabel : texts.trueLabel) : texts.falseLabel,\n        needRemoveTagValue: (value) => value == null,\n        parseTagFieldExpression: (option: AdvancedFilterOption, searchTerm: string) => {\n          let valuesStr = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(option, searchTerm);\n          let resultValue: AdvancedFilterBooleanDataType;\n\n          valuesStr = valuesStr ? valuesStr.trim().toUpperCase() : null;\n\n          switch (valuesStr) {\n            case texts.trueLabel.toUpperCase():\n              resultValue = true;\n              break;\n            case texts.falseLabel.toUpperCase():\n              resultValue = false;\n              break;\n            case texts.blankLabel.toUpperCase():\n              resultValue = booleanDataTypeBlankValue;\n              break;\n            default:\n              return null;\n          }\n\n          return {value: resultValue};\n        },\n      },\n\n      [AdvancedFilterOptionDataType.string]: <AdvancedFilterOptionConfig<AdvancedFilterStringDataType>>{\n        getExpressionFieldTips(option: AdvancedFilterOption): TagModel<AdvancedFilterExpressionTip>[] {\n          return [AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag([], option, this, true, formatAdvancedFilterTagText(option, ''))];\n        },\n        formatValueForTag: (value, filterOption) => {\n          const params = (filterOption.data || {}) as AdvancedFilterStringTypeParams;\n\n          if (typeof params.adjustModelForTagField === 'function') {\n            const newValue = params.adjustModelForTagField(value, filterOption);\n\n            if (newValue) {\n              value = newValue.map(tag => getTagText(tag));\n            }\n          }\n\n          return value.join(', ');\n        },\n        needRemoveTagValue: (value) => AdvancedFilterDataTypesConfigsService.isEmptyOnEmptyValues(value) || value.every(val => isEmptyOrWhitespace(val)),\n        updateFilterValue: (newValue, oldValue) => uniq(oldValue.concat(newValue)),\n        parseTagFieldExpression: (option: AdvancedFilterOption, searchTerm: string) => {\n          const valuesStr = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(option, searchTerm);\n\n          if (!valuesStr) {\n            return null;\n          }\n\n          const values = valuesStr.split(',').filter(str => !isEmptyOrWhitespace(str)).map(str => str.trim());\n\n          return values.length ? {value: values} : null;\n        },\n      },\n\n      [AdvancedFilterOptionDataType.time]: <AdvancedFilterOptionConfig<AdvancedFilterTimeDataType>>{\n        getExpressionFieldTips(option: AdvancedFilterOption): TagModel<AdvancedFilterExpressionTip>[] {\n          return [\n            AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag([null, null], option, this, true, formatAdvancedFilterTagText(option, '')),\n            AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag([null, null], option, this, true, `${option.label} ${texts.fromLabel} `),\n            AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag([null, null], option, this, true, `${option.label} ${texts.toLabel} `)\n          ];\n        },\n        formatValueForTag: (value) => {\n          return value.filter(val => val).map(date => parserFormatter.format(date, RxDatetimePickerMode.Time, true)).join(' - ');\n        },\n        updateFilterValue: (newValue, oldValue) => {\n          return [newValue[0] || oldValue[0], newValue[1] || oldValue[1]];\n        },\n        parseTagFieldExpression: (filterOption: AdvancedFilterOption, searchTerm: string) => {\n          let valuesStr = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm, `${filterOption.label} ${texts.fromLabel}`);\n\n          if (valuesStr != null) {\n            const dateFrom = parserFormatter.parse(valuesStr, RxDatetimePickerMode.Time, true);\n\n            return dateFrom.parseError ? null : {value: [dateFrom, null]};\n          }\n\n          valuesStr = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm, `${filterOption.label} ${texts.toLabel}`);\n\n          if (valuesStr != null) {\n            const dateTo = parserFormatter.parse(valuesStr, RxDatetimePickerMode.Time, true);\n\n            return dateTo.parseError ? null : {value: [null, dateTo]};\n          }\n\n          valuesStr = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm);\n\n          if (valuesStr != null) {\n            const valuesStrings = valuesStr.split('-');\n            const dateFrom = parserFormatter.parse(valuesStrings[0], RxDatetimePickerMode.Time, true);\n            const dateTo = valuesStrings[1] ? parserFormatter.parse(valuesStrings[1], RxDatetimePickerMode.Time, true) : {parseError: {query: valuesStrings[1]}};\n\n            return (dateFrom.parseError && !dateTo.parseError) ?\n              null : {value: [!dateFrom.parseError ? dateFrom : null, !dateTo.parseError ? dateTo : null]};\n          }\n\n          return null;\n        },\n        validateValue: (value) => {\n          const fromValue = value && value[0];\n          const toValue = value && value[1];\n\n          if ((fromValue && !fromValue.parseError) && (toValue && !toValue.parseError) && checkIsAfter(fromValue, toValue)) {\n            return [{name: texts.validationErrors.invalidRangeName, text: texts.validationErrors.invalidRangeText}];\n          }\n\n          return [];\n        },\n      },\n\n      [AdvancedFilterOptionDataType.date]: <AdvancedFilterOptionConfig<AdvancedFilterDateDataType>>{\n        getExpressionFieldTips(option: AdvancedFilterOption): TagModel<AdvancedFilterExpressionTip>[] {\n          return [\n            AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag([null, null], option, this, true, formatAdvancedFilterTagText(option, '')),\n            AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag([null, null], option, this, true, `${option.label} ${texts.fromLabel} `),\n            AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag([null, null], option, this, true, `${option.label} ${texts.toLabel} `)\n          ];\n        },\n        formatValueForTag(value: [RxDatetimeStruct, RxDatetimeStruct]): string {\n          return value.filter(val => val).map(date => parserFormatter.format(date, RxDatetimePickerMode.Date)).join(' - ');\n        },\n        updateFilterValue: (newValue, oldValue) => {\n          return [newValue[0] || oldValue[0], newValue[1] || oldValue[1]];\n        },\n        parseTagFieldExpression: (filterOption: AdvancedFilterOption, searchTerm: string) => {\n          let valuesStr = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm, `${filterOption.label} ${texts.fromLabel}`);\n\n          if (valuesStr != null) {\n            const dateFrom = parserFormatter.parse(valuesStr, RxDatetimePickerMode.Date);\n\n            return dateFrom.parseError ? null : {value: [dateFrom, null]};\n          }\n\n          valuesStr = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm, `${filterOption.label} ${texts.toLabel}`);\n\n          if (valuesStr != null) {\n            const dateTo = parserFormatter.parse(valuesStr, RxDatetimePickerMode.Date);\n\n            return dateTo.parseError ? null : {value: [null, dateTo]};\n          }\n\n          valuesStr = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm);\n\n          if (valuesStr != null) {\n            const valuesStrings = valuesStr.split('-');\n            const dateFrom = parserFormatter.parse(valuesStrings[0], RxDatetimePickerMode.Date);\n            const dateTo = valuesStrings[1] ? parserFormatter.parse(valuesStrings[1], RxDatetimePickerMode.Date) : {parseError: {query: valuesStrings[1]}};\n\n            return (dateFrom.parseError && dateTo.parseError) ?\n              null : {value: [!dateFrom.parseError ? dateFrom : null, !dateTo.parseError ? dateTo : null]};\n          }\n\n          return null;\n        },\n        validateValue: (value) => {\n          const fromValue = value && value[0];\n          const toValue = value && value[1];\n\n          if ((fromValue && !fromValue.parseError) && (toValue && !toValue.parseError) && checkIsAfter(fromValue, toValue)) {\n            return [{name: texts.validationErrors.invalidRangeName, text: texts.validationErrors.invalidRangeText}];\n          }\n\n          return [];\n        },\n      },\n\n      [AdvancedFilterOptionDataType.datetime]: <AdvancedFilterOptionConfig<AdvancedFilterDatetimeDataType>>{\n        getExpressionFieldTips(option: AdvancedFilterOption): TagModel<AdvancedFilterExpressionTip>[] {\n          return [\n            AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag([null, null], option, this, true, formatAdvancedFilterTagText(option, '')),\n            AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag([null, null], option, this, true, `${option.label} ${texts.fromLabel} `),\n            AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag([null, null], option, this, true, `${option.label} ${texts.toLabel} `)\n          ];\n        },\n        formatValueForTag(value: [RxDatetimeStruct, RxDatetimeStruct]): string {\n          return value.filter(val => val).map(date => parserFormatter.format(date, RxDatetimePickerMode.DateTime)).join(' - ');\n        },\n        updateFilterValue: (newValue, oldValue) => {\n          return [newValue[0] || oldValue[0], newValue[1] || oldValue[1]];\n        },\n        parseTagFieldExpression: (filterOption: AdvancedFilterOption, searchTerm: string) => {\n          let valuesStr = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm, `${filterOption.label} ${texts.fromLabel}`);\n\n          if (valuesStr != null) {\n            const dateFrom = parserFormatter.parse(valuesStr, RxDatetimePickerMode.DateTime);\n\n            return dateFrom.parseError ? null : {value: [dateFrom, null]};\n          }\n\n          valuesStr = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm, `${filterOption.label} ${texts.toLabel}`);\n\n          if (valuesStr != null) {\n            const dateTo = parserFormatter.parse(valuesStr, RxDatetimePickerMode.DateTime);\n\n            return dateTo.parseError ? null : {value: [null, dateTo]};\n          }\n\n          valuesStr = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm);\n\n          if (valuesStr != null) {\n            const valuesStrings = valuesStr.split('-');\n            const dateFrom = parserFormatter.parse(valuesStrings[0], RxDatetimePickerMode.DateTime);\n            const dateTo = valuesStrings[1] ? parserFormatter.parse(valuesStrings[1], RxDatetimePickerMode.DateTime) : {parseError: {query: valuesStrings[1]}};\n\n            return (dateFrom.parseError && dateTo.parseError) ?\n              null : {value: [!dateFrom.parseError ? dateFrom : null, !dateTo.parseError ? dateTo : null]};\n          }\n\n          return null;\n        },\n        validateValue: (value) => {\n          const fromValue = value && value[0];\n          const toValue = value && value[1];\n\n          if ((fromValue && !fromValue.parseError) && (toValue && !toValue.parseError) && checkIsAfter(fromValue, toValue)) {\n            return [{name: texts.validationErrors.invalidRangeName, text: texts.validationErrors.invalidRangeText}];\n          }\n\n          return [];\n        },\n      },\n\n      [AdvancedFilterOptionDataType.selection]: <AdvancedFilterOptionConfig<AdvancedFilterSelectionDataType>>{\n        getExpressionFieldTips(filterOption: AdvancedFilterOption): TagModel<AdvancedFilterExpressionTip>[] {\n          const data = (filterOption.data as AdvancedFilterSelectionTypeData);\n          const selectOptions = data && data.selectOptions || [];\n\n          return selectOptions.map(selectOption => {\n            return AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag([selectOption.id], filterOption, this,\n              false, formatAdvancedFilterTagText(filterOption, selectOption.name));\n          });\n        },\n        formatValueForTag: (value, option: AdvancedFilterOption): string => {\n          const data = (option.data as AdvancedFilterSelectionTypeData);\n          const selectOptions = data && data.selectOptions || [];\n\n          return value.map(id => selectOptions.find(selectOption => selectOption.id === id).name).join(', ');\n        },\n        updateFilterValue: (newValue, oldValue) => uniq(oldValue.concat(newValue)),\n        parseTagFieldExpression: (filterOption: AdvancedFilterOption, searchTerm: string) => {\n          const valuesStr = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm);\n\n          if (!valuesStr) {\n            return null;\n          }\n\n          const data = (filterOption.data as AdvancedFilterSelectionTypeData);\n          const selectOptions = data && data.selectOptions || [];\n          let value: number[] = [];\n\n          valuesStr.split(',').forEach(optionLabel => {\n            optionLabel = optionLabel.trim().toUpperCase();\n            const selectOption = selectOptions.find(option => option.name.toUpperCase() === optionLabel);\n\n            if (selectOption) {\n              value.push(selectOption.id);\n            }\n          });\n\n          value = uniq(value);\n\n          return value.length ? {value} : null;\n        },\n      },\n\n      [AdvancedFilterOptionDataType.number]: <AdvancedFilterOptionConfig<AdvancedFilterNumberDataType>>{\n        getExpressionFieldTips(option: AdvancedFilterOption): TagModel<AdvancedFilterExpressionTip>[] {\n          return [\n            AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag([null, null], option, this, true, formatAdvancedFilterTagText(option, '')),\n            AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag([null, null], option, this, true, `${option.label} ${texts.fromLabel} `),\n            AdvancedFilterDataTypesConfigsService.createAdvancedFilterTag([null, null], option, this, true, `${option.label} ${texts.toLabel} `)\n          ];\n        },\n        formatValueForTag: (value) => value.filter(val => val != null).map(val => String(val)).join(' - '),\n        updateFilterValue: (newValue, oldValue) => {\n          return [newValue[0] == null ? oldValue[0] : newValue[0], newValue[1] == null ? oldValue[1] : newValue[1]];\n        },\n        parseTagFieldExpression: (filterOption: AdvancedFilterOption, searchTerm: string) => {\n          let valuesStr = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm, `${filterOption.label} ${texts.fromLabel}`);\n\n          if (valuesStr != null) {\n            const fromValue = parseFloat(valuesStr);\n\n            return isFiniteNumber(fromValue) ? {value: [fromValue, null]} : null;\n          }\n\n          valuesStr = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm, `${filterOption.label} ${texts.toLabel}`);\n\n          if (valuesStr != null) {\n            const toValue = parseFloat(valuesStr);\n\n            return isFiniteNumber(toValue) ? {value: [null, toValue]} : null;\n          }\n\n          valuesStr = AdvancedFilterDataTypesConfigsService.getExpressionRawValues(filterOption, searchTerm);\n\n          if (valuesStr != null) {\n            const values = parseNumericRange(valuesStr.trim());\n\n            return isEmpty(values) ? null : {value: [values[0], isFiniteNumber(values[1]) ? values[1] : null]};\n          }\n\n          return null;\n        },\n        validateValue: (value, filterOption) => {\n          const fromValue = value && value[0];\n          const toValue = value && value[1];\n\n          const errors: ValidationError[] = [];\n          const isFiniteFromValue = isFiniteNumber(fromValue);\n          const isFiniteToValue = isFiniteNumber(toValue);\n          const numberTypeTexts = texts.validationErrors.numberTypeTexts;\n          const filterParams = (filterOption.data || {}) as AdvancedFilterNumberTypeParams;\n          const minValue = filterParams.minValue;\n          const maxValue = filterParams.maxValue;\n\n          if (!isFiniteFromValue && fromValue != null) {\n            errors.push({name: texts.validationErrors.invalidRangeName, text: numberTypeTexts.fromValueMustBeNumber});\n          }\n\n          if (!isFiniteToValue && toValue != null) {\n            errors.push({name: texts.validationErrors.invalidRangeName, text: numberTypeTexts.toValueMustBeNumber});\n          }\n\n          if (isFiniteFromValue && isFiniteToValue && fromValue > toValue) {\n            errors.push({name: texts.validationErrors.invalidRangeName, text: texts.validationErrors.invalidRangeText});\n          }\n\n          if ((minValue != null && (isFiniteFromValue && (new BigNumber(fromValue)).isLessThan(minValue) ||\n              isFiniteToValue && (new BigNumber(toValue)).isLessThan(minValue))) ||\n            (maxValue != null && (isFiniteFromValue && (new BigNumber(fromValue)).isGreaterThan(maxValue) ||\n              isFiniteToValue && (new BigNumber(toValue)).isGreaterThan(maxValue)))) {\n\n            if (minValue == null || maxValue == null) {\n              if (maxValue == null) {\n                errors.push({\n                  name: texts.validationErrors.invalidRangeName,\n                  text: numberTypeTexts.invalidMinValue.replace('{minValue}', String(minValue))\n                });\n              } else {\n                errors.push({\n                  name: texts.validationErrors.invalidRangeName,\n                  text: numberTypeTexts.invalidMaxValue.replace('{maxValue}', String(maxValue))\n                });\n              }\n            } else {\n              errors.push({\n                name: texts.validationErrors.invalidRangeName,\n                text: numberTypeTexts.invalidBetweenMinAndMax.replace('{minValue}', String(minValue))\n                  .replace('{maxValue}', String(maxValue))\n              });\n            }\n          }\n\n          return errors;\n        },\n      },\n    };\n\n    // set default implementations\n    const baseAdvancedFilterOptionConfig = configs[AdvancedFilterOptionDataType.custom];\n\n    for (const key in configs) {\n      if (Object.prototype.hasOwnProperty.call(configs, key) && key !== AdvancedFilterOptionDataType.custom) {\n        configs[key] = {...baseAdvancedFilterOptionConfig, ...configs[key]};\n      }\n    }\n\n    return configs;\n  }\n}\n"]}