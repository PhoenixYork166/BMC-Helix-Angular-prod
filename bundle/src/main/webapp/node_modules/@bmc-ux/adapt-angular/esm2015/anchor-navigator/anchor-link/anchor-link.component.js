import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { Directionality } from '@angular/cdk/bidi';
import { transition, trigger, useAnimation } from '@angular/animations';
import { ANIMATION_DURATION, ANIMATION_NAME } from '../../common/animation';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/bidi";
import * as i2 from "@angular/common";
const _c0 = ["anchor"];
const _c1 = ["animationLine"];
function AdaptAnchorLinkComponent_span_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelement(2, "span", 8);
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵclassMap(ctx_r2.item.icon);
} }
function AdaptAnchorLinkComponent_span_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 9);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("@anchorAppearance", ctx_r3.isRtl);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r3.item.name);
} }
export class AdaptAnchorLinkComponent {
    constructor(_dir) {
        this._dir = _dir;
        this.isMobile = false;
        this.isNavigatorVisible = true;
        /* eslint-disable-next-line @angular-eslint/no-output-on-prefix */
        this.onLinkClick = new EventEmitter();
        this.isRtl = false;
        this.isRtl = this._dir.value === 'rtl';
    }
    navigateTo(event) {
        event.stopPropagation();
        event.preventDefault();
        this.onLinkClick.emit(this.item);
    }
}
AdaptAnchorLinkComponent.ɵfac = function AdaptAnchorLinkComponent_Factory(t) { return new (t || AdaptAnchorLinkComponent)(i0.ɵɵdirectiveInject(i1.Directionality)); };
AdaptAnchorLinkComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptAnchorLinkComponent, selectors: [["adapt-anchor-link"]], viewQuery: function AdaptAnchorLinkComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.anchor = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.animationLine = _t.first);
    } }, inputs: { item: "item", isMobile: "isMobile", isNavigatorVisible: "isNavigatorVisible" }, outputs: { onLinkClick: "onLinkClick" }, decls: 16, vars: 3, consts: [["role", "menuitemradio", 1, "anchor-navigator__link", 3, "href", "click"], ["anchor", ""], [1, "anchor-navigator__line"], [1, "anchor-navigator__line-animation"], ["animationLine", ""], [1, "anchor-navigator__link--title"], [3, "class", 4, "ngIf"], ["class", "title-text", 4, "ngIf"], [1, "icon-space"], [1, "title-text"]], template: function AdaptAnchorLinkComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "a", 0, 1);
        i0.ɵɵlistener("click", function AdaptAnchorLinkComponent_Template_a_click_0_listener($event) { return ctx.navigateTo($event); });
        i0.ɵɵtext(2, "\n  ");
        i0.ɵɵelement(3, "span", 2);
        i0.ɵɵtext(4, "\n  ");
        i0.ɵɵelement(5, "span", 3, 4);
        i0.ɵɵtext(7, "\n\n  ");
        i0.ɵɵelementStart(8, "span", 5);
        i0.ɵɵtext(9, "\n    ");
        i0.ɵɵtemplate(10, AdaptAnchorLinkComponent_span_10_Template, 4, 3, "span", 6);
        i0.ɵɵtext(11, "\n    ");
        i0.ɵɵtemplate(12, AdaptAnchorLinkComponent_span_12_Template, 2, 2, "span", 7);
        i0.ɵɵtext(13, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(14, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(15, "\n");
    } if (rf & 2) {
        i0.ɵɵpropertyInterpolate("href", ctx.item.href, i0.ɵɵsanitizeUrl);
        i0.ɵɵadvance(10);
        i0.ɵɵproperty("ngIf", !ctx.isMobile && ctx.item.icon);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx.isMobile || ctx.isNavigatorVisible);
    } }, directives: [i2.NgIf], encapsulation: 2, data: { animation: [
            trigger('anchorAppearance', [
                transition('void => true', [
                    useAnimation(ANIMATION_NAME.moveIn, {
                        params: {
                            duration: ANIMATION_DURATION.medium,
                            translateX: -44,
                            unit: 'px'
                        }
                    })
                ]),
                transition('void => false', [
                    useAnimation(ANIMATION_NAME.moveIn, {
                        params: {
                            duration: ANIMATION_DURATION.medium,
                            translateX: 44,
                            unit: 'px'
                        }
                    })
                ]),
                transition('true => void', [
                    useAnimation(ANIMATION_NAME.moveOut, {
                        params: {
                            duration: ANIMATION_DURATION.medium,
                            translateX: -44,
                            unit: 'px'
                        }
                    })
                ]),
                transition('false => void', [
                    useAnimation(ANIMATION_NAME.moveOut, {
                        params: {
                            duration: ANIMATION_DURATION.medium,
                            translateX: 44,
                            unit: 'px'
                        }
                    })
                ])
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptAnchorLinkComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-anchor-link',
                templateUrl: './anchor-link.component.html',
                animations: [
                    trigger('anchorAppearance', [
                        transition('void => true', [
                            useAnimation(ANIMATION_NAME.moveIn, {
                                params: {
                                    duration: ANIMATION_DURATION.medium,
                                    translateX: -44,
                                    unit: 'px'
                                }
                            })
                        ]),
                        transition('void => false', [
                            useAnimation(ANIMATION_NAME.moveIn, {
                                params: {
                                    duration: ANIMATION_DURATION.medium,
                                    translateX: 44,
                                    unit: 'px'
                                }
                            })
                        ]),
                        transition('true => void', [
                            useAnimation(ANIMATION_NAME.moveOut, {
                                params: {
                                    duration: ANIMATION_DURATION.medium,
                                    translateX: -44,
                                    unit: 'px'
                                }
                            })
                        ]),
                        transition('false => void', [
                            useAnimation(ANIMATION_NAME.moveOut, {
                                params: {
                                    duration: ANIMATION_DURATION.medium,
                                    translateX: 44,
                                    unit: 'px'
                                }
                            })
                        ])
                    ])
                ],
            }]
    }], function () { return [{ type: i1.Directionality }]; }, { item: [{
            type: Input
        }], isMobile: [{
            type: Input
        }], isNavigatorVisible: [{
            type: Input
        }], anchor: [{
            type: ViewChild,
            args: ['anchor', { static: true }]
        }], animationLine: [{
            type: ViewChild,
            args: ['animationLine', { static: true }]
        }], onLinkClick: [{
            type: Output
        }] }); })();
//# sourceMappingURL=anchor-link.component.js.map