import { ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Input, NgZone, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { BACKSPACE, DELETE, ENTER } from '@angular/cdk/keycodes';
import { takeUntil, throttleTime } from 'rxjs/operators';
import { asyncScheduler, noop, ReplaySubject, Subject } from 'rxjs';
import { isNil } from 'lodash-es';
import { ColorUtils, getColorType, getRGBColorFromString, getStringFromRGBColor, SourceTypes } from '../common/color.utils';
import { AdaptDeviceDetectionService } from '../common/device-detection.service';
import { AdaptTranslateService } from '../common/i18n/index';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import { ColorType } from '../common/common.enums';
import { adaptWarn } from '../common/logger';
import { getEventKeyCode } from '../common/key-codes';
import { ResizeService } from '../common/resize/resize.service';
import { AdaptDropdownDirective } from '../dropdown/index';
import * as i0 from "@angular/core";
import * as i1 from "../common/resize/resize.service";
import * as i2 from "../common/i18n/index";
import * as i3 from "../common/device-detection.service";
import * as i4 from "../common/radar/adapt-radar";
import * as i5 from "../dropdown/dropdown.component";
import * as i6 from "@angular/common";
import * as i7 from "../dragon-input-handler/dragon-input-handler.directive";
import * as i8 from "@angular/forms";
import * as i9 from "../tabs/tabs.component";
import * as i10 from "../tabs/tabs-panel.component";
import * as i11 from "../empty-state/empty-state.component";
import * as i12 from "./color";
import * as i13 from "../button-group/button-group.component";
const _c0 = ["adaptDropdown"];
function AdaptColorPickerComponent_ng_container_5_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 14);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementEnd();
} }
function AdaptColorPickerComponent_ng_container_5_div_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 15);
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵstyleProp("background-color", ctx_r5.previewBGColor)("border-color", ctx_r5.previewBorderColor);
} }
function AdaptColorPickerComponent_ng_container_5_div_24_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 19);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const type_r9 = ctx.$implicit;
    const ctx_r8 = i0.ɵɵnextContext(3);
    i0.ɵɵclassProp("active", type_r9 === ctx_r8.colorType);
    i0.ɵɵattribute("aria-hidden", type_r9 !== ctx_r8.colorType);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", type_r9, "\n          ");
} }
function AdaptColorPickerComponent_ng_container_5_div_24_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 16);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "button", 17);
    i0.ɵɵlistener("click", function AdaptColorPickerComponent_ng_container_5_div_24_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(2); return ctx_r10.onColorTypeButtonClick(); })("focus", function AdaptColorPickerComponent_ng_container_5_div_24_Template_button_focus_2_listener() { i0.ɵɵrestoreView(_r11); const ctx_r12 = i0.ɵɵnextContext(2); return ctx_r12.onColorTypeButtonFocus(); })("blur", function AdaptColorPickerComponent_ng_container_5_div_24_Template_button_blur_2_listener() { i0.ɵɵrestoreView(_r11); const ctx_r13 = i0.ɵɵnextContext(2); return ctx_r13.onColorTypeButtonBlur(); });
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵtemplate(4, AdaptColorPickerComponent_ng_container_5_div_24_div_4_Template, 2, 4, "div", 18);
    i0.ɵɵtext(5, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("adapt-cp__type-wrapper_disabled", ctx_r7.disabled);
    i0.ɵɵadvance(2);
    i0.ɵɵattribute("aria-pressed", ctx_r7.colorType === ctx_r7.types[0]);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r7.types);
} }
const _c1 = function (a0, a1) { return { "hex-mask": a0, "rgb-mask": a1 }; };
const _c2 = function (a0) { return { "transformed": a0 }; };
function AdaptColorPickerComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    const _r15 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "div", 5);
    i0.ɵɵlistener("click", function AdaptColorPickerComponent_ng_container_5_Template_div_click_2_listener($event) { i0.ɵɵrestoreView(_r15); const ctx_r14 = i0.ɵɵnextContext(); return ctx_r14.openPopup($event); });
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵtemplate(4, AdaptColorPickerComponent_ng_container_5_div_4_Template, 2, 0, "div", 6);
    i0.ɵɵtext(5, "\n        ");
    i0.ɵɵtemplate(6, AdaptColorPickerComponent_ng_container_5_div_6_Template, 1, 4, "div", 7);
    i0.ɵɵtext(7, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n      ");
    i0.ɵɵelementStart(9, "div", 8);
    i0.ɵɵlistener("click", function AdaptColorPickerComponent_ng_container_5_Template_div_click_9_listener($event) { i0.ɵɵrestoreView(_r15); const _r6 = i0.ɵɵreference(16); const ctx_r16 = i0.ɵɵnextContext(); return ctx_r16.onInputWrapperClick($event, _r6); });
    i0.ɵɵtext(10, "\n        ");
    i0.ɵɵelementStart(11, "div", 9);
    i0.ɵɵtext(12, "\n          ");
    i0.ɵɵelementStart(13, "div");
    i0.ɵɵtext(14, "\n            ");
    i0.ɵɵelementStart(15, "input", 10, 11);
    i0.ɵɵlistener("input", function AdaptColorPickerComponent_ng_container_5_Template_input_input_15_listener($event) { i0.ɵɵrestoreView(_r15); const ctx_r17 = i0.ɵɵnextContext(); return ctx_r17.onInputElementInput($event); })("keydown", function AdaptColorPickerComponent_ng_container_5_Template_input_keydown_15_listener($event) { i0.ɵɵrestoreView(_r15); const ctx_r18 = i0.ɵɵnextContext(); return ctx_r18.onInputElementKeydown($event); })("focus", function AdaptColorPickerComponent_ng_container_5_Template_input_focus_15_listener() { i0.ɵɵrestoreView(_r15); const ctx_r19 = i0.ɵɵnextContext(); return ctx_r19.onInputElementFocus(); })("blur", function AdaptColorPickerComponent_ng_container_5_Template_input_blur_15_listener() { i0.ɵɵrestoreView(_r15); const ctx_r20 = i0.ɵɵnextContext(); return ctx_r20.onInputElementBlur(); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(17, "\n            ");
    i0.ɵɵelementStart(18, "span", 12);
    i0.ɵɵtext(19);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(20, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(21, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(22, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(23, "\n      ");
    i0.ɵɵtemplate(24, AdaptColorPickerComponent_ng_container_5_div_24_Template, 7, 4, "div", 13);
    i0.ɵɵtext(25, "\n    ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("adapt-cp__color-wrapper_readonly", ctx_r1.readonly)("adapt-cp__color-wrapper_disabled", ctx_r1.disabled);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r1.isEmptyState || !ctx_r1.selectedRGBColor);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !(ctx_r1.isEmptyState || !ctx_r1.selectedRGBColor));
    i0.ɵɵadvance(3);
    i0.ɵɵclassProp("adapt-cp__input-wrapper_centered", ctx_r1.isEmptyState && (!ctx_r1.readonly || ctx_r1.readonly && ctx_r1.disabledStyleForReadonlyState))("adapt-cp__input-wrapper_readonly", ctx_r1.readonly)("adapt-cp__input-wrapper_disabled", ctx_r1.disabled);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(24, _c1, ctx_r1.colorType === ctx_r1.colorTypes.HEX, ctx_r1.colorType === ctx_r1.colorTypes.RGB));
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngModel", ctx_r1.userInput)("ngClass", i0.ɵɵpureFunction1(27, _c2, !ctx_r1.isEmptyState))("placeholder", ctx_r1.placeholder)("pattern", ctx_r1.pattern)("disabled", ctx_r1.disabled)("readOnly", ctx_r1.readonly);
    i0.ɵɵattribute("aria-label", ctx_r1.label || ctx_r1.ariaLabel)("value", ctx_r1.userInput);
    i0.ɵɵadvance(3);
    i0.ɵɵattribute("data-placeholder", ctx_r1.placeholder);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r1.userInput);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", !ctx_r1.isEmptyState && (!ctx_r1.readonly || ctx_r1.readonly && ctx_r1.disabledStyleForReadonlyState));
} }
function AdaptColorPickerComponent_ng_container_7_div_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 25);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r21 = i0.ɵɵnextContext(2);
    i0.ɵɵstyleProp("background-color", !ctx_r21.isEmptyState ? ctx_r21.previewBGColor : "")("border-color", !ctx_r21.isEmptyState ? ctx_r21.previewBorderColor : "");
} }
function AdaptColorPickerComponent_ng_container_7_div_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 26);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelement(2, "div", 27);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r22 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("adapt-cp__color-wrapper_disabled", ctx_r22.disabled)("adapt-cp__color-wrapper_readonly", ctx_r22.readonly);
} }
function AdaptColorPickerComponent_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    const _r24 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "div", 20);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementStart(4, "button", 21);
    i0.ɵɵlistener("click", function AdaptColorPickerComponent_ng_container_7_Template_button_click_4_listener($event) { i0.ɵɵrestoreView(_r24); const ctx_r23 = i0.ɵɵnextContext(); return ctx_r23.openPopup($event); });
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵelementStart(6, "span", 22);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n          ");
    i0.ɵɵtemplate(9, AdaptColorPickerComponent_ng_container_7_div_9_Template, 2, 4, "div", 23);
    i0.ɵɵtext(10, "\n          ");
    i0.ɵɵtemplate(11, AdaptColorPickerComponent_ng_container_7_div_11_Template, 4, 4, "div", 24);
    i0.ɵɵtext(12, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(13, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n    ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(4);
    i0.ɵɵclassProp("disabled", ctx_r2.disabled)("readonly", ctx_r2.readonly)("is-focused", ctx_r2.isInputElementFocus)("adapt-cp_disabled", ctx_r2.disabled)("adapt-cp_readonly", ctx_r2.readonly && !ctx_r2.disabledStyleForReadonlyState)("form-control-disabled-look", ctx_r2.readonly && ctx_r2.disabledStyleForReadonlyState)("adapt-cp__focused", ctx_r2.isEditState && !ctx_r2.disabled);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r2.colorSmViewLabel);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !(ctx_r2.isEmptyState || !ctx_r2.selectedRGBColor));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r2.isEmptyState || !ctx_r2.selectedRGBColor);
} }
function AdaptColorPickerComponent_ng_template_10_div_5_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r34 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r34.colorType === ctx_r34.colorTypes.HEX ? "#" : ctx_r34.colorTypes.RGB);
} }
function AdaptColorPickerComponent_ng_template_10_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 36);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "div");
    i0.ɵɵtext(3, "\n              ");
    i0.ɵɵtemplate(4, AdaptColorPickerComponent_ng_template_10_div_5_span_4_Template, 2, 1, "span", 3);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n          ");
    i0.ɵɵelement(7, "div");
    i0.ɵɵtext(8, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r25 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("mx-5", ctx_r25.isTablet);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", !ctx_r25.isEmptyState);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n            ", ctx_r25.userInput, "\n          ");
    i0.ɵɵadvance(2);
    i0.ɵɵstyleProp("background-color", ctx_r25.previewBGColor);
} }
function AdaptColorPickerComponent_ng_template_10_div_7_div_25_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 19);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const type_r36 = ctx.$implicit;
    const ctx_r35 = i0.ɵɵnextContext(3);
    i0.ɵɵclassProp("active", type_r36 === ctx_r35.colorType);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", type_r36, "\n              ");
} }
function AdaptColorPickerComponent_ng_template_10_div_7_Template(rf, ctx) { if (rf & 1) {
    const _r38 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 37);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "div", 26);
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵelement(4, "div", 15);
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n          ");
    i0.ɵɵelementStart(7, "div", 38);
    i0.ɵɵtext(8, "\n            ");
    i0.ɵɵelementStart(9, "div", 9);
    i0.ɵɵtext(10, "\n              ");
    i0.ɵɵelementStart(11, "div");
    i0.ɵɵtext(12, "\n                ");
    i0.ɵɵelementStart(13, "input", 39);
    i0.ɵɵlistener("input", function AdaptColorPickerComponent_ng_template_10_div_7_Template_input_input_13_listener($event) { i0.ɵɵrestoreView(_r38); const ctx_r37 = i0.ɵɵnextContext(2); return ctx_r37.onInputElementInput($event); })("keydown", function AdaptColorPickerComponent_ng_template_10_div_7_Template_input_keydown_13_listener($event) { i0.ɵɵrestoreView(_r38); const ctx_r39 = i0.ɵɵnextContext(2); return ctx_r39.onInputElementKeydown($event); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n                ");
    i0.ɵɵelementStart(15, "span", 12);
    i0.ɵɵtext(16);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(17, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(19, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(20, "\n          ");
    i0.ɵɵelementStart(21, "div", 16);
    i0.ɵɵtext(22, "\n            ");
    i0.ɵɵelementStart(23, "button", 40);
    i0.ɵɵlistener("click", function AdaptColorPickerComponent_ng_template_10_div_7_Template_button_click_23_listener() { i0.ɵɵrestoreView(_r38); const ctx_r40 = i0.ɵɵnextContext(2); return ctx_r40.onColorTypeButtonClick(); });
    i0.ɵɵtext(24, "\n              ");
    i0.ɵɵtemplate(25, AdaptColorPickerComponent_ng_template_10_div_7_div_25_Template, 2, 3, "div", 18);
    i0.ɵɵtext(26, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(27, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(28, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r26 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵstyleProp("background-color", ctx_r26.previewBGColor)("border-color", ctx_r26.previewBorderColor);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(15, _c1, ctx_r26.colorType === ctx_r26.colorTypes.HEX, ctx_r26.colorType === ctx_r26.colorTypes.RGB));
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngModel", ctx_r26.userInput)("placeholder", ctx_r26.placeholder)("pattern", ctx_r26.pattern)("disabled", ctx_r26.disabled)("readOnly", ctx_r26.readonly);
    i0.ɵɵattribute("aria-label", ctx_r26.label || ctx_r26.ariaLabel)("value", ctx_r26.userInput);
    i0.ɵɵadvance(2);
    i0.ɵɵattribute("data-placeholder", ctx_r26.placeholder);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r26.userInput);
    i0.ɵɵadvance(9);
    i0.ɵɵproperty("ngForOf", ctx_r26.types);
} }
function AdaptColorPickerComponent_ng_template_10_adapt_tabset_9_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0, 46);
} if (rf & 2) {
    i0.ɵɵnextContext(2);
    const _r28 = i0.ɵɵreference(12);
    i0.ɵɵproperty("ngTemplateOutlet", _r28);
} }
function AdaptColorPickerComponent_ng_template_10_adapt_tabset_9_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0, 46);
} if (rf & 2) {
    i0.ɵɵnextContext(2);
    const _r30 = i0.ɵɵreference(15);
    i0.ɵɵproperty("ngTemplateOutlet", _r30);
} }
function AdaptColorPickerComponent_ng_template_10_adapt_tabset_9_Template(rf, ctx) { if (rf & 1) {
    const _r46 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-tabset", 41);
    i0.ɵɵlistener("tab-active-changed", function AdaptColorPickerComponent_ng_template_10_adapt_tabset_9_Template_adapt_tabset_tab_active_changed_0_listener($event) { i0.ɵɵrestoreView(_r46); const ctx_r45 = i0.ɵɵnextContext(2); return ctx_r45.onActiveTabChange($event); });
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "adapt-tab-panel", 42, 43);
    i0.ɵɵtext(4, "\n            ");
    i0.ɵɵtemplate(5, AdaptColorPickerComponent_ng_template_10_adapt_tabset_9_ng_container_5_Template, 1, 1, "ng-container", 44);
    i0.ɵɵtext(6, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n\n          ");
    i0.ɵɵelementStart(8, "adapt-tab-panel", 42, 45);
    i0.ɵɵtext(10, "\n            ");
    i0.ɵɵtemplate(11, AdaptColorPickerComponent_ng_template_10_adapt_tabset_9_ng_container_11_Template, 1, 1, "ng-container", 44);
    i0.ɵɵtext(12, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(13, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r41 = i0.ɵɵreference(3);
    const _r43 = i0.ɵɵreference(9);
    const ctx_r27 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("type", "pills")("tab-active", ctx_r27.activeTab)("carouselMode", false);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("isActive", ctx_r27.activeTab === 0)("icon", "d-icon-no_color")("aria-label", ctx_r27.noColorAriaLabel);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", _r41.isActive);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("isActive", ctx_r27.activeTab === 1)("icon", "d-icon-solid_color")("aria-label", ctx_r27.solidColorAriaLabel);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", _r43.isActive);
} }
function AdaptColorPickerComponent_ng_template_10_ng_template_11_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c3 = function () { return { isContainerInvisible: true }; };
function AdaptColorPickerComponent_ng_template_10_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n          ");
    i0.ɵɵelement(1, "adapt-empty-state", 47);
    i0.ɵɵtext(2, "\n          ");
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵtemplate(4, AdaptColorPickerComponent_ng_template_10_ng_template_11_ng_container_4_Template, 1, 0, "ng-container", 48);
    i0.ɵɵtext(5, "\n        ");
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r30 = i0.ɵɵreference(15);
    const ctx_r29 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("type", "objects")("label", ctx_r29.noColorSelected);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", _r30)("ngTemplateOutletContext", i0.ɵɵpureFunction0(5, _c3));
} }
function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_3_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 14);
    i0.ɵɵtext(1, "\n                ");
    i0.ɵɵelementEnd();
} }
function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_3_div_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 15);
} if (rf & 2) {
    const ctx_r54 = i0.ɵɵnextContext(4);
    i0.ɵɵstyleProp("background-color", ctx_r54.previewBGColor)("border-color", ctx_r54.previewBorderColor);
} }
function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_3_div_24_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 19);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const type_r58 = ctx.$implicit;
    const ctx_r57 = i0.ɵɵnextContext(5);
    i0.ɵɵclassProp("active", type_r58 === ctx_r57.colorType);
    i0.ɵɵattribute("aria-hidden", type_r58 !== ctx_r57.colorType);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", type_r58, "\n                  ");
} }
function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_3_div_24_Template(rf, ctx) { if (rf & 1) {
    const _r60 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 16);
    i0.ɵɵtext(1, "\n                ");
    i0.ɵɵelementStart(2, "button", 58);
    i0.ɵɵlistener("click", function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_3_div_24_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r60); const ctx_r59 = i0.ɵɵnextContext(4); return ctx_r59.onColorTypeButtonClick(); });
    i0.ɵɵtext(3, "\n                  ");
    i0.ɵɵtemplate(4, AdaptColorPickerComponent_ng_template_10_ng_template_14_div_3_div_24_div_4_Template, 2, 4, "div", 18);
    i0.ɵɵtext(5, "\n                ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n              ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r56 = i0.ɵɵnextContext(4);
    i0.ɵɵclassProp("adapt-cp__type-wrapper_disabled", ctx_r56.disabled);
    i0.ɵɵadvance(2);
    i0.ɵɵattribute("aria-pressed", ctx_r56.colorType === ctx_r56.types[0]);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r56.types);
} }
function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r62 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 56);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵelementStart(2, "div", 5);
    i0.ɵɵlistener("click", function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_3_Template_div_click_2_listener($event) { i0.ɵɵrestoreView(_r62); const ctx_r61 = i0.ɵɵnextContext(3); return ctx_r61.openPopup($event); });
    i0.ɵɵtext(3, "\n                ");
    i0.ɵɵtemplate(4, AdaptColorPickerComponent_ng_template_10_ng_template_14_div_3_div_4_Template, 2, 0, "div", 6);
    i0.ɵɵtext(5, "\n                ");
    i0.ɵɵtemplate(6, AdaptColorPickerComponent_ng_template_10_ng_template_14_div_3_div_6_Template, 1, 4, "div", 7);
    i0.ɵɵtext(7, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n              ");
    i0.ɵɵelementStart(9, "div", 8);
    i0.ɵɵlistener("click", function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_3_Template_div_click_9_listener() { i0.ɵɵrestoreView(_r62); const _r55 = i0.ɵɵreference(16); return _r55.focus(); });
    i0.ɵɵtext(10, "\n                ");
    i0.ɵɵelementStart(11, "div", 9);
    i0.ɵɵtext(12, "\n                  ");
    i0.ɵɵelementStart(13, "div");
    i0.ɵɵtext(14, "\n                    ");
    i0.ɵɵelementStart(15, "input", 10, 57);
    i0.ɵɵlistener("input", function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_3_Template_input_input_15_listener($event) { i0.ɵɵrestoreView(_r62); const ctx_r64 = i0.ɵɵnextContext(3); return ctx_r64.onInputElementInput($event); })("keydown", function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_3_Template_input_keydown_15_listener($event) { i0.ɵɵrestoreView(_r62); const ctx_r65 = i0.ɵɵnextContext(3); return ctx_r65.onInputElementKeydown($event); })("focus", function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_3_Template_input_focus_15_listener() { i0.ɵɵrestoreView(_r62); const ctx_r66 = i0.ɵɵnextContext(3); return ctx_r66.onInputElementFocus(); })("blur", function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_3_Template_input_blur_15_listener() { i0.ɵɵrestoreView(_r62); const ctx_r67 = i0.ɵɵnextContext(3); return ctx_r67.onInputElementBlur(); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(17, "\n                    ");
    i0.ɵɵelementStart(18, "span", 12);
    i0.ɵɵtext(19);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(20, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(21, "\n                ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(22, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(23, "\n              ");
    i0.ɵɵtemplate(24, AdaptColorPickerComponent_ng_template_10_ng_template_14_div_3_div_24_Template, 7, 4, "div", 13);
    i0.ɵɵtext(25, "\n            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r49 = i0.ɵɵnextContext(3);
    const _r0 = i0.ɵɵreference(1);
    i0.ɵɵclassProp("is-focused", ctx_r49.isInputElementFocus)("adapt-cp_disabled", ctx_r49.disabled)("adapt-cp_readonly", ctx_r49.readonly && !ctx_r49.disabledStyleForReadonlyState)("form-control-disabled-look", ctx_r49.readonly && ctx_r49.disabledStyleForReadonlyState)("adapt-cp__focused", _r0.isOpen() || ctx_r49.isInputElementFocus);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("adapt-cp__color-wrapper_readonly", ctx_r49.readonly)("adapt-cp__color-wrapper_disabled", ctx_r49.disabled);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r49.isEmptyState);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r49.isEmptyState);
    i0.ɵɵadvance(3);
    i0.ɵɵclassProp("adapt-cp__input-wrapper_centered", ctx_r49.isEmptyState && (!ctx_r49.readonly || ctx_r49.readonly && ctx_r49.disabledStyleForReadonlyState))("adapt-cp__input-wrapper_readonly", ctx_r49.readonly)("adapt-cp__input-wrapper_disabled", ctx_r49.disabled);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(34, _c1, ctx_r49.colorType === ctx_r49.colorTypes.HEX, ctx_r49.colorType === ctx_r49.colorTypes.RGB));
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngModel", ctx_r49.userInput)("ngClass", i0.ɵɵpureFunction1(37, _c2, !ctx_r49.isEmptyState))("placeholder", ctx_r49.placeholder)("pattern", ctx_r49.pattern)("disabled", ctx_r49.disabled)("readOnly", ctx_r49.readonly);
    i0.ɵɵattribute("aria-label", ctx_r49.label || ctx_r49.ariaLabel)("value", ctx_r49.userInput);
    i0.ɵɵadvance(3);
    i0.ɵɵattribute("data-placeholder", ctx_r49.placeholder);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r49.userInput);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", !ctx_r49.readonly && !ctx_r49.isEmptyState);
} }
function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 59);
} }
function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_14_Template(rf, ctx) { if (rf & 1) {
    const _r69 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 60);
    i0.ɵɵtext(1, "\n                ");
    i0.ɵɵelementStart(2, "span", 61);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n                ");
    i0.ɵɵelementStart(5, "div", 62);
    i0.ɵɵtext(6, "\n                  ");
    i0.ɵɵelementStart(7, "adapt-button-group", 63);
    i0.ɵɵlistener("ngModelChange", function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_14_Template_adapt_button_group_ngModelChange_7_listener($event) { i0.ɵɵrestoreView(_r69); const ctx_r68 = i0.ɵɵnextContext(3); return ctx_r68.themeColorsButtonGroupModel = $event; })("ngModelChange", function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_14_Template_adapt_button_group_ngModelChange_7_listener($event) { i0.ɵɵrestoreView(_r69); const ctx_r70 = i0.ɵɵnextContext(3); return ctx_r70.onColorSwatchChange(ctx_r70.sourceTypes.Theme, $event); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n                ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n              ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r51 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r51.themeColorsTitle);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngModel", ctx_r51.themeColorsButtonGroupModel)("adaptRadarDisableEventSending", true)("config", ctx_r51.themeColorsButtonGroupConfig)("groupType", "color-picker")("multiselectable", false)("uncheckable", false)("useCheckboxStyle", true)("testID", "cp-theme");
} }
function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_16_ng_template_9_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 65);
} }
function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_16_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n                        ");
    i0.ɵɵtemplate(1, AdaptColorPickerComponent_ng_template_10_ng_template_14_div_16_ng_template_9_span_1_Template, 1, 0, "span", 64);
    i0.ɵɵtext(2, "\n                    ");
} if (rf & 2) {
    const item_r72 = ctx.item;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", (item_r72 == null ? null : item_r72.name) === "empty");
} }
function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_16_Template(rf, ctx) { if (rf & 1) {
    const _r75 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 60);
    i0.ɵɵtext(1, "\n                ");
    i0.ɵɵelementStart(2, "span", 61);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n\n                ");
    i0.ɵɵelementStart(5, "div", 62);
    i0.ɵɵtext(6, "\n                  ");
    i0.ɵɵelementStart(7, "adapt-button-group", 63);
    i0.ɵɵlistener("ngModelChange", function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_16_Template_adapt_button_group_ngModelChange_7_listener($event) { i0.ɵɵrestoreView(_r75); const ctx_r74 = i0.ɵɵnextContext(3); return ctx_r74.recentlyColorsButtonGroupModel = $event; })("ngModelChange", function AdaptColorPickerComponent_ng_template_10_ng_template_14_div_16_Template_adapt_button_group_ngModelChange_7_listener($event) { i0.ɵɵrestoreView(_r75); const ctx_r76 = i0.ɵɵnextContext(3); return ctx_r76.onColorSwatchChange(ctx_r76.sourceTypes.Recent, $event); });
    i0.ɵɵtext(8, "\n                    ");
    i0.ɵɵtemplate(9, AdaptColorPickerComponent_ng_template_10_ng_template_14_div_16_ng_template_9_Template, 3, 1, "ng-template");
    i0.ɵɵtext(10, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n                ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n              ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r52 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r52.recentlyUsedTitle);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngModel", ctx_r52.recentlyColorsButtonGroupModel)("adaptRadarDisableEventSending", true)("config", ctx_r52.recentlyColorsButtonGroupConfig)("groupType", "color-picker")("multiselectable", false)("uncheckable", false)("useCheckboxStyle", true)("testID", "cp-recent");
} }
const _c4 = function (a0) { return [a0]; };
function AdaptColorPickerComponent_ng_template_10_ng_template_14_Template(rf, ctx) { if (rf & 1) {
    const _r78 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n          ");
    i0.ɵɵelementStart(1, "div", 49);
    i0.ɵɵtext(2, "\n\n            ");
    i0.ɵɵtemplate(3, AdaptColorPickerComponent_ng_template_10_ng_template_14_div_3_Template, 26, 39, "div", 50);
    i0.ɵɵtext(4, "\n\n            ");
    i0.ɵɵelementStart(5, "div", 51);
    i0.ɵɵtext(6, "\n              ");
    i0.ɵɵelementStart(7, "adapt-color", 52);
    i0.ɵɵlistener("colorChange", function AdaptColorPickerComponent_ng_template_10_ng_template_14_Template_adapt_color_colorChange_7_listener($event) { i0.ɵɵrestoreView(_r78); const ctx_r77 = i0.ɵɵnextContext(2); return ctx_r77.onColorChange($event); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n\n              ");
    i0.ɵɵtemplate(9, AdaptColorPickerComponent_ng_template_10_ng_template_14_div_9_Template, 1, 0, "div", 53);
    i0.ɵɵtext(10, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n\n            ");
    i0.ɵɵelementStart(12, "div", 54);
    i0.ɵɵtext(13, "\n              ");
    i0.ɵɵtemplate(14, AdaptColorPickerComponent_ng_template_10_ng_template_14_div_14_Template, 10, 9, "div", 55);
    i0.ɵɵtext(15, "\n\n              ");
    i0.ɵɵtemplate(16, AdaptColorPickerComponent_ng_template_10_ng_template_14_div_16_Template, 13, 9, "div", 55);
    i0.ɵɵtext(17, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(19, "\n        ");
} if (rf & 2) {
    const invisible_r48 = ctx.isContainerInvisible;
    const ctx_r31 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(11, _c4, invisible_r48 ? "adapt-cp-main__tab_invisible" : "adapt-cp-main__tab"));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r31.isResponsiveSmView);
    i0.ɵɵadvance(4);
    i0.ɵɵclassProp("mx-5", ctx_r31.isTablet);
    i0.ɵɵproperty("width", ctx_r31.pickerDimension)("height", ctx_r31.pickerDimension)("colorStripWidth", ctx_r31.colorStripWidth)("color", ctx_r31.selectedRGBColor);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r31.showRecentlyUsedColors || ctx_r31.showThemeColors);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", ctx_r31.showThemeColors);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r31.showRecentlyUsedColors);
} }
function AdaptColorPickerComponent_ng_template_10_div_17_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 66);
} }
function AdaptColorPickerComponent_ng_template_10_div_19_Template(rf, ctx) { if (rf & 1) {
    const _r80 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 67);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "button", 68);
    i0.ɵɵlistener("click", function AdaptColorPickerComponent_ng_template_10_div_19_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r80); const ctx_r79 = i0.ɵɵnextContext(2); return ctx_r79.closePopup(); });
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r33 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r33.selectLabel);
} }
function AdaptColorPickerComponent_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n    ");
    i0.ɵɵelementStart(1, "div", 28);
    i0.ɵɵtext(2, "\n      ");
    i0.ɵɵelementStart(3, "div");
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵtemplate(5, AdaptColorPickerComponent_ng_template_10_div_5_Template, 9, 6, "div", 29);
    i0.ɵɵtext(6, "\n\n        ");
    i0.ɵɵtemplate(7, AdaptColorPickerComponent_ng_template_10_div_7_Template, 29, 18, "div", 30);
    i0.ɵɵtext(8, "\n\n        ");
    i0.ɵɵtemplate(9, AdaptColorPickerComponent_ng_template_10_adapt_tabset_9_Template, 14, 12, "adapt-tabset", 31);
    i0.ɵɵtext(10, "\n\n        ");
    i0.ɵɵtemplate(11, AdaptColorPickerComponent_ng_template_10_ng_template_11_Template, 6, 6, "ng-template", null, 32, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(13, "\n\n        ");
    i0.ɵɵtemplate(14, AdaptColorPickerComponent_ng_template_10_ng_template_14_Template, 20, 13, "ng-template", null, 33, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(16, "\n\n        ");
    i0.ɵɵtemplate(17, AdaptColorPickerComponent_ng_template_10_div_17_Template, 1, 0, "div", 34);
    i0.ɵɵtext(18, "\n\n        ");
    i0.ɵɵtemplate(19, AdaptColorPickerComponent_ng_template_10_div_19_Template, 5, 1, "div", 35);
    i0.ɵɵtext(20, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(21, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(22, "\n  ");
} if (rf & 2) {
    const _r30 = i0.ɵɵreference(15);
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵclassProp("adapt-cp-mobile", ctx_r3.isMobile || ctx_r3.isTablet);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r3.isMobile);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r3.isTablet);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r3.showEmptyOption)("ngIfElse", _r30);
    i0.ɵɵadvance(8);
    i0.ɵɵproperty("ngIf", ctx_r3.isMobile || ctx_r3.isTablet);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r3.isMobile || ctx_r3.isTablet);
} }
const _c5 = function (a0, a3, a4, a5, a6) { return { title: a0, fullHeight: false, isPicker: true, cancelCB: a3, doneCB: a4, doneBtnTitle: a5, cancelBtnTitle: a6 }; };
var ColorPickerActiveTab;
(function (ColorPickerActiveTab) {
    ColorPickerActiveTab[ColorPickerActiveTab["Empty"] = 0] = "Empty";
    ColorPickerActiveTab[ColorPickerActiveTab["Palette"] = 1] = "Palette";
})(ColorPickerActiveTab || (ColorPickerActiveTab = {}));
const CP_SWATCH_COLOR_COUNT = 7;
const CP_TILE_BG_COLOR = '#F0F0F1';
const CP_FALLBACK_COLOR = '#FF0000';
const CP_COLOR_MARGIN = 38;
const CP_COLOR_STRIP_WIDTH = 6;
const CP_RESPONSIVE_SM_VIEW_BREAKPOINT = 230;
const CP_PICK_AREA_DIMENSION = 211;
const CP_INPUT_PLACEHOLDERS = { HEX: 'FFFFFF', RGB: '255,255,255' };
export class AdaptColorPickerComponent extends AdaptRadarAngularGenericDirective {
    constructor(_elementRef, _resizeService, _changeDetectorRef, _ngZone, _ts, _deviceDetector, _adaptRadarService) {
        super(_adaptRadarService, _elementRef, AdaptRadarAngularCustomEventName.AdaptColorPicker);
        this._elementRef = _elementRef;
        this._resizeService = _resizeService;
        this._changeDetectorRef = _changeDetectorRef;
        this._ngZone = _ngZone;
        this.types = [ColorType.HEX, ColorType.RGB];
        this.placeholder = '';
        this.pattern = /\s/;
        this.userInput = '';
        this.selectLabel = '';
        this.pickerDimension = CP_PICK_AREA_DIMENSION; // Color gradient is always square
        this.colorStripWidth = CP_COLOR_STRIP_WIDTH;
        this.activeTab = ColorPickerActiveTab.Palette;
        this.themeColorsButtonGroupConfig = [];
        this.recentlyColorsButtonGroupConfig = [];
        this.isValid = true;
        this.isInputElementFocus = false;
        this.isToggleTypeButtonFocus = false;
        this.isEditState = false;
        this.isEmptyState = true;
        this.isPopupClosingState = false;
        this.isResponsiveSmView = false;
        this.mobileDoneBtnHandler = (function () {
            this.closePopup();
        }).bind(this);
        this.mobileCancelBtnHandler = (function () {
            this._restorePreviouslyModel();
            this.closePopup();
        }).bind(this);
        this.colorTypes = ColorType;
        this.sourceTypes = SourceTypes;
        /**
         * Show/hide section with theme colors
         * Usage: set false to hide
         *
         * @docs-default true
         *
         * @since 11.13.0
         */
        this.showThemeColors = true;
        /**
         * Show/hide section with recently used colors
         * Usage: set false to hide
         *
         * @docs-default true
         *
         * @since 11.13.0
         */
        this.showRecentlyUsedColors = true;
        /**
         * Control label
         * @docs-default
         */
        this.label = '';
        /**
         * Mobile view settings
         * @docs-default
         */
        this.mobileView = {};
        /**
         * Picker placement
         * @docs-default ['bottom-left', 'top-left', 'bottom-right', 'top-right', 'bottom-left']
         */
        this.placement = ['bottom-left', 'top-left', 'bottom-right', 'top-right', 'bottom-left'];
        /**
         * Append to body trigger
         * @docs-default false
         */
        this.appendToBody = false;
        /**
         * Triggers disabled state
         * @docs-default false
         */
        this.disabled = false;
        /**
         * Triggers readonly state
         *
         * @docs-default false
         */
        this.readonly = false;
        /**
         * Empty color selection
         * Usage: set false to turn of ability to set empty/null color - hide empty option
         * @docs-default true
         *
         * @since 11.15.0
         */
        this.showEmptyOption = true;
        /**
         * Use disabled style for the control if [readonly]=true
         *
         * @docs-default false
         *
         * @since v11.6.0
         */
        this.disabledStyleForReadonlyState = false;
        /* eslint-disable @angular-eslint/no-output-on-prefix */
        /**
         * Fires when model change
         *
         * @deprecated since 12.13.0
         * Use onSelectColor instead
         */
        this.onChange = new EventEmitter();
        /**
         * Emits selected color
         * Usage: listen to this event to get selected color
         * <component (onSelectColor)='function($event)'></component>
         *
         * @since v11.12.0
         */
        this.onSelectColor = new EventEmitter();
        /* eslint-enable @angular-eslint/no-output-on-prefix */
        /* eslint-disable @angular-eslint/no-output-native */
        /**
         * Fires when picker open
         */
        this.open = new EventEmitter();
        /**
         * Fires when picker close
         */
        this.close = new EventEmitter();
        /**
         * Fires when input receives focus
         */
        this.focus = new EventEmitter();
        /**
         * Fires when input loose focus
         */
        this.blur = new EventEmitter();
        /* eslint-enable @angular-eslint/no-output-native */
        /**
         * Fires on update recently used colors
         *
         * @since v11.6.0
         */
        this.recentlyUsedColorsChanged = new EventEmitter();
        this._destroy$ = new ReplaySubject(1);
        this._value = '';
        this._componentStateChange$ = new Subject();
        this._recentlyUsedColors = new Array(CP_SWATCH_COLOR_COUNT).fill(null);
        this._colorType = ColorType.HEX;
        this._previouslySelectedColorType = ColorType.HEX;
        this._onTouchedCallback = noop;
        this._onChangeCallback = noop;
        this.isMobile = _deviceDetector.isMobile();
        this.isTablet = _deviceDetector.deviceTablet();
        this._isDesktop = !(this.isTablet || this.isMobile);
        const lang = _ts.getCurrentLanguage();
        this.ariaLabel = lang['adapt.colorPicker.areaLabel'];
        this.selectLabel = lang['adapt.common.select'];
        this.themeColorsTitle = lang['adapt.colorPicker.themeColorsTitle'];
        this.recentlyUsedTitle = lang['adapt.colorPicker.recentlyUsedTitle'];
        this.emptyPlaceholder = lang['adapt.common.none'];
        this.noColorSelected = lang['adapt.colorPicker.noColorSelected'];
        this.noColorAriaLabel = lang['adapt.colorPicker.noColorAriaLabel'];
        this.solidColorAriaLabel = lang['adapt.colorPicker.solidColorAriaLabel'];
        this.colorSmViewLabel = lang['adapt.colorPicker.colorSmViewLabel'];
        this._componentStateChange$
            .pipe(takeUntil(this._destroy$), throttleTime(0, asyncScheduler, { trailing: true }))
            .subscribe(() => {
            const nextEditState = !this.readonly && (this.isInputElementFocus || this.isToggleTypeButtonFocus ||
                (this.popup && (this.popup.isOpen() || (!this.popup.isOpen() && this.isPopupClosingState))));
            // Check edit mode change
            if (nextEditState !== this.isEditState) {
                if (nextEditState) {
                    // Store previously used color on enter edit mode
                    this._previouslySelectedRGBColor = this.selectedRGBColor;
                    this._previouslySelectedColorType = this.colorType;
                }
                else {
                    // Check model color for recently used on exit edit mode
                    this._checkModelColorForRecentlyUsed();
                    // Update user input on exit edit mode
                    this.userInput = this._getUserInputValue();
                    this.isValid = true;
                    // Set touched state on exit edit mode
                    if (!(this.disabled || this.readonly)) {
                        this._onTouchedCallback();
                    }
                }
            }
            this.isEditState = nextEditState;
            this.isEmptyState = !this.selectedRGBColor && this._isInputEmptyPlaceholderValue();
            if (this.isEmptyState) {
                this.userInput = this._getUserInputValue();
            }
            const newComponentState = [this.isValid, this.isEmptyState, this.isEditState, this.isPopupClosingState].join();
            if (newComponentState !== this._componentState) {
                this._componentState = newComponentState;
                this._changeDetectorRef.detectChanges();
            }
        });
        this.userInput = this._getUserInputValue();
        this.placeholder = CP_INPUT_PLACEHOLDERS[this._colorType];
    }
    set value(value) {
        this.writeValue(value);
    }
    get value() {
        return this._value;
    }
    /**
     * Color type (Available 2 abilities: HEX and RGB)
     *
     * @docs-default ColorType.HEX
     */
    set colorType(type) {
        this._setColorType(type);
        if (this.selectedRGBColor) {
            this.userInput = this._getUserInputValue();
        }
        this._changeDetectorRef.detectChanges();
    }
    get colorType() {
        return this._colorType;
    }
    /**
     * Set recently used colors. Color value must have HEX-color format like #A1B2C3
     *
     * @docs-default
     *
     * @since v11.6.0
     */
    set recentlyUsedColors(colors) {
        this._recentlyUsedColors = new Array(CP_SWATCH_COLOR_COUNT)
            .fill(null)
            .map((colorCell, index) => {
            if (colors[index]) {
                const colorRGB = getRGBColorFromString(colors[index].value);
                if (colorRGB) {
                    return {
                        value: colorRGB.formatHex(),
                        source: SourceTypes.Recent,
                        selected: false
                    };
                }
                else {
                    adaptWarn(`[recentlyUsedColors]: Please, check the format of provided color ${colors[index]}`);
                    return null;
                }
            }
            else {
                return null;
            }
        })
            /**
             * If some input items have invalid value, color will be null,
             * Move not null to the start.
             */
            .sort((colorA, colorB) => {
            if (colorA !== null && colorB !== null) {
                return 0;
            }
            return colorA === null ? 1 : -1;
        });
        this._updateRecentlyColorsButtonGroupConfig();
        this._updateSwatchColorsModel();
    }
    get recentlyUsedColors() {
        return this._recentlyUsedColors;
    }
    ngOnInit() {
        this._updateThemeColorsButtonGroupConfig();
        this._updateRecentlyColorsButtonGroupConfig();
        // In case we have a Tablet we need to set appropriate sizes for canvas
        if (this.isTablet) {
            this._checkTabletSizes();
        }
    }
    ngAfterViewInit() {
        const resize$ = new Subject();
        if (this._isDesktop) {
            resize$
                .pipe(takeUntil(this._destroy$), throttleTime(100, asyncScheduler, { trailing: true }))
                .subscribe(() => {
                this._checkPickerAnchorWidth();
            });
            this._resizeService.addResizeEventListener(this.wrapperElement.nativeElement, resize$.next.bind(resize$));
        }
        this._checkPickerAnchorWidth();
        this._changeDetectorRef.detectChanges();
    }
    ngOnDestroy() {
        var _a;
        if ((_a = this.wrapperElement) === null || _a === void 0 ? void 0 : _a.nativeElement) {
            this._resizeService.removeResizeEventListener(this.wrapperElement.nativeElement);
        }
    }
    openPopup(event) {
        if (this.disabled || this.readonly) {
            return;
        }
        if (this.popup.isOpen()) {
            return;
        }
        this.popup.open(event);
    }
    closePopup() {
        this.popup.close();
    }
    onColorSwatchChange(source, model) {
        let activeColorButton;
        const activeIndex = model.indexOf(true);
        switch (source) {
            case SourceTypes.Theme: {
                activeColorButton = this.themeColorsButtonGroupConfig[activeIndex];
                break;
            }
            case SourceTypes.Recent: {
                activeColorButton = this.recentlyColorsButtonGroupConfig[activeIndex];
                break;
            }
        }
        if (activeColorButton) {
            this._setModel(getRGBColorFromString(activeColorButton.value), source, true);
        }
    }
    onInputElementInput(event) {
        this.userInput = event.target.value;
        const typedValue = this.userInput
            .toLowerCase()
            .replace(/\s/, '')
            .trim();
        if (typedValue) {
            // Try parse as it is first (in case of paste color string)
            const parsedColorWithoutWrap = getRGBColorFromString(typedValue);
            const parsedColor = parsedColorWithoutWrap ||
                getRGBColorFromString(`#${typedValue}`) || // Try parse with HEX wrap
                getRGBColorFromString(`rgb(${typedValue})`); // Try parse with RGB wrap
            if (parsedColor) {
                this._setColorType(parsedColor.colorType);
                this._setModel(parsedColor, SourceTypes.Input, false);
                this.isValid = true;
                this.activeTab = ColorPickerActiveTab.Palette;
            }
            else {
                if (this._isInputEmptyPlaceholderValue()) {
                    if (this.showEmptyOption) {
                        this._setModel(null, SourceTypes.Input, false);
                        this.isValid = true;
                        this.activeTab = ColorPickerActiveTab.Empty;
                    }
                }
                else {
                    this.activeTab = ColorPickerActiveTab.Palette;
                    this.isValid = false;
                }
            }
        }
        else {
            this.activeTab = ColorPickerActiveTab.Palette;
            this.isValid = false;
        }
        this._componentStateChange$.next();
    }
    onInputElementKeydown(event) {
        switch (getEventKeyCode(event)) {
            case ENTER: {
                this.openPopup(event);
                break;
            }
            case BACKSPACE:
            case DELETE: {
                if (this._isInputEmptyPlaceholderValue()) {
                    this.userInput = '';
                    this.activeTab = ColorPickerActiveTab.Palette;
                    this._componentStateChange$.next();
                }
            }
        }
    }
    onInputElementFocus() {
        this.isInputElementFocus = true;
        this.focus.emit();
        this._componentStateChange$.next();
    }
    onInputElementBlur() {
        this.isInputElementFocus = false;
        this.blur.emit();
        this._componentStateChange$.next();
    }
    onInputWrapperClick(event, inputEl) {
        inputEl.focus();
        this.openPopup(event);
    }
    onColorChange(color) {
        this._setModel(color, SourceTypes.Picker, true);
        this._componentStateChange$.next();
    }
    onPopupOpen() {
        this.open.emit();
        // Check if the selected color is a recently used and put it in the first position of swatches if so
        if (this.selectedRGBColor) {
            const colorModel = this.selectedRGBColor.formatHex();
            const recentColorIndex = this.recentlyColorsButtonGroupConfig.findIndex(color => color.value === colorModel);
            if (recentColorIndex > 0) {
                const activeRecentlyUsedColor = this.recentlyColorsButtonGroupConfig.splice(recentColorIndex, 1)[0];
                this.recentlyColorsButtonGroupConfig.unshift(activeRecentlyUsedColor);
                const newRecentlyColorsButtonGroupModel = new Array(this.recentlyColorsButtonGroupConfig.length).fill(false);
                newRecentlyColorsButtonGroupModel[0] = true;
                this.recentlyColorsButtonGroupModel = newRecentlyColorsButtonGroupModel;
            }
            this.activeTab = ColorPickerActiveTab.Palette;
        }
        else {
            this.activeTab = ColorPickerActiveTab.Empty;
        }
        this._changeDetectorRef.detectChanges();
        this._componentStateChange$.next();
    }
    onPopupClose() {
        this.close.emit();
        this.isPopupClosingState = true;
        this._componentStateChange$.next();
    }
    onPopupAnimationDone() {
        if (!this.popup.isOpen()) {
            this.isPopupClosingState = false;
        }
        this._componentStateChange$.next();
    }
    onColorTypeButtonClick() {
        this.colorType = this._colorType === ColorType.HEX ? ColorType.RGB : ColorType.HEX;
        if (!(this.disabled || this.readonly) && this.selectedRGBColor) {
            this._setModel(this.selectedRGBColor, SourceTypes.Input, false);
        }
    }
    onColorTypeButtonFocus() {
        this.isToggleTypeButtonFocus = true;
        this._componentStateChange$.next();
    }
    onColorTypeButtonBlur() {
        this.isToggleTypeButtonFocus = false;
        this._componentStateChange$.next();
    }
    onActiveTabChange(event) {
        this.activeTab = event.index;
        switch (this.activeTab) {
            case ColorPickerActiveTab.Empty: {
                this._setModel(null, SourceTypes.Empty, true);
                break;
            }
            case ColorPickerActiveTab.Palette: {
                this._restorePreviouslyModel();
                break;
            }
        }
        this._componentStateChange$.next();
    }
    writeValue(value) {
        this._value = value || '';
        if (isNil(value)) {
            this.selectedRGBColor = null;
            this.userInput = this.emptyPlaceholder;
            this.isEmptyState = true;
            this.isValid = true;
            this.activeTab = ColorPickerActiveTab.Empty;
        }
        else {
            this.isEmptyState = false;
            const color = getRGBColorFromString(value);
            if (color) {
                this.selectedRGBColor = color;
                this._colorType = getColorType(value);
                this.placeholder = CP_INPUT_PLACEHOLDERS[this._colorType];
                this._previouslySelectedRGBColor = this.selectedRGBColor;
                this._previouslySelectedColorType = this._colorType;
                this.userInput = this._getUserInputValue();
                this._updatePreviewColor();
                this.isValid = true;
                this.activeTab = ColorPickerActiveTab.Palette;
            }
            else {
                // If color string parse error
                this.selectedRGBColor = null;
                this.userInput = value;
                this.isValid = false;
                this.activeTab = ColorPickerActiveTab.Empty;
            }
        }
        if (this._value && this.isValid && !this._isRecentlyUsedColor(this._value)) {
            this.recentlyColorsButtonGroupModel = new Array(this.recentlyColorsButtonGroupConfig.length).fill(false);
        }
        // Need additionally detect changes if value set programmatically
        this._changeDetectorRef.detectChanges();
    }
    registerOnChange(fn) {
        this._onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    _getUserInputValue() {
        return this.selectedRGBColor ? getStringFromRGBColor(this.selectedRGBColor, this._colorType)
            .replace('rgb', '')
            .replace('#', '')
            .replace('(', '')
            .replace(')', '') : this.emptyPlaceholder;
    }
    _setColorType(colorType) {
        this._colorType = colorType;
        this.placeholder = CP_INPUT_PLACEHOLDERS[this._colorType];
    }
    _checkModelColorForRecentlyUsed() {
        var _a;
        const modelColorHEX = (_a = this.selectedRGBColor) === null || _a === void 0 ? void 0 : _a.formatHex();
        if (modelColorHEX && !this._isRecentlyUsedColor(modelColorHEX) && !this._isThemeColor(modelColorHEX)) {
            this._recentlyUsedColors.splice(-1, 1);
            this._recentlyUsedColors.unshift({
                value: modelColorHEX,
                source: SourceTypes.Recent,
                selected: true
            });
            this._updateRecentlyColorsButtonGroupConfig();
            this.recentlyUsedColorsChanged.emit(this.recentlyUsedColors);
        }
        this._updateSwatchColorsModel();
    }
    _updatePreviewColor() {
        var _a;
        this.previewBGColor = ((_a = this.selectedRGBColor) === null || _a === void 0 ? void 0 : _a.formatHex()) || CP_TILE_BG_COLOR;
        this.previewBorderColor = ColorUtils.getBorderColor(this.previewBGColor);
    }
    _updateThemeColorsButtonGroupConfig() {
        const componentRootStyles = getComputedStyle(this._elementRef.nativeElement);
        // Root variables are HEX. Ensure to delete whitespaces from value sting.
        const primaryColor = componentRootStyles.getPropertyValue('--color-primary').trim().toLowerCase();
        const secondaryColor = componentRootStyles.getPropertyValue('--color-secondary').trim().toLowerCase();
        const activeColor = componentRootStyles.getPropertyValue('--color-active').trim().toLowerCase();
        const dangerColor = componentRootStyles.getPropertyValue('--color-danger').trim().toLowerCase();
        const warningColor = componentRootStyles.getPropertyValue('--color-warning').trim().toLowerCase();
        const successColor = componentRootStyles.getPropertyValue('--color-success').trim().toLowerCase();
        const infoColor = componentRootStyles.getPropertyValue('--color-info').trim().toLowerCase();
        // Button group config needs background with hash
        this.themeColorsButtonGroupConfig = [
            {
                name: 'primary',
                value: primaryColor,
                background: primaryColor,
                customClass: 'adapt-cp-theme'
            },
            {
                name: 'secondary',
                value: secondaryColor,
                background: secondaryColor,
                customClass: 'adapt-cp-theme'
            },
            {
                name: 'active',
                value: activeColor,
                background: activeColor,
                customClass: 'adapt-cp-theme'
            },
            {
                name: 'danger',
                value: dangerColor,
                background: dangerColor,
                customClass: 'adapt-cp-theme'
            },
            {
                name: 'warning',
                value: warningColor,
                background: warningColor,
                customClass: 'adapt-cp-theme'
            },
            {
                name: 'success',
                value: successColor,
                background: successColor,
                customClass: 'adapt-cp-theme'
            },
            {
                name: 'info',
                value: infoColor,
                background: infoColor,
                customClass: 'adapt-cp-theme'
            },
        ];
    }
    _updateRecentlyColorsButtonGroupConfig() {
        const buttonConfig = [];
        this._recentlyUsedColors.forEach(color => {
            if (color) {
                buttonConfig.push({
                    name: color.name || null,
                    value: color.value,
                    background: color.value,
                    customClass: 'adapt-cp-recent'
                });
            }
            else {
                buttonConfig.push({
                    customClass: 'adapt-cp-group__section__swatch-null empty-swatch adapt-cp-recent',
                    context: {
                        name: 'empty'
                    },
                    disabled: true
                });
            }
        });
        this.recentlyColorsButtonGroupConfig = buttonConfig;
    }
    // Check both: recently used and theme color models in one method to be sure we have only one checked item for 2 swatches
    _updateSwatchColorsModel() {
        var _a;
        const colorModel = (_a = this.selectedRGBColor) === null || _a === void 0 ? void 0 : _a.formatHex();
        const newThemeColorsButtonGroupModel = new Array(this.themeColorsButtonGroupConfig.length).fill(false);
        const newRecentlyColorsButtonGroupModel = new Array(this.recentlyColorsButtonGroupConfig.length).fill(false);
        if (colorModel) {
            const themeColorIndex = this.themeColorsButtonGroupConfig.findIndex(color => color.value === colorModel);
            if (themeColorIndex !== -1) {
                newThemeColorsButtonGroupModel[themeColorIndex] = true;
            }
            else {
                const recentColorIndex = this.recentlyColorsButtonGroupConfig.findIndex(color => color.value === colorModel);
                if (recentColorIndex !== -1) {
                    newRecentlyColorsButtonGroupModel[recentColorIndex] = true;
                }
            }
        }
        this.themeColorsButtonGroupModel = newThemeColorsButtonGroupModel;
        this.recentlyColorsButtonGroupModel = newRecentlyColorsButtonGroupModel;
    }
    _isThemeColor(color) {
        return color ? this.themeColorsButtonGroupConfig.some(themeColor => (themeColor === null || themeColor === void 0 ? void 0 : themeColor.value) === color) : false;
    }
    _isRecentlyUsedColor(color) {
        return color ? this.recentlyColorsButtonGroupConfig.some(recentlyColor => (recentlyColor === null || recentlyColor === void 0 ? void 0 : recentlyColor.value) === color) : false;
    }
    _getColorName(color) {
        var _a;
        for (let i = 0; i < this.themeColorsButtonGroupConfig.length; i++) {
            if (((_a = this.themeColorsButtonGroupConfig[i]) === null || _a === void 0 ? void 0 : _a.value) === color) {
                return this.themeColorsButtonGroupConfig[i].name;
            }
        }
        return null;
    }
    _setModel(color, source, updateInput = false) {
        this.selectedRGBColor = color;
        const selectedColor = {
            name: null,
            value: null,
            source: source
        };
        if (this.selectedRGBColor) {
            selectedColor.name = this._getColorName(this.selectedRGBColor.formatHex());
            selectedColor.value = getStringFromRGBColor(this.selectedRGBColor, this._colorType);
            this._previouslySelectedRGBColor = this.selectedRGBColor;
            this._previouslySelectedColorType = this._colorType;
        }
        this._onChangeCallback(selectedColor.value);
        this.onChange.emit(selectedColor.value);
        this.onSelectColor.emit(selectedColor);
        this._value = selectedColor.value || '';
        this._updateSwatchColorsModel();
        this._updatePreviewColor();
        if (updateInput) {
            this.userInput = this._getUserInputValue();
        }
        this._changeDetectorRef.detectChanges();
    }
    _restorePreviouslyModel() {
        var _a;
        this._setColorType(this._previouslySelectedColorType);
        if (this._previouslySelectedRGBColor) {
            this.selectedRGBColor = this._previouslySelectedRGBColor;
        }
        else {
            const fallbackColor = ((_a = this.themeColorsButtonGroupConfig[0]) === null || _a === void 0 ? void 0 : _a.value) || CP_FALLBACK_COLOR;
            this.selectedRGBColor = getRGBColorFromString(fallbackColor);
        }
        const selectedColor = {
            name: this._getColorName(this.selectedRGBColor.formatHex()),
            value: getStringFromRGBColor(this.selectedRGBColor, this._colorType),
            source: SourceTypes.Picker
        };
        this.userInput = this._getUserInputValue();
        this.activeTab = this.selectedRGBColor ? ColorPickerActiveTab.Palette : ColorPickerActiveTab.Empty;
        this._onChangeCallback(selectedColor.value);
        this.onChange.emit(selectedColor.value);
        this.onSelectColor.emit(selectedColor);
        this._value = selectedColor.value || '';
        this._updatePreviewColor();
        this._updateSwatchColorsModel();
    }
    // ToDo: move to css
    _checkTabletSizes() {
        const tabletWidth = document.documentElement.clientWidth;
        let value;
        switch (true) {
            case (tabletWidth > 1600): // 35vw
                value = tabletWidth * .35;
                break;
            case (tabletWidth > 1200): // 40vw
                value = tabletWidth * .35;
                break;
            case (tabletWidth > 992): // 45vw
                value = tabletWidth * .4;
                break;
            case (tabletWidth > 768): // 50vw
                value = tabletWidth * .45;
                break;
            default: // 50vw
                value = tabletWidth * .5;
                break;
        }
        this.pickerDimension = value - this.colorStripWidth - CP_COLOR_MARGIN * 2;
    }
    _checkPickerAnchorWidth() {
        const nextResponsiveSmViewValue = this.wrapperElement.nativeElement.offsetWidth < CP_RESPONSIVE_SM_VIEW_BREAKPOINT;
        if (this.isResponsiveSmView !== nextResponsiveSmViewValue) {
            // The current method works out of zone, so need to return it back manually
            this._ngZone.run(() => {
                this.isResponsiveSmView = nextResponsiveSmViewValue;
                // The additional change detection needed for correct work with OnPush strategy
                this._changeDetectorRef.detectChanges();
            });
        }
    }
    _isInputEmptyPlaceholderValue() {
        return this.userInput.toLowerCase() === this.emptyPlaceholder.toLowerCase();
    }
}
AdaptColorPickerComponent.ɵfac = function AdaptColorPickerComponent_Factory(t) { return new (t || AdaptColorPickerComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.ResizeService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.AdaptTranslateService), i0.ɵɵdirectiveInject(i3.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i4.AdaptRadarAngularService)); };
AdaptColorPickerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptColorPickerComponent, selectors: [["adapt-color-picker"], ["adapt-colorpicker"]], viewQuery: function AdaptColorPickerComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7, AdaptDropdownDirective);
        i0.ɵɵviewQuery(_c0, 7, ElementRef);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.popup = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.wrapperElement = _t.first);
    } }, inputs: { showThemeColors: "showThemeColors", showRecentlyUsedColors: "showRecentlyUsedColors", colorType: "colorType", label: "label", mobileView: "mobileView", placement: "placement", appendToBody: "appendToBody", disabled: "disabled", readonly: "readonly", showEmptyOption: "showEmptyOption", disabledStyleForReadonlyState: "disabledStyleForReadonlyState", recentlyUsedColors: "recentlyUsedColors" }, outputs: { onChange: "onChange", onSelectColor: "onSelectColor", open: "open", close: "close", focus: "focus", blur: "blur", recentlyUsedColorsChanged: "recentlyUsedColorsChanged" }, features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => AdaptColorPickerComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature], decls: 13, vars: 27, consts: [["adaptDropdown", "", 3, "adaptRadarDisableEventSending", "animationPlacement", "placement", "appendToBody", "autoClose", "customClass", "mobileView", "onOpen", "onClose", "popupAnimationDone"], ["adaptDropdown", ""], ["adaptDropdownAnchor", "", 1, "adapt-cp"], [4, "ngIf"], ["adaptDropdownMenuTemplate", ""], [1, "adapt-cp__color-wrapper", 3, "click"], ["class", "adapt-cp-color adapt-cp-empty", 4, "ngIf"], ["class", "adapt-cp-color", 3, "background-color", "border-color", 4, "ngIf"], [1, "adapt-cp__input-wrapper", 3, "click"], [1, "adapt-cp-input-fake", "ltr", 3, "ngClass"], ["type", "text", "aria-readonly", "true", 1, "adapt-cp-input", 3, "ngModel", "ngClass", "placeholder", "pattern", "disabled", "readOnly", "input", "keydown", "focus", "blur"], ["colorInput", ""], [1, "adapt-cp-fake-label"], ["class", "adapt-cp__type-wrapper", 3, "adapt-cp__type-wrapper_disabled", 4, "ngIf"], [1, "adapt-cp-color", "adapt-cp-empty"], [1, "adapt-cp-color"], [1, "adapt-cp__type-wrapper"], ["type", "button", "role", "button", 1, "adapt-cp-inner-type", 3, "click", "focus", "blur"], ["class", "adapt-cp-color-type", 3, "active", 4, "ngFor", "ngForOf"], [1, "adapt-cp-color-type"], [1, "adapt-cp__sm-view-wrapper"], ["type", "button", "role", "button", 1, "btn", "btn-secondary", "btn-sm", "adapt-cp", "sm-view", 3, "click"], [1, "adapt-cp__color-text"], ["class", "adapt-cp__input-btn", 3, "background-color", "border-color", 4, "ngIf"], ["class", "adapt-cp__color-wrapper", 3, "adapt-cp__color-wrapper_disabled", "adapt-cp__color-wrapper_readonly", 4, "ngIf"], [1, "adapt-cp__input-btn"], [1, "adapt-cp__color-wrapper"], [1, "adapt-cp-color__empty-svg"], [1, "dropdown-menu", "adapt-cp__dropdown-cover"], ["class", "adapt-cp-current-value", 3, "mx-5", 4, "ngIf"], ["class", "adapt-cp mx-5 my-4", 4, "ngIf"], [3, "adaptRadarDisableEventSending", "type", "tab-active", "carouselMode", "tab-active-changed", 4, "ngIf", "ngIfElse"], ["emptyColorTab", ""], ["solidColorTab", ""], ["class", "dropdown-divider my-5", 4, "ngIf"], ["class", "mx-5 mb-5", 4, "ngIf"], [1, "adapt-cp-current-value"], [1, "adapt-cp", "mx-5", "my-4"], [1, "adapt-cp__input-wrapper"], ["type", "text", "aria-readonly", "true", 1, "adapt-cp-input", 3, "ngModel", "placeholder", "pattern", "disabled", "readOnly", "input", "keydown"], ["type", "button", 1, "adapt-cp-inner-type", 3, "click"], [3, "adaptRadarDisableEventSending", "type", "tab-active", "carouselMode", "tab-active-changed"], [3, "isActive", "icon", "aria-label"], ["emptyColorTabsPanel", ""], [3, "ngTemplateOutlet", 4, "ngIf"], ["colorPaletteTabsPanel", ""], [3, "ngTemplateOutlet"], [1, "adapt-cp__empty-placeholder", 3, "adaptRadarDisableEventSending", "type", "label"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [3, "ngClass"], ["class", "adapt-cp adapt-cp__dropdown-input", 3, "is-focused", "adapt-cp_disabled", "adapt-cp_readonly", "form-control-disabled-look", "adapt-cp__focused", 4, "ngIf"], [1, "adapt-cp__dropdown-color-cover"], [3, "width", "height", "colorStripWidth", "color", "colorChange"], ["class", "dropdown-divider", 4, "ngIf"], [1, "adapt-cp-group"], ["class", "adapt-cp-group__section", 4, "ngIf"], [1, "adapt-cp", "adapt-cp__dropdown-input"], ["colorInputResponsiveSmView", ""], ["type", "button", "role", "button", 1, "adapt-cp-inner-type", 3, "click"], [1, "dropdown-divider"], [1, "adapt-cp-group__section"], [1, "adapt-cp-group__section__title"], [1, "adapt-cp-group__section__cover"], [3, "ngModel", "adaptRadarDisableEventSending", "config", "groupType", "multiselectable", "uncheckable", "useCheckboxStyle", "testID", "ngModelChange"], ["class", "preview-svg d-icon-pannel_color", 4, "ngIf"], [1, "preview-svg", "d-icon-pannel_color"], [1, "dropdown-divider", "my-5"], [1, "mx-5", "mb-5"], ["type", "button", 1, "btn", "btn-secondary", "w-100", 3, "click"]], template: function AdaptColorPickerComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0, 1);
        i0.ɵɵlistener("onOpen", function AdaptColorPickerComponent_Template_div_onOpen_0_listener() { return ctx.onPopupOpen(); })("onClose", function AdaptColorPickerComponent_Template_div_onClose_0_listener() { return ctx.onPopupClose(); })("popupAnimationDone", function AdaptColorPickerComponent_Template_div_popupAnimationDone_0_listener() { return ctx.onPopupAnimationDone(); });
        i0.ɵɵtext(2, "\n  ");
        i0.ɵɵelementStart(3, "div", 2);
        i0.ɵɵtext(4, "\n    ");
        i0.ɵɵtemplate(5, AdaptColorPickerComponent_ng_container_5_Template, 26, 29, "ng-container", 3);
        i0.ɵɵtext(6, "\n    ");
        i0.ɵɵtemplate(7, AdaptColorPickerComponent_ng_container_7_Template, 15, 17, "ng-container", 3);
        i0.ɵɵtext(8, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(9, "\n  ");
        i0.ɵɵtemplate(10, AdaptColorPickerComponent_ng_template_10_Template, 23, 8, "ng-template", 4);
        i0.ɵɵtext(11, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(12, "\n");
    } if (rf & 2) {
        const _r0 = i0.ɵɵreference(1);
        i0.ɵɵproperty("adaptRadarDisableEventSending", true)("animationPlacement", "center")("placement", ctx.placement)("appendToBody", ctx.appendToBody)("autoClose", "outside")("customClass", "a-color-picker")("mobileView", i0.ɵɵpureFunction5(21, _c5, ctx.label, ctx.mobileCancelBtnHandler, ctx.mobileDoneBtnHandler, ctx.mobileView.doneBtnTitle, ctx.mobileView.cancelBtnTitle));
        i0.ɵɵadvance(3);
        i0.ɵɵclassProp("is-focused", ctx.isInputElementFocus)("adapt-cp__no-border", ctx.isResponsiveSmView)("adapt-cp_disabled", ctx.disabled)("adapt-cp_readonly", ctx.readonly && !ctx.disabledStyleForReadonlyState)("form-control-disabled-look", ctx.readonly && ctx.disabledStyleForReadonlyState)("adapt-cp__focused", _r0.isOpen() || ctx.isInputElementFocus);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx.isResponsiveSmView);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.isResponsiveSmView);
    } }, directives: [i5.AdaptDropdownDirective, i5.AdaptDropdownAnchorDirective, i6.NgIf, i5.AdaptDropdownMenuTemplateDirective, i6.NgClass, i7.AdaptDragonInputHandlerDirective, i8.DefaultValueAccessor, i8.NgControlStatus, i8.NgModel, i8.PatternValidator, i6.NgForOf, i9.AdaptTabsComponent, i10.AdaptTabsPanelComponent, i6.NgTemplateOutlet, i11.AdaptEmptyStateComponent, i12.ColorComponent, i13.AdaptButtonGroupComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptColorPickerComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-color-picker, adapt-colorpicker',
                templateUrl: './color-picker.html',
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => AdaptColorPickerComponent),
                        multi: true
                    }
                ],
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i1.ResizeService }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.AdaptTranslateService }, { type: i3.AdaptDeviceDetectionService }, { type: i4.AdaptRadarAngularService }]; }, { showThemeColors: [{
            type: Input
        }], showRecentlyUsedColors: [{
            type: Input
        }], colorType: [{
            type: Input
        }], label: [{
            type: Input
        }], mobileView: [{
            type: Input
        }], placement: [{
            type: Input
        }], appendToBody: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], showEmptyOption: [{
            type: Input
        }], disabledStyleForReadonlyState: [{
            type: Input
        }], recentlyUsedColors: [{
            type: Input
        }], onChange: [{
            type: Output
        }], onSelectColor: [{
            type: Output
        }], open: [{
            type: Output
        }], close: [{
            type: Output
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], recentlyUsedColorsChanged: [{
            type: Output
        }], popup: [{
            type: ViewChild,
            args: ['adaptDropdown', { static: true, read: AdaptDropdownDirective }]
        }], wrapperElement: [{
            type: ViewChild,
            args: ['adaptDropdown', { static: true, read: ElementRef }]
        }] }); })();
//# sourceMappingURL=color-picker.component.js.map