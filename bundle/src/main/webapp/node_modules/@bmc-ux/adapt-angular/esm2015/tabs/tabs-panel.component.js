import { Component, Input, TemplateRef, ViewEncapsulation } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
function AdaptTabsPanelComponent_ng_content_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵprojection(0, 0, ["*ngIf", "renderContentWhenInactive || isActive"]);
} }
const _c0 = ["*"];
export class AdaptTabsPanelComponent {
    constructor() {
        this.kebabMenuPresent = false;
        this.isActive = false;
        // eslint-disable-next-line @angular-eslint/no-input-rename
        this.badgeType = 'secondary';
        this.animateBadge = false;
        this.showBadgeAlert = false;
        this.badgeAlertVariant = 'info';
        this.badgeCustomClass = '';
        this.isHidden = false;
        // eslint-disable-next-line @angular-eslint/no-input-rename
        this.iconClose = false;
        /**
         * When `false` the content will not be rendered in the html, but to avoid rendering at the
         * angular side need to make this:
         * <adapt-tab-panel #tab [renderContentWhenInactive]="false">
         *   <ng-template [ngIf]="tab.isActive">...</ng-template>
         * </adapt-tab-panel>
         */
        this.renderContentWhenInactive = true;
    }
    get badge() {
        return this._badge;
    }
    set badge(value) {
        if (value !== this._badge) {
            this._badge = value;
        }
    }
    ngOnInit() {
        this.kebabMenuPresent = !!this.kebabMenu;
    }
}
AdaptTabsPanelComponent.ɵfac = function AdaptTabsPanelComponent_Factory(t) { return new (t || AdaptTabsPanelComponent)(); };
AdaptTabsPanelComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptTabsPanelComponent, selectors: [["adapt-tab-panel"], ["div", "tab-panel", ""]], hostVars: 5, hostBindings: function AdaptTabsPanelComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("role", "tabpanel");
        i0.ɵɵclassProp("tab-pane", true)("active", ctx.isActive);
    } }, inputs: { isActive: "isActive", badgeType: ["badge-type", "badgeType"], animateBadge: "animateBadge", showBadgeAlert: "showBadgeAlert", badgeAlertVariant: "badgeAlertVariant", badgeCustomClass: "badgeCustomClass", title: ["adapt-tab-title", "title"], disabled: "disabled", isHidden: "isHidden", icon: "icon", subtext: "subtext", iconRight: ["icon-right", "iconRight"], iconClose: ["icon-close", "iconClose"], ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], kebabMenu: "kebabMenu", id: "id", renderContentWhenInactive: "renderContentWhenInactive", badge: "badge" }, ngContentSelectors: _c0, decls: 1, vars: 1, consts: [[4, "ngIf"]], template: function AdaptTabsPanelComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, AdaptTabsPanelComponent_ng_content_0_Template, 1, 0, "ng-content", 0);
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.renderContentWhenInactive || ctx.isActive);
    } }, directives: [i1.NgIf], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptTabsPanelComponent, [{
        type: Component,
        args: [{
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[class.tab-pane]': 'true',
                    '[class.active]': 'isActive',
                    '[attr.role]': '"tabpanel"'
                },
                selector: 'adapt-tab-panel, div[tab-panel]',
                template: '<ng-content *ngIf="renderContentWhenInactive || isActive"></ng-content>',
                encapsulation: ViewEncapsulation.None
            }]
    }], null, { isActive: [{
            type: Input
        }], badgeType: [{
            type: Input,
            args: ['badge-type']
        }], animateBadge: [{
            type: Input
        }], showBadgeAlert: [{
            type: Input
        }], badgeAlertVariant: [{
            type: Input
        }], badgeCustomClass: [{
            type: Input
        }], title: [{
            type: Input,
            args: ['adapt-tab-title']
        }], disabled: [{
            type: Input
        }], isHidden: [{
            type: Input
        }], icon: [{
            type: Input
        }], subtext: [{
            type: Input
        }], iconRight: [{
            type: Input,
            args: ['icon-right']
        }], iconClose: [{
            type: Input,
            args: ['icon-close']
        }], ariaLabel: [{
            type: Input,
            args: ['aria-label']
        }], ariaLabelledby: [{
            type: Input,
            args: ['aria-labelledby']
        }], kebabMenu: [{
            type: Input
        }], id: [{
            type: Input
        }], renderContentWhenInactive: [{
            type: Input
        }], badge: [{
            type: Input,
            args: ['badge']
        }] }); })();
//# sourceMappingURL=tabs-panel.component.js.map