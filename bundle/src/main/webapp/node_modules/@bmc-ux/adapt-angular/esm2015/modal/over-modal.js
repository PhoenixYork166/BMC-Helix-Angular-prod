import { Component, EventEmitter, Input, NgModule, Output, TemplateRef, ViewChild, ViewContainerRef } from '@angular/core';
import { query, transition, trigger, useAnimation } from '@angular/animations';
import { ANIMATION_NAME } from '../common/animation';
import { AdaptFocusHolderModule } from '../focus-holder/index';
import { AdaptTranslateService } from '../common/i18n/index';
import * as i0 from "@angular/core";
import * as i1 from "../common/i18n/index";
import * as i2 from "../focus-holder/focus-holder.directive";
const _c0 = ["contentPlacement"];
function AdaptOverModalComponent_ng_template_13_Template(rf, ctx) { }
export class AdaptOverModalComponent {
    constructor(ts) {
        this.ts = ts;
        this.className = '';
        // TODO: Refactor this if possible
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any, @angular-eslint/no-output-on-prefix */
        this.onClose = new EventEmitter();
        this.closeText = ts.getCurrentLanguage()['adapt.common.close'];
    }
    ngOnInit() {
        if (this.config.content instanceof TemplateRef) {
            this.contentPlacement.createEmbeddedView(this.config.content, { close: this.close.bind(this) });
        }
        else if (typeof this.config.content === 'string') {
            const contentContainerNode = this.contentPlacement.element.nativeElement;
            const newNode = document.createElement('div');
            newNode.classList.add('modal-body');
            newNode.innerText = this.config.content;
            contentContainerNode.parentElement.insertBefore(newNode, contentContainerNode);
        }
    }
    close() {
        this.onClose.emit();
    }
}
AdaptOverModalComponent.ɵfac = function AdaptOverModalComponent_Factory(t) { return new (t || AdaptOverModalComponent)(i0.ɵɵdirectiveInject(i1.AdaptTranslateService)); };
AdaptOverModalComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptOverModalComponent, selectors: [["adapt-over-modal"]], viewQuery: function AdaptOverModalComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7, ViewContainerRef);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.contentPlacement = _t.first);
    } }, hostVars: 7, hostBindings: function AdaptOverModalComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵsyntheticHostProperty("@overModalAnimation", true);
        i0.ɵɵclassMap("over-modal " + ctx.className);
        i0.ɵɵstyleProp("z-index", 1055);
        i0.ɵɵclassProp("over-modal", true);
    } }, inputs: { config: "config", className: "className" }, outputs: { onClose: "onClose" }, decls: 18, vars: 7, consts: [[1, "modal-dialog", 3, "adaptFocusHolder"], [1, "modal-content"], [1, "modal-header"], ["type", "button", "data-dismiss", "modal", 1, "close", 3, "click"], ["contentPlacement", ""]], template: function AdaptOverModalComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtext(0, "\n    ");
        i0.ɵɵelementStart(1, "div", 0);
        i0.ɵɵtext(2, "\n      ");
        i0.ɵɵelementStart(3, "div", 1);
        i0.ɵɵtext(4, "\n        ");
        i0.ɵɵelementStart(5, "div", 2);
        i0.ɵɵtext(6, "\n          ");
        i0.ɵɵelementStart(7, "h5");
        i0.ɵɵtext(8);
        i0.ɵɵelementEnd();
        i0.ɵɵtext(9, "\n          ");
        i0.ɵɵelementStart(10, "button", 3);
        i0.ɵɵlistener("click", function AdaptOverModalComponent_Template_button_click_10_listener() { return ctx.close(); });
        i0.ɵɵelementEnd();
        i0.ɵɵtext(11, "\n        ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(12, "\n        ");
        i0.ɵɵtemplate(13, AdaptOverModalComponent_ng_template_13_Template, 0, 0, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(15, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(16, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(17, "\n  ");
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("adaptFocusHolder", true);
        i0.ɵɵadvance(2);
        i0.ɵɵclassProp("footer-align_left", ctx.config.footerAlignLeft);
        i0.ɵɵadvance(4);
        i0.ɵɵclassMap("modal-title" + (ctx.config.type ? " text-" + ctx.config.type : " text-default"));
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate1("", ctx.config.title, "\u00A0");
        i0.ɵɵadvance(2);
        i0.ɵɵattribute("aria-label", ctx.closeText);
    } }, directives: [i2.AdaptFocusHolderDirective], encapsulation: 2, data: { animation: [
            trigger('overModalAnimation', [
                transition('void => *', [
                    query('.modal-content', [
                        useAnimation(ANIMATION_NAME.popIn)
                    ])
                ]),
                transition('* => void', [
                    query('.modal-content', [
                        useAnimation(ANIMATION_NAME.popOut)
                    ])
                ])
            ]),
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptOverModalComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-over-modal',
                template: `
    <div class="modal-dialog" [adaptFocusHolder]="true">
      <div class="modal-content" [class.footer-align_left]="config.footerAlignLeft">
        <div class="modal-header">
          <h5 [class]="'modal-title' + (config.type ? ' text-' + config.type : ' text-default')">{{config.title}}&nbsp;</h5>
          <button type="button"
                  class="close"
                  data-dismiss="modal"
                  [attr.aria-label]="closeText"
                  (click)="close()"></button>
        </div>
        <ng-template #contentPlacement></ng-template>
      </div>
    </div>
  `,
                animations: [
                    trigger('overModalAnimation', [
                        transition('void => *', [
                            query('.modal-content', [
                                useAnimation(ANIMATION_NAME.popIn)
                            ])
                        ]),
                        transition('* => void', [
                            query('.modal-content', [
                                useAnimation(ANIMATION_NAME.popOut)
                            ])
                        ])
                    ]),
                ],
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[class.over-modal]': 'true',
                    '[class]': '"over-modal " + className',
                    '[@overModalAnimation]': 'true',
                    '[style.zIndex]': '1055'
                }
            }]
    }], function () { return [{ type: i1.AdaptTranslateService }]; }, { config: [{
            type: Input
        }], className: [{
            type: Input
        }], onClose: [{
            type: Output
        }], contentPlacement: [{
            type: ViewChild,
            args: ['contentPlacement', { read: ViewContainerRef, static: true }]
        }] }); })();
export class AdaptOverModalModule {
}
AdaptOverModalModule.ɵfac = function AdaptOverModalModule_Factory(t) { return new (t || AdaptOverModalModule)(); };
AdaptOverModalModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: AdaptOverModalModule });
AdaptOverModalModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[AdaptFocusHolderModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptOverModalModule, [{
        type: NgModule,
        args: [{
                imports: [AdaptFocusHolderModule],
                declarations: [AdaptOverModalComponent],
                exports: [AdaptOverModalComponent]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(AdaptOverModalModule, { declarations: [AdaptOverModalComponent], imports: [AdaptFocusHolderModule], exports: [AdaptOverModalComponent] }); })();
//# sourceMappingURL=over-modal.js.map