import { animate, keyframes, query, style, transition, trigger, useAnimation } from '@angular/animations';
import { Directionality } from '@angular/cdk/bidi';
import { moveItemInArray } from '@angular/cdk/drag-drop';
import { DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from '@angular/cdk/keycodes';
import { ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, HostBinding, Input, NgZone, Output, QueryList, Renderer2, ViewChild, ViewChildren, ViewEncapsulation } from '@angular/core';
import { debounceTime, delay, take, takeUntil, throttleTime } from 'rxjs/operators';
import { ANIMATION_DURATION, ANIMATION_NAME, ANIMATION_TIMING_FUNCTION } from '../common/animation';
import { AdaptDeviceDetectionService } from '../common/device-detection.service';
import { AdaptTranslateService } from '../common/i18n/index';
import { getEventKeyCode } from '../common/key-codes';
import { ResizeService } from '../common/resize/resize.service';
import { SafeCdr } from '../common/safe-cdr';
import { isDefined, isNumber, isUndefined } from '../common/utilities';
import { AdaptDropdownDirective } from '../dropdown/index';
import { AdaptTabsControlsDirective, TabsControlsTypeDirection } from '../tabs-controls/index';
import { AdaptTabsPanelComponent } from './tabs-panel.component';
import { AdaptTabsConfig } from './tabs.config';
import { asapScheduler, asyncScheduler, fromEvent, ReplaySubject, Subject, timer } from 'rxjs';
import { AdaptRadarAngularComponentEventType, AdaptRadarAngularCustomEventName, AdaptRadarAngularCustomEventType, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "./tabs.config";
import * as i2 from "../common/resize/resize.service";
import * as i3 from "@angular/cdk/bidi";
import * as i4 from "../common/device-detection.service";
import * as i5 from "../common/i18n/index";
import * as i6 from "../common/radar/adapt-radar";
import * as i7 from "@angular/common";
import * as i8 from "@angular/cdk/drag-drop";
import * as i9 from "../badge/badge.component";
import * as i10 from "../dropdown/dropdown.component";
import * as i11 from "../tabs-controls/tabs-controls.directive";
const _c0 = ["hiddenTabKebabMenu"];
const _c1 = ["hiddenTabsDD"];
const _c2 = ["hiddenTabsDDToggle"];
const _c3 = ["hiddenTabsDDMenu"];
const _c4 = ["navList"];
const _c5 = ["shadowDropdownItem"];
const _c6 = ["shadowAddButton"];
const _c7 = ["shadowSubAddButton"];
const _c8 = ["navLink"];
const _c9 = ["hiddenTabsDDNavLink"];
function AdaptTabsComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 16);
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngStyle", ctx_r0.fadeElStyle)("@toolbarShadowAnimation", undefined);
} }
function AdaptTabsComponent_div_4_div_2_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r16 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "div", 28);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵelementStart(5, "div", 29);
    i0.ɵɵtext(6, "\n          ");
    i0.ɵɵelementStart(7, "button", 30);
    i0.ɵɵlistener("click", function AdaptTabsComponent_div_4_div_2_ng_container_2_Template_button_click_7_listener() { i0.ɵɵrestoreView(_r16); const ctx_r15 = i0.ɵɵnextContext(3); return ctx_r15.scrollBack(); });
    i0.ɵɵelement(8, "span");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r13 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngStyle", ctx_r13.fadeElStyle)("@toolbarShadowAnimation", undefined);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("@toolbarBtnBackAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("has-hidden-active", ctx_r13.activeHiddenForward);
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("d-icon-angle_right", ctx_r13.rtl)("d-icon-angle_left", !ctx_r13.rtl);
} }
function AdaptTabsComponent_div_4_div_2_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    const _r18 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelement(2, "div", 31);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementStart(4, "div", 32);
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵelementStart(6, "button", 33);
    i0.ɵɵlistener("click", function AdaptTabsComponent_div_4_div_2_ng_container_4_Template_button_click_6_listener() { i0.ɵɵrestoreView(_r18); const ctx_r17 = i0.ɵɵnextContext(3); return ctx_r17.scrollForward(); });
    i0.ɵɵelement(7, "span");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("m4", ctx_r14.allowTabsAdding);
    i0.ɵɵproperty("@toolbarShadowAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("m4", ctx_r14.allowTabsAdding);
    i0.ɵɵproperty("@toolbarBtnForwardAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("has-hidden-active", ctx_r14.activeHiddenBack);
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("d-icon-angle_left", ctx_r14.rtl)("d-icon-angle_right", !ctx_r14.rtl);
} }
function AdaptTabsComponent_div_4_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 26);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptTabsComponent_div_4_div_2_ng_container_2_Template, 11, 9, "ng-container", 27);
    i0.ɵɵtext(3, "\n\n      ");
    i0.ɵɵtemplate(4, AdaptTabsComponent_div_4_div_2_ng_container_4_Template, 10, 12, "ng-container", 27);
    i0.ɵɵtext(5, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("tab-paddles_pills", ctx_r6.type === ctx_r6.TYPES_TABS.PILLS);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r6.showBackBtn);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r6.showForwardBtn);
} }
function AdaptTabsComponent_div_4_ng_container_7_li_2_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
const _c10 = function () { return { touch: 200, mouse: 0 }; };
function AdaptTabsComponent_div_4_ng_container_7_li_2_Template(rf, ctx) { if (rf & 1) {
    const _r28 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 37);
    i0.ɵɵlistener("cdkDragStarted", function AdaptTabsComponent_div_4_ng_container_7_li_2_Template_li_cdkDragStarted_0_listener($event) { i0.ɵɵrestoreView(_r28); const ctx_r27 = i0.ɵɵnextContext(); const tab_r19 = ctx_r27.$implicit; const index_r20 = ctx_r27.index; const ctx_r26 = i0.ɵɵnextContext(2); return ctx_r26.onTabDragStarted($event, tab_r19, index_r20); })("cdkDragDropped", function AdaptTabsComponent_div_4_ng_container_7_li_2_Template_li_cdkDragDropped_0_listener($event) { i0.ɵɵrestoreView(_r28); const tab_r19 = i0.ɵɵnextContext().$implicit; const ctx_r29 = i0.ɵɵnextContext(2); return ctx_r29.onTabDropped($event, tab_r19); })("contextmenu", function AdaptTabsComponent_div_4_ng_container_7_li_2_Template_li_contextmenu_0_listener($event) { i0.ɵɵrestoreView(_r28); const ctx_r31 = i0.ɵɵnextContext(3); return ctx_r31.onContextMenu($event); });
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵtemplate(2, AdaptTabsComponent_div_4_ng_container_7_li_2_ng_container_2_Template, 1, 0, "ng-container", 38);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r23 = i0.ɵɵreference(7);
    i0.ɵɵproperty("cdkDragStartDelay", i0.ɵɵpureFunction0(2, _c10));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", _r23);
} }
function AdaptTabsComponent_div_4_ng_container_7_li_4_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function AdaptTabsComponent_div_4_ng_container_7_li_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "li", 39);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵtemplate(2, AdaptTabsComponent_div_4_ng_container_7_li_4_ng_container_2_Template, 1, 0, "ng-container", 38);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r23 = i0.ɵɵreference(7);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", _r23);
} }
function AdaptTabsComponent_div_4_ng_container_7_ng_template_6_span_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span");
} if (rf & 2) {
    const tab_r19 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵclassMapInterpolate1("nav-link-icon ", tab_r19.icon, "");
} }
function AdaptTabsComponent_div_4_ng_container_7_ng_template_6_span_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 48);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵelementStart(2, "adapt-badge", 49);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const tab_r19 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("animate", tab_r19.animateBadge)("adaptRadarDisableEventSending", true)("showAlert", tab_r19.showBadgeAlert)("variant", tab_r19.badgeType)("alertVariant", tab_r19.badgeAlertVariant)("customCls", tab_r19.badgeCustomClass);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", tab_r19.badge, "\n              ");
} }
function AdaptTabsComponent_div_4_ng_container_7_ng_template_6_span_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span");
} if (rf & 2) {
    const tab_r19 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵclassMapInterpolate1("nav-link-icon-right ", tab_r19.iconRight, "");
} }
function AdaptTabsComponent_div_4_ng_container_7_ng_template_6_ng_container_15_Template(rf, ctx) { if (rf & 1) {
    const _r45 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵelementStart(2, "div", 50);
    i0.ɵɵtext(3, "\n                ");
    i0.ɵɵelementStart(4, "button", 51);
    i0.ɵɵlistener("click", function AdaptTabsComponent_div_4_ng_container_7_ng_template_6_ng_container_15_Template_button_click_4_listener($event) { i0.ɵɵrestoreView(_r45); const tab_r19 = i0.ɵɵnextContext(2).$implicit; const ctx_r43 = i0.ɵɵnextContext(2); return ctx_r43.onKebabMenuClick($event, tab_r19); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n                ");
    i0.ɵɵelementStart(6, "div", 52);
    i0.ɵɵtext(7, "\n                  ");
    i0.ɵɵelementContainer(8, 53);
    i0.ɵɵtext(9, "\n                ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n            ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r46 = i0.ɵɵnextContext(2);
    const index_r20 = ctx_r46.index;
    const tab_r19 = ctx_r46.$implicit;
    const ctx_r37 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("appendToBody", true)("restoreFocusAfterClose", true)("holdFocusInMenu", true);
    i0.ɵɵadvance(2);
    i0.ɵɵattribute("id", ctx_r37.id + "_kebab")("data-testid", ctx_r37.testID + "_tab_kebab" + index_r20);
    i0.ɵɵadvance(2);
    i0.ɵɵattribute("aria-labelledby", ctx_r37.id + "_kebab");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", tab_r19.kebabMenu);
} }
function AdaptTabsComponent_div_4_ng_container_7_ng_template_6_button_17_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "button", 54);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵelement(2, "span", 55);
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const tab_r19 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r38 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("is-closing--mobile", ctx_r38.isMobile);
    i0.ɵɵproperty("tabIndex", tab_r19.isActive && !tab_r19.isHidden ? 0 : -1);
} }
const _c11 = function (a0, a1) { return { "text-secondary": a0, "text-tertiary": a1 }; };
function AdaptTabsComponent_div_4_ng_container_7_ng_template_6_span_20_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 56);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const tab_r19 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(2, _c11, tab_r19.isActive, !tab_r19.isActive));
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(tab_r19.subtext);
} }
const _c12 = function (a0, a1, a2, a3, a4) { return { "active": a0, "disabled": a1, "nav-link-close": a2, "nav-link-tight": a3, "is-m-close": a4 }; };
function AdaptTabsComponent_div_4_ng_container_7_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    const _r51 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n          ");
    i0.ɵɵelementStart(1, "button", 40, 41);
    i0.ɵɵlistener("click", function AdaptTabsComponent_div_4_ng_container_7_ng_template_6_Template_button_click_1_listener($event) { i0.ɵɵrestoreView(_r51); const ctx_r50 = i0.ɵɵnextContext(); const tab_r19 = ctx_r50.$implicit; const index_r20 = ctx_r50.index; const ctx_r49 = i0.ɵɵnextContext(2); return ctx_r49.tabClick($event, tab_r19, index_r20); })("keydown", function AdaptTabsComponent_div_4_ng_container_7_ng_template_6_Template_button_keydown_1_listener($event) { i0.ɵɵrestoreView(_r51); const ctx_r53 = i0.ɵɵnextContext(); const tab_r19 = ctx_r53.$implicit; const index_r20 = ctx_r53.index; const ctx_r52 = i0.ɵɵnextContext(2); return ctx_r52.tabKeydown($event, tab_r19, index_r20); })("focusout", function AdaptTabsComponent_div_4_ng_container_7_ng_template_6_Template_button_focusout_1_listener($event) { i0.ɵɵrestoreView(_r51); const ctx_r54 = i0.ɵɵnextContext(3); return ctx_r54.listItemFocusOut($event); });
    i0.ɵɵtext(3, "\n\n          ");
    i0.ɵɵelementStart(4, "span", 42);
    i0.ɵɵtext(5, "\n            ");
    i0.ɵɵtemplate(6, AdaptTabsComponent_div_4_ng_container_7_ng_template_6_span_6_Template, 1, 3, "span", 43);
    i0.ɵɵtext(7, "\n            ");
    i0.ɵɵelementStart(8, "span", 44);
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n\n            ");
    i0.ɵɵtemplate(11, AdaptTabsComponent_div_4_ng_container_7_ng_template_6_span_11_Template, 5, 7, "span", 45);
    i0.ɵɵtext(12, "\n\n            ");
    i0.ɵɵtemplate(13, AdaptTabsComponent_div_4_ng_container_7_ng_template_6_span_13_Template, 1, 3, "span", 43);
    i0.ɵɵtext(14, "\n\n            ");
    i0.ɵɵtemplate(15, AdaptTabsComponent_div_4_ng_container_7_ng_template_6_ng_container_15_Template, 12, 8, "ng-container", 27);
    i0.ɵɵtext(16, "\n\n             ");
    i0.ɵɵtemplate(17, AdaptTabsComponent_div_4_ng_container_7_ng_template_6_button_17_Template, 4, 3, "button", 46);
    i0.ɵɵtext(18, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(19, "\n\n            ");
    i0.ɵɵtemplate(20, AdaptTabsComponent_div_4_ng_container_7_ng_template_6_span_20_Template, 2, 5, "span", 47);
    i0.ɵɵtext(21, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(22, "\n        ");
} if (rf & 2) {
    const ctx_r55 = i0.ɵɵnextContext();
    const tab_r19 = ctx_r55.$implicit;
    const index_r20 = ctx_r55.index;
    const ctx_r24 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction5(17, _c12, tab_r19.isActive, tab_r19.disabled, tab_r19.iconClose, ctx_r24.smallerPadding, ctx_r24.isMobile))("tabIndex", !tab_r19.isHidden && ctx_r24.focusIndex === index_r20 ? 0 : -1);
    i0.ɵɵattribute("aria-posinset", index_r20 + 1)("aria-setsize", ctx_r24.tabs.toArray().length)("aria-label", tab_r19.ariaLabel || null)("aria-labelledby", tab_r19.ariaLabelledby || null)("aria-selected", tab_r19.isActive)("data-testid", ctx_r24.testID + "_tab_" + index_r20);
    i0.ɵɵadvance(3);
    i0.ɵɵclassProp("align-self-start", tab_r19.subtext);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", tab_r19.icon && tab_r19.icon !== "");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(tab_r19.title);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r24.isBadgeEnabled(tab_r19));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", tab_r19.iconRight && tab_r19.iconRight !== "");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", tab_r19.kebabMenuPresent && tab_r19.isActive);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", tab_r19.iconClose);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", tab_r19.subtext);
} }
function AdaptTabsComponent_div_4_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptTabsComponent_div_4_ng_container_7_li_2_Template, 4, 3, "li", 34);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵtemplate(4, AdaptTabsComponent_div_4_ng_container_7_li_4_Template, 4, 1, "li", 35);
    i0.ɵɵtext(5, "\n\n        ");
    i0.ɵɵtemplate(6, AdaptTabsComponent_div_4_ng_container_7_ng_template_6_Template, 23, 23, "ng-template", null, 36, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(8, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const tab_r19 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !tab_r19.isHidden);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", tab_r19.isHidden);
} }
function AdaptTabsComponent_div_4_li_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "li", 57);
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("direction", ctx_r9.tabsControlDirection)("adaptRadarDisableEventSending", true);
} }
function AdaptTabsComponent_div_4_li_11_ng_container_13_span_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span");
} if (rf & 2) {
    const tab_r60 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵclassMapInterpolate1("nav-link-icon ", tab_r60.icon, "");
} }
function AdaptTabsComponent_div_4_li_11_ng_container_13_span_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 48);
    i0.ɵɵtext(1, "\n                  ");
    i0.ɵɵelementStart(2, "adapt-badge", 49);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n                ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const tab_r60 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("animate", tab_r60.animateBadge)("adaptRadarDisableEventSending", true)("showAlert", tab_r60.showBadgeAlert)("variant", tab_r60.badgeType)("alertVariant", tab_r60.badgeAlertVariant)("customCls", tab_r60.badgeCustomClass);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(tab_r60.badge);
} }
function AdaptTabsComponent_div_4_li_11_ng_container_13_span_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span");
} if (rf & 2) {
    const tab_r60 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵclassMapInterpolate1("nav-link-icon-right ", tab_r60.iconRight, "");
} }
function AdaptTabsComponent_div_4_li_11_ng_container_13_ng_container_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n                  ");
    i0.ɵɵelementStart(2, "div", 50, 69);
    i0.ɵɵtext(4, "\n                    ");
    i0.ɵɵelement(5, "button", 70);
    i0.ɵɵtext(6, "\n                    ");
    i0.ɵɵelementStart(7, "div", 52);
    i0.ɵɵtext(8, "\n                      ");
    i0.ɵɵelementContainer(9, 53);
    i0.ɵɵtext(10, "\n                    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n                ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r73 = i0.ɵɵnextContext();
    const index_r61 = ctx_r73.index;
    const tab_r60 = ctx_r73.$implicit;
    const ctx_r66 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("appendToBody", true)("restoreFocusAfterClose", true)("holdFocusInMenu", true);
    i0.ɵɵadvance(3);
    i0.ɵɵattribute("id", ctx_r66.id + "_dd_kebab")("data-testid", ctx_r66.testID + "_tab_dd_kebab" + index_r61);
    i0.ɵɵadvance(2);
    i0.ɵɵattribute("aria-labelledby", ctx_r66.id + "_dd_kebab");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", tab_r60.kebabMenu);
} }
function AdaptTabsComponent_div_4_li_11_ng_container_13_button_17_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "button", 71);
    i0.ɵɵtext(1, "\n                  ");
    i0.ɵɵelement(2, "span", 55);
    i0.ɵɵtext(3, "\n                ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const tab_r60 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("tabIndex", tab_r60.isActive && tab_r60.isHidden ? 0 : -1);
} }
function AdaptTabsComponent_div_4_li_11_ng_container_13_span_20_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 56);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const tab_r60 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(2, _c11, tab_r60.isActive, !tab_r60.isActive));
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(tab_r60.subtext);
} }
const _c13 = function (a0, a1, a2, a3, a4) { return { "active": a0, "disabled": a1, "dropdown-item-close": a2, "is-m-close": a3, "nav-item--hidden": a4 }; };
function AdaptTabsComponent_div_4_li_11_ng_container_13_Template(rf, ctx) { if (rf & 1) {
    const _r77 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementStart(2, "button", 64, 65);
    i0.ɵɵlistener("click", function AdaptTabsComponent_div_4_li_11_ng_container_13_Template_button_click_2_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r77); const tab_r60 = restoredCtx.$implicit; const index_r61 = restoredCtx.index; const ctx_r76 = i0.ɵɵnextContext(3); return ctx_r76.tabClick($event, tab_r60, index_r61); })("keydown", function AdaptTabsComponent_div_4_li_11_ng_container_13_Template_button_keydown_2_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r77); const tab_r60 = restoredCtx.$implicit; const index_r61 = restoredCtx.index; const ctx_r78 = i0.ɵɵnextContext(3); return ctx_r78.tabKeydown($event, tab_r60, index_r61); })("focusout", function AdaptTabsComponent_div_4_li_11_ng_container_13_Template_button_focusout_2_listener($event) { i0.ɵɵrestoreView(_r77); const ctx_r79 = i0.ɵɵnextContext(3); return ctx_r79.listItemFocusOut($event); });
    i0.ɵɵtext(4, "\n              ");
    i0.ɵɵelementStart(5, "div", 66);
    i0.ɵɵtext(6, "\n                ");
    i0.ɵɵtemplate(7, AdaptTabsComponent_div_4_li_11_ng_container_13_span_7_Template, 1, 3, "span", 43);
    i0.ɵɵtext(8);
    i0.ɵɵtemplate(9, AdaptTabsComponent_div_4_li_11_ng_container_13_span_9_Template, 5, 7, "span", 45);
    i0.ɵɵtext(10, "\n\n                ");
    i0.ɵɵtemplate(11, AdaptTabsComponent_div_4_li_11_ng_container_13_span_11_Template, 1, 3, "span", 43);
    i0.ɵɵtext(12, "\n\n                ");
    i0.ɵɵtemplate(13, AdaptTabsComponent_div_4_li_11_ng_container_13_ng_container_13_Template, 13, 8, "ng-container", 27);
    i0.ɵɵtext(14, "\n                ");
    i0.ɵɵelement(15, "span", 67);
    i0.ɵɵtext(16, "\n                ");
    i0.ɵɵtemplate(17, AdaptTabsComponent_div_4_li_11_ng_container_13_button_17_Template, 4, 1, "button", 68);
    i0.ɵɵtext(18, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(19, "\n\n              ");
    i0.ɵɵtemplate(20, AdaptTabsComponent_div_4_li_11_ng_container_13_span_20_Template, 2, 5, "span", 47);
    i0.ɵɵtext(21, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(22, "\n          ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const tab_r60 = ctx.$implicit;
    const index_r61 = ctx.index;
    i0.ɵɵnextContext();
    const _r56 = i0.ɵɵreference(1);
    const ctx_r59 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("tabIndex", tab_r60.isHidden && _r56.isOpen() && ctx_r59.focusIndex === index_r61 ? 0 : -1)("hidden", !tab_r60.isHidden)("disabled", tab_r60.disabled)("ngClass", i0.ɵɵpureFunction5(11, _c13, tab_r60.isActive, tab_r60.disabled, tab_r60.iconClose, ctx_r59.isMobile, !tab_r60.isHidden));
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", tab_r60.icon && tab_r60.icon !== "");
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", tab_r60.title, "\n\n                ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r59.isBadgeEnabled(tab_r60));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", tab_r60.iconRight && tab_r60.iconRight !== "");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", tab_r60.kebabMenuPresent && tab_r60.isActive);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", tab_r60.iconClose);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", tab_r60.subtext);
} }
const _c14 = function (a1) { return { "pointer-events": "auto", "cursor": a1 }; };
function AdaptTabsComponent_div_4_li_11_Template(rf, ctx) { if (rf & 1) {
    const _r81 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 58, 59);
    i0.ɵɵtext(2, "\n        ");
    i0.ɵɵelementStart(3, "button", 60, 61);
    i0.ɵɵlistener("keydown", function AdaptTabsComponent_div_4_li_11_Template_button_keydown_3_listener($event) { i0.ɵɵrestoreView(_r81); const ctx_r80 = i0.ɵɵnextContext(2); return ctx_r80.hiddenTabsDropdownToggleKeydown($event); });
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵelementStart(6, "span", 7);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n\n        ");
    i0.ɵɵelementStart(10, "div", 62, 63);
    i0.ɵɵtext(12, "\n          ");
    i0.ɵɵtemplate(13, AdaptTabsComponent_div_4_li_11_ng_container_13_Template, 23, 17, "ng-container", 21);
    i0.ɵɵtext(14, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("is-collapsed", ctx_r10.isCollapsed);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("placement", "bottom-right")("holdFocusInMenu", false)("autoFocusFirst", true)("autoClose", ctx_r10.hiddenTabsDDAutoClose);
    i0.ɵɵattribute("id", ctx_r10.id);
    i0.ɵɵadvance(3);
    i0.ɵɵclassProp("active", ctx_r10.ddState);
    i0.ɵɵproperty("showCaret", false)("tabindex", ctx_r10.dropdownToggleBtnTabIndex)("ngStyle", i0.ɵɵpureFunction1(18, _c14, ctx_r10.ddState ? "default" : ""));
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate2("", ctx_r10.ddCount, " ", ctx_r10.ddTitleText, "");
    i0.ɵɵadvance(3);
    i0.ɵɵattribute("aria-labelledby", ctx_r10.id);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngForOf", ctx_r10.tabs.toArray())("ngForTrackBy", ctx_r10.trackByForTabs);
} }
function AdaptTabsComponent_div_4_li_13_span_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelement(2, "span", 14);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r82 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("\n            ", ctx_r82.texts.addTab, "\n          ");
} }
const _c15 = function () { return { "pointer-events": "auto" }; };
function AdaptTabsComponent_div_4_li_13_Template(rf, ctx) { if (rf & 1) {
    const _r84 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 8);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "button", 72);
    i0.ɵɵlistener("click", function AdaptTabsComponent_div_4_li_13_Template_button_click_2_listener($event) { i0.ɵɵrestoreView(_r84); const ctx_r83 = i0.ɵɵnextContext(2); return ctx_r83.addTabsCallback($event); })("focusout", function AdaptTabsComponent_div_4_li_13_Template_button_focusout_2_listener($event) { i0.ɵɵrestoreView(_r84); const ctx_r85 = i0.ɵɵnextContext(2); return ctx_r85.listItemFocusOut($event); });
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelement(4, "i", 11);
    i0.ɵɵtext(5, "\n\n          ");
    i0.ɵɵtemplate(6, AdaptTabsComponent_div_4_li_13_span_6_Template, 4, 1, "span", 27);
    i0.ɵɵtext(7, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("add-nav-hidden", ctx_r11.showBackBtn || ctx_r11.showForwardBtn);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("disabled", ctx_r11.showBackBtn || ctx_r11.showForwardBtn)("ngStyle", i0.ɵɵpureFunction0(5, _c15));
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r11.showAddText);
} }
function AdaptTabsComponent_div_4_div_16_Template(rf, ctx) { if (rf & 1) {
    const _r87 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "button", 73);
    i0.ɵɵlistener("click", function AdaptTabsComponent_div_4_div_16_Template_button_click_2_listener($event) { i0.ɵɵrestoreView(_r87); const ctx_r86 = i0.ɵɵnextContext(2); return ctx_r86.addTabsCallback($event); })("focusout", function AdaptTabsComponent_div_4_div_16_Template_button_focusout_2_listener($event) { i0.ɵɵrestoreView(_r87); const ctx_r88 = i0.ɵɵnextContext(2); return ctx_r88.listItemFocusOut($event); });
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelement(4, "i", 74);
    i0.ɵɵtext(5, "\n        ");
    i0.ɵɵelementStart(6, "span", 75);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("add-nav-fixed", ctx_r12.showBackBtn || ctx_r12.showForwardBtn)("add-nav-fixed_pills", ctx_r12.type === ctx_r12.TYPES_TABS.PILLS)("d-none", !ctx_r12.showBackBtn && !ctx_r12.showForwardBtn);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction0(8, _c15));
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r12.texts.addTab);
} }
function AdaptTabsComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r90 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 17);
    i0.ɵɵtext(1, "\n\n    ");
    i0.ɵɵtemplate(2, AdaptTabsComponent_div_4_div_2_Template, 6, 4, "div", 18);
    i0.ɵɵtext(3, "\n\n    ");
    i0.ɵɵelementStart(4, "ul", 19, 20);
    i0.ɵɵlistener("cdkDropListDropped", function AdaptTabsComponent_div_4_Template_ul_cdkDropListDropped_4_listener($event) { i0.ɵɵrestoreView(_r90); const ctx_r89 = i0.ɵɵnextContext(); return ctx_r89.dropTab($event); })("@tabCloseAnimation.start", function AdaptTabsComponent_div_4_Template_ul_animation_tabCloseAnimation_start_4_listener($event) { i0.ɵɵrestoreView(_r90); const ctx_r91 = i0.ɵɵnextContext(); return ctx_r91.onAnimationStart($event); })("@tabCloseAnimation.done", function AdaptTabsComponent_div_4_Template_ul_animation_tabCloseAnimation_done_4_listener($event) { i0.ɵɵrestoreView(_r90); const ctx_r92 = i0.ɵɵnextContext(); return ctx_r92.onAnimationDone($event); });
    i0.ɵɵtext(6, "\n      ");
    i0.ɵɵtemplate(7, AdaptTabsComponent_div_4_ng_container_7_Template, 9, 2, "ng-container", 21);
    i0.ɵɵtext(8, "\n\n      ");
    i0.ɵɵtemplate(9, AdaptTabsComponent_div_4_li_9_Template, 1, 2, "li", 22);
    i0.ɵɵtext(10, "\n\n      ");
    i0.ɵɵtemplate(11, AdaptTabsComponent_div_4_li_11_Template, 16, 20, "li", 23);
    i0.ɵɵtext(12, "\n\n      ");
    i0.ɵɵtemplate(13, AdaptTabsComponent_div_4_li_13_Template, 9, 6, "li", 24);
    i0.ɵɵtext(14, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n\n    ");
    i0.ɵɵtemplate(16, AdaptTabsComponent_div_4_div_16_Template, 10, 9, "div", 25);
    i0.ɵɵtext(17, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r1.isMobile);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("nav", true)("nav-pills", ctx_r1.type === ctx_r1.TYPES_TABS.PILLS || ctx_r1.type === ctx_r1.TYPES_TABS.STACKED)("nav-tabs", ctx_r1.type === ctx_r1.TYPES_TABS.DEFAULT || ctx_r1.type === ctx_r1.TYPES_TABS.BORDERED || ctx_r1.type === ctx_r1.TYPES_TABS.INVERTED || ctx_r1.type === ctx_r1.TYPES_TABS.RESPONSIVE)("nav-bordered", ctx_r1.type === ctx_r1.TYPES_TABS.BORDERED)("nav-inverse", ctx_r1.type === ctx_r1.TYPES_TABS.INVERTED)("nav-stacked", ctx_r1.type === ctx_r1.TYPES_TABS.STACKED)("nav-justified", ctx_r1.justify === ctx_r1.TYPES_TABS.JUSTIFIED);
    i0.ɵɵproperty("cdkDropListDisabled", !ctx_r1.enableDnD)("ngClass", ctx_r1.customClassTabList)("@tabCloseAnimation", ctx_r1.tabs.length);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngForOf", ctx_r1.tabs.toArray())("ngForTrackBy", ctx_r1.trackByForTabs);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r1.type === ctx_r1.TYPES_TABS.PILLS && ctx_r1.tabs.toArray().length > 1 || ctx_r1.type === ctx_r1.TYPES_TABS.STACKED && ctx_r1.tabs.toArray().length);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r1.ddIsVisible);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r1.allowTabsAdding);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r1.allowTabsAdding);
} }
function AdaptTabsComponent_div_40_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 76);
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngStyle", ctx_r5.fadeElStyle)("@toolbarShadowAnimation", undefined);
} }
const _c16 = ["*"];
var TabToolbarScrollVariant;
(function (TabToolbarScrollVariant) {
    TabToolbarScrollVariant[TabToolbarScrollVariant["Forward"] = 0] = "Forward";
    TabToolbarScrollVariant[TabToolbarScrollVariant["Back"] = 1] = "Back";
    TabToolbarScrollVariant[TabToolbarScrollVariant["Focus"] = 2] = "Focus";
})(TabToolbarScrollVariant || (TabToolbarScrollVariant = {}));
let nextId = 0;
export class AdaptTabsComponent extends AdaptRadarAngularGenericDirective {
    constructor(conf, element, renderer, resizeService, dir, deviceDetection, ts, _changeDetectorRef, _ngZone, _adaptRadarService, _elem) {
        super(_adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptTabs);
        this.conf = conf;
        this.element = element;
        this.renderer = renderer;
        this.resizeService = resizeService;
        this.dir = dir;
        this.deviceDetection = deviceDetection;
        this.ts = ts;
        this._changeDetectorRef = _changeDetectorRef;
        this._ngZone = _ngZone;
        /**
         * Public variables of tabs component
         * dd means - dropdown
         */
        this.ddState = false;
        this.ddIsVisible = false;
        this.isCollapsed = false;
        this.isAnimationDone = true;
        this.tabsControlDirection = TabsControlsTypeDirection.Horizontal;
        this.showLeftShadow = false;
        this.showRightShadow = false;
        this.rtl = false;
        this.showAddText = true;
        this.defaultTexts = {};
        this.focusIndex = 0;
        this.smallerPadding = false;
        this.subtextTabCount = 0;
        this.showBackBtn = false;
        this.showForwardBtn = false;
        this.activeHiddenForward = false;
        this.activeHiddenBack = false;
        this.shadowWidth = {
            dropdown: 0,
            addButton: 0,
            addSubButton: 0
        };
        /**
         * Tabs types
         */
        this.TYPES_TABS = {
            PILLS: 'pills',
            DEFAULT: 'tabs',
            INVERTED: 'inverted',
            BORDERED: 'bordered',
            STACKED: 'stacked',
            JUSTIFIED: 'justified',
            RESPONSIVE: 'responsive'
        };
        /**
         * @since v11.11.0
         * @docs-default true
         */
        this.showTabToolbar = true;
        /**
         * Sets the height of the tab to fill the height of the container
         * @docs-default false
         */
        this.fullHeight = false;
        /**
         * Enable dragging visible tabs the list
         * @since v10.12.0
         * @docs-default false
         */
        this.enableDnD = false;
        /**
         * @docs-default
         */
        // eslint-disable-next-line @angular-eslint/no-input-rename
        this.allowTabsAdding = false;
        /**
         * A unique id for the dropdown of responsive tabs
         * @docs-default adapt-tabs-dropdown-${nextId++}
         */
        this.id = `adapt-tabs-dropdown-${nextId++}`;
        /**
         * A unique testID for the dropdown of responsive tabs
         * @docs-default adapt-tabs-dropdown-${nextId++}
         */
        this.testID = `adapt-tabs-dropdown-${nextId++}`;
        /**
         * Tabs toolbar carousel mode
         * @docs-default true
         */
        this.carouselMode = true;
        /* eslint-disable @angular-eslint/no-output-rename */
        /**
         * Output to enable get tab and tab index which was removed
         */
        this.closedIndexEmitter = new EventEmitter();
        /**
         * Output to enable support for two-way binding on `[(tab-active)]`
         */
        this.activeIndexEmitter = new EventEmitter();
        this.addTabsEmitter = new EventEmitter();
        /* eslint-enable @angular-eslint/no-output-rename */
        this.tabClicked = new EventEmitter();
        this.tabDropped = new EventEmitter();
        this._activeIndex = 0;
        this._toolbarScrollStep = .65;
        this._destroyed$ = new ReplaySubject(1);
        this._backPaddleWidth = 64;
        this._forwardPaddleWidth = this._backPaddleWidth;
        this._types = conf.type;
        this._justify = conf.justify;
        this.setDefaultTexts(ts.getCurrentLanguage());
    }
    /**
     * Tabs justify prop of the element
     * @docs-default
     */
    get justify() {
        return this._justify;
    }
    set justify(value) {
        this._justify = value;
    }
    /**
     * Tabs type of the element
     * @docs-default
     */
    get type() {
        return this._types;
    }
    set type(value) {
        this._types = value;
    }
    /**
     * The index of the active tab
     * @docs-default
     */
    get activeIndex() {
        return this._activeIndex;
    }
    set activeIndex(value) {
        this._activeIndex = value;
        this.focusIndex = this._activeIndex;
    }
    get height() {
        return this.fullHeight ? '100%' : '';
    }
    static verifyCloseTarget(e) {
        return (e.target).className.indexOf('is-closing') !== -1;
    }
    static verifyAnimationProp(prop, value) {
        return prop.toLowerCase().trim() === value;
    }
    ngOnInit() {
        this._element = this.element.nativeElement;
        this.rtl = this.dir.value === 'rtl';
        this.setCustomTexts();
    }
    /**
     * Check active index of tabs on ngOnChanges lifecycle hook
     */
    ngOnChanges(changes) {
        if (changes.activeIndex && !isUndefined(changes.activeIndex.previousValue)) {
            this.checkActiveIndex();
        }
        if (changes.texts) {
            this.setCustomTexts();
        }
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this.navList) {
            this._toolbar = this.navList.nativeElement;
            fromEvent(this._toolbar, 'scroll')
                .pipe(takeUntil(this._destroyed$), debounceTime(this.isMobile ? 1 : 100)).subscribe(() => {
                this._checkToolbarScrollUIState();
            });
            const resize$ = new Subject();
            resize$
                .pipe(takeUntil(this._destroyed$), throttleTime(100, asyncScheduler, { trailing: true }))
                .subscribe(() => {
                this._checkTabsOnResize();
                SafeCdr.detectChanges(this._changeDetectorRef);
            });
            this.resizeService.addResizeEventListener(this._toolbar, resize$.next.bind(resize$));
            SafeCdr.detectChanges(this._changeDetectorRef);
        }
    }
    ngAfterContentInit() {
        this.checkActiveIndex();
        this.calculateTabs();
        this.tabs.changes.pipe(delay(0)).subscribe(() => {
            this.checkActiveIndex();
            this.calculateTabs();
            this._scrollToActiveElement();
        });
    }
    ngOnDestroy() {
        if (this._toolbar) {
            this.resizeService.removeResizeEventListener(this._toolbar);
        }
    }
    dropTab(event) {
        const tabsArray = this.tabs.toArray();
        moveItemInArray(tabsArray, event.previousIndex, event.currentIndex);
        this.tabs.reset(tabsArray);
        this.tabDropped.emit(tabsArray);
    }
    onTabDragStarted(event, tab, index) {
        this._sendRadarEvent(AdaptRadarAngularCustomEventType.DragStart, null, tab, index);
    }
    onTabDropped(event, tab) {
        this._sendRadarEvent(AdaptRadarAngularCustomEventType.Drop, null, tab, event.currentIndex);
    }
    onKebabMenuClick(event, tab) {
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptTabsKebabMenu, {
            EventType: AdaptRadarAngularCustomEventType.Click,
            TabLabel: tab.title
        });
    }
    onContextMenu(event) {
        if (this.isMobile) {
            event.preventDefault();
        }
    }
    get isMobile() {
        return this.deviceDetection.isMobile() || this.deviceDetection.deviceTablet();
    }
    get hasFadeLeft() {
        return this.isMobile && this.showLeftShadow;
    }
    get hasFadeRight() {
        return this.isMobile && this.showRightShadow;
    }
    get fadeElStyle() {
        return this.fadeColor ? { color: this.fadeColor } : null;
    }
    get dropdownToggleBtnTabIndex() {
        var _a;
        if (!this.hiddenTabsDD) {
            return -1;
        }
        if (!((_a = this.tabs.toArray()[this.focusIndex]) === null || _a === void 0 ? void 0 : _a.isHidden)) {
            return -1;
        }
        return !this.hiddenTabsDD.isOpen() && this.ddState ? 0 : -1;
    }
    get hiddenTabsDDAutoClose() {
        var _a;
        return !((_a = this.hiddenTabKebabMenu) === null || _a === void 0 ? void 0 : _a.isOpen());
    }
    setDefaultTexts(translation) {
        this.dropdownTitle = translation['adapt.tabs.more'];
        this.ddTitleText = translation['adapt.tabs.more'];
        this.defaultTexts.addTab = this.ts.getCurrentLanguage()['adapt.tabs.add'];
    }
    setActiveTab(index, propagateIndexChange = false, e) {
        if (index === this._activeIndex) {
            return;
        }
        this._activeIndex = index;
        this.checkActiveIndex();
        if (propagateIndexChange) {
            this.activeIndexEmitter.emit({ index: this._activeIndex, event: e });
        }
        this._scrollToActiveElement(TabToolbarScrollVariant.Focus);
    }
    addTabsCallback(event) {
        if (this.allowTabsAdding) {
            this.addTabsEmitter.emit(event);
        }
        this._scrollToActiveElement();
    }
    getHiddenTabsCount() {
        return this.tabs.toArray().filter((obj) => obj.isHidden).length;
    }
    scrollBack() {
        this._scrollToActiveElement(TabToolbarScrollVariant.Back);
    }
    scrollForward() {
        this._scrollToActiveElement(TabToolbarScrollVariant.Forward);
    }
    /** Search the active index of a tab. */
    searchActiveIndex() {
        const length = this.tabs.length - 1;
        if (this._activeIndex > length && !isUndefined(length)) {
            this._activeIndex = length;
            return;
        }
        this.tabs.forEach((tab, index) => {
            tab.isActive = this._activeIndex === index;
        });
        // In case if parent component has OnPush change detection strategy
        // need to mark for check to correctly set "isActive" flag for tabs-panel component
        // TODO: There is sense to refactor tabs component to work in OnPush mode
        SafeCdr.markForCheck(this._changeDetectorRef);
    }
    /** Check the index of the active tab. */
    checkActiveIndex() {
        if (this.tabs) {
            timer(0, asapScheduler)
                .pipe(takeUntil(this._destroyed$))
                .subscribe(() => {
                this.searchActiveIndex();
                this._checkSingleActiveIndex();
                this._applyInkBarAnimation(this._activeIndex);
                // In case if parent component has OnPush change detection strategy
                // need to additionally run change detection cycle to correctly set active tabs state
                // TODO: There is sense to refactor tabs component to work in OnPush mode
                SafeCdr.detectChanges(this._changeDetectorRef);
            });
        }
    }
    select(e, tab) {
        e.preventDefault();
        if (tab.disabled || AdaptTabsComponent.verifyCloseTarget(e)) {
            return;
        }
        const index = this.tabs.toArray().indexOf(tab);
        this.setActiveTab(index, true, e);
    }
    getNextAvailableTab(tab) {
        const tabsArray = this.tabs.toArray();
        for (let i = tabsArray.indexOf(tab) + 1; i < tabsArray.length; i++) {
            const nextTab = tabsArray[i];
            if (!nextTab.disabled) {
                return nextTab;
            }
        }
        return null;
    }
    getPrevAvailableTab(tab) {
        const tabsArray = this.tabs.toArray();
        for (let i = tabsArray.indexOf(tab) - 1; i >= 0; i--) {
            const nextTab = tabsArray[i];
            if (!nextTab.disabled) {
                return nextTab;
            }
        }
        return null;
    }
    tabClick(event, tab, index) {
        this.select(event, tab);
        this._closeTabIndex(event, tab, index);
        this._sendRadarEvent(AdaptRadarAngularCustomEventType.Click, null, tab, index);
        this.tabClicked.emit({ event: event, index: index, tab: tab });
    }
    tabKeydown(event, tab, index) {
        var _a, _b;
        switch (getEventKeyCode(event)) {
            case this.rtl ? LEFT_ARROW : RIGHT_ARROW:
            case DOWN_ARROW: {
                event.preventDefault();
                const nextAvailableTab = this.getNextAvailableTab(tab);
                if (nextAvailableTab) {
                    const targetTabIndex = index + 1;
                    this.focusIndex = targetTabIndex;
                    if (nextAvailableTab.isHidden) {
                        (_a = this.hiddenTabsDDToggle) === null || _a === void 0 ? void 0 : _a.nativeElement.focus();
                        this.hiddenTabsDD.open();
                        this._ngZone.onStable
                            .pipe(takeUntil(this._destroyed$), take(1))
                            .subscribe(() => {
                            this.hiddenTabsDDNavLinks.toArray()[targetTabIndex].nativeElement.focus();
                        });
                    }
                    else {
                        this.navLinks.toArray()[targetTabIndex].nativeElement.focus();
                        this._scrollToActiveElement(TabToolbarScrollVariant.Focus);
                    }
                }
                else {
                    this._checkToolbarScrollUIState();
                }
                break;
            }
            case this.rtl ? RIGHT_ARROW : LEFT_ARROW:
            case UP_ARROW: {
                event.preventDefault();
                const prevAvailableTab = this.getPrevAvailableTab(tab);
                if (prevAvailableTab) {
                    const targetTabIndex = index - 1;
                    this.focusIndex = targetTabIndex;
                    if (prevAvailableTab.isHidden) {
                        (_b = this.hiddenTabsDDToggle) === null || _b === void 0 ? void 0 : _b.nativeElement.focus();
                        this.hiddenTabsDD.open();
                        this._ngZone.onStable
                            .pipe(takeUntil(this._destroyed$), take(1))
                            .subscribe(() => {
                            this.hiddenTabsDDNavLinks.toArray()[targetTabIndex].nativeElement.focus();
                        });
                    }
                    else {
                        if (this.hiddenTabsDD) {
                            this.hiddenTabsDD.close();
                        }
                        this.navLinks.toArray()[targetTabIndex].nativeElement.focus();
                        this._scrollToActiveElement(TabToolbarScrollVariant.Focus);
                    }
                }
                else {
                    this._checkToolbarScrollUIState();
                }
                break;
            }
        }
    }
    hiddenTabsDropdownToggleKeydown(event) {
        switch (getEventKeyCode(event)) {
            case UP_ARROW:
            case DOWN_ARROW:
            case LEFT_ARROW:
            case RIGHT_ARROW: {
                event.preventDefault();
                this.hiddenTabsDD.open();
                this._ngZone.onStable
                    .pipe(takeUntil(this._destroyed$), take(1))
                    .subscribe(() => {
                    var _a;
                    (_a = this.hiddenTabsDDNavLinks.toArray()[this.activeIndex]) === null || _a === void 0 ? void 0 : _a.nativeElement.focus();
                });
            }
        }
    }
    listItemFocusOut(event) {
        var _a, _b;
        const focusInHiddenTabsDropdown = (_a = this.hiddenTabsDDMenuEl) === null || _a === void 0 ? void 0 : _a.nativeElement.contains(event.relatedTarget);
        const focusInNavList = (_b = this._toolbar) === null || _b === void 0 ? void 0 : _b.contains(event.relatedTarget);
        this._ngZone.onStable
            .pipe(takeUntil(this._destroyed$), take(1))
            .subscribe(() => {
            if (!(focusInHiddenTabsDropdown || focusInNavList)) {
                this.focusIndex = this._activeIndex || 0;
            }
        });
    }
    setCustomTexts() {
        this.texts = Object.assign(Object.assign({}, this.defaultTexts), this.texts);
    }
    updateShadowSizes() {
        this.shadowWidth.addButton = (this.shadowAddButton && (this.allowTabsAdding))
            ? this.shadowAddButton.nativeElement.clientWidth
            : 0;
        this.shadowWidth.addSubButton = (this.shadowSubAddButton && (this.allowTabsAdding))
            ? this.shadowSubAddButton.nativeElement.clientWidth
            : 0;
        this.shadowWidth.dropdown = this.shadowDropdownItem ? this.shadowDropdownItem.nativeElement.clientWidth : 0;
    }
    calculateTabs() {
        const navPadding = 52; // left and right padding of tabs
        let count = 0; // variable for sum
        if (this.type === this.TYPES_TABS.STACKED || this.isMobile) {
            return;
        }
        if (this.type === this.TYPES_TABS.PILLS) {
            this.checkActiveIndex();
            this._applyInkBarAnimation(this._activeIndex);
        }
        if (this.navLinks && this.tabs) {
            const tabs = this.tabs.toArray();
            const addButtonInitialWidth = this.shadowWidth.addButton;
            const addSubButtonWidth = this.shadowWidth.addSubButton;
            let addButtonWidth = addButtonInitialWidth;
            this.updateShadowSizes();
            this.subtextTabCount = 0;
            this.navLinks.forEach((item, index) => {
                // let count width of items incrementally
                this.justify === this.TYPES_TABS.JUSTIFIED ?
                    count += (item.nativeElement.children[0].offsetWidth + navPadding) :
                    count += item.nativeElement.offsetWidth;
                if (this.isAnimationDone) {
                    // let check if we can make add button small
                    if ((Math.floor(count) + addButtonInitialWidth) > Math.ceil(this._element.clientWidth)) {
                        // now we need to get size of the add button without text
                        addButtonWidth = addButtonInitialWidth - addSubButtonWidth;
                        this.showAddText = false;
                    }
                    else {
                        this.showAddText = true;
                    }
                    const condition = (Math.floor(count) + addButtonWidth) > Math.ceil(this._element.clientWidth);
                    // don't hide items in carousel mode but still count sizes for add button
                    if (!this.carouselMode) {
                        tabs[index].isHidden = condition;
                        // in case we have dropdown available we may need to check if we should hide previous item as well
                        if (condition && tabs[index - 1]) {
                            tabs[index - 1].isHidden =
                                (Math.floor(count) + addButtonWidth + this.shadowWidth.dropdown) > Math.ceil(this._element.clientWidth);
                        }
                    }
                    // TODO: check with design team, how many items we need to hide inside dropdown
                    // if (!isUndefined(tabs[index - 1])) {
                    //    tabs[index - 1].isHidden = condition;
                    // }
                }
                if (tabs[index].subtext) {
                    this.subtextTabCount += 1;
                }
            });
            this.smallerPadding = this.subtextTabCount > 0;
            this.ddCount = this.getHiddenTabsCount();
        }
        if (this.isAnimationDone) {
            this.verifySingleTab();
        }
        this._ngZone.run(() => {
            this.toggleDropdown();
            this._isActiveDropdown();
        });
        // In case if parent component has OnPush change detection strategy need to additionally
        // run change detection cycle to correctly recalculate available width for tabs
        // TODO: There is sense to refactor tabs component to work in OnPush mode
        SafeCdr.detectChanges(this._changeDetectorRef);
    }
    toggleDropdown() {
        if (this.tabs && !isUndefined(this.tabs.last)) {
            this.ddIsVisible = this.tabs.last.isHidden;
        }
    }
    verifySingleTab() {
        const arrayTabs = this.tabs.toArray();
        if (this.tabs && this.tabs.length > 0) {
            if (this.tabs.first.isHidden && !isUndefined(this.tabs.first) && !isUndefined(arrayTabs[this._activeIndex])) {
                this.ddTitleText = arrayTabs[this._activeIndex].title;
                this.isCollapsed = true;
                this._isActiveDropdown();
            }
            else {
                this.isCollapsed = false;
                this.ddTitleText = this.dropdownTitle;
            }
        }
    }
    onAnimationStart(e) {
        const IS_START = AdaptTabsComponent.verifyAnimationProp(e.phaseName, 'start');
        if (IS_START) {
            this.isAnimationDone = false;
        }
    }
    onAnimationDone(e) {
        const IS_DONE = AdaptTabsComponent.verifyAnimationProp(e.phaseName, 'done');
        if (IS_DONE) {
            this.isAnimationDone = true;
            this.calculateTabs();
            this._scrollToActiveElement();
        }
    }
    trackByForTabs(index, tab) {
        return tab.id || tab.title || tab.subtext || index;
    }
    isBadgeEnabled(tab) {
        return isDefined(tab.badge) && tab.badge !== '';
    }
    _scrollToActiveElement(variant) {
        if (!(this.carouselMode && this._toolbar)) {
            return;
        }
        this._forwardPaddleWidth = this.allowTabsAdding ? this._backPaddleWidth * 2 : this._backPaddleWidth;
        const toolbarWidth = this._toolbar.offsetWidth;
        const toolbarScrollLeft = Math.floor(this._toolbar.scrollLeft);
        const toolbarScrollLeftAbs = Math.abs(toolbarScrollLeft);
        let nextScrollValue;
        switch (variant) {
            case TabToolbarScrollVariant.Forward: {
                nextScrollValue = (toolbarScrollLeftAbs + toolbarWidth * this._toolbarScrollStep) * (this.rtl ? -1 : 1);
                break;
            }
            case TabToolbarScrollVariant.Back: {
                nextScrollValue = (toolbarScrollLeftAbs - toolbarWidth * this._toolbarScrollStep) * (this.rtl ? -1 : 1);
                break;
            }
            case TabToolbarScrollVariant.Focus: {
                const focusedTabElement = document.activeElement;
                if (!this._toolbar.contains(focusedTabElement)) {
                    return;
                }
                const focusedTabElementLeftEdgeOffsetLeft = focusedTabElement.offsetLeft;
                const focusedTabElementRightEdgeOffsetLeft = focusedTabElementLeftEdgeOffsetLeft + focusedTabElement.offsetWidth;
                if (this.rtl) {
                    if ((toolbarScrollLeft > focusedTabElementLeftEdgeOffsetLeft - this._forwardPaddleWidth) && (toolbarScrollLeft < focusedTabElementRightEdgeOffsetLeft - this._forwardPaddleWidth)) {
                        nextScrollValue = focusedTabElementLeftEdgeOffsetLeft - this._forwardPaddleWidth;
                    }
                    else if ((toolbarScrollLeft > focusedTabElementLeftEdgeOffsetLeft - toolbarWidth + this._backPaddleWidth) && (toolbarScrollLeft < focusedTabElementRightEdgeOffsetLeft - toolbarWidth + this._backPaddleWidth)) {
                        nextScrollValue = focusedTabElementRightEdgeOffsetLeft - toolbarWidth + this._backPaddleWidth;
                    }
                }
                else {
                    if (focusedTabElementLeftEdgeOffsetLeft < (toolbarScrollLeftAbs + this._backPaddleWidth)) {
                        nextScrollValue = focusedTabElementLeftEdgeOffsetLeft - this._backPaddleWidth;
                    }
                    else if (focusedTabElementRightEdgeOffsetLeft > (toolbarWidth + toolbarScrollLeftAbs - this._forwardPaddleWidth)) {
                        nextScrollValue = focusedTabElementRightEdgeOffsetLeft - toolbarWidth + this._forwardPaddleWidth;
                    }
                }
                break;
            }
        }
        if (isNumber(nextScrollValue)) {
            this._toolbar.scrollLeft = nextScrollValue;
        }
        this._checkToolbarScrollUIState();
    }
    _checkToolbarScrollUIState() {
        var _a;
        if (this.isMobile) {
            this._checkToolbarShadows();
            return;
        }
        const toolbarWidth = this._toolbar.offsetWidth;
        const toolbarScrollWidth = this._toolbar.scrollWidth;
        const toolbarScrollLeft = Math.floor(this._toolbar.scrollLeft);
        const toolbarScrollLeftAbs = Math.abs(toolbarScrollLeft);
        const scrollWidth = toolbarScrollWidth - (this.showAddText ? this.shadowWidth.addButton : 0);
        this.showBackBtn = (scrollWidth > toolbarWidth) && (toolbarScrollLeftAbs > 10); // 10 is a padding
        this.showForwardBtn = (scrollWidth > toolbarWidth) && (toolbarScrollLeftAbs + toolbarWidth < scrollWidth - 10);
        const activeTabElement = (_a = this.navLinks.toArray()[this._activeIndex]) === null || _a === void 0 ? void 0 : _a.nativeElement;
        if (activeTabElement) {
            const activeTabElementLeftEdgeOffsetLeft = activeTabElement.offsetLeft;
            const activeTabElementRightEdgeOffsetLeft = activeTabElementLeftEdgeOffsetLeft + activeTabElement.offsetWidth;
            if (this.rtl) {
                if (activeTabElementLeftEdgeOffsetLeft < toolbarScrollLeft) {
                    this.activeHiddenForward = false;
                    this.activeHiddenBack = true;
                }
                else if (activeTabElementRightEdgeOffsetLeft > (toolbarScrollLeft + toolbarWidth)) {
                    this.activeHiddenForward = true;
                    this.activeHiddenBack = false;
                }
                else {
                    this.activeHiddenForward = this.activeHiddenBack = false;
                }
            }
            else {
                if (activeTabElementLeftEdgeOffsetLeft < (toolbarScrollLeftAbs + this._backPaddleWidth / 2)) {
                    this.activeHiddenForward = true;
                    this.activeHiddenBack = false;
                }
                else if (activeTabElementRightEdgeOffsetLeft > (toolbarWidth + toolbarScrollLeftAbs - this._forwardPaddleWidth / 2)) {
                    this.activeHiddenForward = false;
                    this.activeHiddenBack = true;
                }
                else {
                    this.activeHiddenForward = this.activeHiddenBack = false;
                }
            }
        }
    }
    _checkToolbarShadows() {
        const toolbarScrollLeft = Math.floor(this._toolbar.scrollLeft);
        const toolbarWidth = this._toolbar.offsetWidth;
        const toolbarScrollWidth = this._toolbar.scrollWidth;
        this.showLeftShadow = !(toolbarScrollLeft === 0);
        this.showRightShadow = !(toolbarScrollLeft + toolbarWidth >= toolbarScrollWidth);
    }
    _closeTabIndex(e, tab, index) {
        if (AdaptTabsComponent.verifyCloseTarget(e)) {
            e.preventDefault();
            e.stopPropagation();
            this._sendRadarEvent(AdaptRadarAngularCustomEventType.Click, AdaptRadarAngularComponentEventType.TabDelete, tab, index);
            this.closedIndexEmitter.emit({ tab: tab, index: index, event: e });
        }
    }
    _isActiveDropdown() {
        this.ddState = false;
        this.tabs.forEach(tab => {
            if (tab.isActive && tab.isHidden) {
                this.ddState = true;
            }
        });
    }
    /**
     * Apply nav-ink-bar animation for an active tab
     */
    _applyInkBarAnimation(index) {
        if (this.navLinks && this._tabsControl) {
            const { nativeElement } = this.navLinks.toArray()[index];
            if (this.ddIsVisible && this.ddState && this.hiddenTabsDropdownEl) {
                this._tabsControl.alignToElement(this.hiddenTabsDropdownEl.nativeElement);
            }
            if (this.type === this.TYPES_TABS.PILLS && !(this.ddIsVisible && this.ddState)) {
                this._tabsControl.alignToElement(nativeElement);
            }
            if (this.type === this.TYPES_TABS.STACKED) {
                this.tabsControlDirection = TabsControlsTypeDirection.Vertical;
                this._tabsControl.alignToElement(nativeElement);
            }
        }
    }
    _checkSingleActiveIndex() {
        if (this.ddIsVisible) {
            if (this.isAnimationDone) {
                this.verifySingleTab();
            }
            this._isActiveDropdown();
        }
    }
    _checkTabsOnResize() {
        this.calculateTabs();
        this._applyInkBarAnimation(this._activeIndex);
        this._scrollToActiveElement();
    }
    _sendRadarEvent(eventType, componentEventType, tab, index) {
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptTabs, {
            EventType: eventType,
            ComponentEventType: componentEventType,
            TabType: this.type,
            TabLabel: tab.title,
            TabIcon: !!tab.icon,
            TabBadge: !!tab.badge,
            TabMenu: !!tab.kebabMenu,
            Disabled: !!tab.disabled,
            TabPosition: index,
            TabCount: this.tabs.length
        });
    }
}
AdaptTabsComponent.ɵfac = function AdaptTabsComponent_Factory(t) { return new (t || AdaptTabsComponent)(i0.ɵɵdirectiveInject(i1.AdaptTabsConfig), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.ResizeService), i0.ɵɵdirectiveInject(i3.Directionality), i0.ɵɵdirectiveInject(i4.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i5.AdaptTranslateService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i6.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptTabsComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptTabsComponent, selectors: [["adapt-tabset"]], contentQueries: function AdaptTabsComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, AdaptTabsPanelComponent, 4);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.tabs = _t);
    } }, viewQuery: function AdaptTabsComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(AdaptTabsControlsDirective, 5);
        i0.ɵɵviewQuery(_c0, 5);
        i0.ɵɵviewQuery(_c1, 5, ElementRef);
        i0.ɵɵviewQuery(_c1, 5);
        i0.ɵɵviewQuery(_c2, 5);
        i0.ɵɵviewQuery(_c3, 5, ElementRef);
        i0.ɵɵviewQuery(_c4, 5);
        i0.ɵɵviewQuery(_c5, 7);
        i0.ɵɵviewQuery(_c6, 5);
        i0.ɵɵviewQuery(_c7, 5);
        i0.ɵɵviewQuery(_c8, 5);
        i0.ɵɵviewQuery(_c9, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._tabsControl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.hiddenTabKebabMenu = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.hiddenTabsDropdownEl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.hiddenTabsDD = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.hiddenTabsDDToggle = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.hiddenTabsDDMenuEl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.navList = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.shadowDropdownItem = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.shadowAddButton = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.shadowSubAddButton = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.navLinks = _t);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.hiddenTabsDDNavLinks = _t);
    } }, hostVars: 18, hostBindings: function AdaptTabsComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵstyleProp("height", ctx.height);
        i0.ɵɵclassProp("adapt-tabset", true)("adapt-tabset_mobile", ctx.isMobile)("adapt-tabset-carousel", ctx.carouselMode)("stacked", ctx.TYPES_TABS.STACKED === ctx.type)("fade-right", ctx.hasFadeRight)("fade-left", ctx.hasFadeLeft)("is-pills", ctx.isMobile && ctx.TYPES_TABS.PILLS === ctx.type)("is-tabs", ctx.isMobile && ctx.TYPES_TABS.PILLS !== ctx.type);
    } }, inputs: { showTabToolbar: "showTabToolbar", customCssTabContent: "customCssTabContent", fullHeight: "fullHeight", texts: "texts", enableDnD: "enableDnD", customClassTabList: "customClassTabList", allowTabsAdding: ["allow-tabs-adding", "allowTabsAdding"], id: "id", testID: "testID", dropdownTitle: ["dropdown-title", "dropdownTitle"], fadeColor: "fadeColor", carouselMode: "carouselMode", justify: "justify", type: "type", activeIndex: ["tab-active", "activeIndex"] }, outputs: { closedIndexEmitter: "tab-index-closed", activeIndexEmitter: "tab-active-changed", addTabsEmitter: "add-tab-clicked", tabClicked: "tabClicked", tabDropped: "tabDropped" }, exportAs: ["adaptTabset"], features: [i0.ɵɵProvidersFeature([AdaptTabsConfig]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c16, decls: 42, vars: 12, consts: [["class", "fade-left-element", 3, "ngStyle", 4, "ngIf"], [1, "tab-container", 3, "ngClass"], ["class", "tab-toolbar", 4, "ngIf"], ["aria-hidden", "true", 1, "a-shadow", "nav", "nav-tabs"], [1, "dropdown", "nav-item"], ["shadowDropdownItem", ""], ["type", "button", 1, "nav-link", "nav-link--toggle"], [1, "nav-link--toggle__icon"], [1, "nav-item"], ["shadowAddButton", ""], ["type", "button", 1, "nav-link", "add-nav-item"], [1, "d-icon-plus_adapt"], [1, "d-inline-block"], ["shadowSubAddButton", ""], [1, "letter-space"], ["class", "fade-right-element", 3, "ngStyle", 4, "ngIf"], [1, "fade-left-element", 3, "ngStyle"], [1, "tab-toolbar"], ["class", "tab-paddles", 3, "tab-paddles_pills", 4, "ngIf"], ["role", "tablist", "cdkDropList", "", "cdkDropListOrientation", "horizontal", 3, "cdkDropListDisabled", "ngClass", "cdkDropListDropped"], ["navList", ""], [4, "ngFor", "ngForOf", "ngForTrackBy"], ["adapt-tabs-controls", "", 3, "direction", "adaptRadarDisableEventSending", 4, "ngIf"], ["class", "dropdown nav-item", "adaptDropdown", "", 3, "is-collapsed", "adaptRadarDisableEventSending", "placement", "holdFocusInMenu", "autoFocusFirst", "autoClose", 4, "ngIf"], ["class", "nav-item", 3, "add-nav-hidden", 4, "ngIf"], ["class", "nav-item", 3, "add-nav-fixed", "add-nav-fixed_pills", "d-none", 4, "ngIf"], [1, "tab-paddles"], [4, "ngIf"], [1, "tab-fade-back", 3, "ngStyle"], [1, "back-paddle"], [1, "tab-back-btn", "btn", "btn-secondary", 3, "click"], [1, "tab-fade-forward"], [1, "forward-paddle"], [1, "tab-forward-btn", "btn", "btn-secondary", 3, "click"], ["class", "nav-item", "cdkDrag", "", "cdkDragLockAxis", "x", "cdkDragPreviewClass", "tab-drag", 3, "cdkDragStartDelay", "cdkDragStarted", "cdkDragDropped", "contextmenu", 4, "ngIf"], ["class", "nav-item nav-item--hidden", 4, "ngIf"], ["aTab", ""], ["cdkDrag", "", "cdkDragLockAxis", "x", "cdkDragPreviewClass", "tab-drag", 1, "nav-item", 3, "cdkDragStartDelay", "cdkDragStarted", "cdkDragDropped", "contextmenu"], [4, "ngTemplateOutlet"], [1, "nav-item", "nav-item--hidden"], ["type", "button", "role", "tab", 1, "nav-link", 3, "ngClass", "tabIndex", "click", "keydown", "focusout"], ["navLink", ""], [1, "nav-link-wrapper"], [3, "class", 4, "ngIf"], [1, "nav-link-title"], ["class", "nav-item-badge-space", 4, "ngIf"], ["type", "button", "class", "nav-item-close is-closing btn btn-link", 3, "is-closing--mobile", "tabIndex", 4, "ngIf"], ["class", "tab-subtext", 3, "ngClass", 4, "ngIf"], [1, "nav-item-badge-space"], [3, "animate", "adaptRadarDisableEventSending", "showAlert", "variant", "alertVariant", "customCls"], ["adaptDropdown", "", 1, "dropdown", "dropdown-kabob", 3, "adaptRadarDisableEventSending", "appendToBody", "restoreFocusAfterClose", "holdFocusInMenu"], ["type", "button", "adaptDropdownToggle", "", 1, "btn", "dropdown-kabob-btn", 3, "click"], ["role", "listbox", "adaptDropdownMenu", "", 1, "dropdown-menu"], [3, "ngTemplateOutlet"], ["type", "button", 1, "nav-item-close", "is-closing", "btn", "btn-link", 3, "tabIndex"], [1, "close", "is-closing"], [1, "tab-subtext", 3, "ngClass"], ["adapt-tabs-controls", "", 3, "direction", "adaptRadarDisableEventSending"], ["adaptDropdown", "", 1, "dropdown", "nav-item", 3, "adaptRadarDisableEventSending", "placement", "holdFocusInMenu", "autoFocusFirst", "autoClose"], ["hiddenTabsDD", ""], ["adaptDropdownToggle", "", "type", "button", 1, "nav-link", "nav-link--toggle", 3, "showCaret", "tabindex", "ngStyle", "keydown"], ["hiddenTabsDDToggle", ""], ["adaptDropdownMenu", "", "role", "listbox", 1, "dropdown-menu", "show"], ["hiddenTabsDDMenu", ""], ["type", "button", "role", "option", 1, "dropdown-item", 3, "tabIndex", "hidden", "disabled", "ngClass", "click", "keydown", "focusout"], ["hiddenTabsDDNavLink", ""], [1, "d-flex", "align-items-baseline"], [1, "icon-space"], ["type", "button", "class", "nav-item-close is-closing btn btn-link p-0", 3, "tabIndex", 4, "ngIf"], ["hiddenTabKebabMenu", ""], ["type", "button", "adaptDropdownToggle", "", 1, "btn", "dropdown-kabob-btn"], ["type", "button", 1, "nav-item-close", "is-closing", "btn", "btn-link", "p-0", 3, "tabIndex"], ["type", "button", 1, "nav-link", "add-nav-item", 3, "disabled", "ngStyle", "click", "focusout"], ["type", "button", 1, "nav-link", "add-nav-item", 3, "ngStyle", "click", "focusout"], ["aria-hidden", "true", 1, "d-icon-plus_adapt"], [1, "sr-only"], [1, "fade-right-element", 3, "ngStyle"]], template: function AdaptTabsComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, AdaptTabsComponent_div_0_Template, 1, 2, "div", 0);
        i0.ɵɵtext(1, "\n");
        i0.ɵɵelementStart(2, "div", 1);
        i0.ɵɵtext(3, "\n  ");
        i0.ɵɵtemplate(4, AdaptTabsComponent_div_4_Template, 18, 24, "div", 2);
        i0.ɵɵtext(5, "\n\n  ");
        i0.ɵɵelementStart(6, "ul", 3);
        i0.ɵɵtext(7, "\n    ");
        i0.ɵɵelementStart(8, "li", 4, 5);
        i0.ɵɵtext(10, "\n      ");
        i0.ɵɵelementStart(11, "button", 6);
        i0.ɵɵtext(12, "\n        ");
        i0.ɵɵelementStart(13, "span", 7);
        i0.ɵɵtext(14);
        i0.ɵɵelementEnd();
        i0.ɵɵtext(15, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(16, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(17, "\n    ");
        i0.ɵɵelementStart(18, "li", 8, 9);
        i0.ɵɵtext(20, "\n      ");
        i0.ɵɵelementStart(21, "button", 10);
        i0.ɵɵtext(22, "\n        ");
        i0.ɵɵelement(23, "i", 11);
        i0.ɵɵtext(24, "\n        ");
        i0.ɵɵelementStart(25, "span", 12, 13);
        i0.ɵɵtext(27, "\n          ");
        i0.ɵɵelement(28, "span", 14);
        i0.ɵɵtext(29);
        i0.ɵɵelementEnd();
        i0.ɵɵtext(30, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(31, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(32, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(33, "\n  ");
        i0.ɵɵelementStart(34, "div");
        i0.ɵɵtext(35, "\n    ");
        i0.ɵɵprojection(36);
        i0.ɵɵtext(37, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(38, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(39, "\n");
        i0.ɵɵtemplate(40, AdaptTabsComponent_div_40_Template, 1, 2, "div", 15);
        i0.ɵɵtext(41, "\n");
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.hasFadeLeft);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngClass", ctx.type);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.showTabToolbar);
        i0.ɵɵadvance(10);
        i0.ɵɵtextInterpolate2("", ctx.ddCount, " ", ctx.ddTitleText, "");
        i0.ɵɵadvance(15);
        i0.ɵɵtextInterpolate1("\n          ", ctx.texts.addTab, "\n        ");
        i0.ɵɵadvance(5);
        i0.ɵɵclassMapInterpolate1("tab-content ", ctx.customCssTabContent, "");
        i0.ɵɵclassProp("is-inverse", ctx.type === ctx.TYPES_TABS.INVERTED);
        i0.ɵɵadvance(6);
        i0.ɵɵproperty("ngIf", ctx.hasFadeRight);
    } }, directives: [i7.NgIf, i7.NgClass, i7.NgStyle, i8.CdkDropList, i7.NgForOf, i8.CdkDrag, i7.NgTemplateOutlet, i9.AdaptBadgeComponent, i10.AdaptDropdownDirective, i10.AdaptDropdownToggleDirective, i10.AdaptDropdownMenuDirective, i11.AdaptTabsControlsDirective], encapsulation: 2, data: { animation: [
            trigger('tabCloseAnimation', [
                transition('* => *', [
                    query(':leave', [
                        animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionOut}`, keyframes([
                            style({
                                width: '*',
                                transform: 'scale(1) translateX(0) translateY(0)',
                                visibility: 'visible',
                                opacity: 1,
                                offset: 0
                            }),
                            style({
                                width: '0',
                                transform: 'scale(.6) translateX(-18px) translateY(12px)',
                                visibility: 'hidden',
                                opacity: 0,
                                offset: 1.0
                            })
                        ]))
                    ], { optional: true })
                ])
            ]),
            trigger('toolbarBtnBackAnimation', [
                transition('void => *', [
                    useAnimation(ANIMATION_NAME.moveIn, {
                        params: {
                            duration: ANIMATION_DURATION.fast,
                            translateX: -10,
                            unit: 'px'
                        }
                    })
                ]),
                transition('* => void', [
                    useAnimation(ANIMATION_NAME.moveOut, {
                        params: {
                            duration: ANIMATION_DURATION.fast,
                            translateX: -10,
                            unit: 'px'
                        }
                    })
                ])
            ]),
            trigger('toolbarBtnForwardAnimation', [
                transition('void => *', [
                    useAnimation(ANIMATION_NAME.moveIn, {
                        params: {
                            duration: ANIMATION_DURATION.fast,
                            translateX: 10,
                            unit: 'px'
                        }
                    })
                ]),
                transition('* => void', [
                    useAnimation(ANIMATION_NAME.moveOut, {
                        params: {
                            duration: ANIMATION_DURATION.fast,
                            translateX: 10,
                            unit: 'px'
                        }
                    })
                ])
            ]),
            trigger('toolbarShadowAnimation', [
                transition('void => *', [
                    useAnimation(ANIMATION_NAME.opacity, {
                        params: {
                            from: '0',
                            to: '1'
                        }
                    })
                ]),
                transition('* => void', [
                    useAnimation(ANIMATION_NAME.opacity, {
                        params: {
                            from: '1',
                            to: '0'
                        }
                    })
                ])
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptTabsComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-tabset',
                exportAs: 'adaptTabset',
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[class.adapt-tabset]': 'true',
                    '[class.adapt-tabset_mobile]': 'isMobile',
                    '[class.adapt-tabset-carousel]': 'carouselMode',
                    '[class.stacked]': 'TYPES_TABS.STACKED === type',
                    '[class.fade-right]': 'hasFadeRight',
                    '[class.fade-left]': 'hasFadeLeft',
                    '[class.is-pills]': 'isMobile && TYPES_TABS.PILLS === type',
                    '[class.is-tabs]': 'isMobile && TYPES_TABS.PILLS !== type'
                },
                templateUrl: './tabs.component.html',
                providers: [AdaptTabsConfig],
                encapsulation: ViewEncapsulation.None,
                animations: [
                    trigger('tabCloseAnimation', [
                        transition('* => *', [
                            query(':leave', [
                                animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionOut}`, keyframes([
                                    style({
                                        width: '*',
                                        transform: 'scale(1) translateX(0) translateY(0)',
                                        visibility: 'visible',
                                        opacity: 1,
                                        offset: 0
                                    }),
                                    style({
                                        width: '0',
                                        transform: 'scale(.6) translateX(-18px) translateY(12px)',
                                        visibility: 'hidden',
                                        opacity: 0,
                                        offset: 1.0
                                    })
                                ]))
                            ], { optional: true })
                        ])
                    ]),
                    trigger('toolbarBtnBackAnimation', [
                        transition('void => *', [
                            useAnimation(ANIMATION_NAME.moveIn, {
                                params: {
                                    duration: ANIMATION_DURATION.fast,
                                    translateX: -10,
                                    unit: 'px'
                                }
                            })
                        ]),
                        transition('* => void', [
                            useAnimation(ANIMATION_NAME.moveOut, {
                                params: {
                                    duration: ANIMATION_DURATION.fast,
                                    translateX: -10,
                                    unit: 'px'
                                }
                            })
                        ])
                    ]),
                    trigger('toolbarBtnForwardAnimation', [
                        transition('void => *', [
                            useAnimation(ANIMATION_NAME.moveIn, {
                                params: {
                                    duration: ANIMATION_DURATION.fast,
                                    translateX: 10,
                                    unit: 'px'
                                }
                            })
                        ]),
                        transition('* => void', [
                            useAnimation(ANIMATION_NAME.moveOut, {
                                params: {
                                    duration: ANIMATION_DURATION.fast,
                                    translateX: 10,
                                    unit: 'px'
                                }
                            })
                        ])
                    ]),
                    trigger('toolbarShadowAnimation', [
                        transition('void => *', [
                            useAnimation(ANIMATION_NAME.opacity, {
                                params: {
                                    from: '0',
                                    to: '1'
                                }
                            })
                        ]),
                        transition('* => void', [
                            useAnimation(ANIMATION_NAME.opacity, {
                                params: {
                                    from: '1',
                                    to: '0'
                                }
                            })
                        ])
                    ])
                ]
            }]
    }], function () { return [{ type: i1.AdaptTabsConfig }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i2.ResizeService }, { type: i3.Directionality }, { type: i4.AdaptDeviceDetectionService }, { type: i5.AdaptTranslateService }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i6.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { showTabToolbar: [{
            type: Input
        }], customCssTabContent: [{
            type: Input
        }], fullHeight: [{
            type: Input
        }], texts: [{
            type: Input
        }], enableDnD: [{
            type: Input
        }], customClassTabList: [{
            type: Input
        }], allowTabsAdding: [{
            type: Input,
            args: ['allow-tabs-adding']
        }], id: [{
            type: Input
        }], testID: [{
            type: Input
        }], dropdownTitle: [{
            type: Input,
            args: ['dropdown-title']
        }], fadeColor: [{
            type: Input
        }], carouselMode: [{
            type: Input
        }], justify: [{
            type: Input
        }], type: [{
            type: Input
        }], activeIndex: [{
            type: Input,
            args: ['tab-active']
        }], closedIndexEmitter: [{
            type: Output,
            args: ['tab-index-closed']
        }], activeIndexEmitter: [{
            type: Output,
            args: ['tab-active-changed']
        }], addTabsEmitter: [{
            type: Output,
            args: ['add-tab-clicked']
        }], tabClicked: [{
            type: Output
        }], tabDropped: [{
            type: Output
        }], tabs: [{
            type: ContentChildren,
            args: [AdaptTabsPanelComponent]
        }], _tabsControl: [{
            type: ViewChild,
            args: [AdaptTabsControlsDirective]
        }], hiddenTabKebabMenu: [{
            type: ViewChild,
            args: ['hiddenTabKebabMenu', { static: false }]
        }], hiddenTabsDropdownEl: [{
            type: ViewChild,
            args: ['hiddenTabsDD', { read: ElementRef }]
        }], hiddenTabsDD: [{
            type: ViewChild,
            args: ['hiddenTabsDD']
        }], hiddenTabsDDToggle: [{
            type: ViewChild,
            args: ['hiddenTabsDDToggle']
        }], hiddenTabsDDMenuEl: [{
            type: ViewChild,
            args: ['hiddenTabsDDMenu', { read: ElementRef }]
        }], navList: [{
            type: ViewChild,
            args: ['navList', { static: false }]
        }], shadowDropdownItem: [{
            type: ViewChild,
            args: ['shadowDropdownItem', { static: true }]
        }], shadowAddButton: [{
            type: ViewChild,
            args: ['shadowAddButton', { static: false }]
        }], shadowSubAddButton: [{
            type: ViewChild,
            args: ['shadowSubAddButton', { static: false }]
        }], navLinks: [{
            type: ViewChildren,
            args: ['navLink']
        }], hiddenTabsDDNavLinks: [{
            type: ViewChildren,
            args: ['hiddenTabsDDNavLink']
        }], height: [{
            type: HostBinding,
            args: ['style.height']
        }] }); })();
//# sourceMappingURL=tabs.component.js.map