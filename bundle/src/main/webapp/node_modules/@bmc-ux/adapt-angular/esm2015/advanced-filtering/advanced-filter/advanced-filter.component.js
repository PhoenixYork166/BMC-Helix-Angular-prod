import { ChangeDetectorRef, Component, Directive, ElementRef, EventEmitter, forwardRef, Input, NgZone, Output, QueryList, TemplateRef, ViewChild, ViewChildren, ViewEncapsulation } from '@angular/core';
import { NG_VALIDATORS, NgControl } from '@angular/forms';
import { animate, animateChild, group, query, style, transition, trigger, useAnimation } from '@angular/animations';
import { ENTER, ESCAPE } from '@angular/cdk/keycodes';
import { EventManager } from '@angular/platform-browser';
import { asyncScheduler, Observable, Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, map, take, takeUntil, throttleTime } from 'rxjs/operators';
import { escapeRegExp, isEmpty, isEqual, isFunction } from 'lodash-es';
import { ANIMATION_DURATION, ANIMATION_NAME, ANIMATION_TIMING_FUNCTION } from '../../common/animation';
import { AdaptDeviceDetectionService } from '../../common/device-detection.service';
import { AdaptTranslateService } from '../../common/i18n/index';
import { ResizeService } from '../../common/resize/resize.service';
import { SafeCdr } from '../../common/safe-cdr';
import { formatString, getValueOrFunc, hasKeyboardKeyCode } from '../../common/utilities';
import { AdaptOverlayService } from '../../common/overlay/index';
import { AdaptCustomActionsAlignEnum } from '../../custom-actions/index';
import { AdaptMetatagComponent } from '../../metatag/index';
import { AdaptRxTextfieldComponent } from '../../rx/rx-textfield/index';
import { BaseFilterDirective } from '../base-filter';
import { AdvancedFilterDataTypesConfigsService } from './advanced-filter-configs.service';
import { ActiveSavedFilterSelectionCause } from './advanced-filter.models';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService } from '../../common/radar/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "./advanced-filter-configs.service";
import * as i3 from "../../common/device-detection.service";
import * as i4 from "../../common/i18n/index";
import * as i5 from "../../common/resize/resize.service";
import * as i6 from "../../common/overlay/index";
import * as i7 from "../../common/radar/adapt-radar";
import * as i8 from "@angular/common";
import * as i9 from "../../dropdown/dropdown.component";
import * as i10 from "../../metatag/metatag.component";
import * as i11 from "@angular/forms";
import * as i12 from "../../tabs/tabs.component";
import * as i13 from "../../tabs/tabs-panel.component";
import * as i14 from "../../custom-actions/adapt-custom-actions.component";
import * as i15 from "../../busy-loader/busy.directive";
import * as i16 from "../../rx/rx-textfield/adapt-rx-textfield.component";
import * as i17 from "../../rx/rx-radiobutton/adapt-rx-radiobutton.component";
import * as i18 from "../../button/button.component";
import * as i19 from "../../empty-state/empty-state.component";
import * as i20 from "../../rx/form-control/rx-control-label/adapt-rx-control-label.component";
import * as i21 from "../filter-tags/adapt-filter-tags";
import * as i22 from "../../accordion/accordion.component";
import * as i23 from "./filter-controls/filter-controls.component";
const _c0 = ["adaptDropdownMenu"];
const _c1 = ["adaptDropdownButton"];
const _c2 = ["editingFilterOptionsScrollableEl"];
const _c3 = ["editingFilterFooterEl"];
const _c4 = ["filterExpressionTagField"];
const _c5 = ["editingFilterExpressionTagField"];
const _c6 = ["applyFiltersByUserActionFooterEl"];
const _c7 = ["filtersDropdownWrapper"];
const _c8 = ["filterTags"];
const _c9 = ["newFilterNameEditor"];
const _c10 = ["filterControls"];
function AdaptAdvancedFilterComponent_div_3_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r8.dropdownAnchorLabel);
} }
function AdaptAdvancedFilterComponent_div_3_div_12_div_2_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 28);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵelement(2, "adapt-custom-actions", 29);
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r13 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("alignedTo", ctx_r13.customActionsAlignedTo)("adaptRadarDisableEventSending", true)("testID", ctx_r13.testID)("actions", ctx_r13.currentFilterActions);
} }
function AdaptAdvancedFilterComponent_div_3_div_12_div_2_ng_template_18_Template(rf, ctx) { }
function AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_li_6_p_16_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 46);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r26 = i0.ɵɵnextContext(7);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                              ", ctx_r26.texts.duplicateSavedFilterNameError, "\n                            ");
} }
const _c11 = function (a0) { return { "advanced-filter-name-editor__controls_focus": a0 }; };
function AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_li_6_Template(rf, ctx) { if (rf & 1) {
    const _r28 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li");
    i0.ɵɵtext(1, "\n                          ");
    i0.ɵɵelementStart(2, "div", 39);
    i0.ɵɵtext(3, "\n                            ");
    i0.ɵɵelementStart(4, "div", 40);
    i0.ɵɵtext(5, "\n                              ");
    i0.ɵɵelementStart(6, "adapt-rx-textfield", 41, 42);
    i0.ɵɵlistener("ngModelChange", function AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_li_6_Template_adapt_rx_textfield_ngModelChange_6_listener($event) { i0.ɵɵrestoreView(_r28); const ctx_r27 = i0.ɵɵnextContext(6); return ctx_r27.creatingNewFilterPresetName = $event; })("keydown", function AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_li_6_Template_adapt_rx_textfield_keydown_6_listener($event) { i0.ɵɵrestoreView(_r28); const ctx_r29 = i0.ɵɵnextContext(6); return ctx_r29.onNewFilterNameEditorKeyDown($event); })("onFocus", function AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_li_6_Template_adapt_rx_textfield_onFocus_6_listener() { i0.ɵɵrestoreView(_r28); const ctx_r30 = i0.ɵɵnextContext(6); return ctx_r30.onNewFilterNameEditorFocus(); })("onBlur", function AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_li_6_Template_adapt_rx_textfield_onBlur_6_listener() { i0.ɵɵrestoreView(_r28); const ctx_r31 = i0.ɵɵnextContext(6); return ctx_r31.onNewFilterNameEditorBlur(); });
    i0.ɵɵtext(8, "\n                              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n\n                              ");
    i0.ɵɵelementStart(10, "div", 43);
    i0.ɵɵtext(11, "\n                                ");
    i0.ɵɵelement(12, "adapt-custom-actions", 44);
    i0.ɵɵtext(13, "\n                              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n                            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n                            ");
    i0.ɵɵtemplate(16, AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_li_6_p_16_Template, 2, 1, "p", 45);
    i0.ɵɵtext(17, "\n                          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, "\n                        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r23 = i0.ɵɵnextContext(6);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", ctx_r23.hasDuplicateNameInCreating() ? "has-warning" : null);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("ngModel", ctx_r23.creatingNewFilterPresetName)("showInvalidStateIcon", false)("testID", ctx_r23.testID + "_filter-name")("autofocus", true)("placeholder", ctx_r23.texts.filterNameInputPlaceholder);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(13, _c11, ctx_r23.isNewFilterNameEditorFocus));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("alignedTo", ctx_r23.customActionsAlignedTo)("adaptRadarDisableEventSending", true)("testID", ctx_r23.testID)("actions", ctx_r23.creatingNewFilterActions);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r23.hasDuplicateNameInCreating());
} }
function AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_li_8_label_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "label");
    i0.ɵɵtext(1, "\n                              ");
    i0.ɵɵelementStart(2, "span", 56);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n                            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r35 = i0.ɵɵnextContext(7);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r35.texts.defaultSavedFilterLabel);
} }
function AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_li_8_button_9_Template(rf, ctx) { if (rf & 1) {
    const _r39 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 57);
    i0.ɵɵlistener("click", function AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_li_8_button_9_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r39); const savedFilter_r32 = i0.ɵɵnextContext().$implicit; const ctx_r37 = i0.ɵɵnextContext(6); return ctx_r37.markDefaultSavedFilter(savedFilter_r32, $event); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r33 = i0.ɵɵnextContext().index;
    const ctx_r36 = i0.ɵɵnextContext(6);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
    i0.ɵɵattribute("data-testid", ctx_r36.testID + "_mark_default_" + i_r33);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                              ", ctx_r36.texts.markDefaultSavedFilterLabel, "\n                            ");
} }
function AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_li_8_Template(rf, ctx) { if (rf & 1) {
    const _r42 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 47, 48);
    i0.ɵɵlistener("@editSavedFilterListItemAnimation.done", function AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_li_8_Template_li_animation_editSavedFilterListItemAnimation_done_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r42); const savedFilter_r32 = restoredCtx.$implicit; const ctx_r41 = i0.ɵɵnextContext(6); return ctx_r41.onEditSavedFilterListItemAnimationDone($event, savedFilter_r32); });
    i0.ɵɵtext(2, "\n                          ");
    i0.ɵɵelementStart(3, "adapt-rx-radiobutton", 49);
    i0.ɵɵlistener("checkedChange", function AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_li_8_Template_adapt_rx_radiobutton_checkedChange_3_listener() { const restoredCtx = i0.ɵɵrestoreView(_r42); const savedFilter_r32 = restoredCtx.$implicit; const ctx_r43 = i0.ɵɵnextContext(6); return ctx_r43.onSelectActiveSavedFilter(savedFilter_r32); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n\n                          ");
    i0.ɵɵelementStart(5, "div", 50);
    i0.ɵɵtext(6, "\n                            ");
    i0.ɵɵtemplate(7, AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_li_8_label_7_Template, 5, 1, "label", 10);
    i0.ɵɵtext(8, "\n                            ");
    i0.ɵɵtemplate(9, AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_li_8_button_9_Template, 2, 3, "button", 51);
    i0.ɵɵtext(10, "\n                            ");
    i0.ɵɵelementStart(11, "button", 52);
    i0.ɵɵlistener("click", function AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_li_8_Template_button_click_11_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r42); const savedFilter_r32 = restoredCtx.$implicit; const _r34 = i0.ɵɵreference(1); const ctx_r44 = i0.ɵɵnextContext(6); return ctx_r44.onEditSavedFilterClick(savedFilter_r32, _r34, $event); });
    i0.ɵɵtext(12, "\n                                ");
    i0.ɵɵelementStart(13, "span", 53);
    i0.ɵɵtext(14, "\n                                  ");
    i0.ɵɵelementStart(15, "span", 54);
    i0.ɵɵtext(16);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(17, "\n                                ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, "\n                            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(19, "\n\n                            ");
    i0.ɵɵelementStart(20, "button", 52);
    i0.ɵɵlistener("click", function AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_li_8_Template_button_click_20_listener() { const restoredCtx = i0.ɵɵrestoreView(_r42); const savedFilter_r32 = restoredCtx.$implicit; const ctx_r45 = i0.ɵɵnextContext(6); return ctx_r45.onDeleteSavedFilterClick(savedFilter_r32); });
    i0.ɵɵtext(21, "\n                              ");
    i0.ɵɵelementStart(22, "span", 55);
    i0.ɵɵelementStart(23, "span", 54);
    i0.ɵɵtext(24);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
    i0.ɵɵtext(25, "\n                            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(26, "\n                          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(27, "\n                        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const savedFilter_r32 = ctx.$implicit;
    const i_r33 = ctx.index;
    const _r34 = i0.ɵɵreference(1);
    const ctx_r24 = i0.ɵɵnextContext(6);
    i0.ɵɵproperty("@editSavedFilterListItemAnimation", ctx_r24.getSavedFilterListItemAnimationState(savedFilter_r32, _r34));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("label", savedFilter_r32.name)("value", savedFilter_r32)("checked", ctx_r24.isFilterActive(savedFilter_r32));
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r24.enableDefaultSavedFilter && savedFilter_r32.id === ctx_r24.defaultSavedFilterId);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r24.enableDefaultSavedFilter && savedFilter_r32.id !== ctx_r24.defaultSavedFilterId);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
    i0.ɵɵattribute("data-testid", ctx_r24.testID + "_edit_" + i_r33);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r24.texts.editLabel);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
    i0.ɵɵattribute("data-testid", ctx_r24.testID + "_save_" + i_r33);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r24.texts.removeLabel);
} }
function AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n                      ");
    i0.ɵɵelementStart(1, "h4", 36);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n                      ");
    i0.ɵɵelementStart(4, "ul", 37);
    i0.ɵɵtext(5, "\n                        ");
    i0.ɵɵtemplate(6, AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_li_6_Template, 19, 15, "li", 10);
    i0.ɵɵtext(7, "\n                        ");
    i0.ɵɵtemplate(8, AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_li_8_Template, 28, 13, "li", 38);
    i0.ɵɵtext(9, "\n                      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n                    ");
} if (rf & 2) {
    const ctx_r20 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r20.texts.createdByMeLabel);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r20.canShowCreatingNewFilterPreset);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r20.getSavedFiltersByCurrentUser())("ngForTrackBy", ctx_r20.trackByForSavedFilterFn);
} }
function AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_11_li_6_Template(rf, ctx) { if (rf & 1) {
    const _r50 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li");
    i0.ɵɵtext(1, "\n                          ");
    i0.ɵɵelementStart(2, "adapt-rx-radiobutton", 49);
    i0.ɵɵlistener("checkedChange", function AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_11_li_6_Template_adapt_rx_radiobutton_checkedChange_2_listener() { const restoredCtx = i0.ɵɵrestoreView(_r50); const savedFilter_r47 = restoredCtx.$implicit; const ctx_r49 = i0.ɵɵnextContext(6); return ctx_r49.onSelectActiveSavedFilter(savedFilter_r47); });
    i0.ɵɵtext(3, "\n                          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n                        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const savedFilter_r47 = ctx.$implicit;
    const i_r48 = ctx.index;
    const ctx_r46 = i0.ɵɵnextContext(6);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("label", savedFilter_r47.name)("value", savedFilter_r47)("checked", ctx_r46.isFilterActive(savedFilter_r47));
    i0.ɵɵattribute("data-testid", ctx_r46.testID + "_saved_" + i_r48);
} }
function AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n                      ");
    i0.ɵɵelementStart(1, "h4", 36);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n                      ");
    i0.ɵɵelementStart(4, "ul", 37);
    i0.ɵɵtext(5, "\n                        ");
    i0.ɵɵtemplate(6, AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_11_li_6_Template, 5, 5, "li", 58);
    i0.ɵɵtext(7, "\n                      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n                    ");
} if (rf & 2) {
    const ctx_r21 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r21.texts.createdByOthersLabel);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngForOf", ctx_r21.getSavedFiltersByOtherUsers())("ngForTrackBy", ctx_r21.trackByForSavedFilterFn);
} }
function AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_adapt_empty_state_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-empty-state", 59);
} if (rf & 2) {
    const ctx_r22 = i0.ɵɵnextContext(5);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("type", "filter")("label", ctx_r22.texts.noFiltersSaved);
    i0.ɵɵattribute("data-testid", ctx_r22.testID + "_empty");
} }
function AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "adapt-tab-panel", 30);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵelementStart(2, "div", 23, 31);
    i0.ɵɵtext(4, "\n                ");
    i0.ɵɵelementStart(5, "div", 32);
    i0.ɵɵtext(6, "\n                  ");
    i0.ɵɵelementStart(7, "div", 33);
    i0.ɵɵtext(8, "\n                    ");
    i0.ɵɵtemplate(9, AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_9_Template, 11, 4, "ng-template", 34);
    i0.ɵɵtext(10, "\n\n                    ");
    i0.ɵɵtemplate(11, AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_ng_template_11_Template, 9, 3, "ng-template", 34);
    i0.ɵɵtext(12, "\n\n                    ");
    i0.ɵɵtemplate(13, AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_adapt_empty_state_13_Template, 1, 4, "adapt-empty-state", 35);
    i0.ɵɵtext(14, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n                ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(16, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(17, "\n            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r19 = i0.ɵɵreference(3);
    const ctx_r17 = i0.ɵɵnextContext(4);
    i0.ɵɵproperty("adapt-tab-title", ctx_r17.texts.savedFiltersLabel)("badge", ctx_r17.savedFilters.length);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngStyle", ctx_r17.getScrollableElStyle(_r19));
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngBusy", ctx_r17.busyConfig);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r17.getSavedFiltersByCurrentUser().length || ctx_r17.canShowCreatingNewFilterPreset);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r17.getSavedFiltersByOtherUsers().length);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r17.savedFilters.length);
} }
function AdaptAdvancedFilterComponent_div_3_div_12_div_2_div_25_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r54 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 65);
    i0.ɵɵlistener("click", function AdaptAdvancedFilterComponent_div_3_div_12_div_2_div_25_button_5_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r54); i0.ɵɵnextContext(4); const _r6 = i0.ɵɵreference(1); return _r6.close(); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r52 = i0.ɵɵnextContext(5);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
    i0.ɵɵattribute("data-testid", ctx_r52.testID + "_footer_cancel");
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                ", ctx_r52.texts.cancelLabel, "\n              ");
} }
function AdaptAdvancedFilterComponent_div_3_div_12_div_2_div_25_Template(rf, ctx) { if (rf & 1) {
    const _r56 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 60, 61);
    i0.ɵɵtext(2, "\n            ");
    i0.ɵɵelementStart(3, "div");
    i0.ɵɵtext(4, "\n              ");
    i0.ɵɵtemplate(5, AdaptAdvancedFilterComponent_div_3_div_12_div_2_div_25_button_5_Template, 2, 3, "button", 62);
    i0.ɵɵtext(6, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n            ");
    i0.ɵɵelementStart(8, "div");
    i0.ɵɵtext(9, "\n              ");
    i0.ɵɵelementStart(10, "button", 63);
    i0.ɵɵlistener("click", function AdaptAdvancedFilterComponent_div_3_div_12_div_2_div_25_Template_button_click_10_listener($event) { i0.ɵɵrestoreView(_r56); const ctx_r55 = i0.ɵɵnextContext(4); return ctx_r55.removeAllSelectedFilters($event); });
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n              ");
    i0.ɵɵelementStart(13, "button", 64);
    i0.ɵɵlistener("click", function AdaptAdvancedFilterComponent_div_3_div_12_div_2_div_25_Template_button_click_13_listener() { i0.ɵɵrestoreView(_r56); const ctx_r57 = i0.ɵɵnextContext(4); return ctx_r57.applySelectedFilters(); });
    i0.ɵɵtext(14);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(16, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r18 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", !ctx_r18.isMobile);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("disabled", ctx_r18.isClearSelectedFiltersButtonDisabled());
    i0.ɵɵattribute("data-testid", ctx_r18.testID + "_footer_remove");
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                ", ctx_r18.texts.removeAllLabel, "\n              ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("disabled", ctx_r18.isApplySelectedFiltersButtonDisabled());
    i0.ɵɵattribute("data-testid", ctx_r18.testID + "_footer_apply");
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                ", ctx_r18.texts.applyFiltersLabel, "\n              ");
} }
const _c12 = function (a0) { return { "mt-3": a0 }; };
function AdaptAdvancedFilterComponent_div_3_div_12_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r59 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 16);
    i0.ɵɵtext(1, "\n\n          ");
    i0.ɵɵelementStart(2, "div", 17);
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵtemplate(4, AdaptAdvancedFilterComponent_div_3_div_12_div_2_div_4_Template, 4, 4, "div", 18);
    i0.ɵɵtext(5, "\n            ");
    i0.ɵɵelementStart(6, "adapt-tag-field", 19, 20);
    i0.ɵɵlistener("ngModelChange", function AdaptAdvancedFilterComponent_div_3_div_12_div_2_Template_adapt_tag_field_ngModelChange_6_listener($event) { i0.ɵɵrestoreView(_r59); const ctx_r58 = i0.ɵɵnextContext(3); return ctx_r58.onActiveFiltersTagFieldModelChange($event); })("removeTag", function AdaptAdvancedFilterComponent_div_3_div_12_div_2_Template_adapt_tag_field_removeTag_6_listener($event) { i0.ɵɵrestoreView(_r59); const ctx_r60 = i0.ɵɵnextContext(3); return ctx_r60.onRemoveCurrentFiltersExpressionFieldTag($event); })("initTagEditing", function AdaptAdvancedFilterComponent_div_3_div_12_div_2_Template_adapt_tag_field_initTagEditing_6_listener($event) { i0.ɵɵrestoreView(_r59); const ctx_r61 = i0.ɵɵnextContext(3); return ctx_r61.onInitExpressionFieldTagEditing($event); });
    i0.ɵɵtext(8, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n\n          ");
    i0.ɵɵelementStart(11, "adapt-tabset", 21);
    i0.ɵɵlistener("tab-active-changed", function AdaptAdvancedFilterComponent_div_3_div_12_div_2_Template_adapt_tabset_tab_active_changed_11_listener($event) { i0.ɵɵrestoreView(_r59); const ctx_r62 = i0.ɵɵnextContext(3); return ctx_r62.onActiveTabChange($event); });
    i0.ɵɵtext(12, "\n            ");
    i0.ɵɵelementStart(13, "adapt-tab-panel", 22);
    i0.ɵɵtext(14, "\n              ");
    i0.ɵɵelementStart(15, "div", 23, 24);
    i0.ɵɵtext(17, "\n                ");
    i0.ɵɵtemplate(18, AdaptAdvancedFilterComponent_div_3_div_12_div_2_ng_template_18_Template, 0, 0, "ng-template", 25);
    i0.ɵɵtext(19, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(20, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(21, "\n\n            ");
    i0.ɵɵtemplate(22, AdaptAdvancedFilterComponent_div_3_div_12_div_2_adapt_tab_panel_22_Template, 18, 7, "adapt-tab-panel", 26);
    i0.ɵɵtext(23, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(24, "\n\n          ");
    i0.ɵɵtemplate(25, AdaptAdvancedFilterComponent_div_3_div_12_div_2_div_25_Template, 17, 9, "div", 27);
    i0.ɵɵtext(26, "\n\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r14 = i0.ɵɵreference(7);
    const _r15 = i0.ɵɵreference(16);
    i0.ɵɵnextContext(2);
    const _r6 = i0.ɵɵreference(1);
    const ctx_r11 = i0.ɵɵnextContext();
    const _r4 = i0.ɵɵreference(11);
    i0.ɵɵproperty("@savedFiltersContainerAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(34, _c12, ctx_r11.isTablet));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", _r6.isOpen() && !ctx_r11.canShowCreatingNewFilterPreset);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("warningCheck", ctx_r11.tagFieldWarningCheckResolver)("mainErrorText", ctx_r11.texts.filtersExpressionMainErrorText)("warningStateText", ctx_r11.texts.filtersExpressionWarningText)("mainCls", ctx_r11.getFilterExpressionFieldClass("advanced-filter__expression-tag-field", _r14))("label", ctx_r11.getFiltersExpressionFieldLabel())("maxHeight", 68)("testID", ctx_r11.testID + "_tag-field")("name", "expression-bar")("search", ctx_r11.expressionSearch)("ngModel", ctx_r11.getExpressionTagFieldModel())("delimiterSymbol", null)("placeholder", ctx_r11.getExpressionTagFieldPlaceholder())("replaceModelOnWrite", true)("fullWidthEdit", ctx_r11.fullWidthEdit)("disabledInput", ctx_r11.disableExpressionEditing)("suppressManual", ctx_r11.disableExpressionEditing);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("showTabToolbar", ctx_r11.showTabToolbar)("adaptRadarDisableEventSending", true)("type", ctx_r11.isTablet ? "tabs" : "pills")("justify", ctx_r11.isTablet ? "justified" : "")("customCssTabContent", "advanced-filter__tab-content")("customClassTabList", ctx_r11.enableSavedFilters ? "" : "advanced-filter__filters-tab-alone")("tab-active", ctx_r11.tabsetActiveIndex)("testID", ctx_r11.testID)("carouselMode", false);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adapt-tab-title", ctx_r11.enableSavedFilters ? ctx_r11.texts.filtersLabel : ctx_r11.texts.filtersLabelAlone);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngStyle", ctx_r11.getScrollableElStyle(_r15));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", _r4);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r11.enableSavedFilters);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r11.applyFiltersByUserAction && !ctx_r11.isMobile);
} }
function AdaptAdvancedFilterComponent_div_3_div_12_div_4_adapt_rx_control_label_17_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-rx-control-label", 80);
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r64 = i0.ɵɵreference(20);
    const ctx_r63 = i0.ɵɵnextContext(3);
    i0.ɵɵclassProp("has-danger", _r64.hasDangerState);
    i0.ɵɵproperty("for", _r64.id)("label", ctx_r63.texts.filterNameLabel)("showRequiredLabel", true);
} }
function AdaptAdvancedFilterComponent_div_3_div_12_div_4_ng_template_30_Template(rf, ctx) { }
function AdaptAdvancedFilterComponent_div_3_div_12_div_4_div_33_Template(rf, ctx) { if (rf & 1) {
    const _r71 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 81, 82);
    i0.ɵɵtext(2, "\n              ");
    i0.ɵɵelementStart(3, "div", 83);
    i0.ɵɵtext(4, "\n                ");
    i0.ɵɵelementStart(5, "button", 84);
    i0.ɵɵlistener("click", function AdaptAdvancedFilterComponent_div_3_div_12_div_4_div_33_Template_button_click_5_listener() { i0.ɵɵrestoreView(_r71); const ctx_r70 = i0.ɵɵnextContext(4); return ctx_r70.cancelSavedFilterEditing(); });
    i0.ɵɵtext(6);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n                ");
    i0.ɵɵelementStart(8, "button", 64);
    i0.ɵɵlistener("click", function AdaptAdvancedFilterComponent_div_3_div_12_div_4_div_33_Template_button_click_8_listener() { i0.ɵɵrestoreView(_r71); const ctx_r72 = i0.ɵɵnextContext(4); return ctx_r72.saveSavedFilterEditing(); });
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r68 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                  ", ctx_r68.texts.cancelLabel, "\n                ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("disabled", !ctx_r68.hasValidCurrentFilterTags());
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                  ", ctx_r68.texts.saveButtonLabel, "\n                ");
} }
function AdaptAdvancedFilterComponent_div_3_div_12_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r74 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵlistener("@editFilterContainerAnimation.done", function AdaptAdvancedFilterComponent_div_3_div_12_div_4_Template_div_animation_editFilterContainerAnimation_done_0_listener() { i0.ɵɵrestoreView(_r74); const ctx_r73 = i0.ɵɵnextContext(3); return ctx_r73.calculateEditingFilterOptionsScrollableElStyle(); });
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "div", 66);
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵelementStart(4, "button", 67);
    i0.ɵɵlistener("click", function AdaptAdvancedFilterComponent_div_3_div_12_div_4_Template_button_click_4_listener() { i0.ɵɵrestoreView(_r74); const ctx_r75 = i0.ɵɵnextContext(3); return ctx_r75.cancelSavedFilterEditing(); });
    i0.ɵɵtext(5, "\n              ");
    i0.ɵɵelement(6, "span", 68);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n            ");
    i0.ɵɵelementStart(9, "h3", 69);
    i0.ɵɵtext(10);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n\n          ");
    i0.ɵɵelementStart(13, "div", 70);
    i0.ɵɵtext(14, "\n            ");
    i0.ɵɵelementStart(15, "div", 71);
    i0.ɵɵtext(16, "\n              ");
    i0.ɵɵtemplate(17, AdaptAdvancedFilterComponent_div_3_div_12_div_4_adapt_rx_control_label_17_Template, 1, 5, "adapt-rx-control-label", 72);
    i0.ɵɵtext(18, "\n              ");
    i0.ɵɵelementStart(19, "adapt-rx-textfield", 73, 74);
    i0.ɵɵlistener("ngModelChange", function AdaptAdvancedFilterComponent_div_3_div_12_div_4_Template_adapt_rx_textfield_ngModelChange_19_listener($event) { i0.ɵɵrestoreView(_r74); const ctx_r76 = i0.ɵɵnextContext(3); return ctx_r76.currentEditingSavedFilter.filterName = $event; });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(21, "\n\n              ");
    i0.ɵɵelementStart(22, "adapt-tag-field", 75, 76);
    i0.ɵɵlistener("ngModelChange", function AdaptAdvancedFilterComponent_div_3_div_12_div_4_Template_adapt_tag_field_ngModelChange_22_listener($event) { i0.ɵɵrestoreView(_r74); const ctx_r77 = i0.ɵɵnextContext(3); return ctx_r77.onTagFieldModelChange($event); });
    i0.ɵɵtext(24, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(25, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(26, "\n\n            ");
    i0.ɵɵelementStart(27, "div", 77, 78);
    i0.ɵɵtext(29, "\n              ");
    i0.ɵɵtemplate(30, AdaptAdvancedFilterComponent_div_3_div_12_div_4_ng_template_30_Template, 0, 0, "ng-template", 25);
    i0.ɵɵtext(31, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(32, "\n\n            ");
    i0.ɵɵtemplate(33, AdaptAdvancedFilterComponent_div_3_div_12_div_4_div_33_Template, 12, 5, "div", 79);
    i0.ɵɵtext(34, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(35, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r64 = i0.ɵɵreference(20);
    const _r65 = i0.ɵɵreference(23);
    const ctx_r12 = i0.ɵɵnextContext(3);
    const _r4 = i0.ɵɵreference(11);
    i0.ɵɵproperty("@editFilterContainerAnimation", ctx_r12.editFilterContainerAnimationOptions);
    i0.ɵɵadvance(4);
    i0.ɵɵstyleProp("height", ctx_r12.isMobile || ctx_r12.isTablet ? 0 : "auto");
    i0.ɵɵclassProp("invisible", ctx_r12.isMobile || ctx_r12.isTablet);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
    i0.ɵɵattribute("data-testid", ctx_r12.testID + "_cancel");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("\n              ", ctx_r12.texts.backLabel, "\n            ");
    i0.ɵɵadvance(2);
    i0.ɵɵstyleProp("height", ctx_r12.isMobile || ctx_r12.isTablet ? 0 : "auto");
    i0.ɵɵclassProp("invisible", ctx_r12.isMobile || ctx_r12.isTablet);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate2("\n              ", ctx_r12.texts.editLabel, ": ", ctx_r12.currentEditingSavedFilter.originalSavedFilter.name, "\n            ");
    i0.ɵɵadvance(7);
    i0.ɵɵproperty("ngIf", _r64);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("ngModel", ctx_r12.currentEditingSavedFilter.filterName)("showInvalidStateIcon", false)("testID", ctx_r12.testID + "_filter-name")("placeholder", ctx_r12.texts.filterNameInputPlaceholder)("requiredLabel", ctx_r12.texts.requiredLabel)("warningMessage", ctx_r12.hasDuplicateNameInEditing() ? ctx_r12.texts.duplicateSavedFilterNameError : null)("adaptAdvancedFilterNameErrorText", ctx_r12.texts.filterNameErrorMessage);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("warningCheck", ctx_r12.tagFieldWarningCheckResolver)("mainErrorText", ctx_r12.texts.filtersExpressionMainErrorText)("warningStateText", ctx_r12.texts.filtersExpressionWarningText)("mainCls", ctx_r12.getFilterExpressionFieldClass("advanced-filter__expression-tag-field advanced-filter__editing-tag-field", _r65))("label", ctx_r12.getFiltersExpressionFieldLabel())("maxHeight", 68)("name", "expression-bar")("search", ctx_r12.expressionSearch)("ngModel", ctx_r12.currentFiltersExpressionsTags)("delimiterSymbol", null)("required", true)("fullWidthEdit", ctx_r12.fullWidthEdit)("placeholder", ctx_r12.texts.expressionFilterPlaceholder)("replaceModelOnWrite", true)("requiredLabel", ctx_r12.texts.requiredLabel);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngStyle", ctx_r12.editingFilterScrollableElStyle);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", _r4);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", !ctx_r12.isMobile);
} }
function AdaptAdvancedFilterComponent_div_3_div_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 14);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptAdvancedFilterComponent_div_3_div_12_div_2_Template, 27, 36, "div", 15);
    i0.ɵɵtext(3, "\n\n        ");
    i0.ɵɵtemplate(4, AdaptAdvancedFilterComponent_div_3_div_12_div_4_Template, 36, 42, "div", 10);
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r10 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r10.currentEditingSavedFilter);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r10.currentEditingSavedFilter);
} }
const _c13 = function (a0, a1, a2, a3) { return { "advanced-filter__popover-container_non-mobile": a0, "advanced-filter__popover-container_mobile": a1, "border-top": a2, "advanced-filter__popover-container_scrollable": a3 }; };
function AdaptAdvancedFilterComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r79 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 6, 7);
    i0.ɵɵlistener("anchorPositionChange", function AdaptAdvancedFilterComponent_div_3_Template_div_anchorPositionChange_0_listener() { i0.ɵɵrestoreView(_r79); const ctx_r78 = i0.ɵɵnextContext(); return ctx_r78.onAnchorPositionChange(); })("onOpen", function AdaptAdvancedFilterComponent_div_3_Template_div_onOpen_0_listener() { i0.ɵɵrestoreView(_r79); const ctx_r80 = i0.ɵɵnextContext(); return ctx_r80.handleDropdownOpenChange(true); })("onClose", function AdaptAdvancedFilterComponent_div_3_Template_div_onClose_0_listener() { i0.ɵɵrestoreView(_r79); const ctx_r81 = i0.ɵɵnextContext(); return ctx_r81.handleDropdownOpenChange(false); })("popupAnimationDone", function AdaptAdvancedFilterComponent_div_3_Template_div_popupAnimationDone_0_listener($event) { i0.ɵɵrestoreView(_r79); const ctx_r82 = i0.ɵɵnextContext(); return ctx_r82.onPopupAnimationDone($event); });
    i0.ɵɵtext(2, "\n    ");
    i0.ɵɵelementStart(3, "button", 8, 9);
    i0.ɵɵlistener("click", function AdaptAdvancedFilterComponent_div_3_Template_button_click_3_listener($event) { i0.ɵɵrestoreView(_r79); const _r6 = i0.ɵɵreference(1); return _r6.toggle($event); });
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵtemplate(6, AdaptAdvancedFilterComponent_div_3_ng_container_6_Template, 2, 1, "ng-container", 10);
    i0.ɵɵtext(7, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n    ");
    i0.ɵɵelementStart(9, "div", 11, 12);
    i0.ɵɵtext(11, "\n\n      ");
    i0.ɵɵtemplate(12, AdaptAdvancedFilterComponent_div_3_div_12_Template, 6, 2, "div", 13);
    i0.ɵɵtext(13, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r9 = i0.ɵɵreference(10);
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("appendToBody", ctx_r1.appendDropdownToBody)("holdFocusInMenu", ctx_r1.appendDropdownToBody)("restoreFocusAfterClose", true)("recalculatePositionOnElementResize", _r9)("autoClose", false)("customClass", ctx_r1.dropdownCustomClass)("closeOnEscape", true)("placement", ctx_r1.dropdownPlacement)("mobileView", ctx_r1.dropdownMobileView);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("disabled", ctx_r1.anchorDisabled);
    i0.ɵɵattribute("data-testid", ctx_r1.testID + "_menu");
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r1.showAnchorButtonLabel);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngStyle", ctx_r1.menuElStyle)("ngClass", i0.ɵɵpureFunction4(16, _c13, !ctx_r1.isMobile && !ctx_r1.isTablet, ctx_r1.isMobile || ctx_r1.isTablet, ctx_r1.isTablet, ctx_r1.isEntirelyScrollable));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r1.dropdownMenuContentVisible);
} }
function AdaptAdvancedFilterComponent_div_5_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r86 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r86.dropdownAnchorLabel);
} }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 28);
    i0.ɵɵtext(1, "\n                ");
    i0.ɵɵelement(2, "adapt-custom-actions", 29);
    i0.ɵɵtext(3, "\n              ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r90 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("alignedTo", ctx_r90.customActionsAlignedTo)("adaptRadarDisableEventSending", true)("testID", ctx_r90.testID)("actions", ctx_r90.currentFilterActions);
} }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_ng_container_16_ng_template_4_Template(rf, ctx) { }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_ng_container_16_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n                  ");
    i0.ɵɵelementStart(2, "div", 91);
    i0.ɵɵtext(3, "\n                    ");
    i0.ɵɵtemplate(4, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_ng_container_16_ng_template_4_Template, 0, 0, "ng-template", 25);
    i0.ɵɵtext(5, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n                ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    i0.ɵɵnextContext(4);
    const _r4 = i0.ɵɵreference(11);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngTemplateOutlet", _r4);
} }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_8_li_6_p_16_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 95);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r105 = i0.ɵɵnextContext(8);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                                  ", ctx_r105.texts.duplicateSavedFilterNameError, "\n                                ");
} }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_8_li_6_Template(rf, ctx) { if (rf & 1) {
    const _r107 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li");
    i0.ɵɵtext(1, "\n                              ");
    i0.ɵɵelementStart(2, "div", 93);
    i0.ɵɵtext(3, "\n                                ");
    i0.ɵɵelementStart(4, "div", 40);
    i0.ɵɵtext(5, "\n                                  ");
    i0.ɵɵelementStart(6, "adapt-rx-textfield", 41, 42);
    i0.ɵɵlistener("ngModelChange", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_8_li_6_Template_adapt_rx_textfield_ngModelChange_6_listener($event) { i0.ɵɵrestoreView(_r107); const ctx_r106 = i0.ɵɵnextContext(7); return ctx_r106.creatingNewFilterPresetName = $event; })("keydown", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_8_li_6_Template_adapt_rx_textfield_keydown_6_listener($event) { i0.ɵɵrestoreView(_r107); const ctx_r108 = i0.ɵɵnextContext(7); return ctx_r108.onNewFilterNameEditorKeyDown($event); })("onFocus", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_8_li_6_Template_adapt_rx_textfield_onFocus_6_listener() { i0.ɵɵrestoreView(_r107); const ctx_r109 = i0.ɵɵnextContext(7); return ctx_r109.onNewFilterNameEditorFocus(); })("onBlur", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_8_li_6_Template_adapt_rx_textfield_onBlur_6_listener() { i0.ɵɵrestoreView(_r107); const ctx_r110 = i0.ɵɵnextContext(7); return ctx_r110.onNewFilterNameEditorBlur(); });
    i0.ɵɵtext(8, "\n                                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n\n                                  ");
    i0.ɵɵelementStart(10, "div", 43);
    i0.ɵɵtext(11, "\n                                    ");
    i0.ɵɵelement(12, "adapt-custom-actions", 44);
    i0.ɵɵtext(13, "\n                                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n                                ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n                                ");
    i0.ɵɵtemplate(16, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_8_li_6_p_16_Template, 2, 1, "p", 94);
    i0.ɵɵtext(17, "\n                              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, "\n                            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r102 = i0.ɵɵnextContext(7);
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("ngModel", ctx_r102.creatingNewFilterPresetName)("showInvalidStateIcon", false)("testID", ctx_r102.testID + "_filter-name")("autofocus", true)("placeholder", ctx_r102.texts.filterNameInputPlaceholder);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(12, _c11, ctx_r102.isNewFilterNameEditorFocus));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("alignedTo", ctx_r102.customActionsAlignedTo)("adaptRadarDisableEventSending", true)("testID", ctx_r102.testID)("actions", ctx_r102.creatingNewFilterActions);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r102.hasDuplicateNameInCreating());
} }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_8_li_8_label_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "label");
    i0.ɵɵtext(1, "\n                                  ");
    i0.ɵɵelementStart(2, "span", 56);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n                                ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r114 = i0.ɵɵnextContext(8);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r114.texts.defaultSavedFilterLabel);
} }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_8_li_8_button_9_Template(rf, ctx) { if (rf & 1) {
    const _r118 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 57);
    i0.ɵɵlistener("click", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_8_li_8_button_9_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r118); const savedFilter_r111 = i0.ɵɵnextContext().$implicit; const ctx_r116 = i0.ɵɵnextContext(7); return ctx_r116.markDefaultSavedFilter(savedFilter_r111, $event); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r112 = i0.ɵɵnextContext().index;
    const ctx_r115 = i0.ɵɵnextContext(7);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
    i0.ɵɵattribute("data-testid", ctx_r115.testID + "_mark_default_" + i_r112);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                                  ", ctx_r115.texts.markDefaultSavedFilterLabel, "\n                                ");
} }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_8_li_8_Template(rf, ctx) { if (rf & 1) {
    const _r121 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 47, 48);
    i0.ɵɵtext(2, "\n                              ");
    i0.ɵɵelementStart(3, "adapt-rx-radiobutton", 49);
    i0.ɵɵlistener("checkedChange", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_8_li_8_Template_adapt_rx_radiobutton_checkedChange_3_listener() { const restoredCtx = i0.ɵɵrestoreView(_r121); const savedFilter_r111 = restoredCtx.$implicit; const ctx_r120 = i0.ɵɵnextContext(7); return ctx_r120.onSelectActiveSavedFilter(savedFilter_r111); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n\n                              ");
    i0.ɵɵelementStart(5, "div", 50);
    i0.ɵɵtext(6, "\n                                ");
    i0.ɵɵtemplate(7, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_8_li_8_label_7_Template, 5, 1, "label", 10);
    i0.ɵɵtext(8, "\n                                ");
    i0.ɵɵtemplate(9, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_8_li_8_button_9_Template, 2, 3, "button", 51);
    i0.ɵɵtext(10, "\n                                ");
    i0.ɵɵelementStart(11, "button", 52);
    i0.ɵɵlistener("click", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_8_li_8_Template_button_click_11_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r121); const savedFilter_r111 = restoredCtx.$implicit; const _r113 = i0.ɵɵreference(1); const ctx_r122 = i0.ɵɵnextContext(7); return ctx_r122.onEditSavedFilterClick(savedFilter_r111, _r113, $event); });
    i0.ɵɵtext(12, "\n                                ");
    i0.ɵɵelementStart(13, "span", 53);
    i0.ɵɵtext(14, "\n                                  ");
    i0.ɵɵelementStart(15, "span", 54);
    i0.ɵɵtext(16);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(17, "\n                                ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, "\n                                ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(19, "\n\n                                ");
    i0.ɵɵelementStart(20, "button", 52);
    i0.ɵɵlistener("click", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_8_li_8_Template_button_click_20_listener() { const restoredCtx = i0.ɵɵrestoreView(_r121); const savedFilter_r111 = restoredCtx.$implicit; const ctx_r123 = i0.ɵɵnextContext(7); return ctx_r123.onDeleteSavedFilterClick(savedFilter_r111); });
    i0.ɵɵtext(21, "\n                                  ");
    i0.ɵɵelementStart(22, "span", 55);
    i0.ɵɵelementStart(23, "span", 54);
    i0.ɵɵtext(24);
    i0.ɵɵelementEnd();
    i0.ɵɵelementEnd();
    i0.ɵɵtext(25, "\n                                ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(26, "\n                              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(27, "\n                            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const savedFilter_r111 = ctx.$implicit;
    const i_r112 = ctx.index;
    const ctx_r103 = i0.ɵɵnextContext(7);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("label", savedFilter_r111.name)("value", savedFilter_r111)("checked", ctx_r103.isFilterActive(savedFilter_r111));
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r103.enableDefaultSavedFilter && savedFilter_r111.id === ctx_r103.defaultSavedFilterId);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r103.enableDefaultSavedFilter && savedFilter_r111.id !== ctx_r103.defaultSavedFilterId);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
    i0.ɵɵattribute("data-testid", ctx_r103.testID + "_edit_" + i_r112);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r103.texts.editLabel);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
    i0.ɵɵattribute("data-testid", ctx_r103.testID + "_save_" + i_r112);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r103.texts.removeLabel);
} }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n                          ");
    i0.ɵɵelementStart(1, "h4", 36);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n                          ");
    i0.ɵɵelementStart(4, "ul", 37);
    i0.ɵɵtext(5, "\n                            ");
    i0.ɵɵtemplate(6, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_8_li_6_Template, 19, 14, "li", 10);
    i0.ɵɵtext(7, "\n                            ");
    i0.ɵɵtemplate(8, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_8_li_8_Template, 28, 12, "li", 38);
    i0.ɵɵtext(9, "\n                          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n                        ");
} if (rf & 2) {
    const ctx_r99 = i0.ɵɵnextContext(6);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r99.texts.createdByMeLabel);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r99.canShowCreatingNewFilterPreset);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r99.getSavedFiltersByCurrentUser())("ngForTrackBy", ctx_r99.trackByForSavedFilterFn);
} }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_10_li_6_Template(rf, ctx) { if (rf & 1) {
    const _r128 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li");
    i0.ɵɵtext(1, "\n                              ");
    i0.ɵɵelementStart(2, "adapt-rx-radiobutton", 49);
    i0.ɵɵlistener("checkedChange", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_10_li_6_Template_adapt_rx_radiobutton_checkedChange_2_listener() { const restoredCtx = i0.ɵɵrestoreView(_r128); const savedFilter_r125 = restoredCtx.$implicit; const ctx_r127 = i0.ɵɵnextContext(7); return ctx_r127.onSelectActiveSavedFilter(savedFilter_r125); });
    i0.ɵɵtext(3, "\n                              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n                            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const savedFilter_r125 = ctx.$implicit;
    const i_r126 = ctx.index;
    const ctx_r124 = i0.ɵɵnextContext(7);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("label", savedFilter_r125.name)("value", savedFilter_r125)("checked", ctx_r124.isFilterActive(savedFilter_r125));
    i0.ɵɵattribute("data-testid", ctx_r124.testID + "_saved_" + i_r126);
} }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n                          ");
    i0.ɵɵelementStart(1, "h4", 36);
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n                          ");
    i0.ɵɵelementStart(4, "ul", 37);
    i0.ɵɵtext(5, "\n                            ");
    i0.ɵɵtemplate(6, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_10_li_6_Template, 5, 5, "li", 58);
    i0.ɵɵtext(7, "\n                          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n                        ");
} if (rf & 2) {
    const ctx_r100 = i0.ɵɵnextContext(6);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r100.texts.createdByOthersLabel);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngForOf", ctx_r100.getSavedFiltersByOtherUsers())("ngForTrackBy", ctx_r100.trackByForSavedFilterFn);
} }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_adapt_empty_state_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-empty-state", 59);
} if (rf & 2) {
    const ctx_r101 = i0.ɵɵnextContext(6);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("type", "filter")("label", ctx_r101.texts.noFiltersSaved);
    i0.ɵɵattribute("data-testid", ctx_r101.testID + "_empty");
} }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n                  ");
    i0.ɵɵelementStart(2, "div", 91);
    i0.ɵɵtext(3, "\n                    ");
    i0.ɵɵelementStart(4, "div", 32);
    i0.ɵɵtext(5, "\n                      ");
    i0.ɵɵelementStart(6, "div", 33);
    i0.ɵɵtext(7, "\n                        ");
    i0.ɵɵtemplate(8, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_8_Template, 11, 4, "ng-template", 34);
    i0.ɵɵtext(9, "\n\n                        ");
    i0.ɵɵtemplate(10, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_ng_template_10_Template, 9, 3, "ng-template", 34);
    i0.ɵɵtext(11, "\n\n                        ");
    i0.ɵɵtemplate(12, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_adapt_empty_state_12_Template, 1, 4, "adapt-empty-state", 35);
    i0.ɵɵtext(13, "\n                      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n                    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(16, "\n                ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r98 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("ngBusy", ctx_r98.busyConfig);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r98.getSavedFiltersByCurrentUser().length || ctx_r98.canShowCreatingNewFilterPreset);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r98.getSavedFiltersByOtherUsers().length);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r98.savedFilters.length);
} }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "adapt-tab-panel", 30, 92);
    i0.ɵɵtext(2, "\n                ");
    i0.ɵɵtemplate(3, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_ng_container_3_Template, 17, 4, "ng-container", 10);
    i0.ɵɵtext(4, "\n              ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r97 = i0.ɵɵreference(1);
    const ctx_r94 = i0.ɵɵnextContext(4);
    i0.ɵɵproperty("adapt-tab-title", ctx_r94.texts.savedFiltersLabel)("badge", ctx_r94.savedFilters.length);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", _r97.isActive);
} }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_div_22_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r131 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 65);
    i0.ɵɵlistener("click", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_div_22_button_4_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r131); i0.ɵɵnextContext(4); const _r84 = i0.ɵɵreference(1); return _r84.close(); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r129 = i0.ɵɵnextContext(5);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
    i0.ɵɵattribute("data-testid", ctx_r129.testID + "_footer_cancel");
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                  ", ctx_r129.texts.cancelLabel, "\n                ");
} }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_div_22_Template(rf, ctx) { if (rf & 1) {
    const _r133 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 60);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵelementStart(2, "div");
    i0.ɵɵtext(3, "\n                ");
    i0.ɵɵtemplate(4, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_div_22_button_4_Template, 2, 3, "button", 62);
    i0.ɵɵtext(5, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n              ");
    i0.ɵɵelementStart(7, "div");
    i0.ɵɵtext(8, "\n                ");
    i0.ɵɵelementStart(9, "button", 63);
    i0.ɵɵlistener("click", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_div_22_Template_button_click_9_listener($event) { i0.ɵɵrestoreView(_r133); const ctx_r132 = i0.ɵɵnextContext(4); return ctx_r132.removeAllSelectedFilters($event); });
    i0.ɵɵtext(10);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n                ");
    i0.ɵɵelementStart(12, "button", 64);
    i0.ɵɵlistener("click", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_div_22_Template_button_click_12_listener() { i0.ɵɵrestoreView(_r133); const ctx_r134 = i0.ɵɵnextContext(4); return ctx_r134.applySelectedFilters(); });
    i0.ɵɵtext(13);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r95 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", !ctx_r95.isMobile);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("disabled", ctx_r95.isClearSelectedFiltersButtonDisabled());
    i0.ɵɵattribute("data-testid", ctx_r95.testID + "_footer_remove");
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                  ", ctx_r95.texts.removeAllLabel, "\n                ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("disabled", ctx_r95.isApplySelectedFiltersButtonDisabled());
    i0.ɵɵattribute("data-testid", ctx_r95.testID + "_footer_apply");
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                  ", ctx_r95.texts.applyFiltersLabel, "\n                ");
} }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r136 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 16);
    i0.ɵɵtext(1, "\n\n            ");
    i0.ɵɵelementStart(2, "div", 17);
    i0.ɵɵtext(3, "\n              ");
    i0.ɵɵtemplate(4, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_div_4_Template, 4, 4, "div", 18);
    i0.ɵɵtext(5, "\n              ");
    i0.ɵɵelementStart(6, "adapt-tag-field", 88, 20);
    i0.ɵɵlistener("ngModelChange", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_Template_adapt_tag_field_ngModelChange_6_listener($event) { i0.ɵɵrestoreView(_r136); const ctx_r135 = i0.ɵɵnextContext(3); return ctx_r135.onActiveFiltersTagFieldModelChange($event); })("removeTag", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_Template_adapt_tag_field_removeTag_6_listener($event) { i0.ɵɵrestoreView(_r136); const ctx_r137 = i0.ɵɵnextContext(3); return ctx_r137.onRemoveCurrentFiltersExpressionFieldTag($event); })("initTagEditing", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_Template_adapt_tag_field_initTagEditing_6_listener($event) { i0.ɵɵrestoreView(_r136); const ctx_r138 = i0.ɵɵnextContext(3); return ctx_r138.onInitExpressionFieldTagEditing($event); });
    i0.ɵɵtext(8, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n\n            ");
    i0.ɵɵelementStart(11, "adapt-tabset", 89);
    i0.ɵɵlistener("tab-active-changed", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_Template_adapt_tabset_tab_active_changed_11_listener($event) { i0.ɵɵrestoreView(_r136); const ctx_r139 = i0.ɵɵnextContext(3); return ctx_r139.onActiveTabChange($event); });
    i0.ɵɵtext(12, "\n              ");
    i0.ɵɵelementStart(13, "adapt-tab-panel", 22, 90);
    i0.ɵɵtext(15, "\n                ");
    i0.ɵɵtemplate(16, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_ng_container_16_Template, 7, 1, "ng-container", 10);
    i0.ɵɵtext(17, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, "\n\n              ");
    i0.ɵɵtemplate(19, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_adapt_tab_panel_19_Template, 5, 3, "adapt-tab-panel", 26);
    i0.ɵɵtext(20, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(21, "\n\n            ");
    i0.ɵɵtemplate(22, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_div_22_Template, 16, 9, "div", 27);
    i0.ɵɵtext(23, "\n\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r91 = i0.ɵɵreference(7);
    const _r92 = i0.ɵɵreference(14);
    const ctx_r88 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(33, _c12, ctx_r88.isTablet));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r88.canShowCreatingNewFilterPreset);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("warningCheck", ctx_r88.tagFieldWarningCheckResolver)("mainErrorText", ctx_r88.texts.filtersExpressionMainErrorText)("warningStateText", ctx_r88.texts.filtersExpressionWarningText)("mainCls", ctx_r88.getFilterExpressionFieldClass("advanced-filter__expression-tag-field", _r91))("popupClass", "advanced-filter__typeahead-window")("label", ctx_r88.getFiltersExpressionFieldLabel())("maxHeight", 68)("testID", ctx_r88.testID + "_tag-field")("name", "expression-bar")("search", ctx_r88.expressionSearch)("ngModel", ctx_r88.getExpressionTagFieldModel())("delimiterSymbol", null)("placeholder", ctx_r88.getExpressionTagFieldPlaceholder())("replaceModelOnWrite", true)("fullWidthEdit", ctx_r88.fullWidthEdit)("disabledInput", ctx_r88.disableExpressionEditing)("suppressManual", ctx_r88.disableExpressionEditing);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("showTabToolbar", ctx_r88.showTabToolbar)("adaptRadarDisableEventSending", true)("type", ctx_r88.isTablet ? "tabs" : "pills")("justify", ctx_r88.isTablet ? "justified" : "")("customCssTabContent", "advanced-filter__tab-content")("customClassTabList", ctx_r88.enableSavedFilters ? "" : "advanced-filter__filters-tab-alone")("tab-active", ctx_r88.tabsetActiveIndex)("testID", ctx_r88.testID)("carouselMode", false);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adapt-tab-title", ctx_r88.enableSavedFilters ? ctx_r88.texts.filtersLabel : ctx_r88.texts.filtersLabelAlone);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", _r92.isActive);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r88.enableSavedFilters);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r88.applyFiltersByUserAction && !ctx_r88.isMobile);
} }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_7_adapt_rx_control_label_17_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-rx-control-label", 80);
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r141 = i0.ɵɵreference(20);
    const ctx_r140 = i0.ɵɵnextContext(3);
    i0.ɵɵclassProp("has-danger", _r141.hasDangerState);
    i0.ɵɵproperty("for", _r141.id)("label", ctx_r140.texts.filterNameLabel)("showRequiredLabel", true);
} }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_7_ng_template_29_Template(rf, ctx) { }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_7_div_32_Template(rf, ctx) { if (rf & 1) {
    const _r146 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 81);
    i0.ɵɵtext(1, "\n                ");
    i0.ɵɵelementStart(2, "div", 83);
    i0.ɵɵtext(3, "\n                  ");
    i0.ɵɵelementStart(4, "button", 84);
    i0.ɵɵlistener("click", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_7_div_32_Template_button_click_4_listener() { i0.ɵɵrestoreView(_r146); const ctx_r145 = i0.ɵɵnextContext(4); return ctx_r145.cancelSavedFilterEditing(); });
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n                  ");
    i0.ɵɵelementStart(7, "button", 64);
    i0.ɵɵlistener("click", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_7_div_32_Template_button_click_7_listener() { i0.ɵɵrestoreView(_r146); const ctx_r147 = i0.ɵɵnextContext(4); return ctx_r147.saveSavedFilterEditing(); });
    i0.ɵɵtext(8);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n                ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n              ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r144 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r144.texts.cancelLabel);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("disabled", !ctx_r144.hasValidCurrentFilterTags());
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r144.texts.saveButtonLabel);
} }
function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_7_Template(rf, ctx) { if (rf & 1) {
    const _r149 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementStart(2, "div", 66);
    i0.ɵɵtext(3, "\n              ");
    i0.ɵɵelementStart(4, "button", 67);
    i0.ɵɵlistener("click", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_7_Template_button_click_4_listener() { i0.ɵɵrestoreView(_r149); const ctx_r148 = i0.ɵɵnextContext(3); return ctx_r148.cancelSavedFilterEditing(); });
    i0.ɵɵtext(5, "\n                ");
    i0.ɵɵelement(6, "span", 68);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n              ");
    i0.ɵɵelementStart(9, "h3", 69);
    i0.ɵɵtext(10);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n\n            ");
    i0.ɵɵelementStart(13, "div", 70);
    i0.ɵɵtext(14, "\n              ");
    i0.ɵɵelementStart(15, "div", 71);
    i0.ɵɵtext(16, "\n                ");
    i0.ɵɵtemplate(17, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_7_adapt_rx_control_label_17_Template, 1, 5, "adapt-rx-control-label", 72);
    i0.ɵɵtext(18, "\n                ");
    i0.ɵɵelementStart(19, "adapt-rx-textfield", 73, 74);
    i0.ɵɵlistener("ngModelChange", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_7_Template_adapt_rx_textfield_ngModelChange_19_listener($event) { i0.ɵɵrestoreView(_r149); const ctx_r150 = i0.ɵɵnextContext(3); return ctx_r150.currentEditingSavedFilter.filterName = $event; });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(21, "\n                ");
    i0.ɵɵelementStart(22, "adapt-tag-field", 75, 76);
    i0.ɵɵlistener("ngModelChange", function AdaptAdvancedFilterComponent_div_5_ng_template_9_div_7_Template_adapt_tag_field_ngModelChange_22_listener($event) { i0.ɵɵrestoreView(_r149); const ctx_r151 = i0.ɵɵnextContext(3); return ctx_r151.onTagFieldModelChange($event); });
    i0.ɵɵtext(24, "\n                ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(25, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(26, "\n\n              ");
    i0.ɵɵelementStart(27, "div", 96);
    i0.ɵɵtext(28, "\n                ");
    i0.ɵɵtemplate(29, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_7_ng_template_29_Template, 0, 0, "ng-template", 25);
    i0.ɵɵtext(30, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(31, "\n\n              ");
    i0.ɵɵtemplate(32, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_7_div_32_Template, 11, 5, "div", 79);
    i0.ɵɵtext(33, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(34, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r141 = i0.ɵɵreference(20);
    const _r142 = i0.ɵɵreference(23);
    const ctx_r89 = i0.ɵɵnextContext(3);
    const _r4 = i0.ɵɵreference(11);
    i0.ɵɵproperty("@editFilterContainerOverlayAnimation", undefined);
    i0.ɵɵadvance(4);
    i0.ɵɵstyleProp("height", ctx_r89.isMobile || ctx_r89.isTablet ? 0 : "auto");
    i0.ɵɵclassProp("invisible", ctx_r89.isMobile || ctx_r89.isTablet);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
    i0.ɵɵattribute("data-testid", ctx_r89.testID + "_cancel");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("\n                ", ctx_r89.texts.backLabel, "\n              ");
    i0.ɵɵadvance(2);
    i0.ɵɵstyleProp("height", ctx_r89.isMobile || ctx_r89.isTablet ? 0 : "auto");
    i0.ɵɵclassProp("invisible", ctx_r89.isMobile || ctx_r89.isTablet);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate2("\n                ", ctx_r89.texts.editLabel, ": ", ctx_r89.currentEditingSavedFilter.originalSavedFilter.name, "\n              ");
    i0.ɵɵadvance(7);
    i0.ɵɵproperty("ngIf", _r141);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("ngModel", ctx_r89.currentEditingSavedFilter.filterName)("showInvalidStateIcon", false)("testID", ctx_r89.testID + "_filter-name")("placeholder", ctx_r89.texts.filterNameInputPlaceholder)("requiredLabel", ctx_r89.texts.requiredLabel)("warningMessage", ctx_r89.hasDuplicateNameInEditing() ? ctx_r89.texts.duplicateSavedFilterNameError : null)("adaptAdvancedFilterNameErrorText", ctx_r89.texts.filterNameErrorMessage);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("warningCheck", ctx_r89.tagFieldWarningCheckResolver)("mainErrorText", ctx_r89.texts.filtersExpressionMainErrorText)("warningStateText", ctx_r89.texts.filtersExpressionWarningText)("mainCls", ctx_r89.getFilterExpressionFieldClass("advanced-filter__expression-tag-field advanced-filter__editing-tag-field", _r142))("label", ctx_r89.getFiltersExpressionFieldLabel())("maxHeight", 68)("name", "expression-bar")("search", ctx_r89.expressionSearch)("ngModel", ctx_r89.currentFiltersExpressionsTags)("delimiterSymbol", null)("required", true)("fullWidthEdit", ctx_r89.fullWidthEdit)("placeholder", ctx_r89.texts.expressionFilterPlaceholder)("replaceModelOnWrite", true)("requiredLabel", ctx_r89.texts.requiredLabel);
    i0.ɵɵadvance(7);
    i0.ɵɵproperty("ngTemplateOutlet", _r4);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", !ctx_r89.isMobile);
} }
const _c14 = function (a0, a1, a2) { return { "advanced-filter__popover-container_non-mobile": a0, "advanced-filter__popover-container_mobile": a1, "border-top": a2 }; };
function AdaptAdvancedFilterComponent_div_5_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵelementStart(1, "div", 87);
    i0.ɵɵtext(2, "\n\n        ");
    i0.ɵɵelementStart(3, "div", 14);
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵtemplate(5, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_5_Template, 24, 35, "div", 15);
    i0.ɵɵtext(6, "\n\n          ");
    i0.ɵɵtemplate(7, AdaptAdvancedFilterComponent_div_5_ng_template_9_div_7_Template, 35, 41, "div", 10);
    i0.ɵɵtext(8, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n    ");
} if (rf & 2) {
    const ctx_r87 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(3, _c14, !ctx_r87.isMobile && !ctx_r87.isTablet, ctx_r87.isMobile || ctx_r87.isTablet, ctx_r87.isTablet));
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", !ctx_r87.currentEditingSavedFilter);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r87.currentEditingSavedFilter);
} }
function AdaptAdvancedFilterComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r153 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 85, 7);
    i0.ɵɵlistener("anchorPositionChange", function AdaptAdvancedFilterComponent_div_5_Template_div_anchorPositionChange_0_listener() { i0.ɵɵrestoreView(_r153); const ctx_r152 = i0.ɵɵnextContext(); return ctx_r152.onAnchorPositionChange(); })("onOpen", function AdaptAdvancedFilterComponent_div_5_Template_div_onOpen_0_listener() { i0.ɵɵrestoreView(_r153); const ctx_r154 = i0.ɵɵnextContext(); return ctx_r154.handleDropdownOpenChange(true); })("onClose", function AdaptAdvancedFilterComponent_div_5_Template_div_onClose_0_listener() { i0.ɵɵrestoreView(_r153); const ctx_r155 = i0.ɵɵnextContext(); return ctx_r155.handleDropdownOpenChange(false); })("popupAnimationDone", function AdaptAdvancedFilterComponent_div_5_Template_div_popupAnimationDone_0_listener($event) { i0.ɵɵrestoreView(_r153); const ctx_r156 = i0.ɵɵnextContext(); return ctx_r156.onPopupAnimationDone($event); });
    i0.ɵɵtext(2, "\n    ");
    i0.ɵɵelementStart(3, "button", 8, 9);
    i0.ɵɵlistener("click", function AdaptAdvancedFilterComponent_div_5_Template_button_click_3_listener($event) { i0.ɵɵrestoreView(_r153); const _r84 = i0.ɵɵreference(1); return _r84.toggle($event); });
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵtemplate(6, AdaptAdvancedFilterComponent_div_5_ng_container_6_Template, 2, 1, "ng-container", 10);
    i0.ɵɵtext(7, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n    ");
    i0.ɵɵtemplate(9, AdaptAdvancedFilterComponent_div_5_ng_template_9_Template, 11, 7, "ng-template", 86);
    i0.ɵɵtext(10, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("appendToBody", ctx_r2.appendDropdownToBody)("holdFocusInMenu", ctx_r2.appendDropdownToBody)("restoreFocusAfterClose", true)("autoClose", false)("customClass", ctx_r2.dropdownCustomClass)("closeOnEscape", true)("placement", ctx_r2.dropdownPlacement)("mobileView", ctx_r2.dropdownMobileView);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("disabled", ctx_r2.anchorDisabled);
    i0.ɵɵattribute("data-testid", ctx_r2.testID + "_menu");
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r2.showAnchorButtonLabel);
} }
function AdaptAdvancedFilterComponent_adapt_filter_tags_7_Template(rf, ctx) { if (rf & 1) {
    const _r160 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-filter-tags", 97, 98);
    i0.ɵɵlistener("remove", function AdaptAdvancedFilterComponent_adapt_filter_tags_7_Template_adapt_filter_tags_remove_0_listener($event) { i0.ɵɵrestoreView(_r160); const ctx_r159 = i0.ɵɵnextContext(); return ctx_r159.onRemoveFromOutsideTag($event); })("visibilityChanged", function AdaptAdvancedFilterComponent_adapt_filter_tags_7_Template_adapt_filter_tags_visibilityChanged_0_listener($event) { i0.ɵɵrestoreView(_r160); const ctx_r161 = i0.ɵɵnextContext(); return ctx_r161.onVisibilityChanged($event); });
    i0.ɵɵtext(2, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("advanced-filter__outside-tags_hidden", ctx_r3.isFilterOutsideTagsHidden);
    i0.ɵɵproperty("tags", ctx_r3.selectedFiltersTags)("texts", ctx_r3.texts);
} }
function AdaptAdvancedFilterComponent_ng_template_10_ng_template_1_Template(rf, ctx) { }
const _c15 = function (a0) { return { "adapt-filter-controls--last": a0 }; };
function AdaptAdvancedFilterComponent_ng_template_10_adapt_filter_controls_5_Template(rf, ctx) { if (rf & 1) {
    const _r169 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-filter-controls", 102, 103);
    i0.ɵɵlistener("filterValueChange", function AdaptAdvancedFilterComponent_ng_template_10_adapt_filter_controls_5_Template_adapt_filter_controls_filterValueChange_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r169); const filterOptionData_r164 = restoredCtx.$implicit; const ctx_r168 = i0.ɵɵnextContext(2); return ctx_r168.onFilterOptionModelChange($event, filterOptionData_r164.option); });
    i0.ɵɵtext(2, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const filterOptionData_r164 = ctx.$implicit;
    const isLast_r165 = ctx.last;
    const i_r166 = ctx.index;
    const ctx_r163 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("filterOption", filterOptionData_r164.option)("filterValue", filterOptionData_r164.tag ? filterOptionData_r164.tag.data.value : null)("validationErrors", filterOptionData_r164.tag ? filterOptionData_r164.tag.data.validationErrors : null)("hasAllInvalidTags", ctx_r163.hasAllInvalidCurrentFilterTags())("texts", ctx_r163.texts)("testID", ctx_r163.testID + "_" + i_r166)("disabledTabResolver", ctx_r163.disabledTabResolver)("disabledInputResolver", ctx_r163.disabledInputResolver)("showSelectedFiltersCount", ctx_r163.showSelectedFiltersCount)("selectedFiltersIndicationStyle", ctx_r163.selectedFiltersIndicationStyle)("ngClass", i0.ɵɵpureFunction1(12, _c15, isLast_r165));
    i0.ɵɵattribute("data-testid", filterOptionData_r164.option.id);
} }
function AdaptAdvancedFilterComponent_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵtemplate(1, AdaptAdvancedFilterComponent_ng_template_10_ng_template_1_Template, 0, 0, "ng-template", 99);
    i0.ɵɵtext(2, "\n\n  ");
    i0.ɵɵelementStart(3, "adapt-accordion", 100);
    i0.ɵɵtext(4, "\n    ");
    i0.ɵɵtemplate(5, AdaptAdvancedFilterComponent_ng_template_10_adapt_filter_controls_5_Template, 3, 14, "adapt-filter-controls", 101);
    i0.ɵɵtext(6, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n");
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r5.filterOptionsCustomAreaTemplate)("ngTemplateOutlet", ctx_r5.filterOptionsCustomAreaTemplate);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("bordered", false);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r5.getVisibleFilterOptionsData())("ngForTrackBy", ctx_r5.trackByForFilterOptionDataFn);
} }
// TODO: instead of scope and this functions use AnimationBuilder for savedFilterListItem element
export function getEditSavedFilterListItemTransition(params) {
    return params.scope.editFilterContainerAnimationOptions &&
        params.scope.editFilterContainerAnimationOptions.params.lastEditingSavedFilter.originalSavedFilter.id
            === params.savedFilter.id;
}
export function getEditSavedFilterListItemTransitionFromVoidStateFn(fromState, toState, element, params) {
    return fromState === 'void' && getEditSavedFilterListItemTransition(params);
}
export function getEditSavedFilterListItemTransitionFromAnyStateFn(fromState, toState, element, params) {
    return fromState === '*' && getEditSavedFilterListItemTransition(params);
}
export class AdaptAdvancedFilterNameValidator {
    validate(control) {
        return !control.value ? {
            prohibitedWordError: {
                message: this.adaptAdvancedFilterNameErrorText,
                showOnTouched: true
            }
        } : null;
    }
}
AdaptAdvancedFilterNameValidator.ɵfac = function AdaptAdvancedFilterNameValidator_Factory(t) { return new (t || AdaptAdvancedFilterNameValidator)(); };
AdaptAdvancedFilterNameValidator.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: AdaptAdvancedFilterNameValidator, selectors: [["", "adaptAdvancedFilterName", "", "ngModel", ""], ["", "adaptAdvancedFilterName", "", "formControl", ""]], inputs: { adaptAdvancedFilterNameErrorText: "adaptAdvancedFilterNameErrorText" }, features: [i0.ɵɵProvidersFeature([
            { provide: NG_VALIDATORS, useExisting: forwardRef(() => AdaptAdvancedFilterNameValidator), multi: true }
        ])] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptAdvancedFilterNameValidator, [{
        type: Directive,
        args: [{
                selector: '[adaptAdvancedFilterName][ngModel],[adaptAdvancedFilterName][formControl]',
                providers: [
                    { provide: NG_VALIDATORS, useExisting: forwardRef(() => AdaptAdvancedFilterNameValidator), multi: true }
                ]
            }]
    }], null, { adaptAdvancedFilterNameErrorText: [{
            type: Input
        }] }); })();
export class AdaptAdvancedFilterComponent extends BaseFilterDirective {
    constructor(_ngZone, _eventManager, _dataTypesConfigsService, _changeDetector, _deviceDetection, _translateService, _resizeService, overlayService, _adaptRadarService, _elem) {
        super(_translateService, _adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptAdvancedFilter);
        this._ngZone = _ngZone;
        this._eventManager = _eventManager;
        this._dataTypesConfigsService = _dataTypesConfigsService;
        this._changeDetector = _changeDetector;
        this._deviceDetection = _deviceDetection;
        this._translateService = _translateService;
        this._resizeService = _resizeService;
        this.overlayService = overlayService;
        this.filterOptions = [];
        this.savedFilters = [];
        this.enableDefaultSavedFilter = false; // need to prevent breaking existing consumer components
        this.busyConfig = this.getBusyConfig();
        this.disableExpressionEditing = false;
        this.showAnchorButtonLabel = true;
        this.enableSavedFilters = true;
        /**
         * Toggle tabs visibility
         *
         * @since v11.11.0
         */
        this.showTabToolbar = true;
        /**
         * @since v10.6.0
         */
        this.showSelectedFiltersCount = true;
        /**
         * Selected filter indication style
         *
         * @since v12.13.0
         * @docs-default 'text'
         */
        this.selectedFiltersIndicationStyle = 'text';
        /**
         * @since v10.14.0
         */
        this.showTags = false;
        /**
         * This input controls if filter button (anchor) should be disabled
         * @since v10.8.0
         */
        this.anchorDisabled = false;
        /**
         * This input controls using full container width for editing tags
         * @since v11.11.0
         */
        this.fullWidthEdit = true;
        /**
         * Workaround: is used for animation. Reassign this input if you have localization
         */
        this.translateFilterEditingTitleXPixels = 138;
        this.selectedFiltersChange = new EventEmitter();
        this.filterSelectionChange = new EventEmitter();
        this.deleteSavedFilter = new EventEmitter();
        this.createNewFilter = new EventEmitter();
        this.updateSavedFilter = new EventEmitter();
        this.beforeActiveSavedFilterChange = new EventEmitter();
        this.activeSavedFilterChange = new EventEmitter();
        this.removeTag = new EventEmitter();
        this.filtersCleared = new EventEmitter();
        this.saveNewFilterClick = new EventEmitter();
        this.filtersSelectionCanceled = new EventEmitter();
        this.editSavedFilterClick = new EventEmitter();
        this.markDefaultSavedFilterClick = new EventEmitter();
        this.editingSavedFilterCanceled = new EventEmitter();
        /**
         * It is emitted when the component changes the model for the filterExpressionTagField.
         * Is needed for advanced component usage.
         */
        this.filterExpressionTagsChanged = new EventEmitter();
        this.filtersExpressionsTags = [];
        this.currentEditingSavedFilter = null;
        this.isCreatingNewFilterPreset = false;
        this.creatingNewFilterPresetName = '';
        this.tabsetActiveIndex = 0;
        this.editFilterContainerAnimationOptions = null;
        this.customActionsAlignedTo = AdaptCustomActionsAlignEnum.Right;
        this.isNewFilterNameEditorFocus = false;
        this.isMobile = false;
        this.isTablet = false;
        this.isFilterOutsideTagsHidden = false;
        this.dropdownAnchorWithCounterLabel = '';
        this.dropdownMenuContentVisible = false;
        this.isEntirelyScrollable = false;
        this._isLoading = false;
        this._isInitialized = false;
        this._selectedFilters = [];
        this._applyFiltersByUserAction = false;
        this._notAppliedSelectedFilters = [];
        this._entirelyScrollHeight = 300; // 18.75 rem * 16px
        this.appendDropdownToBody = false;
        this.expressionSearch = this.expressionSearch.bind(this);
        this.tagFieldWarningCheckResolver = this.tagFieldWarningCheckResolver.bind(this);
    }
    get activeSavedFilter() {
        return this._activeSavedFilter;
    }
    set activeSavedFilter(activeSavedFilterArgs) {
        if (!this._isInitialized) {
            this._preservedActiveSavedFilter = activeSavedFilterArgs;
            return;
        }
        if (activeSavedFilterArgs) {
            if (this.applyFiltersByUserAction) {
                this._notAppliedSelectedFilters = activeSavedFilterArgs.filters;
            }
            else {
                this.selectedFilters = activeSavedFilterArgs.filters;
            }
        }
        this._activeSavedFilter = activeSavedFilterArgs;
    }
    set applyFiltersByUserAction(appliedFilterByUserAction) {
        this._applyFiltersByUserAction = Boolean(appliedFilterByUserAction);
        if (this._activeSavedFilter && this._applyFiltersByUserAction) {
            if (!isEqual(this._activeSavedFilter.filters, this.selectedFilters)) {
                this._selectedFilters = [];
            }
            this._notAppliedSelectedFilters = this._activeSavedFilter.filters;
        }
        else {
            this._notAppliedSelectedFilters = this.selectedFilters;
        }
    }
    get applyFiltersByUserAction() {
        return this._applyFiltersByUserAction;
    }
    set selectedFilters(selectedFilters) {
        if (!this._isInitialized) {
            this._preservedSelectedFilters = selectedFilters;
            return;
        }
        if (isEqual(this._selectedFilters, selectedFilters)) {
            return;
        }
        this._updateSelectedFilters(selectedFilters, false);
        const filtersExpressionsTags = this.convertSelectedFiltersToTags(selectedFilters);
        if (!isEqual(filtersExpressionsTags, this.filtersExpressionsTags)) {
            this.updateFiltersExpressionModel(filtersExpressionsTags, {
                updateAndEmitSelectedFiltersChange: true,
                deselectActiveSavedFilter: ActiveSavedFilterSelectionCause.OnSelectedFiltersSetter,
                clearMetatagInputValue: false,
                updateEditingFilterTags: false,
                applyFiltersByUserAction: this.applyFiltersByUserAction
            });
        }
    }
    get selectedFilters() {
        return this._selectedFilters;
    }
    set isLoading(val) {
        this.setIsLoadingState(val);
    }
    get isLoading() {
        return this._isLoading;
    }
    get currentFiltersExpressionsTags() {
        return this.currentEditingSavedFilter ? this.currentEditingSavedFilter.filtersExpressionsTags :
            this.filtersExpressionsTags;
    }
    get canShowCreatingNewFilterPreset() {
        return this.isCreatingNewFilterPreset && this.filtersExpressionsTags.length > 0;
    }
    get canShowSaveNewFilterButton() {
        return this.enableSavedFilters && !this._activeSavedFilter
            && (this.filterExpressionFormControl ? this.filterExpressionFormControl.valid : true);
    }
    get currentFilterActions() {
        const currentFilterActions = [
            {
                name: this.texts.clearButtonLabel,
                visible: this.filterExpressionTagField && !this._isLoading
                    && (this.filterExpressionTagField.control.value && this.filterExpressionTagField.control.value.length
                        || !!this.filterExpressionTagField.inputValue),
                onClick: this.clear.bind(this)
            }
        ];
        if (this.showTabToolbar) {
            currentFilterActions.push({
                name: this.texts.saveButtonLabel,
                visible: this.canShowSaveNewFilterButton && !this._isLoading
                    && this.filtersExpressionsTags && this.filtersExpressionsTags.length > 0,
                onClick: this.onSaveNewFilterClick.bind(this)
            });
        }
        return currentFilterActions;
    }
    get creatingNewFilterActions() {
        return [
            {
                name: this.texts.cancelLabel,
                visible: this.filterExpressionTagField
                    && (this.filterExpressionTagField.control.value && this.filterExpressionTagField.control.value.length
                        || !!this.filterExpressionTagField.inputValue),
                onClick: this.onCancelCreatingNewFilterPreset.bind(this),
                // add special class for IE to fix issue with incorrect buttons display.
                // the root cause of the problem in styles(width: 0) that for some reason applied after animation finished.
                customClass: this._deviceDetection.isIE() ? 'advanced-filter__creating-new-filter-btn_ie' : ''
            },
            {
                name: this.texts.saveButtonLabel,
                visible: !(this.newFilterNameEditor && this.newFilterNameEditor.hasDangerState) && !!this.getCreatingNewFilterPresetNameTrimmed(),
                onClick: this.onCreateNewFilterPreset.bind(this),
                customClass: this._deviceDetection.isIE() ? 'advanced-filter__creating-new-filter-btn_ie' : ''
            }
        ];
    }
    get dropdownMobileView() {
        return {
            title: this.currentEditingSavedFilter
                ? `${this.texts.editLabel}: ${this.currentEditingSavedFilter.originalSavedFilter.name}`
                : (this.isTablet ? this.texts.initialDropdownAnchorLabel : null),
            cancelCB: this._dropdownCancelCB.bind(this),
            doneCB: this._dropdownDoneCB.bind(this),
            doneBtnTitle: this.currentEditingSavedFilter ? this.texts.saveButtonLabel : null,
            cancelBtnTitle: this.currentEditingSavedFilter ? this.texts.backLabel : null,
            isPicker: this.isTablet,
            fullHeight: true
        };
    }
    get dropdownCustomClass() {
        return 'a-advanced-filter' + (this.currentEditingSavedFilter ? ' a-advanced-filter_edit-mode' : '');
    }
    get dropdownAnchorLabel() {
        return this.showTags && this.isFilterOutsideTagsHidden && this.dropdownAnchorWithCounterLabel
            ? this.dropdownAnchorWithCounterLabel
            : this.texts.initialDropdownAnchorLabel;
    }
    ngOnInit() {
        // need initialization after texts setting
        this.advancedFilterDataTypesConfigs = this._dataTypesConfigsService.getConfigs(this.texts.configsTexts);
        this._isInitialized = true;
        this.isMobile = this._deviceDetection.isMobile();
        this.isTablet = this._deviceDetection.deviceTablet();
        if ((this._preservedSelectedFilters || this._preservedActiveSavedFilter)) {
            if (this._preservedActiveSavedFilter) {
                this.selectedFilters = this._preservedActiveSavedFilter.filters;
                if (this.applyFiltersByUserAction) {
                    this._notAppliedSelectedFilters = this._preservedActiveSavedFilter.filters;
                }
                this._activeSavedFilter = this._preservedActiveSavedFilter;
            }
            else {
                this.selectedFilters = this._preservedSelectedFilters;
                if (this.applyFiltersByUserAction) {
                    this._notAppliedSelectedFilters = this._preservedSelectedFilters;
                }
            }
            this._preservedActiveSavedFilter = null;
            this._preservedSelectedFilters = null;
        }
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        const resize$ = new Subject();
        resize$
            .pipe(takeUntil(this._destroyed$), throttleTime(100, asyncScheduler, { trailing: true }))
            .subscribe(() => {
            this._checkIfFilterTagsLabelVisible();
        });
        this._resizeService.addResizeEventListener(this.filtersDropdownWrapper.nativeElement, resize$.next.bind(resize$));
    }
    ngOnDestroy() {
        var _a;
        super.ngOnDestroy();
        if (this._removeTapEventListener) {
            this._removeTapEventListener();
        }
        if ((_a = this.filtersDropdownWrapper) === null || _a === void 0 ? void 0 : _a.nativeElement) {
            this._resizeService.removeResizeEventListener(this.filtersDropdownWrapper.nativeElement);
        }
    }
    setDefaultTexts(translation) {
        this.defaultTexts.initialDropdownAnchorLabel = translation['adapt.advancedFilter.initialDropdownAnchorLabel'];
        this.defaultTexts.initialDropdownAnchorWithCounterLabel = translation['adapt.advancedFilter.initialDropdownAnchorWithCounterLabel'];
        this.defaultTexts.clearButtonLabel = translation['adapt.common.clear'];
        this.defaultTexts.saveButtonLabel = translation['adapt.common.save'];
        this.defaultTexts.createdByMeLabel = translation['adapt.advancedFilter.createdByMeLabel'];
        this.defaultTexts.createdByOthersLabel = translation['adapt.advancedFilter.createdByOthersLabel'];
        this.defaultTexts.editLabel = translation['adapt.common.edit'];
        this.defaultTexts.backLabel = translation['adapt.common.back'];
        this.defaultTexts.cancelLabel = translation['adapt.common.cancel'];
        this.defaultTexts.expressionFilterPlaceholder = translation['adapt.advancedFilter.expressionFilterPlaceholder'];
        this.defaultTexts.disabledFilterExpressionFieldPlaceholder =
            translation['adapt.advancedFilter.disabledFilterExpressionFieldPlaceholder'];
        this.defaultTexts.filtersLabel = translation['adapt.advancedFilter.filtersLabel'];
        this.defaultTexts.filtersLabelAlone = translation['adapt.advancedFilter.filtersLabelAlone'];
        this.defaultTexts.savedFiltersLabel = translation['adapt.advancedFilter.savedFiltersLabel'];
        this.defaultTexts.noFiltersSaved = translation['adapt.advancedFilter.noFiltersSaved'];
        this.defaultTexts.filterNameInputPlaceholder = translation['adapt.advancedFilter.filterNameInputPlaceholder'];
        this.defaultTexts.filterNameLabel = translation['adapt.advancedFilter.filterNameLabel'];
        this.defaultTexts.stringTypeTagFieldPlaceholder = translation['adapt.advancedFilter.stringTypeTagFieldPlaceholder'];
        this.defaultTexts.counterFromLabel = translation['adapt.advancedFilter.counterFromLabel'];
        this.defaultTexts.counterToLabel = translation['adapt.advancedFilter.counterToLabel'];
        this.defaultTexts.removeLabel = translation['adapt.advancedFilter.removeLabel'];
        // configsTexts
        this.defaultTexts.configsTexts = {
            fromLabel: translation['adapt.advancedFilter.configsTexts.fromLabel'],
            toLabel: translation['adapt.advancedFilter.configsTexts.toLabel'],
            trueLabel: translation['adapt.advancedFilter.configsTexts.trueLabel'],
            falseLabel: translation['adapt.advancedFilter.configsTexts.falseLabel'],
            blankLabel: translation['adapt.advancedFilter.configsTexts.blankLabel'],
            validationErrors: {
                invalidRangeName: translation['adapt.advancedFilter.validationErrors.invalidRangeName'],
                invalidRangeText: translation['adapt.advancedFilter.validationErrors.invalidRangeText'],
                numberTypeTexts: {
                    fromValueMustBeNumber: translation['adapt.advancedFilter.validationErrors.numberTypeTexts.fromValueMustBeNumber'],
                    toValueMustBeNumber: translation['adapt.advancedFilter.validationErrors.numberTypeTexts.toValueMustBeNumber'],
                    invalidBetweenMinAndMax: translation['adapt.advancedFilter.validationErrors.numberTypeTexts.invalidBetweenMinAndMax'],
                    invalidMinValue: translation['adapt.advancedFilter.validationErrors.numberTypeTexts.invalidMinValue'],
                    invalidMaxValue: translation['adapt.advancedFilter.validationErrors.numberTypeTexts.invalidMaxValue']
                }
            }
        };
        this.defaultTexts.filterNameErrorMessage = translation['adapt.advancedFilter.filterNameErrorMessage'];
        this.defaultTexts.filtersExpressionFieldLabel = translation['adapt.advancedFilter.filtersExpressionFieldLabel'];
        this.defaultTexts.filtersExpressionMainErrorText = translation['adapt.advancedFilter.filtersExpressionMainErrorText'];
        this.defaultTexts.filtersExpressionWarningText = translation['adapt.advancedFilter.filtersExpressionWarningText'];
        this.defaultTexts.duplicateSavedFilterNameError = translation['adapt.advancedFilter.duplicateSavedFilterNameError'];
        this.defaultTexts.requiredLabel = translation['adapt.common.required'];
        this.defaultTexts.selectedFiltersExpressionFieldLabel = translation['adapt.advancedFilter.selectedFiltersExpressionFieldLabel'];
        this.defaultTexts.removeAllLabel = translation['adapt.advancedFilter.removeAllLabel'];
        this.defaultTexts.applyFiltersLabel = translation['adapt.advancedFilter.applyFiltersLabel'];
        this.defaultTexts.selectedFiltersCountLabel = translation['adapt.advancedFilter.selectedFiltersCountLabel'];
        this.defaultTexts.hiddenItemsCounterLabel = translation['adapt.advancedFilter.outsideTags.hiddenItemsCounterLabel'];
        this.defaultTexts.markDefaultSavedFilterLabel = translation['adapt.advancedFilter.markDefaultSavedFilterLabel'];
        this.defaultTexts.defaultSavedFilterLabel = translation['adapt.advancedFilter.defaultSavedFilterLabel'];
    }
    onActiveTabChange(event) {
        this.tabsetActiveIndex = event.index;
        if (event.index === 0) {
            this.exitCreatingNewFilterPreset();
        }
    }
    clear(event) {
        this.filtersCleared.emit(event);
        this.updateFiltersExpressionModel([], {
            updateAndEmitSelectedFiltersChange: true,
            deselectActiveSavedFilter: ActiveSavedFilterSelectionCause.OnFiltersClear,
            clearMetatagInputValue: true,
            updateEditingFilterTags: false,
            applyFiltersByUserAction: this.applyFiltersByUserAction
        });
        SafeCdr.detectChanges(this._changeDetector);
    }
    getExpressionTagFieldPlaceholder() {
        return this.disableExpressionEditing ?
            this.texts.disabledFilterExpressionFieldPlaceholder :
            this.texts.expressionFilterPlaceholder;
    }
    // workaround: this method is created due to the getCustomExpressionTagFieldModel method
    getExpressionTagFieldModel(forceSetNewValue = false) {
        const currentFiltersExpressionsTags = this.currentFiltersExpressionsTags;
        if (this.getCustomExpressionTagFieldModel) {
            const newValue = this.getCustomExpressionTagFieldModel(currentFiltersExpressionsTags);
            if (forceSetNewValue) {
                return newValue;
            }
            // Workaround: Don't return new instance to avoid infinite ngModel reassigning
            if (currentFiltersExpressionsTags === newValue) {
                return currentFiltersExpressionsTags;
            }
            const ngModelValue = this.filterExpressionFormControl && this.filterExpressionFormControl.control.value;
            if (isEqual(ngModelValue, newValue)) {
                return ngModelValue;
            }
            return newValue;
        }
        return currentFiltersExpressionsTags;
    }
    onSaveNewFilterClick(event) {
        let defaultPrevented = false;
        this.saveNewFilterClick.emit({
            domEvent: event,
            preventDefault: () => defaultPrevented = true
        });
        if (!defaultPrevented) {
            this.isCreatingNewFilterPreset = true;
            this.tabsetActiveIndex = 1;
        }
    }
    getFilterOptionConfig(filterOption) {
        const defaultConfig = this.advancedFilterDataTypesConfigs[filterOption.dataType];
        return filterOption.customConfig ? Object.assign(Object.assign({}, defaultConfig), filterOption.customConfig) : defaultConfig;
    }
    getVisibleFilterOptionsData() {
        return this.getVisibleFilterOptions().map(option => ({ option, tag: this.getFilterOptionTag(option) }));
    }
    getVisibleFilterOptions() {
        return this.filterOptions.filter(filterOption => !getValueOrFunc(filterOption.isHidden));
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    onFilterOptionModelChange(value, filterOption) {
        const oldFilterValue = this.getFilterOptionModel(filterOption);
        if (isEqual(oldFilterValue, value)) {
            return;
        }
        const filterOptionConfig = this.getFilterOptionConfig(filterOption);
        const filtersExpressionsTags = this.currentFiltersExpressionsTags.slice();
        const tagIndex = this.currentFiltersExpressionsTags.findIndex(tag => this.getTagFilterOptionId(tag) === filterOption.id);
        let updateValue = false;
        let newTag;
        if (filterOptionConfig.needRemoveTagValue(value, filterOption)) {
            if (tagIndex >= 0) {
                filtersExpressionsTags.splice(tagIndex, 1);
                updateValue = true;
            }
        }
        else {
            newTag = this.createTag(filterOption, value);
            if (filtersExpressionsTags[tagIndex]) {
                newTag = filtersExpressionsTags[tagIndex] = Object.assign(Object.assign({}, filtersExpressionsTags[tagIndex]), newTag);
            }
            else {
                filtersExpressionsTags.push(newTag);
            }
            updateValue = true;
        }
        if (updateValue) {
            this.updateFiltersExpressionModel(filtersExpressionsTags, {
                updateAndEmitSelectedFiltersChange: newTag ? isEmpty(newTag.data.validationErrors) : true,
                deselectActiveSavedFilter: this.currentEditingSavedFilter ? null : ActiveSavedFilterSelectionCause.OnFilterChange,
                clearMetatagInputValue: false,
                updateEditingFilterTags: Boolean(this.currentEditingSavedFilter),
                applyFiltersByUserAction: this.applyFiltersByUserAction
            }, filterOption.id, oldFilterValue, newTag ? newTag.data.value : undefined);
            this.updateExpressionFieldControl();
        }
    }
    updateFiltersExpressionModel(filterExpressionTags, options, filterOptionId, 
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    oldFilterValue, 
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    newFilterValue) {
        if (!filterExpressionTags.length) {
            this.onCancelCreatingNewFilterPreset();
        }
        if (options.updateEditingFilterTags) {
            this.currentEditingSavedFilter.filtersExpressionsTags = filterExpressionTags;
        }
        else {
            this.filtersExpressionsTags = filterExpressionTags;
            this.filterExpressionTagsChanged.emit({ filterExpressionTags: filterExpressionTags });
            // Workaround: update manually the tag-field model due to the getExpressionTagFieldModel model
            if (this.filterExpressionTagField) {
                this.filterExpressionTagField.writeValue(this.getExpressionTagFieldModel(true));
            }
            if (options.updateAndEmitSelectedFiltersChange) {
                const newSelectedFilters = this.getSelectedFiltersFromTags(this.filtersExpressionsTags);
                // There may be a case when user select "Cancel" or "RemoveAll" on Filter Dropdown.
                // In such scenario, don't emit 'filterSelectionChange' as the filter value would not be available.
                // And we already have events for these cases i.e. filtersSelectionCanceled and selectedFiltersChange
                if (oldFilterValue || newFilterValue) {
                    const filterSelectionChangeEvent = {
                        filterOptionId: filterOptionId,
                        oldValue: oldFilterValue,
                        newValue: newFilterValue
                    };
                    this.filterSelectionChange.emit(filterSelectionChangeEvent);
                }
                // don't emit if was just removed an invalid tag
                if ((!isEqual(options.applyFiltersByUserAction ? this._notAppliedSelectedFilters : this.selectedFilters, newSelectedFilters))
                    || options.deselectActiveSavedFilter == null) {
                    if (options.applyFiltersByUserAction) {
                        this._notAppliedSelectedFilters = newSelectedFilters;
                    }
                    else {
                        this._updateSelectedFilters(newSelectedFilters, true);
                    }
                }
            }
        }
        if (options.deselectActiveSavedFilter != null) {
            this.setActiveSavedFilter(null, options.deselectActiveSavedFilter);
        }
        if (options.clearMetatagInputValue) {
            this.setFiltersMetatagInputValue('');
        }
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    getFilterOptionModel(filterOption) {
        const tag = this.getFilterOptionTag(filterOption);
        return tag ? tag.data.value : null;
    }
    getFilterOptionTag(filterOption) {
        return this.currentFiltersExpressionsTags.find(tag => this.getTagFilterOptionId(tag) === filterOption.id);
    }
    onRemoveCurrentFiltersExpressionFieldTag(event) {
        this.removeTag.emit({
            tagFieldEvent: event,
            index: event.index,
            tag: event.tag
        });
        if (this.disableExpressionEditing) {
            event.preventDefault();
            this._onRemoveTag(event.tag);
        }
    }
    onActiveFiltersTagFieldModelChange(newTags) {
        if (this.disableExpressionEditing) {
            return;
        }
        this.onTagFieldModelChange(newTags);
    }
    onTagFieldModelChange(newTags) {
        const uniqueTags = [];
        const allExpressionFieldTips = this.getAllExpressionFieldTips();
        let uncompletedExpressionTagText; // should have only 1 assignment
        let needParseSearchTerm = true;
        let isUncompletedExpression = false;
        newTags.forEach(tagOrString => {
            let tag = null;
            if (typeof tagOrString === 'string') {
                const tagStringNormalized = tagOrString.trim().toUpperCase();
                const tagTip = allExpressionFieldTips.find(tip => tip.text.toUpperCase() === tagStringNormalized);
                if (tagTip) {
                    isUncompletedExpression = tagTip.data.isIncompletedExpression;
                    if (isUncompletedExpression) {
                        needParseSearchTerm = false;
                    }
                    else {
                        tag = this.createTagFromExpressionTip(tagTip);
                    }
                }
                if (!tag) {
                    uncompletedExpressionTagText = tagOrString;
                }
            }
            else {
                if (!this.isCustomTag(tagOrString)) {
                    isUncompletedExpression = tagOrString.data.isIncompletedExpression;
                    tag = isUncompletedExpression ? this.createTagFromExpressionTip(tagOrString) : tagOrString;
                }
                else if (this.currentEditingSavedFilter) {
                    tag = tagOrString;
                }
            }
            if (tag) {
                if (isUncompletedExpression) {
                    uncompletedExpressionTagText = tag.text;
                    needParseSearchTerm = false;
                }
                else {
                    this.addNewTagOrUpdateExisting(uniqueTags, tag);
                }
            }
        });
        if (uncompletedExpressionTagText) {
            let tagCreatedFromParsedSearchTerm;
            if (needParseSearchTerm) {
                this.getVisibleFilterOptions().find(filterOption => {
                    const filterOptionConfig = this.getFilterOptionConfig(filterOption);
                    const parsedSearchTermValue = filterOptionConfig.parseTagFieldExpression(filterOption, uncompletedExpressionTagText);
                    if (parsedSearchTermValue) {
                        const validationErrors = filterOptionConfig.validateValue(parsedSearchTermValue.value, filterOption);
                        const isFilterDisabled = isFunction(this.disabledInputResolver)
                            ? this.disabledInputResolver(filterOption, parsedSearchTermValue.value)
                            : false;
                        if (isEmpty(validationErrors) && !isFilterDisabled && !filterOptionConfig.needRemoveTagValue(parsedSearchTermValue.value, filterOption)) {
                            tagCreatedFromParsedSearchTerm = this.createTag(filterOption, parsedSearchTermValue.value, validationErrors);
                        }
                        return true;
                    }
                    return false;
                });
            }
            if (tagCreatedFromParsedSearchTerm) {
                this.addNewTagOrUpdateExisting(uniqueTags, tagCreatedFromParsedSearchTerm);
                uncompletedExpressionTagText = '';
            }
            else {
                const index = allExpressionFieldTips.findIndex(field => uncompletedExpressionTagText.includes(field.text));
                if (index === -1) {
                    uncompletedExpressionTagText = '';
                }
            }
            // Update metatag input value
            this._ngZone.onStable
                .pipe(takeUntil(this._destroyed$), take(1))
                .subscribe(() => {
                this.setFiltersMetatagInputValue(uncompletedExpressionTagText);
                this._ngZone.run(() => {
                    SafeCdr.detectChanges(this._changeDetector);
                });
            });
        }
        this.updateFiltersExpressionModel(uniqueTags, {
            updateAndEmitSelectedFiltersChange: !uncompletedExpressionTagText,
            deselectActiveSavedFilter: this.currentEditingSavedFilter ? null : ActiveSavedFilterSelectionCause.OnFilterChange,
            clearMetatagInputValue: false,
            updateEditingFilterTags: Boolean(this.currentEditingSavedFilter),
            applyFiltersByUserAction: this.applyFiltersByUserAction
        });
    }
    onInitExpressionFieldTagEditing(event) {
        if (this.isCustomTag(event.tag)) {
            event.preventDefault();
        }
    }
    /**
     * Checks whether the 'data' or 'filterOption' properties are empty.
     * Custom tags are used in specific cases when needs to pass additional tags
     * in the expression area
     */
    isCustomTag(tag) {
        return tag.data ? !tag.data.filterOption : true;
    }
    getTagFilterOptionId(tag) {
        return this.isCustomTag(tag) ? null : tag.data.filterOption.id;
    }
    createTagFromExpressionTip(tagTip) {
        return {
            text: tagTip.text,
            data: {
                filterOption: tagTip.data.filterOption,
                value: tagTip.data.value,
                validationErrors: []
            }
        };
    }
    setFiltersMetatagInputValue(inputValue) {
        // TODO: maybe add the Input decorator for the inputValue property in the tag field
        const tagField = this.filterExpressionTagField || this.editingFilterExpressionTagField;
        // Pushing changes when the zone is stable, so they will apply after AdaptMetatag`s clearField method
        this._ngZone.onStable.pipe(takeUntil(this._destroyed$), take(1)).subscribe(() => {
            tagField.inputValue = inputValue;
        });
    }
    expressionSearch(text$) {
        return text$.pipe(debounceTime(200), distinctUntilChanged(), map(searchTerm => {
            const escapedStringForRegExp = `^${escapeRegExp(searchTerm)}`;
            return this.getAllExpressionFieldTips(searchTerm).filter(v => {
                return new RegExp(escapedStringForRegExp, 'gi').test(v.text);
            });
        }));
    }
    getAllExpressionFieldTips(searchTerm) {
        return this.getVisibleFilterOptions()
            .reduce((allTips, filterOption) => {
            const filterOptionConfig = this.getFilterOptionConfig(filterOption);
            const filterOptionTips = filterOptionConfig.getExpressionFieldTips(filterOption, searchTerm);
            const notDisabledFilterOptionTips = isFunction(this.disabledInputResolver)
                ? filterOptionTips.filter(tip => { var _a; return !this.disabledInputResolver(filterOption, (_a = tip === null || tip === void 0 ? void 0 : tip.data) === null || _a === void 0 ? void 0 : _a.value); })
                : filterOptionTips;
            allTips.push(...notDisabledFilterOptionTips);
            return allTips;
        }, []);
    }
    onSelectActiveSavedFilter(savedFilter) {
        this.setActiveSavedFilter(savedFilter, ActiveSavedFilterSelectionCause.SelectedByUser);
    }
    setActiveSavedFilter(savedFilter, selectionCause) {
        const previousActiveSavedFilter = this._activeSavedFilter;
        if (!previousActiveSavedFilter && !savedFilter) {
            return;
        }
        let preventedFiltersUpdating = false;
        let preventedActiveFilterUpdating = false;
        this.beforeActiveSavedFilterChange.emit({
            previousActiveSavedFilter,
            savedFilterToSelect: savedFilter,
            preventFiltersUpdating: () => preventedFiltersUpdating = true,
            preventActiveFilterUpdating: () => preventedActiveFilterUpdating = true,
            selectionCause
        });
        if (!preventedFiltersUpdating && savedFilter) {
            const filtersExpressionsTags = this.convertSelectedFiltersToTags(savedFilter.filters);
            this.updateFiltersExpressionModel(filtersExpressionsTags, {
                updateAndEmitSelectedFiltersChange: true,
                deselectActiveSavedFilter: null,
                clearMetatagInputValue: !this.currentEditingSavedFilter,
                updateEditingFilterTags: false,
                applyFiltersByUserAction: this.applyFiltersByUserAction
            });
        }
        if (!preventedActiveFilterUpdating) {
            this._activeSavedFilter = savedFilter;
            this.activeSavedFilterChange.emit(savedFilter);
        }
    }
    convertSelectedFiltersToTags(filters) {
        return filters.map((filter) => {
            const filterOption = this.filterOptions.find(option => option.id === filter.filterOptionId);
            return this.createTag(filterOption, filter.value);
        });
    }
    getSavedFiltersByCurrentUser() {
        return this.savedFilters.filter(filter => !filter.isCreatedByOtherUsers);
    }
    getSavedFiltersByOtherUsers() {
        return this.savedFilters.filter(filter => filter.isCreatedByOtherUsers);
    }
    markDefaultSavedFilter(savedFilter, mouseEvent) {
        let defaultPrevented = false;
        this.markDefaultSavedFilterClick.emit({
            // TODO check if can be refactored
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            preventDefault: () => defaultPrevented = true,
            domEvent: mouseEvent,
            defaultSavedFilterId: savedFilter.id
        });
    }
    onEditSavedFilterClick(savedFilter, savedFilterListItem, mouseEvent) {
        const initSavedFilterEditing = (getCustomExpressionTagFieldEditModel) => {
            const advancedFilterTags = this.convertSelectedFiltersToTags(savedFilter.filters);
            this.currentEditingSavedFilter = {
                originalSavedFilter: savedFilter,
                filterName: savedFilter.name,
                filtersExpressionsTags: getCustomExpressionTagFieldEditModel ?
                    getCustomExpressionTagFieldEditModel(advancedFilterTags) :
                    advancedFilterTags
            };
            // Use only in non overlay mode
            if (this.adaptDropdownMenu) {
                const menuRect = this.adaptDropdownMenu.nativeElement.getBoundingClientRect();
                const liOptionRect = savedFilterListItem.getBoundingClientRect();
                this.editFilterContainerAnimationOptions = {
                    params: {
                        titleTranslateXPixels: -this.translateFilterEditingTitleXPixels,
                        titleTranslateYPixels: liOptionRect.top - menuRect.top,
                        lastEditingSavedFilter: this.currentEditingSavedFilter
                    },
                    value: ':enter'
                };
            }
        };
        let defaultPrevented = false;
        this.editSavedFilterClick.emit({
            preventDefault: () => defaultPrevented = true,
            domEvent: mouseEvent,
            savedFilter,
            savedFilterListItem,
            initSavedFilterEditing
        });
        if (!defaultPrevented) {
            initSavedFilterEditing();
        }
    }
    getSavedFilterListItemAnimationState(savedFilter, savedFilterListItem) {
        let savedFilterListItemTranslateYPixels;
        if (this.editFilterContainerAnimationOptions &&
            this.editFilterContainerAnimationOptions.params.lastEditingSavedFilter.originalSavedFilter.id ===
                savedFilter.id) {
            savedFilterListItemTranslateYPixels = -this.editFilterContainerAnimationOptions.params.titleTranslateYPixels;
        }
        else {
            const menuRect = this.adaptDropdownMenu.nativeElement.getBoundingClientRect();
            const liOptionRect = savedFilterListItem.getBoundingClientRect();
            savedFilterListItemTranslateYPixels = menuRect.top - liOptionRect.top;
        }
        return {
            value: '*',
            params: {
                scope: this,
                savedFilter,
                savedFilterListItemTranslateXPixels: this.translateFilterEditingTitleXPixels,
                savedFilterListItemTranslateYPixels
            }
        };
    }
    onEditSavedFilterListItemAnimationDone(event, savedFilter) {
        // workaround: reset editFilterContainerAnimationOptions on saved filter editing animation closing done
        // if make animation via AnimationBuilder this will be unnecessary
        if (event.phaseName === 'done' && event.toState === '*' && event.totalTime &&
            this.editFilterContainerAnimationOptions &&
            savedFilter.id === this.editFilterContainerAnimationOptions.params.lastEditingSavedFilter.originalSavedFilter.id) {
            this.editFilterContainerAnimationOptions = null;
        }
    }
    hasDuplicateNameInCreating() {
        return this.hasDuplicateNameInSavedFilter(this.getSavedFiltersByCurrentUser(), this.getCreatingNewFilterPresetNameTrimmed());
    }
    hasDuplicateNameInEditing() {
        return this.hasDuplicateNameInSavedFilter(this.getSavedFiltersByCurrentUserExceptEditing(), this.getEditingFilterPresetNameTrimmed());
    }
    getSavedFiltersByCurrentUserExceptEditing() {
        const editingSavedFilterId = this.currentEditingSavedFilter.originalSavedFilter.id;
        return this.getSavedFiltersByCurrentUser().filter(savedFilter => savedFilter.id !== editingSavedFilterId);
    }
    hasDuplicateNameInSavedFilter(savedFiltersByCurrentUser, filterPresetName) {
        return filterPresetName ?
            savedFiltersByCurrentUser.some(savedFilter => savedFilter.name === filterPresetName) :
            false;
    }
    generateUniqueSavedFilterName(filterPresetName, savedFiltersByCurrentUser) {
        for (let suffixIndex = 2;; suffixIndex++) {
            const uniqueFilterName = `${filterPresetName}-${suffixIndex}`;
            if (!this.hasDuplicateNameInSavedFilter(savedFiltersByCurrentUser, uniqueFilterName)) {
                return uniqueFilterName;
            }
        }
    }
    onCreateNewFilterPreset() {
        const creatingNewFilterPresetNameOriginal = this.getCreatingNewFilterPresetNameTrimmed();
        const filters = this.getSelectedFiltersFromCurrentTags();
        if (this.filtersExpressionsTags.length && creatingNewFilterPresetNameOriginal && filters.length) {
            let creatingNewFilterPresetName = creatingNewFilterPresetNameOriginal;
            if (this.hasDuplicateNameInCreating()) {
                creatingNewFilterPresetName = this.generateUniqueSavedFilterName(creatingNewFilterPresetNameOriginal, this.getSavedFiltersByCurrentUser());
            }
            this.createNewFilter.emit({
                name: creatingNewFilterPresetName,
                originalName: creatingNewFilterPresetNameOriginal,
                filters
            });
            this.exitCreatingNewFilterPreset();
        }
    }
    getCreatingNewFilterPresetNameTrimmed() {
        return this.creatingNewFilterPresetName.trim();
    }
    getEditingFilterPresetNameTrimmed() {
        return this.currentEditingSavedFilter.filterName.trim();
    }
    onNewFilterNameEditorKeyDown(event) {
        if (hasKeyboardKeyCode(event, 'Enter', ENTER)) {
            this.onCreateNewFilterPreset();
            // TODO: escape will also close the dropdown
        }
        else if (hasKeyboardKeyCode(event, 'Escape', ESCAPE)) {
            this.onCancelCreatingNewFilterPreset();
        }
    }
    onNewFilterNameEditorFocus() {
        this.isNewFilterNameEditorFocus = true;
    }
    onNewFilterNameEditorBlur() {
        this.isNewFilterNameEditorFocus = false;
    }
    getFiltersExpressionFieldLabel() {
        return this.applyFiltersByUserAction ? this.texts.selectedFiltersExpressionFieldLabel : this.texts.filtersExpressionFieldLabel;
    }
    cancelFiltersSelection() {
        this.updateFiltersExpressionModel(this.convertSelectedFiltersToTags(this.selectedFilters), {
            updateAndEmitSelectedFiltersChange: true,
            deselectActiveSavedFilter: this.selectedFilters && this.selectedFilters.length
                ? null
                : ActiveSavedFilterSelectionCause.OnFiltersClear,
            clearMetatagInputValue: true,
            updateEditingFilterTags: false,
            applyFiltersByUserAction: this.applyFiltersByUserAction
        });
        this.filtersSelectionCanceled.emit();
    }
    removeAllSelectedFilters(event) {
        this.clear(event);
        this._updateSelectedFilters([], true);
    }
    applySelectedFilters() {
        this._updateSelectedFilters([...this._notAppliedSelectedFilters], true);
        this.filtersDropdown.close();
    }
    isClearSelectedFiltersButtonDisabled() {
        return this.canShowCreatingNewFilterPreset || this.isLoading
            || (isEmpty(this.selectedFilters) && isEmpty(this._notAppliedSelectedFilters));
    }
    isApplySelectedFiltersButtonDisabled() {
        return this.canShowCreatingNewFilterPreset || this.isLoading || isEqual(this.selectedFilters, this._notAppliedSelectedFilters);
    }
    getFilterExpressionFieldClass(mainClass, filterExpressionTagField) {
        const isEmptyField = !filterExpressionTagField || filterExpressionTagField.isEmpty;
        return `${mainClass}${isEmptyField ? ' advanced-filter__tag-field-empty' : ''}`;
    }
    getSelectedFiltersFromCurrentTags() {
        return this.getSelectedFiltersFromTags(this.currentFiltersExpressionsTags);
    }
    getSelectedFiltersFromTags(tags) {
        return tags.filter(tag => !this.isCustomTag(tag) && !this.tagFieldWarningCheckResolver(tag))
            .map(tag => this.convertTagToSelectedFilter(tag));
    }
    getCustomTagsFromCurrentTags() {
        return this.currentFiltersExpressionsTags.filter(this.isCustomTag);
    }
    convertTagToSelectedFilter(tag) {
        return {
            filterOptionId: this.getTagFilterOptionId(tag),
            value: tag.data.value
        };
    }
    hasValidCurrentFilterTags() {
        return this.currentFiltersExpressionsTags.some(tag => !this.isCustomTag(tag) && !this.tagFieldWarningCheckResolver(tag));
    }
    hasAllInvalidCurrentFilterTags() {
        return this.currentFiltersExpressionsTags.every(tag => !this.isCustomTag(tag) && this.tagFieldWarningCheckResolver(tag));
    }
    tagFieldWarningCheckResolver(tag) {
        if (this.isCustomTag(tag)) {
            return false;
        }
        return !isEmpty(tag.data.validationErrors);
    }
    onCancelCreatingNewFilterPreset() {
        this.exitCreatingNewFilterPreset();
    }
    exitCreatingNewFilterPreset() {
        this.isCreatingNewFilterPreset = false;
        this.creatingNewFilterPresetName = '';
    }
    onDeleteSavedFilterClick(savedFilter) {
        // if (this.activeSavedFilter && this.activeSavedFilter.id === savedFilter.id) {
        //   this.setActiveSavedFilter(null, ActiveSavedFilterSelectionCause.OnDeleteSavedFilter);
        // }
        this.deleteSavedFilter.emit(savedFilter);
    }
    cancelSavedFilterEditing() {
        this.editFilterContainerAnimationOptions = Object.assign(Object.assign({}, this.editFilterContainerAnimationOptions), { value: ':leave' });
        this.currentEditingSavedFilter = null;
        this.editingSavedFilterCanceled.emit();
    }
    saveSavedFilterEditing() {
        const filters = this.getSelectedFiltersFromCurrentTags();
        const originalNewFilterName = this.getEditingFilterPresetNameTrimmed();
        const customTags = this.getCustomTagsFromCurrentTags();
        if (!originalNewFilterName || !filters.length) {
            return;
        }
        let uniqueFilterName = originalNewFilterName;
        if (this.hasDuplicateNameInEditing()) {
            uniqueFilterName = this.generateUniqueSavedFilterName(originalNewFilterName, this.getSavedFiltersByCurrentUserExceptEditing());
        }
        const newSavedFilter = {
            id: this.currentEditingSavedFilter.originalSavedFilter.id,
            name: uniqueFilterName,
            filters
        };
        const updateSaveFilterEvent = {
            oldSavedFilter: this.currentEditingSavedFilter.originalSavedFilter,
            newSavedFilter,
            originalNewFilterName
        };
        if (customTags && customTags.length) {
            updateSaveFilterEvent.customFilterExpressionsTags = customTags;
        }
        this.updateSavedFilter.emit(updateSaveFilterEvent);
        Object.assign(this.currentEditingSavedFilter.originalSavedFilter, newSavedFilter);
        this.onSelectActiveSavedFilter(this.currentEditingSavedFilter.originalSavedFilter);
        this.currentEditingSavedFilter = null;
    }
    calculateEditingFilterOptionsScrollableElStyle() {
        const scrollableEl = this.editingFilterOptionsScrollableEl && this.editingFilterOptionsScrollableEl.nativeElement;
        if (scrollableEl) {
            const bottomDiff = this.editingFilterFooterEl && this.editingFilterFooterEl.nativeElement
                ? this.editingFilterFooterEl.nativeElement.clientHeight
                : 0;
            this.editingFilterScrollableElStyle = this.getScrollableElStyle(scrollableEl, bottomDiff);
        }
    }
    getScrollableElStyle(scrollableEl, bottomDiff = 0) {
        if (this.isMobile) {
            return;
        }
        return {
            maxHeight: this._getScrollableElMaxHeight(scrollableEl, bottomDiff)
        };
    }
    setIsLoadingState(value) {
        this._isLoading = value;
        const busyConfigCopy = Object.assign({}, this.busyConfig);
        if (value) {
            if (this.busyConfig.busy) {
                this.busyConfig.busy.unsubscribe();
            }
            busyConfigCopy.busy = new Observable().pipe(takeUntil(this._destroyed$)).subscribe();
            this.busyConfig = busyConfigCopy;
        }
        else {
            if (this.busyConfig.busy) {
                this.busyConfig.busy.unsubscribe();
                busyConfigCopy.busy = null;
                this.busyConfig = busyConfigCopy;
            }
        }
    }
    trackByForSavedFilterFn(index, savedFilter) {
        return savedFilter.id || index;
    }
    trackByForFilterOptionDataFn(index, optionData) {
        return optionData.option.id || index;
    }
    onAnchorPositionChange() {
        this._updateStyles();
    }
    onPopupAnimationDone(event) {
        if (!this.isMobile && event && event.toState !== 'void') {
            this._updateStyles();
        }
    }
    handleDropdownOpenChange(opened) {
        if (opened) {
            // due to tag-field that is appended to body should use custom logic for dd closure
            this._removeTapEventListener =
                this._eventManager.addEventListener(document.documentElement, 'tap', this._closeFromClick.bind(this));
            this.dropdownMenuContentVisible = true;
            this._updateStyles();
        }
        else {
            if (this._removeTapEventListener) {
                this._removeTapEventListener();
            }
            if (this.currentEditingSavedFilter) {
                this.cancelSavedFilterEditing();
            }
            if (this.applyFiltersByUserAction) {
                this.cancelFiltersSelection();
            }
            // Hide dropdown content to reset UI state of the inner components
            this.filtersDropdown.popupAnimationDone
                .pipe(takeUntil(this._destroyed$), take(1))
                .subscribe(() => {
                this.dropdownMenuContentVisible = false;
            });
        }
        // For "applyFiltersByUserAction" check if selected filters can be restored as an active saved filter preset
        // This is needed to show correct "Apply" button disabled state
        if (this.applyFiltersByUserAction) {
            const activeSavedFilter = this.savedFilters.find(filter => isEqual(filter.filters, this.selectedFilters));
            this._activeSavedFilter = activeSavedFilter ? activeSavedFilter : null;
        }
        this.dropdownOpenStateChange.emit(opened);
    }
    isFilterActive(savedFilter) {
        return this._activeSavedFilter ? this._activeSavedFilter.id === savedFilter.id : false;
    }
    onRemoveFromOutsideTag(event) {
        const tag = event.tag;
        this.removeTag.emit({
            tagFieldEvent: {
                tag,
                index: event.index,
                domEvent: event.domEvent
            },
            index: event.index,
            tag: tag
        });
        // in case we are deleting tag from outside tags we should ignore `applyFiltersByUserAction` input and allow deletion
        this._onRemoveTag(tag, false);
        this._notAppliedSelectedFilters = this.selectedFilters;
    }
    onVisibilityChanged(event) {
        this.dropdownAnchorWithCounterLabel = event.hiddenItemsCount === 0 ? '' : formatString(this.texts.initialDropdownAnchorWithCounterLabel, event.hiddenItemsCount);
        this._checkIfFilterTagsLabelVisible();
        SafeCdr.detectChanges(this._changeDetector);
    }
    _onRemoveTag(tag, applyFiltersByUserAction = this.applyFiltersByUserAction) {
        const tags = this.filtersExpressionsTags.filter(filterTag => !isEqual(filterTag, tag));
        if (tags.length !== this.filtersExpressionsTags.length) {
            this.updateFiltersExpressionModel(tags, {
                updateAndEmitSelectedFiltersChange: true,
                deselectActiveSavedFilter: ActiveSavedFilterSelectionCause.OnFilterChange,
                clearMetatagInputValue: false,
                updateEditingFilterTags: false,
                applyFiltersByUserAction
            });
        }
    }
    _dropdownCancelCB() {
        if (this.currentEditingSavedFilter) {
            this.cancelSavedFilterEditing();
        }
        else if (this.applyFiltersByUserAction) {
            this.cancelFiltersSelection();
            this.filtersDropdown.close();
        }
        else {
            this.filtersDropdown.close();
        }
    }
    _dropdownDoneCB() {
        if (this.currentEditingSavedFilter) {
            this.saveSavedFilterEditing();
        }
        else if (this.applyFiltersByUserAction) {
            this.applySelectedFilters();
            this.filtersDropdown.close();
        }
        else {
            this.filtersDropdown.close();
        }
    }
    addNewTagOrUpdateExisting(tags, tagToAdd) {
        const filterOptionId = this.getTagFilterOptionId(tagToAdd);
        const existTag = tags.find(uniqueTag => this.getTagFilterOptionId(uniqueTag) === filterOptionId);
        if (existTag) {
            const filterOptionConfig = this.getFilterOptionConfig(existTag.data.filterOption);
            const newValue = filterOptionConfig.updateFilterValue(tagToAdd.data.value, existTag.data.value, tagToAdd.data.filterOption);
            Object.assign(existTag, this.createTag(tagToAdd.data.filterOption, newValue));
        }
        else {
            tags.push(tagToAdd);
        }
        return null;
    }
    updateExpressionFieldControl() {
        const formControl = this.filterExpressionFormControl || this.editingFilterExpressionFormControl;
        if (formControl) {
            formControl.control.markAsTouched();
            formControl.control.markAsDirty();
            formControl.control.updateValueAndValidity({ emitEvent: false, onlySelf: true });
        }
    }
    _updateStyles() {
        this.menuElStyle = this._getFilterContainerStyle();
        this.calculateEditingFilterOptionsScrollableElStyle();
    }
    _getFilterContainerStyle() {
        const buttonRect = this.adaptDropdownButton.nativeElement.getBoundingClientRect();
        const viewPortHeight = window.innerHeight;
        const halfOfScreenHeight = viewPortHeight / 2;
        const buttonCenterPosition = buttonRect.top + (buttonRect.height / 2);
        const shouldShowMenuOnBottom = halfOfScreenHeight >= buttonCenterPosition;
        const menuGap = 10;
        const shouldUseMaxHeight = shouldShowMenuOnBottom
            ? halfOfScreenHeight >= buttonCenterPosition
            : halfOfScreenHeight <= buttonCenterPosition;
        let maxHeight;
        if (shouldShowMenuOnBottom) {
            maxHeight = buttonRect.bottom > 0
                ? viewPortHeight - buttonRect.bottom
                : viewPortHeight;
        }
        else {
            maxHeight = buttonRect.top < viewPortHeight
                ? buttonRect.top
                : viewPortHeight;
        }
        const h = (shouldUseMaxHeight ? maxHeight : halfOfScreenHeight) - menuGap;
        this.isEntirelyScrollable = h <= this._entirelyScrollHeight;
        return {
            maxHeight: `${h}px`
        };
    }
    _getScrollableElMaxHeight(scrollableEl, bottomDiff = 0) {
        const menuEl = this.adaptDropdownMenu.nativeElement;
        const menuRect = menuEl.getBoundingClientRect();
        const scrollableElRect = scrollableEl.getBoundingClientRect();
        const headerHeight = scrollableElRect.top - menuRect.top;
        const menuComputedStyle = getComputedStyle(menuEl);
        const footerElRect = this.applyFiltersByUserActionFooterEl ? this.applyFiltersByUserActionFooterEl.nativeElement.getBoundingClientRect() : null;
        const footerElRectHeight = footerElRect ? footerElRect.height : 0;
        return `calc(${menuComputedStyle.maxHeight} - ${headerHeight}px - ${footerElRectHeight}px - ${bottomDiff}px)`;
    }
    getBusyConfig() {
        return {
            busy: null,
            backdrop: true,
            sticky: true,
            message: '',
            loaderType: 'section',
            overlayClass: 'advanced-filter__busy-backdrop'
        };
    }
    _closeFromClick(event) {
        if (!this.filtersDropdown
            || !this.filtersDropdown.isOpen()
            || event.target === this.adaptDropdownButton.nativeElement && this.filtersDropdown.isOpen()) {
            return;
        }
        if (!this.filtersDropdown.isEventFromMenu(event) &&
            !event.target.closest('.dropdown-menu, adapt-dialog') &&
            (!this.canCloseDropdownResolver || this.canCloseDropdownResolver(event))) {
            this.filtersDropdown.close();
        }
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    createTag(filterOption, value, validationErrors) {
        const filterOptionConfig = this.getFilterOptionConfig(filterOption);
        const formattedValueForTag = filterOptionConfig.formatValueForTag(value, filterOption);
        return {
            data: {
                filterOption,
                value,
                validationErrors: validationErrors || filterOptionConfig.validateValue(value, filterOption)
            },
            text: filterOptionConfig.getTagText(value, filterOption, formattedValueForTag)
        };
    }
    _updateSelectedFilters(selectedFilters, emitEvent) {
        this._selectedFilters = selectedFilters;
        this.selectedFiltersTags = this.convertSelectedFiltersToTags(selectedFilters);
        if (emitEvent) {
            this.selectedFiltersChange.emit(this.selectedFilters);
        }
    }
    _checkIfFilterTagsLabelVisible() {
        var _a, _b, _c;
        if (this.showTags && ((_a = this.filtersDropdownWrapper) === null || _a === void 0 ? void 0 : _a.nativeElement) && ((_b = this.adaptDropdownButton) === null || _b === void 0 ? void 0 : _b.nativeElement) && ((_c = this.filterTags) === null || _c === void 0 ? void 0 : _c.nativeElement)) {
            this.isFilterOutsideTagsHidden = this.filtersDropdownWrapper.nativeElement.clientWidth < this.adaptDropdownButton.nativeElement.clientWidth + this.filterTags.nativeElement.clientWidth;
        }
        else {
            this.isFilterOutsideTagsHidden = false;
        }
    }
}
AdaptAdvancedFilterComponent.ɵfac = function AdaptAdvancedFilterComponent_Factory(t) { return new (t || AdaptAdvancedFilterComponent)(i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.EventManager), i0.ɵɵdirectiveInject(i2.AdvancedFilterDataTypesConfigsService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i4.AdaptTranslateService), i0.ɵɵdirectiveInject(i5.ResizeService), i0.ɵɵdirectiveInject(i6.AdaptOverlayService), i0.ɵɵdirectiveInject(i7.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptAdvancedFilterComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptAdvancedFilterComponent, selectors: [["adapt-advanced-filter"]], viewQuery: function AdaptAdvancedFilterComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
        i0.ɵɵviewQuery(_c1, 5);
        i0.ɵɵviewQuery(_c2, 5);
        i0.ɵɵviewQuery(_c3, 5);
        i0.ɵɵviewQuery(_c4, 5);
        i0.ɵɵviewQuery(_c4, 5, NgControl);
        i0.ɵɵviewQuery(_c5, 5);
        i0.ɵɵviewQuery(_c6, 5);
        i0.ɵɵviewQuery(_c7, 5);
        i0.ɵɵviewQuery(_c8, 5, ElementRef);
        i0.ɵɵviewQuery(_c5, 5, NgControl);
        i0.ɵɵviewQuery(_c9, 5);
        i0.ɵɵviewQuery(_c10, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.adaptDropdownMenu = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.adaptDropdownButton = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.editingFilterOptionsScrollableEl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.editingFilterFooterEl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filterExpressionTagField = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filterExpressionFormControl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.editingFilterExpressionTagField = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.applyFiltersByUserActionFooterEl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filtersDropdownWrapper = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filterTags = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.editingFilterExpressionFormControl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.newFilterNameEditor = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filterOptionsControls = _t);
    } }, inputs: { filterOptions: "filterOptions", savedFilters: "savedFilters", enableDefaultSavedFilter: "enableDefaultSavedFilter", defaultSavedFilterId: "defaultSavedFilterId", busyConfig: "busyConfig", activeSavedFilter: "activeSavedFilter", disableExpressionEditing: "disableExpressionEditing", showAnchorButtonLabel: "showAnchorButtonLabel", getCustomExpressionTagFieldModel: "getCustomExpressionTagFieldModel", enableSavedFilters: "enableSavedFilters", applyFiltersByUserAction: "applyFiltersByUserAction", canCloseDropdownResolver: "canCloseDropdownResolver", showTabToolbar: "showTabToolbar", disabledTabResolver: "disabledTabResolver", disabledInputResolver: "disabledInputResolver", showSelectedFiltersCount: "showSelectedFiltersCount", selectedFiltersIndicationStyle: "selectedFiltersIndicationStyle", filterOptionsCustomAreaTemplate: "filterOptionsCustomAreaTemplate", showTags: "showTags", anchorDisabled: "anchorDisabled", fullWidthEdit: "fullWidthEdit", translateFilterEditingTitleXPixels: "translateFilterEditingTitleXPixels", selectedFilters: "selectedFilters", isLoading: "isLoading" }, outputs: { selectedFiltersChange: "selectedFiltersChange", filterSelectionChange: "filterSelectionChange", deleteSavedFilter: "deleteSavedFilter", createNewFilter: "createNewFilter", updateSavedFilter: "updateSavedFilter", beforeActiveSavedFilterChange: "beforeActiveSavedFilterChange", activeSavedFilterChange: "activeSavedFilterChange", removeTag: "removeTag", filtersCleared: "filtersCleared", saveNewFilterClick: "saveNewFilterClick", filtersSelectionCanceled: "filtersSelectionCanceled", editSavedFilterClick: "editSavedFilterClick", markDefaultSavedFilterClick: "markDefaultSavedFilterClick", editingSavedFilterCanceled: "editingSavedFilterCanceled", filterExpressionTagsChanged: "filterExpressionTagsChanged" }, features: [i0.ɵɵInheritDefinitionFeature], decls: 13, vars: 3, consts: [[1, "d-flex", "overflow-hidden"], ["filtersDropdownWrapper", ""], ["class", "advanced-filter__dropdown-wrap", "adaptDropdown", "", 3, "adaptRadarDisableEventSending", "appendToBody", "holdFocusInMenu", "restoreFocusAfterClose", "recalculatePositionOnElementResize", "autoClose", "customClass", "closeOnEscape", "placement", "mobileView", "anchorPositionChange", "onOpen", "onClose", "popupAnimationDone", 4, "ngIf"], ["class", "advanced-filter__dropdown-wrap", "adaptDropdown", "", 3, "adaptRadarDisableEventSending", "appendToBody", "holdFocusInMenu", "restoreFocusAfterClose", "autoClose", "customClass", "closeOnEscape", "placement", "mobileView", "anchorPositionChange", "onOpen", "onClose", "popupAnimationDone", 4, "ngIf"], [3, "advanced-filter__outside-tags_hidden", "tags", "texts", "remove", "visibilityChanged", 4, "ngIf"], ["filterOptionsTemplate", ""], ["adaptDropdown", "", 1, "advanced-filter__dropdown-wrap", 3, "adaptRadarDisableEventSending", "appendToBody", "holdFocusInMenu", "restoreFocusAfterClose", "recalculatePositionOnElementResize", "autoClose", "customClass", "closeOnEscape", "placement", "mobileView", "anchorPositionChange", "onOpen", "onClose", "popupAnimationDone"], ["filtersDropdown", "adaptDropdown"], ["type", "button", "adaptDropdownAnchor", "", 1, "btn", "btn-link", "px-0", "d-icon-left-filter", "d-icon-right-triangle_down", 3, "disabled", "click"], ["adaptDropdownButton", ""], [4, "ngIf"], ["adaptDropdownMenu", "", 1, "dropdown-menu", "advanced-filter__popover-container", 3, "ngStyle", "ngClass"], ["adaptDropdownMenu", ""], ["class", "advanced-filter__container", 4, "ngIf"], [1, "advanced-filter__container"], ["class", "advanced-filter__animation-container", 4, "ngIf"], [1, "advanced-filter__animation-container"], [1, "advanced-filter__popover-header", 3, "ngClass"], ["class", "advanced-filter__actions-buttons", 4, "ngIf"], ["popupClass", "advanced-filter__typeahead-window", 3, "adaptRadarDisableEventSending", "warningCheck", "mainErrorText", "warningStateText", "mainCls", "label", "maxHeight", "testID", "name", "search", "ngModel", "delimiterSymbol", "placeholder", "replaceModelOnWrite", "fullWidthEdit", "disabledInput", "suppressManual", "ngModelChange", "removeTag", "initTagEditing"], ["filterExpressionTagField", ""], [3, "showTabToolbar", "adaptRadarDisableEventSending", "type", "justify", "customCssTabContent", "customClassTabList", "tab-active", "testID", "carouselMode", "tab-active-changed"], [3, "adapt-tab-title"], [1, "advanced-filter__scrollable-container", 3, "ngStyle"], ["scrollableEl1", ""], [3, "ngTemplateOutlet"], ["badge-type", "primary", 3, "adapt-tab-title", "badge", 4, "ngIf"], ["class", "advanced-filter__apply-filters-footer", 4, "ngIf"], [1, "advanced-filter__actions-buttons"], [3, "alignedTo", "adaptRadarDisableEventSending", "testID", "actions"], ["badge-type", "primary", 3, "adapt-tab-title", "badge"], ["scrollableEl2", ""], [1, "saved-advanced-filters-container"], [3, "ngBusy"], [3, "ngIf"], [3, "adaptRadarDisableEventSending", "type", "label", 4, "ngIf"], [1, "saved-advanced-filters-header"], [1, "list-unstyled"], ["class", "advanced-filter__saved-filter-list-item", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "mb-3", 3, "ngClass"], [1, "advanced-filter-name-editor"], [1, "advanced-filter-name-editor__textfield", 3, "adaptRadarDisableEventSending", "ngModel", "showInvalidStateIcon", "testID", "autofocus", "placeholder", "ngModelChange", "keydown", "onFocus", "onBlur"], ["newFilterNameEditor", ""], [1, "advanced-filter-name-editor__controls", 3, "ngClass"], [1, "advanced-filter-name-editor__custom-actions", 3, "alignedTo", "adaptRadarDisableEventSending", "testID", "actions"], ["class", "form-control-feedback m-0 pt-1", 4, "ngIf"], [1, "form-control-feedback", "m-0", "pt-1"], [1, "advanced-filter__saved-filter-list-item"], ["savedFilterListItem", ""], ["name", "savedFiltersGroup", 1, "saved-advanced-filters-radio", 3, "adaptRadarDisableEventSending", "label", "value", "checked", "checkedChange"], [1, "radio-after", "saved-advanced-filters-buttons"], ["type", "button", "class", "btn btn-link saved-advanced-filters-action-btn", "adapt-button", "", "btn-type", "tertiary", 3, "adaptRadarDisableEventSending", "click", 4, "ngIf"], ["type", "button", "adapt-button", "", "btn-type", "tertiary", 1, "saved-advanced-filters-action-btn", 3, "adaptRadarDisableEventSending", "click"], [1, "d-icon-pencil_adapt"], [1, "sr-only"], [1, "d-icon-trash"], [1, "badge", "badge-info"], ["type", "button", "adapt-button", "", "btn-type", "tertiary", 1, "btn", "btn-link", "saved-advanced-filters-action-btn", 3, "adaptRadarDisableEventSending", "click"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [3, "adaptRadarDisableEventSending", "type", "label"], [1, "advanced-filter__apply-filters-footer"], ["applyFiltersByUserActionFooterEl", ""], ["type", "button", "adapt-button", "", "btn-type", "tertiary", "size", "small", 3, "adaptRadarDisableEventSending", "click", 4, "ngIf"], ["type", "button", "adapt-button", "", "btn-type", "secondary", "size", "small", 1, "mr-2", 3, "adaptRadarDisableEventSending", "disabled", "click"], ["type", "button", "adapt-button", "", "btn-type", "primary", "size", "small", 3, "adaptRadarDisableEventSending", "disabled", "click"], ["type", "button", "adapt-button", "", "btn-type", "tertiary", "size", "small", 3, "adaptRadarDisableEventSending", "click"], [1, "advanced-filter__editing-header-wrap"], ["type", "button", "adapt-button", "", "btn-type", "tertiary", 1, "advanced-filter__header-btn", "advanced-filter__back-btn", 3, "adaptRadarDisableEventSending", "click"], [1, "d-icon-angle_left"], [1, "advanced-filter__editing-title", "text-url-break-out"], [1, "advanced-filter__editing-container"], [1, "advanced-filter__editing-fields"], [3, "for", "label", "showRequiredLabel", "has-danger", 4, "ngIf"], ["adaptAdvancedFilterName", "", 3, "adaptRadarDisableEventSending", "ngModel", "showInvalidStateIcon", "testID", "placeholder", "requiredLabel", "warningMessage", "adaptAdvancedFilterNameErrorText", "ngModelChange"], ["adaptRxTextfieldComponent", ""], ["popupClass", "advanced-filter__typeahead-window", 3, "adaptRadarDisableEventSending", "warningCheck", "mainErrorText", "warningStateText", "mainCls", "label", "maxHeight", "name", "search", "ngModel", "delimiterSymbol", "required", "fullWidthEdit", "placeholder", "replaceModelOnWrite", "requiredLabel", "ngModelChange"], ["editingFilterExpressionTagField", ""], [1, "advanced-filter__scrollable-container", "advanced-filter__editing-options", 3, "ngStyle"], ["editingFilterOptionsScrollableEl", ""], ["class", "advanced-filter__editing-footer", 4, "ngIf"], [3, "for", "label", "showRequiredLabel"], [1, "advanced-filter__editing-footer"], ["editingFilterFooterEl", ""], [1, "d-inline-block"], ["type", "button", "adapt-button", "", "btn-type", "secondary", "size", "small", 1, "mr-2", 3, "adaptRadarDisableEventSending", "click"], ["adaptDropdown", "", 1, "advanced-filter__dropdown-wrap", 3, "adaptRadarDisableEventSending", "appendToBody", "holdFocusInMenu", "restoreFocusAfterClose", "autoClose", "customClass", "closeOnEscape", "placement", "mobileView", "anchorPositionChange", "onOpen", "onClose", "popupAnimationDone"], ["adaptDropdownMenuTemplate", ""], [1, "dropdown-menu", "advanced-filter__popover-container", "advanced-filter__popover-container-overlay", 3, "ngClass"], [3, "adaptRadarDisableEventSending", "warningCheck", "mainErrorText", "warningStateText", "mainCls", "popupClass", "label", "maxHeight", "testID", "name", "search", "ngModel", "delimiterSymbol", "placeholder", "replaceModelOnWrite", "fullWidthEdit", "disabledInput", "suppressManual", "ngModelChange", "removeTag", "initTagEditing"], [1, "advanced-filter__tab-container", 3, "showTabToolbar", "adaptRadarDisableEventSending", "type", "justify", "customCssTabContent", "customClassTabList", "tab-active", "testID", "carouselMode", "tab-active-changed"], ["filtersTabsPanel", ""], [1, "advanced-filter__scrollable-container"], ["savedFiltersTabsPanel", ""], [1, "mb-3"], ["class", "text-info m-0 pt-1", 4, "ngIf"], [1, "text-info", "m-0", "pt-1"], [1, "advanced-filter__scrollable-container", "advanced-filter__editing-options"], [3, "tags", "texts", "remove", "visibilityChanged"], ["filterTags", ""], [3, "ngIf", "ngTemplateOutlet"], [1, "advanced-filter__filters-accordion", 3, "adaptRadarDisableEventSending", "bordered"], ["class", "advanced-filter__filter-controls", 3, "filterOption", "filterValue", "validationErrors", "hasAllInvalidTags", "texts", "testID", "disabledTabResolver", "disabledInputResolver", "showSelectedFiltersCount", "selectedFiltersIndicationStyle", "ngClass", "filterValueChange", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "advanced-filter__filter-controls", 3, "filterOption", "filterValue", "validationErrors", "hasAllInvalidTags", "texts", "testID", "disabledTabResolver", "disabledInputResolver", "showSelectedFiltersCount", "selectedFiltersIndicationStyle", "ngClass", "filterValueChange"], ["filterControls", ""]], template: function AdaptAdvancedFilterComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0, 1);
        i0.ɵɵtext(2, "\n  ");
        i0.ɵɵtemplate(3, AdaptAdvancedFilterComponent_div_3_Template, 15, 21, "div", 2);
        i0.ɵɵtext(4, "\n\n  ");
        i0.ɵɵtemplate(5, AdaptAdvancedFilterComponent_div_5_Template, 11, 12, "div", 3);
        i0.ɵɵtext(6, "\n\n  ");
        i0.ɵɵtemplate(7, AdaptAdvancedFilterComponent_adapt_filter_tags_7_Template, 3, 4, "adapt-filter-tags", 4);
        i0.ɵɵtext(8, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(9, "\n\n\n");
        i0.ɵɵtemplate(10, AdaptAdvancedFilterComponent_ng_template_10_Template, 8, 6, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(12, "\n");
    } if (rf & 2) {
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", !ctx.overlayService.enableCDKOverlayControl);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.overlayService.enableCDKOverlayControl);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.showTags);
    } }, directives: [i8.NgIf, i9.AdaptDropdownDirective, i9.AdaptDropdownAnchorDirective, i9.AdaptDropdownMenuDirective, i8.NgStyle, i8.NgClass, i10.AdaptMetatagComponent, i11.NgControlStatus, i11.NgModel, i12.AdaptTabsComponent, i13.AdaptTabsPanelComponent, i8.NgTemplateOutlet, i14.AdaptCustomActionsComponent, i15.AdaptBusyDirective, i8.NgForOf, i16.AdaptRxTextfieldComponent, i17.AdaptRxRadiobuttonComponent, i18.AdaptButtonComponent, i19.AdaptEmptyStateComponent, AdaptAdvancedFilterNameValidator, i11.RequiredValidator, i20.AdaptRxControlLabelComponent, i9.AdaptDropdownMenuTemplateDirective, i21.AdaptFilterTagsComponent, i22.AdaptAccordionComponent, i23.AdaptFilterControlsComponent], styles: ["\n    .advanced-filter__popover-container-overlay .advanced-filter__container {\n      height: 100%;\n\n      display: flex;\n      flex-direction: column;\n      overflow: auto;\n    }\n\n    .advanced-filter__popover-container-overlay .advanced-filter__editing-header-wrap {\n      flex: 0 0 auto;\n    }\n\n    .advanced-filter__popover-container-overlay .advanced-filter__editing-container {\n      flex: 1 1 auto;\n      overflow: auto;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .advanced-filter__popover-container-overlay .advanced-filter__animation-container {\n      display: flex;\n      flex-direction: column;\n      height: 100%;\n    }\n\n    .advanced-filter__popover-container-overlay .advanced-filter__popover-header {\n      flex: 0 0 auto;\n    }\n\n    .advanced-filter__popover-container-overlay .advanced-filter__tab-container {\n      overflow: auto;\n    }\n\n    .advanced-filter__popover-container-overlay .advanced-filter__tab-content {\n      overflow: auto;\n    }\n  "], encapsulation: 2, data: { animation: [
            trigger('savedFiltersContainerAnimation', [
                transition(':enter', [
                    group([
                        animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`),
                        query('@editSavedFilterListItemAnimation', [animateChild()], { optional: true })
                    ])
                ]),
                transition(':leave', [
                    group([
                        animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`),
                        query('@editSavedFilterListItemAnimation', [animateChild()], { optional: true })
                    ])
                ])
            ]),
            trigger('editSavedFilterListItemAnimation', [
                transition(getEditSavedFilterListItemTransitionFromAnyStateFn, [
                    style({ transform: 'translate(0px, 0px)' }),
                    animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ transform: 'translate({{savedFilterListItemTranslateXPixels}}px, {{savedFilterListItemTranslateYPixels}}px)' }))
                ], { params: { savedFilterListItemTranslateXPixels: 0, savedFilterListItemTranslateYPixels: 0 } }),
                transition(getEditSavedFilterListItemTransitionFromVoidStateFn, [
                    style({ transform: 'translate({{savedFilterListItemTranslateXPixels}}px, {{savedFilterListItemTranslateYPixels}}px)' }),
                    animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ transform: 'translate(0px, 0px)' }))
                ], { params: { savedFilterListItemTranslateXPixels: 0, savedFilterListItemTranslateYPixels: 0 } })
            ]),
            trigger('editFilterContainerAnimation', [
                transition('void => *', [
                    style({
                        opacity: 0,
                        position: 'absolute',
                        left: 0,
                        right: 0,
                        top: '7px',
                        backgroundColor: 'white',
                        overflow: 'hidden'
                    }),
                    group([
                        animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ opacity: 1 })),
                        query('.advanced-filter__editing-container', [
                            style({ transform: 'translateY(50%)' }),
                            animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ transform: 'translateY(0%)' }))
                        ]),
                        query('.advanced-filter__back-btn', [
                            style({ transform: 'translateX(150%)' }),
                            animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ transform: 'translateX(0%)' }))
                        ]),
                        query('.advanced-filter__editing-title', [
                            style({ transform: 'translate({{titleTranslateXPixels}}px, {{titleTranslateYPixels}}px)' }),
                            animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ transform: 'translate(0px, 0px)' }))
                        ])
                    ])
                ], { params: { titleTranslateYPixels: 0, titleTranslateXPixels: 0 } }),
                transition('* => void', [
                    style({
                        opacity: 1,
                        position: 'absolute',
                        left: 0,
                        right: 0,
                        top: '7px',
                        backgroundColor: 'white',
                        overflow: 'hidden'
                    }),
                    group([
                        animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ opacity: 0 })),
                        query('.advanced-filter__editing-container', [
                            style({ transform: 'translateY(0%)' }),
                            animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ transform: 'translateY(50%)' }))
                        ]),
                        query('.advanced-filter__back-btn', [
                            style({ transform: 'translateX(0%)' }),
                            animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ transform: 'translateX(150%)' }))
                        ]),
                        query('.advanced-filter__editing-title', [
                            style({ transform: 'translate(0px, 0px)' }),
                            animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ transform: 'translate({{titleTranslateXPixels}}px, {{titleTranslateYPixels}}px' }))
                        ])
                    ])
                ], { params: { titleTranslateYPixels: 0, titleTranslateXPixels: 0 } })
            ]),
            trigger('editFilterContainerOverlayAnimation', [
                transition('void => *', [
                    useAnimation(ANIMATION_NAME.moveIn, { params: { translateY: 10, unit: 'px' } })
                ])
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptAdvancedFilterComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-advanced-filter',
                templateUrl: './advanced-filter.component.html',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    trigger('savedFiltersContainerAnimation', [
                        transition(':enter', [
                            group([
                                animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`),
                                query('@editSavedFilterListItemAnimation', [animateChild()], { optional: true })
                            ])
                        ]),
                        transition(':leave', [
                            group([
                                animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`),
                                query('@editSavedFilterListItemAnimation', [animateChild()], { optional: true })
                            ])
                        ])
                    ]),
                    trigger('editSavedFilterListItemAnimation', [
                        transition(getEditSavedFilterListItemTransitionFromAnyStateFn, [
                            style({ transform: 'translate(0px, 0px)' }),
                            animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ transform: 'translate({{savedFilterListItemTranslateXPixels}}px, {{savedFilterListItemTranslateYPixels}}px)' }))
                        ], { params: { savedFilterListItemTranslateXPixels: 0, savedFilterListItemTranslateYPixels: 0 } }),
                        transition(getEditSavedFilterListItemTransitionFromVoidStateFn, [
                            style({ transform: 'translate({{savedFilterListItemTranslateXPixels}}px, {{savedFilterListItemTranslateYPixels}}px)' }),
                            animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ transform: 'translate(0px, 0px)' }))
                        ], { params: { savedFilterListItemTranslateXPixels: 0, savedFilterListItemTranslateYPixels: 0 } })
                    ]),
                    trigger('editFilterContainerAnimation', [
                        transition('void => *', [
                            style({
                                opacity: 0,
                                position: 'absolute',
                                left: 0,
                                right: 0,
                                top: '7px',
                                backgroundColor: 'white',
                                overflow: 'hidden'
                            }),
                            group([
                                animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ opacity: 1 })),
                                query('.advanced-filter__editing-container', [
                                    style({ transform: 'translateY(50%)' }),
                                    animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ transform: 'translateY(0%)' }))
                                ]),
                                query('.advanced-filter__back-btn', [
                                    style({ transform: 'translateX(150%)' }),
                                    animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ transform: 'translateX(0%)' }))
                                ]),
                                query('.advanced-filter__editing-title', [
                                    style({ transform: 'translate({{titleTranslateXPixels}}px, {{titleTranslateYPixels}}px)' }),
                                    animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ transform: 'translate(0px, 0px)' }))
                                ])
                            ])
                        ], { params: { titleTranslateYPixels: 0, titleTranslateXPixels: 0 } }),
                        transition('* => void', [
                            style({
                                opacity: 1,
                                position: 'absolute',
                                left: 0,
                                right: 0,
                                top: '7px',
                                backgroundColor: 'white',
                                overflow: 'hidden'
                            }),
                            group([
                                animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ opacity: 0 })),
                                query('.advanced-filter__editing-container', [
                                    style({ transform: 'translateY(0%)' }),
                                    animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ transform: 'translateY(50%)' }))
                                ]),
                                query('.advanced-filter__back-btn', [
                                    style({ transform: 'translateX(0%)' }),
                                    animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ transform: 'translateX(150%)' }))
                                ]),
                                query('.advanced-filter__editing-title', [
                                    style({ transform: 'translate(0px, 0px)' }),
                                    animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ transform: 'translate({{titleTranslateXPixels}}px, {{titleTranslateYPixels}}px' }))
                                ])
                            ])
                        ], { params: { titleTranslateYPixels: 0, titleTranslateXPixels: 0 } })
                    ]),
                    trigger('editFilterContainerOverlayAnimation', [
                        transition('void => *', [
                            useAnimation(ANIMATION_NAME.moveIn, { params: { translateY: 10, unit: 'px' } })
                        ])
                    ])
                ],
                styles: [`
    .advanced-filter__popover-container-overlay .advanced-filter__container {
      height: 100%;

      display: flex;
      flex-direction: column;
      overflow: auto;
    }

    .advanced-filter__popover-container-overlay .advanced-filter__editing-header-wrap {
      flex: 0 0 auto;
    }

    .advanced-filter__popover-container-overlay .advanced-filter__editing-container {
      flex: 1 1 auto;
      overflow: auto;
      display: flex;
      flex-direction: column;
    }

    .advanced-filter__popover-container-overlay .advanced-filter__animation-container {
      display: flex;
      flex-direction: column;
      height: 100%;
    }

    .advanced-filter__popover-container-overlay .advanced-filter__popover-header {
      flex: 0 0 auto;
    }

    .advanced-filter__popover-container-overlay .advanced-filter__tab-container {
      overflow: auto;
    }

    .advanced-filter__popover-container-overlay .advanced-filter__tab-content {
      overflow: auto;
    }
  `]
            }]
    }], function () { return [{ type: i0.NgZone }, { type: i1.EventManager }, { type: i2.AdvancedFilterDataTypesConfigsService }, { type: i0.ChangeDetectorRef }, { type: i3.AdaptDeviceDetectionService }, { type: i4.AdaptTranslateService }, { type: i5.ResizeService }, { type: i6.AdaptOverlayService }, { type: i7.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { adaptDropdownMenu: [{
            type: ViewChild,
            args: ['adaptDropdownMenu', { static: false }]
        }], adaptDropdownButton: [{
            type: ViewChild,
            args: ['adaptDropdownButton', { static: false }]
        }], editingFilterOptionsScrollableEl: [{
            type: ViewChild,
            args: ['editingFilterOptionsScrollableEl', { static: false }]
        }], editingFilterFooterEl: [{
            type: ViewChild,
            args: ['editingFilterFooterEl', { static: false }]
        }], filterExpressionTagField: [{
            type: ViewChild,
            args: ['filterExpressionTagField', { static: false }]
        }], filterExpressionFormControl: [{
            type: ViewChild,
            args: ['filterExpressionTagField', { static: false, read: NgControl }]
        }], editingFilterExpressionTagField: [{
            type: ViewChild,
            args: ['editingFilterExpressionTagField', { static: false }]
        }], applyFiltersByUserActionFooterEl: [{
            type: ViewChild,
            args: ['applyFiltersByUserActionFooterEl']
        }], filtersDropdownWrapper: [{
            type: ViewChild,
            args: ['filtersDropdownWrapper', { static: false }]
        }], filterTags: [{
            type: ViewChild,
            args: ['filterTags', { static: false, read: ElementRef }]
        }], editingFilterExpressionFormControl: [{
            type: ViewChild,
            args: ['editingFilterExpressionTagField', {
                    static: false,
                    read: NgControl
                }]
        }], newFilterNameEditor: [{
            type: ViewChild,
            args: ['newFilterNameEditor', { static: false }]
        }], filterOptionsControls: [{
            type: ViewChildren,
            args: ['filterControls']
        }], filterOptions: [{
            type: Input
        }], savedFilters: [{
            type: Input
        }], enableDefaultSavedFilter: [{
            type: Input
        }], defaultSavedFilterId: [{
            type: Input
        }], busyConfig: [{
            type: Input
        }], activeSavedFilter: [{
            type: Input
        }], disableExpressionEditing: [{
            type: Input
        }], showAnchorButtonLabel: [{
            type: Input
        }], getCustomExpressionTagFieldModel: [{
            type: Input
        }], enableSavedFilters: [{
            type: Input
        }], applyFiltersByUserAction: [{
            type: Input
        }], canCloseDropdownResolver: [{
            type: Input
        }], showTabToolbar: [{
            type: Input
        }], disabledTabResolver: [{
            type: Input
        }], disabledInputResolver: [{
            type: Input
        }], showSelectedFiltersCount: [{
            type: Input
        }], selectedFiltersIndicationStyle: [{
            type: Input
        }], filterOptionsCustomAreaTemplate: [{
            type: Input
        }], showTags: [{
            type: Input
        }], anchorDisabled: [{
            type: Input
        }], fullWidthEdit: [{
            type: Input
        }], translateFilterEditingTitleXPixels: [{
            type: Input
        }], selectedFilters: [{
            type: Input
        }], isLoading: [{
            type: Input
        }], selectedFiltersChange: [{
            type: Output
        }], filterSelectionChange: [{
            type: Output
        }], deleteSavedFilter: [{
            type: Output
        }], createNewFilter: [{
            type: Output
        }], updateSavedFilter: [{
            type: Output
        }], beforeActiveSavedFilterChange: [{
            type: Output
        }], activeSavedFilterChange: [{
            type: Output
        }], removeTag: [{
            type: Output
        }], filtersCleared: [{
            type: Output
        }], saveNewFilterClick: [{
            type: Output
        }], filtersSelectionCanceled: [{
            type: Output
        }], editSavedFilterClick: [{
            type: Output
        }], markDefaultSavedFilterClick: [{
            type: Output
        }], editingSavedFilterCanceled: [{
            type: Output
        }], filterExpressionTagsChanged: [{
            type: Output
        }] }); })();
//# sourceMappingURL=advanced-filter.component.js.map