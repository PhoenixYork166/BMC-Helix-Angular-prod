import { Component, EventEmitter, HostBinding, Output } from '@angular/core';
import { query, transition, trigger, useAnimation } from '@angular/animations';
import { fromEvent } from 'rxjs';
import { ANIMATION_TIMING_FUNCTION, ANIMATION_NAME } from '../common/animation';
import { DismissReasons } from '../common/common.enums';
import { AdaptDockedPanelConfig } from './docked-panel.config';
import * as i0 from "@angular/core";
import * as i1 from "./docked-panel.config";
function AdaptDockedPanelContainerComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "adapt-docked-panel", 3);
    i0.ɵɵlistener("@panelAnimation.done", function AdaptDockedPanelContainerComponent_ng_container_3_Template_adapt_docked_panel_animation_panelAnimation_done_2_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return ctx_r3.closeAnimationEnd($event); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const panel_r2 = ctx.$implicit;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("dp-parent", panel_r2 === ctx_r0.dps.parentDP);
    i0.ɵɵproperty("panel", panel_r2)("content", panel_r2.config.content)("@panelAnimation", undefined);
} }
function AdaptDockedPanelContainerComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelement(2, "div", 4);
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵstyleProp("opacity", ctx_r1.dps.hideBackdrop ? "0" : "1");
    i0.ɵɵproperty("@backdropAnimation", undefined);
} }
export class AdaptDockedPanelContainerComponent {
    constructor(_dpConfig) {
        this._dpConfig = _dpConfig;
        this.position = 'fixed';
        this.top = '0';
        this.left = '0';
        this.right = '0';
        this.bottom = '0';
        this.zIndex = '1050';
        /* eslint-disable-next-line @angular-eslint/no-output-on-prefix */
        this.onPanelClosed = new EventEmitter();
        /* eslint-disable-next-line @angular-eslint/no-output-on-prefix */
        this.onDismiss = new EventEmitter();
    }
    ngOnInit() {
        this._historyChangeEvent = fromEvent(window, 'popstate').subscribe(() => {
            this.dps.closeAllDockedPanels();
        });
    }
    ngOnDestroy() {
        this._historyChangeEvent.unsubscribe();
    }
    closeAnimationEnd(event) {
        if (event.toState === 'void') {
            this.onPanelClosed.emit();
        }
    }
    containerClick(e) {
        if (e.target.classList.contains('dp-container')) {
            e.stopPropagation();
            const panelToDismiss = this.dps.openedPanels[0];
            if (panelToDismiss.config.blockDismiss !== undefined ? panelToDismiss.config.blockDismiss : this._dpConfig.blockDismiss) {
                return;
            }
            this.onDismiss.emit(DismissReasons.BACKDROP_CLICK);
            panelToDismiss.promise.reject(DismissReasons.BACKDROP_CLICK);
        }
    }
}
AdaptDockedPanelContainerComponent.ɵfac = function AdaptDockedPanelContainerComponent_Factory(t) { return new (t || AdaptDockedPanelContainerComponent)(i0.ɵɵdirectiveInject(i1.AdaptDockedPanelConfig)); };
AdaptDockedPanelContainerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptDockedPanelContainerComponent, selectors: [["adapt-docked-panel-container"]], hostVars: 12, hostBindings: function AdaptDockedPanelContainerComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵstyleProp("position", ctx.position)("top", ctx.top)("left", ctx.left)("right", ctx.right)("bottom", ctx.bottom)("z-index", ctx.zIndex);
    } }, outputs: { onPanelClosed: "onPanelClosed", onDismiss: "onDismiss" }, decls: 8, vars: 4, consts: [[3, "click"], [4, "ngFor", "ngForOf"], [3, "opacity", 4, "ngIf"], [3, "panel", "content"], [1, "modal-backdrop", "show"]], template: function AdaptDockedPanelContainerComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtext(0, "\n    ");
        i0.ɵɵelementStart(1, "div", 0);
        i0.ɵɵlistener("click", function AdaptDockedPanelContainerComponent_Template_div_click_1_listener($event) { return ctx.containerClick($event); });
        i0.ɵɵtext(2, "\n      ");
        i0.ɵɵtemplate(3, AdaptDockedPanelContainerComponent_ng_container_3_Template, 4, 5, "ng-container", 1);
        i0.ɵɵtext(4, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(5, "\n\n    ");
        i0.ɵɵtemplate(6, AdaptDockedPanelContainerComponent_div_6_Template, 4, 3, "div", 2);
        i0.ɵɵtext(7, "\n  ");
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵclassMap("dp-container direction-" + ctx.dps.direction);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngForOf", ctx.dps.openedPanels);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.dps.openedPanels.length);
    } }, encapsulation: 2, data: { animation: [
            trigger('panelAnimation', [
                transition('void => *', [
                    useAnimation(ANIMATION_NAME.width, {
                        params: {
                            timingFunction: ANIMATION_TIMING_FUNCTION.base.transitionIn
                        }
                    })
                ]),
                transition('* => void', [
                    useAnimation(ANIMATION_NAME.width, {
                        params: {
                            from: '*',
                            to: '0',
                            timingFunction: ANIMATION_TIMING_FUNCTION.base.transitionOut
                        }
                    })
                ])
            ]),
            trigger('backdropAnimation', [
                transition('void => *', [
                    query('.modal-backdrop', [
                        useAnimation(ANIMATION_NAME.opacity)
                    ])
                ]),
                transition('* => void', [
                    query('.modal-backdrop', [
                        useAnimation(ANIMATION_NAME.opacity, {
                            params: {
                                from: '*',
                                to: '0'
                            }
                        })
                    ])
                ])
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptDockedPanelContainerComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-docked-panel-container',
                template: `
    <div [class]="'dp-container direction-' + dps.direction" (click)="containerClick($event)">
      <ng-container *ngFor="let panel of dps.openedPanels">
        <adapt-docked-panel [panel]="panel"
                            [content]="panel.config.content"
                            [class.dp-parent]="panel === dps.parentDP"
                            [@panelAnimation]
                            (@panelAnimation.done)="closeAnimationEnd($event)"></adapt-docked-panel>
      </ng-container>
    </div>

    <div [@backdropAnimation]
         *ngIf="dps.openedPanels.length"
         [style.opacity]="dps.hideBackdrop ? '0' : '1'">
      <div class="modal-backdrop show"></div>
    </div>
  `,
                animations: [
                    trigger('panelAnimation', [
                        transition('void => *', [
                            useAnimation(ANIMATION_NAME.width, {
                                params: {
                                    timingFunction: ANIMATION_TIMING_FUNCTION.base.transitionIn
                                }
                            })
                        ]),
                        transition('* => void', [
                            useAnimation(ANIMATION_NAME.width, {
                                params: {
                                    from: '*',
                                    to: '0',
                                    timingFunction: ANIMATION_TIMING_FUNCTION.base.transitionOut
                                }
                            })
                        ])
                    ]),
                    trigger('backdropAnimation', [
                        transition('void => *', [
                            query('.modal-backdrop', [
                                useAnimation(ANIMATION_NAME.opacity)
                            ])
                        ]),
                        transition('* => void', [
                            query('.modal-backdrop', [
                                useAnimation(ANIMATION_NAME.opacity, {
                                    params: {
                                        from: '*',
                                        to: '0'
                                    }
                                })
                            ])
                        ])
                    ])
                ]
            }]
    }], function () { return [{ type: i1.AdaptDockedPanelConfig }]; }, { position: [{
            type: HostBinding,
            args: ['style.position']
        }], top: [{
            type: HostBinding,
            args: ['style.top']
        }], left: [{
            type: HostBinding,
            args: ['style.left']
        }], right: [{
            type: HostBinding,
            args: ['style.right']
        }], bottom: [{
            type: HostBinding,
            args: ['style.bottom']
        }], zIndex: [{
            type: HostBinding,
            args: ['style.zIndex']
        }], onPanelClosed: [{
            type: Output
        }], onDismiss: [{
            type: Output
        }] }); })();
//# sourceMappingURL=docked-panel.container.js.map