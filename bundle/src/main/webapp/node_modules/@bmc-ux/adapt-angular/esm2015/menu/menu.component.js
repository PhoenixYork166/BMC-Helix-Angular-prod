import { Component, ElementRef, HostBinding, Input, Renderer2, ViewEncapsulation } from '@angular/core';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularCustomEventType, AdaptRadarAngularService, AdaptRadarAngularGenericDirective } from '../common/radar/adapt-radar';
import { MenuInnerService } from './menu.service';
import { AdaptDeviceDetectionService } from '../common/device-detection.service';
import { MenuGlobalService } from './menu-global.service';
import { AdaptTranslateService } from '../common/i18n/index';
import * as i0 from "@angular/core";
import * as i1 from "./menu.service";
import * as i2 from "./menu-global.service";
import * as i3 from "../common/device-detection.service";
import * as i4 from "../common/i18n/index";
import * as i5 from "../common/radar/adapt-radar";
import * as i6 from "@angular/common";
import * as i7 from "./submenu/submenu.component";
import * as i8 from "../common/focus-monitor.directive";
import * as i9 from "@angular/router";
import * as i10 from "./menu-mobile-view/menu-mobile-view.component";
const _c0 = function (a0) { return { "not-allowed": a0 }; };
const _c1 = function (a0) { return { "m-start-2": a0 }; };
function AdaptMenuComponent_ng_container_5_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "div", 3);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementStart(4, "button", 4);
    i0.ɵɵtext(5, "\n            ");
    i0.ɵɵelementStart(6, "span", 5);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n            ");
    i0.ɵɵelement(9, "span", 6);
    i0.ɵɵtext(10, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("node", ctx_r3.cascadeItem)("theme", ctx_r3.bodyTheme)("closePrevious", ctx_r3.closePrevious)("filteringConfig", ctx_r3.filteringConfig)("makeItemActive", ctx_r3.makeItemActive)("ngClass", i0.ɵɵpureFunction1(13, _c0, ctx_r3.cascadeItem.disabled));
    i0.ɵɵadvance(2);
    i0.ɵɵclassMapInterpolate1("adapt-menu__link btn btn-link disabled-item disabled ", ctx_r3.cascadeItem.className, "");
    i0.ɵɵproperty("adaptFocusMonitor", ctx_r3.cascadeItem.id);
    i0.ɵɵattribute("data-testid", ctx_r3.generateMenuItemTestID(ctx_r3.cascadeItem));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(15, _c1, ctx_r3.cascadeItem.className));
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r3.cascadeItem.label);
} }
function AdaptMenuComponent_ng_container_5_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "button", 7);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementStart(4, "span", 5);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵclassMapInterpolate1("adapt-menu__link btn btn-link disabled-item disabled ", ctx_r4.cascadeItem.className, "");
    i0.ɵɵproperty("adaptFocusMonitor", ctx_r4.cascadeItem.id);
    i0.ɵɵattribute("data-testid", ctx_r4.generateMenuItemTestID(ctx_r4.cascadeItem));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(7, _c1, ctx_r4.cascadeItem.className));
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r4.cascadeItem.label);
} }
function AdaptMenuComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptMenuComponent_ng_container_5_ng_container_2_Template, 13, 17, "ng-container", 2);
    i0.ɵɵtext(3, "\n\n      ");
    i0.ɵɵtemplate(4, AdaptMenuComponent_ng_container_5_ng_container_4_Template, 8, 9, "ng-container", 2);
    i0.ɵɵtext(5, "\n    ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.cascadeItem.items && !ctx_r0.cascadeItem.hide);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r0.cascadeItem.items && !ctx_r0.cascadeItem.hide);
} }
const _c2 = function (a0) { return { "active": a0 }; };
function AdaptMenuComponent_ng_container_8_ng_container_2_a_2_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 11);
    i0.ɵɵlistener("click", function AdaptMenuComponent_ng_container_8_ng_container_2_a_2_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(3); return ctx_r10.handleMenuLinkClick(ctx_r10.cascadeItem); });
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "span", 5);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext(3);
    i0.ɵɵclassMapInterpolate1("adapt-menu__link ", ctx_r7.cascadeItem.className, "");
    i0.ɵɵproperty("adaptFocusMonitor", ctx_r7.cascadeItem.id)("ngClass", i0.ɵɵpureFunction1(10, _c2, ctx_r7.cascadeItem.active));
    i0.ɵɵattribute("data-testid", ctx_r7.generateMenuItemTestID(ctx_r7.cascadeItem))("href", ctx_r7.cascadeItem.link, i0.ɵɵsanitizeUrl)("target", ctx_r7.cascadeItem.target);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(12, _c1, ctx_r7.cascadeItem.className));
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r7.cascadeItem.label);
} }
function AdaptMenuComponent_ng_container_8_ng_container_2_a_4_Template(rf, ctx) { if (rf & 1) {
    const _r14 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 12, 13);
    i0.ɵɵlistener("click", function AdaptMenuComponent_ng_container_8_ng_container_2_a_4_Template_a_click_0_listener() { i0.ɵɵrestoreView(_r14); const ctx_r13 = i0.ɵɵnextContext(3); return ctx_r13.handleMenuRouteClick(ctx_r13.cascadeItem); });
    i0.ɵɵtext(2, "\n          ");
    i0.ɵɵelementStart(3, "span", 5);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r12 = i0.ɵɵreference(1);
    const ctx_r8 = i0.ɵɵnextContext(3);
    i0.ɵɵclassMapInterpolate1("adapt-menu__link ", ctx_r8.cascadeItem.className, "");
    i0.ɵɵpropertyInterpolate("routerLink", ctx_r8.cascadeItem.routerLink);
    i0.ɵɵproperty("adaptFocusMonitor", ctx_r8.cascadeItem.id);
    i0.ɵɵattribute("aria-current", _r12.isActive ? "page" : undefined)("data-testid", ctx_r8.generateMenuItemTestID(ctx_r8.cascadeItem));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(9, _c1, ctx_r8.cascadeItem.className));
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r8.cascadeItem.label);
} }
const _c3 = function (a0, a1) { return { "active": a0, "selected": a1 }; };
function AdaptMenuComponent_ng_container_8_ng_container_2_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r16 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 14);
    i0.ɵɵlistener("click", function AdaptMenuComponent_ng_container_8_ng_container_2_button_6_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r16); const ctx_r15 = i0.ɵɵnextContext(3); return ctx_r15.handleMenuActionClick($event, ctx_r15.cascadeItem); });
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "span", 5);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext(3);
    i0.ɵɵclassMapInterpolate1("adapt-menu__link btn btn-link ", ctx_r9.cascadeItem.className, "");
    i0.ɵɵproperty("adaptFocusMonitor", ctx_r9.cascadeItem.id)("ngClass", i0.ɵɵpureFunction2(8, _c3, ctx_r9.cascadeItem.active, ctx_r9.cascadeItem.selected));
    i0.ɵɵattribute("data-testid", ctx_r9.generateMenuItemTestID(ctx_r9.cascadeItem));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(11, _c1, ctx_r9.cascadeItem.className));
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r9.cascadeItem.label);
} }
function AdaptMenuComponent_ng_container_8_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptMenuComponent_ng_container_8_ng_container_2_a_2_Template, 5, 14, "a", 8);
    i0.ɵɵtext(3, "\n\n        ");
    i0.ɵɵtemplate(4, AdaptMenuComponent_ng_container_8_ng_container_2_a_4_Template, 6, 11, "a", 9);
    i0.ɵɵtext(5, "\n\n        ");
    i0.ɵɵtemplate(6, AdaptMenuComponent_ng_container_8_ng_container_2_button_6_Template, 5, 13, "button", 10);
    i0.ɵɵtext(7, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r5.cascadeItem.link);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r5.cascadeItem.routerLink);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r5.cascadeItem.action);
} }
function AdaptMenuComponent_ng_container_8_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    const _r18 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "div", 15);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementStart(4, "button", 16);
    i0.ɵɵlistener("click", function AdaptMenuComponent_ng_container_8_ng_container_4_Template_button_click_4_listener() { i0.ɵɵrestoreView(_r18); const ctx_r17 = i0.ɵɵnextContext(2); return ctx_r17.handleMenuRootItemClick(ctx_r17.cascadeItem); });
    i0.ɵɵtext(5, "\n\n            ");
    i0.ɵɵelementStart(6, "span", 5);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n            ");
    i0.ɵɵelement(9, "span", 6);
    i0.ɵɵtext(10, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("node", ctx_r6.cascadeItem)("theme", ctx_r6.bodyTheme)("closePrevious", ctx_r6.closePrevious)("filteringConfig", ctx_r6.filteringConfig)("makeItemActive", ctx_r6.makeItemActive)("analyticsMetadata", ctx_r6.analyticsMetadata);
    i0.ɵɵadvance(2);
    i0.ɵɵclassMapInterpolate1("adapt-menu__link btn btn-link ", ctx_r6.cascadeItem.className, "");
    i0.ɵɵproperty("adaptFocusMonitor", ctx_r6.cascadeItem.id)("ngClass", i0.ɵɵpureFunction1(14, _c2, ctx_r6.cascadeItem.active));
    i0.ɵɵattribute("data-testid", ctx_r6.generateMenuItemTestID(ctx_r6.cascadeItem));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(16, _c1, ctx_r6.cascadeItem.className));
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r6.cascadeItem.label);
} }
function AdaptMenuComponent_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptMenuComponent_ng_container_8_ng_container_2_Template, 8, 3, "ng-container", 2);
    i0.ɵɵtext(3, "\n\n      ");
    i0.ɵɵtemplate(4, AdaptMenuComponent_ng_container_8_ng_container_4_Template, 13, 18, "ng-container", 2);
    i0.ɵɵtext(5, "\n    ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r1.cascadeItem.items && !ctx_r1.cascadeItem.hide);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r1.cascadeItem.items && !ctx_r1.cascadeItem.hide);
} }
function AdaptMenuComponent_adapt_menu_mobile_view_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-menu-mobile-view");
} }
const _c4 = function (a0, a1, a2, a3) { return { "dark": a0, "white": a1, "grey": a2, "custom": a3 }; };
let count = 0;
export class AdaptMenuComponent extends AdaptRadarAngularGenericDirective {
    constructor(_menuInnerService, _menuGlobalService, deviceDetection, _renderer, ts, _adaptRadarService, _elem) {
        super(_adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptMenu);
        this._menuInnerService = _menuInnerService;
        this._menuGlobalService = _menuGlobalService;
        this.deviceDetection = deviceDetection;
        this._renderer = _renderer;
        this.ts = ts;
        this._adaptRadarService = _adaptRadarService;
        /**
         * When specified, previously opened submenu will be automatically closed after new submenu opened
         * @docs-default true
         */
        this.closePrevious = true;
        /**
         * @docs-default
         */
        this.analyticsMetadata = null;
        /**
         * When specified, the submenu items will be attached to the body
         * @docs-default false
         */
        this.appendToBody = false;
        /**
         * @docs-default false
         */
        this.connectMenus = false;
        /**
         * Control possibility to set menu item as active. Can be useful when you don't need to connect menu with your routing
         * @since 10.15.0
         * @docs-default true
         */
        this.makeItemActive = true;
        this.defaultHostClass = true;
        this._headerTheme = '';
        this._bodyTheme = '';
        this._defaultTexts = {};
        this._defaultMobileTexts = {};
        this.id = `adapt-menu-${count++}`;
        this.setDefaultTexts(ts.getCurrentLanguage());
    }
    /**
     * Set color theme for root menu item. Supported values: 'dark', 'grey', 'white'
     * @docs-default dark
     */
    set headerTheme(v) {
        switch (v.toLowerCase()) {
            case 'grey':
                this._headerTheme = 'grey';
                break;
            case 'white':
                this._headerTheme = 'white';
                break;
            case 'dark':
                this._headerTheme = 'dark';
                break;
            case '':
                this._headerTheme = 'dark';
                break;
            default:
                this._headerTheme = 'custom';
        }
    }
    get headerTheme() {
        return this._headerTheme;
    }
    /**
     * Set color theme for submenu items. Supported values: 'dark', 'grey', 'white'
     * @docs-default dark
     */
    set bodyTheme(v) {
        switch (v.toLowerCase()) {
            case 'grey':
                this._bodyTheme = 'grey';
                break;
            case 'white':
                this._bodyTheme = 'white';
                break;
            case 'dark':
                this._bodyTheme = 'dark';
                break;
            case '':
                this._bodyTheme = 'dark';
                break;
            default:
                this._bodyTheme = 'custom';
        }
    }
    get bodyTheme() {
        return this._bodyTheme;
    }
    get mobileHostClass() {
        return this.isMobile;
    }
    get isMobile() {
        return this.deviceDetection.deviceMobile();
    }
    get cascade() {
        return this._menuInnerService.cascadeChain;
    }
    ngOnInit() {
        this.mobileViewTexts = Object.assign(Object.assign({}, this._defaultMobileTexts), this.mobileViewTexts);
        const config = this;
        this._menuInnerService.init(config);
        if (this.connectMenus) {
            this._menuGlobalService.connectNodes(this.cascadeItem);
        }
        this.filteringConfig = Object.assign(Object.assign({}, this._defaultTexts), this.filteringConfig);
    }
    ngOnDestroy() {
        if (this.connectMenus) {
            this._menuGlobalService.destroyConnectNodes();
        }
    }
    setDefaultTexts(translation) {
        this._defaultTexts.placeholder = translation['adapt.common.filter'];
        this._defaultTexts.resultsTitle = translation['adapt.menu.resultsTitle'];
        this._defaultTexts.title = translation['adapt.menu.title'];
        this._defaultTexts.notFoundText = translation['adapt.menu.notFoundText'];
        this._defaultTexts.btnClearText = translation['adapt.common.clear'];
        this._defaultMobileTexts.backBtn = translation['adapt.common.back'];
        this._defaultMobileTexts.cancelBtn = translation['adapt.common.cancel'];
    }
    selectMenuItem() {
        if (this.makeItemActive) {
            this._menuGlobalService.selectMenuItem(this.cascadeItem);
        }
    }
    getCascadeLength() {
        return this._menuInnerService.getCascadeLength();
    }
    handleMenuRootItemClick(item) {
        var _a, _b, _c;
        /* TODO: Do we need to send event here? */
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptMenu, {
            EventType: AdaptRadarAngularCustomEventType.Click,
            ParentComponent: (_a = this.analyticsMetadata) === null || _a === void 0 ? void 0 : _a.parentComponentName,
            Name: item.name || item.label,
            Disabled: item.disabled,
            Type: 'menu',
            SiblingsOptionsCount: (_b = this.analyticsMetadata) === null || _b === void 0 ? void 0 : _b.siblingsCount,
            HiddenSiblingsOptionsCount: (_c = this.analyticsMetadata) === null || _c === void 0 ? void 0 : _c.hiddenSiblingsCount
        });
    }
    handleMenuLinkClick(item) {
        var _a, _b, _c;
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptMenu, {
            EventType: AdaptRadarAngularCustomEventType.Click,
            ParentComponent: (_a = this.analyticsMetadata) === null || _a === void 0 ? void 0 : _a.parentComponentName,
            Name: item.name || item.label,
            Disabled: item.disabled,
            Type: 'link',
            SiblingsOptionsCount: (_b = this.analyticsMetadata) === null || _b === void 0 ? void 0 : _b.siblingsCount,
            HiddenSiblingsOptionsCount: (_c = this.analyticsMetadata) === null || _c === void 0 ? void 0 : _c.hiddenSiblingsCount
        });
    }
    handleMenuRouteClick(item) {
        var _a, _b, _c;
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptMenu, {
            EventType: AdaptRadarAngularCustomEventType.Click,
            ParentComponent: (_a = this.analyticsMetadata) === null || _a === void 0 ? void 0 : _a.parentComponentName,
            Name: item.name || item.label,
            Disabled: item.disabled,
            Type: 'route',
            SiblingsOptionsCount: (_b = this.analyticsMetadata) === null || _b === void 0 ? void 0 : _b.siblingsCount,
            HiddenSiblingsOptionsCount: (_c = this.analyticsMetadata) === null || _c === void 0 ? void 0 : _c.hiddenSiblingsCount
        });
        this.selectMenuItem();
    }
    handleMenuActionClick(event, item) {
        var _a, _b, _c;
        this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptMenu, {
            EventType: AdaptRadarAngularCustomEventType.Click,
            ParentComponent: (_a = this.analyticsMetadata) === null || _a === void 0 ? void 0 : _a.parentComponentName,
            Name: item.name || item.label,
            Disabled: item.disabled,
            Type: 'action',
            SiblingsOptionsCount: (_b = this.analyticsMetadata) === null || _b === void 0 ? void 0 : _b.siblingsCount,
            HiddenSiblingsOptionsCount: (_c = this.analyticsMetadata) === null || _c === void 0 ? void 0 : _c.hiddenSiblingsCount
        });
        this.selectMenuItem();
        item.action(event, item.id);
    }
    generateMenuItemTestID(item) {
        if (!item.testID) {
            item.testID = `menu-item-test-id-${count}`;
        }
        return item.testID;
    }
}
AdaptMenuComponent.ɵfac = function AdaptMenuComponent_Factory(t) { return new (t || AdaptMenuComponent)(i0.ɵɵdirectiveInject(i1.MenuInnerService), i0.ɵɵdirectiveInject(i2.MenuGlobalService), i0.ɵɵdirectiveInject(i3.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i4.AdaptTranslateService), i0.ɵɵdirectiveInject(i5.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptMenuComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptMenuComponent, selectors: [["adapt-menu"]], hostVars: 5, hostBindings: function AdaptMenuComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵhostProperty("id", ctx.id);
        i0.ɵɵclassProp("adapt-menu", ctx.defaultHostClass)("is-mobile", ctx.mobileHostClass);
    } }, inputs: { cascadeItem: "cascadeItem", filteringConfig: "filteringConfig", closePrevious: "closePrevious", analyticsMetadata: "analyticsMetadata", headerTheme: "headerTheme", bodyTheme: "bodyTheme", mobileViewTexts: "mobileViewTexts", appendToBody: "appendToBody", connectMenus: "connectMenus", makeItemActive: "makeItemActive" }, features: [i0.ɵɵProvidersFeature([MenuInnerService]), i0.ɵɵInheritDefinitionFeature], decls: 15, vars: 9, consts: [[1, "adapt-menu-item__container"], [1, "adapt-menu-item", 3, "ngClass"], [4, "ngIf"], ["adaptMenu", "", 3, "node", "theme", "closePrevious", "filteringConfig", "makeItemActive", "ngClass"], ["adaptMenuAnchor", "", "type", "button", 3, "adaptFocusMonitor"], [1, "a-menu__text", 3, "ngClass"], [1, "adapt-menu__link-toggle", "m-start-1"], ["type", "button", 3, "adaptFocusMonitor"], [3, "adaptFocusMonitor", "class", "ngClass", "click", 4, "ngIf"], ["routerLinkActive", "selected", 3, "adaptFocusMonitor", "class", "routerLink", "click", 4, "ngIf"], ["type", "button", 3, "adaptFocusMonitor", "class", "ngClass", "click", 4, "ngIf"], [3, "adaptFocusMonitor", "ngClass", "click"], ["routerLinkActive", "selected", 3, "adaptFocusMonitor", "routerLink", "click"], ["routerLinkRef", "routerLinkActive"], ["type", "button", 3, "adaptFocusMonitor", "ngClass", "click"], ["adaptMenu", "", 3, "node", "theme", "closePrevious", "filteringConfig", "makeItemActive", "analyticsMetadata"], ["adaptMenuAnchor", "", "type", "button", 3, "adaptFocusMonitor", "ngClass", "click"]], template: function AdaptMenuComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵtext(1, "\n\n  ");
        i0.ɵɵelementStart(2, "div", 1);
        i0.ɵɵtext(3, "\n\n    ");
        i0.ɵɵtext(4, "\n    ");
        i0.ɵɵtemplate(5, AdaptMenuComponent_ng_container_5_Template, 6, 2, "ng-container", 2);
        i0.ɵɵtext(6, "\n\n    ");
        i0.ɵɵtext(7, "\n    ");
        i0.ɵɵtemplate(8, AdaptMenuComponent_ng_container_8_Template, 6, 2, "ng-container", 2);
        i0.ɵɵtext(9, "\n\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(10, "\n\n  ");
        i0.ɵɵtext(11, "\n  ");
        i0.ɵɵtemplate(12, AdaptMenuComponent_adapt_menu_mobile_view_12_Template, 1, 0, "adapt-menu-mobile-view", 2);
        i0.ɵɵtext(13, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(14, "\n");
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction4(4, _c4, ctx.headerTheme === "dark", ctx.headerTheme === "white", ctx.headerTheme === "grey", ctx.headerTheme === "custom"));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.cascadeItem.disabled);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", !ctx.cascadeItem.disabled);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", ctx.isMobile && ctx.getCascadeLength());
    } }, directives: [i6.NgClass, i6.NgIf, i7.AdaptMenuDirective, i7.AdaptMenuAnchorDirective, i8.AdaptFocusMonitorDirective, i9.RouterLinkWithHref, i9.RouterLinkActive, i10.AdaptMenuMobileViewComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptMenuComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-menu',
                templateUrl: './menu.component.html',
                providers: [MenuInnerService],
                encapsulation: ViewEncapsulation.None,
            }]
    }], function () { return [{ type: i1.MenuInnerService }, { type: i2.MenuGlobalService }, { type: i3.AdaptDeviceDetectionService }, { type: i0.Renderer2 }, { type: i4.AdaptTranslateService }, { type: i5.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { cascadeItem: [{
            type: Input
        }], filteringConfig: [{
            type: Input
        }], closePrevious: [{
            type: Input
        }], analyticsMetadata: [{
            type: Input
        }], headerTheme: [{
            type: Input
        }], bodyTheme: [{
            type: Input
        }], mobileViewTexts: [{
            type: Input
        }], appendToBody: [{
            type: Input
        }], connectMenus: [{
            type: Input
        }], makeItemActive: [{
            type: Input
        }], defaultHostClass: [{
            type: HostBinding,
            args: ['class.adapt-menu']
        }], mobileHostClass: [{
            type: HostBinding,
            args: ['class.is-mobile']
        }], id: [{
            type: HostBinding,
            args: ['id']
        }] }); })();
//# sourceMappingURL=menu.component.js.map