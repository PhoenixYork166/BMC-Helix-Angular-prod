import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, Input, NgZone, Renderer2, TemplateRef, ViewChild, ViewEncapsulation } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import { Directionality } from '@angular/cdk/bidi';
import { SafeCdr } from '../../common/safe-cdr';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/bidi";
import * as i2 from "@angular/common";
import * as i3 from "../../icon/icon.component";
import * as i4 from "../../popover/popover.directive";
const _c0 = ["content"];
const _c1 = ["titleEl"];
const _c2 = ["subTitleEl"];
function AdaptWorkflowStepComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 7);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelement(2, "adapt-icon", 8);
    i0.ɵɵtext(3, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", ctx_r1.icon);
} }
function AdaptWorkflowStepComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 9);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "span", null, 10);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r2.title);
} }
function AdaptWorkflowStepComponent_p_9_adapt_icon_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 14);
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", ctx_r8.subTitleIcon);
} }
function AdaptWorkflowStepComponent_p_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 11);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "span", null, 12);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵtemplate(6, AdaptWorkflowStepComponent_p_9_adapt_icon_6_Template, 1, 2, "adapt-icon", 13);
    i0.ɵɵtext(7, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("adaptPopover", ctx_r3.popoverContent ? ctx_r3.popoverContent : "")("container", ctx_r3.popoverContainer ? ctx_r3.popoverContainer : "")("placement", ctx_r3.popoverPlacement);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r3.subTitle);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r3.subTitle && ctx_r3.subTitleIcon);
} }
function AdaptWorkflowStepComponent_p_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 15);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "span", null, 12);
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r4.subTitle);
} }
function AdaptWorkflowStepComponent_button_16_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "button", 16);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelement(2, "adapt-icon", 8);
    i0.ɵɵtext(3, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("is-collapsed", !ctx_r5.rotateCollapsedIcon);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", "angle_down");
} }
const _c3 = ["*"];
export class AdaptWorkflowStepComponent {
    constructor(dir, _el, _ngZone, _renderer, _changeDetector) {
        this.dir = dir;
        this._el = _el;
        this._ngZone = _ngZone;
        this._renderer = _renderer;
        this._changeDetector = _changeDetector;
        this.isVertical = false;
        /**
         * Sets the CSS class for the component.
         * @docs-default ''
         */
        this.mainCls = '';
        /**
         * Sets the size of the component
         * @docs-default medium
         */
        this.size = 'medium';
        /**
         * Sets the active state for the component
         * @docs-default false
         */
        this.active = false;
        /**
         * @docs-default false
         */
        this.completed = false;
        /* eslint-disable @angular-eslint/no-input-rename */
        /**
         * Sets the title icon of the component. Depends on DPl-Iconfont
         * @docs-default ''
         */
        this.icon = '';
        /**
         * Sets the sub title icon of the component. Depends on DPl-Iconfont
         * @docs-default angle_down
         */
        this.subTitleIcon = 'angle_down';
        /* eslint-enable @typescript-eslint/no-explicit-any */
        /**
         * Placement of a popover. Accepts: "top", "bottom", "left", "right"
         * @docs-default bottom
         */
        this.popoverPlacement = 'bottom';
        /**
         * Allows to use accordion behave instead of popovers
         * @docs-default false
         */
        this.collapsed = false;
        /**
         * Allows to use animation effect for the accordion icon
         * @docs-default false
         */
        this.rotateCollapsedIcon = false;
        // TODO: Refactor this if possible
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        this._workflowCssClasses = {
            verticalItem: 'a-workflow__step',
            wrapper: 'a-workflow-bar__flex',
            dots: 'a-workflow__dot',
            isHover: 'is-hover',
            stepContent: 'a-workflow__stepper-content'
        };
        this._destroyed$ = new ReplaySubject(1);
    }
    /**
     * Sets the title of the component
     * @docs-default undefined
     */
    get title() {
        return this._title;
    }
    set title(v) {
        this._title = v;
    }
    /**
     * Sets the description/sub title of the component
     * @docs-default undefined
     */
    get subTitle() {
        return this._subTitle;
    }
    set subTitle(v) {
        this._subTitle = v;
    }
    get hostClasses() {
        return [
            'a-workflow__step',
            this.dir.value === 'rtl' ? 'is-rtl' : '',
            this.type === 'success' ? 'is-success' : '',
            this.type === 'warning' ? 'is-warning' : '',
            this.type === 'info' ? 'is-info' : '',
            this.type === 'danger' ? 'is-danger' : '',
            this.active ? 'is-active' : '',
            this.size === 'small' ? 'is-small' : '',
            this.size === 'medium' ? 'is-medium' : '',
            this.size === 'large' ? 'is-large' : '',
            this.completed ? 'is-completed' : '',
            this.mainCls
        ].join(' ');
    }
    ngOnInit() {
        this._ngZone.onStable
            .pipe(take(1), takeUntil(this._destroyed$))
            .subscribe(() => {
            if (this._el) {
                this.alignStepByCenter();
                this.parent = this._el.nativeElement.parentElement;
                this.isVertical = this._el.nativeElement.parentElement.classList.contains(this._workflowCssClasses.stepContent);
                SafeCdr.markForCheck(this._changeDetector);
            }
        });
    }
    ngOnDestroy() {
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
    onMouseOver(e) {
        if (this.isVertical) {
            this.queryDots(e.target);
            this.toggleHoverState();
        }
    }
    onMouseLeave() {
        if (this.isVertical) {
            this.toggleHoverState();
            SafeCdr.markForCheck(this._changeDetector);
        }
    }
    toggleHoverState() {
        if (this.dots) {
            this.dots.classList.toggle(this._workflowCssClasses.isHover);
        }
    }
    queryDots(target) {
        const queryList = Array.from(this.parent.querySelectorAll(`.${this._workflowCssClasses.verticalItem}`));
        const index = queryList.indexOf(target.parentElement);
        if (index > -1) {
            const wrapper = this.parent.previousElementSibling.querySelector(`.${this._workflowCssClasses.wrapper}`);
            this.dots = wrapper.querySelectorAll(`.${this._workflowCssClasses.dots}`)[index];
        }
    }
    isRtl() {
        return this.dir.value === 'rtl';
    }
    alignStepByCenter() {
        let titleWidth = 0;
        let subTitleWidth = 0;
        if (this._el && this.titleEl && this.content) {
            if (this._el.nativeElement.parentElement.classList.contains('a-workflow__stepper-content')) {
                return;
            }
            const { clientWidth } = this._el.nativeElement;
            const prev = this._el.nativeElement.parentElement.previousElementSibling;
            const next = this._el.nativeElement.parentElement.nextElementSibling;
            const { nativeElement } = this.content;
            const titlePrevElem = this.titleEl.nativeElement.previousElementSibling;
            const titleClientWidth = this.titleEl.nativeElement.clientWidth;
            const isContainsBar = () => next.classList.contains('adapt-workflow-bar');
            let subTitleNextElem;
            let subTitleClientWidth = 0;
            if (this.subTitleEl) {
                subTitleNextElem = this.subTitleEl.nativeElement.nextElementSibling;
                subTitleClientWidth = this.subTitleEl.nativeElement.clientWidth;
            }
            titlePrevElem ?
                titleWidth = titleClientWidth + titlePrevElem.clientWidth :
                titleWidth = titleClientWidth;
            subTitleNextElem ?
                subTitleWidth = subTitleClientWidth + subTitleNextElem.clientWidth :
                subTitleWidth = subTitleClientWidth;
            titleWidth < subTitleWidth ?
                clientWidth > subTitleWidth && prev && !isContainsBar() ?
                    this._setStyle(nativeElement, `${Math.abs(Math.ceil((clientWidth - subTitleWidth) / 2))}px`) :
                    this._setStyle(nativeElement, '') :
                clientWidth > titleWidth && prev && !isContainsBar() ?
                    this._setStyle(nativeElement, `${Math.abs(Math.ceil((clientWidth - titleWidth) / 2))}px`) :
                    this._setStyle(nativeElement, '');
            if (next && isContainsBar()) {
                this._renderer.addClass(this._el.nativeElement, 'is-last');
            }
        }
    }
    ngOnChanges(changes) {
        if (changes.size && changes.size.previousValue !== changes.size.currentValue) {
            this._ngZone.onStable
                .pipe(take(1), takeUntil(this._destroyed$))
                .subscribe(() => this.alignStepByCenter());
        }
    }
    _setStyle(el, value) {
        this._renderer.setStyle(el, this.isRtl() ? 'paddingRight' : 'paddingLeft', value);
    }
}
AdaptWorkflowStepComponent.ɵfac = function AdaptWorkflowStepComponent_Factory(t) { return new (t || AdaptWorkflowStepComponent)(i0.ɵɵdirectiveInject(i1.Directionality), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
AdaptWorkflowStepComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptWorkflowStepComponent, selectors: [["adapt-workflow-step"]], viewQuery: function AdaptWorkflowStepComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 5);
        i0.ɵɵviewQuery(_c2, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.content = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.titleEl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.subTitleEl = _t.first);
    } }, hostVars: 2, hostBindings: function AdaptWorkflowStepComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassMap(ctx.hostClasses);
    } }, inputs: { mainCls: "mainCls", size: "size", type: "type", active: "active", completed: "completed", icon: ["title-icon", "icon"], subTitleIcon: ["sub-title-icon", "subTitleIcon"], popoverContent: "popoverContent", popoverPlacement: "popoverPlacement", popoverContainer: "popoverContainer", collapsed: "collapsed", rotateCollapsedIcon: "rotateCollapsedIcon", title: "title", subTitle: ["sub-title", "subTitle"] }, features: [i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c3, decls: 19, vars: 5, consts: [[1, "a-workflow__step-content", 3, "mouseenter", "mouseleave"], ["content", ""], ["class", "a-workflow__step-icon", 4, "ngIf"], ["class", "a-workflow__step-title", 4, "ngIf"], ["class", "a-workflow__step-sub", 3, "adaptRadarDisableEventSending", "adaptPopover", "container", "placement", 4, "ngIf"], ["class", "a-workflow__step-sub", 4, "ngIf"], ["type", "button", "class", "a-workflow__step-down", 3, "is-collapsed", 4, "ngIf"], [1, "a-workflow__step-icon"], [3, "adaptRadarDisableEventSending", "name"], [1, "a-workflow__step-title"], ["titleEl", ""], [1, "a-workflow__step-sub", 3, "adaptRadarDisableEventSending", "adaptPopover", "container", "placement"], ["subTitleEl", ""], ["class", "a-workflow__step-sub_icon mx-1", 3, "adaptRadarDisableEventSending", "name", 4, "ngIf"], [1, "a-workflow__step-sub_icon", "mx-1", 3, "adaptRadarDisableEventSending", "name"], [1, "a-workflow__step-sub"], ["type", "button", 1, "a-workflow__step-down"]], template: function AdaptWorkflowStepComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "div", 0, 1);
        i0.ɵɵlistener("mouseenter", function AdaptWorkflowStepComponent_Template_div_mouseenter_0_listener($event) { return ctx.onMouseOver($event); })("mouseleave", function AdaptWorkflowStepComponent_Template_div_mouseleave_0_listener() { return ctx.onMouseLeave(); });
        i0.ɵɵtext(2, "\n  ");
        i0.ɵɵtemplate(3, AdaptWorkflowStepComponent_div_3_Template, 4, 2, "div", 2);
        i0.ɵɵtext(4, "\n\n  ");
        i0.ɵɵelementStart(5, "div");
        i0.ɵɵtext(6, "\n    ");
        i0.ɵɵtemplate(7, AdaptWorkflowStepComponent_div_7_Template, 6, 1, "div", 3);
        i0.ɵɵtext(8, "\n\n    ");
        i0.ɵɵtemplate(9, AdaptWorkflowStepComponent_p_9_Template, 8, 6, "p", 4);
        i0.ɵɵtext(10, "\n\n    ");
        i0.ɵɵtemplate(11, AdaptWorkflowStepComponent_p_11_Template, 6, 1, "p", 5);
        i0.ɵɵtext(12, "\n\n    ");
        i0.ɵɵprojection(13);
        i0.ɵɵtext(14, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(15, "\n\n  ");
        i0.ɵɵtemplate(16, AdaptWorkflowStepComponent_button_16_Template, 4, 4, "button", 6);
        i0.ɵɵtext(17, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(18, "\n\n");
    } if (rf & 2) {
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.icon && ctx.icon.length > 0);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", ctx.title);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx.collapsed && ctx.subTitle);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.collapsed && ctx.subTitle);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngIf", ctx.collapsed);
    } }, directives: [i2.NgIf, i3.AdaptIconComponent, i4.AdaptPopoverDirective], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptWorkflowStepComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-workflow-step',
                templateUrl: './workflow-step.html',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: i1.Directionality }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, { mainCls: [{
            type: Input
        }], size: [{
            type: Input
        }], type: [{
            type: Input
        }], active: [{
            type: Input
        }], completed: [{
            type: Input
        }], icon: [{
            type: Input,
            args: ['title-icon']
        }], subTitleIcon: [{
            type: Input,
            args: ['sub-title-icon']
        }], popoverContent: [{
            type: Input
        }], popoverPlacement: [{
            type: Input
        }], popoverContainer: [{
            type: Input
        }], collapsed: [{
            type: Input
        }], rotateCollapsedIcon: [{
            type: Input
        }], content: [{
            type: ViewChild,
            args: ['content', { static: true }]
        }], titleEl: [{
            type: ViewChild,
            args: ['titleEl']
        }], subTitleEl: [{
            type: ViewChild,
            args: ['subTitleEl']
        }], title: [{
            type: Input
        }], subTitle: [{
            type: Input,
            args: ['sub-title']
        }], hostClasses: [{
            type: HostBinding,
            args: ['class']
        }] }); })();
//# sourceMappingURL=workflow-step.js.map