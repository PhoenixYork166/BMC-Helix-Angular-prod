export const FOCUSABLE_ELEMENTS = [
    'a[href]:not([tabindex="-1"])',
    'button:not([tabindex="-1"])',
    'input:not([tabindex="-1"])',
    'textarea:not([tabindex="-1"])',
    'select:not([tabindex="-1"])',
    '[tabindex]:not([tabindex="-1"])',
    '[contentEditable=true]:not([tabindex="-1"])'
];
/**
 * The function returns all the focusable elements in the passed container
 * By default it is skip disabled elements
 *
 * Keep in mind that the disabled attribute can be used on the following elements:
 * - <button>
 * - <fieldset>
 * - <input>
 * - <optgroup>
 * - <option>
 * - <select>
 * - <textarea>
 */
export function getFocusableElements(element, skipDisabled = true) {
    const focusableElements = Array.from(element.querySelectorAll(FOCUSABLE_ELEMENTS.join(',')));
    return skipDisabled ? focusableElements.filter(elem => {
        // <a> and <div> can't use [disabled] according to HTML standard.
        // So check if element has disabled property directly, not via hasAttribute
        return !elem.disabled;
    }) : focusableElements;
}
//# sourceMappingURL=focus.js.map