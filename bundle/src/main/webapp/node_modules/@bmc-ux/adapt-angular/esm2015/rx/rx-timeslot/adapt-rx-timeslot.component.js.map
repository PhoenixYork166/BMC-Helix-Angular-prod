{"version":3,"file":"adapt-rx-timeslot.component.js","sourceRoot":"","sources":["../../../../../../libs/adapt-angular/src/rx/rx-timeslot/adapt-rx-timeslot.component.ts","../../../../../../libs/adapt-angular/src/rx/rx-timeslot/adapt-rx-timeslot.component.html"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnChanges,\n  Optional,\n  Output,\n  QueryList,\n  Renderer2,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewChildren,\n  ViewEncapsulation\n} from '@angular/core';\nimport {transition, trigger, useAnimation} from '@angular/animations';\nimport {NgControl} from '@angular/forms';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  AdaptRadarAngularCustomEventName,\n  AdaptRadarAngularCustomEventType,\n  AdaptRadarAngularService\n} from '../../common/radar/adapt-radar';\n\nimport {AdaptRxFeedbackComponent, AdaptRxFormControlDirective} from '../form-control/index';\nimport {ANIMATION_DURATION, ANIMATION_NAME} from '../../common/animation';\nimport {AdaptTranslateService} from '../../common/i18n/index';\n\n@Component({\n  selector: 'adapt-rx-timeslot',\n  templateUrl: './adapt-rx-timeslot.component.html',\n  encapsulation: ViewEncapsulation.None,\n  preserveWhitespaces: false,\n  animations: [\n    trigger('slotsAnimation', [\n      transition('void => *', [\n        useAnimation(ANIMATION_NAME.opacity, {\n          params: {\n            duration: ANIMATION_DURATION.medium\n          }\n        })\n      ])\n    ])\n  ]\n})\nexport class AdaptRxTimeSlotComponent extends AdaptRxFormControlDirective implements AfterViewInit, OnChanges {\n  protected controlName: string = 'timeslot';\n\n  analyticsComponentName: typeof AdaptRadarAngularCustomEventName = AdaptRadarAngularCustomEventName;\n\n  selectedSlot: string;\n\n  /**\n   * An array with available time slots\n   * @docs-default\n   */\n  @Input() slots: string[];\n\n  /* eslint-disable @angular-eslint/no-output-on-prefix */\n  /**\n   * Select slot emitter\n   */\n  @Output() readonly onSelectedSlotChanged: EventEmitter<string> = new EventEmitter();\n  /* eslint-enable @angular-eslint/no-output-on-prefix */\n\n  /**\n   * Reference to AdaptRxFeedbackComponent\n   */\n  @ViewChild('adaptRxFeedbackRef', {static: true}) adaptRxFeedbackRef: AdaptRxFeedbackComponent;\n\n  /**\n   * Reference to slots buttons ElementRefs\n   */\n  @ViewChildren('buttonRef') buttonRef: QueryList<ElementRef<HTMLButtonElement>>;\n\n  constructor(@Optional() @Self() ngControl: NgControl,\n              private _renderer: Renderer2,\n              _changeDetectorRef: ChangeDetectorRef,\n              private _ngZone: NgZone,\n              public ts: AdaptTranslateService,\n              _adaptRadarService: AdaptRadarAngularService,\n              _elem: ElementRef<HTMLElement>) {\n    super(ngControl, ts, _adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptRxTimeSlot, _changeDetectorRef);\n\n    const translation = ts.getCurrentLanguage();\n\n    this.label = translation['adapt.timeSlot.available'];\n  }\n\n  /**\n   * Check if the control has UI error state\n   */\n  get hasDangerState(): boolean {\n    return this.adaptRxFeedbackRef.hasUIErrorState;\n  }\n\n  ngAfterViewInit(): void {\n    super.ngAfterViewInit();\n\n    this._setSlotMaxWidth();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    super.ngOnChanges(changes);\n\n    if (changes.slots) {\n      this._ngZone.onStable\n        .pipe(takeUntil(this.destroy$), take(1))\n        .subscribe(() => {\n          this._setSlotMaxWidth();\n        });\n    }\n  }\n\n  selectSlot(slot: string): void {\n    this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxTimeSlot, {\n      GroupName: this.adaptRadarGroupName,\n      EventType: AdaptRadarAngularCustomEventType.ValueChanged,\n      Label: this.label,\n      Required: this.required,\n      ReadOnly: this.readonly,\n      Disabled: this.disabled,\n      Slots: this.slots?.length\n    });\n\n    if (this.nonInteractive) {\n      return;\n    }\n\n    this.selectedSlot = this.selectedSlot === slot ? null : slot;\n    this._onChange(this.selectedSlot);\n    this.onSelectedSlotChanged.emit(this.selectedSlot);\n  }\n\n  // TODO: Refactor this if possible\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  writeValue(slot: any): void {\n    this.selectedSlot = slot;\n  }\n\n  blurHandler(event: FocusEvent): void {\n    super.blurHandler(event);\n\n    this._onTouched();\n  }\n\n  /**\n   * Implementation of superClass member\n   */\n  protected _focusNativeElement(): void {\n    if (this.buttonRef && this.buttonRef.length) {\n      this.buttonRef.first.nativeElement.focus();\n    }\n  }\n\n  /**\n   * Calculates max-widths of each slot\n   */\n  private _setSlotMaxWidth(): void {\n    const btnList = this.buttonRef.toArray();\n\n    if (btnList) {\n      const arr = btnList.map(item => item.nativeElement.clientWidth);\n      const max = Math.round(Math.max(...arr));\n\n      btnList.map(_ => this._renderer.setStyle(_.nativeElement, 'width', `${max}px`));\n    }\n  }\n}\n","<div class=\"a-slot\"\n     [class.has-danger]=\"adaptRxFeedbackRef.hasUIErrorState\"\n     [class.has-warning]=\"warningMessage\"\n     [attr.aria-label]=\"ariaLabel\"\n     [attr.aria-labelledby]=\"ariaLabelledby\"\n     [attr.aria-describedby]=\"ariaDescribedBy\"\n     [attr.aria-required]=\"required\">\n  <adapt-rx-control-label [for]=\"id\"\n                          [label]=\"label\"\n                          [subLabel]=\"subLabel\"\n                          [requiredLabel]=\"requiredLabel\"\n                          [showRequiredLabel]=\"required\"\n                          [tooltip]=\"tooltip\"\n                          [testID]=\"testID\"></adapt-rx-control-label>\n\n  <div class=\"a-slot__list\"\n       role=\"group\"\n       *ngIf=\"slots && slots.length\">\n    <ng-container *ngFor=\"let slot of slots; let index = index\">\n      <button #buttonRef\n              [@slotsAnimation]\n              type=\"button\"\n              role=\"checkbox\"\n              class=\"btn btn-secondary btn-sm\"\n              [class.active]=\"slot === selectedSlot\"\n              [class.disabled]=\"disabled || readonly\"\n              [id]=\"id + '_slot-' + index\"\n              [name]=\"id + '_group'\"\n              [disabled]=\"disabled\"\n              [attr.aria-checked]=\"slot === selectedSlot\"\n              [attr.tabindex]=\"tabIndex ? tabIndex + index : undefined\"\n              [attr.data-testid]=\"testID + '_item-' + index\"\n              [attr.aria-readonly]=\"readonly\"\n              [attr.aria-disabled]=\"disabled\"\n              [attr.aria-invalid]=\"hasDangerState\"\n              [attr.aria-errormessage]=\"ariaErrorMessage\"\n              (focus)=\"focusHandler($event)\"\n              (blur)=\"blurHandler($event)\"\n              (click)=\"selectSlot(slot)\">{{slot}}</button>\n    </ng-container>\n  </div>\n\n  <adapt-rx-feedback #adaptRxFeedbackRef\n                     [ariaErrorMessage]=\"ariaErrorMessage\"\n                     [errors]=\"ngControl.errors\"\n                     [warningMessage]=\"warningMessage\"\n                     [controlTouched]=\"ngControl.touched\"\n                     (messageAppeared)=\"handleMessageAppeared($event, analyticsComponentName.AdaptRxTimeSlot)\"></adapt-rx-feedback>\n</div>\n"]}