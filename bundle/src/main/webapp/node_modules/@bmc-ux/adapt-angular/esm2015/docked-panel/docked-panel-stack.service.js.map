{"version":3,"file":"docked-panel-stack.service.js","sourceRoot":"","sources":["../../../../../libs/adapt-angular/src/docked-panel/docked-panel-stack.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {ApplicationRef, ComponentFactoryResolver, ComponentRef, Injectable, Injector, NgZone} from '@angular/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {noop, Observable, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {isNil} from 'lodash-es';\n\nimport {ScrollManagerApi, ScrollManageService} from '../common/scroll-manage.service';\nimport {DismissReasons} from '../common/common.enums';\nimport {adaptWarn} from '../common/logger';\nimport {LayerService} from '../common/layer-service';\nimport {AdaptOverlayService, AdaptOverlayWithPortal} from '../common/overlay/index';\nimport {AlertAnimatedConfig} from '../alert-animated/adapt-alert.model';\n\nimport {AdaptDockedPanelConfig} from './docked-panel.config';\nimport {DockedDeferred, DockedPanel, DockedPanelDirection, DockedPanelInstance} from './docked-panel.model';\nimport {AdaptDockedPanelContainerComponent} from './docked-panel.container';\nimport {getEventKeyCode} from '../common/key-codes';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdaptDockedPanelStackService {\n  // Public fields\n  direction: string = DockedPanelDirection.LEFT; // TODO: need to check default value here\n  hideBackdrop: boolean = false;\n  // Private fields\n  private _openedPanels: DockedPanelInstance[] = [];\n  private _parentDP?: DockedPanelInstance;\n  private _activeDP?: DockedPanelInstance;\n  private _wrapper: HTMLElement = document.body;\n  private _container: ComponentRef<AdaptDockedPanelContainerComponent>;\n  private _dockedPanelContainerOverlayWithPortal: AdaptOverlayWithPortal<AdaptDockedPanelContainerComponent>;\n  private _scrollManager: ScrollManagerApi;\n  private _alertsSubject: Subject<AlertAnimatedConfig> = new Subject<AlertAnimatedConfig>();\n\n  constructor(private _componentFactoryResolver: ComponentFactoryResolver,\n              private _injector: Injector,\n              private _appRef: ApplicationRef,\n              private _dpConfig: AdaptDockedPanelConfig,\n              private _scrollService: ScrollManageService,\n              private _ngZone: NgZone,\n              private _dir: Directionality,\n              private _layerService: LayerService,\n              private _overlayService: AdaptOverlayService) {\n    this._scrollManager = this._scrollService.getScrollManager(this._wrapper);\n  }\n\n  get openedPanels(): DockedPanelInstance[] {\n    return this._openedPanels;\n  }\n\n  get parentDP(): DockedPanelInstance {\n    return this._parentDP;\n  }\n\n  get activeDP(): DockedPanelInstance {\n    return this._activeDP;\n  }\n\n  get alertsState(): Observable<AlertAnimatedConfig> {\n    return this._alertsSubject.asObservable();\n  }\n\n  open(dpConfig: DockedPanel, configInjector: Injector): DockedDeferred {\n    if (typeof dpConfig === 'string') {\n      throw new Error('String type is not supported. DockedPanel type expected.');\n    }\n\n    const panel: DockedPanelInstance = new DockedPanelInstance(dpConfig);\n\n    panel.promise = new DockedDeferred(\n      () => {\n        this.close(panel.id);\n      },\n      () => {\n        this.close(panel.id);\n      }\n    );\n\n    panel.promise.then(noop, noop);\n\n    // Return in case panel already opened\n    if (this._openedPanels.indexOf(panel) !== -1) {\n      return;\n    }\n\n    // close all dropdowns/popover while dockedPanel is opened\n    if (panel.config.closeAllOpenedItems !== false) {\n      this._layerService.closeOpenedItem();\n    }\n\n    // Build DockedPanel Container\n    this._buildContainer(configInjector);\n\n    // Get 'direction' and 'hideBackdrop' settings from the first panel\n    // and set then as a global for all next in the current DockedPanel Container\n    if (!this._openedPanels.length) {\n      this.direction = panel.config.direction || this._dpConfig.direction;\n\n      if (this._dir.value === 'rtl') {\n        if (this.direction === DockedPanelDirection.LEFT) {\n          this.direction = DockedPanelDirection.RIGHT;\n        } else {\n          this.direction = DockedPanelDirection.LEFT;\n        }\n      }\n\n      this.hideBackdrop = panel.config.hideBackdrop || this._dpConfig.hideBackdrop;\n      this._parentDP = panel;\n    }\n\n    // Make parent panel inactive\n    if (this._openedPanels.length) {\n      this._openedPanels[0].inactive = true;\n    }\n\n    this._activeDP = panel;\n\n    // Add new panel to the opened list\n    this._openedPanels.unshift(panel);\n\n    return panel.promise;\n  }\n\n  updateConfig(config: DockedPanel, dockedPanelInstance: DockedPanelInstance): void {\n    if (isNil(dockedPanelInstance)) {\n      throw new Error('Please make sure that passed \"dockedPanelInstance\" argument is defined');\n    }\n\n    const panel = this._findPanel(dockedPanelInstance.id);\n\n    // Return in case panel not found\n    if (!panel) {\n      return;\n    }\n\n    dockedPanelInstance.updateConfig(config);\n  }\n\n  close(id: string): void {\n    const panel = this._findPanel(id);\n\n    if (!this._findPanel(id)) {\n      adaptWarn('ADAPT-ANGULAR Warning! Panel with provided ID is not found');\n\n      return;\n    }\n\n    // Delete panel from the opened list\n    const deleteIndex = this._openedPanels.indexOf(panel);\n\n    if (panel.overModalOpen) {\n      panel.overModalOpen = false;\n\n    } else if (deleteIndex !== -1) {\n      this._openedPanels.splice(deleteIndex, 1);\n    }\n\n    // Activate parent panel\n    if (this._openedPanels.length) {\n      this._openedPanels[0].inactive = false;\n      this._activeDP = this._openedPanels[0];\n    } else {\n      this._activeDP = null;\n    }\n  }\n\n  closeAllDockedPanels(): void {\n    this._openedPanels.forEach((item: DockedPanelInstance) => {\n      setTimeout(() => {\n        const beforeDismiss = item.config && item.config.beforeDismiss;\n\n        if (beforeDismiss && !beforeDismiss(DismissReasons.CLOSE_ALL)) {\n          return;\n        }\n\n        this.close(item.id);\n      });\n    });\n  }\n\n  openAlert(alert: AlertAnimatedConfig): void {\n    this._alertsSubject.next(alert);\n  }\n\n  // Private methods\n  /**\n   * Search DockedPanel by ID\n   */\n  private _findPanel(id: string): DockedPanelInstance {\n    return this.openedPanels.find((elem) => {\n      return elem.id === id;\n    });\n  }\n\n  /**\n   * Build DockedPanel Container\n   */\n  private _buildContainer(configInjector: Injector): void {\n    if (this._overlayService.enableCDKOverlayControl) {\n      this._buildOverlayContainer(configInjector);\n\n      return;\n    }\n\n    if (this._container) {\n      return;\n    }\n\n    this._container = this._componentFactoryResolver.resolveComponentFactory(AdaptDockedPanelContainerComponent).create(configInjector);\n\n    this._appRef.attachView(this._container.hostView);\n    this._wrapper.appendChild(this._container.location.nativeElement);\n    this._scrollManager.hide(this);\n\n    // Throw DockedPanel Service instance to the DockedPanel Container\n    this._container.instance.dps = this;\n\n    this._container.instance.onPanelClosed.subscribe(() => {\n      if (!this._openedPanels.length) {\n        this._destroyContainer();\n      }\n    });\n  }\n\n  /**\n   * Destroy DockedPanel Container\n   */\n  private _destroyContainer(): void {\n    if (!this._container) {\n      return;\n    }\n\n    this._container.destroy();\n    this._scrollManager.show(this);\n\n    this._container = null;\n    this._parentDP = null;\n    this._activeDP = null;\n  }\n\n  private _buildOverlayContainer(configInjector: Injector): void {\n    if (this._dockedPanelContainerOverlayWithPortal) {\n      return;\n    }\n\n    this._dockedPanelContainerOverlayWithPortal =\n      this._overlayService.openOverlayWithPortal(\n        new ComponentPortal(AdaptDockedPanelContainerComponent, null, configInjector),\n        {scrollStrategy: 'block'}\n      );\n\n    this._dockedPanelContainerOverlayWithPortal.componentRef.instance.dps = this;\n\n    this._dockedPanelContainerOverlayWithPortal.overlayRef.keydownEvents()\n      .pipe(takeUntil(this._dockedPanelContainerOverlayWithPortal.destroy$))\n      .subscribe(event => {\n        if (getEventKeyCode(event) === ESCAPE && this.activeDP) {\n          const beforeDismiss = this.activeDP.config && this.activeDP.config.beforeDismiss;\n\n          if (this.activeDP.config.blockKeyboard || this._dpConfig.blockKeyboard) {\n            return;\n          }\n\n          if (beforeDismiss && !beforeDismiss(DismissReasons.ESC)) {\n            return;\n          }\n\n          this.activeDP.promise.reject(DismissReasons.ESC);\n        }\n      });\n\n    this._dockedPanelContainerOverlayWithPortal.componentRef.instance.onPanelClosed\n      .pipe(takeUntil(this._dockedPanelContainerOverlayWithPortal.destroy$))\n      .subscribe(() => {\n        if (!this._openedPanels.length) {\n          this._destroyOverlayContainer();\n        }\n      });\n  }\n\n  private _destroyOverlayContainer(): void {\n    if (!this._dockedPanelContainerOverlayWithPortal) {\n      return;\n    }\n\n    this._dockedPanelContainerOverlayWithPortal.destroy();\n    this._dockedPanelContainerOverlayWithPortal = null;\n\n    this._parentDP = null;\n    this._activeDP = null;\n  }\n}\n"]}