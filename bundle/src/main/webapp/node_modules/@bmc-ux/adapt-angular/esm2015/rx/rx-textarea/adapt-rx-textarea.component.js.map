{"version":3,"file":"adapt-rx-textarea.component.js","sourceRoot":"","sources":["../../../../../../libs/adapt-angular/src/rx/rx-textarea/adapt-rx-textarea.component.ts","../../../../../../libs/adapt-angular/src/rx/rx-textarea/adapt-rx-textarea.component.html"],"names":[],"mappings":"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","sourcesContent":["import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  NgZone,\n  OnInit,\n  Optional,\n  Renderer2,\n  Self,\n  ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport {NgControl} from '@angular/forms';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {isString} from 'lodash-es';\nimport {\n  AdaptRadarAngularCustomEventName,\n  AdaptRadarAngularCustomEventType,\n  AdaptRadarAngularService\n} from '../../common/radar/adapt-radar';\n\nimport {AdaptRxFeedbackComponent, AdaptRxFormControlDirective, FormControlSize} from '../form-control/index';\nimport {AdaptRxTextareaConfigService} from './adapt-rx-textarea-config.service';\nimport {AdaptTranslateService} from '../../common/i18n/index';\n\n@Component({\n  selector: 'adapt-rx-textarea',\n  templateUrl: './adapt-rx-textarea.component.html',\n  encapsulation: ViewEncapsulation.None\n})\nexport class AdaptRxTextareaComponent extends AdaptRxFormControlDirective implements OnInit {\n  protected controlName: string = 'textarea';\n\n  analyticsComponentName: typeof AdaptRadarAngularCustomEventName = AdaptRadarAngularCustomEventName;\n\n  _rows: number;\n  _maxRows: number;\n\n  // Textarea [rows] attribute\n  /**\n   * Native textarea rows count\n   * @docs-default\n   */\n  @Input() set rows(value: number) {\n    this._rows = value;\n    this._checkForAutoHeight();\n  }\n\n  // Max rows for auto expanding\n  /**\n   * Native textarea maximum rows count\n   * @docs-default\n   */\n  @Input() set maxRows(value: number) {\n    this._maxRows = value;\n    this._checkForAutoHeight();\n  }\n\n  /**\n   * Specifies autocomplete property of native element\n   * @docs-default\n   * @since 10.11.0\n   */\n  @Input() autocomplete: boolean | string;\n\n  /**\n   * A placeholder string for the input filed\n   * @docs-default\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Control size\n   * @docs-default default\n   */\n  @Input() size: FormControlSize = 'default';\n\n  /**\n   * Show success appearance when no errors\n   * @docs-default false\n   */\n  @Input() showValidState: boolean = false;\n\n  /**\n   * Show success icon when no errors\n   * @docs-default false\n   */\n  @Input() showValidStateIcon: boolean = false;\n\n  /**\n   * Show error icon when errors\n   * @docs-default false\n   */\n  @Input() showInvalidStateIcon: boolean = false;\n\n  /**\n   * Message which will be shown if [showValidState]=true and no errors\n   * @docs-default false\n   */\n  @Input() validStateMessage: string;\n\n  /**\n   * Use disable styles for readonly state\n   * @docs-default false\n   */\n  @Input() disabledStyleForReadonlyState: boolean = false;\n\n  /**\n   * Textarea ref\n   */\n  @ViewChild('textareaRef', {static: true}) textareaRef: ElementRef<HTMLTextAreaElement>;\n\n  /**\n   * Reference on AdaptRxFeedbackComponent\n   */\n  @ViewChild('adaptRxFeedbackRef', {static: true}) adaptRxFeedbackRef: AdaptRxFeedbackComponent;\n\n  private _value: string;\n  private _previousNativeValue: string;\n  private _initComplete: boolean = false;\n  private _isAutoRowsCalculation: boolean = false;\n\n  constructor(@Optional() @Self() ngControl: NgControl,\n              private _renderer: Renderer2,\n              private _ngZone: NgZone,\n              adaptRxTextareaConfigService: AdaptRxTextareaConfigService,\n              _changeDetectorRef: ChangeDetectorRef,\n              public ts: AdaptTranslateService,\n              _adaptRadarService: AdaptRadarAngularService,\n              _elem: ElementRef<HTMLElement>) {\n    super(ngControl, ts, _adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptRxTextarea, _changeDetectorRef);\n\n    this.size = adaptRxTextareaConfigService.size;\n    this._rows = adaptRxTextareaConfigService.rows;\n    this._maxRows = adaptRxTextareaConfigService.maxRows;\n    this.showValidState = adaptRxTextareaConfigService.showValidState;\n    this.showValidStateIcon = adaptRxTextareaConfigService.showValidStateIcon;\n    this.showInvalidStateIcon = adaptRxTextareaConfigService.showInvalidStateIcon;\n    this.disabledStyleForReadonlyState = adaptRxTextareaConfigService.disabledStyleForReadonlyState;\n  }\n\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._initComplete = true;\n    this._checkForAutoHeight();\n  }\n\n  get value(): string {\n    return this._value;\n  }\n\n  set value(value: string) {\n    if (value !== this._value) {\n      this._value = value;\n      this._onChange(this._value);\n      this.stateChanges$.next();\n    }\n  }\n\n  /**\n   * Returns autocomplete attribute value for native element\n   */\n  get getAutocompleteValue(): string {\n    return isString(this.autocomplete) ? this.autocomplete : (this.autocomplete ? 'on' : 'off');\n  }\n\n  /**\n   * Check if the control has UI error state\n   */\n  get hasDangerState(): boolean {\n    return this.adaptRxFeedbackRef.hasUIErrorState;\n  }\n\n  /**\n   * Check if component should have success appearance if no errors\n   */\n  get hasSuccessState(): boolean {\n    return this.showValidState && this.ngControl.touched && !this.ngControl.errors;\n  }\n\n  /**\n   * Check if the invalid state icon should be displayed when has danger state\n   */\n  get hasDangerStateIcon(): boolean {\n    return this.hasDangerState && this.showInvalidStateIcon;\n  }\n\n  /**\n   * Check if the valid state icon should be displayed when has success state\n   */\n  get hasSuccessStateIcon(): boolean {\n    return this.hasSuccessState && this.showValidStateIcon;\n  }\n\n  /**\n   * Textarea element (input) event handler\n   */\n  inputValueChange(): void {\n    this._checkNativeValue();\n  }\n\n  /**\n   * Extend super.writeValue for auto expand detection\n   */\n  writeValue(value: string): void {\n    if (value !== undefined) {\n      this._value = value;\n      this._previousNativeValue = undefined;\n    }\n\n    if (this._isAutoRowsCalculation) {\n      // Timeout is needed to prevent auto calculation before the textarea native value updated\n      this._ngZone.onStable\n        .pipe(takeUntil(this.destroy$), take(1))\n        .subscribe(() => {\n          this._calculateHeight();\n        });\n    }\n  }\n\n  /**\n   * Extend parent method\n   */\n  blurHandler(event: FocusEvent): void {\n    super.blurHandler(event);\n\n    this._onTouched();\n\n    this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxTextarea, {\n      GroupName: this.adaptRadarGroupName,\n      EventType: AdaptRadarAngularCustomEventType.Blur,\n      Label: this.label,\n      Subtext: !!this.subLabel,\n      TextEntered: !!this.value,\n      CharCount: this.value?.length,\n      Hinted: !!this.tooltip,\n      Required: this.required,\n      Disabled: this.disabled,\n      ReadOnly: this.readonly,\n      FieldSize: this.size,\n      // DynamicEntry: false\n    });\n  }\n\n  /**\n   * Extend parent method\n   */\n  focusHandler(event: FocusEvent): void {\n    super.focusHandler(event);\n\n    this._adaptRadarService.sendCustomEventForAllProviders(AdaptRadarAngularCustomEventName.AdaptRxTextarea, {\n      GroupName: this.adaptRadarGroupName,\n      EventType: AdaptRadarAngularCustomEventType.Focus,\n      Label: this.label,\n      Subtext: !!this.subLabel,\n      TextEntered: !!this.value,\n      CharCount: this.value?.length,\n      Hinted: !!this.tooltip,\n      Required: this.required,\n      Disabled: this.disabled,\n      ReadOnly: this.readonly,\n      FieldSize: this.size,\n      // DynamicEntry: false\n    });\n  }\n\n  /**\n   * Implementation from the base class\n   * Focus the native element if [autofocus] == true\n   */\n  protected _focusNativeElement(): void {\n    this.textareaRef.nativeElement.focus();\n  }\n\n  /**\n   * Detect if auto expand mode enabled\n   */\n  private _checkForAutoHeight(): void {\n    if (!this._initComplete) {\n      return;\n    }\n\n    if (this._rows && this._maxRows && this._rows < this._maxRows) {\n      this._isAutoRowsCalculation = true;\n\n      const textarea = this.textareaRef.nativeElement;\n\n      textarea.rows = this._maxRows;\n      this._renderer.setStyle(this.textareaRef.nativeElement, 'max-height', `${textarea.offsetHeight}px`);\n\n      textarea.rows = this._rows;\n      this._renderer.setStyle(this.textareaRef.nativeElement, 'min-height', `${textarea.offsetHeight}px`);\n      this._renderer.setStyle(this.textareaRef.nativeElement, 'resize', 'none');\n    } else {\n      this._isAutoRowsCalculation = false;\n\n      this._renderer.removeStyle(this.textareaRef.nativeElement, 'min-height');\n      this._renderer.removeStyle(this.textareaRef.nativeElement, 'max-height');\n      this._renderer.removeStyle(this.textareaRef.nativeElement, 'resize');\n    }\n  }\n\n  /**\n   * Auto calculate textarea height according to content\n   */\n  private _calculateHeight(): void {\n    const textarea = this.textareaRef.nativeElement;\n\n    // Reset field height\n    textarea.style.height = 'inherit';\n\n    // Get the computed styles for the element\n    const computed = window.getComputedStyle(textarea);\n\n    // Calculate the height\n    const height = parseInt(computed.getPropertyValue('border-top-width'), 10)\n      + textarea.scrollHeight\n      + parseInt(computed.getPropertyValue('border-bottom-width'), 10);\n\n    textarea.style.height = height + 'px';\n  }\n\n  /**\n   * Check if the native element value was changed and propagate change\n   */\n  private _checkNativeValue(): void {\n    const newValue = this.textareaRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.value = newValue;\n\n      if (this._isAutoRowsCalculation) {\n        this._calculateHeight();\n      }\n    }\n  }\n}\n","<div [class.has-danger]=\"hasDangerState\"\n     [class.has-success]=\"hasSuccessState\"\n     [class.has-warning]=\"warningMessage\">\n  <adapt-rx-control-label [for]=\"id\"\n                          [label]=\"label\"\n                          [subLabel]=\"subLabel\"\n                          [requiredLabel]=\"requiredLabel\"\n                          [showRequiredLabel]=\"required\"\n                          [tooltip]=\"tooltip\"\n                          [testID]=\"testID\"></adapt-rx-control-label>\n\n  <textarea #textareaRef\n            class=\"form-control rx-form-control\"\n            [class.form-control-disabled-look]=\"readonly && this.disabledStyleForReadonlyState\"\n            [class.form-control-danger]=\"hasDangerStateIcon\"\n            [class.form-control-success]=\"hasSuccessStateIcon\"\n            [class.form-control-sm]=\"size === 'sm'\"\n            [class.form-control-lg]=\"size === 'lg'\"\n            [id]=\"id\"\n            [value]=\"value\"\n            [required]=\"required\"\n            [disabled]=\"disabled\"\n            [readOnly]=\"readonly\"\n            [autofocus]=\"autofocus\"\n            [attr.rows]=\"_rows\"\n            [attr.autocomplete]=\"getAutocompleteValue\"\n            [attr.tabindex]=\"tabIndex\"\n            [attr.placeholder]=\"placeholder\"\n            [attr.name]=\"name\"\n            [attr.aria-label]=\"ariaLabel\"\n            [attr.aria-labelledby]=\"ariaLabelledby\"\n            [attr.aria-describedby]=\"ariaDescribedBy\"\n            [attr.aria-required]=\"required\"\n            [attr.aria-invalid]=\"hasDangerState\"\n            [attr.aria-errormessage]=\"ariaErrorMessage\"\n            [attr.aria-readonly]=\"readonly\"\n            [attr.aria-disabled]=\"disabled\"\n            [attr.data-testid]=\"testID\"\n            (input)=\"inputValueChange()\"\n            (focus)=\"focusHandler($event)\"\n            (blur)=\"blurHandler($event)\"></textarea>\n\n  <adapt-rx-feedback #adaptRxFeedbackRef\n                     [ariaErrorMessage]=\"ariaErrorMessage\"\n                     [errors]=\"ngControl.errors\"\n                     [successMessage]=\"validStateMessage\"\n                     [warningMessage]=\"warningMessage\"\n                     [controlTouched]=\"ngControl.touched\"\n                     (messageAppeared)=\"handleMessageAppeared($event, analyticsComponentName.AdaptRxTextarea)\"></adapt-rx-feedback>\n</div>\n"]}