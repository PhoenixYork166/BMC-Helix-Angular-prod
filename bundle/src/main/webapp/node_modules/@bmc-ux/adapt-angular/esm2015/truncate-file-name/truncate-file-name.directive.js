import { Directive, ElementRef, Input, NgZone, Renderer2 } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class AdaptTruncateFileNameDirective {
    constructor(_renderer, _elemRef, _ngZone) {
        this._renderer = _renderer;
        this._elemRef = _elemRef;
        this._ngZone = _ngZone;
        this._destroyed$ = new ReplaySubject(1);
    }
    get content() {
        return this._content;
    }
    set content(value) {
        this._content = value;
        this._originalText = this.content;
        this._ngZone.onStable
            .pipe(takeUntil(this._destroyed$), take(1))
            .subscribe(() => {
            this.applyEllipsis();
        });
    }
    ngAfterViewInit() {
        if (!this.content) {
            this._originalText = this._elemRef.nativeElement.innerText;
            this.applyEllipsis();
        }
    }
    ngOnDestroy() {
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
    applyEllipsis() {
        const separator = this._originalText.lastIndexOf('.');
        let fileName = '';
        let extension = '';
        this._renderer.setStyle(this._elemRef.nativeElement, 'display', 'inline-flex');
        this._renderer.setStyle(this._elemRef.nativeElement, 'max-width', '100%');
        this._elemRef.nativeElement.innerText = '';
        if (separator >= 0) {
            fileName = this._originalText.substr(0, separator);
            extension = this._originalText.substr(separator);
        }
        else {
            fileName = this._originalText;
        }
        this.createNode(fileName, true);
        this.createNode(extension);
    }
    createNode(nodeText, truncated = false) {
        if (!nodeText) {
            return;
        }
        const block = this._renderer.createElement('span');
        if (truncated) {
            this._renderer.addClass(block, 'ellipsis');
        }
        const text = this._renderer.createText(nodeText);
        this._renderer.appendChild(block, text);
        this._renderer.appendChild(this._elemRef.nativeElement, block);
    }
}
AdaptTruncateFileNameDirective.ɵfac = function AdaptTruncateFileNameDirective_Factory(t) { return new (t || AdaptTruncateFileNameDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone)); };
AdaptTruncateFileNameDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: AdaptTruncateFileNameDirective, selectors: [["", "adaptTruncateFileName", ""]], inputs: { content: "content" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptTruncateFileNameDirective, [{
        type: Directive,
        args: [{
                selector: '[adaptTruncateFileName]'
            }]
    }], function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, { content: [{
            type: Input
        }] }); })();
//# sourceMappingURL=truncate-file-name.directive.js.map