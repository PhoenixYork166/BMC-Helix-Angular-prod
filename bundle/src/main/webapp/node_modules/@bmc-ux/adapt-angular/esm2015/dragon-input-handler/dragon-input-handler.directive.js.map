{"version":3,"file":"dragon-input-handler.directive.js","sourceRoot":"","sources":["../../../../../libs/adapt-angular/src/dragon-input-handler/dragon-input-handler.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,SAAS,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAU,QAAQ,EAAE,IAAI,EAAC,MAAM,eAAe,CAAC;AAC5F,OAAO,EAAuB,oBAAoB,EAAE,iBAAiB,EAAC,MAAM,gBAAgB,CAAC;;AAM7F,MAAM,OAAO,gCAAgC;IAG3C,YAAoB,OAAmB,EACnB,MAAc,EACyB,cAAsC;QAF7E,YAAO,GAAP,OAAO,CAAY;QACnB,WAAM,GAAN,MAAM,CAAQ;QAH1B,kBAAa,GAAuD,IAAI,CAAC;QAM/E,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,CAAC;IAChE,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,GAAG,EAAE;YACjC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;gBACvB,OAAO;aACR;YAED,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;gBAC7D,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,IAAI,EAAE;oBACrC,OAAO;iBACR;gBACD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE;oBACvB,IAAI,OAAQ,IAAI,CAAC,aAAsC,CAAC,QAAQ,KAAK,UAAU,EAAE;wBAC9E,IAAI,CAAC,aAAsC,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;qBACzF;gBACH,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,mBAAmB,CAAC,cAAsC;QAChE,IAAI,CAAC,cAAc,EAAE;YACnB,OAAO;SACR;QAED,IAAI,eAAe,GAAyB,IAAI,CAAC;QACjD,wFAAwF;QACxF,MAAM,cAAc,GAAyB,cAAc,CAAC,IAAI,CAAC,CAAC,CAAuB,EAAE,EAAE;YAC3F,IAAI,CAAC,CAAC,WAAW,KAAK,oBAAoB,EAAE;gBAC1C,eAAe,GAAG,CAAyB,CAAC;gBAE5C,OAAO,KAAK,CAAC;aACd;iBAAM;gBACL,OAAO,IAAI,CAAC;aACb;QACH,CAAC,CAAC,CAAC;QAEH,OAAO,cAAc,IAAI,eAAe,CAAC;IAC3C,CAAC;;gHA/CU,gCAAgC,6FAKH,iBAAiB;mFAL9C,gCAAgC;uFAAhC,gCAAgC;cAJ5C,SAAS;eAAC;gBACT,iEAAiE;gBACjE,QAAQ,EAAE,qCAAqC;aAChD;;sBAMc,QAAQ;;sBAAI,IAAI;;sBAAI,MAAM;uBAAC,iBAAiB","sourcesContent":["import {Directive, ElementRef, Inject, NgZone, OnInit, Optional, Self} from '@angular/core';\nimport {ControlValueAccessor, DefaultValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\n\n@Directive({\n  /* eslint-disable-next-line @angular-eslint/directive-selector */\n  selector: 'input:not([type=checkbox]),textarea',\n})\nexport class AdaptDragonInputHandlerDirective implements OnInit {\n  private valueAccessor: ControlValueAccessor | DefaultValueAccessor | null = null;\n\n  constructor(private element: ElementRef,\n              private ngZone: NgZone,\n              @Optional() @Self() @Inject(NG_VALUE_ACCESSOR) valueAccessors: ControlValueAccessor[]) {\n\n    this.valueAccessor = this.selectValueAccessor(valueAccessors);\n  }\n\n  ngOnInit(): void {\n    this.ngZone.runOutsideAngular(() => {\n      if (!this.valueAccessor) {\n        return;\n      }\n\n      this.element.nativeElement.addEventListener('keyup', (event) => {\n        if (!event || event.key && event.code) {\n          return;\n        }\n        this.ngZone.runTask(() => {\n          if (typeof (this.valueAccessor as DefaultValueAccessor).onChange === 'function') {\n            (this.valueAccessor as DefaultValueAccessor).onChange(this.element.nativeElement.value);\n          }\n        });\n      });\n    });\n  }\n\n  private selectValueAccessor(valueAccessors: ControlValueAccessor[]): ControlValueAccessor | DefaultValueAccessor {\n    if (!valueAccessors) {\n      return;\n    }\n\n    let defaultAccessor: DefaultValueAccessor = null;\n    // find the first custom value accessor if it exists; otherwise use the default accessor\n    const customAccessor: ControlValueAccessor = valueAccessors.find((v: ControlValueAccessor) => {\n      if (v.constructor === DefaultValueAccessor) {\n        defaultAccessor = v as DefaultValueAccessor;\n\n        return false;\n      } else {\n        return true;\n      }\n    });\n\n    return customAccessor || defaultAccessor;\n  }\n}\n"]}