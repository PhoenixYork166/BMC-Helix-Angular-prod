import { AfterContentChecked, AfterViewInit, ChangeDetectorRef, ElementRef, NgZone, OnDestroy, OnInit, QueryList } from '@angular/core';
import { AdaptDeviceDetectionService } from '../common/device-detection.service';
import { ResizeService } from '../common/resize/resize.service';
import { TabsControlsTypeDirection } from '../tabs-controls/index';
import { ReplaySubject, Subscription } from 'rxjs';
import { Directionality } from '@angular/cdk/bidi';
import { AdaptTranslateService } from '../common/i18n/index';
import { MULTI_SKIN_ENUM } from './multi-card.model';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
export declare class AdaptMultiCardLineComponent {
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptMultiCardLineComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptMultiCardLineComponent, "adapt-multi-card-line", never, {}, {}, never, never>;
}
export declare class AdaptMultiCardSlideComponent {
    _el: ElementRef<HTMLElement>;
    /**
     * Sets the value to the tabindex attr
     * @docs-default 0
     */
    tabindex: number;
    get element(): HTMLElement;
    private _order;
    /**
     * If present, it expects a parameter by which the slides will be filtered
     * @docs-default
     */
    get order(): number;
    set order(v: number);
    constructor(_el: ElementRef<HTMLElement>);
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptMultiCardSlideComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptMultiCardSlideComponent, "adapt-multi-card-slide", never, { "tabindex": "tabindex"; "order": "order"; }, {}, never, ["*"]>;
}
export declare class AdaptMultiCardComponent extends AdaptRadarAngularGenericDirective implements OnInit, AfterViewInit, OnDestroy, AfterContentChecked {
    protected device: AdaptDeviceDetectionService;
    protected resize: ResizeService;
    protected _element: ElementRef;
    protected _ngZone: NgZone;
    protected _changeDetectorRef: ChangeDetectorRef;
    dir: Directionality;
    ts: AdaptTranslateService;
    direction: TabsControlsTypeDirection;
    activeIndex: number;
    totalItems: number;
    currentItem: number;
    orderArray: any[];
    orderUniqueArray: any[];
    orderCount: Object;
    isContentChecked: boolean;
    len: number;
    _position: number;
    _cardWidth: number;
    _cardOffsetLeft: number;
    counterText: string;
    autoPlaySubscription$: Subscription;
    /**
     * When present, it indicates that the tabs navigation should be displayed
     * @docs-default false
     */
    statusBar: boolean;
    /**
     * Adds custom CSS class(es) for the component
     * @docs-default
     */
    customClass: string;
    /**
     * When present, it indicates that the header should be displayed
     * @docs-default true
     */
    cardHeader: boolean;
    /**
     * Sets the value of the header title
     * @docs-default
     */
    title: string;
    /**
     * Sets the value of the previous button control
     * @docs-default Previous
     */
    btnPrevText: string;
    /**
     * Sets the value of the next button control
     * @docs-default Next
     */
    btnNextText: string;
    /**
     * Sets the interval for autoplay in ms
     * @since v10.8.0
     * @docs-default 0
     */
    set autoPlayInterval(value: number);
    /**
     * Allows content to start showing from the start if autoplay enabled
     * @since v10.8.0
     * @docs-default false
     */
    loop: boolean;
    /**
     *
     */
    prev: ElementRef;
    next: ElementRef;
    carousel: ElementRef;
    list: ElementRef<HTMLElement>;
    viewport: ElementRef;
    slide: QueryList<AdaptMultiCardSlideComponent>;
    private _tabsControls;
    private _links;
    /**
     * Sets the style of the component
     * @docs-default carousel_foreground
     */
    get skin(): MULTI_SKIN_ENUM;
    set skin(value: MULTI_SKIN_ENUM);
    /**
     * setter/getter for counter [slide cards]
     */
    get count(): number;
    set count(value: number);
    get isMobile(): boolean;
    private _viewInitComplete;
    private _skin;
    private _count;
    protected _destroyed$: ReplaySubject<boolean>;
    constructor(device: AdaptDeviceDetectionService, resize: ResizeService, _element: ElementRef, _ngZone: NgZone, _changeDetectorRef: ChangeDetectorRef, dir: Directionality, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService, _entityName: AdaptRadarAngularCustomEventName);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterContentChecked(): void;
    ngOnDestroy(): void;
    getCounter(): string;
    getCurrentCount(): void;
    isRtl(): boolean;
    swipePrev(): void;
    swipeNext(): void;
    _applyCurrentActiveSlide(): void;
    movePrev(): void;
    moveNext(): void;
    applyTabControl(index: number): void;
    isPrevBtnVisible(btn: HTMLButtonElement): boolean;
    isNextBtnVisible(btn: HTMLButtonElement): boolean;
    isPrevBtnDisabled(): boolean;
    isNextBtnDisabled(): boolean;
    onNavBtnMouseleave(): void;
    getActiveSlide(): void;
    goByOrder(currentSlide: number): void;
    protected _shiftValidRight(): void;
    protected _slideToRight(): void;
    protected _slideToLeft(): void;
    protected _getActiveCard(): number;
    protected _calcDimensions(move?: string): void;
    protected _setLastCardPosition(): void;
    protected _checkItemsOnResize(): void;
    protected _setCardPosition(offset: number): void;
    protected _calcCurrentItem(position: number, width: number, count: number): void;
    private _calcCountSliding;
    private _calcTotalItems;
    private _makeCountForCardOffset;
    private _zipKeysEvent;
    private _focusFirstCard;
    private _moveByTab;
    private _moveByArrows;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptMultiCardComponent, [null, null, null, null, null, null, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptMultiCardComponent, "adapt-multi-card", never, { "statusBar": "statusBar"; "customClass": "customClass"; "cardHeader": "card-header"; "title": "card-title"; "btnPrevText": "btnPrevText"; "btnNextText": "btnNextText"; "autoPlayInterval": "autoPlayInterval"; "loop": "loop"; "skin": "skin"; "count": "count"; }, {}, ["slide"], ["adapt-multi-card-slide"]>;
}
