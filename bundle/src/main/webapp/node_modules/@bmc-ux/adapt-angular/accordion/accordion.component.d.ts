import { ElementRef, EventEmitter, NgZone, OnDestroy, OnInit } from '@angular/core';
import { AnimationEvent } from '@angular/animations';
import { AdaptDeviceDetectionService } from '../common/device-detection.service';
import { Accordion, AccordionTab } from './accordion.model';
import { AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
export declare class AdaptAccordionComponent extends AdaptRadarAngularGenericDirective implements OnInit {
    private _devDetection;
    isMobile: boolean;
    _tabs: AdaptAccordionTabComponent[];
    _config: Accordion;
    /**
     * Configuration object
     * @docs-default
     */
    config: Accordion;
    /**
     * Allows opening multiple tabs
     * @docs-default false
     */
    multiselect: boolean;
    /**
     * Enable/disable borders
     * @docs-default true
     */
    bordered: boolean;
    /**
     * An event fires on tab open. Returns tab config obj.
     * Works only for tabs initialized via config obj
     */
    readonly openTab: EventEmitter<AccordionTab>;
    /**
     * An event fires on tab close. Returns tab config obj.
     * Works only for tabs initialized via config obj
     */
    readonly closeTab: EventEmitter<AccordionTab>;
    constructor(_devDetection: AdaptDeviceDetectionService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    /**
     * Add tab to list
     */
    addTab(group: AdaptAccordionTabComponent): void;
    removeTab(group: AdaptAccordionTabComponent): void;
    /**
     * Close other tabs
     */
    closeOthers(openGroup: AdaptAccordionTabComponent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptAccordionComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptAccordionComponent, "adapt-accordion", never, { "config": "config"; "multiselect": "multiselect"; "bordered": "bordered"; }, { "openTab": "openTab"; "closeTab": "closeTab"; }, never, ["*"]>;
}
export declare class AdaptAccordionTabComponent implements OnDestroy {
    private accordion;
    private deviceDetector;
    private adaptRadarService;
    private _ngZone;
    static ID: number;
    animationState: string;
    /** Workaround: to prevent weird expansion in popovers */
    isCloseAnimationProcessing: boolean;
    id: string;
    get isMobile(): boolean;
    /**
     * Tab's title
     * @docs-default
     */
    title: string;
    /**
     * @docs-default true
     */
    renderContentWhenClosed: boolean;
    /**
     * Adds class to tab element, allows passing utility classes
     * @docs-default
     */
    customClass: string;
    /**
     * Allows displaying accordion card title in multiple lines
     * @docs-default false
     */
    set multiline(value: boolean);
    get multiline(): boolean;
    /**
     * Tab's icon
     * @docs-default
     */
    icon: string;
    /**
     * Tab's disable state
     * @docs-default false
     */
    set disabled(value: boolean);
    get disabled(): boolean;
    /**
     * Tab's open state
     * @docs-default false
     */
    set isOpen(value: boolean);
    get isOpen(): boolean;
    /**
     * An event fires on tab open
     */
    readonly open: EventEmitter<AccordionTab>;
    /**
     * An event fires on tab close
     */
    readonly close: EventEmitter<AccordionTab>;
    get isOpenOrCloseAnimationProcessing(): boolean;
    private _isOpen;
    private _multiline;
    private _disabled;
    private _destroyed$;
    constructor(accordion: AdaptAccordionComponent, deviceDetector: AdaptDeviceDetectionService, adaptRadarService: AdaptRadarAngularService, _ngZone: NgZone);
    animationStartHandler(event: AnimationEvent): void;
    animationEndHandler(event: AnimationEvent): void;
    toggleOpen(event: MouseEvent): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptAccordionTabComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptAccordionTabComponent, "adapt-accordion-tab", never, { "title": "title"; "renderContentWhenClosed": "renderContentWhenClosed"; "customClass": "customClass"; "multiline": "multiline"; "icon": "icon"; "disabled": "disabled"; "isOpen": "isOpen"; }, { "open": "open"; "close": "close"; }, never, [".card-title-text", "*"]>;
}
