export declare class Positioning {
    position(element: HTMLElement, round?: boolean): ClientRect;
    offset(element: HTMLElement, round?: boolean): ClientRect;
    positionElements(hostElement: HTMLElement, targetElement: HTMLElement, placement: string, appendToBody?: boolean): ClientRect;
    getAvailablePlacements(hostElement: HTMLElement, targetElement: HTMLElement): string[];
    private getAllStyles;
    private getStyle;
    private isStaticPositioned;
    private offsetParent;
    /**
     * check if secondary placement for left and right are available i.e. left-top, left-bottom, right-top, right-bottom
     * primaryplacement: left|right
     * availablePlacementArr: array in which available placements to be set
     */
    private setSecondaryPlacementForLeftRight;
    /**
     * check if secondary placement for top and bottom are available i.e. top-left, top-right, bottom-left, bottom-right
     * primaryplacement: top|bottom
     * availablePlacementArr: array in which available placements to be set
     */
    private setSecondaryPlacementForTopBottom;
}
/**
 * Accept the placement array and applies the appropriate placement dependent on the viewport.
 * Returns the applied placement.
 * In case of auto placement, placements are selected in order
 *   'top', 'bottom', 'left', 'right',
 *   'top-left', 'top-right',
 *   'bottom-left', 'bottom-right',
 *   'left-top', 'left-bottom',
 *   'right-top', 'right-bottom'.
 * `fallbackPlacement` param: if there are no available places and the `placement` param contains `auto`
 * position, then will be used this placement
 * `currentPlacement` param: when the dd has already applied placement and there are no available
 * places, then will be used this placement
 */
export declare function positionElements(hostElement: HTMLElement, targetElement: HTMLElement, placement: string | Placement | PlacementArray, appendToBody?: boolean, fallbackPlacement?: Placement, currentPlacement?: Placement): Placement;
export declare type Placement = 'auto' | 'top' | 'bottom' | 'left' | 'right' | 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'left-top' | 'left-bottom' | 'right-top' | 'right-bottom' | 'mobile';
export declare type PlacementArray = Placement | Placement[];
export declare type ToastPlacement = 'top-right' | 'top-left' | 'top-center';
export declare abstract class TooltipPlacement {
    static readonly Top: string;
    static readonly Right: string;
    static readonly Bottom: string;
    static readonly Left: string;
    static readonly Auto: string;
}
export declare const availableTargetPlacements: (hostElement: HTMLElement, targetElement: HTMLElement) => string[];
export declare function convertPlacement(placement: any): any;
