import { ElementRef, EventEmitter, Injector, OnInit, TemplateRef } from '@angular/core';
import { AbstractControl, ControlValueAccessor, NgControl, Validator } from '@angular/forms';
import { AdaptTranslateService } from './i18n/index';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from './radar/adapt-radar';
import * as i0 from "@angular/core";
export declare function createFormControlValueAccessor(type: any): any;
export declare function createFormControlValidator(type: any): any;
export interface ValidationError {
    name: string;
    text: string;
}
export declare abstract class FormComponent extends AdaptRadarAngularGenericDirective implements ControlValueAccessor, Validator, OnInit {
    private injector;
    private ts;
    abstract value: any;
    control: NgControl;
    mainCls: string;
    suppressIcons: boolean;
    prefix: string;
    suffix: string;
    abstract label: string;
    hideLabel: boolean;
    placeholder: string;
    abstract name: string;
    abstract id: string;
    tooltipIconCls: string;
    tooltipText: string;
    /**
     * Popover icon and additional content for it.
     */
    popoverIcon: string;
    popoverPlacement: string;
    popoverTriggers: string;
    popoverContent: string | TemplateRef<any>;
    width: string;
    abstract readonly focus: EventEmitter<any>;
    abstract readonly blur: EventEmitter<any>;
    get hostClasses(): string;
    defaultFormErrors: {
        minValue?: string;
        minValueName?: string;
        maxValue?: string;
        maxValueName?: string;
        required?: string;
        requiredName?: string;
        requiredTrue?: string;
        requiredTrueName?: string;
        email?: string;
        emailName?: string;
        minLength?: string;
        minLengthName?: string;
        maxLength?: string;
        maxLengthName?: string;
        pattern?: string;
        patternName?: string;
    };
    protected _customErrorTexts: any;
    private buildInValidators;
    set errorTexts(errors: any);
    protected _readonly: boolean;
    get readonly(): any;
    set readonly(v: any);
    protected _required: boolean;
    get required(): boolean;
    set required(v: boolean);
    protected _disabled: boolean;
    get disabled(): any;
    set disabled(v: any);
    protected _requiredLabel: string;
    get requiredLabel(): string;
    set requiredLabel(v: string);
    protected _errors: ValidationError[];
    get errors(): ValidationError[];
    protected constructor(injector: Injector, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>, _entityName: AdaptRadarAngularCustomEventName);
    ngOnInit(): void;
    setDefaultErrors(translation: object): void;
    initControl(): void;
    abstract writeValue(value: any): void;
    abstract registerOnChange(fn: any): void;
    abstract registerOnTouched(fn: any): void;
    abstract validate(control: AbstractControl): {
        [key: string]: ValidationError;
    };
    overrideBuildInValidatorMessage(name: any, cb: (value?: any) => ValidationError): void;
    protected propagateChange: (_: any) => void;
    protected getBaseHostClasses(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<FormComponent, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<FormComponent, never, never, { "mainCls": "mainCls"; "suppressIcons": "suppressIcons"; "prefix": "prefix"; "suffix": "suffix"; "label": "label"; "hideLabel": "hideLabel"; "placeholder": "placeholder"; "name": "name"; "id": "id"; "tooltipIconCls": "tooltipIconCls"; "tooltipText": "tooltipText"; "popoverIcon": "popoverIcon"; "popoverPlacement": "popoverPlacement"; "popoverTriggers": "popoverTriggers"; "popoverContent": "popoverContent"; "width": "width"; "errorTexts": "errorTexts"; "readonly": "readonly"; "required": "required"; "disabled": "disabled"; "requiredLabel": "requiredLabel"; }, { "focus": "focus"; "blur": "blur"; }, never>;
}
