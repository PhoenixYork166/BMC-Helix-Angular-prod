import { QueryList, ElementRef, NgZone, OnDestroy } from '@angular/core';
/**
 * Angular Material CDK
 */
import { FocusMonitor, ListKeyManager, ListKeyManagerOption } from '@angular/cdk/a11y';
import { AdaptFocusMonitorDirective } from './focus-monitor.directive';
import { Subscription } from 'rxjs';
import { AdaptListKeyManagerItemDirective } from './list-key-manager';
import * as i0 from "@angular/core";
export declare type SelectableHTMLElement = HTMLSelectElement | HTMLButtonElement;
export declare type SelectOptionEl = AdaptFocusMonitorDirective | AdaptListKeyManagerItemDirective | ElementRef<SelectableHTMLElement>;
export declare class AdaptFocusMonitorService implements OnDestroy {
    private focusMonitor;
    private _ngZone;
    keyManager: ListKeyManager<ListKeyManagerOption>;
    private _setActiveItemSubscription;
    private _destroyed$;
    constructor(focusMonitor: FocusMonitor, _ngZone: NgZone);
    init(elements: QueryList<SelectOptionEl>): void;
    onKeyDown(event: KeyboardEvent): void;
    registerKeyDown(element: HTMLElement): Subscription;
    focusOnFirstElement(): void;
    focusOnElement(index: number): void;
    ngOnDestroy(): void;
    private skipPredicate;
    private getNativeEl;
    private onTabKeyDown;
    private getRealActiveElIndex;
    private onNotTabKeyDown;
    private trySetFocusOnActiveEl;
    private _setActiveItem;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptFocusMonitorService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AdaptFocusMonitorService>;
}
