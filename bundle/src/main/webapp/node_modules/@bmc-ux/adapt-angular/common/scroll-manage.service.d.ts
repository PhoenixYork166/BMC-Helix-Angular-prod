import { AdaptDeviceDetectionService } from './device-detection.service';
import * as i0 from "@angular/core";
export interface ScrollManagerApi {
    hide: (hiddenScrollSubscriber?: any) => void;
    show: (hiddenScrollSubscriber?: any) => void;
}
/**
 * The service for manage scrollbar visibility for the current container
 *
 * getScrollManager(element: HTMLElement) - returns an object for manipulation scroll visibility for element
 * Scroll manage object:
 * {
 *  hide: () => void;   <–– hide scrollbar
 *  show: () => void    <–– show scrollbar
 * }
 *
 */
export declare class ScrollManageService {
    private _deviceDetectionService;
    /**
     * Containers for whom provide scroll manager
     */
    private _containers;
    /**
     * Style container which will be contains all computed styles
     */
    private _styleListContainer;
    /**
     * Computed scrollbar width
     */
    private _scrollbarWidth;
    constructor(_deviceDetectionService: AdaptDeviceDetectionService);
    /**
     * Public API
     * returns hide: (() => void); show: (() => void)
     */
    getScrollManager(element: HTMLElement): ScrollManagerApi;
    /**
     * Method for search the container among registered
     * returns ContainerScrollManager
     */
    private _getContainer;
    /**
     * Method for calculating scrollbar width in the current environment
     */
    private _calculateScrollbarWidth;
    /**
     * Method for creation style container
     */
    private _createStyleContainer;
    /**
     * Method for updating all styles in the style container
     */
    private _updateStyleList;
    static ɵfac: i0.ɵɵFactoryDeclaration<ScrollManageService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ScrollManageService>;
}
/**
 * The class represents scrollbar manager for container
 */
export declare class ContainerScrollManager {
    style: string;
    el: HTMLElement;
    api: ScrollManagerApi;
    private cssClass;
    private scrollbarWidth;
    private styleUpdateCallback;
    private deviceDetection;
    private top;
    private hiddenScrollSubscribers;
    constructor(element: HTMLElement, scrollbarWidth: number, styleUpdateCallback: () => void, deviceDetectionService: AdaptDeviceDetectionService);
    /**
     * Method for checking container paddingRight property and calculating additional styles according to that
     */
    private _checkContainer;
    /**
     * Hide scroll for current container
     */
    private hideScroll;
    /**
     * Show scroll for current container
     */
    private showScroll;
}
