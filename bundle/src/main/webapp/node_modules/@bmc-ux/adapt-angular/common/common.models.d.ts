/** Like an Object */
export interface KeyValueObject<T = any> {
    [key: string]: T;
}
export declare type StylesObject = KeyValueObject<string>;
export declare type Func<T> = () => T;
export declare type Func1<T, T1> = (arg1: T1) => T;
export declare type Func2<T, T1, T2> = (arg1: T1, arg2: T2) => T;
export declare type ValueOf<T> = T[keyof T];
export declare type ValueOrFunc1<T> = T | (() => T);
export declare type ValueOrFunc2<T, T1> = T | ((arg1: T1) => T);
export declare type ValueOrFunc3<T, T1, T2> = T | ((arg1: T1, arg2: T2) => T);
export declare type PartialType<T> = {
    [P in keyof T]?: T[P];
};
export declare type DeepPartialType<T> = {
    [P in keyof T]?: DeepPartialType<T[P]>;
};
export declare type RequiredProperties<T> = {
    [P in keyof T]-?: T[P];
};
export declare type DeepRequiredProperties<T> = {
    [P in keyof T]-?: DeepRequiredProperties<T[P]>;
};
export declare type ColorVariantType = 'primary' | 'info' | 'success' | 'warning' | 'danger';
export interface DefaultPreventable {
    preventDefault: () => void;
}
export interface Datetime2TextsModel {
    emptyDate?: string;
    emptyTime?: string;
    emptyMonth?: string;
    emptyYear?: string;
    cancelBtn?: string;
    clearBtn?: string;
    nextBtn?: string;
    applyBtn?: string;
    timeSeparator?: string;
    periodSeparator?: string;
    hhBtn?: string;
    mmBtn?: string;
    ssBtn?: string;
    amBtn?: string;
    pmBtn?: string;
    hours?: string;
    minutes?: string;
    seconds?: string;
    meridiem?: string;
    month?: string;
}
export interface Datetime2RangeTextsModel {
    startLabel: string;
    endLabel: string;
    cancelBtn?: string;
    clearBtn?: string;
    nextBtn?: string;
    applyBtn?: string;
    emptyStartLabel?: string;
    emptyEndLabel?: string;
    emptyTime?: string;
    invalidValueLabel?: string;
}
export interface AdaptIsPanelOpenedCurrentlyModel {
    /**
     * Opened tab id in the panel
     */
    id: null | number;
    /**
     * Opened tab id in the panel2
     */
    id2: null | number;
    /**
     * Open panel
     */
    isPanelOpened: boolean;
    /**
     * Open panel2
     */
    isPanel2Opened: boolean;
}
export declare type GenericEvent<T = HTMLInputElement> = Event & {
    target: T;
};
