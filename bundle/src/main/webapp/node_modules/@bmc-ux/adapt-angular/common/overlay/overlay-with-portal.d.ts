import { ComponentPortal, DomPortal, TemplatePortal } from '@angular/cdk/portal';
import { ComponentRef, NgZone } from '@angular/core';
import { Direction } from '@angular/cdk/bidi';
import { Platform } from '@angular/cdk/platform';
import { Overlay, OverlayConfig, OverlayContainer, OverlayRef, ViewportRuler } from '@angular/cdk/overlay';
import { Subject } from 'rxjs';
import { AdaptOverlayConfig } from './overlay.model';
export declare class AdaptOverlayWithPortal<T> {
    portal: ComponentPortal<T> | TemplatePortal | DomPortal;
    private _adaptOverlayConfig;
    private _overlayConfig;
    private _direction;
    private _document;
    private _ngZone;
    private _overlay;
    private _overlayContainer;
    private _platform;
    private _viewportRuler;
    overlayRef: OverlayRef;
    componentRef: ComponentRef<T>;
    destroy$: Subject<void>;
    constructor(portal: ComponentPortal<T> | TemplatePortal | DomPortal, _adaptOverlayConfig: AdaptOverlayConfig, _overlayConfig: OverlayConfig, _direction: Direction, _document: Document, _ngZone: NgZone, _overlay: Overlay, _overlayContainer: OverlayContainer, _platform: Platform, _viewportRuler: ViewportRuler);
    /**
     * Destroy the overlay
     */
    destroy(): void;
    /**
     * Update the overlay position with updating the current position strategy
     */
    updatePositionForce(): void;
    private _getOverlayRef;
}
