import { NgZone } from '@angular/core';
import * as i0 from "@angular/core";
interface IdHandlerProps {
    get(element: HTMLElement, readonly: boolean): string;
    set(element: HTMLElement): string;
}
interface ReporterProps {
    log(idOrText: string, textOrId: string, element?: HTMLElement): void;
    warn(text: string, element?: HTMLElement): void;
    error(text: string): void;
}
interface ErdmOptions {
    strategy?: 'scroll' | 'object' | undefined;
    /**
     * A custom reporter that handles reporting logs, warnings and errors.
     * If not provided, a default id handler will be used.
     * If set to false, then nothing will be reported.
     */
    reporter?: ReporterProps | undefined;
    /**
     * Determines if listeners should be called when they are getting added.
     * If true, the listener is guaranteed to be called when it has been added.
     * If false, the listener will not be guaranteed to be called when
     * it has been added (does not prevent it from being called).
     *
     * @default true
     */
    callOnAdd?: boolean | undefined;
    /**
     * A custom id handler that is responsible for generating,
     * setting and retrieving id's for elements.
     * If not provided, a default id handler will be used.
     */
    idHandler?: IdHandlerProps | undefined;
    /**
     * If set to true, the the system will report debug messages as default
     * for the listenTo method.
     */
    debug?: boolean | undefined;
}
/**
 * Service to track HTMLElement dimensions change
 */
export declare class ResizeService {
    private _ngZone;
    static defaultErdmOptions: ErdmOptions;
    private _elementResizeDetector;
    constructor(_ngZone: NgZone);
    /**
     * Listens to the element for resize events and calls the listener function with the element as argument on resize events.
     * Pay attention that the callback is invoking outside the ngZone
     */
    addResizeEventListener(element: HTMLElement, callback: (elem: HTMLElement) => void): void;
    /**
     * Completely removes the detector and all listeners.
     */
    removeResizeEventListener(element: HTMLElement): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ResizeService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ResizeService>;
}
export {};
