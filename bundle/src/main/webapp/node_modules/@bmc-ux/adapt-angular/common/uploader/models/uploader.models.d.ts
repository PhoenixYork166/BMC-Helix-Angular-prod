import { Provider } from '@angular/core';
import { MessageStatus } from '../../common.enums';
import { UploaderMode } from '../enums/uploader.enum';
export interface ChunkData {
    start: number;
    end: number;
    isEmpty?: boolean;
}
export interface FileObj {
    data: File | FileSystemEntry;
    fileId?: string;
    inUploading: boolean;
    inDeleting: boolean;
    uploaded: number;
    error: boolean;
    errorText: string;
    timer?: any;
    allowDeletion?: boolean;
    deleted?: boolean;
    response?: any;
    totalFileSize?: number;
    cancelUploading?: boolean;
    canceled?: boolean;
    downloadURL?: string;
    ok?: boolean;
}
export interface StartFileUploadingEvent extends FileObj {
    id: number;
}
interface FileErrorsGeneral<T> {
    maxSize?: T;
    minSize?: T;
    typeGeneral?: T;
    typeList?: T;
    count?: T;
    duplicates?: T;
    folderSuppress?: T;
    fileSuppress?: T;
    genericErrorMessage?: T;
    removeErrorMessage?: T;
}
export declare type FileErrorsMessages = FileErrorsGeneral<{
    errorMessage: string;
    files: (File | FileSystemEntry)[];
}>;
export declare type FileErrors = FileErrorsGeneral<string>;
export interface RequestBody {
    id: number;
    chunksTotal: number;
    data: File | FileSystemEntry | Uint8Array;
    name: string;
    checkSum?: number;
    fullPath?: string;
    totalFileSize?: number;
}
export interface CommonUploadInputs {
    chunkSize: number;
    uploadUrl: string;
    customErrors: boolean;
}
export interface UploaderConfig extends CommonUploadInputs {
    allowDeletion: boolean;
    uploadMode: UploaderMode;
    suppressParallel: boolean;
    allowDuplicates: boolean;
    maxFileSize: number;
    allowedTypes: string[];
    forbiddenTypes?: string[];
    filesCount: number;
    deleteUrl: string;
}
export interface UploaderTexts {
    fileBtn?: string;
    folderBtn?: string;
    allowedTypes?: string;
    fileTypesDivider?: string;
    maxFileSize?: string;
    minFileSize?: string;
    filesCount?: string;
    fileMode?: string;
    dirMode?: string;
    mixMode?: string;
    dragAndDrop?: string;
    uploadFilesLimit?: string;
    showMore?: string;
    showLess?: string;
    required?: string;
    btnMaxFilesTooltip?: string;
    btnCancelUploading?: string;
    btnRemoveFile?: string;
    btnDeleteFile?: string;
    btnRemoveCanceled?: string;
    btnDownloadFile?: string;
    fileStatus?: {
        uploading?: string;
        uploaded?: string;
        canceled?: string;
    };
    filesAddedCount?: string;
    filesUploadedCount?: string;
    directorySearch?: string;
    remainingFilesListLabel?: string;
    btnCancelAllUploads?: string;
    notFound?: string;
    comma?: string;
    fileBtnSingle?: string;
    uploadFilesLimitSingle?: string;
    fileModeSingle?: string;
    dragAndDropSingle?: string;
}
export interface UploaderFeedbackMessage {
    text: string;
    variant: MessageStatus;
    files?: (File | FileSystemEntry)[];
    title?: string;
}
export interface AdaptUploaderModuleConfig {
    uploader?: Provider;
}
export interface FileSystemEntry extends File {
    isDirectory?: boolean;
    isFile?: boolean;
    fullPath: string;
}
export interface FileSystemDirectoryReader {
    readEntries(successCallback: (result: FileSystemEntry[]) => void, errorCallback?: (error: DOMException) => void): void;
}
interface FileSystemFlags {
    create?: boolean;
    exclusive?: boolean;
}
export interface FileSystemDirectoryEntry extends FileSystemEntry {
    isDirectory: true;
    isFile: false;
    createReader(): FileSystemDirectoryReader;
    getFile(path?: string, options?: FileSystemFlags, successCallback?: (result: FileSystemFileEntry) => void, errorCallback?: (error: DOMException) => void): void;
    getDirectory(path?: string, options?: FileSystemFlags, successCallback?: (result: FileSystemDirectoryEntry) => void, errorCallback?: (error: DOMException) => void): void;
}
export interface FileSystemFileEntry extends FileSystemEntry {
    isDirectory: false;
    isFile: true;
    file(successCallback: (file: FileSystemEntry) => void, errorCallback?: (error: DOMException) => void): void;
}
export {};
