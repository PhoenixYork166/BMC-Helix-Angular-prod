import { KeyValueObject, ValueOrFunc1, ValueOrFunc2 } from './common.models';
import { FormControl, NgControl } from '@angular/forms';
export declare function toBoolean(value: any): boolean;
export declare function toNumber(value: any): number;
export declare function toArray(value: any): any;
export declare function isUndefined(v: any): boolean;
export declare function isArray(a: any): boolean;
export declare function isFunction(fn: any): boolean;
export declare function isString(s: any): s is string;
export declare function isNumber(n: any): n is number;
export declare function isSafeNumber(value: string): boolean;
export declare function toString(value: any): string;
export declare function isDefined(value: any): boolean;
export declare function regExpEscape(text: any): string;
export declare function isImgTypeValid(type: string): boolean;
export declare function formatString(str: string, ...params: any[]): string;
export declare function isEmpty(value: any): boolean;
export declare function isEmptyOrWhitespace(value: string): boolean;
export declare function escapeHtml(unsafe: string): string;
export declare function hasShrunkText(element: HTMLElement): boolean;
export declare function querySelectorChildrenAndSelf(el: HTMLElement, selector: string): HTMLElement;
export declare function elWidthWithMargin(el: HTMLElement): number;
export declare function debounce<T = Function>(func: T, waitInMs: number): T;
export declare function hasKeyboardKeyCode(event: KeyboardEvent, eventKey: string, eventKeyCodeForFallback: number, ieEventKey?: string): boolean;
export declare function getValueOrFunc<TResult>(valOrFunc: ValueOrFunc1<TResult>): TResult;
export declare function getValueOrFunc<TResult, TParam1>(valOrFunc: ValueOrFunc2<TResult, TParam1>, param1: TParam1): TResult;
export declare function trueOrNull(val: boolean): boolean;
export declare function getElementStyles(element: HTMLInputElement): CSSStyleDeclaration;
/**
 * Tells whether the event has been triggered from element's subtree or not.
 *
 * @param event - the event to check
 * @param element - element to check
 *
 * @return whether the event has been triggered from element's subtree or not.
 */
export declare function isEventFrom(event: Event, element: HTMLElement): boolean;
/**
 * Utility function to find maximum depth in the array of objects structure
 *
 * @param data {KeyValueObject[] | KeyValueObject} - Structure to iterate through
 * @param property {string} (optional) - Specify by what property need to iterate
 *
 * @returns {number} - Max depth number
 */
export declare function maxDepth(data: KeyValueObject[] | KeyValueObject, property?: string): number;
/**
 * Check if the control has standard required validator
 * @param control: FormControl | NgControl
 */
export declare function hasRequiredValidator(control: FormControl | NgControl): boolean;
