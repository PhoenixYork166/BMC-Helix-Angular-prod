import { SafeStyle } from '@angular/platform-browser';
import { RGBColor } from 'd3-color';
import { ColorType } from './common.enums';
export interface RGBChannels {
    r: number;
    g: number;
    b: number;
}
export interface HSVChannels {
    h: number;
    s: number;
    v: number;
}
export interface AdaptContrastResults {
    ratio: string;
    AA: AdaptContrastScoreState;
    AALarge: AdaptContrastScoreState;
    AAA: AdaptContrastScoreState;
    AAALarge: AdaptContrastScoreState;
}
/**
 * @deprecated since 11.14.0
 * Use ColorType from '../common/common.enums';
 */
export declare const ColorTypes: {
    HEX: string;
    RGB: string;
};
export interface Color {
    value: string;
    name?: string;
    source?: SourceTypes;
    borderColor?: SafeStyle;
    backgroundColor?: SafeStyle;
    lightness?: number;
    selected?: boolean;
}
declare type AdaptContrastScoreState = 'pass' | 'fail';
export declare enum SourceTypes {
    Theme = 0,
    Recent = 1,
    Input = 2,
    Picker = 3,
    Empty = 4
}
export declare const ColorPatterns: {
    HEX: RegExp;
    RGB: RegExp;
};
export declare const ColorPalette: {
    WHITE: {
        r: number;
        g: number;
        b: number;
    };
    BLACK: {
        r: number;
        g: number;
        b: number;
    };
    RED: {
        r: number;
        g: number;
        b: number;
    };
    YELLOW: {
        r: number;
        g: number;
        b: number;
    };
    GREEN: {
        r: number;
        g: number;
        b: number;
    };
    CYAN: {
        r: number;
        g: number;
        b: number;
    };
    BLUE: {
        r: number;
        g: number;
        b: number;
    };
    MAGENTA: {
        r: number;
        g: number;
        b: number;
    };
};
export declare const lightnessEdge: number;
export declare const isDarkMode: boolean;
export declare class ColorUtils {
    static parseColor(color: string, pattern: RegExp, type: ColorType): RGBChannels | null;
    static getColorChannelsStr(c: RGBChannels, type: string): string;
    static getColorStr(c: RGBChannels, type: ColorType): string;
    static rgbToHSV(color: RGBChannels): HSVChannels;
    static hsvToRGB(color: HSVChannels): RGBChannels;
    static decToHex(n: number): string;
    static getDarken(color: string, percent?: number): string;
    static getBorderColor(color: string, percent?: number): string;
    static getBackgroundLightness(backgroundColor: string): number;
    static checkContrast(foreground: string, background: string): AdaptContrastResults;
    static getHexNum(colorSubstring: string): number;
    static getsRGB(color: string): number;
    static getLuminance(color: string): number;
    static componentToHex(c: number): string;
    static rgbToHex(rgb: string): string;
}
export interface AdaptRGBColor extends RGBColor {
    parsedString?: string;
    colorType?: ColorType;
}
export declare function getColorType(value: string): ColorType;
export declare function getRGBColorFromString(value: string): AdaptRGBColor;
export declare function getStringFromRGBColor(color: AdaptRGBColor, type: ColorType): string;
export {};
