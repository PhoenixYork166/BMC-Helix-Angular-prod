import { HttpErrorResponse } from '@angular/common/http';
import { Subject } from 'rxjs';
import { CommonUploadInputs, FileErrors, FileErrorsMessages, FileObj, FileSystemEntry, UploaderFeedbackMessage } from '../models/uploader.models';
import { SendFileService, SendFileUtils } from './send.file.service';
import { UploaderMode } from '../enums/uploader.enum';
import { AdaptTranslateService } from '../../i18n/index';
import { KeyValueObject } from '../../../common/common.models';
import * as i0 from "@angular/core";
export declare class FileManager {
    private uploadService;
    private defaultUploadService;
    private ts;
    messagesSubject: Subject<UploaderFeedbackMessage>;
    uploadedSubject: Subject<FileObj>;
    canceledSubject: Subject<FileObj[]>;
    uploadingStartSubject: Subject<{
        file: FileObj;
        chunkSize: number;
        uploadUrl: string;
        customErrors: boolean;
    }>;
    errorUploadingSubject: Subject<{
        file: FileObj;
        error: ProgressEvent | HttpErrorResponse;
    }>;
    uploadingProcessSubject: Subject<FileObj>;
    uploadingFinishedSubject: Subject<FileObj[]>;
    fileErrors: FileErrors;
    private _maxUploadingQueue;
    private _uploadingQueue;
    private _retryTimes;
    private _duplicate;
    private _storage;
    private _messages;
    /**
     * Returns errors messages
     */
    get messages(): FileErrorsMessages;
    /**
     * Checks if file fit the size limit
     */
    static isMaxSizeAcceptable(file: File | FileSystemEntry, maxSize: number): boolean;
    static isMinSizeAcceptable(file: File | FileSystemEntry, minSize: number): boolean;
    /**
     * Checks if file type is acceptable
     */
    static isFileTypeAcceptable(file: File | FileSystemEntry, allowedTypes: string[], forbiddenTypes: string[]): boolean;
    constructor(uploadService: SendFileUtils, defaultUploadService: SendFileService, ts: AdaptTranslateService);
    setDefaultTexts(translation: KeyValueObject): void;
    /**
     * Returns the copy of files saved in uploader
     */
    getFiles(): FileObj[];
    /**
     * Adds files to uploader storage
     */
    addFiles(files: (File | FileSystemEntry)[], allowDeletion: boolean, uploadMode: UploaderMode, suppressParallel: boolean, allowDuplicates: boolean, maxFileSize: number, chunkSize: number, allowedTypes: string[], forbiddenTypes: string[], filesCount: number, customErrors: boolean, uploadUrl: string, minFileSize?: number): void;
    startUploading(uploadInputs: CommonUploadInputs): void;
    abortUploading(uploadInputs: CommonUploadInputs, file?: FileObj): void;
    /**
     * Removes file with appropriate id from the uploader storage
     */
    removeFile(id: string): void;
    deleteFileFromServer(file: FileObj, deleteUrl: string, uploadInputs: CommonUploadInputs): Promise<FileObj>;
    getChunkStart(chunkNumber: number, chunkSize: number): number;
    getFileRequestId(chunkStart: number, chunkSize: number): number;
    updateFilesStorage(files: FileObj[] | FileObj, concat?: boolean): void;
    decreaseFilesStorage(file: FileObj): void;
    resetFilesStorage(): void;
    /**
     * Checks if files fit the max size limit
     */
    private checkFilesMaxSize;
    /**
     * Checks if files fit the min size limit
     */
    private checkFilesMinSize;
    /**
     * Excludes duplicates from uploading list
     */
    private excludeDuplicates;
    /**
     * Checks if files count is not exceeded. Removes excess files.
     */
    private checkFilesCount;
    /**
     * Checks if file types is acceptable
     */
    private checkFilesType;
    /**
     * Checks if file already existed in uploading list
     */
    private hasDuplicate;
    /**
     * Clears the warning messages array
     */
    private clearMessages;
    /**
     * Creates the general message for added portion of files
     */
    private proceedMessages;
    /**
     * Checks if files are ready for uploading. Added files to uploading queue.
     */
    private checkForUploading;
    /**
     * Returns next file which is ready for uploading
     */
    private getNextFile;
    /**
     * Starts file uploading
     */
    private uploading;
    /**
     * Reads and sends file's chunk
     */
    private readChunk;
    /**
     * Removes file from uploading queue
     */
    private removeFromUploadingQueue;
    private removeFromFileList;
    private _format;
    static ɵfac: i0.ɵɵFactoryDeclaration<FileManager, [{ optional: true; }, null, null]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<FileManager>;
}
