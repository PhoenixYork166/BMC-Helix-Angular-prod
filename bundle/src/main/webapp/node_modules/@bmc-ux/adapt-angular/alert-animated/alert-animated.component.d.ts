import { AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { ResizeService } from '../common/resize/resize.service';
import { AdaptTranslateService } from '../common/i18n/index';
import { AdaptModalService } from '../modal/modal.service';
import { KeyValueObject } from '../common/common.models';
import { AlertAnimatedConfig, AlertAnimatedTextsModel, AlertCloseEvent } from './adapt-alert.model';
import { AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
export declare class AdaptAlertAnimatedComponent extends AdaptRadarAngularGenericDirective implements OnChanges, AfterViewInit, OnDestroy, DoCheck {
    private _elementRef;
    private _modalService;
    private _resizeService;
    private _ngZone;
    private _changeDetectorRef;
    index: number;
    mobileButtons: boolean;
    isDirectionLeft: boolean;
    defaultTexts: AlertAnimatedTextsModel;
    /**
     * The limit for letters in content
     */
    limit: number;
    container: ElementRef;
    alert: ElementRef;
    wrapper: ElementRef;
    readonly alertClosed: EventEmitter<AlertCloseEvent>;
    readonly heightChanged: EventEmitter<number>;
    private _dialogModal;
    private _selectedIndex;
    /**
     * An active index which shows particular alert
     */
    get selectedIndex(): number;
    set selectedIndex(value: number);
    private _isContainer;
    get isContainer(): boolean;
    set isContainer(value: boolean);
    private _config;
    get config(): AlertAnimatedConfig[];
    set config(value: AlertAnimatedConfig[]);
    private _isVisible;
    get isVisible(): boolean;
    set isVisible(value: boolean);
    private _texts;
    get alertCountText(): string;
    get texts(): AlertAnimatedTextsModel;
    set texts(value: AlertAnimatedTextsModel);
    private _destroyed$;
    constructor(_elementRef: ElementRef<HTMLElement>, _modalService: AdaptModalService, _resizeService: ResizeService, _ngZone: NgZone, _changeDetectorRef: ChangeDetectorRef, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    setDefaultTexts(translation: KeyValueObject): void;
    /**
     * Check content type
     */
    isTemplate(content: any): boolean;
    /**
     * Close alert by index
     */
    closeAlert(index: number): void;
    /**
     * Switch alert to the previous element
     */
    keyPrev(): void;
    /**
     * Switch alert to the next element
     */
    keyNext(): void;
    /**
     * Show more information in dialog window. Required the Modal Component
     */
    showMore(alert: AlertAnimatedConfig): void;
    getHeight(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    private _onResize;
    private _doCheckOnResize;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptAlertAnimatedComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptAlertAnimatedComponent, "adapt-alert-animated", never, { "selectedIndex": "selectedIndex"; "isContainer": "isContainer"; "config": "config"; "isVisible": "isVisible"; "texts": "texts"; }, { "alertClosed": "alertClosed"; "heightChanged": "heightChanged"; }, never, never>;
}
