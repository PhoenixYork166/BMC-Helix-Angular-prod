import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, QueryList, Renderer2, SimpleChanges } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { AdaptSidebarItemComponent } from './sidebar-item/sidebar-item.component';
import { AdaptSidebarColumnComponent } from './sidebar-column/sidebar-column.component';
import { AdaptSidebarService } from './services/sidebar.service';
import { Directionality } from '@angular/cdk/bidi';
import { AdaptIsPanelOpenedCurrentlyModel } from '../common/common.models';
import { AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
export interface SidebarItem {
    /**
     * Icon class(dpl-iconfont) for each tab button
     */
    iconClass: string;
    /**
     * aria-label attribute for each tab button
     */
    ariaLabel?: string;
    /**
     * Header text for the active sidebar item
     */
    headerTitle?: string;
    /**
     * Tooltip additional text
     */
    tooltipText?: string;
}
export declare class AdaptSidebarComponent extends AdaptRadarAngularGenericDirective implements OnInit, AfterContentInit, AfterViewInit, OnChanges, OnDestroy {
    private _service;
    private _renderer;
    private _dir;
    private _changeDetectorRef;
    private _ngZone;
    pWidth: number;
    isRTL: boolean;
    tooltipPosition: 'left' | 'right';
    tabs: SidebarItem[];
    tabs2: SidebarItem[];
    isPanelOpened: boolean;
    isPanel2Opened: boolean;
    selectedTabHeaderTitle: string;
    firstCheck: boolean;
    set selectedId(id: number);
    get selectedId(): number;
    set selectedId2(id: number);
    get selectedId2(): number;
    /**
     * Destroy subject
     */
    readonly destroy$: ReplaySubject<boolean>;
    /**
     * Sets the class for component container element
     * @docs-default
     */
    className: string;
    /**
     * Sets the class for navigation container element
     * @docs-default
     */
    navClassName: string;
    /**
     * Sets the width for the slipping panel
     * @docs-default 300px
     */
    panelWidth: string;
    /**
     * Sets the width for the second slipping panel
     * @docs-default 300px
     */
    panel2Width: string;
    /**
     * Defines the side where the navigation element would be placed to. Available options - 'left', 'right'
     * @docs-default left
     */
    position: 'left' | 'right';
    /**
     * Defines the color scheme would be applied. Available options - 'light', 'dark'
     * @docs-default light
     */
    theme: 'light' | 'dark';
    /**
     * The minimum width of main block with data in px
     * @docs-default 100
     */
    widthLimit: number;
    /**
     * Sets the id of the panel which would be initially opened
     * @docs-default
     */
    openedId: number;
    /**
     * Allows main container dynamically adjust content to the width
     * @docs-default false
     */
    adjustMainContainerWidth: boolean;
    /**
     * An event fires when id for opened panel changed
     */
    readonly openedIdChange: EventEmitter<number>;
    /**
     * An event fires when the panel is either opened or closed and return an object containing 2 properties, panel id as integer and isPanelOpened as boolean
     */
    readonly isPanelOpenedCurrently: EventEmitter<AdaptIsPanelOpenedCurrentlyModel>;
    panels: QueryList<AdaptSidebarItemComponent>;
    columnPanels: QueryList<AdaptSidebarColumnComponent>;
    main: ElementRef<HTMLDivElement>;
    nav: ElementRef<HTMLDivElement>;
    panel: ElementRef<HTMLDivElement>;
    nav2: ElementRef<HTMLDivElement>;
    panel2: ElementRef<HTMLDivElement>;
    private _navWidth;
    private _selectedId;
    private _selectedId2;
    constructor(_service: AdaptSidebarService, _renderer: Renderer2, _dir: Directionality, _changeDetectorRef: ChangeDetectorRef, _ngZone: NgZone, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    clickNav({ target }: Event): void;
    closePanel(panel?: ElementRef<HTMLDivElement>): void;
    openPanel(id: number): void;
    getCurrentPosition(): string;
    getOppositePosition(): string;
    private _configureTabs;
    private _updatePanelStyles;
    private _setMainContainerStyles;
    private _closeAllPanels;
    private _setStyles;
    private _getInteractPanelData;
    private _getOppositePanelData;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptSidebarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptSidebarComponent, "adapt-sidebar", ["adaptSidebar"], { "className": "className"; "navClassName": "navClassName"; "panelWidth": "panelWidth"; "panel2Width": "panel2Width"; "position": "position"; "theme": "theme"; "widthLimit": "widthLimit"; "openedId": "openedId"; "adjustMainContainerWidth": "adjustMainContainerWidth"; }, { "openedIdChange": "openedIdChange"; "isPanelOpenedCurrently": "isPanelOpenedCurrently"; }, ["panels", "columnPanels"], ["adapt-sidebar-item", "adapt-sidebar-column[position='left']", ".main", "adapt-sidebar-column[position='right']"]>;
}
