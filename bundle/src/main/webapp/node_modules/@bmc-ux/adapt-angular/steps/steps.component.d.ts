import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { ResizeService } from '../common/resize/resize.service';
import { AdaptDeviceDetectionService } from '../common/device-detection.service';
import { Subject } from 'rxjs';
import { AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
export interface StepsMenuItem {
    label?: string;
    shortLabel?: string;
    icon?: string;
    src?: string;
    command?: (event?: any) => void;
    url?: string;
    eventEmitter?: EventEmitter<any>;
    disabled?: boolean;
    hover?: boolean;
}
export declare class AdaptStepsComponent extends AdaptRadarAngularGenericDirective implements OnInit, AfterViewInit, OnDestroy {
    renderer: Renderer2;
    private element;
    private devDetection;
    private resizeService;
    private _ngZone;
    expandedSteps: StepsMenuItem[];
    isMobile: boolean;
    expandedStartId: number;
    expandedEndId: number;
    stepsSwipe: SwipeSteps;
    stepsSwipeState: SwipeState;
    swipeWrapperWidth: number;
    /**
     * Sets the array of step items
     * @docs-default
     */
    steps: StepsMenuItem[];
    /**
     * Sets the index of the selected step. Also you could set it -1 just not to select any step initially
     * @docs-default -1
     */
    activeIndex: number;
    /**
     * Sets the array of step items
     * @docs-default
     */
    model: StepsMenuItem[];
    /**
     * Whether the items are clickable or not
     * @docs-default true
     */
    readonly: boolean;
    /**
     * Specifies inline style of the component
     * @docs-default
     *
     */
    style: string;
    /**
     * Specifies style class of the component
     * @docs-default
     */
    styleClass: string;
    /**
     * An event fires on active step changed.
     * Returns step index
     */
    readonly activeIndexChange: EventEmitter<number>;
    container: ElementRef;
    swipePanel: ElementRef;
    private bodyEl;
    private tailFirstEl;
    private tailLastEl;
    private selectedSpotEl;
    private spotEl;
    private stepItems;
    private el;
    private stepsToShow;
    private widthLimit;
    private _initActiveIndex;
    private _expandedStartId;
    private _selectionSpotHidden;
    constructor(renderer: Renderer2, element: ElementRef, devDetection: AdaptDeviceDetectionService, resizeService: ResizeService, _ngZone: NgZone, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnDestroy(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    isActive(id: number): boolean;
    isDisabled(id: number): boolean;
    isCollapsedStep(id: number): boolean;
    clickStep(id: number, step?: StepsMenuItem, event?: MouseEvent): void;
    stepMouseAction(id: number): void;
    updateSelectionSpot(): void;
    applySelectedCls(id: number): boolean;
    selectStepById(id: number): void;
    getMobileSwipeIndicatorWidth(id: number): string | any | number;
    private hideSelectionSpot;
    private showSelectionSpot;
    private resizeListener;
    private updateExpandedSteps;
    private getStepCount;
    private _initMobileView;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptStepsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptStepsComponent, "adapt-steps", never, { "steps": "steps"; "activeIndex": "activeIndex"; "model": "model"; "readonly": "readonly"; "style": "style"; "styleClass": "styleClass"; }, { "activeIndexChange": "activeIndexChange"; }, never, never>;
}
export declare class SwipeSteps {
    readonly _swipeContainer: HTMLElement;
    readonly _stepCount: number;
    readonly _tolerance: number;
    stateChange: Subject<SwipeState>;
    private _activeStep;
    private _stepWidth;
    private _translate$;
    private _swipeState;
    constructor(swipeContainer: HTMLElement, stepCount: number, activeStep?: number, tolerance?: number);
    update(activeStep?: number): void;
    gotoStep(stepNumber: number): void;
    prevStep(): void;
    nextStep(): void;
    private _init;
}
export interface SwipeState {
    dragging: boolean;
    draggingShift: number;
    step: number;
    translate: number;
}
