import { AfterViewInit, ChangeDetectorRef, DoCheck, ElementRef, EventEmitter, IterableDiffers, NgZone, OnDestroy, OnInit, QueryList, Renderer2, TemplateRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { Directionality } from '@angular/cdk/bidi';
import { ResizeService } from '../common/resize/resize.service';
import { AdaptTranslateService } from '../common/i18n/translate-service';
import { AdaptRadarAngularService } from '../common/radar/adapt-radar';
import { AdaptRxFormControlDirective } from '../rx/form-control/index';
import { ButtonConfig, ButtonGroupType, ButtonSize, CheckmarkColorType, InnerConfigType } from './button-group.models';
import { AdaptButtonComponent } from '../button/index';
import { KeyValueObject } from '../common/common.models';
import * as i0 from "@angular/core";
export declare class AdaptButtonGroupComponent extends AdaptRxFormControlDirective implements OnInit, AfterViewInit, DoCheck, OnDestroy {
    private _renderer;
    private _dir;
    private _ngZone;
    private _differs;
    private _elementRef;
    private _resizeService;
    protected controlName: string;
    isRtl: boolean;
    isVerticalByResize: boolean;
    innerConfig: InnerConfigType[];
    lightnessEdge: number;
    checkmarkColor: CheckmarkColorType;
    /**
     * Configuration for button-group elements. See interface below.
     * @docs-default []
     */
    set config(value: ButtonConfig[]);
    /**
     * Specifies buttons size. Supported values: 'xtra-large', 'xtra-small', 'small', 'large', 'block'.
     * Only valid for the button group of type 'button'
     * @docs-default
     */
    get size(): ButtonSize;
    set size(v: ButtonSize);
    /**
     * Specifies type of the button group. Supported values: 'button', 'tile', 'color-picker'.
     * @since v10.18.0
     * @docs-default 'button'
     */
    get groupType(): ButtonGroupType;
    set groupType(v: ButtonGroupType);
    get groupTemplate(): TemplateRef<void>;
    /**
     * Makes a set of buttons appear vertically stacked.
     * Only valid for the button group of type 'button'
     * @since v10.11.0
     * @docs-default false
     */
    isVertical: boolean;
    /**
     * Set multiselectable (checkbox) behaviour.
     * @docs-default false
     */
    multiselectable: boolean;
    /**
     * Whether button could we unchecked.
     * @docs-default false
     */
    uncheckable: boolean;
    /**
     * Set checkbox style for multiselectable false.
     * Only valid for the button group of type 'color-picker' and 'tile'
     * @since v11.14.0
     * @docs-default
     */
    useCheckboxStyle: boolean;
    /**
     * Emits an event when button-group state changed
     */
    readonly modelArrayChanged: EventEmitter<InnerConfigType[]>;
    buttons: QueryList<AdaptButtonComponent>;
    buttonTypeGroup: TemplateRef<void>;
    swatchTypeGroup: TemplateRef<void>;
    layoutTemplate: TemplateRef<{
        item: KeyValueObject;
    }> | null;
    private _model;
    private _size;
    private _groupType;
    private readonly _activeState;
    private _modelDiffer;
    private _elementWrapperBlock;
    private _buttonsVerticalInitialWidth;
    constructor(ngControl: NgControl, ts: AdaptTranslateService, _changeDetectorRef: ChangeDetectorRef, _renderer: Renderer2, _dir: Directionality, _ngZone: NgZone, _differs: IterableDiffers, _elementRef: ElementRef, _resizeService: ResizeService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    getBorderColor(color: string): string;
    getBoxShadowColor(color: string): string;
    getBackgroundColor(color: string): string;
    setStyle(): void;
    optionSelection(index: number): void;
    onChange: (inputModel: boolean[]) => void;
    onTouched: () => void;
    writeValue(model: boolean[]): void;
    trackByFn(index: number, element: InnerConfigType): number;
    protected _focusNativeElement(): void;
    private _updateModel;
    /**
     * set border-radius value
     */
    private _applyHorizontalBordersValue;
    private _applyVerticalBordersValue;
    private _calculateButtons;
    private _checkButtonsOnResize;
    isColorLight(color: string): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptButtonGroupComponent, [{ optional: true; self: true; }, null, null, null, null, null, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptButtonGroupComponent, "adapt-button-group", ["adaptBtnGroup"], { "config": "config"; "size": "size"; "groupType": "groupType"; "isVertical": "isVertical"; "multiselectable": "multiselectable"; "uncheckable": "uncheckable"; "useCheckboxStyle": "useCheckboxStyle"; }, { "modelArrayChanged": "modelArrayChanged"; }, ["layoutTemplate"], never>;
}
