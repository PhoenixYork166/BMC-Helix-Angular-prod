import { OnDestroy, ViewContainerRef, ComponentFactoryResolver, Injector, OnChanges, SimpleChanges, ChangeDetectorRef } from '@angular/core';
import { Subscription } from 'rxjs';
import { PromiseTrackerService } from './promise-tracker.service';
import { AdaptBusyService } from './busy.service';
import { BusyConfig } from './busy-config';
import * as i0 from "@angular/core";
/**
 * ### Syntax
 *
 * - `<div [ngBusy]="busy">...</div>`
 * - `<div [ngBusy]="[busyA, busyB, busyC]">...</div>`
 * - `<div [ngBusy]="{busy: busy, message: 'Loading...', backdrop: false, delay: 200, minDuration: 600}">...</div>`
 */
export declare class AdaptBusyDirective implements OnDestroy, OnChanges {
    private service;
    private tracker;
    private cfResolver;
    private vcRef;
    private injector;
    private changeDetectorRef;
    /**
     * Configuration option, see structure below
     * @docs-default
     */
    options: BusyConfig;
    adaptRadarDisableEventSending: boolean;
    /**
     * Alias for ngBusy.busy
     * @since v10.2.0
     * @docs-default
     */
    set busyPromise(value: Promise<unknown> | Subscription | (Promise<unknown> | Subscription)[]);
    get busyPromise(): Promise<unknown> | Subscription | (Promise<unknown> | Subscription)[];
    /**
     * Set determinate mode for loaders
     * @since v11.6.0
     * @docs-default false
     */
    determinate: boolean;
    private optionsNorm;
    private busyRef;
    private backdropRef;
    constructor(service: AdaptBusyService, tracker: PromiseTrackerService, cfResolver: ComponentFactoryResolver, vcRef: ViewContainerRef, injector: Injector, changeDetectorRef: ChangeDetectorRef);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    updateConfig(): void;
    private normalizeOptions;
    private destroyComponents;
    private createBackdrop;
    private createBusy;
    private _bindComponentProperties;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptBusyDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptBusyDirective, "[adapt-busy], [ngBusy]", never, { "options": "ngBusy"; "adaptRadarDisableEventSending": "adaptRadarDisableEventSending"; "busyPromise": "busyPromise"; "determinate": "determinate"; }, {}, never>;
}
