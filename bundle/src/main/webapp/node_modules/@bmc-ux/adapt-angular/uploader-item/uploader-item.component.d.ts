import { OnInit, EventEmitter } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { Directionality } from '@angular/cdk/bidi';
import { FileManager } from '../common/uploader/services/file-manager';
import { IconManager } from '../common/uploader/services/icons-manager';
import { FileObj, UploaderTexts } from '../common/uploader/models/uploader.models';
import * as i0 from "@angular/core";
export declare class AdaptUploaderItemComponent implements OnInit {
    private fileManager;
    private iconService;
    private _sanitizer;
    private _dir;
    collapseBlock: boolean;
    reusable: boolean;
    disabled: boolean;
    readonly: boolean;
    id: number;
    file: FileObj;
    texts: UploaderTexts;
    componentAnimation: boolean;
    indeterminateFileLoader: boolean;
    url: string;
    deleteUrl: string;
    chunkSize: string;
    customErrors: boolean;
    testID: string;
    enableCustomDownload: boolean;
    customDownload: (file: FileObj) => void;
    readonly beforeFileRemove: EventEmitter<FileObj>;
    readonly afterFileRemove: EventEmitter<FileObj>;
    readonly fileDeleted: EventEmitter<FileObj>;
    isRtl: boolean;
    icon: SafeHtml;
    loader: any;
    get isFileUploaded(): boolean;
    constructor(fileManager: FileManager, iconService: IconManager, _sanitizer: DomSanitizer, _dir: Directionality);
    ngOnInit(): void;
    /**
     * Removes file from uploading list
     */
    removeItem(): void;
    /**
     * Removes file from the server
     */
    deleteItem(): void;
    getFileName(isFileDownload?: boolean): string;
    cancelItemUploading(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptUploaderItemComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptUploaderItemComponent, "adapt-uploader-item", never, { "collapseBlock": "collapseBlock"; "reusable": "reusable"; "disabled": "disabled"; "readonly": "readonly"; "id": "id"; "file": "file"; "texts": "texts"; "componentAnimation": "componentAnimation"; "indeterminateFileLoader": "indeterminateFileLoader"; "url": "url"; "deleteUrl": "deleteUrl"; "chunkSize": "chunkSize"; "customErrors": "customErrors"; "testID": "testID"; "enableCustomDownload": "enableCustomDownload"; "customDownload": "customDownload"; }, { "beforeFileRemove": "beforeFileRemove"; "afterFileRemove": "afterFileRemove"; "fileDeleted": "fileDeleted"; }, never, never>;
}
