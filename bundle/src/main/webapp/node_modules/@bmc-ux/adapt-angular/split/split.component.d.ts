import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import { AdaptSplitAreaDirective } from './split-area.directive';
import { AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
export interface SplitArea {
    component: AdaptSplitAreaDirective;
    sizeUser: number | null;
    size: number;
    orderUser: number | null;
    order: number;
    minPixel: number;
}
export declare class AdaptSplitComponent extends AdaptRadarAngularGenericDirective implements OnInit, OnDestroy, OnChanges {
    private cdRef;
    private elementRef;
    private renderer;
    private ngZone;
    /**
     * Sets splitter direction. Accepts values: 'vertical' or 'horizontal'
     * @docs-default horizontal
     */
    direction: string;
    /**
     * Sets width. If no value specified - takes all space available
     * @docs-default 100%
     */
    width: number;
    /**
     * Sets height. If no value specified - takes all space available
     * @docs-default 100%
     */
    height: number;
    /**
     * Sets gutter (dragging element) width size
     * @docs-default 1
     */
    gutterSize: number;
    disabled: boolean;
    /**
     * Adds transitions to the split area on changing its size or visibility
     * @docs-default false
     */
    visibleTransition: boolean;
    minWidthPercent: number;
    /**
     * Emits event on splitter drag start
     */
    readonly dragStart: EventEmitter<number[]>;
    /**
     * Emits event on splitter drag progress
     */
    readonly dragProgress: EventEmitter<number[]>;
    /**
     * Emits event on splitter drag end
     */
    readonly dragEnd: EventEmitter<number[]>;
    areas: SplitArea[];
    private isDragging;
    private containerSize;
    private areaASize;
    private areaBSize;
    private eventsDragFct;
    get styleFlexDirection(): string;
    get dragging(): boolean;
    private get visibleAreas();
    private get nbGutters();
    constructor(cdRef: ChangeDetectorRef, elementRef: ElementRef, renderer: Renderer2, ngZone: NgZone, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    addArea(component: AdaptSplitAreaDirective, orderUser: number | null, sizeUser: number | null, minPixel: number): void;
    updateArea(component: AdaptSplitAreaDirective, orderUser: number | null, sizeUser: number | null, minPixel: number): void;
    removeArea(area: AdaptSplitAreaDirective): void;
    hideArea(area: AdaptSplitAreaDirective): void;
    showArea(area: AdaptSplitAreaDirective): void;
    isLastVisibleArea(area: SplitArea): boolean;
    startDragging(startEvent: MouseEvent | TouchEvent, gutterOrder: number): void;
    notify(type: string): void;
    ngOnDestroy(): void;
    private refresh;
    private refreshStyleSizes;
    private dragEvent;
    private drag;
    private stopDragging;
    private _setHeightStyle;
    private _setWidthStyle;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptSplitComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptSplitComponent, "adapt-split", never, { "direction": "direction"; "width": "width"; "height": "height"; "gutterSize": "gutterSize"; "disabled": "disabled"; "visibleTransition": "visibleTransition"; "minWidthPercent": "minWidthPercent"; }, { "dragStart": "dragStart"; "dragProgress": "dragProgress"; "dragEnd": "dragEnd"; }, never, ["*"]>;
}
