import { AfterViewInit, ElementRef, OnDestroy, OnInit } from '@angular/core';
import { FocusOrigin } from '@angular/cdk/a11y';
import { AdaptInteractionSourceService } from '../common/interaction-source';
import * as i0 from "@angular/core";
export declare class AdaptFocusHolderDirective implements OnInit, AfterViewInit, OnDestroy {
    private _elRef;
    private _interactionSourceService;
    /**
     *  Hold `Tab` key focus in the directive's host element area
     */
    adaptFocusHolder: boolean;
    /**
     *  Auto holding focus on init
     */
    holdFocusOnInit: boolean;
    /**
     *  The event type for the focusing holder init
     */
    eventType: FocusOrigin;
    /**
     * Focus first focusable element in the directive area on init
     */
    focusFirstOnInit: boolean;
    /**
     *  The delay before first element in the host element will be focussed
     */
    focusFirstDelay: number;
    /**
     *  Restore last focused element after directive's host element destroy
     */
    restoreLastFocusedElement: boolean;
    /**
     *  Focus the element next to last focussed element after directive's host element destroy
     */
    focusNextElement: boolean;
    /**
     * Prevent scrolling to the focus element. Part of FocusOptions.
     * @docs-default false
     * @since v12.34.0
     */
    preventScroll: boolean;
    private _lastFocusEl;
    private _lastElementIndex;
    private _focusedElementsList;
    private _destroyed$;
    constructor(_elRef: ElementRef, _interactionSourceService: AdaptInteractionSourceService);
    _onKeydown(event: KeyboardEvent): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptFocusHolderDirective, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptFocusHolderDirective, "adapt-focus-holder, [adaptFocusHolder]", never, { "adaptFocusHolder": "adaptFocusHolder"; "holdFocusOnInit": "holdFocusOnInit"; "eventType": "eventType"; "focusFirstOnInit": "focusFirstOnInit"; "focusFirstDelay": "focusFirstDelay"; "restoreLastFocusedElement": "restoreLastFocusedElement"; "focusNextElement": "focusNextElement"; "preventScroll": "preventScroll"; }, {}, never, ["*"]>;
}
