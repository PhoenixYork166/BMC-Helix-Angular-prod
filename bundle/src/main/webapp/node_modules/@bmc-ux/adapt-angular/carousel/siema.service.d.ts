import { NgZone } from '@angular/core';
import { CarouselOptions } from './carousel.model';
import * as i0 from "@angular/core";
export declare class SiemaService {
    private _document;
    private _ngZone;
    config: CarouselOptions;
    selector: any;
    selectorWidth: number;
    innerElements: any[];
    currentSlide: number;
    transformProperty: 'transform' | 'WebkitTransform';
    perPage: number;
    pointerDown: boolean;
    drag: {
        startX: number;
        endX: number;
        startY: number;
        letItGo: boolean;
        preventClick: boolean;
    };
    sliderFrame: HTMLElement;
    eventHandlers: string[];
    /**
     * Determine if browser supports unprefixed transform property.
     * Google Chrome since version 26 supports prefix-less transform
     * returns {string} - Transform property supported by client.
     */
    static webkitOrNot(): 'transform' | 'WebkitTransform';
    constructor(_document: any, // https://github.com/angular/angular/issues/20351
    _ngZone: NgZone);
    run(config: CarouselOptions): void;
    /**
     * Attaches listeners to required events.
     */
    attachEvents(): void;
    /**
     * Detaches listeners from required events.
     */
    detachEvents(): void;
    /**
     * Builds the markup and attaches listeners to required events.
     */
    init(): void;
    /**
     * Build a sliderFrame and slide to a current item.
     */
    buildSliderFrame(): void;
    buildSliderFrameItem(elm: any): HTMLDivElement;
    /**
     * Determinates slides number accordingly to clients viewport.
     */
    resolveSlidesNumber(): void;
    /**
     * Go to previous slide.
     * param {number} [howManySlides=1] - How many items to slide backward.
     * param {function} callback - Optional callback function.
     */
    prev(howManySlides?: number, callback?: Function): void;
    /**
     * Go to next slide.
     * param {number} [howManySlides=1] - How many items to slide forward.
     * param {function} callback - Optional callback function.
     */
    next(howManySlides?: number, callback?: Function): void;
    /**
     * Disable transition on sliderFrame.
     */
    disableTransition(): void;
    /**
     * Enable transition on sliderFrame.
     */
    enableTransition(): void;
    /**
     * Go to slide with particular index
     * param {number} index - Item index to slide to.
     * param {function} callback - Optional callback function.
     */
    goTo(index: number, callback?: Function): void;
    /**
     * Moves sliders frame to position of currently active slide
     */
    slideToCurrent(enableTransition?: boolean): void;
    /**
     * Recalculate drag /swipe event and reposition the frame of a slider
     */
    updateAfterDrag(): void;
    /**
     * When window resizes, resize slider components as well
     */
    resizeHandler(): void;
    /**
     * Clear drag after touchend and mouseup event
     */
    clearDrag(): void;
    /**
     * touchstart event handler
     */
    touchstartHandler(e: any): void;
    /**
     * touchend event handler
     */
    touchendHandler(e: TouchEvent): void;
    /**
     * touchmove event handler
     */
    touchmoveHandler(e: TouchEvent): void;
    /**
     * mousedown event handler
     */
    mousedownHandler(e: any): void;
    /**
     * mouseup event handler
     */
    mouseupHandler(e: MouseEvent): void;
    /**
     * mousemove event handler
     */
    mousemoveHandler(e: any): void;
    /**
     * mouseleave event handler
     */
    mouseleaveHandler(e: MouseEvent): void;
    /**
     * click event handler
     */
    clickHandler(e: Event): void;
    /**
     * Remove item from carousel.
     * param {number} index - Item index to remove.
     * param {function} callback - Optional callback to call after remove.
     */
    remove(index: number, callback: Function): void;
    /**
     * Insert item to carousel at particular index.
     * param {HTMLElement} item - Item to insert.
     * param {number} index - Index of new new item insertion.
     * param {function} callback - Optional callback to call after insert.
     */
    insert(item: HTMLElement, index: number, callback?: Function): void;
    /**
     * Prepernd item to carousel.
     * param {HTMLElement} item - Item to prepend.
     * param {function} callback - Optional callback to call after prepend.
     */
    prepend(item: HTMLElement, callback: Function): void;
    /**
     * Append item to carousel.
     * param {HTMLElement} item - Item to append.
     * param {function} callback - Optional callback to call after append.
     */
    append(item: HTMLElement, callback: Function): void;
    /**
     * Removes listeners and optionally restores to initial markup
     * param {boolean} restoreMarkup - Determinants about restoring an initial markup.
     * param {function} callback - Optional callback function.
     */
    destroy(restoreMarkup?: boolean, callback?: Function): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SiemaService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<SiemaService>;
}
