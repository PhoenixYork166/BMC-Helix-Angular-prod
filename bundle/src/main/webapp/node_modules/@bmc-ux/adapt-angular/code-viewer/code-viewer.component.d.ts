import { AfterViewInit, ChangeDetectorRef, ElementRef, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import { CodeLang, CodeViewerTextsModel } from './code-viewer.model';
import { CodeViewerService } from './code-viewer.service';
import { KeyValueObject } from '../common/common.models';
import 'prismjs/prism.js';
import 'prismjs/components/prism-json.js';
import 'prismjs/components/prism-typescript.js';
import 'prismjs/plugins/line-numbers/prism-line-numbers.js';
import { AdaptTranslateService } from '../common/i18n/index';
import { AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
export declare class AdaptCodeViewerComponent extends AdaptRadarAngularGenericDirective implements AfterViewInit, OnDestroy, OnInit, OnChanges {
    private _codeViewerService;
    private _renderer;
    private _ts;
    private _changeDetectorRef;
    codeEl: ElementRef<HTMLElement>;
    preEl: ElementRef<HTMLPreElement>;
    /**
     * The code snippet to be highlighted, as a string
     * @docs-default
     */
    code: string;
    /**
     * Default theme
     * @docs-default
     */
    theme: 'dark' | 'light';
    /**
     * Language syntax highlighter
     * @docs-default
     */
    lang: CodeLang;
    /**
     * Toolbar text
     * @docs-default {darkTheme: 'Dark theme', showLineNumbers: 'Show line numbers'}
     */
    texts: CodeViewerTextsModel;
    /**
     * Toggle toolbar visibility
     * @docs-default true
     */
    hasToolbar: boolean;
    defaultTexts: CodeViewerTextsModel;
    darkTheme: boolean;
    hasLines: boolean;
    get preClass(): string;
    get cvClass(): string[];
    private _subscriptions;
    private _hasInited;
    constructor(_codeViewerService: CodeViewerService, _renderer: Renderer2, _ts: AdaptTranslateService, _changeDetectorRef: ChangeDetectorRef, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    hasLinesChange(value: boolean): void;
    darkThemeChange(value: boolean): void;
    prepareHtmlAndHighlightCode(): void;
    private highlightCode;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptCodeViewerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptCodeViewerComponent, "adapt-code-viewer", never, { "code": "code"; "theme": "theme"; "lang": "lang"; "texts": "texts"; "hasToolbar": "hasToolbar"; }, {}, never, never>;
}
