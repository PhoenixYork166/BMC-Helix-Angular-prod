import { AnimationEvent } from '@angular/animations';
import { Directionality } from '@angular/cdk/bidi';
import { CdkDragDrop, CdkDragStart } from '@angular/cdk/drag-drop';
import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, QueryList, Renderer2, SimpleChanges } from '@angular/core';
import { AdaptDeviceDetectionService } from '../common/device-detection.service';
import { AdaptTranslateService } from '../common/i18n/index';
import { ResizeService } from '../common/resize/resize.service';
import { AdaptDropdownDirective } from '../dropdown/index';
import { AdaptTabsControlsDirective, TabsControlsTypeDirection } from '../tabs-controls/index';
import { AdaptTabsPanelComponent } from './tabs-panel.component';
import { AdaptTabsConfig } from './tabs.config';
import { KeyValueObject } from '../common/common.models';
import { AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
export interface ActiveTabChangeEvent {
    index: number;
    event: MouseEvent;
}
export interface TabEvent {
    tab: AdaptTabsPanelComponent;
    index: number;
    event: MouseEvent;
}
export interface TabsTexts {
    addTab?: string;
}
export declare type TabsType = 'pills' | 'tabs' | 'inverted' | 'bordered' | 'stacked' | 'justified' | 'responsive';
export declare class AdaptTabsComponent extends AdaptRadarAngularGenericDirective implements AfterViewInit, AfterContentInit, OnChanges, OnDestroy, OnInit {
    conf: AdaptTabsConfig;
    element: ElementRef<HTMLElement>;
    renderer: Renderer2;
    resizeService: ResizeService;
    dir: Directionality;
    deviceDetection: AdaptDeviceDetectionService;
    private ts;
    private _changeDetectorRef;
    private _ngZone;
    /**
     * Public variables of tabs component
     * dd means - dropdown
     */
    ddState: boolean;
    ddIsVisible: boolean;
    ddTitleText: string;
    isCollapsed: boolean;
    isAnimationDone: boolean;
    tabsControlDirection: TabsControlsTypeDirection;
    showLeftShadow: boolean;
    showRightShadow: boolean;
    rtl: boolean;
    showAddText: boolean;
    ddCount: number;
    defaultTexts: TabsTexts;
    focusIndex: number;
    smallerPadding: boolean;
    subtextTabCount: number;
    showBackBtn: boolean;
    showForwardBtn: boolean;
    activeHiddenForward: boolean;
    activeHiddenBack: boolean;
    shadowWidth: {
        dropdown: number;
        addButton: number;
        addSubButton: number;
    };
    /**
     * Tabs types
     */
    TYPES_TABS: {
        PILLS: string;
        DEFAULT: string;
        INVERTED: string;
        BORDERED: string;
        STACKED: string;
        JUSTIFIED: string;
        RESPONSIVE: string;
    };
    /**
     * @since v11.11.0
     * @docs-default true
     */
    showTabToolbar: boolean;
    /**
     * Style class for tab content of the component
     * @docs-default
     */
    customCssTabContent: string;
    /**
     * Sets the height of the tab to fill the height of the container
     * @docs-default false
     */
    fullHeight: boolean;
    /**
     * Custom text for add tabs button
     * @since v10.9.0
     * @docs-default texts.addTab = 'Add tab'
     */
    texts: TabsTexts;
    /**
     * Enable dragging visible tabs the list
     * @since v10.12.0
     * @docs-default false
     */
    enableDnD: boolean;
    /**
     * Add CSS class to
     * @since v12.10.0
     * @docs-default undefined
     */
    customClassTabList: string;
    /**
     * @docs-default
     */
    allowTabsAdding: boolean;
    /**
     * A unique id for the dropdown of responsive tabs
     * @docs-default adapt-tabs-dropdown-${nextId++}
     */
    id: string;
    /**
     * A unique testID for the dropdown of responsive tabs
     * @docs-default adapt-tabs-dropdown-${nextId++}
     */
    testID: string;
    /**
     * Dropdown title for responsive tabs
     * @docs-default
     */
    dropdownTitle: string;
    /**
     * Fade color for mobile devices
     * @docs-default
     */
    fadeColor: string;
    /**
     * Tabs toolbar carousel mode
     * @docs-default true
     */
    carouselMode: boolean;
    /**
     * Tabs justify prop of the element
     * @docs-default
     */
    get justify(): string;
    set justify(value: string);
    /**
     * Tabs type of the element
     * @docs-default
     */
    get type(): TabsType;
    set type(value: TabsType);
    /**
     * The index of the active tab
     * @docs-default
     */
    get activeIndex(): number;
    set activeIndex(value: number);
    /**
     * Output to enable get tab and tab index which was removed
     */
    readonly closedIndexEmitter: EventEmitter<TabEvent>;
    /**
     * Output to enable support for two-way binding on `[(tab-active)]`
     */
    readonly activeIndexEmitter: EventEmitter<ActiveTabChangeEvent>;
    readonly addTabsEmitter: EventEmitter<MouseEvent>;
    readonly tabClicked: EventEmitter<TabEvent>;
    readonly tabDropped: EventEmitter<AdaptTabsPanelComponent[]>;
    /**
     * reference to tabs panel component
     */
    tabs: QueryList<AdaptTabsPanelComponent>;
    _tabsControl: AdaptTabsControlsDirective;
    hiddenTabKebabMenu: AdaptDropdownDirective;
    /**
     * Reference to dropdown item
     * we need 'read' because we are referencing Angular component
     * more - https://stackoverflow.com/questions/39908967/
     * how-to-get-reference-of-the-component-associated-with-elementref-in-angular-2/39909203#39909203
     */
    private hiddenTabsDropdownEl;
    /**
     * Reference to AdaptDropdownDirective
     */
    private hiddenTabsDD;
    private hiddenTabsDDToggle;
    private hiddenTabsDDMenuEl;
    /**
     * Reference to tab bar list
     */
    private navList;
    private shadowDropdownItem;
    private shadowAddButton;
    private shadowSubAddButton;
    /**
     * Reference to tab bar links
     */
    private navLinks;
    /**
     * Reference to links in the dropdown
     */
    private hiddenTabsDDNavLinks;
    get height(): string;
    /**
     * Private variables of tabs component
     */
    private _element;
    private _activeIndex;
    private _justify;
    private _types;
    private _toolbar;
    private _toolbarScrollStep;
    private _destroyed$;
    private _backPaddleWidth;
    private _forwardPaddleWidth;
    static verifyCloseTarget(e: MouseEvent): boolean;
    static verifyAnimationProp(prop: string, value: string): boolean;
    constructor(conf: AdaptTabsConfig, element: ElementRef<HTMLElement>, renderer: Renderer2, resizeService: ResizeService, dir: Directionality, deviceDetection: AdaptDeviceDetectionService, ts: AdaptTranslateService, _changeDetectorRef: ChangeDetectorRef, _ngZone: NgZone, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    /**
     * Check active index of tabs on ngOnChanges lifecycle hook
     */
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    dropTab(event: CdkDragDrop<string[]>): void;
    onTabDragStarted(event: CdkDragStart, tab: AdaptTabsPanelComponent, index: number): void;
    onTabDropped(event: CdkDragDrop<AdaptTabsPanelComponent[]>, tab: AdaptTabsPanelComponent): void;
    onKebabMenuClick(event: MouseEvent, tab: AdaptTabsPanelComponent): void;
    onContextMenu(event: MouseEvent): void;
    get isMobile(): boolean;
    get hasFadeLeft(): boolean;
    get hasFadeRight(): boolean;
    get fadeElStyle(): {
        [key: string]: string;
    };
    get dropdownToggleBtnTabIndex(): number;
    get hiddenTabsDDAutoClose(): boolean;
    setDefaultTexts(translation: KeyValueObject): void;
    setActiveTab(index: number, propagateIndexChange: boolean, e: MouseEvent): void;
    addTabsCallback(event: MouseEvent): void;
    getHiddenTabsCount(): number;
    scrollBack(): void;
    scrollForward(): void;
    /** Search the active index of a tab. */
    searchActiveIndex(): void;
    /** Check the index of the active tab. */
    checkActiveIndex(): void;
    select(e: MouseEvent, tab: AdaptTabsPanelComponent): void;
    getNextAvailableTab(tab: AdaptTabsPanelComponent): AdaptTabsPanelComponent;
    getPrevAvailableTab(tab: AdaptTabsPanelComponent): AdaptTabsPanelComponent;
    tabClick(event: MouseEvent, tab: AdaptTabsPanelComponent, index: number): void;
    tabKeydown(event: KeyboardEvent, tab: AdaptTabsPanelComponent, index: number): void;
    hiddenTabsDropdownToggleKeydown(event: KeyboardEvent): void;
    listItemFocusOut(event: FocusEvent): void;
    setCustomTexts(): void;
    updateShadowSizes(): void;
    calculateTabs(): void;
    toggleDropdown(): void;
    verifySingleTab(): void;
    onAnimationStart(e: AnimationEvent): void;
    onAnimationDone(e: AnimationEvent): void;
    trackByForTabs(index: number, tab: AdaptTabsPanelComponent): string | number;
    isBadgeEnabled(tab: AdaptTabsPanelComponent): boolean;
    private _scrollToActiveElement;
    private _checkToolbarScrollUIState;
    private _checkToolbarShadows;
    private _closeTabIndex;
    private _isActiveDropdown;
    /**
     * Apply nav-ink-bar animation for an active tab
     */
    private _applyInkBarAnimation;
    private _checkSingleActiveIndex;
    private _checkTabsOnResize;
    private _sendRadarEvent;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptTabsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptTabsComponent, "adapt-tabset", ["adaptTabset"], { "showTabToolbar": "showTabToolbar"; "customCssTabContent": "customCssTabContent"; "fullHeight": "fullHeight"; "texts": "texts"; "enableDnD": "enableDnD"; "customClassTabList": "customClassTabList"; "allowTabsAdding": "allow-tabs-adding"; "id": "id"; "testID": "testID"; "dropdownTitle": "dropdown-title"; "fadeColor": "fadeColor"; "carouselMode": "carouselMode"; "justify": "justify"; "type": "type"; "activeIndex": "tab-active"; }, { "closedIndexEmitter": "tab-index-closed"; "activeIndexEmitter": "tab-active-changed"; "addTabsEmitter": "add-tab-clicked"; "tabClicked": "tabClicked"; "tabDropped": "tabDropped"; }, ["tabs"], ["*"]>;
}
