import { AfterViewInit, ChangeDetectorRef, ElementRef, NgZone, OnDestroy, Renderer2 } from '@angular/core';
import { Slider } from 'primeng/slider';
import { DomHandler } from 'primeng/dom';
import { AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
export declare const ADAPT_SLIDER_VALUE_ACCESSOR: any;
export declare class AdaptSliderComponent extends Slider implements AfterViewInit, OnDestroy {
    el: ElementRef;
    domHandler: DomHandler;
    renderer: Renderer2;
    private _adaptRadarService;
    /**
     * When specified, allows one boundary value to be picked
     * @docs-default false
     */
    rangeHorizontal: boolean;
    /**
     * @docs-default false
     */
    tick: boolean;
    /**
     * Array of ticks to be displayed, will be justified
     * @docs-default
     */
    ticks: number[];
    /**
     * When specified, allows move between steps depending on click event. Depending on 'step' attr
     * @docs-default false
     */
    customStepChange: boolean;
    /**
     * When specified, allows format the value in tooltip
     * @docs-default
     */
    formatter: Function;
    adaptRadarDisableEventSending: boolean;
    bar: ElementRef;
    private _elementIntersectObserver;
    constructor(el: ElementRef, domHandler: DomHandler, renderer: Renderer2, ngZone: NgZone, cd: ChangeDetectorRef, _adaptRadarService: AdaptRadarAngularService);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    moveBetweenStepRange(value: number): void;
    handleStepChange(newValue: number, oldValue: number): void;
    getTooltipValue(value: number): unknown | number;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptSliderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptSliderComponent, "adapt-slider", never, { "rangeHorizontal": "rangeHorizontal"; "tick": "tick"; "ticks": "ticks"; "customStepChange": "customStepChange"; "formatter": "formatter"; "adaptRadarDisableEventSending": "adaptRadarDisableEventSending"; }, {}, never, never>;
}
