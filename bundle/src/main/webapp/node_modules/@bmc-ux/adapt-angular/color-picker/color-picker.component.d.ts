import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { ReplaySubject } from 'rxjs';
import { AdaptRGBColor, Color, SourceTypes } from '../common/color.utils';
import { AdaptDeviceDetectionService } from '../common/device-detection.service';
import { PlacementArray } from '../common/positioning';
import { AdaptTranslateService } from '../common/i18n/index';
import { AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import { ColorType } from '../common/common.enums';
import { ResizeService } from '../common/resize/resize.service';
import { ButtonConfig } from '../button-group/index';
import { ActiveTabChangeEvent } from '../tabs/index';
import { AdaptDropdownDirective } from '../dropdown/index';
import * as i0 from "@angular/core";
declare enum ColorPickerActiveTab {
    Empty = 0,
    Palette = 1
}
export declare class AdaptColorPickerComponent extends AdaptRadarAngularGenericDirective implements OnInit, AfterViewInit, ControlValueAccessor, OnDestroy {
    private _elementRef;
    private _resizeService;
    private _changeDetectorRef;
    private _ngZone;
    isMobile: boolean;
    isTablet: boolean;
    types: ColorType[];
    placeholder: string;
    pattern: RegExp;
    userInput: string;
    ariaLabel: string;
    selectLabel: string;
    pickerDimension: number;
    colorStripWidth: number;
    activeTab: ColorPickerActiveTab;
    themeColorsButtonGroupConfig: ButtonConfig[];
    themeColorsButtonGroupModel: boolean[];
    recentlyColorsButtonGroupConfig: ButtonConfig[];
    recentlyColorsButtonGroupModel: boolean[];
    isValid: boolean;
    isInputElementFocus: boolean;
    isToggleTypeButtonFocus: boolean;
    isEditState: boolean;
    isEmptyState: boolean;
    isPopupClosingState: boolean;
    isResponsiveSmView: boolean;
    mobileDoneBtnHandler: () => void;
    mobileCancelBtnHandler: () => void;
    selectedRGBColor: AdaptRGBColor;
    themeColorsTitle: string;
    recentlyUsedTitle: string;
    emptyPlaceholder: string;
    noColorSelected: string;
    noColorAriaLabel: string;
    solidColorAriaLabel: string;
    colorSmViewLabel: string;
    colorTypes: typeof ColorType;
    sourceTypes: typeof SourceTypes;
    previewBGColor: string;
    previewBorderColor: string;
    set value(value: string);
    get value(): string;
    /**
     * Show/hide section with theme colors
     * Usage: set false to hide
     *
     * @docs-default true
     *
     * @since 11.13.0
     */
    showThemeColors: boolean;
    /**
     * Show/hide section with recently used colors
     * Usage: set false to hide
     *
     * @docs-default true
     *
     * @since 11.13.0
     */
    showRecentlyUsedColors: boolean;
    /**
     * Color type (Available 2 abilities: HEX and RGB)
     *
     * @docs-default ColorType.HEX
     */
    set colorType(type: ColorType);
    get colorType(): ColorType;
    /**
     * Control label
     * @docs-default
     */
    label: string;
    /**
     * Mobile view settings
     * @docs-default
     */
    mobileView: {
        doneBtnTitle?: string;
        cancelBtnTitle?: string;
    };
    /**
     * Picker placement
     * @docs-default ['bottom-left', 'top-left', 'bottom-right', 'top-right', 'bottom-left']
     */
    placement: PlacementArray;
    /**
     * Append to body trigger
     * @docs-default false
     */
    appendToBody: boolean;
    /**
     * Triggers disabled state
     * @docs-default false
     */
    disabled: boolean;
    /**
     * Triggers readonly state
     *
     * @docs-default false
     */
    readonly: boolean;
    /**
     * Empty color selection
     * Usage: set false to turn of ability to set empty/null color - hide empty option
     * @docs-default true
     *
     * @since 11.15.0
     */
    showEmptyOption: boolean;
    /**
     * Use disabled style for the control if [readonly]=true
     *
     * @docs-default false
     *
     * @since v11.6.0
     */
    disabledStyleForReadonlyState: boolean;
    /**
     * Set recently used colors. Color value must have HEX-color format like #A1B2C3
     *
     * @docs-default
     *
     * @since v11.6.0
     */
    set recentlyUsedColors(colors: Color[]);
    get recentlyUsedColors(): (Color | null)[];
    /**
     * Fires when model change
     *
     * @deprecated since 12.13.0
     * Use onSelectColor instead
     */
    readonly onChange: EventEmitter<string>;
    /**
     * Emits selected color
     * Usage: listen to this event to get selected color
     * <component (onSelectColor)='function($event)'></component>
     *
     * @since v11.12.0
     */
    readonly onSelectColor: EventEmitter<Color>;
    /**
     * Fires when picker open
     */
    readonly open: EventEmitter<void>;
    /**
     * Fires when picker close
     */
    readonly close: EventEmitter<void>;
    /**
     * Fires when input receives focus
     */
    readonly focus: EventEmitter<void>;
    /**
     * Fires when input loose focus
     */
    readonly blur: EventEmitter<void>;
    /**
     * Fires on update recently used colors
     *
     * @since v11.6.0
     */
    readonly recentlyUsedColorsChanged: EventEmitter<Color[]>;
    popup: AdaptDropdownDirective;
    wrapperElement: ElementRef<HTMLDivElement>;
    readonly _destroy$: ReplaySubject<boolean>;
    readonly _isDesktop: boolean;
    private _value;
    private _componentState;
    private _componentStateChange$;
    private _recentlyUsedColors;
    private _colorType;
    private _previouslySelectedRGBColor;
    private _previouslySelectedColorType;
    private _onTouchedCallback;
    private _onChangeCallback;
    constructor(_elementRef: ElementRef, _resizeService: ResizeService, _changeDetectorRef: ChangeDetectorRef, _ngZone: NgZone, _ts: AdaptTranslateService, _deviceDetector: AdaptDeviceDetectionService, _adaptRadarService: AdaptRadarAngularService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    openPopup(event?: MouseEvent | KeyboardEvent): void;
    closePopup(): void;
    onColorSwatchChange(source: SourceTypes, model: boolean[]): void;
    onInputElementInput(event: Event): void;
    onInputElementKeydown(event: KeyboardEvent): void;
    onInputElementFocus(): void;
    onInputElementBlur(): void;
    onInputWrapperClick(event: MouseEvent, inputEl: HTMLInputElement): void;
    onColorChange(color: AdaptRGBColor): void;
    onPopupOpen(): void;
    onPopupClose(): void;
    onPopupAnimationDone(): void;
    onColorTypeButtonClick(): void;
    onColorTypeButtonFocus(): void;
    onColorTypeButtonBlur(): void;
    onActiveTabChange(event: ActiveTabChangeEvent): void;
    writeValue(value: string): void;
    registerOnChange(fn: (_: string) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    private _getUserInputValue;
    private _setColorType;
    private _checkModelColorForRecentlyUsed;
    private _updatePreviewColor;
    private _updateThemeColorsButtonGroupConfig;
    private _updateRecentlyColorsButtonGroupConfig;
    private _updateSwatchColorsModel;
    private _isThemeColor;
    private _isRecentlyUsedColor;
    private _getColorName;
    private _setModel;
    private _restorePreviouslyModel;
    private _checkTabletSizes;
    private _checkPickerAnchorWidth;
    private _isInputEmptyPlaceholderValue;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptColorPickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptColorPickerComponent, "adapt-color-picker, adapt-colorpicker", never, { "showThemeColors": "showThemeColors"; "showRecentlyUsedColors": "showRecentlyUsedColors"; "colorType": "colorType"; "label": "label"; "mobileView": "mobileView"; "placement": "placement"; "appendToBody": "appendToBody"; "disabled": "disabled"; "readonly": "readonly"; "showEmptyOption": "showEmptyOption"; "disabledStyleForReadonlyState": "disabledStyleForReadonlyState"; "recentlyUsedColors": "recentlyUsedColors"; }, { "onChange": "onChange"; "onSelectColor": "onSelectColor"; "open": "open"; "close": "close"; "focus": "focus"; "blur": "blur"; "recentlyUsedColorsChanged": "recentlyUsedColorsChanged"; }, never, never>;
}
export {};
