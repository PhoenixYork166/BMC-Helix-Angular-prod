import { ElementRef, EventEmitter } from '@angular/core';
import { AdaptTranslateService } from '../common/i18n/index';
import { AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import { AdaptTagType } from './index';
import { KeyValueObject } from '../common/common.models';
import * as i0 from "@angular/core";
export declare class AdaptTagComponent extends AdaptRadarAngularGenericDirective {
    /**
     * Specifies type of the tag.
     * Supported values: "primary", "info", "success", "warning", "danger", "active", "secondary", "any color value for custom color"
     * @docs-default
     */
    type: AdaptTagType | string;
    /**
     * Shows close button and active status
     * @docs-default undefined (or true if "remove" has subscribers)
     */
    removable: boolean;
    /**
     * Disabled tags can`t be removed. Also tag color is muted
     * @since 11.16.0
     **/
    disabled: boolean;
    /**
     * Emits an event for tag item removing (but item will be not removed automatically)
     */
    readonly remove: EventEmitter<MouseEvent | KeyboardEvent>;
    content: ElementRef<HTMLElement>;
    iconAriaHidden: boolean;
    private _closeBtnText;
    private _contrastLightResults;
    private _contrastDarkResults;
    constructor(ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    /**
     * type check for user defined types
     * ref: https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards
     */
    private _isAdaptTagType;
    get tagClass(): string[];
    get tagStyle(): KeyValueObject;
    get isRemovable(): boolean;
    get closeBtnText(): string;
    private _getTextColor;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptTagComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptTagComponent, "adapt-tag", never, { "type": "type"; "removable": "removable"; "disabled": "disabled"; }, { "remove": "remove"; }, never, ["*"]>;
}
