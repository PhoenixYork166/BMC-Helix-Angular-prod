import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Observable, Subject } from 'rxjs';
import { AdaptCustomAction, AdaptCustomActionsAlignEnum } from '../custom-actions/adapt-custom-actions.model';
import { AdaptTranslateService } from '../common/i18n/index';
import { KeyValueObject } from '../common/common.models';
import { AdaptRadarAngularGenericDirective, AdaptRadarAngularService } from '../common/radar/adapt-radar';
import * as i0 from "@angular/core";
export interface InlineEditorTextsModel {
    edit?: string;
    add?: string;
    save?: string;
    cancel?: string;
}
export interface InlineEditorError {
    name?: string;
    message: string;
}
export declare class AdaptInlineEditorComponent extends AdaptRadarAngularGenericDirective implements ControlValueAccessor, OnInit, OnDestroy {
    private ts;
    private _changeDetectorRef;
    hasErrors: boolean;
    oldControlModel: string;
    editMode: boolean;
    defaultTexts: {
        edit?: string;
        add?: string;
        save?: string;
        cancel?: string;
        minError?: string;
        maxError?: string;
    };
    rowsCount: number;
    textFieldInput$: Subject<string>;
    defaultErrors$: Observable<InlineEditorError[]>;
    customErrors$: Observable<InlineEditorError[]>;
    customActionsAlignedTo: AdaptCustomActionsAlignEnum;
    /**
     * The number of rows in the textarea(editable mode). If didn't set, will be calculate automatically
     * @docs-default
     */
    rows: number;
    /**
     * The min length for the input field
     * @docs-default
     */
    minLength: number;
    /**
     * The max length for the input field
     * @docs-default
     */
    maxLength: number;
    /**
     * The label of the component
     * @docs-default
     */
    label: string;
    /**
     * Input control placeholder
     * @docs-default
     */
    placeholder: string;
    /**
     * Custom UI Controls labels
     * @docs-default
     */
    set controlLabels(value: InlineEditorTextsModel);
    get controlLabels(): InlineEditorTextsModel;
    /**
     * Select text by entering edit mode
     * @docs-default
     */
    selectTextOnEdit: boolean;
    /**
     * Start edit on text click
     * @docs-default
     */
    editOnClick: boolean;
    /**
     * Save text on control's blur event
     * @docs-default
     */
    saveOnBlur: boolean;
    /**
     * Show edit button only on mouseover
     * @docs-default
     */
    showEditControlOnHover: boolean;
    /**
     * Hide edit button in view mode
     * @docs-default
     */
    hideViewControls: boolean;
    /**
     * Hide save and cancel buttons in edit mode
     * @docs-default
     */
    hideEditControls: boolean;
    /**
     * Add class to button, e.g. 'btn-toolbar' to show it inside toolbar
     * @since v10.6.0
     * @docs-default
     */
    buttonClass: string;
    /**
     * minLength error message
     * @docs-default
     */
    set minLengthErrorText(obj: InlineEditorError);
    get minLengthErrorText(): InlineEditorError;
    /**
     * maxLength error message
     * @docs-default
     */
    maxLengthErrorText: InlineEditorError;
    /**
     * Set of error callbacks. Each of them will be invoke on text input
     * @docs-default
     */
    customErrors: ((str: string) => InlineEditorError)[];
    /**
     * An event fired when on save
     */
    readonly onSave: EventEmitter<any>;
    /**
     * An event fired when on cancel
     */
    readonly onCancel: EventEmitter<any>;
    viewBlock: ElementRef<HTMLSpanElement>;
    viewBlockRow: ElementRef<HTMLSpanElement>;
    get value(): any;
    set value(v: any);
    get customActions(): AdaptCustomAction[];
    private _model;
    private _errorsSubscription;
    private _controlLabels;
    private _minLengthErrorText;
    constructor(ts: AdaptTranslateService, _changeDetectorRef: ChangeDetectorRef, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    ngOnDestroy(): void;
    enterEditMode(): void;
    /**
     * Save value and exit edit mode
     */
    saveEdit(): void;
    /**
     * Exit edit mode without saving
     */
    cancelEdit(): void;
    viewTextClick(): void;
    inputControlFocus(event: any): void;
    inputControlBlur(): void;
    writeValue(v: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    private _autoCalculateRows;
    private _initErrors;
    private propagateChange;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptInlineEditorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptInlineEditorComponent, "adapt-inline-editor", never, { "rows": "rows"; "minLength": "minLength"; "maxLength": "maxLength"; "label": "label"; "placeholder": "placeholder"; "controlLabels": "controlLabels"; "selectTextOnEdit": "selectTextOnEdit"; "editOnClick": "editOnClick"; "saveOnBlur": "saveOnBlur"; "showEditControlOnHover": "showEditControlOnHover"; "hideViewControls": "hideViewControls"; "hideEditControls": "hideEditControls"; "buttonClass": "buttonClass"; "minLengthErrorText": "minLengthErrorText"; "maxLengthErrorText": "maxLengthErrorText"; "customErrors": "customErrors"; }, { "onSave": "onSave"; "onCancel": "onCancel"; }, never, never>;
}
