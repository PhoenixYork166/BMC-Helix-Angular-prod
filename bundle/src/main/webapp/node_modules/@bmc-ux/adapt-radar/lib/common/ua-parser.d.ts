import * as i0 from "@angular/core";
export declare enum AdaptRadarUAVendor {
    AMAZON = "Amazon",
    APPLE = "Apple",
    ASUS = "ASUS",
    BLACKBERRY = "BlackBerry",
    BROWSER = "Browser",
    CHROME = "Chrome",
    EDGE = "Edge",
    FIREFOX = "Firefox",
    GOOGLE = "Google",
    HUAWEI = "Huawei",
    LG = "LG",
    MICROSOFT = "Microsoft",
    MOTOROLA = "Motorola",
    OPERA = "Opera",
    SAMSUNG = "Samsung",
    SONY = "Sony",
    XIAOMI = "Xiaomi",
    ZEBRA = "Zebra",
    FACEBOOK = "Facebook"
}
export interface AdaptRadarUARegexp {
    browser?: (RegExp[] | any[])[];
    device?: (RegExp[] | any[])[];
    engine?: (RegExp[] | any[])[];
    cpu?: (RegExp[] | any[])[];
    os?: (RegExp[] | any[])[];
}
export interface AdaptRadarUABrowserInfo {
    name: string;
    version: string;
    major: string;
}
export interface AdaptRadarUACPUInfo {
    architecture: string;
}
export interface AdaptRadarUADeviceInfo {
    vendor: string;
    model: string;
    type: string;
}
export interface AdaptRadarUAEngineInfo {
    name: string;
    version: string;
}
export interface AdaptRadarUAOSInfo {
    name: string;
    version: string;
}
export interface AdaptRadarUAResult {
    ua: string;
    browser: AdaptRadarUABrowserInfo;
    engine: AdaptRadarUAEngineInfo;
    os: AdaptRadarUAOSInfo;
    device: AdaptRadarUADeviceInfo;
    cpu: AdaptRadarUACPUInfo;
}
/**
 * Service used to convert data from browser user agent to readable information
 */
export declare class AdaptRadarUAParser {
    private windowsVersionMap;
    private regexes;
    private _ua;
    private _rgxmap;
    private static lowerize;
    private static has;
    private static majorize;
    private static trim;
    private static strMapper;
    getBrowser(): AdaptRadarUABrowserInfo;
    getCPU(): AdaptRadarUACPUInfo;
    getDevice(): AdaptRadarUADeviceInfo;
    getEngine(): AdaptRadarUAEngineInfo;
    getOS(): AdaptRadarUAOSInfo;
    getResult(): AdaptRadarUAResult;
    getUA(): string;
    setUA(ua: string): void;
    private _rgxMapper;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRadarUAParser, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AdaptRadarUAParser>;
}
