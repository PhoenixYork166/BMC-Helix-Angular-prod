import { Version } from '@angular/core';
import { AdaptRadarGainsightIdentifyAction } from './providers/gainsight/gainsight.model';
import { AdaptRadarGainsightProvider } from './providers/gainsight/gainsight.service';
import { AdaptRadarGoogleGlobalSiteTagProvider } from './providers/google-global-site-tag/google-global-site-tag.service';
import { AdaptRadarGoogleTagManagerProvider } from './providers/google-tag-manager/google-tag-manager.service';
import { AdaptRadarProductInfo } from './adapt-radar-products.model';
export declare enum AdaptRadarStorageKey {
    UserId = "adaptRadar.userId",
    VersionsInfo = "adaptRadar.versionsInfo",
    GainsightGlobalDataSent = "adaptRadar.gainsightGlobalDataSent"
}
export declare enum AdaptRadarSupportedProviders {
    GoogleGlobalSiteTag = "ggst",
    GoogleTagManager = "gtm",
    Gainsight = "gainsight"
}
export declare enum AdaptRadarCustomEventName {
    PagePath = "page_path",
    GlobalContext = "globalContext",
    AdaptGlobalData = "Adapt_Global_Data",
    AdaptURLChanged = "Adapt_URL_Changed",
    AdaptGenericComponent = "Adapt_Generic_Component",
    AdaptPagination = "Adapt_Pagination",
    AdaptSlider = "Adapt_Slider",
    AdaptToast = "Adapt_Toast",
    AdaptTree = "Adapt_Tree",
    AdaptRxTextfield = "Adapt_RxTextfield",
    AdaptRxTextarea = "Adapt_RxTextarea",
    AdaptRxCounter = "Adapt_RxCounter",
    AdaptRxSearch = "Adapt_RxSearch",
    AdaptRxCheckbox = "Adapt_RxCheckbox",
    AdaptRxRadiobutton = "Adapt_RxRadiobutton",
    AdaptRxRadiobuttonGroup = "Adapt_RxRadiobuttonGroup",
    AdaptRxRating = "Adapt_RxRating_Default",
    AdaptRxRatingBinary = "Adapt_RxRating_Binary",
    AdaptRxRatingLike = "Adapt_RxRating_Like",
    AdaptRxRatingVoting = "Adapt_RxRating_Voting",
    AdaptRxSwitch = "Adapt_RxSwitch",
    AdaptRxSelect = "Adapt_RxSelect",
    AdaptRxSelectEditable = "Adapt_RxSelectEditable",
    AdaptRxDatetime = "Adapt_RxDateTime",
    AdaptRxDatetimeRange = "Adapt_RxDatetimeRange",
    AdaptRxTimeSlot = "Adapt_RxTimeSlot",
    AdaptRxListSelector = "Adapt_RxListSelector",
    AdaptRxListBuilder = "Adapt_RxListBuilder",
    AdaptRxTypeahead = "Adapt_RxTypeahead",
    AdaptRxUploader = "Adapt_RxUploader",
    AdaptRxFeedback = "Adapt_RxFeedback",
    AdaptAccordion = "Adapt_Accordion",
    AdaptSimpleFilter = "Adapt_Simple_Filter",
    AdaptFacetedFilter = "Adapt_Faceted_Filter",
    AdaptAdvancedFilter = "Adapt_Advanced_Filter",
    AdaptAgreement = "Adapt_Agreement",
    AdaptAlert = "Adapt_Alert",
    AdaptAlertAnimated = "Adapt_Alert_Animated",
    AdaptAnchorNavigator = "Adapt_Anchor_Navigator",
    AdaptBadge = "Adapt_Badge",
    AdaptBeard = "Adapt_Beard",
    AdaptBusy = "Adapt_Busy",
    AdaptButton = "Adapt_Button",
    AdaptButtonGroup = "Adapt_Button_Group",
    AdaptCardCarousel = "Adapt_Card_Carousel",
    AdaptCarousel = "Adapt_Carousel",
    AdaptClose = "Adapt_Close",
    AdaptCodeHighlighter = "Adapt_Code_Highlighter",
    AdaptCodeViewer = "Adapt_Code_Viewer",
    AdaptCollapse = "Adapt_Collapse",
    AdaptExpando = "AdaptExpando",
    AdaptColorPicker = "Adapt_Color_Picker",
    AdaptCrop = "Adapt_Crop",
    AdaptCustomActions = "Adapt_Custom_Actions",
    AdaptDockedPanel = "Adapt_Docked_Panel",
    AdaptDownloader = "Adapt_Downloader",
    AdaptDropdown = "Adapt_Dropdown",
    AdaptEmptyState = "Adapt_Empty_State",
    AdaptFocusHolder = "Adapt_Focus_Holder",
    AdaptFocusTracker = "Adapt_Focus_Tracker",
    AdaptIcon = "Adapt_Icon",
    AdaptInlineEditor = "Adapt_Inline_Editor",
    AdaptLoginPage = "Adapt_Login_Page",
    AdaptMention = "Adapt_Mention",
    AdaptMention2 = "Adapt_Mention_2",
    AdaptDialog = "Adapt_Dialog",
    AdaptMenu = "Adapt_Menu",
    AdaptMetatag = "Adapt_Metatag",
    AdaptModal = "Adapt_Modal",
    AdaptMultiCard = "Adapt_Multi_Card",
    AdaptNavigation = "Adapt_Navigation",
    AdaptNavigationMenu = "Adapt_Navigation_Menu",
    AdaptNavigationAction = "Adapt_Navigation_Action",
    AdaptNavigationAlert = "Adapt_Navigation_Alert",
    AdaptNavigationHamburger = "Adapt_Navigation_Hamburger",
    AdaptNotFoundPage = "Adapt_Not_Found_Page",
    AdaptPopover = "Adapt_Popover",
    AdaptProfile = "Adapt_Profile",
    AdaptProgress = "Adapt_Progress",
    AdaptTime = "Adapt_Time",
    AdaptUploader = "Adapt_Uploader",
    AdaptSingleUploader = "Adapt_Single_Uploader",
    AdaptSidebar = "Adapt_Sidebar",
    AdaptSplit = "Adapt_Split",
    AdaptSteps = "Adapt_Steps",
    AdaptSubnav = "Adapt_Subnav",
    AdaptTabs = "Adapt_Tabs",
    AdaptTabsKebabMenu = "Adapt_Tabs_Kebab_Menu",
    AdaptTabsControls = "Adapt_Tabs_Controls",
    AdaptTag = "Adapt_Tag",
    AdaptTextField = "Adapt_Text_Field",
    AdaptTextFieldFormBuilder = "Adapt_Text_Field_Form_Builder",
    AdaptTooltip = "Adapt_Tooltip",
    AdaptTruncateFileName = "Adapt_Truncate_File_Name",
    AdaptTypeahead = "Adapt_Typeahead",
    AdaptWorkflowCarousel = "Adapt_Workflow_Carousel",
    AdaptIllustration = "Adapt_Illustration",
    AdaptRichTextEditor = "Adapt_RichTextEditor",
    AdaptAgreementAdminContent = "Adapt_Agreement_AdminContent",
    AdaptAgreementCard = "Adapt_Agreement_Card",
    AdaptAgreementContent = "Adapt_Agreement_Content",
    AdaptAgreementNotification = "Adapt_Agreement_Notification",
    AdaptAgreementUserModal = "Adapt_Agreement_UserModal",
    AdaptCheckbox2 = "Adapt_Checkbox_2",
    AdaptCounter = "Adapt_Counter",
    AdaptDatetimeRange2 = "Adapt_Datetime_Range_2",
    AdaptDatetime2 = "Adapt_Datetime_2",
    AdaptListBuilder = "Adapt_List_Builder",
    AdaptList = "Adapt_List",
    AdaptRadioButton = "Adapt_Radio_Button",
    AdaptDropDownEditable = "Adapt_DropDown_Editable",
    AdaptRating = "Adapt_Rating",
    AdaptRatingBinary = "Adapt_Rating_Binary",
    AdaptRatingLike = "Adapt_Rating_Like",
    AdaptRatingVoting = "Adapt_Rating_Voting",
    AdaptSearch = "Adapt_Search",
    AdaptSelect = "Adapt_Select",
    AdaptSelectInline = "Adapt_Select_Inline",
    AdaptSwitcher = "Adapt_Switcher",
    AdaptTimeSlot = "Adapt_Time_Slot"
}
export declare enum AdaptRadarCustomEventType {
    ErrorFired = "ErrorFired",
    Init = "Init",
    Focus = "Focus",
    Blur = "Blur",
    Click = "Click",
    Search = "Search",
    ValueChanged = "ValueChanged",
    Clear = "Clear",
    DragStart = "DragStart",
    Drop = "Drop"
}
export declare enum AdaptRadarComponentEventType {
    TabAdd = "TabAdd",
    TabDelete = "TabDelete"
}
export interface AdaptRadarGlobalData {
    BrowserType: string;
    BrowserVersion: string;
    BrowserDetailedVersion: string;
    DeviceType: string;
    DeviceVendor: string;
    DeviceModel: string;
    OperatingSystem: string;
    OperatingSystemVersion: string;
    ConnectionDownlink: number;
    ConnectionEffectiveType: string;
    LocalizationSettings: readonly string[];
    CurrentLanguage: string;
    TimeZone: string;
    PageName: string;
    AngularVersion: string;
    ADAPTVersion: string;
    TableVersion: string;
    CSSVersion: string;
    GanttVersion: string;
    ObsoleteVersion: string;
    RTEVersion: string;
    ChartsVersion: string;
    RadarVersion: string;
    AccessibilityMode: boolean;
    DarkMode: boolean;
    Customized: boolean;
}
export interface AdaptRadarURLChangedEventData {
    PreviousLocation: Location;
    CurrentLocation: Location;
    PageTitle: string;
    TimeOnPage: string;
    TimeOnPageInSeconds: number;
    TimeOnPageInMilliseconds: number;
}
export interface AdaptRadarURLChangedCollectedEventData {
    PageTitle: string;
    TimeOnPage: string;
    TimeOnPageInSeconds: number;
    TimeOnPageInMilliseconds: number;
}
export interface AdaptRadarPagePathEventData {
    url: string;
}
export declare type AdaptRadarSupportedProvidersServices = AdaptRadarGoogleGlobalSiteTagProvider | AdaptRadarGoogleTagManagerProvider | AdaptRadarGainsightProvider;
export declare type AdaptRadarCustomEventData<T = unknown> = T;
export interface AdaptRadarConfig {
    providers: AdaptRadarProviderConfig[];
    /**
     * Product information that will be automatically set into each global context request
     *
     * Example:
     * productInfo: {
     *   productArea: {
     *     name: AdaptRadarProductAreaName.Platform,
     *     version: new Version('11.22.33'),
     *     hosting: AdaptRadarHostingType.OnPrem
     *   },
     *   subProductLevel1: {
     *     name: AdaptRadarSubProductNameLevel1.Configure,
     *     version: new Version('22.33.44'),
     *     hosting: AdaptRadarHostingType.OnPrem
     *   },
     *   subProductLevel2: {
     *     name: AdaptRadarSubProductNameLevel2.InnovationSuiteConfigurations,
     *     version: new Version('33.44.55'),
     *     hosting: AdaptRadarHostingType.SaaS
     *   },
     *   subProductLevel3: {
     *     name: AdaptRadarSubProductNameLevel3.DataManagement,
     *     version: new Version('44.55.66'),
     *     hosting: AdaptRadarHostingType.SaaS
     *   }
     * }
     */
    productInfo?: AdaptRadarProductInfo;
    /**
     * The Map of component/directive names that should not send events
     *
     * Example:
     *
     * disableEventSending: new Map([
     *   [AdaptRadarCustomEventName.AdaptRxTextfield, true],
     *   [AdaptRadarCustomEventName.AdaptButton, true],
     * ])
     */
    disableEventSending?: AdaptRadarDisableEventSendingConfig;
}
export interface AdaptRadarProviderConfig {
    name: AdaptRadarSupportedProviders;
    id: string;
    sourceScript?: string | false;
    initScript?: string | false;
    disabled?: boolean;
    oneTimeActions?: AdaptRadarGainsightIdentifyAction[];
}
/**
 * Use separate config for module to have possibility to set needed data even if customer didn't start collecting data
 *
 * For example, we may want always set ADAPT versions for all environments(dev, qa)
 * But customer may want to not enabling data collection for some environments
 * That is why we shouldn't set versions in scope of "AdaptRadarConfig"
 */
export interface AdaptRadarModuleConfig {
    /**
     * Configuration that used to set library versions that used in application
     * version for each library can be imported from library package the save way as angular VERSION
     *
     * Example:
     * import {ADAPT_ANGULAR_VERSION} from '@bmc-ux/adapt-angular';
     * import {ADAPT_TABLE_VERSION} from '@bmc-ux/adapt-table';
     */
    versions: AdaptRadarLibraryVersions;
}
export interface AdaptRadarOneTimeAction<T, U> {
    name: T;
    data: U;
}
export interface AdaptRadarLibraryVersions {
    ADAPT_ANGULAR_VERSION?: Version;
    ADAPT_AVATAR_VERSION?: Version;
    ADAPT_CHATBOT_VERSION?: Version;
    ADAPT_CHARTS_VERSION?: Version;
    ADAPT_CUSTOMIZATION_VERSION?: Version;
    ADAPT_GANTT_VERSION?: Version;
    ADAPT_OBSOLETE_VERSION?: Version;
    ADAPT_RTE_VERSION?: Version;
    ADAPT_TABLE_VERSION?: Version;
    ADAPT_RADAR_VERSION?: Version;
    ADAPT_CSS_VERSION?: Version;
}
export declare type AdaptRadarDisableEventSendingConfig = Map<AdaptRadarCustomEventName, boolean>;
