import { AdaptRadarComponentEventType, AdaptRadarCustomEventName, AdaptRadarCustomEventType } from './adapt-radar.model';
declare type FormControlSize = 'default' | 'sm' | 'lg';
declare type AdaptInteractionSource = 'keyboard' | 'mouse' | 'touch';
declare type AdaptRadarBooleanState = 'on' | 'off';
declare enum AdaptNumberType {
    Integer = 0,
    Float = 1,
    Scientific = 2
}
export interface AdaptRadarGenericComponentData {
    EventType: AdaptRadarCustomEventType;
    ComponentName: AdaptRadarCustomEventName;
    PageTitle: string;
    Date: Date;
    ISODate: string;
    Timestamp: number;
}
interface AdaptRadarComponentRxCommonData {
    GroupName: string;
}
interface AdaptRadarComponentRxGenericData extends AdaptRadarComponentRxCommonData {
    EventType: AdaptRadarCustomEventType;
    Label: string;
    Required: boolean;
    Disabled: boolean;
    ReadOnly: boolean;
}
interface AdaptRadarComponentRxGenericTextData extends AdaptRadarComponentRxGenericData {
    Badge?: boolean;
    BadgeText?: string;
    Hinted: boolean;
    Subtext: boolean;
    TextEntered: boolean;
    CharCount: number;
    FieldSize: FormControlSize;
}
export declare type AdaptRadarComponentRxTextfieldData = AdaptRadarComponentRxGenericTextData;
export declare type AdaptRadarComponentRxTextareaData = AdaptRadarComponentRxGenericTextData;
export interface AdaptRadarComponentRxCounterData extends AdaptRadarComponentRxGenericData {
    NumberType: AdaptNumberType;
    TextEntered: boolean;
    CharCount: number;
    Hinted: boolean;
    Subtext: boolean;
    FieldSize: FormControlSize;
    Target?: 'increase' | 'decrease';
}
interface AdaptRadarComponentRxSearchChangedData {
    EventType: AdaptRadarCustomEventType;
    SearchMethod: 'filter' | 'query';
    FieldSize: FormControlSize;
    TextEntered: boolean;
    SearchButton: boolean;
    InputMethod: AdaptInteractionSource;
}
interface AdaptRadarComponentRxSearchClearData {
    EventType: AdaptRadarCustomEventType;
    Label: string;
    Required: boolean;
    TextEntered: boolean;
}
export declare type AdaptRadarComponentRxSearchData = (AdaptRadarComponentRxSearchChangedData | AdaptRadarComponentRxSearchClearData) & AdaptRadarComponentRxCommonData;
export interface AdaptRadarComponentRxCheckboxData extends AdaptRadarComponentRxGenericData {
    DefaultState: AdaptRadarBooleanState;
    CurrentState: AdaptRadarBooleanState;
}
export interface AdaptRadarComponentRxRadiobuttonData extends AdaptRadarComponentRxCommonData {
    EventType: AdaptRadarCustomEventType;
    CurrentState: AdaptRadarBooleanState;
    Disabled: boolean;
    ReadOnly: boolean;
    Label: string;
    RadioGroup: boolean;
}
declare enum RxRatingSize {
    xs = 0,
    sm = 1,
    md = 2,
    lg = 3
}
declare enum RxRatingVotingType {
    Star = 0,
    Flag = 1,
    Like = 2,
    Thanks = 3
}
export interface AdaptRadarComponentRxRatingDefaultData extends AdaptRadarComponentRxGenericData {
    FieldSize: RxRatingSize;
    RatingEntered: boolean;
    RatingMax: number;
    RatingValue: number;
    SubmitMethod?: AdaptInteractionSource;
}
export interface AdaptRadarComponentRxRatingBinaryData extends AdaptRadarComponentRxCommonData {
    EventType: AdaptRadarCustomEventType;
    Label: string;
    RatingEntered: boolean;
    RatingValue: number;
    SubmitMethod: AdaptInteractionSource;
}
export interface AdaptRadarComponentRxRatingLikeData extends AdaptRadarComponentRxCommonData {
    EventType: AdaptRadarCustomEventType;
    Label: string;
    FieldSize: RxRatingSize;
    RatingEntered: boolean;
    RatingValue: number;
    Disabled: boolean;
    SubmitMethod: AdaptInteractionSource;
}
export interface AdaptRadarComponentRxRatingVotingData extends AdaptRadarComponentRxCommonData {
    EventType: AdaptRadarCustomEventType;
    Type: RxRatingVotingType;
    HasTooltip: boolean;
    HasThanksText: boolean;
    RatingValue: boolean;
    SubmitMethod: AdaptInteractionSource;
}
export interface AdaptRadarComponentRxSwitchData extends AdaptRadarComponentRxGenericData {
    DefaultState: AdaptRadarBooleanState;
    SwitchedState: AdaptRadarBooleanState;
}
export interface AdaptRadarComponentRxSelectData extends AdaptRadarComponentRxCommonData {
    EventType: AdaptRadarCustomEventType;
    Label: string;
    NumberOfSelectedItems: number;
    DefaultNumberOfSelectedItems: number;
    Target?: 'selectAll' | 'loadMore';
    Required?: boolean;
    Disabled?: boolean;
    ReadOnly?: boolean;
    SelectType?: 'single' | 'multi';
    FieldSize?: FormControlSize;
}
declare enum RxDatetimePickerMode {
    DateTime = 0,
    Date = 1,
    Time = 2,
    YearMonth = 3,
    Year = 4,
    Month = 5
}
export interface AdaptRadarComponentRxDateTimeData extends AdaptRadarComponentRxGenericData {
    Type: RxDatetimePickerMode;
    Range: boolean;
    Inline: boolean;
    InputMethod?: AdaptInteractionSource;
}
export interface AdaptRadarComponentRxTimeSlotData extends AdaptRadarComponentRxGenericData {
    Slots: number;
}
export interface AdaptRadarComponentRxListSelectorData extends AdaptRadarComponentRxGenericData {
    DefaultNumberOfSelectedItems: number;
    TotalSelected: number;
    TotalOptions: number;
}
export interface AdaptRadarComponentRxListBuilderData extends AdaptRadarComponentRxGenericData {
    Action: 'add' | 'delete';
    ListCount: number;
    MaxDepth: number;
    TotalChildren?: number;
    TotalGrandchildren?: number;
}
export interface AdaptRadarComponentRxFeedbackData {
    EventType: AdaptRadarCustomEventType;
    Label: string;
    Required: boolean;
    ParentComponent: AdaptRadarCustomEventName;
    ErrorsTriggered: string[];
}
declare type NavigationActionType = 'submenu' | 'switcher';
declare type NavigationActionItemType = 'link' | 'route' | 'action';
export interface AdaptRadarComponentNavigationData {
    EventType: AdaptRadarCustomEventType;
    HamburgerMode: boolean;
    NavigationColor: string;
    Logo: string;
    MenuCount: number;
    ActionCount: number;
    Title: string;
    ActionsLoaded: string[];
}
export interface AdaptRadarComponentNavigationHamburgerData {
    EventType: AdaptRadarCustomEventType;
    HamburgerMode: boolean;
    ContainerSize: number;
    MenuCount: number;
    ActionCount: number;
    ProfilePresent: boolean;
}
export interface AdaptRadarComponentNavigationMenuData {
    EventType: AdaptRadarCustomEventType;
    Disabled: boolean;
    Name: string;
    Type: NavigationActionItemType;
    MaxDepth: number;
    SiblingsOptionsCount: number;
    HiddenSiblingsOptionsCount: number;
}
export interface AdaptRadarComponentNavigationActionData {
    EventType: AdaptRadarCustomEventType;
    ActionType: NavigationActionType;
    Name: string;
    Type: NavigationActionItemType;
}
export interface AdaptRadarComponentNavigationAlertData {
    EventType: AdaptRadarCustomEventType;
    Type: string;
    Title: string;
}
export interface AdaptRadarComponentMenuData {
    EventType: AdaptRadarCustomEventType;
    ParentComponent: AdaptRadarCustomEventName;
    Disabled: boolean;
    Name: string;
    Type: 'link' | 'route' | 'action' | 'menu';
    SiblingsOptionsCount: number;
    HiddenSiblingsOptionsCount: number;
}
export interface AdaptRadarComponentProfileData {
    EventType: AdaptRadarCustomEventType;
    Type: 'long' | 'short';
}
declare type TabsType = 'pills' | 'tabs' | 'inverted' | 'bordered' | 'stacked' | 'justified' | 'responsive';
export interface AdaptRadarComponentTabsData {
    EventType: AdaptRadarCustomEventType;
    ComponentEventType: AdaptRadarComponentEventType;
    TabType: TabsType;
    TabLabel: string;
    TabIcon: boolean;
    TabBadge: boolean;
    TabMenu: boolean;
    Disabled: boolean;
    TabPosition: number;
    TabCount: number;
}
export interface AdaptRadarComponentTabsKebabMenuData {
    EventType: AdaptRadarCustomEventType;
    TabLabel: string;
}
export interface AdaptRadarComponentAccordionData {
    EventType: AdaptRadarCustomEventType;
    AccordionType: 'single' | 'multi';
    HeaderLabel: string;
    HeaderIcon: boolean;
    Disabled: boolean;
    SectionOpen: boolean;
    OpenSections: number;
}
export {};
