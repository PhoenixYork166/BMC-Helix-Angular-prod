import { AfterViewInit, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { AdaptRadarPixelIntersectionObserverEntry, AdaptRadarPixelTriggerResolver } from './pixel.model';
import * as i0 from "@angular/core";
/**
 * Radar Pixel directive is used to detect elements visibility on the screen.
 * Directive will emit an event if element was intersected
 *
 * Directive is based on `IntersectionObserver` API
 * More information can be found here - https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API
 */
export declare class AdaptRadarPixelDirective implements AfterViewInit, OnDestroy {
    private _elem;
    /**
     * The element that is used as the viewport for checking visibility of the target.
     * Must be the ancestor of the target.
     * Defaults to the browser viewport if not specified or if null.
     */
    adaptRadarPixelRootContainer: Element | null;
    /**
     * Either a single number or an array of numbers which indicate at what percentage of the target's visibility the
     * observer's callback should be executed.
     * If you only want to detect when visibility passes the 50% mark, you can use a value of 0.5.
     * If you want the callback to run every time visibility passes another 25%, you would specify the array [0, 0.25, 0.5, 0.75, 1].
     * The default is 0 (meaning as soon as even one pixel is visible, the callback will be run).
     * A value of 1.0 means that the threshold isn't considered passed until every pixel is visible.
     */
    adaptRadarPixelThreshold: number | number[];
    /**
     * Margin around the root.
     * Can have values similar to the CSS margin property, e.g. "10px 20px 30px 40px" (top, right, bottom, left).
     * The values can be percentages.
     * This set of values serves to grow or shrink each side of the root element's bounding box before computing intersections.
     * Defaults to all zeros.
     */
    adaptRadarPixelRootContainerMargin: string;
    /**
     * Resolver function that will be invoked each time element is intersect.
     * The function should return boolean value.
     * In case of true the `adaptRadarPixelIntersect` event will be emitted.
     * If function wasn't pass `adaptRadarPixelIntersect` event will be emitted each time element is intersecting.
     */
    adaptRadarPixelTriggerResolver: AdaptRadarPixelTriggerResolver;
    /**
     * Output will emit `AdaptRadarPixelIntersectionObserverEntry` data each time element will be intersected.
     * Value emitting can be control by `adaptRadarPixelTriggerResolver`
     */
    readonly adaptRadarPixelIntersect: EventEmitter<AdaptRadarPixelIntersectionObserverEntry>;
    get radarPixelOptions(): IntersectionObserverInit;
    private _observer;
    constructor(_elem: ElementRef<HTMLElement>);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRadarPixelDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptRadarPixelDirective, "[adaptRadarPixel]", never, { "adaptRadarPixelRootContainer": "adaptRadarPixelRootContainer"; "adaptRadarPixelThreshold": "adaptRadarPixelThreshold"; "adaptRadarPixelRootContainerMargin": "adaptRadarPixelRootContainerMargin"; "adaptRadarPixelTriggerResolver": "adaptRadarPixelTriggerResolver"; }, { "adaptRadarPixelIntersect": "adaptRadarPixelIntersect"; }, never>;
}
