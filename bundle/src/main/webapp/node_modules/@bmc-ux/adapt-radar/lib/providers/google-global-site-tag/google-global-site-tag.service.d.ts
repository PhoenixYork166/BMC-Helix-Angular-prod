import { OnDestroy } from '@angular/core';
import { AdaptRadarConfig, AdaptRadarCustomEventData, AdaptRadarCustomEventName, AdaptRadarPagePathEventData, AdaptRadarProviderConfig } from '../../adapt-radar.model';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class AdaptRadarGoogleGlobalSiteTagProvider implements OnDestroy {
    private _id;
    private _radarConfig;
    private _productInfo;
    private _destroyed$;
    private _initSource;
    readonly init$: Observable<boolean>;
    static getInitScript(id: string, customInitScript: string): string;
    static getSourceScript(id: string, customSourceScript: string): string;
    get initProcess$(): Observable<boolean>;
    ngOnDestroy(): void;
    /**
     * The method is used to start collecting the data for the current provider
     * It allows controlling the data collecting process on the customer side.
     * For instance to turn on data collecting in run time when it needed based on user preferences or project business logic
     *
     * @param providerConfig - config for provider that need to be initialized
     * @param radarConfig - main RADAR module config
     */
    startDataCollecting(providerConfig: AdaptRadarProviderConfig, radarConfig: AdaptRadarConfig): void;
    stopDataCollecting(providerConfig: AdaptRadarProviderConfig): void;
    /**
     * Method is used to send specific 'page_path' event for Google Analytics system
     *
     * @param pathData - path string that will be logged and used to track which pages was visited
     *
     * @example
     * gtag('config', 'UA-1234567-89', {'page_path': '/new-page.html'});
     */
    sendPagePathEvent(pathData: AdaptRadarCustomEventData<AdaptRadarPagePathEventData>): void;
    /**
     * Method is used to send custom events into Google Global Site Tag analytics system.
     *
     * @param customEventName - name of the event that will be logged into Google Global Site Tag analytics system
     * @param customEventData - custom data that need to be collect and associate with `customEventName`
     *
     * @example
     * gtag('event', 'video_auto_play_start', {
     *  'event_label': 'My promotional video',
     *  'event_category': 'video_auto_play',
     *  'non_interaction': true
     * });
     */
    sendCustomEvent(customEventName: AdaptRadarCustomEventName, customEventData: AdaptRadarCustomEventData): void;
    sendGlobalData(): void;
    /**
     * Opt-Out User Tracking
     * In some cases, it may be necessary to disable Google Analytics on a page without removing the gtag.js tag.
     * For example, you might do this if your site's privacy policy provides an option for the user to opt-out of Google Analytics.
     *
     * The gtag.js library includes a window property that, when set to true, disables gtag.js from sending data to Google Analytics.
     * When Google Analytics attempts to set a cookie or send data back to the Google Analytics servers,
     * it will first check if this property is set, and will take no action if the value is set to true.
     *
     * Google docs: https://developers.google.com/analytics/devguides/collection/gtagjs/user-opt-out
     *
     * @param isEnabled - tracking state (true for Out-In, false for Opt-Out)
     * @param providerConfig - config for provider that need to be initialized
     */
    toggleUserTracking(isEnabled: boolean, providerConfig: AdaptRadarProviderConfig): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRadarGoogleGlobalSiteTagProvider, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AdaptRadarGoogleGlobalSiteTagProvider>;
}
