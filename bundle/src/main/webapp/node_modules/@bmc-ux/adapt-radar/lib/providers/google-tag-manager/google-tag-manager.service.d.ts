import { OnDestroy } from '@angular/core';
import { AdaptRadarConfig, AdaptRadarCustomEventData, AdaptRadarCustomEventName, AdaptRadarProviderConfig } from '../../adapt-radar.model';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class AdaptRadarGoogleTagManagerProvider implements OnDestroy {
    private _id;
    private _radarConfig;
    private _productInfo;
    private _destroyed$;
    private _initSource;
    readonly init$: Observable<boolean>;
    static getInitScript(id: string, customInitScript: string): string;
    get initProcess$(): Observable<boolean>;
    ngOnDestroy(): void;
    /**
     * The method is used to start collecting the data for the current provider
     * It allows controlling the data collecting process on the customer side.
     * For instance to turn on data collecting in run time when it needed based on user preferences or project business logic
     *
     * @param providerConfig - config for provider that need to be initialized
     * @param radarConfig - main RADAR module config
     */
    startDataCollecting(providerConfig: AdaptRadarProviderConfig, radarConfig: AdaptRadarConfig): void;
    stopDataCollecting(): void;
    sendCustomEvent(customEventName: AdaptRadarCustomEventName, customEventData: AdaptRadarCustomEventData): void;
    sendGlobalData(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRadarGoogleTagManagerProvider, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AdaptRadarGoogleTagManagerProvider>;
}
