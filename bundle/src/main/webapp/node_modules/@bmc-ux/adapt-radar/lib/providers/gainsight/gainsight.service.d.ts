/**
 * Gainsight provider
 * API docs - https://support.gainsight.com/PX/API_for_Developers
 */
import { OnDestroy } from '@angular/core';
import { Observable } from 'rxjs';
import { AdaptRadarConfig, AdaptRadarCustomEventData, AdaptRadarCustomEventName, AdaptRadarGlobalData, AdaptRadarProviderConfig, AdaptRadarURLChangedCollectedEventData } from '../../adapt-radar.model';
import { AdaptRadarGlobal } from '../../common/global-data';
import { AdaptRadarURLChangeTracker } from '../../common/url-change-tracker';
import { AdaptRadarGainsightIdentifyAccountData, AdaptRadarGainsightIdentifyUserData } from './gainsight.model';
import * as i0 from "@angular/core";
export declare class AdaptRadarGainsightProvider implements OnDestroy {
    private _adaptRadarGlobal;
    private _adaptRadarURLChangeTracker;
    static readonly notAuthorizedUserId: string;
    private _radarConfig;
    private _providerConfig;
    private _isIdentifyEventSent;
    private _destroyed$;
    private _initSource;
    readonly init$: Observable<boolean>;
    static getInitScript(id: string, customInitScript: string, customSourceScript: string): string;
    get initProcess$(): Observable<boolean>;
    constructor(_adaptRadarGlobal: AdaptRadarGlobal, _adaptRadarURLChangeTracker: AdaptRadarURLChangeTracker);
    ngOnDestroy(): void;
    /**
     * The method is used to start collecting the data for the current provider
     * It allows controlling the data collecting process on the customer side.
     * For instance to turn on data collecting in run time when it needed based on user preferences or project business logic
     *
     * @param providerConfig - config for provider that need to be initialized
     * @param radarConfig - main RADAR config
     */
    startDataCollecting(providerConfig: AdaptRadarProviderConfig, radarConfig: AdaptRadarConfig): void;
    /**
     * The method is used to stop collecting the data for the current provider
     * It allows controlling the data collecting process on the customer side.
     * For instance to turn off data collecting in run time when it needed based on user preferences or project business logic
     */
    stopDataCollecting(): void;
    /**
     * Method is used to send 'identify' event for correct work of 'Gainsight' provider
     * The "identify" call should be made during the authorization/login area of your web application
     * More information can be found here - https://support.gainsight.com/PX/API_for_Developers/01About/Track_your_Users_and_Accounts
     *
     * @param userData - list of attributes that will be logged in Gainsight analytics system.
     * `id` is required for logged-in user. By default, `id` is - `bmc-not-authorized-user`
     * @param accountData - list of attributes that will be logged in Gainsight analytics system.
     * `id` is required for logged-in user. There is no default value for account id so pay attention to correctly set it if needed
     *
     * @example
     * sendIdentifyEvent({id: "user-id"}, {id: "account-id"});
     * converted to ->
     * aptrinsic('identify', {"id": "user-id"}, {"id": "account-id"});
     */
    sendIdentifyEvent(userData?: AdaptRadarGainsightIdentifyUserData, accountData?: AdaptRadarGainsightIdentifyAccountData): void;
    /**
     * Method is used to send custom events into Gainsight analytics system.
     *
     * @param customEventName - name of the event that will be logged into Gainsight analytics system
     * @param customEventData - custom data that need to be collect and associate with `customEventName`
     *
     * @example
     * sendCustomEvent(AdaptRadarCustomEventName.PagePath, {url: "some/url/path"})
     * converted to ->
     * aptrinsic('track', 'page_path', {"url": "some/url/path"})
     */
    sendCustomEvent(customEventName: AdaptRadarCustomEventName, customEventData: AdaptRadarCustomEventData): void;
    /**
     * Method is used to send global data(browser version, os version, localization settings, etc.)
     * Check if data was sent for current session and avoid double sending
     *
     * @param customEventName - name of the event that will be logged into Gainsight analytics system
     * @param customEventData - custom data that need to be collect and associate with `customEventName`
     */
    sendGlobalData(customEventName: AdaptRadarCustomEventName.AdaptGlobalData, customEventData: AdaptRadarCustomEventData<AdaptRadarGlobalData>): void;
    /**
     * Method is used to set "global context"
     *
     * More info can be found here - https://support.gainsight.com/PX/Engagements/02Engagement_Configuration/Use_Global_Context
     *
     * @param contextData - custom data that need to be collect and associate with "globalContext".
     * Global context data will be automatically extended with "AdaptRadarProductInfo" passed as "productInfo" property on "AdaptRadarConfig";
     *
     * @param once - flag that used to send "SetOnce" instead of "Set" for a "globalContext"
     *
     * @example
     * setGlobalContext({'projectId' : 67890})
     * converted to ->
     * aptrinsic('set', 'globalContext', {
     *   'projectId' : 67890,
     *   'productAreaName': 'Discovery',
     *   'productAreaVersion': '11.22.33',
     *   'mainProductHostingType': 'SaaS'
     * });
     *
     * setGlobalContext({'projectId' : 45673}, true)
     * converted to ->
     * aptrinsic('setOnce', 'globalContext', {
     *   'projectId' : 45673,
     *   'productAreaName': 'Discovery',
     *   'productAreaVersion': '11.22.33',
     *   'productAreaHosting': 'SaaS'
     * });
     */
    setGlobalContext(contextData: AdaptRadarCustomEventData<Record<string, unknown>>, once?: boolean): void;
    /**
     * Method is used to remove "global context"
     *
     * More info can be found here - https://support.gainsight.com/PX/Engagements/02Engagement_Configuration/Use_Global_Context
     *
     * @param dataToRemove - array of string keys to remove
     *
     * @example
     * removeGlobalContext(["projectId"])
     * converted to ->
     * aptrinsic('remove', 'globalContext', ["projectId"])
     */
    removeGlobalContext(dataToRemove: string[]): void;
    /**
     * Method is used to send information when URL changed
     *
     * @param customEventName - name of the event that will be logged into Gainsight analytics system
     * @param customEventData - custom data that need to be collect and associate with `customEventName`
     */
    sendURLChangeEvent(customEventName: AdaptRadarCustomEventName.AdaptURLChanged, customEventData: AdaptRadarCustomEventData<AdaptRadarURLChangedCollectedEventData>): void;
    /**
     * Opt-Out User Tracking
     * Use Config API to opt-out from tracking the current user.
     * This API allows the admin to easily make the call for any users for whom they do not want cookies stored or
     * network calls made back to PX, essentially never hitting the PX Server.
     * The selected users will not view any active engagements or Knowledge Center Bot.
     *
     * Gainsight docs: https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Use_Config_API
     *
     * @param isEnabled - tracking state (true for Out-In, false for Opt-Out)
     */
    toggleUserTracking(isEnabled: boolean): void;
    private _subscribeOnURLChange;
    private _processIdentifyAction;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRadarGainsightProvider, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AdaptRadarGainsightProvider>;
}
