import * as i0 from '@angular/core';
import { Directive, Input, Injectable, InjectionToken, VERSION as VERSION$1, Inject, Optional, isDevMode, Version, EventEmitter, Output, NgModule } from '@angular/core';
import { isNil, isNull, isFunction } from 'lodash-es';
import { Subject, ReplaySubject, BehaviorSubject } from 'rxjs';
import { take, takeUntil } from 'rxjs/operators';
import { CommonModule } from '@angular/common';

class AdaptRadarDirective {
}
AdaptRadarDirective.ɵfac = function AdaptRadarDirective_Factory(t) { return new (t || AdaptRadarDirective)(); };
AdaptRadarDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: AdaptRadarDirective, selectors: [["", "adaptRadar", ""]], inputs: { adaptRadar: "adaptRadar" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRadarDirective, [{
        type: Directive,
        args: [{ selector: '[adaptRadar]' }]
    }], null, { adaptRadar: [{
            type: Input
        }] }); })();

var AdaptRadarStorageKey;
(function (AdaptRadarStorageKey) {
    AdaptRadarStorageKey["UserId"] = "adaptRadar.userId";
    AdaptRadarStorageKey["VersionsInfo"] = "adaptRadar.versionsInfo";
    AdaptRadarStorageKey["GainsightGlobalDataSent"] = "adaptRadar.gainsightGlobalDataSent";
})(AdaptRadarStorageKey || (AdaptRadarStorageKey = {}));
var AdaptRadarSupportedProviders;
(function (AdaptRadarSupportedProviders) {
    AdaptRadarSupportedProviders["GoogleGlobalSiteTag"] = "ggst";
    AdaptRadarSupportedProviders["GoogleTagManager"] = "gtm";
    AdaptRadarSupportedProviders["Gainsight"] = "gainsight";
})(AdaptRadarSupportedProviders || (AdaptRadarSupportedProviders = {}));
// Allowed events names
var AdaptRadarCustomEventName;
(function (AdaptRadarCustomEventName) {
    // Providers events
    AdaptRadarCustomEventName["PagePath"] = "page_path";
    AdaptRadarCustomEventName["GlobalContext"] = "globalContext";
    // Used to send 'global' data(browser info, libraries versions, etc.) on provider init stage
    AdaptRadarCustomEventName["AdaptGlobalData"] = "Adapt_Global_Data";
    // Used to send information when URL changed
    AdaptRadarCustomEventName["AdaptURLChanged"] = "Adapt_URL_Changed";
    AdaptRadarCustomEventName["AdaptGenericComponent"] = "Adapt_Generic_Component";
    // TODO: Need to find way how to deal with components that already extends from 3rd party component.
    // For now directly send event from component
    AdaptRadarCustomEventName["AdaptPagination"] = "Adapt_Pagination";
    AdaptRadarCustomEventName["AdaptSlider"] = "Adapt_Slider";
    AdaptRadarCustomEventName["AdaptToast"] = "Adapt_Toast";
    AdaptRadarCustomEventName["AdaptTree"] = "Adapt_Tree";
    // ADAPT Components names
    // TODO: Think should we split names for better readability and consistency.
    // TODO: Adapt_RxRadiobuttonGroup -> Adapt_Rx_Radiobutton_Group
    AdaptRadarCustomEventName["AdaptRxTextfield"] = "Adapt_RxTextfield";
    AdaptRadarCustomEventName["AdaptRxTextarea"] = "Adapt_RxTextarea";
    AdaptRadarCustomEventName["AdaptRxCounter"] = "Adapt_RxCounter";
    AdaptRadarCustomEventName["AdaptRxSearch"] = "Adapt_RxSearch";
    AdaptRadarCustomEventName["AdaptRxCheckbox"] = "Adapt_RxCheckbox";
    AdaptRadarCustomEventName["AdaptRxRadiobutton"] = "Adapt_RxRadiobutton";
    AdaptRadarCustomEventName["AdaptRxRadiobuttonGroup"] = "Adapt_RxRadiobuttonGroup";
    AdaptRadarCustomEventName["AdaptRxRating"] = "Adapt_RxRating_Default";
    AdaptRadarCustomEventName["AdaptRxRatingBinary"] = "Adapt_RxRating_Binary";
    AdaptRadarCustomEventName["AdaptRxRatingLike"] = "Adapt_RxRating_Like";
    AdaptRadarCustomEventName["AdaptRxRatingVoting"] = "Adapt_RxRating_Voting";
    AdaptRadarCustomEventName["AdaptRxSwitch"] = "Adapt_RxSwitch";
    AdaptRadarCustomEventName["AdaptRxSelect"] = "Adapt_RxSelect";
    AdaptRadarCustomEventName["AdaptRxSelectEditable"] = "Adapt_RxSelectEditable";
    AdaptRadarCustomEventName["AdaptRxDatetime"] = "Adapt_RxDateTime";
    AdaptRadarCustomEventName["AdaptRxDatetimeRange"] = "Adapt_RxDatetimeRange";
    AdaptRadarCustomEventName["AdaptRxTimeSlot"] = "Adapt_RxTimeSlot";
    AdaptRadarCustomEventName["AdaptRxListSelector"] = "Adapt_RxListSelector";
    AdaptRadarCustomEventName["AdaptRxListBuilder"] = "Adapt_RxListBuilder";
    AdaptRadarCustomEventName["AdaptRxTypeahead"] = "Adapt_RxTypeahead";
    AdaptRadarCustomEventName["AdaptRxUploader"] = "Adapt_RxUploader";
    AdaptRadarCustomEventName["AdaptRxFeedback"] = "Adapt_RxFeedback";
    AdaptRadarCustomEventName["AdaptAccordion"] = "Adapt_Accordion";
    AdaptRadarCustomEventName["AdaptSimpleFilter"] = "Adapt_Simple_Filter";
    AdaptRadarCustomEventName["AdaptFacetedFilter"] = "Adapt_Faceted_Filter";
    AdaptRadarCustomEventName["AdaptAdvancedFilter"] = "Adapt_Advanced_Filter";
    AdaptRadarCustomEventName["AdaptAgreement"] = "Adapt_Agreement";
    AdaptRadarCustomEventName["AdaptAlert"] = "Adapt_Alert";
    AdaptRadarCustomEventName["AdaptAlertAnimated"] = "Adapt_Alert_Animated";
    AdaptRadarCustomEventName["AdaptAnchorNavigator"] = "Adapt_Anchor_Navigator";
    AdaptRadarCustomEventName["AdaptBadge"] = "Adapt_Badge";
    AdaptRadarCustomEventName["AdaptBeard"] = "Adapt_Beard";
    AdaptRadarCustomEventName["AdaptBusy"] = "Adapt_Busy";
    AdaptRadarCustomEventName["AdaptButton"] = "Adapt_Button";
    AdaptRadarCustomEventName["AdaptButtonGroup"] = "Adapt_Button_Group";
    AdaptRadarCustomEventName["AdaptCardCarousel"] = "Adapt_Card_Carousel";
    AdaptRadarCustomEventName["AdaptCarousel"] = "Adapt_Carousel";
    AdaptRadarCustomEventName["AdaptClose"] = "Adapt_Close";
    AdaptRadarCustomEventName["AdaptCodeHighlighter"] = "Adapt_Code_Highlighter";
    AdaptRadarCustomEventName["AdaptCodeViewer"] = "Adapt_Code_Viewer";
    AdaptRadarCustomEventName["AdaptCollapse"] = "Adapt_Collapse";
    AdaptRadarCustomEventName["AdaptExpando"] = "AdaptExpando";
    AdaptRadarCustomEventName["AdaptColorPicker"] = "Adapt_Color_Picker";
    AdaptRadarCustomEventName["AdaptCrop"] = "Adapt_Crop";
    AdaptRadarCustomEventName["AdaptCustomActions"] = "Adapt_Custom_Actions";
    AdaptRadarCustomEventName["AdaptDockedPanel"] = "Adapt_Docked_Panel";
    AdaptRadarCustomEventName["AdaptDownloader"] = "Adapt_Downloader";
    AdaptRadarCustomEventName["AdaptDropdown"] = "Adapt_Dropdown";
    AdaptRadarCustomEventName["AdaptEmptyState"] = "Adapt_Empty_State";
    AdaptRadarCustomEventName["AdaptFocusHolder"] = "Adapt_Focus_Holder";
    AdaptRadarCustomEventName["AdaptFocusTracker"] = "Adapt_Focus_Tracker";
    AdaptRadarCustomEventName["AdaptIcon"] = "Adapt_Icon";
    AdaptRadarCustomEventName["AdaptInlineEditor"] = "Adapt_Inline_Editor";
    AdaptRadarCustomEventName["AdaptLoginPage"] = "Adapt_Login_Page";
    AdaptRadarCustomEventName["AdaptMention"] = "Adapt_Mention";
    AdaptRadarCustomEventName["AdaptMention2"] = "Adapt_Mention_2";
    AdaptRadarCustomEventName["AdaptDialog"] = "Adapt_Dialog";
    AdaptRadarCustomEventName["AdaptMenu"] = "Adapt_Menu";
    AdaptRadarCustomEventName["AdaptMetatag"] = "Adapt_Metatag";
    AdaptRadarCustomEventName["AdaptModal"] = "Adapt_Modal";
    AdaptRadarCustomEventName["AdaptMultiCard"] = "Adapt_Multi_Card";
    AdaptRadarCustomEventName["AdaptNavigation"] = "Adapt_Navigation";
    AdaptRadarCustomEventName["AdaptNavigationMenu"] = "Adapt_Navigation_Menu";
    AdaptRadarCustomEventName["AdaptNavigationAction"] = "Adapt_Navigation_Action";
    AdaptRadarCustomEventName["AdaptNavigationAlert"] = "Adapt_Navigation_Alert";
    AdaptRadarCustomEventName["AdaptNavigationHamburger"] = "Adapt_Navigation_Hamburger";
    AdaptRadarCustomEventName["AdaptNotFoundPage"] = "Adapt_Not_Found_Page";
    AdaptRadarCustomEventName["AdaptPopover"] = "Adapt_Popover";
    AdaptRadarCustomEventName["AdaptProfile"] = "Adapt_Profile";
    AdaptRadarCustomEventName["AdaptProgress"] = "Adapt_Progress";
    AdaptRadarCustomEventName["AdaptTime"] = "Adapt_Time";
    AdaptRadarCustomEventName["AdaptUploader"] = "Adapt_Uploader";
    AdaptRadarCustomEventName["AdaptSingleUploader"] = "Adapt_Single_Uploader";
    AdaptRadarCustomEventName["AdaptSidebar"] = "Adapt_Sidebar";
    AdaptRadarCustomEventName["AdaptSplit"] = "Adapt_Split";
    AdaptRadarCustomEventName["AdaptSteps"] = "Adapt_Steps";
    AdaptRadarCustomEventName["AdaptSubnav"] = "Adapt_Subnav";
    AdaptRadarCustomEventName["AdaptTabs"] = "Adapt_Tabs";
    AdaptRadarCustomEventName["AdaptTabsKebabMenu"] = "Adapt_Tabs_Kebab_Menu";
    AdaptRadarCustomEventName["AdaptTabsControls"] = "Adapt_Tabs_Controls";
    AdaptRadarCustomEventName["AdaptTag"] = "Adapt_Tag";
    AdaptRadarCustomEventName["AdaptTextField"] = "Adapt_Text_Field";
    AdaptRadarCustomEventName["AdaptTextFieldFormBuilder"] = "Adapt_Text_Field_Form_Builder";
    AdaptRadarCustomEventName["AdaptTooltip"] = "Adapt_Tooltip";
    AdaptRadarCustomEventName["AdaptTruncateFileName"] = "Adapt_Truncate_File_Name";
    AdaptRadarCustomEventName["AdaptTypeahead"] = "Adapt_Typeahead";
    AdaptRadarCustomEventName["AdaptWorkflowCarousel"] = "Adapt_Workflow_Carousel";
    AdaptRadarCustomEventName["AdaptIllustration"] = "Adapt_Illustration";
    AdaptRadarCustomEventName["AdaptRichTextEditor"] = "Adapt_RichTextEditor";
    AdaptRadarCustomEventName["AdaptAgreementAdminContent"] = "Adapt_Agreement_AdminContent";
    AdaptRadarCustomEventName["AdaptAgreementCard"] = "Adapt_Agreement_Card";
    AdaptRadarCustomEventName["AdaptAgreementContent"] = "Adapt_Agreement_Content";
    AdaptRadarCustomEventName["AdaptAgreementNotification"] = "Adapt_Agreement_Notification";
    AdaptRadarCustomEventName["AdaptAgreementUserModal"] = "Adapt_Agreement_UserModal";
    // Obsolete modules
    AdaptRadarCustomEventName["AdaptCheckbox2"] = "Adapt_Checkbox_2";
    AdaptRadarCustomEventName["AdaptCounter"] = "Adapt_Counter";
    AdaptRadarCustomEventName["AdaptDatetimeRange2"] = "Adapt_Datetime_Range_2";
    AdaptRadarCustomEventName["AdaptDatetime2"] = "Adapt_Datetime_2";
    AdaptRadarCustomEventName["AdaptListBuilder"] = "Adapt_List_Builder";
    AdaptRadarCustomEventName["AdaptList"] = "Adapt_List";
    AdaptRadarCustomEventName["AdaptRadioButton"] = "Adapt_Radio_Button";
    AdaptRadarCustomEventName["AdaptDropDownEditable"] = "Adapt_DropDown_Editable";
    AdaptRadarCustomEventName["AdaptRating"] = "Adapt_Rating";
    AdaptRadarCustomEventName["AdaptRatingBinary"] = "Adapt_Rating_Binary";
    AdaptRadarCustomEventName["AdaptRatingLike"] = "Adapt_Rating_Like";
    AdaptRadarCustomEventName["AdaptRatingVoting"] = "Adapt_Rating_Voting";
    AdaptRadarCustomEventName["AdaptSearch"] = "Adapt_Search";
    AdaptRadarCustomEventName["AdaptSelect"] = "Adapt_Select";
    AdaptRadarCustomEventName["AdaptSelectInline"] = "Adapt_Select_Inline";
    AdaptRadarCustomEventName["AdaptSwitcher"] = "Adapt_Switcher";
    AdaptRadarCustomEventName["AdaptTimeSlot"] = "Adapt_Time_Slot";
})(AdaptRadarCustomEventName || (AdaptRadarCustomEventName = {}));
// Generic events that can be applied across all components
var AdaptRadarCustomEventType;
(function (AdaptRadarCustomEventType) {
    AdaptRadarCustomEventType["ErrorFired"] = "ErrorFired";
    AdaptRadarCustomEventType["Init"] = "Init";
    AdaptRadarCustomEventType["Focus"] = "Focus";
    AdaptRadarCustomEventType["Blur"] = "Blur";
    AdaptRadarCustomEventType["Click"] = "Click";
    AdaptRadarCustomEventType["Search"] = "Search";
    AdaptRadarCustomEventType["ValueChanged"] = "ValueChanged";
    AdaptRadarCustomEventType["Clear"] = "Clear";
    AdaptRadarCustomEventType["DragStart"] = "DragStart";
    AdaptRadarCustomEventType["Drop"] = "Drop";
})(AdaptRadarCustomEventType || (AdaptRadarCustomEventType = {}));
// Component specific events
var AdaptRadarComponentEventType;
(function (AdaptRadarComponentEventType) {
    AdaptRadarComponentEventType["TabAdd"] = "TabAdd";
    AdaptRadarComponentEventType["TabDelete"] = "TabDelete";
})(AdaptRadarComponentEventType || (AdaptRadarComponentEventType = {}));

function injectSourceScript(src) {
    if (!src) {
        return;
    }
    const script = window.document.createElement('script');
    script.type = 'text/javascript';
    script.async = true;
    script.src = src;
    window.document.head.appendChild(script);
}
function injectInitScript(src) {
    if (!src) {
        return;
    }
    const script = window.document.createElement('script');
    script.type = 'text/javascript';
    script.text = src;
    window.document.head.appendChild(script);
}

/**
 * The main goal of UA parser is to convert user agent string to human readable information
 *
 * Example:
 *
 * user agent string:
 * "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
 *
 * will be converted into object:
 * {
 *  BrowserDetailedVersion: "95.0.4638.69"
 *  BrowserType: "Chrome"
 *  BrowserVersion: "95"
 *  OperatingSystem: "Mac OS"
 *  OperatingSystemVersion: "10.15.7"
 * }
 *
 *
 * The main part of code was taken from - https://github.com/faisalman/ua-parser-js (version: "0.7.28", date: "21 October 2021")
 */
const EMPTY = '', UNKNOWN = '?', FUNC_TYPE = 'function', UNDEF_TYPE = 'undefined', OBJ_TYPE = 'object', STR_TYPE = 'string', MODEL = 'model', NAME = 'name', TYPE = 'type', VENDOR = 'vendor', VERSION = 'version', ARCHITECTURE = 'architecture', MOBILE = 'mobile', TABLET = 'tablet', WEARABLE = 'wearable', EMBEDDED = 'embedded', UA_MAX_LENGTH = 255;
var AdaptRadarUAVendor;
(function (AdaptRadarUAVendor) {
    AdaptRadarUAVendor["AMAZON"] = "Amazon";
    AdaptRadarUAVendor["APPLE"] = "Apple";
    AdaptRadarUAVendor["ASUS"] = "ASUS";
    AdaptRadarUAVendor["BLACKBERRY"] = "BlackBerry";
    AdaptRadarUAVendor["BROWSER"] = "Browser";
    AdaptRadarUAVendor["CHROME"] = "Chrome";
    AdaptRadarUAVendor["EDGE"] = "Edge";
    AdaptRadarUAVendor["FIREFOX"] = "Firefox";
    AdaptRadarUAVendor["GOOGLE"] = "Google";
    AdaptRadarUAVendor["HUAWEI"] = "Huawei";
    AdaptRadarUAVendor["LG"] = "LG";
    AdaptRadarUAVendor["MICROSOFT"] = "Microsoft";
    AdaptRadarUAVendor["MOTOROLA"] = "Motorola";
    AdaptRadarUAVendor["OPERA"] = "Opera";
    AdaptRadarUAVendor["SAMSUNG"] = "Samsung";
    AdaptRadarUAVendor["SONY"] = "Sony";
    AdaptRadarUAVendor["XIAOMI"] = "Xiaomi";
    AdaptRadarUAVendor["ZEBRA"] = "Zebra";
    AdaptRadarUAVendor["FACEBOOK"] = "Facebook";
})(AdaptRadarUAVendor || (AdaptRadarUAVendor = {}));
/**
 * Service used to convert data from browser user agent to readable information
 */
class AdaptRadarUAParser {
    constructor() {
        this.windowsVersionMap = {
            'ME': '4.90',
            'NT 3.11': 'NT3.51',
            'NT 4.0': 'NT4.0',
            '2000': 'NT 5.0',
            'XP': ['NT 5.1', 'NT 5.2'],
            'Vista': 'NT 6.0',
            '7': 'NT 6.1',
            '8': 'NT 6.2',
            '8.1': 'NT 6.3',
            '10': ['NT 6.4', 'NT 10.0'],
            'RT': 'ARM'
        };
        /* eslint-disable no-useless-escape */
        this.regexes = {
            browser: [
                [
                    /\b(?:crmo|crios)\/([\w\.]+)/i // Chrome for Android/iOS
                ], [VERSION, [NAME, 'Chrome']], [
                    /edg(?:e|ios|a)?\/([\w\.]+)/i // Microsoft Edge
                ], [VERSION, [NAME, 'Edge']], [
                    // Presto based
                    /(opera mini)\/([-\w\.]+)/i,
                    /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
                    /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i // Opera
                ], [NAME, VERSION], [
                    /opios[\/ ]+([\w\.]+)/i // Opera mini on iphone >= 8.0
                ], [VERSION, [NAME, AdaptRadarUAVendor.OPERA + ' Mini']], [
                    /\bopr\/([\w\.]+)/i // Opera Webkit
                ], [VERSION, [NAME, AdaptRadarUAVendor.OPERA]], [
                    // Mixed
                    /(kindle)\/([\w\.]+)/i,
                    /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,
                    // Trident based
                    /(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,
                    /(ba?idubrowser)[\/ ]?([\w\.]+)/i,
                    /(?:ms|\()(ie) ([\w\.]+)/i,
                    // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
                    /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale|qqbrowserlite|qq)\/([-\w\.]+)/i,
                    // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ
                    /(weibo)__([\d\.]+)/i // Weibo
                ], [NAME, VERSION], [
                    /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i // UCBrowser
                ], [VERSION, [NAME, 'UC' + AdaptRadarUAVendor.BROWSER]], [
                    /\bqbcore\/([\w\.]+)/i // WeChat Desktop for Windows Built-in Browser
                ], [VERSION, [NAME, 'WeChat(Win) Desktop']], [
                    /micromessenger\/([\w\.]+)/i // WeChat
                ], [VERSION, [NAME, 'WeChat']], [
                    /konqueror\/([\w\.]+)/i // Konqueror
                ], [VERSION, [NAME, 'Konqueror']], [
                    /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i // IE11
                ], [VERSION, [NAME, 'IE']], [
                    /yabrowser\/([\w\.]+)/i // Yandex
                ], [VERSION, [NAME, 'Yandex']], [
                    /(avast|avg)\/([\w\.]+)/i // Avast/AVG Secure Browser
                ], [[NAME, /(.+)/, '$1 Secure ' + AdaptRadarUAVendor.BROWSER], VERSION], [
                    /\bfocus\/([\w\.]+)/i // Firefox Focus
                ], [VERSION, [NAME, AdaptRadarUAVendor.FIREFOX + ' Focus']], [
                    /\bopt\/([\w\.]+)/i // Opera Touch
                ], [VERSION, [NAME, AdaptRadarUAVendor.OPERA + ' Touch']], [
                    /coc_coc\w+\/([\w\.]+)/i // Coc Coc Browser
                ], [VERSION, [NAME, 'Coc Coc']], [
                    /dolfin\/([\w\.]+)/i // Dolphin
                ], [VERSION, [NAME, 'Dolphin']], [
                    /coast\/([\w\.]+)/i // Opera Coast
                ], [VERSION, [NAME, AdaptRadarUAVendor.OPERA + ' Coast']], [
                    /miuibrowser\/([\w\.]+)/i // MIUI Browser
                ], [VERSION, [NAME, 'MIUI ' + AdaptRadarUAVendor.BROWSER]], [
                    /fxios\/([-\w\.]+)/i // Firefox for iOS
                ], [VERSION, [NAME, AdaptRadarUAVendor.FIREFOX]], [
                    /\bqihu|(qi?ho?o?|360)browser/i // 360
                ], [[NAME, '360 ' + AdaptRadarUAVendor.BROWSER]], [
                    /(oculus|samsung|sailfish)browser\/([\w\.]+)/i
                ], [[NAME, /(.+)/, '$1 ' + AdaptRadarUAVendor.BROWSER], VERSION], [
                    /(comodo_dragon)\/([\w\.]+)/i // Comodo Dragon
                ], [[NAME, /_/g, ' '], VERSION], [
                    /(electron)\/([\w\.]+) safari/i,
                    /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
                    /m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i // QQBrowser/Baidu App/2345 Browser
                ], [NAME, VERSION], [
                    /(metasr)[\/ ]?([\w\.]+)/i,
                    /(lbbrowser)/i // LieBao Browser
                ], [NAME], [
                    // WebView
                    /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i // Facebook App for iOS & Android
                ], [[NAME, AdaptRadarUAVendor.FACEBOOK], VERSION], [
                    /safari (line)\/([\w\.]+)/i,
                    /\b(line)\/([\w\.]+)\/iab/i,
                    /(chromium|instagram)[\/ ]([-\w\.]+)/i // Chromium/Instagram
                ], [NAME, VERSION], [
                    /\bgsa\/([\w\.]+) .*safari\//i // Google Search Appliance on iOS
                ], [VERSION, [NAME, 'GSA']], [
                    /headlesschrome(?:\/([\w\.]+)| )/i // Chrome Headless
                ], [VERSION, [NAME, AdaptRadarUAVendor.CHROME + ' Headless']], [
                    / wv\).+(chrome)\/([\w\.]+)/i // Chrome WebView
                ], [[NAME, AdaptRadarUAVendor.CHROME + ' WebView'], VERSION], [
                    /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i // Android Browser
                ], [VERSION, [NAME, 'Android ' + AdaptRadarUAVendor.BROWSER]], [
                    /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i // Chrome/OmniWeb/Arora/Tizen/Nokia
                ], [NAME, VERSION], [
                    /version\/([\w\.]+) .*mobile\/\w+ (safari)/i // Mobile Safari
                ], [VERSION, [NAME, 'Mobile Safari']], [
                    /version\/([\w\.]+) .*(mobile ?safari|safari)/i // Safari & Safari Mobile
                ], [VERSION, NAME], [
                    /(webkit|khtml)\/([\w\.]+)/i
                ], [NAME, VERSION], [
                    // Gecko based
                    /(navigator|netscape\d?)\/([-\w\.]+)/i // Netscape
                ], [[NAME, 'Netscape'], VERSION], [
                    /mobile vr; rv:([\w\.]+)\).+firefox/i // Firefox Reality
                ], [VERSION, [NAME, AdaptRadarUAVendor.FIREFOX + ' Reality']], [
                    /ekiohf.+(flow)\/([\w\.]+)/i,
                    /(swiftfox)/i,
                    /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
                    // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar
                    /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
                    // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
                    /(firefox)\/([\w\.]+)/i,
                    /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
                    // Other
                    /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
                    // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser
                    /(links) \(([\w\.]+)/i // Links
                ], [NAME, VERSION]
            ],
            cpu: [
                [
                    /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i // AMD64 (x64)
                ], [[ARCHITECTURE, 'amd64']], [
                    /(ia32(?=;))/i // IA32 (quicktime)
                ], [[ARCHITECTURE, AdaptRadarUAParser.lowerize]], [
                    /((?:i[346]|x)86)[;\)]/i // IA32 (x86)
                ], [[ARCHITECTURE, 'ia32']], [
                    /\b(aarch64|arm(v?8e?l?|_?64))\b/i // ARM64
                ], [[ARCHITECTURE, 'arm64']], [
                    /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i // ARMHF
                ], [[ARCHITECTURE, 'armhf']], [
                    // PocketPC mistakenly identified as PowerPC
                    /windows (ce|mobile); ppc;/i
                ], [[ARCHITECTURE, 'arm']], [
                    /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i // PowerPC
                ], [[ARCHITECTURE, /ower/, EMPTY, AdaptRadarUAParser.lowerize]], [
                    /(sun4\w)[;\)]/i // SPARC
                ], [[ARCHITECTURE, 'sparc']], [
                    /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
                    // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
                ], [[ARCHITECTURE, AdaptRadarUAParser.lowerize]]
            ],
            device: [
                [
                    //////////////////////////
                    // MOBILES & TABLETS
                    // Ordered by popularity
                    /////////////////////////
                    // Samsung
                    /\b(sch-i[89]0\d|shw-m380s|sm-[pt]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.SAMSUNG], [TYPE, TABLET]], [
                    /\b((?:s[cgp]h|gt|sm)-\w+|galaxy nexus)/i,
                    /samsung[- ]([-\w]+)/i,
                    /sec-(sgh\w+)/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.SAMSUNG], [TYPE, MOBILE]], [
                    // Apple
                    /\((ip(?:hone|od)[\w ]*);/i // iPod/iPhone
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.APPLE], [TYPE, MOBILE]], [
                    /\((ipad);[-\w\),; ]+apple/i,
                    /applecoremedia\/[\w\.]+ \((ipad)/i,
                    /\b(ipad)\d\d?,\d\d?[;\]].+ios/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.APPLE], [TYPE, TABLET]], [
                    // Huawei
                    /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.HUAWEI], [TYPE, TABLET]], [
                    /(?:huawei|honor)([-\w ]+)[;\)]/i,
                    /\b(nexus 6p|\w{2,4}-[atu]?[ln][01259x][012359][an]?)\b(?!.+d\/s)/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.HUAWEI], [TYPE, MOBILE]], [
                    // Xiaomi
                    /\b(poco[\w ]+)(?: bui|\))/i,
                    /\b; (\w+) build\/hm\1/i,
                    /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
                    /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
                    /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i // Xiaomi Mi
                ], [[MODEL, /_/g, ' '], [VENDOR, AdaptRadarUAVendor.XIAOMI], [TYPE, MOBILE]], [
                    /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i // Mi Pad tablets
                ], [[MODEL, /_/g, ' '], [VENDOR, AdaptRadarUAVendor.XIAOMI], [TYPE, TABLET]], [
                    // OPPO
                    /; (\w+) bui.+ oppo/i,
                    /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007)\b/i
                ], [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]], [
                    // Vivo
                    /vivo (\w+)(?: bui|\))/i,
                    /\b(v[12]\d{3}\w?[at])(?: bui|;)/i
                ], [MODEL, [VENDOR, 'Vivo'], [TYPE, MOBILE]], [
                    // Realme
                    /\b(rmx[12]\d{3})(?: bui|;|\))/i
                ], [MODEL, [VENDOR, 'Realme'], [TYPE, MOBILE]], [
                    // Motorola
                    /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
                    /\bmot(?:orola)?[- ](\w*)/i,
                    /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.MOTOROLA], [TYPE, MOBILE]], [
                    /\b(mz60\d|xoom[2 ]{0,2}) build\//i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.MOTOROLA], [TYPE, TABLET]], [
                    // LG
                    /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.LG], [TYPE, TABLET]], [
                    /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
                    /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
                    /\blg-?([\d\w]+) bui/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.LG], [TYPE, MOBILE]], [
                    // Lenovo
                    /(ideatab[-\w ]+)/i,
                    /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i
                ], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [
                    // Nokia
                    /(?:maemo|nokia).*(n900|lumia \d+)/i,
                    /nokia[-_ ]?([-\w\.]*)/i
                ], [[MODEL, /_/g, ' '], [VENDOR, 'Nokia'], [TYPE, MOBILE]], [
                    // Google
                    /(pixel c)\b/i // Google Pixel C
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.GOOGLE], [TYPE, TABLET]], [
                    /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i // Google Pixel
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.GOOGLE], [TYPE, MOBILE]], [
                    // Sony
                    /droid.+ ([c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.SONY], [TYPE, MOBILE]], [
                    /sony tablet [ps]/i,
                    /\b(?:sony)?sgp\w+(?: bui|\))/i
                ], [[MODEL, 'Xperia Tablet'], [VENDOR, AdaptRadarUAVendor.SONY], [TYPE, TABLET]], [
                    // OnePlus
                    / (kb2005|in20[12]5|be20[12][59])\b/i,
                    /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i
                ], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [
                    // Amazon
                    /(alexa)webm/i,
                    /(kf[a-z]{2}wi)( bui|\))/i,
                    /(kf[a-z]+)( bui|\)).+silk\//i // Kindle Fire HD
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.AMAZON], [TYPE, TABLET]], [
                    /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i // Fire Phone
                ], [[MODEL, /(.+)/g, 'Fire Phone $1'], [VENDOR, AdaptRadarUAVendor.AMAZON], [TYPE, MOBILE]], [
                    // BlackBerry
                    /(playbook);[-\w\),; ]+(rim)/i // BlackBerry PlayBook
                ], [MODEL, VENDOR, [TYPE, TABLET]], [
                    /\b((?:bb[a-f]|st[hv])100-\d)/i,
                    /\(bb10; (\w+)/i // BlackBerry 10
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.BLACKBERRY], [TYPE, MOBILE]], [
                    // Asus
                    /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.ASUS], [TYPE, TABLET]], [
                    / (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.ASUS], [TYPE, MOBILE]], [
                    // HTC
                    /(nexus 9)/i // HTC Nexus 9
                ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [
                    /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
                    // ZTE
                    /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
                    /(alcatel|geeksphone|nexian|panasonic|sony)[-_ ]?([-\w]*)/i // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
                ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [
                    // Acer
                    /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i
                ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [
                    // Meizu
                    /droid.+; (m[1-5] note) bui/i,
                    /\bmz-([-\w]{2,})/i
                ], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [
                    // Sharp
                    /\b(sh-?[altvz]?\d\d[a-ekm]?)/i
                ], [MODEL, [VENDOR, 'Sharp'], [TYPE, MOBILE]], [
                    // MIXED
                    /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,
                    // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
                    /(hp) ([\w ]+\w)/i,
                    /(asus)-?(\w+)/i,
                    /(microsoft); (lumia[\w ]+)/i,
                    /(lenovo)[-_ ]?([-\w]+)/i,
                    /(jolla)/i,
                    /(oppo) ?([\w ]+) bui/i // OPPO
                ], [VENDOR, MODEL, [TYPE, MOBILE]], [
                    /(archos) (gamepad2?)/i,
                    /(hp).+(touchpad(?!.+tablet)|tablet)/i,
                    /(kindle)\/([\w\.]+)/i,
                    /(nook)[\w ]+build\/(\w+)/i,
                    /(dell) (strea[kpr\d ]*[\dko])/i,
                    /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
                    /(trinity)[- ]*(t\d{3}) bui/i,
                    /(gigaset)[- ]+(q\w{1,9}) bui/i,
                    /(vodafone) ([\w ]+)(?:\)| bui)/i // Vodafone
                ], [VENDOR, MODEL, [TYPE, TABLET]], [
                    /(surface duo)/i // Surface Duo
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.MICROSOFT], [TYPE, TABLET]], [
                    /droid [\d\.]+; (fp\du?)(?: b|\))/i // Fairphone
                ], [MODEL, [VENDOR, 'Fairphone'], [TYPE, MOBILE]], [
                    /(u304aa)/i // AT&T
                ], [MODEL, [VENDOR, 'AT&T'], [TYPE, MOBILE]], [
                    /\bsie-(\w*)/i // Siemens
                ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [
                    /\b(rct\w+) b/i // RCA Tablets
                ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [
                    /\b(venue[\d ]{2,7}) b/i // Dell Venue Tablets
                ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [
                    /\b(q(?:mv|ta)\w+) b/i // Verizon Tablet
                ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [
                    /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i // Barnes & Noble Tablet
                ], [MODEL, [VENDOR, 'Barnes & Noble'], [TYPE, TABLET]], [
                    /\b(tm\d{3}\w+) b/i
                ], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [
                    /\b(k88) b/i // ZTE K Series Tablet
                ], [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]], [
                    /\b(nx\d{3}j) b/i // ZTE Nubia
                ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [
                    /\b(gen\d{3}) b.+49h/i // Swiss GEN Mobile
                ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [
                    /\b(zur\d{3}) b/i // Swiss ZUR Tablet
                ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [
                    /\b((zeki)?tb.*\b) b/i // Zeki Tablets
                ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [
                    /\b([yr]\d{2}) b/i,
                    /\b(dragon[- ]+touch |dt)(\w{5}) b/i // Dragon Touch Tablet
                ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [
                    /\b(ns-?\w{0,9}) b/i // Insignia Tablets
                ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [
                    /\b((nxa|next)-?\w{0,9}) b/i // NextBook Tablets
                ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [
                    /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i // Voice Xtreme Phones
                ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [
                    /\b(lvtel\-)?(v1[12]) b/i // LvTel Phones
                ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [
                    /\b(ph-1) /i // Essential PH-1
                ], [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]], [
                    /\b(v(100md|700na|7011|917g).*\b) b/i // Envizen Tablets
                ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [
                    /\b(trio[-\w\. ]+) b/i // MachSpeed Tablets
                ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [
                    /\btu_(1491) b/i // Rotor Tablets
                ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [
                    /(shield[\w ]+) b/i // Nvidia Shield Tablets
                ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, TABLET]], [
                    /(sprint) (\w+)/i // Sprint Phones
                ], [VENDOR, MODEL, [TYPE, MOBILE]], [
                    /(kin\.[onetw]{3})/i // Microsoft Kin
                ], [[MODEL, /\./g, ' '], [VENDOR, AdaptRadarUAVendor.MICROSOFT], [TYPE, MOBILE]], [
                    /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i // Zebra
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.ZEBRA], [TYPE, TABLET]], [
                    /droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.ZEBRA], [TYPE, MOBILE]], [
                    ///////////////////
                    // WEARABLES
                    ///////////////////
                    /((pebble))app/i // Pebble
                ], [VENDOR, MODEL, [TYPE, WEARABLE]], [
                    /droid.+; (glass) \d/i // Google Glass
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.GOOGLE], [TYPE, WEARABLE]], [
                    /droid.+; (wt63?0{2,3})\)/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.ZEBRA], [TYPE, WEARABLE]], [
                    /(quest( 2)?)/i // Oculus Quest
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.FACEBOOK], [TYPE, WEARABLE]], [
                    ///////////////////
                    // EMBEDDED
                    ///////////////////
                    /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i // Tesla
                ], [VENDOR, [TYPE, EMBEDDED]], [
                    ////////////////////
                    // MIXED (GENERIC)
                    ///////////////////
                    /droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i // Android Phones from Unidentified Vendors
                ], [MODEL, [TYPE, MOBILE]], [
                    /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i // Android Tablets from Unidentified Vendors
                ], [MODEL, [TYPE, TABLET]], [
                    /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i // Unidentifiable Tablet
                ], [[TYPE, TABLET]], [
                    /(phone|mobile(?:[;\/]| safari)|pda(?=.+windows ce))/i // Unidentifiable Mobile
                ], [[TYPE, MOBILE]], [
                    /(android[-\w\. ]{0,9});.+buil/i // Generic Android Device
                ], [MODEL, [VENDOR, 'Generic']]
            ],
            engine: [
                [
                    /windows.+ edge\/([\w\.]+)/i // EdgeHTML
                ], [VERSION, [NAME, AdaptRadarUAVendor.EDGE + 'HTML']], [
                    /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i // Blink
                ], [VERSION, [NAME, 'Blink']], [
                    /(presto)\/([\w\.]+)/i,
                    /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,
                    /ekioh(flow)\/([\w\.]+)/i,
                    /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
                    /(icab)[\/ ]([23]\.[\d\.]+)/i // iCab
                ], [NAME, VERSION], [
                    /rv\:([\w\.]{1,9})\b.+(gecko)/i // Gecko
                ], [VERSION, NAME]
            ],
            os: [
                [
                    // Windows
                    /microsoft (windows) (vista|xp)/i // Windows (iTunes)
                ], [NAME, VERSION], [
                    /(windows) nt 6\.2; (arm)/i,
                    /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,
                    /(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i
                ], [NAME, [VERSION, AdaptRadarUAParser.strMapper, this.windowsVersionMap]], [
                    /(win(?=3|9|n)|win 9x )([nt\d\.]+)/i
                ], [[NAME, 'Windows'], [VERSION, AdaptRadarUAParser.strMapper, this.windowsVersionMap]], [
                    // iOS/macOS
                    /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
                    /cfnetwork\/.+darwin/i
                ], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [
                    /(mac os x) ?([\w\. ]*)/i,
                    /(macintosh|mac_powerpc\b)(?!.+haiku)/i // Mac OS
                ], [[NAME, 'Mac OS'], [VERSION, /_/g, '.']], [
                    // Mobile OSes
                    /droid ([\w\.]+)\b.+(android[- ]x86)/i // Android-x86
                ], [VERSION, NAME], [
                    /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
                    /(blackberry)\w*\/([\w\.]*)/i,
                    /(tizen|kaios)[\/ ]([\w\.]+)/i,
                    /\((series40);/i // Series 40
                ], [NAME, VERSION], [
                    /\(bb(10);/i // BlackBerry 10
                ], [VERSION, [NAME, AdaptRadarUAVendor.BLACKBERRY]], [
                    /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i // Symbian
                ], [VERSION, [NAME, 'Symbian']], [
                    /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i // Firefox OS
                ], [VERSION, [NAME, AdaptRadarUAVendor.FIREFOX + ' OS']], [
                    /web0s;.+rt(tv)/i,
                    /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i // WebOS
                ], [VERSION, [NAME, 'webOS']], [
                    // Google Chromecast
                    /crkey\/([\d\.]+)/i // Google Chromecast
                ], [VERSION, [NAME, AdaptRadarUAVendor.CHROME + 'cast']], [
                    /(cros) [\w]+ ([\w\.]+\w)/i // Chromium OS
                ], [[NAME, 'Chromium OS'], VERSION], [
                    // Console
                    /(nintendo|playstation) ([wids345portablevuch]+)/i,
                    /(xbox); +xbox ([^\);]+)/i,
                    // Other
                    /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
                    /(mint)[\/\(\) ]?(\w*)/i,
                    /(mageia|vectorlinux)[; ]/i,
                    /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
                    // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire
                    /(hurd|linux) ?([\w\.]*)/i,
                    /(gnu) ?([\w\.]*)/i,
                    /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
                    /(haiku) (\w+)/i // Haiku
                ], [NAME, VERSION], [
                    /(sunos) ?([\w\.\d]*)/i // Solaris
                ], [[NAME, 'Solaris'], VERSION], [
                    /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
                    /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
                    /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux)/i,
                    /(unix) ?([\w\.]*)/i // UNIX
                ], [NAME, VERSION]
            ]
        };
        this._ua = ((typeof window !== UNDEF_TYPE && window.navigator && window.navigator.userAgent) ? window.navigator.userAgent : EMPTY);
        this._rgxmap = this.regexes;
    }
    static lowerize(str) {
        return str.toLowerCase();
    }
    static has(str1, str2) {
        return typeof str1 === STR_TYPE ? AdaptRadarUAParser.lowerize(str2).indexOf(AdaptRadarUAParser.lowerize(str1)) !== -1 : false;
    }
    static majorize(version) {
        const versionType = typeof version;
        return versionType === STR_TYPE ? version.replace(/[^\d\.]/g, EMPTY).split('.')[0] : undefined;
    }
    static trim(str, len) {
        if (typeof (str) === STR_TYPE) {
            str = str.replace(/^\s\s*/, EMPTY).replace(/\s\s*$/, EMPTY);
            return typeof (len) === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static strMapper(str, map) {
        for (const i in map) {
            // check if current value is array
            if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
                for (let j = 0; j < map[i].length; j++) {
                    if (AdaptRadarUAParser.has(map[i][j], str)) {
                        return (i === UNKNOWN) ? undefined : i;
                    }
                }
            }
            else if (AdaptRadarUAParser.has(map[i], str)) {
                return (i === UNKNOWN) ? undefined : i;
            }
        }
        return str;
    }
    getBrowser() {
        const browser = {
            name: null,
            version: null,
            major: null
        };
        this._rgxMapper.call(browser, this._ua, this._rgxmap.browser);
        browser.major = AdaptRadarUAParser.majorize(browser.version);
        return browser;
    }
    ;
    getCPU() {
        const cpu = {
            architecture: null
        };
        this._rgxMapper.call(cpu, this._ua, this._rgxmap.cpu);
        return cpu;
    }
    ;
    getDevice() {
        const device = {
            vendor: null,
            model: null,
            type: null
        };
        this._rgxMapper.call(device, this._ua, this._rgxmap.device);
        return device;
    }
    ;
    getEngine() {
        const engine = {
            name: null,
            version: null
        };
        this._rgxMapper.call(engine, this._ua, this._rgxmap.engine);
        return engine;
    }
    ;
    getOS() {
        const os = {
            name: null,
            version: null
        };
        this._rgxMapper.call(os, this._ua, this._rgxmap.os);
        return os;
    }
    ;
    getResult() {
        return {
            ua: this.getUA(),
            browser: this.getBrowser(),
            engine: this.getEngine(),
            os: this.getOS(),
            device: this.getDevice(),
            cpu: this.getCPU()
        };
    }
    ;
    getUA() {
        return this._ua;
    }
    ;
    setUA(ua) {
        this._ua = (typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH) ? AdaptRadarUAParser.trim(ua, UA_MAX_LENGTH) : ua;
    }
    ;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _rgxMapper(ua, arrays) {
        let i = 0;
        let j;
        let k;
        let p;
        let q;
        let matches;
        let match;
        // loop through all regexes maps
        while (i < arrays.length && !matches) {
            const regex = arrays[i]; // even sequence (0,2,4,..)
            const props = arrays[i + 1]; // odd sequence (1,3,5,..)
            j = k = 0;
            // try matching uastring with regexes
            while (j < regex.length && !matches) {
                matches = regex[j++].exec(ua);
                if (matches) {
                    for (p = 0; p < props.length; p++) {
                        match = matches[++k];
                        q = props[p];
                        // check if given property is actually array
                        if (typeof q === OBJ_TYPE && q.length > 0) {
                            if (q.length == 2) {
                                if (typeof q[1] == FUNC_TYPE) {
                                    // assign modified match
                                    this[q[0]] = q[1].call(this, match);
                                }
                                else {
                                    // assign given value, ignore regex match
                                    this[q[0]] = q[1];
                                }
                            }
                            else if (q.length == 3) {
                                // check whether function or regex
                                if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
                                    // call function (usually string mapper)
                                    this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;
                                }
                                else {
                                    // sanitize match using given regex
                                    this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;
                                }
                            }
                            else if (q.length == 4) {
                                this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;
                            }
                        }
                        else {
                            this[q] = match ? match : undefined;
                        }
                    }
                }
            }
            i += 2;
        }
    }
}
AdaptRadarUAParser.ɵfac = function AdaptRadarUAParser_Factory(t) { return new (t || AdaptRadarUAParser)(); };
AdaptRadarUAParser.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptRadarUAParser, factory: AdaptRadarUAParser.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRadarUAParser, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();

const ADAPT_RADAR_MODULE_CONFIG_TOKEN = new InjectionToken('ADAPT_RADAR_MODULE_CONFIG');

/**
 * Service used to collect "global" data for analytics systems
 */
class AdaptRadarGlobal {
    constructor(_adaptRadarUAParser, _moduleConfig) {
        this._adaptRadarUAParser = _adaptRadarUAParser;
        this._moduleConfig = _moduleConfig;
    }
    getGlobalData() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8;
        const intl = new Intl.DateTimeFormat();
        const { languages, language } = window.navigator;
        const { browser, device, os } = this._adaptRadarUAParser.getResult();
        const computedStyle = getComputedStyle(document.documentElement);
        const hasAccessibilityCSS = computedStyle.getPropertyValue('--accessible-mode');
        const hasDarkModeCSS = computedStyle.getPropertyValue('--dark-mode');
        const hasCustomizedCSS = computedStyle.getPropertyValue('--color-warning');
        return {
            BrowserType: browser.name,
            BrowserVersion: browser.major,
            BrowserDetailedVersion: browser.version,
            DeviceType: device.type,
            DeviceVendor: device.vendor,
            DeviceModel: device.model,
            OperatingSystem: os.name,
            OperatingSystemVersion: os.version,
            ConnectionDownlink: window.navigator['connection'] ? (window.navigator['connection'].downlink || null) : null,
            ConnectionEffectiveType: window.navigator['connection'] ? (window.navigator['connection'].effectiveType || null) : null,
            LocalizationSettings: languages,
            CurrentLanguage: language,
            TimeZone: (_a = intl === null || intl === void 0 ? void 0 : intl.resolvedOptions()) === null || _a === void 0 ? void 0 : _a.timeZone,
            PageName: document.title,
            AccessibilityMode: hasAccessibilityCSS === 'true',
            DarkMode: hasDarkModeCSS === 'true',
            Customized: hasCustomizedCSS === 'true',
            AngularVersion: VERSION$1.full,
            ADAPTVersion: (_e = (_d = (_c = (_b = this._moduleConfig) === null || _b === void 0 ? void 0 : _b.versions) === null || _c === void 0 ? void 0 : _c.ADAPT_ANGULAR_VERSION) === null || _d === void 0 ? void 0 : _d.full) !== null && _e !== void 0 ? _e : null,
            TableVersion: (_j = (_h = (_g = (_f = this._moduleConfig) === null || _f === void 0 ? void 0 : _f.versions) === null || _g === void 0 ? void 0 : _g.ADAPT_TABLE_VERSION) === null || _h === void 0 ? void 0 : _h.full) !== null && _j !== void 0 ? _j : null,
            CSSVersion: (_o = (_m = (_l = (_k = this._moduleConfig) === null || _k === void 0 ? void 0 : _k.versions) === null || _l === void 0 ? void 0 : _l.ADAPT_CSS_VERSION) === null || _m === void 0 ? void 0 : _m.full) !== null && _o !== void 0 ? _o : null,
            GanttVersion: (_s = (_r = (_q = (_p = this._moduleConfig) === null || _p === void 0 ? void 0 : _p.versions) === null || _q === void 0 ? void 0 : _q.ADAPT_GANTT_VERSION) === null || _r === void 0 ? void 0 : _r.full) !== null && _s !== void 0 ? _s : null,
            ObsoleteVersion: (_w = (_v = (_u = (_t = this._moduleConfig) === null || _t === void 0 ? void 0 : _t.versions) === null || _u === void 0 ? void 0 : _u.ADAPT_OBSOLETE_VERSION) === null || _v === void 0 ? void 0 : _v.full) !== null && _w !== void 0 ? _w : null,
            RTEVersion: (_0 = (_z = (_y = (_x = this._moduleConfig) === null || _x === void 0 ? void 0 : _x.versions) === null || _y === void 0 ? void 0 : _y.ADAPT_RTE_VERSION) === null || _z === void 0 ? void 0 : _z.full) !== null && _0 !== void 0 ? _0 : null,
            ChartsVersion: (_4 = (_3 = (_2 = (_1 = this._moduleConfig) === null || _1 === void 0 ? void 0 : _1.versions) === null || _2 === void 0 ? void 0 : _2.ADAPT_CHARTS_VERSION) === null || _3 === void 0 ? void 0 : _3.full) !== null && _4 !== void 0 ? _4 : null,
            RadarVersion: (_8 = (_7 = (_6 = (_5 = this._moduleConfig) === null || _5 === void 0 ? void 0 : _5.versions) === null || _6 === void 0 ? void 0 : _6.ADAPT_RADAR_VERSION) === null || _7 === void 0 ? void 0 : _7.full) !== null && _8 !== void 0 ? _8 : null,
        };
    }
}
AdaptRadarGlobal.ɵfac = function AdaptRadarGlobal_Factory(t) { return new (t || AdaptRadarGlobal)(i0.ɵɵinject(AdaptRadarUAParser), i0.ɵɵinject(ADAPT_RADAR_MODULE_CONFIG_TOKEN, 8)); };
AdaptRadarGlobal.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptRadarGlobal, factory: AdaptRadarGlobal.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRadarGlobal, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: AdaptRadarUAParser }, { type: undefined, decorators: [{
                type: Inject,
                args: [ADAPT_RADAR_MODULE_CONFIG_TOKEN]
            }, {
                type: Optional
            }] }]; }, null); })();

/**
 * Service used to track url changes
 */
class AdaptRadarURLChangeTracker {
    constructor(_ngZone) {
        this._ngZone = _ngZone;
        this._previousLocation = Object.assign({}, location);
        this._startTime = performance.now();
        this._urlChangeCallbackBind = this._urlChangeCallback.bind(this);
    }
    urlChange() {
        if (this._urlChange$) {
            return this._urlChange$;
        }
        else {
            this._urlChange$ = new Subject();
        }
        this._ngZone.runOutsideAngular(() => {
            document.addEventListener('click', this._urlChangeCallbackBind, true);
        });
        return this._urlChange$;
    }
    unsubscribeFromURLChange() {
        document.removeEventListener('click', this._urlChangeCallbackBind);
        this._urlChange$ = null;
    }
    ngOnDestroy() {
        this.unsubscribeFromURLChange();
    }
    _msToTime(duration) {
        const milliseconds = Math.floor((duration % 1000) / 100);
        const seconds = Math.floor((duration / 1000) % 60);
        const minutes = Math.floor((duration / (1000 * 60)) % 60);
        const hours = Math.floor((duration / (1000 * 60 * 60)) % 24);
        return {
            timeInSeconds: seconds,
            fullTime: `${(hours < 10) ? '0' + hours : hours}:${(minutes < 10) ? '0' + minutes : minutes}:${(seconds < 10) ? '0' + seconds : seconds}.${milliseconds}`,
        };
    }
    _urlChangeCallback() {
        if (this._previousLocation.href !== location.href) {
            this._endTime = performance.now();
            const locationCopy = Object.assign({}, location);
            const timeOnPage = this._endTime - this._startTime;
            const msToTime = this._msToTime(timeOnPage);
            this._urlChange$.next({
                PreviousLocation: Object.assign({}, this._previousLocation),
                CurrentLocation: locationCopy,
                PageTitle: document.title,
                TimeOnPageInMilliseconds: timeOnPage,
                TimeOnPageInSeconds: msToTime === null || msToTime === void 0 ? void 0 : msToTime.timeInSeconds,
                TimeOnPage: msToTime === null || msToTime === void 0 ? void 0 : msToTime.fullTime
            });
            this._previousLocation = locationCopy;
            this._startTime = performance.now();
        }
    }
}
AdaptRadarURLChangeTracker.ɵfac = function AdaptRadarURLChangeTracker_Factory(t) { return new (t || AdaptRadarURLChangeTracker)(i0.ɵɵinject(i0.NgZone)); };
AdaptRadarURLChangeTracker.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptRadarURLChangeTracker, factory: AdaptRadarURLChangeTracker.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRadarURLChangeTracker, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: i0.NgZone }]; }, null); })();

/* Gainsight */
const gainsightInitScript = (id, customSourceScript) => `
  (function(n,t,a,e){var i="aptrinsic";n[i]=n[i]||function(){
   (n[i].q=n[i].q||[]).push(arguments)},n[i].p=e;
   var r=t.createElement("script");r.async=!0,r.src=a+"?a="+e;
   var c=t.getElementsByTagName("script")[0];c.parentNode.insertBefore(r,c)
  })(window,document, "${customSourceScript || gainsightSourceScript()}", "${id}");
`;
// Use own BMC cdn to provide Gainsight script to avoid problems with security like SRI
const gainsightSourceScript = () => 'https://documents.bmc.com/products/docs/gainsight/main/aptrinsic.js';
// export const gainsightSourceScript = (): string => 'https://web-sdk.aptrinsic.com/api/aptrinsic.js';
/* Google Site Tag */
const googleGlobalSiteTagInitScript = (id) => `
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', '${id}');
`;
const googleGlobalSiteTagSourceScript = (id) => `https://www.googletagmanager.com/gtag/js?id=${id}`;
/* Google Tag Manager */
const googleTagManagerInitScript = (id) => `
  (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':new Date().getTime(),event:'gtm.js'});
  var f=d.getElementsByTagName(s)[0],j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;
  j.src='https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);})(window,document,'script','dataLayer','${id}');
`;

/**
 * The list of api methods that are used by the "aptrinsic" JavaScript call are as follows with links to customer facing documentation where available:
 *
 * 'track' - https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Use_Custom_Event_API
 * 'identify' - https://support.gainsight.com/PX/API_for_Developers/01About/Track_your_Users_and_Accounts#The_Identify_Call
 * 'get'
 * 'users'
 * 'set' - https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Use_Global_Context_API
 * 'initWithExternalState'
 * 'carousel'
 * 'config' - https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Use_Config_API
 * 'login'
 * 'lead' - https://support.gainsight.com/PX/Install_PX/Track_Users_on_Your_Corporate_Site_Using_PX#Customizing_Lead_Tracking
 * 'account'
 * 'checklog'
 * 'event'
 * 'setOnce' - https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Use_Global_Context_API#Global_Context
 * 'remove' - https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Use_Global_Context_API#Remove
 * 'pageView' - https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Using_The_Page_View_API
 * 'send' - https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Gainsight_PX_User_Feedback_API
 * 'bot' - https://support.gainsight.com/PX/Integrations/Knowledge_Center_Integrations/Zendesk_Knowledge_Base_Integration#Add_Label_Filters_to_Zendesk_Knowledge_Base
 * 'kcb' - https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Work_with_Knowledge_Center_Bot_API#Knowledge_Center_Bot_API_Calls
 * 'reset' - https://support.gainsight.com/PX/API_for_Developers/01About/Work_with_Gainsight_PX_Web_SDK#Reset.2FLogout
 * 'addListener' - https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Javascript_Event_Listener_API
 */
var AdaptRadarGainsightEventName;
(function (AdaptRadarGainsightEventName) {
    AdaptRadarGainsightEventName["Track"] = "track";
    AdaptRadarGainsightEventName["Identify"] = "identify";
    AdaptRadarGainsightEventName["Get"] = "get";
    AdaptRadarGainsightEventName["Users"] = "users";
    AdaptRadarGainsightEventName["Set"] = "set";
    AdaptRadarGainsightEventName["SetOnce"] = "setOnce";
    AdaptRadarGainsightEventName["InitWithExternalState"] = "initWithExternalState";
    AdaptRadarGainsightEventName["Carousel"] = "carousel";
    AdaptRadarGainsightEventName["Config"] = "config";
    AdaptRadarGainsightEventName["Login"] = "login";
    AdaptRadarGainsightEventName["Lead"] = "lead";
    AdaptRadarGainsightEventName["Account"] = "account";
    AdaptRadarGainsightEventName["Checklog"] = "checklog";
    AdaptRadarGainsightEventName["Event"] = "event";
    AdaptRadarGainsightEventName["Remove"] = "remove";
    AdaptRadarGainsightEventName["PageView"] = "pageView";
    AdaptRadarGainsightEventName["Send"] = "send";
    AdaptRadarGainsightEventName["Bot"] = "bot";
    AdaptRadarGainsightEventName["Kcb"] = "kcb";
    AdaptRadarGainsightEventName["Reset"] = "reset";
    AdaptRadarGainsightEventName["AddListener"] = "addListener";
})(AdaptRadarGainsightEventName || (AdaptRadarGainsightEventName = {}));
var AdaptRadarGainsightIdentifyActionName;
(function (AdaptRadarGainsightIdentifyActionName) {
    AdaptRadarGainsightIdentifyActionName["UserIdentify"] = "userIdentify";
})(AdaptRadarGainsightIdentifyActionName || (AdaptRadarGainsightIdentifyActionName = {}));
var AdaptRadarGainsightConfigName;
(function (AdaptRadarGainsightConfigName) {
    AdaptRadarGainsightConfigName["EnableTag"] = "enableTag";
})(AdaptRadarGainsightConfigName || (AdaptRadarGainsightConfigName = {}));

/* eslint-disable-next-line @typescript-eslint/no-explicit-any */
function adaptLog(...data) {
    if (isDevMode()) {
        // eslint-disable-next-line no-console
        console.log(...data);
    }
}
/* eslint-disable-next-line @typescript-eslint/no-explicit-any */
function adaptWarn(...data) {
    if (isDevMode()) {
        // eslint-disable-next-line no-console
        console.warn(...data);
    }
}
/* eslint-disable-next-line @typescript-eslint/no-explicit-any */
function adaptError(...data) {
    if (isDevMode()) {
        // eslint-disable-next-line no-console
        console.error(...data);
    }
}

var AdaptRadarProductAreaName;
(function (AdaptRadarProductAreaName) {
    AdaptRadarProductAreaName["ITOM"] = "ITOM";
    AdaptRadarProductAreaName["Converge"] = "Converge";
    AdaptRadarProductAreaName["EndUser"] = "End User";
    AdaptRadarProductAreaName["ServiceManagement"] = "Service Management";
    AdaptRadarProductAreaName["Platform"] = "Platform";
    AdaptRadarProductAreaName["ADAPT"] = "ADAPT";
    AdaptRadarProductAreaName["IZOT"] = "IZOT";
})(AdaptRadarProductAreaName || (AdaptRadarProductAreaName = {}));
var AdaptRadarSubProductNameLevel1;
(function (AdaptRadarSubProductNameLevel1) {
    // Platform
    AdaptRadarSubProductNameLevel1["Launcher"] = "Launcher";
    AdaptRadarSubProductNameLevel1["Manage"] = "Manage";
    AdaptRadarSubProductNameLevel1["Configure"] = "Configure";
    AdaptRadarSubProductNameLevel1["HelixSSOConfiguration"] = "Helix SSO Configuration";
    AdaptRadarSubProductNameLevel1["MultiCloudBroker"] = "Multi-Cloud Broker";
    AdaptRadarSubProductNameLevel1["Integrate"] = "Integrate";
    AdaptRadarSubProductNameLevel1["Design"] = "Design";
    // Service Management
    AdaptRadarSubProductNameLevel1["Telco"] = "Telco";
    AdaptRadarSubProductNameLevel1["HR"] = "HR";
    AdaptRadarSubProductNameLevel1["Finance"] = "Finance";
    AdaptRadarSubProductNameLevel1["Roles"] = "Roles";
    AdaptRadarSubProductNameLevel1["Notifications"] = "Notifications";
    AdaptRadarSubProductNameLevel1["Locations"] = "Locations";
    AdaptRadarSubProductNameLevel1["Reports"] = "Reports";
    AdaptRadarSubProductNameLevel1["Catalog"] = "Catalog";
    AdaptRadarSubProductNameLevel1["Administer"] = "Administer";
    AdaptRadarSubProductNameLevel1["ITSMInsights"] = "ITSM Insights";
    AdaptRadarSubProductNameLevel1["ServiceManagementManage"] = "Manage";
    // End Users
    AdaptRadarSubProductNameLevel1["Chatbot"] = "Chatbot";
    AdaptRadarSubProductNameLevel1["VirtualAssistant"] = "Virtual Assistant";
    AdaptRadarSubProductNameLevel1["DWPEndUser"] = "DWP End User";
    AdaptRadarSubProductNameLevel1["BWFPortal"] = "BWF Portal";
    // Converge
    AdaptRadarSubProductNameLevel1["SharedTicketConsole"] = "Shared Ticket Console";
    AdaptRadarSubProductNameLevel1["KnowledgeManagement"] = "Knowledge Management";
    AdaptRadarSubProductNameLevel1["TimelineCalendar"] = "Timeline Calendar";
    AdaptRadarSubProductNameLevel1["CMDB"] = "CMDB";
    // ITOM
    AdaptRadarSubProductNameLevel1["View"] = "View";
    AdaptRadarSubProductNameLevel1["Model"] = "Model";
    AdaptRadarSubProductNameLevel1["ITOMManage"] = "Manage";
    AdaptRadarSubProductNameLevel1["Workspace"] = "Workspace";
    AdaptRadarSubProductNameLevel1["ITOMAdminister"] = "Administer";
    AdaptRadarSubProductNameLevel1["Logs"] = "Logs";
    AdaptRadarSubProductNameLevel1["ITOMConfigure"] = "Configure";
    AdaptRadarSubProductNameLevel1["Dashboard"] = "Dashboard";
    AdaptRadarSubProductNameLevel1["ITOM"] = "ITOM";
    AdaptRadarSubProductNameLevel1["Authorize"] = "Authorize";
    AdaptRadarSubProductNameLevel1["Monitor"] = "Monitor";
    AdaptRadarSubProductNameLevel1["Policies"] = "Policies";
    // ADAPT
    AdaptRadarSubProductNameLevel1["Documentation"] = "Documentation";
    AdaptRadarSubProductNameLevel1["IconFinder"] = "Icon Finder";
    AdaptRadarSubProductNameLevel1["ADAPTTools"] = "ADAPT Tools";
    // IZOT
    AdaptRadarSubProductNameLevel1["AMIOps"] = "AMI Ops";
    AdaptRadarSubProductNameLevel1["Compuware"] = "Compuware";
    AdaptRadarSubProductNameLevel1["DB2"] = "DB2";
})(AdaptRadarSubProductNameLevel1 || (AdaptRadarSubProductNameLevel1 = {}));
var AdaptRadarSubProductNameLevel2;
(function (AdaptRadarSubProductNameLevel2) {
    // Platform -> Manage
    AdaptRadarSubProductNameLevel2["Identities"] = "Identities";
    AdaptRadarSubProductNameLevel2["Roles"] = "Roles";
    // Platform -> Configure
    AdaptRadarSubProductNameLevel2["Tenants"] = "Tenants";
    AdaptRadarSubProductNameLevel2["Notifications"] = "Notifications";
    AdaptRadarSubProductNameLevel2["InnovationSuiteConfigurations"] = "Innovation Suite Configurations";
    AdaptRadarSubProductNameLevel2["SharedConfigurations"] = "Shared Configurations";
    // Platform -> Design
    AdaptRadarSubProductNameLevel2["DataModel"] = "Data Model";
    AdaptRadarSubProductNameLevel2["UI"] = "UI";
    AdaptRadarSubProductNameLevel2["RulesDesigner"] = "Rules Designer";
    AdaptRadarSubProductNameLevel2["ProcessDesigner"] = "Process Designer";
    // Service Management -> Catalog
    AdaptRadarSubProductNameLevel2["Services"] = "Services";
    // Service Management -> Administer
    AdaptRadarSubProductNameLevel2["Studio"] = "Studio";
    AdaptRadarSubProductNameLevel2["Features"] = "Features";
    AdaptRadarSubProductNameLevel2["Configure"] = "Configure";
    // Service Management -> Manage
    AdaptRadarSubProductNameLevel2["Incidents"] = "Incidents";
    AdaptRadarSubProductNameLevel2["Change"] = "Change";
    AdaptRadarSubProductNameLevel2["Problems"] = "Problems";
    AdaptRadarSubProductNameLevel2["Assets"] = "Assets";
    // End Users -> Virtual Assistant
    AdaptRadarSubProductNameLevel2["LiveChat"] = "Live Chat";
    // End Users -> BWF Portal
    AdaptRadarSubProductNameLevel2["Telco"] = "Telco";
    AdaptRadarSubProductNameLevel2["HR"] = "HR";
    AdaptRadarSubProductNameLevel2["Finance"] = "Finance";
    // Converge -> Shared Ticket Console
    AdaptRadarSubProductNameLevel2["SharedTicketConsoleITSM"] = "ITSM";
    AdaptRadarSubProductNameLevel2["BWF"] = "BWF";
    // Converge -> Knowledge Management
    AdaptRadarSubProductNameLevel2["HelixKnowledgeManagement"] = "Helix Knowledge Management";
    AdaptRadarSubProductNameLevel2["RemedyKnowledgeManagement"] = "Remedy Knowledge Management";
    AdaptRadarSubProductNameLevel2["BusinessWorkflowsKnowledgeManagement"] = "Business Workflows Knowledge Management";
    // Converge -> Timeline Calendar
    AdaptRadarSubProductNameLevel2["TimelineCalendarITSM"] = "ITSM";
    // Converge -> CMDB
    AdaptRadarSubProductNameLevel2["CMDB_ITSM"] = "ITSM";
    AdaptRadarSubProductNameLevel2["Discovery"] = "Discovery";
    AdaptRadarSubProductNameLevel2["OperationsManagement"] = "Operations Management";
    // ITOM	-> Manage
    AdaptRadarSubProductNameLevel2["EnrichmentSources"] = "Enrichment Sources";
    AdaptRadarSubProductNameLevel2["EnrichmentPolicies"] = "Enrichment Policies";
    AdaptRadarSubProductNameLevel2["AlertPolicies"] = "Alert Policies";
    AdaptRadarSubProductNameLevel2["DataMasking"] = "Data Masking";
    AdaptRadarSubProductNameLevel2["Entities"] = "Entities";
    AdaptRadarSubProductNameLevel2["Blueprints"] = "Blueprints";
    AdaptRadarSubProductNameLevel2["Situations"] = "Situations";
    AdaptRadarSubProductNameLevel2["Policies"] = "Policies";
    AdaptRadarSubProductNameLevel2["Connectors"] = "Connectors";
    // ITOM	-> Logs
    AdaptRadarSubProductNameLevel2["Explore"] = "Explore";
    AdaptRadarSubProductNameLevel2["Collect"] = "Collect";
    AdaptRadarSubProductNameLevel2["Archive"] = "Archive";
    // ITOM	-> View
    AdaptRadarSubProductNameLevel2["Requests"] = "Requests";
    AdaptRadarSubProductNameLevel2["Reports"] = "Reports";
    // ITOM	-> Policies
    AdaptRadarSubProductNameLevel2["Monitoring"] = "Monitoring";
    AdaptRadarSubProductNameLevel2["Blackout"] = "Blackout";
    AdaptRadarSubProductNameLevel2["Alarm"] = "Alarm";
    AdaptRadarSubProductNameLevel2["Even"] = "Even";
    // ADAPT -> ADAPT Tools
    AdaptRadarSubProductNameLevel2["SprintPlanner"] = "Sprint Planner";
})(AdaptRadarSubProductNameLevel2 || (AdaptRadarSubProductNameLevel2 = {}));
var AdaptRadarSubProductNameLevel3;
(function (AdaptRadarSubProductNameLevel3) {
    // Platform -> Configure -> Innovation Suite Configurations
    AdaptRadarSubProductNameLevel3["DataManagement"] = "Data Management";
    AdaptRadarSubProductNameLevel3["Approval"] = "Approval";
    AdaptRadarSubProductNameLevel3["Assignment"] = "Assignment";
    // Platform -> Configure -> Shared Configurations
    AdaptRadarSubProductNameLevel3["ApprovalCentral"] = "Approval Central";
    AdaptRadarSubProductNameLevel3["Chatbot"] = "Chatbot";
    AdaptRadarSubProductNameLevel3["ChatOps"] = "Chat Ops";
    AdaptRadarSubProductNameLevel3["Foundation"] = "Foundation";
    AdaptRadarSubProductNameLevel3["LiveChatAgentConsole"] = "Live Chat Agent Console";
    // Converge -> Shared Ticket Console -> BWF
    AdaptRadarSubProductNameLevel3["Telco"] = "Telco";
    AdaptRadarSubProductNameLevel3["HR"] = "HR";
    AdaptRadarSubProductNameLevel3["Finance"] = "Finance";
})(AdaptRadarSubProductNameLevel3 || (AdaptRadarSubProductNameLevel3 = {}));
var AdaptRadarHostingType;
(function (AdaptRadarHostingType) {
    AdaptRadarHostingType["OnPrem"] = "OnPrem";
    AdaptRadarHostingType["SaaS"] = "SaaS";
})(AdaptRadarHostingType || (AdaptRadarHostingType = {}));
var AdaptRadarCustomerEnvironment;
(function (AdaptRadarCustomerEnvironment) {
    AdaptRadarCustomerEnvironment["Integration"] = "Integration";
    AdaptRadarCustomerEnvironment["QA"] = "QA";
    AdaptRadarCustomerEnvironment["Stage"] = "Stage";
    AdaptRadarCustomerEnvironment["Production"] = "Production";
})(AdaptRadarCustomerEnvironment || (AdaptRadarCustomerEnvironment = {}));
/**
 * Used to flatten "productInfo" property for better readability when data sent as a part of analytics event data
 *
 * @param productInfo non flatten version of "productInfo"
 */
function flattenProductInfo(productInfo) {
    if (isNil(productInfo)) {
        return null;
    }
    const productArea = productInfo.productArea;
    const subProductLevel1 = productInfo.subProductLevel1;
    const subProductLevel2 = productInfo.subProductLevel2;
    const subProductLevel3 = productInfo.subProductLevel3;
    return {
        productAreaName: productArea.name,
        productAreaVersion: productArea.version instanceof Version
            ? productArea.version.full
            : productArea.version,
        productAreaHosting: productArea.hosting,
        productAreaCustomerEnvironment: productArea.customerEnvironment,
        subProductLevel1Name: subProductLevel1 === null || subProductLevel1 === void 0 ? void 0 : subProductLevel1.name,
        subProductLevel1Version: (subProductLevel1 === null || subProductLevel1 === void 0 ? void 0 : subProductLevel1.version) instanceof Version
            ? subProductLevel1 === null || subProductLevel1 === void 0 ? void 0 : subProductLevel1.version.full
            : subProductLevel1 === null || subProductLevel1 === void 0 ? void 0 : subProductLevel1.version,
        subProductLevel1Hosting: subProductLevel1 === null || subProductLevel1 === void 0 ? void 0 : subProductLevel1.hosting,
        subProductLevel1CustomerEnvironment: productArea.customerEnvironment,
        subProductLevel2Name: subProductLevel2 === null || subProductLevel2 === void 0 ? void 0 : subProductLevel2.name,
        subProductLevel2Version: (subProductLevel2 === null || subProductLevel2 === void 0 ? void 0 : subProductLevel2.version) instanceof Version
            ? subProductLevel2 === null || subProductLevel2 === void 0 ? void 0 : subProductLevel2.version.full
            : subProductLevel2 === null || subProductLevel2 === void 0 ? void 0 : subProductLevel2.version,
        subProductLevel2Hosting: subProductLevel2 === null || subProductLevel2 === void 0 ? void 0 : subProductLevel2.hosting,
        subProductLevel2CustomerEnvironment: productArea.customerEnvironment,
        subProductLevel3Name: subProductLevel3 === null || subProductLevel3 === void 0 ? void 0 : subProductLevel3.name,
        subProductLevel3Version: (subProductLevel3 === null || subProductLevel3 === void 0 ? void 0 : subProductLevel3.version) instanceof Version
            ? subProductLevel3 === null || subProductLevel3 === void 0 ? void 0 : subProductLevel3.version.full
            : subProductLevel3 === null || subProductLevel3 === void 0 ? void 0 : subProductLevel3.version,
        subProductLevel3Hosting: subProductLevel3 === null || subProductLevel3 === void 0 ? void 0 : subProductLevel3.hosting,
        subProductLevel3CustomerEnvironment: productArea.customerEnvironment,
    };
}

/**
 * Gainsight provider
 * API docs - https://support.gainsight.com/PX/API_for_Developers
 */
class AdaptRadarGainsightProvider {
    constructor(_adaptRadarGlobal, _adaptRadarURLChangeTracker) {
        this._adaptRadarGlobal = _adaptRadarGlobal;
        this._adaptRadarURLChangeTracker = _adaptRadarURLChangeTracker;
        this._isIdentifyEventSent = false;
        this._destroyed$ = new ReplaySubject(1);
        this._initSource = new BehaviorSubject(false);
        // Observable that can be used to check Gainsight script initialization state
        this.init$ = this._initSource.asObservable();
    }
    static getInitScript(id, customInitScript, customSourceScript) {
        return customInitScript || gainsightInitScript(id, customSourceScript);
    }
    get initProcess$() {
        return this.init$.pipe(take(1), takeUntil(this._destroyed$));
    }
    ngOnDestroy() {
        this._adaptRadarURLChangeTracker.unsubscribeFromURLChange();
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
    /**
     * The method is used to start collecting the data for the current provider
     * It allows controlling the data collecting process on the customer side.
     * For instance to turn on data collecting in run time when it needed based on user preferences or project business logic
     *
     * @param providerConfig - config for provider that need to be initialized
     * @param radarConfig - main RADAR config
     */
    startDataCollecting(providerConfig, radarConfig) {
        this._providerConfig = providerConfig;
        this._radarConfig = radarConfig;
        this.initProcess$
            .subscribe(isInitialized => {
            if (isInitialized) {
                this.toggleUserTracking(true);
                return;
            }
            if (this._providerConfig.initScript !== false) {
                injectInitScript(AdaptRadarGainsightProvider.getInitScript(this._providerConfig.id, this._providerConfig.initScript, this._providerConfig.sourceScript));
            }
            // Check if Gainsight script initialized
            let counter = 0;
            const interval = setInterval(() => {
                // timeout is 5min
                // 300 * 1000 = 300000ms = 300sec = 5min
                if (counter < 1000) {
                    if (aptrinsic && aptrinsic['init']) {
                        clearInterval(interval);
                        this._initSource.next(true);
                        this.sendGlobalData(AdaptRadarCustomEventName.AdaptGlobalData, this._adaptRadarGlobal.getGlobalData());
                        this._subscribeOnURLChange();
                    }
                    counter++;
                }
                else {
                    clearInterval(interval);
                    adaptError('ADAPT RADAR: Gainsight provider initialization timeout error');
                }
            }, 300);
        });
    }
    /**
     * The method is used to stop collecting the data for the current provider
     * It allows controlling the data collecting process on the customer side.
     * For instance to turn off data collecting in run time when it needed based on user preferences or project business logic
     */
    stopDataCollecting() {
        this.initProcess$.subscribe(isInitialized => {
            if (isInitialized) {
                this.toggleUserTracking(false);
            }
        });
    }
    /**
     * Method is used to send 'identify' event for correct work of 'Gainsight' provider
     * The "identify" call should be made during the authorization/login area of your web application
     * More information can be found here - https://support.gainsight.com/PX/API_for_Developers/01About/Track_your_Users_and_Accounts
     *
     * @param userData - list of attributes that will be logged in Gainsight analytics system.
     * `id` is required for logged-in user. By default, `id` is - `bmc-not-authorized-user`
     * @param accountData - list of attributes that will be logged in Gainsight analytics system.
     * `id` is required for logged-in user. There is no default value for account id so pay attention to correctly set it if needed
     *
     * @example
     * sendIdentifyEvent({id: "user-id"}, {id: "account-id"});
     * converted to ->
     * aptrinsic('identify', {"id": "user-id"}, {"id": "account-id"});
     */
    sendIdentifyEvent(userData, accountData) {
        this.initProcess$.subscribe(isInitialized => {
            if (isInitialized) {
                aptrinsic(AdaptRadarGainsightEventName.Identify, Object.assign({ 'id': (userData === null || userData === void 0 ? void 0 : userData.id) ? userData.id : AdaptRadarGainsightProvider.notAuthorizedUserId }, userData), accountData);
                this._isIdentifyEventSent = true;
            }
        });
    }
    /**
     * Method is used to send custom events into Gainsight analytics system.
     *
     * @param customEventName - name of the event that will be logged into Gainsight analytics system
     * @param customEventData - custom data that need to be collect and associate with `customEventName`
     *
     * @example
     * sendCustomEvent(AdaptRadarCustomEventName.PagePath, {url: "some/url/path"})
     * converted to ->
     * aptrinsic('track', 'page_path', {"url": "some/url/path"})
     */
    sendCustomEvent(customEventName, customEventData) {
        this.initProcess$.subscribe(isInitialized => {
            if (isInitialized) {
                // Try to send identify event based on 'oneTimeActions' property from 'providerConfig'
                // This can be useful if customer don't want to send gainsight event manually, so it will be done automatically with first customer event
                if (!this._isIdentifyEventSent) {
                    this._processIdentifyAction();
                }
                aptrinsic(AdaptRadarGainsightEventName.Track, customEventName, customEventData);
            }
        });
    }
    /**
     * Method is used to send global data(browser version, os version, localization settings, etc.)
     * Check if data was sent for current session and avoid double sending
     *
     * @param customEventName - name of the event that will be logged into Gainsight analytics system
     * @param customEventData - custom data that need to be collect and associate with `customEventName`
     */
    sendGlobalData(customEventName, customEventData) {
        const isGlobalDataSent = sessionStorage.getItem(AdaptRadarStorageKey.GainsightGlobalDataSent);
        this.initProcess$.subscribe(isInitialized => {
            if (isInitialized && isGlobalDataSent !== 'true') {
                this.sendCustomEvent(customEventName, customEventData);
                sessionStorage.setItem(AdaptRadarStorageKey.GainsightGlobalDataSent, 'true');
            }
        });
    }
    /**
     * Method is used to set "global context"
     *
     * More info can be found here - https://support.gainsight.com/PX/Engagements/02Engagement_Configuration/Use_Global_Context
     *
     * @param contextData - custom data that need to be collect and associate with "globalContext".
     * Global context data will be automatically extended with "AdaptRadarProductInfo" passed as "productInfo" property on "AdaptRadarConfig";
     *
     * @param once - flag that used to send "SetOnce" instead of "Set" for a "globalContext"
     *
     * @example
     * setGlobalContext({'projectId' : 67890})
     * converted to ->
     * aptrinsic('set', 'globalContext', {
     *   'projectId' : 67890,
     *   'productAreaName': 'Discovery',
     *   'productAreaVersion': '11.22.33',
     *   'mainProductHostingType': 'SaaS'
     * });
     *
     * setGlobalContext({'projectId' : 45673}, true)
     * converted to ->
     * aptrinsic('setOnce', 'globalContext', {
     *   'projectId' : 45673,
     *   'productAreaName': 'Discovery',
     *   'productAreaVersion': '11.22.33',
     *   'productAreaHosting': 'SaaS'
     * });
     */
    setGlobalContext(contextData, once = false) {
        this.initProcess$.subscribe(isInitialized => {
            if (isInitialized) {
                const eventName = once ? AdaptRadarGainsightEventName.SetOnce : AdaptRadarGainsightEventName.Set;
                const productInfoFlat = flattenProductInfo(this._radarConfig.productInfo);
                const contextDataExtended = !isNull(productInfoFlat) ? Object.assign(Object.assign({}, contextData), productInfoFlat) : contextData;
                aptrinsic(eventName, AdaptRadarCustomEventName.GlobalContext, contextDataExtended);
            }
        });
    }
    /**
     * Method is used to remove "global context"
     *
     * More info can be found here - https://support.gainsight.com/PX/Engagements/02Engagement_Configuration/Use_Global_Context
     *
     * @param dataToRemove - array of string keys to remove
     *
     * @example
     * removeGlobalContext(["projectId"])
     * converted to ->
     * aptrinsic('remove', 'globalContext', ["projectId"])
     */
    removeGlobalContext(dataToRemove) {
        this.initProcess$.subscribe(isInitialized => {
            if (isInitialized) {
                aptrinsic(AdaptRadarGainsightEventName.Remove, AdaptRadarCustomEventName.GlobalContext, dataToRemove);
            }
        });
    }
    /**
     * Method is used to send information when URL changed
     *
     * @param customEventName - name of the event that will be logged into Gainsight analytics system
     * @param customEventData - custom data that need to be collect and associate with `customEventName`
     */
    sendURLChangeEvent(customEventName, customEventData) {
        this.sendCustomEvent(customEventName, customEventData);
    }
    /**
     * Opt-Out User Tracking
     * Use Config API to opt-out from tracking the current user.
     * This API allows the admin to easily make the call for any users for whom they do not want cookies stored or
     * network calls made back to PX, essentially never hitting the PX Server.
     * The selected users will not view any active engagements or Knowledge Center Bot.
     *
     * Gainsight docs: https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Use_Config_API
     *
     * @param isEnabled - tracking state (true for Out-In, false for Opt-Out)
     */
    toggleUserTracking(isEnabled) {
        aptrinsic(AdaptRadarGainsightEventName.Config, AdaptRadarGainsightConfigName.EnableTag, isEnabled);
        this._initSource.next(isEnabled);
    }
    _subscribeOnURLChange() {
        this._adaptRadarURLChangeTracker.unsubscribeFromURLChange();
        this._adaptRadarURLChangeTracker.urlChange()
            .pipe(takeUntil(this._destroyed$))
            .subscribe(urlChangeData => {
            this.sendURLChangeEvent(AdaptRadarCustomEventName.AdaptURLChanged, {
                PageTitle: urlChangeData.PageTitle,
                TimeOnPageInMilliseconds: urlChangeData.TimeOnPageInMilliseconds,
                TimeOnPageInSeconds: urlChangeData.TimeOnPageInSeconds,
                TimeOnPage: urlChangeData.TimeOnPage
            });
        });
    }
    _processIdentifyAction() {
        var _a;
        if ((_a = this._providerConfig.oneTimeActions) === null || _a === void 0 ? void 0 : _a.length) {
            const userInfoAction = this._providerConfig.oneTimeActions.find(action => action.name === AdaptRadarGainsightIdentifyActionName.UserIdentify);
            const userData = userInfoAction === null || userInfoAction === void 0 ? void 0 : userInfoAction.data;
            if (!isNil(userData)) {
                this.sendIdentifyEvent(userData.userData, userData.accountData);
            }
        }
    }
}
AdaptRadarGainsightProvider.notAuthorizedUserId = 'bmc-not-authorized-user';
AdaptRadarGainsightProvider.ɵfac = function AdaptRadarGainsightProvider_Factory(t) { return new (t || AdaptRadarGainsightProvider)(i0.ɵɵinject(AdaptRadarGlobal), i0.ɵɵinject(AdaptRadarURLChangeTracker)); };
AdaptRadarGainsightProvider.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptRadarGainsightProvider, factory: AdaptRadarGainsightProvider.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRadarGainsightProvider, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: AdaptRadarGlobal }, { type: AdaptRadarURLChangeTracker }]; }, null); })();

var AdaptRadarGoogleGlobalSiteTagEventNameEventName;
(function (AdaptRadarGoogleGlobalSiteTagEventNameEventName) {
    AdaptRadarGoogleGlobalSiteTagEventNameEventName["Config"] = "config";
    AdaptRadarGoogleGlobalSiteTagEventNameEventName["Event"] = "event";
})(AdaptRadarGoogleGlobalSiteTagEventNameEventName || (AdaptRadarGoogleGlobalSiteTagEventNameEventName = {}));

class AdaptRadarGoogleGlobalSiteTagProvider {
    constructor() {
        this._destroyed$ = new ReplaySubject(1);
        this._initSource = new BehaviorSubject(false);
        // Observable that can be used to check Gainsight script initialization state
        this.init$ = this._initSource.asObservable();
    }
    static getInitScript(id, customInitScript) {
        return customInitScript || googleGlobalSiteTagInitScript(id);
    }
    static getSourceScript(id, customSourceScript) {
        return customSourceScript || googleGlobalSiteTagSourceScript(id);
    }
    get initProcess$() {
        return this.init$.pipe(take(1), takeUntil(this._destroyed$));
    }
    ngOnDestroy() {
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
    /**
     * The method is used to start collecting the data for the current provider
     * It allows controlling the data collecting process on the customer side.
     * For instance to turn on data collecting in run time when it needed based on user preferences or project business logic
     *
     * @param providerConfig - config for provider that need to be initialized
     * @param radarConfig - main RADAR module config
     */
    startDataCollecting(providerConfig, radarConfig) {
        this._id = providerConfig.id;
        this._radarConfig = radarConfig;
        this._productInfo = radarConfig.productInfo;
        this.initProcess$
            .subscribe(isInitialized => {
            /**
             * This window property must be set before any calls to gtag() are made, and it must be set on each page
             * for which you want to disable Analytics. If the property is not set or set to false, then Analytics will work as usual.
             */
            this.toggleUserTracking(true, providerConfig);
            if (isInitialized) {
                return;
            }
            if (providerConfig.sourceScript !== false) {
                injectSourceScript(AdaptRadarGoogleGlobalSiteTagProvider.getSourceScript(providerConfig.id, providerConfig.sourceScript));
            }
            if (providerConfig.initScript !== false) {
                injectInitScript(AdaptRadarGoogleGlobalSiteTagProvider.getInitScript(providerConfig.id, providerConfig.initScript));
            }
            this._initSource.next(true);
        });
    }
    stopDataCollecting(providerConfig) {
        this.toggleUserTracking(false, providerConfig);
        this._initSource.next(false);
    }
    /**
     * Method is used to send specific 'page_path' event for Google Analytics system
     *
     * @param pathData - path string that will be logged and used to track which pages was visited
     *
     * @example
     * gtag('config', 'UA-1234567-89', {'page_path': '/new-page.html'});
     */
    sendPagePathEvent(pathData) {
        this.initProcess$.subscribe(isInitialized => {
            if (isInitialized && !isNil(pathData)) {
                gtag(AdaptRadarGoogleGlobalSiteTagEventNameEventName.Config, this._id, { [AdaptRadarCustomEventName.PagePath]: pathData.url });
            }
        });
    }
    /**
     * Method is used to send custom events into Google Global Site Tag analytics system.
     *
     * @param customEventName - name of the event that will be logged into Google Global Site Tag analytics system
     * @param customEventData - custom data that need to be collect and associate with `customEventName`
     *
     * @example
     * gtag('event', 'video_auto_play_start', {
     *  'event_label': 'My promotional video',
     *  'event_category': 'video_auto_play',
     *  'non_interaction': true
     * });
     */
    sendCustomEvent(customEventName, customEventData) {
        this.initProcess$.subscribe(isInitialized => {
            if (isInitialized) {
                if (customEventName === AdaptRadarCustomEventName.PagePath) {
                    this.sendPagePathEvent(customEventData);
                }
                else {
                    gtag(AdaptRadarGoogleGlobalSiteTagEventNameEventName.Event, customEventName, customEventData);
                }
            }
        });
    }
    sendGlobalData() {
        this.initProcess$.subscribe(isInitialized => {
            if (isInitialized) {
                // sending global data
            }
        });
    }
    /**
     * Opt-Out User Tracking
     * In some cases, it may be necessary to disable Google Analytics on a page without removing the gtag.js tag.
     * For example, you might do this if your site's privacy policy provides an option for the user to opt-out of Google Analytics.
     *
     * The gtag.js library includes a window property that, when set to true, disables gtag.js from sending data to Google Analytics.
     * When Google Analytics attempts to set a cookie or send data back to the Google Analytics servers,
     * it will first check if this property is set, and will take no action if the value is set to true.
     *
     * Google docs: https://developers.google.com/analytics/devguides/collection/gtagjs/user-opt-out
     *
     * @param isEnabled - tracking state (true for Out-In, false for Opt-Out)
     * @param providerConfig - config for provider that need to be initialized
     */
    toggleUserTracking(isEnabled, providerConfig) {
        window[`ga-disable-${providerConfig.id}`] = !isEnabled;
        this._initSource.next(isEnabled);
    }
}
AdaptRadarGoogleGlobalSiteTagProvider.ɵfac = function AdaptRadarGoogleGlobalSiteTagProvider_Factory(t) { return new (t || AdaptRadarGoogleGlobalSiteTagProvider)(); };
AdaptRadarGoogleGlobalSiteTagProvider.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptRadarGoogleGlobalSiteTagProvider, factory: AdaptRadarGoogleGlobalSiteTagProvider.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRadarGoogleGlobalSiteTagProvider, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();

class AdaptRadarGoogleTagManagerProvider {
    constructor() {
        this._destroyed$ = new ReplaySubject(1);
        this._initSource = new BehaviorSubject(false);
        // Observable that can be used to check Gainsight script initialization state
        this.init$ = this._initSource.asObservable();
    }
    static getInitScript(id, customInitScript) {
        return customInitScript || googleTagManagerInitScript(id);
    }
    get initProcess$() {
        return this.init$.pipe(take(1), takeUntil(this._destroyed$));
    }
    ngOnDestroy() {
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
    /**
     * The method is used to start collecting the data for the current provider
     * It allows controlling the data collecting process on the customer side.
     * For instance to turn on data collecting in run time when it needed based on user preferences or project business logic
     *
     * @param providerConfig - config for provider that need to be initialized
     * @param radarConfig - main RADAR module config
     */
    startDataCollecting(providerConfig, radarConfig) {
        this._id = providerConfig.id;
        this._radarConfig = radarConfig;
        this._productInfo = radarConfig.productInfo;
        this.initProcess$
            .subscribe(isInitialized => {
            if (isInitialized) {
                return;
            }
            if (providerConfig.initScript !== false) {
                injectInitScript(AdaptRadarGoogleTagManagerProvider.getInitScript(providerConfig.id, providerConfig.initScript));
            }
            this._initSource.next(true);
        });
    }
    stopDataCollecting() {
        // stop data collection
        this._initSource.next(false);
    }
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
    sendCustomEvent(customEventName, customEventData) {
        this.initProcess$.subscribe(isInitialized => {
            if (isInitialized) {
                // send event for GTM here
            }
        });
    }
    sendGlobalData() {
        this.initProcess$.subscribe(isInitialized => {
            if (isInitialized) {
                // sending global data
            }
        });
    }
}
AdaptRadarGoogleTagManagerProvider.ɵfac = function AdaptRadarGoogleTagManagerProvider_Factory(t) { return new (t || AdaptRadarGoogleTagManagerProvider)(); };
AdaptRadarGoogleTagManagerProvider.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptRadarGoogleTagManagerProvider, factory: AdaptRadarGoogleTagManagerProvider.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRadarGoogleTagManagerProvider, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();

class AdaptRadarService {
    constructor(_adaptRadarGGSTProvider, _adaptRadarGTMProvider, _adaptRadarGainsightProvider, _applicationRef) {
        this._adaptRadarGGSTProvider = _adaptRadarGGSTProvider;
        this._adaptRadarGTMProvider = _adaptRadarGTMProvider;
        this._adaptRadarGainsightProvider = _adaptRadarGainsightProvider;
        this._applicationRef = _applicationRef;
        this.enabledProvidersHashMap = new Map();
    }
    set config(conf) {
        this._config = conf;
    }
    get config() {
        return this._config;
    }
    /**
     * The method is used to start collecting the data for all enabled providers
     * It allows controlling the data collecting process on the customer side.
     * For instance to turn on data collecting in run time when it needed based on user preferences or project business logic
     *
     * In case there is a requirement to toggle data collecting for a specific provider it can be done by calling the "startDataCollecting" method for the needed provider
     */
    startDataCollecting(config) {
        this.config = config;
        if (isNil(this.config)) {
            adaptError('ADAPT RADAR: For correct work of RADAR service please provide a config');
            return;
        }
        if (isNil(this.config.providers)) {
            adaptError('ADAPT RADAR: Please provide "providers" property for a correct work of RADAR Module');
            return;
        }
        this.enabledProvidersHashMap.clear();
        this.config.providers
            .filter(provider => !provider.disabled)
            .forEach(provider => {
            if (!provider.id) {
                throw new Error(`ADAPT RADAR: Please provide correct "ID" for "${provider.name}" provider`);
            }
            this.enabledProvidersHashMap.set(provider.name, provider);
            this.getProviderByName(provider.name).startDataCollecting(provider, this.config);
        });
    }
    /**
     * The method is used to stop collecting the data for all enabled providers
     * It allows controlling the data collecting process on the customer side.
     * For instance to turn off data collecting in run time when it needed based on user preferences or project business logic
     */
    stopDataCollecting() {
        if (isNil(this.config)) {
            adaptError('ADAPT RADAR: For correct work of RADAR service please provide a config');
            return;
        }
        this.config.providers
            .filter(provider => !provider.disabled)
            .forEach(provider => {
            if (!provider.id) {
                throw new Error(`ADAPT RADAR: Please provide correct "ID" for "${provider.name}" provider`);
            }
            this.getProviderByName(provider.name).stopDataCollecting(provider);
        });
    }
    /**
     * Method is used to send a custom event for all enabled providers
     *
     * @param customEventName - name of the event that will be logged into analytics system
     * @param customEventData - custom data that need to be collect and associate with `customEventName`
     * @param disableEventSending - if set to true restrict event sending atomically(for some specific places). Can be useful when event need to be send only based on some condition(eg. disable event sending for button components on weekends)
     */
    sendCustomEventForAllProviders(customEventName, customEventData, disableEventSending) {
        if (this.enabledProvidersHashMap.size > 0 && !disableEventSending) {
            this.enabledProvidersHashMap.forEach(provider => {
                this.getProviderByName(provider.name).sendCustomEvent(customEventName, customEventData);
            });
        }
    }
    /**
     * Method is used to send "Generic" event for all ADAPT components on Init.
     *
     * @param entityName {AdaptRadarCustomEventName} The name on the class of the component/directive
     */
    sendGenericComponentEvent(entityName) {
        const d = new Date();
        const isoDate = d.toISOString();
        const timestamp = d.valueOf();
        this.sendCustomEventForAllProviders(AdaptRadarCustomEventName.AdaptGenericComponent, {
            EventType: AdaptRadarCustomEventType.Init,
            ComponentName: entityName,
            PageTitle: document.title,
            Date: d,
            ISODate: isoDate,
            Timestamp: timestamp
        });
    }
    /**
     * Method is used to get an instance of injected provider by its name
     *
     * @param name - the name of supported provider
     *
     * @return - instance of provider by its name
     */
    getProviderByName(name) {
        switch (name) {
            case AdaptRadarSupportedProviders.GoogleGlobalSiteTag:
                return this._adaptRadarGGSTProvider;
            case AdaptRadarSupportedProviders.GoogleTagManager:
                return this._adaptRadarGTMProvider;
            case AdaptRadarSupportedProviders.Gainsight:
                return this._adaptRadarGainsightProvider;
            default:
                throw new Error('ADAPT RADAR: No supported provider found');
        }
    }
    subscribeOnElementIntersect(adaptRadarDisableEventSending, element, entityName) {
        if (adaptRadarDisableEventSending || !(element === null || element === void 0 ? void 0 : element.nativeElement)) {
            return null;
        }
        const elementIntersectObserver = new IntersectionObserver(([entry]) => {
            if (entry.isIntersecting) {
                this.sendGenericComponentEvent(entityName);
                elementIntersectObserver.disconnect();
            }
        }, { root: null, threshold: 0, rootMargin: '0px 0px 0px 0px' });
        elementIntersectObserver.observe(element.nativeElement);
        return elementIntersectObserver;
    }
}
AdaptRadarService.ɵfac = function AdaptRadarService_Factory(t) { return new (t || AdaptRadarService)(i0.ɵɵinject(AdaptRadarGoogleGlobalSiteTagProvider), i0.ɵɵinject(AdaptRadarGoogleTagManagerProvider), i0.ɵɵinject(AdaptRadarGainsightProvider), i0.ɵɵinject(i0.ApplicationRef)); };
AdaptRadarService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptRadarService, factory: AdaptRadarService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRadarService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: AdaptRadarGoogleGlobalSiteTagProvider }, { type: AdaptRadarGoogleTagManagerProvider }, { type: AdaptRadarGainsightProvider }, { type: i0.ApplicationRef }]; }, null); })();

class AdaptRadarGenericDirective {
    constructor(_adaptRadarService, _elem, _entityName) {
        this._adaptRadarService = _adaptRadarService;
        this._elem = _elem;
        this._entityName = _entityName;
        this.adaptRadarGroupName = null;
        this.adaptRadarDisableEventSending = this._checkIfDisabledFromSending();
    }
    ngAfterViewInit() {
        this._elementIntersectObserver = this._adaptRadarService.subscribeOnElementIntersect(this.adaptRadarDisableEventSending, this._elem, this._entityName);
    }
    ngOnDestroy() {
        this._unsubscribeFromIntersectionObserver();
    }
    _unsubscribeFromIntersectionObserver() {
        if (this._elementIntersectObserver) {
            this._elementIntersectObserver.disconnect();
            this._elementIntersectObserver = null;
        }
    }
    _checkIfDisabledFromSending() {
        var _a, _b;
        return !!((_b = (_a = this._adaptRadarService.config) === null || _a === void 0 ? void 0 : _a.disableEventSending) === null || _b === void 0 ? void 0 : _b.get(this._entityName));
    }
}
AdaptRadarGenericDirective.ɵfac = function AdaptRadarGenericDirective_Factory(t) { return new (t || AdaptRadarGenericDirective)(i0.ɵɵdirectiveInject(AdaptRadarService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(AdaptRadarCustomEventName)); };
AdaptRadarGenericDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: AdaptRadarGenericDirective, inputs: { adaptRadarGroupName: "adaptRadarGroupName", adaptRadarDisableEventSending: "adaptRadarDisableEventSending" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRadarGenericDirective, [{
        type: Directive
    }], function () { return [{ type: AdaptRadarService }, { type: i0.ElementRef }, { type: AdaptRadarCustomEventName }]; }, { adaptRadarGroupName: [{
            type: Input
        }], adaptRadarDisableEventSending: [{
            type: Input
        }] }); })();

/**
 * Radar Pixel directive is used to detect elements visibility on the screen.
 * Directive will emit an event if element was intersected
 *
 * Directive is based on `IntersectionObserver` API
 * More information can be found here - https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API
 */
class AdaptRadarPixelDirective {
    constructor(_elem) {
        this._elem = _elem;
        /**
         * The element that is used as the viewport for checking visibility of the target.
         * Must be the ancestor of the target.
         * Defaults to the browser viewport if not specified or if null.
         */
        this.adaptRadarPixelRootContainer = null;
        /**
         * Either a single number or an array of numbers which indicate at what percentage of the target's visibility the
         * observer's callback should be executed.
         * If you only want to detect when visibility passes the 50% mark, you can use a value of 0.5.
         * If you want the callback to run every time visibility passes another 25%, you would specify the array [0, 0.25, 0.5, 0.75, 1].
         * The default is 0 (meaning as soon as even one pixel is visible, the callback will be run).
         * A value of 1.0 means that the threshold isn't considered passed until every pixel is visible.
         */
        this.adaptRadarPixelThreshold = 0;
        /**
         * Margin around the root.
         * Can have values similar to the CSS margin property, e.g. "10px 20px 30px 40px" (top, right, bottom, left).
         * The values can be percentages.
         * This set of values serves to grow or shrink each side of the root element's bounding box before computing intersections.
         * Defaults to all zeros.
         */
        this.adaptRadarPixelRootContainerMargin = '0px 0px 0px 0px';
        /**
         * Output will emit `AdaptRadarPixelIntersectionObserverEntry` data each time element will be intersected.
         * Value emitting can be control by `adaptRadarPixelTriggerResolver`
         */
        this.adaptRadarPixelIntersect = new EventEmitter();
    }
    get radarPixelOptions() {
        return {
            root: this.adaptRadarPixelRootContainer,
            threshold: this.adaptRadarPixelThreshold,
            rootMargin: this.adaptRadarPixelRootContainerMargin
        };
    }
    ngAfterViewInit() {
        this._observer = new IntersectionObserver(([entry]) => {
            if (entry.isIntersecting) {
                const elementOffsetTop = this._elem.nativeElement.offsetTop;
                if (isFunction(this.adaptRadarPixelTriggerResolver)) {
                    if (this.adaptRadarPixelTriggerResolver(entry)) {
                        this.adaptRadarPixelIntersect.emit({ entry, elementOffsetTop });
                    }
                }
                else {
                    this.adaptRadarPixelIntersect.emit({ entry, elementOffsetTop });
                }
            }
        }, this.radarPixelOptions);
        this._observer.observe(this._elem.nativeElement);
    }
    ngOnDestroy() {
        this._observer.disconnect();
        this._observer = null;
    }
}
AdaptRadarPixelDirective.ɵfac = function AdaptRadarPixelDirective_Factory(t) { return new (t || AdaptRadarPixelDirective)(i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptRadarPixelDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: AdaptRadarPixelDirective, selectors: [["", "adaptRadarPixel", ""]], inputs: { adaptRadarPixelRootContainer: "adaptRadarPixelRootContainer", adaptRadarPixelThreshold: "adaptRadarPixelThreshold", adaptRadarPixelRootContainerMargin: "adaptRadarPixelRootContainerMargin", adaptRadarPixelTriggerResolver: "adaptRadarPixelTriggerResolver" }, outputs: { adaptRadarPixelIntersect: "adaptRadarPixelIntersect" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRadarPixelDirective, [{
        type: Directive,
        args: [{
                selector: '[adaptRadarPixel]'
            }]
    }], function () { return [{ type: i0.ElementRef }]; }, { adaptRadarPixelRootContainer: [{
            type: Input
        }], adaptRadarPixelThreshold: [{
            type: Input
        }], adaptRadarPixelRootContainerMargin: [{
            type: Input
        }], adaptRadarPixelTriggerResolver: [{
            type: Input
        }], adaptRadarPixelIntersect: [{
            type: Output
        }] }); })();

class AdaptRadarModule {
    constructor(_applicationRef, moduleConfig) {
        this._applicationRef = _applicationRef;
        if (!moduleConfig) {
            adaptWarn('ADAPT RADAR: Please provide RADAR module configuration');
            return;
        }
        if (isNil(moduleConfig.versions)) {
            adaptWarn('ADAPT RADAR: Please provide "versions" property for an easier ADAPT versions targeting');
        }
        this._setVersionsInfo(moduleConfig);
    }
    static forRoot(moduleConfig) {
        return {
            ngModule: AdaptRadarModule,
            providers: [
                { provide: ADAPT_RADAR_MODULE_CONFIG_TOKEN, useValue: moduleConfig },
                AdaptRadarService
            ]
        };
    }
    /**
     * Set versions info as attributes to the root element. Can be useful for debug. The same way as angular doing with its version
     */
    _setVersionsInfo(moduleConfig) {
        const bmcUxPackagesInfo = moduleConfig.versions;
        if (!isDevMode() || !bmcUxPackagesInfo || Object.entries(bmcUxPackagesInfo).length === 0) {
            return;
        }
        this._applicationRef.isStable.subscribe(stable => {
            var _a, _b;
            if (stable) {
                const components = this._applicationRef.components;
                const rootComponent = components ? (_b = (_a = this._applicationRef.components[0]) === null || _a === void 0 ? void 0 : _a.location) === null || _b === void 0 ? void 0 : _b.nativeElement : null;
                if (rootComponent) {
                    const bmcUxPackagesInfoEntries = Object.entries(bmcUxPackagesInfo);
                    bmcUxPackagesInfoEntries.forEach(entry => {
                        rootComponent.setAttribute(entry[0].toLowerCase().replace(/_/g, '-'), entry[1].full);
                    });
                }
            }
        });
    }
}
AdaptRadarModule.ɵfac = function AdaptRadarModule_Factory(t) { return new (t || AdaptRadarModule)(i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(ADAPT_RADAR_MODULE_CONFIG_TOKEN, 8)); };
AdaptRadarModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: AdaptRadarModule });
AdaptRadarModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[CommonModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRadarModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [AdaptRadarDirective, AdaptRadarPixelDirective],
                exports: [AdaptRadarDirective, AdaptRadarPixelDirective]
            }]
    }], function () { return [{ type: i0.ApplicationRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [ADAPT_RADAR_MODULE_CONFIG_TOKEN]
            }, {
                type: Optional
            }] }]; }, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(AdaptRadarModule, { declarations: [AdaptRadarDirective, AdaptRadarPixelDirective], imports: [CommonModule], exports: [AdaptRadarDirective, AdaptRadarPixelDirective] }); })();

var AdaptNumberType;
(function (AdaptNumberType) {
    AdaptNumberType[AdaptNumberType["Integer"] = 0] = "Integer";
    AdaptNumberType[AdaptNumberType["Float"] = 1] = "Float";
    AdaptNumberType[AdaptNumberType["Scientific"] = 2] = "Scientific";
})(AdaptNumberType || (AdaptNumberType = {}));
/* rx-rating */
var RxRatingSize;
(function (RxRatingSize) {
    RxRatingSize[RxRatingSize["xs"] = 0] = "xs";
    RxRatingSize[RxRatingSize["sm"] = 1] = "sm";
    RxRatingSize[RxRatingSize["md"] = 2] = "md";
    RxRatingSize[RxRatingSize["lg"] = 3] = "lg";
})(RxRatingSize || (RxRatingSize = {}));
var RxRatingVotingType;
(function (RxRatingVotingType) {
    RxRatingVotingType[RxRatingVotingType["Star"] = 0] = "Star";
    RxRatingVotingType[RxRatingVotingType["Flag"] = 1] = "Flag";
    RxRatingVotingType[RxRatingVotingType["Like"] = 2] = "Like";
    RxRatingVotingType[RxRatingVotingType["Thanks"] = 3] = "Thanks";
})(RxRatingVotingType || (RxRatingVotingType = {}));
/* rx-datetime */
var RxDatetimePickerMode;
(function (RxDatetimePickerMode) {
    RxDatetimePickerMode[RxDatetimePickerMode["DateTime"] = 0] = "DateTime";
    RxDatetimePickerMode[RxDatetimePickerMode["Date"] = 1] = "Date";
    RxDatetimePickerMode[RxDatetimePickerMode["Time"] = 2] = "Time";
    RxDatetimePickerMode[RxDatetimePickerMode["YearMonth"] = 3] = "YearMonth";
    RxDatetimePickerMode[RxDatetimePickerMode["Year"] = 4] = "Year";
    RxDatetimePickerMode[RxDatetimePickerMode["Month"] = 5] = "Month";
})(RxDatetimePickerMode || (RxDatetimePickerMode = {}));

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @publicApi
 */
const ADAPT_RADAR_VERSION = new Version('12.23.0');

/**
 * Generated bundle index. Do not edit.
 */

export { ADAPT_RADAR_MODULE_CONFIG_TOKEN, ADAPT_RADAR_VERSION, AdaptRadarComponentEventType, AdaptRadarCustomEventName, AdaptRadarCustomEventType, AdaptRadarCustomerEnvironment, AdaptRadarDirective, AdaptRadarGainsightConfigName, AdaptRadarGainsightEventName, AdaptRadarGainsightIdentifyActionName, AdaptRadarGainsightProvider, AdaptRadarGenericDirective, AdaptRadarGlobal, AdaptRadarGoogleGlobalSiteTagEventNameEventName, AdaptRadarGoogleGlobalSiteTagProvider, AdaptRadarGoogleTagManagerProvider, AdaptRadarHostingType, AdaptRadarModule, AdaptRadarPixelDirective, AdaptRadarProductAreaName, AdaptRadarService, AdaptRadarStorageKey, AdaptRadarSubProductNameLevel1, AdaptRadarSubProductNameLevel2, AdaptRadarSubProductNameLevel3, AdaptRadarSupportedProviders, AdaptRadarUAParser, AdaptRadarUAVendor, AdaptRadarURLChangeTracker, flattenProductInfo, injectInitScript, injectSourceScript };
//# sourceMappingURL=bmc-ux-adapt-radar.js.map
