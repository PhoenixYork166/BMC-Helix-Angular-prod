import { Injectable } from '@angular/core';
import { AdaptRadarCustomEventName } from '../../adapt-radar.model';
import { injectInitScript, injectSourceScript } from '../../adapt-radar.utils';
import { googleGlobalSiteTagInitScript, googleGlobalSiteTagSourceScript } from '../providers-scripts';
import { AdaptRadarGoogleGlobalSiteTagEventNameEventName } from './google-global-site-tag.model';
import { take, takeUntil } from 'rxjs/operators';
import { BehaviorSubject, ReplaySubject } from 'rxjs';
import { isNil } from 'lodash-es';
import * as i0 from "@angular/core";
export class AdaptRadarGoogleGlobalSiteTagProvider {
    constructor() {
        this._destroyed$ = new ReplaySubject(1);
        this._initSource = new BehaviorSubject(false);
        // Observable that can be used to check Gainsight script initialization state
        this.init$ = this._initSource.asObservable();
    }
    static getInitScript(id, customInitScript) {
        return customInitScript || googleGlobalSiteTagInitScript(id);
    }
    static getSourceScript(id, customSourceScript) {
        return customSourceScript || googleGlobalSiteTagSourceScript(id);
    }
    get initProcess$() {
        return this.init$.pipe(take(1), takeUntil(this._destroyed$));
    }
    ngOnDestroy() {
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
    /**
     * The method is used to start collecting the data for the current provider
     * It allows controlling the data collecting process on the customer side.
     * For instance to turn on data collecting in run time when it needed based on user preferences or project business logic
     *
     * @param providerConfig - config for provider that need to be initialized
     * @param radarConfig - main RADAR module config
     */
    startDataCollecting(providerConfig, radarConfig) {
        this._id = providerConfig.id;
        this._radarConfig = radarConfig;
        this._productInfo = radarConfig.productInfo;
        this.initProcess$
            .subscribe(isInitialized => {
            /**
             * This window property must be set before any calls to gtag() are made, and it must be set on each page
             * for which you want to disable Analytics. If the property is not set or set to false, then Analytics will work as usual.
             */
            this.toggleUserTracking(true, providerConfig);
            if (isInitialized) {
                return;
            }
            if (providerConfig.sourceScript !== false) {
                injectSourceScript(AdaptRadarGoogleGlobalSiteTagProvider.getSourceScript(providerConfig.id, providerConfig.sourceScript));
            }
            if (providerConfig.initScript !== false) {
                injectInitScript(AdaptRadarGoogleGlobalSiteTagProvider.getInitScript(providerConfig.id, providerConfig.initScript));
            }
            this._initSource.next(true);
        });
    }
    stopDataCollecting(providerConfig) {
        this.toggleUserTracking(false, providerConfig);
        this._initSource.next(false);
    }
    /**
     * Method is used to send specific 'page_path' event for Google Analytics system
     *
     * @param pathData - path string that will be logged and used to track which pages was visited
     *
     * @example
     * gtag('config', 'UA-1234567-89', {'page_path': '/new-page.html'});
     */
    sendPagePathEvent(pathData) {
        this.initProcess$.subscribe(isInitialized => {
            if (isInitialized && !isNil(pathData)) {
                gtag(AdaptRadarGoogleGlobalSiteTagEventNameEventName.Config, this._id, { [AdaptRadarCustomEventName.PagePath]: pathData.url });
            }
        });
    }
    /**
     * Method is used to send custom events into Google Global Site Tag analytics system.
     *
     * @param customEventName - name of the event that will be logged into Google Global Site Tag analytics system
     * @param customEventData - custom data that need to be collect and associate with `customEventName`
     *
     * @example
     * gtag('event', 'video_auto_play_start', {
     *  'event_label': 'My promotional video',
     *  'event_category': 'video_auto_play',
     *  'non_interaction': true
     * });
     */
    sendCustomEvent(customEventName, customEventData) {
        this.initProcess$.subscribe(isInitialized => {
            if (isInitialized) {
                if (customEventName === AdaptRadarCustomEventName.PagePath) {
                    this.sendPagePathEvent(customEventData);
                }
                else {
                    gtag(AdaptRadarGoogleGlobalSiteTagEventNameEventName.Event, customEventName, customEventData);
                }
            }
        });
    }
    sendGlobalData() {
        this.initProcess$.subscribe(isInitialized => {
            if (isInitialized) {
                // sending global data
            }
        });
    }
    /**
     * Opt-Out User Tracking
     * In some cases, it may be necessary to disable Google Analytics on a page without removing the gtag.js tag.
     * For example, you might do this if your site's privacy policy provides an option for the user to opt-out of Google Analytics.
     *
     * The gtag.js library includes a window property that, when set to true, disables gtag.js from sending data to Google Analytics.
     * When Google Analytics attempts to set a cookie or send data back to the Google Analytics servers,
     * it will first check if this property is set, and will take no action if the value is set to true.
     *
     * Google docs: https://developers.google.com/analytics/devguides/collection/gtagjs/user-opt-out
     *
     * @param isEnabled - tracking state (true for Out-In, false for Opt-Out)
     * @param providerConfig - config for provider that need to be initialized
     */
    toggleUserTracking(isEnabled, providerConfig) {
        window[`ga-disable-${providerConfig.id}`] = !isEnabled;
        this._initSource.next(isEnabled);
    }
}
AdaptRadarGoogleGlobalSiteTagProvider.ɵfac = function AdaptRadarGoogleGlobalSiteTagProvider_Factory(t) { return new (t || AdaptRadarGoogleGlobalSiteTagProvider)(); };
AdaptRadarGoogleGlobalSiteTagProvider.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptRadarGoogleGlobalSiteTagProvider, factory: AdaptRadarGoogleGlobalSiteTagProvider.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRadarGoogleGlobalSiteTagProvider, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();
//# sourceMappingURL=google-global-site-tag.service.js.map