import { Inject, Injectable, Optional, VERSION } from '@angular/core';
import { AdaptRadarUAParser } from './ua-parser';
import { ADAPT_RADAR_MODULE_CONFIG_TOKEN } from '../adapt-radar.token';
import * as i0 from "@angular/core";
import * as i1 from "./ua-parser";
/**
 * Service used to collect "global" data for analytics systems
 */
export class AdaptRadarGlobal {
    constructor(_adaptRadarUAParser, _moduleConfig) {
        this._adaptRadarUAParser = _adaptRadarUAParser;
        this._moduleConfig = _moduleConfig;
    }
    getGlobalData() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8;
        const intl = new Intl.DateTimeFormat();
        const { languages, language } = window.navigator;
        const { browser, device, os } = this._adaptRadarUAParser.getResult();
        const computedStyle = getComputedStyle(document.documentElement);
        const hasAccessibilityCSS = computedStyle.getPropertyValue('--accessible-mode');
        const hasDarkModeCSS = computedStyle.getPropertyValue('--dark-mode');
        const hasCustomizedCSS = computedStyle.getPropertyValue('--color-warning');
        return {
            BrowserType: browser.name,
            BrowserVersion: browser.major,
            BrowserDetailedVersion: browser.version,
            DeviceType: device.type,
            DeviceVendor: device.vendor,
            DeviceModel: device.model,
            OperatingSystem: os.name,
            OperatingSystemVersion: os.version,
            ConnectionDownlink: window.navigator['connection'] ? (window.navigator['connection'].downlink || null) : null,
            ConnectionEffectiveType: window.navigator['connection'] ? (window.navigator['connection'].effectiveType || null) : null,
            LocalizationSettings: languages,
            CurrentLanguage: language,
            TimeZone: (_a = intl === null || intl === void 0 ? void 0 : intl.resolvedOptions()) === null || _a === void 0 ? void 0 : _a.timeZone,
            PageName: document.title,
            AccessibilityMode: hasAccessibilityCSS === 'true',
            DarkMode: hasDarkModeCSS === 'true',
            Customized: hasCustomizedCSS === 'true',
            AngularVersion: VERSION.full,
            ADAPTVersion: (_e = (_d = (_c = (_b = this._moduleConfig) === null || _b === void 0 ? void 0 : _b.versions) === null || _c === void 0 ? void 0 : _c.ADAPT_ANGULAR_VERSION) === null || _d === void 0 ? void 0 : _d.full) !== null && _e !== void 0 ? _e : null,
            TableVersion: (_j = (_h = (_g = (_f = this._moduleConfig) === null || _f === void 0 ? void 0 : _f.versions) === null || _g === void 0 ? void 0 : _g.ADAPT_TABLE_VERSION) === null || _h === void 0 ? void 0 : _h.full) !== null && _j !== void 0 ? _j : null,
            CSSVersion: (_o = (_m = (_l = (_k = this._moduleConfig) === null || _k === void 0 ? void 0 : _k.versions) === null || _l === void 0 ? void 0 : _l.ADAPT_CSS_VERSION) === null || _m === void 0 ? void 0 : _m.full) !== null && _o !== void 0 ? _o : null,
            GanttVersion: (_s = (_r = (_q = (_p = this._moduleConfig) === null || _p === void 0 ? void 0 : _p.versions) === null || _q === void 0 ? void 0 : _q.ADAPT_GANTT_VERSION) === null || _r === void 0 ? void 0 : _r.full) !== null && _s !== void 0 ? _s : null,
            ObsoleteVersion: (_w = (_v = (_u = (_t = this._moduleConfig) === null || _t === void 0 ? void 0 : _t.versions) === null || _u === void 0 ? void 0 : _u.ADAPT_OBSOLETE_VERSION) === null || _v === void 0 ? void 0 : _v.full) !== null && _w !== void 0 ? _w : null,
            RTEVersion: (_0 = (_z = (_y = (_x = this._moduleConfig) === null || _x === void 0 ? void 0 : _x.versions) === null || _y === void 0 ? void 0 : _y.ADAPT_RTE_VERSION) === null || _z === void 0 ? void 0 : _z.full) !== null && _0 !== void 0 ? _0 : null,
            ChartsVersion: (_4 = (_3 = (_2 = (_1 = this._moduleConfig) === null || _1 === void 0 ? void 0 : _1.versions) === null || _2 === void 0 ? void 0 : _2.ADAPT_CHARTS_VERSION) === null || _3 === void 0 ? void 0 : _3.full) !== null && _4 !== void 0 ? _4 : null,
            RadarVersion: (_8 = (_7 = (_6 = (_5 = this._moduleConfig) === null || _5 === void 0 ? void 0 : _5.versions) === null || _6 === void 0 ? void 0 : _6.ADAPT_RADAR_VERSION) === null || _7 === void 0 ? void 0 : _7.full) !== null && _8 !== void 0 ? _8 : null,
        };
    }
}
AdaptRadarGlobal.ɵfac = function AdaptRadarGlobal_Factory(t) { return new (t || AdaptRadarGlobal)(i0.ɵɵinject(i1.AdaptRadarUAParser), i0.ɵɵinject(ADAPT_RADAR_MODULE_CONFIG_TOKEN, 8)); };
AdaptRadarGlobal.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptRadarGlobal, factory: AdaptRadarGlobal.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRadarGlobal, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: i1.AdaptRadarUAParser }, { type: undefined, decorators: [{
                type: Inject,
                args: [ADAPT_RADAR_MODULE_CONFIG_TOKEN]
            }, {
                type: Optional
            }] }]; }, null); })();
//# sourceMappingURL=global-data.js.map