{"version":3,"file":"adapt-radar-components.model.js","sourceRoot":"","sources":["../../../../../libs/adapt-radar/src/lib/adapt-radar-components.model.ts"],"names":[],"mappings":"AASA,IAAK,eAIJ;AAJD,WAAK,eAAe;IAClB,2DAAW,CAAA;IACX,uDAAS,CAAA;IACT,iEAAc,CAAA;AAChB,CAAC,EAJI,eAAe,KAAf,eAAe,QAInB;AAwGD,eAAe;AAEf,IAAK,YAKJ;AALD,WAAK,YAAY;IACf,2CAAM,CAAA;IACN,2CAAM,CAAA;IACN,2CAAM,CAAA;IACN,2CAAM,CAAA;AACR,CAAC,EALI,YAAY,KAAZ,YAAY,QAKhB;AAED,IAAK,kBAKJ;AALD,WAAK,kBAAkB;IACrB,2DAAQ,CAAA;IACR,2DAAQ,CAAA;IACR,2DAAQ,CAAA;IACR,+DAAU,CAAA;AACZ,CAAC,EALI,kBAAkB,KAAlB,kBAAkB,QAKtB;AA+DD,iBAAiB;AAEjB,IAAK,oBAOJ;AAPD,WAAK,oBAAoB;IACvB,uEAAY,CAAA;IACZ,+DAAQ,CAAA;IACR,+DAAQ,CAAA;IACR,yEAAa,CAAA;IACb,+DAAQ,CAAA;IACR,iEAAS,CAAA;AACX,CAAC,EAPI,oBAAoB,KAApB,oBAAoB,QAOxB","sourcesContent":["import {AdaptRadarComponentEventType, AdaptRadarCustomEventName, AdaptRadarCustomEventType} from './adapt-radar.model';\n\n\ntype FormControlSize = 'default' | 'sm' | 'lg';\n\ntype AdaptInteractionSource = 'keyboard' | 'mouse' | 'touch';\n\ntype AdaptRadarBooleanState = 'on' | 'off';\n\nenum AdaptNumberType {\n  Integer = 0,\n  Float = 1,\n  Scientific = 2\n}\n\n/* generic component data */\n\nexport interface AdaptRadarGenericComponentData {\n  EventType: AdaptRadarCustomEventType; // Used to specify type of event that was fired\n  ComponentName: AdaptRadarCustomEventName; // Name of the component that is fired event\n  PageTitle: string; // Page title\n  Date: Date; // Javascript Date object\n  ISODate: string; // Date in ISO format\n  Timestamp: number; // Current timestamp\n}\n\n\ninterface AdaptRadarComponentRxCommonData {\n  GroupName: string; // Used to combine Rx- controls into groups. The value takes from [adaptRadarGroupName] directive\n}\n\ninterface AdaptRadarComponentRxGenericData extends AdaptRadarComponentRxCommonData {\n  EventType: AdaptRadarCustomEventType; // Used to specify type of event that was fired\n  Label: string; // Form element label\n  Required: boolean; // Is form element required\n  Disabled: boolean; // Is form element disabled\n  ReadOnly: boolean; // Is form element readonly\n}\n\n\n/* rx-textfield */\n\ninterface AdaptRadarComponentRxGenericTextData extends AdaptRadarComponentRxGenericData {\n  Badge?: boolean; // Is custom tag provided\n  BadgeText?: string; // Custom tag text\n  Hinted: boolean; // Is tooltip provided // Is tooltip provided\n  Subtext: boolean; // Is sub label text provided\n  // DynamicEntry: boolean; // Is the value was entered by user or by system\n  TextEntered: boolean; // Was data entered into form element or not\n  CharCount: number; // Number of characters that was entered\n  FieldSize: FormControlSize; // Size of the form element\n}\n\nexport type AdaptRadarComponentRxTextfieldData = AdaptRadarComponentRxGenericTextData;\n\nexport type AdaptRadarComponentRxTextareaData = AdaptRadarComponentRxGenericTextData;\n\n\n/* rx-counter */\n\nexport interface AdaptRadarComponentRxCounterData extends AdaptRadarComponentRxGenericData {\n  NumberType: AdaptNumberType; // Type of the counter component\n  TextEntered: boolean; // Was data entered into form element or not\n  CharCount: number; // Number of characters that was entered\n  Hinted: boolean; // Is tooltip provided\n  Subtext: boolean; // Is sub label text provided\n  // DynamicEntry: boolean; // Is the value was entered by user or by system\n  FieldSize: FormControlSize; // Size of the form element\n  Target?: 'increase' | 'decrease'; // What control element was triggered\n}\n\n\n/* rx-search */\n\ninterface AdaptRadarComponentRxSearchChangedData {\n  EventType: AdaptRadarCustomEventType; // Used to specify type of event that was fired\n  SearchMethod: 'filter' | 'query';\n  FieldSize: FormControlSize; // Size of the form element\n  TextEntered: boolean; // Was data entered into form element or not\n  SearchButton: boolean; // Is search button enabled\n  InputMethod: AdaptInteractionSource; // From what source interaction was provided\n}\n\ninterface AdaptRadarComponentRxSearchClearData {\n  EventType: AdaptRadarCustomEventType; // Used to specify type of event that was fired\n  Label: string; // Form element label\n  Required: boolean; // Is form element required\n  TextEntered: boolean; // Was data entered into form element or not\n}\n\nexport type AdaptRadarComponentRxSearchData =\n  (AdaptRadarComponentRxSearchChangedData | AdaptRadarComponentRxSearchClearData) & AdaptRadarComponentRxCommonData;\n\n\n/* rx-checkbox */\n\nexport interface AdaptRadarComponentRxCheckboxData extends AdaptRadarComponentRxGenericData {\n  /*CheckboxGroup: boolean;*/\n  /*CheckboxLabel: string;*/\n  DefaultState: AdaptRadarBooleanState; // What was state on the init stage\n  CurrentState: AdaptRadarBooleanState; // Current state\n}\n\n\n/* rx-radiobutton */\n\nexport interface AdaptRadarComponentRxRadiobuttonData extends AdaptRadarComponentRxCommonData {\n  EventType: AdaptRadarCustomEventType; // Used to specify type of event that was fired\n  // DefaultState: AdaptRadarBooleanState; TODO: What is sense of this property\n  CurrentState: AdaptRadarBooleanState; // State after changes. TODO: If we can't uncheck radio button this value always will be \"on\"\n  Disabled: boolean; // Is form element disabled\n  ReadOnly: boolean; // Is form element readonly\n  Label: string; // Form element label\n  RadioGroup: boolean; // Is radio buttons used inside button group\n}\n\n\n/* rx-rating */\n\nenum RxRatingSize {\n  xs = 0,\n  sm = 1,\n  md = 2,\n  lg = 3\n}\n\nenum RxRatingVotingType {\n  Star = 0,\n  Flag = 1,\n  Like = 2,\n  Thanks = 3\n}\n\nexport interface AdaptRadarComponentRxRatingDefaultData extends AdaptRadarComponentRxGenericData {\n  FieldSize: RxRatingSize; // Size of the form element\n  RatingEntered: boolean; // Was rating entered or not\n  RatingMax: number; // Maximum allowed rating value\n  RatingValue: number; // Current rating value\n  SubmitMethod?: AdaptInteractionSource; // From what source submission was provided\n}\n\nexport interface AdaptRadarComponentRxRatingBinaryData extends AdaptRadarComponentRxCommonData {\n  EventType: AdaptRadarCustomEventType; // Used to specify type of event that was fired\n  Label: string; // Element label\n  RatingEntered: boolean; // Was rating entered or not\n  RatingValue: number; // Current rating value\n  SubmitMethod: AdaptInteractionSource; // From what source submission was provided\n}\n\nexport interface AdaptRadarComponentRxRatingLikeData extends AdaptRadarComponentRxCommonData {\n  EventType: AdaptRadarCustomEventType; // Used to specify type of event that was fired\n  Label: string; // Element label\n  FieldSize: RxRatingSize; // Size of the form element\n  RatingEntered: boolean; // Was rating entered or not\n  RatingValue: number; // Current rating value\n  Disabled: boolean; // Is element disabled\n  SubmitMethod: AdaptInteractionSource; // From what source submission was provided\n}\n\nexport interface AdaptRadarComponentRxRatingVotingData extends AdaptRadarComponentRxCommonData {\n  EventType: AdaptRadarCustomEventType; // Used to specify type of event that was fired\n  Type: RxRatingVotingType; // Type of the Voting rating component\n  HasTooltip: boolean; // Is tooltip enabled\n  HasThanksText: boolean; // Is \"thanks\" text provided\n  RatingValue: boolean; // Current rating value\n  SubmitMethod: AdaptInteractionSource; // From what source submission was provided\n}\n\n/* rx-switch */\n\nexport interface AdaptRadarComponentRxSwitchData extends AdaptRadarComponentRxGenericData {\n  DefaultState: AdaptRadarBooleanState; // What was state on the init stage\n  SwitchedState: AdaptRadarBooleanState; // Current state\n}\n\n\n/* rx-select */\n\nexport interface AdaptRadarComponentRxSelectData extends AdaptRadarComponentRxCommonData {\n  EventType: AdaptRadarCustomEventType; // Used to specify type of event that was fired\n  Label: string; // Form element label\n  NumberOfSelectedItems: number; // Number of currently selected items\n  DefaultNumberOfSelectedItems: number; // Number of items that was selected on init stage\n  Target?: 'selectAll' | 'loadMore'; // Target that was interacted with\n  Required?: boolean; // Is form element required\n  Disabled?: boolean; // Is form element disabled\n  ReadOnly?: boolean; // Is form element readonly\n  SelectType?: 'single' | 'multi'; // Type of the select\n  // SelectLimit?: number; // We have no such configuration inside select. Limit is controlled on customer side.\n  // DynamicEntry: boolean; // Is the value was entered by user or by system\n  FieldSize?: FormControlSize; // Size of the form element\n}\n\n\n/* rx-datetime */\n\nenum RxDatetimePickerMode {\n  DateTime = 0,\n  Date = 1,\n  Time = 2,\n  YearMonth = 3,\n  Year = 4,\n  Month = 5\n}\n\nexport interface AdaptRadarComponentRxDateTimeData extends AdaptRadarComponentRxGenericData {\n  Type: RxDatetimePickerMode; // Datetime mode\n  Range: boolean; // Is datetime component work in range mode\n  Inline: boolean; // Is inline mode enabled\n  InputMethod?: AdaptInteractionSource; // From what source submission was provided\n  // DynamicEntry: boolean; // Is the value was entered by user or by system\n}\n\n\n/* rx-timeslot */\n\nexport interface AdaptRadarComponentRxTimeSlotData extends AdaptRadarComponentRxGenericData {\n  Slots: number; // Number of component slots\n}\n\n\n/* rx-list-selector */\n\nexport interface AdaptRadarComponentRxListSelectorData extends AdaptRadarComponentRxGenericData {\n  DefaultNumberOfSelectedItems: number; // Number of selected option on init stage\n  TotalSelected: number; // Number of selected options\n  TotalOptions: number; // Number of list selector options\n}\n\n\n/* rx-list-builder */\n\nexport interface AdaptRadarComponentRxListBuilderData extends AdaptRadarComponentRxGenericData {\n  Action: 'add' | 'delete'; // Action that was triggered\n  ListCount: number; // Number of first level list array\n  MaxDepth: number; // Maximum dept of the list\n  // TODO: Need to specify what this property mean one more time\n  // TotalParents: number; // first level items count. Make sense only for 'delete' action\n  TotalChildren?: number; // items on first level for current item. Make sense only for 'delete' action\n  TotalGrandchildren?: number; // items on second level for current item. Make sense only for 'delete' action\n}\n\n\n/* rx-feedback */\n\nexport interface AdaptRadarComponentRxFeedbackData {\n  EventType: AdaptRadarCustomEventType; // Used to specify type of event that was fired\n  Label: string; // Form element label\n  Required: boolean; // Is form element required\n  ParentComponent: AdaptRadarCustomEventName; // The name of the parent component\n  ErrorsTriggered: string[]; // Validator names that was triggered\n}\n\n\n/* navigation */\n\ntype NavigationActionType = 'submenu' | 'switcher';\ntype NavigationActionItemType = 'link' | 'route' | 'action';\n\nexport interface AdaptRadarComponentNavigationData {\n  EventType: AdaptRadarCustomEventType; // Used to specify type of event that was fired\n  HamburgerMode: boolean; // Is navigation in hamburger mode\n  NavigationColor: string; // Theme color\n  Logo: string; // Logo class\n  MenuCount: number; // Number of menu items\n  ActionCount: number; // Number of action items\n  Title: string; // Name of the product\n  ActionsLoaded: string[]; // List of loaded actions names\n}\n\nexport interface AdaptRadarComponentNavigationHamburgerData {\n  EventType: AdaptRadarCustomEventType; // Used to specify type of event that was fired\n  HamburgerMode: boolean; // Is navigation in hamburger mode\n  ContainerSize: number; // Navigation element width in pixels\n  MenuCount: number; // Number of menu items\n  ActionCount: number; // Number of action items\n  ProfilePresent: boolean; // Is profile present\n}\n\nexport interface AdaptRadarComponentNavigationMenuData {\n  EventType: AdaptRadarCustomEventType; // Used to specify type of event that was fired\n  Disabled: boolean; // Is interacted menu item disabled\n  Name: string; // Interacted menu item name\n  Type: NavigationActionItemType; // Interacted menu item type\n  MaxDepth: number; // Maximum depth of the menu\n  SiblingsOptionsCount: number; // Number of not hidden siblings for the interacted menu item\n  HiddenSiblingsOptionsCount: number; // Number of hidden siblings for the interacted menu item\n}\n\nexport interface AdaptRadarComponentNavigationActionData {\n  EventType: AdaptRadarCustomEventType; // Used to specify type of event that was fired\n  ActionType: NavigationActionType; // Interacted action item action type\n  // TODO: do we need to pass name here? It can be private info\n  Name: string; // Interacted action name\n  Type: NavigationActionItemType; // Interacted action item type\n}\n\nexport interface AdaptRadarComponentNavigationAlertData {\n  EventType: AdaptRadarCustomEventType; // Used to specify type of event that was fired\n  Type: string; // Alert type\n  Title: string; // Alert title\n}\n\n\n/* menu */\n\nexport interface AdaptRadarComponentMenuData {\n  EventType: AdaptRadarCustomEventType; // Used to specify type of event that was fired\n  ParentComponent: AdaptRadarCustomEventName; // Parent component name\n  Disabled: boolean; // Is menu item disabled\n  Name: string; // Menu item name\n  Type: 'link' | 'route' | 'action' | 'menu'; // Menu item type\n  SiblingsOptionsCount: number; // Number of not hidden siblings for the interacted menu item\n  HiddenSiblingsOptionsCount: number; // Number of hidden siblings for the interacted menu item\n}\n\n\n/* profile */\n\nexport interface AdaptRadarComponentProfileData {\n  EventType: AdaptRadarCustomEventType; // Used to specify type of event that was fired\n  Type: 'long' | 'short'; // Type of the profile\n}\n\n\n/* tabs */\n\ntype TabsType = 'pills' | 'tabs' | 'inverted' | 'bordered' | 'stacked' | 'justified' | 'responsive';\n\nexport interface AdaptRadarComponentTabsData {\n  EventType: AdaptRadarCustomEventType; // Used to specify type of event that was fired\n  ComponentEventType: AdaptRadarComponentEventType; // Used to specify component related event (eg. Tab added or Tab deleted)\n  TabType: TabsType; // Used to specify tabs type ('pills' | 'tabs' | 'inverted' | 'bordered' | 'stacked' | 'justified' | 'responsive')\n  TabLabel: string; // Tab title\n  TabIcon: boolean; // Is Tab has icon\n  TabBadge: boolean; // Is Tab has badge\n  TabMenu: boolean; // Is Tab has a kebab menu\n  Disabled: boolean; // Is Tab disabled\n  TabPosition: number; // Used to specify tab position. Starts from 0\n  TabCount: number; // Count of tabs\n}\n\nexport interface AdaptRadarComponentTabsKebabMenuData {\n  EventType: AdaptRadarCustomEventType; // Used to specify type of event that was fired\n  TabLabel: string; // Tab title\n}\n\n/* accordion */\n\nexport interface AdaptRadarComponentAccordionData {\n  EventType: AdaptRadarCustomEventType; // Used to specify type of event that was fired\n  AccordionType: 'single' | 'multi'; // Show if accordion allowing to have more than one opened tab\n  HeaderLabel: string; // Accordion tab title text\n  HeaderIcon: boolean; // Show if accordion tab icon present\n  Disabled: boolean; // Is accordion tab disabled\n  SectionOpen: boolean; // Is accordion tab opened\n  OpenSections: number; // Number of opened accordion tabs\n}\n"]}