{"version":3,"file":"adapt-radar.module.js","sourceRoot":"","sources":["../../../../../libs/adapt-radar/src/lib/adapt-radar.module.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,cAAc,EAAE,MAAM,EAAE,SAAS,EAAuB,QAAQ,EAAE,QAAQ,EAAC,MAAM,eAAe,CAAC;AACzG,OAAO,EAAC,YAAY,EAAC,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAC,mBAAmB,EAAC,MAAM,yBAAyB,CAAC;AAC5D,OAAO,EAAC,iBAAiB,EAAC,MAAM,uBAAuB,CAAC;AACxD,OAAO,EAAC,wBAAwB,EAAC,MAAM,yBAAyB,CAAC;AACjE,OAAO,EAAC,+BAA+B,EAAC,MAAM,qBAAqB,CAAC;AAEpE,OAAO,EAAC,SAAS,EAAC,MAAM,iBAAiB,CAAC;AAC1C,OAAO,EAAC,KAAK,EAAC,MAAM,WAAW,CAAC;;AAQhC,MAAM,OAAO,gBAAgB;IAW3B,YAAoB,eAA+B,EACc,YAAoC;QADjF,oBAAe,GAAf,eAAe,CAAgB;QAEjD,IAAI,CAAC,YAAY,EAAE;YACjB,SAAS,CAAC,wDAAwD,CAAC,CAAC;YAEpE,OAAO;SACR;QAED,IAAI,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE;YAChC,SAAS,CAAC,wFAAwF,CAAC,CAAC;SACrG;QAED,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;IACtC,CAAC;IAvBD,MAAM,CAAC,OAAO,CAAC,YAAoC;QACjD,OAAO;YACL,QAAQ,EAAE,gBAAgB;YAC1B,SAAS,EAAE;gBACT,EAAC,OAAO,EAAE,+BAA+B,EAAE,QAAQ,EAAE,YAAY,EAAC;gBAClE,iBAAiB;aAClB;SACF,CAAC;IACJ,CAAC;IAiBD;;OAEG;IACK,gBAAgB,CAAC,YAAoC;QAC3D,MAAM,iBAAiB,GAAG,YAAY,CAAC,QAAQ,CAAC;QAEhD,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,iBAAiB,IAAI,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;YACxF,OAAO;SACR;QAED,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;;YAC/C,IAAI,MAAM,EAAE;gBACV,MAAM,UAAU,GAAG,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC;gBACnD,MAAM,aAAa,GAAG,UAAU,CAAC,CAAC,CAAC,MAAA,MAAA,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC,CAAC,0CAAE,QAAQ,0CAAE,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC;gBAEtG,IAAI,aAAa,EAAE;oBACjB,MAAM,wBAAwB,GAAG,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;oBAEnE,wBAAwB,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;wBACvC,aAAa,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;oBACvF,CAAC,CAAC,CAAC;iBACJ;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;;gFAlDU,gBAAgB,8CAYP,+BAA+B;kEAZxC,gBAAgB;sEAJlB,CAAC,YAAY,CAAC;uFAIZ,gBAAgB;cAL5B,QAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,YAAY,CAAC;gBACvB,YAAY,EAAE,CAAC,mBAAmB,EAAE,wBAAwB,CAAC;gBAC7D,OAAO,EAAE,CAAC,mBAAmB,EAAE,wBAAwB,CAAC;aACzD;;sBAac,MAAM;uBAAC,+BAA+B;;sBAAG,QAAQ;;wFAZnD,gBAAgB,mBAHZ,mBAAmB,EAAE,wBAAwB,aADlD,YAAY,aAEZ,mBAAmB,EAAE,wBAAwB","sourcesContent":["import {ApplicationRef, Inject, isDevMode, ModuleWithProviders, NgModule, Optional} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {AdaptRadarDirective} from './adapt-radar.directive';\nimport {AdaptRadarService} from './adapt-radar.service';\nimport {AdaptRadarPixelDirective} from './pixel/pixel.directive';\nimport {ADAPT_RADAR_MODULE_CONFIG_TOKEN} from './adapt-radar.token';\nimport {AdaptRadarModuleConfig} from './adapt-radar.model';\nimport {adaptWarn} from './common/logger';\nimport {isNil} from 'lodash-es';\n\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [AdaptRadarDirective, AdaptRadarPixelDirective],\n  exports: [AdaptRadarDirective, AdaptRadarPixelDirective]\n})\nexport class AdaptRadarModule {\n  static forRoot(moduleConfig: AdaptRadarModuleConfig): ModuleWithProviders<AdaptRadarModule> {\n    return {\n      ngModule: AdaptRadarModule,\n      providers: [\n        {provide: ADAPT_RADAR_MODULE_CONFIG_TOKEN, useValue: moduleConfig},\n        AdaptRadarService\n      ]\n    };\n  }\n\n  constructor(private _applicationRef: ApplicationRef,\n              @Inject(ADAPT_RADAR_MODULE_CONFIG_TOKEN) @Optional() moduleConfig: AdaptRadarModuleConfig) {\n    if (!moduleConfig) {\n      adaptWarn('ADAPT RADAR: Please provide RADAR module configuration');\n\n      return;\n    }\n\n    if (isNil(moduleConfig.versions)) {\n      adaptWarn('ADAPT RADAR: Please provide \"versions\" property for an easier ADAPT versions targeting');\n    }\n\n    this._setVersionsInfo(moduleConfig);\n  }\n\n  /**\n   * Set versions info as attributes to the root element. Can be useful for debug. The same way as angular doing with its version\n   */\n  private _setVersionsInfo(moduleConfig: AdaptRadarModuleConfig): void {\n    const bmcUxPackagesInfo = moduleConfig.versions;\n\n    if (!isDevMode() || !bmcUxPackagesInfo || Object.entries(bmcUxPackagesInfo).length === 0) {\n      return;\n    }\n\n    this._applicationRef.isStable.subscribe(stable => {\n      if (stable) {\n        const components = this._applicationRef.components;\n        const rootComponent = components ? this._applicationRef.components[0]?.location?.nativeElement : null;\n\n        if (rootComponent) {\n          const bmcUxPackagesInfoEntries = Object.entries(bmcUxPackagesInfo);\n\n          bmcUxPackagesInfoEntries.forEach(entry => {\n            rootComponent.setAttribute(entry[0].toLowerCase().replace(/_/g, '-'), entry[1].full);\n          });\n        }\n      }\n    });\n  }\n}\n"]}