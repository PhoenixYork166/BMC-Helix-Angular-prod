{"version":3,"file":"adapt-radar.service.js","sourceRoot":"","sources":["../../../../../libs/adapt-radar/src/lib/adapt-radar.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {ApplicationRef, ElementRef, Injectable} from '@angular/core';\nimport {isNil} from 'lodash-es';\nimport {\n  AdaptRadarConfig,\n  AdaptRadarCustomEventData,\n  AdaptRadarCustomEventName,\n  AdaptRadarCustomEventType,\n  AdaptRadarPagePathEventData,\n  AdaptRadarProviderConfig,\n  AdaptRadarSupportedProviders,\n  AdaptRadarSupportedProvidersServices,\n} from './adapt-radar.model';\nimport {\n  AdaptRadarComponentAccordionData,\n  AdaptRadarComponentMenuData,\n  AdaptRadarComponentNavigationActionData,\n  AdaptRadarComponentNavigationAlertData,\n  AdaptRadarComponentNavigationData,\n  AdaptRadarComponentNavigationHamburgerData,\n  AdaptRadarComponentNavigationMenuData,\n  AdaptRadarComponentProfileData,\n  AdaptRadarComponentRxCheckboxData,\n  AdaptRadarComponentRxCounterData,\n  AdaptRadarComponentRxDateTimeData,\n  AdaptRadarComponentRxFeedbackData,\n  AdaptRadarComponentRxListBuilderData,\n  AdaptRadarComponentRxListSelectorData,\n  AdaptRadarComponentRxRadiobuttonData,\n  AdaptRadarComponentRxRatingBinaryData,\n  AdaptRadarComponentRxRatingDefaultData,\n  AdaptRadarComponentRxRatingLikeData,\n  AdaptRadarComponentRxRatingVotingData,\n  AdaptRadarComponentRxSearchData,\n  AdaptRadarComponentRxSelectData,\n  AdaptRadarComponentRxSwitchData,\n  AdaptRadarComponentRxTextareaData,\n  AdaptRadarComponentRxTextfieldData,\n  AdaptRadarComponentRxTimeSlotData,\n  AdaptRadarComponentTabsData,\n  AdaptRadarComponentTabsKebabMenuData,\n  AdaptRadarGenericComponentData,\n} from './adapt-radar-components.model';\nimport {AdaptRadarGainsightProvider} from './providers/gainsight/gainsight.service';\nimport {AdaptRadarGoogleGlobalSiteTagProvider} from './providers/google-global-site-tag/google-global-site-tag.service';\nimport {AdaptRadarGoogleTagManagerProvider} from './providers/google-tag-manager/google-tag-manager.service';\nimport {adaptError} from './common/logger';\n\n\n@Injectable({providedIn: 'root'})\nexport class AdaptRadarService {\n  enabledProvidersHashMap: Map<AdaptRadarSupportedProviders, AdaptRadarProviderConfig> = new Map<AdaptRadarSupportedProviders, AdaptRadarProviderConfig>();\n\n  private _config: AdaptRadarConfig;\n\n  constructor(\n    private _adaptRadarGGSTProvider: AdaptRadarGoogleGlobalSiteTagProvider,\n    private _adaptRadarGTMProvider: AdaptRadarGoogleTagManagerProvider,\n    private _adaptRadarGainsightProvider: AdaptRadarGainsightProvider,\n    private _applicationRef: ApplicationRef,\n  ) {\n  }\n\n  set config(conf: AdaptRadarConfig) {\n    this._config = conf;\n  }\n\n  get config(): AdaptRadarConfig {\n    return this._config;\n  }\n\n  /**\n   * The method is used to start collecting the data for all enabled providers\n   * It allows controlling the data collecting process on the customer side.\n   * For instance to turn on data collecting in run time when it needed based on user preferences or project business logic\n   *\n   * In case there is a requirement to toggle data collecting for a specific provider it can be done by calling the \"startDataCollecting\" method for the needed provider\n   */\n  startDataCollecting(config: AdaptRadarConfig): void {\n    this.config = config;\n\n    if (isNil(this.config)) {\n      adaptError('ADAPT RADAR: For correct work of RADAR service please provide a config');\n\n      return;\n    }\n\n    if (isNil(this.config.providers)) {\n      adaptError('ADAPT RADAR: Please provide \"providers\" property for a correct work of RADAR Module');\n\n      return;\n    }\n\n    this.enabledProvidersHashMap.clear();\n\n    this.config.providers\n      .filter(provider => !provider.disabled)\n      .forEach(provider => {\n        if (!provider.id) {\n          throw new Error(`ADAPT RADAR: Please provide correct \"ID\" for \"${provider.name}\" provider`);\n        }\n\n        this.enabledProvidersHashMap.set(provider.name, provider);\n        this.getProviderByName(provider.name).startDataCollecting(provider, this.config);\n      });\n  }\n\n  /**\n   * The method is used to stop collecting the data for all enabled providers\n   * It allows controlling the data collecting process on the customer side.\n   * For instance to turn off data collecting in run time when it needed based on user preferences or project business logic\n   */\n  stopDataCollecting(): void {\n    if (isNil(this.config)) {\n      adaptError('ADAPT RADAR: For correct work of RADAR service please provide a config');\n\n      return;\n    }\n\n    this.config.providers\n      .filter(provider => !provider.disabled)\n      .forEach(provider => {\n        if (!provider.id) {\n          throw new Error(`ADAPT RADAR: Please provide correct \"ID\" for \"${provider.name}\" provider`);\n        }\n\n        this.getProviderByName(provider.name).stopDataCollecting(provider);\n      });\n  }\n\n  /**\n   * Overloading method to have more strict typings for Adapt components\n   */\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptGenericComponent, customEventData: AdaptRadarCustomEventData<AdaptRadarGenericComponentData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.PagePath, customEventData: AdaptRadarCustomEventData<AdaptRadarPagePathEventData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptNavigation, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentNavigationData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptNavigationMenu, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentNavigationMenuData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptNavigationAction, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentNavigationActionData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptNavigationAlert, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentNavigationAlertData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptNavigationHamburger, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentNavigationHamburgerData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptMenu, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentMenuData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptProfile, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentProfileData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptTabs, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentTabsData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptTabsKebabMenu, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentTabsKebabMenuData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptRxSearch, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentRxSearchData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptRxTextfield, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentRxTextfieldData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptRxTextarea, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentRxTextareaData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptRxCounter, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentRxCounterData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptRxCheckbox, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentRxCheckboxData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptRxDatetime, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentRxDateTimeData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptRxTimeSlot, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentRxTimeSlotData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptRxListSelector, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentRxListSelectorData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptRxListBuilder, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentRxListBuilderData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptRxRadiobutton, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentRxRadiobuttonData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptRxRating, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentRxRatingDefaultData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptRxRatingBinary, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentRxRatingBinaryData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptRxRatingLike, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentRxRatingLikeData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptRxRatingVoting, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentRxRatingVotingData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptRxSelect, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentRxSelectData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptRxSwitch, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentRxSwitchData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptRxFeedback, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentRxFeedbackData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName.AdaptAccordion, customEventData: AdaptRadarCustomEventData<AdaptRadarComponentAccordionData>, disableEventSending?: boolean): void;\n\n  sendCustomEventForAllProviders<T, U>(customEventName: T, customEventData: AdaptRadarCustomEventData<U>, disableEventSending?: boolean): void;\n\n  /**\n   * Method is used to send a custom event for all enabled providers\n   *\n   * @param customEventName - name of the event that will be logged into analytics system\n   * @param customEventData - custom data that need to be collect and associate with `customEventName`\n   * @param disableEventSending - if set to true restrict event sending atomically(for some specific places). Can be useful when event need to be send only based on some condition(eg. disable event sending for button components on weekends)\n   */\n  sendCustomEventForAllProviders(customEventName: AdaptRadarCustomEventName, customEventData: AdaptRadarCustomEventData, disableEventSending?: boolean): void {\n    if (this.enabledProvidersHashMap.size > 0 && !disableEventSending) {\n      this.enabledProvidersHashMap.forEach(provider => {\n        this.getProviderByName(provider.name).sendCustomEvent(customEventName, customEventData);\n      });\n    }\n  }\n\n  /**\n   * Method is used to send \"Generic\" event for all ADAPT components on Init.\n   *\n   * @param entityName {AdaptRadarCustomEventName} The name on the class of the component/directive\n   */\n  sendGenericComponentEvent(entityName: AdaptRadarCustomEventName): void {\n    const d = new Date();\n    const isoDate = d.toISOString();\n    const timestamp = d.valueOf();\n\n    this.sendCustomEventForAllProviders(AdaptRadarCustomEventName.AdaptGenericComponent, {\n      EventType: AdaptRadarCustomEventType.Init,\n      ComponentName: entityName,\n      PageTitle: document.title,\n      Date: d,\n      ISODate: isoDate,\n      Timestamp: timestamp\n    });\n  }\n\n  /**\n   * Method is used to get an instance of injected provider by its name\n   *\n   * @param name - the name of supported provider\n   *\n   * @return - instance of provider by its name\n   */\n  getProviderByName(name: AdaptRadarSupportedProviders): AdaptRadarSupportedProvidersServices {\n    switch (name) {\n      case AdaptRadarSupportedProviders.GoogleGlobalSiteTag:\n        return this._adaptRadarGGSTProvider;\n      case AdaptRadarSupportedProviders.GoogleTagManager:\n        return this._adaptRadarGTMProvider;\n      case AdaptRadarSupportedProviders.Gainsight:\n        return this._adaptRadarGainsightProvider;\n      default:\n        throw new Error('ADAPT RADAR: No supported provider found');\n    }\n  }\n\n  subscribeOnElementIntersect(adaptRadarDisableEventSending: boolean, element: ElementRef<HTMLElement>, entityName: AdaptRadarCustomEventName): IntersectionObserver | null {\n    if (adaptRadarDisableEventSending || !element?.nativeElement) {\n      return null;\n    }\n\n    const elementIntersectObserver = new IntersectionObserver(([entry]) => {\n      if (entry.isIntersecting) {\n        this.sendGenericComponentEvent(entityName);\n\n        elementIntersectObserver.disconnect();\n      }\n    }, {root: null, threshold: 0, rootMargin: '0px 0px 0px 0px'});\n\n    elementIntersectObserver.observe(element.nativeElement);\n\n    return elementIntersectObserver;\n  }\n}\n"]}