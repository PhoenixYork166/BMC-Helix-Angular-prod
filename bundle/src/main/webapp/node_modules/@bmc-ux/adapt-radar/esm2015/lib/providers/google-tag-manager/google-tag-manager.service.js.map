{"version":3,"file":"google-tag-manager.service.js","sourceRoot":"","sources":["../../../../../../../libs/adapt-radar/src/lib/providers/google-tag-manager/google-tag-manager.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,UAAU,EAAY,MAAM,eAAe,CAAC;AAOpD,OAAO,EAAC,gBAAgB,EAAC,MAAM,yBAAyB,CAAC;AACzD,OAAO,EAAC,0BAA0B,EAAC,MAAM,sBAAsB,CAAC;AAChE,OAAO,EAAC,IAAI,EAAE,SAAS,EAAC,MAAM,gBAAgB,CAAC;AAC/C,OAAO,EAAC,eAAe,EAAc,aAAa,EAAC,MAAM,MAAM,CAAC;;AAIhE,MAAM,OAAO,kCAAkC;IAD/C;QAKU,gBAAW,GAA2B,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC;QAC3D,gBAAW,GAA6B,IAAI,eAAe,CAAU,KAAK,CAAC,CAAC;QAEpF,6EAA6E;QACpE,UAAK,GAAwB,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;KAiEvE;IA/DC,MAAM,CAAC,aAAa,CAAC,EAAU,EAAE,gBAAwB;QACvD,OAAO,gBAAgB,IAAI,0BAA0B,CAAC,EAAE,CAAC,CAAC;IAC5D,CAAC;IAED,IAAI,YAAY;QACd,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED,WAAW;QACT,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5B,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;IAC9B,CAAC;IAED;;;;;;;OAOG;IACH,mBAAmB,CAAC,cAAwC,EAAE,WAA6B;QACzF,IAAI,CAAC,GAAG,GAAG,cAAc,CAAC,EAAE,CAAC;QAC7B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,WAAW,CAAC;QAE5C,IAAI,CAAC,YAAY;aACd,SAAS,CAAC,aAAa,CAAC,EAAE;YAEzB,IAAI,aAAa,EAAE;gBACjB,OAAO;aACR;YAED,IAAI,cAAc,CAAC,UAAU,KAAK,KAAK,EAAE;gBACvC,gBAAgB,CAAC,kCAAkC,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE,EAAE,cAAc,CAAC,UAAU,CAAC,CAAC,CAAC;aAClH;YAED,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,kBAAkB;QAChB,uBAAuB;QAEvB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;IAED,gEAAgE;IAChE,eAAe,CAAC,eAA0C,EAAE,eAA0C;QACpG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE;YAC1C,IAAI,aAAa,EAAE;gBACjB,0BAA0B;aAC3B;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE;YAC1C,IAAI,aAAa,EAAE;gBACjB,sBAAsB;aACvB;QACH,CAAC,CAAC,CAAC;IACL,CAAC;;oHAxEU,kCAAkC;wFAAlC,kCAAkC,WAAlC,kCAAkC,mBADtB,MAAM;uFAClB,kCAAkC;cAD9C,UAAU;eAAC,EAAC,UAAU,EAAE,MAAM,EAAC","sourcesContent":["import {Injectable, OnDestroy} from '@angular/core';\nimport {\n  AdaptRadarConfig,\n  AdaptRadarCustomEventData,\n  AdaptRadarCustomEventName,\n  AdaptRadarProviderConfig\n} from '../../adapt-radar.model';\nimport {injectInitScript} from '../../adapt-radar.utils';\nimport {googleTagManagerInitScript} from '../providers-scripts';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {BehaviorSubject, Observable, ReplaySubject} from 'rxjs';\nimport {AdaptRadarProductInfo} from '../../adapt-radar-products.model';\n\n@Injectable({providedIn: 'root'})\nexport class AdaptRadarGoogleTagManagerProvider implements OnDestroy {\n  private _id: string;\n  private _radarConfig: AdaptRadarConfig;\n  private _productInfo: AdaptRadarProductInfo;\n  private _destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n  private _initSource: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  // Observable that can be used to check Gainsight script initialization state\n  readonly init$: Observable<boolean> = this._initSource.asObservable();\n\n  static getInitScript(id: string, customInitScript: string): string {\n    return customInitScript || googleTagManagerInitScript(id);\n  }\n\n  get initProcess$(): Observable<boolean> {\n    return this.init$.pipe(take(1), takeUntil(this._destroyed$));\n  }\n\n  ngOnDestroy(): void {\n    this._destroyed$.next(true);\n    this._destroyed$.complete();\n  }\n\n  /**\n   * The method is used to start collecting the data for the current provider\n   * It allows controlling the data collecting process on the customer side.\n   * For instance to turn on data collecting in run time when it needed based on user preferences or project business logic\n   *\n   * @param providerConfig - config for provider that need to be initialized\n   * @param radarConfig - main RADAR module config\n   */\n  startDataCollecting(providerConfig: AdaptRadarProviderConfig, radarConfig: AdaptRadarConfig): void {\n    this._id = providerConfig.id;\n    this._radarConfig = radarConfig;\n    this._productInfo = radarConfig.productInfo;\n\n    this.initProcess$\n      .subscribe(isInitialized => {\n\n        if (isInitialized) {\n          return;\n        }\n\n        if (providerConfig.initScript !== false) {\n          injectInitScript(AdaptRadarGoogleTagManagerProvider.getInitScript(providerConfig.id, providerConfig.initScript));\n        }\n\n        this._initSource.next(true);\n      });\n  }\n\n  stopDataCollecting(): void {\n    // stop data collection\n\n    this._initSource.next(false);\n  }\n\n  /* eslint-disable-next-line @typescript-eslint/no-unused-vars */\n  sendCustomEvent(customEventName: AdaptRadarCustomEventName, customEventData: AdaptRadarCustomEventData): void {\n    this.initProcess$.subscribe(isInitialized => {\n      if (isInitialized) {\n        // send event for GTM here\n      }\n    });\n  }\n\n  sendGlobalData(): void {\n    this.initProcess$.subscribe(isInitialized => {\n      if (isInitialized) {\n        // sending global data\n      }\n    });\n  }\n}\n"]}