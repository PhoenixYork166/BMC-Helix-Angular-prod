import { Injectable } from '@angular/core';
import { injectInitScript } from '../../adapt-radar.utils';
import { googleTagManagerInitScript } from '../providers-scripts';
import { take, takeUntil } from 'rxjs/operators';
import { BehaviorSubject, ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
export class AdaptRadarGoogleTagManagerProvider {
    constructor() {
        this._destroyed$ = new ReplaySubject(1);
        this._initSource = new BehaviorSubject(false);
        // Observable that can be used to check Gainsight script initialization state
        this.init$ = this._initSource.asObservable();
    }
    static getInitScript(id, customInitScript) {
        return customInitScript || googleTagManagerInitScript(id);
    }
    get initProcess$() {
        return this.init$.pipe(take(1), takeUntil(this._destroyed$));
    }
    ngOnDestroy() {
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
    /**
     * The method is used to start collecting the data for the current provider
     * It allows controlling the data collecting process on the customer side.
     * For instance to turn on data collecting in run time when it needed based on user preferences or project business logic
     *
     * @param providerConfig - config for provider that need to be initialized
     * @param radarConfig - main RADAR module config
     */
    startDataCollecting(providerConfig, radarConfig) {
        this._id = providerConfig.id;
        this._radarConfig = radarConfig;
        this._productInfo = radarConfig.productInfo;
        this.initProcess$
            .subscribe(isInitialized => {
            if (isInitialized) {
                return;
            }
            if (providerConfig.initScript !== false) {
                injectInitScript(AdaptRadarGoogleTagManagerProvider.getInitScript(providerConfig.id, providerConfig.initScript));
            }
            this._initSource.next(true);
        });
    }
    stopDataCollecting() {
        // stop data collection
        this._initSource.next(false);
    }
    /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
    sendCustomEvent(customEventName, customEventData) {
        this.initProcess$.subscribe(isInitialized => {
            if (isInitialized) {
                // send event for GTM here
            }
        });
    }
    sendGlobalData() {
        this.initProcess$.subscribe(isInitialized => {
            if (isInitialized) {
                // sending global data
            }
        });
    }
}
AdaptRadarGoogleTagManagerProvider.ɵfac = function AdaptRadarGoogleTagManagerProvider_Factory(t) { return new (t || AdaptRadarGoogleTagManagerProvider)(); };
AdaptRadarGoogleTagManagerProvider.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptRadarGoogleTagManagerProvider, factory: AdaptRadarGoogleTagManagerProvider.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRadarGoogleTagManagerProvider, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();
//# sourceMappingURL=google-tag-manager.service.js.map