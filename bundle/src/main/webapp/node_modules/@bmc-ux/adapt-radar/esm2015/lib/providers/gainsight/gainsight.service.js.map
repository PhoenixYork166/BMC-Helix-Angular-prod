{"version":3,"file":"gainsight.service.js","sourceRoot":"","sources":["../../../../../../../libs/adapt-radar/src/lib/providers/gainsight/gainsight.service.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Gainsight provider\n * API docs - https://support.gainsight.com/PX/API_for_Developers\n */\n\nimport {Injectable, OnDestroy} from '@angular/core';\nimport {isNil, isNull} from 'lodash-es';\nimport {BehaviorSubject, Observable, ReplaySubject} from 'rxjs';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  AdaptRadarConfig,\n  AdaptRadarCustomEventData,\n  AdaptRadarCustomEventName,\n  AdaptRadarGlobalData,\n  AdaptRadarProviderConfig,\n  AdaptRadarStorageKey,\n  AdaptRadarURLChangedCollectedEventData,\n} from '../../adapt-radar.model';\nimport {injectInitScript} from '../../adapt-radar.utils';\nimport {AdaptRadarGlobal} from '../../common/global-data';\nimport {AdaptRadarURLChangeTracker} from '../../common/url-change-tracker';\nimport {gainsightInitScript} from '../providers-scripts';\nimport {\n  AdaptRadarGainsightConfigName,\n  AdaptRadarGainsightEventName,\n  AdaptRadarGainsightIdentifyAccountData,\n  AdaptRadarGainsightIdentifyActionName,\n  AdaptRadarGainsightIdentifyUserData\n} from './gainsight.model';\nimport {adaptError} from '../../common/logger';\nimport {flattenProductInfo} from '../../adapt-radar-products.model';\n\ndeclare function aptrinsic(gainsightEventName: AdaptRadarGainsightEventName, customEventName: AdaptRadarCustomEventName, customEventData: AdaptRadarCustomEventData): void;\n// eslint-disable-next-line no-redeclare\ndeclare function aptrinsic(gainsightEventName: AdaptRadarGainsightEventName.Identify, userData: AdaptRadarGainsightIdentifyUserData, accountData: AdaptRadarGainsightIdentifyAccountData): void;\n// eslint-disable-next-line no-redeclare\ndeclare function aptrinsic(gainsightEventName: AdaptRadarGainsightEventName.Config, configName: AdaptRadarGainsightConfigName, configData: boolean): void;\n\n\n@Injectable({providedIn: 'root'})\nexport class AdaptRadarGainsightProvider implements OnDestroy {\n  static readonly notAuthorizedUserId: string = 'bmc-not-authorized-user';\n\n\n  private _radarConfig: AdaptRadarConfig;\n  private _providerConfig: AdaptRadarProviderConfig;\n  private _isIdentifyEventSent: boolean = false;\n  private _destroyed$: ReplaySubject<boolean> = new ReplaySubject(1);\n  private _initSource: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  // Observable that can be used to check Gainsight script initialization state\n  readonly init$: Observable<boolean> = this._initSource.asObservable();\n\n  static getInitScript(id: string, customInitScript: string, customSourceScript: string): string {\n    return customInitScript || gainsightInitScript(id, customSourceScript);\n  }\n\n  get initProcess$(): Observable<boolean> {\n    return this.init$.pipe(take(1), takeUntil(this._destroyed$));\n  }\n\n  constructor(private _adaptRadarGlobal: AdaptRadarGlobal, private _adaptRadarURLChangeTracker: AdaptRadarURLChangeTracker) {\n  }\n\n  ngOnDestroy(): void {\n    this._adaptRadarURLChangeTracker.unsubscribeFromURLChange();\n\n    this._destroyed$.next(true);\n    this._destroyed$.complete();\n  }\n\n  /**\n   * The method is used to start collecting the data for the current provider\n   * It allows controlling the data collecting process on the customer side.\n   * For instance to turn on data collecting in run time when it needed based on user preferences or project business logic\n   *\n   * @param providerConfig - config for provider that need to be initialized\n   * @param radarConfig - main RADAR config\n   */\n  startDataCollecting(providerConfig: AdaptRadarProviderConfig, radarConfig: AdaptRadarConfig): void {\n    this._providerConfig = providerConfig;\n    this._radarConfig = radarConfig;\n\n    this.initProcess$\n      .subscribe(isInitialized => {\n\n        if (isInitialized) {\n          this.toggleUserTracking(true);\n\n          return;\n        }\n\n        if (this._providerConfig.initScript !== false) {\n          injectInitScript(AdaptRadarGainsightProvider.getInitScript(this._providerConfig.id, this._providerConfig.initScript, this._providerConfig.sourceScript as string));\n        }\n\n        // Check if Gainsight script initialized\n        let counter = 0;\n        const interval = setInterval(() => {\n          // timeout is 5min\n          // 300 * 1000 = 300000ms = 300sec = 5min\n          if (counter < 1000) {\n            if (aptrinsic && aptrinsic['init']) {\n              clearInterval(interval);\n              this._initSource.next(true);\n\n              this.sendGlobalData(AdaptRadarCustomEventName.AdaptGlobalData, this._adaptRadarGlobal.getGlobalData());\n              this._subscribeOnURLChange();\n            }\n\n            counter++;\n          } else {\n            clearInterval(interval);\n            adaptError('ADAPT RADAR: Gainsight provider initialization timeout error');\n          }\n        }, 300);\n      });\n  }\n\n  /**\n   * The method is used to stop collecting the data for the current provider\n   * It allows controlling the data collecting process on the customer side.\n   * For instance to turn off data collecting in run time when it needed based on user preferences or project business logic\n   */\n  stopDataCollecting(): void {\n    this.initProcess$.subscribe(isInitialized => {\n      if (isInitialized) {\n        this.toggleUserTracking(false);\n      }\n    });\n  }\n\n  /**\n   * Method is used to send 'identify' event for correct work of 'Gainsight' provider\n   * The \"identify\" call should be made during the authorization/login area of your web application\n   * More information can be found here - https://support.gainsight.com/PX/API_for_Developers/01About/Track_your_Users_and_Accounts\n   *\n   * @param userData - list of attributes that will be logged in Gainsight analytics system.\n   * `id` is required for logged-in user. By default, `id` is - `bmc-not-authorized-user`\n   * @param accountData - list of attributes that will be logged in Gainsight analytics system.\n   * `id` is required for logged-in user. There is no default value for account id so pay attention to correctly set it if needed\n   *\n   * @example\n   * sendIdentifyEvent({id: \"user-id\"}, {id: \"account-id\"});\n   * converted to ->\n   * aptrinsic('identify', {\"id\": \"user-id\"}, {\"id\": \"account-id\"});\n   */\n  sendIdentifyEvent(userData?: AdaptRadarGainsightIdentifyUserData, accountData?: AdaptRadarGainsightIdentifyAccountData): void {\n    this.initProcess$.subscribe(isInitialized => {\n      if (isInitialized) {\n        aptrinsic(AdaptRadarGainsightEventName.Identify, {'id': userData?.id ? userData.id : AdaptRadarGainsightProvider.notAuthorizedUserId, ...userData}, accountData);\n        this._isIdentifyEventSent = true;\n      }\n    });\n  }\n\n  /**\n   * Method is used to send custom events into Gainsight analytics system.\n   *\n   * @param customEventName - name of the event that will be logged into Gainsight analytics system\n   * @param customEventData - custom data that need to be collect and associate with `customEventName`\n   *\n   * @example\n   * sendCustomEvent(AdaptRadarCustomEventName.PagePath, {url: \"some/url/path\"})\n   * converted to ->\n   * aptrinsic('track', 'page_path', {\"url\": \"some/url/path\"})\n   */\n  sendCustomEvent(customEventName: AdaptRadarCustomEventName, customEventData: AdaptRadarCustomEventData): void {\n    this.initProcess$.subscribe(isInitialized => {\n      if (isInitialized) {\n        // Try to send identify event based on 'oneTimeActions' property from 'providerConfig'\n        // This can be useful if customer don't want to send gainsight event manually, so it will be done automatically with first customer event\n        if (!this._isIdentifyEventSent) {\n          this._processIdentifyAction();\n        }\n\n        aptrinsic(AdaptRadarGainsightEventName.Track, customEventName, customEventData);\n      }\n    });\n  }\n\n  /**\n   * Method is used to send global data(browser version, os version, localization settings, etc.)\n   * Check if data was sent for current session and avoid double sending\n   *\n   * @param customEventName - name of the event that will be logged into Gainsight analytics system\n   * @param customEventData - custom data that need to be collect and associate with `customEventName`\n   */\n  sendGlobalData(customEventName: AdaptRadarCustomEventName.AdaptGlobalData, customEventData: AdaptRadarCustomEventData<AdaptRadarGlobalData>): void {\n    const isGlobalDataSent = sessionStorage.getItem(AdaptRadarStorageKey.GainsightGlobalDataSent);\n\n    this.initProcess$.subscribe(isInitialized => {\n      if (isInitialized && isGlobalDataSent !== 'true') {\n        this.sendCustomEvent(customEventName, customEventData);\n        sessionStorage.setItem(AdaptRadarStorageKey.GainsightGlobalDataSent, 'true');\n      }\n    });\n  }\n\n  /**\n   * Method is used to set \"global context\"\n   *\n   * More info can be found here - https://support.gainsight.com/PX/Engagements/02Engagement_Configuration/Use_Global_Context\n   *\n   * @param contextData - custom data that need to be collect and associate with \"globalContext\".\n   * Global context data will be automatically extended with \"AdaptRadarProductInfo\" passed as \"productInfo\" property on \"AdaptRadarConfig\";\n   *\n   * @param once - flag that used to send \"SetOnce\" instead of \"Set\" for a \"globalContext\"\n   *\n   * @example\n   * setGlobalContext({'projectId' : 67890})\n   * converted to ->\n   * aptrinsic('set', 'globalContext', {\n   *   'projectId' : 67890,\n   *   'productAreaName': 'Discovery',\n   *   'productAreaVersion': '11.22.33',\n   *   'mainProductHostingType': 'SaaS'\n   * });\n   *\n   * setGlobalContext({'projectId' : 45673}, true)\n   * converted to ->\n   * aptrinsic('setOnce', 'globalContext', {\n   *   'projectId' : 45673,\n   *   'productAreaName': 'Discovery',\n   *   'productAreaVersion': '11.22.33',\n   *   'productAreaHosting': 'SaaS'\n   * });\n   */\n  setGlobalContext(contextData: AdaptRadarCustomEventData<Record<string, unknown>>, once: boolean = false): void {\n    this.initProcess$.subscribe(isInitialized => {\n      if (isInitialized) {\n        const eventName = once ? AdaptRadarGainsightEventName.SetOnce : AdaptRadarGainsightEventName.Set;\n        const productInfoFlat = flattenProductInfo(this._radarConfig.productInfo);\n        const contextDataExtended = !isNull(productInfoFlat) ? {...contextData, ...productInfoFlat} : contextData;\n\n        aptrinsic(eventName, AdaptRadarCustomEventName.GlobalContext, contextDataExtended);\n      }\n    });\n  }\n\n  /**\n   * Method is used to remove \"global context\"\n   *\n   * More info can be found here - https://support.gainsight.com/PX/Engagements/02Engagement_Configuration/Use_Global_Context\n   *\n   * @param dataToRemove - array of string keys to remove\n   *\n   * @example\n   * removeGlobalContext([\"projectId\"])\n   * converted to ->\n   * aptrinsic('remove', 'globalContext', [\"projectId\"])\n   */\n  removeGlobalContext(dataToRemove: string[]): void {\n    this.initProcess$.subscribe(isInitialized => {\n      if (isInitialized) {\n        aptrinsic(AdaptRadarGainsightEventName.Remove, AdaptRadarCustomEventName.GlobalContext, dataToRemove);\n      }\n    });\n  }\n\n  /**\n   * Method is used to send information when URL changed\n   *\n   * @param customEventName - name of the event that will be logged into Gainsight analytics system\n   * @param customEventData - custom data that need to be collect and associate with `customEventName`\n   */\n  sendURLChangeEvent(customEventName: AdaptRadarCustomEventName.AdaptURLChanged, customEventData: AdaptRadarCustomEventData<AdaptRadarURLChangedCollectedEventData>): void {\n    this.sendCustomEvent(customEventName, customEventData);\n  }\n\n  /**\n   * Opt-Out User Tracking\n   * Use Config API to opt-out from tracking the current user.\n   * This API allows the admin to easily make the call for any users for whom they do not want cookies stored or\n   * network calls made back to PX, essentially never hitting the PX Server.\n   * The selected users will not view any active engagements or Knowledge Center Bot.\n   *\n   * Gainsight docs: https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Use_Config_API\n   *\n   * @param isEnabled - tracking state (true for Out-In, false for Opt-Out)\n   */\n  toggleUserTracking(isEnabled: boolean): void {\n    aptrinsic(AdaptRadarGainsightEventName.Config, AdaptRadarGainsightConfigName.EnableTag, isEnabled);\n\n    this._initSource.next(isEnabled);\n  }\n\n  private _subscribeOnURLChange(): void {\n    this._adaptRadarURLChangeTracker.unsubscribeFromURLChange();\n\n    this._adaptRadarURLChangeTracker.urlChange()\n      .pipe(takeUntil(this._destroyed$))\n      .subscribe(urlChangeData => {\n        this.sendURLChangeEvent(AdaptRadarCustomEventName.AdaptURLChanged, {\n          PageTitle: urlChangeData.PageTitle,\n          TimeOnPageInMilliseconds: urlChangeData.TimeOnPageInMilliseconds,\n          TimeOnPageInSeconds: urlChangeData.TimeOnPageInSeconds,\n          TimeOnPage: urlChangeData.TimeOnPage\n        });\n      });\n  }\n\n  private _processIdentifyAction(): void {\n    if (this._providerConfig.oneTimeActions?.length) {\n      const userInfoAction = this._providerConfig.oneTimeActions.find(action => action.name === AdaptRadarGainsightIdentifyActionName.UserIdentify);\n      const userData = userInfoAction?.data;\n\n      if (!isNil(userData)) {\n        this.sendIdentifyEvent(userData.userData, userData.accountData);\n      }\n    }\n  }\n}\n"]}