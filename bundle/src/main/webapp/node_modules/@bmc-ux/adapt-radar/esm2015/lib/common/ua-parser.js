/**
 * The main goal of UA parser is to convert user agent string to human readable information
 *
 * Example:
 *
 * user agent string:
 * "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
 *
 * will be converted into object:
 * {
 *  BrowserDetailedVersion: "95.0.4638.69"
 *  BrowserType: "Chrome"
 *  BrowserVersion: "95"
 *  OperatingSystem: "Mac OS"
 *  OperatingSystemVersion: "10.15.7"
 * }
 *
 *
 * The main part of code was taken from - https://github.com/faisalman/ua-parser-js (version: "0.7.28", date: "21 October 2021")
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
const EMPTY = '', UNKNOWN = '?', FUNC_TYPE = 'function', UNDEF_TYPE = 'undefined', OBJ_TYPE = 'object', STR_TYPE = 'string', MODEL = 'model', NAME = 'name', TYPE = 'type', VENDOR = 'vendor', VERSION = 'version', ARCHITECTURE = 'architecture', MOBILE = 'mobile', TABLET = 'tablet', WEARABLE = 'wearable', EMBEDDED = 'embedded', UA_MAX_LENGTH = 255;
export var AdaptRadarUAVendor;
(function (AdaptRadarUAVendor) {
    AdaptRadarUAVendor["AMAZON"] = "Amazon";
    AdaptRadarUAVendor["APPLE"] = "Apple";
    AdaptRadarUAVendor["ASUS"] = "ASUS";
    AdaptRadarUAVendor["BLACKBERRY"] = "BlackBerry";
    AdaptRadarUAVendor["BROWSER"] = "Browser";
    AdaptRadarUAVendor["CHROME"] = "Chrome";
    AdaptRadarUAVendor["EDGE"] = "Edge";
    AdaptRadarUAVendor["FIREFOX"] = "Firefox";
    AdaptRadarUAVendor["GOOGLE"] = "Google";
    AdaptRadarUAVendor["HUAWEI"] = "Huawei";
    AdaptRadarUAVendor["LG"] = "LG";
    AdaptRadarUAVendor["MICROSOFT"] = "Microsoft";
    AdaptRadarUAVendor["MOTOROLA"] = "Motorola";
    AdaptRadarUAVendor["OPERA"] = "Opera";
    AdaptRadarUAVendor["SAMSUNG"] = "Samsung";
    AdaptRadarUAVendor["SONY"] = "Sony";
    AdaptRadarUAVendor["XIAOMI"] = "Xiaomi";
    AdaptRadarUAVendor["ZEBRA"] = "Zebra";
    AdaptRadarUAVendor["FACEBOOK"] = "Facebook";
})(AdaptRadarUAVendor || (AdaptRadarUAVendor = {}));
/**
 * Service used to convert data from browser user agent to readable information
 */
export class AdaptRadarUAParser {
    constructor() {
        this.windowsVersionMap = {
            'ME': '4.90',
            'NT 3.11': 'NT3.51',
            'NT 4.0': 'NT4.0',
            '2000': 'NT 5.0',
            'XP': ['NT 5.1', 'NT 5.2'],
            'Vista': 'NT 6.0',
            '7': 'NT 6.1',
            '8': 'NT 6.2',
            '8.1': 'NT 6.3',
            '10': ['NT 6.4', 'NT 10.0'],
            'RT': 'ARM'
        };
        /* eslint-disable no-useless-escape */
        this.regexes = {
            browser: [
                [
                    /\b(?:crmo|crios)\/([\w\.]+)/i // Chrome for Android/iOS
                ], [VERSION, [NAME, 'Chrome']], [
                    /edg(?:e|ios|a)?\/([\w\.]+)/i // Microsoft Edge
                ], [VERSION, [NAME, 'Edge']], [
                    // Presto based
                    /(opera mini)\/([-\w\.]+)/i,
                    /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
                    /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i // Opera
                ], [NAME, VERSION], [
                    /opios[\/ ]+([\w\.]+)/i // Opera mini on iphone >= 8.0
                ], [VERSION, [NAME, AdaptRadarUAVendor.OPERA + ' Mini']], [
                    /\bopr\/([\w\.]+)/i // Opera Webkit
                ], [VERSION, [NAME, AdaptRadarUAVendor.OPERA]], [
                    // Mixed
                    /(kindle)\/([\w\.]+)/i,
                    /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,
                    // Trident based
                    /(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,
                    /(ba?idubrowser)[\/ ]?([\w\.]+)/i,
                    /(?:ms|\()(ie) ([\w\.]+)/i,
                    // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
                    /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale|qqbrowserlite|qq)\/([-\w\.]+)/i,
                    // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ
                    /(weibo)__([\d\.]+)/i // Weibo
                ], [NAME, VERSION], [
                    /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i // UCBrowser
                ], [VERSION, [NAME, 'UC' + AdaptRadarUAVendor.BROWSER]], [
                    /\bqbcore\/([\w\.]+)/i // WeChat Desktop for Windows Built-in Browser
                ], [VERSION, [NAME, 'WeChat(Win) Desktop']], [
                    /micromessenger\/([\w\.]+)/i // WeChat
                ], [VERSION, [NAME, 'WeChat']], [
                    /konqueror\/([\w\.]+)/i // Konqueror
                ], [VERSION, [NAME, 'Konqueror']], [
                    /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i // IE11
                ], [VERSION, [NAME, 'IE']], [
                    /yabrowser\/([\w\.]+)/i // Yandex
                ], [VERSION, [NAME, 'Yandex']], [
                    /(avast|avg)\/([\w\.]+)/i // Avast/AVG Secure Browser
                ], [[NAME, /(.+)/, '$1 Secure ' + AdaptRadarUAVendor.BROWSER], VERSION], [
                    /\bfocus\/([\w\.]+)/i // Firefox Focus
                ], [VERSION, [NAME, AdaptRadarUAVendor.FIREFOX + ' Focus']], [
                    /\bopt\/([\w\.]+)/i // Opera Touch
                ], [VERSION, [NAME, AdaptRadarUAVendor.OPERA + ' Touch']], [
                    /coc_coc\w+\/([\w\.]+)/i // Coc Coc Browser
                ], [VERSION, [NAME, 'Coc Coc']], [
                    /dolfin\/([\w\.]+)/i // Dolphin
                ], [VERSION, [NAME, 'Dolphin']], [
                    /coast\/([\w\.]+)/i // Opera Coast
                ], [VERSION, [NAME, AdaptRadarUAVendor.OPERA + ' Coast']], [
                    /miuibrowser\/([\w\.]+)/i // MIUI Browser
                ], [VERSION, [NAME, 'MIUI ' + AdaptRadarUAVendor.BROWSER]], [
                    /fxios\/([-\w\.]+)/i // Firefox for iOS
                ], [VERSION, [NAME, AdaptRadarUAVendor.FIREFOX]], [
                    /\bqihu|(qi?ho?o?|360)browser/i // 360
                ], [[NAME, '360 ' + AdaptRadarUAVendor.BROWSER]], [
                    /(oculus|samsung|sailfish)browser\/([\w\.]+)/i
                ], [[NAME, /(.+)/, '$1 ' + AdaptRadarUAVendor.BROWSER], VERSION], [
                    /(comodo_dragon)\/([\w\.]+)/i // Comodo Dragon
                ], [[NAME, /_/g, ' '], VERSION], [
                    /(electron)\/([\w\.]+) safari/i,
                    /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
                    /m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i // QQBrowser/Baidu App/2345 Browser
                ], [NAME, VERSION], [
                    /(metasr)[\/ ]?([\w\.]+)/i,
                    /(lbbrowser)/i // LieBao Browser
                ], [NAME], [
                    // WebView
                    /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i // Facebook App for iOS & Android
                ], [[NAME, AdaptRadarUAVendor.FACEBOOK], VERSION], [
                    /safari (line)\/([\w\.]+)/i,
                    /\b(line)\/([\w\.]+)\/iab/i,
                    /(chromium|instagram)[\/ ]([-\w\.]+)/i // Chromium/Instagram
                ], [NAME, VERSION], [
                    /\bgsa\/([\w\.]+) .*safari\//i // Google Search Appliance on iOS
                ], [VERSION, [NAME, 'GSA']], [
                    /headlesschrome(?:\/([\w\.]+)| )/i // Chrome Headless
                ], [VERSION, [NAME, AdaptRadarUAVendor.CHROME + ' Headless']], [
                    / wv\).+(chrome)\/([\w\.]+)/i // Chrome WebView
                ], [[NAME, AdaptRadarUAVendor.CHROME + ' WebView'], VERSION], [
                    /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i // Android Browser
                ], [VERSION, [NAME, 'Android ' + AdaptRadarUAVendor.BROWSER]], [
                    /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i // Chrome/OmniWeb/Arora/Tizen/Nokia
                ], [NAME, VERSION], [
                    /version\/([\w\.]+) .*mobile\/\w+ (safari)/i // Mobile Safari
                ], [VERSION, [NAME, 'Mobile Safari']], [
                    /version\/([\w\.]+) .*(mobile ?safari|safari)/i // Safari & Safari Mobile
                ], [VERSION, NAME], [
                    /(webkit|khtml)\/([\w\.]+)/i
                ], [NAME, VERSION], [
                    // Gecko based
                    /(navigator|netscape\d?)\/([-\w\.]+)/i // Netscape
                ], [[NAME, 'Netscape'], VERSION], [
                    /mobile vr; rv:([\w\.]+)\).+firefox/i // Firefox Reality
                ], [VERSION, [NAME, AdaptRadarUAVendor.FIREFOX + ' Reality']], [
                    /ekiohf.+(flow)\/([\w\.]+)/i,
                    /(swiftfox)/i,
                    /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
                    // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar
                    /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
                    // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
                    /(firefox)\/([\w\.]+)/i,
                    /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
                    // Other
                    /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
                    // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser
                    /(links) \(([\w\.]+)/i // Links
                ], [NAME, VERSION]
            ],
            cpu: [
                [
                    /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i // AMD64 (x64)
                ], [[ARCHITECTURE, 'amd64']], [
                    /(ia32(?=;))/i // IA32 (quicktime)
                ], [[ARCHITECTURE, AdaptRadarUAParser.lowerize]], [
                    /((?:i[346]|x)86)[;\)]/i // IA32 (x86)
                ], [[ARCHITECTURE, 'ia32']], [
                    /\b(aarch64|arm(v?8e?l?|_?64))\b/i // ARM64
                ], [[ARCHITECTURE, 'arm64']], [
                    /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i // ARMHF
                ], [[ARCHITECTURE, 'armhf']], [
                    // PocketPC mistakenly identified as PowerPC
                    /windows (ce|mobile); ppc;/i
                ], [[ARCHITECTURE, 'arm']], [
                    /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i // PowerPC
                ], [[ARCHITECTURE, /ower/, EMPTY, AdaptRadarUAParser.lowerize]], [
                    /(sun4\w)[;\)]/i // SPARC
                ], [[ARCHITECTURE, 'sparc']], [
                    /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
                    // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
                ], [[ARCHITECTURE, AdaptRadarUAParser.lowerize]]
            ],
            device: [
                [
                    //////////////////////////
                    // MOBILES & TABLETS
                    // Ordered by popularity
                    /////////////////////////
                    // Samsung
                    /\b(sch-i[89]0\d|shw-m380s|sm-[pt]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.SAMSUNG], [TYPE, TABLET]], [
                    /\b((?:s[cgp]h|gt|sm)-\w+|galaxy nexus)/i,
                    /samsung[- ]([-\w]+)/i,
                    /sec-(sgh\w+)/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.SAMSUNG], [TYPE, MOBILE]], [
                    // Apple
                    /\((ip(?:hone|od)[\w ]*);/i // iPod/iPhone
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.APPLE], [TYPE, MOBILE]], [
                    /\((ipad);[-\w\),; ]+apple/i,
                    /applecoremedia\/[\w\.]+ \((ipad)/i,
                    /\b(ipad)\d\d?,\d\d?[;\]].+ios/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.APPLE], [TYPE, TABLET]], [
                    // Huawei
                    /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.HUAWEI], [TYPE, TABLET]], [
                    /(?:huawei|honor)([-\w ]+)[;\)]/i,
                    /\b(nexus 6p|\w{2,4}-[atu]?[ln][01259x][012359][an]?)\b(?!.+d\/s)/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.HUAWEI], [TYPE, MOBILE]], [
                    // Xiaomi
                    /\b(poco[\w ]+)(?: bui|\))/i,
                    /\b; (\w+) build\/hm\1/i,
                    /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
                    /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
                    /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i // Xiaomi Mi
                ], [[MODEL, /_/g, ' '], [VENDOR, AdaptRadarUAVendor.XIAOMI], [TYPE, MOBILE]], [
                    /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i // Mi Pad tablets
                ], [[MODEL, /_/g, ' '], [VENDOR, AdaptRadarUAVendor.XIAOMI], [TYPE, TABLET]], [
                    // OPPO
                    /; (\w+) bui.+ oppo/i,
                    /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007)\b/i
                ], [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]], [
                    // Vivo
                    /vivo (\w+)(?: bui|\))/i,
                    /\b(v[12]\d{3}\w?[at])(?: bui|;)/i
                ], [MODEL, [VENDOR, 'Vivo'], [TYPE, MOBILE]], [
                    // Realme
                    /\b(rmx[12]\d{3})(?: bui|;|\))/i
                ], [MODEL, [VENDOR, 'Realme'], [TYPE, MOBILE]], [
                    // Motorola
                    /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
                    /\bmot(?:orola)?[- ](\w*)/i,
                    /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.MOTOROLA], [TYPE, MOBILE]], [
                    /\b(mz60\d|xoom[2 ]{0,2}) build\//i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.MOTOROLA], [TYPE, TABLET]], [
                    // LG
                    /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.LG], [TYPE, TABLET]], [
                    /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
                    /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
                    /\blg-?([\d\w]+) bui/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.LG], [TYPE, MOBILE]], [
                    // Lenovo
                    /(ideatab[-\w ]+)/i,
                    /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i
                ], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [
                    // Nokia
                    /(?:maemo|nokia).*(n900|lumia \d+)/i,
                    /nokia[-_ ]?([-\w\.]*)/i
                ], [[MODEL, /_/g, ' '], [VENDOR, 'Nokia'], [TYPE, MOBILE]], [
                    // Google
                    /(pixel c)\b/i // Google Pixel C
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.GOOGLE], [TYPE, TABLET]], [
                    /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i // Google Pixel
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.GOOGLE], [TYPE, MOBILE]], [
                    // Sony
                    /droid.+ ([c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.SONY], [TYPE, MOBILE]], [
                    /sony tablet [ps]/i,
                    /\b(?:sony)?sgp\w+(?: bui|\))/i
                ], [[MODEL, 'Xperia Tablet'], [VENDOR, AdaptRadarUAVendor.SONY], [TYPE, TABLET]], [
                    // OnePlus
                    / (kb2005|in20[12]5|be20[12][59])\b/i,
                    /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i
                ], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [
                    // Amazon
                    /(alexa)webm/i,
                    /(kf[a-z]{2}wi)( bui|\))/i,
                    /(kf[a-z]+)( bui|\)).+silk\//i // Kindle Fire HD
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.AMAZON], [TYPE, TABLET]], [
                    /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i // Fire Phone
                ], [[MODEL, /(.+)/g, 'Fire Phone $1'], [VENDOR, AdaptRadarUAVendor.AMAZON], [TYPE, MOBILE]], [
                    // BlackBerry
                    /(playbook);[-\w\),; ]+(rim)/i // BlackBerry PlayBook
                ], [MODEL, VENDOR, [TYPE, TABLET]], [
                    /\b((?:bb[a-f]|st[hv])100-\d)/i,
                    /\(bb10; (\w+)/i // BlackBerry 10
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.BLACKBERRY], [TYPE, MOBILE]], [
                    // Asus
                    /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.ASUS], [TYPE, TABLET]], [
                    / (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.ASUS], [TYPE, MOBILE]], [
                    // HTC
                    /(nexus 9)/i // HTC Nexus 9
                ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [
                    /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
                    // ZTE
                    /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
                    /(alcatel|geeksphone|nexian|panasonic|sony)[-_ ]?([-\w]*)/i // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
                ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [
                    // Acer
                    /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i
                ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [
                    // Meizu
                    /droid.+; (m[1-5] note) bui/i,
                    /\bmz-([-\w]{2,})/i
                ], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [
                    // Sharp
                    /\b(sh-?[altvz]?\d\d[a-ekm]?)/i
                ], [MODEL, [VENDOR, 'Sharp'], [TYPE, MOBILE]], [
                    // MIXED
                    /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,
                    // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
                    /(hp) ([\w ]+\w)/i,
                    /(asus)-?(\w+)/i,
                    /(microsoft); (lumia[\w ]+)/i,
                    /(lenovo)[-_ ]?([-\w]+)/i,
                    /(jolla)/i,
                    /(oppo) ?([\w ]+) bui/i // OPPO
                ], [VENDOR, MODEL, [TYPE, MOBILE]], [
                    /(archos) (gamepad2?)/i,
                    /(hp).+(touchpad(?!.+tablet)|tablet)/i,
                    /(kindle)\/([\w\.]+)/i,
                    /(nook)[\w ]+build\/(\w+)/i,
                    /(dell) (strea[kpr\d ]*[\dko])/i,
                    /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
                    /(trinity)[- ]*(t\d{3}) bui/i,
                    /(gigaset)[- ]+(q\w{1,9}) bui/i,
                    /(vodafone) ([\w ]+)(?:\)| bui)/i // Vodafone
                ], [VENDOR, MODEL, [TYPE, TABLET]], [
                    /(surface duo)/i // Surface Duo
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.MICROSOFT], [TYPE, TABLET]], [
                    /droid [\d\.]+; (fp\du?)(?: b|\))/i // Fairphone
                ], [MODEL, [VENDOR, 'Fairphone'], [TYPE, MOBILE]], [
                    /(u304aa)/i // AT&T
                ], [MODEL, [VENDOR, 'AT&T'], [TYPE, MOBILE]], [
                    /\bsie-(\w*)/i // Siemens
                ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [
                    /\b(rct\w+) b/i // RCA Tablets
                ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [
                    /\b(venue[\d ]{2,7}) b/i // Dell Venue Tablets
                ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [
                    /\b(q(?:mv|ta)\w+) b/i // Verizon Tablet
                ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [
                    /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i // Barnes & Noble Tablet
                ], [MODEL, [VENDOR, 'Barnes & Noble'], [TYPE, TABLET]], [
                    /\b(tm\d{3}\w+) b/i
                ], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [
                    /\b(k88) b/i // ZTE K Series Tablet
                ], [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]], [
                    /\b(nx\d{3}j) b/i // ZTE Nubia
                ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [
                    /\b(gen\d{3}) b.+49h/i // Swiss GEN Mobile
                ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [
                    /\b(zur\d{3}) b/i // Swiss ZUR Tablet
                ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [
                    /\b((zeki)?tb.*\b) b/i // Zeki Tablets
                ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [
                    /\b([yr]\d{2}) b/i,
                    /\b(dragon[- ]+touch |dt)(\w{5}) b/i // Dragon Touch Tablet
                ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [
                    /\b(ns-?\w{0,9}) b/i // Insignia Tablets
                ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [
                    /\b((nxa|next)-?\w{0,9}) b/i // NextBook Tablets
                ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [
                    /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i // Voice Xtreme Phones
                ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [
                    /\b(lvtel\-)?(v1[12]) b/i // LvTel Phones
                ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [
                    /\b(ph-1) /i // Essential PH-1
                ], [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]], [
                    /\b(v(100md|700na|7011|917g).*\b) b/i // Envizen Tablets
                ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [
                    /\b(trio[-\w\. ]+) b/i // MachSpeed Tablets
                ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [
                    /\btu_(1491) b/i // Rotor Tablets
                ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [
                    /(shield[\w ]+) b/i // Nvidia Shield Tablets
                ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, TABLET]], [
                    /(sprint) (\w+)/i // Sprint Phones
                ], [VENDOR, MODEL, [TYPE, MOBILE]], [
                    /(kin\.[onetw]{3})/i // Microsoft Kin
                ], [[MODEL, /\./g, ' '], [VENDOR, AdaptRadarUAVendor.MICROSOFT], [TYPE, MOBILE]], [
                    /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i // Zebra
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.ZEBRA], [TYPE, TABLET]], [
                    /droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.ZEBRA], [TYPE, MOBILE]], [
                    ///////////////////
                    // WEARABLES
                    ///////////////////
                    /((pebble))app/i // Pebble
                ], [VENDOR, MODEL, [TYPE, WEARABLE]], [
                    /droid.+; (glass) \d/i // Google Glass
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.GOOGLE], [TYPE, WEARABLE]], [
                    /droid.+; (wt63?0{2,3})\)/i
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.ZEBRA], [TYPE, WEARABLE]], [
                    /(quest( 2)?)/i // Oculus Quest
                ], [MODEL, [VENDOR, AdaptRadarUAVendor.FACEBOOK], [TYPE, WEARABLE]], [
                    ///////////////////
                    // EMBEDDED
                    ///////////////////
                    /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i // Tesla
                ], [VENDOR, [TYPE, EMBEDDED]], [
                    ////////////////////
                    // MIXED (GENERIC)
                    ///////////////////
                    /droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i // Android Phones from Unidentified Vendors
                ], [MODEL, [TYPE, MOBILE]], [
                    /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i // Android Tablets from Unidentified Vendors
                ], [MODEL, [TYPE, TABLET]], [
                    /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i // Unidentifiable Tablet
                ], [[TYPE, TABLET]], [
                    /(phone|mobile(?:[;\/]| safari)|pda(?=.+windows ce))/i // Unidentifiable Mobile
                ], [[TYPE, MOBILE]], [
                    /(android[-\w\. ]{0,9});.+buil/i // Generic Android Device
                ], [MODEL, [VENDOR, 'Generic']]
            ],
            engine: [
                [
                    /windows.+ edge\/([\w\.]+)/i // EdgeHTML
                ], [VERSION, [NAME, AdaptRadarUAVendor.EDGE + 'HTML']], [
                    /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i // Blink
                ], [VERSION, [NAME, 'Blink']], [
                    /(presto)\/([\w\.]+)/i,
                    /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,
                    /ekioh(flow)\/([\w\.]+)/i,
                    /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
                    /(icab)[\/ ]([23]\.[\d\.]+)/i // iCab
                ], [NAME, VERSION], [
                    /rv\:([\w\.]{1,9})\b.+(gecko)/i // Gecko
                ], [VERSION, NAME]
            ],
            os: [
                [
                    // Windows
                    /microsoft (windows) (vista|xp)/i // Windows (iTunes)
                ], [NAME, VERSION], [
                    /(windows) nt 6\.2; (arm)/i,
                    /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,
                    /(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i
                ], [NAME, [VERSION, AdaptRadarUAParser.strMapper, this.windowsVersionMap]], [
                    /(win(?=3|9|n)|win 9x )([nt\d\.]+)/i
                ], [[NAME, 'Windows'], [VERSION, AdaptRadarUAParser.strMapper, this.windowsVersionMap]], [
                    // iOS/macOS
                    /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
                    /cfnetwork\/.+darwin/i
                ], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [
                    /(mac os x) ?([\w\. ]*)/i,
                    /(macintosh|mac_powerpc\b)(?!.+haiku)/i // Mac OS
                ], [[NAME, 'Mac OS'], [VERSION, /_/g, '.']], [
                    // Mobile OSes
                    /droid ([\w\.]+)\b.+(android[- ]x86)/i // Android-x86
                ], [VERSION, NAME], [
                    /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
                    /(blackberry)\w*\/([\w\.]*)/i,
                    /(tizen|kaios)[\/ ]([\w\.]+)/i,
                    /\((series40);/i // Series 40
                ], [NAME, VERSION], [
                    /\(bb(10);/i // BlackBerry 10
                ], [VERSION, [NAME, AdaptRadarUAVendor.BLACKBERRY]], [
                    /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i // Symbian
                ], [VERSION, [NAME, 'Symbian']], [
                    /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i // Firefox OS
                ], [VERSION, [NAME, AdaptRadarUAVendor.FIREFOX + ' OS']], [
                    /web0s;.+rt(tv)/i,
                    /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i // WebOS
                ], [VERSION, [NAME, 'webOS']], [
                    // Google Chromecast
                    /crkey\/([\d\.]+)/i // Google Chromecast
                ], [VERSION, [NAME, AdaptRadarUAVendor.CHROME + 'cast']], [
                    /(cros) [\w]+ ([\w\.]+\w)/i // Chromium OS
                ], [[NAME, 'Chromium OS'], VERSION], [
                    // Console
                    /(nintendo|playstation) ([wids345portablevuch]+)/i,
                    /(xbox); +xbox ([^\);]+)/i,
                    // Other
                    /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
                    /(mint)[\/\(\) ]?(\w*)/i,
                    /(mageia|vectorlinux)[; ]/i,
                    /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
                    // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire
                    /(hurd|linux) ?([\w\.]*)/i,
                    /(gnu) ?([\w\.]*)/i,
                    /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
                    /(haiku) (\w+)/i // Haiku
                ], [NAME, VERSION], [
                    /(sunos) ?([\w\.\d]*)/i // Solaris
                ], [[NAME, 'Solaris'], VERSION], [
                    /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
                    /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
                    /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux)/i,
                    /(unix) ?([\w\.]*)/i // UNIX
                ], [NAME, VERSION]
            ]
        };
        this._ua = ((typeof window !== UNDEF_TYPE && window.navigator && window.navigator.userAgent) ? window.navigator.userAgent : EMPTY);
        this._rgxmap = this.regexes;
    }
    static lowerize(str) {
        return str.toLowerCase();
    }
    static has(str1, str2) {
        return typeof str1 === STR_TYPE ? AdaptRadarUAParser.lowerize(str2).indexOf(AdaptRadarUAParser.lowerize(str1)) !== -1 : false;
    }
    static majorize(version) {
        const versionType = typeof version;
        return versionType === STR_TYPE ? version.replace(/[^\d\.]/g, EMPTY).split('.')[0] : undefined;
    }
    static trim(str, len) {
        if (typeof (str) === STR_TYPE) {
            str = str.replace(/^\s\s*/, EMPTY).replace(/\s\s*$/, EMPTY);
            return typeof (len) === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static strMapper(str, map) {
        for (const i in map) {
            // check if current value is array
            if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
                for (let j = 0; j < map[i].length; j++) {
                    if (AdaptRadarUAParser.has(map[i][j], str)) {
                        return (i === UNKNOWN) ? undefined : i;
                    }
                }
            }
            else if (AdaptRadarUAParser.has(map[i], str)) {
                return (i === UNKNOWN) ? undefined : i;
            }
        }
        return str;
    }
    getBrowser() {
        const browser = {
            name: null,
            version: null,
            major: null
        };
        this._rgxMapper.call(browser, this._ua, this._rgxmap.browser);
        browser.major = AdaptRadarUAParser.majorize(browser.version);
        return browser;
    }
    ;
    getCPU() {
        const cpu = {
            architecture: null
        };
        this._rgxMapper.call(cpu, this._ua, this._rgxmap.cpu);
        return cpu;
    }
    ;
    getDevice() {
        const device = {
            vendor: null,
            model: null,
            type: null
        };
        this._rgxMapper.call(device, this._ua, this._rgxmap.device);
        return device;
    }
    ;
    getEngine() {
        const engine = {
            name: null,
            version: null
        };
        this._rgxMapper.call(engine, this._ua, this._rgxmap.engine);
        return engine;
    }
    ;
    getOS() {
        const os = {
            name: null,
            version: null
        };
        this._rgxMapper.call(os, this._ua, this._rgxmap.os);
        return os;
    }
    ;
    getResult() {
        return {
            ua: this.getUA(),
            browser: this.getBrowser(),
            engine: this.getEngine(),
            os: this.getOS(),
            device: this.getDevice(),
            cpu: this.getCPU()
        };
    }
    ;
    getUA() {
        return this._ua;
    }
    ;
    setUA(ua) {
        this._ua = (typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH) ? AdaptRadarUAParser.trim(ua, UA_MAX_LENGTH) : ua;
    }
    ;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    _rgxMapper(ua, arrays) {
        let i = 0;
        let j;
        let k;
        let p;
        let q;
        let matches;
        let match;
        // loop through all regexes maps
        while (i < arrays.length && !matches) {
            const regex = arrays[i]; // even sequence (0,2,4,..)
            const props = arrays[i + 1]; // odd sequence (1,3,5,..)
            j = k = 0;
            // try matching uastring with regexes
            while (j < regex.length && !matches) {
                matches = regex[j++].exec(ua);
                if (matches) {
                    for (p = 0; p < props.length; p++) {
                        match = matches[++k];
                        q = props[p];
                        // check if given property is actually array
                        if (typeof q === OBJ_TYPE && q.length > 0) {
                            if (q.length == 2) {
                                if (typeof q[1] == FUNC_TYPE) {
                                    // assign modified match
                                    this[q[0]] = q[1].call(this, match);
                                }
                                else {
                                    // assign given value, ignore regex match
                                    this[q[0]] = q[1];
                                }
                            }
                            else if (q.length == 3) {
                                // check whether function or regex
                                if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
                                    // call function (usually string mapper)
                                    this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;
                                }
                                else {
                                    // sanitize match using given regex
                                    this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;
                                }
                            }
                            else if (q.length == 4) {
                                this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;
                            }
                        }
                        else {
                            this[q] = match ? match : undefined;
                        }
                    }
                }
            }
            i += 2;
        }
    }
}
AdaptRadarUAParser.ɵfac = function AdaptRadarUAParser_Factory(t) { return new (t || AdaptRadarUAParser)(); };
AdaptRadarUAParser.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AdaptRadarUAParser, factory: AdaptRadarUAParser.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRadarUAParser, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], null, null); })();
//# sourceMappingURL=ua-parser.js.map