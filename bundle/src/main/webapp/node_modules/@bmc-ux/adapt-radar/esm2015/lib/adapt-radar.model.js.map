{"version":3,"file":"adapt-radar.model.js","sourceRoot":"","sources":["../../../../../libs/adapt-radar/src/lib/adapt-radar.model.ts"],"names":[],"mappings":"AAQA,MAAM,CAAN,IAAY,oBAIX;AAJD,WAAY,oBAAoB;IAC9B,oDAA4B,CAAA;IAC5B,gEAAwC,CAAA;IACxC,sFAA8D,CAAA;AAChE,CAAC,EAJW,oBAAoB,KAApB,oBAAoB,QAI/B;AAED,MAAM,CAAN,IAAY,4BAIX;AAJD,WAAY,4BAA4B;IACtC,4DAA4B,CAAA;IAC5B,wDAAwB,CAAA;IACxB,uDAAuB,CAAA;AACzB,CAAC,EAJW,4BAA4B,KAA5B,4BAA4B,QAIvC;AAED,uBAAuB;AACvB,MAAM,CAAN,IAAY,yBA6IX;AA7ID,WAAY,yBAAyB;IACnC,mBAAmB;IACnB,mDAAsB,CAAA;IACtB,4DAA+B,CAAA;IAE/B,4FAA4F;IAC5F,kEAAqC,CAAA;IAErC,4CAA4C;IAC5C,kEAAqC,CAAA;IAErC,8EAAiD,CAAA;IAEjD,oGAAoG;IACpG,6CAA6C;IAC7C,iEAAoC,CAAA;IACpC,yDAA4B,CAAA;IAC5B,uDAA0B,CAAA;IAC1B,qDAAwB,CAAA;IAExB,yBAAyB;IACzB,4EAA4E;IAC5E,+DAA+D;IAC/D,mEAAsC,CAAA;IACtC,iEAAoC,CAAA;IACpC,+DAAkC,CAAA;IAClC,6DAAgC,CAAA;IAChC,iEAAoC,CAAA;IACpC,uEAA0C,CAAA;IAC1C,iFAAoD,CAAA;IACpD,qEAAwC,CAAA;IACxC,0EAA6C,CAAA;IAC7C,sEAAyC,CAAA;IACzC,0EAA6C,CAAA;IAC7C,6DAAgC,CAAA;IAChC,6DAAgC,CAAA;IAChC,6EAAgD,CAAA;IAChD,iEAAoC,CAAA;IACpC,2EAA8C,CAAA;IAC9C,iEAAoC,CAAA;IACpC,yEAA4C,CAAA;IAC5C,uEAA0C,CAAA;IAC1C,mEAAsC,CAAA;IACtC,iEAAoC,CAAA;IACpC,iEAAoC,CAAA;IAEpC,+DAAkC,CAAA;IAClC,sEAAyC,CAAA;IACzC,wEAA2C,CAAA;IAC3C,0EAA6C,CAAA;IAC7C,+DAAkC,CAAA;IAClC,uDAA0B,CAAA;IAC1B,wEAA2C,CAAA;IAC3C,4EAA+C,CAAA;IAC/C,uDAA0B,CAAA;IAC1B,uDAA0B,CAAA;IAC1B,qDAAwB,CAAA;IACxB,yDAA4B,CAAA;IAC5B,oEAAuC,CAAA;IACvC,sEAAyC,CAAA;IACzC,6DAAgC,CAAA;IAChC,uDAA0B,CAAA;IAC1B,4EAA+C,CAAA;IAC/C,kEAAqC,CAAA;IACrC,6DAAgC,CAAA;IAChC,0DAA6B,CAAA;IAC7B,oEAAuC,CAAA;IACvC,qDAAwB,CAAA;IACxB,wEAA2C,CAAA;IAC3C,oEAAuC,CAAA;IACvC,iEAAoC,CAAA;IACpC,6DAAgC,CAAA;IAChC,kEAAqC,CAAA;IACrC,oEAAuC,CAAA;IACvC,sEAAyC,CAAA;IACzC,qDAAwB,CAAA;IACxB,sEAAyC,CAAA;IACzC,gEAAmC,CAAA;IACnC,2DAA8B,CAAA;IAC9B,8DAAiC,CAAA;IACjC,yDAA4B,CAAA;IAC5B,qDAAwB,CAAA;IACxB,2DAA8B,CAAA;IAC9B,uDAA0B,CAAA;IAC1B,gEAAmC,CAAA;IACnC,iEAAoC,CAAA;IACpC,0EAA6C,CAAA;IAC7C,8EAAiD,CAAA;IACjD,4EAA+C,CAAA;IAC/C,oFAAuD,CAAA;IACvD,uEAA0C,CAAA;IAC1C,2DAA8B,CAAA;IAC9B,2DAA8B,CAAA;IAC9B,6DAAgC,CAAA;IAChC,qDAAwB,CAAA;IACxB,6DAAgC,CAAA;IAChC,0EAA6C,CAAA;IAC7C,2DAA8B,CAAA;IAC9B,uDAA0B,CAAA;IAC1B,uDAA0B,CAAA;IAC1B,yDAA4B,CAAA;IAC5B,qDAAwB,CAAA;IACxB,yEAA4C,CAAA;IAC5C,sEAAyC,CAAA;IACzC,mDAAsB,CAAA;IACtB,gEAAmC,CAAA;IACnC,wFAA2D,CAAA;IAC3D,2DAA8B,CAAA;IAC9B,+EAAkD,CAAA;IAClD,+DAAkC,CAAA;IAElC,8EAAiD,CAAA;IAEjD,qEAAwC,CAAA;IAExC,yEAA4C,CAAA;IAE5C,wFAA2D,CAAA;IAC3D,wEAA2C,CAAA;IAC3C,8EAAiD,CAAA;IACjD,wFAA2D,CAAA;IAC3D,kFAAqD,CAAA;IAErD,mBAAmB;IACnB,gEAAmC,CAAA;IACnC,2DAA8B,CAAA;IAC9B,2EAA8C,CAAA;IAC9C,gEAAmC,CAAA;IACnC,oEAAuC,CAAA;IACvC,qDAAwB,CAAA;IACxB,oEAAuC,CAAA;IACvC,8EAAiD,CAAA;IACjD,yDAA4B,CAAA;IAC5B,sEAAyC,CAAA;IACzC,kEAAqC,CAAA;IACrC,sEAAyC,CAAA;IACzC,yDAA4B,CAAA;IAC5B,yDAA4B,CAAA;IAC5B,sEAAyC,CAAA;IACzC,6DAAgC,CAAA;IAChC,8DAAiC,CAAA;AACnC,CAAC,EA7IW,yBAAyB,KAAzB,yBAAyB,QA6IpC;AAED,2DAA2D;AAC3D,MAAM,CAAN,IAAY,yBAWX;AAXD,WAAY,yBAAyB;IACnC,sDAAyB,CAAA;IACzB,0CAAa,CAAA;IACb,4CAAe,CAAA;IACf,0CAAa,CAAA;IACb,4CAAe,CAAA;IACf,8CAAiB,CAAA;IACjB,0DAA6B,CAAA;IAC7B,4CAAe,CAAA;IACf,oDAAuB,CAAA;IACvB,0CAAa,CAAA;AACf,CAAC,EAXW,yBAAyB,KAAzB,yBAAyB,QAWpC;AAED,4BAA4B;AAC5B,MAAM,CAAN,IAAY,4BAGX;AAHD,WAAY,4BAA4B;IACtC,iDAAiB,CAAA;IACjB,uDAAuB,CAAA;AACzB,CAAC,EAHW,4BAA4B,KAA5B,4BAA4B,QAGvC","sourcesContent":["import {Version} from '@angular/core';\nimport {AdaptRadarGainsightIdentifyAction} from './providers/gainsight/gainsight.model';\nimport {AdaptRadarGainsightProvider} from './providers/gainsight/gainsight.service';\nimport {AdaptRadarGoogleGlobalSiteTagProvider} from './providers/google-global-site-tag/google-global-site-tag.service';\nimport {AdaptRadarGoogleTagManagerProvider} from './providers/google-tag-manager/google-tag-manager.service';\nimport {AdaptRadarProductInfo} from './adapt-radar-products.model';\n\n\nexport enum AdaptRadarStorageKey {\n  UserId = 'adaptRadar.userId',\n  VersionsInfo = 'adaptRadar.versionsInfo',\n  GainsightGlobalDataSent = 'adaptRadar.gainsightGlobalDataSent'\n}\n\nexport enum AdaptRadarSupportedProviders {\n  GoogleGlobalSiteTag = 'ggst',\n  GoogleTagManager = 'gtm',\n  Gainsight = 'gainsight',\n}\n\n// Allowed events names\nexport enum AdaptRadarCustomEventName {\n  // Providers events\n  PagePath = 'page_path',\n  GlobalContext = 'globalContext',\n\n  // Used to send 'global' data(browser info, libraries versions, etc.) on provider init stage\n  AdaptGlobalData = 'Adapt_Global_Data',\n\n  // Used to send information when URL changed\n  AdaptURLChanged = 'Adapt_URL_Changed',\n\n  AdaptGenericComponent = 'Adapt_Generic_Component',\n\n  // TODO: Need to find way how to deal with components that already extends from 3rd party component.\n  // For now directly send event from component\n  AdaptPagination = 'Adapt_Pagination',\n  AdaptSlider = 'Adapt_Slider',\n  AdaptToast = 'Adapt_Toast',\n  AdaptTree = 'Adapt_Tree',\n\n  // ADAPT Components names\n  // TODO: Think should we split names for better readability and consistency.\n  // TODO: Adapt_RxRadiobuttonGroup -> Adapt_Rx_Radiobutton_Group\n  AdaptRxTextfield = 'Adapt_RxTextfield',\n  AdaptRxTextarea = 'Adapt_RxTextarea',\n  AdaptRxCounter = 'Adapt_RxCounter',\n  AdaptRxSearch = 'Adapt_RxSearch',\n  AdaptRxCheckbox = 'Adapt_RxCheckbox',\n  AdaptRxRadiobutton = 'Adapt_RxRadiobutton',\n  AdaptRxRadiobuttonGroup = 'Adapt_RxRadiobuttonGroup',\n  AdaptRxRating = 'Adapt_RxRating_Default',\n  AdaptRxRatingBinary = 'Adapt_RxRating_Binary',\n  AdaptRxRatingLike = 'Adapt_RxRating_Like',\n  AdaptRxRatingVoting = 'Adapt_RxRating_Voting',\n  AdaptRxSwitch = 'Adapt_RxSwitch',\n  AdaptRxSelect = 'Adapt_RxSelect',\n  AdaptRxSelectEditable = 'Adapt_RxSelectEditable',\n  AdaptRxDatetime = 'Adapt_RxDateTime',\n  AdaptRxDatetimeRange = 'Adapt_RxDatetimeRange',\n  AdaptRxTimeSlot = 'Adapt_RxTimeSlot',\n  AdaptRxListSelector = 'Adapt_RxListSelector',\n  AdaptRxListBuilder = 'Adapt_RxListBuilder',\n  AdaptRxTypeahead = 'Adapt_RxTypeahead',\n  AdaptRxUploader = 'Adapt_RxUploader',\n  AdaptRxFeedback = 'Adapt_RxFeedback',\n\n  AdaptAccordion = 'Adapt_Accordion',\n  AdaptSimpleFilter = 'Adapt_Simple_Filter',\n  AdaptFacetedFilter = 'Adapt_Faceted_Filter',\n  AdaptAdvancedFilter = 'Adapt_Advanced_Filter',\n  AdaptAgreement = 'Adapt_Agreement',\n  AdaptAlert = 'Adapt_Alert',\n  AdaptAlertAnimated = 'Adapt_Alert_Animated',\n  AdaptAnchorNavigator = 'Adapt_Anchor_Navigator',\n  AdaptBadge = 'Adapt_Badge',\n  AdaptBeard = 'Adapt_Beard',\n  AdaptBusy = 'Adapt_Busy',\n  AdaptButton = 'Adapt_Button',\n  AdaptButtonGroup = 'Adapt_Button_Group',\n  AdaptCardCarousel = 'Adapt_Card_Carousel',\n  AdaptCarousel = 'Adapt_Carousel',\n  AdaptClose = 'Adapt_Close',\n  AdaptCodeHighlighter = 'Adapt_Code_Highlighter',\n  AdaptCodeViewer = 'Adapt_Code_Viewer',\n  AdaptCollapse = 'Adapt_Collapse',\n  AdaptExpando = 'AdaptExpando',\n  AdaptColorPicker = 'Adapt_Color_Picker',\n  AdaptCrop = 'Adapt_Crop',\n  AdaptCustomActions = 'Adapt_Custom_Actions',\n  AdaptDockedPanel = 'Adapt_Docked_Panel', // Docked panel will sent init event each time it is opened\n  AdaptDownloader = 'Adapt_Downloader',\n  AdaptDropdown = 'Adapt_Dropdown', // Dropdown will sent event for all components that it used in. (Example: rx-select, advanced-filter, etc.)\n  AdaptEmptyState = 'Adapt_Empty_State',\n  AdaptFocusHolder = 'Adapt_Focus_Holder',\n  AdaptFocusTracker = 'Adapt_Focus_Tracker',\n  AdaptIcon = 'Adapt_Icon',\n  AdaptInlineEditor = 'Adapt_Inline_Editor',\n  AdaptLoginPage = 'Adapt_Login_Page',\n  AdaptMention = 'Adapt_Mention',\n  AdaptMention2 = 'Adapt_Mention_2',\n  AdaptDialog = 'Adapt_Dialog',\n  AdaptMenu = 'Adapt_Menu',\n  AdaptMetatag = 'Adapt_Metatag',\n  AdaptModal = 'Adapt_Modal',\n  AdaptMultiCard = 'Adapt_Multi_Card',\n  AdaptNavigation = 'Adapt_Navigation',\n  AdaptNavigationMenu = 'Adapt_Navigation_Menu',\n  AdaptNavigationAction = 'Adapt_Navigation_Action',\n  AdaptNavigationAlert = 'Adapt_Navigation_Alert',\n  AdaptNavigationHamburger = 'Adapt_Navigation_Hamburger',\n  AdaptNotFoundPage = 'Adapt_Not_Found_Page',\n  AdaptPopover = 'Adapt_Popover',\n  AdaptProfile = 'Adapt_Profile',\n  AdaptProgress = 'Adapt_Progress',\n  AdaptTime = 'Adapt_Time',\n  AdaptUploader = 'Adapt_Uploader',\n  AdaptSingleUploader = 'Adapt_Single_Uploader',\n  AdaptSidebar = 'Adapt_Sidebar',\n  AdaptSplit = 'Adapt_Split',\n  AdaptSteps = 'Adapt_Steps',\n  AdaptSubnav = 'Adapt_Subnav',\n  AdaptTabs = 'Adapt_Tabs',\n  AdaptTabsKebabMenu = 'Adapt_Tabs_Kebab_Menu',\n  AdaptTabsControls = 'Adapt_Tabs_Controls',\n  AdaptTag = 'Adapt_Tag',\n  AdaptTextField = 'Adapt_Text_Field',\n  AdaptTextFieldFormBuilder = 'Adapt_Text_Field_Form_Builder',\n  AdaptTooltip = 'Adapt_Tooltip',\n  AdaptTruncateFileName = 'Adapt_Truncate_File_Name',\n  AdaptTypeahead = 'Adapt_Typeahead',\n\n  AdaptWorkflowCarousel = 'Adapt_Workflow_Carousel',\n\n  AdaptIllustration = 'Adapt_Illustration',\n\n  AdaptRichTextEditor = 'Adapt_RichTextEditor',\n\n  AdaptAgreementAdminContent = 'Adapt_Agreement_AdminContent',\n  AdaptAgreementCard = 'Adapt_Agreement_Card',\n  AdaptAgreementContent = 'Adapt_Agreement_Content',\n  AdaptAgreementNotification = 'Adapt_Agreement_Notification',\n  AdaptAgreementUserModal = 'Adapt_Agreement_UserModal',\n\n  // Obsolete modules\n  AdaptCheckbox2 = 'Adapt_Checkbox_2',\n  AdaptCounter = 'Adapt_Counter',\n  AdaptDatetimeRange2 = 'Adapt_Datetime_Range_2',\n  AdaptDatetime2 = 'Adapt_Datetime_2',\n  AdaptListBuilder = 'Adapt_List_Builder',\n  AdaptList = 'Adapt_List',\n  AdaptRadioButton = 'Adapt_Radio_Button',\n  AdaptDropDownEditable = 'Adapt_DropDown_Editable',\n  AdaptRating = 'Adapt_Rating',\n  AdaptRatingBinary = 'Adapt_Rating_Binary',\n  AdaptRatingLike = 'Adapt_Rating_Like',\n  AdaptRatingVoting = 'Adapt_Rating_Voting',\n  AdaptSearch = 'Adapt_Search',\n  AdaptSelect = 'Adapt_Select',\n  AdaptSelectInline = 'Adapt_Select_Inline',\n  AdaptSwitcher = 'Adapt_Switcher',\n  AdaptTimeSlot = 'Adapt_Time_Slot',\n}\n\n// Generic events that can be applied across all components\nexport enum AdaptRadarCustomEventType {\n  ErrorFired = 'ErrorFired', // Error shown to user\n  Init = 'Init', // Component loaded(OnInit)\n  Focus = 'Focus', // User focus into target\n  Blur = 'Blur', // User blur from target\n  Click = 'Click', // User click on target. Same event type is fired when used press target from the keyboard\n  Search = 'Search', // User run search\n  ValueChanged = 'ValueChanged', // Data was changed\n  Clear = 'Clear', // Target is cleared\n  DragStart = 'DragStart', // User start to drag target\n  Drop = 'Drop', // User drop target after dragging\n}\n\n// Component specific events\nexport enum AdaptRadarComponentEventType {\n  TabAdd = 'TabAdd', // Fires when Tab was added\n  TabDelete = 'TabDelete', // Fires when Tab was deleted\n}\n\nexport interface AdaptRadarGlobalData {\n  BrowserType: string; // Browser type or name (eg. Firefox, Chrome, Safari, etc.)\n  BrowserVersion: string; // Major browser version number\n  BrowserDetailedVersion: string; // Detailed browser version\n\n  // MOBILES & TABLETS Device info\n  DeviceType: string; // \"mobile\" or \"tablet\"\n  DeviceVendor: string; // Vendor name (eg. Apple, Samsung, Xiaomi, etc.)\n  DeviceModel: string; // Device model (eg. iPhone, iPad, Pixel, Redmi)\n\n  OperatingSystem: string; // Operating system name (eg. Mac OS, Windows, etc.)\n  OperatingSystemVersion: string; // Detailed operating system version\n\n  // Experimental API. Not fully supported by all browsers\n  // https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n  ConnectionDownlink: number; // Returns the effective bandwidth estimate in megabits per second, rounded to the nearest multiple of 25 kilobits per seconds.\n  ConnectionEffectiveType: string; // Returns the effective type of the connection meaning one of 'slow-2g', '2g', '3g', or '4g'. This value is determined using a combination of recently observed round-trip time and downlink values.\n\n  // Experimental API. Not fully supported by all browsers\n  // https://developer.mozilla.org/en-US/docs/Web/API/Navigator/languages\n  LocalizationSettings: readonly string[]; // Returns an array of DOMStrings representing the user's preferred languages. The language is described using language tags according to RFC 5646: Tags for Identifying Languages (also known as BCP 47). In the returned array they are ordered by preference with the most preferred language first.\n\n  CurrentLanguage: string; // Returns a string representing the preferred language of the user, usually the language of the browser UI.\n\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/resolvedOptions\n  TimeZone: string; // Representing the runtime's default time zone\n  PageName: string; // Returns current page title \"document.title\"\n\n  AngularVersion: string; // Returns current Angular version. Used \"import {VERSION} from '@angular/core'\";\n\n  ADAPTVersion: string; // Detailed \"adapt-angular\" library version\n  TableVersion: string; // Detailed \"adapt-table\" library version\n  CSSVersion: string; // Detailed \"adapt-css\" library version\n  GanttVersion: string; // Detailed \"adapt-gantt\" library version\n  ObsoleteVersion: string; // Detailed \"adapt-obsolete\" library version\n  RTEVersion: string; // Detailed \"adapt-rte\" library version\n  ChartsVersion: string; // Detailed \"adapt-charts\" library version\n  RadarVersion: string; // Detailed \"adapt-radar\" library version\n\n  AccessibilityMode: boolean; // Is accessibility css used\n  DarkMode: boolean; // Is dark-mode css used\n  Customized: boolean; // Is customized css used\n}\n\nexport interface AdaptRadarURLChangedEventData {\n  PreviousLocation: Location; // Represents the previous location (URL) of the object it is linked to\n  CurrentLocation: Location; // Represents the current location (URL) of the object it is linked to\n  PageTitle: string; // Represents current page title \"document.title\"\n  TimeOnPage: string; // Time that user spent on page in format \"hors:minutes:seconds.milliseconds / 00:00:00.00\"\n  TimeOnPageInSeconds: number; // Time that user spent on page in seconds\n  TimeOnPageInMilliseconds: number; // Time that user spent on page in milliseconds\n}\n\n// TODO: Think can we merge AdaptRadarURLChangedCollectedEventData and AdaptRadarPagePathEventData and use only one\nexport interface AdaptRadarURLChangedCollectedEventData {\n  PageTitle: string; // Represents current page title \"document.title\"\n  TimeOnPage: string; // Time that user spent on page in format \"hors:minutes:seconds.milliseconds / 00:00:00.00\"\n  TimeOnPageInSeconds: number; // Time that user spent on page in seconds\n  TimeOnPageInMilliseconds: number; // Time that user spent on page in milliseconds\n}\n\nexport interface AdaptRadarPagePathEventData {\n  url: string;\n}\n\n// List of supported providers services\nexport type AdaptRadarSupportedProvidersServices =\n  AdaptRadarGoogleGlobalSiteTagProvider\n  | AdaptRadarGoogleTagManagerProvider\n  | AdaptRadarGainsightProvider;\n\nexport type AdaptRadarCustomEventData<T = unknown> = T;\n\nexport interface AdaptRadarConfig {\n  // Array of analytics providers from `AdaptRadarSupportedProviders` that should be initialized\n  providers: AdaptRadarProviderConfig[];\n\n  /**\n   * Product information that will be automatically set into each global context request\n   *\n   * Example:\n   * productInfo: {\n   *   productArea: {\n   *     name: AdaptRadarProductAreaName.Platform,\n   *     version: new Version('11.22.33'),\n   *     hosting: AdaptRadarHostingType.OnPrem\n   *   },\n   *   subProductLevel1: {\n   *     name: AdaptRadarSubProductNameLevel1.Configure,\n   *     version: new Version('22.33.44'),\n   *     hosting: AdaptRadarHostingType.OnPrem\n   *   },\n   *   subProductLevel2: {\n   *     name: AdaptRadarSubProductNameLevel2.InnovationSuiteConfigurations,\n   *     version: new Version('33.44.55'),\n   *     hosting: AdaptRadarHostingType.SaaS\n   *   },\n   *   subProductLevel3: {\n   *     name: AdaptRadarSubProductNameLevel3.DataManagement,\n   *     version: new Version('44.55.66'),\n   *     hosting: AdaptRadarHostingType.SaaS\n   *   }\n   * }\n   */\n  productInfo?: AdaptRadarProductInfo;\n\n  /**\n   * The Map of component/directive names that should not send events\n   *\n   * Example:\n   *\n   * disableEventSending: new Map([\n   *   [AdaptRadarCustomEventName.AdaptRxTextfield, true],\n   *   [AdaptRadarCustomEventName.AdaptButton, true],\n   * ])\n   */\n  disableEventSending?: AdaptRadarDisableEventSendingConfig;\n}\n\nexport interface AdaptRadarProviderConfig {\n\n  // Provider name from `AdaptRadarSupportedProviders`\n  name: AdaptRadarSupportedProviders;\n\n  // id of provider\n  id: string;\n\n  // Can be used to pass own source script for provider. If passed \"false\" that mean that source script wouldn't be injected at all, this can be useful if there is requirement to insert script manually on the page(eg. CSP)\n  sourceScript?: string | false;\n\n  // Can be used to pass own init script for provider.  If passed \"false\" that mean that source script wouldn't be injected at all, this can be useful if there is requirement to insert script manually on the page(eg. CSP)\n  initScript?: string | false;\n\n  // Can be used if provider need to be disabled. This is mean that it wouldn't be initialized\n  disabled?: boolean;\n\n  // The idea under this property is to allow customers provide array of predefined actions that will be automatically triggered in specific places.\n  // As a good example for such action will be Gainsight identify event that need to be sent once for correct analytics\n  oneTimeActions?: AdaptRadarGainsightIdentifyAction[];\n}\n\n/**\n * Use separate config for module to have possibility to set needed data even if customer didn't start collecting data\n *\n * For example, we may want always set ADAPT versions for all environments(dev, qa)\n * But customer may want to not enabling data collection for some environments\n * That is why we shouldn't set versions in scope of \"AdaptRadarConfig\"\n */\nexport interface AdaptRadarModuleConfig {\n  /**\n   * Configuration that used to set library versions that used in application\n   * version for each library can be imported from library package the save way as angular VERSION\n   *\n   * Example:\n   * import {ADAPT_ANGULAR_VERSION} from '@bmc-ux/adapt-angular';\n   * import {ADAPT_TABLE_VERSION} from '@bmc-ux/adapt-table';\n   */\n  versions: AdaptRadarLibraryVersions;\n}\n\nexport interface AdaptRadarOneTimeAction<T, U> {\n  name: T;\n  data: U;\n}\n\n// Interface represent hashmap with adapt libraries versions\nexport interface AdaptRadarLibraryVersions {\n  ADAPT_ANGULAR_VERSION?: Version;\n  ADAPT_AVATAR_VERSION?: Version;\n  ADAPT_CHATBOT_VERSION?: Version;\n  ADAPT_CHARTS_VERSION?: Version;\n  ADAPT_CUSTOMIZATION_VERSION?: Version;\n  ADAPT_GANTT_VERSION?: Version;\n  ADAPT_OBSOLETE_VERSION?: Version;\n  ADAPT_RTE_VERSION?: Version;\n  ADAPT_TABLE_VERSION?: Version;\n  ADAPT_RADAR_VERSION?: Version;\n  ADAPT_CSS_VERSION?: Version;\n}\n\nexport type AdaptRadarDisableEventSendingConfig = Map<AdaptRadarCustomEventName, boolean>;\n"]}