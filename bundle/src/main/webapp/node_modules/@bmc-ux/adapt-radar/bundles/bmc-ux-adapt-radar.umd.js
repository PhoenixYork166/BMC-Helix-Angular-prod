(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('lodash-es'), require('rxjs/operators'), require('rxjs'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@bmc-ux/adapt-radar', ['exports', '@angular/core', 'lodash-es', 'rxjs/operators', 'rxjs', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["bmc-ux"] = global["bmc-ux"] || {}, global["bmc-ux"]["adapt-radar"] = {}), global.ng.core, global["lodash-es"], global.rxjs.operators, global.rxjs, global.ng.common));
})(this, (function (exports, i0, lodashEs, operators, rxjs, common) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var AdaptRadarDirective = /** @class */ (function () {
        function AdaptRadarDirective() {
        }
        return AdaptRadarDirective;
    }());
    AdaptRadarDirective.ɵfac = function AdaptRadarDirective_Factory(t) { return new (t || AdaptRadarDirective)(); };
    AdaptRadarDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: AdaptRadarDirective, selectors: [["", "adaptRadar", ""]], inputs: { adaptRadar: "adaptRadar" } });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptRadarDirective, [{
                type: i0.Directive,
                args: [{ selector: '[adaptRadar]' }]
            }], null, { adaptRadar: [{
                    type: i0.Input
                }] });
    })();

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    exports.AdaptRadarStorageKey = void 0;
    (function (AdaptRadarStorageKey) {
        AdaptRadarStorageKey["UserId"] = "adaptRadar.userId";
        AdaptRadarStorageKey["VersionsInfo"] = "adaptRadar.versionsInfo";
        AdaptRadarStorageKey["GainsightGlobalDataSent"] = "adaptRadar.gainsightGlobalDataSent";
    })(exports.AdaptRadarStorageKey || (exports.AdaptRadarStorageKey = {}));
    exports.AdaptRadarSupportedProviders = void 0;
    (function (AdaptRadarSupportedProviders) {
        AdaptRadarSupportedProviders["GoogleGlobalSiteTag"] = "ggst";
        AdaptRadarSupportedProviders["GoogleTagManager"] = "gtm";
        AdaptRadarSupportedProviders["Gainsight"] = "gainsight";
    })(exports.AdaptRadarSupportedProviders || (exports.AdaptRadarSupportedProviders = {}));
    // Allowed events names
    exports.AdaptRadarCustomEventName = void 0;
    (function (AdaptRadarCustomEventName) {
        // Providers events
        AdaptRadarCustomEventName["PagePath"] = "page_path";
        AdaptRadarCustomEventName["GlobalContext"] = "globalContext";
        // Used to send 'global' data(browser info, libraries versions, etc.) on provider init stage
        AdaptRadarCustomEventName["AdaptGlobalData"] = "Adapt_Global_Data";
        // Used to send information when URL changed
        AdaptRadarCustomEventName["AdaptURLChanged"] = "Adapt_URL_Changed";
        AdaptRadarCustomEventName["AdaptGenericComponent"] = "Adapt_Generic_Component";
        // TODO: Need to find way how to deal with components that already extends from 3rd party component.
        // For now directly send event from component
        AdaptRadarCustomEventName["AdaptPagination"] = "Adapt_Pagination";
        AdaptRadarCustomEventName["AdaptSlider"] = "Adapt_Slider";
        AdaptRadarCustomEventName["AdaptToast"] = "Adapt_Toast";
        AdaptRadarCustomEventName["AdaptTree"] = "Adapt_Tree";
        // ADAPT Components names
        // TODO: Think should we split names for better readability and consistency.
        // TODO: Adapt_RxRadiobuttonGroup -> Adapt_Rx_Radiobutton_Group
        AdaptRadarCustomEventName["AdaptRxTextfield"] = "Adapt_RxTextfield";
        AdaptRadarCustomEventName["AdaptRxTextarea"] = "Adapt_RxTextarea";
        AdaptRadarCustomEventName["AdaptRxCounter"] = "Adapt_RxCounter";
        AdaptRadarCustomEventName["AdaptRxSearch"] = "Adapt_RxSearch";
        AdaptRadarCustomEventName["AdaptRxCheckbox"] = "Adapt_RxCheckbox";
        AdaptRadarCustomEventName["AdaptRxRadiobutton"] = "Adapt_RxRadiobutton";
        AdaptRadarCustomEventName["AdaptRxRadiobuttonGroup"] = "Adapt_RxRadiobuttonGroup";
        AdaptRadarCustomEventName["AdaptRxRating"] = "Adapt_RxRating_Default";
        AdaptRadarCustomEventName["AdaptRxRatingBinary"] = "Adapt_RxRating_Binary";
        AdaptRadarCustomEventName["AdaptRxRatingLike"] = "Adapt_RxRating_Like";
        AdaptRadarCustomEventName["AdaptRxRatingVoting"] = "Adapt_RxRating_Voting";
        AdaptRadarCustomEventName["AdaptRxSwitch"] = "Adapt_RxSwitch";
        AdaptRadarCustomEventName["AdaptRxSelect"] = "Adapt_RxSelect";
        AdaptRadarCustomEventName["AdaptRxSelectEditable"] = "Adapt_RxSelectEditable";
        AdaptRadarCustomEventName["AdaptRxDatetime"] = "Adapt_RxDateTime";
        AdaptRadarCustomEventName["AdaptRxDatetimeRange"] = "Adapt_RxDatetimeRange";
        AdaptRadarCustomEventName["AdaptRxTimeSlot"] = "Adapt_RxTimeSlot";
        AdaptRadarCustomEventName["AdaptRxListSelector"] = "Adapt_RxListSelector";
        AdaptRadarCustomEventName["AdaptRxListBuilder"] = "Adapt_RxListBuilder";
        AdaptRadarCustomEventName["AdaptRxTypeahead"] = "Adapt_RxTypeahead";
        AdaptRadarCustomEventName["AdaptRxUploader"] = "Adapt_RxUploader";
        AdaptRadarCustomEventName["AdaptRxFeedback"] = "Adapt_RxFeedback";
        AdaptRadarCustomEventName["AdaptAccordion"] = "Adapt_Accordion";
        AdaptRadarCustomEventName["AdaptSimpleFilter"] = "Adapt_Simple_Filter";
        AdaptRadarCustomEventName["AdaptFacetedFilter"] = "Adapt_Faceted_Filter";
        AdaptRadarCustomEventName["AdaptAdvancedFilter"] = "Adapt_Advanced_Filter";
        AdaptRadarCustomEventName["AdaptAgreement"] = "Adapt_Agreement";
        AdaptRadarCustomEventName["AdaptAlert"] = "Adapt_Alert";
        AdaptRadarCustomEventName["AdaptAlertAnimated"] = "Adapt_Alert_Animated";
        AdaptRadarCustomEventName["AdaptAnchorNavigator"] = "Adapt_Anchor_Navigator";
        AdaptRadarCustomEventName["AdaptBadge"] = "Adapt_Badge";
        AdaptRadarCustomEventName["AdaptBeard"] = "Adapt_Beard";
        AdaptRadarCustomEventName["AdaptBusy"] = "Adapt_Busy";
        AdaptRadarCustomEventName["AdaptButton"] = "Adapt_Button";
        AdaptRadarCustomEventName["AdaptButtonGroup"] = "Adapt_Button_Group";
        AdaptRadarCustomEventName["AdaptCardCarousel"] = "Adapt_Card_Carousel";
        AdaptRadarCustomEventName["AdaptCarousel"] = "Adapt_Carousel";
        AdaptRadarCustomEventName["AdaptClose"] = "Adapt_Close";
        AdaptRadarCustomEventName["AdaptCodeHighlighter"] = "Adapt_Code_Highlighter";
        AdaptRadarCustomEventName["AdaptCodeViewer"] = "Adapt_Code_Viewer";
        AdaptRadarCustomEventName["AdaptCollapse"] = "Adapt_Collapse";
        AdaptRadarCustomEventName["AdaptExpando"] = "AdaptExpando";
        AdaptRadarCustomEventName["AdaptColorPicker"] = "Adapt_Color_Picker";
        AdaptRadarCustomEventName["AdaptCrop"] = "Adapt_Crop";
        AdaptRadarCustomEventName["AdaptCustomActions"] = "Adapt_Custom_Actions";
        AdaptRadarCustomEventName["AdaptDockedPanel"] = "Adapt_Docked_Panel";
        AdaptRadarCustomEventName["AdaptDownloader"] = "Adapt_Downloader";
        AdaptRadarCustomEventName["AdaptDropdown"] = "Adapt_Dropdown";
        AdaptRadarCustomEventName["AdaptEmptyState"] = "Adapt_Empty_State";
        AdaptRadarCustomEventName["AdaptFocusHolder"] = "Adapt_Focus_Holder";
        AdaptRadarCustomEventName["AdaptFocusTracker"] = "Adapt_Focus_Tracker";
        AdaptRadarCustomEventName["AdaptIcon"] = "Adapt_Icon";
        AdaptRadarCustomEventName["AdaptInlineEditor"] = "Adapt_Inline_Editor";
        AdaptRadarCustomEventName["AdaptLoginPage"] = "Adapt_Login_Page";
        AdaptRadarCustomEventName["AdaptMention"] = "Adapt_Mention";
        AdaptRadarCustomEventName["AdaptMention2"] = "Adapt_Mention_2";
        AdaptRadarCustomEventName["AdaptDialog"] = "Adapt_Dialog";
        AdaptRadarCustomEventName["AdaptMenu"] = "Adapt_Menu";
        AdaptRadarCustomEventName["AdaptMetatag"] = "Adapt_Metatag";
        AdaptRadarCustomEventName["AdaptModal"] = "Adapt_Modal";
        AdaptRadarCustomEventName["AdaptMultiCard"] = "Adapt_Multi_Card";
        AdaptRadarCustomEventName["AdaptNavigation"] = "Adapt_Navigation";
        AdaptRadarCustomEventName["AdaptNavigationMenu"] = "Adapt_Navigation_Menu";
        AdaptRadarCustomEventName["AdaptNavigationAction"] = "Adapt_Navigation_Action";
        AdaptRadarCustomEventName["AdaptNavigationAlert"] = "Adapt_Navigation_Alert";
        AdaptRadarCustomEventName["AdaptNavigationHamburger"] = "Adapt_Navigation_Hamburger";
        AdaptRadarCustomEventName["AdaptNotFoundPage"] = "Adapt_Not_Found_Page";
        AdaptRadarCustomEventName["AdaptPopover"] = "Adapt_Popover";
        AdaptRadarCustomEventName["AdaptProfile"] = "Adapt_Profile";
        AdaptRadarCustomEventName["AdaptProgress"] = "Adapt_Progress";
        AdaptRadarCustomEventName["AdaptTime"] = "Adapt_Time";
        AdaptRadarCustomEventName["AdaptUploader"] = "Adapt_Uploader";
        AdaptRadarCustomEventName["AdaptSingleUploader"] = "Adapt_Single_Uploader";
        AdaptRadarCustomEventName["AdaptSidebar"] = "Adapt_Sidebar";
        AdaptRadarCustomEventName["AdaptSplit"] = "Adapt_Split";
        AdaptRadarCustomEventName["AdaptSteps"] = "Adapt_Steps";
        AdaptRadarCustomEventName["AdaptSubnav"] = "Adapt_Subnav";
        AdaptRadarCustomEventName["AdaptTabs"] = "Adapt_Tabs";
        AdaptRadarCustomEventName["AdaptTabsKebabMenu"] = "Adapt_Tabs_Kebab_Menu";
        AdaptRadarCustomEventName["AdaptTabsControls"] = "Adapt_Tabs_Controls";
        AdaptRadarCustomEventName["AdaptTag"] = "Adapt_Tag";
        AdaptRadarCustomEventName["AdaptTextField"] = "Adapt_Text_Field";
        AdaptRadarCustomEventName["AdaptTextFieldFormBuilder"] = "Adapt_Text_Field_Form_Builder";
        AdaptRadarCustomEventName["AdaptTooltip"] = "Adapt_Tooltip";
        AdaptRadarCustomEventName["AdaptTruncateFileName"] = "Adapt_Truncate_File_Name";
        AdaptRadarCustomEventName["AdaptTypeahead"] = "Adapt_Typeahead";
        AdaptRadarCustomEventName["AdaptWorkflowCarousel"] = "Adapt_Workflow_Carousel";
        AdaptRadarCustomEventName["AdaptIllustration"] = "Adapt_Illustration";
        AdaptRadarCustomEventName["AdaptRichTextEditor"] = "Adapt_RichTextEditor";
        AdaptRadarCustomEventName["AdaptAgreementAdminContent"] = "Adapt_Agreement_AdminContent";
        AdaptRadarCustomEventName["AdaptAgreementCard"] = "Adapt_Agreement_Card";
        AdaptRadarCustomEventName["AdaptAgreementContent"] = "Adapt_Agreement_Content";
        AdaptRadarCustomEventName["AdaptAgreementNotification"] = "Adapt_Agreement_Notification";
        AdaptRadarCustomEventName["AdaptAgreementUserModal"] = "Adapt_Agreement_UserModal";
        // Obsolete modules
        AdaptRadarCustomEventName["AdaptCheckbox2"] = "Adapt_Checkbox_2";
        AdaptRadarCustomEventName["AdaptCounter"] = "Adapt_Counter";
        AdaptRadarCustomEventName["AdaptDatetimeRange2"] = "Adapt_Datetime_Range_2";
        AdaptRadarCustomEventName["AdaptDatetime2"] = "Adapt_Datetime_2";
        AdaptRadarCustomEventName["AdaptListBuilder"] = "Adapt_List_Builder";
        AdaptRadarCustomEventName["AdaptList"] = "Adapt_List";
        AdaptRadarCustomEventName["AdaptRadioButton"] = "Adapt_Radio_Button";
        AdaptRadarCustomEventName["AdaptDropDownEditable"] = "Adapt_DropDown_Editable";
        AdaptRadarCustomEventName["AdaptRating"] = "Adapt_Rating";
        AdaptRadarCustomEventName["AdaptRatingBinary"] = "Adapt_Rating_Binary";
        AdaptRadarCustomEventName["AdaptRatingLike"] = "Adapt_Rating_Like";
        AdaptRadarCustomEventName["AdaptRatingVoting"] = "Adapt_Rating_Voting";
        AdaptRadarCustomEventName["AdaptSearch"] = "Adapt_Search";
        AdaptRadarCustomEventName["AdaptSelect"] = "Adapt_Select";
        AdaptRadarCustomEventName["AdaptSelectInline"] = "Adapt_Select_Inline";
        AdaptRadarCustomEventName["AdaptSwitcher"] = "Adapt_Switcher";
        AdaptRadarCustomEventName["AdaptTimeSlot"] = "Adapt_Time_Slot";
    })(exports.AdaptRadarCustomEventName || (exports.AdaptRadarCustomEventName = {}));
    // Generic events that can be applied across all components
    exports.AdaptRadarCustomEventType = void 0;
    (function (AdaptRadarCustomEventType) {
        AdaptRadarCustomEventType["ErrorFired"] = "ErrorFired";
        AdaptRadarCustomEventType["Init"] = "Init";
        AdaptRadarCustomEventType["Focus"] = "Focus";
        AdaptRadarCustomEventType["Blur"] = "Blur";
        AdaptRadarCustomEventType["Click"] = "Click";
        AdaptRadarCustomEventType["Search"] = "Search";
        AdaptRadarCustomEventType["ValueChanged"] = "ValueChanged";
        AdaptRadarCustomEventType["Clear"] = "Clear";
        AdaptRadarCustomEventType["DragStart"] = "DragStart";
        AdaptRadarCustomEventType["Drop"] = "Drop";
    })(exports.AdaptRadarCustomEventType || (exports.AdaptRadarCustomEventType = {}));
    // Component specific events
    exports.AdaptRadarComponentEventType = void 0;
    (function (AdaptRadarComponentEventType) {
        AdaptRadarComponentEventType["TabAdd"] = "TabAdd";
        AdaptRadarComponentEventType["TabDelete"] = "TabDelete";
    })(exports.AdaptRadarComponentEventType || (exports.AdaptRadarComponentEventType = {}));

    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    function adaptLog() {
        var data = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            data[_i] = arguments[_i];
        }
        if (i0.isDevMode()) {
            // eslint-disable-next-line no-console
            console.log.apply(console, __spreadArray([], __read(data)));
        }
    }
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    function adaptWarn() {
        var data = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            data[_i] = arguments[_i];
        }
        if (i0.isDevMode()) {
            // eslint-disable-next-line no-console
            console.warn.apply(console, __spreadArray([], __read(data)));
        }
    }
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    function adaptError() {
        var data = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            data[_i] = arguments[_i];
        }
        if (i0.isDevMode()) {
            // eslint-disable-next-line no-console
            console.error.apply(console, __spreadArray([], __read(data)));
        }
    }

    function injectSourceScript(src) {
        if (!src) {
            return;
        }
        var script = window.document.createElement('script');
        script.type = 'text/javascript';
        script.async = true;
        script.src = src;
        window.document.head.appendChild(script);
    }
    function injectInitScript(src) {
        if (!src) {
            return;
        }
        var script = window.document.createElement('script');
        script.type = 'text/javascript';
        script.text = src;
        window.document.head.appendChild(script);
    }

    /* Gainsight */
    var gainsightInitScript = function (id, customSourceScript) { return "\n  (function(n,t,a,e){var i=\"aptrinsic\";n[i]=n[i]||function(){\n   (n[i].q=n[i].q||[]).push(arguments)},n[i].p=e;\n   var r=t.createElement(\"script\");r.async=!0,r.src=a+\"?a=\"+e;\n   var c=t.getElementsByTagName(\"script\")[0];c.parentNode.insertBefore(r,c)\n  })(window,document, \"" + (customSourceScript || gainsightSourceScript()) + "\", \"" + id + "\");\n"; };
    // Use own BMC cdn to provide Gainsight script to avoid problems with security like SRI
    var gainsightSourceScript = function () { return 'https://documents.bmc.com/products/docs/gainsight/main/aptrinsic.js'; };
    // export const gainsightSourceScript = (): string => 'https://web-sdk.aptrinsic.com/api/aptrinsic.js';
    /* Google Site Tag */
    var googleGlobalSiteTagInitScript = function (id) { return "\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n  gtag('config', '" + id + "');\n"; };
    var googleGlobalSiteTagSourceScript = function (id) { return "https://www.googletagmanager.com/gtag/js?id=" + id; };
    /* Google Tag Manager */
    var googleTagManagerInitScript = function (id) { return "\n  (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':new Date().getTime(),event:'gtm.js'});\n  var f=d.getElementsByTagName(s)[0],j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;\n  j.src='https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);})(window,document,'script','dataLayer','" + id + "');\n"; };

    exports.AdaptRadarGoogleGlobalSiteTagEventNameEventName = void 0;
    (function (AdaptRadarGoogleGlobalSiteTagEventNameEventName) {
        AdaptRadarGoogleGlobalSiteTagEventNameEventName["Config"] = "config";
        AdaptRadarGoogleGlobalSiteTagEventNameEventName["Event"] = "event";
    })(exports.AdaptRadarGoogleGlobalSiteTagEventNameEventName || (exports.AdaptRadarGoogleGlobalSiteTagEventNameEventName = {}));

    var AdaptRadarGoogleGlobalSiteTagProvider = /** @class */ (function () {
        function AdaptRadarGoogleGlobalSiteTagProvider() {
            this._destroyed$ = new rxjs.ReplaySubject(1);
            this._initSource = new rxjs.BehaviorSubject(false);
            // Observable that can be used to check Gainsight script initialization state
            this.init$ = this._initSource.asObservable();
        }
        AdaptRadarGoogleGlobalSiteTagProvider.getInitScript = function (id, customInitScript) {
            return customInitScript || googleGlobalSiteTagInitScript(id);
        };
        AdaptRadarGoogleGlobalSiteTagProvider.getSourceScript = function (id, customSourceScript) {
            return customSourceScript || googleGlobalSiteTagSourceScript(id);
        };
        Object.defineProperty(AdaptRadarGoogleGlobalSiteTagProvider.prototype, "initProcess$", {
            get: function () {
                return this.init$.pipe(operators.take(1), operators.takeUntil(this._destroyed$));
            },
            enumerable: false,
            configurable: true
        });
        AdaptRadarGoogleGlobalSiteTagProvider.prototype.ngOnDestroy = function () {
            this._destroyed$.next(true);
            this._destroyed$.complete();
        };
        /**
         * The method is used to start collecting the data for the current provider
         * It allows controlling the data collecting process on the customer side.
         * For instance to turn on data collecting in run time when it needed based on user preferences or project business logic
         *
         * @param providerConfig - config for provider that need to be initialized
         * @param radarConfig - main RADAR module config
         */
        AdaptRadarGoogleGlobalSiteTagProvider.prototype.startDataCollecting = function (providerConfig, radarConfig) {
            var _this = this;
            this._id = providerConfig.id;
            this._radarConfig = radarConfig;
            this._productInfo = radarConfig.productInfo;
            this.initProcess$
                .subscribe(function (isInitialized) {
                /**
                 * This window property must be set before any calls to gtag() are made, and it must be set on each page
                 * for which you want to disable Analytics. If the property is not set or set to false, then Analytics will work as usual.
                 */
                _this.toggleUserTracking(true, providerConfig);
                if (isInitialized) {
                    return;
                }
                if (providerConfig.sourceScript !== false) {
                    injectSourceScript(AdaptRadarGoogleGlobalSiteTagProvider.getSourceScript(providerConfig.id, providerConfig.sourceScript));
                }
                if (providerConfig.initScript !== false) {
                    injectInitScript(AdaptRadarGoogleGlobalSiteTagProvider.getInitScript(providerConfig.id, providerConfig.initScript));
                }
                _this._initSource.next(true);
            });
        };
        AdaptRadarGoogleGlobalSiteTagProvider.prototype.stopDataCollecting = function (providerConfig) {
            this.toggleUserTracking(false, providerConfig);
            this._initSource.next(false);
        };
        /**
         * Method is used to send specific 'page_path' event for Google Analytics system
         *
         * @param pathData - path string that will be logged and used to track which pages was visited
         *
         * @example
         * gtag('config', 'UA-1234567-89', {'page_path': '/new-page.html'});
         */
        AdaptRadarGoogleGlobalSiteTagProvider.prototype.sendPagePathEvent = function (pathData) {
            var _this = this;
            this.initProcess$.subscribe(function (isInitialized) {
                var _a;
                if (isInitialized && !lodashEs.isNil(pathData)) {
                    gtag(exports.AdaptRadarGoogleGlobalSiteTagEventNameEventName.Config, _this._id, (_a = {}, _a[exports.AdaptRadarCustomEventName.PagePath] = pathData.url, _a));
                }
            });
        };
        /**
         * Method is used to send custom events into Google Global Site Tag analytics system.
         *
         * @param customEventName - name of the event that will be logged into Google Global Site Tag analytics system
         * @param customEventData - custom data that need to be collect and associate with `customEventName`
         *
         * @example
         * gtag('event', 'video_auto_play_start', {
         *  'event_label': 'My promotional video',
         *  'event_category': 'video_auto_play',
         *  'non_interaction': true
         * });
         */
        AdaptRadarGoogleGlobalSiteTagProvider.prototype.sendCustomEvent = function (customEventName, customEventData) {
            var _this = this;
            this.initProcess$.subscribe(function (isInitialized) {
                if (isInitialized) {
                    if (customEventName === exports.AdaptRadarCustomEventName.PagePath) {
                        _this.sendPagePathEvent(customEventData);
                    }
                    else {
                        gtag(exports.AdaptRadarGoogleGlobalSiteTagEventNameEventName.Event, customEventName, customEventData);
                    }
                }
            });
        };
        AdaptRadarGoogleGlobalSiteTagProvider.prototype.sendGlobalData = function () {
            this.initProcess$.subscribe(function (isInitialized) {
                if (isInitialized) {
                    // sending global data
                }
            });
        };
        /**
         * Opt-Out User Tracking
         * In some cases, it may be necessary to disable Google Analytics on a page without removing the gtag.js tag.
         * For example, you might do this if your site's privacy policy provides an option for the user to opt-out of Google Analytics.
         *
         * The gtag.js library includes a window property that, when set to true, disables gtag.js from sending data to Google Analytics.
         * When Google Analytics attempts to set a cookie or send data back to the Google Analytics servers,
         * it will first check if this property is set, and will take no action if the value is set to true.
         *
         * Google docs: https://developers.google.com/analytics/devguides/collection/gtagjs/user-opt-out
         *
         * @param isEnabled - tracking state (true for Out-In, false for Opt-Out)
         * @param providerConfig - config for provider that need to be initialized
         */
        AdaptRadarGoogleGlobalSiteTagProvider.prototype.toggleUserTracking = function (isEnabled, providerConfig) {
            window["ga-disable-" + providerConfig.id] = !isEnabled;
            this._initSource.next(isEnabled);
        };
        return AdaptRadarGoogleGlobalSiteTagProvider;
    }());
    AdaptRadarGoogleGlobalSiteTagProvider.ɵfac = function AdaptRadarGoogleGlobalSiteTagProvider_Factory(t) { return new (t || AdaptRadarGoogleGlobalSiteTagProvider)(); };
    AdaptRadarGoogleGlobalSiteTagProvider.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: AdaptRadarGoogleGlobalSiteTagProvider, factory: AdaptRadarGoogleGlobalSiteTagProvider.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptRadarGoogleGlobalSiteTagProvider, [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], null, null);
    })();

    var AdaptRadarGoogleTagManagerProvider = /** @class */ (function () {
        function AdaptRadarGoogleTagManagerProvider() {
            this._destroyed$ = new rxjs.ReplaySubject(1);
            this._initSource = new rxjs.BehaviorSubject(false);
            // Observable that can be used to check Gainsight script initialization state
            this.init$ = this._initSource.asObservable();
        }
        AdaptRadarGoogleTagManagerProvider.getInitScript = function (id, customInitScript) {
            return customInitScript || googleTagManagerInitScript(id);
        };
        Object.defineProperty(AdaptRadarGoogleTagManagerProvider.prototype, "initProcess$", {
            get: function () {
                return this.init$.pipe(operators.take(1), operators.takeUntil(this._destroyed$));
            },
            enumerable: false,
            configurable: true
        });
        AdaptRadarGoogleTagManagerProvider.prototype.ngOnDestroy = function () {
            this._destroyed$.next(true);
            this._destroyed$.complete();
        };
        /**
         * The method is used to start collecting the data for the current provider
         * It allows controlling the data collecting process on the customer side.
         * For instance to turn on data collecting in run time when it needed based on user preferences or project business logic
         *
         * @param providerConfig - config for provider that need to be initialized
         * @param radarConfig - main RADAR module config
         */
        AdaptRadarGoogleTagManagerProvider.prototype.startDataCollecting = function (providerConfig, radarConfig) {
            var _this = this;
            this._id = providerConfig.id;
            this._radarConfig = radarConfig;
            this._productInfo = radarConfig.productInfo;
            this.initProcess$
                .subscribe(function (isInitialized) {
                if (isInitialized) {
                    return;
                }
                if (providerConfig.initScript !== false) {
                    injectInitScript(AdaptRadarGoogleTagManagerProvider.getInitScript(providerConfig.id, providerConfig.initScript));
                }
                _this._initSource.next(true);
            });
        };
        AdaptRadarGoogleTagManagerProvider.prototype.stopDataCollecting = function () {
            // stop data collection
            this._initSource.next(false);
        };
        /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
        AdaptRadarGoogleTagManagerProvider.prototype.sendCustomEvent = function (customEventName, customEventData) {
            this.initProcess$.subscribe(function (isInitialized) {
                if (isInitialized) {
                    // send event for GTM here
                }
            });
        };
        AdaptRadarGoogleTagManagerProvider.prototype.sendGlobalData = function () {
            this.initProcess$.subscribe(function (isInitialized) {
                if (isInitialized) {
                    // sending global data
                }
            });
        };
        return AdaptRadarGoogleTagManagerProvider;
    }());
    AdaptRadarGoogleTagManagerProvider.ɵfac = function AdaptRadarGoogleTagManagerProvider_Factory(t) { return new (t || AdaptRadarGoogleTagManagerProvider)(); };
    AdaptRadarGoogleTagManagerProvider.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: AdaptRadarGoogleTagManagerProvider, factory: AdaptRadarGoogleTagManagerProvider.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptRadarGoogleTagManagerProvider, [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], null, null);
    })();

    /**
     * The list of api methods that are used by the "aptrinsic" JavaScript call are as follows with links to customer facing documentation where available:
     *
     * 'track' - https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Use_Custom_Event_API
     * 'identify' - https://support.gainsight.com/PX/API_for_Developers/01About/Track_your_Users_and_Accounts#The_Identify_Call
     * 'get'
     * 'users'
     * 'set' - https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Use_Global_Context_API
     * 'initWithExternalState'
     * 'carousel'
     * 'config' - https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Use_Config_API
     * 'login'
     * 'lead' - https://support.gainsight.com/PX/Install_PX/Track_Users_on_Your_Corporate_Site_Using_PX#Customizing_Lead_Tracking
     * 'account'
     * 'checklog'
     * 'event'
     * 'setOnce' - https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Use_Global_Context_API#Global_Context
     * 'remove' - https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Use_Global_Context_API#Remove
     * 'pageView' - https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Using_The_Page_View_API
     * 'send' - https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Gainsight_PX_User_Feedback_API
     * 'bot' - https://support.gainsight.com/PX/Integrations/Knowledge_Center_Integrations/Zendesk_Knowledge_Base_Integration#Add_Label_Filters_to_Zendesk_Knowledge_Base
     * 'kcb' - https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Work_with_Knowledge_Center_Bot_API#Knowledge_Center_Bot_API_Calls
     * 'reset' - https://support.gainsight.com/PX/API_for_Developers/01About/Work_with_Gainsight_PX_Web_SDK#Reset.2FLogout
     * 'addListener' - https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Javascript_Event_Listener_API
     */
    exports.AdaptRadarGainsightEventName = void 0;
    (function (AdaptRadarGainsightEventName) {
        AdaptRadarGainsightEventName["Track"] = "track";
        AdaptRadarGainsightEventName["Identify"] = "identify";
        AdaptRadarGainsightEventName["Get"] = "get";
        AdaptRadarGainsightEventName["Users"] = "users";
        AdaptRadarGainsightEventName["Set"] = "set";
        AdaptRadarGainsightEventName["SetOnce"] = "setOnce";
        AdaptRadarGainsightEventName["InitWithExternalState"] = "initWithExternalState";
        AdaptRadarGainsightEventName["Carousel"] = "carousel";
        AdaptRadarGainsightEventName["Config"] = "config";
        AdaptRadarGainsightEventName["Login"] = "login";
        AdaptRadarGainsightEventName["Lead"] = "lead";
        AdaptRadarGainsightEventName["Account"] = "account";
        AdaptRadarGainsightEventName["Checklog"] = "checklog";
        AdaptRadarGainsightEventName["Event"] = "event";
        AdaptRadarGainsightEventName["Remove"] = "remove";
        AdaptRadarGainsightEventName["PageView"] = "pageView";
        AdaptRadarGainsightEventName["Send"] = "send";
        AdaptRadarGainsightEventName["Bot"] = "bot";
        AdaptRadarGainsightEventName["Kcb"] = "kcb";
        AdaptRadarGainsightEventName["Reset"] = "reset";
        AdaptRadarGainsightEventName["AddListener"] = "addListener";
    })(exports.AdaptRadarGainsightEventName || (exports.AdaptRadarGainsightEventName = {}));
    exports.AdaptRadarGainsightIdentifyActionName = void 0;
    (function (AdaptRadarGainsightIdentifyActionName) {
        AdaptRadarGainsightIdentifyActionName["UserIdentify"] = "userIdentify";
    })(exports.AdaptRadarGainsightIdentifyActionName || (exports.AdaptRadarGainsightIdentifyActionName = {}));
    exports.AdaptRadarGainsightConfigName = void 0;
    (function (AdaptRadarGainsightConfigName) {
        AdaptRadarGainsightConfigName["EnableTag"] = "enableTag";
    })(exports.AdaptRadarGainsightConfigName || (exports.AdaptRadarGainsightConfigName = {}));

    exports.AdaptRadarProductAreaName = void 0;
    (function (AdaptRadarProductAreaName) {
        AdaptRadarProductAreaName["ITOM"] = "ITOM";
        AdaptRadarProductAreaName["Converge"] = "Converge";
        AdaptRadarProductAreaName["EndUser"] = "End User";
        AdaptRadarProductAreaName["ServiceManagement"] = "Service Management";
        AdaptRadarProductAreaName["Platform"] = "Platform";
        AdaptRadarProductAreaName["ADAPT"] = "ADAPT";
        AdaptRadarProductAreaName["IZOT"] = "IZOT";
    })(exports.AdaptRadarProductAreaName || (exports.AdaptRadarProductAreaName = {}));
    exports.AdaptRadarSubProductNameLevel1 = void 0;
    (function (AdaptRadarSubProductNameLevel1) {
        // Platform
        AdaptRadarSubProductNameLevel1["Launcher"] = "Launcher";
        AdaptRadarSubProductNameLevel1["Manage"] = "Manage";
        AdaptRadarSubProductNameLevel1["Configure"] = "Configure";
        AdaptRadarSubProductNameLevel1["HelixSSOConfiguration"] = "Helix SSO Configuration";
        AdaptRadarSubProductNameLevel1["MultiCloudBroker"] = "Multi-Cloud Broker";
        AdaptRadarSubProductNameLevel1["Integrate"] = "Integrate";
        AdaptRadarSubProductNameLevel1["Design"] = "Design";
        // Service Management
        AdaptRadarSubProductNameLevel1["Telco"] = "Telco";
        AdaptRadarSubProductNameLevel1["HR"] = "HR";
        AdaptRadarSubProductNameLevel1["Finance"] = "Finance";
        AdaptRadarSubProductNameLevel1["Roles"] = "Roles";
        AdaptRadarSubProductNameLevel1["Notifications"] = "Notifications";
        AdaptRadarSubProductNameLevel1["Locations"] = "Locations";
        AdaptRadarSubProductNameLevel1["Reports"] = "Reports";
        AdaptRadarSubProductNameLevel1["Catalog"] = "Catalog";
        AdaptRadarSubProductNameLevel1["Administer"] = "Administer";
        AdaptRadarSubProductNameLevel1["ITSMInsights"] = "ITSM Insights";
        AdaptRadarSubProductNameLevel1["ServiceManagementManage"] = "Manage";
        // End Users
        AdaptRadarSubProductNameLevel1["Chatbot"] = "Chatbot";
        AdaptRadarSubProductNameLevel1["VirtualAssistant"] = "Virtual Assistant";
        AdaptRadarSubProductNameLevel1["DWPEndUser"] = "DWP End User";
        AdaptRadarSubProductNameLevel1["BWFPortal"] = "BWF Portal";
        // Converge
        AdaptRadarSubProductNameLevel1["SharedTicketConsole"] = "Shared Ticket Console";
        AdaptRadarSubProductNameLevel1["KnowledgeManagement"] = "Knowledge Management";
        AdaptRadarSubProductNameLevel1["TimelineCalendar"] = "Timeline Calendar";
        AdaptRadarSubProductNameLevel1["CMDB"] = "CMDB";
        // ITOM
        AdaptRadarSubProductNameLevel1["View"] = "View";
        AdaptRadarSubProductNameLevel1["Model"] = "Model";
        AdaptRadarSubProductNameLevel1["ITOMManage"] = "Manage";
        AdaptRadarSubProductNameLevel1["Workspace"] = "Workspace";
        AdaptRadarSubProductNameLevel1["ITOMAdminister"] = "Administer";
        AdaptRadarSubProductNameLevel1["Logs"] = "Logs";
        AdaptRadarSubProductNameLevel1["ITOMConfigure"] = "Configure";
        AdaptRadarSubProductNameLevel1["Dashboard"] = "Dashboard";
        AdaptRadarSubProductNameLevel1["ITOM"] = "ITOM";
        AdaptRadarSubProductNameLevel1["Authorize"] = "Authorize";
        AdaptRadarSubProductNameLevel1["Monitor"] = "Monitor";
        AdaptRadarSubProductNameLevel1["Policies"] = "Policies";
        // ADAPT
        AdaptRadarSubProductNameLevel1["Documentation"] = "Documentation";
        AdaptRadarSubProductNameLevel1["IconFinder"] = "Icon Finder";
        AdaptRadarSubProductNameLevel1["ADAPTTools"] = "ADAPT Tools";
        // IZOT
        AdaptRadarSubProductNameLevel1["AMIOps"] = "AMI Ops";
        AdaptRadarSubProductNameLevel1["Compuware"] = "Compuware";
        AdaptRadarSubProductNameLevel1["DB2"] = "DB2";
    })(exports.AdaptRadarSubProductNameLevel1 || (exports.AdaptRadarSubProductNameLevel1 = {}));
    exports.AdaptRadarSubProductNameLevel2 = void 0;
    (function (AdaptRadarSubProductNameLevel2) {
        // Platform -> Manage
        AdaptRadarSubProductNameLevel2["Identities"] = "Identities";
        AdaptRadarSubProductNameLevel2["Roles"] = "Roles";
        // Platform -> Configure
        AdaptRadarSubProductNameLevel2["Tenants"] = "Tenants";
        AdaptRadarSubProductNameLevel2["Notifications"] = "Notifications";
        AdaptRadarSubProductNameLevel2["InnovationSuiteConfigurations"] = "Innovation Suite Configurations";
        AdaptRadarSubProductNameLevel2["SharedConfigurations"] = "Shared Configurations";
        // Platform -> Design
        AdaptRadarSubProductNameLevel2["DataModel"] = "Data Model";
        AdaptRadarSubProductNameLevel2["UI"] = "UI";
        AdaptRadarSubProductNameLevel2["RulesDesigner"] = "Rules Designer";
        AdaptRadarSubProductNameLevel2["ProcessDesigner"] = "Process Designer";
        // Service Management -> Catalog
        AdaptRadarSubProductNameLevel2["Services"] = "Services";
        // Service Management -> Administer
        AdaptRadarSubProductNameLevel2["Studio"] = "Studio";
        AdaptRadarSubProductNameLevel2["Features"] = "Features";
        AdaptRadarSubProductNameLevel2["Configure"] = "Configure";
        // Service Management -> Manage
        AdaptRadarSubProductNameLevel2["Incidents"] = "Incidents";
        AdaptRadarSubProductNameLevel2["Change"] = "Change";
        AdaptRadarSubProductNameLevel2["Problems"] = "Problems";
        AdaptRadarSubProductNameLevel2["Assets"] = "Assets";
        // End Users -> Virtual Assistant
        AdaptRadarSubProductNameLevel2["LiveChat"] = "Live Chat";
        // End Users -> BWF Portal
        AdaptRadarSubProductNameLevel2["Telco"] = "Telco";
        AdaptRadarSubProductNameLevel2["HR"] = "HR";
        AdaptRadarSubProductNameLevel2["Finance"] = "Finance";
        // Converge -> Shared Ticket Console
        AdaptRadarSubProductNameLevel2["SharedTicketConsoleITSM"] = "ITSM";
        AdaptRadarSubProductNameLevel2["BWF"] = "BWF";
        // Converge -> Knowledge Management
        AdaptRadarSubProductNameLevel2["HelixKnowledgeManagement"] = "Helix Knowledge Management";
        AdaptRadarSubProductNameLevel2["RemedyKnowledgeManagement"] = "Remedy Knowledge Management";
        AdaptRadarSubProductNameLevel2["BusinessWorkflowsKnowledgeManagement"] = "Business Workflows Knowledge Management";
        // Converge -> Timeline Calendar
        AdaptRadarSubProductNameLevel2["TimelineCalendarITSM"] = "ITSM";
        // Converge -> CMDB
        AdaptRadarSubProductNameLevel2["CMDB_ITSM"] = "ITSM";
        AdaptRadarSubProductNameLevel2["Discovery"] = "Discovery";
        AdaptRadarSubProductNameLevel2["OperationsManagement"] = "Operations Management";
        // ITOM	-> Manage
        AdaptRadarSubProductNameLevel2["EnrichmentSources"] = "Enrichment Sources";
        AdaptRadarSubProductNameLevel2["EnrichmentPolicies"] = "Enrichment Policies";
        AdaptRadarSubProductNameLevel2["AlertPolicies"] = "Alert Policies";
        AdaptRadarSubProductNameLevel2["DataMasking"] = "Data Masking";
        AdaptRadarSubProductNameLevel2["Entities"] = "Entities";
        AdaptRadarSubProductNameLevel2["Blueprints"] = "Blueprints";
        AdaptRadarSubProductNameLevel2["Situations"] = "Situations";
        AdaptRadarSubProductNameLevel2["Policies"] = "Policies";
        AdaptRadarSubProductNameLevel2["Connectors"] = "Connectors";
        // ITOM	-> Logs
        AdaptRadarSubProductNameLevel2["Explore"] = "Explore";
        AdaptRadarSubProductNameLevel2["Collect"] = "Collect";
        AdaptRadarSubProductNameLevel2["Archive"] = "Archive";
        // ITOM	-> View
        AdaptRadarSubProductNameLevel2["Requests"] = "Requests";
        AdaptRadarSubProductNameLevel2["Reports"] = "Reports";
        // ITOM	-> Policies
        AdaptRadarSubProductNameLevel2["Monitoring"] = "Monitoring";
        AdaptRadarSubProductNameLevel2["Blackout"] = "Blackout";
        AdaptRadarSubProductNameLevel2["Alarm"] = "Alarm";
        AdaptRadarSubProductNameLevel2["Even"] = "Even";
        // ADAPT -> ADAPT Tools
        AdaptRadarSubProductNameLevel2["SprintPlanner"] = "Sprint Planner";
    })(exports.AdaptRadarSubProductNameLevel2 || (exports.AdaptRadarSubProductNameLevel2 = {}));
    exports.AdaptRadarSubProductNameLevel3 = void 0;
    (function (AdaptRadarSubProductNameLevel3) {
        // Platform -> Configure -> Innovation Suite Configurations
        AdaptRadarSubProductNameLevel3["DataManagement"] = "Data Management";
        AdaptRadarSubProductNameLevel3["Approval"] = "Approval";
        AdaptRadarSubProductNameLevel3["Assignment"] = "Assignment";
        // Platform -> Configure -> Shared Configurations
        AdaptRadarSubProductNameLevel3["ApprovalCentral"] = "Approval Central";
        AdaptRadarSubProductNameLevel3["Chatbot"] = "Chatbot";
        AdaptRadarSubProductNameLevel3["ChatOps"] = "Chat Ops";
        AdaptRadarSubProductNameLevel3["Foundation"] = "Foundation";
        AdaptRadarSubProductNameLevel3["LiveChatAgentConsole"] = "Live Chat Agent Console";
        // Converge -> Shared Ticket Console -> BWF
        AdaptRadarSubProductNameLevel3["Telco"] = "Telco";
        AdaptRadarSubProductNameLevel3["HR"] = "HR";
        AdaptRadarSubProductNameLevel3["Finance"] = "Finance";
    })(exports.AdaptRadarSubProductNameLevel3 || (exports.AdaptRadarSubProductNameLevel3 = {}));
    exports.AdaptRadarHostingType = void 0;
    (function (AdaptRadarHostingType) {
        AdaptRadarHostingType["OnPrem"] = "OnPrem";
        AdaptRadarHostingType["SaaS"] = "SaaS";
    })(exports.AdaptRadarHostingType || (exports.AdaptRadarHostingType = {}));
    exports.AdaptRadarCustomerEnvironment = void 0;
    (function (AdaptRadarCustomerEnvironment) {
        AdaptRadarCustomerEnvironment["Integration"] = "Integration";
        AdaptRadarCustomerEnvironment["QA"] = "QA";
        AdaptRadarCustomerEnvironment["Stage"] = "Stage";
        AdaptRadarCustomerEnvironment["Production"] = "Production";
    })(exports.AdaptRadarCustomerEnvironment || (exports.AdaptRadarCustomerEnvironment = {}));
    /**
     * Used to flatten "productInfo" property for better readability when data sent as a part of analytics event data
     *
     * @param productInfo non flatten version of "productInfo"
     */
    function flattenProductInfo(productInfo) {
        if (lodashEs.isNil(productInfo)) {
            return null;
        }
        var productArea = productInfo.productArea;
        var subProductLevel1 = productInfo.subProductLevel1;
        var subProductLevel2 = productInfo.subProductLevel2;
        var subProductLevel3 = productInfo.subProductLevel3;
        return {
            productAreaName: productArea.name,
            productAreaVersion: productArea.version instanceof i0.Version
                ? productArea.version.full
                : productArea.version,
            productAreaHosting: productArea.hosting,
            productAreaCustomerEnvironment: productArea.customerEnvironment,
            subProductLevel1Name: subProductLevel1 === null || subProductLevel1 === void 0 ? void 0 : subProductLevel1.name,
            subProductLevel1Version: (subProductLevel1 === null || subProductLevel1 === void 0 ? void 0 : subProductLevel1.version) instanceof i0.Version
                ? subProductLevel1 === null || subProductLevel1 === void 0 ? void 0 : subProductLevel1.version.full
                : subProductLevel1 === null || subProductLevel1 === void 0 ? void 0 : subProductLevel1.version,
            subProductLevel1Hosting: subProductLevel1 === null || subProductLevel1 === void 0 ? void 0 : subProductLevel1.hosting,
            subProductLevel1CustomerEnvironment: productArea.customerEnvironment,
            subProductLevel2Name: subProductLevel2 === null || subProductLevel2 === void 0 ? void 0 : subProductLevel2.name,
            subProductLevel2Version: (subProductLevel2 === null || subProductLevel2 === void 0 ? void 0 : subProductLevel2.version) instanceof i0.Version
                ? subProductLevel2 === null || subProductLevel2 === void 0 ? void 0 : subProductLevel2.version.full
                : subProductLevel2 === null || subProductLevel2 === void 0 ? void 0 : subProductLevel2.version,
            subProductLevel2Hosting: subProductLevel2 === null || subProductLevel2 === void 0 ? void 0 : subProductLevel2.hosting,
            subProductLevel2CustomerEnvironment: productArea.customerEnvironment,
            subProductLevel3Name: subProductLevel3 === null || subProductLevel3 === void 0 ? void 0 : subProductLevel3.name,
            subProductLevel3Version: (subProductLevel3 === null || subProductLevel3 === void 0 ? void 0 : subProductLevel3.version) instanceof i0.Version
                ? subProductLevel3 === null || subProductLevel3 === void 0 ? void 0 : subProductLevel3.version.full
                : subProductLevel3 === null || subProductLevel3 === void 0 ? void 0 : subProductLevel3.version,
            subProductLevel3Hosting: subProductLevel3 === null || subProductLevel3 === void 0 ? void 0 : subProductLevel3.hosting,
            subProductLevel3CustomerEnvironment: productArea.customerEnvironment,
        };
    }

    var ADAPT_RADAR_MODULE_CONFIG_TOKEN = new i0.InjectionToken('ADAPT_RADAR_MODULE_CONFIG');

    /**
     * The main goal of UA parser is to convert user agent string to human readable information
     *
     * Example:
     *
     * user agent string:
     * "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36"
     *
     * will be converted into object:
     * {
     *  BrowserDetailedVersion: "95.0.4638.69"
     *  BrowserType: "Chrome"
     *  BrowserVersion: "95"
     *  OperatingSystem: "Mac OS"
     *  OperatingSystemVersion: "10.15.7"
     * }
     *
     *
     * The main part of code was taken from - https://github.com/faisalman/ua-parser-js (version: "0.7.28", date: "21 October 2021")
     */
    var EMPTY = '', UNKNOWN = '?', FUNC_TYPE = 'function', UNDEF_TYPE = 'undefined', OBJ_TYPE = 'object', STR_TYPE = 'string', MODEL = 'model', NAME = 'name', TYPE = 'type', VENDOR = 'vendor', VERSION = 'version', ARCHITECTURE = 'architecture', MOBILE = 'mobile', TABLET = 'tablet', WEARABLE = 'wearable', EMBEDDED = 'embedded', UA_MAX_LENGTH = 255;
    exports.AdaptRadarUAVendor = void 0;
    (function (AdaptRadarUAVendor) {
        AdaptRadarUAVendor["AMAZON"] = "Amazon";
        AdaptRadarUAVendor["APPLE"] = "Apple";
        AdaptRadarUAVendor["ASUS"] = "ASUS";
        AdaptRadarUAVendor["BLACKBERRY"] = "BlackBerry";
        AdaptRadarUAVendor["BROWSER"] = "Browser";
        AdaptRadarUAVendor["CHROME"] = "Chrome";
        AdaptRadarUAVendor["EDGE"] = "Edge";
        AdaptRadarUAVendor["FIREFOX"] = "Firefox";
        AdaptRadarUAVendor["GOOGLE"] = "Google";
        AdaptRadarUAVendor["HUAWEI"] = "Huawei";
        AdaptRadarUAVendor["LG"] = "LG";
        AdaptRadarUAVendor["MICROSOFT"] = "Microsoft";
        AdaptRadarUAVendor["MOTOROLA"] = "Motorola";
        AdaptRadarUAVendor["OPERA"] = "Opera";
        AdaptRadarUAVendor["SAMSUNG"] = "Samsung";
        AdaptRadarUAVendor["SONY"] = "Sony";
        AdaptRadarUAVendor["XIAOMI"] = "Xiaomi";
        AdaptRadarUAVendor["ZEBRA"] = "Zebra";
        AdaptRadarUAVendor["FACEBOOK"] = "Facebook";
    })(exports.AdaptRadarUAVendor || (exports.AdaptRadarUAVendor = {}));
    /**
     * Service used to convert data from browser user agent to readable information
     */
    var AdaptRadarUAParser = /** @class */ (function () {
        function AdaptRadarUAParser() {
            this.windowsVersionMap = {
                'ME': '4.90',
                'NT 3.11': 'NT3.51',
                'NT 4.0': 'NT4.0',
                '2000': 'NT 5.0',
                'XP': ['NT 5.1', 'NT 5.2'],
                'Vista': 'NT 6.0',
                '7': 'NT 6.1',
                '8': 'NT 6.2',
                '8.1': 'NT 6.3',
                '10': ['NT 6.4', 'NT 10.0'],
                'RT': 'ARM'
            };
            /* eslint-disable no-useless-escape */
            this.regexes = {
                browser: [
                    [
                        /\b(?:crmo|crios)\/([\w\.]+)/i // Chrome for Android/iOS
                    ], [VERSION, [NAME, 'Chrome']], [
                        /edg(?:e|ios|a)?\/([\w\.]+)/i // Microsoft Edge
                    ], [VERSION, [NAME, 'Edge']], [
                        // Presto based
                        /(opera mini)\/([-\w\.]+)/i,
                        /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
                        /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i // Opera
                    ], [NAME, VERSION], [
                        /opios[\/ ]+([\w\.]+)/i // Opera mini on iphone >= 8.0
                    ], [VERSION, [NAME, exports.AdaptRadarUAVendor.OPERA + ' Mini']], [
                        /\bopr\/([\w\.]+)/i // Opera Webkit
                    ], [VERSION, [NAME, exports.AdaptRadarUAVendor.OPERA]], [
                        // Mixed
                        /(kindle)\/([\w\.]+)/i,
                        /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,
                        // Trident based
                        /(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,
                        /(ba?idubrowser)[\/ ]?([\w\.]+)/i,
                        /(?:ms|\()(ie) ([\w\.]+)/i,
                        // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
                        /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale|qqbrowserlite|qq)\/([-\w\.]+)/i,
                        // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ
                        /(weibo)__([\d\.]+)/i // Weibo
                    ], [NAME, VERSION], [
                        /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i // UCBrowser
                    ], [VERSION, [NAME, 'UC' + exports.AdaptRadarUAVendor.BROWSER]], [
                        /\bqbcore\/([\w\.]+)/i // WeChat Desktop for Windows Built-in Browser
                    ], [VERSION, [NAME, 'WeChat(Win) Desktop']], [
                        /micromessenger\/([\w\.]+)/i // WeChat
                    ], [VERSION, [NAME, 'WeChat']], [
                        /konqueror\/([\w\.]+)/i // Konqueror
                    ], [VERSION, [NAME, 'Konqueror']], [
                        /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i // IE11
                    ], [VERSION, [NAME, 'IE']], [
                        /yabrowser\/([\w\.]+)/i // Yandex
                    ], [VERSION, [NAME, 'Yandex']], [
                        /(avast|avg)\/([\w\.]+)/i // Avast/AVG Secure Browser
                    ], [[NAME, /(.+)/, '$1 Secure ' + exports.AdaptRadarUAVendor.BROWSER], VERSION], [
                        /\bfocus\/([\w\.]+)/i // Firefox Focus
                    ], [VERSION, [NAME, exports.AdaptRadarUAVendor.FIREFOX + ' Focus']], [
                        /\bopt\/([\w\.]+)/i // Opera Touch
                    ], [VERSION, [NAME, exports.AdaptRadarUAVendor.OPERA + ' Touch']], [
                        /coc_coc\w+\/([\w\.]+)/i // Coc Coc Browser
                    ], [VERSION, [NAME, 'Coc Coc']], [
                        /dolfin\/([\w\.]+)/i // Dolphin
                    ], [VERSION, [NAME, 'Dolphin']], [
                        /coast\/([\w\.]+)/i // Opera Coast
                    ], [VERSION, [NAME, exports.AdaptRadarUAVendor.OPERA + ' Coast']], [
                        /miuibrowser\/([\w\.]+)/i // MIUI Browser
                    ], [VERSION, [NAME, 'MIUI ' + exports.AdaptRadarUAVendor.BROWSER]], [
                        /fxios\/([-\w\.]+)/i // Firefox for iOS
                    ], [VERSION, [NAME, exports.AdaptRadarUAVendor.FIREFOX]], [
                        /\bqihu|(qi?ho?o?|360)browser/i // 360
                    ], [[NAME, '360 ' + exports.AdaptRadarUAVendor.BROWSER]], [
                        /(oculus|samsung|sailfish)browser\/([\w\.]+)/i
                    ], [[NAME, /(.+)/, '$1 ' + exports.AdaptRadarUAVendor.BROWSER], VERSION], [
                        /(comodo_dragon)\/([\w\.]+)/i // Comodo Dragon
                    ], [[NAME, /_/g, ' '], VERSION], [
                        /(electron)\/([\w\.]+) safari/i,
                        /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
                        /m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i // QQBrowser/Baidu App/2345 Browser
                    ], [NAME, VERSION], [
                        /(metasr)[\/ ]?([\w\.]+)/i,
                        /(lbbrowser)/i // LieBao Browser
                    ], [NAME], [
                        // WebView
                        /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i // Facebook App for iOS & Android
                    ], [[NAME, exports.AdaptRadarUAVendor.FACEBOOK], VERSION], [
                        /safari (line)\/([\w\.]+)/i,
                        /\b(line)\/([\w\.]+)\/iab/i,
                        /(chromium|instagram)[\/ ]([-\w\.]+)/i // Chromium/Instagram
                    ], [NAME, VERSION], [
                        /\bgsa\/([\w\.]+) .*safari\//i // Google Search Appliance on iOS
                    ], [VERSION, [NAME, 'GSA']], [
                        /headlesschrome(?:\/([\w\.]+)| )/i // Chrome Headless
                    ], [VERSION, [NAME, exports.AdaptRadarUAVendor.CHROME + ' Headless']], [
                        / wv\).+(chrome)\/([\w\.]+)/i // Chrome WebView
                    ], [[NAME, exports.AdaptRadarUAVendor.CHROME + ' WebView'], VERSION], [
                        /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i // Android Browser
                    ], [VERSION, [NAME, 'Android ' + exports.AdaptRadarUAVendor.BROWSER]], [
                        /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i // Chrome/OmniWeb/Arora/Tizen/Nokia
                    ], [NAME, VERSION], [
                        /version\/([\w\.]+) .*mobile\/\w+ (safari)/i // Mobile Safari
                    ], [VERSION, [NAME, 'Mobile Safari']], [
                        /version\/([\w\.]+) .*(mobile ?safari|safari)/i // Safari & Safari Mobile
                    ], [VERSION, NAME], [
                        /(webkit|khtml)\/([\w\.]+)/i
                    ], [NAME, VERSION], [
                        // Gecko based
                        /(navigator|netscape\d?)\/([-\w\.]+)/i // Netscape
                    ], [[NAME, 'Netscape'], VERSION], [
                        /mobile vr; rv:([\w\.]+)\).+firefox/i // Firefox Reality
                    ], [VERSION, [NAME, exports.AdaptRadarUAVendor.FIREFOX + ' Reality']], [
                        /ekiohf.+(flow)\/([\w\.]+)/i,
                        /(swiftfox)/i,
                        /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
                        // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar
                        /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
                        // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
                        /(firefox)\/([\w\.]+)/i,
                        /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
                        // Other
                        /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
                        // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser
                        /(links) \(([\w\.]+)/i // Links
                    ], [NAME, VERSION]
                ],
                cpu: [
                    [
                        /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i // AMD64 (x64)
                    ], [[ARCHITECTURE, 'amd64']], [
                        /(ia32(?=;))/i // IA32 (quicktime)
                    ], [[ARCHITECTURE, AdaptRadarUAParser.lowerize]], [
                        /((?:i[346]|x)86)[;\)]/i // IA32 (x86)
                    ], [[ARCHITECTURE, 'ia32']], [
                        /\b(aarch64|arm(v?8e?l?|_?64))\b/i // ARM64
                    ], [[ARCHITECTURE, 'arm64']], [
                        /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i // ARMHF
                    ], [[ARCHITECTURE, 'armhf']], [
                        // PocketPC mistakenly identified as PowerPC
                        /windows (ce|mobile); ppc;/i
                    ], [[ARCHITECTURE, 'arm']], [
                        /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i // PowerPC
                    ], [[ARCHITECTURE, /ower/, EMPTY, AdaptRadarUAParser.lowerize]], [
                        /(sun4\w)[;\)]/i // SPARC
                    ], [[ARCHITECTURE, 'sparc']], [
                        /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
                        // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
                    ], [[ARCHITECTURE, AdaptRadarUAParser.lowerize]]
                ],
                device: [
                    [
                        //////////////////////////
                        // MOBILES & TABLETS
                        // Ordered by popularity
                        /////////////////////////
                        // Samsung
                        /\b(sch-i[89]0\d|shw-m380s|sm-[pt]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.SAMSUNG], [TYPE, TABLET]], [
                        /\b((?:s[cgp]h|gt|sm)-\w+|galaxy nexus)/i,
                        /samsung[- ]([-\w]+)/i,
                        /sec-(sgh\w+)/i
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.SAMSUNG], [TYPE, MOBILE]], [
                        // Apple
                        /\((ip(?:hone|od)[\w ]*);/i // iPod/iPhone
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.APPLE], [TYPE, MOBILE]], [
                        /\((ipad);[-\w\),; ]+apple/i,
                        /applecoremedia\/[\w\.]+ \((ipad)/i,
                        /\b(ipad)\d\d?,\d\d?[;\]].+ios/i
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.APPLE], [TYPE, TABLET]], [
                        // Huawei
                        /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.HUAWEI], [TYPE, TABLET]], [
                        /(?:huawei|honor)([-\w ]+)[;\)]/i,
                        /\b(nexus 6p|\w{2,4}-[atu]?[ln][01259x][012359][an]?)\b(?!.+d\/s)/i
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.HUAWEI], [TYPE, MOBILE]], [
                        // Xiaomi
                        /\b(poco[\w ]+)(?: bui|\))/i,
                        /\b; (\w+) build\/hm\1/i,
                        /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
                        /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
                        /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i // Xiaomi Mi
                    ], [[MODEL, /_/g, ' '], [VENDOR, exports.AdaptRadarUAVendor.XIAOMI], [TYPE, MOBILE]], [
                        /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i // Mi Pad tablets
                    ], [[MODEL, /_/g, ' '], [VENDOR, exports.AdaptRadarUAVendor.XIAOMI], [TYPE, TABLET]], [
                        // OPPO
                        /; (\w+) bui.+ oppo/i,
                        /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007)\b/i
                    ], [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]], [
                        // Vivo
                        /vivo (\w+)(?: bui|\))/i,
                        /\b(v[12]\d{3}\w?[at])(?: bui|;)/i
                    ], [MODEL, [VENDOR, 'Vivo'], [TYPE, MOBILE]], [
                        // Realme
                        /\b(rmx[12]\d{3})(?: bui|;|\))/i
                    ], [MODEL, [VENDOR, 'Realme'], [TYPE, MOBILE]], [
                        // Motorola
                        /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
                        /\bmot(?:orola)?[- ](\w*)/i,
                        /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.MOTOROLA], [TYPE, MOBILE]], [
                        /\b(mz60\d|xoom[2 ]{0,2}) build\//i
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.MOTOROLA], [TYPE, TABLET]], [
                        // LG
                        /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.LG], [TYPE, TABLET]], [
                        /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
                        /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
                        /\blg-?([\d\w]+) bui/i
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.LG], [TYPE, MOBILE]], [
                        // Lenovo
                        /(ideatab[-\w ]+)/i,
                        /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i
                    ], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [
                        // Nokia
                        /(?:maemo|nokia).*(n900|lumia \d+)/i,
                        /nokia[-_ ]?([-\w\.]*)/i
                    ], [[MODEL, /_/g, ' '], [VENDOR, 'Nokia'], [TYPE, MOBILE]], [
                        // Google
                        /(pixel c)\b/i // Google Pixel C
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.GOOGLE], [TYPE, TABLET]], [
                        /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i // Google Pixel
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.GOOGLE], [TYPE, MOBILE]], [
                        // Sony
                        /droid.+ ([c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.SONY], [TYPE, MOBILE]], [
                        /sony tablet [ps]/i,
                        /\b(?:sony)?sgp\w+(?: bui|\))/i
                    ], [[MODEL, 'Xperia Tablet'], [VENDOR, exports.AdaptRadarUAVendor.SONY], [TYPE, TABLET]], [
                        // OnePlus
                        / (kb2005|in20[12]5|be20[12][59])\b/i,
                        /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i
                    ], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [
                        // Amazon
                        /(alexa)webm/i,
                        /(kf[a-z]{2}wi)( bui|\))/i,
                        /(kf[a-z]+)( bui|\)).+silk\//i // Kindle Fire HD
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.AMAZON], [TYPE, TABLET]], [
                        /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i // Fire Phone
                    ], [[MODEL, /(.+)/g, 'Fire Phone $1'], [VENDOR, exports.AdaptRadarUAVendor.AMAZON], [TYPE, MOBILE]], [
                        // BlackBerry
                        /(playbook);[-\w\),; ]+(rim)/i // BlackBerry PlayBook
                    ], [MODEL, VENDOR, [TYPE, TABLET]], [
                        /\b((?:bb[a-f]|st[hv])100-\d)/i,
                        /\(bb10; (\w+)/i // BlackBerry 10
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.BLACKBERRY], [TYPE, MOBILE]], [
                        // Asus
                        /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.ASUS], [TYPE, TABLET]], [
                        / (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.ASUS], [TYPE, MOBILE]], [
                        // HTC
                        /(nexus 9)/i // HTC Nexus 9
                    ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [
                        /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
                        // ZTE
                        /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
                        /(alcatel|geeksphone|nexian|panasonic|sony)[-_ ]?([-\w]*)/i // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
                    ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [
                        // Acer
                        /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i
                    ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [
                        // Meizu
                        /droid.+; (m[1-5] note) bui/i,
                        /\bmz-([-\w]{2,})/i
                    ], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [
                        // Sharp
                        /\b(sh-?[altvz]?\d\d[a-ekm]?)/i
                    ], [MODEL, [VENDOR, 'Sharp'], [TYPE, MOBILE]], [
                        // MIXED
                        /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,
                        // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
                        /(hp) ([\w ]+\w)/i,
                        /(asus)-?(\w+)/i,
                        /(microsoft); (lumia[\w ]+)/i,
                        /(lenovo)[-_ ]?([-\w]+)/i,
                        /(jolla)/i,
                        /(oppo) ?([\w ]+) bui/i // OPPO
                    ], [VENDOR, MODEL, [TYPE, MOBILE]], [
                        /(archos) (gamepad2?)/i,
                        /(hp).+(touchpad(?!.+tablet)|tablet)/i,
                        /(kindle)\/([\w\.]+)/i,
                        /(nook)[\w ]+build\/(\w+)/i,
                        /(dell) (strea[kpr\d ]*[\dko])/i,
                        /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
                        /(trinity)[- ]*(t\d{3}) bui/i,
                        /(gigaset)[- ]+(q\w{1,9}) bui/i,
                        /(vodafone) ([\w ]+)(?:\)| bui)/i // Vodafone
                    ], [VENDOR, MODEL, [TYPE, TABLET]], [
                        /(surface duo)/i // Surface Duo
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.MICROSOFT], [TYPE, TABLET]], [
                        /droid [\d\.]+; (fp\du?)(?: b|\))/i // Fairphone
                    ], [MODEL, [VENDOR, 'Fairphone'], [TYPE, MOBILE]], [
                        /(u304aa)/i // AT&T
                    ], [MODEL, [VENDOR, 'AT&T'], [TYPE, MOBILE]], [
                        /\bsie-(\w*)/i // Siemens
                    ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [
                        /\b(rct\w+) b/i // RCA Tablets
                    ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [
                        /\b(venue[\d ]{2,7}) b/i // Dell Venue Tablets
                    ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [
                        /\b(q(?:mv|ta)\w+) b/i // Verizon Tablet
                    ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [
                        /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i // Barnes & Noble Tablet
                    ], [MODEL, [VENDOR, 'Barnes & Noble'], [TYPE, TABLET]], [
                        /\b(tm\d{3}\w+) b/i
                    ], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [
                        /\b(k88) b/i // ZTE K Series Tablet
                    ], [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]], [
                        /\b(nx\d{3}j) b/i // ZTE Nubia
                    ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [
                        /\b(gen\d{3}) b.+49h/i // Swiss GEN Mobile
                    ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [
                        /\b(zur\d{3}) b/i // Swiss ZUR Tablet
                    ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [
                        /\b((zeki)?tb.*\b) b/i // Zeki Tablets
                    ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [
                        /\b([yr]\d{2}) b/i,
                        /\b(dragon[- ]+touch |dt)(\w{5}) b/i // Dragon Touch Tablet
                    ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [
                        /\b(ns-?\w{0,9}) b/i // Insignia Tablets
                    ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [
                        /\b((nxa|next)-?\w{0,9}) b/i // NextBook Tablets
                    ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [
                        /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i // Voice Xtreme Phones
                    ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [
                        /\b(lvtel\-)?(v1[12]) b/i // LvTel Phones
                    ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [
                        /\b(ph-1) /i // Essential PH-1
                    ], [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]], [
                        /\b(v(100md|700na|7011|917g).*\b) b/i // Envizen Tablets
                    ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [
                        /\b(trio[-\w\. ]+) b/i // MachSpeed Tablets
                    ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [
                        /\btu_(1491) b/i // Rotor Tablets
                    ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [
                        /(shield[\w ]+) b/i // Nvidia Shield Tablets
                    ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, TABLET]], [
                        /(sprint) (\w+)/i // Sprint Phones
                    ], [VENDOR, MODEL, [TYPE, MOBILE]], [
                        /(kin\.[onetw]{3})/i // Microsoft Kin
                    ], [[MODEL, /\./g, ' '], [VENDOR, exports.AdaptRadarUAVendor.MICROSOFT], [TYPE, MOBILE]], [
                        /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i // Zebra
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.ZEBRA], [TYPE, TABLET]], [
                        /droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.ZEBRA], [TYPE, MOBILE]], [
                        ///////////////////
                        // WEARABLES
                        ///////////////////
                        /((pebble))app/i // Pebble
                    ], [VENDOR, MODEL, [TYPE, WEARABLE]], [
                        /droid.+; (glass) \d/i // Google Glass
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.GOOGLE], [TYPE, WEARABLE]], [
                        /droid.+; (wt63?0{2,3})\)/i
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.ZEBRA], [TYPE, WEARABLE]], [
                        /(quest( 2)?)/i // Oculus Quest
                    ], [MODEL, [VENDOR, exports.AdaptRadarUAVendor.FACEBOOK], [TYPE, WEARABLE]], [
                        ///////////////////
                        // EMBEDDED
                        ///////////////////
                        /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i // Tesla
                    ], [VENDOR, [TYPE, EMBEDDED]], [
                        ////////////////////
                        // MIXED (GENERIC)
                        ///////////////////
                        /droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i // Android Phones from Unidentified Vendors
                    ], [MODEL, [TYPE, MOBILE]], [
                        /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i // Android Tablets from Unidentified Vendors
                    ], [MODEL, [TYPE, TABLET]], [
                        /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i // Unidentifiable Tablet
                    ], [[TYPE, TABLET]], [
                        /(phone|mobile(?:[;\/]| safari)|pda(?=.+windows ce))/i // Unidentifiable Mobile
                    ], [[TYPE, MOBILE]], [
                        /(android[-\w\. ]{0,9});.+buil/i // Generic Android Device
                    ], [MODEL, [VENDOR, 'Generic']]
                ],
                engine: [
                    [
                        /windows.+ edge\/([\w\.]+)/i // EdgeHTML
                    ], [VERSION, [NAME, exports.AdaptRadarUAVendor.EDGE + 'HTML']], [
                        /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i // Blink
                    ], [VERSION, [NAME, 'Blink']], [
                        /(presto)\/([\w\.]+)/i,
                        /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,
                        /ekioh(flow)\/([\w\.]+)/i,
                        /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
                        /(icab)[\/ ]([23]\.[\d\.]+)/i // iCab
                    ], [NAME, VERSION], [
                        /rv\:([\w\.]{1,9})\b.+(gecko)/i // Gecko
                    ], [VERSION, NAME]
                ],
                os: [
                    [
                        // Windows
                        /microsoft (windows) (vista|xp)/i // Windows (iTunes)
                    ], [NAME, VERSION], [
                        /(windows) nt 6\.2; (arm)/i,
                        /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,
                        /(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i
                    ], [NAME, [VERSION, AdaptRadarUAParser.strMapper, this.windowsVersionMap]], [
                        /(win(?=3|9|n)|win 9x )([nt\d\.]+)/i
                    ], [[NAME, 'Windows'], [VERSION, AdaptRadarUAParser.strMapper, this.windowsVersionMap]], [
                        // iOS/macOS
                        /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
                        /cfnetwork\/.+darwin/i
                    ], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [
                        /(mac os x) ?([\w\. ]*)/i,
                        /(macintosh|mac_powerpc\b)(?!.+haiku)/i // Mac OS
                    ], [[NAME, 'Mac OS'], [VERSION, /_/g, '.']], [
                        // Mobile OSes
                        /droid ([\w\.]+)\b.+(android[- ]x86)/i // Android-x86
                    ], [VERSION, NAME], [
                        /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
                        /(blackberry)\w*\/([\w\.]*)/i,
                        /(tizen|kaios)[\/ ]([\w\.]+)/i,
                        /\((series40);/i // Series 40
                    ], [NAME, VERSION], [
                        /\(bb(10);/i // BlackBerry 10
                    ], [VERSION, [NAME, exports.AdaptRadarUAVendor.BLACKBERRY]], [
                        /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i // Symbian
                    ], [VERSION, [NAME, 'Symbian']], [
                        /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i // Firefox OS
                    ], [VERSION, [NAME, exports.AdaptRadarUAVendor.FIREFOX + ' OS']], [
                        /web0s;.+rt(tv)/i,
                        /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i // WebOS
                    ], [VERSION, [NAME, 'webOS']], [
                        // Google Chromecast
                        /crkey\/([\d\.]+)/i // Google Chromecast
                    ], [VERSION, [NAME, exports.AdaptRadarUAVendor.CHROME + 'cast']], [
                        /(cros) [\w]+ ([\w\.]+\w)/i // Chromium OS
                    ], [[NAME, 'Chromium OS'], VERSION], [
                        // Console
                        /(nintendo|playstation) ([wids345portablevuch]+)/i,
                        /(xbox); +xbox ([^\);]+)/i,
                        // Other
                        /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
                        /(mint)[\/\(\) ]?(\w*)/i,
                        /(mageia|vectorlinux)[; ]/i,
                        /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
                        // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire
                        /(hurd|linux) ?([\w\.]*)/i,
                        /(gnu) ?([\w\.]*)/i,
                        /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
                        /(haiku) (\w+)/i // Haiku
                    ], [NAME, VERSION], [
                        /(sunos) ?([\w\.\d]*)/i // Solaris
                    ], [[NAME, 'Solaris'], VERSION], [
                        /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
                        /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
                        /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux)/i,
                        /(unix) ?([\w\.]*)/i // UNIX
                    ], [NAME, VERSION]
                ]
            };
            this._ua = ((typeof window !== UNDEF_TYPE && window.navigator && window.navigator.userAgent) ? window.navigator.userAgent : EMPTY);
            this._rgxmap = this.regexes;
        }
        AdaptRadarUAParser.lowerize = function (str) {
            return str.toLowerCase();
        };
        AdaptRadarUAParser.has = function (str1, str2) {
            return typeof str1 === STR_TYPE ? AdaptRadarUAParser.lowerize(str2).indexOf(AdaptRadarUAParser.lowerize(str1)) !== -1 : false;
        };
        AdaptRadarUAParser.majorize = function (version) {
            var versionType = typeof version;
            return versionType === STR_TYPE ? version.replace(/[^\d\.]/g, EMPTY).split('.')[0] : undefined;
        };
        AdaptRadarUAParser.trim = function (str, len) {
            if (typeof (str) === STR_TYPE) {
                str = str.replace(/^\s\s*/, EMPTY).replace(/\s\s*$/, EMPTY);
                return typeof (len) === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
            }
        };
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        AdaptRadarUAParser.strMapper = function (str, map) {
            for (var i in map) {
                // check if current value is array
                if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
                    for (var j = 0; j < map[i].length; j++) {
                        if (AdaptRadarUAParser.has(map[i][j], str)) {
                            return (i === UNKNOWN) ? undefined : i;
                        }
                    }
                }
                else if (AdaptRadarUAParser.has(map[i], str)) {
                    return (i === UNKNOWN) ? undefined : i;
                }
            }
            return str;
        };
        AdaptRadarUAParser.prototype.getBrowser = function () {
            var browser = {
                name: null,
                version: null,
                major: null
            };
            this._rgxMapper.call(browser, this._ua, this._rgxmap.browser);
            browser.major = AdaptRadarUAParser.majorize(browser.version);
            return browser;
        };
        ;
        AdaptRadarUAParser.prototype.getCPU = function () {
            var cpu = {
                architecture: null
            };
            this._rgxMapper.call(cpu, this._ua, this._rgxmap.cpu);
            return cpu;
        };
        ;
        AdaptRadarUAParser.prototype.getDevice = function () {
            var device = {
                vendor: null,
                model: null,
                type: null
            };
            this._rgxMapper.call(device, this._ua, this._rgxmap.device);
            return device;
        };
        ;
        AdaptRadarUAParser.prototype.getEngine = function () {
            var engine = {
                name: null,
                version: null
            };
            this._rgxMapper.call(engine, this._ua, this._rgxmap.engine);
            return engine;
        };
        ;
        AdaptRadarUAParser.prototype.getOS = function () {
            var os = {
                name: null,
                version: null
            };
            this._rgxMapper.call(os, this._ua, this._rgxmap.os);
            return os;
        };
        ;
        AdaptRadarUAParser.prototype.getResult = function () {
            return {
                ua: this.getUA(),
                browser: this.getBrowser(),
                engine: this.getEngine(),
                os: this.getOS(),
                device: this.getDevice(),
                cpu: this.getCPU()
            };
        };
        ;
        AdaptRadarUAParser.prototype.getUA = function () {
            return this._ua;
        };
        ;
        AdaptRadarUAParser.prototype.setUA = function (ua) {
            this._ua = (typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH) ? AdaptRadarUAParser.trim(ua, UA_MAX_LENGTH) : ua;
        };
        ;
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        AdaptRadarUAParser.prototype._rgxMapper = function (ua, arrays) {
            var i = 0;
            var j;
            var k;
            var p;
            var q;
            var matches;
            var match;
            // loop through all regexes maps
            while (i < arrays.length && !matches) {
                var regex = arrays[i]; // even sequence (0,2,4,..)
                var props = arrays[i + 1]; // odd sequence (1,3,5,..)
                j = k = 0;
                // try matching uastring with regexes
                while (j < regex.length && !matches) {
                    matches = regex[j++].exec(ua);
                    if (matches) {
                        for (p = 0; p < props.length; p++) {
                            match = matches[++k];
                            q = props[p];
                            // check if given property is actually array
                            if (typeof q === OBJ_TYPE && q.length > 0) {
                                if (q.length == 2) {
                                    if (typeof q[1] == FUNC_TYPE) {
                                        // assign modified match
                                        this[q[0]] = q[1].call(this, match);
                                    }
                                    else {
                                        // assign given value, ignore regex match
                                        this[q[0]] = q[1];
                                    }
                                }
                                else if (q.length == 3) {
                                    // check whether function or regex
                                    if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
                                        // call function (usually string mapper)
                                        this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined;
                                    }
                                    else {
                                        // sanitize match using given regex
                                        this[q[0]] = match ? match.replace(q[1], q[2]) : undefined;
                                    }
                                }
                                else if (q.length == 4) {
                                    this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined;
                                }
                            }
                            else {
                                this[q] = match ? match : undefined;
                            }
                        }
                    }
                }
                i += 2;
            }
        };
        return AdaptRadarUAParser;
    }());
    AdaptRadarUAParser.ɵfac = function AdaptRadarUAParser_Factory(t) { return new (t || AdaptRadarUAParser)(); };
    AdaptRadarUAParser.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: AdaptRadarUAParser, factory: AdaptRadarUAParser.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptRadarUAParser, [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], null, null);
    })();

    /**
     * Service used to collect "global" data for analytics systems
     */
    var AdaptRadarGlobal = /** @class */ (function () {
        function AdaptRadarGlobal(_adaptRadarUAParser, _moduleConfig) {
            this._adaptRadarUAParser = _adaptRadarUAParser;
            this._moduleConfig = _moduleConfig;
        }
        AdaptRadarGlobal.prototype.getGlobalData = function () {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8;
            var intl = new Intl.DateTimeFormat();
            var _9 = window.navigator, languages = _9.languages, language = _9.language;
            var _10 = this._adaptRadarUAParser.getResult(), browser = _10.browser, device = _10.device, os = _10.os;
            var computedStyle = getComputedStyle(document.documentElement);
            var hasAccessibilityCSS = computedStyle.getPropertyValue('--accessible-mode');
            var hasDarkModeCSS = computedStyle.getPropertyValue('--dark-mode');
            var hasCustomizedCSS = computedStyle.getPropertyValue('--color-warning');
            return {
                BrowserType: browser.name,
                BrowserVersion: browser.major,
                BrowserDetailedVersion: browser.version,
                DeviceType: device.type,
                DeviceVendor: device.vendor,
                DeviceModel: device.model,
                OperatingSystem: os.name,
                OperatingSystemVersion: os.version,
                ConnectionDownlink: window.navigator['connection'] ? (window.navigator['connection'].downlink || null) : null,
                ConnectionEffectiveType: window.navigator['connection'] ? (window.navigator['connection'].effectiveType || null) : null,
                LocalizationSettings: languages,
                CurrentLanguage: language,
                TimeZone: (_a = intl === null || intl === void 0 ? void 0 : intl.resolvedOptions()) === null || _a === void 0 ? void 0 : _a.timeZone,
                PageName: document.title,
                AccessibilityMode: hasAccessibilityCSS === 'true',
                DarkMode: hasDarkModeCSS === 'true',
                Customized: hasCustomizedCSS === 'true',
                AngularVersion: i0.VERSION.full,
                ADAPTVersion: (_e = (_d = (_c = (_b = this._moduleConfig) === null || _b === void 0 ? void 0 : _b.versions) === null || _c === void 0 ? void 0 : _c.ADAPT_ANGULAR_VERSION) === null || _d === void 0 ? void 0 : _d.full) !== null && _e !== void 0 ? _e : null,
                TableVersion: (_j = (_h = (_g = (_f = this._moduleConfig) === null || _f === void 0 ? void 0 : _f.versions) === null || _g === void 0 ? void 0 : _g.ADAPT_TABLE_VERSION) === null || _h === void 0 ? void 0 : _h.full) !== null && _j !== void 0 ? _j : null,
                CSSVersion: (_o = (_m = (_l = (_k = this._moduleConfig) === null || _k === void 0 ? void 0 : _k.versions) === null || _l === void 0 ? void 0 : _l.ADAPT_CSS_VERSION) === null || _m === void 0 ? void 0 : _m.full) !== null && _o !== void 0 ? _o : null,
                GanttVersion: (_s = (_r = (_q = (_p = this._moduleConfig) === null || _p === void 0 ? void 0 : _p.versions) === null || _q === void 0 ? void 0 : _q.ADAPT_GANTT_VERSION) === null || _r === void 0 ? void 0 : _r.full) !== null && _s !== void 0 ? _s : null,
                ObsoleteVersion: (_w = (_v = (_u = (_t = this._moduleConfig) === null || _t === void 0 ? void 0 : _t.versions) === null || _u === void 0 ? void 0 : _u.ADAPT_OBSOLETE_VERSION) === null || _v === void 0 ? void 0 : _v.full) !== null && _w !== void 0 ? _w : null,
                RTEVersion: (_0 = (_z = (_y = (_x = this._moduleConfig) === null || _x === void 0 ? void 0 : _x.versions) === null || _y === void 0 ? void 0 : _y.ADAPT_RTE_VERSION) === null || _z === void 0 ? void 0 : _z.full) !== null && _0 !== void 0 ? _0 : null,
                ChartsVersion: (_4 = (_3 = (_2 = (_1 = this._moduleConfig) === null || _1 === void 0 ? void 0 : _1.versions) === null || _2 === void 0 ? void 0 : _2.ADAPT_CHARTS_VERSION) === null || _3 === void 0 ? void 0 : _3.full) !== null && _4 !== void 0 ? _4 : null,
                RadarVersion: (_8 = (_7 = (_6 = (_5 = this._moduleConfig) === null || _5 === void 0 ? void 0 : _5.versions) === null || _6 === void 0 ? void 0 : _6.ADAPT_RADAR_VERSION) === null || _7 === void 0 ? void 0 : _7.full) !== null && _8 !== void 0 ? _8 : null,
            };
        };
        return AdaptRadarGlobal;
    }());
    AdaptRadarGlobal.ɵfac = function AdaptRadarGlobal_Factory(t) { return new (t || AdaptRadarGlobal)(i0__namespace.ɵɵinject(AdaptRadarUAParser), i0__namespace.ɵɵinject(ADAPT_RADAR_MODULE_CONFIG_TOKEN, 8)); };
    AdaptRadarGlobal.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: AdaptRadarGlobal, factory: AdaptRadarGlobal.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptRadarGlobal, [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], function () {
            return [{ type: AdaptRadarUAParser }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [ADAPT_RADAR_MODULE_CONFIG_TOKEN]
                        }, {
                            type: i0.Optional
                        }] }];
        }, null);
    })();

    /**
     * Service used to track url changes
     */
    var AdaptRadarURLChangeTracker = /** @class */ (function () {
        function AdaptRadarURLChangeTracker(_ngZone) {
            this._ngZone = _ngZone;
            this._previousLocation = Object.assign({}, location);
            this._startTime = performance.now();
            this._urlChangeCallbackBind = this._urlChangeCallback.bind(this);
        }
        AdaptRadarURLChangeTracker.prototype.urlChange = function () {
            var _this = this;
            if (this._urlChange$) {
                return this._urlChange$;
            }
            else {
                this._urlChange$ = new rxjs.Subject();
            }
            this._ngZone.runOutsideAngular(function () {
                document.addEventListener('click', _this._urlChangeCallbackBind, true);
            });
            return this._urlChange$;
        };
        AdaptRadarURLChangeTracker.prototype.unsubscribeFromURLChange = function () {
            document.removeEventListener('click', this._urlChangeCallbackBind);
            this._urlChange$ = null;
        };
        AdaptRadarURLChangeTracker.prototype.ngOnDestroy = function () {
            this.unsubscribeFromURLChange();
        };
        AdaptRadarURLChangeTracker.prototype._msToTime = function (duration) {
            var milliseconds = Math.floor((duration % 1000) / 100);
            var seconds = Math.floor((duration / 1000) % 60);
            var minutes = Math.floor((duration / (1000 * 60)) % 60);
            var hours = Math.floor((duration / (1000 * 60 * 60)) % 24);
            return {
                timeInSeconds: seconds,
                fullTime: ((hours < 10) ? '0' + hours : hours) + ":" + ((minutes < 10) ? '0' + minutes : minutes) + ":" + ((seconds < 10) ? '0' + seconds : seconds) + "." + milliseconds,
            };
        };
        AdaptRadarURLChangeTracker.prototype._urlChangeCallback = function () {
            if (this._previousLocation.href !== location.href) {
                this._endTime = performance.now();
                var locationCopy = Object.assign({}, location);
                var timeOnPage = this._endTime - this._startTime;
                var msToTime = this._msToTime(timeOnPage);
                this._urlChange$.next({
                    PreviousLocation: Object.assign({}, this._previousLocation),
                    CurrentLocation: locationCopy,
                    PageTitle: document.title,
                    TimeOnPageInMilliseconds: timeOnPage,
                    TimeOnPageInSeconds: msToTime === null || msToTime === void 0 ? void 0 : msToTime.timeInSeconds,
                    TimeOnPage: msToTime === null || msToTime === void 0 ? void 0 : msToTime.fullTime
                });
                this._previousLocation = locationCopy;
                this._startTime = performance.now();
            }
        };
        return AdaptRadarURLChangeTracker;
    }());
    AdaptRadarURLChangeTracker.ɵfac = function AdaptRadarURLChangeTracker_Factory(t) { return new (t || AdaptRadarURLChangeTracker)(i0__namespace.ɵɵinject(i0__namespace.NgZone)); };
    AdaptRadarURLChangeTracker.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: AdaptRadarURLChangeTracker, factory: AdaptRadarURLChangeTracker.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptRadarURLChangeTracker, [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], function () { return [{ type: i0__namespace.NgZone }]; }, null);
    })();

    /**
     * Gainsight provider
     * API docs - https://support.gainsight.com/PX/API_for_Developers
     */
    var AdaptRadarGainsightProvider = /** @class */ (function () {
        function AdaptRadarGainsightProvider(_adaptRadarGlobal, _adaptRadarURLChangeTracker) {
            this._adaptRadarGlobal = _adaptRadarGlobal;
            this._adaptRadarURLChangeTracker = _adaptRadarURLChangeTracker;
            this._isIdentifyEventSent = false;
            this._destroyed$ = new rxjs.ReplaySubject(1);
            this._initSource = new rxjs.BehaviorSubject(false);
            // Observable that can be used to check Gainsight script initialization state
            this.init$ = this._initSource.asObservable();
        }
        AdaptRadarGainsightProvider.getInitScript = function (id, customInitScript, customSourceScript) {
            return customInitScript || gainsightInitScript(id, customSourceScript);
        };
        Object.defineProperty(AdaptRadarGainsightProvider.prototype, "initProcess$", {
            get: function () {
                return this.init$.pipe(operators.take(1), operators.takeUntil(this._destroyed$));
            },
            enumerable: false,
            configurable: true
        });
        AdaptRadarGainsightProvider.prototype.ngOnDestroy = function () {
            this._adaptRadarURLChangeTracker.unsubscribeFromURLChange();
            this._destroyed$.next(true);
            this._destroyed$.complete();
        };
        /**
         * The method is used to start collecting the data for the current provider
         * It allows controlling the data collecting process on the customer side.
         * For instance to turn on data collecting in run time when it needed based on user preferences or project business logic
         *
         * @param providerConfig - config for provider that need to be initialized
         * @param radarConfig - main RADAR config
         */
        AdaptRadarGainsightProvider.prototype.startDataCollecting = function (providerConfig, radarConfig) {
            var _this = this;
            this._providerConfig = providerConfig;
            this._radarConfig = radarConfig;
            this.initProcess$
                .subscribe(function (isInitialized) {
                if (isInitialized) {
                    _this.toggleUserTracking(true);
                    return;
                }
                if (_this._providerConfig.initScript !== false) {
                    injectInitScript(AdaptRadarGainsightProvider.getInitScript(_this._providerConfig.id, _this._providerConfig.initScript, _this._providerConfig.sourceScript));
                }
                // Check if Gainsight script initialized
                var counter = 0;
                var interval = setInterval(function () {
                    // timeout is 5min
                    // 300 * 1000 = 300000ms = 300sec = 5min
                    if (counter < 1000) {
                        if (aptrinsic && aptrinsic['init']) {
                            clearInterval(interval);
                            _this._initSource.next(true);
                            _this.sendGlobalData(exports.AdaptRadarCustomEventName.AdaptGlobalData, _this._adaptRadarGlobal.getGlobalData());
                            _this._subscribeOnURLChange();
                        }
                        counter++;
                    }
                    else {
                        clearInterval(interval);
                        adaptError('ADAPT RADAR: Gainsight provider initialization timeout error');
                    }
                }, 300);
            });
        };
        /**
         * The method is used to stop collecting the data for the current provider
         * It allows controlling the data collecting process on the customer side.
         * For instance to turn off data collecting in run time when it needed based on user preferences or project business logic
         */
        AdaptRadarGainsightProvider.prototype.stopDataCollecting = function () {
            var _this = this;
            this.initProcess$.subscribe(function (isInitialized) {
                if (isInitialized) {
                    _this.toggleUserTracking(false);
                }
            });
        };
        /**
         * Method is used to send 'identify' event for correct work of 'Gainsight' provider
         * The "identify" call should be made during the authorization/login area of your web application
         * More information can be found here - https://support.gainsight.com/PX/API_for_Developers/01About/Track_your_Users_and_Accounts
         *
         * @param userData - list of attributes that will be logged in Gainsight analytics system.
         * `id` is required for logged-in user. By default, `id` is - `bmc-not-authorized-user`
         * @param accountData - list of attributes that will be logged in Gainsight analytics system.
         * `id` is required for logged-in user. There is no default value for account id so pay attention to correctly set it if needed
         *
         * @example
         * sendIdentifyEvent({id: "user-id"}, {id: "account-id"});
         * converted to ->
         * aptrinsic('identify', {"id": "user-id"}, {"id": "account-id"});
         */
        AdaptRadarGainsightProvider.prototype.sendIdentifyEvent = function (userData, accountData) {
            var _this = this;
            this.initProcess$.subscribe(function (isInitialized) {
                if (isInitialized) {
                    aptrinsic(exports.AdaptRadarGainsightEventName.Identify, Object.assign({ 'id': (userData === null || userData === void 0 ? void 0 : userData.id) ? userData.id : AdaptRadarGainsightProvider.notAuthorizedUserId }, userData), accountData);
                    _this._isIdentifyEventSent = true;
                }
            });
        };
        /**
         * Method is used to send custom events into Gainsight analytics system.
         *
         * @param customEventName - name of the event that will be logged into Gainsight analytics system
         * @param customEventData - custom data that need to be collect and associate with `customEventName`
         *
         * @example
         * sendCustomEvent(AdaptRadarCustomEventName.PagePath, {url: "some/url/path"})
         * converted to ->
         * aptrinsic('track', 'page_path', {"url": "some/url/path"})
         */
        AdaptRadarGainsightProvider.prototype.sendCustomEvent = function (customEventName, customEventData) {
            var _this = this;
            this.initProcess$.subscribe(function (isInitialized) {
                if (isInitialized) {
                    // Try to send identify event based on 'oneTimeActions' property from 'providerConfig'
                    // This can be useful if customer don't want to send gainsight event manually, so it will be done automatically with first customer event
                    if (!_this._isIdentifyEventSent) {
                        _this._processIdentifyAction();
                    }
                    aptrinsic(exports.AdaptRadarGainsightEventName.Track, customEventName, customEventData);
                }
            });
        };
        /**
         * Method is used to send global data(browser version, os version, localization settings, etc.)
         * Check if data was sent for current session and avoid double sending
         *
         * @param customEventName - name of the event that will be logged into Gainsight analytics system
         * @param customEventData - custom data that need to be collect and associate with `customEventName`
         */
        AdaptRadarGainsightProvider.prototype.sendGlobalData = function (customEventName, customEventData) {
            var _this = this;
            var isGlobalDataSent = sessionStorage.getItem(exports.AdaptRadarStorageKey.GainsightGlobalDataSent);
            this.initProcess$.subscribe(function (isInitialized) {
                if (isInitialized && isGlobalDataSent !== 'true') {
                    _this.sendCustomEvent(customEventName, customEventData);
                    sessionStorage.setItem(exports.AdaptRadarStorageKey.GainsightGlobalDataSent, 'true');
                }
            });
        };
        /**
         * Method is used to set "global context"
         *
         * More info can be found here - https://support.gainsight.com/PX/Engagements/02Engagement_Configuration/Use_Global_Context
         *
         * @param contextData - custom data that need to be collect and associate with "globalContext".
         * Global context data will be automatically extended with "AdaptRadarProductInfo" passed as "productInfo" property on "AdaptRadarConfig";
         *
         * @param once - flag that used to send "SetOnce" instead of "Set" for a "globalContext"
         *
         * @example
         * setGlobalContext({'projectId' : 67890})
         * converted to ->
         * aptrinsic('set', 'globalContext', {
         *   'projectId' : 67890,
         *   'productAreaName': 'Discovery',
         *   'productAreaVersion': '11.22.33',
         *   'mainProductHostingType': 'SaaS'
         * });
         *
         * setGlobalContext({'projectId' : 45673}, true)
         * converted to ->
         * aptrinsic('setOnce', 'globalContext', {
         *   'projectId' : 45673,
         *   'productAreaName': 'Discovery',
         *   'productAreaVersion': '11.22.33',
         *   'productAreaHosting': 'SaaS'
         * });
         */
        AdaptRadarGainsightProvider.prototype.setGlobalContext = function (contextData, once) {
            var _this = this;
            if (once === void 0) { once = false; }
            this.initProcess$.subscribe(function (isInitialized) {
                if (isInitialized) {
                    var eventName = once ? exports.AdaptRadarGainsightEventName.SetOnce : exports.AdaptRadarGainsightEventName.Set;
                    var productInfoFlat = flattenProductInfo(_this._radarConfig.productInfo);
                    var contextDataExtended = !lodashEs.isNull(productInfoFlat) ? Object.assign(Object.assign({}, contextData), productInfoFlat) : contextData;
                    aptrinsic(eventName, exports.AdaptRadarCustomEventName.GlobalContext, contextDataExtended);
                }
            });
        };
        /**
         * Method is used to remove "global context"
         *
         * More info can be found here - https://support.gainsight.com/PX/Engagements/02Engagement_Configuration/Use_Global_Context
         *
         * @param dataToRemove - array of string keys to remove
         *
         * @example
         * removeGlobalContext(["projectId"])
         * converted to ->
         * aptrinsic('remove', 'globalContext', ["projectId"])
         */
        AdaptRadarGainsightProvider.prototype.removeGlobalContext = function (dataToRemove) {
            this.initProcess$.subscribe(function (isInitialized) {
                if (isInitialized) {
                    aptrinsic(exports.AdaptRadarGainsightEventName.Remove, exports.AdaptRadarCustomEventName.GlobalContext, dataToRemove);
                }
            });
        };
        /**
         * Method is used to send information when URL changed
         *
         * @param customEventName - name of the event that will be logged into Gainsight analytics system
         * @param customEventData - custom data that need to be collect and associate with `customEventName`
         */
        AdaptRadarGainsightProvider.prototype.sendURLChangeEvent = function (customEventName, customEventData) {
            this.sendCustomEvent(customEventName, customEventData);
        };
        /**
         * Opt-Out User Tracking
         * Use Config API to opt-out from tracking the current user.
         * This API allows the admin to easily make the call for any users for whom they do not want cookies stored or
         * network calls made back to PX, essentially never hitting the PX Server.
         * The selected users will not view any active engagements or Knowledge Center Bot.
         *
         * Gainsight docs: https://support.gainsight.com/PX/API_for_Developers/02Usage_of_Different_APIs/Use_Config_API
         *
         * @param isEnabled - tracking state (true for Out-In, false for Opt-Out)
         */
        AdaptRadarGainsightProvider.prototype.toggleUserTracking = function (isEnabled) {
            aptrinsic(exports.AdaptRadarGainsightEventName.Config, exports.AdaptRadarGainsightConfigName.EnableTag, isEnabled);
            this._initSource.next(isEnabled);
        };
        AdaptRadarGainsightProvider.prototype._subscribeOnURLChange = function () {
            var _this = this;
            this._adaptRadarURLChangeTracker.unsubscribeFromURLChange();
            this._adaptRadarURLChangeTracker.urlChange()
                .pipe(operators.takeUntil(this._destroyed$))
                .subscribe(function (urlChangeData) {
                _this.sendURLChangeEvent(exports.AdaptRadarCustomEventName.AdaptURLChanged, {
                    PageTitle: urlChangeData.PageTitle,
                    TimeOnPageInMilliseconds: urlChangeData.TimeOnPageInMilliseconds,
                    TimeOnPageInSeconds: urlChangeData.TimeOnPageInSeconds,
                    TimeOnPage: urlChangeData.TimeOnPage
                });
            });
        };
        AdaptRadarGainsightProvider.prototype._processIdentifyAction = function () {
            var _a;
            if ((_a = this._providerConfig.oneTimeActions) === null || _a === void 0 ? void 0 : _a.length) {
                var userInfoAction = this._providerConfig.oneTimeActions.find(function (action) { return action.name === exports.AdaptRadarGainsightIdentifyActionName.UserIdentify; });
                var userData = userInfoAction === null || userInfoAction === void 0 ? void 0 : userInfoAction.data;
                if (!lodashEs.isNil(userData)) {
                    this.sendIdentifyEvent(userData.userData, userData.accountData);
                }
            }
        };
        return AdaptRadarGainsightProvider;
    }());
    AdaptRadarGainsightProvider.notAuthorizedUserId = 'bmc-not-authorized-user';
    AdaptRadarGainsightProvider.ɵfac = function AdaptRadarGainsightProvider_Factory(t) { return new (t || AdaptRadarGainsightProvider)(i0__namespace.ɵɵinject(AdaptRadarGlobal), i0__namespace.ɵɵinject(AdaptRadarURLChangeTracker)); };
    AdaptRadarGainsightProvider.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: AdaptRadarGainsightProvider, factory: AdaptRadarGainsightProvider.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptRadarGainsightProvider, [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], function () { return [{ type: AdaptRadarGlobal }, { type: AdaptRadarURLChangeTracker }]; }, null);
    })();

    var AdaptRadarService = /** @class */ (function () {
        function AdaptRadarService(_adaptRadarGGSTProvider, _adaptRadarGTMProvider, _adaptRadarGainsightProvider, _applicationRef) {
            this._adaptRadarGGSTProvider = _adaptRadarGGSTProvider;
            this._adaptRadarGTMProvider = _adaptRadarGTMProvider;
            this._adaptRadarGainsightProvider = _adaptRadarGainsightProvider;
            this._applicationRef = _applicationRef;
            this.enabledProvidersHashMap = new Map();
        }
        Object.defineProperty(AdaptRadarService.prototype, "config", {
            get: function () {
                return this._config;
            },
            set: function (conf) {
                this._config = conf;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * The method is used to start collecting the data for all enabled providers
         * It allows controlling the data collecting process on the customer side.
         * For instance to turn on data collecting in run time when it needed based on user preferences or project business logic
         *
         * In case there is a requirement to toggle data collecting for a specific provider it can be done by calling the "startDataCollecting" method for the needed provider
         */
        AdaptRadarService.prototype.startDataCollecting = function (config) {
            var _this = this;
            this.config = config;
            if (lodashEs.isNil(this.config)) {
                adaptError('ADAPT RADAR: For correct work of RADAR service please provide a config');
                return;
            }
            if (lodashEs.isNil(this.config.providers)) {
                adaptError('ADAPT RADAR: Please provide "providers" property for a correct work of RADAR Module');
                return;
            }
            this.enabledProvidersHashMap.clear();
            this.config.providers
                .filter(function (provider) { return !provider.disabled; })
                .forEach(function (provider) {
                if (!provider.id) {
                    throw new Error("ADAPT RADAR: Please provide correct \"ID\" for \"" + provider.name + "\" provider");
                }
                _this.enabledProvidersHashMap.set(provider.name, provider);
                _this.getProviderByName(provider.name).startDataCollecting(provider, _this.config);
            });
        };
        /**
         * The method is used to stop collecting the data for all enabled providers
         * It allows controlling the data collecting process on the customer side.
         * For instance to turn off data collecting in run time when it needed based on user preferences or project business logic
         */
        AdaptRadarService.prototype.stopDataCollecting = function () {
            var _this = this;
            if (lodashEs.isNil(this.config)) {
                adaptError('ADAPT RADAR: For correct work of RADAR service please provide a config');
                return;
            }
            this.config.providers
                .filter(function (provider) { return !provider.disabled; })
                .forEach(function (provider) {
                if (!provider.id) {
                    throw new Error("ADAPT RADAR: Please provide correct \"ID\" for \"" + provider.name + "\" provider");
                }
                _this.getProviderByName(provider.name).stopDataCollecting(provider);
            });
        };
        /**
         * Method is used to send a custom event for all enabled providers
         *
         * @param customEventName - name of the event that will be logged into analytics system
         * @param customEventData - custom data that need to be collect and associate with `customEventName`
         * @param disableEventSending - if set to true restrict event sending atomically(for some specific places). Can be useful when event need to be send only based on some condition(eg. disable event sending for button components on weekends)
         */
        AdaptRadarService.prototype.sendCustomEventForAllProviders = function (customEventName, customEventData, disableEventSending) {
            var _this = this;
            if (this.enabledProvidersHashMap.size > 0 && !disableEventSending) {
                this.enabledProvidersHashMap.forEach(function (provider) {
                    _this.getProviderByName(provider.name).sendCustomEvent(customEventName, customEventData);
                });
            }
        };
        /**
         * Method is used to send "Generic" event for all ADAPT components on Init.
         *
         * @param entityName {AdaptRadarCustomEventName} The name on the class of the component/directive
         */
        AdaptRadarService.prototype.sendGenericComponentEvent = function (entityName) {
            var d = new Date();
            var isoDate = d.toISOString();
            var timestamp = d.valueOf();
            this.sendCustomEventForAllProviders(exports.AdaptRadarCustomEventName.AdaptGenericComponent, {
                EventType: exports.AdaptRadarCustomEventType.Init,
                ComponentName: entityName,
                PageTitle: document.title,
                Date: d,
                ISODate: isoDate,
                Timestamp: timestamp
            });
        };
        /**
         * Method is used to get an instance of injected provider by its name
         *
         * @param name - the name of supported provider
         *
         * @return - instance of provider by its name
         */
        AdaptRadarService.prototype.getProviderByName = function (name) {
            switch (name) {
                case exports.AdaptRadarSupportedProviders.GoogleGlobalSiteTag:
                    return this._adaptRadarGGSTProvider;
                case exports.AdaptRadarSupportedProviders.GoogleTagManager:
                    return this._adaptRadarGTMProvider;
                case exports.AdaptRadarSupportedProviders.Gainsight:
                    return this._adaptRadarGainsightProvider;
                default:
                    throw new Error('ADAPT RADAR: No supported provider found');
            }
        };
        AdaptRadarService.prototype.subscribeOnElementIntersect = function (adaptRadarDisableEventSending, element, entityName) {
            var _this = this;
            if (adaptRadarDisableEventSending || !(element === null || element === void 0 ? void 0 : element.nativeElement)) {
                return null;
            }
            var elementIntersectObserver = new IntersectionObserver(function (_a) {
                var _b = __read(_a, 1), entry = _b[0];
                if (entry.isIntersecting) {
                    _this.sendGenericComponentEvent(entityName);
                    elementIntersectObserver.disconnect();
                }
            }, { root: null, threshold: 0, rootMargin: '0px 0px 0px 0px' });
            elementIntersectObserver.observe(element.nativeElement);
            return elementIntersectObserver;
        };
        return AdaptRadarService;
    }());
    AdaptRadarService.ɵfac = function AdaptRadarService_Factory(t) { return new (t || AdaptRadarService)(i0__namespace.ɵɵinject(AdaptRadarGoogleGlobalSiteTagProvider), i0__namespace.ɵɵinject(AdaptRadarGoogleTagManagerProvider), i0__namespace.ɵɵinject(AdaptRadarGainsightProvider), i0__namespace.ɵɵinject(i0__namespace.ApplicationRef)); };
    AdaptRadarService.ɵprov = /*@__PURE__*/ i0__namespace.ɵɵdefineInjectable({ token: AdaptRadarService, factory: AdaptRadarService.ɵfac, providedIn: 'root' });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptRadarService, [{
                type: i0.Injectable,
                args: [{ providedIn: 'root' }]
            }], function () { return [{ type: AdaptRadarGoogleGlobalSiteTagProvider }, { type: AdaptRadarGoogleTagManagerProvider }, { type: AdaptRadarGainsightProvider }, { type: i0__namespace.ApplicationRef }]; }, null);
    })();

    var AdaptRadarGenericDirective = /** @class */ (function () {
        function AdaptRadarGenericDirective(_adaptRadarService, _elem, _entityName) {
            this._adaptRadarService = _adaptRadarService;
            this._elem = _elem;
            this._entityName = _entityName;
            this.adaptRadarGroupName = null;
            this.adaptRadarDisableEventSending = this._checkIfDisabledFromSending();
        }
        AdaptRadarGenericDirective.prototype.ngAfterViewInit = function () {
            this._elementIntersectObserver = this._adaptRadarService.subscribeOnElementIntersect(this.adaptRadarDisableEventSending, this._elem, this._entityName);
        };
        AdaptRadarGenericDirective.prototype.ngOnDestroy = function () {
            this._unsubscribeFromIntersectionObserver();
        };
        AdaptRadarGenericDirective.prototype._unsubscribeFromIntersectionObserver = function () {
            if (this._elementIntersectObserver) {
                this._elementIntersectObserver.disconnect();
                this._elementIntersectObserver = null;
            }
        };
        AdaptRadarGenericDirective.prototype._checkIfDisabledFromSending = function () {
            var _a, _b;
            return !!((_b = (_a = this._adaptRadarService.config) === null || _a === void 0 ? void 0 : _a.disableEventSending) === null || _b === void 0 ? void 0 : _b.get(this._entityName));
        };
        return AdaptRadarGenericDirective;
    }());
    AdaptRadarGenericDirective.ɵfac = function AdaptRadarGenericDirective_Factory(t) { return new (t || AdaptRadarGenericDirective)(i0__namespace.ɵɵdirectiveInject(AdaptRadarService), i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef), i0__namespace.ɵɵdirectiveInject(exports.AdaptRadarCustomEventName)); };
    AdaptRadarGenericDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: AdaptRadarGenericDirective, inputs: { adaptRadarGroupName: "adaptRadarGroupName", adaptRadarDisableEventSending: "adaptRadarDisableEventSending" } });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptRadarGenericDirective, [{
                type: i0.Directive
            }], function () { return [{ type: AdaptRadarService }, { type: i0__namespace.ElementRef }, { type: exports.AdaptRadarCustomEventName }]; }, { adaptRadarGroupName: [{
                    type: i0.Input
                }], adaptRadarDisableEventSending: [{
                    type: i0.Input
                }] });
    })();

    /**
     * Radar Pixel directive is used to detect elements visibility on the screen.
     * Directive will emit an event if element was intersected
     *
     * Directive is based on `IntersectionObserver` API
     * More information can be found here - https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API
     */
    var AdaptRadarPixelDirective = /** @class */ (function () {
        function AdaptRadarPixelDirective(_elem) {
            this._elem = _elem;
            /**
             * The element that is used as the viewport for checking visibility of the target.
             * Must be the ancestor of the target.
             * Defaults to the browser viewport if not specified or if null.
             */
            this.adaptRadarPixelRootContainer = null;
            /**
             * Either a single number or an array of numbers which indicate at what percentage of the target's visibility the
             * observer's callback should be executed.
             * If you only want to detect when visibility passes the 50% mark, you can use a value of 0.5.
             * If you want the callback to run every time visibility passes another 25%, you would specify the array [0, 0.25, 0.5, 0.75, 1].
             * The default is 0 (meaning as soon as even one pixel is visible, the callback will be run).
             * A value of 1.0 means that the threshold isn't considered passed until every pixel is visible.
             */
            this.adaptRadarPixelThreshold = 0;
            /**
             * Margin around the root.
             * Can have values similar to the CSS margin property, e.g. "10px 20px 30px 40px" (top, right, bottom, left).
             * The values can be percentages.
             * This set of values serves to grow or shrink each side of the root element's bounding box before computing intersections.
             * Defaults to all zeros.
             */
            this.adaptRadarPixelRootContainerMargin = '0px 0px 0px 0px';
            /**
             * Output will emit `AdaptRadarPixelIntersectionObserverEntry` data each time element will be intersected.
             * Value emitting can be control by `adaptRadarPixelTriggerResolver`
             */
            this.adaptRadarPixelIntersect = new i0.EventEmitter();
        }
        Object.defineProperty(AdaptRadarPixelDirective.prototype, "radarPixelOptions", {
            get: function () {
                return {
                    root: this.adaptRadarPixelRootContainer,
                    threshold: this.adaptRadarPixelThreshold,
                    rootMargin: this.adaptRadarPixelRootContainerMargin
                };
            },
            enumerable: false,
            configurable: true
        });
        AdaptRadarPixelDirective.prototype.ngAfterViewInit = function () {
            var _this = this;
            this._observer = new IntersectionObserver(function (_a) {
                var _b = __read(_a, 1), entry = _b[0];
                if (entry.isIntersecting) {
                    var elementOffsetTop = _this._elem.nativeElement.offsetTop;
                    if (lodashEs.isFunction(_this.adaptRadarPixelTriggerResolver)) {
                        if (_this.adaptRadarPixelTriggerResolver(entry)) {
                            _this.adaptRadarPixelIntersect.emit({ entry: entry, elementOffsetTop: elementOffsetTop });
                        }
                    }
                    else {
                        _this.adaptRadarPixelIntersect.emit({ entry: entry, elementOffsetTop: elementOffsetTop });
                    }
                }
            }, this.radarPixelOptions);
            this._observer.observe(this._elem.nativeElement);
        };
        AdaptRadarPixelDirective.prototype.ngOnDestroy = function () {
            this._observer.disconnect();
            this._observer = null;
        };
        return AdaptRadarPixelDirective;
    }());
    AdaptRadarPixelDirective.ɵfac = function AdaptRadarPixelDirective_Factory(t) { return new (t || AdaptRadarPixelDirective)(i0__namespace.ɵɵdirectiveInject(i0__namespace.ElementRef)); };
    AdaptRadarPixelDirective.ɵdir = /*@__PURE__*/ i0__namespace.ɵɵdefineDirective({ type: AdaptRadarPixelDirective, selectors: [["", "adaptRadarPixel", ""]], inputs: { adaptRadarPixelRootContainer: "adaptRadarPixelRootContainer", adaptRadarPixelThreshold: "adaptRadarPixelThreshold", adaptRadarPixelRootContainerMargin: "adaptRadarPixelRootContainerMargin", adaptRadarPixelTriggerResolver: "adaptRadarPixelTriggerResolver" }, outputs: { adaptRadarPixelIntersect: "adaptRadarPixelIntersect" } });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptRadarPixelDirective, [{
                type: i0.Directive,
                args: [{
                        selector: '[adaptRadarPixel]'
                    }]
            }], function () { return [{ type: i0__namespace.ElementRef }]; }, { adaptRadarPixelRootContainer: [{
                    type: i0.Input
                }], adaptRadarPixelThreshold: [{
                    type: i0.Input
                }], adaptRadarPixelRootContainerMargin: [{
                    type: i0.Input
                }], adaptRadarPixelTriggerResolver: [{
                    type: i0.Input
                }], adaptRadarPixelIntersect: [{
                    type: i0.Output
                }] });
    })();

    var AdaptRadarModule = /** @class */ (function () {
        function AdaptRadarModule(_applicationRef, moduleConfig) {
            this._applicationRef = _applicationRef;
            if (!moduleConfig) {
                adaptWarn('ADAPT RADAR: Please provide RADAR module configuration');
                return;
            }
            if (lodashEs.isNil(moduleConfig.versions)) {
                adaptWarn('ADAPT RADAR: Please provide "versions" property for an easier ADAPT versions targeting');
            }
            this._setVersionsInfo(moduleConfig);
        }
        AdaptRadarModule.forRoot = function (moduleConfig) {
            return {
                ngModule: AdaptRadarModule,
                providers: [
                    { provide: ADAPT_RADAR_MODULE_CONFIG_TOKEN, useValue: moduleConfig },
                    AdaptRadarService
                ]
            };
        };
        /**
         * Set versions info as attributes to the root element. Can be useful for debug. The same way as angular doing with its version
         */
        AdaptRadarModule.prototype._setVersionsInfo = function (moduleConfig) {
            var _this = this;
            var bmcUxPackagesInfo = moduleConfig.versions;
            if (!i0.isDevMode() || !bmcUxPackagesInfo || Object.entries(bmcUxPackagesInfo).length === 0) {
                return;
            }
            this._applicationRef.isStable.subscribe(function (stable) {
                var _a, _b;
                if (stable) {
                    var components = _this._applicationRef.components;
                    var rootComponent_1 = components ? (_b = (_a = _this._applicationRef.components[0]) === null || _a === void 0 ? void 0 : _a.location) === null || _b === void 0 ? void 0 : _b.nativeElement : null;
                    if (rootComponent_1) {
                        var bmcUxPackagesInfoEntries = Object.entries(bmcUxPackagesInfo);
                        bmcUxPackagesInfoEntries.forEach(function (entry) {
                            rootComponent_1.setAttribute(entry[0].toLowerCase().replace(/_/g, '-'), entry[1].full);
                        });
                    }
                }
            });
        };
        return AdaptRadarModule;
    }());
    AdaptRadarModule.ɵfac = function AdaptRadarModule_Factory(t) { return new (t || AdaptRadarModule)(i0__namespace.ɵɵinject(i0__namespace.ApplicationRef), i0__namespace.ɵɵinject(ADAPT_RADAR_MODULE_CONFIG_TOKEN, 8)); };
    AdaptRadarModule.ɵmod = /*@__PURE__*/ i0__namespace.ɵɵdefineNgModule({ type: AdaptRadarModule });
    AdaptRadarModule.ɵinj = /*@__PURE__*/ i0__namespace.ɵɵdefineInjector({ imports: [[common.CommonModule]] });
    (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && i0__namespace.ɵsetClassMetadata(AdaptRadarModule, [{
                type: i0.NgModule,
                args: [{
                        imports: [common.CommonModule],
                        declarations: [AdaptRadarDirective, AdaptRadarPixelDirective],
                        exports: [AdaptRadarDirective, AdaptRadarPixelDirective]
                    }]
            }], function () {
            return [{ type: i0__namespace.ApplicationRef }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [ADAPT_RADAR_MODULE_CONFIG_TOKEN]
                        }, {
                            type: i0.Optional
                        }] }];
        }, null);
    })();
    (function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0__namespace.ɵɵsetNgModuleScope(AdaptRadarModule, { declarations: [AdaptRadarDirective, AdaptRadarPixelDirective], imports: [common.CommonModule], exports: [AdaptRadarDirective, AdaptRadarPixelDirective] }); })();

    var AdaptNumberType;
    (function (AdaptNumberType) {
        AdaptNumberType[AdaptNumberType["Integer"] = 0] = "Integer";
        AdaptNumberType[AdaptNumberType["Float"] = 1] = "Float";
        AdaptNumberType[AdaptNumberType["Scientific"] = 2] = "Scientific";
    })(AdaptNumberType || (AdaptNumberType = {}));
    /* rx-rating */
    var RxRatingSize;
    (function (RxRatingSize) {
        RxRatingSize[RxRatingSize["xs"] = 0] = "xs";
        RxRatingSize[RxRatingSize["sm"] = 1] = "sm";
        RxRatingSize[RxRatingSize["md"] = 2] = "md";
        RxRatingSize[RxRatingSize["lg"] = 3] = "lg";
    })(RxRatingSize || (RxRatingSize = {}));
    var RxRatingVotingType;
    (function (RxRatingVotingType) {
        RxRatingVotingType[RxRatingVotingType["Star"] = 0] = "Star";
        RxRatingVotingType[RxRatingVotingType["Flag"] = 1] = "Flag";
        RxRatingVotingType[RxRatingVotingType["Like"] = 2] = "Like";
        RxRatingVotingType[RxRatingVotingType["Thanks"] = 3] = "Thanks";
    })(RxRatingVotingType || (RxRatingVotingType = {}));
    /* rx-datetime */
    var RxDatetimePickerMode;
    (function (RxDatetimePickerMode) {
        RxDatetimePickerMode[RxDatetimePickerMode["DateTime"] = 0] = "DateTime";
        RxDatetimePickerMode[RxDatetimePickerMode["Date"] = 1] = "Date";
        RxDatetimePickerMode[RxDatetimePickerMode["Time"] = 2] = "Time";
        RxDatetimePickerMode[RxDatetimePickerMode["YearMonth"] = 3] = "YearMonth";
        RxDatetimePickerMode[RxDatetimePickerMode["Year"] = 4] = "Year";
        RxDatetimePickerMode[RxDatetimePickerMode["Month"] = 5] = "Month";
    })(RxDatetimePickerMode || (RxDatetimePickerMode = {}));

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */
    /**
     * @publicApi
     */
    var ADAPT_RADAR_VERSION = new i0.Version('12.23.0');

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ADAPT_RADAR_MODULE_CONFIG_TOKEN = ADAPT_RADAR_MODULE_CONFIG_TOKEN;
    exports.ADAPT_RADAR_VERSION = ADAPT_RADAR_VERSION;
    exports.AdaptRadarDirective = AdaptRadarDirective;
    exports.AdaptRadarGainsightProvider = AdaptRadarGainsightProvider;
    exports.AdaptRadarGenericDirective = AdaptRadarGenericDirective;
    exports.AdaptRadarGlobal = AdaptRadarGlobal;
    exports.AdaptRadarGoogleGlobalSiteTagProvider = AdaptRadarGoogleGlobalSiteTagProvider;
    exports.AdaptRadarGoogleTagManagerProvider = AdaptRadarGoogleTagManagerProvider;
    exports.AdaptRadarModule = AdaptRadarModule;
    exports.AdaptRadarPixelDirective = AdaptRadarPixelDirective;
    exports.AdaptRadarService = AdaptRadarService;
    exports.AdaptRadarUAParser = AdaptRadarUAParser;
    exports.AdaptRadarURLChangeTracker = AdaptRadarURLChangeTracker;
    exports.flattenProductInfo = flattenProductInfo;
    exports.injectInitScript = injectInitScript;
    exports.injectSourceScript = injectSourceScript;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=bmc-ux-adapt-radar.umd.js.map
