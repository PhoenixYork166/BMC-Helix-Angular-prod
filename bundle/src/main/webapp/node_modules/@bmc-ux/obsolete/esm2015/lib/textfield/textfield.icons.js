import { Component, ChangeDetectionStrategy, ViewEncapsulation, Input, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { trigger, animate, transition, style } from '@angular/animations';
import { ANIMATION_TIMING_FUNCTION } from '@bmc-ux/adapt-angular';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
function AdaptTextfieldIconsComponent_span_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 2);
} if (rf & 2) {
    i0.ɵɵproperty("@textfieldIconAnim", undefined);
} }
function AdaptTextfieldIconsComponent_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 3);
} if (rf & 2) {
    i0.ɵɵproperty("@textfieldIconAnim", undefined);
} }
export class AdaptTextfieldIconsComponent {
    constructor() {
        this.error = false;
        this.success = false;
        this.iconValid = false;
        this.iconInvalid = false;
    }
}
AdaptTextfieldIconsComponent.ɵfac = function AdaptTextfieldIconsComponent_Factory(t) { return new (t || AdaptTextfieldIconsComponent)(); };
AdaptTextfieldIconsComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptTextfieldIconsComponent, selectors: [["adapt-textfield-icons"]], inputs: { error: "error", success: "success", iconValid: "iconValid", iconInvalid: "iconInvalid" }, decls: 4, vars: 2, consts: [["class", "form-control-danger form-control--icons", 4, "ngIf"], ["class", "form-control-success form-control--icons", 4, "ngIf"], [1, "form-control-danger", "form-control--icons"], [1, "form-control-success", "form-control--icons"]], template: function AdaptTextfieldIconsComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtext(0, "\n    ");
        i0.ɵɵtemplate(1, AdaptTextfieldIconsComponent_span_1_Template, 1, 1, "span", 0);
        i0.ɵɵtext(2, "\n    ");
        i0.ɵɵtemplate(3, AdaptTextfieldIconsComponent_span_3_Template, 1, 1, "span", 1);
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.error && ctx.iconInvalid);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.success && ctx.iconValid);
    } }, directives: [i1.NgIf], encapsulation: 2, data: { animation: [trigger('textfieldIconAnim', [
                transition('void => *', [
                    style({ visibility: 'hidden', opacity: 0 }),
                    animate(`.5s ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ visibility: 'visible', opacity: 1 })),
                ]),
                transition('* => void', [
                    style({ visibility: 'visible', opacity: 1 }),
                    animate(`.15s ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ visibility: 'hidden', opacity: 0 }))
                ])
            ])] }, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptTextfieldIconsComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-textfield-icons',
                template: `
    <span class="form-control-danger form-control--icons" *ngIf="error && iconInvalid" [@textfieldIconAnim]></span>
    <span class="form-control-success form-control--icons" *ngIf="success && iconValid" [@textfieldIconAnim]></span>`,
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [trigger('textfieldIconAnim', [
                        transition('void => *', [
                            style({ visibility: 'hidden', opacity: 0 }),
                            animate(`.5s ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ visibility: 'visible', opacity: 1 })),
                        ]),
                        transition('* => void', [
                            style({ visibility: 'visible', opacity: 1 }),
                            animate(`.15s ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ visibility: 'hidden', opacity: 0 }))
                        ])
                    ])],
                encapsulation: ViewEncapsulation.None,
            }]
    }], null, { error: [{
            type: Input
        }], success: [{
            type: Input
        }], iconValid: [{
            type: Input
        }], iconInvalid: [{
            type: Input
        }] }); })();
export class AdaptTextFieldIconsModule {
    static forRoot() {
        return {
            ngModule: AdaptTextFieldIconsModule,
            providers: []
        };
    }
}
AdaptTextFieldIconsModule.ɵfac = function AdaptTextFieldIconsModule_Factory(t) { return new (t || AdaptTextFieldIconsModule)(); };
AdaptTextFieldIconsModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: AdaptTextFieldIconsModule });
AdaptTextFieldIconsModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [[CommonModule]] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptTextFieldIconsModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                exports: [AdaptTextfieldIconsComponent],
                declarations: [AdaptTextfieldIconsComponent],
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && i0.ɵɵsetNgModuleScope(AdaptTextFieldIconsModule, { declarations: [AdaptTextfieldIconsComponent], imports: [CommonModule], exports: [AdaptTextfieldIconsComponent] }); })();
//# sourceMappingURL=textfield.icons.js.map