// TODO update types
/* eslint-disable @typescript-eslint/no-explicit-any */
import { animate, state, style, transition, trigger, useAnimation } from '@angular/animations';
import { Directionality } from '@angular/cdk/bidi';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Injector, Input, IterableDiffers, NgZone, Optional, Output, QueryList, Renderer2, ViewChild, ViewChildren, ViewEncapsulation } from '@angular/core';
import { FormControl, NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { EventManager } from '@angular/platform-browser';
import { NavigationStart, Router } from '@angular/router';
import { differenceWith, isEqual, keyBy, pick, union, isUndefined, isFunction } from 'lodash-es';
import { asyncScheduler, ReplaySubject, Subject } from 'rxjs';
import { debounceTime, delay, distinctUntilChanged, take, takeUntil, tap, throttleTime } from 'rxjs/operators';
import { BACKSPACE, DELETE, SPACE } from '@angular/cdk/keycodes';
import { AdaptCustomActionsComponent, AdaptDeviceDetectionService, AdaptFocusMonitorDirective, AdaptFocusMonitorService, AdaptRadarAngularCustomEventName, AdaptTranslateService, adaptWarn, ANIMATION_DURATION, ANIMATION_NAME, ANIMATION_TIMING_FUNCTION, availableTargetPlacements, getEventKeyCode, hasKeyboardKeyCode, hasRequiredValidator, isDefined, LayerService, positionElements, ResizeService, SafeCdr, ScrollManageService, toBoolean } from '@bmc-ux/adapt-angular';
import { SelectModelFormat } from './select.model';
import { AdaptSelectSearchFilter } from './select.pipe';
import { AdaptRadarGenericDirective, AdaptRadarService } from '@bmc-ux/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "./select.pipe";
import * as i2 from "@bmc-ux/adapt-angular";
import * as i3 from "@angular/router";
import * as i4 from "@angular/platform-browser";
import * as i5 from "@angular/cdk/bidi";
import * as i6 from "@bmc-ux/adapt-radar";
import * as i7 from "@angular/common";
import * as i8 from "@angular/forms";
const _c0 = ["menu"];
const _c1 = ["filterInput"];
const _c2 = ["labelElement"];
const _c3 = ["toggleDropdownBtn"];
const _c4 = ["titleWidth"];
const _c5 = ["optionRef"];
const _c6 = ["loadMoreBtn"];
const _c7 = ["dropdownItem"];
function AdaptSelectComponent_span_4_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "span", 8);
    i0.ɵɵelementStart(2, "span", 9);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r8.texts.requiredText);
} }
function AdaptSelectComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    const _r10 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "span", 6, 7);
    i0.ɵɵlistener("click", function AdaptSelectComponent_span_4_Template_span_click_0_listener() { i0.ɵɵrestoreView(_r10); const ctx_r9 = i0.ɵɵnextContext(); return ctx_r9.toggleDropdown(); });
    i0.ɵɵtext(2, "\n      ");
    i0.ɵɵelementStart(3, "span");
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(5, AdaptSelectComponent_span_4_ng_container_5_Template, 5, 1, "ng-container", 3);
    i0.ɵɵtext(6, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("sr-only", ctx_r0.settings.hideLabel);
    i0.ɵɵattribute("id", ctx_r0.ariaLabelledby);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate(ctx_r0.label);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r0.required);
} }
function AdaptSelectComponent_ng_container_6_adapt_icon_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 12);
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", ctx_r11.tooltipInputIcon)("adaptTooltip", ctx_r11.tooltipInputText);
} }
function AdaptSelectComponent_ng_container_6_adapt_icon_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 13);
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", ctx_r12.popoverIcon)("placement", ctx_r12.popoverPlacement)("adaptPopover", ctx_r12.popoverContent)("triggers", ctx_r12.popoverTriggers);
} }
function AdaptSelectComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelement(1, "span", 8);
    i0.ɵɵtext(2, "\n      ");
    i0.ɵɵtemplate(3, AdaptSelectComponent_ng_container_6_adapt_icon_3_Template, 1, 3, "adapt-icon", 10);
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵtemplate(5, AdaptSelectComponent_ng_container_6_adapt_icon_5_Template, 1, 5, "adapt-icon", 11);
    i0.ɵɵtext(6, "\n    ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r1.tooltipInputIcon && !ctx_r1.popoverIcon);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r1.popoverIcon);
} }
function AdaptSelectComponent_button_9_Template(rf, ctx) { if (rf & 1) {
    const _r15 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 14, 15);
    i0.ɵɵlistener("click", function AdaptSelectComponent_button_9_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r15); const ctx_r14 = i0.ɵɵnextContext(); return ctx_r14.toggleDropdown(); })("keyup", function AdaptSelectComponent_button_9_Template_button_keyup_0_listener($event) { i0.ɵɵrestoreView(_r15); const ctx_r16 = i0.ɵɵnextContext(); return ctx_r16.uncheckAllOnDelete($event); });
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("disabled", ctx_r2.readonly)("is-active", ctx_r2.isVisible)("dropdown-toggle-up", ctx_r2.placement === "top");
    i0.ɵɵproperty("ngClass", ctx_r2.settings.buttonClasses)("disabled", ctx_r2.disabled);
    i0.ɵɵattribute("aria-expanded", ctx_r2.isVisible)("aria-labelledby", ctx_r2.ariaLabelledby + " " + ctx_r2.id + "_button")("aria-describedby", ctx_r2.ariaDescribedBy)("aria-disabled", ctx_r2.disabled)("id", ctx_r2.id + "_button")("aria-readonly", ctx_r2.readonly)("aria-invalid", ctx_r2.isError)("aria-required", ctx_r2.required)("aria-multiselectable", !ctx_r2.single)("aria-activedescendant", ctx_r2.getActiveDescendant())("aria-owns", ctx_r2.isVisible ? ctx_r2.popupId : null);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1("\n    ", ctx_r2.title, "\n  ");
} }
function AdaptSelectComponent_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    const _r20 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "button", 16, 15);
    i0.ɵɵlistener("click", function AdaptSelectComponent_ng_container_11_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r20); const ctx_r19 = i0.ɵɵnextContext(); return ctx_r19.toggleDropdown(); })("keyup", function AdaptSelectComponent_ng_container_11_Template_button_keyup_2_listener($event) { i0.ɵɵrestoreView(_r20); const ctx_r21 = i0.ɵɵnextContext(); return ctx_r21.uncheckAllOnDelete($event); });
    i0.ɵɵtext(4);
    i0.ɵɵelementStart(5, "span", 17, 18);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n  ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("is-active", ctx_r3.isVisible);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("adaptTooltip", ctx_r3.tooltipText)("placement", "auto")("ngClass", ctx_r3.settings.buttonClasses)("disabled", ctx_r3.disabled);
    i0.ɵɵattribute("aria-expanded", ctx_r3.isVisible)("aria-disabled", ctx_r3.disabled)("aria-readonly", ctx_r3.readonly)("aria-invalid", ctx_r3.isError)("aria-required", ctx_r3.required)("aria-multiselectable", !ctx_r3.single)("aria-activedescendant", ctx_r3.getActiveDescendant())("aria-owns", ctx_r3.isVisible ? ctx_r3.popupId : null)("aria-labelledby", ctx_r3.ariaLabelledby + " " + ctx_r3.id + "_button")("aria-describedby", ctx_r3.ariaDescribedBy)("id", ctx_r3.id + "_button");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1("", ctx_r3.title, "\n      ");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r3.title);
} }
function AdaptSelectComponent_ng_container_13_div_2_div_5_button_5_Template(rf, ctx) { if (rf & 1) {
    const _r34 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 36);
    i0.ɵɵlistener("click", function AdaptSelectComponent_ng_container_13_div_2_div_5_button_5_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r34); const ctx_r33 = i0.ɵɵnextContext(4); return ctx_r33.clearSearchFilter($event); });
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵproperty("@searchAnim", undefined);
} }
function AdaptSelectComponent_ng_container_13_div_2_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 32);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelement(2, "input", 33, 34);
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵtemplate(5, AdaptSelectComponent_ng_container_13_div_2_div_5_button_5_Template, 2, 1, "button", 35);
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r24 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(2);
    i0.ɵɵpropertyInterpolate("placeholder", ctx_r24.texts.searchPlaceholder);
    i0.ɵɵproperty("formControl", ctx_r24.searchFilterText);
    i0.ɵɵattribute("aria-controls", ctx_r24.popupId);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r24.searchFilterText.value.length > 0);
} }
function AdaptSelectComponent_ng_container_13_div_2_div_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 37);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r25 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n            ", ctx_r25.getHeaderText(), "\n          ");
} }
function AdaptSelectComponent_ng_container_13_div_2_div_11_adapt_custom_actions_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-custom-actions", 41);
} if (rf & 2) {
    const ctx_r35 = i0.ɵɵnextContext(4);
    i0.ɵɵproperty("actions", ctx_r35.customActions);
} }
function AdaptSelectComponent_ng_container_13_div_2_div_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 38);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementStart(2, "span", 39);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n\n            ");
    i0.ɵɵtemplate(5, AdaptSelectComponent_ng_container_13_div_2_div_11_adapt_custom_actions_5_Template, 1, 1, "adapt-custom-actions", 40);
    i0.ɵɵtext(6, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r26 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("@actionsAnim", ctx_r26.settings.showCheckAll || ctx_r26.settings.showUncheckAll || ctx_r26.searchFilterText.value ? "show" : "hide");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("@openClose", ctx_r26.rtl ? ctx_r26.searchFilterText.value ? "showRTL" : "hideRTL" : ctx_r26.searchFilterText.value ? "show" : "hide");
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate2("\n                ", ctx_r26.texts.filteredTo, " ", ctx_r26.getFilteredItems().length, "\n            ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r26.settings.showCheckAll || ctx_r26.settings.showUncheckAll);
} }
const _c8 = function (a0) { return { "ellipsis": a0 }; };
function AdaptSelectComponent_ng_container_13_div_2_ng_container_15_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r41 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 44, 45);
    i0.ɵɵlistener("click", function AdaptSelectComponent_ng_container_13_div_2_ng_container_15_button_2_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r41); const ctx_r40 = i0.ɵɵnextContext(4); return ctx_r40.setSelected($event, ctx_r40.nullOption); });
    i0.ɵɵtext(2, "\n            ");
    i0.ɵɵelementStart(3, "span", null, 46);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n              ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r36 = i0.ɵɵnextContext(4);
    i0.ɵɵclassProp("active", ctx_r36.isSelected(ctx_r36.nullOption));
    i0.ɵɵproperty("adaptFocusMonitor", ctx_r36.nullOption.id)("ngClass", i0.ɵɵpureFunction1(12, _c8, ctx_r36.settings.truncateText));
    i0.ɵɵattribute("id", ctx_r36.id + "-" + ctx_r36.nullOption.id + "_item");
    i0.ɵɵadvance(3);
    i0.ɵɵstyleProp("white-space", ctx_r36.whiteSpaceOption)("word-break", ctx_r36.wordBreakOption)("font-style", "italic");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r36.nullOption.name);
} }
function AdaptSelectComponent_ng_container_13_div_2_ng_container_15_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r47 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 47, 45);
    i0.ɵɵlistener("click", function AdaptSelectComponent_ng_container_13_div_2_ng_container_15_button_4_Template_button_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r47); const option_r42 = restoredCtx.$implicit; const ctx_r46 = i0.ɵɵnextContext(4); return ctx_r46.setSelected($event, option_r42); });
    i0.ɵɵtext(2, "\n            ");
    i0.ɵɵelementStart(3, "span", null, 46);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n              ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r42 = ctx.$implicit;
    const index_r43 = ctx.index;
    const ctx_r37 = i0.ɵɵnextContext(4);
    i0.ɵɵclassProp("active", ctx_r37.isSelected(option_r42));
    i0.ɵɵproperty("adaptFocusMonitor", option_r42.id)("disabled", option_r42.disabled)("ngClass", i0.ɵɵpureFunction1(11, _c8, ctx_r37.settings.truncateText));
    i0.ɵɵattribute("id", ctx_r37.id + "-" + index_r43 + "_item");
    i0.ɵɵadvance(3);
    i0.ɵɵstyleProp("white-space", ctx_r37.whiteSpaceOption)("word-break", ctx_r37.wordBreakOption);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(option_r42.name);
} }
function AdaptSelectComponent_ng_container_13_div_2_ng_container_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵtemplate(2, AdaptSelectComponent_ng_container_13_div_2_ng_container_15_button_2_Template, 7, 14, "button", 42);
    i0.ɵɵtext(3, "\n              ");
    i0.ɵɵtemplate(4, AdaptSelectComponent_ng_container_13_div_2_ng_container_15_button_4_Template, 7, 13, "button", 43);
    i0.ɵɵpipe(5, "slice");
    i0.ɵɵtext(6, "\n            ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r27 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r27.settings.emptyOption && !ctx_r27.searchFilterText.value.length);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind3(5, 3, ctx_r27.displayedOptions, 0, ctx_r27.displayedOptionsCount))("ngForTrackBy", ctx_r27.optionsTrackByFn);
} }
function AdaptSelectComponent_ng_container_13_div_2_ng_container_17_li_4_adapt_icon_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "adapt-icon", 57);
    i0.ɵɵtext(1, "\n                    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r49 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", option_r49.icon)("classList", "text-" + option_r49.iconType);
} }
function AdaptSelectComponent_ng_container_13_div_2_ng_container_17_li_4_span_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 58);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r49 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("ngClass", "badge-" + option_r49.badgeType);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                      ", option_r49.badgeText, "\n                    ");
} }
function AdaptSelectComponent_ng_container_13_div_2_ng_container_17_li_4_Template(rf, ctx) { if (rf & 1) {
    const _r58 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 50, 45);
    i0.ɵɵlistener("keydown.space", function AdaptSelectComponent_ng_container_13_div_2_ng_container_17_li_4_Template_li_keydown_space_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r58); const option_r49 = restoredCtx.$implicit; const ctx_r57 = i0.ɵɵnextContext(4); return ctx_r57.setSelected($event, option_r49); })("keyup.enter", function AdaptSelectComponent_ng_container_13_div_2_ng_container_17_li_4_Template_li_keyup_enter_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r58); const option_r49 = restoredCtx.$implicit; const ctx_r59 = i0.ɵɵnextContext(4); return ctx_r59.setSelected($event, option_r49); });
    i0.ɵɵtext(2, "\n                  ");
    i0.ɵɵelementStart(3, "div", 51);
    i0.ɵɵtext(4, "\n                    ");
    i0.ɵɵelementStart(5, "label", 52);
    i0.ɵɵtext(6, "\n                      ");
    i0.ɵɵelementStart(7, "input", 53);
    i0.ɵɵlistener("click", function AdaptSelectComponent_ng_container_13_div_2_ng_container_17_li_4_Template_input_click_7_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r58); const option_r49 = restoredCtx.$implicit; const ctx_r60 = i0.ɵɵnextContext(4); return ctx_r60.setSelected($event, option_r49); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n                      ");
    i0.ɵɵelementStart(9, "span", 54, 46);
    i0.ɵɵtext(11, "\n                    ");
    i0.ɵɵtemplate(12, AdaptSelectComponent_ng_container_13_div_2_ng_container_17_li_4_adapt_icon_12_Template, 2, 3, "adapt-icon", 55);
    i0.ɵɵtext(13);
    i0.ɵɵtemplate(14, AdaptSelectComponent_ng_container_13_div_2_ng_container_17_li_4_span_14_Template, 2, 2, "span", 56);
    i0.ɵɵtext(15, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(16, "\n                    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(17, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, "\n                ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r49 = ctx.$implicit;
    const index_r50 = ctx.index;
    const ctx_r48 = i0.ɵɵnextContext(4);
    i0.ɵɵproperty("adaptFocusMonitor", option_r49.id);
    i0.ɵɵattribute("id", ctx_r48.id + "-" + index_r50 + "_item")("aria-selected", ctx_r48.isSelected(option_r49));
    i0.ɵɵadvance(7);
    i0.ɵɵproperty("disabled", option_r49.disabled)("checked", ctx_r48.isSelected(option_r49));
    i0.ɵɵadvance(2);
    i0.ɵɵstyleProp("white-space", ctx_r48.whiteSpaceOption)("text-overflow", ctx_r48.textEllipsisOption)("word-break", ctx_r48.wordBreakOption);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r48.allowIconsBadges && option_r49.icon);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                        ", option_r49.name, "\n                        ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r48.allowIconsBadges && option_r49.badgeText);
} }
function AdaptSelectComponent_ng_container_13_div_2_ng_container_17_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵelementStart(2, "ul", 48);
    i0.ɵɵtext(3, "\n                ");
    i0.ɵɵtemplate(4, AdaptSelectComponent_ng_container_13_div_2_ng_container_17_li_4_Template, 19, 14, "li", 49);
    i0.ɵɵpipe(5, "slice");
    i0.ɵɵtext(6, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n\n            ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r28 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind3(5, 2, ctx_r28.displayedOptions, 0, ctx_r28.displayedOptionsCount))("ngForTrackBy", ctx_r28.optionsTrackByFn);
} }
function AdaptSelectComponent_ng_container_13_div_2_div_21_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 59);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r29 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n          ", ctx_r29.texts.notFound, "\n        ");
} }
function AdaptSelectComponent_ng_container_13_div_2_ng_container_35_Template(rf, ctx) { if (rf & 1) {
    const _r63 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "button", 60, 61);
    i0.ɵɵlistener("click", function AdaptSelectComponent_ng_container_13_div_2_ng_container_35_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r63); const ctx_r62 = i0.ɵɵnextContext(3); return ctx_r62.loadMoreItems(); });
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r30 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptInlineLoader", ctx_r30.loadingDataInProgress)("activeText", ctx_r30.texts.loadingText);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1("\n          ", ctx_r30.texts.loadMore, "\n        ");
} }
const _c9 = function (a0, a1) { return { "activeLoad": a0, "dropdown_select__menu-sticky": a1 }; };
function AdaptSelectComponent_ng_container_13_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r65 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 20, 21);
    i0.ɵɵlistener("@selectAnim.done", function AdaptSelectComponent_ng_container_13_div_2_Template_div_animation_selectAnim_done_0_listener($event) { i0.ɵɵrestoreView(_r65); const ctx_r64 = i0.ɵɵnextContext(2); return ctx_r64.onAnimationDone($event); });
    i0.ɵɵtext(2, "\n      ");
    i0.ɵɵelementStart(3, "div", 22);
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵtemplate(5, AdaptSelectComponent_ng_container_13_div_2_div_5_Template, 7, 4, "div", 23);
    i0.ɵɵtext(6, "\n\n        ");
    i0.ɵɵelementStart(7, "div", 24);
    i0.ɵɵtext(8, "\n          ");
    i0.ɵɵtemplate(9, AdaptSelectComponent_ng_container_13_div_2_div_9_Template, 2, 1, "div", 25);
    i0.ɵɵtext(10, "\n\n          ");
    i0.ɵɵtemplate(11, AdaptSelectComponent_ng_container_13_div_2_div_11_Template, 7, 5, "div", 26);
    i0.ɵɵtext(12, "\n\n          ");
    i0.ɵɵelementStart(13, "div", 27);
    i0.ɵɵtext(14, "\n            ");
    i0.ɵɵtemplate(15, AdaptSelectComponent_ng_container_13_div_2_ng_container_15_Template, 7, 7, "ng-container", 3);
    i0.ɵɵtext(16, "\n\n            ");
    i0.ɵɵtemplate(17, AdaptSelectComponent_ng_container_13_div_2_ng_container_17_Template, 8, 6, "ng-container", 3);
    i0.ɵɵtext(18, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(19, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(20, "\n        ");
    i0.ɵɵtemplate(21, AdaptSelectComponent_ng_container_13_div_2_div_21_Template, 2, 1, "div", 28);
    i0.ɵɵtext(22, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(23, "\n\n      ");
    i0.ɵɵelementStart(24, "div", 29);
    i0.ɵɵtext(25, "\n        ");
    i0.ɵɵelementStart(26, "div", 30);
    i0.ɵɵtext(27, "\n          ");
    i0.ɵɵelement(28, "div", 31);
    i0.ɵɵtext(29, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(30, "\n        ");
    i0.ɵɵelementStart(31, "span");
    i0.ɵɵtext(32);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(33, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(34, "\n\n      ");
    i0.ɵɵtemplate(35, AdaptSelectComponent_ng_container_13_div_2_ng_container_35_Template, 6, 3, "ng-container", 3);
    i0.ɵɵtext(36, "\n\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r22 = i0.ɵɵnextContext(2);
    i0.ɵɵstyleProp("max-height", ctx_r22.settings.maxHeight)("z-index", ctx_r22.settings.zIndex);
    i0.ɵɵclassProp("pull-right", ctx_r22.settings.pullRight)("select-hidden", !ctx_r22.isAnimationReady)("bottom-gap", !ctx_r22.isMobile)("dropdown-menu-right", ctx_r22.settings.pullRight)("dropdown-menu-mobile-placement", ctx_r22.isMobilePlacement)("sticky", ctx_r22.isMobilePlacement && ctx_r22.settings.stickyHeader)("is-top", ctx_r22.placement === "top");
    i0.ɵɵproperty("@selectAnim", ctx_r22.animationState)("ngClass", i0.ɵɵpureFunction2(31, _c9, ctx_r22.loadingState, ctx_r22.settings.stickyHeader));
    i0.ɵɵattribute("id", ctx_r22.popupId)("aria-describedby", ctx_r22.ariaDescribedBy)("aria-multiselectable", false);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", ctx_r22.settings.enableSearch);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r22.showHeader());
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r22.displayedOptions && ctx_r22.displayedOptions.length !== 0);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r22.displayedOptions && ctx_r22.settings.checkedStyle !== "checkbox");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r22.displayedOptions && ctx_r22.settings.checkedStyle === "checkbox");
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r22.displayedOptions && ctx_r22.displayedOptions.length === 0);
    i0.ɵɵadvance(11);
    i0.ɵɵtextInterpolate(ctx_r22.texts.loadingText);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r22.settings.pageSize && ctx_r22.showMoreButton);
} }
function AdaptSelectComponent_ng_container_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵtemplate(2, AdaptSelectComponent_ng_container_13_div_2_Template, 37, 34, "div", 19);
    i0.ɵɵtext(3, "\n  ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r4.isVisible);
} }
function AdaptSelectComponent_ng_container_16_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "div", 64);
} if (rf & 2) {
    i0.ɵɵproperty("@selectOverlayAnim", undefined);
} }
function AdaptSelectComponent_ng_container_16_div_4_div_3_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r77 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 71);
    i0.ɵɵlistener("click", function AdaptSelectComponent_ng_container_16_div_4_div_3_button_2_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r77); const ctx_r76 = i0.ɵɵnextContext(4); return ctx_r76.cancel(); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r73 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r73.texts.cancelBtnText);
} }
function AdaptSelectComponent_ng_container_16_div_4_div_3_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 72);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r74 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r74.texts.titleMobileText);
} }
function AdaptSelectComponent_ng_container_16_div_4_div_3_button_6_Template(rf, ctx) { if (rf & 1) {
    const _r79 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 73);
    i0.ɵɵlistener("click", function AdaptSelectComponent_ng_container_16_div_4_div_3_button_6_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r79); const ctx_r78 = i0.ɵɵnextContext(4); return ctx_r78.toggleDropdown(); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r75 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r75.texts.doneBtnText);
} }
const _c10 = function (a0) { return { "m-select__header_sticky": a0 }; };
function AdaptSelectComponent_ng_container_16_div_4_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 67);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptSelectComponent_ng_container_16_div_4_div_3_button_2_Template, 2, 1, "button", 68);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵtemplate(4, AdaptSelectComponent_ng_container_16_div_4_div_3_div_4_Template, 2, 1, "div", 69);
    i0.ɵɵtext(5, "\n        ");
    i0.ɵɵtemplate(6, AdaptSelectComponent_ng_container_16_div_4_div_3_button_6_Template, 2, 1, "button", 70);
    i0.ɵɵtext(7, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r69 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(4, _c10, ctx_r69.settings.stickyHeader));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r69.settings.cancelBtn);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r69.settings.titleMobile);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r69.settings.doneBtn && !ctx_r69.single);
} }
function AdaptSelectComponent_ng_container_16_div_4_ng_container_5_div_2_a_4_Template(rf, ctx) { if (rf & 1) {
    const _r88 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 80);
    i0.ɵɵlistener("click", function AdaptSelectComponent_ng_container_16_div_4_ng_container_5_div_2_a_4_Template_a_click_0_listener($event) { i0.ɵɵrestoreView(_r88); const ctx_r87 = i0.ɵɵnextContext(5); return ctx_r87.clearSearchFilter($event); });
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵproperty("@searchAnim", undefined);
} }
const _c11 = function (a0) { return { "m-select__controls_sticky": a0 }; };
function AdaptSelectComponent_ng_container_16_div_4_ng_container_5_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 77);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelement(2, "input", 78);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵtemplate(4, AdaptSelectComponent_ng_container_16_div_4_ng_container_5_div_2_a_4_Template, 2, 1, "a", 79);
    i0.ɵɵtext(5, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r80 = i0.ɵɵnextContext(4);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(5, _c11, ctx_r80.settings.stickyHeader));
    i0.ɵɵadvance(2);
    i0.ɵɵpropertyInterpolate("placeholder", ctx_r80.texts.searchPlaceholder);
    i0.ɵɵproperty("adaptFocusMonitor", -1)("formControl", ctx_r80.searchFilterText);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r80.searchFilterText.value.length > 0);
} }
function AdaptSelectComponent_ng_container_16_div_4_ng_container_5_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 37);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r81 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n          ", ctx_r81.getHeaderText(), "\n        ");
} }
function AdaptSelectComponent_ng_container_16_div_4_ng_container_5_div_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 81);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "span", 39);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n\n          ");
    i0.ɵɵelement(5, "adapt-custom-actions", 41);
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r82 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("@openClose", ctx_r82.rtl ? ctx_r82.searchFilterText.value ? "showRTL" : "hideRTL" : ctx_r82.searchFilterText.value ? "show" : "hide");
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate2("\n              ", ctx_r82.texts.filteredTo, " ", ctx_r82.getFilteredItems().length, "\n          ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("actions", ctx_r82.customActions);
} }
function AdaptSelectComponent_ng_container_16_div_4_ng_container_5_ng_container_8_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r94 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 84, 45);
    i0.ɵɵlistener("click", function AdaptSelectComponent_ng_container_16_div_4_ng_container_5_ng_container_8_button_2_Template_button_click_0_listener($event) { i0.ɵɵrestoreView(_r94); const ctx_r93 = i0.ɵɵnextContext(5); return ctx_r93.setSelected($event, ctx_r93.nullOption); });
    i0.ɵɵtext(2, "\n            ");
    i0.ɵɵelementStart(3, "span", null, 46);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r89 = i0.ɵɵnextContext(5);
    i0.ɵɵclassProp("active", ctx_r89.isSelected(ctx_r89.nullOption));
    i0.ɵɵattribute("id", ctx_r89.id + "-" + ctx_r89.nullOption.id + "_item");
    i0.ɵɵadvance(3);
    i0.ɵɵstyleProp("white-space", ctx_r89.whiteSpaceOption)("word-break", ctx_r89.wordBreakOption)("font-style", "italic");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(ctx_r89.nullOption.name);
} }
function AdaptSelectComponent_ng_container_16_div_4_ng_container_5_ng_container_8_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r100 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 85, 45);
    i0.ɵɵlistener("click", function AdaptSelectComponent_ng_container_16_div_4_ng_container_5_ng_container_8_button_4_Template_button_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r100); const option_r95 = restoredCtx.$implicit; const ctx_r99 = i0.ɵɵnextContext(5); return ctx_r99.setSelected($event, option_r95); });
    i0.ɵɵtext(2, "\n            ");
    i0.ɵɵelementStart(3, "span", null, 46);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r95 = ctx.$implicit;
    const index_r96 = ctx.index;
    const ctx_r90 = i0.ɵɵnextContext(5);
    i0.ɵɵclassProp("active", ctx_r90.isSelected(option_r95));
    i0.ɵɵproperty("disabled", option_r95.disabled);
    i0.ɵɵattribute("id", ctx_r90.id + "-" + index_r96 + "_item");
    i0.ɵɵadvance(3);
    i0.ɵɵstyleProp("white-space", ctx_r90.whiteSpaceOption)("word-break", ctx_r90.wordBreakOption);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(option_r95.name);
} }
function AdaptSelectComponent_ng_container_16_div_4_ng_container_5_ng_container_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵtemplate(2, AdaptSelectComponent_ng_container_16_div_4_ng_container_5_ng_container_8_button_2_Template, 7, 10, "button", 82);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵtemplate(4, AdaptSelectComponent_ng_container_16_div_4_ng_container_5_ng_container_8_button_4_Template, 7, 9, "button", 83);
    i0.ɵɵpipe(5, "slice");
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r83 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r83.settings.emptyOption && !ctx_r83.searchFilterText.value.length);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind3(5, 3, ctx_r83.displayedOptions, 0, ctx_r83.displayedOptionsCount))("ngForTrackBy", ctx_r83.optionsTrackByFn);
} }
function AdaptSelectComponent_ng_container_16_div_4_ng_container_5_ng_container_10_li_4_adapt_icon_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "adapt-icon", 57);
    i0.ɵɵtext(1, "\n                    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r102 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", option_r102.icon)("classList", "text-" + option_r102.iconType);
} }
function AdaptSelectComponent_ng_container_16_div_4_ng_container_5_ng_container_10_li_4_span_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 58);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r102 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("ngClass", "badge-" + option_r102.badgeType);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                      ", option_r102.badgeText, "\n                    ");
} }
function AdaptSelectComponent_ng_container_16_div_4_ng_container_5_ng_container_10_li_4_Template(rf, ctx) { if (rf & 1) {
    const _r111 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 88, 45);
    i0.ɵɵlistener("keydown.space", function AdaptSelectComponent_ng_container_16_div_4_ng_container_5_ng_container_10_li_4_Template_li_keydown_space_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r111); const option_r102 = restoredCtx.$implicit; const ctx_r110 = i0.ɵɵnextContext(5); return ctx_r110.setSelected($event, option_r102); })("keyup.enter", function AdaptSelectComponent_ng_container_16_div_4_ng_container_5_ng_container_10_li_4_Template_li_keyup_enter_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r111); const option_r102 = restoredCtx.$implicit; const ctx_r112 = i0.ɵɵnextContext(5); return ctx_r112.setSelected($event, option_r102); });
    i0.ɵɵtext(2, "\n              ");
    i0.ɵɵelementStart(3, "div", 51);
    i0.ɵɵtext(4, "\n                ");
    i0.ɵɵelementStart(5, "label", 52);
    i0.ɵɵtext(6, "\n                  ");
    i0.ɵɵelementStart(7, "input", 53);
    i0.ɵɵlistener("click", function AdaptSelectComponent_ng_container_16_div_4_ng_container_5_ng_container_10_li_4_Template_input_click_7_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r111); const option_r102 = restoredCtx.$implicit; const ctx_r113 = i0.ɵɵnextContext(5); return ctx_r113.setSelected($event, option_r102); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n                  ");
    i0.ɵɵelementStart(9, "span", 54, 46);
    i0.ɵɵtext(11, "\n                    ");
    i0.ɵɵtemplate(12, AdaptSelectComponent_ng_container_16_div_4_ng_container_5_ng_container_10_li_4_adapt_icon_12_Template, 2, 3, "adapt-icon", 55);
    i0.ɵɵtext(13);
    i0.ɵɵtemplate(14, AdaptSelectComponent_ng_container_16_div_4_ng_container_5_ng_container_10_li_4_span_14_Template, 2, 2, "span", 56);
    i0.ɵɵtext(15, "\n                    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(16, "\n                ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(17, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, "\n            ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r102 = ctx.$implicit;
    const index_r103 = ctx.index;
    const ctx_r101 = i0.ɵɵnextContext(5);
    i0.ɵɵproperty("adaptFocusMonitor", option_r102.id);
    i0.ɵɵattribute("id", ctx_r101.id + "-" + index_r103 + "_item")("aria-selected", ctx_r101.isSelected(option_r102));
    i0.ɵɵadvance(7);
    i0.ɵɵproperty("disabled", option_r102.disabled)("checked", ctx_r101.isSelected(option_r102));
    i0.ɵɵadvance(2);
    i0.ɵɵstyleProp("white-space", ctx_r101.whiteSpaceOption)("word-break", ctx_r101.wordBreakOption);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r101.allowIconsBadges && option_r102.icon);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                    ", option_r102.name, "\n                    ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r101.allowIconsBadges && option_r102.badgeText);
} }
const _c12 = function (a0) { return { "list-unstyled__load-more_mobile": a0 }; };
function AdaptSelectComponent_ng_container_16_div_4_ng_container_5_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n\n          ");
    i0.ɵɵelementStart(2, "ul", 86);
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵtemplate(4, AdaptSelectComponent_ng_container_16_div_4_ng_container_5_ng_container_10_li_4_Template, 19, 12, "li", 87);
    i0.ɵɵpipe(5, "slice");
    i0.ɵɵtext(6, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n\n        ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r84 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(7, _c12, ctx_r84.settings.pageSize && ctx_r84.showMoreButton));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind3(5, 3, ctx_r84.displayedOptions, 0, ctx_r84.displayedOptionsCount))("ngForTrackBy", ctx_r84.optionsTrackByFn);
} }
function AdaptSelectComponent_ng_container_16_div_4_ng_container_5_div_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 89);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r85 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n          ", ctx_r85.texts.notFound, "\n        ");
} }
function AdaptSelectComponent_ng_container_16_div_4_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptSelectComponent_ng_container_16_div_4_ng_container_5_div_2_Template, 6, 7, "div", 74);
    i0.ɵɵtext(3, "\n\n        ");
    i0.ɵɵtemplate(4, AdaptSelectComponent_ng_container_16_div_4_ng_container_5_div_4_Template, 2, 1, "div", 25);
    i0.ɵɵtext(5, "\n\n        ");
    i0.ɵɵtemplate(6, AdaptSelectComponent_ng_container_16_div_4_ng_container_5_div_6_Template, 7, 4, "div", 75);
    i0.ɵɵtext(7, "\n\n        ");
    i0.ɵɵtemplate(8, AdaptSelectComponent_ng_container_16_div_4_ng_container_5_ng_container_8_Template, 7, 7, "ng-container", 3);
    i0.ɵɵtext(9, "\n\n        ");
    i0.ɵɵtemplate(10, AdaptSelectComponent_ng_container_16_div_4_ng_container_5_ng_container_10_Template, 8, 9, "ng-container", 3);
    i0.ɵɵtext(11, "\n        ");
    i0.ɵɵtemplate(12, AdaptSelectComponent_ng_container_16_div_4_ng_container_5_div_12_Template, 2, 1, "div", 76);
    i0.ɵɵtext(13, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r70 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r70.settings.enableSearch);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r70.showHeader);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r70.displayedOptions && ctx_r70.displayedOptions.length !== 0 && (ctx_r70.settings.showCheckAll || ctx_r70.settings.showUncheckAll));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r70.displayedOptions && ctx_r70.settings.checkedStyle !== "checkbox");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r70.displayedOptions && ctx_r70.settings.checkedStyle === "checkbox");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r70.displayedOptions && ctx_r70.displayedOptions.length === 0);
} }
function AdaptSelectComponent_ng_container_16_div_4_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "div", 29);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementStart(4, "div", 30);
    i0.ɵɵtext(5, "\n            ");
    i0.ɵɵelement(6, "div", 31);
    i0.ɵɵtext(7, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n          ");
    i0.ɵɵelementStart(9, "span");
    i0.ɵɵtext(10);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r71 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(10);
    i0.ɵɵtextInterpolate(ctx_r71.texts.loadingText);
} }
function AdaptSelectComponent_ng_container_16_div_4_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    const _r115 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "button", 90);
    i0.ɵɵlistener("click", function AdaptSelectComponent_ng_container_16_div_4_ng_container_9_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r115); const ctx_r114 = i0.ɵɵnextContext(3); return ctx_r114.loadMoreItems(); });
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r72 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptInlineLoader", ctx_r72.loadingDataInProgress)("activeText", ctx_r72.texts.loadingText);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n          ", ctx_r72.texts.loadMore, "\n        ");
} }
function AdaptSelectComponent_ng_container_16_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 65, 21);
    i0.ɵɵtext(2, "\n\n      ");
    i0.ɵɵtemplate(3, AdaptSelectComponent_ng_container_16_div_4_div_3_Template, 8, 6, "div", 66);
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵtemplate(5, AdaptSelectComponent_ng_container_16_div_4_ng_container_5_Template, 14, 6, "ng-container", 3);
    i0.ɵɵtext(6, "\n      ");
    i0.ɵɵtemplate(7, AdaptSelectComponent_ng_container_16_div_4_ng_container_7_Template, 13, 1, "ng-container", 3);
    i0.ɵɵtext(8, "\n\n      ");
    i0.ɵɵtemplate(9, AdaptSelectComponent_ng_container_16_div_4_ng_container_9_Template, 5, 3, "ng-container", 3);
    i0.ɵɵtext(10, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r67 = i0.ɵɵnextContext(2);
    i0.ɵɵstyleProp("max-height", ctx_r67.settings.maxHeight)("z-index", ctx_r67.settings.zIndex);
    i0.ɵɵclassProp("pull-right", ctx_r67.settings.pullRight)("dropdown-menu-right", ctx_r67.settings.pullRight);
    i0.ɵɵproperty("@selectMenuAnim", undefined);
    i0.ɵɵattribute("id", ctx_r67.popupId)("aria-describedby", ctx_r67.ariaDescribedBy)("aria-multiselectable", !ctx_r67.single);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r67.isMobile);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r67.loadingState);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r67.loadingState);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r67.settings.pageSize && ctx_r67.showMoreButton);
} }
function AdaptSelectComponent_ng_container_16_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵtemplate(2, AdaptSelectComponent_ng_container_16_div_2_Template, 1, 1, "div", 62);
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵtemplate(4, AdaptSelectComponent_ng_container_16_div_4_Template, 11, 16, "div", 63);
    i0.ɵɵtext(5, "\n  ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r5.isVisible);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r5.isVisible);
} }
function AdaptSelectComponent_div_18_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 91);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "p", 92);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵproperty("@validationFeedbackAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("@validationFeedbackChangeAnimation", ctx_r6.isError);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r6.displayMessage);
} }
const MULTISELECT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => AdaptSelectComponent),
    multi: true
};
let nextId = 0;
let nextTestId = 0;
// eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle
export class AdaptSelectComponent extends AdaptRadarGenericDirective {
    constructor(filterSearch, _renderer, detection, element, _focusHandle, _scrollService, _changeDetectorRef, _ngZone, _layerService, _router, _differs, _eventManager, _dir, _resizeService, _injector, ts, _adaptRadarService, _entityName) {
        super(_adaptRadarService, element, _entityName ? _entityName : AdaptRadarAngularCustomEventName.AdaptSelect);
        this.filterSearch = filterSearch;
        this._renderer = _renderer;
        this.detection = detection;
        this.element = element;
        this._focusHandle = _focusHandle;
        this._scrollService = _scrollService;
        this._changeDetectorRef = _changeDetectorRef;
        this._ngZone = _ngZone;
        this._layerService = _layerService;
        this._router = _router;
        this._differs = _differs;
        this._eventManager = _eventManager;
        this._dir = _dir;
        this._resizeService = _resizeService;
        this._injector = _injector;
        this.ts = ts;
        this.tooltipText = '';
        this.isError = false;
        this.numSelected = 0;
        this.isVisible = false;
        this.searchFilterText = new FormControl('');
        this.allowIconsBadges = false;
        this.animationState = 'close';
        this.rtl = false;
        /**
         * Is dropdown clicked flag
         */
        this.ddClick = false;
        this.defaultSettings = {
            pullRight: false,
            enableSearch: false,
            checkedStyle: 'simple',
            buttonClasses: '',
            selectionLimit: 0,
            closeOnSelect: false,
            autoUnselect: false,
            showCheckAll: false,
            showUncheckAll: false,
            showTooltip: false,
            dynamicTitleMaxItems: 1,
            maxHeight: null,
            showCheckedAll: false,
            hideLabel: false,
            cancelBtn: true,
            doneBtn: true,
            titleMobile: true,
            placement: 'auto',
            appendToBody: false,
            appendTo: null,
            positionTo: null,
            enablePositionTracking: false,
            positionTrackingIntervalMs: 50,
            truncateText: false,
            containerWidth: null,
            emptyOption: false,
            stickyHeader: true,
            modelFormat: SelectModelFormat.number
        };
        this.defaultTexts = {};
        this.nullOption = {
            id: null,
            name: null
        };
        this.showMoreButton = false;
        this.single = false;
        // eslint-disable-next-line @angular-eslint/no-input-rename
        this.ariaLabelledby = `adapt-select-aria-label-${nextId++}`;
        // eslint-disable-next-line @angular-eslint/no-input-rename
        this.ariaDescribedBy = null;
        this.filterDebounceTime = 300;
        /**
         * Unique id of the element.
         */
        this.id = `adapt-select-${nextId++}`;
        /**
         * Unique id of the element.
         */
        this.testID = `adapt-select-${nextTestId++}`;
        this.emitModelChangeWithSingleValue = false;
        this.popoverPlacement = 'top';
        this.popoverTriggers = 'click';
        this.loadingState = false;
        this.loadingDataInProgress = false;
        this.readonly = false;
        // Outputs
        this.selectionLimitReached = new EventEmitter();
        this.dropdownClosed = new EventEmitter();
        this.dropdownOpened = new EventEmitter();
        this.modelArrayChanged = new EventEmitter();
        this.filterValueChanged = new EventEmitter();
        this._resizeSubject = new Subject();
        this._pageNumber = 1;
        this._focusMonitoringQueryList = new QueryList();
        this._destroyed$ = new ReplaySubject(1);
        /**
         * An object for manage wrapper's scroll.
         */
        this._scrollManager = null;
        this._disabled = false;
        this._required = false;
        /**
         * Document click handler
         */
        this.documentClickHandler = ((e) => {
            // Check if clicked node inside menu ViewChild to decide should we close dropdown
            // We include labelElement and toggleDropdownButton for correct work of toggleDropdown() method
            const el = e.target;
            if (el instanceof Node && this.menu.nativeElement.contains(el)
                || (this.labelElement && el instanceof Node && this.labelElement.nativeElement.contains(el))
                || (this.toggleDropdownBtn && el instanceof Node && this.toggleDropdownBtn.nativeElement.contains(el))) {
                return;
            }
            this.close();
        });
        // eslint-disable-next-line
        this.onModelChange = (_) => {
        };
        // eslint-disable-next-line
        this.onModelTouched = () => {
        };
        /**
         * Emits output with debounce if user filter for something
         */
        this.valueChangesSubscription = this.searchFilterText.valueChanges
            .pipe(debounceTime(this.filterDebounceTime))
            .subscribe((value) => {
            this._updateFilteredOptions();
            SafeCdr.detectChanges(this._changeDetectorRef);
            this.filterValueChanged.emit(value);
        });
        this.setDefaultTexts(ts.getCurrentLanguage());
    }
    set options(options) {
        this._options = options;
        this._updateFilteredOptions();
    }
    get isMobile() {
        return this.detection.deviceMobile();
    }
    set toggleStateValidation(value) {
        this.isError = value;
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(v) {
        this._disabled = toBoolean(v);
    }
    get customClass() {
        return this._customClass;
    }
    set customClass(v) {
        this._renderer.addClass(this.element.nativeElement, v);
    }
    get required() {
        return this._required || hasRequiredValidator(this._ngControl);
    }
    set required(v) {
        this._required = toBoolean(v);
    }
    get isAttachedToBody() {
        return this.settings.appendToBody || this.isMobile || this.settings.appendTo === 'body';
    }
    get customActions() {
        return [
            {
                name: this.searchFilterText.value ? this.texts.checkAllFilter : this.texts.checkAll,
                visible: this.settings.showCheckAll && !this.isHiddenSelectFilteredButton(),
                onClick: this.checkAll.bind(this)
            },
            {
                name: this.searchFilterText.value ? this.texts.uncheckAllFilter : this.texts.uncheckAll,
                visible: this.settings.showUncheckAll && !this.isHiddenUncheckFilteredButton(),
                onClick: this.uncheckAll.bind(this)
            }
        ];
    }
    // Check if select was render from <adapt-list-selector> component to allow showing icons and badges
    // From other places showing icons and badges forbidden
    static _shouldAllowIconsBadges(ref) {
        if (ref && ref.nativeElement && ref.nativeElement.tagName) {
            return ref.nativeElement.tagName.toLowerCase() === 'adapt-list-selector';
        }
        else {
            return false;
        }
    }
    setDefaultTexts(translation) {
        this.defaultTexts.checkAll = translation['adapt.select.checkAll'];
        this.defaultTexts.checkAllFilter = translation['adapt.select.checkAllFilter'];
        this.defaultTexts.uncheckAll = translation['adapt.select.uncheckAll'];
        this.defaultTexts.uncheckAllFilter = translation['adapt.select.uncheckAllFilter'];
        this.defaultTexts.filteredTo = translation['adapt.select.filteredTo'];
        this.defaultTexts.checked = translation['adapt.select.checked'];
        this.defaultTexts.checkedPlural = translation['adapt.select.checkedPlural'];
        this.defaultTexts.checkedAll = translation['adapt.select.checkedAll'];
        this.defaultTexts.searchPlaceholder = translation['adapt.select.searchPlaceholder'];
        this.defaultTexts.defaultTitle = translation['adapt.select.defaultTitle'];
        this.defaultTexts.headerText = translation['adapt.select.headerText'];
        this.defaultTexts.headerTextSingle = translation['adapt.select.headerTextSingle'];
        this.defaultTexts.notFound = translation['adapt.select.notFound'];
        this.defaultTexts.requiredText = translation['adapt.common.required'];
        this.defaultTexts.cancelBtnText = translation['adapt.common.cancel'];
        this.defaultTexts.doneBtnText = translation['adapt.common.done'];
        this.defaultTexts.titleMobileText = translation['adapt.select.titleMobileText'];
        this.defaultTexts.loadingText = translation['adapt.select.loadingText'];
        this.defaultTexts.emptyOptionText = translation['adapt.select.emptyOptionText'];
        this.defaultTexts.loadMore = translation['adapt.select.loadMore'];
        this.defaultTexts.numberOptionsText = translation['adapt.select.numberOptionsText'];
    }
    writeValue(value) {
        if (!isUndefined(value)) {
            const valueArray = ((value == null || value === '') && !this.settings.emptyOption) ? [] : Array.isArray(value) ? value : [value];
            const modelValue = this.settings.modelFormat === SelectModelFormat.object && valueArray[0]
                ? valueArray[0].id
                : valueArray[0];
            this._setModelAndUpdateStateOnModelChange(valueArray, false);
            if (modelValue !== null) {
                this._modelDiffer = this._differs.find(this.model).create();
            }
        }
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        SafeCdr.markForCheck(this._changeDetectorRef);
    }
    truncateText(opt) {
        this.whiteSpaceOption = opt ? 'nowrap' : 'normal';
        this.textEllipsisOption = opt ? 'ellipsis' : 'inherit';
        this.wordBreakOption = opt ? 'inherit' : 'break-word';
    }
    loadMoreItems() {
        if (this.loadMoreCallback) {
            this.loadMoreCallback();
        }
        else {
            this._pageNumber++;
            this.showMoreButton = this.displayedOptions.length > this.displayedOptionsCount;
        }
        if (this.settings.enableSearch && this.searchFilterText.value !== '') {
            this._focusHandle.focusOnFirstElement();
        }
    }
    // eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle
    ngOnInit() {
        this.popupId = this.id + '_popup';
        this.rtl = this._dir.value === 'rtl';
        this.settings = Object.assign(Object.assign({}, this.defaultSettings), this.settings);
        this.texts = Object.assign(Object.assign({}, this.defaultTexts), this.texts);
        // additional check for single select header
        // if someone already modified (translated) plural form we are setting it as default
        if (this.single && this.texts.headerText) {
            this.texts.headerTextSingle = this.texts.headerText;
        }
        this.title = this.texts.defaultTitle;
        this.nullOption.name = this.texts.emptyOptionText;
        this.allowIconsBadges = AdaptSelectComponent._shouldAllowIconsBadges(this.parentElementRef);
        this._ngZone.onStable.pipe(take(1)).subscribe(() => this._updateTitleView());
        /** Get scroll manager */
        if (this.isMobile) {
            this._scrollManager = this._scrollService.getScrollManager(document.body);
        }
        /** Truncate option */
        this.truncateText(this.settings.truncateText);
        this._ngControl = this._injector.get(NgControl, null);
    }
    get displayedOptionsCount() {
        var _a, _b;
        if (((_a = this.settings) === null || _a === void 0 ? void 0 : _a.pageSize) && !this.loadMoreCallback) {
            return this.settings.pageSize * this._pageNumber;
        }
        else {
            return ((_b = this.displayedOptions) === null || _b === void 0 ? void 0 : _b.length) || 0;
        }
    }
    // eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this._focusHandle.init(this._focusMonitoringQueryList);
        if (this.element) {
            this._focusHandle.registerKeyDown(this.element.nativeElement);
            this._resizeService.addResizeEventListener(this.element.nativeElement, this._resizeSubject.next.bind(this._resizeSubject));
            this._resizeSubject
                .pipe(throttleTime(100, asyncScheduler, { trailing: true }), takeUntil(this._destroyed$))
                .subscribe(() => {
                this._checkTooltipOption();
            });
        }
        this.focusMonitoring.changes
            .pipe(takeUntil(this._destroyed$))
            .subscribe(() => {
            this._updateFocusMonitoringOnStable();
        });
    }
    onAnimationDone(event) {
        if (this.isAttachedToBody) {
            if (this._router) {
                this._router.events
                    .pipe(takeUntil(this._destroyed$))
                    .subscribe((n) => n instanceof NavigationStart ? this._detachFromBody() : '');
            }
        }
        if (event.toState === 'void') {
            this._detachFromBody();
        }
    }
    close(restoreToggleFocus = false) {
        if (!this.isVisible) {
            return;
        }
        this.isVisible = false;
        this.searchFilterText.setValue('');
        this._applyWrapperScroll();
        this.dropdownClosed.emit(this.model);
        this.animationState = 'close';
        this._updateErrorState();
        this.onModelTouched();
        if (this._removeTapEventListener) {
            this._removeTapEventListener();
        }
        this._layerService.removeComponent(this);
        if ((restoreToggleFocus || this.isAttachedToBody) && this.toggleDropdownBtn) {
            // for preventing jumping of focus
            this.toggleDropdownBtn.nativeElement.focus();
        }
        SafeCdr.markForCheck(this._changeDetectorRef);
        if (this._trackingTimerId) {
            clearInterval(this._trackingTimerId);
            this._trackingTimerId = null;
        }
    }
    open() {
        if (this.isVisible || this.disabled || this.readonly) {
            return;
        }
        this.isAnimationReady = false;
        this.isVisible = true;
        this._applyWrapperScroll();
        this._removeTapEventListener = this._eventManager.addGlobalEventListener('document', 'tap', this.documentClickHandler.bind(this));
        this._updateFocusMonitoringOnStable();
        this._ngZone.onStable
            .asObservable()
            .pipe(take(1), tap(() => {
            this._updateMenuWidth();
            this._attachToBody();
            this._enableTrackingAnchorPosition();
        }), delay(0), takeUntil(this._destroyed$))
            .subscribe(() => {
            this._focusOnSelectOption();
            if (this.isMobile) {
                // Prevent dropdown-menu height change on searching to avoid going behind the keyboard (adapt-angular#3399)
                const computedHeight = window.getComputedStyle(this.menu.nativeElement).height;
                this._renderer.setStyle(this.menu.nativeElement, 'minHeight', computedHeight);
            }
        });
        this.dropdownOpened.emit(this.model);
        this._addToLayoutService();
        this._updateFilteredOptions();
    }
    toggleDropdown() {
        if (this.disabled || this.readonly) {
            return;
        }
        if (this.isVisible) {
            this.close();
        }
        else {
            this.open();
        }
    }
    isSelected(option) {
        const modelValue = this._findModelBySelectedOption(option);
        return modelValue === null || isDefined(modelValue);
    }
    setSelected(e, option) {
        if (getEventKeyCode(e) === SPACE) {
            e.preventDefault();
        }
        if (option.disabled) {
            return;
        }
        if (!this.model) {
            this.model = [];
        }
        // don't call preventDefault or do logic below
        // e.preventDefault();
        // https://stackoverflow.com/questions/30426523/
        // according to this article should not call preventDefault or should do this logic
        // const checkboxEl = querySelectorChildrenAndSelf(e.currentTarget as HTMLElement, '.checkbox__input') as HTMLInputElement;
        // if (checkboxEl) {
        //   setTimeout(() => {
        //     checkboxEl.checked = this.isSelected(option);
        //   });
        // }
        const itemToRemove = this._findModelBySelectedOption(option);
        const { selectionLimit, autoUnselect, closeOnSelect } = this.settings;
        if (this.single) {
            if (!itemToRemove) {
                this._setModelAndUpdateStateOnModelChange([this._createModelItem(option)], true);
            }
            this.close(true);
        }
        else {
            if (!isUndefined(itemToRemove)) {
                this._removeModelItem(itemToRemove);
            }
            else {
                if ((selectionLimit === 0 || this.model.length < selectionLimit)) {
                    this._addModelItem(this._createModelItem(option));
                }
                else {
                    if (autoUnselect) {
                        this._autoUnselect(this._createModelItem(option));
                    }
                    else {
                        this.selectionLimitReached.emit(this.model.length);
                    }
                }
            }
            this._updateStateOnModelChange(true);
            if (closeOnSelect) {
                this.close(true);
            }
        }
        this._updateFocusMonitoringOnStable();
    }
    /** For better performance */
    optionsTrackByFn(index, option) {
        return option.id;
    }
    clearSearchFilter(e) {
        e.preventDefault();
        this.searchFilterText.setValue('');
        e.target.previousElementSibling.focus();
    }
    checkAll() {
        if (this.settings.enableSearch && this._options && this.searchFilterText.value !== '') {
            // union of selected items in model and filtered items
            this._setModelAndUpdateStateOnModelChange(union(this.model, this.getFilteredItems()), true);
        }
        else {
            this._setModelAndUpdateStateOnModelChange(this.getSelectableOptions()
                .map(item => this._createModelItem(item)), true);
        }
        this._updateFocusMonitoringOnStable();
    }
    uncheckAll() {
        if (this.settings.enableSearch && this._options && this.searchFilterText.value !== '') {
            this._setModelAndUpdateStateOnModelChange(differenceWith(this.model, this.getFilteredItems(), isEqual), true);
        }
        else {
            this._setModelAndUpdateStateOnModelChange([], true);
        }
        this._updateFocusMonitoringOnStable();
    }
    uncheckAllOnDelete(event) {
        if (hasKeyboardKeyCode(event, 'Backspace', BACKSPACE) || hasKeyboardKeyCode(event, 'Delete', DELETE)) {
            this.uncheckAll();
        }
    }
    isHiddenSelectFilteredButton() {
        return this.getSelectableFilteredOptions().every(option => this.isSelectedOption(option));
    }
    isHiddenUncheckFilteredButton() {
        return this.getSelectableFilteredOptions().every(option => !this.isSelectedOption(option));
    }
    isSelectedOption(option) {
        const optionId = option.id;
        return this.model && this.model.some(item => this.getSelectedItemId(item) === optionId);
    }
    getSelectedItemId(item) {
        return (typeof item === 'object' && item !== null) ? item.id : item;
    }
    notifyArrayChanged() {
        if (!this.model || !this._options) {
            this.modelArray = [];
        }
        else {
            const indexed = keyBy(this._options, 'id');
            const modelIds = this.settings.modelFormat === SelectModelFormat.number
                ? this.model
                : this.model.map(item => item.id);
            /**
             * pick({a: 1, b: 2, c: 3, d: 4}, ['a', 'e', 'f']); //=> {a: 1}
             */
            this.modelArray = pick(indexed, modelIds);
            this.modelArrayChanged.emit(this.modelArray);
        }
    }
    cancel() {
        if (!this.single) {
            this.uncheckAll();
        }
        this.close();
    }
    getFilteredItems() {
        return this.getSelectableFilteredOptions()
            .map(item => this._createModelItem(item));
    }
    getSelectableFilteredOptions() {
        const searchValue = this.searchFilterText.value;
        const selectableOptions = this.getSelectableOptions();
        return searchValue ? this.filterSearch.transform(selectableOptions, searchValue) : selectableOptions;
    }
    isDisabled(option) {
        return this.disabled || this.readonly || option.disabled
            || (isFunction(this.disabledOptionResolver) ? this.disabledOptionResolver(option) : false);
    }
    getSelectableOptions() {
        return this._options.filter(option => !this.isDisabled(option));
    }
    allOptionsDisabled() {
        return isFunction(this.disabledOptionResolver)
            ? this.displayedOptions.every(option => this.disabledOptionResolver(option))
            : false;
    }
    // eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle
    ngDoCheck() {
        if (this._modelDiffer && this.model) {
            // true: even if changed inside component
            if (this._modelDiffer.diff(this.model)) {
                this._onModelArrayModified();
            }
        }
    }
    // eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle
    ngOnChanges(changes) {
        if (changes.options && changes.options.currentValue !== undefined) {
            if (this._options && this.texts && this.settings) {
                this._updateTitleView();
            }
        }
        if (changes.settings && !isUndefined(changes.settings.previousValue)) {
            this.settings = Object.assign(Object.assign({}, this.defaultSettings), this.settings);
        }
        if (changes.texts && !isUndefined(changes.texts.previousValue)) {
            this.texts = Object.assign(Object.assign({}, this.defaultTexts), this.texts);
            if (changes.texts.currentValue.defaultTitle) {
                this.title = changes.texts.currentValue.defaultTitle;
            }
            if (changes.texts.currentValue.emptyOptionText) {
                this.nullOption.name = changes.texts.currentValue.emptyOptionText;
            }
        }
    }
    // eslint-disable-next-line @angular-eslint/no-conflicting-lifecycle
    ngOnDestroy() {
        super.ngOnDestroy();
        this.close();
        this._detachFromBody();
        this._resizeService.removeResizeEventListener(this.element.nativeElement);
        this.valueChangesSubscription.unsubscribe();
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
    showHeader() {
        let isTextEmpty;
        let isSearchEmpty = false;
        if (this.settings.enableSearch && this._options) {
            isSearchEmpty = this.filterSearch.transform(this._options, this.searchFilterText.value).length === 0;
        }
        if (this.single === true) {
            isTextEmpty = this.texts.headerTextSingle === '';
        }
        else {
            isTextEmpty = this.texts.headerText === '';
        }
        return !!(this._options && !isSearchEmpty && !isTextEmpty);
    }
    getHeaderText() {
        return (this.single === true) ? this.texts.headerTextSingle : this.texts.headerText;
    }
    getActiveDescendant() {
        return this.optionRef ? this.optionRef.nativeElement.id : null;
    }
    _updateFilteredOptions() {
        var _a;
        let displayedOptions;
        if (this.searchFilterText.value) { // no need to filter values
            displayedOptions = this._options && this.filterSearch.transform(this._options, this.searchFilterText.value);
        }
        else {
            displayedOptions = this._options;
        }
        this.displayedOptions = displayedOptions;
        if (((_a = this.settings) === null || _a === void 0 ? void 0 : _a.pageSize) && !this.loadMoreCallback) {
            this.showMoreButton = this.displayedOptions.length > this.displayedOptionsCount;
        }
    }
    _focusOnSelectOption() {
        if (this.single && this.model && this.model.length) {
            if (this.settings.enableSearch) {
                this._focusHandle.focusOnElement(-1);
            }
            else {
                const optId = this.getSelectedItemId(this.model[0]);
                const selectedOptInd = this.focusMonitoring.toArray().findIndex(item => item.optionId === optId);
                if (selectedOptInd >= 0) {
                    this._focusHandle.focusOnElement(selectedOptInd);
                }
                else {
                    // maybe unreal case
                    this._focusHandle.focusOnFirstElement();
                }
            }
        }
        else {
            this._focusHandle.focusOnFirstElement();
        }
    }
    /**
     * Update focusMonitor list
     *
     * Need to invoke after each DOM manipulation
     * to be sure that all visible focusable items
     * are available via keyboard
     */
    _updateFocusMonitoringOnStable() {
        this._ngZone.onStable
            .pipe(take(1))
            .subscribe(() => {
            // Get all available focusMonitoring items
            const focusMonitoringList = this.focusMonitoring.toArray();
            // SelectAll/ClearAll actions are located in the child AdaptCustomActionsComponent component,
            // so we cant get them via @ViewChildren. Need to add them manually
            if (this.customActionsComponent) {
                const customActionsFocusList = this.customActionsComponent.focusMonitorDirectiveQueryList.toArray();
                if (this.settings.enableSearch) {
                    // When filter enabled
                    if (this.searchFilterText.value.length > 0) {
                        // When filter has value: filter clear button exist
                        focusMonitoringList.splice(2, 0, ...customActionsFocusList);
                    }
                    else {
                        // When filter has no value
                        focusMonitoringList.splice(1, 0, ...customActionsFocusList);
                    }
                }
                else {
                    focusMonitoringList.splice(0, 0, ...customActionsFocusList);
                }
            }
            // Reset internal focusMonitoringQueryList with actual focusable elements
            if (this.detection.isIE()) {
                // Update QueryList manually for IE 11 because QueryList.prototype.reset method does not work in IE11 properly
                // it triggers additional cd - which is the cause for dropdown to "blink" on first call to loadMore()
                this._focusMonitoringQueryList = new QueryList();
            }
            else {
                this._focusMonitoringQueryList.reset(focusMonitoringList);
            }
        });
    }
    _addToLayoutService() {
        this._layerService.addComponent(this, () => {
            this.close();
        });
    }
    _autoUnselect(item) {
        this._addModelItem(item);
        this._removeFirstModelItem();
    }
    _updateTitleView() {
        this._updateNumSelected();
        this._updateTitle();
        SafeCdr.markForCheck(this._changeDetectorRef);
    }
    _updateErrorState() {
        const model = this.model;
        const modelValue = this.settings.modelFormat === SelectModelFormat.object && model && model[0]
            ? model[0].id
            : model && model[0];
        // Cases like [''], [undefined], [false] - doesn't covered because such model values are not valid
        this.isError = this.required ? !(model && model.length && (modelValue !== null)) : false;
    }
    _updateNumSelected() {
        this.numSelected = this.model && this.model.length || 0;
    }
    _addModelItem(item) {
        return this._setModel([...this.model, item]);
    }
    _removeModelItem(itemToRemove) {
        return this._setModel(this.model.filter(item => item !== itemToRemove));
    }
    _removeFirstModelItem() {
        return this._setModel([...this.model.slice(1)]);
    }
    _setModel(newModel) {
        this.model = newModel;
        return newModel;
    }
    _setModelAndUpdateStateOnModelChange(newModel, updateErrorAndFireOnModelChangeEvent) {
        this._setModel(newModel);
        this._updateStateOnModelChange(updateErrorAndFireOnModelChangeEvent);
    }
    _updateStateOnModelChange(updateErrorAndFireOnModelChangeEvent) {
        this._updateTitleView();
        if (updateErrorAndFireOnModelChangeEvent) {
            this._updateErrorState();
            const valueToEmit = this.emitModelChangeWithSingleValue && this.single ?
                (this.model && this.model.length ? this.model[0] : null) :
                this.model;
            this.onModelChange(valueToEmit);
            // this.onModelChange();
        }
        this.notifyArrayChanged();
    }
    /**
     * updates the button title with the Selected choice
     */
    _updateTitle() {
        if (this.numSelected === 0) {
            this.title = this.texts.defaultTitle;
            this._checkTooltipOption();
        }
        else if (this.numSelected > 1 && this.single && this._options) {
            adaptWarn(`ADAPT-ANGULAR Warning! Single Select! Use only one selected value instead of ${this.model}`);
            if (this.model.length > 1) {
                this._setModel([this.model[this.model.length - 1]]);
            }
            this._filterDynamicMaxTitle();
        }
        else if (this.settings.dynamicTitleMaxItems >= this.numSelected && this._options) {
            this._filterDynamicMaxTitle();
            this._checkTooltipOption();
        }
        else {
            this._numSelectedTitle();
            this._checkTooltipOption(true);
        }
    }
    _getFilteredOptions() {
        let filteredOptions = [];
        // In case we have no options but model exists. For example for cases when options should be loaded on select opening
        if (this.settings.modelFormat === SelectModelFormat.object && this.model && this.model.length) {
            filteredOptions = this.model.filter((item) => {
                return isDefined(this._findModelBySelectedOption(item));
            });
            // In case we have options
        }
        else if (this._options && this._options.length) {
            filteredOptions = this._options.filter((option) => {
                return isDefined(this._findModelBySelectedOption(option));
            });
        }
        return filteredOptions;
    }
    _filterDynamicMaxTitle() {
        const filteredOptions = this._getFilteredOptions();
        if (filteredOptions.length === 0) {
            this.title = this.texts.defaultTitle;
        }
        else {
            this.title = filteredOptions.map((option) => option.name)
                .join(', ');
        }
    }
    _numSelectedTitle() {
        if (!this._options) {
            return;
        }
        const isEqual = () => this.model.length === this._options.length;
        const { checkedPlural, checked, checkedAll } = this.texts;
        this.settings.showCheckedAll && isEqual() ?
            this.title = `${checkedAll} ${checkedPlural}` :
            this.title = `${this.numSelected} ${this.numSelected === 1 ? checked : checkedPlural}`;
    }
    _updateMenuWidth() {
        if (!this.isMobile) {
            this._setMenuMinWidth(this.dropdownItem);
        }
    }
    _setMenuMinWidth(el) {
        if (el && el.toArray().length > 0) {
            this._renderer.setStyle(this.menu.nativeElement, 'minWidth', `${this.settings.containerWidth}px`);
        }
    }
    _attachToBody() {
        const { placement, appendToBody, positionTo, appendTo } = this.settings;
        if (this.menu && this.element) {
            const host = positionTo || this.element.nativeElement;
            const menu = this.menu.nativeElement;
            const labelElement = this.labelElement && this.labelElement.nativeElement;
            const menuStyle = (property, val) => this._renderer.setStyle(menu, property, val);
            this.placement = this._setPlacement(host, menu, placement);
            this.isAnimationReady = true;
            this.animationState = 'open';
            if (!this.isMobile && this.placement === 'top' && this.label) {
                menuStyle('marginBottom', `${-(labelElement.offsetHeight)}px`);
            }
            if (this.isAttachedToBody) {
                this._renderer.addClass(menu, 'dd-menu--in-body');
                this._renderer.appendChild(document.body, menu);
            }
            else if (appendTo) {
                this._renderer.appendChild(appendTo, menu);
            }
            if (this.isAttachedToBody || appendTo) {
                this._menuAttached = menu;
                if (!this.isMobile) {
                    menuStyle('maxWidth', `${host.offsetWidth}px`);
                    menuStyle('bottom', this.placement === 'top' ? 'auto' : '');
                    positionElements(host, menu, this.placement, appendToBody || appendTo === 'body');
                    if (this._menuKeyDownSubscription) {
                        this._menuKeyDownSubscription.unsubscribe();
                    }
                    this._menuKeyDownSubscription = this._focusHandle.registerKeyDown(menu);
                }
            }
        }
    }
    _setPlacement(host, menu, placement) {
        if (placement === 'auto') {
            const placements = availableTargetPlacements(host, menu);
            this.isMobilePlacement = placement.indexOf('mobile') !== -1 || !placements.length;
            if (placements.indexOf('top') !== -1 && placements.indexOf('bottom') === -1) {
                placement = 'top';
            }
            else {
                placement = 'bottom';
            }
        }
        return placement;
    }
    _detachFromBody() {
        if (this._menuAttached) {
            this._renderer.removeChild(document.body, this._menuAttached);
            this._menuAttached = null;
        }
    }
    _checkTooltipOption(isNumSelectedTitle = false) {
        if (this.settings.showTooltip && this.titleWidth) {
            /**
             * Additional func to parse the string for avoiding the issues
             */
            const parseString = (value, num = 10) => parseInt(value, num);
            this._ngZone.onStable
                .asObservable()
                .pipe(distinctUntilChanged(), take(1))
                .subscribe(() => {
                if (isNumSelectedTitle) {
                    const filteredOptions = this._getFilteredOptions();
                    if (filteredOptions.length) {
                        this.tooltipText = filteredOptions.map((option) => option.name).join(', ');
                    }
                }
                else {
                    const element = this.titleWidth.nativeElement;
                    const { parentElement } = element;
                    const computed = getComputedStyle(parentElement);
                    const paddingLeft = parseString(computed.paddingLeft);
                    const paddingRight = parseString(computed.paddingRight);
                    const total = paddingLeft + paddingRight + element.clientWidth;
                    parentElement.clientWidth < total ? this.tooltipText = this.title : this.tooltipText = '';
                }
            });
        }
    }
    _applyWrapperScroll() {
        if (this._scrollManager) {
            this.isMobile && this.isVisible ? this._scrollManager.hide(this) : this._scrollManager.show(this);
        }
    }
    _onModelArrayModified() {
        this._updateErrorState();
        this._updateTitleView();
    }
    _createModelItem(option) {
        return this.settings.modelFormat === SelectModelFormat.number
            ? option.id
            : { id: option.id, name: option.name };
    }
    _findModelBySelectedOption(option) {
        if (!this.model || !option) {
            return;
        }
        return this.model.find((item) => {
            if (isUndefined(item)) {
                return;
            }
            if (this.settings.emptyOption && item === null && option.id === null) {
                return true;
            }
            return item === option.id || (item && item.id === option.id);
        });
    }
    _enableTrackingAnchorPosition() {
        if ((this.settings.appendToBody || this.settings.appendTo === 'body') && this.settings.enablePositionTracking && !this.isMobile) {
            const getSizeAndPositionFromRect = (rect) => {
                return { height: rect.height, width: rect.width, left: rect.left, top: rect.top };
            };
            const anchor = this.settings.positionTo || this.element.nativeElement;
            let previousAnchorRect = getSizeAndPositionFromRect(anchor.getBoundingClientRect());
            this._trackingTimerId = window.setInterval(() => {
                const currentAnchorRect = getSizeAndPositionFromRect(anchor.getBoundingClientRect());
                if (!isEqual(previousAnchorRect, currentAnchorRect)) {
                    previousAnchorRect = currentAnchorRect;
                    this._attachToBody();
                    SafeCdr.detectChanges(this._changeDetectorRef);
                }
            }, this.settings.positionTrackingIntervalMs);
        }
    }
}
AdaptSelectComponent.ɵfac = function AdaptSelectComponent_Factory(t) { return new (t || AdaptSelectComponent)(i0.ɵɵdirectiveInject(i1.AdaptSelectSearchFilter), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.AdaptFocusMonitorService), i0.ɵɵdirectiveInject(i2.ScrollManageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.LayerService), i0.ɵɵdirectiveInject(i3.Router, 8), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i4.EventManager), i0.ɵɵdirectiveInject(i5.Directionality), i0.ɵɵdirectiveInject(i2.ResizeService), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i2.AdaptTranslateService), i0.ɵɵdirectiveInject(i6.AdaptRadarService), i0.ɵɵdirectiveInject(i2.AdaptRadarAngularCustomEventName, 8)); };
AdaptSelectComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptSelectComponent, selectors: [["adapt-select"]], viewQuery: function AdaptSelectComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
        i0.ɵɵviewQuery(_c1, 5);
        i0.ɵɵviewQuery(_c2, 5);
        i0.ɵɵviewQuery(_c3, 5);
        i0.ɵɵviewQuery(_c4, 5);
        i0.ɵɵviewQuery(_c5, 5);
        i0.ɵɵviewQuery(AdaptCustomActionsComponent, 5);
        i0.ɵɵviewQuery(_c6, 5);
        i0.ɵɵviewQuery(_c7, 5);
        i0.ɵɵviewQuery(AdaptFocusMonitorDirective, 5, AdaptFocusMonitorDirective);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.menu = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filterInput = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.labelElement = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.toggleDropdownBtn = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.titleWidth = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionRef = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.customActionsComponent = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.loadMoreBtn = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdownItem = _t);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.focusMonitoring = _t);
    } }, hostVars: 9, hostBindings: function AdaptSelectComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("id", ctx.id);
        i0.ɵɵclassProp("adapt-select", true)("adapt-select--mobile", ctx.isMobile)("is-responsive", ctx.settings.fullWidth)("is-error", ctx.isError);
    } }, inputs: { settings: "settings", showMoreButton: "showMoreButton", loadMoreCallback: "loadMoreCallback", texts: "texts", single: "single", label: "label", displayMessage: "displayMessage", ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaDescribedBy: ["aria-describedby", "ariaDescribedBy"], filterDebounceTime: "filterDebounceTime", id: "id", testID: "testID", tooltipInputIcon: "tooltipInputIcon", tooltipInputText: "tooltipInputText", whiteSpaceOption: "whiteSpaceOption", emitModelChangeWithSingleValue: "emitModelChangeWithSingleValue", popoverIcon: "popoverIcon", popoverPlacement: "popoverPlacement", popoverTriggers: "popoverTriggers", popoverContent: "popoverContent", loadingState: "loadingState", loadingDataInProgress: "loadingDataInProgress", readonly: "readonly", disabledOptionResolver: "disabledOptionResolver", parentElementRef: "parentElementRef", options: "options", toggleStateValidation: "toggleStateValidation", disabled: "disabled", customClass: "customClass", required: "required" }, outputs: { selectionLimitReached: "selectionLimitReached", dropdownClosed: "dropdownClosed", dropdownOpened: "dropdownOpened", modelArrayChanged: "modelArrayChanged", filterValueChanged: "filterValueChanged" }, features: [i0.ɵɵProvidersFeature([
            MULTISELECT_VALUE_ACCESSOR,
            AdaptSelectSearchFilter,
            AdaptFocusMonitorService
        ]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 21, vars: 7, consts: [[1, "dropdown", "dropdown_select"], [1, "adapt-select-label-wrapper"], ["class", "form-control-label mb-1 d-inline-block", 3, "sr-only", "click", 4, "ngIf"], [4, "ngIf"], ["type", "button", "role", "button", "aria-haspopup", "listbox", "class", "dropdown-toggle btn btn-secondary", 3, "ngClass", "disabled", "is-active", "dropdown-toggle-up", "click", "keyup", 4, "ngIf"], ["class", "dropdown_select__error", 4, "ngIf"], [1, "form-control-label", "mb-1", "d-inline-block", 3, "click"], ["labelElement", ""], [1, "letter-space"], [1, "form-control-required"], ["placement", "top", 3, "adaptRadarDisableEventSending", "name", "adaptTooltip", 4, "ngIf"], [3, "adaptRadarDisableEventSending", "name", "placement", "adaptPopover", "triggers", 4, "ngIf"], ["placement", "top", 3, "adaptRadarDisableEventSending", "name", "adaptTooltip"], [3, "adaptRadarDisableEventSending", "name", "placement", "adaptPopover", "triggers"], ["type", "button", "role", "button", "aria-haspopup", "listbox", 1, "dropdown-toggle", "btn", "btn-secondary", 3, "ngClass", "disabled", "click", "keyup"], ["toggleDropdownBtn", ""], ["type", "button", "role", "button", "aria-haspopup", "listbox", 1, "dropdown-toggle", "btn", "btn-secondary", 3, "adaptRadarDisableEventSending", "adaptTooltip", "placement", "ngClass", "disabled", "click", "keyup"], [1, "dropdown-toggle-title"], ["titleWidth", ""], ["class", "dropdown_select__menu", "role", "listbox", 3, "pull-right", "select-hidden", "bottom-gap", "dropdown-menu-right", "dropdown-menu-mobile-placement", "sticky", "max-height", "zIndex", "is-top", "ngClass", 4, "ngIf"], ["role", "listbox", 1, "dropdown_select__menu", 3, "ngClass"], ["menu", ""], [1, "select_option_container"], ["class", "form-group d-icon-search dropdown_select__search", "tabindex", "-1", 4, "ngIf"], [1, "dropdown_select__menu-content-wrapper"], ["class", "dropdown-header", 4, "ngIf"], ["class", "d-flex dropdown-item", 4, "ngIf"], [1, "dropdown_select__menu-content"], ["role", "presentation", "class", "dropdown-header dropdown-help-text ng-scope", "tabindex", "-1", 4, "ngIf"], [1, "select-loader-container"], [1, "loader-container"], [1, "loader-section"], ["tabindex", "-1", 1, "form-group", "d-icon-search", "dropdown_select__search"], ["type", "text", "role", "searchbox", "adaptFocusMonitor", "", 1, "form-control", 3, "placeholder", "formControl"], ["filterInput", ""], ["type", "button", "adaptFocusMonitor", "", "class", "dropdown_select__search-cross d-icon-cross_adapt", 3, "click", 4, "ngIf"], ["type", "button", "adaptFocusMonitor", "", 1, "dropdown_select__search-cross", "d-icon-cross_adapt", 3, "click"], [1, "dropdown-header"], [1, "d-flex", "dropdown-item"], [1, "dropdown__counter"], ["class", "d-flex", 3, "actions", 4, "ngIf"], [1, "d-flex", 3, "actions"], ["class", "dropdown-item", "role", "option", "tabindex", "0", 3, "adaptFocusMonitor", "ngClass", "active", "click", 4, "ngIf"], ["class", "dropdown-item", "role", "option", "tabindex", "0", 3, "adaptFocusMonitor", "disabled", "ngClass", "active", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["role", "option", "tabindex", "0", 1, "dropdown-item", 3, "adaptFocusMonitor", "ngClass", "click"], ["optionRef", ""], ["dropdownItem", ""], ["role", "option", "tabindex", "0", 1, "dropdown-item", 3, "adaptFocusMonitor", "disabled", "ngClass", "click"], [1, "list-unstyled"], ["class", "dropdown-item focusable", "tabindex", "0", "role", "option", 3, "adaptFocusMonitor", "keydown.space", "keyup.enter", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["tabindex", "0", "role", "option", 1, "dropdown-item", "focusable", 3, "adaptFocusMonitor", "keydown.space", "keyup.enter"], [1, "checkbox"], [1, "checkbox__label", "d-block"], ["type", "checkbox", "tabindex", "-1", 1, "checkbox__input", 3, "disabled", "checked", "click"], [1, "checkbox__item"], ["class", "dropdown-item__icon", 3, "adaptRadarDisableEventSending", "name", "classList", 4, "ngIf"], ["class", "badge dropdown-item__badge", 3, "ngClass", 4, "ngIf"], [1, "dropdown-item__icon", 3, "adaptRadarDisableEventSending", "name", "classList"], [1, "badge", "dropdown-item__badge", 3, "ngClass"], ["role", "presentation", "tabindex", "-1", 1, "dropdown-header", "dropdown-help-text", "ng-scope"], ["type", "button", "role", "button", "adaptFocusMonitor", "", 1, "btn", "btn-link", 3, "adaptInlineLoader", "activeText", "click"], ["loadMoreBtn", ""], ["class", "dropdown_select__overlay", 4, "ngIf"], ["class", "dropdown_select__menu dropdown_select__menu--mobile", "role", "listbox", 3, "pull-right", "dropdown-menu-right", "max-height", "zIndex", 4, "ngIf"], [1, "dropdown_select__overlay"], ["role", "listbox", 1, "dropdown_select__menu", "dropdown_select__menu--mobile"], ["class", "m-select__header", 3, "ngClass", 4, "ngIf"], [1, "m-select__header", 3, "ngClass"], ["class", "m-select__button m-select__button--cancel", 3, "click", 4, "ngIf"], ["class", "m-select__title", 4, "ngIf"], ["class", "m-select__button m-select__button--done", 3, "click", 4, "ngIf"], [1, "m-select__button", "m-select__button--cancel", 3, "click"], [1, "m-select__title"], [1, "m-select__button", "m-select__button--done", 3, "click"], ["class", "form-group d-icon-search dropdown_select__search", 3, "ngClass", 4, "ngIf"], ["class", "d-flex dropdown-item dropdown_select__wrap", 4, "ngIf"], ["role", "presentation", "class", "dropdown-header dropdown-help-text ng-scope", 4, "ngIf"], [1, "form-group", "d-icon-search", "dropdown_select__search", 3, "ngClass"], ["type", "text", "aria-describedby", "sizing-addon3", 1, "form-control", 3, "adaptFocusMonitor", "placeholder", "formControl"], ["href", "#", "class", "dropdown_select__search-cross d-icon-cross_adapt", 3, "click", 4, "ngIf"], ["href", "#", 1, "dropdown_select__search-cross", "d-icon-cross_adapt", 3, "click"], [1, "d-flex", "dropdown-item", "dropdown_select__wrap"], ["class", "dropdown-item", "role", "option", "tabindex", "0", 3, "active", "click", 4, "ngIf"], ["class", "dropdown-item", "role", "option", "tabindex", "0", 3, "active", "disabled", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["role", "option", "tabindex", "0", 1, "dropdown-item", 3, "click"], ["role", "option", "tabindex", "0", 1, "dropdown-item", 3, "disabled", "click"], [1, "list-unstyled", 3, "ngClass"], ["class", "dropdown-item focusable", "role", "option", "tabindex", "0", 3, "adaptFocusMonitor", "keydown.space", "keyup.enter", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["role", "option", "tabindex", "0", 1, "dropdown-item", "focusable", 3, "adaptFocusMonitor", "keydown.space", "keyup.enter"], ["role", "presentation", 1, "dropdown-header", "dropdown-help-text", "ng-scope"], ["type", "button", "role", "button", "adaptFocusMonitor", "", 1, "btn", "btn-link", "btn-link__load-more_mobile", 3, "adaptInlineLoader", "activeText", "click"], [1, "dropdown_select__error"], [1, "form-control-feedback", "m-0", "pt-1", "pb-2"]], template: function AdaptSelectComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵtext(1, "\n  ");
        i0.ɵɵelementStart(2, "div", 1);
        i0.ɵɵtext(3, "\n    ");
        i0.ɵɵtemplate(4, AdaptSelectComponent_span_4_Template, 7, 5, "span", 2);
        i0.ɵɵtext(5, "\n    ");
        i0.ɵɵtemplate(6, AdaptSelectComponent_ng_container_6_Template, 7, 2, "ng-container", 3);
        i0.ɵɵtext(7, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(8, "\n\n  ");
        i0.ɵɵtemplate(9, AdaptSelectComponent_button_9_Template, 3, 20, "button", 4);
        i0.ɵɵtext(10, "\n\n  ");
        i0.ɵɵtemplate(11, AdaptSelectComponent_ng_container_11_Template, 10, 20, "ng-container", 3);
        i0.ɵɵtext(12, "\n\n  ");
        i0.ɵɵtemplate(13, AdaptSelectComponent_ng_container_13_Template, 4, 1, "ng-container", 3);
        i0.ɵɵtext(14, "\n\n\n  ");
        i0.ɵɵtext(15, "\n\n  ");
        i0.ɵɵtemplate(16, AdaptSelectComponent_ng_container_16_Template, 6, 2, "ng-container", 3);
        i0.ɵɵtext(17, "\n\n  ");
        i0.ɵɵtemplate(18, AdaptSelectComponent_div_18_Template, 5, 3, "div", 5);
        i0.ɵɵtext(19, "\n\n\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(20, "\n");
    } if (rf & 2) {
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", ctx.label);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.label && !ctx.settings.hideLabel);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", !ctx.settings.showTooltip);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.settings.showTooltip);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx.isMobile);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.isMobile);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.isError && ctx.displayMessage);
    } }, directives: [i7.NgIf, i2.AdaptIconComponent, i2.AdaptTooltipDirective, i2.AdaptPopoverDirective, i7.NgClass, i2.AdaptDragonInputHandlerDirective, i8.DefaultValueAccessor, i2.AdaptFocusMonitorDirective, i8.NgControlStatus, i8.FormControlDirective, i2.AdaptCustomActionsComponent, i7.NgForOf, i2.AdaptInlineStandaloneDirective], pipes: [i7.SlicePipe], styles: ["\n    .btn-group .adapt-select {\n      margin-bottom: 0\n    }\n\n    .select-hidden {\n      visibility: hidden;\n    }\n\n    .dropdown_select .dropdown_select__search-cross {\n      border: none;\n      background: transparent;\n    }\n\n    .adapt-select--mobile .dropdown-item .checkbox__label .checkbox__item:before,\n    .adapt-select--mobile .dropdown-item .checkbox__label .checkbox__item:after {\n      top: 0.5rem;\n    }\n\n    .dropdown__counter {\n      display: inline-flex;\n      overflow: hidden;\n      color: #959799;\n      white-space: nowrap;\n      opacity: 0;\n      align-self: center;\n    }\n\n    .btn-link__load-more_mobile {\n      border: 0;\n      padding: 0.375rem .875rem;\n    }\n\n    .list-unstyled__load-more_mobile {\n      margin-bottom: 0;\n    }\n  "], encapsulation: 2, data: { animation: [
            trigger('selectMenuAnim', [
                transition('void => *', [
                    style({ bottom: '-100%', opacity: .2 }),
                    animate(`.4s ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ bottom: '0', opacity: 1 }))
                ]),
                transition('* => void', [
                    style({ bottom: '0', opacity: 1 }),
                    animate(`.6s ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ bottom: '-100%', opacity: 0 }))
                ])
            ]),
            trigger('selectOverlayAnim', [
                transition('void => *', [
                    style({ visibility: 'hidden', opacity: 0 }),
                    animate(`.6s ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ visibility: 'visible', opacity: 1 }))
                ]),
                transition('* => void', [
                    style({ visibility: 'visible', opacity: 1 }),
                    animate(`.6s ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ visibility: 'hidden', opacity: 0 }))
                ])
            ]),
            trigger('selectAnim', [
                state('close', style({ transform: 'scale(.5)', opacity: '0' })),
                state('open', style({ transform: 'scale(1)', opacity: '1' })),
                transition('close => open', animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionOut}`)),
                transition(':leave', [
                    style({ transform: 'scale(1)', opacity: '1' }),
                    animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionOut}`, style({ transform: 'scale(.5)', opacity: '0' }))
                ])
            ]),
            trigger('searchAnim', [
                transition('void => *', [
                    style({ visibility: 'hidden', opacity: 0 }),
                    animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ visibility: 'visible', opacity: .6 }))
                ]),
                transition('* => void', [
                    style({ visibility: 'visible', opacity: .6 }),
                    animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ visibility: 'hidden', opacity: 0 }))
                ])
            ]),
            trigger('validationFeedbackAnimation', [
                transition(':enter', [
                    useAnimation(ANIMATION_NAME.fadeIn)
                ]),
                transition(':leave', [
                    useAnimation(ANIMATION_NAME.fadeOut)
                ])
            ]),
            trigger('validationFeedbackChangeAnimation', [
                transition('* => *', [
                    useAnimation(ANIMATION_NAME.opacity)
                ])
            ]),
            trigger('openClose', [
                state('show', style({
                    width: '*',
                    marginRight: '.875rem',
                    opacity: 1
                })),
                // '*, hide' have the same styles for the proper close animation
                state('*', style({
                    marginRight: '0',
                    width: '0px',
                    opacity: 0
                })),
                state('hide', style({
                    marginRight: '0',
                    width: '0px',
                    opacity: 0
                })),
                transition('show => hide', [
                    animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`)
                ]),
                transition('hide => show', [
                    animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`)
                ]),
                state('showRTL', style({
                    width: '*',
                    marginRight: '0',
                    marginLeft: '.875rem',
                    opacity: 1
                })),
                state('hideRTL', style({
                    marginRight: '-2px',
                    marginLeft: '0',
                    width: '0px',
                    opacity: 0
                })),
                transition('showRTL => hideRTL', [
                    animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`)
                ]),
                transition('hideRTL => showRTL', [
                    animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`)
                ])
            ]),
            trigger('actionsAnim', [
                state('show', style({
                    height: '*',
                    padding: '*',
                    opacity: 1
                })),
                state('*', style({
                    height: '0px',
                    padding: '0px',
                    opacity: 0
                })),
                state('hide', style({
                    height: '0px',
                    padding: '0px',
                    opacity: 0
                })),
                transition('show => hide', [
                    animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`)
                ]),
                transition('hide => show', [
                    animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`)
                ])
            ])
        ] }, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptSelectComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-select',
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[class.adapt-select]': 'true',
                    '[class.adapt-select--mobile]': 'isMobile',
                    '[class.is-responsive]': 'settings.fullWidth',
                    '[class.is-error]': 'isError',
                    '[attr.id]': 'id'
                },
                templateUrl: './select.component.html',
                // TODO: remove styles after the adapt-css package update
                styles: [`
    .btn-group .adapt-select {
      margin-bottom: 0
    }

    .select-hidden {
      visibility: hidden;
    }

    .dropdown_select .dropdown_select__search-cross {
      border: none;
      background: transparent;
    }

    .adapt-select--mobile .dropdown-item .checkbox__label .checkbox__item:before,
    .adapt-select--mobile .dropdown-item .checkbox__label .checkbox__item:after {
      top: 0.5rem;
    }

    .dropdown__counter {
      display: inline-flex;
      overflow: hidden;
      color: #959799;
      white-space: nowrap;
      opacity: 0;
      align-self: center;
    }

    .btn-link__load-more_mobile {
      border: 0;
      padding: 0.375rem .875rem;
    }

    .list-unstyled__load-more_mobile {
      margin-bottom: 0;
    }
  `],
                providers: [
                    MULTISELECT_VALUE_ACCESSOR,
                    AdaptSelectSearchFilter,
                    AdaptFocusMonitorService
                ],
                encapsulation: ViewEncapsulation.None,
                animations: [
                    trigger('selectMenuAnim', [
                        transition('void => *', [
                            style({ bottom: '-100%', opacity: .2 }),
                            animate(`.4s ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ bottom: '0', opacity: 1 }))
                        ]),
                        transition('* => void', [
                            style({ bottom: '0', opacity: 1 }),
                            animate(`.6s ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ bottom: '-100%', opacity: 0 }))
                        ])
                    ]),
                    trigger('selectOverlayAnim', [
                        transition('void => *', [
                            style({ visibility: 'hidden', opacity: 0 }),
                            animate(`.6s ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ visibility: 'visible', opacity: 1 }))
                        ]),
                        transition('* => void', [
                            style({ visibility: 'visible', opacity: 1 }),
                            animate(`.6s ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ visibility: 'hidden', opacity: 0 }))
                        ])
                    ]),
                    trigger('selectAnim', [
                        state('close', style({ transform: 'scale(.5)', opacity: '0' })),
                        state('open', style({ transform: 'scale(1)', opacity: '1' })),
                        transition('close => open', animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionOut}`)),
                        transition(':leave', [
                            style({ transform: 'scale(1)', opacity: '1' }),
                            animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionOut}`, style({ transform: 'scale(.5)', opacity: '0' }))
                        ])
                    ]),
                    trigger('searchAnim', [
                        transition('void => *', [
                            style({ visibility: 'hidden', opacity: 0 }),
                            animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`, style({ visibility: 'visible', opacity: .6 }))
                        ]),
                        transition('* => void', [
                            style({ visibility: 'visible', opacity: .6 }),
                            animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`, style({ visibility: 'hidden', opacity: 0 }))
                        ])
                    ]),
                    trigger('validationFeedbackAnimation', [
                        transition(':enter', [
                            useAnimation(ANIMATION_NAME.fadeIn)
                        ]),
                        transition(':leave', [
                            useAnimation(ANIMATION_NAME.fadeOut)
                        ])
                    ]),
                    trigger('validationFeedbackChangeAnimation', [
                        transition('* => *', [
                            useAnimation(ANIMATION_NAME.opacity)
                        ])
                    ]),
                    trigger('openClose', [
                        state('show', style({
                            width: '*',
                            marginRight: '.875rem',
                            opacity: 1
                        })),
                        // '*, hide' have the same styles for the proper close animation
                        state('*', style({
                            marginRight: '0',
                            width: '0px',
                            opacity: 0
                        })),
                        state('hide', style({
                            marginRight: '0',
                            width: '0px',
                            opacity: 0
                        })),
                        transition('show => hide', [
                            animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`)
                        ]),
                        transition('hide => show', [
                            animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`)
                        ]),
                        state('showRTL', style({
                            width: '*',
                            marginRight: '0',
                            marginLeft: '.875rem',
                            opacity: 1
                        })),
                        state('hideRTL', style({
                            marginRight: '-2px',
                            marginLeft: '0',
                            width: '0px',
                            opacity: 0
                        })),
                        transition('showRTL => hideRTL', [
                            animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`)
                        ]),
                        transition('hideRTL => showRTL', [
                            animate(`${ANIMATION_DURATION.medium} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`)
                        ])
                    ]),
                    trigger('actionsAnim', [
                        state('show', style({
                            height: '*',
                            padding: '*',
                            opacity: 1
                        })),
                        state('*', style({
                            height: '0px',
                            padding: '0px',
                            opacity: 0
                        })),
                        state('hide', style({
                            height: '0px',
                            padding: '0px',
                            opacity: 0
                        })),
                        transition('show => hide', [
                            animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionIn}`)
                        ]),
                        transition('hide => show', [
                            animate(`${ANIMATION_DURATION.fast} ${ANIMATION_TIMING_FUNCTION.base.transitionInOut}`)
                        ])
                    ])
                ],
                preserveWhitespaces: true,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: i1.AdaptSelectSearchFilter }, { type: i0.Renderer2 }, { type: i2.AdaptDeviceDetectionService }, { type: i0.ElementRef }, { type: i2.AdaptFocusMonitorService }, { type: i2.ScrollManageService }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.LayerService }, { type: i3.Router, decorators: [{
                type: Optional
            }] }, { type: i0.IterableDiffers }, { type: i4.EventManager }, { type: i5.Directionality }, { type: i2.ResizeService }, { type: i0.Injector }, { type: i2.AdaptTranslateService }, { type: i6.AdaptRadarService }, { type: i2.AdaptRadarAngularCustomEventName, decorators: [{
                type: Optional
            }] }]; }, { settings: [{
            type: Input
        }], showMoreButton: [{
            type: Input
        }], loadMoreCallback: [{
            type: Input
        }], texts: [{
            type: Input
        }], single: [{
            type: Input
        }], label: [{
            type: Input
        }], displayMessage: [{
            type: Input
        }], ariaLabelledby: [{
            type: Input,
            args: ['aria-labelledby']
        }], ariaDescribedBy: [{
            type: Input,
            args: ['aria-describedby']
        }], filterDebounceTime: [{
            type: Input
        }], id: [{
            type: Input
        }], testID: [{
            type: Input
        }], tooltipInputIcon: [{
            type: Input
        }], tooltipInputText: [{
            type: Input
        }], whiteSpaceOption: [{
            type: Input
        }], emitModelChangeWithSingleValue: [{
            type: Input
        }], popoverIcon: [{
            type: Input
        }], popoverPlacement: [{
            type: Input
        }], popoverTriggers: [{
            type: Input
        }], popoverContent: [{
            type: Input
        }], loadingState: [{
            type: Input
        }], loadingDataInProgress: [{
            type: Input
        }], readonly: [{
            type: Input
        }], disabledOptionResolver: [{
            type: Input
        }], selectionLimitReached: [{
            type: Output
        }], dropdownClosed: [{
            type: Output
        }], dropdownOpened: [{
            type: Output
        }], modelArrayChanged: [{
            type: Output
        }], filterValueChanged: [{
            type: Output
        }], menu: [{
            type: ViewChild,
            args: ['menu']
        }], filterInput: [{
            type: ViewChild,
            args: ['filterInput']
        }], labelElement: [{
            type: ViewChild,
            args: ['labelElement']
        }], toggleDropdownBtn: [{
            type: ViewChild,
            args: ['toggleDropdownBtn']
        }], titleWidth: [{
            type: ViewChild,
            args: ['titleWidth']
        }], optionRef: [{
            type: ViewChild,
            args: ['optionRef', { static: false }]
        }], dropdownItem: [{
            type: ViewChildren,
            args: ['dropdownItem']
        }], focusMonitoring: [{
            type: ViewChildren,
            args: [AdaptFocusMonitorDirective,
                { read: AdaptFocusMonitorDirective }]
        }], customActionsComponent: [{
            type: ViewChild,
            args: [AdaptCustomActionsComponent, { static: false }]
        }], loadMoreBtn: [{
            type: ViewChild,
            args: ['loadMoreBtn']
        }], parentElementRef: [{
            type: Input
        }], options: [{
            type: Input
        }], toggleStateValidation: [{
            type: Input
        }], disabled: [{
            type: Input
        }], customClass: [{
            type: Input
        }], required: [{
            type: Input
        }] }); })();
//# sourceMappingURL=select.component.js.map