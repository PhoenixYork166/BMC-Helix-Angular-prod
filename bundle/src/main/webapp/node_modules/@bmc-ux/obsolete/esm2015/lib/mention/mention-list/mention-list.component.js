import { Component, Output, EventEmitter, ViewChild, ElementRef, Renderer2, Input } from '@angular/core';
import { Subject } from 'rxjs';
import { Directionality } from '@angular/cdk/bidi';
import { AdaptDeviceDetectionService, convertPlacement, isString, positionElements } from '@bmc-ux/adapt-angular';
import * as i0 from "@angular/core";
import * as i1 from "@bmc-ux/adapt-angular";
import * as i2 from "@angular/cdk/bidi";
import * as i3 from "@angular/common";
const _c0 = ["list"];
const _c1 = ["caretPositionDiv"];
function AdaptMentionListComponent_ng_container_3_ng_template_2_Template(rf, ctx) { }
const _c2 = function (a0) { return { "$implicit": a0 }; };
function AdaptMentionListComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵtemplate(2, AdaptMentionListComponent_ng_container_3_ng_template_2_Template, 0, 0, "ng-template", 8);
    i0.ɵɵtext(3, "\n  ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r1.topSideTemplate)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, _c2, ctx_r1.items));
} }
function AdaptMentionListComponent_li_7_ng_container_2_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r6 = i0.ɵɵnextContext(2).$implicit;
    const ctx_r10 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(item_r6[ctx_r10.searchKey]);
} }
function AdaptMentionListComponent_li_7_ng_container_2_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r6 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(item_r6);
} }
function AdaptMentionListComponent_li_7_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptMentionListComponent_li_7_ng_container_2_span_2_Template, 2, 1, "span", 2);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵtemplate(4, AdaptMentionListComponent_li_7_ng_container_2_span_4_Template, 2, 1, "span", 2);
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r8.searchKey);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r8.searchKey);
} }
function AdaptMentionListComponent_li_7_ng_container_4_ng_template_2_Template(rf, ctx) { }
function AdaptMentionListComponent_li_7_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptMentionListComponent_li_7_ng_container_4_ng_template_2_Template, 0, 0, "ng-template", 8);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r6 = i0.ɵɵnextContext().$implicit;
    const ctx_r9 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r9.itemTemplate)("ngTemplateOutletContext", ctx_r9.getTempalteParams(item_r6));
} }
function AdaptMentionListComponent_li_7_Template(rf, ctx) { if (rf & 1) {
    const _r17 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "li", 9);
    i0.ɵɵlistener("click", function AdaptMentionListComponent_li_7_Template_li_click_0_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r17); const i_r7 = restoredCtx.index; const ctx_r16 = i0.ɵɵnextContext(); return ctx_r16.onClick($event, i_r7); })("mousedown", function AdaptMentionListComponent_li_7_Template_li_mousedown_0_listener($event) { return $event.preventDefault(); });
    i0.ɵɵtext(1, "\n\n      ");
    i0.ɵɵtemplate(2, AdaptMentionListComponent_li_7_ng_container_2_Template, 6, 2, "ng-container", 2);
    i0.ɵɵtext(3, "\n\n      ");
    i0.ɵɵtemplate(4, AdaptMentionListComponent_li_7_ng_container_4_Template, 4, 2, "ng-container", 2);
    i0.ɵɵtext(5, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r7 = ctx.index;
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("active", ctx_r2.activeItem === i_r7);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r2.itemTemplate);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r2.itemTemplate);
} }
function AdaptMentionListComponent_div_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 10);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "div", 11);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelement(4, "div", 12);
    i0.ɵɵtext(5, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n  ");
    i0.ɵɵelementEnd();
} }
export class AdaptMentionListComponent {
    constructor(_deviceDetection, _renderer, _elementRef, _dir) {
        this._deviceDetection = _deviceDetection;
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._dir = _dir;
        this.mentionStyleConfig = {
            width: '200px',
            maxHeight: '360px'
        };
        this.hidden = true;
        this.showMentionLoader = false;
        this.activeItem = 0;
        this.caretUpdated$ = new Subject();
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onItemClick = new EventEmitter();
        this._isMobile = false;
        this._isRtl = false;
        this._appendToBody = false;
    }
    set appendToBody(v) {
        if (Boolean(v) !== this._appendToBody) {
            this._appendToBody = Boolean(v);
            if (this._appendToBody) {
                this._renderer.appendChild(document.body, this.list.nativeElement);
            }
            else {
                this._renderer.appendChild(this._elementRef.nativeElement, this.list.nativeElement);
            }
        }
    }
    get appendToBody() {
        return this._appendToBody;
    }
    ngOnDestroy() {
        if (this.appendToBody) {
            this._renderer.removeChild(document.body, this.list.nativeElement);
        }
    }
    initializeConfig(inputEl, mentionStyleConfig) {
        this.inputStyles = Object.assign({}, this._getElementStyles(inputEl));
        this._isMobile = this._deviceDetection.isMobile();
        this._isRtl = this._dir.value === 'rtl';
        this._inputEl = inputEl;
        if (mentionStyleConfig) {
            this.mentionStyleConfig = mentionStyleConfig;
            if (this._isMobile) {
                this.mentionStyleConfig.width = '100%';
            }
        }
        this.caretUpdated$.subscribe(index => {
            this.activeItem = 0;
            this._setListPosition(this._inputEl, index);
        });
    }
    onClick(event, index) {
        event.preventDefault();
        this.activeItem = index;
        this.onItemClick.emit(index);
    }
    focusNext() {
        if (this.items.length - 1 !== this.activeItem) {
            this.activeItem++;
        }
    }
    focusPrev() {
        if (this.activeItem !== 0) {
            this.activeItem--;
        }
    }
    trackByIndex(index) {
        return index;
    }
    hideList() {
        this.hidden = true;
    }
    showList() {
        this.hidden = false;
    }
    getTempalteParams(value) {
        return isString(value) ? { '$implicit': value } : Object.assign({}, value);
    }
    setTemplates(itemTemplate, topSideTemplate) {
        this.itemTemplate = itemTemplate;
        this.topSideTemplate = topSideTemplate;
    }
    getActiveValue() {
        return this.items[this.activeItem];
    }
    setLoaderState(state) {
        this.showMentionLoader = state;
    }
    setListItems(items) {
        this.items = items;
    }
    setActiveIndex(index) {
        this.activeItem = index;
    }
    setSearchKey(searchKey) {
        this.searchKey = searchKey;
    }
    _setListPosition(element, caretPosition) {
        this._renderer.setStyle(this.list.nativeElement, 'zIndex', this.appendToBody ? '1070' : '1');
        const ltrPlacement = [
            'bottom-left',
            'bottom',
            'bottom-right',
            'top-left',
            'top',
            'top-right',
            'bottom-left',
            'bottom',
            'bottom-right',
        ];
        const placement = this._isRtl ? convertPlacement(ltrPlacement) : ltrPlacement;
        positionElements(this._getCaretPositionElement(element, caretPosition), this.list.nativeElement, placement, this.appendToBody);
    }
    _getElementStyles(element) {
        const isFirefox = this._deviceDetection.isFirefox();
        const isInput = element.nodeName === 'INPUT';
        const computed = window.getComputedStyle(element);
        const properties = [
            'direction',
            'boxSizing',
            'width',
            'height',
            'overflowX',
            'overflowY',
            'borderTopWidth',
            'borderRightWidth',
            'borderBottomWidth',
            'borderLeftWidth',
            'borderStyle',
            'paddingTop',
            'paddingRight',
            'paddingBottom',
            'paddingLeft',
            // https://developer.mozilla.org/en-US/docs/Web/CSS/font
            'fontStyle',
            'fontVariant',
            'fontWeight',
            'fontStretch',
            'fontSize',
            'fontSizeAdjust',
            'lineHeight',
            'fontFamily',
            'textAlign',
            'textTransform',
            'textIndent',
            'textDecoration',
            'letterSpacing',
            'wordSpacing',
            'tabSize',
        ];
        const div = this.caretPositionDiv.nativeElement;
        return this._calculateElementStyles(div, properties, computed, isInput, isFirefox);
    }
    _getCaretPositionElement(element, position) {
        const isInput = element.nodeName === 'INPUT';
        const div = this.caretPositionDiv.nativeElement;
        div.textContent = element.value.substring(0, position);
        // The second special handling for input type="text" vs textarea:
        // spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037
        if (isInput) {
            div.textContent = div.textContent.replace(/\s/g, '\u00a0');
        }
        // Create span which will be used for the mention list positioning
        const caretSpan = this._renderer.createElement('span');
        caretSpan.textContent = '';
        this._renderer.appendChild(div, caretSpan);
        // Wrapping must be replicated *exactly*, including when a long word gets
        // onto the next line, with whitespace at the end of the line before.
        // The  *only* reliable way to do that is to copy the *entire* rest of the
        // textarea's content into the <span> created at the caret position.
        const restContentSpan = this._renderer.createElement('span');
        restContentSpan.textContent = element.value.substring(position);
        this._renderer.appendChild(div, restContentSpan);
        // INPUT: Apply the same scrollLeft for case if scroll exist
        div.scrollLeft = element.scrollLeft + caretSpan.offsetWidth + parseInt(div.style.paddingRight, 10);
        // TEXTAREA: Apply the same scrollTop for case if scroll exist
        div.scrollTop = element.scrollTop;
        return caretSpan;
    }
    _calculateElementStyles(element, properties, computedStyles, isInput, isFirefox) {
        const styles = {};
        if (isInput) {
            styles.whiteSpace = 'nowrap';
        }
        else {
            // Default textarea styles
            styles.whiteSpace = 'pre-wrap';
            styles.wordWrap = 'break-word';
        }
        // Position off-screen
        styles.position = 'absolute'; // required to return coordinates properly
        styles.top = '0'; // need to place it at the same position as input element
        styles.visibility = 'hidden'; // not 'display: none' because we want rendering
        // Transfer the element's properties to the div
        properties.forEach((prop) => {
            styles[prop] = computedStyles[prop];
        });
        if (isFirefox) {
            // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275
            if (element.scrollHeight > parseInt(computedStyles.height, 10)) {
                styles.overflowY = 'scroll';
            }
        }
        else {
            styles.overflow = 'hidden'; // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'
        }
        return styles;
    }
}
AdaptMentionListComponent.ɵfac = function AdaptMentionListComponent_Factory(t) { return new (t || AdaptMentionListComponent)(i0.ɵɵdirectiveInject(i1.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.Directionality)); };
AdaptMentionListComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptMentionListComponent, selectors: [["adapt-mention-list"]], viewQuery: function AdaptMentionListComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.list = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.caretPositionDiv = _t.first);
    } }, inputs: { appendToBody: "appendToBody" }, outputs: { onItemClick: "onItemClick" }, features: [i0.ɵɵProvidersFeature([AdaptDeviceDetectionService])], decls: 16, vars: 10, consts: [[1, "mention-list-container", "position-absolute", 3, "hidden"], ["list", ""], [4, "ngIf"], [1, "mention-list"], ["class", "mention-list-item", 3, "active", "click", "mousedown", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["class", "mention-loader-container", 4, "ngIf"], [3, "ngStyle"], ["caretPositionDiv", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "mention-list-item", 3, "click", "mousedown"], [1, "mention-loader-container"], [1, "loader-container"], [1, "loader-section"]], template: function AdaptMentionListComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0, 1);
        i0.ɵɵtext(2, "\n  ");
        i0.ɵɵtemplate(3, AdaptMentionListComponent_ng_container_3_Template, 4, 4, "ng-container", 2);
        i0.ɵɵtext(4, "\n  ");
        i0.ɵɵelementStart(5, "ul", 3);
        i0.ɵɵtext(6, "\n    ");
        i0.ɵɵtemplate(7, AdaptMentionListComponent_li_7_Template, 6, 4, "li", 4);
        i0.ɵɵtext(8, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(9, "\n\n  ");
        i0.ɵɵtemplate(10, AdaptMentionListComponent_div_10_Template, 7, 0, "div", 5);
        i0.ɵɵtext(11, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(12, "\n\n");
        i0.ɵɵelement(13, "div", 6, 7);
        i0.ɵɵtext(15, "\n");
    } if (rf & 2) {
        i0.ɵɵstyleProp("width", ctx.mentionStyleConfig.width)("max-height", ctx.mentionStyleConfig.maxHeight);
        i0.ɵɵproperty("hidden", ctx.hidden);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.topSideTemplate);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngForOf", ctx.items)("ngForTrackBy", ctx.trackByIndex);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.showMentionLoader);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngStyle", ctx.inputStyles);
    } }, directives: [i3.NgIf, i3.NgForOf, i3.NgStyle, i3.NgTemplateOutlet], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptMentionListComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-mention-list',
                templateUrl: './mention-list.component.html',
                providers: [AdaptDeviceDetectionService]
            }]
    }], function () { return [{ type: i1.AdaptDeviceDetectionService }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i2.Directionality }]; }, { appendToBody: [{
            type: Input
        }], list: [{
            type: ViewChild,
            args: ['list', { static: true }]
        }], caretPositionDiv: [{
            type: ViewChild,
            args: ['caretPositionDiv', { static: true }]
        }], onItemClick: [{
            type: Output
        }] }); })();
//# sourceMappingURL=mention-list.component.js.map