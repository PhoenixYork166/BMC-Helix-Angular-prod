/* eslint-disable @typescript-eslint/no-explicit-any */
import { animate, animateChild, group, query, style, transition, trigger, useAnimation } from '@angular/animations';
import { moveItemInArray } from '@angular/cdk/drag-drop';
import { Component, ElementRef, EventEmitter, Injector, Input, Output, Renderer2, ViewChild } from '@angular/core';
import { FormControl } from '@angular/forms';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService, AdaptTranslateService, ANIMATION_DURATION, ANIMATION_NAME, ANIMATION_TIMING_FUNCTION, createFormControlValidator, createFormControlValueAccessor, FormComponent, } from '@bmc-ux/adapt-angular';
import { AdaptSelectSearchFilter } from '../select/index';
import * as i0 from "@angular/core";
import * as i1 from "@bmc-ux/adapt-angular";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/cdk/drag-drop";
import * as i5 from "./list-builder-item/list-builder-item.component";
import * as i6 from "../select/select.pipe";
const _c0 = ["list"];
const _c1 = ["search"];
function AdaptListBuilderComponent_adapt_rx_control_label_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-rx-control-label", 8);
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("label", ctx_r0.label)("requiredLabel", ctx_r0.texts.requiredText)("showRequiredLabel", ctx_r0.required)("subLabel", ctx_r0.subLabel)("tooltip", ctx_r0.tooltipConfig);
} }
function AdaptListBuilderComponent_div_9_button_7_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 14);
    i0.ɵɵlistener("click", function AdaptListBuilderComponent_div_9_button_7_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(2); return ctx_r10.addListItem(); });
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("disabled", ctx_r9.isItemDisallowed);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n        ", ctx_r9.texts.add, "\n      ");
} }
function AdaptListBuilderComponent_div_9_Template(rf, ctx) { if (rf & 1) {
    const _r13 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 9, 10);
    i0.ɵɵtext(2, "\n      ");
    i0.ɵɵelement(3, "span", 11);
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelementStart(5, "input", 12);
    i0.ɵɵlistener("ngModelChange", function AdaptListBuilderComponent_div_9_Template_input_ngModelChange_5_listener($event) { i0.ɵɵrestoreView(_r13); const ctx_r12 = i0.ɵɵnextContext(); return ctx_r12.searchFilterText = $event; })("keyup", function AdaptListBuilderComponent_div_9_Template_input_keyup_5_listener() { i0.ɵɵrestoreView(_r13); const ctx_r14 = i0.ɵɵnextContext(); return ctx_r14.searchChange(); })("keyup.esc", function AdaptListBuilderComponent_div_9_Template_input_keyup_esc_5_listener() { i0.ɵɵrestoreView(_r13); const ctx_r15 = i0.ɵɵnextContext(); return ctx_r15.cleanField(); })("keydown.enter", function AdaptListBuilderComponent_div_9_Template_input_keydown_enter_5_listener($event) { return $event.preventDefault(); })("keyup.enter", function AdaptListBuilderComponent_div_9_Template_input_keyup_enter_5_listener() { i0.ɵɵrestoreView(_r13); const ctx_r17 = i0.ɵɵnextContext(); return ctx_r17.isItemDisallowed ? false : ctx_r17.addListItem(); })("blur", function AdaptListBuilderComponent_div_9_Template_input_blur_5_listener() { i0.ɵɵrestoreView(_r13); const ctx_r18 = i0.ɵɵnextContext(); return ctx_r18.onBlur(); })("focus", function AdaptListBuilderComponent_div_9_Template_input_focus_5_listener() { i0.ɵɵrestoreView(_r13); const ctx_r19 = i0.ɵɵnextContext(); return ctx_r19.onFocus(); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n      ");
    i0.ɵɵtemplate(7, AdaptListBuilderComponent_div_9_button_7_Template, 2, 2, "button", 13);
    i0.ɵɵtext(8, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(5);
    i0.ɵɵpropertyInterpolate("placeholder", ctx_r1.texts.searchPlaceholder);
    i0.ɵɵproperty("ngModel", ctx_r1.searchFilterText)("disabled", ctx_r1.disabled);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !(ctx_r1.disabled || ctx_r1.readonly) && ctx_r1.searchFilterText.length > 0);
} }
function AdaptListBuilderComponent_ng_container_14_div_2_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 20);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementStart(2, "span");
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelement(4, "span", 21);
    i0.ɵɵtext(5, "\n            ");
    i0.ɵɵelementStart(6, "span");
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const data_r20 = i0.ɵɵnextContext(2).ngIf;
    const ctx_r23 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r23.texts.headerText);
    i0.ɵɵadvance(4);
    i0.ɵɵtextInterpolate2("(", data_r20.length, " ", ctx_r23.texts.numberOptionsText, ")");
} }
function AdaptListBuilderComponent_ng_container_14_div_2_div_5_Template(rf, ctx) { if (rf & 1) {
    const _r29 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 22);
    i0.ɵɵlistener("cdkDragMoved", function AdaptListBuilderComponent_ng_container_14_div_2_div_5_Template_div_cdkDragMoved_0_listener() { i0.ɵɵrestoreView(_r29); const ctx_r28 = i0.ɵɵnextContext(3); return ctx_r28.move(); });
    i0.ɵɵtext(1, "\n\n            ");
    i0.ɵɵelementStart(2, "adapt-list-builder-item", 23);
    i0.ɵɵlistener("ngModelChange", function AdaptListBuilderComponent_ng_container_14_div_2_div_5_Template_adapt_list_builder_item_ngModelChange_2_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r29); const index_r27 = restoredCtx.index; const data_r20 = i0.ɵɵnextContext(2).ngIf; return (data_r20[index_r27] = $event); })("onEditChange", function AdaptListBuilderComponent_ng_container_14_div_2_div_5_Template_adapt_list_builder_item_onEditChange_2_listener($event) { i0.ɵɵrestoreView(_r29); const ctx_r32 = i0.ɵɵnextContext(3); return ctx_r32.editChange($event); })("onDelete", function AdaptListBuilderComponent_ng_container_14_div_2_div_5_Template_adapt_list_builder_item_onDelete_2_listener($event) { i0.ɵɵrestoreView(_r29); const ctx_r33 = i0.ɵɵnextContext(3); return ctx_r33.deleteListItem($event); })("onKeyUp", function AdaptListBuilderComponent_ng_container_14_div_2_div_5_Template_adapt_list_builder_item_onKeyUp_2_listener() { const restoredCtx = i0.ɵɵrestoreView(_r29); const index_r27 = restoredCtx.index; const ctx_r34 = i0.ɵɵnextContext(3); return ctx_r34.onUp(index_r27); })("onKeyDown", function AdaptListBuilderComponent_ng_container_14_div_2_div_5_Template_adapt_list_builder_item_onKeyDown_2_listener() { const restoredCtx = i0.ɵɵrestoreView(_r29); const index_r27 = restoredCtx.index; const ctx_r35 = i0.ɵɵnextContext(3); return ctx_r35.onDown(index_r27); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const option_r26 = ctx.$implicit;
    const index_r27 = ctx.index;
    const data_r20 = i0.ɵɵnextContext(2).ngIf;
    const ctx_r24 = i0.ɵɵnextContext();
    i0.ɵɵproperty("@itemAnimation", undefined)("cdkDragDisabled", ctx_r24.disabled || ctx_r24.readonly || option_r26.disabled);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngModel", data_r20[index_r27])("id", ctx_r24.id + "_item_" + index_r27)("disabled", option_r26.disabled || ctx_r24.readonly || ctx_r24.disabled)("query", ctx_r24.searchFilterText)("controlLabels", ctx_r24.texts)("itemActionsTooltipConfig", ctx_r24.listItemActionsTooltip)("hideControls", ctx_r24.hideControls)("isItemDisallowed", ctx_r24.isItemDisallowed)("hideEdit", ctx_r24.disabled || ctx_r24.readonly || ctx_r24.hideEdit)("hideDelete", ctx_r24.disabled || ctx_r24.readonly || ctx_r24.hideDelete)("draggable", !(ctx_r24.disabled || ctx_r24.readonly));
} }
function AdaptListBuilderComponent_ng_container_14_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r38 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 16, 17);
    i0.ɵɵlistener("cdkDropListDropped", function AdaptListBuilderComponent_ng_container_14_div_2_Template_div_cdkDropListDropped_0_listener($event) { i0.ɵɵrestoreView(_r38); const ctx_r37 = i0.ɵɵnextContext(2); return ctx_r37.drop($event); });
    i0.ɵɵtext(2, "\n\n          ");
    i0.ɵɵtemplate(3, AdaptListBuilderComponent_ng_container_14_div_2_div_3_Template, 9, 3, "div", 18);
    i0.ɵɵtext(4, "\n\n          ");
    i0.ɵɵtemplate(5, AdaptListBuilderComponent_ng_container_14_div_2_div_5_Template, 4, 13, "div", 19);
    i0.ɵɵtext(6, "\n\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const data_r20 = i0.ɵɵnextContext().ngIf;
    const ctx_r21 = i0.ɵɵnextContext();
    i0.ɵɵproperty("cdkDropListDisabled", !!ctx_r21.searchFilterText || ctx_r21.disabled || ctx_r21.readonly)("@listAnimation", ctx_r21.options.length);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", !ctx_r21.hideListAreaLabel);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", data_r20);
} }
function AdaptListBuilderComponent_ng_container_14_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptListBuilderComponent_ng_container_14_div_2_Template, 7, 4, "div", 15);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const data_r20 = ctx.ngIf;
    i0.ɵɵnextContext();
    const _r3 = i0.ɵɵreference(21);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", data_r20 && data_r20.length)("ngIfElse", _r3);
} }
function AdaptListBuilderComponent_ng_template_20_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵelementStart(1, "div", 24);
    i0.ɵɵtext(2, "\n        ");
    i0.ɵɵelementStart(3, "adapt-empty-state", 25);
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵelementStart(5, "div", 26);
    i0.ɵɵtext(6, "\n            ");
    i0.ɵɵprojection(7);
    i0.ɵɵtext(8, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n    ");
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("type", "objects")("label", ctx_r4.texts.notFound);
} }
function AdaptListBuilderComponent_div_24_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "p", 27);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵproperty("@validationFeedbackAnimation", undefined);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r5.displayErrorMessage);
} }
function AdaptListBuilderComponent_div_26_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div");
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "p", 27);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵproperty("@validationFeedbackAnimation", undefined);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r6.validationErrorMessage);
} }
function AdaptListBuilderComponent_div_28_p_2_strong_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "strong");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const error_r41 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", error_r41.name, " ");
} }
function AdaptListBuilderComponent_div_28_p_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 27);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptListBuilderComponent_div_28_p_2_strong_2_Template, 2, 1, "strong", 5);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const error_r41 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", error_r41.name);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n      ", error_r41.text, "\n    ");
} }
function AdaptListBuilderComponent_div_28_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 28);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵtemplate(2, AdaptListBuilderComponent_div_28_p_2_Template, 4, 2, "p", 29);
    i0.ɵɵtext(3, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵproperty("@validationFeedbackAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r7._self.errors);
} }
const _c2 = [[["", 8, "empty-text"]]];
const _c3 = function (a0) { return { "is-error": a0 }; };
const _c4 = function (a0) { return { "height": a0 }; };
const _c5 = function (a0) { return { "adapt-list-builder__list": a0 }; };
const _c6 = [".empty-text"];
let listBuilderCount = 0;
export class AdaptListBuilderComponent extends FormComponent {
    constructor(_renderer, _injector, ts, _adaptRadarService, _elem) {
        super(_injector, ts, _adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptListBuilder);
        this._renderer = _renderer;
        this._injector = _injector;
        this._adaptRadarService = _adaptRadarService;
        this.searchFilterText = '';
        this.hideControls = false;
        this._self = this;
        /**
         * Label icon with a tooltip or popover
         */
        this.tooltipConfig = null;
        this.defaultSettings = {
            enableSearch: true,
            checkedStyle: 'dpl-iconfont',
            hideLabel: false,
        };
        this.defaultItemsTooltipConfig = {
            editBtn: {
                placement: 'top',
                tooltipText: ''
            },
            deleteBtn: {
                placement: 'top',
                tooltipText: ''
            }
        };
        this.defaultTexts = {};
        this.defaultErrorTexts = {};
        this.isItemDisallowed = false;
        this.listChanged = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.focus = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.blur = new EventEmitter();
        /**
         * Unique id of the element.
         */
        this.id = `list-builder-${listBuilderCount++}`;
        this.hideSearchField = false;
        this.hideEdit = false;
        this.hideDelete = false;
        this.hideListAreaLabel = false;
        this._isTouched = false;
        this._onTouchedCallback = () => {
            return;
        };
        this.setDefaultTexts(ts.getCurrentLanguage());
    }
    get isErrorExist() {
        return this.required && !this.options.length && this._isTouched;
    }
    set value(v) {
        this._value = v;
    }
    ngOnInit() {
        // Sending radar event directly to avoid issues with the premature invocation of "initControl" in parent ngOnInit()
        // ERROR NullInjectorError: R3InjectorError(AppModule)[NgControl -> NgControl -> NgControl]:
        // So do not call super.ngOnInit() here
        // TODO ?
        this._adaptRadarService.sendGenericComponentEvent(AdaptRadarAngularCustomEventName.AdaptListBuilder);
        this.settings = Object.assign(Object.assign({}, this.defaultSettings), this.settings);
        this.texts = Object.assign(Object.assign({}, this.defaultTexts), this.texts);
        this.listItemActionsTooltip = Object.assign(Object.assign({}, this.defaultItemsTooltipConfig), this.listItemActionsTooltip);
        if (!this.displayErrorMessage) {
            this.displayErrorMessage = this.defaultErrorTexts.errorEmpty;
        }
        if (!this.validationErrorMessage) {
            this.validationErrorMessage = this.defaultErrorTexts.errorInvalid;
        }
        for (const prop in this._customErrorTexts) {
            if (prop) {
                this.overrideBuildInValidatorMessage(prop, () => this._customErrorTexts[prop]);
            }
        }
        if (this.formControl) {
            super.initControl();
        }
        if (this.tooltipInputIcon && !this.popoverIcon) {
            this.tooltipConfig = {
                iconName: this.tooltipInputIcon,
                content: this.tooltipInputText,
                placement: 'top',
                popoverMode: false
            };
        }
        else if (this.popoverIcon) {
            this.tooltipConfig = {
                iconName: this.popoverIcon,
                content: this.popoverContent,
                placement: this.popoverPlacement,
                popoverMode: true,
                popoverTriggers: this.popoverTriggers
            };
        }
    }
    setDefaultTexts(translation) {
        this.defaultTexts.requiredText = translation['adapt.common.required'];
        this.defaultTexts.searchPlaceholder = translation['adapt.listBuilder.searchPlaceholder'];
        this.defaultTexts.headerText = translation['adapt.listBuilder.headerText'];
        this.defaultTexts.numberOptionsText = translation['adapt.listBuilder.numberOptionsText'];
        this.defaultTexts.add = translation['adapt.listBuilder.add'];
        this.defaultTexts.notFound = translation['adapt.listBuilder.notFound'];
        this.defaultTexts.edit = translation['adapt.common.edit'];
        this.defaultTexts.save = translation['adapt.common.save'];
        this.defaultTexts.cancel = translation['adapt.common.cancel'];
        this.defaultTexts.delete = translation['adapt.common.delete'];
        // by some weird reason we have additional defaults for tooltip texts
        // TODO: double check do we need them
        this.defaultItemsTooltipConfig.editBtn.tooltipText = translation['adapt.listBuilder.editTooltip'];
        this.defaultItemsTooltipConfig.deleteBtn.tooltipText = translation['adapt.listBuilder.deleteTooltip'];
        this.defaultErrorTexts.errorEmpty = translation['adapt.listBuilder.error.empty'];
        this.defaultErrorTexts.errorInvalidName = translation['adapt.listBuilder.error.invalidName'];
        this.defaultErrorTexts.errorInvalid = translation['adapt.listBuilder.error.invalid'];
    }
    writeValue(value) {
        if (value) {
            this.value = value;
        }
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    validate() {
        const validationError = {
            invalidData: this._customErrorTexts.validationError || {
                name: this.defaultErrorTexts.errorInvalidName,
                text: this.defaultErrorTexts.errorInvalid
            }
        };
        if (!this.options.length) {
            return null;
        }
        return this.isItemDisallowed ? validationError : null;
    }
    checkItemDisallowed() {
        return this.allowAddingToList && this.allowAddingToList(this.searchFilterText, this.options);
    }
    addListItem() {
        if (this.disabled || this.readonly) {
            return;
        }
        this.options.push({
            id: this.generateListItemId() ? this.generateListItemId() : '',
            name: this.searchFilterText
        });
        this.cleanField();
        this.updateModel();
    }
    deleteListItem(option) {
        const index = this.options.indexOf(option);
        this.options.splice(index, 1);
        this.updateModel();
        this._isTouched = true;
    }
    editChange(value) {
        this.isItemDisallowed = this.allowAddingToList && this.allowAddingToList(value, this.options);
        // Need for reactive forms validation
        this._onTouchedCallback();
        this.propagateChange(this.options);
    }
    drop(event) {
        moveItemInArray(this.options, event.previousIndex, event.currentIndex);
        this.hideControls = false;
        this.updateModel();
    }
    onUp(index) {
        if (this.disabled || this.readonly) {
            return;
        }
        moveItemInArray(this.options, index, (index === 0) ? 0 : --index);
        this.updateModel();
    }
    onDown(index) {
        if (this.disabled || this.readonly) {
            return;
        }
        let currentIndex = this.options.length;
        if (index !== this.options.length) {
            currentIndex = index++;
        }
        moveItemInArray(this.options, index, currentIndex);
        this.updateModel();
    }
    move() {
        this.hideControls = true;
    }
    searchChange() {
        this.isItemDisallowed = this.checkItemDisallowed();
        this._onTouchedCallback();
        this.propagateChange(this.options);
    }
    cleanField() {
        this.searchFilterText = '';
    }
    onBlur() {
        this._renderer.removeClass(this.search.nativeElement, 'focused');
        this._isTouched = true;
        this.propagateChange(this.options);
        this._onTouchedCallback();
    }
    onFocus() {
        this._renderer.addClass(this.search.nativeElement, 'focused');
    }
    updateModel() {
        this.propagateChange(this.options);
        this._onTouchedCallback();
        this.listChanged.emit(this.options);
    }
}
AdaptListBuilderComponent.ɵfac = function AdaptListBuilderComponent_Factory(t) { return new (t || AdaptListBuilderComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.AdaptTranslateService), i0.ɵɵdirectiveInject(i1.AdaptRadarAngularService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptListBuilderComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptListBuilderComponent, selectors: [["adapt-list-builder"]], viewQuery: function AdaptListBuilderComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
        i0.ɵɵviewQuery(_c1, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.list = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.search = _t.first);
    } }, hostVars: 1, hostBindings: function AdaptListBuilderComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("id", ctx.id);
    } }, inputs: { label: "label", subLabel: ["sub-label", "subLabel"], id: "id", name: "name", tooltipInputIcon: "tooltipInputIcon", tooltipInputText: "tooltipInputText", options: "options", settings: "settings", texts: "texts", listItemActionsTooltip: "listItemActionsTooltip", displayErrorMessage: "displayErrorMessage", validationErrorMessage: "validationErrorMessage", formControl: "formControl", menuHeight: "menuHeight", hideSearchField: "hideSearchField", hideEdit: "hideEdit", hideDelete: "hideDelete", hideListAreaLabel: "hideListAreaLabel", generateListItemId: "generateListItemId", allowAddingToList: "allowAddingToList" }, outputs: { listChanged: "listChanged", focus: "focus", blur: "blur" }, features: [i0.ɵɵProvidersFeature([
            createFormControlValueAccessor(AdaptListBuilderComponent),
            createFormControlValidator(AdaptListBuilderComponent),
            AdaptSelectSearchFilter
        ]), i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c6, decls: 31, vars: 24, consts: [[1, "adapt-list-builder", 3, "ngClass"], [3, "label", "requiredLabel", "showRequiredLabel", "subLabel", "tooltip", 4, "ngIf"], [1, "adapt-list-builder__wrp"], ["class", "adapt-list-builder__search", "tabindex", "-1", 4, "ngIf"], [1, "adapt-list-container", "adapt-list", 3, "ngStyle", "ngClass"], [4, "ngIf"], ["empty", ""], ["class", "has-danger", 4, "ngIf"], [3, "label", "requiredLabel", "showRequiredLabel", "subLabel", "tooltip"], ["tabindex", "-1", 1, "adapt-list-builder__search"], ["search", ""], [1, "d-icon-search"], ["type", "text", "tabindex", "0", 1, "form-control", "m-start-1", 3, "ngModel", "placeholder", "disabled", "ngModelChange", "keyup", "keyup.esc", "keydown.enter", "keyup.enter", "blur", "focus"], ["type", "button", "role", "button", "tabindex", "0", "class", "adapt-list-builder__add-item btn btn-link", 3, "disabled", "click", 4, "ngIf"], ["type", "button", "role", "button", "tabindex", "0", 1, "adapt-list-builder__add-item", "btn", "btn-link", 3, "disabled", "click"], ["cdkDropList", "", 3, "cdkDropListDisabled", "cdkDropListDropped", 4, "ngIf", "ngIfElse"], ["cdkDropList", "", 3, "cdkDropListDisabled", "cdkDropListDropped"], ["list", ""], ["class", "adapt-list-builder__list-header", 4, "ngIf"], ["class", "adapt-list-builder__list-wrp", "cdkDrag", "", "cdkDragLockAxis", "y", 3, "cdkDragDisabled", "cdkDragMoved", 4, "ngFor", "ngForOf"], [1, "adapt-list-builder__list-header"], [1, "letter-space"], ["cdkDrag", "", "cdkDragLockAxis", "y", 1, "adapt-list-builder__list-wrp", 3, "cdkDragDisabled", "cdkDragMoved"], [3, "ngModel", "id", "disabled", "query", "controlLabels", "itemActionsTooltipConfig", "hideControls", "isItemDisallowed", "hideEdit", "hideDelete", "draggable", "ngModelChange", "onEditChange", "onDelete", "onKeyUp", "onKeyDown"], [1, "list-container"], [3, "type", "label"], [1, "empty-info"], [1, "form-control-feedback", "m-0", "pt-1", "pb-2"], [1, "has-danger"], ["class", "form-control-feedback m-0 pt-1 pb-2", 4, "ngFor", "ngForOf"]], template: function AdaptListBuilderComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef(_c2);
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵtext(1, "\n\n  ");
        i0.ɵɵtext(2, "\n  ");
        i0.ɵɵtemplate(3, AdaptListBuilderComponent_adapt_rx_control_label_3_Template, 1, 5, "adapt-rx-control-label", 1);
        i0.ɵɵtext(4, "\n  ");
        i0.ɵɵtext(5, "\n\n  ");
        i0.ɵɵelementStart(6, "div", 2);
        i0.ɵɵtext(7, "\n\n    ");
        i0.ɵɵtext(8, "\n    ");
        i0.ɵɵtemplate(9, AdaptListBuilderComponent_div_9_Template, 9, 4, "div", 3);
        i0.ɵɵtext(10, "\n    ");
        i0.ɵɵtext(11, "\n\n    ");
        i0.ɵɵelementStart(12, "div", 4);
        i0.ɵɵtext(13, "\n      ");
        i0.ɵɵtemplate(14, AdaptListBuilderComponent_ng_container_14_Template, 4, 2, "ng-container", 5);
        i0.ɵɵpipe(15, "async");
        i0.ɵɵpipe(16, "searchFilterAsync");
        i0.ɵɵtext(17, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(18, "\n    ");
        i0.ɵɵtext(19, "\n\n    ");
        i0.ɵɵtemplate(20, AdaptListBuilderComponent_ng_template_20_Template, 12, 2, "ng-template", null, 6, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(22, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(23, "\n\n  ");
        i0.ɵɵtemplate(24, AdaptListBuilderComponent_div_24_Template, 5, 2, "div", 5);
        i0.ɵɵtext(25, "\n\n  ");
        i0.ɵɵtemplate(26, AdaptListBuilderComponent_div_26_Template, 5, 2, "div", 5);
        i0.ɵɵtext(27, "\n\n  ");
        i0.ɵɵtemplate(28, AdaptListBuilderComponent_div_28_Template, 4, 2, "div", 7);
        i0.ɵɵtext(29, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(30, "\n");
    } if (rf & 2) {
        i0.ɵɵclassProp("disabled", ctx.disabled)("readonly", ctx.readonly);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(18, _c3, ctx.isErrorExist || ctx.isItemDisallowed));
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", !ctx.settings.hideLabel);
        i0.ɵɵadvance(6);
        i0.ɵɵproperty("ngIf", !ctx.hideSearchField);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngStyle", i0.ɵɵpureFunction1(20, _c4, ctx.menuHeight))("ngClass", i0.ɵɵpureFunction1(22, _c5, !ctx.hideSearchField));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", i0.ɵɵpipeBind1(15, 13, i0.ɵɵpipeBind2(16, 15, ctx.options, ctx.searchFilterText)));
        i0.ɵɵadvance(10);
        i0.ɵɵproperty("ngIf", ctx.isErrorExist && !ctx.isItemDisallowed && !ctx.formControl);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx.isErrorExist && ctx.isItemDisallowed && !ctx.formControl);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.formControl && ctx._self.errors.length > 0 && ctx._self.control.touched);
    } }, directives: [i2.NgClass, i2.NgIf, i2.NgStyle, i1.AdaptRxControlLabelComponent, i1.AdaptDragonInputHandlerDirective, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel, i4.CdkDropList, i2.NgForOf, i4.CdkDrag, i5.AdaptListBuilderItemComponent, i1.AdaptEmptyStateComponent], pipes: [i2.AsyncPipe, i6.AdaptSelectSearchFilterAsync], encapsulation: 2, data: { animation: [
            trigger('listAnimation', [
                transition(':decrement', [
                    group([
                        query('@itemAnimation', [
                            animateChild()
                        ], { optional: true })
                    ])
                ]),
                transition(':enter, :increment', [
                    query('@itemAnimation', [
                        animateChild()
                    ], { optional: true })
                ]),
            ]),
            trigger('itemAnimation', [
                transition(':enter', [
                    style({ transform: 'scale(0.5)', opacity: 0 }),
                    animate(ANIMATION_DURATION.medium + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ transform: 'scale(1)', opacity: 1 }))
                ]),
                transition(':leave', [
                    style({ transform: 'scale(1)', opacity: 1, height: '*' }),
                    animate(ANIMATION_DURATION.medium + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ transform: 'scale(0.5)', opacity: 0, height: '0px' }))
                ]),
            ]),
            trigger('validationFeedbackAnimation', [
                transition(':enter', [
                    useAnimation(ANIMATION_NAME.fadeIn)
                ]),
                transition(':leave', [
                    useAnimation(ANIMATION_NAME.fadeOut)
                ])
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptListBuilderComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-list-builder',
                templateUrl: './list-builder.component.html',
                providers: [
                    createFormControlValueAccessor(AdaptListBuilderComponent),
                    createFormControlValidator(AdaptListBuilderComponent),
                    AdaptSelectSearchFilter
                ],
                animations: [
                    trigger('listAnimation', [
                        transition(':decrement', [
                            group([
                                query('@itemAnimation', [
                                    animateChild()
                                ], { optional: true })
                            ])
                        ]),
                        transition(':enter, :increment', [
                            query('@itemAnimation', [
                                animateChild()
                            ], { optional: true })
                        ]),
                    ]),
                    trigger('itemAnimation', [
                        transition(':enter', [
                            style({ transform: 'scale(0.5)', opacity: 0 }),
                            animate(ANIMATION_DURATION.medium + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ transform: 'scale(1)', opacity: 1 }))
                        ]),
                        transition(':leave', [
                            style({ transform: 'scale(1)', opacity: 1, height: '*' }),
                            animate(ANIMATION_DURATION.medium + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ transform: 'scale(0.5)', opacity: 0, height: '0px' }))
                        ]),
                    ]),
                    trigger('validationFeedbackAnimation', [
                        transition(':enter', [
                            useAnimation(ANIMATION_NAME.fadeIn)
                        ]),
                        transition(':leave', [
                            useAnimation(ANIMATION_NAME.fadeOut)
                        ])
                    ])
                ],
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[attr.id]': 'id'
                }
            }]
    }], function () { return [{ type: i0.Renderer2 }, { type: i0.Injector }, { type: i1.AdaptTranslateService }, { type: i1.AdaptRadarAngularService }, { type: i0.ElementRef }]; }, { list: [{
            type: ViewChild,
            args: ['list']
        }], search: [{
            type: ViewChild,
            args: ['search']
        }], listChanged: [{
            type: Output
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], label: [{
            type: Input
        }], subLabel: [{
            type: Input,
            args: ['sub-label']
        }], id: [{
            type: Input
        }], name: [{
            type: Input
        }], tooltipInputIcon: [{
            type: Input
        }], tooltipInputText: [{
            type: Input
        }], options: [{
            type: Input
        }], settings: [{
            type: Input
        }], texts: [{
            type: Input
        }], listItemActionsTooltip: [{
            type: Input
        }], displayErrorMessage: [{
            type: Input
        }], validationErrorMessage: [{
            type: Input
        }], formControl: [{
            type: Input
        }], menuHeight: [{
            type: Input
        }], hideSearchField: [{
            type: Input
        }], hideEdit: [{
            type: Input
        }], hideDelete: [{
            type: Input
        }], hideListAreaLabel: [{
            type: Input
        }], generateListItemId: [{
            type: Input
        }], allowAddingToList: [{
            type: Input
        }] }); })();
//# sourceMappingURL=list-builder.component.js.map