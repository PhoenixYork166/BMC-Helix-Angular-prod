/* eslint-disable @typescript-eslint/no-explicit-any */
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, Injector, Input, Output, Renderer2, ViewEncapsulation } from '@angular/core';
import { AdaptRadarAngularCustomEventName, AdaptTranslateService, createFormControlValidator, createFormControlValueAccessor } from '@bmc-ux/adapt-angular';
import { AdaptCheckbox2Component } from '../checkbox2/index';
import { AdaptRadarService } from '@bmc-ux/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "@bmc-ux/adapt-angular";
import * as i2 from "@bmc-ux/adapt-radar";
import * as i3 from "@angular/common";
function AdaptSwitcherComponent_span_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r1.context.label);
} }
function AdaptSwitcherComponent_span_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 11);
} }
function AdaptSwitcherComponent_span_17_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 12);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r3.context.requiredLabel);
} }
function AdaptSwitcherComponent_span_21_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 13);
} }
function AdaptSwitcherComponent_adapt_icon_23_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 14);
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵpropertyInterpolate("adaptTooltip", ctx_r5.context.tooltipText);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("ngClass", ctx_r5.labelPosition === "after" ? "m-start-1" : "m-end-1")("name", ctx_r5.context.tooltipIconCls);
} }
function AdaptSwitcherComponent_adapt_icon_25_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 15);
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵproperty("name", ctx_r6.context.popoverIcon)("adaptRadarDisableEventSending", true)("ngClass", ctx_r6.labelPosition === "after" ? "m-start-1" : "m-end-1")("placement", ctx_r6.context.popoverPlacement)("adaptPopover", ctx_r6.context.popoverContent)("triggers", ctx_r6.context.popoverTriggers);
} }
const _c0 = [[["", 8, "switcher-before"]], [["", 8, "switcher-after"]]];
const _c1 = [".switcher-before", ".switcher-after"];
let nextUniqueId = 0;
export class AdaptSwitcherComponent extends AdaptCheckbox2Component {
    constructor(injector, element, renderer, changeDetectorRef, ts, _adaptRadarService) {
        super(injector, element, renderer, changeDetectorRef, ts, _adaptRadarService, AdaptRadarAngularCustomEventName.AdaptSwitcher);
        this.context = this;
        this._label = '';
        this._uniqueId = `adapt-checkbox-${++nextUniqueId}`;
        this.labelPosition = 'after';
        /**
         * sizes - lg and sm
         */
        this.size = '';
        /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */
        this.id = this._uniqueId;
        /** Name value will be applied to the input element if present */
        this.name = null;
        /** The tabindex attribute of the native input element */
        this.tabindex = null;
        /**
         * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will
         * take precedence so this may be omitted.
         */
        this.ariaLabel = '';
        /**
         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element
         */
        this.ariaLabelledby = null;
        this.ariaDescribedBy = null;
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.focus = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.blur = new EventEmitter();
        /** Event emitted when the switcher value changes. */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.change = new EventEmitter();
    }
    get hostClasses() {
        return [
            'switcher',
            this.labelPosition === 'before' ? 'switcher__before' : ''
        ].join(' ');
    }
    get inputId() {
        return `${this.id || this._uniqueId}-input`;
    }
    /**
     * The label text of the checkbox component
     */
    get label() {
        return this._label;
    }
    set label(v) {
        this._label = v;
    }
    ngOnInit() {
        super.ngOnInit();
    }
    onInputClick(e) {
        super.onInputClick(e);
    }
}
AdaptSwitcherComponent.ɵfac = function AdaptSwitcherComponent_Factory(t) { return new (t || AdaptSwitcherComponent)(i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.AdaptTranslateService), i0.ɵɵdirectiveInject(i2.AdaptRadarService)); };
AdaptSwitcherComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptSwitcherComponent, selectors: [["adapt-switcher"], ["div", "adapt-switcher", ""]], hostVars: 6, hostBindings: function AdaptSwitcherComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassMap(ctx.hostClasses);
        i0.ɵɵclassProp("is-checked", ctx.context.checked)("is-disabled", ctx.context.disabled);
    } }, inputs: { labelPosition: "labelPosition", size: "size", hostClasses: "hostClasses", id: "id", name: "name", tabindex: "tabindex", label: "label", value: "value", ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaDescribedBy: "ariaDescribedBy" }, outputs: { focus: "focus", blur: "blur", change: "change" }, features: [i0.ɵɵProvidersFeature([
            createFormControlValueAccessor(AdaptSwitcherComponent),
            createFormControlValidator(AdaptSwitcherComponent),
        ]), i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 30, vars: 22, consts: [[3, "ngClass"], ["type", "checkbox", 3, "id", "disabled", "checked", "required", "tabIndex", "focus", "blur", "change", "click"], ["input", ""], [1, "switch__slider"], [1, "switch__item", "form-control-label", "font-weight-normal", 3, "ngClass"], [4, "ngIf"], ["class", "letter-space", 4, "ngIf"], ["class", "form-control-required", 4, "ngIf"], ["class", "icon-space", 4, "ngIf"], ["placement", "top", 3, "adaptRadarDisableEventSending", "ngClass", "name", "adaptTooltip", 4, "ngIf"], [3, "name", "adaptRadarDisableEventSending", "ngClass", "placement", "adaptPopover", "triggers", 4, "ngIf"], [1, "letter-space"], [1, "form-control-required"], [1, "icon-space"], ["placement", "top", 3, "adaptRadarDisableEventSending", "ngClass", "name", "adaptTooltip"], [3, "name", "adaptRadarDisableEventSending", "ngClass", "placement", "adaptPopover", "triggers"]], template: function AdaptSwitcherComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef(_c0);
        i0.ɵɵprojection(0);
        i0.ɵɵtext(1, "\n\n");
        i0.ɵɵelementStart(2, "div", 0);
        i0.ɵɵtext(3, "\n  ");
        i0.ɵɵelementStart(4, "label");
        i0.ɵɵtext(5, "\n    ");
        i0.ɵɵelementStart(6, "input", 1, 2);
        i0.ɵɵlistener("focus", function AdaptSwitcherComponent_Template_input_focus_6_listener() { return ctx.context.onFocus(); })("blur", function AdaptSwitcherComponent_Template_input_blur_6_listener() { return ctx.context.onBlur(); })("change", function AdaptSwitcherComponent_Template_input_change_6_listener($event) { return ctx.context.onInteractionEvent($event); })("click", function AdaptSwitcherComponent_Template_input_click_6_listener($event) { return ctx.context.onInputClick($event); });
        i0.ɵɵelementEnd();
        i0.ɵɵtext(8, "\n    ");
        i0.ɵɵelement(9, "span", 3);
        i0.ɵɵtext(10, "\n\n    ");
        i0.ɵɵelementStart(11, "span", 4);
        i0.ɵɵtext(12, "\n      ");
        i0.ɵɵtemplate(13, AdaptSwitcherComponent_span_13_Template, 2, 1, "span", 5);
        i0.ɵɵtext(14, "\n      ");
        i0.ɵɵtemplate(15, AdaptSwitcherComponent_span_15_Template, 1, 0, "span", 6);
        i0.ɵɵtext(16, "\n      ");
        i0.ɵɵtemplate(17, AdaptSwitcherComponent_span_17_Template, 2, 1, "span", 7);
        i0.ɵɵtext(18, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(19, "\n\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(20, "\n  ");
        i0.ɵɵtemplate(21, AdaptSwitcherComponent_span_21_Template, 1, 0, "span", 8);
        i0.ɵɵtext(22, "\n  ");
        i0.ɵɵtemplate(23, AdaptSwitcherComponent_adapt_icon_23_Template, 1, 4, "adapt-icon", 9);
        i0.ɵɵtext(24, "\n\n  ");
        i0.ɵɵtemplate(25, AdaptSwitcherComponent_adapt_icon_25_Template, 1, 6, "adapt-icon", 10);
        i0.ɵɵtext(26, "\n\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(27, "\n\n");
        i0.ɵɵprojection(28, 1);
        i0.ɵɵtext(29, "\n");
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵclassProp("readonly", ctx.context.readonly);
        i0.ɵɵproperty("ngClass", ctx.size ? "switch switch-" + ctx.size : "switch");
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("id", ctx.context.inputId)("disabled", ctx.context.disabled)("checked", ctx.context.checked)("required", ctx.context.required)("tabIndex", ctx.context.tabindex);
        i0.ɵɵattribute("value", ctx.context.value)("name", ctx.context.name)("aria-label", ctx.context.ariaLabel || null)("aria-labelledby", ctx.context.ariaLabelledby)("aria-describedby", ctx.context.ariaDescribedBy || null)("aria-checked", ctx.context._getAriaChecked())("aria-required", ctx.context.required);
        i0.ɵɵadvance(5);
        i0.ɵɵproperty("ngClass", ctx.labelPosition === "after" ? "m-start-1-5" : "m-end-1-5");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.context.label);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.required);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.context.required);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", ctx.context.tooltipIconCls || ctx.context.popoverIcon);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.context.tooltipIconCls && !ctx.context.popoverIcon);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.context.popoverIcon);
    } }, directives: [i3.NgClass, i3.NgIf, i1.AdaptIconComponent, i1.AdaptTooltipDirective, i1.AdaptPopoverDirective], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptSwitcherComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-switcher, div[adapt-switcher]',
                providers: [
                    createFormControlValueAccessor(AdaptSwitcherComponent),
                    createFormControlValidator(AdaptSwitcherComponent),
                ],
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[class.is-checked]': 'context.checked',
                    '[class.is-disabled]': 'context.disabled'
                },
                templateUrl: './switcher.component.html',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: i0.Injector }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i1.AdaptTranslateService }, { type: i2.AdaptRadarService }]; }, { labelPosition: [{
            type: Input
        }], size: [{
            type: Input
        }], hostClasses: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['class']
        }], id: [{
            type: Input
        }], name: [{
            type: Input
        }], tabindex: [{
            type: Input
        }], label: [{
            type: Input
        }], value: [{
            type: Input
        }], ariaLabel: [{
            type: Input,
            args: ['aria-label']
        }], ariaLabelledby: [{
            type: Input,
            args: ['aria-labelledby']
        }], ariaDescribedBy: [{
            type: Input
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], change: [{
            type: Output
        }] }); })();
//# sourceMappingURL=switcher.component.js.map