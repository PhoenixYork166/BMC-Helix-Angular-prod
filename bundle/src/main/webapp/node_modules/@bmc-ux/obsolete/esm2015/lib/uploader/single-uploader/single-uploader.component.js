import { Component, ElementRef, EventEmitter, HostBinding, Injector, Input, Output, Renderer2, ViewChild } from '@angular/core';
import { AnimationBuilder } from '@angular/animations';
import { fromEvent, ReplaySubject } from 'rxjs';
import { Directionality } from '@angular/cdk/bidi';
import { FormControl } from '@angular/forms';
import { isNil, isUndefined, toArray } from 'lodash-es';
import { takeUntil } from 'rxjs/operators';
import { AdaptRadarAngularCustomEventName, AdaptTranslateService, ANIMATION_DND, ANIMATION_DROP, ANIMATION_INIT_STATE, createFormControlValidator, createFormControlValueAccessor, FileManager, FileSize, FormComponent, IconManager, INITIAL_CHUNK_NUMBER, MessageStatus, retrieveFileSize, UploaderMode, } from '@bmc-ux/adapt-angular';
import { AdaptRadarService } from '@bmc-ux/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "@bmc-ux/adapt-angular";
import * as i2 from "@angular/cdk/bidi";
import * as i3 from "@angular/animations";
import * as i4 from "@bmc-ux/adapt-radar";
import * as i5 from "@angular/common";
const _c0 = ["fileInput"];
const _c1 = ["dropEnter"];
const _c2 = ["dnd"];
const _c3 = ["drop"];
const _c4 = ["droppableAreaBlock"];
function AdaptSingleUploaderComponent_ng_template_15_ng_container_5_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n                ");
    i0.ɵɵelementStart(2, "div", 19);
    i0.ɵɵtext(3, "\n                  ");
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(4, "svg", 20);
    i0.ɵɵtext(5, "\n                ");
    i0.ɵɵelement(6, "path", 21);
    i0.ɵɵtext(7, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n                  ");
    i0.ɵɵelementStart(9, "svg", 22);
    i0.ɵɵtext(10, "\n                ");
    i0.ɵɵelement(11, "path", 23);
    i0.ɵɵtext(12, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(13, "\n                ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n                ");
    i0.ɵɵnamespaceHTML();
    i0.ɵɵelementStart(15, "span", 24);
    i0.ɵɵtext(16);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(17, "\n              ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r16 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(16);
    i0.ɵɵtextInterpolate(ctx_r16.texts.dragAndDrop);
} }
function AdaptSingleUploaderComponent_ng_template_15_ng_container_5_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n                ");
    i0.ɵɵelementStart(2, "div", 25);
    i0.ɵɵtext(3, "\n                  ");
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(4, "svg", 26);
    i0.ɵɵtext(5, "\n                        ");
    i0.ɵɵelement(6, "path", 27);
    i0.ɵɵtext(7, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n                ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n                ");
    i0.ɵɵnamespaceHTML();
    i0.ɵɵelementStart(10, "span", 28);
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n              ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r17 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(11);
    i0.ɵɵtextInterpolate(ctx_r17.texts.uploadFilesLimit);
} }
function AdaptSingleUploaderComponent_ng_template_15_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementStart(2, "div", 17, 18);
    i0.ɵɵtext(4, "\n              ");
    i0.ɵɵtemplate(5, AdaptSingleUploaderComponent_ng_template_15_ng_container_5_ng_container_5_Template, 18, 1, "ng-container", 9);
    i0.ɵɵtext(6, "\n\n              ");
    i0.ɵɵtemplate(7, AdaptSingleUploaderComponent_ng_template_15_ng_container_5_ng_container_7_Template, 13, 1, "ng-container", 9);
    i0.ɵɵtext(8, "\n\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n          ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", !ctx_r14.isUploadLimitExceed);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r14.isUploadLimitExceed);
} }
function AdaptSingleUploaderComponent_ng_template_15_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n        ");
    i0.ɵɵelementStart(1, "div", 15);
    i0.ɵɵtext(2, "\n          ");
    i0.ɵɵelementContainer(3, 16);
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵtemplate(5, AdaptSingleUploaderComponent_ng_template_15_ng_container_5_Template, 10, 2, "ng-container", 9);
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n      ");
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    const _r10 = i0.ɵɵreference(37);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", _r10);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r4.enableDnD);
} }
function AdaptSingleUploaderComponent_ng_container_18_adapt_uploader_item_2_Template(rf, ctx) { if (rf & 1) {
    const _r22 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-uploader-item", 30);
    i0.ɵɵlistener("afterFileRemove", function AdaptSingleUploaderComponent_ng_container_18_adapt_uploader_item_2_Template_adapt_uploader_item_afterFileRemove_0_listener($event) { i0.ɵɵrestoreView(_r22); const ctx_r21 = i0.ɵɵnextContext(2); return ctx_r21.removedFromQueue($event); })("fileDeleted", function AdaptSingleUploaderComponent_ng_container_18_adapt_uploader_item_2_Template_adapt_uploader_item_fileDeleted_0_listener($event) { i0.ɵɵrestoreView(_r22); const ctx_r23 = i0.ɵɵnextContext(2); return ctx_r23.fileDeleted($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r19 = ctx.$implicit;
    const id_r20 = ctx.index;
    const ctx_r18 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("disabled", ctx_r18.disabled)("readonly", ctx_r18.readonly)("url", ctx_r18.url)("deleteUrl", ctx_r18.deleteUrl)("chunkSize", ctx_r18.chunkSize)("customErrors", ctx_r18.customErrors)("file", file_r19)("id", id_r20)("texts", ctx_r18.texts)("componentAnimation", false);
} }
function AdaptSingleUploaderComponent_ng_container_18_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptSingleUploaderComponent_ng_container_18_adapt_uploader_item_2_Template, 1, 10, "adapt-uploader-item", 29);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r5.files);
} }
function AdaptSingleUploaderComponent_ng_container_20_ng_template_2_Template(rf, ctx) { }
function AdaptSingleUploaderComponent_ng_container_20_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptSingleUploaderComponent_ng_container_20_ng_template_2_Template, 0, 0, "ng-template", 16);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    const _r12 = i0.ɵɵreference(40);
    const _r3 = i0.ɵɵreference(16);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r6.readonly ? _r12 : _r3);
} }
function AdaptSingleUploaderComponent_adapt_alert_26_ng_template_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementStart(2, "div", 34);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r29 = i0.ɵɵreference(4);
    const ctx_r28 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptPopover", _r29)("adaptRadarDisableEventSending", true)("placement", "auto")("maxWidth", 600);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n              ", ctx_r28.texts.remainingFilesListLabel, "\n            ");
} }
function AdaptSingleUploaderComponent_adapt_alert_26_ng_template_2_ng_template_3_ng_template_1_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r35 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", ctx_r35.texts.comma, " ");
} }
function AdaptSingleUploaderComponent_adapt_alert_26_ng_template_2_ng_template_3_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n              ");
    i0.ɵɵelementStart(1, "span", 36);
    i0.ɵɵtext(2);
    i0.ɵɵtemplate(3, AdaptSingleUploaderComponent_adapt_alert_26_ng_template_2_ng_template_3_ng_template_1_span_3_Template, 2, 1, "span", 9);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n            ");
} if (rf & 2) {
    const file_r32 = ctx.$implicit;
    const last_r34 = ctx.last;
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(file_r32.name);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !last_r34);
} }
function AdaptSingleUploaderComponent_adapt_alert_26_ng_template_2_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n            ");
    i0.ɵɵtemplate(1, AdaptSingleUploaderComponent_adapt_alert_26_ng_template_2_ng_template_3_ng_template_1_Template, 5, 2, "ng-template", 35);
    i0.ɵɵtext(2, "\n          ");
} if (rf & 2) {
    const msg_r25 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", msg_r25.files);
} }
function AdaptSingleUploaderComponent_adapt_alert_26_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0);
    i0.ɵɵtemplate(1, AdaptSingleUploaderComponent_adapt_alert_26_ng_template_2_ng_container_1_Template, 5, 5, "ng-container", 9);
    i0.ɵɵtext(2, "\n\n          ");
    i0.ɵɵtemplate(3, AdaptSingleUploaderComponent_adapt_alert_26_ng_template_2_ng_template_3_Template, 3, 1, "ng-template", null, 33, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(5, "\n        ");
} if (rf & 2) {
    const msg_r25 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵtextInterpolate1("\n          ", msg_r25.text, "\n          ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", msg_r25.files && msg_r25.files.length);
} }
const _c5 = function (a0, a1, a3) { return { title: a0, content: a1, type: "inline", variant: a3, icon: false }; };
function AdaptSingleUploaderComponent_adapt_alert_26_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "adapt-alert", 31);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptSingleUploaderComponent_adapt_alert_26_ng_template_2_Template, 6, 2, "ng-template", null, 32, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const msg_r25 = ctx.$implicit;
    const _r26 = i0.ɵɵreference(3);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("config", i0.ɵɵpureFunction3(2, _c5, msg_r25.title ? msg_r25.title : "", _r26, msg_r25.variant));
} }
const _c6 = function (a0, a1) { return { title: a0, content: a1, type: "inline", variant: "danger", icon: false }; };
function AdaptSingleUploaderComponent_ng_container_28_adapt_alert_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-alert", 31);
} if (rf & 2) {
    const error_r39 = ctx.$implicit;
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("config", i0.ɵɵpureFunction2(2, _c6, error_r39.name, error_r39.text));
} }
function AdaptSingleUploaderComponent_ng_container_28_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptSingleUploaderComponent_ng_container_28_adapt_alert_2_Template, 1, 5, "adapt-alert", 11);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r8.context.errors);
} }
function AdaptSingleUploaderComponent_div_32_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 42);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "p", 40);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵelement(5, "span", 41);
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵelementStart(7, "p", 40);
    i0.ɵɵtext(8);
    i0.ɵɵpipe(9, "fileTypes");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r40 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r40.texts.allowedTypes);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(9, 2, ctx_r40.allowedTypes, ctx_r40.texts.fileTypesDivider));
} }
function AdaptSingleUploaderComponent_div_32_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 37);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptSingleUploaderComponent_div_32_div_2_Template, 11, 5, "div", 38);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementStart(4, "div", 39);
    i0.ɵɵtext(5, "\n        ");
    i0.ɵɵelementStart(6, "p", 40);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n        ");
    i0.ɵɵelement(9, "span", 41);
    i0.ɵɵtext(10, "\n        ");
    i0.ɵɵelementStart(11, "p", 40);
    i0.ɵɵtext(12);
    i0.ɵɵpipe(13, "fileSize");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r9 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r9.allowedTypes.length);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r9.texts.maxFileSize);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(13, 3, ctx_r9.maxFileSize));
} }
function AdaptSingleUploaderComponent_ng_template_36_span_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 24);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r42 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n            ", ctx_r42.texts.fileMode, "\n          ");
} }
const _c7 = function (a0, a1, a2, a3) { return { leftStart: a0, rightStart: a1, leftEnd: a2, rightEnd: a3 }; };
const _c8 = function (a0) { return { params: a0 }; };
function AdaptSingleUploaderComponent_ng_template_36_Template(rf, ctx) { if (rf & 1) {
    const _r44 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "div", 43, 44);
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementStart(4, "button", 45);
    i0.ɵɵlistener("click", function AdaptSingleUploaderComponent_ng_template_36_Template_button_click_4_listener() { i0.ɵɵrestoreView(_r44); const ctx_r43 = i0.ɵɵnextContext(); return ctx_r43.openFileDialog(); });
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵelement(6, "span", 46);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n\n    ");
    i0.ɵɵtemplate(9, AdaptSingleUploaderComponent_ng_template_36_span_9_Template, 2, 1, "span", 47);
    i0.ɵɵtext(10, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n");
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("@uploaderInitStateAnim", i0.ɵɵpureFunction1(11, _c8, i0.ɵɵpureFunction4(6, _c7, ctx_r11.isRtl ? "auto" : "15%", ctx_r11.isRtl ? "15%" : "auto", ctx_r11.isRtl ? "auto" : "0px", ctx_r11.isRtl ? "0px" : "auto")));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("disabled", ctx_r11.disabled);
    i0.ɵɵattribute("aria-label", ctx_r11.texts.fileBtn);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("\n      ", ctx_r11.texts.fileBtn, "\n    ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r11.enableDnD);
} }
function AdaptSingleUploaderComponent_ng_template_39_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "adapt-empty-state", 48);
    i0.ɵɵtext(2, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n");
} if (rf & 2) {
    const ctx_r13 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("type", "objects")("adaptRadarDisableEventSending", true)("label", ctx_r13.texts.notFound);
} }
let count = 0;
export class AdaptSingleUploaderComponent extends FormComponent {
    constructor(fileManager, iconManager, _renderer, _elRef, _dir, _animationBuilder, _injector, ts, _adaptRadarService) {
        super(_injector, ts, _adaptRadarService, _elRef, AdaptRadarAngularCustomEventName.AdaptSingleUploader);
        this.fileManager = fileManager;
        this.iconManager = iconManager;
        this._renderer = _renderer;
        this._elRef = _elRef;
        this._dir = _dir;
        this._animationBuilder = _animationBuilder;
        this._injector = _injector;
        this._adaptRadarService = _adaptRadarService;
        /* text configurations */
        this.uploaderTextsDefault = {
            fileStatus: {}
        };
        /**
         * Label icon with a tooltip or popover
         */
        this.tooltipConfig = null;
        /**
         * Unique id of the element.
         */
        this.id = `adapt-single-uploader-${count}`;
        this.mode = UploaderMode.Manual;
        this.enableDnD = true;
        this.allowedTypes = [];
        this.forbiddenTypes = [];
        this.icons = {};
        this.allowDeletion = true;
        this.customErrors = false;
        this.allowDrop = false;
        /* uploader outputs */
        this.beforeFileDialogOpen = new EventEmitter();
        this.afterFileDialogOpen = new EventEmitter();
        this.beforeFileAdded = new EventEmitter();
        this.afterFileAdded = new EventEmitter();
        this.startFileUploading = new EventEmitter();
        this.endFileUploading = new EventEmitter();
        this.errorFileUploading = new EventEmitter();
        this.finishedFileUploading = new EventEmitter();
        this.removedFileFromQueue = new EventEmitter();
        this.deletedFile = new EventEmitter();
        this.cancelUploading = new EventEmitter();
        /**
         * Event on ngModel change
         */
        this.valueChange = new EventEmitter();
        // TODO: Refactor this if possible
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any, @angular-eslint/no-output-native */
        this.focus = new EventEmitter();
        // TODO: Refactor this if possible
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any, @angular-eslint/no-output-native */
        this.blur = new EventEmitter();
        // Need for using inherited properties in the template
        this.context = this;
        this.statusMessages = [];
        this.allowDuplicates = false;
        this.filesCount = 1;
        this.suppressParallel = false;
        this.isDragOverMask = false;
        this.isRtl = false;
        this.isUploadLimitExceed = false;
        // we'll get a drop enter for the child and then a drop leave for the target!
        this._droppable = 0;
        this._animationPlayers = {
            visibleDnd: null,
            hiddenDnd: null,
            visibleDrop: null,
            hiddenDrop: null
        };
        this._isTouched = false;
        this._chunkSize = FileSize.MB;
        this._destroyed$ = new ReplaySubject(1);
        this._maxFileSize = FileSize.MB * 20;
        this._onTouchedCallback = () => {
            return;
        };
        this.isRtl = this._dir.value === 'rtl';
        count++;
        this.setDefaultTexts(ts.getCurrentLanguage());
    }
    get chunkSize() {
        return isNil(this._chunkSize) ? this._chunkSize : this._chunkSize.toString();
    }
    set chunkSize(value) {
        this._chunkSize = isNil(value) ? value : retrieveFileSize(value);
    }
    get maxFileSize() {
        return this._maxFileSize.toString();
    }
    set maxFileSize(value) {
        this._maxFileSize = retrieveFileSize(value);
    }
    get files() {
        return this.fileManager.getFiles();
    }
    get hostClasses() {
        return [
            this.mainCls,
            'adapt-single-uploader',
            this.enableDnD ? '' : 'is-no-dnd',
            this.isErrorExist ? 'has-danger' : '',
            this.isWarningExist ? 'has-warning' : '',
            this.disabled ? 'disabled' : '',
            this.suppressIcons ? 'prevent-success-icon' : ''
        ].join(' ');
    }
    get isErrorExist() {
        return this.required && !this.files.length && (this.customFormControl ? this.control.touched : this._isTouched);
    }
    get isWarningExist() {
        return !!this.statusMessages.length && this.statusMessages.some(message => message.variant === MessageStatus.Warning);
    }
    set value(v) {
        this._value = v;
    }
    get value() {
        return this._value;
    }
    ngOnInit() {
        // Sending radar event directly to avoid issues with the premature invocation of "initControl" in parent ngOnInit()
        // ERROR NullInjectorError: R3InjectorError(AppModule)[NgControl -> NgControl -> NgControl]:
        // So do not call super.ngOnInit() here
        // TODO ?
        this._adaptRadarService.sendGenericComponentEvent(AdaptRadarAngularCustomEventName.AdaptSingleUploader);
        if (this.customFormControl) {
            this.initControl();
        }
        this.texts = Object.assign(Object.assign({}, this.uploaderTextsDefault), this.texts);
        this.initFileErrors();
        this._customErrorTexts = Object.assign({ required: {
                name: '',
                text: this.texts.required
            } }, this._customErrorTexts);
        this.iconManager.init(this.icons);
        this.fileManager.messagesSubject
            .pipe(takeUntil(this._destroyed$))
            .subscribe((msg) => {
            this.statusMessages.push(msg);
        });
        this.fileManager.uploadingStartSubject.pipe(takeUntil(this._destroyed$)).subscribe(({ file }) => {
            const fileEvent = Object.assign(Object.assign({}, file), { 
                // Perhaps always id === 1, because it is the first chunk or file,
                // but just in case this algorithm
                id: this.fileManager.getFileRequestId(this.fileManager.getChunkStart(INITIAL_CHUNK_NUMBER, this._chunkSize), this._chunkSize) });
            this.startFileUploading.emit(fileEvent);
        });
        this.fileManager.uploadedSubject.pipe(takeUntil(this._destroyed$)).subscribe((file) => {
            this.endFileUploading.emit(file);
        });
        this.fileManager.canceledSubject.pipe(takeUntil(this._destroyed$)).subscribe((files) => {
            this.cancelUploading.emit(files);
        });
        this.fileManager.errorUploadingSubject.pipe(takeUntil(this._destroyed$))
            .subscribe((data) => {
            this.errorFileUploading.emit(data);
        });
        this.fileManager.uploadingFinishedSubject.pipe(takeUntil(this._destroyed$)).subscribe((files) => {
            this.finishedFileUploading.emit(files);
        });
        this._updateStorageWithUploadedFile();
        for (const prop in this._customErrorTexts) {
            if (prop) {
                this.overrideBuildInValidatorMessage(prop, () => this._customErrorTexts[prop]);
            }
        }
        if (this.tooltipIconCls && !this.popoverIcon) {
            this.tooltipConfig = {
                iconName: this.tooltipIconCls,
                content: this.tooltipText,
                placement: 'top',
                popoverMode: false
            };
        }
        else if (this.popoverIcon) {
            this.tooltipConfig = {
                iconName: this.popoverIcon,
                content: this.popoverContent,
                placement: this.popoverPlacement,
                popoverMode: true,
                popoverTriggers: this.popoverTriggers
            };
        }
    }
    setDefaultTexts(translation) {
        this.uploaderTextsDefault.fileBtn = translation['adapt.uploaderSingle.attachFiles'];
        this.uploaderTextsDefault.allowedTypes = translation['adapt.uploader.allowedTypes'];
        this.uploaderTextsDefault.fileTypesDivider = translation['adapt.uploader.fileTypesDivider'];
        this.uploaderTextsDefault.maxFileSize = translation['adapt.uploader.maxFileSize'];
        this.uploaderTextsDefault.fileMode = translation['adapt.uploaderSingle.fileMode'];
        this.uploaderTextsDefault.dragAndDrop = translation['adapt.uploaderSingle.dragAndDrop'];
        this.uploaderTextsDefault.uploadFilesLimit = translation['adapt.uploaderSingle.uploadFilesLimit'];
        this.uploaderTextsDefault.required = translation['adapt.uploader.required'];
        this.uploaderTextsDefault.btnCancelUploading = translation['adapt.uploader.cancelUploading'];
        this.uploaderTextsDefault.btnRemoveFile = translation['adapt.uploader.removeFile'];
        this.uploaderTextsDefault.btnDeleteFile = translation['adapt.uploader.deleteFile'];
        this.uploaderTextsDefault.btnRemoveCanceled = translation['adapt.uploader.removeCanceled'];
        this.uploaderTextsDefault.btnDownloadFile = translation['adapt.uploader.downloadFile'];
        this.uploaderTextsDefault.fileStatus.canceled = translation['adapt.uploader.fileStatus.canceled'];
        this.uploaderTextsDefault.fileStatus.uploaded = translation['adapt.uploader.fileStatus.uploaded'];
        this.uploaderTextsDefault.fileStatus.uploading = translation['adapt.uploader.fileStatus.uploading'];
        this.uploaderTextsDefault.remainingFilesListLabel = translation['adapt.uploader.remainingFilesListLabel'];
        this.uploaderTextsDefault.notFound = translation['adapt.uploader.notFound'];
        this.uploaderTextsDefault.comma = translation['adapt.common.comma'];
    }
    writeValue(value) {
        if (value) {
            this.fileManager.updateFilesStorage([value]);
            this.clearWarningMessages();
        }
        else {
            this.fileManager.resetFilesStorage();
        }
        this._propagateChanges();
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    validate() {
        return null;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (!this.droppableArea) {
            this.droppableArea = this.droppableAreaBlock.nativeElement;
        }
        if (this.enableDnD) {
            this.addDragEvents();
        }
        fromEvent(this.fileInput.nativeElement, 'change')
            .pipe(takeUntil(this._destroyed$))
            .subscribe((e) => {
            this.onChangeFileInput(e);
            this._markComponentTouched();
            this._componentEmptyState();
        });
    }
    ngOnChanges(changes) {
        if (changes.texts && !isUndefined(changes.texts.previousValue)) {
            this.texts = Object.assign(Object.assign({}, this.uploaderTextsDefault), this.texts);
        }
        if (changes.fileErrors && !isUndefined(changes.fileErrors.previousValue)) {
            this.initFileErrors();
        }
    }
    onChangeFileInput(event) {
        let files = [];
        // since we call onChangeFileInput method on both
        // input.onchange and dragDrop
        // we should first check the event.type to
        // correctly handle the files derivation
        if (event.type === 'drop') {
            // event comes from the dragDrop operation
            files = toArray(event.dataTransfer.files);
        }
        if (event.type === 'change') {
            // event comes from input.onchange
            files = toArray(event.target.files);
        }
        if (files.length) {
            this.addFiles(files);
        }
        if (this.files.length) {
            this._renderer.addClass(this._elRef.nativeElement, 'dropped');
        }
    }
    initFileErrors() {
        if (this.fileErrors) {
            this.fileManager.fileErrors = Object.assign(Object.assign({}, this.fileManager.fileErrors), this.fileErrors);
            Object.keys(this.fileManager.fileErrors).forEach((key) => this.fileManager.messages[key] = {
                errorMessage: '',
                files: []
            });
        }
    }
    addDragEvents() {
        this._onDragEnter = this.ondragEnter.bind(this);
        this.droppableArea.addEventListener('dragenter', this._onDragEnter);
        this._onDragOver = this.ondragOver.bind(this);
        this.droppableArea.addEventListener('dragover', this._onDragOver);
        this._onDragLeave = this.ondragLeave.bind(this);
        this.droppableArea.addEventListener('dragleave', this._onDragLeave);
        this._onDragDrop = this.ondragDrop.bind(this);
        this.droppableArea.addEventListener('drop', this._onDragDrop);
        document.addEventListener('dragover', this._preventDefault);
        document.addEventListener('drop', this._preventDefault);
    }
    removedFromQueue(file) {
        this._renderer.removeClass(this._elRef.nativeElement, 'dropped');
        if (!file.canceled) {
            this.removedFileFromQueue.emit(file);
        }
        this._markComponentTouched();
        this._propagateChanges();
        this._componentEmptyState();
    }
    fileDeleted(file) {
        this._renderer.removeClass(this._elRef.nativeElement, 'dropped');
        this.deletedFile.emit(file);
        this._markComponentTouched();
        this._propagateChanges();
        this._componentEmptyState();
    }
    ondragEnter(e) {
        e.preventDefault();
        e.stopPropagation();
        if (this.disabled || this.readonly || this._droppable || !this.dataHasFiles(e) || this.files.length) {
            return;
        }
        this.isDragOverMask = true;
        // check if the upload files limit exceeded
        // event.dataTransfer.items is not available in Internet Explorer and Safari
        // Mime types or number of dragged files can therefore not be determined in drag events, only on drop
        // so we explicitly set the value to 0
        const dndFilesCount = e.dataTransfer.items ? e.dataTransfer.items.length : 0;
        this.isUploadLimitExceed = dndFilesCount > this.filesCount;
        this._renderer.addClass(this.droppableArea, 'adapt-drop-wrp');
        this._renderer.addClass(this.dropEnter.nativeElement, 'pointer-events');
        this._droppable++;
        this._createAnimationPlayers();
        this._animateDndChange();
    }
    ondragOver(e) {
        e.preventDefault();
        e.stopPropagation();
        if (this.disabled || this.readonly || this.isUploadLimitExceed) {
            e.dataTransfer.dropEffect = 'none';
        }
    }
    ondragLeave(e) {
        e.preventDefault();
        e.stopPropagation();
        if (e.target !== this.droppableArea) {
            return;
        }
        this._droppable--;
        if (!this._droppable) {
            this.isDragOverMask = false;
            this._animateDndChange();
            this._renderer.removeClass(this.dropEnter.nativeElement, 'pointer-events');
            this._renderer.removeClass(this.droppableArea, 'adapt-drop-wrp');
            this._markComponentTouched();
            this._componentEmptyState();
        }
    }
    ondragDrop(e) {
        e.preventDefault();
        e.stopPropagation();
        this.clearWarningMessages();
        if (isUndefined(this.fileInput.nativeElement.webkitdirectory)) {
            const files = toArray(e.dataTransfer.files);
            if (files.length) {
                this.addFiles(files);
            }
            if (this.files.length) {
                this._renderer.addClass(this._elRef.nativeElement, 'dropped');
            }
        }
        else {
            const items = toArray(e.dataTransfer.items);
            const isDirectoryDropped = items.some((item) => {
                const itemEntry = item.webkitGetAsEntry();
                return itemEntry.isDirectory;
            });
            if (isDirectoryDropped) {
                // check if folderSuppress error is already added to the statusMessages array
                const messageIndex = this.statusMessages
                    .map(message => message.text)
                    .indexOf(this.fileManager.fileErrors.folderSuppress);
                if (messageIndex === -1) {
                    this.statusMessages.push({ text: this.fileManager.fileErrors.folderSuppress, variant: MessageStatus.Warning });
                }
            }
            else {
                this.onChangeFileInput(e);
            }
        }
        this._markComponentTouched();
        this._componentEmptyState();
        this.isDragOverMask = false;
        this._droppable = 0;
        this._renderer.removeClass(this.droppableArea, 'adapt-drop-wrp');
        this._renderer.removeClass(this.dropEnter.nativeElement, 'pointer-events');
        this._animateDndChange();
    }
    /**
     * Opens file dialog window for file selection, fires appropriate events
     */
    openFileDialog() {
        this.beforeFileDialogOpen.emit(null);
        this.fileInput.nativeElement.click();
        this.afterFileDialogOpen.emit(null);
    }
    startUploading() {
        if (this.readonly || this.disabled) {
            return;
        }
        this._markComponentTouched();
        if (this.isErrorExist) {
            if (!this.customFormControl) {
                // check if required error is already added to the statusMessages array
                const messageIndex = this.statusMessages
                    .map(message => message.text)
                    .indexOf(this.texts.required);
                if (messageIndex === -1) {
                    this.statusMessages.push({ text: this.texts.required, variant: MessageStatus.Danger });
                }
            }
            return;
        }
        const uploadInputs = {
            chunkSize: this._chunkSize,
            uploadUrl: this.url,
            customErrors: this.customErrors
        };
        this.fileManager.startUploading(uploadInputs);
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        if (!this.disabled && this.enableDnD) {
            this.isDragOverMask = false;
            this.droppableArea.removeEventListener('dragenter', this._onDragEnter);
            this.droppableArea.removeEventListener('dragover', this._onDragOver);
            this.droppableArea.removeEventListener('dragleave', this._onDragLeave);
            this.droppableArea.removeEventListener('drop', this._onDragDrop);
            document.removeEventListener('dragover', this._preventDefault);
            document.removeEventListener('drop', this._preventDefault);
        }
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
    clearWarningMessages() {
        this.statusMessages = [];
    }
    /**
     * Adds files to uploader service
     */
    addFiles(files) {
        if (this.files.length) {
            return;
        }
        this.clearWarningMessages();
        this.beforeFileAdded.emit(files);
        this.fileManager.addFiles(files, this.allowDeletion, this.mode, this.suppressParallel, this.allowDuplicates, this._maxFileSize, this._chunkSize, this.allowedTypes, this.forbiddenTypes, this.filesCount, this.customErrors, this.url);
        this.afterFileAdded.emit(files);
        this._propagateChanges();
        // uncomment selection - we need to clear input element, so input change event would fire
        // for the IE we have validation for the files array length
        this.fileInput.nativeElement.value = '';
    }
    _updateStorageWithUploadedFile() {
        if (this.showFile) {
            this.fileManager.updateFilesStorage([this.showFile]);
            this._renderer.addClass(this._elRef.nativeElement, 'dropped');
        }
    }
    dataHasFiles(e) {
        const types = Array.prototype.slice.call(e.dataTransfer.types);
        return types.indexOf('Files') !== -1;
    }
    _preventDefault(e) {
        e.preventDefault();
        e.stopPropagation();
    }
    _animateDndChange() {
        this._animationPlayers.hiddenDnd.reset();
        this._animationPlayers.visibleDnd.reset();
        this._animationPlayers.hiddenDrop.reset();
        this._animationPlayers.visibleDrop.reset();
        const currentPlayerDnd = this.isDragOverMask ? this._animationPlayers.hiddenDnd : this._animationPlayers.visibleDnd;
        const currentPlayerDrop = this.isDragOverMask ? this._animationPlayers.visibleDrop : this._animationPlayers.hiddenDrop;
        currentPlayerDnd.play();
        currentPlayerDrop.play();
        currentPlayerDnd.onDone(() => {
            if (!this._droppable) {
                this.isUploadLimitExceed = false;
            }
        });
    }
    _createAnimationPlayers() {
        const players = Object.keys(this._animationPlayers);
        players.forEach((player) => {
            if (this._animationPlayers[player]) {
                this._animationPlayers[player].destroy();
            }
        });
        this._animationPlayers.hiddenDnd = this._animationBuilder.build(ANIMATION_DND.hidden[this._dir.value])
            .create(this.dnd.nativeElement);
        this._animationPlayers.visibleDnd = this._animationBuilder.build(ANIMATION_DND.visible[this._dir.value])
            .create(this.dnd.nativeElement);
        this._animationPlayers.hiddenDrop = this._animationBuilder.build(ANIMATION_DROP.hidden[this._dir.value])
            .create(this.drop.nativeElement);
        this._animationPlayers.visibleDrop = this._animationBuilder.build(ANIMATION_DROP.visible[this._dir.value])
            .create(this.drop.nativeElement);
    }
    _componentEmptyState() {
        if (this.files.length) {
            return;
        }
        if (this.isErrorExist && !this.customFormControl) {
            // check if required error is already added to the statusMessages array
            const messageIndex = this.statusMessages
                .map(message => message.text)
                .indexOf(this.texts.required);
            if (messageIndex === -1) {
                this.statusMessages.push({ text: this.texts.required, variant: MessageStatus.Danger });
            }
        }
    }
    _markComponentTouched() {
        this._isTouched = true;
        this._onTouchedCallback();
    }
    _propagateChanges() {
        this.propagateChange(this.files);
        this.valueChange.emit(this.files);
    }
}
AdaptSingleUploaderComponent.ɵfac = function AdaptSingleUploaderComponent_Factory(t) { return new (t || AdaptSingleUploaderComponent)(i0.ɵɵdirectiveInject(i1.FileManager), i0.ɵɵdirectiveInject(i1.IconManager), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.Directionality), i0.ɵɵdirectiveInject(i3.AnimationBuilder), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.AdaptTranslateService), i0.ɵɵdirectiveInject(i4.AdaptRadarService)); };
AdaptSingleUploaderComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptSingleUploaderComponent, selectors: [["adapt-single-uploader"]], viewQuery: function AdaptSingleUploaderComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
        i0.ɵɵviewQuery(_c1, 5);
        i0.ɵɵviewQuery(_c2, 5);
        i0.ɵɵviewQuery(_c3, 5);
        i0.ɵɵviewQuery(_c4, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropEnter = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dnd = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.drop = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.droppableAreaBlock = _t.first);
    } }, hostVars: 3, hostBindings: function AdaptSingleUploaderComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵhostProperty("id", ctx.id);
        i0.ɵɵclassMap(ctx.hostClasses);
    } }, inputs: { id: "id", mode: "mode", enableDnD: "enableDnD", allowedTypes: "allowedTypes", forbiddenTypes: "forbiddenTypes", label: "label", url: "url", deleteUrl: "deleteUrl", icons: "icons", allowDeletion: "allowDeletion", texts: "texts", showFile: "showFile", fileErrors: "fileErrors", customErrors: "customErrors", droppableArea: "droppableArea", allowDrop: "allowDrop", name: "name", customFormControl: "customFormControl", chunkSize: "chunkSize", maxFileSize: "maxFileSize" }, outputs: { beforeFileDialogOpen: "beforeFileDialogOpen", afterFileDialogOpen: "afterFileDialogOpen", beforeFileAdded: "beforeFileAdded", afterFileAdded: "afterFileAdded", startFileUploading: "startFileUploading", endFileUploading: "endFileUploading", errorFileUploading: "errorFileUploading", finishedFileUploading: "finishedFileUploading", removedFileFromQueue: "removedFileFromQueue", deletedFile: "deletedFile", cancelUploading: "cancelUploading", valueChange: "valueChange", focus: "focus", blur: "blur" }, features: [i0.ɵɵProvidersFeature([
            createFormControlValueAccessor(AdaptSingleUploaderComponent),
            createFormControlValidator(AdaptSingleUploaderComponent),
            FileManager,
            IconManager
        ]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 42, vars: 10, consts: [["type", "file", "hidden", ""], ["fileInput", ""], [1, "adapt-single-uploader__wrp"], ["droppableAreaBlock", ""], [1, "adapt-single-uploader__content"], ["dropEnter", ""], [3, "label", "requiredLabel", "showRequiredLabel", "tooltip"], [1, "adapt-single-uploader-inner"], ["data", ""], [4, "ngIf"], [1, "adapt-single-uploader__warning-text", "mt-1"], ["class", "adapt-uploader-messages", 3, "adaptRadarDisableEventSending", "config", 4, "ngFor", "ngForOf"], ["class", "adapt-uploader-restrict", 4, "ngIf"], ["dragAndDrop", ""], ["readonlyEmpty", ""], [1, "adapt-single-uploader-dnd-animation"], [3, "ngTemplateOutlet"], [1, "adapt-uploader-drop"], ["drop", ""], [1, "adapt-uploader-drop__icon"], ["aria-hidden", "true", "xmlns", "http://www.w3.org/2000/svg", "width", "45", "height", "32", "viewBox", "0 0 72 48", 0, "xml", "space", "preserve", 1, "clound-icon", 2, "enable-background", "new 0 0 72 48"], ["fill", "#D9D9D9", "d", "M72,36c0,6.63-5.37,12-12,12H12C5.37,48,0,42.63,0,36c0-5.98,4.39-10.9,10.12-11.81C9.41,22.26,9,20.18,9,18  C9,8.06,17.06,0,27,0c6.01,0,11.32,2.96,14.59,7.49C43.54,6.56,45.7,6,48,6c8.28,0,15,6.72,15,15c0,1.14-0.15,2.24-0.39,3.3  C67.98,25.5,72,30.27,72,36z", 1, "st0"], ["aria-hidden", "true", "xmlns", "http://www.w3.org/2000/svg", "width", "45", "height", "32", "viewBox", "0 0 72 48", 0, "xml", "space", "preserve", 1, "arrow-icon", 2, "enable-background", "new 0 0 72 48"], ["fill", "#FBFBFB", "d", "M33,48V36H21l15-18l15,18H39v12H33z", 1, "st0"], [1, "adapt-uploader-dnd-text", "m-start-2"], [1, "adapt-uploader-drop__icon", "adapt-uploader-drop__icon-forbidden"], ["aria-hidden", "true", "xmlns", "http://www.w3.org/2000/svg", "width", "45", "height", "32", "viewBox", "0 0 64 44", 0, "xml", "space", "preserve", 1, "clound-icon__forbidden", 2, "enable-background", "new 0 0 64 44"], ["fill", "#FA7A59", "d", "M54.91,21.93c0.21-0.9,0.34-1.86,0.34-2.84c0-7.13-5.79-12.92-12.92-12.92c-1.99,0-3.85,0.49-5.53,1.29\nC33.99,3.56,29.42,1,24.25,1C15.7,1,8.75,7.95,8.75,16.5c0,1.89,0.36,3.67,0.96,5.32C4.77,22.62,1,26.86,1,32\n\tc0,5.71,4.62,10.33,10.33,10.33h41.33C58.38,42.33,63,37.71,63,32C63,27.07,59.54,22.96,54.91,21.93z M41.14,33.4\n\tc-4.75,4.73-12.22,5.01-17.31,0.85c-0.34-0.26-0.67-0.54-0.98-0.85c-0.31-0.31-0.59-0.65-0.85-0.98\n\tc-4.16-5.09-3.88-12.55,0.85-17.31c4.75-4.73,12.22-5.01,17.31-0.85c0.34,0.26,0.67,0.54,0.98,0.85s0.59,0.65,0.85,0.98\n\tC46.16,21.18,45.87,28.64,41.14,33.4z M25.67,32.41c4.06,3.15,9.92,2.87,13.64-0.85c3.72-3.72,4-9.58,0.85-13.64L25.67,32.41z\n\t M24.69,16.94c-3.72,3.72-4,9.58-0.85,13.64l14.49-14.49C34.27,12.94,28.41,13.22,24.69,16.94z"], [1, "adapt-uploader-dnd-text", "adapt-uploader-dnd-text-forbidden", "m-start-2"], [3, "disabled", "readonly", "url", "deleteUrl", "chunkSize", "customErrors", "file", "id", "texts", "componentAnimation", "afterFileRemove", "fileDeleted", 4, "ngFor", "ngForOf"], [3, "disabled", "readonly", "url", "deleteUrl", "chunkSize", "customErrors", "file", "id", "texts", "componentAnimation", "afterFileRemove", "fileDeleted"], [1, "adapt-uploader-messages", 3, "adaptRadarDisableEventSending", "config"], ["errorMessageTemplate", ""], ["remainingFileListTemplate", ""], [1, "remaining-files-list", 3, "adaptPopover", "adaptRadarDisableEventSending", "placement", "maxWidth"], ["ngFor", "", 3, "ngForOf"], [1, "file-name"], [1, "adapt-uploader-restrict"], ["class", "adapt-uploader-restrict-types", 4, "ngIf"], [1, "adapt-uploader-restrict-size"], [1, "d-inline-block", "mb-0"], [1, "letter-space"], [1, "adapt-uploader-restrict-types"], [1, "adapt-uploader-dnd"], ["dnd", ""], ["type", "button", "adapt-button", "", "btn-type", "secondary", 1, "adapt-uploader-attach-btn", 3, "adaptRadarDisableEventSending", "disabled", "click"], [1, "btn-icon", "d-icon-file_o"], ["class", "adapt-uploader-dnd-text m-start-2", 4, "ngIf"], [3, "type", "adaptRadarDisableEventSending", "label"]], template: function AdaptSingleUploaderComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelement(0, "input", 0, 1);
        i0.ɵɵtext(2, "\n\n");
        i0.ɵɵelementStart(3, "div", 2, 3);
        i0.ɵɵtext(5, "\n  ");
        i0.ɵɵelementStart(6, "div", 4, 5);
        i0.ɵɵtext(8, "\n\n    ");
        i0.ɵɵtext(9, "\n    ");
        i0.ɵɵelement(10, "adapt-rx-control-label", 6);
        i0.ɵɵtext(11, "\n    ");
        i0.ɵɵtext(12, "\n\n    ");
        i0.ɵɵelementStart(13, "div", 7);
        i0.ɵɵtext(14, "\n\n      ");
        i0.ɵɵtemplate(15, AdaptSingleUploaderComponent_ng_template_15_Template, 8, 2, "ng-template", null, 8, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(17, "\n\n      ");
        i0.ɵɵtemplate(18, AdaptSingleUploaderComponent_ng_container_18_Template, 4, 1, "ng-container", 9);
        i0.ɵɵtext(19, "\n\n      ");
        i0.ɵɵtemplate(20, AdaptSingleUploaderComponent_ng_container_20_Template, 4, 1, "ng-container", 9);
        i0.ɵɵtext(21, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(22, "\n\n    ");
        i0.ɵɵelementStart(23, "div", 10);
        i0.ɵɵtext(24, "\n      ");
        i0.ɵɵtext(25, "\n      ");
        i0.ɵɵtemplate(26, AdaptSingleUploaderComponent_adapt_alert_26_Template, 5, 6, "adapt-alert", 11);
        i0.ɵɵtext(27, "\n\n      ");
        i0.ɵɵtemplate(28, AdaptSingleUploaderComponent_ng_container_28_Template, 4, 1, "ng-container", 9);
        i0.ɵɵtext(29, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(30, "\n\n    ");
        i0.ɵɵtext(31, "\n    ");
        i0.ɵɵtemplate(32, AdaptSingleUploaderComponent_div_32_Template, 16, 5, "div", 12);
        i0.ɵɵtext(33, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(34, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(35, "\n\n");
        i0.ɵɵtemplate(36, AdaptSingleUploaderComponent_ng_template_36_Template, 12, 13, "ng-template", null, 13, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(38, "\n\n");
        i0.ɵɵtemplate(39, AdaptSingleUploaderComponent_ng_template_39_Template, 4, 3, "ng-template", null, 14, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(41, "\n\n\n");
    } if (rf & 2) {
        i0.ɵɵattribute("aria-label", "File Control");
        i0.ɵɵadvance(10);
        i0.ɵɵproperty("label", ctx.label)("requiredLabel", ctx.context.requiredLabel)("showRequiredLabel", ctx.context.required)("tooltip", ctx.tooltipConfig);
        i0.ɵɵadvance(8);
        i0.ɵɵproperty("ngIf", !!ctx.files.length);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx.files.length);
        i0.ɵɵadvance(6);
        i0.ɵɵproperty("ngForOf", ctx.statusMessages);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.customFormControl && ctx.context.errors && ctx.context.errors.length && ctx.context.control.touched);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", !ctx.readonly);
    } }, directives: [i1.AdaptRxControlLabelComponent, i5.NgIf, i5.NgForOf, i5.NgTemplateOutlet, i1.AdaptUploaderItemComponent, i1.AdaptAlertComponent, i1.AdaptPopoverDirective, i1.AdaptButtonComponent, i1.AdaptEmptyStateComponent], pipes: [i1.FileSizePipe, i1.FileTypesPipe], styles: ["adapt-uploader-item[_ngcontent-%COMP%] {\n      padding: 13px 0 !important;\n    }"], data: { animation: [ANIMATION_INIT_STATE] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptSingleUploaderComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-single-uploader',
                templateUrl: './single-uploader.component.html',
                animations: [ANIMATION_INIT_STATE],
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[id]': 'id'
                },
                styles: [`
    adapt-uploader-item {
      padding: 13px 0 !important;
    }
  `],
                providers: [
                    createFormControlValueAccessor(AdaptSingleUploaderComponent),
                    createFormControlValidator(AdaptSingleUploaderComponent),
                    FileManager,
                    IconManager
                ]
            }]
    }], function () { return [{ type: i1.FileManager }, { type: i1.IconManager }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i2.Directionality }, { type: i3.AnimationBuilder }, { type: i0.Injector }, { type: i1.AdaptTranslateService }, { type: i4.AdaptRadarService }]; }, { fileInput: [{
            type: ViewChild,
            args: ['fileInput']
        }], dropEnter: [{
            type: ViewChild,
            args: ['dropEnter']
        }], dnd: [{
            type: ViewChild,
            args: ['dnd']
        }], drop: [{
            type: ViewChild,
            args: ['drop']
        }], droppableAreaBlock: [{
            type: ViewChild,
            args: ['droppableAreaBlock']
        }], id: [{
            type: Input
        }], mode: [{
            type: Input
        }], enableDnD: [{
            type: Input
        }], allowedTypes: [{
            type: Input
        }], forbiddenTypes: [{
            type: Input
        }], label: [{
            type: Input
        }], url: [{
            type: Input
        }], deleteUrl: [{
            type: Input
        }], icons: [{
            type: Input
        }], allowDeletion: [{
            type: Input
        }], texts: [{
            type: Input
        }], showFile: [{
            type: Input
        }], fileErrors: [{
            type: Input
        }], customErrors: [{
            type: Input
        }], droppableArea: [{
            type: Input
        }], allowDrop: [{
            type: Input
        }], name: [{
            type: Input
        }], customFormControl: [{
            type: Input
        }], beforeFileDialogOpen: [{
            type: Output
        }], afterFileDialogOpen: [{
            type: Output
        }], beforeFileAdded: [{
            type: Output
        }], afterFileAdded: [{
            type: Output
        }], startFileUploading: [{
            type: Output
        }], endFileUploading: [{
            type: Output
        }], errorFileUploading: [{
            type: Output
        }], finishedFileUploading: [{
            type: Output
        }], removedFileFromQueue: [{
            type: Output
        }], deletedFile: [{
            type: Output
        }], cancelUploading: [{
            type: Output
        }], valueChange: [{
            type: Output
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], chunkSize: [{
            type: Input
        }], maxFileSize: [{
            type: Input
        }], hostClasses: [{
            type: HostBinding,
            args: ['class']
        }] }); })();
//# sourceMappingURL=single-uploader.component.js.map