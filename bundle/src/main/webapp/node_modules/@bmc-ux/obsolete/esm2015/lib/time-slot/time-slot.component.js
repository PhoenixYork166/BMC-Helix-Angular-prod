import { Component, ElementRef, EventEmitter, Input, NgZone, Output, QueryList, Renderer2, ViewChildren, ViewEncapsulation } from '@angular/core';
import { transition, trigger, useAnimation } from '@angular/animations';
import { take } from 'rxjs/operators';
import { AdaptRadarAngularCustomEventName, AdaptTranslateService, ANIMATION_DURATION, ANIMATION_NAME, toNumber, TooltipPlacement } from '@bmc-ux/adapt-angular';
import { AdaptRadarGenericDirective, AdaptRadarService } from '@bmc-ux/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "@bmc-ux/adapt-angular";
import * as i2 from "@bmc-ux/adapt-radar";
import * as i3 from "@angular/common";
const _c0 = ["button"];
function AdaptTimeSlotComponent_div_2_span_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 7);
} }
function AdaptTimeSlotComponent_div_2_adapt_icon_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 8);
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", ctx_r3.tooltipIcon)("adaptTooltip", ctx_r3.tooltipText);
} }
function AdaptTimeSlotComponent_div_2_adapt_icon_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 9);
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("name", ctx_r4.popoverIcon)("adaptRadarDisableEventSending", true)("placement", ctx_r4.popoverPlacement)("adaptPopover", ctx_r4.popoverContent)("triggers", ctx_r4.popoverTriggers);
} }
function AdaptTimeSlotComponent_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 3);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "span");
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n    ");
    i0.ɵɵtemplate(5, AdaptTimeSlotComponent_div_2_span_5_Template, 1, 0, "span", 4);
    i0.ɵɵtext(6, "\n    ");
    i0.ɵɵtemplate(7, AdaptTimeSlotComponent_div_2_adapt_icon_7_Template, 1, 3, "adapt-icon", 5);
    i0.ɵɵtext(8, "\n    ");
    i0.ɵɵtemplate(9, AdaptTimeSlotComponent_div_2_adapt_icon_9_Template, 1, 5, "adapt-icon", 6);
    i0.ɵɵtext(10, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r0.label);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.tooltipIcon || ctx_r0.popoverIcon);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.tooltipIcon && !ctx_r0.popoverIcon);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.popoverIcon);
} }
function AdaptTimeSlotComponent_div_4_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r10 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 12, 13);
    i0.ɵɵlistener("click", function AdaptTimeSlotComponent_div_4_button_2_Template_button_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r10); const i_r7 = restoredCtx.index; const ctx_r9 = i0.ɵɵnextContext(2); return ctx_r9.isSelected(i_r7); });
    i0.ɵɵtext(2);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const s_r6 = ctx.$implicit;
    const i_r7 = ctx.index;
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("active", ctx_r5.selectedSlot !== null && ctx_r5.selectedSlot === i_r7);
    i0.ɵɵproperty("@slotsAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1("\n      ", s_r6, "\n    ");
} }
function AdaptTimeSlotComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 10);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵtemplate(2, AdaptTimeSlotComponent_div_4_button_2_Template, 3, 4, "button", 11);
    i0.ɵɵtext(3, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r1.slot);
} }
export class AdaptTimeSlotComponent extends AdaptRadarGenericDirective {
    constructor(_renderer, ts, _ngZone, _adaptRadarService, _elem) {
        super(_adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptTimeSlot);
        this._renderer = _renderer;
        this.ts = ts;
        this._ngZone = _ngZone;
        this.popoverPlacement = 'top';
        this.popoverTriggers = 'click';
        // TODO: Refactor this if possible
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any, @angular-eslint/no-output-rename */
        this.selectedSlotChanged = new EventEmitter();
        // TODO: Refactor this if possible
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        this._slot = [];
        this._selectedSlot = null;
        const translation = ts.getCurrentLanguage();
        this._label = translation['adapt.timeSlot.available'];
    }
    get label() {
        return this._label;
    }
    set label(v) {
        this._label = v;
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    get slot() {
        return this._slot;
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    set slot(v) {
        this._slot = v;
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    get selectedSlot() {
        return this._selectedSlot;
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    set selectedSlot(slot) {
        this._selectedSlot = toNumber(slot);
    }
    isSelected(index) {
        if (this.selectedSlot === index) {
            this.selectedSlot = null;
            this.selectedSlotChanged.emit({ index: null, slot: null });
        }
        else {
            this.selectedSlot = index;
            this.selectedSlotChanged.emit({ index: this.selectedSlot, slot: this.slot[this.selectedSlot] });
        }
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this._setSlotMaxWidth();
    }
    ngOnChanges(changes) {
        if (changes.slot) {
            this._ngZone.onStable
                .pipe(take(1))
                .subscribe(() => {
                this._setSlotMaxWidth();
            });
        }
    }
    _setSlotMaxWidth() {
        const btn = this.button.toArray();
        if (btn) {
            const arr = btn.map(item => item.nativeElement.clientWidth);
            const max = Math.round(Math.max(...arr));
            btn.map(_ => this._renderer.setStyle(_.nativeElement, 'width', `${max}px`));
        }
    }
}
AdaptTimeSlotComponent.ɵfac = function AdaptTimeSlotComponent_Factory(t) { return new (t || AdaptTimeSlotComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.AdaptTranslateService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.AdaptRadarService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptTimeSlotComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptTimeSlotComponent, selectors: [["adapt-time-slot"]], viewQuery: function AdaptTimeSlotComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.button = _t);
    } }, inputs: { tooltipIcon: "tooltipIcon", tooltipText: "tooltipText", popoverIcon: "popoverIcon", popoverPlacement: "popoverPlacement", popoverTriggers: "popoverTriggers", popoverContent: "popoverContent", label: "label", slot: "slot", selectedSlot: "selectedSlot" }, outputs: { selectedSlotChanged: "selected-slot-changed" }, features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 7, vars: 2, consts: [[1, "a-slot"], ["class", "a-slot__label form-control-label", 4, "ngIf"], ["class", "a-slot__list", 4, "ngIf"], [1, "a-slot__label", "form-control-label"], ["class", "icon-space", 4, "ngIf"], ["placement", "top", 3, "adaptRadarDisableEventSending", "name", "adaptTooltip", 4, "ngIf"], [3, "name", "adaptRadarDisableEventSending", "placement", "adaptPopover", "triggers", 4, "ngIf"], [1, "icon-space"], ["placement", "top", 3, "adaptRadarDisableEventSending", "name", "adaptTooltip"], [3, "name", "adaptRadarDisableEventSending", "placement", "adaptPopover", "triggers"], [1, "a-slot__list"], ["type", "button", "role", "button", "tabindex", "0", "aria-disabled", "false", "class", "btn btn-secondary btn-sm", 3, "active", "click", 4, "ngFor", "ngForOf"], ["type", "button", "role", "button", "tabindex", "0", "aria-disabled", "false", 1, "btn", "btn-secondary", "btn-sm", 3, "click"], ["button", ""]], template: function AdaptTimeSlotComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵtext(1, "\n  ");
        i0.ɵɵtemplate(2, AdaptTimeSlotComponent_div_2_Template, 11, 4, "div", 1);
        i0.ɵɵtext(3, "\n\n  ");
        i0.ɵɵtemplate(4, AdaptTimeSlotComponent_div_4_Template, 4, 1, "div", 2);
        i0.ɵɵtext(5, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(6, "\n");
    } if (rf & 2) {
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.label !== "");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.slot && ctx.slot.length > 0);
    } }, directives: [i3.NgIf, i1.AdaptIconComponent, i1.AdaptTooltipDirective, i1.AdaptPopoverDirective, i3.NgForOf], encapsulation: 2, data: { animation: [
            trigger('slotsAnimation', [
                transition('void => *', [
                    useAnimation(ANIMATION_NAME.opacity, {
                        params: {
                            duration: ANIMATION_DURATION.medium
                        }
                    })
                ])
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptTimeSlotComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-time-slot',
                templateUrl: './time-slot.component.html',
                encapsulation: ViewEncapsulation.None,
                animations: [
                    trigger('slotsAnimation', [
                        transition('void => *', [
                            useAnimation(ANIMATION_NAME.opacity, {
                                params: {
                                    duration: ANIMATION_DURATION.medium
                                }
                            })
                        ])
                    ])
                ]
            }]
    }], function () { return [{ type: i0.Renderer2 }, { type: i1.AdaptTranslateService }, { type: i0.NgZone }, { type: i2.AdaptRadarService }, { type: i0.ElementRef }]; }, { tooltipIcon: [{
            type: Input
        }], tooltipText: [{
            type: Input
        }], popoverIcon: [{
            type: Input
        }], popoverPlacement: [{
            type: Input
        }], popoverTriggers: [{
            type: Input
        }], popoverContent: [{
            type: Input
        }], selectedSlotChanged: [{
            type: Output,
            args: ['selected-slot-changed']
        }], button: [{
            type: ViewChildren,
            args: ['button']
        }], label: [{
            type: Input
        }], slot: [{
            type: Input
        }], selectedSlot: [{
            type: Input
        }] }); })();
//# sourceMappingURL=time-slot.component.js.map