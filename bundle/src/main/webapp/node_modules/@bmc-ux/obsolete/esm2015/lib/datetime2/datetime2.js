/* eslint-disable @typescript-eslint/no-explicit-any */
import { Component, EventEmitter, forwardRef, Inject, Input, Optional, Output, Renderer2, ViewChild, ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { animate, AnimationBuilder, style, transition, trigger, useAnimation } from '@angular/animations';
import { Directionality } from '@angular/cdk/bidi';
import { DOWN_ARROW, UP_ARROW } from '@angular/cdk/keycodes';
import { distinctUntilChanged, map, take } from 'rxjs/operators';
import moment from 'moment-es6';
import { ANIMATION_NAME, GetDragNDrop, GetAngle, GetDistance, getEventKeyCode, AdaptTranslateService, SafeCdr } from '@bmc-ux/adapt-angular';
import { Calendar2, Calendar2Day, Clock2FaceUnit } from './datetime2.model';
import { AdaptDatetime2Component } from './datetime2.component';
import { AdaptDatetimeRange2Component } from './datetime-range2.component';
import { IsLocaleHasMeridiem } from '../common/datetime';
import * as i0 from "@angular/core";
import * as i1 from "@angular/animations";
import * as i2 from "@angular/cdk/bidi";
import * as i3 from "@bmc-ux/adapt-angular";
import * as i4 from "@angular/common";
import * as i5 from "./datetime-year-picker.component";
import * as i6 from "./datetime2.component";
import * as i7 from "./datetime-range2.component";
import * as i8 from "./datetime-month-picker.component";
const _c0 = ["daysTable"];
const _c1 = ["calendarContainerRef"];
function AdaptDatetime2CalendarComponent_div_1_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function AdaptDatetime2CalendarComponent_div_1_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainer(0);
} }
function AdaptDatetime2CalendarComponent_div_1_ng_template_6_adapt_icon_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 12);
} if (rf & 2) {
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", "angle_left");
} }
function AdaptDatetime2CalendarComponent_div_1_ng_template_6_adapt_icon_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 12);
} if (rf & 2) {
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", "angle_right");
} }
function AdaptDatetime2CalendarComponent_div_1_ng_template_6_adapt_icon_17_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 12);
} if (rf & 2) {
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", "angle_left");
} }
function AdaptDatetime2CalendarComponent_div_1_ng_template_6_adapt_icon_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 12);
} if (rf & 2) {
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", "angle_right");
} }
function AdaptDatetime2CalendarComponent_div_1_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    const _r14 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, "\n              ");
    i0.ɵɵelementStart(1, "div", 7);
    i0.ɵɵtext(2, "\n                  ");
    i0.ɵɵelementStart(3, "button", 8);
    i0.ɵɵlistener("click", function AdaptDatetime2CalendarComponent_div_1_ng_template_6_Template_button_click_3_listener($event) { i0.ɵɵrestoreView(_r14); const ctx_r13 = i0.ɵɵnextContext(2); $event.stopPropagation(); return ctx_r13.calendarUIActions.prevYear(); });
    i0.ɵɵtext(4, "\n                      ");
    i0.ɵɵtemplate(5, AdaptDatetime2CalendarComponent_div_1_ng_template_6_adapt_icon_5_Template, 1, 2, "adapt-icon", 9);
    i0.ɵɵtext(6, "\n                      ");
    i0.ɵɵtemplate(7, AdaptDatetime2CalendarComponent_div_1_ng_template_6_adapt_icon_7_Template, 1, 2, "adapt-icon", 9);
    i0.ɵɵtext(8, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n                  ");
    i0.ɵɵelementStart(10, "div", 10);
    i0.ɵɵlistener("keydown.arrowUp", function AdaptDatetime2CalendarComponent_div_1_ng_template_6_Template_div_keydown_arrowUp_10_listener($event) { i0.ɵɵrestoreView(_r14); const ctx_r15 = i0.ɵɵnextContext(2); $event.preventDefault(); return ctx_r15.calendarUIActions.nextYear(); })("keydown.arrowRight", function AdaptDatetime2CalendarComponent_div_1_ng_template_6_Template_div_keydown_arrowRight_10_listener($event) { i0.ɵɵrestoreView(_r14); const ctx_r16 = i0.ɵɵnextContext(2); $event.preventDefault(); return ctx_r16.calendarUIActions.nextYear(); })("keydown.arrowDown", function AdaptDatetime2CalendarComponent_div_1_ng_template_6_Template_div_keydown_arrowDown_10_listener($event) { i0.ɵɵrestoreView(_r14); const ctx_r17 = i0.ɵɵnextContext(2); $event.preventDefault(); return ctx_r17.calendarUIActions.prevYear(); })("keydown.arrowLeft", function AdaptDatetime2CalendarComponent_div_1_ng_template_6_Template_div_keydown_arrowLeft_10_listener($event) { i0.ɵɵrestoreView(_r14); const ctx_r18 = i0.ɵɵnextContext(2); $event.preventDefault(); return ctx_r18.calendarUIActions.prevYear(); });
    i0.ɵɵtext(11, "\n                      ");
    i0.ɵɵelement(12, "div", 11);
    i0.ɵɵtext(13, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n                  ");
    i0.ɵɵelementStart(15, "button", 8);
    i0.ɵɵlistener("click", function AdaptDatetime2CalendarComponent_div_1_ng_template_6_Template_button_click_15_listener($event) { i0.ɵɵrestoreView(_r14); const ctx_r19 = i0.ɵɵnextContext(2); $event.stopPropagation(); return ctx_r19.calendarUIActions.nextYear(); });
    i0.ɵɵtext(16, "\n                      ");
    i0.ɵɵtemplate(17, AdaptDatetime2CalendarComponent_div_1_ng_template_6_adapt_icon_17_Template, 1, 2, "adapt-icon", 9);
    i0.ɵɵtext(18, "\n                      ");
    i0.ɵɵtemplate(19, AdaptDatetime2CalendarComponent_div_1_ng_template_6_adapt_icon_19_Template, 1, 2, "adapt-icon", 9);
    i0.ɵɵtext(20, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(21, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(22, "\n          ");
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵclassProp("a3t-calendar--year-picker", ctx_r6.monthAndYearOnly);
    i0.ɵɵattribute("aria-label", ctx_r6.defaultTexts.emptyYear);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("disabled", ctx_r6.calendarUIState.disabled)("readonly", ctx_r6.calendarUIState.readonly);
    i0.ɵɵproperty("disabled", ctx_r6.calendarUIState.disabled);
    i0.ɵɵattribute("data-testid", ctx_r6.testID + "_prevYear");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r6.isRtl);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r6.isRtl);
    i0.ɵɵadvance(3);
    i0.ɵɵattribute("aria-label", ctx_r6.defaultTexts.emptyYear)("aria-valuenow", ctx_r6.calendarUIState.date.format("YYYY"));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptTextSlide", ctx_r6.calendarUIState.date.format("YYYY"))("slideForward", ctx_r6.animationDirectionForward);
    i0.ɵɵadvance(3);
    i0.ɵɵclassProp("disabled", ctx_r6.calendarUIState.disabled)("readonly", ctx_r6.calendarUIState.readonly);
    i0.ɵɵproperty("disabled", ctx_r6.calendarUIState.disabled);
    i0.ɵɵattribute("data-testid", ctx_r6.testID + "_nextYear");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r6.isRtl);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r6.isRtl);
} }
function AdaptDatetime2CalendarComponent_div_1_ng_template_9_div_1_adapt_icon_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 12);
} if (rf & 2) {
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", "angle_left");
} }
function AdaptDatetime2CalendarComponent_div_1_ng_template_9_div_1_adapt_icon_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 12);
} if (rf & 2) {
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", "angle_right");
} }
function AdaptDatetime2CalendarComponent_div_1_ng_template_9_div_1_adapt_icon_16_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 12);
} if (rf & 2) {
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", "angle_left");
} }
function AdaptDatetime2CalendarComponent_div_1_ng_template_9_div_1_adapt_icon_18_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 12);
} if (rf & 2) {
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", "angle_right");
} }
function AdaptDatetime2CalendarComponent_div_1_ng_template_9_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r26 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 7);
    i0.ɵɵtext(1, "\n                  ");
    i0.ɵɵelementStart(2, "button", 8);
    i0.ɵɵlistener("click", function AdaptDatetime2CalendarComponent_div_1_ng_template_9_div_1_Template_button_click_2_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r25 = i0.ɵɵnextContext(3); $event.stopPropagation(); return ctx_r25.calendarUIActions.prevMonth(); });
    i0.ɵɵtext(3, "\n                      ");
    i0.ɵɵtemplate(4, AdaptDatetime2CalendarComponent_div_1_ng_template_9_div_1_adapt_icon_4_Template, 1, 2, "adapt-icon", 9);
    i0.ɵɵtext(5, "\n                      ");
    i0.ɵɵtemplate(6, AdaptDatetime2CalendarComponent_div_1_ng_template_9_div_1_adapt_icon_6_Template, 1, 2, "adapt-icon", 9);
    i0.ɵɵtext(7, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n                  ");
    i0.ɵɵelementStart(9, "div", 10);
    i0.ɵɵlistener("keydown.arrowUp", function AdaptDatetime2CalendarComponent_div_1_ng_template_9_div_1_Template_div_keydown_arrowUp_9_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r27 = i0.ɵɵnextContext(3); $event.preventDefault(); return ctx_r27.calendarUIActions.nextMonth(); })("keydown.arrowRight", function AdaptDatetime2CalendarComponent_div_1_ng_template_9_div_1_Template_div_keydown_arrowRight_9_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r28 = i0.ɵɵnextContext(3); $event.preventDefault(); return ctx_r28.calendarUIActions.nextMonth(); })("keydown.arrowDown", function AdaptDatetime2CalendarComponent_div_1_ng_template_9_div_1_Template_div_keydown_arrowDown_9_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r29 = i0.ɵɵnextContext(3); $event.preventDefault(); return ctx_r29.calendarUIActions.prevMonth(); })("keydown.arrowLeft", function AdaptDatetime2CalendarComponent_div_1_ng_template_9_div_1_Template_div_keydown_arrowLeft_9_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r30 = i0.ɵɵnextContext(3); $event.preventDefault(); return ctx_r30.calendarUIActions.prevMonth(); });
    i0.ɵɵtext(10, "\n                      ");
    i0.ɵɵelement(11, "div", 11);
    i0.ɵɵtext(12, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(13, "\n                  ");
    i0.ɵɵelementStart(14, "button", 8);
    i0.ɵɵlistener("click", function AdaptDatetime2CalendarComponent_div_1_ng_template_9_div_1_Template_button_click_14_listener($event) { i0.ɵɵrestoreView(_r26); const ctx_r31 = i0.ɵɵnextContext(3); $event.stopPropagation(); return ctx_r31.calendarUIActions.nextMonth(); });
    i0.ɵɵtext(15, "\n                      ");
    i0.ɵɵtemplate(16, AdaptDatetime2CalendarComponent_div_1_ng_template_9_div_1_adapt_icon_16_Template, 1, 2, "adapt-icon", 9);
    i0.ɵɵtext(17, "\n                      ");
    i0.ɵɵtemplate(18, AdaptDatetime2CalendarComponent_div_1_ng_template_9_div_1_adapt_icon_18_Template, 1, 2, "adapt-icon", 9);
    i0.ɵɵtext(19, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(20, "\n              ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r20 = i0.ɵɵnextContext(3);
    i0.ɵɵattribute("aria-label", ctx_r20.defaultTexts.emptyMonth);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("disabled", ctx_r20.calendarUIState.disabled)("readonly", ctx_r20.calendarUIState.readonly);
    i0.ɵɵproperty("disabled", ctx_r20.calendarUIState.disabled);
    i0.ɵɵattribute("data-testid", ctx_r20.testID + "_prevMonth");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r20.isRtl);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r20.isRtl);
    i0.ɵɵadvance(3);
    i0.ɵɵattribute("aria-label", ctx_r20.defaultTexts.emptyMonth)("aria-valuetext", ctx_r20.calendarUIState.date.format("MMMM"));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptTextSlide", ctx_r20.calendarUIState.date.format(ctx_r20.calendarUIState.expanded ? "MMMM" : "MMM"))("slideForward", ctx_r20.animationDirectionForward);
    i0.ɵɵadvance(3);
    i0.ɵɵclassProp("disabled", ctx_r20.calendarUIState.disabled)("readonly", ctx_r20.calendarUIState.readonly);
    i0.ɵɵproperty("disabled", ctx_r20.calendarUIState.disabled);
    i0.ɵɵattribute("data-testid", ctx_r20.testID + "_nextMonth");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r20.isRtl);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r20.isRtl);
} }
function AdaptDatetime2CalendarComponent_div_1_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n              ");
    i0.ɵɵtemplate(1, AdaptDatetime2CalendarComponent_div_1_ng_template_9_div_1_Template, 21, 21, "div", 13);
    i0.ɵɵtext(2, "\n          ");
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !ctx_r8.monthAndYearOnly);
} }
function AdaptDatetime2CalendarComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 3);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵtemplate(2, AdaptDatetime2CalendarComponent_div_1_ng_container_2_Template, 1, 0, "ng-container", 4);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵtemplate(4, AdaptDatetime2CalendarComponent_div_1_ng_container_4_Template, 1, 0, "ng-container", 4);
    i0.ɵɵtext(5, "\n\n          ");
    i0.ɵɵtemplate(6, AdaptDatetime2CalendarComponent_div_1_ng_template_6_Template, 23, 23, "ng-template", null, 5, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(8, "\n          ");
    i0.ɵɵtemplate(9, AdaptDatetime2CalendarComponent_div_1_ng_template_9_Template, 3, 1, "ng-template", null, 6, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(11, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const _r5 = i0.ɵɵreference(7);
    const _r7 = i0.ɵɵreference(10);
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("a3t-calendar--controls_expanded", ctx_r0.calendarUIState.expanded);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r0.calendarUIState.expanded)("ngIfThen", _r7)("ngIfElse", _r5);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.calendarUIState.expanded)("ngIfThen", _r7)("ngIfElse", _r5);
} }
function AdaptDatetime2CalendarComponent_table_3_ng_container_7_th_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "th", 22);
} }
function AdaptDatetime2CalendarComponent_table_3_ng_container_7_th_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "th", 22);
} }
function AdaptDatetime2CalendarComponent_table_3_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n                  ");
    i0.ɵɵtemplate(2, AdaptDatetime2CalendarComponent_table_3_ng_container_7_th_2_Template, 1, 0, "th", 20);
    i0.ɵɵtext(3, "\n                  ");
    i0.ɵɵelementStart(4, "th", 21);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n                  ");
    i0.ɵɵtemplate(7, AdaptDatetime2CalendarComponent_table_3_ng_container_7_th_7_Template, 1, 0, "th", 20);
    i0.ɵɵtext(8, "\n              ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const dayOfWeek_r36 = ctx.$implicit;
    const first_r37 = ctx.first;
    const last_r38 = ctx.last;
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", first_r37);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("\n                      ", dayOfWeek_r36.date.format("dd"), "\n                  ");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", last_r38);
} }
function AdaptDatetime2CalendarComponent_table_3_tr_19_ng_container_2_td_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "td", 22);
} if (rf & 2) {
    const day_r43 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵclassProp("range", day_r43.isInRange && !day_r43.isRangeFrom)("other-month", day_r43.isOtherMonth);
} }
function AdaptDatetime2CalendarComponent_table_3_tr_19_ng_container_2_td_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "td", 22);
} if (rf & 2) {
    const day_r43 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵclassProp("range", day_r43.isInRange && !day_r43.isRangeTo)("other-month", day_r43.isOtherMonth);
} }
function AdaptDatetime2CalendarComponent_table_3_tr_19_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r52 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n                  ");
    i0.ɵɵtemplate(2, AdaptDatetime2CalendarComponent_table_3_tr_19_ng_container_2_td_2_Template, 1, 4, "td", 23);
    i0.ɵɵtext(3, "\n                  ");
    i0.ɵɵelementStart(4, "td", 24);
    i0.ɵɵtext(5, "\n                      ");
    i0.ɵɵelementStart(6, "button", 25, 26);
    i0.ɵɵlistener("click", function AdaptDatetime2CalendarComponent_table_3_tr_19_ng_container_2_Template_button_click_6_listener() { const restoredCtx = i0.ɵɵrestoreView(_r52); const day_r43 = restoredCtx.$implicit; const ctx_r51 = i0.ɵɵnextContext(3); return ctx_r51.onDayClick(day_r43.date); })("keydown.arrowLeft", function AdaptDatetime2CalendarComponent_table_3_tr_19_ng_container_2_Template_button_keydown_arrowLeft_6_listener($event) { i0.ɵɵrestoreView(_r52); const _r47 = i0.ɵɵreference(7); const ctx_r53 = i0.ɵɵnextContext(3); return ctx_r53.onDayFocusChange($event, _r47, "l"); })("keydown.arrowUp", function AdaptDatetime2CalendarComponent_table_3_tr_19_ng_container_2_Template_button_keydown_arrowUp_6_listener($event) { i0.ɵɵrestoreView(_r52); const _r47 = i0.ɵɵreference(7); const ctx_r54 = i0.ɵɵnextContext(3); return ctx_r54.onDayFocusChange($event, _r47, "t"); })("keydown.arrowRight", function AdaptDatetime2CalendarComponent_table_3_tr_19_ng_container_2_Template_button_keydown_arrowRight_6_listener($event) { i0.ɵɵrestoreView(_r52); const _r47 = i0.ɵɵreference(7); const ctx_r55 = i0.ɵɵnextContext(3); return ctx_r55.onDayFocusChange($event, _r47, "r"); })("keydown.arrowDown", function AdaptDatetime2CalendarComponent_table_3_tr_19_ng_container_2_Template_button_keydown_arrowDown_6_listener($event) { i0.ɵɵrestoreView(_r52); const _r47 = i0.ɵɵreference(7); const ctx_r56 = i0.ɵɵnextContext(3); return ctx_r56.onDayFocusChange($event, _r47, "b"); });
    i0.ɵɵtext(8);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n                  ");
    i0.ɵɵtemplate(11, AdaptDatetime2CalendarComponent_table_3_tr_19_ng_container_2_td_11_Template, 1, 4, "td", 23);
    i0.ɵɵtext(12, "\n              ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const day_r43 = ctx.$implicit;
    const first_r44 = ctx.first;
    const last_r45 = ctx.last;
    const ctx_r42 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", first_r44);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("range", day_r43.isInRange && !(day_r43.isRangeFrom && day_r43.isRangeTo))("range-from", ctx_r42.isRtl ? day_r43.isRangeTo && !day_r43.isRangeFrom : day_r43.isRangeFrom && !day_r43.isRangeTo)("range-to", ctx_r42.isRtl ? day_r43.isRangeFrom && !day_r43.isRangeTo : day_r43.isRangeTo && !day_r43.isRangeFrom)("other-month", day_r43.isOtherMonth);
    i0.ɵɵattribute("aria-label", day_r43.date.format("LL"))("aria-disabled", day_r43.isDisabled || day_r43.isOtherMonth)("aria-readonly", day_r43.isReadonly)("aria-hidden", day_r43.isDisabled || day_r43.isOtherMonth)("aria-selected", day_r43.isSelected);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("active", day_r43.isSelected)("today", day_r43.isToday)("range-edge", day_r43.isRangeFrom || day_r43.isRangeTo)("disabled", day_r43.isDisabled || day_r43.isOtherMonth)("readonly", day_r43.isReadonly);
    i0.ɵɵproperty("disabled", day_r43.isDisabled || day_r43.isOtherMonth);
    i0.ɵɵattribute("data-testid", ctx_r42.testID + "_day_" + day_r43.date.date());
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(day_r43.date.date());
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", last_r45);
} }
function AdaptDatetime2CalendarComponent_table_3_tr_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "tr");
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵtemplate(2, AdaptDatetime2CalendarComponent_table_3_tr_19_ng_container_2_Template, 13, 28, "ng-container", 17);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const week_r41 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", week_r41);
} }
function AdaptDatetime2CalendarComponent_table_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "table", 14, 15);
    i0.ɵɵtext(2, "\n          ");
    i0.ɵɵelementStart(3, "thead", 16);
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵelementStart(5, "tr");
    i0.ɵɵtext(6, "\n              ");
    i0.ɵɵtemplate(7, AdaptDatetime2CalendarComponent_table_3_ng_container_7_Template, 9, 3, "ng-container", 17);
    i0.ɵɵtext(8, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n          ");
    i0.ɵɵelementStart(11, "tbody", null, 18);
    i0.ɵɵtext(13, "\n          ");
    i0.ɵɵelementStart(14, "tr", 16);
    i0.ɵɵtext(15, "\n              ");
    i0.ɵɵelement(16, "td", 19);
    i0.ɵɵtext(17, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, "\n          ");
    i0.ɵɵtemplate(19, AdaptDatetime2CalendarComponent_table_3_tr_19_Template, 4, 1, "tr", 17);
    i0.ɵɵtext(20, "\n          ");
    i0.ɵɵelementStart(21, "tr", 16);
    i0.ɵɵtext(22, "\n              ");
    i0.ɵɵelement(23, "td", 19);
    i0.ɵɵtext(24, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(25, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(26, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(7);
    i0.ɵɵproperty("ngForOf", ctx_r1.calendar[0]);
    i0.ɵɵadvance(12);
    i0.ɵɵproperty("ngForOf", ctx_r1.calendar);
} }
function AdaptDatetime2CalendarComponent_adapt_datetime2_year_picker_5_Template(rf, ctx) { if (rf & 1) {
    const _r58 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-datetime2-year-picker", 27);
    i0.ɵɵlistener("yearSelect", function AdaptDatetime2CalendarComponent_adapt_datetime2_year_picker_5_Template_adapt_datetime2_year_picker_yearSelect_0_listener($event) { i0.ɵɵrestoreView(_r58); const ctx_r57 = i0.ɵɵnextContext(); return ctx_r57.yearSelect($event); });
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("initialDate", ctx_r2.initialDate)("yearsPage", ctx_r2.yearsPage)("activeDate", ctx_r2.activeDate)("animationsSet", ctx_r2._animationsSet)("calendarPlayers", ctx_r2._calendarPlayers);
} }
const _c2 = ["dndArea"];
const _c3 = ["clockFaceContainerRef"];
function AdaptDatetime2ClockComponent_ng_container_13_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 2);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("active", ctx_r5._activeFace === 2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r5.texts.ssBtn);
} }
function AdaptDatetime2ClockComponent_ng_container_13_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n                  ");
    i0.ɵɵelement(2, "span", 3);
    i0.ɵɵtext(3, "\n                  ");
    i0.ɵɵtemplate(4, AdaptDatetime2ClockComponent_ng_container_13_span_4_Template, 2, 3, "span", 11);
    i0.ɵɵtext(5, "\n              ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r0.seconds);
} }
function AdaptDatetime2ClockComponent_button_16_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 12);
    i0.ɵɵlistener("click", function AdaptDatetime2ClockComponent_button_16_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(); return ctx_r6.changeMeridiem(); });
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵelementStart(2, "span", 2);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n              ");
    i0.ɵɵelement(5, "span", 3);
    i0.ɵɵtext(6, "\n              ");
    i0.ɵɵelementStart(7, "span", 2);
    i0.ɵɵtext(8);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵattribute("data-testid", ctx_r1.testID + "_ampm");
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("active", !ctx_r1._isPM);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r1.texts.amBtn);
    i0.ɵɵadvance(4);
    i0.ɵɵclassProp("active", ctx_r1._isPM);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r1.texts.pmBtn);
} }
function AdaptDatetime2ClockComponent_div_25_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 15);
    i0.ɵɵtext(1, "\n                      ");
    i0.ɵɵelementStart(2, "div", 16);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n                      ");
    i0.ɵɵelement(5, "div", 17);
    i0.ɵɵtext(6, "\n                  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const label_r10 = ctx.$implicit;
    const index_r11 = ctx.index;
    const ticksSet_r8 = i0.ɵɵnextContext().$implicit;
    const ctx_r9 = i0.ɵɵnextContext();
    i0.ɵɵstyleProp("transform", "rotate(" + index_r11 / ticksSet_r8.length * 360 + "deg)");
    i0.ɵɵclassProp("a3t-clock--tick_active", label_r10.value === ctx_r9.uiFace.active)("readonly", ctx_r9.readonly);
    i0.ɵɵattribute("data-testid", ctx_r9.testID + "_tick_" + index_r11 / ticksSet_r8.length * 360);
    i0.ɵɵadvance(2);
    i0.ɵɵstyleProp("transform", "rotate(" + -index_r11 / ticksSet_r8.length * 360 + "deg)");
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                          ", label_r10.uiValue, "\n                      ");
} }
function AdaptDatetime2ClockComponent_div_25_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 13);
    i0.ɵɵtext(1, "\n                  ");
    i0.ɵɵtemplate(2, AdaptDatetime2ClockComponent_div_25_div_2_Template, 7, 10, "div", 14);
    i0.ɵɵtext(3, "\n              ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ticksSet_r8 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ticksSet_r8);
} }
const _c4 = ["hoursField"];
function AdaptDatetime2PickerComponent_div_3_div_2_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 8);
    i0.ɵɵtext(1, "\n                  ");
    i0.ɵɵelement(2, "adapt-icon", 9);
    i0.ɵɵtext(3, "\n                  ");
    i0.ɵɵelementStart(4, "button", 10);
    i0.ɵɵlistener("click", function AdaptDatetime2PickerComponent_div_3_div_2_Template_button_click_4_listener() { i0.ɵɵrestoreView(_r7); const ctx_r6 = i0.ɵɵnextContext(2); return ctx_r6.timeMode = false; });
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n              ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("@heightAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", "calendar");
    i0.ɵɵadvance(2);
    i0.ɵɵattribute("data-testid", ctx_r3.testID + "_dateSummary")("aria-label", ctx_r3.dateSummary);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r3.dateSummary);
} }
function AdaptDatetime2PickerComponent_div_3_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r9 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 11);
    i0.ɵɵtext(1, "\n                  ");
    i0.ɵɵelementStart(2, "button", 10);
    i0.ɵɵlistener("click", function AdaptDatetime2PickerComponent_div_3_div_4_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r9); const ctx_r8 = i0.ɵɵnextContext(2); return ctx_r8.monthMode = false; });
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n              ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("@heightAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵattribute("data-testid", ctx_r4.testID + "_yearSummary")("aria-label", ctx_r4.yearSummary);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r4.yearSummary);
} }
function AdaptDatetime2PickerComponent_div_3_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 12);
    i0.ɵɵtext(1, "\n                  ");
    i0.ɵɵelementStart(2, "adapt-datetime2-calendar", 13);
    i0.ɵɵlistener("daySelect", function AdaptDatetime2PickerComponent_div_3_div_6_Template_adapt_datetime2_calendar_daySelect_2_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(2); return ctx_r10.selectDate($event); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n              ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("@heightAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("expandedControlsStyle", !ctx_r5.timePicker && !ctx_r5.preventExpandedDateControls)("initialDate", ctx_r5.initialValue)("activeDate", ctx_r5.activeDate)("monthAndYearOnly", ctx_r5.monthAndYearOnly)("range", ctx_r5.dateRange)("filter", ctx_r5.dateFilter)("disabled", ctx_r5.disabled)("readonly", ctx_r5.readonly)("testID", ctx_r5.testID);
} }
function AdaptDatetime2PickerComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 4);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵtemplate(2, AdaptDatetime2PickerComponent_div_3_div_2_Template, 7, 6, "div", 5);
    i0.ɵɵtext(3, "\n\n              ");
    i0.ɵɵtemplate(4, AdaptDatetime2PickerComponent_div_3_div_4_Template, 5, 4, "div", 6);
    i0.ɵɵtext(5, "\n\n              ");
    i0.ɵɵtemplate(6, AdaptDatetime2PickerComponent_div_3_div_6_Template, 4, 10, "div", 7);
    i0.ɵɵtext(7, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.timeMode && !ctx_r0.timeOnly && !ctx_r0.hideDatePickerSummary);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.monthMode && ctx_r0.monthAndYearOnly && !ctx_r0.hideDatePickerSummary);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r0.timeMode && !ctx_r0.monthAndYearOnly || !ctx_r0.monthMode && ctx_r0.monthAndYearOnly);
} }
function AdaptDatetime2PickerComponent_div_5_ng_container_10_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    const _r20 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementStart(2, "input", 21);
    i0.ɵɵlistener("focus", function AdaptDatetime2PickerComponent_div_5_ng_container_10_ng_container_7_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r20); const ctx_r19 = i0.ɵɵnextContext(3); ctx_r19.activeFace = ctx_r19.activeFaceVariants.Seconds; return ctx_r19.clockFaceChange.emit(ctx_r19.activeFaceVariants.Seconds); })("input", function AdaptDatetime2PickerComponent_div_5_ng_container_10_ng_container_7_Template_input_input_2_listener($event) { i0.ɵɵrestoreView(_r20); const ctx_r21 = i0.ɵɵnextContext(3); return ctx_r21.timeUnitInput($event, "s"); })("keydown", function AdaptDatetime2PickerComponent_div_5_ng_container_10_ng_container_7_Template_input_keydown_2_listener($event) { i0.ɵɵrestoreView(_r20); const ctx_r22 = i0.ɵɵnextContext(3); return ctx_r22.timeUnitKeydown($event, "s"); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n                              ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r17 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                                  ", ctx_r17.defaultTexts.timeSeparator, "\n                                  ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("value", ctx_r17.timeSummary.ss);
    i0.ɵɵattribute("aria-valuenow", ctx_r17.timeSummary.ss)("aria-label", ctx_r17.defaultTexts.seconds);
} }
function AdaptDatetime2PickerComponent_div_5_ng_container_10_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    const _r24 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n                                  ");
    i0.ɵɵelementStart(2, "input", 23);
    i0.ɵɵlistener("click", function AdaptDatetime2PickerComponent_div_5_ng_container_10_ng_container_9_Template_input_click_2_listener() { i0.ɵɵrestoreView(_r24); const ctx_r23 = i0.ɵɵnextContext(3); return ctx_r23.changeMeridiem(); })("keydown.arrowUp", function AdaptDatetime2PickerComponent_div_5_ng_container_10_ng_container_9_Template_input_keydown_arrowUp_2_listener($event) { i0.ɵɵrestoreView(_r24); const ctx_r25 = i0.ɵɵnextContext(3); $event.preventDefault(); return ctx_r25.changeMeridiem(); })("keydown.arrowDown", function AdaptDatetime2PickerComponent_div_5_ng_container_10_ng_container_9_Template_input_keydown_arrowDown_2_listener($event) { i0.ɵɵrestoreView(_r24); const ctx_r26 = i0.ɵɵnextContext(3); $event.preventDefault(); return ctx_r26.changeMeridiem(); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n                              ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r18 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("value", ctx_r18.timeSummary.a);
    i0.ɵɵattribute("aria-valuenow", ctx_r18.timeSummary.a)("aria-label", ctx_r18.defaultTexts.meridiem);
} }
function AdaptDatetime2PickerComponent_div_5_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    const _r28 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n                              ");
    i0.ɵɵelementStart(2, "input", 21, 22);
    i0.ɵɵlistener("focus", function AdaptDatetime2PickerComponent_div_5_ng_container_10_Template_input_focus_2_listener() { i0.ɵɵrestoreView(_r28); const ctx_r27 = i0.ɵɵnextContext(2); ctx_r27.activeFace = ctx_r27.activeFaceVariants.Hours; return ctx_r27.clockFaceChange.emit(ctx_r27.activeFaceVariants.Hours); })("input", function AdaptDatetime2PickerComponent_div_5_ng_container_10_Template_input_input_2_listener($event) { i0.ɵɵrestoreView(_r28); const ctx_r29 = i0.ɵɵnextContext(2); return ctx_r29.timeUnitInput($event, "h"); })("keydown", function AdaptDatetime2PickerComponent_div_5_ng_container_10_Template_input_keydown_2_listener($event) { i0.ɵɵrestoreView(_r28); const ctx_r30 = i0.ɵɵnextContext(2); return ctx_r30.timeUnitKeydown($event, "h"); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4);
    i0.ɵɵelementStart(5, "input", 21);
    i0.ɵɵlistener("focus", function AdaptDatetime2PickerComponent_div_5_ng_container_10_Template_input_focus_5_listener() { i0.ɵɵrestoreView(_r28); const ctx_r31 = i0.ɵɵnextContext(2); ctx_r31.activeFace = ctx_r31.activeFaceVariants.Minutes; return ctx_r31.clockFaceChange.emit(ctx_r31.activeFaceVariants.Minutes); })("input", function AdaptDatetime2PickerComponent_div_5_ng_container_10_Template_input_input_5_listener($event) { i0.ɵɵrestoreView(_r28); const ctx_r32 = i0.ɵɵnextContext(2); return ctx_r32.timeUnitInput($event, "m"); })("keydown", function AdaptDatetime2PickerComponent_div_5_ng_container_10_Template_input_keydown_5_listener($event) { i0.ɵɵrestoreView(_r28); const ctx_r33 = i0.ɵɵnextContext(2); return ctx_r33.timeUnitKeydown($event, "m"); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n\n                              ");
    i0.ɵɵtemplate(7, AdaptDatetime2PickerComponent_div_5_ng_container_10_ng_container_7_Template, 4, 4, "ng-container", 18);
    i0.ɵɵtext(8, "\n\n                              ");
    i0.ɵɵtemplate(9, AdaptDatetime2PickerComponent_div_5_ng_container_10_ng_container_9_Template, 4, 3, "ng-container", 18);
    i0.ɵɵtext(10, "\n                          ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("value", ctx_r12.timeSummary.hh);
    i0.ɵɵattribute("aria-valuenow", ctx_r12.timeSummary.hh)("aria-label", ctx_r12.defaultTexts.hours);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1("\n                              ", ctx_r12.defaultTexts.timeSeparator, "\n                              ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("value", ctx_r12.timeSummary.mm);
    i0.ɵɵattribute("aria-valuenow", ctx_r12.timeSummary.mm)("aria-label", ctx_r12.defaultTexts.minutes);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r12.timeSeconds);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r12.hasMeridiem);
} }
function AdaptDatetime2PickerComponent_div_5_ng_container_12_Template(rf, ctx) { if (rf & 1) {
    const _r35 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n                              ");
    i0.ɵɵelementStart(2, "span", 24);
    i0.ɵɵlistener("focus", function AdaptDatetime2PickerComponent_div_5_ng_container_12_Template_span_focus_2_listener() { i0.ɵɵrestoreView(_r35); const ctx_r34 = i0.ɵɵnextContext(2); return ctx_r34.setCurrentDate(); });
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n                          ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r13 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r13.emptyTimeHeading);
} }
function AdaptDatetime2PickerComponent_div_5_button_16_Template(rf, ctx) { if (rf & 1) {
    const _r37 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 25);
    i0.ɵɵlistener("click", function AdaptDatetime2PickerComponent_div_5_button_16_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r37); const ctx_r36 = i0.ɵɵnextContext(2); return ctx_r36.timeMode = !ctx_r36.timeMode; });
    i0.ɵɵtext(1, "\n                      ");
    i0.ɵɵelement(2, "adapt-icon", 26);
    i0.ɵɵtext(3, "\n                  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("rotation-180", !ctx_r14.timeMode);
    i0.ɵɵattribute("data-testid", ctx_r14.testID + "_timeMode");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", "angle_down");
} }
function AdaptDatetime2PickerComponent_div_5_div_19_Template(rf, ctx) { if (rf & 1) {
    const _r39 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 27);
    i0.ɵɵtext(1, "\n                  ");
    i0.ɵɵelementStart(2, "adapt-datetime2-clock", 28);
    i0.ɵɵlistener("timeSelect", function AdaptDatetime2PickerComponent_div_5_div_19_Template_adapt_datetime2_clock_timeSelect_2_listener($event) { i0.ɵɵrestoreView(_r39); const ctx_r38 = i0.ɵɵnextContext(2); return ctx_r38.selectTime($event); })("clockFaceChange", function AdaptDatetime2PickerComponent_div_5_div_19_Template_adapt_datetime2_clock_clockFaceChange_2_listener($event) { i0.ɵɵrestoreView(_r39); const ctx_r40 = i0.ɵɵnextContext(2); return ctx_r40.clockFaceChange.emit($event); });
    i0.ɵɵtext(3, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n              ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("@heightAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("activeTime", ctx_r15.clockState)("activeFace", ctx_r15.activeFace)("seconds", ctx_r15.timeSeconds)("hasMeridiem", ctx_r15.hasMeridiem)("disabled", ctx_r15.disabled)("readonly", ctx_r15.readonly)("texts", ctx_r15.clockHeadings)("testID", ctx_r15.testID);
} }
function AdaptDatetime2PickerComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 14);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵelementStart(2, "div", 15);
    i0.ɵɵtext(3, "\n                  ");
    i0.ɵɵelementStart(4, "div", 16);
    i0.ɵɵtext(5, "\n                      ");
    i0.ɵɵelement(6, "adapt-icon", 9);
    i0.ɵɵtext(7, "\n\n                      ");
    i0.ɵɵelementStart(8, "div", 17);
    i0.ɵɵtext(9, "\n                          ");
    i0.ɵɵtemplate(10, AdaptDatetime2PickerComponent_div_5_ng_container_10_Template, 11, 9, "ng-container", 18);
    i0.ɵɵtext(11, "\n\n                          ");
    i0.ɵɵtemplate(12, AdaptDatetime2PickerComponent_div_5_ng_container_12_Template, 5, 1, "ng-container", 18);
    i0.ɵɵtext(13, "\n\n                      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n\n                  ");
    i0.ɵɵtemplate(16, AdaptDatetime2PickerComponent_div_5_button_16_Template, 4, 5, "button", 19);
    i0.ɵɵtext(17, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, "\n              ");
    i0.ɵɵtemplate(19, AdaptDatetime2PickerComponent_div_5_div_19_Template, 5, 9, "div", 20);
    i0.ɵɵtext(20, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("a3t-datetime--time-picker-summary_active", ctx_r1.timeMode);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", "clock_o");
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r1.timeSummary);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r1.timeSummary);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", !ctx_r1.timeOnly);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r1.timeMode);
} }
function AdaptDatetime2PickerComponent_div_7_div_19_Template(rf, ctx) { if (rf & 1) {
    const _r43 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 33);
    i0.ɵɵtext(1, "\n                  ");
    i0.ɵɵelementStart(2, "adapt-datetime2-month-picker", 34);
    i0.ɵɵlistener("selectMonth", function AdaptDatetime2PickerComponent_div_7_div_19_Template_adapt_datetime2_month_picker_selectMonth_2_listener($event) { i0.ɵɵrestoreView(_r43); const ctx_r42 = i0.ɵɵnextContext(2); return ctx_r42.selectMonth($event); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n              ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r41 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("@heightAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("initialDate", ctx_r41.initialValue)("activeDate", ctx_r41.activeDate);
} }
function AdaptDatetime2PickerComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    const _r45 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 29);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵelementStart(2, "div", 15);
    i0.ɵɵtext(3, "\n                  ");
    i0.ɵɵelementStart(4, "div", 16);
    i0.ɵɵtext(5, "\n                      ");
    i0.ɵɵelementStart(6, "div", 17);
    i0.ɵɵtext(7, "\n              ");
    i0.ɵɵelementStart(8, "span", 30);
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n                      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n\n                  ");
    i0.ɵɵelementStart(13, "button", 25);
    i0.ɵɵlistener("click", function AdaptDatetime2PickerComponent_div_7_Template_button_click_13_listener() { i0.ɵɵrestoreView(_r45); const ctx_r44 = i0.ɵɵnextContext(); return ctx_r44.monthMode = !ctx_r44.monthMode; });
    i0.ɵɵtext(14, "\n                      ");
    i0.ɵɵelement(15, "adapt-icon", 31);
    i0.ɵɵtext(16, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(17, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, "\n              ");
    i0.ɵɵtemplate(19, AdaptDatetime2PickerComponent_div_7_div_19_Template, 4, 3, "div", 32);
    i0.ɵɵtext(20, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("a3t-datetime--time-picker-summary_active", ctx_r2.monthMode);
    i0.ɵɵadvance(6);
    i0.ɵɵattribute("aria-label", ctx_r2.defaultTexts.month);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                ", ctx_r2.monthSummary, "\n              ");
    i0.ɵɵadvance(4);
    i0.ɵɵclassProp("rotation-180", !ctx_r2.monthMode);
    i0.ɵɵattribute("data-testid", ctx_r2.testID + "_monthMode");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", "angle_down");
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r2.monthMode);
} }
export class AdaptDatetime2CalendarComponent {
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    constructor(_animationBuilder, _dir, _dt, _dtr, _changeDetectorRef, ts) {
        this._animationBuilder = _animationBuilder;
        this._dir = _dir;
        this._dt = _dt;
        this._dtr = _dtr;
        this._changeDetectorRef = _changeDetectorRef;
        this.ts = ts;
        this.animationDirectionForward = true;
        this.isRtl = false;
        this.yearsPage = 0;
        this.defaultTexts = {};
        this.calendarUIActions = {
            prevYear: () => {
                if (!this.monthAndYearOnly) {
                    this.animationDirectionForward = false;
                    this._initialDate.subtract(1, 'year');
                    this._drawCalendar();
                }
                else {
                    this.yearsPage--;
                }
            },
            nextYear: () => {
                if (!this.monthAndYearOnly) {
                    this.animationDirectionForward = true;
                    this._initialDate.add(1, 'year');
                    this._drawCalendar();
                }
                else {
                    this.yearsPage++;
                }
            },
            prevMonth: () => {
                this.animationDirectionForward = false;
                this._initialDate.subtract(1, 'month');
                this._drawCalendar();
            },
            nextMonth: () => {
                this.animationDirectionForward = true;
                this._initialDate.add(1, 'month');
                this._drawCalendar();
            },
        };
        this.monthAndYearOnly = false;
        // Outputs
        this.daySelect = new EventEmitter();
        this._animationsSet = {
            prevOut: [
                style({
                    transform: 'translate(0px, 0px)',
                    opacity: 1
                }),
                animate('100ms', style({
                    transform: 'translate(10px, 0px)',
                    opacity: 0
                }))
            ],
            prevIn: [
                style({
                    transform: 'translate(-10px, 0px)',
                    opacity: 0
                }),
                animate('100ms', style({
                    transform: 'translate(0px, 0px)',
                    opacity: 1
                }))
            ],
            nextOut: [
                style({
                    transform: 'translate(0px, 0px)',
                    opacity: 1
                }),
                animate('100ms', style({
                    transform: 'translate(-10px, 0px)',
                    opacity: 0
                }))
            ],
            nextIn: [
                style({
                    transform: 'translate(10px, 0px)',
                    opacity: 0
                }),
                animate('100ms', style({
                    transform: 'translate(0px, 0px)',
                    opacity: 1
                }))
            ]
        };
        this._calendarPlayers = {
            nextOut: null,
            nextIn: null,
            prevOut: null,
            prevIn: null
        };
        this._animationReady = false;
        this._initialDate = moment();
        this._activeDate = null;
        this._range = [null, null];
        this._hideControls = false;
        this._expandedControlsStyle = false;
        this._initCalendar();
        this._drawCalendar();
        if (_dt || _dtr) {
            this._formControl = (_dt || _dtr).control.control;
        }
        this.setDefaultTexts(ts.getCurrentLanguage());
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    set initialDate(v) {
        if (v && v.isValid()) {
            this._initialDate = v.clone();
            this._drawCalendar();
        }
    }
    get initialDate() {
        return this._initialDate;
    }
    set activeDate(v) {
        if (v !== undefined) {
            if (v && v.isValid()) {
                this._activeDate = v.clone();
                if (this._activeDate.clone().startOf('month').isSame(this._initialDate.clone().startOf('month'))) {
                    this._patchCalendar();
                }
                else {
                    this._initialDate = v.clone();
                    this._drawCalendar();
                }
            }
            else {
                this._activeDate = null;
                this._patchCalendar();
            }
        }
    }
    get activeDate() {
        return this._activeDate;
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    set filter(v) {
        if (v !== undefined) {
            this._filter = v ? v : null;
            this._patchCalendar();
        }
    }
    set range(v) {
        if (v) {
            this._range[0] = v[0] && v[0].isValid() ? v[0].clone() : null;
            this._range[1] = v[1] && v[1].isValid() ? v[1].clone() : null;
            this._patchCalendar();
        }
    }
    set disabled(v) {
        if (v !== undefined) {
            this._disabled = v;
            this._patchCalendar();
        }
    }
    set readonly(v) {
        if (v !== undefined) {
            this._readonly = v;
            this._patchCalendar();
        }
    }
    set hideControls(v) {
        if (v !== undefined) {
            this._hideControls = v;
        }
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    set expandedControlsStyle(v) {
        if (v !== undefined) {
            this._expandedControlsStyle = v;
        }
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    get calendarUIState() {
        return {
            date: this._initialDate,
            disabled: this._disabled,
            readonly: this._readonly,
            hideControls: this._hideControls,
            expanded: this._expandedControlsStyle
        };
    }
    // Inputs
    set state(config) {
        if (!config) {
            return;
        }
        let needPatch = false;
        let needRedraw = false;
        if (config.initialDate && config.initialDate.isValid()) {
            this._initialDate = config.initialDate.clone();
            needRedraw = true;
        }
        if (config.activeDate !== undefined) {
            if (config.activeDate && config.activeDate.isValid()) {
                this._activeDate = config.activeDate.clone();
                if (this._activeDate.clone().startOf('month').isSame(this._initialDate.clone().startOf('month'))) {
                    needPatch = true;
                }
                else {
                    this._initialDate = config.activeDate.clone();
                    needRedraw = true;
                }
            }
            else {
                this._activeDate = null;
                needPatch = true;
            }
        }
        if (config.filter !== undefined) {
            this._filter = config.filter ? config.filter : null;
            needPatch = true;
        }
        if (config.range) {
            this._range[0] = config.range[0] && config.range[0].isValid() ? config.range[0].clone() : null;
            this._range[1] = config.range[1] && config.range[1].isValid() ? config.range[1].clone() : null;
            needPatch = true;
        }
        if (config.disabled !== undefined) {
            this._disabled = config.disabled;
            needPatch = true;
        }
        if (config.readonly !== undefined) {
            this._readonly = config.readonly;
            needPatch = true;
        }
        if (config.hideControls !== undefined) {
            this._hideControls = config.hideControls;
        }
        if (config.expandedControlsStyle !== undefined) {
            this._expandedControlsStyle = config.expandedControlsStyle;
        }
        // Update
        if (needPatch) {
            this._patchCalendar();
        }
        if (needRedraw) {
            this._drawCalendar();
        }
    }
    ngOnInit() {
        this.isRtl = this._dir.value === 'rtl';
    }
    ngAfterViewInit() {
        if (!this.monthAndYearOnly) {
            this._calendarPlayers.prevOut = this._animationBuilder.build(this._animationsSet.prevOut)
                .create(this.calendarContainerRef.nativeElement);
            this._calendarPlayers.prevIn = this._animationBuilder.build(this._animationsSet.prevIn)
                .create(this.calendarContainerRef.nativeElement);
            this._calendarPlayers.nextOut = this._animationBuilder.build(this._animationsSet.nextOut)
                .create(this.calendarContainerRef.nativeElement);
            this._calendarPlayers.nextIn = this._animationBuilder.build(this._animationsSet.nextIn)
                .create(this.calendarContainerRef.nativeElement);
        }
        this._animationReady = true;
    }
    setDefaultTexts(translation) {
        this.defaultTexts.emptyYear = translation['adapt.datetime.emptyYear'];
        this.defaultTexts.emptyMonth = translation['adapt.datetime.emptyMonth'];
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Private methods
    /**
     * Init days table
     */
    // UI Methods
    /**
     * Calendar day click handler
     */
    onDayClick(date) {
        this.daySelect.emit(date.clone());
    }
    yearSelect(date) {
        this.daySelect.emit(date.clone());
        this.yearsPage = 0;
    }
    /**
     * Update days table with month change
     */
    /**
     * Keyboard navigation for days table
     */
    onDayFocusChange(event, element, direction = 'r') {
        event.preventDefault();
        if (!this._calendarDOM) {
            this._calendarDOM = Array.prototype.slice.call(this.daysTable.nativeElement.querySelectorAll('button'));
        }
        const elIndex = this._calendarDOM.indexOf(element);
        let newIndex;
        switch (direction) {
            case 'l':
            case 't': {
                newIndex = elIndex - (direction === 'l' ? 1 : 7);
                while ((newIndex >= 0) && this._calendarDOM[newIndex] && this._calendarDOM[newIndex].disabled) {
                    newIndex--;
                }
                if (newIndex >= 0) {
                    this._calendarDOM[newIndex].focus();
                }
                break;
            }
            case 'r':
            case 'b': {
                newIndex = elIndex + (direction === 'r' ? 1 : 7);
                while (this._calendarDOM[newIndex] && this._calendarDOM[newIndex].disabled) {
                    newIndex++;
                }
                if (newIndex < this._calendarDOM.length) {
                    this._calendarDOM[newIndex].focus();
                }
                break;
            }
        }
    }
    /**
     * Update days table without month change
     */
    _initCalendar() {
        this.calendar =
            Array(6)
                .fill(0)
                .map(() => Array(7)
                .fill(0)
                .map(() => new Calendar2Day()));
    }
    _drawCalendar() {
        const startDay = this._initialDate.clone().startOf('month').startOf('week');
        const tempDate = startDay.clone().subtract(1, 'day');
        this._animateCalendarChange((() => {
            this.calendar.forEach((week, weekIndex) => {
                week.forEach((day, dayIndex) => {
                    this.calendar[weekIndex][dayIndex].date = tempDate.add(1, 'day').clone();
                });
            });
            this._patchCalendar();
        }).bind(this));
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    _patchCalendar() {
        this.calendar.forEach((week) => {
            week.forEach((day) => {
                day.isSelected = this._activeDate ?
                    this._activeDate.clone().startOf('day').isSame(day.date.startOf('day')) : false;
                day.isToday = moment().startOf('day').isSame(day.date.startOf('day'));
                day.isOtherMonth = day.date.month() !== this._initialDate.month();
                day.isDisabled = this._disabled ||
                    (this._filter ? !this._filter(day.date, this._formControl) : false);
                day.isReadonly = this._readonly;
                day.isInRange = this._range[0] && this._range[1]
                    && day.date.isBetween(this._range[0], this._range[1], 'day', '[]');
                day.isRangeFrom = this._range[0] && this._range[0].startOf('day').isSame(day.date.startOf('day'));
                day.isRangeTo = this._range[1] && this._range[1].endOf('day').isSame(day.date.endOf('day'));
            });
        });
    }
    /**
     * Calendar change animation
     */
    _animateCalendarChange(changeValFn) {
        if (!this.monthAndYearOnly) {
            if (this._animationReady) {
                this._calendarPlayers.prevOut.reset();
                this._calendarPlayers.prevIn.reset();
                this._calendarPlayers.nextOut.reset();
                this._calendarPlayers.nextIn.reset();
                const _in = this.animationDirectionForward ? this._calendarPlayers.nextIn : this._calendarPlayers.prevIn;
                const _out = this.animationDirectionForward ? this._calendarPlayers.nextOut : this._calendarPlayers.prevOut;
                _out.onDone(() => {
                    changeValFn();
                    _in.play();
                    SafeCdr.detectChanges(this._changeDetectorRef);
                });
                _out.play();
            }
            else {
                changeValFn();
            }
        }
    }
}
AdaptDatetime2CalendarComponent.ɵfac = function AdaptDatetime2CalendarComponent_Factory(t) { return new (t || AdaptDatetime2CalendarComponent)(i0.ɵɵdirectiveInject(i1.AnimationBuilder), i0.ɵɵdirectiveInject(i2.Directionality), i0.ɵɵdirectiveInject(forwardRef(() => AdaptDatetime2Component), 8), i0.ɵɵdirectiveInject(forwardRef(() => AdaptDatetimeRange2Component), 8), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i3.AdaptTranslateService)); };
AdaptDatetime2CalendarComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptDatetime2CalendarComponent, selectors: [["adapt-datetime2-calendar"]], viewQuery: function AdaptDatetime2CalendarComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
        i0.ɵɵviewQuery(_c1, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.daysTable = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.calendarContainerRef = _t.first);
    } }, hostVars: 2, hostBindings: function AdaptDatetime2CalendarComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassProp("a3t-calendar", true);
    } }, inputs: { testID: "testID", monthAndYearOnly: "monthAndYearOnly", initialDate: "initialDate", activeDate: "activeDate", filter: "filter", range: "range", disabled: "disabled", readonly: "readonly", hideControls: "hideControls", expandedControlsStyle: "expandedControlsStyle", state: "state" }, outputs: { daySelect: "daySelect" }, decls: 7, vars: 3, consts: [["class", "a3t-calendar--controls", 3, "a3t-calendar--controls_expanded", 4, "ngIf"], ["class", "a3t-calendar--table", 4, "ngIf"], [3, "initialDate", "yearsPage", "activeDate", "animationsSet", "calendarPlayers", "yearSelect", 4, "ngIf"], [1, "a3t-calendar--controls"], [4, "ngIf", "ngIfThen", "ngIfElse"], ["pickYear", ""], ["pickMonth", ""], [1, "a3t-calendar--controls-line"], ["type", "button", "aria-hidden", "true", "tabindex", "-1", 1, "a3t-calendar--controls-btn", 3, "disabled", "click"], [3, "adaptRadarDisableEventSending", "name", 4, "ngIf"], ["tabindex", "0", "role", "spinbutton", 1, "a3t-calendar--controls-info", 3, "keydown.arrowUp", "keydown.arrowRight", "keydown.arrowDown", "keydown.arrowLeft"], [3, "adaptTextSlide", "slideForward"], [3, "adaptRadarDisableEventSending", "name"], ["class", "a3t-calendar--controls-line", 4, "ngIf"], [1, "a3t-calendar--table"], ["daysTable", ""], ["aria-hidden", "true"], [4, "ngFor", "ngForOf"], ["calendarContainerRef", ""], ["colspan", "9", 1, "a3t-calendar--table-space-cell"], ["class", "a3t-calendar--table-edge-cell", "aria-hidden", "true", 4, "ngIf"], [1, "a3t-calendar--table-week-name"], ["aria-hidden", "true", 1, "a3t-calendar--table-edge-cell"], ["class", "a3t-calendar--table-edge-cell", "aria-hidden", "true", 3, "range", "other-month", 4, "ngIf"], ["role", "gridcell", 1, "a3t-calendar--table-day"], ["type", "button", 3, "disabled", "click", "keydown.arrowLeft", "keydown.arrowUp", "keydown.arrowRight", "keydown.arrowDown"], ["dayEl", ""], [3, "initialDate", "yearsPage", "activeDate", "animationsSet", "calendarPlayers", "yearSelect"]], template: function AdaptDatetime2CalendarComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtext(0, "\n      ");
        i0.ɵɵtemplate(1, AdaptDatetime2CalendarComponent_div_1_Template, 12, 8, "div", 0);
        i0.ɵɵtext(2, "\n      ");
        i0.ɵɵtemplate(3, AdaptDatetime2CalendarComponent_table_3_Template, 27, 2, "table", 1);
        i0.ɵɵtext(4, "\n\n      ");
        i0.ɵɵtemplate(5, AdaptDatetime2CalendarComponent_adapt_datetime2_year_picker_5_Template, 2, 5, "adapt-datetime2-year-picker", 2);
        i0.ɵɵtext(6, "\n  ");
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx.calendarUIState.hideControls);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx.monthAndYearOnly);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.monthAndYearOnly);
    } }, directives: [i4.NgIf, i3.AdaptTextSlideDirective, i3.AdaptIconComponent, i4.NgForOf, i5.AdaptDatetime2YearPickerComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptDatetime2CalendarComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-datetime2-calendar',
                template: `
      <div class="a3t-calendar--controls"
           *ngIf="!calendarUIState.hideControls"
           [class.a3t-calendar--controls_expanded]="calendarUIState.expanded">
          <ng-container *ngIf="!calendarUIState.expanded; then pickMonth; else pickYear"></ng-container>
          <ng-container *ngIf="calendarUIState.expanded; then pickMonth; else pickYear"></ng-container>

          <ng-template #pickYear>
              <div class="a3t-calendar--controls-line"
                   [class.a3t-calendar--year-picker]="monthAndYearOnly"
                   attr.aria-label="{{defaultTexts.emptyYear}}"
              >
                  <button type="button"
                          class="a3t-calendar--controls-btn"
                          aria-hidden="true"
                          tabindex="-1"
                          [attr.data-testid]="testID + '_prevYear'"
                          [disabled]="calendarUIState.disabled"
                          [class.disabled]="calendarUIState.disabled"
                          [class.readonly]="calendarUIState.readonly"
                          (click)="$event.stopPropagation(); calendarUIActions.prevYear()">
                      <adapt-icon [adaptRadarDisableEventSending]="true" *ngIf="!isRtl" [name]="'angle_left'"></adapt-icon>
                      <adapt-icon [adaptRadarDisableEventSending]="true" *ngIf="isRtl" [name]="'angle_right'"></adapt-icon>
                  </button>
                  <div class="a3t-calendar--controls-info"
                       tabindex="0"
                       attr.aria-label="{{defaultTexts.emptyYear}}"
                       role="spinbutton"
                       [attr.aria-valuenow]="calendarUIState.date.format('YYYY')"
                       (keydown.arrowUp)="$event.preventDefault(); calendarUIActions.nextYear()"
                       (keydown.arrowRight)="$event.preventDefault(); calendarUIActions.nextYear()"
                       (keydown.arrowDown)="$event.preventDefault(); calendarUIActions.prevYear()"
                       (keydown.arrowLeft)="$event.preventDefault(); calendarUIActions.prevYear()">
                      <div [adaptTextSlide]="calendarUIState.date.format('YYYY')"
                           [slideForward]="animationDirectionForward"></div>
                  </div>
                  <button type="button"
                          class="a3t-calendar--controls-btn"
                          aria-hidden="true"
                          tabindex="-1"
                          [attr.data-testid]="testID + '_nextYear'"
                          [disabled]="calendarUIState.disabled"
                          [class.disabled]="calendarUIState.disabled"
                          [class.readonly]="calendarUIState.readonly"
                          (click)="$event.stopPropagation(); calendarUIActions.nextYear()">
                      <adapt-icon [adaptRadarDisableEventSending]="true" *ngIf="isRtl" [name]="'angle_left'"></adapt-icon>
                      <adapt-icon [adaptRadarDisableEventSending]="true" *ngIf="!isRtl" [name]="'angle_right'"></adapt-icon>
                  </button>
              </div>
          </ng-template>
          <ng-template #pickMonth>
              <div class="a3t-calendar--controls-line"
                   attr.aria-label="{{defaultTexts.emptyMonth}}"
                   *ngIf="!monthAndYearOnly">
                  <button type="button"
                          class="a3t-calendar--controls-btn"
                          aria-hidden="true"
                          tabindex="-1"
                          [attr.data-testid]="testID + '_prevMonth'"
                          [disabled]="calendarUIState.disabled"
                          [class.disabled]="calendarUIState.disabled"
                          [class.readonly]="calendarUIState.readonly"
                          (click)="$event.stopPropagation(); calendarUIActions.prevMonth()">
                      <adapt-icon [adaptRadarDisableEventSending]="true" *ngIf="!isRtl" [name]="'angle_left'"></adapt-icon>
                      <adapt-icon [adaptRadarDisableEventSending]="true" *ngIf="isRtl" [name]="'angle_right'"></adapt-icon>
                  </button>
                  <div class="a3t-calendar--controls-info"
                       tabindex="0"
                       attr.aria-label="{{defaultTexts.emptyMonth}}"
                       role="spinbutton"
                       [attr.aria-valuetext]="calendarUIState.date.format('MMMM')"
                       (keydown.arrowUp)="$event.preventDefault(); calendarUIActions.nextMonth()"
                       (keydown.arrowRight)="$event.preventDefault(); calendarUIActions.nextMonth()"
                       (keydown.arrowDown)="$event.preventDefault(); calendarUIActions.prevMonth()"
                       (keydown.arrowLeft)="$event.preventDefault(); calendarUIActions.prevMonth()">
                      <div [adaptTextSlide]="calendarUIState.date.format(calendarUIState.expanded ? 'MMMM' : 'MMM')"
                           [slideForward]="animationDirectionForward"></div>
                  </div>
                  <button type="button"
                          class="a3t-calendar--controls-btn"
                          aria-hidden="true"
                          tabindex="-1"
                          [attr.data-testid]="testID + '_nextMonth'"
                          [disabled]="calendarUIState.disabled"
                          [class.disabled]="calendarUIState.disabled"
                          [class.readonly]="calendarUIState.readonly"
                          (click)="$event.stopPropagation(); calendarUIActions.nextMonth()">
                      <adapt-icon [adaptRadarDisableEventSending]="true" *ngIf="isRtl" [name]="'angle_left'"></adapt-icon>
                      <adapt-icon [adaptRadarDisableEventSending]="true" *ngIf="!isRtl" [name]="'angle_right'"></adapt-icon>
                  </button>
              </div>
          </ng-template>
      </div>
      <table class="a3t-calendar--table" #daysTable *ngIf="!monthAndYearOnly">
          <thead aria-hidden="true">
          <tr>
              <ng-container *ngFor="let dayOfWeek of calendar[0]; let first = first; let last = last">
                  <th class="a3t-calendar--table-edge-cell" aria-hidden="true" *ngIf="first"></th>
                  <th class="a3t-calendar--table-week-name">
                      {{dayOfWeek.date.format('dd')}}
                  </th>
                  <th class="a3t-calendar--table-edge-cell" aria-hidden="true" *ngIf="last"></th>
              </ng-container>
          </tr>
          </thead>
          <tbody #calendarContainerRef>
          <tr aria-hidden="true">
              <td colspan="9" class="a3t-calendar--table-space-cell"></td>
          </tr>
          <tr *ngFor="let week of calendar">
              <ng-container *ngFor="let day of week; let first = first; let last = last">
                  <td class="a3t-calendar--table-edge-cell"
                      aria-hidden="true"
                      *ngIf="first"
                      [class.range]="day.isInRange && !day.isRangeFrom"
                      [class.other-month]="day.isOtherMonth"></td>
                  <td class="a3t-calendar--table-day"
                      role="gridcell"
                      [class.range]="day.isInRange && !(day.isRangeFrom && day.isRangeTo)"
                      [class.range-from]="isRtl ? (day.isRangeTo && !day.isRangeFrom) : (day.isRangeFrom && !day.isRangeTo)"
                      [class.range-to]="isRtl ? (day.isRangeFrom && !day.isRangeTo) : (day.isRangeTo && !day.isRangeFrom)"
                      [class.other-month]="day.isOtherMonth"
                      [attr.aria-label]="day.date.format('LL')"
                      [attr.aria-disabled]="day.isDisabled || day.isOtherMonth"
                      [attr.aria-readonly]="day.isReadonly"
                      [attr.aria-hidden]="day.isDisabled || day.isOtherMonth"
                      [attr.aria-selected]="day.isSelected">
                      <button type="button"
                              #dayEl
                              (click)="onDayClick(day.date)"
                              [class.active]="day.isSelected"
                              [class.today]="day.isToday"
                              [class.range-edge]="day.isRangeFrom || day.isRangeTo"
                              [class.disabled]="day.isDisabled || day.isOtherMonth"
                              [class.readonly]="day.isReadonly"
                              [disabled]="day.isDisabled || day.isOtherMonth"
                              [attr.data-testid]="testID + '_day_' + day.date.date()"
                              (keydown.arrowLeft)="onDayFocusChange($event, dayEl, 'l')"
                              (keydown.arrowUp)="onDayFocusChange($event, dayEl, 't')"
                              (keydown.arrowRight)="onDayFocusChange($event, dayEl, 'r')"
                              (keydown.arrowDown)="onDayFocusChange($event, dayEl, 'b')">{{day.date.date()}}</button>
                  </td>
                  <td class="a3t-calendar--table-edge-cell"
                      aria-hidden="true"
                      *ngIf="last"
                      [class.range]="day.isInRange && !day.isRangeTo"
                      [class.other-month]="day.isOtherMonth"></td>
              </ng-container>
          </tr>
          <tr aria-hidden="true">
              <td colspan="9" class="a3t-calendar--table-space-cell"></td>
          </tr>
          </tbody>
      </table>

      <adapt-datetime2-year-picker *ngIf="monthAndYearOnly"
                                   [initialDate]="initialDate"
                                   [yearsPage]="yearsPage"
                                   [activeDate]="activeDate"
                                   (yearSelect)="yearSelect($event)"
                                   [animationsSet]="_animationsSet"
                                   [calendarPlayers]="_calendarPlayers">
      </adapt-datetime2-year-picker>
  `,
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[class.a3t-calendar]': 'true'
                }
            }]
    }], function () { return [{ type: i1.AnimationBuilder }, { type: i2.Directionality }, { type: i6.AdaptDatetime2Component, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [forwardRef(() => AdaptDatetime2Component)]
            }] }, { type: i7.AdaptDatetimeRange2Component, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [forwardRef(() => AdaptDatetimeRange2Component)]
            }] }, { type: i0.ChangeDetectorRef }, { type: i3.AdaptTranslateService }]; }, { testID: [{
            type: Input
        }], monthAndYearOnly: [{
            type: Input
        }], daySelect: [{
            type: Output
        }], daysTable: [{
            type: ViewChild,
            args: ['daysTable']
        }], calendarContainerRef: [{
            type: ViewChild,
            args: ['calendarContainerRef']
        }], initialDate: [{
            type: Input
        }], activeDate: [{
            type: Input
        }], filter: [{
            type: Input
        }], range: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], hideControls: [{
            type: Input
        }], expandedControlsStyle: [{
            type: Input
        }], state: [{
            type: Input
        }] }); })();
export class AdaptDatetime2ClockComponent {
    constructor(_renderer, _animationBuilder, ts) {
        this._renderer = _renderer;
        this._animationBuilder = _animationBuilder;
        this.ts = ts;
        this._isPM = false;
        this._activeFace = Clock2FaceUnit.Hours;
        this._hasMeridiem = false;
        this.defaultTexts = {};
        this.seconds = false;
        this.autoFaceSwitch = true;
        this.disabled = false;
        this.readonly = false;
        this.timeSelect = new EventEmitter();
        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        this.clockFaceChange = new EventEmitter();
        // Private fields
        this._innerFaceDNDTolerance = .65;
        this._faceSize = 220;
        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        this._hoursFaceTicks24 = [
            Array(12)
                .fill(0)
                .map((x, i) => {
                return {
                    value: i || 12,
                    uiValue: (i || 12).toString()
                };
            }),
            Array(12)
                .fill(0)
                .map((x, i) => {
                return {
                    value: i ? i + 12 : 0,
                    uiValue: (i ? i + 12 : 0).toString()
                };
            })
        ];
        this._hoursFaceTicks12 = [
            Array(12)
                .fill(0)
                .map((x, i) => {
                return {
                    value: i || 12,
                    uiValue: (i || 12).toString()
                };
            })
        ];
        // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        // Private view settings
        this._hoursFace = {
            ticks: this._hoursFaceTicks24
        };
        // UI Fields
        // eslint-disable-next-line @typescript-eslint/member-ordering
        this.uiFace = this._hoursFace;
        // Inputs
        this._minutesFace = {
            ticks: [
                Array(60)
                    .fill(0)
                    .map((x, i) => {
                    return {
                        value: i,
                        uiValue: (i % 5 ? '' : i).toString()
                    };
                })
            ]
        };
        this._secondsFace = {
            ticks: [
                Array(60)
                    .fill(0)
                    .map((x, i) => {
                    return {
                        value: i,
                        uiValue: (i % 5 ? '' : i).toString()
                    };
                })
            ]
        };
        this._animationReady = false;
        this._animationsSet = {
            out: [
                style({
                    transform: 'scale(1)',
                    opacity: 1
                }),
                animate('100ms', style({
                    transform: 'scale(1.1)',
                    opacity: 0
                }))
            ],
            in: [
                style({
                    transform: 'scale(.9)',
                    opacity: 0
                }),
                animate('100ms', style({
                    transform: 'scale(1)',
                    opacity: 1
                }))
            ]
        };
        this._animationPlayers = {
            out: null,
            in: null
        };
        this.setDefaultTexts(ts.getCurrentLanguage());
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    // Outputs
    set activeFace(nextFace) {
        if (nextFace === undefined) {
            return;
        }
        this.gotoNextFace(nextFace);
    }
    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    set hasMeridiem(nextMeridiem) {
        this._hasMeridiem = !!nextMeridiem;
        if (this._hasMeridiem) {
            this._hoursFace.ticks = this._hoursFaceTicks12;
        }
        else {
            this._hoursFace.ticks = this._hoursFaceTicks24;
        }
    }
    set activeTime(nextActiveTime) {
        if (!nextActiveTime) {
            return;
        }
        if (this._hasMeridiem) {
            this._isPM = nextActiveTime[0] >= 12;
            const isMidnight = nextActiveTime[0] === 12;
            this._hoursFace.active = (nextActiveTime[0] - (this._isPM && !isMidnight ? 12 : 0)) || 12;
        }
        else {
            this._hoursFace.active = nextActiveTime[0];
        }
        this._minutesFace.active = nextActiveTime[1];
        this._secondsFace.active = nextActiveTime[2];
    }
    get _model() {
        let hours = this._hoursFace.active || 0;
        if (this._hasMeridiem) {
            if (this._isPM) {
                hours += (hours === 12 ? 0 : 12);
            }
            else {
                hours = (hours === 12 ? 0 : hours);
            }
        }
        return [
            hours,
            this._minutesFace.active || 0,
            this._secondsFace.active || 0
        ];
    }
    ngOnInit() {
        this._initDragNDrop();
        this.texts = Object.assign(Object.assign({}, this.defaultTexts), this.texts);
    }
    ngAfterViewInit() {
        this._animationPlayers.out = this._animationBuilder.build(this._animationsSet.out)
            .create(this.clockFaceContainerRef.nativeElement);
        this._animationPlayers.in = this._animationBuilder.build(this._animationsSet.in)
            .create(this.clockFaceContainerRef.nativeElement);
        this._animationReady = true;
    }
    setDefaultTexts(translation) {
        this.defaultTexts.hhBtn = translation['adapt.datetime.hh'];
        this.defaultTexts.mmBtn = translation['adapt.datetime.mm'];
        this.defaultTexts.ssBtn = translation['adapt.datetime.ss'];
        this.defaultTexts.amBtn = translation['adapt.datetime.am'];
        this.defaultTexts.pmBtn = translation['adapt.datetime.pm'];
    }
    /**
     * Return current model state
     */
    ngOnDestroy() {
        this._dndSubscription.unsubscribe();
    }
    /**
     * Init drag and drop
     */
    /**
     * Change time meridiem
     */
    changeMeridiem() {
        this._isPM = !this._isPM;
        this.timeSelect.emit(this._model);
    }
    /**
     * Change time unit face
     */
    gotoNextFace(nextFace) {
        if (nextFace === this._activeFace) {
            return;
        }
        if (nextFace === undefined) {
            nextFace = (this._activeFace + 1) % 3;
        }
        this._animateClockFaceChange((() => {
            switch (nextFace) {
                case Clock2FaceUnit.Hours: {
                    this.uiFace = this._hoursFace;
                    this._activeFace = Clock2FaceUnit.Hours;
                    break;
                }
                case Clock2FaceUnit.Minutes: {
                    this.uiFace = this._minutesFace;
                    this._activeFace = Clock2FaceUnit.Minutes;
                    break;
                }
                case Clock2FaceUnit.Seconds: {
                    if (this.seconds) {
                        this.uiFace = this._secondsFace;
                        this._activeFace = Clock2FaceUnit.Seconds;
                    }
                    else {
                        this.uiFace = this._hoursFace;
                        this._activeFace = Clock2FaceUnit.Hours;
                    }
                    break;
                }
                default: {
                    this.uiFace = this._hoursFace;
                    this._activeFace = Clock2FaceUnit.Hours;
                    break;
                }
            }
            this.clockFaceChange.emit(this._activeFace);
        }).bind(this));
    }
    _initDragNDrop() {
        this._renderer.setStyle(this.dndArea.nativeElement, 'width', `${this._faceSize}px`);
        this._renderer.setStyle(this.dndArea.nativeElement, 'height', `${this._faceSize}px`);
        let centerX;
        let centerY;
        const dragStart = () => {
            const elRect = this.dndArea.nativeElement.getBoundingClientRect();
            centerX = elRect.left + elRect.width / 2;
            centerY = elRect.top + elRect.height / 2;
        };
        const dragEnd = () => {
            if (this.autoFaceSwitch) {
                if (!(this.seconds ? this._activeFace === Clock2FaceUnit.Seconds : this._activeFace === Clock2FaceUnit.Minutes)) {
                    this.gotoNextFace();
                }
            }
        };
        this._dndSubscription = GetDragNDrop(this.dndArea.nativeElement, null, null, dragStart, dragEnd)
            .pipe(map(moveCoords => {
            if (this.disabled || this.readonly) {
                return;
            }
            const angle = Math.round(GetAngle(centerX, centerY, moveCoords.x, moveCoords.y) * 100) / 100;
            const distance = Math.round(GetDistance(centerX, centerY, moveCoords.x, moveCoords.y) * 100) / 100;
            const face = (this.uiFace.ticks.length === 1) || (distance > this._faceSize / 2 * this._innerFaceDNDTolerance) ?
                this.uiFace.ticks[0] :
                this.uiFace.ticks[1];
            const ticksCount = face.length;
            this.uiFace.active = face[Math.round(angle * ticksCount / 360) % ticksCount].value;
            return face[Math.round(angle * ticksCount / 360) % ticksCount];
        }), distinctUntilChanged())
            .subscribe(() => {
            this.timeSelect.emit(this._model);
        });
    }
    _animateClockFaceChange(changeValFn) {
        if (this._animationReady) {
            this._animationPlayers.out.reset();
            this._animationPlayers.in.reset();
            this._animationPlayers.out.onDone(() => {
                changeValFn();
                this._animationPlayers.in.play();
            });
            this._animationPlayers.out.play();
        }
        else {
            changeValFn();
        }
    }
}
AdaptDatetime2ClockComponent.ɵfac = function AdaptDatetime2ClockComponent_Factory(t) { return new (t || AdaptDatetime2ClockComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.AnimationBuilder), i0.ɵɵdirectiveInject(i3.AdaptTranslateService)); };
AdaptDatetime2ClockComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptDatetime2ClockComponent, selectors: [["adapt-datetime2-clock"]], viewQuery: function AdaptDatetime2ClockComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c2, 7);
        i0.ɵɵviewQuery(_c3, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dndArea = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.clockFaceContainerRef = _t.first);
    } }, hostVars: 5, hostBindings: function AdaptDatetime2ClockComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("aria-hidden", true);
        i0.ɵɵclassProp("a3t-clock", true)("a3t-clock_disabled", ctx.disabled);
    } }, inputs: { testID: "testID", seconds: "seconds", autoFaceSwitch: "autoFaceSwitch", disabled: "disabled", readonly: "readonly", texts: "texts", activeFace: "activeFace", hasMeridiem: "hasMeridiem", activeTime: "activeTime" }, outputs: { timeSelect: "timeSelect", clockFaceChange: "clockFaceChange" }, decls: 29, vars: 10, consts: [[1, "a3t-clock--controls"], ["type", "button", "tabindex", "-1", 1, "a3t-clock--control-btn", "m-end-2", 3, "click"], [1, "a3t-clock--control-item"], [1, "a3t-clock--control-separator"], [4, "ngIf"], ["type", "button", "class", "a3t-clock--control-btn", "tabindex", "-1", 3, "click", 4, "ngIf"], [1, "a3t-clock--faces"], ["dndArea", ""], [2, "width", "100%", "height", "100%"], ["clockFaceContainerRef", ""], ["class", "a3t-clock--face", 4, "ngFor", "ngForOf"], ["class", "a3t-clock--control-item", 3, "active", 4, "ngIf"], ["type", "button", "tabindex", "-1", 1, "a3t-clock--control-btn", 3, "click"], [1, "a3t-clock--face"], ["class", "a3t-clock--tick", 3, "a3t-clock--tick_active", "readonly", "transform", 4, "ngFor", "ngForOf"], [1, "a3t-clock--tick"], [1, "a3t-clock--tick-label"], [1, "a3t-clock--tick-arrow"]], template: function AdaptDatetime2ClockComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtext(0, "\n      ");
        i0.ɵɵelementStart(1, "div", 0);
        i0.ɵɵtext(2, "\n          ");
        i0.ɵɵelementStart(3, "button", 1);
        i0.ɵɵlistener("click", function AdaptDatetime2ClockComponent_Template_button_click_3_listener() { return ctx.gotoNextFace(); });
        i0.ɵɵtext(4, "\n              ");
        i0.ɵɵelementStart(5, "span", 2);
        i0.ɵɵtext(6);
        i0.ɵɵelementEnd();
        i0.ɵɵtext(7, "\n              ");
        i0.ɵɵelement(8, "span", 3);
        i0.ɵɵtext(9, "\n              ");
        i0.ɵɵelementStart(10, "span", 2);
        i0.ɵɵtext(11);
        i0.ɵɵelementEnd();
        i0.ɵɵtext(12, "\n              ");
        i0.ɵɵtemplate(13, AdaptDatetime2ClockComponent_ng_container_13_Template, 6, 1, "ng-container", 4);
        i0.ɵɵtext(14, "\n          ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(15, "\n          ");
        i0.ɵɵtemplate(16, AdaptDatetime2ClockComponent_button_16_Template, 10, 7, "button", 5);
        i0.ɵɵtext(17, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(18, "\n      ");
        i0.ɵɵelementStart(19, "div", 6, 7);
        i0.ɵɵtext(21, "\n          ");
        i0.ɵɵelementStart(22, "div", 8, 9);
        i0.ɵɵtext(24, "\n              ");
        i0.ɵɵtemplate(25, AdaptDatetime2ClockComponent_div_25_Template, 4, 1, "div", 10);
        i0.ɵɵtext(26, "\n          ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(27, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(28, "\n  ");
    } if (rf & 2) {
        i0.ɵɵadvance(3);
        i0.ɵɵattribute("data-testid", ctx.testID + "_hhmmss");
        i0.ɵɵadvance(2);
        i0.ɵɵclassProp("active", ctx._activeFace === 0);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx.texts.hhBtn);
        i0.ɵɵadvance(4);
        i0.ɵɵclassProp("active", ctx._activeFace === 1);
        i0.ɵɵadvance(1);
        i0.ɵɵtextInterpolate(ctx.texts.mmBtn);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.seconds);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx._hasMeridiem);
        i0.ɵɵadvance(9);
        i0.ɵɵproperty("ngForOf", ctx.uiFace.ticks);
    } }, directives: [i4.NgIf, i4.NgForOf], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptDatetime2ClockComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-datetime2-clock',
                template: `
      <div class="a3t-clock--controls">
          <button type="button"
                  class="a3t-clock--control-btn m-end-2"
                  [attr.data-testid]="testID + '_hhmmss'"
                  tabindex="-1" (click)="gotoNextFace()">
              <span class="a3t-clock--control-item" [class.active]="_activeFace === 0">{{texts.hhBtn}}</span>
              <span class="a3t-clock--control-separator"></span>
              <span class="a3t-clock--control-item" [class.active]="_activeFace === 1">{{texts.mmBtn}}</span>
              <ng-container *ngIf="seconds">
                  <span class="a3t-clock--control-separator"></span>
                  <span class="a3t-clock--control-item" [class.active]="_activeFace === 2" *ngIf="seconds">{{texts.ssBtn}}</span>
              </ng-container>
          </button>
          <button type="button"
                  class="a3t-clock--control-btn"
                  [attr.data-testid]="testID + '_ampm'"
                  tabindex="-1" (click)="changeMeridiem()" *ngIf="_hasMeridiem">
              <span class="a3t-clock--control-item" [class.active]="!_isPM">{{texts.amBtn}}</span>
              <span class="a3t-clock--control-separator"></span>
              <span class="a3t-clock--control-item" [class.active]="_isPM">{{texts.pmBtn}}</span>
          </button>
      </div>
      <div class="a3t-clock--faces" #dndArea>
          <div #clockFaceContainerRef style="width: 100%; height: 100%">
              <div class="a3t-clock--face" *ngFor="let ticksSet of uiFace.ticks">
                  <div class="a3t-clock--tick"
                       *ngFor="let label of ticksSet; let index = index"
                       [class.a3t-clock--tick_active]="label.value === uiFace.active"
                       [class.readonly]="readonly"
                       [attr.data-testid]="testID + '_tick_' + index / ticksSet.length * 360"
                       [style.transform]="'rotate(' + (index / ticksSet.length * 360) + 'deg)'">
                      <div class="a3t-clock--tick-label" [style.transform]="'rotate(' + (- index / ticksSet.length * 360) + 'deg)'">
                          {{label.uiValue}}
                      </div>
                      <div class="a3t-clock--tick-arrow"></div>
                  </div>
              </div>
          </div>
      </div>
  `,
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[class.a3t-clock]': 'true',
                    '[class.a3t-clock_disabled]': 'disabled',
                    '[attr.aria-hidden]': 'true',
                }
            }]
    }], function () { return [{ type: i0.Renderer2 }, { type: i1.AnimationBuilder }, { type: i3.AdaptTranslateService }]; }, { testID: [{
            type: Input
        }], seconds: [{
            type: Input
        }], autoFaceSwitch: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], texts: [{
            type: Input
        }], timeSelect: [{
            type: Output
        }], clockFaceChange: [{
            type: Output
        }], dndArea: [{
            type: ViewChild,
            args: ['dndArea', { static: true }]
        }], clockFaceContainerRef: [{
            type: ViewChild,
            args: ['clockFaceContainerRef', { static: true }]
        }], activeFace: [{
            type: Input
        }], hasMeridiem: [{
            type: Input
        }], activeTime: [{
            type: Input
        }] }); })();
export class AdaptDatetime2PickerComponent {
    constructor(ts, _ngZone, _changeDetectorRef) {
        this.ts = ts;
        this._ngZone = _ngZone;
        this._changeDetectorRef = _changeDetectorRef;
        this.monthMode = false;
        this.activeFaceVariants = Clock2FaceUnit;
        this.defaultTexts = {};
        this.dateFormat = 'LL';
        this.timeFormat = 'LT';
        this.timePicker = false;
        this.timeOnly = false;
        this.monthAndYearOnly = false;
        this.monthFirst = false;
        this.timeSeconds = false;
        this.activeFace = Clock2FaceUnit.Hours;
        this.hideDatePickerSummary = false;
        this.valueChange = new EventEmitter();
        this.timeModeChange = new EventEmitter();
        this.clockFaceChange = new EventEmitter();
        this._timeMode = false;
        this._model = {
            year: 0,
            month: 0,
            day: 0,
            hour: 0,
            minute: 0,
            second: 0
        };
        this._localeHasMeridiem = IsLocaleHasMeridiem(moment.locale());
        this.setDefaultTexts(ts.getCurrentLanguage());
    }
    get timeMode() {
        return this.timePicker && this._timeMode || this.timeOnly;
    }
    set timeMode(v) {
        if (!this.timePicker) {
            return;
        }
        if (v !== undefined) {
            this._timeMode = !!v;
            this.timeModeChange.emit(!!v);
        }
        SafeCdr.detectChanges(this._changeDetectorRef);
    }
    set activeValue(v) {
        if (v && v.isValid()) {
            this._model.year = v.year();
            this._model.month = v.month();
            this._model.day = v.date();
            this._model.hour = v.hour();
            this._model.minute = v.minute();
            this._model.second = this.timeSeconds ? v.second() : 0;
            this.activeDate = v.clone();
        }
        else {
            this.activeDate = null;
        }
    }
    get clockState() {
        return [
            this._model.hour,
            this._model.minute,
            this._model.second,
        ];
    }
    get hasMeridiem() {
        let oddTime = false;
        if (this.timeFormat !== 'LT') {
            oddTime = !!this.timeFormat.match(/a/i);
        }
        else {
            oddTime = this._localeHasMeridiem;
        }
        return oddTime;
    }
    get dateSummary() {
        return this.activeDate && this.activeDate.isValid() ?
            this.activeDate.format(this.dateFormat) : (this.emptyDateHeading || this.defaultTexts.emptyDate);
    }
    get yearSummary() {
        return this.activeDate && this.activeDate.isValid() ?
            this.activeDate.format('YYYY') : (this.emptyDateHeading || this.defaultTexts.emptyYear);
    }
    get monthSummary() {
        return this.activeDate && this.activeDate.isValid() ?
            this.activeDate.format('MMMM') : this.emptyMonthHeading;
    }
    get timeSummary() {
        this.emptyTimeHeading = this.emptyTimeHeading || this.defaultTexts.emptyTime;
        return this.activeDate && this.activeDate.isValid() ? {
            hh: ('0' + this.activeDate.format(this.hasMeridiem ? 'h' : 'H')).substr(-2),
            mm: this.activeDate.format('mm'),
            ss: this.activeDate.format('ss'),
            a: this.activeDate.format('A')
        } : false;
    }
    ngOnInit() {
        const initVal = this.activeDate ? this.activeDate :
            this.initialValue && this.initialValue.isValid() ? this.initialValue : moment();
        if (!this.testID) {
            this.testID = `dt-${AdaptDatetime2PickerComponent.DT_ID++}`;
        }
        this._model.year = initVal.year();
        this._model.month = initVal.month();
        this._model.day = initVal.date();
        this._model.hour = initVal.hour();
        this._model.minute = initVal.minute();
        this._model.second = this.timeSeconds ? initVal.second() : 0;
        this.monthMode = this.monthFirst;
    }
    setDefaultTexts(translation) {
        this.defaultTexts.emptyTime = translation['adapt.datetime.emptyTime'];
        this.defaultTexts.emptyDate = translation['adapt.datetime.emptyDate'];
        this.defaultTexts.emptyYear = translation['adapt.datetime.emptyYear'];
        this.defaultTexts.timeSeparator = translation['adapt.datetime.timeSeparator'];
        this.defaultTexts.hours = translation['adapt.datetime.hours'];
        this.defaultTexts.minutes = translation['adapt.datetime.minutes'];
        this.defaultTexts.seconds = translation['adapt.datetime.seconds'];
        this.defaultTexts.meridiem = translation['adapt.datetime.meridiem'];
        this.defaultTexts.month = translation['adapt.datetime.month'];
        this.defaultTexts.amBtn = translation['adapt.datetime.am'];
        this.defaultTexts.pmBtn = translation['adapt.datetime.pm'];
    }
    selectDate(v) {
        if (!this.readonly) {
            this._model.year = v.year();
            if (!this.monthAndYearOnly) {
                this._model.month = v.month();
                this._model.day = v.date();
            }
            this.activeDate = v.clone();
            this.valueChange.emit(moment(this._model));
        }
    }
    selectTime(v) {
        this._model.hour = v[0];
        this._model.minute = v[1];
        this._model.second = v[2];
        this.valueChange.emit(moment(this._model));
    }
    selectMonth(v) {
        this._model.month = v.month();
        this.activeDate = v.clone();
        this.valueChange.emit(moment(this._model));
    }
    setCurrentDate() {
        this.activeDate = moment();
        this._ngZone.onStable
            .pipe(take(1))
            .subscribe(() => {
            this.hoursField.nativeElement.focus();
        });
    }
    changeMeridiem() {
        this._model.hour = (this._model.hour + 12) % 24;
        this.valueChange.emit(moment(this._model));
    }
    timeUnitKeydown(event, unit) {
        const keycode = getEventKeyCode(event);
        let action;
        switch (keycode) {
            case UP_ARROW: {
                event.preventDefault();
                action = '+';
                break;
            }
            case DOWN_ARROW: {
                event.preventDefault();
                action = '-';
                break;
            }
        }
        if (action) {
            switch (unit) {
                case 'h': {
                    if (this.hasMeridiem) {
                        this._model.hour = action === '+' ?
                            this._model.hour === 11 ? 0 : this._model.hour === 23 ? 12 : this._model.hour + 1 :
                            this._model.hour === 0 ? 11 : this._model.hour === 12 ? 23 : this._model.hour - 1;
                    }
                    else {
                        this._model.hour = action === '+' ?
                            (this._model.hour + 1) % 24 :
                            ((this._model.hour - 1) < 0 ? 23 : this._model.hour - 1);
                    }
                    break;
                }
                case 'm': {
                    this._model.minute = action === '+' ?
                        (this._model.minute + 1) % 60 :
                        ((this._model.minute - 1) < 0 ? 59 : this._model.minute - 1);
                    break;
                }
                case 's': {
                    this._model.second = action === '+' ?
                        (this._model.second + 1) % 60 :
                        ((this._model.second - 1) < 0 ? 59 : this._model.second - 1);
                    break;
                }
            }
            this.valueChange.emit(moment(this._model));
        }
    }
    timeUnitInput(event, unit) {
        const value = event.target.value;
        const parsedValue = parseInt(value, 10);
        const parsedValueIsNumber = Number.isInteger(parsedValue);
        switch (unit) {
            case 'h': {
                this._model.hour = parsedValueIsNumber ? parsedValue % (this.hasMeridiem ? 12 : 24) : 0;
                break;
            }
            case 'm': {
                this._model.minute = parsedValueIsNumber ? parsedValue % 60 : 0;
                break;
            }
            case 's': {
                this._model.second = parsedValueIsNumber ? parsedValue % 60 : 0;
                break;
            }
        }
        this.valueChange.emit(moment(this._model));
    }
}
// Locale time format
AdaptDatetime2PickerComponent.DT_ID = 1;
AdaptDatetime2PickerComponent.ɵfac = function AdaptDatetime2PickerComponent_Factory(t) { return new (t || AdaptDatetime2PickerComponent)(i0.ɵɵdirectiveInject(i3.AdaptTranslateService), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
AdaptDatetime2PickerComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptDatetime2PickerComponent, selectors: [["adapt-datetime2-picker"]], viewQuery: function AdaptDatetime2PickerComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c4, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.hoursField = _t.first);
    } }, inputs: { dateRange: "dateRange", dateFormat: "dateFormat", dateFilter: "dateFilter", timeFormat: "timeFormat", timePicker: "timePicker", timeOnly: "timeOnly", monthAndYearOnly: "monthAndYearOnly", monthFirst: "monthFirst", timeSeconds: "timeSeconds", activeFace: "activeFace", initialValue: "initialValue", disabled: "disabled", readonly: "readonly", hideDatePickerSummary: "hideDatePickerSummary", preventExpandedDateControls: "preventExpandedDateControls", emptyDateHeading: "emptyDateHeading", emptyTimeHeading: "emptyTimeHeading", emptyMonthHeading: "emptyMonthHeading", clockHeadings: "clockHeadings", testID: "testID", timeMode: "timeMode", activeValue: "activeValue" }, outputs: { valueChange: "valueChange", timeModeChange: "timeModeChange", clockFaceChange: "clockFaceChange" }, decls: 10, vars: 5, consts: [[1, "a3t-datetime"], ["class", "a3t-datetime--date-picker", 4, "ngIf"], ["class", "a3t-datetime--time-picker", 4, "ngIf"], ["class", "a3t-datetime--time-picker a3t-datetime--year-picker", 4, "ngIf"], [1, "a3t-datetime--date-picker"], ["class", "a3t-datetime--date-picker-summary", 4, "ngIf"], ["class", "a3t-datetime--date-picker-summary a3t-datetime--year-picker-summary", 4, "ngIf"], ["class", "a3t-datetime--date-picker-wrapper", 4, "ngIf"], [1, "a3t-datetime--date-picker-summary"], [1, "mx-2", 3, "adaptRadarDisableEventSending", "name"], ["type", "button", 3, "click"], [1, "a3t-datetime--date-picker-summary", "a3t-datetime--year-picker-summary"], [1, "a3t-datetime--date-picker-wrapper"], [3, "expandedControlsStyle", "initialDate", "activeDate", "monthAndYearOnly", "range", "filter", "disabled", "readonly", "testID", "daySelect"], [1, "a3t-datetime--time-picker"], [1, "a3t-datetime--time-picker-summary"], [1, "a3t-datetime--time-picker-summary-info"], [1, "a3t-datetime--time-picker-summary-input-wrapper"], [4, "ngIf"], ["type", "button", "class", "a3t-datetime--time-picker-summary-toggle", "aria-hidden", "true", "tabindex", "-1", 3, "rotation-180", "click", 4, "ngIf"], ["class", "a3t-datetime--time-picker-wrapper", 4, "ngIf"], ["type", "text", "role", "spinbutton", 1, "a3t-datetime--time-picker-summary-input", "a3t-datetime--time-picker-summary-input-field", 3, "value", "focus", "input", "keydown"], ["hoursField", ""], ["type", "button", "role", "spinbutton", 1, "a3t-datetime--time-picker-summary-input", "mx-1", 3, "value", "click", "keydown.arrowUp", "keydown.arrowDown"], ["tabindex", "0", 1, "a3t-datetime--time-picker-summary-input", 3, "focus"], ["type", "button", "aria-hidden", "true", "tabindex", "-1", 1, "a3t-datetime--time-picker-summary-toggle", 3, "click"], [1, "mr-2", 3, "adaptRadarDisableEventSending", "name"], [1, "a3t-datetime--time-picker-wrapper"], [3, "activeTime", "activeFace", "seconds", "hasMeridiem", "disabled", "readonly", "texts", "testID", "timeSelect", "clockFaceChange"], [1, "a3t-datetime--time-picker", "a3t-datetime--year-picker"], ["tabindex", "0", "role", "textbox", 1, "a3t-datetime--time-picker-summary-input"], [1, "ml-1", "mr-1", 3, "adaptRadarDisableEventSending", "name"], ["class", "a3t-datetime--month-picker-wrapper", 4, "ngIf"], [1, "a3t-datetime--month-picker-wrapper"], [3, "initialDate", "activeDate", "selectMonth"]], template: function AdaptDatetime2PickerComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtext(0, "\n      ");
        i0.ɵɵelementStart(1, "div", 0);
        i0.ɵɵtext(2, "\n          ");
        i0.ɵɵtemplate(3, AdaptDatetime2PickerComponent_div_3_Template, 8, 3, "div", 1);
        i0.ɵɵtext(4, "\n\n          ");
        i0.ɵɵtemplate(5, AdaptDatetime2PickerComponent_div_5_Template, 21, 8, "div", 2);
        i0.ɵɵtext(6, "\n\n          ");
        i0.ɵɵtemplate(7, AdaptDatetime2PickerComponent_div_7_Template, 21, 10, "div", 3);
        i0.ɵɵtext(8, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(9, "\n  ");
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("a3t-datetime_compact", ctx.hideDatePickerSummary);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx.timeOnly);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.timePicker);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.monthAndYearOnly);
    } }, directives: [i4.NgIf, i3.AdaptIconComponent, AdaptDatetime2CalendarComponent, i3.AdaptDragonInputHandlerDirective, AdaptDatetime2ClockComponent, i8.AdaptDatetime2MonthPickerComponent], encapsulation: 2, data: { animation: [
            trigger('heightAnimation', [
                transition('void => *', [
                    useAnimation(ANIMATION_NAME.height, {
                        params: {
                            from: '0',
                            to: '*'
                        }
                    })
                ]),
                transition('* => void', [
                    useAnimation(ANIMATION_NAME.height, {
                        params: {
                            from: '*',
                            to: '0'
                        }
                    })
                ])
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptDatetime2PickerComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-datetime2-picker',
                template: `
      <div class="a3t-datetime" [class.a3t-datetime_compact]="hideDatePickerSummary">
          <div class="a3t-datetime--date-picker" *ngIf="!timeOnly">
              <div class="a3t-datetime--date-picker-summary" *ngIf="timeMode && !timeOnly && !hideDatePickerSummary" [@heightAnimation]>
                  <adapt-icon [adaptRadarDisableEventSending]="true" [name]="'calendar'" class="mx-2"></adapt-icon>
                  <button type="button" (click)="timeMode = false"
                          [attr.data-testid]="testID + '_dateSummary'"
                          [attr.aria-label]="dateSummary">{{dateSummary}}</button>
              </div>

              <div class="a3t-datetime--date-picker-summary a3t-datetime--year-picker-summary"
                   *ngIf="monthMode && monthAndYearOnly && !hideDatePickerSummary" [@heightAnimation]>
                  <button type="button" (click)="monthMode = false"
                          [attr.data-testid]="testID + '_yearSummary'"
                          [attr.aria-label]="yearSummary">{{yearSummary}}</button>
              </div>

              <div class="a3t-datetime--date-picker-wrapper"
                   *ngIf="(!timeMode && !monthAndYearOnly) || (!monthMode && monthAndYearOnly)" [@heightAnimation]>
                  <adapt-datetime2-calendar [expandedControlsStyle]="!timePicker && !preventExpandedDateControls"
                                            [initialDate]="initialValue"
                                            [activeDate]="activeDate"
                                            [monthAndYearOnly]="monthAndYearOnly"
                                            [range]="dateRange"
                                            [filter]="dateFilter"
                                            [disabled]="disabled"
                                            [readonly]="readonly"
                                            [testID]="testID"
                                            (daySelect)="selectDate($event)"></adapt-datetime2-calendar>
              </div>
          </div>

          <div class="a3t-datetime--time-picker" *ngIf="timePicker">
              <div class="a3t-datetime--time-picker-summary"
                   [class.a3t-datetime--time-picker-summary_active]="timeMode">
                  <div class="a3t-datetime--time-picker-summary-info">
                      <adapt-icon [adaptRadarDisableEventSending]="true" [name]="'clock_o'" class="mx-2"></adapt-icon>

                      <div class="a3t-datetime--time-picker-summary-input-wrapper">
                          <ng-container *ngIf="timeSummary">
                              <input type="text"
                                     role="spinbutton"
                                     class="a3t-datetime--time-picker-summary-input a3t-datetime--time-picker-summary-input-field"
                                     #hoursField
                                     [value]="timeSummary.hh"
                                     [attr.aria-valuenow]="timeSummary.hh"
                                     [attr.aria-label]="defaultTexts.hours"
                                     (focus)="activeFace = activeFaceVariants.Hours; clockFaceChange.emit(activeFaceVariants.Hours)"
                                     (input)="timeUnitInput($event, 'h')"
                                     (keydown)="timeUnitKeydown($event, 'h')"/>
                              {{this.defaultTexts.timeSeparator}}
                              <input type="text"
                                     role="spinbutton"
                                     class="a3t-datetime--time-picker-summary-input a3t-datetime--time-picker-summary-input-field"
                                     [value]="timeSummary.mm"
                                     [attr.aria-valuenow]="timeSummary.mm"
                                     [attr.aria-label]="defaultTexts.minutes"
                                     (focus)="activeFace = activeFaceVariants.Minutes; clockFaceChange.emit(activeFaceVariants.Minutes)"
                                     (input)="timeUnitInput($event, 'm')"
                                     (keydown)="timeUnitKeydown($event, 'm')"/>

                              <ng-container *ngIf="timeSeconds">
                                  {{this.defaultTexts.timeSeparator}}
                                  <input type="text"
                                         role="spinbutton"
                                         class="a3t-datetime--time-picker-summary-input a3t-datetime--time-picker-summary-input-field"
                                         [value]="timeSummary.ss"
                                         [attr.aria-valuenow]="timeSummary.ss"
                                         [attr.aria-label]="defaultTexts.seconds"
                                         (focus)="activeFace = activeFaceVariants.Seconds; clockFaceChange.emit(activeFaceVariants.Seconds)"
                                         (input)="timeUnitInput($event, 's')"
                                         (keydown)="timeUnitKeydown($event, 's')"/>
                              </ng-container>

                              <ng-container *ngIf="hasMeridiem">
                                  <input type="button"
                                         role="spinbutton"
                                         class="a3t-datetime--time-picker-summary-input mx-1"
                                         [value]="timeSummary.a"
                                         [attr.aria-valuenow]="timeSummary.a"
                                         [attr.aria-label]="defaultTexts.meridiem"
                                         (click)="changeMeridiem()"
                                         (keydown.arrowUp)="$event.preventDefault(); changeMeridiem()"
                                         (keydown.arrowDown)="$event.preventDefault(); changeMeridiem()"/>
                              </ng-container>
                          </ng-container>

                          <ng-container *ngIf="!timeSummary">
                              <span tabindex="0" (focus)="setCurrentDate()"
                                    class="a3t-datetime--time-picker-summary-input">{{emptyTimeHeading}}</span>
                          </ng-container>

                      </div>
                  </div>

                  <button type="button"
                          class="a3t-datetime--time-picker-summary-toggle"
                          aria-hidden="true"
                          tabindex="-1"
                          [class.rotation-180]="!timeMode"
                          [attr.data-testid]="testID + '_timeMode'"
                          *ngIf="!timeOnly"
                          (click)="timeMode = !timeMode">
                      <adapt-icon [adaptRadarDisableEventSending]="true" [name]="'angle_down'" class="mr-2"></adapt-icon>
                  </button>
              </div>
              <div class="a3t-datetime--time-picker-wrapper"
                   *ngIf="timeMode"
                   [@heightAnimation]>
                  <adapt-datetime2-clock [activeTime]="clockState"
                                         [activeFace]="activeFace"
                                         [seconds]="timeSeconds"
                                         [hasMeridiem]="hasMeridiem"
                                         [disabled]="disabled"
                                         [readonly]="readonly"
                                         [texts]="clockHeadings"
                                         [testID]="testID"
                                         (timeSelect)="selectTime($event)"
                                         (clockFaceChange)="clockFaceChange.emit($event)">
                  </adapt-datetime2-clock>
              </div>
          </div>

          <div class="a3t-datetime--time-picker a3t-datetime--year-picker" *ngIf="monthAndYearOnly">
              <div class="a3t-datetime--time-picker-summary"
                   [class.a3t-datetime--time-picker-summary_active]="monthMode">
                  <div class="a3t-datetime--time-picker-summary-info">
                      <div class="a3t-datetime--time-picker-summary-input-wrapper">
              <span class="a3t-datetime--time-picker-summary-input"
                    tabindex="0"
                    [attr.aria-label]="defaultTexts.month"
                    role="textbox">
                {{ monthSummary }}
              </span>
                      </div>
                  </div>

                  <button type="button"
                          class="a3t-datetime--time-picker-summary-toggle"
                          aria-hidden="true"
                          tabindex="-1"
                          [attr.data-testid]="testID + '_monthMode'"
                          [class.rotation-180]="!monthMode"
                          (click)="monthMode = !monthMode">
                      <adapt-icon [adaptRadarDisableEventSending]="true" [name]="'angle_down'" class="ml-1 mr-1"></adapt-icon>
                  </button>
              </div>
              <div class="a3t-datetime--month-picker-wrapper" *ngIf="monthMode" [@heightAnimation]>
                  <adapt-datetime2-month-picker
                          [initialDate]="initialValue"
                          [activeDate]="activeDate"
                          (selectMonth)="selectMonth($event)"
                  ></adapt-datetime2-month-picker>
              </div>
          </div>
      </div>
  `,
                animations: [
                    trigger('heightAnimation', [
                        transition('void => *', [
                            useAnimation(ANIMATION_NAME.height, {
                                params: {
                                    from: '0',
                                    to: '*'
                                }
                            })
                        ]),
                        transition('* => void', [
                            useAnimation(ANIMATION_NAME.height, {
                                params: {
                                    from: '*',
                                    to: '0'
                                }
                            })
                        ])
                    ])
                ]
            }]
    }], function () { return [{ type: i3.AdaptTranslateService }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }]; }, { hoursField: [{
            type: ViewChild,
            args: ['hoursField', { static: false }]
        }], dateRange: [{
            type: Input
        }], dateFormat: [{
            type: Input
        }], dateFilter: [{
            type: Input
        }], timeFormat: [{
            type: Input
        }], timePicker: [{
            type: Input
        }], timeOnly: [{
            type: Input
        }], monthAndYearOnly: [{
            type: Input
        }], monthFirst: [{
            type: Input
        }], timeSeconds: [{
            type: Input
        }], activeFace: [{
            type: Input
        }], initialValue: [{
            type: Input
        }], disabled: [{
            type: Input
        }], readonly: [{
            type: Input
        }], hideDatePickerSummary: [{
            type: Input
        }], preventExpandedDateControls: [{
            type: Input
        }], emptyDateHeading: [{
            type: Input
        }], emptyTimeHeading: [{
            type: Input
        }], emptyMonthHeading: [{
            type: Input
        }], clockHeadings: [{
            type: Input
        }], testID: [{
            type: Input
        }], valueChange: [{
            type: Output
        }], timeModeChange: [{
            type: Output
        }], clockFaceChange: [{
            type: Output
        }], timeMode: [{
            type: Input
        }], activeValue: [{
            type: Input
        }] }); })();
//# sourceMappingURL=datetime2.js.map