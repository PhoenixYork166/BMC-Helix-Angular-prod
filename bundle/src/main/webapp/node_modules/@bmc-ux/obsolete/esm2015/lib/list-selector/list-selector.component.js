/* eslint-disable @typescript-eslint/no-explicit-any */
import { animate, query, style, transition, trigger, useAnimation } from '@angular/animations';
import { moveItemInArray } from '@angular/cdk/drag-drop';
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Injector, Input, NgZone, Output, Renderer2, ViewChild } from '@angular/core';
import { FormControl } from '@angular/forms';
import { take } from 'rxjs/operators';
import { differenceWith, isEqual, union, values, without } from 'lodash-es';
import { AdaptRadarAngularCustomEventName, AdaptRadarAngularService, AdaptTranslateService, ANIMATION_DURATION, ANIMATION_NAME, ANIMATION_TIMING_FUNCTION, createFormControlValidator, createFormControlValueAccessor, FormComponent, SafeCdr, toBoolean, } from '@bmc-ux/adapt-angular';
import * as i0 from "@angular/core";
import * as i1 from "@bmc-ux/adapt-angular";
import * as i2 from "@angular/common";
import * as i3 from "../select/select.component";
import * as i4 from "@angular/forms";
import * as i5 from "@angular/cdk/drag-drop";
const _c0 = ["list"];
function AdaptListComponent_adapt_rx_control_label_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-rx-control-label", 9);
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("label", ctx_r0.label)("requiredLabel", ctx_r0.texts.requiredText)("showRequiredLabel", ctx_r0.required)("tooltip", ctx_r0.tooltipConfig);
} }
function AdaptListComponent_ng_container_9_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "adapt-empty-state", 10);
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵelementStart(4, "div", 11);
    i0.ɵɵtext(5, "\n              ");
    i0.ɵɵprojection(6);
    i0.ɵɵtext(7, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n        ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("type", "objects")("label", ctx_r1.texts.notFound);
} }
function AdaptListComponent_ng_container_14_adapt_icon_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 19);
} if (rf & 2) {
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", "dots");
} }
function AdaptListComponent_ng_container_14_adapt_icon_10_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 20);
} if (rf & 2) {
    const item_r6 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", item_r6.icon)("ngClass", "text-" + item_r6.iconType);
} }
function AdaptListComponent_ng_container_14_span_12_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 21);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r6 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵproperty("ngClass", "badge-" + item_r6.badgeType);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(item_r6.badgeText);
} }
function AdaptListComponent_ng_container_14_button_15_Template(rf, ctx) { if (rf & 1) {
    const _r16 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 22);
    i0.ɵɵlistener("click", function AdaptListComponent_ng_container_14_button_15_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r16); const item_r6 = i0.ɵɵnextContext().$implicit; const ctx_r14 = i0.ɵɵnextContext(); return ctx_r14.deselectItem(item_r6.id); });
    i0.ɵɵtext(1, "\n                  ");
    i0.ɵɵelementStart(2, "span", 23);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n                ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r7 = i0.ɵɵnextContext().index;
    const ctx_r11 = i0.ɵɵnextContext();
    i0.ɵɵproperty("disabled", ctx_r11.disabled);
    i0.ɵɵattribute("aria-labelledby", "deleteText-" + i_r7 + " name-" + i_r7);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("id", "deleteText-" + i_r7);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r11.texts.remove);
} }
const _c1 = function (a0, a1) { return { "hover-disabled": a0, "disabled": a1 }; };
function AdaptListComponent_ng_container_14_Template(rf, ctx) { if (rf & 1) {
    const _r19 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementStart(2, "div", 12);
    i0.ɵɵlistener("cdkDragMoved", function AdaptListComponent_ng_container_14_Template_div_cdkDragMoved_2_listener() { i0.ɵɵrestoreView(_r19); const ctx_r18 = i0.ɵɵnextContext(); return ctx_r18.move(); });
    i0.ɵɵtext(3, "\n              ");
    i0.ɵɵelementStart(4, "div", 13);
    i0.ɵɵtext(5, "\n                ");
    i0.ɵɵtemplate(6, AdaptListComponent_ng_container_14_adapt_icon_6_Template, 1, 2, "adapt-icon", 14);
    i0.ɵɵtext(7, "\n                ");
    i0.ɵɵelementStart(8, "span", 15);
    i0.ɵɵlistener("keydown.ArrowUp", function AdaptListComponent_ng_container_14_Template_span_keydown_ArrowUp_8_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r19); const i_r7 = restoredCtx.index; const ctx_r20 = i0.ɵɵnextContext(); return ctx_r20.onUp($event, i_r7); })("keydown.ArrowDown", function AdaptListComponent_ng_container_14_Template_span_keydown_ArrowDown_8_listener($event) { const restoredCtx = i0.ɵɵrestoreView(_r19); const i_r7 = restoredCtx.index; const ctx_r21 = i0.ɵɵnextContext(); return ctx_r21.onDown($event, i_r7); });
    i0.ɵɵtext(9, "\n                    ");
    i0.ɵɵtemplate(10, AdaptListComponent_ng_container_14_adapt_icon_10_Template, 1, 3, "adapt-icon", 16);
    i0.ɵɵtext(11);
    i0.ɵɵtemplate(12, AdaptListComponent_ng_container_14_span_12_Template, 2, 2, "span", 17);
    i0.ɵɵtext(13, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n\n                ");
    i0.ɵɵtemplate(15, AdaptListComponent_ng_container_14_button_15_Template, 5, 4, "button", 18);
    i0.ɵɵtext(16, "\n\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(17, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, "\n          ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const item_r6 = ctx.$implicit;
    const i_r7 = ctx.index;
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("cdkDragDisabled", ctx_r3.disabled);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(9, _c1, ctx_r3.hideControls, ctx_r3.disabled));
    i0.ɵɵattribute("id", ctx_r3.id + "_item_" + i_r7);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !(ctx_r3.disabled || ctx_r3.readonly) && !!ctx_r3.enableDnD);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("id", "name-" + i_r7);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", item_r6.icon);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                  ", item_r6.name, "\n                  ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", item_r6.badgeText);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", !ctx_r3.readonly);
} }
function AdaptListComponent_div_18_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 24);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "p", 25);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = i0.ɵɵnextContext();
    i0.ɵɵproperty("@validationFeedbackAnimation", undefined);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r4.displayErrorMessage);
} }
function AdaptListComponent_div_20_p_2_strong_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "strong");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const error_r23 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", error_r23.name, " ");
} }
function AdaptListComponent_div_20_p_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 25);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵtemplate(2, AdaptListComponent_div_20_p_2_strong_2_Template, 2, 1, "strong", 4);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const error_r23 = ctx.$implicit;
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", error_r23.name);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n          ", error_r23.text, "\n        ");
} }
function AdaptListComponent_div_20_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 24);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptListComponent_div_20_p_2_Template, 4, 2, "p", 26);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵproperty("@validationFeedbackAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r5._self.errors);
} }
const _c2 = [[["", 8, "empty-text"]]];
const _c3 = function (a0) { return { "is-error": a0 }; };
const _c4 = [".empty-text"];
let listSelectorCount = 0;
export class AdaptListComponent extends FormComponent {
    constructor(_renderer, element, _injector, _changeDetectorRef, _ngZone, ts, _adaptRadarService) {
        super(_injector, ts, _adaptRadarService, element, AdaptRadarAngularCustomEventName.AdaptList);
        this._renderer = _renderer;
        this.element = element;
        this._injector = _injector;
        this._changeDetectorRef = _changeDetectorRef;
        this._ngZone = _ngZone;
        this._adaptRadarService = _adaptRadarService;
        this.createdList = [];
        this.isErrorExist = false;
        this.isEmptyState = false;
        this.hideControls = false;
        this._self = this;
        this.defaultSettings = {
            enableSearch: true,
            checkedStyle: 'checkbox',
            showCheckAll: true,
            showUncheckAll: true,
            hideLabel: false
        };
        this.defaultTexts = { selectTitle: '' };
        /**
         * Label icon with a tooltip or popover
         */
        this.tooltipConfig = null;
        this.listChanged = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.focus = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.blur = new EventEmitter();
        this.selectedIndexes = [];
        this.enableDnD = true;
        /**
         * Unique id of the element.
         */
        this.id = `list-selector-${listSelectorCount++}`;
        this._isTouched = false;
        this._onTouchedCallback = () => {
            return;
        };
        this.setDefaultTexts(ts.getCurrentLanguage());
    }
    get customClass() {
        return this._customClass;
    }
    set customClass(v) {
        this._renderer.addClass(this.element.nativeElement, v);
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(v) {
        this._disabled = toBoolean(v);
    }
    get maxHeight() {
        return this._maxHeight;
    }
    set maxHeight(v) {
        this._renderer.setStyle(this.listEl.nativeElement, 'maxHeight', v);
    }
    set value(v) {
        this._value = v;
    }
    get value() {
        return this._value;
    }
    updateListOrder(listIndexes) {
        this.createdList = [];
        if (this.selectedIndexes !== listIndexes) {
            this.selectedIndexes = listIndexes;
        }
        /**
         * in case there is existing list that should be loaded
         * we need to show it in given particular order
         * that is why there is a sorting of options base on selectedIndexes
         */
        listIndexes.map(function (index) {
            const element = this.options.find(item => item.id === index);
            if (element) {
                this.createdList.push();
            }
        }.bind(this));
    }
    ngOnInit() {
        // Sending radar event directly to avoid issues with the premature invocation of "initControl" in parent ngOnInit()
        // ERROR NullInjectorError: R3InjectorError(AppModule)[NgControl -> NgControl -> NgControl]:
        // So do not call super.ngOnInit() here
        // TODO ?
        this._adaptRadarService.sendGenericComponentEvent(AdaptRadarAngularCustomEventName.AdaptList);
        this.settings = Object.assign(Object.assign({}, this.defaultSettings), this.settings);
        this.texts = Object.assign(Object.assign({}, this.defaultTexts), this.texts);
        this.refToElement = this.element;
        if (!this.displayErrorMessage) {
            this.displayErrorMessage = this.defaultError;
        }
        this.updateListOrder(this.selectedIndexes);
        for (const prop in this._customErrorTexts) {
            if (prop) {
                this.overrideBuildInValidatorMessage(prop, () => this._customErrorTexts[prop]);
            }
        }
        if (this.formControl) {
            super.initControl();
        }
        if (this.tooltipInputIcon && !this.popoverIcon) {
            this.tooltipConfig = {
                iconName: this.tooltipInputIcon,
                content: this.tooltipInputText,
                placement: 'top',
                popoverMode: false
            };
        }
        else if (this.popoverIcon) {
            this.tooltipConfig = {
                iconName: this.popoverIcon,
                content: this.popoverContent,
                placement: this.popoverPlacement,
                popoverMode: true,
                popoverTriggers: this.popoverTriggers
            };
        }
    }
    setDefaultTexts(translation) {
        this.defaultTexts.requiredText = translation['adapt.common.required'];
        this.defaultTexts.remove = translation['adapt.listSelector.remove'];
        this.defaultTexts.notFound = translation['adapt.listSelector.notFound'];
        this.defaultTexts.selectTitle = translation['adapt.listSelector.selectTitle'];
        this.defaultError = translation['adapt.listSelector.error'];
    }
    writeValue(value) {
        if (value) {
            this.value = value;
        }
        SafeCdr.detectChanges(this._changeDetectorRef);
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    validate() {
        return;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    deselectItem(id) {
        /**
         *  without([1, 2, 1, 3, 4], [1, 2]); //=> [3, 4]
         */
        this.selectedIndexes = without(this.selectedIndexes, id);
        this._isTouched = true;
        this._onTouchedCallback();
        this.propagateChange(this.selectedIndexes);
    }
    updateListBuilder(obj) {
        /**
         *  need to convert obj to Array
         *  values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]
         */
        const newItems = values(obj);
        /**
         *  identify values need to be deleted
         *  difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]
         */
        const toBeRemoved = differenceWith(this.createdList, newItems, isEqual);
        /**
         * remove them
         *  without([1, 2, 1, 3, 4], 1, 2); //=> [3, 4]
         */
        const stay = without(this.createdList, ...toBeRemoved);
        /**
         *  now we need to add new values to the list
         *  union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]
         */
        this.createdList = union(stay, newItems);
        if (this._isTouched) {
            this.propagateChange(this.createdList);
        }
    }
    onListAnimationDone(event) {
        if (event.fromState === 0 || event.toState === 0) {
            return;
        }
        this.isEmptyState = !this.createdList.length;
        this.updateModel();
    }
    onListAnimationStart(event) {
        if (event.fromState === 0 || event.toState === 0) {
            this.isEmptyState = !this.createdList.length;
            this.updateModel();
        }
    }
    dropdownClosed() {
        this._isTouched = true;
        this.checkValid();
        this._onTouchedCallback();
        this.propagateChange(this.createdList);
    }
    // defaultTitle: 'Available (' + this.opts.length + ')',
    updateSelectTitle() {
        // console.log(' (' + (this.options.length - this.selectedIndexes.length) + ')');
        // this.selectTexts.checkedPlural = this.texts.selectTitle + ' (' + (this.options.length - this.selectedIndexes.length) + ')';
        // this.selectTexts.defaultTitle = this.texts.selectTitle + ' (' + (this.options.length - this.selectedIndexes.length) + ')';
    }
    updateModel() {
        this.checkValid();
        this.listChanged.emit(this.createdList);
    }
    drop(event) {
        moveItemInArray(this.createdList, event.previousIndex, event.currentIndex);
        this.hideControls = false;
        this._updateControl();
    }
    onUp(e, prevIndex) {
        if (this.disabled || this.readonly) {
            return;
        }
        e.preventDefault(); // we do not want to scroll the page
        moveItemInArray(this.createdList, prevIndex, (prevIndex === 0) ? 0 : --prevIndex);
        this._ngZone.onStable
            .pipe(take(1))
            .subscribe(() => {
            e.target.focus();
        });
        this._updateControl();
    }
    onDown(e, prevIndex) {
        if (this.disabled || this.readonly) {
            return;
        }
        e.preventDefault();
        let currentIndex = this.createdList.length;
        if (prevIndex !== this.createdList.length) {
            currentIndex = prevIndex++;
        }
        moveItemInArray(this.createdList, prevIndex, currentIndex);
        this._updateControl();
    }
    move() {
        this.hideControls = true;
    }
    checkValid() {
        this.isErrorExist = (this.required && !this.createdList.length && this._isTouched);
    }
    _updateControl() {
        this._isTouched = true;
        this._onTouchedCallback();
        this.propagateChange(this.createdList);
        this.updateModel();
    }
}
AdaptListComponent.ɵfac = function AdaptListComponent_Factory(t) { return new (t || AdaptListComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.AdaptTranslateService), i0.ɵɵdirectiveInject(i1.AdaptRadarAngularService)); };
AdaptListComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptListComponent, selectors: [["adapt-list-selector"]], viewQuery: function AdaptListComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.listEl = _t.first);
    } }, hostVars: 1, hostBindings: function AdaptListComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("id", ctx.id);
    } }, inputs: { selectedIndexes: "selectedIndexes", options: "options", settings: "settings", selectTexts: "selectTexts", texts: "texts", label: "label", enableDnD: "enableDnD", id: "id", name: "name", tooltipInputIcon: "tooltipInputIcon", tooltipInputText: "tooltipInputText", displayErrorMessage: "displayErrorMessage", formControl: "formControl", customClass: "customClass", disabled: "disabled", maxHeight: "maxHeight", updateListOrder: "updateListOrder" }, outputs: { listChanged: "listChanged", focus: "focus", blur: "blur" }, features: [i0.ɵɵProvidersFeature([
            createFormControlValueAccessor(AdaptListComponent),
            createFormControlValidator(AdaptListComponent),
        ]), i0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 23, vars: 18, consts: [[1, "adapt-list-selector", 3, "ngClass"], [3, "label", "requiredLabel", "showRequiredLabel", "tooltip", 4, "ngIf"], [1, "adapt-list"], [3, "options", "settings", "disabled", "readonly", "parentElementRef", "texts", "ngModel", "customClass", "ngModelChange", "modelArrayChanged", "dropdownClosed"], [4, "ngIf"], ["cdkDropList", "", 1, "adapt-list-container", 3, "cdkDropListDisabled", "cdkDropListDropped"], ["list", ""], [4, "ngFor", "ngForOf"], ["class", "has-danger", 4, "ngIf"], [3, "label", "requiredLabel", "showRequiredLabel", "tooltip"], [3, "type", "label"], [1, "empty-info"], ["cdkDrag", "", "cdkDragLockAxis", "y", 1, "adapt-list-builder__list-wrp", 3, "cdkDragDisabled", "cdkDragMoved"], [1, "adapt-list-item", 3, "ngClass"], ["class", "adapt-list-drag m-end-1", 3, "adaptRadarDisableEventSending", "name", 4, "ngIf"], ["tabindex", "0", 1, "adapt-list-name", 3, "id", "keydown.ArrowUp", "keydown.ArrowDown"], ["class", "adapt-list__icon", 3, "adaptRadarDisableEventSending", "name", "ngClass", 4, "ngIf"], ["class", "badge adapt-list__badge", 3, "ngClass", 4, "ngIf"], ["type", "button", "class", "d-icon-trash_adapt btn btn-link list-remove", 3, "disabled", "click", 4, "ngIf"], [1, "adapt-list-drag", "m-end-1", 3, "adaptRadarDisableEventSending", "name"], [1, "adapt-list__icon", 3, "adaptRadarDisableEventSending", "name", "ngClass"], [1, "badge", "adapt-list__badge", 3, "ngClass"], ["type", "button", 1, "d-icon-trash_adapt", "btn", "btn-link", "list-remove", 3, "disabled", "click"], [1, "sr-only", 3, "id"], [1, "has-danger"], [1, "form-control-feedback", "m-0", "pt-1", "pb-2"], ["class", "form-control-feedback m-0 pt-1 pb-2", 4, "ngFor", "ngForOf"]], template: function AdaptListComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef(_c2);
        i0.ɵɵtext(0, "\n    ");
        i0.ɵɵelementStart(1, "div", 0);
        i0.ɵɵtext(2, "\n      ");
        i0.ɵɵtemplate(3, AdaptListComponent_adapt_rx_control_label_3_Template, 1, 4, "adapt-rx-control-label", 1);
        i0.ɵɵtext(4, "\n\n      ");
        i0.ɵɵelementStart(5, "div", 2);
        i0.ɵɵtext(6, "\n        ");
        i0.ɵɵelementStart(7, "adapt-select", 3);
        i0.ɵɵlistener("ngModelChange", function AdaptListComponent_Template_adapt_select_ngModelChange_7_listener($event) { return ctx.selectedIndexes = $event; })("modelArrayChanged", function AdaptListComponent_Template_adapt_select_modelArrayChanged_7_listener($event) { return ctx.updateListBuilder($event); })("dropdownClosed", function AdaptListComponent_Template_adapt_select_dropdownClosed_7_listener() { return ctx.dropdownClosed(); });
        i0.ɵɵelementEnd();
        i0.ɵɵtext(8, "\n\n        ");
        i0.ɵɵtemplate(9, AdaptListComponent_ng_container_9_Template, 10, 2, "ng-container", 4);
        i0.ɵɵtext(10, "\n\n        ");
        i0.ɵɵelementStart(11, "div", 5, 6);
        i0.ɵɵlistener("cdkDropListDropped", function AdaptListComponent_Template_div_cdkDropListDropped_11_listener($event) { return ctx.drop($event); })("@listAnimation.done", function AdaptListComponent_Template_div_animation_listAnimation_done_11_listener($event) { return ctx.onListAnimationDone($event); })("@listAnimation.start", function AdaptListComponent_Template_div_animation_listAnimation_start_11_listener($event) { return ctx.onListAnimationStart($event); });
        i0.ɵɵtext(13, "\n          ");
        i0.ɵɵtemplate(14, AdaptListComponent_ng_container_14_Template, 19, 12, "ng-container", 7);
        i0.ɵɵtext(15, "\n        ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(16, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(17, "\n\n      ");
        i0.ɵɵtemplate(18, AdaptListComponent_div_18_Template, 5, 2, "div", 8);
        i0.ɵɵtext(19, "\n\n      ");
        i0.ɵɵtemplate(20, AdaptListComponent_div_20_Template, 4, 2, "div", 8);
        i0.ɵɵtext(21, "\n\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(22, "\n  ");
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(16, _c3, ctx.isErrorExist));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx.settings.hideLabel);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("options", ctx.options)("settings", ctx.settings)("disabled", ctx.disabled)("readonly", ctx.readonly)("parentElementRef", ctx.refToElement)("texts", ctx.selectTexts)("ngModel", ctx.selectedIndexes)("customClass", "adapt-list-select");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.isEmptyState);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("cdkDropListDisabled", ctx.disabled || ctx.readonly || !ctx.enableDnD)("@listAnimation", ctx.createdList.length);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngForOf", ctx.createdList);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", ctx.isErrorExist && !ctx.formControl);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.formControl && ctx._self.errors.length > 0 && ctx._self.control.touched);
    } }, directives: [i2.NgClass, i2.NgIf, i3.AdaptSelectComponent, i4.NgControlStatus, i4.NgModel, i5.CdkDropList, i2.NgForOf, i1.AdaptRxControlLabelComponent, i1.AdaptEmptyStateComponent, i5.CdkDrag, i1.AdaptIconComponent], encapsulation: 2, data: { animation: [
            trigger('listAnimation', [
                transition(':enter, * => 0', []),
                transition(':decrement', [
                    query('.adapt-list-builder__list-wrp:leave', [
                        style({ transform: 'scale(1)', opacity: 1, height: '*' }),
                        animate(ANIMATION_DURATION.medium + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ transform: 'scale(0.5)', opacity: 0, height: 0 }))
                    ], { optional: true })
                ]),
                transition(':increment', [
                    query('.adapt-list-builder__list-wrp:enter', [
                        style({ transform: 'scale(0.5)', opacity: 0 }),
                        animate(ANIMATION_DURATION.medium + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ transform: 'scale(1)', opacity: 1 }))
                    ], { optional: true })
                ]),
            ]),
            trigger('validationFeedbackAnimation', [
                transition(':enter', [
                    useAnimation(ANIMATION_NAME.fadeIn)
                ]),
                transition(':leave', [
                    useAnimation(ANIMATION_NAME.fadeOut)
                ])
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptListComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-list-selector',
                template: `
    <div class="adapt-list-selector" [ngClass]="{'is-error': isErrorExist}">
      <adapt-rx-control-label *ngIf="!settings.hideLabel"
                              [label]="label"
                              [requiredLabel]="texts.requiredText"
                              [showRequiredLabel]="required"
                              [tooltip]="tooltipConfig"></adapt-rx-control-label>

      <div class="adapt-list">
        <adapt-select [options]="options"
                      [settings]="settings"
                      [disabled]="disabled"
                      [readonly]="readonly"
                      [parentElementRef]="refToElement"
                      [texts]="selectTexts"
                      [(ngModel)]="selectedIndexes"
                      (modelArrayChanged)="updateListBuilder($event)"
                      (dropdownClosed)="dropdownClosed()"
                      [customClass]="'adapt-list-select'"></adapt-select>

        <ng-container *ngIf="isEmptyState">
          <adapt-empty-state [type]="'objects'" [label]="texts.notFound">
            <div class="empty-info">
              <ng-content select=".empty-text"></ng-content>
            </div>
          </adapt-empty-state>
        </ng-container>

        <div cdkDropList class="adapt-list-container" (cdkDropListDropped)="drop($event)" #list
             [cdkDropListDisabled]="disabled || readonly || !enableDnD"
             [@listAnimation]="createdList.length"
             (@listAnimation.done)="onListAnimationDone($event)"
             (@listAnimation.start)="onListAnimationStart($event)">
          <ng-container *ngFor="let item of createdList; let i = index">
            <div class="adapt-list-builder__list-wrp" cdkDrag cdkDragLockAxis="y" (cdkDragMoved)="move()"
                 [cdkDragDisabled]="disabled">
              <div class="adapt-list-item" [ngClass]="{'hover-disabled' : hideControls, 'disabled' : disabled }"
                   [attr.id]="id + '_item_' + i">
                <adapt-icon *ngIf="!(disabled || readonly) && !!enableDnD"
                            [adaptRadarDisableEventSending]="true"
                            [name]="'dots'"
                            class="adapt-list-drag m-end-1"></adapt-icon>
                <span class="adapt-list-name" tabindex="0"
                      (keydown.ArrowUp)="onUp($event, i)"
                      (keydown.ArrowDown)="onDown($event, i)"
                      [id]="'name-' + i">
                    <adapt-icon *ngIf="item.icon"
                                [adaptRadarDisableEventSending]="true"
                                [name]="item.icon"
                                class="adapt-list__icon"
                                [ngClass]="'text-' + item.iconType"></adapt-icon>
                  {{item.name}}
                  <span *ngIf="item.badgeText" class="badge adapt-list__badge"
                        [ngClass]="'badge-'+item.badgeType">{{item.badgeText}}</span>
                  </span>

                <button (click)="deselectItem(item.id)"
                        [disabled]="disabled"
                        *ngIf="!readonly"
                        type="button"
                        class="d-icon-trash_adapt btn btn-link list-remove"
                        [attr.aria-labelledby]="'deleteText-' + i + ' name-' + i">
                  <span [id]="'deleteText-' + i" class="sr-only">{{texts.remove}}</span>
                </button>

              </div>
            </div>
          </ng-container>
        </div>
      </div>

      <div class="has-danger" *ngIf="isErrorExist && !formControl" [@validationFeedbackAnimation]>
        <p class="form-control-feedback m-0 pt-1 pb-2">{{displayErrorMessage}}</p>
      </div>

      <div class="has-danger" *ngIf="formControl && _self.errors.length > 0 && _self.control.touched"
           [@validationFeedbackAnimation]>
        <p class="form-control-feedback m-0 pt-1 pb-2" *ngFor="let error of _self.errors">
          <strong *ngIf="error.name">{{error.name}} </strong>
          {{error.text}}
        </p>
      </div>

    </div>
  `,
                animations: [
                    trigger('listAnimation', [
                        transition(':enter, * => 0', []),
                        transition(':decrement', [
                            query('.adapt-list-builder__list-wrp:leave', [
                                style({ transform: 'scale(1)', opacity: 1, height: '*' }),
                                animate(ANIMATION_DURATION.medium + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ transform: 'scale(0.5)', opacity: 0, height: 0 }))
                            ], { optional: true })
                        ]),
                        transition(':increment', [
                            query('.adapt-list-builder__list-wrp:enter', [
                                style({ transform: 'scale(0.5)', opacity: 0 }),
                                animate(ANIMATION_DURATION.medium + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ transform: 'scale(1)', opacity: 1 }))
                            ], { optional: true })
                        ]),
                    ]),
                    trigger('validationFeedbackAnimation', [
                        transition(':enter', [
                            useAnimation(ANIMATION_NAME.fadeIn)
                        ]),
                        transition(':leave', [
                            useAnimation(ANIMATION_NAME.fadeOut)
                        ])
                    ])
                ],
                providers: [
                    createFormControlValueAccessor(AdaptListComponent),
                    createFormControlValidator(AdaptListComponent),
                ],
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[attr.id]': 'id'
                }
            }]
    }], function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i0.Injector }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i1.AdaptTranslateService }, { type: i1.AdaptRadarAngularService }]; }, { listEl: [{
            type: ViewChild,
            args: ['list', { static: true }]
        }], listChanged: [{
            type: Output
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], selectedIndexes: [{
            type: Input
        }], options: [{
            type: Input
        }], settings: [{
            type: Input
        }], selectTexts: [{
            type: Input
        }], texts: [{
            type: Input
        }], label: [{
            type: Input
        }], enableDnD: [{
            type: Input
        }], id: [{
            type: Input
        }], name: [{
            type: Input
        }], tooltipInputIcon: [{
            type: Input
        }], tooltipInputText: [{
            type: Input
        }], displayErrorMessage: [{
            type: Input
        }], formControl: [{
            type: Input
        }], customClass: [{
            type: Input
        }], disabled: [{
            type: Input
        }], maxHeight: [{
            type: Input
        }], updateListOrder: [{
            type: Input
        }] }); })();
//# sourceMappingURL=list-selector.component.js.map