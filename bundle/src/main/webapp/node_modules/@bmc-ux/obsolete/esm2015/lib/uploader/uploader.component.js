/* eslint-disable @typescript-eslint/no-explicit-any */
import { fromEvent as observableFromEvent, ReplaySubject } from 'rxjs';
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, Injector, Input, IterableDiffers, Output, QueryList, Renderer2, ViewChild, ViewChildren, ViewEncapsulation } from '@angular/core';
import { AnimationBuilder } from '@angular/animations';
import { Directionality } from '@angular/cdk/bidi';
import { FormControl } from '@angular/forms';
import { takeUntil } from 'rxjs/operators';
import { AdaptRadarAngularCustomEventName, AdaptTranslateService, AdaptUploaderItemComponent, adaptWarn, ANIMATION_DND, ANIMATION_DROP, ANIMATION_INIT_STATE, createFormControlValidator, createFormControlValueAccessor, FILE_IS_UPLOADED_PERCENTAGE, FileManager, FileSize, formatString, FormComponent, IconManager, INITIAL_CHUNK_NUMBER, isUndefined, MessageStatus, retrieveFileSize, SafeCdr, toArray, UploaderMode, UploaderSelectionMode } from '@bmc-ux/adapt-angular';
import { isNil } from 'lodash-es';
import { AdaptRadarService } from '@bmc-ux/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "@bmc-ux/adapt-angular";
import * as i2 from "@angular/cdk/bidi";
import * as i3 from "@angular/animations";
import * as i4 from "@bmc-ux/adapt-radar";
import * as i5 from "@angular/common";
const _c0 = ["fileInput"];
const _c1 = ["fileList"];
const _c2 = ["dropEnter"];
const _c3 = ["dnd"];
const _c4 = ["drop"];
const _c5 = ["droppableAreaBlock"];
function AdaptUploaderComponent_ng_template_17_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n      ");
} }
function AdaptUploaderComponent_adapt_alert_23_ng_template_2_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementStart(2, "div", 21);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n          ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r19 = i0.ɵɵreference(4);
    const ctx_r18 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptPopover", _r19)("adaptRadarDisableEventSending", true)("placement", "auto")("maxWidth", 600);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n              ", ctx_r18.texts.remainingFilesListLabel, "\n            ");
} }
function AdaptUploaderComponent_adapt_alert_23_ng_template_2_ng_template_3_ng_template_1_span_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span");
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r25 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("", ctx_r25.texts.comma, " ");
} }
function AdaptUploaderComponent_adapt_alert_23_ng_template_2_ng_template_3_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n              ");
    i0.ɵɵelementStart(1, "span", 23);
    i0.ɵɵtext(2);
    i0.ɵɵtemplate(3, AdaptUploaderComponent_adapt_alert_23_ng_template_2_ng_template_3_ng_template_1_span_3_Template, 2, 1, "span", 11);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n            ");
} if (rf & 2) {
    const file_r22 = ctx.$implicit;
    const last_r24 = ctx.last;
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(file_r22.name);
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", !last_r24);
} }
function AdaptUploaderComponent_adapt_alert_23_ng_template_2_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n            ");
    i0.ɵɵtemplate(1, AdaptUploaderComponent_adapt_alert_23_ng_template_2_ng_template_3_ng_template_1_Template, 5, 2, "ng-template", 22);
    i0.ɵɵtext(2, "\n          ");
} if (rf & 2) {
    const msg_r15 = i0.ɵɵnextContext(2).$implicit;
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngForOf", msg_r15.files);
} }
function AdaptUploaderComponent_adapt_alert_23_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0);
    i0.ɵɵtemplate(1, AdaptUploaderComponent_adapt_alert_23_ng_template_2_ng_container_1_Template, 5, 5, "ng-container", 11);
    i0.ɵɵtext(2, "\n\n          ");
    i0.ɵɵtemplate(3, AdaptUploaderComponent_adapt_alert_23_ng_template_2_ng_template_3_Template, 3, 1, "ng-template", null, 20, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(5, "\n        ");
} if (rf & 2) {
    const msg_r15 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵtextInterpolate1("\n          ", msg_r15.text, "\n          ");
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", msg_r15.files && msg_r15.files.length);
} }
const _c6 = function (a0, a1, a3) { return { title: a0, content: a1, type: "inline", variant: a3, icon: false }; };
function AdaptUploaderComponent_adapt_alert_23_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "adapt-alert", 18);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptUploaderComponent_adapt_alert_23_ng_template_2_Template, 6, 2, "ng-template", null, 19, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const msg_r15 = ctx.$implicit;
    const _r16 = i0.ɵɵreference(3);
    i0.ɵɵproperty("config", i0.ɵɵpureFunction3(1, _c6, msg_r15.title ? msg_r15.title : "", _r16, msg_r15.variant));
} }
const _c7 = function (a0, a1) { return { title: a0, content: a1, type: "inline", variant: "danger", icon: false }; };
function AdaptUploaderComponent_ng_container_25_adapt_alert_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-alert", 18);
} if (rf & 2) {
    const error_r29 = ctx.$implicit;
    i0.ɵɵproperty("config", i0.ɵɵpureFunction2(1, _c7, error_r29.name, error_r29.text));
} }
function AdaptUploaderComponent_ng_container_25_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵtemplate(2, AdaptUploaderComponent_ng_container_25_adapt_alert_2_Template, 1, 4, "adapt-alert", 10);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r5.context.errors);
} }
function AdaptUploaderComponent_div_29_div_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 30);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "p", 27);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵelement(5, "span", 28);
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵelementStart(7, "p", 27);
    i0.ɵɵtext(8);
    i0.ɵɵpipe(9, "fileTypes");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r30 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r30.texts.allowedTypes);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(9, 2, ctx_r30.allowedTypes, ctx_r30.texts.fileTypesDivider));
} }
function AdaptUploaderComponent_div_29_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 24);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptUploaderComponent_div_29_div_2_Template, 11, 5, "div", 25);
    i0.ɵɵtext(3, "\n\n      ");
    i0.ɵɵelementStart(4, "div", 26);
    i0.ɵɵtext(5, "\n        ");
    i0.ɵɵelementStart(6, "p", 27);
    i0.ɵɵtext(7);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n        ");
    i0.ɵɵelement(9, "span", 28);
    i0.ɵɵtext(10, "\n        ");
    i0.ɵɵelementStart(11, "p", 27);
    i0.ɵɵtext(12);
    i0.ɵɵpipe(13, "fileSize");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n\n      ");
    i0.ɵɵelementStart(16, "div", 29);
    i0.ɵɵtext(17, "\n        ");
    i0.ɵɵelementStart(18, "p", 27);
    i0.ɵɵtext(19);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(20, "\n        ");
    i0.ɵɵelement(21, "span", 28);
    i0.ɵɵtext(22, "\n        ");
    i0.ɵɵelementStart(23, "p", 27);
    i0.ɵɵtext(24);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(25, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(26, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r6.allowedTypes.length);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r6.texts.maxFileSize);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(13, 5, ctx_r6.maxFileSize));
    i0.ɵɵadvance(7);
    i0.ɵɵtextInterpolate(ctx_r6.texts.filesCount);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r6.filesCount);
} }
function AdaptUploaderComponent_div_32_p_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 42);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r31 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r31.filesAddedCount);
} }
function AdaptUploaderComponent_div_32_p_8_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 42);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r32 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("text-info", ctx_r32.maxFileCountUploaded);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r32.filesUploadedCount);
} }
function AdaptUploaderComponent_div_32_button_10_Template(rf, ctx) { if (rf & 1) {
    const _r39 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 43);
    i0.ɵɵlistener("click", function AdaptUploaderComponent_div_32_button_10_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r39); const ctx_r38 = i0.ɵɵnextContext(2); return ctx_r38.cancelAllUploads(); });
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelement(2, "span", 44);
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵelementStart(4, "span");
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n          ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r33 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r33.texts.btnCancelAllUploads);
} }
function AdaptUploaderComponent_div_32_adapt_uploader_item_13_Template(rf, ctx) { if (rf & 1) {
    const _r43 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-uploader-item", 45);
    i0.ɵɵlistener("afterFileRemove", function AdaptUploaderComponent_div_32_adapt_uploader_item_13_Template_adapt_uploader_item_afterFileRemove_0_listener($event) { i0.ɵɵrestoreView(_r43); const ctx_r42 = i0.ɵɵnextContext(2); return ctx_r42.removedFromQueue($event); })("fileDeleted", function AdaptUploaderComponent_div_32_adapt_uploader_item_13_Template_adapt_uploader_item_fileDeleted_0_listener($event) { i0.ɵɵrestoreView(_r43); const ctx_r44 = i0.ɵɵnextContext(2); return ctx_r44.fileDeleted($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r40 = ctx.$implicit;
    const id_r41 = ctx.index;
    const ctx_r34 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("disabled", ctx_r34.disabled)("readonly", ctx_r34.readonly)("collapseBlock", false)("reusable", ctx_r34.reusable)("indeterminateFileLoader", ctx_r34.indeterminateFileLoader)("url", ctx_r34.url)("deleteUrl", ctx_r34.deleteUrl)("chunkSize", ctx_r34.chunkSize)("customErrors", ctx_r34.customErrors)("file", file_r40)("id", id_r41)("texts", ctx_r34.texts);
} }
function AdaptUploaderComponent_div_32_adapt_uploader_item_19_Template(rf, ctx) { if (rf & 1) {
    const _r48 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "adapt-uploader-item", 46);
    i0.ɵɵlistener("afterFileRemove", function AdaptUploaderComponent_div_32_adapt_uploader_item_19_Template_adapt_uploader_item_afterFileRemove_0_listener($event) { i0.ɵɵrestoreView(_r48); const ctx_r47 = i0.ɵɵnextContext(2); return ctx_r47.removedFromQueue($event); })("fileDeleted", function AdaptUploaderComponent_div_32_adapt_uploader_item_19_Template_adapt_uploader_item_fileDeleted_0_listener($event) { i0.ɵɵrestoreView(_r48); const ctx_r49 = i0.ɵɵnextContext(2); return ctx_r49.fileDeleted($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const file_r45 = ctx.$implicit;
    const id_r46 = ctx.index;
    const ctx_r36 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("disabled", ctx_r36.disabled)("readonly", ctx_r36.readonly)("reusable", ctx_r36.reusable)("indeterminateFileLoader", ctx_r36.indeterminateFileLoader)("url", ctx_r36.url)("deleteUrl", ctx_r36.deleteUrl)("chunkSize", ctx_r36.chunkSize)("customErrors", ctx_r36.customErrors)("file", file_r45)("id", id_r46 + ctx_r36.visibleFiles)("texts", ctx_r36.texts);
} }
function AdaptUploaderComponent_div_32_div_23_Template(rf, ctx) { if (rf & 1) {
    const _r51 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 47);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "button", 48);
    i0.ɵɵlistener("click", function AdaptUploaderComponent_div_32_div_23_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r51); i0.ɵɵnextContext(); const _r35 = i0.ɵɵreference(17); return _r35.toggle(); });
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵelementStart(4, "span");
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(7, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵnextContext();
    const _r35 = i0.ɵɵreference(17);
    const ctx_r37 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵattribute("aria-expanded", !_r35.isCollapsed);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(_r35.isCollapsed ? ctx_r37.texts.showMore : ctx_r37.texts.showLess);
} }
function AdaptUploaderComponent_div_32_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 31);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "div", 32);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementStart(4, "div", 33);
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵtemplate(6, AdaptUploaderComponent_div_32_p_6_Template, 2, 1, "p", 34);
    i0.ɵɵtext(7, "\n          ");
    i0.ɵɵtemplate(8, AdaptUploaderComponent_div_32_p_8_Template, 2, 3, "p", 35);
    i0.ɵɵtext(9, "\n          ");
    i0.ɵɵtemplate(10, AdaptUploaderComponent_div_32_button_10_Template, 7, 2, "button", 36);
    i0.ɵɵtext(11, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n        ");
    i0.ɵɵtemplate(13, AdaptUploaderComponent_div_32_adapt_uploader_item_13_Template, 1, 12, "adapt-uploader-item", 37);
    i0.ɵɵpipe(14, "slice");
    i0.ɵɵtext(15, "\n\n        ");
    i0.ɵɵelementStart(16, "div", 38, 39);
    i0.ɵɵtext(18, "\n          ");
    i0.ɵɵtemplate(19, AdaptUploaderComponent_div_32_adapt_uploader_item_19_Template, 1, 11, "adapt-uploader-item", 40);
    i0.ɵɵpipe(20, "slice");
    i0.ɵɵtext(21, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(22, "\n\n        ");
    i0.ɵɵtemplate(23, AdaptUploaderComponent_div_32_div_23_Template, 8, 2, "div", 41);
    i0.ɵɵtext(24, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(25, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("ngIf", ctx_r7.isManualMode());
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r7.isManualMode());
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r7.isUploadingProcess);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind3(14, 6, ctx_r7.files, 0, ctx_r7.visibleFiles));
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("ngForOf", i0.ɵɵpipeBind2(20, 10, ctx_r7.files, ctx_r7.visibleFiles));
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r7.files.length > ctx_r7.visibleFiles);
} }
const _c8 = function (a1) { return { title: "Folders uploading", content: a1, type: "inline", variant: "warning" }; };
function AdaptUploaderComponent_adapt_alert_35_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "adapt-alert", 49);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r8 = i0.ɵɵnextContext();
    i0.ɵɵproperty("config", i0.ɵɵpureFunction1(1, _c8, ctx_r8.folderUploadingForbiddenMsg));
} }
function AdaptUploaderComponent_ng_template_39_Template(rf, ctx) { }
function AdaptUploaderComponent_ng_template_42_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵelementStart(1, "adapt-empty-state", 50);
    i0.ɵɵtext(2, "\n  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n");
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("type", "objects")("label", ctx_r12.texts.notFound);
} }
function AdaptUploaderComponent_ng_template_45_ng_container_1_div_7_Template(rf, ctx) { if (rf & 1) {
    const _r63 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 61);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "button", 62);
    i0.ɵɵlistener("click", function AdaptUploaderComponent_ng_template_45_ng_container_1_div_7_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r63); const ctx_r62 = i0.ɵɵnextContext(3); return ctx_r62.openFileDialog(false); });
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵelement(4, "span", 63);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r55 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("adaptTooltip", ctx_r55.selectFilesButtonTooltip)("placement", "auto");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("disabled", ctx_r55.isDisabledSelectBtn);
    i0.ɵɵattribute("aria-label", ctx_r55.texts.fileBtn)("aria-describedby", ctx_r55.context.ariaDescribedBy || null);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("\n            ", ctx_r55.texts.fileBtn, "\n          ");
} }
function AdaptUploaderComponent_ng_template_45_ng_container_1_div_9_Template(rf, ctx) { if (rf & 1) {
    const _r65 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 64);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "button", 62);
    i0.ɵɵlistener("click", function AdaptUploaderComponent_ng_template_45_ng_container_1_div_9_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r65); const ctx_r64 = i0.ɵɵnextContext(3); return ctx_r64.openFileDialog(true); });
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵelement(4, "span", 65);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r56 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("adaptTooltip", ctx_r56.selectFilesButtonTooltip)("placement", "auto");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("disabled", ctx_r56.isDisabledSelectBtn);
    i0.ɵɵattribute("aria-label", ctx_r56.texts.folderBtn)("aria-describedby", ctx_r56.context.ariaDescribedBy || null);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("\n            ", ctx_r56.texts.folderBtn, "\n          ");
} }
function AdaptUploaderComponent_ng_template_45_ng_container_1_ng_container_11_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 68);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r66 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                ", ctx_r66.texts.fileMode, "\n              ");
} }
function AdaptUploaderComponent_ng_template_45_ng_container_1_ng_container_11_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 68);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r67 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                ", ctx_r67.texts.dirMode, "\n              ");
} }
function AdaptUploaderComponent_ng_template_45_ng_container_1_ng_container_11_span_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 68);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r68 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n                ", ctx_r68.texts.mixMode, "\n              ");
} }
function AdaptUploaderComponent_ng_template_45_ng_container_1_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0, 66);
    i0.ɵɵtext(1, "\n              ");
    i0.ɵɵtemplate(2, AdaptUploaderComponent_ng_template_45_ng_container_1_ng_container_11_span_2_Template, 2, 1, "span", 67);
    i0.ɵɵtext(3, "\n          ");
    i0.ɵɵtemplate(4, AdaptUploaderComponent_ng_template_45_ng_container_1_ng_container_11_span_4_Template, 2, 1, "span", 67);
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵtemplate(6, AdaptUploaderComponent_ng_template_45_ng_container_1_ng_container_11_span_6_Template, 2, 1, "span", 67);
    i0.ɵɵtext(7, "\n        ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r57 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("ngSwitch", ctx_r57.selectionMode);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngSwitchCase", ctx_r57.fileMode());
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngSwitchCase", ctx_r57.dirMode());
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngSwitchCase", ctx_r57.mixMode());
} }
function AdaptUploaderComponent_ng_template_45_ng_container_1_ng_container_19_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementStart(2, "div", 69);
    i0.ɵɵtext(3, "\n              ");
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(4, "svg", 70);
    i0.ɵɵtext(5, "\n                ");
    i0.ɵɵelement(6, "path", 71);
    i0.ɵɵtext(7, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n              ");
    i0.ɵɵelementStart(9, "svg", 72);
    i0.ɵɵtext(10, "\n                ");
    i0.ɵɵelement(11, "path", 73);
    i0.ɵɵtext(12, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(13, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n            ");
    i0.ɵɵnamespaceHTML();
    i0.ɵɵelementStart(15, "p", 68);
    i0.ɵɵtext(16);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(17, "\n          ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r59 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(16);
    i0.ɵɵtextInterpolate(ctx_r59.texts.dragAndDrop);
} }
function AdaptUploaderComponent_ng_template_45_ng_container_1_ng_container_21_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n            ");
    i0.ɵɵelementStart(2, "div", 74);
    i0.ɵɵtext(3, "\n              ");
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(4, "svg", 75);
    i0.ɵɵtext(5, "\n                        ");
    i0.ɵɵelement(6, "path", 76);
    i0.ɵɵtext(7, "\n                  ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(9, "\n            ");
    i0.ɵɵnamespaceHTML();
    i0.ɵɵelementStart(10, "span", 77);
    i0.ɵɵtext(11);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(12, "\n          ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r60 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(11);
    i0.ɵɵtextInterpolate(ctx_r60.uploadLimitExceed);
} }
function AdaptUploaderComponent_ng_template_45_ng_container_1_div_24_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 78);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelementStart(2, "div", 79);
    i0.ɵɵtext(3, "\n            ");
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(4, "svg", 80);
    i0.ɵɵtext(5, "\n              ");
    i0.ɵɵelement(6, "path", 81);
    i0.ɵɵtext(7, "\n              ");
    i0.ɵɵelement(8, "path", 82);
    i0.ɵɵtext(9, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n            ");
    i0.ɵɵnamespaceHTML();
    i0.ɵɵelementStart(11, "div", 83);
    i0.ɵɵtext(12, "\n              ");
    i0.ɵɵnamespaceSVG();
    i0.ɵɵelementStart(13, "svg", 84);
    i0.ɵɵtext(14, "\n                ");
    i0.ɵɵelement(15, "path", 85);
    i0.ɵɵtext(16, "\n              ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(17, "\n            ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(19, "\n          ");
    i0.ɵɵnamespaceHTML();
    i0.ɵɵelementStart(20, "p", 68);
    i0.ɵɵtext(21);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(22, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r61 = i0.ɵɵnextContext(3);
    i0.ɵɵadvance(21);
    i0.ɵɵtextInterpolate(ctx_r61.directorySearch);
} }
const _c9 = function (a0, a1, a2, a3) { return { leftStart: a0, rightStart: a1, leftEnd: a2, rightEnd: a3 }; };
const _c10 = function (a0) { return { params: a0 }; };
function AdaptUploaderComponent_ng_template_45_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "div", 51);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementStart(4, "div", 52, 53);
    i0.ɵɵtext(6, "\n        ");
    i0.ɵɵtemplate(7, AdaptUploaderComponent_ng_template_45_ng_container_1_div_7_Template, 7, 8, "div", 54);
    i0.ɵɵtext(8, "\n\n        ");
    i0.ɵɵtemplate(9, AdaptUploaderComponent_ng_template_45_ng_container_1_div_9_Template, 7, 8, "div", 55);
    i0.ɵɵtext(10, "\n\n        ");
    i0.ɵɵtemplate(11, AdaptUploaderComponent_ng_template_45_ng_container_1_ng_container_11_Template, 8, 4, "ng-container", 56);
    i0.ɵɵtext(12, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(13, "\n\n      ");
    i0.ɵɵelementStart(14, "div", 57, 58);
    i0.ɵɵtext(16, "\n        ");
    i0.ɵɵelementStart(17, "div", 59);
    i0.ɵɵtext(18, "\n          ");
    i0.ɵɵtemplate(19, AdaptUploaderComponent_ng_template_45_ng_container_1_ng_container_19_Template, 18, 1, "ng-container", 11);
    i0.ɵɵtext(20, "\n\n          ");
    i0.ɵɵtemplate(21, AdaptUploaderComponent_ng_template_45_ng_container_1_ng_container_21_Template, 13, 1, "ng-container", 11);
    i0.ɵɵtext(22, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(23, "\n\n        ");
    i0.ɵɵtemplate(24, AdaptUploaderComponent_ng_template_45_ng_container_1_div_24_Template, 23, 1, "div", 60);
    i0.ɵɵtext(25, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(26, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(27, "\n  ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r52 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("@uploaderInitStateAnim", i0.ɵɵpureFunction1(14, _c10, i0.ɵɵpureFunction4(9, _c9, ctx_r52.isRtl ? "auto" : "15%", ctx_r52.isRtl ? "15%" : "auto", ctx_r52.isRtl ? "auto" : "0px", ctx_r52.isRtl ? "0px" : "auto")));
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r52.allowFileUploading());
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r52.allowDirUploading());
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r52.enableDnD);
    i0.ɵɵadvance(6);
    i0.ɵɵclassProp("hidden", ctx_r52.readFolder);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r52.isUploadLimitExceed);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r52.isUploadLimitExceed);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngIf", ctx_r52.readFolder);
} }
function AdaptUploaderComponent_ng_template_45_ng_container_3_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r72 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 61);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "button", 86);
    i0.ɵɵlistener("click", function AdaptUploaderComponent_ng_template_45_ng_container_3_div_4_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r72); const ctx_r71 = i0.ɵɵnextContext(3); return ctx_r71.openFileDialog(false); });
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r69 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("adaptTooltip", ctx_r69.selectFilesButtonTooltip)("placement", "auto");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("disabled", ctx_r69.isDisabledSelectBtn);
    i0.ɵɵattribute("aria-label", ctx_r69.texts.fileBtn)("aria-describedby", ctx_r69.context.ariaDescribedBy || null);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n          ", ctx_r69.texts.fileBtn, "\n        ");
} }
function AdaptUploaderComponent_ng_template_45_ng_container_3_div_6_Template(rf, ctx) { if (rf & 1) {
    const _r74 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 64);
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "button", 87);
    i0.ɵɵlistener("click", function AdaptUploaderComponent_ng_template_45_ng_container_3_div_6_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r74); const ctx_r73 = i0.ɵɵnextContext(3); return ctx_r73.openFileDialog(true); });
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r70 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("adaptTooltip", ctx_r70.selectFilesButtonTooltip)("placement", "auto");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("disabled", ctx_r70.isDisabledSelectBtn);
    i0.ɵɵattribute("aria-label", ctx_r70.texts.folderBtn)("aria-describedby", ctx_r70.context.ariaDescribedBy || null);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1("\n          ", ctx_r70.texts.folderBtn, "\n        ");
} }
function AdaptUploaderComponent_ng_template_45_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "div", 52);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵtemplate(4, AdaptUploaderComponent_ng_template_45_ng_container_3_div_4_Template, 5, 8, "div", 54);
    i0.ɵɵtext(5, "\n\n      ");
    i0.ɵɵtemplate(6, AdaptUploaderComponent_ng_template_45_ng_container_3_div_6_Template, 5, 8, "div", 55);
    i0.ɵɵtext(7, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n  ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r53 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngIf", ctx_r53.allowFileUploading());
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r53.allowDirUploading());
} }
function AdaptUploaderComponent_ng_template_45_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n  ");
    i0.ɵɵtemplate(1, AdaptUploaderComponent_ng_template_45_ng_container_1_Template, 28, 16, "ng-container", 11);
    i0.ɵɵtext(2, "\n\n  ");
    i0.ɵɵtemplate(3, AdaptUploaderComponent_ng_template_45_ng_container_3_Template, 9, 2, "ng-container", 11);
    i0.ɵɵtext(4, "\n");
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("ngIf", ctx_r14.enableDnD);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r14.enableDnD);
} }
const _c11 = ["*"];
let count = 0;
export class AdaptUploaderComponent extends FormComponent {
    constructor(fileManager, iconService, _renderer, _elRef, _dir, _animationBuilder, _injector, _differs, cd, ts, _adaptRadarService) {
        super(_injector, ts, _adaptRadarService, _elRef, AdaptRadarAngularCustomEventName.AdaptUploader);
        this.fileManager = fileManager;
        this.iconService = iconService;
        this._renderer = _renderer;
        this._elRef = _elRef;
        this._dir = _dir;
        this._animationBuilder = _animationBuilder;
        this._injector = _injector;
        this._differs = _differs;
        this.cd = cd;
        this._adaptRadarService = _adaptRadarService;
        /* begin text configurations **/
        this.uploaderTextsDefault = {
            fileStatus: {}
        };
        /**
         * Label icon with a tooltip or popover
         */
        this.tooltipConfig = null;
        this.mode = UploaderMode.Auto;
        this.selectionMode = UploaderSelectionMode.Both;
        this.enableDnD = true;
        this.enableFileDialog = true;
        this.allowedTypes = [];
        this.forbiddenTypes = [];
        this.suppressParallel = false;
        this.filesCount = 1000;
        this.allowDuplicates = true;
        this.showUploadFolderAlert = true;
        this.icons = {};
        this.visibleFiles = 3;
        this.reusable = true;
        this.indeterminateFileLoader = false;
        this.ariaDescribedBy = null;
        this.allowDeletion = true;
        this.customErrors = false;
        /* uploader outputs */
        this.beforeFileDialogOpen = new EventEmitter();
        this.afterFileDialogOpen = new EventEmitter();
        this.beforeFilesAdded = new EventEmitter();
        this.afterFilesAdded = new EventEmitter();
        this.dropArea = new EventEmitter();
        this.dragOver = new EventEmitter();
        this.startFileUploading = new EventEmitter();
        this.endFileUploading = new EventEmitter();
        this.errorFileUploading = new EventEmitter();
        this.finishedFileUploading = new EventEmitter();
        this.removedFileFromQueue = new EventEmitter();
        this.deletedFile = new EventEmitter();
        this.cancelUploading = new EventEmitter();
        /**
         * Event on ngModel change
         */
        this.valueChange = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.focus = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.blur = new EventEmitter();
        // Need for using inherited properties in the template
        this.context = this;
        this.statusMessages = [];
        this.uploaded = [];
        this.folderUploadingForbiddenMsg = 'Your browser does not support folders uploading.';
        this.isFoldersNotAllowed = false;
        this.readFolder = false;
        this.isDragOverMask = false;
        this.isRtl = false;
        this.isUploadLimitExceed = false;
        this._droppable = 0;
        this._alreadyUsed = false;
        this._positioned = false;
        this._defaultCloudColor = '#D9D9D9';
        this._activeCloudColor = '#1BB1A8';
        this._animationPlayers = {
            visibleDnd: null,
            hiddenDnd: null,
            visibleDrop: null,
            hiddenDrop: null
        };
        this._isTouched = false;
        this._showFiles = [];
        this._destroyed$ = new ReplaySubject(1);
        this._chunkSize = FileSize.MB;
        this._maxFileSize = FileSize.MB * 20;
        this._onTouchedCallback = () => {
            return;
        };
        this.isRtl = this._dir.value === 'rtl';
        this.id = count.toString();
        count++;
        this.setDefaultTexts(ts.getCurrentLanguage());
    }
    get showFiles() {
        return this._showFiles;
    }
    set showFiles(v) {
        this._showFiles = v;
        this.fileManager.resetFilesStorage();
        this._updateUploadedFiles();
    }
    get files() {
        return this.fileManager.getFiles();
    }
    get maxFileCountUploaded() {
        return this.uploaded.length >= this.filesCount;
    }
    get hasMaxFileCountSelected() {
        return this.filesCount <= this.files.length;
    }
    get selectFilesButtonTooltip() {
        return this.hasMaxFileCountSelected ? formatString(this.texts.btnMaxFilesTooltip, this.filesCount) : '';
    }
    get isDisabledSelectBtn() {
        return this.disabled || this.disableFileDialog() || !this.allowedUploading() || this.maxFileCountUploaded
            || this.hasMaxFileCountSelected;
    }
    get isUploadingProcess() {
        return this.files.some(file => file.inUploading);
    }
    get filesAddedCount() {
        return formatString(this.texts.filesAddedCount, this.files.length);
    }
    get filesUploadedCount() {
        return formatString(this.texts.filesUploadedCount, this.uploaded.length, this.files.length);
    }
    get directorySearch() {
        return formatString(this.texts.directorySearch, this.currentFolder);
    }
    get chunkSize() {
        return isNil(this._chunkSize) ? this._chunkSize : this._chunkSize.toString();
    }
    set chunkSize(value) {
        this._chunkSize = isNil(value) ? value : retrieveFileSize(value);
    }
    get maxFileSize() {
        return this._maxFileSize.toString();
    }
    set maxFileSize(value) {
        this._maxFileSize = retrieveFileSize(value);
    }
    get hostClasses() {
        return [
            this.mainCls,
            'adapt-uploader',
            this.enableDnD ? '' : 'is-no-dnd',
            this.isErrorExist ? 'has-danger' : '',
            this.isWarningExist ? 'has-warning' : '',
            this.disabled ? 'disabled' : '',
            this.readonly ? 'readonly' : '',
            this.suppressIcons ? 'prevent-success-icon' : ''
        ].join(' ');
    }
    get isErrorExist() {
        return this.required && !this.files.length && (this.customFormControl ? this.control.touched : this._isTouched);
    }
    get isWarningExist() {
        return !!this.statusMessages.length && this.statusMessages.some(message => message.variant === MessageStatus.Warning);
    }
    get uploadLimitExceed() {
        return formatString(this.texts.uploadFilesLimit, this.filesCount - this.files.length);
    }
    set value(v) {
        this._value = v;
    }
    get value() {
        return this._value;
    }
    ngOnInit() {
        // Sending radar event directly to avoid issues with the premature invocation of "initControl" in parent ngOnInit()
        // ERROR NullInjectorError: R3InjectorError(AppModule)[NgControl -> NgControl -> NgControl]:
        // So do not call super.ngOnInit() here
        // TODO: ?
        this._adaptRadarService.sendGenericComponentEvent(AdaptRadarAngularCustomEventName.AdaptUploader);
        if (this.customFormControl) {
            this.initControl();
        }
        this.initTextsValues();
        this.initFileErrors();
        this._customErrorTexts = Object.assign({ required: {
                name: '',
                text: this.texts.required
            } }, this._customErrorTexts);
        this.iconService.init(this.icons);
        this.fileManager.messagesSubject
            .pipe(takeUntil(this._destroyed$))
            .subscribe((msg) => {
            this.statusMessages.push(msg);
        });
        this.fileManager.uploadingStartSubject.pipe(takeUntil(this._destroyed$)).subscribe(({ file }) => {
            const fileEvent = Object.assign(Object.assign({}, file), { 
                // Perhaps always id === 1, because it is the first chunk or file,
                // but just in case this algorithm
                id: this.fileManager.getFileRequestId(this.fileManager.getChunkStart(INITIAL_CHUNK_NUMBER, this._chunkSize), this._chunkSize) });
            this.startFileUploading.emit(fileEvent);
        });
        this.fileManager.uploadedSubject.pipe(takeUntil(this._destroyed$)).subscribe((file) => {
            this.uploaded.push(file);
            this.endFileUploading.emit(file);
        });
        this.fileManager.canceledSubject.pipe(takeUntil(this._destroyed$)).subscribe((files) => {
            this.cancelUploading.emit(files);
        });
        this.fileManager.errorUploadingSubject.pipe(takeUntil(this._destroyed$))
            .subscribe((data) => {
            this.errorFileUploading.emit(data);
        });
        this.fileManager.uploadingFinishedSubject.pipe(takeUntil(this._destroyed$)).subscribe((files) => {
            this.finishedFileUploading.emit(files);
        });
        this.cloudColor = this._defaultCloudColor;
        for (const prop in this._customErrorTexts) {
            if (prop) {
                this.overrideBuildInValidatorMessage(prop, () => this._customErrorTexts[prop]);
            }
        }
        this._filesListDiffer = this._differs.find(this.showFiles).create();
        if (this.tooltipIconCls && !this.popoverIcon) {
            this.tooltipConfig = {
                iconName: this.tooltipIconCls,
                content: this.tooltipText,
                placement: 'top',
                popoverMode: false
            };
        }
        else if (this.popoverIcon) {
            this.tooltipConfig = {
                iconName: this.popoverIcon,
                content: this.popoverContent,
                placement: this.popoverPlacement,
                popoverMode: true,
                popoverTriggers: this.popoverTriggers
            };
        }
    }
    setDefaultTexts(translation) {
        this.uploaderTextsDefault.fileBtn = translation['adapt.uploader.attachFiles'];
        this.uploaderTextsDefault.folderBtn = translation['adapt.uploader.attachFolder'];
        this.uploaderTextsDefault.allowedTypes = translation['adapt.uploader.allowedTypes'];
        this.uploaderTextsDefault.fileTypesDivider = translation['adapt.uploader.fileTypesDivider'];
        this.uploaderTextsDefault.maxFileSize = translation['adapt.uploader.maxFileSize'];
        this.uploaderTextsDefault.filesCount = translation['adapt.uploader.filesCount'];
        this.uploaderTextsDefault.fileMode = translation['adapt.uploader.fileMode'];
        this.uploaderTextsDefault.dirMode = translation['adapt.uploader.dirMode'];
        this.uploaderTextsDefault.mixMode = translation['adapt.uploader.mixMode'];
        this.uploaderTextsDefault.dragAndDrop = translation['adapt.uploader.dragAndDrop'];
        this.uploaderTextsDefault.uploadFilesLimit = translation['adapt.uploader.uploadFilesLimit'];
        this.uploaderTextsDefault.required = translation['adapt.uploader.required'];
        this.uploaderTextsDefault.showMore = translation['adapt.uploader.showMore'];
        this.uploaderTextsDefault.showLess = translation['adapt.uploader.showLess'];
        this.uploaderTextsDefault.btnMaxFilesTooltip = translation['adapt.uploader.maxFilesTooltip'];
        this.uploaderTextsDefault.btnCancelUploading = translation['adapt.uploader.cancelUploading'];
        this.uploaderTextsDefault.btnRemoveFile = translation['adapt.uploader.removeFile'];
        this.uploaderTextsDefault.btnDeleteFile = translation['adapt.uploader.deleteFile'];
        this.uploaderTextsDefault.btnRemoveCanceled = translation['adapt.uploader.removeCanceled'];
        this.uploaderTextsDefault.btnDownloadFile = translation['adapt.uploader.downloadFile'];
        this.uploaderTextsDefault.fileStatus.canceled = translation['adapt.uploader.fileStatus.canceled'];
        this.uploaderTextsDefault.fileStatus.uploaded = translation['adapt.uploader.fileStatus.uploaded'];
        this.uploaderTextsDefault.fileStatus.uploading = translation['adapt.uploader.fileStatus.uploading'];
        this.uploaderTextsDefault.filesAddedCount = translation['adapt.uploader.filesAddedCount'];
        this.uploaderTextsDefault.filesUploadedCount = translation['adapt.uploader.filesUploadedCount'];
        this.uploaderTextsDefault.directorySearch = translation['adapt.uploader.directorySearch'];
        this.uploaderTextsDefault.remainingFilesListLabel = translation['adapt.uploader.remainingFilesListLabel'];
        this.uploaderTextsDefault.btnCancelAllUploads = translation['adapt.uploader.cancelAllUploads'];
        this.uploaderTextsDefault.notFound = translation['adapt.uploader.notFound'];
        this.uploaderTextsDefault.comma = translation['adapt.common.comma'];
    }
    setFilesList(files) {
        const changes = this._filesListDiffer.diff(files);
        if (changes) {
            changes.forEachAddedItem(file => {
                this.showFiles.push(file.item);
                this.fileManager.updateFilesStorage(file.item, true);
            });
            changes.forEachRemovedItem(file => {
                const index = this.showFiles.indexOf(file.item);
                if (index >= 0) {
                    this.showFiles.splice(index, 1);
                }
                this.fileManager.decreaseFilesStorage(file.item);
            });
            this._markComponentTouched();
            this._propagateChanges();
            this._componentEmptyState();
        }
    }
    writeValue(value) {
        if (value && value.length) {
            this.showFiles = value;
            this.fileManager.updateFilesStorage(value);
            this.clearWarningMessages();
        }
        else {
            this.fileManager.resetFilesStorage();
        }
        this._propagateChanges();
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    validate() {
        return null;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (!this.droppableArea) {
            this.droppableArea = this.droppableAreaBlock.nativeElement;
        }
        if (isUndefined(this.fileInput.nativeElement.webkitdirectory)) {
            adaptWarn(this.folderUploadingForbiddenMsg);
            this.isFoldersNotAllowed = true;
            this.selectionMode = UploaderSelectionMode.File;
            SafeCdr.detectChanges(this.cd);
        }
        if (this.enableDnD) {
            this.addDragEvents();
        }
        observableFromEvent(this.fileInput.nativeElement, 'change')
            .pipe(takeUntil(this._destroyed$))
            .subscribe((e) => {
            this.onChangeFileInput(e);
        });
    }
    addDragEvents() {
        this._onDragEnter = this.ondragEnter.bind(this);
        this.droppableArea.addEventListener('dragenter', this._onDragEnter);
        this._onDragOver = this.ondragOver.bind(this);
        this.droppableArea.addEventListener('dragover', this._onDragOver);
        this._onDragLeave = this.ondragLeave.bind(this);
        this.droppableArea.addEventListener('dragleave', this._onDragLeave);
        this._onDragDrop = this.ondragDrop.bind(this);
        this.droppableArea.addEventListener('drop', this._onDragDrop);
        document.addEventListener('dragover', this._preventDefault);
        document.addEventListener('drop', this._preventDefault);
    }
    initFileErrors() {
        if (this.fileErrors) {
            this.fileManager.fileErrors = Object.assign(Object.assign({}, this.fileManager.fileErrors), this.fileErrors);
            Object.keys(this.fileManager.fileErrors).forEach((key) => this.fileManager.messages[key] = {
                errorMessage: '',
                files: []
            });
        }
    }
    initTextsValues() {
        this.texts = Object.assign(Object.assign({}, this.uploaderTextsDefault), this.texts);
    }
    ngOnChanges(changes) {
        if (changes.texts && !isUndefined(changes.texts.previousValue)) {
            this.initTextsValues();
        }
        if (changes.fileErrors && !isUndefined(changes.fileErrors.previousValue)) {
            this.initFileErrors();
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        if (!this.disabled && this.enableDnD) {
            this.droppableArea.removeEventListener('dragenter', this._onDragEnter);
            this.droppableArea.removeEventListener('dragover', this._onDragOver);
            this.droppableArea.removeEventListener('dragleave', this._onDragLeave);
            this.droppableArea.removeEventListener('drop', this._onDragDrop);
            document.removeEventListener('dragover', this._preventDefault);
            document.removeEventListener('drop', this._preventDefault);
        }
        this.cancelAllUploads();
        this._destroyed$.next(true);
        this._destroyed$.complete();
    }
    cancelAllUploads() {
        if (this.files.every(file => !file.inUploading)) {
            return;
        }
        const uploadInputs = {
            chunkSize: this._chunkSize,
            uploadUrl: this.url,
            customErrors: this.customErrors
        };
        this.fileManager.abortUploading(uploadInputs);
    }
    ondragEnter(e) {
        e.preventDefault();
        e.stopPropagation();
        if (this.disabled || this.readonly || this._droppable || !this.dataHasFiles(e) || this.hasMaxFileCountSelected) {
            return;
        }
        // check if the upload files limit exceeded
        // event.dataTransfer.items is not available in Internet Explorer and Safari
        // Mime types or number of dragged files can therefore not be determined in drag events, only on drop
        // so we explicitly set the value to 0
        const dndFilesCount = e.dataTransfer.items ? e.dataTransfer.items.length : 0;
        this.isUploadLimitExceed = dndFilesCount > (this.filesCount - this.files.length);
        this.isDragOverMask = true;
        this._renderer.addClass(this.droppableArea, 'adapt-drop-wrp');
        this._renderer.addClass(this.dropEnter.nativeElement, 'pointer-events');
        this._droppable++;
        this._createAnimationPlayers();
        this._animateDndChange();
    }
    ondragOver(e) {
        e.preventDefault();
        e.stopPropagation();
        if (this.disabled || this.readonly || this.isUploadLimitExceed) {
            e.dataTransfer.dropEffect = 'none';
        }
        this.dragOver.emit(null);
    }
    ondragLeave(e) {
        e.preventDefault();
        e.stopPropagation();
        if (e.target !== this.droppableArea) {
            return;
        }
        this._droppable--;
        if (!this._droppable) {
            this.isDragOverMask = false;
            this._animateDndChange();
            this._renderer.removeClass(this.dropEnter.nativeElement, 'pointer-events');
            this._renderer.removeClass(this.droppableArea, 'adapt-drop-wrp');
            this._markComponentTouched();
            this._componentEmptyState();
        }
    }
    ondragDrop(e) {
        e.preventDefault();
        e.stopPropagation();
        this.clearWarningMessages();
        this._markComponentTouched();
        if (this.hasMaxFileCountSelected) {
            return;
        }
        if (isUndefined(this.fileInput.nativeElement.webkitdirectory)) {
            const files = toArray(e.dataTransfer.files);
            this.addFilesEmission(files);
            this._componentEmptyState();
            return;
        }
        const items = toArray(e.dataTransfer.items);
        this.resolveDroppedItems(items).then((values) => {
            this.addFilesEmission(values);
            this._componentEmptyState();
        }, (err) => {
            this.statusMessages.push({ title: err.name, text: err.message, variant: MessageStatus.Warning });
            this.addFilesEmission([]);
            this._componentEmptyState();
        });
    }
    resolveDroppedItems(items) {
        return new Promise((resolve, reject) => {
            const promises = [];
            let files = [];
            items.forEach((item) => {
                const itemEntry = item.webkitGetAsEntry();
                if (itemEntry.isDirectory) {
                    // Allowed to upload directories and browser know about directories
                    if (this.allowDirUploading()) {
                        this.readFolder = true;
                        promises.push(this.getDirectory(itemEntry));
                        return;
                    }
                    // check if folderSuppress error is already added to the statusMessages array
                    const messageIndex = this.statusMessages
                        .map(message => message.text)
                        .indexOf(this.fileManager.fileErrors.folderSuppress);
                    if (messageIndex === -1) {
                        this.statusMessages.push({
                            text: this.fileManager.fileErrors.folderSuppress,
                            variant: MessageStatus.Warning
                        });
                    }
                }
                if (itemEntry.isFile) {
                    if (this.selectionMode === UploaderSelectionMode.Directory) {
                        // check if fileSuppress error is already added to the statusMessages array
                        const messageIndex = this.statusMessages
                            .map(message => message.text)
                            .indexOf(this.fileManager.fileErrors.fileSuppress);
                        if (messageIndex === -1) {
                            this.statusMessages.push({
                                text: this.fileManager.fileErrors.fileSuppress,
                                variant: MessageStatus.Warning
                            });
                        }
                        return;
                    }
                    promises.push(this.getFile(itemEntry));
                }
            });
            Promise.all(promises).then((values) => {
                files = values.reduce((acc, item) => {
                    return acc.concat(item);
                }, files);
                this.readFolder = false;
                resolve(files);
            }, (err) => {
                this.statusMessages.push({ title: err.name, text: err.message, variant: MessageStatus.Warning });
                this.readFolder = false;
                reject(err);
            });
        });
    }
    /**
     * Manages ability to select files via file dialog window
     */
    disableFileDialog() {
        return !this.enableFileDialog;
    }
    /**
     * Allows/Forbids to select multiple files for uploading
     */
    isMultipleAllowed() {
        return this.filesCount > 1;
    }
    /**
     * Opens file dialog window for files selection, fires appropriate events
     */
    openFileDialog(isDir) {
        if (!isUndefined(this.fileInput.nativeElement.webkitdirectory)) {
            this.fileInput.nativeElement.webkitdirectory = !!isDir;
        }
        this.beforeFileDialogOpen.emit(null);
        this.fileInput.nativeElement.click();
        this.afterFileDialogOpen.emit(null);
    }
    onChangeFileInput(e) {
        const files = toArray(e.target.files);
        if (files.length) {
            this.addFiles(files);
        }
        this._markComponentTouched();
        this._componentEmptyState();
    }
    isManualMode() {
        return this.mode === UploaderMode.Manual;
    }
    allowFileUploading() {
        return this.selectionMode === UploaderSelectionMode.File || this.selectionMode === UploaderSelectionMode.Both;
    }
    allowDirUploading() {
        return this.selectionMode === UploaderSelectionMode.Directory || this.selectionMode === UploaderSelectionMode.Both;
    }
    fileMode() {
        return UploaderSelectionMode.File;
    }
    dirMode() {
        return UploaderSelectionMode.Directory;
    }
    mixMode() {
        return UploaderSelectionMode.Both;
    }
    allowedUploading() {
        return this.reusable || !this._alreadyUsed;
    }
    startUploading() {
        if (this.readonly || this.disabled) {
            return;
        }
        this._markComponentTouched();
        if (this.isErrorExist) {
            if (!this.customFormControl) {
                // check if required error is already added to the statusMessages array
                const messageIndex = this.statusMessages
                    .map(message => message.text)
                    .indexOf(this.texts.required);
                if (messageIndex === -1) {
                    this.statusMessages.push({ text: this.texts.required, variant: MessageStatus.Danger });
                }
            }
            return;
        }
        if (this.allowedUploading()) {
            const uploadInputs = {
                chunkSize: this._chunkSize,
                uploadUrl: this.url,
                customErrors: this.customErrors
            };
            this.fileManager.startUploading(uploadInputs);
            if (!this.reusable) {
                this._alreadyUsed = true;
            }
        }
    }
    removedFromQueue(file) {
        const index = this.uploaded.indexOf(file);
        if (index >= 0) {
            this.uploaded.splice(index, 1);
        }
        if (!file.canceled) {
            this.removedFileFromQueue.emit(file);
        }
        this._markComponentTouched();
        this._propagateChanges();
        this._componentEmptyState();
    }
    fileDeleted(file) {
        const index = this.uploaded.indexOf(file);
        if (index >= 0) {
            this.uploaded.splice(index, 1);
        }
        this.deletedFile.emit(file);
        this._markComponentTouched();
        this._propagateChanges();
        this._componentEmptyState();
    }
    clearWarningMessages() {
        this.statusMessages = [];
    }
    /**
     * Adds files to uploader service
     */
    addFiles(files) {
        this.clearWarningMessages();
        if (this.allowedUploading()) {
            if (this.mode === UploaderMode.Auto && !this.reusable) {
                this._alreadyUsed = true;
            }
            this.beforeFilesAdded.emit(files);
            this.fileManager.addFiles(files, this.allowDeletion, this.mode, this.suppressParallel, this.allowDuplicates, this._maxFileSize, this._chunkSize, this.allowedTypes, this.forbiddenTypes, this.filesCount, this.customErrors, this.url);
            this.afterFilesAdded.emit(files);
            this._propagateChanges();
            // don't do "value = ''" due to secondary event firing in IE with 0 files
            // thus statusMessages are cleared
            // uncomment selection - we need to clear input element, so input change event would fire
            // for the IE we have validation for the files array length
            this.fileInput.nativeElement.value = '';
            this._positioned = false;
        }
    }
    _updateStorageWithUploadedFiles() {
        if (this.showFiles) {
            this.fileManager.updateFilesStorage(this.showFiles, true);
        }
    }
    /**
     * Checks if the dragged data has files
     */
    dataHasFiles(e) {
        const types = Array.prototype.slice.call(e.dataTransfer.types);
        return types.indexOf('Files') !== -1;
    }
    getFile(item, dirName = '') {
        return new Promise((resolve, reject) => {
            item.file((f) => {
                f.fullPath = dirName ? `${dirName}/${f.name}` : f.name;
                resolve(f);
            }, (err) => {
                reject(err);
            });
        });
    }
    getDirectory(item) {
        this.currentFolder = item.name;
        return new Promise((resolve, reject) => {
            const promises = [];
            const reader = item.createReader();
            reader.readEntries((entries) => {
                entries.forEach((entry) => {
                    let promise;
                    if (entry.isDirectory) {
                        promise = this.getDirectory(entry);
                    }
                    else if (entry.isFile) {
                        promise = this.getFile(entry, item.fullPath.slice(1));
                    }
                    if (promise) {
                        promises.push(promise);
                    }
                });
                Promise.all(promises).then((values) => {
                    let dirFiles = [];
                    dirFiles = values.reduce((acc, value) => {
                        return acc.concat(value);
                    }, dirFiles);
                    resolve(dirFiles);
                }, (err) => {
                    reject(err);
                });
            });
        });
    }
    addFilesEmission(files) {
        this.dropArea.emit(null);
        if (files.length) {
            this.addFiles(files);
        }
        this._droppable = 0;
        this.isDragOverMask = false;
        this._animateDndChange();
        this._renderer.removeClass(this.droppableArea, 'adapt-drop-wrp');
        this._renderer.removeClass(this.dropEnter.nativeElement, 'pointer-events');
    }
    _preventDefault(e) {
        e.preventDefault();
        e.stopPropagation();
    }
    _animateDndChange() {
        this._animationPlayers.hiddenDnd.reset();
        this._animationPlayers.visibleDnd.reset();
        this._animationPlayers.hiddenDrop.reset();
        this._animationPlayers.visibleDrop.reset();
        const currentPlayerDnd = this.isDragOverMask ? this._animationPlayers.hiddenDnd : this._animationPlayers.visibleDnd;
        const currentPlayerDrop = this.isDragOverMask ? this._animationPlayers.visibleDrop : this._animationPlayers.hiddenDrop;
        currentPlayerDnd.play();
        currentPlayerDrop.play();
        currentPlayerDrop.onDone(() => {
            if (!this._droppable) {
                this.isUploadLimitExceed = false;
            }
        });
    }
    _createAnimationPlayers() {
        const players = Object.keys(this._animationPlayers);
        players.forEach((player) => {
            if (this._animationPlayers[player]) {
                this._animationPlayers[player].destroy();
            }
        });
        this._animationPlayers.hiddenDnd = this._animationBuilder.build(ANIMATION_DND.hidden[this._dir.value])
            .create(this.dnd.nativeElement);
        this._animationPlayers.visibleDnd = this._animationBuilder.build(ANIMATION_DND.visible[this._dir.value])
            .create(this.dnd.nativeElement);
        this._animationPlayers.hiddenDrop = this._animationBuilder.build(ANIMATION_DROP.hidden[this._dir.value])
            .create(this.drop.nativeElement);
        this._animationPlayers.visibleDrop = this._animationBuilder.build(ANIMATION_DROP.visible[this._dir.value])
            .create(this.drop.nativeElement);
    }
    _componentEmptyState() {
        if (this.files.length) {
            return;
        }
        if (this.isErrorExist && !this.customFormControl) {
            // check if required error is already added to the statusMessages array
            const messageIndex = this.statusMessages
                .map(message => message.text)
                .indexOf(this.texts.required);
            if (messageIndex === -1) {
                this.statusMessages.push({ text: this.texts.required, variant: MessageStatus.Danger });
            }
        }
    }
    _markComponentTouched() {
        this._isTouched = true;
        this._onTouchedCallback();
    }
    _propagateChanges() {
        this.propagateChange(this.files);
        this.valueChange.emit(this.files);
    }
    _updateUploadedFiles() {
        this.uploaded = [];
        if (this.showFiles.length) {
            this.showFiles.forEach(file => {
                if (file.uploaded === FILE_IS_UPLOADED_PERCENTAGE && !file.canceled && !file.error) {
                    this.uploaded.push(file);
                }
            });
        }
        this._updateStorageWithUploadedFiles();
    }
}
AdaptUploaderComponent.ɵfac = function AdaptUploaderComponent_Factory(t) { return new (t || AdaptUploaderComponent)(i0.ɵɵdirectiveInject(i1.FileManager), i0.ɵɵdirectiveInject(i1.IconManager), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i2.Directionality), i0.ɵɵdirectiveInject(i3.AnimationBuilder), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1.AdaptTranslateService), i0.ɵɵdirectiveInject(i4.AdaptRadarService)); };
AdaptUploaderComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptUploaderComponent, selectors: [["adapt-uploader"]], viewQuery: function AdaptUploaderComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
        i0.ɵɵviewQuery(_c1, 5);
        i0.ɵɵviewQuery(_c2, 5);
        i0.ɵɵviewQuery(_c3, 5);
        i0.ɵɵviewQuery(_c4, 5);
        i0.ɵɵviewQuery(_c5, 5);
        i0.ɵɵviewQuery(AdaptUploaderItemComponent, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileInput = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.fileList = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropEnter = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dnd = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.drop = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.droppableAreaBlock = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.filesList = _t);
    } }, hostVars: 2, hostBindings: function AdaptUploaderComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassMap(ctx.hostClasses);
    } }, inputs: { mode: "mode", selectionMode: "selectionMode", enableDnD: "enableDnD", enableFileDialog: "enableFileDialog", allowedTypes: "allowedTypes", forbiddenTypes: "forbiddenTypes", suppressParallel: "suppressParallel", filesCount: "filesCount", allowDuplicates: "allowDuplicates", label: "label", showUploadFolderAlert: "showUploadFolderAlert", url: "url", deleteUrl: "deleteUrl", icons: "icons", visibleFiles: "visibleFiles", reusable: "reusable", indeterminateFileLoader: "indeterminateFileLoader", ariaDescribedBy: "ariaDescribedBy", allowDeletion: "allowDeletion", texts: "texts", showFiles: "showFiles", fileErrors: "fileErrors", droppableArea: "droppableArea", customErrors: "customErrors", name: "name", customFormControl: "customFormControl", chunkSize: "chunkSize", maxFileSize: "maxFileSize" }, outputs: { beforeFileDialogOpen: "beforeFileDialogOpen", afterFileDialogOpen: "afterFileDialogOpen", beforeFilesAdded: "beforeFilesAdded", afterFilesAdded: "afterFilesAdded", dropArea: "dropArea", dragOver: "dragOver", startFileUploading: "startFileUploading", endFileUploading: "endFileUploading", errorFileUploading: "errorFileUploading", finishedFileUploading: "finishedFileUploading", removedFileFromQueue: "removedFileFromQueue", deletedFile: "deletedFile", cancelUploading: "cancelUploading", valueChange: "valueChange", focus: "focus", blur: "blur" }, features: [i0.ɵɵProvidersFeature([
            createFormControlValueAccessor(AdaptUploaderComponent),
            createFormControlValidator(AdaptUploaderComponent),
            FileManager,
            IconManager
        ]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], ngContentSelectors: _c11, decls: 48, vars: 12, consts: [["type", "file", "hidden", "", 3, "multiple"], ["fileInput", ""], [1, "adapt-uploader__wrp"], ["droppableAreaBlock", ""], [1, "adapt-uploader__content"], ["dropEnter", ""], [3, "label", "requiredLabel", "showRequiredLabel", "tooltip"], [1, "adapt-uploader-dnd-animation__wrp"], [3, "ngTemplateOutlet"], [1, "adapt-uploader-block-level-text"], ["class", "adapt-uploader-messages", 3, "config", 4, "ngFor", "ngForOf"], [4, "ngIf"], ["class", "adapt-uploader-restrict", 4, "ngIf"], ["class", "adapt-uploader-list-files-wrapper", 4, "ngIf"], [3, "config", 4, "ngIf"], ["emptyTmpl", ""], ["emptyReadonly", ""], ["controlsData", ""], [1, "adapt-uploader-messages", 3, "config"], ["errorMessageTemplate", ""], ["remainingFileListTemplate", ""], [1, "remaining-files-list", 3, "adaptPopover", "adaptRadarDisableEventSending", "placement", "maxWidth"], ["ngFor", "", 3, "ngForOf"], [1, "file-name"], [1, "adapt-uploader-restrict"], ["class", "adapt-uploader-restrict-types", 4, "ngIf"], [1, "adapt-uploader-restrict-size"], [1, "d-inline-block", "mb-0"], [1, "letter-space"], [1, "adapt-uploader-restrict-files-count"], [1, "adapt-uploader-restrict-types"], [1, "adapt-uploader-list-files-wrapper"], [1, "adapt-uploader-list-files-zone"], [1, "adapt-uploader-list-files-zone__header"], ["class", "adapt-uploader-list-title p-start-3", 4, "ngIf"], ["class", "adapt-uploader-list-title p-start-3", 3, "text-info", 4, "ngIf"], ["adapt-button", "", "type", "button", "btn-type", "tertiary", "class", "adapt-uploader-cancel", 3, "adaptRadarDisableEventSending", "click", 4, "ngIf"], [3, "disabled", "readonly", "collapseBlock", "reusable", "indeterminateFileLoader", "url", "deleteUrl", "chunkSize", "customErrors", "file", "id", "texts", "afterFileRemove", "fileDeleted", 4, "ngFor", "ngForOf"], [3, "collapse"], ["fileList", "collapse"], [3, "disabled", "readonly", "reusable", "indeterminateFileLoader", "url", "deleteUrl", "chunkSize", "customErrors", "file", "id", "texts", "afterFileRemove", "fileDeleted", 4, "ngFor", "ngForOf"], ["class", "d-flex justify-content-end mt-1", 4, "ngIf"], [1, "adapt-uploader-list-title", "p-start-3"], ["adapt-button", "", "type", "button", "btn-type", "tertiary", 1, "adapt-uploader-cancel", 3, "adaptRadarDisableEventSending", "click"], [1, "d-icon-cross_adapt", "pr-1"], [3, "disabled", "readonly", "collapseBlock", "reusable", "indeterminateFileLoader", "url", "deleteUrl", "chunkSize", "customErrors", "file", "id", "texts", "afterFileRemove", "fileDeleted"], [3, "disabled", "readonly", "reusable", "indeterminateFileLoader", "url", "deleteUrl", "chunkSize", "customErrors", "file", "id", "texts", "afterFileRemove", "fileDeleted"], [1, "d-flex", "justify-content-end", "mt-1"], ["type", "button", "aria-controls", "collapseExample1", 1, "btn", "btn-link", "btn-uploader-collapse-btn", 3, "click"], [3, "config"], [3, "type", "label"], [1, "adapt-uploader-dnd-animation"], [1, "adapt-uploader-dnd"], ["dnd", ""], ["class", "d-inline-block adapt-uploader-attach-file-btn-wrap", 3, "adaptRadarDisableEventSending", "adaptTooltip", "placement", 4, "ngIf"], ["class", "d-inline-block adapt-uploader-attach-folder-btn-wrap", 3, "adaptRadarDisableEventSending", "adaptTooltip", "placement", 4, "ngIf"], [3, "ngSwitch", 4, "ngIf"], [1, "adapt-uploader-drop"], ["drop", ""], [1, "adapt-uploader-drop-animation"], ["class", "adapt-uploader-search-animation", 4, "ngIf"], [1, "d-inline-block", "adapt-uploader-attach-file-btn-wrap", 3, "adaptRadarDisableEventSending", "adaptTooltip", "placement"], ["type", "button", "adapt-button", "", "btn-type", "secondary", 1, "adapt-uploader-attach-btn", 3, "adaptRadarDisableEventSending", "disabled", "click"], [1, "btn-icon", "d-icon-file_o"], [1, "d-inline-block", "adapt-uploader-attach-folder-btn-wrap", 3, "adaptRadarDisableEventSending", "adaptTooltip", "placement"], [1, "btn-icon", "d-icon-folder_o"], [3, "ngSwitch"], ["class", "adapt-uploader-dnd-text m-start-2", 4, "ngSwitchCase"], [1, "adapt-uploader-dnd-text", "m-start-2"], [1, "adapt-uploader-drop__icon"], ["aria-hidden", "true", "xmlns", "http://www.w3.org/2000/svg", "width", "45", "height", "32", "viewBox", "0 0 72 48", 0, "xml", "space", "preserve", 1, "clound-icon", 2, "enable-background", "new 0 0 72 48"], ["fill", "#D9D9D9", "d", "M72,36c0,6.63-5.37,12-12,12H12C5.37,48,0,42.63,0,36c0-5.98,4.39-10.9,10.12-11.81C9.41,22.26,9,20.18,9,18  C9,8.06,17.06,0,27,0c6.01,0,11.32,2.96,14.59,7.49C43.54,6.56,45.7,6,48,6c8.28,0,15,6.72,15,15c0,1.14-0.15,2.24-0.39,3.3  C67.98,25.5,72,30.27,72,36z", 1, "st0"], ["aria-hidden", "true", "xmlns", "http://www.w3.org/2000/svg", "width", "45", "height", "32", "viewBox", "0 0 72 48", 0, "xml", "space", "preserve", 1, "arrow-icon", 2, "enable-background", "new 0 0 72 48"], ["fill", "#FBFBFB", "d", "M33,48V36H21l15-18l15,18H39v12H33z", 1, "st0"], [1, "adapt-uploader-drop__icon", "adapt-uploader-drop__icon-forbidden"], ["aria-hidden", "true", "xmlns", "http://www.w3.org/2000/svg", "width", "45", "height", "32", "viewBox", "0 0 64 44", 0, "xml", "space", "preserve", 1, "clound-icon__forbidden", 2, "enable-background", "new 0 0 64 44"], ["fill", "#FA7A59", "d", "M54.91,21.93c0.21-0.9,0.34-1.86,0.34-2.84c0-7.13-5.79-12.92-12.92-12.92c-1.99,0-3.85,0.49-5.53,1.29\nC33.99,3.56,29.42,1,24.25,1C15.7,1,8.75,7.95,8.75,16.5c0,1.89,0.36,3.67,0.96,5.32C4.77,22.62,1,26.86,1,32\n\tc0,5.71,4.62,10.33,10.33,10.33h41.33C58.38,42.33,63,37.71,63,32C63,27.07,59.54,22.96,54.91,21.93z M41.14,33.4\n\tc-4.75,4.73-12.22,5.01-17.31,0.85c-0.34-0.26-0.67-0.54-0.98-0.85c-0.31-0.31-0.59-0.65-0.85-0.98\n\tc-4.16-5.09-3.88-12.55,0.85-17.31c4.75-4.73,12.22-5.01,17.31-0.85c0.34,0.26,0.67,0.54,0.98,0.85s0.59,0.65,0.85,0.98\n\tC46.16,21.18,45.87,28.64,41.14,33.4z M25.67,32.41c4.06,3.15,9.92,2.87,13.64-0.85c3.72-3.72,4-9.58,0.85-13.64L25.67,32.41z\n\t M24.69,16.94c-3.72,3.72-4,9.58-0.85,13.64l14.49-14.49C34.27,12.94,28.41,13.22,24.69,16.94z"], [1, "adapt-uploader-dnd-text", "adapt-uploader-dnd-text-forbidden", "m-start-2"], [1, "adapt-uploader-search-animation"], [1, "adapt-uploader-submask-center-inner-read"], ["fill", "#fbfbfb", "aria-hidden", "true", "xmlns", "http://www.w3.org/2000/svg", "width", "50", "height", "38", "viewBox", "0 0 32 32", 1, "adapt-uploader-img-read"], ["fill", "#999999", "d", "M11.983 3.982h-7.981l-4.017 4.017v17.751c0 0.614 0.227 1.134 0.681 1.588s0.988 0.681 1.588 0.681h27.64c0.587 0 1.094-0.2 1.508-0.614s0.614-0.921 0.614-1.508v-15.896c0-0.534-0.2-1.001-0.601-1.401-0.414-0.4-0.867-0.601-1.401-0.601h-14.014l-4.017-4.017z"], ["fill", "#f2f2f2", "d", "M10.888 6.651l3.23 3.23 0.774 0.787h14.454v14.694h-26.693v-16.256l2.442-2.442h5.792z"], [1, "floating"], ["aria-hidden", "true", "xmlns", "http://www.w3.org/2000/svg", "width", "18", "height", "18", "viewBox", "0 0 32 32", 1, "adapt-uploader-img-search", "inner"], ["fill", "#666666", "d", "M31.65 28.686l-8.629-8.627c3.541-4.959 3.090-11.892-1.36-16.342-2.477-2.481-5.725-3.719-8.971-3.719-3.451 0-6.902 1.398-9.428 4.196-4.327 4.792-4.327 12.201 0 16.994 2.527 2.798 5.978 4.196 9.428 4.196 2.583 0 5.168-0.788 7.364-2.358l8.629 8.627c0.35 0.35 0.92 0.35 1.27 0l1.698-1.698c0.35-0.349 0.35-0.918 0-1.269zM6.090 19.292c-3.639-3.639-3.639-9.563 0-13.201 1.762-1.764 4.106-2.734 6.598-2.734s4.834 0.972 6.598 2.734c3.639 3.639 3.639 9.563 0 13.201-1.762 1.764-4.106 2.734-6.598 2.734s-4.837-0.972-6.598-2.734z"], ["type", "button", "adapt-button", "", "btn-type", "secondary", 1, "adapt-uploader-attach-btn", "adapt-uploader-attach-file-btn", 3, "adaptRadarDisableEventSending", "disabled", "click"], ["type", "button", "adapt-button", "", "btn-type", "secondary", 1, "adapt-uploader-attach-btn", "adapt-uploader-attach-folder-btn", 3, "adaptRadarDisableEventSending", "disabled", "click"]], template: function AdaptUploaderComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelement(0, "input", 0, 1);
        i0.ɵɵtext(2, "\n\n");
        i0.ɵɵelementStart(3, "div", 2, 3);
        i0.ɵɵtext(5, "\n  ");
        i0.ɵɵelementStart(6, "div", 4, 5);
        i0.ɵɵtext(8, "\n    ");
        i0.ɵɵtext(9, "\n    ");
        i0.ɵɵelement(10, "adapt-rx-control-label", 6);
        i0.ɵɵtext(11, "\n    ");
        i0.ɵɵtext(12, "\n\n    ");
        i0.ɵɵprojection(13);
        i0.ɵɵtext(14, "\n\n    ");
        i0.ɵɵelementStart(15, "div", 7);
        i0.ɵɵtext(16, "\n      ");
        i0.ɵɵtemplate(17, AdaptUploaderComponent_ng_template_17_Template, 1, 0, "ng-template", 8);
        i0.ɵɵtext(18, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(19, "\n\n    ");
        i0.ɵɵtext(20, "\n    ");
        i0.ɵɵelementStart(21, "div", 9);
        i0.ɵɵtext(22, "\n      ");
        i0.ɵɵtemplate(23, AdaptUploaderComponent_adapt_alert_23_Template, 5, 5, "adapt-alert", 10);
        i0.ɵɵtext(24, "\n\n      ");
        i0.ɵɵtemplate(25, AdaptUploaderComponent_ng_container_25_Template, 4, 1, "ng-container", 11);
        i0.ɵɵtext(26, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(27, "\n\n    ");
        i0.ɵɵtext(28, "\n    ");
        i0.ɵɵtemplate(29, AdaptUploaderComponent_div_29_Template, 27, 7, "div", 12);
        i0.ɵɵtext(30, "\n\n    ");
        i0.ɵɵtext(31, "\n    ");
        i0.ɵɵtemplate(32, AdaptUploaderComponent_div_32_Template, 26, 13, "div", 13);
        i0.ɵɵtext(33, "\n    ");
        i0.ɵɵtext(34, "\n\n    ");
        i0.ɵɵtemplate(35, AdaptUploaderComponent_adapt_alert_35_Template, 2, 3, "adapt-alert", 14);
        i0.ɵɵtext(36, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(37, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(38, "\n\n");
        i0.ɵɵtemplate(39, AdaptUploaderComponent_ng_template_39_Template, 0, 0, "ng-template", null, 15, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(41, "\n\n");
        i0.ɵɵtemplate(42, AdaptUploaderComponent_ng_template_42_Template, 4, 2, "ng-template", null, 16, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(44, "\n\n");
        i0.ɵɵtemplate(45, AdaptUploaderComponent_ng_template_45_Template, 5, 2, "ng-template", null, 17, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(47, "\n");
    } if (rf & 2) {
        const _r9 = i0.ɵɵreference(40);
        const _r11 = i0.ɵɵreference(43);
        const _r13 = i0.ɵɵreference(46);
        i0.ɵɵproperty("multiple", ctx.isMultipleAllowed());
        i0.ɵɵattribute("aria-label", "File Control");
        i0.ɵɵadvance(10);
        i0.ɵɵproperty("label", ctx.label)("requiredLabel", ctx.context.requiredLabel)("showRequiredLabel", ctx.context.required)("tooltip", ctx.tooltipConfig);
        i0.ɵɵadvance(7);
        i0.ɵɵproperty("ngTemplateOutlet", ctx.readonly ? ctx.files.length ? _r9 : _r11 : _r13);
        i0.ɵɵadvance(6);
        i0.ɵɵproperty("ngForOf", ctx.statusMessages);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.customFormControl && ctx.context.errors && ctx.context.errors.length && ctx.context.control.touched);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", !ctx.readonly);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.files.length);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.isFoldersNotAllowed && ctx.showUploadFolderAlert);
    } }, directives: [i1.AdaptRxControlLabelComponent, i5.NgTemplateOutlet, i5.NgForOf, i5.NgIf, i1.AdaptAlertComponent, i1.AdaptPopoverDirective, i1.AdaptCollapseDirective, i1.AdaptButtonComponent, i1.AdaptUploaderItemComponent, i1.AdaptEmptyStateComponent, i1.AdaptTooltipDirective, i5.NgSwitch, i5.NgSwitchCase], pipes: [i1.FileSizePipe, i1.FileTypesPipe, i5.SlicePipe], encapsulation: 2, data: { animation: [ANIMATION_INIT_STATE] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptUploaderComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-uploader',
                templateUrl: './uploader.component.html',
                providers: [
                    createFormControlValueAccessor(AdaptUploaderComponent),
                    createFormControlValidator(AdaptUploaderComponent),
                    FileManager,
                    IconManager
                ],
                encapsulation: ViewEncapsulation.None,
                animations: [ANIMATION_INIT_STATE]
            }]
    }], function () { return [{ type: i1.FileManager }, { type: i1.IconManager }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i2.Directionality }, { type: i3.AnimationBuilder }, { type: i0.Injector }, { type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }, { type: i1.AdaptTranslateService }, { type: i4.AdaptRadarService }]; }, { fileInput: [{
            type: ViewChild,
            args: ['fileInput']
        }], fileList: [{
            type: ViewChild,
            args: ['fileList']
        }], dropEnter: [{
            type: ViewChild,
            args: ['dropEnter']
        }], dnd: [{
            type: ViewChild,
            args: ['dnd']
        }], drop: [{
            type: ViewChild,
            args: ['drop']
        }], droppableAreaBlock: [{
            type: ViewChild,
            args: ['droppableAreaBlock']
        }], filesList: [{
            type: ViewChildren,
            args: [AdaptUploaderItemComponent]
        }], mode: [{
            type: Input
        }], selectionMode: [{
            type: Input
        }], enableDnD: [{
            type: Input
        }], enableFileDialog: [{
            type: Input
        }], allowedTypes: [{
            type: Input
        }], forbiddenTypes: [{
            type: Input
        }], suppressParallel: [{
            type: Input
        }], filesCount: [{
            type: Input
        }], allowDuplicates: [{
            type: Input
        }], label: [{
            type: Input
        }], showUploadFolderAlert: [{
            type: Input
        }], url: [{
            type: Input
        }], deleteUrl: [{
            type: Input
        }], icons: [{
            type: Input
        }], visibleFiles: [{
            type: Input
        }], reusable: [{
            type: Input
        }], indeterminateFileLoader: [{
            type: Input
        }], ariaDescribedBy: [{
            type: Input
        }], allowDeletion: [{
            type: Input
        }], texts: [{
            type: Input
        }], showFiles: [{
            type: Input
        }], fileErrors: [{
            type: Input
        }], droppableArea: [{
            type: Input
        }], customErrors: [{
            type: Input
        }], name: [{
            type: Input
        }], customFormControl: [{
            type: Input
        }], beforeFileDialogOpen: [{
            type: Output
        }], afterFileDialogOpen: [{
            type: Output
        }], beforeFilesAdded: [{
            type: Output
        }], afterFilesAdded: [{
            type: Output
        }], dropArea: [{
            type: Output
        }], dragOver: [{
            type: Output
        }], startFileUploading: [{
            type: Output
        }], endFileUploading: [{
            type: Output
        }], errorFileUploading: [{
            type: Output
        }], finishedFileUploading: [{
            type: Output
        }], removedFileFromQueue: [{
            type: Output
        }], deletedFile: [{
            type: Output
        }], cancelUploading: [{
            type: Output
        }], valueChange: [{
            type: Output
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], chunkSize: [{
            type: Input
        }], maxFileSize: [{
            type: Input
        }], hostClasses: [{
            type: HostBinding,
            args: ['class']
        }] }); })();
//# sourceMappingURL=uploader.component.js.map