{"version":3,"file":"typeahead-window.js","sourceRoot":"","sources":["../../../../../../libs/adapt-obsolete/src/lib/typeahead/typeahead-window.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport {\n  Component,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  NgZone,\n  OnInit,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChildren\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\nimport {toString, scrollToActive} from '@bmc-ux/adapt-angular';\n\n/**\n * Context for the typeahead result template in case you want to override the default one\n */\nexport interface ResultTemplateContext {\n  /**\n   * Your typeahead result data model\n   */\n  result: any;\n\n  /**\n   * Search term from the input used to get current result\n   */\n  term: string;\n}\n\n@Component({\n  selector: 'ngb-typeahead-window, adapt-typeahead-window',\n  exportAs: 'ngbTypeaheadWindow',\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n  host: {'role': 'listbox', '[id]': 'id'},\n  template: `\n    <ng-template #rt let-result=\"result\" let-term=\"term\">\n      <adapt-highlight [result]=\"formatter(result)\" [term]=\"term\"></adapt-highlight>\n    </ng-template>\n    <ng-container *ngIf=\"virtualScroll\">\n      <cdk-virtual-scroll-viewport\n        [itemSize]=\"virtualScrollItemSize\"\n        [ngStyle]=\"{'height': virtualScrollDropdownHeight}\">\n        <button #optionButton\n                *cdkVirtualFor=\"let result of results; let idx = index; trackBy: trackByForResults\"\n                type=\"button\"\n                class=\"dropdown-item\"\n                role=\"option\"\n                [id]=\"id + '-' + idx\"\n                [class.active]=\"idx === activeIdx\"\n                (mouseenter)=\"markActive(idx)\"\n                (click)=\"select(result)\">\n          <ng-template [ngTemplateOutlet]=\"resultTemplate || rt\"\n                       [ngTemplateOutletContext]=\"{result: result, term: term}\"></ng-template>\n        </button>\n      </cdk-virtual-scroll-viewport>\n    </ng-container>\n    <ng-container *ngIf=\"!virtualScroll\">\n      <button #optionButton\n              *ngFor=\"let result of results; let idx = index; trackBy: trackByForResults\"\n              type=\"button\"\n              class=\"dropdown-item\"\n              role=\"option\"\n              [id]=\"id + '-' + idx\"\n              [class.active]=\"idx === activeIdx\"\n              (mouseenter)=\"markActive(idx)\"\n              (click)=\"select(result)\">\n        <ng-template [ngTemplateOutlet]=\"resultTemplate || rt\"\n                     [ngTemplateOutletContext]=\"{result: result, term: term}\"></ng-template>\n      </button>\n    </ng-container>\n  `\n})\nexport class AdaptTypeaheadWindowComponent implements OnInit {\n  activeIdx: number = 0;\n\n  /**\n   *  The id for the typeahead window. The id should be unique and the same\n   *  as the associated typeahead's id.\n   */\n  @Input() id: string;\n\n  /**\n   * Flag indicating if the first row should be active initially\n   */\n  @Input() focusFirst: boolean = true;\n\n  /**\n   * Typeahead match results to be displayed\n   */\n  @Input() results: any;\n\n  /**\n   * Search term used to get current results\n   */\n  @Input() term: string;\n\n  /**\n   * A function used to format a given result before display. This function should return a formatted string without any\n   * HTML markup\n   */\n  @Input() formatter: Function = toString;\n\n  /**\n   * A template to override a matching result default display\n   */\n  @Input() resultTemplate: TemplateRef<ResultTemplateContext>;\n\n  /**\n   * The flag informing that the popup is appended to document.body\n   */\n  @Input() appendedToBody: boolean = false;\n\n  /**\n   * Custom class for host element\n   */\n  @Input() hostClass: string;\n  /**\n   * Enable virtual scroll for results window. Can be suitable for big amount of results\n   */\n  @Input() virtualScroll: boolean;\n  /**\n   * Used to set \"itemSize\" virtual scroll @Input()\n   */\n  @Input() virtualScrollItemSize: number;\n  /**\n   * Used to set width for results dropdown\n   */\n  @Input() virtualScrollDropdownHeight: string;\n  /**\n   * Used to set height for results dropdown\n   */\n  @Input() virtualScrollDropdownWidth: string;\n  /**\n   * Event raised when user selects a particular result row\n   */\n  // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename\n  @Output('select') readonly selectEvent: EventEmitter<any> = new EventEmitter();\n\n  // eslint-disable-next-line @angular-eslint/no-output-rename\n  @Output('activeChange') readonly activeChangeEvent: EventEmitter<any> = new EventEmitter();\n\n  @ViewChildren('optionButton') optionButtons: QueryList<ElementRef<HTMLButtonElement>>;\n\n  @HostBinding('class') get className(): string {\n    return `dropdown-menu show ${this.hostClass || ''} ${this.virtualScroll ? 'dropdown-menu_virtual-scroll' : ''}`;\n  }\n\n  @HostBinding('style.width') get dropdownWidth(): string {\n    return this.virtualScroll ? this.virtualScrollDropdownWidth : 'auto';\n  }\n\n  @HostBinding('style.zIndex') get popupZIndex(): string {\n    return this.appendedToBody ? '1060' : null;\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone) {\n  }\n\n  hasActive(): boolean {\n    return this.activeIdx > -1 && this.activeIdx < this.results.length;\n  }\n\n  getActive(): any {\n    return this.results[this.activeIdx];\n  }\n\n  markActive(activeIdx: number): void {\n    this.activeIdx = activeIdx;\n    this._activeChanged();\n  }\n\n  next(): void {\n    if (this.activeIdx !== this.results.length - 1) {\n      this.activeIdx++;\n    }\n    this._activeChanged();\n  }\n\n  prev(): void {\n    if (this.activeIdx < 0) {\n      this.activeIdx = 0;\n    } else if (this.activeIdx > 0) {\n      this.activeIdx--;\n    }\n    this._activeChanged();\n  }\n\n  resetActive(): void {\n    this.activeIdx = this.focusFirst ? 0 : -1;\n    this._activeChanged();\n  }\n\n  select(item: any): void {\n    this.selectEvent.emit(item);\n  }\n\n  ngOnInit(): void {\n    this.resetActive();\n  }\n\n  trackByForResults(index: number): number {\n    return index;\n  }\n\n  private _activeChanged(): void {\n    this.activeChangeEvent.emit(this.activeIdx >= 0 ? this.id + '-' + this.activeIdx : undefined);\n\n    this.scrollToActiveItem();\n  }\n\n  private scrollToActiveItem(): void {\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      if (!this.optionButtons) {\n        return;\n      }\n      const activeButtonElRef = this.optionButtons.find(el => el.nativeElement.classList.contains('active'));\n\n      if (activeButtonElRef) {\n        const buttonEl = activeButtonElRef.nativeElement;\n\n        scrollToActive(buttonEl);\n      }\n    });\n  }\n}\n"]}