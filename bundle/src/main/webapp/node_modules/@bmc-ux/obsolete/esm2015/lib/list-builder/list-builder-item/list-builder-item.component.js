// TODO update types
/* eslint-disable @typescript-eslint/no-explicit-any */
import { Component, EventEmitter, forwardRef, Input, NgZone, Output } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { take } from 'rxjs/operators';
import { AdaptCustomActionsAlignEnum } from '@bmc-ux/adapt-angular';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../../textfield/textfield.component";
import * as i3 from "@angular/forms";
import * as i4 from "@bmc-ux/adapt-angular";
function AdaptListBuilderItemComponent_div_0_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "div", 3);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementStart(4, "adapt-textfield", 4);
    i0.ɵɵlistener("ngModelChange", function AdaptListBuilderItemComponent_div_0_ng_container_2_Template_adapt_textfield_ngModelChange_4_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(2); return ctx_r3.inputControlModel = $event; })("blur", function AdaptListBuilderItemComponent_div_0_ng_container_2_Template_adapt_textfield_blur_4_listener() { i0.ɵɵrestoreView(_r4); const ctx_r5 = i0.ɵɵnextContext(2); return ctx_r5.isItemDisallowed ? ctx_r5.cancelEditMode() : ctx_r5.exitEditMode(); })("keyup", function AdaptListBuilderItemComponent_div_0_ng_container_2_Template_adapt_textfield_keyup_4_listener() { i0.ɵɵrestoreView(_r4); const ctx_r6 = i0.ɵɵnextContext(2); return ctx_r6.editChange(); })("keyup.esc", function AdaptListBuilderItemComponent_div_0_ng_container_2_Template_adapt_textfield_keyup_esc_4_listener() { i0.ɵɵrestoreView(_r4); const ctx_r7 = i0.ɵɵnextContext(2); return ctx_r7.cancelEditMode(); })("keydown.enter", function AdaptListBuilderItemComponent_div_0_ng_container_2_Template_adapt_textfield_keydown_enter_4_listener($event) { return $event.preventDefault(); })("keyup.enter", function AdaptListBuilderItemComponent_div_0_ng_container_2_Template_adapt_textfield_keyup_enter_4_listener() { i0.ɵɵrestoreView(_r4); const ctx_r9 = i0.ɵɵnextContext(2); return ctx_r9.isItemDisallowed ? false : ctx_r9.exitEditMode(); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n\n    ");
    i0.ɵɵelementStart(7, "div", 5);
    i0.ɵɵtext(8, "\n      ");
    i0.ɵɵelement(9, "adapt-custom-actions", 6);
    i0.ɵɵtext(10, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(11, "\n  ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngModel", ctx_r1.inputControlModel)("autofocus", true);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("alignedTo", ctx_r1.customActionsAlignedTo)("actions", ctx_r1.customActions);
} }
function AdaptListBuilderItemComponent_div_0_ng_container_4_adapt_icon_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-icon", 13);
} if (rf & 2) {
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("name", "dots");
} }
function AdaptListBuilderItemComponent_div_0_ng_container_4_button_11_Template(rf, ctx) { if (rf & 1) {
    const _r14 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 14);
    i0.ɵɵlistener("click", function AdaptListBuilderItemComponent_div_0_ng_container_4_button_11_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r14); const ctx_r13 = i0.ɵɵnextContext(3); return ctx_r13.enterEditMode(); });
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "span", 15);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r11 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("placement", ctx_r11.itemActionsTooltipConfig.editBtn.placement)("adaptRadarDisableEventSending", true)("adaptTooltip", ctx_r11.itemActionsTooltipConfig.editBtn.tooltipText);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r11.controlLabels.edit);
} }
function AdaptListBuilderItemComponent_div_0_ng_container_4_button_13_Template(rf, ctx) { if (rf & 1) {
    const _r16 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 16);
    i0.ɵɵlistener("click", function AdaptListBuilderItemComponent_div_0_ng_container_4_button_13_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r16); const ctx_r15 = i0.ɵɵnextContext(3); return ctx_r15.deleteItem(); });
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "span", 15);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r12 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("placement", ctx_r12.itemActionsTooltipConfig.deleteBtn.placement)("adaptRadarDisableEventSending", true)("adaptTooltip", ctx_r12.itemActionsTooltipConfig.deleteBtn.tooltipText);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r12.controlLabels.delete);
} }
function AdaptListBuilderItemComponent_div_0_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    const _r18 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n\n    ");
    i0.ɵɵtemplate(2, AdaptListBuilderItemComponent_div_0_ng_container_4_adapt_icon_2_Template, 1, 2, "adapt-icon", 7);
    i0.ɵɵtext(3, "\n\n    ");
    i0.ɵɵelementStart(4, "span", 8);
    i0.ɵɵlistener("keydown.ArrowUp", function AdaptListBuilderItemComponent_div_0_ng_container_4_Template_span_keydown_ArrowUp_4_listener($event) { i0.ɵɵrestoreView(_r18); const ctx_r17 = i0.ɵɵnextContext(2); return ctx_r17.onUp($event); })("keydown.ArrowDown", function AdaptListBuilderItemComponent_div_0_ng_container_4_Template_span_keydown_ArrowDown_4_listener($event) { i0.ɵɵrestoreView(_r18); const ctx_r19 = i0.ɵɵnextContext(2); return ctx_r19.onDown($event); });
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵelement(6, "adapt-highlight", 9);
    i0.ɵɵtext(7, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n\n    ");
    i0.ɵɵelementStart(9, "div", 10);
    i0.ɵɵtext(10, "\n      ");
    i0.ɵɵtemplate(11, AdaptListBuilderItemComponent_div_0_ng_container_4_button_11_Template, 5, 4, "button", 11);
    i0.ɵɵtext(12, "\n\n      ");
    i0.ɵɵtemplate(13, AdaptListBuilderItemComponent_div_0_ng_container_4_button_13_Template, 5, 4, "button", 12);
    i0.ɵɵtext(14, "\n    ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n\n  ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r2.draggable);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("result", ctx_r2.listItem.name)("term", ctx_r2.query);
    i0.ɵɵadvance(5);
    i0.ɵɵproperty("ngIf", !ctx_r2.hideEdit);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r2.hideDelete);
} }
const _c0 = function (a0, a1, a2) { return { "cursor-default": a0, "disabled": a1, "hover-disabled": a2 }; };
function AdaptListBuilderItemComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 1);
    i0.ɵɵtext(1, "\n\n  ");
    i0.ɵɵtemplate(2, AdaptListBuilderItemComponent_div_0_ng_container_2_Template, 12, 4, "ng-container", 2);
    i0.ɵɵtext(3, "\n\n\n  ");
    i0.ɵɵtemplate(4, AdaptListBuilderItemComponent_div_0_ng_container_4_Template, 16, 5, "ng-container", 2);
    i0.ɵɵtext(5, "\n");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction3(3, _c0, !!ctx_r0.query, ctx_r0.disabled, ctx_r0.disabled || ctx_r0.hideControls || ctx_r0.editMode));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r0.editMode);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r0.editMode && ctx_r0.listItem);
} }
export class AdaptListBuilderItemComponent {
    constructor(_ngZone) {
        this._ngZone = _ngZone;
        this.editMode = false;
        this.inputControlModel = '';
        this.customActionsAlignedTo = AdaptCustomActionsAlignEnum.Right;
        this.id = '';
        this.query = '';
        this.hideControls = false;
        this.isItemDisallowed = false;
        this.hideEdit = false;
        this.hideDelete = false;
        this.draggable = true;
        this.disabled = false;
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onEdit = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onDelete = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onSave = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onCancel = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onKeyUp = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onKeyDown = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-on-prefix
        this.onEditChange = new EventEmitter();
        // ### ControlValueAccessor implementation
        this.propagateChange = () => {
            return;
        };
    }
    get customActions() {
        return [
            {
                name: this.controlLabels.cancel,
                visible: true,
                onClick: this.cancelEditMode.bind(this),
                onMouseDown: (event) => {
                    event.preventDefault();
                }
            },
            {
                name: this.controlLabels.save,
                visible: !this.isItemDisallowed,
                onClick: this.exitEditMode.bind(this),
                onMouseDown: (event) => {
                    event.preventDefault();
                }
            }
        ];
    }
    /**
     * Save value and exit edit mode
     */
    exitEditMode() {
        this.editMode = false;
        this.listItem.name = this.inputControlModel;
        this.onSave.emit(this.listItem);
        this.onEditChange.emit('');
    }
    /**
     * Exit edit mode without saving
     */
    cancelEditMode() {
        this.editMode = false;
        this.onCancel.emit(this.listItem);
        this.onEditChange.emit('');
    }
    enterEditMode() {
        this.editMode = true;
        this.inputControlModel = this.listItem.name;
    }
    deleteItem() {
        this.onDelete.emit(this.listItem);
    }
    editChange() {
        this.onEditChange.emit(this.inputControlModel);
    }
    onUp(e) {
        e.preventDefault();
        this.onKeyUp.emit();
        this._ngZone.onStable
            .pipe(take(1))
            .subscribe((() => {
            e.target.focus();
        }).bind(e));
    }
    onDown(e) {
        e.preventDefault();
        this.onKeyDown.emit();
    }
    writeValue(value) {
        if (value) {
            this.listItem = value;
        }
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched() {
        return;
    }
}
AdaptListBuilderItemComponent.ɵfac = function AdaptListBuilderItemComponent_Factory(t) { return new (t || AdaptListBuilderItemComponent)(i0.ɵɵdirectiveInject(i0.NgZone)); };
AdaptListBuilderItemComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptListBuilderItemComponent, selectors: [["adapt-list-builder-item"]], hostVars: 3, hostBindings: function AdaptListBuilderItemComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵattribute("id", ctx.id);
        i0.ɵɵstyleProp("display", "block");
    } }, inputs: { id: "id", query: "query", controlLabels: "controlLabels", itemActionsTooltipConfig: "itemActionsTooltipConfig", hideControls: "hideControls", isItemDisallowed: "isItemDisallowed", hideEdit: "hideEdit", hideDelete: "hideDelete", draggable: "draggable", disabled: "disabled" }, outputs: { onEdit: "onEdit", onDelete: "onDelete", onSave: "onSave", onCancel: "onCancel", onKeyUp: "onKeyUp", onKeyDown: "onKeyDown", onEditChange: "onEditChange" }, features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => AdaptListBuilderItemComponent),
                multi: true
            }
        ])], decls: 2, vars: 1, consts: [["class", "adapt-list-item adapt-builder-list-item", 3, "ngClass", 4, "ngIf"], [1, "adapt-list-item", "adapt-builder-list-item", 3, "ngClass"], [4, "ngIf"], [1, "adapt-list-item__edit-mode"], [3, "ngModel", "autofocus", "ngModelChange", "blur", "keyup", "keyup.esc", "keydown.enter", "keyup.enter"], [1, "adapt-list-item__controls"], [3, "alignedTo", "actions"], ["class", "adapt-list-drag m-end-1", 3, "adaptRadarDisableEventSending", "name", 4, "ngIf"], ["tabindex", "0", 1, "adapt-list-name", 3, "keydown.ArrowUp", "keydown.ArrowDown"], [3, "result", "term"], [1, "adapt-buttons-wrapper"], ["type", "button", "class", "d-icon-pencil_adapt btn btn-link list-update", 3, "placement", "adaptRadarDisableEventSending", "adaptTooltip", "click", 4, "ngIf"], ["type", "button", "class", "d-icon-trash_adapt btn btn-link list-remove", 3, "placement", "adaptRadarDisableEventSending", "adaptTooltip", "click", 4, "ngIf"], [1, "adapt-list-drag", "m-end-1", 3, "adaptRadarDisableEventSending", "name"], ["type", "button", 1, "d-icon-pencil_adapt", "btn", "btn-link", "list-update", 3, "placement", "adaptRadarDisableEventSending", "adaptTooltip", "click"], [1, "sr-only"], ["type", "button", 1, "d-icon-trash_adapt", "btn", "btn-link", "list-remove", 3, "placement", "adaptRadarDisableEventSending", "adaptTooltip", "click"]], template: function AdaptListBuilderItemComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, AdaptListBuilderItemComponent_div_0_Template, 6, 7, "div", 0);
        i0.ɵɵtext(1, "\n");
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.listItem);
    } }, directives: [i1.NgIf, i1.NgClass, i2.AdaptTextFieldComponent, i3.NgControlStatus, i3.NgModel, i4.AdaptCustomActionsComponent, i4.AdaptHighlightDirective, i4.AdaptIconComponent, i4.AdaptTooltipDirective], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptListBuilderItemComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-list-builder-item',
                templateUrl: './list-builder-item.component.html',
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => AdaptListBuilderItemComponent),
                        multi: true
                    }
                ],
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[attr.id]': 'id',
                    '[style.display]': "'block'"
                }
            }]
    }], function () { return [{ type: i0.NgZone }]; }, { id: [{
            type: Input
        }], query: [{
            type: Input
        }], controlLabels: [{
            type: Input
        }], itemActionsTooltipConfig: [{
            type: Input
        }], hideControls: [{
            type: Input
        }], isItemDisallowed: [{
            type: Input
        }], hideEdit: [{
            type: Input
        }], hideDelete: [{
            type: Input
        }], draggable: [{
            type: Input
        }], disabled: [{
            type: Input
        }], onEdit: [{
            type: Output
        }], onDelete: [{
            type: Output
        }], onSave: [{
            type: Output
        }], onCancel: [{
            type: Output
        }], onKeyUp: [{
            type: Output
        }], onKeyDown: [{
            type: Output
        }], onEditChange: [{
            type: Output
        }] }); })();
//# sourceMappingURL=list-builder-item.component.js.map