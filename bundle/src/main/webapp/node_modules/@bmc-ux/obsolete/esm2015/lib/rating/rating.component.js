import { Component, ElementRef, EventEmitter, forwardRef, Input, Output, ViewEncapsulation } from '@angular/core';
import { AdaptRadarAngularCustomEventName, AdaptTranslateService, toBoolean, toNumber } from '@bmc-ux/adapt-angular';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { AdaptRadarGenericDirective, AdaptRadarService } from '@bmc-ux/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "@bmc-ux/adapt-angular";
import * as i2 from "@bmc-ux/adapt-radar";
import * as i3 from "@angular/common";
function AdaptRatingComponent_ng_container_0_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r6 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 2);
    i0.ɵɵlistener("mouseenter", function AdaptRatingComponent_ng_container_0_button_2_Template_button_mouseenter_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r6); const index_r4 = restoredCtx.index; const ctx_r5 = i0.ɵɵnextContext(2); return ctx_r5.onEnter(index_r4 + 1); })("click", function AdaptRatingComponent_ng_container_0_button_2_Template_button_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r6); const index_r4 = restoredCtx.index; const ctx_r7 = i0.ɵɵnextContext(2); return ctx_r7.observerOnClick(index_r4 + 1); });
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "span", 3);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const rating_r3 = ctx.$implicit;
    const index_r4 = ctx.index;
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("is-active", rating_r3.fill === 100)("is-half-active", rating_r3.fill > 0 && rating_r3.fill < 100)("is-readonly", ctx_r2.disabled);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("adaptTooltip", ctx_r2.tooltip[index_r4])("placement", "top");
    i0.ɵɵattribute("tabindex", ctx_r2.disabled ? -1 : null);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r2.tooltip && ctx_r2.tooltip[index_r4] ? ctx_r2.tooltip[index_r4] : rating_r3.index);
} }
function AdaptRatingComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n  ");
    i0.ɵɵtemplate(2, AdaptRatingComponent_ng_container_0_button_2_Template, 5, 11, "button", 1);
    i0.ɵɵtext(3, "\n");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r0.ratingList);
} }
function AdaptRatingComponent_ng_container_2_span_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 5);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵelementStart(2, "span", 3);
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(4, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const rating_r9 = ctx.$implicit;
    const index_r10 = ctx.index;
    const ctx_r8 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("is-active", rating_r9.fill === 100)("is-half-active", rating_r9.fill > 0 && rating_r9.fill < 100);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("adaptTooltip", ctx_r8.tooltip[index_r10])("placement", "top");
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r8.tooltip && ctx_r8.tooltip[index_r10] ? ctx_r8.tooltip[index_r10] : rating_r9.index);
} }
function AdaptRatingComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n  ");
    i0.ɵɵtemplate(2, AdaptRatingComponent_ng_container_2_span_2_Template, 5, 8, "span", 4);
    i0.ɵɵtext(3, "\n");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r1.ratingList);
} }
const noop = () => {
    return;
};
// TODO: Refactor this if possible
/* eslint-disable-next-line @typescript-eslint/no-explicit-any */
export const ADAPT_RATING_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => AdaptRatingComponent),
    multi: true
};
export class AdaptRatingComponent extends AdaptRadarGenericDirective {
    constructor(ts, _adaptRadarService, _elem) {
        super(_adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptRating);
        this.ts = ts;
        this.ratingList = [];
        // eslint-disable-next-line @angular-eslint/no-output-rename
        this.activeRateChanged = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-rename
        this.hoverChanged = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-rename
        this.leaveChanged = new EventEmitter();
        this._onTouchedCallback = noop;
        // TODO: Refactor this if possible
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        this._onChangeCallback = noop;
        this._size = 'extra-small';
        this._disabled = false;
        this._maxValue = 5;
        this.setDefaultTexts(ts.getCurrentLanguage());
    }
    get size() {
        return this._size;
    }
    set size(v) {
        this._size = v;
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    get disabled() {
        return this._disabled;
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    set disabled(v) {
        this._disabled = toBoolean(v);
    }
    get tooltip() {
        return this._tooltip;
    }
    set tooltip(v) {
        this._tooltip = v;
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    get maxValue() {
        return this._maxValue;
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    set maxValue(v) {
        this._maxValue = toNumber(v);
        this._createArrayList();
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    get rate() {
        return this._rate;
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    set rate(v) {
        this._rate = toNumber(v);
        this._onChangeCallback(v);
    }
    setDefaultTexts(translation) {
        this.tooltip = [
            translation['adapt.rating.like.l1'],
            translation['adapt.rating.like.l2'],
            translation['adapt.rating.like.l3'],
            translation['adapt.rating.like.l4'],
            translation['adapt.rating.like.l5'],
        ];
    }
    writeValue(value) {
        if (this._rate !== value) {
            this._rate = value;
        }
        this._updateValue(value);
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    registerOnChange(fn) {
        this._onChangeCallback = fn;
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    ngOnInit() {
        this._createArrayList();
        this._updateState(this.rate);
    }
    observerOnClick(value) {
        this._updateValue(value);
    }
    onEnter(value) {
        this.hoverChanged.emit(value);
        if (this._isNotDisabled()) {
            this._updateState(value);
        }
    }
    reset() {
        this.leaveChanged.emit(this.currentRating);
        this._updateState(this.rate);
    }
    _updateValue(v) {
        const ratingValue = this._getValueInRange(v, this.maxValue, 1);
        if (this._isNotDisabled() && this.rate !== ratingValue) {
            this.rate = ratingValue;
        }
        this._updateState(this.rate);
        this.activeRateChanged.emit(this.rate);
    }
    _getValueInRange(value, max, min = 0) {
        return Math.max(Math.min(value, max), min);
    }
    _isNotDisabled() {
        return !this.readonly && !this.disabled;
    }
    _updateState(ratingValue) {
        this.currentRating = ratingValue;
        this.ratingList.map((_, i) => _.fill = this._getFillValue(i));
    }
    _createArrayList() {
        this.ratingList = Array.from({ length: this.maxValue }, (_, v) => ({ fill: 0, index: v }));
    }
    _getFillValue(index) {
        const diff = this.currentRating - index;
        if (diff >= 1) {
            return 100;
        }
        if (diff < 1 && diff > 0) {
            return Number.parseInt((diff * 100).toFixed(2), 10);
        }
        return 0;
    }
}
AdaptRatingComponent.ɵfac = function AdaptRatingComponent_Factory(t) { return new (t || AdaptRatingComponent)(i0.ɵɵdirectiveInject(i1.AdaptTranslateService), i0.ɵɵdirectiveInject(i2.AdaptRadarService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptRatingComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptRatingComponent, selectors: [["adapt-rating"]], hostVars: 10, hostBindings: function AdaptRatingComponent_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("mouseleave", function AdaptRatingComponent_mouseleave_HostBindingHandler() { return ctx.reset(); });
    } if (rf & 2) {
        i0.ɵɵclassProp("a-rating", true)("a-rating_small", ctx.size === "small" && !ctx.readonly)("a-rating_medium", ctx.size === "medium" && !ctx.readonly)("a-rating_large", ctx.size === "large" && !ctx.readonly)("a-rating_readonly", ctx.readonly);
    } }, inputs: { readonly: "readonly", size: "size", disabled: "disabled", tooltip: "tooltip", maxValue: "maxValue", rate: "rate" }, outputs: { activeRateChanged: "active-rate-changed", hoverChanged: "hover-changed", leaveChanged: "leave-changed" }, features: [i0.ɵɵProvidersFeature([ADAPT_RATING_ACCESSOR]), i0.ɵɵInheritDefinitionFeature], decls: 4, vars: 2, consts: [[4, "ngIf"], ["type", "button", "class", "a-rating__item d-icon-star_o", 3, "is-active", "is-half-active", "is-readonly", "adaptRadarDisableEventSending", "adaptTooltip", "placement", "mouseenter", "click", 4, "ngFor", "ngForOf"], ["type", "button", 1, "a-rating__item", "d-icon-star_o", 3, "adaptRadarDisableEventSending", "adaptTooltip", "placement", "mouseenter", "click"], [1, "sr-only"], ["class", "a-rating__item d-icon-star_o is-readonly", 3, "is-active", "is-half-active", "adaptRadarDisableEventSending", "adaptTooltip", "placement", 4, "ngFor", "ngForOf"], [1, "a-rating__item", "d-icon-star_o", "is-readonly", 3, "adaptRadarDisableEventSending", "adaptTooltip", "placement"]], template: function AdaptRatingComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtemplate(0, AdaptRatingComponent_ng_container_0_Template, 4, 1, "ng-container", 0);
        i0.ɵɵtext(1, "\n\n");
        i0.ɵɵtemplate(2, AdaptRatingComponent_ng_container_2_Template, 4, 1, "ng-container", 0);
        i0.ɵɵtext(3, "\n");
    } if (rf & 2) {
        i0.ɵɵproperty("ngIf", !ctx.readonly);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.readonly);
    } }, directives: [i3.NgIf, i3.NgForOf, i1.AdaptTooltipDirective], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptRatingComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-rating',
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: {
                    '[class.a-rating]': 'true',
                    '[class.a-rating_small]': 'size === "small" && !readonly',
                    '[class.a-rating_medium]': 'size === "medium" && !readonly',
                    '[class.a-rating_large]': 'size === "large" && !readonly',
                    '[class.a-rating_readonly]': 'readonly',
                    '(mouseleave)': 'reset()'
                },
                templateUrl: './rating.component.html',
                encapsulation: ViewEncapsulation.None,
                providers: [ADAPT_RATING_ACCESSOR]
            }]
    }], function () { return [{ type: i1.AdaptTranslateService }, { type: i2.AdaptRadarService }, { type: i0.ElementRef }]; }, { readonly: [{
            type: Input
        }], activeRateChanged: [{
            type: Output,
            args: ['active-rate-changed']
        }], hoverChanged: [{
            type: Output,
            args: ['hover-changed']
        }], leaveChanged: [{
            type: Output,
            args: ['leave-changed']
        }], size: [{
            type: Input
        }], disabled: [{
            type: Input
        }], tooltip: [{
            type: Input
        }], maxValue: [{
            type: Input
        }], rate: [{
            type: Input
        }] }); })();
//# sourceMappingURL=rating.component.js.map