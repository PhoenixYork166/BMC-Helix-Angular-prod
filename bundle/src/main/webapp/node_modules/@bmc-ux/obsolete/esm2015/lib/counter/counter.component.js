import { Component, ElementRef, EventEmitter, HostBinding, Injector, Input, Output, Renderer2, ViewChild } from '@angular/core';
import { FormControl } from '@angular/forms';
import { animate, keyframes, style, transition, trigger, useAnimation } from '@angular/animations';
import { isNil } from 'lodash-es';
import { DOWN_ARROW, UP_ARROW } from '@angular/cdk/keycodes';
import { AdaptDeviceDetectionService, AdaptRadarAngularCustomEventName, AdaptTranslateService, ANIMATION_DURATION, ANIMATION_NAME, ANIMATION_TIMING_FUNCTION, CounterOperations, createFormControlValidator, createFormControlValueAccessor, formatString, FormComponent, getEventKeyCode, isUndefined } from '@bmc-ux/adapt-angular';
import { AdaptRadarService } from '@bmc-ux/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "@bmc-ux/adapt-angular";
import * as i2 from "@bmc-ux/adapt-radar";
import * as i3 from "@angular/common";
const _c0 = ["container"];
const _c1 = ["input"];
const _c2 = ["prefixEl"];
const _c3 = ["suffixEl"];
const _c4 = ["mobileActionsContainer"];
function AdaptCounterComponent_adapt_rx_control_label_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "adapt-rx-control-label", 14);
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("for", ctx_r1.id)("label", ctx_r1.label)("requiredLabel", ctx_r1.requiredLabel)("showRequiredLabel", ctx_r1.required)("tooltip", ctx_r1.tooltipConfig);
} }
function AdaptCounterComponent_div_12_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 15, 16);
    i0.ɵɵlistener("mouseenter", function AdaptCounterComponent_div_12_Template_div_mouseenter_0_listener() { i0.ɵɵrestoreView(_r11); const _r8 = i0.ɵɵreference(1); const _r9 = i0.ɵɵreference(4); const ctx_r10 = i0.ɵɵnextContext(); return ctx_r10.toggleTooltip(_r8, _r9); })("mouseout", function AdaptCounterComponent_div_12_Template_div_mouseout_0_listener() { i0.ɵɵrestoreView(_r11); const _r8 = i0.ɵɵreference(1); const _r9 = i0.ɵɵreference(4); const ctx_r12 = i0.ɵɵnextContext(); return ctx_r12.toggleTooltip(_r8, _r9); });
    i0.ɵɵtext(2, "\n      ");
    i0.ɵɵelementStart(3, "span", 17, 18);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵpropertyInterpolate("adaptTooltip", ctx_r2.prefix);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r2.prefix);
} }
function AdaptCounterComponent_div_21_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 19);
    i0.ɵɵtext(1, "\n          ");
    i0.ɵɵelement(2, "span", 20);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    i0.ɵɵproperty("@errorToggleAnimation", undefined);
} }
function AdaptCounterComponent_div_24_button_11_Template(rf, ctx) { if (rf & 1) {
    const _r17 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 29);
    i0.ɵɵlistener("click", function AdaptCounterComponent_div_24_button_11_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r17); const ctx_r16 = i0.ɵɵnextContext(2); return ctx_r16.increaseMobile(); })("@highlightMobileIncrease.start", function AdaptCounterComponent_div_24_button_11_Template_button_animation_highlightMobileIncrease_start_0_listener($event) { i0.ɵɵrestoreView(_r17); const ctx_r18 = i0.ɵɵnextContext(2); return ctx_r18.onAnimationIncreaseStart($event); })("@highlightMobileIncrease.done", function AdaptCounterComponent_div_24_button_11_Template_button_animation_highlightMobileIncrease_done_0_listener($event) { i0.ɵɵrestoreView(_r17); const ctx_r19 = i0.ɵɵnextContext(2); return ctx_r19.onAnimationIncreaseDone($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r14 = i0.ɵɵnextContext(2);
    i0.ɵɵstyleProp("pointer-events", ctx_r14.increaseAnimationDone ? "all" : "none");
    i0.ɵɵproperty("disabled", !ctx_r14.increaseAllowed())("@highlightMobileIncrease", undefined);
    i0.ɵɵattribute("aria-label", ctx_r14.defaultErrors.increase)("data-testid", ctx_r14.testID + "_plus");
} }
function AdaptCounterComponent_div_24_button_13_Template(rf, ctx) { if (rf & 1) {
    const _r21 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 30);
    i0.ɵɵlistener("click", function AdaptCounterComponent_div_24_button_13_Template_button_click_0_listener() { i0.ɵɵrestoreView(_r21); const ctx_r20 = i0.ɵɵnextContext(2); return ctx_r20.decreaseMobile(); })("@highlightMobileDecrease.start", function AdaptCounterComponent_div_24_button_13_Template_button_animation_highlightMobileDecrease_start_0_listener($event) { i0.ɵɵrestoreView(_r21); const ctx_r22 = i0.ɵɵnextContext(2); return ctx_r22.onAnimationDecreaseStart($event); })("@highlightMobileDecrease.done", function AdaptCounterComponent_div_24_button_13_Template_button_animation_highlightMobileDecrease_done_0_listener($event) { i0.ɵɵrestoreView(_r21); const ctx_r23 = i0.ɵɵnextContext(2); return ctx_r23.onAnimationDecreaseDone($event); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r15 = i0.ɵɵnextContext(2);
    i0.ɵɵstyleProp("pointer-events", ctx_r15.decreaseAnimationDone ? "all" : "none");
    i0.ɵɵproperty("disabled", !ctx_r15.decreaseAllowed())("@highlightMobileDecrease", undefined);
    i0.ɵɵattribute("aria-label", ctx_r15.defaultErrors.decrease)("data-testid", ctx_r15.testID + "_minus");
} }
function AdaptCounterComponent_div_24_Template(rf, ctx) { if (rf & 1) {
    const _r25 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 21);
    i0.ɵɵlistener("click", function AdaptCounterComponent_div_24_Template_div_click_0_listener() { i0.ɵɵrestoreView(_r25); const ctx_r24 = i0.ɵɵnextContext(); return ctx_r24.checkForMobileSpinners(); });
    i0.ɵɵtext(1, "\n        ");
    i0.ɵɵelementStart(2, "button", 22);
    i0.ɵɵlistener("click", function AdaptCounterComponent_div_24_Template_button_click_2_listener() { i0.ɵɵrestoreView(_r25); const ctx_r26 = i0.ɵɵnextContext(); return ctx_r26.increaseCounter(); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementStart(4, "button", 23);
    i0.ɵɵlistener("click", function AdaptCounterComponent_div_24_Template_button_click_4_listener() { i0.ɵɵrestoreView(_r25); const ctx_r27 = i0.ɵɵnextContext(); return ctx_r27.decreaseCounter(); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5, "\n\n        ");
    i0.ɵɵelementStart(6, "div", 24, 25);
    i0.ɵɵtext(8, "\n          ");
    i0.ɵɵelementStart(9, "div", 26);
    i0.ɵɵtext(10, "\n            ");
    i0.ɵɵtemplate(11, AdaptCounterComponent_div_24_button_11_Template, 1, 6, "button", 27);
    i0.ɵɵtext(12, "\n            ");
    i0.ɵɵtemplate(13, AdaptCounterComponent_div_24_button_13_Template, 1, 6, "button", 28);
    i0.ɵɵtext(14, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(16, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("focused", ctx_r5.isMobile && ctx_r5.isSpinnerMobile);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("@highlightArrow", ctx_r5.animateArrowUp)("disabled", ctx_r5.context.disabled || !ctx_r5.increaseAllowed());
    i0.ɵɵattribute("aria-label", ctx_r5.defaultErrors.increase)("data-testid", ctx_r5.testID + "_plus");
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("@highlightArrow", ctx_r5.animateArrowDown)("disabled", ctx_r5.context.disabled || !ctx_r5.decreaseAllowed());
    i0.ɵɵattribute("aria-label", ctx_r5.defaultErrors.decrease)("data-testid", ctx_r5.testID + "_minus");
    i0.ɵɵadvance(7);
    i0.ɵɵproperty("ngIf", ctx_r5.isSpinnerMobile);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r5.isSpinnerMobile);
} }
function AdaptCounterComponent_div_27_Template(rf, ctx) { if (rf & 1) {
    const _r31 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 31, 32);
    i0.ɵɵlistener("mouseenter", function AdaptCounterComponent_div_27_Template_div_mouseenter_0_listener() { i0.ɵɵrestoreView(_r31); const _r28 = i0.ɵɵreference(1); const _r29 = i0.ɵɵreference(4); const ctx_r30 = i0.ɵɵnextContext(); return ctx_r30.toggleTooltip(_r28, _r29); })("mouseout", function AdaptCounterComponent_div_27_Template_div_mouseout_0_listener() { i0.ɵɵrestoreView(_r31); const _r28 = i0.ɵɵreference(1); const _r29 = i0.ɵɵreference(4); const ctx_r32 = i0.ɵɵnextContext(); return ctx_r32.toggleTooltip(_r28, _r29); });
    i0.ɵɵtext(2, "\n      ");
    i0.ɵɵelementStart(3, "span", 17, 33);
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r6 = i0.ɵɵnextContext();
    i0.ɵɵpropertyInterpolate("adaptTooltip", ctx_r6.suffix);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true);
    i0.ɵɵadvance(5);
    i0.ɵɵtextInterpolate(ctx_r6.suffix);
} }
function AdaptCounterComponent_div_31_p_2_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "p", 36);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "b");
    i0.ɵɵtext(3);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(4, "span");
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const e_r34 = ctx.$implicit;
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate1("", e_r34.name, " ");
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate(e_r34.text);
} }
function AdaptCounterComponent_div_31_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 34);
    i0.ɵɵtext(1, "\n    ");
    i0.ɵɵtemplate(2, AdaptCounterComponent_div_31_p_2_Template, 7, 2, "p", 35);
    i0.ɵɵtext(3, "\n  ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r7 = i0.ɵɵnextContext();
    i0.ɵɵproperty("@validationFeedbackAnimation", undefined);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r7.context.errors);
} }
const _c5 = function (a0) { return { "adapt-counter__wrp--disabled": a0 }; };
// eslint-disable-next-line @typescript-eslint/no-var-requires
const bigNumber = require('bignumber.js');
export class AdaptCounterComponent extends FormComponent {
    constructor(_renderer, _injector, _deviceDetection, ts, _adaptRadarService, _elem) {
        super(_injector, ts, _adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptCounter);
        this._renderer = _renderer;
        this._injector = _injector;
        this._deviceDetection = _deviceDetection;
        // Need for using inherited properties in the template
        this.context = this;
        this.animateArrowUp = false;
        this.animateArrowDown = false;
        this.isCompact = false;
        this.increaseAnimationDone = false;
        this.decreaseAnimationDone = false;
        this.focused = false;
        this.isMobile = false;
        this.isSpinnerMobile = false;
        this.defaultErrors = {};
        /**
         * Label icon with a tooltip or popover
         */
        this.tooltipConfig = null;
        this.label = '';
        this.allowScientific = true;
        this.step = 1;
        this.width = '100%';
        this.preventInnerValidation = false;
        // eslint-disable-next-line @angular-eslint/no-input-rename
        this.ariaDescribedBy = null;
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.focus = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.blur = new EventEmitter();
        this.valueChanged = new EventEmitter();
        this._patterns = {
            scientific: /^-?(\d+|\d+\.\d+|\.\d+)([eE][-+]?\d+)?$/g,
            normal: /^-?(\d+|\d+\.\d+|\.\d+)?$/g
        };
        this._numberPatters = /^[+-]?(\d+|\.\d+|\d+\.\d+|\d+\.)(e[+-]?\d+)?$/;
        this._minWidthToMobile = 200;
        this._isValidNumber = true;
        this.propagateChange = () => {
            return;
        };
        this._onTouchedCallback = () => {
            return;
        };
        this.id = `c-${AdaptCounterComponent.id}`;
        AdaptCounterComponent.id++;
        this.setDefaultTexts(ts.getCurrentLanguage());
        this.currentLocale = ts.getCurrentLocale();
    }
    set max(value) {
        this._max = this._isSafeNumber(value) ? parseFloat(value) : bigNumber(value);
    }
    get max() {
        return !!this._max || this._max === 0 ? this._max : Number.MAX_SAFE_INTEGER;
    }
    set min(value) {
        this._min = this._isSafeNumber(value) ? parseFloat(value) : bigNumber(value);
    }
    get min() {
        return !!this._min || this._min === 0 ? this._min : Number.MIN_SAFE_INTEGER;
    }
    set allowIntegerOnly(value) {
        this._integerOnly = this.allowScientific ? false : value;
    }
    get allowIntegerOnly() {
        return this._integerOnly;
    }
    get hostClasses() {
        return [
            this.mainCls,
            'adapt-counter',
            this.isErrorExist ? 'is-error' : '',
            this.suppressIcons ? 'prevent-success-icon' : ''
        ].join(' ');
    }
    get isErrorExist() {
        return Boolean(this.errors.length);
    }
    get customClass() {
        let customCls = '';
        switch (this.size) {
            case 'small':
                customCls = 'form-control-sm';
                break;
            case 'large':
                customCls = 'form-control-lg';
                break;
        }
        return customCls;
    }
    get inputSize() {
        return (this._value && this._value.toString().length) || 1;
    }
    get value() {
        return this._value;
    }
    get _isTruncatedPrefix() {
        if (isUndefined(this.prefixEl)) {
            return false;
        }
        const { scrollWidth, offsetWidth } = this.prefixEl.nativeElement;
        return scrollWidth > offsetWidth;
    }
    get _isTruncatedSuffix() {
        if (isUndefined(this.suffixEl)) {
            return false;
        }
        const { scrollWidth, offsetWidth } = this.suffixEl.nativeElement;
        return scrollWidth > offsetWidth;
    }
    ngOnInit() {
        super.ngOnInit();
        this.mainCls = this.mainCls + ' form-group';
        this.isMobile = this._deviceDetection.isMobile();
        super.initControl();
        this.pattern = this.allowScientific ? this._patterns.scientific : this._patterns.normal;
        if (this.step % 1 !== 0) {
            // If step is not an integer then extract the length of the decimal part
            this.precision = this.step.toString().split(/[.]/)[1].length;
        }
        for (const prop in this._customErrorTexts) {
            if (prop) {
                this.overrideBuildInValidatorMessage(prop, () => this._customErrorTexts[prop]);
            }
        }
        if (this.context.tooltipIconCls && !this.context.popoverIcon) {
            this.tooltipConfig = {
                iconName: this.context.tooltipIconCls,
                content: this.context.tooltipText,
                placement: 'top',
                popoverMode: false
            };
        }
        else if (this.context.popoverIcon) {
            this.tooltipConfig = {
                iconName: this.context.popoverIcon,
                content: this.popoverContent,
                placement: this.context.popoverPlacement,
                popoverMode: true,
                popoverTriggers: this.context.popoverTriggers
            };
        }
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this._renderer.setStyle(this.containerEl.nativeElement, 'width', this.width);
    }
    setDefaultTexts(translation) {
        this.defaultErrors.decrease = translation['adapt.counter.decrease'];
        this.defaultErrors.increase = translation['adapt.counter.increase'];
        this.defaultErrors.range = translation['adapt.counter.error.range'];
        this.defaultErrors.rangeName = translation['adapt.counter.error.rangeName'];
        this.defaultErrors.invalid = translation['adapt.counter.error.invalid'];
        this.defaultErrors.invalidName = translation['adapt.counter.error.invalidName'];
    }
    writeValue(value) {
        this._setValue(value, false);
        this.counterValue = this._value && this.pattern.test(value) ? value : this._value;
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    setDisabledState(isDisabled) {
        this._disabled = isDisabled;
        this._closeMobileSpinners();
    }
    checkForMobileSpinners() {
        if (this.isMobile && !this.disabled) {
            this._openMobileSpinners();
        }
    }
    increaseCounter(animationNeeded) {
        if (this.isMobile) {
            return;
        }
        this._onTouchedCallback();
        this.increase();
        if (animationNeeded) {
            const timer = setTimeout(() => {
                this.animateArrowUp = false;
                clearTimeout(timer);
            }, parseFloat(ANIMATION_DURATION.fast) * 1000);
            this.animateArrowUp = true;
        }
    }
    decreaseCounter(animationNeeded) {
        if (this.isMobile) {
            return;
        }
        this._onTouchedCallback();
        this.decrease();
        if (animationNeeded) {
            const timer = setTimeout(() => {
                this.animateArrowDown = false;
                clearTimeout(timer);
            }, parseFloat(ANIMATION_DURATION.fast) * 1000);
            this.animateArrowDown = true;
        }
    }
    increaseMobile() {
        this._onTouchedCallback();
        this.increase();
    }
    decreaseMobile() {
        this._onTouchedCallback();
        this.decrease();
    }
    increase() {
        const newValue = this.calculateNewValue(CounterOperations.INCREASE);
        if (newValue === null) { // implicit check
            if (this.min < 0 && this.max > 0) {
                this._setValue(0, true);
            }
            else {
                this._setValue(this.min, true);
            }
        }
        else if (newValue < this.min) {
            this._setValue(this.min, true);
        }
        else {
            this._setValue(newValue > this.max ? this.max : newValue, true);
        }
        this.valueChanged.emit(this.value);
        this.counterValue = this.value;
    }
    decrease() {
        const newValue = this.calculateNewValue(CounterOperations.DECREASE);
        if (newValue === null) { // implicit check
            if (this.min < 0 && this.max > 0) {
                this._setValue(0, true);
            }
            else {
                this._setValue(this.max, true);
            }
        }
        else if (newValue > this.max) {
            this._setValue(this.max, true);
        }
        else {
            this._setValue(newValue < this.min ? this.min : newValue, true);
        }
        this.valueChanged.emit(this.value);
        this.counterValue = this.value;
    }
    calculateNewValue(operation) {
        const counterNumValue = parseFloat(this.counterValue);
        if (isNaN(counterNumValue)) {
            return null;
        }
        const valuePrecision = !this.precision && counterNumValue % 1 !== 0
            ? counterNumValue.toString().split(/[.]/)[1].length
            : this.precision;
        switch (operation) {
            case CounterOperations.INCREASE:
                return this._toFixed(counterNumValue + this.step, valuePrecision);
            case CounterOperations.DECREASE:
                return this._toFixed(counterNumValue - this.step, valuePrecision);
        }
    }
    increaseAllowed() {
        if (isNaN(this.value)) {
            return true;
        }
        return isNil(this.value) || this.value < this.max;
    }
    decreaseAllowed() {
        if (isNaN(this.value)) {
            return true;
        }
        return isNil(this.value) || this.value > this.min;
    }
    validate(c) {
        if (this.preventInnerValidation) {
            return;
        }
        if (!isNil(c.value)) {
            if (!this._isValidNumber) {
                return {
                    counterError: this._customErrorTexts.invalidNumberError || {
                        name: this.defaultErrors.invalidName,
                        text: this.defaultErrors.invalid,
                    }
                };
            }
            const hasRangeError = bigNumber.isBigNumber(c.value) ?
                (bigNumber(c.value).lt(this.min) || bigNumber(c.value).gt(this.max)) :
                (c.value < this.min || c.value > this.max) || isNaN(c.value);
            if (hasRangeError) {
                return {
                    counterError: this._customErrorTexts.rangeError || {
                        name: this.defaultErrors.rangeName,
                        text: formatString(this.defaultErrors.range, this.min.toLocaleString(this.currentLocale), this.max.toLocaleString(this.currentLocale))
                    }
                };
            }
        }
        return null;
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    onInput(input) {
        this._setValue(input.value, true);
        this.counterValue = input.value;
        this.valueChanged.emit(!!this.value || this.value === 0 ? this.value : null);
    }
    onKeyPress(e) {
        if (this.disabled || this.readonly) {
            return;
        }
        const regExp = new RegExp(this.allowScientific
            ? /^[-+]?\.?[0-9]?[eE]?$/g
            : this.allowIntegerOnly ? /^[-+]?\d?$/g : /^[-+]?\.?[0-9]?$/g);
        const isValidChar = !!regExp.test(e.key);
        if (!isValidChar) {
            e.preventDefault();
            return;
        }
    }
    onFocus() {
        this.focused = true;
        this.focus.emit();
    }
    onBlur() {
        this.focused = false;
        this.blur.emit();
        this._onTouchedCallback();
        this.propagateChange();
    }
    onKeyDown(e) {
        if (this.disabled || this.readonly) {
            return;
        }
        const keyCode = getEventKeyCode(e);
        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {
            e.preventDefault();
            switch (keyCode) {
                case UP_ARROW: {
                    if (this.increaseAllowed()) {
                        this.increaseCounter(true);
                    }
                    break;
                }
                case DOWN_ARROW: {
                    if (this.decreaseAllowed()) {
                        this.decreaseCounter(true);
                    }
                    break;
                }
            }
        }
    }
    toggleTooltip(tooltip, el) {
        tooltip.delay = 0;
        if (!tooltip.isOpen() && el.offsetWidth >= el.scrollWidth) {
            return;
        }
        if (tooltip.isOpen()) {
            tooltip.close();
        }
        else {
            tooltip.open();
        }
    }
    onAnimationIncreaseStart(event) {
        if (event.phaseName === 'start') {
            this.increaseAnimationDone = false;
        }
    }
    onAnimationIncreaseDone(event) {
        if (event.phaseName === 'done') {
            this.increaseAnimationDone = true;
        }
    }
    onAnimationDecreaseStart(event) {
        if (event.phaseName === 'start') {
            this.decreaseAnimationDone = false;
        }
    }
    onAnimationDecreaseDone(event) {
        if (event.phaseName === 'done') {
            this.decreaseAnimationDone = true;
        }
    }
    _setValue(v, propagateChange) {
        if (v === null || v === undefined || v.toString().length === 0) {
            this._value = null;
        }
        else {
            this._isValidNumber = !!this._numberPatters.test(v.toString());
            this._value = this._isSafeNumber(v) ? parseFloat(v) : bigNumber(v);
        }
        if (propagateChange) {
            this.propagateChange();
        }
    }
    /**
     * Opens the mobile spinners
     */
    _openMobileSpinners() {
        if (!this.isSpinnerMobile) {
            this.isSpinnerMobile = true;
            // Set timeout to skip 'open' click
            setTimeout(() => {
                this._removeDocumentClickListener = this._renderer.listen('document', 'click', (event) => {
                    if (!this.mobileActionsContainer.nativeElement.contains(event.target)) {
                        this._closeMobileSpinners();
                    }
                });
            }, 0);
        }
    }
    /**
     * Closes the mobile spinners
     */
    _closeMobileSpinners() {
        if (this.isSpinnerMobile) {
            this.isSpinnerMobile = false;
            this._removeDocumentClickListener();
        }
    }
    _isSafeNumber(value) {
        // for NaN return true
        if (isNaN(value)) {
            return true;
        }
        // check if passed argument is decimal
        const isDecimal = value && value.toString().indexOf('.') > 0;
        const quotient = isDecimal ? value.toString().split(/[.]/)[0] : value.toString();
        if (Number.isSafeInteger(Number(quotient))) {
            if (!isDecimal) {
                return true;
            }
            return !(Number(quotient) === Number.MAX_SAFE_INTEGER || Number(quotient) === Number.MIN_SAFE_INTEGER);
        }
        return false;
    }
    _toFixed(value, precision = 0) {
        const power = Math.pow(10, precision);
        return Math.round(value * power) / power;
    }
}
AdaptCounterComponent.id = 0;
AdaptCounterComponent.ɵfac = function AdaptCounterComponent_Factory(t) { return new (t || AdaptCounterComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i1.AdaptDeviceDetectionService), i0.ɵɵdirectiveInject(i1.AdaptTranslateService), i0.ɵɵdirectiveInject(i2.AdaptRadarService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptCounterComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptCounterComponent, selectors: [["adapt-counter"]], viewQuery: function AdaptCounterComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 7);
        i0.ɵɵviewQuery(_c2, 5);
        i0.ɵɵviewQuery(_c3, 5);
        i0.ɵɵviewQuery(_c4, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.containerEl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputEl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.prefixEl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.suffixEl = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.mobileActionsContainer = _t.first);
    } }, hostVars: 2, hostBindings: function AdaptCounterComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵclassMap(ctx.hostClasses);
    } }, inputs: { id: "id", testID: "testID", name: "name", prefix: "prefix", suffix: "suffix", label: "label", max: "max", min: "min", allowScientific: "allowScientific", step: "step", width: "width", formControl: "formControl", size: "size", preventInnerValidation: "preventInnerValidation", allowIntegerOnly: "allowIntegerOnly", ariaDescribedBy: ["aria-describedby", "ariaDescribedBy"] }, outputs: { focus: "focus", blur: "blur", valueChanged: "valueChanged" }, features: [i0.ɵɵProvidersFeature([
            createFormControlValueAccessor(AdaptCounterComponent),
            createFormControlValidator(AdaptCounterComponent)
        ]), i0.ɵɵInheritDefinitionFeature], decls: 34, vars: 23, consts: [[1, "adapt-counter__wrp", 3, "ngClass"], ["container", ""], [1, "adapt-counter__label--wrp"], [3, "for", "label", "requiredLabel", "showRequiredLabel", "tooltip", 4, "ngIf"], [1, "adapt-counter__content"], ["class", "adapt-counter-adding adapt-counter-prefix", "manual", "", "placement", "auto", 3, "adaptRadarDisableEventSending", "adaptTooltip", "mouseenter", "mouseout", 4, "ngIf"], [1, "adapt-counter-container"], [1, "adapt-counter-input-wrapper"], [1, "adapt-counter-input", "form-control", "rx-form-control", 3, "id", "ngClass", "value", "disabled", "readOnly", "input", "keypress", "keydown", "focus", "blur"], ["input", ""], ["class", "adapt-counter-icon", 4, "ngIf"], ["class", "adapt-counter-spinners", 3, "focused", "click", 4, "ngIf"], ["class", "adapt-counter-adding adapt-counter-suffix", "manual", "", "placement", "auto", 3, "adaptRadarDisableEventSending", "adaptTooltip", "mouseenter", "mouseout", 4, "ngIf"], ["class", "adapt-counter-errors-list has-danger", 4, "ngIf"], [3, "for", "label", "requiredLabel", "showRequiredLabel", "tooltip"], ["manual", "", "placement", "auto", 1, "adapt-counter-adding", "adapt-counter-prefix", 3, "adaptRadarDisableEventSending", "adaptTooltip", "mouseenter", "mouseout"], ["prefixTooltip", "tooltip"], [1, "adapt-counter-adding-text"], ["prefixEl", ""], [1, "adapt-counter-icon"], [1, "adapt-counter-icon-error"], [1, "adapt-counter-spinners", 3, "click"], ["type", "button", "role", "button", 1, "adapt-counter-spinner", "adapt-counter-spinner__increase", 3, "disabled", "click"], ["type", "button", "role", "button", 1, "adapt-counter-spinner", "adapt-counter-spinner__decrease", 3, "disabled", "click"], [1, "adapt-counter-spinners--mobile"], ["mobileActionsContainer", ""], [1, "btn-float-block"], ["class", "btn btn-primary btn-circle d-icon-triangle_up adapt-counter-spinner__increase", "type", "button", 3, "pointerEvents", "disabled", "click", 4, "ngIf"], ["class", "btn btn-primary btn-circle d-icon-triangle_down adapt-counter-spinner__decrease", "type", "button", 3, "pointerEvents", "disabled", "click", 4, "ngIf"], ["type", "button", 1, "btn", "btn-primary", "btn-circle", "d-icon-triangle_up", "adapt-counter-spinner__increase", 3, "disabled", "click"], ["type", "button", 1, "btn", "btn-primary", "btn-circle", "d-icon-triangle_down", "adapt-counter-spinner__decrease", 3, "disabled", "click"], ["manual", "", "placement", "auto", 1, "adapt-counter-adding", "adapt-counter-suffix", 3, "adaptRadarDisableEventSending", "adaptTooltip", "mouseenter", "mouseout"], ["suffixTooltip", "tooltip"], ["suffixEl", ""], [1, "adapt-counter-errors-list", "has-danger"], ["class", "form-control-feedback m-0 pt-1 pb-2", 4, "ngFor", "ngForOf"], [1, "form-control-feedback", "m-0", "pt-1", "pb-2"]], template: function AdaptCounterComponent_Template(rf, ctx) { if (rf & 1) {
        const _r35 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 0, 1);
        i0.ɵɵtext(2, "\n  ");
        i0.ɵɵtext(3, "\n  ");
        i0.ɵɵelementStart(4, "div", 2);
        i0.ɵɵtext(5, "\n    ");
        i0.ɵɵtemplate(6, AdaptCounterComponent_adapt_rx_control_label_6_Template, 1, 5, "adapt-rx-control-label", 3);
        i0.ɵɵtext(7, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(8, "\n  ");
        i0.ɵɵtext(9, "\n\n  ");
        i0.ɵɵelementStart(10, "div", 4);
        i0.ɵɵtext(11, "\n    ");
        i0.ɵɵtemplate(12, AdaptCounterComponent_div_12_Template, 7, 3, "div", 5);
        i0.ɵɵtext(13, "\n\n    ");
        i0.ɵɵelementStart(14, "div", 6);
        i0.ɵɵtext(15, "\n      ");
        i0.ɵɵelementStart(16, "div", 7);
        i0.ɵɵtext(17, "\n        ");
        i0.ɵɵelementStart(18, "input", 8, 9);
        i0.ɵɵlistener("input", function AdaptCounterComponent_Template_input_input_18_listener() { i0.ɵɵrestoreView(_r35); const _r3 = i0.ɵɵreference(19); return ctx.onInput(_r3); })("keypress", function AdaptCounterComponent_Template_input_keypress_18_listener($event) { return ctx.onKeyPress($event); })("keydown", function AdaptCounterComponent_Template_input_keydown_18_listener($event) { return ctx.onKeyDown($event); })("focus", function AdaptCounterComponent_Template_input_focus_18_listener() { return ctx.onFocus(); })("blur", function AdaptCounterComponent_Template_input_blur_18_listener() { return ctx.onBlur(); });
        i0.ɵɵelementEnd();
        i0.ɵɵtext(20, "\n        ");
        i0.ɵɵtemplate(21, AdaptCounterComponent_div_21_Template, 4, 1, "div", 10);
        i0.ɵɵtext(22, "\n      ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(23, "\n      ");
        i0.ɵɵtemplate(24, AdaptCounterComponent_div_24_Template, 17, 12, "div", 11);
        i0.ɵɵtext(25, "\n    ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(26, "\n\n    ");
        i0.ɵɵtemplate(27, AdaptCounterComponent_div_27_Template, 7, 3, "div", 12);
        i0.ɵɵtext(28, "\n  ");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(29, "\n  ");
        i0.ɵɵtext(30, "\n  ");
        i0.ɵɵtemplate(31, AdaptCounterComponent_div_31_Template, 4, 2, "div", 13);
        i0.ɵɵtext(32, "\n");
        i0.ɵɵelementEnd();
        i0.ɵɵtext(33, "\n");
    } if (rf & 2) {
        i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(21, _c5, ctx.context.disabled));
        i0.ɵɵadvance(6);
        i0.ɵɵproperty("ngIf", !ctx.context.hideLabel);
        i0.ɵɵadvance(4);
        i0.ɵɵclassProp("adapt-counter__content--compact", ctx.isCompact);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.prefix);
        i0.ɵɵadvance(4);
        i0.ɵɵclassProp("focused", ctx.focused);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("id", ctx.id)("ngClass", ctx.customClass)("value", ctx.counterValue)("disabled", ctx.context.disabled)("readOnly", ctx.readonly);
        i0.ɵɵattribute("data-testid", ctx.testID)("placeholder", ctx.context.placeholder)("aria-describedby", ctx.ariaDescribedBy)("aria-readonly", ctx.readonly)("size", ctx.inputSize);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.isErrorExist);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", !ctx.readonly);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.suffix);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", ctx.isErrorExist);
    } }, directives: [i3.NgClass, i3.NgIf, i1.AdaptDragonInputHandlerDirective, i1.AdaptRxControlLabelComponent, i1.AdaptTooltipDirective, i3.NgForOf], encapsulation: 2, data: { animation: [
            trigger('highlightMobileIncrease', [
                transition(':enter', [
                    style({ bottom: 0, opacity: 0 }),
                    animate(ANIMATION_DURATION.fast + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ bottom: 'calc(100% + 10px)', opacity: 1 }))
                ]),
                transition(':leave', [
                    style({ bottom: 'calc(100% + 10px)', opacity: 1 }),
                    animate('.12s', style({ bottom: 0, opacity: 0 }))
                ])
            ]),
            trigger('highlightMobileDecrease', [
                transition(':enter', [
                    style({ top: 0, opacity: 0 }),
                    animate(ANIMATION_DURATION.fast + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ top: 'calc(100% + 10px)', opacity: 1 }))
                ]),
                transition(':leave', [
                    style({ top: 'calc(100% + 10px)', opacity: 1 }),
                    animate('.12s', style({ top: 0, opacity: 0 }))
                ])
            ]),
            trigger('validationFeedbackAnimation', [
                transition(':enter', [
                    useAnimation(ANIMATION_NAME.fadeIn)
                ]),
                transition(':leave', [
                    useAnimation(ANIMATION_NAME.fadeOut)
                ])
            ]),
            trigger('errorToggleAnimation', [
                transition(':enter', [
                    style({
                        opacity: 0
                    }),
                    animate(250)
                ]),
                transition(':leave', [
                    style({
                        opacity: 1
                    }),
                    // animate(150)
                ])
            ]),
            trigger('highlightArrow', [
                transition('0 => 1', animate(ANIMATION_DURATION.medium, keyframes([
                    style({ color: '*', offset: 0 }),
                    style({ color: '#00867E', offset: 1 })
                ])))
            ])
        ] } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptCounterComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-counter',
                templateUrl: './counter.component.html',
                providers: [
                    createFormControlValueAccessor(AdaptCounterComponent),
                    createFormControlValidator(AdaptCounterComponent)
                ],
                animations: [
                    trigger('highlightMobileIncrease', [
                        transition(':enter', [
                            style({ bottom: 0, opacity: 0 }),
                            animate(ANIMATION_DURATION.fast + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ bottom: 'calc(100% + 10px)', opacity: 1 }))
                        ]),
                        transition(':leave', [
                            style({ bottom: 'calc(100% + 10px)', opacity: 1 }),
                            animate('.12s', style({ bottom: 0, opacity: 0 }))
                        ])
                    ]),
                    trigger('highlightMobileDecrease', [
                        transition(':enter', [
                            style({ top: 0, opacity: 0 }),
                            animate(ANIMATION_DURATION.fast + ' ' + ANIMATION_TIMING_FUNCTION.base.transitionInOut, style({ top: 'calc(100% + 10px)', opacity: 1 }))
                        ]),
                        transition(':leave', [
                            style({ top: 'calc(100% + 10px)', opacity: 1 }),
                            animate('.12s', style({ top: 0, opacity: 0 }))
                        ])
                    ]),
                    trigger('validationFeedbackAnimation', [
                        transition(':enter', [
                            useAnimation(ANIMATION_NAME.fadeIn)
                        ]),
                        transition(':leave', [
                            useAnimation(ANIMATION_NAME.fadeOut)
                        ])
                    ]),
                    trigger('errorToggleAnimation', [
                        transition(':enter', [
                            style({
                                opacity: 0
                            }),
                            animate(250)
                        ]),
                        transition(':leave', [
                            style({
                                opacity: 1
                            }),
                            // animate(150)
                        ])
                    ]),
                    trigger('highlightArrow', [
                        transition('0 => 1', animate(ANIMATION_DURATION.medium, keyframes([
                            style({ color: '*', offset: 0 }),
                            style({ color: '#00867E', offset: 1 })
                        ])))
                    ])
                ]
            }]
    }], function () { return [{ type: i0.Renderer2 }, { type: i0.Injector }, { type: i1.AdaptDeviceDetectionService }, { type: i1.AdaptTranslateService }, { type: i2.AdaptRadarService }, { type: i0.ElementRef }]; }, { id: [{
            type: Input
        }], testID: [{
            type: Input
        }], name: [{
            type: Input
        }], prefix: [{
            type: Input
        }], suffix: [{
            type: Input
        }], label: [{
            type: Input
        }], max: [{
            type: Input
        }], min: [{
            type: Input
        }], allowScientific: [{
            type: Input
        }], step: [{
            type: Input
        }], width: [{
            type: Input
        }], formControl: [{
            type: Input
        }], size: [{
            type: Input
        }], preventInnerValidation: [{
            type: Input
        }], allowIntegerOnly: [{
            type: Input
        }], ariaDescribedBy: [{
            type: Input,
            args: ['aria-describedby']
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], valueChanged: [{
            type: Output
        }], containerEl: [{
            type: ViewChild,
            args: ['container', { static: true }]
        }], inputEl: [{
            type: ViewChild,
            args: ['input', { static: true }]
        }], prefixEl: [{
            type: ViewChild,
            args: ['prefixEl', { static: false }]
        }], suffixEl: [{
            type: ViewChild,
            args: ['suffixEl', { static: false }]
        }], mobileActionsContainer: [{
            type: ViewChild,
            args: ['mobileActionsContainer', { static: false }]
        }], hostClasses: [{
            type: HostBinding,
            args: ['class']
        }] }); })();
//# sourceMappingURL=counter.component.js.map