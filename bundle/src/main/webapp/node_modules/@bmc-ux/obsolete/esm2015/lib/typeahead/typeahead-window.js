/* eslint-disable @typescript-eslint/no-explicit-any */
import { Component, ElementRef, EventEmitter, HostBinding, Input, NgZone, Output, QueryList, TemplateRef, ViewChildren } from '@angular/core';
import { take } from 'rxjs/operators';
import { toString, scrollToActive } from '@bmc-ux/adapt-angular';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@bmc-ux/adapt-angular";
import * as i3 from "@angular/cdk/scrolling";
const _c0 = ["optionButton"];
function AdaptTypeaheadWindowComponent_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵtext(0, "\n      ");
    i0.ɵɵelement(1, "adapt-highlight", 2);
    i0.ɵɵtext(2, "\n    ");
} if (rf & 2) {
    const result_r4 = ctx.result;
    const term_r5 = ctx.term;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵproperty("result", ctx_r1.formatter(result_r4))("term", term_r5);
} }
function AdaptTypeaheadWindowComponent_ng_container_4_button_4_ng_template_3_Template(rf, ctx) { }
const _c1 = function (a0, a1) { return { result: a0, term: a1 }; };
function AdaptTypeaheadWindowComponent_ng_container_4_button_4_Template(rf, ctx) { if (rf & 1) {
    const _r12 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 5, 6);
    i0.ɵɵlistener("mouseenter", function AdaptTypeaheadWindowComponent_ng_container_4_button_4_Template_button_mouseenter_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r12); const idx_r8 = restoredCtx.index; const ctx_r11 = i0.ɵɵnextContext(2); return ctx_r11.markActive(idx_r8); })("click", function AdaptTypeaheadWindowComponent_ng_container_4_button_4_Template_button_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r12); const result_r7 = restoredCtx.$implicit; const ctx_r13 = i0.ɵɵnextContext(2); return ctx_r13.select(result_r7); });
    i0.ɵɵtext(2, "\n          ");
    i0.ɵɵtemplate(3, AdaptTypeaheadWindowComponent_ng_container_4_button_4_ng_template_3_Template, 0, 0, "ng-template", 7);
    i0.ɵɵtext(4, "\n        ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const result_r7 = ctx.$implicit;
    const idx_r8 = ctx.index;
    const ctx_r6 = i0.ɵɵnextContext(2);
    const _r0 = i0.ɵɵreference(2);
    i0.ɵɵclassProp("active", idx_r8 === ctx_r6.activeIdx);
    i0.ɵɵproperty("id", ctx_r6.id + "-" + idx_r8);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r6.resultTemplate || _r0)("ngTemplateOutletContext", i0.ɵɵpureFunction2(5, _c1, result_r7, ctx_r6.term));
} }
const _c2 = function (a0) { return { "height": a0 }; };
function AdaptTypeaheadWindowComponent_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "cdk-virtual-scroll-viewport", 3);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵtemplate(4, AdaptTypeaheadWindowComponent_ng_container_4_button_4_Template, 5, 8, "button", 4);
    i0.ɵɵtext(5, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(6, "\n    ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("itemSize", ctx_r2.virtualScrollItemSize)("ngStyle", i0.ɵɵpureFunction1(4, _c2, ctx_r2.virtualScrollDropdownHeight));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("cdkVirtualForOf", ctx_r2.results)("cdkVirtualForTrackBy", ctx_r2.trackByForResults);
} }
function AdaptTypeaheadWindowComponent_ng_container_6_button_2_ng_template_3_Template(rf, ctx) { }
function AdaptTypeaheadWindowComponent_ng_container_6_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r20 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 5, 6);
    i0.ɵɵlistener("mouseenter", function AdaptTypeaheadWindowComponent_ng_container_6_button_2_Template_button_mouseenter_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r20); const idx_r16 = restoredCtx.index; const ctx_r19 = i0.ɵɵnextContext(2); return ctx_r19.markActive(idx_r16); })("click", function AdaptTypeaheadWindowComponent_ng_container_6_button_2_Template_button_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r20); const result_r15 = restoredCtx.$implicit; const ctx_r21 = i0.ɵɵnextContext(2); return ctx_r21.select(result_r15); });
    i0.ɵɵtext(2, "\n        ");
    i0.ɵɵtemplate(3, AdaptTypeaheadWindowComponent_ng_container_6_button_2_ng_template_3_Template, 0, 0, "ng-template", 7);
    i0.ɵɵtext(4, "\n      ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const result_r15 = ctx.$implicit;
    const idx_r16 = ctx.index;
    const ctx_r14 = i0.ɵɵnextContext(2);
    const _r0 = i0.ɵɵreference(2);
    i0.ɵɵclassProp("active", idx_r16 === ctx_r14.activeIdx);
    i0.ɵɵproperty("id", ctx_r14.id + "-" + idx_r16);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r14.resultTemplate || _r0)("ngTemplateOutletContext", i0.ɵɵpureFunction2(5, _c1, result_r15, ctx_r14.term));
} }
function AdaptTypeaheadWindowComponent_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵtemplate(2, AdaptTypeaheadWindowComponent_ng_container_6_button_2_Template, 5, 8, "button", 8);
    i0.ɵɵtext(3, "\n    ");
    i0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r3 = i0.ɵɵnextContext();
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngForOf", ctx_r3.results)("ngForTrackBy", ctx_r3.trackByForResults);
} }
export class AdaptTypeaheadWindowComponent {
    constructor(_elementRef, _ngZone) {
        this._elementRef = _elementRef;
        this._ngZone = _ngZone;
        this.activeIdx = 0;
        /**
         * Flag indicating if the first row should be active initially
         */
        this.focusFirst = true;
        /**
         * A function used to format a given result before display. This function should return a formatted string without any
         * HTML markup
         */
        this.formatter = toString;
        /**
         * The flag informing that the popup is appended to document.body
         */
        this.appendedToBody = false;
        /**
         * Event raised when user selects a particular result row
         */
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.selectEvent = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-rename
        this.activeChangeEvent = new EventEmitter();
    }
    get className() {
        return `dropdown-menu show ${this.hostClass || ''} ${this.virtualScroll ? 'dropdown-menu_virtual-scroll' : ''}`;
    }
    get dropdownWidth() {
        return this.virtualScroll ? this.virtualScrollDropdownWidth : 'auto';
    }
    get popupZIndex() {
        return this.appendedToBody ? '1060' : null;
    }
    hasActive() {
        return this.activeIdx > -1 && this.activeIdx < this.results.length;
    }
    getActive() {
        return this.results[this.activeIdx];
    }
    markActive(activeIdx) {
        this.activeIdx = activeIdx;
        this._activeChanged();
    }
    next() {
        if (this.activeIdx !== this.results.length - 1) {
            this.activeIdx++;
        }
        this._activeChanged();
    }
    prev() {
        if (this.activeIdx < 0) {
            this.activeIdx = 0;
        }
        else if (this.activeIdx > 0) {
            this.activeIdx--;
        }
        this._activeChanged();
    }
    resetActive() {
        this.activeIdx = this.focusFirst ? 0 : -1;
        this._activeChanged();
    }
    select(item) {
        this.selectEvent.emit(item);
    }
    ngOnInit() {
        this.resetActive();
    }
    trackByForResults(index) {
        return index;
    }
    _activeChanged() {
        this.activeChangeEvent.emit(this.activeIdx >= 0 ? this.id + '-' + this.activeIdx : undefined);
        this.scrollToActiveItem();
    }
    scrollToActiveItem() {
        this._ngZone.onStable.pipe(take(1)).subscribe(() => {
            if (!this.optionButtons) {
                return;
            }
            const activeButtonElRef = this.optionButtons.find(el => el.nativeElement.classList.contains('active'));
            if (activeButtonElRef) {
                const buttonEl = activeButtonElRef.nativeElement;
                scrollToActive(buttonEl);
            }
        });
    }
}
AdaptTypeaheadWindowComponent.ɵfac = function AdaptTypeaheadWindowComponent_Factory(t) { return new (t || AdaptTypeaheadWindowComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone)); };
AdaptTypeaheadWindowComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptTypeaheadWindowComponent, selectors: [["ngb-typeahead-window"], ["adapt-typeahead-window"]], viewQuery: function AdaptTypeaheadWindowComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionButtons = _t);
    } }, hostAttrs: ["role", "listbox"], hostVars: 7, hostBindings: function AdaptTypeaheadWindowComponent_HostBindings(rf, ctx) { if (rf & 2) {
        i0.ɵɵhostProperty("id", ctx.id);
        i0.ɵɵclassMap(ctx.className);
        i0.ɵɵstyleProp("width", ctx.dropdownWidth)("z-index", ctx.popupZIndex);
    } }, inputs: { id: "id", focusFirst: "focusFirst", results: "results", term: "term", formatter: "formatter", resultTemplate: "resultTemplate", appendedToBody: "appendedToBody", hostClass: "hostClass", virtualScroll: "virtualScroll", virtualScrollItemSize: "virtualScrollItemSize", virtualScrollDropdownHeight: "virtualScrollDropdownHeight", virtualScrollDropdownWidth: "virtualScrollDropdownWidth" }, outputs: { selectEvent: "select", activeChangeEvent: "activeChange" }, exportAs: ["ngbTypeaheadWindow"], decls: 8, vars: 2, consts: [["rt", ""], [4, "ngIf"], [3, "result", "term"], [3, "itemSize", "ngStyle"], ["type", "button", "class", "dropdown-item", "role", "option", 3, "id", "active", "mouseenter", "click", 4, "cdkVirtualFor", "cdkVirtualForOf", "cdkVirtualForTrackBy"], ["type", "button", "role", "option", 1, "dropdown-item", 3, "id", "mouseenter", "click"], ["optionButton", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["type", "button", "class", "dropdown-item", "role", "option", 3, "id", "active", "mouseenter", "click", 4, "ngFor", "ngForOf", "ngForTrackBy"]], template: function AdaptTypeaheadWindowComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtext(0, "\n    ");
        i0.ɵɵtemplate(1, AdaptTypeaheadWindowComponent_ng_template_1_Template, 3, 2, "ng-template", null, 0, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵtext(3, "\n    ");
        i0.ɵɵtemplate(4, AdaptTypeaheadWindowComponent_ng_container_4_Template, 7, 6, "ng-container", 1);
        i0.ɵɵtext(5, "\n    ");
        i0.ɵɵtemplate(6, AdaptTypeaheadWindowComponent_ng_container_6_Template, 4, 2, "ng-container", 1);
        i0.ɵɵtext(7, "\n  ");
    } if (rf & 2) {
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", ctx.virtualScroll);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", !ctx.virtualScroll);
    } }, directives: [i1.NgIf, i2.AdaptHighlightDirective, i3.CdkVirtualScrollViewport, i3.CdkFixedSizeVirtualScroll, i1.NgStyle, i3.CdkVirtualForOf, i1.NgTemplateOutlet, i1.NgForOf], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptTypeaheadWindowComponent, [{
        type: Component,
        args: [{
                selector: 'ngb-typeahead-window, adapt-typeahead-window',
                exportAs: 'ngbTypeaheadWindow',
                // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                host: { 'role': 'listbox', '[id]': 'id' },
                template: `
    <ng-template #rt let-result="result" let-term="term">
      <adapt-highlight [result]="formatter(result)" [term]="term"></adapt-highlight>
    </ng-template>
    <ng-container *ngIf="virtualScroll">
      <cdk-virtual-scroll-viewport
        [itemSize]="virtualScrollItemSize"
        [ngStyle]="{'height': virtualScrollDropdownHeight}">
        <button #optionButton
                *cdkVirtualFor="let result of results; let idx = index; trackBy: trackByForResults"
                type="button"
                class="dropdown-item"
                role="option"
                [id]="id + '-' + idx"
                [class.active]="idx === activeIdx"
                (mouseenter)="markActive(idx)"
                (click)="select(result)">
          <ng-template [ngTemplateOutlet]="resultTemplate || rt"
                       [ngTemplateOutletContext]="{result: result, term: term}"></ng-template>
        </button>
      </cdk-virtual-scroll-viewport>
    </ng-container>
    <ng-container *ngIf="!virtualScroll">
      <button #optionButton
              *ngFor="let result of results; let idx = index; trackBy: trackByForResults"
              type="button"
              class="dropdown-item"
              role="option"
              [id]="id + '-' + idx"
              [class.active]="idx === activeIdx"
              (mouseenter)="markActive(idx)"
              (click)="select(result)">
        <ng-template [ngTemplateOutlet]="resultTemplate || rt"
                     [ngTemplateOutletContext]="{result: result, term: term}"></ng-template>
      </button>
    </ng-container>
  `
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, { id: [{
            type: Input
        }], focusFirst: [{
            type: Input
        }], results: [{
            type: Input
        }], term: [{
            type: Input
        }], formatter: [{
            type: Input
        }], resultTemplate: [{
            type: Input
        }], appendedToBody: [{
            type: Input
        }], hostClass: [{
            type: Input
        }], virtualScroll: [{
            type: Input
        }], virtualScrollItemSize: [{
            type: Input
        }], virtualScrollDropdownHeight: [{
            type: Input
        }], virtualScrollDropdownWidth: [{
            type: Input
        }], selectEvent: [{
            type: Output,
            args: ['select']
        }], activeChangeEvent: [{
            type: Output,
            args: ['activeChange']
        }], optionButtons: [{
            type: ViewChildren,
            args: ['optionButton']
        }], className: [{
            type: HostBinding,
            args: ['class']
        }], dropdownWidth: [{
            type: HostBinding,
            args: ['style.width']
        }], popupZIndex: [{
            type: HostBinding,
            args: ['style.zIndex']
        }] }); })();
//# sourceMappingURL=typeahead-window.js.map