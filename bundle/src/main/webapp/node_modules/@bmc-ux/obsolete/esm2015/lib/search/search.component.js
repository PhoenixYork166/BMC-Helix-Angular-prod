import { fromEvent as observableFromEvent } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { Component, ElementRef, EventEmitter, HostListener, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
import { AdaptRadarAngularCustomEventName, AdaptTranslateService, toBoolean } from '@bmc-ux/adapt-angular';
import { AdaptRadarGenericDirective, AdaptRadarService } from '@bmc-ux/adapt-radar';
import * as i0 from "@angular/core";
import * as i1 from "@bmc-ux/adapt-angular";
import * as i2 from "@bmc-ux/adapt-radar";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
const _c0 = ["search"];
const _c1 = function (a0, a1) { return { "adapt-search-active": a0, "adapt-search-dirty": a1 }; };
const _c2 = function (a0) { return { "sr-only": a0 }; };
const _c3 = function (a0) { return { "adapt-search-clear-visible": a0 }; };
function AdaptSearchComponent_div_1_Template(rf, ctx) { if (rf & 1) {
    const _r4 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 2);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelement(2, "div", 3);
    i0.ɵɵtext(3, "\n      ");
    i0.ɵɵelementStart(4, "div", 4);
    i0.ɵɵtext(5, "\n        ");
    i0.ɵɵelementStart(6, "label", 5);
    i0.ɵɵtext(7, "\n          ");
    i0.ɵɵelementStart(8, "span", 6);
    i0.ɵɵtext(9);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(10, "\n          ");
    i0.ɵɵelementStart(11, "span", 7);
    i0.ɵɵtext(12);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(13, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n        ");
    i0.ɵɵelementStart(15, "input", 8, 9);
    i0.ɵɵlistener("ngModelChange", function AdaptSearchComponent_div_1_Template_input_ngModelChange_15_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(); return ctx_r3.value = $event; })("blur", function AdaptSearchComponent_div_1_Template_input_blur_15_listener() { i0.ɵɵrestoreView(_r4); const ctx_r5 = i0.ɵɵnextContext(); return ctx_r5.onBlur(); })("focus", function AdaptSearchComponent_div_1_Template_input_focus_15_listener() { i0.ɵɵrestoreView(_r4); const ctx_r6 = i0.ɵɵnextContext(); return ctx_r6.onFocus(); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(17, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(18, "\n      ");
    i0.ɵɵelementStart(19, "button", 10);
    i0.ɵɵlistener("click", function AdaptSearchComponent_div_1_Template_button_click_19_listener() { i0.ɵɵrestoreView(_r4); const ctx_r7 = i0.ɵɵnextContext(); return ctx_r7.clear(); });
    i0.ɵɵtext(20, "\n        ");
    i0.ɵɵelementStart(21, "span", 11);
    i0.ɵɵtext(22);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(23, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(24, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction2(10, _c1, ctx_r0.isActive, ctx_r0.canClear || ctx_r0.initialAlign === "left"));
    i0.ɵɵadvance(6);
    i0.ɵɵpropertyInterpolate("for", ctx_r0.id);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(13, _c2, ctx_r0.label || ctx_r0.placeholder));
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r0.label || ctx_r0.placeholder);
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r0.placeholder);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("id", ctx_r0.id)("ngModel", ctx_r0.value)("placeholder", ctx_r0.placeholder);
    i0.ɵɵadvance(4);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(15, _c3, ctx_r0.canClear));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r0.btnClearText);
} }
function AdaptSearchComponent_div_3_span_20_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "span", 19);
} }
const _c4 = function (a0) { return { "adapt-search-dirty": a0 }; };
const _c5 = function (a0) { return [a0]; };
function AdaptSearchComponent_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r11 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 12);
    i0.ɵɵtext(1, "\n      ");
    i0.ɵɵelementStart(2, "div", 13);
    i0.ɵɵtext(3, "\n        ");
    i0.ɵɵelementStart(4, "div", 14);
    i0.ɵɵtext(5, "\n          ");
    i0.ɵɵelementStart(6, "input", 15, 9);
    i0.ɵɵlistener("ngModelChange", function AdaptSearchComponent_div_3_Template_input_ngModelChange_6_listener($event) { i0.ɵɵrestoreView(_r11); const ctx_r10 = i0.ɵɵnextContext(); return ctx_r10.value = $event; })("blur", function AdaptSearchComponent_div_3_Template_input_blur_6_listener() { i0.ɵɵrestoreView(_r11); const ctx_r12 = i0.ɵɵnextContext(); return ctx_r12.onBlur(); })("focus", function AdaptSearchComponent_div_3_Template_input_focus_6_listener() { i0.ɵɵrestoreView(_r11); const ctx_r13 = i0.ɵɵnextContext(); return ctx_r13.onFocus(); })("keyup.enter", function AdaptSearchComponent_div_3_Template_input_keyup_enter_6_listener() { i0.ɵɵrestoreView(_r11); const ctx_r14 = i0.ɵɵnextContext(); return ctx_r14.setValue(); });
    i0.ɵɵelementEnd();
    i0.ɵɵtext(8, "\n          ");
    i0.ɵɵelementStart(9, "button", 10);
    i0.ɵɵlistener("click", function AdaptSearchComponent_div_3_Template_button_click_9_listener() { i0.ɵɵrestoreView(_r11); const ctx_r15 = i0.ɵɵnextContext(); return ctx_r15.clear(); });
    i0.ɵɵtext(10, "\n            ");
    i0.ɵɵelementStart(11, "span", 11);
    i0.ɵɵtext(12);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(13, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(14, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(15, "\n        ");
    i0.ɵɵelementStart(16, "div", 16);
    i0.ɵɵtext(17, "\n          ");
    i0.ɵɵelementStart(18, "button", 17);
    i0.ɵɵlistener("click", function AdaptSearchComponent_div_3_Template_button_click_18_listener() { i0.ɵɵrestoreView(_r11); const ctx_r16 = i0.ɵɵnextContext(); return ctx_r16.setValue(); });
    i0.ɵɵtext(19, "\n            ");
    i0.ɵɵtemplate(20, AdaptSearchComponent_div_3_span_20_Template, 1, 0, "span", 18);
    i0.ɵɵtext(21, "\n            ");
    i0.ɵɵelementStart(22, "span");
    i0.ɵɵtext(23);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(24, "\n          ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(25, "\n        ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(26, "\n      ");
    i0.ɵɵelementEnd();
    i0.ɵɵtext(27, "\n    ");
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(17, _c4, ctx_r1.canClear || ctx_r1.initialAlign === "left"));
    i0.ɵɵadvance(6);
    i0.ɵɵclassProp("form-control-sm", ctx_r1.size === "small")("form-control-lg", ctx_r1.size === "large");
    i0.ɵɵproperty("id", ctx_r1.id)("ngModel", ctx_r1.value)("placeholder", ctx_r1.placeholder);
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngClass", i0.ɵɵpureFunction1(19, _c3, ctx_r1.canClear));
    i0.ɵɵadvance(3);
    i0.ɵɵtextInterpolate(ctx_r1.btnClearText);
    i0.ɵɵadvance(6);
    i0.ɵɵproperty("adaptRadarDisableEventSending", true)("ngClass", i0.ɵɵpureFunction1(21, _c5, ctx_r1.explicitSearchBtn ? "explicit-search-btn" : "adapt-search-button"))("size", ctx_r1.size);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", !ctx_r1.explicitSearchBtn);
    i0.ɵɵadvance(2);
    i0.ɵɵclassProp("sr-only", !ctx_r1.explicitSearchBtn);
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate(ctx_r1.btnSearchText);
} }
let nextId = 0;
export class AdaptSearchComponent extends AdaptRadarGenericDirective {
    constructor(ts, _adaptRadarService, _elem) {
        super(_adaptRadarService, _elem, AdaptRadarAngularCustomEventName.AdaptSearch);
        this.ts = ts;
        this.label = '';
        this.debounceTime = 300;
        this.id = `adapt-search-unique-${nextId++}`;
        this.triggerableSearch = false;
        this.size = null;
        this.explicitSearchBtn = false;
        this.value = '';
        this.initialAlign = 'centre';
        this.valueChanged = new EventEmitter();
        this.focusChanged = new EventEmitter();
        this._isActive = false;
        const translation = ts.getCurrentLanguage();
        this.placeholder = translation['adapt.common.search'];
        this.btnClearText = translation['adapt.common.clear'];
        this.btnSearchText = translation['adapt.common.search'];
    }
    set searchValue(searchVal) {
        this.value = searchVal;
    }
    get searchValue() {
        return this.value;
    }
    onClick(event) {
        const target = event.target;
        if (!this.triggerableSearch || (this.triggerableSearch && target.classList.contains('adapt-search-clear'))) {
            this.setActive();
        }
    }
    setActive() {
        this.search.nativeElement.focus();
        this._changeActive(true);
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (!this.triggerableSearch) {
            observableFromEvent(this.search.nativeElement, 'input')
                .pipe(debounceTime(this.debounceTime)).subscribe(() => this.valueChanged.emit(this.value));
        }
    }
    get isActive() {
        return this._isActive;
    }
    get isAdaptSearchDirty() {
        // only check canClear or create separate class with aligning left
        return this.canClear || this.initialAlign === 'left';
    }
    get canClear() {
        return !!this.value;
    }
    onBlur() {
        this._changeActive(false);
    }
    onFocus() {
        this._changeActive(true);
    }
    setValue() {
        if (this.triggerableSearch) {
            this.valueChanged.emit(this.value);
        }
    }
    clear() {
        this.value = '';
        this.valueChanged.emit(this.value);
        this.focusChanged.emit(this._isActive);
    }
    // TODO: Refactor this if possible
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    _changeActive(value) {
        this._isActive = toBoolean(value);
        this.focusChanged.emit(this._isActive);
    }
}
AdaptSearchComponent.ɵfac = function AdaptSearchComponent_Factory(t) { return new (t || AdaptSearchComponent)(i0.ɵɵdirectiveInject(i1.AdaptTranslateService), i0.ɵɵdirectiveInject(i2.AdaptRadarService), i0.ɵɵdirectiveInject(i0.ElementRef)); };
AdaptSearchComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AdaptSearchComponent, selectors: [["adapt-search"]], viewQuery: function AdaptSearchComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 5);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.search = _t.first);
    } }, hostBindings: function AdaptSearchComponent_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("click", function AdaptSearchComponent_click_HostBindingHandler($event) { return ctx.onClick($event); });
    } }, inputs: { placeholder: "placeholder", btnClearText: "btnClearText", btnSearchText: "btnSearchText", label: "label", debounceTime: "debounceTime", id: "id", triggerableSearch: "triggerableSearch", size: "size", explicitSearchBtn: "explicitSearchBtn", searchValue: "searchValue", initialAlign: "initialAlign" }, outputs: { valueChanged: "valueChanged", focusChanged: "focusChanged" }, features: [i0.ɵɵInheritDefinitionFeature], decls: 5, vars: 2, consts: [["class", "adapt-search", 3, "ngClass", 4, "ngIf"], ["class", "adapt-search-triggerable", 3, "ngClass", 4, "ngIf"], [1, "adapt-search", 3, "ngClass"], [1, "adapt-search-icon", "d-icon-search"], [1, "adapt-search-field-wrapper"], [1, "adapt-search-field-layout", "adapt-search-field-ellipsis", 3, "for"], [3, "ngClass"], [2, "visibility", "hidden"], ["type", "search", 1, "adapt-search-field", "adapt-search-field-ellipsis", 3, "id", "ngModel", "placeholder", "ngModelChange", "blur", "focus"], ["search", ""], ["type", "button", 1, "adapt-search-clear", "d-icon-cross_adapt", "btn", "btn-link", 3, "ngClass", "click"], [1, "sr-only"], [1, "adapt-search-triggerable", 3, "ngClass"], [1, "input-group", "flex-nowrap"], [2, "position", "relative", "width", "100%"], ["type", "search", 1, "form-control", "adapt-search-field-ellipsis", 3, "id", "ngModel", "placeholder", "ngModelChange", "blur", "focus", "keyup.enter"], [1, "input-group-append"], ["adapt-button", "", "btn-type", "secondary", "type", "button", 3, "adaptRadarDisableEventSending", "ngClass", "size", "click"], ["class", "d-icon-search", 4, "ngIf"], [1, "d-icon-search"]], template: function AdaptSearchComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵtext(0, "\n    ");
        i0.ɵɵtemplate(1, AdaptSearchComponent_div_1_Template, 25, 17, "div", 0);
        i0.ɵɵtext(2, "\n\n    ");
        i0.ɵɵtemplate(3, AdaptSearchComponent_div_3_Template, 28, 23, "div", 1);
        i0.ɵɵtext(4, "\n  ");
    } if (rf & 2) {
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", !ctx.triggerableSearch);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.triggerableSearch);
    } }, directives: [i3.NgIf, i3.NgClass, i1.AdaptDragonInputHandlerDirective, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel, i1.AdaptButtonComponent], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(AdaptSearchComponent, [{
        type: Component,
        args: [{
                selector: 'adapt-search',
                template: `
    <div *ngIf="!triggerableSearch" class="adapt-search"
         [ngClass]="{'adapt-search-active': isActive, 'adapt-search-dirty': canClear || initialAlign === 'left'}">
      <div class="adapt-search-icon d-icon-search"></div>
      <div class="adapt-search-field-wrapper">
        <label class="adapt-search-field-layout adapt-search-field-ellipsis" for="{{id}}">
          <span [ngClass]="{'sr-only': label || placeholder}">{{label || placeholder}}</span>
          <span style="visibility: hidden">{{placeholder}}</span>
        </label>
        <input #search class="adapt-search-field adapt-search-field-ellipsis"
               type="search"
               [id]="id"
               [(ngModel)]="value"
               [placeholder]="placeholder"
               (blur)="onBlur()"
               (focus)="onFocus()"/>
      </div>
      <button class="adapt-search-clear d-icon-cross_adapt btn btn-link"
              (click)="clear()"
              [ngClass]="{'adapt-search-clear-visible': canClear}"
              type="button">
        <span class="sr-only">{{btnClearText}}</span>
      </button>
    </div>

    <div *ngIf="triggerableSearch" class="adapt-search-triggerable"
         [ngClass]="{'adapt-search-dirty': canClear || initialAlign === 'left'}">
      <div class="input-group flex-nowrap">
        <div style="position: relative; width: 100%;">
          <input class="form-control adapt-search-field-ellipsis"
                 [class.form-control-sm]="size === 'small'"
                 [class.form-control-lg]="size === 'large'"
                 type="search"
                 #search
                 [id]="id"
                 [(ngModel)]="value"
                 [placeholder]="placeholder"
                 (blur)="onBlur()"
                 (focus)="onFocus()"
                 (keyup.enter)="setValue()"/>
          <button class="adapt-search-clear d-icon-cross_adapt btn btn-link"
                  (click)="clear()"
                  [ngClass]="{'adapt-search-clear-visible': canClear}"
                  type="button">
            <span class="sr-only">{{btnClearText}}</span>
          </button>
        </div>
        <div class="input-group-append">
          <button adapt-button
                  [adaptRadarDisableEventSending]="true"
                  btn-type="secondary"
                  [ngClass]="[explicitSearchBtn ? 'explicit-search-btn' : 'adapt-search-button']"
                  (click)="setValue()"
                  [size]="size"
                  type="button">
            <span *ngIf="!explicitSearchBtn" class="d-icon-search"></span>
            <span [class.sr-only]="!explicitSearchBtn">{{ btnSearchText }}</span>
          </button>
        </div>
      </div>
    </div>
  `,
                encapsulation: ViewEncapsulation.None
            }]
    }], function () { return [{ type: i1.AdaptTranslateService }, { type: i2.AdaptRadarService }, { type: i0.ElementRef }]; }, { search: [{
            type: ViewChild,
            args: ['search', { static: false }]
        }], placeholder: [{
            type: Input
        }], btnClearText: [{
            type: Input
        }], btnSearchText: [{
            type: Input
        }], label: [{
            type: Input
        }], debounceTime: [{
            type: Input
        }], id: [{
            type: Input
        }], triggerableSearch: [{
            type: Input
        }], size: [{
            type: Input
        }], explicitSearchBtn: [{
            type: Input
        }], searchValue: [{
            type: Input
        }], initialAlign: [{
            type: Input
        }], valueChanged: [{
            type: Output
        }], focusChanged: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
//# sourceMappingURL=search.component.js.map