import moment from 'moment-es6';
export function IsLocaleHasMeridiem(locale) {
    // 24-hours format time string has 8 symbols (ex.: 11:11:11)
    // If more than 8, locale time has meridiem
    return moment([2020, 10, 10, 23, 11, 11]).locale(locale).format('LTS').length > 8;
}
export function IsDateRangeValid(dStart, dEnd) {
    if (!(dStart && dEnd)) {
        throw new Error('Wrong input params!');
    }
    return dStart.isValid() && dEnd.isValid() && dStart.isSameOrBefore(dEnd);
}
export function IsTimeRangeValid(tStart, tEnd) {
    if (!(tStart && tEnd)) {
        throw new Error('Wrong input params!');
    }
    const _tStart = moment().startOf('day').hour(tStart.hour()).minute(tStart.minute());
    const _tEnd = moment().startOf('day').hour(tEnd.hour()).minute(tEnd.minute());
    return _tStart.isSameOrBefore(_tEnd);
}
export function IsTimeInRange(t, tStart, tEnd) {
    if (!(t && tStart && tEnd)) {
        throw new Error('Wrong input params!');
    }
    if (!IsTimeRangeValid(tStart, tEnd)) {
        return false;
    }
    const _t = moment().startOf('day').hour(t.hour()).minute(t.minute());
    const _tStart = moment().startOf('day').hour(tStart.hour()).minute(tStart.minute());
    const _tEnd = moment().startOf('day').hour(tEnd.hour()).minute(tEnd.minute());
    return _t.isBetween(_tStart, _tEnd, null, '[]');
}
export function IsSameDays(d1, d2) {
    if (!(d1 && d2)) {
        throw new Error('Wrong input params!');
    }
    return d1.isSame(d2, 'year') && d1.isSame(d2, 'month') && d1.isSame(d2, 'day');
}
//# sourceMappingURL=datetime.js.map