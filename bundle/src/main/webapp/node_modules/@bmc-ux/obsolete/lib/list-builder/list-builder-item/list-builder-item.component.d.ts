import { EventEmitter, NgZone } from '@angular/core';
import { AdaptCustomAction, AdaptCustomActionsAlignEnum } from '@bmc-ux/adapt-angular';
import { ListBuilderTextsModel, ListItemsTooltipConfig } from '../list-builder.model';
import { SelectOption } from '../../select/index';
import * as i0 from "@angular/core";
export declare class AdaptListBuilderItemComponent {
    private _ngZone;
    listItem: SelectOption;
    editMode: boolean;
    inputControlModel: string;
    customActionsAlignedTo: AdaptCustomActionsAlignEnum;
    get customActions(): AdaptCustomAction[];
    id: string;
    query: string;
    controlLabels: ListBuilderTextsModel;
    itemActionsTooltipConfig: ListItemsTooltipConfig;
    hideControls: boolean;
    isItemDisallowed: boolean;
    hideEdit: boolean;
    hideDelete: boolean;
    draggable: boolean;
    disabled: boolean;
    readonly onEdit: EventEmitter<any>;
    readonly onDelete: EventEmitter<any>;
    readonly onSave: EventEmitter<any>;
    readonly onCancel: EventEmitter<any>;
    readonly onKeyUp: EventEmitter<any>;
    readonly onKeyDown: EventEmitter<any>;
    readonly onEditChange: EventEmitter<any>;
    constructor(_ngZone: NgZone);
    /**
     * Save value and exit edit mode
     */
    exitEditMode(): void;
    /**
     * Exit edit mode without saving
     */
    cancelEditMode(): void;
    enterEditMode(): void;
    deleteItem(): void;
    editChange(): void;
    onUp(e: any): void;
    onDown(e: any): void;
    writeValue(value: SelectOption): void;
    registerOnChange(fn: any): void;
    registerOnTouched(): void;
    private propagateChange;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptListBuilderItemComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptListBuilderItemComponent, "adapt-list-builder-item", never, { "id": "id"; "query": "query"; "controlLabels": "controlLabels"; "itemActionsTooltipConfig": "itemActionsTooltipConfig"; "hideControls": "hideControls"; "isItemDisallowed": "isItemDisallowed"; "hideEdit": "hideEdit"; "hideDelete": "hideDelete"; "draggable": "draggable"; "disabled": "disabled"; }, { "onEdit": "onEdit"; "onDelete": "onDelete"; "onSave": "onSave"; "onCancel": "onCancel"; "onKeyUp": "onKeyUp"; "onKeyDown": "onKeyDown"; "onEditChange": "onEditChange"; }, never, never>;
}
