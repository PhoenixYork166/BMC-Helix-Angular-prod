import { ApplicationRef, ComponentFactoryResolver, ElementRef, EventEmitter, Injector, NgZone, OnDestroy, OnInit, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { AdaptTypeaheadModel } from './typeahead.config';
import { ResultTemplateContext } from './typeahead-window';
import { OperatorFunction } from 'rxjs';
import { Live, PlacementArray, LayerService, AdaptDeviceDetectionService } from '@bmc-ux/adapt-angular';
import * as i0 from "@angular/core";
/**
 * Payload of the selectItem event.
 */
export interface AdaptTypeaheadSelectItemEvent {
    /**
     * An item about to be selected
     */
    item: any;
    /**
     * Function that will prevent item selection if called
     */
    preventDefault: () => void;
}
/**
 * Payload of the typeAheadWindowOpen event.
 */
export interface AdaptTypeAheadPopupEvent {
    /**
     * Text in the input box when event takes place
     */
    text: string;
    /**
     * State of typeAhead pop up, open or closed
     */
    open: boolean;
}
/**
 * NgbTypeahead directive provides a simple way of creating powerful typeaheads from any text input
 */
export declare class AdaptTypeaheadDirective implements ControlValueAccessor, OnInit, OnDestroy {
    private _elementRef;
    private _viewContainerRef;
    private _renderer;
    private _injector;
    private _live;
    private _layerService;
    private _deviceDetection;
    private _applicationRef;
    /**
     * Value for the configurable autocomplete attribute.
     * Defaults to 'off' to disable the native browser autocomplete, but this standard value does not seem
     * to be always correctly taken into account.
     */
    autocomplete: string;
    /**
     * A selector specifying the element the tooltip should be appended to.
     * Currently only supports "body".
     */
    container: HTMLElement | 'body';
    /**
     * A flag indicating if model values should be restricted to the ones selected from the popup only.
     */
    editable: boolean;
    /**
     * A flag indicating if the first match should automatically be focused as you type.
     */
    focusFirst: boolean;
    /**
     * A function to convert a given value into string to display in the input field
     */
    inputFormatter: (value: any) => string;
    /**
     * A function to transform the provided observable text into the array of results.  Note that the "this" argument
     * is undefined so you need to explicitly bind it to a desired "this" target.
     */
    ngbTypeahead: OperatorFunction<string, any[]>;
    /**
     * Disables result provisioning while true
     */
    preventResults: boolean;
    /**
     * A function to format a given result before display. This function should return a formatted string without any
     * HTML markup
     */
    resultFormatter: (value: any) => string;
    /**
     * A template to override a matching result default display
     */
    resultTemplate: TemplateRef<ResultTemplateContext>;
    /**
     * Show hint when an option in the result list matches.
     */
    showHint: boolean;
    /**
     * Popup custom class
     */
    popupClass: string;
    /**
     * Placement of a typeahead accepts:
     * "top", "top-left", "top-right", "bottom", "bottom-left", "bottom-right",
     * "left", "left-top", "left-bottom", "right", "right-top", "right-bottom"
     * and array of above values.
     */
    placement: PlacementArray;
    /**
     * When specified, the drop-down list will be anchored to the selected element
     */
    positionTo: HTMLElement;
    /**
     * Open popup on focus
     */
    openOnFocus: boolean;
    /**
     * Enable virtual scroll for results window. Can be suitable for big amount of results
     */
    virtualScroll: boolean;
    /**
     * Used to set "itemSize" virtual scroll @Input()
     */
    virtualScrollItemSize: number;
    /**
     * Used to set width for results dropdown
     */
    virtualScrollDropdownWidth: string;
    /**
     * Used to set height for results dropdown
     */
    virtualScrollDropdownHeight: string;
    /**
     * An event emitted when a match is selected. Event payload is of type NgbTypeaheadSelectItemEvent.
     */
    readonly selectItem: EventEmitter<AdaptTypeaheadSelectItemEvent>;
    /**
     * An event emitted when a typeAhead drop down is shown.
     */
    readonly typeAheadPopupOpen: EventEmitter<AdaptTypeAheadPopupEvent>;
    readonly onBlur: EventEmitter<any>;
    readonly onFocus: EventEmitter<any>;
    activeDescendant: string;
    popupId: string;
    private _popupService;
    private _subscription;
    private _inputValueBackup;
    private _valueChanges;
    private _resubscribeTypeahead;
    private _windowRef;
    private _zoneSubscription;
    private _setValueSubscription$;
    private _openOnFocus$;
    private _documentListenerFunc;
    private get _activeElement();
    private _isIE;
    constructor(_elementRef: ElementRef<HTMLInputElement>, _viewContainerRef: ViewContainerRef, _renderer: Renderer2, _injector: Injector, componentFactoryResolver: ComponentFactoryResolver, config: AdaptTypeaheadModel, ngZone: NgZone, _live: Live, _layerService: LayerService, _deviceDetection: AdaptDeviceDetectionService, _applicationRef: ApplicationRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    registerOnChange(fn: (value: any) => any): void;
    registerOnTouched(fn: () => any): void;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    onDocumentClick(event: any): void;
    /**
     * Dismisses typeahead popup window
     */
    dismissPopup(): void;
    /**
     * Returns true if the typeahead popup window is displayed
     */
    isPopupOpen(): boolean;
    handleBlur(event: FocusEvent): void;
    handleFocus(event: FocusEvent): void;
    handleKeyDown(event: KeyboardEvent): void;
    private _onTouched;
    private _onChange;
    private _openPopup;
    private _closePopup;
    private _selectResult;
    private _selectResultClosePopup;
    private _showHint;
    private _formatItemForInput;
    private _writeInputValue;
    private _subscribeToUserInput;
    private _emitInputEvent;
    private _unsubscribeFromUserInput;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptTypeaheadDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AdaptTypeaheadDirective, "[adaptTypeaheadDirective], input[ngbTypeahead]", ["ngbTypeahead"], { "autocomplete": "autocomplete"; "container": "container"; "editable": "editable"; "focusFirst": "focusFirst"; "inputFormatter": "inputFormatter"; "ngbTypeahead": "ngbTypeahead"; "preventResults": "preventResults"; "resultFormatter": "resultFormatter"; "resultTemplate": "resultTemplate"; "showHint": "showHint"; "popupClass": "popupClass"; "placement": "placement"; "positionTo": "positionTo"; "openOnFocus": "openOnFocus"; "virtualScroll": "virtualScroll"; "virtualScrollItemSize": "virtualScrollItemSize"; "virtualScrollDropdownWidth": "virtualScrollDropdownWidth"; "virtualScrollDropdownHeight": "virtualScrollDropdownHeight"; }, { "selectItem": "selectItem"; "typeAheadPopupOpen": "typeAheadPopupOpen"; "onBlur": "onBlur"; "onFocus": "onFocus"; }, never>;
}
