import { CdkDragDrop } from '@angular/cdk/drag-drop';
import { ElementRef, EventEmitter, Injector, OnInit, Renderer2 } from '@angular/core';
import { ControlValueAccessor, FormControl, Validators } from '@angular/forms';
import { ListBuilderTextsModel, ListItemsTooltipConfig } from './list-builder.model';
import { AdaptRadarAngularService, AdaptRxControlLabelTooltip, AdaptTranslateService, FormComponent, KeyValueObject, ValidationError } from '@bmc-ux/adapt-angular';
import { SelectOption, SelectSettings } from '../select/index';
import * as i0 from "@angular/core";
export declare class AdaptListBuilderComponent extends FormComponent implements OnInit, ControlValueAccessor, Validators {
    private _renderer;
    private _injector;
    protected _adaptRadarService: AdaptRadarAngularService;
    searchFilterText: string;
    hideControls: boolean;
    _self: any;
    /**
     * Label icon with a tooltip or popover
     */
    tooltipConfig: AdaptRxControlLabelTooltip;
    list: ElementRef;
    search: ElementRef;
    defaultSettings: SelectSettings;
    defaultItemsTooltipConfig: ListItemsTooltipConfig;
    defaultTexts: ListBuilderTextsModel;
    defaultErrorTexts: any;
    isItemDisallowed: boolean;
    readonly listChanged: EventEmitter<any>;
    readonly focus: EventEmitter<any>;
    readonly blur: EventEmitter<any>;
    label: string;
    subLabel: string;
    /**
     * Unique id of the element.
     */
    id: string;
    name: string;
    /**
     * Tooltip icon and additional text for it.
     */
    tooltipInputIcon: string;
    tooltipInputText: string;
    options: SelectOption[];
    settings: SelectSettings;
    texts: ListBuilderTextsModel;
    listItemActionsTooltip: ListItemsTooltipConfig;
    displayErrorMessage: string;
    validationErrorMessage: string;
    formControl: FormControl;
    menuHeight: string;
    hideSearchField: boolean;
    hideEdit: boolean;
    hideDelete: boolean;
    hideListAreaLabel: boolean;
    generateListItemId: () => any;
    allowAddingToList: (value: string, array: any) => boolean;
    get isErrorExist(): boolean;
    set value(v: SelectOption[]);
    private _isTouched;
    private _value;
    constructor(_renderer: Renderer2, _injector: Injector, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    writeValue(value: SelectOption[]): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    validate(): {
        invalidData: ValidationError;
    };
    checkItemDisallowed(): boolean;
    addListItem(): void;
    deleteListItem(option: SelectOption): void;
    editChange(value: string): void;
    drop(event: CdkDragDrop<SelectOption[]>): void;
    onUp(index: any): void;
    onDown(index: any): void;
    move(): void;
    searchChange(): void;
    cleanField(): void;
    onBlur(): void;
    onFocus(): void;
    private updateModel;
    private _onTouchedCallback;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptListBuilderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptListBuilderComponent, "adapt-list-builder", never, { "label": "label"; "subLabel": "sub-label"; "id": "id"; "name": "name"; "tooltipInputIcon": "tooltipInputIcon"; "tooltipInputText": "tooltipInputText"; "options": "options"; "settings": "settings"; "texts": "texts"; "listItemActionsTooltip": "listItemActionsTooltip"; "displayErrorMessage": "displayErrorMessage"; "validationErrorMessage": "validationErrorMessage"; "formControl": "formControl"; "menuHeight": "menuHeight"; "hideSearchField": "hideSearchField"; "hideEdit": "hideEdit"; "hideDelete": "hideDelete"; "hideListAreaLabel": "hideListAreaLabel"; "generateListItemId": "generateListItemId"; "allowAddingToList": "allowAddingToList"; }, { "listChanged": "listChanged"; "focus": "focus"; "blur": "blur"; }, never, [".empty-text"]>;
}
