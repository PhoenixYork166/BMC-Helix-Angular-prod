import { ElementRef, EventEmitter, NgZone, OnInit, QueryList, TemplateRef } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Context for the typeahead result template in case you want to override the default one
 */
export interface ResultTemplateContext {
    /**
     * Your typeahead result data model
     */
    result: any;
    /**
     * Search term from the input used to get current result
     */
    term: string;
}
export declare class AdaptTypeaheadWindowComponent implements OnInit {
    private _elementRef;
    private _ngZone;
    activeIdx: number;
    /**
     *  The id for the typeahead window. The id should be unique and the same
     *  as the associated typeahead's id.
     */
    id: string;
    /**
     * Flag indicating if the first row should be active initially
     */
    focusFirst: boolean;
    /**
     * Typeahead match results to be displayed
     */
    results: any;
    /**
     * Search term used to get current results
     */
    term: string;
    /**
     * A function used to format a given result before display. This function should return a formatted string without any
     * HTML markup
     */
    formatter: Function;
    /**
     * A template to override a matching result default display
     */
    resultTemplate: TemplateRef<ResultTemplateContext>;
    /**
     * The flag informing that the popup is appended to document.body
     */
    appendedToBody: boolean;
    /**
     * Custom class for host element
     */
    hostClass: string;
    /**
     * Enable virtual scroll for results window. Can be suitable for big amount of results
     */
    virtualScroll: boolean;
    /**
     * Used to set "itemSize" virtual scroll @Input()
     */
    virtualScrollItemSize: number;
    /**
     * Used to set width for results dropdown
     */
    virtualScrollDropdownHeight: string;
    /**
     * Used to set height for results dropdown
     */
    virtualScrollDropdownWidth: string;
    /**
     * Event raised when user selects a particular result row
     */
    readonly selectEvent: EventEmitter<any>;
    readonly activeChangeEvent: EventEmitter<any>;
    optionButtons: QueryList<ElementRef<HTMLButtonElement>>;
    get className(): string;
    get dropdownWidth(): string;
    get popupZIndex(): string;
    constructor(_elementRef: ElementRef<HTMLElement>, _ngZone: NgZone);
    hasActive(): boolean;
    getActive(): any;
    markActive(activeIdx: number): void;
    next(): void;
    prev(): void;
    resetActive(): void;
    select(item: any): void;
    ngOnInit(): void;
    trackByForResults(index: number): number;
    private _activeChanged;
    private scrollToActiveItem;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptTypeaheadWindowComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptTypeaheadWindowComponent, "ngb-typeahead-window, adapt-typeahead-window", ["ngbTypeaheadWindow"], { "id": "id"; "focusFirst": "focusFirst"; "results": "results"; "term": "term"; "formatter": "formatter"; "resultTemplate": "resultTemplate"; "appendedToBody": "appendedToBody"; "hostClass": "hostClass"; "virtualScroll": "virtualScroll"; "virtualScrollItemSize": "virtualScrollItemSize"; "virtualScrollDropdownHeight": "virtualScrollDropdownHeight"; "virtualScrollDropdownWidth": "virtualScrollDropdownWidth"; }, { "selectEvent": "select"; "activeChangeEvent": "activeChange"; }, never, never>;
}
