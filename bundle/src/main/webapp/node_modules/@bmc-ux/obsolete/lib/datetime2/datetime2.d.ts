import { AfterViewInit, EventEmitter, OnDestroy, OnInit, Renderer2, ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { FormControl } from '@angular/forms';
import { AnimationBuilder, AnimationPlayer } from '@angular/animations';
import { Directionality } from '@angular/cdk/bidi';
import moment from 'moment-es6';
import { KeyValueObject, AdaptTranslateService } from '@bmc-ux/adapt-angular';
import { Calendar2, Calendar2Day, Clock2Face, Clock2FaceUnit, Datetime2TextsModel } from './datetime2.model';
import { AdaptDatetime2Component } from './datetime2.component';
import { AdaptDatetimeRange2Component } from './datetime-range2.component';
import * as i0 from "@angular/core";
export declare class AdaptDatetime2CalendarComponent implements OnInit, AfterViewInit {
    private _animationBuilder;
    private _dir;
    private _dt;
    private _dtr;
    private _changeDetectorRef;
    private ts;
    readonly _formControl: FormControl;
    calendar: Calendar2Day[][];
    animationDirectionForward: boolean;
    isRtl: boolean;
    yearsPage: number;
    defaultTexts: {
        emptyYear?: string;
        emptyMonth?: string;
    };
    calendarUIActions: any;
    testID: string;
    monthAndYearOnly: boolean;
    readonly daySelect: EventEmitter<moment.Moment>;
    daysTable: any;
    calendarContainerRef: any;
    _animationsSet: any;
    _calendarPlayers: {
        nextOut: AnimationPlayer;
        nextIn: AnimationPlayer;
        prevOut: AnimationPlayer;
        prevIn: AnimationPlayer;
    };
    private _calendarDOM;
    private _animationReady;
    private _initialDate;
    set initialDate(v: moment.Moment);
    get initialDate(): moment.Moment;
    private _activeDate;
    set activeDate(v: moment.Moment);
    get activeDate(): moment.Moment;
    private _filter;
    set filter(v: (date: moment.Moment) => boolean);
    private _range;
    set range(v: [moment.Moment | null, moment.Moment | null]);
    private _disabled;
    set disabled(v: boolean);
    private _readonly;
    set readonly(v: boolean);
    private _hideControls;
    set hideControls(v: boolean);
    private _expandedControlsStyle;
    set expandedControlsStyle(v: boolean);
    get calendarUIState(): {
        date: moment.Moment;
        hideControls: boolean;
        expanded: boolean;
        disabled: boolean;
        readonly: boolean;
    };
    set state(config: Calendar2);
    constructor(_animationBuilder: AnimationBuilder, _dir: Directionality, _dt: AdaptDatetime2Component, _dtr: AdaptDatetimeRange2Component, _changeDetectorRef: ChangeDetectorRef, ts: AdaptTranslateService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    /**
     * Init days table
     */
    /**
     * Calendar day click handler
     */
    onDayClick(date: moment.Moment): void;
    yearSelect(date: moment.Moment): void;
    /**
     * Update days table with month change
     */
    /**
     * Keyboard navigation for days table
     */
    onDayFocusChange(event: KeyboardEvent, element: HTMLElement, direction?: 'l' | 't' | 'r' | 'b'): void;
    /**
     * Update days table without month change
     */
    private _initCalendar;
    private _drawCalendar;
    private _patchCalendar;
    /**
     * Calendar change animation
     */
    private _animateCalendarChange;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptDatetime2CalendarComponent, [null, null, { optional: true; }, { optional: true; }, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptDatetime2CalendarComponent, "adapt-datetime2-calendar", never, { "testID": "testID"; "monthAndYearOnly": "monthAndYearOnly"; "initialDate": "initialDate"; "activeDate": "activeDate"; "filter": "filter"; "range": "range"; "disabled": "disabled"; "readonly": "readonly"; "hideControls": "hideControls"; "expandedControlsStyle": "expandedControlsStyle"; "state": "state"; }, { "daySelect": "daySelect"; }, never, never>;
}
export declare class AdaptDatetime2ClockComponent implements OnInit, AfterViewInit, OnDestroy {
    private _renderer;
    private _animationBuilder;
    private ts;
    _isPM: boolean;
    _activeFace: Clock2FaceUnit;
    _hasMeridiem: boolean;
    defaultTexts: Datetime2TextsModel;
    testID: string;
    seconds: boolean;
    autoFaceSwitch: boolean;
    disabled: boolean;
    readonly: boolean;
    texts: Datetime2TextsModel;
    readonly timeSelect: EventEmitter<number[]>;
    readonly clockFaceChange: EventEmitter<Clock2FaceUnit>;
    dndArea: any;
    clockFaceContainerRef: any;
    private _innerFaceDNDTolerance;
    private _dndSubscription;
    private _faceSize;
    private _hoursFaceTicks24;
    private _hoursFaceTicks12;
    private _hoursFace;
    uiFace: Clock2Face;
    private _minutesFace;
    private _secondsFace;
    private _animationReady;
    private _animationsSet;
    private _animationPlayers;
    set activeFace(nextFace: Clock2FaceUnit);
    set hasMeridiem(nextMeridiem: boolean);
    set activeTime(nextActiveTime: number[]);
    private get _model();
    constructor(_renderer: Renderer2, _animationBuilder: AnimationBuilder, ts: AdaptTranslateService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    /**
     * Return current model state
     */
    ngOnDestroy(): void;
    /**
     * Init drag and drop
     */
    /**
     * Change time meridiem
     */
    changeMeridiem(): void;
    /**
     * Change time unit face
     */
    gotoNextFace(nextFace?: Clock2FaceUnit): void;
    private _initDragNDrop;
    private _animateClockFaceChange;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptDatetime2ClockComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptDatetime2ClockComponent, "adapt-datetime2-clock", never, { "testID": "testID"; "seconds": "seconds"; "autoFaceSwitch": "autoFaceSwitch"; "disabled": "disabled"; "readonly": "readonly"; "texts": "texts"; "activeFace": "activeFace"; "hasMeridiem": "hasMeridiem"; "activeTime": "activeTime"; }, { "timeSelect": "timeSelect"; "clockFaceChange": "clockFaceChange"; }, never, never>;
}
export declare class AdaptDatetime2PickerComponent implements OnInit {
    private ts;
    private _ngZone;
    private _changeDetectorRef;
    static DT_ID: number;
    monthMode: boolean;
    activeDate: moment.Moment;
    activeFaceVariants: typeof Clock2FaceUnit;
    defaultTexts: Datetime2TextsModel;
    hoursField: ElementRef;
    dateRange: [moment.Moment | null, moment.Moment | null];
    dateFormat: string;
    dateFilter: (date: moment.Moment) => boolean;
    timeFormat: string;
    timePicker: boolean;
    timeOnly: boolean;
    monthAndYearOnly: boolean;
    monthFirst: boolean;
    timeSeconds: boolean;
    activeFace: any;
    initialValue: moment.Moment;
    disabled: boolean;
    readonly: boolean;
    hideDatePickerSummary: boolean;
    preventExpandedDateControls: boolean;
    emptyDateHeading: string;
    emptyTimeHeading: string;
    emptyMonthHeading: string;
    clockHeadings: Datetime2TextsModel;
    testID: string;
    readonly valueChange: EventEmitter<moment.Moment | null>;
    readonly timeModeChange: EventEmitter<boolean>;
    readonly clockFaceChange: EventEmitter<Clock2FaceUnit>;
    readonly _localeHasMeridiem: boolean;
    private _timeMode;
    private _model;
    get timeMode(): any;
    set timeMode(v: any);
    set activeValue(v: moment.Moment);
    get clockState(): number[];
    get hasMeridiem(): boolean;
    get dateSummary(): string;
    get yearSummary(): string;
    get monthSummary(): string;
    get timeSummary(): {
        hh: string;
        mm: string;
        ss: string;
        a: string;
    } | false;
    constructor(ts: AdaptTranslateService, _ngZone: NgZone, _changeDetectorRef: ChangeDetectorRef);
    ngOnInit(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    selectDate(v: moment.Moment): void;
    selectTime(v: [number, number, number]): void;
    selectMonth(v: moment.Moment): void;
    setCurrentDate(): void;
    changeMeridiem(): void;
    timeUnitKeydown(event: KeyboardEvent, unit: 'h' | 'm' | 's'): void;
    timeUnitInput(event: Event, unit: 'h' | 'm' | 's'): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptDatetime2PickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptDatetime2PickerComponent, "adapt-datetime2-picker", never, { "dateRange": "dateRange"; "dateFormat": "dateFormat"; "dateFilter": "dateFilter"; "timeFormat": "timeFormat"; "timePicker": "timePicker"; "timeOnly": "timeOnly"; "monthAndYearOnly": "monthAndYearOnly"; "monthFirst": "monthFirst"; "timeSeconds": "timeSeconds"; "activeFace": "activeFace"; "initialValue": "initialValue"; "disabled": "disabled"; "readonly": "readonly"; "hideDatePickerSummary": "hideDatePickerSummary"; "preventExpandedDateControls": "preventExpandedDateControls"; "emptyDateHeading": "emptyDateHeading"; "emptyTimeHeading": "emptyTimeHeading"; "emptyMonthHeading": "emptyMonthHeading"; "clockHeadings": "clockHeadings"; "testID": "testID"; "timeMode": "timeMode"; "activeValue": "activeValue"; }, { "valueChange": "valueChange"; "timeModeChange": "timeModeChange"; "clockFaceChange": "clockFaceChange"; }, never, never>;
}
