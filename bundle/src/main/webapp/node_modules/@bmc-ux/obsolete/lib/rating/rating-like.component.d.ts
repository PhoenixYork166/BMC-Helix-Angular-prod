import { ElementRef, EventEmitter } from '@angular/core';
import { AdaptTranslateService, KeyValueObject, TooltipPlacement } from '@bmc-ux/adapt-angular';
import { RatingLikeEnum } from './rating-like.enum';
import { AdaptRadarGenericDirective, AdaptRadarService } from '@bmc-ux/adapt-radar';
import * as i0 from "@angular/core";
export declare const RatingLikeTypes: string[];
export declare class RatingLikeValuesError extends Error {
    constructor(length: number);
}
export declare class AdaptRatingLikeComponent extends AdaptRadarGenericDirective {
    private ts;
    selectedLike: number;
    types: string[];
    disabled: boolean;
    readonly onChange: EventEmitter<{
        type: string;
    }>;
    get ratingValues(): string[];
    set ratingValues(v: string[]);
    get point(): RatingLikeEnum;
    set point(v: RatingLikeEnum);
    get tooltip(): string[];
    set tooltip(v: string[]);
    get tooltipPlacement(): TooltipPlacement;
    set tooltipPlacement(placement: TooltipPlacement);
    get size(): 'extra-small' | 'small' | 'medium' | 'large' | 'small';
    set size(v: 'extra-small' | 'small' | 'medium' | 'large' | 'small');
    get disabledList(): number[];
    set disabledList(array: number[]);
    set rate(v: any);
    private _ratingValues;
    private _point;
    private _tooltip;
    private _tooltipPlacement;
    private _size;
    private _disabledList;
    constructor(ts: AdaptTranslateService, _adaptRadarService: AdaptRadarService, _elem: ElementRef<HTMLElement>);
    setDefaultTexts(translation: KeyValueObject): void;
    handleClick(e: MouseEvent, index: number): void;
    private _stopDisabled;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRatingLikeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRatingLikeComponent, "adapt-rating-like", never, { "disabled": "disabled"; "ratingValues": "ratingValues"; "point": "point"; "tooltip": "tooltip"; "tooltipPlacement": "tooltipPlacement"; "size": "size"; "disabledList": "disabledList"; "rate": "rate"; }, { "onChange": "onChange"; }, never, never>;
}
