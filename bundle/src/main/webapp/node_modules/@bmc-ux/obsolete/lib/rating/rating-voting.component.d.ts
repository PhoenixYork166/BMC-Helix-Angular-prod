import { ElementRef, EventEmitter, OnChanges } from '@angular/core';
import { AdaptTranslateService, KeyValueObject, TooltipPlacement } from '@bmc-ux/adapt-angular';
import { AdaptRadarGenericDirective, AdaptRadarService } from '@bmc-ux/adapt-radar';
import * as i0 from "@angular/core";
export declare type AdaptRatingType = 'star' | 'flag' | 'like' | 'thanks';
export declare class RatingVotingTypeError extends Error {
    constructor(type: string);
}
export declare class AdaptRatingVotingComponent extends AdaptRadarGenericDirective implements OnChanges {
    private ts;
    isActive: boolean;
    wasClick: boolean;
    type: AdaptRatingType;
    readonly onVotingChanged: EventEmitter<{
        type: AdaptRatingType;
        isActive: boolean;
    }>;
    get thanksText(): string;
    set thanksText(text: string);
    get thanksAbbrMessage(): string;
    set thanksAbbrMessage(text: string);
    get tooltip(): string;
    set tooltip(v: string);
    get tooltipPlacement(): TooltipPlacement;
    set tooltipPlacement(placement: TooltipPlacement);
    private _thanksText;
    private _thanksAbbrMessage;
    private _tooltip;
    private _tooltipPlacement;
    constructor(ts: AdaptTranslateService, _adaptRadarService: AdaptRadarService, _elem: ElementRef<HTMLElement>);
    setDefaultTexts(translation: KeyValueObject): void;
    handleClick(): void;
    ngOnChanges(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRatingVotingComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRatingVotingComponent, "adapt-rating-voting", never, { "type": "type"; "thanksText": "thanksText"; "thanksAbbrMessage": "thanksAbbrMessage"; "tooltip": "tooltip"; "tooltipPlacement": "tooltipPlacement"; }, { "onVotingChanged": "voting-change"; }, never, never>;
}
