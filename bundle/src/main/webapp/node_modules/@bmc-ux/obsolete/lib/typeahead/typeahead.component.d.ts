import { ElementRef, EventEmitter, Injector, OnInit, TemplateRef } from '@angular/core';
import { Observable, OperatorFunction } from 'rxjs';
import { ControlValueAccessor } from '@angular/forms';
import { ResultTemplateContext } from './typeahead-window';
import { AdaptTypeaheadConfig } from './typeahead.config';
import { AdaptTranslateService, PlacementArray } from '@bmc-ux/adapt-angular';
import { AdaptRadarGenericDirective, AdaptRadarService } from '@bmc-ux/adapt-radar';
import * as i0 from "@angular/core";
export declare const TYPEAHEAD_VALUE_ACCESSOR: any;
export declare class AdaptTypeaheadComponent extends AdaptRadarGenericDirective implements ControlValueAccessor, OnInit {
    private ts;
    private _injector;
    appendToContainer: HTMLElement | 'body';
    /**
     * A function to transform the provided observable text into the array of results.
     * Note that the "this" argument is undefined so you need to explicitly bind it to a desired "this" target.
     */
    set typeahead(inputFunction: OperatorFunction<string, any[]> | Observable<string>);
    get typeahead(): OperatorFunction<string, any[]> | Observable<string>;
    /**
     * The plain text label for the input element
     */
    label: string;
    /**
     * The description for the input element
     */
    description: string;
    /**
     * Unique id of the element.
     */
    id: string;
    /**
     * A flag indicating if model values should be restricted to the ones selected from the popup only.
     */
    editable: boolean;
    /**
     * A flag indicating if the first match should automatically be focused as you type.
     */
    focusFirst: boolean;
    /**
     * Show hint when an option in the result list matches.
     */
    showHint: boolean;
    /**
     * A function to convert a given value into string to display in the input field
     */
    inputFormatter: Function;
    /**
     * A function to format a given result before display.
     * This function should return a formatted string without any HTML markup
     */
    resultFormatter: Function;
    /**
     * A template to override a matching result default display
     */
    resultTemplate: TemplateRef<ResultTemplateContext>;
    /**
     * Input field placeholder
     */
    placeholder: string;
    /**
     * Placement of a typeahead accepts:
     * "top", "top-left", "top-right", "bottom", "bottom-left", "bottom-right",
     * "left", "left-top", "left-bottom", "right", "right-top", "right-bottom"
     * and array of above values.
     */
    placement: PlacementArray;
    /**
     * Input field errorMessage
     */
    errorMessage: string;
    /**
     * Warning is displayed when user enter some text which is not corresponding any typeahead options.
     * @since 11.16.0
     */
    warningMessage: string;
    disabled: boolean;
    readonly: boolean;
    /**
     * Append to body trigger
     */
    set appendToBody(state: boolean);
    /**
     * When specified, the drop-down list will be anchored to the selected element
     */
    positionTo: HTMLElement;
    /**
     * When specified, the drop-down list will be appended to the selected element
     */
    set appendTo(element: HTMLElement | 'body');
    /**
     * Whether the input is required. The plain text 'requiredLabel' for the input element
     */
    requiredLabel: string;
    /**
     * Open popup on focus
     */
    openOnFocus: boolean;
    /**
     * Enable virtual scroll for results window. Can be suitable for big amount of results
     */
    virtualScroll: boolean;
    /**
     * Used to set "itemSize" virtual scroll @Input()
     */
    virtualScrollItemSize: number;
    /**
     * Used to set width for results dropdown
     */
    virtualScrollDropdownWidth: string;
    /**
     * Used to set height for results dropdown
     */
    virtualScrollDropdownHeight: string;
    /**
     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will
     * take precedence so this may be omitted.
     */
    ariaLabel: string | null;
    /**
     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element
     */
    ariaLabelledby: string | null;
    ariaDescribedBy: string | null;
    /**
     * The value for the `autocomplete` attribute for the `<input>` element.
     * @since v10.14.0
     */
    autocomplete: string;
    /**
     * Reference to input element
     */
    inputElement: ElementRef;
    /**
     * An event emitted when a match is selected. Event payload is of type NgbTypeaheadSelectItemEvent.
     */
    readonly selectItem: EventEmitter<any>;
    readonly focus: EventEmitter<any>;
    readonly blur: EventEmitter<any>;
    readonly click: EventEmitter<any>;
    /**
     * If the error state should be shown to user
     */
    isError: boolean;
    /** Make input borders orange in case if user enter wrong text which is not correspond to any typeahead options */
    isWarning: boolean;
    /**
     * The internal data model
     */
    private innerValue;
    /** Actual value, event if it is not matching any typeahead options */
    private actualInputValue;
    /**
     * If the typeAhead drop down is open
     */
    private isTypeAheadOpen;
    /**
     * Placeholders for the callbacks which are later provided by the Control Value Accessor
     */
    private onTouchedCallback;
    private onChangeCallback;
    private _isTouched;
    private _required;
    private _typeahead;
    private _ngControl;
    /** Whether the element is required. */
    get required(): any;
    set required(value: any);
    /**
     * get accessor
     */
    get value(): any;
    /**
     * set accessor including call the onchange callback
     */
    set value(v: any);
    constructor(config: AdaptTypeaheadConfig, ts: AdaptTranslateService, _injector: Injector, _adaptRadarService: AdaptRadarService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    onFocus(event: FocusEvent): void;
    onSelect(event: any): void;
    /**
     * Triggered when typeAhead drop down is open or closed
     */
    typeAheadPopUpChange(event: any): void;
    /**
     * Update the error UI
     */
    updateError(): void;
    updateWarning(): void;
    onInputChange(event: Event): void;
    /**
     * Set touched on blur
     */
    onBlur(event: FocusEvent): void;
    /**
     * From ControlValueAccessor interface
     */
    writeValue(value: any): void;
    /**
     * From ControlValueAccessor interface
     */
    registerOnChange(fn: any): void;
    /**
     * From ControlValueAccessor interface
     */
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptTypeaheadComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptTypeaheadComponent, "adapt-typeahead", never, { "typeahead": "typeahead"; "label": "label"; "description": "description"; "id": "id"; "editable": "editable"; "focusFirst": "focusFirst"; "showHint": "showHint"; "inputFormatter": "inputFormatter"; "resultFormatter": "resultFormatter"; "resultTemplate": "resultTemplate"; "placeholder": "placeholder"; "placement": "placement"; "errorMessage": "errorMessage"; "warningMessage": "warningMessage"; "disabled": "disabled"; "readonly": "readonly"; "appendToBody": "appendToBody"; "positionTo": "positionTo"; "appendTo": "appendTo"; "requiredLabel": "requiredLabel"; "openOnFocus": "openOnFocus"; "virtualScroll": "virtualScroll"; "virtualScrollItemSize": "virtualScrollItemSize"; "virtualScrollDropdownWidth": "virtualScrollDropdownWidth"; "virtualScrollDropdownHeight": "virtualScrollDropdownHeight"; "ariaLabel": "aria-label"; "ariaLabelledby": "aria-labelledby"; "ariaDescribedBy": "aria-describedby"; "autocomplete": "autocomplete"; "required": "required"; }, { "selectItem": "selectItem"; "focus": "focus"; "blur": "blur"; "click": "click"; }, never, never>;
}
