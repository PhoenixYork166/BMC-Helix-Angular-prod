import { CdkDragDrop } from '@angular/cdk/drag-drop';
import { ChangeDetectorRef, ElementRef, EventEmitter, Injector, NgZone, OnInit, Renderer2 } from '@angular/core';
import { ControlValueAccessor, FormControl, Validators } from '@angular/forms';
import { AdaptRadarAngularService, AdaptRxControlLabelTooltip, AdaptTranslateService, FormComponent, KeyValueObject } from '@bmc-ux/adapt-angular';
import { ListSelectorTextsModel } from './list-selector.model';
import { SelectOption, SelectSettings, SelectTexts } from '../select/index';
import * as i0 from "@angular/core";
export declare class AdaptListComponent extends FormComponent implements OnInit, ControlValueAccessor, Validators {
    protected _renderer: Renderer2;
    protected element: ElementRef;
    private _injector;
    private _changeDetectorRef;
    private _ngZone;
    protected _adaptRadarService: AdaptRadarAngularService;
    createdList: SelectOption[];
    refToElement: ElementRef;
    isErrorExist: boolean;
    isEmptyState: boolean;
    hideControls: boolean;
    _self: any;
    listEl: ElementRef;
    defaultSettings: SelectSettings;
    defaultTexts: ListSelectorTextsModel;
    defaultError: string;
    /**
     * Label icon with a tooltip or popover
     */
    tooltipConfig: AdaptRxControlLabelTooltip;
    readonly listChanged: EventEmitter<any>;
    readonly focus: EventEmitter<any>;
    readonly blur: EventEmitter<any>;
    selectedIndexes: number[];
    options: SelectOption[];
    settings: SelectSettings;
    selectTexts: SelectTexts;
    texts: ListSelectorTextsModel;
    label: string;
    enableDnD: boolean;
    /**
     * Unique id of the element.
     */
    id: string;
    name: string;
    /**
     * Tooltip icon and additional text for it.
     */
    tooltipInputIcon: string;
    tooltipInputText: string;
    displayErrorMessage: string;
    formControl: FormControl;
    get customClass(): string;
    set customClass(v: string);
    get disabled(): boolean;
    set disabled(v: boolean);
    get maxHeight(): string;
    set maxHeight(v: string);
    set value(v: SelectOption[]);
    get value(): SelectOption[];
    private _value;
    private _customClass;
    private _isTouched;
    private _maxHeight;
    constructor(_renderer: Renderer2, element: ElementRef, _injector: Injector, _changeDetectorRef: ChangeDetectorRef, _ngZone: NgZone, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarAngularService);
    updateListOrder(listIndexes: number[]): void;
    ngOnInit(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    writeValue(value: SelectOption[]): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    validate(): any;
    setDisabledState?(isDisabled: boolean): void;
    deselectItem(id: any): void;
    updateListBuilder(obj: any): void;
    onListAnimationDone(event: any): void;
    onListAnimationStart(event: any): void;
    dropdownClosed(): void;
    updateSelectTitle(): void;
    updateModel(): void;
    drop(event: CdkDragDrop<string[]>): void;
    onUp(e: KeyboardEvent, prevIndex: any): void;
    onDown(e: KeyboardEvent, prevIndex: any): void;
    move(): void;
    checkValid(): void;
    private _onTouchedCallback;
    private _updateControl;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptListComponent, "adapt-list-selector", never, { "selectedIndexes": "selectedIndexes"; "options": "options"; "settings": "settings"; "selectTexts": "selectTexts"; "texts": "texts"; "label": "label"; "enableDnD": "enableDnD"; "id": "id"; "name": "name"; "tooltipInputIcon": "tooltipInputIcon"; "tooltipInputText": "tooltipInputText"; "displayErrorMessage": "displayErrorMessage"; "formControl": "formControl"; "customClass": "customClass"; "disabled": "disabled"; "maxHeight": "maxHeight"; "updateListOrder": "updateListOrder"; }, { "listChanged": "listChanged"; "focus": "focus"; "blur": "blur"; }, never, [".empty-text"]>;
}
