import { AfterViewInit, ElementRef, EventEmitter } from '@angular/core';
import { AdaptTranslateService } from '@bmc-ux/adapt-angular';
import { AdaptRadarGenericDirective, AdaptRadarService } from '@bmc-ux/adapt-radar';
import * as i0 from "@angular/core";
export declare class AdaptSearchComponent extends AdaptRadarGenericDirective implements AfterViewInit {
    private ts;
    search: ElementRef;
    placeholder: string;
    btnClearText: string;
    btnSearchText: string;
    label: string;
    debounceTime: number;
    id: string;
    triggerableSearch: boolean;
    size: string;
    explicitSearchBtn: boolean;
    value: string;
    set searchValue(searchVal: string);
    get searchValue(): string;
    initialAlign: 'left' | 'centre';
    readonly valueChanged: EventEmitter<string>;
    readonly focusChanged: EventEmitter<boolean>;
    private _isActive;
    constructor(ts: AdaptTranslateService, _adaptRadarService: AdaptRadarService, _elem: ElementRef<HTMLElement>);
    onClick(event: Event): void;
    setActive(): void;
    ngAfterViewInit(): void;
    get isActive(): boolean;
    get isAdaptSearchDirty(): boolean;
    get canClear(): boolean;
    onBlur(): void;
    onFocus(): void;
    setValue(): void;
    clear(): void;
    private _changeActive;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptSearchComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptSearchComponent, "adapt-search", never, { "placeholder": "placeholder"; "btnClearText": "btnClearText"; "btnSearchText": "btnSearchText"; "label": "label"; "debounceTime": "debounceTime"; "id": "id"; "triggerableSearch": "triggerableSearch"; "size": "size"; "explicitSearchBtn": "explicitSearchBtn"; "searchValue": "searchValue"; "initialAlign": "initialAlign"; }, { "valueChanged": "valueChanged"; "focusChanged": "focusChanged"; }, never, never>;
}
