import { ElementRef, EventEmitter, OnInit } from '@angular/core';
import { AdaptTranslateService, KeyValueObject } from '@bmc-ux/adapt-angular';
import { ControlValueAccessor } from '@angular/forms';
import { RatingModel } from './rating.model';
import { AdaptRadarGenericDirective, AdaptRadarService } from '@bmc-ux/adapt-radar';
import * as i0 from "@angular/core";
export declare const ADAPT_RATING_ACCESSOR: any;
export declare class AdaptRatingComponent extends AdaptRadarGenericDirective implements OnInit, ControlValueAccessor {
    private ts;
    ratingList: RatingModel[];
    currentRating: number;
    readonly: boolean;
    readonly activeRateChanged: EventEmitter<number>;
    readonly hoverChanged: EventEmitter<number>;
    readonly leaveChanged: EventEmitter<number>;
    get size(): 'extra-small' | 'small' | 'medium' | 'large';
    set size(v: 'extra-small' | 'small' | 'medium' | 'large');
    get disabled(): any;
    set disabled(v: any);
    get tooltip(): string[];
    set tooltip(v: string[]);
    get maxValue(): any;
    set maxValue(v: any);
    get rate(): any;
    set rate(v: any);
    private _onTouchedCallback;
    private _onChangeCallback;
    private _size;
    private _disabled;
    private _tooltip;
    private _maxValue;
    private _rate;
    constructor(ts: AdaptTranslateService, _adaptRadarService: AdaptRadarService, _elem: ElementRef<HTMLElement>);
    setDefaultTexts(translation: KeyValueObject): void;
    writeValue(value: number): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    ngOnInit(): void;
    observerOnClick(value: number): void;
    onEnter(value: number): void;
    reset(): void;
    private _updateValue;
    private _getValueInRange;
    private _isNotDisabled;
    private _updateState;
    private _createArrayList;
    private _getFillValue;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRatingComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRatingComponent, "adapt-rating", never, { "readonly": "readonly"; "size": "size"; "disabled": "disabled"; "tooltip": "tooltip"; "maxValue": "maxValue"; "rate": "rate"; }, { "activeRateChanged": "active-rate-changed"; "hoverChanged": "hover-changed"; "leaveChanged": "leave-changed"; }, never, never>;
}
