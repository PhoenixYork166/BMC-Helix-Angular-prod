import { ChangeDetectorRef, ElementRef, EventEmitter, Injector, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { ControlValueAccessor, FormControl, Validators } from '@angular/forms';
import { BehaviorSubject } from 'rxjs';
import moment from 'moment-es6';
import { AdaptDeviceDetectionService, AdaptRxControlLabelTooltip, AdaptTranslateService, FormComponent, KeyValueObject, PlacementArray } from '@bmc-ux/adapt-angular';
import { Clock2FaceUnit, Datetime2TextsModel } from './datetime2.model';
import { AdaptRadarService } from '@bmc-ux/adapt-radar';
import * as i0 from "@angular/core";
export declare class AdaptDatetime2Component extends FormComponent implements ControlValueAccessor, OnInit, OnDestroy, Validators {
    private _injector;
    private _deviceDetectorService;
    private _renderer;
    private _changeDetectorRef;
    private _ngZone;
    static DT_ID: number;
    _self: any;
    inputControlValue: string;
    dropdownAutoClose: any;
    timeModeState$: BehaviorSubject<boolean>;
    clockFaceState$: BehaviorSubject<Clock2FaceUnit>;
    isLastWizardStep: boolean;
    isMobile: boolean;
    isIE: boolean;
    twoRowsWrap: boolean;
    threeRowsWrap: boolean;
    defaultTexts: Datetime2TextsModel;
    defaultErrors: {
        invalidValueName: string;
        invalidValue: string;
        disabledDateName: string;
        disabledDate: string;
        disabledTimeName: string;
        disabledTime: string;
    };
    /**
     * Label icon with a tooltip or popover
     */
    tooltipConfig: AdaptRxControlLabelTooltip;
    /**
     * FormControl (for Reactive Forms)
     */
    formControl: FormControl;
    /**
     * FormControl id
     */
    id: string;
    /**
     * FormControl name
     */
    name: string;
    /**
     * Datetime input label
     */
    label: string;
    /**
     * Datetime input placeholder
     */
    placeholder: string;
    /**
     * DateTime inline mode
     */
    inline: boolean;
    /**
     * DateTime inline light color scheme mode
     */
    inlineLight: boolean;
    /**
     * DateTime inline small size mode
     */
    inlineSize: string;
    /**
     * Picker initial dateTime value
     */
    initialValue: moment.Moment;
    /**
     * Class for datetime input
     */
    inputControlClass: string;
    /**
     * Class for datetime dropdown
     */
    dropdownClass: string;
    /**
     * Date input format
     */
    dateInputFormat: string;
    /**
     * Time input format without seconds
     */
    timeInputFormat: string;
    /**
     * Time input format with seconds
     */
    timeInputLongFormat: string;
    /**
     * Toggle time picker
     */
    timePicker: boolean;
    /**
     * Use only the time picker flag
     */
    timeOnly: boolean;
    /**
     * Use only the month and year picker flag
     */
    monthAndYearOnly: boolean;
    monthFirst: boolean;
    /**
     * Use seconds in time picker
     */
    seconds: boolean;
    /**
     * The minimal available time value
     */
    timeMin: moment.Moment;
    /**
     * The maximum available time value
     */
    timeMax: moment.Moment;
    /**
     * Filter is disabling dates in the calendar
     */
    dateFilter: (date: moment.Moment, formControl?: FormControl) => boolean;
    /**
     * Use disabled style for the control if [readonly]=true
     */
    disabledStyleForReadonlyState: boolean;
    /**
     * Picker placement
     */
    placement: PlacementArray;
    /**
     * Append to body trigger
     */
    appendToBody: boolean;
    /**
     * Headings for dateTime controls
     */
    headings: Datetime2TextsModel;
    /**
     * Prevent choosing dateTime value step-by-step
     */
    preventWizard: boolean;
    /**
     * The format for parsing DateTime value when it has 'string' type
     */
    writeValueParseFormat: string;
    ariaDescribedBy: string | null;
    /**
     * Event on picker open
     */
    readonly open: EventEmitter<any>;
    /**
     * Event on picker close
     */
    readonly close: EventEmitter<any>;
    /**
     * Event on ngModel change
     */
    readonly valueChange: EventEmitter<moment.Moment | null>;
    /**
     * FormControl focus implementation
     */
    readonly focus: EventEmitter<any>;
    /**
     * FormControl blur implementation
     */
    readonly blur: EventEmitter<any>;
    inputControlRef: any;
    dropdownRef: any;
    calendarContainer: ElementRef;
    nextBtn: ElementRef;
    cancelBtn: ElementRef;
    clearBtn: ElementRef;
    private _onTouchedCallback;
    private _onChangeCallback;
    private _dtDropdownOpenChangeSub;
    private _model?;
    private _previousModel?;
    get value(): moment.Moment | null;
    set value(v: moment.Moment | null);
    constructor(_injector: Injector, _deviceDetectorService: AdaptDeviceDetectionService, _renderer: Renderer2, _changeDetectorRef: ChangeDetectorRef, _ngZone: NgZone, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    ngOnDestroy(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    /**
     * Datetime wizard
     */
    goToNextStep(): void;
    /**
     * Select date/time on picker
     */
    selectDateTime(v: moment.Moment): void;
    /**
     * Close picker and set previous model value
     */
    pickerCloseAndCancel(): void;
    /**
     * Close picker and use current value
     */
    pickerCloseAndApply(): void;
    /**
     * Clear model value
     */
    pickerClearAll(): void;
    /**
     * Input control (input) handler
     */
    inputControlWrite(v: any): void;
    /**
     * Input control (click) handler
     */
    inputControlClick(): void;
    /**
     * Input control (blur) handler
     */
    inputControlBlur(): void;
    /**
     * Dropdown mousedown handler
     */
    dropdownMouseDown(): void;
    /**
     * Open picker
     */
    /**
     * Time mode change handler
     */
    timeModeChange(v: boolean): void;
    /**
     * Close picker
     */
    /**
     * Clock face change handler
     */
    clockFaceChange(v: Clock2FaceUnit): void;
    writeValue(v: any): void;
    /**
     * Parse and format input control value
     */
    registerOnChange(fn: any): void;
    /**
     * Get formatted [timeMin] prop value
     */
    registerOnTouched(fn: any): void;
    /**
     * Get formatted [timeMax] prop value
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * Get format for input control value
     */
    validate(c: FormControl): {
        dateError: {
            name: string;
            text: string;
        };
    };
    private _truncateBtn;
    private _wrapButtons;
    private _openPicker;
    private _closePicker;
    /**
     * Get time format
     */
    private _blurInput;
    private _inputControlFormatting;
    private _getFormattedStartTime;
    private _getFormattedEndTime;
    private _getInputControlFormat;
    private _tryParseToMoment;
    private _getTimeFormat;
    private _getNormalizedModelValue;
    /**
     * Wizard's last step checking
     */
    private _checkIfLastWizardStep;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptDatetime2Component, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptDatetime2Component, "adapt-datetime2", never, { "formControl": "formControl"; "id": "id"; "name": "name"; "label": "label"; "placeholder": "placeholder"; "inline": "inline"; "inlineLight": "inlineLight"; "inlineSize": "inlineSize"; "initialValue": "initialValue"; "inputControlClass": "inputControlClass"; "dropdownClass": "dropdownClass"; "dateInputFormat": "dateInputFormat"; "timeInputFormat": "timeInputFormat"; "timeInputLongFormat": "timeInputLongFormat"; "timePicker": "timePicker"; "timeOnly": "timeOnly"; "monthAndYearOnly": "monthAndYearOnly"; "monthFirst": "monthFirst"; "seconds": "seconds"; "timeMin": "timeMin"; "timeMax": "timeMax"; "dateFilter": "dateFilter"; "disabledStyleForReadonlyState": "disabledStyleForReadonlyState"; "placement": "placement"; "appendToBody": "appendToBody"; "headings": "headings"; "preventWizard": "preventWizard"; "writeValueParseFormat": "writeValueParseFormat"; "ariaDescribedBy": "aria-describedby"; }, { "open": "open"; "close": "close"; "valueChange": "valueChange"; "focus": "focus"; "blur": "blur"; }, never, never>;
}
