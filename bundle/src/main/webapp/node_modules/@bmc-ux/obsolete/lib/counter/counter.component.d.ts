import { AfterViewInit, ElementRef, EventEmitter, Injector, OnInit, Renderer2 } from '@angular/core';
import { ControlValueAccessor, FormControl, Validator } from '@angular/forms';
import { AnimationEvent } from '@angular/animations';
import { AdaptDeviceDetectionService, AdaptRxControlLabelTooltip, AdaptTooltipDirective, AdaptTranslateService, CounterOperations, FormComponent, KeyValueObject, ValidationError } from '@bmc-ux/adapt-angular';
import { AdaptRadarService } from '@bmc-ux/adapt-radar';
import * as i0 from "@angular/core";
export declare class AdaptCounterComponent extends FormComponent implements ControlValueAccessor, Validator, AfterViewInit, OnInit {
    private _renderer;
    private _injector;
    private _deviceDetection;
    static id: number;
    context: AdaptCounterComponent;
    pattern: RegExp;
    counterValue: number | string;
    animateArrowUp: boolean;
    animateArrowDown: boolean;
    isCompact: boolean;
    increaseAnimationDone: boolean;
    decreaseAnimationDone: boolean;
    focused: boolean;
    isMobile: boolean;
    isSpinnerMobile: boolean;
    precision: number;
    defaultErrors: {
        increase?: string;
        decrease?: string;
        rangeName?: string;
        range?: string;
        invalidName?: string;
        invalid?: string;
    };
    /**
     * Label icon with a tooltip or popover
     */
    tooltipConfig: AdaptRxControlLabelTooltip;
    id: string;
    testID: string;
    name: string;
    prefix: string;
    suffix: string;
    label: string;
    set max(value: number | string);
    get max(): number | string;
    set min(value: number | string);
    get min(): number | string;
    allowScientific: boolean;
    step: number;
    width: string;
    formControl: FormControl;
    size: string;
    preventInnerValidation: boolean;
    set allowIntegerOnly(value: boolean);
    get allowIntegerOnly(): boolean;
    ariaDescribedBy: string | null;
    readonly focus: EventEmitter<void>;
    readonly blur: EventEmitter<void>;
    readonly valueChanged: EventEmitter<number | string>;
    containerEl: ElementRef<HTMLDivElement>;
    inputEl: ElementRef<HTMLInputElement>;
    prefixEl: ElementRef<HTMLSpanElement>;
    suffixEl: ElementRef<HTMLSpanElement>;
    mobileActionsContainer: ElementRef<HTMLElement>;
    get hostClasses(): string;
    get isErrorExist(): boolean;
    get customClass(): string;
    get inputSize(): number;
    get value(): number | string;
    private get _isTruncatedPrefix();
    private get _isTruncatedSuffix();
    private _patterns;
    private _numberPatters;
    private _minWidthToMobile;
    private _value;
    private _integerOnly;
    private _max;
    private _min;
    private _isValidNumber;
    private _removeDocumentClickListener;
    private readonly currentLocale;
    constructor(_renderer: Renderer2, _injector: Injector, _deviceDetection: AdaptDeviceDetectionService, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarService, _elem: ElementRef<HTMLElement>);
    propagateChange: () => void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    writeValue(value: number | string): void;
    registerOnChange(fn: () => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    checkForMobileSpinners(): void;
    increaseCounter(animationNeeded?: boolean): void;
    decreaseCounter(animationNeeded?: boolean): void;
    increaseMobile(): void;
    decreaseMobile(): void;
    increase(): void;
    decrease(): void;
    calculateNewValue(operation: CounterOperations): number;
    increaseAllowed(): boolean;
    decreaseAllowed(): boolean;
    validate(c: FormControl): KeyValueObject<ValidationError>;
    onInput(input: any): void;
    onKeyPress(e: KeyboardEvent): void;
    onFocus(): void;
    onBlur(): void;
    onKeyDown(e: KeyboardEvent): void;
    toggleTooltip(tooltip: AdaptTooltipDirective, el: HTMLElement): void;
    onAnimationIncreaseStart(event: AnimationEvent): void;
    onAnimationIncreaseDone(event: AnimationEvent): void;
    onAnimationDecreaseStart(event: AnimationEvent): void;
    onAnimationDecreaseDone(event: AnimationEvent): void;
    private _setValue;
    private _onTouchedCallback;
    /**
     * Opens the mobile spinners
     */
    private _openMobileSpinners;
    /**
     * Closes the mobile spinners
     */
    private _closeMobileSpinners;
    private _isSafeNumber;
    private _toFixed;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptCounterComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptCounterComponent, "adapt-counter", never, { "id": "id"; "testID": "testID"; "name": "name"; "prefix": "prefix"; "suffix": "suffix"; "label": "label"; "max": "max"; "min": "min"; "allowScientific": "allowScientific"; "step": "step"; "width": "width"; "formControl": "formControl"; "size": "size"; "preventInnerValidation": "preventInnerValidation"; "allowIntegerOnly": "allowIntegerOnly"; "ariaDescribedBy": "aria-describedby"; }, { "focus": "focus"; "blur": "blur"; "valueChanged": "valueChanged"; }, never, never>;
}
