import { AfterViewInit, ElementRef, EventEmitter, Injector, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';
import { AnimationBuilder } from '@angular/animations';
import { Directionality } from '@angular/cdk/bidi';
import { HttpErrorResponse } from '@angular/common/http';
import { FormControl } from '@angular/forms';
import { AdaptRxControlLabelTooltip, AdaptTranslateService, FileErrors, FileManager, FileObj, FileSystemEntry, FormComponent, Icon, IconManager, KeyValueObject, StartFileUploadingEvent, UploaderFeedbackMessage, UploaderMode, UploaderTexts } from '@bmc-ux/adapt-angular';
import { AdaptRadarService } from '@bmc-ux/adapt-radar';
import * as i0 from "@angular/core";
export declare class AdaptSingleUploaderComponent extends FormComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {
    private fileManager;
    private iconManager;
    private _renderer;
    private _elRef;
    private _dir;
    private _animationBuilder;
    private _injector;
    protected _adaptRadarService: AdaptRadarService;
    uploaderTextsDefault: UploaderTexts;
    /**
     * Label icon with a tooltip or popover
     */
    tooltipConfig: AdaptRxControlLabelTooltip;
    fileInput: ElementRef;
    dropEnter: ElementRef;
    dnd: ElementRef;
    drop: ElementRef;
    droppableAreaBlock: ElementRef;
    /**
     * Unique id of the element.
     */
    id: string;
    mode: UploaderMode;
    enableDnD: boolean;
    allowedTypes: string[];
    forbiddenTypes: string[];
    label: string;
    url: string;
    deleteUrl: string;
    icons: KeyValueObject<Icon>;
    allowDeletion: boolean;
    texts: UploaderTexts;
    showFile: FileObj;
    fileErrors: FileErrors;
    customErrors: boolean;
    droppableArea: HTMLElement;
    allowDrop: boolean;
    name: string;
    /**
     * FormControl (for Reactive Forms)
     */
    customFormControl: FormControl;
    readonly beforeFileDialogOpen: EventEmitter<null>;
    readonly afterFileDialogOpen: EventEmitter<null>;
    readonly beforeFileAdded: EventEmitter<(File | FileSystemEntry)[]>;
    readonly afterFileAdded: EventEmitter<(File | FileSystemEntry)[]>;
    readonly startFileUploading: EventEmitter<StartFileUploadingEvent>;
    readonly endFileUploading: EventEmitter<FileObj>;
    readonly errorFileUploading: EventEmitter<{
        file: FileObj;
        error: HttpErrorResponse;
    }>;
    readonly finishedFileUploading: EventEmitter<FileObj[]>;
    readonly removedFileFromQueue: EventEmitter<FileObj>;
    readonly deletedFile: EventEmitter<FileObj>;
    readonly cancelUploading: EventEmitter<FileObj[]>;
    /**
     * Event on ngModel change
     */
    readonly valueChange: EventEmitter<FileObj[] | null>;
    readonly focus: EventEmitter<any>;
    readonly blur: EventEmitter<any>;
    context: AdaptSingleUploaderComponent;
    statusMessages: UploaderFeedbackMessage[];
    allowDuplicates: boolean;
    filesCount: number;
    suppressParallel: boolean;
    isDragOverMask: boolean;
    isRtl: boolean;
    isUploadLimitExceed: boolean;
    private _onDragEnter;
    private _onDragOver;
    private _onDragLeave;
    private _onDragDrop;
    private _droppable;
    private _animationPlayers;
    private _isTouched;
    private _chunkSize;
    private _destroyed$;
    get chunkSize(): string;
    set chunkSize(value: string);
    private _maxFileSize;
    get maxFileSize(): string;
    set maxFileSize(value: string);
    get files(): FileObj[];
    get hostClasses(): string;
    get isErrorExist(): boolean;
    get isWarningExist(): boolean;
    set value(v: FileObj);
    get value(): FileObj;
    private _value;
    constructor(fileManager: FileManager, iconManager: IconManager, _renderer: Renderer2, _elRef: ElementRef, _dir: Directionality, _animationBuilder: AnimationBuilder, _injector: Injector, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarService);
    ngOnInit(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    writeValue(value: FileObj): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    validate(): null;
    setDisabledState(isDisabled: boolean): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    onChangeFileInput(event: Event): void;
    initFileErrors(): void;
    addDragEvents(): void;
    removedFromQueue(file: FileObj): void;
    fileDeleted(file: FileObj): void;
    ondragEnter(e: DragEvent): void;
    ondragOver(e: DragEvent): void;
    ondragLeave(e: DragEvent): void;
    ondragDrop(e: DragEvent): void;
    /**
     * Opens file dialog window for file selection, fires appropriate events
     */
    openFileDialog(): void;
    startUploading(): void;
    ngOnDestroy(): void;
    clearWarningMessages(): void;
    /**
     * Adds files to uploader service
     */
    private addFiles;
    private _updateStorageWithUploadedFile;
    private dataHasFiles;
    private _preventDefault;
    private _animateDndChange;
    private _createAnimationPlayers;
    private _componentEmptyState;
    private _onTouchedCallback;
    private _markComponentTouched;
    private _propagateChanges;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptSingleUploaderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptSingleUploaderComponent, "adapt-single-uploader", never, { "id": "id"; "mode": "mode"; "enableDnD": "enableDnD"; "allowedTypes": "allowedTypes"; "forbiddenTypes": "forbiddenTypes"; "label": "label"; "url": "url"; "deleteUrl": "deleteUrl"; "icons": "icons"; "allowDeletion": "allowDeletion"; "texts": "texts"; "showFile": "showFile"; "fileErrors": "fileErrors"; "customErrors": "customErrors"; "droppableArea": "droppableArea"; "allowDrop": "allowDrop"; "name": "name"; "customFormControl": "customFormControl"; "chunkSize": "chunkSize"; "maxFileSize": "maxFileSize"; }, { "beforeFileDialogOpen": "beforeFileDialogOpen"; "afterFileDialogOpen": "afterFileDialogOpen"; "beforeFileAdded": "beforeFileAdded"; "afterFileAdded": "afterFileAdded"; "startFileUploading": "startFileUploading"; "endFileUploading": "endFileUploading"; "errorFileUploading": "errorFileUploading"; "finishedFileUploading": "finishedFileUploading"; "removedFileFromQueue": "removedFileFromQueue"; "deletedFile": "deletedFile"; "cancelUploading": "cancelUploading"; "valueChange": "valueChange"; "focus": "focus"; "blur": "blur"; }, never, never>;
}
