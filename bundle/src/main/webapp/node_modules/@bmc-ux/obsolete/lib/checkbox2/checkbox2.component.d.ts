import { ChangeDetectorRef, ElementRef, EventEmitter, Injector, OnInit, Renderer2 } from '@angular/core';
import { AdaptRadarAngularCustomEventName, AdaptTranslateService, FormComponent } from '@bmc-ux/adapt-angular';
import { AdaptRadarService } from '@bmc-ux/adapt-radar';
import * as i0 from "@angular/core";
export declare class AdaptCheckbox2Component extends FormComponent implements OnInit {
    private _element;
    private _renderer;
    private _changeDetectorRef;
    context: AdaptCheckbox2Component;
    /**
     * The host element of the component
     */
    _el: HTMLElement;
    /**
     * An unique id for each checkbox/switcher
     */
    _uniqueId: string;
    _label: string;
    class: string;
    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */
    id: string;
    /** Name value will be applied to the input element if present */
    name: string | null;
    /** The tabindex attribute of the native input element */
    tabindex: number;
    stopPropagation: boolean;
    /** The value attribute of the native input element */
    value: string;
    /**
     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will
     * take precedence so this may be omitted.
     */
    ariaLabel: string;
    /**
     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element
     */
    ariaLabelledby: string | null;
    /**
     * Control [aria-describedby] attribute text
     */
    ariaDescribedBy: string;
    /** the displayMessage attribute allows to show the additional info for the user */
    displayMessage: string;
    /** the toggleMessage attribute will toggle the additional messages */
    toggleMessage: boolean;
    readonly focus: EventEmitter<any>;
    readonly blur: EventEmitter<any>;
    /** Event emitted when the switcher value changes. */
    readonly change: EventEmitter<boolean>;
    /** Event emitted when the checkbox's `indeterminate` value changes. */
    readonly indeterminateChange: EventEmitter<boolean>;
    private _onTouchedCallback;
    private _onChangeCallback;
    get hostClasses(): string;
    /** The input/switcher element's value. */
    get checked(): boolean;
    set checked(checked: boolean);
    get indeterminate(): boolean;
    set indeterminate(indeterminate: boolean);
    get inputId(): string;
    get nativeElement(): HTMLElement;
    /**
     * The label text of the checkbox component
     */
    get label(): string;
    set label(v: string);
    /**
     * Private variables of checkbox/switcher component
     */
    private _checked;
    /**
     * An indeterminate state of checkbox component - by default is false;
     */
    private _indeterminate;
    constructor(injector: Injector, _element: ElementRef, _renderer: Renderer2, _changeDetectorRef: ChangeDetectorRef, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarService, _entityName: AdaptRadarAngularCustomEventName);
    ngOnInit(): void;
    validate(): null;
    /**
     *
     * @returns "true" | "false" | "mixed"
     */
    _getAriaChecked(): 'true' | 'false' | 'mixed';
    /**
     * interface ControlValueAccessor
     * writeValue(obj: any): void
     */
    writeValue(checked: any): void;
    /**
     * interface ControlValueAccessor
     * registerOnChange(fn: any): void
     */
    registerOnChange(fn: any): void;
    /**
     * interface ControlValueAccessor
     * registerOnTouched(fn: any): void
     */
    registerOnTouched(fn: any): void;
    /**
     * interface ControlValueAccessor
     * setDisabledState(isDisabled: boolean)?: void
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * Set focus state of the input changes
     */
    onFocus(): void;
    /**
     * Remove focus state of the input changes
     */
    onBlur(): void;
    /**
     * Toggle the state of input element on user action
     */
    onInputClick(e: Event): void;
    onInteractionEvent(e: Event): void;
    /**
     * Toggle checked/unchecked states in checkbox/switcher component
     */
    private _toggle;
    private _updateCheckedValue;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptCheckbox2Component, [null, null, null, null, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptCheckbox2Component, "adapt-checkbox2, div[adapt-checkbox2], adapt-checkbox", never, { "class": "class"; "id": "id"; "name": "name"; "tabindex": "tabindex"; "stopPropagation": "stopPropagation"; "value": "value"; "ariaLabel": "aria-label"; "ariaLabelledby": "aria-labelledby"; "ariaDescribedBy": "ariaDescribedBy"; "displayMessage": "displayMessage"; "toggleMessage": "toggleMessage"; "indeterminate": "indeterminate"; "label": "label"; }, { "focus": "focus"; "blur": "blur"; "change": "change"; "indeterminateChange": "indeterminateChange"; }, never, [".checkbox-before", ".checkbox-after"]>;
}
