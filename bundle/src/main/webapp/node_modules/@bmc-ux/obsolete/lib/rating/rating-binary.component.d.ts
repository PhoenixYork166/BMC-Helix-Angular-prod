import { ElementRef, EventEmitter, OnChanges, Renderer2 } from '@angular/core';
import { AdaptTranslateService, KeyValueObject } from '@bmc-ux/adapt-angular';
import { AdaptRadarGenericDirective, AdaptRadarService } from '@bmc-ux/adapt-radar';
import * as i0 from "@angular/core";
export declare class RatingBinaryTypeError extends Error {
    constructor(type: string);
}
export declare class AdaptRatingBinaryComponent extends AdaptRadarGenericDirective implements OnChanges {
    private _element;
    private _renderer;
    private ts;
    toggle: boolean;
    showMessage: string;
    showBtnValue: string;
    savedValue: number;
    quotesLeft: string;
    quotesRight: string;
    btnTextLeft: string;
    btnTextRight: string;
    undoButton: string;
    readonly onChangeValue: EventEmitter<{
        value: string | number;
    }>;
    get type(): 'icon' | 'text' | 'count';
    set type(t: 'icon' | 'text' | 'count');
    get likeMessage(): string;
    set likeMessage(message: string);
    get dislikeMessage(): string;
    set dislikeMessage(message: string);
    get textMessage(): string;
    set textMessage(v: string);
    get value(): number;
    set value(v: number);
    private _type;
    private _likeMessage;
    private _dislikeMessage;
    private _textMessage;
    private _value;
    constructor(_element: ElementRef, _renderer: Renderer2, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarService);
    setDefaultTexts(translation: KeyValueObject): void;
    handleClick(e: Event, type?: string): void;
    changeValue(action: string): void;
    cancelValue(e: MouseEvent): void;
    reset(): void;
    ngOnChanges(): void;
    private _setHostStyles;
    private _toggleState;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRatingBinaryComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRatingBinaryComponent, "adapt-rating-binary", never, { "btnTextLeft": "btnTextLeft"; "btnTextRight": "btnTextRight"; "undoButton": "undoButton"; "type": "type"; "likeMessage": "likeMessage"; "dislikeMessage": "dislikeMessage"; "textMessage": "textMessage"; "value": "value"; }, { "onChangeValue": "change-value"; }, never, ["*"]>;
}
