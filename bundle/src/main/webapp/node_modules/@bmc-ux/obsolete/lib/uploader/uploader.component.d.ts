import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, Injector, IterableDiffers, OnChanges, OnDestroy, OnInit, QueryList, Renderer2, SimpleChanges } from '@angular/core';
import { AnimationBuilder } from '@angular/animations';
import { Directionality } from '@angular/cdk/bidi';
import { HttpErrorResponse } from '@angular/common/http';
import { FormControl } from '@angular/forms';
import { AdaptRxControlLabelTooltip, AdaptTranslateService, AdaptUploaderItemComponent, FileErrors, FileManager, FileObj, FileSystemEntry, FormComponent, Icon, IconManager, KeyValueObject, StartFileUploadingEvent, UploaderFeedbackMessage, UploaderMode, UploaderSelectionMode, UploaderTexts } from '@bmc-ux/adapt-angular';
import { AdaptRadarService } from '@bmc-ux/adapt-radar';
import * as i0 from "@angular/core";
export declare class AdaptUploaderComponent extends FormComponent implements OnInit, OnDestroy, AfterViewInit, OnChanges {
    private fileManager;
    private iconService;
    private _renderer;
    private _elRef;
    private _dir;
    private _animationBuilder;
    private _injector;
    private _differs;
    private cd;
    protected _adaptRadarService: AdaptRadarService;
    uploaderTextsDefault: UploaderTexts;
    /**
     * Label icon with a tooltip or popover
     */
    tooltipConfig: AdaptRxControlLabelTooltip;
    fileInput: ElementRef;
    fileList: ElementRef;
    dropEnter: ElementRef;
    dnd: ElementRef;
    drop: ElementRef;
    droppableAreaBlock: ElementRef;
    filesList: QueryList<AdaptUploaderItemComponent>;
    mode: UploaderMode;
    selectionMode: UploaderSelectionMode;
    enableDnD: boolean;
    enableFileDialog: boolean;
    allowedTypes: string[];
    forbiddenTypes: string[];
    suppressParallel: boolean;
    filesCount: number;
    allowDuplicates: boolean;
    label: string;
    showUploadFolderAlert: boolean;
    url: string;
    deleteUrl: string;
    icons: KeyValueObject<Icon>;
    visibleFiles: number;
    reusable: boolean;
    indeterminateFileLoader: boolean;
    ariaDescribedBy: string | null;
    allowDeletion: boolean;
    texts: UploaderTexts;
    get showFiles(): FileObj[];
    set showFiles(v: FileObj[]);
    fileErrors: FileErrors;
    droppableArea: HTMLElement;
    customErrors: boolean;
    name: string;
    /**
     * FormControl (for Reactive Forms)
     */
    customFormControl: FormControl;
    readonly beforeFileDialogOpen: EventEmitter<null>;
    readonly afterFileDialogOpen: EventEmitter<null>;
    readonly beforeFilesAdded: EventEmitter<(File | FileSystemEntry)[]>;
    readonly afterFilesAdded: EventEmitter<(File | FileSystemEntry)[]>;
    readonly dropArea: EventEmitter<null>;
    readonly dragOver: EventEmitter<null>;
    readonly startFileUploading: EventEmitter<StartFileUploadingEvent>;
    readonly endFileUploading: EventEmitter<FileObj>;
    readonly errorFileUploading: EventEmitter<{
        file: FileObj;
        error: HttpErrorResponse;
    }>;
    readonly finishedFileUploading: EventEmitter<FileObj[]>;
    readonly removedFileFromQueue: EventEmitter<FileObj>;
    readonly deletedFile: EventEmitter<FileObj>;
    readonly cancelUploading: EventEmitter<FileObj[]>;
    /**
     * Event on ngModel change
     */
    readonly valueChange: EventEmitter<FileObj[] | null>;
    readonly focus: EventEmitter<any>;
    readonly blur: EventEmitter<any>;
    context: AdaptUploaderComponent;
    id: string;
    statusMessages: UploaderFeedbackMessage[];
    uploaded: FileObj[];
    cloudColor: string;
    folderUploadingForbiddenMsg: string;
    isFoldersNotAllowed: boolean;
    readFolder: boolean;
    currentFolder: string;
    isDragOverMask: boolean;
    isRtl: boolean;
    isUploadLimitExceed: boolean;
    private _droppable;
    private _alreadyUsed;
    private _onDragEnter;
    private _onDragOver;
    private _onDragLeave;
    private _onDragDrop;
    private _positioned;
    private _defaultCloudColor;
    private _activeCloudColor;
    private _animationPlayers;
    private _isTouched;
    private _filesListDiffer;
    private _showFiles;
    private _destroyed$;
    get files(): FileObj[];
    get maxFileCountUploaded(): boolean;
    get hasMaxFileCountSelected(): boolean;
    get selectFilesButtonTooltip(): string;
    get isDisabledSelectBtn(): boolean;
    get isUploadingProcess(): boolean;
    get filesAddedCount(): string;
    get filesUploadedCount(): string;
    get directorySearch(): string;
    private _chunkSize;
    get chunkSize(): string;
    set chunkSize(value: string);
    private _maxFileSize;
    get maxFileSize(): string;
    set maxFileSize(value: string);
    get hostClasses(): string;
    get isErrorExist(): boolean;
    get isWarningExist(): boolean;
    get uploadLimitExceed(): string;
    set value(v: FileObj[]);
    get value(): FileObj[];
    private _value;
    constructor(fileManager: FileManager, iconService: IconManager, _renderer: Renderer2, _elRef: ElementRef, _dir: Directionality, _animationBuilder: AnimationBuilder, _injector: Injector, _differs: IterableDiffers, cd: ChangeDetectorRef, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarService);
    ngOnInit(): void;
    setDefaultTexts(translation: KeyValueObject): void;
    setFilesList(files: FileObj[]): void;
    writeValue(value: FileObj[]): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    validate(): null;
    setDisabledState(isDisabled: boolean): void;
    ngAfterViewInit(): void;
    addDragEvents(): void;
    initFileErrors(): void;
    initTextsValues(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    cancelAllUploads(): void;
    ondragEnter(e: DragEvent): void;
    ondragOver(e: DragEvent): void;
    ondragLeave(e: DragEvent): void;
    ondragDrop(e: DragEvent): void;
    resolveDroppedItems(items: DataTransferItem[]): Promise<FileSystemEntry[]>;
    /**
     * Manages ability to select files via file dialog window
     */
    disableFileDialog(): boolean;
    /**
     * Allows/Forbids to select multiple files for uploading
     */
    isMultipleAllowed(): boolean;
    /**
     * Opens file dialog window for files selection, fires appropriate events
     */
    openFileDialog(isDir: boolean): void;
    onChangeFileInput(e: Event): void;
    isManualMode(): boolean;
    allowFileUploading(): boolean;
    allowDirUploading(): boolean;
    fileMode(): UploaderSelectionMode.File;
    dirMode(): UploaderSelectionMode.Directory;
    mixMode(): UploaderSelectionMode.Both;
    allowedUploading(): boolean;
    startUploading(): void;
    removedFromQueue(file: FileObj): void;
    fileDeleted(file: FileObj): void;
    clearWarningMessages(): void;
    /**
     * Adds files to uploader service
     */
    private addFiles;
    private _updateStorageWithUploadedFiles;
    /**
     * Checks if the dragged data has files
     */
    private dataHasFiles;
    private getFile;
    private getDirectory;
    private addFilesEmission;
    private _preventDefault;
    private _animateDndChange;
    private _createAnimationPlayers;
    private _componentEmptyState;
    private _onTouchedCallback;
    private _markComponentTouched;
    private _propagateChanges;
    private _updateUploadedFiles;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptUploaderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptUploaderComponent, "adapt-uploader", never, { "mode": "mode"; "selectionMode": "selectionMode"; "enableDnD": "enableDnD"; "enableFileDialog": "enableFileDialog"; "allowedTypes": "allowedTypes"; "forbiddenTypes": "forbiddenTypes"; "suppressParallel": "suppressParallel"; "filesCount": "filesCount"; "allowDuplicates": "allowDuplicates"; "label": "label"; "showUploadFolderAlert": "showUploadFolderAlert"; "url": "url"; "deleteUrl": "deleteUrl"; "icons": "icons"; "visibleFiles": "visibleFiles"; "reusable": "reusable"; "indeterminateFileLoader": "indeterminateFileLoader"; "ariaDescribedBy": "ariaDescribedBy"; "allowDeletion": "allowDeletion"; "texts": "texts"; "showFiles": "showFiles"; "fileErrors": "fileErrors"; "droppableArea": "droppableArea"; "customErrors": "customErrors"; "name": "name"; "customFormControl": "customFormControl"; "chunkSize": "chunkSize"; "maxFileSize": "maxFileSize"; }, { "beforeFileDialogOpen": "beforeFileDialogOpen"; "afterFileDialogOpen": "afterFileDialogOpen"; "beforeFilesAdded": "beforeFilesAdded"; "afterFilesAdded": "afterFilesAdded"; "dropArea": "dropArea"; "dragOver": "dragOver"; "startFileUploading": "startFileUploading"; "endFileUploading": "endFileUploading"; "errorFileUploading": "errorFileUploading"; "finishedFileUploading": "finishedFileUploading"; "removedFileFromQueue": "removedFileFromQueue"; "deletedFile": "deletedFile"; "cancelUploading": "cancelUploading"; "valueChange": "valueChange"; "focus": "focus"; "blur": "blur"; }, never, ["*"]>;
}
