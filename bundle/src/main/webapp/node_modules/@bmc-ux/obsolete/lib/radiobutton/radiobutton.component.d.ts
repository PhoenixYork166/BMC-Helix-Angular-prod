import { ChangeDetectorRef, ElementRef, EventEmitter, Injector, OnInit } from '@angular/core';
import { ControlValueAccessor, Validator } from '@angular/forms';
import { AdaptTranslateService, FormComponent } from '@bmc-ux/adapt-angular';
import { AdaptRadarService } from '@bmc-ux/adapt-radar';
import * as i0 from "@angular/core";
export declare class AdaptRadioButtonComponent extends FormComponent implements OnInit, ControlValueAccessor, Validator {
    private _changeDetectorRef;
    context: any;
    checked: boolean;
    focused: boolean;
    isValid: boolean;
    /** The value attribute of the native input element */
    value: string;
    /** Name value will be applied to the input element if present */
    name: string | null;
    /** The tabindex attribute of the native input element */
    tabindex: number;
    label: string;
    styleClass: string;
    class: string;
    /**
     * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will
     * take precedence so this may be omitted.
     */
    ariaLabel: string;
    /**
     * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element
     */
    ariaLabelledby: string | null;
    /**
     * Control [aria-describedby] attribute text
     */
    ariaDescribedBy: string;
    readonly onClick: EventEmitter<any>;
    readonly focus: EventEmitter<any>;
    readonly blur: EventEmitter<any>;
    /**
     * Get an input element of radiobutton
     */
    inputElement: ElementRef;
    private _uniqueId;
    /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */
    testID: string;
    id: string;
    get inputId(): string;
    get hostClasses(): string;
    private _onTouchedCallback;
    private _onChangeCallback;
    constructor(injector: Injector, _changeDetectorRef: ChangeDetectorRef, ts: AdaptTranslateService, _adaptRadarService: AdaptRadarService, _elem: ElementRef<HTMLElement>);
    ngOnInit(): void;
    /**
     * Add a focus state on key-down/tabbing
     */
    onFocus(): void;
    /**
     * Remove a focus state on blur event
     */
    onBlur(): void;
    /**
     * The method from an Abstract class
     */
    validate(): null;
    onInputClick(e: Event): void;
    /**
     * interface ControlValueAccessor
     * writeValue(obj: any): void
     */
    writeValue(v: any): void;
    /**
     * interface ControlValueAccessor
     * registerOnChange(fn: any): void
     */
    registerOnChange(fn: any): void;
    /**
     * interface ControlValueAccessor
     * registerOnTouched(fn: any): void
     */
    registerOnTouched(fn: any): void;
    /**
     * interface ControlValueAccessor
     * setDisabledState(isDisabled: boolean)?: void
     */
    setDisabledState(isDisabled: boolean): void;
    _onInputChange(e: Event): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AdaptRadioButtonComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AdaptRadioButtonComponent, "adapt-radiobutton, div[adapt-radiobutton]", never, { "value": "value"; "name": "name"; "tabindex": "tabindex"; "label": "label"; "styleClass": "styleClass"; "class": "class"; "ariaLabel": "aria-label"; "ariaLabelledby": "aria-labelledby"; "ariaDescribedBy": "ariaDescribedBy"; "testID": "testID"; "id": "id"; }, { "onClick": "onClick"; "focus": "focus"; "blur": "blur"; }, never, [".radio-before", ".radio-after"]>;
}
