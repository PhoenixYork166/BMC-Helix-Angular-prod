import { ChangeDetectionStrategy, Component, Inject, Input, Output, PLATFORM_ID, ViewChild, EventEmitter } from "@angular/core";
import * as kjua from "kjua-svg";
import * as i0 from "@angular/core";
export class NgxKjuaComponent {
    constructor(platformId) {
        this.platformId = platformId;
        /**
         * render method
         */
        this.render = "svg";
        /**
         * render pixel-perfect lines
         */
        this.crisp = true;
        /**
         * minimum version= 1..40
         */
        this.minVersion = 1;
        /**
         * error correction level
         */
        this.ecLevel = "L";
        /**
         * size in pixel
         */
        this.size = 200;
        /**
         * pixel-ratio; undefined for devicePixelRatio
         */
        this.ratio = undefined;
        /**
         * code color
         */
        this.fill = "#333";
        /**
         * background color
         */
        this.back = "#fff";
        /**
         * content
         */
        this.text = "";
        /**
         * roundend corners in pc= 0..100
         */
        this.rounded = 0;
        /**
         * quiet zone in modules
         */
        this.quiet = 0;
        /**
         * modes
         */
        this.mode = "plain";
        /**
         * label/image size and pos in pc= 0..100
         */
        this.mSize = 30;
        this.mPosX = 50;
        this.mPosY = 50;
        this.image = undefined;
        this.imageAsCode = false;
        /**
         * label
         */
        this.label = "";
        this.fontname = "sans-serif";
        this.fontcolor = "#333";
        this.fontoutline = true;
        /**
         * If true, rendering is done inside "requestAnimationFrame"-call.
         * Use this if you want to generate more than one code (e.g. batch)
         */
        this.renderAsync = false;
        this.codeFinished = new EventEmitter();
        this.viewInitialized = false;
    }
    ngAfterViewInit() {
        this.viewInitialized = true;
        this.updateView();
    }
    ngOnChanges(changes) {
        if (this.viewInitialized) {
            this.updateView();
        }
    }
    get template() {
        const settings = {
            render: this.render,
            crisp: this.crisp,
            minVersion: this.minVersion,
            ecLevel: this.ecLevel,
            size: this.size,
            ratio: this.ratio,
            fill: this.fill,
            back: this.back,
            text: this.text,
            rounded: this.rounded,
            quiet: this.quiet,
            mode: this.mode,
            mSize: this.mSize,
            mPosX: this.mPosX,
            mPosY: this.mPosY,
            label: this.label,
            fontname: this.fontname,
            fontcolor: this.fontcolor,
            image: this.image,
            fontoutline: this.fontoutline,
            imageAsCode: this.imageAsCode,
            elementId: this.elementId
        };
        return kjua(settings);
    }
    renderCode() {
        this.div.nativeElement.innerHTML = "";
        const node = this.template;
        this.div.nativeElement.appendChild(node);
        this.codeFinished.next(node);
    }
    updateView() {
        this.div.nativeElement.style.width = +this.size;
        this.div.nativeElement.style.height = +this.size;
        if (typeof this.image === "string") {
            const img = new Image();
            img.crossOrigin = "anonymous";
            img.onload = () => {
                if (this.renderAsync) {
                    requestAnimationFrame(() => this.renderCode());
                }
                else {
                    this.renderCode();
                }
            };
            img.src = 'data:image/png;base64,' + this.image;
        }
        else {
            if (this.renderAsync) {
                requestAnimationFrame(() => this.renderCode());
            }
            else {
                this.renderCode();
            }
        }
    }
}
NgxKjuaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.6", ngImport: i0, type: NgxKjuaComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
NgxKjuaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.6", type: NgxKjuaComponent, selector: "ngx-kjua", inputs: { render: "render", crisp: "crisp", minVersion: "minVersion", ecLevel: "ecLevel", size: "size", ratio: "ratio", fill: "fill", back: "back", text: "text", rounded: "rounded", quiet: "quiet", mode: "mode", mSize: "mSize", mPosX: "mPosX", mPosY: "mPosY", image: "image", imageAsCode: "imageAsCode", label: "label", fontname: "fontname", fontcolor: "fontcolor", fontoutline: "fontoutline", renderAsync: "renderAsync", cssClass: "cssClass", elementId: "elementId" }, outputs: { codeFinished: "codeFinished" }, viewQueries: [{ propertyName: "div", first: true, predicate: ["elem"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <div [class]="cssClass" #elem></div>`, isInline: true, styles: [":host{display:block}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.6", ngImport: i0, type: NgxKjuaComponent, decorators: [{
            type: Component,
            args: [{
                    selector: "ngx-kjua",
                    template: `
    <div [class]="cssClass" #elem></div>`,
                    styles: [`
    :host {
      display: block;
    }
  `],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { render: [{
                type: Input
            }], crisp: [{
                type: Input
            }], minVersion: [{
                type: Input
            }], ecLevel: [{
                type: Input
            }], size: [{
                type: Input
            }], ratio: [{
                type: Input
            }], fill: [{
                type: Input
            }], back: [{
                type: Input
            }], text: [{
                type: Input
            }], rounded: [{
                type: Input
            }], quiet: [{
                type: Input
            }], mode: [{
                type: Input
            }], mSize: [{
                type: Input
            }], mPosX: [{
                type: Input
            }], mPosY: [{
                type: Input
            }], image: [{
                type: Input
            }], imageAsCode: [{
                type: Input
            }], label: [{
                type: Input
            }], fontname: [{
                type: Input
            }], fontcolor: [{
                type: Input
            }], fontoutline: [{
                type: Input
            }], renderAsync: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], elementId: [{
                type: Input
            }], codeFinished: [{
                type: Output
            }], div: [{
                type: ViewChild,
                args: ["elem"]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWtqdWEuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2FwcC9tb2R1bGVzL25neC1ranVhL25neC1ranVhLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxNQUFNLEVBQ04sS0FBSyxFQUVMLE1BQU0sRUFDTixXQUFXLEVBRVgsU0FBUyxFQUNULFlBQVksRUFDYixNQUFNLGVBQWUsQ0FBQztBQUd2QixPQUFPLEtBQUssSUFBSSxNQUFNLFVBQVUsQ0FBQzs7QUFhakMsTUFBTSxPQUFPLGdCQUFnQjtJQWdJM0IsWUFBeUMsVUFBa0I7UUFBbEIsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQTlIM0Q7O1dBRUc7UUFFSCxXQUFNLEdBQStCLEtBQUssQ0FBQztRQUUzQzs7V0FFRztRQUVILFVBQUssR0FBRyxJQUFJLENBQUM7UUFFYjs7V0FFRztRQUVILGVBQVUsR0FBRyxDQUFDLENBQUM7UUFFZjs7V0FFRztRQUVILFlBQU8sR0FBMEIsR0FBRyxDQUFDO1FBRXJDOztXQUVHO1FBRUgsU0FBSSxHQUFHLEdBQUcsQ0FBQztRQUVYOztXQUVHO1FBRUgsVUFBSyxHQUFrQixTQUFTLENBQUM7UUFFakM7O1dBRUc7UUFFSCxTQUFJLEdBQUcsTUFBTSxDQUFDO1FBRWQ7O1dBRUc7UUFFSCxTQUFJLEdBQUcsTUFBTSxDQUFDO1FBRWQ7O1dBRUc7UUFFSCxTQUFJLEdBQUcsRUFBRSxDQUFDO1FBRVY7O1dBRUc7UUFFSCxZQUFPLEdBQUcsQ0FBQyxDQUFDO1FBRVo7O1dBRUc7UUFFSCxVQUFLLEdBQUcsQ0FBQyxDQUFDO1FBRVY7O1dBRUc7UUFFSCxTQUFJLEdBQThELE9BQU8sQ0FBQztRQUUxRTs7V0FFRztRQUVILFVBQUssR0FBb0IsRUFBRSxDQUFDO1FBRTVCLFVBQUssR0FBb0IsRUFBRSxDQUFDO1FBRTVCLFVBQUssR0FBb0Is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REgsS0FBSztnQkFPTixLQUFLO3NCQURKLEtBQUs7Z0JBR04sS0FBSztzQkFESixLQUFLO2dCQUdOLEtBQUs7c0JBREosS0FBSztnQkFHTixLQUFLO3NCQURKLEtBQUs7Z0JBR04sV0FBVztzQkFEVixLQUFLO2dCQU9OLEtBQUs7c0JBREosS0FBSztnQkFHTixRQUFRO3NCQURQLEtBQUs7Z0JBR04sU0FBUztzQkFEUixLQUFLO2dCQUdOLFdBQVc7c0JBRFYsS0FBSztnQkFRTixXQUFXO3NCQURWLEtBQUs7Z0JBUU4sUUFBUTtzQkFEUCxLQUFLO2dCQU9OLFNBQVM7c0JBRFIsS0FBSztnQkFJTixZQUFZO3NCQURYLE1BQU07Z0JBSVAsR0FBRztzQkFERixTQUFTO3VCQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBJbmplY3QsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE91dHB1dCxcbiAgUExBVEZPUk1fSUQsXG4gIFNpbXBsZUNoYW5nZXMsXG4gIFZpZXdDaGlsZCxcbiAgRXZlbnRFbWl0dGVyXG59IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5cbmltcG9ydCB7S2p1YU9wdGlvbnN9IGZyb20gXCJranVhLXN2Z1wiO1xuaW1wb3J0ICogYXMga2p1YSBmcm9tIFwia2p1YS1zdmdcIjtcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBcIm5neC1ranVhXCIsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBbY2xhc3NdPVwiY3NzQ2xhc3NcIiAjZWxlbT48L2Rpdj5gLFxuICBzdHlsZXM6IFtgXG4gICAgOmhvc3Qge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgfVxuICBgXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgTmd4S2p1YUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcyB7XG5cbiAgLyoqXG4gICAqIHJlbmRlciBtZXRob2RcbiAgICovXG4gIEBJbnB1dCgpXG4gIHJlbmRlcjogXCJpbWFnZVwiIHwgXCJzdmdcIiB8IFwiY2FudmFzXCIgPSBcInN2Z1wiO1xuXG4gIC8qKlxuICAgKiByZW5kZXIgcGl4ZWwtcGVyZmVjdCBsaW5lc1xuICAgKi9cbiAgQElucHV0KClcbiAgY3Jpc3AgPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBtaW5pbXVtIHZlcnNpb249IDEuLjQwXG4gICAqL1xuICBASW5wdXQoKVxuICBtaW5WZXJzaW9uID0gMTtcblxuICAvKipcbiAgICogZXJyb3IgY29ycmVjdGlvbiBsZXZlbFxuICAgKi9cbiAgQElucHV0KClcbiAgZWNMZXZlbDogXCJMXCIgfCBcIk1cIiB8IFwiUVwiIHwgXCJIXCIgPSBcIkxcIjtcblxuICAvKipcbiAgICogc2l6ZSBpbiBwaXhlbFxuICAgKi9cbiAgQElucHV0KClcbiAgc2l6ZSA9IDIwMDtcblxuICAvKipcbiAgICogcGl4ZWwtcmF0aW87IHVuZGVmaW5lZCBmb3IgZGV2aWNlUGl4ZWxSYXRpb1xuICAgKi9cbiAgQElucHV0KClcbiAgcmF0aW86IG51bWJlciB8IG51bGwgPSB1bmRlZmluZWQ7XG5cbiAgLyoqXG4gICAqIGNvZGUgY29sb3JcbiAgICovXG4gIEBJbnB1dCgpXG4gIGZpbGwgPSBcIiMzMzNcIjtcblxuICAvKipcbiAgICogYmFja2dyb3VuZCBjb2xvclxuICAgKi9cbiAgQElucHV0KClcbiAgYmFjayA9IFwiI2ZmZlwiO1xuXG4gIC8qKlxuICAgKiBjb250ZW50XG4gICAqL1xuICBASW5wdXQoKVxuICB0ZXh0ID0gXCJcIjtcblxuICAvKipcbiAgICogcm91bmRlbmQgY29ybmVycyBpbiBwYz0gMC4uMTAwXG4gICAqL1xuICBASW5wdXQoKVxuICByb3VuZGVkID0gMDtcblxuICAvKipcbiAgICogcXVpZXQgem9uZSBpbiBtb2R1bGVzXG4gICAqL1xuICBASW5wdXQoKVxuICBxdWlldCA9IDA7XG5cbiAgLyoqXG4gICAqIG1vZGVzXG4gICAqL1xuICBASW5wdXQoKVxuICBtb2RlOiBcInBsYWluXCIgfCBcImxhYmVsXCIgfCBcImltYWdlXCIgfCBcImltYWdlbGFiZWxcIiB8IFwibGFiZWxpbWFnZVwiID0gXCJwbGFpblwiO1xuXG4gIC8qKlxuICAgKiBsYWJlbC9pbWFnZSBzaXplIGFuZCBwb3MgaW4gcGM9IDAuLjEwMFxuICAgKi9cbiAgQElucHV0KClcbiAgbVNpemU6IG51bWJlcnxudW1iZXJbXSA9IDMwO1xuICBASW5wdXQoKVxuICBtUG9zWDogbnVtYmVyfG51bWJlcltdID0gNTA7XG4gIEBJbnB1dCgpXG4gIG1Qb3NZOiBudW1iZXJ8bnVtYmVyW10gPSA1MDtcbiAgQElucHV0KClcbiAgaW1hZ2U6IG51bGwgfCBIVE1MSW1hZ2VFbGVtZW50IHwgc3RyaW5nID0gdW5kZWZpbmVkO1xuICBASW5wdXQoKVxuICBpbWFnZUFzQ29kZSA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBsYWJlbFxuICAgKi9cbiAgQElucHV0KClcbiAgbGFiZWwgPSBcIlwiO1xuICBASW5wdXQoKVxuICBmb250bmFtZSA9IFwic2Fucy1zZXJpZlwiO1xuICBASW5wdXQoKVxuICBmb250Y29sb3IgPSBcIiMzMzNcIjtcbiAgQElucHV0KClcbiAgZm9udG91dGxpbmUgPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBJZiB0cnVlLCByZW5kZXJpbmcgaXMgZG9uZSBpbnNpZGUgXCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWVcIi1jYWxsLlxuICAgKiBVc2UgdGhpcyBpZiB5b3Ugd2FudCB0byBnZW5lcmF0ZSBtb3JlIHRoYW4gb25lIGNvZGUgKGUuZy4gYmF0Y2gpXG4gICAqL1xuICBASW5wdXQoKVxuICByZW5kZXJBc3luYyA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBJZiBzZXQsIHRoaXMgY3NzLWNsYXNzIHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlIGRpdi1jb250YWluZXIgdGhhdCBjb250YWluc1xuICAgKiB0aGUgcXItY29kZSAod2hpY2ggaXMgZWl0aGVyIGFuIGltZyBvciBhIGNhbnZhcylcbiAgICovXG4gIEBJbnB1dCgpXG4gIGNzc0NsYXNzOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIGFuIG9wdGlvbmFsIEhUTUwtSUQtYXR0cmlidXRlIGZvciB0aGUgZWxlbWVudCAod29ya3Mgb25seSB3aXRoIHJlbmRlci1tb2RlIFNWRyBhbmQgaW1hZ2UpXG4gICAqL1xuICBASW5wdXQoKVxuICBlbGVtZW50SWQ6IHN0cmluZztcblxuICBAT3V0cHV0KClcbiAgY29kZUZpbmlzaGVkID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgQFZpZXdDaGlsZChcImVsZW1cIilcbiAgZGl2O1xuXG4gIHByaXZhdGUgdmlld0luaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBPYmplY3QpIHtcblxuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMudmlld0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB0aGlzLnVwZGF0ZVZpZXcoKTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAodGhpcy52aWV3SW5pdGlhbGl6ZWQpIHtcbiAgICAgIHRoaXMudXBkYXRlVmlldygpO1xuICAgIH1cbiAgfVxuXG4gIGdldCB0ZW1wbGF0ZSgpOiBOb2RlIHtcbiAgICBjb25zdCBzZXR0aW5nczogS2p1YU9wdGlvbnMgPSB7XG4gICAgICByZW5kZXI6IHRoaXMucmVuZGVyLFxuICAgICAgY3Jpc3A6IHRoaXMuY3Jpc3AsXG4gICAgICBtaW5WZXJzaW9uOiB0aGlzLm1pblZlcnNpb24sXG4gICAgICBlY0xldmVsOiB0aGlzLmVjTGV2ZWwsXG4gICAgICBzaXplOiB0aGlzLnNpemUsXG4gICAgICByYXRpbzogdGhpcy5yYXRpbyxcbiAgICAgIGZpbGw6IHRoaXMuZmlsbCxcbiAgICAgIGJhY2s6IHRoaXMuYmFjayxcbiAgICAgIHRleHQ6IHRoaXMudGV4dCxcbiAgICAgIHJvdW5kZWQ6IHRoaXMucm91bmRlZCxcbiAgICAgIHF1aWV0OiB0aGlzLnF1aWV0LFxuICAgICAgbW9kZTogdGhpcy5tb2RlLFxuICAgICAgbVNpemU6IHRoaXMubVNpemUsXG4gICAgICBtUG9zWDogdGhpcy5tUG9zWCxcbiAgICAgIG1Qb3NZOiB0aGlzLm1Qb3NZLFxuICAgICAgbGFiZWw6IHRoaXMubGFiZWwsXG4gICAgICBmb250bmFtZTogdGhpcy5mb250bmFtZSxcbiAgICAgIGZvbnRjb2xvcjogdGhpcy5mb250Y29sb3IsXG4gICAgICBpbWFnZTogdGhpcy5pbWFnZSxcbiAgICAgIGZvbnRvdXRsaW5lOiB0aGlzLmZvbnRvdXRsaW5lLFxuICAgICAgaW1hZ2VBc0NvZGU6IHRoaXMuaW1hZ2VBc0NvZGUsXG4gICAgICBlbGVtZW50SWQ6IHRoaXMuZWxlbWVudElkXG4gICAgfTtcbiAgICByZXR1cm4ga2p1YShzZXR0aW5ncyk7XG4gIH1cblxuICByZW5kZXJDb2RlKCkge1xuICAgIHRoaXMuZGl2Lm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MID0gXCJcIjtcbiAgICBjb25zdCBub2RlID0gdGhpcy50ZW1wbGF0ZTtcbiAgICB0aGlzLmRpdi5uYXRpdmVFbGVtZW50LmFwcGVuZENoaWxkKG5vZGUpO1xuICAgIHRoaXMuY29kZUZpbmlzaGVkLm5leHQobm9kZSk7XG4gIH1cblxuICB1cGRhdGVWaWV3KCkge1xuICAgIHRoaXMuZGl2Lm5hdGl2ZUVsZW1lbnQuc3R5bGUud2lkdGggPSArdGhpcy5zaXplO1xuICAgIHRoaXMuZGl2Lm5hdGl2ZUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gK3RoaXMuc2l6ZTtcbiAgICBpZiAodHlwZW9mIHRoaXMuaW1hZ2UgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgaW1nLmNyb3NzT3JpZ2luID0gXCJhbm9ueW1vdXNcIjtcbiAgICAgIGltZy5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnJlbmRlckFzeW5jKSB7XG4gICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHRoaXMucmVuZGVyQ29kZSgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnJlbmRlckNvZGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaW1nLnNyYyA9ICdkYXRhOmltYWdlL3BuZztiYXNlNjQsJyArIHRoaXMuaW1hZ2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLnJlbmRlckFzeW5jKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnJlbmRlckNvZGUoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlckNvZGUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==