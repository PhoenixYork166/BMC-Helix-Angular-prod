export class QrCodeHelper {
    /**
     *  Make the code for creating an SMS.
     *  Number can be provided as number or string (useful for international format e.g. +1 for USA)
     *
     * @paramnumber
     * @param text
     */
    static makeSMS(number, text) {
        if (text) {
            if (text.length > 160) {
                return `SMSTO:${number}:${text.substr(0, 160)}`;
            }
            else {
                return `SMSTO:${number}:${text}`;
            }
        }
        else {
            return `SMSTO:${number}`;
        }
    }
    /**
     * Make the code for making a phone call
     * Number can be provided as number or string (useful for international format e.g. +1 for USA)
     *
     * @param number
     */
    static makeCall(number) {
        return `tel:${number}`;
    }
    /**
     * Make the code for encoding a location
     *
     * @param lat
     * @param lon
     * @param meters
     */
    static makeGeo(lat, lon, meters = 400) {
        return `geo:${lat},${lon},${meters}`;
    }
    /**
     * Make the code for encoding an event in iCal format
     * You have to do the encoding for the begin and end by yourself (use moment.js!)
     *
     * @param description
     * @param begin
     * @param end
     */
    static makeEvent(description, begin, end) {
        return `BEGIN:VEVENT
SUMMARY:${description}
DTSTART:${begin}
DTEND:${end}
END:VEVENT`;
    }
    /**
     * Make the code for an Email
     *
     * @param recipient
     * @param subject
     * @param text
     */
    static makeEmail(recipient, subject, text) {
        let retVal = `MATMSG:TO:${recipient};`;
        if (subject) {
            retVal += `SUB:${subject}`;
        }
        retVal += `;`;
        if (text) {
            retVal += `BODY:${text}`;
        }
        retVal += `;;`;
        return retVal;
    }
    /**
     * Make the code that lets user login to a WiFi
     * If no pass is provided, the WiFi is considered as not encrypted (no WPA)
     *
     * @param ssid
     * @param pass
     * @param hidden
     */
    static makeWifi(ssid, pass, hidden = false) {
        let retVal = `WIFI:${!!pass ? "T:WPA" : "T:nopass"};S:${ssid};`;
        if (pass) {
            retVal += `P:${pass}`;
        }
        retVal += `;`;
        if (hidden) {
            retVal += `H:true`;
        }
        retVal += `;`;
        return retVal;
    }
    /**
     * Make the code that encodes contact information.
     * Numbers can be provided as number or string (useful for international format e.g. +1 for USA)
     * Encoding is done with MECARD-format and NOT VCard! VCard gives a longer string and therefore a
     * bigger code which has a negative impact on readability for scanners. You can, of course, create
     * a VCard string as well but the format is more complex.
     *
     * @param name
     * @param telNumbers
     * @param address, values separated with comma
     * @param email
     * @param url
     */
    static makeContactMeCard(name, telNumbers, address, email, url) {
        let retVal = `MECARD:N:${name};`;
        if (address) {
            retVal += `ADR:${address};`;
        }
        if (telNumbers && telNumbers.length > 0) {
            for (let i = 0; i < telNumbers.length; i++) {
                retVal += `TEL:${telNumbers[i]};`;
            }
        }
        if (email) {
            retVal += `EMAIL:${email};`;
        }
        if (url) {
            retVal += `URL:${url};`;
        }
        retVal += `;`;
        return retVal;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXItY29kZS5oZWxwZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvYXBwL21vZHVsZXMvbmd4LWtqdWEvcXItY29kZS5oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLFlBQVk7SUFFdkI7Ozs7OztPQU1HO0lBQ0gsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUF1QixFQUFFLElBQWE7UUFDbkQsSUFBSSxJQUFJLEVBQUU7WUFDUixJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO2dCQUNyQixPQUFPLFNBQVMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUM7YUFDakQ7aUJBQU07Z0JBQ0wsT0FBTyxTQUFTLE1BQU0sSUFBSSxJQUFJLEVBQUUsQ0FBQzthQUNsQztTQUNGO2FBQU07WUFDTCxPQUFPLFNBQVMsTUFBTSxFQUFFLENBQUM7U0FDMUI7SUFDSCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQXVCO1FBQ3JDLE9BQU8sT0FBTyxNQUFNLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFXLEVBQUUsR0FBVyxFQUFFLE1BQU0sR0FBRyxHQUFHO1FBQ25ELE9BQU8sT0FBTyxHQUFHLElBQUksR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO0lBQ3ZDLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsTUFBTSxDQUFDLFNBQVMsQ0FBQyxXQUFtQixFQUFFLEtBQWEsRUFBRSxHQUFXO1FBQzlELE9BQU87VUFDRCxXQUFXO1VBQ1gsS0FBSztRQUNQLEdBQUc7V0FDQSxDQUFDO0lBQ1YsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBaUIsRUFBRSxPQUFnQixFQUFFLElBQWE7UUFDakUsSUFBSSxNQUFNLEdBQUcsYUFBYSxTQUFTLEdBQUcsQ0FBQztRQUN2QyxJQUFJLE9BQU8sRUFBRTtZQUNYLE1BQU0sSUFBSSxPQUFPLE9BQU8sRUFBRSxDQUFDO1NBQzVCO1FBQ0QsTUFBTSxJQUFJLEdBQUcsQ0FBQztRQUNkLElBQUksSUFBSSxFQUFFO1lBQ1IsTUFBTSxJQUFJLFFBQVEsSUFBSSxFQUFFLENBQUM7U0FDMUI7UUFDRCxNQUFNLElBQUksSUFBSSxDQUFDO1FBQ2YsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxNQUFNLENBQUMsUUFBUSxDQUFDLElBQVksRUFBRSxJQUFhLEVBQUUsTUFBTSxHQUFHLEtBQUs7UUFDekQsSUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLFVBQVUsTUFBTSxJQUFJLEdBQUcsQ0FBQztRQUNoRSxJQUFJLElBQUksRUFBRTtZQUNSLE1BQU0sSUFBSSxLQUFLLElBQUksRUFBRSxDQUFDO1NBQ3ZCO1FBQ0QsTUFBTSxJQUFJLEdBQUcsQ0FBQztRQUNkLElBQUksTUFBTSxFQUFFO1lBQ1YsTUFBTSxJQUFJLFFBQVEsQ0FBQztTQUNwQjtRQUNELE1BQU0sSUFBSSxHQUFHLENBQUM7UUFDZCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQ7Ozs7Ozs7Ozs7OztPQVlHO0lBQ0gsTUFBTSxDQUFDLGlCQUFpQixDQUFDLElBQVksRUFBRSxVQUFnQyxFQUFFLE9BQWdCLEVBQUUsS0FBYyxFQUFFLEdBQVk7UUFDckgsSUFBSSxNQUFNLEdBQUcsWUFBWSxJQUFJLEdBQUcsQ0FBQztRQUNqQyxJQUFJLE9BQU8sRUFBRTtZQUNYLE1BQU0sSUFBSSxPQUFPLE9BQU8sR0FBRyxDQUFDO1NBQzdCO1FBQ0QsSUFBSSxVQUFVLElBQUksVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDdkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzFDLE1BQU0sSUFBSSxPQUFPLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO2FBQ25DO1NBQ0Y7UUFDRCxJQUFJLEtBQUssRUFBRTtZQUNULE1BQU0sSUFBSSxTQUFTLEtBQUssR0FBRyxDQUFDO1NBQzdCO1FBQ0QsSUFBSSxHQUFHLEVBQUU7WUFDUCxNQUFNLElBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQztTQUN6QjtRQUNELE1BQU0sSUFBSSxHQUFHLENBQUM7UUFDZCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBR0YiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgUXJDb2RlSGVscGVyIHtcblxuICAvKipcbiAgICogIE1ha2UgdGhlIGNvZGUgZm9yIGNyZWF0aW5nIGFuIFNNUy5cbiAgICogIE51bWJlciBjYW4gYmUgcHJvdmlkZWQgYXMgbnVtYmVyIG9yIHN0cmluZyAodXNlZnVsIGZvciBpbnRlcm5hdGlvbmFsIGZvcm1hdCBlLmcuICsxIGZvciBVU0EpXG4gICAqXG4gICAqIEBwYXJhbW51bWJlclxuICAgKiBAcGFyYW0gdGV4dFxuICAgKi9cbiAgc3RhdGljIG1ha2VTTVMobnVtYmVyOiBudW1iZXIgfCBzdHJpbmcsIHRleHQ/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICh0ZXh0KSB7XG4gICAgICBpZiAodGV4dC5sZW5ndGggPiAxNjApIHtcbiAgICAgICAgcmV0dXJuIGBTTVNUTzoke251bWJlcn06JHt0ZXh0LnN1YnN0cigwLCAxNjApfWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYFNNU1RPOiR7bnVtYmVyfToke3RleHR9YDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGBTTVNUTzoke251bWJlcn1gO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNYWtlIHRoZSBjb2RlIGZvciBtYWtpbmcgYSBwaG9uZSBjYWxsXG4gICAqIE51bWJlciBjYW4gYmUgcHJvdmlkZWQgYXMgbnVtYmVyIG9yIHN0cmluZyAodXNlZnVsIGZvciBpbnRlcm5hdGlvbmFsIGZvcm1hdCBlLmcuICsxIGZvciBVU0EpXG4gICAqXG4gICAqIEBwYXJhbSBudW1iZXJcbiAgICovXG4gIHN0YXRpYyBtYWtlQ2FsbChudW1iZXI6IG51bWJlciB8IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGB0ZWw6JHtudW1iZXJ9YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYWtlIHRoZSBjb2RlIGZvciBlbmNvZGluZyBhIGxvY2F0aW9uXG4gICAqXG4gICAqIEBwYXJhbSBsYXRcbiAgICogQHBhcmFtIGxvblxuICAgKiBAcGFyYW0gbWV0ZXJzXG4gICAqL1xuICBzdGF0aWMgbWFrZUdlbyhsYXQ6IHN0cmluZywgbG9uOiBzdHJpbmcsIG1ldGVycyA9IDQwMCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBnZW86JHtsYXR9LCR7bG9ufSwke21ldGVyc31gO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2UgdGhlIGNvZGUgZm9yIGVuY29kaW5nIGFuIGV2ZW50IGluIGlDYWwgZm9ybWF0XG4gICAqIFlvdSBoYXZlIHRvIGRvIHRoZSBlbmNvZGluZyBmb3IgdGhlIGJlZ2luIGFuZCBlbmQgYnkgeW91cnNlbGYgKHVzZSBtb21lbnQuanMhKVxuICAgKlxuICAgKiBAcGFyYW0gZGVzY3JpcHRpb25cbiAgICogQHBhcmFtIGJlZ2luXG4gICAqIEBwYXJhbSBlbmRcbiAgICovXG4gIHN0YXRpYyBtYWtlRXZlbnQoZGVzY3JpcHRpb246IHN0cmluZywgYmVnaW46IHN0cmluZywgZW5kOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgQkVHSU46VkVWRU5UXG5TVU1NQVJZOiR7ZGVzY3JpcHRpb259XG5EVFNUQVJUOiR7YmVnaW59XG5EVEVORDoke2VuZH1cbkVORDpWRVZFTlRgO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2UgdGhlIGNvZGUgZm9yIGFuIEVtYWlsXG4gICAqXG4gICAqIEBwYXJhbSByZWNpcGllbnRcbiAgICogQHBhcmFtIHN1YmplY3RcbiAgICogQHBhcmFtIHRleHRcbiAgICovXG4gIHN0YXRpYyBtYWtlRW1haWwocmVjaXBpZW50OiBzdHJpbmcsIHN1YmplY3Q/OiBzdHJpbmcsIHRleHQ/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGxldCByZXRWYWwgPSBgTUFUTVNHOlRPOiR7cmVjaXBpZW50fTtgO1xuICAgIGlmIChzdWJqZWN0KSB7XG4gICAgICByZXRWYWwgKz0gYFNVQjoke3N1YmplY3R9YDtcbiAgICB9XG4gICAgcmV0VmFsICs9IGA7YDtcbiAgICBpZiAodGV4dCkge1xuICAgICAgcmV0VmFsICs9IGBCT0RZOiR7dGV4dH1gO1xuICAgIH1cbiAgICByZXRWYWwgKz0gYDs7YDtcbiAgICByZXR1cm4gcmV0VmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2UgdGhlIGNvZGUgdGhhdCBsZXRzIHVzZXIgbG9naW4gdG8gYSBXaUZpXG4gICAqIElmIG5vIHBhc3MgaXMgcHJvdmlkZWQsIHRoZSBXaUZpIGlzIGNvbnNpZGVyZWQgYXMgbm90IGVuY3J5cHRlZCAobm8gV1BBKVxuICAgKlxuICAgKiBAcGFyYW0gc3NpZFxuICAgKiBAcGFyYW0gcGFzc1xuICAgKiBAcGFyYW0gaGlkZGVuXG4gICAqL1xuICBzdGF0aWMgbWFrZVdpZmkoc3NpZDogc3RyaW5nLCBwYXNzPzogc3RyaW5nLCBoaWRkZW4gPSBmYWxzZSk6IHN0cmluZyB7XG4gICAgbGV0IHJldFZhbCA9IGBXSUZJOiR7ISFwYXNzID8gXCJUOldQQVwiIDogXCJUOm5vcGFzc1wifTtTOiR7c3NpZH07YDtcbiAgICBpZiAocGFzcykge1xuICAgICAgcmV0VmFsICs9IGBQOiR7cGFzc31gO1xuICAgIH1cbiAgICByZXRWYWwgKz0gYDtgO1xuICAgIGlmIChoaWRkZW4pIHtcbiAgICAgIHJldFZhbCArPSBgSDp0cnVlYDtcbiAgICB9XG4gICAgcmV0VmFsICs9IGA7YDtcbiAgICByZXR1cm4gcmV0VmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2UgdGhlIGNvZGUgdGhhdCBlbmNvZGVzIGNvbnRhY3QgaW5mb3JtYXRpb24uXG4gICAqIE51bWJlcnMgY2FuIGJlIHByb3ZpZGVkIGFzIG51bWJlciBvciBzdHJpbmcgKHVzZWZ1bCBmb3IgaW50ZXJuYXRpb25hbCBmb3JtYXQgZS5nLiArMSBmb3IgVVNBKVxuICAgKiBFbmNvZGluZyBpcyBkb25lIHdpdGggTUVDQVJELWZvcm1hdCBhbmQgTk9UIFZDYXJkISBWQ2FyZCBnaXZlcyBhIGxvbmdlciBzdHJpbmcgYW5kIHRoZXJlZm9yZSBhXG4gICAqIGJpZ2dlciBjb2RlIHdoaWNoIGhhcyBhIG5lZ2F0aXZlIGltcGFjdCBvbiByZWFkYWJpbGl0eSBmb3Igc2Nhbm5lcnMuIFlvdSBjYW4sIG9mIGNvdXJzZSwgY3JlYXRlXG4gICAqIGEgVkNhcmQgc3RyaW5nIGFzIHdlbGwgYnV0IHRoZSBmb3JtYXQgaXMgbW9yZSBjb21wbGV4LlxuICAgKlxuICAgKiBAcGFyYW0gbmFtZVxuICAgKiBAcGFyYW0gdGVsTnVtYmVyc1xuICAgKiBAcGFyYW0gYWRkcmVzcywgdmFsdWVzIHNlcGFyYXRlZCB3aXRoIGNvbW1hXG4gICAqIEBwYXJhbSBlbWFpbFxuICAgKiBAcGFyYW0gdXJsXG4gICAqL1xuICBzdGF0aWMgbWFrZUNvbnRhY3RNZUNhcmQobmFtZTogc3RyaW5nLCB0ZWxOdW1iZXJzPzogc3RyaW5nW10gfCBudW1iZXJbXSwgYWRkcmVzcz86IHN0cmluZywgZW1haWw/OiBzdHJpbmcsIHVybD86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgbGV0IHJldFZhbCA9IGBNRUNBUkQ6Tjoke25hbWV9O2A7XG4gICAgaWYgKGFkZHJlc3MpIHtcbiAgICAgIHJldFZhbCArPSBgQURSOiR7YWRkcmVzc307YDtcbiAgICB9XG4gICAgaWYgKHRlbE51bWJlcnMgJiYgdGVsTnVtYmVycy5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRlbE51bWJlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmV0VmFsICs9IGBURUw6JHt0ZWxOdW1iZXJzW2ldfTtgO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW1haWwpIHtcbiAgICAgIHJldFZhbCArPSBgRU1BSUw6JHtlbWFpbH07YDtcbiAgICB9XG4gICAgaWYgKHVybCkge1xuICAgICAgcmV0VmFsICs9IGBVUkw6JHt1cmx9O2A7XG4gICAgfVxuICAgIHJldFZhbCArPSBgO2A7XG4gICAgcmV0dXJuIHJldFZhbDtcbiAgfVxuXG5cbn1cbiJdfQ==