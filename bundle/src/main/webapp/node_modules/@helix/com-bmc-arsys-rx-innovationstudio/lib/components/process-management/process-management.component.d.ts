import { ErrorHandler, NgZone, OnDestroy, OnInit, QueryList, TemplateRef } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { TranslateService } from '@ngx-translate/core';
import { ActiveTabChangeEvent, AdaptDockedPanelService, AdaptModalService, RxSelectOption, SelectTexts } from '@bmc-ux/adapt-angular';
import { Observable, Subscription } from 'rxjs';
import moment from 'moment-es6';
import { RxModalService } from '@helix/platform/ui-kit';
import { RxBundleCacheService, RxCommandFactoryService, RxDefinitionNameService, RxGlobalCacheService, RxNotificationService, RxPageTitleService, RxPreviousStateService, RxSessionExpirationService, RxSystemConfigurationService } from '@helix/platform/shared/api';
import { RxGainsightConfiguratorService } from '@helix/platform/shared/components';
import { IRecordGridConfig, RecordGridComponent } from '@helix/platform/view/components';
import { RxProcessDefinitionDataPageService, RxProcessDefinitionService, RxProcessInstanceCountsByStatusDataPageService, RxProcessInstanceDataPageService, RxProcessInstanceService } from '@helix/platform/process/api';
import { IProcessManagementModel } from './process-management.interface';
import * as i0 from "@angular/core";
export declare class ProcessManagementComponent implements OnInit, OnDestroy {
    private activatedRoute;
    private adaptDockedPanelService;
    private adaptModalService;
    private errorHandler;
    private ngZone;
    private router;
    private rxBundleCacheService;
    private rxCommandFactoryService;
    private rxDefinitionNameService;
    private rxGainsightConfiguratorService;
    private rxGlobalCacheService;
    private rxModalService;
    private rxNotificationService;
    private rxPageTitleService;
    private rxPreviousStateService;
    private rxProcessDefinitionDataPageService;
    private rxProcessDefinitionService;
    private rxProcessInstanceDataPageService;
    private rxProcessInstanceCountsByStatusDataPageService;
    private rxProcessInstanceService;
    private rxSessionExpirationService;
    private rxSystemConfigurationService;
    private translateService;
    contextKeyCellTemplate: TemplateRef<any>;
    processDefinitionCellTemplate: TemplateRef<any>;
    recordGrids: QueryList<RecordGridComponent>;
    activeTabIndex: number;
    selectedProcess: RxSelectOption;
    activatedTabs: {
        [x: string]: boolean;
    };
    busySubscription: Subscription;
    innovationStudioBundleId: string;
    processInstanceStatuses: string[];
    selectedTimeframe: RxSelectOption;
    tabs: {
        [x: string]: {
            title: any;
            badgeType: string;
            status: string;
            guid: string;
            gridColumns: {
                title: string;
                fieldId: string;
                searchable: boolean;
                sortable: boolean;
            }[];
            fieldDefinitions: {
                id: string;
                resourceType: string;
            }[];
        };
    };
    texts: SelectTexts;
    timeframes: {
        label: any;
        id: string;
        value: moment.Duration;
    }[];
    private activeTabStatus;
    private destroyed$;
    private refreshProcessInstanceCountsSubject;
    private refreshProcessDataSubject;
    private breadcrumbItems$;
    private bundleId$;
    private bundleDescriptor$;
    private isProcessHistoryEnabled$;
    private processActionButtonsState$;
    private processDefinitionOptions$;
    private processInstanceCounts$;
    vm$: Observable<IProcessManagementModel>;
    constructor(activatedRoute: ActivatedRoute, adaptDockedPanelService: AdaptDockedPanelService, adaptModalService: AdaptModalService, errorHandler: ErrorHandler, ngZone: NgZone, router: Router, rxBundleCacheService: RxBundleCacheService, rxCommandFactoryService: RxCommandFactoryService, rxDefinitionNameService: RxDefinitionNameService, rxGainsightConfiguratorService: RxGainsightConfiguratorService, rxGlobalCacheService: RxGlobalCacheService, rxModalService: RxModalService, rxNotificationService: RxNotificationService, rxPageTitleService: RxPageTitleService, rxPreviousStateService: RxPreviousStateService, rxProcessDefinitionDataPageService: RxProcessDefinitionDataPageService, rxProcessDefinitionService: RxProcessDefinitionService, rxProcessInstanceDataPageService: RxProcessInstanceDataPageService, rxProcessInstanceCountsByStatusDataPageService: RxProcessInstanceCountsByStatusDataPageService, rxProcessInstanceService: RxProcessInstanceService, rxSessionExpirationService: RxSessionExpirationService, rxSystemConfigurationService: RxSystemConfigurationService, translateService: TranslateService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    close(): void;
    getRecordGridConfig(status: string): Observable<IRecordGridConfig>;
    onTimeframeChange(timeframe: {
        id: string;
    }[]): void;
    optionFormatter(option: RxSelectOption): string;
    previewProcess(allowRun: boolean): void;
    refreshData(): void;
    resetProcessSelection(processDefinitionOption: RxSelectOption): void;
    runProcess(): void;
    tabChanged({ index }: ActiveTabChangeEvent): void;
    private executeAction;
    private getActionButtons;
    private getCurrentGrid;
    private getGridColumns;
    private getProcessDefinitions;
    private getProcessInstanceRuns;
    private getRecordDefinition;
    private isActionButtonDisabled;
    private runProcessWithAttachments;
    private setPageTitle;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProcessManagementComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ProcessManagementComponent, "ax-process-management", never, {}, {}, never, never>;
}
