{"version":3,"file":"process-management.service.js","sourceRoot":"","sources":["../../../../../../../libs/com-bmc-arsys-rx-innovationstudio/src/lib/components/process-management/process-management.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { forEach, map as _map } from 'lodash';\n\nimport { RxNumberUtilsService } from '@helix/platform/utils';\nimport { IPlainObject } from '@helix/platform/shared/api';\nimport {\n  AttachmentFormControlComponent,\n  BooleanFormControlComponent,\n  CounterFormControlComponent,\n  DateFormControlComponent,\n  DateTimeFormControlComponent,\n  InputListFormControlComponent,\n  RecordInstanceFormControlComponent,\n  SelectFormControlComponent,\n  TextFormControlComponent,\n  TimeFormControlComponent\n} from '@helix/platform/shared/components';\nimport { RX_RECORD_DEFINITION } from '@helix/platform/record/api';\nimport {\n  IFieldDefinitionLight,\n  IListFieldDefinitionLight,\n  ISelectionFieldDefinitionLight,\n  RX_PROCESS_DEFINITION\n} from '@helix/platform/process/api';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProcessManagementService {\n  constructor(private rxNumberUtilsService: RxNumberUtilsService) {}\n\n  buildInputParamsControls(inputParams: IFieldDefinitionLight[]): IPlainObject[] {\n    const propertyControls: IPlainObject[] = [];\n\n    forEach(inputParams, (inputParam) => {\n      const config: IPlainObject = {\n        name: inputParam.name,\n        options: {\n          label: inputParam.name,\n          required: inputParam.fieldOption === 'REQUIRED'\n        },\n        defaultValue: inputParam.defaultValue || null,\n        dataType: inputParam.resourceType,\n        validators: []\n      };\n\n      if (config.options.required) {\n        config.validators.push(Validators.required);\n      }\n\n      switch (inputParam.resourceType) {\n        case RX_RECORD_DEFINITION.resourceTypes.selection: {\n          const selectionInputParam = inputParam as ISelectionFieldDefinitionLight;\n\n          config.component = SelectFormControlComponent;\n\n          config.options = {\n            ...config.options,\n            options: _map(selectionInputParam.optionNamesById, (value, key) => ({\n              id: key,\n              name: value\n            })),\n            emptyOption: !config.options.required\n          };\n          break;\n        }\n\n        case RX_RECORD_DEFINITION.resourceTypes.recordInstance: {\n          config.component = RecordInstanceFormControlComponent;\n          break;\n        }\n\n        case RX_RECORD_DEFINITION.resourceTypes.character: {\n          config.component = TextFormControlComponent;\n          break;\n        }\n\n        case RX_RECORD_DEFINITION.resourceTypes.boolean: {\n          config.component = BooleanFormControlComponent;\n          config.options.label = '';\n          config.options.description = inputParam.name;\n          config.options.shouldDisplayAsCheckbox = config.options.required;\n          break;\n        }\n\n        case RX_RECORD_DEFINITION.resourceTypes.decimal:\n        case RX_RECORD_DEFINITION.resourceTypes.integer:\n        case RX_RECORD_DEFINITION.resourceTypes.real: {\n          config.component = CounterFormControlComponent;\n          config.options.allowIntegerOnly = inputParam.resourceType === RX_RECORD_DEFINITION.resourceTypes.integer;\n\n          if (this.rxNumberUtilsService.isFiniteNumberString(inputParam.defaultValue)) {\n            config.defaultValue = Number(inputParam.defaultValue);\n          }\n          break;\n        }\n\n        case RX_RECORD_DEFINITION.resourceTypes.dateOnly: {\n          config.component = DateFormControlComponent;\n          break;\n        }\n\n        case RX_RECORD_DEFINITION.resourceTypes.dateTime: {\n          config.component = DateTimeFormControlComponent;\n          break;\n        }\n\n        case RX_RECORD_DEFINITION.resourceTypes.timeOnly: {\n          config.component = TimeFormControlComponent;\n          break;\n        }\n\n        case RX_RECORD_DEFINITION.resourceTypes.attachment: {\n          config.component = AttachmentFormControlComponent;\n          break;\n        }\n\n        case RX_RECORD_DEFINITION.resourceTypes.list: {\n          const listInputParam = inputParam as IListFieldDefinitionLight;\n\n          if (listInputParam.subType === RX_PROCESS_DEFINITION.processVariableSubTypes.attachment) {\n            config.component = AttachmentFormControlComponent;\n            config.options.filesCount = '1000';\n          } else {\n            config.component = InputListFormControlComponent;\n          }\n          break;\n        }\n\n        default: {\n          config.component = TextFormControlComponent;\n          break;\n        }\n      }\n      propertyControls.push(config);\n    });\n\n    return propertyControls;\n  }\n\n  buildInputParamsModel(inputParams: IFieldDefinitionLight[]): IPlainObject {\n    const propertyModel: IPlainObject = {};\n\n    forEach(inputParams, (inputParam) => {\n      if (inputParam.resourceType === RX_RECORD_DEFINITION.resourceTypes.boolean) {\n        if (inputParam.defaultValue === '1') {\n          propertyModel[inputParam.name] = true;\n        } else if (inputParam.defaultValue === '0') {\n          propertyModel[inputParam.name] = false;\n        } else {\n          propertyModel[inputParam.name] = inputParam.defaultValue;\n        }\n      } else {\n        propertyModel[inputParam.name] = inputParam.defaultValue ?? null;\n      }\n    });\n\n    return propertyModel;\n  }\n}\n"]}