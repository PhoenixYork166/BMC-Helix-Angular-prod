{"version":3,"file":"external-data.service.js","sourceRoot":"","sources":["../../../../../../../libs/com-bmc-arsys-rx-innovationstudio/src/lib/services/external-data/external-data.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAEhC,OAAO,EAAE,GAAG,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAChD,OAAO,EAAuB,mCAAmC,EAAE,MAAM,8BAA8B,CAAC;AAExG,OAAO,EAAmB,0BAA0B,EAAE,MAAM,4BAA4B,CAAC;AACzF,OAAO,EAAE,iCAAiC,EAAE,MAAM,6BAA6B,CAAC;AAChF,OAAO,EAAE,2BAA2B,EAAE,MAAM,iCAAiC,CAAC;;;;;;;AAG9E,MAAM,OAAO,qBAAqB;IAChC,YACU,UAAsB,EACtB,2BAAwD,EACxD,mCAAwE,EACxE,0BAAsD,EACtD,iCAAoE;QAJpE,eAAU,GAAV,UAAU,CAAY;QACtB,gCAA2B,GAA3B,2BAA2B,CAA6B;QACxD,wCAAmC,GAAnC,mCAAmC,CAAqC;QACxE,+BAA0B,GAA1B,0BAA0B,CAA4B;QACtD,sCAAiC,GAAjC,iCAAiC,CAAmC;IAC3E,CAAC;IAEJ,YAAY,CACV,QAAgB,EAChB,UAAkB,EAClB,cAAsB,EACtB,SAAiB,EACjB,SAAmB,EAAE;QAErB,MAAM,WAAW,GAAG;YAClB,QAAQ;YACR,UAAU;YACV,cAAc;SACf,CAAC;QAEF,IAAI,SAAS,CAAC,MAAM,EAAE;YACpB,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;SAC3C;QAED,IAAI,MAAM,CAAC,MAAM,EAAE;YACjB,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;SACxC;QAED,OAAO,IAAI,CAAC,2BAA2B,CAAC,GAAG,CAAC;YAC1C,MAAM,EAAE,WAAW;SACpB,CAAC,CAAC;IACL,CAAC;IAED,qBAAqB,CAAC,cAAsB,EAAE,SAAiB;QAC7D,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CACxB,wCAAwC,cAAc,IAAI,SAAS,EAAE,CACtE,CAAC;IACJ,CAAC;IAED,kBAAkB,CAAC,cAAsB;QACvC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAW,uCAAuC,cAAc,EAAE,CAAC,CAAC;IAChG,CAAC;IAED,kBAAkB;QAChB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAW,qCAAqC,CAAC,CAAC;IAC9E,CAAC;IAED,oBAAoB;QAClB,OAAO,IAAI,CAAC,0BAA0B;aACnC,gBAAgB,EAAE;aAClB,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,iCAAiC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;IACzE,CAAC;IAED,kBAAkB,CAAC,wBAAmD;QACpE,OAAO,IAAI,CAAC,mCAAmC,CAAC,GAAG,EAAE,CAAC,IAAI,CACxD,GAAG,CAAC,CAAC,mBAAoC,EAAE,EAAE;YAC3C,MAAM,CAAC,mBAAmB,CAAC,IAAI,EAAE,CAAC,QAA6B,EAAE,EAAE,CAAC,CAAC,wBAAwB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;YAE9G,mBAAmB,CAAC,SAAS,GAAG,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC;YAEhE,OAAO,mBAAmB,CAAC;QAC7B,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;;qIAjEU,qBAAqB;yIAArB,qBAAqB;2FAArB,qBAAqB;kBADjC,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { remove } from 'lodash';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { IDocumentDefinition, RxDocumentDefinitionDataPageService } from '@helix/platform/document/api';\nimport { IRecordDefinition } from '@helix/platform/record/api';\nimport { IDataPageResult, RxSessionExpirationService } from '@helix/platform/shared/api';\nimport { RxWebApiDefinitionDataPageService } from '@helix/platform/web-api/api';\nimport { RxDataSourceDataPageService } from './data-source-data-page.service';\n\n@Injectable()\nexport class RxExternalDataService {\n  constructor(\n    private httpClient: HttpClient,\n    private rxDataSourceDataPageService: RxDataSourceDataPageService,\n    private rxDocumentDefinitionDataPageService: RxDocumentDefinitionDataPageService,\n    private rxSessionExpirationService: RxSessionExpirationService,\n    private rxWebApiDefinitionDataPageService: RxWebApiDefinitionDataPageService\n  ) {}\n\n  getArsTables(\n    pageSize: number,\n    startIndex: number,\n    dataSourceName: string,\n    tableName: string,\n    sortBy: string[] = []\n  ): Observable<IDataPageResult> {\n    const queryParams = {\n      pageSize,\n      startIndex,\n      dataSourceName\n    };\n\n    if (tableName.length) {\n      Object.assign(queryParams, { tableName });\n    }\n\n    if (sortBy.length) {\n      Object.assign(queryParams, { sortBy });\n    }\n\n    return this.rxDataSourceDataPageService.get({\n      params: queryParams\n    });\n  }\n\n  getArsTableDefinition(dataSourceName: string, tableName: string): Observable<IRecordDefinition> {\n    return this.httpClient.get<IRecordDefinition>(\n      `/api/rx/application/datasource/table/${dataSourceName}/${tableName}`\n    );\n  }\n\n  getDataSourceNames(dataSourceType: string): Observable<string[]> {\n    return this.httpClient.get<string[]>(`/api/rx/application/datasource/type/${dataSourceType}`);\n  }\n\n  getDataSourceTypes(): Observable<string[]> {\n    return this.httpClient.get<string[]>('/api/rx/application/datasource/type');\n  }\n\n  getWebApiDefinitions(): Observable<IDataPageResult> {\n    return this.rxSessionExpirationService\n      .keepSessionAlive()\n      .pipe(switchMap(() => this.rxWebApiDefinitionDataPageService.get()));\n  }\n\n  getWebApiDocuments(webApiRequestDefinitions: { [key: string]: string }): Observable<IDataPageResult> {\n    return this.rxDocumentDefinitionDataPageService.get().pipe(\n      map((documentDefinitions: IDataPageResult) => {\n        remove(documentDefinitions.data, (document: IDocumentDefinition) => !webApiRequestDefinitions[document.name]);\n\n        documentDefinitions.totalSize = documentDefinitions.data.length;\n\n        return documentDefinitions;\n      })\n    );\n  }\n}\n"]}